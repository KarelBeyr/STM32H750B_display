
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9e4  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002534  9000cc84  9000cc84  0000dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000f1b8  9000f1b8  000110cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000f1b8  9000f1b8  000101b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000f1c0  9000f1c0  000110cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000f1c0  9000f1c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000f1c4  9000f1c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9000f1c8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200000d0  9000f294  000110d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20001498  9000f294  00011498  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110cc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002a664  00000000  00000000  000110fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000068  00000000  00000000  0003b75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002a560  00000000  00000000  0003b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ff9  00000000  00000000  00065d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020d8  00000000  00000000  0006ad20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018dab5  00000000  00000000  0006cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000198d  00000000  00000000  001fa8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004042d  00000000  00000000  001fc23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0023c667  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009588  00000000  00000000  0023c6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000cc6c 	.word	0x9000cc6c

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000cc6c 	.word	0x9000cc6c

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <__aeabi_uldivmod>:
90000380:	b953      	cbnz	r3, 90000398 <__aeabi_uldivmod+0x18>
90000382:	b94a      	cbnz	r2, 90000398 <__aeabi_uldivmod+0x18>
90000384:	2900      	cmp	r1, #0
90000386:	bf08      	it	eq
90000388:	2800      	cmpeq	r0, #0
9000038a:	bf1c      	itt	ne
9000038c:	f04f 31ff 	movne.w	r1, #4294967295
90000390:	f04f 30ff 	movne.w	r0, #4294967295
90000394:	f000 b988 	b.w	900006a8 <__aeabi_idiv0>
90000398:	f1ad 0c08 	sub.w	ip, sp, #8
9000039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003a0:	f000 f806 	bl	900003b0 <__udivmoddi4>
900003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ac:	b004      	add	sp, #16
900003ae:	4770      	bx	lr

900003b0 <__udivmoddi4>:
900003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003b4:	9d08      	ldr	r5, [sp, #32]
900003b6:	468e      	mov	lr, r1
900003b8:	4604      	mov	r4, r0
900003ba:	4688      	mov	r8, r1
900003bc:	2b00      	cmp	r3, #0
900003be:	d14a      	bne.n	90000456 <__udivmoddi4+0xa6>
900003c0:	428a      	cmp	r2, r1
900003c2:	4617      	mov	r7, r2
900003c4:	d962      	bls.n	9000048c <__udivmoddi4+0xdc>
900003c6:	fab2 f682 	clz	r6, r2
900003ca:	b14e      	cbz	r6, 900003e0 <__udivmoddi4+0x30>
900003cc:	f1c6 0320 	rsb	r3, r6, #32
900003d0:	fa01 f806 	lsl.w	r8, r1, r6
900003d4:	fa20 f303 	lsr.w	r3, r0, r3
900003d8:	40b7      	lsls	r7, r6
900003da:	ea43 0808 	orr.w	r8, r3, r8
900003de:	40b4      	lsls	r4, r6
900003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003e4:	fa1f fc87 	uxth.w	ip, r7
900003e8:	fbb8 f1fe 	udiv	r1, r8, lr
900003ec:	0c23      	lsrs	r3, r4, #16
900003ee:	fb0e 8811 	mls	r8, lr, r1, r8
900003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900003f6:	fb01 f20c 	mul.w	r2, r1, ip
900003fa:	429a      	cmp	r2, r3
900003fc:	d909      	bls.n	90000412 <__udivmoddi4+0x62>
900003fe:	18fb      	adds	r3, r7, r3
90000400:	f101 30ff 	add.w	r0, r1, #4294967295
90000404:	f080 80ea 	bcs.w	900005dc <__udivmoddi4+0x22c>
90000408:	429a      	cmp	r2, r3
9000040a:	f240 80e7 	bls.w	900005dc <__udivmoddi4+0x22c>
9000040e:	3902      	subs	r1, #2
90000410:	443b      	add	r3, r7
90000412:	1a9a      	subs	r2, r3, r2
90000414:	b2a3      	uxth	r3, r4
90000416:	fbb2 f0fe 	udiv	r0, r2, lr
9000041a:	fb0e 2210 	mls	r2, lr, r0, r2
9000041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000422:	fb00 fc0c 	mul.w	ip, r0, ip
90000426:	459c      	cmp	ip, r3
90000428:	d909      	bls.n	9000043e <__udivmoddi4+0x8e>
9000042a:	18fb      	adds	r3, r7, r3
9000042c:	f100 32ff 	add.w	r2, r0, #4294967295
90000430:	f080 80d6 	bcs.w	900005e0 <__udivmoddi4+0x230>
90000434:	459c      	cmp	ip, r3
90000436:	f240 80d3 	bls.w	900005e0 <__udivmoddi4+0x230>
9000043a:	443b      	add	r3, r7
9000043c:	3802      	subs	r0, #2
9000043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000442:	eba3 030c 	sub.w	r3, r3, ip
90000446:	2100      	movs	r1, #0
90000448:	b11d      	cbz	r5, 90000452 <__udivmoddi4+0xa2>
9000044a:	40f3      	lsrs	r3, r6
9000044c:	2200      	movs	r2, #0
9000044e:	e9c5 3200 	strd	r3, r2, [r5]
90000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000456:	428b      	cmp	r3, r1
90000458:	d905      	bls.n	90000466 <__udivmoddi4+0xb6>
9000045a:	b10d      	cbz	r5, 90000460 <__udivmoddi4+0xb0>
9000045c:	e9c5 0100 	strd	r0, r1, [r5]
90000460:	2100      	movs	r1, #0
90000462:	4608      	mov	r0, r1
90000464:	e7f5      	b.n	90000452 <__udivmoddi4+0xa2>
90000466:	fab3 f183 	clz	r1, r3
9000046a:	2900      	cmp	r1, #0
9000046c:	d146      	bne.n	900004fc <__udivmoddi4+0x14c>
9000046e:	4573      	cmp	r3, lr
90000470:	d302      	bcc.n	90000478 <__udivmoddi4+0xc8>
90000472:	4282      	cmp	r2, r0
90000474:	f200 8105 	bhi.w	90000682 <__udivmoddi4+0x2d2>
90000478:	1a84      	subs	r4, r0, r2
9000047a:	eb6e 0203 	sbc.w	r2, lr, r3
9000047e:	2001      	movs	r0, #1
90000480:	4690      	mov	r8, r2
90000482:	2d00      	cmp	r5, #0
90000484:	d0e5      	beq.n	90000452 <__udivmoddi4+0xa2>
90000486:	e9c5 4800 	strd	r4, r8, [r5]
9000048a:	e7e2      	b.n	90000452 <__udivmoddi4+0xa2>
9000048c:	2a00      	cmp	r2, #0
9000048e:	f000 8090 	beq.w	900005b2 <__udivmoddi4+0x202>
90000492:	fab2 f682 	clz	r6, r2
90000496:	2e00      	cmp	r6, #0
90000498:	f040 80a4 	bne.w	900005e4 <__udivmoddi4+0x234>
9000049c:	1a8a      	subs	r2, r1, r2
9000049e:	0c03      	lsrs	r3, r0, #16
900004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004a4:	b280      	uxth	r0, r0
900004a6:	b2bc      	uxth	r4, r7
900004a8:	2101      	movs	r1, #1
900004aa:	fbb2 fcfe 	udiv	ip, r2, lr
900004ae:	fb0e 221c 	mls	r2, lr, ip, r2
900004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004b6:	fb04 f20c 	mul.w	r2, r4, ip
900004ba:	429a      	cmp	r2, r3
900004bc:	d907      	bls.n	900004ce <__udivmoddi4+0x11e>
900004be:	18fb      	adds	r3, r7, r3
900004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004c4:	d202      	bcs.n	900004cc <__udivmoddi4+0x11c>
900004c6:	429a      	cmp	r2, r3
900004c8:	f200 80e0 	bhi.w	9000068c <__udivmoddi4+0x2dc>
900004cc:	46c4      	mov	ip, r8
900004ce:	1a9b      	subs	r3, r3, r2
900004d0:	fbb3 f2fe 	udiv	r2, r3, lr
900004d4:	fb0e 3312 	mls	r3, lr, r2, r3
900004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004dc:	fb02 f404 	mul.w	r4, r2, r4
900004e0:	429c      	cmp	r4, r3
900004e2:	d907      	bls.n	900004f4 <__udivmoddi4+0x144>
900004e4:	18fb      	adds	r3, r7, r3
900004e6:	f102 30ff 	add.w	r0, r2, #4294967295
900004ea:	d202      	bcs.n	900004f2 <__udivmoddi4+0x142>
900004ec:	429c      	cmp	r4, r3
900004ee:	f200 80ca 	bhi.w	90000686 <__udivmoddi4+0x2d6>
900004f2:	4602      	mov	r2, r0
900004f4:	1b1b      	subs	r3, r3, r4
900004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
900004fa:	e7a5      	b.n	90000448 <__udivmoddi4+0x98>
900004fc:	f1c1 0620 	rsb	r6, r1, #32
90000500:	408b      	lsls	r3, r1
90000502:	fa22 f706 	lsr.w	r7, r2, r6
90000506:	431f      	orrs	r7, r3
90000508:	fa0e f401 	lsl.w	r4, lr, r1
9000050c:	fa20 f306 	lsr.w	r3, r0, r6
90000510:	fa2e fe06 	lsr.w	lr, lr, r6
90000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000518:	4323      	orrs	r3, r4
9000051a:	fa00 f801 	lsl.w	r8, r0, r1
9000051e:	fa1f fc87 	uxth.w	ip, r7
90000522:	fbbe f0f9 	udiv	r0, lr, r9
90000526:	0c1c      	lsrs	r4, r3, #16
90000528:	fb09 ee10 	mls	lr, r9, r0, lr
9000052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000530:	fb00 fe0c 	mul.w	lr, r0, ip
90000534:	45a6      	cmp	lr, r4
90000536:	fa02 f201 	lsl.w	r2, r2, r1
9000053a:	d909      	bls.n	90000550 <__udivmoddi4+0x1a0>
9000053c:	193c      	adds	r4, r7, r4
9000053e:	f100 3aff 	add.w	sl, r0, #4294967295
90000542:	f080 809c 	bcs.w	9000067e <__udivmoddi4+0x2ce>
90000546:	45a6      	cmp	lr, r4
90000548:	f240 8099 	bls.w	9000067e <__udivmoddi4+0x2ce>
9000054c:	3802      	subs	r0, #2
9000054e:	443c      	add	r4, r7
90000550:	eba4 040e 	sub.w	r4, r4, lr
90000554:	fa1f fe83 	uxth.w	lr, r3
90000558:	fbb4 f3f9 	udiv	r3, r4, r9
9000055c:	fb09 4413 	mls	r4, r9, r3, r4
90000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000564:	fb03 fc0c 	mul.w	ip, r3, ip
90000568:	45a4      	cmp	ip, r4
9000056a:	d908      	bls.n	9000057e <__udivmoddi4+0x1ce>
9000056c:	193c      	adds	r4, r7, r4
9000056e:	f103 3eff 	add.w	lr, r3, #4294967295
90000572:	f080 8082 	bcs.w	9000067a <__udivmoddi4+0x2ca>
90000576:	45a4      	cmp	ip, r4
90000578:	d97f      	bls.n	9000067a <__udivmoddi4+0x2ca>
9000057a:	3b02      	subs	r3, #2
9000057c:	443c      	add	r4, r7
9000057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000582:	eba4 040c 	sub.w	r4, r4, ip
90000586:	fba0 ec02 	umull	lr, ip, r0, r2
9000058a:	4564      	cmp	r4, ip
9000058c:	4673      	mov	r3, lr
9000058e:	46e1      	mov	r9, ip
90000590:	d362      	bcc.n	90000658 <__udivmoddi4+0x2a8>
90000592:	d05f      	beq.n	90000654 <__udivmoddi4+0x2a4>
90000594:	b15d      	cbz	r5, 900005ae <__udivmoddi4+0x1fe>
90000596:	ebb8 0203 	subs.w	r2, r8, r3
9000059a:	eb64 0409 	sbc.w	r4, r4, r9
9000059e:	fa04 f606 	lsl.w	r6, r4, r6
900005a2:	fa22 f301 	lsr.w	r3, r2, r1
900005a6:	431e      	orrs	r6, r3
900005a8:	40cc      	lsrs	r4, r1
900005aa:	e9c5 6400 	strd	r6, r4, [r5]
900005ae:	2100      	movs	r1, #0
900005b0:	e74f      	b.n	90000452 <__udivmoddi4+0xa2>
900005b2:	fbb1 fcf2 	udiv	ip, r1, r2
900005b6:	0c01      	lsrs	r1, r0, #16
900005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005bc:	b280      	uxth	r0, r0
900005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005c2:	463b      	mov	r3, r7
900005c4:	4638      	mov	r0, r7
900005c6:	463c      	mov	r4, r7
900005c8:	46b8      	mov	r8, r7
900005ca:	46be      	mov	lr, r7
900005cc:	2620      	movs	r6, #32
900005ce:	fbb1 f1f7 	udiv	r1, r1, r7
900005d2:	eba2 0208 	sub.w	r2, r2, r8
900005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005da:	e766      	b.n	900004aa <__udivmoddi4+0xfa>
900005dc:	4601      	mov	r1, r0
900005de:	e718      	b.n	90000412 <__udivmoddi4+0x62>
900005e0:	4610      	mov	r0, r2
900005e2:	e72c      	b.n	9000043e <__udivmoddi4+0x8e>
900005e4:	f1c6 0220 	rsb	r2, r6, #32
900005e8:	fa2e f302 	lsr.w	r3, lr, r2
900005ec:	40b7      	lsls	r7, r6
900005ee:	40b1      	lsls	r1, r6
900005f0:	fa20 f202 	lsr.w	r2, r0, r2
900005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900005f8:	430a      	orrs	r2, r1
900005fa:	fbb3 f8fe 	udiv	r8, r3, lr
900005fe:	b2bc      	uxth	r4, r7
90000600:	fb0e 3318 	mls	r3, lr, r8, r3
90000604:	0c11      	lsrs	r1, r2, #16
90000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000060a:	fb08 f904 	mul.w	r9, r8, r4
9000060e:	40b0      	lsls	r0, r6
90000610:	4589      	cmp	r9, r1
90000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000616:	b280      	uxth	r0, r0
90000618:	d93e      	bls.n	90000698 <__udivmoddi4+0x2e8>
9000061a:	1879      	adds	r1, r7, r1
9000061c:	f108 3cff 	add.w	ip, r8, #4294967295
90000620:	d201      	bcs.n	90000626 <__udivmoddi4+0x276>
90000622:	4589      	cmp	r9, r1
90000624:	d81f      	bhi.n	90000666 <__udivmoddi4+0x2b6>
90000626:	eba1 0109 	sub.w	r1, r1, r9
9000062a:	fbb1 f9fe 	udiv	r9, r1, lr
9000062e:	fb09 f804 	mul.w	r8, r9, r4
90000632:	fb0e 1119 	mls	r1, lr, r9, r1
90000636:	b292      	uxth	r2, r2
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	4542      	cmp	r2, r8
9000063e:	d229      	bcs.n	90000694 <__udivmoddi4+0x2e4>
90000640:	18ba      	adds	r2, r7, r2
90000642:	f109 31ff 	add.w	r1, r9, #4294967295
90000646:	d2c4      	bcs.n	900005d2 <__udivmoddi4+0x222>
90000648:	4542      	cmp	r2, r8
9000064a:	d2c2      	bcs.n	900005d2 <__udivmoddi4+0x222>
9000064c:	f1a9 0102 	sub.w	r1, r9, #2
90000650:	443a      	add	r2, r7
90000652:	e7be      	b.n	900005d2 <__udivmoddi4+0x222>
90000654:	45f0      	cmp	r8, lr
90000656:	d29d      	bcs.n	90000594 <__udivmoddi4+0x1e4>
90000658:	ebbe 0302 	subs.w	r3, lr, r2
9000065c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000660:	3801      	subs	r0, #1
90000662:	46e1      	mov	r9, ip
90000664:	e796      	b.n	90000594 <__udivmoddi4+0x1e4>
90000666:	eba7 0909 	sub.w	r9, r7, r9
9000066a:	4449      	add	r1, r9
9000066c:	f1a8 0c02 	sub.w	ip, r8, #2
90000670:	fbb1 f9fe 	udiv	r9, r1, lr
90000674:	fb09 f804 	mul.w	r8, r9, r4
90000678:	e7db      	b.n	90000632 <__udivmoddi4+0x282>
9000067a:	4673      	mov	r3, lr
9000067c:	e77f      	b.n	9000057e <__udivmoddi4+0x1ce>
9000067e:	4650      	mov	r0, sl
90000680:	e766      	b.n	90000550 <__udivmoddi4+0x1a0>
90000682:	4608      	mov	r0, r1
90000684:	e6fd      	b.n	90000482 <__udivmoddi4+0xd2>
90000686:	443b      	add	r3, r7
90000688:	3a02      	subs	r2, #2
9000068a:	e733      	b.n	900004f4 <__udivmoddi4+0x144>
9000068c:	f1ac 0c02 	sub.w	ip, ip, #2
90000690:	443b      	add	r3, r7
90000692:	e71c      	b.n	900004ce <__udivmoddi4+0x11e>
90000694:	4649      	mov	r1, r9
90000696:	e79c      	b.n	900005d2 <__udivmoddi4+0x222>
90000698:	eba1 0109 	sub.w	r1, r1, r9
9000069c:	46c4      	mov	ip, r8
9000069e:	fbb1 f9fe 	udiv	r9, r1, lr
900006a2:	fb09 f804 	mul.w	r8, r9, r4
900006a6:	e7c4      	b.n	90000632 <__udivmoddi4+0x282>

900006a8 <__aeabi_idiv0>:
900006a8:	4770      	bx	lr
900006aa:	bf00      	nop

900006ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900006ac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 900006e8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900006b0:	f002 fc5e 	bl	90002f70 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900006b4:	f002 fbfa 	bl	90002eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900006b8:	480c      	ldr	r0, [pc, #48]	@ (900006ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900006ba:	490d      	ldr	r1, [pc, #52]	@ (900006f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900006bc:	4a0d      	ldr	r2, [pc, #52]	@ (900006f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
900006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
900006c0:	e002      	b.n	900006c8 <LoopCopyDataInit>

900006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900006c6:	3304      	adds	r3, #4

900006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
900006cc:	d3f9      	bcc.n	900006c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900006ce:	4a0a      	ldr	r2, [pc, #40]	@ (900006f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900006d0:	4c0a      	ldr	r4, [pc, #40]	@ (900006fc <LoopFillZerobss+0x22>)
  movs r3, #0
900006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
900006d4:	e001      	b.n	900006da <LoopFillZerobss>

900006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900006d8:	3204      	adds	r2, #4

900006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
900006dc:	d3fb      	bcc.n	900006d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
900006de:	f00b fe55 	bl	9000c38c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900006e2:	f000 f827 	bl	90000734 <main>
  bx  lr
900006e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900006e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
900006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
900006f0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
900006f4:	9000f1c8 	.word	0x9000f1c8
  ldr r2, =_sbss
900006f8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
900006fc:	20001498 	.word	0x20001498

90000700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000700:	e7fe      	b.n	90000700 <ADC3_IRQHandler>
	...

90000704 <__io_putchar>:
static void MPU_Config(void);
static void GPIO_Init(void);
static void MX_USART3_UART_Init(void);
void readFlexiKeyboard();

int __io_putchar(int ch) {
90000704:	b580      	push	{r7, lr}
90000706:	b082      	sub	sp, #8
90000708:	af00      	add	r7, sp, #0
9000070a:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
9000070c:	1d39      	adds	r1, r7, #4
9000070e:	f04f 33ff 	mov.w	r3, #4294967295
90000712:	2201      	movs	r2, #1
90000714:	4806      	ldr	r0, [pc, #24]	@ (90000730 <__io_putchar+0x2c>)
90000716:	f009 f9e5 	bl	90009ae4 <HAL_UART_Transmit>
9000071a:	4603      	mov	r3, r0
9000071c:	2b00      	cmp	r3, #0
9000071e:	d002      	beq.n	90000726 <__io_putchar+0x22>
    return -1;
90000720:	f04f 33ff 	mov.w	r3, #4294967295
90000724:	e000      	b.n	90000728 <__io_putchar+0x24>
  }
  return ch;
90000726:	687b      	ldr	r3, [r7, #4]
}
90000728:	4618      	mov	r0, r3
9000072a:	3708      	adds	r7, #8
9000072c:	46bd      	mov	sp, r7
9000072e:	bd80      	pop	{r7, pc}
90000730:	200000f8 	.word	0x200000f8

90000734 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000734:	b580      	push	{r7, lr}
90000736:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
90000738:	f000 fc18 	bl	90000f6c <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
9000073c:	f000 fb84 	bl	90000e48 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
90000740:	f002 fc2e 	bl	90002fa0 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
90000744:	f000 fa7c 	bl	90000c40 <SystemClock_Config>

  MX_USART3_UART_Init();
90000748:	f000 f9c0 	bl	90000acc <MX_USART3_UART_Init>

  printf("Hi there :)!\r\n");
9000074c:	480c      	ldr	r0, [pc, #48]	@ (90000780 <main+0x4c>)
9000074e:	f00b fcd9 	bl	9000c104 <puts>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
90000752:	2000      	movs	r0, #0
90000754:	f000 ff3a 	bl	900015cc <BSP_LED_Init>


  InitializeLcd();
90000758:	f000 f998 	bl	90000a8c <InitializeLcd>
  //CPU_CACHE_Disable();
  Draw_Menu();
9000075c:	f000 f966 	bl	90000a2c <Draw_Menu>

  HAL_Delay(1000);
90000760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
90000764:	f002 fcb6 	bl	900030d4 <HAL_Delay>
  GPIO_Init(); // has to be AFTER BSP_LCD_Init, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000768:	f000 f896 	bl	90000898 <GPIO_Init>

  CPU_CACHE_Enable();
9000076c:	f000 fb6c 	bl	90000e48 <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
  {
	  HAL_Delay(100);
90000770:	2064      	movs	r0, #100	@ 0x64
90000772:	f002 fcaf 	bl	900030d4 <HAL_Delay>
	  readFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
90000776:	f000 f845 	bl	90000804 <readFlexiKeyboard>
	  HAL_Delay(100);
9000077a:	bf00      	nop
9000077c:	e7f8      	b.n	90000770 <main+0x3c>
9000077e:	bf00      	nop
90000780:	9000cc84 	.word	0x9000cc84

90000784 <setAllRowsInactive>:
  }
}

void setAllRowsInactive(void)
{
90000784:	b580      	push	{r7, lr}
90000786:	b082      	sub	sp, #8
90000788:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000078a:	2300      	movs	r3, #0
9000078c:	607b      	str	r3, [r7, #4]
9000078e:	e00f      	b.n	900007b0 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
90000790:	4a0b      	ldr	r2, [pc, #44]	@ (900007c0 <setAllRowsInactive+0x3c>)
90000792:	687b      	ldr	r3, [r7, #4]
90000794:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
90000798:	4a09      	ldr	r2, [pc, #36]	@ (900007c0 <setAllRowsInactive+0x3c>)
9000079a:	687b      	ldr	r3, [r7, #4]
9000079c:	00db      	lsls	r3, r3, #3
9000079e:	4413      	add	r3, r2
900007a0:	889b      	ldrh	r3, [r3, #4]
900007a2:	2200      	movs	r2, #0
900007a4:	4619      	mov	r1, r3
900007a6:	f003 fafb 	bl	90003da0 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
900007aa:	687b      	ldr	r3, [r7, #4]
900007ac:	3301      	adds	r3, #1
900007ae:	607b      	str	r3, [r7, #4]
900007b0:	687b      	ldr	r3, [r7, #4]
900007b2:	2b04      	cmp	r3, #4
900007b4:	ddec      	ble.n	90000790 <setAllRowsInactive+0xc>
    }
}
900007b6:	bf00      	nop
900007b8:	bf00      	nop
900007ba:	3708      	adds	r7, #8
900007bc:	46bd      	mov	sp, r7
900007be:	bd80      	pop	{r7, pc}
900007c0:	20000000 	.word	0x20000000

900007c4 <setRowActive>:

void setRowActive(int row)
{
900007c4:	b580      	push	{r7, lr}
900007c6:	b082      	sub	sp, #8
900007c8:	af00      	add	r7, sp, #0
900007ca:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
900007cc:	687b      	ldr	r3, [r7, #4]
900007ce:	2b00      	cmp	r3, #0
900007d0:	db12      	blt.n	900007f8 <setRowActive+0x34>
900007d2:	687b      	ldr	r3, [r7, #4]
900007d4:	2b04      	cmp	r3, #4
900007d6:	dc0f      	bgt.n	900007f8 <setRowActive+0x34>
        return;

    setAllRowsInactive();
900007d8:	f7ff ffd4 	bl	90000784 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
900007dc:	4a08      	ldr	r2, [pc, #32]	@ (90000800 <setRowActive+0x3c>)
900007de:	687b      	ldr	r3, [r7, #4]
900007e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
900007e4:	4a06      	ldr	r2, [pc, #24]	@ (90000800 <setRowActive+0x3c>)
900007e6:	687b      	ldr	r3, [r7, #4]
900007e8:	00db      	lsls	r3, r3, #3
900007ea:	4413      	add	r3, r2
900007ec:	889b      	ldrh	r3, [r3, #4]
900007ee:	2201      	movs	r2, #1
900007f0:	4619      	mov	r1, r3
900007f2:	f003 fad5 	bl	90003da0 <HAL_GPIO_WritePin>
900007f6:	e000      	b.n	900007fa <setRowActive+0x36>
        return;
900007f8:	bf00      	nop
}
900007fa:	3708      	adds	r7, #8
900007fc:	46bd      	mov	sp, r7
900007fe:	bd80      	pop	{r7, pc}
90000800:	20000000 	.word	0x20000000

90000804 <readFlexiKeyboard>:

void readFlexiKeyboard(void)
{
90000804:	b580      	push	{r7, lr}
90000806:	b082      	sub	sp, #8
90000808:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000080a:	2300      	movs	r3, #0
9000080c:	607b      	str	r3, [r7, #4]
9000080e:	e033      	b.n	90000878 <readFlexiKeyboard+0x74>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
90000810:	6878      	ldr	r0, [r7, #4]
90000812:	f7ff ffd7 	bl	900007c4 <setRowActive>
        HAL_Delay(10);         // Small delay for settling
90000816:	200a      	movs	r0, #10
90000818:	f002 fc5c 	bl	900030d4 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000081c:	2300      	movs	r3, #0
9000081e:	603b      	str	r3, [r7, #0]
90000820:	e024      	b.n	9000086c <readFlexiKeyboard+0x68>
        {

        	//if (col == 2) break;
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
90000822:	4a19      	ldr	r2, [pc, #100]	@ (90000888 <readFlexiKeyboard+0x84>)
90000824:	683b      	ldr	r3, [r7, #0]
90000826:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000082a:	4917      	ldr	r1, [pc, #92]	@ (90000888 <readFlexiKeyboard+0x84>)
9000082c:	683b      	ldr	r3, [r7, #0]
9000082e:	00db      	lsls	r3, r3, #3
90000830:	440b      	add	r3, r1
90000832:	889b      	ldrh	r3, [r3, #4]
90000834:	4619      	mov	r1, r3
90000836:	4610      	mov	r0, r2
90000838:	f003 fa9a 	bl	90003d70 <HAL_GPIO_ReadPin>
9000083c:	4603      	mov	r3, r0
9000083e:	2b01      	cmp	r3, #1
90000840:	d111      	bne.n	90000866 <readFlexiKeyboard+0x62>
//                lastRow = row;
//                lastCol = col;
//                lastTriggerTime = now;

                // Key at (row, col) pressed!
                receivedChar = keymap[row][col];
90000842:	4912      	ldr	r1, [pc, #72]	@ (9000088c <readFlexiKeyboard+0x88>)
90000844:	687a      	ldr	r2, [r7, #4]
90000846:	4613      	mov	r3, r2
90000848:	009b      	lsls	r3, r3, #2
9000084a:	4413      	add	r3, r2
9000084c:	18ca      	adds	r2, r1, r3
9000084e:	683b      	ldr	r3, [r7, #0]
90000850:	4413      	add	r3, r2
90000852:	781a      	ldrb	r2, [r3, #0]
90000854:	4b0e      	ldr	r3, [pc, #56]	@ (90000890 <readFlexiKeyboard+0x8c>)
90000856:	701a      	strb	r2, [r3, #0]
                printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
90000858:	4b0d      	ldr	r3, [pc, #52]	@ (90000890 <readFlexiKeyboard+0x8c>)
9000085a:	781b      	ldrb	r3, [r3, #0]
9000085c:	683a      	ldr	r2, [r7, #0]
9000085e:	6879      	ldr	r1, [r7, #4]
90000860:	480c      	ldr	r0, [pc, #48]	@ (90000894 <readFlexiKeyboard+0x90>)
90000862:	f00b fbe7 	bl	9000c034 <iprintf>
        for (int col = 0; col < NUM_COLS; col++)
90000866:	683b      	ldr	r3, [r7, #0]
90000868:	3301      	adds	r3, #1
9000086a:	603b      	str	r3, [r7, #0]
9000086c:	683b      	ldr	r3, [r7, #0]
9000086e:	2b04      	cmp	r3, #4
90000870:	ddd7      	ble.n	90000822 <readFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
90000872:	687b      	ldr	r3, [r7, #4]
90000874:	3301      	adds	r3, #1
90000876:	607b      	str	r3, [r7, #4]
90000878:	687b      	ldr	r3, [r7, #4]
9000087a:	2b04      	cmp	r3, #4
9000087c:	ddc8      	ble.n	90000810 <readFlexiKeyboard+0xc>
            }
        }

        //setAllRowsInactive();  // Set all rows HIGH before next row scan
    }
}
9000087e:	bf00      	nop
90000880:	bf00      	nop
90000882:	3708      	adds	r7, #8
90000884:	46bd      	mov	sp, r7
90000886:	bd80      	pop	{r7, pc}
90000888:	20000028 	.word	0x20000028
9000088c:	9000ccd8 	.word	0x9000ccd8
90000890:	200000ec 	.word	0x200000ec
90000894:	9000cc94 	.word	0x9000cc94

90000898 <GPIO_Init>:

static void GPIO_Init(void)
{
90000898:	b580      	push	{r7, lr}
9000089a:	b090      	sub	sp, #64	@ 0x40
9000089c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900008a2:	2200      	movs	r2, #0
900008a4:	601a      	str	r2, [r3, #0]
900008a6:	605a      	str	r2, [r3, #4]
900008a8:	609a      	str	r2, [r3, #8]
900008aa:	60da      	str	r2, [r3, #12]
900008ac:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
900008ae:	4b5c      	ldr	r3, [pc, #368]	@ (90000a20 <GPIO_Init+0x188>)
900008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008b4:	4a5a      	ldr	r2, [pc, #360]	@ (90000a20 <GPIO_Init+0x188>)
900008b6:	f043 0301 	orr.w	r3, r3, #1
900008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900008be:	4b58      	ldr	r3, [pc, #352]	@ (90000a20 <GPIO_Init+0x188>)
900008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008c4:	f003 0301 	and.w	r3, r3, #1
900008c8:	623b      	str	r3, [r7, #32]
900008ca:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
900008cc:	4b54      	ldr	r3, [pc, #336]	@ (90000a20 <GPIO_Init+0x188>)
900008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008d2:	4a53      	ldr	r2, [pc, #332]	@ (90000a20 <GPIO_Init+0x188>)
900008d4:	f043 0302 	orr.w	r3, r3, #2
900008d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900008dc:	4b50      	ldr	r3, [pc, #320]	@ (90000a20 <GPIO_Init+0x188>)
900008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008e2:	f003 0302 	and.w	r3, r3, #2
900008e6:	61fb      	str	r3, [r7, #28]
900008e8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
900008ea:	4b4d      	ldr	r3, [pc, #308]	@ (90000a20 <GPIO_Init+0x188>)
900008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900008f0:	4a4b      	ldr	r2, [pc, #300]	@ (90000a20 <GPIO_Init+0x188>)
900008f2:	f043 0308 	orr.w	r3, r3, #8
900008f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900008fa:	4b49      	ldr	r3, [pc, #292]	@ (90000a20 <GPIO_Init+0x188>)
900008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000900:	f003 0308 	and.w	r3, r3, #8
90000904:	61bb      	str	r3, [r7, #24]
90000906:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
90000908:	4b45      	ldr	r3, [pc, #276]	@ (90000a20 <GPIO_Init+0x188>)
9000090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000090e:	4a44      	ldr	r2, [pc, #272]	@ (90000a20 <GPIO_Init+0x188>)
90000910:	f043 0310 	orr.w	r3, r3, #16
90000914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000918:	4b41      	ldr	r3, [pc, #260]	@ (90000a20 <GPIO_Init+0x188>)
9000091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000091e:	f003 0310 	and.w	r3, r3, #16
90000922:	617b      	str	r3, [r7, #20]
90000924:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
90000926:	4b3e      	ldr	r3, [pc, #248]	@ (90000a20 <GPIO_Init+0x188>)
90000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000092c:	4a3c      	ldr	r2, [pc, #240]	@ (90000a20 <GPIO_Init+0x188>)
9000092e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90000932:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000936:	4b3a      	ldr	r3, [pc, #232]	@ (90000a20 <GPIO_Init+0x188>)
90000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000093c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90000940:	613b      	str	r3, [r7, #16]
90000942:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
90000944:	4b36      	ldr	r3, [pc, #216]	@ (90000a20 <GPIO_Init+0x188>)
90000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000094a:	4a35      	ldr	r2, [pc, #212]	@ (90000a20 <GPIO_Init+0x188>)
9000094c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000950:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000954:	4b32      	ldr	r3, [pc, #200]	@ (90000a20 <GPIO_Init+0x188>)
90000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000095e:	60fb      	str	r3, [r7, #12]
90000960:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
90000962:	4b2f      	ldr	r3, [pc, #188]	@ (90000a20 <GPIO_Init+0x188>)
90000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000968:	4a2d      	ldr	r2, [pc, #180]	@ (90000a20 <GPIO_Init+0x188>)
9000096a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000096e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000972:	4b2b      	ldr	r3, [pc, #172]	@ (90000a20 <GPIO_Init+0x188>)
90000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000097c:	60bb      	str	r3, [r7, #8]
9000097e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90000980:	4b27      	ldr	r3, [pc, #156]	@ (90000a20 <GPIO_Init+0x188>)
90000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000986:	4a26      	ldr	r2, [pc, #152]	@ (90000a20 <GPIO_Init+0x188>)
90000988:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000098c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000990:	4b23      	ldr	r3, [pc, #140]	@ (90000a20 <GPIO_Init+0x188>)
90000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000099a:	607b      	str	r3, [r7, #4]
9000099c:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000099e:	2301      	movs	r3, #1
900009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
900009a2:	2300      	movs	r3, #0
900009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900009a6:	2300      	movs	r3, #0
900009a8:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
900009aa:	2300      	movs	r3, #0
900009ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
900009ae:	e012      	b.n	900009d6 <GPIO_Init+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
900009b0:	4a1c      	ldr	r2, [pc, #112]	@ (90000a24 <GPIO_Init+0x18c>)
900009b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900009b4:	00db      	lsls	r3, r3, #3
900009b6:	4413      	add	r3, r2
900009b8:	889b      	ldrh	r3, [r3, #4]
900009ba:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
900009bc:	4a19      	ldr	r2, [pc, #100]	@ (90000a24 <GPIO_Init+0x18c>)
900009be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900009c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
900009c4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
900009c8:	4611      	mov	r1, r2
900009ca:	4618      	mov	r0, r3
900009cc:	f003 f820 	bl	90003a10 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
900009d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900009d2:	3301      	adds	r3, #1
900009d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
900009d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900009d8:	2b04      	cmp	r3, #4
900009da:	dde9      	ble.n	900009b0 <GPIO_Init+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900009dc:	2300      	movs	r3, #0
900009de:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
900009e0:	2302      	movs	r3, #2
900009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
900009e4:	2300      	movs	r3, #0
900009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
900009e8:	e012      	b.n	90000a10 <GPIO_Init+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
900009ea:	4a0f      	ldr	r2, [pc, #60]	@ (90000a28 <GPIO_Init+0x190>)
900009ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900009ee:	00db      	lsls	r3, r3, #3
900009f0:	4413      	add	r3, r2
900009f2:	889b      	ldrh	r3, [r3, #4]
900009f4:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
900009f6:	4a0c      	ldr	r2, [pc, #48]	@ (90000a28 <GPIO_Init+0x190>)
900009f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900009fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
900009fe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
90000a02:	4611      	mov	r1, r2
90000a04:	4618      	mov	r0, r3
90000a06:	f003 f803 	bl	90003a10 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
90000a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90000a0c:	3301      	adds	r3, #1
90000a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
90000a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90000a12:	2b04      	cmp	r3, #4
90000a14:	dde9      	ble.n	900009ea <GPIO_Init+0x152>
	}
}
90000a16:	bf00      	nop
90000a18:	bf00      	nop
90000a1a:	3740      	adds	r7, #64	@ 0x40
90000a1c:	46bd      	mov	sp, r7
90000a1e:	bd80      	pop	{r7, pc}
90000a20:	58024400 	.word	0x58024400
90000a24:	20000000 	.word	0x20000000
90000a28:	20000028 	.word	0x20000028

90000a2c <Draw_Menu>:
  * @brief  Draws the menu.
  * @param  None
  * @retval None
  */
static void Draw_Menu(void)
{ 
90000a2c:	b580      	push	{r7, lr}
90000a2e:	b082      	sub	sp, #8
90000a30:	af00      	add	r7, sp, #0
  UTIL_LCD_SetLayer(0);
90000a32:	2000      	movs	r0, #0
90000a34:	f00a fe8a 	bl	9000b74c <UTIL_LCD_SetLayer>
  
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000a38:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000a3c:	f00a fefc 	bl	9000b838 <UTIL_LCD_Clear>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90000a40:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
90000a44:	f00a fea0 	bl	9000b788 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90000a48:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000a4c:	f00a feb0 	bl	9000b7b0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90000a50:	480c      	ldr	r0, [pc, #48]	@ (90000a84 <Draw_Menu+0x58>)
90000a52:	f00a fec1 	bl	9000b7d8 <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
90000a56:	2300      	movs	r3, #0
90000a58:	607b      	str	r3, [r7, #4]
90000a5a:	e00a      	b.n	90000a72 <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Bumbajs ubumbadadej", LEFT_MODE);
90000a5c:	687b      	ldr	r3, [r7, #4]
90000a5e:	015b      	lsls	r3, r3, #5
90000a60:	4619      	mov	r1, r3
90000a62:	2303      	movs	r3, #3
90000a64:	4a08      	ldr	r2, [pc, #32]	@ (90000a88 <Draw_Menu+0x5c>)
90000a66:	2000      	movs	r0, #0
90000a68:	f00a ff32 	bl	9000b8d0 <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90000a6c:	687b      	ldr	r3, [r7, #4]
90000a6e:	3301      	adds	r3, #1
90000a70:	607b      	str	r3, [r7, #4]
90000a72:	687b      	ldr	r3, [r7, #4]
90000a74:	2b07      	cmp	r3, #7
90000a76:	ddf1      	ble.n	90000a5c <Draw_Menu+0x30>
  }
}
90000a78:	bf00      	nop
90000a7a:	bf00      	nop
90000a7c:	3708      	adds	r7, #8
90000a7e:	46bd      	mov	sp, r7
90000a80:	bd80      	pop	{r7, pc}
90000a82:	bf00      	nop
90000a84:	20000068 	.word	0x20000068
90000a88:	9000ccc4 	.word	0x9000ccc4

90000a8c <InitializeLcd>:

static void InitializeLcd(void)
{
90000a8c:	b580      	push	{r7, lr}
90000a8e:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
90000a90:	2101      	movs	r1, #1
90000a92:	2000      	movs	r0, #0
90000a94:	f001 f9aa 	bl	90001dec <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90000a98:	4809      	ldr	r0, [pc, #36]	@ (90000ac0 <InitializeLcd+0x34>)
90000a9a:	f00a fe01 	bl	9000b6a0 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90000a9e:	2000      	movs	r0, #0
90000aa0:	f00a fe54 	bl	9000b74c <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000aa4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000aa8:	f00a fec6 	bl	9000b838 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90000aac:	4905      	ldr	r1, [pc, #20]	@ (90000ac4 <InitializeLcd+0x38>)
90000aae:	2000      	movs	r0, #0
90000ab0:	f001 fb56 	bl	90002160 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90000ab4:	4904      	ldr	r1, [pc, #16]	@ (90000ac8 <InitializeLcd+0x3c>)
90000ab6:	2000      	movs	r0, #0
90000ab8:	f001 fb70 	bl	9000219c <BSP_LCD_GetYSize>
}
90000abc:	bf00      	nop
90000abe:	bd80      	pop	{r7, pc}
90000ac0:	9000cd80 	.word	0x9000cd80
90000ac4:	200000f0 	.word	0x200000f0
90000ac8:	200000f4 	.word	0x200000f4

90000acc <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
90000acc:	b580      	push	{r7, lr}
90000ace:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000ad0:	4b22      	ldr	r3, [pc, #136]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000ad2:	4a23      	ldr	r2, [pc, #140]	@ (90000b60 <MX_USART3_UART_Init+0x94>)
90000ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000ad6:	4b21      	ldr	r3, [pc, #132]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000ade:	4b1f      	ldr	r3, [pc, #124]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000ae0:	2200      	movs	r2, #0
90000ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000ae6:	2200      	movs	r2, #0
90000ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000aea:	4b1c      	ldr	r3, [pc, #112]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000aec:	2200      	movs	r2, #0
90000aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000af0:	4b1a      	ldr	r3, [pc, #104]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000af2:	220c      	movs	r2, #12
90000af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000af6:	4b19      	ldr	r3, [pc, #100]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000af8:	2200      	movs	r2, #0
90000afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000afc:	4b17      	ldr	r3, [pc, #92]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000afe:	2200      	movs	r2, #0
90000b00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000b02:	4b16      	ldr	r3, [pc, #88]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000b04:	2200      	movs	r2, #0
90000b06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000b08:	4b14      	ldr	r3, [pc, #80]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000b0a:	2200      	movs	r2, #0
90000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000b0e:	4b13      	ldr	r3, [pc, #76]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000b10:	2200      	movs	r2, #0
90000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000b14:	4811      	ldr	r0, [pc, #68]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000b16:	f008 ff95 	bl	90009a44 <HAL_UART_Init>
90000b1a:	4603      	mov	r3, r0
90000b1c:	2b00      	cmp	r3, #0
90000b1e:	d001      	beq.n	90000b24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000b20:	f000 f88a 	bl	90000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000b24:	2100      	movs	r1, #0
90000b26:	480d      	ldr	r0, [pc, #52]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000b28:	f00a f82b 	bl	9000ab82 <HAL_UARTEx_SetTxFifoThreshold>
90000b2c:	4603      	mov	r3, r0
90000b2e:	2b00      	cmp	r3, #0
90000b30:	d001      	beq.n	90000b36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000b32:	f000 f881 	bl	90000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000b36:	2100      	movs	r1, #0
90000b38:	4808      	ldr	r0, [pc, #32]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000b3a:	f00a f860 	bl	9000abfe <HAL_UARTEx_SetRxFifoThreshold>
90000b3e:	4603      	mov	r3, r0
90000b40:	2b00      	cmp	r3, #0
90000b42:	d001      	beq.n	90000b48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000b44:	f000 f878 	bl	90000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000b48:	4804      	ldr	r0, [pc, #16]	@ (90000b5c <MX_USART3_UART_Init+0x90>)
90000b4a:	f009 ffe1 	bl	9000ab10 <HAL_UARTEx_DisableFifoMode>
90000b4e:	4603      	mov	r3, r0
90000b50:	2b00      	cmp	r3, #0
90000b52:	d001      	beq.n	90000b58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000b54:	f000 f870 	bl	90000c38 <Error_Handler>
  }
}
90000b58:	bf00      	nop
90000b5a:	bd80      	pop	{r7, pc}
90000b5c:	200000f8 	.word	0x200000f8
90000b60:	40004800 	.word	0x40004800

90000b64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000b64:	b580      	push	{r7, lr}
90000b66:	b0ba      	sub	sp, #232	@ 0xe8
90000b68:	af00      	add	r7, sp, #0
90000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000b6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000b70:	2200      	movs	r2, #0
90000b72:	601a      	str	r2, [r3, #0]
90000b74:	605a      	str	r2, [r3, #4]
90000b76:	609a      	str	r2, [r3, #8]
90000b78:	60da      	str	r2, [r3, #12]
90000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000b7c:	f107 0310 	add.w	r3, r7, #16
90000b80:	22c0      	movs	r2, #192	@ 0xc0
90000b82:	2100      	movs	r1, #0
90000b84:	4618      	mov	r0, r3
90000b86:	f00b fb9d 	bl	9000c2c4 <memset>
  if(huart->Instance==USART3)
90000b8a:	687b      	ldr	r3, [r7, #4]
90000b8c:	681b      	ldr	r3, [r3, #0]
90000b8e:	4a27      	ldr	r2, [pc, #156]	@ (90000c2c <HAL_UART_MspInit+0xc8>)
90000b90:	4293      	cmp	r3, r2
90000b92:	d146      	bne.n	90000c22 <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000b94:	f04f 0202 	mov.w	r2, #2
90000b98:	f04f 0300 	mov.w	r3, #0
90000b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000ba0:	2300      	movs	r3, #0
90000ba2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000ba6:	f107 0310 	add.w	r3, r7, #16
90000baa:	4618      	mov	r0, r3
90000bac:	f006 ff14 	bl	900079d8 <HAL_RCCEx_PeriphCLKConfig>
90000bb0:	4603      	mov	r3, r0
90000bb2:	2b00      	cmp	r3, #0
90000bb4:	d001      	beq.n	90000bba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000bb6:	f000 f83f 	bl	90000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000bba:	4b1d      	ldr	r3, [pc, #116]	@ (90000c30 <HAL_UART_MspInit+0xcc>)
90000bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000bc0:	4a1b      	ldr	r2, [pc, #108]	@ (90000c30 <HAL_UART_MspInit+0xcc>)
90000bc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000bca:	4b19      	ldr	r3, [pc, #100]	@ (90000c30 <HAL_UART_MspInit+0xcc>)
90000bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000bd4:	60fb      	str	r3, [r7, #12]
90000bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000bd8:	4b15      	ldr	r3, [pc, #84]	@ (90000c30 <HAL_UART_MspInit+0xcc>)
90000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000bde:	4a14      	ldr	r2, [pc, #80]	@ (90000c30 <HAL_UART_MspInit+0xcc>)
90000be0:	f043 0302 	orr.w	r3, r3, #2
90000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000be8:	4b11      	ldr	r3, [pc, #68]	@ (90000c30 <HAL_UART_MspInit+0xcc>)
90000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000bee:	f003 0302 	and.w	r3, r3, #2
90000bf2:	60bb      	str	r3, [r7, #8]
90000bf4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000bf6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000bfe:	2302      	movs	r3, #2
90000c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c04:	2300      	movs	r3, #0
90000c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c0a:	2300      	movs	r3, #0
90000c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000c10:	2307      	movs	r3, #7
90000c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000c16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000c1a:	4619      	mov	r1, r3
90000c1c:	4805      	ldr	r0, [pc, #20]	@ (90000c34 <HAL_UART_MspInit+0xd0>)
90000c1e:	f002 fef7 	bl	90003a10 <HAL_GPIO_Init>
  }
}
90000c22:	bf00      	nop
90000c24:	37e8      	adds	r7, #232	@ 0xe8
90000c26:	46bd      	mov	sp, r7
90000c28:	bd80      	pop	{r7, pc}
90000c2a:	bf00      	nop
90000c2c:	40004800 	.word	0x40004800
90000c30:	58024400 	.word	0x58024400
90000c34:	58020400 	.word	0x58020400

90000c38 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000c38:	b480      	push	{r7}
90000c3a:	af00      	add	r7, sp, #0
  while(1)
90000c3c:	bf00      	nop
90000c3e:	e7fd      	b.n	90000c3c <Error_Handler+0x4>

90000c40 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000c40:	b580      	push	{r7, lr}
90000c42:	b0ce      	sub	sp, #312	@ 0x138
90000c44:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000c46:	2300      	movs	r3, #0
90000c48:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000c4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c54:	2200      	movs	r2, #0
90000c56:	601a      	str	r2, [r3, #0]
90000c58:	4b78      	ldr	r3, [pc, #480]	@ (90000e3c <SystemClock_Config+0x1fc>)
90000c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000c5c:	4a77      	ldr	r2, [pc, #476]	@ (90000e3c <SystemClock_Config+0x1fc>)
90000c5e:	f023 0301 	bic.w	r3, r3, #1
90000c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000c64:	4b75      	ldr	r3, [pc, #468]	@ (90000e3c <SystemClock_Config+0x1fc>)
90000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000c68:	f003 0201 	and.w	r2, r3, #1
90000c6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c74:	601a      	str	r2, [r3, #0]
90000c76:	4b72      	ldr	r3, [pc, #456]	@ (90000e40 <SystemClock_Config+0x200>)
90000c78:	699b      	ldr	r3, [r3, #24]
90000c7a:	4a71      	ldr	r2, [pc, #452]	@ (90000e40 <SystemClock_Config+0x200>)
90000c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000c80:	6193      	str	r3, [r2, #24]
90000c82:	4b6f      	ldr	r3, [pc, #444]	@ (90000e40 <SystemClock_Config+0x200>)
90000c84:	699b      	ldr	r3, [r3, #24]
90000c86:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000c8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c92:	601a      	str	r2, [r3, #0]
90000c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c98:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c9c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000c9e:	bf00      	nop
90000ca0:	4b67      	ldr	r3, [pc, #412]	@ (90000e40 <SystemClock_Config+0x200>)
90000ca2:	699b      	ldr	r3, [r3, #24]
90000ca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000cac:	d1f8      	bne.n	90000ca0 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000cae:	2301      	movs	r3, #1
90000cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000cbc:	2300      	movs	r3, #0
90000cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000cc2:	2300      	movs	r3, #0
90000cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000cc8:	2302      	movs	r3, #2
90000cca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000cce:	2302      	movs	r3, #2
90000cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000cd4:	2305      	movs	r3, #5
90000cd6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000cda:	23a0      	movs	r3, #160	@ 0xa0
90000cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000ce0:	2300      	movs	r3, #0
90000ce2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000ce6:	2302      	movs	r3, #2
90000ce8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000cec:	2302      	movs	r3, #2
90000cee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000cf2:	2304      	movs	r3, #4
90000cf4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000cf8:	2300      	movs	r3, #0
90000cfa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000cfe:	2308      	movs	r3, #8
90000d00:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000d04:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000d08:	4618      	mov	r0, r3
90000d0a:	f005 fe7f 	bl	90006a0c <HAL_RCC_OscConfig>
90000d0e:	4603      	mov	r3, r0
90000d10:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000d14:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000d18:	2b00      	cmp	r3, #0
90000d1a:	d001      	beq.n	90000d20 <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000d1c:	f7ff ff8c 	bl	90000c38 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000d20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d24:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d28:	2205      	movs	r2, #5
90000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000d2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d30:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d34:	2260      	movs	r2, #96	@ 0x60
90000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000d38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d3c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d40:	2202      	movs	r2, #2
90000d42:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000d44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d48:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d4c:	220a      	movs	r2, #10
90000d4e:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000d50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d54:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d58:	2212      	movs	r2, #18
90000d5a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000d5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d60:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d64:	2200      	movs	r2, #0
90000d66:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000d68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d6c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000d74:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000d76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d7a:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000d7e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000d82:	f04f 0300 	mov.w	r3, #0
90000d86:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000d8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d92:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000d9a:	f107 0308 	add.w	r3, r7, #8
90000d9e:	4618      	mov	r0, r3
90000da0:	f006 fe1a 	bl	900079d8 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000da4:	233f      	movs	r3, #63	@ 0x3f
90000da6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000daa:	2303      	movs	r3, #3
90000dac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000db0:	2300      	movs	r3, #0
90000db2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000db6:	2308      	movs	r3, #8
90000db8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000dbc:	2340      	movs	r3, #64	@ 0x40
90000dbe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000dc2:	2340      	movs	r3, #64	@ 0x40
90000dc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000dc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000dcc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000dd0:	2340      	movs	r3, #64	@ 0x40
90000dd2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000dd6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000dda:	2104      	movs	r1, #4
90000ddc:	4618      	mov	r0, r3
90000dde:	f006 fa6f 	bl	900072c0 <HAL_RCC_ClockConfig>
90000de2:	4603      	mov	r3, r0
90000de4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000de8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000dec:	2b00      	cmp	r3, #0
90000dee:	d001      	beq.n	90000df4 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000df0:	f7ff ff22 	bl	90000c38 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000df4:	4b13      	ldr	r3, [pc, #76]	@ (90000e44 <SystemClock_Config+0x204>)
90000df6:	681b      	ldr	r3, [r3, #0]
90000df8:	4a12      	ldr	r2, [pc, #72]	@ (90000e44 <SystemClock_Config+0x204>)
90000dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000dfe:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000e00:	4b10      	ldr	r3, [pc, #64]	@ (90000e44 <SystemClock_Config+0x204>)
90000e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000e06:	4a0f      	ldr	r2, [pc, #60]	@ (90000e44 <SystemClock_Config+0x204>)
90000e08:	f043 0302 	orr.w	r3, r3, #2
90000e0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000e10:	4b0c      	ldr	r3, [pc, #48]	@ (90000e44 <SystemClock_Config+0x204>)
90000e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000e16:	f003 0202 	and.w	r2, r3, #2
90000e1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000e22:	601a      	str	r2, [r3, #0]
90000e24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e28:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000e2c:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000e2e:	f002 f981 	bl	90003134 <HAL_EnableCompensationCell>
}
90000e32:	bf00      	nop
90000e34:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000e38:	46bd      	mov	sp, r7
90000e3a:	bd80      	pop	{r7, pc}
90000e3c:	58000400 	.word	0x58000400
90000e40:	58024800 	.word	0x58024800
90000e44:	58024400 	.word	0x58024400

90000e48 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000e48:	b480      	push	{r7}
90000e4a:	b085      	sub	sp, #20
90000e4c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e4e:	4b34      	ldr	r3, [pc, #208]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000e50:	695b      	ldr	r3, [r3, #20]
90000e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000e56:	2b00      	cmp	r3, #0
90000e58:	d11b      	bne.n	90000e92 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000e5a:	f3bf 8f4f 	dsb	sy
}
90000e5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e60:	f3bf 8f6f 	isb	sy
}
90000e64:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000e66:	4b2e      	ldr	r3, [pc, #184]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000e68:	2200      	movs	r2, #0
90000e6a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000e6e:	f3bf 8f4f 	dsb	sy
}
90000e72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e74:	f3bf 8f6f 	isb	sy
}
90000e78:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000e7a:	4b29      	ldr	r3, [pc, #164]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000e7c:	695b      	ldr	r3, [r3, #20]
90000e7e:	4a28      	ldr	r2, [pc, #160]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000e84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e86:	f3bf 8f4f 	dsb	sy
}
90000e8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e8c:	f3bf 8f6f 	isb	sy
}
90000e90:	e000      	b.n	90000e94 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e92:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e94:	4b22      	ldr	r3, [pc, #136]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000e96:	695b      	ldr	r3, [r3, #20]
90000e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000e9c:	2b00      	cmp	r3, #0
90000e9e:	d138      	bne.n	90000f12 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000ea0:	4b1f      	ldr	r3, [pc, #124]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000ea2:	2200      	movs	r2, #0
90000ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000ea8:	f3bf 8f4f 	dsb	sy
}
90000eac:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000eae:	4b1c      	ldr	r3, [pc, #112]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000eb4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000eb6:	68fb      	ldr	r3, [r7, #12]
90000eb8:	0b5b      	lsrs	r3, r3, #13
90000eba:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000ebe:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000ec0:	68fb      	ldr	r3, [r7, #12]
90000ec2:	08db      	lsrs	r3, r3, #3
90000ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000ec8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000eca:	68bb      	ldr	r3, [r7, #8]
90000ecc:	015a      	lsls	r2, r3, #5
90000ece:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000ed2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000ed4:	687a      	ldr	r2, [r7, #4]
90000ed6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000ed8:	4911      	ldr	r1, [pc, #68]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000eda:	4313      	orrs	r3, r2
90000edc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000ee0:	687b      	ldr	r3, [r7, #4]
90000ee2:	1e5a      	subs	r2, r3, #1
90000ee4:	607a      	str	r2, [r7, #4]
90000ee6:	2b00      	cmp	r3, #0
90000ee8:	d1ef      	bne.n	90000eca <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000eea:	68bb      	ldr	r3, [r7, #8]
90000eec:	1e5a      	subs	r2, r3, #1
90000eee:	60ba      	str	r2, [r7, #8]
90000ef0:	2b00      	cmp	r3, #0
90000ef2:	d1e5      	bne.n	90000ec0 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000ef4:	f3bf 8f4f 	dsb	sy
}
90000ef8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000efa:	4b09      	ldr	r3, [pc, #36]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000efc:	695b      	ldr	r3, [r3, #20]
90000efe:	4a08      	ldr	r2, [pc, #32]	@ (90000f20 <CPU_CACHE_Enable+0xd8>)
90000f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000f06:	f3bf 8f4f 	dsb	sy
}
90000f0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000f0c:	f3bf 8f6f 	isb	sy
}
90000f10:	e000      	b.n	90000f14 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000f12:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000f14:	bf00      	nop
90000f16:	3714      	adds	r7, #20
90000f18:	46bd      	mov	sp, r7
90000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f1e:	4770      	bx	lr
90000f20:	e000ed00 	.word	0xe000ed00

90000f24 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000f24:	b580      	push	{r7, lr}
90000f26:	b082      	sub	sp, #8
90000f28:	af00      	add	r7, sp, #0
90000f2a:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000f2c:	490e      	ldr	r1, [pc, #56]	@ (90000f68 <MX_LTDC_ClockConfig+0x44>)
90000f2e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000f32:	f04f 0300 	mov.w	r3, #0
90000f36:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (90000f68 <MX_LTDC_ClockConfig+0x44>)
90000f3c:	2205      	movs	r2, #5
90000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000f40:	4b09      	ldr	r3, [pc, #36]	@ (90000f68 <MX_LTDC_ClockConfig+0x44>)
90000f42:	22c0      	movs	r2, #192	@ 0xc0
90000f44:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000f46:	4b08      	ldr	r3, [pc, #32]	@ (90000f68 <MX_LTDC_ClockConfig+0x44>)
90000f48:	2202      	movs	r2, #2
90000f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000f4c:	4b06      	ldr	r3, [pc, #24]	@ (90000f68 <MX_LTDC_ClockConfig+0x44>)
90000f4e:	2214      	movs	r2, #20
90000f50:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000f52:	4b05      	ldr	r3, [pc, #20]	@ (90000f68 <MX_LTDC_ClockConfig+0x44>)
90000f54:	2263      	movs	r2, #99	@ 0x63
90000f56:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000f58:	4803      	ldr	r0, [pc, #12]	@ (90000f68 <MX_LTDC_ClockConfig+0x44>)
90000f5a:	f006 fd3d 	bl	900079d8 <HAL_RCCEx_PeriphCLKConfig>
90000f5e:	4603      	mov	r3, r0
}
90000f60:	4618      	mov	r0, r3
90000f62:	3708      	adds	r7, #8
90000f64:	46bd      	mov	sp, r7
90000f66:	bd80      	pop	{r7, pc}
90000f68:	20000190 	.word	0x20000190

90000f6c <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000f6c:	b580      	push	{r7, lr}
90000f6e:	b084      	sub	sp, #16
90000f70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000f72:	f002 f9ff 	bl	90003374 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000f76:	2301      	movs	r3, #1
90000f78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000f7a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000f7e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000f80:	2318      	movs	r3, #24
90000f82:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000f84:	2303      	movs	r3, #3
90000f86:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000f88:	2300      	movs	r3, #0
90000f8a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000f8c:	2301      	movs	r3, #1
90000f8e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000f90:	2300      	movs	r3, #0
90000f92:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000f94:	2301      	movs	r3, #1
90000f96:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000f98:	2300      	movs	r3, #0
90000f9a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000f9c:	2300      	movs	r3, #0
90000f9e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000fa0:	2300      	movs	r3, #0
90000fa2:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000fa4:	463b      	mov	r3, r7
90000fa6:	4618      	mov	r0, r3
90000fa8:	f002 fa1c 	bl	900033e4 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000fac:	2004      	movs	r0, #4
90000fae:	f002 f9f9 	bl	900033a4 <HAL_MPU_Enable>
}
90000fb2:	bf00      	nop
90000fb4:	3710      	adds	r7, #16
90000fb6:	46bd      	mov	sp, r7
90000fb8:	bd80      	pop	{r7, pc}

90000fba <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000fba:	b480      	push	{r7}
90000fbc:	af00      	add	r7, sp, #0
}
90000fbe:	bf00      	nop
90000fc0:	46bd      	mov	sp, r7
90000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fc6:	4770      	bx	lr

90000fc8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000fc8:	b480      	push	{r7}
90000fca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000fcc:	bf00      	nop
90000fce:	e7fd      	b.n	90000fcc <HardFault_Handler+0x4>

90000fd0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000fd0:	b480      	push	{r7}
90000fd2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000fd4:	bf00      	nop
90000fd6:	e7fd      	b.n	90000fd4 <MemManage_Handler+0x4>

90000fd8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000fd8:	b480      	push	{r7}
90000fda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000fdc:	bf00      	nop
90000fde:	e7fd      	b.n	90000fdc <BusFault_Handler+0x4>

90000fe0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000fe0:	b480      	push	{r7}
90000fe2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000fe4:	bf00      	nop
90000fe6:	e7fd      	b.n	90000fe4 <UsageFault_Handler+0x4>

90000fe8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000fe8:	b480      	push	{r7}
90000fea:	af00      	add	r7, sp, #0
}
90000fec:	bf00      	nop
90000fee:	46bd      	mov	sp, r7
90000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ff4:	4770      	bx	lr

90000ff6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000ff6:	b480      	push	{r7}
90000ff8:	af00      	add	r7, sp, #0
}
90000ffa:	bf00      	nop
90000ffc:	46bd      	mov	sp, r7
90000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
90001002:	4770      	bx	lr

90001004 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90001004:	b480      	push	{r7}
90001006:	af00      	add	r7, sp, #0
}
90001008:	bf00      	nop
9000100a:	46bd      	mov	sp, r7
9000100c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001010:	4770      	bx	lr

90001012 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90001012:	b580      	push	{r7, lr}
90001014:	af00      	add	r7, sp, #0
  HAL_IncTick();
90001016:	f002 f83d 	bl	90003094 <HAL_IncTick>
}
9000101a:	bf00      	nop
9000101c:	bd80      	pop	{r7, pc}
	...

90001020 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90001020:	b580      	push	{r7, lr}
90001022:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90001024:	4802      	ldr	r0, [pc, #8]	@ (90001030 <OTG_FS_IRQHandler+0x10>)
90001026:	f002 fed4 	bl	90003dd2 <HAL_HCD_IRQHandler>
}
9000102a:	bf00      	nop
9000102c:	bd80      	pop	{r7, pc}
9000102e:	bf00      	nop
90001030:	20000254 	.word	0x20000254

90001034 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001034:	b580      	push	{r7, lr}
90001036:	b086      	sub	sp, #24
90001038:	af00      	add	r7, sp, #0
9000103a:	60f8      	str	r0, [r7, #12]
9000103c:	60b9      	str	r1, [r7, #8]
9000103e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001040:	2300      	movs	r3, #0
90001042:	617b      	str	r3, [r7, #20]
90001044:	e00a      	b.n	9000105c <_read+0x28>
  {
    *ptr++ = __io_getchar();
90001046:	f3af 8000 	nop.w
9000104a:	4601      	mov	r1, r0
9000104c:	68bb      	ldr	r3, [r7, #8]
9000104e:	1c5a      	adds	r2, r3, #1
90001050:	60ba      	str	r2, [r7, #8]
90001052:	b2ca      	uxtb	r2, r1
90001054:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001056:	697b      	ldr	r3, [r7, #20]
90001058:	3301      	adds	r3, #1
9000105a:	617b      	str	r3, [r7, #20]
9000105c:	697a      	ldr	r2, [r7, #20]
9000105e:	687b      	ldr	r3, [r7, #4]
90001060:	429a      	cmp	r2, r3
90001062:	dbf0      	blt.n	90001046 <_read+0x12>
  }

  return len;
90001064:	687b      	ldr	r3, [r7, #4]
}
90001066:	4618      	mov	r0, r3
90001068:	3718      	adds	r7, #24
9000106a:	46bd      	mov	sp, r7
9000106c:	bd80      	pop	{r7, pc}

9000106e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
9000106e:	b580      	push	{r7, lr}
90001070:	b086      	sub	sp, #24
90001072:	af00      	add	r7, sp, #0
90001074:	60f8      	str	r0, [r7, #12]
90001076:	60b9      	str	r1, [r7, #8]
90001078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000107a:	2300      	movs	r3, #0
9000107c:	617b      	str	r3, [r7, #20]
9000107e:	e009      	b.n	90001094 <_write+0x26>
  {
    __io_putchar(*ptr++);
90001080:	68bb      	ldr	r3, [r7, #8]
90001082:	1c5a      	adds	r2, r3, #1
90001084:	60ba      	str	r2, [r7, #8]
90001086:	781b      	ldrb	r3, [r3, #0]
90001088:	4618      	mov	r0, r3
9000108a:	f7ff fb3b 	bl	90000704 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000108e:	697b      	ldr	r3, [r7, #20]
90001090:	3301      	adds	r3, #1
90001092:	617b      	str	r3, [r7, #20]
90001094:	697a      	ldr	r2, [r7, #20]
90001096:	687b      	ldr	r3, [r7, #4]
90001098:	429a      	cmp	r2, r3
9000109a:	dbf1      	blt.n	90001080 <_write+0x12>
  }
  return len;
9000109c:	687b      	ldr	r3, [r7, #4]
}
9000109e:	4618      	mov	r0, r3
900010a0:	3718      	adds	r7, #24
900010a2:	46bd      	mov	sp, r7
900010a4:	bd80      	pop	{r7, pc}

900010a6 <_close>:

int _close(int file)
{
900010a6:	b480      	push	{r7}
900010a8:	b083      	sub	sp, #12
900010aa:	af00      	add	r7, sp, #0
900010ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
900010ae:	f04f 33ff 	mov.w	r3, #4294967295
}
900010b2:	4618      	mov	r0, r3
900010b4:	370c      	adds	r7, #12
900010b6:	46bd      	mov	sp, r7
900010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900010bc:	4770      	bx	lr

900010be <_fstat>:


int _fstat(int file, struct stat *st)
{
900010be:	b480      	push	{r7}
900010c0:	b083      	sub	sp, #12
900010c2:	af00      	add	r7, sp, #0
900010c4:	6078      	str	r0, [r7, #4]
900010c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
900010c8:	683b      	ldr	r3, [r7, #0]
900010ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
900010ce:	605a      	str	r2, [r3, #4]
  return 0;
900010d0:	2300      	movs	r3, #0
}
900010d2:	4618      	mov	r0, r3
900010d4:	370c      	adds	r7, #12
900010d6:	46bd      	mov	sp, r7
900010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900010dc:	4770      	bx	lr

900010de <_isatty>:

int _isatty(int file)
{
900010de:	b480      	push	{r7}
900010e0:	b083      	sub	sp, #12
900010e2:	af00      	add	r7, sp, #0
900010e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
900010e6:	2301      	movs	r3, #1
}
900010e8:	4618      	mov	r0, r3
900010ea:	370c      	adds	r7, #12
900010ec:	46bd      	mov	sp, r7
900010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900010f2:	4770      	bx	lr

900010f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
900010f4:	b480      	push	{r7}
900010f6:	b085      	sub	sp, #20
900010f8:	af00      	add	r7, sp, #0
900010fa:	60f8      	str	r0, [r7, #12]
900010fc:	60b9      	str	r1, [r7, #8]
900010fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90001100:	2300      	movs	r3, #0
}
90001102:	4618      	mov	r0, r3
90001104:	3714      	adds	r7, #20
90001106:	46bd      	mov	sp, r7
90001108:	f85d 7b04 	ldr.w	r7, [sp], #4
9000110c:	4770      	bx	lr
	...

90001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90001110:	b580      	push	{r7, lr}
90001112:	b086      	sub	sp, #24
90001114:	af00      	add	r7, sp, #0
90001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90001118:	4a14      	ldr	r2, [pc, #80]	@ (9000116c <_sbrk+0x5c>)
9000111a:	4b15      	ldr	r3, [pc, #84]	@ (90001170 <_sbrk+0x60>)
9000111c:	1ad3      	subs	r3, r2, r3
9000111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001120:	697b      	ldr	r3, [r7, #20]
90001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001124:	4b13      	ldr	r3, [pc, #76]	@ (90001174 <_sbrk+0x64>)
90001126:	681b      	ldr	r3, [r3, #0]
90001128:	2b00      	cmp	r3, #0
9000112a:	d102      	bne.n	90001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
9000112c:	4b11      	ldr	r3, [pc, #68]	@ (90001174 <_sbrk+0x64>)
9000112e:	4a12      	ldr	r2, [pc, #72]	@ (90001178 <_sbrk+0x68>)
90001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001132:	4b10      	ldr	r3, [pc, #64]	@ (90001174 <_sbrk+0x64>)
90001134:	681a      	ldr	r2, [r3, #0]
90001136:	687b      	ldr	r3, [r7, #4]
90001138:	4413      	add	r3, r2
9000113a:	693a      	ldr	r2, [r7, #16]
9000113c:	429a      	cmp	r2, r3
9000113e:	d207      	bcs.n	90001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
90001140:	f00b f91e 	bl	9000c380 <__errno>
90001144:	4603      	mov	r3, r0
90001146:	220c      	movs	r2, #12
90001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
9000114a:	f04f 33ff 	mov.w	r3, #4294967295
9000114e:	e009      	b.n	90001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90001150:	4b08      	ldr	r3, [pc, #32]	@ (90001174 <_sbrk+0x64>)
90001152:	681b      	ldr	r3, [r3, #0]
90001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001156:	4b07      	ldr	r3, [pc, #28]	@ (90001174 <_sbrk+0x64>)
90001158:	681a      	ldr	r2, [r3, #0]
9000115a:	687b      	ldr	r3, [r7, #4]
9000115c:	4413      	add	r3, r2
9000115e:	4a05      	ldr	r2, [pc, #20]	@ (90001174 <_sbrk+0x64>)
90001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001162:	68fb      	ldr	r3, [r7, #12]
}
90001164:	4618      	mov	r0, r3
90001166:	3718      	adds	r7, #24
90001168:	46bd      	mov	sp, r7
9000116a:	bd80      	pop	{r7, pc}
9000116c:	20020000 	.word	0x20020000
90001170:	00001000 	.word	0x00001000
90001174:	20000250 	.word	0x20000250
90001178:	20001498 	.word	0x20001498

9000117c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
9000117c:	b580      	push	{r7, lr}
9000117e:	b082      	sub	sp, #8
90001180:	af00      	add	r7, sp, #0
90001182:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90001184:	687b      	ldr	r3, [r7, #4]
90001186:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000118a:	4618      	mov	r0, r3
9000118c:	f00a f9e2 	bl	9000b554 <USBH_LL_IncTimer>
}
90001190:	bf00      	nop
90001192:	3708      	adds	r7, #8
90001194:	46bd      	mov	sp, r7
90001196:	bd80      	pop	{r7, pc}

90001198 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90001198:	b580      	push	{r7, lr}
9000119a:	b082      	sub	sp, #8
9000119c:	af00      	add	r7, sp, #0
9000119e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
900011a0:	687b      	ldr	r3, [r7, #4]
900011a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011a6:	4618      	mov	r0, r3
900011a8:	f00a fa1e 	bl	9000b5e8 <USBH_LL_Connect>
}
900011ac:	bf00      	nop
900011ae:	3708      	adds	r7, #8
900011b0:	46bd      	mov	sp, r7
900011b2:	bd80      	pop	{r7, pc}

900011b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
900011b4:	b580      	push	{r7, lr}
900011b6:	b082      	sub	sp, #8
900011b8:	af00      	add	r7, sp, #0
900011ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
900011bc:	687b      	ldr	r3, [r7, #4]
900011be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011c2:	4618      	mov	r0, r3
900011c4:	f00a fa27 	bl	9000b616 <USBH_LL_Disconnect>
}
900011c8:	bf00      	nop
900011ca:	3708      	adds	r7, #8
900011cc:	46bd      	mov	sp, r7
900011ce:	bd80      	pop	{r7, pc}

900011d0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
900011d0:	b580      	push	{r7, lr}
900011d2:	b082      	sub	sp, #8
900011d4:	af00      	add	r7, sp, #0
900011d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
900011d8:	687b      	ldr	r3, [r7, #4]
900011da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011de:	4618      	mov	r0, r3
900011e0:	f00a f9e2 	bl	9000b5a8 <USBH_LL_PortEnabled>
}
900011e4:	bf00      	nop
900011e6:	3708      	adds	r7, #8
900011e8:	46bd      	mov	sp, r7
900011ea:	bd80      	pop	{r7, pc}

900011ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
900011ec:	b580      	push	{r7, lr}
900011ee:	b082      	sub	sp, #8
900011f0:	af00      	add	r7, sp, #0
900011f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
900011f4:	687b      	ldr	r3, [r7, #4]
900011f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900011fa:	4618      	mov	r0, r3
900011fc:	f00a f9e2 	bl	9000b5c4 <USBH_LL_PortDisabled>
}
90001200:	bf00      	nop
90001202:	3708      	adds	r7, #8
90001204:	46bd      	mov	sp, r7
90001206:	bd80      	pop	{r7, pc}

90001208 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90001208:	b480      	push	{r7}
9000120a:	b083      	sub	sp, #12
9000120c:	af00      	add	r7, sp, #0
9000120e:	6078      	str	r0, [r7, #4]
90001210:	460b      	mov	r3, r1
90001212:	70fb      	strb	r3, [r7, #3]
90001214:	4613      	mov	r3, r2
90001216:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90001218:	bf00      	nop
9000121a:	370c      	adds	r7, #12
9000121c:	46bd      	mov	sp, r7
9000121e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001222:	4770      	bx	lr

90001224 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90001224:	b580      	push	{r7, lr}
90001226:	b082      	sub	sp, #8
90001228:	af00      	add	r7, sp, #0
9000122a:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
9000122c:	687b      	ldr	r3, [r7, #4]
9000122e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001232:	4618      	mov	r0, r3
90001234:	f002 fedd 	bl	90003ff2 <HAL_HCD_Stop>
  return USBH_OK;
90001238:	2300      	movs	r3, #0
}
9000123a:	4618      	mov	r0, r3
9000123c:	3708      	adds	r7, #8
9000123e:	46bd      	mov	sp, r7
90001240:	bd80      	pop	{r7, pc}
	...

90001244 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001244:	b580      	push	{r7, lr}
90001246:	b084      	sub	sp, #16
90001248:	af00      	add	r7, sp, #0
9000124a:	6078      	str	r0, [r7, #4]
9000124c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
9000124e:	687b      	ldr	r3, [r7, #4]
90001250:	2b00      	cmp	r3, #0
90001252:	d103      	bne.n	9000125c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90001254:	f04f 33ff 	mov.w	r3, #4294967295
90001258:	60fb      	str	r3, [r7, #12]
9000125a:	e02c      	b.n	900012b6 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
9000125c:	683b      	ldr	r3, [r7, #0]
9000125e:	681a      	ldr	r2, [r3, #0]
90001260:	687b      	ldr	r3, [r7, #4]
90001262:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90001264:	683b      	ldr	r3, [r7, #0]
90001266:	685a      	ldr	r2, [r3, #4]
90001268:	687b      	ldr	r3, [r7, #4]
9000126a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
9000126c:	683b      	ldr	r3, [r7, #0]
9000126e:	891a      	ldrh	r2, [r3, #8]
90001270:	687b      	ldr	r3, [r7, #4]
90001272:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90001274:	683b      	ldr	r3, [r7, #0]
90001276:	68da      	ldr	r2, [r3, #12]
90001278:	687b      	ldr	r3, [r7, #4]
9000127a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
9000127c:	683b      	ldr	r3, [r7, #0]
9000127e:	691a      	ldr	r2, [r3, #16]
90001280:	687b      	ldr	r3, [r7, #4]
90001282:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90001284:	683b      	ldr	r3, [r7, #0]
90001286:	695a      	ldr	r2, [r3, #20]
90001288:	687b      	ldr	r3, [r7, #4]
9000128a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
9000128c:	687b      	ldr	r3, [r7, #4]
9000128e:	4a0c      	ldr	r2, [pc, #48]	@ (900012c0 <FT5336_RegisterBusIO+0x7c>)
90001290:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90001292:	687b      	ldr	r3, [r7, #4]
90001294:	4a0b      	ldr	r2, [pc, #44]	@ (900012c4 <FT5336_RegisterBusIO+0x80>)
90001296:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
90001298:	687b      	ldr	r3, [r7, #4]
9000129a:	687a      	ldr	r2, [r7, #4]
9000129c:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
9000129e:	687b      	ldr	r3, [r7, #4]
900012a0:	681b      	ldr	r3, [r3, #0]
900012a2:	2b00      	cmp	r3, #0
900012a4:	d004      	beq.n	900012b0 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900012a6:	687b      	ldr	r3, [r7, #4]
900012a8:	681b      	ldr	r3, [r3, #0]
900012aa:	4798      	blx	r3
900012ac:	60f8      	str	r0, [r7, #12]
900012ae:	e002      	b.n	900012b6 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
900012b0:	f04f 33ff 	mov.w	r3, #4294967295
900012b4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
900012b6:	68fb      	ldr	r3, [r7, #12]
}
900012b8:	4618      	mov	r0, r3
900012ba:	3710      	adds	r7, #16
900012bc:	46bd      	mov	sp, r7
900012be:	bd80      	pop	{r7, pc}
900012c0:	900012e9 	.word	0x900012e9
900012c4:	9000131d 	.word	0x9000131d

900012c8 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
900012c8:	b580      	push	{r7, lr}
900012ca:	b082      	sub	sp, #8
900012cc:	af00      	add	r7, sp, #0
900012ce:	6078      	str	r0, [r7, #4]
900012d0:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900012d2:	687b      	ldr	r3, [r7, #4]
900012d4:	3318      	adds	r3, #24
900012d6:	6839      	ldr	r1, [r7, #0]
900012d8:	4618      	mov	r0, r3
900012da:	f000 f850 	bl	9000137e <ft5336_chip_id>
900012de:	4603      	mov	r3, r0
}
900012e0:	4618      	mov	r0, r3
900012e2:	3708      	adds	r7, #8
900012e4:	46bd      	mov	sp, r7
900012e6:	bd80      	pop	{r7, pc}

900012e8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900012e8:	b590      	push	{r4, r7, lr}
900012ea:	b087      	sub	sp, #28
900012ec:	af00      	add	r7, sp, #0
900012ee:	60f8      	str	r0, [r7, #12]
900012f0:	607a      	str	r2, [r7, #4]
900012f2:	461a      	mov	r2, r3
900012f4:	460b      	mov	r3, r1
900012f6:	72fb      	strb	r3, [r7, #11]
900012f8:	4613      	mov	r3, r2
900012fa:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
900012fc:	68fb      	ldr	r3, [r7, #12]
900012fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90001300:	697b      	ldr	r3, [r7, #20]
90001302:	691c      	ldr	r4, [r3, #16]
90001304:	697b      	ldr	r3, [r7, #20]
90001306:	8918      	ldrh	r0, [r3, #8]
90001308:	7afb      	ldrb	r3, [r7, #11]
9000130a:	b299      	uxth	r1, r3
9000130c:	893b      	ldrh	r3, [r7, #8]
9000130e:	687a      	ldr	r2, [r7, #4]
90001310:	47a0      	blx	r4
90001312:	4603      	mov	r3, r0
}
90001314:	4618      	mov	r0, r3
90001316:	371c      	adds	r7, #28
90001318:	46bd      	mov	sp, r7
9000131a:	bd90      	pop	{r4, r7, pc}

9000131c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000131c:	b590      	push	{r4, r7, lr}
9000131e:	b087      	sub	sp, #28
90001320:	af00      	add	r7, sp, #0
90001322:	60f8      	str	r0, [r7, #12]
90001324:	607a      	str	r2, [r7, #4]
90001326:	461a      	mov	r2, r3
90001328:	460b      	mov	r3, r1
9000132a:	72fb      	strb	r3, [r7, #11]
9000132c:	4613      	mov	r3, r2
9000132e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001330:	68fb      	ldr	r3, [r7, #12]
90001332:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001334:	697b      	ldr	r3, [r7, #20]
90001336:	68dc      	ldr	r4, [r3, #12]
90001338:	697b      	ldr	r3, [r7, #20]
9000133a:	8918      	ldrh	r0, [r3, #8]
9000133c:	7afb      	ldrb	r3, [r7, #11]
9000133e:	b299      	uxth	r1, r3
90001340:	893b      	ldrh	r3, [r7, #8]
90001342:	687a      	ldr	r2, [r7, #4]
90001344:	47a0      	blx	r4
90001346:	4603      	mov	r3, r0
}
90001348:	4618      	mov	r0, r3
9000134a:	371c      	adds	r7, #28
9000134c:	46bd      	mov	sp, r7
9000134e:	bd90      	pop	{r4, r7, pc}

90001350 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90001350:	b590      	push	{r4, r7, lr}
90001352:	b085      	sub	sp, #20
90001354:	af00      	add	r7, sp, #0
90001356:	60f8      	str	r0, [r7, #12]
90001358:	607a      	str	r2, [r7, #4]
9000135a:	461a      	mov	r2, r3
9000135c:	460b      	mov	r3, r1
9000135e:	72fb      	strb	r3, [r7, #11]
90001360:	4613      	mov	r3, r2
90001362:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90001364:	68fb      	ldr	r3, [r7, #12]
90001366:	685c      	ldr	r4, [r3, #4]
90001368:	68fb      	ldr	r3, [r7, #12]
9000136a:	6898      	ldr	r0, [r3, #8]
9000136c:	893b      	ldrh	r3, [r7, #8]
9000136e:	7af9      	ldrb	r1, [r7, #11]
90001370:	687a      	ldr	r2, [r7, #4]
90001372:	47a0      	blx	r4
90001374:	4603      	mov	r3, r0
}
90001376:	4618      	mov	r0, r3
90001378:	3714      	adds	r7, #20
9000137a:	46bd      	mov	sp, r7
9000137c:	bd90      	pop	{r4, r7, pc}

9000137e <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
9000137e:	b580      	push	{r7, lr}
90001380:	b084      	sub	sp, #16
90001382:	af00      	add	r7, sp, #0
90001384:	6078      	str	r0, [r7, #4]
90001386:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
90001388:	2301      	movs	r3, #1
9000138a:	683a      	ldr	r2, [r7, #0]
9000138c:	21a8      	movs	r1, #168	@ 0xa8
9000138e:	6878      	ldr	r0, [r7, #4]
90001390:	f7ff ffde 	bl	90001350 <ft5336_read_reg>
90001394:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90001396:	68fb      	ldr	r3, [r7, #12]
90001398:	2b00      	cmp	r3, #0
9000139a:	d107      	bne.n	900013ac <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
9000139c:	683b      	ldr	r3, [r7, #0]
9000139e:	781a      	ldrb	r2, [r3, #0]
900013a0:	683b      	ldr	r3, [r7, #0]
900013a2:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900013a4:	683b      	ldr	r3, [r7, #0]
900013a6:	781a      	ldrb	r2, [r3, #0]
900013a8:	683b      	ldr	r3, [r7, #0]
900013aa:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900013ac:	68fb      	ldr	r3, [r7, #12]
}
900013ae:	4618      	mov	r0, r3
900013b0:	3710      	adds	r7, #16
900013b2:	46bd      	mov	sp, r7
900013b4:	bd80      	pop	{r7, pc}

900013b6 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900013b6:	b580      	push	{r7, lr}
900013b8:	b084      	sub	sp, #16
900013ba:	af00      	add	r7, sp, #0
900013bc:	6078      	str	r0, [r7, #4]
900013be:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
900013c0:	f04f 33ff 	mov.w	r3, #4294967295
900013c4:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900013c6:	683b      	ldr	r3, [r7, #0]
900013c8:	681b      	ldr	r3, [r3, #0]
900013ca:	4619      	mov	r1, r3
900013cc:	6878      	ldr	r0, [r7, #4]
900013ce:	f000 f831 	bl	90001434 <MT48LC4M32B2_ClockEnable>
900013d2:	4603      	mov	r3, r0
900013d4:	2b00      	cmp	r3, #0
900013d6:	d128      	bne.n	9000142a <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
900013d8:	2001      	movs	r0, #1
900013da:	f000 f8e1 	bl	900015a0 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900013de:	683b      	ldr	r3, [r7, #0]
900013e0:	681b      	ldr	r3, [r3, #0]
900013e2:	4619      	mov	r1, r3
900013e4:	6878      	ldr	r0, [r7, #4]
900013e6:	f000 f849 	bl	9000147c <MT48LC4M32B2_Precharge>
900013ea:	4603      	mov	r3, r0
900013ec:	2b00      	cmp	r3, #0
900013ee:	d11c      	bne.n	9000142a <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
900013f0:	683b      	ldr	r3, [r7, #0]
900013f2:	6819      	ldr	r1, [r3, #0]
900013f4:	683b      	ldr	r3, [r7, #0]
900013f6:	685b      	ldr	r3, [r3, #4]
900013f8:	461a      	mov	r2, r3
900013fa:	6878      	ldr	r0, [r7, #4]
900013fc:	f000 f896 	bl	9000152c <MT48LC4M32B2_RefreshMode>
90001400:	4603      	mov	r3, r0
90001402:	2b00      	cmp	r3, #0
90001404:	d111      	bne.n	9000142a <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001406:	6839      	ldr	r1, [r7, #0]
90001408:	6878      	ldr	r0, [r7, #4]
9000140a:	f000 f85b 	bl	900014c4 <MT48LC4M32B2_ModeRegConfig>
9000140e:	4603      	mov	r3, r0
90001410:	2b00      	cmp	r3, #0
90001412:	d10a      	bne.n	9000142a <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001414:	683b      	ldr	r3, [r7, #0]
90001416:	689b      	ldr	r3, [r3, #8]
90001418:	4619      	mov	r1, r3
9000141a:	6878      	ldr	r0, [r7, #4]
9000141c:	f000 f8ac 	bl	90001578 <MT48LC4M32B2_RefreshRate>
90001420:	4603      	mov	r3, r0
90001422:	2b00      	cmp	r3, #0
90001424:	d101      	bne.n	9000142a <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001426:	2300      	movs	r3, #0
90001428:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
9000142a:	68fb      	ldr	r3, [r7, #12]
}
9000142c:	4618      	mov	r0, r3
9000142e:	3710      	adds	r7, #16
90001430:	46bd      	mov	sp, r7
90001432:	bd80      	pop	{r7, pc}

90001434 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001434:	b580      	push	{r7, lr}
90001436:	b082      	sub	sp, #8
90001438:	af00      	add	r7, sp, #0
9000143a:	6078      	str	r0, [r7, #4]
9000143c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000143e:	4b0e      	ldr	r3, [pc, #56]	@ (90001478 <MT48LC4M32B2_ClockEnable+0x44>)
90001440:	2201      	movs	r2, #1
90001442:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001444:	4a0c      	ldr	r2, [pc, #48]	@ (90001478 <MT48LC4M32B2_ClockEnable+0x44>)
90001446:	683b      	ldr	r3, [r7, #0]
90001448:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000144a:	4b0b      	ldr	r3, [pc, #44]	@ (90001478 <MT48LC4M32B2_ClockEnable+0x44>)
9000144c:	2201      	movs	r2, #1
9000144e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001450:	4b09      	ldr	r3, [pc, #36]	@ (90001478 <MT48LC4M32B2_ClockEnable+0x44>)
90001452:	2200      	movs	r2, #0
90001454:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001456:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000145a:	4907      	ldr	r1, [pc, #28]	@ (90001478 <MT48LC4M32B2_ClockEnable+0x44>)
9000145c:	6878      	ldr	r0, [r7, #4]
9000145e:	f008 f92d 	bl	900096bc <HAL_SDRAM_SendCommand>
90001462:	4603      	mov	r3, r0
90001464:	2b00      	cmp	r3, #0
90001466:	d002      	beq.n	9000146e <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001468:	f04f 33ff 	mov.w	r3, #4294967295
9000146c:	e000      	b.n	90001470 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000146e:	2300      	movs	r3, #0
  }
}
90001470:	4618      	mov	r0, r3
90001472:	3708      	adds	r7, #8
90001474:	46bd      	mov	sp, r7
90001476:	bd80      	pop	{r7, pc}
90001478:	20000634 	.word	0x20000634

9000147c <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
9000147c:	b580      	push	{r7, lr}
9000147e:	b082      	sub	sp, #8
90001480:	af00      	add	r7, sp, #0
90001482:	6078      	str	r0, [r7, #4]
90001484:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90001486:	4b0e      	ldr	r3, [pc, #56]	@ (900014c0 <MT48LC4M32B2_Precharge+0x44>)
90001488:	2202      	movs	r2, #2
9000148a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
9000148c:	4a0c      	ldr	r2, [pc, #48]	@ (900014c0 <MT48LC4M32B2_Precharge+0x44>)
9000148e:	683b      	ldr	r3, [r7, #0]
90001490:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001492:	4b0b      	ldr	r3, [pc, #44]	@ (900014c0 <MT48LC4M32B2_Precharge+0x44>)
90001494:	2201      	movs	r2, #1
90001496:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001498:	4b09      	ldr	r3, [pc, #36]	@ (900014c0 <MT48LC4M32B2_Precharge+0x44>)
9000149a:	2200      	movs	r2, #0
9000149c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000149e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900014a2:	4907      	ldr	r1, [pc, #28]	@ (900014c0 <MT48LC4M32B2_Precharge+0x44>)
900014a4:	6878      	ldr	r0, [r7, #4]
900014a6:	f008 f909 	bl	900096bc <HAL_SDRAM_SendCommand>
900014aa:	4603      	mov	r3, r0
900014ac:	2b00      	cmp	r3, #0
900014ae:	d002      	beq.n	900014b6 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900014b0:	f04f 33ff 	mov.w	r3, #4294967295
900014b4:	e000      	b.n	900014b8 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900014b6:	2300      	movs	r3, #0
  }
}
900014b8:	4618      	mov	r0, r3
900014ba:	3708      	adds	r7, #8
900014bc:	46bd      	mov	sp, r7
900014be:	bd80      	pop	{r7, pc}
900014c0:	20000634 	.word	0x20000634

900014c4 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900014c4:	b580      	push	{r7, lr}
900014c6:	b084      	sub	sp, #16
900014c8:	af00      	add	r7, sp, #0
900014ca:	6078      	str	r0, [r7, #4]
900014cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900014ce:	683b      	ldr	r3, [r7, #0]
900014d0:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
900014d2:	683b      	ldr	r3, [r7, #0]
900014d4:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900014d6:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
900014d8:	683b      	ldr	r3, [r7, #0]
900014da:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
900014dc:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
900014de:	683b      	ldr	r3, [r7, #0]
900014e0:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
900014e2:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
900014e4:	683b      	ldr	r3, [r7, #0]
900014e6:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900014e8:	4313      	orrs	r3, r2
900014ea:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
900014ec:	4b0e      	ldr	r3, [pc, #56]	@ (90001528 <MT48LC4M32B2_ModeRegConfig+0x64>)
900014ee:	2204      	movs	r2, #4
900014f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
900014f2:	683b      	ldr	r3, [r7, #0]
900014f4:	681b      	ldr	r3, [r3, #0]
900014f6:	4a0c      	ldr	r2, [pc, #48]	@ (90001528 <MT48LC4M32B2_ModeRegConfig+0x64>)
900014f8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900014fa:	4b0b      	ldr	r3, [pc, #44]	@ (90001528 <MT48LC4M32B2_ModeRegConfig+0x64>)
900014fc:	2201      	movs	r2, #1
900014fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001500:	4a09      	ldr	r2, [pc, #36]	@ (90001528 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001502:	68fb      	ldr	r3, [r7, #12]
90001504:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000150a:	4907      	ldr	r1, [pc, #28]	@ (90001528 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000150c:	6878      	ldr	r0, [r7, #4]
9000150e:	f008 f8d5 	bl	900096bc <HAL_SDRAM_SendCommand>
90001512:	4603      	mov	r3, r0
90001514:	2b00      	cmp	r3, #0
90001516:	d002      	beq.n	9000151e <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001518:	f04f 33ff 	mov.w	r3, #4294967295
9000151c:	e000      	b.n	90001520 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000151e:	2300      	movs	r3, #0
  }
}
90001520:	4618      	mov	r0, r3
90001522:	3710      	adds	r7, #16
90001524:	46bd      	mov	sp, r7
90001526:	bd80      	pop	{r7, pc}
90001528:	20000634 	.word	0x20000634

9000152c <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
9000152c:	b580      	push	{r7, lr}
9000152e:	b084      	sub	sp, #16
90001530:	af00      	add	r7, sp, #0
90001532:	60f8      	str	r0, [r7, #12]
90001534:	60b9      	str	r1, [r7, #8]
90001536:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001538:	4a0e      	ldr	r2, [pc, #56]	@ (90001574 <MT48LC4M32B2_RefreshMode+0x48>)
9000153a:	687b      	ldr	r3, [r7, #4]
9000153c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
9000153e:	4a0d      	ldr	r2, [pc, #52]	@ (90001574 <MT48LC4M32B2_RefreshMode+0x48>)
90001540:	68bb      	ldr	r3, [r7, #8]
90001542:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001544:	4b0b      	ldr	r3, [pc, #44]	@ (90001574 <MT48LC4M32B2_RefreshMode+0x48>)
90001546:	2208      	movs	r2, #8
90001548:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000154a:	4b0a      	ldr	r3, [pc, #40]	@ (90001574 <MT48LC4M32B2_RefreshMode+0x48>)
9000154c:	2200      	movs	r2, #0
9000154e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001554:	4907      	ldr	r1, [pc, #28]	@ (90001574 <MT48LC4M32B2_RefreshMode+0x48>)
90001556:	68f8      	ldr	r0, [r7, #12]
90001558:	f008 f8b0 	bl	900096bc <HAL_SDRAM_SendCommand>
9000155c:	4603      	mov	r3, r0
9000155e:	2b00      	cmp	r3, #0
90001560:	d002      	beq.n	90001568 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90001562:	f04f 33ff 	mov.w	r3, #4294967295
90001566:	e000      	b.n	9000156a <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001568:	2300      	movs	r3, #0
  }
}
9000156a:	4618      	mov	r0, r3
9000156c:	3710      	adds	r7, #16
9000156e:	46bd      	mov	sp, r7
90001570:	bd80      	pop	{r7, pc}
90001572:	bf00      	nop
90001574:	20000634 	.word	0x20000634

90001578 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
90001578:	b580      	push	{r7, lr}
9000157a:	b082      	sub	sp, #8
9000157c:	af00      	add	r7, sp, #0
9000157e:	6078      	str	r0, [r7, #4]
90001580:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90001582:	6839      	ldr	r1, [r7, #0]
90001584:	6878      	ldr	r0, [r7, #4]
90001586:	f008 f8ce 	bl	90009726 <HAL_SDRAM_ProgramRefreshRate>
9000158a:	4603      	mov	r3, r0
9000158c:	2b00      	cmp	r3, #0
9000158e:	d002      	beq.n	90001596 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001590:	f04f 33ff 	mov.w	r3, #4294967295
90001594:	e000      	b.n	90001598 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001596:	2300      	movs	r3, #0
  }
}
90001598:	4618      	mov	r0, r3
9000159a:	3708      	adds	r7, #8
9000159c:	46bd      	mov	sp, r7
9000159e:	bd80      	pop	{r7, pc}

900015a0 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
900015a0:	b580      	push	{r7, lr}
900015a2:	b084      	sub	sp, #16
900015a4:	af00      	add	r7, sp, #0
900015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900015a8:	f001 fd88 	bl	900030bc <HAL_GetTick>
900015ac:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900015ae:	bf00      	nop
900015b0:	f001 fd84 	bl	900030bc <HAL_GetTick>
900015b4:	4602      	mov	r2, r0
900015b6:	68fb      	ldr	r3, [r7, #12]
900015b8:	1ad3      	subs	r3, r2, r3
900015ba:	687a      	ldr	r2, [r7, #4]
900015bc:	429a      	cmp	r2, r3
900015be:	d8f7      	bhi.n	900015b0 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
900015c0:	2300      	movs	r3, #0
}
900015c2:	4618      	mov	r0, r3
900015c4:	3710      	adds	r7, #16
900015c6:	46bd      	mov	sp, r7
900015c8:	bd80      	pop	{r7, pc}
	...

900015cc <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
900015cc:	b580      	push	{r7, lr}
900015ce:	b08a      	sub	sp, #40	@ 0x28
900015d0:	af00      	add	r7, sp, #0
900015d2:	4603      	mov	r3, r0
900015d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
900015d6:	2300      	movs	r3, #0
900015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
900015da:	79fb      	ldrb	r3, [r7, #7]
900015dc:	2b00      	cmp	r3, #0
900015de:	d10f      	bne.n	90001600 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
900015e0:	4b26      	ldr	r3, [pc, #152]	@ (9000167c <BSP_LED_Init+0xb0>)
900015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900015e6:	4a25      	ldr	r2, [pc, #148]	@ (9000167c <BSP_LED_Init+0xb0>)
900015e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
900015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900015f0:	4b22      	ldr	r3, [pc, #136]	@ (9000167c <BSP_LED_Init+0xb0>)
900015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900015f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900015fa:	60fb      	str	r3, [r7, #12]
900015fc:	68fb      	ldr	r3, [r7, #12]
900015fe:	e015      	b.n	9000162c <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
90001600:	79fb      	ldrb	r3, [r7, #7]
90001602:	2b01      	cmp	r3, #1
90001604:	d10f      	bne.n	90001626 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
90001606:	4b1d      	ldr	r3, [pc, #116]	@ (9000167c <BSP_LED_Init+0xb0>)
90001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000160c:	4a1b      	ldr	r2, [pc, #108]	@ (9000167c <BSP_LED_Init+0xb0>)
9000160e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90001612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001616:	4b19      	ldr	r3, [pc, #100]	@ (9000167c <BSP_LED_Init+0xb0>)
90001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90001620:	60bb      	str	r3, [r7, #8]
90001622:	68bb      	ldr	r3, [r7, #8]
90001624:	e002      	b.n	9000162c <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001626:	f06f 0301 	mvn.w	r3, #1
9000162a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
9000162c:	79fb      	ldrb	r3, [r7, #7]
9000162e:	4a14      	ldr	r2, [pc, #80]	@ (90001680 <BSP_LED_Init+0xb4>)
90001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001634:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
90001636:	2301      	movs	r3, #1
90001638:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
9000163a:	2301      	movs	r3, #1
9000163c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000163e:	2303      	movs	r3, #3
90001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
90001642:	79fb      	ldrb	r3, [r7, #7]
90001644:	4a0f      	ldr	r2, [pc, #60]	@ (90001684 <BSP_LED_Init+0xb8>)
90001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000164a:	f107 0210 	add.w	r2, r7, #16
9000164e:	4611      	mov	r1, r2
90001650:	4618      	mov	r0, r3
90001652:	f002 f9dd 	bl	90003a10 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
90001656:	79fb      	ldrb	r3, [r7, #7]
90001658:	4a0a      	ldr	r2, [pc, #40]	@ (90001684 <BSP_LED_Init+0xb8>)
9000165a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9000165e:	79fb      	ldrb	r3, [r7, #7]
90001660:	4a07      	ldr	r2, [pc, #28]	@ (90001680 <BSP_LED_Init+0xb4>)
90001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001666:	b29b      	uxth	r3, r3
90001668:	2201      	movs	r2, #1
9000166a:	4619      	mov	r1, r3
9000166c:	f002 fb98 	bl	90003da0 <HAL_GPIO_WritePin>
  return ret;
90001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
90001672:	4618      	mov	r0, r3
90001674:	3728      	adds	r7, #40	@ 0x28
90001676:	46bd      	mov	sp, r7
90001678:	bd80      	pop	{r7, pc}
9000167a:	bf00      	nop
9000167c:	58024400 	.word	0x58024400
90001680:	9000ccf4 	.word	0x9000ccf4
90001684:	20000050 	.word	0x20000050

90001688 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
90001688:	b580      	push	{r7, lr}
9000168a:	b082      	sub	sp, #8
9000168c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
9000168e:	2300      	movs	r3, #0
90001690:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001692:	4b16      	ldr	r3, [pc, #88]	@ (900016ec <BSP_I2C4_Init+0x64>)
90001694:	4a16      	ldr	r2, [pc, #88]	@ (900016f0 <BSP_I2C4_Init+0x68>)
90001696:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
90001698:	4b16      	ldr	r3, [pc, #88]	@ (900016f4 <BSP_I2C4_Init+0x6c>)
9000169a:	681b      	ldr	r3, [r3, #0]
9000169c:	2b00      	cmp	r3, #0
9000169e:	d11f      	bne.n	900016e0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
900016a0:	4b14      	ldr	r3, [pc, #80]	@ (900016f4 <BSP_I2C4_Init+0x6c>)
900016a2:	681b      	ldr	r3, [r3, #0]
900016a4:	3301      	adds	r3, #1
900016a6:	4a13      	ldr	r2, [pc, #76]	@ (900016f4 <BSP_I2C4_Init+0x6c>)
900016a8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
900016aa:	4810      	ldr	r0, [pc, #64]	@ (900016ec <BSP_I2C4_Init+0x64>)
900016ac:	f004 faf8 	bl	90005ca0 <HAL_I2C_GetState>
900016b0:	4603      	mov	r3, r0
900016b2:	2b00      	cmp	r3, #0
900016b4:	d114      	bne.n	900016e0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
900016b6:	480d      	ldr	r0, [pc, #52]	@ (900016ec <BSP_I2C4_Init+0x64>)
900016b8:	f000 fb06 	bl	90001cc8 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900016bc:	f006 f976 	bl	900079ac <HAL_RCC_GetPCLK2Freq>
900016c0:	4603      	mov	r3, r0
900016c2:	490d      	ldr	r1, [pc, #52]	@ (900016f8 <BSP_I2C4_Init+0x70>)
900016c4:	4618      	mov	r0, r3
900016c6:	f000 f889 	bl	900017dc <I2C_GetTiming>
900016ca:	4603      	mov	r3, r0
900016cc:	4619      	mov	r1, r3
900016ce:	4807      	ldr	r0, [pc, #28]	@ (900016ec <BSP_I2C4_Init+0x64>)
900016d0:	f000 f814 	bl	900016fc <MX_I2C4_Init>
900016d4:	4603      	mov	r3, r0
900016d6:	2b00      	cmp	r3, #0
900016d8:	d002      	beq.n	900016e0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
900016da:	f06f 0307 	mvn.w	r3, #7
900016de:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
900016e0:	687b      	ldr	r3, [r7, #4]
}
900016e2:	4618      	mov	r0, r3
900016e4:	3708      	adds	r7, #8
900016e6:	46bd      	mov	sp, r7
900016e8:	bd80      	pop	{r7, pc}
900016ea:	bf00      	nop
900016ec:	2000104c 	.word	0x2000104c
900016f0:	58001c00 	.word	0x58001c00
900016f4:	20000644 	.word	0x20000644
900016f8:	000186a0 	.word	0x000186a0

900016fc <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
900016fc:	b580      	push	{r7, lr}
900016fe:	b084      	sub	sp, #16
90001700:	af00      	add	r7, sp, #0
90001702:	6078      	str	r0, [r7, #4]
90001704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001706:	2300      	movs	r3, #0
90001708:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
9000170a:	687b      	ldr	r3, [r7, #4]
9000170c:	683a      	ldr	r2, [r7, #0]
9000170e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001710:	687b      	ldr	r3, [r7, #4]
90001712:	2200      	movs	r2, #0
90001714:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001716:	687b      	ldr	r3, [r7, #4]
90001718:	2201      	movs	r2, #1
9000171a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
9000171c:	687b      	ldr	r3, [r7, #4]
9000171e:	2200      	movs	r2, #0
90001720:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001722:	687b      	ldr	r3, [r7, #4]
90001724:	2200      	movs	r2, #0
90001726:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001728:	687b      	ldr	r3, [r7, #4]
9000172a:	2200      	movs	r2, #0
9000172c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
9000172e:	687b      	ldr	r3, [r7, #4]
90001730:	2200      	movs	r2, #0
90001732:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001734:	687b      	ldr	r3, [r7, #4]
90001736:	2200      	movs	r2, #0
90001738:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
9000173a:	6878      	ldr	r0, [r7, #4]
9000173c:	f004 f8f0 	bl	90005920 <HAL_I2C_Init>
90001740:	4603      	mov	r3, r0
90001742:	2b00      	cmp	r3, #0
90001744:	d002      	beq.n	9000174c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001746:	2301      	movs	r3, #1
90001748:	73fb      	strb	r3, [r7, #15]
9000174a:	e014      	b.n	90001776 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
9000174c:	2300      	movs	r3, #0
9000174e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001750:	68b9      	ldr	r1, [r7, #8]
90001752:	6878      	ldr	r0, [r7, #4]
90001754:	f004 fd2c 	bl	900061b0 <HAL_I2CEx_ConfigAnalogFilter>
90001758:	4603      	mov	r3, r0
9000175a:	2b00      	cmp	r3, #0
9000175c:	d002      	beq.n	90001764 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
9000175e:	2301      	movs	r3, #1
90001760:	73fb      	strb	r3, [r7, #15]
90001762:	e008      	b.n	90001776 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001764:	2100      	movs	r1, #0
90001766:	6878      	ldr	r0, [r7, #4]
90001768:	f004 fd6d 	bl	90006246 <HAL_I2CEx_ConfigDigitalFilter>
9000176c:	4603      	mov	r3, r0
9000176e:	2b00      	cmp	r3, #0
90001770:	d001      	beq.n	90001776 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001772:	2301      	movs	r3, #1
90001774:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001776:	7bfb      	ldrb	r3, [r7, #15]
}
90001778:	4618      	mov	r0, r3
9000177a:	3710      	adds	r7, #16
9000177c:	46bd      	mov	sp, r7
9000177e:	bd80      	pop	{r7, pc}

90001780 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001780:	b580      	push	{r7, lr}
90001782:	b088      	sub	sp, #32
90001784:	af02      	add	r7, sp, #8
90001786:	60ba      	str	r2, [r7, #8]
90001788:	461a      	mov	r2, r3
9000178a:	4603      	mov	r3, r0
9000178c:	81fb      	strh	r3, [r7, #14]
9000178e:	460b      	mov	r3, r1
90001790:	81bb      	strh	r3, [r7, #12]
90001792:	4613      	mov	r3, r2
90001794:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001796:	89b9      	ldrh	r1, [r7, #12]
90001798:	89f8      	ldrh	r0, [r7, #14]
9000179a:	88fb      	ldrh	r3, [r7, #6]
9000179c:	9300      	str	r3, [sp, #0]
9000179e:	68bb      	ldr	r3, [r7, #8]
900017a0:	2201      	movs	r2, #1
900017a2:	f000 fafd 	bl	90001da0 <I2C4_ReadReg>
900017a6:	4603      	mov	r3, r0
900017a8:	2b00      	cmp	r3, #0
900017aa:	d102      	bne.n	900017b2 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
900017ac:	2300      	movs	r3, #0
900017ae:	617b      	str	r3, [r7, #20]
900017b0:	e00c      	b.n	900017cc <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900017b2:	4809      	ldr	r0, [pc, #36]	@ (900017d8 <BSP_I2C4_ReadReg+0x58>)
900017b4:	f004 fa82 	bl	90005cbc <HAL_I2C_GetError>
900017b8:	4603      	mov	r3, r0
900017ba:	2b04      	cmp	r3, #4
900017bc:	d103      	bne.n	900017c6 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900017be:	f06f 0365 	mvn.w	r3, #101	@ 0x65
900017c2:	617b      	str	r3, [r7, #20]
900017c4:	e002      	b.n	900017cc <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
900017c6:	f06f 0303 	mvn.w	r3, #3
900017ca:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
900017cc:	697b      	ldr	r3, [r7, #20]
}
900017ce:	4618      	mov	r0, r3
900017d0:	3718      	adds	r7, #24
900017d2:	46bd      	mov	sp, r7
900017d4:	bd80      	pop	{r7, pc}
900017d6:	bf00      	nop
900017d8:	2000104c 	.word	0x2000104c

900017dc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
900017dc:	b580      	push	{r7, lr}
900017de:	b086      	sub	sp, #24
900017e0:	af00      	add	r7, sp, #0
900017e2:	6078      	str	r0, [r7, #4]
900017e4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
900017e6:	2300      	movs	r3, #0
900017e8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
900017ea:	687b      	ldr	r3, [r7, #4]
900017ec:	2b00      	cmp	r3, #0
900017ee:	d06b      	beq.n	900018c8 <I2C_GetTiming+0xec>
900017f0:	683b      	ldr	r3, [r7, #0]
900017f2:	2b00      	cmp	r3, #0
900017f4:	d068      	beq.n	900018c8 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
900017f6:	2300      	movs	r3, #0
900017f8:	613b      	str	r3, [r7, #16]
900017fa:	e060      	b.n	900018be <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
900017fc:	4a35      	ldr	r2, [pc, #212]	@ (900018d4 <I2C_GetTiming+0xf8>)
900017fe:	693b      	ldr	r3, [r7, #16]
90001800:	212c      	movs	r1, #44	@ 0x2c
90001802:	fb01 f303 	mul.w	r3, r1, r3
90001806:	4413      	add	r3, r2
90001808:	3304      	adds	r3, #4
9000180a:	681b      	ldr	r3, [r3, #0]
9000180c:	683a      	ldr	r2, [r7, #0]
9000180e:	429a      	cmp	r2, r3
90001810:	d352      	bcc.n	900018b8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001812:	4a30      	ldr	r2, [pc, #192]	@ (900018d4 <I2C_GetTiming+0xf8>)
90001814:	693b      	ldr	r3, [r7, #16]
90001816:	212c      	movs	r1, #44	@ 0x2c
90001818:	fb01 f303 	mul.w	r3, r1, r3
9000181c:	4413      	add	r3, r2
9000181e:	3308      	adds	r3, #8
90001820:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001822:	683a      	ldr	r2, [r7, #0]
90001824:	429a      	cmp	r2, r3
90001826:	d847      	bhi.n	900018b8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001828:	6939      	ldr	r1, [r7, #16]
9000182a:	6878      	ldr	r0, [r7, #4]
9000182c:	f000 f856 	bl	900018dc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001830:	6939      	ldr	r1, [r7, #16]
90001832:	6878      	ldr	r0, [r7, #4]
90001834:	f000 f940 	bl	90001ab8 <I2C_Compute_SCLL_SCLH>
90001838:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
9000183a:	68fb      	ldr	r3, [r7, #12]
9000183c:	2b7f      	cmp	r3, #127	@ 0x7f
9000183e:	d842      	bhi.n	900018c6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001840:	4925      	ldr	r1, [pc, #148]	@ (900018d8 <I2C_GetTiming+0xfc>)
90001842:	68fa      	ldr	r2, [r7, #12]
90001844:	4613      	mov	r3, r2
90001846:	009b      	lsls	r3, r3, #2
90001848:	4413      	add	r3, r2
9000184a:	009b      	lsls	r3, r3, #2
9000184c:	440b      	add	r3, r1
9000184e:	681b      	ldr	r3, [r3, #0]
90001850:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001852:	4821      	ldr	r0, [pc, #132]	@ (900018d8 <I2C_GetTiming+0xfc>)
90001854:	68fa      	ldr	r2, [r7, #12]
90001856:	4613      	mov	r3, r2
90001858:	009b      	lsls	r3, r3, #2
9000185a:	4413      	add	r3, r2
9000185c:	009b      	lsls	r3, r3, #2
9000185e:	4403      	add	r3, r0
90001860:	3304      	adds	r3, #4
90001862:	681b      	ldr	r3, [r3, #0]
90001864:	051b      	lsls	r3, r3, #20
90001866:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000186a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
9000186c:	481a      	ldr	r0, [pc, #104]	@ (900018d8 <I2C_GetTiming+0xfc>)
9000186e:	68fa      	ldr	r2, [r7, #12]
90001870:	4613      	mov	r3, r2
90001872:	009b      	lsls	r3, r3, #2
90001874:	4413      	add	r3, r2
90001876:	009b      	lsls	r3, r3, #2
90001878:	4403      	add	r3, r0
9000187a:	3308      	adds	r3, #8
9000187c:	681b      	ldr	r3, [r3, #0]
9000187e:	041b      	lsls	r3, r3, #16
90001880:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001884:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001886:	4814      	ldr	r0, [pc, #80]	@ (900018d8 <I2C_GetTiming+0xfc>)
90001888:	68fa      	ldr	r2, [r7, #12]
9000188a:	4613      	mov	r3, r2
9000188c:	009b      	lsls	r3, r3, #2
9000188e:	4413      	add	r3, r2
90001890:	009b      	lsls	r3, r3, #2
90001892:	4403      	add	r3, r0
90001894:	330c      	adds	r3, #12
90001896:	681b      	ldr	r3, [r3, #0]
90001898:	021b      	lsls	r3, r3, #8
9000189a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
9000189c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
9000189e:	480e      	ldr	r0, [pc, #56]	@ (900018d8 <I2C_GetTiming+0xfc>)
900018a0:	68fa      	ldr	r2, [r7, #12]
900018a2:	4613      	mov	r3, r2
900018a4:	009b      	lsls	r3, r3, #2
900018a6:	4413      	add	r3, r2
900018a8:	009b      	lsls	r3, r3, #2
900018aa:	4403      	add	r3, r0
900018ac:	3310      	adds	r3, #16
900018ae:	681b      	ldr	r3, [r3, #0]
900018b0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900018b2:	430b      	orrs	r3, r1
900018b4:	617b      	str	r3, [r7, #20]
        }
        break;
900018b6:	e006      	b.n	900018c6 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
900018b8:	693b      	ldr	r3, [r7, #16]
900018ba:	3301      	adds	r3, #1
900018bc:	613b      	str	r3, [r7, #16]
900018be:	693b      	ldr	r3, [r7, #16]
900018c0:	2b02      	cmp	r3, #2
900018c2:	d99b      	bls.n	900017fc <I2C_GetTiming+0x20>
900018c4:	e000      	b.n	900018c8 <I2C_GetTiming+0xec>
        break;
900018c6:	bf00      	nop
      }
    }
  }

  return ret;
900018c8:	697b      	ldr	r3, [r7, #20]
}
900018ca:	4618      	mov	r0, r3
900018cc:	3718      	adds	r7, #24
900018ce:	46bd      	mov	sp, r7
900018d0:	bd80      	pop	{r7, pc}
900018d2:	bf00      	nop
900018d4:	9000ccfc 	.word	0x9000ccfc
900018d8:	20000648 	.word	0x20000648

900018dc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
900018dc:	b480      	push	{r7}
900018de:	b08f      	sub	sp, #60	@ 0x3c
900018e0:	af00      	add	r7, sp, #0
900018e2:	6078      	str	r0, [r7, #4]
900018e4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
900018e6:	2310      	movs	r3, #16
900018e8:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900018ea:	687b      	ldr	r3, [r7, #4]
900018ec:	085a      	lsrs	r2, r3, #1
900018ee:	4b6e      	ldr	r3, [pc, #440]	@ (90001aa8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
900018f0:	4413      	add	r3, r2
900018f2:	687a      	ldr	r2, [r7, #4]
900018f4:	fbb3 f3f2 	udiv	r3, r3, r2
900018f8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
900018fa:	2332      	movs	r3, #50	@ 0x32
900018fc:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
900018fe:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001902:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001904:	4a69      	ldr	r2, [pc, #420]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001906:	683b      	ldr	r3, [r7, #0]
90001908:	212c      	movs	r1, #44	@ 0x2c
9000190a:	fb01 f303 	mul.w	r3, r1, r3
9000190e:	4413      	add	r3, r2
90001910:	3324      	adds	r3, #36	@ 0x24
90001912:	681b      	ldr	r3, [r3, #0]
90001914:	4618      	mov	r0, r3
90001916:	4a65      	ldr	r2, [pc, #404]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001918:	683b      	ldr	r3, [r7, #0]
9000191a:	212c      	movs	r1, #44	@ 0x2c
9000191c:	fb01 f303 	mul.w	r3, r1, r3
90001920:	4413      	add	r3, r2
90001922:	330c      	adds	r3, #12
90001924:	681b      	ldr	r3, [r3, #0]
90001926:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001928:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
9000192a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
9000192c:	495f      	ldr	r1, [pc, #380]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000192e:	683b      	ldr	r3, [r7, #0]
90001930:	202c      	movs	r0, #44	@ 0x2c
90001932:	fb00 f303 	mul.w	r3, r0, r3
90001936:	440b      	add	r3, r1
90001938:	3328      	adds	r3, #40	@ 0x28
9000193a:	681b      	ldr	r3, [r3, #0]
9000193c:	3303      	adds	r3, #3
9000193e:	69f9      	ldr	r1, [r7, #28]
90001940:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001944:	1ad3      	subs	r3, r2, r3
90001946:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001948:	4a58      	ldr	r2, [pc, #352]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000194a:	683b      	ldr	r3, [r7, #0]
9000194c:	212c      	movs	r1, #44	@ 0x2c
9000194e:	fb01 f303 	mul.w	r3, r1, r3
90001952:	4413      	add	r3, r2
90001954:	3310      	adds	r3, #16
90001956:	681b      	ldr	r3, [r3, #0]
90001958:	4618      	mov	r0, r3
9000195a:	4a54      	ldr	r2, [pc, #336]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000195c:	683b      	ldr	r3, [r7, #0]
9000195e:	212c      	movs	r1, #44	@ 0x2c
90001960:	fb01 f303 	mul.w	r3, r1, r3
90001964:	4413      	add	r3, r2
90001966:	3320      	adds	r3, #32
90001968:	681b      	ldr	r3, [r3, #0]
9000196a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
9000196c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
9000196e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001970:	494e      	ldr	r1, [pc, #312]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001972:	683b      	ldr	r3, [r7, #0]
90001974:	202c      	movs	r0, #44	@ 0x2c
90001976:	fb00 f303 	mul.w	r3, r0, r3
9000197a:	440b      	add	r3, r1
9000197c:	3328      	adds	r3, #40	@ 0x28
9000197e:	681b      	ldr	r3, [r3, #0]
90001980:	3304      	adds	r3, #4
90001982:	69f9      	ldr	r1, [r7, #28]
90001984:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001988:	1ad3      	subs	r3, r2, r3
9000198a:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
9000198c:	4a47      	ldr	r2, [pc, #284]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000198e:	683b      	ldr	r3, [r7, #0]
90001990:	212c      	movs	r1, #44	@ 0x2c
90001992:	fb01 f303 	mul.w	r3, r1, r3
90001996:	4413      	add	r3, r2
90001998:	3320      	adds	r3, #32
9000199a:	681b      	ldr	r3, [r3, #0]
9000199c:	4618      	mov	r0, r3
9000199e:	4a43      	ldr	r2, [pc, #268]	@ (90001aac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900019a0:	683b      	ldr	r3, [r7, #0]
900019a2:	212c      	movs	r1, #44	@ 0x2c
900019a4:	fb01 f303 	mul.w	r3, r1, r3
900019a8:	4413      	add	r3, r2
900019aa:	3314      	adds	r3, #20
900019ac:	681b      	ldr	r3, [r3, #0]
900019ae:	4403      	add	r3, r0
900019b0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
900019b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900019b4:	2b00      	cmp	r3, #0
900019b6:	dc01      	bgt.n	900019bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
900019b8:	2300      	movs	r3, #0
900019ba:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
900019bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900019be:	2b00      	cmp	r3, #0
900019c0:	dc01      	bgt.n	900019c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
900019c2:	2300      	movs	r3, #0
900019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
900019c6:	2300      	movs	r3, #0
900019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
900019ca:	e062      	b.n	90001a92 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900019cc:	2300      	movs	r3, #0
900019ce:	627b      	str	r3, [r7, #36]	@ 0x24
900019d0:	e059      	b.n	90001a86 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
900019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900019d4:	3301      	adds	r3, #1
900019d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900019d8:	3201      	adds	r2, #1
900019da:	fb03 f202 	mul.w	r2, r3, r2
900019de:	69fb      	ldr	r3, [r7, #28]
900019e0:	fb02 f303 	mul.w	r3, r2, r3
900019e4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
900019e6:	693b      	ldr	r3, [r7, #16]
900019e8:	68fa      	ldr	r2, [r7, #12]
900019ea:	429a      	cmp	r2, r3
900019ec:	d348      	bcc.n	90001a80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900019ee:	2300      	movs	r3, #0
900019f0:	623b      	str	r3, [r7, #32]
900019f2:	e042      	b.n	90001a7a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
900019f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900019f6:	3301      	adds	r3, #1
900019f8:	6a3a      	ldr	r2, [r7, #32]
900019fa:	fb03 f202 	mul.w	r2, r3, r2
900019fe:	69fb      	ldr	r3, [r7, #28]
90001a00:	fb02 f303 	mul.w	r3, r2, r3
90001a04:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001a08:	68ba      	ldr	r2, [r7, #8]
90001a0a:	429a      	cmp	r2, r3
90001a0c:	d332      	bcc.n	90001a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001a10:	68ba      	ldr	r2, [r7, #8]
90001a12:	429a      	cmp	r2, r3
90001a14:	d82e      	bhi.n	90001a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001a1a:	429a      	cmp	r2, r3
90001a1c:	d02a      	beq.n	90001a74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001a1e:	4b24      	ldr	r3, [pc, #144]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a20:	681a      	ldr	r2, [r3, #0]
90001a22:	4924      	ldr	r1, [pc, #144]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001a24:	4613      	mov	r3, r2
90001a26:	009b      	lsls	r3, r3, #2
90001a28:	4413      	add	r3, r2
90001a2a:	009b      	lsls	r3, r3, #2
90001a2c:	440b      	add	r3, r1
90001a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001a30:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001a32:	4b1f      	ldr	r3, [pc, #124]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a34:	681a      	ldr	r2, [r3, #0]
90001a36:	491f      	ldr	r1, [pc, #124]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001a38:	4613      	mov	r3, r2
90001a3a:	009b      	lsls	r3, r3, #2
90001a3c:	4413      	add	r3, r2
90001a3e:	009b      	lsls	r3, r3, #2
90001a40:	440b      	add	r3, r1
90001a42:	3304      	adds	r3, #4
90001a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001a46:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001a48:	4b19      	ldr	r3, [pc, #100]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a4a:	681a      	ldr	r2, [r3, #0]
90001a4c:	4919      	ldr	r1, [pc, #100]	@ (90001ab4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001a4e:	4613      	mov	r3, r2
90001a50:	009b      	lsls	r3, r3, #2
90001a52:	4413      	add	r3, r2
90001a54:	009b      	lsls	r3, r3, #2
90001a56:	440b      	add	r3, r1
90001a58:	3308      	adds	r3, #8
90001a5a:	6a3a      	ldr	r2, [r7, #32]
90001a5c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001a60:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001a62:	4b13      	ldr	r3, [pc, #76]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a64:	681b      	ldr	r3, [r3, #0]
90001a66:	3301      	adds	r3, #1
90001a68:	4a11      	ldr	r2, [pc, #68]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a6a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001a6c:	4b10      	ldr	r3, [pc, #64]	@ (90001ab0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001a6e:	681b      	ldr	r3, [r3, #0]
90001a70:	2b7f      	cmp	r3, #127	@ 0x7f
90001a72:	d812      	bhi.n	90001a9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001a74:	6a3b      	ldr	r3, [r7, #32]
90001a76:	3301      	adds	r3, #1
90001a78:	623b      	str	r3, [r7, #32]
90001a7a:	6a3b      	ldr	r3, [r7, #32]
90001a7c:	2b0f      	cmp	r3, #15
90001a7e:	d9b9      	bls.n	900019f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001a82:	3301      	adds	r3, #1
90001a84:	627b      	str	r3, [r7, #36]	@ 0x24
90001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001a88:	2b0f      	cmp	r3, #15
90001a8a:	d9a2      	bls.n	900019d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001a8e:	3301      	adds	r3, #1
90001a90:	62bb      	str	r3, [r7, #40]	@ 0x28
90001a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001a94:	2b0f      	cmp	r3, #15
90001a96:	d999      	bls.n	900019cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001a98:	e000      	b.n	90001a9c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001a9a:	bf00      	nop
          }
        }
      }
    }
  }
}
90001a9c:	373c      	adds	r7, #60	@ 0x3c
90001a9e:	46bd      	mov	sp, r7
90001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
90001aa4:	4770      	bx	lr
90001aa6:	bf00      	nop
90001aa8:	3b9aca00 	.word	0x3b9aca00
90001aac:	9000ccfc 	.word	0x9000ccfc
90001ab0:	20001048 	.word	0x20001048
90001ab4:	20000648 	.word	0x20000648

90001ab8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001ab8:	b480      	push	{r7}
90001aba:	b093      	sub	sp, #76	@ 0x4c
90001abc:	af00      	add	r7, sp, #0
90001abe:	6078      	str	r0, [r7, #4]
90001ac0:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001ac2:	f04f 33ff 	mov.w	r3, #4294967295
90001ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001ac8:	687b      	ldr	r3, [r7, #4]
90001aca:	085a      	lsrs	r2, r3, #1
90001acc:	4b7a      	ldr	r3, [pc, #488]	@ (90001cb8 <I2C_Compute_SCLL_SCLH+0x200>)
90001ace:	4413      	add	r3, r2
90001ad0:	687a      	ldr	r2, [r7, #4]
90001ad2:	fbb3 f3f2 	udiv	r3, r3, r2
90001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001ad8:	4a78      	ldr	r2, [pc, #480]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001ada:	683b      	ldr	r3, [r7, #0]
90001adc:	212c      	movs	r1, #44	@ 0x2c
90001ade:	fb01 f303 	mul.w	r3, r1, r3
90001ae2:	4413      	add	r3, r2
90001ae4:	681b      	ldr	r3, [r3, #0]
90001ae6:	085a      	lsrs	r2, r3, #1
90001ae8:	4b73      	ldr	r3, [pc, #460]	@ (90001cb8 <I2C_Compute_SCLL_SCLH+0x200>)
90001aea:	4413      	add	r3, r2
90001aec:	4973      	ldr	r1, [pc, #460]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001aee:	683a      	ldr	r2, [r7, #0]
90001af0:	202c      	movs	r0, #44	@ 0x2c
90001af2:	fb00 f202 	mul.w	r2, r0, r2
90001af6:	440a      	add	r2, r1
90001af8:	6812      	ldr	r2, [r2, #0]
90001afa:	fbb3 f3f2 	udiv	r3, r3, r2
90001afe:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001b00:	2332      	movs	r3, #50	@ 0x32
90001b02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001b04:	4a6d      	ldr	r2, [pc, #436]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001b06:	683b      	ldr	r3, [r7, #0]
90001b08:	212c      	movs	r1, #44	@ 0x2c
90001b0a:	fb01 f303 	mul.w	r3, r1, r3
90001b0e:	4413      	add	r3, r2
90001b10:	3328      	adds	r3, #40	@ 0x28
90001b12:	681a      	ldr	r2, [r3, #0]
90001b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b16:	fb02 f303 	mul.w	r3, r2, r3
90001b1a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001b1c:	4a67      	ldr	r2, [pc, #412]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001b1e:	683b      	ldr	r3, [r7, #0]
90001b20:	212c      	movs	r1, #44	@ 0x2c
90001b22:	fb01 f303 	mul.w	r3, r1, r3
90001b26:	4413      	add	r3, r2
90001b28:	3304      	adds	r3, #4
90001b2a:	681b      	ldr	r3, [r3, #0]
90001b2c:	4a62      	ldr	r2, [pc, #392]	@ (90001cb8 <I2C_Compute_SCLL_SCLH+0x200>)
90001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
90001b32:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001b34:	4a61      	ldr	r2, [pc, #388]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001b36:	683b      	ldr	r3, [r7, #0]
90001b38:	212c      	movs	r1, #44	@ 0x2c
90001b3a:	fb01 f303 	mul.w	r3, r1, r3
90001b3e:	4413      	add	r3, r2
90001b40:	3308      	adds	r3, #8
90001b42:	681b      	ldr	r3, [r3, #0]
90001b44:	4a5c      	ldr	r2, [pc, #368]	@ (90001cb8 <I2C_Compute_SCLL_SCLH+0x200>)
90001b46:	fbb2 f3f3 	udiv	r3, r2, r3
90001b4a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001b4e:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001b50:	2300      	movs	r3, #0
90001b52:	637b      	str	r3, [r7, #52]	@ 0x34
90001b54:	e0a3      	b.n	90001c9e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001b56:	495a      	ldr	r1, [pc, #360]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x208>)
90001b58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001b5a:	4613      	mov	r3, r2
90001b5c:	009b      	lsls	r3, r3, #2
90001b5e:	4413      	add	r3, r2
90001b60:	009b      	lsls	r3, r3, #2
90001b62:	440b      	add	r3, r1
90001b64:	681b      	ldr	r3, [r3, #0]
90001b66:	1c5a      	adds	r2, r3, #1
90001b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b6a:	fb02 f303 	mul.w	r3, r2, r3
90001b6e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001b70:	2300      	movs	r3, #0
90001b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001b74:	e08c      	b.n	90001c90 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001b78:	6a3b      	ldr	r3, [r7, #32]
90001b7a:	441a      	add	r2, r3
90001b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001b7e:	3301      	adds	r3, #1
90001b80:	6979      	ldr	r1, [r7, #20]
90001b82:	fb03 f101 	mul.w	r1, r3, r1
90001b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b88:	005b      	lsls	r3, r3, #1
90001b8a:	440b      	add	r3, r1
90001b8c:	4413      	add	r3, r2
90001b8e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001b90:	4a4a      	ldr	r2, [pc, #296]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001b92:	683b      	ldr	r3, [r7, #0]
90001b94:	212c      	movs	r1, #44	@ 0x2c
90001b96:	fb01 f303 	mul.w	r3, r1, r3
90001b9a:	4413      	add	r3, r2
90001b9c:	3318      	adds	r3, #24
90001b9e:	681b      	ldr	r3, [r3, #0]
90001ba0:	693a      	ldr	r2, [r7, #16]
90001ba2:	429a      	cmp	r2, r3
90001ba4:	d971      	bls.n	90001c8a <I2C_Compute_SCLL_SCLH+0x1d2>
90001ba6:	693a      	ldr	r2, [r7, #16]
90001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001baa:	1ad2      	subs	r2, r2, r3
90001bac:	6a3b      	ldr	r3, [r7, #32]
90001bae:	1ad3      	subs	r3, r2, r3
90001bb0:	089b      	lsrs	r3, r3, #2
90001bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001bb4:	429a      	cmp	r2, r3
90001bb6:	d268      	bcs.n	90001c8a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001bb8:	2300      	movs	r3, #0
90001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
90001bbc:	e062      	b.n	90001c84 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001bc0:	6a3b      	ldr	r3, [r7, #32]
90001bc2:	441a      	add	r2, r3
90001bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001bc6:	3301      	adds	r3, #1
90001bc8:	6979      	ldr	r1, [r7, #20]
90001bca:	fb03 f101 	mul.w	r1, r3, r1
90001bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001bd0:	005b      	lsls	r3, r3, #1
90001bd2:	440b      	add	r3, r1
90001bd4:	4413      	add	r3, r2
90001bd6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001bd8:	693a      	ldr	r2, [r7, #16]
90001bda:	68fb      	ldr	r3, [r7, #12]
90001bdc:	441a      	add	r2, r3
90001bde:	4937      	ldr	r1, [pc, #220]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001be0:	683b      	ldr	r3, [r7, #0]
90001be2:	202c      	movs	r0, #44	@ 0x2c
90001be4:	fb00 f303 	mul.w	r3, r0, r3
90001be8:	440b      	add	r3, r1
90001bea:	3320      	adds	r3, #32
90001bec:	681b      	ldr	r3, [r3, #0]
90001bee:	441a      	add	r2, r3
90001bf0:	4932      	ldr	r1, [pc, #200]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001bf2:	683b      	ldr	r3, [r7, #0]
90001bf4:	202c      	movs	r0, #44	@ 0x2c
90001bf6:	fb00 f303 	mul.w	r3, r0, r3
90001bfa:	440b      	add	r3, r1
90001bfc:	3324      	adds	r3, #36	@ 0x24
90001bfe:	681b      	ldr	r3, [r3, #0]
90001c00:	4413      	add	r3, r2
90001c02:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001c04:	68ba      	ldr	r2, [r7, #8]
90001c06:	69bb      	ldr	r3, [r7, #24]
90001c08:	429a      	cmp	r2, r3
90001c0a:	d338      	bcc.n	90001c7e <I2C_Compute_SCLL_SCLH+0x1c6>
90001c0c:	68ba      	ldr	r2, [r7, #8]
90001c0e:	69fb      	ldr	r3, [r7, #28]
90001c10:	429a      	cmp	r2, r3
90001c12:	d834      	bhi.n	90001c7e <I2C_Compute_SCLL_SCLH+0x1c6>
90001c14:	4a29      	ldr	r2, [pc, #164]	@ (90001cbc <I2C_Compute_SCLL_SCLH+0x204>)
90001c16:	683b      	ldr	r3, [r7, #0]
90001c18:	212c      	movs	r1, #44	@ 0x2c
90001c1a:	fb01 f303 	mul.w	r3, r1, r3
90001c1e:	4413      	add	r3, r2
90001c20:	331c      	adds	r3, #28
90001c22:	681b      	ldr	r3, [r3, #0]
90001c24:	68fa      	ldr	r2, [r7, #12]
90001c26:	429a      	cmp	r2, r3
90001c28:	d329      	bcc.n	90001c7e <I2C_Compute_SCLL_SCLH+0x1c6>
90001c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001c2c:	68fb      	ldr	r3, [r7, #12]
90001c2e:	429a      	cmp	r2, r3
90001c30:	d225      	bcs.n	90001c7e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001c32:	68ba      	ldr	r2, [r7, #8]
90001c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c36:	1ad3      	subs	r3, r2, r3
90001c38:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c3c:	2b00      	cmp	r3, #0
90001c3e:	da02      	bge.n	90001c46 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c42:	425b      	negs	r3, r3
90001c44:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001c4a:	429a      	cmp	r2, r3
90001c4c:	d917      	bls.n	90001c7e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c50:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001c52:	491b      	ldr	r1, [pc, #108]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x208>)
90001c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001c56:	4613      	mov	r3, r2
90001c58:	009b      	lsls	r3, r3, #2
90001c5a:	4413      	add	r3, r2
90001c5c:	009b      	lsls	r3, r3, #2
90001c5e:	440b      	add	r3, r1
90001c60:	3310      	adds	r3, #16
90001c62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001c64:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001c66:	4916      	ldr	r1, [pc, #88]	@ (90001cc0 <I2C_Compute_SCLL_SCLH+0x208>)
90001c68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001c6a:	4613      	mov	r3, r2
90001c6c:	009b      	lsls	r3, r3, #2
90001c6e:	4413      	add	r3, r2
90001c70:	009b      	lsls	r3, r3, #2
90001c72:	440b      	add	r3, r1
90001c74:	330c      	adds	r3, #12
90001c76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001c78:	601a      	str	r2, [r3, #0]
              ret = count;
90001c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001c7c:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001c80:	3301      	adds	r3, #1
90001c82:	63bb      	str	r3, [r7, #56]	@ 0x38
90001c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001c86:	2bff      	cmp	r3, #255	@ 0xff
90001c88:	d999      	bls.n	90001bbe <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001c8c:	3301      	adds	r3, #1
90001c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001c92:	2bff      	cmp	r3, #255	@ 0xff
90001c94:	f67f af6f 	bls.w	90001b76 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001c9a:	3301      	adds	r3, #1
90001c9c:	637b      	str	r3, [r7, #52]	@ 0x34
90001c9e:	4b09      	ldr	r3, [pc, #36]	@ (90001cc4 <I2C_Compute_SCLL_SCLH+0x20c>)
90001ca0:	681b      	ldr	r3, [r3, #0]
90001ca2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001ca4:	429a      	cmp	r2, r3
90001ca6:	f4ff af56 	bcc.w	90001b56 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001cac:	4618      	mov	r0, r3
90001cae:	374c      	adds	r7, #76	@ 0x4c
90001cb0:	46bd      	mov	sp, r7
90001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
90001cb6:	4770      	bx	lr
90001cb8:	3b9aca00 	.word	0x3b9aca00
90001cbc:	9000ccfc 	.word	0x9000ccfc
90001cc0:	20000648 	.word	0x20000648
90001cc4:	20001048 	.word	0x20001048

90001cc8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001cc8:	b580      	push	{r7, lr}
90001cca:	b08a      	sub	sp, #40	@ 0x28
90001ccc:	af00      	add	r7, sp, #0
90001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001cd0:	4b31      	ldr	r3, [pc, #196]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001cd6:	4a30      	ldr	r2, [pc, #192]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001cd8:	f043 0308 	orr.w	r3, r3, #8
90001cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001ce6:	f003 0308 	and.w	r3, r3, #8
90001cea:	613b      	str	r3, [r7, #16]
90001cec:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001cee:	4b2a      	ldr	r3, [pc, #168]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001cf4:	4a28      	ldr	r2, [pc, #160]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001cf6:	f043 0308 	orr.w	r3, r3, #8
90001cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001cfe:	4b26      	ldr	r3, [pc, #152]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001d04:	f003 0308 	and.w	r3, r3, #8
90001d08:	60fb      	str	r3, [r7, #12]
90001d0a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001d10:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001d12:	2312      	movs	r3, #18
90001d14:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001d16:	2300      	movs	r3, #0
90001d18:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001d1a:	2302      	movs	r3, #2
90001d1c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001d1e:	2304      	movs	r3, #4
90001d20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001d22:	f107 0314 	add.w	r3, r7, #20
90001d26:	4619      	mov	r1, r3
90001d28:	481c      	ldr	r0, [pc, #112]	@ (90001d9c <I2C4_MspInit+0xd4>)
90001d2a:	f001 fe71 	bl	90003a10 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001d2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001d32:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001d34:	2312      	movs	r3, #18
90001d36:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001d38:	2300      	movs	r3, #0
90001d3a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001d3c:	2302      	movs	r3, #2
90001d3e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001d40:	2304      	movs	r3, #4
90001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001d44:	f107 0314 	add.w	r3, r7, #20
90001d48:	4619      	mov	r1, r3
90001d4a:	4814      	ldr	r0, [pc, #80]	@ (90001d9c <I2C4_MspInit+0xd4>)
90001d4c:	f001 fe60 	bl	90003a10 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001d50:	4b11      	ldr	r3, [pc, #68]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001d56:	4a10      	ldr	r2, [pc, #64]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001d5c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001d60:	4b0d      	ldr	r3, [pc, #52]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001d6a:	60bb      	str	r3, [r7, #8]
90001d6c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001d74:	4a08      	ldr	r2, [pc, #32]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001d7a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001d7e:	4b06      	ldr	r3, [pc, #24]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001d84:	4a04      	ldr	r2, [pc, #16]	@ (90001d98 <I2C4_MspInit+0xd0>)
90001d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001d8a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001d8e:	bf00      	nop
90001d90:	3728      	adds	r7, #40	@ 0x28
90001d92:	46bd      	mov	sp, r7
90001d94:	bd80      	pop	{r7, pc}
90001d96:	bf00      	nop
90001d98:	58024400 	.word	0x58024400
90001d9c:	58020c00 	.word	0x58020c00

90001da0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001da0:	b580      	push	{r7, lr}
90001da2:	b088      	sub	sp, #32
90001da4:	af04      	add	r7, sp, #16
90001da6:	607b      	str	r3, [r7, #4]
90001da8:	4603      	mov	r3, r0
90001daa:	81fb      	strh	r3, [r7, #14]
90001dac:	460b      	mov	r3, r1
90001dae:	81bb      	strh	r3, [r7, #12]
90001db0:	4613      	mov	r3, r2
90001db2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001db4:	8978      	ldrh	r0, [r7, #10]
90001db6:	89ba      	ldrh	r2, [r7, #12]
90001db8:	89f9      	ldrh	r1, [r7, #14]
90001dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001dbe:	9302      	str	r3, [sp, #8]
90001dc0:	8b3b      	ldrh	r3, [r7, #24]
90001dc2:	9301      	str	r3, [sp, #4]
90001dc4:	687b      	ldr	r3, [r7, #4]
90001dc6:	9300      	str	r3, [sp, #0]
90001dc8:	4603      	mov	r3, r0
90001dca:	4807      	ldr	r0, [pc, #28]	@ (90001de8 <I2C4_ReadReg+0x48>)
90001dcc:	f003 fe4e 	bl	90005a6c <HAL_I2C_Mem_Read>
90001dd0:	4603      	mov	r3, r0
90001dd2:	2b00      	cmp	r3, #0
90001dd4:	d101      	bne.n	90001dda <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001dd6:	2300      	movs	r3, #0
90001dd8:	e001      	b.n	90001dde <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001dda:	f06f 0307 	mvn.w	r3, #7
}
90001dde:	4618      	mov	r0, r3
90001de0:	3710      	adds	r7, #16
90001de2:	46bd      	mov	sp, r7
90001de4:	bd80      	pop	{r7, pc}
90001de6:	bf00      	nop
90001de8:	2000104c 	.word	0x2000104c

90001dec <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001dec:	b580      	push	{r7, lr}
90001dee:	b084      	sub	sp, #16
90001df0:	af02      	add	r7, sp, #8
90001df2:	6078      	str	r0, [r7, #4]
90001df4:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001df6:	f44f 7388 	mov.w	r3, #272	@ 0x110
90001dfa:	9300      	str	r3, [sp, #0]
90001dfc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90001e00:	2200      	movs	r2, #0
90001e02:	6839      	ldr	r1, [r7, #0]
90001e04:	6878      	ldr	r0, [r7, #4]
90001e06:	f000 f805 	bl	90001e14 <BSP_LCD_InitEx>
90001e0a:	4603      	mov	r3, r0
}
90001e0c:	4618      	mov	r0, r3
90001e0e:	3708      	adds	r7, #8
90001e10:	46bd      	mov	sp, r7
90001e12:	bd80      	pop	{r7, pc}

90001e14 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001e14:	b580      	push	{r7, lr}
90001e16:	b09e      	sub	sp, #120	@ 0x78
90001e18:	af00      	add	r7, sp, #0
90001e1a:	60f8      	str	r0, [r7, #12]
90001e1c:	60b9      	str	r1, [r7, #8]
90001e1e:	607a      	str	r2, [r7, #4]
90001e20:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001e22:	2300      	movs	r3, #0
90001e24:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001e26:	2300      	movs	r3, #0
90001e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001e2a:	68bb      	ldr	r3, [r7, #8]
90001e2c:	2b01      	cmp	r3, #1
90001e2e:	d808      	bhi.n	90001e42 <BSP_LCD_InitEx+0x2e>
90001e30:	68fb      	ldr	r3, [r7, #12]
90001e32:	2b00      	cmp	r3, #0
90001e34:	d105      	bne.n	90001e42 <BSP_LCD_InitEx+0x2e>
90001e36:	687b      	ldr	r3, [r7, #4]
90001e38:	2b02      	cmp	r3, #2
90001e3a:	d006      	beq.n	90001e4a <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001e3c:	687b      	ldr	r3, [r7, #4]
90001e3e:	2b00      	cmp	r3, #0
90001e40:	d003      	beq.n	90001e4a <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001e42:	f06f 0301 	mvn.w	r3, #1
90001e46:	677b      	str	r3, [r7, #116]	@ 0x74
90001e48:	e0a8      	b.n	90001f9c <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001e4a:	687b      	ldr	r3, [r7, #4]
90001e4c:	2b02      	cmp	r3, #2
90001e4e:	d109      	bne.n	90001e64 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001e50:	2302      	movs	r3, #2
90001e52:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001e54:	4a54      	ldr	r2, [pc, #336]	@ (90001fa8 <BSP_LCD_InitEx+0x194>)
90001e56:	68fb      	ldr	r3, [r7, #12]
90001e58:	015b      	lsls	r3, r3, #5
90001e5a:	4413      	add	r3, r2
90001e5c:	3310      	adds	r3, #16
90001e5e:	2202      	movs	r2, #2
90001e60:	601a      	str	r2, [r3, #0]
90001e62:	e008      	b.n	90001e76 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001e64:	2300      	movs	r3, #0
90001e66:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001e68:	4a4f      	ldr	r2, [pc, #316]	@ (90001fa8 <BSP_LCD_InitEx+0x194>)
90001e6a:	68fb      	ldr	r3, [r7, #12]
90001e6c:	015b      	lsls	r3, r3, #5
90001e6e:	4413      	add	r3, r2
90001e70:	3310      	adds	r3, #16
90001e72:	2204      	movs	r2, #4
90001e74:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001e76:	4a4c      	ldr	r2, [pc, #304]	@ (90001fa8 <BSP_LCD_InitEx+0x194>)
90001e78:	68fb      	ldr	r3, [r7, #12]
90001e7a:	015b      	lsls	r3, r3, #5
90001e7c:	4413      	add	r3, r2
90001e7e:	330c      	adds	r3, #12
90001e80:	687a      	ldr	r2, [r7, #4]
90001e82:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001e84:	4a48      	ldr	r2, [pc, #288]	@ (90001fa8 <BSP_LCD_InitEx+0x194>)
90001e86:	68fb      	ldr	r3, [r7, #12]
90001e88:	015b      	lsls	r3, r3, #5
90001e8a:	4413      	add	r3, r2
90001e8c:	683a      	ldr	r2, [r7, #0]
90001e8e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90001e90:	4a45      	ldr	r2, [pc, #276]	@ (90001fa8 <BSP_LCD_InitEx+0x194>)
90001e92:	68fb      	ldr	r3, [r7, #12]
90001e94:	015b      	lsls	r3, r3, #5
90001e96:	4413      	add	r3, r2
90001e98:	3304      	adds	r3, #4
90001e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001e9e:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90001ea0:	4b42      	ldr	r3, [pc, #264]	@ (90001fac <BSP_LCD_InitEx+0x198>)
90001ea2:	4a43      	ldr	r2, [pc, #268]	@ (90001fb0 <BSP_LCD_InitEx+0x19c>)
90001ea4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90001ea6:	4b43      	ldr	r3, [pc, #268]	@ (90001fb4 <BSP_LCD_InitEx+0x1a0>)
90001ea8:	4a43      	ldr	r2, [pc, #268]	@ (90001fb8 <BSP_LCD_InitEx+0x1a4>)
90001eaa:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90001eac:	483f      	ldr	r0, [pc, #252]	@ (90001fac <BSP_LCD_InitEx+0x198>)
90001eae:	f000 fcf9 	bl	900028a4 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90001eb2:	4840      	ldr	r0, [pc, #256]	@ (90001fb4 <BSP_LCD_InitEx+0x1a0>)
90001eb4:	f000 fdc2 	bl	90002a3c <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90001eb8:	4b40      	ldr	r3, [pc, #256]	@ (90001fbc <BSP_LCD_InitEx+0x1a8>)
90001eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90001ebc:	4b40      	ldr	r3, [pc, #256]	@ (90001fc0 <BSP_LCD_InitEx+0x1ac>)
90001ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90001ec0:	2370      	movs	r3, #112	@ 0x70
90001ec2:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90001ec4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90001ec8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001ecc:	4611      	mov	r1, r2
90001ece:	4618      	mov	r0, r3
90001ed0:	f7ff f9b8 	bl	90001244 <FT5336_RegisterBusIO>
90001ed4:	4603      	mov	r3, r0
90001ed6:	2b00      	cmp	r3, #0
90001ed8:	da03      	bge.n	90001ee2 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001eda:	f06f 0304 	mvn.w	r3, #4
90001ede:	677b      	str	r3, [r7, #116]	@ 0x74
90001ee0:	e02b      	b.n	90001f3a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90001ee2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90001ee6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001eea:	4611      	mov	r1, r2
90001eec:	4618      	mov	r0, r3
90001eee:	f7ff f9eb 	bl	900012c8 <FT5336_ReadID>
90001ef2:	4603      	mov	r3, r0
90001ef4:	2b00      	cmp	r3, #0
90001ef6:	da03      	bge.n	90001f00 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001ef8:	f06f 0304 	mvn.w	r3, #4
90001efc:	677b      	str	r3, [r7, #116]	@ 0x74
90001efe:	e01c      	b.n	90001f3a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90001f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90001f02:	2b51      	cmp	r3, #81	@ 0x51
90001f04:	d003      	beq.n	90001f0e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90001f06:	f06f 0306 	mvn.w	r3, #6
90001f0a:	677b      	str	r3, [r7, #116]	@ 0x74
90001f0c:	e015      	b.n	90001f3a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90001f0e:	4827      	ldr	r0, [pc, #156]	@ (90001fac <BSP_LCD_InitEx+0x198>)
90001f10:	f7ff f808 	bl	90000f24 <MX_LTDC_ClockConfig>
90001f14:	4603      	mov	r3, r0
90001f16:	2b00      	cmp	r3, #0
90001f18:	d003      	beq.n	90001f22 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001f1a:	f06f 0303 	mvn.w	r3, #3
90001f1e:	677b      	str	r3, [r7, #116]	@ 0x74
90001f20:	e00b      	b.n	90001f3a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90001f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001f26:	6839      	ldr	r1, [r7, #0]
90001f28:	4820      	ldr	r0, [pc, #128]	@ (90001fac <BSP_LCD_InitEx+0x198>)
90001f2a:	f000 f84d 	bl	90001fc8 <MX_LTDC_Init>
90001f2e:	4603      	mov	r3, r0
90001f30:	2b00      	cmp	r3, #0
90001f32:	d002      	beq.n	90001f3a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001f34:	f06f 0303 	mvn.w	r3, #3
90001f38:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90001f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
90001f3c:	2b00      	cmp	r3, #0
90001f3e:	d12d      	bne.n	90001f9c <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90001f40:	2000      	movs	r0, #0
90001f42:	f000 fe0d 	bl	90002b60 <BSP_SDRAM_Init>
90001f46:	4603      	mov	r3, r0
90001f48:	2b00      	cmp	r3, #0
90001f4a:	d002      	beq.n	90001f52 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90001f4c:	f06f 0303 	mvn.w	r3, #3
90001f50:	e025      	b.n	90001f9e <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90001f52:	2300      	movs	r3, #0
90001f54:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90001f56:	683b      	ldr	r3, [r7, #0]
90001f58:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90001f5a:	2300      	movs	r3, #0
90001f5c:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90001f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
90001f62:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90001f64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
90001f66:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90001f68:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90001f6e:	f107 0314 	add.w	r3, r7, #20
90001f72:	461a      	mov	r2, r3
90001f74:	2100      	movs	r1, #0
90001f76:	480d      	ldr	r0, [pc, #52]	@ (90001fac <BSP_LCD_InitEx+0x198>)
90001f78:	f000 f872 	bl	90002060 <MX_LTDC_ConfigLayer>
90001f7c:	4603      	mov	r3, r0
90001f7e:	2b00      	cmp	r3, #0
90001f80:	d002      	beq.n	90001f88 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90001f82:	f06f 0303 	mvn.w	r3, #3
90001f86:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90001f88:	480e      	ldr	r0, [pc, #56]	@ (90001fc4 <BSP_LCD_InitEx+0x1b0>)
90001f8a:	f000 fdbf 	bl	90002b0c <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90001f8e:	4a06      	ldr	r2, [pc, #24]	@ (90001fa8 <BSP_LCD_InitEx+0x194>)
90001f90:	68fb      	ldr	r3, [r7, #12]
90001f92:	015b      	lsls	r3, r3, #5
90001f94:	4413      	add	r3, r2
90001f96:	3318      	adds	r3, #24
90001f98:	2201      	movs	r2, #1
90001f9a:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90001f9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90001f9e:	4618      	mov	r0, r3
90001fa0:	3778      	adds	r7, #120	@ 0x78
90001fa2:	46bd      	mov	sp, r7
90001fa4:	bd80      	pop	{r7, pc}
90001fa6:	bf00      	nop
90001fa8:	200011fc 	.word	0x200011fc
90001fac:	20001154 	.word	0x20001154
90001fb0:	50001000 	.word	0x50001000
90001fb4:	200010ec 	.word	0x200010ec
90001fb8:	52001000 	.word	0x52001000
90001fbc:	90001689 	.word	0x90001689
90001fc0:	90001781 	.word	0x90001781
90001fc4:	200010a0 	.word	0x200010a0

90001fc8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90001fc8:	b580      	push	{r7, lr}
90001fca:	b084      	sub	sp, #16
90001fcc:	af00      	add	r7, sp, #0
90001fce:	60f8      	str	r0, [r7, #12]
90001fd0:	60b9      	str	r1, [r7, #8]
90001fd2:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90001fd4:	68fb      	ldr	r3, [r7, #12]
90001fd6:	4a21      	ldr	r2, [pc, #132]	@ (9000205c <MX_LTDC_Init+0x94>)
90001fd8:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001fda:	68fb      	ldr	r3, [r7, #12]
90001fdc:	2200      	movs	r2, #0
90001fde:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90001fe0:	68fb      	ldr	r3, [r7, #12]
90001fe2:	2200      	movs	r2, #0
90001fe4:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001fe6:	68fb      	ldr	r3, [r7, #12]
90001fe8:	2200      	movs	r2, #0
90001fea:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001fec:	68fb      	ldr	r3, [r7, #12]
90001fee:	2200      	movs	r2, #0
90001ff0:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90001ff2:	68fb      	ldr	r3, [r7, #12]
90001ff4:	2228      	movs	r2, #40	@ 0x28
90001ff6:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90001ff8:	68fb      	ldr	r3, [r7, #12]
90001ffa:	222a      	movs	r2, #42	@ 0x2a
90001ffc:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90001ffe:	68bb      	ldr	r3, [r7, #8]
90002000:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002004:	68fb      	ldr	r3, [r7, #12]
90002006:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90002008:	68bb      	ldr	r3, [r7, #8]
9000200a:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
9000200e:	68fb      	ldr	r3, [r7, #12]
90002010:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90002012:	68fb      	ldr	r3, [r7, #12]
90002014:	2209      	movs	r2, #9
90002016:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90002018:	68fb      	ldr	r3, [r7, #12]
9000201a:	220b      	movs	r2, #11
9000201c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
9000201e:	687b      	ldr	r3, [r7, #4]
90002020:	f103 020b 	add.w	r2, r3, #11
90002024:	68fb      	ldr	r3, [r7, #12]
90002026:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90002028:	687b      	ldr	r3, [r7, #4]
9000202a:	f103 020d 	add.w	r2, r3, #13
9000202e:	68fb      	ldr	r3, [r7, #12]
90002030:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90002032:	68fb      	ldr	r3, [r7, #12]
90002034:	22ff      	movs	r2, #255	@ 0xff
90002036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
9000203a:	68fb      	ldr	r3, [r7, #12]
9000203c:	22ff      	movs	r2, #255	@ 0xff
9000203e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90002042:	68fb      	ldr	r3, [r7, #12]
90002044:	22ff      	movs	r2, #255	@ 0xff
90002046:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
9000204a:	68f8      	ldr	r0, [r7, #12]
9000204c:	f004 f947 	bl	900062de <HAL_LTDC_Init>
90002050:	4603      	mov	r3, r0
}
90002052:	4618      	mov	r0, r3
90002054:	3710      	adds	r7, #16
90002056:	46bd      	mov	sp, r7
90002058:	bd80      	pop	{r7, pc}
9000205a:	bf00      	nop
9000205c:	50001000 	.word	0x50001000

90002060 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90002060:	b580      	push	{r7, lr}
90002062:	b092      	sub	sp, #72	@ 0x48
90002064:	af00      	add	r7, sp, #0
90002066:	60f8      	str	r0, [r7, #12]
90002068:	60b9      	str	r1, [r7, #8]
9000206a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
9000206c:	687b      	ldr	r3, [r7, #4]
9000206e:	681b      	ldr	r3, [r3, #0]
90002070:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90002072:	687b      	ldr	r3, [r7, #4]
90002074:	685b      	ldr	r3, [r3, #4]
90002076:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90002078:	687b      	ldr	r3, [r7, #4]
9000207a:	689b      	ldr	r3, [r3, #8]
9000207c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
9000207e:	687b      	ldr	r3, [r7, #4]
90002080:	68db      	ldr	r3, [r3, #12]
90002082:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90002084:	687b      	ldr	r3, [r7, #4]
90002086:	691b      	ldr	r3, [r3, #16]
90002088:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
9000208a:	23ff      	movs	r3, #255	@ 0xff
9000208c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
9000208e:	2300      	movs	r3, #0
90002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90002092:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
90002096:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90002098:	2307      	movs	r3, #7
9000209a:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
9000209c:	687b      	ldr	r3, [r7, #4]
9000209e:	695b      	ldr	r3, [r3, #20]
900020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
900020a2:	687b      	ldr	r3, [r7, #4]
900020a4:	685a      	ldr	r2, [r3, #4]
900020a6:	687b      	ldr	r3, [r7, #4]
900020a8:	681b      	ldr	r3, [r3, #0]
900020aa:	1ad3      	subs	r3, r2, r3
900020ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
900020ae:	687b      	ldr	r3, [r7, #4]
900020b0:	68da      	ldr	r2, [r3, #12]
900020b2:	687b      	ldr	r3, [r7, #4]
900020b4:	689b      	ldr	r3, [r3, #8]
900020b6:	1ad3      	subs	r3, r2, r3
900020b8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
900020ba:	2300      	movs	r3, #0
900020bc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
900020c0:	2300      	movs	r3, #0
900020c2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
900020c6:	2300      	movs	r3, #0
900020c8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
900020cc:	f107 0314 	add.w	r3, r7, #20
900020d0:	68ba      	ldr	r2, [r7, #8]
900020d2:	4619      	mov	r1, r3
900020d4:	68f8      	ldr	r0, [r7, #12]
900020d6:	f004 f9a9 	bl	9000642c <HAL_LTDC_ConfigLayer>
900020da:	4603      	mov	r3, r0
}
900020dc:	4618      	mov	r0, r3
900020de:	3748      	adds	r7, #72	@ 0x48
900020e0:	46bd      	mov	sp, r7
900020e2:	bd80      	pop	{r7, pc}

900020e4 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
900020e4:	b480      	push	{r7}
900020e6:	b085      	sub	sp, #20
900020e8:	af00      	add	r7, sp, #0
900020ea:	6078      	str	r0, [r7, #4]
900020ec:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900020ee:	2300      	movs	r3, #0
900020f0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900020f2:	687b      	ldr	r3, [r7, #4]
900020f4:	2b00      	cmp	r3, #0
900020f6:	d003      	beq.n	90002100 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900020f8:	f06f 0301 	mvn.w	r3, #1
900020fc:	60fb      	str	r3, [r7, #12]
900020fe:	e007      	b.n	90002110 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002100:	4a07      	ldr	r2, [pc, #28]	@ (90002120 <BSP_LCD_GetPixelFormat+0x3c>)
90002102:	687b      	ldr	r3, [r7, #4]
90002104:	015b      	lsls	r3, r3, #5
90002106:	4413      	add	r3, r2
90002108:	330c      	adds	r3, #12
9000210a:	681a      	ldr	r2, [r3, #0]
9000210c:	683b      	ldr	r3, [r7, #0]
9000210e:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002110:	68fb      	ldr	r3, [r7, #12]
}
90002112:	4618      	mov	r0, r3
90002114:	3714      	adds	r7, #20
90002116:	46bd      	mov	sp, r7
90002118:	f85d 7b04 	ldr.w	r7, [sp], #4
9000211c:	4770      	bx	lr
9000211e:	bf00      	nop
90002120:	200011fc 	.word	0x200011fc

90002124 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002124:	b480      	push	{r7}
90002126:	b085      	sub	sp, #20
90002128:	af00      	add	r7, sp, #0
9000212a:	6078      	str	r0, [r7, #4]
9000212c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000212e:	2300      	movs	r3, #0
90002130:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002132:	687b      	ldr	r3, [r7, #4]
90002134:	2b00      	cmp	r3, #0
90002136:	d003      	beq.n	90002140 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002138:	f06f 0301 	mvn.w	r3, #1
9000213c:	60fb      	str	r3, [r7, #12]
9000213e:	e006      	b.n	9000214e <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90002140:	4a06      	ldr	r2, [pc, #24]	@ (9000215c <BSP_LCD_SetActiveLayer+0x38>)
90002142:	687b      	ldr	r3, [r7, #4]
90002144:	015b      	lsls	r3, r3, #5
90002146:	4413      	add	r3, r2
90002148:	3308      	adds	r3, #8
9000214a:	683a      	ldr	r2, [r7, #0]
9000214c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000214e:	68fb      	ldr	r3, [r7, #12]
}
90002150:	4618      	mov	r0, r3
90002152:	3714      	adds	r7, #20
90002154:	46bd      	mov	sp, r7
90002156:	f85d 7b04 	ldr.w	r7, [sp], #4
9000215a:	4770      	bx	lr
9000215c:	200011fc 	.word	0x200011fc

90002160 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002160:	b480      	push	{r7}
90002162:	b085      	sub	sp, #20
90002164:	af00      	add	r7, sp, #0
90002166:	6078      	str	r0, [r7, #4]
90002168:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000216a:	2300      	movs	r3, #0
9000216c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000216e:	687b      	ldr	r3, [r7, #4]
90002170:	2b00      	cmp	r3, #0
90002172:	d003      	beq.n	9000217c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002174:	f06f 0301 	mvn.w	r3, #1
90002178:	60fb      	str	r3, [r7, #12]
9000217a:	e006      	b.n	9000218a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
9000217c:	4a06      	ldr	r2, [pc, #24]	@ (90002198 <BSP_LCD_GetXSize+0x38>)
9000217e:	687b      	ldr	r3, [r7, #4]
90002180:	015b      	lsls	r3, r3, #5
90002182:	4413      	add	r3, r2
90002184:	681a      	ldr	r2, [r3, #0]
90002186:	683b      	ldr	r3, [r7, #0]
90002188:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000218a:	68fb      	ldr	r3, [r7, #12]
}
9000218c:	4618      	mov	r0, r3
9000218e:	3714      	adds	r7, #20
90002190:	46bd      	mov	sp, r7
90002192:	f85d 7b04 	ldr.w	r7, [sp], #4
90002196:	4770      	bx	lr
90002198:	200011fc 	.word	0x200011fc

9000219c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
9000219c:	b480      	push	{r7}
9000219e:	b085      	sub	sp, #20
900021a0:	af00      	add	r7, sp, #0
900021a2:	6078      	str	r0, [r7, #4]
900021a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900021a6:	2300      	movs	r3, #0
900021a8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900021aa:	687b      	ldr	r3, [r7, #4]
900021ac:	2b00      	cmp	r3, #0
900021ae:	d003      	beq.n	900021b8 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900021b0:	f06f 0301 	mvn.w	r3, #1
900021b4:	60fb      	str	r3, [r7, #12]
900021b6:	e007      	b.n	900021c8 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
900021b8:	4a07      	ldr	r2, [pc, #28]	@ (900021d8 <BSP_LCD_GetYSize+0x3c>)
900021ba:	687b      	ldr	r3, [r7, #4]
900021bc:	015b      	lsls	r3, r3, #5
900021be:	4413      	add	r3, r2
900021c0:	3304      	adds	r3, #4
900021c2:	681a      	ldr	r2, [r3, #0]
900021c4:	683b      	ldr	r3, [r7, #0]
900021c6:	601a      	str	r2, [r3, #0]
  }

  return ret;
900021c8:	68fb      	ldr	r3, [r7, #12]
}
900021ca:	4618      	mov	r0, r3
900021cc:	3714      	adds	r7, #20
900021ce:	46bd      	mov	sp, r7
900021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900021d4:	4770      	bx	lr
900021d6:	bf00      	nop
900021d8:	200011fc 	.word	0x200011fc

900021dc <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
900021dc:	b580      	push	{r7, lr}
900021de:	b08e      	sub	sp, #56	@ 0x38
900021e0:	af02      	add	r7, sp, #8
900021e2:	60f8      	str	r0, [r7, #12]
900021e4:	60b9      	str	r1, [r7, #8]
900021e6:	607a      	str	r2, [r7, #4]
900021e8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900021ea:	2300      	movs	r3, #0
900021ec:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
900021ee:	683b      	ldr	r3, [r7, #0]
900021f0:	330a      	adds	r3, #10
900021f2:	781b      	ldrb	r3, [r3, #0]
900021f4:	461a      	mov	r2, r3
900021f6:	683b      	ldr	r3, [r7, #0]
900021f8:	330b      	adds	r3, #11
900021fa:	781b      	ldrb	r3, [r3, #0]
900021fc:	021b      	lsls	r3, r3, #8
900021fe:	441a      	add	r2, r3
90002200:	683b      	ldr	r3, [r7, #0]
90002202:	330c      	adds	r3, #12
90002204:	781b      	ldrb	r3, [r3, #0]
90002206:	041b      	lsls	r3, r3, #16
90002208:	441a      	add	r2, r3
9000220a:	683b      	ldr	r3, [r7, #0]
9000220c:	330d      	adds	r3, #13
9000220e:	781b      	ldrb	r3, [r3, #0]
90002210:	061b      	lsls	r3, r3, #24
90002212:	4413      	add	r3, r2
90002214:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90002216:	683b      	ldr	r3, [r7, #0]
90002218:	3312      	adds	r3, #18
9000221a:	781b      	ldrb	r3, [r3, #0]
9000221c:	461a      	mov	r2, r3
9000221e:	683b      	ldr	r3, [r7, #0]
90002220:	3313      	adds	r3, #19
90002222:	781b      	ldrb	r3, [r3, #0]
90002224:	021b      	lsls	r3, r3, #8
90002226:	441a      	add	r2, r3
90002228:	683b      	ldr	r3, [r7, #0]
9000222a:	3314      	adds	r3, #20
9000222c:	781b      	ldrb	r3, [r3, #0]
9000222e:	041b      	lsls	r3, r3, #16
90002230:	441a      	add	r2, r3
90002232:	683b      	ldr	r3, [r7, #0]
90002234:	3315      	adds	r3, #21
90002236:	781b      	ldrb	r3, [r3, #0]
90002238:	061b      	lsls	r3, r3, #24
9000223a:	4413      	add	r3, r2
9000223c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
9000223e:	683b      	ldr	r3, [r7, #0]
90002240:	3316      	adds	r3, #22
90002242:	781b      	ldrb	r3, [r3, #0]
90002244:	461a      	mov	r2, r3
90002246:	683b      	ldr	r3, [r7, #0]
90002248:	3317      	adds	r3, #23
9000224a:	781b      	ldrb	r3, [r3, #0]
9000224c:	021b      	lsls	r3, r3, #8
9000224e:	441a      	add	r2, r3
90002250:	683b      	ldr	r3, [r7, #0]
90002252:	3318      	adds	r3, #24
90002254:	781b      	ldrb	r3, [r3, #0]
90002256:	041b      	lsls	r3, r3, #16
90002258:	441a      	add	r2, r3
9000225a:	683b      	ldr	r3, [r7, #0]
9000225c:	3319      	adds	r3, #25
9000225e:	781b      	ldrb	r3, [r3, #0]
90002260:	061b      	lsls	r3, r3, #24
90002262:	4413      	add	r3, r2
90002264:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
90002266:	683b      	ldr	r3, [r7, #0]
90002268:	331c      	adds	r3, #28
9000226a:	781b      	ldrb	r3, [r3, #0]
9000226c:	461a      	mov	r2, r3
9000226e:	683b      	ldr	r3, [r7, #0]
90002270:	331d      	adds	r3, #29
90002272:	781b      	ldrb	r3, [r3, #0]
90002274:	021b      	lsls	r3, r3, #8
90002276:	4413      	add	r3, r2
90002278:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
9000227a:	4a37      	ldr	r2, [pc, #220]	@ (90002358 <BSP_LCD_DrawBitmap+0x17c>)
9000227c:	68fb      	ldr	r3, [r7, #12]
9000227e:	015b      	lsls	r3, r3, #5
90002280:	4413      	add	r3, r2
90002282:	3308      	adds	r3, #8
90002284:	681b      	ldr	r3, [r3, #0]
90002286:	4a35      	ldr	r2, [pc, #212]	@ (9000235c <BSP_LCD_DrawBitmap+0x180>)
90002288:	2134      	movs	r1, #52	@ 0x34
9000228a:	fb01 f303 	mul.w	r3, r1, r3
9000228e:	4413      	add	r3, r2
90002290:	335c      	adds	r3, #92	@ 0x5c
90002292:	681a      	ldr	r2, [r3, #0]
90002294:	4930      	ldr	r1, [pc, #192]	@ (90002358 <BSP_LCD_DrawBitmap+0x17c>)
90002296:	68fb      	ldr	r3, [r7, #12]
90002298:	015b      	lsls	r3, r3, #5
9000229a:	440b      	add	r3, r1
9000229c:	681b      	ldr	r3, [r3, #0]
9000229e:	6879      	ldr	r1, [r7, #4]
900022a0:	fb03 f101 	mul.w	r1, r3, r1
900022a4:	68bb      	ldr	r3, [r7, #8]
900022a6:	440b      	add	r3, r1
900022a8:	482b      	ldr	r0, [pc, #172]	@ (90002358 <BSP_LCD_DrawBitmap+0x17c>)
900022aa:	68f9      	ldr	r1, [r7, #12]
900022ac:	0149      	lsls	r1, r1, #5
900022ae:	4401      	add	r1, r0
900022b0:	3110      	adds	r1, #16
900022b2:	6809      	ldr	r1, [r1, #0]
900022b4:	fb01 f303 	mul.w	r3, r1, r3
900022b8:	4413      	add	r3, r2
900022ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
900022bc:	693b      	ldr	r3, [r7, #16]
900022be:	3b20      	subs	r3, #32
900022c0:	2b07      	cmp	r3, #7
900022c2:	d802      	bhi.n	900022ca <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
900022c4:	2300      	movs	r3, #0
900022c6:	627b      	str	r3, [r7, #36]	@ 0x24
900022c8:	e008      	b.n	900022dc <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
900022ca:	693b      	ldr	r3, [r7, #16]
900022cc:	3b10      	subs	r3, #16
900022ce:	2b07      	cmp	r3, #7
900022d0:	d802      	bhi.n	900022d8 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
900022d2:	2302      	movs	r3, #2
900022d4:	627b      	str	r3, [r7, #36]	@ 0x24
900022d6:	e001      	b.n	900022dc <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
900022d8:	2301      	movs	r3, #1
900022da:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
900022dc:	697b      	ldr	r3, [r7, #20]
900022de:	3b01      	subs	r3, #1
900022e0:	69ba      	ldr	r2, [r7, #24]
900022e2:	fb02 f303 	mul.w	r3, r2, r3
900022e6:	693a      	ldr	r2, [r7, #16]
900022e8:	08d2      	lsrs	r2, r2, #3
900022ea:	fb03 f202 	mul.w	r2, r3, r2
900022ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900022f0:	4413      	add	r3, r2
900022f2:	683a      	ldr	r2, [r7, #0]
900022f4:	4413      	add	r3, r2
900022f6:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
900022f8:	2300      	movs	r3, #0
900022fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
900022fc:	e023      	b.n	90002346 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
900022fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002302:	9300      	str	r3, [sp, #0]
90002304:	69bb      	ldr	r3, [r7, #24]
90002306:	6a39      	ldr	r1, [r7, #32]
90002308:	68f8      	ldr	r0, [r7, #12]
9000230a:	f000 fa77 	bl	900027fc <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000230e:	4a12      	ldr	r2, [pc, #72]	@ (90002358 <BSP_LCD_DrawBitmap+0x17c>)
90002310:	68fb      	ldr	r3, [r7, #12]
90002312:	015b      	lsls	r3, r3, #5
90002314:	4413      	add	r3, r2
90002316:	681b      	ldr	r3, [r3, #0]
90002318:	490f      	ldr	r1, [pc, #60]	@ (90002358 <BSP_LCD_DrawBitmap+0x17c>)
9000231a:	68fa      	ldr	r2, [r7, #12]
9000231c:	0152      	lsls	r2, r2, #5
9000231e:	440a      	add	r2, r1
90002320:	3210      	adds	r2, #16
90002322:	6812      	ldr	r2, [r2, #0]
90002324:	fb02 f303 	mul.w	r3, r2, r3
90002328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000232a:	4413      	add	r3, r2
9000232c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
9000232e:	693b      	ldr	r3, [r7, #16]
90002330:	08db      	lsrs	r3, r3, #3
90002332:	69ba      	ldr	r2, [r7, #24]
90002334:	fb02 f303 	mul.w	r3, r2, r3
90002338:	425b      	negs	r3, r3
9000233a:	6a3a      	ldr	r2, [r7, #32]
9000233c:	4413      	add	r3, r2
9000233e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90002340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002342:	3301      	adds	r3, #1
90002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002348:	697b      	ldr	r3, [r7, #20]
9000234a:	429a      	cmp	r2, r3
9000234c:	d3d7      	bcc.n	900022fe <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
9000234e:	69fb      	ldr	r3, [r7, #28]
}
90002350:	4618      	mov	r0, r3
90002352:	3730      	adds	r7, #48	@ 0x30
90002354:	46bd      	mov	sp, r7
90002356:	bd80      	pop	{r7, pc}
90002358:	200011fc 	.word	0x200011fc
9000235c:	20001154 	.word	0x20001154

90002360 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002360:	b580      	push	{r7, lr}
90002362:	b088      	sub	sp, #32
90002364:	af00      	add	r7, sp, #0
90002366:	60f8      	str	r0, [r7, #12]
90002368:	60b9      	str	r1, [r7, #8]
9000236a:	607a      	str	r2, [r7, #4]
9000236c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
9000236e:	683b      	ldr	r3, [r7, #0]
90002370:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90002372:	2300      	movs	r3, #0
90002374:	61fb      	str	r3, [r7, #28]
90002376:	e032      	b.n	900023de <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002378:	2300      	movs	r3, #0
9000237a:	617b      	str	r3, [r7, #20]
9000237c:	e028      	b.n	900023d0 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
9000237e:	69bb      	ldr	r3, [r7, #24]
90002380:	781b      	ldrb	r3, [r3, #0]
90002382:	461a      	mov	r2, r3
90002384:	69bb      	ldr	r3, [r7, #24]
90002386:	3301      	adds	r3, #1
90002388:	781b      	ldrb	r3, [r3, #0]
9000238a:	021b      	lsls	r3, r3, #8
9000238c:	431a      	orrs	r2, r3
9000238e:	69bb      	ldr	r3, [r7, #24]
90002390:	3302      	adds	r3, #2
90002392:	781b      	ldrb	r3, [r3, #0]
90002394:	041b      	lsls	r3, r3, #16
90002396:	431a      	orrs	r2, r3
90002398:	69bb      	ldr	r3, [r7, #24]
9000239a:	3303      	adds	r3, #3
9000239c:	781b      	ldrb	r3, [r3, #0]
9000239e:	061b      	lsls	r3, r3, #24
900023a0:	4313      	orrs	r3, r2
900023a2:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
900023a4:	68ba      	ldr	r2, [r7, #8]
900023a6:	697b      	ldr	r3, [r7, #20]
900023a8:	18d1      	adds	r1, r2, r3
900023aa:	687a      	ldr	r2, [r7, #4]
900023ac:	69fb      	ldr	r3, [r7, #28]
900023ae:	441a      	add	r2, r3
900023b0:	693b      	ldr	r3, [r7, #16]
900023b2:	68f8      	ldr	r0, [r7, #12]
900023b4:	f000 f95e 	bl	90002674 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
900023b8:	4a0d      	ldr	r2, [pc, #52]	@ (900023f0 <BSP_LCD_FillRGBRect+0x90>)
900023ba:	68fb      	ldr	r3, [r7, #12]
900023bc:	015b      	lsls	r3, r3, #5
900023be:	4413      	add	r3, r2
900023c0:	3310      	adds	r3, #16
900023c2:	681b      	ldr	r3, [r3, #0]
900023c4:	69ba      	ldr	r2, [r7, #24]
900023c6:	4413      	add	r3, r2
900023c8:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
900023ca:	697b      	ldr	r3, [r7, #20]
900023cc:	3301      	adds	r3, #1
900023ce:	617b      	str	r3, [r7, #20]
900023d0:	697a      	ldr	r2, [r7, #20]
900023d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900023d4:	429a      	cmp	r2, r3
900023d6:	d3d2      	bcc.n	9000237e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
900023d8:	69fb      	ldr	r3, [r7, #28]
900023da:	3301      	adds	r3, #1
900023dc:	61fb      	str	r3, [r7, #28]
900023de:	69fa      	ldr	r2, [r7, #28]
900023e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900023e2:	429a      	cmp	r2, r3
900023e4:	d3c8      	bcc.n	90002378 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
900023e6:	2300      	movs	r3, #0
}
900023e8:	4618      	mov	r0, r3
900023ea:	3720      	adds	r7, #32
900023ec:	46bd      	mov	sp, r7
900023ee:	bd80      	pop	{r7, pc}
900023f0:	200011fc 	.word	0x200011fc

900023f4 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900023f4:	b580      	push	{r7, lr}
900023f6:	b088      	sub	sp, #32
900023f8:	af02      	add	r7, sp, #8
900023fa:	60f8      	str	r0, [r7, #12]
900023fc:	60b9      	str	r1, [r7, #8]
900023fe:	607a      	str	r2, [r7, #4]
90002400:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002402:	4a21      	ldr	r2, [pc, #132]	@ (90002488 <BSP_LCD_DrawHLine+0x94>)
90002404:	68fb      	ldr	r3, [r7, #12]
90002406:	015b      	lsls	r3, r3, #5
90002408:	4413      	add	r3, r2
9000240a:	3308      	adds	r3, #8
9000240c:	681b      	ldr	r3, [r3, #0]
9000240e:	4a1f      	ldr	r2, [pc, #124]	@ (9000248c <BSP_LCD_DrawHLine+0x98>)
90002410:	2134      	movs	r1, #52	@ 0x34
90002412:	fb01 f303 	mul.w	r3, r1, r3
90002416:	4413      	add	r3, r2
90002418:	335c      	adds	r3, #92	@ 0x5c
9000241a:	681a      	ldr	r2, [r3, #0]
9000241c:	491a      	ldr	r1, [pc, #104]	@ (90002488 <BSP_LCD_DrawHLine+0x94>)
9000241e:	68fb      	ldr	r3, [r7, #12]
90002420:	015b      	lsls	r3, r3, #5
90002422:	440b      	add	r3, r1
90002424:	3310      	adds	r3, #16
90002426:	681b      	ldr	r3, [r3, #0]
90002428:	4817      	ldr	r0, [pc, #92]	@ (90002488 <BSP_LCD_DrawHLine+0x94>)
9000242a:	68f9      	ldr	r1, [r7, #12]
9000242c:	0149      	lsls	r1, r1, #5
9000242e:	4401      	add	r1, r0
90002430:	6809      	ldr	r1, [r1, #0]
90002432:	6878      	ldr	r0, [r7, #4]
90002434:	fb01 f000 	mul.w	r0, r1, r0
90002438:	68b9      	ldr	r1, [r7, #8]
9000243a:	4401      	add	r1, r0
9000243c:	fb01 f303 	mul.w	r3, r1, r3
90002440:	4413      	add	r3, r2
90002442:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002444:	68ba      	ldr	r2, [r7, #8]
90002446:	683b      	ldr	r3, [r7, #0]
90002448:	441a      	add	r2, r3
9000244a:	490f      	ldr	r1, [pc, #60]	@ (90002488 <BSP_LCD_DrawHLine+0x94>)
9000244c:	68fb      	ldr	r3, [r7, #12]
9000244e:	015b      	lsls	r3, r3, #5
90002450:	440b      	add	r3, r1
90002452:	681b      	ldr	r3, [r3, #0]
90002454:	429a      	cmp	r2, r3
90002456:	d907      	bls.n	90002468 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002458:	4a0b      	ldr	r2, [pc, #44]	@ (90002488 <BSP_LCD_DrawHLine+0x94>)
9000245a:	68fb      	ldr	r3, [r7, #12]
9000245c:	015b      	lsls	r3, r3, #5
9000245e:	4413      	add	r3, r2
90002460:	681a      	ldr	r2, [r3, #0]
90002462:	68bb      	ldr	r3, [r7, #8]
90002464:	1ad3      	subs	r3, r2, r3
90002466:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90002468:	6979      	ldr	r1, [r7, #20]
9000246a:	6a3b      	ldr	r3, [r7, #32]
9000246c:	9301      	str	r3, [sp, #4]
9000246e:	2300      	movs	r3, #0
90002470:	9300      	str	r3, [sp, #0]
90002472:	2301      	movs	r3, #1
90002474:	683a      	ldr	r2, [r7, #0]
90002476:	68f8      	ldr	r0, [r7, #12]
90002478:	f000 f956 	bl	90002728 <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000247c:	2300      	movs	r3, #0
}
9000247e:	4618      	mov	r0, r3
90002480:	3718      	adds	r7, #24
90002482:	46bd      	mov	sp, r7
90002484:	bd80      	pop	{r7, pc}
90002486:	bf00      	nop
90002488:	200011fc 	.word	0x200011fc
9000248c:	20001154 	.word	0x20001154

90002490 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002490:	b580      	push	{r7, lr}
90002492:	b088      	sub	sp, #32
90002494:	af02      	add	r7, sp, #8
90002496:	60f8      	str	r0, [r7, #12]
90002498:	60b9      	str	r1, [r7, #8]
9000249a:	607a      	str	r2, [r7, #4]
9000249c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000249e:	4a24      	ldr	r2, [pc, #144]	@ (90002530 <BSP_LCD_DrawVLine+0xa0>)
900024a0:	68fb      	ldr	r3, [r7, #12]
900024a2:	015b      	lsls	r3, r3, #5
900024a4:	4413      	add	r3, r2
900024a6:	3308      	adds	r3, #8
900024a8:	681b      	ldr	r3, [r3, #0]
900024aa:	4a22      	ldr	r2, [pc, #136]	@ (90002534 <BSP_LCD_DrawVLine+0xa4>)
900024ac:	2134      	movs	r1, #52	@ 0x34
900024ae:	fb01 f303 	mul.w	r3, r1, r3
900024b2:	4413      	add	r3, r2
900024b4:	335c      	adds	r3, #92	@ 0x5c
900024b6:	681a      	ldr	r2, [r3, #0]
900024b8:	491d      	ldr	r1, [pc, #116]	@ (90002530 <BSP_LCD_DrawVLine+0xa0>)
900024ba:	68fb      	ldr	r3, [r7, #12]
900024bc:	015b      	lsls	r3, r3, #5
900024be:	440b      	add	r3, r1
900024c0:	3310      	adds	r3, #16
900024c2:	681b      	ldr	r3, [r3, #0]
900024c4:	481a      	ldr	r0, [pc, #104]	@ (90002530 <BSP_LCD_DrawVLine+0xa0>)
900024c6:	68f9      	ldr	r1, [r7, #12]
900024c8:	0149      	lsls	r1, r1, #5
900024ca:	4401      	add	r1, r0
900024cc:	6809      	ldr	r1, [r1, #0]
900024ce:	6878      	ldr	r0, [r7, #4]
900024d0:	fb01 f000 	mul.w	r0, r1, r0
900024d4:	68b9      	ldr	r1, [r7, #8]
900024d6:	4401      	add	r1, r0
900024d8:	fb01 f303 	mul.w	r3, r1, r3
900024dc:	4413      	add	r3, r2
900024de:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
900024e0:	687a      	ldr	r2, [r7, #4]
900024e2:	683b      	ldr	r3, [r7, #0]
900024e4:	441a      	add	r2, r3
900024e6:	4912      	ldr	r1, [pc, #72]	@ (90002530 <BSP_LCD_DrawVLine+0xa0>)
900024e8:	68fb      	ldr	r3, [r7, #12]
900024ea:	015b      	lsls	r3, r3, #5
900024ec:	440b      	add	r3, r1
900024ee:	3304      	adds	r3, #4
900024f0:	681b      	ldr	r3, [r3, #0]
900024f2:	429a      	cmp	r2, r3
900024f4:	d908      	bls.n	90002508 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
900024f6:	4a0e      	ldr	r2, [pc, #56]	@ (90002530 <BSP_LCD_DrawVLine+0xa0>)
900024f8:	68fb      	ldr	r3, [r7, #12]
900024fa:	015b      	lsls	r3, r3, #5
900024fc:	4413      	add	r3, r2
900024fe:	3304      	adds	r3, #4
90002500:	681a      	ldr	r2, [r3, #0]
90002502:	687b      	ldr	r3, [r7, #4]
90002504:	1ad3      	subs	r3, r2, r3
90002506:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002508:	6979      	ldr	r1, [r7, #20]
9000250a:	4a09      	ldr	r2, [pc, #36]	@ (90002530 <BSP_LCD_DrawVLine+0xa0>)
9000250c:	68fb      	ldr	r3, [r7, #12]
9000250e:	015b      	lsls	r3, r3, #5
90002510:	4413      	add	r3, r2
90002512:	681b      	ldr	r3, [r3, #0]
90002514:	3b01      	subs	r3, #1
90002516:	6a3a      	ldr	r2, [r7, #32]
90002518:	9201      	str	r2, [sp, #4]
9000251a:	9300      	str	r3, [sp, #0]
9000251c:	683b      	ldr	r3, [r7, #0]
9000251e:	2201      	movs	r2, #1
90002520:	68f8      	ldr	r0, [r7, #12]
90002522:	f000 f901 	bl	90002728 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002526:	2300      	movs	r3, #0
}
90002528:	4618      	mov	r0, r3
9000252a:	3718      	adds	r7, #24
9000252c:	46bd      	mov	sp, r7
9000252e:	bd80      	pop	{r7, pc}
90002530:	200011fc 	.word	0x200011fc
90002534:	20001154 	.word	0x20001154

90002538 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90002538:	b580      	push	{r7, lr}
9000253a:	b088      	sub	sp, #32
9000253c:	af02      	add	r7, sp, #8
9000253e:	60f8      	str	r0, [r7, #12]
90002540:	60b9      	str	r1, [r7, #8]
90002542:	607a      	str	r2, [r7, #4]
90002544:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002546:	4a1b      	ldr	r2, [pc, #108]	@ (900025b4 <BSP_LCD_FillRect+0x7c>)
90002548:	68fb      	ldr	r3, [r7, #12]
9000254a:	015b      	lsls	r3, r3, #5
9000254c:	4413      	add	r3, r2
9000254e:	3308      	adds	r3, #8
90002550:	681b      	ldr	r3, [r3, #0]
90002552:	4a19      	ldr	r2, [pc, #100]	@ (900025b8 <BSP_LCD_FillRect+0x80>)
90002554:	2134      	movs	r1, #52	@ 0x34
90002556:	fb01 f303 	mul.w	r3, r1, r3
9000255a:	4413      	add	r3, r2
9000255c:	335c      	adds	r3, #92	@ 0x5c
9000255e:	681a      	ldr	r2, [r3, #0]
90002560:	4914      	ldr	r1, [pc, #80]	@ (900025b4 <BSP_LCD_FillRect+0x7c>)
90002562:	68fb      	ldr	r3, [r7, #12]
90002564:	015b      	lsls	r3, r3, #5
90002566:	440b      	add	r3, r1
90002568:	3310      	adds	r3, #16
9000256a:	681b      	ldr	r3, [r3, #0]
9000256c:	4811      	ldr	r0, [pc, #68]	@ (900025b4 <BSP_LCD_FillRect+0x7c>)
9000256e:	68f9      	ldr	r1, [r7, #12]
90002570:	0149      	lsls	r1, r1, #5
90002572:	4401      	add	r1, r0
90002574:	6809      	ldr	r1, [r1, #0]
90002576:	6878      	ldr	r0, [r7, #4]
90002578:	fb01 f000 	mul.w	r0, r1, r0
9000257c:	68b9      	ldr	r1, [r7, #8]
9000257e:	4401      	add	r1, r0
90002580:	fb01 f303 	mul.w	r3, r1, r3
90002584:	4413      	add	r3, r2
90002586:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
90002588:	6979      	ldr	r1, [r7, #20]
9000258a:	4a0a      	ldr	r2, [pc, #40]	@ (900025b4 <BSP_LCD_FillRect+0x7c>)
9000258c:	68fb      	ldr	r3, [r7, #12]
9000258e:	015b      	lsls	r3, r3, #5
90002590:	4413      	add	r3, r2
90002592:	681a      	ldr	r2, [r3, #0]
90002594:	683b      	ldr	r3, [r7, #0]
90002596:	1ad3      	subs	r3, r2, r3
90002598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000259a:	9201      	str	r2, [sp, #4]
9000259c:	9300      	str	r3, [sp, #0]
9000259e:	6a3b      	ldr	r3, [r7, #32]
900025a0:	683a      	ldr	r2, [r7, #0]
900025a2:	68f8      	ldr	r0, [r7, #12]
900025a4:	f000 f8c0 	bl	90002728 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900025a8:	2300      	movs	r3, #0
}
900025aa:	4618      	mov	r0, r3
900025ac:	3718      	adds	r7, #24
900025ae:	46bd      	mov	sp, r7
900025b0:	bd80      	pop	{r7, pc}
900025b2:	bf00      	nop
900025b4:	200011fc 	.word	0x200011fc
900025b8:	20001154 	.word	0x20001154

900025bc <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
900025bc:	b480      	push	{r7}
900025be:	b085      	sub	sp, #20
900025c0:	af00      	add	r7, sp, #0
900025c2:	60f8      	str	r0, [r7, #12]
900025c4:	60b9      	str	r1, [r7, #8]
900025c6:	607a      	str	r2, [r7, #4]
900025c8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900025ca:	4a28      	ldr	r2, [pc, #160]	@ (9000266c <BSP_LCD_ReadPixel+0xb0>)
900025cc:	68fb      	ldr	r3, [r7, #12]
900025ce:	015b      	lsls	r3, r3, #5
900025d0:	4413      	add	r3, r2
900025d2:	3308      	adds	r3, #8
900025d4:	681b      	ldr	r3, [r3, #0]
900025d6:	4a26      	ldr	r2, [pc, #152]	@ (90002670 <BSP_LCD_ReadPixel+0xb4>)
900025d8:	2134      	movs	r1, #52	@ 0x34
900025da:	fb01 f303 	mul.w	r3, r1, r3
900025de:	4413      	add	r3, r2
900025e0:	3348      	adds	r3, #72	@ 0x48
900025e2:	681b      	ldr	r3, [r3, #0]
900025e4:	2b00      	cmp	r3, #0
900025e6:	d11c      	bne.n	90002622 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900025e8:	4a20      	ldr	r2, [pc, #128]	@ (9000266c <BSP_LCD_ReadPixel+0xb0>)
900025ea:	68fb      	ldr	r3, [r7, #12]
900025ec:	015b      	lsls	r3, r3, #5
900025ee:	4413      	add	r3, r2
900025f0:	3308      	adds	r3, #8
900025f2:	681b      	ldr	r3, [r3, #0]
900025f4:	4a1e      	ldr	r2, [pc, #120]	@ (90002670 <BSP_LCD_ReadPixel+0xb4>)
900025f6:	2134      	movs	r1, #52	@ 0x34
900025f8:	fb01 f303 	mul.w	r3, r1, r3
900025fc:	4413      	add	r3, r2
900025fe:	335c      	adds	r3, #92	@ 0x5c
90002600:	681a      	ldr	r2, [r3, #0]
90002602:	491a      	ldr	r1, [pc, #104]	@ (9000266c <BSP_LCD_ReadPixel+0xb0>)
90002604:	68fb      	ldr	r3, [r7, #12]
90002606:	015b      	lsls	r3, r3, #5
90002608:	440b      	add	r3, r1
9000260a:	681b      	ldr	r3, [r3, #0]
9000260c:	6879      	ldr	r1, [r7, #4]
9000260e:	fb03 f101 	mul.w	r1, r3, r1
90002612:	68bb      	ldr	r3, [r7, #8]
90002614:	440b      	add	r3, r1
90002616:	009b      	lsls	r3, r3, #2
90002618:	4413      	add	r3, r2
9000261a:	681a      	ldr	r2, [r3, #0]
9000261c:	683b      	ldr	r3, [r7, #0]
9000261e:	601a      	str	r2, [r3, #0]
90002620:	e01d      	b.n	9000265e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002622:	4a12      	ldr	r2, [pc, #72]	@ (9000266c <BSP_LCD_ReadPixel+0xb0>)
90002624:	68fb      	ldr	r3, [r7, #12]
90002626:	015b      	lsls	r3, r3, #5
90002628:	4413      	add	r3, r2
9000262a:	3308      	adds	r3, #8
9000262c:	681b      	ldr	r3, [r3, #0]
9000262e:	4a10      	ldr	r2, [pc, #64]	@ (90002670 <BSP_LCD_ReadPixel+0xb4>)
90002630:	2134      	movs	r1, #52	@ 0x34
90002632:	fb01 f303 	mul.w	r3, r1, r3
90002636:	4413      	add	r3, r2
90002638:	335c      	adds	r3, #92	@ 0x5c
9000263a:	681a      	ldr	r2, [r3, #0]
9000263c:	490b      	ldr	r1, [pc, #44]	@ (9000266c <BSP_LCD_ReadPixel+0xb0>)
9000263e:	68fb      	ldr	r3, [r7, #12]
90002640:	015b      	lsls	r3, r3, #5
90002642:	440b      	add	r3, r1
90002644:	681b      	ldr	r3, [r3, #0]
90002646:	6879      	ldr	r1, [r7, #4]
90002648:	fb03 f101 	mul.w	r1, r3, r1
9000264c:	68bb      	ldr	r3, [r7, #8]
9000264e:	440b      	add	r3, r1
90002650:	005b      	lsls	r3, r3, #1
90002652:	4413      	add	r3, r2
90002654:	881b      	ldrh	r3, [r3, #0]
90002656:	b29b      	uxth	r3, r3
90002658:	461a      	mov	r2, r3
9000265a:	683b      	ldr	r3, [r7, #0]
9000265c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000265e:	2300      	movs	r3, #0
}
90002660:	4618      	mov	r0, r3
90002662:	3714      	adds	r7, #20
90002664:	46bd      	mov	sp, r7
90002666:	f85d 7b04 	ldr.w	r7, [sp], #4
9000266a:	4770      	bx	lr
9000266c:	200011fc 	.word	0x200011fc
90002670:	20001154 	.word	0x20001154

90002674 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002674:	b480      	push	{r7}
90002676:	b085      	sub	sp, #20
90002678:	af00      	add	r7, sp, #0
9000267a:	60f8      	str	r0, [r7, #12]
9000267c:	60b9      	str	r1, [r7, #8]
9000267e:	607a      	str	r2, [r7, #4]
90002680:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002682:	4a27      	ldr	r2, [pc, #156]	@ (90002720 <BSP_LCD_WritePixel+0xac>)
90002684:	68fb      	ldr	r3, [r7, #12]
90002686:	015b      	lsls	r3, r3, #5
90002688:	4413      	add	r3, r2
9000268a:	3308      	adds	r3, #8
9000268c:	681b      	ldr	r3, [r3, #0]
9000268e:	4a25      	ldr	r2, [pc, #148]	@ (90002724 <BSP_LCD_WritePixel+0xb0>)
90002690:	2134      	movs	r1, #52	@ 0x34
90002692:	fb01 f303 	mul.w	r3, r1, r3
90002696:	4413      	add	r3, r2
90002698:	3348      	adds	r3, #72	@ 0x48
9000269a:	681b      	ldr	r3, [r3, #0]
9000269c:	2b00      	cmp	r3, #0
9000269e:	d11c      	bne.n	900026da <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
900026a0:	4a1f      	ldr	r2, [pc, #124]	@ (90002720 <BSP_LCD_WritePixel+0xac>)
900026a2:	68fb      	ldr	r3, [r7, #12]
900026a4:	015b      	lsls	r3, r3, #5
900026a6:	4413      	add	r3, r2
900026a8:	3308      	adds	r3, #8
900026aa:	681b      	ldr	r3, [r3, #0]
900026ac:	4a1d      	ldr	r2, [pc, #116]	@ (90002724 <BSP_LCD_WritePixel+0xb0>)
900026ae:	2134      	movs	r1, #52	@ 0x34
900026b0:	fb01 f303 	mul.w	r3, r1, r3
900026b4:	4413      	add	r3, r2
900026b6:	335c      	adds	r3, #92	@ 0x5c
900026b8:	681a      	ldr	r2, [r3, #0]
900026ba:	4919      	ldr	r1, [pc, #100]	@ (90002720 <BSP_LCD_WritePixel+0xac>)
900026bc:	68fb      	ldr	r3, [r7, #12]
900026be:	015b      	lsls	r3, r3, #5
900026c0:	440b      	add	r3, r1
900026c2:	681b      	ldr	r3, [r3, #0]
900026c4:	6879      	ldr	r1, [r7, #4]
900026c6:	fb03 f101 	mul.w	r1, r3, r1
900026ca:	68bb      	ldr	r3, [r7, #8]
900026cc:	440b      	add	r3, r1
900026ce:	009b      	lsls	r3, r3, #2
900026d0:	4413      	add	r3, r2
900026d2:	461a      	mov	r2, r3
900026d4:	683b      	ldr	r3, [r7, #0]
900026d6:	6013      	str	r3, [r2, #0]
900026d8:	e01b      	b.n	90002712 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
900026da:	4a11      	ldr	r2, [pc, #68]	@ (90002720 <BSP_LCD_WritePixel+0xac>)
900026dc:	68fb      	ldr	r3, [r7, #12]
900026de:	015b      	lsls	r3, r3, #5
900026e0:	4413      	add	r3, r2
900026e2:	3308      	adds	r3, #8
900026e4:	681b      	ldr	r3, [r3, #0]
900026e6:	4a0f      	ldr	r2, [pc, #60]	@ (90002724 <BSP_LCD_WritePixel+0xb0>)
900026e8:	2134      	movs	r1, #52	@ 0x34
900026ea:	fb01 f303 	mul.w	r3, r1, r3
900026ee:	4413      	add	r3, r2
900026f0:	335c      	adds	r3, #92	@ 0x5c
900026f2:	681a      	ldr	r2, [r3, #0]
900026f4:	490a      	ldr	r1, [pc, #40]	@ (90002720 <BSP_LCD_WritePixel+0xac>)
900026f6:	68fb      	ldr	r3, [r7, #12]
900026f8:	015b      	lsls	r3, r3, #5
900026fa:	440b      	add	r3, r1
900026fc:	681b      	ldr	r3, [r3, #0]
900026fe:	6879      	ldr	r1, [r7, #4]
90002700:	fb03 f101 	mul.w	r1, r3, r1
90002704:	68bb      	ldr	r3, [r7, #8]
90002706:	440b      	add	r3, r1
90002708:	005b      	lsls	r3, r3, #1
9000270a:	4413      	add	r3, r2
9000270c:	683a      	ldr	r2, [r7, #0]
9000270e:	b292      	uxth	r2, r2
90002710:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002712:	2300      	movs	r3, #0
}
90002714:	4618      	mov	r0, r3
90002716:	3714      	adds	r7, #20
90002718:	46bd      	mov	sp, r7
9000271a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000271e:	4770      	bx	lr
90002720:	200011fc 	.word	0x200011fc
90002724:	20001154 	.word	0x20001154

90002728 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002728:	b580      	push	{r7, lr}
9000272a:	b088      	sub	sp, #32
9000272c:	af02      	add	r7, sp, #8
9000272e:	60f8      	str	r0, [r7, #12]
90002730:	60b9      	str	r1, [r7, #8]
90002732:	607a      	str	r2, [r7, #4]
90002734:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002738:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
9000273a:	4a2d      	ldr	r2, [pc, #180]	@ (900027f0 <LL_FillBuffer+0xc8>)
9000273c:	68fb      	ldr	r3, [r7, #12]
9000273e:	015b      	lsls	r3, r3, #5
90002740:	4413      	add	r3, r2
90002742:	330c      	adds	r3, #12
90002744:	681b      	ldr	r3, [r3, #0]
90002746:	2b02      	cmp	r3, #2
90002748:	d129      	bne.n	9000279e <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000274a:	2302      	movs	r3, #2
9000274c:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
9000274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002750:	0adb      	lsrs	r3, r3, #11
90002752:	f003 021f 	and.w	r2, r3, #31
90002756:	4613      	mov	r3, r2
90002758:	011b      	lsls	r3, r3, #4
9000275a:	4413      	add	r3, r2
9000275c:	015a      	lsls	r2, r3, #5
9000275e:	1ad3      	subs	r3, r2, r3
90002760:	3317      	adds	r3, #23
90002762:	099b      	lsrs	r3, r3, #6
90002764:	0419      	lsls	r1, r3, #16
90002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002768:	095b      	lsrs	r3, r3, #5
9000276a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
9000276e:	4613      	mov	r3, r2
90002770:	01db      	lsls	r3, r3, #7
90002772:	4413      	add	r3, r2
90002774:	005b      	lsls	r3, r3, #1
90002776:	4413      	add	r3, r2
90002778:	3321      	adds	r3, #33	@ 0x21
9000277a:	099b      	lsrs	r3, r3, #6
9000277c:	021b      	lsls	r3, r3, #8
9000277e:	4319      	orrs	r1, r3
90002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002782:	f003 021f 	and.w	r2, r3, #31
90002786:	4613      	mov	r3, r2
90002788:	011b      	lsls	r3, r3, #4
9000278a:	4413      	add	r3, r2
9000278c:	015a      	lsls	r2, r3, #5
9000278e:	1ad3      	subs	r3, r2, r3
90002790:	3317      	adds	r3, #23
90002792:	099b      	lsrs	r3, r3, #6
90002794:	430b      	orrs	r3, r1
90002796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
9000279a:	613b      	str	r3, [r7, #16]
    break;
9000279c:	e002      	b.n	900027a4 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
9000279e:	2300      	movs	r3, #0
900027a0:	617b      	str	r3, [r7, #20]
    break;
900027a2:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
900027a4:	4b13      	ldr	r3, [pc, #76]	@ (900027f4 <LL_FillBuffer+0xcc>)
900027a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
900027aa:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900027ac:	4a11      	ldr	r2, [pc, #68]	@ (900027f4 <LL_FillBuffer+0xcc>)
900027ae:	697b      	ldr	r3, [r7, #20]
900027b0:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
900027b2:	4a10      	ldr	r2, [pc, #64]	@ (900027f4 <LL_FillBuffer+0xcc>)
900027b4:	6a3b      	ldr	r3, [r7, #32]
900027b6:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
900027b8:	4b0e      	ldr	r3, [pc, #56]	@ (900027f4 <LL_FillBuffer+0xcc>)
900027ba:	4a0f      	ldr	r2, [pc, #60]	@ (900027f8 <LL_FillBuffer+0xd0>)
900027bc:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900027be:	480d      	ldr	r0, [pc, #52]	@ (900027f4 <LL_FillBuffer+0xcc>)
900027c0:	f000 fe50 	bl	90003464 <HAL_DMA2D_Init>
900027c4:	4603      	mov	r3, r0
900027c6:	2b00      	cmp	r3, #0
900027c8:	d10e      	bne.n	900027e8 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900027ca:	68ba      	ldr	r2, [r7, #8]
900027cc:	683b      	ldr	r3, [r7, #0]
900027ce:	9300      	str	r3, [sp, #0]
900027d0:	687b      	ldr	r3, [r7, #4]
900027d2:	6939      	ldr	r1, [r7, #16]
900027d4:	4807      	ldr	r0, [pc, #28]	@ (900027f4 <LL_FillBuffer+0xcc>)
900027d6:	f000 feb3 	bl	90003540 <HAL_DMA2D_Start>
900027da:	4603      	mov	r3, r0
900027dc:	2b00      	cmp	r3, #0
900027de:	d103      	bne.n	900027e8 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900027e0:	2132      	movs	r1, #50	@ 0x32
900027e2:	4804      	ldr	r0, [pc, #16]	@ (900027f4 <LL_FillBuffer+0xcc>)
900027e4:	f000 fed7 	bl	90003596 <HAL_DMA2D_PollForTransfer>
    }
  }
}
900027e8:	bf00      	nop
900027ea:	3718      	adds	r7, #24
900027ec:	46bd      	mov	sp, r7
900027ee:	bd80      	pop	{r7, pc}
900027f0:	200011fc 	.word	0x200011fc
900027f4:	200010ec 	.word	0x200010ec
900027f8:	52001000 	.word	0x52001000

900027fc <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
900027fc:	b580      	push	{r7, lr}
900027fe:	b088      	sub	sp, #32
90002800:	af02      	add	r7, sp, #8
90002802:	60f8      	str	r0, [r7, #12]
90002804:	60b9      	str	r1, [r7, #8]
90002806:	607a      	str	r2, [r7, #4]
90002808:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
9000280a:	4a23      	ldr	r2, [pc, #140]	@ (90002898 <LL_ConvertLineToRGB+0x9c>)
9000280c:	68fb      	ldr	r3, [r7, #12]
9000280e:	015b      	lsls	r3, r3, #5
90002810:	4413      	add	r3, r2
90002812:	330c      	adds	r3, #12
90002814:	681b      	ldr	r3, [r3, #0]
90002816:	2b02      	cmp	r3, #2
90002818:	d102      	bne.n	90002820 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000281a:	2302      	movs	r3, #2
9000281c:	617b      	str	r3, [r7, #20]
    break;
9000281e:	e002      	b.n	90002826 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002820:	2300      	movs	r3, #0
90002822:	617b      	str	r3, [r7, #20]
    break;
90002824:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002826:	4b1d      	ldr	r3, [pc, #116]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
90002828:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
9000282c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
9000282e:	4a1b      	ldr	r2, [pc, #108]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
90002830:	697b      	ldr	r3, [r7, #20]
90002832:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002834:	4b19      	ldr	r3, [pc, #100]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
90002836:	2200      	movs	r2, #0
90002838:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
9000283a:	4b18      	ldr	r3, [pc, #96]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
9000283c:	2200      	movs	r2, #0
9000283e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002840:	4b16      	ldr	r3, [pc, #88]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
90002842:	22ff      	movs	r2, #255	@ 0xff
90002844:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002846:	4a15      	ldr	r2, [pc, #84]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
90002848:	6a3b      	ldr	r3, [r7, #32]
9000284a:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
9000284c:	4b13      	ldr	r3, [pc, #76]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
9000284e:	2200      	movs	r2, #0
90002850:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002852:	4b12      	ldr	r3, [pc, #72]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
90002854:	4a12      	ldr	r2, [pc, #72]	@ (900028a0 <LL_ConvertLineToRGB+0xa4>)
90002856:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002858:	4810      	ldr	r0, [pc, #64]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
9000285a:	f000 fe03 	bl	90003464 <HAL_DMA2D_Init>
9000285e:	4603      	mov	r3, r0
90002860:	2b00      	cmp	r3, #0
90002862:	d115      	bne.n	90002890 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002864:	2101      	movs	r1, #1
90002866:	480d      	ldr	r0, [pc, #52]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
90002868:	f000 ff7e 	bl	90003768 <HAL_DMA2D_ConfigLayer>
9000286c:	4603      	mov	r3, r0
9000286e:	2b00      	cmp	r3, #0
90002870:	d10e      	bne.n	90002890 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002872:	68b9      	ldr	r1, [r7, #8]
90002874:	687a      	ldr	r2, [r7, #4]
90002876:	2301      	movs	r3, #1
90002878:	9300      	str	r3, [sp, #0]
9000287a:	683b      	ldr	r3, [r7, #0]
9000287c:	4807      	ldr	r0, [pc, #28]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
9000287e:	f000 fe5f 	bl	90003540 <HAL_DMA2D_Start>
90002882:	4603      	mov	r3, r0
90002884:	2b00      	cmp	r3, #0
90002886:	d103      	bne.n	90002890 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002888:	2132      	movs	r1, #50	@ 0x32
9000288a:	4804      	ldr	r0, [pc, #16]	@ (9000289c <LL_ConvertLineToRGB+0xa0>)
9000288c:	f000 fe83 	bl	90003596 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002890:	bf00      	nop
90002892:	3718      	adds	r7, #24
90002894:	46bd      	mov	sp, r7
90002896:	bd80      	pop	{r7, pc}
90002898:	200011fc 	.word	0x200011fc
9000289c:	200010ec 	.word	0x200010ec
900028a0:	52001000 	.word	0x52001000

900028a4 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900028a4:	b580      	push	{r7, lr}
900028a6:	b08e      	sub	sp, #56	@ 0x38
900028a8:	af00      	add	r7, sp, #0
900028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
900028ac:	687b      	ldr	r3, [r7, #4]
900028ae:	681b      	ldr	r3, [r3, #0]
900028b0:	4a5b      	ldr	r2, [pc, #364]	@ (90002a20 <LTDC_MspInit+0x17c>)
900028b2:	4293      	cmp	r3, r2
900028b4:	f040 80b0 	bne.w	90002a18 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
900028b8:	4b5a      	ldr	r3, [pc, #360]	@ (90002a24 <LTDC_MspInit+0x180>)
900028ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
900028be:	4a59      	ldr	r2, [pc, #356]	@ (90002a24 <LTDC_MspInit+0x180>)
900028c0:	f043 0308 	orr.w	r3, r3, #8
900028c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
900028c8:	4b56      	ldr	r3, [pc, #344]	@ (90002a24 <LTDC_MspInit+0x180>)
900028ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
900028ce:	f003 0308 	and.w	r3, r3, #8
900028d2:	623b      	str	r3, [r7, #32]
900028d4:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
900028d6:	4b53      	ldr	r3, [pc, #332]	@ (90002a24 <LTDC_MspInit+0x180>)
900028d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900028dc:	4a51      	ldr	r2, [pc, #324]	@ (90002a24 <LTDC_MspInit+0x180>)
900028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900028e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900028e6:	4b4f      	ldr	r3, [pc, #316]	@ (90002a24 <LTDC_MspInit+0x180>)
900028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900028f0:	61fb      	str	r3, [r7, #28]
900028f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
900028f4:	4b4b      	ldr	r3, [pc, #300]	@ (90002a24 <LTDC_MspInit+0x180>)
900028f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900028fa:	4a4a      	ldr	r2, [pc, #296]	@ (90002a24 <LTDC_MspInit+0x180>)
900028fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002904:	4b47      	ldr	r3, [pc, #284]	@ (90002a24 <LTDC_MspInit+0x180>)
90002906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000290a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000290e:	61bb      	str	r3, [r7, #24]
90002910:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002912:	4b44      	ldr	r3, [pc, #272]	@ (90002a24 <LTDC_MspInit+0x180>)
90002914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002918:	4a42      	ldr	r2, [pc, #264]	@ (90002a24 <LTDC_MspInit+0x180>)
9000291a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000291e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002922:	4b40      	ldr	r3, [pc, #256]	@ (90002a24 <LTDC_MspInit+0x180>)
90002924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000292c:	617b      	str	r3, [r7, #20]
9000292e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002930:	4b3c      	ldr	r3, [pc, #240]	@ (90002a24 <LTDC_MspInit+0x180>)
90002932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002936:	4a3b      	ldr	r2, [pc, #236]	@ (90002a24 <LTDC_MspInit+0x180>)
90002938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000293c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002940:	4b38      	ldr	r3, [pc, #224]	@ (90002a24 <LTDC_MspInit+0x180>)
90002942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000294a:	613b      	str	r3, [r7, #16]
9000294c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000294e:	4b35      	ldr	r3, [pc, #212]	@ (90002a24 <LTDC_MspInit+0x180>)
90002950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002954:	4a33      	ldr	r2, [pc, #204]	@ (90002a24 <LTDC_MspInit+0x180>)
90002956:	f043 0308 	orr.w	r3, r3, #8
9000295a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000295e:	4b31      	ldr	r3, [pc, #196]	@ (90002a24 <LTDC_MspInit+0x180>)
90002960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002964:	f003 0308 	and.w	r3, r3, #8
90002968:	60fb      	str	r3, [r7, #12]
9000296a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
9000296c:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002970:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002972:	2302      	movs	r3, #2
90002974:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002976:	2300      	movs	r3, #0
90002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000297a:	2302      	movs	r3, #2
9000297c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000297e:	230e      	movs	r3, #14
90002980:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002986:	4619      	mov	r1, r3
90002988:	4827      	ldr	r0, [pc, #156]	@ (90002a28 <LTDC_MspInit+0x184>)
9000298a:	f001 f841 	bl	90003a10 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
9000298e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002992:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002994:	230e      	movs	r3, #14
90002996:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000299c:	4619      	mov	r1, r3
9000299e:	4823      	ldr	r0, [pc, #140]	@ (90002a2c <LTDC_MspInit+0x188>)
900029a0:	f001 f836 	bl	90003a10 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900029a4:	23ff      	movs	r3, #255	@ 0xff
900029a6:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900029a8:	230e      	movs	r3, #14
900029aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
900029ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900029b0:	4619      	mov	r1, r3
900029b2:	481f      	ldr	r0, [pc, #124]	@ (90002a30 <LTDC_MspInit+0x18c>)
900029b4:	f001 f82c 	bl	90003a10 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
900029b8:	f240 2302 	movw	r3, #514	@ 0x202
900029bc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900029be:	2302      	movs	r3, #2
900029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900029c2:	2300      	movs	r3, #0
900029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900029c6:	2302      	movs	r3, #2
900029c8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900029ca:	230e      	movs	r3, #14
900029cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900029ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900029d2:	4619      	mov	r1, r3
900029d4:	4817      	ldr	r0, [pc, #92]	@ (90002a34 <LTDC_MspInit+0x190>)
900029d6:	f001 f81b 	bl	90003a10 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
900029da:	2380      	movs	r3, #128	@ 0x80
900029dc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900029de:	2301      	movs	r3, #1
900029e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900029e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900029e6:	4619      	mov	r1, r3
900029e8:	4813      	ldr	r0, [pc, #76]	@ (90002a38 <LTDC_MspInit+0x194>)
900029ea:	f001 f811 	bl	90003a10 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
900029ee:	2201      	movs	r2, #1
900029f0:	2180      	movs	r1, #128	@ 0x80
900029f2:	4811      	ldr	r0, [pc, #68]	@ (90002a38 <LTDC_MspInit+0x194>)
900029f4:	f001 f9d4 	bl	90003da0 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
900029f8:	4b0a      	ldr	r3, [pc, #40]	@ (90002a24 <LTDC_MspInit+0x180>)
900029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
900029fe:	4a09      	ldr	r2, [pc, #36]	@ (90002a24 <LTDC_MspInit+0x180>)
90002a00:	f043 0308 	orr.w	r3, r3, #8
90002a04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002a08:	4b06      	ldr	r3, [pc, #24]	@ (90002a24 <LTDC_MspInit+0x180>)
90002a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002a0e:	4a05      	ldr	r2, [pc, #20]	@ (90002a24 <LTDC_MspInit+0x180>)
90002a10:	f023 0308 	bic.w	r3, r3, #8
90002a14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002a18:	bf00      	nop
90002a1a:	3738      	adds	r7, #56	@ 0x38
90002a1c:	46bd      	mov	sp, r7
90002a1e:	bd80      	pop	{r7, pc}
90002a20:	50001000 	.word	0x50001000
90002a24:	58024400 	.word	0x58024400
90002a28:	58022000 	.word	0x58022000
90002a2c:	58022400 	.word	0x58022400
90002a30:	58022800 	.word	0x58022800
90002a34:	58021c00 	.word	0x58021c00
90002a38:	58020c00 	.word	0x58020c00

90002a3c <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002a3c:	b480      	push	{r7}
90002a3e:	b085      	sub	sp, #20
90002a40:	af00      	add	r7, sp, #0
90002a42:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002a44:	687b      	ldr	r3, [r7, #4]
90002a46:	681b      	ldr	r3, [r3, #0]
90002a48:	4a11      	ldr	r2, [pc, #68]	@ (90002a90 <DMA2D_MspInit+0x54>)
90002a4a:	4293      	cmp	r3, r2
90002a4c:	d11a      	bne.n	90002a84 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002a4e:	4b11      	ldr	r3, [pc, #68]	@ (90002a94 <DMA2D_MspInit+0x58>)
90002a50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a54:	4a0f      	ldr	r2, [pc, #60]	@ (90002a94 <DMA2D_MspInit+0x58>)
90002a56:	f043 0310 	orr.w	r3, r3, #16
90002a5a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (90002a94 <DMA2D_MspInit+0x58>)
90002a60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002a64:	f003 0310 	and.w	r3, r3, #16
90002a68:	60fb      	str	r3, [r7, #12]
90002a6a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002a6c:	4b09      	ldr	r3, [pc, #36]	@ (90002a94 <DMA2D_MspInit+0x58>)
90002a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002a70:	4a08      	ldr	r2, [pc, #32]	@ (90002a94 <DMA2D_MspInit+0x58>)
90002a72:	f043 0310 	orr.w	r3, r3, #16
90002a76:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002a78:	4b06      	ldr	r3, [pc, #24]	@ (90002a94 <DMA2D_MspInit+0x58>)
90002a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002a7c:	4a05      	ldr	r2, [pc, #20]	@ (90002a94 <DMA2D_MspInit+0x58>)
90002a7e:	f023 0310 	bic.w	r3, r3, #16
90002a82:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002a84:	bf00      	nop
90002a86:	3714      	adds	r7, #20
90002a88:	46bd      	mov	sp, r7
90002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
90002a8e:	4770      	bx	lr
90002a90:	52001000 	.word	0x52001000
90002a94:	58024400 	.word	0x58024400

90002a98 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002a98:	b580      	push	{r7, lr}
90002a9a:	b08a      	sub	sp, #40	@ 0x28
90002a9c:	af00      	add	r7, sp, #0
90002a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002aa0:	4b18      	ldr	r3, [pc, #96]	@ (90002b04 <TIMx_PWM_MspInit+0x6c>)
90002aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002aa6:	4a17      	ldr	r2, [pc, #92]	@ (90002b04 <TIMx_PWM_MspInit+0x6c>)
90002aa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002ab0:	4b14      	ldr	r3, [pc, #80]	@ (90002b04 <TIMx_PWM_MspInit+0x6c>)
90002ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002aba:	613b      	str	r3, [r7, #16]
90002abc:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002abe:	4b11      	ldr	r3, [pc, #68]	@ (90002b04 <TIMx_PWM_MspInit+0x6c>)
90002ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002ac4:	4a0f      	ldr	r2, [pc, #60]	@ (90002b04 <TIMx_PWM_MspInit+0x6c>)
90002ac6:	f043 0302 	orr.w	r3, r3, #2
90002aca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002ace:	4b0d      	ldr	r3, [pc, #52]	@ (90002b04 <TIMx_PWM_MspInit+0x6c>)
90002ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002ad4:	f003 0302 	and.w	r3, r3, #2
90002ad8:	60fb      	str	r3, [r7, #12]
90002ada:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002adc:	2302      	movs	r3, #2
90002ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002ae0:	2300      	movs	r3, #0
90002ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002ae4:	2301      	movs	r3, #1
90002ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002ae8:	2303      	movs	r3, #3
90002aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002aec:	2301      	movs	r3, #1
90002aee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002af0:	f107 0314 	add.w	r3, r7, #20
90002af4:	4619      	mov	r1, r3
90002af6:	4804      	ldr	r0, [pc, #16]	@ (90002b08 <TIMx_PWM_MspInit+0x70>)
90002af8:	f000 ff8a 	bl	90003a10 <HAL_GPIO_Init>
}
90002afc:	bf00      	nop
90002afe:	3728      	adds	r7, #40	@ 0x28
90002b00:	46bd      	mov	sp, r7
90002b02:	bd80      	pop	{r7, pc}
90002b04:	58024400 	.word	0x58024400
90002b08:	58022800 	.word	0x58022800

90002b0c <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002b0c:	b580      	push	{r7, lr}
90002b0e:	b082      	sub	sp, #8
90002b10:	af00      	add	r7, sp, #0
90002b12:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002b14:	687b      	ldr	r3, [r7, #4]
90002b16:	4a11      	ldr	r2, [pc, #68]	@ (90002b5c <TIMx_PWM_Init+0x50>)
90002b18:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002b1a:	6878      	ldr	r0, [r7, #4]
90002b1c:	f006 fe82 	bl	90009824 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002b20:	6878      	ldr	r0, [r7, #4]
90002b22:	f7ff ffb9 	bl	90002a98 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002b26:	687b      	ldr	r3, [r7, #4]
90002b28:	2204      	movs	r2, #4
90002b2a:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002b2c:	687b      	ldr	r3, [r7, #4]
90002b2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002b32:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002b34:	687b      	ldr	r3, [r7, #4]
90002b36:	2200      	movs	r2, #0
90002b38:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002b3a:	687b      	ldr	r3, [r7, #4]
90002b3c:	2200      	movs	r2, #0
90002b3e:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002b40:	687b      	ldr	r3, [r7, #4]
90002b42:	2200      	movs	r2, #0
90002b44:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002b46:	687b      	ldr	r3, [r7, #4]
90002b48:	2200      	movs	r2, #0
90002b4a:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002b4c:	6878      	ldr	r0, [r7, #4]
90002b4e:	f006 fe12 	bl	90009776 <HAL_TIM_PWM_Init>
}
90002b52:	bf00      	nop
90002b54:	3708      	adds	r7, #8
90002b56:	46bd      	mov	sp, r7
90002b58:	bd80      	pop	{r7, pc}
90002b5a:	bf00      	nop
90002b5c:	40010400 	.word	0x40010400

90002b60 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002b60:	b580      	push	{r7, lr}
90002b62:	b084      	sub	sp, #16
90002b64:	af00      	add	r7, sp, #0
90002b66:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002b68:	2300      	movs	r3, #0
90002b6a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002b6c:	687b      	ldr	r3, [r7, #4]
90002b6e:	2b00      	cmp	r3, #0
90002b70:	d003      	beq.n	90002b7a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002b72:	f06f 0301 	mvn.w	r3, #1
90002b76:	60fb      	str	r3, [r7, #12]
90002b78:	e044      	b.n	90002c04 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002b7a:	687b      	ldr	r3, [r7, #4]
90002b7c:	2234      	movs	r2, #52	@ 0x34
90002b7e:	fb02 f303 	mul.w	r3, r2, r3
90002b82:	4a23      	ldr	r2, [pc, #140]	@ (90002c10 <BSP_SDRAM_Init+0xb0>)
90002b84:	4413      	add	r3, r2
90002b86:	4618      	mov	r0, r3
90002b88:	f000 f892 	bl	90002cb0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002b8c:	687b      	ldr	r3, [r7, #4]
90002b8e:	2234      	movs	r2, #52	@ 0x34
90002b90:	fb02 f303 	mul.w	r3, r2, r3
90002b94:	4a1e      	ldr	r2, [pc, #120]	@ (90002c10 <BSP_SDRAM_Init+0xb0>)
90002b96:	4413      	add	r3, r2
90002b98:	2210      	movs	r2, #16
90002b9a:	2104      	movs	r1, #4
90002b9c:	4618      	mov	r0, r3
90002b9e:	f000 f83b 	bl	90002c18 <MX_SDRAM_BANK2_Init>
90002ba2:	4603      	mov	r3, r0
90002ba4:	2b00      	cmp	r3, #0
90002ba6:	d003      	beq.n	90002bb0 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002ba8:	f04f 33ff 	mov.w	r3, #4294967295
90002bac:	60fb      	str	r3, [r7, #12]
90002bae:	e029      	b.n	90002c04 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002bb0:	4b18      	ldr	r3, [pc, #96]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bb2:	2208      	movs	r2, #8
90002bb4:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002bb6:	4b17      	ldr	r3, [pc, #92]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bb8:	2203      	movs	r2, #3
90002bba:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002bbc:	4b15      	ldr	r3, [pc, #84]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bbe:	f240 6203 	movw	r2, #1539	@ 0x603
90002bc2:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002bc4:	4b13      	ldr	r3, [pc, #76]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bc6:	2200      	movs	r2, #0
90002bc8:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002bca:	4b12      	ldr	r3, [pc, #72]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bcc:	2200      	movs	r2, #0
90002bce:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002bd0:	4b10      	ldr	r3, [pc, #64]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bd2:	2230      	movs	r2, #48	@ 0x30
90002bd4:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002bd6:	4b0f      	ldr	r3, [pc, #60]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bd8:	2200      	movs	r2, #0
90002bda:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002bdc:	4b0d      	ldr	r3, [pc, #52]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002be2:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002be4:	687b      	ldr	r3, [r7, #4]
90002be6:	2234      	movs	r2, #52	@ 0x34
90002be8:	fb02 f303 	mul.w	r3, r2, r3
90002bec:	4a08      	ldr	r2, [pc, #32]	@ (90002c10 <BSP_SDRAM_Init+0xb0>)
90002bee:	4413      	add	r3, r2
90002bf0:	4908      	ldr	r1, [pc, #32]	@ (90002c14 <BSP_SDRAM_Init+0xb4>)
90002bf2:	4618      	mov	r0, r3
90002bf4:	f7fe fbdf 	bl	900013b6 <MT48LC4M32B2_Init>
90002bf8:	4603      	mov	r3, r0
90002bfa:	2b00      	cmp	r3, #0
90002bfc:	d002      	beq.n	90002c04 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002bfe:	f06f 0304 	mvn.w	r3, #4
90002c02:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002c04:	68fb      	ldr	r3, [r7, #12]
}
90002c06:	4618      	mov	r0, r3
90002c08:	3710      	adds	r7, #16
90002c0a:	46bd      	mov	sp, r7
90002c0c:	bd80      	pop	{r7, pc}
90002c0e:	bf00      	nop
90002c10:	2000121c 	.word	0x2000121c
90002c14:	20001250 	.word	0x20001250

90002c18 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002c18:	b580      	push	{r7, lr}
90002c1a:	b08c      	sub	sp, #48	@ 0x30
90002c1c:	af00      	add	r7, sp, #0
90002c1e:	60f8      	str	r0, [r7, #12]
90002c20:	60b9      	str	r1, [r7, #8]
90002c22:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002c24:	4b20      	ldr	r3, [pc, #128]	@ (90002ca8 <MX_SDRAM_BANK2_Init+0x90>)
90002c26:	4a21      	ldr	r2, [pc, #132]	@ (90002cac <MX_SDRAM_BANK2_Init+0x94>)
90002c28:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002c2a:	68fb      	ldr	r3, [r7, #12]
90002c2c:	2201      	movs	r2, #1
90002c2e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002c30:	68fb      	ldr	r3, [r7, #12]
90002c32:	2200      	movs	r2, #0
90002c34:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002c36:	68fb      	ldr	r3, [r7, #12]
90002c38:	68ba      	ldr	r2, [r7, #8]
90002c3a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002c3c:	68fb      	ldr	r3, [r7, #12]
90002c3e:	687a      	ldr	r2, [r7, #4]
90002c40:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002c42:	4b19      	ldr	r3, [pc, #100]	@ (90002ca8 <MX_SDRAM_BANK2_Init+0x90>)
90002c44:	2240      	movs	r2, #64	@ 0x40
90002c46:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002c48:	68fb      	ldr	r3, [r7, #12]
90002c4a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002c4e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002c50:	68fb      	ldr	r3, [r7, #12]
90002c52:	2200      	movs	r2, #0
90002c54:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002c56:	68fb      	ldr	r3, [r7, #12]
90002c58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002c5c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002c5e:	68fb      	ldr	r3, [r7, #12]
90002c60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002c64:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002c66:	68fb      	ldr	r3, [r7, #12]
90002c68:	2200      	movs	r2, #0
90002c6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002c6c:	2302      	movs	r3, #2
90002c6e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002c70:	2307      	movs	r3, #7
90002c72:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002c74:	2304      	movs	r3, #4
90002c76:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002c78:	2307      	movs	r3, #7
90002c7a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002c7c:	2302      	movs	r3, #2
90002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002c80:	2302      	movs	r3, #2
90002c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002c84:	2302      	movs	r3, #2
90002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002c88:	f107 0314 	add.w	r3, r7, #20
90002c8c:	4619      	mov	r1, r3
90002c8e:	68f8      	ldr	r0, [r7, #12]
90002c90:	f006 fcce 	bl	90009630 <HAL_SDRAM_Init>
90002c94:	4603      	mov	r3, r0
90002c96:	2b00      	cmp	r3, #0
90002c98:	d001      	beq.n	90002c9e <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002c9a:	2301      	movs	r3, #1
90002c9c:	e000      	b.n	90002ca0 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002c9e:	2300      	movs	r3, #0
}
90002ca0:	4618      	mov	r0, r3
90002ca2:	3730      	adds	r7, #48	@ 0x30
90002ca4:	46bd      	mov	sp, r7
90002ca6:	bd80      	pop	{r7, pc}
90002ca8:	2000121c 	.word	0x2000121c
90002cac:	52004140 	.word	0x52004140

90002cb0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002cb0:	b580      	push	{r7, lr}
90002cb2:	b08e      	sub	sp, #56	@ 0x38
90002cb4:	af00      	add	r7, sp, #0
90002cb6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002cb8:	4b73      	ldr	r3, [pc, #460]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002cba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002cbe:	4a72      	ldr	r2, [pc, #456]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002cc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002cc4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002cc8:	4b6f      	ldr	r3, [pc, #444]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002cca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002cd2:	623b      	str	r3, [r7, #32]
90002cd4:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002cd6:	4b6c      	ldr	r3, [pc, #432]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002cd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002cdc:	4a6a      	ldr	r2, [pc, #424]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002cde:	f043 0301 	orr.w	r3, r3, #1
90002ce2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002ce6:	4b68      	ldr	r3, [pc, #416]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002ce8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002cec:	f003 0301 	and.w	r3, r3, #1
90002cf0:	61fb      	str	r3, [r7, #28]
90002cf2:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002cf4:	4b64      	ldr	r3, [pc, #400]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cfa:	4a63      	ldr	r2, [pc, #396]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002cfc:	f043 0308 	orr.w	r3, r3, #8
90002d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d04:	4b60      	ldr	r3, [pc, #384]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d0a:	f003 0308 	and.w	r3, r3, #8
90002d0e:	61bb      	str	r3, [r7, #24]
90002d10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002d12:	4b5d      	ldr	r3, [pc, #372]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d18:	4a5b      	ldr	r2, [pc, #364]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d1a:	f043 0310 	orr.w	r3, r3, #16
90002d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d22:	4b59      	ldr	r3, [pc, #356]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d28:	f003 0310 	and.w	r3, r3, #16
90002d2c:	617b      	str	r3, [r7, #20]
90002d2e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002d30:	4b55      	ldr	r3, [pc, #340]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d36:	4a54      	ldr	r2, [pc, #336]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d38:	f043 0320 	orr.w	r3, r3, #32
90002d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d40:	4b51      	ldr	r3, [pc, #324]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d46:	f003 0320 	and.w	r3, r3, #32
90002d4a:	613b      	str	r3, [r7, #16]
90002d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002d4e:	4b4e      	ldr	r3, [pc, #312]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d54:	4a4c      	ldr	r2, [pc, #304]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d5e:	4b4a      	ldr	r3, [pc, #296]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002d68:	60fb      	str	r3, [r7, #12]
90002d6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002d6c:	4b46      	ldr	r3, [pc, #280]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d72:	4a45      	ldr	r2, [pc, #276]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d7c:	4b42      	ldr	r3, [pc, #264]	@ (90002e88 <SDRAM_MspInit+0x1d8>)
90002d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002d86:	60bb      	str	r3, [r7, #8]
90002d88:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002d8a:	2302      	movs	r3, #2
90002d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002d8e:	2301      	movs	r3, #1
90002d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002d92:	2303      	movs	r3, #3
90002d94:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002d96:	230c      	movs	r3, #12
90002d98:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002d9a:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002da4:	4619      	mov	r1, r3
90002da6:	4839      	ldr	r0, [pc, #228]	@ (90002e8c <SDRAM_MspInit+0x1dc>)
90002da8:	f000 fe32 	bl	90003a10 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002dac:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002db0:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002db6:	4619      	mov	r1, r3
90002db8:	4835      	ldr	r0, [pc, #212]	@ (90002e90 <SDRAM_MspInit+0x1e0>)
90002dba:	f000 fe29 	bl	90003a10 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002dbe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002dc8:	4619      	mov	r1, r3
90002dca:	4832      	ldr	r0, [pc, #200]	@ (90002e94 <SDRAM_MspInit+0x1e4>)
90002dcc:	f000 fe20 	bl	90003a10 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002dd0:	f248 1333 	movw	r3, #33075	@ 0x8133
90002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002dda:	4619      	mov	r1, r3
90002ddc:	482e      	ldr	r0, [pc, #184]	@ (90002e98 <SDRAM_MspInit+0x1e8>)
90002dde:	f000 fe17 	bl	90003a10 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002de2:	23e0      	movs	r3, #224	@ 0xe0
90002de4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002dea:	4619      	mov	r1, r3
90002dec:	482b      	ldr	r0, [pc, #172]	@ (90002e9c <SDRAM_MspInit+0x1ec>)
90002dee:	f000 fe0f 	bl	90003a10 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002df2:	4b2b      	ldr	r3, [pc, #172]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002df4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90002df8:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002dfa:	4b29      	ldr	r3, [pc, #164]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90002e00:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002e02:	4b27      	ldr	r3, [pc, #156]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e04:	2280      	movs	r2, #128	@ 0x80
90002e06:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002e08:	4b25      	ldr	r3, [pc, #148]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e0a:	2200      	movs	r2, #0
90002e0c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002e0e:	4b24      	ldr	r3, [pc, #144]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e10:	f240 2202 	movw	r2, #514	@ 0x202
90002e14:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002e16:	4b22      	ldr	r3, [pc, #136]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e18:	f640 0208 	movw	r2, #2056	@ 0x808
90002e1c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002e1e:	4b20      	ldr	r3, [pc, #128]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e20:	2220      	movs	r2, #32
90002e22:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002e24:	4b1e      	ldr	r3, [pc, #120]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e26:	2280      	movs	r2, #128	@ 0x80
90002e28:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002e2a:	4b1d      	ldr	r3, [pc, #116]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90002e30:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002e32:	4b1b      	ldr	r3, [pc, #108]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e34:	2200      	movs	r2, #0
90002e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002e38:	4b19      	ldr	r3, [pc, #100]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e3a:	2200      	movs	r2, #0
90002e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002e3e:	4b18      	ldr	r3, [pc, #96]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e40:	2280      	movs	r2, #128	@ 0x80
90002e42:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002e44:	4b16      	ldr	r3, [pc, #88]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e46:	2200      	movs	r2, #0
90002e48:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002e4a:	4b15      	ldr	r3, [pc, #84]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e4c:	2200      	movs	r2, #0
90002e4e:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002e50:	4b13      	ldr	r3, [pc, #76]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e52:	4a14      	ldr	r2, [pc, #80]	@ (90002ea4 <SDRAM_MspInit+0x1f4>)
90002e54:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002e56:	4b14      	ldr	r3, [pc, #80]	@ (90002ea8 <SDRAM_MspInit+0x1f8>)
90002e58:	4a11      	ldr	r2, [pc, #68]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e5a:	631a      	str	r2, [r3, #48]	@ 0x30
90002e5c:	4b10      	ldr	r3, [pc, #64]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e5e:	4a12      	ldr	r2, [pc, #72]	@ (90002ea8 <SDRAM_MspInit+0x1f8>)
90002e60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002e62:	480f      	ldr	r0, [pc, #60]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e64:	f003 fce2 	bl	9000682c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002e68:	480d      	ldr	r0, [pc, #52]	@ (90002ea0 <SDRAM_MspInit+0x1f0>)
90002e6a:	f003 fc93 	bl	90006794 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002e6e:	2200      	movs	r2, #0
90002e70:	210f      	movs	r1, #15
90002e72:	207a      	movs	r0, #122	@ 0x7a
90002e74:	f000 fa49 	bl	9000330a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002e78:	207a      	movs	r0, #122	@ 0x7a
90002e7a:	f000 fa60 	bl	9000333e <HAL_NVIC_EnableIRQ>
}
90002e7e:	bf00      	nop
90002e80:	3738      	adds	r7, #56	@ 0x38
90002e82:	46bd      	mov	sp, r7
90002e84:	bd80      	pop	{r7, pc}
90002e86:	bf00      	nop
90002e88:	58024400 	.word	0x58024400
90002e8c:	58020c00 	.word	0x58020c00
90002e90:	58021000 	.word	0x58021000
90002e94:	58021400 	.word	0x58021400
90002e98:	58021800 	.word	0x58021800
90002e9c:	58021c00 	.word	0x58021c00
90002ea0:	20001270 	.word	0x20001270
90002ea4:	52000040 	.word	0x52000040
90002ea8:	2000121c 	.word	0x2000121c

90002eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90002eac:	b480      	push	{r7}
90002eae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90002eb0:	4b29      	ldr	r3, [pc, #164]	@ (90002f58 <SystemInit+0xac>)
90002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90002eb6:	4a28      	ldr	r2, [pc, #160]	@ (90002f58 <SystemInit+0xac>)
90002eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90002ec0:	4b26      	ldr	r3, [pc, #152]	@ (90002f5c <SystemInit+0xb0>)
90002ec2:	681b      	ldr	r3, [r3, #0]
90002ec4:	4a25      	ldr	r2, [pc, #148]	@ (90002f5c <SystemInit+0xb0>)
90002ec6:	f043 0301 	orr.w	r3, r3, #1
90002eca:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90002ecc:	4b23      	ldr	r3, [pc, #140]	@ (90002f5c <SystemInit+0xb0>)
90002ece:	2200      	movs	r2, #0
90002ed0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90002ed2:	4b22      	ldr	r3, [pc, #136]	@ (90002f5c <SystemInit+0xb0>)
90002ed4:	681a      	ldr	r2, [r3, #0]
90002ed6:	4921      	ldr	r1, [pc, #132]	@ (90002f5c <SystemInit+0xb0>)
90002ed8:	4b21      	ldr	r3, [pc, #132]	@ (90002f60 <SystemInit+0xb4>)
90002eda:	4013      	ands	r3, r2
90002edc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90002ede:	4b1f      	ldr	r3, [pc, #124]	@ (90002f5c <SystemInit+0xb0>)
90002ee0:	2200      	movs	r2, #0
90002ee2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90002ee4:	4b1d      	ldr	r3, [pc, #116]	@ (90002f5c <SystemInit+0xb0>)
90002ee6:	2200      	movs	r2, #0
90002ee8:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90002eea:	4b1c      	ldr	r3, [pc, #112]	@ (90002f5c <SystemInit+0xb0>)
90002eec:	2200      	movs	r2, #0
90002eee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90002ef0:	4b1a      	ldr	r3, [pc, #104]	@ (90002f5c <SystemInit+0xb0>)
90002ef2:	2200      	movs	r2, #0
90002ef4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90002ef6:	4b19      	ldr	r3, [pc, #100]	@ (90002f5c <SystemInit+0xb0>)
90002ef8:	2200      	movs	r2, #0
90002efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90002efc:	4b17      	ldr	r3, [pc, #92]	@ (90002f5c <SystemInit+0xb0>)
90002efe:	2200      	movs	r2, #0
90002f00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90002f02:	4b16      	ldr	r3, [pc, #88]	@ (90002f5c <SystemInit+0xb0>)
90002f04:	2200      	movs	r2, #0
90002f06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90002f08:	4b14      	ldr	r3, [pc, #80]	@ (90002f5c <SystemInit+0xb0>)
90002f0a:	2200      	movs	r2, #0
90002f0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90002f0e:	4b13      	ldr	r3, [pc, #76]	@ (90002f5c <SystemInit+0xb0>)
90002f10:	2200      	movs	r2, #0
90002f12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90002f14:	4b11      	ldr	r3, [pc, #68]	@ (90002f5c <SystemInit+0xb0>)
90002f16:	2200      	movs	r2, #0
90002f18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90002f1a:	4b10      	ldr	r3, [pc, #64]	@ (90002f5c <SystemInit+0xb0>)
90002f1c:	2200      	movs	r2, #0
90002f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90002f20:	4b0e      	ldr	r3, [pc, #56]	@ (90002f5c <SystemInit+0xb0>)
90002f22:	681b      	ldr	r3, [r3, #0]
90002f24:	4a0d      	ldr	r2, [pc, #52]	@ (90002f5c <SystemInit+0xb0>)
90002f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90002f2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (90002f5c <SystemInit+0xb0>)
90002f2e:	2200      	movs	r2, #0
90002f30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90002f32:	4b0c      	ldr	r3, [pc, #48]	@ (90002f64 <SystemInit+0xb8>)
90002f34:	681a      	ldr	r2, [r3, #0]
90002f36:	4b0c      	ldr	r3, [pc, #48]	@ (90002f68 <SystemInit+0xbc>)
90002f38:	4013      	ands	r3, r2
90002f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90002f3e:	d202      	bcs.n	90002f46 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90002f40:	4b0a      	ldr	r3, [pc, #40]	@ (90002f6c <SystemInit+0xc0>)
90002f42:	2201      	movs	r2, #1
90002f44:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90002f46:	4b04      	ldr	r3, [pc, #16]	@ (90002f58 <SystemInit+0xac>)
90002f48:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90002f4c:	609a      	str	r2, [r3, #8]
#endif  


}
90002f4e:	bf00      	nop
90002f50:	46bd      	mov	sp, r7
90002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f56:	4770      	bx	lr
90002f58:	e000ed00 	.word	0xe000ed00
90002f5c:	58024400 	.word	0x58024400
90002f60:	eaf6ed7f 	.word	0xeaf6ed7f
90002f64:	5c001000 	.word	0x5c001000
90002f68:	ffff0000 	.word	0xffff0000
90002f6c:	51008108 	.word	0x51008108

90002f70 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90002f70:	b480      	push	{r7}
90002f72:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90002f74:	4b09      	ldr	r3, [pc, #36]	@ (90002f9c <ExitRun0Mode+0x2c>)
90002f76:	68db      	ldr	r3, [r3, #12]
90002f78:	4a08      	ldr	r2, [pc, #32]	@ (90002f9c <ExitRun0Mode+0x2c>)
90002f7a:	f043 0302 	orr.w	r3, r3, #2
90002f7e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90002f80:	bf00      	nop
90002f82:	4b06      	ldr	r3, [pc, #24]	@ (90002f9c <ExitRun0Mode+0x2c>)
90002f84:	685b      	ldr	r3, [r3, #4]
90002f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90002f8a:	2b00      	cmp	r3, #0
90002f8c:	d0f9      	beq.n	90002f82 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
90002f8e:	bf00      	nop
90002f90:	bf00      	nop
90002f92:	46bd      	mov	sp, r7
90002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f98:	4770      	bx	lr
90002f9a:	bf00      	nop
90002f9c:	58024800 	.word	0x58024800

90002fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90002fa0:	b580      	push	{r7, lr}
90002fa2:	b082      	sub	sp, #8
90002fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002fa6:	2003      	movs	r0, #3
90002fa8:	f000 f9a4 	bl	900032f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90002fac:	f004 fb3e 	bl	9000762c <HAL_RCC_GetSysClockFreq>
90002fb0:	4602      	mov	r2, r0
90002fb2:	4b15      	ldr	r3, [pc, #84]	@ (90003008 <HAL_Init+0x68>)
90002fb4:	699b      	ldr	r3, [r3, #24]
90002fb6:	0a1b      	lsrs	r3, r3, #8
90002fb8:	f003 030f 	and.w	r3, r3, #15
90002fbc:	4913      	ldr	r1, [pc, #76]	@ (9000300c <HAL_Init+0x6c>)
90002fbe:	5ccb      	ldrb	r3, [r1, r3]
90002fc0:	f003 031f 	and.w	r3, r3, #31
90002fc4:	fa22 f303 	lsr.w	r3, r2, r3
90002fc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90002fca:	4b0f      	ldr	r3, [pc, #60]	@ (90003008 <HAL_Init+0x68>)
90002fcc:	699b      	ldr	r3, [r3, #24]
90002fce:	f003 030f 	and.w	r3, r3, #15
90002fd2:	4a0e      	ldr	r2, [pc, #56]	@ (9000300c <HAL_Init+0x6c>)
90002fd4:	5cd3      	ldrb	r3, [r2, r3]
90002fd6:	f003 031f 	and.w	r3, r3, #31
90002fda:	687a      	ldr	r2, [r7, #4]
90002fdc:	fa22 f303 	lsr.w	r3, r2, r3
90002fe0:	4a0b      	ldr	r2, [pc, #44]	@ (90003010 <HAL_Init+0x70>)
90002fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90002fe4:	4a0b      	ldr	r2, [pc, #44]	@ (90003014 <HAL_Init+0x74>)
90002fe6:	687b      	ldr	r3, [r7, #4]
90002fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90002fea:	200f      	movs	r0, #15
90002fec:	f000 f81c 	bl	90003028 <HAL_InitTick>
90002ff0:	4603      	mov	r3, r0
90002ff2:	2b00      	cmp	r3, #0
90002ff4:	d001      	beq.n	90002ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90002ff6:	2301      	movs	r3, #1
90002ff8:	e002      	b.n	90003000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90002ffa:	f000 f80d 	bl	90003018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90002ffe:	2300      	movs	r3, #0
}
90003000:	4618      	mov	r0, r3
90003002:	3708      	adds	r7, #8
90003004:	46bd      	mov	sp, r7
90003006:	bd80      	pop	{r7, pc}
90003008:	58024400 	.word	0x58024400
9000300c:	9000cdac 	.word	0x9000cdac
90003010:	2000005c 	.word	0x2000005c
90003014:	20000058 	.word	0x20000058

90003018 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90003018:	b480      	push	{r7}
9000301a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
9000301c:	bf00      	nop
9000301e:	46bd      	mov	sp, r7
90003020:	f85d 7b04 	ldr.w	r7, [sp], #4
90003024:	4770      	bx	lr
	...

90003028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90003028:	b580      	push	{r7, lr}
9000302a:	b082      	sub	sp, #8
9000302c:	af00      	add	r7, sp, #0
9000302e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90003030:	4b15      	ldr	r3, [pc, #84]	@ (90003088 <HAL_InitTick+0x60>)
90003032:	781b      	ldrb	r3, [r3, #0]
90003034:	2b00      	cmp	r3, #0
90003036:	d101      	bne.n	9000303c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90003038:	2301      	movs	r3, #1
9000303a:	e021      	b.n	90003080 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
9000303c:	4b13      	ldr	r3, [pc, #76]	@ (9000308c <HAL_InitTick+0x64>)
9000303e:	681a      	ldr	r2, [r3, #0]
90003040:	4b11      	ldr	r3, [pc, #68]	@ (90003088 <HAL_InitTick+0x60>)
90003042:	781b      	ldrb	r3, [r3, #0]
90003044:	4619      	mov	r1, r3
90003046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000304a:	fbb3 f3f1 	udiv	r3, r3, r1
9000304e:	fbb2 f3f3 	udiv	r3, r2, r3
90003052:	4618      	mov	r0, r3
90003054:	f000 f981 	bl	9000335a <HAL_SYSTICK_Config>
90003058:	4603      	mov	r3, r0
9000305a:	2b00      	cmp	r3, #0
9000305c:	d001      	beq.n	90003062 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
9000305e:	2301      	movs	r3, #1
90003060:	e00e      	b.n	90003080 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90003062:	687b      	ldr	r3, [r7, #4]
90003064:	2b0f      	cmp	r3, #15
90003066:	d80a      	bhi.n	9000307e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90003068:	2200      	movs	r2, #0
9000306a:	6879      	ldr	r1, [r7, #4]
9000306c:	f04f 30ff 	mov.w	r0, #4294967295
90003070:	f000 f94b 	bl	9000330a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003074:	4a06      	ldr	r2, [pc, #24]	@ (90003090 <HAL_InitTick+0x68>)
90003076:	687b      	ldr	r3, [r7, #4]
90003078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000307a:	2300      	movs	r3, #0
9000307c:	e000      	b.n	90003080 <HAL_InitTick+0x58>
    return HAL_ERROR;
9000307e:	2301      	movs	r3, #1
}
90003080:	4618      	mov	r0, r3
90003082:	3708      	adds	r7, #8
90003084:	46bd      	mov	sp, r7
90003086:	bd80      	pop	{r7, pc}
90003088:	20000064 	.word	0x20000064
9000308c:	20000058 	.word	0x20000058
90003090:	20000060 	.word	0x20000060

90003094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003094:	b480      	push	{r7}
90003096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90003098:	4b06      	ldr	r3, [pc, #24]	@ (900030b4 <HAL_IncTick+0x20>)
9000309a:	781b      	ldrb	r3, [r3, #0]
9000309c:	461a      	mov	r2, r3
9000309e:	4b06      	ldr	r3, [pc, #24]	@ (900030b8 <HAL_IncTick+0x24>)
900030a0:	681b      	ldr	r3, [r3, #0]
900030a2:	4413      	add	r3, r2
900030a4:	4a04      	ldr	r2, [pc, #16]	@ (900030b8 <HAL_IncTick+0x24>)
900030a6:	6013      	str	r3, [r2, #0]
}
900030a8:	bf00      	nop
900030aa:	46bd      	mov	sp, r7
900030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900030b0:	4770      	bx	lr
900030b2:	bf00      	nop
900030b4:	20000064 	.word	0x20000064
900030b8:	200012dc 	.word	0x200012dc

900030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900030bc:	b480      	push	{r7}
900030be:	af00      	add	r7, sp, #0
  return uwTick;
900030c0:	4b03      	ldr	r3, [pc, #12]	@ (900030d0 <HAL_GetTick+0x14>)
900030c2:	681b      	ldr	r3, [r3, #0]
}
900030c4:	4618      	mov	r0, r3
900030c6:	46bd      	mov	sp, r7
900030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900030cc:	4770      	bx	lr
900030ce:	bf00      	nop
900030d0:	200012dc 	.word	0x200012dc

900030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900030d4:	b580      	push	{r7, lr}
900030d6:	b084      	sub	sp, #16
900030d8:	af00      	add	r7, sp, #0
900030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900030dc:	f7ff ffee 	bl	900030bc <HAL_GetTick>
900030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
900030e2:	687b      	ldr	r3, [r7, #4]
900030e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900030e6:	68fb      	ldr	r3, [r7, #12]
900030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
900030ec:	d005      	beq.n	900030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
900030ee:	4b0a      	ldr	r3, [pc, #40]	@ (90003118 <HAL_Delay+0x44>)
900030f0:	781b      	ldrb	r3, [r3, #0]
900030f2:	461a      	mov	r2, r3
900030f4:	68fb      	ldr	r3, [r7, #12]
900030f6:	4413      	add	r3, r2
900030f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
900030fa:	bf00      	nop
900030fc:	f7ff ffde 	bl	900030bc <HAL_GetTick>
90003100:	4602      	mov	r2, r0
90003102:	68bb      	ldr	r3, [r7, #8]
90003104:	1ad3      	subs	r3, r2, r3
90003106:	68fa      	ldr	r2, [r7, #12]
90003108:	429a      	cmp	r2, r3
9000310a:	d8f7      	bhi.n	900030fc <HAL_Delay+0x28>
  {
  }
}
9000310c:	bf00      	nop
9000310e:	bf00      	nop
90003110:	3710      	adds	r7, #16
90003112:	46bd      	mov	sp, r7
90003114:	bd80      	pop	{r7, pc}
90003116:	bf00      	nop
90003118:	20000064 	.word	0x20000064

9000311c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
9000311c:	b480      	push	{r7}
9000311e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003120:	4b03      	ldr	r3, [pc, #12]	@ (90003130 <HAL_GetREVID+0x14>)
90003122:	681b      	ldr	r3, [r3, #0]
90003124:	0c1b      	lsrs	r3, r3, #16
}
90003126:	4618      	mov	r0, r3
90003128:	46bd      	mov	sp, r7
9000312a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000312e:	4770      	bx	lr
90003130:	5c001000 	.word	0x5c001000

90003134 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90003134:	b480      	push	{r7}
90003136:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90003138:	4b05      	ldr	r3, [pc, #20]	@ (90003150 <HAL_EnableCompensationCell+0x1c>)
9000313a:	6a1b      	ldr	r3, [r3, #32]
9000313c:	4a04      	ldr	r2, [pc, #16]	@ (90003150 <HAL_EnableCompensationCell+0x1c>)
9000313e:	f043 0301 	orr.w	r3, r3, #1
90003142:	6213      	str	r3, [r2, #32]
}
90003144:	bf00      	nop
90003146:	46bd      	mov	sp, r7
90003148:	f85d 7b04 	ldr.w	r7, [sp], #4
9000314c:	4770      	bx	lr
9000314e:	bf00      	nop
90003150:	58000400 	.word	0x58000400

90003154 <__NVIC_SetPriorityGrouping>:
{
90003154:	b480      	push	{r7}
90003156:	b085      	sub	sp, #20
90003158:	af00      	add	r7, sp, #0
9000315a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
9000315c:	687b      	ldr	r3, [r7, #4]
9000315e:	f003 0307 	and.w	r3, r3, #7
90003162:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003164:	4b0b      	ldr	r3, [pc, #44]	@ (90003194 <__NVIC_SetPriorityGrouping+0x40>)
90003166:	68db      	ldr	r3, [r3, #12]
90003168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000316a:	68ba      	ldr	r2, [r7, #8]
9000316c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90003170:	4013      	ands	r3, r2
90003172:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003174:	68fb      	ldr	r3, [r7, #12]
90003176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90003178:	68bb      	ldr	r3, [r7, #8]
9000317a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
9000317c:	4b06      	ldr	r3, [pc, #24]	@ (90003198 <__NVIC_SetPriorityGrouping+0x44>)
9000317e:	4313      	orrs	r3, r2
90003180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90003182:	4a04      	ldr	r2, [pc, #16]	@ (90003194 <__NVIC_SetPriorityGrouping+0x40>)
90003184:	68bb      	ldr	r3, [r7, #8]
90003186:	60d3      	str	r3, [r2, #12]
}
90003188:	bf00      	nop
9000318a:	3714      	adds	r7, #20
9000318c:	46bd      	mov	sp, r7
9000318e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003192:	4770      	bx	lr
90003194:	e000ed00 	.word	0xe000ed00
90003198:	05fa0000 	.word	0x05fa0000

9000319c <__NVIC_GetPriorityGrouping>:
{
9000319c:	b480      	push	{r7}
9000319e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900031a0:	4b04      	ldr	r3, [pc, #16]	@ (900031b4 <__NVIC_GetPriorityGrouping+0x18>)
900031a2:	68db      	ldr	r3, [r3, #12]
900031a4:	0a1b      	lsrs	r3, r3, #8
900031a6:	f003 0307 	and.w	r3, r3, #7
}
900031aa:	4618      	mov	r0, r3
900031ac:	46bd      	mov	sp, r7
900031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900031b2:	4770      	bx	lr
900031b4:	e000ed00 	.word	0xe000ed00

900031b8 <__NVIC_EnableIRQ>:
{
900031b8:	b480      	push	{r7}
900031ba:	b083      	sub	sp, #12
900031bc:	af00      	add	r7, sp, #0
900031be:	4603      	mov	r3, r0
900031c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900031c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900031c6:	2b00      	cmp	r3, #0
900031c8:	db0b      	blt.n	900031e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900031ca:	88fb      	ldrh	r3, [r7, #6]
900031cc:	f003 021f 	and.w	r2, r3, #31
900031d0:	4907      	ldr	r1, [pc, #28]	@ (900031f0 <__NVIC_EnableIRQ+0x38>)
900031d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900031d6:	095b      	lsrs	r3, r3, #5
900031d8:	2001      	movs	r0, #1
900031da:	fa00 f202 	lsl.w	r2, r0, r2
900031de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900031e2:	bf00      	nop
900031e4:	370c      	adds	r7, #12
900031e6:	46bd      	mov	sp, r7
900031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
900031ec:	4770      	bx	lr
900031ee:	bf00      	nop
900031f0:	e000e100 	.word	0xe000e100

900031f4 <__NVIC_SetPriority>:
{
900031f4:	b480      	push	{r7}
900031f6:	b083      	sub	sp, #12
900031f8:	af00      	add	r7, sp, #0
900031fa:	4603      	mov	r3, r0
900031fc:	6039      	str	r1, [r7, #0]
900031fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003204:	2b00      	cmp	r3, #0
90003206:	db0a      	blt.n	9000321e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003208:	683b      	ldr	r3, [r7, #0]
9000320a:	b2da      	uxtb	r2, r3
9000320c:	490c      	ldr	r1, [pc, #48]	@ (90003240 <__NVIC_SetPriority+0x4c>)
9000320e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003212:	0112      	lsls	r2, r2, #4
90003214:	b2d2      	uxtb	r2, r2
90003216:	440b      	add	r3, r1
90003218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
9000321c:	e00a      	b.n	90003234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000321e:	683b      	ldr	r3, [r7, #0]
90003220:	b2da      	uxtb	r2, r3
90003222:	4908      	ldr	r1, [pc, #32]	@ (90003244 <__NVIC_SetPriority+0x50>)
90003224:	88fb      	ldrh	r3, [r7, #6]
90003226:	f003 030f 	and.w	r3, r3, #15
9000322a:	3b04      	subs	r3, #4
9000322c:	0112      	lsls	r2, r2, #4
9000322e:	b2d2      	uxtb	r2, r2
90003230:	440b      	add	r3, r1
90003232:	761a      	strb	r2, [r3, #24]
}
90003234:	bf00      	nop
90003236:	370c      	adds	r7, #12
90003238:	46bd      	mov	sp, r7
9000323a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000323e:	4770      	bx	lr
90003240:	e000e100 	.word	0xe000e100
90003244:	e000ed00 	.word	0xe000ed00

90003248 <NVIC_EncodePriority>:
{
90003248:	b480      	push	{r7}
9000324a:	b089      	sub	sp, #36	@ 0x24
9000324c:	af00      	add	r7, sp, #0
9000324e:	60f8      	str	r0, [r7, #12]
90003250:	60b9      	str	r1, [r7, #8]
90003252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003254:	68fb      	ldr	r3, [r7, #12]
90003256:	f003 0307 	and.w	r3, r3, #7
9000325a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000325c:	69fb      	ldr	r3, [r7, #28]
9000325e:	f1c3 0307 	rsb	r3, r3, #7
90003262:	2b04      	cmp	r3, #4
90003264:	bf28      	it	cs
90003266:	2304      	movcs	r3, #4
90003268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000326a:	69fb      	ldr	r3, [r7, #28]
9000326c:	3304      	adds	r3, #4
9000326e:	2b06      	cmp	r3, #6
90003270:	d902      	bls.n	90003278 <NVIC_EncodePriority+0x30>
90003272:	69fb      	ldr	r3, [r7, #28]
90003274:	3b03      	subs	r3, #3
90003276:	e000      	b.n	9000327a <NVIC_EncodePriority+0x32>
90003278:	2300      	movs	r3, #0
9000327a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000327c:	f04f 32ff 	mov.w	r2, #4294967295
90003280:	69bb      	ldr	r3, [r7, #24]
90003282:	fa02 f303 	lsl.w	r3, r2, r3
90003286:	43da      	mvns	r2, r3
90003288:	68bb      	ldr	r3, [r7, #8]
9000328a:	401a      	ands	r2, r3
9000328c:	697b      	ldr	r3, [r7, #20]
9000328e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003290:	f04f 31ff 	mov.w	r1, #4294967295
90003294:	697b      	ldr	r3, [r7, #20]
90003296:	fa01 f303 	lsl.w	r3, r1, r3
9000329a:	43d9      	mvns	r1, r3
9000329c:	687b      	ldr	r3, [r7, #4]
9000329e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900032a0:	4313      	orrs	r3, r2
}
900032a2:	4618      	mov	r0, r3
900032a4:	3724      	adds	r7, #36	@ 0x24
900032a6:	46bd      	mov	sp, r7
900032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
900032ac:	4770      	bx	lr
	...

900032b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900032b0:	b580      	push	{r7, lr}
900032b2:	b082      	sub	sp, #8
900032b4:	af00      	add	r7, sp, #0
900032b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900032b8:	687b      	ldr	r3, [r7, #4]
900032ba:	3b01      	subs	r3, #1
900032bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
900032c0:	d301      	bcc.n	900032c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900032c2:	2301      	movs	r3, #1
900032c4:	e00f      	b.n	900032e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900032c6:	4a0a      	ldr	r2, [pc, #40]	@ (900032f0 <SysTick_Config+0x40>)
900032c8:	687b      	ldr	r3, [r7, #4]
900032ca:	3b01      	subs	r3, #1
900032cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900032ce:	210f      	movs	r1, #15
900032d0:	f04f 30ff 	mov.w	r0, #4294967295
900032d4:	f7ff ff8e 	bl	900031f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900032d8:	4b05      	ldr	r3, [pc, #20]	@ (900032f0 <SysTick_Config+0x40>)
900032da:	2200      	movs	r2, #0
900032dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900032de:	4b04      	ldr	r3, [pc, #16]	@ (900032f0 <SysTick_Config+0x40>)
900032e0:	2207      	movs	r2, #7
900032e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900032e4:	2300      	movs	r3, #0
}
900032e6:	4618      	mov	r0, r3
900032e8:	3708      	adds	r7, #8
900032ea:	46bd      	mov	sp, r7
900032ec:	bd80      	pop	{r7, pc}
900032ee:	bf00      	nop
900032f0:	e000e010 	.word	0xe000e010

900032f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900032f4:	b580      	push	{r7, lr}
900032f6:	b082      	sub	sp, #8
900032f8:	af00      	add	r7, sp, #0
900032fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
900032fc:	6878      	ldr	r0, [r7, #4]
900032fe:	f7ff ff29 	bl	90003154 <__NVIC_SetPriorityGrouping>
}
90003302:	bf00      	nop
90003304:	3708      	adds	r7, #8
90003306:	46bd      	mov	sp, r7
90003308:	bd80      	pop	{r7, pc}

9000330a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000330a:	b580      	push	{r7, lr}
9000330c:	b086      	sub	sp, #24
9000330e:	af00      	add	r7, sp, #0
90003310:	4603      	mov	r3, r0
90003312:	60b9      	str	r1, [r7, #8]
90003314:	607a      	str	r2, [r7, #4]
90003316:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003318:	f7ff ff40 	bl	9000319c <__NVIC_GetPriorityGrouping>
9000331c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
9000331e:	687a      	ldr	r2, [r7, #4]
90003320:	68b9      	ldr	r1, [r7, #8]
90003322:	6978      	ldr	r0, [r7, #20]
90003324:	f7ff ff90 	bl	90003248 <NVIC_EncodePriority>
90003328:	4602      	mov	r2, r0
9000332a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
9000332e:	4611      	mov	r1, r2
90003330:	4618      	mov	r0, r3
90003332:	f7ff ff5f 	bl	900031f4 <__NVIC_SetPriority>
}
90003336:	bf00      	nop
90003338:	3718      	adds	r7, #24
9000333a:	46bd      	mov	sp, r7
9000333c:	bd80      	pop	{r7, pc}

9000333e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
9000333e:	b580      	push	{r7, lr}
90003340:	b082      	sub	sp, #8
90003342:	af00      	add	r7, sp, #0
90003344:	4603      	mov	r3, r0
90003346:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90003348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000334c:	4618      	mov	r0, r3
9000334e:	f7ff ff33 	bl	900031b8 <__NVIC_EnableIRQ>
}
90003352:	bf00      	nop
90003354:	3708      	adds	r7, #8
90003356:	46bd      	mov	sp, r7
90003358:	bd80      	pop	{r7, pc}

9000335a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000335a:	b580      	push	{r7, lr}
9000335c:	b082      	sub	sp, #8
9000335e:	af00      	add	r7, sp, #0
90003360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90003362:	6878      	ldr	r0, [r7, #4]
90003364:	f7ff ffa4 	bl	900032b0 <SysTick_Config>
90003368:	4603      	mov	r3, r0
}
9000336a:	4618      	mov	r0, r3
9000336c:	3708      	adds	r7, #8
9000336e:	46bd      	mov	sp, r7
90003370:	bd80      	pop	{r7, pc}
	...

90003374 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003374:	b480      	push	{r7}
90003376:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90003378:	f3bf 8f5f 	dmb	sy
}
9000337c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
9000337e:	4b07      	ldr	r3, [pc, #28]	@ (9000339c <HAL_MPU_Disable+0x28>)
90003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003382:	4a06      	ldr	r2, [pc, #24]	@ (9000339c <HAL_MPU_Disable+0x28>)
90003384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90003388:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
9000338a:	4b05      	ldr	r3, [pc, #20]	@ (900033a0 <HAL_MPU_Disable+0x2c>)
9000338c:	2200      	movs	r2, #0
9000338e:	605a      	str	r2, [r3, #4]
}
90003390:	bf00      	nop
90003392:	46bd      	mov	sp, r7
90003394:	f85d 7b04 	ldr.w	r7, [sp], #4
90003398:	4770      	bx	lr
9000339a:	bf00      	nop
9000339c:	e000ed00 	.word	0xe000ed00
900033a0:	e000ed90 	.word	0xe000ed90

900033a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900033a4:	b480      	push	{r7}
900033a6:	b083      	sub	sp, #12
900033a8:	af00      	add	r7, sp, #0
900033aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900033ac:	4a0b      	ldr	r2, [pc, #44]	@ (900033dc <HAL_MPU_Enable+0x38>)
900033ae:	687b      	ldr	r3, [r7, #4]
900033b0:	f043 0301 	orr.w	r3, r3, #1
900033b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900033b6:	4b0a      	ldr	r3, [pc, #40]	@ (900033e0 <HAL_MPU_Enable+0x3c>)
900033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900033ba:	4a09      	ldr	r2, [pc, #36]	@ (900033e0 <HAL_MPU_Enable+0x3c>)
900033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900033c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900033c2:	f3bf 8f4f 	dsb	sy
}
900033c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900033c8:	f3bf 8f6f 	isb	sy
}
900033cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900033ce:	bf00      	nop
900033d0:	370c      	adds	r7, #12
900033d2:	46bd      	mov	sp, r7
900033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900033d8:	4770      	bx	lr
900033da:	bf00      	nop
900033dc:	e000ed90 	.word	0xe000ed90
900033e0:	e000ed00 	.word	0xe000ed00

900033e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
900033e4:	b480      	push	{r7}
900033e6:	b083      	sub	sp, #12
900033e8:	af00      	add	r7, sp, #0
900033ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900033ec:	687b      	ldr	r3, [r7, #4]
900033ee:	785a      	ldrb	r2, [r3, #1]
900033f0:	4b1b      	ldr	r3, [pc, #108]	@ (90003460 <HAL_MPU_ConfigRegion+0x7c>)
900033f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
900033f4:	4b1a      	ldr	r3, [pc, #104]	@ (90003460 <HAL_MPU_ConfigRegion+0x7c>)
900033f6:	691b      	ldr	r3, [r3, #16]
900033f8:	4a19      	ldr	r2, [pc, #100]	@ (90003460 <HAL_MPU_ConfigRegion+0x7c>)
900033fa:	f023 0301 	bic.w	r3, r3, #1
900033fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003400:	4a17      	ldr	r2, [pc, #92]	@ (90003460 <HAL_MPU_ConfigRegion+0x7c>)
90003402:	687b      	ldr	r3, [r7, #4]
90003404:	685b      	ldr	r3, [r3, #4]
90003406:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003408:	687b      	ldr	r3, [r7, #4]
9000340a:	7b1b      	ldrb	r3, [r3, #12]
9000340c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000340e:	687b      	ldr	r3, [r7, #4]
90003410:	7adb      	ldrb	r3, [r3, #11]
90003412:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003414:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003416:	687b      	ldr	r3, [r7, #4]
90003418:	7a9b      	ldrb	r3, [r3, #10]
9000341a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000341c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000341e:	687b      	ldr	r3, [r7, #4]
90003420:	7b5b      	ldrb	r3, [r3, #13]
90003422:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003424:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003426:	687b      	ldr	r3, [r7, #4]
90003428:	7b9b      	ldrb	r3, [r3, #14]
9000342a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000342c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000342e:	687b      	ldr	r3, [r7, #4]
90003430:	7bdb      	ldrb	r3, [r3, #15]
90003432:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003434:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003436:	687b      	ldr	r3, [r7, #4]
90003438:	7a5b      	ldrb	r3, [r3, #9]
9000343a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000343c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000343e:	687b      	ldr	r3, [r7, #4]
90003440:	7a1b      	ldrb	r3, [r3, #8]
90003442:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003444:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90003446:	687a      	ldr	r2, [r7, #4]
90003448:	7812      	ldrb	r2, [r2, #0]
9000344a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000344c:	4a04      	ldr	r2, [pc, #16]	@ (90003460 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000344e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003450:	6113      	str	r3, [r2, #16]
}
90003452:	bf00      	nop
90003454:	370c      	adds	r7, #12
90003456:	46bd      	mov	sp, r7
90003458:	f85d 7b04 	ldr.w	r7, [sp], #4
9000345c:	4770      	bx	lr
9000345e:	bf00      	nop
90003460:	e000ed90 	.word	0xe000ed90

90003464 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003464:	b580      	push	{r7, lr}
90003466:	b082      	sub	sp, #8
90003468:	af00      	add	r7, sp, #0
9000346a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
9000346c:	687b      	ldr	r3, [r7, #4]
9000346e:	2b00      	cmp	r3, #0
90003470:	d101      	bne.n	90003476 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90003472:	2301      	movs	r3, #1
90003474:	e04f      	b.n	90003516 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90003476:	687b      	ldr	r3, [r7, #4]
90003478:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
9000347c:	b2db      	uxtb	r3, r3
9000347e:	2b00      	cmp	r3, #0
90003480:	d106      	bne.n	90003490 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90003482:	687b      	ldr	r3, [r7, #4]
90003484:	2200      	movs	r2, #0
90003486:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
9000348a:	6878      	ldr	r0, [r7, #4]
9000348c:	f000 f84e 	bl	9000352c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003490:	687b      	ldr	r3, [r7, #4]
90003492:	2202      	movs	r2, #2
90003494:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90003498:	687b      	ldr	r3, [r7, #4]
9000349a:	681b      	ldr	r3, [r3, #0]
9000349c:	681a      	ldr	r2, [r3, #0]
9000349e:	4b20      	ldr	r3, [pc, #128]	@ (90003520 <HAL_DMA2D_Init+0xbc>)
900034a0:	4013      	ands	r3, r2
900034a2:	687a      	ldr	r2, [r7, #4]
900034a4:	6851      	ldr	r1, [r2, #4]
900034a6:	687a      	ldr	r2, [r7, #4]
900034a8:	69d2      	ldr	r2, [r2, #28]
900034aa:	4311      	orrs	r1, r2
900034ac:	687a      	ldr	r2, [r7, #4]
900034ae:	6812      	ldr	r2, [r2, #0]
900034b0:	430b      	orrs	r3, r1
900034b2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900034b4:	687b      	ldr	r3, [r7, #4]
900034b6:	681b      	ldr	r3, [r3, #0]
900034b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900034ba:	4b1a      	ldr	r3, [pc, #104]	@ (90003524 <HAL_DMA2D_Init+0xc0>)
900034bc:	4013      	ands	r3, r2
900034be:	687a      	ldr	r2, [r7, #4]
900034c0:	6891      	ldr	r1, [r2, #8]
900034c2:	687a      	ldr	r2, [r7, #4]
900034c4:	6992      	ldr	r2, [r2, #24]
900034c6:	4311      	orrs	r1, r2
900034c8:	687a      	ldr	r2, [r7, #4]
900034ca:	6812      	ldr	r2, [r2, #0]
900034cc:	430b      	orrs	r3, r1
900034ce:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900034d0:	687b      	ldr	r3, [r7, #4]
900034d2:	681b      	ldr	r3, [r3, #0]
900034d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
900034d6:	4b14      	ldr	r3, [pc, #80]	@ (90003528 <HAL_DMA2D_Init+0xc4>)
900034d8:	4013      	ands	r3, r2
900034da:	687a      	ldr	r2, [r7, #4]
900034dc:	68d1      	ldr	r1, [r2, #12]
900034de:	687a      	ldr	r2, [r7, #4]
900034e0:	6812      	ldr	r2, [r2, #0]
900034e2:	430b      	orrs	r3, r1
900034e4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
900034e6:	687b      	ldr	r3, [r7, #4]
900034e8:	681b      	ldr	r3, [r3, #0]
900034ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900034ec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900034f0:	687b      	ldr	r3, [r7, #4]
900034f2:	691b      	ldr	r3, [r3, #16]
900034f4:	051a      	lsls	r2, r3, #20
900034f6:	687b      	ldr	r3, [r7, #4]
900034f8:	695b      	ldr	r3, [r3, #20]
900034fa:	055b      	lsls	r3, r3, #21
900034fc:	431a      	orrs	r2, r3
900034fe:	687b      	ldr	r3, [r7, #4]
90003500:	681b      	ldr	r3, [r3, #0]
90003502:	430a      	orrs	r2, r1
90003504:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003506:	687b      	ldr	r3, [r7, #4]
90003508:	2200      	movs	r2, #0
9000350a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000350c:	687b      	ldr	r3, [r7, #4]
9000350e:	2201      	movs	r2, #1
90003510:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003514:	2300      	movs	r3, #0
}
90003516:	4618      	mov	r0, r3
90003518:	3708      	adds	r7, #8
9000351a:	46bd      	mov	sp, r7
9000351c:	bd80      	pop	{r7, pc}
9000351e:	bf00      	nop
90003520:	fff8ffbf 	.word	0xfff8ffbf
90003524:	fffffef8 	.word	0xfffffef8
90003528:	ffff0000 	.word	0xffff0000

9000352c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
9000352c:	b480      	push	{r7}
9000352e:	b083      	sub	sp, #12
90003530:	af00      	add	r7, sp, #0
90003532:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003534:	bf00      	nop
90003536:	370c      	adds	r7, #12
90003538:	46bd      	mov	sp, r7
9000353a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000353e:	4770      	bx	lr

90003540 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003540:	b580      	push	{r7, lr}
90003542:	b086      	sub	sp, #24
90003544:	af02      	add	r7, sp, #8
90003546:	60f8      	str	r0, [r7, #12]
90003548:	60b9      	str	r1, [r7, #8]
9000354a:	607a      	str	r2, [r7, #4]
9000354c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000354e:	68fb      	ldr	r3, [r7, #12]
90003550:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003554:	2b01      	cmp	r3, #1
90003556:	d101      	bne.n	9000355c <HAL_DMA2D_Start+0x1c>
90003558:	2302      	movs	r3, #2
9000355a:	e018      	b.n	9000358e <HAL_DMA2D_Start+0x4e>
9000355c:	68fb      	ldr	r3, [r7, #12]
9000355e:	2201      	movs	r2, #1
90003560:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003564:	68fb      	ldr	r3, [r7, #12]
90003566:	2202      	movs	r2, #2
90003568:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
9000356c:	69bb      	ldr	r3, [r7, #24]
9000356e:	9300      	str	r3, [sp, #0]
90003570:	683b      	ldr	r3, [r7, #0]
90003572:	687a      	ldr	r2, [r7, #4]
90003574:	68b9      	ldr	r1, [r7, #8]
90003576:	68f8      	ldr	r0, [r7, #12]
90003578:	f000 f9a4 	bl	900038c4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
9000357c:	68fb      	ldr	r3, [r7, #12]
9000357e:	681b      	ldr	r3, [r3, #0]
90003580:	681a      	ldr	r2, [r3, #0]
90003582:	68fb      	ldr	r3, [r7, #12]
90003584:	681b      	ldr	r3, [r3, #0]
90003586:	f042 0201 	orr.w	r2, r2, #1
9000358a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
9000358c:	2300      	movs	r3, #0
}
9000358e:	4618      	mov	r0, r3
90003590:	3710      	adds	r7, #16
90003592:	46bd      	mov	sp, r7
90003594:	bd80      	pop	{r7, pc}

90003596 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90003596:	b580      	push	{r7, lr}
90003598:	b086      	sub	sp, #24
9000359a:	af00      	add	r7, sp, #0
9000359c:	6078      	str	r0, [r7, #4]
9000359e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900035a0:	2300      	movs	r3, #0
900035a2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900035a4:	687b      	ldr	r3, [r7, #4]
900035a6:	681b      	ldr	r3, [r3, #0]
900035a8:	681b      	ldr	r3, [r3, #0]
900035aa:	f003 0301 	and.w	r3, r3, #1
900035ae:	2b00      	cmp	r3, #0
900035b0:	d056      	beq.n	90003660 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900035b2:	f7ff fd83 	bl	900030bc <HAL_GetTick>
900035b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900035b8:	e04b      	b.n	90003652 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900035ba:	687b      	ldr	r3, [r7, #4]
900035bc:	681b      	ldr	r3, [r3, #0]
900035be:	685b      	ldr	r3, [r3, #4]
900035c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900035c2:	68fb      	ldr	r3, [r7, #12]
900035c4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
900035c8:	2b00      	cmp	r3, #0
900035ca:	d023      	beq.n	90003614 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900035cc:	68fb      	ldr	r3, [r7, #12]
900035ce:	f003 0320 	and.w	r3, r3, #32
900035d2:	2b00      	cmp	r3, #0
900035d4:	d005      	beq.n	900035e2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900035d6:	687b      	ldr	r3, [r7, #4]
900035d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900035da:	f043 0202 	orr.w	r2, r3, #2
900035de:	687b      	ldr	r3, [r7, #4]
900035e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900035e2:	68fb      	ldr	r3, [r7, #12]
900035e4:	f003 0301 	and.w	r3, r3, #1
900035e8:	2b00      	cmp	r3, #0
900035ea:	d005      	beq.n	900035f8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900035ec:	687b      	ldr	r3, [r7, #4]
900035ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900035f0:	f043 0201 	orr.w	r2, r3, #1
900035f4:	687b      	ldr	r3, [r7, #4]
900035f6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900035f8:	687b      	ldr	r3, [r7, #4]
900035fa:	681b      	ldr	r3, [r3, #0]
900035fc:	2221      	movs	r2, #33	@ 0x21
900035fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003600:	687b      	ldr	r3, [r7, #4]
90003602:	2204      	movs	r2, #4
90003604:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003608:	687b      	ldr	r3, [r7, #4]
9000360a:	2200      	movs	r2, #0
9000360c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003610:	2301      	movs	r3, #1
90003612:	e0a5      	b.n	90003760 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003614:	683b      	ldr	r3, [r7, #0]
90003616:	f1b3 3fff 	cmp.w	r3, #4294967295
9000361a:	d01a      	beq.n	90003652 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000361c:	f7ff fd4e 	bl	900030bc <HAL_GetTick>
90003620:	4602      	mov	r2, r0
90003622:	697b      	ldr	r3, [r7, #20]
90003624:	1ad3      	subs	r3, r2, r3
90003626:	683a      	ldr	r2, [r7, #0]
90003628:	429a      	cmp	r2, r3
9000362a:	d302      	bcc.n	90003632 <HAL_DMA2D_PollForTransfer+0x9c>
9000362c:	683b      	ldr	r3, [r7, #0]
9000362e:	2b00      	cmp	r3, #0
90003630:	d10f      	bne.n	90003652 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003632:	687b      	ldr	r3, [r7, #4]
90003634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003636:	f043 0220 	orr.w	r2, r3, #32
9000363a:	687b      	ldr	r3, [r7, #4]
9000363c:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000363e:	687b      	ldr	r3, [r7, #4]
90003640:	2203      	movs	r2, #3
90003642:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003646:	687b      	ldr	r3, [r7, #4]
90003648:	2200      	movs	r2, #0
9000364a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
9000364e:	2303      	movs	r3, #3
90003650:	e086      	b.n	90003760 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003652:	687b      	ldr	r3, [r7, #4]
90003654:	681b      	ldr	r3, [r3, #0]
90003656:	685b      	ldr	r3, [r3, #4]
90003658:	f003 0302 	and.w	r3, r3, #2
9000365c:	2b00      	cmp	r3, #0
9000365e:	d0ac      	beq.n	900035ba <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003660:	687b      	ldr	r3, [r7, #4]
90003662:	681b      	ldr	r3, [r3, #0]
90003664:	69db      	ldr	r3, [r3, #28]
90003666:	f003 0320 	and.w	r3, r3, #32
9000366a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
9000366c:	687b      	ldr	r3, [r7, #4]
9000366e:	681b      	ldr	r3, [r3, #0]
90003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003672:	f003 0320 	and.w	r3, r3, #32
90003676:	693a      	ldr	r2, [r7, #16]
90003678:	4313      	orrs	r3, r2
9000367a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
9000367c:	693b      	ldr	r3, [r7, #16]
9000367e:	2b00      	cmp	r3, #0
90003680:	d061      	beq.n	90003746 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003682:	f7ff fd1b 	bl	900030bc <HAL_GetTick>
90003686:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003688:	e056      	b.n	90003738 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000368a:	687b      	ldr	r3, [r7, #4]
9000368c:	681b      	ldr	r3, [r3, #0]
9000368e:	685b      	ldr	r3, [r3, #4]
90003690:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003692:	68fb      	ldr	r3, [r7, #12]
90003694:	f003 0329 	and.w	r3, r3, #41	@ 0x29
90003698:	2b00      	cmp	r3, #0
9000369a:	d02e      	beq.n	900036fa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
9000369c:	68fb      	ldr	r3, [r7, #12]
9000369e:	f003 0308 	and.w	r3, r3, #8
900036a2:	2b00      	cmp	r3, #0
900036a4:	d005      	beq.n	900036b2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900036a6:	687b      	ldr	r3, [r7, #4]
900036a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900036aa:	f043 0204 	orr.w	r2, r3, #4
900036ae:	687b      	ldr	r3, [r7, #4]
900036b0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900036b2:	68fb      	ldr	r3, [r7, #12]
900036b4:	f003 0320 	and.w	r3, r3, #32
900036b8:	2b00      	cmp	r3, #0
900036ba:	d005      	beq.n	900036c8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900036bc:	687b      	ldr	r3, [r7, #4]
900036be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900036c0:	f043 0202 	orr.w	r2, r3, #2
900036c4:	687b      	ldr	r3, [r7, #4]
900036c6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900036c8:	68fb      	ldr	r3, [r7, #12]
900036ca:	f003 0301 	and.w	r3, r3, #1
900036ce:	2b00      	cmp	r3, #0
900036d0:	d005      	beq.n	900036de <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900036d2:	687b      	ldr	r3, [r7, #4]
900036d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900036d6:	f043 0201 	orr.w	r2, r3, #1
900036da:	687b      	ldr	r3, [r7, #4]
900036dc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900036de:	687b      	ldr	r3, [r7, #4]
900036e0:	681b      	ldr	r3, [r3, #0]
900036e2:	2229      	movs	r2, #41	@ 0x29
900036e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900036e6:	687b      	ldr	r3, [r7, #4]
900036e8:	2204      	movs	r2, #4
900036ea:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900036ee:	687b      	ldr	r3, [r7, #4]
900036f0:	2200      	movs	r2, #0
900036f2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
900036f6:	2301      	movs	r3, #1
900036f8:	e032      	b.n	90003760 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900036fa:	683b      	ldr	r3, [r7, #0]
900036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
90003700:	d01a      	beq.n	90003738 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003702:	f7ff fcdb 	bl	900030bc <HAL_GetTick>
90003706:	4602      	mov	r2, r0
90003708:	697b      	ldr	r3, [r7, #20]
9000370a:	1ad3      	subs	r3, r2, r3
9000370c:	683a      	ldr	r2, [r7, #0]
9000370e:	429a      	cmp	r2, r3
90003710:	d302      	bcc.n	90003718 <HAL_DMA2D_PollForTransfer+0x182>
90003712:	683b      	ldr	r3, [r7, #0]
90003714:	2b00      	cmp	r3, #0
90003716:	d10f      	bne.n	90003738 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003718:	687b      	ldr	r3, [r7, #4]
9000371a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000371c:	f043 0220 	orr.w	r2, r3, #32
90003720:	687b      	ldr	r3, [r7, #4]
90003722:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003724:	687b      	ldr	r3, [r7, #4]
90003726:	2203      	movs	r2, #3
90003728:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000372c:	687b      	ldr	r3, [r7, #4]
9000372e:	2200      	movs	r2, #0
90003730:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003734:	2303      	movs	r3, #3
90003736:	e013      	b.n	90003760 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003738:	687b      	ldr	r3, [r7, #4]
9000373a:	681b      	ldr	r3, [r3, #0]
9000373c:	685b      	ldr	r3, [r3, #4]
9000373e:	f003 0310 	and.w	r3, r3, #16
90003742:	2b00      	cmp	r3, #0
90003744:	d0a1      	beq.n	9000368a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003746:	687b      	ldr	r3, [r7, #4]
90003748:	681b      	ldr	r3, [r3, #0]
9000374a:	2212      	movs	r2, #18
9000374c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000374e:	687b      	ldr	r3, [r7, #4]
90003750:	2201      	movs	r2, #1
90003752:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003756:	687b      	ldr	r3, [r7, #4]
90003758:	2200      	movs	r2, #0
9000375a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
9000375e:	2300      	movs	r3, #0
}
90003760:	4618      	mov	r0, r3
90003762:	3718      	adds	r7, #24
90003764:	46bd      	mov	sp, r7
90003766:	bd80      	pop	{r7, pc}

90003768 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003768:	b480      	push	{r7}
9000376a:	b087      	sub	sp, #28
9000376c:	af00      	add	r7, sp, #0
9000376e:	6078      	str	r0, [r7, #4]
90003770:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003772:	687b      	ldr	r3, [r7, #4]
90003774:	685b      	ldr	r3, [r3, #4]
90003776:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
9000377a:	683b      	ldr	r3, [r7, #0]
9000377c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000377e:	687b      	ldr	r3, [r7, #4]
90003780:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003784:	2b01      	cmp	r3, #1
90003786:	d101      	bne.n	9000378c <HAL_DMA2D_ConfigLayer+0x24>
90003788:	2302      	movs	r3, #2
9000378a:	e092      	b.n	900038b2 <HAL_DMA2D_ConfigLayer+0x14a>
9000378c:	687b      	ldr	r3, [r7, #4]
9000378e:	2201      	movs	r2, #1
90003790:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003794:	687b      	ldr	r3, [r7, #4]
90003796:	2202      	movs	r2, #2
90003798:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
9000379c:	683a      	ldr	r2, [r7, #0]
9000379e:	4613      	mov	r3, r2
900037a0:	00db      	lsls	r3, r3, #3
900037a2:	1a9b      	subs	r3, r3, r2
900037a4:	009b      	lsls	r3, r3, #2
900037a6:	3328      	adds	r3, #40	@ 0x28
900037a8:	687a      	ldr	r2, [r7, #4]
900037aa:	4413      	add	r3, r2
900037ac:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900037ae:	68fb      	ldr	r3, [r7, #12]
900037b0:	685a      	ldr	r2, [r3, #4]
900037b2:	68fb      	ldr	r3, [r7, #12]
900037b4:	689b      	ldr	r3, [r3, #8]
900037b6:	041b      	lsls	r3, r3, #16
900037b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900037ba:	68fb      	ldr	r3, [r7, #12]
900037bc:	691b      	ldr	r3, [r3, #16]
900037be:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900037c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900037c2:	68fb      	ldr	r3, [r7, #12]
900037c4:	695b      	ldr	r3, [r3, #20]
900037c6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900037c8:	4313      	orrs	r3, r2
900037ca:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
900037cc:	4b3c      	ldr	r3, [pc, #240]	@ (900038c0 <HAL_DMA2D_ConfigLayer+0x158>)
900037ce:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900037d0:	68fb      	ldr	r3, [r7, #12]
900037d2:	685b      	ldr	r3, [r3, #4]
900037d4:	2b0a      	cmp	r3, #10
900037d6:	d003      	beq.n	900037e0 <HAL_DMA2D_ConfigLayer+0x78>
900037d8:	68fb      	ldr	r3, [r7, #12]
900037da:	685b      	ldr	r3, [r3, #4]
900037dc:	2b09      	cmp	r3, #9
900037de:	d107      	bne.n	900037f0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900037e0:	68fb      	ldr	r3, [r7, #12]
900037e2:	68db      	ldr	r3, [r3, #12]
900037e4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
900037e8:	693a      	ldr	r2, [r7, #16]
900037ea:	4313      	orrs	r3, r2
900037ec:	613b      	str	r3, [r7, #16]
900037ee:	e005      	b.n	900037fc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900037f0:	68fb      	ldr	r3, [r7, #12]
900037f2:	68db      	ldr	r3, [r3, #12]
900037f4:	061b      	lsls	r3, r3, #24
900037f6:	693a      	ldr	r2, [r7, #16]
900037f8:	4313      	orrs	r3, r2
900037fa:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
900037fc:	683b      	ldr	r3, [r7, #0]
900037fe:	2b00      	cmp	r3, #0
90003800:	d120      	bne.n	90003844 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003802:	687b      	ldr	r3, [r7, #4]
90003804:	681b      	ldr	r3, [r3, #0]
90003806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003808:	697b      	ldr	r3, [r7, #20]
9000380a:	43db      	mvns	r3, r3
9000380c:	ea02 0103 	and.w	r1, r2, r3
90003810:	687b      	ldr	r3, [r7, #4]
90003812:	681b      	ldr	r3, [r3, #0]
90003814:	693a      	ldr	r2, [r7, #16]
90003816:	430a      	orrs	r2, r1
90003818:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000381a:	687b      	ldr	r3, [r7, #4]
9000381c:	681b      	ldr	r3, [r3, #0]
9000381e:	68fa      	ldr	r2, [r7, #12]
90003820:	6812      	ldr	r2, [r2, #0]
90003822:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003824:	68fb      	ldr	r3, [r7, #12]
90003826:	685b      	ldr	r3, [r3, #4]
90003828:	2b0a      	cmp	r3, #10
9000382a:	d003      	beq.n	90003834 <HAL_DMA2D_ConfigLayer+0xcc>
9000382c:	68fb      	ldr	r3, [r7, #12]
9000382e:	685b      	ldr	r3, [r3, #4]
90003830:	2b09      	cmp	r3, #9
90003832:	d135      	bne.n	900038a0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003834:	68fb      	ldr	r3, [r7, #12]
90003836:	68da      	ldr	r2, [r3, #12]
90003838:	687b      	ldr	r3, [r7, #4]
9000383a:	681b      	ldr	r3, [r3, #0]
9000383c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003840:	629a      	str	r2, [r3, #40]	@ 0x28
90003842:	e02d      	b.n	900038a0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003844:	68fb      	ldr	r3, [r7, #12]
90003846:	685b      	ldr	r3, [r3, #4]
90003848:	2b0b      	cmp	r3, #11
9000384a:	d109      	bne.n	90003860 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
9000384c:	68fb      	ldr	r3, [r7, #12]
9000384e:	699b      	ldr	r3, [r3, #24]
90003850:	049b      	lsls	r3, r3, #18
90003852:	693a      	ldr	r2, [r7, #16]
90003854:	4313      	orrs	r3, r2
90003856:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003858:	697b      	ldr	r3, [r7, #20]
9000385a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
9000385e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003860:	687b      	ldr	r3, [r7, #4]
90003862:	681b      	ldr	r3, [r3, #0]
90003864:	69da      	ldr	r2, [r3, #28]
90003866:	697b      	ldr	r3, [r7, #20]
90003868:	43db      	mvns	r3, r3
9000386a:	ea02 0103 	and.w	r1, r2, r3
9000386e:	687b      	ldr	r3, [r7, #4]
90003870:	681b      	ldr	r3, [r3, #0]
90003872:	693a      	ldr	r2, [r7, #16]
90003874:	430a      	orrs	r2, r1
90003876:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003878:	687b      	ldr	r3, [r7, #4]
9000387a:	681b      	ldr	r3, [r3, #0]
9000387c:	68fa      	ldr	r2, [r7, #12]
9000387e:	6812      	ldr	r2, [r2, #0]
90003880:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003882:	68fb      	ldr	r3, [r7, #12]
90003884:	685b      	ldr	r3, [r3, #4]
90003886:	2b0a      	cmp	r3, #10
90003888:	d003      	beq.n	90003892 <HAL_DMA2D_ConfigLayer+0x12a>
9000388a:	68fb      	ldr	r3, [r7, #12]
9000388c:	685b      	ldr	r3, [r3, #4]
9000388e:	2b09      	cmp	r3, #9
90003890:	d106      	bne.n	900038a0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003892:	68fb      	ldr	r3, [r7, #12]
90003894:	68da      	ldr	r2, [r3, #12]
90003896:	687b      	ldr	r3, [r7, #4]
90003898:	681b      	ldr	r3, [r3, #0]
9000389a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
9000389e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900038a0:	687b      	ldr	r3, [r7, #4]
900038a2:	2201      	movs	r2, #1
900038a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900038a8:	687b      	ldr	r3, [r7, #4]
900038aa:	2200      	movs	r2, #0
900038ac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900038b0:	2300      	movs	r3, #0
}
900038b2:	4618      	mov	r0, r3
900038b4:	371c      	adds	r7, #28
900038b6:	46bd      	mov	sp, r7
900038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900038bc:	4770      	bx	lr
900038be:	bf00      	nop
900038c0:	ff33000f 	.word	0xff33000f

900038c4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
900038c4:	b480      	push	{r7}
900038c6:	b08b      	sub	sp, #44	@ 0x2c
900038c8:	af00      	add	r7, sp, #0
900038ca:	60f8      	str	r0, [r7, #12]
900038cc:	60b9      	str	r1, [r7, #8]
900038ce:	607a      	str	r2, [r7, #4]
900038d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
900038d2:	68fb      	ldr	r3, [r7, #12]
900038d4:	681b      	ldr	r3, [r3, #0]
900038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900038d8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
900038dc:	683b      	ldr	r3, [r7, #0]
900038de:	041a      	lsls	r2, r3, #16
900038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900038e2:	431a      	orrs	r2, r3
900038e4:	68fb      	ldr	r3, [r7, #12]
900038e6:	681b      	ldr	r3, [r3, #0]
900038e8:	430a      	orrs	r2, r1
900038ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
900038ec:	68fb      	ldr	r3, [r7, #12]
900038ee:	681b      	ldr	r3, [r3, #0]
900038f0:	687a      	ldr	r2, [r7, #4]
900038f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
900038f4:	68fb      	ldr	r3, [r7, #12]
900038f6:	685b      	ldr	r3, [r3, #4]
900038f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
900038fc:	d174      	bne.n	900039e8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
900038fe:	68bb      	ldr	r3, [r7, #8]
90003900:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003904:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003906:	68bb      	ldr	r3, [r7, #8]
90003908:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000390c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
9000390e:	68bb      	ldr	r3, [r7, #8]
90003910:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003914:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003916:	68bb      	ldr	r3, [r7, #8]
90003918:	b2db      	uxtb	r3, r3
9000391a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
9000391c:	68fb      	ldr	r3, [r7, #12]
9000391e:	689b      	ldr	r3, [r3, #8]
90003920:	2b00      	cmp	r3, #0
90003922:	d108      	bne.n	90003936 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003924:	69ba      	ldr	r2, [r7, #24]
90003926:	69fb      	ldr	r3, [r7, #28]
90003928:	431a      	orrs	r2, r3
9000392a:	6a3b      	ldr	r3, [r7, #32]
9000392c:	4313      	orrs	r3, r2
9000392e:	697a      	ldr	r2, [r7, #20]
90003930:	4313      	orrs	r3, r2
90003932:	627b      	str	r3, [r7, #36]	@ 0x24
90003934:	e053      	b.n	900039de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003936:	68fb      	ldr	r3, [r7, #12]
90003938:	689b      	ldr	r3, [r3, #8]
9000393a:	2b01      	cmp	r3, #1
9000393c:	d106      	bne.n	9000394c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
9000393e:	69ba      	ldr	r2, [r7, #24]
90003940:	69fb      	ldr	r3, [r7, #28]
90003942:	4313      	orrs	r3, r2
90003944:	697a      	ldr	r2, [r7, #20]
90003946:	4313      	orrs	r3, r2
90003948:	627b      	str	r3, [r7, #36]	@ 0x24
9000394a:	e048      	b.n	900039de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
9000394c:	68fb      	ldr	r3, [r7, #12]
9000394e:	689b      	ldr	r3, [r3, #8]
90003950:	2b02      	cmp	r3, #2
90003952:	d111      	bne.n	90003978 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003954:	69fb      	ldr	r3, [r7, #28]
90003956:	0cdb      	lsrs	r3, r3, #19
90003958:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
9000395a:	69bb      	ldr	r3, [r7, #24]
9000395c:	0a9b      	lsrs	r3, r3, #10
9000395e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003960:	697b      	ldr	r3, [r7, #20]
90003962:	08db      	lsrs	r3, r3, #3
90003964:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003966:	69bb      	ldr	r3, [r7, #24]
90003968:	015a      	lsls	r2, r3, #5
9000396a:	69fb      	ldr	r3, [r7, #28]
9000396c:	02db      	lsls	r3, r3, #11
9000396e:	4313      	orrs	r3, r2
90003970:	697a      	ldr	r2, [r7, #20]
90003972:	4313      	orrs	r3, r2
90003974:	627b      	str	r3, [r7, #36]	@ 0x24
90003976:	e032      	b.n	900039de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003978:	68fb      	ldr	r3, [r7, #12]
9000397a:	689b      	ldr	r3, [r3, #8]
9000397c:	2b03      	cmp	r3, #3
9000397e:	d117      	bne.n	900039b0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003980:	6a3b      	ldr	r3, [r7, #32]
90003982:	0fdb      	lsrs	r3, r3, #31
90003984:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003986:	69fb      	ldr	r3, [r7, #28]
90003988:	0cdb      	lsrs	r3, r3, #19
9000398a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
9000398c:	69bb      	ldr	r3, [r7, #24]
9000398e:	0adb      	lsrs	r3, r3, #11
90003990:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003992:	697b      	ldr	r3, [r7, #20]
90003994:	08db      	lsrs	r3, r3, #3
90003996:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003998:	69bb      	ldr	r3, [r7, #24]
9000399a:	015a      	lsls	r2, r3, #5
9000399c:	69fb      	ldr	r3, [r7, #28]
9000399e:	029b      	lsls	r3, r3, #10
900039a0:	431a      	orrs	r2, r3
900039a2:	6a3b      	ldr	r3, [r7, #32]
900039a4:	03db      	lsls	r3, r3, #15
900039a6:	4313      	orrs	r3, r2
900039a8:	697a      	ldr	r2, [r7, #20]
900039aa:	4313      	orrs	r3, r2
900039ac:	627b      	str	r3, [r7, #36]	@ 0x24
900039ae:	e016      	b.n	900039de <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
900039b0:	6a3b      	ldr	r3, [r7, #32]
900039b2:	0f1b      	lsrs	r3, r3, #28
900039b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
900039b6:	69fb      	ldr	r3, [r7, #28]
900039b8:	0d1b      	lsrs	r3, r3, #20
900039ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
900039bc:	69bb      	ldr	r3, [r7, #24]
900039be:	0b1b      	lsrs	r3, r3, #12
900039c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
900039c2:	697b      	ldr	r3, [r7, #20]
900039c4:	091b      	lsrs	r3, r3, #4
900039c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900039c8:	69bb      	ldr	r3, [r7, #24]
900039ca:	011a      	lsls	r2, r3, #4
900039cc:	69fb      	ldr	r3, [r7, #28]
900039ce:	021b      	lsls	r3, r3, #8
900039d0:	431a      	orrs	r2, r3
900039d2:	6a3b      	ldr	r3, [r7, #32]
900039d4:	031b      	lsls	r3, r3, #12
900039d6:	4313      	orrs	r3, r2
900039d8:	697a      	ldr	r2, [r7, #20]
900039da:	4313      	orrs	r3, r2
900039dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
900039de:	68fb      	ldr	r3, [r7, #12]
900039e0:	681b      	ldr	r3, [r3, #0]
900039e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900039e4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
900039e6:	e00d      	b.n	90003a04 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
900039e8:	68fb      	ldr	r3, [r7, #12]
900039ea:	685b      	ldr	r3, [r3, #4]
900039ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900039f0:	d104      	bne.n	900039fc <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
900039f2:	68fb      	ldr	r3, [r7, #12]
900039f4:	681b      	ldr	r3, [r3, #0]
900039f6:	68ba      	ldr	r2, [r7, #8]
900039f8:	615a      	str	r2, [r3, #20]
}
900039fa:	e003      	b.n	90003a04 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
900039fc:	68fb      	ldr	r3, [r7, #12]
900039fe:	681b      	ldr	r3, [r3, #0]
90003a00:	68ba      	ldr	r2, [r7, #8]
90003a02:	60da      	str	r2, [r3, #12]
}
90003a04:	bf00      	nop
90003a06:	372c      	adds	r7, #44	@ 0x2c
90003a08:	46bd      	mov	sp, r7
90003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a0e:	4770      	bx	lr

90003a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003a10:	b480      	push	{r7}
90003a12:	b089      	sub	sp, #36	@ 0x24
90003a14:	af00      	add	r7, sp, #0
90003a16:	6078      	str	r0, [r7, #4]
90003a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003a1a:	2300      	movs	r3, #0
90003a1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003a1e:	4b89      	ldr	r3, [pc, #548]	@ (90003c44 <HAL_GPIO_Init+0x234>)
90003a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003a22:	e194      	b.n	90003d4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003a24:	683b      	ldr	r3, [r7, #0]
90003a26:	681a      	ldr	r2, [r3, #0]
90003a28:	2101      	movs	r1, #1
90003a2a:	69fb      	ldr	r3, [r7, #28]
90003a2c:	fa01 f303 	lsl.w	r3, r1, r3
90003a30:	4013      	ands	r3, r2
90003a32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003a34:	693b      	ldr	r3, [r7, #16]
90003a36:	2b00      	cmp	r3, #0
90003a38:	f000 8186 	beq.w	90003d48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003a3c:	683b      	ldr	r3, [r7, #0]
90003a3e:	685b      	ldr	r3, [r3, #4]
90003a40:	f003 0303 	and.w	r3, r3, #3
90003a44:	2b01      	cmp	r3, #1
90003a46:	d005      	beq.n	90003a54 <HAL_GPIO_Init+0x44>
90003a48:	683b      	ldr	r3, [r7, #0]
90003a4a:	685b      	ldr	r3, [r3, #4]
90003a4c:	f003 0303 	and.w	r3, r3, #3
90003a50:	2b02      	cmp	r3, #2
90003a52:	d130      	bne.n	90003ab6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003a54:	687b      	ldr	r3, [r7, #4]
90003a56:	689b      	ldr	r3, [r3, #8]
90003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003a5a:	69fb      	ldr	r3, [r7, #28]
90003a5c:	005b      	lsls	r3, r3, #1
90003a5e:	2203      	movs	r2, #3
90003a60:	fa02 f303 	lsl.w	r3, r2, r3
90003a64:	43db      	mvns	r3, r3
90003a66:	69ba      	ldr	r2, [r7, #24]
90003a68:	4013      	ands	r3, r2
90003a6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003a6c:	683b      	ldr	r3, [r7, #0]
90003a6e:	68da      	ldr	r2, [r3, #12]
90003a70:	69fb      	ldr	r3, [r7, #28]
90003a72:	005b      	lsls	r3, r3, #1
90003a74:	fa02 f303 	lsl.w	r3, r2, r3
90003a78:	69ba      	ldr	r2, [r7, #24]
90003a7a:	4313      	orrs	r3, r2
90003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003a7e:	687b      	ldr	r3, [r7, #4]
90003a80:	69ba      	ldr	r2, [r7, #24]
90003a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003a84:	687b      	ldr	r3, [r7, #4]
90003a86:	685b      	ldr	r3, [r3, #4]
90003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003a8a:	2201      	movs	r2, #1
90003a8c:	69fb      	ldr	r3, [r7, #28]
90003a8e:	fa02 f303 	lsl.w	r3, r2, r3
90003a92:	43db      	mvns	r3, r3
90003a94:	69ba      	ldr	r2, [r7, #24]
90003a96:	4013      	ands	r3, r2
90003a98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003a9a:	683b      	ldr	r3, [r7, #0]
90003a9c:	685b      	ldr	r3, [r3, #4]
90003a9e:	091b      	lsrs	r3, r3, #4
90003aa0:	f003 0201 	and.w	r2, r3, #1
90003aa4:	69fb      	ldr	r3, [r7, #28]
90003aa6:	fa02 f303 	lsl.w	r3, r2, r3
90003aaa:	69ba      	ldr	r2, [r7, #24]
90003aac:	4313      	orrs	r3, r2
90003aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003ab0:	687b      	ldr	r3, [r7, #4]
90003ab2:	69ba      	ldr	r2, [r7, #24]
90003ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003ab6:	683b      	ldr	r3, [r7, #0]
90003ab8:	685b      	ldr	r3, [r3, #4]
90003aba:	f003 0303 	and.w	r3, r3, #3
90003abe:	2b03      	cmp	r3, #3
90003ac0:	d017      	beq.n	90003af2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003ac2:	687b      	ldr	r3, [r7, #4]
90003ac4:	68db      	ldr	r3, [r3, #12]
90003ac6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003ac8:	69fb      	ldr	r3, [r7, #28]
90003aca:	005b      	lsls	r3, r3, #1
90003acc:	2203      	movs	r2, #3
90003ace:	fa02 f303 	lsl.w	r3, r2, r3
90003ad2:	43db      	mvns	r3, r3
90003ad4:	69ba      	ldr	r2, [r7, #24]
90003ad6:	4013      	ands	r3, r2
90003ad8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003ada:	683b      	ldr	r3, [r7, #0]
90003adc:	689a      	ldr	r2, [r3, #8]
90003ade:	69fb      	ldr	r3, [r7, #28]
90003ae0:	005b      	lsls	r3, r3, #1
90003ae2:	fa02 f303 	lsl.w	r3, r2, r3
90003ae6:	69ba      	ldr	r2, [r7, #24]
90003ae8:	4313      	orrs	r3, r2
90003aea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003aec:	687b      	ldr	r3, [r7, #4]
90003aee:	69ba      	ldr	r2, [r7, #24]
90003af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003af2:	683b      	ldr	r3, [r7, #0]
90003af4:	685b      	ldr	r3, [r3, #4]
90003af6:	f003 0303 	and.w	r3, r3, #3
90003afa:	2b02      	cmp	r3, #2
90003afc:	d123      	bne.n	90003b46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003afe:	69fb      	ldr	r3, [r7, #28]
90003b00:	08da      	lsrs	r2, r3, #3
90003b02:	687b      	ldr	r3, [r7, #4]
90003b04:	3208      	adds	r2, #8
90003b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003b0c:	69fb      	ldr	r3, [r7, #28]
90003b0e:	f003 0307 	and.w	r3, r3, #7
90003b12:	009b      	lsls	r3, r3, #2
90003b14:	220f      	movs	r2, #15
90003b16:	fa02 f303 	lsl.w	r3, r2, r3
90003b1a:	43db      	mvns	r3, r3
90003b1c:	69ba      	ldr	r2, [r7, #24]
90003b1e:	4013      	ands	r3, r2
90003b20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003b22:	683b      	ldr	r3, [r7, #0]
90003b24:	691a      	ldr	r2, [r3, #16]
90003b26:	69fb      	ldr	r3, [r7, #28]
90003b28:	f003 0307 	and.w	r3, r3, #7
90003b2c:	009b      	lsls	r3, r3, #2
90003b2e:	fa02 f303 	lsl.w	r3, r2, r3
90003b32:	69ba      	ldr	r2, [r7, #24]
90003b34:	4313      	orrs	r3, r2
90003b36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003b38:	69fb      	ldr	r3, [r7, #28]
90003b3a:	08da      	lsrs	r2, r3, #3
90003b3c:	687b      	ldr	r3, [r7, #4]
90003b3e:	3208      	adds	r2, #8
90003b40:	69b9      	ldr	r1, [r7, #24]
90003b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003b46:	687b      	ldr	r3, [r7, #4]
90003b48:	681b      	ldr	r3, [r3, #0]
90003b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003b4c:	69fb      	ldr	r3, [r7, #28]
90003b4e:	005b      	lsls	r3, r3, #1
90003b50:	2203      	movs	r2, #3
90003b52:	fa02 f303 	lsl.w	r3, r2, r3
90003b56:	43db      	mvns	r3, r3
90003b58:	69ba      	ldr	r2, [r7, #24]
90003b5a:	4013      	ands	r3, r2
90003b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003b5e:	683b      	ldr	r3, [r7, #0]
90003b60:	685b      	ldr	r3, [r3, #4]
90003b62:	f003 0203 	and.w	r2, r3, #3
90003b66:	69fb      	ldr	r3, [r7, #28]
90003b68:	005b      	lsls	r3, r3, #1
90003b6a:	fa02 f303 	lsl.w	r3, r2, r3
90003b6e:	69ba      	ldr	r2, [r7, #24]
90003b70:	4313      	orrs	r3, r2
90003b72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003b74:	687b      	ldr	r3, [r7, #4]
90003b76:	69ba      	ldr	r2, [r7, #24]
90003b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003b7a:	683b      	ldr	r3, [r7, #0]
90003b7c:	685b      	ldr	r3, [r3, #4]
90003b7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003b82:	2b00      	cmp	r3, #0
90003b84:	f000 80e0 	beq.w	90003d48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003b88:	4b2f      	ldr	r3, [pc, #188]	@ (90003c48 <HAL_GPIO_Init+0x238>)
90003b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003b8e:	4a2e      	ldr	r2, [pc, #184]	@ (90003c48 <HAL_GPIO_Init+0x238>)
90003b90:	f043 0302 	orr.w	r3, r3, #2
90003b94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003b98:	4b2b      	ldr	r3, [pc, #172]	@ (90003c48 <HAL_GPIO_Init+0x238>)
90003b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003b9e:	f003 0302 	and.w	r3, r3, #2
90003ba2:	60fb      	str	r3, [r7, #12]
90003ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003ba6:	4a29      	ldr	r2, [pc, #164]	@ (90003c4c <HAL_GPIO_Init+0x23c>)
90003ba8:	69fb      	ldr	r3, [r7, #28]
90003baa:	089b      	lsrs	r3, r3, #2
90003bac:	3302      	adds	r3, #2
90003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003bb4:	69fb      	ldr	r3, [r7, #28]
90003bb6:	f003 0303 	and.w	r3, r3, #3
90003bba:	009b      	lsls	r3, r3, #2
90003bbc:	220f      	movs	r2, #15
90003bbe:	fa02 f303 	lsl.w	r3, r2, r3
90003bc2:	43db      	mvns	r3, r3
90003bc4:	69ba      	ldr	r2, [r7, #24]
90003bc6:	4013      	ands	r3, r2
90003bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003bca:	687b      	ldr	r3, [r7, #4]
90003bcc:	4a20      	ldr	r2, [pc, #128]	@ (90003c50 <HAL_GPIO_Init+0x240>)
90003bce:	4293      	cmp	r3, r2
90003bd0:	d052      	beq.n	90003c78 <HAL_GPIO_Init+0x268>
90003bd2:	687b      	ldr	r3, [r7, #4]
90003bd4:	4a1f      	ldr	r2, [pc, #124]	@ (90003c54 <HAL_GPIO_Init+0x244>)
90003bd6:	4293      	cmp	r3, r2
90003bd8:	d031      	beq.n	90003c3e <HAL_GPIO_Init+0x22e>
90003bda:	687b      	ldr	r3, [r7, #4]
90003bdc:	4a1e      	ldr	r2, [pc, #120]	@ (90003c58 <HAL_GPIO_Init+0x248>)
90003bde:	4293      	cmp	r3, r2
90003be0:	d02b      	beq.n	90003c3a <HAL_GPIO_Init+0x22a>
90003be2:	687b      	ldr	r3, [r7, #4]
90003be4:	4a1d      	ldr	r2, [pc, #116]	@ (90003c5c <HAL_GPIO_Init+0x24c>)
90003be6:	4293      	cmp	r3, r2
90003be8:	d025      	beq.n	90003c36 <HAL_GPIO_Init+0x226>
90003bea:	687b      	ldr	r3, [r7, #4]
90003bec:	4a1c      	ldr	r2, [pc, #112]	@ (90003c60 <HAL_GPIO_Init+0x250>)
90003bee:	4293      	cmp	r3, r2
90003bf0:	d01f      	beq.n	90003c32 <HAL_GPIO_Init+0x222>
90003bf2:	687b      	ldr	r3, [r7, #4]
90003bf4:	4a1b      	ldr	r2, [pc, #108]	@ (90003c64 <HAL_GPIO_Init+0x254>)
90003bf6:	4293      	cmp	r3, r2
90003bf8:	d019      	beq.n	90003c2e <HAL_GPIO_Init+0x21e>
90003bfa:	687b      	ldr	r3, [r7, #4]
90003bfc:	4a1a      	ldr	r2, [pc, #104]	@ (90003c68 <HAL_GPIO_Init+0x258>)
90003bfe:	4293      	cmp	r3, r2
90003c00:	d013      	beq.n	90003c2a <HAL_GPIO_Init+0x21a>
90003c02:	687b      	ldr	r3, [r7, #4]
90003c04:	4a19      	ldr	r2, [pc, #100]	@ (90003c6c <HAL_GPIO_Init+0x25c>)
90003c06:	4293      	cmp	r3, r2
90003c08:	d00d      	beq.n	90003c26 <HAL_GPIO_Init+0x216>
90003c0a:	687b      	ldr	r3, [r7, #4]
90003c0c:	4a18      	ldr	r2, [pc, #96]	@ (90003c70 <HAL_GPIO_Init+0x260>)
90003c0e:	4293      	cmp	r3, r2
90003c10:	d007      	beq.n	90003c22 <HAL_GPIO_Init+0x212>
90003c12:	687b      	ldr	r3, [r7, #4]
90003c14:	4a17      	ldr	r2, [pc, #92]	@ (90003c74 <HAL_GPIO_Init+0x264>)
90003c16:	4293      	cmp	r3, r2
90003c18:	d101      	bne.n	90003c1e <HAL_GPIO_Init+0x20e>
90003c1a:	2309      	movs	r3, #9
90003c1c:	e02d      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c1e:	230a      	movs	r3, #10
90003c20:	e02b      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c22:	2308      	movs	r3, #8
90003c24:	e029      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c26:	2307      	movs	r3, #7
90003c28:	e027      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c2a:	2306      	movs	r3, #6
90003c2c:	e025      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c2e:	2305      	movs	r3, #5
90003c30:	e023      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c32:	2304      	movs	r3, #4
90003c34:	e021      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c36:	2303      	movs	r3, #3
90003c38:	e01f      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c3a:	2302      	movs	r3, #2
90003c3c:	e01d      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c3e:	2301      	movs	r3, #1
90003c40:	e01b      	b.n	90003c7a <HAL_GPIO_Init+0x26a>
90003c42:	bf00      	nop
90003c44:	58000080 	.word	0x58000080
90003c48:	58024400 	.word	0x58024400
90003c4c:	58000400 	.word	0x58000400
90003c50:	58020000 	.word	0x58020000
90003c54:	58020400 	.word	0x58020400
90003c58:	58020800 	.word	0x58020800
90003c5c:	58020c00 	.word	0x58020c00
90003c60:	58021000 	.word	0x58021000
90003c64:	58021400 	.word	0x58021400
90003c68:	58021800 	.word	0x58021800
90003c6c:	58021c00 	.word	0x58021c00
90003c70:	58022000 	.word	0x58022000
90003c74:	58022400 	.word	0x58022400
90003c78:	2300      	movs	r3, #0
90003c7a:	69fa      	ldr	r2, [r7, #28]
90003c7c:	f002 0203 	and.w	r2, r2, #3
90003c80:	0092      	lsls	r2, r2, #2
90003c82:	4093      	lsls	r3, r2
90003c84:	69ba      	ldr	r2, [r7, #24]
90003c86:	4313      	orrs	r3, r2
90003c88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003c8a:	4938      	ldr	r1, [pc, #224]	@ (90003d6c <HAL_GPIO_Init+0x35c>)
90003c8c:	69fb      	ldr	r3, [r7, #28]
90003c8e:	089b      	lsrs	r3, r3, #2
90003c90:	3302      	adds	r3, #2
90003c92:	69ba      	ldr	r2, [r7, #24]
90003c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003c9c:	681b      	ldr	r3, [r3, #0]
90003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003ca0:	693b      	ldr	r3, [r7, #16]
90003ca2:	43db      	mvns	r3, r3
90003ca4:	69ba      	ldr	r2, [r7, #24]
90003ca6:	4013      	ands	r3, r2
90003ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003caa:	683b      	ldr	r3, [r7, #0]
90003cac:	685b      	ldr	r3, [r3, #4]
90003cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003cb2:	2b00      	cmp	r3, #0
90003cb4:	d003      	beq.n	90003cbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003cb6:	69ba      	ldr	r2, [r7, #24]
90003cb8:	693b      	ldr	r3, [r7, #16]
90003cba:	4313      	orrs	r3, r2
90003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003cc2:	69bb      	ldr	r3, [r7, #24]
90003cc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003cca:	685b      	ldr	r3, [r3, #4]
90003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003cce:	693b      	ldr	r3, [r7, #16]
90003cd0:	43db      	mvns	r3, r3
90003cd2:	69ba      	ldr	r2, [r7, #24]
90003cd4:	4013      	ands	r3, r2
90003cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003cd8:	683b      	ldr	r3, [r7, #0]
90003cda:	685b      	ldr	r3, [r3, #4]
90003cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003ce0:	2b00      	cmp	r3, #0
90003ce2:	d003      	beq.n	90003cec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003ce4:	69ba      	ldr	r2, [r7, #24]
90003ce6:	693b      	ldr	r3, [r7, #16]
90003ce8:	4313      	orrs	r3, r2
90003cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003cec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003cf0:	69bb      	ldr	r3, [r7, #24]
90003cf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003cf4:	697b      	ldr	r3, [r7, #20]
90003cf6:	685b      	ldr	r3, [r3, #4]
90003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003cfa:	693b      	ldr	r3, [r7, #16]
90003cfc:	43db      	mvns	r3, r3
90003cfe:	69ba      	ldr	r2, [r7, #24]
90003d00:	4013      	ands	r3, r2
90003d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003d04:	683b      	ldr	r3, [r7, #0]
90003d06:	685b      	ldr	r3, [r3, #4]
90003d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003d0c:	2b00      	cmp	r3, #0
90003d0e:	d003      	beq.n	90003d18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003d10:	69ba      	ldr	r2, [r7, #24]
90003d12:	693b      	ldr	r3, [r7, #16]
90003d14:	4313      	orrs	r3, r2
90003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003d18:	697b      	ldr	r3, [r7, #20]
90003d1a:	69ba      	ldr	r2, [r7, #24]
90003d1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003d1e:	697b      	ldr	r3, [r7, #20]
90003d20:	681b      	ldr	r3, [r3, #0]
90003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003d24:	693b      	ldr	r3, [r7, #16]
90003d26:	43db      	mvns	r3, r3
90003d28:	69ba      	ldr	r2, [r7, #24]
90003d2a:	4013      	ands	r3, r2
90003d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003d2e:	683b      	ldr	r3, [r7, #0]
90003d30:	685b      	ldr	r3, [r3, #4]
90003d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003d36:	2b00      	cmp	r3, #0
90003d38:	d003      	beq.n	90003d42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003d3a:	69ba      	ldr	r2, [r7, #24]
90003d3c:	693b      	ldr	r3, [r7, #16]
90003d3e:	4313      	orrs	r3, r2
90003d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003d42:	697b      	ldr	r3, [r7, #20]
90003d44:	69ba      	ldr	r2, [r7, #24]
90003d46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003d48:	69fb      	ldr	r3, [r7, #28]
90003d4a:	3301      	adds	r3, #1
90003d4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003d4e:	683b      	ldr	r3, [r7, #0]
90003d50:	681a      	ldr	r2, [r3, #0]
90003d52:	69fb      	ldr	r3, [r7, #28]
90003d54:	fa22 f303 	lsr.w	r3, r2, r3
90003d58:	2b00      	cmp	r3, #0
90003d5a:	f47f ae63 	bne.w	90003a24 <HAL_GPIO_Init+0x14>
  }
}
90003d5e:	bf00      	nop
90003d60:	bf00      	nop
90003d62:	3724      	adds	r7, #36	@ 0x24
90003d64:	46bd      	mov	sp, r7
90003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d6a:	4770      	bx	lr
90003d6c:	58000400 	.word	0x58000400

90003d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90003d70:	b480      	push	{r7}
90003d72:	b085      	sub	sp, #20
90003d74:	af00      	add	r7, sp, #0
90003d76:	6078      	str	r0, [r7, #4]
90003d78:	460b      	mov	r3, r1
90003d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90003d7c:	687b      	ldr	r3, [r7, #4]
90003d7e:	691a      	ldr	r2, [r3, #16]
90003d80:	887b      	ldrh	r3, [r7, #2]
90003d82:	4013      	ands	r3, r2
90003d84:	2b00      	cmp	r3, #0
90003d86:	d002      	beq.n	90003d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90003d88:	2301      	movs	r3, #1
90003d8a:	73fb      	strb	r3, [r7, #15]
90003d8c:	e001      	b.n	90003d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90003d8e:	2300      	movs	r3, #0
90003d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90003d92:	7bfb      	ldrb	r3, [r7, #15]
}
90003d94:	4618      	mov	r0, r3
90003d96:	3714      	adds	r7, #20
90003d98:	46bd      	mov	sp, r7
90003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d9e:	4770      	bx	lr

90003da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003da0:	b480      	push	{r7}
90003da2:	b083      	sub	sp, #12
90003da4:	af00      	add	r7, sp, #0
90003da6:	6078      	str	r0, [r7, #4]
90003da8:	460b      	mov	r3, r1
90003daa:	807b      	strh	r3, [r7, #2]
90003dac:	4613      	mov	r3, r2
90003dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003db0:	787b      	ldrb	r3, [r7, #1]
90003db2:	2b00      	cmp	r3, #0
90003db4:	d003      	beq.n	90003dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003db6:	887a      	ldrh	r2, [r7, #2]
90003db8:	687b      	ldr	r3, [r7, #4]
90003dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003dbc:	e003      	b.n	90003dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003dbe:	887b      	ldrh	r3, [r7, #2]
90003dc0:	041a      	lsls	r2, r3, #16
90003dc2:	687b      	ldr	r3, [r7, #4]
90003dc4:	619a      	str	r2, [r3, #24]
}
90003dc6:	bf00      	nop
90003dc8:	370c      	adds	r7, #12
90003dca:	46bd      	mov	sp, r7
90003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
90003dd0:	4770      	bx	lr

90003dd2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003dd2:	b580      	push	{r7, lr}
90003dd4:	b086      	sub	sp, #24
90003dd6:	af00      	add	r7, sp, #0
90003dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003dda:	687b      	ldr	r3, [r7, #4]
90003ddc:	681b      	ldr	r3, [r3, #0]
90003dde:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003de0:	693b      	ldr	r3, [r7, #16]
90003de2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003de4:	687b      	ldr	r3, [r7, #4]
90003de6:	681b      	ldr	r3, [r3, #0]
90003de8:	4618      	mov	r0, r3
90003dea:	f007 f9a5 	bl	9000b138 <USB_GetMode>
90003dee:	4603      	mov	r3, r0
90003df0:	2b01      	cmp	r3, #1
90003df2:	f040 80fb 	bne.w	90003fec <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90003df6:	687b      	ldr	r3, [r7, #4]
90003df8:	681b      	ldr	r3, [r3, #0]
90003dfa:	4618      	mov	r0, r3
90003dfc:	f007 f968 	bl	9000b0d0 <USB_ReadInterrupts>
90003e00:	4603      	mov	r3, r0
90003e02:	2b00      	cmp	r3, #0
90003e04:	f000 80f1 	beq.w	90003fea <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003e08:	687b      	ldr	r3, [r7, #4]
90003e0a:	681b      	ldr	r3, [r3, #0]
90003e0c:	4618      	mov	r0, r3
90003e0e:	f007 f95f 	bl	9000b0d0 <USB_ReadInterrupts>
90003e12:	4603      	mov	r3, r0
90003e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003e18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90003e1c:	d104      	bne.n	90003e28 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003e1e:	687b      	ldr	r3, [r7, #4]
90003e20:	681b      	ldr	r3, [r3, #0]
90003e22:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90003e26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003e28:	687b      	ldr	r3, [r7, #4]
90003e2a:	681b      	ldr	r3, [r3, #0]
90003e2c:	4618      	mov	r0, r3
90003e2e:	f007 f94f 	bl	9000b0d0 <USB_ReadInterrupts>
90003e32:	4603      	mov	r3, r0
90003e34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003e38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90003e3c:	d104      	bne.n	90003e48 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003e3e:	687b      	ldr	r3, [r7, #4]
90003e40:	681b      	ldr	r3, [r3, #0]
90003e42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90003e46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90003e48:	687b      	ldr	r3, [r7, #4]
90003e4a:	681b      	ldr	r3, [r3, #0]
90003e4c:	4618      	mov	r0, r3
90003e4e:	f007 f93f 	bl	9000b0d0 <USB_ReadInterrupts>
90003e52:	4603      	mov	r3, r0
90003e54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90003e58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90003e5c:	d104      	bne.n	90003e68 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003e5e:	687b      	ldr	r3, [r7, #4]
90003e60:	681b      	ldr	r3, [r3, #0]
90003e62:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90003e66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003e68:	687b      	ldr	r3, [r7, #4]
90003e6a:	681b      	ldr	r3, [r3, #0]
90003e6c:	4618      	mov	r0, r3
90003e6e:	f007 f92f 	bl	9000b0d0 <USB_ReadInterrupts>
90003e72:	4603      	mov	r3, r0
90003e74:	f003 0302 	and.w	r3, r3, #2
90003e78:	2b02      	cmp	r3, #2
90003e7a:	d103      	bne.n	90003e84 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90003e7c:	687b      	ldr	r3, [r7, #4]
90003e7e:	681b      	ldr	r3, [r3, #0]
90003e80:	2202      	movs	r2, #2
90003e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90003e84:	687b      	ldr	r3, [r7, #4]
90003e86:	681b      	ldr	r3, [r3, #0]
90003e88:	4618      	mov	r0, r3
90003e8a:	f007 f921 	bl	9000b0d0 <USB_ReadInterrupts>
90003e8e:	4603      	mov	r3, r0
90003e90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90003e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90003e98:	d120      	bne.n	90003edc <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
90003e9a:	687b      	ldr	r3, [r7, #4]
90003e9c:	681b      	ldr	r3, [r3, #0]
90003e9e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90003ea2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90003ea4:	68fb      	ldr	r3, [r7, #12]
90003ea6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90003eaa:	681b      	ldr	r3, [r3, #0]
90003eac:	f003 0301 	and.w	r3, r3, #1
90003eb0:	2b00      	cmp	r3, #0
90003eb2:	d113      	bne.n	90003edc <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90003eb4:	2110      	movs	r1, #16
90003eb6:	6938      	ldr	r0, [r7, #16]
90003eb8:	f007 f852 	bl	9000af60 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90003ebc:	6938      	ldr	r0, [r7, #16]
90003ebe:	f007 f881 	bl	9000afc4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90003ec2:	687b      	ldr	r3, [r7, #4]
90003ec4:	7a5b      	ldrb	r3, [r3, #9]
90003ec6:	2b02      	cmp	r3, #2
90003ec8:	d105      	bne.n	90003ed6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90003eca:	687b      	ldr	r3, [r7, #4]
90003ecc:	681b      	ldr	r3, [r3, #0]
90003ece:	2101      	movs	r1, #1
90003ed0:	4618      	mov	r0, r3
90003ed2:	f007 f93f 	bl	9000b154 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90003ed6:	6878      	ldr	r0, [r7, #4]
90003ed8:	f7fd f96c 	bl	900011b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90003edc:	687b      	ldr	r3, [r7, #4]
90003ede:	681b      	ldr	r3, [r3, #0]
90003ee0:	4618      	mov	r0, r3
90003ee2:	f007 f8f5 	bl	9000b0d0 <USB_ReadInterrupts>
90003ee6:	4603      	mov	r3, r0
90003ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90003eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003ef0:	d102      	bne.n	90003ef8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90003ef2:	6878      	ldr	r0, [r7, #4]
90003ef4:	f001 fca1 	bl	9000583a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90003ef8:	687b      	ldr	r3, [r7, #4]
90003efa:	681b      	ldr	r3, [r3, #0]
90003efc:	4618      	mov	r0, r3
90003efe:	f007 f8e7 	bl	9000b0d0 <USB_ReadInterrupts>
90003f02:	4603      	mov	r3, r0
90003f04:	f003 0308 	and.w	r3, r3, #8
90003f08:	2b08      	cmp	r3, #8
90003f0a:	d106      	bne.n	90003f1a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90003f0c:	6878      	ldr	r0, [r7, #4]
90003f0e:	f7fd f935 	bl	9000117c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90003f12:	687b      	ldr	r3, [r7, #4]
90003f14:	681b      	ldr	r3, [r3, #0]
90003f16:	2208      	movs	r2, #8
90003f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90003f1a:	687b      	ldr	r3, [r7, #4]
90003f1c:	681b      	ldr	r3, [r3, #0]
90003f1e:	4618      	mov	r0, r3
90003f20:	f007 f8d6 	bl	9000b0d0 <USB_ReadInterrupts>
90003f24:	4603      	mov	r3, r0
90003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90003f2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90003f2e:	d139      	bne.n	90003fa4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90003f30:	687b      	ldr	r3, [r7, #4]
90003f32:	681b      	ldr	r3, [r3, #0]
90003f34:	4618      	mov	r0, r3
90003f36:	f007 f94a 	bl	9000b1ce <USB_HC_ReadInterrupt>
90003f3a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003f3c:	2300      	movs	r3, #0
90003f3e:	617b      	str	r3, [r7, #20]
90003f40:	e025      	b.n	90003f8e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90003f42:	697b      	ldr	r3, [r7, #20]
90003f44:	f003 030f 	and.w	r3, r3, #15
90003f48:	68ba      	ldr	r2, [r7, #8]
90003f4a:	fa22 f303 	lsr.w	r3, r2, r3
90003f4e:	f003 0301 	and.w	r3, r3, #1
90003f52:	2b00      	cmp	r3, #0
90003f54:	d018      	beq.n	90003f88 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003f56:	697b      	ldr	r3, [r7, #20]
90003f58:	015a      	lsls	r2, r3, #5
90003f5a:	68fb      	ldr	r3, [r7, #12]
90003f5c:	4413      	add	r3, r2
90003f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90003f62:	681b      	ldr	r3, [r3, #0]
90003f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90003f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90003f6c:	d106      	bne.n	90003f7c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90003f6e:	697b      	ldr	r3, [r7, #20]
90003f70:	b2db      	uxtb	r3, r3
90003f72:	4619      	mov	r1, r3
90003f74:	6878      	ldr	r0, [r7, #4]
90003f76:	f000 f859 	bl	9000402c <HCD_HC_IN_IRQHandler>
90003f7a:	e005      	b.n	90003f88 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90003f7c:	697b      	ldr	r3, [r7, #20]
90003f7e:	b2db      	uxtb	r3, r3
90003f80:	4619      	mov	r1, r3
90003f82:	6878      	ldr	r0, [r7, #4]
90003f84:	f000 febb 	bl	90004cfe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003f88:	697b      	ldr	r3, [r7, #20]
90003f8a:	3301      	adds	r3, #1
90003f8c:	617b      	str	r3, [r7, #20]
90003f8e:	687b      	ldr	r3, [r7, #4]
90003f90:	795b      	ldrb	r3, [r3, #5]
90003f92:	461a      	mov	r2, r3
90003f94:	697b      	ldr	r3, [r7, #20]
90003f96:	4293      	cmp	r3, r2
90003f98:	d3d3      	bcc.n	90003f42 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
90003f9a:	687b      	ldr	r3, [r7, #4]
90003f9c:	681b      	ldr	r3, [r3, #0]
90003f9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90003fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90003fa4:	687b      	ldr	r3, [r7, #4]
90003fa6:	681b      	ldr	r3, [r3, #0]
90003fa8:	4618      	mov	r0, r3
90003faa:	f007 f891 	bl	9000b0d0 <USB_ReadInterrupts>
90003fae:	4603      	mov	r3, r0
90003fb0:	f003 0310 	and.w	r3, r3, #16
90003fb4:	2b10      	cmp	r3, #16
90003fb6:	d101      	bne.n	90003fbc <HAL_HCD_IRQHandler+0x1ea>
90003fb8:	2301      	movs	r3, #1
90003fba:	e000      	b.n	90003fbe <HAL_HCD_IRQHandler+0x1ec>
90003fbc:	2300      	movs	r3, #0
90003fbe:	2b00      	cmp	r3, #0
90003fc0:	d014      	beq.n	90003fec <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003fc2:	687b      	ldr	r3, [r7, #4]
90003fc4:	681b      	ldr	r3, [r3, #0]
90003fc6:	699a      	ldr	r2, [r3, #24]
90003fc8:	687b      	ldr	r3, [r7, #4]
90003fca:	681b      	ldr	r3, [r3, #0]
90003fcc:	f022 0210 	bic.w	r2, r2, #16
90003fd0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90003fd2:	6878      	ldr	r0, [r7, #4]
90003fd4:	f001 fb52 	bl	9000567c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003fd8:	687b      	ldr	r3, [r7, #4]
90003fda:	681b      	ldr	r3, [r3, #0]
90003fdc:	699a      	ldr	r2, [r3, #24]
90003fde:	687b      	ldr	r3, [r7, #4]
90003fe0:	681b      	ldr	r3, [r3, #0]
90003fe2:	f042 0210 	orr.w	r2, r2, #16
90003fe6:	619a      	str	r2, [r3, #24]
90003fe8:	e000      	b.n	90003fec <HAL_HCD_IRQHandler+0x21a>
      return;
90003fea:	bf00      	nop
    }
  }
}
90003fec:	3718      	adds	r7, #24
90003fee:	46bd      	mov	sp, r7
90003ff0:	bd80      	pop	{r7, pc}

90003ff2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
90003ff2:	b580      	push	{r7, lr}
90003ff4:	b082      	sub	sp, #8
90003ff6:	af00      	add	r7, sp, #0
90003ff8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
90003ffa:	687b      	ldr	r3, [r7, #4]
90003ffc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004000:	2b01      	cmp	r3, #1
90004002:	d101      	bne.n	90004008 <HAL_HCD_Stop+0x16>
90004004:	2302      	movs	r3, #2
90004006:	e00d      	b.n	90004024 <HAL_HCD_Stop+0x32>
90004008:	687b      	ldr	r3, [r7, #4]
9000400a:	2201      	movs	r2, #1
9000400c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90004010:	687b      	ldr	r3, [r7, #4]
90004012:	681b      	ldr	r3, [r3, #0]
90004014:	4618      	mov	r0, r3
90004016:	f007 fa0b 	bl	9000b430 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
9000401a:	687b      	ldr	r3, [r7, #4]
9000401c:	2200      	movs	r2, #0
9000401e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
90004022:	2300      	movs	r3, #0
}
90004024:	4618      	mov	r0, r3
90004026:	3708      	adds	r7, #8
90004028:	46bd      	mov	sp, r7
9000402a:	bd80      	pop	{r7, pc}

9000402c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
9000402c:	b580      	push	{r7, lr}
9000402e:	b086      	sub	sp, #24
90004030:	af00      	add	r7, sp, #0
90004032:	6078      	str	r0, [r7, #4]
90004034:	460b      	mov	r3, r1
90004036:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004038:	687b      	ldr	r3, [r7, #4]
9000403a:	681b      	ldr	r3, [r3, #0]
9000403c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000403e:	697b      	ldr	r3, [r7, #20]
90004040:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004042:	687b      	ldr	r3, [r7, #4]
90004044:	681b      	ldr	r3, [r3, #0]
90004046:	78fa      	ldrb	r2, [r7, #3]
90004048:	4611      	mov	r1, r2
9000404a:	4618      	mov	r0, r3
9000404c:	f007 f853 	bl	9000b0f6 <USB_ReadChInterrupts>
90004050:	4603      	mov	r3, r0
90004052:	f003 0304 	and.w	r3, r3, #4
90004056:	2b04      	cmp	r3, #4
90004058:	d11a      	bne.n	90004090 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
9000405a:	78fb      	ldrb	r3, [r7, #3]
9000405c:	015a      	lsls	r2, r3, #5
9000405e:	693b      	ldr	r3, [r7, #16]
90004060:	4413      	add	r3, r2
90004062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004066:	461a      	mov	r2, r3
90004068:	2304      	movs	r3, #4
9000406a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
9000406c:	78fa      	ldrb	r2, [r7, #3]
9000406e:	6879      	ldr	r1, [r7, #4]
90004070:	4613      	mov	r3, r2
90004072:	011b      	lsls	r3, r3, #4
90004074:	1a9b      	subs	r3, r3, r2
90004076:	009b      	lsls	r3, r3, #2
90004078:	440b      	add	r3, r1
9000407a:	334d      	adds	r3, #77	@ 0x4d
9000407c:	2207      	movs	r2, #7
9000407e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004080:	687b      	ldr	r3, [r7, #4]
90004082:	681b      	ldr	r3, [r3, #0]
90004084:	78fa      	ldrb	r2, [r7, #3]
90004086:	4611      	mov	r1, r2
90004088:	4618      	mov	r0, r3
9000408a:	f007 f8b1 	bl	9000b1f0 <USB_HC_Halt>
9000408e:	e09e      	b.n	900041ce <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
90004090:	687b      	ldr	r3, [r7, #4]
90004092:	681b      	ldr	r3, [r3, #0]
90004094:	78fa      	ldrb	r2, [r7, #3]
90004096:	4611      	mov	r1, r2
90004098:	4618      	mov	r0, r3
9000409a:	f007 f82c 	bl	9000b0f6 <USB_ReadChInterrupts>
9000409e:	4603      	mov	r3, r0
900040a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900040a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900040a8:	d11b      	bne.n	900040e2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
900040aa:	78fb      	ldrb	r3, [r7, #3]
900040ac:	015a      	lsls	r2, r3, #5
900040ae:	693b      	ldr	r3, [r7, #16]
900040b0:	4413      	add	r3, r2
900040b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900040b6:	461a      	mov	r2, r3
900040b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
900040bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
900040be:	78fa      	ldrb	r2, [r7, #3]
900040c0:	6879      	ldr	r1, [r7, #4]
900040c2:	4613      	mov	r3, r2
900040c4:	011b      	lsls	r3, r3, #4
900040c6:	1a9b      	subs	r3, r3, r2
900040c8:	009b      	lsls	r3, r3, #2
900040ca:	440b      	add	r3, r1
900040cc:	334d      	adds	r3, #77	@ 0x4d
900040ce:	2208      	movs	r2, #8
900040d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900040d2:	687b      	ldr	r3, [r7, #4]
900040d4:	681b      	ldr	r3, [r3, #0]
900040d6:	78fa      	ldrb	r2, [r7, #3]
900040d8:	4611      	mov	r1, r2
900040da:	4618      	mov	r0, r3
900040dc:	f007 f888 	bl	9000b1f0 <USB_HC_Halt>
900040e0:	e075      	b.n	900041ce <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900040e2:	687b      	ldr	r3, [r7, #4]
900040e4:	681b      	ldr	r3, [r3, #0]
900040e6:	78fa      	ldrb	r2, [r7, #3]
900040e8:	4611      	mov	r1, r2
900040ea:	4618      	mov	r0, r3
900040ec:	f007 f803 	bl	9000b0f6 <USB_ReadChInterrupts>
900040f0:	4603      	mov	r3, r0
900040f2:	f003 0308 	and.w	r3, r3, #8
900040f6:	2b08      	cmp	r3, #8
900040f8:	d11a      	bne.n	90004130 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900040fa:	78fb      	ldrb	r3, [r7, #3]
900040fc:	015a      	lsls	r2, r3, #5
900040fe:	693b      	ldr	r3, [r7, #16]
90004100:	4413      	add	r3, r2
90004102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004106:	461a      	mov	r2, r3
90004108:	2308      	movs	r3, #8
9000410a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
9000410c:	78fa      	ldrb	r2, [r7, #3]
9000410e:	6879      	ldr	r1, [r7, #4]
90004110:	4613      	mov	r3, r2
90004112:	011b      	lsls	r3, r3, #4
90004114:	1a9b      	subs	r3, r3, r2
90004116:	009b      	lsls	r3, r3, #2
90004118:	440b      	add	r3, r1
9000411a:	334d      	adds	r3, #77	@ 0x4d
9000411c:	2206      	movs	r2, #6
9000411e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004120:	687b      	ldr	r3, [r7, #4]
90004122:	681b      	ldr	r3, [r3, #0]
90004124:	78fa      	ldrb	r2, [r7, #3]
90004126:	4611      	mov	r1, r2
90004128:	4618      	mov	r0, r3
9000412a:	f007 f861 	bl	9000b1f0 <USB_HC_Halt>
9000412e:	e04e      	b.n	900041ce <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90004130:	687b      	ldr	r3, [r7, #4]
90004132:	681b      	ldr	r3, [r3, #0]
90004134:	78fa      	ldrb	r2, [r7, #3]
90004136:	4611      	mov	r1, r2
90004138:	4618      	mov	r0, r3
9000413a:	f006 ffdc 	bl	9000b0f6 <USB_ReadChInterrupts>
9000413e:	4603      	mov	r3, r0
90004140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90004148:	d11b      	bne.n	90004182 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
9000414a:	78fb      	ldrb	r3, [r7, #3]
9000414c:	015a      	lsls	r2, r3, #5
9000414e:	693b      	ldr	r3, [r7, #16]
90004150:	4413      	add	r3, r2
90004152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004156:	461a      	mov	r2, r3
90004158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000415c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000415e:	78fa      	ldrb	r2, [r7, #3]
90004160:	6879      	ldr	r1, [r7, #4]
90004162:	4613      	mov	r3, r2
90004164:	011b      	lsls	r3, r3, #4
90004166:	1a9b      	subs	r3, r3, r2
90004168:	009b      	lsls	r3, r3, #2
9000416a:	440b      	add	r3, r1
9000416c:	334d      	adds	r3, #77	@ 0x4d
9000416e:	2209      	movs	r2, #9
90004170:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004172:	687b      	ldr	r3, [r7, #4]
90004174:	681b      	ldr	r3, [r3, #0]
90004176:	78fa      	ldrb	r2, [r7, #3]
90004178:	4611      	mov	r1, r2
9000417a:	4618      	mov	r0, r3
9000417c:	f007 f838 	bl	9000b1f0 <USB_HC_Halt>
90004180:	e025      	b.n	900041ce <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90004182:	687b      	ldr	r3, [r7, #4]
90004184:	681b      	ldr	r3, [r3, #0]
90004186:	78fa      	ldrb	r2, [r7, #3]
90004188:	4611      	mov	r1, r2
9000418a:	4618      	mov	r0, r3
9000418c:	f006 ffb3 	bl	9000b0f6 <USB_ReadChInterrupts>
90004190:	4603      	mov	r3, r0
90004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90004196:	2b80      	cmp	r3, #128	@ 0x80
90004198:	d119      	bne.n	900041ce <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000419a:	78fb      	ldrb	r3, [r7, #3]
9000419c:	015a      	lsls	r2, r3, #5
9000419e:	693b      	ldr	r3, [r7, #16]
900041a0:	4413      	add	r3, r2
900041a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900041a6:	461a      	mov	r2, r3
900041a8:	2380      	movs	r3, #128	@ 0x80
900041aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900041ac:	78fa      	ldrb	r2, [r7, #3]
900041ae:	6879      	ldr	r1, [r7, #4]
900041b0:	4613      	mov	r3, r2
900041b2:	011b      	lsls	r3, r3, #4
900041b4:	1a9b      	subs	r3, r3, r2
900041b6:	009b      	lsls	r3, r3, #2
900041b8:	440b      	add	r3, r1
900041ba:	334d      	adds	r3, #77	@ 0x4d
900041bc:	2207      	movs	r2, #7
900041be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900041c0:	687b      	ldr	r3, [r7, #4]
900041c2:	681b      	ldr	r3, [r3, #0]
900041c4:	78fa      	ldrb	r2, [r7, #3]
900041c6:	4611      	mov	r1, r2
900041c8:	4618      	mov	r0, r3
900041ca:	f007 f811 	bl	9000b1f0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900041ce:	687b      	ldr	r3, [r7, #4]
900041d0:	681b      	ldr	r3, [r3, #0]
900041d2:	78fa      	ldrb	r2, [r7, #3]
900041d4:	4611      	mov	r1, r2
900041d6:	4618      	mov	r0, r3
900041d8:	f006 ff8d 	bl	9000b0f6 <USB_ReadChInterrupts>
900041dc:	4603      	mov	r3, r0
900041de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900041e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900041e6:	d112      	bne.n	9000420e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900041e8:	687b      	ldr	r3, [r7, #4]
900041ea:	681b      	ldr	r3, [r3, #0]
900041ec:	78fa      	ldrb	r2, [r7, #3]
900041ee:	4611      	mov	r1, r2
900041f0:	4618      	mov	r0, r3
900041f2:	f006 fffd 	bl	9000b1f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900041f6:	78fb      	ldrb	r3, [r7, #3]
900041f8:	015a      	lsls	r2, r3, #5
900041fa:	693b      	ldr	r3, [r7, #16]
900041fc:	4413      	add	r3, r2
900041fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004202:	461a      	mov	r2, r3
90004204:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004208:	6093      	str	r3, [r2, #8]
9000420a:	f000 bd75 	b.w	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
9000420e:	687b      	ldr	r3, [r7, #4]
90004210:	681b      	ldr	r3, [r3, #0]
90004212:	78fa      	ldrb	r2, [r7, #3]
90004214:	4611      	mov	r1, r2
90004216:	4618      	mov	r0, r3
90004218:	f006 ff6d 	bl	9000b0f6 <USB_ReadChInterrupts>
9000421c:	4603      	mov	r3, r0
9000421e:	f003 0301 	and.w	r3, r3, #1
90004222:	2b01      	cmp	r3, #1
90004224:	f040 8128 	bne.w	90004478 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004228:	78fb      	ldrb	r3, [r7, #3]
9000422a:	015a      	lsls	r2, r3, #5
9000422c:	693b      	ldr	r3, [r7, #16]
9000422e:	4413      	add	r3, r2
90004230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004234:	461a      	mov	r2, r3
90004236:	2320      	movs	r3, #32
90004238:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
9000423a:	78fa      	ldrb	r2, [r7, #3]
9000423c:	6879      	ldr	r1, [r7, #4]
9000423e:	4613      	mov	r3, r2
90004240:	011b      	lsls	r3, r3, #4
90004242:	1a9b      	subs	r3, r3, r2
90004244:	009b      	lsls	r3, r3, #2
90004246:	440b      	add	r3, r1
90004248:	331b      	adds	r3, #27
9000424a:	781b      	ldrb	r3, [r3, #0]
9000424c:	2b01      	cmp	r3, #1
9000424e:	d119      	bne.n	90004284 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004250:	78fa      	ldrb	r2, [r7, #3]
90004252:	6879      	ldr	r1, [r7, #4]
90004254:	4613      	mov	r3, r2
90004256:	011b      	lsls	r3, r3, #4
90004258:	1a9b      	subs	r3, r3, r2
9000425a:	009b      	lsls	r3, r3, #2
9000425c:	440b      	add	r3, r1
9000425e:	331b      	adds	r3, #27
90004260:	2200      	movs	r2, #0
90004262:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004264:	78fb      	ldrb	r3, [r7, #3]
90004266:	015a      	lsls	r2, r3, #5
90004268:	693b      	ldr	r3, [r7, #16]
9000426a:	4413      	add	r3, r2
9000426c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004270:	685b      	ldr	r3, [r3, #4]
90004272:	78fa      	ldrb	r2, [r7, #3]
90004274:	0151      	lsls	r1, r2, #5
90004276:	693a      	ldr	r2, [r7, #16]
90004278:	440a      	add	r2, r1
9000427a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000427e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004282:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
90004284:	687b      	ldr	r3, [r7, #4]
90004286:	799b      	ldrb	r3, [r3, #6]
90004288:	2b00      	cmp	r3, #0
9000428a:	d01b      	beq.n	900042c4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
9000428c:	78fa      	ldrb	r2, [r7, #3]
9000428e:	6879      	ldr	r1, [r7, #4]
90004290:	4613      	mov	r3, r2
90004292:	011b      	lsls	r3, r3, #4
90004294:	1a9b      	subs	r3, r3, r2
90004296:	009b      	lsls	r3, r3, #2
90004298:	440b      	add	r3, r1
9000429a:	3330      	adds	r3, #48	@ 0x30
9000429c:	6819      	ldr	r1, [r3, #0]
9000429e:	78fb      	ldrb	r3, [r7, #3]
900042a0:	015a      	lsls	r2, r3, #5
900042a2:	693b      	ldr	r3, [r7, #16]
900042a4:	4413      	add	r3, r2
900042a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042aa:	691b      	ldr	r3, [r3, #16]
900042ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
900042b0:	78fa      	ldrb	r2, [r7, #3]
900042b2:	1ac9      	subs	r1, r1, r3
900042b4:	6878      	ldr	r0, [r7, #4]
900042b6:	4613      	mov	r3, r2
900042b8:	011b      	lsls	r3, r3, #4
900042ba:	1a9b      	subs	r3, r3, r2
900042bc:	009b      	lsls	r3, r3, #2
900042be:	4403      	add	r3, r0
900042c0:	3338      	adds	r3, #56	@ 0x38
900042c2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
900042c4:	78fa      	ldrb	r2, [r7, #3]
900042c6:	6879      	ldr	r1, [r7, #4]
900042c8:	4613      	mov	r3, r2
900042ca:	011b      	lsls	r3, r3, #4
900042cc:	1a9b      	subs	r3, r3, r2
900042ce:	009b      	lsls	r3, r3, #2
900042d0:	440b      	add	r3, r1
900042d2:	334d      	adds	r3, #77	@ 0x4d
900042d4:	2201      	movs	r2, #1
900042d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
900042d8:	78fa      	ldrb	r2, [r7, #3]
900042da:	6879      	ldr	r1, [r7, #4]
900042dc:	4613      	mov	r3, r2
900042de:	011b      	lsls	r3, r3, #4
900042e0:	1a9b      	subs	r3, r3, r2
900042e2:	009b      	lsls	r3, r3, #2
900042e4:	440b      	add	r3, r1
900042e6:	3344      	adds	r3, #68	@ 0x44
900042e8:	2200      	movs	r2, #0
900042ea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900042ec:	78fb      	ldrb	r3, [r7, #3]
900042ee:	015a      	lsls	r2, r3, #5
900042f0:	693b      	ldr	r3, [r7, #16]
900042f2:	4413      	add	r3, r2
900042f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042f8:	461a      	mov	r2, r3
900042fa:	2301      	movs	r3, #1
900042fc:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900042fe:	78fa      	ldrb	r2, [r7, #3]
90004300:	6879      	ldr	r1, [r7, #4]
90004302:	4613      	mov	r3, r2
90004304:	011b      	lsls	r3, r3, #4
90004306:	1a9b      	subs	r3, r3, r2
90004308:	009b      	lsls	r3, r3, #2
9000430a:	440b      	add	r3, r1
9000430c:	3326      	adds	r3, #38	@ 0x26
9000430e:	781b      	ldrb	r3, [r3, #0]
90004310:	2b00      	cmp	r3, #0
90004312:	d00a      	beq.n	9000432a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004314:	78fa      	ldrb	r2, [r7, #3]
90004316:	6879      	ldr	r1, [r7, #4]
90004318:	4613      	mov	r3, r2
9000431a:	011b      	lsls	r3, r3, #4
9000431c:	1a9b      	subs	r3, r3, r2
9000431e:	009b      	lsls	r3, r3, #2
90004320:	440b      	add	r3, r1
90004322:	3326      	adds	r3, #38	@ 0x26
90004324:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004326:	2b02      	cmp	r3, #2
90004328:	d110      	bne.n	9000434c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000432a:	687b      	ldr	r3, [r7, #4]
9000432c:	681b      	ldr	r3, [r3, #0]
9000432e:	78fa      	ldrb	r2, [r7, #3]
90004330:	4611      	mov	r1, r2
90004332:	4618      	mov	r0, r3
90004334:	f006 ff5c 	bl	9000b1f0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004338:	78fb      	ldrb	r3, [r7, #3]
9000433a:	015a      	lsls	r2, r3, #5
9000433c:	693b      	ldr	r3, [r7, #16]
9000433e:	4413      	add	r3, r2
90004340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004344:	461a      	mov	r2, r3
90004346:	2310      	movs	r3, #16
90004348:	6093      	str	r3, [r2, #8]
9000434a:	e03d      	b.n	900043c8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
9000434c:	78fa      	ldrb	r2, [r7, #3]
9000434e:	6879      	ldr	r1, [r7, #4]
90004350:	4613      	mov	r3, r2
90004352:	011b      	lsls	r3, r3, #4
90004354:	1a9b      	subs	r3, r3, r2
90004356:	009b      	lsls	r3, r3, #2
90004358:	440b      	add	r3, r1
9000435a:	3326      	adds	r3, #38	@ 0x26
9000435c:	781b      	ldrb	r3, [r3, #0]
9000435e:	2b03      	cmp	r3, #3
90004360:	d00a      	beq.n	90004378 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
90004362:	78fa      	ldrb	r2, [r7, #3]
90004364:	6879      	ldr	r1, [r7, #4]
90004366:	4613      	mov	r3, r2
90004368:	011b      	lsls	r3, r3, #4
9000436a:	1a9b      	subs	r3, r3, r2
9000436c:	009b      	lsls	r3, r3, #2
9000436e:	440b      	add	r3, r1
90004370:	3326      	adds	r3, #38	@ 0x26
90004372:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004374:	2b01      	cmp	r3, #1
90004376:	d127      	bne.n	900043c8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90004378:	78fb      	ldrb	r3, [r7, #3]
9000437a:	015a      	lsls	r2, r3, #5
9000437c:	693b      	ldr	r3, [r7, #16]
9000437e:	4413      	add	r3, r2
90004380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004384:	681b      	ldr	r3, [r3, #0]
90004386:	78fa      	ldrb	r2, [r7, #3]
90004388:	0151      	lsls	r1, r2, #5
9000438a:	693a      	ldr	r2, [r7, #16]
9000438c:	440a      	add	r2, r1
9000438e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004392:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
90004396:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004398:	78fa      	ldrb	r2, [r7, #3]
9000439a:	6879      	ldr	r1, [r7, #4]
9000439c:	4613      	mov	r3, r2
9000439e:	011b      	lsls	r3, r3, #4
900043a0:	1a9b      	subs	r3, r3, r2
900043a2:	009b      	lsls	r3, r3, #2
900043a4:	440b      	add	r3, r1
900043a6:	334c      	adds	r3, #76	@ 0x4c
900043a8:	2201      	movs	r2, #1
900043aa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900043ac:	78fa      	ldrb	r2, [r7, #3]
900043ae:	6879      	ldr	r1, [r7, #4]
900043b0:	4613      	mov	r3, r2
900043b2:	011b      	lsls	r3, r3, #4
900043b4:	1a9b      	subs	r3, r3, r2
900043b6:	009b      	lsls	r3, r3, #2
900043b8:	440b      	add	r3, r1
900043ba:	334c      	adds	r3, #76	@ 0x4c
900043bc:	781a      	ldrb	r2, [r3, #0]
900043be:	78fb      	ldrb	r3, [r7, #3]
900043c0:	4619      	mov	r1, r3
900043c2:	6878      	ldr	r0, [r7, #4]
900043c4:	f7fc ff20 	bl	90001208 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
900043c8:	687b      	ldr	r3, [r7, #4]
900043ca:	799b      	ldrb	r3, [r3, #6]
900043cc:	2b01      	cmp	r3, #1
900043ce:	d13b      	bne.n	90004448 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
900043d0:	78fa      	ldrb	r2, [r7, #3]
900043d2:	6879      	ldr	r1, [r7, #4]
900043d4:	4613      	mov	r3, r2
900043d6:	011b      	lsls	r3, r3, #4
900043d8:	1a9b      	subs	r3, r3, r2
900043da:	009b      	lsls	r3, r3, #2
900043dc:	440b      	add	r3, r1
900043de:	3338      	adds	r3, #56	@ 0x38
900043e0:	6819      	ldr	r1, [r3, #0]
900043e2:	78fa      	ldrb	r2, [r7, #3]
900043e4:	6878      	ldr	r0, [r7, #4]
900043e6:	4613      	mov	r3, r2
900043e8:	011b      	lsls	r3, r3, #4
900043ea:	1a9b      	subs	r3, r3, r2
900043ec:	009b      	lsls	r3, r3, #2
900043ee:	4403      	add	r3, r0
900043f0:	3328      	adds	r3, #40	@ 0x28
900043f2:	881b      	ldrh	r3, [r3, #0]
900043f4:	440b      	add	r3, r1
900043f6:	1e59      	subs	r1, r3, #1
900043f8:	78fa      	ldrb	r2, [r7, #3]
900043fa:	6878      	ldr	r0, [r7, #4]
900043fc:	4613      	mov	r3, r2
900043fe:	011b      	lsls	r3, r3, #4
90004400:	1a9b      	subs	r3, r3, r2
90004402:	009b      	lsls	r3, r3, #2
90004404:	4403      	add	r3, r0
90004406:	3328      	adds	r3, #40	@ 0x28
90004408:	881b      	ldrh	r3, [r3, #0]
9000440a:	fbb1 f3f3 	udiv	r3, r1, r3
9000440e:	f003 0301 	and.w	r3, r3, #1
90004412:	2b00      	cmp	r3, #0
90004414:	f000 8470 	beq.w	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004418:	78fa      	ldrb	r2, [r7, #3]
9000441a:	6879      	ldr	r1, [r7, #4]
9000441c:	4613      	mov	r3, r2
9000441e:	011b      	lsls	r3, r3, #4
90004420:	1a9b      	subs	r3, r3, r2
90004422:	009b      	lsls	r3, r3, #2
90004424:	440b      	add	r3, r1
90004426:	333c      	adds	r3, #60	@ 0x3c
90004428:	781b      	ldrb	r3, [r3, #0]
9000442a:	78fa      	ldrb	r2, [r7, #3]
9000442c:	f083 0301 	eor.w	r3, r3, #1
90004430:	b2d8      	uxtb	r0, r3
90004432:	6879      	ldr	r1, [r7, #4]
90004434:	4613      	mov	r3, r2
90004436:	011b      	lsls	r3, r3, #4
90004438:	1a9b      	subs	r3, r3, r2
9000443a:	009b      	lsls	r3, r3, #2
9000443c:	440b      	add	r3, r1
9000443e:	333c      	adds	r3, #60	@ 0x3c
90004440:	4602      	mov	r2, r0
90004442:	701a      	strb	r2, [r3, #0]
90004444:	f000 bc58 	b.w	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004448:	78fa      	ldrb	r2, [r7, #3]
9000444a:	6879      	ldr	r1, [r7, #4]
9000444c:	4613      	mov	r3, r2
9000444e:	011b      	lsls	r3, r3, #4
90004450:	1a9b      	subs	r3, r3, r2
90004452:	009b      	lsls	r3, r3, #2
90004454:	440b      	add	r3, r1
90004456:	333c      	adds	r3, #60	@ 0x3c
90004458:	781b      	ldrb	r3, [r3, #0]
9000445a:	78fa      	ldrb	r2, [r7, #3]
9000445c:	f083 0301 	eor.w	r3, r3, #1
90004460:	b2d8      	uxtb	r0, r3
90004462:	6879      	ldr	r1, [r7, #4]
90004464:	4613      	mov	r3, r2
90004466:	011b      	lsls	r3, r3, #4
90004468:	1a9b      	subs	r3, r3, r2
9000446a:	009b      	lsls	r3, r3, #2
9000446c:	440b      	add	r3, r1
9000446e:	333c      	adds	r3, #60	@ 0x3c
90004470:	4602      	mov	r2, r0
90004472:	701a      	strb	r2, [r3, #0]
90004474:	f000 bc40 	b.w	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004478:	687b      	ldr	r3, [r7, #4]
9000447a:	681b      	ldr	r3, [r3, #0]
9000447c:	78fa      	ldrb	r2, [r7, #3]
9000447e:	4611      	mov	r1, r2
90004480:	4618      	mov	r0, r3
90004482:	f006 fe38 	bl	9000b0f6 <USB_ReadChInterrupts>
90004486:	4603      	mov	r3, r0
90004488:	f003 0320 	and.w	r3, r3, #32
9000448c:	2b20      	cmp	r3, #32
9000448e:	d131      	bne.n	900044f4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004490:	78fb      	ldrb	r3, [r7, #3]
90004492:	015a      	lsls	r2, r3, #5
90004494:	693b      	ldr	r3, [r7, #16]
90004496:	4413      	add	r3, r2
90004498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000449c:	461a      	mov	r2, r3
9000449e:	2320      	movs	r3, #32
900044a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
900044a2:	78fa      	ldrb	r2, [r7, #3]
900044a4:	6879      	ldr	r1, [r7, #4]
900044a6:	4613      	mov	r3, r2
900044a8:	011b      	lsls	r3, r3, #4
900044aa:	1a9b      	subs	r3, r3, r2
900044ac:	009b      	lsls	r3, r3, #2
900044ae:	440b      	add	r3, r1
900044b0:	331a      	adds	r3, #26
900044b2:	781b      	ldrb	r3, [r3, #0]
900044b4:	2b01      	cmp	r3, #1
900044b6:	f040 841f 	bne.w	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
900044ba:	78fa      	ldrb	r2, [r7, #3]
900044bc:	6879      	ldr	r1, [r7, #4]
900044be:	4613      	mov	r3, r2
900044c0:	011b      	lsls	r3, r3, #4
900044c2:	1a9b      	subs	r3, r3, r2
900044c4:	009b      	lsls	r3, r3, #2
900044c6:	440b      	add	r3, r1
900044c8:	331b      	adds	r3, #27
900044ca:	2201      	movs	r2, #1
900044cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900044ce:	78fa      	ldrb	r2, [r7, #3]
900044d0:	6879      	ldr	r1, [r7, #4]
900044d2:	4613      	mov	r3, r2
900044d4:	011b      	lsls	r3, r3, #4
900044d6:	1a9b      	subs	r3, r3, r2
900044d8:	009b      	lsls	r3, r3, #2
900044da:	440b      	add	r3, r1
900044dc:	334d      	adds	r3, #77	@ 0x4d
900044de:	2203      	movs	r2, #3
900044e0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
900044e2:	687b      	ldr	r3, [r7, #4]
900044e4:	681b      	ldr	r3, [r3, #0]
900044e6:	78fa      	ldrb	r2, [r7, #3]
900044e8:	4611      	mov	r1, r2
900044ea:	4618      	mov	r0, r3
900044ec:	f006 fe80 	bl	9000b1f0 <USB_HC_Halt>
900044f0:	f000 bc02 	b.w	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900044f4:	687b      	ldr	r3, [r7, #4]
900044f6:	681b      	ldr	r3, [r3, #0]
900044f8:	78fa      	ldrb	r2, [r7, #3]
900044fa:	4611      	mov	r1, r2
900044fc:	4618      	mov	r0, r3
900044fe:	f006 fdfa 	bl	9000b0f6 <USB_ReadChInterrupts>
90004502:	4603      	mov	r3, r0
90004504:	f003 0302 	and.w	r3, r3, #2
90004508:	2b02      	cmp	r3, #2
9000450a:	f040 8305 	bne.w	90004b18 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
9000450e:	78fb      	ldrb	r3, [r7, #3]
90004510:	015a      	lsls	r2, r3, #5
90004512:	693b      	ldr	r3, [r7, #16]
90004514:	4413      	add	r3, r2
90004516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000451a:	461a      	mov	r2, r3
9000451c:	2302      	movs	r3, #2
9000451e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90004520:	78fa      	ldrb	r2, [r7, #3]
90004522:	6879      	ldr	r1, [r7, #4]
90004524:	4613      	mov	r3, r2
90004526:	011b      	lsls	r3, r3, #4
90004528:	1a9b      	subs	r3, r3, r2
9000452a:	009b      	lsls	r3, r3, #2
9000452c:	440b      	add	r3, r1
9000452e:	334d      	adds	r3, #77	@ 0x4d
90004530:	781b      	ldrb	r3, [r3, #0]
90004532:	2b01      	cmp	r3, #1
90004534:	d114      	bne.n	90004560 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004536:	78fa      	ldrb	r2, [r7, #3]
90004538:	6879      	ldr	r1, [r7, #4]
9000453a:	4613      	mov	r3, r2
9000453c:	011b      	lsls	r3, r3, #4
9000453e:	1a9b      	subs	r3, r3, r2
90004540:	009b      	lsls	r3, r3, #2
90004542:	440b      	add	r3, r1
90004544:	334d      	adds	r3, #77	@ 0x4d
90004546:	2202      	movs	r2, #2
90004548:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000454a:	78fa      	ldrb	r2, [r7, #3]
9000454c:	6879      	ldr	r1, [r7, #4]
9000454e:	4613      	mov	r3, r2
90004550:	011b      	lsls	r3, r3, #4
90004552:	1a9b      	subs	r3, r3, r2
90004554:	009b      	lsls	r3, r3, #2
90004556:	440b      	add	r3, r1
90004558:	334c      	adds	r3, #76	@ 0x4c
9000455a:	2201      	movs	r2, #1
9000455c:	701a      	strb	r2, [r3, #0]
9000455e:	e2cc      	b.n	90004afa <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90004560:	78fa      	ldrb	r2, [r7, #3]
90004562:	6879      	ldr	r1, [r7, #4]
90004564:	4613      	mov	r3, r2
90004566:	011b      	lsls	r3, r3, #4
90004568:	1a9b      	subs	r3, r3, r2
9000456a:	009b      	lsls	r3, r3, #2
9000456c:	440b      	add	r3, r1
9000456e:	334d      	adds	r3, #77	@ 0x4d
90004570:	781b      	ldrb	r3, [r3, #0]
90004572:	2b06      	cmp	r3, #6
90004574:	d114      	bne.n	900045a0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004576:	78fa      	ldrb	r2, [r7, #3]
90004578:	6879      	ldr	r1, [r7, #4]
9000457a:	4613      	mov	r3, r2
9000457c:	011b      	lsls	r3, r3, #4
9000457e:	1a9b      	subs	r3, r3, r2
90004580:	009b      	lsls	r3, r3, #2
90004582:	440b      	add	r3, r1
90004584:	334d      	adds	r3, #77	@ 0x4d
90004586:	2202      	movs	r2, #2
90004588:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
9000458a:	78fa      	ldrb	r2, [r7, #3]
9000458c:	6879      	ldr	r1, [r7, #4]
9000458e:	4613      	mov	r3, r2
90004590:	011b      	lsls	r3, r3, #4
90004592:	1a9b      	subs	r3, r3, r2
90004594:	009b      	lsls	r3, r3, #2
90004596:	440b      	add	r3, r1
90004598:	334c      	adds	r3, #76	@ 0x4c
9000459a:	2205      	movs	r2, #5
9000459c:	701a      	strb	r2, [r3, #0]
9000459e:	e2ac      	b.n	90004afa <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900045a0:	78fa      	ldrb	r2, [r7, #3]
900045a2:	6879      	ldr	r1, [r7, #4]
900045a4:	4613      	mov	r3, r2
900045a6:	011b      	lsls	r3, r3, #4
900045a8:	1a9b      	subs	r3, r3, r2
900045aa:	009b      	lsls	r3, r3, #2
900045ac:	440b      	add	r3, r1
900045ae:	334d      	adds	r3, #77	@ 0x4d
900045b0:	781b      	ldrb	r3, [r3, #0]
900045b2:	2b07      	cmp	r3, #7
900045b4:	d00b      	beq.n	900045ce <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900045b6:	78fa      	ldrb	r2, [r7, #3]
900045b8:	6879      	ldr	r1, [r7, #4]
900045ba:	4613      	mov	r3, r2
900045bc:	011b      	lsls	r3, r3, #4
900045be:	1a9b      	subs	r3, r3, r2
900045c0:	009b      	lsls	r3, r3, #2
900045c2:	440b      	add	r3, r1
900045c4:	334d      	adds	r3, #77	@ 0x4d
900045c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900045c8:	2b09      	cmp	r3, #9
900045ca:	f040 80a6 	bne.w	9000471a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900045ce:	78fa      	ldrb	r2, [r7, #3]
900045d0:	6879      	ldr	r1, [r7, #4]
900045d2:	4613      	mov	r3, r2
900045d4:	011b      	lsls	r3, r3, #4
900045d6:	1a9b      	subs	r3, r3, r2
900045d8:	009b      	lsls	r3, r3, #2
900045da:	440b      	add	r3, r1
900045dc:	334d      	adds	r3, #77	@ 0x4d
900045de:	2202      	movs	r2, #2
900045e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900045e2:	78fa      	ldrb	r2, [r7, #3]
900045e4:	6879      	ldr	r1, [r7, #4]
900045e6:	4613      	mov	r3, r2
900045e8:	011b      	lsls	r3, r3, #4
900045ea:	1a9b      	subs	r3, r3, r2
900045ec:	009b      	lsls	r3, r3, #2
900045ee:	440b      	add	r3, r1
900045f0:	3344      	adds	r3, #68	@ 0x44
900045f2:	681b      	ldr	r3, [r3, #0]
900045f4:	1c59      	adds	r1, r3, #1
900045f6:	6878      	ldr	r0, [r7, #4]
900045f8:	4613      	mov	r3, r2
900045fa:	011b      	lsls	r3, r3, #4
900045fc:	1a9b      	subs	r3, r3, r2
900045fe:	009b      	lsls	r3, r3, #2
90004600:	4403      	add	r3, r0
90004602:	3344      	adds	r3, #68	@ 0x44
90004604:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004606:	78fa      	ldrb	r2, [r7, #3]
90004608:	6879      	ldr	r1, [r7, #4]
9000460a:	4613      	mov	r3, r2
9000460c:	011b      	lsls	r3, r3, #4
9000460e:	1a9b      	subs	r3, r3, r2
90004610:	009b      	lsls	r3, r3, #2
90004612:	440b      	add	r3, r1
90004614:	3344      	adds	r3, #68	@ 0x44
90004616:	681b      	ldr	r3, [r3, #0]
90004618:	2b02      	cmp	r3, #2
9000461a:	d943      	bls.n	900046a4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
9000461c:	78fa      	ldrb	r2, [r7, #3]
9000461e:	6879      	ldr	r1, [r7, #4]
90004620:	4613      	mov	r3, r2
90004622:	011b      	lsls	r3, r3, #4
90004624:	1a9b      	subs	r3, r3, r2
90004626:	009b      	lsls	r3, r3, #2
90004628:	440b      	add	r3, r1
9000462a:	3344      	adds	r3, #68	@ 0x44
9000462c:	2200      	movs	r2, #0
9000462e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90004630:	78fa      	ldrb	r2, [r7, #3]
90004632:	6879      	ldr	r1, [r7, #4]
90004634:	4613      	mov	r3, r2
90004636:	011b      	lsls	r3, r3, #4
90004638:	1a9b      	subs	r3, r3, r2
9000463a:	009b      	lsls	r3, r3, #2
9000463c:	440b      	add	r3, r1
9000463e:	331a      	adds	r3, #26
90004640:	781b      	ldrb	r3, [r3, #0]
90004642:	2b01      	cmp	r3, #1
90004644:	d123      	bne.n	9000468e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
90004646:	78fa      	ldrb	r2, [r7, #3]
90004648:	6879      	ldr	r1, [r7, #4]
9000464a:	4613      	mov	r3, r2
9000464c:	011b      	lsls	r3, r3, #4
9000464e:	1a9b      	subs	r3, r3, r2
90004650:	009b      	lsls	r3, r3, #2
90004652:	440b      	add	r3, r1
90004654:	331b      	adds	r3, #27
90004656:	2200      	movs	r2, #0
90004658:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
9000465a:	78fa      	ldrb	r2, [r7, #3]
9000465c:	6879      	ldr	r1, [r7, #4]
9000465e:	4613      	mov	r3, r2
90004660:	011b      	lsls	r3, r3, #4
90004662:	1a9b      	subs	r3, r3, r2
90004664:	009b      	lsls	r3, r3, #2
90004666:	440b      	add	r3, r1
90004668:	331c      	adds	r3, #28
9000466a:	2200      	movs	r2, #0
9000466c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000466e:	78fb      	ldrb	r3, [r7, #3]
90004670:	015a      	lsls	r2, r3, #5
90004672:	693b      	ldr	r3, [r7, #16]
90004674:	4413      	add	r3, r2
90004676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000467a:	685b      	ldr	r3, [r3, #4]
9000467c:	78fa      	ldrb	r2, [r7, #3]
9000467e:	0151      	lsls	r1, r2, #5
90004680:	693a      	ldr	r2, [r7, #16]
90004682:	440a      	add	r2, r1
90004684:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000468c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
9000468e:	78fa      	ldrb	r2, [r7, #3]
90004690:	6879      	ldr	r1, [r7, #4]
90004692:	4613      	mov	r3, r2
90004694:	011b      	lsls	r3, r3, #4
90004696:	1a9b      	subs	r3, r3, r2
90004698:	009b      	lsls	r3, r3, #2
9000469a:	440b      	add	r3, r1
9000469c:	334c      	adds	r3, #76	@ 0x4c
9000469e:	2204      	movs	r2, #4
900046a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900046a2:	e229      	b.n	90004af8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900046a4:	78fa      	ldrb	r2, [r7, #3]
900046a6:	6879      	ldr	r1, [r7, #4]
900046a8:	4613      	mov	r3, r2
900046aa:	011b      	lsls	r3, r3, #4
900046ac:	1a9b      	subs	r3, r3, r2
900046ae:	009b      	lsls	r3, r3, #2
900046b0:	440b      	add	r3, r1
900046b2:	334c      	adds	r3, #76	@ 0x4c
900046b4:	2202      	movs	r2, #2
900046b6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900046b8:	78fa      	ldrb	r2, [r7, #3]
900046ba:	6879      	ldr	r1, [r7, #4]
900046bc:	4613      	mov	r3, r2
900046be:	011b      	lsls	r3, r3, #4
900046c0:	1a9b      	subs	r3, r3, r2
900046c2:	009b      	lsls	r3, r3, #2
900046c4:	440b      	add	r3, r1
900046c6:	3326      	adds	r3, #38	@ 0x26
900046c8:	781b      	ldrb	r3, [r3, #0]
900046ca:	2b00      	cmp	r3, #0
900046cc:	d00b      	beq.n	900046e6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900046ce:	78fa      	ldrb	r2, [r7, #3]
900046d0:	6879      	ldr	r1, [r7, #4]
900046d2:	4613      	mov	r3, r2
900046d4:	011b      	lsls	r3, r3, #4
900046d6:	1a9b      	subs	r3, r3, r2
900046d8:	009b      	lsls	r3, r3, #2
900046da:	440b      	add	r3, r1
900046dc:	3326      	adds	r3, #38	@ 0x26
900046de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900046e0:	2b02      	cmp	r3, #2
900046e2:	f040 8209 	bne.w	90004af8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900046e6:	78fb      	ldrb	r3, [r7, #3]
900046e8:	015a      	lsls	r2, r3, #5
900046ea:	693b      	ldr	r3, [r7, #16]
900046ec:	4413      	add	r3, r2
900046ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046f2:	681b      	ldr	r3, [r3, #0]
900046f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900046f6:	68fb      	ldr	r3, [r7, #12]
900046f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900046fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900046fe:	68fb      	ldr	r3, [r7, #12]
90004700:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004704:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004706:	78fb      	ldrb	r3, [r7, #3]
90004708:	015a      	lsls	r2, r3, #5
9000470a:	693b      	ldr	r3, [r7, #16]
9000470c:	4413      	add	r3, r2
9000470e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004712:	461a      	mov	r2, r3
90004714:	68fb      	ldr	r3, [r7, #12]
90004716:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004718:	e1ee      	b.n	90004af8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000471a:	78fa      	ldrb	r2, [r7, #3]
9000471c:	6879      	ldr	r1, [r7, #4]
9000471e:	4613      	mov	r3, r2
90004720:	011b      	lsls	r3, r3, #4
90004722:	1a9b      	subs	r3, r3, r2
90004724:	009b      	lsls	r3, r3, #2
90004726:	440b      	add	r3, r1
90004728:	334d      	adds	r3, #77	@ 0x4d
9000472a:	781b      	ldrb	r3, [r3, #0]
9000472c:	2b05      	cmp	r3, #5
9000472e:	f040 80c8 	bne.w	900048c2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004732:	78fa      	ldrb	r2, [r7, #3]
90004734:	6879      	ldr	r1, [r7, #4]
90004736:	4613      	mov	r3, r2
90004738:	011b      	lsls	r3, r3, #4
9000473a:	1a9b      	subs	r3, r3, r2
9000473c:	009b      	lsls	r3, r3, #2
9000473e:	440b      	add	r3, r1
90004740:	334d      	adds	r3, #77	@ 0x4d
90004742:	2202      	movs	r2, #2
90004744:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004746:	78fa      	ldrb	r2, [r7, #3]
90004748:	6879      	ldr	r1, [r7, #4]
9000474a:	4613      	mov	r3, r2
9000474c:	011b      	lsls	r3, r3, #4
9000474e:	1a9b      	subs	r3, r3, r2
90004750:	009b      	lsls	r3, r3, #2
90004752:	440b      	add	r3, r1
90004754:	331b      	adds	r3, #27
90004756:	781b      	ldrb	r3, [r3, #0]
90004758:	2b01      	cmp	r3, #1
9000475a:	f040 81ce 	bne.w	90004afa <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
9000475e:	78fa      	ldrb	r2, [r7, #3]
90004760:	6879      	ldr	r1, [r7, #4]
90004762:	4613      	mov	r3, r2
90004764:	011b      	lsls	r3, r3, #4
90004766:	1a9b      	subs	r3, r3, r2
90004768:	009b      	lsls	r3, r3, #2
9000476a:	440b      	add	r3, r1
9000476c:	3326      	adds	r3, #38	@ 0x26
9000476e:	781b      	ldrb	r3, [r3, #0]
90004770:	2b03      	cmp	r3, #3
90004772:	d16b      	bne.n	9000484c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90004774:	78fa      	ldrb	r2, [r7, #3]
90004776:	6879      	ldr	r1, [r7, #4]
90004778:	4613      	mov	r3, r2
9000477a:	011b      	lsls	r3, r3, #4
9000477c:	1a9b      	subs	r3, r3, r2
9000477e:	009b      	lsls	r3, r3, #2
90004780:	440b      	add	r3, r1
90004782:	3348      	adds	r3, #72	@ 0x48
90004784:	681b      	ldr	r3, [r3, #0]
90004786:	1c59      	adds	r1, r3, #1
90004788:	6878      	ldr	r0, [r7, #4]
9000478a:	4613      	mov	r3, r2
9000478c:	011b      	lsls	r3, r3, #4
9000478e:	1a9b      	subs	r3, r3, r2
90004790:	009b      	lsls	r3, r3, #2
90004792:	4403      	add	r3, r0
90004794:	3348      	adds	r3, #72	@ 0x48
90004796:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
90004798:	78fa      	ldrb	r2, [r7, #3]
9000479a:	6879      	ldr	r1, [r7, #4]
9000479c:	4613      	mov	r3, r2
9000479e:	011b      	lsls	r3, r3, #4
900047a0:	1a9b      	subs	r3, r3, r2
900047a2:	009b      	lsls	r3, r3, #2
900047a4:	440b      	add	r3, r1
900047a6:	3348      	adds	r3, #72	@ 0x48
900047a8:	681b      	ldr	r3, [r3, #0]
900047aa:	2b02      	cmp	r3, #2
900047ac:	d943      	bls.n	90004836 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
900047ae:	78fa      	ldrb	r2, [r7, #3]
900047b0:	6879      	ldr	r1, [r7, #4]
900047b2:	4613      	mov	r3, r2
900047b4:	011b      	lsls	r3, r3, #4
900047b6:	1a9b      	subs	r3, r3, r2
900047b8:	009b      	lsls	r3, r3, #2
900047ba:	440b      	add	r3, r1
900047bc:	3348      	adds	r3, #72	@ 0x48
900047be:	2200      	movs	r2, #0
900047c0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
900047c2:	78fa      	ldrb	r2, [r7, #3]
900047c4:	6879      	ldr	r1, [r7, #4]
900047c6:	4613      	mov	r3, r2
900047c8:	011b      	lsls	r3, r3, #4
900047ca:	1a9b      	subs	r3, r3, r2
900047cc:	009b      	lsls	r3, r3, #2
900047ce:	440b      	add	r3, r1
900047d0:	331b      	adds	r3, #27
900047d2:	2200      	movs	r2, #0
900047d4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
900047d6:	78fa      	ldrb	r2, [r7, #3]
900047d8:	6879      	ldr	r1, [r7, #4]
900047da:	4613      	mov	r3, r2
900047dc:	011b      	lsls	r3, r3, #4
900047de:	1a9b      	subs	r3, r3, r2
900047e0:	009b      	lsls	r3, r3, #2
900047e2:	440b      	add	r3, r1
900047e4:	3344      	adds	r3, #68	@ 0x44
900047e6:	681b      	ldr	r3, [r3, #0]
900047e8:	2b02      	cmp	r3, #2
900047ea:	d809      	bhi.n	90004800 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
900047ec:	78fa      	ldrb	r2, [r7, #3]
900047ee:	6879      	ldr	r1, [r7, #4]
900047f0:	4613      	mov	r3, r2
900047f2:	011b      	lsls	r3, r3, #4
900047f4:	1a9b      	subs	r3, r3, r2
900047f6:	009b      	lsls	r3, r3, #2
900047f8:	440b      	add	r3, r1
900047fa:	331c      	adds	r3, #28
900047fc:	2201      	movs	r2, #1
900047fe:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004800:	78fb      	ldrb	r3, [r7, #3]
90004802:	015a      	lsls	r2, r3, #5
90004804:	693b      	ldr	r3, [r7, #16]
90004806:	4413      	add	r3, r2
90004808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000480c:	685b      	ldr	r3, [r3, #4]
9000480e:	78fa      	ldrb	r2, [r7, #3]
90004810:	0151      	lsls	r1, r2, #5
90004812:	693a      	ldr	r2, [r7, #16]
90004814:	440a      	add	r2, r1
90004816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000481a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000481e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004820:	78fa      	ldrb	r2, [r7, #3]
90004822:	6879      	ldr	r1, [r7, #4]
90004824:	4613      	mov	r3, r2
90004826:	011b      	lsls	r3, r3, #4
90004828:	1a9b      	subs	r3, r3, r2
9000482a:	009b      	lsls	r3, r3, #2
9000482c:	440b      	add	r3, r1
9000482e:	334c      	adds	r3, #76	@ 0x4c
90004830:	2204      	movs	r2, #4
90004832:	701a      	strb	r2, [r3, #0]
90004834:	e014      	b.n	90004860 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004836:	78fa      	ldrb	r2, [r7, #3]
90004838:	6879      	ldr	r1, [r7, #4]
9000483a:	4613      	mov	r3, r2
9000483c:	011b      	lsls	r3, r3, #4
9000483e:	1a9b      	subs	r3, r3, r2
90004840:	009b      	lsls	r3, r3, #2
90004842:	440b      	add	r3, r1
90004844:	334c      	adds	r3, #76	@ 0x4c
90004846:	2202      	movs	r2, #2
90004848:	701a      	strb	r2, [r3, #0]
9000484a:	e009      	b.n	90004860 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000484c:	78fa      	ldrb	r2, [r7, #3]
9000484e:	6879      	ldr	r1, [r7, #4]
90004850:	4613      	mov	r3, r2
90004852:	011b      	lsls	r3, r3, #4
90004854:	1a9b      	subs	r3, r3, r2
90004856:	009b      	lsls	r3, r3, #2
90004858:	440b      	add	r3, r1
9000485a:	334c      	adds	r3, #76	@ 0x4c
9000485c:	2202      	movs	r2, #2
9000485e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004860:	78fa      	ldrb	r2, [r7, #3]
90004862:	6879      	ldr	r1, [r7, #4]
90004864:	4613      	mov	r3, r2
90004866:	011b      	lsls	r3, r3, #4
90004868:	1a9b      	subs	r3, r3, r2
9000486a:	009b      	lsls	r3, r3, #2
9000486c:	440b      	add	r3, r1
9000486e:	3326      	adds	r3, #38	@ 0x26
90004870:	781b      	ldrb	r3, [r3, #0]
90004872:	2b00      	cmp	r3, #0
90004874:	d00b      	beq.n	9000488e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004876:	78fa      	ldrb	r2, [r7, #3]
90004878:	6879      	ldr	r1, [r7, #4]
9000487a:	4613      	mov	r3, r2
9000487c:	011b      	lsls	r3, r3, #4
9000487e:	1a9b      	subs	r3, r3, r2
90004880:	009b      	lsls	r3, r3, #2
90004882:	440b      	add	r3, r1
90004884:	3326      	adds	r3, #38	@ 0x26
90004886:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004888:	2b02      	cmp	r3, #2
9000488a:	f040 8136 	bne.w	90004afa <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
9000488e:	78fb      	ldrb	r3, [r7, #3]
90004890:	015a      	lsls	r2, r3, #5
90004892:	693b      	ldr	r3, [r7, #16]
90004894:	4413      	add	r3, r2
90004896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000489a:	681b      	ldr	r3, [r3, #0]
9000489c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000489e:	68fb      	ldr	r3, [r7, #12]
900048a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900048a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900048a6:	68fb      	ldr	r3, [r7, #12]
900048a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900048ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
900048ae:	78fb      	ldrb	r3, [r7, #3]
900048b0:	015a      	lsls	r2, r3, #5
900048b2:	693b      	ldr	r3, [r7, #16]
900048b4:	4413      	add	r3, r2
900048b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900048ba:	461a      	mov	r2, r3
900048bc:	68fb      	ldr	r3, [r7, #12]
900048be:	6013      	str	r3, [r2, #0]
900048c0:	e11b      	b.n	90004afa <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
900048c2:	78fa      	ldrb	r2, [r7, #3]
900048c4:	6879      	ldr	r1, [r7, #4]
900048c6:	4613      	mov	r3, r2
900048c8:	011b      	lsls	r3, r3, #4
900048ca:	1a9b      	subs	r3, r3, r2
900048cc:	009b      	lsls	r3, r3, #2
900048ce:	440b      	add	r3, r1
900048d0:	334d      	adds	r3, #77	@ 0x4d
900048d2:	781b      	ldrb	r3, [r3, #0]
900048d4:	2b03      	cmp	r3, #3
900048d6:	f040 8081 	bne.w	900049dc <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900048da:	78fa      	ldrb	r2, [r7, #3]
900048dc:	6879      	ldr	r1, [r7, #4]
900048de:	4613      	mov	r3, r2
900048e0:	011b      	lsls	r3, r3, #4
900048e2:	1a9b      	subs	r3, r3, r2
900048e4:	009b      	lsls	r3, r3, #2
900048e6:	440b      	add	r3, r1
900048e8:	334d      	adds	r3, #77	@ 0x4d
900048ea:	2202      	movs	r2, #2
900048ec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900048ee:	78fa      	ldrb	r2, [r7, #3]
900048f0:	6879      	ldr	r1, [r7, #4]
900048f2:	4613      	mov	r3, r2
900048f4:	011b      	lsls	r3, r3, #4
900048f6:	1a9b      	subs	r3, r3, r2
900048f8:	009b      	lsls	r3, r3, #2
900048fa:	440b      	add	r3, r1
900048fc:	331b      	adds	r3, #27
900048fe:	781b      	ldrb	r3, [r3, #0]
90004900:	2b01      	cmp	r3, #1
90004902:	f040 80fa 	bne.w	90004afa <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004906:	78fa      	ldrb	r2, [r7, #3]
90004908:	6879      	ldr	r1, [r7, #4]
9000490a:	4613      	mov	r3, r2
9000490c:	011b      	lsls	r3, r3, #4
9000490e:	1a9b      	subs	r3, r3, r2
90004910:	009b      	lsls	r3, r3, #2
90004912:	440b      	add	r3, r1
90004914:	334c      	adds	r3, #76	@ 0x4c
90004916:	2202      	movs	r2, #2
90004918:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
9000491a:	78fb      	ldrb	r3, [r7, #3]
9000491c:	015a      	lsls	r2, r3, #5
9000491e:	693b      	ldr	r3, [r7, #16]
90004920:	4413      	add	r3, r2
90004922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004926:	685b      	ldr	r3, [r3, #4]
90004928:	78fa      	ldrb	r2, [r7, #3]
9000492a:	0151      	lsls	r1, r2, #5
9000492c:	693a      	ldr	r2, [r7, #16]
9000492e:	440a      	add	r2, r1
90004930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004938:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
9000493a:	78fb      	ldrb	r3, [r7, #3]
9000493c:	015a      	lsls	r2, r3, #5
9000493e:	693b      	ldr	r3, [r7, #16]
90004940:	4413      	add	r3, r2
90004942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004946:	68db      	ldr	r3, [r3, #12]
90004948:	78fa      	ldrb	r2, [r7, #3]
9000494a:	0151      	lsls	r1, r2, #5
9000494c:	693a      	ldr	r2, [r7, #16]
9000494e:	440a      	add	r2, r1
90004950:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004958:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
9000495a:	78fb      	ldrb	r3, [r7, #3]
9000495c:	015a      	lsls	r2, r3, #5
9000495e:	693b      	ldr	r3, [r7, #16]
90004960:	4413      	add	r3, r2
90004962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004966:	68db      	ldr	r3, [r3, #12]
90004968:	78fa      	ldrb	r2, [r7, #3]
9000496a:	0151      	lsls	r1, r2, #5
9000496c:	693a      	ldr	r2, [r7, #16]
9000496e:	440a      	add	r2, r1
90004970:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004974:	f023 0320 	bic.w	r3, r3, #32
90004978:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000497a:	78fa      	ldrb	r2, [r7, #3]
9000497c:	6879      	ldr	r1, [r7, #4]
9000497e:	4613      	mov	r3, r2
90004980:	011b      	lsls	r3, r3, #4
90004982:	1a9b      	subs	r3, r3, r2
90004984:	009b      	lsls	r3, r3, #2
90004986:	440b      	add	r3, r1
90004988:	3326      	adds	r3, #38	@ 0x26
9000498a:	781b      	ldrb	r3, [r3, #0]
9000498c:	2b00      	cmp	r3, #0
9000498e:	d00b      	beq.n	900049a8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004990:	78fa      	ldrb	r2, [r7, #3]
90004992:	6879      	ldr	r1, [r7, #4]
90004994:	4613      	mov	r3, r2
90004996:	011b      	lsls	r3, r3, #4
90004998:	1a9b      	subs	r3, r3, r2
9000499a:	009b      	lsls	r3, r3, #2
9000499c:	440b      	add	r3, r1
9000499e:	3326      	adds	r3, #38	@ 0x26
900049a0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900049a2:	2b02      	cmp	r3, #2
900049a4:	f040 80a9 	bne.w	90004afa <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900049a8:	78fb      	ldrb	r3, [r7, #3]
900049aa:	015a      	lsls	r2, r3, #5
900049ac:	693b      	ldr	r3, [r7, #16]
900049ae:	4413      	add	r3, r2
900049b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049b4:	681b      	ldr	r3, [r3, #0]
900049b6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900049b8:	68fb      	ldr	r3, [r7, #12]
900049ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900049be:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900049c0:	68fb      	ldr	r3, [r7, #12]
900049c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900049c6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
900049c8:	78fb      	ldrb	r3, [r7, #3]
900049ca:	015a      	lsls	r2, r3, #5
900049cc:	693b      	ldr	r3, [r7, #16]
900049ce:	4413      	add	r3, r2
900049d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049d4:	461a      	mov	r2, r3
900049d6:	68fb      	ldr	r3, [r7, #12]
900049d8:	6013      	str	r3, [r2, #0]
900049da:	e08e      	b.n	90004afa <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
900049dc:	78fa      	ldrb	r2, [r7, #3]
900049de:	6879      	ldr	r1, [r7, #4]
900049e0:	4613      	mov	r3, r2
900049e2:	011b      	lsls	r3, r3, #4
900049e4:	1a9b      	subs	r3, r3, r2
900049e6:	009b      	lsls	r3, r3, #2
900049e8:	440b      	add	r3, r1
900049ea:	334d      	adds	r3, #77	@ 0x4d
900049ec:	781b      	ldrb	r3, [r3, #0]
900049ee:	2b04      	cmp	r3, #4
900049f0:	d143      	bne.n	90004a7a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900049f2:	78fa      	ldrb	r2, [r7, #3]
900049f4:	6879      	ldr	r1, [r7, #4]
900049f6:	4613      	mov	r3, r2
900049f8:	011b      	lsls	r3, r3, #4
900049fa:	1a9b      	subs	r3, r3, r2
900049fc:	009b      	lsls	r3, r3, #2
900049fe:	440b      	add	r3, r1
90004a00:	334d      	adds	r3, #77	@ 0x4d
90004a02:	2202      	movs	r2, #2
90004a04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a06:	78fa      	ldrb	r2, [r7, #3]
90004a08:	6879      	ldr	r1, [r7, #4]
90004a0a:	4613      	mov	r3, r2
90004a0c:	011b      	lsls	r3, r3, #4
90004a0e:	1a9b      	subs	r3, r3, r2
90004a10:	009b      	lsls	r3, r3, #2
90004a12:	440b      	add	r3, r1
90004a14:	334c      	adds	r3, #76	@ 0x4c
90004a16:	2202      	movs	r2, #2
90004a18:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a1a:	78fa      	ldrb	r2, [r7, #3]
90004a1c:	6879      	ldr	r1, [r7, #4]
90004a1e:	4613      	mov	r3, r2
90004a20:	011b      	lsls	r3, r3, #4
90004a22:	1a9b      	subs	r3, r3, r2
90004a24:	009b      	lsls	r3, r3, #2
90004a26:	440b      	add	r3, r1
90004a28:	3326      	adds	r3, #38	@ 0x26
90004a2a:	781b      	ldrb	r3, [r3, #0]
90004a2c:	2b00      	cmp	r3, #0
90004a2e:	d00a      	beq.n	90004a46 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004a30:	78fa      	ldrb	r2, [r7, #3]
90004a32:	6879      	ldr	r1, [r7, #4]
90004a34:	4613      	mov	r3, r2
90004a36:	011b      	lsls	r3, r3, #4
90004a38:	1a9b      	subs	r3, r3, r2
90004a3a:	009b      	lsls	r3, r3, #2
90004a3c:	440b      	add	r3, r1
90004a3e:	3326      	adds	r3, #38	@ 0x26
90004a40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a42:	2b02      	cmp	r3, #2
90004a44:	d159      	bne.n	90004afa <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004a46:	78fb      	ldrb	r3, [r7, #3]
90004a48:	015a      	lsls	r2, r3, #5
90004a4a:	693b      	ldr	r3, [r7, #16]
90004a4c:	4413      	add	r3, r2
90004a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a52:	681b      	ldr	r3, [r3, #0]
90004a54:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004a56:	68fb      	ldr	r3, [r7, #12]
90004a58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004a5c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004a5e:	68fb      	ldr	r3, [r7, #12]
90004a60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004a64:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004a66:	78fb      	ldrb	r3, [r7, #3]
90004a68:	015a      	lsls	r2, r3, #5
90004a6a:	693b      	ldr	r3, [r7, #16]
90004a6c:	4413      	add	r3, r2
90004a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a72:	461a      	mov	r2, r3
90004a74:	68fb      	ldr	r3, [r7, #12]
90004a76:	6013      	str	r3, [r2, #0]
90004a78:	e03f      	b.n	90004afa <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004a7a:	78fa      	ldrb	r2, [r7, #3]
90004a7c:	6879      	ldr	r1, [r7, #4]
90004a7e:	4613      	mov	r3, r2
90004a80:	011b      	lsls	r3, r3, #4
90004a82:	1a9b      	subs	r3, r3, r2
90004a84:	009b      	lsls	r3, r3, #2
90004a86:	440b      	add	r3, r1
90004a88:	334d      	adds	r3, #77	@ 0x4d
90004a8a:	781b      	ldrb	r3, [r3, #0]
90004a8c:	2b08      	cmp	r3, #8
90004a8e:	d126      	bne.n	90004ade <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a90:	78fa      	ldrb	r2, [r7, #3]
90004a92:	6879      	ldr	r1, [r7, #4]
90004a94:	4613      	mov	r3, r2
90004a96:	011b      	lsls	r3, r3, #4
90004a98:	1a9b      	subs	r3, r3, r2
90004a9a:	009b      	lsls	r3, r3, #2
90004a9c:	440b      	add	r3, r1
90004a9e:	334d      	adds	r3, #77	@ 0x4d
90004aa0:	2202      	movs	r2, #2
90004aa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004aa4:	78fa      	ldrb	r2, [r7, #3]
90004aa6:	6879      	ldr	r1, [r7, #4]
90004aa8:	4613      	mov	r3, r2
90004aaa:	011b      	lsls	r3, r3, #4
90004aac:	1a9b      	subs	r3, r3, r2
90004aae:	009b      	lsls	r3, r3, #2
90004ab0:	440b      	add	r3, r1
90004ab2:	3344      	adds	r3, #68	@ 0x44
90004ab4:	681b      	ldr	r3, [r3, #0]
90004ab6:	1c59      	adds	r1, r3, #1
90004ab8:	6878      	ldr	r0, [r7, #4]
90004aba:	4613      	mov	r3, r2
90004abc:	011b      	lsls	r3, r3, #4
90004abe:	1a9b      	subs	r3, r3, r2
90004ac0:	009b      	lsls	r3, r3, #2
90004ac2:	4403      	add	r3, r0
90004ac4:	3344      	adds	r3, #68	@ 0x44
90004ac6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004ac8:	78fa      	ldrb	r2, [r7, #3]
90004aca:	6879      	ldr	r1, [r7, #4]
90004acc:	4613      	mov	r3, r2
90004ace:	011b      	lsls	r3, r3, #4
90004ad0:	1a9b      	subs	r3, r3, r2
90004ad2:	009b      	lsls	r3, r3, #2
90004ad4:	440b      	add	r3, r1
90004ad6:	334c      	adds	r3, #76	@ 0x4c
90004ad8:	2204      	movs	r2, #4
90004ada:	701a      	strb	r2, [r3, #0]
90004adc:	e00d      	b.n	90004afa <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004ade:	78fa      	ldrb	r2, [r7, #3]
90004ae0:	6879      	ldr	r1, [r7, #4]
90004ae2:	4613      	mov	r3, r2
90004ae4:	011b      	lsls	r3, r3, #4
90004ae6:	1a9b      	subs	r3, r3, r2
90004ae8:	009b      	lsls	r3, r3, #2
90004aea:	440b      	add	r3, r1
90004aec:	334d      	adds	r3, #77	@ 0x4d
90004aee:	781b      	ldrb	r3, [r3, #0]
90004af0:	2b02      	cmp	r3, #2
90004af2:	f000 8100 	beq.w	90004cf6 <HCD_HC_IN_IRQHandler+0xcca>
90004af6:	e000      	b.n	90004afa <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004af8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004afa:	78fa      	ldrb	r2, [r7, #3]
90004afc:	6879      	ldr	r1, [r7, #4]
90004afe:	4613      	mov	r3, r2
90004b00:	011b      	lsls	r3, r3, #4
90004b02:	1a9b      	subs	r3, r3, r2
90004b04:	009b      	lsls	r3, r3, #2
90004b06:	440b      	add	r3, r1
90004b08:	334c      	adds	r3, #76	@ 0x4c
90004b0a:	781a      	ldrb	r2, [r3, #0]
90004b0c:	78fb      	ldrb	r3, [r7, #3]
90004b0e:	4619      	mov	r1, r3
90004b10:	6878      	ldr	r0, [r7, #4]
90004b12:	f7fc fb79 	bl	90001208 <HAL_HCD_HC_NotifyURBChange_Callback>
90004b16:	e0ef      	b.n	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004b18:	687b      	ldr	r3, [r7, #4]
90004b1a:	681b      	ldr	r3, [r3, #0]
90004b1c:	78fa      	ldrb	r2, [r7, #3]
90004b1e:	4611      	mov	r1, r2
90004b20:	4618      	mov	r0, r3
90004b22:	f006 fae8 	bl	9000b0f6 <USB_ReadChInterrupts>
90004b26:	4603      	mov	r3, r0
90004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004b2c:	2b40      	cmp	r3, #64	@ 0x40
90004b2e:	d12f      	bne.n	90004b90 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004b30:	78fb      	ldrb	r3, [r7, #3]
90004b32:	015a      	lsls	r2, r3, #5
90004b34:	693b      	ldr	r3, [r7, #16]
90004b36:	4413      	add	r3, r2
90004b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b3c:	461a      	mov	r2, r3
90004b3e:	2340      	movs	r3, #64	@ 0x40
90004b40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004b42:	78fa      	ldrb	r2, [r7, #3]
90004b44:	6879      	ldr	r1, [r7, #4]
90004b46:	4613      	mov	r3, r2
90004b48:	011b      	lsls	r3, r3, #4
90004b4a:	1a9b      	subs	r3, r3, r2
90004b4c:	009b      	lsls	r3, r3, #2
90004b4e:	440b      	add	r3, r1
90004b50:	334d      	adds	r3, #77	@ 0x4d
90004b52:	2205      	movs	r2, #5
90004b54:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004b56:	78fa      	ldrb	r2, [r7, #3]
90004b58:	6879      	ldr	r1, [r7, #4]
90004b5a:	4613      	mov	r3, r2
90004b5c:	011b      	lsls	r3, r3, #4
90004b5e:	1a9b      	subs	r3, r3, r2
90004b60:	009b      	lsls	r3, r3, #2
90004b62:	440b      	add	r3, r1
90004b64:	331a      	adds	r3, #26
90004b66:	781b      	ldrb	r3, [r3, #0]
90004b68:	2b00      	cmp	r3, #0
90004b6a:	d109      	bne.n	90004b80 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004b6c:	78fa      	ldrb	r2, [r7, #3]
90004b6e:	6879      	ldr	r1, [r7, #4]
90004b70:	4613      	mov	r3, r2
90004b72:	011b      	lsls	r3, r3, #4
90004b74:	1a9b      	subs	r3, r3, r2
90004b76:	009b      	lsls	r3, r3, #2
90004b78:	440b      	add	r3, r1
90004b7a:	3344      	adds	r3, #68	@ 0x44
90004b7c:	2200      	movs	r2, #0
90004b7e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004b80:	687b      	ldr	r3, [r7, #4]
90004b82:	681b      	ldr	r3, [r3, #0]
90004b84:	78fa      	ldrb	r2, [r7, #3]
90004b86:	4611      	mov	r1, r2
90004b88:	4618      	mov	r0, r3
90004b8a:	f006 fb31 	bl	9000b1f0 <USB_HC_Halt>
90004b8e:	e0b3      	b.n	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004b90:	687b      	ldr	r3, [r7, #4]
90004b92:	681b      	ldr	r3, [r3, #0]
90004b94:	78fa      	ldrb	r2, [r7, #3]
90004b96:	4611      	mov	r1, r2
90004b98:	4618      	mov	r0, r3
90004b9a:	f006 faac 	bl	9000b0f6 <USB_ReadChInterrupts>
90004b9e:	4603      	mov	r3, r0
90004ba0:	f003 0310 	and.w	r3, r3, #16
90004ba4:	2b10      	cmp	r3, #16
90004ba6:	f040 80a7 	bne.w	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004baa:	78fa      	ldrb	r2, [r7, #3]
90004bac:	6879      	ldr	r1, [r7, #4]
90004bae:	4613      	mov	r3, r2
90004bb0:	011b      	lsls	r3, r3, #4
90004bb2:	1a9b      	subs	r3, r3, r2
90004bb4:	009b      	lsls	r3, r3, #2
90004bb6:	440b      	add	r3, r1
90004bb8:	3326      	adds	r3, #38	@ 0x26
90004bba:	781b      	ldrb	r3, [r3, #0]
90004bbc:	2b03      	cmp	r3, #3
90004bbe:	d11b      	bne.n	90004bf8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004bc0:	78fa      	ldrb	r2, [r7, #3]
90004bc2:	6879      	ldr	r1, [r7, #4]
90004bc4:	4613      	mov	r3, r2
90004bc6:	011b      	lsls	r3, r3, #4
90004bc8:	1a9b      	subs	r3, r3, r2
90004bca:	009b      	lsls	r3, r3, #2
90004bcc:	440b      	add	r3, r1
90004bce:	3344      	adds	r3, #68	@ 0x44
90004bd0:	2200      	movs	r2, #0
90004bd2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004bd4:	78fa      	ldrb	r2, [r7, #3]
90004bd6:	6879      	ldr	r1, [r7, #4]
90004bd8:	4613      	mov	r3, r2
90004bda:	011b      	lsls	r3, r3, #4
90004bdc:	1a9b      	subs	r3, r3, r2
90004bde:	009b      	lsls	r3, r3, #2
90004be0:	440b      	add	r3, r1
90004be2:	334d      	adds	r3, #77	@ 0x4d
90004be4:	2204      	movs	r2, #4
90004be6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004be8:	687b      	ldr	r3, [r7, #4]
90004bea:	681b      	ldr	r3, [r3, #0]
90004bec:	78fa      	ldrb	r2, [r7, #3]
90004bee:	4611      	mov	r1, r2
90004bf0:	4618      	mov	r0, r3
90004bf2:	f006 fafd 	bl	9000b1f0 <USB_HC_Halt>
90004bf6:	e03f      	b.n	90004c78 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bf8:	78fa      	ldrb	r2, [r7, #3]
90004bfa:	6879      	ldr	r1, [r7, #4]
90004bfc:	4613      	mov	r3, r2
90004bfe:	011b      	lsls	r3, r3, #4
90004c00:	1a9b      	subs	r3, r3, r2
90004c02:	009b      	lsls	r3, r3, #2
90004c04:	440b      	add	r3, r1
90004c06:	3326      	adds	r3, #38	@ 0x26
90004c08:	781b      	ldrb	r3, [r3, #0]
90004c0a:	2b00      	cmp	r3, #0
90004c0c:	d00a      	beq.n	90004c24 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004c0e:	78fa      	ldrb	r2, [r7, #3]
90004c10:	6879      	ldr	r1, [r7, #4]
90004c12:	4613      	mov	r3, r2
90004c14:	011b      	lsls	r3, r3, #4
90004c16:	1a9b      	subs	r3, r3, r2
90004c18:	009b      	lsls	r3, r3, #2
90004c1a:	440b      	add	r3, r1
90004c1c:	3326      	adds	r3, #38	@ 0x26
90004c1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c20:	2b02      	cmp	r3, #2
90004c22:	d129      	bne.n	90004c78 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004c24:	78fa      	ldrb	r2, [r7, #3]
90004c26:	6879      	ldr	r1, [r7, #4]
90004c28:	4613      	mov	r3, r2
90004c2a:	011b      	lsls	r3, r3, #4
90004c2c:	1a9b      	subs	r3, r3, r2
90004c2e:	009b      	lsls	r3, r3, #2
90004c30:	440b      	add	r3, r1
90004c32:	3344      	adds	r3, #68	@ 0x44
90004c34:	2200      	movs	r2, #0
90004c36:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004c38:	687b      	ldr	r3, [r7, #4]
90004c3a:	799b      	ldrb	r3, [r3, #6]
90004c3c:	2b00      	cmp	r3, #0
90004c3e:	d00a      	beq.n	90004c56 <HCD_HC_IN_IRQHandler+0xc2a>
90004c40:	78fa      	ldrb	r2, [r7, #3]
90004c42:	6879      	ldr	r1, [r7, #4]
90004c44:	4613      	mov	r3, r2
90004c46:	011b      	lsls	r3, r3, #4
90004c48:	1a9b      	subs	r3, r3, r2
90004c4a:	009b      	lsls	r3, r3, #2
90004c4c:	440b      	add	r3, r1
90004c4e:	331b      	adds	r3, #27
90004c50:	781b      	ldrb	r3, [r3, #0]
90004c52:	2b01      	cmp	r3, #1
90004c54:	d110      	bne.n	90004c78 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004c56:	78fa      	ldrb	r2, [r7, #3]
90004c58:	6879      	ldr	r1, [r7, #4]
90004c5a:	4613      	mov	r3, r2
90004c5c:	011b      	lsls	r3, r3, #4
90004c5e:	1a9b      	subs	r3, r3, r2
90004c60:	009b      	lsls	r3, r3, #2
90004c62:	440b      	add	r3, r1
90004c64:	334d      	adds	r3, #77	@ 0x4d
90004c66:	2204      	movs	r2, #4
90004c68:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c6a:	687b      	ldr	r3, [r7, #4]
90004c6c:	681b      	ldr	r3, [r3, #0]
90004c6e:	78fa      	ldrb	r2, [r7, #3]
90004c70:	4611      	mov	r1, r2
90004c72:	4618      	mov	r0, r3
90004c74:	f006 fabc 	bl	9000b1f0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004c78:	78fa      	ldrb	r2, [r7, #3]
90004c7a:	6879      	ldr	r1, [r7, #4]
90004c7c:	4613      	mov	r3, r2
90004c7e:	011b      	lsls	r3, r3, #4
90004c80:	1a9b      	subs	r3, r3, r2
90004c82:	009b      	lsls	r3, r3, #2
90004c84:	440b      	add	r3, r1
90004c86:	331b      	adds	r3, #27
90004c88:	781b      	ldrb	r3, [r3, #0]
90004c8a:	2b01      	cmp	r3, #1
90004c8c:	d129      	bne.n	90004ce2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004c8e:	78fa      	ldrb	r2, [r7, #3]
90004c90:	6879      	ldr	r1, [r7, #4]
90004c92:	4613      	mov	r3, r2
90004c94:	011b      	lsls	r3, r3, #4
90004c96:	1a9b      	subs	r3, r3, r2
90004c98:	009b      	lsls	r3, r3, #2
90004c9a:	440b      	add	r3, r1
90004c9c:	331b      	adds	r3, #27
90004c9e:	2200      	movs	r2, #0
90004ca0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004ca2:	78fb      	ldrb	r3, [r7, #3]
90004ca4:	015a      	lsls	r2, r3, #5
90004ca6:	693b      	ldr	r3, [r7, #16]
90004ca8:	4413      	add	r3, r2
90004caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cae:	685b      	ldr	r3, [r3, #4]
90004cb0:	78fa      	ldrb	r2, [r7, #3]
90004cb2:	0151      	lsls	r1, r2, #5
90004cb4:	693a      	ldr	r2, [r7, #16]
90004cb6:	440a      	add	r2, r1
90004cb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004cc0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004cc2:	78fb      	ldrb	r3, [r7, #3]
90004cc4:	015a      	lsls	r2, r3, #5
90004cc6:	693b      	ldr	r3, [r7, #16]
90004cc8:	4413      	add	r3, r2
90004cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cce:	68db      	ldr	r3, [r3, #12]
90004cd0:	78fa      	ldrb	r2, [r7, #3]
90004cd2:	0151      	lsls	r1, r2, #5
90004cd4:	693a      	ldr	r2, [r7, #16]
90004cd6:	440a      	add	r2, r1
90004cd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004cdc:	f043 0320 	orr.w	r3, r3, #32
90004ce0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004ce2:	78fb      	ldrb	r3, [r7, #3]
90004ce4:	015a      	lsls	r2, r3, #5
90004ce6:	693b      	ldr	r3, [r7, #16]
90004ce8:	4413      	add	r3, r2
90004cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cee:	461a      	mov	r2, r3
90004cf0:	2310      	movs	r3, #16
90004cf2:	6093      	str	r3, [r2, #8]
90004cf4:	e000      	b.n	90004cf8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004cf6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004cf8:	3718      	adds	r7, #24
90004cfa:	46bd      	mov	sp, r7
90004cfc:	bd80      	pop	{r7, pc}

90004cfe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004cfe:	b580      	push	{r7, lr}
90004d00:	b086      	sub	sp, #24
90004d02:	af00      	add	r7, sp, #0
90004d04:	6078      	str	r0, [r7, #4]
90004d06:	460b      	mov	r3, r1
90004d08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004d0a:	687b      	ldr	r3, [r7, #4]
90004d0c:	681b      	ldr	r3, [r3, #0]
90004d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004d10:	697b      	ldr	r3, [r7, #20]
90004d12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004d14:	687b      	ldr	r3, [r7, #4]
90004d16:	681b      	ldr	r3, [r3, #0]
90004d18:	78fa      	ldrb	r2, [r7, #3]
90004d1a:	4611      	mov	r1, r2
90004d1c:	4618      	mov	r0, r3
90004d1e:	f006 f9ea 	bl	9000b0f6 <USB_ReadChInterrupts>
90004d22:	4603      	mov	r3, r0
90004d24:	f003 0304 	and.w	r3, r3, #4
90004d28:	2b04      	cmp	r3, #4
90004d2a:	d11b      	bne.n	90004d64 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004d2c:	78fb      	ldrb	r3, [r7, #3]
90004d2e:	015a      	lsls	r2, r3, #5
90004d30:	693b      	ldr	r3, [r7, #16]
90004d32:	4413      	add	r3, r2
90004d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d38:	461a      	mov	r2, r3
90004d3a:	2304      	movs	r3, #4
90004d3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004d3e:	78fa      	ldrb	r2, [r7, #3]
90004d40:	6879      	ldr	r1, [r7, #4]
90004d42:	4613      	mov	r3, r2
90004d44:	011b      	lsls	r3, r3, #4
90004d46:	1a9b      	subs	r3, r3, r2
90004d48:	009b      	lsls	r3, r3, #2
90004d4a:	440b      	add	r3, r1
90004d4c:	334d      	adds	r3, #77	@ 0x4d
90004d4e:	2207      	movs	r2, #7
90004d50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d52:	687b      	ldr	r3, [r7, #4]
90004d54:	681b      	ldr	r3, [r3, #0]
90004d56:	78fa      	ldrb	r2, [r7, #3]
90004d58:	4611      	mov	r1, r2
90004d5a:	4618      	mov	r0, r3
90004d5c:	f006 fa48 	bl	9000b1f0 <USB_HC_Halt>
90004d60:	f000 bc89 	b.w	90005676 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004d64:	687b      	ldr	r3, [r7, #4]
90004d66:	681b      	ldr	r3, [r3, #0]
90004d68:	78fa      	ldrb	r2, [r7, #3]
90004d6a:	4611      	mov	r1, r2
90004d6c:	4618      	mov	r0, r3
90004d6e:	f006 f9c2 	bl	9000b0f6 <USB_ReadChInterrupts>
90004d72:	4603      	mov	r3, r0
90004d74:	f003 0320 	and.w	r3, r3, #32
90004d78:	2b20      	cmp	r3, #32
90004d7a:	f040 8082 	bne.w	90004e82 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004d7e:	78fb      	ldrb	r3, [r7, #3]
90004d80:	015a      	lsls	r2, r3, #5
90004d82:	693b      	ldr	r3, [r7, #16]
90004d84:	4413      	add	r3, r2
90004d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d8a:	461a      	mov	r2, r3
90004d8c:	2320      	movs	r3, #32
90004d8e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004d90:	78fa      	ldrb	r2, [r7, #3]
90004d92:	6879      	ldr	r1, [r7, #4]
90004d94:	4613      	mov	r3, r2
90004d96:	011b      	lsls	r3, r3, #4
90004d98:	1a9b      	subs	r3, r3, r2
90004d9a:	009b      	lsls	r3, r3, #2
90004d9c:	440b      	add	r3, r1
90004d9e:	3319      	adds	r3, #25
90004da0:	781b      	ldrb	r3, [r3, #0]
90004da2:	2b01      	cmp	r3, #1
90004da4:	d124      	bne.n	90004df0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004da6:	78fa      	ldrb	r2, [r7, #3]
90004da8:	6879      	ldr	r1, [r7, #4]
90004daa:	4613      	mov	r3, r2
90004dac:	011b      	lsls	r3, r3, #4
90004dae:	1a9b      	subs	r3, r3, r2
90004db0:	009b      	lsls	r3, r3, #2
90004db2:	440b      	add	r3, r1
90004db4:	3319      	adds	r3, #25
90004db6:	2200      	movs	r2, #0
90004db8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004dba:	78fa      	ldrb	r2, [r7, #3]
90004dbc:	6879      	ldr	r1, [r7, #4]
90004dbe:	4613      	mov	r3, r2
90004dc0:	011b      	lsls	r3, r3, #4
90004dc2:	1a9b      	subs	r3, r3, r2
90004dc4:	009b      	lsls	r3, r3, #2
90004dc6:	440b      	add	r3, r1
90004dc8:	334c      	adds	r3, #76	@ 0x4c
90004dca:	2202      	movs	r2, #2
90004dcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004dce:	78fa      	ldrb	r2, [r7, #3]
90004dd0:	6879      	ldr	r1, [r7, #4]
90004dd2:	4613      	mov	r3, r2
90004dd4:	011b      	lsls	r3, r3, #4
90004dd6:	1a9b      	subs	r3, r3, r2
90004dd8:	009b      	lsls	r3, r3, #2
90004dda:	440b      	add	r3, r1
90004ddc:	334d      	adds	r3, #77	@ 0x4d
90004dde:	2203      	movs	r2, #3
90004de0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004de2:	687b      	ldr	r3, [r7, #4]
90004de4:	681b      	ldr	r3, [r3, #0]
90004de6:	78fa      	ldrb	r2, [r7, #3]
90004de8:	4611      	mov	r1, r2
90004dea:	4618      	mov	r0, r3
90004dec:	f006 fa00 	bl	9000b1f0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90004df0:	78fa      	ldrb	r2, [r7, #3]
90004df2:	6879      	ldr	r1, [r7, #4]
90004df4:	4613      	mov	r3, r2
90004df6:	011b      	lsls	r3, r3, #4
90004df8:	1a9b      	subs	r3, r3, r2
90004dfa:	009b      	lsls	r3, r3, #2
90004dfc:	440b      	add	r3, r1
90004dfe:	331a      	adds	r3, #26
90004e00:	781b      	ldrb	r3, [r3, #0]
90004e02:	2b01      	cmp	r3, #1
90004e04:	f040 8437 	bne.w	90005676 <HCD_HC_OUT_IRQHandler+0x978>
90004e08:	78fa      	ldrb	r2, [r7, #3]
90004e0a:	6879      	ldr	r1, [r7, #4]
90004e0c:	4613      	mov	r3, r2
90004e0e:	011b      	lsls	r3, r3, #4
90004e10:	1a9b      	subs	r3, r3, r2
90004e12:	009b      	lsls	r3, r3, #2
90004e14:	440b      	add	r3, r1
90004e16:	331b      	adds	r3, #27
90004e18:	781b      	ldrb	r3, [r3, #0]
90004e1a:	2b00      	cmp	r3, #0
90004e1c:	f040 842b 	bne.w	90005676 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90004e20:	78fa      	ldrb	r2, [r7, #3]
90004e22:	6879      	ldr	r1, [r7, #4]
90004e24:	4613      	mov	r3, r2
90004e26:	011b      	lsls	r3, r3, #4
90004e28:	1a9b      	subs	r3, r3, r2
90004e2a:	009b      	lsls	r3, r3, #2
90004e2c:	440b      	add	r3, r1
90004e2e:	3326      	adds	r3, #38	@ 0x26
90004e30:	781b      	ldrb	r3, [r3, #0]
90004e32:	2b01      	cmp	r3, #1
90004e34:	d009      	beq.n	90004e4a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90004e36:	78fa      	ldrb	r2, [r7, #3]
90004e38:	6879      	ldr	r1, [r7, #4]
90004e3a:	4613      	mov	r3, r2
90004e3c:	011b      	lsls	r3, r3, #4
90004e3e:	1a9b      	subs	r3, r3, r2
90004e40:	009b      	lsls	r3, r3, #2
90004e42:	440b      	add	r3, r1
90004e44:	331b      	adds	r3, #27
90004e46:	2201      	movs	r2, #1
90004e48:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90004e4a:	78fa      	ldrb	r2, [r7, #3]
90004e4c:	6879      	ldr	r1, [r7, #4]
90004e4e:	4613      	mov	r3, r2
90004e50:	011b      	lsls	r3, r3, #4
90004e52:	1a9b      	subs	r3, r3, r2
90004e54:	009b      	lsls	r3, r3, #2
90004e56:	440b      	add	r3, r1
90004e58:	334d      	adds	r3, #77	@ 0x4d
90004e5a:	2203      	movs	r2, #3
90004e5c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e5e:	687b      	ldr	r3, [r7, #4]
90004e60:	681b      	ldr	r3, [r3, #0]
90004e62:	78fa      	ldrb	r2, [r7, #3]
90004e64:	4611      	mov	r1, r2
90004e66:	4618      	mov	r0, r3
90004e68:	f006 f9c2 	bl	9000b1f0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90004e6c:	78fa      	ldrb	r2, [r7, #3]
90004e6e:	6879      	ldr	r1, [r7, #4]
90004e70:	4613      	mov	r3, r2
90004e72:	011b      	lsls	r3, r3, #4
90004e74:	1a9b      	subs	r3, r3, r2
90004e76:	009b      	lsls	r3, r3, #2
90004e78:	440b      	add	r3, r1
90004e7a:	3344      	adds	r3, #68	@ 0x44
90004e7c:	2200      	movs	r2, #0
90004e7e:	601a      	str	r2, [r3, #0]
90004e80:	e3f9      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004e82:	687b      	ldr	r3, [r7, #4]
90004e84:	681b      	ldr	r3, [r3, #0]
90004e86:	78fa      	ldrb	r2, [r7, #3]
90004e88:	4611      	mov	r1, r2
90004e8a:	4618      	mov	r0, r3
90004e8c:	f006 f933 	bl	9000b0f6 <USB_ReadChInterrupts>
90004e90:	4603      	mov	r3, r0
90004e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004e9a:	d111      	bne.n	90004ec0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004e9c:	78fb      	ldrb	r3, [r7, #3]
90004e9e:	015a      	lsls	r2, r3, #5
90004ea0:	693b      	ldr	r3, [r7, #16]
90004ea2:	4413      	add	r3, r2
90004ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ea8:	461a      	mov	r2, r3
90004eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004eae:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004eb0:	687b      	ldr	r3, [r7, #4]
90004eb2:	681b      	ldr	r3, [r3, #0]
90004eb4:	78fa      	ldrb	r2, [r7, #3]
90004eb6:	4611      	mov	r1, r2
90004eb8:	4618      	mov	r0, r3
90004eba:	f006 f999 	bl	9000b1f0 <USB_HC_Halt>
90004ebe:	e3da      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004ec0:	687b      	ldr	r3, [r7, #4]
90004ec2:	681b      	ldr	r3, [r3, #0]
90004ec4:	78fa      	ldrb	r2, [r7, #3]
90004ec6:	4611      	mov	r1, r2
90004ec8:	4618      	mov	r0, r3
90004eca:	f006 f914 	bl	9000b0f6 <USB_ReadChInterrupts>
90004ece:	4603      	mov	r3, r0
90004ed0:	f003 0301 	and.w	r3, r3, #1
90004ed4:	2b01      	cmp	r3, #1
90004ed6:	d168      	bne.n	90004faa <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004ed8:	78fa      	ldrb	r2, [r7, #3]
90004eda:	6879      	ldr	r1, [r7, #4]
90004edc:	4613      	mov	r3, r2
90004ede:	011b      	lsls	r3, r3, #4
90004ee0:	1a9b      	subs	r3, r3, r2
90004ee2:	009b      	lsls	r3, r3, #2
90004ee4:	440b      	add	r3, r1
90004ee6:	3344      	adds	r3, #68	@ 0x44
90004ee8:	2200      	movs	r2, #0
90004eea:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004eec:	687b      	ldr	r3, [r7, #4]
90004eee:	681b      	ldr	r3, [r3, #0]
90004ef0:	78fa      	ldrb	r2, [r7, #3]
90004ef2:	4611      	mov	r1, r2
90004ef4:	4618      	mov	r0, r3
90004ef6:	f006 f8fe 	bl	9000b0f6 <USB_ReadChInterrupts>
90004efa:	4603      	mov	r3, r0
90004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004f00:	2b40      	cmp	r3, #64	@ 0x40
90004f02:	d112      	bne.n	90004f2a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004f04:	78fa      	ldrb	r2, [r7, #3]
90004f06:	6879      	ldr	r1, [r7, #4]
90004f08:	4613      	mov	r3, r2
90004f0a:	011b      	lsls	r3, r3, #4
90004f0c:	1a9b      	subs	r3, r3, r2
90004f0e:	009b      	lsls	r3, r3, #2
90004f10:	440b      	add	r3, r1
90004f12:	3319      	adds	r3, #25
90004f14:	2201      	movs	r2, #1
90004f16:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004f18:	78fb      	ldrb	r3, [r7, #3]
90004f1a:	015a      	lsls	r2, r3, #5
90004f1c:	693b      	ldr	r3, [r7, #16]
90004f1e:	4413      	add	r3, r2
90004f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f24:	461a      	mov	r2, r3
90004f26:	2340      	movs	r3, #64	@ 0x40
90004f28:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90004f2a:	78fa      	ldrb	r2, [r7, #3]
90004f2c:	6879      	ldr	r1, [r7, #4]
90004f2e:	4613      	mov	r3, r2
90004f30:	011b      	lsls	r3, r3, #4
90004f32:	1a9b      	subs	r3, r3, r2
90004f34:	009b      	lsls	r3, r3, #2
90004f36:	440b      	add	r3, r1
90004f38:	331b      	adds	r3, #27
90004f3a:	781b      	ldrb	r3, [r3, #0]
90004f3c:	2b00      	cmp	r3, #0
90004f3e:	d019      	beq.n	90004f74 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004f40:	78fa      	ldrb	r2, [r7, #3]
90004f42:	6879      	ldr	r1, [r7, #4]
90004f44:	4613      	mov	r3, r2
90004f46:	011b      	lsls	r3, r3, #4
90004f48:	1a9b      	subs	r3, r3, r2
90004f4a:	009b      	lsls	r3, r3, #2
90004f4c:	440b      	add	r3, r1
90004f4e:	331b      	adds	r3, #27
90004f50:	2200      	movs	r2, #0
90004f52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004f54:	78fb      	ldrb	r3, [r7, #3]
90004f56:	015a      	lsls	r2, r3, #5
90004f58:	693b      	ldr	r3, [r7, #16]
90004f5a:	4413      	add	r3, r2
90004f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f60:	685b      	ldr	r3, [r3, #4]
90004f62:	78fa      	ldrb	r2, [r7, #3]
90004f64:	0151      	lsls	r1, r2, #5
90004f66:	693a      	ldr	r2, [r7, #16]
90004f68:	440a      	add	r2, r1
90004f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004f72:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004f74:	78fb      	ldrb	r3, [r7, #3]
90004f76:	015a      	lsls	r2, r3, #5
90004f78:	693b      	ldr	r3, [r7, #16]
90004f7a:	4413      	add	r3, r2
90004f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f80:	461a      	mov	r2, r3
90004f82:	2301      	movs	r3, #1
90004f84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
90004f86:	78fa      	ldrb	r2, [r7, #3]
90004f88:	6879      	ldr	r1, [r7, #4]
90004f8a:	4613      	mov	r3, r2
90004f8c:	011b      	lsls	r3, r3, #4
90004f8e:	1a9b      	subs	r3, r3, r2
90004f90:	009b      	lsls	r3, r3, #2
90004f92:	440b      	add	r3, r1
90004f94:	334d      	adds	r3, #77	@ 0x4d
90004f96:	2201      	movs	r2, #1
90004f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f9a:	687b      	ldr	r3, [r7, #4]
90004f9c:	681b      	ldr	r3, [r3, #0]
90004f9e:	78fa      	ldrb	r2, [r7, #3]
90004fa0:	4611      	mov	r1, r2
90004fa2:	4618      	mov	r0, r3
90004fa4:	f006 f924 	bl	9000b1f0 <USB_HC_Halt>
90004fa8:	e365      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004faa:	687b      	ldr	r3, [r7, #4]
90004fac:	681b      	ldr	r3, [r3, #0]
90004fae:	78fa      	ldrb	r2, [r7, #3]
90004fb0:	4611      	mov	r1, r2
90004fb2:	4618      	mov	r0, r3
90004fb4:	f006 f89f 	bl	9000b0f6 <USB_ReadChInterrupts>
90004fb8:	4603      	mov	r3, r0
90004fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004fbe:	2b40      	cmp	r3, #64	@ 0x40
90004fc0:	d139      	bne.n	90005036 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
90004fc2:	78fa      	ldrb	r2, [r7, #3]
90004fc4:	6879      	ldr	r1, [r7, #4]
90004fc6:	4613      	mov	r3, r2
90004fc8:	011b      	lsls	r3, r3, #4
90004fca:	1a9b      	subs	r3, r3, r2
90004fcc:	009b      	lsls	r3, r3, #2
90004fce:	440b      	add	r3, r1
90004fd0:	334d      	adds	r3, #77	@ 0x4d
90004fd2:	2205      	movs	r2, #5
90004fd4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004fd6:	78fa      	ldrb	r2, [r7, #3]
90004fd8:	6879      	ldr	r1, [r7, #4]
90004fda:	4613      	mov	r3, r2
90004fdc:	011b      	lsls	r3, r3, #4
90004fde:	1a9b      	subs	r3, r3, r2
90004fe0:	009b      	lsls	r3, r3, #2
90004fe2:	440b      	add	r3, r1
90004fe4:	331a      	adds	r3, #26
90004fe6:	781b      	ldrb	r3, [r3, #0]
90004fe8:	2b00      	cmp	r3, #0
90004fea:	d109      	bne.n	90005000 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004fec:	78fa      	ldrb	r2, [r7, #3]
90004fee:	6879      	ldr	r1, [r7, #4]
90004ff0:	4613      	mov	r3, r2
90004ff2:	011b      	lsls	r3, r3, #4
90004ff4:	1a9b      	subs	r3, r3, r2
90004ff6:	009b      	lsls	r3, r3, #2
90004ff8:	440b      	add	r3, r1
90004ffa:	3319      	adds	r3, #25
90004ffc:	2201      	movs	r2, #1
90004ffe:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005000:	78fa      	ldrb	r2, [r7, #3]
90005002:	6879      	ldr	r1, [r7, #4]
90005004:	4613      	mov	r3, r2
90005006:	011b      	lsls	r3, r3, #4
90005008:	1a9b      	subs	r3, r3, r2
9000500a:	009b      	lsls	r3, r3, #2
9000500c:	440b      	add	r3, r1
9000500e:	3344      	adds	r3, #68	@ 0x44
90005010:	2200      	movs	r2, #0
90005012:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005014:	687b      	ldr	r3, [r7, #4]
90005016:	681b      	ldr	r3, [r3, #0]
90005018:	78fa      	ldrb	r2, [r7, #3]
9000501a:	4611      	mov	r1, r2
9000501c:	4618      	mov	r0, r3
9000501e:	f006 f8e7 	bl	9000b1f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005022:	78fb      	ldrb	r3, [r7, #3]
90005024:	015a      	lsls	r2, r3, #5
90005026:	693b      	ldr	r3, [r7, #16]
90005028:	4413      	add	r3, r2
9000502a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000502e:	461a      	mov	r2, r3
90005030:	2340      	movs	r3, #64	@ 0x40
90005032:	6093      	str	r3, [r2, #8]
90005034:	e31f      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90005036:	687b      	ldr	r3, [r7, #4]
90005038:	681b      	ldr	r3, [r3, #0]
9000503a:	78fa      	ldrb	r2, [r7, #3]
9000503c:	4611      	mov	r1, r2
9000503e:	4618      	mov	r0, r3
90005040:	f006 f859 	bl	9000b0f6 <USB_ReadChInterrupts>
90005044:	4603      	mov	r3, r0
90005046:	f003 0308 	and.w	r3, r3, #8
9000504a:	2b08      	cmp	r3, #8
9000504c:	d11a      	bne.n	90005084 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000504e:	78fb      	ldrb	r3, [r7, #3]
90005050:	015a      	lsls	r2, r3, #5
90005052:	693b      	ldr	r3, [r7, #16]
90005054:	4413      	add	r3, r2
90005056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000505a:	461a      	mov	r2, r3
9000505c:	2308      	movs	r3, #8
9000505e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90005060:	78fa      	ldrb	r2, [r7, #3]
90005062:	6879      	ldr	r1, [r7, #4]
90005064:	4613      	mov	r3, r2
90005066:	011b      	lsls	r3, r3, #4
90005068:	1a9b      	subs	r3, r3, r2
9000506a:	009b      	lsls	r3, r3, #2
9000506c:	440b      	add	r3, r1
9000506e:	334d      	adds	r3, #77	@ 0x4d
90005070:	2206      	movs	r2, #6
90005072:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005074:	687b      	ldr	r3, [r7, #4]
90005076:	681b      	ldr	r3, [r3, #0]
90005078:	78fa      	ldrb	r2, [r7, #3]
9000507a:	4611      	mov	r1, r2
9000507c:	4618      	mov	r0, r3
9000507e:	f006 f8b7 	bl	9000b1f0 <USB_HC_Halt>
90005082:	e2f8      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90005084:	687b      	ldr	r3, [r7, #4]
90005086:	681b      	ldr	r3, [r3, #0]
90005088:	78fa      	ldrb	r2, [r7, #3]
9000508a:	4611      	mov	r1, r2
9000508c:	4618      	mov	r0, r3
9000508e:	f006 f832 	bl	9000b0f6 <USB_ReadChInterrupts>
90005092:	4603      	mov	r3, r0
90005094:	f003 0310 	and.w	r3, r3, #16
90005098:	2b10      	cmp	r3, #16
9000509a:	d144      	bne.n	90005126 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
9000509c:	78fa      	ldrb	r2, [r7, #3]
9000509e:	6879      	ldr	r1, [r7, #4]
900050a0:	4613      	mov	r3, r2
900050a2:	011b      	lsls	r3, r3, #4
900050a4:	1a9b      	subs	r3, r3, r2
900050a6:	009b      	lsls	r3, r3, #2
900050a8:	440b      	add	r3, r1
900050aa:	3344      	adds	r3, #68	@ 0x44
900050ac:	2200      	movs	r2, #0
900050ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
900050b0:	78fa      	ldrb	r2, [r7, #3]
900050b2:	6879      	ldr	r1, [r7, #4]
900050b4:	4613      	mov	r3, r2
900050b6:	011b      	lsls	r3, r3, #4
900050b8:	1a9b      	subs	r3, r3, r2
900050ba:	009b      	lsls	r3, r3, #2
900050bc:	440b      	add	r3, r1
900050be:	334d      	adds	r3, #77	@ 0x4d
900050c0:	2204      	movs	r2, #4
900050c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
900050c4:	78fa      	ldrb	r2, [r7, #3]
900050c6:	6879      	ldr	r1, [r7, #4]
900050c8:	4613      	mov	r3, r2
900050ca:	011b      	lsls	r3, r3, #4
900050cc:	1a9b      	subs	r3, r3, r2
900050ce:	009b      	lsls	r3, r3, #2
900050d0:	440b      	add	r3, r1
900050d2:	3319      	adds	r3, #25
900050d4:	781b      	ldrb	r3, [r3, #0]
900050d6:	2b00      	cmp	r3, #0
900050d8:	d114      	bne.n	90005104 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
900050da:	78fa      	ldrb	r2, [r7, #3]
900050dc:	6879      	ldr	r1, [r7, #4]
900050de:	4613      	mov	r3, r2
900050e0:	011b      	lsls	r3, r3, #4
900050e2:	1a9b      	subs	r3, r3, r2
900050e4:	009b      	lsls	r3, r3, #2
900050e6:	440b      	add	r3, r1
900050e8:	3318      	adds	r3, #24
900050ea:	781b      	ldrb	r3, [r3, #0]
900050ec:	2b00      	cmp	r3, #0
900050ee:	d109      	bne.n	90005104 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
900050f0:	78fa      	ldrb	r2, [r7, #3]
900050f2:	6879      	ldr	r1, [r7, #4]
900050f4:	4613      	mov	r3, r2
900050f6:	011b      	lsls	r3, r3, #4
900050f8:	1a9b      	subs	r3, r3, r2
900050fa:	009b      	lsls	r3, r3, #2
900050fc:	440b      	add	r3, r1
900050fe:	3319      	adds	r3, #25
90005100:	2201      	movs	r2, #1
90005102:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005104:	687b      	ldr	r3, [r7, #4]
90005106:	681b      	ldr	r3, [r3, #0]
90005108:	78fa      	ldrb	r2, [r7, #3]
9000510a:	4611      	mov	r1, r2
9000510c:	4618      	mov	r0, r3
9000510e:	f006 f86f 	bl	9000b1f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90005112:	78fb      	ldrb	r3, [r7, #3]
90005114:	015a      	lsls	r2, r3, #5
90005116:	693b      	ldr	r3, [r7, #16]
90005118:	4413      	add	r3, r2
9000511a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000511e:	461a      	mov	r2, r3
90005120:	2310      	movs	r3, #16
90005122:	6093      	str	r3, [r2, #8]
90005124:	e2a7      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005126:	687b      	ldr	r3, [r7, #4]
90005128:	681b      	ldr	r3, [r3, #0]
9000512a:	78fa      	ldrb	r2, [r7, #3]
9000512c:	4611      	mov	r1, r2
9000512e:	4618      	mov	r0, r3
90005130:	f005 ffe1 	bl	9000b0f6 <USB_ReadChInterrupts>
90005134:	4603      	mov	r3, r0
90005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000513a:	2b80      	cmp	r3, #128	@ 0x80
9000513c:	f040 8083 	bne.w	90005246 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
90005140:	687b      	ldr	r3, [r7, #4]
90005142:	799b      	ldrb	r3, [r3, #6]
90005144:	2b00      	cmp	r3, #0
90005146:	d111      	bne.n	9000516c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005148:	78fa      	ldrb	r2, [r7, #3]
9000514a:	6879      	ldr	r1, [r7, #4]
9000514c:	4613      	mov	r3, r2
9000514e:	011b      	lsls	r3, r3, #4
90005150:	1a9b      	subs	r3, r3, r2
90005152:	009b      	lsls	r3, r3, #2
90005154:	440b      	add	r3, r1
90005156:	334d      	adds	r3, #77	@ 0x4d
90005158:	2207      	movs	r2, #7
9000515a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000515c:	687b      	ldr	r3, [r7, #4]
9000515e:	681b      	ldr	r3, [r3, #0]
90005160:	78fa      	ldrb	r2, [r7, #3]
90005162:	4611      	mov	r1, r2
90005164:	4618      	mov	r0, r3
90005166:	f006 f843 	bl	9000b1f0 <USB_HC_Halt>
9000516a:	e062      	b.n	90005232 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
9000516c:	78fa      	ldrb	r2, [r7, #3]
9000516e:	6879      	ldr	r1, [r7, #4]
90005170:	4613      	mov	r3, r2
90005172:	011b      	lsls	r3, r3, #4
90005174:	1a9b      	subs	r3, r3, r2
90005176:	009b      	lsls	r3, r3, #2
90005178:	440b      	add	r3, r1
9000517a:	3344      	adds	r3, #68	@ 0x44
9000517c:	681b      	ldr	r3, [r3, #0]
9000517e:	1c59      	adds	r1, r3, #1
90005180:	6878      	ldr	r0, [r7, #4]
90005182:	4613      	mov	r3, r2
90005184:	011b      	lsls	r3, r3, #4
90005186:	1a9b      	subs	r3, r3, r2
90005188:	009b      	lsls	r3, r3, #2
9000518a:	4403      	add	r3, r0
9000518c:	3344      	adds	r3, #68	@ 0x44
9000518e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005190:	78fa      	ldrb	r2, [r7, #3]
90005192:	6879      	ldr	r1, [r7, #4]
90005194:	4613      	mov	r3, r2
90005196:	011b      	lsls	r3, r3, #4
90005198:	1a9b      	subs	r3, r3, r2
9000519a:	009b      	lsls	r3, r3, #2
9000519c:	440b      	add	r3, r1
9000519e:	3344      	adds	r3, #68	@ 0x44
900051a0:	681b      	ldr	r3, [r3, #0]
900051a2:	2b02      	cmp	r3, #2
900051a4:	d922      	bls.n	900051ec <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900051a6:	78fa      	ldrb	r2, [r7, #3]
900051a8:	6879      	ldr	r1, [r7, #4]
900051aa:	4613      	mov	r3, r2
900051ac:	011b      	lsls	r3, r3, #4
900051ae:	1a9b      	subs	r3, r3, r2
900051b0:	009b      	lsls	r3, r3, #2
900051b2:	440b      	add	r3, r1
900051b4:	3344      	adds	r3, #68	@ 0x44
900051b6:	2200      	movs	r2, #0
900051b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900051ba:	78fa      	ldrb	r2, [r7, #3]
900051bc:	6879      	ldr	r1, [r7, #4]
900051be:	4613      	mov	r3, r2
900051c0:	011b      	lsls	r3, r3, #4
900051c2:	1a9b      	subs	r3, r3, r2
900051c4:	009b      	lsls	r3, r3, #2
900051c6:	440b      	add	r3, r1
900051c8:	334c      	adds	r3, #76	@ 0x4c
900051ca:	2204      	movs	r2, #4
900051cc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900051ce:	78fa      	ldrb	r2, [r7, #3]
900051d0:	6879      	ldr	r1, [r7, #4]
900051d2:	4613      	mov	r3, r2
900051d4:	011b      	lsls	r3, r3, #4
900051d6:	1a9b      	subs	r3, r3, r2
900051d8:	009b      	lsls	r3, r3, #2
900051da:	440b      	add	r3, r1
900051dc:	334c      	adds	r3, #76	@ 0x4c
900051de:	781a      	ldrb	r2, [r3, #0]
900051e0:	78fb      	ldrb	r3, [r7, #3]
900051e2:	4619      	mov	r1, r3
900051e4:	6878      	ldr	r0, [r7, #4]
900051e6:	f7fc f80f 	bl	90001208 <HAL_HCD_HC_NotifyURBChange_Callback>
900051ea:	e022      	b.n	90005232 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900051ec:	78fa      	ldrb	r2, [r7, #3]
900051ee:	6879      	ldr	r1, [r7, #4]
900051f0:	4613      	mov	r3, r2
900051f2:	011b      	lsls	r3, r3, #4
900051f4:	1a9b      	subs	r3, r3, r2
900051f6:	009b      	lsls	r3, r3, #2
900051f8:	440b      	add	r3, r1
900051fa:	334c      	adds	r3, #76	@ 0x4c
900051fc:	2202      	movs	r2, #2
900051fe:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005200:	78fb      	ldrb	r3, [r7, #3]
90005202:	015a      	lsls	r2, r3, #5
90005204:	693b      	ldr	r3, [r7, #16]
90005206:	4413      	add	r3, r2
90005208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000520c:	681b      	ldr	r3, [r3, #0]
9000520e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005210:	68fb      	ldr	r3, [r7, #12]
90005212:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005216:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005218:	68fb      	ldr	r3, [r7, #12]
9000521a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000521e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005220:	78fb      	ldrb	r3, [r7, #3]
90005222:	015a      	lsls	r2, r3, #5
90005224:	693b      	ldr	r3, [r7, #16]
90005226:	4413      	add	r3, r2
90005228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000522c:	461a      	mov	r2, r3
9000522e:	68fb      	ldr	r3, [r7, #12]
90005230:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90005232:	78fb      	ldrb	r3, [r7, #3]
90005234:	015a      	lsls	r2, r3, #5
90005236:	693b      	ldr	r3, [r7, #16]
90005238:	4413      	add	r3, r2
9000523a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000523e:	461a      	mov	r2, r3
90005240:	2380      	movs	r3, #128	@ 0x80
90005242:	6093      	str	r3, [r2, #8]
90005244:	e217      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90005246:	687b      	ldr	r3, [r7, #4]
90005248:	681b      	ldr	r3, [r3, #0]
9000524a:	78fa      	ldrb	r2, [r7, #3]
9000524c:	4611      	mov	r1, r2
9000524e:	4618      	mov	r0, r3
90005250:	f005 ff51 	bl	9000b0f6 <USB_ReadChInterrupts>
90005254:	4603      	mov	r3, r0
90005256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000525a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000525e:	d11b      	bne.n	90005298 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005260:	78fa      	ldrb	r2, [r7, #3]
90005262:	6879      	ldr	r1, [r7, #4]
90005264:	4613      	mov	r3, r2
90005266:	011b      	lsls	r3, r3, #4
90005268:	1a9b      	subs	r3, r3, r2
9000526a:	009b      	lsls	r3, r3, #2
9000526c:	440b      	add	r3, r1
9000526e:	334d      	adds	r3, #77	@ 0x4d
90005270:	2209      	movs	r2, #9
90005272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005274:	687b      	ldr	r3, [r7, #4]
90005276:	681b      	ldr	r3, [r3, #0]
90005278:	78fa      	ldrb	r2, [r7, #3]
9000527a:	4611      	mov	r1, r2
9000527c:	4618      	mov	r0, r3
9000527e:	f005 ffb7 	bl	9000b1f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90005282:	78fb      	ldrb	r3, [r7, #3]
90005284:	015a      	lsls	r2, r3, #5
90005286:	693b      	ldr	r3, [r7, #16]
90005288:	4413      	add	r3, r2
9000528a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000528e:	461a      	mov	r2, r3
90005290:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005294:	6093      	str	r3, [r2, #8]
90005296:	e1ee      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90005298:	687b      	ldr	r3, [r7, #4]
9000529a:	681b      	ldr	r3, [r3, #0]
9000529c:	78fa      	ldrb	r2, [r7, #3]
9000529e:	4611      	mov	r1, r2
900052a0:	4618      	mov	r0, r3
900052a2:	f005 ff28 	bl	9000b0f6 <USB_ReadChInterrupts>
900052a6:	4603      	mov	r3, r0
900052a8:	f003 0302 	and.w	r3, r3, #2
900052ac:	2b02      	cmp	r3, #2
900052ae:	f040 81df 	bne.w	90005670 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900052b2:	78fb      	ldrb	r3, [r7, #3]
900052b4:	015a      	lsls	r2, r3, #5
900052b6:	693b      	ldr	r3, [r7, #16]
900052b8:	4413      	add	r3, r2
900052ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900052be:	461a      	mov	r2, r3
900052c0:	2302      	movs	r3, #2
900052c2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900052c4:	78fa      	ldrb	r2, [r7, #3]
900052c6:	6879      	ldr	r1, [r7, #4]
900052c8:	4613      	mov	r3, r2
900052ca:	011b      	lsls	r3, r3, #4
900052cc:	1a9b      	subs	r3, r3, r2
900052ce:	009b      	lsls	r3, r3, #2
900052d0:	440b      	add	r3, r1
900052d2:	334d      	adds	r3, #77	@ 0x4d
900052d4:	781b      	ldrb	r3, [r3, #0]
900052d6:	2b01      	cmp	r3, #1
900052d8:	f040 8093 	bne.w	90005402 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900052dc:	78fa      	ldrb	r2, [r7, #3]
900052de:	6879      	ldr	r1, [r7, #4]
900052e0:	4613      	mov	r3, r2
900052e2:	011b      	lsls	r3, r3, #4
900052e4:	1a9b      	subs	r3, r3, r2
900052e6:	009b      	lsls	r3, r3, #2
900052e8:	440b      	add	r3, r1
900052ea:	334d      	adds	r3, #77	@ 0x4d
900052ec:	2202      	movs	r2, #2
900052ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900052f0:	78fa      	ldrb	r2, [r7, #3]
900052f2:	6879      	ldr	r1, [r7, #4]
900052f4:	4613      	mov	r3, r2
900052f6:	011b      	lsls	r3, r3, #4
900052f8:	1a9b      	subs	r3, r3, r2
900052fa:	009b      	lsls	r3, r3, #2
900052fc:	440b      	add	r3, r1
900052fe:	334c      	adds	r3, #76	@ 0x4c
90005300:	2201      	movs	r2, #1
90005302:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005304:	78fa      	ldrb	r2, [r7, #3]
90005306:	6879      	ldr	r1, [r7, #4]
90005308:	4613      	mov	r3, r2
9000530a:	011b      	lsls	r3, r3, #4
9000530c:	1a9b      	subs	r3, r3, r2
9000530e:	009b      	lsls	r3, r3, #2
90005310:	440b      	add	r3, r1
90005312:	3326      	adds	r3, #38	@ 0x26
90005314:	781b      	ldrb	r3, [r3, #0]
90005316:	2b02      	cmp	r3, #2
90005318:	d00b      	beq.n	90005332 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
9000531a:	78fa      	ldrb	r2, [r7, #3]
9000531c:	6879      	ldr	r1, [r7, #4]
9000531e:	4613      	mov	r3, r2
90005320:	011b      	lsls	r3, r3, #4
90005322:	1a9b      	subs	r3, r3, r2
90005324:	009b      	lsls	r3, r3, #2
90005326:	440b      	add	r3, r1
90005328:	3326      	adds	r3, #38	@ 0x26
9000532a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
9000532c:	2b03      	cmp	r3, #3
9000532e:	f040 8190 	bne.w	90005652 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
90005332:	687b      	ldr	r3, [r7, #4]
90005334:	799b      	ldrb	r3, [r3, #6]
90005336:	2b00      	cmp	r3, #0
90005338:	d115      	bne.n	90005366 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
9000533a:	78fa      	ldrb	r2, [r7, #3]
9000533c:	6879      	ldr	r1, [r7, #4]
9000533e:	4613      	mov	r3, r2
90005340:	011b      	lsls	r3, r3, #4
90005342:	1a9b      	subs	r3, r3, r2
90005344:	009b      	lsls	r3, r3, #2
90005346:	440b      	add	r3, r1
90005348:	333d      	adds	r3, #61	@ 0x3d
9000534a:	781b      	ldrb	r3, [r3, #0]
9000534c:	78fa      	ldrb	r2, [r7, #3]
9000534e:	f083 0301 	eor.w	r3, r3, #1
90005352:	b2d8      	uxtb	r0, r3
90005354:	6879      	ldr	r1, [r7, #4]
90005356:	4613      	mov	r3, r2
90005358:	011b      	lsls	r3, r3, #4
9000535a:	1a9b      	subs	r3, r3, r2
9000535c:	009b      	lsls	r3, r3, #2
9000535e:	440b      	add	r3, r1
90005360:	333d      	adds	r3, #61	@ 0x3d
90005362:	4602      	mov	r2, r0
90005364:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
90005366:	687b      	ldr	r3, [r7, #4]
90005368:	799b      	ldrb	r3, [r3, #6]
9000536a:	2b01      	cmp	r3, #1
9000536c:	f040 8171 	bne.w	90005652 <HCD_HC_OUT_IRQHandler+0x954>
90005370:	78fa      	ldrb	r2, [r7, #3]
90005372:	6879      	ldr	r1, [r7, #4]
90005374:	4613      	mov	r3, r2
90005376:	011b      	lsls	r3, r3, #4
90005378:	1a9b      	subs	r3, r3, r2
9000537a:	009b      	lsls	r3, r3, #2
9000537c:	440b      	add	r3, r1
9000537e:	3334      	adds	r3, #52	@ 0x34
90005380:	681b      	ldr	r3, [r3, #0]
90005382:	2b00      	cmp	r3, #0
90005384:	f000 8165 	beq.w	90005652 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
90005388:	78fa      	ldrb	r2, [r7, #3]
9000538a:	6879      	ldr	r1, [r7, #4]
9000538c:	4613      	mov	r3, r2
9000538e:	011b      	lsls	r3, r3, #4
90005390:	1a9b      	subs	r3, r3, r2
90005392:	009b      	lsls	r3, r3, #2
90005394:	440b      	add	r3, r1
90005396:	3334      	adds	r3, #52	@ 0x34
90005398:	6819      	ldr	r1, [r3, #0]
9000539a:	78fa      	ldrb	r2, [r7, #3]
9000539c:	6878      	ldr	r0, [r7, #4]
9000539e:	4613      	mov	r3, r2
900053a0:	011b      	lsls	r3, r3, #4
900053a2:	1a9b      	subs	r3, r3, r2
900053a4:	009b      	lsls	r3, r3, #2
900053a6:	4403      	add	r3, r0
900053a8:	3328      	adds	r3, #40	@ 0x28
900053aa:	881b      	ldrh	r3, [r3, #0]
900053ac:	440b      	add	r3, r1
900053ae:	1e59      	subs	r1, r3, #1
900053b0:	78fa      	ldrb	r2, [r7, #3]
900053b2:	6878      	ldr	r0, [r7, #4]
900053b4:	4613      	mov	r3, r2
900053b6:	011b      	lsls	r3, r3, #4
900053b8:	1a9b      	subs	r3, r3, r2
900053ba:	009b      	lsls	r3, r3, #2
900053bc:	4403      	add	r3, r0
900053be:	3328      	adds	r3, #40	@ 0x28
900053c0:	881b      	ldrh	r3, [r3, #0]
900053c2:	fbb1 f3f3 	udiv	r3, r1, r3
900053c6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
900053c8:	68bb      	ldr	r3, [r7, #8]
900053ca:	f003 0301 	and.w	r3, r3, #1
900053ce:	2b00      	cmp	r3, #0
900053d0:	f000 813f 	beq.w	90005652 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
900053d4:	78fa      	ldrb	r2, [r7, #3]
900053d6:	6879      	ldr	r1, [r7, #4]
900053d8:	4613      	mov	r3, r2
900053da:	011b      	lsls	r3, r3, #4
900053dc:	1a9b      	subs	r3, r3, r2
900053de:	009b      	lsls	r3, r3, #2
900053e0:	440b      	add	r3, r1
900053e2:	333d      	adds	r3, #61	@ 0x3d
900053e4:	781b      	ldrb	r3, [r3, #0]
900053e6:	78fa      	ldrb	r2, [r7, #3]
900053e8:	f083 0301 	eor.w	r3, r3, #1
900053ec:	b2d8      	uxtb	r0, r3
900053ee:	6879      	ldr	r1, [r7, #4]
900053f0:	4613      	mov	r3, r2
900053f2:	011b      	lsls	r3, r3, #4
900053f4:	1a9b      	subs	r3, r3, r2
900053f6:	009b      	lsls	r3, r3, #2
900053f8:	440b      	add	r3, r1
900053fa:	333d      	adds	r3, #61	@ 0x3d
900053fc:	4602      	mov	r2, r0
900053fe:	701a      	strb	r2, [r3, #0]
90005400:	e127      	b.n	90005652 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005402:	78fa      	ldrb	r2, [r7, #3]
90005404:	6879      	ldr	r1, [r7, #4]
90005406:	4613      	mov	r3, r2
90005408:	011b      	lsls	r3, r3, #4
9000540a:	1a9b      	subs	r3, r3, r2
9000540c:	009b      	lsls	r3, r3, #2
9000540e:	440b      	add	r3, r1
90005410:	334d      	adds	r3, #77	@ 0x4d
90005412:	781b      	ldrb	r3, [r3, #0]
90005414:	2b03      	cmp	r3, #3
90005416:	d120      	bne.n	9000545a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005418:	78fa      	ldrb	r2, [r7, #3]
9000541a:	6879      	ldr	r1, [r7, #4]
9000541c:	4613      	mov	r3, r2
9000541e:	011b      	lsls	r3, r3, #4
90005420:	1a9b      	subs	r3, r3, r2
90005422:	009b      	lsls	r3, r3, #2
90005424:	440b      	add	r3, r1
90005426:	334d      	adds	r3, #77	@ 0x4d
90005428:	2202      	movs	r2, #2
9000542a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000542c:	78fa      	ldrb	r2, [r7, #3]
9000542e:	6879      	ldr	r1, [r7, #4]
90005430:	4613      	mov	r3, r2
90005432:	011b      	lsls	r3, r3, #4
90005434:	1a9b      	subs	r3, r3, r2
90005436:	009b      	lsls	r3, r3, #2
90005438:	440b      	add	r3, r1
9000543a:	331b      	adds	r3, #27
9000543c:	781b      	ldrb	r3, [r3, #0]
9000543e:	2b01      	cmp	r3, #1
90005440:	f040 8107 	bne.w	90005652 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005444:	78fa      	ldrb	r2, [r7, #3]
90005446:	6879      	ldr	r1, [r7, #4]
90005448:	4613      	mov	r3, r2
9000544a:	011b      	lsls	r3, r3, #4
9000544c:	1a9b      	subs	r3, r3, r2
9000544e:	009b      	lsls	r3, r3, #2
90005450:	440b      	add	r3, r1
90005452:	334c      	adds	r3, #76	@ 0x4c
90005454:	2202      	movs	r2, #2
90005456:	701a      	strb	r2, [r3, #0]
90005458:	e0fb      	b.n	90005652 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
9000545a:	78fa      	ldrb	r2, [r7, #3]
9000545c:	6879      	ldr	r1, [r7, #4]
9000545e:	4613      	mov	r3, r2
90005460:	011b      	lsls	r3, r3, #4
90005462:	1a9b      	subs	r3, r3, r2
90005464:	009b      	lsls	r3, r3, #2
90005466:	440b      	add	r3, r1
90005468:	334d      	adds	r3, #77	@ 0x4d
9000546a:	781b      	ldrb	r3, [r3, #0]
9000546c:	2b04      	cmp	r3, #4
9000546e:	d13a      	bne.n	900054e6 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005470:	78fa      	ldrb	r2, [r7, #3]
90005472:	6879      	ldr	r1, [r7, #4]
90005474:	4613      	mov	r3, r2
90005476:	011b      	lsls	r3, r3, #4
90005478:	1a9b      	subs	r3, r3, r2
9000547a:	009b      	lsls	r3, r3, #2
9000547c:	440b      	add	r3, r1
9000547e:	334d      	adds	r3, #77	@ 0x4d
90005480:	2202      	movs	r2, #2
90005482:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005484:	78fa      	ldrb	r2, [r7, #3]
90005486:	6879      	ldr	r1, [r7, #4]
90005488:	4613      	mov	r3, r2
9000548a:	011b      	lsls	r3, r3, #4
9000548c:	1a9b      	subs	r3, r3, r2
9000548e:	009b      	lsls	r3, r3, #2
90005490:	440b      	add	r3, r1
90005492:	334c      	adds	r3, #76	@ 0x4c
90005494:	2202      	movs	r2, #2
90005496:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005498:	78fa      	ldrb	r2, [r7, #3]
9000549a:	6879      	ldr	r1, [r7, #4]
9000549c:	4613      	mov	r3, r2
9000549e:	011b      	lsls	r3, r3, #4
900054a0:	1a9b      	subs	r3, r3, r2
900054a2:	009b      	lsls	r3, r3, #2
900054a4:	440b      	add	r3, r1
900054a6:	331b      	adds	r3, #27
900054a8:	781b      	ldrb	r3, [r3, #0]
900054aa:	2b01      	cmp	r3, #1
900054ac:	f040 80d1 	bne.w	90005652 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
900054b0:	78fa      	ldrb	r2, [r7, #3]
900054b2:	6879      	ldr	r1, [r7, #4]
900054b4:	4613      	mov	r3, r2
900054b6:	011b      	lsls	r3, r3, #4
900054b8:	1a9b      	subs	r3, r3, r2
900054ba:	009b      	lsls	r3, r3, #2
900054bc:	440b      	add	r3, r1
900054be:	331b      	adds	r3, #27
900054c0:	2200      	movs	r2, #0
900054c2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900054c4:	78fb      	ldrb	r3, [r7, #3]
900054c6:	015a      	lsls	r2, r3, #5
900054c8:	693b      	ldr	r3, [r7, #16]
900054ca:	4413      	add	r3, r2
900054cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054d0:	685b      	ldr	r3, [r3, #4]
900054d2:	78fa      	ldrb	r2, [r7, #3]
900054d4:	0151      	lsls	r1, r2, #5
900054d6:	693a      	ldr	r2, [r7, #16]
900054d8:	440a      	add	r2, r1
900054da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900054de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900054e2:	6053      	str	r3, [r2, #4]
900054e4:	e0b5      	b.n	90005652 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900054e6:	78fa      	ldrb	r2, [r7, #3]
900054e8:	6879      	ldr	r1, [r7, #4]
900054ea:	4613      	mov	r3, r2
900054ec:	011b      	lsls	r3, r3, #4
900054ee:	1a9b      	subs	r3, r3, r2
900054f0:	009b      	lsls	r3, r3, #2
900054f2:	440b      	add	r3, r1
900054f4:	334d      	adds	r3, #77	@ 0x4d
900054f6:	781b      	ldrb	r3, [r3, #0]
900054f8:	2b05      	cmp	r3, #5
900054fa:	d114      	bne.n	90005526 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900054fc:	78fa      	ldrb	r2, [r7, #3]
900054fe:	6879      	ldr	r1, [r7, #4]
90005500:	4613      	mov	r3, r2
90005502:	011b      	lsls	r3, r3, #4
90005504:	1a9b      	subs	r3, r3, r2
90005506:	009b      	lsls	r3, r3, #2
90005508:	440b      	add	r3, r1
9000550a:	334d      	adds	r3, #77	@ 0x4d
9000550c:	2202      	movs	r2, #2
9000550e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005510:	78fa      	ldrb	r2, [r7, #3]
90005512:	6879      	ldr	r1, [r7, #4]
90005514:	4613      	mov	r3, r2
90005516:	011b      	lsls	r3, r3, #4
90005518:	1a9b      	subs	r3, r3, r2
9000551a:	009b      	lsls	r3, r3, #2
9000551c:	440b      	add	r3, r1
9000551e:	334c      	adds	r3, #76	@ 0x4c
90005520:	2202      	movs	r2, #2
90005522:	701a      	strb	r2, [r3, #0]
90005524:	e095      	b.n	90005652 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005526:	78fa      	ldrb	r2, [r7, #3]
90005528:	6879      	ldr	r1, [r7, #4]
9000552a:	4613      	mov	r3, r2
9000552c:	011b      	lsls	r3, r3, #4
9000552e:	1a9b      	subs	r3, r3, r2
90005530:	009b      	lsls	r3, r3, #2
90005532:	440b      	add	r3, r1
90005534:	334d      	adds	r3, #77	@ 0x4d
90005536:	781b      	ldrb	r3, [r3, #0]
90005538:	2b06      	cmp	r3, #6
9000553a:	d114      	bne.n	90005566 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000553c:	78fa      	ldrb	r2, [r7, #3]
9000553e:	6879      	ldr	r1, [r7, #4]
90005540:	4613      	mov	r3, r2
90005542:	011b      	lsls	r3, r3, #4
90005544:	1a9b      	subs	r3, r3, r2
90005546:	009b      	lsls	r3, r3, #2
90005548:	440b      	add	r3, r1
9000554a:	334d      	adds	r3, #77	@ 0x4d
9000554c:	2202      	movs	r2, #2
9000554e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
90005550:	78fa      	ldrb	r2, [r7, #3]
90005552:	6879      	ldr	r1, [r7, #4]
90005554:	4613      	mov	r3, r2
90005556:	011b      	lsls	r3, r3, #4
90005558:	1a9b      	subs	r3, r3, r2
9000555a:	009b      	lsls	r3, r3, #2
9000555c:	440b      	add	r3, r1
9000555e:	334c      	adds	r3, #76	@ 0x4c
90005560:	2205      	movs	r2, #5
90005562:	701a      	strb	r2, [r3, #0]
90005564:	e075      	b.n	90005652 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005566:	78fa      	ldrb	r2, [r7, #3]
90005568:	6879      	ldr	r1, [r7, #4]
9000556a:	4613      	mov	r3, r2
9000556c:	011b      	lsls	r3, r3, #4
9000556e:	1a9b      	subs	r3, r3, r2
90005570:	009b      	lsls	r3, r3, #2
90005572:	440b      	add	r3, r1
90005574:	334d      	adds	r3, #77	@ 0x4d
90005576:	781b      	ldrb	r3, [r3, #0]
90005578:	2b07      	cmp	r3, #7
9000557a:	d00a      	beq.n	90005592 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000557c:	78fa      	ldrb	r2, [r7, #3]
9000557e:	6879      	ldr	r1, [r7, #4]
90005580:	4613      	mov	r3, r2
90005582:	011b      	lsls	r3, r3, #4
90005584:	1a9b      	subs	r3, r3, r2
90005586:	009b      	lsls	r3, r3, #2
90005588:	440b      	add	r3, r1
9000558a:	334d      	adds	r3, #77	@ 0x4d
9000558c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000558e:	2b09      	cmp	r3, #9
90005590:	d170      	bne.n	90005674 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005592:	78fa      	ldrb	r2, [r7, #3]
90005594:	6879      	ldr	r1, [r7, #4]
90005596:	4613      	mov	r3, r2
90005598:	011b      	lsls	r3, r3, #4
9000559a:	1a9b      	subs	r3, r3, r2
9000559c:	009b      	lsls	r3, r3, #2
9000559e:	440b      	add	r3, r1
900055a0:	334d      	adds	r3, #77	@ 0x4d
900055a2:	2202      	movs	r2, #2
900055a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900055a6:	78fa      	ldrb	r2, [r7, #3]
900055a8:	6879      	ldr	r1, [r7, #4]
900055aa:	4613      	mov	r3, r2
900055ac:	011b      	lsls	r3, r3, #4
900055ae:	1a9b      	subs	r3, r3, r2
900055b0:	009b      	lsls	r3, r3, #2
900055b2:	440b      	add	r3, r1
900055b4:	3344      	adds	r3, #68	@ 0x44
900055b6:	681b      	ldr	r3, [r3, #0]
900055b8:	1c59      	adds	r1, r3, #1
900055ba:	6878      	ldr	r0, [r7, #4]
900055bc:	4613      	mov	r3, r2
900055be:	011b      	lsls	r3, r3, #4
900055c0:	1a9b      	subs	r3, r3, r2
900055c2:	009b      	lsls	r3, r3, #2
900055c4:	4403      	add	r3, r0
900055c6:	3344      	adds	r3, #68	@ 0x44
900055c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900055ca:	78fa      	ldrb	r2, [r7, #3]
900055cc:	6879      	ldr	r1, [r7, #4]
900055ce:	4613      	mov	r3, r2
900055d0:	011b      	lsls	r3, r3, #4
900055d2:	1a9b      	subs	r3, r3, r2
900055d4:	009b      	lsls	r3, r3, #2
900055d6:	440b      	add	r3, r1
900055d8:	3344      	adds	r3, #68	@ 0x44
900055da:	681b      	ldr	r3, [r3, #0]
900055dc:	2b02      	cmp	r3, #2
900055de:	d914      	bls.n	9000560a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900055e0:	78fa      	ldrb	r2, [r7, #3]
900055e2:	6879      	ldr	r1, [r7, #4]
900055e4:	4613      	mov	r3, r2
900055e6:	011b      	lsls	r3, r3, #4
900055e8:	1a9b      	subs	r3, r3, r2
900055ea:	009b      	lsls	r3, r3, #2
900055ec:	440b      	add	r3, r1
900055ee:	3344      	adds	r3, #68	@ 0x44
900055f0:	2200      	movs	r2, #0
900055f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900055f4:	78fa      	ldrb	r2, [r7, #3]
900055f6:	6879      	ldr	r1, [r7, #4]
900055f8:	4613      	mov	r3, r2
900055fa:	011b      	lsls	r3, r3, #4
900055fc:	1a9b      	subs	r3, r3, r2
900055fe:	009b      	lsls	r3, r3, #2
90005600:	440b      	add	r3, r1
90005602:	334c      	adds	r3, #76	@ 0x4c
90005604:	2204      	movs	r2, #4
90005606:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005608:	e022      	b.n	90005650 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000560a:	78fa      	ldrb	r2, [r7, #3]
9000560c:	6879      	ldr	r1, [r7, #4]
9000560e:	4613      	mov	r3, r2
90005610:	011b      	lsls	r3, r3, #4
90005612:	1a9b      	subs	r3, r3, r2
90005614:	009b      	lsls	r3, r3, #2
90005616:	440b      	add	r3, r1
90005618:	334c      	adds	r3, #76	@ 0x4c
9000561a:	2202      	movs	r2, #2
9000561c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000561e:	78fb      	ldrb	r3, [r7, #3]
90005620:	015a      	lsls	r2, r3, #5
90005622:	693b      	ldr	r3, [r7, #16]
90005624:	4413      	add	r3, r2
90005626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000562a:	681b      	ldr	r3, [r3, #0]
9000562c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000562e:	68fb      	ldr	r3, [r7, #12]
90005630:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005634:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005636:	68fb      	ldr	r3, [r7, #12]
90005638:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000563c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000563e:	78fb      	ldrb	r3, [r7, #3]
90005640:	015a      	lsls	r2, r3, #5
90005642:	693b      	ldr	r3, [r7, #16]
90005644:	4413      	add	r3, r2
90005646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000564a:	461a      	mov	r2, r3
9000564c:	68fb      	ldr	r3, [r7, #12]
9000564e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005650:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005652:	78fa      	ldrb	r2, [r7, #3]
90005654:	6879      	ldr	r1, [r7, #4]
90005656:	4613      	mov	r3, r2
90005658:	011b      	lsls	r3, r3, #4
9000565a:	1a9b      	subs	r3, r3, r2
9000565c:	009b      	lsls	r3, r3, #2
9000565e:	440b      	add	r3, r1
90005660:	334c      	adds	r3, #76	@ 0x4c
90005662:	781a      	ldrb	r2, [r3, #0]
90005664:	78fb      	ldrb	r3, [r7, #3]
90005666:	4619      	mov	r1, r3
90005668:	6878      	ldr	r0, [r7, #4]
9000566a:	f7fb fdcd 	bl	90001208 <HAL_HCD_HC_NotifyURBChange_Callback>
9000566e:	e002      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90005670:	bf00      	nop
90005672:	e000      	b.n	90005676 <HCD_HC_OUT_IRQHandler+0x978>
      return;
90005674:	bf00      	nop
  }
}
90005676:	3718      	adds	r7, #24
90005678:	46bd      	mov	sp, r7
9000567a:	bd80      	pop	{r7, pc}

9000567c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
9000567c:	b580      	push	{r7, lr}
9000567e:	b08a      	sub	sp, #40	@ 0x28
90005680:	af00      	add	r7, sp, #0
90005682:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005684:	687b      	ldr	r3, [r7, #4]
90005686:	681b      	ldr	r3, [r3, #0]
90005688:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
9000568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000568c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
9000568e:	687b      	ldr	r3, [r7, #4]
90005690:	681b      	ldr	r3, [r3, #0]
90005692:	6a1b      	ldr	r3, [r3, #32]
90005694:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
90005696:	69fb      	ldr	r3, [r7, #28]
90005698:	f003 030f 	and.w	r3, r3, #15
9000569c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
9000569e:	69fb      	ldr	r3, [r7, #28]
900056a0:	0c5b      	lsrs	r3, r3, #17
900056a2:	f003 030f 	and.w	r3, r3, #15
900056a6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
900056a8:	69fb      	ldr	r3, [r7, #28]
900056aa:	091b      	lsrs	r3, r3, #4
900056ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
900056b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
900056b2:	697b      	ldr	r3, [r7, #20]
900056b4:	2b02      	cmp	r3, #2
900056b6:	d004      	beq.n	900056c2 <HCD_RXQLVL_IRQHandler+0x46>
900056b8:	697b      	ldr	r3, [r7, #20]
900056ba:	2b05      	cmp	r3, #5
900056bc:	f000 80b6 	beq.w	9000582c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900056c0:	e0b7      	b.n	90005832 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900056c2:	693b      	ldr	r3, [r7, #16]
900056c4:	2b00      	cmp	r3, #0
900056c6:	f000 80b3 	beq.w	90005830 <HCD_RXQLVL_IRQHandler+0x1b4>
900056ca:	6879      	ldr	r1, [r7, #4]
900056cc:	69ba      	ldr	r2, [r7, #24]
900056ce:	4613      	mov	r3, r2
900056d0:	011b      	lsls	r3, r3, #4
900056d2:	1a9b      	subs	r3, r3, r2
900056d4:	009b      	lsls	r3, r3, #2
900056d6:	440b      	add	r3, r1
900056d8:	332c      	adds	r3, #44	@ 0x2c
900056da:	681b      	ldr	r3, [r3, #0]
900056dc:	2b00      	cmp	r3, #0
900056de:	f000 80a7 	beq.w	90005830 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
900056e2:	6879      	ldr	r1, [r7, #4]
900056e4:	69ba      	ldr	r2, [r7, #24]
900056e6:	4613      	mov	r3, r2
900056e8:	011b      	lsls	r3, r3, #4
900056ea:	1a9b      	subs	r3, r3, r2
900056ec:	009b      	lsls	r3, r3, #2
900056ee:	440b      	add	r3, r1
900056f0:	3338      	adds	r3, #56	@ 0x38
900056f2:	681a      	ldr	r2, [r3, #0]
900056f4:	693b      	ldr	r3, [r7, #16]
900056f6:	18d1      	adds	r1, r2, r3
900056f8:	6878      	ldr	r0, [r7, #4]
900056fa:	69ba      	ldr	r2, [r7, #24]
900056fc:	4613      	mov	r3, r2
900056fe:	011b      	lsls	r3, r3, #4
90005700:	1a9b      	subs	r3, r3, r2
90005702:	009b      	lsls	r3, r3, #2
90005704:	4403      	add	r3, r0
90005706:	3334      	adds	r3, #52	@ 0x34
90005708:	681b      	ldr	r3, [r3, #0]
9000570a:	4299      	cmp	r1, r3
9000570c:	f200 8083 	bhi.w	90005816 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90005710:	687b      	ldr	r3, [r7, #4]
90005712:	6818      	ldr	r0, [r3, #0]
90005714:	6879      	ldr	r1, [r7, #4]
90005716:	69ba      	ldr	r2, [r7, #24]
90005718:	4613      	mov	r3, r2
9000571a:	011b      	lsls	r3, r3, #4
9000571c:	1a9b      	subs	r3, r3, r2
9000571e:	009b      	lsls	r3, r3, #2
90005720:	440b      	add	r3, r1
90005722:	332c      	adds	r3, #44	@ 0x2c
90005724:	681b      	ldr	r3, [r3, #0]
90005726:	693a      	ldr	r2, [r7, #16]
90005728:	b292      	uxth	r2, r2
9000572a:	4619      	mov	r1, r3
9000572c:	f005 fc78 	bl	9000b020 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90005730:	6879      	ldr	r1, [r7, #4]
90005732:	69ba      	ldr	r2, [r7, #24]
90005734:	4613      	mov	r3, r2
90005736:	011b      	lsls	r3, r3, #4
90005738:	1a9b      	subs	r3, r3, r2
9000573a:	009b      	lsls	r3, r3, #2
9000573c:	440b      	add	r3, r1
9000573e:	332c      	adds	r3, #44	@ 0x2c
90005740:	681a      	ldr	r2, [r3, #0]
90005742:	693b      	ldr	r3, [r7, #16]
90005744:	18d1      	adds	r1, r2, r3
90005746:	6878      	ldr	r0, [r7, #4]
90005748:	69ba      	ldr	r2, [r7, #24]
9000574a:	4613      	mov	r3, r2
9000574c:	011b      	lsls	r3, r3, #4
9000574e:	1a9b      	subs	r3, r3, r2
90005750:	009b      	lsls	r3, r3, #2
90005752:	4403      	add	r3, r0
90005754:	332c      	adds	r3, #44	@ 0x2c
90005756:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005758:	6879      	ldr	r1, [r7, #4]
9000575a:	69ba      	ldr	r2, [r7, #24]
9000575c:	4613      	mov	r3, r2
9000575e:	011b      	lsls	r3, r3, #4
90005760:	1a9b      	subs	r3, r3, r2
90005762:	009b      	lsls	r3, r3, #2
90005764:	440b      	add	r3, r1
90005766:	3338      	adds	r3, #56	@ 0x38
90005768:	681a      	ldr	r2, [r3, #0]
9000576a:	693b      	ldr	r3, [r7, #16]
9000576c:	18d1      	adds	r1, r2, r3
9000576e:	6878      	ldr	r0, [r7, #4]
90005770:	69ba      	ldr	r2, [r7, #24]
90005772:	4613      	mov	r3, r2
90005774:	011b      	lsls	r3, r3, #4
90005776:	1a9b      	subs	r3, r3, r2
90005778:	009b      	lsls	r3, r3, #2
9000577a:	4403      	add	r3, r0
9000577c:	3338      	adds	r3, #56	@ 0x38
9000577e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005780:	69bb      	ldr	r3, [r7, #24]
90005782:	015a      	lsls	r2, r3, #5
90005784:	6a3b      	ldr	r3, [r7, #32]
90005786:	4413      	add	r3, r2
90005788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000578c:	691b      	ldr	r3, [r3, #16]
9000578e:	0cdb      	lsrs	r3, r3, #19
90005790:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005794:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
90005796:	6879      	ldr	r1, [r7, #4]
90005798:	69ba      	ldr	r2, [r7, #24]
9000579a:	4613      	mov	r3, r2
9000579c:	011b      	lsls	r3, r3, #4
9000579e:	1a9b      	subs	r3, r3, r2
900057a0:	009b      	lsls	r3, r3, #2
900057a2:	440b      	add	r3, r1
900057a4:	3328      	adds	r3, #40	@ 0x28
900057a6:	881b      	ldrh	r3, [r3, #0]
900057a8:	461a      	mov	r2, r3
900057aa:	693b      	ldr	r3, [r7, #16]
900057ac:	4293      	cmp	r3, r2
900057ae:	d13f      	bne.n	90005830 <HCD_RXQLVL_IRQHandler+0x1b4>
900057b0:	68fb      	ldr	r3, [r7, #12]
900057b2:	2b00      	cmp	r3, #0
900057b4:	d03c      	beq.n	90005830 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
900057b6:	69bb      	ldr	r3, [r7, #24]
900057b8:	015a      	lsls	r2, r3, #5
900057ba:	6a3b      	ldr	r3, [r7, #32]
900057bc:	4413      	add	r3, r2
900057be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057c2:	681b      	ldr	r3, [r3, #0]
900057c4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900057c6:	68bb      	ldr	r3, [r7, #8]
900057c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900057cc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
900057ce:	68bb      	ldr	r3, [r7, #8]
900057d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900057d4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
900057d6:	69bb      	ldr	r3, [r7, #24]
900057d8:	015a      	lsls	r2, r3, #5
900057da:	6a3b      	ldr	r3, [r7, #32]
900057dc:	4413      	add	r3, r2
900057de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900057e2:	461a      	mov	r2, r3
900057e4:	68bb      	ldr	r3, [r7, #8]
900057e6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
900057e8:	6879      	ldr	r1, [r7, #4]
900057ea:	69ba      	ldr	r2, [r7, #24]
900057ec:	4613      	mov	r3, r2
900057ee:	011b      	lsls	r3, r3, #4
900057f0:	1a9b      	subs	r3, r3, r2
900057f2:	009b      	lsls	r3, r3, #2
900057f4:	440b      	add	r3, r1
900057f6:	333c      	adds	r3, #60	@ 0x3c
900057f8:	781b      	ldrb	r3, [r3, #0]
900057fa:	f083 0301 	eor.w	r3, r3, #1
900057fe:	b2d8      	uxtb	r0, r3
90005800:	6879      	ldr	r1, [r7, #4]
90005802:	69ba      	ldr	r2, [r7, #24]
90005804:	4613      	mov	r3, r2
90005806:	011b      	lsls	r3, r3, #4
90005808:	1a9b      	subs	r3, r3, r2
9000580a:	009b      	lsls	r3, r3, #2
9000580c:	440b      	add	r3, r1
9000580e:	333c      	adds	r3, #60	@ 0x3c
90005810:	4602      	mov	r2, r0
90005812:	701a      	strb	r2, [r3, #0]
      break;
90005814:	e00c      	b.n	90005830 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90005816:	6879      	ldr	r1, [r7, #4]
90005818:	69ba      	ldr	r2, [r7, #24]
9000581a:	4613      	mov	r3, r2
9000581c:	011b      	lsls	r3, r3, #4
9000581e:	1a9b      	subs	r3, r3, r2
90005820:	009b      	lsls	r3, r3, #2
90005822:	440b      	add	r3, r1
90005824:	334c      	adds	r3, #76	@ 0x4c
90005826:	2204      	movs	r2, #4
90005828:	701a      	strb	r2, [r3, #0]
      break;
9000582a:	e001      	b.n	90005830 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
9000582c:	bf00      	nop
9000582e:	e000      	b.n	90005832 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90005830:	bf00      	nop
  }
}
90005832:	bf00      	nop
90005834:	3728      	adds	r7, #40	@ 0x28
90005836:	46bd      	mov	sp, r7
90005838:	bd80      	pop	{r7, pc}

9000583a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
9000583a:	b580      	push	{r7, lr}
9000583c:	b086      	sub	sp, #24
9000583e:	af00      	add	r7, sp, #0
90005840:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005842:	687b      	ldr	r3, [r7, #4]
90005844:	681b      	ldr	r3, [r3, #0]
90005846:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005848:	697b      	ldr	r3, [r7, #20]
9000584a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
9000584c:	693b      	ldr	r3, [r7, #16]
9000584e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005852:	681b      	ldr	r3, [r3, #0]
90005854:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005856:	693b      	ldr	r3, [r7, #16]
90005858:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000585c:	681b      	ldr	r3, [r3, #0]
9000585e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90005860:	68bb      	ldr	r3, [r7, #8]
90005862:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90005866:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005868:	68fb      	ldr	r3, [r7, #12]
9000586a:	f003 0302 	and.w	r3, r3, #2
9000586e:	2b02      	cmp	r3, #2
90005870:	d10b      	bne.n	9000588a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005872:	68fb      	ldr	r3, [r7, #12]
90005874:	f003 0301 	and.w	r3, r3, #1
90005878:	2b01      	cmp	r3, #1
9000587a:	d102      	bne.n	90005882 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
9000587c:	6878      	ldr	r0, [r7, #4]
9000587e:	f7fb fc8b 	bl	90001198 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90005882:	68bb      	ldr	r3, [r7, #8]
90005884:	f043 0302 	orr.w	r3, r3, #2
90005888:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
9000588a:	68fb      	ldr	r3, [r7, #12]
9000588c:	f003 0308 	and.w	r3, r3, #8
90005890:	2b08      	cmp	r3, #8
90005892:	d132      	bne.n	900058fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005894:	68bb      	ldr	r3, [r7, #8]
90005896:	f043 0308 	orr.w	r3, r3, #8
9000589a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
9000589c:	68fb      	ldr	r3, [r7, #12]
9000589e:	f003 0304 	and.w	r3, r3, #4
900058a2:	2b04      	cmp	r3, #4
900058a4:	d126      	bne.n	900058f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
900058a6:	687b      	ldr	r3, [r7, #4]
900058a8:	7a5b      	ldrb	r3, [r3, #9]
900058aa:	2b02      	cmp	r3, #2
900058ac:	d113      	bne.n	900058d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
900058ae:	68fb      	ldr	r3, [r7, #12]
900058b0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
900058b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900058b8:	d106      	bne.n	900058c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
900058ba:	687b      	ldr	r3, [r7, #4]
900058bc:	681b      	ldr	r3, [r3, #0]
900058be:	2102      	movs	r1, #2
900058c0:	4618      	mov	r0, r3
900058c2:	f005 fc47 	bl	9000b154 <USB_InitFSLSPClkSel>
900058c6:	e011      	b.n	900058ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900058c8:	687b      	ldr	r3, [r7, #4]
900058ca:	681b      	ldr	r3, [r3, #0]
900058cc:	2101      	movs	r1, #1
900058ce:	4618      	mov	r0, r3
900058d0:	f005 fc40 	bl	9000b154 <USB_InitFSLSPClkSel>
900058d4:	e00a      	b.n	900058ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900058d6:	687b      	ldr	r3, [r7, #4]
900058d8:	79db      	ldrb	r3, [r3, #7]
900058da:	2b01      	cmp	r3, #1
900058dc:	d106      	bne.n	900058ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
900058de:	693b      	ldr	r3, [r7, #16]
900058e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
900058e4:	461a      	mov	r2, r3
900058e6:	f64e 2360 	movw	r3, #60000	@ 0xea60
900058ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
900058ec:	6878      	ldr	r0, [r7, #4]
900058ee:	f7fb fc6f 	bl	900011d0 <HAL_HCD_PortEnabled_Callback>
900058f2:	e002      	b.n	900058fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
900058f4:	6878      	ldr	r0, [r7, #4]
900058f6:	f7fb fc79 	bl	900011ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
900058fa:	68fb      	ldr	r3, [r7, #12]
900058fc:	f003 0320 	and.w	r3, r3, #32
90005900:	2b20      	cmp	r3, #32
90005902:	d103      	bne.n	9000590c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005904:	68bb      	ldr	r3, [r7, #8]
90005906:	f043 0320 	orr.w	r3, r3, #32
9000590a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
9000590c:	693b      	ldr	r3, [r7, #16]
9000590e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005912:	461a      	mov	r2, r3
90005914:	68bb      	ldr	r3, [r7, #8]
90005916:	6013      	str	r3, [r2, #0]
}
90005918:	bf00      	nop
9000591a:	3718      	adds	r7, #24
9000591c:	46bd      	mov	sp, r7
9000591e:	bd80      	pop	{r7, pc}

90005920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005920:	b580      	push	{r7, lr}
90005922:	b082      	sub	sp, #8
90005924:	af00      	add	r7, sp, #0
90005926:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005928:	687b      	ldr	r3, [r7, #4]
9000592a:	2b00      	cmp	r3, #0
9000592c:	d101      	bne.n	90005932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
9000592e:	2301      	movs	r3, #1
90005930:	e08b      	b.n	90005a4a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005932:	687b      	ldr	r3, [r7, #4]
90005934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005938:	b2db      	uxtb	r3, r3
9000593a:	2b00      	cmp	r3, #0
9000593c:	d106      	bne.n	9000594c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
9000593e:	687b      	ldr	r3, [r7, #4]
90005940:	2200      	movs	r2, #0
90005942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005946:	6878      	ldr	r0, [r7, #4]
90005948:	f000 f886 	bl	90005a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
9000594c:	687b      	ldr	r3, [r7, #4]
9000594e:	2224      	movs	r2, #36	@ 0x24
90005950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005954:	687b      	ldr	r3, [r7, #4]
90005956:	681b      	ldr	r3, [r3, #0]
90005958:	681a      	ldr	r2, [r3, #0]
9000595a:	687b      	ldr	r3, [r7, #4]
9000595c:	681b      	ldr	r3, [r3, #0]
9000595e:	f022 0201 	bic.w	r2, r2, #1
90005962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005964:	687b      	ldr	r3, [r7, #4]
90005966:	685a      	ldr	r2, [r3, #4]
90005968:	687b      	ldr	r3, [r7, #4]
9000596a:	681b      	ldr	r3, [r3, #0]
9000596c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005970:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005972:	687b      	ldr	r3, [r7, #4]
90005974:	681b      	ldr	r3, [r3, #0]
90005976:	689a      	ldr	r2, [r3, #8]
90005978:	687b      	ldr	r3, [r7, #4]
9000597a:	681b      	ldr	r3, [r3, #0]
9000597c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005980:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005982:	687b      	ldr	r3, [r7, #4]
90005984:	68db      	ldr	r3, [r3, #12]
90005986:	2b01      	cmp	r3, #1
90005988:	d107      	bne.n	9000599a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000598a:	687b      	ldr	r3, [r7, #4]
9000598c:	689a      	ldr	r2, [r3, #8]
9000598e:	687b      	ldr	r3, [r7, #4]
90005990:	681b      	ldr	r3, [r3, #0]
90005992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005996:	609a      	str	r2, [r3, #8]
90005998:	e006      	b.n	900059a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000599a:	687b      	ldr	r3, [r7, #4]
9000599c:	689a      	ldr	r2, [r3, #8]
9000599e:	687b      	ldr	r3, [r7, #4]
900059a0:	681b      	ldr	r3, [r3, #0]
900059a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
900059a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900059a8:	687b      	ldr	r3, [r7, #4]
900059aa:	68db      	ldr	r3, [r3, #12]
900059ac:	2b02      	cmp	r3, #2
900059ae:	d108      	bne.n	900059c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
900059b0:	687b      	ldr	r3, [r7, #4]
900059b2:	681b      	ldr	r3, [r3, #0]
900059b4:	685a      	ldr	r2, [r3, #4]
900059b6:	687b      	ldr	r3, [r7, #4]
900059b8:	681b      	ldr	r3, [r3, #0]
900059ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
900059be:	605a      	str	r2, [r3, #4]
900059c0:	e007      	b.n	900059d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
900059c2:	687b      	ldr	r3, [r7, #4]
900059c4:	681b      	ldr	r3, [r3, #0]
900059c6:	685a      	ldr	r2, [r3, #4]
900059c8:	687b      	ldr	r3, [r7, #4]
900059ca:	681b      	ldr	r3, [r3, #0]
900059cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
900059d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900059d2:	687b      	ldr	r3, [r7, #4]
900059d4:	681b      	ldr	r3, [r3, #0]
900059d6:	6859      	ldr	r1, [r3, #4]
900059d8:	687b      	ldr	r3, [r7, #4]
900059da:	681a      	ldr	r2, [r3, #0]
900059dc:	4b1d      	ldr	r3, [pc, #116]	@ (90005a54 <HAL_I2C_Init+0x134>)
900059de:	430b      	orrs	r3, r1
900059e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
900059e2:	687b      	ldr	r3, [r7, #4]
900059e4:	681b      	ldr	r3, [r3, #0]
900059e6:	68da      	ldr	r2, [r3, #12]
900059e8:	687b      	ldr	r3, [r7, #4]
900059ea:	681b      	ldr	r3, [r3, #0]
900059ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
900059f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900059f2:	687b      	ldr	r3, [r7, #4]
900059f4:	691a      	ldr	r2, [r3, #16]
900059f6:	687b      	ldr	r3, [r7, #4]
900059f8:	695b      	ldr	r3, [r3, #20]
900059fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
900059fe:	687b      	ldr	r3, [r7, #4]
90005a00:	699b      	ldr	r3, [r3, #24]
90005a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005a04:	687b      	ldr	r3, [r7, #4]
90005a06:	681b      	ldr	r3, [r3, #0]
90005a08:	430a      	orrs	r2, r1
90005a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005a0c:	687b      	ldr	r3, [r7, #4]
90005a0e:	69d9      	ldr	r1, [r3, #28]
90005a10:	687b      	ldr	r3, [r7, #4]
90005a12:	6a1a      	ldr	r2, [r3, #32]
90005a14:	687b      	ldr	r3, [r7, #4]
90005a16:	681b      	ldr	r3, [r3, #0]
90005a18:	430a      	orrs	r2, r1
90005a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005a1c:	687b      	ldr	r3, [r7, #4]
90005a1e:	681b      	ldr	r3, [r3, #0]
90005a20:	681a      	ldr	r2, [r3, #0]
90005a22:	687b      	ldr	r3, [r7, #4]
90005a24:	681b      	ldr	r3, [r3, #0]
90005a26:	f042 0201 	orr.w	r2, r2, #1
90005a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005a2c:	687b      	ldr	r3, [r7, #4]
90005a2e:	2200      	movs	r2, #0
90005a30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005a32:	687b      	ldr	r3, [r7, #4]
90005a34:	2220      	movs	r2, #32
90005a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005a3a:	687b      	ldr	r3, [r7, #4]
90005a3c:	2200      	movs	r2, #0
90005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005a40:	687b      	ldr	r3, [r7, #4]
90005a42:	2200      	movs	r2, #0
90005a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005a48:	2300      	movs	r3, #0
}
90005a4a:	4618      	mov	r0, r3
90005a4c:	3708      	adds	r7, #8
90005a4e:	46bd      	mov	sp, r7
90005a50:	bd80      	pop	{r7, pc}
90005a52:	bf00      	nop
90005a54:	02008000 	.word	0x02008000

90005a58 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005a58:	b480      	push	{r7}
90005a5a:	b083      	sub	sp, #12
90005a5c:	af00      	add	r7, sp, #0
90005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005a60:	bf00      	nop
90005a62:	370c      	adds	r7, #12
90005a64:	46bd      	mov	sp, r7
90005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a6a:	4770      	bx	lr

90005a6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005a6c:	b580      	push	{r7, lr}
90005a6e:	b088      	sub	sp, #32
90005a70:	af02      	add	r7, sp, #8
90005a72:	60f8      	str	r0, [r7, #12]
90005a74:	4608      	mov	r0, r1
90005a76:	4611      	mov	r1, r2
90005a78:	461a      	mov	r2, r3
90005a7a:	4603      	mov	r3, r0
90005a7c:	817b      	strh	r3, [r7, #10]
90005a7e:	460b      	mov	r3, r1
90005a80:	813b      	strh	r3, [r7, #8]
90005a82:	4613      	mov	r3, r2
90005a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005a86:	68fb      	ldr	r3, [r7, #12]
90005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005a8c:	b2db      	uxtb	r3, r3
90005a8e:	2b20      	cmp	r3, #32
90005a90:	f040 80fd 	bne.w	90005c8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005a94:	6a3b      	ldr	r3, [r7, #32]
90005a96:	2b00      	cmp	r3, #0
90005a98:	d002      	beq.n	90005aa0 <HAL_I2C_Mem_Read+0x34>
90005a9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005a9c:	2b00      	cmp	r3, #0
90005a9e:	d105      	bne.n	90005aac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005aa0:	68fb      	ldr	r3, [r7, #12]
90005aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005aa6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005aa8:	2301      	movs	r3, #1
90005aaa:	e0f1      	b.n	90005c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005aac:	68fb      	ldr	r3, [r7, #12]
90005aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005ab2:	2b01      	cmp	r3, #1
90005ab4:	d101      	bne.n	90005aba <HAL_I2C_Mem_Read+0x4e>
90005ab6:	2302      	movs	r3, #2
90005ab8:	e0ea      	b.n	90005c90 <HAL_I2C_Mem_Read+0x224>
90005aba:	68fb      	ldr	r3, [r7, #12]
90005abc:	2201      	movs	r2, #1
90005abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005ac2:	f7fd fafb 	bl	900030bc <HAL_GetTick>
90005ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005ac8:	697b      	ldr	r3, [r7, #20]
90005aca:	9300      	str	r3, [sp, #0]
90005acc:	2319      	movs	r3, #25
90005ace:	2201      	movs	r2, #1
90005ad0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005ad4:	68f8      	ldr	r0, [r7, #12]
90005ad6:	f000 f975 	bl	90005dc4 <I2C_WaitOnFlagUntilTimeout>
90005ada:	4603      	mov	r3, r0
90005adc:	2b00      	cmp	r3, #0
90005ade:	d001      	beq.n	90005ae4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005ae0:	2301      	movs	r3, #1
90005ae2:	e0d5      	b.n	90005c90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005ae4:	68fb      	ldr	r3, [r7, #12]
90005ae6:	2222      	movs	r2, #34	@ 0x22
90005ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005aec:	68fb      	ldr	r3, [r7, #12]
90005aee:	2240      	movs	r2, #64	@ 0x40
90005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005af4:	68fb      	ldr	r3, [r7, #12]
90005af6:	2200      	movs	r2, #0
90005af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005afa:	68fb      	ldr	r3, [r7, #12]
90005afc:	6a3a      	ldr	r2, [r7, #32]
90005afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005b00:	68fb      	ldr	r3, [r7, #12]
90005b02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005b06:	68fb      	ldr	r3, [r7, #12]
90005b08:	2200      	movs	r2, #0
90005b0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005b0c:	88f8      	ldrh	r0, [r7, #6]
90005b0e:	893a      	ldrh	r2, [r7, #8]
90005b10:	8979      	ldrh	r1, [r7, #10]
90005b12:	697b      	ldr	r3, [r7, #20]
90005b14:	9301      	str	r3, [sp, #4]
90005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005b18:	9300      	str	r3, [sp, #0]
90005b1a:	4603      	mov	r3, r0
90005b1c:	68f8      	ldr	r0, [r7, #12]
90005b1e:	f000 f8d9 	bl	90005cd4 <I2C_RequestMemoryRead>
90005b22:	4603      	mov	r3, r0
90005b24:	2b00      	cmp	r3, #0
90005b26:	d005      	beq.n	90005b34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005b28:	68fb      	ldr	r3, [r7, #12]
90005b2a:	2200      	movs	r2, #0
90005b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005b30:	2301      	movs	r3, #1
90005b32:	e0ad      	b.n	90005c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005b34:	68fb      	ldr	r3, [r7, #12]
90005b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005b38:	b29b      	uxth	r3, r3
90005b3a:	2bff      	cmp	r3, #255	@ 0xff
90005b3c:	d90e      	bls.n	90005b5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005b3e:	68fb      	ldr	r3, [r7, #12]
90005b40:	22ff      	movs	r2, #255	@ 0xff
90005b42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005b44:	68fb      	ldr	r3, [r7, #12]
90005b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005b48:	b2da      	uxtb	r2, r3
90005b4a:	8979      	ldrh	r1, [r7, #10]
90005b4c:	4b52      	ldr	r3, [pc, #328]	@ (90005c98 <HAL_I2C_Mem_Read+0x22c>)
90005b4e:	9300      	str	r3, [sp, #0]
90005b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005b54:	68f8      	ldr	r0, [r7, #12]
90005b56:	f000 faf9 	bl	9000614c <I2C_TransferConfig>
90005b5a:	e00f      	b.n	90005b7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005b5c:	68fb      	ldr	r3, [r7, #12]
90005b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005b60:	b29a      	uxth	r2, r3
90005b62:	68fb      	ldr	r3, [r7, #12]
90005b64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005b66:	68fb      	ldr	r3, [r7, #12]
90005b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005b6a:	b2da      	uxtb	r2, r3
90005b6c:	8979      	ldrh	r1, [r7, #10]
90005b6e:	4b4a      	ldr	r3, [pc, #296]	@ (90005c98 <HAL_I2C_Mem_Read+0x22c>)
90005b70:	9300      	str	r3, [sp, #0]
90005b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005b76:	68f8      	ldr	r0, [r7, #12]
90005b78:	f000 fae8 	bl	9000614c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005b7c:	697b      	ldr	r3, [r7, #20]
90005b7e:	9300      	str	r3, [sp, #0]
90005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005b82:	2200      	movs	r2, #0
90005b84:	2104      	movs	r1, #4
90005b86:	68f8      	ldr	r0, [r7, #12]
90005b88:	f000 f91c 	bl	90005dc4 <I2C_WaitOnFlagUntilTimeout>
90005b8c:	4603      	mov	r3, r0
90005b8e:	2b00      	cmp	r3, #0
90005b90:	d001      	beq.n	90005b96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005b92:	2301      	movs	r3, #1
90005b94:	e07c      	b.n	90005c90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005b96:	68fb      	ldr	r3, [r7, #12]
90005b98:	681b      	ldr	r3, [r3, #0]
90005b9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005b9c:	68fb      	ldr	r3, [r7, #12]
90005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005ba0:	b2d2      	uxtb	r2, r2
90005ba2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005ba4:	68fb      	ldr	r3, [r7, #12]
90005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005ba8:	1c5a      	adds	r2, r3, #1
90005baa:	68fb      	ldr	r3, [r7, #12]
90005bac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005bae:	68fb      	ldr	r3, [r7, #12]
90005bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005bb2:	3b01      	subs	r3, #1
90005bb4:	b29a      	uxth	r2, r3
90005bb6:	68fb      	ldr	r3, [r7, #12]
90005bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005bba:	68fb      	ldr	r3, [r7, #12]
90005bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005bbe:	b29b      	uxth	r3, r3
90005bc0:	3b01      	subs	r3, #1
90005bc2:	b29a      	uxth	r2, r3
90005bc4:	68fb      	ldr	r3, [r7, #12]
90005bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005bc8:	68fb      	ldr	r3, [r7, #12]
90005bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005bcc:	b29b      	uxth	r3, r3
90005bce:	2b00      	cmp	r3, #0
90005bd0:	d034      	beq.n	90005c3c <HAL_I2C_Mem_Read+0x1d0>
90005bd2:	68fb      	ldr	r3, [r7, #12]
90005bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005bd6:	2b00      	cmp	r3, #0
90005bd8:	d130      	bne.n	90005c3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005bda:	697b      	ldr	r3, [r7, #20]
90005bdc:	9300      	str	r3, [sp, #0]
90005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005be0:	2200      	movs	r2, #0
90005be2:	2180      	movs	r1, #128	@ 0x80
90005be4:	68f8      	ldr	r0, [r7, #12]
90005be6:	f000 f8ed 	bl	90005dc4 <I2C_WaitOnFlagUntilTimeout>
90005bea:	4603      	mov	r3, r0
90005bec:	2b00      	cmp	r3, #0
90005bee:	d001      	beq.n	90005bf4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005bf0:	2301      	movs	r3, #1
90005bf2:	e04d      	b.n	90005c90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005bf4:	68fb      	ldr	r3, [r7, #12]
90005bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005bf8:	b29b      	uxth	r3, r3
90005bfa:	2bff      	cmp	r3, #255	@ 0xff
90005bfc:	d90e      	bls.n	90005c1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005bfe:	68fb      	ldr	r3, [r7, #12]
90005c00:	22ff      	movs	r2, #255	@ 0xff
90005c02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005c04:	68fb      	ldr	r3, [r7, #12]
90005c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005c08:	b2da      	uxtb	r2, r3
90005c0a:	8979      	ldrh	r1, [r7, #10]
90005c0c:	2300      	movs	r3, #0
90005c0e:	9300      	str	r3, [sp, #0]
90005c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005c14:	68f8      	ldr	r0, [r7, #12]
90005c16:	f000 fa99 	bl	9000614c <I2C_TransferConfig>
90005c1a:	e00f      	b.n	90005c3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005c1c:	68fb      	ldr	r3, [r7, #12]
90005c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005c20:	b29a      	uxth	r2, r3
90005c22:	68fb      	ldr	r3, [r7, #12]
90005c24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005c26:	68fb      	ldr	r3, [r7, #12]
90005c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005c2a:	b2da      	uxtb	r2, r3
90005c2c:	8979      	ldrh	r1, [r7, #10]
90005c2e:	2300      	movs	r3, #0
90005c30:	9300      	str	r3, [sp, #0]
90005c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005c36:	68f8      	ldr	r0, [r7, #12]
90005c38:	f000 fa88 	bl	9000614c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005c3c:	68fb      	ldr	r3, [r7, #12]
90005c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005c40:	b29b      	uxth	r3, r3
90005c42:	2b00      	cmp	r3, #0
90005c44:	d19a      	bne.n	90005b7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005c46:	697a      	ldr	r2, [r7, #20]
90005c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005c4a:	68f8      	ldr	r0, [r7, #12]
90005c4c:	f000 f95a 	bl	90005f04 <I2C_WaitOnSTOPFlagUntilTimeout>
90005c50:	4603      	mov	r3, r0
90005c52:	2b00      	cmp	r3, #0
90005c54:	d001      	beq.n	90005c5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005c56:	2301      	movs	r3, #1
90005c58:	e01a      	b.n	90005c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005c5a:	68fb      	ldr	r3, [r7, #12]
90005c5c:	681b      	ldr	r3, [r3, #0]
90005c5e:	2220      	movs	r2, #32
90005c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005c62:	68fb      	ldr	r3, [r7, #12]
90005c64:	681b      	ldr	r3, [r3, #0]
90005c66:	6859      	ldr	r1, [r3, #4]
90005c68:	68fb      	ldr	r3, [r7, #12]
90005c6a:	681a      	ldr	r2, [r3, #0]
90005c6c:	4b0b      	ldr	r3, [pc, #44]	@ (90005c9c <HAL_I2C_Mem_Read+0x230>)
90005c6e:	400b      	ands	r3, r1
90005c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005c72:	68fb      	ldr	r3, [r7, #12]
90005c74:	2220      	movs	r2, #32
90005c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005c7a:	68fb      	ldr	r3, [r7, #12]
90005c7c:	2200      	movs	r2, #0
90005c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005c82:	68fb      	ldr	r3, [r7, #12]
90005c84:	2200      	movs	r2, #0
90005c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005c8a:	2300      	movs	r3, #0
90005c8c:	e000      	b.n	90005c90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005c8e:	2302      	movs	r3, #2
  }
}
90005c90:	4618      	mov	r0, r3
90005c92:	3718      	adds	r7, #24
90005c94:	46bd      	mov	sp, r7
90005c96:	bd80      	pop	{r7, pc}
90005c98:	80002400 	.word	0x80002400
90005c9c:	fe00e800 	.word	0xfe00e800

90005ca0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005ca0:	b480      	push	{r7}
90005ca2:	b083      	sub	sp, #12
90005ca4:	af00      	add	r7, sp, #0
90005ca6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005ca8:	687b      	ldr	r3, [r7, #4]
90005caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005cae:	b2db      	uxtb	r3, r3
}
90005cb0:	4618      	mov	r0, r3
90005cb2:	370c      	adds	r7, #12
90005cb4:	46bd      	mov	sp, r7
90005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
90005cba:	4770      	bx	lr

90005cbc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005cbc:	b480      	push	{r7}
90005cbe:	b083      	sub	sp, #12
90005cc0:	af00      	add	r7, sp, #0
90005cc2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005cc4:	687b      	ldr	r3, [r7, #4]
90005cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005cc8:	4618      	mov	r0, r3
90005cca:	370c      	adds	r7, #12
90005ccc:	46bd      	mov	sp, r7
90005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
90005cd2:	4770      	bx	lr

90005cd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005cd4:	b580      	push	{r7, lr}
90005cd6:	b086      	sub	sp, #24
90005cd8:	af02      	add	r7, sp, #8
90005cda:	60f8      	str	r0, [r7, #12]
90005cdc:	4608      	mov	r0, r1
90005cde:	4611      	mov	r1, r2
90005ce0:	461a      	mov	r2, r3
90005ce2:	4603      	mov	r3, r0
90005ce4:	817b      	strh	r3, [r7, #10]
90005ce6:	460b      	mov	r3, r1
90005ce8:	813b      	strh	r3, [r7, #8]
90005cea:	4613      	mov	r3, r2
90005cec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005cee:	88fb      	ldrh	r3, [r7, #6]
90005cf0:	b2da      	uxtb	r2, r3
90005cf2:	8979      	ldrh	r1, [r7, #10]
90005cf4:	4b20      	ldr	r3, [pc, #128]	@ (90005d78 <I2C_RequestMemoryRead+0xa4>)
90005cf6:	9300      	str	r3, [sp, #0]
90005cf8:	2300      	movs	r3, #0
90005cfa:	68f8      	ldr	r0, [r7, #12]
90005cfc:	f000 fa26 	bl	9000614c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005d00:	69fa      	ldr	r2, [r7, #28]
90005d02:	69b9      	ldr	r1, [r7, #24]
90005d04:	68f8      	ldr	r0, [r7, #12]
90005d06:	f000 f8b6 	bl	90005e76 <I2C_WaitOnTXISFlagUntilTimeout>
90005d0a:	4603      	mov	r3, r0
90005d0c:	2b00      	cmp	r3, #0
90005d0e:	d001      	beq.n	90005d14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005d10:	2301      	movs	r3, #1
90005d12:	e02c      	b.n	90005d6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005d14:	88fb      	ldrh	r3, [r7, #6]
90005d16:	2b01      	cmp	r3, #1
90005d18:	d105      	bne.n	90005d26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005d1a:	893b      	ldrh	r3, [r7, #8]
90005d1c:	b2da      	uxtb	r2, r3
90005d1e:	68fb      	ldr	r3, [r7, #12]
90005d20:	681b      	ldr	r3, [r3, #0]
90005d22:	629a      	str	r2, [r3, #40]	@ 0x28
90005d24:	e015      	b.n	90005d52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005d26:	893b      	ldrh	r3, [r7, #8]
90005d28:	0a1b      	lsrs	r3, r3, #8
90005d2a:	b29b      	uxth	r3, r3
90005d2c:	b2da      	uxtb	r2, r3
90005d2e:	68fb      	ldr	r3, [r7, #12]
90005d30:	681b      	ldr	r3, [r3, #0]
90005d32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005d34:	69fa      	ldr	r2, [r7, #28]
90005d36:	69b9      	ldr	r1, [r7, #24]
90005d38:	68f8      	ldr	r0, [r7, #12]
90005d3a:	f000 f89c 	bl	90005e76 <I2C_WaitOnTXISFlagUntilTimeout>
90005d3e:	4603      	mov	r3, r0
90005d40:	2b00      	cmp	r3, #0
90005d42:	d001      	beq.n	90005d48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005d44:	2301      	movs	r3, #1
90005d46:	e012      	b.n	90005d6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005d48:	893b      	ldrh	r3, [r7, #8]
90005d4a:	b2da      	uxtb	r2, r3
90005d4c:	68fb      	ldr	r3, [r7, #12]
90005d4e:	681b      	ldr	r3, [r3, #0]
90005d50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005d52:	69fb      	ldr	r3, [r7, #28]
90005d54:	9300      	str	r3, [sp, #0]
90005d56:	69bb      	ldr	r3, [r7, #24]
90005d58:	2200      	movs	r2, #0
90005d5a:	2140      	movs	r1, #64	@ 0x40
90005d5c:	68f8      	ldr	r0, [r7, #12]
90005d5e:	f000 f831 	bl	90005dc4 <I2C_WaitOnFlagUntilTimeout>
90005d62:	4603      	mov	r3, r0
90005d64:	2b00      	cmp	r3, #0
90005d66:	d001      	beq.n	90005d6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005d68:	2301      	movs	r3, #1
90005d6a:	e000      	b.n	90005d6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005d6c:	2300      	movs	r3, #0
}
90005d6e:	4618      	mov	r0, r3
90005d70:	3710      	adds	r7, #16
90005d72:	46bd      	mov	sp, r7
90005d74:	bd80      	pop	{r7, pc}
90005d76:	bf00      	nop
90005d78:	80002000 	.word	0x80002000

90005d7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005d7c:	b480      	push	{r7}
90005d7e:	b083      	sub	sp, #12
90005d80:	af00      	add	r7, sp, #0
90005d82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005d84:	687b      	ldr	r3, [r7, #4]
90005d86:	681b      	ldr	r3, [r3, #0]
90005d88:	699b      	ldr	r3, [r3, #24]
90005d8a:	f003 0302 	and.w	r3, r3, #2
90005d8e:	2b02      	cmp	r3, #2
90005d90:	d103      	bne.n	90005d9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005d92:	687b      	ldr	r3, [r7, #4]
90005d94:	681b      	ldr	r3, [r3, #0]
90005d96:	2200      	movs	r2, #0
90005d98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005d9a:	687b      	ldr	r3, [r7, #4]
90005d9c:	681b      	ldr	r3, [r3, #0]
90005d9e:	699b      	ldr	r3, [r3, #24]
90005da0:	f003 0301 	and.w	r3, r3, #1
90005da4:	2b01      	cmp	r3, #1
90005da6:	d007      	beq.n	90005db8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005da8:	687b      	ldr	r3, [r7, #4]
90005daa:	681b      	ldr	r3, [r3, #0]
90005dac:	699a      	ldr	r2, [r3, #24]
90005dae:	687b      	ldr	r3, [r7, #4]
90005db0:	681b      	ldr	r3, [r3, #0]
90005db2:	f042 0201 	orr.w	r2, r2, #1
90005db6:	619a      	str	r2, [r3, #24]
  }
}
90005db8:	bf00      	nop
90005dba:	370c      	adds	r7, #12
90005dbc:	46bd      	mov	sp, r7
90005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
90005dc2:	4770      	bx	lr

90005dc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005dc4:	b580      	push	{r7, lr}
90005dc6:	b084      	sub	sp, #16
90005dc8:	af00      	add	r7, sp, #0
90005dca:	60f8      	str	r0, [r7, #12]
90005dcc:	60b9      	str	r1, [r7, #8]
90005dce:	603b      	str	r3, [r7, #0]
90005dd0:	4613      	mov	r3, r2
90005dd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005dd4:	e03b      	b.n	90005e4e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005dd6:	69ba      	ldr	r2, [r7, #24]
90005dd8:	6839      	ldr	r1, [r7, #0]
90005dda:	68f8      	ldr	r0, [r7, #12]
90005ddc:	f000 f8d6 	bl	90005f8c <I2C_IsErrorOccurred>
90005de0:	4603      	mov	r3, r0
90005de2:	2b00      	cmp	r3, #0
90005de4:	d001      	beq.n	90005dea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90005de6:	2301      	movs	r3, #1
90005de8:	e041      	b.n	90005e6e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005dea:	683b      	ldr	r3, [r7, #0]
90005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
90005df0:	d02d      	beq.n	90005e4e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005df2:	f7fd f963 	bl	900030bc <HAL_GetTick>
90005df6:	4602      	mov	r2, r0
90005df8:	69bb      	ldr	r3, [r7, #24]
90005dfa:	1ad3      	subs	r3, r2, r3
90005dfc:	683a      	ldr	r2, [r7, #0]
90005dfe:	429a      	cmp	r2, r3
90005e00:	d302      	bcc.n	90005e08 <I2C_WaitOnFlagUntilTimeout+0x44>
90005e02:	683b      	ldr	r3, [r7, #0]
90005e04:	2b00      	cmp	r3, #0
90005e06:	d122      	bne.n	90005e4e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90005e08:	68fb      	ldr	r3, [r7, #12]
90005e0a:	681b      	ldr	r3, [r3, #0]
90005e0c:	699a      	ldr	r2, [r3, #24]
90005e0e:	68bb      	ldr	r3, [r7, #8]
90005e10:	4013      	ands	r3, r2
90005e12:	68ba      	ldr	r2, [r7, #8]
90005e14:	429a      	cmp	r2, r3
90005e16:	bf0c      	ite	eq
90005e18:	2301      	moveq	r3, #1
90005e1a:	2300      	movne	r3, #0
90005e1c:	b2db      	uxtb	r3, r3
90005e1e:	461a      	mov	r2, r3
90005e20:	79fb      	ldrb	r3, [r7, #7]
90005e22:	429a      	cmp	r2, r3
90005e24:	d113      	bne.n	90005e4e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005e26:	68fb      	ldr	r3, [r7, #12]
90005e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005e2a:	f043 0220 	orr.w	r2, r3, #32
90005e2e:	68fb      	ldr	r3, [r7, #12]
90005e30:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005e32:	68fb      	ldr	r3, [r7, #12]
90005e34:	2220      	movs	r2, #32
90005e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005e3a:	68fb      	ldr	r3, [r7, #12]
90005e3c:	2200      	movs	r2, #0
90005e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005e42:	68fb      	ldr	r3, [r7, #12]
90005e44:	2200      	movs	r2, #0
90005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90005e4a:	2301      	movs	r3, #1
90005e4c:	e00f      	b.n	90005e6e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005e4e:	68fb      	ldr	r3, [r7, #12]
90005e50:	681b      	ldr	r3, [r3, #0]
90005e52:	699a      	ldr	r2, [r3, #24]
90005e54:	68bb      	ldr	r3, [r7, #8]
90005e56:	4013      	ands	r3, r2
90005e58:	68ba      	ldr	r2, [r7, #8]
90005e5a:	429a      	cmp	r2, r3
90005e5c:	bf0c      	ite	eq
90005e5e:	2301      	moveq	r3, #1
90005e60:	2300      	movne	r3, #0
90005e62:	b2db      	uxtb	r3, r3
90005e64:	461a      	mov	r2, r3
90005e66:	79fb      	ldrb	r3, [r7, #7]
90005e68:	429a      	cmp	r2, r3
90005e6a:	d0b4      	beq.n	90005dd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90005e6c:	2300      	movs	r3, #0
}
90005e6e:	4618      	mov	r0, r3
90005e70:	3710      	adds	r7, #16
90005e72:	46bd      	mov	sp, r7
90005e74:	bd80      	pop	{r7, pc}

90005e76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005e76:	b580      	push	{r7, lr}
90005e78:	b084      	sub	sp, #16
90005e7a:	af00      	add	r7, sp, #0
90005e7c:	60f8      	str	r0, [r7, #12]
90005e7e:	60b9      	str	r1, [r7, #8]
90005e80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005e82:	e033      	b.n	90005eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005e84:	687a      	ldr	r2, [r7, #4]
90005e86:	68b9      	ldr	r1, [r7, #8]
90005e88:	68f8      	ldr	r0, [r7, #12]
90005e8a:	f000 f87f 	bl	90005f8c <I2C_IsErrorOccurred>
90005e8e:	4603      	mov	r3, r0
90005e90:	2b00      	cmp	r3, #0
90005e92:	d001      	beq.n	90005e98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005e94:	2301      	movs	r3, #1
90005e96:	e031      	b.n	90005efc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005e98:	68bb      	ldr	r3, [r7, #8]
90005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
90005e9e:	d025      	beq.n	90005eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005ea0:	f7fd f90c 	bl	900030bc <HAL_GetTick>
90005ea4:	4602      	mov	r2, r0
90005ea6:	687b      	ldr	r3, [r7, #4]
90005ea8:	1ad3      	subs	r3, r2, r3
90005eaa:	68ba      	ldr	r2, [r7, #8]
90005eac:	429a      	cmp	r2, r3
90005eae:	d302      	bcc.n	90005eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90005eb0:	68bb      	ldr	r3, [r7, #8]
90005eb2:	2b00      	cmp	r3, #0
90005eb4:	d11a      	bne.n	90005eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90005eb6:	68fb      	ldr	r3, [r7, #12]
90005eb8:	681b      	ldr	r3, [r3, #0]
90005eba:	699b      	ldr	r3, [r3, #24]
90005ebc:	f003 0302 	and.w	r3, r3, #2
90005ec0:	2b02      	cmp	r3, #2
90005ec2:	d013      	beq.n	90005eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005ec4:	68fb      	ldr	r3, [r7, #12]
90005ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005ec8:	f043 0220 	orr.w	r2, r3, #32
90005ecc:	68fb      	ldr	r3, [r7, #12]
90005ece:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005ed0:	68fb      	ldr	r3, [r7, #12]
90005ed2:	2220      	movs	r2, #32
90005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005ed8:	68fb      	ldr	r3, [r7, #12]
90005eda:	2200      	movs	r2, #0
90005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005ee0:	68fb      	ldr	r3, [r7, #12]
90005ee2:	2200      	movs	r2, #0
90005ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90005ee8:	2301      	movs	r3, #1
90005eea:	e007      	b.n	90005efc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005eec:	68fb      	ldr	r3, [r7, #12]
90005eee:	681b      	ldr	r3, [r3, #0]
90005ef0:	699b      	ldr	r3, [r3, #24]
90005ef2:	f003 0302 	and.w	r3, r3, #2
90005ef6:	2b02      	cmp	r3, #2
90005ef8:	d1c4      	bne.n	90005e84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90005efa:	2300      	movs	r3, #0
}
90005efc:	4618      	mov	r0, r3
90005efe:	3710      	adds	r7, #16
90005f00:	46bd      	mov	sp, r7
90005f02:	bd80      	pop	{r7, pc}

90005f04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005f04:	b580      	push	{r7, lr}
90005f06:	b084      	sub	sp, #16
90005f08:	af00      	add	r7, sp, #0
90005f0a:	60f8      	str	r0, [r7, #12]
90005f0c:	60b9      	str	r1, [r7, #8]
90005f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005f10:	e02f      	b.n	90005f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005f12:	687a      	ldr	r2, [r7, #4]
90005f14:	68b9      	ldr	r1, [r7, #8]
90005f16:	68f8      	ldr	r0, [r7, #12]
90005f18:	f000 f838 	bl	90005f8c <I2C_IsErrorOccurred>
90005f1c:	4603      	mov	r3, r0
90005f1e:	2b00      	cmp	r3, #0
90005f20:	d001      	beq.n	90005f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005f22:	2301      	movs	r3, #1
90005f24:	e02d      	b.n	90005f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005f26:	f7fd f8c9 	bl	900030bc <HAL_GetTick>
90005f2a:	4602      	mov	r2, r0
90005f2c:	687b      	ldr	r3, [r7, #4]
90005f2e:	1ad3      	subs	r3, r2, r3
90005f30:	68ba      	ldr	r2, [r7, #8]
90005f32:	429a      	cmp	r2, r3
90005f34:	d302      	bcc.n	90005f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90005f36:	68bb      	ldr	r3, [r7, #8]
90005f38:	2b00      	cmp	r3, #0
90005f3a:	d11a      	bne.n	90005f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90005f3c:	68fb      	ldr	r3, [r7, #12]
90005f3e:	681b      	ldr	r3, [r3, #0]
90005f40:	699b      	ldr	r3, [r3, #24]
90005f42:	f003 0320 	and.w	r3, r3, #32
90005f46:	2b20      	cmp	r3, #32
90005f48:	d013      	beq.n	90005f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005f4a:	68fb      	ldr	r3, [r7, #12]
90005f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005f4e:	f043 0220 	orr.w	r2, r3, #32
90005f52:	68fb      	ldr	r3, [r7, #12]
90005f54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90005f56:	68fb      	ldr	r3, [r7, #12]
90005f58:	2220      	movs	r2, #32
90005f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90005f5e:	68fb      	ldr	r3, [r7, #12]
90005f60:	2200      	movs	r2, #0
90005f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90005f66:	68fb      	ldr	r3, [r7, #12]
90005f68:	2200      	movs	r2, #0
90005f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
90005f6e:	2301      	movs	r3, #1
90005f70:	e007      	b.n	90005f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005f72:	68fb      	ldr	r3, [r7, #12]
90005f74:	681b      	ldr	r3, [r3, #0]
90005f76:	699b      	ldr	r3, [r3, #24]
90005f78:	f003 0320 	and.w	r3, r3, #32
90005f7c:	2b20      	cmp	r3, #32
90005f7e:	d1c8      	bne.n	90005f12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90005f80:	2300      	movs	r3, #0
}
90005f82:	4618      	mov	r0, r3
90005f84:	3710      	adds	r7, #16
90005f86:	46bd      	mov	sp, r7
90005f88:	bd80      	pop	{r7, pc}
	...

90005f8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90005f8c:	b580      	push	{r7, lr}
90005f8e:	b08a      	sub	sp, #40	@ 0x28
90005f90:	af00      	add	r7, sp, #0
90005f92:	60f8      	str	r0, [r7, #12]
90005f94:	60b9      	str	r1, [r7, #8]
90005f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90005f98:	2300      	movs	r3, #0
90005f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90005f9e:	68fb      	ldr	r3, [r7, #12]
90005fa0:	681b      	ldr	r3, [r3, #0]
90005fa2:	699b      	ldr	r3, [r3, #24]
90005fa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
90005fa6:	2300      	movs	r3, #0
90005fa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
90005faa:	687b      	ldr	r3, [r7, #4]
90005fac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90005fae:	69bb      	ldr	r3, [r7, #24]
90005fb0:	f003 0310 	and.w	r3, r3, #16
90005fb4:	2b00      	cmp	r3, #0
90005fb6:	d068      	beq.n	9000608a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90005fb8:	68fb      	ldr	r3, [r7, #12]
90005fba:	681b      	ldr	r3, [r3, #0]
90005fbc:	2210      	movs	r2, #16
90005fbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90005fc0:	e049      	b.n	90006056 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90005fc2:	68bb      	ldr	r3, [r7, #8]
90005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
90005fc8:	d045      	beq.n	90006056 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90005fca:	f7fd f877 	bl	900030bc <HAL_GetTick>
90005fce:	4602      	mov	r2, r0
90005fd0:	69fb      	ldr	r3, [r7, #28]
90005fd2:	1ad3      	subs	r3, r2, r3
90005fd4:	68ba      	ldr	r2, [r7, #8]
90005fd6:	429a      	cmp	r2, r3
90005fd8:	d302      	bcc.n	90005fe0 <I2C_IsErrorOccurred+0x54>
90005fda:	68bb      	ldr	r3, [r7, #8]
90005fdc:	2b00      	cmp	r3, #0
90005fde:	d13a      	bne.n	90006056 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90005fe0:	68fb      	ldr	r3, [r7, #12]
90005fe2:	681b      	ldr	r3, [r3, #0]
90005fe4:	685b      	ldr	r3, [r3, #4]
90005fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
90005fea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90005fec:	68fb      	ldr	r3, [r7, #12]
90005fee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90005ff2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90005ff4:	68fb      	ldr	r3, [r7, #12]
90005ff6:	681b      	ldr	r3, [r3, #0]
90005ff8:	699b      	ldr	r3, [r3, #24]
90005ffa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90005ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006002:	d121      	bne.n	90006048 <I2C_IsErrorOccurred+0xbc>
90006004:	697b      	ldr	r3, [r7, #20]
90006006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000600a:	d01d      	beq.n	90006048 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
9000600c:	7cfb      	ldrb	r3, [r7, #19]
9000600e:	2b20      	cmp	r3, #32
90006010:	d01a      	beq.n	90006048 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006012:	68fb      	ldr	r3, [r7, #12]
90006014:	681b      	ldr	r3, [r3, #0]
90006016:	685a      	ldr	r2, [r3, #4]
90006018:	68fb      	ldr	r3, [r7, #12]
9000601a:	681b      	ldr	r3, [r3, #0]
9000601c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006020:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006022:	f7fd f84b 	bl	900030bc <HAL_GetTick>
90006026:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006028:	e00e      	b.n	90006048 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000602a:	f7fd f847 	bl	900030bc <HAL_GetTick>
9000602e:	4602      	mov	r2, r0
90006030:	69fb      	ldr	r3, [r7, #28]
90006032:	1ad3      	subs	r3, r2, r3
90006034:	2b19      	cmp	r3, #25
90006036:	d907      	bls.n	90006048 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90006038:	6a3b      	ldr	r3, [r7, #32]
9000603a:	f043 0320 	orr.w	r3, r3, #32
9000603e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006040:	2301      	movs	r3, #1
90006042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90006046:	e006      	b.n	90006056 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006048:	68fb      	ldr	r3, [r7, #12]
9000604a:	681b      	ldr	r3, [r3, #0]
9000604c:	699b      	ldr	r3, [r3, #24]
9000604e:	f003 0320 	and.w	r3, r3, #32
90006052:	2b20      	cmp	r3, #32
90006054:	d1e9      	bne.n	9000602a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006056:	68fb      	ldr	r3, [r7, #12]
90006058:	681b      	ldr	r3, [r3, #0]
9000605a:	699b      	ldr	r3, [r3, #24]
9000605c:	f003 0320 	and.w	r3, r3, #32
90006060:	2b20      	cmp	r3, #32
90006062:	d003      	beq.n	9000606c <I2C_IsErrorOccurred+0xe0>
90006064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006068:	2b00      	cmp	r3, #0
9000606a:	d0aa      	beq.n	90005fc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
9000606c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006070:	2b00      	cmp	r3, #0
90006072:	d103      	bne.n	9000607c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006074:	68fb      	ldr	r3, [r7, #12]
90006076:	681b      	ldr	r3, [r3, #0]
90006078:	2220      	movs	r2, #32
9000607a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
9000607c:	6a3b      	ldr	r3, [r7, #32]
9000607e:	f043 0304 	orr.w	r3, r3, #4
90006082:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006084:	2301      	movs	r3, #1
90006086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000608a:	68fb      	ldr	r3, [r7, #12]
9000608c:	681b      	ldr	r3, [r3, #0]
9000608e:	699b      	ldr	r3, [r3, #24]
90006090:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006092:	69bb      	ldr	r3, [r7, #24]
90006094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006098:	2b00      	cmp	r3, #0
9000609a:	d00b      	beq.n	900060b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
9000609c:	6a3b      	ldr	r3, [r7, #32]
9000609e:	f043 0301 	orr.w	r3, r3, #1
900060a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900060a4:	68fb      	ldr	r3, [r7, #12]
900060a6:	681b      	ldr	r3, [r3, #0]
900060a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
900060ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900060ae:	2301      	movs	r3, #1
900060b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900060b4:	69bb      	ldr	r3, [r7, #24]
900060b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900060ba:	2b00      	cmp	r3, #0
900060bc:	d00b      	beq.n	900060d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900060be:	6a3b      	ldr	r3, [r7, #32]
900060c0:	f043 0308 	orr.w	r3, r3, #8
900060c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900060c6:	68fb      	ldr	r3, [r7, #12]
900060c8:	681b      	ldr	r3, [r3, #0]
900060ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
900060ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900060d0:	2301      	movs	r3, #1
900060d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900060d6:	69bb      	ldr	r3, [r7, #24]
900060d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900060dc:	2b00      	cmp	r3, #0
900060de:	d00b      	beq.n	900060f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
900060e0:	6a3b      	ldr	r3, [r7, #32]
900060e2:	f043 0302 	orr.w	r3, r3, #2
900060e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900060e8:	68fb      	ldr	r3, [r7, #12]
900060ea:	681b      	ldr	r3, [r3, #0]
900060ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
900060f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900060f2:	2301      	movs	r3, #1
900060f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
900060f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900060fc:	2b00      	cmp	r3, #0
900060fe:	d01c      	beq.n	9000613a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006100:	68f8      	ldr	r0, [r7, #12]
90006102:	f7ff fe3b 	bl	90005d7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006106:	68fb      	ldr	r3, [r7, #12]
90006108:	681b      	ldr	r3, [r3, #0]
9000610a:	6859      	ldr	r1, [r3, #4]
9000610c:	68fb      	ldr	r3, [r7, #12]
9000610e:	681a      	ldr	r2, [r3, #0]
90006110:	4b0d      	ldr	r3, [pc, #52]	@ (90006148 <I2C_IsErrorOccurred+0x1bc>)
90006112:	400b      	ands	r3, r1
90006114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90006116:	68fb      	ldr	r3, [r7, #12]
90006118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000611a:	6a3b      	ldr	r3, [r7, #32]
9000611c:	431a      	orrs	r2, r3
9000611e:	68fb      	ldr	r3, [r7, #12]
90006120:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006122:	68fb      	ldr	r3, [r7, #12]
90006124:	2220      	movs	r2, #32
90006126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000612a:	68fb      	ldr	r3, [r7, #12]
9000612c:	2200      	movs	r2, #0
9000612e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006132:	68fb      	ldr	r3, [r7, #12]
90006134:	2200      	movs	r2, #0
90006136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
9000613a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
9000613e:	4618      	mov	r0, r3
90006140:	3728      	adds	r7, #40	@ 0x28
90006142:	46bd      	mov	sp, r7
90006144:	bd80      	pop	{r7, pc}
90006146:	bf00      	nop
90006148:	fe00e800 	.word	0xfe00e800

9000614c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
9000614c:	b480      	push	{r7}
9000614e:	b087      	sub	sp, #28
90006150:	af00      	add	r7, sp, #0
90006152:	60f8      	str	r0, [r7, #12]
90006154:	607b      	str	r3, [r7, #4]
90006156:	460b      	mov	r3, r1
90006158:	817b      	strh	r3, [r7, #10]
9000615a:	4613      	mov	r3, r2
9000615c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000615e:	897b      	ldrh	r3, [r7, #10]
90006160:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006164:	7a7b      	ldrb	r3, [r7, #9]
90006166:	041b      	lsls	r3, r3, #16
90006168:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000616c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000616e:	687b      	ldr	r3, [r7, #4]
90006170:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006172:	6a3b      	ldr	r3, [r7, #32]
90006174:	4313      	orrs	r3, r2
90006176:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000617a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
9000617c:	68fb      	ldr	r3, [r7, #12]
9000617e:	681b      	ldr	r3, [r3, #0]
90006180:	685a      	ldr	r2, [r3, #4]
90006182:	6a3b      	ldr	r3, [r7, #32]
90006184:	0d5b      	lsrs	r3, r3, #21
90006186:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
9000618a:	4b08      	ldr	r3, [pc, #32]	@ (900061ac <I2C_TransferConfig+0x60>)
9000618c:	430b      	orrs	r3, r1
9000618e:	43db      	mvns	r3, r3
90006190:	ea02 0103 	and.w	r1, r2, r3
90006194:	68fb      	ldr	r3, [r7, #12]
90006196:	681b      	ldr	r3, [r3, #0]
90006198:	697a      	ldr	r2, [r7, #20]
9000619a:	430a      	orrs	r2, r1
9000619c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000619e:	bf00      	nop
900061a0:	371c      	adds	r7, #28
900061a2:	46bd      	mov	sp, r7
900061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900061a8:	4770      	bx	lr
900061aa:	bf00      	nop
900061ac:	03ff63ff 	.word	0x03ff63ff

900061b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900061b0:	b480      	push	{r7}
900061b2:	b083      	sub	sp, #12
900061b4:	af00      	add	r7, sp, #0
900061b6:	6078      	str	r0, [r7, #4]
900061b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900061ba:	687b      	ldr	r3, [r7, #4]
900061bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900061c0:	b2db      	uxtb	r3, r3
900061c2:	2b20      	cmp	r3, #32
900061c4:	d138      	bne.n	90006238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900061c6:	687b      	ldr	r3, [r7, #4]
900061c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900061cc:	2b01      	cmp	r3, #1
900061ce:	d101      	bne.n	900061d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
900061d0:	2302      	movs	r3, #2
900061d2:	e032      	b.n	9000623a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
900061d4:	687b      	ldr	r3, [r7, #4]
900061d6:	2201      	movs	r2, #1
900061d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900061dc:	687b      	ldr	r3, [r7, #4]
900061de:	2224      	movs	r2, #36	@ 0x24
900061e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900061e4:	687b      	ldr	r3, [r7, #4]
900061e6:	681b      	ldr	r3, [r3, #0]
900061e8:	681a      	ldr	r2, [r3, #0]
900061ea:	687b      	ldr	r3, [r7, #4]
900061ec:	681b      	ldr	r3, [r3, #0]
900061ee:	f022 0201 	bic.w	r2, r2, #1
900061f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
900061f4:	687b      	ldr	r3, [r7, #4]
900061f6:	681b      	ldr	r3, [r3, #0]
900061f8:	681a      	ldr	r2, [r3, #0]
900061fa:	687b      	ldr	r3, [r7, #4]
900061fc:	681b      	ldr	r3, [r3, #0]
900061fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006204:	687b      	ldr	r3, [r7, #4]
90006206:	681b      	ldr	r3, [r3, #0]
90006208:	6819      	ldr	r1, [r3, #0]
9000620a:	687b      	ldr	r3, [r7, #4]
9000620c:	681b      	ldr	r3, [r3, #0]
9000620e:	683a      	ldr	r2, [r7, #0]
90006210:	430a      	orrs	r2, r1
90006212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006214:	687b      	ldr	r3, [r7, #4]
90006216:	681b      	ldr	r3, [r3, #0]
90006218:	681a      	ldr	r2, [r3, #0]
9000621a:	687b      	ldr	r3, [r7, #4]
9000621c:	681b      	ldr	r3, [r3, #0]
9000621e:	f042 0201 	orr.w	r2, r2, #1
90006222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006224:	687b      	ldr	r3, [r7, #4]
90006226:	2220      	movs	r2, #32
90006228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000622c:	687b      	ldr	r3, [r7, #4]
9000622e:	2200      	movs	r2, #0
90006230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006234:	2300      	movs	r3, #0
90006236:	e000      	b.n	9000623a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90006238:	2302      	movs	r3, #2
  }
}
9000623a:	4618      	mov	r0, r3
9000623c:	370c      	adds	r7, #12
9000623e:	46bd      	mov	sp, r7
90006240:	f85d 7b04 	ldr.w	r7, [sp], #4
90006244:	4770      	bx	lr

90006246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90006246:	b480      	push	{r7}
90006248:	b085      	sub	sp, #20
9000624a:	af00      	add	r7, sp, #0
9000624c:	6078      	str	r0, [r7, #4]
9000624e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006250:	687b      	ldr	r3, [r7, #4]
90006252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006256:	b2db      	uxtb	r3, r3
90006258:	2b20      	cmp	r3, #32
9000625a:	d139      	bne.n	900062d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000625c:	687b      	ldr	r3, [r7, #4]
9000625e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006262:	2b01      	cmp	r3, #1
90006264:	d101      	bne.n	9000626a <HAL_I2CEx_ConfigDigitalFilter+0x24>
90006266:	2302      	movs	r3, #2
90006268:	e033      	b.n	900062d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000626a:	687b      	ldr	r3, [r7, #4]
9000626c:	2201      	movs	r2, #1
9000626e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006272:	687b      	ldr	r3, [r7, #4]
90006274:	2224      	movs	r2, #36	@ 0x24
90006276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000627a:	687b      	ldr	r3, [r7, #4]
9000627c:	681b      	ldr	r3, [r3, #0]
9000627e:	681a      	ldr	r2, [r3, #0]
90006280:	687b      	ldr	r3, [r7, #4]
90006282:	681b      	ldr	r3, [r3, #0]
90006284:	f022 0201 	bic.w	r2, r2, #1
90006288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
9000628a:	687b      	ldr	r3, [r7, #4]
9000628c:	681b      	ldr	r3, [r3, #0]
9000628e:	681b      	ldr	r3, [r3, #0]
90006290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006292:	68fb      	ldr	r3, [r7, #12]
90006294:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
90006298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000629a:	683b      	ldr	r3, [r7, #0]
9000629c:	021b      	lsls	r3, r3, #8
9000629e:	68fa      	ldr	r2, [r7, #12]
900062a0:	4313      	orrs	r3, r2
900062a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900062a4:	687b      	ldr	r3, [r7, #4]
900062a6:	681b      	ldr	r3, [r3, #0]
900062a8:	68fa      	ldr	r2, [r7, #12]
900062aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900062ac:	687b      	ldr	r3, [r7, #4]
900062ae:	681b      	ldr	r3, [r3, #0]
900062b0:	681a      	ldr	r2, [r3, #0]
900062b2:	687b      	ldr	r3, [r7, #4]
900062b4:	681b      	ldr	r3, [r3, #0]
900062b6:	f042 0201 	orr.w	r2, r2, #1
900062ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900062bc:	687b      	ldr	r3, [r7, #4]
900062be:	2220      	movs	r2, #32
900062c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900062c4:	687b      	ldr	r3, [r7, #4]
900062c6:	2200      	movs	r2, #0
900062c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900062cc:	2300      	movs	r3, #0
900062ce:	e000      	b.n	900062d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900062d0:	2302      	movs	r3, #2
  }
}
900062d2:	4618      	mov	r0, r3
900062d4:	3714      	adds	r7, #20
900062d6:	46bd      	mov	sp, r7
900062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900062dc:	4770      	bx	lr

900062de <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
900062de:	b580      	push	{r7, lr}
900062e0:	b084      	sub	sp, #16
900062e2:	af00      	add	r7, sp, #0
900062e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
900062e6:	687b      	ldr	r3, [r7, #4]
900062e8:	2b00      	cmp	r3, #0
900062ea:	d101      	bne.n	900062f0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
900062ec:	2301      	movs	r3, #1
900062ee:	e08f      	b.n	90006410 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
900062f0:	687b      	ldr	r3, [r7, #4]
900062f2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
900062f6:	b2db      	uxtb	r3, r3
900062f8:	2b00      	cmp	r3, #0
900062fa:	d106      	bne.n	9000630a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
900062fc:	687b      	ldr	r3, [r7, #4]
900062fe:	2200      	movs	r2, #0
90006300:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006304:	6878      	ldr	r0, [r7, #4]
90006306:	f000 f887 	bl	90006418 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000630a:	687b      	ldr	r3, [r7, #4]
9000630c:	2202      	movs	r2, #2
9000630e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006312:	687b      	ldr	r3, [r7, #4]
90006314:	681b      	ldr	r3, [r3, #0]
90006316:	699a      	ldr	r2, [r3, #24]
90006318:	687b      	ldr	r3, [r7, #4]
9000631a:	681b      	ldr	r3, [r3, #0]
9000631c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006320:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006322:	687b      	ldr	r3, [r7, #4]
90006324:	681b      	ldr	r3, [r3, #0]
90006326:	6999      	ldr	r1, [r3, #24]
90006328:	687b      	ldr	r3, [r7, #4]
9000632a:	685a      	ldr	r2, [r3, #4]
9000632c:	687b      	ldr	r3, [r7, #4]
9000632e:	689b      	ldr	r3, [r3, #8]
90006330:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006332:	687b      	ldr	r3, [r7, #4]
90006334:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006336:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006338:	687b      	ldr	r3, [r7, #4]
9000633a:	691b      	ldr	r3, [r3, #16]
9000633c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000633e:	687b      	ldr	r3, [r7, #4]
90006340:	681b      	ldr	r3, [r3, #0]
90006342:	430a      	orrs	r2, r1
90006344:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
90006346:	687b      	ldr	r3, [r7, #4]
90006348:	695b      	ldr	r3, [r3, #20]
9000634a:	041b      	lsls	r3, r3, #16
9000634c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
9000634e:	687b      	ldr	r3, [r7, #4]
90006350:	6999      	ldr	r1, [r3, #24]
90006352:	687b      	ldr	r3, [r7, #4]
90006354:	681b      	ldr	r3, [r3, #0]
90006356:	68fa      	ldr	r2, [r7, #12]
90006358:	430a      	orrs	r2, r1
9000635a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000635c:	687b      	ldr	r3, [r7, #4]
9000635e:	69db      	ldr	r3, [r3, #28]
90006360:	041b      	lsls	r3, r3, #16
90006362:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90006364:	687b      	ldr	r3, [r7, #4]
90006366:	6a19      	ldr	r1, [r3, #32]
90006368:	687b      	ldr	r3, [r7, #4]
9000636a:	681b      	ldr	r3, [r3, #0]
9000636c:	68fa      	ldr	r2, [r7, #12]
9000636e:	430a      	orrs	r2, r1
90006370:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90006372:	687b      	ldr	r3, [r7, #4]
90006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006376:	041b      	lsls	r3, r3, #16
90006378:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
9000637a:	687b      	ldr	r3, [r7, #4]
9000637c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
9000637e:	687b      	ldr	r3, [r7, #4]
90006380:	681b      	ldr	r3, [r3, #0]
90006382:	68fa      	ldr	r2, [r7, #12]
90006384:	430a      	orrs	r2, r1
90006386:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
90006388:	687b      	ldr	r3, [r7, #4]
9000638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000638c:	041b      	lsls	r3, r3, #16
9000638e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006390:	687b      	ldr	r3, [r7, #4]
90006392:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006394:	687b      	ldr	r3, [r7, #4]
90006396:	681b      	ldr	r3, [r3, #0]
90006398:	68fa      	ldr	r2, [r7, #12]
9000639a:	430a      	orrs	r2, r1
9000639c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000639e:	687b      	ldr	r3, [r7, #4]
900063a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
900063a4:	021b      	lsls	r3, r3, #8
900063a6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900063a8:	687b      	ldr	r3, [r7, #4]
900063aa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
900063ae:	041b      	lsls	r3, r3, #16
900063b0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900063b2:	687b      	ldr	r3, [r7, #4]
900063b4:	681b      	ldr	r3, [r3, #0]
900063b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
900063b8:	687b      	ldr	r3, [r7, #4]
900063ba:	681b      	ldr	r3, [r3, #0]
900063bc:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
900063c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900063c2:	687b      	ldr	r3, [r7, #4]
900063c4:	681b      	ldr	r3, [r3, #0]
900063c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
900063c8:	68ba      	ldr	r2, [r7, #8]
900063ca:	68fb      	ldr	r3, [r7, #12]
900063cc:	4313      	orrs	r3, r2
900063ce:	687a      	ldr	r2, [r7, #4]
900063d0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
900063d4:	431a      	orrs	r2, r3
900063d6:	687b      	ldr	r3, [r7, #4]
900063d8:	681b      	ldr	r3, [r3, #0]
900063da:	430a      	orrs	r2, r1
900063dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900063de:	687b      	ldr	r3, [r7, #4]
900063e0:	681b      	ldr	r3, [r3, #0]
900063e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900063e4:	687b      	ldr	r3, [r7, #4]
900063e6:	681b      	ldr	r3, [r3, #0]
900063e8:	f042 0206 	orr.w	r2, r2, #6
900063ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
900063ee:	687b      	ldr	r3, [r7, #4]
900063f0:	681b      	ldr	r3, [r3, #0]
900063f2:	699a      	ldr	r2, [r3, #24]
900063f4:	687b      	ldr	r3, [r7, #4]
900063f6:	681b      	ldr	r3, [r3, #0]
900063f8:	f042 0201 	orr.w	r2, r2, #1
900063fc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900063fe:	687b      	ldr	r3, [r7, #4]
90006400:	2200      	movs	r2, #0
90006402:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90006406:	687b      	ldr	r3, [r7, #4]
90006408:	2201      	movs	r2, #1
9000640a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
9000640e:	2300      	movs	r3, #0
}
90006410:	4618      	mov	r0, r3
90006412:	3710      	adds	r7, #16
90006414:	46bd      	mov	sp, r7
90006416:	bd80      	pop	{r7, pc}

90006418 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006418:	b480      	push	{r7}
9000641a:	b083      	sub	sp, #12
9000641c:	af00      	add	r7, sp, #0
9000641e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006420:	bf00      	nop
90006422:	370c      	adds	r7, #12
90006424:	46bd      	mov	sp, r7
90006426:	f85d 7b04 	ldr.w	r7, [sp], #4
9000642a:	4770      	bx	lr

9000642c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000642c:	b5b0      	push	{r4, r5, r7, lr}
9000642e:	b084      	sub	sp, #16
90006430:	af00      	add	r7, sp, #0
90006432:	60f8      	str	r0, [r7, #12]
90006434:	60b9      	str	r1, [r7, #8]
90006436:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90006438:	68fb      	ldr	r3, [r7, #12]
9000643a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
9000643e:	2b01      	cmp	r3, #1
90006440:	d101      	bne.n	90006446 <HAL_LTDC_ConfigLayer+0x1a>
90006442:	2302      	movs	r3, #2
90006444:	e02c      	b.n	900064a0 <HAL_LTDC_ConfigLayer+0x74>
90006446:	68fb      	ldr	r3, [r7, #12]
90006448:	2201      	movs	r2, #1
9000644a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000644e:	68fb      	ldr	r3, [r7, #12]
90006450:	2202      	movs	r2, #2
90006452:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90006456:	68fa      	ldr	r2, [r7, #12]
90006458:	687b      	ldr	r3, [r7, #4]
9000645a:	2134      	movs	r1, #52	@ 0x34
9000645c:	fb01 f303 	mul.w	r3, r1, r3
90006460:	4413      	add	r3, r2
90006462:	f103 0238 	add.w	r2, r3, #56	@ 0x38
90006466:	68bb      	ldr	r3, [r7, #8]
90006468:	4614      	mov	r4, r2
9000646a:	461d      	mov	r5, r3
9000646c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000646e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006478:	682b      	ldr	r3, [r5, #0]
9000647a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
9000647c:	687a      	ldr	r2, [r7, #4]
9000647e:	68b9      	ldr	r1, [r7, #8]
90006480:	68f8      	ldr	r0, [r7, #12]
90006482:	f000 f811 	bl	900064a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90006486:	68fb      	ldr	r3, [r7, #12]
90006488:	681b      	ldr	r3, [r3, #0]
9000648a:	2201      	movs	r2, #1
9000648c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
9000648e:	68fb      	ldr	r3, [r7, #12]
90006490:	2201      	movs	r2, #1
90006492:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90006496:	68fb      	ldr	r3, [r7, #12]
90006498:	2200      	movs	r2, #0
9000649a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
9000649e:	2300      	movs	r3, #0
}
900064a0:	4618      	mov	r0, r3
900064a2:	3710      	adds	r7, #16
900064a4:	46bd      	mov	sp, r7
900064a6:	bdb0      	pop	{r4, r5, r7, pc}

900064a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900064a8:	b480      	push	{r7}
900064aa:	b089      	sub	sp, #36	@ 0x24
900064ac:	af00      	add	r7, sp, #0
900064ae:	60f8      	str	r0, [r7, #12]
900064b0:	60b9      	str	r1, [r7, #8]
900064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900064b4:	68bb      	ldr	r3, [r7, #8]
900064b6:	685a      	ldr	r2, [r3, #4]
900064b8:	68fb      	ldr	r3, [r7, #12]
900064ba:	681b      	ldr	r3, [r3, #0]
900064bc:	68db      	ldr	r3, [r3, #12]
900064be:	0c1b      	lsrs	r3, r3, #16
900064c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
900064c4:	4413      	add	r3, r2
900064c6:	041b      	lsls	r3, r3, #16
900064c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900064ca:	68fb      	ldr	r3, [r7, #12]
900064cc:	681b      	ldr	r3, [r3, #0]
900064ce:	461a      	mov	r2, r3
900064d0:	687b      	ldr	r3, [r7, #4]
900064d2:	01db      	lsls	r3, r3, #7
900064d4:	4413      	add	r3, r2
900064d6:	3384      	adds	r3, #132	@ 0x84
900064d8:	685b      	ldr	r3, [r3, #4]
900064da:	68fa      	ldr	r2, [r7, #12]
900064dc:	6812      	ldr	r2, [r2, #0]
900064de:	4611      	mov	r1, r2
900064e0:	687a      	ldr	r2, [r7, #4]
900064e2:	01d2      	lsls	r2, r2, #7
900064e4:	440a      	add	r2, r1
900064e6:	3284      	adds	r2, #132	@ 0x84
900064e8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900064ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900064ee:	68bb      	ldr	r3, [r7, #8]
900064f0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900064f2:	68fb      	ldr	r3, [r7, #12]
900064f4:	681b      	ldr	r3, [r3, #0]
900064f6:	68db      	ldr	r3, [r3, #12]
900064f8:	0c1b      	lsrs	r3, r3, #16
900064fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
900064fe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006500:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006502:	68fb      	ldr	r3, [r7, #12]
90006504:	681b      	ldr	r3, [r3, #0]
90006506:	4619      	mov	r1, r3
90006508:	687b      	ldr	r3, [r7, #4]
9000650a:	01db      	lsls	r3, r3, #7
9000650c:	440b      	add	r3, r1
9000650e:	3384      	adds	r3, #132	@ 0x84
90006510:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006512:	69fb      	ldr	r3, [r7, #28]
90006514:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006516:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006518:	68bb      	ldr	r3, [r7, #8]
9000651a:	68da      	ldr	r2, [r3, #12]
9000651c:	68fb      	ldr	r3, [r7, #12]
9000651e:	681b      	ldr	r3, [r3, #0]
90006520:	68db      	ldr	r3, [r3, #12]
90006522:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006526:	4413      	add	r3, r2
90006528:	041b      	lsls	r3, r3, #16
9000652a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000652c:	68fb      	ldr	r3, [r7, #12]
9000652e:	681b      	ldr	r3, [r3, #0]
90006530:	461a      	mov	r2, r3
90006532:	687b      	ldr	r3, [r7, #4]
90006534:	01db      	lsls	r3, r3, #7
90006536:	4413      	add	r3, r2
90006538:	3384      	adds	r3, #132	@ 0x84
9000653a:	689b      	ldr	r3, [r3, #8]
9000653c:	68fa      	ldr	r2, [r7, #12]
9000653e:	6812      	ldr	r2, [r2, #0]
90006540:	4611      	mov	r1, r2
90006542:	687a      	ldr	r2, [r7, #4]
90006544:	01d2      	lsls	r2, r2, #7
90006546:	440a      	add	r2, r1
90006548:	3284      	adds	r2, #132	@ 0x84
9000654a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
9000654e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90006550:	68bb      	ldr	r3, [r7, #8]
90006552:	689a      	ldr	r2, [r3, #8]
90006554:	68fb      	ldr	r3, [r7, #12]
90006556:	681b      	ldr	r3, [r3, #0]
90006558:	68db      	ldr	r3, [r3, #12]
9000655a:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000655e:	4413      	add	r3, r2
90006560:	1c5a      	adds	r2, r3, #1
90006562:	68fb      	ldr	r3, [r7, #12]
90006564:	681b      	ldr	r3, [r3, #0]
90006566:	4619      	mov	r1, r3
90006568:	687b      	ldr	r3, [r7, #4]
9000656a:	01db      	lsls	r3, r3, #7
9000656c:	440b      	add	r3, r1
9000656e:	3384      	adds	r3, #132	@ 0x84
90006570:	4619      	mov	r1, r3
90006572:	69fb      	ldr	r3, [r7, #28]
90006574:	4313      	orrs	r3, r2
90006576:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90006578:	68fb      	ldr	r3, [r7, #12]
9000657a:	681b      	ldr	r3, [r3, #0]
9000657c:	461a      	mov	r2, r3
9000657e:	687b      	ldr	r3, [r7, #4]
90006580:	01db      	lsls	r3, r3, #7
90006582:	4413      	add	r3, r2
90006584:	3384      	adds	r3, #132	@ 0x84
90006586:	691b      	ldr	r3, [r3, #16]
90006588:	68fa      	ldr	r2, [r7, #12]
9000658a:	6812      	ldr	r2, [r2, #0]
9000658c:	4611      	mov	r1, r2
9000658e:	687a      	ldr	r2, [r7, #4]
90006590:	01d2      	lsls	r2, r2, #7
90006592:	440a      	add	r2, r1
90006594:	3284      	adds	r2, #132	@ 0x84
90006596:	f023 0307 	bic.w	r3, r3, #7
9000659a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000659c:	68fb      	ldr	r3, [r7, #12]
9000659e:	681b      	ldr	r3, [r3, #0]
900065a0:	461a      	mov	r2, r3
900065a2:	687b      	ldr	r3, [r7, #4]
900065a4:	01db      	lsls	r3, r3, #7
900065a6:	4413      	add	r3, r2
900065a8:	3384      	adds	r3, #132	@ 0x84
900065aa:	461a      	mov	r2, r3
900065ac:	68bb      	ldr	r3, [r7, #8]
900065ae:	691b      	ldr	r3, [r3, #16]
900065b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900065b2:	68bb      	ldr	r3, [r7, #8]
900065b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
900065b8:	021b      	lsls	r3, r3, #8
900065ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900065bc:	68bb      	ldr	r3, [r7, #8]
900065be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
900065c2:	041b      	lsls	r3, r3, #16
900065c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
900065c6:	68bb      	ldr	r3, [r7, #8]
900065c8:	699b      	ldr	r3, [r3, #24]
900065ca:	061b      	lsls	r3, r3, #24
900065cc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
900065ce:	68bb      	ldr	r3, [r7, #8]
900065d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
900065d4:	461a      	mov	r2, r3
900065d6:	69fb      	ldr	r3, [r7, #28]
900065d8:	431a      	orrs	r2, r3
900065da:	69bb      	ldr	r3, [r7, #24]
900065dc:	431a      	orrs	r2, r3
900065de:	68fb      	ldr	r3, [r7, #12]
900065e0:	681b      	ldr	r3, [r3, #0]
900065e2:	4619      	mov	r1, r3
900065e4:	687b      	ldr	r3, [r7, #4]
900065e6:	01db      	lsls	r3, r3, #7
900065e8:	440b      	add	r3, r1
900065ea:	3384      	adds	r3, #132	@ 0x84
900065ec:	4619      	mov	r1, r3
900065ee:	697b      	ldr	r3, [r7, #20]
900065f0:	4313      	orrs	r3, r2
900065f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900065f4:	68fb      	ldr	r3, [r7, #12]
900065f6:	681b      	ldr	r3, [r3, #0]
900065f8:	461a      	mov	r2, r3
900065fa:	687b      	ldr	r3, [r7, #4]
900065fc:	01db      	lsls	r3, r3, #7
900065fe:	4413      	add	r3, r2
90006600:	3384      	adds	r3, #132	@ 0x84
90006602:	695b      	ldr	r3, [r3, #20]
90006604:	68fa      	ldr	r2, [r7, #12]
90006606:	6812      	ldr	r2, [r2, #0]
90006608:	4611      	mov	r1, r2
9000660a:	687a      	ldr	r2, [r7, #4]
9000660c:	01d2      	lsls	r2, r2, #7
9000660e:	440a      	add	r2, r1
90006610:	3284      	adds	r2, #132	@ 0x84
90006612:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90006616:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006618:	68fb      	ldr	r3, [r7, #12]
9000661a:	681b      	ldr	r3, [r3, #0]
9000661c:	461a      	mov	r2, r3
9000661e:	687b      	ldr	r3, [r7, #4]
90006620:	01db      	lsls	r3, r3, #7
90006622:	4413      	add	r3, r2
90006624:	3384      	adds	r3, #132	@ 0x84
90006626:	461a      	mov	r2, r3
90006628:	68bb      	ldr	r3, [r7, #8]
9000662a:	695b      	ldr	r3, [r3, #20]
9000662c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000662e:	68fb      	ldr	r3, [r7, #12]
90006630:	681b      	ldr	r3, [r3, #0]
90006632:	461a      	mov	r2, r3
90006634:	687b      	ldr	r3, [r7, #4]
90006636:	01db      	lsls	r3, r3, #7
90006638:	4413      	add	r3, r2
9000663a:	3384      	adds	r3, #132	@ 0x84
9000663c:	69da      	ldr	r2, [r3, #28]
9000663e:	68fb      	ldr	r3, [r7, #12]
90006640:	681b      	ldr	r3, [r3, #0]
90006642:	4619      	mov	r1, r3
90006644:	687b      	ldr	r3, [r7, #4]
90006646:	01db      	lsls	r3, r3, #7
90006648:	440b      	add	r3, r1
9000664a:	3384      	adds	r3, #132	@ 0x84
9000664c:	4619      	mov	r1, r3
9000664e:	4b4f      	ldr	r3, [pc, #316]	@ (9000678c <LTDC_SetConfig+0x2e4>)
90006650:	4013      	ands	r3, r2
90006652:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90006654:	68bb      	ldr	r3, [r7, #8]
90006656:	69da      	ldr	r2, [r3, #28]
90006658:	68bb      	ldr	r3, [r7, #8]
9000665a:	6a1b      	ldr	r3, [r3, #32]
9000665c:	68f9      	ldr	r1, [r7, #12]
9000665e:	6809      	ldr	r1, [r1, #0]
90006660:	4608      	mov	r0, r1
90006662:	6879      	ldr	r1, [r7, #4]
90006664:	01c9      	lsls	r1, r1, #7
90006666:	4401      	add	r1, r0
90006668:	3184      	adds	r1, #132	@ 0x84
9000666a:	4313      	orrs	r3, r2
9000666c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
9000666e:	68fb      	ldr	r3, [r7, #12]
90006670:	681b      	ldr	r3, [r3, #0]
90006672:	461a      	mov	r2, r3
90006674:	687b      	ldr	r3, [r7, #4]
90006676:	01db      	lsls	r3, r3, #7
90006678:	4413      	add	r3, r2
9000667a:	3384      	adds	r3, #132	@ 0x84
9000667c:	461a      	mov	r2, r3
9000667e:	68bb      	ldr	r3, [r7, #8]
90006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006682:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006684:	68bb      	ldr	r3, [r7, #8]
90006686:	691b      	ldr	r3, [r3, #16]
90006688:	2b00      	cmp	r3, #0
9000668a:	d102      	bne.n	90006692 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
9000668c:	2304      	movs	r3, #4
9000668e:	61fb      	str	r3, [r7, #28]
90006690:	e01b      	b.n	900066ca <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006692:	68bb      	ldr	r3, [r7, #8]
90006694:	691b      	ldr	r3, [r3, #16]
90006696:	2b01      	cmp	r3, #1
90006698:	d102      	bne.n	900066a0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
9000669a:	2303      	movs	r3, #3
9000669c:	61fb      	str	r3, [r7, #28]
9000669e:	e014      	b.n	900066ca <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900066a0:	68bb      	ldr	r3, [r7, #8]
900066a2:	691b      	ldr	r3, [r3, #16]
900066a4:	2b04      	cmp	r3, #4
900066a6:	d00b      	beq.n	900066c0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900066a8:	68bb      	ldr	r3, [r7, #8]
900066aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900066ac:	2b02      	cmp	r3, #2
900066ae:	d007      	beq.n	900066c0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900066b0:	68bb      	ldr	r3, [r7, #8]
900066b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900066b4:	2b03      	cmp	r3, #3
900066b6:	d003      	beq.n	900066c0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
900066b8:	68bb      	ldr	r3, [r7, #8]
900066ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900066bc:	2b07      	cmp	r3, #7
900066be:	d102      	bne.n	900066c6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
900066c0:	2302      	movs	r3, #2
900066c2:	61fb      	str	r3, [r7, #28]
900066c4:	e001      	b.n	900066ca <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
900066c6:	2301      	movs	r3, #1
900066c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900066ca:	68fb      	ldr	r3, [r7, #12]
900066cc:	681b      	ldr	r3, [r3, #0]
900066ce:	461a      	mov	r2, r3
900066d0:	687b      	ldr	r3, [r7, #4]
900066d2:	01db      	lsls	r3, r3, #7
900066d4:	4413      	add	r3, r2
900066d6:	3384      	adds	r3, #132	@ 0x84
900066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900066da:	68fa      	ldr	r2, [r7, #12]
900066dc:	6812      	ldr	r2, [r2, #0]
900066de:	4611      	mov	r1, r2
900066e0:	687a      	ldr	r2, [r7, #4]
900066e2:	01d2      	lsls	r2, r2, #7
900066e4:	440a      	add	r2, r1
900066e6:	3284      	adds	r2, #132	@ 0x84
900066e8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
900066ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
900066ee:	68bb      	ldr	r3, [r7, #8]
900066f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900066f2:	69fa      	ldr	r2, [r7, #28]
900066f4:	fb02 f303 	mul.w	r3, r2, r3
900066f8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
900066fa:	68bb      	ldr	r3, [r7, #8]
900066fc:	6859      	ldr	r1, [r3, #4]
900066fe:	68bb      	ldr	r3, [r7, #8]
90006700:	681b      	ldr	r3, [r3, #0]
90006702:	1acb      	subs	r3, r1, r3
90006704:	69f9      	ldr	r1, [r7, #28]
90006706:	fb01 f303 	mul.w	r3, r1, r3
9000670a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
9000670c:	68f9      	ldr	r1, [r7, #12]
9000670e:	6809      	ldr	r1, [r1, #0]
90006710:	4608      	mov	r0, r1
90006712:	6879      	ldr	r1, [r7, #4]
90006714:	01c9      	lsls	r1, r1, #7
90006716:	4401      	add	r1, r0
90006718:	3184      	adds	r1, #132	@ 0x84
9000671a:	4313      	orrs	r3, r2
9000671c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000671e:	68fb      	ldr	r3, [r7, #12]
90006720:	681b      	ldr	r3, [r3, #0]
90006722:	461a      	mov	r2, r3
90006724:	687b      	ldr	r3, [r7, #4]
90006726:	01db      	lsls	r3, r3, #7
90006728:	4413      	add	r3, r2
9000672a:	3384      	adds	r3, #132	@ 0x84
9000672c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000672e:	68fb      	ldr	r3, [r7, #12]
90006730:	681b      	ldr	r3, [r3, #0]
90006732:	4619      	mov	r1, r3
90006734:	687b      	ldr	r3, [r7, #4]
90006736:	01db      	lsls	r3, r3, #7
90006738:	440b      	add	r3, r1
9000673a:	3384      	adds	r3, #132	@ 0x84
9000673c:	4619      	mov	r1, r3
9000673e:	4b14      	ldr	r3, [pc, #80]	@ (90006790 <LTDC_SetConfig+0x2e8>)
90006740:	4013      	ands	r3, r2
90006742:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90006744:	68fb      	ldr	r3, [r7, #12]
90006746:	681b      	ldr	r3, [r3, #0]
90006748:	461a      	mov	r2, r3
9000674a:	687b      	ldr	r3, [r7, #4]
9000674c:	01db      	lsls	r3, r3, #7
9000674e:	4413      	add	r3, r2
90006750:	3384      	adds	r3, #132	@ 0x84
90006752:	461a      	mov	r2, r3
90006754:	68bb      	ldr	r3, [r7, #8]
90006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006758:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000675a:	68fb      	ldr	r3, [r7, #12]
9000675c:	681b      	ldr	r3, [r3, #0]
9000675e:	461a      	mov	r2, r3
90006760:	687b      	ldr	r3, [r7, #4]
90006762:	01db      	lsls	r3, r3, #7
90006764:	4413      	add	r3, r2
90006766:	3384      	adds	r3, #132	@ 0x84
90006768:	681b      	ldr	r3, [r3, #0]
9000676a:	68fa      	ldr	r2, [r7, #12]
9000676c:	6812      	ldr	r2, [r2, #0]
9000676e:	4611      	mov	r1, r2
90006770:	687a      	ldr	r2, [r7, #4]
90006772:	01d2      	lsls	r2, r2, #7
90006774:	440a      	add	r2, r1
90006776:	3284      	adds	r2, #132	@ 0x84
90006778:	f043 0301 	orr.w	r3, r3, #1
9000677c:	6013      	str	r3, [r2, #0]
}
9000677e:	bf00      	nop
90006780:	3724      	adds	r7, #36	@ 0x24
90006782:	46bd      	mov	sp, r7
90006784:	f85d 7b04 	ldr.w	r7, [sp], #4
90006788:	4770      	bx	lr
9000678a:	bf00      	nop
9000678c:	fffff8f8 	.word	0xfffff8f8
90006790:	fffff800 	.word	0xfffff800

90006794 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006794:	b580      	push	{r7, lr}
90006796:	b084      	sub	sp, #16
90006798:	af00      	add	r7, sp, #0
9000679a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
9000679c:	f7fc fc8e 	bl	900030bc <HAL_GetTick>
900067a0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900067a2:	687b      	ldr	r3, [r7, #4]
900067a4:	2b00      	cmp	r3, #0
900067a6:	d101      	bne.n	900067ac <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
900067a8:	2301      	movs	r3, #1
900067aa:	e03b      	b.n	90006824 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
900067ac:	687b      	ldr	r3, [r7, #4]
900067ae:	2200      	movs	r2, #0
900067b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
900067b4:	687b      	ldr	r3, [r7, #4]
900067b6:	2202      	movs	r2, #2
900067b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
900067bc:	687b      	ldr	r3, [r7, #4]
900067be:	681b      	ldr	r3, [r3, #0]
900067c0:	68da      	ldr	r2, [r3, #12]
900067c2:	687b      	ldr	r3, [r7, #4]
900067c4:	681b      	ldr	r3, [r3, #0]
900067c6:	f022 0201 	bic.w	r2, r2, #1
900067ca:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900067cc:	e00f      	b.n	900067ee <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
900067ce:	f7fc fc75 	bl	900030bc <HAL_GetTick>
900067d2:	4602      	mov	r2, r0
900067d4:	68fb      	ldr	r3, [r7, #12]
900067d6:	1ad3      	subs	r3, r2, r3
900067d8:	2b05      	cmp	r3, #5
900067da:	d908      	bls.n	900067ee <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
900067dc:	687b      	ldr	r3, [r7, #4]
900067de:	2240      	movs	r2, #64	@ 0x40
900067e0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
900067e2:	687b      	ldr	r3, [r7, #4]
900067e4:	2203      	movs	r2, #3
900067e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
900067ea:	2301      	movs	r3, #1
900067ec:	e01a      	b.n	90006824 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900067ee:	687b      	ldr	r3, [r7, #4]
900067f0:	681b      	ldr	r3, [r3, #0]
900067f2:	68db      	ldr	r3, [r3, #12]
900067f4:	f003 0301 	and.w	r3, r3, #1
900067f8:	2b00      	cmp	r3, #0
900067fa:	d1e8      	bne.n	900067ce <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
900067fc:	6878      	ldr	r0, [r7, #4]
900067fe:	f000 f86d 	bl	900068dc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006802:	687b      	ldr	r3, [r7, #4]
90006804:	2200      	movs	r2, #0
90006806:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006808:	687b      	ldr	r3, [r7, #4]
9000680a:	2200      	movs	r2, #0
9000680c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
9000680e:	687b      	ldr	r3, [r7, #4]
90006810:	2200      	movs	r2, #0
90006812:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006814:	687b      	ldr	r3, [r7, #4]
90006816:	2200      	movs	r2, #0
90006818:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
9000681a:	687b      	ldr	r3, [r7, #4]
9000681c:	2201      	movs	r2, #1
9000681e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006822:	2300      	movs	r3, #0
}
90006824:	4618      	mov	r0, r3
90006826:	3710      	adds	r7, #16
90006828:	46bd      	mov	sp, r7
9000682a:	bd80      	pop	{r7, pc}

9000682c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
9000682c:	b480      	push	{r7}
9000682e:	b083      	sub	sp, #12
90006830:	af00      	add	r7, sp, #0
90006832:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006834:	687b      	ldr	r3, [r7, #4]
90006836:	2b00      	cmp	r3, #0
90006838:	d101      	bne.n	9000683e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
9000683a:	2301      	movs	r3, #1
9000683c:	e048      	b.n	900068d0 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
9000683e:	687b      	ldr	r3, [r7, #4]
90006840:	681b      	ldr	r3, [r3, #0]
90006842:	68da      	ldr	r2, [r3, #12]
90006844:	687b      	ldr	r3, [r7, #4]
90006846:	681b      	ldr	r3, [r3, #0]
90006848:	f022 0201 	bic.w	r2, r2, #1
9000684c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
9000684e:	687b      	ldr	r3, [r7, #4]
90006850:	681b      	ldr	r3, [r3, #0]
90006852:	2200      	movs	r2, #0
90006854:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90006856:	687b      	ldr	r3, [r7, #4]
90006858:	681b      	ldr	r3, [r3, #0]
9000685a:	2200      	movs	r2, #0
9000685c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
9000685e:	687b      	ldr	r3, [r7, #4]
90006860:	681b      	ldr	r3, [r3, #0]
90006862:	2200      	movs	r2, #0
90006864:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006866:	687b      	ldr	r3, [r7, #4]
90006868:	681b      	ldr	r3, [r3, #0]
9000686a:	2200      	movs	r2, #0
9000686c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
9000686e:	687b      	ldr	r3, [r7, #4]
90006870:	681b      	ldr	r3, [r3, #0]
90006872:	2200      	movs	r2, #0
90006874:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006876:	687b      	ldr	r3, [r7, #4]
90006878:	681b      	ldr	r3, [r3, #0]
9000687a:	2200      	movs	r2, #0
9000687c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
9000687e:	687b      	ldr	r3, [r7, #4]
90006880:	681b      	ldr	r3, [r3, #0]
90006882:	2200      	movs	r2, #0
90006884:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90006886:	687b      	ldr	r3, [r7, #4]
90006888:	681b      	ldr	r3, [r3, #0]
9000688a:	2200      	movs	r2, #0
9000688c:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
9000688e:	687b      	ldr	r3, [r7, #4]
90006890:	681b      	ldr	r3, [r3, #0]
90006892:	2200      	movs	r2, #0
90006894:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006896:	687b      	ldr	r3, [r7, #4]
90006898:	681b      	ldr	r3, [r3, #0]
9000689a:	2200      	movs	r2, #0
9000689c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000689e:	687b      	ldr	r3, [r7, #4]
900068a0:	681b      	ldr	r3, [r3, #0]
900068a2:	221f      	movs	r2, #31
900068a4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
900068a6:	687b      	ldr	r3, [r7, #4]
900068a8:	2200      	movs	r2, #0
900068aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
900068ac:	687b      	ldr	r3, [r7, #4]
900068ae:	2200      	movs	r2, #0
900068b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
900068b2:	687b      	ldr	r3, [r7, #4]
900068b4:	2200      	movs	r2, #0
900068b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900068b8:	687b      	ldr	r3, [r7, #4]
900068ba:	2200      	movs	r2, #0
900068bc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
900068be:	687b      	ldr	r3, [r7, #4]
900068c0:	2200      	movs	r2, #0
900068c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
900068c6:	687b      	ldr	r3, [r7, #4]
900068c8:	2200      	movs	r2, #0
900068ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
900068ce:	2300      	movs	r3, #0
}
900068d0:	4618      	mov	r0, r3
900068d2:	370c      	adds	r7, #12
900068d4:	46bd      	mov	sp, r7
900068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
900068da:	4770      	bx	lr

900068dc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900068dc:	b480      	push	{r7}
900068de:	b085      	sub	sp, #20
900068e0:	af00      	add	r7, sp, #0
900068e2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
900068e4:	687b      	ldr	r3, [r7, #4]
900068e6:	68d9      	ldr	r1, [r3, #12]
900068e8:	687b      	ldr	r3, [r7, #4]
900068ea:	691a      	ldr	r2, [r3, #16]
900068ec:	687b      	ldr	r3, [r7, #4]
900068ee:	681b      	ldr	r3, [r3, #0]
900068f0:	430a      	orrs	r2, r1
900068f2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
900068f4:	687b      	ldr	r3, [r7, #4]
900068f6:	695a      	ldr	r2, [r3, #20]
900068f8:	687b      	ldr	r3, [r7, #4]
900068fa:	699b      	ldr	r3, [r3, #24]
900068fc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
900068fe:	687b      	ldr	r3, [r7, #4]
90006900:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006902:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006904:	687b      	ldr	r3, [r7, #4]
90006906:	6a1b      	ldr	r3, [r3, #32]
90006908:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000690a:	687b      	ldr	r3, [r7, #4]
9000690c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
9000690e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006910:	687b      	ldr	r3, [r7, #4]
90006912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006914:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006916:	687b      	ldr	r3, [r7, #4]
90006918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000691a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000691c:	687b      	ldr	r3, [r7, #4]
9000691e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006920:	3b01      	subs	r3, #1
90006922:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006924:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006928:	687b      	ldr	r3, [r7, #4]
9000692a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000692c:	687b      	ldr	r3, [r7, #4]
9000692e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006930:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006932:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006934:	687b      	ldr	r3, [r7, #4]
90006936:	685b      	ldr	r3, [r3, #4]
90006938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000693c:	d107      	bne.n	9000694e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000693e:	687b      	ldr	r3, [r7, #4]
90006940:	681b      	ldr	r3, [r3, #0]
90006942:	691a      	ldr	r2, [r3, #16]
90006944:	687b      	ldr	r3, [r7, #4]
90006946:	681b      	ldr	r3, [r3, #0]
90006948:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
9000694c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000694e:	687b      	ldr	r3, [r7, #4]
90006950:	681b      	ldr	r3, [r3, #0]
90006952:	2200      	movs	r2, #0
90006954:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006956:	687b      	ldr	r3, [r7, #4]
90006958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000695a:	2b00      	cmp	r3, #0
9000695c:	da11      	bge.n	90006982 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000695e:	687b      	ldr	r3, [r7, #4]
90006960:	681b      	ldr	r3, [r3, #0]
90006962:	695a      	ldr	r2, [r3, #20]
90006964:	687b      	ldr	r3, [r7, #4]
90006966:	681b      	ldr	r3, [r3, #0]
90006968:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
9000696c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000696e:	687b      	ldr	r3, [r7, #4]
90006970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006972:	425b      	negs	r3, r3
90006974:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006976:	687b      	ldr	r3, [r7, #4]
90006978:	681b      	ldr	r3, [r3, #0]
9000697a:	68fa      	ldr	r2, [r7, #12]
9000697c:	b292      	uxth	r2, r2
9000697e:	621a      	str	r2, [r3, #32]
90006980:	e006      	b.n	90006990 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006982:	687b      	ldr	r3, [r7, #4]
90006984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006986:	461a      	mov	r2, r3
90006988:	687b      	ldr	r3, [r7, #4]
9000698a:	681b      	ldr	r3, [r3, #0]
9000698c:	b292      	uxth	r2, r2
9000698e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006990:	687b      	ldr	r3, [r7, #4]
90006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006994:	2b00      	cmp	r3, #0
90006996:	da15      	bge.n	900069c4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006998:	687b      	ldr	r3, [r7, #4]
9000699a:	681b      	ldr	r3, [r3, #0]
9000699c:	695a      	ldr	r2, [r3, #20]
9000699e:	687b      	ldr	r3, [r7, #4]
900069a0:	681b      	ldr	r3, [r3, #0]
900069a2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
900069a6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
900069a8:	687b      	ldr	r3, [r7, #4]
900069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900069ac:	425b      	negs	r3, r3
900069ae:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
900069b0:	687b      	ldr	r3, [r7, #4]
900069b2:	681b      	ldr	r3, [r3, #0]
900069b4:	6a19      	ldr	r1, [r3, #32]
900069b6:	68fb      	ldr	r3, [r7, #12]
900069b8:	041a      	lsls	r2, r3, #16
900069ba:	687b      	ldr	r3, [r7, #4]
900069bc:	681b      	ldr	r3, [r3, #0]
900069be:	430a      	orrs	r2, r1
900069c0:	621a      	str	r2, [r3, #32]
900069c2:	e009      	b.n	900069d8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
900069c4:	687b      	ldr	r3, [r7, #4]
900069c6:	681b      	ldr	r3, [r3, #0]
900069c8:	6a19      	ldr	r1, [r3, #32]
900069ca:	687b      	ldr	r3, [r7, #4]
900069cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900069ce:	041a      	lsls	r2, r3, #16
900069d0:	687b      	ldr	r3, [r7, #4]
900069d2:	681b      	ldr	r3, [r3, #0]
900069d4:	430a      	orrs	r2, r1
900069d6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	685b      	ldr	r3, [r3, #4]
900069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900069e0:	d006      	beq.n	900069f0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
900069e2:	687b      	ldr	r3, [r7, #4]
900069e4:	685a      	ldr	r2, [r3, #4]
900069e6:	687b      	ldr	r3, [r7, #4]
900069e8:	681b      	ldr	r3, [r3, #0]
900069ea:	b2d2      	uxtb	r2, r2
900069ec:	629a      	str	r2, [r3, #40]	@ 0x28
900069ee:	e003      	b.n	900069f8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
900069f0:	687b      	ldr	r3, [r7, #4]
900069f2:	681b      	ldr	r3, [r3, #0]
900069f4:	2200      	movs	r2, #0
900069f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
900069f8:	687b      	ldr	r3, [r7, #4]
900069fa:	681b      	ldr	r3, [r3, #0]
900069fc:	2200      	movs	r2, #0
900069fe:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006a00:	bf00      	nop
90006a02:	3714      	adds	r7, #20
90006a04:	46bd      	mov	sp, r7
90006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a0a:	4770      	bx	lr

90006a0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006a0c:	b580      	push	{r7, lr}
90006a0e:	b08c      	sub	sp, #48	@ 0x30
90006a10:	af00      	add	r7, sp, #0
90006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006a14:	687b      	ldr	r3, [r7, #4]
90006a16:	2b00      	cmp	r3, #0
90006a18:	d102      	bne.n	90006a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006a1a:	2301      	movs	r3, #1
90006a1c:	f000 bc48 	b.w	900072b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006a20:	687b      	ldr	r3, [r7, #4]
90006a22:	681b      	ldr	r3, [r3, #0]
90006a24:	f003 0301 	and.w	r3, r3, #1
90006a28:	2b00      	cmp	r3, #0
90006a2a:	f000 8088 	beq.w	90006b3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006a2e:	4b99      	ldr	r3, [pc, #612]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006a30:	691b      	ldr	r3, [r3, #16]
90006a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006a38:	4b96      	ldr	r3, [pc, #600]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006a40:	2b10      	cmp	r3, #16
90006a42:	d007      	beq.n	90006a54 <HAL_RCC_OscConfig+0x48>
90006a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006a46:	2b18      	cmp	r3, #24
90006a48:	d111      	bne.n	90006a6e <HAL_RCC_OscConfig+0x62>
90006a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006a4c:	f003 0303 	and.w	r3, r3, #3
90006a50:	2b02      	cmp	r3, #2
90006a52:	d10c      	bne.n	90006a6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006a54:	4b8f      	ldr	r3, [pc, #572]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006a56:	681b      	ldr	r3, [r3, #0]
90006a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006a5c:	2b00      	cmp	r3, #0
90006a5e:	d06d      	beq.n	90006b3c <HAL_RCC_OscConfig+0x130>
90006a60:	687b      	ldr	r3, [r7, #4]
90006a62:	685b      	ldr	r3, [r3, #4]
90006a64:	2b00      	cmp	r3, #0
90006a66:	d169      	bne.n	90006b3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006a68:	2301      	movs	r3, #1
90006a6a:	f000 bc21 	b.w	900072b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006a6e:	687b      	ldr	r3, [r7, #4]
90006a70:	685b      	ldr	r3, [r3, #4]
90006a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006a76:	d106      	bne.n	90006a86 <HAL_RCC_OscConfig+0x7a>
90006a78:	4b86      	ldr	r3, [pc, #536]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006a7a:	681b      	ldr	r3, [r3, #0]
90006a7c:	4a85      	ldr	r2, [pc, #532]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006a82:	6013      	str	r3, [r2, #0]
90006a84:	e02e      	b.n	90006ae4 <HAL_RCC_OscConfig+0xd8>
90006a86:	687b      	ldr	r3, [r7, #4]
90006a88:	685b      	ldr	r3, [r3, #4]
90006a8a:	2b00      	cmp	r3, #0
90006a8c:	d10c      	bne.n	90006aa8 <HAL_RCC_OscConfig+0x9c>
90006a8e:	4b81      	ldr	r3, [pc, #516]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006a90:	681b      	ldr	r3, [r3, #0]
90006a92:	4a80      	ldr	r2, [pc, #512]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006a98:	6013      	str	r3, [r2, #0]
90006a9a:	4b7e      	ldr	r3, [pc, #504]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006a9c:	681b      	ldr	r3, [r3, #0]
90006a9e:	4a7d      	ldr	r2, [pc, #500]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006aa4:	6013      	str	r3, [r2, #0]
90006aa6:	e01d      	b.n	90006ae4 <HAL_RCC_OscConfig+0xd8>
90006aa8:	687b      	ldr	r3, [r7, #4]
90006aaa:	685b      	ldr	r3, [r3, #4]
90006aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006ab0:	d10c      	bne.n	90006acc <HAL_RCC_OscConfig+0xc0>
90006ab2:	4b78      	ldr	r3, [pc, #480]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006ab4:	681b      	ldr	r3, [r3, #0]
90006ab6:	4a77      	ldr	r2, [pc, #476]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006abc:	6013      	str	r3, [r2, #0]
90006abe:	4b75      	ldr	r3, [pc, #468]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006ac0:	681b      	ldr	r3, [r3, #0]
90006ac2:	4a74      	ldr	r2, [pc, #464]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006ac8:	6013      	str	r3, [r2, #0]
90006aca:	e00b      	b.n	90006ae4 <HAL_RCC_OscConfig+0xd8>
90006acc:	4b71      	ldr	r3, [pc, #452]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006ace:	681b      	ldr	r3, [r3, #0]
90006ad0:	4a70      	ldr	r2, [pc, #448]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006ad6:	6013      	str	r3, [r2, #0]
90006ad8:	4b6e      	ldr	r3, [pc, #440]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006ada:	681b      	ldr	r3, [r3, #0]
90006adc:	4a6d      	ldr	r2, [pc, #436]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006ae4:	687b      	ldr	r3, [r7, #4]
90006ae6:	685b      	ldr	r3, [r3, #4]
90006ae8:	2b00      	cmp	r3, #0
90006aea:	d013      	beq.n	90006b14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006aec:	f7fc fae6 	bl	900030bc <HAL_GetTick>
90006af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006af2:	e008      	b.n	90006b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006af4:	f7fc fae2 	bl	900030bc <HAL_GetTick>
90006af8:	4602      	mov	r2, r0
90006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006afc:	1ad3      	subs	r3, r2, r3
90006afe:	2b64      	cmp	r3, #100	@ 0x64
90006b00:	d901      	bls.n	90006b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006b02:	2303      	movs	r3, #3
90006b04:	e3d4      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006b06:	4b63      	ldr	r3, [pc, #396]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006b08:	681b      	ldr	r3, [r3, #0]
90006b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006b0e:	2b00      	cmp	r3, #0
90006b10:	d0f0      	beq.n	90006af4 <HAL_RCC_OscConfig+0xe8>
90006b12:	e014      	b.n	90006b3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006b14:	f7fc fad2 	bl	900030bc <HAL_GetTick>
90006b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006b1a:	e008      	b.n	90006b2e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006b1c:	f7fc face 	bl	900030bc <HAL_GetTick>
90006b20:	4602      	mov	r2, r0
90006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006b24:	1ad3      	subs	r3, r2, r3
90006b26:	2b64      	cmp	r3, #100	@ 0x64
90006b28:	d901      	bls.n	90006b2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006b2a:	2303      	movs	r3, #3
90006b2c:	e3c0      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006b2e:	4b59      	ldr	r3, [pc, #356]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006b30:	681b      	ldr	r3, [r3, #0]
90006b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006b36:	2b00      	cmp	r3, #0
90006b38:	d1f0      	bne.n	90006b1c <HAL_RCC_OscConfig+0x110>
90006b3a:	e000      	b.n	90006b3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006b3e:	687b      	ldr	r3, [r7, #4]
90006b40:	681b      	ldr	r3, [r3, #0]
90006b42:	f003 0302 	and.w	r3, r3, #2
90006b46:	2b00      	cmp	r3, #0
90006b48:	f000 80ca 	beq.w	90006ce0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006b4c:	4b51      	ldr	r3, [pc, #324]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006b4e:	691b      	ldr	r3, [r3, #16]
90006b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006b54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006b56:	4b4f      	ldr	r3, [pc, #316]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006b5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006b5c:	6a3b      	ldr	r3, [r7, #32]
90006b5e:	2b00      	cmp	r3, #0
90006b60:	d007      	beq.n	90006b72 <HAL_RCC_OscConfig+0x166>
90006b62:	6a3b      	ldr	r3, [r7, #32]
90006b64:	2b18      	cmp	r3, #24
90006b66:	d156      	bne.n	90006c16 <HAL_RCC_OscConfig+0x20a>
90006b68:	69fb      	ldr	r3, [r7, #28]
90006b6a:	f003 0303 	and.w	r3, r3, #3
90006b6e:	2b00      	cmp	r3, #0
90006b70:	d151      	bne.n	90006c16 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006b72:	4b48      	ldr	r3, [pc, #288]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006b74:	681b      	ldr	r3, [r3, #0]
90006b76:	f003 0304 	and.w	r3, r3, #4
90006b7a:	2b00      	cmp	r3, #0
90006b7c:	d005      	beq.n	90006b8a <HAL_RCC_OscConfig+0x17e>
90006b7e:	687b      	ldr	r3, [r7, #4]
90006b80:	68db      	ldr	r3, [r3, #12]
90006b82:	2b00      	cmp	r3, #0
90006b84:	d101      	bne.n	90006b8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006b86:	2301      	movs	r3, #1
90006b88:	e392      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006b8a:	4b42      	ldr	r3, [pc, #264]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006b8c:	681b      	ldr	r3, [r3, #0]
90006b8e:	f023 0219 	bic.w	r2, r3, #25
90006b92:	687b      	ldr	r3, [r7, #4]
90006b94:	68db      	ldr	r3, [r3, #12]
90006b96:	493f      	ldr	r1, [pc, #252]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006b98:	4313      	orrs	r3, r2
90006b9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006b9c:	f7fc fa8e 	bl	900030bc <HAL_GetTick>
90006ba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006ba2:	e008      	b.n	90006bb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006ba4:	f7fc fa8a 	bl	900030bc <HAL_GetTick>
90006ba8:	4602      	mov	r2, r0
90006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006bac:	1ad3      	subs	r3, r2, r3
90006bae:	2b02      	cmp	r3, #2
90006bb0:	d901      	bls.n	90006bb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006bb2:	2303      	movs	r3, #3
90006bb4:	e37c      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006bb6:	4b37      	ldr	r3, [pc, #220]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006bb8:	681b      	ldr	r3, [r3, #0]
90006bba:	f003 0304 	and.w	r3, r3, #4
90006bbe:	2b00      	cmp	r3, #0
90006bc0:	d0f0      	beq.n	90006ba4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006bc2:	f7fc faab 	bl	9000311c <HAL_GetREVID>
90006bc6:	4603      	mov	r3, r0
90006bc8:	f241 0203 	movw	r2, #4099	@ 0x1003
90006bcc:	4293      	cmp	r3, r2
90006bce:	d817      	bhi.n	90006c00 <HAL_RCC_OscConfig+0x1f4>
90006bd0:	687b      	ldr	r3, [r7, #4]
90006bd2:	691b      	ldr	r3, [r3, #16]
90006bd4:	2b40      	cmp	r3, #64	@ 0x40
90006bd6:	d108      	bne.n	90006bea <HAL_RCC_OscConfig+0x1de>
90006bd8:	4b2e      	ldr	r3, [pc, #184]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006bda:	685b      	ldr	r3, [r3, #4]
90006bdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006be0:	4a2c      	ldr	r2, [pc, #176]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006be6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006be8:	e07a      	b.n	90006ce0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006bea:	4b2a      	ldr	r3, [pc, #168]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006bec:	685b      	ldr	r3, [r3, #4]
90006bee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006bf2:	687b      	ldr	r3, [r7, #4]
90006bf4:	691b      	ldr	r3, [r3, #16]
90006bf6:	031b      	lsls	r3, r3, #12
90006bf8:	4926      	ldr	r1, [pc, #152]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006bfa:	4313      	orrs	r3, r2
90006bfc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006bfe:	e06f      	b.n	90006ce0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006c00:	4b24      	ldr	r3, [pc, #144]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c02:	685b      	ldr	r3, [r3, #4]
90006c04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006c08:	687b      	ldr	r3, [r7, #4]
90006c0a:	691b      	ldr	r3, [r3, #16]
90006c0c:	061b      	lsls	r3, r3, #24
90006c0e:	4921      	ldr	r1, [pc, #132]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c10:	4313      	orrs	r3, r2
90006c12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006c14:	e064      	b.n	90006ce0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006c16:	687b      	ldr	r3, [r7, #4]
90006c18:	68db      	ldr	r3, [r3, #12]
90006c1a:	2b00      	cmp	r3, #0
90006c1c:	d047      	beq.n	90006cae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006c1e:	4b1d      	ldr	r3, [pc, #116]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c20:	681b      	ldr	r3, [r3, #0]
90006c22:	f023 0219 	bic.w	r2, r3, #25
90006c26:	687b      	ldr	r3, [r7, #4]
90006c28:	68db      	ldr	r3, [r3, #12]
90006c2a:	491a      	ldr	r1, [pc, #104]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c2c:	4313      	orrs	r3, r2
90006c2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006c30:	f7fc fa44 	bl	900030bc <HAL_GetTick>
90006c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006c36:	e008      	b.n	90006c4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006c38:	f7fc fa40 	bl	900030bc <HAL_GetTick>
90006c3c:	4602      	mov	r2, r0
90006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c40:	1ad3      	subs	r3, r2, r3
90006c42:	2b02      	cmp	r3, #2
90006c44:	d901      	bls.n	90006c4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006c46:	2303      	movs	r3, #3
90006c48:	e332      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006c4a:	4b12      	ldr	r3, [pc, #72]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c4c:	681b      	ldr	r3, [r3, #0]
90006c4e:	f003 0304 	and.w	r3, r3, #4
90006c52:	2b00      	cmp	r3, #0
90006c54:	d0f0      	beq.n	90006c38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006c56:	f7fc fa61 	bl	9000311c <HAL_GetREVID>
90006c5a:	4603      	mov	r3, r0
90006c5c:	f241 0203 	movw	r2, #4099	@ 0x1003
90006c60:	4293      	cmp	r3, r2
90006c62:	d819      	bhi.n	90006c98 <HAL_RCC_OscConfig+0x28c>
90006c64:	687b      	ldr	r3, [r7, #4]
90006c66:	691b      	ldr	r3, [r3, #16]
90006c68:	2b40      	cmp	r3, #64	@ 0x40
90006c6a:	d108      	bne.n	90006c7e <HAL_RCC_OscConfig+0x272>
90006c6c:	4b09      	ldr	r3, [pc, #36]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c6e:	685b      	ldr	r3, [r3, #4]
90006c70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006c74:	4a07      	ldr	r2, [pc, #28]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006c7a:	6053      	str	r3, [r2, #4]
90006c7c:	e030      	b.n	90006ce0 <HAL_RCC_OscConfig+0x2d4>
90006c7e:	4b05      	ldr	r3, [pc, #20]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c80:	685b      	ldr	r3, [r3, #4]
90006c82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006c86:	687b      	ldr	r3, [r7, #4]
90006c88:	691b      	ldr	r3, [r3, #16]
90006c8a:	031b      	lsls	r3, r3, #12
90006c8c:	4901      	ldr	r1, [pc, #4]	@ (90006c94 <HAL_RCC_OscConfig+0x288>)
90006c8e:	4313      	orrs	r3, r2
90006c90:	604b      	str	r3, [r1, #4]
90006c92:	e025      	b.n	90006ce0 <HAL_RCC_OscConfig+0x2d4>
90006c94:	58024400 	.word	0x58024400
90006c98:	4b9a      	ldr	r3, [pc, #616]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006c9a:	685b      	ldr	r3, [r3, #4]
90006c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006ca0:	687b      	ldr	r3, [r7, #4]
90006ca2:	691b      	ldr	r3, [r3, #16]
90006ca4:	061b      	lsls	r3, r3, #24
90006ca6:	4997      	ldr	r1, [pc, #604]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006ca8:	4313      	orrs	r3, r2
90006caa:	604b      	str	r3, [r1, #4]
90006cac:	e018      	b.n	90006ce0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006cae:	4b95      	ldr	r3, [pc, #596]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006cb0:	681b      	ldr	r3, [r3, #0]
90006cb2:	4a94      	ldr	r2, [pc, #592]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006cb4:	f023 0301 	bic.w	r3, r3, #1
90006cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006cba:	f7fc f9ff 	bl	900030bc <HAL_GetTick>
90006cbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006cc0:	e008      	b.n	90006cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006cc2:	f7fc f9fb 	bl	900030bc <HAL_GetTick>
90006cc6:	4602      	mov	r2, r0
90006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006cca:	1ad3      	subs	r3, r2, r3
90006ccc:	2b02      	cmp	r3, #2
90006cce:	d901      	bls.n	90006cd4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006cd0:	2303      	movs	r3, #3
90006cd2:	e2ed      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006cd4:	4b8b      	ldr	r3, [pc, #556]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006cd6:	681b      	ldr	r3, [r3, #0]
90006cd8:	f003 0304 	and.w	r3, r3, #4
90006cdc:	2b00      	cmp	r3, #0
90006cde:	d1f0      	bne.n	90006cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006ce0:	687b      	ldr	r3, [r7, #4]
90006ce2:	681b      	ldr	r3, [r3, #0]
90006ce4:	f003 0310 	and.w	r3, r3, #16
90006ce8:	2b00      	cmp	r3, #0
90006cea:	f000 80a9 	beq.w	90006e40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006cee:	4b85      	ldr	r3, [pc, #532]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006cf0:	691b      	ldr	r3, [r3, #16]
90006cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006cf6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006cf8:	4b82      	ldr	r3, [pc, #520]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006cfc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006cfe:	69bb      	ldr	r3, [r7, #24]
90006d00:	2b08      	cmp	r3, #8
90006d02:	d007      	beq.n	90006d14 <HAL_RCC_OscConfig+0x308>
90006d04:	69bb      	ldr	r3, [r7, #24]
90006d06:	2b18      	cmp	r3, #24
90006d08:	d13a      	bne.n	90006d80 <HAL_RCC_OscConfig+0x374>
90006d0a:	697b      	ldr	r3, [r7, #20]
90006d0c:	f003 0303 	and.w	r3, r3, #3
90006d10:	2b01      	cmp	r3, #1
90006d12:	d135      	bne.n	90006d80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006d14:	4b7b      	ldr	r3, [pc, #492]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d16:	681b      	ldr	r3, [r3, #0]
90006d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006d1c:	2b00      	cmp	r3, #0
90006d1e:	d005      	beq.n	90006d2c <HAL_RCC_OscConfig+0x320>
90006d20:	687b      	ldr	r3, [r7, #4]
90006d22:	69db      	ldr	r3, [r3, #28]
90006d24:	2b80      	cmp	r3, #128	@ 0x80
90006d26:	d001      	beq.n	90006d2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006d28:	2301      	movs	r3, #1
90006d2a:	e2c1      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006d2c:	f7fc f9f6 	bl	9000311c <HAL_GetREVID>
90006d30:	4603      	mov	r3, r0
90006d32:	f241 0203 	movw	r2, #4099	@ 0x1003
90006d36:	4293      	cmp	r3, r2
90006d38:	d817      	bhi.n	90006d6a <HAL_RCC_OscConfig+0x35e>
90006d3a:	687b      	ldr	r3, [r7, #4]
90006d3c:	6a1b      	ldr	r3, [r3, #32]
90006d3e:	2b20      	cmp	r3, #32
90006d40:	d108      	bne.n	90006d54 <HAL_RCC_OscConfig+0x348>
90006d42:	4b70      	ldr	r3, [pc, #448]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d44:	685b      	ldr	r3, [r3, #4]
90006d46:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006d4a:	4a6e      	ldr	r2, [pc, #440]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006d50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006d52:	e075      	b.n	90006e40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006d54:	4b6b      	ldr	r3, [pc, #428]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d56:	685b      	ldr	r3, [r3, #4]
90006d58:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006d5c:	687b      	ldr	r3, [r7, #4]
90006d5e:	6a1b      	ldr	r3, [r3, #32]
90006d60:	069b      	lsls	r3, r3, #26
90006d62:	4968      	ldr	r1, [pc, #416]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d64:	4313      	orrs	r3, r2
90006d66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006d68:	e06a      	b.n	90006e40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006d6a:	4b66      	ldr	r3, [pc, #408]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d6c:	68db      	ldr	r3, [r3, #12]
90006d6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006d72:	687b      	ldr	r3, [r7, #4]
90006d74:	6a1b      	ldr	r3, [r3, #32]
90006d76:	061b      	lsls	r3, r3, #24
90006d78:	4962      	ldr	r1, [pc, #392]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d7a:	4313      	orrs	r3, r2
90006d7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006d7e:	e05f      	b.n	90006e40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006d80:	687b      	ldr	r3, [r7, #4]
90006d82:	69db      	ldr	r3, [r3, #28]
90006d84:	2b00      	cmp	r3, #0
90006d86:	d042      	beq.n	90006e0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006d88:	4b5e      	ldr	r3, [pc, #376]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d8a:	681b      	ldr	r3, [r3, #0]
90006d8c:	4a5d      	ldr	r2, [pc, #372]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90006d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d94:	f7fc f992 	bl	900030bc <HAL_GetTick>
90006d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006d9a:	e008      	b.n	90006dae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006d9c:	f7fc f98e 	bl	900030bc <HAL_GetTick>
90006da0:	4602      	mov	r2, r0
90006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006da4:	1ad3      	subs	r3, r2, r3
90006da6:	2b02      	cmp	r3, #2
90006da8:	d901      	bls.n	90006dae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006daa:	2303      	movs	r3, #3
90006dac:	e280      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006dae:	4b55      	ldr	r3, [pc, #340]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006db0:	681b      	ldr	r3, [r3, #0]
90006db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006db6:	2b00      	cmp	r3, #0
90006db8:	d0f0      	beq.n	90006d9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006dba:	f7fc f9af 	bl	9000311c <HAL_GetREVID>
90006dbe:	4603      	mov	r3, r0
90006dc0:	f241 0203 	movw	r2, #4099	@ 0x1003
90006dc4:	4293      	cmp	r3, r2
90006dc6:	d817      	bhi.n	90006df8 <HAL_RCC_OscConfig+0x3ec>
90006dc8:	687b      	ldr	r3, [r7, #4]
90006dca:	6a1b      	ldr	r3, [r3, #32]
90006dcc:	2b20      	cmp	r3, #32
90006dce:	d108      	bne.n	90006de2 <HAL_RCC_OscConfig+0x3d6>
90006dd0:	4b4c      	ldr	r3, [pc, #304]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006dd2:	685b      	ldr	r3, [r3, #4]
90006dd4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006dd8:	4a4a      	ldr	r2, [pc, #296]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006dda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006dde:	6053      	str	r3, [r2, #4]
90006de0:	e02e      	b.n	90006e40 <HAL_RCC_OscConfig+0x434>
90006de2:	4b48      	ldr	r3, [pc, #288]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006de4:	685b      	ldr	r3, [r3, #4]
90006de6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006dea:	687b      	ldr	r3, [r7, #4]
90006dec:	6a1b      	ldr	r3, [r3, #32]
90006dee:	069b      	lsls	r3, r3, #26
90006df0:	4944      	ldr	r1, [pc, #272]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006df2:	4313      	orrs	r3, r2
90006df4:	604b      	str	r3, [r1, #4]
90006df6:	e023      	b.n	90006e40 <HAL_RCC_OscConfig+0x434>
90006df8:	4b42      	ldr	r3, [pc, #264]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006dfa:	68db      	ldr	r3, [r3, #12]
90006dfc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006e00:	687b      	ldr	r3, [r7, #4]
90006e02:	6a1b      	ldr	r3, [r3, #32]
90006e04:	061b      	lsls	r3, r3, #24
90006e06:	493f      	ldr	r1, [pc, #252]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e08:	4313      	orrs	r3, r2
90006e0a:	60cb      	str	r3, [r1, #12]
90006e0c:	e018      	b.n	90006e40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90006e0e:	4b3d      	ldr	r3, [pc, #244]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e10:	681b      	ldr	r3, [r3, #0]
90006e12:	4a3c      	ldr	r2, [pc, #240]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90006e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e1a:	f7fc f94f 	bl	900030bc <HAL_GetTick>
90006e1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006e20:	e008      	b.n	90006e34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006e22:	f7fc f94b 	bl	900030bc <HAL_GetTick>
90006e26:	4602      	mov	r2, r0
90006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e2a:	1ad3      	subs	r3, r2, r3
90006e2c:	2b02      	cmp	r3, #2
90006e2e:	d901      	bls.n	90006e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90006e30:	2303      	movs	r3, #3
90006e32:	e23d      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006e34:	4b33      	ldr	r3, [pc, #204]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e36:	681b      	ldr	r3, [r3, #0]
90006e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006e3c:	2b00      	cmp	r3, #0
90006e3e:	d1f0      	bne.n	90006e22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90006e40:	687b      	ldr	r3, [r7, #4]
90006e42:	681b      	ldr	r3, [r3, #0]
90006e44:	f003 0308 	and.w	r3, r3, #8
90006e48:	2b00      	cmp	r3, #0
90006e4a:	d036      	beq.n	90006eba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90006e4c:	687b      	ldr	r3, [r7, #4]
90006e4e:	695b      	ldr	r3, [r3, #20]
90006e50:	2b00      	cmp	r3, #0
90006e52:	d019      	beq.n	90006e88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90006e54:	4b2b      	ldr	r3, [pc, #172]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006e58:	4a2a      	ldr	r2, [pc, #168]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e5a:	f043 0301 	orr.w	r3, r3, #1
90006e5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006e60:	f7fc f92c 	bl	900030bc <HAL_GetTick>
90006e64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006e66:	e008      	b.n	90006e7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006e68:	f7fc f928 	bl	900030bc <HAL_GetTick>
90006e6c:	4602      	mov	r2, r0
90006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e70:	1ad3      	subs	r3, r2, r3
90006e72:	2b02      	cmp	r3, #2
90006e74:	d901      	bls.n	90006e7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90006e76:	2303      	movs	r3, #3
90006e78:	e21a      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006e7a:	4b22      	ldr	r3, [pc, #136]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006e7e:	f003 0302 	and.w	r3, r3, #2
90006e82:	2b00      	cmp	r3, #0
90006e84:	d0f0      	beq.n	90006e68 <HAL_RCC_OscConfig+0x45c>
90006e86:	e018      	b.n	90006eba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90006e88:	4b1e      	ldr	r3, [pc, #120]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006e8c:	4a1d      	ldr	r2, [pc, #116]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006e8e:	f023 0301 	bic.w	r3, r3, #1
90006e92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006e94:	f7fc f912 	bl	900030bc <HAL_GetTick>
90006e98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90006e9a:	e008      	b.n	90006eae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006e9c:	f7fc f90e 	bl	900030bc <HAL_GetTick>
90006ea0:	4602      	mov	r2, r0
90006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006ea4:	1ad3      	subs	r3, r2, r3
90006ea6:	2b02      	cmp	r3, #2
90006ea8:	d901      	bls.n	90006eae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90006eaa:	2303      	movs	r3, #3
90006eac:	e200      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90006eae:	4b15      	ldr	r3, [pc, #84]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006eb2:	f003 0302 	and.w	r3, r3, #2
90006eb6:	2b00      	cmp	r3, #0
90006eb8:	d1f0      	bne.n	90006e9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90006eba:	687b      	ldr	r3, [r7, #4]
90006ebc:	681b      	ldr	r3, [r3, #0]
90006ebe:	f003 0320 	and.w	r3, r3, #32
90006ec2:	2b00      	cmp	r3, #0
90006ec4:	d039      	beq.n	90006f3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90006ec6:	687b      	ldr	r3, [r7, #4]
90006ec8:	699b      	ldr	r3, [r3, #24]
90006eca:	2b00      	cmp	r3, #0
90006ecc:	d01c      	beq.n	90006f08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90006ece:	4b0d      	ldr	r3, [pc, #52]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006ed0:	681b      	ldr	r3, [r3, #0]
90006ed2:	4a0c      	ldr	r2, [pc, #48]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006ed4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90006ed8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90006eda:	f7fc f8ef 	bl	900030bc <HAL_GetTick>
90006ede:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90006ee0:	e008      	b.n	90006ef4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90006ee2:	f7fc f8eb 	bl	900030bc <HAL_GetTick>
90006ee6:	4602      	mov	r2, r0
90006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006eea:	1ad3      	subs	r3, r2, r3
90006eec:	2b02      	cmp	r3, #2
90006eee:	d901      	bls.n	90006ef4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90006ef0:	2303      	movs	r3, #3
90006ef2:	e1dd      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90006ef4:	4b03      	ldr	r3, [pc, #12]	@ (90006f04 <HAL_RCC_OscConfig+0x4f8>)
90006ef6:	681b      	ldr	r3, [r3, #0]
90006ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90006efc:	2b00      	cmp	r3, #0
90006efe:	d0f0      	beq.n	90006ee2 <HAL_RCC_OscConfig+0x4d6>
90006f00:	e01b      	b.n	90006f3a <HAL_RCC_OscConfig+0x52e>
90006f02:	bf00      	nop
90006f04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90006f08:	4b9b      	ldr	r3, [pc, #620]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006f0a:	681b      	ldr	r3, [r3, #0]
90006f0c:	4a9a      	ldr	r2, [pc, #616]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90006f12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90006f14:	f7fc f8d2 	bl	900030bc <HAL_GetTick>
90006f18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90006f1a:	e008      	b.n	90006f2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90006f1c:	f7fc f8ce 	bl	900030bc <HAL_GetTick>
90006f20:	4602      	mov	r2, r0
90006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f24:	1ad3      	subs	r3, r2, r3
90006f26:	2b02      	cmp	r3, #2
90006f28:	d901      	bls.n	90006f2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90006f2a:	2303      	movs	r3, #3
90006f2c:	e1c0      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90006f2e:	4b92      	ldr	r3, [pc, #584]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006f30:	681b      	ldr	r3, [r3, #0]
90006f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90006f36:	2b00      	cmp	r3, #0
90006f38:	d1f0      	bne.n	90006f1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90006f3a:	687b      	ldr	r3, [r7, #4]
90006f3c:	681b      	ldr	r3, [r3, #0]
90006f3e:	f003 0304 	and.w	r3, r3, #4
90006f42:	2b00      	cmp	r3, #0
90006f44:	f000 8081 	beq.w	9000704a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90006f48:	4b8c      	ldr	r3, [pc, #560]	@ (9000717c <HAL_RCC_OscConfig+0x770>)
90006f4a:	681b      	ldr	r3, [r3, #0]
90006f4c:	4a8b      	ldr	r2, [pc, #556]	@ (9000717c <HAL_RCC_OscConfig+0x770>)
90006f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90006f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90006f54:	f7fc f8b2 	bl	900030bc <HAL_GetTick>
90006f58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90006f5a:	e008      	b.n	90006f6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90006f5c:	f7fc f8ae 	bl	900030bc <HAL_GetTick>
90006f60:	4602      	mov	r2, r0
90006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f64:	1ad3      	subs	r3, r2, r3
90006f66:	2b64      	cmp	r3, #100	@ 0x64
90006f68:	d901      	bls.n	90006f6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90006f6a:	2303      	movs	r3, #3
90006f6c:	e1a0      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90006f6e:	4b83      	ldr	r3, [pc, #524]	@ (9000717c <HAL_RCC_OscConfig+0x770>)
90006f70:	681b      	ldr	r3, [r3, #0]
90006f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006f76:	2b00      	cmp	r3, #0
90006f78:	d0f0      	beq.n	90006f5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90006f7a:	687b      	ldr	r3, [r7, #4]
90006f7c:	689b      	ldr	r3, [r3, #8]
90006f7e:	2b01      	cmp	r3, #1
90006f80:	d106      	bne.n	90006f90 <HAL_RCC_OscConfig+0x584>
90006f82:	4b7d      	ldr	r3, [pc, #500]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006f86:	4a7c      	ldr	r2, [pc, #496]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006f88:	f043 0301 	orr.w	r3, r3, #1
90006f8c:	6713      	str	r3, [r2, #112]	@ 0x70
90006f8e:	e02d      	b.n	90006fec <HAL_RCC_OscConfig+0x5e0>
90006f90:	687b      	ldr	r3, [r7, #4]
90006f92:	689b      	ldr	r3, [r3, #8]
90006f94:	2b00      	cmp	r3, #0
90006f96:	d10c      	bne.n	90006fb2 <HAL_RCC_OscConfig+0x5a6>
90006f98:	4b77      	ldr	r3, [pc, #476]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006f9c:	4a76      	ldr	r2, [pc, #472]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006f9e:	f023 0301 	bic.w	r3, r3, #1
90006fa2:	6713      	str	r3, [r2, #112]	@ 0x70
90006fa4:	4b74      	ldr	r3, [pc, #464]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fa8:	4a73      	ldr	r2, [pc, #460]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006faa:	f023 0304 	bic.w	r3, r3, #4
90006fae:	6713      	str	r3, [r2, #112]	@ 0x70
90006fb0:	e01c      	b.n	90006fec <HAL_RCC_OscConfig+0x5e0>
90006fb2:	687b      	ldr	r3, [r7, #4]
90006fb4:	689b      	ldr	r3, [r3, #8]
90006fb6:	2b05      	cmp	r3, #5
90006fb8:	d10c      	bne.n	90006fd4 <HAL_RCC_OscConfig+0x5c8>
90006fba:	4b6f      	ldr	r3, [pc, #444]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fbe:	4a6e      	ldr	r2, [pc, #440]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fc0:	f043 0304 	orr.w	r3, r3, #4
90006fc4:	6713      	str	r3, [r2, #112]	@ 0x70
90006fc6:	4b6c      	ldr	r3, [pc, #432]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fca:	4a6b      	ldr	r2, [pc, #428]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fcc:	f043 0301 	orr.w	r3, r3, #1
90006fd0:	6713      	str	r3, [r2, #112]	@ 0x70
90006fd2:	e00b      	b.n	90006fec <HAL_RCC_OscConfig+0x5e0>
90006fd4:	4b68      	ldr	r3, [pc, #416]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fd8:	4a67      	ldr	r2, [pc, #412]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fda:	f023 0301 	bic.w	r3, r3, #1
90006fde:	6713      	str	r3, [r2, #112]	@ 0x70
90006fe0:	4b65      	ldr	r3, [pc, #404]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90006fe4:	4a64      	ldr	r2, [pc, #400]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90006fe6:	f023 0304 	bic.w	r3, r3, #4
90006fea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90006fec:	687b      	ldr	r3, [r7, #4]
90006fee:	689b      	ldr	r3, [r3, #8]
90006ff0:	2b00      	cmp	r3, #0
90006ff2:	d015      	beq.n	90007020 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006ff4:	f7fc f862 	bl	900030bc <HAL_GetTick>
90006ff8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90006ffa:	e00a      	b.n	90007012 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90006ffc:	f7fc f85e 	bl	900030bc <HAL_GetTick>
90007000:	4602      	mov	r2, r0
90007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007004:	1ad3      	subs	r3, r2, r3
90007006:	f241 3288 	movw	r2, #5000	@ 0x1388
9000700a:	4293      	cmp	r3, r2
9000700c:	d901      	bls.n	90007012 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
9000700e:	2303      	movs	r3, #3
90007010:	e14e      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007012:	4b59      	ldr	r3, [pc, #356]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007016:	f003 0302 	and.w	r3, r3, #2
9000701a:	2b00      	cmp	r3, #0
9000701c:	d0ee      	beq.n	90006ffc <HAL_RCC_OscConfig+0x5f0>
9000701e:	e014      	b.n	9000704a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007020:	f7fc f84c 	bl	900030bc <HAL_GetTick>
90007024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007026:	e00a      	b.n	9000703e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007028:	f7fc f848 	bl	900030bc <HAL_GetTick>
9000702c:	4602      	mov	r2, r0
9000702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007030:	1ad3      	subs	r3, r2, r3
90007032:	f241 3288 	movw	r2, #5000	@ 0x1388
90007036:	4293      	cmp	r3, r2
90007038:	d901      	bls.n	9000703e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
9000703a:	2303      	movs	r3, #3
9000703c:	e138      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000703e:	4b4e      	ldr	r3, [pc, #312]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007042:	f003 0302 	and.w	r3, r3, #2
90007046:	2b00      	cmp	r3, #0
90007048:	d1ee      	bne.n	90007028 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000704a:	687b      	ldr	r3, [r7, #4]
9000704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000704e:	2b00      	cmp	r3, #0
90007050:	f000 812d 	beq.w	900072ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90007054:	4b48      	ldr	r3, [pc, #288]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007056:	691b      	ldr	r3, [r3, #16]
90007058:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000705c:	2b18      	cmp	r3, #24
9000705e:	f000 80bd 	beq.w	900071dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90007062:	687b      	ldr	r3, [r7, #4]
90007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007066:	2b02      	cmp	r3, #2
90007068:	f040 809e 	bne.w	900071a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000706c:	4b42      	ldr	r3, [pc, #264]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
9000706e:	681b      	ldr	r3, [r3, #0]
90007070:	4a41      	ldr	r2, [pc, #260]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007078:	f7fc f820 	bl	900030bc <HAL_GetTick>
9000707c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000707e:	e008      	b.n	90007092 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007080:	f7fc f81c 	bl	900030bc <HAL_GetTick>
90007084:	4602      	mov	r2, r0
90007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007088:	1ad3      	subs	r3, r2, r3
9000708a:	2b02      	cmp	r3, #2
9000708c:	d901      	bls.n	90007092 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
9000708e:	2303      	movs	r3, #3
90007090:	e10e      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007092:	4b39      	ldr	r3, [pc, #228]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007094:	681b      	ldr	r3, [r3, #0]
90007096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000709a:	2b00      	cmp	r3, #0
9000709c:	d1f0      	bne.n	90007080 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000709e:	4b36      	ldr	r3, [pc, #216]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
900070a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
900070a2:	4b37      	ldr	r3, [pc, #220]	@ (90007180 <HAL_RCC_OscConfig+0x774>)
900070a4:	4013      	ands	r3, r2
900070a6:	687a      	ldr	r2, [r7, #4]
900070a8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
900070aa:	687a      	ldr	r2, [r7, #4]
900070ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900070ae:	0112      	lsls	r2, r2, #4
900070b0:	430a      	orrs	r2, r1
900070b2:	4931      	ldr	r1, [pc, #196]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
900070b4:	4313      	orrs	r3, r2
900070b6:	628b      	str	r3, [r1, #40]	@ 0x28
900070b8:	687b      	ldr	r3, [r7, #4]
900070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900070bc:	3b01      	subs	r3, #1
900070be:	f3c3 0208 	ubfx	r2, r3, #0, #9
900070c2:	687b      	ldr	r3, [r7, #4]
900070c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900070c6:	3b01      	subs	r3, #1
900070c8:	025b      	lsls	r3, r3, #9
900070ca:	b29b      	uxth	r3, r3
900070cc:	431a      	orrs	r2, r3
900070ce:	687b      	ldr	r3, [r7, #4]
900070d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900070d2:	3b01      	subs	r3, #1
900070d4:	041b      	lsls	r3, r3, #16
900070d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900070da:	431a      	orrs	r2, r3
900070dc:	687b      	ldr	r3, [r7, #4]
900070de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900070e0:	3b01      	subs	r3, #1
900070e2:	061b      	lsls	r3, r3, #24
900070e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900070e8:	4923      	ldr	r1, [pc, #140]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
900070ea:	4313      	orrs	r3, r2
900070ec:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
900070ee:	4b22      	ldr	r3, [pc, #136]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
900070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900070f2:	4a21      	ldr	r2, [pc, #132]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
900070f4:	f023 0301 	bic.w	r3, r3, #1
900070f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900070fa:	4b1f      	ldr	r3, [pc, #124]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
900070fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900070fe:	4b21      	ldr	r3, [pc, #132]	@ (90007184 <HAL_RCC_OscConfig+0x778>)
90007100:	4013      	ands	r3, r2
90007102:	687a      	ldr	r2, [r7, #4]
90007104:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007106:	00d2      	lsls	r2, r2, #3
90007108:	491b      	ldr	r1, [pc, #108]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
9000710a:	4313      	orrs	r3, r2
9000710c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000710e:	4b1a      	ldr	r3, [pc, #104]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007112:	f023 020c 	bic.w	r2, r3, #12
90007116:	687b      	ldr	r3, [r7, #4]
90007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000711a:	4917      	ldr	r1, [pc, #92]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
9000711c:	4313      	orrs	r3, r2
9000711e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007120:	4b15      	ldr	r3, [pc, #84]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007124:	f023 0202 	bic.w	r2, r3, #2
90007128:	687b      	ldr	r3, [r7, #4]
9000712a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000712c:	4912      	ldr	r1, [pc, #72]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
9000712e:	4313      	orrs	r3, r2
90007130:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90007132:	4b11      	ldr	r3, [pc, #68]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007136:	4a10      	ldr	r2, [pc, #64]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000713c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000713e:	4b0e      	ldr	r3, [pc, #56]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007142:	4a0d      	ldr	r2, [pc, #52]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000714a:	4b0b      	ldr	r3, [pc, #44]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
9000714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000714e:	4a0a      	ldr	r2, [pc, #40]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90007156:	4b08      	ldr	r3, [pc, #32]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000715a:	4a07      	ldr	r2, [pc, #28]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
9000715c:	f043 0301 	orr.w	r3, r3, #1
90007160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90007162:	4b05      	ldr	r3, [pc, #20]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007164:	681b      	ldr	r3, [r3, #0]
90007166:	4a04      	ldr	r2, [pc, #16]	@ (90007178 <HAL_RCC_OscConfig+0x76c>)
90007168:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000716c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000716e:	f7fb ffa5 	bl	900030bc <HAL_GetTick>
90007172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007174:	e011      	b.n	9000719a <HAL_RCC_OscConfig+0x78e>
90007176:	bf00      	nop
90007178:	58024400 	.word	0x58024400
9000717c:	58024800 	.word	0x58024800
90007180:	fffffc0c 	.word	0xfffffc0c
90007184:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007188:	f7fb ff98 	bl	900030bc <HAL_GetTick>
9000718c:	4602      	mov	r2, r0
9000718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007190:	1ad3      	subs	r3, r2, r3
90007192:	2b02      	cmp	r3, #2
90007194:	d901      	bls.n	9000719a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90007196:	2303      	movs	r3, #3
90007198:	e08a      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000719a:	4b47      	ldr	r3, [pc, #284]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
9000719c:	681b      	ldr	r3, [r3, #0]
9000719e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900071a2:	2b00      	cmp	r3, #0
900071a4:	d0f0      	beq.n	90007188 <HAL_RCC_OscConfig+0x77c>
900071a6:	e082      	b.n	900072ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900071a8:	4b43      	ldr	r3, [pc, #268]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
900071aa:	681b      	ldr	r3, [r3, #0]
900071ac:	4a42      	ldr	r2, [pc, #264]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
900071ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900071b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900071b4:	f7fb ff82 	bl	900030bc <HAL_GetTick>
900071b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900071ba:	e008      	b.n	900071ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900071bc:	f7fb ff7e 	bl	900030bc <HAL_GetTick>
900071c0:	4602      	mov	r2, r0
900071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071c4:	1ad3      	subs	r3, r2, r3
900071c6:	2b02      	cmp	r3, #2
900071c8:	d901      	bls.n	900071ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
900071ca:	2303      	movs	r3, #3
900071cc:	e070      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900071ce:	4b3a      	ldr	r3, [pc, #232]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
900071d0:	681b      	ldr	r3, [r3, #0]
900071d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900071d6:	2b00      	cmp	r3, #0
900071d8:	d1f0      	bne.n	900071bc <HAL_RCC_OscConfig+0x7b0>
900071da:	e068      	b.n	900072ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
900071dc:	4b36      	ldr	r3, [pc, #216]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
900071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900071e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
900071e2:	4b35      	ldr	r3, [pc, #212]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
900071e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900071e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900071e8:	687b      	ldr	r3, [r7, #4]
900071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900071ec:	2b01      	cmp	r3, #1
900071ee:	d031      	beq.n	90007254 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900071f0:	693b      	ldr	r3, [r7, #16]
900071f2:	f003 0203 	and.w	r2, r3, #3
900071f6:	687b      	ldr	r3, [r7, #4]
900071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900071fa:	429a      	cmp	r2, r3
900071fc:	d12a      	bne.n	90007254 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900071fe:	693b      	ldr	r3, [r7, #16]
90007200:	091b      	lsrs	r3, r3, #4
90007202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90007206:	687b      	ldr	r3, [r7, #4]
90007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000720a:	429a      	cmp	r2, r3
9000720c:	d122      	bne.n	90007254 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000720e:	68fb      	ldr	r3, [r7, #12]
90007210:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007214:	687b      	ldr	r3, [r7, #4]
90007216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007218:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000721a:	429a      	cmp	r2, r3
9000721c:	d11a      	bne.n	90007254 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000721e:	68fb      	ldr	r3, [r7, #12]
90007220:	0a5b      	lsrs	r3, r3, #9
90007222:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007226:	687b      	ldr	r3, [r7, #4]
90007228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000722a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000722c:	429a      	cmp	r2, r3
9000722e:	d111      	bne.n	90007254 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007230:	68fb      	ldr	r3, [r7, #12]
90007232:	0c1b      	lsrs	r3, r3, #16
90007234:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007238:	687b      	ldr	r3, [r7, #4]
9000723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000723c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000723e:	429a      	cmp	r2, r3
90007240:	d108      	bne.n	90007254 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90007242:	68fb      	ldr	r3, [r7, #12]
90007244:	0e1b      	lsrs	r3, r3, #24
90007246:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000724a:	687b      	ldr	r3, [r7, #4]
9000724c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
9000724e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007250:	429a      	cmp	r2, r3
90007252:	d001      	beq.n	90007258 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90007254:	2301      	movs	r3, #1
90007256:	e02b      	b.n	900072b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90007258:	4b17      	ldr	r3, [pc, #92]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
9000725a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000725c:	08db      	lsrs	r3, r3, #3
9000725e:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007262:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90007264:	687b      	ldr	r3, [r7, #4]
90007266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90007268:	693a      	ldr	r2, [r7, #16]
9000726a:	429a      	cmp	r2, r3
9000726c:	d01f      	beq.n	900072ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
9000726e:	4b12      	ldr	r3, [pc, #72]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
90007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007272:	4a11      	ldr	r2, [pc, #68]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
90007274:	f023 0301 	bic.w	r3, r3, #1
90007278:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
9000727a:	f7fb ff1f 	bl	900030bc <HAL_GetTick>
9000727e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007280:	bf00      	nop
90007282:	f7fb ff1b 	bl	900030bc <HAL_GetTick>
90007286:	4602      	mov	r2, r0
90007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000728a:	4293      	cmp	r3, r2
9000728c:	d0f9      	beq.n	90007282 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000728e:	4b0a      	ldr	r3, [pc, #40]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
90007290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007292:	4b0a      	ldr	r3, [pc, #40]	@ (900072bc <HAL_RCC_OscConfig+0x8b0>)
90007294:	4013      	ands	r3, r2
90007296:	687a      	ldr	r2, [r7, #4]
90007298:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000729a:	00d2      	lsls	r2, r2, #3
9000729c:	4906      	ldr	r1, [pc, #24]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
9000729e:	4313      	orrs	r3, r2
900072a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
900072a2:	4b05      	ldr	r3, [pc, #20]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
900072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900072a6:	4a04      	ldr	r2, [pc, #16]	@ (900072b8 <HAL_RCC_OscConfig+0x8ac>)
900072a8:	f043 0301 	orr.w	r3, r3, #1
900072ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
900072ae:	2300      	movs	r3, #0
}
900072b0:	4618      	mov	r0, r3
900072b2:	3730      	adds	r7, #48	@ 0x30
900072b4:	46bd      	mov	sp, r7
900072b6:	bd80      	pop	{r7, pc}
900072b8:	58024400 	.word	0x58024400
900072bc:	ffff0007 	.word	0xffff0007

900072c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900072c0:	b580      	push	{r7, lr}
900072c2:	b086      	sub	sp, #24
900072c4:	af00      	add	r7, sp, #0
900072c6:	6078      	str	r0, [r7, #4]
900072c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900072ca:	687b      	ldr	r3, [r7, #4]
900072cc:	2b00      	cmp	r3, #0
900072ce:	d101      	bne.n	900072d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900072d0:	2301      	movs	r3, #1
900072d2:	e19c      	b.n	9000760e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900072d4:	4b8a      	ldr	r3, [pc, #552]	@ (90007500 <HAL_RCC_ClockConfig+0x240>)
900072d6:	681b      	ldr	r3, [r3, #0]
900072d8:	f003 030f 	and.w	r3, r3, #15
900072dc:	683a      	ldr	r2, [r7, #0]
900072de:	429a      	cmp	r2, r3
900072e0:	d910      	bls.n	90007304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900072e2:	4b87      	ldr	r3, [pc, #540]	@ (90007500 <HAL_RCC_ClockConfig+0x240>)
900072e4:	681b      	ldr	r3, [r3, #0]
900072e6:	f023 020f 	bic.w	r2, r3, #15
900072ea:	4985      	ldr	r1, [pc, #532]	@ (90007500 <HAL_RCC_ClockConfig+0x240>)
900072ec:	683b      	ldr	r3, [r7, #0]
900072ee:	4313      	orrs	r3, r2
900072f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900072f2:	4b83      	ldr	r3, [pc, #524]	@ (90007500 <HAL_RCC_ClockConfig+0x240>)
900072f4:	681b      	ldr	r3, [r3, #0]
900072f6:	f003 030f 	and.w	r3, r3, #15
900072fa:	683a      	ldr	r2, [r7, #0]
900072fc:	429a      	cmp	r2, r3
900072fe:	d001      	beq.n	90007304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007300:	2301      	movs	r3, #1
90007302:	e184      	b.n	9000760e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007304:	687b      	ldr	r3, [r7, #4]
90007306:	681b      	ldr	r3, [r3, #0]
90007308:	f003 0304 	and.w	r3, r3, #4
9000730c:	2b00      	cmp	r3, #0
9000730e:	d010      	beq.n	90007332 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007310:	687b      	ldr	r3, [r7, #4]
90007312:	691a      	ldr	r2, [r3, #16]
90007314:	4b7b      	ldr	r3, [pc, #492]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007316:	699b      	ldr	r3, [r3, #24]
90007318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000731c:	429a      	cmp	r2, r3
9000731e:	d908      	bls.n	90007332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007320:	4b78      	ldr	r3, [pc, #480]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007322:	699b      	ldr	r3, [r3, #24]
90007324:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007328:	687b      	ldr	r3, [r7, #4]
9000732a:	691b      	ldr	r3, [r3, #16]
9000732c:	4975      	ldr	r1, [pc, #468]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
9000732e:	4313      	orrs	r3, r2
90007330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007332:	687b      	ldr	r3, [r7, #4]
90007334:	681b      	ldr	r3, [r3, #0]
90007336:	f003 0308 	and.w	r3, r3, #8
9000733a:	2b00      	cmp	r3, #0
9000733c:	d010      	beq.n	90007360 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000733e:	687b      	ldr	r3, [r7, #4]
90007340:	695a      	ldr	r2, [r3, #20]
90007342:	4b70      	ldr	r3, [pc, #448]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007344:	69db      	ldr	r3, [r3, #28]
90007346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000734a:	429a      	cmp	r2, r3
9000734c:	d908      	bls.n	90007360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000734e:	4b6d      	ldr	r3, [pc, #436]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007350:	69db      	ldr	r3, [r3, #28]
90007352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007356:	687b      	ldr	r3, [r7, #4]
90007358:	695b      	ldr	r3, [r3, #20]
9000735a:	496a      	ldr	r1, [pc, #424]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
9000735c:	4313      	orrs	r3, r2
9000735e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007360:	687b      	ldr	r3, [r7, #4]
90007362:	681b      	ldr	r3, [r3, #0]
90007364:	f003 0310 	and.w	r3, r3, #16
90007368:	2b00      	cmp	r3, #0
9000736a:	d010      	beq.n	9000738e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000736c:	687b      	ldr	r3, [r7, #4]
9000736e:	699a      	ldr	r2, [r3, #24]
90007370:	4b64      	ldr	r3, [pc, #400]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007372:	69db      	ldr	r3, [r3, #28]
90007374:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007378:	429a      	cmp	r2, r3
9000737a:	d908      	bls.n	9000738e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000737c:	4b61      	ldr	r3, [pc, #388]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
9000737e:	69db      	ldr	r3, [r3, #28]
90007380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90007384:	687b      	ldr	r3, [r7, #4]
90007386:	699b      	ldr	r3, [r3, #24]
90007388:	495e      	ldr	r1, [pc, #376]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
9000738a:	4313      	orrs	r3, r2
9000738c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000738e:	687b      	ldr	r3, [r7, #4]
90007390:	681b      	ldr	r3, [r3, #0]
90007392:	f003 0320 	and.w	r3, r3, #32
90007396:	2b00      	cmp	r3, #0
90007398:	d010      	beq.n	900073bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000739a:	687b      	ldr	r3, [r7, #4]
9000739c:	69da      	ldr	r2, [r3, #28]
9000739e:	4b59      	ldr	r3, [pc, #356]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900073a0:	6a1b      	ldr	r3, [r3, #32]
900073a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900073a6:	429a      	cmp	r2, r3
900073a8:	d908      	bls.n	900073bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900073aa:	4b56      	ldr	r3, [pc, #344]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900073ac:	6a1b      	ldr	r3, [r3, #32]
900073ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900073b2:	687b      	ldr	r3, [r7, #4]
900073b4:	69db      	ldr	r3, [r3, #28]
900073b6:	4953      	ldr	r1, [pc, #332]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900073b8:	4313      	orrs	r3, r2
900073ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900073bc:	687b      	ldr	r3, [r7, #4]
900073be:	681b      	ldr	r3, [r3, #0]
900073c0:	f003 0302 	and.w	r3, r3, #2
900073c4:	2b00      	cmp	r3, #0
900073c6:	d010      	beq.n	900073ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900073c8:	687b      	ldr	r3, [r7, #4]
900073ca:	68da      	ldr	r2, [r3, #12]
900073cc:	4b4d      	ldr	r3, [pc, #308]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900073ce:	699b      	ldr	r3, [r3, #24]
900073d0:	f003 030f 	and.w	r3, r3, #15
900073d4:	429a      	cmp	r2, r3
900073d6:	d908      	bls.n	900073ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900073d8:	4b4a      	ldr	r3, [pc, #296]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900073da:	699b      	ldr	r3, [r3, #24]
900073dc:	f023 020f 	bic.w	r2, r3, #15
900073e0:	687b      	ldr	r3, [r7, #4]
900073e2:	68db      	ldr	r3, [r3, #12]
900073e4:	4947      	ldr	r1, [pc, #284]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900073e6:	4313      	orrs	r3, r2
900073e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900073ea:	687b      	ldr	r3, [r7, #4]
900073ec:	681b      	ldr	r3, [r3, #0]
900073ee:	f003 0301 	and.w	r3, r3, #1
900073f2:	2b00      	cmp	r3, #0
900073f4:	d055      	beq.n	900074a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
900073f6:	4b43      	ldr	r3, [pc, #268]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900073f8:	699b      	ldr	r3, [r3, #24]
900073fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
900073fe:	687b      	ldr	r3, [r7, #4]
90007400:	689b      	ldr	r3, [r3, #8]
90007402:	4940      	ldr	r1, [pc, #256]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007404:	4313      	orrs	r3, r2
90007406:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007408:	687b      	ldr	r3, [r7, #4]
9000740a:	685b      	ldr	r3, [r3, #4]
9000740c:	2b02      	cmp	r3, #2
9000740e:	d107      	bne.n	90007420 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007410:	4b3c      	ldr	r3, [pc, #240]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007412:	681b      	ldr	r3, [r3, #0]
90007414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90007418:	2b00      	cmp	r3, #0
9000741a:	d121      	bne.n	90007460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000741c:	2301      	movs	r3, #1
9000741e:	e0f6      	b.n	9000760e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007420:	687b      	ldr	r3, [r7, #4]
90007422:	685b      	ldr	r3, [r3, #4]
90007424:	2b03      	cmp	r3, #3
90007426:	d107      	bne.n	90007438 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007428:	4b36      	ldr	r3, [pc, #216]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
9000742a:	681b      	ldr	r3, [r3, #0]
9000742c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007430:	2b00      	cmp	r3, #0
90007432:	d115      	bne.n	90007460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007434:	2301      	movs	r3, #1
90007436:	e0ea      	b.n	9000760e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90007438:	687b      	ldr	r3, [r7, #4]
9000743a:	685b      	ldr	r3, [r3, #4]
9000743c:	2b01      	cmp	r3, #1
9000743e:	d107      	bne.n	90007450 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007440:	4b30      	ldr	r3, [pc, #192]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007442:	681b      	ldr	r3, [r3, #0]
90007444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007448:	2b00      	cmp	r3, #0
9000744a:	d109      	bne.n	90007460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000744c:	2301      	movs	r3, #1
9000744e:	e0de      	b.n	9000760e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007450:	4b2c      	ldr	r3, [pc, #176]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007452:	681b      	ldr	r3, [r3, #0]
90007454:	f003 0304 	and.w	r3, r3, #4
90007458:	2b00      	cmp	r3, #0
9000745a:	d101      	bne.n	90007460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000745c:	2301      	movs	r3, #1
9000745e:	e0d6      	b.n	9000760e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007460:	4b28      	ldr	r3, [pc, #160]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007462:	691b      	ldr	r3, [r3, #16]
90007464:	f023 0207 	bic.w	r2, r3, #7
90007468:	687b      	ldr	r3, [r7, #4]
9000746a:	685b      	ldr	r3, [r3, #4]
9000746c:	4925      	ldr	r1, [pc, #148]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
9000746e:	4313      	orrs	r3, r2
90007470:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007472:	f7fb fe23 	bl	900030bc <HAL_GetTick>
90007476:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007478:	e00a      	b.n	90007490 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000747a:	f7fb fe1f 	bl	900030bc <HAL_GetTick>
9000747e:	4602      	mov	r2, r0
90007480:	697b      	ldr	r3, [r7, #20]
90007482:	1ad3      	subs	r3, r2, r3
90007484:	f241 3288 	movw	r2, #5000	@ 0x1388
90007488:	4293      	cmp	r3, r2
9000748a:	d901      	bls.n	90007490 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
9000748c:	2303      	movs	r3, #3
9000748e:	e0be      	b.n	9000760e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007490:	4b1c      	ldr	r3, [pc, #112]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
90007492:	691b      	ldr	r3, [r3, #16]
90007494:	f003 0238 	and.w	r2, r3, #56	@ 0x38
90007498:	687b      	ldr	r3, [r7, #4]
9000749a:	685b      	ldr	r3, [r3, #4]
9000749c:	00db      	lsls	r3, r3, #3
9000749e:	429a      	cmp	r2, r3
900074a0:	d1eb      	bne.n	9000747a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900074a2:	687b      	ldr	r3, [r7, #4]
900074a4:	681b      	ldr	r3, [r3, #0]
900074a6:	f003 0302 	and.w	r3, r3, #2
900074aa:	2b00      	cmp	r3, #0
900074ac:	d010      	beq.n	900074d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900074ae:	687b      	ldr	r3, [r7, #4]
900074b0:	68da      	ldr	r2, [r3, #12]
900074b2:	4b14      	ldr	r3, [pc, #80]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900074b4:	699b      	ldr	r3, [r3, #24]
900074b6:	f003 030f 	and.w	r3, r3, #15
900074ba:	429a      	cmp	r2, r3
900074bc:	d208      	bcs.n	900074d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900074be:	4b11      	ldr	r3, [pc, #68]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900074c0:	699b      	ldr	r3, [r3, #24]
900074c2:	f023 020f 	bic.w	r2, r3, #15
900074c6:	687b      	ldr	r3, [r7, #4]
900074c8:	68db      	ldr	r3, [r3, #12]
900074ca:	490e      	ldr	r1, [pc, #56]	@ (90007504 <HAL_RCC_ClockConfig+0x244>)
900074cc:	4313      	orrs	r3, r2
900074ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900074d0:	4b0b      	ldr	r3, [pc, #44]	@ (90007500 <HAL_RCC_ClockConfig+0x240>)
900074d2:	681b      	ldr	r3, [r3, #0]
900074d4:	f003 030f 	and.w	r3, r3, #15
900074d8:	683a      	ldr	r2, [r7, #0]
900074da:	429a      	cmp	r2, r3
900074dc:	d214      	bcs.n	90007508 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900074de:	4b08      	ldr	r3, [pc, #32]	@ (90007500 <HAL_RCC_ClockConfig+0x240>)
900074e0:	681b      	ldr	r3, [r3, #0]
900074e2:	f023 020f 	bic.w	r2, r3, #15
900074e6:	4906      	ldr	r1, [pc, #24]	@ (90007500 <HAL_RCC_ClockConfig+0x240>)
900074e8:	683b      	ldr	r3, [r7, #0]
900074ea:	4313      	orrs	r3, r2
900074ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900074ee:	4b04      	ldr	r3, [pc, #16]	@ (90007500 <HAL_RCC_ClockConfig+0x240>)
900074f0:	681b      	ldr	r3, [r3, #0]
900074f2:	f003 030f 	and.w	r3, r3, #15
900074f6:	683a      	ldr	r2, [r7, #0]
900074f8:	429a      	cmp	r2, r3
900074fa:	d005      	beq.n	90007508 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
900074fc:	2301      	movs	r3, #1
900074fe:	e086      	b.n	9000760e <HAL_RCC_ClockConfig+0x34e>
90007500:	52002000 	.word	0x52002000
90007504:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007508:	687b      	ldr	r3, [r7, #4]
9000750a:	681b      	ldr	r3, [r3, #0]
9000750c:	f003 0304 	and.w	r3, r3, #4
90007510:	2b00      	cmp	r3, #0
90007512:	d010      	beq.n	90007536 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007514:	687b      	ldr	r3, [r7, #4]
90007516:	691a      	ldr	r2, [r3, #16]
90007518:	4b3f      	ldr	r3, [pc, #252]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
9000751a:	699b      	ldr	r3, [r3, #24]
9000751c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007520:	429a      	cmp	r2, r3
90007522:	d208      	bcs.n	90007536 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007524:	4b3c      	ldr	r3, [pc, #240]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
90007526:	699b      	ldr	r3, [r3, #24]
90007528:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000752c:	687b      	ldr	r3, [r7, #4]
9000752e:	691b      	ldr	r3, [r3, #16]
90007530:	4939      	ldr	r1, [pc, #228]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
90007532:	4313      	orrs	r3, r2
90007534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007536:	687b      	ldr	r3, [r7, #4]
90007538:	681b      	ldr	r3, [r3, #0]
9000753a:	f003 0308 	and.w	r3, r3, #8
9000753e:	2b00      	cmp	r3, #0
90007540:	d010      	beq.n	90007564 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007542:	687b      	ldr	r3, [r7, #4]
90007544:	695a      	ldr	r2, [r3, #20]
90007546:	4b34      	ldr	r3, [pc, #208]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
90007548:	69db      	ldr	r3, [r3, #28]
9000754a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000754e:	429a      	cmp	r2, r3
90007550:	d208      	bcs.n	90007564 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007552:	4b31      	ldr	r3, [pc, #196]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
90007554:	69db      	ldr	r3, [r3, #28]
90007556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000755a:	687b      	ldr	r3, [r7, #4]
9000755c:	695b      	ldr	r3, [r3, #20]
9000755e:	492e      	ldr	r1, [pc, #184]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
90007560:	4313      	orrs	r3, r2
90007562:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007564:	687b      	ldr	r3, [r7, #4]
90007566:	681b      	ldr	r3, [r3, #0]
90007568:	f003 0310 	and.w	r3, r3, #16
9000756c:	2b00      	cmp	r3, #0
9000756e:	d010      	beq.n	90007592 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007570:	687b      	ldr	r3, [r7, #4]
90007572:	699a      	ldr	r2, [r3, #24]
90007574:	4b28      	ldr	r3, [pc, #160]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
90007576:	69db      	ldr	r3, [r3, #28]
90007578:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
9000757c:	429a      	cmp	r2, r3
9000757e:	d208      	bcs.n	90007592 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007580:	4b25      	ldr	r3, [pc, #148]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
90007582:	69db      	ldr	r3, [r3, #28]
90007584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90007588:	687b      	ldr	r3, [r7, #4]
9000758a:	699b      	ldr	r3, [r3, #24]
9000758c:	4922      	ldr	r1, [pc, #136]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
9000758e:	4313      	orrs	r3, r2
90007590:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007592:	687b      	ldr	r3, [r7, #4]
90007594:	681b      	ldr	r3, [r3, #0]
90007596:	f003 0320 	and.w	r3, r3, #32
9000759a:	2b00      	cmp	r3, #0
9000759c:	d010      	beq.n	900075c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000759e:	687b      	ldr	r3, [r7, #4]
900075a0:	69da      	ldr	r2, [r3, #28]
900075a2:	4b1d      	ldr	r3, [pc, #116]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
900075a4:	6a1b      	ldr	r3, [r3, #32]
900075a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900075aa:	429a      	cmp	r2, r3
900075ac:	d208      	bcs.n	900075c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900075ae:	4b1a      	ldr	r3, [pc, #104]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
900075b0:	6a1b      	ldr	r3, [r3, #32]
900075b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900075b6:	687b      	ldr	r3, [r7, #4]
900075b8:	69db      	ldr	r3, [r3, #28]
900075ba:	4917      	ldr	r1, [pc, #92]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
900075bc:	4313      	orrs	r3, r2
900075be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900075c0:	f000 f834 	bl	9000762c <HAL_RCC_GetSysClockFreq>
900075c4:	4602      	mov	r2, r0
900075c6:	4b14      	ldr	r3, [pc, #80]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
900075c8:	699b      	ldr	r3, [r3, #24]
900075ca:	0a1b      	lsrs	r3, r3, #8
900075cc:	f003 030f 	and.w	r3, r3, #15
900075d0:	4912      	ldr	r1, [pc, #72]	@ (9000761c <HAL_RCC_ClockConfig+0x35c>)
900075d2:	5ccb      	ldrb	r3, [r1, r3]
900075d4:	f003 031f 	and.w	r3, r3, #31
900075d8:	fa22 f303 	lsr.w	r3, r2, r3
900075dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900075de:	4b0e      	ldr	r3, [pc, #56]	@ (90007618 <HAL_RCC_ClockConfig+0x358>)
900075e0:	699b      	ldr	r3, [r3, #24]
900075e2:	f003 030f 	and.w	r3, r3, #15
900075e6:	4a0d      	ldr	r2, [pc, #52]	@ (9000761c <HAL_RCC_ClockConfig+0x35c>)
900075e8:	5cd3      	ldrb	r3, [r2, r3]
900075ea:	f003 031f 	and.w	r3, r3, #31
900075ee:	693a      	ldr	r2, [r7, #16]
900075f0:	fa22 f303 	lsr.w	r3, r2, r3
900075f4:	4a0a      	ldr	r2, [pc, #40]	@ (90007620 <HAL_RCC_ClockConfig+0x360>)
900075f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900075f8:	4a0a      	ldr	r2, [pc, #40]	@ (90007624 <HAL_RCC_ClockConfig+0x364>)
900075fa:	693b      	ldr	r3, [r7, #16]
900075fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
900075fe:	4b0a      	ldr	r3, [pc, #40]	@ (90007628 <HAL_RCC_ClockConfig+0x368>)
90007600:	681b      	ldr	r3, [r3, #0]
90007602:	4618      	mov	r0, r3
90007604:	f7fb fd10 	bl	90003028 <HAL_InitTick>
90007608:	4603      	mov	r3, r0
9000760a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
9000760c:	7bfb      	ldrb	r3, [r7, #15]
}
9000760e:	4618      	mov	r0, r3
90007610:	3718      	adds	r7, #24
90007612:	46bd      	mov	sp, r7
90007614:	bd80      	pop	{r7, pc}
90007616:	bf00      	nop
90007618:	58024400 	.word	0x58024400
9000761c:	9000cdac 	.word	0x9000cdac
90007620:	2000005c 	.word	0x2000005c
90007624:	20000058 	.word	0x20000058
90007628:	20000060 	.word	0x20000060

9000762c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
9000762c:	b480      	push	{r7}
9000762e:	b089      	sub	sp, #36	@ 0x24
90007630:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90007632:	4bb3      	ldr	r3, [pc, #716]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007634:	691b      	ldr	r3, [r3, #16]
90007636:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000763a:	2b18      	cmp	r3, #24
9000763c:	f200 8155 	bhi.w	900078ea <HAL_RCC_GetSysClockFreq+0x2be>
90007640:	a201      	add	r2, pc, #4	@ (adr r2, 90007648 <HAL_RCC_GetSysClockFreq+0x1c>)
90007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007646:	bf00      	nop
90007648:	900076ad 	.word	0x900076ad
9000764c:	900078eb 	.word	0x900078eb
90007650:	900078eb 	.word	0x900078eb
90007654:	900078eb 	.word	0x900078eb
90007658:	900078eb 	.word	0x900078eb
9000765c:	900078eb 	.word	0x900078eb
90007660:	900078eb 	.word	0x900078eb
90007664:	900078eb 	.word	0x900078eb
90007668:	900076d3 	.word	0x900076d3
9000766c:	900078eb 	.word	0x900078eb
90007670:	900078eb 	.word	0x900078eb
90007674:	900078eb 	.word	0x900078eb
90007678:	900078eb 	.word	0x900078eb
9000767c:	900078eb 	.word	0x900078eb
90007680:	900078eb 	.word	0x900078eb
90007684:	900078eb 	.word	0x900078eb
90007688:	900076d9 	.word	0x900076d9
9000768c:	900078eb 	.word	0x900078eb
90007690:	900078eb 	.word	0x900078eb
90007694:	900078eb 	.word	0x900078eb
90007698:	900078eb 	.word	0x900078eb
9000769c:	900078eb 	.word	0x900078eb
900076a0:	900078eb 	.word	0x900078eb
900076a4:	900078eb 	.word	0x900078eb
900076a8:	900076df 	.word	0x900076df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900076ac:	4b94      	ldr	r3, [pc, #592]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076ae:	681b      	ldr	r3, [r3, #0]
900076b0:	f003 0320 	and.w	r3, r3, #32
900076b4:	2b00      	cmp	r3, #0
900076b6:	d009      	beq.n	900076cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900076b8:	4b91      	ldr	r3, [pc, #580]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076ba:	681b      	ldr	r3, [r3, #0]
900076bc:	08db      	lsrs	r3, r3, #3
900076be:	f003 0303 	and.w	r3, r3, #3
900076c2:	4a90      	ldr	r2, [pc, #576]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d8>)
900076c4:	fa22 f303 	lsr.w	r3, r2, r3
900076c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
900076ca:	e111      	b.n	900078f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900076cc:	4b8d      	ldr	r3, [pc, #564]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d8>)
900076ce:	61bb      	str	r3, [r7, #24]
      break;
900076d0:	e10e      	b.n	900078f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
900076d2:	4b8d      	ldr	r3, [pc, #564]	@ (90007908 <HAL_RCC_GetSysClockFreq+0x2dc>)
900076d4:	61bb      	str	r3, [r7, #24]
      break;
900076d6:	e10b      	b.n	900078f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
900076d8:	4b8c      	ldr	r3, [pc, #560]	@ (9000790c <HAL_RCC_GetSysClockFreq+0x2e0>)
900076da:	61bb      	str	r3, [r7, #24]
      break;
900076dc:	e108      	b.n	900078f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900076de:	4b88      	ldr	r3, [pc, #544]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900076e2:	f003 0303 	and.w	r3, r3, #3
900076e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
900076e8:	4b85      	ldr	r3, [pc, #532]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900076ec:	091b      	lsrs	r3, r3, #4
900076ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900076f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
900076f4:	4b82      	ldr	r3, [pc, #520]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
900076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076f8:	f003 0301 	and.w	r3, r3, #1
900076fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
900076fe:	4b80      	ldr	r3, [pc, #512]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007702:	08db      	lsrs	r3, r3, #3
90007704:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007708:	68fa      	ldr	r2, [r7, #12]
9000770a:	fb02 f303 	mul.w	r3, r2, r3
9000770e:	ee07 3a90 	vmov	s15, r3
90007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007716:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
9000771a:	693b      	ldr	r3, [r7, #16]
9000771c:	2b00      	cmp	r3, #0
9000771e:	f000 80e1 	beq.w	900078e4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90007722:	697b      	ldr	r3, [r7, #20]
90007724:	2b02      	cmp	r3, #2
90007726:	f000 8083 	beq.w	90007830 <HAL_RCC_GetSysClockFreq+0x204>
9000772a:	697b      	ldr	r3, [r7, #20]
9000772c:	2b02      	cmp	r3, #2
9000772e:	f200 80a1 	bhi.w	90007874 <HAL_RCC_GetSysClockFreq+0x248>
90007732:	697b      	ldr	r3, [r7, #20]
90007734:	2b00      	cmp	r3, #0
90007736:	d003      	beq.n	90007740 <HAL_RCC_GetSysClockFreq+0x114>
90007738:	697b      	ldr	r3, [r7, #20]
9000773a:	2b01      	cmp	r3, #1
9000773c:	d056      	beq.n	900077ec <HAL_RCC_GetSysClockFreq+0x1c0>
9000773e:	e099      	b.n	90007874 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007740:	4b6f      	ldr	r3, [pc, #444]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007742:	681b      	ldr	r3, [r3, #0]
90007744:	f003 0320 	and.w	r3, r3, #32
90007748:	2b00      	cmp	r3, #0
9000774a:	d02d      	beq.n	900077a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000774c:	4b6c      	ldr	r3, [pc, #432]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000774e:	681b      	ldr	r3, [r3, #0]
90007750:	08db      	lsrs	r3, r3, #3
90007752:	f003 0303 	and.w	r3, r3, #3
90007756:	4a6b      	ldr	r2, [pc, #428]	@ (90007904 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007758:	fa22 f303 	lsr.w	r3, r2, r3
9000775c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000775e:	687b      	ldr	r3, [r7, #4]
90007760:	ee07 3a90 	vmov	s15, r3
90007764:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007768:	693b      	ldr	r3, [r7, #16]
9000776a:	ee07 3a90 	vmov	s15, r3
9000776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007776:	4b62      	ldr	r3, [pc, #392]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000777a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000777e:	ee07 3a90 	vmov	s15, r3
90007782:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007786:	ed97 6a02 	vldr	s12, [r7, #8]
9000778a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007910 <HAL_RCC_GetSysClockFreq+0x2e4>
9000778e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007792:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000779a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000779e:	ee67 7a27 	vmul.f32	s15, s14, s15
900077a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
900077a6:	e087      	b.n	900078b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900077a8:	693b      	ldr	r3, [r7, #16]
900077aa:	ee07 3a90 	vmov	s15, r3
900077ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
900077b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007914 <HAL_RCC_GetSysClockFreq+0x2e8>
900077b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900077ba:	4b51      	ldr	r3, [pc, #324]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
900077bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900077be:	f3c3 0308 	ubfx	r3, r3, #0, #9
900077c2:	ee07 3a90 	vmov	s15, r3
900077c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900077ca:	ed97 6a02 	vldr	s12, [r7, #8]
900077ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007910 <HAL_RCC_GetSysClockFreq+0x2e4>
900077d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900077d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900077da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900077de:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077e2:	ee67 7a27 	vmul.f32	s15, s14, s15
900077e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900077ea:	e065      	b.n	900078b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900077ec:	693b      	ldr	r3, [r7, #16]
900077ee:	ee07 3a90 	vmov	s15, r3
900077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900077f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007918 <HAL_RCC_GetSysClockFreq+0x2ec>
900077fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900077fe:	4b40      	ldr	r3, [pc, #256]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007802:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007806:	ee07 3a90 	vmov	s15, r3
9000780a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000780e:	ed97 6a02 	vldr	s12, [r7, #8]
90007812:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007910 <HAL_RCC_GetSysClockFreq+0x2e4>
90007816:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000781a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000781e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007822:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007826:	ee67 7a27 	vmul.f32	s15, s14, s15
9000782a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000782e:	e043      	b.n	900078b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007830:	693b      	ldr	r3, [r7, #16]
90007832:	ee07 3a90 	vmov	s15, r3
90007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000783a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 9000791c <HAL_RCC_GetSysClockFreq+0x2f0>
9000783e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007842:	4b2f      	ldr	r3, [pc, #188]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000784a:	ee07 3a90 	vmov	s15, r3
9000784e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007852:	ed97 6a02 	vldr	s12, [r7, #8]
90007856:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007910 <HAL_RCC_GetSysClockFreq+0x2e4>
9000785a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007866:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000786a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000786e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007872:	e021      	b.n	900078b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007874:	693b      	ldr	r3, [r7, #16]
90007876:	ee07 3a90 	vmov	s15, r3
9000787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000787e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007918 <HAL_RCC_GetSysClockFreq+0x2ec>
90007882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007886:	4b1e      	ldr	r3, [pc, #120]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000788a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000788e:	ee07 3a90 	vmov	s15, r3
90007892:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007896:	ed97 6a02 	vldr	s12, [r7, #8]
9000789a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007910 <HAL_RCC_GetSysClockFreq+0x2e4>
9000789e:	eec6 7a25 	vdiv.f32	s15, s12, s11
900078a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900078a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900078aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
900078ae:	ee67 7a27 	vmul.f32	s15, s14, s15
900078b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900078b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
900078b8:	4b11      	ldr	r3, [pc, #68]	@ (90007900 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900078bc:	0a5b      	lsrs	r3, r3, #9
900078be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900078c2:	3301      	adds	r3, #1
900078c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
900078c6:	683b      	ldr	r3, [r7, #0]
900078c8:	ee07 3a90 	vmov	s15, r3
900078cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
900078d0:	edd7 6a07 	vldr	s13, [r7, #28]
900078d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
900078d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900078dc:	ee17 3a90 	vmov	r3, s15
900078e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
900078e2:	e005      	b.n	900078f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
900078e4:	2300      	movs	r3, #0
900078e6:	61bb      	str	r3, [r7, #24]
      break;
900078e8:	e002      	b.n	900078f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
900078ea:	4b07      	ldr	r3, [pc, #28]	@ (90007908 <HAL_RCC_GetSysClockFreq+0x2dc>)
900078ec:	61bb      	str	r3, [r7, #24]
      break;
900078ee:	bf00      	nop
  }

  return sysclockfreq;
900078f0:	69bb      	ldr	r3, [r7, #24]
}
900078f2:	4618      	mov	r0, r3
900078f4:	3724      	adds	r7, #36	@ 0x24
900078f6:	46bd      	mov	sp, r7
900078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900078fc:	4770      	bx	lr
900078fe:	bf00      	nop
90007900:	58024400 	.word	0x58024400
90007904:	03d09000 	.word	0x03d09000
90007908:	003d0900 	.word	0x003d0900
9000790c:	017d7840 	.word	0x017d7840
90007910:	46000000 	.word	0x46000000
90007914:	4c742400 	.word	0x4c742400
90007918:	4a742400 	.word	0x4a742400
9000791c:	4bbebc20 	.word	0x4bbebc20

90007920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007920:	b580      	push	{r7, lr}
90007922:	b082      	sub	sp, #8
90007924:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007926:	f7ff fe81 	bl	9000762c <HAL_RCC_GetSysClockFreq>
9000792a:	4602      	mov	r2, r0
9000792c:	4b10      	ldr	r3, [pc, #64]	@ (90007970 <HAL_RCC_GetHCLKFreq+0x50>)
9000792e:	699b      	ldr	r3, [r3, #24]
90007930:	0a1b      	lsrs	r3, r3, #8
90007932:	f003 030f 	and.w	r3, r3, #15
90007936:	490f      	ldr	r1, [pc, #60]	@ (90007974 <HAL_RCC_GetHCLKFreq+0x54>)
90007938:	5ccb      	ldrb	r3, [r1, r3]
9000793a:	f003 031f 	and.w	r3, r3, #31
9000793e:	fa22 f303 	lsr.w	r3, r2, r3
90007942:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007944:	4b0a      	ldr	r3, [pc, #40]	@ (90007970 <HAL_RCC_GetHCLKFreq+0x50>)
90007946:	699b      	ldr	r3, [r3, #24]
90007948:	f003 030f 	and.w	r3, r3, #15
9000794c:	4a09      	ldr	r2, [pc, #36]	@ (90007974 <HAL_RCC_GetHCLKFreq+0x54>)
9000794e:	5cd3      	ldrb	r3, [r2, r3]
90007950:	f003 031f 	and.w	r3, r3, #31
90007954:	687a      	ldr	r2, [r7, #4]
90007956:	fa22 f303 	lsr.w	r3, r2, r3
9000795a:	4a07      	ldr	r2, [pc, #28]	@ (90007978 <HAL_RCC_GetHCLKFreq+0x58>)
9000795c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000795e:	4a07      	ldr	r2, [pc, #28]	@ (9000797c <HAL_RCC_GetHCLKFreq+0x5c>)
90007960:	687b      	ldr	r3, [r7, #4]
90007962:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007964:	4b04      	ldr	r3, [pc, #16]	@ (90007978 <HAL_RCC_GetHCLKFreq+0x58>)
90007966:	681b      	ldr	r3, [r3, #0]
}
90007968:	4618      	mov	r0, r3
9000796a:	3708      	adds	r7, #8
9000796c:	46bd      	mov	sp, r7
9000796e:	bd80      	pop	{r7, pc}
90007970:	58024400 	.word	0x58024400
90007974:	9000cdac 	.word	0x9000cdac
90007978:	2000005c 	.word	0x2000005c
9000797c:	20000058 	.word	0x20000058

90007980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007980:	b580      	push	{r7, lr}
90007982:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007984:	f7ff ffcc 	bl	90007920 <HAL_RCC_GetHCLKFreq>
90007988:	4602      	mov	r2, r0
9000798a:	4b06      	ldr	r3, [pc, #24]	@ (900079a4 <HAL_RCC_GetPCLK1Freq+0x24>)
9000798c:	69db      	ldr	r3, [r3, #28]
9000798e:	091b      	lsrs	r3, r3, #4
90007990:	f003 0307 	and.w	r3, r3, #7
90007994:	4904      	ldr	r1, [pc, #16]	@ (900079a8 <HAL_RCC_GetPCLK1Freq+0x28>)
90007996:	5ccb      	ldrb	r3, [r1, r3]
90007998:	f003 031f 	and.w	r3, r3, #31
9000799c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
900079a0:	4618      	mov	r0, r3
900079a2:	bd80      	pop	{r7, pc}
900079a4:	58024400 	.word	0x58024400
900079a8:	9000cdac 	.word	0x9000cdac

900079ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
900079ac:	b580      	push	{r7, lr}
900079ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
900079b0:	f7ff ffb6 	bl	90007920 <HAL_RCC_GetHCLKFreq>
900079b4:	4602      	mov	r2, r0
900079b6:	4b06      	ldr	r3, [pc, #24]	@ (900079d0 <HAL_RCC_GetPCLK2Freq+0x24>)
900079b8:	69db      	ldr	r3, [r3, #28]
900079ba:	0a1b      	lsrs	r3, r3, #8
900079bc:	f003 0307 	and.w	r3, r3, #7
900079c0:	4904      	ldr	r1, [pc, #16]	@ (900079d4 <HAL_RCC_GetPCLK2Freq+0x28>)
900079c2:	5ccb      	ldrb	r3, [r1, r3]
900079c4:	f003 031f 	and.w	r3, r3, #31
900079c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
900079cc:	4618      	mov	r0, r3
900079ce:	bd80      	pop	{r7, pc}
900079d0:	58024400 	.word	0x58024400
900079d4:	9000cdac 	.word	0x9000cdac

900079d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
900079d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
900079dc:	b0ca      	sub	sp, #296	@ 0x128
900079de:	af00      	add	r7, sp, #0
900079e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
900079e4:	2300      	movs	r3, #0
900079e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
900079ea:	2300      	movs	r3, #0
900079ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
900079f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
900079fc:	2500      	movs	r5, #0
900079fe:	ea54 0305 	orrs.w	r3, r4, r5
90007a02:	d049      	beq.n	90007a98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007a0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007a0e:	d02f      	beq.n	90007a70 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007a10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007a14:	d828      	bhi.n	90007a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007a1a:	d01a      	beq.n	90007a52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007a20:	d822      	bhi.n	90007a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007a22:	2b00      	cmp	r3, #0
90007a24:	d003      	beq.n	90007a2e <HAL_RCCEx_PeriphCLKConfig+0x56>
90007a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007a2a:	d007      	beq.n	90007a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
90007a2c:	e01c      	b.n	90007a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007a2e:	4bb8      	ldr	r3, [pc, #736]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007a32:	4ab7      	ldr	r2, [pc, #732]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007a3a:	e01a      	b.n	90007a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a40:	3308      	adds	r3, #8
90007a42:	2102      	movs	r1, #2
90007a44:	4618      	mov	r0, r3
90007a46:	f001 fc8f 	bl	90009368 <RCCEx_PLL2_Config>
90007a4a:	4603      	mov	r3, r0
90007a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007a50:	e00f      	b.n	90007a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a56:	3328      	adds	r3, #40	@ 0x28
90007a58:	2102      	movs	r1, #2
90007a5a:	4618      	mov	r0, r3
90007a5c:	f001 fd36 	bl	900094cc <RCCEx_PLL3_Config>
90007a60:	4603      	mov	r3, r0
90007a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007a66:	e004      	b.n	90007a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007a68:	2301      	movs	r3, #1
90007a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007a6e:	e000      	b.n	90007a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007a70:	bf00      	nop
    }

    if (ret == HAL_OK)
90007a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007a76:	2b00      	cmp	r3, #0
90007a78:	d10a      	bne.n	90007a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007a7a:	4ba5      	ldr	r3, [pc, #660]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007a7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007a88:	4aa1      	ldr	r2, [pc, #644]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007a8a:	430b      	orrs	r3, r1
90007a8c:	6513      	str	r3, [r2, #80]	@ 0x50
90007a8e:	e003      	b.n	90007a98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
90007aa0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007aa4:	f04f 0900 	mov.w	r9, #0
90007aa8:	ea58 0309 	orrs.w	r3, r8, r9
90007aac:	d047      	beq.n	90007b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007ab4:	2b04      	cmp	r3, #4
90007ab6:	d82a      	bhi.n	90007b0e <HAL_RCCEx_PeriphCLKConfig+0x136>
90007ab8:	a201      	add	r2, pc, #4	@ (adr r2, 90007ac0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007abe:	bf00      	nop
90007ac0:	90007ad5 	.word	0x90007ad5
90007ac4:	90007ae3 	.word	0x90007ae3
90007ac8:	90007af9 	.word	0x90007af9
90007acc:	90007b17 	.word	0x90007b17
90007ad0:	90007b17 	.word	0x90007b17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ad4:	4b8e      	ldr	r3, [pc, #568]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ad8:	4a8d      	ldr	r2, [pc, #564]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ae0:	e01a      	b.n	90007b18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ae6:	3308      	adds	r3, #8
90007ae8:	2100      	movs	r1, #0
90007aea:	4618      	mov	r0, r3
90007aec:	f001 fc3c 	bl	90009368 <RCCEx_PLL2_Config>
90007af0:	4603      	mov	r3, r0
90007af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007af6:	e00f      	b.n	90007b18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007afc:	3328      	adds	r3, #40	@ 0x28
90007afe:	2100      	movs	r1, #0
90007b00:	4618      	mov	r0, r3
90007b02:	f001 fce3 	bl	900094cc <RCCEx_PLL3_Config>
90007b06:	4603      	mov	r3, r0
90007b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007b0c:	e004      	b.n	90007b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007b0e:	2301      	movs	r3, #1
90007b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007b14:	e000      	b.n	90007b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007b16:	bf00      	nop
    }

    if (ret == HAL_OK)
90007b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007b1c:	2b00      	cmp	r3, #0
90007b1e:	d10a      	bne.n	90007b36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007b20:	4b7b      	ldr	r3, [pc, #492]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007b24:	f023 0107 	bic.w	r1, r3, #7
90007b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007b2e:	4a78      	ldr	r2, [pc, #480]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b30:	430b      	orrs	r3, r1
90007b32:	6513      	str	r3, [r2, #80]	@ 0x50
90007b34:	e003      	b.n	90007b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
90007b46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007b4a:	f04f 0b00 	mov.w	fp, #0
90007b4e:	ea5a 030b 	orrs.w	r3, sl, fp
90007b52:	d04c      	beq.n	90007bee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007b5e:	d030      	beq.n	90007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007b64:	d829      	bhi.n	90007bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007b66:	2bc0      	cmp	r3, #192	@ 0xc0
90007b68:	d02d      	beq.n	90007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007b6a:	2bc0      	cmp	r3, #192	@ 0xc0
90007b6c:	d825      	bhi.n	90007bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007b6e:	2b80      	cmp	r3, #128	@ 0x80
90007b70:	d018      	beq.n	90007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007b72:	2b80      	cmp	r3, #128	@ 0x80
90007b74:	d821      	bhi.n	90007bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007b76:	2b00      	cmp	r3, #0
90007b78:	d002      	beq.n	90007b80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007b7a:	2b40      	cmp	r3, #64	@ 0x40
90007b7c:	d007      	beq.n	90007b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007b7e:	e01c      	b.n	90007bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007b80:	4b63      	ldr	r3, [pc, #396]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007b84:	4a62      	ldr	r2, [pc, #392]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007b8c:	e01c      	b.n	90007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b92:	3308      	adds	r3, #8
90007b94:	2100      	movs	r1, #0
90007b96:	4618      	mov	r0, r3
90007b98:	f001 fbe6 	bl	90009368 <RCCEx_PLL2_Config>
90007b9c:	4603      	mov	r3, r0
90007b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007ba2:	e011      	b.n	90007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ba8:	3328      	adds	r3, #40	@ 0x28
90007baa:	2100      	movs	r1, #0
90007bac:	4618      	mov	r0, r3
90007bae:	f001 fc8d 	bl	900094cc <RCCEx_PLL3_Config>
90007bb2:	4603      	mov	r3, r0
90007bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007bb8:	e006      	b.n	90007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007bba:	2301      	movs	r3, #1
90007bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007bc0:	e002      	b.n	90007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007bc2:	bf00      	nop
90007bc4:	e000      	b.n	90007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
90007bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007bcc:	2b00      	cmp	r3, #0
90007bce:	d10a      	bne.n	90007be6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007bd0:	4b4f      	ldr	r3, [pc, #316]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007bd4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007bde:	4a4c      	ldr	r2, [pc, #304]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007be0:	430b      	orrs	r3, r1
90007be2:	6513      	str	r3, [r2, #80]	@ 0x50
90007be4:	e003      	b.n	90007bee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
90007bf6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007bfa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007bfe:	2300      	movs	r3, #0
90007c00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007c04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90007c08:	460b      	mov	r3, r1
90007c0a:	4313      	orrs	r3, r2
90007c0c:	d053      	beq.n	90007cb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007c16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007c1a:	d035      	beq.n	90007c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007c20:	d82e      	bhi.n	90007c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007c22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007c26:	d031      	beq.n	90007c8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007c28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007c2c:	d828      	bhi.n	90007c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007c2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007c32:	d01a      	beq.n	90007c6a <HAL_RCCEx_PeriphCLKConfig+0x292>
90007c34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007c38:	d822      	bhi.n	90007c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007c3a:	2b00      	cmp	r3, #0
90007c3c:	d003      	beq.n	90007c46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007c42:	d007      	beq.n	90007c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007c44:	e01c      	b.n	90007c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007c46:	4b32      	ldr	r3, [pc, #200]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c4a:	4a31      	ldr	r2, [pc, #196]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c52:	e01c      	b.n	90007c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c58:	3308      	adds	r3, #8
90007c5a:	2100      	movs	r1, #0
90007c5c:	4618      	mov	r0, r3
90007c5e:	f001 fb83 	bl	90009368 <RCCEx_PLL2_Config>
90007c62:	4603      	mov	r3, r0
90007c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007c68:	e011      	b.n	90007c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c6e:	3328      	adds	r3, #40	@ 0x28
90007c70:	2100      	movs	r1, #0
90007c72:	4618      	mov	r0, r3
90007c74:	f001 fc2a 	bl	900094cc <RCCEx_PLL3_Config>
90007c78:	4603      	mov	r3, r0
90007c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c7e:	e006      	b.n	90007c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007c80:	2301      	movs	r3, #1
90007c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007c86:	e002      	b.n	90007c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007c88:	bf00      	nop
90007c8a:	e000      	b.n	90007c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c92:	2b00      	cmp	r3, #0
90007c94:	d10b      	bne.n	90007cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007c96:	4b1e      	ldr	r3, [pc, #120]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007c9a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007ca6:	4a1a      	ldr	r2, [pc, #104]	@ (90007d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ca8:	430b      	orrs	r3, r1
90007caa:	6593      	str	r3, [r2, #88]	@ 0x58
90007cac:	e003      	b.n	90007cb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
90007cbe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007cc2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007cc6:	2300      	movs	r3, #0
90007cc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007ccc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007cd0:	460b      	mov	r3, r1
90007cd2:	4313      	orrs	r3, r2
90007cd4:	d056      	beq.n	90007d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007cde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007ce2:	d038      	beq.n	90007d56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007ce4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007ce8:	d831      	bhi.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
90007cea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007cee:	d034      	beq.n	90007d5a <HAL_RCCEx_PeriphCLKConfig+0x382>
90007cf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007cf4:	d82b      	bhi.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
90007cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007cfa:	d01d      	beq.n	90007d38 <HAL_RCCEx_PeriphCLKConfig+0x360>
90007cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007d00:	d825      	bhi.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
90007d02:	2b00      	cmp	r3, #0
90007d04:	d006      	beq.n	90007d14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007d06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007d0a:	d00a      	beq.n	90007d22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007d0c:	e01f      	b.n	90007d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
90007d0e:	bf00      	nop
90007d10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d14:	4ba2      	ldr	r3, [pc, #648]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007d18:	4aa1      	ldr	r2, [pc, #644]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d20:	e01c      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d26:	3308      	adds	r3, #8
90007d28:	2100      	movs	r1, #0
90007d2a:	4618      	mov	r0, r3
90007d2c:	f001 fb1c 	bl	90009368 <RCCEx_PLL2_Config>
90007d30:	4603      	mov	r3, r0
90007d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007d36:	e011      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d3c:	3328      	adds	r3, #40	@ 0x28
90007d3e:	2100      	movs	r1, #0
90007d40:	4618      	mov	r0, r3
90007d42:	f001 fbc3 	bl	900094cc <RCCEx_PLL3_Config>
90007d46:	4603      	mov	r3, r0
90007d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d4c:	e006      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007d4e:	2301      	movs	r3, #1
90007d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007d54:	e002      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007d56:	bf00      	nop
90007d58:	e000      	b.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d60:	2b00      	cmp	r3, #0
90007d62:	d10b      	bne.n	90007d7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007d64:	4b8e      	ldr	r3, [pc, #568]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007d68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007d74:	4a8a      	ldr	r2, [pc, #552]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007d76:	430b      	orrs	r3, r1
90007d78:	6593      	str	r3, [r2, #88]	@ 0x58
90007d7a:	e003      	b.n	90007d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90007d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90007d94:	2300      	movs	r3, #0
90007d96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90007d9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90007d9e:	460b      	mov	r3, r1
90007da0:	4313      	orrs	r3, r2
90007da2:	d03a      	beq.n	90007e1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007daa:	2b30      	cmp	r3, #48	@ 0x30
90007dac:	d01f      	beq.n	90007dee <HAL_RCCEx_PeriphCLKConfig+0x416>
90007dae:	2b30      	cmp	r3, #48	@ 0x30
90007db0:	d819      	bhi.n	90007de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007db2:	2b20      	cmp	r3, #32
90007db4:	d00c      	beq.n	90007dd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007db6:	2b20      	cmp	r3, #32
90007db8:	d815      	bhi.n	90007de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007dba:	2b00      	cmp	r3, #0
90007dbc:	d019      	beq.n	90007df2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007dbe:	2b10      	cmp	r3, #16
90007dc0:	d111      	bne.n	90007de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007dc2:	4b77      	ldr	r3, [pc, #476]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007dc6:	4a76      	ldr	r2, [pc, #472]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007dce:	e011      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dd4:	3308      	adds	r3, #8
90007dd6:	2102      	movs	r1, #2
90007dd8:	4618      	mov	r0, r3
90007dda:	f001 fac5 	bl	90009368 <RCCEx_PLL2_Config>
90007dde:	4603      	mov	r3, r0
90007de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007de4:	e006      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007de6:	2301      	movs	r3, #1
90007de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007dec:	e002      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007dee:	bf00      	nop
90007df0:	e000      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007df2:	bf00      	nop
    }

    if (ret == HAL_OK)
90007df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007df8:	2b00      	cmp	r3, #0
90007dfa:	d10a      	bne.n	90007e12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90007dfc:	4b68      	ldr	r3, [pc, #416]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007e00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007e0a:	4a65      	ldr	r2, [pc, #404]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e0c:	430b      	orrs	r3, r1
90007e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
90007e10:	e003      	b.n	90007e1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90007e26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90007e2a:	2300      	movs	r3, #0
90007e2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90007e30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90007e34:	460b      	mov	r3, r1
90007e36:	4313      	orrs	r3, r2
90007e38:	d051      	beq.n	90007ede <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007e44:	d035      	beq.n	90007eb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
90007e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007e4a:	d82e      	bhi.n	90007eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007e4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007e50:	d031      	beq.n	90007eb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
90007e52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007e56:	d828      	bhi.n	90007eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007e5c:	d01a      	beq.n	90007e94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90007e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007e62:	d822      	bhi.n	90007eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007e64:	2b00      	cmp	r3, #0
90007e66:	d003      	beq.n	90007e70 <HAL_RCCEx_PeriphCLKConfig+0x498>
90007e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90007e6c:	d007      	beq.n	90007e7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90007e6e:	e01c      	b.n	90007eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e70:	4b4b      	ldr	r3, [pc, #300]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e74:	4a4a      	ldr	r2, [pc, #296]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007e7c:	e01c      	b.n	90007eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e82:	3308      	adds	r3, #8
90007e84:	2100      	movs	r1, #0
90007e86:	4618      	mov	r0, r3
90007e88:	f001 fa6e 	bl	90009368 <RCCEx_PLL2_Config>
90007e8c:	4603      	mov	r3, r0
90007e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007e92:	e011      	b.n	90007eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e98:	3328      	adds	r3, #40	@ 0x28
90007e9a:	2100      	movs	r1, #0
90007e9c:	4618      	mov	r0, r3
90007e9e:	f001 fb15 	bl	900094cc <RCCEx_PLL3_Config>
90007ea2:	4603      	mov	r3, r0
90007ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007ea8:	e006      	b.n	90007eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007eaa:	2301      	movs	r3, #1
90007eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007eb0:	e002      	b.n	90007eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90007eb2:	bf00      	nop
90007eb4:	e000      	b.n	90007eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90007eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
90007eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ebc:	2b00      	cmp	r3, #0
90007ebe:	d10a      	bne.n	90007ed6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90007ec0:	4b37      	ldr	r3, [pc, #220]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007ec4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
90007ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007ece:	4a34      	ldr	r2, [pc, #208]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ed0:	430b      	orrs	r3, r1
90007ed2:	6513      	str	r3, [r2, #80]	@ 0x50
90007ed4:	e003      	b.n	90007ede <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90007ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
90007ee6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
90007eea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90007eee:	2300      	movs	r3, #0
90007ef0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90007ef4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90007ef8:	460b      	mov	r3, r1
90007efa:	4313      	orrs	r3, r2
90007efc:	d056      	beq.n	90007fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90007f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90007f08:	d033      	beq.n	90007f72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
90007f0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90007f0e:	d82c      	bhi.n	90007f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
90007f10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90007f14:	d02f      	beq.n	90007f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90007f16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90007f1a:	d826      	bhi.n	90007f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
90007f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90007f20:	d02b      	beq.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90007f22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90007f26:	d820      	bhi.n	90007f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
90007f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90007f2c:	d012      	beq.n	90007f54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
90007f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90007f32:	d81a      	bhi.n	90007f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
90007f34:	2b00      	cmp	r3, #0
90007f36:	d022      	beq.n	90007f7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90007f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90007f3c:	d115      	bne.n	90007f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f42:	3308      	adds	r3, #8
90007f44:	2101      	movs	r1, #1
90007f46:	4618      	mov	r0, r3
90007f48:	f001 fa0e 	bl	90009368 <RCCEx_PLL2_Config>
90007f4c:	4603      	mov	r3, r0
90007f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90007f52:	e015      	b.n	90007f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f58:	3328      	adds	r3, #40	@ 0x28
90007f5a:	2101      	movs	r1, #1
90007f5c:	4618      	mov	r0, r3
90007f5e:	f001 fab5 	bl	900094cc <RCCEx_PLL3_Config>
90007f62:	4603      	mov	r3, r0
90007f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90007f68:	e00a      	b.n	90007f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007f6a:	2301      	movs	r3, #1
90007f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f70:	e006      	b.n	90007f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007f72:	bf00      	nop
90007f74:	e004      	b.n	90007f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007f76:	bf00      	nop
90007f78:	e002      	b.n	90007f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007f7a:	bf00      	nop
90007f7c:	e000      	b.n	90007f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90007f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f84:	2b00      	cmp	r3, #0
90007f86:	d10d      	bne.n	90007fa4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90007f88:	4b05      	ldr	r3, [pc, #20]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007f8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90007f96:	4a02      	ldr	r2, [pc, #8]	@ (90007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f98:	430b      	orrs	r3, r1
90007f9a:	6513      	str	r3, [r2, #80]	@ 0x50
90007f9c:	e006      	b.n	90007fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
90007f9e:	bf00      	nop
90007fa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90007fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
90007fb4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
90007fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90007fbc:	2300      	movs	r3, #0
90007fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90007fc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
90007fc6:	460b      	mov	r3, r1
90007fc8:	4313      	orrs	r3, r2
90007fca:	d055      	beq.n	90008078 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
90007fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90007fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90007fd8:	d033      	beq.n	90008042 <HAL_RCCEx_PeriphCLKConfig+0x66a>
90007fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90007fde:	d82c      	bhi.n	9000803a <HAL_RCCEx_PeriphCLKConfig+0x662>
90007fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90007fe4:	d02f      	beq.n	90008046 <HAL_RCCEx_PeriphCLKConfig+0x66e>
90007fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90007fea:	d826      	bhi.n	9000803a <HAL_RCCEx_PeriphCLKConfig+0x662>
90007fec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90007ff0:	d02b      	beq.n	9000804a <HAL_RCCEx_PeriphCLKConfig+0x672>
90007ff2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90007ff6:	d820      	bhi.n	9000803a <HAL_RCCEx_PeriphCLKConfig+0x662>
90007ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90007ffc:	d012      	beq.n	90008024 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90007ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008002:	d81a      	bhi.n	9000803a <HAL_RCCEx_PeriphCLKConfig+0x662>
90008004:	2b00      	cmp	r3, #0
90008006:	d022      	beq.n	9000804e <HAL_RCCEx_PeriphCLKConfig+0x676>
90008008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000800c:	d115      	bne.n	9000803a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008012:	3308      	adds	r3, #8
90008014:	2101      	movs	r1, #1
90008016:	4618      	mov	r0, r3
90008018:	f001 f9a6 	bl	90009368 <RCCEx_PLL2_Config>
9000801c:	4603      	mov	r3, r0
9000801e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008022:	e015      	b.n	90008050 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008028:	3328      	adds	r3, #40	@ 0x28
9000802a:	2101      	movs	r1, #1
9000802c:	4618      	mov	r0, r3
9000802e:	f001 fa4d 	bl	900094cc <RCCEx_PLL3_Config>
90008032:	4603      	mov	r3, r0
90008034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008038:	e00a      	b.n	90008050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
9000803a:	2301      	movs	r3, #1
9000803c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008040:	e006      	b.n	90008050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008042:	bf00      	nop
90008044:	e004      	b.n	90008050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008046:	bf00      	nop
90008048:	e002      	b.n	90008050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000804a:	bf00      	nop
9000804c:	e000      	b.n	90008050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000804e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008054:	2b00      	cmp	r3, #0
90008056:	d10b      	bne.n	90008070 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90008058:	4ba3      	ldr	r3, [pc, #652]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000805a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000805c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008068:	4a9f      	ldr	r2, [pc, #636]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000806a:	430b      	orrs	r3, r1
9000806c:	6593      	str	r3, [r2, #88]	@ 0x58
9000806e:	e003      	b.n	90008078 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000807c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008080:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
90008084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
90008088:	2300      	movs	r3, #0
9000808a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
9000808e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008092:	460b      	mov	r3, r1
90008094:	4313      	orrs	r3, r2
90008096:	d037      	beq.n	90008108 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
90008098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000809c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000809e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900080a2:	d00e      	beq.n	900080c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900080a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900080a8:	d816      	bhi.n	900080d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
900080aa:	2b00      	cmp	r3, #0
900080ac:	d018      	beq.n	900080e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
900080ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900080b2:	d111      	bne.n	900080d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900080b4:	4b8c      	ldr	r3, [pc, #560]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900080b8:	4a8b      	ldr	r2, [pc, #556]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900080ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900080be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900080c0:	e00f      	b.n	900080e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080c6:	3308      	adds	r3, #8
900080c8:	2101      	movs	r1, #1
900080ca:	4618      	mov	r0, r3
900080cc:	f001 f94c 	bl	90009368 <RCCEx_PLL2_Config>
900080d0:	4603      	mov	r3, r0
900080d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900080d6:	e004      	b.n	900080e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900080d8:	2301      	movs	r3, #1
900080da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900080de:	e000      	b.n	900080e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
900080e0:	bf00      	nop
    }

    if (ret == HAL_OK)
900080e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080e6:	2b00      	cmp	r3, #0
900080e8:	d10a      	bne.n	90008100 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
900080ea:	4b7f      	ldr	r3, [pc, #508]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900080ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900080ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
900080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900080f8:	4a7b      	ldr	r2, [pc, #492]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900080fa:	430b      	orrs	r3, r1
900080fc:	6513      	str	r3, [r2, #80]	@ 0x50
900080fe:	e003      	b.n	90008108 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000810c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008110:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90008118:	2300      	movs	r3, #0
9000811a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
9000811e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008122:	460b      	mov	r3, r1
90008124:	4313      	orrs	r3, r2
90008126:	d039      	beq.n	9000819c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000812c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000812e:	2b03      	cmp	r3, #3
90008130:	d81c      	bhi.n	9000816c <HAL_RCCEx_PeriphCLKConfig+0x794>
90008132:	a201      	add	r2, pc, #4	@ (adr r2, 90008138 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008138:	90008175 	.word	0x90008175
9000813c:	90008149 	.word	0x90008149
90008140:	90008157 	.word	0x90008157
90008144:	90008175 	.word	0x90008175
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008148:	4b67      	ldr	r3, [pc, #412]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000814c:	4a66      	ldr	r2, [pc, #408]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000814e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008154:	e00f      	b.n	90008176 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000815a:	3308      	adds	r3, #8
9000815c:	2102      	movs	r1, #2
9000815e:	4618      	mov	r0, r3
90008160:	f001 f902 	bl	90009368 <RCCEx_PLL2_Config>
90008164:	4603      	mov	r3, r0
90008166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
9000816a:	e004      	b.n	90008176 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
9000816c:	2301      	movs	r3, #1
9000816e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008172:	e000      	b.n	90008176 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008174:	bf00      	nop
    }

    if (ret == HAL_OK)
90008176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000817a:	2b00      	cmp	r3, #0
9000817c:	d10a      	bne.n	90008194 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000817e:	4b5a      	ldr	r3, [pc, #360]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008182:	f023 0103 	bic.w	r1, r3, #3
90008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000818a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000818c:	4a56      	ldr	r2, [pc, #344]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000818e:	430b      	orrs	r3, r1
90008190:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008192:	e003      	b.n	9000819c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
900081a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
900081a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
900081ac:	2300      	movs	r3, #0
900081ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
900081b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
900081b6:	460b      	mov	r3, r1
900081b8:	4313      	orrs	r3, r2
900081ba:	f000 809f 	beq.w	900082fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900081be:	4b4b      	ldr	r3, [pc, #300]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
900081c0:	681b      	ldr	r3, [r3, #0]
900081c2:	4a4a      	ldr	r2, [pc, #296]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
900081c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900081c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900081ca:	f7fa ff77 	bl	900030bc <HAL_GetTick>
900081ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900081d2:	e00b      	b.n	900081ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900081d4:	f7fa ff72 	bl	900030bc <HAL_GetTick>
900081d8:	4602      	mov	r2, r0
900081da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900081de:	1ad3      	subs	r3, r2, r3
900081e0:	2b64      	cmp	r3, #100	@ 0x64
900081e2:	d903      	bls.n	900081ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
900081e4:	2303      	movs	r3, #3
900081e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900081ea:	e005      	b.n	900081f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900081ec:	4b3f      	ldr	r3, [pc, #252]	@ (900082ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
900081ee:	681b      	ldr	r3, [r3, #0]
900081f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900081f4:	2b00      	cmp	r3, #0
900081f6:	d0ed      	beq.n	900081d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
900081f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081fc:	2b00      	cmp	r3, #0
900081fe:	d179      	bne.n	900082f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008200:	4b39      	ldr	r3, [pc, #228]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008202:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000820c:	4053      	eors	r3, r2
9000820e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008212:	2b00      	cmp	r3, #0
90008214:	d015      	beq.n	90008242 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90008216:	4b34      	ldr	r3, [pc, #208]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000821a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000821e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90008222:	4b31      	ldr	r3, [pc, #196]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008226:	4a30      	ldr	r2, [pc, #192]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000822c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000822e:	4b2e      	ldr	r3, [pc, #184]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008232:	4a2d      	ldr	r2, [pc, #180]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90008238:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
9000823a:	4a2b      	ldr	r2, [pc, #172]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000823c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90008240:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90008242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000824a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000824e:	d118      	bne.n	90008282 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008250:	f7fa ff34 	bl	900030bc <HAL_GetTick>
90008254:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008258:	e00d      	b.n	90008276 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000825a:	f7fa ff2f 	bl	900030bc <HAL_GetTick>
9000825e:	4602      	mov	r2, r0
90008260:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008264:	1ad2      	subs	r2, r2, r3
90008266:	f241 3388 	movw	r3, #5000	@ 0x1388
9000826a:	429a      	cmp	r2, r3
9000826c:	d903      	bls.n	90008276 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
9000826e:	2303      	movs	r3, #3
90008270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90008274:	e005      	b.n	90008282 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008276:	4b1c      	ldr	r3, [pc, #112]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000827a:	f003 0302 	and.w	r3, r3, #2
9000827e:	2b00      	cmp	r3, #0
90008280:	d0eb      	beq.n	9000825a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90008282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008286:	2b00      	cmp	r3, #0
90008288:	d129      	bne.n	900082de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000828e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000829a:	d10e      	bne.n	900082ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
9000829c:	4b12      	ldr	r3, [pc, #72]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000829e:	691b      	ldr	r3, [r3, #16]
900082a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
900082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900082ac:	091a      	lsrs	r2, r3, #4
900082ae:	4b10      	ldr	r3, [pc, #64]	@ (900082f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
900082b0:	4013      	ands	r3, r2
900082b2:	4a0d      	ldr	r2, [pc, #52]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082b4:	430b      	orrs	r3, r1
900082b6:	6113      	str	r3, [r2, #16]
900082b8:	e005      	b.n	900082c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
900082ba:	4b0b      	ldr	r3, [pc, #44]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082bc:	691b      	ldr	r3, [r3, #16]
900082be:	4a0a      	ldr	r2, [pc, #40]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
900082c4:	6113      	str	r3, [r2, #16]
900082c6:	4b08      	ldr	r3, [pc, #32]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
900082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900082d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
900082d6:	4a04      	ldr	r2, [pc, #16]	@ (900082e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082d8:	430b      	orrs	r3, r1
900082da:	6713      	str	r3, [r2, #112]	@ 0x70
900082dc:	e00e      	b.n	900082fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
900082de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
900082e6:	e009      	b.n	900082fc <HAL_RCCEx_PeriphCLKConfig+0x924>
900082e8:	58024400 	.word	0x58024400
900082ec:	58024800 	.word	0x58024800
900082f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
900082f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
900082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008300:	e9d3 2300 	ldrd	r2, r3, [r3]
90008304:	f002 0301 	and.w	r3, r2, #1
90008308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
9000830c:	2300      	movs	r3, #0
9000830e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008312:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
90008316:	460b      	mov	r3, r1
90008318:	4313      	orrs	r3, r2
9000831a:	f000 8089 	beq.w	90008430 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
9000831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008324:	2b28      	cmp	r3, #40	@ 0x28
90008326:	d86b      	bhi.n	90008400 <HAL_RCCEx_PeriphCLKConfig+0xa28>
90008328:	a201      	add	r2, pc, #4	@ (adr r2, 90008330 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000832e:	bf00      	nop
90008330:	90008409 	.word	0x90008409
90008334:	90008401 	.word	0x90008401
90008338:	90008401 	.word	0x90008401
9000833c:	90008401 	.word	0x90008401
90008340:	90008401 	.word	0x90008401
90008344:	90008401 	.word	0x90008401
90008348:	90008401 	.word	0x90008401
9000834c:	90008401 	.word	0x90008401
90008350:	900083d5 	.word	0x900083d5
90008354:	90008401 	.word	0x90008401
90008358:	90008401 	.word	0x90008401
9000835c:	90008401 	.word	0x90008401
90008360:	90008401 	.word	0x90008401
90008364:	90008401 	.word	0x90008401
90008368:	90008401 	.word	0x90008401
9000836c:	90008401 	.word	0x90008401
90008370:	900083eb 	.word	0x900083eb
90008374:	90008401 	.word	0x90008401
90008378:	90008401 	.word	0x90008401
9000837c:	90008401 	.word	0x90008401
90008380:	90008401 	.word	0x90008401
90008384:	90008401 	.word	0x90008401
90008388:	90008401 	.word	0x90008401
9000838c:	90008401 	.word	0x90008401
90008390:	90008409 	.word	0x90008409
90008394:	90008401 	.word	0x90008401
90008398:	90008401 	.word	0x90008401
9000839c:	90008401 	.word	0x90008401
900083a0:	90008401 	.word	0x90008401
900083a4:	90008401 	.word	0x90008401
900083a8:	90008401 	.word	0x90008401
900083ac:	90008401 	.word	0x90008401
900083b0:	90008409 	.word	0x90008409
900083b4:	90008401 	.word	0x90008401
900083b8:	90008401 	.word	0x90008401
900083bc:	90008401 	.word	0x90008401
900083c0:	90008401 	.word	0x90008401
900083c4:	90008401 	.word	0x90008401
900083c8:	90008401 	.word	0x90008401
900083cc:	90008401 	.word	0x90008401
900083d0:	90008409 	.word	0x90008409
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900083d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083d8:	3308      	adds	r3, #8
900083da:	2101      	movs	r1, #1
900083dc:	4618      	mov	r0, r3
900083de:	f000 ffc3 	bl	90009368 <RCCEx_PLL2_Config>
900083e2:	4603      	mov	r3, r0
900083e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900083e8:	e00f      	b.n	9000840a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900083ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083ee:	3328      	adds	r3, #40	@ 0x28
900083f0:	2101      	movs	r1, #1
900083f2:	4618      	mov	r0, r3
900083f4:	f001 f86a 	bl	900094cc <RCCEx_PLL3_Config>
900083f8:	4603      	mov	r3, r0
900083fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900083fe:	e004      	b.n	9000840a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008400:	2301      	movs	r3, #1
90008402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008406:	e000      	b.n	9000840a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
90008408:	bf00      	nop
    }

    if (ret == HAL_OK)
9000840a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000840e:	2b00      	cmp	r3, #0
90008410:	d10a      	bne.n	90008428 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008412:	4bbf      	ldr	r3, [pc, #764]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008416:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000841e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008420:	4abb      	ldr	r2, [pc, #748]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008422:	430b      	orrs	r3, r1
90008424:	6553      	str	r3, [r2, #84]	@ 0x54
90008426:	e003      	b.n	90008430 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000842c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008434:	e9d3 2300 	ldrd	r2, r3, [r3]
90008438:	f002 0302 	and.w	r3, r2, #2
9000843c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90008440:	2300      	movs	r3, #0
90008442:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
90008446:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
9000844a:	460b      	mov	r3, r1
9000844c:	4313      	orrs	r3, r2
9000844e:	d041      	beq.n	900084d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90008450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008456:	2b05      	cmp	r3, #5
90008458:	d824      	bhi.n	900084a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
9000845a:	a201      	add	r2, pc, #4	@ (adr r2, 90008460 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
9000845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008460:	900084ad 	.word	0x900084ad
90008464:	90008479 	.word	0x90008479
90008468:	9000848f 	.word	0x9000848f
9000846c:	900084ad 	.word	0x900084ad
90008470:	900084ad 	.word	0x900084ad
90008474:	900084ad 	.word	0x900084ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000847c:	3308      	adds	r3, #8
9000847e:	2101      	movs	r1, #1
90008480:	4618      	mov	r0, r3
90008482:	f000 ff71 	bl	90009368 <RCCEx_PLL2_Config>
90008486:	4603      	mov	r3, r0
90008488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
9000848c:	e00f      	b.n	900084ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008492:	3328      	adds	r3, #40	@ 0x28
90008494:	2101      	movs	r1, #1
90008496:	4618      	mov	r0, r3
90008498:	f001 f818 	bl	900094cc <RCCEx_PLL3_Config>
9000849c:	4603      	mov	r3, r0
9000849e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900084a2:	e004      	b.n	900084ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900084a4:	2301      	movs	r3, #1
900084a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900084aa:	e000      	b.n	900084ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
900084ac:	bf00      	nop
    }

    if (ret == HAL_OK)
900084ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084b2:	2b00      	cmp	r3, #0
900084b4:	d10a      	bne.n	900084cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
900084b6:	4b96      	ldr	r3, [pc, #600]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900084b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900084ba:	f023 0107 	bic.w	r1, r3, #7
900084be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900084c4:	4a92      	ldr	r2, [pc, #584]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900084c6:	430b      	orrs	r3, r1
900084c8:	6553      	str	r3, [r2, #84]	@ 0x54
900084ca:	e003      	b.n	900084d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900084cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900084d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
900084dc:	f002 0304 	and.w	r3, r2, #4
900084e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
900084e4:	2300      	movs	r3, #0
900084e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
900084ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
900084ee:	460b      	mov	r3, r1
900084f0:	4313      	orrs	r3, r2
900084f2:	d044      	beq.n	9000857e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
900084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
900084fc:	2b05      	cmp	r3, #5
900084fe:	d825      	bhi.n	9000854c <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008500:	a201      	add	r2, pc, #4	@ (adr r2, 90008508 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008506:	bf00      	nop
90008508:	90008555 	.word	0x90008555
9000850c:	90008521 	.word	0x90008521
90008510:	90008537 	.word	0x90008537
90008514:	90008555 	.word	0x90008555
90008518:	90008555 	.word	0x90008555
9000851c:	90008555 	.word	0x90008555
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008524:	3308      	adds	r3, #8
90008526:	2101      	movs	r1, #1
90008528:	4618      	mov	r0, r3
9000852a:	f000 ff1d 	bl	90009368 <RCCEx_PLL2_Config>
9000852e:	4603      	mov	r3, r0
90008530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008534:	e00f      	b.n	90008556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000853a:	3328      	adds	r3, #40	@ 0x28
9000853c:	2101      	movs	r1, #1
9000853e:	4618      	mov	r0, r3
90008540:	f000 ffc4 	bl	900094cc <RCCEx_PLL3_Config>
90008544:	4603      	mov	r3, r0
90008546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
9000854a:	e004      	b.n	90008556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000854c:	2301      	movs	r3, #1
9000854e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008552:	e000      	b.n	90008556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008554:	bf00      	nop
    }

    if (ret == HAL_OK)
90008556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000855a:	2b00      	cmp	r3, #0
9000855c:	d10b      	bne.n	90008576 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000855e:	4b6c      	ldr	r3, [pc, #432]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008562:	f023 0107 	bic.w	r1, r3, #7
90008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000856a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000856e:	4a68      	ldr	r2, [pc, #416]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008570:	430b      	orrs	r3, r1
90008572:	6593      	str	r3, [r2, #88]	@ 0x58
90008574:	e003      	b.n	9000857e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000857a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000857e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008582:	e9d3 2300 	ldrd	r2, r3, [r3]
90008586:	f002 0320 	and.w	r3, r2, #32
9000858a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
9000858e:	2300      	movs	r3, #0
90008590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
90008598:	460b      	mov	r3, r1
9000859a:	4313      	orrs	r3, r2
9000859c:	d055      	beq.n	9000864a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
9000859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900085a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900085aa:	d033      	beq.n	90008614 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
900085ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900085b0:	d82c      	bhi.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0xc34>
900085b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900085b6:	d02f      	beq.n	90008618 <HAL_RCCEx_PeriphCLKConfig+0xc40>
900085b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900085bc:	d826      	bhi.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0xc34>
900085be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900085c2:	d02b      	beq.n	9000861c <HAL_RCCEx_PeriphCLKConfig+0xc44>
900085c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900085c8:	d820      	bhi.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0xc34>
900085ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900085ce:	d012      	beq.n	900085f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900085d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900085d4:	d81a      	bhi.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0xc34>
900085d6:	2b00      	cmp	r3, #0
900085d8:	d022      	beq.n	90008620 <HAL_RCCEx_PeriphCLKConfig+0xc48>
900085da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900085de:	d115      	bne.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900085e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085e4:	3308      	adds	r3, #8
900085e6:	2100      	movs	r1, #0
900085e8:	4618      	mov	r0, r3
900085ea:	f000 febd 	bl	90009368 <RCCEx_PLL2_Config>
900085ee:	4603      	mov	r3, r0
900085f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900085f4:	e015      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085fa:	3328      	adds	r3, #40	@ 0x28
900085fc:	2102      	movs	r1, #2
900085fe:	4618      	mov	r0, r3
90008600:	f000 ff64 	bl	900094cc <RCCEx_PLL3_Config>
90008604:	4603      	mov	r3, r0
90008606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000860a:	e00a      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000860c:	2301      	movs	r3, #1
9000860e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008612:	e006      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008614:	bf00      	nop
90008616:	e004      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008618:	bf00      	nop
9000861a:	e002      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000861c:	bf00      	nop
9000861e:	e000      	b.n	90008622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008620:	bf00      	nop
    }

    if (ret == HAL_OK)
90008622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008626:	2b00      	cmp	r3, #0
90008628:	d10b      	bne.n	90008642 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000862a:	4b39      	ldr	r3, [pc, #228]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000862c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000862e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000863a:	4a35      	ldr	r2, [pc, #212]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000863c:	430b      	orrs	r3, r1
9000863e:	6553      	str	r3, [r2, #84]	@ 0x54
90008640:	e003      	b.n	9000864a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000864e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008652:	f002 0340 	and.w	r3, r2, #64	@ 0x40
90008656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
9000865a:	2300      	movs	r3, #0
9000865c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90008660:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90008664:	460b      	mov	r3, r1
90008666:	4313      	orrs	r3, r2
90008668:	d058      	beq.n	9000871c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
9000866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000866e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008672:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008676:	d033      	beq.n	900086e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
90008678:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
9000867c:	d82c      	bhi.n	900086d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000867e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008682:	d02f      	beq.n	900086e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008688:	d826      	bhi.n	900086d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000868a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
9000868e:	d02b      	beq.n	900086e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008690:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008694:	d820      	bhi.n	900086d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000869a:	d012      	beq.n	900086c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
9000869c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
900086a0:	d81a      	bhi.n	900086d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900086a2:	2b00      	cmp	r3, #0
900086a4:	d022      	beq.n	900086ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
900086a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900086aa:	d115      	bne.n	900086d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086b0:	3308      	adds	r3, #8
900086b2:	2100      	movs	r1, #0
900086b4:	4618      	mov	r0, r3
900086b6:	f000 fe57 	bl	90009368 <RCCEx_PLL2_Config>
900086ba:	4603      	mov	r3, r0
900086bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900086c0:	e015      	b.n	900086ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900086c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086c6:	3328      	adds	r3, #40	@ 0x28
900086c8:	2102      	movs	r1, #2
900086ca:	4618      	mov	r0, r3
900086cc:	f000 fefe 	bl	900094cc <RCCEx_PLL3_Config>
900086d0:	4603      	mov	r3, r0
900086d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900086d6:	e00a      	b.n	900086ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900086d8:	2301      	movs	r3, #1
900086da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086de:	e006      	b.n	900086ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900086e0:	bf00      	nop
900086e2:	e004      	b.n	900086ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900086e4:	bf00      	nop
900086e6:	e002      	b.n	900086ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900086e8:	bf00      	nop
900086ea:	e000      	b.n	900086ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900086ec:	bf00      	nop
    }

    if (ret == HAL_OK)
900086ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086f2:	2b00      	cmp	r3, #0
900086f4:	d10e      	bne.n	90008714 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
900086f6:	4b06      	ldr	r3, [pc, #24]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900086fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
900086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008706:	4a02      	ldr	r2, [pc, #8]	@ (90008710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008708:	430b      	orrs	r3, r1
9000870a:	6593      	str	r3, [r2, #88]	@ 0x58
9000870c:	e006      	b.n	9000871c <HAL_RCCEx_PeriphCLKConfig+0xd44>
9000870e:	bf00      	nop
90008710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000871c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008720:	e9d3 2300 	ldrd	r2, r3, [r3]
90008724:	f002 0380 	and.w	r3, r2, #128	@ 0x80
90008728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
9000872c:	2300      	movs	r3, #0
9000872e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
90008732:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
90008736:	460b      	mov	r3, r1
90008738:	4313      	orrs	r3, r2
9000873a:	d055      	beq.n	900087e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
9000873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008744:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008748:	d033      	beq.n	900087b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
9000874a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
9000874e:	d82c      	bhi.n	900087aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008754:	d02f      	beq.n	900087b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000875a:	d826      	bhi.n	900087aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000875c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008760:	d02b      	beq.n	900087ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
90008762:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008766:	d820      	bhi.n	900087aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000876c:	d012      	beq.n	90008794 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
9000876e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008772:	d81a      	bhi.n	900087aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008774:	2b00      	cmp	r3, #0
90008776:	d022      	beq.n	900087be <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
9000877c:	d115      	bne.n	900087aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008782:	3308      	adds	r3, #8
90008784:	2100      	movs	r1, #0
90008786:	4618      	mov	r0, r3
90008788:	f000 fdee 	bl	90009368 <RCCEx_PLL2_Config>
9000878c:	4603      	mov	r3, r0
9000878e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008792:	e015      	b.n	900087c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008798:	3328      	adds	r3, #40	@ 0x28
9000879a:	2102      	movs	r1, #2
9000879c:	4618      	mov	r0, r3
9000879e:	f000 fe95 	bl	900094cc <RCCEx_PLL3_Config>
900087a2:	4603      	mov	r3, r0
900087a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
900087a8:	e00a      	b.n	900087c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900087aa:	2301      	movs	r3, #1
900087ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900087b0:	e006      	b.n	900087c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900087b2:	bf00      	nop
900087b4:	e004      	b.n	900087c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900087b6:	bf00      	nop
900087b8:	e002      	b.n	900087c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900087ba:	bf00      	nop
900087bc:	e000      	b.n	900087c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900087be:	bf00      	nop
    }

    if (ret == HAL_OK)
900087c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087c4:	2b00      	cmp	r3, #0
900087c6:	d10b      	bne.n	900087e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
900087c8:	4ba1      	ldr	r3, [pc, #644]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900087ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900087cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
900087d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900087d8:	4a9d      	ldr	r2, [pc, #628]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900087da:	430b      	orrs	r3, r1
900087dc:	6593      	str	r3, [r2, #88]	@ 0x58
900087de:	e003      	b.n	900087e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
900087e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
900087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
900087f0:	f002 0308 	and.w	r3, r2, #8
900087f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
900087f8:	2300      	movs	r3, #0
900087fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
900087fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008802:	460b      	mov	r3, r1
90008804:	4313      	orrs	r3, r2
90008806:	d01e      	beq.n	90008846 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90008808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000880c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008814:	d10c      	bne.n	90008830 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000881a:	3328      	adds	r3, #40	@ 0x28
9000881c:	2102      	movs	r1, #2
9000881e:	4618      	mov	r0, r3
90008820:	f000 fe54 	bl	900094cc <RCCEx_PLL3_Config>
90008824:	4603      	mov	r3, r0
90008826:	2b00      	cmp	r3, #0
90008828:	d002      	beq.n	90008830 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
9000882a:	2301      	movs	r3, #1
9000882c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008830:	4b87      	ldr	r3, [pc, #540]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008834:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000883c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008840:	4a83      	ldr	r2, [pc, #524]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008842:	430b      	orrs	r3, r1
90008844:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000884a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000884e:	f002 0310 	and.w	r3, r2, #16
90008852:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90008856:	2300      	movs	r3, #0
90008858:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
9000885c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008860:	460b      	mov	r3, r1
90008862:	4313      	orrs	r3, r2
90008864:	d01e      	beq.n	900088a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000886a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000886e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008872:	d10c      	bne.n	9000888e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008878:	3328      	adds	r3, #40	@ 0x28
9000887a:	2102      	movs	r1, #2
9000887c:	4618      	mov	r0, r3
9000887e:	f000 fe25 	bl	900094cc <RCCEx_PLL3_Config>
90008882:	4603      	mov	r3, r0
90008884:	2b00      	cmp	r3, #0
90008886:	d002      	beq.n	9000888e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008888:	2301      	movs	r3, #1
9000888a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000888e:	4b70      	ldr	r3, [pc, #448]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008892:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000889a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000889e:	4a6c      	ldr	r2, [pc, #432]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900088a0:	430b      	orrs	r3, r1
900088a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
900088a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
900088ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
900088b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
900088b4:	2300      	movs	r3, #0
900088b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
900088ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
900088be:	460b      	mov	r3, r1
900088c0:	4313      	orrs	r3, r2
900088c2:	d03e      	beq.n	90008942 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
900088c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
900088cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900088d0:	d022      	beq.n	90008918 <HAL_RCCEx_PeriphCLKConfig+0xf40>
900088d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900088d6:	d81b      	bhi.n	90008910 <HAL_RCCEx_PeriphCLKConfig+0xf38>
900088d8:	2b00      	cmp	r3, #0
900088da:	d003      	beq.n	900088e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
900088dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900088e0:	d00b      	beq.n	900088fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
900088e2:	e015      	b.n	90008910 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900088e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088e8:	3308      	adds	r3, #8
900088ea:	2100      	movs	r1, #0
900088ec:	4618      	mov	r0, r3
900088ee:	f000 fd3b 	bl	90009368 <RCCEx_PLL2_Config>
900088f2:	4603      	mov	r3, r0
900088f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
900088f8:	e00f      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088fe:	3328      	adds	r3, #40	@ 0x28
90008900:	2102      	movs	r1, #2
90008902:	4618      	mov	r0, r3
90008904:	f000 fde2 	bl	900094cc <RCCEx_PLL3_Config>
90008908:	4603      	mov	r3, r0
9000890a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
9000890e:	e004      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008910:	2301      	movs	r3, #1
90008912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008916:	e000      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008918:	bf00      	nop
    }

    if (ret == HAL_OK)
9000891a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000891e:	2b00      	cmp	r3, #0
90008920:	d10b      	bne.n	9000893a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008922:	4b4b      	ldr	r3, [pc, #300]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008926:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
9000892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000892e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008932:	4a47      	ldr	r2, [pc, #284]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008934:	430b      	orrs	r3, r1
90008936:	6593      	str	r3, [r2, #88]	@ 0x58
90008938:	e003      	b.n	90008942 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000893a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000893e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008946:	e9d3 2300 	ldrd	r2, r3, [r3]
9000894a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
9000894e:	67bb      	str	r3, [r7, #120]	@ 0x78
90008950:	2300      	movs	r3, #0
90008952:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008954:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008958:	460b      	mov	r3, r1
9000895a:	4313      	orrs	r3, r2
9000895c:	d03b      	beq.n	900089d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
9000895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008966:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000896a:	d01f      	beq.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
9000896c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008970:	d818      	bhi.n	900089a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008976:	d003      	beq.n	90008980 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008978:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000897c:	d007      	beq.n	9000898e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
9000897e:	e011      	b.n	900089a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008980:	4b33      	ldr	r3, [pc, #204]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008984:	4a32      	ldr	r2, [pc, #200]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000898a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
9000898c:	e00f      	b.n	900089ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000898e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008992:	3328      	adds	r3, #40	@ 0x28
90008994:	2101      	movs	r1, #1
90008996:	4618      	mov	r0, r3
90008998:	f000 fd98 	bl	900094cc <RCCEx_PLL3_Config>
9000899c:	4603      	mov	r3, r0
9000899e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
900089a2:	e004      	b.n	900089ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900089a4:	2301      	movs	r3, #1
900089a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900089aa:	e000      	b.n	900089ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
900089ac:	bf00      	nop
    }

    if (ret == HAL_OK)
900089ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089b2:	2b00      	cmp	r3, #0
900089b4:	d10b      	bne.n	900089ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
900089b6:	4b26      	ldr	r3, [pc, #152]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900089ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
900089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900089c6:	4a22      	ldr	r2, [pc, #136]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089c8:	430b      	orrs	r3, r1
900089ca:	6553      	str	r3, [r2, #84]	@ 0x54
900089cc:	e003      	b.n	900089d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
900089ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
900089d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089da:	e9d3 2300 	ldrd	r2, r3, [r3]
900089de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
900089e2:	673b      	str	r3, [r7, #112]	@ 0x70
900089e4:	2300      	movs	r3, #0
900089e6:	677b      	str	r3, [r7, #116]	@ 0x74
900089e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
900089ec:	460b      	mov	r3, r1
900089ee:	4313      	orrs	r3, r2
900089f0:	d034      	beq.n	90008a5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
900089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900089f8:	2b00      	cmp	r3, #0
900089fa:	d003      	beq.n	90008a04 <HAL_RCCEx_PeriphCLKConfig+0x102c>
900089fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008a00:	d007      	beq.n	90008a12 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008a02:	e011      	b.n	90008a28 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008a04:	4b12      	ldr	r3, [pc, #72]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008a08:	4a11      	ldr	r2, [pc, #68]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008a10:	e00e      	b.n	90008a30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a16:	3308      	adds	r3, #8
90008a18:	2102      	movs	r1, #2
90008a1a:	4618      	mov	r0, r3
90008a1c:	f000 fca4 	bl	90009368 <RCCEx_PLL2_Config>
90008a20:	4603      	mov	r3, r0
90008a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008a26:	e003      	b.n	90008a30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008a28:	2301      	movs	r3, #1
90008a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a34:	2b00      	cmp	r3, #0
90008a36:	d10d      	bne.n	90008a54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008a38:	4b05      	ldr	r3, [pc, #20]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008a3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008a46:	4a02      	ldr	r2, [pc, #8]	@ (90008a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a48:	430b      	orrs	r3, r1
90008a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008a4c:	e006      	b.n	90008a5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008a4e:	bf00      	nop
90008a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008a68:	66bb      	str	r3, [r7, #104]	@ 0x68
90008a6a:	2300      	movs	r3, #0
90008a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008a6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008a72:	460b      	mov	r3, r1
90008a74:	4313      	orrs	r3, r2
90008a76:	d00c      	beq.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a7c:	3328      	adds	r3, #40	@ 0x28
90008a7e:	2102      	movs	r1, #2
90008a80:	4618      	mov	r0, r3
90008a82:	f000 fd23 	bl	900094cc <RCCEx_PLL3_Config>
90008a86:	4603      	mov	r3, r0
90008a88:	2b00      	cmp	r3, #0
90008a8a:	d002      	beq.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008a8c:	2301      	movs	r3, #1
90008a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008a9e:	663b      	str	r3, [r7, #96]	@ 0x60
90008aa0:	2300      	movs	r3, #0
90008aa2:	667b      	str	r3, [r7, #100]	@ 0x64
90008aa4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008aa8:	460b      	mov	r3, r1
90008aaa:	4313      	orrs	r3, r2
90008aac:	d038      	beq.n	90008b20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008aba:	d018      	beq.n	90008aee <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008abc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008ac0:	d811      	bhi.n	90008ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008ac6:	d014      	beq.n	90008af2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008acc:	d80b      	bhi.n	90008ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008ace:	2b00      	cmp	r3, #0
90008ad0:	d011      	beq.n	90008af6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008ad6:	d106      	bne.n	90008ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008ad8:	4bc3      	ldr	r3, [pc, #780]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008adc:	4ac2      	ldr	r2, [pc, #776]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008ae4:	e008      	b.n	90008af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008ae6:	2301      	movs	r3, #1
90008ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008aec:	e004      	b.n	90008af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008aee:	bf00      	nop
90008af0:	e002      	b.n	90008af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008af2:	bf00      	nop
90008af4:	e000      	b.n	90008af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008af6:	bf00      	nop
    }

    if (ret == HAL_OK)
90008af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008afc:	2b00      	cmp	r3, #0
90008afe:	d10b      	bne.n	90008b18 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008b00:	4bb9      	ldr	r3, [pc, #740]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008b04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008b10:	4ab5      	ldr	r2, [pc, #724]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b12:	430b      	orrs	r3, r1
90008b14:	6553      	str	r3, [r2, #84]	@ 0x54
90008b16:	e003      	b.n	90008b20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
90008b2e:	2300      	movs	r3, #0
90008b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008b32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008b36:	460b      	mov	r3, r1
90008b38:	4313      	orrs	r3, r2
90008b3a:	d009      	beq.n	90008b50 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008b3c:	4baa      	ldr	r3, [pc, #680]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008b4a:	4aa7      	ldr	r2, [pc, #668]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b4c:	430b      	orrs	r3, r1
90008b4e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008b5c:	653b      	str	r3, [r7, #80]	@ 0x50
90008b5e:	2300      	movs	r3, #0
90008b60:	657b      	str	r3, [r7, #84]	@ 0x54
90008b62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008b66:	460b      	mov	r3, r1
90008b68:	4313      	orrs	r3, r2
90008b6a:	d00a      	beq.n	90008b82 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008b6c:	4b9e      	ldr	r3, [pc, #632]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b6e:	691b      	ldr	r3, [r3, #16]
90008b70:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008b7c:	4a9a      	ldr	r2, [pc, #616]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008b7e:	430b      	orrs	r3, r1
90008b80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b8a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
90008b90:	2300      	movs	r3, #0
90008b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008b94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008b98:	460b      	mov	r3, r1
90008b9a:	4313      	orrs	r3, r2
90008b9c:	d009      	beq.n	90008bb2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008b9e:	4b92      	ldr	r3, [pc, #584]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008ba2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008bac:	4a8e      	ldr	r2, [pc, #568]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bae:	430b      	orrs	r3, r1
90008bb0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008bbe:	643b      	str	r3, [r7, #64]	@ 0x40
90008bc0:	2300      	movs	r3, #0
90008bc2:	647b      	str	r3, [r7, #68]	@ 0x44
90008bc4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008bc8:	460b      	mov	r3, r1
90008bca:	4313      	orrs	r3, r2
90008bcc:	d00e      	beq.n	90008bec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008bce:	4b86      	ldr	r3, [pc, #536]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bd0:	691b      	ldr	r3, [r3, #16]
90008bd2:	4a85      	ldr	r2, [pc, #532]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008bd8:	6113      	str	r3, [r2, #16]
90008bda:	4b83      	ldr	r3, [pc, #524]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bdc:	6919      	ldr	r1, [r3, #16]
90008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008be2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008be6:	4a80      	ldr	r2, [pc, #512]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008be8:	430b      	orrs	r3, r1
90008bea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bf4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
90008bfa:	2300      	movs	r3, #0
90008bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008bfe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008c02:	460b      	mov	r3, r1
90008c04:	4313      	orrs	r3, r2
90008c06:	d009      	beq.n	90008c1c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008c08:	4b77      	ldr	r3, [pc, #476]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008c0c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c16:	4a74      	ldr	r2, [pc, #464]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c18:	430b      	orrs	r3, r1
90008c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c24:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90008c28:	633b      	str	r3, [r7, #48]	@ 0x30
90008c2a:	2300      	movs	r3, #0
90008c2c:	637b      	str	r3, [r7, #52]	@ 0x34
90008c2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90008c32:	460b      	mov	r3, r1
90008c34:	4313      	orrs	r3, r2
90008c36:	d00a      	beq.n	90008c4e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008c38:	4b6b      	ldr	r3, [pc, #428]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c3c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90008c48:	4a67      	ldr	r2, [pc, #412]	@ (90008de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c4a:	430b      	orrs	r3, r1
90008c4c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c56:	2100      	movs	r1, #0
90008c58:	62b9      	str	r1, [r7, #40]	@ 0x28
90008c5a:	f003 0301 	and.w	r3, r3, #1
90008c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
90008c60:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90008c64:	460b      	mov	r3, r1
90008c66:	4313      	orrs	r3, r2
90008c68:	d011      	beq.n	90008c8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c6e:	3308      	adds	r3, #8
90008c70:	2100      	movs	r1, #0
90008c72:	4618      	mov	r0, r3
90008c74:	f000 fb78 	bl	90009368 <RCCEx_PLL2_Config>
90008c78:	4603      	mov	r3, r0
90008c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c82:	2b00      	cmp	r3, #0
90008c84:	d003      	beq.n	90008c8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c96:	2100      	movs	r1, #0
90008c98:	6239      	str	r1, [r7, #32]
90008c9a:	f003 0302 	and.w	r3, r3, #2
90008c9e:	627b      	str	r3, [r7, #36]	@ 0x24
90008ca0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008ca4:	460b      	mov	r3, r1
90008ca6:	4313      	orrs	r3, r2
90008ca8:	d011      	beq.n	90008cce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cae:	3308      	adds	r3, #8
90008cb0:	2101      	movs	r1, #1
90008cb2:	4618      	mov	r0, r3
90008cb4:	f000 fb58 	bl	90009368 <RCCEx_PLL2_Config>
90008cb8:	4603      	mov	r3, r0
90008cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008cc2:	2b00      	cmp	r3, #0
90008cc4:	d003      	beq.n	90008cce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cd6:	2100      	movs	r1, #0
90008cd8:	61b9      	str	r1, [r7, #24]
90008cda:	f003 0304 	and.w	r3, r3, #4
90008cde:	61fb      	str	r3, [r7, #28]
90008ce0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008ce4:	460b      	mov	r3, r1
90008ce6:	4313      	orrs	r3, r2
90008ce8:	d011      	beq.n	90008d0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cee:	3308      	adds	r3, #8
90008cf0:	2102      	movs	r1, #2
90008cf2:	4618      	mov	r0, r3
90008cf4:	f000 fb38 	bl	90009368 <RCCEx_PLL2_Config>
90008cf8:	4603      	mov	r3, r0
90008cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d02:	2b00      	cmp	r3, #0
90008d04:	d003      	beq.n	90008d0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d16:	2100      	movs	r1, #0
90008d18:	6139      	str	r1, [r7, #16]
90008d1a:	f003 0308 	and.w	r3, r3, #8
90008d1e:	617b      	str	r3, [r7, #20]
90008d20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008d24:	460b      	mov	r3, r1
90008d26:	4313      	orrs	r3, r2
90008d28:	d011      	beq.n	90008d4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d2e:	3328      	adds	r3, #40	@ 0x28
90008d30:	2100      	movs	r1, #0
90008d32:	4618      	mov	r0, r3
90008d34:	f000 fbca 	bl	900094cc <RCCEx_PLL3_Config>
90008d38:	4603      	mov	r3, r0
90008d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90008d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d42:	2b00      	cmp	r3, #0
90008d44:	d003      	beq.n	90008d4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d56:	2100      	movs	r1, #0
90008d58:	60b9      	str	r1, [r7, #8]
90008d5a:	f003 0310 	and.w	r3, r3, #16
90008d5e:	60fb      	str	r3, [r7, #12]
90008d60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008d64:	460b      	mov	r3, r1
90008d66:	4313      	orrs	r3, r2
90008d68:	d011      	beq.n	90008d8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d6e:	3328      	adds	r3, #40	@ 0x28
90008d70:	2101      	movs	r1, #1
90008d72:	4618      	mov	r0, r3
90008d74:	f000 fbaa 	bl	900094cc <RCCEx_PLL3_Config>
90008d78:	4603      	mov	r3, r0
90008d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d82:	2b00      	cmp	r3, #0
90008d84:	d003      	beq.n	90008d8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d96:	2100      	movs	r1, #0
90008d98:	6039      	str	r1, [r7, #0]
90008d9a:	f003 0320 	and.w	r3, r3, #32
90008d9e:	607b      	str	r3, [r7, #4]
90008da0:	e9d7 1200 	ldrd	r1, r2, [r7]
90008da4:	460b      	mov	r3, r1
90008da6:	4313      	orrs	r3, r2
90008da8:	d011      	beq.n	90008dce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dae:	3328      	adds	r3, #40	@ 0x28
90008db0:	2102      	movs	r1, #2
90008db2:	4618      	mov	r0, r3
90008db4:	f000 fb8a 	bl	900094cc <RCCEx_PLL3_Config>
90008db8:	4603      	mov	r3, r0
90008dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dc2:	2b00      	cmp	r3, #0
90008dc4:	d003      	beq.n	90008dce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90008dce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90008dd2:	2b00      	cmp	r3, #0
90008dd4:	d101      	bne.n	90008dda <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008dd6:	2300      	movs	r3, #0
90008dd8:	e000      	b.n	90008ddc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008dda:	2301      	movs	r3, #1
}
90008ddc:	4618      	mov	r0, r3
90008dde:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90008de2:	46bd      	mov	sp, r7
90008de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90008de8:	58024400 	.word	0x58024400

90008dec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90008dec:	b580      	push	{r7, lr}
90008dee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90008df0:	f7fe fd96 	bl	90007920 <HAL_RCC_GetHCLKFreq>
90008df4:	4602      	mov	r2, r0
90008df6:	4b06      	ldr	r3, [pc, #24]	@ (90008e10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90008df8:	6a1b      	ldr	r3, [r3, #32]
90008dfa:	091b      	lsrs	r3, r3, #4
90008dfc:	f003 0307 	and.w	r3, r3, #7
90008e00:	4904      	ldr	r1, [pc, #16]	@ (90008e14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90008e02:	5ccb      	ldrb	r3, [r1, r3]
90008e04:	f003 031f 	and.w	r3, r3, #31
90008e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90008e0c:	4618      	mov	r0, r3
90008e0e:	bd80      	pop	{r7, pc}
90008e10:	58024400 	.word	0x58024400
90008e14:	9000cdac 	.word	0x9000cdac

90008e18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90008e18:	b480      	push	{r7}
90008e1a:	b089      	sub	sp, #36	@ 0x24
90008e1c:	af00      	add	r7, sp, #0
90008e1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90008e20:	4ba1      	ldr	r3, [pc, #644]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008e24:	f003 0303 	and.w	r3, r3, #3
90008e28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90008e2a:	4b9f      	ldr	r3, [pc, #636]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008e2e:	0b1b      	lsrs	r3, r3, #12
90008e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90008e34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90008e36:	4b9c      	ldr	r3, [pc, #624]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008e3a:	091b      	lsrs	r3, r3, #4
90008e3c:	f003 0301 	and.w	r3, r3, #1
90008e40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90008e42:	4b99      	ldr	r3, [pc, #612]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90008e46:	08db      	lsrs	r3, r3, #3
90008e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
90008e4c:	693a      	ldr	r2, [r7, #16]
90008e4e:	fb02 f303 	mul.w	r3, r2, r3
90008e52:	ee07 3a90 	vmov	s15, r3
90008e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008e5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90008e5e:	697b      	ldr	r3, [r7, #20]
90008e60:	2b00      	cmp	r3, #0
90008e62:	f000 8111 	beq.w	90009088 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90008e66:	69bb      	ldr	r3, [r7, #24]
90008e68:	2b02      	cmp	r3, #2
90008e6a:	f000 8083 	beq.w	90008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90008e6e:	69bb      	ldr	r3, [r7, #24]
90008e70:	2b02      	cmp	r3, #2
90008e72:	f200 80a1 	bhi.w	90008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90008e76:	69bb      	ldr	r3, [r7, #24]
90008e78:	2b00      	cmp	r3, #0
90008e7a:	d003      	beq.n	90008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90008e7c:	69bb      	ldr	r3, [r7, #24]
90008e7e:	2b01      	cmp	r3, #1
90008e80:	d056      	beq.n	90008f30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90008e82:	e099      	b.n	90008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008e84:	4b88      	ldr	r3, [pc, #544]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e86:	681b      	ldr	r3, [r3, #0]
90008e88:	f003 0320 	and.w	r3, r3, #32
90008e8c:	2b00      	cmp	r3, #0
90008e8e:	d02d      	beq.n	90008eec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90008e90:	4b85      	ldr	r3, [pc, #532]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008e92:	681b      	ldr	r3, [r3, #0]
90008e94:	08db      	lsrs	r3, r3, #3
90008e96:	f003 0303 	and.w	r3, r3, #3
90008e9a:	4a84      	ldr	r2, [pc, #528]	@ (900090ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90008e9c:	fa22 f303 	lsr.w	r3, r2, r3
90008ea0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008ea2:	68bb      	ldr	r3, [r7, #8]
90008ea4:	ee07 3a90 	vmov	s15, r3
90008ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008eac:	697b      	ldr	r3, [r7, #20]
90008eae:	ee07 3a90 	vmov	s15, r3
90008eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008eba:	4b7b      	ldr	r3, [pc, #492]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008ec2:	ee07 3a90 	vmov	s15, r3
90008ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008eca:	ed97 6a03 	vldr	s12, [r7, #12]
90008ece:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
90008ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
90008eea:	e087      	b.n	90008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008eec:	697b      	ldr	r3, [r7, #20]
90008eee:	ee07 3a90 	vmov	s15, r3
90008ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008ef6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90008efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008efe:	4b6a      	ldr	r3, [pc, #424]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f06:	ee07 3a90 	vmov	s15, r3
90008f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f0e:	ed97 6a03 	vldr	s12, [r7, #12]
90008f12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008f26:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008f2e:	e065      	b.n	90008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008f30:	697b      	ldr	r3, [r7, #20]
90008f32:	ee07 3a90 	vmov	s15, r3
90008f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900090b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90008f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f42:	4b59      	ldr	r3, [pc, #356]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f4a:	ee07 3a90 	vmov	s15, r3
90008f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f52:	ed97 6a03 	vldr	s12, [r7, #12]
90008f56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008f72:	e043      	b.n	90008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008f74:	697b      	ldr	r3, [r7, #20]
90008f76:	ee07 3a90 	vmov	s15, r3
90008f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900090bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
90008f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f86:	4b48      	ldr	r3, [pc, #288]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f8e:	ee07 3a90 	vmov	s15, r3
90008f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f96:	ed97 6a03 	vldr	s12, [r7, #12]
90008f9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008fae:	ee67 7a27 	vmul.f32	s15, s14, s15
90008fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008fb6:	e021      	b.n	90008ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008fb8:	697b      	ldr	r3, [r7, #20]
90008fba:	ee07 3a90 	vmov	s15, r3
90008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008fc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900090b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90008fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008fca:	4b37      	ldr	r3, [pc, #220]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008fd2:	ee07 3a90 	vmov	s15, r3
90008fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008fda:	ed97 6a03 	vldr	s12, [r7, #12]
90008fde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
90008ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008ffa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90008ffc:	4b2a      	ldr	r3, [pc, #168]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009000:	0a5b      	lsrs	r3, r3, #9
90009002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009006:	ee07 3a90 	vmov	s15, r3
9000900a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000900e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009012:	ee37 7a87 	vadd.f32	s14, s15, s14
90009016:	edd7 6a07 	vldr	s13, [r7, #28]
9000901a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000901e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009022:	ee17 2a90 	vmov	r2, s15
90009026:	687b      	ldr	r3, [r7, #4]
90009028:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000902a:	4b1f      	ldr	r3, [pc, #124]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000902c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000902e:	0c1b      	lsrs	r3, r3, #16
90009030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009034:	ee07 3a90 	vmov	s15, r3
90009038:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000903c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009040:	ee37 7a87 	vadd.f32	s14, s15, s14
90009044:	edd7 6a07 	vldr	s13, [r7, #28]
90009048:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000904c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009050:	ee17 2a90 	vmov	r2, s15
90009054:	687b      	ldr	r3, [r7, #4]
90009056:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90009058:	4b13      	ldr	r3, [pc, #76]	@ (900090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000905a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000905c:	0e1b      	lsrs	r3, r3, #24
9000905e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009062:	ee07 3a90 	vmov	s15, r3
90009066:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000906a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000906e:	ee37 7a87 	vadd.f32	s14, s15, s14
90009072:	edd7 6a07 	vldr	s13, [r7, #28]
90009076:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000907a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000907e:	ee17 2a90 	vmov	r2, s15
90009082:	687b      	ldr	r3, [r7, #4]
90009084:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
90009086:	e008      	b.n	9000909a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
90009088:	687b      	ldr	r3, [r7, #4]
9000908a:	2200      	movs	r2, #0
9000908c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
9000908e:	687b      	ldr	r3, [r7, #4]
90009090:	2200      	movs	r2, #0
90009092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90009094:	687b      	ldr	r3, [r7, #4]
90009096:	2200      	movs	r2, #0
90009098:	609a      	str	r2, [r3, #8]
}
9000909a:	bf00      	nop
9000909c:	3724      	adds	r7, #36	@ 0x24
9000909e:	46bd      	mov	sp, r7
900090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900090a4:	4770      	bx	lr
900090a6:	bf00      	nop
900090a8:	58024400 	.word	0x58024400
900090ac:	03d09000 	.word	0x03d09000
900090b0:	46000000 	.word	0x46000000
900090b4:	4c742400 	.word	0x4c742400
900090b8:	4a742400 	.word	0x4a742400
900090bc:	4bbebc20 	.word	0x4bbebc20

900090c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
900090c0:	b480      	push	{r7}
900090c2:	b089      	sub	sp, #36	@ 0x24
900090c4:	af00      	add	r7, sp, #0
900090c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900090c8:	4ba1      	ldr	r3, [pc, #644]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900090ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900090cc:	f003 0303 	and.w	r3, r3, #3
900090d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
900090d2:	4b9f      	ldr	r3, [pc, #636]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900090d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900090d6:	0d1b      	lsrs	r3, r3, #20
900090d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900090dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
900090de:	4b9c      	ldr	r3, [pc, #624]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900090e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900090e2:	0a1b      	lsrs	r3, r3, #8
900090e4:	f003 0301 	and.w	r3, r3, #1
900090e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
900090ea:	4b99      	ldr	r3, [pc, #612]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900090ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900090ee:	08db      	lsrs	r3, r3, #3
900090f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
900090f4:	693a      	ldr	r2, [r7, #16]
900090f6:	fb02 f303 	mul.w	r3, r2, r3
900090fa:	ee07 3a90 	vmov	s15, r3
900090fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90009106:	697b      	ldr	r3, [r7, #20]
90009108:	2b00      	cmp	r3, #0
9000910a:	f000 8111 	beq.w	90009330 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
9000910e:	69bb      	ldr	r3, [r7, #24]
90009110:	2b02      	cmp	r3, #2
90009112:	f000 8083 	beq.w	9000921c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90009116:	69bb      	ldr	r3, [r7, #24]
90009118:	2b02      	cmp	r3, #2
9000911a:	f200 80a1 	bhi.w	90009260 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
9000911e:	69bb      	ldr	r3, [r7, #24]
90009120:	2b00      	cmp	r3, #0
90009122:	d003      	beq.n	9000912c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90009124:	69bb      	ldr	r3, [r7, #24]
90009126:	2b01      	cmp	r3, #1
90009128:	d056      	beq.n	900091d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
9000912a:	e099      	b.n	90009260 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000912c:	4b88      	ldr	r3, [pc, #544]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000912e:	681b      	ldr	r3, [r3, #0]
90009130:	f003 0320 	and.w	r3, r3, #32
90009134:	2b00      	cmp	r3, #0
90009136:	d02d      	beq.n	90009194 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009138:	4b85      	ldr	r3, [pc, #532]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000913a:	681b      	ldr	r3, [r3, #0]
9000913c:	08db      	lsrs	r3, r3, #3
9000913e:	f003 0303 	and.w	r3, r3, #3
90009142:	4a84      	ldr	r2, [pc, #528]	@ (90009354 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90009144:	fa22 f303 	lsr.w	r3, r2, r3
90009148:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000914a:	68bb      	ldr	r3, [r7, #8]
9000914c:	ee07 3a90 	vmov	s15, r3
90009150:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009154:	697b      	ldr	r3, [r7, #20]
90009156:	ee07 3a90 	vmov	s15, r3
9000915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000915e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009162:	4b7b      	ldr	r3, [pc, #492]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009166:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000916a:	ee07 3a90 	vmov	s15, r3
9000916e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009172:	ed97 6a03 	vldr	s12, [r7, #12]
90009176:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000917a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000917e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009186:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000918a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000918e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009192:	e087      	b.n	900092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009194:	697b      	ldr	r3, [r7, #20]
90009196:	ee07 3a90 	vmov	s15, r3
9000919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000919e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 9000935c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
900091a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900091a6:	4b6a      	ldr	r3, [pc, #424]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900091a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900091aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091ae:	ee07 3a90 	vmov	s15, r3
900091b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900091b6:	ed97 6a03 	vldr	s12, [r7, #12]
900091ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900091be:	eec6 7a25 	vdiv.f32	s15, s12, s11
900091c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900091c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900091ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
900091ce:	ee67 7a27 	vmul.f32	s15, s14, s15
900091d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900091d6:	e065      	b.n	900092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900091d8:	697b      	ldr	r3, [r7, #20]
900091da:	ee07 3a90 	vmov	s15, r3
900091de:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
900091e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900091ea:	4b59      	ldr	r3, [pc, #356]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900091ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900091ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091f2:	ee07 3a90 	vmov	s15, r3
900091f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900091fa:	ed97 6a03 	vldr	s12, [r7, #12]
900091fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009202:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009206:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000920a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000920e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009212:	ee67 7a27 	vmul.f32	s15, s14, s15
90009216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000921a:	e043      	b.n	900092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000921c:	697b      	ldr	r3, [r7, #20]
9000921e:	ee07 3a90 	vmov	s15, r3
90009222:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009226:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
9000922a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000922e:	4b48      	ldr	r3, [pc, #288]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009232:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009236:	ee07 3a90 	vmov	s15, r3
9000923a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000923e:	ed97 6a03 	vldr	s12, [r7, #12]
90009242:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009246:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000924a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000924e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009252:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009256:	ee67 7a27 	vmul.f32	s15, s14, s15
9000925a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000925e:	e021      	b.n	900092a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009260:	697b      	ldr	r3, [r7, #20]
90009262:	ee07 3a90 	vmov	s15, r3
90009266:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000926a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000926e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009272:	4b37      	ldr	r3, [pc, #220]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009276:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000927a:	ee07 3a90 	vmov	s15, r3
9000927e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009282:	ed97 6a03 	vldr	s12, [r7, #12]
90009286:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000928a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000928e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009296:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000929a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000929e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900092a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
900092a4:	4b2a      	ldr	r3, [pc, #168]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900092a8:	0a5b      	lsrs	r3, r3, #9
900092aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900092ae:	ee07 3a90 	vmov	s15, r3
900092b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900092ba:	ee37 7a87 	vadd.f32	s14, s15, s14
900092be:	edd7 6a07 	vldr	s13, [r7, #28]
900092c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
900092c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900092ca:	ee17 2a90 	vmov	r2, s15
900092ce:	687b      	ldr	r3, [r7, #4]
900092d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
900092d2:	4b1f      	ldr	r3, [pc, #124]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900092d6:	0c1b      	lsrs	r3, r3, #16
900092d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900092dc:	ee07 3a90 	vmov	s15, r3
900092e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900092e8:	ee37 7a87 	vadd.f32	s14, s15, s14
900092ec:	edd7 6a07 	vldr	s13, [r7, #28]
900092f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
900092f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900092f8:	ee17 2a90 	vmov	r2, s15
900092fc:	687b      	ldr	r3, [r7, #4]
900092fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009300:	4b13      	ldr	r3, [pc, #76]	@ (90009350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009304:	0e1b      	lsrs	r3, r3, #24
90009306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000930a:	ee07 3a90 	vmov	s15, r3
9000930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009316:	ee37 7a87 	vadd.f32	s14, s15, s14
9000931a:	edd7 6a07 	vldr	s13, [r7, #28]
9000931e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009326:	ee17 2a90 	vmov	r2, s15
9000932a:	687b      	ldr	r3, [r7, #4]
9000932c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
9000932e:	e008      	b.n	90009342 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90009330:	687b      	ldr	r3, [r7, #4]
90009332:	2200      	movs	r2, #0
90009334:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90009336:	687b      	ldr	r3, [r7, #4]
90009338:	2200      	movs	r2, #0
9000933a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
9000933c:	687b      	ldr	r3, [r7, #4]
9000933e:	2200      	movs	r2, #0
90009340:	609a      	str	r2, [r3, #8]
}
90009342:	bf00      	nop
90009344:	3724      	adds	r7, #36	@ 0x24
90009346:	46bd      	mov	sp, r7
90009348:	f85d 7b04 	ldr.w	r7, [sp], #4
9000934c:	4770      	bx	lr
9000934e:	bf00      	nop
90009350:	58024400 	.word	0x58024400
90009354:	03d09000 	.word	0x03d09000
90009358:	46000000 	.word	0x46000000
9000935c:	4c742400 	.word	0x4c742400
90009360:	4a742400 	.word	0x4a742400
90009364:	4bbebc20 	.word	0x4bbebc20

90009368 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90009368:	b580      	push	{r7, lr}
9000936a:	b084      	sub	sp, #16
9000936c:	af00      	add	r7, sp, #0
9000936e:	6078      	str	r0, [r7, #4]
90009370:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009372:	2300      	movs	r3, #0
90009374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90009376:	4b53      	ldr	r3, [pc, #332]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000937a:	f003 0303 	and.w	r3, r3, #3
9000937e:	2b03      	cmp	r3, #3
90009380:	d101      	bne.n	90009386 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90009382:	2301      	movs	r3, #1
90009384:	e099      	b.n	900094ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
90009386:	4b4f      	ldr	r3, [pc, #316]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009388:	681b      	ldr	r3, [r3, #0]
9000938a:	4a4e      	ldr	r2, [pc, #312]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
9000938c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009392:	f7f9 fe93 	bl	900030bc <HAL_GetTick>
90009396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009398:	e008      	b.n	900093ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000939a:	f7f9 fe8f 	bl	900030bc <HAL_GetTick>
9000939e:	4602      	mov	r2, r0
900093a0:	68bb      	ldr	r3, [r7, #8]
900093a2:	1ad3      	subs	r3, r2, r3
900093a4:	2b02      	cmp	r3, #2
900093a6:	d901      	bls.n	900093ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
900093a8:	2303      	movs	r3, #3
900093aa:	e086      	b.n	900094ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
900093ac:	4b45      	ldr	r3, [pc, #276]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
900093ae:	681b      	ldr	r3, [r3, #0]
900093b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900093b4:	2b00      	cmp	r3, #0
900093b6:	d1f0      	bne.n	9000939a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
900093b8:	4b42      	ldr	r3, [pc, #264]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
900093ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900093bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900093c0:	687b      	ldr	r3, [r7, #4]
900093c2:	681b      	ldr	r3, [r3, #0]
900093c4:	031b      	lsls	r3, r3, #12
900093c6:	493f      	ldr	r1, [pc, #252]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
900093c8:	4313      	orrs	r3, r2
900093ca:	628b      	str	r3, [r1, #40]	@ 0x28
900093cc:	687b      	ldr	r3, [r7, #4]
900093ce:	685b      	ldr	r3, [r3, #4]
900093d0:	3b01      	subs	r3, #1
900093d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
900093d6:	687b      	ldr	r3, [r7, #4]
900093d8:	689b      	ldr	r3, [r3, #8]
900093da:	3b01      	subs	r3, #1
900093dc:	025b      	lsls	r3, r3, #9
900093de:	b29b      	uxth	r3, r3
900093e0:	431a      	orrs	r2, r3
900093e2:	687b      	ldr	r3, [r7, #4]
900093e4:	68db      	ldr	r3, [r3, #12]
900093e6:	3b01      	subs	r3, #1
900093e8:	041b      	lsls	r3, r3, #16
900093ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900093ee:	431a      	orrs	r2, r3
900093f0:	687b      	ldr	r3, [r7, #4]
900093f2:	691b      	ldr	r3, [r3, #16]
900093f4:	3b01      	subs	r3, #1
900093f6:	061b      	lsls	r3, r3, #24
900093f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900093fc:	4931      	ldr	r1, [pc, #196]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
900093fe:	4313      	orrs	r3, r2
90009400:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009402:	4b30      	ldr	r3, [pc, #192]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009406:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000940a:	687b      	ldr	r3, [r7, #4]
9000940c:	695b      	ldr	r3, [r3, #20]
9000940e:	492d      	ldr	r1, [pc, #180]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009410:	4313      	orrs	r3, r2
90009412:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009414:	4b2b      	ldr	r3, [pc, #172]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009418:	f023 0220 	bic.w	r2, r3, #32
9000941c:	687b      	ldr	r3, [r7, #4]
9000941e:	699b      	ldr	r3, [r3, #24]
90009420:	4928      	ldr	r1, [pc, #160]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009422:	4313      	orrs	r3, r2
90009424:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90009426:	4b27      	ldr	r3, [pc, #156]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000942a:	4a26      	ldr	r2, [pc, #152]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
9000942c:	f023 0310 	bic.w	r3, r3, #16
90009430:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90009432:	4b24      	ldr	r3, [pc, #144]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
90009436:	4b24      	ldr	r3, [pc, #144]	@ (900094c8 <RCCEx_PLL2_Config+0x160>)
90009438:	4013      	ands	r3, r2
9000943a:	687a      	ldr	r2, [r7, #4]
9000943c:	69d2      	ldr	r2, [r2, #28]
9000943e:	00d2      	lsls	r2, r2, #3
90009440:	4920      	ldr	r1, [pc, #128]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009442:	4313      	orrs	r3, r2
90009444:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90009446:	4b1f      	ldr	r3, [pc, #124]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000944a:	4a1e      	ldr	r2, [pc, #120]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
9000944c:	f043 0310 	orr.w	r3, r3, #16
90009450:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90009452:	683b      	ldr	r3, [r7, #0]
90009454:	2b00      	cmp	r3, #0
90009456:	d106      	bne.n	90009466 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90009458:	4b1a      	ldr	r3, [pc, #104]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
9000945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000945c:	4a19      	ldr	r2, [pc, #100]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
9000945e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
90009462:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009464:	e00f      	b.n	90009486 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90009466:	683b      	ldr	r3, [r7, #0]
90009468:	2b01      	cmp	r3, #1
9000946a:	d106      	bne.n	9000947a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000946c:	4b15      	ldr	r3, [pc, #84]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
9000946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009470:	4a14      	ldr	r2, [pc, #80]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
90009476:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009478:	e005      	b.n	90009486 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000947a:	4b12      	ldr	r3, [pc, #72]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
9000947c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000947e:	4a11      	ldr	r2, [pc, #68]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
90009484:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
90009486:	4b0f      	ldr	r3, [pc, #60]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
90009488:	681b      	ldr	r3, [r3, #0]
9000948a:	4a0e      	ldr	r2, [pc, #56]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
9000948c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009492:	f7f9 fe13 	bl	900030bc <HAL_GetTick>
90009496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009498:	e008      	b.n	900094ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000949a:	f7f9 fe0f 	bl	900030bc <HAL_GetTick>
9000949e:	4602      	mov	r2, r0
900094a0:	68bb      	ldr	r3, [r7, #8]
900094a2:	1ad3      	subs	r3, r2, r3
900094a4:	2b02      	cmp	r3, #2
900094a6:	d901      	bls.n	900094ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
900094a8:	2303      	movs	r3, #3
900094aa:	e006      	b.n	900094ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900094ac:	4b05      	ldr	r3, [pc, #20]	@ (900094c4 <RCCEx_PLL2_Config+0x15c>)
900094ae:	681b      	ldr	r3, [r3, #0]
900094b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900094b4:	2b00      	cmp	r3, #0
900094b6:	d0f0      	beq.n	9000949a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
900094b8:	7bfb      	ldrb	r3, [r7, #15]
}
900094ba:	4618      	mov	r0, r3
900094bc:	3710      	adds	r7, #16
900094be:	46bd      	mov	sp, r7
900094c0:	bd80      	pop	{r7, pc}
900094c2:	bf00      	nop
900094c4:	58024400 	.word	0x58024400
900094c8:	ffff0007 	.word	0xffff0007

900094cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
900094cc:	b580      	push	{r7, lr}
900094ce:	b084      	sub	sp, #16
900094d0:	af00      	add	r7, sp, #0
900094d2:	6078      	str	r0, [r7, #4]
900094d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900094d6:	2300      	movs	r3, #0
900094d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900094da:	4b53      	ldr	r3, [pc, #332]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900094dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900094de:	f003 0303 	and.w	r3, r3, #3
900094e2:	2b03      	cmp	r3, #3
900094e4:	d101      	bne.n	900094ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
900094e6:	2301      	movs	r3, #1
900094e8:	e099      	b.n	9000961e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
900094ea:	4b4f      	ldr	r3, [pc, #316]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900094ec:	681b      	ldr	r3, [r3, #0]
900094ee:	4a4e      	ldr	r2, [pc, #312]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900094f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
900094f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900094f6:	f7f9 fde1 	bl	900030bc <HAL_GetTick>
900094fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
900094fc:	e008      	b.n	90009510 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
900094fe:	f7f9 fddd 	bl	900030bc <HAL_GetTick>
90009502:	4602      	mov	r2, r0
90009504:	68bb      	ldr	r3, [r7, #8]
90009506:	1ad3      	subs	r3, r2, r3
90009508:	2b02      	cmp	r3, #2
9000950a:	d901      	bls.n	90009510 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000950c:	2303      	movs	r3, #3
9000950e:	e086      	b.n	9000961e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009510:	4b45      	ldr	r3, [pc, #276]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
90009512:	681b      	ldr	r3, [r3, #0]
90009514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009518:	2b00      	cmp	r3, #0
9000951a:	d1f0      	bne.n	900094fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000951c:	4b42      	ldr	r3, [pc, #264]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
9000951e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009520:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
90009524:	687b      	ldr	r3, [r7, #4]
90009526:	681b      	ldr	r3, [r3, #0]
90009528:	051b      	lsls	r3, r3, #20
9000952a:	493f      	ldr	r1, [pc, #252]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
9000952c:	4313      	orrs	r3, r2
9000952e:	628b      	str	r3, [r1, #40]	@ 0x28
90009530:	687b      	ldr	r3, [r7, #4]
90009532:	685b      	ldr	r3, [r3, #4]
90009534:	3b01      	subs	r3, #1
90009536:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000953a:	687b      	ldr	r3, [r7, #4]
9000953c:	689b      	ldr	r3, [r3, #8]
9000953e:	3b01      	subs	r3, #1
90009540:	025b      	lsls	r3, r3, #9
90009542:	b29b      	uxth	r3, r3
90009544:	431a      	orrs	r2, r3
90009546:	687b      	ldr	r3, [r7, #4]
90009548:	68db      	ldr	r3, [r3, #12]
9000954a:	3b01      	subs	r3, #1
9000954c:	041b      	lsls	r3, r3, #16
9000954e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009552:	431a      	orrs	r2, r3
90009554:	687b      	ldr	r3, [r7, #4]
90009556:	691b      	ldr	r3, [r3, #16]
90009558:	3b01      	subs	r3, #1
9000955a:	061b      	lsls	r3, r3, #24
9000955c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009560:	4931      	ldr	r1, [pc, #196]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
90009562:	4313      	orrs	r3, r2
90009564:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
90009566:	4b30      	ldr	r3, [pc, #192]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
90009568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000956a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
9000956e:	687b      	ldr	r3, [r7, #4]
90009570:	695b      	ldr	r3, [r3, #20]
90009572:	492d      	ldr	r1, [pc, #180]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
90009574:	4313      	orrs	r3, r2
90009576:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90009578:	4b2b      	ldr	r3, [pc, #172]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
9000957a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000957c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
90009580:	687b      	ldr	r3, [r7, #4]
90009582:	699b      	ldr	r3, [r3, #24]
90009584:	4928      	ldr	r1, [pc, #160]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
90009586:	4313      	orrs	r3, r2
90009588:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000958a:	4b27      	ldr	r3, [pc, #156]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
9000958c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000958e:	4a26      	ldr	r2, [pc, #152]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
90009590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
90009594:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
90009596:	4b24      	ldr	r3, [pc, #144]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
90009598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000959a:	4b24      	ldr	r3, [pc, #144]	@ (9000962c <RCCEx_PLL3_Config+0x160>)
9000959c:	4013      	ands	r3, r2
9000959e:	687a      	ldr	r2, [r7, #4]
900095a0:	69d2      	ldr	r2, [r2, #28]
900095a2:	00d2      	lsls	r2, r2, #3
900095a4:	4920      	ldr	r1, [pc, #128]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095a6:	4313      	orrs	r3, r2
900095a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
900095aa:	4b1f      	ldr	r3, [pc, #124]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095ae:	4a1e      	ldr	r2, [pc, #120]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900095b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900095b6:	683b      	ldr	r3, [r7, #0]
900095b8:	2b00      	cmp	r3, #0
900095ba:	d106      	bne.n	900095ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
900095bc:	4b1a      	ldr	r3, [pc, #104]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095c0:	4a19      	ldr	r2, [pc, #100]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
900095c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095c8:	e00f      	b.n	900095ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900095ca:	683b      	ldr	r3, [r7, #0]
900095cc:	2b01      	cmp	r3, #1
900095ce:	d106      	bne.n	900095de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
900095d0:	4b15      	ldr	r3, [pc, #84]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095d4:	4a14      	ldr	r2, [pc, #80]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
900095da:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095dc:	e005      	b.n	900095ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
900095de:	4b12      	ldr	r3, [pc, #72]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095e2:	4a11      	ldr	r2, [pc, #68]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
900095e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
900095ea:	4b0f      	ldr	r3, [pc, #60]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095ec:	681b      	ldr	r3, [r3, #0]
900095ee:	4a0e      	ldr	r2, [pc, #56]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
900095f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
900095f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900095f6:	f7f9 fd61 	bl	900030bc <HAL_GetTick>
900095fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
900095fc:	e008      	b.n	90009610 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
900095fe:	f7f9 fd5d 	bl	900030bc <HAL_GetTick>
90009602:	4602      	mov	r2, r0
90009604:	68bb      	ldr	r3, [r7, #8]
90009606:	1ad3      	subs	r3, r2, r3
90009608:	2b02      	cmp	r3, #2
9000960a:	d901      	bls.n	90009610 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
9000960c:	2303      	movs	r3, #3
9000960e:	e006      	b.n	9000961e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009610:	4b05      	ldr	r3, [pc, #20]	@ (90009628 <RCCEx_PLL3_Config+0x15c>)
90009612:	681b      	ldr	r3, [r3, #0]
90009614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009618:	2b00      	cmp	r3, #0
9000961a:	d0f0      	beq.n	900095fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
9000961c:	7bfb      	ldrb	r3, [r7, #15]
}
9000961e:	4618      	mov	r0, r3
90009620:	3710      	adds	r7, #16
90009622:	46bd      	mov	sp, r7
90009624:	bd80      	pop	{r7, pc}
90009626:	bf00      	nop
90009628:	58024400 	.word	0x58024400
9000962c:	ffff0007 	.word	0xffff0007

90009630 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90009630:	b580      	push	{r7, lr}
90009632:	b082      	sub	sp, #8
90009634:	af00      	add	r7, sp, #0
90009636:	6078      	str	r0, [r7, #4]
90009638:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000963a:	687b      	ldr	r3, [r7, #4]
9000963c:	2b00      	cmp	r3, #0
9000963e:	d101      	bne.n	90009644 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90009640:	2301      	movs	r3, #1
90009642:	e02b      	b.n	9000969c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
90009644:	687b      	ldr	r3, [r7, #4]
90009646:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000964a:	b2db      	uxtb	r3, r3
9000964c:	2b00      	cmp	r3, #0
9000964e:	d106      	bne.n	9000965e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90009650:	687b      	ldr	r3, [r7, #4]
90009652:	2200      	movs	r2, #0
90009654:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90009658:	6878      	ldr	r0, [r7, #4]
9000965a:	f000 f825 	bl	900096a8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000965e:	687b      	ldr	r3, [r7, #4]
90009660:	2202      	movs	r2, #2
90009662:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90009666:	687b      	ldr	r3, [r7, #4]
90009668:	681a      	ldr	r2, [r3, #0]
9000966a:	687b      	ldr	r3, [r7, #4]
9000966c:	3304      	adds	r3, #4
9000966e:	4619      	mov	r1, r3
90009670:	4610      	mov	r0, r2
90009672:	f001 fb51 	bl	9000ad18 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
90009676:	687b      	ldr	r3, [r7, #4]
90009678:	6818      	ldr	r0, [r3, #0]
9000967a:	687b      	ldr	r3, [r7, #4]
9000967c:	685b      	ldr	r3, [r3, #4]
9000967e:	461a      	mov	r2, r3
90009680:	6839      	ldr	r1, [r7, #0]
90009682:	f001 fba5 	bl	9000add0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
90009686:	4b07      	ldr	r3, [pc, #28]	@ (900096a4 <HAL_SDRAM_Init+0x74>)
90009688:	681b      	ldr	r3, [r3, #0]
9000968a:	4a06      	ldr	r2, [pc, #24]	@ (900096a4 <HAL_SDRAM_Init+0x74>)
9000968c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009690:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90009692:	687b      	ldr	r3, [r7, #4]
90009694:	2201      	movs	r2, #1
90009696:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000969a:	2300      	movs	r3, #0
}
9000969c:	4618      	mov	r0, r3
9000969e:	3708      	adds	r7, #8
900096a0:	46bd      	mov	sp, r7
900096a2:	bd80      	pop	{r7, pc}
900096a4:	52004000 	.word	0x52004000

900096a8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
900096a8:	b480      	push	{r7}
900096aa:	b083      	sub	sp, #12
900096ac:	af00      	add	r7, sp, #0
900096ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
900096b0:	bf00      	nop
900096b2:	370c      	adds	r7, #12
900096b4:	46bd      	mov	sp, r7
900096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900096ba:	4770      	bx	lr

900096bc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
900096bc:	b580      	push	{r7, lr}
900096be:	b086      	sub	sp, #24
900096c0:	af00      	add	r7, sp, #0
900096c2:	60f8      	str	r0, [r7, #12]
900096c4:	60b9      	str	r1, [r7, #8]
900096c6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
900096c8:	68fb      	ldr	r3, [r7, #12]
900096ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900096ce:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
900096d0:	7dfb      	ldrb	r3, [r7, #23]
900096d2:	2b02      	cmp	r3, #2
900096d4:	d101      	bne.n	900096da <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
900096d6:	2302      	movs	r3, #2
900096d8:	e021      	b.n	9000971e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
900096da:	7dfb      	ldrb	r3, [r7, #23]
900096dc:	2b01      	cmp	r3, #1
900096de:	d002      	beq.n	900096e6 <HAL_SDRAM_SendCommand+0x2a>
900096e0:	7dfb      	ldrb	r3, [r7, #23]
900096e2:	2b05      	cmp	r3, #5
900096e4:	d118      	bne.n	90009718 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900096e6:	68fb      	ldr	r3, [r7, #12]
900096e8:	2202      	movs	r2, #2
900096ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900096ee:	68fb      	ldr	r3, [r7, #12]
900096f0:	681b      	ldr	r3, [r3, #0]
900096f2:	687a      	ldr	r2, [r7, #4]
900096f4:	68b9      	ldr	r1, [r7, #8]
900096f6:	4618      	mov	r0, r3
900096f8:	f001 fbd4 	bl	9000aea4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900096fc:	68bb      	ldr	r3, [r7, #8]
900096fe:	681b      	ldr	r3, [r3, #0]
90009700:	2b02      	cmp	r3, #2
90009702:	d104      	bne.n	9000970e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009704:	68fb      	ldr	r3, [r7, #12]
90009706:	2205      	movs	r2, #5
90009708:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000970c:	e006      	b.n	9000971c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
9000970e:	68fb      	ldr	r3, [r7, #12]
90009710:	2201      	movs	r2, #1
90009712:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009716:	e001      	b.n	9000971c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
90009718:	2301      	movs	r3, #1
9000971a:	e000      	b.n	9000971e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
9000971c:	2300      	movs	r3, #0
}
9000971e:	4618      	mov	r0, r3
90009720:	3718      	adds	r7, #24
90009722:	46bd      	mov	sp, r7
90009724:	bd80      	pop	{r7, pc}

90009726 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90009726:	b580      	push	{r7, lr}
90009728:	b082      	sub	sp, #8
9000972a:	af00      	add	r7, sp, #0
9000972c:	6078      	str	r0, [r7, #4]
9000972e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90009730:	687b      	ldr	r3, [r7, #4]
90009732:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009736:	b2db      	uxtb	r3, r3
90009738:	2b02      	cmp	r3, #2
9000973a:	d101      	bne.n	90009740 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
9000973c:	2302      	movs	r3, #2
9000973e:	e016      	b.n	9000976e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90009740:	687b      	ldr	r3, [r7, #4]
90009742:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009746:	b2db      	uxtb	r3, r3
90009748:	2b01      	cmp	r3, #1
9000974a:	d10f      	bne.n	9000976c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000974c:	687b      	ldr	r3, [r7, #4]
9000974e:	2202      	movs	r2, #2
90009750:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
90009754:	687b      	ldr	r3, [r7, #4]
90009756:	681b      	ldr	r3, [r3, #0]
90009758:	6839      	ldr	r1, [r7, #0]
9000975a:	4618      	mov	r0, r3
9000975c:	f001 fbc6 	bl	9000aeec <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90009760:	687b      	ldr	r3, [r7, #4]
90009762:	2201      	movs	r2, #1
90009764:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
90009768:	2300      	movs	r3, #0
9000976a:	e000      	b.n	9000976e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
9000976c:	2301      	movs	r3, #1
}
9000976e:	4618      	mov	r0, r3
90009770:	3708      	adds	r7, #8
90009772:	46bd      	mov	sp, r7
90009774:	bd80      	pop	{r7, pc}

90009776 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
90009776:	b580      	push	{r7, lr}
90009778:	b082      	sub	sp, #8
9000977a:	af00      	add	r7, sp, #0
9000977c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
9000977e:	687b      	ldr	r3, [r7, #4]
90009780:	2b00      	cmp	r3, #0
90009782:	d101      	bne.n	90009788 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
90009784:	2301      	movs	r3, #1
90009786:	e049      	b.n	9000981c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90009788:	687b      	ldr	r3, [r7, #4]
9000978a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
9000978e:	b2db      	uxtb	r3, r3
90009790:	2b00      	cmp	r3, #0
90009792:	d106      	bne.n	900097a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90009794:	687b      	ldr	r3, [r7, #4]
90009796:	2200      	movs	r2, #0
90009798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
9000979c:	6878      	ldr	r0, [r7, #4]
9000979e:	f000 f89d 	bl	900098dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
900097a2:	687b      	ldr	r3, [r7, #4]
900097a4:	2202      	movs	r2, #2
900097a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
900097aa:	687b      	ldr	r3, [r7, #4]
900097ac:	681a      	ldr	r2, [r3, #0]
900097ae:	687b      	ldr	r3, [r7, #4]
900097b0:	3304      	adds	r3, #4
900097b2:	4619      	mov	r1, r3
900097b4:	4610      	mov	r0, r2
900097b6:	f000 f8a5 	bl	90009904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
900097ba:	687b      	ldr	r3, [r7, #4]
900097bc:	2201      	movs	r2, #1
900097be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900097c2:	687b      	ldr	r3, [r7, #4]
900097c4:	2201      	movs	r2, #1
900097c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900097ca:	687b      	ldr	r3, [r7, #4]
900097cc:	2201      	movs	r2, #1
900097ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900097d2:	687b      	ldr	r3, [r7, #4]
900097d4:	2201      	movs	r2, #1
900097d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900097da:	687b      	ldr	r3, [r7, #4]
900097dc:	2201      	movs	r2, #1
900097de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
900097e2:	687b      	ldr	r3, [r7, #4]
900097e4:	2201      	movs	r2, #1
900097e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
900097ea:	687b      	ldr	r3, [r7, #4]
900097ec:	2201      	movs	r2, #1
900097ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900097f2:	687b      	ldr	r3, [r7, #4]
900097f4:	2201      	movs	r2, #1
900097f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
900097fa:	687b      	ldr	r3, [r7, #4]
900097fc:	2201      	movs	r2, #1
900097fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009802:	687b      	ldr	r3, [r7, #4]
90009804:	2201      	movs	r2, #1
90009806:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000980a:	687b      	ldr	r3, [r7, #4]
9000980c:	2201      	movs	r2, #1
9000980e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009812:	687b      	ldr	r3, [r7, #4]
90009814:	2201      	movs	r2, #1
90009816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000981a:	2300      	movs	r3, #0
}
9000981c:	4618      	mov	r0, r3
9000981e:	3708      	adds	r7, #8
90009820:	46bd      	mov	sp, r7
90009822:	bd80      	pop	{r7, pc}

90009824 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009824:	b580      	push	{r7, lr}
90009826:	b082      	sub	sp, #8
90009828:	af00      	add	r7, sp, #0
9000982a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
9000982c:	687b      	ldr	r3, [r7, #4]
9000982e:	2202      	movs	r2, #2
90009830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90009834:	687b      	ldr	r3, [r7, #4]
90009836:	681b      	ldr	r3, [r3, #0]
90009838:	6a1a      	ldr	r2, [r3, #32]
9000983a:	f241 1311 	movw	r3, #4369	@ 0x1111
9000983e:	4013      	ands	r3, r2
90009840:	2b00      	cmp	r3, #0
90009842:	d10f      	bne.n	90009864 <HAL_TIM_PWM_DeInit+0x40>
90009844:	687b      	ldr	r3, [r7, #4]
90009846:	681b      	ldr	r3, [r3, #0]
90009848:	6a1a      	ldr	r2, [r3, #32]
9000984a:	f240 4344 	movw	r3, #1092	@ 0x444
9000984e:	4013      	ands	r3, r2
90009850:	2b00      	cmp	r3, #0
90009852:	d107      	bne.n	90009864 <HAL_TIM_PWM_DeInit+0x40>
90009854:	687b      	ldr	r3, [r7, #4]
90009856:	681b      	ldr	r3, [r3, #0]
90009858:	681a      	ldr	r2, [r3, #0]
9000985a:	687b      	ldr	r3, [r7, #4]
9000985c:	681b      	ldr	r3, [r3, #0]
9000985e:	f022 0201 	bic.w	r2, r2, #1
90009862:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
90009864:	6878      	ldr	r0, [r7, #4]
90009866:	f000 f843 	bl	900098f0 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
9000986a:	687b      	ldr	r3, [r7, #4]
9000986c:	2200      	movs	r2, #0
9000986e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009872:	687b      	ldr	r3, [r7, #4]
90009874:	2200      	movs	r2, #0
90009876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000987a:	687b      	ldr	r3, [r7, #4]
9000987c:	2200      	movs	r2, #0
9000987e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009882:	687b      	ldr	r3, [r7, #4]
90009884:	2200      	movs	r2, #0
90009886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000988a:	687b      	ldr	r3, [r7, #4]
9000988c:	2200      	movs	r2, #0
9000988e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009892:	687b      	ldr	r3, [r7, #4]
90009894:	2200      	movs	r2, #0
90009896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000989a:	687b      	ldr	r3, [r7, #4]
9000989c:	2200      	movs	r2, #0
9000989e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900098a2:	687b      	ldr	r3, [r7, #4]
900098a4:	2200      	movs	r2, #0
900098a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
900098aa:	687b      	ldr	r3, [r7, #4]
900098ac:	2200      	movs	r2, #0
900098ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
900098b2:	687b      	ldr	r3, [r7, #4]
900098b4:	2200      	movs	r2, #0
900098b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
900098ba:	687b      	ldr	r3, [r7, #4]
900098bc:	2200      	movs	r2, #0
900098be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
900098c2:	687b      	ldr	r3, [r7, #4]
900098c4:	2200      	movs	r2, #0
900098c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
900098ca:	687b      	ldr	r3, [r7, #4]
900098cc:	2200      	movs	r2, #0
900098ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
900098d2:	2300      	movs	r3, #0
}
900098d4:	4618      	mov	r0, r3
900098d6:	3708      	adds	r7, #8
900098d8:	46bd      	mov	sp, r7
900098da:	bd80      	pop	{r7, pc}

900098dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
900098dc:	b480      	push	{r7}
900098de:	b083      	sub	sp, #12
900098e0:	af00      	add	r7, sp, #0
900098e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
900098e4:	bf00      	nop
900098e6:	370c      	adds	r7, #12
900098e8:	46bd      	mov	sp, r7
900098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
900098ee:	4770      	bx	lr

900098f0 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
900098f0:	b480      	push	{r7}
900098f2:	b083      	sub	sp, #12
900098f4:	af00      	add	r7, sp, #0
900098f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
900098f8:	bf00      	nop
900098fa:	370c      	adds	r7, #12
900098fc:	46bd      	mov	sp, r7
900098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90009902:	4770      	bx	lr

90009904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009904:	b480      	push	{r7}
90009906:	b085      	sub	sp, #20
90009908:	af00      	add	r7, sp, #0
9000990a:	6078      	str	r0, [r7, #4]
9000990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
9000990e:	687b      	ldr	r3, [r7, #4]
90009910:	681b      	ldr	r3, [r3, #0]
90009912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009914:	687b      	ldr	r3, [r7, #4]
90009916:	4a43      	ldr	r2, [pc, #268]	@ (90009a24 <TIM_Base_SetConfig+0x120>)
90009918:	4293      	cmp	r3, r2
9000991a:	d013      	beq.n	90009944 <TIM_Base_SetConfig+0x40>
9000991c:	687b      	ldr	r3, [r7, #4]
9000991e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009922:	d00f      	beq.n	90009944 <TIM_Base_SetConfig+0x40>
90009924:	687b      	ldr	r3, [r7, #4]
90009926:	4a40      	ldr	r2, [pc, #256]	@ (90009a28 <TIM_Base_SetConfig+0x124>)
90009928:	4293      	cmp	r3, r2
9000992a:	d00b      	beq.n	90009944 <TIM_Base_SetConfig+0x40>
9000992c:	687b      	ldr	r3, [r7, #4]
9000992e:	4a3f      	ldr	r2, [pc, #252]	@ (90009a2c <TIM_Base_SetConfig+0x128>)
90009930:	4293      	cmp	r3, r2
90009932:	d007      	beq.n	90009944 <TIM_Base_SetConfig+0x40>
90009934:	687b      	ldr	r3, [r7, #4]
90009936:	4a3e      	ldr	r2, [pc, #248]	@ (90009a30 <TIM_Base_SetConfig+0x12c>)
90009938:	4293      	cmp	r3, r2
9000993a:	d003      	beq.n	90009944 <TIM_Base_SetConfig+0x40>
9000993c:	687b      	ldr	r3, [r7, #4]
9000993e:	4a3d      	ldr	r2, [pc, #244]	@ (90009a34 <TIM_Base_SetConfig+0x130>)
90009940:	4293      	cmp	r3, r2
90009942:	d108      	bne.n	90009956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90009944:	68fb      	ldr	r3, [r7, #12]
90009946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
9000994a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
9000994c:	683b      	ldr	r3, [r7, #0]
9000994e:	685b      	ldr	r3, [r3, #4]
90009950:	68fa      	ldr	r2, [r7, #12]
90009952:	4313      	orrs	r3, r2
90009954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90009956:	687b      	ldr	r3, [r7, #4]
90009958:	4a32      	ldr	r2, [pc, #200]	@ (90009a24 <TIM_Base_SetConfig+0x120>)
9000995a:	4293      	cmp	r3, r2
9000995c:	d01f      	beq.n	9000999e <TIM_Base_SetConfig+0x9a>
9000995e:	687b      	ldr	r3, [r7, #4]
90009960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009964:	d01b      	beq.n	9000999e <TIM_Base_SetConfig+0x9a>
90009966:	687b      	ldr	r3, [r7, #4]
90009968:	4a2f      	ldr	r2, [pc, #188]	@ (90009a28 <TIM_Base_SetConfig+0x124>)
9000996a:	4293      	cmp	r3, r2
9000996c:	d017      	beq.n	9000999e <TIM_Base_SetConfig+0x9a>
9000996e:	687b      	ldr	r3, [r7, #4]
90009970:	4a2e      	ldr	r2, [pc, #184]	@ (90009a2c <TIM_Base_SetConfig+0x128>)
90009972:	4293      	cmp	r3, r2
90009974:	d013      	beq.n	9000999e <TIM_Base_SetConfig+0x9a>
90009976:	687b      	ldr	r3, [r7, #4]
90009978:	4a2d      	ldr	r2, [pc, #180]	@ (90009a30 <TIM_Base_SetConfig+0x12c>)
9000997a:	4293      	cmp	r3, r2
9000997c:	d00f      	beq.n	9000999e <TIM_Base_SetConfig+0x9a>
9000997e:	687b      	ldr	r3, [r7, #4]
90009980:	4a2c      	ldr	r2, [pc, #176]	@ (90009a34 <TIM_Base_SetConfig+0x130>)
90009982:	4293      	cmp	r3, r2
90009984:	d00b      	beq.n	9000999e <TIM_Base_SetConfig+0x9a>
90009986:	687b      	ldr	r3, [r7, #4]
90009988:	4a2b      	ldr	r2, [pc, #172]	@ (90009a38 <TIM_Base_SetConfig+0x134>)
9000998a:	4293      	cmp	r3, r2
9000998c:	d007      	beq.n	9000999e <TIM_Base_SetConfig+0x9a>
9000998e:	687b      	ldr	r3, [r7, #4]
90009990:	4a2a      	ldr	r2, [pc, #168]	@ (90009a3c <TIM_Base_SetConfig+0x138>)
90009992:	4293      	cmp	r3, r2
90009994:	d003      	beq.n	9000999e <TIM_Base_SetConfig+0x9a>
90009996:	687b      	ldr	r3, [r7, #4]
90009998:	4a29      	ldr	r2, [pc, #164]	@ (90009a40 <TIM_Base_SetConfig+0x13c>)
9000999a:	4293      	cmp	r3, r2
9000999c:	d108      	bne.n	900099b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
9000999e:	68fb      	ldr	r3, [r7, #12]
900099a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
900099a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
900099a6:	683b      	ldr	r3, [r7, #0]
900099a8:	68db      	ldr	r3, [r3, #12]
900099aa:	68fa      	ldr	r2, [r7, #12]
900099ac:	4313      	orrs	r3, r2
900099ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
900099b0:	68fb      	ldr	r3, [r7, #12]
900099b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
900099b6:	683b      	ldr	r3, [r7, #0]
900099b8:	695b      	ldr	r3, [r3, #20]
900099ba:	4313      	orrs	r3, r2
900099bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
900099be:	683b      	ldr	r3, [r7, #0]
900099c0:	689a      	ldr	r2, [r3, #8]
900099c2:	687b      	ldr	r3, [r7, #4]
900099c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
900099c6:	683b      	ldr	r3, [r7, #0]
900099c8:	681a      	ldr	r2, [r3, #0]
900099ca:	687b      	ldr	r3, [r7, #4]
900099cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
900099ce:	687b      	ldr	r3, [r7, #4]
900099d0:	4a14      	ldr	r2, [pc, #80]	@ (90009a24 <TIM_Base_SetConfig+0x120>)
900099d2:	4293      	cmp	r3, r2
900099d4:	d00f      	beq.n	900099f6 <TIM_Base_SetConfig+0xf2>
900099d6:	687b      	ldr	r3, [r7, #4]
900099d8:	4a16      	ldr	r2, [pc, #88]	@ (90009a34 <TIM_Base_SetConfig+0x130>)
900099da:	4293      	cmp	r3, r2
900099dc:	d00b      	beq.n	900099f6 <TIM_Base_SetConfig+0xf2>
900099de:	687b      	ldr	r3, [r7, #4]
900099e0:	4a15      	ldr	r2, [pc, #84]	@ (90009a38 <TIM_Base_SetConfig+0x134>)
900099e2:	4293      	cmp	r3, r2
900099e4:	d007      	beq.n	900099f6 <TIM_Base_SetConfig+0xf2>
900099e6:	687b      	ldr	r3, [r7, #4]
900099e8:	4a14      	ldr	r2, [pc, #80]	@ (90009a3c <TIM_Base_SetConfig+0x138>)
900099ea:	4293      	cmp	r3, r2
900099ec:	d003      	beq.n	900099f6 <TIM_Base_SetConfig+0xf2>
900099ee:	687b      	ldr	r3, [r7, #4]
900099f0:	4a13      	ldr	r2, [pc, #76]	@ (90009a40 <TIM_Base_SetConfig+0x13c>)
900099f2:	4293      	cmp	r3, r2
900099f4:	d103      	bne.n	900099fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
900099f6:	683b      	ldr	r3, [r7, #0]
900099f8:	691a      	ldr	r2, [r3, #16]
900099fa:	687b      	ldr	r3, [r7, #4]
900099fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
900099fe:	687b      	ldr	r3, [r7, #4]
90009a00:	681b      	ldr	r3, [r3, #0]
90009a02:	f043 0204 	orr.w	r2, r3, #4
90009a06:	687b      	ldr	r3, [r7, #4]
90009a08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009a0a:	687b      	ldr	r3, [r7, #4]
90009a0c:	2201      	movs	r2, #1
90009a0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009a10:	687b      	ldr	r3, [r7, #4]
90009a12:	68fa      	ldr	r2, [r7, #12]
90009a14:	601a      	str	r2, [r3, #0]
}
90009a16:	bf00      	nop
90009a18:	3714      	adds	r7, #20
90009a1a:	46bd      	mov	sp, r7
90009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a20:	4770      	bx	lr
90009a22:	bf00      	nop
90009a24:	40010000 	.word	0x40010000
90009a28:	40000400 	.word	0x40000400
90009a2c:	40000800 	.word	0x40000800
90009a30:	40000c00 	.word	0x40000c00
90009a34:	40010400 	.word	0x40010400
90009a38:	40014000 	.word	0x40014000
90009a3c:	40014400 	.word	0x40014400
90009a40:	40014800 	.word	0x40014800

90009a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90009a44:	b580      	push	{r7, lr}
90009a46:	b082      	sub	sp, #8
90009a48:	af00      	add	r7, sp, #0
90009a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90009a4c:	687b      	ldr	r3, [r7, #4]
90009a4e:	2b00      	cmp	r3, #0
90009a50:	d101      	bne.n	90009a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90009a52:	2301      	movs	r3, #1
90009a54:	e042      	b.n	90009adc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90009a56:	687b      	ldr	r3, [r7, #4]
90009a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009a5c:	2b00      	cmp	r3, #0
90009a5e:	d106      	bne.n	90009a6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90009a60:	687b      	ldr	r3, [r7, #4]
90009a62:	2200      	movs	r2, #0
90009a64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90009a68:	6878      	ldr	r0, [r7, #4]
90009a6a:	f7f7 f87b 	bl	90000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90009a6e:	687b      	ldr	r3, [r7, #4]
90009a70:	2224      	movs	r2, #36	@ 0x24
90009a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90009a76:	687b      	ldr	r3, [r7, #4]
90009a78:	681b      	ldr	r3, [r3, #0]
90009a7a:	681a      	ldr	r2, [r3, #0]
90009a7c:	687b      	ldr	r3, [r7, #4]
90009a7e:	681b      	ldr	r3, [r3, #0]
90009a80:	f022 0201 	bic.w	r2, r2, #1
90009a84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90009a86:	687b      	ldr	r3, [r7, #4]
90009a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009a8a:	2b00      	cmp	r3, #0
90009a8c:	d002      	beq.n	90009a94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009a8e:	6878      	ldr	r0, [r7, #4]
90009a90:	f000 fe1e 	bl	9000a6d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009a94:	6878      	ldr	r0, [r7, #4]
90009a96:	f000 f8b3 	bl	90009c00 <UART_SetConfig>
90009a9a:	4603      	mov	r3, r0
90009a9c:	2b01      	cmp	r3, #1
90009a9e:	d101      	bne.n	90009aa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009aa0:	2301      	movs	r3, #1
90009aa2:	e01b      	b.n	90009adc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009aa4:	687b      	ldr	r3, [r7, #4]
90009aa6:	681b      	ldr	r3, [r3, #0]
90009aa8:	685a      	ldr	r2, [r3, #4]
90009aaa:	687b      	ldr	r3, [r7, #4]
90009aac:	681b      	ldr	r3, [r3, #0]
90009aae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009ab4:	687b      	ldr	r3, [r7, #4]
90009ab6:	681b      	ldr	r3, [r3, #0]
90009ab8:	689a      	ldr	r2, [r3, #8]
90009aba:	687b      	ldr	r3, [r7, #4]
90009abc:	681b      	ldr	r3, [r3, #0]
90009abe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009ac4:	687b      	ldr	r3, [r7, #4]
90009ac6:	681b      	ldr	r3, [r3, #0]
90009ac8:	681a      	ldr	r2, [r3, #0]
90009aca:	687b      	ldr	r3, [r7, #4]
90009acc:	681b      	ldr	r3, [r3, #0]
90009ace:	f042 0201 	orr.w	r2, r2, #1
90009ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009ad4:	6878      	ldr	r0, [r7, #4]
90009ad6:	f000 fe9d 	bl	9000a814 <UART_CheckIdleState>
90009ada:	4603      	mov	r3, r0
}
90009adc:	4618      	mov	r0, r3
90009ade:	3708      	adds	r7, #8
90009ae0:	46bd      	mov	sp, r7
90009ae2:	bd80      	pop	{r7, pc}

90009ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009ae4:	b580      	push	{r7, lr}
90009ae6:	b08a      	sub	sp, #40	@ 0x28
90009ae8:	af02      	add	r7, sp, #8
90009aea:	60f8      	str	r0, [r7, #12]
90009aec:	60b9      	str	r1, [r7, #8]
90009aee:	603b      	str	r3, [r7, #0]
90009af0:	4613      	mov	r3, r2
90009af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009af4:	68fb      	ldr	r3, [r7, #12]
90009af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009afa:	2b20      	cmp	r3, #32
90009afc:	d17b      	bne.n	90009bf6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009afe:	68bb      	ldr	r3, [r7, #8]
90009b00:	2b00      	cmp	r3, #0
90009b02:	d002      	beq.n	90009b0a <HAL_UART_Transmit+0x26>
90009b04:	88fb      	ldrh	r3, [r7, #6]
90009b06:	2b00      	cmp	r3, #0
90009b08:	d101      	bne.n	90009b0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90009b0a:	2301      	movs	r3, #1
90009b0c:	e074      	b.n	90009bf8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009b0e:	68fb      	ldr	r3, [r7, #12]
90009b10:	2200      	movs	r2, #0
90009b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90009b16:	68fb      	ldr	r3, [r7, #12]
90009b18:	2221      	movs	r2, #33	@ 0x21
90009b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009b1e:	f7f9 facd 	bl	900030bc <HAL_GetTick>
90009b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009b24:	68fb      	ldr	r3, [r7, #12]
90009b26:	88fa      	ldrh	r2, [r7, #6]
90009b28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90009b2c:	68fb      	ldr	r3, [r7, #12]
90009b2e:	88fa      	ldrh	r2, [r7, #6]
90009b30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90009b34:	68fb      	ldr	r3, [r7, #12]
90009b36:	689b      	ldr	r3, [r3, #8]
90009b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009b3c:	d108      	bne.n	90009b50 <HAL_UART_Transmit+0x6c>
90009b3e:	68fb      	ldr	r3, [r7, #12]
90009b40:	691b      	ldr	r3, [r3, #16]
90009b42:	2b00      	cmp	r3, #0
90009b44:	d104      	bne.n	90009b50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90009b46:	2300      	movs	r3, #0
90009b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90009b4a:	68bb      	ldr	r3, [r7, #8]
90009b4c:	61bb      	str	r3, [r7, #24]
90009b4e:	e003      	b.n	90009b58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90009b50:	68bb      	ldr	r3, [r7, #8]
90009b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90009b54:	2300      	movs	r3, #0
90009b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90009b58:	e030      	b.n	90009bbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90009b5a:	683b      	ldr	r3, [r7, #0]
90009b5c:	9300      	str	r3, [sp, #0]
90009b5e:	697b      	ldr	r3, [r7, #20]
90009b60:	2200      	movs	r2, #0
90009b62:	2180      	movs	r1, #128	@ 0x80
90009b64:	68f8      	ldr	r0, [r7, #12]
90009b66:	f000 feff 	bl	9000a968 <UART_WaitOnFlagUntilTimeout>
90009b6a:	4603      	mov	r3, r0
90009b6c:	2b00      	cmp	r3, #0
90009b6e:	d005      	beq.n	90009b7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90009b70:	68fb      	ldr	r3, [r7, #12]
90009b72:	2220      	movs	r2, #32
90009b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90009b78:	2303      	movs	r3, #3
90009b7a:	e03d      	b.n	90009bf8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90009b7c:	69fb      	ldr	r3, [r7, #28]
90009b7e:	2b00      	cmp	r3, #0
90009b80:	d10b      	bne.n	90009b9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90009b82:	69bb      	ldr	r3, [r7, #24]
90009b84:	881b      	ldrh	r3, [r3, #0]
90009b86:	461a      	mov	r2, r3
90009b88:	68fb      	ldr	r3, [r7, #12]
90009b8a:	681b      	ldr	r3, [r3, #0]
90009b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009b90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009b92:	69bb      	ldr	r3, [r7, #24]
90009b94:	3302      	adds	r3, #2
90009b96:	61bb      	str	r3, [r7, #24]
90009b98:	e007      	b.n	90009baa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90009b9a:	69fb      	ldr	r3, [r7, #28]
90009b9c:	781a      	ldrb	r2, [r3, #0]
90009b9e:	68fb      	ldr	r3, [r7, #12]
90009ba0:	681b      	ldr	r3, [r3, #0]
90009ba2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009ba4:	69fb      	ldr	r3, [r7, #28]
90009ba6:	3301      	adds	r3, #1
90009ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90009baa:	68fb      	ldr	r3, [r7, #12]
90009bac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009bb0:	b29b      	uxth	r3, r3
90009bb2:	3b01      	subs	r3, #1
90009bb4:	b29a      	uxth	r2, r3
90009bb6:	68fb      	ldr	r3, [r7, #12]
90009bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009bbc:	68fb      	ldr	r3, [r7, #12]
90009bbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009bc2:	b29b      	uxth	r3, r3
90009bc4:	2b00      	cmp	r3, #0
90009bc6:	d1c8      	bne.n	90009b5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90009bc8:	683b      	ldr	r3, [r7, #0]
90009bca:	9300      	str	r3, [sp, #0]
90009bcc:	697b      	ldr	r3, [r7, #20]
90009bce:	2200      	movs	r2, #0
90009bd0:	2140      	movs	r1, #64	@ 0x40
90009bd2:	68f8      	ldr	r0, [r7, #12]
90009bd4:	f000 fec8 	bl	9000a968 <UART_WaitOnFlagUntilTimeout>
90009bd8:	4603      	mov	r3, r0
90009bda:	2b00      	cmp	r3, #0
90009bdc:	d005      	beq.n	90009bea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009bde:	68fb      	ldr	r3, [r7, #12]
90009be0:	2220      	movs	r2, #32
90009be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90009be6:	2303      	movs	r3, #3
90009be8:	e006      	b.n	90009bf8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90009bea:	68fb      	ldr	r3, [r7, #12]
90009bec:	2220      	movs	r2, #32
90009bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009bf2:	2300      	movs	r3, #0
90009bf4:	e000      	b.n	90009bf8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90009bf6:	2302      	movs	r3, #2
  }
}
90009bf8:	4618      	mov	r0, r3
90009bfa:	3720      	adds	r7, #32
90009bfc:	46bd      	mov	sp, r7
90009bfe:	bd80      	pop	{r7, pc}

90009c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009c04:	b092      	sub	sp, #72	@ 0x48
90009c06:	af00      	add	r7, sp, #0
90009c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90009c0a:	2300      	movs	r3, #0
90009c0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009c10:	697b      	ldr	r3, [r7, #20]
90009c12:	689a      	ldr	r2, [r3, #8]
90009c14:	697b      	ldr	r3, [r7, #20]
90009c16:	691b      	ldr	r3, [r3, #16]
90009c18:	431a      	orrs	r2, r3
90009c1a:	697b      	ldr	r3, [r7, #20]
90009c1c:	695b      	ldr	r3, [r3, #20]
90009c1e:	431a      	orrs	r2, r3
90009c20:	697b      	ldr	r3, [r7, #20]
90009c22:	69db      	ldr	r3, [r3, #28]
90009c24:	4313      	orrs	r3, r2
90009c26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90009c28:	697b      	ldr	r3, [r7, #20]
90009c2a:	681b      	ldr	r3, [r3, #0]
90009c2c:	681a      	ldr	r2, [r3, #0]
90009c2e:	4bbe      	ldr	r3, [pc, #760]	@ (90009f28 <UART_SetConfig+0x328>)
90009c30:	4013      	ands	r3, r2
90009c32:	697a      	ldr	r2, [r7, #20]
90009c34:	6812      	ldr	r2, [r2, #0]
90009c36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009c38:	430b      	orrs	r3, r1
90009c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90009c3c:	697b      	ldr	r3, [r7, #20]
90009c3e:	681b      	ldr	r3, [r3, #0]
90009c40:	685b      	ldr	r3, [r3, #4]
90009c42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90009c46:	697b      	ldr	r3, [r7, #20]
90009c48:	68da      	ldr	r2, [r3, #12]
90009c4a:	697b      	ldr	r3, [r7, #20]
90009c4c:	681b      	ldr	r3, [r3, #0]
90009c4e:	430a      	orrs	r2, r1
90009c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009c52:	697b      	ldr	r3, [r7, #20]
90009c54:	699b      	ldr	r3, [r3, #24]
90009c56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009c58:	697b      	ldr	r3, [r7, #20]
90009c5a:	681b      	ldr	r3, [r3, #0]
90009c5c:	4ab3      	ldr	r2, [pc, #716]	@ (90009f2c <UART_SetConfig+0x32c>)
90009c5e:	4293      	cmp	r3, r2
90009c60:	d004      	beq.n	90009c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009c62:	697b      	ldr	r3, [r7, #20]
90009c64:	6a1b      	ldr	r3, [r3, #32]
90009c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009c68:	4313      	orrs	r3, r2
90009c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009c6c:	697b      	ldr	r3, [r7, #20]
90009c6e:	681b      	ldr	r3, [r3, #0]
90009c70:	689a      	ldr	r2, [r3, #8]
90009c72:	4baf      	ldr	r3, [pc, #700]	@ (90009f30 <UART_SetConfig+0x330>)
90009c74:	4013      	ands	r3, r2
90009c76:	697a      	ldr	r2, [r7, #20]
90009c78:	6812      	ldr	r2, [r2, #0]
90009c7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009c7c:	430b      	orrs	r3, r1
90009c7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009c80:	697b      	ldr	r3, [r7, #20]
90009c82:	681b      	ldr	r3, [r3, #0]
90009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009c86:	f023 010f 	bic.w	r1, r3, #15
90009c8a:	697b      	ldr	r3, [r7, #20]
90009c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009c8e:	697b      	ldr	r3, [r7, #20]
90009c90:	681b      	ldr	r3, [r3, #0]
90009c92:	430a      	orrs	r2, r1
90009c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009c96:	697b      	ldr	r3, [r7, #20]
90009c98:	681b      	ldr	r3, [r3, #0]
90009c9a:	4aa6      	ldr	r2, [pc, #664]	@ (90009f34 <UART_SetConfig+0x334>)
90009c9c:	4293      	cmp	r3, r2
90009c9e:	d177      	bne.n	90009d90 <UART_SetConfig+0x190>
90009ca0:	4ba5      	ldr	r3, [pc, #660]	@ (90009f38 <UART_SetConfig+0x338>)
90009ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009ca8:	2b28      	cmp	r3, #40	@ 0x28
90009caa:	d86d      	bhi.n	90009d88 <UART_SetConfig+0x188>
90009cac:	a201      	add	r2, pc, #4	@ (adr r2, 90009cb4 <UART_SetConfig+0xb4>)
90009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009cb2:	bf00      	nop
90009cb4:	90009d59 	.word	0x90009d59
90009cb8:	90009d89 	.word	0x90009d89
90009cbc:	90009d89 	.word	0x90009d89
90009cc0:	90009d89 	.word	0x90009d89
90009cc4:	90009d89 	.word	0x90009d89
90009cc8:	90009d89 	.word	0x90009d89
90009ccc:	90009d89 	.word	0x90009d89
90009cd0:	90009d89 	.word	0x90009d89
90009cd4:	90009d61 	.word	0x90009d61
90009cd8:	90009d89 	.word	0x90009d89
90009cdc:	90009d89 	.word	0x90009d89
90009ce0:	90009d89 	.word	0x90009d89
90009ce4:	90009d89 	.word	0x90009d89
90009ce8:	90009d89 	.word	0x90009d89
90009cec:	90009d89 	.word	0x90009d89
90009cf0:	90009d89 	.word	0x90009d89
90009cf4:	90009d69 	.word	0x90009d69
90009cf8:	90009d89 	.word	0x90009d89
90009cfc:	90009d89 	.word	0x90009d89
90009d00:	90009d89 	.word	0x90009d89
90009d04:	90009d89 	.word	0x90009d89
90009d08:	90009d89 	.word	0x90009d89
90009d0c:	90009d89 	.word	0x90009d89
90009d10:	90009d89 	.word	0x90009d89
90009d14:	90009d71 	.word	0x90009d71
90009d18:	90009d89 	.word	0x90009d89
90009d1c:	90009d89 	.word	0x90009d89
90009d20:	90009d89 	.word	0x90009d89
90009d24:	90009d89 	.word	0x90009d89
90009d28:	90009d89 	.word	0x90009d89
90009d2c:	90009d89 	.word	0x90009d89
90009d30:	90009d89 	.word	0x90009d89
90009d34:	90009d79 	.word	0x90009d79
90009d38:	90009d89 	.word	0x90009d89
90009d3c:	90009d89 	.word	0x90009d89
90009d40:	90009d89 	.word	0x90009d89
90009d44:	90009d89 	.word	0x90009d89
90009d48:	90009d89 	.word	0x90009d89
90009d4c:	90009d89 	.word	0x90009d89
90009d50:	90009d89 	.word	0x90009d89
90009d54:	90009d81 	.word	0x90009d81
90009d58:	2301      	movs	r3, #1
90009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d5e:	e222      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009d60:	2304      	movs	r3, #4
90009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d66:	e21e      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009d68:	2308      	movs	r3, #8
90009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d6e:	e21a      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009d70:	2310      	movs	r3, #16
90009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d76:	e216      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009d78:	2320      	movs	r3, #32
90009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d7e:	e212      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009d80:	2340      	movs	r3, #64	@ 0x40
90009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d86:	e20e      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009d88:	2380      	movs	r3, #128	@ 0x80
90009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009d8e:	e20a      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009d90:	697b      	ldr	r3, [r7, #20]
90009d92:	681b      	ldr	r3, [r3, #0]
90009d94:	4a69      	ldr	r2, [pc, #420]	@ (90009f3c <UART_SetConfig+0x33c>)
90009d96:	4293      	cmp	r3, r2
90009d98:	d130      	bne.n	90009dfc <UART_SetConfig+0x1fc>
90009d9a:	4b67      	ldr	r3, [pc, #412]	@ (90009f38 <UART_SetConfig+0x338>)
90009d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009d9e:	f003 0307 	and.w	r3, r3, #7
90009da2:	2b05      	cmp	r3, #5
90009da4:	d826      	bhi.n	90009df4 <UART_SetConfig+0x1f4>
90009da6:	a201      	add	r2, pc, #4	@ (adr r2, 90009dac <UART_SetConfig+0x1ac>)
90009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009dac:	90009dc5 	.word	0x90009dc5
90009db0:	90009dcd 	.word	0x90009dcd
90009db4:	90009dd5 	.word	0x90009dd5
90009db8:	90009ddd 	.word	0x90009ddd
90009dbc:	90009de5 	.word	0x90009de5
90009dc0:	90009ded 	.word	0x90009ded
90009dc4:	2300      	movs	r3, #0
90009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dca:	e1ec      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009dcc:	2304      	movs	r3, #4
90009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dd2:	e1e8      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009dd4:	2308      	movs	r3, #8
90009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dda:	e1e4      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009ddc:	2310      	movs	r3, #16
90009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009de2:	e1e0      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009de4:	2320      	movs	r3, #32
90009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dea:	e1dc      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009dec:	2340      	movs	r3, #64	@ 0x40
90009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009df2:	e1d8      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009df4:	2380      	movs	r3, #128	@ 0x80
90009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009dfa:	e1d4      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009dfc:	697b      	ldr	r3, [r7, #20]
90009dfe:	681b      	ldr	r3, [r3, #0]
90009e00:	4a4f      	ldr	r2, [pc, #316]	@ (90009f40 <UART_SetConfig+0x340>)
90009e02:	4293      	cmp	r3, r2
90009e04:	d130      	bne.n	90009e68 <UART_SetConfig+0x268>
90009e06:	4b4c      	ldr	r3, [pc, #304]	@ (90009f38 <UART_SetConfig+0x338>)
90009e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009e0a:	f003 0307 	and.w	r3, r3, #7
90009e0e:	2b05      	cmp	r3, #5
90009e10:	d826      	bhi.n	90009e60 <UART_SetConfig+0x260>
90009e12:	a201      	add	r2, pc, #4	@ (adr r2, 90009e18 <UART_SetConfig+0x218>)
90009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009e18:	90009e31 	.word	0x90009e31
90009e1c:	90009e39 	.word	0x90009e39
90009e20:	90009e41 	.word	0x90009e41
90009e24:	90009e49 	.word	0x90009e49
90009e28:	90009e51 	.word	0x90009e51
90009e2c:	90009e59 	.word	0x90009e59
90009e30:	2300      	movs	r3, #0
90009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e36:	e1b6      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009e38:	2304      	movs	r3, #4
90009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e3e:	e1b2      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009e40:	2308      	movs	r3, #8
90009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e46:	e1ae      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009e48:	2310      	movs	r3, #16
90009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e4e:	e1aa      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009e50:	2320      	movs	r3, #32
90009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e56:	e1a6      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009e58:	2340      	movs	r3, #64	@ 0x40
90009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e5e:	e1a2      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009e60:	2380      	movs	r3, #128	@ 0x80
90009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e66:	e19e      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009e68:	697b      	ldr	r3, [r7, #20]
90009e6a:	681b      	ldr	r3, [r3, #0]
90009e6c:	4a35      	ldr	r2, [pc, #212]	@ (90009f44 <UART_SetConfig+0x344>)
90009e6e:	4293      	cmp	r3, r2
90009e70:	d130      	bne.n	90009ed4 <UART_SetConfig+0x2d4>
90009e72:	4b31      	ldr	r3, [pc, #196]	@ (90009f38 <UART_SetConfig+0x338>)
90009e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009e76:	f003 0307 	and.w	r3, r3, #7
90009e7a:	2b05      	cmp	r3, #5
90009e7c:	d826      	bhi.n	90009ecc <UART_SetConfig+0x2cc>
90009e7e:	a201      	add	r2, pc, #4	@ (adr r2, 90009e84 <UART_SetConfig+0x284>)
90009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009e84:	90009e9d 	.word	0x90009e9d
90009e88:	90009ea5 	.word	0x90009ea5
90009e8c:	90009ead 	.word	0x90009ead
90009e90:	90009eb5 	.word	0x90009eb5
90009e94:	90009ebd 	.word	0x90009ebd
90009e98:	90009ec5 	.word	0x90009ec5
90009e9c:	2300      	movs	r3, #0
90009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ea2:	e180      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009ea4:	2304      	movs	r3, #4
90009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eaa:	e17c      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009eac:	2308      	movs	r3, #8
90009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eb2:	e178      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009eb4:	2310      	movs	r3, #16
90009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eba:	e174      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009ebc:	2320      	movs	r3, #32
90009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ec2:	e170      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009ec4:	2340      	movs	r3, #64	@ 0x40
90009ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eca:	e16c      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009ecc:	2380      	movs	r3, #128	@ 0x80
90009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ed2:	e168      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009ed4:	697b      	ldr	r3, [r7, #20]
90009ed6:	681b      	ldr	r3, [r3, #0]
90009ed8:	4a1b      	ldr	r2, [pc, #108]	@ (90009f48 <UART_SetConfig+0x348>)
90009eda:	4293      	cmp	r3, r2
90009edc:	d142      	bne.n	90009f64 <UART_SetConfig+0x364>
90009ede:	4b16      	ldr	r3, [pc, #88]	@ (90009f38 <UART_SetConfig+0x338>)
90009ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ee2:	f003 0307 	and.w	r3, r3, #7
90009ee6:	2b05      	cmp	r3, #5
90009ee8:	d838      	bhi.n	90009f5c <UART_SetConfig+0x35c>
90009eea:	a201      	add	r2, pc, #4	@ (adr r2, 90009ef0 <UART_SetConfig+0x2f0>)
90009eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009ef0:	90009f09 	.word	0x90009f09
90009ef4:	90009f11 	.word	0x90009f11
90009ef8:	90009f19 	.word	0x90009f19
90009efc:	90009f21 	.word	0x90009f21
90009f00:	90009f4d 	.word	0x90009f4d
90009f04:	90009f55 	.word	0x90009f55
90009f08:	2300      	movs	r3, #0
90009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f0e:	e14a      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009f10:	2304      	movs	r3, #4
90009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f16:	e146      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009f18:	2308      	movs	r3, #8
90009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f1e:	e142      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009f20:	2310      	movs	r3, #16
90009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f26:	e13e      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009f28:	cfff69f3 	.word	0xcfff69f3
90009f2c:	58000c00 	.word	0x58000c00
90009f30:	11fff4ff 	.word	0x11fff4ff
90009f34:	40011000 	.word	0x40011000
90009f38:	58024400 	.word	0x58024400
90009f3c:	40004400 	.word	0x40004400
90009f40:	40004800 	.word	0x40004800
90009f44:	40004c00 	.word	0x40004c00
90009f48:	40005000 	.word	0x40005000
90009f4c:	2320      	movs	r3, #32
90009f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f52:	e128      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009f54:	2340      	movs	r3, #64	@ 0x40
90009f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f5a:	e124      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009f5c:	2380      	movs	r3, #128	@ 0x80
90009f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f62:	e120      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
90009f64:	697b      	ldr	r3, [r7, #20]
90009f66:	681b      	ldr	r3, [r3, #0]
90009f68:	4acb      	ldr	r2, [pc, #812]	@ (9000a298 <UART_SetConfig+0x698>)
90009f6a:	4293      	cmp	r3, r2
90009f6c:	d176      	bne.n	9000a05c <UART_SetConfig+0x45c>
90009f6e:	4bcb      	ldr	r3, [pc, #812]	@ (9000a29c <UART_SetConfig+0x69c>)
90009f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009f76:	2b28      	cmp	r3, #40	@ 0x28
90009f78:	d86c      	bhi.n	9000a054 <UART_SetConfig+0x454>
90009f7a:	a201      	add	r2, pc, #4	@ (adr r2, 90009f80 <UART_SetConfig+0x380>)
90009f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f80:	9000a025 	.word	0x9000a025
90009f84:	9000a055 	.word	0x9000a055
90009f88:	9000a055 	.word	0x9000a055
90009f8c:	9000a055 	.word	0x9000a055
90009f90:	9000a055 	.word	0x9000a055
90009f94:	9000a055 	.word	0x9000a055
90009f98:	9000a055 	.word	0x9000a055
90009f9c:	9000a055 	.word	0x9000a055
90009fa0:	9000a02d 	.word	0x9000a02d
90009fa4:	9000a055 	.word	0x9000a055
90009fa8:	9000a055 	.word	0x9000a055
90009fac:	9000a055 	.word	0x9000a055
90009fb0:	9000a055 	.word	0x9000a055
90009fb4:	9000a055 	.word	0x9000a055
90009fb8:	9000a055 	.word	0x9000a055
90009fbc:	9000a055 	.word	0x9000a055
90009fc0:	9000a035 	.word	0x9000a035
90009fc4:	9000a055 	.word	0x9000a055
90009fc8:	9000a055 	.word	0x9000a055
90009fcc:	9000a055 	.word	0x9000a055
90009fd0:	9000a055 	.word	0x9000a055
90009fd4:	9000a055 	.word	0x9000a055
90009fd8:	9000a055 	.word	0x9000a055
90009fdc:	9000a055 	.word	0x9000a055
90009fe0:	9000a03d 	.word	0x9000a03d
90009fe4:	9000a055 	.word	0x9000a055
90009fe8:	9000a055 	.word	0x9000a055
90009fec:	9000a055 	.word	0x9000a055
90009ff0:	9000a055 	.word	0x9000a055
90009ff4:	9000a055 	.word	0x9000a055
90009ff8:	9000a055 	.word	0x9000a055
90009ffc:	9000a055 	.word	0x9000a055
9000a000:	9000a045 	.word	0x9000a045
9000a004:	9000a055 	.word	0x9000a055
9000a008:	9000a055 	.word	0x9000a055
9000a00c:	9000a055 	.word	0x9000a055
9000a010:	9000a055 	.word	0x9000a055
9000a014:	9000a055 	.word	0x9000a055
9000a018:	9000a055 	.word	0x9000a055
9000a01c:	9000a055 	.word	0x9000a055
9000a020:	9000a04d 	.word	0x9000a04d
9000a024:	2301      	movs	r3, #1
9000a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a02a:	e0bc      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a02c:	2304      	movs	r3, #4
9000a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a032:	e0b8      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a034:	2308      	movs	r3, #8
9000a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a03a:	e0b4      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a03c:	2310      	movs	r3, #16
9000a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a042:	e0b0      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a044:	2320      	movs	r3, #32
9000a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a04a:	e0ac      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a04c:	2340      	movs	r3, #64	@ 0x40
9000a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a052:	e0a8      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a054:	2380      	movs	r3, #128	@ 0x80
9000a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a05a:	e0a4      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a05c:	697b      	ldr	r3, [r7, #20]
9000a05e:	681b      	ldr	r3, [r3, #0]
9000a060:	4a8f      	ldr	r2, [pc, #572]	@ (9000a2a0 <UART_SetConfig+0x6a0>)
9000a062:	4293      	cmp	r3, r2
9000a064:	d130      	bne.n	9000a0c8 <UART_SetConfig+0x4c8>
9000a066:	4b8d      	ldr	r3, [pc, #564]	@ (9000a29c <UART_SetConfig+0x69c>)
9000a068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a06a:	f003 0307 	and.w	r3, r3, #7
9000a06e:	2b05      	cmp	r3, #5
9000a070:	d826      	bhi.n	9000a0c0 <UART_SetConfig+0x4c0>
9000a072:	a201      	add	r2, pc, #4	@ (adr r2, 9000a078 <UART_SetConfig+0x478>)
9000a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a078:	9000a091 	.word	0x9000a091
9000a07c:	9000a099 	.word	0x9000a099
9000a080:	9000a0a1 	.word	0x9000a0a1
9000a084:	9000a0a9 	.word	0x9000a0a9
9000a088:	9000a0b1 	.word	0x9000a0b1
9000a08c:	9000a0b9 	.word	0x9000a0b9
9000a090:	2300      	movs	r3, #0
9000a092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a096:	e086      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a098:	2304      	movs	r3, #4
9000a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a09e:	e082      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a0a0:	2308      	movs	r3, #8
9000a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0a6:	e07e      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a0a8:	2310      	movs	r3, #16
9000a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ae:	e07a      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a0b0:	2320      	movs	r3, #32
9000a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0b6:	e076      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a0b8:	2340      	movs	r3, #64	@ 0x40
9000a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0be:	e072      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a0c0:	2380      	movs	r3, #128	@ 0x80
9000a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0c6:	e06e      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a0c8:	697b      	ldr	r3, [r7, #20]
9000a0ca:	681b      	ldr	r3, [r3, #0]
9000a0cc:	4a75      	ldr	r2, [pc, #468]	@ (9000a2a4 <UART_SetConfig+0x6a4>)
9000a0ce:	4293      	cmp	r3, r2
9000a0d0:	d130      	bne.n	9000a134 <UART_SetConfig+0x534>
9000a0d2:	4b72      	ldr	r3, [pc, #456]	@ (9000a29c <UART_SetConfig+0x69c>)
9000a0d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a0d6:	f003 0307 	and.w	r3, r3, #7
9000a0da:	2b05      	cmp	r3, #5
9000a0dc:	d826      	bhi.n	9000a12c <UART_SetConfig+0x52c>
9000a0de:	a201      	add	r2, pc, #4	@ (adr r2, 9000a0e4 <UART_SetConfig+0x4e4>)
9000a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a0e4:	9000a0fd 	.word	0x9000a0fd
9000a0e8:	9000a105 	.word	0x9000a105
9000a0ec:	9000a10d 	.word	0x9000a10d
9000a0f0:	9000a115 	.word	0x9000a115
9000a0f4:	9000a11d 	.word	0x9000a11d
9000a0f8:	9000a125 	.word	0x9000a125
9000a0fc:	2300      	movs	r3, #0
9000a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a102:	e050      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a104:	2304      	movs	r3, #4
9000a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a10a:	e04c      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a10c:	2308      	movs	r3, #8
9000a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a112:	e048      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a114:	2310      	movs	r3, #16
9000a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a11a:	e044      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a11c:	2320      	movs	r3, #32
9000a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a122:	e040      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a124:	2340      	movs	r3, #64	@ 0x40
9000a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a12a:	e03c      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a12c:	2380      	movs	r3, #128	@ 0x80
9000a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a132:	e038      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a134:	697b      	ldr	r3, [r7, #20]
9000a136:	681b      	ldr	r3, [r3, #0]
9000a138:	4a5b      	ldr	r2, [pc, #364]	@ (9000a2a8 <UART_SetConfig+0x6a8>)
9000a13a:	4293      	cmp	r3, r2
9000a13c:	d130      	bne.n	9000a1a0 <UART_SetConfig+0x5a0>
9000a13e:	4b57      	ldr	r3, [pc, #348]	@ (9000a29c <UART_SetConfig+0x69c>)
9000a140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a142:	f003 0307 	and.w	r3, r3, #7
9000a146:	2b05      	cmp	r3, #5
9000a148:	d826      	bhi.n	9000a198 <UART_SetConfig+0x598>
9000a14a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a150 <UART_SetConfig+0x550>)
9000a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a150:	9000a169 	.word	0x9000a169
9000a154:	9000a171 	.word	0x9000a171
9000a158:	9000a179 	.word	0x9000a179
9000a15c:	9000a181 	.word	0x9000a181
9000a160:	9000a189 	.word	0x9000a189
9000a164:	9000a191 	.word	0x9000a191
9000a168:	2302      	movs	r3, #2
9000a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a16e:	e01a      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a170:	2304      	movs	r3, #4
9000a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a176:	e016      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a178:	2308      	movs	r3, #8
9000a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a17e:	e012      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a180:	2310      	movs	r3, #16
9000a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a186:	e00e      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a188:	2320      	movs	r3, #32
9000a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a18e:	e00a      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a190:	2340      	movs	r3, #64	@ 0x40
9000a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a196:	e006      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a198:	2380      	movs	r3, #128	@ 0x80
9000a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a19e:	e002      	b.n	9000a1a6 <UART_SetConfig+0x5a6>
9000a1a0:	2380      	movs	r3, #128	@ 0x80
9000a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000a1a6:	697b      	ldr	r3, [r7, #20]
9000a1a8:	681b      	ldr	r3, [r3, #0]
9000a1aa:	4a3f      	ldr	r2, [pc, #252]	@ (9000a2a8 <UART_SetConfig+0x6a8>)
9000a1ac:	4293      	cmp	r3, r2
9000a1ae:	f040 80f8 	bne.w	9000a3a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000a1b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a1b6:	2b20      	cmp	r3, #32
9000a1b8:	dc46      	bgt.n	9000a248 <UART_SetConfig+0x648>
9000a1ba:	2b02      	cmp	r3, #2
9000a1bc:	f2c0 8082 	blt.w	9000a2c4 <UART_SetConfig+0x6c4>
9000a1c0:	3b02      	subs	r3, #2
9000a1c2:	2b1e      	cmp	r3, #30
9000a1c4:	d87e      	bhi.n	9000a2c4 <UART_SetConfig+0x6c4>
9000a1c6:	a201      	add	r2, pc, #4	@ (adr r2, 9000a1cc <UART_SetConfig+0x5cc>)
9000a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a1cc:	9000a24f 	.word	0x9000a24f
9000a1d0:	9000a2c5 	.word	0x9000a2c5
9000a1d4:	9000a257 	.word	0x9000a257
9000a1d8:	9000a2c5 	.word	0x9000a2c5
9000a1dc:	9000a2c5 	.word	0x9000a2c5
9000a1e0:	9000a2c5 	.word	0x9000a2c5
9000a1e4:	9000a267 	.word	0x9000a267
9000a1e8:	9000a2c5 	.word	0x9000a2c5
9000a1ec:	9000a2c5 	.word	0x9000a2c5
9000a1f0:	9000a2c5 	.word	0x9000a2c5
9000a1f4:	9000a2c5 	.word	0x9000a2c5
9000a1f8:	9000a2c5 	.word	0x9000a2c5
9000a1fc:	9000a2c5 	.word	0x9000a2c5
9000a200:	9000a2c5 	.word	0x9000a2c5
9000a204:	9000a277 	.word	0x9000a277
9000a208:	9000a2c5 	.word	0x9000a2c5
9000a20c:	9000a2c5 	.word	0x9000a2c5
9000a210:	9000a2c5 	.word	0x9000a2c5
9000a214:	9000a2c5 	.word	0x9000a2c5
9000a218:	9000a2c5 	.word	0x9000a2c5
9000a21c:	9000a2c5 	.word	0x9000a2c5
9000a220:	9000a2c5 	.word	0x9000a2c5
9000a224:	9000a2c5 	.word	0x9000a2c5
9000a228:	9000a2c5 	.word	0x9000a2c5
9000a22c:	9000a2c5 	.word	0x9000a2c5
9000a230:	9000a2c5 	.word	0x9000a2c5
9000a234:	9000a2c5 	.word	0x9000a2c5
9000a238:	9000a2c5 	.word	0x9000a2c5
9000a23c:	9000a2c5 	.word	0x9000a2c5
9000a240:	9000a2c5 	.word	0x9000a2c5
9000a244:	9000a2b7 	.word	0x9000a2b7
9000a248:	2b40      	cmp	r3, #64	@ 0x40
9000a24a:	d037      	beq.n	9000a2bc <UART_SetConfig+0x6bc>
9000a24c:	e03a      	b.n	9000a2c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000a24e:	f7fe fdcd 	bl	90008dec <HAL_RCCEx_GetD3PCLK1Freq>
9000a252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a254:	e03c      	b.n	9000a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a25a:	4618      	mov	r0, r3
9000a25c:	f7fe fddc 	bl	90008e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a264:	e034      	b.n	9000a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a266:	f107 0318 	add.w	r3, r7, #24
9000a26a:	4618      	mov	r0, r3
9000a26c:	f7fe ff28 	bl	900090c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a270:	69fb      	ldr	r3, [r7, #28]
9000a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a274:	e02c      	b.n	9000a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a276:	4b09      	ldr	r3, [pc, #36]	@ (9000a29c <UART_SetConfig+0x69c>)
9000a278:	681b      	ldr	r3, [r3, #0]
9000a27a:	f003 0320 	and.w	r3, r3, #32
9000a27e:	2b00      	cmp	r3, #0
9000a280:	d016      	beq.n	9000a2b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a282:	4b06      	ldr	r3, [pc, #24]	@ (9000a29c <UART_SetConfig+0x69c>)
9000a284:	681b      	ldr	r3, [r3, #0]
9000a286:	08db      	lsrs	r3, r3, #3
9000a288:	f003 0303 	and.w	r3, r3, #3
9000a28c:	4a07      	ldr	r2, [pc, #28]	@ (9000a2ac <UART_SetConfig+0x6ac>)
9000a28e:	fa22 f303 	lsr.w	r3, r2, r3
9000a292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a294:	e01c      	b.n	9000a2d0 <UART_SetConfig+0x6d0>
9000a296:	bf00      	nop
9000a298:	40011400 	.word	0x40011400
9000a29c:	58024400 	.word	0x58024400
9000a2a0:	40007800 	.word	0x40007800
9000a2a4:	40007c00 	.word	0x40007c00
9000a2a8:	58000c00 	.word	0x58000c00
9000a2ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a2b0:	4b9d      	ldr	r3, [pc, #628]	@ (9000a528 <UART_SetConfig+0x928>)
9000a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a2b4:	e00c      	b.n	9000a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a2b6:	4b9d      	ldr	r3, [pc, #628]	@ (9000a52c <UART_SetConfig+0x92c>)
9000a2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a2ba:	e009      	b.n	9000a2d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a2bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a2c2:	e005      	b.n	9000a2d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a2c4:	2300      	movs	r3, #0
9000a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a2c8:	2301      	movs	r3, #1
9000a2ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a2ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a2d2:	2b00      	cmp	r3, #0
9000a2d4:	f000 81de 	beq.w	9000a694 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a2d8:	697b      	ldr	r3, [r7, #20]
9000a2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a2dc:	4a94      	ldr	r2, [pc, #592]	@ (9000a530 <UART_SetConfig+0x930>)
9000a2de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a2e2:	461a      	mov	r2, r3
9000a2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a2e6:	fbb3 f3f2 	udiv	r3, r3, r2
9000a2ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a2ec:	697b      	ldr	r3, [r7, #20]
9000a2ee:	685a      	ldr	r2, [r3, #4]
9000a2f0:	4613      	mov	r3, r2
9000a2f2:	005b      	lsls	r3, r3, #1
9000a2f4:	4413      	add	r3, r2
9000a2f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a2f8:	429a      	cmp	r2, r3
9000a2fa:	d305      	bcc.n	9000a308 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a2fc:	697b      	ldr	r3, [r7, #20]
9000a2fe:	685b      	ldr	r3, [r3, #4]
9000a300:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a304:	429a      	cmp	r2, r3
9000a306:	d903      	bls.n	9000a310 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a308:	2301      	movs	r3, #1
9000a30a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a30e:	e1c1      	b.n	9000a694 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a312:	2200      	movs	r2, #0
9000a314:	60bb      	str	r3, [r7, #8]
9000a316:	60fa      	str	r2, [r7, #12]
9000a318:	697b      	ldr	r3, [r7, #20]
9000a31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a31c:	4a84      	ldr	r2, [pc, #528]	@ (9000a530 <UART_SetConfig+0x930>)
9000a31e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a322:	b29b      	uxth	r3, r3
9000a324:	2200      	movs	r2, #0
9000a326:	603b      	str	r3, [r7, #0]
9000a328:	607a      	str	r2, [r7, #4]
9000a32a:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a32e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a332:	f7f6 f825 	bl	90000380 <__aeabi_uldivmod>
9000a336:	4602      	mov	r2, r0
9000a338:	460b      	mov	r3, r1
9000a33a:	4610      	mov	r0, r2
9000a33c:	4619      	mov	r1, r3
9000a33e:	f04f 0200 	mov.w	r2, #0
9000a342:	f04f 0300 	mov.w	r3, #0
9000a346:	020b      	lsls	r3, r1, #8
9000a348:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a34c:	0202      	lsls	r2, r0, #8
9000a34e:	6979      	ldr	r1, [r7, #20]
9000a350:	6849      	ldr	r1, [r1, #4]
9000a352:	0849      	lsrs	r1, r1, #1
9000a354:	2000      	movs	r0, #0
9000a356:	460c      	mov	r4, r1
9000a358:	4605      	mov	r5, r0
9000a35a:	eb12 0804 	adds.w	r8, r2, r4
9000a35e:	eb43 0905 	adc.w	r9, r3, r5
9000a362:	697b      	ldr	r3, [r7, #20]
9000a364:	685b      	ldr	r3, [r3, #4]
9000a366:	2200      	movs	r2, #0
9000a368:	469a      	mov	sl, r3
9000a36a:	4693      	mov	fp, r2
9000a36c:	4652      	mov	r2, sl
9000a36e:	465b      	mov	r3, fp
9000a370:	4640      	mov	r0, r8
9000a372:	4649      	mov	r1, r9
9000a374:	f7f6 f804 	bl	90000380 <__aeabi_uldivmod>
9000a378:	4602      	mov	r2, r0
9000a37a:	460b      	mov	r3, r1
9000a37c:	4613      	mov	r3, r2
9000a37e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a386:	d308      	bcc.n	9000a39a <UART_SetConfig+0x79a>
9000a388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a38a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a38e:	d204      	bcs.n	9000a39a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a390:	697b      	ldr	r3, [r7, #20]
9000a392:	681b      	ldr	r3, [r3, #0]
9000a394:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a396:	60da      	str	r2, [r3, #12]
9000a398:	e17c      	b.n	9000a694 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a39a:	2301      	movs	r3, #1
9000a39c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a3a0:	e178      	b.n	9000a694 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a3a2:	697b      	ldr	r3, [r7, #20]
9000a3a4:	69db      	ldr	r3, [r3, #28]
9000a3a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a3aa:	f040 80c5 	bne.w	9000a538 <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a3ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a3b2:	2b20      	cmp	r3, #32
9000a3b4:	dc48      	bgt.n	9000a448 <UART_SetConfig+0x848>
9000a3b6:	2b00      	cmp	r3, #0
9000a3b8:	db7b      	blt.n	9000a4b2 <UART_SetConfig+0x8b2>
9000a3ba:	2b20      	cmp	r3, #32
9000a3bc:	d879      	bhi.n	9000a4b2 <UART_SetConfig+0x8b2>
9000a3be:	a201      	add	r2, pc, #4	@ (adr r2, 9000a3c4 <UART_SetConfig+0x7c4>)
9000a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a3c4:	9000a44f 	.word	0x9000a44f
9000a3c8:	9000a457 	.word	0x9000a457
9000a3cc:	9000a4b3 	.word	0x9000a4b3
9000a3d0:	9000a4b3 	.word	0x9000a4b3
9000a3d4:	9000a45f 	.word	0x9000a45f
9000a3d8:	9000a4b3 	.word	0x9000a4b3
9000a3dc:	9000a4b3 	.word	0x9000a4b3
9000a3e0:	9000a4b3 	.word	0x9000a4b3
9000a3e4:	9000a46f 	.word	0x9000a46f
9000a3e8:	9000a4b3 	.word	0x9000a4b3
9000a3ec:	9000a4b3 	.word	0x9000a4b3
9000a3f0:	9000a4b3 	.word	0x9000a4b3
9000a3f4:	9000a4b3 	.word	0x9000a4b3
9000a3f8:	9000a4b3 	.word	0x9000a4b3
9000a3fc:	9000a4b3 	.word	0x9000a4b3
9000a400:	9000a4b3 	.word	0x9000a4b3
9000a404:	9000a47f 	.word	0x9000a47f
9000a408:	9000a4b3 	.word	0x9000a4b3
9000a40c:	9000a4b3 	.word	0x9000a4b3
9000a410:	9000a4b3 	.word	0x9000a4b3
9000a414:	9000a4b3 	.word	0x9000a4b3
9000a418:	9000a4b3 	.word	0x9000a4b3
9000a41c:	9000a4b3 	.word	0x9000a4b3
9000a420:	9000a4b3 	.word	0x9000a4b3
9000a424:	9000a4b3 	.word	0x9000a4b3
9000a428:	9000a4b3 	.word	0x9000a4b3
9000a42c:	9000a4b3 	.word	0x9000a4b3
9000a430:	9000a4b3 	.word	0x9000a4b3
9000a434:	9000a4b3 	.word	0x9000a4b3
9000a438:	9000a4b3 	.word	0x9000a4b3
9000a43c:	9000a4b3 	.word	0x9000a4b3
9000a440:	9000a4b3 	.word	0x9000a4b3
9000a444:	9000a4a5 	.word	0x9000a4a5
9000a448:	2b40      	cmp	r3, #64	@ 0x40
9000a44a:	d02e      	beq.n	9000a4aa <UART_SetConfig+0x8aa>
9000a44c:	e031      	b.n	9000a4b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a44e:	f7fd fa97 	bl	90007980 <HAL_RCC_GetPCLK1Freq>
9000a452:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a454:	e033      	b.n	9000a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a456:	f7fd faa9 	bl	900079ac <HAL_RCC_GetPCLK2Freq>
9000a45a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a45c:	e02f      	b.n	9000a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a45e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a462:	4618      	mov	r0, r3
9000a464:	f7fe fcd8 	bl	90008e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a46c:	e027      	b.n	9000a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a46e:	f107 0318 	add.w	r3, r7, #24
9000a472:	4618      	mov	r0, r3
9000a474:	f7fe fe24 	bl	900090c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a478:	69fb      	ldr	r3, [r7, #28]
9000a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a47c:	e01f      	b.n	9000a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a47e:	4b2d      	ldr	r3, [pc, #180]	@ (9000a534 <UART_SetConfig+0x934>)
9000a480:	681b      	ldr	r3, [r3, #0]
9000a482:	f003 0320 	and.w	r3, r3, #32
9000a486:	2b00      	cmp	r3, #0
9000a488:	d009      	beq.n	9000a49e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a48a:	4b2a      	ldr	r3, [pc, #168]	@ (9000a534 <UART_SetConfig+0x934>)
9000a48c:	681b      	ldr	r3, [r3, #0]
9000a48e:	08db      	lsrs	r3, r3, #3
9000a490:	f003 0303 	and.w	r3, r3, #3
9000a494:	4a24      	ldr	r2, [pc, #144]	@ (9000a528 <UART_SetConfig+0x928>)
9000a496:	fa22 f303 	lsr.w	r3, r2, r3
9000a49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a49c:	e00f      	b.n	9000a4be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a49e:	4b22      	ldr	r3, [pc, #136]	@ (9000a528 <UART_SetConfig+0x928>)
9000a4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4a2:	e00c      	b.n	9000a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a4a4:	4b21      	ldr	r3, [pc, #132]	@ (9000a52c <UART_SetConfig+0x92c>)
9000a4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4a8:	e009      	b.n	9000a4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a4aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4b0:	e005      	b.n	9000a4be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a4b2:	2300      	movs	r3, #0
9000a4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a4b6:	2301      	movs	r3, #1
9000a4b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a4bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a4c0:	2b00      	cmp	r3, #0
9000a4c2:	f000 80e7 	beq.w	9000a694 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a4c6:	697b      	ldr	r3, [r7, #20]
9000a4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a4ca:	4a19      	ldr	r2, [pc, #100]	@ (9000a530 <UART_SetConfig+0x930>)
9000a4cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a4d0:	461a      	mov	r2, r3
9000a4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a4d4:	fbb3 f3f2 	udiv	r3, r3, r2
9000a4d8:	005a      	lsls	r2, r3, #1
9000a4da:	697b      	ldr	r3, [r7, #20]
9000a4dc:	685b      	ldr	r3, [r3, #4]
9000a4de:	085b      	lsrs	r3, r3, #1
9000a4e0:	441a      	add	r2, r3
9000a4e2:	697b      	ldr	r3, [r7, #20]
9000a4e4:	685b      	ldr	r3, [r3, #4]
9000a4e6:	fbb2 f3f3 	udiv	r3, r2, r3
9000a4ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4ee:	2b0f      	cmp	r3, #15
9000a4f0:	d916      	bls.n	9000a520 <UART_SetConfig+0x920>
9000a4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a4f8:	d212      	bcs.n	9000a520 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4fc:	b29b      	uxth	r3, r3
9000a4fe:	f023 030f 	bic.w	r3, r3, #15
9000a502:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a506:	085b      	lsrs	r3, r3, #1
9000a508:	b29b      	uxth	r3, r3
9000a50a:	f003 0307 	and.w	r3, r3, #7
9000a50e:	b29a      	uxth	r2, r3
9000a510:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a512:	4313      	orrs	r3, r2
9000a514:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a516:	697b      	ldr	r3, [r7, #20]
9000a518:	681b      	ldr	r3, [r3, #0]
9000a51a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a51c:	60da      	str	r2, [r3, #12]
9000a51e:	e0b9      	b.n	9000a694 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a520:	2301      	movs	r3, #1
9000a522:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a526:	e0b5      	b.n	9000a694 <UART_SetConfig+0xa94>
9000a528:	03d09000 	.word	0x03d09000
9000a52c:	003d0900 	.word	0x003d0900
9000a530:	9000cdbc 	.word	0x9000cdbc
9000a534:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a538:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a53c:	2b20      	cmp	r3, #32
9000a53e:	dc49      	bgt.n	9000a5d4 <UART_SetConfig+0x9d4>
9000a540:	2b00      	cmp	r3, #0
9000a542:	db7c      	blt.n	9000a63e <UART_SetConfig+0xa3e>
9000a544:	2b20      	cmp	r3, #32
9000a546:	d87a      	bhi.n	9000a63e <UART_SetConfig+0xa3e>
9000a548:	a201      	add	r2, pc, #4	@ (adr r2, 9000a550 <UART_SetConfig+0x950>)
9000a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a54e:	bf00      	nop
9000a550:	9000a5db 	.word	0x9000a5db
9000a554:	9000a5e3 	.word	0x9000a5e3
9000a558:	9000a63f 	.word	0x9000a63f
9000a55c:	9000a63f 	.word	0x9000a63f
9000a560:	9000a5eb 	.word	0x9000a5eb
9000a564:	9000a63f 	.word	0x9000a63f
9000a568:	9000a63f 	.word	0x9000a63f
9000a56c:	9000a63f 	.word	0x9000a63f
9000a570:	9000a5fb 	.word	0x9000a5fb
9000a574:	9000a63f 	.word	0x9000a63f
9000a578:	9000a63f 	.word	0x9000a63f
9000a57c:	9000a63f 	.word	0x9000a63f
9000a580:	9000a63f 	.word	0x9000a63f
9000a584:	9000a63f 	.word	0x9000a63f
9000a588:	9000a63f 	.word	0x9000a63f
9000a58c:	9000a63f 	.word	0x9000a63f
9000a590:	9000a60b 	.word	0x9000a60b
9000a594:	9000a63f 	.word	0x9000a63f
9000a598:	9000a63f 	.word	0x9000a63f
9000a59c:	9000a63f 	.word	0x9000a63f
9000a5a0:	9000a63f 	.word	0x9000a63f
9000a5a4:	9000a63f 	.word	0x9000a63f
9000a5a8:	9000a63f 	.word	0x9000a63f
9000a5ac:	9000a63f 	.word	0x9000a63f
9000a5b0:	9000a63f 	.word	0x9000a63f
9000a5b4:	9000a63f 	.word	0x9000a63f
9000a5b8:	9000a63f 	.word	0x9000a63f
9000a5bc:	9000a63f 	.word	0x9000a63f
9000a5c0:	9000a63f 	.word	0x9000a63f
9000a5c4:	9000a63f 	.word	0x9000a63f
9000a5c8:	9000a63f 	.word	0x9000a63f
9000a5cc:	9000a63f 	.word	0x9000a63f
9000a5d0:	9000a631 	.word	0x9000a631
9000a5d4:	2b40      	cmp	r3, #64	@ 0x40
9000a5d6:	d02e      	beq.n	9000a636 <UART_SetConfig+0xa36>
9000a5d8:	e031      	b.n	9000a63e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a5da:	f7fd f9d1 	bl	90007980 <HAL_RCC_GetPCLK1Freq>
9000a5de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a5e0:	e033      	b.n	9000a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a5e2:	f7fd f9e3 	bl	900079ac <HAL_RCC_GetPCLK2Freq>
9000a5e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a5e8:	e02f      	b.n	9000a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a5ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a5ee:	4618      	mov	r0, r3
9000a5f0:	f7fe fc12 	bl	90008e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a5f8:	e027      	b.n	9000a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a5fa:	f107 0318 	add.w	r3, r7, #24
9000a5fe:	4618      	mov	r0, r3
9000a600:	f7fe fd5e 	bl	900090c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a604:	69fb      	ldr	r3, [r7, #28]
9000a606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a608:	e01f      	b.n	9000a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a60a:	4b2d      	ldr	r3, [pc, #180]	@ (9000a6c0 <UART_SetConfig+0xac0>)
9000a60c:	681b      	ldr	r3, [r3, #0]
9000a60e:	f003 0320 	and.w	r3, r3, #32
9000a612:	2b00      	cmp	r3, #0
9000a614:	d009      	beq.n	9000a62a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a616:	4b2a      	ldr	r3, [pc, #168]	@ (9000a6c0 <UART_SetConfig+0xac0>)
9000a618:	681b      	ldr	r3, [r3, #0]
9000a61a:	08db      	lsrs	r3, r3, #3
9000a61c:	f003 0303 	and.w	r3, r3, #3
9000a620:	4a28      	ldr	r2, [pc, #160]	@ (9000a6c4 <UART_SetConfig+0xac4>)
9000a622:	fa22 f303 	lsr.w	r3, r2, r3
9000a626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a628:	e00f      	b.n	9000a64a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a62a:	4b26      	ldr	r3, [pc, #152]	@ (9000a6c4 <UART_SetConfig+0xac4>)
9000a62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a62e:	e00c      	b.n	9000a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a630:	4b25      	ldr	r3, [pc, #148]	@ (9000a6c8 <UART_SetConfig+0xac8>)
9000a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a634:	e009      	b.n	9000a64a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a63c:	e005      	b.n	9000a64a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a63e:	2300      	movs	r3, #0
9000a640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a642:	2301      	movs	r3, #1
9000a644:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a648:	bf00      	nop
    }

    if (pclk != 0U)
9000a64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a64c:	2b00      	cmp	r3, #0
9000a64e:	d021      	beq.n	9000a694 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a650:	697b      	ldr	r3, [r7, #20]
9000a652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a654:	4a1d      	ldr	r2, [pc, #116]	@ (9000a6cc <UART_SetConfig+0xacc>)
9000a656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a65a:	461a      	mov	r2, r3
9000a65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a65e:	fbb3 f2f2 	udiv	r2, r3, r2
9000a662:	697b      	ldr	r3, [r7, #20]
9000a664:	685b      	ldr	r3, [r3, #4]
9000a666:	085b      	lsrs	r3, r3, #1
9000a668:	441a      	add	r2, r3
9000a66a:	697b      	ldr	r3, [r7, #20]
9000a66c:	685b      	ldr	r3, [r3, #4]
9000a66e:	fbb2 f3f3 	udiv	r3, r2, r3
9000a672:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a676:	2b0f      	cmp	r3, #15
9000a678:	d909      	bls.n	9000a68e <UART_SetConfig+0xa8e>
9000a67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a67c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a680:	d205      	bcs.n	9000a68e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a684:	b29a      	uxth	r2, r3
9000a686:	697b      	ldr	r3, [r7, #20]
9000a688:	681b      	ldr	r3, [r3, #0]
9000a68a:	60da      	str	r2, [r3, #12]
9000a68c:	e002      	b.n	9000a694 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a68e:	2301      	movs	r3, #1
9000a690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a694:	697b      	ldr	r3, [r7, #20]
9000a696:	2201      	movs	r2, #1
9000a698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a69c:	697b      	ldr	r3, [r7, #20]
9000a69e:	2201      	movs	r2, #1
9000a6a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a6a4:	697b      	ldr	r3, [r7, #20]
9000a6a6:	2200      	movs	r2, #0
9000a6a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a6aa:	697b      	ldr	r3, [r7, #20]
9000a6ac:	2200      	movs	r2, #0
9000a6ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a6b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a6b4:	4618      	mov	r0, r3
9000a6b6:	3748      	adds	r7, #72	@ 0x48
9000a6b8:	46bd      	mov	sp, r7
9000a6ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a6be:	bf00      	nop
9000a6c0:	58024400 	.word	0x58024400
9000a6c4:	03d09000 	.word	0x03d09000
9000a6c8:	003d0900 	.word	0x003d0900
9000a6cc:	9000cdbc 	.word	0x9000cdbc

9000a6d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a6d0:	b480      	push	{r7}
9000a6d2:	b083      	sub	sp, #12
9000a6d4:	af00      	add	r7, sp, #0
9000a6d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a6d8:	687b      	ldr	r3, [r7, #4]
9000a6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a6dc:	f003 0308 	and.w	r3, r3, #8
9000a6e0:	2b00      	cmp	r3, #0
9000a6e2:	d00a      	beq.n	9000a6fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a6e4:	687b      	ldr	r3, [r7, #4]
9000a6e6:	681b      	ldr	r3, [r3, #0]
9000a6e8:	685b      	ldr	r3, [r3, #4]
9000a6ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a6ee:	687b      	ldr	r3, [r7, #4]
9000a6f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a6f2:	687b      	ldr	r3, [r7, #4]
9000a6f4:	681b      	ldr	r3, [r3, #0]
9000a6f6:	430a      	orrs	r2, r1
9000a6f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a6fa:	687b      	ldr	r3, [r7, #4]
9000a6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a6fe:	f003 0301 	and.w	r3, r3, #1
9000a702:	2b00      	cmp	r3, #0
9000a704:	d00a      	beq.n	9000a71c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a706:	687b      	ldr	r3, [r7, #4]
9000a708:	681b      	ldr	r3, [r3, #0]
9000a70a:	685b      	ldr	r3, [r3, #4]
9000a70c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a710:	687b      	ldr	r3, [r7, #4]
9000a712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a714:	687b      	ldr	r3, [r7, #4]
9000a716:	681b      	ldr	r3, [r3, #0]
9000a718:	430a      	orrs	r2, r1
9000a71a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a71c:	687b      	ldr	r3, [r7, #4]
9000a71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a720:	f003 0302 	and.w	r3, r3, #2
9000a724:	2b00      	cmp	r3, #0
9000a726:	d00a      	beq.n	9000a73e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a728:	687b      	ldr	r3, [r7, #4]
9000a72a:	681b      	ldr	r3, [r3, #0]
9000a72c:	685b      	ldr	r3, [r3, #4]
9000a72e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000a732:	687b      	ldr	r3, [r7, #4]
9000a734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000a736:	687b      	ldr	r3, [r7, #4]
9000a738:	681b      	ldr	r3, [r3, #0]
9000a73a:	430a      	orrs	r2, r1
9000a73c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000a73e:	687b      	ldr	r3, [r7, #4]
9000a740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a742:	f003 0304 	and.w	r3, r3, #4
9000a746:	2b00      	cmp	r3, #0
9000a748:	d00a      	beq.n	9000a760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000a74a:	687b      	ldr	r3, [r7, #4]
9000a74c:	681b      	ldr	r3, [r3, #0]
9000a74e:	685b      	ldr	r3, [r3, #4]
9000a750:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000a754:	687b      	ldr	r3, [r7, #4]
9000a756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000a758:	687b      	ldr	r3, [r7, #4]
9000a75a:	681b      	ldr	r3, [r3, #0]
9000a75c:	430a      	orrs	r2, r1
9000a75e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000a760:	687b      	ldr	r3, [r7, #4]
9000a762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a764:	f003 0310 	and.w	r3, r3, #16
9000a768:	2b00      	cmp	r3, #0
9000a76a:	d00a      	beq.n	9000a782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000a76c:	687b      	ldr	r3, [r7, #4]
9000a76e:	681b      	ldr	r3, [r3, #0]
9000a770:	689b      	ldr	r3, [r3, #8]
9000a772:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000a776:	687b      	ldr	r3, [r7, #4]
9000a778:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a77a:	687b      	ldr	r3, [r7, #4]
9000a77c:	681b      	ldr	r3, [r3, #0]
9000a77e:	430a      	orrs	r2, r1
9000a780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000a782:	687b      	ldr	r3, [r7, #4]
9000a784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a786:	f003 0320 	and.w	r3, r3, #32
9000a78a:	2b00      	cmp	r3, #0
9000a78c:	d00a      	beq.n	9000a7a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000a78e:	687b      	ldr	r3, [r7, #4]
9000a790:	681b      	ldr	r3, [r3, #0]
9000a792:	689b      	ldr	r3, [r3, #8]
9000a794:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000a798:	687b      	ldr	r3, [r7, #4]
9000a79a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000a79c:	687b      	ldr	r3, [r7, #4]
9000a79e:	681b      	ldr	r3, [r3, #0]
9000a7a0:	430a      	orrs	r2, r1
9000a7a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000a7a4:	687b      	ldr	r3, [r7, #4]
9000a7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a7ac:	2b00      	cmp	r3, #0
9000a7ae:	d01a      	beq.n	9000a7e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000a7b0:	687b      	ldr	r3, [r7, #4]
9000a7b2:	681b      	ldr	r3, [r3, #0]
9000a7b4:	685b      	ldr	r3, [r3, #4]
9000a7b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000a7ba:	687b      	ldr	r3, [r7, #4]
9000a7bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a7be:	687b      	ldr	r3, [r7, #4]
9000a7c0:	681b      	ldr	r3, [r3, #0]
9000a7c2:	430a      	orrs	r2, r1
9000a7c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000a7c6:	687b      	ldr	r3, [r7, #4]
9000a7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000a7ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a7ce:	d10a      	bne.n	9000a7e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000a7d0:	687b      	ldr	r3, [r7, #4]
9000a7d2:	681b      	ldr	r3, [r3, #0]
9000a7d4:	685b      	ldr	r3, [r3, #4]
9000a7d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000a7da:	687b      	ldr	r3, [r7, #4]
9000a7dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000a7de:	687b      	ldr	r3, [r7, #4]
9000a7e0:	681b      	ldr	r3, [r3, #0]
9000a7e2:	430a      	orrs	r2, r1
9000a7e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000a7e6:	687b      	ldr	r3, [r7, #4]
9000a7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a7ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000a7ee:	2b00      	cmp	r3, #0
9000a7f0:	d00a      	beq.n	9000a808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000a7f2:	687b      	ldr	r3, [r7, #4]
9000a7f4:	681b      	ldr	r3, [r3, #0]
9000a7f6:	685b      	ldr	r3, [r3, #4]
9000a7f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000a7fc:	687b      	ldr	r3, [r7, #4]
9000a7fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000a800:	687b      	ldr	r3, [r7, #4]
9000a802:	681b      	ldr	r3, [r3, #0]
9000a804:	430a      	orrs	r2, r1
9000a806:	605a      	str	r2, [r3, #4]
  }
}
9000a808:	bf00      	nop
9000a80a:	370c      	adds	r7, #12
9000a80c:	46bd      	mov	sp, r7
9000a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a812:	4770      	bx	lr

9000a814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000a814:	b580      	push	{r7, lr}
9000a816:	b098      	sub	sp, #96	@ 0x60
9000a818:	af02      	add	r7, sp, #8
9000a81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000a81c:	687b      	ldr	r3, [r7, #4]
9000a81e:	2200      	movs	r2, #0
9000a820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000a824:	f7f8 fc4a 	bl	900030bc <HAL_GetTick>
9000a828:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000a82a:	687b      	ldr	r3, [r7, #4]
9000a82c:	681b      	ldr	r3, [r3, #0]
9000a82e:	681b      	ldr	r3, [r3, #0]
9000a830:	f003 0308 	and.w	r3, r3, #8
9000a834:	2b08      	cmp	r3, #8
9000a836:	d12f      	bne.n	9000a898 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a838:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a83c:	9300      	str	r3, [sp, #0]
9000a83e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a840:	2200      	movs	r2, #0
9000a842:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000a846:	6878      	ldr	r0, [r7, #4]
9000a848:	f000 f88e 	bl	9000a968 <UART_WaitOnFlagUntilTimeout>
9000a84c:	4603      	mov	r3, r0
9000a84e:	2b00      	cmp	r3, #0
9000a850:	d022      	beq.n	9000a898 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000a852:	687b      	ldr	r3, [r7, #4]
9000a854:	681b      	ldr	r3, [r3, #0]
9000a856:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a85a:	e853 3f00 	ldrex	r3, [r3]
9000a85e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000a860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000a862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000a866:	653b      	str	r3, [r7, #80]	@ 0x50
9000a868:	687b      	ldr	r3, [r7, #4]
9000a86a:	681b      	ldr	r3, [r3, #0]
9000a86c:	461a      	mov	r2, r3
9000a86e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000a870:	647b      	str	r3, [r7, #68]	@ 0x44
9000a872:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000a876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000a878:	e841 2300 	strex	r3, r2, [r1]
9000a87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000a87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a880:	2b00      	cmp	r3, #0
9000a882:	d1e6      	bne.n	9000a852 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000a884:	687b      	ldr	r3, [r7, #4]
9000a886:	2220      	movs	r2, #32
9000a888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000a88c:	687b      	ldr	r3, [r7, #4]
9000a88e:	2200      	movs	r2, #0
9000a890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000a894:	2303      	movs	r3, #3
9000a896:	e063      	b.n	9000a960 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000a898:	687b      	ldr	r3, [r7, #4]
9000a89a:	681b      	ldr	r3, [r3, #0]
9000a89c:	681b      	ldr	r3, [r3, #0]
9000a89e:	f003 0304 	and.w	r3, r3, #4
9000a8a2:	2b04      	cmp	r3, #4
9000a8a4:	d149      	bne.n	9000a93a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a8a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a8aa:	9300      	str	r3, [sp, #0]
9000a8ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a8ae:	2200      	movs	r2, #0
9000a8b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000a8b4:	6878      	ldr	r0, [r7, #4]
9000a8b6:	f000 f857 	bl	9000a968 <UART_WaitOnFlagUntilTimeout>
9000a8ba:	4603      	mov	r3, r0
9000a8bc:	2b00      	cmp	r3, #0
9000a8be:	d03c      	beq.n	9000a93a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000a8c0:	687b      	ldr	r3, [r7, #4]
9000a8c2:	681b      	ldr	r3, [r3, #0]
9000a8c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a8c8:	e853 3f00 	ldrex	r3, [r3]
9000a8cc:	623b      	str	r3, [r7, #32]
   return(result);
9000a8ce:	6a3b      	ldr	r3, [r7, #32]
9000a8d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000a8d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000a8d6:	687b      	ldr	r3, [r7, #4]
9000a8d8:	681b      	ldr	r3, [r3, #0]
9000a8da:	461a      	mov	r2, r3
9000a8dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000a8de:	633b      	str	r3, [r7, #48]	@ 0x30
9000a8e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a8e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000a8e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a8e6:	e841 2300 	strex	r3, r2, [r1]
9000a8ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a8ee:	2b00      	cmp	r3, #0
9000a8f0:	d1e6      	bne.n	9000a8c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000a8f2:	687b      	ldr	r3, [r7, #4]
9000a8f4:	681b      	ldr	r3, [r3, #0]
9000a8f6:	3308      	adds	r3, #8
9000a8f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a8fa:	693b      	ldr	r3, [r7, #16]
9000a8fc:	e853 3f00 	ldrex	r3, [r3]
9000a900:	60fb      	str	r3, [r7, #12]
   return(result);
9000a902:	68fb      	ldr	r3, [r7, #12]
9000a904:	f023 0301 	bic.w	r3, r3, #1
9000a908:	64bb      	str	r3, [r7, #72]	@ 0x48
9000a90a:	687b      	ldr	r3, [r7, #4]
9000a90c:	681b      	ldr	r3, [r3, #0]
9000a90e:	3308      	adds	r3, #8
9000a910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000a912:	61fa      	str	r2, [r7, #28]
9000a914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a916:	69b9      	ldr	r1, [r7, #24]
9000a918:	69fa      	ldr	r2, [r7, #28]
9000a91a:	e841 2300 	strex	r3, r2, [r1]
9000a91e:	617b      	str	r3, [r7, #20]
   return(result);
9000a920:	697b      	ldr	r3, [r7, #20]
9000a922:	2b00      	cmp	r3, #0
9000a924:	d1e5      	bne.n	9000a8f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000a926:	687b      	ldr	r3, [r7, #4]
9000a928:	2220      	movs	r2, #32
9000a92a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000a92e:	687b      	ldr	r3, [r7, #4]
9000a930:	2200      	movs	r2, #0
9000a932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000a936:	2303      	movs	r3, #3
9000a938:	e012      	b.n	9000a960 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000a93a:	687b      	ldr	r3, [r7, #4]
9000a93c:	2220      	movs	r2, #32
9000a93e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000a942:	687b      	ldr	r3, [r7, #4]
9000a944:	2220      	movs	r2, #32
9000a946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000a94a:	687b      	ldr	r3, [r7, #4]
9000a94c:	2200      	movs	r2, #0
9000a94e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000a950:	687b      	ldr	r3, [r7, #4]
9000a952:	2200      	movs	r2, #0
9000a954:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000a956:	687b      	ldr	r3, [r7, #4]
9000a958:	2200      	movs	r2, #0
9000a95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000a95e:	2300      	movs	r3, #0
}
9000a960:	4618      	mov	r0, r3
9000a962:	3758      	adds	r7, #88	@ 0x58
9000a964:	46bd      	mov	sp, r7
9000a966:	bd80      	pop	{r7, pc}

9000a968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000a968:	b580      	push	{r7, lr}
9000a96a:	b084      	sub	sp, #16
9000a96c:	af00      	add	r7, sp, #0
9000a96e:	60f8      	str	r0, [r7, #12]
9000a970:	60b9      	str	r1, [r7, #8]
9000a972:	603b      	str	r3, [r7, #0]
9000a974:	4613      	mov	r3, r2
9000a976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000a978:	e04f      	b.n	9000aa1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000a97a:	69bb      	ldr	r3, [r7, #24]
9000a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
9000a980:	d04b      	beq.n	9000aa1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a982:	f7f8 fb9b 	bl	900030bc <HAL_GetTick>
9000a986:	4602      	mov	r2, r0
9000a988:	683b      	ldr	r3, [r7, #0]
9000a98a:	1ad3      	subs	r3, r2, r3
9000a98c:	69ba      	ldr	r2, [r7, #24]
9000a98e:	429a      	cmp	r2, r3
9000a990:	d302      	bcc.n	9000a998 <UART_WaitOnFlagUntilTimeout+0x30>
9000a992:	69bb      	ldr	r3, [r7, #24]
9000a994:	2b00      	cmp	r3, #0
9000a996:	d101      	bne.n	9000a99c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000a998:	2303      	movs	r3, #3
9000a99a:	e04e      	b.n	9000aa3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000a99c:	68fb      	ldr	r3, [r7, #12]
9000a99e:	681b      	ldr	r3, [r3, #0]
9000a9a0:	681b      	ldr	r3, [r3, #0]
9000a9a2:	f003 0304 	and.w	r3, r3, #4
9000a9a6:	2b00      	cmp	r3, #0
9000a9a8:	d037      	beq.n	9000aa1a <UART_WaitOnFlagUntilTimeout+0xb2>
9000a9aa:	68bb      	ldr	r3, [r7, #8]
9000a9ac:	2b80      	cmp	r3, #128	@ 0x80
9000a9ae:	d034      	beq.n	9000aa1a <UART_WaitOnFlagUntilTimeout+0xb2>
9000a9b0:	68bb      	ldr	r3, [r7, #8]
9000a9b2:	2b40      	cmp	r3, #64	@ 0x40
9000a9b4:	d031      	beq.n	9000aa1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000a9b6:	68fb      	ldr	r3, [r7, #12]
9000a9b8:	681b      	ldr	r3, [r3, #0]
9000a9ba:	69db      	ldr	r3, [r3, #28]
9000a9bc:	f003 0308 	and.w	r3, r3, #8
9000a9c0:	2b08      	cmp	r3, #8
9000a9c2:	d110      	bne.n	9000a9e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000a9c4:	68fb      	ldr	r3, [r7, #12]
9000a9c6:	681b      	ldr	r3, [r3, #0]
9000a9c8:	2208      	movs	r2, #8
9000a9ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000a9cc:	68f8      	ldr	r0, [r7, #12]
9000a9ce:	f000 f839 	bl	9000aa44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000a9d2:	68fb      	ldr	r3, [r7, #12]
9000a9d4:	2208      	movs	r2, #8
9000a9d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000a9da:	68fb      	ldr	r3, [r7, #12]
9000a9dc:	2200      	movs	r2, #0
9000a9de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000a9e2:	2301      	movs	r3, #1
9000a9e4:	e029      	b.n	9000aa3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000a9e6:	68fb      	ldr	r3, [r7, #12]
9000a9e8:	681b      	ldr	r3, [r3, #0]
9000a9ea:	69db      	ldr	r3, [r3, #28]
9000a9ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000a9f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000a9f4:	d111      	bne.n	9000aa1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000a9f6:	68fb      	ldr	r3, [r7, #12]
9000a9f8:	681b      	ldr	r3, [r3, #0]
9000a9fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000a9fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000aa00:	68f8      	ldr	r0, [r7, #12]
9000aa02:	f000 f81f 	bl	9000aa44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000aa06:	68fb      	ldr	r3, [r7, #12]
9000aa08:	2220      	movs	r2, #32
9000aa0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000aa0e:	68fb      	ldr	r3, [r7, #12]
9000aa10:	2200      	movs	r2, #0
9000aa12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000aa16:	2303      	movs	r3, #3
9000aa18:	e00f      	b.n	9000aa3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000aa1a:	68fb      	ldr	r3, [r7, #12]
9000aa1c:	681b      	ldr	r3, [r3, #0]
9000aa1e:	69da      	ldr	r2, [r3, #28]
9000aa20:	68bb      	ldr	r3, [r7, #8]
9000aa22:	4013      	ands	r3, r2
9000aa24:	68ba      	ldr	r2, [r7, #8]
9000aa26:	429a      	cmp	r2, r3
9000aa28:	bf0c      	ite	eq
9000aa2a:	2301      	moveq	r3, #1
9000aa2c:	2300      	movne	r3, #0
9000aa2e:	b2db      	uxtb	r3, r3
9000aa30:	461a      	mov	r2, r3
9000aa32:	79fb      	ldrb	r3, [r7, #7]
9000aa34:	429a      	cmp	r2, r3
9000aa36:	d0a0      	beq.n	9000a97a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000aa38:	2300      	movs	r3, #0
}
9000aa3a:	4618      	mov	r0, r3
9000aa3c:	3710      	adds	r7, #16
9000aa3e:	46bd      	mov	sp, r7
9000aa40:	bd80      	pop	{r7, pc}
	...

9000aa44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000aa44:	b480      	push	{r7}
9000aa46:	b095      	sub	sp, #84	@ 0x54
9000aa48:	af00      	add	r7, sp, #0
9000aa4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000aa4c:	687b      	ldr	r3, [r7, #4]
9000aa4e:	681b      	ldr	r3, [r3, #0]
9000aa50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000aa54:	e853 3f00 	ldrex	r3, [r3]
9000aa58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000aa5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000aa60:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000aa62:	687b      	ldr	r3, [r7, #4]
9000aa64:	681b      	ldr	r3, [r3, #0]
9000aa66:	461a      	mov	r2, r3
9000aa68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000aa6a:	643b      	str	r3, [r7, #64]	@ 0x40
9000aa6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000aa70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000aa72:	e841 2300 	strex	r3, r2, [r1]
9000aa76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000aa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000aa7a:	2b00      	cmp	r3, #0
9000aa7c:	d1e6      	bne.n	9000aa4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000aa7e:	687b      	ldr	r3, [r7, #4]
9000aa80:	681b      	ldr	r3, [r3, #0]
9000aa82:	3308      	adds	r3, #8
9000aa84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa86:	6a3b      	ldr	r3, [r7, #32]
9000aa88:	e853 3f00 	ldrex	r3, [r3]
9000aa8c:	61fb      	str	r3, [r7, #28]
   return(result);
9000aa8e:	69fa      	ldr	r2, [r7, #28]
9000aa90:	4b1e      	ldr	r3, [pc, #120]	@ (9000ab0c <UART_EndRxTransfer+0xc8>)
9000aa92:	4013      	ands	r3, r2
9000aa94:	64bb      	str	r3, [r7, #72]	@ 0x48
9000aa96:	687b      	ldr	r3, [r7, #4]
9000aa98:	681b      	ldr	r3, [r3, #0]
9000aa9a:	3308      	adds	r3, #8
9000aa9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000aa9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000aaa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aaa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000aaa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000aaa6:	e841 2300 	strex	r3, r2, [r1]
9000aaaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000aaae:	2b00      	cmp	r3, #0
9000aab0:	d1e5      	bne.n	9000aa7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000aab2:	687b      	ldr	r3, [r7, #4]
9000aab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000aab6:	2b01      	cmp	r3, #1
9000aab8:	d118      	bne.n	9000aaec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000aaba:	687b      	ldr	r3, [r7, #4]
9000aabc:	681b      	ldr	r3, [r3, #0]
9000aabe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aac0:	68fb      	ldr	r3, [r7, #12]
9000aac2:	e853 3f00 	ldrex	r3, [r3]
9000aac6:	60bb      	str	r3, [r7, #8]
   return(result);
9000aac8:	68bb      	ldr	r3, [r7, #8]
9000aaca:	f023 0310 	bic.w	r3, r3, #16
9000aace:	647b      	str	r3, [r7, #68]	@ 0x44
9000aad0:	687b      	ldr	r3, [r7, #4]
9000aad2:	681b      	ldr	r3, [r3, #0]
9000aad4:	461a      	mov	r2, r3
9000aad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000aad8:	61bb      	str	r3, [r7, #24]
9000aada:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aadc:	6979      	ldr	r1, [r7, #20]
9000aade:	69ba      	ldr	r2, [r7, #24]
9000aae0:	e841 2300 	strex	r3, r2, [r1]
9000aae4:	613b      	str	r3, [r7, #16]
   return(result);
9000aae6:	693b      	ldr	r3, [r7, #16]
9000aae8:	2b00      	cmp	r3, #0
9000aaea:	d1e6      	bne.n	9000aaba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000aaec:	687b      	ldr	r3, [r7, #4]
9000aaee:	2220      	movs	r2, #32
9000aaf0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000aaf4:	687b      	ldr	r3, [r7, #4]
9000aaf6:	2200      	movs	r2, #0
9000aaf8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000aafa:	687b      	ldr	r3, [r7, #4]
9000aafc:	2200      	movs	r2, #0
9000aafe:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000ab00:	bf00      	nop
9000ab02:	3754      	adds	r7, #84	@ 0x54
9000ab04:	46bd      	mov	sp, r7
9000ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ab0a:	4770      	bx	lr
9000ab0c:	effffffe 	.word	0xeffffffe

9000ab10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000ab10:	b480      	push	{r7}
9000ab12:	b085      	sub	sp, #20
9000ab14:	af00      	add	r7, sp, #0
9000ab16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ab18:	687b      	ldr	r3, [r7, #4]
9000ab1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ab1e:	2b01      	cmp	r3, #1
9000ab20:	d101      	bne.n	9000ab26 <HAL_UARTEx_DisableFifoMode+0x16>
9000ab22:	2302      	movs	r3, #2
9000ab24:	e027      	b.n	9000ab76 <HAL_UARTEx_DisableFifoMode+0x66>
9000ab26:	687b      	ldr	r3, [r7, #4]
9000ab28:	2201      	movs	r2, #1
9000ab2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ab2e:	687b      	ldr	r3, [r7, #4]
9000ab30:	2224      	movs	r2, #36	@ 0x24
9000ab32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ab36:	687b      	ldr	r3, [r7, #4]
9000ab38:	681b      	ldr	r3, [r3, #0]
9000ab3a:	681b      	ldr	r3, [r3, #0]
9000ab3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ab3e:	687b      	ldr	r3, [r7, #4]
9000ab40:	681b      	ldr	r3, [r3, #0]
9000ab42:	681a      	ldr	r2, [r3, #0]
9000ab44:	687b      	ldr	r3, [r7, #4]
9000ab46:	681b      	ldr	r3, [r3, #0]
9000ab48:	f022 0201 	bic.w	r2, r2, #1
9000ab4c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000ab4e:	68fb      	ldr	r3, [r7, #12]
9000ab50:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000ab54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000ab56:	687b      	ldr	r3, [r7, #4]
9000ab58:	2200      	movs	r2, #0
9000ab5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ab5c:	687b      	ldr	r3, [r7, #4]
9000ab5e:	681b      	ldr	r3, [r3, #0]
9000ab60:	68fa      	ldr	r2, [r7, #12]
9000ab62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ab64:	687b      	ldr	r3, [r7, #4]
9000ab66:	2220      	movs	r2, #32
9000ab68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ab6c:	687b      	ldr	r3, [r7, #4]
9000ab6e:	2200      	movs	r2, #0
9000ab70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ab74:	2300      	movs	r3, #0
}
9000ab76:	4618      	mov	r0, r3
9000ab78:	3714      	adds	r7, #20
9000ab7a:	46bd      	mov	sp, r7
9000ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ab80:	4770      	bx	lr

9000ab82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ab82:	b580      	push	{r7, lr}
9000ab84:	b084      	sub	sp, #16
9000ab86:	af00      	add	r7, sp, #0
9000ab88:	6078      	str	r0, [r7, #4]
9000ab8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ab8c:	687b      	ldr	r3, [r7, #4]
9000ab8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ab92:	2b01      	cmp	r3, #1
9000ab94:	d101      	bne.n	9000ab9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000ab96:	2302      	movs	r3, #2
9000ab98:	e02d      	b.n	9000abf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000ab9a:	687b      	ldr	r3, [r7, #4]
9000ab9c:	2201      	movs	r2, #1
9000ab9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000aba2:	687b      	ldr	r3, [r7, #4]
9000aba4:	2224      	movs	r2, #36	@ 0x24
9000aba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000abaa:	687b      	ldr	r3, [r7, #4]
9000abac:	681b      	ldr	r3, [r3, #0]
9000abae:	681b      	ldr	r3, [r3, #0]
9000abb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000abb2:	687b      	ldr	r3, [r7, #4]
9000abb4:	681b      	ldr	r3, [r3, #0]
9000abb6:	681a      	ldr	r2, [r3, #0]
9000abb8:	687b      	ldr	r3, [r7, #4]
9000abba:	681b      	ldr	r3, [r3, #0]
9000abbc:	f022 0201 	bic.w	r2, r2, #1
9000abc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000abc2:	687b      	ldr	r3, [r7, #4]
9000abc4:	681b      	ldr	r3, [r3, #0]
9000abc6:	689b      	ldr	r3, [r3, #8]
9000abc8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000abcc:	687b      	ldr	r3, [r7, #4]
9000abce:	681b      	ldr	r3, [r3, #0]
9000abd0:	683a      	ldr	r2, [r7, #0]
9000abd2:	430a      	orrs	r2, r1
9000abd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000abd6:	6878      	ldr	r0, [r7, #4]
9000abd8:	f000 f850 	bl	9000ac7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000abdc:	687b      	ldr	r3, [r7, #4]
9000abde:	681b      	ldr	r3, [r3, #0]
9000abe0:	68fa      	ldr	r2, [r7, #12]
9000abe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000abe4:	687b      	ldr	r3, [r7, #4]
9000abe6:	2220      	movs	r2, #32
9000abe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000abec:	687b      	ldr	r3, [r7, #4]
9000abee:	2200      	movs	r2, #0
9000abf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000abf4:	2300      	movs	r3, #0
}
9000abf6:	4618      	mov	r0, r3
9000abf8:	3710      	adds	r7, #16
9000abfa:	46bd      	mov	sp, r7
9000abfc:	bd80      	pop	{r7, pc}

9000abfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000abfe:	b580      	push	{r7, lr}
9000ac00:	b084      	sub	sp, #16
9000ac02:	af00      	add	r7, sp, #0
9000ac04:	6078      	str	r0, [r7, #4]
9000ac06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ac08:	687b      	ldr	r3, [r7, #4]
9000ac0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ac0e:	2b01      	cmp	r3, #1
9000ac10:	d101      	bne.n	9000ac16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000ac12:	2302      	movs	r3, #2
9000ac14:	e02d      	b.n	9000ac72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000ac16:	687b      	ldr	r3, [r7, #4]
9000ac18:	2201      	movs	r2, #1
9000ac1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ac1e:	687b      	ldr	r3, [r7, #4]
9000ac20:	2224      	movs	r2, #36	@ 0x24
9000ac22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ac26:	687b      	ldr	r3, [r7, #4]
9000ac28:	681b      	ldr	r3, [r3, #0]
9000ac2a:	681b      	ldr	r3, [r3, #0]
9000ac2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ac2e:	687b      	ldr	r3, [r7, #4]
9000ac30:	681b      	ldr	r3, [r3, #0]
9000ac32:	681a      	ldr	r2, [r3, #0]
9000ac34:	687b      	ldr	r3, [r7, #4]
9000ac36:	681b      	ldr	r3, [r3, #0]
9000ac38:	f022 0201 	bic.w	r2, r2, #1
9000ac3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000ac3e:	687b      	ldr	r3, [r7, #4]
9000ac40:	681b      	ldr	r3, [r3, #0]
9000ac42:	689b      	ldr	r3, [r3, #8]
9000ac44:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000ac48:	687b      	ldr	r3, [r7, #4]
9000ac4a:	681b      	ldr	r3, [r3, #0]
9000ac4c:	683a      	ldr	r2, [r7, #0]
9000ac4e:	430a      	orrs	r2, r1
9000ac50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ac52:	6878      	ldr	r0, [r7, #4]
9000ac54:	f000 f812 	bl	9000ac7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ac58:	687b      	ldr	r3, [r7, #4]
9000ac5a:	681b      	ldr	r3, [r3, #0]
9000ac5c:	68fa      	ldr	r2, [r7, #12]
9000ac5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ac60:	687b      	ldr	r3, [r7, #4]
9000ac62:	2220      	movs	r2, #32
9000ac64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ac68:	687b      	ldr	r3, [r7, #4]
9000ac6a:	2200      	movs	r2, #0
9000ac6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ac70:	2300      	movs	r3, #0
}
9000ac72:	4618      	mov	r0, r3
9000ac74:	3710      	adds	r7, #16
9000ac76:	46bd      	mov	sp, r7
9000ac78:	bd80      	pop	{r7, pc}
	...

9000ac7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000ac7c:	b480      	push	{r7}
9000ac7e:	b085      	sub	sp, #20
9000ac80:	af00      	add	r7, sp, #0
9000ac82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000ac84:	687b      	ldr	r3, [r7, #4]
9000ac86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000ac88:	2b00      	cmp	r3, #0
9000ac8a:	d108      	bne.n	9000ac9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000ac8c:	687b      	ldr	r3, [r7, #4]
9000ac8e:	2201      	movs	r2, #1
9000ac90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000ac94:	687b      	ldr	r3, [r7, #4]
9000ac96:	2201      	movs	r2, #1
9000ac98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000ac9c:	e031      	b.n	9000ad02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000ac9e:	2310      	movs	r3, #16
9000aca0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000aca2:	2310      	movs	r3, #16
9000aca4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000aca6:	687b      	ldr	r3, [r7, #4]
9000aca8:	681b      	ldr	r3, [r3, #0]
9000acaa:	689b      	ldr	r3, [r3, #8]
9000acac:	0e5b      	lsrs	r3, r3, #25
9000acae:	b2db      	uxtb	r3, r3
9000acb0:	f003 0307 	and.w	r3, r3, #7
9000acb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000acb6:	687b      	ldr	r3, [r7, #4]
9000acb8:	681b      	ldr	r3, [r3, #0]
9000acba:	689b      	ldr	r3, [r3, #8]
9000acbc:	0f5b      	lsrs	r3, r3, #29
9000acbe:	b2db      	uxtb	r3, r3
9000acc0:	f003 0307 	and.w	r3, r3, #7
9000acc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000acc6:	7bbb      	ldrb	r3, [r7, #14]
9000acc8:	7b3a      	ldrb	r2, [r7, #12]
9000acca:	4911      	ldr	r1, [pc, #68]	@ (9000ad10 <UARTEx_SetNbDataToProcess+0x94>)
9000accc:	5c8a      	ldrb	r2, [r1, r2]
9000acce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000acd2:	7b3a      	ldrb	r2, [r7, #12]
9000acd4:	490f      	ldr	r1, [pc, #60]	@ (9000ad14 <UARTEx_SetNbDataToProcess+0x98>)
9000acd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000acd8:	fb93 f3f2 	sdiv	r3, r3, r2
9000acdc:	b29a      	uxth	r2, r3
9000acde:	687b      	ldr	r3, [r7, #4]
9000ace0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000ace4:	7bfb      	ldrb	r3, [r7, #15]
9000ace6:	7b7a      	ldrb	r2, [r7, #13]
9000ace8:	4909      	ldr	r1, [pc, #36]	@ (9000ad10 <UARTEx_SetNbDataToProcess+0x94>)
9000acea:	5c8a      	ldrb	r2, [r1, r2]
9000acec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000acf0:	7b7a      	ldrb	r2, [r7, #13]
9000acf2:	4908      	ldr	r1, [pc, #32]	@ (9000ad14 <UARTEx_SetNbDataToProcess+0x98>)
9000acf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000acf6:	fb93 f3f2 	sdiv	r3, r3, r2
9000acfa:	b29a      	uxth	r2, r3
9000acfc:	687b      	ldr	r3, [r7, #4]
9000acfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000ad02:	bf00      	nop
9000ad04:	3714      	adds	r7, #20
9000ad06:	46bd      	mov	sp, r7
9000ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad0c:	4770      	bx	lr
9000ad0e:	bf00      	nop
9000ad10:	9000cdd4 	.word	0x9000cdd4
9000ad14:	9000cddc 	.word	0x9000cddc

9000ad18 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000ad18:	b480      	push	{r7}
9000ad1a:	b083      	sub	sp, #12
9000ad1c:	af00      	add	r7, sp, #0
9000ad1e:	6078      	str	r0, [r7, #4]
9000ad20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000ad22:	683b      	ldr	r3, [r7, #0]
9000ad24:	681b      	ldr	r3, [r3, #0]
9000ad26:	2b00      	cmp	r3, #0
9000ad28:	d121      	bne.n	9000ad6e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ad2a:	687b      	ldr	r3, [r7, #4]
9000ad2c:	681a      	ldr	r2, [r3, #0]
9000ad2e:	4b27      	ldr	r3, [pc, #156]	@ (9000adcc <FMC_SDRAM_Init+0xb4>)
9000ad30:	4013      	ands	r3, r2
9000ad32:	683a      	ldr	r2, [r7, #0]
9000ad34:	6851      	ldr	r1, [r2, #4]
9000ad36:	683a      	ldr	r2, [r7, #0]
9000ad38:	6892      	ldr	r2, [r2, #8]
9000ad3a:	4311      	orrs	r1, r2
9000ad3c:	683a      	ldr	r2, [r7, #0]
9000ad3e:	68d2      	ldr	r2, [r2, #12]
9000ad40:	4311      	orrs	r1, r2
9000ad42:	683a      	ldr	r2, [r7, #0]
9000ad44:	6912      	ldr	r2, [r2, #16]
9000ad46:	4311      	orrs	r1, r2
9000ad48:	683a      	ldr	r2, [r7, #0]
9000ad4a:	6952      	ldr	r2, [r2, #20]
9000ad4c:	4311      	orrs	r1, r2
9000ad4e:	683a      	ldr	r2, [r7, #0]
9000ad50:	6992      	ldr	r2, [r2, #24]
9000ad52:	4311      	orrs	r1, r2
9000ad54:	683a      	ldr	r2, [r7, #0]
9000ad56:	69d2      	ldr	r2, [r2, #28]
9000ad58:	4311      	orrs	r1, r2
9000ad5a:	683a      	ldr	r2, [r7, #0]
9000ad5c:	6a12      	ldr	r2, [r2, #32]
9000ad5e:	4311      	orrs	r1, r2
9000ad60:	683a      	ldr	r2, [r7, #0]
9000ad62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000ad64:	430a      	orrs	r2, r1
9000ad66:	431a      	orrs	r2, r3
9000ad68:	687b      	ldr	r3, [r7, #4]
9000ad6a:	601a      	str	r2, [r3, #0]
9000ad6c:	e026      	b.n	9000adbc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ad6e:	687b      	ldr	r3, [r7, #4]
9000ad70:	681b      	ldr	r3, [r3, #0]
9000ad72:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000ad76:	683b      	ldr	r3, [r7, #0]
9000ad78:	69d9      	ldr	r1, [r3, #28]
9000ad7a:	683b      	ldr	r3, [r7, #0]
9000ad7c:	6a1b      	ldr	r3, [r3, #32]
9000ad7e:	4319      	orrs	r1, r3
9000ad80:	683b      	ldr	r3, [r7, #0]
9000ad82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000ad84:	430b      	orrs	r3, r1
9000ad86:	431a      	orrs	r2, r3
9000ad88:	687b      	ldr	r3, [r7, #4]
9000ad8a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000ad8c:	687b      	ldr	r3, [r7, #4]
9000ad8e:	685a      	ldr	r2, [r3, #4]
9000ad90:	4b0e      	ldr	r3, [pc, #56]	@ (9000adcc <FMC_SDRAM_Init+0xb4>)
9000ad92:	4013      	ands	r3, r2
9000ad94:	683a      	ldr	r2, [r7, #0]
9000ad96:	6851      	ldr	r1, [r2, #4]
9000ad98:	683a      	ldr	r2, [r7, #0]
9000ad9a:	6892      	ldr	r2, [r2, #8]
9000ad9c:	4311      	orrs	r1, r2
9000ad9e:	683a      	ldr	r2, [r7, #0]
9000ada0:	68d2      	ldr	r2, [r2, #12]
9000ada2:	4311      	orrs	r1, r2
9000ada4:	683a      	ldr	r2, [r7, #0]
9000ada6:	6912      	ldr	r2, [r2, #16]
9000ada8:	4311      	orrs	r1, r2
9000adaa:	683a      	ldr	r2, [r7, #0]
9000adac:	6952      	ldr	r2, [r2, #20]
9000adae:	4311      	orrs	r1, r2
9000adb0:	683a      	ldr	r2, [r7, #0]
9000adb2:	6992      	ldr	r2, [r2, #24]
9000adb4:	430a      	orrs	r2, r1
9000adb6:	431a      	orrs	r2, r3
9000adb8:	687b      	ldr	r3, [r7, #4]
9000adba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000adbc:	2300      	movs	r3, #0
}
9000adbe:	4618      	mov	r0, r3
9000adc0:	370c      	adds	r7, #12
9000adc2:	46bd      	mov	sp, r7
9000adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000adc8:	4770      	bx	lr
9000adca:	bf00      	nop
9000adcc:	ffff8000 	.word	0xffff8000

9000add0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000add0:	b480      	push	{r7}
9000add2:	b085      	sub	sp, #20
9000add4:	af00      	add	r7, sp, #0
9000add6:	60f8      	str	r0, [r7, #12]
9000add8:	60b9      	str	r1, [r7, #8]
9000adda:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000addc:	687b      	ldr	r3, [r7, #4]
9000adde:	2b00      	cmp	r3, #0
9000ade0:	d128      	bne.n	9000ae34 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ade2:	68fb      	ldr	r3, [r7, #12]
9000ade4:	689b      	ldr	r3, [r3, #8]
9000ade6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000adea:	68bb      	ldr	r3, [r7, #8]
9000adec:	681b      	ldr	r3, [r3, #0]
9000adee:	1e59      	subs	r1, r3, #1
9000adf0:	68bb      	ldr	r3, [r7, #8]
9000adf2:	685b      	ldr	r3, [r3, #4]
9000adf4:	3b01      	subs	r3, #1
9000adf6:	011b      	lsls	r3, r3, #4
9000adf8:	4319      	orrs	r1, r3
9000adfa:	68bb      	ldr	r3, [r7, #8]
9000adfc:	689b      	ldr	r3, [r3, #8]
9000adfe:	3b01      	subs	r3, #1
9000ae00:	021b      	lsls	r3, r3, #8
9000ae02:	4319      	orrs	r1, r3
9000ae04:	68bb      	ldr	r3, [r7, #8]
9000ae06:	68db      	ldr	r3, [r3, #12]
9000ae08:	3b01      	subs	r3, #1
9000ae0a:	031b      	lsls	r3, r3, #12
9000ae0c:	4319      	orrs	r1, r3
9000ae0e:	68bb      	ldr	r3, [r7, #8]
9000ae10:	691b      	ldr	r3, [r3, #16]
9000ae12:	3b01      	subs	r3, #1
9000ae14:	041b      	lsls	r3, r3, #16
9000ae16:	4319      	orrs	r1, r3
9000ae18:	68bb      	ldr	r3, [r7, #8]
9000ae1a:	695b      	ldr	r3, [r3, #20]
9000ae1c:	3b01      	subs	r3, #1
9000ae1e:	051b      	lsls	r3, r3, #20
9000ae20:	4319      	orrs	r1, r3
9000ae22:	68bb      	ldr	r3, [r7, #8]
9000ae24:	699b      	ldr	r3, [r3, #24]
9000ae26:	3b01      	subs	r3, #1
9000ae28:	061b      	lsls	r3, r3, #24
9000ae2a:	430b      	orrs	r3, r1
9000ae2c:	431a      	orrs	r2, r3
9000ae2e:	68fb      	ldr	r3, [r7, #12]
9000ae30:	609a      	str	r2, [r3, #8]
9000ae32:	e02d      	b.n	9000ae90 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ae34:	68fb      	ldr	r3, [r7, #12]
9000ae36:	689a      	ldr	r2, [r3, #8]
9000ae38:	4b19      	ldr	r3, [pc, #100]	@ (9000aea0 <FMC_SDRAM_Timing_Init+0xd0>)
9000ae3a:	4013      	ands	r3, r2
9000ae3c:	68ba      	ldr	r2, [r7, #8]
9000ae3e:	68d2      	ldr	r2, [r2, #12]
9000ae40:	3a01      	subs	r2, #1
9000ae42:	0311      	lsls	r1, r2, #12
9000ae44:	68ba      	ldr	r2, [r7, #8]
9000ae46:	6952      	ldr	r2, [r2, #20]
9000ae48:	3a01      	subs	r2, #1
9000ae4a:	0512      	lsls	r2, r2, #20
9000ae4c:	430a      	orrs	r2, r1
9000ae4e:	431a      	orrs	r2, r3
9000ae50:	68fb      	ldr	r3, [r7, #12]
9000ae52:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000ae54:	68fb      	ldr	r3, [r7, #12]
9000ae56:	68db      	ldr	r3, [r3, #12]
9000ae58:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000ae5c:	68bb      	ldr	r3, [r7, #8]
9000ae5e:	681b      	ldr	r3, [r3, #0]
9000ae60:	1e59      	subs	r1, r3, #1
9000ae62:	68bb      	ldr	r3, [r7, #8]
9000ae64:	685b      	ldr	r3, [r3, #4]
9000ae66:	3b01      	subs	r3, #1
9000ae68:	011b      	lsls	r3, r3, #4
9000ae6a:	4319      	orrs	r1, r3
9000ae6c:	68bb      	ldr	r3, [r7, #8]
9000ae6e:	689b      	ldr	r3, [r3, #8]
9000ae70:	3b01      	subs	r3, #1
9000ae72:	021b      	lsls	r3, r3, #8
9000ae74:	4319      	orrs	r1, r3
9000ae76:	68bb      	ldr	r3, [r7, #8]
9000ae78:	691b      	ldr	r3, [r3, #16]
9000ae7a:	3b01      	subs	r3, #1
9000ae7c:	041b      	lsls	r3, r3, #16
9000ae7e:	4319      	orrs	r1, r3
9000ae80:	68bb      	ldr	r3, [r7, #8]
9000ae82:	699b      	ldr	r3, [r3, #24]
9000ae84:	3b01      	subs	r3, #1
9000ae86:	061b      	lsls	r3, r3, #24
9000ae88:	430b      	orrs	r3, r1
9000ae8a:	431a      	orrs	r2, r3
9000ae8c:	68fb      	ldr	r3, [r7, #12]
9000ae8e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000ae90:	2300      	movs	r3, #0
}
9000ae92:	4618      	mov	r0, r3
9000ae94:	3714      	adds	r7, #20
9000ae96:	46bd      	mov	sp, r7
9000ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ae9c:	4770      	bx	lr
9000ae9e:	bf00      	nop
9000aea0:	ff0f0fff 	.word	0xff0f0fff

9000aea4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000aea4:	b480      	push	{r7}
9000aea6:	b085      	sub	sp, #20
9000aea8:	af00      	add	r7, sp, #0
9000aeaa:	60f8      	str	r0, [r7, #12]
9000aeac:	60b9      	str	r1, [r7, #8]
9000aeae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000aeb0:	68fb      	ldr	r3, [r7, #12]
9000aeb2:	691a      	ldr	r2, [r3, #16]
9000aeb4:	4b0c      	ldr	r3, [pc, #48]	@ (9000aee8 <FMC_SDRAM_SendCommand+0x44>)
9000aeb6:	4013      	ands	r3, r2
9000aeb8:	68ba      	ldr	r2, [r7, #8]
9000aeba:	6811      	ldr	r1, [r2, #0]
9000aebc:	68ba      	ldr	r2, [r7, #8]
9000aebe:	6852      	ldr	r2, [r2, #4]
9000aec0:	4311      	orrs	r1, r2
9000aec2:	68ba      	ldr	r2, [r7, #8]
9000aec4:	6892      	ldr	r2, [r2, #8]
9000aec6:	3a01      	subs	r2, #1
9000aec8:	0152      	lsls	r2, r2, #5
9000aeca:	4311      	orrs	r1, r2
9000aecc:	68ba      	ldr	r2, [r7, #8]
9000aece:	68d2      	ldr	r2, [r2, #12]
9000aed0:	0252      	lsls	r2, r2, #9
9000aed2:	430a      	orrs	r2, r1
9000aed4:	431a      	orrs	r2, r3
9000aed6:	68fb      	ldr	r3, [r7, #12]
9000aed8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000aeda:	2300      	movs	r3, #0
}
9000aedc:	4618      	mov	r0, r3
9000aede:	3714      	adds	r7, #20
9000aee0:	46bd      	mov	sp, r7
9000aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aee6:	4770      	bx	lr
9000aee8:	ffc00000 	.word	0xffc00000

9000aeec <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000aeec:	b480      	push	{r7}
9000aeee:	b083      	sub	sp, #12
9000aef0:	af00      	add	r7, sp, #0
9000aef2:	6078      	str	r0, [r7, #4]
9000aef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000aef6:	687b      	ldr	r3, [r7, #4]
9000aef8:	695a      	ldr	r2, [r3, #20]
9000aefa:	4b07      	ldr	r3, [pc, #28]	@ (9000af18 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000aefc:	4013      	ands	r3, r2
9000aefe:	683a      	ldr	r2, [r7, #0]
9000af00:	0052      	lsls	r2, r2, #1
9000af02:	431a      	orrs	r2, r3
9000af04:	687b      	ldr	r3, [r7, #4]
9000af06:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000af08:	2300      	movs	r3, #0
}
9000af0a:	4618      	mov	r0, r3
9000af0c:	370c      	adds	r7, #12
9000af0e:	46bd      	mov	sp, r7
9000af10:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af14:	4770      	bx	lr
9000af16:	bf00      	nop
9000af18:	ffffc001 	.word	0xffffc001

9000af1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000af1c:	b480      	push	{r7}
9000af1e:	b083      	sub	sp, #12
9000af20:	af00      	add	r7, sp, #0
9000af22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000af24:	687b      	ldr	r3, [r7, #4]
9000af26:	689b      	ldr	r3, [r3, #8]
9000af28:	f043 0201 	orr.w	r2, r3, #1
9000af2c:	687b      	ldr	r3, [r7, #4]
9000af2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000af30:	2300      	movs	r3, #0
}
9000af32:	4618      	mov	r0, r3
9000af34:	370c      	adds	r7, #12
9000af36:	46bd      	mov	sp, r7
9000af38:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af3c:	4770      	bx	lr

9000af3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000af3e:	b480      	push	{r7}
9000af40:	b083      	sub	sp, #12
9000af42:	af00      	add	r7, sp, #0
9000af44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000af46:	687b      	ldr	r3, [r7, #4]
9000af48:	689b      	ldr	r3, [r3, #8]
9000af4a:	f023 0201 	bic.w	r2, r3, #1
9000af4e:	687b      	ldr	r3, [r7, #4]
9000af50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000af52:	2300      	movs	r3, #0
}
9000af54:	4618      	mov	r0, r3
9000af56:	370c      	adds	r7, #12
9000af58:	46bd      	mov	sp, r7
9000af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af5e:	4770      	bx	lr

9000af60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000af60:	b480      	push	{r7}
9000af62:	b085      	sub	sp, #20
9000af64:	af00      	add	r7, sp, #0
9000af66:	6078      	str	r0, [r7, #4]
9000af68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000af6a:	2300      	movs	r3, #0
9000af6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000af6e:	68fb      	ldr	r3, [r7, #12]
9000af70:	3301      	adds	r3, #1
9000af72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000af74:	68fb      	ldr	r3, [r7, #12]
9000af76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000af7a:	d901      	bls.n	9000af80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000af7c:	2303      	movs	r3, #3
9000af7e:	e01b      	b.n	9000afb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000af80:	687b      	ldr	r3, [r7, #4]
9000af82:	691b      	ldr	r3, [r3, #16]
9000af84:	2b00      	cmp	r3, #0
9000af86:	daf2      	bge.n	9000af6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000af88:	2300      	movs	r3, #0
9000af8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000af8c:	683b      	ldr	r3, [r7, #0]
9000af8e:	019b      	lsls	r3, r3, #6
9000af90:	f043 0220 	orr.w	r2, r3, #32
9000af94:	687b      	ldr	r3, [r7, #4]
9000af96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000af98:	68fb      	ldr	r3, [r7, #12]
9000af9a:	3301      	adds	r3, #1
9000af9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000af9e:	68fb      	ldr	r3, [r7, #12]
9000afa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000afa4:	d901      	bls.n	9000afaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000afa6:	2303      	movs	r3, #3
9000afa8:	e006      	b.n	9000afb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000afaa:	687b      	ldr	r3, [r7, #4]
9000afac:	691b      	ldr	r3, [r3, #16]
9000afae:	f003 0320 	and.w	r3, r3, #32
9000afb2:	2b20      	cmp	r3, #32
9000afb4:	d0f0      	beq.n	9000af98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000afb6:	2300      	movs	r3, #0
}
9000afb8:	4618      	mov	r0, r3
9000afba:	3714      	adds	r7, #20
9000afbc:	46bd      	mov	sp, r7
9000afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
9000afc2:	4770      	bx	lr

9000afc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000afc4:	b480      	push	{r7}
9000afc6:	b085      	sub	sp, #20
9000afc8:	af00      	add	r7, sp, #0
9000afca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000afcc:	2300      	movs	r3, #0
9000afce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000afd0:	68fb      	ldr	r3, [r7, #12]
9000afd2:	3301      	adds	r3, #1
9000afd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000afd6:	68fb      	ldr	r3, [r7, #12]
9000afd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000afdc:	d901      	bls.n	9000afe2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000afde:	2303      	movs	r3, #3
9000afe0:	e018      	b.n	9000b014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000afe2:	687b      	ldr	r3, [r7, #4]
9000afe4:	691b      	ldr	r3, [r3, #16]
9000afe6:	2b00      	cmp	r3, #0
9000afe8:	daf2      	bge.n	9000afd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000afea:	2300      	movs	r3, #0
9000afec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000afee:	687b      	ldr	r3, [r7, #4]
9000aff0:	2210      	movs	r2, #16
9000aff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000aff4:	68fb      	ldr	r3, [r7, #12]
9000aff6:	3301      	adds	r3, #1
9000aff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000affa:	68fb      	ldr	r3, [r7, #12]
9000affc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b000:	d901      	bls.n	9000b006 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000b002:	2303      	movs	r3, #3
9000b004:	e006      	b.n	9000b014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b006:	687b      	ldr	r3, [r7, #4]
9000b008:	691b      	ldr	r3, [r3, #16]
9000b00a:	f003 0310 	and.w	r3, r3, #16
9000b00e:	2b10      	cmp	r3, #16
9000b010:	d0f0      	beq.n	9000aff4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000b012:	2300      	movs	r3, #0
}
9000b014:	4618      	mov	r0, r3
9000b016:	3714      	adds	r7, #20
9000b018:	46bd      	mov	sp, r7
9000b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b01e:	4770      	bx	lr

9000b020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000b020:	b480      	push	{r7}
9000b022:	b08b      	sub	sp, #44	@ 0x2c
9000b024:	af00      	add	r7, sp, #0
9000b026:	60f8      	str	r0, [r7, #12]
9000b028:	60b9      	str	r1, [r7, #8]
9000b02a:	4613      	mov	r3, r2
9000b02c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b02e:	68fb      	ldr	r3, [r7, #12]
9000b030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000b032:	68bb      	ldr	r3, [r7, #8]
9000b034:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000b036:	88fb      	ldrh	r3, [r7, #6]
9000b038:	089b      	lsrs	r3, r3, #2
9000b03a:	b29b      	uxth	r3, r3
9000b03c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000b03e:	88fb      	ldrh	r3, [r7, #6]
9000b040:	f003 0303 	and.w	r3, r3, #3
9000b044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000b046:	2300      	movs	r3, #0
9000b048:	623b      	str	r3, [r7, #32]
9000b04a:	e014      	b.n	9000b076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000b04c:	69bb      	ldr	r3, [r7, #24]
9000b04e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b052:	681a      	ldr	r2, [r3, #0]
9000b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b056:	601a      	str	r2, [r3, #0]
    pDest++;
9000b058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b05a:	3301      	adds	r3, #1
9000b05c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b060:	3301      	adds	r3, #1
9000b062:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b066:	3301      	adds	r3, #1
9000b068:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b06c:	3301      	adds	r3, #1
9000b06e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000b070:	6a3b      	ldr	r3, [r7, #32]
9000b072:	3301      	adds	r3, #1
9000b074:	623b      	str	r3, [r7, #32]
9000b076:	6a3a      	ldr	r2, [r7, #32]
9000b078:	697b      	ldr	r3, [r7, #20]
9000b07a:	429a      	cmp	r2, r3
9000b07c:	d3e6      	bcc.n	9000b04c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000b07e:	8bfb      	ldrh	r3, [r7, #30]
9000b080:	2b00      	cmp	r3, #0
9000b082:	d01e      	beq.n	9000b0c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000b084:	2300      	movs	r3, #0
9000b086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000b088:	69bb      	ldr	r3, [r7, #24]
9000b08a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b08e:	461a      	mov	r2, r3
9000b090:	f107 0310 	add.w	r3, r7, #16
9000b094:	6812      	ldr	r2, [r2, #0]
9000b096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000b098:	693a      	ldr	r2, [r7, #16]
9000b09a:	6a3b      	ldr	r3, [r7, #32]
9000b09c:	b2db      	uxtb	r3, r3
9000b09e:	00db      	lsls	r3, r3, #3
9000b0a0:	fa22 f303 	lsr.w	r3, r2, r3
9000b0a4:	b2da      	uxtb	r2, r3
9000b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b0a8:	701a      	strb	r2, [r3, #0]
      i++;
9000b0aa:	6a3b      	ldr	r3, [r7, #32]
9000b0ac:	3301      	adds	r3, #1
9000b0ae:	623b      	str	r3, [r7, #32]
      pDest++;
9000b0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b0b2:	3301      	adds	r3, #1
9000b0b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000b0b6:	8bfb      	ldrh	r3, [r7, #30]
9000b0b8:	3b01      	subs	r3, #1
9000b0ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000b0bc:	8bfb      	ldrh	r3, [r7, #30]
9000b0be:	2b00      	cmp	r3, #0
9000b0c0:	d1ea      	bne.n	9000b098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000b0c4:	4618      	mov	r0, r3
9000b0c6:	372c      	adds	r7, #44	@ 0x2c
9000b0c8:	46bd      	mov	sp, r7
9000b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0ce:	4770      	bx	lr

9000b0d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000b0d0:	b480      	push	{r7}
9000b0d2:	b085      	sub	sp, #20
9000b0d4:	af00      	add	r7, sp, #0
9000b0d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000b0d8:	687b      	ldr	r3, [r7, #4]
9000b0da:	695b      	ldr	r3, [r3, #20]
9000b0dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000b0de:	687b      	ldr	r3, [r7, #4]
9000b0e0:	699b      	ldr	r3, [r3, #24]
9000b0e2:	68fa      	ldr	r2, [r7, #12]
9000b0e4:	4013      	ands	r3, r2
9000b0e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000b0e8:	68fb      	ldr	r3, [r7, #12]
}
9000b0ea:	4618      	mov	r0, r3
9000b0ec:	3714      	adds	r7, #20
9000b0ee:	46bd      	mov	sp, r7
9000b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0f4:	4770      	bx	lr

9000b0f6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000b0f6:	b480      	push	{r7}
9000b0f8:	b085      	sub	sp, #20
9000b0fa:	af00      	add	r7, sp, #0
9000b0fc:	6078      	str	r0, [r7, #4]
9000b0fe:	460b      	mov	r3, r1
9000b100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b102:	687b      	ldr	r3, [r7, #4]
9000b104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000b106:	78fb      	ldrb	r3, [r7, #3]
9000b108:	015a      	lsls	r2, r3, #5
9000b10a:	68fb      	ldr	r3, [r7, #12]
9000b10c:	4413      	add	r3, r2
9000b10e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b112:	689b      	ldr	r3, [r3, #8]
9000b114:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000b116:	78fb      	ldrb	r3, [r7, #3]
9000b118:	015a      	lsls	r2, r3, #5
9000b11a:	68fb      	ldr	r3, [r7, #12]
9000b11c:	4413      	add	r3, r2
9000b11e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b122:	68db      	ldr	r3, [r3, #12]
9000b124:	68ba      	ldr	r2, [r7, #8]
9000b126:	4013      	ands	r3, r2
9000b128:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000b12a:	68bb      	ldr	r3, [r7, #8]
}
9000b12c:	4618      	mov	r0, r3
9000b12e:	3714      	adds	r7, #20
9000b130:	46bd      	mov	sp, r7
9000b132:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b136:	4770      	bx	lr

9000b138 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000b138:	b480      	push	{r7}
9000b13a:	b083      	sub	sp, #12
9000b13c:	af00      	add	r7, sp, #0
9000b13e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000b140:	687b      	ldr	r3, [r7, #4]
9000b142:	695b      	ldr	r3, [r3, #20]
9000b144:	f003 0301 	and.w	r3, r3, #1
}
9000b148:	4618      	mov	r0, r3
9000b14a:	370c      	adds	r7, #12
9000b14c:	46bd      	mov	sp, r7
9000b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b152:	4770      	bx	lr

9000b154 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000b154:	b480      	push	{r7}
9000b156:	b085      	sub	sp, #20
9000b158:	af00      	add	r7, sp, #0
9000b15a:	6078      	str	r0, [r7, #4]
9000b15c:	460b      	mov	r3, r1
9000b15e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b160:	687b      	ldr	r3, [r7, #4]
9000b162:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000b164:	68fb      	ldr	r3, [r7, #12]
9000b166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b16a:	681b      	ldr	r3, [r3, #0]
9000b16c:	68fa      	ldr	r2, [r7, #12]
9000b16e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000b172:	f023 0303 	bic.w	r3, r3, #3
9000b176:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000b178:	68fb      	ldr	r3, [r7, #12]
9000b17a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b17e:	681a      	ldr	r2, [r3, #0]
9000b180:	78fb      	ldrb	r3, [r7, #3]
9000b182:	f003 0303 	and.w	r3, r3, #3
9000b186:	68f9      	ldr	r1, [r7, #12]
9000b188:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000b18c:	4313      	orrs	r3, r2
9000b18e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000b190:	78fb      	ldrb	r3, [r7, #3]
9000b192:	2b01      	cmp	r3, #1
9000b194:	d107      	bne.n	9000b1a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000b196:	68fb      	ldr	r3, [r7, #12]
9000b198:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b19c:	461a      	mov	r2, r3
9000b19e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000b1a2:	6053      	str	r3, [r2, #4]
9000b1a4:	e00c      	b.n	9000b1c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000b1a6:	78fb      	ldrb	r3, [r7, #3]
9000b1a8:	2b02      	cmp	r3, #2
9000b1aa:	d107      	bne.n	9000b1bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000b1ac:	68fb      	ldr	r3, [r7, #12]
9000b1ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b1b2:	461a      	mov	r2, r3
9000b1b4:	f241 7370 	movw	r3, #6000	@ 0x1770
9000b1b8:	6053      	str	r3, [r2, #4]
9000b1ba:	e001      	b.n	9000b1c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000b1bc:	2301      	movs	r3, #1
9000b1be:	e000      	b.n	9000b1c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000b1c0:	2300      	movs	r3, #0
}
9000b1c2:	4618      	mov	r0, r3
9000b1c4:	3714      	adds	r7, #20
9000b1c6:	46bd      	mov	sp, r7
9000b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1cc:	4770      	bx	lr

9000b1ce <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000b1ce:	b480      	push	{r7}
9000b1d0:	b085      	sub	sp, #20
9000b1d2:	af00      	add	r7, sp, #0
9000b1d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b1d6:	687b      	ldr	r3, [r7, #4]
9000b1d8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000b1da:	68fb      	ldr	r3, [r7, #12]
9000b1dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b1e0:	695b      	ldr	r3, [r3, #20]
9000b1e2:	b29b      	uxth	r3, r3
}
9000b1e4:	4618      	mov	r0, r3
9000b1e6:	3714      	adds	r7, #20
9000b1e8:	46bd      	mov	sp, r7
9000b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1ee:	4770      	bx	lr

9000b1f0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000b1f0:	b480      	push	{r7}
9000b1f2:	b089      	sub	sp, #36	@ 0x24
9000b1f4:	af00      	add	r7, sp, #0
9000b1f6:	6078      	str	r0, [r7, #4]
9000b1f8:	460b      	mov	r3, r1
9000b1fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b1fc:	687b      	ldr	r3, [r7, #4]
9000b1fe:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000b200:	78fb      	ldrb	r3, [r7, #3]
9000b202:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000b204:	2300      	movs	r3, #0
9000b206:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000b208:	69bb      	ldr	r3, [r7, #24]
9000b20a:	015a      	lsls	r2, r3, #5
9000b20c:	69fb      	ldr	r3, [r7, #28]
9000b20e:	4413      	add	r3, r2
9000b210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b214:	681b      	ldr	r3, [r3, #0]
9000b216:	0c9b      	lsrs	r3, r3, #18
9000b218:	f003 0303 	and.w	r3, r3, #3
9000b21c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000b21e:	69bb      	ldr	r3, [r7, #24]
9000b220:	015a      	lsls	r2, r3, #5
9000b222:	69fb      	ldr	r3, [r7, #28]
9000b224:	4413      	add	r3, r2
9000b226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b22a:	681b      	ldr	r3, [r3, #0]
9000b22c:	0fdb      	lsrs	r3, r3, #31
9000b22e:	f003 0301 	and.w	r3, r3, #1
9000b232:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000b234:	69bb      	ldr	r3, [r7, #24]
9000b236:	015a      	lsls	r2, r3, #5
9000b238:	69fb      	ldr	r3, [r7, #28]
9000b23a:	4413      	add	r3, r2
9000b23c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b240:	685b      	ldr	r3, [r3, #4]
9000b242:	0fdb      	lsrs	r3, r3, #31
9000b244:	f003 0301 	and.w	r3, r3, #1
9000b248:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000b24a:	687b      	ldr	r3, [r7, #4]
9000b24c:	689b      	ldr	r3, [r3, #8]
9000b24e:	f003 0320 	and.w	r3, r3, #32
9000b252:	2b20      	cmp	r3, #32
9000b254:	d10d      	bne.n	9000b272 <USB_HC_Halt+0x82>
9000b256:	68fb      	ldr	r3, [r7, #12]
9000b258:	2b00      	cmp	r3, #0
9000b25a:	d10a      	bne.n	9000b272 <USB_HC_Halt+0x82>
9000b25c:	693b      	ldr	r3, [r7, #16]
9000b25e:	2b00      	cmp	r3, #0
9000b260:	d005      	beq.n	9000b26e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000b262:	697b      	ldr	r3, [r7, #20]
9000b264:	2b01      	cmp	r3, #1
9000b266:	d002      	beq.n	9000b26e <USB_HC_Halt+0x7e>
9000b268:	697b      	ldr	r3, [r7, #20]
9000b26a:	2b03      	cmp	r3, #3
9000b26c:	d101      	bne.n	9000b272 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000b26e:	2300      	movs	r3, #0
9000b270:	e0d8      	b.n	9000b424 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000b272:	697b      	ldr	r3, [r7, #20]
9000b274:	2b00      	cmp	r3, #0
9000b276:	d002      	beq.n	9000b27e <USB_HC_Halt+0x8e>
9000b278:	697b      	ldr	r3, [r7, #20]
9000b27a:	2b02      	cmp	r3, #2
9000b27c:	d173      	bne.n	9000b366 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b27e:	69bb      	ldr	r3, [r7, #24]
9000b280:	015a      	lsls	r2, r3, #5
9000b282:	69fb      	ldr	r3, [r7, #28]
9000b284:	4413      	add	r3, r2
9000b286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b28a:	681b      	ldr	r3, [r3, #0]
9000b28c:	69ba      	ldr	r2, [r7, #24]
9000b28e:	0151      	lsls	r1, r2, #5
9000b290:	69fa      	ldr	r2, [r7, #28]
9000b292:	440a      	add	r2, r1
9000b294:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b29c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b29e:	687b      	ldr	r3, [r7, #4]
9000b2a0:	689b      	ldr	r3, [r3, #8]
9000b2a2:	f003 0320 	and.w	r3, r3, #32
9000b2a6:	2b00      	cmp	r3, #0
9000b2a8:	d14a      	bne.n	9000b340 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b2aa:	687b      	ldr	r3, [r7, #4]
9000b2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b2ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b2b2:	2b00      	cmp	r3, #0
9000b2b4:	d133      	bne.n	9000b31e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b2b6:	69bb      	ldr	r3, [r7, #24]
9000b2b8:	015a      	lsls	r2, r3, #5
9000b2ba:	69fb      	ldr	r3, [r7, #28]
9000b2bc:	4413      	add	r3, r2
9000b2be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b2c2:	681b      	ldr	r3, [r3, #0]
9000b2c4:	69ba      	ldr	r2, [r7, #24]
9000b2c6:	0151      	lsls	r1, r2, #5
9000b2c8:	69fa      	ldr	r2, [r7, #28]
9000b2ca:	440a      	add	r2, r1
9000b2cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b2d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b2d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b2d6:	69bb      	ldr	r3, [r7, #24]
9000b2d8:	015a      	lsls	r2, r3, #5
9000b2da:	69fb      	ldr	r3, [r7, #28]
9000b2dc:	4413      	add	r3, r2
9000b2de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b2e2:	681b      	ldr	r3, [r3, #0]
9000b2e4:	69ba      	ldr	r2, [r7, #24]
9000b2e6:	0151      	lsls	r1, r2, #5
9000b2e8:	69fa      	ldr	r2, [r7, #28]
9000b2ea:	440a      	add	r2, r1
9000b2ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b2f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b2f4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b2f6:	68bb      	ldr	r3, [r7, #8]
9000b2f8:	3301      	adds	r3, #1
9000b2fa:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b2fc:	68bb      	ldr	r3, [r7, #8]
9000b2fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b302:	d82e      	bhi.n	9000b362 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b304:	69bb      	ldr	r3, [r7, #24]
9000b306:	015a      	lsls	r2, r3, #5
9000b308:	69fb      	ldr	r3, [r7, #28]
9000b30a:	4413      	add	r3, r2
9000b30c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b310:	681b      	ldr	r3, [r3, #0]
9000b312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b31a:	d0ec      	beq.n	9000b2f6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b31c:	e081      	b.n	9000b422 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b31e:	69bb      	ldr	r3, [r7, #24]
9000b320:	015a      	lsls	r2, r3, #5
9000b322:	69fb      	ldr	r3, [r7, #28]
9000b324:	4413      	add	r3, r2
9000b326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b32a:	681b      	ldr	r3, [r3, #0]
9000b32c:	69ba      	ldr	r2, [r7, #24]
9000b32e:	0151      	lsls	r1, r2, #5
9000b330:	69fa      	ldr	r2, [r7, #28]
9000b332:	440a      	add	r2, r1
9000b334:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b338:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b33c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b33e:	e070      	b.n	9000b422 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b340:	69bb      	ldr	r3, [r7, #24]
9000b342:	015a      	lsls	r2, r3, #5
9000b344:	69fb      	ldr	r3, [r7, #28]
9000b346:	4413      	add	r3, r2
9000b348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b34c:	681b      	ldr	r3, [r3, #0]
9000b34e:	69ba      	ldr	r2, [r7, #24]
9000b350:	0151      	lsls	r1, r2, #5
9000b352:	69fa      	ldr	r2, [r7, #28]
9000b354:	440a      	add	r2, r1
9000b356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b35a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b35e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b360:	e05f      	b.n	9000b422 <USB_HC_Halt+0x232>
            break;
9000b362:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b364:	e05d      	b.n	9000b422 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b366:	69bb      	ldr	r3, [r7, #24]
9000b368:	015a      	lsls	r2, r3, #5
9000b36a:	69fb      	ldr	r3, [r7, #28]
9000b36c:	4413      	add	r3, r2
9000b36e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b372:	681b      	ldr	r3, [r3, #0]
9000b374:	69ba      	ldr	r2, [r7, #24]
9000b376:	0151      	lsls	r1, r2, #5
9000b378:	69fa      	ldr	r2, [r7, #28]
9000b37a:	440a      	add	r2, r1
9000b37c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b384:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b386:	69fb      	ldr	r3, [r7, #28]
9000b388:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b38c:	691b      	ldr	r3, [r3, #16]
9000b38e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b392:	2b00      	cmp	r3, #0
9000b394:	d133      	bne.n	9000b3fe <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b396:	69bb      	ldr	r3, [r7, #24]
9000b398:	015a      	lsls	r2, r3, #5
9000b39a:	69fb      	ldr	r3, [r7, #28]
9000b39c:	4413      	add	r3, r2
9000b39e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3a2:	681b      	ldr	r3, [r3, #0]
9000b3a4:	69ba      	ldr	r2, [r7, #24]
9000b3a6:	0151      	lsls	r1, r2, #5
9000b3a8:	69fa      	ldr	r2, [r7, #28]
9000b3aa:	440a      	add	r2, r1
9000b3ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b3b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b3b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b3b6:	69bb      	ldr	r3, [r7, #24]
9000b3b8:	015a      	lsls	r2, r3, #5
9000b3ba:	69fb      	ldr	r3, [r7, #28]
9000b3bc:	4413      	add	r3, r2
9000b3be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3c2:	681b      	ldr	r3, [r3, #0]
9000b3c4:	69ba      	ldr	r2, [r7, #24]
9000b3c6:	0151      	lsls	r1, r2, #5
9000b3c8:	69fa      	ldr	r2, [r7, #28]
9000b3ca:	440a      	add	r2, r1
9000b3cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b3d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b3d4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b3d6:	68bb      	ldr	r3, [r7, #8]
9000b3d8:	3301      	adds	r3, #1
9000b3da:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b3dc:	68bb      	ldr	r3, [r7, #8]
9000b3de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b3e2:	d81d      	bhi.n	9000b420 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b3e4:	69bb      	ldr	r3, [r7, #24]
9000b3e6:	015a      	lsls	r2, r3, #5
9000b3e8:	69fb      	ldr	r3, [r7, #28]
9000b3ea:	4413      	add	r3, r2
9000b3ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3f0:	681b      	ldr	r3, [r3, #0]
9000b3f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b3f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b3fa:	d0ec      	beq.n	9000b3d6 <USB_HC_Halt+0x1e6>
9000b3fc:	e011      	b.n	9000b422 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b3fe:	69bb      	ldr	r3, [r7, #24]
9000b400:	015a      	lsls	r2, r3, #5
9000b402:	69fb      	ldr	r3, [r7, #28]
9000b404:	4413      	add	r3, r2
9000b406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b40a:	681b      	ldr	r3, [r3, #0]
9000b40c:	69ba      	ldr	r2, [r7, #24]
9000b40e:	0151      	lsls	r1, r2, #5
9000b410:	69fa      	ldr	r2, [r7, #28]
9000b412:	440a      	add	r2, r1
9000b414:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b418:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b41c:	6013      	str	r3, [r2, #0]
9000b41e:	e000      	b.n	9000b422 <USB_HC_Halt+0x232>
          break;
9000b420:	bf00      	nop
    }
  }

  return HAL_OK;
9000b422:	2300      	movs	r3, #0
}
9000b424:	4618      	mov	r0, r3
9000b426:	3724      	adds	r7, #36	@ 0x24
9000b428:	46bd      	mov	sp, r7
9000b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b42e:	4770      	bx	lr

9000b430 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b430:	b580      	push	{r7, lr}
9000b432:	b088      	sub	sp, #32
9000b434:	af00      	add	r7, sp, #0
9000b436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b438:	2300      	movs	r3, #0
9000b43a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b43c:	687b      	ldr	r3, [r7, #4]
9000b43e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b440:	2300      	movs	r3, #0
9000b442:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b444:	6878      	ldr	r0, [r7, #4]
9000b446:	f7ff fd7a 	bl	9000af3e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b44a:	2110      	movs	r1, #16
9000b44c:	6878      	ldr	r0, [r7, #4]
9000b44e:	f7ff fd87 	bl	9000af60 <USB_FlushTxFifo>
9000b452:	4603      	mov	r3, r0
9000b454:	2b00      	cmp	r3, #0
9000b456:	d001      	beq.n	9000b45c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b458:	2301      	movs	r3, #1
9000b45a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b45c:	6878      	ldr	r0, [r7, #4]
9000b45e:	f7ff fdb1 	bl	9000afc4 <USB_FlushRxFifo>
9000b462:	4603      	mov	r3, r0
9000b464:	2b00      	cmp	r3, #0
9000b466:	d001      	beq.n	9000b46c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b468:	2301      	movs	r3, #1
9000b46a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b46c:	2300      	movs	r3, #0
9000b46e:	61bb      	str	r3, [r7, #24]
9000b470:	e01f      	b.n	9000b4b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b472:	69bb      	ldr	r3, [r7, #24]
9000b474:	015a      	lsls	r2, r3, #5
9000b476:	697b      	ldr	r3, [r7, #20]
9000b478:	4413      	add	r3, r2
9000b47a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b47e:	681b      	ldr	r3, [r3, #0]
9000b480:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b482:	693b      	ldr	r3, [r7, #16]
9000b484:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b488:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b48a:	693b      	ldr	r3, [r7, #16]
9000b48c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b490:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b492:	693b      	ldr	r3, [r7, #16]
9000b494:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b498:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b49a:	69bb      	ldr	r3, [r7, #24]
9000b49c:	015a      	lsls	r2, r3, #5
9000b49e:	697b      	ldr	r3, [r7, #20]
9000b4a0:	4413      	add	r3, r2
9000b4a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4a6:	461a      	mov	r2, r3
9000b4a8:	693b      	ldr	r3, [r7, #16]
9000b4aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b4ac:	69bb      	ldr	r3, [r7, #24]
9000b4ae:	3301      	adds	r3, #1
9000b4b0:	61bb      	str	r3, [r7, #24]
9000b4b2:	69bb      	ldr	r3, [r7, #24]
9000b4b4:	2b0f      	cmp	r3, #15
9000b4b6:	d9dc      	bls.n	9000b472 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b4b8:	2300      	movs	r3, #0
9000b4ba:	61bb      	str	r3, [r7, #24]
9000b4bc:	e034      	b.n	9000b528 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b4be:	69bb      	ldr	r3, [r7, #24]
9000b4c0:	015a      	lsls	r2, r3, #5
9000b4c2:	697b      	ldr	r3, [r7, #20]
9000b4c4:	4413      	add	r3, r2
9000b4c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4ca:	681b      	ldr	r3, [r3, #0]
9000b4cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b4ce:	693b      	ldr	r3, [r7, #16]
9000b4d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b4d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b4d6:	693b      	ldr	r3, [r7, #16]
9000b4d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b4dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b4de:	693b      	ldr	r3, [r7, #16]
9000b4e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b4e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b4e6:	69bb      	ldr	r3, [r7, #24]
9000b4e8:	015a      	lsls	r2, r3, #5
9000b4ea:	697b      	ldr	r3, [r7, #20]
9000b4ec:	4413      	add	r3, r2
9000b4ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4f2:	461a      	mov	r2, r3
9000b4f4:	693b      	ldr	r3, [r7, #16]
9000b4f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b4f8:	68fb      	ldr	r3, [r7, #12]
9000b4fa:	3301      	adds	r3, #1
9000b4fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b4fe:	68fb      	ldr	r3, [r7, #12]
9000b500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b504:	d80c      	bhi.n	9000b520 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b506:	69bb      	ldr	r3, [r7, #24]
9000b508:	015a      	lsls	r2, r3, #5
9000b50a:	697b      	ldr	r3, [r7, #20]
9000b50c:	4413      	add	r3, r2
9000b50e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b512:	681b      	ldr	r3, [r3, #0]
9000b514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b51c:	d0ec      	beq.n	9000b4f8 <USB_StopHost+0xc8>
9000b51e:	e000      	b.n	9000b522 <USB_StopHost+0xf2>
        break;
9000b520:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b522:	69bb      	ldr	r3, [r7, #24]
9000b524:	3301      	adds	r3, #1
9000b526:	61bb      	str	r3, [r7, #24]
9000b528:	69bb      	ldr	r3, [r7, #24]
9000b52a:	2b0f      	cmp	r3, #15
9000b52c:	d9c7      	bls.n	9000b4be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b52e:	697b      	ldr	r3, [r7, #20]
9000b530:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b534:	461a      	mov	r2, r3
9000b536:	f04f 33ff 	mov.w	r3, #4294967295
9000b53a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b53c:	687b      	ldr	r3, [r7, #4]
9000b53e:	f04f 32ff 	mov.w	r2, #4294967295
9000b542:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b544:	6878      	ldr	r0, [r7, #4]
9000b546:	f7ff fce9 	bl	9000af1c <USB_EnableGlobalInt>

  return ret;
9000b54a:	7ffb      	ldrb	r3, [r7, #31]
}
9000b54c:	4618      	mov	r0, r3
9000b54e:	3720      	adds	r7, #32
9000b550:	46bd      	mov	sp, r7
9000b552:	bd80      	pop	{r7, pc}

9000b554 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000b554:	b580      	push	{r7, lr}
9000b556:	b082      	sub	sp, #8
9000b558:	af00      	add	r7, sp, #0
9000b55a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000b55c:	687b      	ldr	r3, [r7, #4]
9000b55e:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000b562:	1c5a      	adds	r2, r3, #1
9000b564:	687b      	ldr	r3, [r7, #4]
9000b566:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000b56a:	6878      	ldr	r0, [r7, #4]
9000b56c:	f000 f804 	bl	9000b578 <USBH_HandleSof>
}
9000b570:	bf00      	nop
9000b572:	3708      	adds	r7, #8
9000b574:	46bd      	mov	sp, r7
9000b576:	bd80      	pop	{r7, pc}

9000b578 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000b578:	b580      	push	{r7, lr}
9000b57a:	b082      	sub	sp, #8
9000b57c:	af00      	add	r7, sp, #0
9000b57e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000b580:	687b      	ldr	r3, [r7, #4]
9000b582:	781b      	ldrb	r3, [r3, #0]
9000b584:	b2db      	uxtb	r3, r3
9000b586:	2b0b      	cmp	r3, #11
9000b588:	d10a      	bne.n	9000b5a0 <USBH_HandleSof+0x28>
9000b58a:	687b      	ldr	r3, [r7, #4]
9000b58c:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b590:	2b00      	cmp	r3, #0
9000b592:	d005      	beq.n	9000b5a0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000b594:	687b      	ldr	r3, [r7, #4]
9000b596:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b59a:	699b      	ldr	r3, [r3, #24]
9000b59c:	6878      	ldr	r0, [r7, #4]
9000b59e:	4798      	blx	r3
  }
}
9000b5a0:	bf00      	nop
9000b5a2:	3708      	adds	r7, #8
9000b5a4:	46bd      	mov	sp, r7
9000b5a6:	bd80      	pop	{r7, pc}

9000b5a8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000b5a8:	b480      	push	{r7}
9000b5aa:	b083      	sub	sp, #12
9000b5ac:	af00      	add	r7, sp, #0
9000b5ae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000b5b0:	687b      	ldr	r3, [r7, #4]
9000b5b2:	2201      	movs	r2, #1
9000b5b4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000b5b8:	bf00      	nop
}
9000b5ba:	370c      	adds	r7, #12
9000b5bc:	46bd      	mov	sp, r7
9000b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b5c2:	4770      	bx	lr

9000b5c4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000b5c4:	b480      	push	{r7}
9000b5c6:	b083      	sub	sp, #12
9000b5c8:	af00      	add	r7, sp, #0
9000b5ca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000b5cc:	687b      	ldr	r3, [r7, #4]
9000b5ce:	2200      	movs	r2, #0
9000b5d0:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000b5d4:	687b      	ldr	r3, [r7, #4]
9000b5d6:	2201      	movs	r2, #1
9000b5d8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000b5dc:	bf00      	nop
}
9000b5de:	370c      	adds	r7, #12
9000b5e0:	46bd      	mov	sp, r7
9000b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b5e6:	4770      	bx	lr

9000b5e8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000b5e8:	b480      	push	{r7}
9000b5ea:	b083      	sub	sp, #12
9000b5ec:	af00      	add	r7, sp, #0
9000b5ee:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000b5f0:	687b      	ldr	r3, [r7, #4]
9000b5f2:	2201      	movs	r2, #1
9000b5f4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000b5f8:	687b      	ldr	r3, [r7, #4]
9000b5fa:	2200      	movs	r2, #0
9000b5fc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000b600:	687b      	ldr	r3, [r7, #4]
9000b602:	2200      	movs	r2, #0
9000b604:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000b608:	2300      	movs	r3, #0
}
9000b60a:	4618      	mov	r0, r3
9000b60c:	370c      	adds	r7, #12
9000b60e:	46bd      	mov	sp, r7
9000b610:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b614:	4770      	bx	lr

9000b616 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000b616:	b580      	push	{r7, lr}
9000b618:	b082      	sub	sp, #8
9000b61a:	af00      	add	r7, sp, #0
9000b61c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000b61e:	687b      	ldr	r3, [r7, #4]
9000b620:	2201      	movs	r2, #1
9000b622:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000b626:	687b      	ldr	r3, [r7, #4]
9000b628:	2200      	movs	r2, #0
9000b62a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000b62e:	687b      	ldr	r3, [r7, #4]
9000b630:	2200      	movs	r2, #0
9000b632:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000b636:	6878      	ldr	r0, [r7, #4]
9000b638:	f7f5 fdf4 	bl	90001224 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000b63c:	687b      	ldr	r3, [r7, #4]
9000b63e:	791b      	ldrb	r3, [r3, #4]
9000b640:	4619      	mov	r1, r3
9000b642:	6878      	ldr	r0, [r7, #4]
9000b644:	f000 f80b 	bl	9000b65e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000b648:	687b      	ldr	r3, [r7, #4]
9000b64a:	795b      	ldrb	r3, [r3, #5]
9000b64c:	4619      	mov	r1, r3
9000b64e:	6878      	ldr	r0, [r7, #4]
9000b650:	f000 f805 	bl	9000b65e <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000b654:	2300      	movs	r3, #0
}
9000b656:	4618      	mov	r0, r3
9000b658:	3708      	adds	r7, #8
9000b65a:	46bd      	mov	sp, r7
9000b65c:	bd80      	pop	{r7, pc}

9000b65e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000b65e:	b480      	push	{r7}
9000b660:	b083      	sub	sp, #12
9000b662:	af00      	add	r7, sp, #0
9000b664:	6078      	str	r0, [r7, #4]
9000b666:	460b      	mov	r3, r1
9000b668:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000b66a:	78fb      	ldrb	r3, [r7, #3]
9000b66c:	2b0f      	cmp	r3, #15
9000b66e:	d80f      	bhi.n	9000b690 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000b670:	78fb      	ldrb	r3, [r7, #3]
9000b672:	687a      	ldr	r2, [r7, #4]
9000b674:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000b678:	009b      	lsls	r3, r3, #2
9000b67a:	4413      	add	r3, r2
9000b67c:	685a      	ldr	r2, [r3, #4]
9000b67e:	78fb      	ldrb	r3, [r7, #3]
9000b680:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000b684:	6879      	ldr	r1, [r7, #4]
9000b686:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000b68a:	009b      	lsls	r3, r3, #2
9000b68c:	440b      	add	r3, r1
9000b68e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000b690:	2300      	movs	r3, #0
}
9000b692:	4618      	mov	r0, r3
9000b694:	370c      	adds	r7, #12
9000b696:	46bd      	mov	sp, r7
9000b698:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b69c:	4770      	bx	lr
	...

9000b6a0 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000b6a0:	b580      	push	{r7, lr}
9000b6a2:	b082      	sub	sp, #8
9000b6a4:	af00      	add	r7, sp, #0
9000b6a6:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000b6a8:	687b      	ldr	r3, [r7, #4]
9000b6aa:	681b      	ldr	r3, [r3, #0]
9000b6ac:	4a22      	ldr	r2, [pc, #136]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6ae:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000b6b0:	687b      	ldr	r3, [r7, #4]
9000b6b2:	685b      	ldr	r3, [r3, #4]
9000b6b4:	4a20      	ldr	r2, [pc, #128]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6b6:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000b6b8:	687b      	ldr	r3, [r7, #4]
9000b6ba:	689b      	ldr	r3, [r3, #8]
9000b6bc:	4a1e      	ldr	r2, [pc, #120]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6be:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000b6c0:	687b      	ldr	r3, [r7, #4]
9000b6c2:	68db      	ldr	r3, [r3, #12]
9000b6c4:	4a1c      	ldr	r2, [pc, #112]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6c6:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000b6c8:	687b      	ldr	r3, [r7, #4]
9000b6ca:	691b      	ldr	r3, [r3, #16]
9000b6cc:	4a1a      	ldr	r2, [pc, #104]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6ce:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000b6d0:	687b      	ldr	r3, [r7, #4]
9000b6d2:	695b      	ldr	r3, [r3, #20]
9000b6d4:	4a18      	ldr	r2, [pc, #96]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6d6:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000b6d8:	687b      	ldr	r3, [r7, #4]
9000b6da:	699b      	ldr	r3, [r3, #24]
9000b6dc:	4a16      	ldr	r2, [pc, #88]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6de:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000b6e0:	687b      	ldr	r3, [r7, #4]
9000b6e2:	69db      	ldr	r3, [r3, #28]
9000b6e4:	4a14      	ldr	r2, [pc, #80]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6e6:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000b6e8:	687b      	ldr	r3, [r7, #4]
9000b6ea:	6a1b      	ldr	r3, [r3, #32]
9000b6ec:	4a12      	ldr	r2, [pc, #72]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6ee:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000b6f0:	687b      	ldr	r3, [r7, #4]
9000b6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b6f4:	4a10      	ldr	r2, [pc, #64]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6f6:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000b6f8:	687b      	ldr	r3, [r7, #4]
9000b6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b6fc:	4a0e      	ldr	r2, [pc, #56]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b6fe:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000b700:	4b0e      	ldr	r3, [pc, #56]	@ (9000b73c <UTIL_LCD_SetFuncDriver+0x9c>)
9000b702:	2200      	movs	r2, #0
9000b704:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000b706:	4b0d      	ldr	r3, [pc, #52]	@ (9000b73c <UTIL_LCD_SetFuncDriver+0x9c>)
9000b708:	2200      	movs	r2, #0
9000b70a:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000b70c:	4b0a      	ldr	r3, [pc, #40]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b70e:	69db      	ldr	r3, [r3, #28]
9000b710:	4a0b      	ldr	r2, [pc, #44]	@ (9000b740 <UTIL_LCD_SetFuncDriver+0xa0>)
9000b712:	4611      	mov	r1, r2
9000b714:	2000      	movs	r0, #0
9000b716:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000b718:	4b07      	ldr	r3, [pc, #28]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b71a:	6a1b      	ldr	r3, [r3, #32]
9000b71c:	4a09      	ldr	r2, [pc, #36]	@ (9000b744 <UTIL_LCD_SetFuncDriver+0xa4>)
9000b71e:	4611      	mov	r1, r2
9000b720:	2000      	movs	r0, #0
9000b722:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000b724:	4b04      	ldr	r3, [pc, #16]	@ (9000b738 <UTIL_LCD_SetFuncDriver+0x98>)
9000b726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b728:	4a07      	ldr	r2, [pc, #28]	@ (9000b748 <UTIL_LCD_SetFuncDriver+0xa8>)
9000b72a:	4611      	mov	r1, r2
9000b72c:	2000      	movs	r0, #0
9000b72e:	4798      	blx	r3
}
9000b730:	bf00      	nop
9000b732:	3708      	adds	r7, #8
9000b734:	46bd      	mov	sp, r7
9000b736:	bd80      	pop	{r7, pc}
9000b738:	20001320 	.word	0x20001320
9000b73c:	200012e0 	.word	0x200012e0
9000b740:	200012f4 	.word	0x200012f4
9000b744:	200012f8 	.word	0x200012f8
9000b748:	200012fc 	.word	0x200012fc

9000b74c <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000b74c:	b580      	push	{r7, lr}
9000b74e:	b082      	sub	sp, #8
9000b750:	af00      	add	r7, sp, #0
9000b752:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000b754:	4b0a      	ldr	r3, [pc, #40]	@ (9000b780 <UTIL_LCD_SetLayer+0x34>)
9000b756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b758:	2b00      	cmp	r3, #0
9000b75a:	d00c      	beq.n	9000b776 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000b75c:	4b08      	ldr	r3, [pc, #32]	@ (9000b780 <UTIL_LCD_SetLayer+0x34>)
9000b75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b760:	4a08      	ldr	r2, [pc, #32]	@ (9000b784 <UTIL_LCD_SetLayer+0x38>)
9000b762:	6912      	ldr	r2, [r2, #16]
9000b764:	6879      	ldr	r1, [r7, #4]
9000b766:	4610      	mov	r0, r2
9000b768:	4798      	blx	r3
9000b76a:	4603      	mov	r3, r0
9000b76c:	2b00      	cmp	r3, #0
9000b76e:	d102      	bne.n	9000b776 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000b770:	4a04      	ldr	r2, [pc, #16]	@ (9000b784 <UTIL_LCD_SetLayer+0x38>)
9000b772:	687b      	ldr	r3, [r7, #4]
9000b774:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000b776:	bf00      	nop
9000b778:	3708      	adds	r7, #8
9000b77a:	46bd      	mov	sp, r7
9000b77c:	bd80      	pop	{r7, pc}
9000b77e:	bf00      	nop
9000b780:	20001320 	.word	0x20001320
9000b784:	200012e0 	.word	0x200012e0

9000b788 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000b788:	b480      	push	{r7}
9000b78a:	b083      	sub	sp, #12
9000b78c:	af00      	add	r7, sp, #0
9000b78e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000b790:	4b06      	ldr	r3, [pc, #24]	@ (9000b7ac <UTIL_LCD_SetTextColor+0x24>)
9000b792:	68db      	ldr	r3, [r3, #12]
9000b794:	4a05      	ldr	r2, [pc, #20]	@ (9000b7ac <UTIL_LCD_SetTextColor+0x24>)
9000b796:	015b      	lsls	r3, r3, #5
9000b798:	4413      	add	r3, r2
9000b79a:	687a      	ldr	r2, [r7, #4]
9000b79c:	601a      	str	r2, [r3, #0]
}
9000b79e:	bf00      	nop
9000b7a0:	370c      	adds	r7, #12
9000b7a2:	46bd      	mov	sp, r7
9000b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7a8:	4770      	bx	lr
9000b7aa:	bf00      	nop
9000b7ac:	200012e0 	.word	0x200012e0

9000b7b0 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000b7b0:	b480      	push	{r7}
9000b7b2:	b083      	sub	sp, #12
9000b7b4:	af00      	add	r7, sp, #0
9000b7b6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000b7b8:	4b06      	ldr	r3, [pc, #24]	@ (9000b7d4 <UTIL_LCD_SetBackColor+0x24>)
9000b7ba:	68db      	ldr	r3, [r3, #12]
9000b7bc:	4a05      	ldr	r2, [pc, #20]	@ (9000b7d4 <UTIL_LCD_SetBackColor+0x24>)
9000b7be:	015b      	lsls	r3, r3, #5
9000b7c0:	4413      	add	r3, r2
9000b7c2:	3304      	adds	r3, #4
9000b7c4:	687a      	ldr	r2, [r7, #4]
9000b7c6:	601a      	str	r2, [r3, #0]
}
9000b7c8:	bf00      	nop
9000b7ca:	370c      	adds	r7, #12
9000b7cc:	46bd      	mov	sp, r7
9000b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7d2:	4770      	bx	lr
9000b7d4:	200012e0 	.word	0x200012e0

9000b7d8 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000b7d8:	b480      	push	{r7}
9000b7da:	b083      	sub	sp, #12
9000b7dc:	af00      	add	r7, sp, #0
9000b7de:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000b7e0:	4b06      	ldr	r3, [pc, #24]	@ (9000b7fc <UTIL_LCD_SetFont+0x24>)
9000b7e2:	68db      	ldr	r3, [r3, #12]
9000b7e4:	4a05      	ldr	r2, [pc, #20]	@ (9000b7fc <UTIL_LCD_SetFont+0x24>)
9000b7e6:	015b      	lsls	r3, r3, #5
9000b7e8:	4413      	add	r3, r2
9000b7ea:	3308      	adds	r3, #8
9000b7ec:	687a      	ldr	r2, [r7, #4]
9000b7ee:	601a      	str	r2, [r3, #0]
}
9000b7f0:	bf00      	nop
9000b7f2:	370c      	adds	r7, #12
9000b7f4:	46bd      	mov	sp, r7
9000b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7fa:	4770      	bx	lr
9000b7fc:	200012e0 	.word	0x200012e0

9000b800 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000b800:	b590      	push	{r4, r7, lr}
9000b802:	b087      	sub	sp, #28
9000b804:	af02      	add	r7, sp, #8
9000b806:	60f8      	str	r0, [r7, #12]
9000b808:	60b9      	str	r1, [r7, #8]
9000b80a:	607a      	str	r2, [r7, #4]
9000b80c:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000b80e:	4b08      	ldr	r3, [pc, #32]	@ (9000b830 <UTIL_LCD_FillRGBRect+0x30>)
9000b810:	685c      	ldr	r4, [r3, #4]
9000b812:	4b08      	ldr	r3, [pc, #32]	@ (9000b834 <UTIL_LCD_FillRGBRect+0x34>)
9000b814:	6918      	ldr	r0, [r3, #16]
9000b816:	6a3b      	ldr	r3, [r7, #32]
9000b818:	9301      	str	r3, [sp, #4]
9000b81a:	683b      	ldr	r3, [r7, #0]
9000b81c:	9300      	str	r3, [sp, #0]
9000b81e:	687b      	ldr	r3, [r7, #4]
9000b820:	68ba      	ldr	r2, [r7, #8]
9000b822:	68f9      	ldr	r1, [r7, #12]
9000b824:	47a0      	blx	r4
}
9000b826:	bf00      	nop
9000b828:	3714      	adds	r7, #20
9000b82a:	46bd      	mov	sp, r7
9000b82c:	bd90      	pop	{r4, r7, pc}
9000b82e:	bf00      	nop
9000b830:	20001320 	.word	0x20001320
9000b834:	200012e0 	.word	0x200012e0

9000b838 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000b838:	b580      	push	{r7, lr}
9000b83a:	b084      	sub	sp, #16
9000b83c:	af02      	add	r7, sp, #8
9000b83e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000b840:	4b07      	ldr	r3, [pc, #28]	@ (9000b860 <UTIL_LCD_Clear+0x28>)
9000b842:	695a      	ldr	r2, [r3, #20]
9000b844:	4b06      	ldr	r3, [pc, #24]	@ (9000b860 <UTIL_LCD_Clear+0x28>)
9000b846:	6999      	ldr	r1, [r3, #24]
9000b848:	687b      	ldr	r3, [r7, #4]
9000b84a:	9300      	str	r3, [sp, #0]
9000b84c:	460b      	mov	r3, r1
9000b84e:	2100      	movs	r1, #0
9000b850:	2000      	movs	r0, #0
9000b852:	f000 f8eb 	bl	9000ba2c <UTIL_LCD_FillRect>
}
9000b856:	bf00      	nop
9000b858:	3708      	adds	r7, #8
9000b85a:	46bd      	mov	sp, r7
9000b85c:	bd80      	pop	{r7, pc}
9000b85e:	bf00      	nop
9000b860:	200012e0 	.word	0x200012e0

9000b864 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000b864:	b580      	push	{r7, lr}
9000b866:	b084      	sub	sp, #16
9000b868:	af00      	add	r7, sp, #0
9000b86a:	60f8      	str	r0, [r7, #12]
9000b86c:	60b9      	str	r1, [r7, #8]
9000b86e:	4613      	mov	r3, r2
9000b870:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b872:	4b16      	ldr	r3, [pc, #88]	@ (9000b8cc <UTIL_LCD_DisplayChar+0x68>)
9000b874:	68db      	ldr	r3, [r3, #12]
9000b876:	4a15      	ldr	r2, [pc, #84]	@ (9000b8cc <UTIL_LCD_DisplayChar+0x68>)
9000b878:	015b      	lsls	r3, r3, #5
9000b87a:	4413      	add	r3, r2
9000b87c:	3308      	adds	r3, #8
9000b87e:	681b      	ldr	r3, [r3, #0]
9000b880:	681a      	ldr	r2, [r3, #0]
9000b882:	79fb      	ldrb	r3, [r7, #7]
9000b884:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000b886:	4911      	ldr	r1, [pc, #68]	@ (9000b8cc <UTIL_LCD_DisplayChar+0x68>)
9000b888:	68c9      	ldr	r1, [r1, #12]
9000b88a:	4810      	ldr	r0, [pc, #64]	@ (9000b8cc <UTIL_LCD_DisplayChar+0x68>)
9000b88c:	0149      	lsls	r1, r1, #5
9000b88e:	4401      	add	r1, r0
9000b890:	3108      	adds	r1, #8
9000b892:	6809      	ldr	r1, [r1, #0]
9000b894:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b896:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000b89a:	4b0c      	ldr	r3, [pc, #48]	@ (9000b8cc <UTIL_LCD_DisplayChar+0x68>)
9000b89c:	68db      	ldr	r3, [r3, #12]
9000b89e:	480b      	ldr	r0, [pc, #44]	@ (9000b8cc <UTIL_LCD_DisplayChar+0x68>)
9000b8a0:	015b      	lsls	r3, r3, #5
9000b8a2:	4403      	add	r3, r0
9000b8a4:	3308      	adds	r3, #8
9000b8a6:	681b      	ldr	r3, [r3, #0]
9000b8a8:	889b      	ldrh	r3, [r3, #4]
9000b8aa:	3307      	adds	r3, #7
9000b8ac:	2b00      	cmp	r3, #0
9000b8ae:	da00      	bge.n	9000b8b2 <UTIL_LCD_DisplayChar+0x4e>
9000b8b0:	3307      	adds	r3, #7
9000b8b2:	10db      	asrs	r3, r3, #3
9000b8b4:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b8b8:	4413      	add	r3, r2
9000b8ba:	461a      	mov	r2, r3
9000b8bc:	68b9      	ldr	r1, [r7, #8]
9000b8be:	68f8      	ldr	r0, [r7, #12]
9000b8c0:	f000 f8ee 	bl	9000baa0 <DrawChar>
}
9000b8c4:	bf00      	nop
9000b8c6:	3710      	adds	r7, #16
9000b8c8:	46bd      	mov	sp, r7
9000b8ca:	bd80      	pop	{r7, pc}
9000b8cc:	200012e0 	.word	0x200012e0

9000b8d0 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000b8d0:	b580      	push	{r7, lr}
9000b8d2:	b08a      	sub	sp, #40	@ 0x28
9000b8d4:	af00      	add	r7, sp, #0
9000b8d6:	60f8      	str	r0, [r7, #12]
9000b8d8:	60b9      	str	r1, [r7, #8]
9000b8da:	607a      	str	r2, [r7, #4]
9000b8dc:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000b8de:	2301      	movs	r3, #1
9000b8e0:	627b      	str	r3, [r7, #36]	@ 0x24
9000b8e2:	2300      	movs	r3, #0
9000b8e4:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000b8e6:	2300      	movs	r3, #0
9000b8e8:	61fb      	str	r3, [r7, #28]
9000b8ea:	2300      	movs	r3, #0
9000b8ec:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000b8ee:	687b      	ldr	r3, [r7, #4]
9000b8f0:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000b8f2:	e002      	b.n	9000b8fa <UTIL_LCD_DisplayStringAt+0x2a>
9000b8f4:	69fb      	ldr	r3, [r7, #28]
9000b8f6:	3301      	adds	r3, #1
9000b8f8:	61fb      	str	r3, [r7, #28]
9000b8fa:	69bb      	ldr	r3, [r7, #24]
9000b8fc:	1c5a      	adds	r2, r3, #1
9000b8fe:	61ba      	str	r2, [r7, #24]
9000b900:	781b      	ldrb	r3, [r3, #0]
9000b902:	2b00      	cmp	r3, #0
9000b904:	d1f6      	bne.n	9000b8f4 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000b906:	4b48      	ldr	r3, [pc, #288]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b908:	695b      	ldr	r3, [r3, #20]
9000b90a:	4a47      	ldr	r2, [pc, #284]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b90c:	68d2      	ldr	r2, [r2, #12]
9000b90e:	4946      	ldr	r1, [pc, #280]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b910:	0152      	lsls	r2, r2, #5
9000b912:	440a      	add	r2, r1
9000b914:	3208      	adds	r2, #8
9000b916:	6812      	ldr	r2, [r2, #0]
9000b918:	8892      	ldrh	r2, [r2, #4]
9000b91a:	fbb3 f3f2 	udiv	r3, r3, r2
9000b91e:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000b920:	78fb      	ldrb	r3, [r7, #3]
9000b922:	2b03      	cmp	r3, #3
9000b924:	d018      	beq.n	9000b958 <UTIL_LCD_DisplayStringAt+0x88>
9000b926:	2b03      	cmp	r3, #3
9000b928:	dc2a      	bgt.n	9000b980 <UTIL_LCD_DisplayStringAt+0xb0>
9000b92a:	2b01      	cmp	r3, #1
9000b92c:	d002      	beq.n	9000b934 <UTIL_LCD_DisplayStringAt+0x64>
9000b92e:	2b02      	cmp	r3, #2
9000b930:	d015      	beq.n	9000b95e <UTIL_LCD_DisplayStringAt+0x8e>
9000b932:	e025      	b.n	9000b980 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000b934:	697a      	ldr	r2, [r7, #20]
9000b936:	69fb      	ldr	r3, [r7, #28]
9000b938:	1ad3      	subs	r3, r2, r3
9000b93a:	4a3b      	ldr	r2, [pc, #236]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b93c:	68d2      	ldr	r2, [r2, #12]
9000b93e:	493a      	ldr	r1, [pc, #232]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b940:	0152      	lsls	r2, r2, #5
9000b942:	440a      	add	r2, r1
9000b944:	3208      	adds	r2, #8
9000b946:	6812      	ldr	r2, [r2, #0]
9000b948:	8892      	ldrh	r2, [r2, #4]
9000b94a:	fb02 f303 	mul.w	r3, r2, r3
9000b94e:	085b      	lsrs	r3, r3, #1
9000b950:	68fa      	ldr	r2, [r7, #12]
9000b952:	4413      	add	r3, r2
9000b954:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b956:	e016      	b.n	9000b986 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000b958:	68fb      	ldr	r3, [r7, #12]
9000b95a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b95c:	e013      	b.n	9000b986 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000b95e:	697a      	ldr	r2, [r7, #20]
9000b960:	69fb      	ldr	r3, [r7, #28]
9000b962:	1ad3      	subs	r3, r2, r3
9000b964:	4a30      	ldr	r2, [pc, #192]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b966:	68d2      	ldr	r2, [r2, #12]
9000b968:	492f      	ldr	r1, [pc, #188]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b96a:	0152      	lsls	r2, r2, #5
9000b96c:	440a      	add	r2, r1
9000b96e:	3208      	adds	r2, #8
9000b970:	6812      	ldr	r2, [r2, #0]
9000b972:	8892      	ldrh	r2, [r2, #4]
9000b974:	fb03 f202 	mul.w	r2, r3, r2
9000b978:	68fb      	ldr	r3, [r7, #12]
9000b97a:	1ad3      	subs	r3, r2, r3
9000b97c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b97e:	e002      	b.n	9000b986 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000b980:	68fb      	ldr	r3, [r7, #12]
9000b982:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000b984:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000b986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b988:	2b00      	cmp	r3, #0
9000b98a:	d003      	beq.n	9000b994 <UTIL_LCD_DisplayStringAt+0xc4>
9000b98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b98e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000b992:	d31b      	bcc.n	9000b9cc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000b994:	2301      	movs	r3, #1
9000b996:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000b998:	e018      	b.n	9000b9cc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000b99a:	687b      	ldr	r3, [r7, #4]
9000b99c:	781b      	ldrb	r3, [r3, #0]
9000b99e:	461a      	mov	r2, r3
9000b9a0:	68b9      	ldr	r1, [r7, #8]
9000b9a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000b9a4:	f7ff ff5e 	bl	9000b864 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000b9a8:	4b1f      	ldr	r3, [pc, #124]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9aa:	68db      	ldr	r3, [r3, #12]
9000b9ac:	4a1e      	ldr	r2, [pc, #120]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9ae:	015b      	lsls	r3, r3, #5
9000b9b0:	4413      	add	r3, r2
9000b9b2:	3308      	adds	r3, #8
9000b9b4:	681b      	ldr	r3, [r3, #0]
9000b9b6:	889b      	ldrh	r3, [r3, #4]
9000b9b8:	461a      	mov	r2, r3
9000b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b9bc:	4413      	add	r3, r2
9000b9be:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000b9c0:	687b      	ldr	r3, [r7, #4]
9000b9c2:	3301      	adds	r3, #1
9000b9c4:	607b      	str	r3, [r7, #4]
    i++;
9000b9c6:	6a3b      	ldr	r3, [r7, #32]
9000b9c8:	3301      	adds	r3, #1
9000b9ca:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000b9cc:	687b      	ldr	r3, [r7, #4]
9000b9ce:	781b      	ldrb	r3, [r3, #0]
9000b9d0:	2b00      	cmp	r3, #0
9000b9d2:	bf14      	ite	ne
9000b9d4:	2301      	movne	r3, #1
9000b9d6:	2300      	moveq	r3, #0
9000b9d8:	b2da      	uxtb	r2, r3
9000b9da:	4b13      	ldr	r3, [pc, #76]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9dc:	6959      	ldr	r1, [r3, #20]
9000b9de:	4b12      	ldr	r3, [pc, #72]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9e0:	68db      	ldr	r3, [r3, #12]
9000b9e2:	4811      	ldr	r0, [pc, #68]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9e4:	015b      	lsls	r3, r3, #5
9000b9e6:	4403      	add	r3, r0
9000b9e8:	3308      	adds	r3, #8
9000b9ea:	681b      	ldr	r3, [r3, #0]
9000b9ec:	889b      	ldrh	r3, [r3, #4]
9000b9ee:	4618      	mov	r0, r3
9000b9f0:	6a3b      	ldr	r3, [r7, #32]
9000b9f2:	fb00 f303 	mul.w	r3, r0, r3
9000b9f6:	1acb      	subs	r3, r1, r3
9000b9f8:	b29b      	uxth	r3, r3
9000b9fa:	490b      	ldr	r1, [pc, #44]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000b9fc:	68c9      	ldr	r1, [r1, #12]
9000b9fe:	480a      	ldr	r0, [pc, #40]	@ (9000ba28 <UTIL_LCD_DisplayStringAt+0x158>)
9000ba00:	0149      	lsls	r1, r1, #5
9000ba02:	4401      	add	r1, r0
9000ba04:	3108      	adds	r1, #8
9000ba06:	6809      	ldr	r1, [r1, #0]
9000ba08:	8889      	ldrh	r1, [r1, #4]
9000ba0a:	428b      	cmp	r3, r1
9000ba0c:	bf2c      	ite	cs
9000ba0e:	2301      	movcs	r3, #1
9000ba10:	2300      	movcc	r3, #0
9000ba12:	b2db      	uxtb	r3, r3
9000ba14:	4013      	ands	r3, r2
9000ba16:	b2db      	uxtb	r3, r3
9000ba18:	2b00      	cmp	r3, #0
9000ba1a:	d1be      	bne.n	9000b99a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000ba1c:	bf00      	nop
9000ba1e:	bf00      	nop
9000ba20:	3728      	adds	r7, #40	@ 0x28
9000ba22:	46bd      	mov	sp, r7
9000ba24:	bd80      	pop	{r7, pc}
9000ba26:	bf00      	nop
9000ba28:	200012e0 	.word	0x200012e0

9000ba2c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000ba2c:	b590      	push	{r4, r7, lr}
9000ba2e:	b087      	sub	sp, #28
9000ba30:	af02      	add	r7, sp, #8
9000ba32:	60f8      	str	r0, [r7, #12]
9000ba34:	60b9      	str	r1, [r7, #8]
9000ba36:	607a      	str	r2, [r7, #4]
9000ba38:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000ba3a:	4b17      	ldr	r3, [pc, #92]	@ (9000ba98 <UTIL_LCD_FillRect+0x6c>)
9000ba3c:	69db      	ldr	r3, [r3, #28]
9000ba3e:	2b02      	cmp	r3, #2
9000ba40:	d11a      	bne.n	9000ba78 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000ba42:	4b16      	ldr	r3, [pc, #88]	@ (9000ba9c <UTIL_LCD_FillRect+0x70>)
9000ba44:	691c      	ldr	r4, [r3, #16]
9000ba46:	4b14      	ldr	r3, [pc, #80]	@ (9000ba98 <UTIL_LCD_FillRect+0x6c>)
9000ba48:	6918      	ldr	r0, [r3, #16]
9000ba4a:	6a3b      	ldr	r3, [r7, #32]
9000ba4c:	08db      	lsrs	r3, r3, #3
9000ba4e:	f003 021f 	and.w	r2, r3, #31
9000ba52:	6a3b      	ldr	r3, [r7, #32]
9000ba54:	0a9b      	lsrs	r3, r3, #10
9000ba56:	015b      	lsls	r3, r3, #5
9000ba58:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000ba5c:	431a      	orrs	r2, r3
9000ba5e:	6a3b      	ldr	r3, [r7, #32]
9000ba60:	0cdb      	lsrs	r3, r3, #19
9000ba62:	02db      	lsls	r3, r3, #11
9000ba64:	b29b      	uxth	r3, r3
9000ba66:	4313      	orrs	r3, r2
9000ba68:	9301      	str	r3, [sp, #4]
9000ba6a:	683b      	ldr	r3, [r7, #0]
9000ba6c:	9300      	str	r3, [sp, #0]
9000ba6e:	687b      	ldr	r3, [r7, #4]
9000ba70:	68ba      	ldr	r2, [r7, #8]
9000ba72:	68f9      	ldr	r1, [r7, #12]
9000ba74:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000ba76:	e00b      	b.n	9000ba90 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000ba78:	4b08      	ldr	r3, [pc, #32]	@ (9000ba9c <UTIL_LCD_FillRect+0x70>)
9000ba7a:	691c      	ldr	r4, [r3, #16]
9000ba7c:	4b06      	ldr	r3, [pc, #24]	@ (9000ba98 <UTIL_LCD_FillRect+0x6c>)
9000ba7e:	6918      	ldr	r0, [r3, #16]
9000ba80:	6a3b      	ldr	r3, [r7, #32]
9000ba82:	9301      	str	r3, [sp, #4]
9000ba84:	683b      	ldr	r3, [r7, #0]
9000ba86:	9300      	str	r3, [sp, #0]
9000ba88:	687b      	ldr	r3, [r7, #4]
9000ba8a:	68ba      	ldr	r2, [r7, #8]
9000ba8c:	68f9      	ldr	r1, [r7, #12]
9000ba8e:	47a0      	blx	r4
}
9000ba90:	bf00      	nop
9000ba92:	3714      	adds	r7, #20
9000ba94:	46bd      	mov	sp, r7
9000ba96:	bd90      	pop	{r4, r7, pc}
9000ba98:	200012e0 	.word	0x200012e0
9000ba9c:	20001320 	.word	0x20001320

9000baa0 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000baa0:	b580      	push	{r7, lr}
9000baa2:	b0b2      	sub	sp, #200	@ 0xc8
9000baa4:	af02      	add	r7, sp, #8
9000baa6:	60f8      	str	r0, [r7, #12]
9000baa8:	60b9      	str	r1, [r7, #8]
9000baaa:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000baac:	2300      	movs	r3, #0
9000baae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bab2:	2300      	movs	r3, #0
9000bab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000bab8:	4ba5      	ldr	r3, [pc, #660]	@ (9000bd50 <DrawChar+0x2b0>)
9000baba:	68db      	ldr	r3, [r3, #12]
9000babc:	4aa4      	ldr	r2, [pc, #656]	@ (9000bd50 <DrawChar+0x2b0>)
9000babe:	015b      	lsls	r3, r3, #5
9000bac0:	4413      	add	r3, r2
9000bac2:	3308      	adds	r3, #8
9000bac4:	681b      	ldr	r3, [r3, #0]
9000bac6:	88db      	ldrh	r3, [r3, #6]
9000bac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bacc:	4ba0      	ldr	r3, [pc, #640]	@ (9000bd50 <DrawChar+0x2b0>)
9000bace:	68db      	ldr	r3, [r3, #12]
9000bad0:	4a9f      	ldr	r2, [pc, #636]	@ (9000bd50 <DrawChar+0x2b0>)
9000bad2:	015b      	lsls	r3, r3, #5
9000bad4:	4413      	add	r3, r2
9000bad6:	3308      	adds	r3, #8
9000bad8:	681b      	ldr	r3, [r3, #0]
9000bada:	889b      	ldrh	r3, [r3, #4]
9000badc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000bae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bae4:	3307      	adds	r3, #7
9000bae6:	f023 0207 	bic.w	r2, r3, #7
9000baea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000baee:	1ad3      	subs	r3, r2, r3
9000baf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000baf4:	2300      	movs	r3, #0
9000baf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bafa:	e11c      	b.n	9000bd36 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000bafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb00:	3307      	adds	r3, #7
9000bb02:	08db      	lsrs	r3, r3, #3
9000bb04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bb08:	fb02 f303 	mul.w	r3, r2, r3
9000bb0c:	687a      	ldr	r2, [r7, #4]
9000bb0e:	4413      	add	r3, r2
9000bb10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000bb14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bb18:	3307      	adds	r3, #7
9000bb1a:	08db      	lsrs	r3, r3, #3
9000bb1c:	2b01      	cmp	r3, #1
9000bb1e:	d002      	beq.n	9000bb26 <DrawChar+0x86>
9000bb20:	2b02      	cmp	r3, #2
9000bb22:	d006      	beq.n	9000bb32 <DrawChar+0x92>
9000bb24:	e011      	b.n	9000bb4a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000bb26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb2a:	781b      	ldrb	r3, [r3, #0]
9000bb2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb30:	e01d      	b.n	9000bb6e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000bb32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb36:	781b      	ldrb	r3, [r3, #0]
9000bb38:	021b      	lsls	r3, r3, #8
9000bb3a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bb3e:	3201      	adds	r2, #1
9000bb40:	7812      	ldrb	r2, [r2, #0]
9000bb42:	4313      	orrs	r3, r2
9000bb44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb48:	e011      	b.n	9000bb6e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000bb4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb4e:	781b      	ldrb	r3, [r3, #0]
9000bb50:	041a      	lsls	r2, r3, #16
9000bb52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bb56:	3301      	adds	r3, #1
9000bb58:	781b      	ldrb	r3, [r3, #0]
9000bb5a:	021b      	lsls	r3, r3, #8
9000bb5c:	4313      	orrs	r3, r2
9000bb5e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bb62:	3202      	adds	r2, #2
9000bb64:	7812      	ldrb	r2, [r2, #0]
9000bb66:	4313      	orrs	r3, r2
9000bb68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bb6c:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bb6e:	4b78      	ldr	r3, [pc, #480]	@ (9000bd50 <DrawChar+0x2b0>)
9000bb70:	68db      	ldr	r3, [r3, #12]
9000bb72:	4a77      	ldr	r2, [pc, #476]	@ (9000bd50 <DrawChar+0x2b0>)
9000bb74:	015b      	lsls	r3, r3, #5
9000bb76:	4413      	add	r3, r2
9000bb78:	331c      	adds	r3, #28
9000bb7a:	681b      	ldr	r3, [r3, #0]
9000bb7c:	2b02      	cmp	r3, #2
9000bb7e:	f040 808c 	bne.w	9000bc9a <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000bb82:	2300      	movs	r3, #0
9000bb84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bb88:	e074      	b.n	9000bc74 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000bb8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000bb8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bb92:	1ad2      	subs	r2, r2, r3
9000bb94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000bb98:	4413      	add	r3, r2
9000bb9a:	3b01      	subs	r3, #1
9000bb9c:	2201      	movs	r2, #1
9000bb9e:	fa02 f303 	lsl.w	r3, r2, r3
9000bba2:	461a      	mov	r2, r3
9000bba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000bba8:	4013      	ands	r3, r2
9000bbaa:	2b00      	cmp	r3, #0
9000bbac:	d02d      	beq.n	9000bc0a <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000bbae:	4b68      	ldr	r3, [pc, #416]	@ (9000bd50 <DrawChar+0x2b0>)
9000bbb0:	68db      	ldr	r3, [r3, #12]
9000bbb2:	4a67      	ldr	r2, [pc, #412]	@ (9000bd50 <DrawChar+0x2b0>)
9000bbb4:	015b      	lsls	r3, r3, #5
9000bbb6:	4413      	add	r3, r2
9000bbb8:	681b      	ldr	r3, [r3, #0]
9000bbba:	08db      	lsrs	r3, r3, #3
9000bbbc:	b29b      	uxth	r3, r3
9000bbbe:	f003 031f 	and.w	r3, r3, #31
9000bbc2:	b29a      	uxth	r2, r3
9000bbc4:	4b62      	ldr	r3, [pc, #392]	@ (9000bd50 <DrawChar+0x2b0>)
9000bbc6:	68db      	ldr	r3, [r3, #12]
9000bbc8:	4961      	ldr	r1, [pc, #388]	@ (9000bd50 <DrawChar+0x2b0>)
9000bbca:	015b      	lsls	r3, r3, #5
9000bbcc:	440b      	add	r3, r1
9000bbce:	681b      	ldr	r3, [r3, #0]
9000bbd0:	0a9b      	lsrs	r3, r3, #10
9000bbd2:	b29b      	uxth	r3, r3
9000bbd4:	015b      	lsls	r3, r3, #5
9000bbd6:	b29b      	uxth	r3, r3
9000bbd8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bbdc:	b29b      	uxth	r3, r3
9000bbde:	4313      	orrs	r3, r2
9000bbe0:	b29a      	uxth	r2, r3
9000bbe2:	4b5b      	ldr	r3, [pc, #364]	@ (9000bd50 <DrawChar+0x2b0>)
9000bbe4:	68db      	ldr	r3, [r3, #12]
9000bbe6:	495a      	ldr	r1, [pc, #360]	@ (9000bd50 <DrawChar+0x2b0>)
9000bbe8:	015b      	lsls	r3, r3, #5
9000bbea:	440b      	add	r3, r1
9000bbec:	681b      	ldr	r3, [r3, #0]
9000bbee:	0cdb      	lsrs	r3, r3, #19
9000bbf0:	b29b      	uxth	r3, r3
9000bbf2:	02db      	lsls	r3, r3, #11
9000bbf4:	b29b      	uxth	r3, r3
9000bbf6:	4313      	orrs	r3, r2
9000bbf8:	b29a      	uxth	r2, r3
9000bbfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bbfe:	005b      	lsls	r3, r3, #1
9000bc00:	33c0      	adds	r3, #192	@ 0xc0
9000bc02:	443b      	add	r3, r7
9000bc04:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000bc08:	e02f      	b.n	9000bc6a <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000bc0a:	4b51      	ldr	r3, [pc, #324]	@ (9000bd50 <DrawChar+0x2b0>)
9000bc0c:	68db      	ldr	r3, [r3, #12]
9000bc0e:	4a50      	ldr	r2, [pc, #320]	@ (9000bd50 <DrawChar+0x2b0>)
9000bc10:	015b      	lsls	r3, r3, #5
9000bc12:	4413      	add	r3, r2
9000bc14:	3304      	adds	r3, #4
9000bc16:	681b      	ldr	r3, [r3, #0]
9000bc18:	08db      	lsrs	r3, r3, #3
9000bc1a:	b29b      	uxth	r3, r3
9000bc1c:	f003 031f 	and.w	r3, r3, #31
9000bc20:	b29a      	uxth	r2, r3
9000bc22:	4b4b      	ldr	r3, [pc, #300]	@ (9000bd50 <DrawChar+0x2b0>)
9000bc24:	68db      	ldr	r3, [r3, #12]
9000bc26:	494a      	ldr	r1, [pc, #296]	@ (9000bd50 <DrawChar+0x2b0>)
9000bc28:	015b      	lsls	r3, r3, #5
9000bc2a:	440b      	add	r3, r1
9000bc2c:	3304      	adds	r3, #4
9000bc2e:	681b      	ldr	r3, [r3, #0]
9000bc30:	0a9b      	lsrs	r3, r3, #10
9000bc32:	b29b      	uxth	r3, r3
9000bc34:	015b      	lsls	r3, r3, #5
9000bc36:	b29b      	uxth	r3, r3
9000bc38:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bc3c:	b29b      	uxth	r3, r3
9000bc3e:	4313      	orrs	r3, r2
9000bc40:	b29a      	uxth	r2, r3
9000bc42:	4b43      	ldr	r3, [pc, #268]	@ (9000bd50 <DrawChar+0x2b0>)
9000bc44:	68db      	ldr	r3, [r3, #12]
9000bc46:	4942      	ldr	r1, [pc, #264]	@ (9000bd50 <DrawChar+0x2b0>)
9000bc48:	015b      	lsls	r3, r3, #5
9000bc4a:	440b      	add	r3, r1
9000bc4c:	3304      	adds	r3, #4
9000bc4e:	681b      	ldr	r3, [r3, #0]
9000bc50:	0cdb      	lsrs	r3, r3, #19
9000bc52:	b29b      	uxth	r3, r3
9000bc54:	02db      	lsls	r3, r3, #11
9000bc56:	b29b      	uxth	r3, r3
9000bc58:	4313      	orrs	r3, r2
9000bc5a:	b29a      	uxth	r2, r3
9000bc5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bc60:	005b      	lsls	r3, r3, #1
9000bc62:	33c0      	adds	r3, #192	@ 0xc0
9000bc64:	443b      	add	r3, r7
9000bc66:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000bc6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bc6e:	3301      	adds	r3, #1
9000bc70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bc74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000bc78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bc7c:	429a      	cmp	r2, r3
9000bc7e:	d384      	bcc.n	9000bb8a <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000bc80:	68b9      	ldr	r1, [r7, #8]
9000bc82:	1c4b      	adds	r3, r1, #1
9000bc84:	60bb      	str	r3, [r7, #8]
9000bc86:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000bc8a:	2301      	movs	r3, #1
9000bc8c:	9300      	str	r3, [sp, #0]
9000bc8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bc92:	68f8      	ldr	r0, [r7, #12]
9000bc94:	f7ff fdb4 	bl	9000b800 <UTIL_LCD_FillRGBRect>
9000bc98:	e048      	b.n	9000bd2c <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000bc9a:	2300      	movs	r3, #0
9000bc9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bca0:	e032      	b.n	9000bd08 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000bca2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000bca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bcaa:	1ad2      	subs	r2, r2, r3
9000bcac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000bcb0:	4413      	add	r3, r2
9000bcb2:	3b01      	subs	r3, #1
9000bcb4:	2201      	movs	r2, #1
9000bcb6:	fa02 f303 	lsl.w	r3, r2, r3
9000bcba:	461a      	mov	r2, r3
9000bcbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000bcc0:	4013      	ands	r3, r2
9000bcc2:	2b00      	cmp	r3, #0
9000bcc4:	d00d      	beq.n	9000bce2 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000bcc6:	4b22      	ldr	r3, [pc, #136]	@ (9000bd50 <DrawChar+0x2b0>)
9000bcc8:	68db      	ldr	r3, [r3, #12]
9000bcca:	4a21      	ldr	r2, [pc, #132]	@ (9000bd50 <DrawChar+0x2b0>)
9000bccc:	015b      	lsls	r3, r3, #5
9000bcce:	4413      	add	r3, r2
9000bcd0:	681a      	ldr	r2, [r3, #0]
9000bcd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bcd6:	009b      	lsls	r3, r3, #2
9000bcd8:	33c0      	adds	r3, #192	@ 0xc0
9000bcda:	443b      	add	r3, r7
9000bcdc:	f843 2cac 	str.w	r2, [r3, #-172]
9000bce0:	e00d      	b.n	9000bcfe <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000bce2:	4b1b      	ldr	r3, [pc, #108]	@ (9000bd50 <DrawChar+0x2b0>)
9000bce4:	68db      	ldr	r3, [r3, #12]
9000bce6:	4a1a      	ldr	r2, [pc, #104]	@ (9000bd50 <DrawChar+0x2b0>)
9000bce8:	015b      	lsls	r3, r3, #5
9000bcea:	4413      	add	r3, r2
9000bcec:	3304      	adds	r3, #4
9000bcee:	681a      	ldr	r2, [r3, #0]
9000bcf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bcf4:	009b      	lsls	r3, r3, #2
9000bcf6:	33c0      	adds	r3, #192	@ 0xc0
9000bcf8:	443b      	add	r3, r7
9000bcfa:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000bcfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bd02:	3301      	adds	r3, #1
9000bd04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bd08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000bd0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bd10:	429a      	cmp	r2, r3
9000bd12:	d3c6      	bcc.n	9000bca2 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000bd14:	68b9      	ldr	r1, [r7, #8]
9000bd16:	1c4b      	adds	r3, r1, #1
9000bd18:	60bb      	str	r3, [r7, #8]
9000bd1a:	f107 0214 	add.w	r2, r7, #20
9000bd1e:	2301      	movs	r3, #1
9000bd20:	9300      	str	r3, [sp, #0]
9000bd22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bd26:	68f8      	ldr	r0, [r7, #12]
9000bd28:	f7ff fd6a 	bl	9000b800 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000bd2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000bd30:	3301      	adds	r3, #1
9000bd32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bd36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bd3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000bd3e:	429a      	cmp	r2, r3
9000bd40:	f4ff aedc 	bcc.w	9000bafc <DrawChar+0x5c>
    }
  }
}
9000bd44:	bf00      	nop
9000bd46:	bf00      	nop
9000bd48:	37c0      	adds	r7, #192	@ 0xc0
9000bd4a:	46bd      	mov	sp, r7
9000bd4c:	bd80      	pop	{r7, pc}
9000bd4e:	bf00      	nop
9000bd50:	200012e0 	.word	0x200012e0

9000bd54 <sbrk_aligned>:
9000bd54:	b570      	push	{r4, r5, r6, lr}
9000bd56:	4e0f      	ldr	r6, [pc, #60]	@ (9000bd94 <sbrk_aligned+0x40>)
9000bd58:	460c      	mov	r4, r1
9000bd5a:	6831      	ldr	r1, [r6, #0]
9000bd5c:	4605      	mov	r5, r0
9000bd5e:	b911      	cbnz	r1, 9000bd66 <sbrk_aligned+0x12>
9000bd60:	f000 faec 	bl	9000c33c <_sbrk_r>
9000bd64:	6030      	str	r0, [r6, #0]
9000bd66:	4621      	mov	r1, r4
9000bd68:	4628      	mov	r0, r5
9000bd6a:	f000 fae7 	bl	9000c33c <_sbrk_r>
9000bd6e:	1c43      	adds	r3, r0, #1
9000bd70:	d103      	bne.n	9000bd7a <sbrk_aligned+0x26>
9000bd72:	f04f 34ff 	mov.w	r4, #4294967295
9000bd76:	4620      	mov	r0, r4
9000bd78:	bd70      	pop	{r4, r5, r6, pc}
9000bd7a:	1cc4      	adds	r4, r0, #3
9000bd7c:	f024 0403 	bic.w	r4, r4, #3
9000bd80:	42a0      	cmp	r0, r4
9000bd82:	d0f8      	beq.n	9000bd76 <sbrk_aligned+0x22>
9000bd84:	1a21      	subs	r1, r4, r0
9000bd86:	4628      	mov	r0, r5
9000bd88:	f000 fad8 	bl	9000c33c <_sbrk_r>
9000bd8c:	3001      	adds	r0, #1
9000bd8e:	d1f2      	bne.n	9000bd76 <sbrk_aligned+0x22>
9000bd90:	e7ef      	b.n	9000bd72 <sbrk_aligned+0x1e>
9000bd92:	bf00      	nop
9000bd94:	2000134c 	.word	0x2000134c

9000bd98 <_malloc_r>:
9000bd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000bd9c:	1ccd      	adds	r5, r1, #3
9000bd9e:	f025 0503 	bic.w	r5, r5, #3
9000bda2:	3508      	adds	r5, #8
9000bda4:	2d0c      	cmp	r5, #12
9000bda6:	bf38      	it	cc
9000bda8:	250c      	movcc	r5, #12
9000bdaa:	2d00      	cmp	r5, #0
9000bdac:	4606      	mov	r6, r0
9000bdae:	db01      	blt.n	9000bdb4 <_malloc_r+0x1c>
9000bdb0:	42a9      	cmp	r1, r5
9000bdb2:	d904      	bls.n	9000bdbe <_malloc_r+0x26>
9000bdb4:	230c      	movs	r3, #12
9000bdb6:	6033      	str	r3, [r6, #0]
9000bdb8:	2000      	movs	r0, #0
9000bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000bdbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000be94 <_malloc_r+0xfc>
9000bdc2:	f000 f869 	bl	9000be98 <__malloc_lock>
9000bdc6:	f8d8 3000 	ldr.w	r3, [r8]
9000bdca:	461c      	mov	r4, r3
9000bdcc:	bb44      	cbnz	r4, 9000be20 <_malloc_r+0x88>
9000bdce:	4629      	mov	r1, r5
9000bdd0:	4630      	mov	r0, r6
9000bdd2:	f7ff ffbf 	bl	9000bd54 <sbrk_aligned>
9000bdd6:	1c43      	adds	r3, r0, #1
9000bdd8:	4604      	mov	r4, r0
9000bdda:	d158      	bne.n	9000be8e <_malloc_r+0xf6>
9000bddc:	f8d8 4000 	ldr.w	r4, [r8]
9000bde0:	4627      	mov	r7, r4
9000bde2:	2f00      	cmp	r7, #0
9000bde4:	d143      	bne.n	9000be6e <_malloc_r+0xd6>
9000bde6:	2c00      	cmp	r4, #0
9000bde8:	d04b      	beq.n	9000be82 <_malloc_r+0xea>
9000bdea:	6823      	ldr	r3, [r4, #0]
9000bdec:	4639      	mov	r1, r7
9000bdee:	4630      	mov	r0, r6
9000bdf0:	eb04 0903 	add.w	r9, r4, r3
9000bdf4:	f000 faa2 	bl	9000c33c <_sbrk_r>
9000bdf8:	4581      	cmp	r9, r0
9000bdfa:	d142      	bne.n	9000be82 <_malloc_r+0xea>
9000bdfc:	6821      	ldr	r1, [r4, #0]
9000bdfe:	1a6d      	subs	r5, r5, r1
9000be00:	4629      	mov	r1, r5
9000be02:	4630      	mov	r0, r6
9000be04:	f7ff ffa6 	bl	9000bd54 <sbrk_aligned>
9000be08:	3001      	adds	r0, #1
9000be0a:	d03a      	beq.n	9000be82 <_malloc_r+0xea>
9000be0c:	6823      	ldr	r3, [r4, #0]
9000be0e:	442b      	add	r3, r5
9000be10:	6023      	str	r3, [r4, #0]
9000be12:	f8d8 3000 	ldr.w	r3, [r8]
9000be16:	685a      	ldr	r2, [r3, #4]
9000be18:	bb62      	cbnz	r2, 9000be74 <_malloc_r+0xdc>
9000be1a:	f8c8 7000 	str.w	r7, [r8]
9000be1e:	e00f      	b.n	9000be40 <_malloc_r+0xa8>
9000be20:	6822      	ldr	r2, [r4, #0]
9000be22:	1b52      	subs	r2, r2, r5
9000be24:	d420      	bmi.n	9000be68 <_malloc_r+0xd0>
9000be26:	2a0b      	cmp	r2, #11
9000be28:	d917      	bls.n	9000be5a <_malloc_r+0xc2>
9000be2a:	1961      	adds	r1, r4, r5
9000be2c:	42a3      	cmp	r3, r4
9000be2e:	6025      	str	r5, [r4, #0]
9000be30:	bf18      	it	ne
9000be32:	6059      	strne	r1, [r3, #4]
9000be34:	6863      	ldr	r3, [r4, #4]
9000be36:	bf08      	it	eq
9000be38:	f8c8 1000 	streq.w	r1, [r8]
9000be3c:	5162      	str	r2, [r4, r5]
9000be3e:	604b      	str	r3, [r1, #4]
9000be40:	4630      	mov	r0, r6
9000be42:	f000 f82f 	bl	9000bea4 <__malloc_unlock>
9000be46:	f104 000b 	add.w	r0, r4, #11
9000be4a:	1d23      	adds	r3, r4, #4
9000be4c:	f020 0007 	bic.w	r0, r0, #7
9000be50:	1ac2      	subs	r2, r0, r3
9000be52:	bf1c      	itt	ne
9000be54:	1a1b      	subne	r3, r3, r0
9000be56:	50a3      	strne	r3, [r4, r2]
9000be58:	e7af      	b.n	9000bdba <_malloc_r+0x22>
9000be5a:	6862      	ldr	r2, [r4, #4]
9000be5c:	42a3      	cmp	r3, r4
9000be5e:	bf0c      	ite	eq
9000be60:	f8c8 2000 	streq.w	r2, [r8]
9000be64:	605a      	strne	r2, [r3, #4]
9000be66:	e7eb      	b.n	9000be40 <_malloc_r+0xa8>
9000be68:	4623      	mov	r3, r4
9000be6a:	6864      	ldr	r4, [r4, #4]
9000be6c:	e7ae      	b.n	9000bdcc <_malloc_r+0x34>
9000be6e:	463c      	mov	r4, r7
9000be70:	687f      	ldr	r7, [r7, #4]
9000be72:	e7b6      	b.n	9000bde2 <_malloc_r+0x4a>
9000be74:	461a      	mov	r2, r3
9000be76:	685b      	ldr	r3, [r3, #4]
9000be78:	42a3      	cmp	r3, r4
9000be7a:	d1fb      	bne.n	9000be74 <_malloc_r+0xdc>
9000be7c:	2300      	movs	r3, #0
9000be7e:	6053      	str	r3, [r2, #4]
9000be80:	e7de      	b.n	9000be40 <_malloc_r+0xa8>
9000be82:	230c      	movs	r3, #12
9000be84:	6033      	str	r3, [r6, #0]
9000be86:	4630      	mov	r0, r6
9000be88:	f000 f80c 	bl	9000bea4 <__malloc_unlock>
9000be8c:	e794      	b.n	9000bdb8 <_malloc_r+0x20>
9000be8e:	6005      	str	r5, [r0, #0]
9000be90:	e7d6      	b.n	9000be40 <_malloc_r+0xa8>
9000be92:	bf00      	nop
9000be94:	20001350 	.word	0x20001350

9000be98 <__malloc_lock>:
9000be98:	4801      	ldr	r0, [pc, #4]	@ (9000bea0 <__malloc_lock+0x8>)
9000be9a:	f000 ba9c 	b.w	9000c3d6 <__retarget_lock_acquire_recursive>
9000be9e:	bf00      	nop
9000bea0:	20001494 	.word	0x20001494

9000bea4 <__malloc_unlock>:
9000bea4:	4801      	ldr	r0, [pc, #4]	@ (9000beac <__malloc_unlock+0x8>)
9000bea6:	f000 ba97 	b.w	9000c3d8 <__retarget_lock_release_recursive>
9000beaa:	bf00      	nop
9000beac:	20001494 	.word	0x20001494

9000beb0 <std>:
9000beb0:	2300      	movs	r3, #0
9000beb2:	b510      	push	{r4, lr}
9000beb4:	4604      	mov	r4, r0
9000beb6:	e9c0 3300 	strd	r3, r3, [r0]
9000beba:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000bebe:	6083      	str	r3, [r0, #8]
9000bec0:	8181      	strh	r1, [r0, #12]
9000bec2:	6643      	str	r3, [r0, #100]	@ 0x64
9000bec4:	81c2      	strh	r2, [r0, #14]
9000bec6:	6183      	str	r3, [r0, #24]
9000bec8:	4619      	mov	r1, r3
9000beca:	2208      	movs	r2, #8
9000becc:	305c      	adds	r0, #92	@ 0x5c
9000bece:	f000 f9f9 	bl	9000c2c4 <memset>
9000bed2:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf08 <std+0x58>)
9000bed4:	6263      	str	r3, [r4, #36]	@ 0x24
9000bed6:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf0c <std+0x5c>)
9000bed8:	62a3      	str	r3, [r4, #40]	@ 0x28
9000beda:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf10 <std+0x60>)
9000bedc:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000bede:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf14 <std+0x64>)
9000bee0:	6323      	str	r3, [r4, #48]	@ 0x30
9000bee2:	4b0d      	ldr	r3, [pc, #52]	@ (9000bf18 <std+0x68>)
9000bee4:	6224      	str	r4, [r4, #32]
9000bee6:	429c      	cmp	r4, r3
9000bee8:	d006      	beq.n	9000bef8 <std+0x48>
9000beea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000beee:	4294      	cmp	r4, r2
9000bef0:	d002      	beq.n	9000bef8 <std+0x48>
9000bef2:	33d0      	adds	r3, #208	@ 0xd0
9000bef4:	429c      	cmp	r4, r3
9000bef6:	d105      	bne.n	9000bf04 <std+0x54>
9000bef8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000befc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bf00:	f000 ba68 	b.w	9000c3d4 <__retarget_lock_init_recursive>
9000bf04:	bd10      	pop	{r4, pc}
9000bf06:	bf00      	nop
9000bf08:	9000c115 	.word	0x9000c115
9000bf0c:	9000c137 	.word	0x9000c137
9000bf10:	9000c16f 	.word	0x9000c16f
9000bf14:	9000c193 	.word	0x9000c193
9000bf18:	20001354 	.word	0x20001354

9000bf1c <stdio_exit_handler>:
9000bf1c:	4a02      	ldr	r2, [pc, #8]	@ (9000bf28 <stdio_exit_handler+0xc>)
9000bf1e:	4903      	ldr	r1, [pc, #12]	@ (9000bf2c <stdio_exit_handler+0x10>)
9000bf20:	4803      	ldr	r0, [pc, #12]	@ (9000bf30 <stdio_exit_handler+0x14>)
9000bf22:	f000 b869 	b.w	9000bff8 <_fwalk_sglue>
9000bf26:	bf00      	nop
9000bf28:	20000070 	.word	0x20000070
9000bf2c:	9000cb15 	.word	0x9000cb15
9000bf30:	20000080 	.word	0x20000080

9000bf34 <cleanup_stdio>:
9000bf34:	6841      	ldr	r1, [r0, #4]
9000bf36:	4b0c      	ldr	r3, [pc, #48]	@ (9000bf68 <cleanup_stdio+0x34>)
9000bf38:	4299      	cmp	r1, r3
9000bf3a:	b510      	push	{r4, lr}
9000bf3c:	4604      	mov	r4, r0
9000bf3e:	d001      	beq.n	9000bf44 <cleanup_stdio+0x10>
9000bf40:	f000 fde8 	bl	9000cb14 <_fflush_r>
9000bf44:	68a1      	ldr	r1, [r4, #8]
9000bf46:	4b09      	ldr	r3, [pc, #36]	@ (9000bf6c <cleanup_stdio+0x38>)
9000bf48:	4299      	cmp	r1, r3
9000bf4a:	d002      	beq.n	9000bf52 <cleanup_stdio+0x1e>
9000bf4c:	4620      	mov	r0, r4
9000bf4e:	f000 fde1 	bl	9000cb14 <_fflush_r>
9000bf52:	68e1      	ldr	r1, [r4, #12]
9000bf54:	4b06      	ldr	r3, [pc, #24]	@ (9000bf70 <cleanup_stdio+0x3c>)
9000bf56:	4299      	cmp	r1, r3
9000bf58:	d004      	beq.n	9000bf64 <cleanup_stdio+0x30>
9000bf5a:	4620      	mov	r0, r4
9000bf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bf60:	f000 bdd8 	b.w	9000cb14 <_fflush_r>
9000bf64:	bd10      	pop	{r4, pc}
9000bf66:	bf00      	nop
9000bf68:	20001354 	.word	0x20001354
9000bf6c:	200013bc 	.word	0x200013bc
9000bf70:	20001424 	.word	0x20001424

9000bf74 <global_stdio_init.part.0>:
9000bf74:	b510      	push	{r4, lr}
9000bf76:	4b0b      	ldr	r3, [pc, #44]	@ (9000bfa4 <global_stdio_init.part.0+0x30>)
9000bf78:	4c0b      	ldr	r4, [pc, #44]	@ (9000bfa8 <global_stdio_init.part.0+0x34>)
9000bf7a:	4a0c      	ldr	r2, [pc, #48]	@ (9000bfac <global_stdio_init.part.0+0x38>)
9000bf7c:	601a      	str	r2, [r3, #0]
9000bf7e:	4620      	mov	r0, r4
9000bf80:	2200      	movs	r2, #0
9000bf82:	2104      	movs	r1, #4
9000bf84:	f7ff ff94 	bl	9000beb0 <std>
9000bf88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000bf8c:	2201      	movs	r2, #1
9000bf8e:	2109      	movs	r1, #9
9000bf90:	f7ff ff8e 	bl	9000beb0 <std>
9000bf94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000bf98:	2202      	movs	r2, #2
9000bf9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bf9e:	2112      	movs	r1, #18
9000bfa0:	f7ff bf86 	b.w	9000beb0 <std>
9000bfa4:	2000148c 	.word	0x2000148c
9000bfa8:	20001354 	.word	0x20001354
9000bfac:	9000bf1d 	.word	0x9000bf1d

9000bfb0 <__sfp_lock_acquire>:
9000bfb0:	4801      	ldr	r0, [pc, #4]	@ (9000bfb8 <__sfp_lock_acquire+0x8>)
9000bfb2:	f000 ba10 	b.w	9000c3d6 <__retarget_lock_acquire_recursive>
9000bfb6:	bf00      	nop
9000bfb8:	20001495 	.word	0x20001495

9000bfbc <__sfp_lock_release>:
9000bfbc:	4801      	ldr	r0, [pc, #4]	@ (9000bfc4 <__sfp_lock_release+0x8>)
9000bfbe:	f000 ba0b 	b.w	9000c3d8 <__retarget_lock_release_recursive>
9000bfc2:	bf00      	nop
9000bfc4:	20001495 	.word	0x20001495

9000bfc8 <__sinit>:
9000bfc8:	b510      	push	{r4, lr}
9000bfca:	4604      	mov	r4, r0
9000bfcc:	f7ff fff0 	bl	9000bfb0 <__sfp_lock_acquire>
9000bfd0:	6a23      	ldr	r3, [r4, #32]
9000bfd2:	b11b      	cbz	r3, 9000bfdc <__sinit+0x14>
9000bfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000bfd8:	f7ff bff0 	b.w	9000bfbc <__sfp_lock_release>
9000bfdc:	4b04      	ldr	r3, [pc, #16]	@ (9000bff0 <__sinit+0x28>)
9000bfde:	6223      	str	r3, [r4, #32]
9000bfe0:	4b04      	ldr	r3, [pc, #16]	@ (9000bff4 <__sinit+0x2c>)
9000bfe2:	681b      	ldr	r3, [r3, #0]
9000bfe4:	2b00      	cmp	r3, #0
9000bfe6:	d1f5      	bne.n	9000bfd4 <__sinit+0xc>
9000bfe8:	f7ff ffc4 	bl	9000bf74 <global_stdio_init.part.0>
9000bfec:	e7f2      	b.n	9000bfd4 <__sinit+0xc>
9000bfee:	bf00      	nop
9000bff0:	9000bf35 	.word	0x9000bf35
9000bff4:	2000148c 	.word	0x2000148c

9000bff8 <_fwalk_sglue>:
9000bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000bffc:	4607      	mov	r7, r0
9000bffe:	4688      	mov	r8, r1
9000c000:	4614      	mov	r4, r2
9000c002:	2600      	movs	r6, #0
9000c004:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c008:	f1b9 0901 	subs.w	r9, r9, #1
9000c00c:	d505      	bpl.n	9000c01a <_fwalk_sglue+0x22>
9000c00e:	6824      	ldr	r4, [r4, #0]
9000c010:	2c00      	cmp	r4, #0
9000c012:	d1f7      	bne.n	9000c004 <_fwalk_sglue+0xc>
9000c014:	4630      	mov	r0, r6
9000c016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c01a:	89ab      	ldrh	r3, [r5, #12]
9000c01c:	2b01      	cmp	r3, #1
9000c01e:	d907      	bls.n	9000c030 <_fwalk_sglue+0x38>
9000c020:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c024:	3301      	adds	r3, #1
9000c026:	d003      	beq.n	9000c030 <_fwalk_sglue+0x38>
9000c028:	4629      	mov	r1, r5
9000c02a:	4638      	mov	r0, r7
9000c02c:	47c0      	blx	r8
9000c02e:	4306      	orrs	r6, r0
9000c030:	3568      	adds	r5, #104	@ 0x68
9000c032:	e7e9      	b.n	9000c008 <_fwalk_sglue+0x10>

9000c034 <iprintf>:
9000c034:	b40f      	push	{r0, r1, r2, r3}
9000c036:	b507      	push	{r0, r1, r2, lr}
9000c038:	4906      	ldr	r1, [pc, #24]	@ (9000c054 <iprintf+0x20>)
9000c03a:	ab04      	add	r3, sp, #16
9000c03c:	6808      	ldr	r0, [r1, #0]
9000c03e:	f853 2b04 	ldr.w	r2, [r3], #4
9000c042:	6881      	ldr	r1, [r0, #8]
9000c044:	9301      	str	r3, [sp, #4]
9000c046:	f000 fa3d 	bl	9000c4c4 <_vfiprintf_r>
9000c04a:	b003      	add	sp, #12
9000c04c:	f85d eb04 	ldr.w	lr, [sp], #4
9000c050:	b004      	add	sp, #16
9000c052:	4770      	bx	lr
9000c054:	2000007c 	.word	0x2000007c

9000c058 <_puts_r>:
9000c058:	6a03      	ldr	r3, [r0, #32]
9000c05a:	b570      	push	{r4, r5, r6, lr}
9000c05c:	6884      	ldr	r4, [r0, #8]
9000c05e:	4605      	mov	r5, r0
9000c060:	460e      	mov	r6, r1
9000c062:	b90b      	cbnz	r3, 9000c068 <_puts_r+0x10>
9000c064:	f7ff ffb0 	bl	9000bfc8 <__sinit>
9000c068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c06a:	07db      	lsls	r3, r3, #31
9000c06c:	d405      	bmi.n	9000c07a <_puts_r+0x22>
9000c06e:	89a3      	ldrh	r3, [r4, #12]
9000c070:	0598      	lsls	r0, r3, #22
9000c072:	d402      	bmi.n	9000c07a <_puts_r+0x22>
9000c074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c076:	f000 f9ae 	bl	9000c3d6 <__retarget_lock_acquire_recursive>
9000c07a:	89a3      	ldrh	r3, [r4, #12]
9000c07c:	0719      	lsls	r1, r3, #28
9000c07e:	d502      	bpl.n	9000c086 <_puts_r+0x2e>
9000c080:	6923      	ldr	r3, [r4, #16]
9000c082:	2b00      	cmp	r3, #0
9000c084:	d135      	bne.n	9000c0f2 <_puts_r+0x9a>
9000c086:	4621      	mov	r1, r4
9000c088:	4628      	mov	r0, r5
9000c08a:	f000 f8c5 	bl	9000c218 <__swsetup_r>
9000c08e:	b380      	cbz	r0, 9000c0f2 <_puts_r+0x9a>
9000c090:	f04f 35ff 	mov.w	r5, #4294967295
9000c094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c096:	07da      	lsls	r2, r3, #31
9000c098:	d405      	bmi.n	9000c0a6 <_puts_r+0x4e>
9000c09a:	89a3      	ldrh	r3, [r4, #12]
9000c09c:	059b      	lsls	r3, r3, #22
9000c09e:	d402      	bmi.n	9000c0a6 <_puts_r+0x4e>
9000c0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c0a2:	f000 f999 	bl	9000c3d8 <__retarget_lock_release_recursive>
9000c0a6:	4628      	mov	r0, r5
9000c0a8:	bd70      	pop	{r4, r5, r6, pc}
9000c0aa:	2b00      	cmp	r3, #0
9000c0ac:	da04      	bge.n	9000c0b8 <_puts_r+0x60>
9000c0ae:	69a2      	ldr	r2, [r4, #24]
9000c0b0:	429a      	cmp	r2, r3
9000c0b2:	dc17      	bgt.n	9000c0e4 <_puts_r+0x8c>
9000c0b4:	290a      	cmp	r1, #10
9000c0b6:	d015      	beq.n	9000c0e4 <_puts_r+0x8c>
9000c0b8:	6823      	ldr	r3, [r4, #0]
9000c0ba:	1c5a      	adds	r2, r3, #1
9000c0bc:	6022      	str	r2, [r4, #0]
9000c0be:	7019      	strb	r1, [r3, #0]
9000c0c0:	68a3      	ldr	r3, [r4, #8]
9000c0c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c0c6:	3b01      	subs	r3, #1
9000c0c8:	60a3      	str	r3, [r4, #8]
9000c0ca:	2900      	cmp	r1, #0
9000c0cc:	d1ed      	bne.n	9000c0aa <_puts_r+0x52>
9000c0ce:	2b00      	cmp	r3, #0
9000c0d0:	da11      	bge.n	9000c0f6 <_puts_r+0x9e>
9000c0d2:	4622      	mov	r2, r4
9000c0d4:	210a      	movs	r1, #10
9000c0d6:	4628      	mov	r0, r5
9000c0d8:	f000 f85f 	bl	9000c19a <__swbuf_r>
9000c0dc:	3001      	adds	r0, #1
9000c0de:	d0d7      	beq.n	9000c090 <_puts_r+0x38>
9000c0e0:	250a      	movs	r5, #10
9000c0e2:	e7d7      	b.n	9000c094 <_puts_r+0x3c>
9000c0e4:	4622      	mov	r2, r4
9000c0e6:	4628      	mov	r0, r5
9000c0e8:	f000 f857 	bl	9000c19a <__swbuf_r>
9000c0ec:	3001      	adds	r0, #1
9000c0ee:	d1e7      	bne.n	9000c0c0 <_puts_r+0x68>
9000c0f0:	e7ce      	b.n	9000c090 <_puts_r+0x38>
9000c0f2:	3e01      	subs	r6, #1
9000c0f4:	e7e4      	b.n	9000c0c0 <_puts_r+0x68>
9000c0f6:	6823      	ldr	r3, [r4, #0]
9000c0f8:	1c5a      	adds	r2, r3, #1
9000c0fa:	6022      	str	r2, [r4, #0]
9000c0fc:	220a      	movs	r2, #10
9000c0fe:	701a      	strb	r2, [r3, #0]
9000c100:	e7ee      	b.n	9000c0e0 <_puts_r+0x88>
	...

9000c104 <puts>:
9000c104:	4b02      	ldr	r3, [pc, #8]	@ (9000c110 <puts+0xc>)
9000c106:	4601      	mov	r1, r0
9000c108:	6818      	ldr	r0, [r3, #0]
9000c10a:	f7ff bfa5 	b.w	9000c058 <_puts_r>
9000c10e:	bf00      	nop
9000c110:	2000007c 	.word	0x2000007c

9000c114 <__sread>:
9000c114:	b510      	push	{r4, lr}
9000c116:	460c      	mov	r4, r1
9000c118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c11c:	f000 f8fc 	bl	9000c318 <_read_r>
9000c120:	2800      	cmp	r0, #0
9000c122:	bfab      	itete	ge
9000c124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c126:	89a3      	ldrhlt	r3, [r4, #12]
9000c128:	181b      	addge	r3, r3, r0
9000c12a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c12e:	bfac      	ite	ge
9000c130:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c132:	81a3      	strhlt	r3, [r4, #12]
9000c134:	bd10      	pop	{r4, pc}

9000c136 <__swrite>:
9000c136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c13a:	461f      	mov	r7, r3
9000c13c:	898b      	ldrh	r3, [r1, #12]
9000c13e:	05db      	lsls	r3, r3, #23
9000c140:	4605      	mov	r5, r0
9000c142:	460c      	mov	r4, r1
9000c144:	4616      	mov	r6, r2
9000c146:	d505      	bpl.n	9000c154 <__swrite+0x1e>
9000c148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c14c:	2302      	movs	r3, #2
9000c14e:	2200      	movs	r2, #0
9000c150:	f000 f8d0 	bl	9000c2f4 <_lseek_r>
9000c154:	89a3      	ldrh	r3, [r4, #12]
9000c156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c15a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c15e:	81a3      	strh	r3, [r4, #12]
9000c160:	4632      	mov	r2, r6
9000c162:	463b      	mov	r3, r7
9000c164:	4628      	mov	r0, r5
9000c166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c16a:	f000 b8f7 	b.w	9000c35c <_write_r>

9000c16e <__sseek>:
9000c16e:	b510      	push	{r4, lr}
9000c170:	460c      	mov	r4, r1
9000c172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c176:	f000 f8bd 	bl	9000c2f4 <_lseek_r>
9000c17a:	1c43      	adds	r3, r0, #1
9000c17c:	89a3      	ldrh	r3, [r4, #12]
9000c17e:	bf15      	itete	ne
9000c180:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c18a:	81a3      	strheq	r3, [r4, #12]
9000c18c:	bf18      	it	ne
9000c18e:	81a3      	strhne	r3, [r4, #12]
9000c190:	bd10      	pop	{r4, pc}

9000c192 <__sclose>:
9000c192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c196:	f000 b89d 	b.w	9000c2d4 <_close_r>

9000c19a <__swbuf_r>:
9000c19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c19c:	460e      	mov	r6, r1
9000c19e:	4614      	mov	r4, r2
9000c1a0:	4605      	mov	r5, r0
9000c1a2:	b118      	cbz	r0, 9000c1ac <__swbuf_r+0x12>
9000c1a4:	6a03      	ldr	r3, [r0, #32]
9000c1a6:	b90b      	cbnz	r3, 9000c1ac <__swbuf_r+0x12>
9000c1a8:	f7ff ff0e 	bl	9000bfc8 <__sinit>
9000c1ac:	69a3      	ldr	r3, [r4, #24]
9000c1ae:	60a3      	str	r3, [r4, #8]
9000c1b0:	89a3      	ldrh	r3, [r4, #12]
9000c1b2:	071a      	lsls	r2, r3, #28
9000c1b4:	d501      	bpl.n	9000c1ba <__swbuf_r+0x20>
9000c1b6:	6923      	ldr	r3, [r4, #16]
9000c1b8:	b943      	cbnz	r3, 9000c1cc <__swbuf_r+0x32>
9000c1ba:	4621      	mov	r1, r4
9000c1bc:	4628      	mov	r0, r5
9000c1be:	f000 f82b 	bl	9000c218 <__swsetup_r>
9000c1c2:	b118      	cbz	r0, 9000c1cc <__swbuf_r+0x32>
9000c1c4:	f04f 37ff 	mov.w	r7, #4294967295
9000c1c8:	4638      	mov	r0, r7
9000c1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c1cc:	6823      	ldr	r3, [r4, #0]
9000c1ce:	6922      	ldr	r2, [r4, #16]
9000c1d0:	1a98      	subs	r0, r3, r2
9000c1d2:	6963      	ldr	r3, [r4, #20]
9000c1d4:	b2f6      	uxtb	r6, r6
9000c1d6:	4283      	cmp	r3, r0
9000c1d8:	4637      	mov	r7, r6
9000c1da:	dc05      	bgt.n	9000c1e8 <__swbuf_r+0x4e>
9000c1dc:	4621      	mov	r1, r4
9000c1de:	4628      	mov	r0, r5
9000c1e0:	f000 fc98 	bl	9000cb14 <_fflush_r>
9000c1e4:	2800      	cmp	r0, #0
9000c1e6:	d1ed      	bne.n	9000c1c4 <__swbuf_r+0x2a>
9000c1e8:	68a3      	ldr	r3, [r4, #8]
9000c1ea:	3b01      	subs	r3, #1
9000c1ec:	60a3      	str	r3, [r4, #8]
9000c1ee:	6823      	ldr	r3, [r4, #0]
9000c1f0:	1c5a      	adds	r2, r3, #1
9000c1f2:	6022      	str	r2, [r4, #0]
9000c1f4:	701e      	strb	r6, [r3, #0]
9000c1f6:	6962      	ldr	r2, [r4, #20]
9000c1f8:	1c43      	adds	r3, r0, #1
9000c1fa:	429a      	cmp	r2, r3
9000c1fc:	d004      	beq.n	9000c208 <__swbuf_r+0x6e>
9000c1fe:	89a3      	ldrh	r3, [r4, #12]
9000c200:	07db      	lsls	r3, r3, #31
9000c202:	d5e1      	bpl.n	9000c1c8 <__swbuf_r+0x2e>
9000c204:	2e0a      	cmp	r6, #10
9000c206:	d1df      	bne.n	9000c1c8 <__swbuf_r+0x2e>
9000c208:	4621      	mov	r1, r4
9000c20a:	4628      	mov	r0, r5
9000c20c:	f000 fc82 	bl	9000cb14 <_fflush_r>
9000c210:	2800      	cmp	r0, #0
9000c212:	d0d9      	beq.n	9000c1c8 <__swbuf_r+0x2e>
9000c214:	e7d6      	b.n	9000c1c4 <__swbuf_r+0x2a>
	...

9000c218 <__swsetup_r>:
9000c218:	b538      	push	{r3, r4, r5, lr}
9000c21a:	4b29      	ldr	r3, [pc, #164]	@ (9000c2c0 <__swsetup_r+0xa8>)
9000c21c:	4605      	mov	r5, r0
9000c21e:	6818      	ldr	r0, [r3, #0]
9000c220:	460c      	mov	r4, r1
9000c222:	b118      	cbz	r0, 9000c22c <__swsetup_r+0x14>
9000c224:	6a03      	ldr	r3, [r0, #32]
9000c226:	b90b      	cbnz	r3, 9000c22c <__swsetup_r+0x14>
9000c228:	f7ff fece 	bl	9000bfc8 <__sinit>
9000c22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c230:	0719      	lsls	r1, r3, #28
9000c232:	d422      	bmi.n	9000c27a <__swsetup_r+0x62>
9000c234:	06da      	lsls	r2, r3, #27
9000c236:	d407      	bmi.n	9000c248 <__swsetup_r+0x30>
9000c238:	2209      	movs	r2, #9
9000c23a:	602a      	str	r2, [r5, #0]
9000c23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c240:	81a3      	strh	r3, [r4, #12]
9000c242:	f04f 30ff 	mov.w	r0, #4294967295
9000c246:	e033      	b.n	9000c2b0 <__swsetup_r+0x98>
9000c248:	0758      	lsls	r0, r3, #29
9000c24a:	d512      	bpl.n	9000c272 <__swsetup_r+0x5a>
9000c24c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c24e:	b141      	cbz	r1, 9000c262 <__swsetup_r+0x4a>
9000c250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c254:	4299      	cmp	r1, r3
9000c256:	d002      	beq.n	9000c25e <__swsetup_r+0x46>
9000c258:	4628      	mov	r0, r5
9000c25a:	f000 f8bf 	bl	9000c3dc <_free_r>
9000c25e:	2300      	movs	r3, #0
9000c260:	6363      	str	r3, [r4, #52]	@ 0x34
9000c262:	89a3      	ldrh	r3, [r4, #12]
9000c264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c268:	81a3      	strh	r3, [r4, #12]
9000c26a:	2300      	movs	r3, #0
9000c26c:	6063      	str	r3, [r4, #4]
9000c26e:	6923      	ldr	r3, [r4, #16]
9000c270:	6023      	str	r3, [r4, #0]
9000c272:	89a3      	ldrh	r3, [r4, #12]
9000c274:	f043 0308 	orr.w	r3, r3, #8
9000c278:	81a3      	strh	r3, [r4, #12]
9000c27a:	6923      	ldr	r3, [r4, #16]
9000c27c:	b94b      	cbnz	r3, 9000c292 <__swsetup_r+0x7a>
9000c27e:	89a3      	ldrh	r3, [r4, #12]
9000c280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c288:	d003      	beq.n	9000c292 <__swsetup_r+0x7a>
9000c28a:	4621      	mov	r1, r4
9000c28c:	4628      	mov	r0, r5
9000c28e:	f000 fc8f 	bl	9000cbb0 <__smakebuf_r>
9000c292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c296:	f013 0201 	ands.w	r2, r3, #1
9000c29a:	d00a      	beq.n	9000c2b2 <__swsetup_r+0x9a>
9000c29c:	2200      	movs	r2, #0
9000c29e:	60a2      	str	r2, [r4, #8]
9000c2a0:	6962      	ldr	r2, [r4, #20]
9000c2a2:	4252      	negs	r2, r2
9000c2a4:	61a2      	str	r2, [r4, #24]
9000c2a6:	6922      	ldr	r2, [r4, #16]
9000c2a8:	b942      	cbnz	r2, 9000c2bc <__swsetup_r+0xa4>
9000c2aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c2ae:	d1c5      	bne.n	9000c23c <__swsetup_r+0x24>
9000c2b0:	bd38      	pop	{r3, r4, r5, pc}
9000c2b2:	0799      	lsls	r1, r3, #30
9000c2b4:	bf58      	it	pl
9000c2b6:	6962      	ldrpl	r2, [r4, #20]
9000c2b8:	60a2      	str	r2, [r4, #8]
9000c2ba:	e7f4      	b.n	9000c2a6 <__swsetup_r+0x8e>
9000c2bc:	2000      	movs	r0, #0
9000c2be:	e7f7      	b.n	9000c2b0 <__swsetup_r+0x98>
9000c2c0:	2000007c 	.word	0x2000007c

9000c2c4 <memset>:
9000c2c4:	4402      	add	r2, r0
9000c2c6:	4603      	mov	r3, r0
9000c2c8:	4293      	cmp	r3, r2
9000c2ca:	d100      	bne.n	9000c2ce <memset+0xa>
9000c2cc:	4770      	bx	lr
9000c2ce:	f803 1b01 	strb.w	r1, [r3], #1
9000c2d2:	e7f9      	b.n	9000c2c8 <memset+0x4>

9000c2d4 <_close_r>:
9000c2d4:	b538      	push	{r3, r4, r5, lr}
9000c2d6:	4d06      	ldr	r5, [pc, #24]	@ (9000c2f0 <_close_r+0x1c>)
9000c2d8:	2300      	movs	r3, #0
9000c2da:	4604      	mov	r4, r0
9000c2dc:	4608      	mov	r0, r1
9000c2de:	602b      	str	r3, [r5, #0]
9000c2e0:	f7f4 fee1 	bl	900010a6 <_close>
9000c2e4:	1c43      	adds	r3, r0, #1
9000c2e6:	d102      	bne.n	9000c2ee <_close_r+0x1a>
9000c2e8:	682b      	ldr	r3, [r5, #0]
9000c2ea:	b103      	cbz	r3, 9000c2ee <_close_r+0x1a>
9000c2ec:	6023      	str	r3, [r4, #0]
9000c2ee:	bd38      	pop	{r3, r4, r5, pc}
9000c2f0:	20001490 	.word	0x20001490

9000c2f4 <_lseek_r>:
9000c2f4:	b538      	push	{r3, r4, r5, lr}
9000c2f6:	4d07      	ldr	r5, [pc, #28]	@ (9000c314 <_lseek_r+0x20>)
9000c2f8:	4604      	mov	r4, r0
9000c2fa:	4608      	mov	r0, r1
9000c2fc:	4611      	mov	r1, r2
9000c2fe:	2200      	movs	r2, #0
9000c300:	602a      	str	r2, [r5, #0]
9000c302:	461a      	mov	r2, r3
9000c304:	f7f4 fef6 	bl	900010f4 <_lseek>
9000c308:	1c43      	adds	r3, r0, #1
9000c30a:	d102      	bne.n	9000c312 <_lseek_r+0x1e>
9000c30c:	682b      	ldr	r3, [r5, #0]
9000c30e:	b103      	cbz	r3, 9000c312 <_lseek_r+0x1e>
9000c310:	6023      	str	r3, [r4, #0]
9000c312:	bd38      	pop	{r3, r4, r5, pc}
9000c314:	20001490 	.word	0x20001490

9000c318 <_read_r>:
9000c318:	b538      	push	{r3, r4, r5, lr}
9000c31a:	4d07      	ldr	r5, [pc, #28]	@ (9000c338 <_read_r+0x20>)
9000c31c:	4604      	mov	r4, r0
9000c31e:	4608      	mov	r0, r1
9000c320:	4611      	mov	r1, r2
9000c322:	2200      	movs	r2, #0
9000c324:	602a      	str	r2, [r5, #0]
9000c326:	461a      	mov	r2, r3
9000c328:	f7f4 fe84 	bl	90001034 <_read>
9000c32c:	1c43      	adds	r3, r0, #1
9000c32e:	d102      	bne.n	9000c336 <_read_r+0x1e>
9000c330:	682b      	ldr	r3, [r5, #0]
9000c332:	b103      	cbz	r3, 9000c336 <_read_r+0x1e>
9000c334:	6023      	str	r3, [r4, #0]
9000c336:	bd38      	pop	{r3, r4, r5, pc}
9000c338:	20001490 	.word	0x20001490

9000c33c <_sbrk_r>:
9000c33c:	b538      	push	{r3, r4, r5, lr}
9000c33e:	4d06      	ldr	r5, [pc, #24]	@ (9000c358 <_sbrk_r+0x1c>)
9000c340:	2300      	movs	r3, #0
9000c342:	4604      	mov	r4, r0
9000c344:	4608      	mov	r0, r1
9000c346:	602b      	str	r3, [r5, #0]
9000c348:	f7f4 fee2 	bl	90001110 <_sbrk>
9000c34c:	1c43      	adds	r3, r0, #1
9000c34e:	d102      	bne.n	9000c356 <_sbrk_r+0x1a>
9000c350:	682b      	ldr	r3, [r5, #0]
9000c352:	b103      	cbz	r3, 9000c356 <_sbrk_r+0x1a>
9000c354:	6023      	str	r3, [r4, #0]
9000c356:	bd38      	pop	{r3, r4, r5, pc}
9000c358:	20001490 	.word	0x20001490

9000c35c <_write_r>:
9000c35c:	b538      	push	{r3, r4, r5, lr}
9000c35e:	4d07      	ldr	r5, [pc, #28]	@ (9000c37c <_write_r+0x20>)
9000c360:	4604      	mov	r4, r0
9000c362:	4608      	mov	r0, r1
9000c364:	4611      	mov	r1, r2
9000c366:	2200      	movs	r2, #0
9000c368:	602a      	str	r2, [r5, #0]
9000c36a:	461a      	mov	r2, r3
9000c36c:	f7f4 fe7f 	bl	9000106e <_write>
9000c370:	1c43      	adds	r3, r0, #1
9000c372:	d102      	bne.n	9000c37a <_write_r+0x1e>
9000c374:	682b      	ldr	r3, [r5, #0]
9000c376:	b103      	cbz	r3, 9000c37a <_write_r+0x1e>
9000c378:	6023      	str	r3, [r4, #0]
9000c37a:	bd38      	pop	{r3, r4, r5, pc}
9000c37c:	20001490 	.word	0x20001490

9000c380 <__errno>:
9000c380:	4b01      	ldr	r3, [pc, #4]	@ (9000c388 <__errno+0x8>)
9000c382:	6818      	ldr	r0, [r3, #0]
9000c384:	4770      	bx	lr
9000c386:	bf00      	nop
9000c388:	2000007c 	.word	0x2000007c

9000c38c <__libc_init_array>:
9000c38c:	b570      	push	{r4, r5, r6, lr}
9000c38e:	4d0d      	ldr	r5, [pc, #52]	@ (9000c3c4 <__libc_init_array+0x38>)
9000c390:	4c0d      	ldr	r4, [pc, #52]	@ (9000c3c8 <__libc_init_array+0x3c>)
9000c392:	1b64      	subs	r4, r4, r5
9000c394:	10a4      	asrs	r4, r4, #2
9000c396:	2600      	movs	r6, #0
9000c398:	42a6      	cmp	r6, r4
9000c39a:	d109      	bne.n	9000c3b0 <__libc_init_array+0x24>
9000c39c:	4d0b      	ldr	r5, [pc, #44]	@ (9000c3cc <__libc_init_array+0x40>)
9000c39e:	4c0c      	ldr	r4, [pc, #48]	@ (9000c3d0 <__libc_init_array+0x44>)
9000c3a0:	f000 fc64 	bl	9000cc6c <_init>
9000c3a4:	1b64      	subs	r4, r4, r5
9000c3a6:	10a4      	asrs	r4, r4, #2
9000c3a8:	2600      	movs	r6, #0
9000c3aa:	42a6      	cmp	r6, r4
9000c3ac:	d105      	bne.n	9000c3ba <__libc_init_array+0x2e>
9000c3ae:	bd70      	pop	{r4, r5, r6, pc}
9000c3b0:	f855 3b04 	ldr.w	r3, [r5], #4
9000c3b4:	4798      	blx	r3
9000c3b6:	3601      	adds	r6, #1
9000c3b8:	e7ee      	b.n	9000c398 <__libc_init_array+0xc>
9000c3ba:	f855 3b04 	ldr.w	r3, [r5], #4
9000c3be:	4798      	blx	r3
9000c3c0:	3601      	adds	r6, #1
9000c3c2:	e7f2      	b.n	9000c3aa <__libc_init_array+0x1e>
9000c3c4:	9000f1c0 	.word	0x9000f1c0
9000c3c8:	9000f1c0 	.word	0x9000f1c0
9000c3cc:	9000f1c0 	.word	0x9000f1c0
9000c3d0:	9000f1c4 	.word	0x9000f1c4

9000c3d4 <__retarget_lock_init_recursive>:
9000c3d4:	4770      	bx	lr

9000c3d6 <__retarget_lock_acquire_recursive>:
9000c3d6:	4770      	bx	lr

9000c3d8 <__retarget_lock_release_recursive>:
9000c3d8:	4770      	bx	lr
	...

9000c3dc <_free_r>:
9000c3dc:	b538      	push	{r3, r4, r5, lr}
9000c3de:	4605      	mov	r5, r0
9000c3e0:	2900      	cmp	r1, #0
9000c3e2:	d041      	beq.n	9000c468 <_free_r+0x8c>
9000c3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c3e8:	1f0c      	subs	r4, r1, #4
9000c3ea:	2b00      	cmp	r3, #0
9000c3ec:	bfb8      	it	lt
9000c3ee:	18e4      	addlt	r4, r4, r3
9000c3f0:	f7ff fd52 	bl	9000be98 <__malloc_lock>
9000c3f4:	4a1d      	ldr	r2, [pc, #116]	@ (9000c46c <_free_r+0x90>)
9000c3f6:	6813      	ldr	r3, [r2, #0]
9000c3f8:	b933      	cbnz	r3, 9000c408 <_free_r+0x2c>
9000c3fa:	6063      	str	r3, [r4, #4]
9000c3fc:	6014      	str	r4, [r2, #0]
9000c3fe:	4628      	mov	r0, r5
9000c400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000c404:	f7ff bd4e 	b.w	9000bea4 <__malloc_unlock>
9000c408:	42a3      	cmp	r3, r4
9000c40a:	d908      	bls.n	9000c41e <_free_r+0x42>
9000c40c:	6820      	ldr	r0, [r4, #0]
9000c40e:	1821      	adds	r1, r4, r0
9000c410:	428b      	cmp	r3, r1
9000c412:	bf01      	itttt	eq
9000c414:	6819      	ldreq	r1, [r3, #0]
9000c416:	685b      	ldreq	r3, [r3, #4]
9000c418:	1809      	addeq	r1, r1, r0
9000c41a:	6021      	streq	r1, [r4, #0]
9000c41c:	e7ed      	b.n	9000c3fa <_free_r+0x1e>
9000c41e:	461a      	mov	r2, r3
9000c420:	685b      	ldr	r3, [r3, #4]
9000c422:	b10b      	cbz	r3, 9000c428 <_free_r+0x4c>
9000c424:	42a3      	cmp	r3, r4
9000c426:	d9fa      	bls.n	9000c41e <_free_r+0x42>
9000c428:	6811      	ldr	r1, [r2, #0]
9000c42a:	1850      	adds	r0, r2, r1
9000c42c:	42a0      	cmp	r0, r4
9000c42e:	d10b      	bne.n	9000c448 <_free_r+0x6c>
9000c430:	6820      	ldr	r0, [r4, #0]
9000c432:	4401      	add	r1, r0
9000c434:	1850      	adds	r0, r2, r1
9000c436:	4283      	cmp	r3, r0
9000c438:	6011      	str	r1, [r2, #0]
9000c43a:	d1e0      	bne.n	9000c3fe <_free_r+0x22>
9000c43c:	6818      	ldr	r0, [r3, #0]
9000c43e:	685b      	ldr	r3, [r3, #4]
9000c440:	6053      	str	r3, [r2, #4]
9000c442:	4408      	add	r0, r1
9000c444:	6010      	str	r0, [r2, #0]
9000c446:	e7da      	b.n	9000c3fe <_free_r+0x22>
9000c448:	d902      	bls.n	9000c450 <_free_r+0x74>
9000c44a:	230c      	movs	r3, #12
9000c44c:	602b      	str	r3, [r5, #0]
9000c44e:	e7d6      	b.n	9000c3fe <_free_r+0x22>
9000c450:	6820      	ldr	r0, [r4, #0]
9000c452:	1821      	adds	r1, r4, r0
9000c454:	428b      	cmp	r3, r1
9000c456:	bf04      	itt	eq
9000c458:	6819      	ldreq	r1, [r3, #0]
9000c45a:	685b      	ldreq	r3, [r3, #4]
9000c45c:	6063      	str	r3, [r4, #4]
9000c45e:	bf04      	itt	eq
9000c460:	1809      	addeq	r1, r1, r0
9000c462:	6021      	streq	r1, [r4, #0]
9000c464:	6054      	str	r4, [r2, #4]
9000c466:	e7ca      	b.n	9000c3fe <_free_r+0x22>
9000c468:	bd38      	pop	{r3, r4, r5, pc}
9000c46a:	bf00      	nop
9000c46c:	20001350 	.word	0x20001350

9000c470 <__sfputc_r>:
9000c470:	6893      	ldr	r3, [r2, #8]
9000c472:	3b01      	subs	r3, #1
9000c474:	2b00      	cmp	r3, #0
9000c476:	b410      	push	{r4}
9000c478:	6093      	str	r3, [r2, #8]
9000c47a:	da08      	bge.n	9000c48e <__sfputc_r+0x1e>
9000c47c:	6994      	ldr	r4, [r2, #24]
9000c47e:	42a3      	cmp	r3, r4
9000c480:	db01      	blt.n	9000c486 <__sfputc_r+0x16>
9000c482:	290a      	cmp	r1, #10
9000c484:	d103      	bne.n	9000c48e <__sfputc_r+0x1e>
9000c486:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c48a:	f7ff be86 	b.w	9000c19a <__swbuf_r>
9000c48e:	6813      	ldr	r3, [r2, #0]
9000c490:	1c58      	adds	r0, r3, #1
9000c492:	6010      	str	r0, [r2, #0]
9000c494:	7019      	strb	r1, [r3, #0]
9000c496:	4608      	mov	r0, r1
9000c498:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c49c:	4770      	bx	lr

9000c49e <__sfputs_r>:
9000c49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c4a0:	4606      	mov	r6, r0
9000c4a2:	460f      	mov	r7, r1
9000c4a4:	4614      	mov	r4, r2
9000c4a6:	18d5      	adds	r5, r2, r3
9000c4a8:	42ac      	cmp	r4, r5
9000c4aa:	d101      	bne.n	9000c4b0 <__sfputs_r+0x12>
9000c4ac:	2000      	movs	r0, #0
9000c4ae:	e007      	b.n	9000c4c0 <__sfputs_r+0x22>
9000c4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c4b4:	463a      	mov	r2, r7
9000c4b6:	4630      	mov	r0, r6
9000c4b8:	f7ff ffda 	bl	9000c470 <__sfputc_r>
9000c4bc:	1c43      	adds	r3, r0, #1
9000c4be:	d1f3      	bne.n	9000c4a8 <__sfputs_r+0xa>
9000c4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000c4c4 <_vfiprintf_r>:
9000c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c4c8:	460d      	mov	r5, r1
9000c4ca:	b09d      	sub	sp, #116	@ 0x74
9000c4cc:	4614      	mov	r4, r2
9000c4ce:	4698      	mov	r8, r3
9000c4d0:	4606      	mov	r6, r0
9000c4d2:	b118      	cbz	r0, 9000c4dc <_vfiprintf_r+0x18>
9000c4d4:	6a03      	ldr	r3, [r0, #32]
9000c4d6:	b90b      	cbnz	r3, 9000c4dc <_vfiprintf_r+0x18>
9000c4d8:	f7ff fd76 	bl	9000bfc8 <__sinit>
9000c4dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c4de:	07d9      	lsls	r1, r3, #31
9000c4e0:	d405      	bmi.n	9000c4ee <_vfiprintf_r+0x2a>
9000c4e2:	89ab      	ldrh	r3, [r5, #12]
9000c4e4:	059a      	lsls	r2, r3, #22
9000c4e6:	d402      	bmi.n	9000c4ee <_vfiprintf_r+0x2a>
9000c4e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c4ea:	f7ff ff74 	bl	9000c3d6 <__retarget_lock_acquire_recursive>
9000c4ee:	89ab      	ldrh	r3, [r5, #12]
9000c4f0:	071b      	lsls	r3, r3, #28
9000c4f2:	d501      	bpl.n	9000c4f8 <_vfiprintf_r+0x34>
9000c4f4:	692b      	ldr	r3, [r5, #16]
9000c4f6:	b99b      	cbnz	r3, 9000c520 <_vfiprintf_r+0x5c>
9000c4f8:	4629      	mov	r1, r5
9000c4fa:	4630      	mov	r0, r6
9000c4fc:	f7ff fe8c 	bl	9000c218 <__swsetup_r>
9000c500:	b170      	cbz	r0, 9000c520 <_vfiprintf_r+0x5c>
9000c502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c504:	07dc      	lsls	r4, r3, #31
9000c506:	d504      	bpl.n	9000c512 <_vfiprintf_r+0x4e>
9000c508:	f04f 30ff 	mov.w	r0, #4294967295
9000c50c:	b01d      	add	sp, #116	@ 0x74
9000c50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000c512:	89ab      	ldrh	r3, [r5, #12]
9000c514:	0598      	lsls	r0, r3, #22
9000c516:	d4f7      	bmi.n	9000c508 <_vfiprintf_r+0x44>
9000c518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c51a:	f7ff ff5d 	bl	9000c3d8 <__retarget_lock_release_recursive>
9000c51e:	e7f3      	b.n	9000c508 <_vfiprintf_r+0x44>
9000c520:	2300      	movs	r3, #0
9000c522:	9309      	str	r3, [sp, #36]	@ 0x24
9000c524:	2320      	movs	r3, #32
9000c526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000c52a:	f8cd 800c 	str.w	r8, [sp, #12]
9000c52e:	2330      	movs	r3, #48	@ 0x30
9000c530:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000c6e0 <_vfiprintf_r+0x21c>
9000c534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000c538:	f04f 0901 	mov.w	r9, #1
9000c53c:	4623      	mov	r3, r4
9000c53e:	469a      	mov	sl, r3
9000c540:	f813 2b01 	ldrb.w	r2, [r3], #1
9000c544:	b10a      	cbz	r2, 9000c54a <_vfiprintf_r+0x86>
9000c546:	2a25      	cmp	r2, #37	@ 0x25
9000c548:	d1f9      	bne.n	9000c53e <_vfiprintf_r+0x7a>
9000c54a:	ebba 0b04 	subs.w	fp, sl, r4
9000c54e:	d00b      	beq.n	9000c568 <_vfiprintf_r+0xa4>
9000c550:	465b      	mov	r3, fp
9000c552:	4622      	mov	r2, r4
9000c554:	4629      	mov	r1, r5
9000c556:	4630      	mov	r0, r6
9000c558:	f7ff ffa1 	bl	9000c49e <__sfputs_r>
9000c55c:	3001      	adds	r0, #1
9000c55e:	f000 80a7 	beq.w	9000c6b0 <_vfiprintf_r+0x1ec>
9000c562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000c564:	445a      	add	r2, fp
9000c566:	9209      	str	r2, [sp, #36]	@ 0x24
9000c568:	f89a 3000 	ldrb.w	r3, [sl]
9000c56c:	2b00      	cmp	r3, #0
9000c56e:	f000 809f 	beq.w	9000c6b0 <_vfiprintf_r+0x1ec>
9000c572:	2300      	movs	r3, #0
9000c574:	f04f 32ff 	mov.w	r2, #4294967295
9000c578:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000c57c:	f10a 0a01 	add.w	sl, sl, #1
9000c580:	9304      	str	r3, [sp, #16]
9000c582:	9307      	str	r3, [sp, #28]
9000c584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000c588:	931a      	str	r3, [sp, #104]	@ 0x68
9000c58a:	4654      	mov	r4, sl
9000c58c:	2205      	movs	r2, #5
9000c58e:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c592:	4853      	ldr	r0, [pc, #332]	@ (9000c6e0 <_vfiprintf_r+0x21c>)
9000c594:	f7f3 fea4 	bl	900002e0 <memchr>
9000c598:	9a04      	ldr	r2, [sp, #16]
9000c59a:	b9d8      	cbnz	r0, 9000c5d4 <_vfiprintf_r+0x110>
9000c59c:	06d1      	lsls	r1, r2, #27
9000c59e:	bf44      	itt	mi
9000c5a0:	2320      	movmi	r3, #32
9000c5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000c5a6:	0713      	lsls	r3, r2, #28
9000c5a8:	bf44      	itt	mi
9000c5aa:	232b      	movmi	r3, #43	@ 0x2b
9000c5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000c5b0:	f89a 3000 	ldrb.w	r3, [sl]
9000c5b4:	2b2a      	cmp	r3, #42	@ 0x2a
9000c5b6:	d015      	beq.n	9000c5e4 <_vfiprintf_r+0x120>
9000c5b8:	9a07      	ldr	r2, [sp, #28]
9000c5ba:	4654      	mov	r4, sl
9000c5bc:	2000      	movs	r0, #0
9000c5be:	f04f 0c0a 	mov.w	ip, #10
9000c5c2:	4621      	mov	r1, r4
9000c5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
9000c5c8:	3b30      	subs	r3, #48	@ 0x30
9000c5ca:	2b09      	cmp	r3, #9
9000c5cc:	d94b      	bls.n	9000c666 <_vfiprintf_r+0x1a2>
9000c5ce:	b1b0      	cbz	r0, 9000c5fe <_vfiprintf_r+0x13a>
9000c5d0:	9207      	str	r2, [sp, #28]
9000c5d2:	e014      	b.n	9000c5fe <_vfiprintf_r+0x13a>
9000c5d4:	eba0 0308 	sub.w	r3, r0, r8
9000c5d8:	fa09 f303 	lsl.w	r3, r9, r3
9000c5dc:	4313      	orrs	r3, r2
9000c5de:	9304      	str	r3, [sp, #16]
9000c5e0:	46a2      	mov	sl, r4
9000c5e2:	e7d2      	b.n	9000c58a <_vfiprintf_r+0xc6>
9000c5e4:	9b03      	ldr	r3, [sp, #12]
9000c5e6:	1d19      	adds	r1, r3, #4
9000c5e8:	681b      	ldr	r3, [r3, #0]
9000c5ea:	9103      	str	r1, [sp, #12]
9000c5ec:	2b00      	cmp	r3, #0
9000c5ee:	bfbb      	ittet	lt
9000c5f0:	425b      	neglt	r3, r3
9000c5f2:	f042 0202 	orrlt.w	r2, r2, #2
9000c5f6:	9307      	strge	r3, [sp, #28]
9000c5f8:	9307      	strlt	r3, [sp, #28]
9000c5fa:	bfb8      	it	lt
9000c5fc:	9204      	strlt	r2, [sp, #16]
9000c5fe:	7823      	ldrb	r3, [r4, #0]
9000c600:	2b2e      	cmp	r3, #46	@ 0x2e
9000c602:	d10a      	bne.n	9000c61a <_vfiprintf_r+0x156>
9000c604:	7863      	ldrb	r3, [r4, #1]
9000c606:	2b2a      	cmp	r3, #42	@ 0x2a
9000c608:	d132      	bne.n	9000c670 <_vfiprintf_r+0x1ac>
9000c60a:	9b03      	ldr	r3, [sp, #12]
9000c60c:	1d1a      	adds	r2, r3, #4
9000c60e:	681b      	ldr	r3, [r3, #0]
9000c610:	9203      	str	r2, [sp, #12]
9000c612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000c616:	3402      	adds	r4, #2
9000c618:	9305      	str	r3, [sp, #20]
9000c61a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000c6f0 <_vfiprintf_r+0x22c>
9000c61e:	7821      	ldrb	r1, [r4, #0]
9000c620:	2203      	movs	r2, #3
9000c622:	4650      	mov	r0, sl
9000c624:	f7f3 fe5c 	bl	900002e0 <memchr>
9000c628:	b138      	cbz	r0, 9000c63a <_vfiprintf_r+0x176>
9000c62a:	9b04      	ldr	r3, [sp, #16]
9000c62c:	eba0 000a 	sub.w	r0, r0, sl
9000c630:	2240      	movs	r2, #64	@ 0x40
9000c632:	4082      	lsls	r2, r0
9000c634:	4313      	orrs	r3, r2
9000c636:	3401      	adds	r4, #1
9000c638:	9304      	str	r3, [sp, #16]
9000c63a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c63e:	4829      	ldr	r0, [pc, #164]	@ (9000c6e4 <_vfiprintf_r+0x220>)
9000c640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000c644:	2206      	movs	r2, #6
9000c646:	f7f3 fe4b 	bl	900002e0 <memchr>
9000c64a:	2800      	cmp	r0, #0
9000c64c:	d03f      	beq.n	9000c6ce <_vfiprintf_r+0x20a>
9000c64e:	4b26      	ldr	r3, [pc, #152]	@ (9000c6e8 <_vfiprintf_r+0x224>)
9000c650:	bb1b      	cbnz	r3, 9000c69a <_vfiprintf_r+0x1d6>
9000c652:	9b03      	ldr	r3, [sp, #12]
9000c654:	3307      	adds	r3, #7
9000c656:	f023 0307 	bic.w	r3, r3, #7
9000c65a:	3308      	adds	r3, #8
9000c65c:	9303      	str	r3, [sp, #12]
9000c65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000c660:	443b      	add	r3, r7
9000c662:	9309      	str	r3, [sp, #36]	@ 0x24
9000c664:	e76a      	b.n	9000c53c <_vfiprintf_r+0x78>
9000c666:	fb0c 3202 	mla	r2, ip, r2, r3
9000c66a:	460c      	mov	r4, r1
9000c66c:	2001      	movs	r0, #1
9000c66e:	e7a8      	b.n	9000c5c2 <_vfiprintf_r+0xfe>
9000c670:	2300      	movs	r3, #0
9000c672:	3401      	adds	r4, #1
9000c674:	9305      	str	r3, [sp, #20]
9000c676:	4619      	mov	r1, r3
9000c678:	f04f 0c0a 	mov.w	ip, #10
9000c67c:	4620      	mov	r0, r4
9000c67e:	f810 2b01 	ldrb.w	r2, [r0], #1
9000c682:	3a30      	subs	r2, #48	@ 0x30
9000c684:	2a09      	cmp	r2, #9
9000c686:	d903      	bls.n	9000c690 <_vfiprintf_r+0x1cc>
9000c688:	2b00      	cmp	r3, #0
9000c68a:	d0c6      	beq.n	9000c61a <_vfiprintf_r+0x156>
9000c68c:	9105      	str	r1, [sp, #20]
9000c68e:	e7c4      	b.n	9000c61a <_vfiprintf_r+0x156>
9000c690:	fb0c 2101 	mla	r1, ip, r1, r2
9000c694:	4604      	mov	r4, r0
9000c696:	2301      	movs	r3, #1
9000c698:	e7f0      	b.n	9000c67c <_vfiprintf_r+0x1b8>
9000c69a:	ab03      	add	r3, sp, #12
9000c69c:	9300      	str	r3, [sp, #0]
9000c69e:	462a      	mov	r2, r5
9000c6a0:	4b12      	ldr	r3, [pc, #72]	@ (9000c6ec <_vfiprintf_r+0x228>)
9000c6a2:	a904      	add	r1, sp, #16
9000c6a4:	4630      	mov	r0, r6
9000c6a6:	f3af 8000 	nop.w
9000c6aa:	4607      	mov	r7, r0
9000c6ac:	1c78      	adds	r0, r7, #1
9000c6ae:	d1d6      	bne.n	9000c65e <_vfiprintf_r+0x19a>
9000c6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000c6b2:	07d9      	lsls	r1, r3, #31
9000c6b4:	d405      	bmi.n	9000c6c2 <_vfiprintf_r+0x1fe>
9000c6b6:	89ab      	ldrh	r3, [r5, #12]
9000c6b8:	059a      	lsls	r2, r3, #22
9000c6ba:	d402      	bmi.n	9000c6c2 <_vfiprintf_r+0x1fe>
9000c6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000c6be:	f7ff fe8b 	bl	9000c3d8 <__retarget_lock_release_recursive>
9000c6c2:	89ab      	ldrh	r3, [r5, #12]
9000c6c4:	065b      	lsls	r3, r3, #25
9000c6c6:	f53f af1f 	bmi.w	9000c508 <_vfiprintf_r+0x44>
9000c6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000c6cc:	e71e      	b.n	9000c50c <_vfiprintf_r+0x48>
9000c6ce:	ab03      	add	r3, sp, #12
9000c6d0:	9300      	str	r3, [sp, #0]
9000c6d2:	462a      	mov	r2, r5
9000c6d4:	4b05      	ldr	r3, [pc, #20]	@ (9000c6ec <_vfiprintf_r+0x228>)
9000c6d6:	a904      	add	r1, sp, #16
9000c6d8:	4630      	mov	r0, r6
9000c6da:	f000 f879 	bl	9000c7d0 <_printf_i>
9000c6de:	e7e4      	b.n	9000c6aa <_vfiprintf_r+0x1e6>
9000c6e0:	9000f184 	.word	0x9000f184
9000c6e4:	9000f18e 	.word	0x9000f18e
9000c6e8:	00000000 	.word	0x00000000
9000c6ec:	9000c49f 	.word	0x9000c49f
9000c6f0:	9000f18a 	.word	0x9000f18a

9000c6f4 <_printf_common>:
9000c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c6f8:	4616      	mov	r6, r2
9000c6fa:	4698      	mov	r8, r3
9000c6fc:	688a      	ldr	r2, [r1, #8]
9000c6fe:	690b      	ldr	r3, [r1, #16]
9000c700:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000c704:	4293      	cmp	r3, r2
9000c706:	bfb8      	it	lt
9000c708:	4613      	movlt	r3, r2
9000c70a:	6033      	str	r3, [r6, #0]
9000c70c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000c710:	4607      	mov	r7, r0
9000c712:	460c      	mov	r4, r1
9000c714:	b10a      	cbz	r2, 9000c71a <_printf_common+0x26>
9000c716:	3301      	adds	r3, #1
9000c718:	6033      	str	r3, [r6, #0]
9000c71a:	6823      	ldr	r3, [r4, #0]
9000c71c:	0699      	lsls	r1, r3, #26
9000c71e:	bf42      	ittt	mi
9000c720:	6833      	ldrmi	r3, [r6, #0]
9000c722:	3302      	addmi	r3, #2
9000c724:	6033      	strmi	r3, [r6, #0]
9000c726:	6825      	ldr	r5, [r4, #0]
9000c728:	f015 0506 	ands.w	r5, r5, #6
9000c72c:	d106      	bne.n	9000c73c <_printf_common+0x48>
9000c72e:	f104 0a19 	add.w	sl, r4, #25
9000c732:	68e3      	ldr	r3, [r4, #12]
9000c734:	6832      	ldr	r2, [r6, #0]
9000c736:	1a9b      	subs	r3, r3, r2
9000c738:	42ab      	cmp	r3, r5
9000c73a:	dc26      	bgt.n	9000c78a <_printf_common+0x96>
9000c73c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000c740:	6822      	ldr	r2, [r4, #0]
9000c742:	3b00      	subs	r3, #0
9000c744:	bf18      	it	ne
9000c746:	2301      	movne	r3, #1
9000c748:	0692      	lsls	r2, r2, #26
9000c74a:	d42b      	bmi.n	9000c7a4 <_printf_common+0xb0>
9000c74c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000c750:	4641      	mov	r1, r8
9000c752:	4638      	mov	r0, r7
9000c754:	47c8      	blx	r9
9000c756:	3001      	adds	r0, #1
9000c758:	d01e      	beq.n	9000c798 <_printf_common+0xa4>
9000c75a:	6823      	ldr	r3, [r4, #0]
9000c75c:	6922      	ldr	r2, [r4, #16]
9000c75e:	f003 0306 	and.w	r3, r3, #6
9000c762:	2b04      	cmp	r3, #4
9000c764:	bf02      	ittt	eq
9000c766:	68e5      	ldreq	r5, [r4, #12]
9000c768:	6833      	ldreq	r3, [r6, #0]
9000c76a:	1aed      	subeq	r5, r5, r3
9000c76c:	68a3      	ldr	r3, [r4, #8]
9000c76e:	bf0c      	ite	eq
9000c770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000c774:	2500      	movne	r5, #0
9000c776:	4293      	cmp	r3, r2
9000c778:	bfc4      	itt	gt
9000c77a:	1a9b      	subgt	r3, r3, r2
9000c77c:	18ed      	addgt	r5, r5, r3
9000c77e:	2600      	movs	r6, #0
9000c780:	341a      	adds	r4, #26
9000c782:	42b5      	cmp	r5, r6
9000c784:	d11a      	bne.n	9000c7bc <_printf_common+0xc8>
9000c786:	2000      	movs	r0, #0
9000c788:	e008      	b.n	9000c79c <_printf_common+0xa8>
9000c78a:	2301      	movs	r3, #1
9000c78c:	4652      	mov	r2, sl
9000c78e:	4641      	mov	r1, r8
9000c790:	4638      	mov	r0, r7
9000c792:	47c8      	blx	r9
9000c794:	3001      	adds	r0, #1
9000c796:	d103      	bne.n	9000c7a0 <_printf_common+0xac>
9000c798:	f04f 30ff 	mov.w	r0, #4294967295
9000c79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c7a0:	3501      	adds	r5, #1
9000c7a2:	e7c6      	b.n	9000c732 <_printf_common+0x3e>
9000c7a4:	18e1      	adds	r1, r4, r3
9000c7a6:	1c5a      	adds	r2, r3, #1
9000c7a8:	2030      	movs	r0, #48	@ 0x30
9000c7aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000c7ae:	4422      	add	r2, r4
9000c7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000c7b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000c7b8:	3302      	adds	r3, #2
9000c7ba:	e7c7      	b.n	9000c74c <_printf_common+0x58>
9000c7bc:	2301      	movs	r3, #1
9000c7be:	4622      	mov	r2, r4
9000c7c0:	4641      	mov	r1, r8
9000c7c2:	4638      	mov	r0, r7
9000c7c4:	47c8      	blx	r9
9000c7c6:	3001      	adds	r0, #1
9000c7c8:	d0e6      	beq.n	9000c798 <_printf_common+0xa4>
9000c7ca:	3601      	adds	r6, #1
9000c7cc:	e7d9      	b.n	9000c782 <_printf_common+0x8e>
	...

9000c7d0 <_printf_i>:
9000c7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000c7d4:	7e0f      	ldrb	r7, [r1, #24]
9000c7d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000c7d8:	2f78      	cmp	r7, #120	@ 0x78
9000c7da:	4691      	mov	r9, r2
9000c7dc:	4680      	mov	r8, r0
9000c7de:	460c      	mov	r4, r1
9000c7e0:	469a      	mov	sl, r3
9000c7e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000c7e6:	d807      	bhi.n	9000c7f8 <_printf_i+0x28>
9000c7e8:	2f62      	cmp	r7, #98	@ 0x62
9000c7ea:	d80a      	bhi.n	9000c802 <_printf_i+0x32>
9000c7ec:	2f00      	cmp	r7, #0
9000c7ee:	f000 80d1 	beq.w	9000c994 <_printf_i+0x1c4>
9000c7f2:	2f58      	cmp	r7, #88	@ 0x58
9000c7f4:	f000 80b8 	beq.w	9000c968 <_printf_i+0x198>
9000c7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000c7fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000c800:	e03a      	b.n	9000c878 <_printf_i+0xa8>
9000c802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000c806:	2b15      	cmp	r3, #21
9000c808:	d8f6      	bhi.n	9000c7f8 <_printf_i+0x28>
9000c80a:	a101      	add	r1, pc, #4	@ (adr r1, 9000c810 <_printf_i+0x40>)
9000c80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000c810:	9000c869 	.word	0x9000c869
9000c814:	9000c87d 	.word	0x9000c87d
9000c818:	9000c7f9 	.word	0x9000c7f9
9000c81c:	9000c7f9 	.word	0x9000c7f9
9000c820:	9000c7f9 	.word	0x9000c7f9
9000c824:	9000c7f9 	.word	0x9000c7f9
9000c828:	9000c87d 	.word	0x9000c87d
9000c82c:	9000c7f9 	.word	0x9000c7f9
9000c830:	9000c7f9 	.word	0x9000c7f9
9000c834:	9000c7f9 	.word	0x9000c7f9
9000c838:	9000c7f9 	.word	0x9000c7f9
9000c83c:	9000c97b 	.word	0x9000c97b
9000c840:	9000c8a7 	.word	0x9000c8a7
9000c844:	9000c935 	.word	0x9000c935
9000c848:	9000c7f9 	.word	0x9000c7f9
9000c84c:	9000c7f9 	.word	0x9000c7f9
9000c850:	9000c99d 	.word	0x9000c99d
9000c854:	9000c7f9 	.word	0x9000c7f9
9000c858:	9000c8a7 	.word	0x9000c8a7
9000c85c:	9000c7f9 	.word	0x9000c7f9
9000c860:	9000c7f9 	.word	0x9000c7f9
9000c864:	9000c93d 	.word	0x9000c93d
9000c868:	6833      	ldr	r3, [r6, #0]
9000c86a:	1d1a      	adds	r2, r3, #4
9000c86c:	681b      	ldr	r3, [r3, #0]
9000c86e:	6032      	str	r2, [r6, #0]
9000c870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000c874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000c878:	2301      	movs	r3, #1
9000c87a:	e09c      	b.n	9000c9b6 <_printf_i+0x1e6>
9000c87c:	6833      	ldr	r3, [r6, #0]
9000c87e:	6820      	ldr	r0, [r4, #0]
9000c880:	1d19      	adds	r1, r3, #4
9000c882:	6031      	str	r1, [r6, #0]
9000c884:	0606      	lsls	r6, r0, #24
9000c886:	d501      	bpl.n	9000c88c <_printf_i+0xbc>
9000c888:	681d      	ldr	r5, [r3, #0]
9000c88a:	e003      	b.n	9000c894 <_printf_i+0xc4>
9000c88c:	0645      	lsls	r5, r0, #25
9000c88e:	d5fb      	bpl.n	9000c888 <_printf_i+0xb8>
9000c890:	f9b3 5000 	ldrsh.w	r5, [r3]
9000c894:	2d00      	cmp	r5, #0
9000c896:	da03      	bge.n	9000c8a0 <_printf_i+0xd0>
9000c898:	232d      	movs	r3, #45	@ 0x2d
9000c89a:	426d      	negs	r5, r5
9000c89c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000c8a0:	4858      	ldr	r0, [pc, #352]	@ (9000ca04 <_printf_i+0x234>)
9000c8a2:	230a      	movs	r3, #10
9000c8a4:	e011      	b.n	9000c8ca <_printf_i+0xfa>
9000c8a6:	6821      	ldr	r1, [r4, #0]
9000c8a8:	6833      	ldr	r3, [r6, #0]
9000c8aa:	0608      	lsls	r0, r1, #24
9000c8ac:	f853 5b04 	ldr.w	r5, [r3], #4
9000c8b0:	d402      	bmi.n	9000c8b8 <_printf_i+0xe8>
9000c8b2:	0649      	lsls	r1, r1, #25
9000c8b4:	bf48      	it	mi
9000c8b6:	b2ad      	uxthmi	r5, r5
9000c8b8:	2f6f      	cmp	r7, #111	@ 0x6f
9000c8ba:	4852      	ldr	r0, [pc, #328]	@ (9000ca04 <_printf_i+0x234>)
9000c8bc:	6033      	str	r3, [r6, #0]
9000c8be:	bf14      	ite	ne
9000c8c0:	230a      	movne	r3, #10
9000c8c2:	2308      	moveq	r3, #8
9000c8c4:	2100      	movs	r1, #0
9000c8c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000c8ca:	6866      	ldr	r6, [r4, #4]
9000c8cc:	60a6      	str	r6, [r4, #8]
9000c8ce:	2e00      	cmp	r6, #0
9000c8d0:	db05      	blt.n	9000c8de <_printf_i+0x10e>
9000c8d2:	6821      	ldr	r1, [r4, #0]
9000c8d4:	432e      	orrs	r6, r5
9000c8d6:	f021 0104 	bic.w	r1, r1, #4
9000c8da:	6021      	str	r1, [r4, #0]
9000c8dc:	d04b      	beq.n	9000c976 <_printf_i+0x1a6>
9000c8de:	4616      	mov	r6, r2
9000c8e0:	fbb5 f1f3 	udiv	r1, r5, r3
9000c8e4:	fb03 5711 	mls	r7, r3, r1, r5
9000c8e8:	5dc7      	ldrb	r7, [r0, r7]
9000c8ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000c8ee:	462f      	mov	r7, r5
9000c8f0:	42bb      	cmp	r3, r7
9000c8f2:	460d      	mov	r5, r1
9000c8f4:	d9f4      	bls.n	9000c8e0 <_printf_i+0x110>
9000c8f6:	2b08      	cmp	r3, #8
9000c8f8:	d10b      	bne.n	9000c912 <_printf_i+0x142>
9000c8fa:	6823      	ldr	r3, [r4, #0]
9000c8fc:	07df      	lsls	r7, r3, #31
9000c8fe:	d508      	bpl.n	9000c912 <_printf_i+0x142>
9000c900:	6923      	ldr	r3, [r4, #16]
9000c902:	6861      	ldr	r1, [r4, #4]
9000c904:	4299      	cmp	r1, r3
9000c906:	bfde      	ittt	le
9000c908:	2330      	movle	r3, #48	@ 0x30
9000c90a:	f806 3c01 	strble.w	r3, [r6, #-1]
9000c90e:	f106 36ff 	addle.w	r6, r6, #4294967295
9000c912:	1b92      	subs	r2, r2, r6
9000c914:	6122      	str	r2, [r4, #16]
9000c916:	f8cd a000 	str.w	sl, [sp]
9000c91a:	464b      	mov	r3, r9
9000c91c:	aa03      	add	r2, sp, #12
9000c91e:	4621      	mov	r1, r4
9000c920:	4640      	mov	r0, r8
9000c922:	f7ff fee7 	bl	9000c6f4 <_printf_common>
9000c926:	3001      	adds	r0, #1
9000c928:	d14a      	bne.n	9000c9c0 <_printf_i+0x1f0>
9000c92a:	f04f 30ff 	mov.w	r0, #4294967295
9000c92e:	b004      	add	sp, #16
9000c930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c934:	6823      	ldr	r3, [r4, #0]
9000c936:	f043 0320 	orr.w	r3, r3, #32
9000c93a:	6023      	str	r3, [r4, #0]
9000c93c:	4832      	ldr	r0, [pc, #200]	@ (9000ca08 <_printf_i+0x238>)
9000c93e:	2778      	movs	r7, #120	@ 0x78
9000c940:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000c944:	6823      	ldr	r3, [r4, #0]
9000c946:	6831      	ldr	r1, [r6, #0]
9000c948:	061f      	lsls	r7, r3, #24
9000c94a:	f851 5b04 	ldr.w	r5, [r1], #4
9000c94e:	d402      	bmi.n	9000c956 <_printf_i+0x186>
9000c950:	065f      	lsls	r7, r3, #25
9000c952:	bf48      	it	mi
9000c954:	b2ad      	uxthmi	r5, r5
9000c956:	6031      	str	r1, [r6, #0]
9000c958:	07d9      	lsls	r1, r3, #31
9000c95a:	bf44      	itt	mi
9000c95c:	f043 0320 	orrmi.w	r3, r3, #32
9000c960:	6023      	strmi	r3, [r4, #0]
9000c962:	b11d      	cbz	r5, 9000c96c <_printf_i+0x19c>
9000c964:	2310      	movs	r3, #16
9000c966:	e7ad      	b.n	9000c8c4 <_printf_i+0xf4>
9000c968:	4826      	ldr	r0, [pc, #152]	@ (9000ca04 <_printf_i+0x234>)
9000c96a:	e7e9      	b.n	9000c940 <_printf_i+0x170>
9000c96c:	6823      	ldr	r3, [r4, #0]
9000c96e:	f023 0320 	bic.w	r3, r3, #32
9000c972:	6023      	str	r3, [r4, #0]
9000c974:	e7f6      	b.n	9000c964 <_printf_i+0x194>
9000c976:	4616      	mov	r6, r2
9000c978:	e7bd      	b.n	9000c8f6 <_printf_i+0x126>
9000c97a:	6833      	ldr	r3, [r6, #0]
9000c97c:	6825      	ldr	r5, [r4, #0]
9000c97e:	6961      	ldr	r1, [r4, #20]
9000c980:	1d18      	adds	r0, r3, #4
9000c982:	6030      	str	r0, [r6, #0]
9000c984:	062e      	lsls	r6, r5, #24
9000c986:	681b      	ldr	r3, [r3, #0]
9000c988:	d501      	bpl.n	9000c98e <_printf_i+0x1be>
9000c98a:	6019      	str	r1, [r3, #0]
9000c98c:	e002      	b.n	9000c994 <_printf_i+0x1c4>
9000c98e:	0668      	lsls	r0, r5, #25
9000c990:	d5fb      	bpl.n	9000c98a <_printf_i+0x1ba>
9000c992:	8019      	strh	r1, [r3, #0]
9000c994:	2300      	movs	r3, #0
9000c996:	6123      	str	r3, [r4, #16]
9000c998:	4616      	mov	r6, r2
9000c99a:	e7bc      	b.n	9000c916 <_printf_i+0x146>
9000c99c:	6833      	ldr	r3, [r6, #0]
9000c99e:	1d1a      	adds	r2, r3, #4
9000c9a0:	6032      	str	r2, [r6, #0]
9000c9a2:	681e      	ldr	r6, [r3, #0]
9000c9a4:	6862      	ldr	r2, [r4, #4]
9000c9a6:	2100      	movs	r1, #0
9000c9a8:	4630      	mov	r0, r6
9000c9aa:	f7f3 fc99 	bl	900002e0 <memchr>
9000c9ae:	b108      	cbz	r0, 9000c9b4 <_printf_i+0x1e4>
9000c9b0:	1b80      	subs	r0, r0, r6
9000c9b2:	6060      	str	r0, [r4, #4]
9000c9b4:	6863      	ldr	r3, [r4, #4]
9000c9b6:	6123      	str	r3, [r4, #16]
9000c9b8:	2300      	movs	r3, #0
9000c9ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000c9be:	e7aa      	b.n	9000c916 <_printf_i+0x146>
9000c9c0:	6923      	ldr	r3, [r4, #16]
9000c9c2:	4632      	mov	r2, r6
9000c9c4:	4649      	mov	r1, r9
9000c9c6:	4640      	mov	r0, r8
9000c9c8:	47d0      	blx	sl
9000c9ca:	3001      	adds	r0, #1
9000c9cc:	d0ad      	beq.n	9000c92a <_printf_i+0x15a>
9000c9ce:	6823      	ldr	r3, [r4, #0]
9000c9d0:	079b      	lsls	r3, r3, #30
9000c9d2:	d413      	bmi.n	9000c9fc <_printf_i+0x22c>
9000c9d4:	68e0      	ldr	r0, [r4, #12]
9000c9d6:	9b03      	ldr	r3, [sp, #12]
9000c9d8:	4298      	cmp	r0, r3
9000c9da:	bfb8      	it	lt
9000c9dc:	4618      	movlt	r0, r3
9000c9de:	e7a6      	b.n	9000c92e <_printf_i+0x15e>
9000c9e0:	2301      	movs	r3, #1
9000c9e2:	4632      	mov	r2, r6
9000c9e4:	4649      	mov	r1, r9
9000c9e6:	4640      	mov	r0, r8
9000c9e8:	47d0      	blx	sl
9000c9ea:	3001      	adds	r0, #1
9000c9ec:	d09d      	beq.n	9000c92a <_printf_i+0x15a>
9000c9ee:	3501      	adds	r5, #1
9000c9f0:	68e3      	ldr	r3, [r4, #12]
9000c9f2:	9903      	ldr	r1, [sp, #12]
9000c9f4:	1a5b      	subs	r3, r3, r1
9000c9f6:	42ab      	cmp	r3, r5
9000c9f8:	dcf2      	bgt.n	9000c9e0 <_printf_i+0x210>
9000c9fa:	e7eb      	b.n	9000c9d4 <_printf_i+0x204>
9000c9fc:	2500      	movs	r5, #0
9000c9fe:	f104 0619 	add.w	r6, r4, #25
9000ca02:	e7f5      	b.n	9000c9f0 <_printf_i+0x220>
9000ca04:	9000f195 	.word	0x9000f195
9000ca08:	9000f1a6 	.word	0x9000f1a6

9000ca0c <__sflush_r>:
9000ca0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000ca10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ca14:	0716      	lsls	r6, r2, #28
9000ca16:	4605      	mov	r5, r0
9000ca18:	460c      	mov	r4, r1
9000ca1a:	d454      	bmi.n	9000cac6 <__sflush_r+0xba>
9000ca1c:	684b      	ldr	r3, [r1, #4]
9000ca1e:	2b00      	cmp	r3, #0
9000ca20:	dc02      	bgt.n	9000ca28 <__sflush_r+0x1c>
9000ca22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000ca24:	2b00      	cmp	r3, #0
9000ca26:	dd48      	ble.n	9000caba <__sflush_r+0xae>
9000ca28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000ca2a:	2e00      	cmp	r6, #0
9000ca2c:	d045      	beq.n	9000caba <__sflush_r+0xae>
9000ca2e:	2300      	movs	r3, #0
9000ca30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000ca34:	682f      	ldr	r7, [r5, #0]
9000ca36:	6a21      	ldr	r1, [r4, #32]
9000ca38:	602b      	str	r3, [r5, #0]
9000ca3a:	d030      	beq.n	9000ca9e <__sflush_r+0x92>
9000ca3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000ca3e:	89a3      	ldrh	r3, [r4, #12]
9000ca40:	0759      	lsls	r1, r3, #29
9000ca42:	d505      	bpl.n	9000ca50 <__sflush_r+0x44>
9000ca44:	6863      	ldr	r3, [r4, #4]
9000ca46:	1ad2      	subs	r2, r2, r3
9000ca48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000ca4a:	b10b      	cbz	r3, 9000ca50 <__sflush_r+0x44>
9000ca4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000ca4e:	1ad2      	subs	r2, r2, r3
9000ca50:	2300      	movs	r3, #0
9000ca52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000ca54:	6a21      	ldr	r1, [r4, #32]
9000ca56:	4628      	mov	r0, r5
9000ca58:	47b0      	blx	r6
9000ca5a:	1c43      	adds	r3, r0, #1
9000ca5c:	89a3      	ldrh	r3, [r4, #12]
9000ca5e:	d106      	bne.n	9000ca6e <__sflush_r+0x62>
9000ca60:	6829      	ldr	r1, [r5, #0]
9000ca62:	291d      	cmp	r1, #29
9000ca64:	d82b      	bhi.n	9000cabe <__sflush_r+0xb2>
9000ca66:	4a2a      	ldr	r2, [pc, #168]	@ (9000cb10 <__sflush_r+0x104>)
9000ca68:	40ca      	lsrs	r2, r1
9000ca6a:	07d6      	lsls	r6, r2, #31
9000ca6c:	d527      	bpl.n	9000cabe <__sflush_r+0xb2>
9000ca6e:	2200      	movs	r2, #0
9000ca70:	6062      	str	r2, [r4, #4]
9000ca72:	04d9      	lsls	r1, r3, #19
9000ca74:	6922      	ldr	r2, [r4, #16]
9000ca76:	6022      	str	r2, [r4, #0]
9000ca78:	d504      	bpl.n	9000ca84 <__sflush_r+0x78>
9000ca7a:	1c42      	adds	r2, r0, #1
9000ca7c:	d101      	bne.n	9000ca82 <__sflush_r+0x76>
9000ca7e:	682b      	ldr	r3, [r5, #0]
9000ca80:	b903      	cbnz	r3, 9000ca84 <__sflush_r+0x78>
9000ca82:	6560      	str	r0, [r4, #84]	@ 0x54
9000ca84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000ca86:	602f      	str	r7, [r5, #0]
9000ca88:	b1b9      	cbz	r1, 9000caba <__sflush_r+0xae>
9000ca8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000ca8e:	4299      	cmp	r1, r3
9000ca90:	d002      	beq.n	9000ca98 <__sflush_r+0x8c>
9000ca92:	4628      	mov	r0, r5
9000ca94:	f7ff fca2 	bl	9000c3dc <_free_r>
9000ca98:	2300      	movs	r3, #0
9000ca9a:	6363      	str	r3, [r4, #52]	@ 0x34
9000ca9c:	e00d      	b.n	9000caba <__sflush_r+0xae>
9000ca9e:	2301      	movs	r3, #1
9000caa0:	4628      	mov	r0, r5
9000caa2:	47b0      	blx	r6
9000caa4:	4602      	mov	r2, r0
9000caa6:	1c50      	adds	r0, r2, #1
9000caa8:	d1c9      	bne.n	9000ca3e <__sflush_r+0x32>
9000caaa:	682b      	ldr	r3, [r5, #0]
9000caac:	2b00      	cmp	r3, #0
9000caae:	d0c6      	beq.n	9000ca3e <__sflush_r+0x32>
9000cab0:	2b1d      	cmp	r3, #29
9000cab2:	d001      	beq.n	9000cab8 <__sflush_r+0xac>
9000cab4:	2b16      	cmp	r3, #22
9000cab6:	d11e      	bne.n	9000caf6 <__sflush_r+0xea>
9000cab8:	602f      	str	r7, [r5, #0]
9000caba:	2000      	movs	r0, #0
9000cabc:	e022      	b.n	9000cb04 <__sflush_r+0xf8>
9000cabe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cac2:	b21b      	sxth	r3, r3
9000cac4:	e01b      	b.n	9000cafe <__sflush_r+0xf2>
9000cac6:	690f      	ldr	r7, [r1, #16]
9000cac8:	2f00      	cmp	r7, #0
9000caca:	d0f6      	beq.n	9000caba <__sflush_r+0xae>
9000cacc:	0793      	lsls	r3, r2, #30
9000cace:	680e      	ldr	r6, [r1, #0]
9000cad0:	bf08      	it	eq
9000cad2:	694b      	ldreq	r3, [r1, #20]
9000cad4:	600f      	str	r7, [r1, #0]
9000cad6:	bf18      	it	ne
9000cad8:	2300      	movne	r3, #0
9000cada:	eba6 0807 	sub.w	r8, r6, r7
9000cade:	608b      	str	r3, [r1, #8]
9000cae0:	f1b8 0f00 	cmp.w	r8, #0
9000cae4:	dde9      	ble.n	9000caba <__sflush_r+0xae>
9000cae6:	6a21      	ldr	r1, [r4, #32]
9000cae8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000caea:	4643      	mov	r3, r8
9000caec:	463a      	mov	r2, r7
9000caee:	4628      	mov	r0, r5
9000caf0:	47b0      	blx	r6
9000caf2:	2800      	cmp	r0, #0
9000caf4:	dc08      	bgt.n	9000cb08 <__sflush_r+0xfc>
9000caf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cafe:	81a3      	strh	r3, [r4, #12]
9000cb00:	f04f 30ff 	mov.w	r0, #4294967295
9000cb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000cb08:	4407      	add	r7, r0
9000cb0a:	eba8 0800 	sub.w	r8, r8, r0
9000cb0e:	e7e7      	b.n	9000cae0 <__sflush_r+0xd4>
9000cb10:	20400001 	.word	0x20400001

9000cb14 <_fflush_r>:
9000cb14:	b538      	push	{r3, r4, r5, lr}
9000cb16:	690b      	ldr	r3, [r1, #16]
9000cb18:	4605      	mov	r5, r0
9000cb1a:	460c      	mov	r4, r1
9000cb1c:	b913      	cbnz	r3, 9000cb24 <_fflush_r+0x10>
9000cb1e:	2500      	movs	r5, #0
9000cb20:	4628      	mov	r0, r5
9000cb22:	bd38      	pop	{r3, r4, r5, pc}
9000cb24:	b118      	cbz	r0, 9000cb2e <_fflush_r+0x1a>
9000cb26:	6a03      	ldr	r3, [r0, #32]
9000cb28:	b90b      	cbnz	r3, 9000cb2e <_fflush_r+0x1a>
9000cb2a:	f7ff fa4d 	bl	9000bfc8 <__sinit>
9000cb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cb32:	2b00      	cmp	r3, #0
9000cb34:	d0f3      	beq.n	9000cb1e <_fflush_r+0xa>
9000cb36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000cb38:	07d0      	lsls	r0, r2, #31
9000cb3a:	d404      	bmi.n	9000cb46 <_fflush_r+0x32>
9000cb3c:	0599      	lsls	r1, r3, #22
9000cb3e:	d402      	bmi.n	9000cb46 <_fflush_r+0x32>
9000cb40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cb42:	f7ff fc48 	bl	9000c3d6 <__retarget_lock_acquire_recursive>
9000cb46:	4628      	mov	r0, r5
9000cb48:	4621      	mov	r1, r4
9000cb4a:	f7ff ff5f 	bl	9000ca0c <__sflush_r>
9000cb4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000cb50:	07da      	lsls	r2, r3, #31
9000cb52:	4605      	mov	r5, r0
9000cb54:	d4e4      	bmi.n	9000cb20 <_fflush_r+0xc>
9000cb56:	89a3      	ldrh	r3, [r4, #12]
9000cb58:	059b      	lsls	r3, r3, #22
9000cb5a:	d4e1      	bmi.n	9000cb20 <_fflush_r+0xc>
9000cb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000cb5e:	f7ff fc3b 	bl	9000c3d8 <__retarget_lock_release_recursive>
9000cb62:	e7dd      	b.n	9000cb20 <_fflush_r+0xc>

9000cb64 <__swhatbuf_r>:
9000cb64:	b570      	push	{r4, r5, r6, lr}
9000cb66:	460c      	mov	r4, r1
9000cb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cb6c:	2900      	cmp	r1, #0
9000cb6e:	b096      	sub	sp, #88	@ 0x58
9000cb70:	4615      	mov	r5, r2
9000cb72:	461e      	mov	r6, r3
9000cb74:	da0d      	bge.n	9000cb92 <__swhatbuf_r+0x2e>
9000cb76:	89a3      	ldrh	r3, [r4, #12]
9000cb78:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000cb7c:	f04f 0100 	mov.w	r1, #0
9000cb80:	bf14      	ite	ne
9000cb82:	2340      	movne	r3, #64	@ 0x40
9000cb84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000cb88:	2000      	movs	r0, #0
9000cb8a:	6031      	str	r1, [r6, #0]
9000cb8c:	602b      	str	r3, [r5, #0]
9000cb8e:	b016      	add	sp, #88	@ 0x58
9000cb90:	bd70      	pop	{r4, r5, r6, pc}
9000cb92:	466a      	mov	r2, sp
9000cb94:	f000 f848 	bl	9000cc28 <_fstat_r>
9000cb98:	2800      	cmp	r0, #0
9000cb9a:	dbec      	blt.n	9000cb76 <__swhatbuf_r+0x12>
9000cb9c:	9901      	ldr	r1, [sp, #4]
9000cb9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000cba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000cba6:	4259      	negs	r1, r3
9000cba8:	4159      	adcs	r1, r3
9000cbaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000cbae:	e7eb      	b.n	9000cb88 <__swhatbuf_r+0x24>

9000cbb0 <__smakebuf_r>:
9000cbb0:	898b      	ldrh	r3, [r1, #12]
9000cbb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000cbb4:	079d      	lsls	r5, r3, #30
9000cbb6:	4606      	mov	r6, r0
9000cbb8:	460c      	mov	r4, r1
9000cbba:	d507      	bpl.n	9000cbcc <__smakebuf_r+0x1c>
9000cbbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000cbc0:	6023      	str	r3, [r4, #0]
9000cbc2:	6123      	str	r3, [r4, #16]
9000cbc4:	2301      	movs	r3, #1
9000cbc6:	6163      	str	r3, [r4, #20]
9000cbc8:	b003      	add	sp, #12
9000cbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000cbcc:	ab01      	add	r3, sp, #4
9000cbce:	466a      	mov	r2, sp
9000cbd0:	f7ff ffc8 	bl	9000cb64 <__swhatbuf_r>
9000cbd4:	9f00      	ldr	r7, [sp, #0]
9000cbd6:	4605      	mov	r5, r0
9000cbd8:	4639      	mov	r1, r7
9000cbda:	4630      	mov	r0, r6
9000cbdc:	f7ff f8dc 	bl	9000bd98 <_malloc_r>
9000cbe0:	b948      	cbnz	r0, 9000cbf6 <__smakebuf_r+0x46>
9000cbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cbe6:	059a      	lsls	r2, r3, #22
9000cbe8:	d4ee      	bmi.n	9000cbc8 <__smakebuf_r+0x18>
9000cbea:	f023 0303 	bic.w	r3, r3, #3
9000cbee:	f043 0302 	orr.w	r3, r3, #2
9000cbf2:	81a3      	strh	r3, [r4, #12]
9000cbf4:	e7e2      	b.n	9000cbbc <__smakebuf_r+0xc>
9000cbf6:	89a3      	ldrh	r3, [r4, #12]
9000cbf8:	6020      	str	r0, [r4, #0]
9000cbfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000cbfe:	81a3      	strh	r3, [r4, #12]
9000cc00:	9b01      	ldr	r3, [sp, #4]
9000cc02:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000cc06:	b15b      	cbz	r3, 9000cc20 <__smakebuf_r+0x70>
9000cc08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000cc0c:	4630      	mov	r0, r6
9000cc0e:	f000 f81d 	bl	9000cc4c <_isatty_r>
9000cc12:	b128      	cbz	r0, 9000cc20 <__smakebuf_r+0x70>
9000cc14:	89a3      	ldrh	r3, [r4, #12]
9000cc16:	f023 0303 	bic.w	r3, r3, #3
9000cc1a:	f043 0301 	orr.w	r3, r3, #1
9000cc1e:	81a3      	strh	r3, [r4, #12]
9000cc20:	89a3      	ldrh	r3, [r4, #12]
9000cc22:	431d      	orrs	r5, r3
9000cc24:	81a5      	strh	r5, [r4, #12]
9000cc26:	e7cf      	b.n	9000cbc8 <__smakebuf_r+0x18>

9000cc28 <_fstat_r>:
9000cc28:	b538      	push	{r3, r4, r5, lr}
9000cc2a:	4d07      	ldr	r5, [pc, #28]	@ (9000cc48 <_fstat_r+0x20>)
9000cc2c:	2300      	movs	r3, #0
9000cc2e:	4604      	mov	r4, r0
9000cc30:	4608      	mov	r0, r1
9000cc32:	4611      	mov	r1, r2
9000cc34:	602b      	str	r3, [r5, #0]
9000cc36:	f7f4 fa42 	bl	900010be <_fstat>
9000cc3a:	1c43      	adds	r3, r0, #1
9000cc3c:	d102      	bne.n	9000cc44 <_fstat_r+0x1c>
9000cc3e:	682b      	ldr	r3, [r5, #0]
9000cc40:	b103      	cbz	r3, 9000cc44 <_fstat_r+0x1c>
9000cc42:	6023      	str	r3, [r4, #0]
9000cc44:	bd38      	pop	{r3, r4, r5, pc}
9000cc46:	bf00      	nop
9000cc48:	20001490 	.word	0x20001490

9000cc4c <_isatty_r>:
9000cc4c:	b538      	push	{r3, r4, r5, lr}
9000cc4e:	4d06      	ldr	r5, [pc, #24]	@ (9000cc68 <_isatty_r+0x1c>)
9000cc50:	2300      	movs	r3, #0
9000cc52:	4604      	mov	r4, r0
9000cc54:	4608      	mov	r0, r1
9000cc56:	602b      	str	r3, [r5, #0]
9000cc58:	f7f4 fa41 	bl	900010de <_isatty>
9000cc5c:	1c43      	adds	r3, r0, #1
9000cc5e:	d102      	bne.n	9000cc66 <_isatty_r+0x1a>
9000cc60:	682b      	ldr	r3, [r5, #0]
9000cc62:	b103      	cbz	r3, 9000cc66 <_isatty_r+0x1a>
9000cc64:	6023      	str	r3, [r4, #0]
9000cc66:	bd38      	pop	{r3, r4, r5, pc}
9000cc68:	20001490 	.word	0x20001490

9000cc6c <_init>:
9000cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cc6e:	bf00      	nop
9000cc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cc72:	bc08      	pop	{r3}
9000cc74:	469e      	mov	lr, r3
9000cc76:	4770      	bx	lr

9000cc78 <_fini>:
9000cc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cc7a:	bf00      	nop
9000cc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cc7e:	bc08      	pop	{r3}
9000cc80:	469e      	mov	lr, r3
9000cc82:	4770      	bx	lr
