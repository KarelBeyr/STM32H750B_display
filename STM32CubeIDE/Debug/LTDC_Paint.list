
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d54  90000298  90000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003868  90013fec  90013fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  90017854  90017854  000190cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  90017854  90017854  000190cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  90017854  90017854  000190cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  90017854  90017854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  90017858  90017858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  9001785c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa0  200000d0  90017928  000190d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20002070  90017928  0001a070  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000190cc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003260f  00000000  00000000  000190fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000068  00000000  00000000  0004b709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00030532  00000000  00000000  0004b771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000066fe  00000000  00000000  0007bca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002428  00000000  00000000  000823a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018d8ae  00000000  00000000  000847d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001bd4  00000000  00000000  0021207e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00041f90  00000000  00000000  00213c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00255be2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c14  00000000  00000000  00255c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

90000298 <__do_global_dtors_aux>:
90000298:	b510      	push	{r4, lr}
9000029a:	4c05      	ldr	r4, [pc, #20]	@ (900002b0 <__do_global_dtors_aux+0x18>)
9000029c:	7823      	ldrb	r3, [r4, #0]
9000029e:	b933      	cbnz	r3, 900002ae <__do_global_dtors_aux+0x16>
900002a0:	4b04      	ldr	r3, [pc, #16]	@ (900002b4 <__do_global_dtors_aux+0x1c>)
900002a2:	b113      	cbz	r3, 900002aa <__do_global_dtors_aux+0x12>
900002a4:	4804      	ldr	r0, [pc, #16]	@ (900002b8 <__do_global_dtors_aux+0x20>)
900002a6:	f3af 8000 	nop.w
900002aa:	2301      	movs	r3, #1
900002ac:	7023      	strb	r3, [r4, #0]
900002ae:	bd10      	pop	{r4, pc}
900002b0:	200000d0 	.word	0x200000d0
900002b4:	00000000 	.word	0x00000000
900002b8:	90013fd4 	.word	0x90013fd4

900002bc <frame_dummy>:
900002bc:	b508      	push	{r3, lr}
900002be:	4b03      	ldr	r3, [pc, #12]	@ (900002cc <frame_dummy+0x10>)
900002c0:	b11b      	cbz	r3, 900002ca <frame_dummy+0xe>
900002c2:	4903      	ldr	r1, [pc, #12]	@ (900002d0 <frame_dummy+0x14>)
900002c4:	4803      	ldr	r0, [pc, #12]	@ (900002d4 <frame_dummy+0x18>)
900002c6:	f3af 8000 	nop.w
900002ca:	bd08      	pop	{r3, pc}
900002cc:	00000000 	.word	0x00000000
900002d0:	200000d4 	.word	0x200000d4
900002d4:	90013fd4 	.word	0x90013fd4

900002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900002d8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000314 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900002dc:	f004 fbc8 	bl	90004a70 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900002e0:	f004 fb64 	bl	900049ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900002e4:	480c      	ldr	r0, [pc, #48]	@ (90000318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900002e6:	490d      	ldr	r1, [pc, #52]	@ (9000031c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900002e8:	4a0d      	ldr	r2, [pc, #52]	@ (90000320 <LoopFillZerobss+0x1a>)
  movs r3, #0
900002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
900002ec:	e002      	b.n	900002f4 <LoopCopyDataInit>

900002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900002f2:	3304      	adds	r3, #4

900002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
900002f8:	d3f9      	bcc.n	900002ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900002fa:	4a0a      	ldr	r2, [pc, #40]	@ (90000324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900002fc:	4c0a      	ldr	r4, [pc, #40]	@ (90000328 <LoopFillZerobss+0x22>)
  movs r3, #0
900002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
90000300:	e001      	b.n	90000306 <LoopFillZerobss>

90000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000304:	3204      	adds	r2, #4

90000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000308:	d3fb      	bcc.n	90000302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
9000030a:	f013 fde5 	bl	90013ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
9000030e:	f000 f80f 	bl	90000330 <main>
  bx  lr
90000312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
9000031c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
90000320:	9001785c 	.word	0x9001785c
  ldr r2, =_sbss
90000324:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
90000328:	20002070 	.word	0x20002070

9000032c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
9000032c:	e7fe      	b.n	9000032c <ADC3_IRQHandler>
	...

90000330 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000330:	b580      	push	{r7, lr}
90000332:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
90000334:	f001 f958 	bl	900015e8 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
90000338:	f001 f868 	bl	9000140c <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
9000033c:	f004 fbb0 	bl	90004aa0 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
90000340:	f000 ff60 	bl	90001204 <SystemClock_Config>
    
  /* Configure LED1 */
  BSP_LED_Init(LED1);
90000344:	2000      	movs	r0, #0
90000346:	f002 fb19 	bl	9000297c <BSP_LED_Init>
  
  /*##-1- LCD Initialization #################################################*/ 
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);  
9000034a:	2101      	movs	r1, #1
9000034c:	2000      	movs	r0, #0
9000034e:	f003 f805 	bl	9000335c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90000352:	4831      	ldr	r0, [pc, #196]	@ (90000418 <main+0xe8>)
90000354:	f012 fefa 	bl	9001314c <UTIL_LCD_SetFuncDriver>
 
  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90000358:	2000      	movs	r0, #0
9000035a:	f012 ff4d 	bl	900131f8 <UTIL_LCD_SetLayer>
  
  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
9000035e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000362:	f013 f86f 	bl	90013444 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90000366:	492d      	ldr	r1, [pc, #180]	@ (9000041c <main+0xec>)
90000368:	2000      	movs	r0, #0
9000036a:	f003 fa5b 	bl	90003824 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
9000036e:	492c      	ldr	r1, [pc, #176]	@ (90000420 <main+0xf0>)
90000370:	2000      	movs	r0, #0
90000372:	f003 fa75 	bl	90003860 <BSP_LCD_GetYSize>
  
  hTS->Width = x_size;
90000376:	4b2b      	ldr	r3, [pc, #172]	@ (90000424 <main+0xf4>)
90000378:	681b      	ldr	r3, [r3, #0]
9000037a:	4a28      	ldr	r2, [pc, #160]	@ (9000041c <main+0xec>)
9000037c:	6812      	ldr	r2, [r2, #0]
9000037e:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
90000380:	4b28      	ldr	r3, [pc, #160]	@ (90000424 <main+0xf4>)
90000382:	681b      	ldr	r3, [r3, #0]
90000384:	4a26      	ldr	r2, [pc, #152]	@ (90000420 <main+0xf0>)
90000386:	6812      	ldr	r2, [r2, #0]
90000388:	605a      	str	r2, [r3, #4]
  hTS->Orientation =TS_SWAP_XY ;
9000038a:	4b26      	ldr	r3, [pc, #152]	@ (90000424 <main+0xf4>)
9000038c:	681b      	ldr	r3, [r3, #0]
9000038e:	2208      	movs	r2, #8
90000390:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 5;
90000392:	4b24      	ldr	r3, [pc, #144]	@ (90000424 <main+0xf4>)
90000394:	681b      	ldr	r3, [r3, #0]
90000396:	2205      	movs	r2, #5
90000398:	60da      	str	r2, [r3, #12]
  /* Touchscreen initialization */
  BSP_TS_Init(0, hTS);
9000039a:	4b22      	ldr	r3, [pc, #136]	@ (90000424 <main+0xf4>)
9000039c:	681b      	ldr	r3, [r3, #0]
9000039e:	4619      	mov	r1, r3
900003a0:	2000      	movs	r0, #0
900003a2:	f004 f8e5 	bl	90004570 <BSP_TS_Init>

  /* Enable the USB voltage level detector */
  HAL_PWREx_EnableUSBVoltageDetector();
900003a6:	f008 ffbb 	bl	90009320 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* Init Host Library */
  if (USBH_Init(&hUSB_Host, USBH_UserProcess, 0) != USBH_OK)
900003aa:	2200      	movs	r2, #0
900003ac:	491e      	ldr	r1, [pc, #120]	@ (90000428 <main+0xf8>)
900003ae:	481f      	ldr	r0, [pc, #124]	@ (9000042c <main+0xfc>)
900003b0:	f011 f9db 	bl	9001176a <USBH_Init>
900003b4:	4603      	mov	r3, r0
900003b6:	2b00      	cmp	r3, #0
900003b8:	d001      	beq.n	900003be <main+0x8e>
  {
    /* USB Initialization Error */
    Error_Handler();
900003ba:	f000 fea7 	bl	9000110c <Error_Handler>
  }
  
  /* Add Supported Class */
  USBH_RegisterClass(&hUSB_Host, USBH_MSC_CLASS);
900003be:	491c      	ldr	r1, [pc, #112]	@ (90000430 <main+0x100>)
900003c0:	481a      	ldr	r0, [pc, #104]	@ (9000042c <main+0xfc>)
900003c2:	f011 fa7e 	bl	900118c2 <USBH_RegisterClass>
  
  /* Start Host Process */
  if (USBH_Start(&hUSB_Host) != USBH_OK)
900003c6:	4819      	ldr	r0, [pc, #100]	@ (9000042c <main+0xfc>)
900003c8:	f011 fb08 	bl	900119dc <USBH_Start>
900003cc:	4603      	mov	r3, r0
900003ce:	2b00      	cmp	r3, #0
900003d0:	d001      	beq.n	900003d6 <main+0xa6>
  {
    /* USB Initialization Error */
    Error_Handler();
900003d2:	f000 fe9b 	bl	9000110c <Error_Handler>
  }
  
  
  /*##-4- Link the USB Mass Storage disk I/O driver ##########################*/
  if(FATFS_LinkDriver(&USBH_Driver, USB_Path) != 0) 
900003d6:	4917      	ldr	r1, [pc, #92]	@ (90000434 <main+0x104>)
900003d8:	4817      	ldr	r0, [pc, #92]	@ (90000438 <main+0x108>)
900003da:	f00f fce9 	bl	9000fdb0 <FATFS_LinkDriver>
900003de:	4603      	mov	r3, r0
900003e0:	2b00      	cmp	r3, #0
900003e2:	d001      	beq.n	900003e8 <main+0xb8>
  {
    /* FatFs Initialization Error */
    Error_Handler();
900003e4:	f000 fe92 	bl	9000110c <Error_Handler>
  }
  
  /*##-5- Register the file system object to the FatFs module ################*/
  if(f_mount(&USBDISK_FatFs, (TCHAR const*)USB_Path, 0) != FR_OK)
900003e8:	2200      	movs	r2, #0
900003ea:	4912      	ldr	r1, [pc, #72]	@ (90000434 <main+0x104>)
900003ec:	4813      	ldr	r0, [pc, #76]	@ (9000043c <main+0x10c>)
900003ee:	f00f f865 	bl	9000f4bc <f_mount>
900003f2:	4603      	mov	r3, r0
900003f4:	2b00      	cmp	r3, #0
900003f6:	d001      	beq.n	900003fc <main+0xcc>
  {
    /* FatFs Initialization Error */
    Error_Handler();
900003f8:	f000 fe88 	bl	9000110c <Error_Handler>
  }
  
  /*##-6- Draw the menu ######################################################*/
  CPU_CACHE_Disable();
900003fc:	f001 f874 	bl	900014e8 <CPU_CACHE_Disable>
  Draw_Menu();  
90000400:	f000 fcf8 	bl	90000df4 <Draw_Menu>
  CPU_CACHE_Enable();
90000404:	f001 f802 	bl	9000140c <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
  { 
    /*##-7- Configure the touch screen and Get the position ##################*/    
    GetPosition();
90000408:	f000 f842 	bl	90000490 <GetPosition>
    
    USBH_Process(&hUSB_Host);
9000040c:	4807      	ldr	r0, [pc, #28]	@ (9000042c <main+0xfc>)
9000040e:	f011 faf5 	bl	900119fc <USBH_Process>
    GetPosition();
90000412:	bf00      	nop
90000414:	e7f8      	b.n	90000408 <main+0xd8>
90000416:	bf00      	nop
90000418:	90014160 	.word	0x90014160
9000041c:	20000a98 	.word	0x20000a98
90000420:	20000a9c 	.word	0x20000a9c
90000424:	20000aac 	.word	0x20000aac
90000428:	90000441 	.word	0x90000441
9000042c:	200000ec 	.word	0x200000ec
90000430:	2000004c 	.word	0x2000004c
90000434:	20000a28 	.word	0x20000a28
90000438:	900140c0 	.word	0x900140c0
9000043c:	200005c4 	.word	0x200005c4

90000440 <USBH_UserProcess>:
  * @brief  User Process
  * @param  None
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{  
90000440:	b580      	push	{r7, lr}
90000442:	b082      	sub	sp, #8
90000444:	af00      	add	r7, sp, #0
90000446:	6078      	str	r0, [r7, #4]
90000448:	460b      	mov	r3, r1
9000044a:	70fb      	strb	r3, [r7, #3]
  switch (id)
9000044c:	78fb      	ldrb	r3, [r7, #3]
9000044e:	2b02      	cmp	r3, #2
90000450:	d00f      	beq.n	90000472 <USBH_UserProcess+0x32>
90000452:	2b05      	cmp	r3, #5
90000454:	d112      	bne.n	9000047c <USBH_UserProcess+0x3c>
  { 
  case HOST_USER_DISCONNECTION:
    Appli_state = APPLICATION_IDLE;
90000456:	4b0b      	ldr	r3, [pc, #44]	@ (90000484 <USBH_UserProcess+0x44>)
90000458:	2200      	movs	r2, #0
9000045a:	701a      	strb	r2, [r3, #0]
    if (f_mount(&USBDISK_FatFs, "", 0) != FR_OK)
9000045c:	2200      	movs	r2, #0
9000045e:	490a      	ldr	r1, [pc, #40]	@ (90000488 <USBH_UserProcess+0x48>)
90000460:	480a      	ldr	r0, [pc, #40]	@ (9000048c <USBH_UserProcess+0x4c>)
90000462:	f00f f82b 	bl	9000f4bc <f_mount>
90000466:	4603      	mov	r3, r0
90000468:	2b00      	cmp	r3, #0
9000046a:	d006      	beq.n	9000047a <USBH_UserProcess+0x3a>
    {
      /* FatFs Initialization Error */
      Error_Handler();
9000046c:	f000 fe4e 	bl	9000110c <Error_Handler>
    }
    break; 
90000470:	e003      	b.n	9000047a <USBH_UserProcess+0x3a>
  case HOST_USER_CLASS_ACTIVE:
    Appli_state = APPLICATION_RUNNIG;
90000472:	4b04      	ldr	r3, [pc, #16]	@ (90000484 <USBH_UserProcess+0x44>)
90000474:	2201      	movs	r2, #1
90000476:	701a      	strb	r2, [r3, #0]
    break;
90000478:	e000      	b.n	9000047c <USBH_UserProcess+0x3c>
    break; 
9000047a:	bf00      	nop
  }
}
9000047c:	bf00      	nop
9000047e:	3708      	adds	r7, #8
90000480:	46bd      	mov	sp, r7
90000482:	bd80      	pop	{r7, pc}
90000484:	20000ab0 	.word	0x20000ab0
90000488:	90013fec 	.word	0x90013fec
9000048c:	200005c4 	.word	0x200005c4

90000490 <GetPosition>:
  * @brief  Configures and gets Touch screen position.
  * @param  None
  * @retval None
  */
static void GetPosition(void)
{
90000490:	b5f0      	push	{r4, r5, r6, r7, lr}
90000492:	b083      	sub	sp, #12
90000494:	af02      	add	r7, sp, #8
  static uint32_t color_width;  
  static uint32_t color ;
  
  if (x_size == 640)
90000496:	4b8a      	ldr	r3, [pc, #552]	@ (900006c0 <GetPosition+0x230>)
90000498:	681b      	ldr	r3, [r3, #0]
9000049a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
9000049e:	d103      	bne.n	900004a8 <GetPosition+0x18>
  {
    color_width = 36;
900004a0:	4b88      	ldr	r3, [pc, #544]	@ (900006c4 <GetPosition+0x234>)
900004a2:	2224      	movs	r2, #36	@ 0x24
900004a4:	601a      	str	r2, [r3, #0]
900004a6:	e002      	b.n	900004ae <GetPosition+0x1e>
  }
  else
  {
    color_width = 19;
900004a8:	4b86      	ldr	r3, [pc, #536]	@ (900006c4 <GetPosition+0x234>)
900004aa:	2213      	movs	r2, #19
900004ac:	601a      	str	r2, [r3, #0]
  }
  
  /* Get Touch screen position */
  BSP_TS_GetState(0,&TS_State); 
900004ae:	4986      	ldr	r1, [pc, #536]	@ (900006c8 <GetPosition+0x238>)
900004b0:	2000      	movs	r0, #0
900004b2:	f004 f903 	bl	900046bc <BSP_TS_GetState>
  
  /* Read the coordinate */
  x = TS_State.TouchX;
900004b6:	4b84      	ldr	r3, [pc, #528]	@ (900006c8 <GetPosition+0x238>)
900004b8:	685b      	ldr	r3, [r3, #4]
900004ba:	b29a      	uxth	r2, r3
900004bc:	4b83      	ldr	r3, [pc, #524]	@ (900006cc <GetPosition+0x23c>)
900004be:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
900004c0:	4b81      	ldr	r3, [pc, #516]	@ (900006c8 <GetPosition+0x238>)
900004c2:	689b      	ldr	r3, [r3, #8]
900004c4:	b29a      	uxth	r2, r3
900004c6:	4b82      	ldr	r3, [pc, #520]	@ (900006d0 <GetPosition+0x240>)
900004c8:	801a      	strh	r2, [r3, #0]
  
  if ((TS_State.TouchDetected) & (x > (67 + Radius)) & (y > (7 + Radius) ) & ( x < (x_size-(7  + Radius )) ) & (y < (y_size-(67 + Radius )) ))
900004ca:	4b7f      	ldr	r3, [pc, #508]	@ (900006c8 <GetPosition+0x238>)
900004cc:	681b      	ldr	r3, [r3, #0]
900004ce:	4a7f      	ldr	r2, [pc, #508]	@ (900006cc <GetPosition+0x23c>)
900004d0:	8812      	ldrh	r2, [r2, #0]
900004d2:	4611      	mov	r1, r2
900004d4:	4a7f      	ldr	r2, [pc, #508]	@ (900006d4 <GetPosition+0x244>)
900004d6:	6812      	ldr	r2, [r2, #0]
900004d8:	3243      	adds	r2, #67	@ 0x43
900004da:	4291      	cmp	r1, r2
900004dc:	bf8c      	ite	hi
900004de:	2201      	movhi	r2, #1
900004e0:	2200      	movls	r2, #0
900004e2:	b2d2      	uxtb	r2, r2
900004e4:	4013      	ands	r3, r2
900004e6:	4a7a      	ldr	r2, [pc, #488]	@ (900006d0 <GetPosition+0x240>)
900004e8:	8812      	ldrh	r2, [r2, #0]
900004ea:	4611      	mov	r1, r2
900004ec:	4a79      	ldr	r2, [pc, #484]	@ (900006d4 <GetPosition+0x244>)
900004ee:	6812      	ldr	r2, [r2, #0]
900004f0:	3207      	adds	r2, #7
900004f2:	4291      	cmp	r1, r2
900004f4:	bf8c      	ite	hi
900004f6:	2201      	movhi	r2, #1
900004f8:	2200      	movls	r2, #0
900004fa:	b2d2      	uxtb	r2, r2
900004fc:	4013      	ands	r3, r2
900004fe:	4a73      	ldr	r2, [pc, #460]	@ (900006cc <GetPosition+0x23c>)
90000500:	8812      	ldrh	r2, [r2, #0]
90000502:	4610      	mov	r0, r2
90000504:	4a6e      	ldr	r2, [pc, #440]	@ (900006c0 <GetPosition+0x230>)
90000506:	6811      	ldr	r1, [r2, #0]
90000508:	4a72      	ldr	r2, [pc, #456]	@ (900006d4 <GetPosition+0x244>)
9000050a:	6812      	ldr	r2, [r2, #0]
9000050c:	1a8a      	subs	r2, r1, r2
9000050e:	3a07      	subs	r2, #7
90000510:	4290      	cmp	r0, r2
90000512:	bf34      	ite	cc
90000514:	2201      	movcc	r2, #1
90000516:	2200      	movcs	r2, #0
90000518:	b2d2      	uxtb	r2, r2
9000051a:	4013      	ands	r3, r2
9000051c:	4a6c      	ldr	r2, [pc, #432]	@ (900006d0 <GetPosition+0x240>)
9000051e:	8812      	ldrh	r2, [r2, #0]
90000520:	4610      	mov	r0, r2
90000522:	4a6d      	ldr	r2, [pc, #436]	@ (900006d8 <GetPosition+0x248>)
90000524:	6811      	ldr	r1, [r2, #0]
90000526:	4a6b      	ldr	r2, [pc, #428]	@ (900006d4 <GetPosition+0x244>)
90000528:	6812      	ldr	r2, [r2, #0]
9000052a:	1a8a      	subs	r2, r1, r2
9000052c:	3a43      	subs	r2, #67	@ 0x43
9000052e:	4290      	cmp	r0, r2
90000530:	bf34      	ite	cc
90000532:	2201      	movcc	r2, #1
90000534:	2200      	movcs	r2, #0
90000536:	b2d2      	uxtb	r2, r2
90000538:	4013      	ands	r3, r2
9000053a:	2b00      	cmp	r3, #0
9000053c:	d011      	beq.n	90000562 <GetPosition+0xd2>
  {
    UTIL_LCD_FillCircle((x), (y), Radius,UTIL_LCD_GetTextColor());
9000053e:	4b63      	ldr	r3, [pc, #396]	@ (900006cc <GetPosition+0x23c>)
90000540:	881b      	ldrh	r3, [r3, #0]
90000542:	461d      	mov	r5, r3
90000544:	4b62      	ldr	r3, [pc, #392]	@ (900006d0 <GetPosition+0x240>)
90000546:	881b      	ldrh	r3, [r3, #0]
90000548:	461e      	mov	r6, r3
9000054a:	4b62      	ldr	r3, [pc, #392]	@ (900006d4 <GetPosition+0x244>)
9000054c:	681c      	ldr	r4, [r3, #0]
9000054e:	f012 fe85 	bl	9001325c <UTIL_LCD_GetTextColor>
90000552:	4603      	mov	r3, r0
90000554:	4622      	mov	r2, r4
90000556:	4631      	mov	r1, r6
90000558:	4628      	mov	r0, r5
9000055a:	f013 f9db 	bl	90013914 <UTIL_LCD_FillCircle>
  }  
  else if ((TS_State.TouchDetected) & (x > 320) & (y > (y_size - 50)) & (x < 370) & (y < y_size ))
  {   
    Save_Picture();
  }    
}
9000055e:	f000 bc37 	b.w	90000dd0 <GetPosition+0x940>
  else if ((TS_State.TouchDetected) & (x > 0 ) & ( x < 50 ))
90000562:	4b59      	ldr	r3, [pc, #356]	@ (900006c8 <GetPosition+0x238>)
90000564:	681b      	ldr	r3, [r3, #0]
90000566:	4a59      	ldr	r2, [pc, #356]	@ (900006cc <GetPosition+0x23c>)
90000568:	8812      	ldrh	r2, [r2, #0]
9000056a:	2a00      	cmp	r2, #0
9000056c:	bf14      	ite	ne
9000056e:	2201      	movne	r2, #1
90000570:	2200      	moveq	r2, #0
90000572:	b2d2      	uxtb	r2, r2
90000574:	4013      	ands	r3, r2
90000576:	4a55      	ldr	r2, [pc, #340]	@ (900006cc <GetPosition+0x23c>)
90000578:	8812      	ldrh	r2, [r2, #0]
9000057a:	2a31      	cmp	r2, #49	@ 0x31
9000057c:	bf94      	ite	ls
9000057e:	2201      	movls	r2, #1
90000580:	2200      	movhi	r2, #0
90000582:	b2d2      	uxtb	r2, r2
90000584:	4013      	ands	r3, r2
90000586:	2b00      	cmp	r3, #0
90000588:	f000 825d 	beq.w	90000a46 <GetPosition+0x5b6>
    if ((TS_State.TouchDetected) & ( y > 0 ) & ( y < color_width ))
9000058c:	4b4e      	ldr	r3, [pc, #312]	@ (900006c8 <GetPosition+0x238>)
9000058e:	681b      	ldr	r3, [r3, #0]
90000590:	4a4f      	ldr	r2, [pc, #316]	@ (900006d0 <GetPosition+0x240>)
90000592:	8812      	ldrh	r2, [r2, #0]
90000594:	2a00      	cmp	r2, #0
90000596:	bf14      	ite	ne
90000598:	2201      	movne	r2, #1
9000059a:	2200      	moveq	r2, #0
9000059c:	b2d2      	uxtb	r2, r2
9000059e:	4013      	ands	r3, r2
900005a0:	4a4b      	ldr	r2, [pc, #300]	@ (900006d0 <GetPosition+0x240>)
900005a2:	8812      	ldrh	r2, [r2, #0]
900005a4:	4611      	mov	r1, r2
900005a6:	4a47      	ldr	r2, [pc, #284]	@ (900006c4 <GetPosition+0x234>)
900005a8:	6812      	ldr	r2, [r2, #0]
900005aa:	4291      	cmp	r1, r2
900005ac:	bf34      	ite	cc
900005ae:	2201      	movcc	r2, #1
900005b0:	2200      	movcs	r2, #0
900005b2:	b2d2      	uxtb	r2, r2
900005b4:	4013      	ands	r3, r2
900005b6:	2b00      	cmp	r3, #0
900005b8:	d00a      	beq.n	900005d0 <GetPosition+0x140>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
900005ba:	f04f 30ff 	mov.w	r0, #4294967295
900005be:	f012 fe39 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
900005c2:	4b44      	ldr	r3, [pc, #272]	@ (900006d4 <GetPosition+0x244>)
900005c4:	681b      	ldr	r3, [r3, #0]
900005c6:	b2db      	uxtb	r3, r3
900005c8:	4618      	mov	r0, r3
900005ca:	f000 fdd5 	bl	90001178 <Update_Size>
900005ce:	e237      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & ( y > color_width ) & (y < (2 * color_width)))
900005d0:	4b3d      	ldr	r3, [pc, #244]	@ (900006c8 <GetPosition+0x238>)
900005d2:	681b      	ldr	r3, [r3, #0]
900005d4:	4a3e      	ldr	r2, [pc, #248]	@ (900006d0 <GetPosition+0x240>)
900005d6:	8812      	ldrh	r2, [r2, #0]
900005d8:	4611      	mov	r1, r2
900005da:	4a3a      	ldr	r2, [pc, #232]	@ (900006c4 <GetPosition+0x234>)
900005dc:	6812      	ldr	r2, [r2, #0]
900005de:	4291      	cmp	r1, r2
900005e0:	bf8c      	ite	hi
900005e2:	2201      	movhi	r2, #1
900005e4:	2200      	movls	r2, #0
900005e6:	b2d2      	uxtb	r2, r2
900005e8:	4013      	ands	r3, r2
900005ea:	4a39      	ldr	r2, [pc, #228]	@ (900006d0 <GetPosition+0x240>)
900005ec:	8812      	ldrh	r2, [r2, #0]
900005ee:	4611      	mov	r1, r2
900005f0:	4a34      	ldr	r2, [pc, #208]	@ (900006c4 <GetPosition+0x234>)
900005f2:	6812      	ldr	r2, [r2, #0]
900005f4:	0052      	lsls	r2, r2, #1
900005f6:	4291      	cmp	r1, r2
900005f8:	bf34      	ite	cc
900005fa:	2201      	movcc	r2, #1
900005fc:	2200      	movcs	r2, #0
900005fe:	b2d2      	uxtb	r2, r2
90000600:	4013      	ands	r3, r2
90000602:	2b00      	cmp	r3, #0
90000604:	d00a      	beq.n	9000061c <GetPosition+0x18c>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_YELLOW);
90000606:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
9000060a:	f012 fe13 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
9000060e:	4b31      	ldr	r3, [pc, #196]	@ (900006d4 <GetPosition+0x244>)
90000610:	681b      	ldr	r3, [r3, #0]
90000612:	b2db      	uxtb	r3, r3
90000614:	4618      	mov	r0, r3
90000616:	f000 fdaf 	bl	90001178 <Update_Size>
9000061a:	e211      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & (y > (2 * color_width)) & (y < (3 * color_width)))
9000061c:	4b2a      	ldr	r3, [pc, #168]	@ (900006c8 <GetPosition+0x238>)
9000061e:	681b      	ldr	r3, [r3, #0]
90000620:	4a2b      	ldr	r2, [pc, #172]	@ (900006d0 <GetPosition+0x240>)
90000622:	8812      	ldrh	r2, [r2, #0]
90000624:	4611      	mov	r1, r2
90000626:	4a27      	ldr	r2, [pc, #156]	@ (900006c4 <GetPosition+0x234>)
90000628:	6812      	ldr	r2, [r2, #0]
9000062a:	0052      	lsls	r2, r2, #1
9000062c:	4291      	cmp	r1, r2
9000062e:	bf8c      	ite	hi
90000630:	2201      	movhi	r2, #1
90000632:	2200      	movls	r2, #0
90000634:	b2d2      	uxtb	r2, r2
90000636:	ea03 0102 	and.w	r1, r3, r2
9000063a:	4b25      	ldr	r3, [pc, #148]	@ (900006d0 <GetPosition+0x240>)
9000063c:	881b      	ldrh	r3, [r3, #0]
9000063e:	4618      	mov	r0, r3
90000640:	4b20      	ldr	r3, [pc, #128]	@ (900006c4 <GetPosition+0x234>)
90000642:	681a      	ldr	r2, [r3, #0]
90000644:	4613      	mov	r3, r2
90000646:	005b      	lsls	r3, r3, #1
90000648:	4413      	add	r3, r2
9000064a:	4298      	cmp	r0, r3
9000064c:	bf34      	ite	cc
9000064e:	2301      	movcc	r3, #1
90000650:	2300      	movcs	r3, #0
90000652:	b2db      	uxtb	r3, r3
90000654:	400b      	ands	r3, r1
90000656:	2b00      	cmp	r3, #0
90000658:	d009      	beq.n	9000066e <GetPosition+0x1de>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ORANGE);
9000065a:	4820      	ldr	r0, [pc, #128]	@ (900006dc <GetPosition+0x24c>)
9000065c:	f012 fdea 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
90000660:	4b1c      	ldr	r3, [pc, #112]	@ (900006d4 <GetPosition+0x244>)
90000662:	681b      	ldr	r3, [r3, #0]
90000664:	b2db      	uxtb	r3, r3
90000666:	4618      	mov	r0, r3
90000668:	f000 fd86 	bl	90001178 <Update_Size>
9000066c:	e1e8      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & (y > (3 * color_width)) & (y < (4 * color_width)))
9000066e:	4b16      	ldr	r3, [pc, #88]	@ (900006c8 <GetPosition+0x238>)
90000670:	6819      	ldr	r1, [r3, #0]
90000672:	4b17      	ldr	r3, [pc, #92]	@ (900006d0 <GetPosition+0x240>)
90000674:	881b      	ldrh	r3, [r3, #0]
90000676:	4618      	mov	r0, r3
90000678:	4b12      	ldr	r3, [pc, #72]	@ (900006c4 <GetPosition+0x234>)
9000067a:	681a      	ldr	r2, [r3, #0]
9000067c:	4613      	mov	r3, r2
9000067e:	005b      	lsls	r3, r3, #1
90000680:	4413      	add	r3, r2
90000682:	4298      	cmp	r0, r3
90000684:	bf8c      	ite	hi
90000686:	2301      	movhi	r3, #1
90000688:	2300      	movls	r3, #0
9000068a:	b2db      	uxtb	r3, r3
9000068c:	400b      	ands	r3, r1
9000068e:	4a10      	ldr	r2, [pc, #64]	@ (900006d0 <GetPosition+0x240>)
90000690:	8812      	ldrh	r2, [r2, #0]
90000692:	4611      	mov	r1, r2
90000694:	4a0b      	ldr	r2, [pc, #44]	@ (900006c4 <GetPosition+0x234>)
90000696:	6812      	ldr	r2, [r2, #0]
90000698:	0092      	lsls	r2, r2, #2
9000069a:	4291      	cmp	r1, r2
9000069c:	bf34      	ite	cc
9000069e:	2201      	movcc	r2, #1
900006a0:	2200      	movcs	r2, #0
900006a2:	b2d2      	uxtb	r2, r2
900006a4:	4013      	ands	r3, r2
900006a6:	2b00      	cmp	r3, #0
900006a8:	d01a      	beq.n	900006e0 <GetPosition+0x250>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_LIGHTMAGENTA);
900006aa:	f46f 40fe 	mvn.w	r0, #32512	@ 0x7f00
900006ae:	f012 fdc1 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
900006b2:	4b08      	ldr	r3, [pc, #32]	@ (900006d4 <GetPosition+0x244>)
900006b4:	681b      	ldr	r3, [r3, #0]
900006b6:	b2db      	uxtb	r3, r3
900006b8:	4618      	mov	r0, r3
900006ba:	f000 fd5d 	bl	90001178 <Update_Size>
900006be:	e1bf      	b.n	90000a40 <GetPosition+0x5b0>
900006c0:	20000a98 	.word	0x20000a98
900006c4:	20000ab4 	.word	0x20000ab4
900006c8:	20000aa0 	.word	0x20000aa0
900006cc:	20000a94 	.word	0x20000a94
900006d0:	20000a96 	.word	0x20000a96
900006d4:	20000000 	.word	0x20000000
900006d8:	20000a9c 	.word	0x20000a9c
900006dc:	ffffa500 	.word	0xffffa500
    else if ((TS_State.TouchDetected) & (y > (4 * color_width)) & (y < (5 * color_width)))
900006e0:	4b94      	ldr	r3, [pc, #592]	@ (90000934 <GetPosition+0x4a4>)
900006e2:	681b      	ldr	r3, [r3, #0]
900006e4:	4a94      	ldr	r2, [pc, #592]	@ (90000938 <GetPosition+0x4a8>)
900006e6:	8812      	ldrh	r2, [r2, #0]
900006e8:	4611      	mov	r1, r2
900006ea:	4a94      	ldr	r2, [pc, #592]	@ (9000093c <GetPosition+0x4ac>)
900006ec:	6812      	ldr	r2, [r2, #0]
900006ee:	0092      	lsls	r2, r2, #2
900006f0:	4291      	cmp	r1, r2
900006f2:	bf8c      	ite	hi
900006f4:	2201      	movhi	r2, #1
900006f6:	2200      	movls	r2, #0
900006f8:	b2d2      	uxtb	r2, r2
900006fa:	ea03 0102 	and.w	r1, r3, r2
900006fe:	4b8e      	ldr	r3, [pc, #568]	@ (90000938 <GetPosition+0x4a8>)
90000700:	881b      	ldrh	r3, [r3, #0]
90000702:	4618      	mov	r0, r3
90000704:	4b8d      	ldr	r3, [pc, #564]	@ (9000093c <GetPosition+0x4ac>)
90000706:	681a      	ldr	r2, [r3, #0]
90000708:	4613      	mov	r3, r2
9000070a:	009b      	lsls	r3, r3, #2
9000070c:	4413      	add	r3, r2
9000070e:	4298      	cmp	r0, r3
90000710:	bf34      	ite	cc
90000712:	2301      	movcc	r3, #1
90000714:	2300      	movcs	r3, #0
90000716:	b2db      	uxtb	r3, r3
90000718:	400b      	ands	r3, r1
9000071a:	2b00      	cmp	r3, #0
9000071c:	d009      	beq.n	90000732 <GetPosition+0x2a2>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKGREEN);
9000071e:	4888      	ldr	r0, [pc, #544]	@ (90000940 <GetPosition+0x4b0>)
90000720:	f012 fd88 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
90000724:	4b87      	ldr	r3, [pc, #540]	@ (90000944 <GetPosition+0x4b4>)
90000726:	681b      	ldr	r3, [r3, #0]
90000728:	b2db      	uxtb	r3, r3
9000072a:	4618      	mov	r0, r3
9000072c:	f000 fd24 	bl	90001178 <Update_Size>
90000730:	e186      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & (y > (5 * color_width)) &(y < (6 * color_width)))
90000732:	4b80      	ldr	r3, [pc, #512]	@ (90000934 <GetPosition+0x4a4>)
90000734:	6819      	ldr	r1, [r3, #0]
90000736:	4b80      	ldr	r3, [pc, #512]	@ (90000938 <GetPosition+0x4a8>)
90000738:	881b      	ldrh	r3, [r3, #0]
9000073a:	4618      	mov	r0, r3
9000073c:	4b7f      	ldr	r3, [pc, #508]	@ (9000093c <GetPosition+0x4ac>)
9000073e:	681a      	ldr	r2, [r3, #0]
90000740:	4613      	mov	r3, r2
90000742:	009b      	lsls	r3, r3, #2
90000744:	4413      	add	r3, r2
90000746:	4298      	cmp	r0, r3
90000748:	bf8c      	ite	hi
9000074a:	2301      	movhi	r3, #1
9000074c:	2300      	movls	r3, #0
9000074e:	b2db      	uxtb	r3, r3
90000750:	4019      	ands	r1, r3
90000752:	4b79      	ldr	r3, [pc, #484]	@ (90000938 <GetPosition+0x4a8>)
90000754:	881b      	ldrh	r3, [r3, #0]
90000756:	4618      	mov	r0, r3
90000758:	4b78      	ldr	r3, [pc, #480]	@ (9000093c <GetPosition+0x4ac>)
9000075a:	681a      	ldr	r2, [r3, #0]
9000075c:	4613      	mov	r3, r2
9000075e:	005b      	lsls	r3, r3, #1
90000760:	4413      	add	r3, r2
90000762:	005b      	lsls	r3, r3, #1
90000764:	4298      	cmp	r0, r3
90000766:	bf34      	ite	cc
90000768:	2301      	movcc	r3, #1
9000076a:	2300      	movcs	r3, #0
9000076c:	b2db      	uxtb	r3, r3
9000076e:	400b      	ands	r3, r1
90000770:	2b00      	cmp	r3, #0
90000772:	d00a      	beq.n	9000078a <GetPosition+0x2fa>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90000774:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
90000778:	f012 fd5c 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
9000077c:	4b71      	ldr	r3, [pc, #452]	@ (90000944 <GetPosition+0x4b4>)
9000077e:	681b      	ldr	r3, [r3, #0]
90000780:	b2db      	uxtb	r3, r3
90000782:	4618      	mov	r0, r3
90000784:	f000 fcf8 	bl	90001178 <Update_Size>
90000788:	e15a      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & (y > (6 * color_width)) &(y < (7 * color_width)))
9000078a:	4b6a      	ldr	r3, [pc, #424]	@ (90000934 <GetPosition+0x4a4>)
9000078c:	6819      	ldr	r1, [r3, #0]
9000078e:	4b6a      	ldr	r3, [pc, #424]	@ (90000938 <GetPosition+0x4a8>)
90000790:	881b      	ldrh	r3, [r3, #0]
90000792:	4618      	mov	r0, r3
90000794:	4b69      	ldr	r3, [pc, #420]	@ (9000093c <GetPosition+0x4ac>)
90000796:	681a      	ldr	r2, [r3, #0]
90000798:	4613      	mov	r3, r2
9000079a:	005b      	lsls	r3, r3, #1
9000079c:	4413      	add	r3, r2
9000079e:	005b      	lsls	r3, r3, #1
900007a0:	4298      	cmp	r0, r3
900007a2:	bf8c      	ite	hi
900007a4:	2301      	movhi	r3, #1
900007a6:	2300      	movls	r3, #0
900007a8:	b2db      	uxtb	r3, r3
900007aa:	4019      	ands	r1, r3
900007ac:	4b62      	ldr	r3, [pc, #392]	@ (90000938 <GetPosition+0x4a8>)
900007ae:	881b      	ldrh	r3, [r3, #0]
900007b0:	4618      	mov	r0, r3
900007b2:	4b62      	ldr	r3, [pc, #392]	@ (9000093c <GetPosition+0x4ac>)
900007b4:	681a      	ldr	r2, [r3, #0]
900007b6:	4613      	mov	r3, r2
900007b8:	00db      	lsls	r3, r3, #3
900007ba:	1a9b      	subs	r3, r3, r2
900007bc:	4298      	cmp	r0, r3
900007be:	bf34      	ite	cc
900007c0:	2301      	movcc	r3, #1
900007c2:	2300      	movcs	r3, #0
900007c4:	b2db      	uxtb	r3, r3
900007c6:	400b      	ands	r3, r1
900007c8:	2b00      	cmp	r3, #0
900007ca:	d009      	beq.n	900007e0 <GetPosition+0x350>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BROWN);
900007cc:	485e      	ldr	r0, [pc, #376]	@ (90000948 <GetPosition+0x4b8>)
900007ce:	f012 fd31 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
900007d2:	4b5c      	ldr	r3, [pc, #368]	@ (90000944 <GetPosition+0x4b4>)
900007d4:	681b      	ldr	r3, [r3, #0]
900007d6:	b2db      	uxtb	r3, r3
900007d8:	4618      	mov	r0, r3
900007da:	f000 fccd 	bl	90001178 <Update_Size>
900007de:	e12f      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & (y > (7 * color_width)) & (y < (8 * color_width)))
900007e0:	4b54      	ldr	r3, [pc, #336]	@ (90000934 <GetPosition+0x4a4>)
900007e2:	6819      	ldr	r1, [r3, #0]
900007e4:	4b54      	ldr	r3, [pc, #336]	@ (90000938 <GetPosition+0x4a8>)
900007e6:	881b      	ldrh	r3, [r3, #0]
900007e8:	4618      	mov	r0, r3
900007ea:	4b54      	ldr	r3, [pc, #336]	@ (9000093c <GetPosition+0x4ac>)
900007ec:	681a      	ldr	r2, [r3, #0]
900007ee:	4613      	mov	r3, r2
900007f0:	00db      	lsls	r3, r3, #3
900007f2:	1a9b      	subs	r3, r3, r2
900007f4:	4298      	cmp	r0, r3
900007f6:	bf8c      	ite	hi
900007f8:	2301      	movhi	r3, #1
900007fa:	2300      	movls	r3, #0
900007fc:	b2db      	uxtb	r3, r3
900007fe:	400b      	ands	r3, r1
90000800:	4a4d      	ldr	r2, [pc, #308]	@ (90000938 <GetPosition+0x4a8>)
90000802:	8812      	ldrh	r2, [r2, #0]
90000804:	4611      	mov	r1, r2
90000806:	4a4d      	ldr	r2, [pc, #308]	@ (9000093c <GetPosition+0x4ac>)
90000808:	6812      	ldr	r2, [r2, #0]
9000080a:	00d2      	lsls	r2, r2, #3
9000080c:	4291      	cmp	r1, r2
9000080e:	bf34      	ite	cc
90000810:	2201      	movcc	r2, #1
90000812:	2200      	movcs	r2, #0
90000814:	b2d2      	uxtb	r2, r2
90000816:	4013      	ands	r3, r2
90000818:	2b00      	cmp	r3, #0
9000081a:	d009      	beq.n	90000830 <GetPosition+0x3a0>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000081c:	484b      	ldr	r0, [pc, #300]	@ (9000094c <GetPosition+0x4bc>)
9000081e:	f012 fd09 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
90000822:	4b48      	ldr	r3, [pc, #288]	@ (90000944 <GetPosition+0x4b4>)
90000824:	681b      	ldr	r3, [r3, #0]
90000826:	b2db      	uxtb	r3, r3
90000828:	4618      	mov	r0, r3
9000082a:	f000 fca5 	bl	90001178 <Update_Size>
9000082e:	e107      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & (y > (8 * color_width)) & (y < (9 * color_width)))
90000830:	4b40      	ldr	r3, [pc, #256]	@ (90000934 <GetPosition+0x4a4>)
90000832:	681b      	ldr	r3, [r3, #0]
90000834:	4a40      	ldr	r2, [pc, #256]	@ (90000938 <GetPosition+0x4a8>)
90000836:	8812      	ldrh	r2, [r2, #0]
90000838:	4611      	mov	r1, r2
9000083a:	4a40      	ldr	r2, [pc, #256]	@ (9000093c <GetPosition+0x4ac>)
9000083c:	6812      	ldr	r2, [r2, #0]
9000083e:	00d2      	lsls	r2, r2, #3
90000840:	4291      	cmp	r1, r2
90000842:	bf8c      	ite	hi
90000844:	2201      	movhi	r2, #1
90000846:	2200      	movls	r2, #0
90000848:	b2d2      	uxtb	r2, r2
9000084a:	ea03 0102 	and.w	r1, r3, r2
9000084e:	4b3a      	ldr	r3, [pc, #232]	@ (90000938 <GetPosition+0x4a8>)
90000850:	881b      	ldrh	r3, [r3, #0]
90000852:	4618      	mov	r0, r3
90000854:	4b39      	ldr	r3, [pc, #228]	@ (9000093c <GetPosition+0x4ac>)
90000856:	681a      	ldr	r2, [r3, #0]
90000858:	4613      	mov	r3, r2
9000085a:	00db      	lsls	r3, r3, #3
9000085c:	4413      	add	r3, r2
9000085e:	4298      	cmp	r0, r3
90000860:	bf34      	ite	cc
90000862:	2301      	movcc	r3, #1
90000864:	2300      	movcs	r3, #0
90000866:	b2db      	uxtb	r3, r3
90000868:	400b      	ands	r3, r1
9000086a:	2b00      	cmp	r3, #0
9000086c:	d009      	beq.n	90000882 <GetPosition+0x3f2>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKMAGENTA);
9000086e:	4838      	ldr	r0, [pc, #224]	@ (90000950 <GetPosition+0x4c0>)
90000870:	f012 fce0 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
90000874:	4b33      	ldr	r3, [pc, #204]	@ (90000944 <GetPosition+0x4b4>)
90000876:	681b      	ldr	r3, [r3, #0]
90000878:	b2db      	uxtb	r3, r3
9000087a:	4618      	mov	r0, r3
9000087c:	f000 fc7c 	bl	90001178 <Update_Size>
90000880:	e0de      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & (y > (9 * color_width)) & (y < (10 * color_width)))
90000882:	4b2c      	ldr	r3, [pc, #176]	@ (90000934 <GetPosition+0x4a4>)
90000884:	6819      	ldr	r1, [r3, #0]
90000886:	4b2c      	ldr	r3, [pc, #176]	@ (90000938 <GetPosition+0x4a8>)
90000888:	881b      	ldrh	r3, [r3, #0]
9000088a:	4618      	mov	r0, r3
9000088c:	4b2b      	ldr	r3, [pc, #172]	@ (9000093c <GetPosition+0x4ac>)
9000088e:	681a      	ldr	r2, [r3, #0]
90000890:	4613      	mov	r3, r2
90000892:	00db      	lsls	r3, r3, #3
90000894:	4413      	add	r3, r2
90000896:	4298      	cmp	r0, r3
90000898:	bf8c      	ite	hi
9000089a:	2301      	movhi	r3, #1
9000089c:	2300      	movls	r3, #0
9000089e:	b2db      	uxtb	r3, r3
900008a0:	4019      	ands	r1, r3
900008a2:	4b25      	ldr	r3, [pc, #148]	@ (90000938 <GetPosition+0x4a8>)
900008a4:	881b      	ldrh	r3, [r3, #0]
900008a6:	4618      	mov	r0, r3
900008a8:	4b24      	ldr	r3, [pc, #144]	@ (9000093c <GetPosition+0x4ac>)
900008aa:	681a      	ldr	r2, [r3, #0]
900008ac:	4613      	mov	r3, r2
900008ae:	009b      	lsls	r3, r3, #2
900008b0:	4413      	add	r3, r2
900008b2:	005b      	lsls	r3, r3, #1
900008b4:	4298      	cmp	r0, r3
900008b6:	bf34      	ite	cc
900008b8:	2301      	movcc	r3, #1
900008ba:	2300      	movcs	r3, #0
900008bc:	b2db      	uxtb	r3, r3
900008be:	400b      	ands	r3, r1
900008c0:	2b00      	cmp	r3, #0
900008c2:	d00a      	beq.n	900008da <GetPosition+0x44a>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_CYAN);
900008c4:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
900008c8:	f012 fcb4 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
900008cc:	4b1d      	ldr	r3, [pc, #116]	@ (90000944 <GetPosition+0x4b4>)
900008ce:	681b      	ldr	r3, [r3, #0]
900008d0:	b2db      	uxtb	r3, r3
900008d2:	4618      	mov	r0, r3
900008d4:	f000 fc50 	bl	90001178 <Update_Size>
900008d8:	e0b2      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) & (y > (10 * color_width)) & (y < (11 * color_width)))
900008da:	4b16      	ldr	r3, [pc, #88]	@ (90000934 <GetPosition+0x4a4>)
900008dc:	6819      	ldr	r1, [r3, #0]
900008de:	4b16      	ldr	r3, [pc, #88]	@ (90000938 <GetPosition+0x4a8>)
900008e0:	881b      	ldrh	r3, [r3, #0]
900008e2:	4618      	mov	r0, r3
900008e4:	4b15      	ldr	r3, [pc, #84]	@ (9000093c <GetPosition+0x4ac>)
900008e6:	681a      	ldr	r2, [r3, #0]
900008e8:	4613      	mov	r3, r2
900008ea:	009b      	lsls	r3, r3, #2
900008ec:	4413      	add	r3, r2
900008ee:	005b      	lsls	r3, r3, #1
900008f0:	4298      	cmp	r0, r3
900008f2:	bf8c      	ite	hi
900008f4:	2301      	movhi	r3, #1
900008f6:	2300      	movls	r3, #0
900008f8:	b2db      	uxtb	r3, r3
900008fa:	4019      	ands	r1, r3
900008fc:	4b0e      	ldr	r3, [pc, #56]	@ (90000938 <GetPosition+0x4a8>)
900008fe:	881b      	ldrh	r3, [r3, #0]
90000900:	4618      	mov	r0, r3
90000902:	4b0e      	ldr	r3, [pc, #56]	@ (9000093c <GetPosition+0x4ac>)
90000904:	681a      	ldr	r2, [r3, #0]
90000906:	4613      	mov	r3, r2
90000908:	009b      	lsls	r3, r3, #2
9000090a:	4413      	add	r3, r2
9000090c:	005b      	lsls	r3, r3, #1
9000090e:	4413      	add	r3, r2
90000910:	4298      	cmp	r0, r3
90000912:	bf34      	ite	cc
90000914:	2301      	movcc	r3, #1
90000916:	2300      	movcs	r3, #0
90000918:	b2db      	uxtb	r3, r3
9000091a:	400b      	ands	r3, r1
9000091c:	2b00      	cmp	r3, #0
9000091e:	d01b      	beq.n	90000958 <GetPosition+0x4c8>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
90000920:	480c      	ldr	r0, [pc, #48]	@ (90000954 <GetPosition+0x4c4>)
90000922:	f012 fc87 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
90000926:	4b07      	ldr	r3, [pc, #28]	@ (90000944 <GetPosition+0x4b4>)
90000928:	681b      	ldr	r3, [r3, #0]
9000092a:	b2db      	uxtb	r3, r3
9000092c:	4618      	mov	r0, r3
9000092e:	f000 fc23 	bl	90001178 <Update_Size>
90000932:	e085      	b.n	90000a40 <GetPosition+0x5b0>
90000934:	20000aa0 	.word	0x20000aa0
90000938:	20000a96 	.word	0x20000a96
9000093c:	20000ab4 	.word	0x20000ab4
90000940:	ff008000 	.word	0xff008000
90000944:	20000000 	.word	0x20000000
90000948:	ffa52a2a 	.word	0xffa52a2a
9000094c:	ffff0000 	.word	0xffff0000
90000950:	ff800080 	.word	0xff800080
90000954:	ff000080 	.word	0xff000080
    else if ((TS_State.TouchDetected) & (y > (11 * color_width)) & (y < (12 * color_width)))
90000958:	4b98      	ldr	r3, [pc, #608]	@ (90000bbc <GetPosition+0x72c>)
9000095a:	6819      	ldr	r1, [r3, #0]
9000095c:	4b98      	ldr	r3, [pc, #608]	@ (90000bc0 <GetPosition+0x730>)
9000095e:	881b      	ldrh	r3, [r3, #0]
90000960:	4618      	mov	r0, r3
90000962:	4b98      	ldr	r3, [pc, #608]	@ (90000bc4 <GetPosition+0x734>)
90000964:	681a      	ldr	r2, [r3, #0]
90000966:	4613      	mov	r3, r2
90000968:	009b      	lsls	r3, r3, #2
9000096a:	4413      	add	r3, r2
9000096c:	005b      	lsls	r3, r3, #1
9000096e:	4413      	add	r3, r2
90000970:	4298      	cmp	r0, r3
90000972:	bf8c      	ite	hi
90000974:	2301      	movhi	r3, #1
90000976:	2300      	movls	r3, #0
90000978:	b2db      	uxtb	r3, r3
9000097a:	4019      	ands	r1, r3
9000097c:	4b90      	ldr	r3, [pc, #576]	@ (90000bc0 <GetPosition+0x730>)
9000097e:	881b      	ldrh	r3, [r3, #0]
90000980:	4618      	mov	r0, r3
90000982:	4b90      	ldr	r3, [pc, #576]	@ (90000bc4 <GetPosition+0x734>)
90000984:	681a      	ldr	r2, [r3, #0]
90000986:	4613      	mov	r3, r2
90000988:	005b      	lsls	r3, r3, #1
9000098a:	4413      	add	r3, r2
9000098c:	009b      	lsls	r3, r3, #2
9000098e:	4298      	cmp	r0, r3
90000990:	bf34      	ite	cc
90000992:	2301      	movcc	r3, #1
90000994:	2300      	movcs	r3, #0
90000996:	b2db      	uxtb	r3, r3
90000998:	400b      	ands	r3, r1
9000099a:	2b00      	cmp	r3, #0
9000099c:	d00a      	beq.n	900009b4 <GetPosition+0x524>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
9000099e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900009a2:	f012 fc47 	bl	90013234 <UTIL_LCD_SetTextColor>
      Update_Size(Radius);
900009a6:	4b88      	ldr	r3, [pc, #544]	@ (90000bc8 <GetPosition+0x738>)
900009a8:	681b      	ldr	r3, [r3, #0]
900009aa:	b2db      	uxtb	r3, r3
900009ac:	4618      	mov	r0, r3
900009ae:	f000 fbe3 	bl	90001178 <Update_Size>
900009b2:	e045      	b.n	90000a40 <GetPosition+0x5b0>
    else if ((TS_State.TouchDetected) &  (y > (12 * color_width)) & (y < (13 * color_width)))
900009b4:	4b81      	ldr	r3, [pc, #516]	@ (90000bbc <GetPosition+0x72c>)
900009b6:	6819      	ldr	r1, [r3, #0]
900009b8:	4b81      	ldr	r3, [pc, #516]	@ (90000bc0 <GetPosition+0x730>)
900009ba:	881b      	ldrh	r3, [r3, #0]
900009bc:	4618      	mov	r0, r3
900009be:	4b81      	ldr	r3, [pc, #516]	@ (90000bc4 <GetPosition+0x734>)
900009c0:	681a      	ldr	r2, [r3, #0]
900009c2:	4613      	mov	r3, r2
900009c4:	005b      	lsls	r3, r3, #1
900009c6:	4413      	add	r3, r2
900009c8:	009b      	lsls	r3, r3, #2
900009ca:	4298      	cmp	r0, r3
900009cc:	bf8c      	ite	hi
900009ce:	2301      	movhi	r3, #1
900009d0:	2300      	movls	r3, #0
900009d2:	b2db      	uxtb	r3, r3
900009d4:	4019      	ands	r1, r3
900009d6:	4b7a      	ldr	r3, [pc, #488]	@ (90000bc0 <GetPosition+0x730>)
900009d8:	881b      	ldrh	r3, [r3, #0]
900009da:	4618      	mov	r0, r3
900009dc:	4b79      	ldr	r3, [pc, #484]	@ (90000bc4 <GetPosition+0x734>)
900009de:	681a      	ldr	r2, [r3, #0]
900009e0:	4613      	mov	r3, r2
900009e2:	005b      	lsls	r3, r3, #1
900009e4:	4413      	add	r3, r2
900009e6:	009b      	lsls	r3, r3, #2
900009e8:	4413      	add	r3, r2
900009ea:	4298      	cmp	r0, r3
900009ec:	bf34      	ite	cc
900009ee:	2301      	movcc	r3, #1
900009f0:	2300      	movcs	r3, #0
900009f2:	b2db      	uxtb	r3, r3
900009f4:	400b      	ands	r3, r1
900009f6:	2b00      	cmp	r3, #0
900009f8:	d01c      	beq.n	90000a34 <GetPosition+0x5a4>
      color = UTIL_LCD_GetTextColor();
900009fa:	f012 fc2f 	bl	9001325c <UTIL_LCD_GetTextColor>
900009fe:	4603      	mov	r3, r0
90000a00:	4a72      	ldr	r2, [pc, #456]	@ (90000bcc <GetPosition+0x73c>)
90000a02:	6013      	str	r3, [r2, #0]
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
90000a04:	f04f 30ff 	mov.w	r0, #4294967295
90000a08:	f012 fc14 	bl	90013234 <UTIL_LCD_SetTextColor>
      UTIL_LCD_FillRect(68, 8, (x_size - 75), (y_size - 75), UTIL_LCD_COLOR_WHITE);
90000a0c:	4b70      	ldr	r3, [pc, #448]	@ (90000bd0 <GetPosition+0x740>)
90000a0e:	681b      	ldr	r3, [r3, #0]
90000a10:	f1a3 024b 	sub.w	r2, r3, #75	@ 0x4b
90000a14:	4b6f      	ldr	r3, [pc, #444]	@ (90000bd4 <GetPosition+0x744>)
90000a16:	681b      	ldr	r3, [r3, #0]
90000a18:	3b4b      	subs	r3, #75	@ 0x4b
90000a1a:	f04f 31ff 	mov.w	r1, #4294967295
90000a1e:	9100      	str	r1, [sp, #0]
90000a20:	2108      	movs	r1, #8
90000a22:	2044      	movs	r0, #68	@ 0x44
90000a24:	f012 ff3c 	bl	900138a0 <UTIL_LCD_FillRect>
      UTIL_LCD_SetTextColor(color);
90000a28:	4b68      	ldr	r3, [pc, #416]	@ (90000bcc <GetPosition+0x73c>)
90000a2a:	681b      	ldr	r3, [r3, #0]
90000a2c:	4618      	mov	r0, r3
90000a2e:	f012 fc01 	bl	90013234 <UTIL_LCD_SetTextColor>
90000a32:	e005      	b.n	90000a40 <GetPosition+0x5b0>
      x = 0;
90000a34:	4b68      	ldr	r3, [pc, #416]	@ (90000bd8 <GetPosition+0x748>)
90000a36:	2200      	movs	r2, #0
90000a38:	801a      	strh	r2, [r3, #0]
      y = 0;
90000a3a:	4b61      	ldr	r3, [pc, #388]	@ (90000bc0 <GetPosition+0x730>)
90000a3c:	2200      	movs	r2, #0
90000a3e:	801a      	strh	r2, [r3, #0]
    Update_Color();    
90000a40:	f000 fb68 	bl	90001114 <Update_Color>
}
90000a44:	e1c4      	b.n	90000dd0 <GetPosition+0x940>
  else if ((TS_State.TouchDetected) & (x > 70 ) & (y > (12 * color_width)) & (y < (13 * color_width)) & ( x < 120 ))
90000a46:	4b5d      	ldr	r3, [pc, #372]	@ (90000bbc <GetPosition+0x72c>)
90000a48:	681b      	ldr	r3, [r3, #0]
90000a4a:	4a63      	ldr	r2, [pc, #396]	@ (90000bd8 <GetPosition+0x748>)
90000a4c:	8812      	ldrh	r2, [r2, #0]
90000a4e:	2a46      	cmp	r2, #70	@ 0x46
90000a50:	bf8c      	ite	hi
90000a52:	2201      	movhi	r2, #1
90000a54:	2200      	movls	r2, #0
90000a56:	b2d2      	uxtb	r2, r2
90000a58:	ea03 0102 	and.w	r1, r3, r2
90000a5c:	4b58      	ldr	r3, [pc, #352]	@ (90000bc0 <GetPosition+0x730>)
90000a5e:	881b      	ldrh	r3, [r3, #0]
90000a60:	4618      	mov	r0, r3
90000a62:	4b58      	ldr	r3, [pc, #352]	@ (90000bc4 <GetPosition+0x734>)
90000a64:	681a      	ldr	r2, [r3, #0]
90000a66:	4613      	mov	r3, r2
90000a68:	005b      	lsls	r3, r3, #1
90000a6a:	4413      	add	r3, r2
90000a6c:	009b      	lsls	r3, r3, #2
90000a6e:	4298      	cmp	r0, r3
90000a70:	bf8c      	ite	hi
90000a72:	2301      	movhi	r3, #1
90000a74:	2300      	movls	r3, #0
90000a76:	b2db      	uxtb	r3, r3
90000a78:	4019      	ands	r1, r3
90000a7a:	4b51      	ldr	r3, [pc, #324]	@ (90000bc0 <GetPosition+0x730>)
90000a7c:	881b      	ldrh	r3, [r3, #0]
90000a7e:	4618      	mov	r0, r3
90000a80:	4b50      	ldr	r3, [pc, #320]	@ (90000bc4 <GetPosition+0x734>)
90000a82:	681a      	ldr	r2, [r3, #0]
90000a84:	4613      	mov	r3, r2
90000a86:	005b      	lsls	r3, r3, #1
90000a88:	4413      	add	r3, r2
90000a8a:	009b      	lsls	r3, r3, #2
90000a8c:	4413      	add	r3, r2
90000a8e:	4298      	cmp	r0, r3
90000a90:	bf34      	ite	cc
90000a92:	2301      	movcc	r3, #1
90000a94:	2300      	movcs	r3, #0
90000a96:	b2db      	uxtb	r3, r3
90000a98:	400b      	ands	r3, r1
90000a9a:	4a4f      	ldr	r2, [pc, #316]	@ (90000bd8 <GetPosition+0x748>)
90000a9c:	8812      	ldrh	r2, [r2, #0]
90000a9e:	2a77      	cmp	r2, #119	@ 0x77
90000aa0:	bf94      	ite	ls
90000aa2:	2201      	movls	r2, #1
90000aa4:	2200      	movhi	r2, #0
90000aa6:	b2d2      	uxtb	r2, r2
90000aa8:	4013      	ands	r3, r2
90000aaa:	2b00      	cmp	r3, #0
90000aac:	d009      	beq.n	90000ac2 <GetPosition+0x632>
    Radius = 20;
90000aae:	4b46      	ldr	r3, [pc, #280]	@ (90000bc8 <GetPosition+0x738>)
90000ab0:	2214      	movs	r2, #20
90000ab2:	601a      	str	r2, [r3, #0]
    Update_Size(Radius);
90000ab4:	4b44      	ldr	r3, [pc, #272]	@ (90000bc8 <GetPosition+0x738>)
90000ab6:	681b      	ldr	r3, [r3, #0]
90000ab8:	b2db      	uxtb	r3, r3
90000aba:	4618      	mov	r0, r3
90000abc:	f000 fb5c 	bl	90001178 <Update_Size>
}
90000ac0:	e186      	b.n	90000dd0 <GetPosition+0x940>
  else if ((TS_State.TouchDetected) & (x > 120 ) & (y > (12 * color_width)) & (y < (13 * color_width)) & ( x < 170 ))
90000ac2:	4b3e      	ldr	r3, [pc, #248]	@ (90000bbc <GetPosition+0x72c>)
90000ac4:	681b      	ldr	r3, [r3, #0]
90000ac6:	4a44      	ldr	r2, [pc, #272]	@ (90000bd8 <GetPosition+0x748>)
90000ac8:	8812      	ldrh	r2, [r2, #0]
90000aca:	2a78      	cmp	r2, #120	@ 0x78
90000acc:	bf8c      	ite	hi
90000ace:	2201      	movhi	r2, #1
90000ad0:	2200      	movls	r2, #0
90000ad2:	b2d2      	uxtb	r2, r2
90000ad4:	ea03 0102 	and.w	r1, r3, r2
90000ad8:	4b39      	ldr	r3, [pc, #228]	@ (90000bc0 <GetPosition+0x730>)
90000ada:	881b      	ldrh	r3, [r3, #0]
90000adc:	4618      	mov	r0, r3
90000ade:	4b39      	ldr	r3, [pc, #228]	@ (90000bc4 <GetPosition+0x734>)
90000ae0:	681a      	ldr	r2, [r3, #0]
90000ae2:	4613      	mov	r3, r2
90000ae4:	005b      	lsls	r3, r3, #1
90000ae6:	4413      	add	r3, r2
90000ae8:	009b      	lsls	r3, r3, #2
90000aea:	4298      	cmp	r0, r3
90000aec:	bf8c      	ite	hi
90000aee:	2301      	movhi	r3, #1
90000af0:	2300      	movls	r3, #0
90000af2:	b2db      	uxtb	r3, r3
90000af4:	4019      	ands	r1, r3
90000af6:	4b32      	ldr	r3, [pc, #200]	@ (90000bc0 <GetPosition+0x730>)
90000af8:	881b      	ldrh	r3, [r3, #0]
90000afa:	4618      	mov	r0, r3
90000afc:	4b31      	ldr	r3, [pc, #196]	@ (90000bc4 <GetPosition+0x734>)
90000afe:	681a      	ldr	r2, [r3, #0]
90000b00:	4613      	mov	r3, r2
90000b02:	005b      	lsls	r3, r3, #1
90000b04:	4413      	add	r3, r2
90000b06:	009b      	lsls	r3, r3, #2
90000b08:	4413      	add	r3, r2
90000b0a:	4298      	cmp	r0, r3
90000b0c:	bf34      	ite	cc
90000b0e:	2301      	movcc	r3, #1
90000b10:	2300      	movcs	r3, #0
90000b12:	b2db      	uxtb	r3, r3
90000b14:	400b      	ands	r3, r1
90000b16:	4a30      	ldr	r2, [pc, #192]	@ (90000bd8 <GetPosition+0x748>)
90000b18:	8812      	ldrh	r2, [r2, #0]
90000b1a:	2aa9      	cmp	r2, #169	@ 0xa9
90000b1c:	bf94      	ite	ls
90000b1e:	2201      	movls	r2, #1
90000b20:	2200      	movhi	r2, #0
90000b22:	b2d2      	uxtb	r2, r2
90000b24:	4013      	ands	r3, r2
90000b26:	2b00      	cmp	r3, #0
90000b28:	d009      	beq.n	90000b3e <GetPosition+0x6ae>
    Radius = 15;
90000b2a:	4b27      	ldr	r3, [pc, #156]	@ (90000bc8 <GetPosition+0x738>)
90000b2c:	220f      	movs	r2, #15
90000b2e:	601a      	str	r2, [r3, #0]
    Update_Size(Radius);
90000b30:	4b25      	ldr	r3, [pc, #148]	@ (90000bc8 <GetPosition+0x738>)
90000b32:	681b      	ldr	r3, [r3, #0]
90000b34:	b2db      	uxtb	r3, r3
90000b36:	4618      	mov	r0, r3
90000b38:	f000 fb1e 	bl	90001178 <Update_Size>
}
90000b3c:	e148      	b.n	90000dd0 <GetPosition+0x940>
  else if ((TS_State.TouchDetected) & (x > 170 ) & (y > (12 * color_width)) & (y < (13 * color_width)) & ( x < 220 ))
90000b3e:	4b1f      	ldr	r3, [pc, #124]	@ (90000bbc <GetPosition+0x72c>)
90000b40:	681b      	ldr	r3, [r3, #0]
90000b42:	4a25      	ldr	r2, [pc, #148]	@ (90000bd8 <GetPosition+0x748>)
90000b44:	8812      	ldrh	r2, [r2, #0]
90000b46:	2aaa      	cmp	r2, #170	@ 0xaa
90000b48:	bf8c      	ite	hi
90000b4a:	2201      	movhi	r2, #1
90000b4c:	2200      	movls	r2, #0
90000b4e:	b2d2      	uxtb	r2, r2
90000b50:	ea03 0102 	and.w	r1, r3, r2
90000b54:	4b1a      	ldr	r3, [pc, #104]	@ (90000bc0 <GetPosition+0x730>)
90000b56:	881b      	ldrh	r3, [r3, #0]
90000b58:	4618      	mov	r0, r3
90000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (90000bc4 <GetPosition+0x734>)
90000b5c:	681a      	ldr	r2, [r3, #0]
90000b5e:	4613      	mov	r3, r2
90000b60:	005b      	lsls	r3, r3, #1
90000b62:	4413      	add	r3, r2
90000b64:	009b      	lsls	r3, r3, #2
90000b66:	4298      	cmp	r0, r3
90000b68:	bf8c      	ite	hi
90000b6a:	2301      	movhi	r3, #1
90000b6c:	2300      	movls	r3, #0
90000b6e:	b2db      	uxtb	r3, r3
90000b70:	4019      	ands	r1, r3
90000b72:	4b13      	ldr	r3, [pc, #76]	@ (90000bc0 <GetPosition+0x730>)
90000b74:	881b      	ldrh	r3, [r3, #0]
90000b76:	4618      	mov	r0, r3
90000b78:	4b12      	ldr	r3, [pc, #72]	@ (90000bc4 <GetPosition+0x734>)
90000b7a:	681a      	ldr	r2, [r3, #0]
90000b7c:	4613      	mov	r3, r2
90000b7e:	005b      	lsls	r3, r3, #1
90000b80:	4413      	add	r3, r2
90000b82:	009b      	lsls	r3, r3, #2
90000b84:	4413      	add	r3, r2
90000b86:	4298      	cmp	r0, r3
90000b88:	bf34      	ite	cc
90000b8a:	2301      	movcc	r3, #1
90000b8c:	2300      	movcs	r3, #0
90000b8e:	b2db      	uxtb	r3, r3
90000b90:	400b      	ands	r3, r1
90000b92:	4a11      	ldr	r2, [pc, #68]	@ (90000bd8 <GetPosition+0x748>)
90000b94:	8812      	ldrh	r2, [r2, #0]
90000b96:	2adb      	cmp	r2, #219	@ 0xdb
90000b98:	bf94      	ite	ls
90000b9a:	2201      	movls	r2, #1
90000b9c:	2200      	movhi	r2, #0
90000b9e:	b2d2      	uxtb	r2, r2
90000ba0:	4013      	ands	r3, r2
90000ba2:	2b00      	cmp	r3, #0
90000ba4:	d01a      	beq.n	90000bdc <GetPosition+0x74c>
    Radius = 10;
90000ba6:	4b08      	ldr	r3, [pc, #32]	@ (90000bc8 <GetPosition+0x738>)
90000ba8:	220a      	movs	r2, #10
90000baa:	601a      	str	r2, [r3, #0]
    Update_Size(Radius);
90000bac:	4b06      	ldr	r3, [pc, #24]	@ (90000bc8 <GetPosition+0x738>)
90000bae:	681b      	ldr	r3, [r3, #0]
90000bb0:	b2db      	uxtb	r3, r3
90000bb2:	4618      	mov	r0, r3
90000bb4:	f000 fae0 	bl	90001178 <Update_Size>
}
90000bb8:	e10a      	b.n	90000dd0 <GetPosition+0x940>
90000bba:	bf00      	nop
90000bbc:	20000aa0 	.word	0x20000aa0
90000bc0:	20000a96 	.word	0x20000a96
90000bc4:	20000ab4 	.word	0x20000ab4
90000bc8:	20000000 	.word	0x20000000
90000bcc:	20000ab8 	.word	0x20000ab8
90000bd0:	20000a98 	.word	0x20000a98
90000bd4:	20000a9c 	.word	0x20000a9c
90000bd8:	20000a94 	.word	0x20000a94
  else if ((TS_State.TouchDetected) & (x > 220 ) & (y > (12 * color_width)) & (y < (13 * color_width)) & ( x < 270 ))
90000bdc:	4b7e      	ldr	r3, [pc, #504]	@ (90000dd8 <GetPosition+0x948>)
90000bde:	681b      	ldr	r3, [r3, #0]
90000be0:	4a7e      	ldr	r2, [pc, #504]	@ (90000ddc <GetPosition+0x94c>)
90000be2:	8812      	ldrh	r2, [r2, #0]
90000be4:	2adc      	cmp	r2, #220	@ 0xdc
90000be6:	bf8c      	ite	hi
90000be8:	2201      	movhi	r2, #1
90000bea:	2200      	movls	r2, #0
90000bec:	b2d2      	uxtb	r2, r2
90000bee:	ea03 0102 	and.w	r1, r3, r2
90000bf2:	4b7b      	ldr	r3, [pc, #492]	@ (90000de0 <GetPosition+0x950>)
90000bf4:	881b      	ldrh	r3, [r3, #0]
90000bf6:	4618      	mov	r0, r3
90000bf8:	4b7a      	ldr	r3, [pc, #488]	@ (90000de4 <GetPosition+0x954>)
90000bfa:	681a      	ldr	r2, [r3, #0]
90000bfc:	4613      	mov	r3, r2
90000bfe:	005b      	lsls	r3, r3, #1
90000c00:	4413      	add	r3, r2
90000c02:	009b      	lsls	r3, r3, #2
90000c04:	4298      	cmp	r0, r3
90000c06:	bf8c      	ite	hi
90000c08:	2301      	movhi	r3, #1
90000c0a:	2300      	movls	r3, #0
90000c0c:	b2db      	uxtb	r3, r3
90000c0e:	4019      	ands	r1, r3
90000c10:	4b73      	ldr	r3, [pc, #460]	@ (90000de0 <GetPosition+0x950>)
90000c12:	881b      	ldrh	r3, [r3, #0]
90000c14:	4618      	mov	r0, r3
90000c16:	4b73      	ldr	r3, [pc, #460]	@ (90000de4 <GetPosition+0x954>)
90000c18:	681a      	ldr	r2, [r3, #0]
90000c1a:	4613      	mov	r3, r2
90000c1c:	005b      	lsls	r3, r3, #1
90000c1e:	4413      	add	r3, r2
90000c20:	009b      	lsls	r3, r3, #2
90000c22:	4413      	add	r3, r2
90000c24:	4298      	cmp	r0, r3
90000c26:	bf34      	ite	cc
90000c28:	2301      	movcc	r3, #1
90000c2a:	2300      	movcs	r3, #0
90000c2c:	b2db      	uxtb	r3, r3
90000c2e:	400b      	ands	r3, r1
90000c30:	4a6a      	ldr	r2, [pc, #424]	@ (90000ddc <GetPosition+0x94c>)
90000c32:	8812      	ldrh	r2, [r2, #0]
90000c34:	f240 110d 	movw	r1, #269	@ 0x10d
90000c38:	428a      	cmp	r2, r1
90000c3a:	bf94      	ite	ls
90000c3c:	2201      	movls	r2, #1
90000c3e:	2200      	movhi	r2, #0
90000c40:	b2d2      	uxtb	r2, r2
90000c42:	4013      	ands	r3, r2
90000c44:	2b00      	cmp	r3, #0
90000c46:	d009      	beq.n	90000c5c <GetPosition+0x7cc>
    Radius = 5;
90000c48:	4b67      	ldr	r3, [pc, #412]	@ (90000de8 <GetPosition+0x958>)
90000c4a:	2205      	movs	r2, #5
90000c4c:	601a      	str	r2, [r3, #0]
    Update_Size(Radius);
90000c4e:	4b66      	ldr	r3, [pc, #408]	@ (90000de8 <GetPosition+0x958>)
90000c50:	681b      	ldr	r3, [r3, #0]
90000c52:	b2db      	uxtb	r3, r3
90000c54:	4618      	mov	r0, r3
90000c56:	f000 fa8f 	bl	90001178 <Update_Size>
}
90000c5a:	e0b9      	b.n	90000dd0 <GetPosition+0x940>
  else if ((TS_State.TouchDetected) & (x > 270 ) & (y > (12 * color_width)) & (y < (13 * color_width)) & ( x < 320 ))
90000c5c:	4b5e      	ldr	r3, [pc, #376]	@ (90000dd8 <GetPosition+0x948>)
90000c5e:	681b      	ldr	r3, [r3, #0]
90000c60:	4a5e      	ldr	r2, [pc, #376]	@ (90000ddc <GetPosition+0x94c>)
90000c62:	8812      	ldrh	r2, [r2, #0]
90000c64:	f5b2 7f87 	cmp.w	r2, #270	@ 0x10e
90000c68:	bf8c      	ite	hi
90000c6a:	2201      	movhi	r2, #1
90000c6c:	2200      	movls	r2, #0
90000c6e:	b2d2      	uxtb	r2, r2
90000c70:	ea03 0102 	and.w	r1, r3, r2
90000c74:	4b5a      	ldr	r3, [pc, #360]	@ (90000de0 <GetPosition+0x950>)
90000c76:	881b      	ldrh	r3, [r3, #0]
90000c78:	4618      	mov	r0, r3
90000c7a:	4b5a      	ldr	r3, [pc, #360]	@ (90000de4 <GetPosition+0x954>)
90000c7c:	681a      	ldr	r2, [r3, #0]
90000c7e:	4613      	mov	r3, r2
90000c80:	005b      	lsls	r3, r3, #1
90000c82:	4413      	add	r3, r2
90000c84:	009b      	lsls	r3, r3, #2
90000c86:	4298      	cmp	r0, r3
90000c88:	bf8c      	ite	hi
90000c8a:	2301      	movhi	r3, #1
90000c8c:	2300      	movls	r3, #0
90000c8e:	b2db      	uxtb	r3, r3
90000c90:	4019      	ands	r1, r3
90000c92:	4b53      	ldr	r3, [pc, #332]	@ (90000de0 <GetPosition+0x950>)
90000c94:	881b      	ldrh	r3, [r3, #0]
90000c96:	4618      	mov	r0, r3
90000c98:	4b52      	ldr	r3, [pc, #328]	@ (90000de4 <GetPosition+0x954>)
90000c9a:	681a      	ldr	r2, [r3, #0]
90000c9c:	4613      	mov	r3, r2
90000c9e:	005b      	lsls	r3, r3, #1
90000ca0:	4413      	add	r3, r2
90000ca2:	009b      	lsls	r3, r3, #2
90000ca4:	4413      	add	r3, r2
90000ca6:	4298      	cmp	r0, r3
90000ca8:	bf34      	ite	cc
90000caa:	2301      	movcc	r3, #1
90000cac:	2300      	movcs	r3, #0
90000cae:	b2db      	uxtb	r3, r3
90000cb0:	400b      	ands	r3, r1
90000cb2:	4a4a      	ldr	r2, [pc, #296]	@ (90000ddc <GetPosition+0x94c>)
90000cb4:	8812      	ldrh	r2, [r2, #0]
90000cb6:	f240 113f 	movw	r1, #319	@ 0x13f
90000cba:	428a      	cmp	r2, r1
90000cbc:	bf94      	ite	ls
90000cbe:	2201      	movls	r2, #1
90000cc0:	2200      	movhi	r2, #0
90000cc2:	b2d2      	uxtb	r2, r2
90000cc4:	4013      	ands	r3, r2
90000cc6:	2b00      	cmp	r3, #0
90000cc8:	d009      	beq.n	90000cde <GetPosition+0x84e>
    Radius = 2;
90000cca:	4b47      	ldr	r3, [pc, #284]	@ (90000de8 <GetPosition+0x958>)
90000ccc:	2202      	movs	r2, #2
90000cce:	601a      	str	r2, [r3, #0]
    Update_Size(Radius);
90000cd0:	4b45      	ldr	r3, [pc, #276]	@ (90000de8 <GetPosition+0x958>)
90000cd2:	681b      	ldr	r3, [r3, #0]
90000cd4:	b2db      	uxtb	r3, r3
90000cd6:	4618      	mov	r0, r3
90000cd8:	f000 fa4e 	bl	90001178 <Update_Size>
}
90000cdc:	e078      	b.n	90000dd0 <GetPosition+0x940>
  else if ((TS_State.TouchDetected) & (((x > (x_size-5) ) & (y > (12 * color_width)) & (y < (13 * color_width))) | (( x < 55 ) & ( y < 5 ))))
90000cde:	4b3e      	ldr	r3, [pc, #248]	@ (90000dd8 <GetPosition+0x948>)
90000ce0:	6819      	ldr	r1, [r3, #0]
90000ce2:	4b3e      	ldr	r3, [pc, #248]	@ (90000ddc <GetPosition+0x94c>)
90000ce4:	881b      	ldrh	r3, [r3, #0]
90000ce6:	461a      	mov	r2, r3
90000ce8:	4b40      	ldr	r3, [pc, #256]	@ (90000dec <GetPosition+0x95c>)
90000cea:	681b      	ldr	r3, [r3, #0]
90000cec:	3b05      	subs	r3, #5
90000cee:	429a      	cmp	r2, r3
90000cf0:	bf8c      	ite	hi
90000cf2:	2301      	movhi	r3, #1
90000cf4:	2300      	movls	r3, #0
90000cf6:	b2d8      	uxtb	r0, r3
90000cf8:	4b39      	ldr	r3, [pc, #228]	@ (90000de0 <GetPosition+0x950>)
90000cfa:	881b      	ldrh	r3, [r3, #0]
90000cfc:	461c      	mov	r4, r3
90000cfe:	4b39      	ldr	r3, [pc, #228]	@ (90000de4 <GetPosition+0x954>)
90000d00:	681a      	ldr	r2, [r3, #0]
90000d02:	4613      	mov	r3, r2
90000d04:	005b      	lsls	r3, r3, #1
90000d06:	4413      	add	r3, r2
90000d08:	009b      	lsls	r3, r3, #2
90000d0a:	429c      	cmp	r4, r3
90000d0c:	bf8c      	ite	hi
90000d0e:	2301      	movhi	r3, #1
90000d10:	2300      	movls	r3, #0
90000d12:	b2db      	uxtb	r3, r3
90000d14:	4003      	ands	r3, r0
90000d16:	b2db      	uxtb	r3, r3
90000d18:	4618      	mov	r0, r3
90000d1a:	4b31      	ldr	r3, [pc, #196]	@ (90000de0 <GetPosition+0x950>)
90000d1c:	881b      	ldrh	r3, [r3, #0]
90000d1e:	461c      	mov	r4, r3
90000d20:	4b30      	ldr	r3, [pc, #192]	@ (90000de4 <GetPosition+0x954>)
90000d22:	681a      	ldr	r2, [r3, #0]
90000d24:	4613      	mov	r3, r2
90000d26:	005b      	lsls	r3, r3, #1
90000d28:	4413      	add	r3, r2
90000d2a:	009b      	lsls	r3, r3, #2
90000d2c:	4413      	add	r3, r2
90000d2e:	429c      	cmp	r4, r3
90000d30:	bf34      	ite	cc
90000d32:	2301      	movcc	r3, #1
90000d34:	2300      	movcs	r3, #0
90000d36:	b2db      	uxtb	r3, r3
90000d38:	4003      	ands	r3, r0
90000d3a:	4a28      	ldr	r2, [pc, #160]	@ (90000ddc <GetPosition+0x94c>)
90000d3c:	8812      	ldrh	r2, [r2, #0]
90000d3e:	2a36      	cmp	r2, #54	@ 0x36
90000d40:	bf94      	ite	ls
90000d42:	2201      	movls	r2, #1
90000d44:	2200      	movhi	r2, #0
90000d46:	b2d0      	uxtb	r0, r2
90000d48:	4a25      	ldr	r2, [pc, #148]	@ (90000de0 <GetPosition+0x950>)
90000d4a:	8812      	ldrh	r2, [r2, #0]
90000d4c:	2a04      	cmp	r2, #4
90000d4e:	bf94      	ite	ls
90000d50:	2201      	movls	r2, #1
90000d52:	2200      	movhi	r2, #0
90000d54:	b2d2      	uxtb	r2, r2
90000d56:	4002      	ands	r2, r0
90000d58:	b2d2      	uxtb	r2, r2
90000d5a:	4313      	orrs	r3, r2
90000d5c:	400b      	ands	r3, r1
90000d5e:	2b00      	cmp	r3, #0
90000d60:	d006      	beq.n	90000d70 <GetPosition+0x8e0>
    TS_State.TouchX = 0;
90000d62:	4b1d      	ldr	r3, [pc, #116]	@ (90000dd8 <GetPosition+0x948>)
90000d64:	2200      	movs	r2, #0
90000d66:	605a      	str	r2, [r3, #4]
    TS_State.TouchY = 0;
90000d68:	4b1b      	ldr	r3, [pc, #108]	@ (90000dd8 <GetPosition+0x948>)
90000d6a:	2200      	movs	r2, #0
90000d6c:	609a      	str	r2, [r3, #8]
}
90000d6e:	e02f      	b.n	90000dd0 <GetPosition+0x940>
  else if ((TS_State.TouchDetected) & (x > 320) & (y > (y_size - 50)) & (x < 370) & (y < y_size ))
90000d70:	4b19      	ldr	r3, [pc, #100]	@ (90000dd8 <GetPosition+0x948>)
90000d72:	681b      	ldr	r3, [r3, #0]
90000d74:	4a19      	ldr	r2, [pc, #100]	@ (90000ddc <GetPosition+0x94c>)
90000d76:	8812      	ldrh	r2, [r2, #0]
90000d78:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
90000d7c:	bf8c      	ite	hi
90000d7e:	2201      	movhi	r2, #1
90000d80:	2200      	movls	r2, #0
90000d82:	b2d2      	uxtb	r2, r2
90000d84:	4013      	ands	r3, r2
90000d86:	4a16      	ldr	r2, [pc, #88]	@ (90000de0 <GetPosition+0x950>)
90000d88:	8812      	ldrh	r2, [r2, #0]
90000d8a:	4611      	mov	r1, r2
90000d8c:	4a18      	ldr	r2, [pc, #96]	@ (90000df0 <GetPosition+0x960>)
90000d8e:	6812      	ldr	r2, [r2, #0]
90000d90:	3a32      	subs	r2, #50	@ 0x32
90000d92:	4291      	cmp	r1, r2
90000d94:	bf8c      	ite	hi
90000d96:	2201      	movhi	r2, #1
90000d98:	2200      	movls	r2, #0
90000d9a:	b2d2      	uxtb	r2, r2
90000d9c:	4013      	ands	r3, r2
90000d9e:	4a0f      	ldr	r2, [pc, #60]	@ (90000ddc <GetPosition+0x94c>)
90000da0:	8812      	ldrh	r2, [r2, #0]
90000da2:	f240 1171 	movw	r1, #369	@ 0x171
90000da6:	428a      	cmp	r2, r1
90000da8:	bf94      	ite	ls
90000daa:	2201      	movls	r2, #1
90000dac:	2200      	movhi	r2, #0
90000dae:	b2d2      	uxtb	r2, r2
90000db0:	4013      	ands	r3, r2
90000db2:	4a0b      	ldr	r2, [pc, #44]	@ (90000de0 <GetPosition+0x950>)
90000db4:	8812      	ldrh	r2, [r2, #0]
90000db6:	4611      	mov	r1, r2
90000db8:	4a0d      	ldr	r2, [pc, #52]	@ (90000df0 <GetPosition+0x960>)
90000dba:	6812      	ldr	r2, [r2, #0]
90000dbc:	4291      	cmp	r1, r2
90000dbe:	bf34      	ite	cc
90000dc0:	2201      	movcc	r2, #1
90000dc2:	2200      	movcs	r2, #0
90000dc4:	b2d2      	uxtb	r2, r2
90000dc6:	4013      	ands	r3, r2
90000dc8:	2b00      	cmp	r3, #0
90000dca:	d001      	beq.n	90000dd0 <GetPosition+0x940>
    Save_Picture();
90000dcc:	f000 f832 	bl	90000e34 <Save_Picture>
}
90000dd0:	bf00      	nop
90000dd2:	3704      	adds	r7, #4
90000dd4:	46bd      	mov	sp, r7
90000dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000dd8:	20000aa0 	.word	0x20000aa0
90000ddc:	20000a94 	.word	0x20000a94
90000de0:	20000a96 	.word	0x20000a96
90000de4:	20000ab4 	.word	0x20000ab4
90000de8:	20000000 	.word	0x20000000
90000dec:	20000a98 	.word	0x20000a98
90000df0:	20000a9c 	.word	0x20000a9c

90000df4 <Draw_Menu>:
  * @brief  Draws the menu.
  * @param  None
  * @retval None
  */
static void Draw_Menu(void)
{ 
90000df4:	b580      	push	{r7, lr}
90000df6:	af00      	add	r7, sp, #0
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
90000df8:	2000      	movs	r0, #0
90000dfa:	f012 f9fd 	bl	900131f8 <UTIL_LCD_SetLayer>
  
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000dfe:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000e02:	f012 fb1f 	bl	90013444 <UTIL_LCD_Clear>
//  UTIL_LCD_FillCircle(145, (y_size - 24), 15,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(195, (y_size - 24), 10,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(245, (y_size - 24), 5,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(295, (y_size - 24), 2,UTIL_LCD_COLOR_WHITE);

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90000e06:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
90000e0a:	f012 fa13 	bl	90013234 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90000e0e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000e12:	f012 fa33 	bl	9001327c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90000e16:	4805      	ldr	r0, [pc, #20]	@ (90000e2c <Draw_Menu+0x38>)
90000e18:	f012 fa44 	bl	900132a4 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(10, 10, (uint8_t *)"Hello world!", LEFT_MODE);
90000e1c:	2303      	movs	r3, #3
90000e1e:	4a04      	ldr	r2, [pc, #16]	@ (90000e30 <Draw_Menu+0x3c>)
90000e20:	210a      	movs	r1, #10
90000e22:	200a      	movs	r0, #10
90000e24:	f012 fb5a 	bl	900134dc <UTIL_LCD_DisplayStringAt>
//  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
//  UTIL_LCD_FillRect(380, (y_size - 40), 30, 30, UTIL_LCD_COLOR_BLACK);
//  UTIL_LCD_FillCircle(450, (y_size- 24), Radius, UTIL_LCD_COLOR_BLACK);
}
90000e28:	bf00      	nop
90000e2a:	bd80      	pop	{r7, pc}
90000e2c:	2000006c 	.word	0x2000006c
90000e30:	90013ff0 	.word	0x90013ff0

90000e34 <Save_Picture>:
  * @brief  Save the picture in USB Disk.
  * @param  None
  * @retval None
  */
void Save_Picture(void)
{ 
90000e34:	b580      	push	{r7, lr}
90000e36:	b092      	sub	sp, #72	@ 0x48
90000e38:	af02      	add	r7, sp, #8
  FRESULT res1, res2;    /* FatFs function common result code */
  uint32_t byteswritten; /* File write count */
  uint32_t sourceAddress = LCD_LAYER_0_ADDRESS + ((x_size * (y_size - 61) + 60) * 4);
90000e3a:	4ba2      	ldr	r3, [pc, #648]	@ (900010c4 <Save_Picture+0x290>)
90000e3c:	681b      	ldr	r3, [r3, #0]
90000e3e:	3b3d      	subs	r3, #61	@ 0x3d
90000e40:	4aa1      	ldr	r2, [pc, #644]	@ (900010c8 <Save_Picture+0x294>)
90000e42:	6812      	ldr	r2, [r2, #0]
90000e44:	fb03 f202 	mul.w	r2, r3, r2
90000e48:	4ba0      	ldr	r3, [pc, #640]	@ (900010cc <Save_Picture+0x298>)
90000e4a:	4413      	add	r3, r2
90000e4c:	009b      	lsls	r3, r3, #2
90000e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t index = 0;
90000e50:	2300      	movs	r3, #0
90000e52:	637b      	str	r3, [r7, #52]	@ 0x34
   MX_LTDC_LayerConfig_t config; 
  /* Configure the DMA2D For ARGB8888 to RGB888 conversion */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
90000e54:	4b9e      	ldr	r3, [pc, #632]	@ (900010d0 <Save_Picture+0x29c>)
90000e56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90000e5a:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
90000e5c:	4b9c      	ldr	r3, [pc, #624]	@ (900010d0 <Save_Picture+0x29c>)
90000e5e:	2201      	movs	r2, #1
90000e60:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;     
90000e62:	4b9b      	ldr	r3, [pc, #620]	@ (900010d0 <Save_Picture+0x29c>)
90000e64:	2200      	movs	r2, #0
90000e66:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90000e68:	4b99      	ldr	r3, [pc, #612]	@ (900010d0 <Save_Picture+0x29c>)
90000e6a:	2200      	movs	r2, #0
90000e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
90000e6e:	4b98      	ldr	r3, [pc, #608]	@ (900010d0 <Save_Picture+0x29c>)
90000e70:	22ff      	movs	r2, #255	@ 0xff
90000e72:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d_discovery.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
90000e74:	4b96      	ldr	r3, [pc, #600]	@ (900010d0 <Save_Picture+0x29c>)
90000e76:	2200      	movs	r2, #0
90000e78:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
90000e7a:	4b95      	ldr	r3, [pc, #596]	@ (900010d0 <Save_Picture+0x29c>)
90000e7c:	2200      	movs	r2, #0
90000e7e:	645a      	str	r2, [r3, #68]	@ 0x44
 
  hdma2d_discovery.Instance = DMA2D;  
90000e80:	4b93      	ldr	r3, [pc, #588]	@ (900010d0 <Save_Picture+0x29c>)
90000e82:	4a94      	ldr	r2, [pc, #592]	@ (900010d4 <Save_Picture+0x2a0>)
90000e84:	601a      	str	r2, [r3, #0]
  config.X0          = 0;
90000e86:	2300      	movs	r3, #0
90000e88:	607b      	str	r3, [r7, #4]
  config.X1          = 480U;
90000e8a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90000e8e:	60bb      	str	r3, [r7, #8]
  config.Y0          = 0;
90000e90:	2300      	movs	r3, #0
90000e92:	60fb      	str	r3, [r7, #12]
  config.Y1          = 272U;
90000e94:	f44f 7388 	mov.w	r3, #272	@ 0x110
90000e98:	613b      	str	r3, [r7, #16]
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
90000e9a:	2300      	movs	r3, #0
90000e9c:	617b      	str	r3, [r7, #20]
  config.Address     = LCD_LAYER_1_ADDRESS;
90000e9e:	4b8e      	ldr	r3, [pc, #568]	@ (900010d8 <Save_Picture+0x2a4>)
90000ea0:	61bb      	str	r3, [r7, #24]
  BSP_LCD_ConfigLayer(0, 1, &config);
90000ea2:	1d3b      	adds	r3, r7, #4
90000ea4:	461a      	mov	r2, r3
90000ea6:	2101      	movs	r1, #1
90000ea8:	2000      	movs	r0, #0
90000eaa:	f002 fbd3 	bl	90003654 <BSP_LCD_ConfigLayer>
  BSP_LCD_SetActiveLayer(0,1);
90000eae:	2101      	movs	r1, #1
90000eb0:	2000      	movs	r0, #0
90000eb2:	f002 fc11 	bl	900036d8 <BSP_LCD_SetActiveLayer>
  UTIL_LCD_SetLayer(1);
90000eb6:	2001      	movs	r0, #1
90000eb8:	f012 f99e 	bl	900131f8 <UTIL_LCD_SetLayer>
  BSP_LCD_SetLayerVisible(0, 1, ENABLE);
90000ebc:	2201      	movs	r2, #1
90000ebe:	2101      	movs	r1, #1
90000ec0:	2000      	movs	r0, #0
90000ec2:	f002 fc27 	bl	90003714 <BSP_LCD_SetLayerVisible>
  BSP_LCD_SetColorKeying(0, 1,UTIL_LCD_COLOR_WHITE); 
90000ec6:	f04f 32ff 	mov.w	r2, #4294967295
90000eca:	2101      	movs	r1, #1
90000ecc:	2000      	movs	r0, #0
90000ece:	f002 fc75 	bl	900037bc <BSP_LCD_SetColorKeying>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
90000ed2:	f04f 30ff 	mov.w	r0, #4294967295
90000ed6:	f012 fab5 	bl	90013444 <UTIL_LCD_Clear>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKRED);
90000eda:	4880      	ldr	r0, [pc, #512]	@ (900010dc <Save_Picture+0x2a8>)
90000edc:	f012 f9aa 	bl	90013234 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font20);
90000ee0:	487f      	ldr	r0, [pc, #508]	@ (900010e0 <Save_Picture+0x2ac>)
90000ee2:	f012 f9df 	bl	900132a4 <UTIL_LCD_SetFont>
  
  /* Turn LED1 */
  BSP_LED_Off(LED1);
90000ee6:	2000      	movs	r0, #0
90000ee8:	f001 fdc4 	bl	90002a74 <BSP_LED_Off>
  
  if (Appli_state == APPLICATION_RUNNIG)
90000eec:	4b7d      	ldr	r3, [pc, #500]	@ (900010e4 <Save_Picture+0x2b0>)
90000eee:	781b      	ldrb	r3, [r3, #0]
90000ef0:	2b01      	cmp	r3, #1
90000ef2:	f040 80ce 	bne.w	90001092 <Save_Picture+0x25e>
  {
    UTIL_LCD_DisplayStringAt(10, (y_size-100), (uint8_t *)"Saving ...", RIGHT_MODE);
90000ef6:	4b73      	ldr	r3, [pc, #460]	@ (900010c4 <Save_Picture+0x290>)
90000ef8:	681b      	ldr	r3, [r3, #0]
90000efa:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
90000efe:	2302      	movs	r3, #2
90000f00:	4a79      	ldr	r2, [pc, #484]	@ (900010e8 <Save_Picture+0x2b4>)
90000f02:	200a      	movs	r0, #10
90000f04:	f012 faea 	bl	900134dc <UTIL_LCD_DisplayStringAt>
    HAL_DMA2D_Init(&hdma2d_discovery);
90000f08:	4871      	ldr	r0, [pc, #452]	@ (900010d0 <Save_Picture+0x29c>)
90000f0a:	f004 f82b 	bl	90004f64 <HAL_DMA2D_Init>
    HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1);
90000f0e:	2101      	movs	r1, #1
90000f10:	486f      	ldr	r0, [pc, #444]	@ (900010d0 <Save_Picture+0x29c>)
90000f12:	f004 f9a9 	bl	90005268 <HAL_DMA2D_ConfigLayer>
    /*##-2- Create and Open a new bmp file object with write access ##########*/
    if(f_open(&MyFile, "image.bmp", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
90000f16:	220a      	movs	r2, #10
90000f18:	4974      	ldr	r1, [pc, #464]	@ (900010ec <Save_Picture+0x2b8>)
90000f1a:	4875      	ldr	r0, [pc, #468]	@ (900010f0 <Save_Picture+0x2bc>)
90000f1c:	f00e fb14 	bl	9000f548 <f_open>
90000f20:	4603      	mov	r3, r0
90000f22:	2b00      	cmp	r3, #0
90000f24:	d002      	beq.n	90000f2c <Save_Picture+0xf8>
    {
      /* 'image.bmp' file Open for write Error */
      Error_Handler();
90000f26:	f000 f8f1 	bl	9000110c <Error_Handler>
    /* Disable the Layer 2 */
    BSP_LCD_SetLayerVisible(0,1, DISABLE);
    /* Select Layer 1 */
    UTIL_LCD_SetLayer(0);
  }
}
90000f2a:	e0c7      	b.n	900010bc <Save_Picture+0x288>
      res1 = f_write(&MyFile, (uint32_t *)aBMPHeader, 54, (void *)&byteswritten);        
90000f2c:	f107 031c 	add.w	r3, r7, #28
90000f30:	2236      	movs	r2, #54	@ 0x36
90000f32:	4970      	ldr	r1, [pc, #448]	@ (900010f4 <Save_Picture+0x2c0>)
90000f34:	486e      	ldr	r0, [pc, #440]	@ (900010f0 <Save_Picture+0x2bc>)
90000f36:	f00e fcd1 	bl	9000f8dc <f_write>
90000f3a:	4603      	mov	r3, r0
90000f3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      for(index=0; index < (y_size - 60); index++)
90000f40:	2300      	movs	r3, #0
90000f42:	637b      	str	r3, [r7, #52]	@ 0x34
90000f44:	e05f      	b.n	90001006 <Save_Picture+0x1d2>
        if (HAL_DMA2D_Start(&hdma2d_discovery, sourceAddress, CONVERTED_LINE_BUFFER, (x_size - 60), 1) == HAL_OK)
90000f46:	4b60      	ldr	r3, [pc, #384]	@ (900010c8 <Save_Picture+0x294>)
90000f48:	681b      	ldr	r3, [r3, #0]
90000f4a:	3b3c      	subs	r3, #60	@ 0x3c
90000f4c:	2201      	movs	r2, #1
90000f4e:	9200      	str	r2, [sp, #0]
90000f50:	f04f 5210 	mov.w	r2, #603979776	@ 0x24000000
90000f54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
90000f56:	485e      	ldr	r0, [pc, #376]	@ (900010d0 <Save_Picture+0x29c>)
90000f58:	f004 f872 	bl	90005040 <HAL_DMA2D_Start>
90000f5c:	4603      	mov	r3, r0
90000f5e:	2b00      	cmp	r3, #0
90000f60:	d103      	bne.n	90000f6a <Save_Picture+0x136>
          HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
90000f62:	210a      	movs	r1, #10
90000f64:	485a      	ldr	r0, [pc, #360]	@ (900010d0 <Save_Picture+0x29c>)
90000f66:	f004 f896 	bl	90005096 <HAL_DMA2D_PollForTransfer>
        SCB_InvalidateDCache_by_Addr((uint32_t *)CONVERTED_LINE_BUFFER, ((x_size-60)*3)); 
90000f6a:	4b57      	ldr	r3, [pc, #348]	@ (900010c8 <Save_Picture+0x294>)
90000f6c:	681a      	ldr	r2, [r3, #0]
90000f6e:	4613      	mov	r3, r2
90000f70:	005b      	lsls	r3, r3, #1
90000f72:	4413      	add	r3, r2
90000f74:	3bb4      	subs	r3, #180	@ 0xb4
90000f76:	461a      	mov	r2, r3
90000f78:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
90000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
90000f7e:	62ba      	str	r2, [r7, #40]	@ 0x28
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
90000f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000f82:	2b00      	cmp	r3, #0
90000f84:	dd1d      	ble.n	90000fc2 <Save_Picture+0x18e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
90000f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90000f88:	f003 021f 	and.w	r2, r3, #31
90000f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000f8e:	4413      	add	r3, r2
90000f90:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
90000f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90000f94:	623b      	str	r3, [r7, #32]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000f96:	f3bf 8f4f 	dsb	sy
}
90000f9a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
90000f9c:	4a56      	ldr	r2, [pc, #344]	@ (900010f8 <Save_Picture+0x2c4>)
90000f9e:	6a3b      	ldr	r3, [r7, #32]
90000fa0:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
90000fa4:	6a3b      	ldr	r3, [r7, #32]
90000fa6:	3320      	adds	r3, #32
90000fa8:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
90000faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90000fac:	3b20      	subs	r3, #32
90000fae:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
90000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90000fb2:	2b00      	cmp	r3, #0
90000fb4:	dcf2      	bgt.n	90000f9c <Save_Picture+0x168>
  __ASM volatile ("dsb 0xF":::"memory");
90000fb6:	f3bf 8f4f 	dsb	sy
}
90000fba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000fbc:	f3bf 8f6f 	isb	sy
}
90000fc0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
90000fc2:	bf00      	nop
        res2 = f_write(&MyFile, (uint32_t *)CONVERTED_LINE_BUFFER, ((x_size-60)*3), (void *)&byteswritten);
90000fc4:	4b40      	ldr	r3, [pc, #256]	@ (900010c8 <Save_Picture+0x294>)
90000fc6:	681a      	ldr	r2, [r3, #0]
90000fc8:	4613      	mov	r3, r2
90000fca:	005b      	lsls	r3, r3, #1
90000fcc:	4413      	add	r3, r2
90000fce:	f1a3 02b4 	sub.w	r2, r3, #180	@ 0xb4
90000fd2:	f107 031c 	add.w	r3, r7, #28
90000fd6:	f04f 5110 	mov.w	r1, #603979776	@ 0x24000000
90000fda:	4845      	ldr	r0, [pc, #276]	@ (900010f0 <Save_Picture+0x2bc>)
90000fdc:	f00e fc7e 	bl	9000f8dc <f_write>
90000fe0:	4603      	mov	r3, r0
90000fe2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if((res2 != FR_OK) || (byteswritten == 0))
90000fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
90000fea:	2b00      	cmp	r3, #0
90000fec:	d111      	bne.n	90001012 <Save_Picture+0x1de>
90000fee:	69fb      	ldr	r3, [r7, #28]
90000ff0:	2b00      	cmp	r3, #0
90000ff2:	d00e      	beq.n	90001012 <Save_Picture+0x1de>
        sourceAddress -= x_size*4;
90000ff4:	4b34      	ldr	r3, [pc, #208]	@ (900010c8 <Save_Picture+0x294>)
90000ff6:	681b      	ldr	r3, [r3, #0]
90000ff8:	009b      	lsls	r3, r3, #2
90000ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90000ffc:	1ad3      	subs	r3, r2, r3
90000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      for(index=0; index < (y_size - 60); index++)
90001000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001002:	3301      	adds	r3, #1
90001004:	637b      	str	r3, [r7, #52]	@ 0x34
90001006:	4b2f      	ldr	r3, [pc, #188]	@ (900010c4 <Save_Picture+0x290>)
90001008:	681b      	ldr	r3, [r3, #0]
9000100a:	3b3c      	subs	r3, #60	@ 0x3c
9000100c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
9000100e:	429a      	cmp	r2, r3
90001010:	d399      	bcc.n	90000f46 <Save_Picture+0x112>
      if((res1 != FR_OK) || (res2 != FR_OK) || (byteswritten == 0))
90001012:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
90001016:	2b00      	cmp	r3, #0
90001018:	d106      	bne.n	90001028 <Save_Picture+0x1f4>
9000101a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
9000101e:	2b00      	cmp	r3, #0
90001020:	d102      	bne.n	90001028 <Save_Picture+0x1f4>
90001022:	69fb      	ldr	r3, [r7, #28]
90001024:	2b00      	cmp	r3, #0
90001026:	d115      	bne.n	90001054 <Save_Picture+0x220>
        UTIL_LCD_DisplayStringAt(10, (y_size-100), (uint8_t *)" Aborted...", RIGHT_MODE);
90001028:	4b26      	ldr	r3, [pc, #152]	@ (900010c4 <Save_Picture+0x290>)
9000102a:	681b      	ldr	r3, [r3, #0]
9000102c:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
90001030:	2302      	movs	r3, #2
90001032:	4a32      	ldr	r2, [pc, #200]	@ (900010fc <Save_Picture+0x2c8>)
90001034:	200a      	movs	r0, #10
90001036:	f012 fa51 	bl	900134dc <UTIL_LCD_DisplayStringAt>
        HAL_Delay(2000);
9000103a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
9000103e:	f003 fdc9 	bl	90004bd4 <HAL_Delay>
        BSP_LCD_SetLayerVisible(0, 1, DISABLE);
90001042:	2200      	movs	r2, #0
90001044:	2101      	movs	r1, #1
90001046:	2000      	movs	r0, #0
90001048:	f002 fb64 	bl	90003714 <BSP_LCD_SetLayerVisible>
        UTIL_LCD_SetLayer(0);
9000104c:	2000      	movs	r0, #0
9000104e:	f012 f8d3 	bl	900131f8 <UTIL_LCD_SetLayer>
}
90001052:	e033      	b.n	900010bc <Save_Picture+0x288>
        f_close(&MyFile);
90001054:	4826      	ldr	r0, [pc, #152]	@ (900010f0 <Save_Picture+0x2bc>)
90001056:	f00e fe34 	bl	9000fcc2 <f_close>
        BSP_LED_On(LED1);
9000105a:	2000      	movs	r0, #0
9000105c:	f001 fcec 	bl	90002a38 <BSP_LED_On>
        UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKGREEN);
90001060:	4827      	ldr	r0, [pc, #156]	@ (90001100 <Save_Picture+0x2cc>)
90001062:	f012 f8e7 	bl	90013234 <UTIL_LCD_SetTextColor>
        UTIL_LCD_DisplayStringAt(10, (y_size-100), (uint8_t *)" Saved     ", RIGHT_MODE);
90001066:	4b17      	ldr	r3, [pc, #92]	@ (900010c4 <Save_Picture+0x290>)
90001068:	681b      	ldr	r3, [r3, #0]
9000106a:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
9000106e:	2302      	movs	r3, #2
90001070:	4a24      	ldr	r2, [pc, #144]	@ (90001104 <Save_Picture+0x2d0>)
90001072:	200a      	movs	r0, #10
90001074:	f012 fa32 	bl	900134dc <UTIL_LCD_DisplayStringAt>
        HAL_Delay(2000);
90001078:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
9000107c:	f003 fdaa 	bl	90004bd4 <HAL_Delay>
        BSP_LCD_SetLayerVisible(0, 1, DISABLE);
90001080:	2200      	movs	r2, #0
90001082:	2101      	movs	r1, #1
90001084:	2000      	movs	r0, #0
90001086:	f002 fb45 	bl	90003714 <BSP_LCD_SetLayerVisible>
        UTIL_LCD_SetLayer(0);
9000108a:	2000      	movs	r0, #0
9000108c:	f012 f8b4 	bl	900131f8 <UTIL_LCD_SetLayer>
}
90001090:	e014      	b.n	900010bc <Save_Picture+0x288>
    UTIL_LCD_DisplayStringAt(10, (y_size-100), (uint8_t *)"USB KO... ", RIGHT_MODE);
90001092:	4b0c      	ldr	r3, [pc, #48]	@ (900010c4 <Save_Picture+0x290>)
90001094:	681b      	ldr	r3, [r3, #0]
90001096:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
9000109a:	2302      	movs	r3, #2
9000109c:	4a1a      	ldr	r2, [pc, #104]	@ (90001108 <Save_Picture+0x2d4>)
9000109e:	200a      	movs	r0, #10
900010a0:	f012 fa1c 	bl	900134dc <UTIL_LCD_DisplayStringAt>
    HAL_Delay(2000);
900010a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
900010a8:	f003 fd94 	bl	90004bd4 <HAL_Delay>
    BSP_LCD_SetLayerVisible(0,1, DISABLE);
900010ac:	2200      	movs	r2, #0
900010ae:	2101      	movs	r1, #1
900010b0:	2000      	movs	r0, #0
900010b2:	f002 fb2f 	bl	90003714 <BSP_LCD_SetLayerVisible>
    UTIL_LCD_SetLayer(0);
900010b6:	2000      	movs	r0, #0
900010b8:	f012 f89e 	bl	900131f8 <UTIL_LCD_SetLayer>
}
900010bc:	bf00      	nop
900010be:	3740      	adds	r7, #64	@ 0x40
900010c0:	46bd      	mov	sp, r7
900010c2:	bd80      	pop	{r7, pc}
900010c4:	20000a9c 	.word	0x20000a9c
900010c8:	20000a98 	.word	0x20000a98
900010cc:	3400003c 	.word	0x3400003c
900010d0:	20000a2c 	.word	0x20000a2c
900010d4:	52001000 	.word	0x52001000
900010d8:	d0130000 	.word	0xd0130000
900010dc:	ff800000 	.word	0xff800000
900010e0:	20000074 	.word	0x20000074
900010e4:	20000ab0 	.word	0x20000ab0
900010e8:	90014000 	.word	0x90014000
900010ec:	9001400c 	.word	0x9001400c
900010f0:	200007f8 	.word	0x200007f8
900010f4:	90014088 	.word	0x90014088
900010f8:	e000ed00 	.word	0xe000ed00
900010fc:	90014018 	.word	0x90014018
90001100:	ff008000 	.word	0xff008000
90001104:	90014024 	.word	0x90014024
90001108:	90014030 	.word	0x90014030

9000110c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
9000110c:	b480      	push	{r7}
9000110e:	af00      	add	r7, sp, #0
  while(1)
90001110:	bf00      	nop
90001112:	e7fd      	b.n	90001110 <Error_Handler+0x4>

90001114 <Update_Color>:
  * @brief  Update the selected color
  * @param  None
  * @retval None
  */
static void Update_Color(void)
{
90001114:	b580      	push	{r7, lr}
90001116:	b082      	sub	sp, #8
90001118:	af02      	add	r7, sp, #8
  static uint32_t color;
  
  /* Get the current text color */
  color = UTIL_LCD_GetTextColor();
9000111a:	f012 f89f 	bl	9001325c <UTIL_LCD_GetTextColor>
9000111e:	4603      	mov	r3, r0
90001120:	4a13      	ldr	r2, [pc, #76]	@ (90001170 <Update_Color+0x5c>)
90001122:	6013      	str	r3, [r2, #0]
  /* Update the selected color icon */
  UTIL_LCD_FillRect(380, (y_size-40), 30, 30, color);
90001124:	4b13      	ldr	r3, [pc, #76]	@ (90001174 <Update_Color+0x60>)
90001126:	681b      	ldr	r3, [r3, #0]
90001128:	f1a3 0128 	sub.w	r1, r3, #40	@ 0x28
9000112c:	4b10      	ldr	r3, [pc, #64]	@ (90001170 <Update_Color+0x5c>)
9000112e:	681b      	ldr	r3, [r3, #0]
90001130:	9300      	str	r3, [sp, #0]
90001132:	231e      	movs	r3, #30
90001134:	221e      	movs	r2, #30
90001136:	f44f 70be 	mov.w	r0, #380	@ 0x17c
9000113a:	f012 fbb1 	bl	900138a0 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);    
9000113e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001142:	f012 f877 	bl	90013234 <UTIL_LCD_SetTextColor>
  UTIL_LCD_DrawRect(380, (y_size-40), 30, 30, color);
90001146:	4b0b      	ldr	r3, [pc, #44]	@ (90001174 <Update_Color+0x60>)
90001148:	681b      	ldr	r3, [r3, #0]
9000114a:	f1a3 0128 	sub.w	r1, r3, #40	@ 0x28
9000114e:	4b08      	ldr	r3, [pc, #32]	@ (90001170 <Update_Color+0x5c>)
90001150:	681b      	ldr	r3, [r3, #0]
90001152:	9300      	str	r3, [sp, #0]
90001154:	231e      	movs	r3, #30
90001156:	221e      	movs	r2, #30
90001158:	f44f 70be 	mov.w	r0, #380	@ 0x17c
9000115c:	f012 fa6c 	bl	90013638 <UTIL_LCD_DrawRect>
  UTIL_LCD_SetTextColor(color);  
90001160:	4b03      	ldr	r3, [pc, #12]	@ (90001170 <Update_Color+0x5c>)
90001162:	681b      	ldr	r3, [r3, #0]
90001164:	4618      	mov	r0, r3
90001166:	f012 f865 	bl	90013234 <UTIL_LCD_SetTextColor>
}
9000116a:	bf00      	nop
9000116c:	46bd      	mov	sp, r7
9000116e:	bd80      	pop	{r7, pc}
90001170:	20000abc 	.word	0x20000abc
90001174:	20000a9c 	.word	0x20000a9c

90001178 <Update_Size>:
  * @brief  Updates the selected size
  * @param  size: Size to be updated
  * @retval None
  */
static void Update_Size(uint8_t size)
{
90001178:	b580      	push	{r7, lr}
9000117a:	b082      	sub	sp, #8
9000117c:	af00      	add	r7, sp, #0
9000117e:	4603      	mov	r3, r0
90001180:	71fb      	strb	r3, [r7, #7]
  static uint32_t color;
  
  /* Get the current text color */ 
  color = UTIL_LCD_GetTextColor();
90001182:	f012 f86b 	bl	9001325c <UTIL_LCD_GetTextColor>
90001186:	4603      	mov	r3, r0
90001188:	4a1c      	ldr	r2, [pc, #112]	@ (900011fc <Update_Size+0x84>)
9000118a:	6013      	str	r3, [r2, #0]
  /* Update the selected size icon */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
9000118c:	f04f 30ff 	mov.w	r0, #4294967295
90001190:	f012 f850 	bl	90013234 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillCircle(450, (y_size-24), 20, UTIL_LCD_COLOR_WHITE);
90001194:	4b1a      	ldr	r3, [pc, #104]	@ (90001200 <Update_Size+0x88>)
90001196:	681b      	ldr	r3, [r3, #0]
90001198:	f1a3 0118 	sub.w	r1, r3, #24
9000119c:	f04f 33ff 	mov.w	r3, #4294967295
900011a0:	2214      	movs	r2, #20
900011a2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
900011a6:	f012 fbb5 	bl	90013914 <UTIL_LCD_FillCircle>
  UTIL_LCD_SetTextColor(color);  
900011aa:	4b14      	ldr	r3, [pc, #80]	@ (900011fc <Update_Size+0x84>)
900011ac:	681b      	ldr	r3, [r3, #0]
900011ae:	4618      	mov	r0, r3
900011b0:	f012 f840 	bl	90013234 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillCircle(450, (y_size-24), size, color );
900011b4:	4b12      	ldr	r3, [pc, #72]	@ (90001200 <Update_Size+0x88>)
900011b6:	681b      	ldr	r3, [r3, #0]
900011b8:	f1a3 0118 	sub.w	r1, r3, #24
900011bc:	79fa      	ldrb	r2, [r7, #7]
900011be:	4b0f      	ldr	r3, [pc, #60]	@ (900011fc <Update_Size+0x84>)
900011c0:	681b      	ldr	r3, [r3, #0]
900011c2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
900011c6:	f012 fba5 	bl	90013914 <UTIL_LCD_FillCircle>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);    
900011ca:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900011ce:	f012 f831 	bl	90013234 <UTIL_LCD_SetTextColor>
  UTIL_LCD_DrawCircle(450, (y_size-24), size, UTIL_LCD_COLOR_BLACK);
900011d2:	4b0b      	ldr	r3, [pc, #44]	@ (90001200 <Update_Size+0x88>)
900011d4:	681b      	ldr	r3, [r3, #0]
900011d6:	f1a3 0118 	sub.w	r1, r3, #24
900011da:	79fa      	ldrb	r2, [r7, #7]
900011dc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
900011e0:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
900011e4:	f012 fa52 	bl	9001368c <UTIL_LCD_DrawCircle>
  UTIL_LCD_SetTextColor(color);  
900011e8:	4b04      	ldr	r3, [pc, #16]	@ (900011fc <Update_Size+0x84>)
900011ea:	681b      	ldr	r3, [r3, #0]
900011ec:	4618      	mov	r0, r3
900011ee:	f012 f821 	bl	90013234 <UTIL_LCD_SetTextColor>
}
900011f2:	bf00      	nop
900011f4:	3708      	adds	r7, #8
900011f6:	46bd      	mov	sp, r7
900011f8:	bd80      	pop	{r7, pc}
900011fa:	bf00      	nop
900011fc:	20000ac0 	.word	0x20000ac0
90001200:	20000a9c 	.word	0x20000a9c

90001204 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90001204:	b580      	push	{r7, lr}
90001206:	b0ce      	sub	sp, #312	@ 0x138
90001208:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
9000120a:	2300      	movs	r3, #0
9000120c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90001210:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90001214:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90001218:	2200      	movs	r2, #0
9000121a:	601a      	str	r2, [r3, #0]
9000121c:	4b78      	ldr	r3, [pc, #480]	@ (90001400 <SystemClock_Config+0x1fc>)
9000121e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90001220:	4a77      	ldr	r2, [pc, #476]	@ (90001400 <SystemClock_Config+0x1fc>)
90001222:	f023 0301 	bic.w	r3, r3, #1
90001226:	62d3      	str	r3, [r2, #44]	@ 0x2c
90001228:	4b75      	ldr	r3, [pc, #468]	@ (90001400 <SystemClock_Config+0x1fc>)
9000122a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000122c:	f003 0201 	and.w	r2, r3, #1
90001230:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90001234:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90001238:	601a      	str	r2, [r3, #0]
9000123a:	4b72      	ldr	r3, [pc, #456]	@ (90001404 <SystemClock_Config+0x200>)
9000123c:	699b      	ldr	r3, [r3, #24]
9000123e:	4a71      	ldr	r2, [pc, #452]	@ (90001404 <SystemClock_Config+0x200>)
90001240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90001244:	6193      	str	r3, [r2, #24]
90001246:	4b6f      	ldr	r3, [pc, #444]	@ (90001404 <SystemClock_Config+0x200>)
90001248:	699b      	ldr	r3, [r3, #24]
9000124a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
9000124e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90001252:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90001256:	601a      	str	r2, [r3, #0]
90001258:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000125c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90001260:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90001262:	bf00      	nop
90001264:	4b67      	ldr	r3, [pc, #412]	@ (90001404 <SystemClock_Config+0x200>)
90001266:	699b      	ldr	r3, [r3, #24]
90001268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000126c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90001270:	d1f8      	bne.n	90001264 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90001272:	2301      	movs	r3, #1
90001274:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90001278:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
9000127c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90001280:	2300      	movs	r3, #0
90001282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90001286:	2300      	movs	r3, #0
90001288:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
9000128c:	2302      	movs	r3, #2
9000128e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90001292:	2302      	movs	r3, #2
90001294:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90001298:	2305      	movs	r3, #5
9000129a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
9000129e:	23a0      	movs	r3, #160	@ 0xa0
900012a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
900012a4:	2300      	movs	r3, #0
900012a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
900012aa:	2302      	movs	r3, #2
900012ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
900012b0:	2302      	movs	r3, #2
900012b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
900012b6:	2304      	movs	r3, #4
900012b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
900012bc:	2300      	movs	r3, #0
900012be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900012c2:	2308      	movs	r3, #8
900012c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
900012c8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
900012cc:	4618      	mov	r0, r3
900012ce:	f008 f837 	bl	90009340 <HAL_RCC_OscConfig>
900012d2:	4603      	mov	r3, r0
900012d4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
900012d8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
900012dc:	2b00      	cmp	r3, #0
900012de:	d001      	beq.n	900012e4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
900012e0:	f7ff ff14 	bl	9000110c <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
900012e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900012e8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
900012ec:	2205      	movs	r2, #5
900012ee:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
900012f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900012f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
900012f8:	2260      	movs	r2, #96	@ 0x60
900012fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
900012fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90001300:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90001304:	2202      	movs	r2, #2
90001306:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90001308:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000130c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90001310:	220a      	movs	r2, #10
90001312:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90001314:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90001318:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
9000131c:	2212      	movs	r2, #18
9000131e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90001320:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90001324:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90001328:	2200      	movs	r2, #0
9000132a:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
9000132c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90001330:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90001334:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90001338:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
9000133a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000133e:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90001342:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90001346:	f04f 0300 	mov.w	r3, #0
9000134a:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
9000134e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90001352:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90001356:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
9000135a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
9000135e:	f107 0308 	add.w	r3, r7, #8
90001362:	4618      	mov	r0, r3
90001364:	f008 ffbc 	bl	9000a2e0 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90001368:	233f      	movs	r3, #63	@ 0x3f
9000136a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000136e:	2303      	movs	r3, #3
90001370:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90001374:	2300      	movs	r3, #0
90001376:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
9000137a:	2308      	movs	r3, #8
9000137c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90001380:	2340      	movs	r3, #64	@ 0x40
90001382:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90001386:	2340      	movs	r3, #64	@ 0x40
90001388:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
9000138c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90001390:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90001394:	2340      	movs	r3, #64	@ 0x40
90001396:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
9000139a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
9000139e:	2104      	movs	r1, #4
900013a0:	4618      	mov	r0, r3
900013a2:	f008 fc27 	bl	90009bf4 <HAL_RCC_ClockConfig>
900013a6:	4603      	mov	r3, r0
900013a8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
900013ac:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
900013b0:	2b00      	cmp	r3, #0
900013b2:	d001      	beq.n	900013b8 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
900013b4:	f7ff feaa 	bl	9000110c <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
900013b8:	4b13      	ldr	r3, [pc, #76]	@ (90001408 <SystemClock_Config+0x204>)
900013ba:	681b      	ldr	r3, [r3, #0]
900013bc:	4a12      	ldr	r2, [pc, #72]	@ (90001408 <SystemClock_Config+0x204>)
900013be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900013c2:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
900013c4:	4b10      	ldr	r3, [pc, #64]	@ (90001408 <SystemClock_Config+0x204>)
900013c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900013ca:	4a0f      	ldr	r2, [pc, #60]	@ (90001408 <SystemClock_Config+0x204>)
900013cc:	f043 0302 	orr.w	r3, r3, #2
900013d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
900013d4:	4b0c      	ldr	r3, [pc, #48]	@ (90001408 <SystemClock_Config+0x204>)
900013d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900013da:	f003 0202 	and.w	r2, r3, #2
900013de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900013e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
900013e6:	601a      	str	r2, [r3, #0]
900013e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900013ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
900013f0:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
900013f2:	f003 fc1f 	bl	90004c34 <HAL_EnableCompensationCell>
}
900013f6:	bf00      	nop
900013f8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
900013fc:	46bd      	mov	sp, r7
900013fe:	bd80      	pop	{r7, pc}
90001400:	58000400 	.word	0x58000400
90001404:	58024800 	.word	0x58024800
90001408:	58024400 	.word	0x58024400

9000140c <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
9000140c:	b480      	push	{r7}
9000140e:	b085      	sub	sp, #20
90001410:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90001412:	4b34      	ldr	r3, [pc, #208]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
90001414:	695b      	ldr	r3, [r3, #20]
90001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000141a:	2b00      	cmp	r3, #0
9000141c:	d11b      	bne.n	90001456 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
9000141e:	f3bf 8f4f 	dsb	sy
}
90001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001424:	f3bf 8f6f 	isb	sy
}
90001428:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
9000142a:	4b2e      	ldr	r3, [pc, #184]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
9000142c:	2200      	movs	r2, #0
9000142e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90001432:	f3bf 8f4f 	dsb	sy
}
90001436:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001438:	f3bf 8f6f 	isb	sy
}
9000143c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
9000143e:	4b29      	ldr	r3, [pc, #164]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
90001440:	695b      	ldr	r3, [r3, #20]
90001442:	4a28      	ldr	r2, [pc, #160]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
90001444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90001448:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
9000144a:	f3bf 8f4f 	dsb	sy
}
9000144e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001450:	f3bf 8f6f 	isb	sy
}
90001454:	e000      	b.n	90001458 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90001456:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90001458:	4b22      	ldr	r3, [pc, #136]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
9000145a:	695b      	ldr	r3, [r3, #20]
9000145c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90001460:	2b00      	cmp	r3, #0
90001462:	d138      	bne.n	900014d6 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90001464:	4b1f      	ldr	r3, [pc, #124]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
90001466:	2200      	movs	r2, #0
90001468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
9000146c:	f3bf 8f4f 	dsb	sy
}
90001470:	bf00      	nop
    ccsidr = SCB->CCSIDR;
90001472:	4b1c      	ldr	r3, [pc, #112]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
90001474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90001478:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000147a:	68fb      	ldr	r3, [r7, #12]
9000147c:	0b5b      	lsrs	r3, r3, #13
9000147e:	f3c3 030e 	ubfx	r3, r3, #0, #15
90001482:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90001484:	68fb      	ldr	r3, [r7, #12]
90001486:	08db      	lsrs	r3, r3, #3
90001488:	f3c3 0309 	ubfx	r3, r3, #0, #10
9000148c:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000148e:	68bb      	ldr	r3, [r7, #8]
90001490:	015a      	lsls	r2, r3, #5
90001492:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90001496:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90001498:	687a      	ldr	r2, [r7, #4]
9000149a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000149c:	4911      	ldr	r1, [pc, #68]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
9000149e:	4313      	orrs	r3, r2
900014a0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
900014a4:	687b      	ldr	r3, [r7, #4]
900014a6:	1e5a      	subs	r2, r3, #1
900014a8:	607a      	str	r2, [r7, #4]
900014aa:	2b00      	cmp	r3, #0
900014ac:	d1ef      	bne.n	9000148e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
900014ae:	68bb      	ldr	r3, [r7, #8]
900014b0:	1e5a      	subs	r2, r3, #1
900014b2:	60ba      	str	r2, [r7, #8]
900014b4:	2b00      	cmp	r3, #0
900014b6:	d1e5      	bne.n	90001484 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
900014b8:	f3bf 8f4f 	dsb	sy
}
900014bc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900014be:	4b09      	ldr	r3, [pc, #36]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
900014c0:	695b      	ldr	r3, [r3, #20]
900014c2:	4a08      	ldr	r2, [pc, #32]	@ (900014e4 <CPU_CACHE_Enable+0xd8>)
900014c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900014c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900014ca:	f3bf 8f4f 	dsb	sy
}
900014ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900014d0:	f3bf 8f6f 	isb	sy
}
900014d4:	e000      	b.n	900014d8 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900014d6:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
900014d8:	bf00      	nop
900014da:	3714      	adds	r7, #20
900014dc:	46bd      	mov	sp, r7
900014de:	f85d 7b04 	ldr.w	r7, [sp], #4
900014e2:	4770      	bx	lr
900014e4:	e000ed00 	.word	0xe000ed00

900014e8 <CPU_CACHE_Disable>:

static void CPU_CACHE_Disable(void)
{
900014e8:	b480      	push	{r7}
900014ea:	b085      	sub	sp, #20
900014ec:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
900014ee:	f3bf 8f4f 	dsb	sy
}
900014f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900014f4:	f3bf 8f6f 	isb	sy
}
900014f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
900014fa:	4b28      	ldr	r3, [pc, #160]	@ (9000159c <CPU_CACHE_Disable+0xb4>)
900014fc:	695b      	ldr	r3, [r3, #20]
900014fe:	4a27      	ldr	r2, [pc, #156]	@ (9000159c <CPU_CACHE_Disable+0xb4>)
90001500:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
90001504:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90001506:	4b25      	ldr	r3, [pc, #148]	@ (9000159c <CPU_CACHE_Disable+0xb4>)
90001508:	2200      	movs	r2, #0
9000150a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000150e:	f3bf 8f4f 	dsb	sy
}
90001512:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001514:	f3bf 8f6f 	isb	sy
}
90001518:	bf00      	nop
}
9000151a:	bf00      	nop
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000151c:	4b1f      	ldr	r3, [pc, #124]	@ (9000159c <CPU_CACHE_Disable+0xb4>)
9000151e:	2200      	movs	r2, #0
90001520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90001524:	f3bf 8f4f 	dsb	sy
}
90001528:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
9000152a:	4b1c      	ldr	r3, [pc, #112]	@ (9000159c <CPU_CACHE_Disable+0xb4>)
9000152c:	695b      	ldr	r3, [r3, #20]
9000152e:	4a1b      	ldr	r2, [pc, #108]	@ (9000159c <CPU_CACHE_Disable+0xb4>)
90001530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90001534:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90001536:	f3bf 8f4f 	dsb	sy
}
9000153a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
9000153c:	4b17      	ldr	r3, [pc, #92]	@ (9000159c <CPU_CACHE_Disable+0xb4>)
9000153e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90001542:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90001544:	68fb      	ldr	r3, [r7, #12]
90001546:	0b5b      	lsrs	r3, r3, #13
90001548:	f3c3 030e 	ubfx	r3, r3, #0, #15
9000154c:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000154e:	68fb      	ldr	r3, [r7, #12]
90001550:	08db      	lsrs	r3, r3, #3
90001552:	f3c3 0309 	ubfx	r3, r3, #0, #10
90001556:	607b      	str	r3, [r7, #4]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001558:	68bb      	ldr	r3, [r7, #8]
9000155a:	015a      	lsls	r2, r3, #5
9000155c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90001560:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
90001562:	687a      	ldr	r2, [r7, #4]
90001564:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001566:	490d      	ldr	r1, [pc, #52]	@ (9000159c <CPU_CACHE_Disable+0xb4>)
90001568:	4313      	orrs	r3, r2
9000156a:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
9000156e:	687b      	ldr	r3, [r7, #4]
90001570:	1e5a      	subs	r2, r3, #1
90001572:	607a      	str	r2, [r7, #4]
90001574:	2b00      	cmp	r3, #0
90001576:	d1ef      	bne.n	90001558 <CPU_CACHE_Disable+0x70>
    } while(sets-- != 0U);
90001578:	68bb      	ldr	r3, [r7, #8]
9000157a:	1e5a      	subs	r2, r3, #1
9000157c:	60ba      	str	r2, [r7, #8]
9000157e:	2b00      	cmp	r3, #0
90001580:	d1e5      	bne.n	9000154e <CPU_CACHE_Disable+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
90001582:	f3bf 8f4f 	dsb	sy
}
90001586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001588:	f3bf 8f6f 	isb	sy
}
9000158c:	bf00      	nop
}
9000158e:	bf00      	nop
  /* Enable I-Cache */
  SCB_DisableICache();

  /* Enable D-Cache */
  SCB_DisableDCache();
}
90001590:	bf00      	nop
90001592:	3714      	adds	r7, #20
90001594:	46bd      	mov	sp, r7
90001596:	f85d 7b04 	ldr.w	r7, [sp], #4
9000159a:	4770      	bx	lr
9000159c:	e000ed00 	.word	0xe000ed00

900015a0 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
900015a0:	b580      	push	{r7, lr}
900015a2:	b082      	sub	sp, #8
900015a4:	af00      	add	r7, sp, #0
900015a6:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900015a8:	490e      	ldr	r1, [pc, #56]	@ (900015e4 <MX_LTDC_ClockConfig+0x44>)
900015aa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
900015ae:	f04f 0300 	mov.w	r3, #0
900015b2:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
900015b6:	4b0b      	ldr	r3, [pc, #44]	@ (900015e4 <MX_LTDC_ClockConfig+0x44>)
900015b8:	2205      	movs	r2, #5
900015ba:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
900015bc:	4b09      	ldr	r3, [pc, #36]	@ (900015e4 <MX_LTDC_ClockConfig+0x44>)
900015be:	22c0      	movs	r2, #192	@ 0xc0
900015c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
900015c2:	4b08      	ldr	r3, [pc, #32]	@ (900015e4 <MX_LTDC_ClockConfig+0x44>)
900015c4:	2202      	movs	r2, #2
900015c6:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
900015c8:	4b06      	ldr	r3, [pc, #24]	@ (900015e4 <MX_LTDC_ClockConfig+0x44>)
900015ca:	2214      	movs	r2, #20
900015cc:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
900015ce:	4b05      	ldr	r3, [pc, #20]	@ (900015e4 <MX_LTDC_ClockConfig+0x44>)
900015d0:	2263      	movs	r2, #99	@ 0x63
900015d2:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
900015d4:	4803      	ldr	r0, [pc, #12]	@ (900015e4 <MX_LTDC_ClockConfig+0x44>)
900015d6:	f008 fe83 	bl	9000a2e0 <HAL_RCCEx_PeriphCLKConfig>
900015da:	4603      	mov	r3, r0
}
900015dc:	4618      	mov	r0, r3
900015de:	3708      	adds	r7, #8
900015e0:	46bd      	mov	sp, r7
900015e2:	bd80      	pop	{r7, pc}
900015e4:	20000ac8 	.word	0x20000ac8

900015e8 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
900015e8:	b580      	push	{r7, lr}
900015ea:	b084      	sub	sp, #16
900015ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
900015ee:	f003 fc41 	bl	90004e74 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900015f2:	2301      	movs	r3, #1
900015f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
900015f6:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900015fa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900015fc:	2318      	movs	r3, #24
900015fe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90001600:	2303      	movs	r3, #3
90001602:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90001604:	2300      	movs	r3, #0
90001606:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90001608:	2301      	movs	r3, #1
9000160a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
9000160c:	2300      	movs	r3, #0
9000160e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90001610:	2301      	movs	r3, #1
90001612:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90001614:	2300      	movs	r3, #0
90001616:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90001618:	2300      	movs	r3, #0
9000161a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
9000161c:	2300      	movs	r3, #0
9000161e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001620:	463b      	mov	r3, r7
90001622:	4618      	mov	r0, r3
90001624:	f003 fc5e 	bl	90004ee4 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90001628:	2004      	movs	r0, #4
9000162a:	f003 fc3b 	bl	90004ea4 <HAL_MPU_Enable>
}
9000162e:	bf00      	nop
90001630:	3710      	adds	r7, #16
90001632:	46bd      	mov	sp, r7
90001634:	bd80      	pop	{r7, pc}

90001636 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90001636:	b480      	push	{r7}
90001638:	af00      	add	r7, sp, #0
}
9000163a:	bf00      	nop
9000163c:	46bd      	mov	sp, r7
9000163e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001642:	4770      	bx	lr

90001644 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90001644:	b480      	push	{r7}
90001646:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90001648:	bf00      	nop
9000164a:	e7fd      	b.n	90001648 <HardFault_Handler+0x4>

9000164c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
9000164c:	b480      	push	{r7}
9000164e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90001650:	bf00      	nop
90001652:	e7fd      	b.n	90001650 <MemManage_Handler+0x4>

90001654 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90001654:	b480      	push	{r7}
90001656:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90001658:	bf00      	nop
9000165a:	e7fd      	b.n	90001658 <BusFault_Handler+0x4>

9000165c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
9000165c:	b480      	push	{r7}
9000165e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90001660:	bf00      	nop
90001662:	e7fd      	b.n	90001660 <UsageFault_Handler+0x4>

90001664 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90001664:	b480      	push	{r7}
90001666:	af00      	add	r7, sp, #0
}
90001668:	bf00      	nop
9000166a:	46bd      	mov	sp, r7
9000166c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001670:	4770      	bx	lr

90001672 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90001672:	b480      	push	{r7}
90001674:	af00      	add	r7, sp, #0
}
90001676:	bf00      	nop
90001678:	46bd      	mov	sp, r7
9000167a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000167e:	4770      	bx	lr

90001680 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90001680:	b480      	push	{r7}
90001682:	af00      	add	r7, sp, #0
}
90001684:	bf00      	nop
90001686:	46bd      	mov	sp, r7
90001688:	f85d 7b04 	ldr.w	r7, [sp], #4
9000168c:	4770      	bx	lr

9000168e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
9000168e:	b580      	push	{r7, lr}
90001690:	af00      	add	r7, sp, #0
  HAL_IncTick();
90001692:	f003 fa7f 	bl	90004b94 <HAL_IncTick>
}
90001696:	bf00      	nop
90001698:	bd80      	pop	{r7, pc}
	...

9000169c <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
9000169c:	b580      	push	{r7, lr}
9000169e:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
900016a0:	4802      	ldr	r0, [pc, #8]	@ (900016ac <OTG_FS_IRQHandler+0x10>)
900016a2:	f004 fcdf 	bl	90006064 <HAL_HCD_IRQHandler>
}
900016a6:	bf00      	nop
900016a8:	bd80      	pop	{r7, pc}
900016aa:	bf00      	nop
900016ac:	20000b8c 	.word	0x20000b8c

900016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
900016b0:	b580      	push	{r7, lr}
900016b2:	b086      	sub	sp, #24
900016b4:	af00      	add	r7, sp, #0
900016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900016b8:	4a14      	ldr	r2, [pc, #80]	@ (9000170c <_sbrk+0x5c>)
900016ba:	4b15      	ldr	r3, [pc, #84]	@ (90001710 <_sbrk+0x60>)
900016bc:	1ad3      	subs	r3, r2, r3
900016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
900016c0:	697b      	ldr	r3, [r7, #20]
900016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
900016c4:	4b13      	ldr	r3, [pc, #76]	@ (90001714 <_sbrk+0x64>)
900016c6:	681b      	ldr	r3, [r3, #0]
900016c8:	2b00      	cmp	r3, #0
900016ca:	d102      	bne.n	900016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900016cc:	4b11      	ldr	r3, [pc, #68]	@ (90001714 <_sbrk+0x64>)
900016ce:	4a12      	ldr	r2, [pc, #72]	@ (90001718 <_sbrk+0x68>)
900016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900016d2:	4b10      	ldr	r3, [pc, #64]	@ (90001714 <_sbrk+0x64>)
900016d4:	681a      	ldr	r2, [r3, #0]
900016d6:	687b      	ldr	r3, [r7, #4]
900016d8:	4413      	add	r3, r2
900016da:	693a      	ldr	r2, [r7, #16]
900016dc:	429a      	cmp	r2, r3
900016de:	d207      	bcs.n	900016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
900016e0:	f012 fbf4 	bl	90013ecc <__errno>
900016e4:	4603      	mov	r3, r0
900016e6:	220c      	movs	r2, #12
900016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900016ea:	f04f 33ff 	mov.w	r3, #4294967295
900016ee:	e009      	b.n	90001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900016f0:	4b08      	ldr	r3, [pc, #32]	@ (90001714 <_sbrk+0x64>)
900016f2:	681b      	ldr	r3, [r3, #0]
900016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900016f6:	4b07      	ldr	r3, [pc, #28]	@ (90001714 <_sbrk+0x64>)
900016f8:	681a      	ldr	r2, [r3, #0]
900016fa:	687b      	ldr	r3, [r7, #4]
900016fc:	4413      	add	r3, r2
900016fe:	4a05      	ldr	r2, [pc, #20]	@ (90001714 <_sbrk+0x64>)
90001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001702:	68fb      	ldr	r3, [r7, #12]
}
90001704:	4618      	mov	r0, r3
90001706:	3718      	adds	r7, #24
90001708:	46bd      	mov	sp, r7
9000170a:	bd80      	pop	{r7, pc}
9000170c:	20020000 	.word	0x20020000
90001710:	00001000 	.word	0x00001000
90001714:	20000b88 	.word	0x20000b88
90001718:	20002070 	.word	0x20002070

9000171c <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef * hhcd)
{
9000171c:	b580      	push	{r7, lr}
9000171e:	b090      	sub	sp, #64	@ 0x40
90001720:	af00      	add	r7, sp, #0
90001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (hhcd->Instance == USB2_OTG_FS)
90001724:	687b      	ldr	r3, [r7, #4]
90001726:	681b      	ldr	r3, [r3, #0]
90001728:	4a9b      	ldr	r2, [pc, #620]	@ (90001998 <HAL_HCD_MspInit+0x27c>)
9000172a:	4293      	cmp	r3, r2
9000172c:	d15f      	bne.n	900017ee <HAL_HCD_MspInit+0xd2>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000172e:	4b9b      	ldr	r3, [pc, #620]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001734:	4a99      	ldr	r2, [pc, #612]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001736:	f043 0301 	orr.w	r3, r3, #1
9000173a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000173e:	4b97      	ldr	r3, [pc, #604]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001744:	f003 0301 	and.w	r3, r3, #1
90001748:	62bb      	str	r3, [r7, #40]	@ 0x28
9000174a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
9000174c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
90001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001752:	2302      	movs	r3, #2
90001754:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001756:	2300      	movs	r3, #0
90001758:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000175a:	2303      	movs	r3, #3
9000175c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_FS;
9000175e:	230a      	movs	r3, #10
90001760:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90001762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
90001766:	4619      	mov	r1, r3
90001768:	488d      	ldr	r0, [pc, #564]	@ (900019a0 <HAL_HCD_MspInit+0x284>)
9000176a:	f003 fed1 	bl	90005510 <HAL_GPIO_Init>

    /* Configure ID pin */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
9000176e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90001774:	2312      	movs	r3, #18
90001776:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
90001778:	2301      	movs	r3, #1
9000177a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_FS;
9000177c:	230a      	movs	r3, #10
9000177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90001780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
90001784:	4619      	mov	r1, r3
90001786:	4886      	ldr	r0, [pc, #536]	@ (900019a0 <HAL_HCD_MspInit+0x284>)
90001788:	f003 fec2 	bl	90005510 <HAL_GPIO_Init>

    /* Configure VBUS Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
9000178c:	f44f 7300 	mov.w	r3, #512	@ 0x200
90001790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90001792:	2300      	movs	r3, #0
90001794:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001796:	2300      	movs	r3, #0
90001798:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000179a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
9000179e:	4619      	mov	r1, r3
900017a0:	487f      	ldr	r0, [pc, #508]	@ (900019a0 <HAL_HCD_MspInit+0x284>)
900017a2:	f003 feb5 	bl	90005510 <HAL_GPIO_Init>

    /* Configure POWER_SWITCH pin */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
900017a6:	2320      	movs	r3, #32
900017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900017aa:	2301      	movs	r3, #1
900017ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900017ae:	2300      	movs	r3, #0
900017b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
900017b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
900017b6:	4619      	mov	r1, r3
900017b8:	4879      	ldr	r0, [pc, #484]	@ (900019a0 <HAL_HCD_MspInit+0x284>)
900017ba:	f003 fea9 	bl	90005510 <HAL_GPIO_Init>

    /* Enable USB FS Clocks */
    __HAL_RCC_USB2_OTG_FS_CLK_ENABLE();
900017be:	4b77      	ldr	r3, [pc, #476]	@ (9000199c <HAL_HCD_MspInit+0x280>)
900017c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
900017c4:	4a75      	ldr	r2, [pc, #468]	@ (9000199c <HAL_HCD_MspInit+0x280>)
900017c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
900017ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
900017ce:	4b73      	ldr	r3, [pc, #460]	@ (9000199c <HAL_HCD_MspInit+0x280>)
900017d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
900017d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900017d8:	627b      	str	r3, [r7, #36]	@ 0x24
900017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Set USBFS Interrupt priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
900017dc:	2200      	movs	r2, #0
900017de:	2106      	movs	r1, #6
900017e0:	2065      	movs	r0, #101	@ 0x65
900017e2:	f003 fb12 	bl	90004e0a <HAL_NVIC_SetPriority>

    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
900017e6:	2065      	movs	r0, #101	@ 0x65
900017e8:	f003 fb29 	bl	90004e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);

    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  }
}
900017ec:	e0d0      	b.n	90001990 <HAL_HCD_MspInit+0x274>
  else if (hhcd->Instance == USB1_OTG_HS)
900017ee:	687b      	ldr	r3, [r7, #4]
900017f0:	681b      	ldr	r3, [r3, #0]
900017f2:	4a6c      	ldr	r2, [pc, #432]	@ (900019a4 <HAL_HCD_MspInit+0x288>)
900017f4:	4293      	cmp	r3, r2
900017f6:	f040 80cb 	bne.w	90001990 <HAL_HCD_MspInit+0x274>
    __GPIOA_CLK_ENABLE();
900017fa:	4b68      	ldr	r3, [pc, #416]	@ (9000199c <HAL_HCD_MspInit+0x280>)
900017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001800:	4a66      	ldr	r2, [pc, #408]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001802:	f043 0301 	orr.w	r3, r3, #1
90001806:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000180a:	4b64      	ldr	r3, [pc, #400]	@ (9000199c <HAL_HCD_MspInit+0x280>)
9000180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001810:	f003 0301 	and.w	r3, r3, #1
90001814:	623b      	str	r3, [r7, #32]
90001816:	6a3b      	ldr	r3, [r7, #32]
    __GPIOB_CLK_ENABLE();
90001818:	4b60      	ldr	r3, [pc, #384]	@ (9000199c <HAL_HCD_MspInit+0x280>)
9000181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000181e:	4a5f      	ldr	r2, [pc, #380]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001820:	f043 0302 	orr.w	r3, r3, #2
90001824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001828:	4b5c      	ldr	r3, [pc, #368]	@ (9000199c <HAL_HCD_MspInit+0x280>)
9000182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000182e:	f003 0302 	and.w	r3, r3, #2
90001832:	61fb      	str	r3, [r7, #28]
90001834:	69fb      	ldr	r3, [r7, #28]
    __GPIOC_CLK_ENABLE();
90001836:	4b59      	ldr	r3, [pc, #356]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000183c:	4a57      	ldr	r2, [pc, #348]	@ (9000199c <HAL_HCD_MspInit+0x280>)
9000183e:	f043 0304 	orr.w	r3, r3, #4
90001842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001846:	4b55      	ldr	r3, [pc, #340]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000184c:	f003 0304 	and.w	r3, r3, #4
90001850:	61bb      	str	r3, [r7, #24]
90001852:	69bb      	ldr	r3, [r7, #24]
    __GPIOH_CLK_ENABLE();
90001854:	4b51      	ldr	r3, [pc, #324]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000185a:	4a50      	ldr	r2, [pc, #320]	@ (9000199c <HAL_HCD_MspInit+0x280>)
9000185c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001864:	4b4d      	ldr	r3, [pc, #308]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000186a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000186e:	617b      	str	r3, [r7, #20]
90001870:	697b      	ldr	r3, [r7, #20]
    __GPIOI_CLK_ENABLE();
90001872:	4b4a      	ldr	r3, [pc, #296]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001878:	4a48      	ldr	r2, [pc, #288]	@ (9000199c <HAL_HCD_MspInit+0x280>)
9000187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000187e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001882:	4b46      	ldr	r3, [pc, #280]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000188c:	613b      	str	r3, [r7, #16]
9000188e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
90001890:	2320      	movs	r3, #32
90001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001894:	2302      	movs	r3, #2
90001896:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001898:	2300      	movs	r3, #0
9000189a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000189c:	2303      	movs	r3, #3
9000189e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
900018a0:	230a      	movs	r3, #10
900018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
900018a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
900018a8:	4619      	mov	r1, r3
900018aa:	483d      	ldr	r0, [pc, #244]	@ (900019a0 <HAL_HCD_MspInit+0x284>)
900018ac:	f003 fe30 	bl	90005510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
900018b0:	2308      	movs	r3, #8
900018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900018b4:	2302      	movs	r3, #2
900018b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900018b8:	2300      	movs	r3, #0
900018ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900018bc:	2303      	movs	r3, #3
900018be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
900018c0:	230a      	movs	r3, #10
900018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
900018c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
900018c8:	4619      	mov	r1, r3
900018ca:	4835      	ldr	r0, [pc, #212]	@ (900019a0 <HAL_HCD_MspInit+0x284>)
900018cc:	f003 fe20 	bl	90005510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 |
900018d0:	f643 4323 	movw	r3, #15395	@ 0x3c23
900018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900018d6:	2302      	movs	r3, #2
900018d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900018da:	2300      	movs	r3, #0
900018dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
900018de:	230a      	movs	r3, #10
900018e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900018e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
900018e6:	4619      	mov	r1, r3
900018e8:	482f      	ldr	r0, [pc, #188]	@ (900019a8 <HAL_HCD_MspInit+0x28c>)
900018ea:	f003 fe11 	bl	90005510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
900018ee:	2301      	movs	r3, #1
900018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900018f2:	2302      	movs	r3, #2
900018f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900018f6:	2300      	movs	r3, #0
900018f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
900018fa:	230a      	movs	r3, #10
900018fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900018fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
90001902:	4619      	mov	r1, r3
90001904:	4829      	ldr	r0, [pc, #164]	@ (900019ac <HAL_HCD_MspInit+0x290>)
90001906:	f003 fe03 	bl	90005510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
9000190a:	2310      	movs	r3, #16
9000190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000190e:	2302      	movs	r3, #2
90001910:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001912:	2300      	movs	r3, #0
90001914:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
90001916:	230a      	movs	r3, #10
90001918:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000191a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
9000191e:	4619      	mov	r1, r3
90001920:	4823      	ldr	r0, [pc, #140]	@ (900019b0 <HAL_HCD_MspInit+0x294>)
90001922:	f003 fdf5 	bl	90005510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
90001926:	f44f 6300 	mov.w	r3, #2048	@ 0x800
9000192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000192c:	2302      	movs	r3, #2
9000192e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001930:	2300      	movs	r3, #0
90001932:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
90001934:	230a      	movs	r3, #10
90001936:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90001938:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
9000193c:	4619      	mov	r1, r3
9000193e:	481d      	ldr	r0, [pc, #116]	@ (900019b4 <HAL_HCD_MspInit+0x298>)
90001940:	f003 fde6 	bl	90005510 <HAL_GPIO_Init>
    __HAL_RCC_USB1_OTG_HS_ULPI_CLK_ENABLE();
90001944:	4b15      	ldr	r3, [pc, #84]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
9000194a:	4a14      	ldr	r2, [pc, #80]	@ (9000199c <HAL_HCD_MspInit+0x280>)
9000194c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90001950:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
90001954:	4b11      	ldr	r3, [pc, #68]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
9000195a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
9000195e:	60fb      	str	r3, [r7, #12]
90001960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB1_OTG_HS_CLK_ENABLE();
90001962:	4b0e      	ldr	r3, [pc, #56]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
90001968:	4a0c      	ldr	r2, [pc, #48]	@ (9000199c <HAL_HCD_MspInit+0x280>)
9000196a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
9000196e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
90001972:	4b0a      	ldr	r3, [pc, #40]	@ (9000199c <HAL_HCD_MspInit+0x280>)
90001974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
90001978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000197c:	60bb      	str	r3, [r7, #8]
9000197e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
90001980:	2200      	movs	r2, #0
90001982:	2106      	movs	r1, #6
90001984:	204d      	movs	r0, #77	@ 0x4d
90001986:	f003 fa40 	bl	90004e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000198a:	204d      	movs	r0, #77	@ 0x4d
9000198c:	f003 fa57 	bl	90004e3e <HAL_NVIC_EnableIRQ>
}
90001990:	bf00      	nop
90001992:	3740      	adds	r7, #64	@ 0x40
90001994:	46bd      	mov	sp, r7
90001996:	bd80      	pop	{r7, pc}
90001998:	40080000 	.word	0x40080000
9000199c:	58024400 	.word	0x58024400
900019a0:	58020000 	.word	0x58020000
900019a4:	40040000 	.word	0x40040000
900019a8:	58020400 	.word	0x58020400
900019ac:	58020800 	.word	0x58020800
900019b0:	58021c00 	.word	0x58021c00
900019b4:	58022000 	.word	0x58022000

900019b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
900019b8:	b580      	push	{r7, lr}
900019ba:	b082      	sub	sp, #8
900019bc:	af00      	add	r7, sp, #0
900019be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
900019c0:	687b      	ldr	r3, [r7, #4]
900019c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900019c6:	4618      	mov	r0, r3
900019c8:	f010 fbf3 	bl	900121b2 <USBH_LL_IncTimer>
}
900019cc:	bf00      	nop
900019ce:	3708      	adds	r7, #8
900019d0:	46bd      	mov	sp, r7
900019d2:	bd80      	pop	{r7, pc}

900019d4 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
900019d4:	b580      	push	{r7, lr}
900019d6:	b082      	sub	sp, #8
900019d8:	af00      	add	r7, sp, #0
900019da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
900019dc:	687b      	ldr	r3, [r7, #4]
900019de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900019e2:	4618      	mov	r0, r3
900019e4:	f010 fc2f 	bl	90012246 <USBH_LL_Connect>
}
900019e8:	bf00      	nop
900019ea:	3708      	adds	r7, #8
900019ec:	46bd      	mov	sp, r7
900019ee:	bd80      	pop	{r7, pc}

900019f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
900019f0:	b580      	push	{r7, lr}
900019f2:	b082      	sub	sp, #8
900019f4:	af00      	add	r7, sp, #0
900019f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
900019f8:	687b      	ldr	r3, [r7, #4]
900019fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900019fe:	4618      	mov	r0, r3
90001a00:	f010 fc38 	bl	90012274 <USBH_LL_Disconnect>
}
90001a04:	bf00      	nop
90001a06:	3708      	adds	r7, #8
90001a08:	46bd      	mov	sp, r7
90001a0a:	bd80      	pop	{r7, pc}

90001a0c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001a0c:	b580      	push	{r7, lr}
90001a0e:	b082      	sub	sp, #8
90001a10:	af00      	add	r7, sp, #0
90001a12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90001a14:	687b      	ldr	r3, [r7, #4]
90001a16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001a1a:	4618      	mov	r0, r3
90001a1c:	f010 fbf3 	bl	90012206 <USBH_LL_PortEnabled>
}
90001a20:	bf00      	nop
90001a22:	3708      	adds	r7, #8
90001a24:	46bd      	mov	sp, r7
90001a26:	bd80      	pop	{r7, pc}

90001a28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001a28:	b580      	push	{r7, lr}
90001a2a:	b082      	sub	sp, #8
90001a2c:	af00      	add	r7, sp, #0
90001a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90001a30:	687b      	ldr	r3, [r7, #4]
90001a32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001a36:	4618      	mov	r0, r3
90001a38:	f010 fbf3 	bl	90012222 <USBH_LL_PortDisabled>
}
90001a3c:	bf00      	nop
90001a3e:	3708      	adds	r7, #8
90001a40:	46bd      	mov	sp, r7
90001a42:	bd80      	pop	{r7, pc}

90001a44 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90001a44:	b480      	push	{r7}
90001a46:	b083      	sub	sp, #12
90001a48:	af00      	add	r7, sp, #0
90001a4a:	6078      	str	r0, [r7, #4]
90001a4c:	460b      	mov	r3, r1
90001a4e:	70fb      	strb	r3, [r7, #3]
90001a50:	4613      	mov	r3, r2
90001a52:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90001a54:	bf00      	nop
90001a56:	370c      	adds	r7, #12
90001a58:	46bd      	mov	sp, r7
90001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90001a5e:	4770      	bx	lr

90001a60 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef * phost)
{
90001a60:	b580      	push	{r7, lr}
90001a62:	b082      	sub	sp, #8
90001a64:	af00      	add	r7, sp, #0
90001a66:	6078      	str	r0, [r7, #4]
#ifdef USE_USB_FS
  /* Set the LL Driver parameters */
  hhcd.Instance = USB2_OTG_FS;
90001a68:	4b19      	ldr	r3, [pc, #100]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a6a:	4a1a      	ldr	r2, [pc, #104]	@ (90001ad4 <USBH_LL_Init+0x74>)
90001a6c:	601a      	str	r2, [r3, #0]
  hhcd.Init.Host_channels = 11;
90001a6e:	4b18      	ldr	r3, [pc, #96]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a70:	220b      	movs	r2, #11
90001a72:	715a      	strb	r2, [r3, #5]
  hhcd.Init.dma_enable = 0;
90001a74:	4b16      	ldr	r3, [pc, #88]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a76:	2200      	movs	r2, #0
90001a78:	719a      	strb	r2, [r3, #6]
  hhcd.Init.low_power_enable = 0;
90001a7a:	4b15      	ldr	r3, [pc, #84]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a7c:	2200      	movs	r2, #0
90001a7e:	72da      	strb	r2, [r3, #11]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED;
90001a80:	4b13      	ldr	r3, [pc, #76]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a82:	2202      	movs	r2, #2
90001a84:	725a      	strb	r2, [r3, #9]
  hhcd.Init.Sof_enable = 0;
90001a86:	4b12      	ldr	r3, [pc, #72]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a88:	2200      	movs	r2, #0
90001a8a:	729a      	strb	r2, [r3, #10]
  hhcd.Init.speed = HCD_SPEED_FULL;
90001a8c:	4b10      	ldr	r3, [pc, #64]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a8e:	2201      	movs	r2, #1
90001a90:	71da      	strb	r2, [r3, #7]
  hhcd.Init.vbus_sensing_enable = 0;
90001a92:	4b0f      	ldr	r3, [pc, #60]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a94:	2200      	movs	r2, #0
90001a96:	739a      	strb	r2, [r3, #14]
  hhcd.Init.lpm_enable = 0;
90001a98:	4b0d      	ldr	r3, [pc, #52]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001a9a:	2200      	movs	r2, #0
90001a9c:	731a      	strb	r2, [r3, #12]

  /* Link the driver to the stack */
  hhcd.pData = phost;
90001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001aa0:	687b      	ldr	r3, [r7, #4]
90001aa2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd;
90001aa6:	687b      	ldr	r3, [r7, #4]
90001aa8:	4a09      	ldr	r2, [pc, #36]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001aaa:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
90001aae:	4808      	ldr	r0, [pc, #32]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001ab0:	f004 f801 	bl	90005ab6 <HAL_HCD_Init>

  /* Initialize the LL driver */
  HAL_HCD_Init(&hhcd);

#endif                          /* USE_USB_HS */
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
90001ab4:	4806      	ldr	r0, [pc, #24]	@ (90001ad0 <USBH_LL_Init+0x70>)
90001ab6:	f004 fc5d 	bl	90006374 <HAL_HCD_GetCurrentFrame>
90001aba:	4603      	mov	r3, r0
90001abc:	4619      	mov	r1, r3
90001abe:	6878      	ldr	r0, [r7, #4]
90001ac0:	f010 fb68 	bl	90012194 <USBH_LL_SetTimer>

  return USBH_OK;
90001ac4:	2300      	movs	r3, #0
}
90001ac6:	4618      	mov	r0, r3
90001ac8:	3708      	adds	r7, #8
90001aca:	46bd      	mov	sp, r7
90001acc:	bd80      	pop	{r7, pc}
90001ace:	bf00      	nop
90001ad0:	20000b8c 	.word	0x20000b8c
90001ad4:	40080000 	.word	0x40080000

90001ad8 <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef * phost)
{
90001ad8:	b580      	push	{r7, lr}
90001ada:	b082      	sub	sp, #8
90001adc:	af00      	add	r7, sp, #0
90001ade:	6078      	str	r0, [r7, #4]
  HAL_HCD_Start(phost->pData);
90001ae0:	687b      	ldr	r3, [r7, #4]
90001ae2:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001ae6:	4618      	mov	r0, r3
90001ae8:	f004 fbcc 	bl	90006284 <HAL_HCD_Start>
  return USBH_OK;
90001aec:	2300      	movs	r3, #0
}
90001aee:	4618      	mov	r0, r3
90001af0:	3708      	adds	r7, #8
90001af2:	46bd      	mov	sp, r7
90001af4:	bd80      	pop	{r7, pc}

90001af6 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90001af6:	b580      	push	{r7, lr}
90001af8:	b082      	sub	sp, #8
90001afa:	af00      	add	r7, sp, #0
90001afc:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
90001afe:	687b      	ldr	r3, [r7, #4]
90001b00:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001b04:	4618      	mov	r0, r3
90001b06:	f004 fbe0 	bl	900062ca <HAL_HCD_Stop>
  return USBH_OK;
90001b0a:	2300      	movs	r3, #0
}
90001b0c:	4618      	mov	r0, r3
90001b0e:	3708      	adds	r7, #8
90001b10:	46bd      	mov	sp, r7
90001b12:	bd80      	pop	{r7, pc}

90001b14 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef * phost)
{
90001b14:	b580      	push	{r7, lr}
90001b16:	b084      	sub	sp, #16
90001b18:	af00      	add	r7, sp, #0
90001b1a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
90001b1c:	2301      	movs	r3, #1
90001b1e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
90001b20:	687b      	ldr	r3, [r7, #4]
90001b22:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001b26:	4618      	mov	r0, r3
90001b28:	f004 fc32 	bl	90006390 <HAL_HCD_GetCurrentSpeed>
90001b2c:	4603      	mov	r3, r0
90001b2e:	2b02      	cmp	r3, #2
90001b30:	d00c      	beq.n	90001b4c <USBH_LL_GetSpeed+0x38>
90001b32:	2b02      	cmp	r3, #2
90001b34:	d80d      	bhi.n	90001b52 <USBH_LL_GetSpeed+0x3e>
90001b36:	2b00      	cmp	r3, #0
90001b38:	d002      	beq.n	90001b40 <USBH_LL_GetSpeed+0x2c>
90001b3a:	2b01      	cmp	r3, #1
90001b3c:	d003      	beq.n	90001b46 <USBH_LL_GetSpeed+0x32>
90001b3e:	e008      	b.n	90001b52 <USBH_LL_GetSpeed+0x3e>
  {
  case 0:
    speed = USBH_SPEED_HIGH;
90001b40:	2300      	movs	r3, #0
90001b42:	73fb      	strb	r3, [r7, #15]
    break;
90001b44:	e008      	b.n	90001b58 <USBH_LL_GetSpeed+0x44>

  case 1:
    speed = USBH_SPEED_FULL;
90001b46:	2301      	movs	r3, #1
90001b48:	73fb      	strb	r3, [r7, #15]
    break;
90001b4a:	e005      	b.n	90001b58 <USBH_LL_GetSpeed+0x44>

  case 2:
    speed = USBH_SPEED_LOW;
90001b4c:	2302      	movs	r3, #2
90001b4e:	73fb      	strb	r3, [r7, #15]
    break;
90001b50:	e002      	b.n	90001b58 <USBH_LL_GetSpeed+0x44>

  default:
    speed = USBH_SPEED_FULL;
90001b52:	2301      	movs	r3, #1
90001b54:	73fb      	strb	r3, [r7, #15]
    break;
90001b56:	bf00      	nop
  }
  return speed;
90001b58:	7bfb      	ldrb	r3, [r7, #15]
}
90001b5a:	4618      	mov	r0, r3
90001b5c:	3710      	adds	r7, #16
90001b5e:	46bd      	mov	sp, r7
90001b60:	bd80      	pop	{r7, pc}

90001b62 <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef * phost)
{
90001b62:	b580      	push	{r7, lr}
90001b64:	b082      	sub	sp, #8
90001b66:	af00      	add	r7, sp, #0
90001b68:	6078      	str	r0, [r7, #4]
  HAL_HCD_ResetPort(phost->pData);
90001b6a:	687b      	ldr	r3, [r7, #4]
90001b6c:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001b70:	4618      	mov	r0, r3
90001b72:	f004 fbc7 	bl	90006304 <HAL_HCD_ResetPort>
  return USBH_OK;
90001b76:	2300      	movs	r3, #0
}
90001b78:	4618      	mov	r0, r3
90001b7a:	3708      	adds	r7, #8
90001b7c:	46bd      	mov	sp, r7
90001b7e:	bd80      	pop	{r7, pc}

90001b80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef * phost, uint8_t pipe)
{
90001b80:	b580      	push	{r7, lr}
90001b82:	b082      	sub	sp, #8
90001b84:	af00      	add	r7, sp, #0
90001b86:	6078      	str	r0, [r7, #4]
90001b88:	460b      	mov	r3, r1
90001b8a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
90001b8c:	687b      	ldr	r3, [r7, #4]
90001b8e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001b92:	78fa      	ldrb	r2, [r7, #3]
90001b94:	4611      	mov	r1, r2
90001b96:	4618      	mov	r0, r3
90001b98:	f004 fbd7 	bl	9000634a <HAL_HCD_HC_GetXferCount>
90001b9c:	4603      	mov	r3, r0
}
90001b9e:	4618      	mov	r0, r3
90001ba0:	3708      	adds	r7, #8
90001ba2:	46bd      	mov	sp, r7
90001ba4:	bd80      	pop	{r7, pc}

90001ba6 <USBH_LL_OpenPipe>:
                                    uint8_t pipe,
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type, uint16_t mps)
{
90001ba6:	b590      	push	{r4, r7, lr}
90001ba8:	b087      	sub	sp, #28
90001baa:	af04      	add	r7, sp, #16
90001bac:	6078      	str	r0, [r7, #4]
90001bae:	4608      	mov	r0, r1
90001bb0:	4611      	mov	r1, r2
90001bb2:	461a      	mov	r2, r3
90001bb4:	4603      	mov	r3, r0
90001bb6:	70fb      	strb	r3, [r7, #3]
90001bb8:	460b      	mov	r3, r1
90001bba:	70bb      	strb	r3, [r7, #2]
90001bbc:	4613      	mov	r3, r2
90001bbe:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_Init(phost->pData, pipe, epnum, dev_address, speed, ep_type, mps);
90001bc0:	687b      	ldr	r3, [r7, #4]
90001bc2:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	@ 0x4d0
90001bc6:	787c      	ldrb	r4, [r7, #1]
90001bc8:	78ba      	ldrb	r2, [r7, #2]
90001bca:	78f9      	ldrb	r1, [r7, #3]
90001bcc:	8c3b      	ldrh	r3, [r7, #32]
90001bce:	9302      	str	r3, [sp, #8]
90001bd0:	7f3b      	ldrb	r3, [r7, #28]
90001bd2:	9301      	str	r3, [sp, #4]
90001bd4:	7e3b      	ldrb	r3, [r7, #24]
90001bd6:	9300      	str	r3, [sp, #0]
90001bd8:	4623      	mov	r3, r4
90001bda:	f003 ffc9 	bl	90005b70 <HAL_HCD_HC_Init>
  return USBH_OK;
90001bde:	2300      	movs	r3, #0
}
90001be0:	4618      	mov	r0, r3
90001be2:	370c      	adds	r7, #12
90001be4:	46bd      	mov	sp, r7
90001be6:	bd90      	pop	{r4, r7, pc}

90001be8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef * phost, uint8_t pipe)
{
90001be8:	b580      	push	{r7, lr}
90001bea:	b082      	sub	sp, #8
90001bec:	af00      	add	r7, sp, #0
90001bee:	6078      	str	r0, [r7, #4]
90001bf0:	460b      	mov	r3, r1
90001bf2:	70fb      	strb	r3, [r7, #3]
  HAL_HCD_HC_Halt(phost->pData, pipe);
90001bf4:	687b      	ldr	r3, [r7, #4]
90001bf6:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001bfa:	78fa      	ldrb	r2, [r7, #3]
90001bfc:	4611      	mov	r1, r2
90001bfe:	4618      	mov	r0, r3
90001c00:	f004 f86e 	bl	90005ce0 <HAL_HCD_HC_Halt>
  return USBH_OK;
90001c04:	2300      	movs	r3, #0
}
90001c06:	4618      	mov	r0, r3
90001c08:	3708      	adds	r7, #8
90001c0a:	46bd      	mov	sp, r7
90001c0c:	bd80      	pop	{r7, pc}

90001c0e <USBH_LL_SubmitURB>:
                                     uint8_t direction,
                                     uint8_t ep_type,
                                     uint8_t token,
                                     uint8_t * pbuff,
                                     uint16_t length, uint8_t do_ping)
{
90001c0e:	b590      	push	{r4, r7, lr}
90001c10:	b087      	sub	sp, #28
90001c12:	af04      	add	r7, sp, #16
90001c14:	6078      	str	r0, [r7, #4]
90001c16:	4608      	mov	r0, r1
90001c18:	4611      	mov	r1, r2
90001c1a:	461a      	mov	r2, r3
90001c1c:	4603      	mov	r3, r0
90001c1e:	70fb      	strb	r3, [r7, #3]
90001c20:	460b      	mov	r3, r1
90001c22:	70bb      	strb	r3, [r7, #2]
90001c24:	4613      	mov	r3, r2
90001c26:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_SubmitRequest(phost->pData,
90001c28:	687b      	ldr	r3, [r7, #4]
90001c2a:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	@ 0x4d0
90001c2e:	787c      	ldrb	r4, [r7, #1]
90001c30:	78ba      	ldrb	r2, [r7, #2]
90001c32:	78f9      	ldrb	r1, [r7, #3]
90001c34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
90001c38:	9303      	str	r3, [sp, #12]
90001c3a:	8c3b      	ldrh	r3, [r7, #32]
90001c3c:	9302      	str	r3, [sp, #8]
90001c3e:	69fb      	ldr	r3, [r7, #28]
90001c40:	9301      	str	r3, [sp, #4]
90001c42:	7e3b      	ldrb	r3, [r7, #24]
90001c44:	9300      	str	r3, [sp, #0]
90001c46:	4623      	mov	r3, r4
90001c48:	f004 f86e 	bl	90005d28 <HAL_HCD_HC_SubmitRequest>
                           pipe,
                           direction, ep_type, token, pbuff, length, do_ping);
  return USBH_OK;
90001c4c:	2300      	movs	r3, #0
}
90001c4e:	4618      	mov	r0, r3
90001c50:	370c      	adds	r7, #12
90001c52:	46bd      	mov	sp, r7
90001c54:	bd90      	pop	{r4, r7, pc}

90001c56 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef * phost,
                                         uint8_t pipe)
{
90001c56:	b580      	push	{r7, lr}
90001c58:	b082      	sub	sp, #8
90001c5a:	af00      	add	r7, sp, #0
90001c5c:	6078      	str	r0, [r7, #4]
90001c5e:	460b      	mov	r3, r1
90001c60:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef) HAL_HCD_HC_GetURBState(phost->pData, pipe);
90001c62:	687b      	ldr	r3, [r7, #4]
90001c64:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001c68:	78fa      	ldrb	r2, [r7, #3]
90001c6a:	4611      	mov	r1, r2
90001c6c:	4618      	mov	r0, r3
90001c6e:	f004 fb57 	bl	90006320 <HAL_HCD_HC_GetURBState>
90001c72:	4603      	mov	r3, r0
}
90001c74:	4618      	mov	r0, r3
90001c76:	3708      	adds	r7, #8
90001c78:	46bd      	mov	sp, r7
90001c7a:	bd80      	pop	{r7, pc}

90001c7c <USBH_LL_DriverVBUS>:
  *           0: VBUS Active
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef * phost, uint8_t state)
{
90001c7c:	b580      	push	{r7, lr}
90001c7e:	b082      	sub	sp, #8
90001c80:	af00      	add	r7, sp, #0
90001c82:	6078      	str	r0, [r7, #4]
90001c84:	460b      	mov	r3, r1
90001c86:	70fb      	strb	r3, [r7, #3]
  #ifdef USE_USB_FS
  if(state == 0)
90001c88:	78fb      	ldrb	r3, [r7, #3]
90001c8a:	2b00      	cmp	r3, #0
90001c8c:	d105      	bne.n	90001c9a <USBH_LL_DriverVBUS+0x1e>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
90001c8e:	2200      	movs	r2, #0
90001c90:	2120      	movs	r1, #32
90001c92:	4808      	ldr	r0, [pc, #32]	@ (90001cb4 <USBH_LL_DriverVBUS+0x38>)
90001c94:	f003 fef6 	bl	90005a84 <HAL_GPIO_WritePin>
90001c98:	e004      	b.n	90001ca4 <USBH_LL_DriverVBUS+0x28>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
90001c9a:	2201      	movs	r2, #1
90001c9c:	2120      	movs	r1, #32
90001c9e:	4805      	ldr	r0, [pc, #20]	@ (90001cb4 <USBH_LL_DriverVBUS+0x38>)
90001ca0:	f003 fef0 	bl	90005a84 <HAL_GPIO_WritePin>
  }
#endif
  HAL_Delay(200);
90001ca4:	20c8      	movs	r0, #200	@ 0xc8
90001ca6:	f002 ff95 	bl	90004bd4 <HAL_Delay>

  return USBH_OK;
90001caa:	2300      	movs	r3, #0
}
90001cac:	4618      	mov	r0, r3
90001cae:	3708      	adds	r7, #8
90001cb0:	46bd      	mov	sp, r7
90001cb2:	bd80      	pop	{r7, pc}
90001cb4:	58020000 	.word	0x58020000

90001cb8 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef * phost, uint8_t pipe,
                                     uint8_t toggle)
{
90001cb8:	b480      	push	{r7}
90001cba:	b083      	sub	sp, #12
90001cbc:	af00      	add	r7, sp, #0
90001cbe:	6078      	str	r0, [r7, #4]
90001cc0:	460b      	mov	r3, r1
90001cc2:	70fb      	strb	r3, [r7, #3]
90001cc4:	4613      	mov	r3, r2
90001cc6:	70bb      	strb	r3, [r7, #2]
  if (hhcd.hc[pipe].ep_is_in)
90001cc8:	78fa      	ldrb	r2, [r7, #3]
90001cca:	4913      	ldr	r1, [pc, #76]	@ (90001d18 <USBH_LL_SetToggle+0x60>)
90001ccc:	4613      	mov	r3, r2
90001cce:	011b      	lsls	r3, r3, #4
90001cd0:	1a9b      	subs	r3, r3, r2
90001cd2:	009b      	lsls	r3, r3, #2
90001cd4:	440b      	add	r3, r1
90001cd6:	3317      	adds	r3, #23
90001cd8:	781b      	ldrb	r3, [r3, #0]
90001cda:	2b00      	cmp	r3, #0
90001cdc:	d00a      	beq.n	90001cf4 <USBH_LL_SetToggle+0x3c>
  {
    hhcd.hc[pipe].toggle_in = toggle;
90001cde:	78fa      	ldrb	r2, [r7, #3]
90001ce0:	490d      	ldr	r1, [pc, #52]	@ (90001d18 <USBH_LL_SetToggle+0x60>)
90001ce2:	4613      	mov	r3, r2
90001ce4:	011b      	lsls	r3, r3, #4
90001ce6:	1a9b      	subs	r3, r3, r2
90001ce8:	009b      	lsls	r3, r3, #2
90001cea:	440b      	add	r3, r1
90001cec:	333c      	adds	r3, #60	@ 0x3c
90001cee:	78ba      	ldrb	r2, [r7, #2]
90001cf0:	701a      	strb	r2, [r3, #0]
90001cf2:	e009      	b.n	90001d08 <USBH_LL_SetToggle+0x50>
  }
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
90001cf4:	78fa      	ldrb	r2, [r7, #3]
90001cf6:	4908      	ldr	r1, [pc, #32]	@ (90001d18 <USBH_LL_SetToggle+0x60>)
90001cf8:	4613      	mov	r3, r2
90001cfa:	011b      	lsls	r3, r3, #4
90001cfc:	1a9b      	subs	r3, r3, r2
90001cfe:	009b      	lsls	r3, r3, #2
90001d00:	440b      	add	r3, r1
90001d02:	333d      	adds	r3, #61	@ 0x3d
90001d04:	78ba      	ldrb	r2, [r7, #2]
90001d06:	701a      	strb	r2, [r3, #0]
  }
  return USBH_OK;
90001d08:	2300      	movs	r3, #0
}
90001d0a:	4618      	mov	r0, r3
90001d0c:	370c      	adds	r7, #12
90001d0e:	46bd      	mov	sp, r7
90001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
90001d14:	4770      	bx	lr
90001d16:	bf00      	nop
90001d18:	20000b8c 	.word	0x20000b8c

90001d1c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef * phost, uint8_t pipe)
{
90001d1c:	b480      	push	{r7}
90001d1e:	b085      	sub	sp, #20
90001d20:	af00      	add	r7, sp, #0
90001d22:	6078      	str	r0, [r7, #4]
90001d24:	460b      	mov	r3, r1
90001d26:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
90001d28:	2300      	movs	r3, #0
90001d2a:	73fb      	strb	r3, [r7, #15]

  if (hhcd.hc[pipe].ep_is_in)
90001d2c:	78fa      	ldrb	r2, [r7, #3]
90001d2e:	4913      	ldr	r1, [pc, #76]	@ (90001d7c <USBH_LL_GetToggle+0x60>)
90001d30:	4613      	mov	r3, r2
90001d32:	011b      	lsls	r3, r3, #4
90001d34:	1a9b      	subs	r3, r3, r2
90001d36:	009b      	lsls	r3, r3, #2
90001d38:	440b      	add	r3, r1
90001d3a:	3317      	adds	r3, #23
90001d3c:	781b      	ldrb	r3, [r3, #0]
90001d3e:	2b00      	cmp	r3, #0
90001d40:	d00a      	beq.n	90001d58 <USBH_LL_GetToggle+0x3c>
  {
    toggle = hhcd.hc[pipe].toggle_in;
90001d42:	78fa      	ldrb	r2, [r7, #3]
90001d44:	490d      	ldr	r1, [pc, #52]	@ (90001d7c <USBH_LL_GetToggle+0x60>)
90001d46:	4613      	mov	r3, r2
90001d48:	011b      	lsls	r3, r3, #4
90001d4a:	1a9b      	subs	r3, r3, r2
90001d4c:	009b      	lsls	r3, r3, #2
90001d4e:	440b      	add	r3, r1
90001d50:	333c      	adds	r3, #60	@ 0x3c
90001d52:	781b      	ldrb	r3, [r3, #0]
90001d54:	73fb      	strb	r3, [r7, #15]
90001d56:	e009      	b.n	90001d6c <USBH_LL_GetToggle+0x50>
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
90001d58:	78fa      	ldrb	r2, [r7, #3]
90001d5a:	4908      	ldr	r1, [pc, #32]	@ (90001d7c <USBH_LL_GetToggle+0x60>)
90001d5c:	4613      	mov	r3, r2
90001d5e:	011b      	lsls	r3, r3, #4
90001d60:	1a9b      	subs	r3, r3, r2
90001d62:	009b      	lsls	r3, r3, #2
90001d64:	440b      	add	r3, r1
90001d66:	333d      	adds	r3, #61	@ 0x3d
90001d68:	781b      	ldrb	r3, [r3, #0]
90001d6a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
90001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
90001d6e:	4618      	mov	r0, r3
90001d70:	3714      	adds	r7, #20
90001d72:	46bd      	mov	sp, r7
90001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
90001d78:	4770      	bx	lr
90001d7a:	bf00      	nop
90001d7c:	20000b8c 	.word	0x20000b8c

90001d80 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
90001d80:	b580      	push	{r7, lr}
90001d82:	b082      	sub	sp, #8
90001d84:	af00      	add	r7, sp, #0
90001d86:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1)
  osDelay(Delay);
#else
  HAL_Delay(Delay);
90001d88:	6878      	ldr	r0, [r7, #4]
90001d8a:	f002 ff23 	bl	90004bd4 <HAL_Delay>
#endif
}
90001d8e:	bf00      	nop
90001d90:	3708      	adds	r7, #8
90001d92:	46bd      	mov	sp, r7
90001d94:	bd80      	pop	{r7, pc}

90001d96 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
90001d96:	b480      	push	{r7}
90001d98:	b083      	sub	sp, #12
90001d9a:	af00      	add	r7, sp, #0
90001d9c:	4603      	mov	r3, r0
90001d9e:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
90001da0:	2300      	movs	r3, #0
}
90001da2:	4618      	mov	r0, r3
90001da4:	370c      	adds	r7, #12
90001da6:	46bd      	mov	sp, r7
90001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
90001dac:	4770      	bx	lr
	...

90001db0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
90001db0:	b580      	push	{r7, lr}
90001db2:	b084      	sub	sp, #16
90001db4:	af00      	add	r7, sp, #0
90001db6:	4603      	mov	r3, r0
90001db8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
90001dba:	2301      	movs	r3, #1
90001dbc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
90001dbe:	79fb      	ldrb	r3, [r7, #7]
90001dc0:	4619      	mov	r1, r3
90001dc2:	4808      	ldr	r0, [pc, #32]	@ (90001de4 <USBH_status+0x34>)
90001dc4:	f00e fe61 	bl	90010a8a <USBH_MSC_UnitIsReady>
90001dc8:	4603      	mov	r3, r0
90001dca:	2b00      	cmp	r3, #0
90001dcc:	d002      	beq.n	90001dd4 <USBH_status+0x24>
  {
    res = RES_OK;
90001dce:	2300      	movs	r3, #0
90001dd0:	73fb      	strb	r3, [r7, #15]
90001dd2:	e001      	b.n	90001dd8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
90001dd4:	2301      	movs	r3, #1
90001dd6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
90001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
90001dda:	4618      	mov	r0, r3
90001ddc:	3710      	adds	r7, #16
90001dde:	46bd      	mov	sp, r7
90001de0:	bd80      	pop	{r7, pc}
90001de2:	bf00      	nop
90001de4:	200000ec 	.word	0x200000ec

90001de8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
90001de8:	b580      	push	{r7, lr}
90001dea:	b094      	sub	sp, #80	@ 0x50
90001dec:	af02      	add	r7, sp, #8
90001dee:	60b9      	str	r1, [r7, #8]
90001df0:	607a      	str	r2, [r7, #4]
90001df2:	603b      	str	r3, [r7, #0]
90001df4:	4603      	mov	r3, r0
90001df6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
90001df8:	2301      	movs	r3, #1
90001dfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
90001dfe:	2300      	movs	r3, #0
90001e00:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (((DWORD)buff & 3) || (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
90001e04:	68bb      	ldr	r3, [r7, #8]
90001e06:	f003 0303 	and.w	r3, r3, #3
90001e0a:	2b00      	cmp	r3, #0
90001e0c:	d121      	bne.n	90001e52 <USBH_read+0x6a>
90001e0e:	4b30      	ldr	r3, [pc, #192]	@ (90001ed0 <USBH_read+0xe8>)
90001e10:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001e14:	799b      	ldrb	r3, [r3, #6]
90001e16:	2b00      	cmp	r3, #0
90001e18:	d027      	beq.n	90001e6a <USBH_read+0x82>
  {
    while ((count--)&&(status == USBH_OK))
90001e1a:	e01a      	b.n	90001e52 <USBH_read+0x6a>
    {
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
90001e1c:	687a      	ldr	r2, [r7, #4]
90001e1e:	683b      	ldr	r3, [r7, #0]
90001e20:	441a      	add	r2, r3
90001e22:	7bf9      	ldrb	r1, [r7, #15]
90001e24:	2301      	movs	r3, #1
90001e26:	9300      	str	r3, [sp, #0]
90001e28:	4b2a      	ldr	r3, [pc, #168]	@ (90001ed4 <USBH_read+0xec>)
90001e2a:	4829      	ldr	r0, [pc, #164]	@ (90001ed0 <USBH_read+0xe8>)
90001e2c:	f00e fe81 	bl	90010b32 <USBH_MSC_Read>
90001e30:	4603      	mov	r3, r0
90001e32:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

      if(status == USBH_OK)
90001e36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
90001e3a:	2b00      	cmp	r3, #0
90001e3c:	d113      	bne.n	90001e66 <USBH_read+0x7e>
      {
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
90001e3e:	683b      	ldr	r3, [r7, #0]
90001e40:	025b      	lsls	r3, r3, #9
90001e42:	68ba      	ldr	r2, [r7, #8]
90001e44:	4413      	add	r3, r2
90001e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
90001e4a:	4922      	ldr	r1, [pc, #136]	@ (90001ed4 <USBH_read+0xec>)
90001e4c:	4618      	mov	r0, r3
90001e4e:	f012 f869 	bl	90013f24 <memcpy>
    while ((count--)&&(status == USBH_OK))
90001e52:	683b      	ldr	r3, [r7, #0]
90001e54:	1e5a      	subs	r2, r3, #1
90001e56:	603a      	str	r2, [r7, #0]
90001e58:	2b00      	cmp	r3, #0
90001e5a:	d012      	beq.n	90001e82 <USBH_read+0x9a>
90001e5c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
90001e60:	2b00      	cmp	r3, #0
90001e62:	d0db      	beq.n	90001e1c <USBH_read+0x34>
  if (((DWORD)buff & 3) || (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
90001e64:	e00d      	b.n	90001e82 <USBH_read+0x9a>
      }
      else
      {
        break;
90001e66:	bf00      	nop
  if (((DWORD)buff & 3) || (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
90001e68:	e00b      	b.n	90001e82 <USBH_read+0x9a>
      }
    }
  }
  else
  {
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
90001e6a:	7bf9      	ldrb	r1, [r7, #15]
90001e6c:	683b      	ldr	r3, [r7, #0]
90001e6e:	9300      	str	r3, [sp, #0]
90001e70:	68bb      	ldr	r3, [r7, #8]
90001e72:	687a      	ldr	r2, [r7, #4]
90001e74:	4816      	ldr	r0, [pc, #88]	@ (90001ed0 <USBH_read+0xe8>)
90001e76:	f00e fe5c 	bl	90010b32 <USBH_MSC_Read>
90001e7a:	4603      	mov	r3, r0
90001e7c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
90001e80:	e000      	b.n	90001e84 <USBH_read+0x9c>
  if (((DWORD)buff & 3) || (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
90001e82:	bf00      	nop
  }

  if(status == USBH_OK)
90001e84:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
90001e88:	2b00      	cmp	r3, #0
90001e8a:	d103      	bne.n	90001e94 <USBH_read+0xac>
  {
    res = RES_OK;
90001e8c:	2300      	movs	r3, #0
90001e8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
90001e92:	e017      	b.n	90001ec4 <USBH_read+0xdc>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
90001e94:	f107 0210 	add.w	r2, r7, #16
90001e98:	7bfb      	ldrb	r3, [r7, #15]
90001e9a:	4619      	mov	r1, r3
90001e9c:	480c      	ldr	r0, [pc, #48]	@ (90001ed0 <USBH_read+0xe8>)
90001e9e:	f00e fe1f 	bl	90010ae0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
90001ea2:	7f7b      	ldrb	r3, [r7, #29]
90001ea4:	2b3a      	cmp	r3, #58	@ 0x3a
90001ea6:	d005      	beq.n	90001eb4 <USBH_read+0xcc>
90001ea8:	2b3a      	cmp	r3, #58	@ 0x3a
90001eaa:	dc07      	bgt.n	90001ebc <USBH_read+0xd4>
90001eac:	2b04      	cmp	r3, #4
90001eae:	d001      	beq.n	90001eb4 <USBH_read+0xcc>
90001eb0:	2b28      	cmp	r3, #40	@ 0x28
90001eb2:	d103      	bne.n	90001ebc <USBH_read+0xd4>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
90001eb4:	2303      	movs	r3, #3
90001eb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
90001eba:	e003      	b.n	90001ec4 <USBH_read+0xdc>

    default:
      res = RES_ERROR;
90001ebc:	2301      	movs	r3, #1
90001ebe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
90001ec2:	bf00      	nop
    }
  }

  return res;
90001ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
90001ec8:	4618      	mov	r0, r3
90001eca:	3748      	adds	r7, #72	@ 0x48
90001ecc:	46bd      	mov	sp, r7
90001ece:	bd80      	pop	{r7, pc}
90001ed0:	200000ec 	.word	0x200000ec
90001ed4:	20000f6c 	.word	0x20000f6c

90001ed8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
90001ed8:	b580      	push	{r7, lr}
90001eda:	b094      	sub	sp, #80	@ 0x50
90001edc:	af02      	add	r7, sp, #8
90001ede:	60b9      	str	r1, [r7, #8]
90001ee0:	607a      	str	r2, [r7, #4]
90001ee2:	603b      	str	r3, [r7, #0]
90001ee4:	4603      	mov	r3, r0
90001ee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
90001ee8:	2301      	movs	r3, #1
90001eea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
90001eee:	2300      	movs	r3, #0
90001ef0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (((DWORD)buff & 3) || (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
90001ef4:	68bb      	ldr	r3, [r7, #8]
90001ef6:	f003 0303 	and.w	r3, r3, #3
90001efa:	2b00      	cmp	r3, #0
90001efc:	d121      	bne.n	90001f42 <USBH_write+0x6a>
90001efe:	4b31      	ldr	r3, [pc, #196]	@ (90001fc4 <USBH_write+0xec>)
90001f00:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90001f04:	799b      	ldrb	r3, [r3, #6]
90001f06:	2b00      	cmp	r3, #0
90001f08:	d023      	beq.n	90001f52 <USBH_write+0x7a>
  {

    while (count--)
90001f0a:	e01a      	b.n	90001f42 <USBH_write+0x6a>
    {
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
90001f0c:	683b      	ldr	r3, [r7, #0]
90001f0e:	025b      	lsls	r3, r3, #9
90001f10:	68ba      	ldr	r2, [r7, #8]
90001f12:	4413      	add	r3, r2
90001f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
90001f18:	4619      	mov	r1, r3
90001f1a:	482b      	ldr	r0, [pc, #172]	@ (90001fc8 <USBH_write+0xf0>)
90001f1c:	f012 f802 	bl	90013f24 <memcpy>

      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
90001f20:	687a      	ldr	r2, [r7, #4]
90001f22:	683b      	ldr	r3, [r7, #0]
90001f24:	441a      	add	r2, r3
90001f26:	7bf9      	ldrb	r1, [r7, #15]
90001f28:	2301      	movs	r3, #1
90001f2a:	9300      	str	r3, [sp, #0]
90001f2c:	4b26      	ldr	r3, [pc, #152]	@ (90001fc8 <USBH_write+0xf0>)
90001f2e:	4825      	ldr	r0, [pc, #148]	@ (90001fc4 <USBH_write+0xec>)
90001f30:	f00e fe5f 	bl	90010bf2 <USBH_MSC_Write>
90001f34:	4603      	mov	r3, r0
90001f36:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
      if(status == USBH_FAIL)
90001f3a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
90001f3e:	2b02      	cmp	r3, #2
90001f40:	d005      	beq.n	90001f4e <USBH_write+0x76>
    while (count--)
90001f42:	683b      	ldr	r3, [r7, #0]
90001f44:	1e5a      	subs	r2, r3, #1
90001f46:	603a      	str	r2, [r7, #0]
90001f48:	2b00      	cmp	r3, #0
90001f4a:	d1df      	bne.n	90001f0c <USBH_write+0x34>
  if (((DWORD)buff & 3) || (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
90001f4c:	e00c      	b.n	90001f68 <USBH_write+0x90>
      {
        break;
90001f4e:	bf00      	nop
  if (((DWORD)buff & 3) || (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
90001f50:	e00a      	b.n	90001f68 <USBH_write+0x90>
      }
    }
  }
  else
  {
    status = USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count);
90001f52:	7bf9      	ldrb	r1, [r7, #15]
90001f54:	683b      	ldr	r3, [r7, #0]
90001f56:	9300      	str	r3, [sp, #0]
90001f58:	68bb      	ldr	r3, [r7, #8]
90001f5a:	687a      	ldr	r2, [r7, #4]
90001f5c:	4819      	ldr	r0, [pc, #100]	@ (90001fc4 <USBH_write+0xec>)
90001f5e:	f00e fe48 	bl	90010bf2 <USBH_MSC_Write>
90001f62:	4603      	mov	r3, r0
90001f64:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  }

  if(status == USBH_OK)
90001f68:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
90001f6c:	2b00      	cmp	r3, #0
90001f6e:	d103      	bne.n	90001f78 <USBH_write+0xa0>
  {
    res = RES_OK;
90001f70:	2300      	movs	r3, #0
90001f72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
90001f76:	e01f      	b.n	90001fb8 <USBH_write+0xe0>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
90001f78:	f107 0210 	add.w	r2, r7, #16
90001f7c:	7bfb      	ldrb	r3, [r7, #15]
90001f7e:	4619      	mov	r1, r3
90001f80:	4810      	ldr	r0, [pc, #64]	@ (90001fc4 <USBH_write+0xec>)
90001f82:	f00e fdad 	bl	90010ae0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
90001f86:	7f7b      	ldrb	r3, [r7, #29]
90001f88:	2b3a      	cmp	r3, #58	@ 0x3a
90001f8a:	d00d      	beq.n	90001fa8 <USBH_write+0xd0>
90001f8c:	2b3a      	cmp	r3, #58	@ 0x3a
90001f8e:	dc0f      	bgt.n	90001fb0 <USBH_write+0xd8>
90001f90:	2b28      	cmp	r3, #40	@ 0x28
90001f92:	d009      	beq.n	90001fa8 <USBH_write+0xd0>
90001f94:	2b28      	cmp	r3, #40	@ 0x28
90001f96:	dc0b      	bgt.n	90001fb0 <USBH_write+0xd8>
90001f98:	2b04      	cmp	r3, #4
90001f9a:	d005      	beq.n	90001fa8 <USBH_write+0xd0>
90001f9c:	2b27      	cmp	r3, #39	@ 0x27
90001f9e:	d107      	bne.n	90001fb0 <USBH_write+0xd8>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
90001fa0:	2302      	movs	r3, #2
90001fa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
90001fa6:	e007      	b.n	90001fb8 <USBH_write+0xe0>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
90001fa8:	2303      	movs	r3, #3
90001faa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
90001fae:	e003      	b.n	90001fb8 <USBH_write+0xe0>

    default:
      res = RES_ERROR;
90001fb0:	2301      	movs	r3, #1
90001fb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
90001fb6:	bf00      	nop
    }
  }

  return res;
90001fb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
90001fbc:	4618      	mov	r0, r3
90001fbe:	3748      	adds	r7, #72	@ 0x48
90001fc0:	46bd      	mov	sp, r7
90001fc2:	bd80      	pop	{r7, pc}
90001fc4:	200000ec 	.word	0x200000ec
90001fc8:	20000f6c 	.word	0x20000f6c

90001fcc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
90001fcc:	b580      	push	{r7, lr}
90001fce:	b090      	sub	sp, #64	@ 0x40
90001fd0:	af00      	add	r7, sp, #0
90001fd2:	4603      	mov	r3, r0
90001fd4:	603a      	str	r2, [r7, #0]
90001fd6:	71fb      	strb	r3, [r7, #7]
90001fd8:	460b      	mov	r3, r1
90001fda:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
90001fdc:	2301      	movs	r3, #1
90001fde:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
90001fe2:	79bb      	ldrb	r3, [r7, #6]
90001fe4:	2b03      	cmp	r3, #3
90001fe6:	d852      	bhi.n	9000208e <USBH_ioctl+0xc2>
90001fe8:	a201      	add	r2, pc, #4	@ (adr r2, 90001ff0 <USBH_ioctl+0x24>)
90001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90001fee:	bf00      	nop
90001ff0:	90002001 	.word	0x90002001
90001ff4:	90002009 	.word	0x90002009
90001ff8:	90002033 	.word	0x90002033
90001ffc:	9000205f 	.word	0x9000205f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
90002000:	2300      	movs	r3, #0
90002002:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
90002006:	e045      	b.n	90002094 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
90002008:	f107 0208 	add.w	r2, r7, #8
9000200c:	79fb      	ldrb	r3, [r7, #7]
9000200e:	4619      	mov	r1, r3
90002010:	4823      	ldr	r0, [pc, #140]	@ (900020a0 <USBH_ioctl+0xd4>)
90002012:	f00e fd65 	bl	90010ae0 <USBH_MSC_GetLUNInfo>
90002016:	4603      	mov	r3, r0
90002018:	2b00      	cmp	r3, #0
9000201a:	d106      	bne.n	9000202a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
9000201c:	68fa      	ldr	r2, [r7, #12]
9000201e:	683b      	ldr	r3, [r7, #0]
90002020:	601a      	str	r2, [r3, #0]
      res = RES_OK;
90002022:	2300      	movs	r3, #0
90002024:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
90002028:	e034      	b.n	90002094 <USBH_ioctl+0xc8>
      res = RES_ERROR;
9000202a:	2301      	movs	r3, #1
9000202c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
90002030:	e030      	b.n	90002094 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
90002032:	f107 0208 	add.w	r2, r7, #8
90002036:	79fb      	ldrb	r3, [r7, #7]
90002038:	4619      	mov	r1, r3
9000203a:	4819      	ldr	r0, [pc, #100]	@ (900020a0 <USBH_ioctl+0xd4>)
9000203c:	f00e fd50 	bl	90010ae0 <USBH_MSC_GetLUNInfo>
90002040:	4603      	mov	r3, r0
90002042:	2b00      	cmp	r3, #0
90002044:	d107      	bne.n	90002056 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
90002046:	8a3b      	ldrh	r3, [r7, #16]
90002048:	461a      	mov	r2, r3
9000204a:	683b      	ldr	r3, [r7, #0]
9000204c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
9000204e:	2300      	movs	r3, #0
90002050:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
90002054:	e01e      	b.n	90002094 <USBH_ioctl+0xc8>
      res = RES_ERROR;
90002056:	2301      	movs	r3, #1
90002058:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
9000205c:	e01a      	b.n	90002094 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
9000205e:	f107 0208 	add.w	r2, r7, #8
90002062:	79fb      	ldrb	r3, [r7, #7]
90002064:	4619      	mov	r1, r3
90002066:	480e      	ldr	r0, [pc, #56]	@ (900020a0 <USBH_ioctl+0xd4>)
90002068:	f00e fd3a 	bl	90010ae0 <USBH_MSC_GetLUNInfo>
9000206c:	4603      	mov	r3, r0
9000206e:	2b00      	cmp	r3, #0
90002070:	d109      	bne.n	90002086 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
90002072:	8a3b      	ldrh	r3, [r7, #16]
90002074:	0a5b      	lsrs	r3, r3, #9
90002076:	b29b      	uxth	r3, r3
90002078:	461a      	mov	r2, r3
9000207a:	683b      	ldr	r3, [r7, #0]
9000207c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
9000207e:	2300      	movs	r3, #0
90002080:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
90002084:	e006      	b.n	90002094 <USBH_ioctl+0xc8>
      res = RES_ERROR;
90002086:	2301      	movs	r3, #1
90002088:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
9000208c:	e002      	b.n	90002094 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
9000208e:	2304      	movs	r3, #4
90002090:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
90002094:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
90002098:	4618      	mov	r0, r3
9000209a:	3740      	adds	r7, #64	@ 0x40
9000209c:	46bd      	mov	sp, r7
9000209e:	bd80      	pop	{r7, pc}
900020a0:	200000ec 	.word	0x200000ec

900020a4 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
900020a4:	b580      	push	{r7, lr}
900020a6:	b084      	sub	sp, #16
900020a8:	af00      	add	r7, sp, #0
900020aa:	6078      	str	r0, [r7, #4]
900020ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
900020ae:	687b      	ldr	r3, [r7, #4]
900020b0:	2b00      	cmp	r3, #0
900020b2:	d103      	bne.n	900020bc <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
900020b4:	f04f 33ff 	mov.w	r3, #4294967295
900020b8:	60fb      	str	r3, [r7, #12]
900020ba:	e02c      	b.n	90002116 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
900020bc:	683b      	ldr	r3, [r7, #0]
900020be:	681a      	ldr	r2, [r3, #0]
900020c0:	687b      	ldr	r3, [r7, #4]
900020c2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
900020c4:	683b      	ldr	r3, [r7, #0]
900020c6:	685a      	ldr	r2, [r3, #4]
900020c8:	687b      	ldr	r3, [r7, #4]
900020ca:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
900020cc:	683b      	ldr	r3, [r7, #0]
900020ce:	891a      	ldrh	r2, [r3, #8]
900020d0:	687b      	ldr	r3, [r7, #4]
900020d2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
900020d4:	683b      	ldr	r3, [r7, #0]
900020d6:	68da      	ldr	r2, [r3, #12]
900020d8:	687b      	ldr	r3, [r7, #4]
900020da:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
900020dc:	683b      	ldr	r3, [r7, #0]
900020de:	691a      	ldr	r2, [r3, #16]
900020e0:	687b      	ldr	r3, [r7, #4]
900020e2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
900020e4:	683b      	ldr	r3, [r7, #0]
900020e6:	695a      	ldr	r2, [r3, #20]
900020e8:	687b      	ldr	r3, [r7, #4]
900020ea:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
900020ec:	687b      	ldr	r3, [r7, #4]
900020ee:	4a0c      	ldr	r2, [pc, #48]	@ (90002120 <FT5336_RegisterBusIO+0x7c>)
900020f0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900020f2:	687b      	ldr	r3, [r7, #4]
900020f4:	4a0b      	ldr	r2, [pc, #44]	@ (90002124 <FT5336_RegisterBusIO+0x80>)
900020f6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
900020f8:	687b      	ldr	r3, [r7, #4]
900020fa:	687a      	ldr	r2, [r7, #4]
900020fc:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900020fe:	687b      	ldr	r3, [r7, #4]
90002100:	681b      	ldr	r3, [r3, #0]
90002102:	2b00      	cmp	r3, #0
90002104:	d004      	beq.n	90002110 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
90002106:	687b      	ldr	r3, [r7, #4]
90002108:	681b      	ldr	r3, [r3, #0]
9000210a:	4798      	blx	r3
9000210c:	60f8      	str	r0, [r7, #12]
9000210e:	e002      	b.n	90002116 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90002110:	f04f 33ff 	mov.w	r3, #4294967295
90002114:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
90002116:	68fb      	ldr	r3, [r7, #12]
}
90002118:	4618      	mov	r0, r3
9000211a:	3710      	adds	r7, #16
9000211c:	46bd      	mov	sp, r7
9000211e:	bd80      	pop	{r7, pc}
90002120:	9000251d 	.word	0x9000251d
90002124:	90002551 	.word	0x90002551

90002128 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
90002128:	b480      	push	{r7}
9000212a:	b083      	sub	sp, #12
9000212c:	af00      	add	r7, sp, #0
9000212e:	6078      	str	r0, [r7, #4]
90002130:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90002132:	683b      	ldr	r3, [r7, #0]
90002134:	2201      	movs	r2, #1
90002136:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
90002138:	683b      	ldr	r3, [r7, #0]
9000213a:	2201      	movs	r2, #1
9000213c:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
9000213e:	683b      	ldr	r3, [r7, #0]
90002140:	2205      	movs	r2, #5
90002142:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90002144:	683b      	ldr	r3, [r7, #0]
90002146:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
9000214a:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
9000214c:	683b      	ldr	r3, [r7, #0]
9000214e:	f44f 7288 	mov.w	r2, #272	@ 0x110
90002152:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
90002154:	2300      	movs	r3, #0
}
90002156:	4618      	mov	r0, r3
90002158:	370c      	adds	r7, #12
9000215a:	46bd      	mov	sp, r7
9000215c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002160:	4770      	bx	lr

90002162 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
90002162:	b580      	push	{r7, lr}
90002164:	b084      	sub	sp, #16
90002166:	af00      	add	r7, sp, #0
90002168:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
9000216a:	2300      	movs	r3, #0
9000216c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
9000216e:	687b      	ldr	r3, [r7, #4]
90002170:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
90002174:	2b00      	cmp	r3, #0
90002176:	d10d      	bne.n	90002194 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
90002178:	687b      	ldr	r3, [r7, #4]
9000217a:	681b      	ldr	r3, [r3, #0]
9000217c:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
9000217e:	6878      	ldr	r0, [r7, #4]
90002180:	f000 f987 	bl	90002492 <FT5336_DisableIT>
90002184:	4602      	mov	r2, r0
90002186:	68fb      	ldr	r3, [r7, #12]
90002188:	4413      	add	r3, r2
9000218a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
9000218c:	687b      	ldr	r3, [r7, #4]
9000218e:	2201      	movs	r2, #1
90002190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
90002194:	68fb      	ldr	r3, [r7, #12]
90002196:	2b00      	cmp	r3, #0
90002198:	d002      	beq.n	900021a0 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
9000219a:	f04f 33ff 	mov.w	r3, #4294967295
9000219e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
900021a0:	68fb      	ldr	r3, [r7, #12]
}
900021a2:	4618      	mov	r0, r3
900021a4:	3710      	adds	r7, #16
900021a6:	46bd      	mov	sp, r7
900021a8:	bd80      	pop	{r7, pc}

900021aa <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
900021aa:	b480      	push	{r7}
900021ac:	b085      	sub	sp, #20
900021ae:	af00      	add	r7, sp, #0
900021b0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
900021b2:	2300      	movs	r3, #0
900021b4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
900021b6:	687b      	ldr	r3, [r7, #4]
900021b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
900021bc:	2b01      	cmp	r3, #1
900021be:	d103      	bne.n	900021c8 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
900021c0:	687b      	ldr	r3, [r7, #4]
900021c2:	2200      	movs	r2, #0
900021c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
900021c8:	68fb      	ldr	r3, [r7, #12]
}
900021ca:	4618      	mov	r0, r3
900021cc:	3714      	adds	r7, #20
900021ce:	46bd      	mov	sp, r7
900021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900021d4:	4770      	bx	lr

900021d6 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
900021d6:	b580      	push	{r7, lr}
900021d8:	b084      	sub	sp, #16
900021da:	af00      	add	r7, sp, #0
900021dc:	6078      	str	r0, [r7, #4]
900021de:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
900021e0:	687b      	ldr	r3, [r7, #4]
900021e2:	f103 0218 	add.w	r2, r3, #24
900021e6:	683b      	ldr	r3, [r7, #0]
900021e8:	681b      	ldr	r3, [r3, #0]
900021ea:	b2db      	uxtb	r3, r3
900021ec:	4619      	mov	r1, r3
900021ee:	4610      	mov	r0, r2
900021f0:	f000 fa25 	bl	9000263e <ft5336_radian_value>
900021f4:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
900021f6:	687b      	ldr	r3, [r7, #4]
900021f8:	f103 0218 	add.w	r2, r3, #24
900021fc:	683b      	ldr	r3, [r7, #0]
900021fe:	685b      	ldr	r3, [r3, #4]
90002200:	b2db      	uxtb	r3, r3
90002202:	4619      	mov	r1, r3
90002204:	4610      	mov	r0, r2
90002206:	f000 fa2b 	bl	90002660 <ft5336_offset_left_right>
9000220a:	4602      	mov	r2, r0
9000220c:	68fb      	ldr	r3, [r7, #12]
9000220e:	4413      	add	r3, r2
90002210:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90002212:	687b      	ldr	r3, [r7, #4]
90002214:	f103 0218 	add.w	r2, r3, #24
90002218:	683b      	ldr	r3, [r7, #0]
9000221a:	689b      	ldr	r3, [r3, #8]
9000221c:	b2db      	uxtb	r3, r3
9000221e:	4619      	mov	r1, r3
90002220:	4610      	mov	r0, r2
90002222:	f000 fa2e 	bl	90002682 <ft5336_offset_up_down>
90002226:	4602      	mov	r2, r0
90002228:	68fb      	ldr	r3, [r7, #12]
9000222a:	4413      	add	r3, r2
9000222c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
9000222e:	687b      	ldr	r3, [r7, #4]
90002230:	f103 0218 	add.w	r2, r3, #24
90002234:	683b      	ldr	r3, [r7, #0]
90002236:	68db      	ldr	r3, [r3, #12]
90002238:	b2db      	uxtb	r3, r3
9000223a:	4619      	mov	r1, r3
9000223c:	4610      	mov	r0, r2
9000223e:	f000 fa31 	bl	900026a4 <ft5336_disatnce_left_right>
90002242:	4602      	mov	r2, r0
90002244:	68fb      	ldr	r3, [r7, #12]
90002246:	4413      	add	r3, r2
90002248:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000224a:	687b      	ldr	r3, [r7, #4]
9000224c:	f103 0218 	add.w	r2, r3, #24
90002250:	683b      	ldr	r3, [r7, #0]
90002252:	691b      	ldr	r3, [r3, #16]
90002254:	b2db      	uxtb	r3, r3
90002256:	4619      	mov	r1, r3
90002258:	4610      	mov	r0, r2
9000225a:	f000 fa34 	bl	900026c6 <ft5336_distance_up_down>
9000225e:	4602      	mov	r2, r0
90002260:	68fb      	ldr	r3, [r7, #12]
90002262:	4413      	add	r3, r2
90002264:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90002266:	687b      	ldr	r3, [r7, #4]
90002268:	f103 0218 	add.w	r2, r3, #24
9000226c:	683b      	ldr	r3, [r7, #0]
9000226e:	695b      	ldr	r3, [r3, #20]
90002270:	b2db      	uxtb	r3, r3
90002272:	4619      	mov	r1, r3
90002274:	4610      	mov	r0, r2
90002276:	f000 fa37 	bl	900026e8 <ft5336_distance_zoom>
9000227a:	4602      	mov	r2, r0
9000227c:	68fb      	ldr	r3, [r7, #12]
9000227e:	4413      	add	r3, r2
90002280:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
90002282:	68fb      	ldr	r3, [r7, #12]
90002284:	2b00      	cmp	r3, #0
90002286:	d002      	beq.n	9000228e <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
90002288:	f04f 33ff 	mov.w	r3, #4294967295
9000228c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
9000228e:	68fb      	ldr	r3, [r7, #12]
}
90002290:	4618      	mov	r0, r3
90002292:	3710      	adds	r7, #16
90002294:	46bd      	mov	sp, r7
90002296:	bd80      	pop	{r7, pc}

90002298 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90002298:	b580      	push	{r7, lr}
9000229a:	b082      	sub	sp, #8
9000229c:	af00      	add	r7, sp, #0
9000229e:	6078      	str	r0, [r7, #4]
900022a0:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900022a2:	687b      	ldr	r3, [r7, #4]
900022a4:	3318      	adds	r3, #24
900022a6:	6839      	ldr	r1, [r7, #0]
900022a8:	4618      	mov	r0, r3
900022aa:	f000 fa3f 	bl	9000272c <ft5336_chip_id>
900022ae:	4603      	mov	r3, r0
}
900022b0:	4618      	mov	r0, r3
900022b2:	3708      	adds	r7, #8
900022b4:	46bd      	mov	sp, r7
900022b6:	bd80      	pop	{r7, pc}

900022b8 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
900022b8:	b580      	push	{r7, lr}
900022ba:	b084      	sub	sp, #16
900022bc:	af00      	add	r7, sp, #0
900022be:	6078      	str	r0, [r7, #4]
900022c0:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
900022c2:	2300      	movs	r3, #0
900022c4:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900022c6:	6878      	ldr	r0, [r7, #4]
900022c8:	f000 f908 	bl	900024dc <FT5336_DetectTouch>
900022cc:	4603      	mov	r3, r0
900022ce:	461a      	mov	r2, r3
900022d0:	683b      	ldr	r3, [r7, #0]
900022d2:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900022d4:	687b      	ldr	r3, [r7, #4]
900022d6:	f103 0018 	add.w	r0, r3, #24
900022da:	f107 0208 	add.w	r2, r7, #8
900022de:	2304      	movs	r3, #4
900022e0:	2103      	movs	r1, #3
900022e2:	f000 f94f 	bl	90002584 <ft5336_read_reg>
900022e6:	4603      	mov	r3, r0
900022e8:	2b00      	cmp	r3, #0
900022ea:	d003      	beq.n	900022f4 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
900022ec:	f04f 33ff 	mov.w	r3, #4294967295
900022f0:	60fb      	str	r3, [r7, #12]
900022f2:	e00f      	b.n	90002314 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900022f4:	7a3b      	ldrb	r3, [r7, #8]
900022f6:	021b      	lsls	r3, r3, #8
900022f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
900022fc:	7a7a      	ldrb	r2, [r7, #9]
900022fe:	431a      	orrs	r2, r3
90002300:	683b      	ldr	r3, [r7, #0]
90002302:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90002304:	7abb      	ldrb	r3, [r7, #10]
90002306:	021b      	lsls	r3, r3, #8
90002308:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
9000230c:	7afa      	ldrb	r2, [r7, #11]
9000230e:	431a      	orrs	r2, r3
90002310:	683b      	ldr	r3, [r7, #0]
90002312:	609a      	str	r2, [r3, #8]
  }

  return ret;
90002314:	68fb      	ldr	r3, [r7, #12]
}
90002316:	4618      	mov	r0, r3
90002318:	3710      	adds	r7, #16
9000231a:	46bd      	mov	sp, r7
9000231c:	bd80      	pop	{r7, pc}

9000231e <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
9000231e:	b580      	push	{r7, lr}
90002320:	b08c      	sub	sp, #48	@ 0x30
90002322:	af00      	add	r7, sp, #0
90002324:	6078      	str	r0, [r7, #4]
90002326:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90002328:	2300      	movs	r3, #0
9000232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
9000232c:	6878      	ldr	r0, [r7, #4]
9000232e:	f000 f8d5 	bl	900024dc <FT5336_DetectTouch>
90002332:	4603      	mov	r3, r0
90002334:	461a      	mov	r2, r3
90002336:	683b      	ldr	r3, [r7, #0]
90002338:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
9000233a:	687b      	ldr	r3, [r7, #4]
9000233c:	f103 0018 	add.w	r0, r3, #24
90002340:	f107 0208 	add.w	r2, r7, #8
90002344:	231e      	movs	r3, #30
90002346:	2103      	movs	r1, #3
90002348:	f000 f91c 	bl	90002584 <ft5336_read_reg>
9000234c:	4603      	mov	r3, r0
9000234e:	2b00      	cmp	r3, #0
90002350:	d003      	beq.n	9000235a <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
90002352:	f04f 33ff 	mov.w	r3, #4294967295
90002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002358:	e077      	b.n	9000244a <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
9000235a:	2300      	movs	r3, #0
9000235c:	62bb      	str	r3, [r7, #40]	@ 0x28
9000235e:	e071      	b.n	90002444 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90002360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002362:	4613      	mov	r3, r2
90002364:	005b      	lsls	r3, r3, #1
90002366:	4413      	add	r3, r2
90002368:	005b      	lsls	r3, r3, #1
9000236a:	3330      	adds	r3, #48	@ 0x30
9000236c:	443b      	add	r3, r7
9000236e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90002372:	021b      	lsls	r3, r3, #8
90002374:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
90002378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000237a:	4613      	mov	r3, r2
9000237c:	005b      	lsls	r3, r3, #1
9000237e:	4413      	add	r3, r2
90002380:	005b      	lsls	r3, r3, #1
90002382:	3301      	adds	r3, #1
90002384:	3330      	adds	r3, #48	@ 0x30
90002386:	443b      	add	r3, r7
90002388:	f813 3c28 	ldrb.w	r3, [r3, #-40]
9000238c:	ea41 0203 	orr.w	r2, r1, r3
90002390:	6839      	ldr	r1, [r7, #0]
90002392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002394:	009b      	lsls	r3, r3, #2
90002396:	440b      	add	r3, r1
90002398:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000239a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000239c:	4613      	mov	r3, r2
9000239e:	005b      	lsls	r3, r3, #1
900023a0:	4413      	add	r3, r2
900023a2:	005b      	lsls	r3, r3, #1
900023a4:	3302      	adds	r3, #2
900023a6:	3330      	adds	r3, #48	@ 0x30
900023a8:	443b      	add	r3, r7
900023aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
900023ae:	021b      	lsls	r3, r3, #8
900023b0:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
900023b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900023b6:	4613      	mov	r3, r2
900023b8:	005b      	lsls	r3, r3, #1
900023ba:	4413      	add	r3, r2
900023bc:	005b      	lsls	r3, r3, #1
900023be:	3303      	adds	r3, #3
900023c0:	3330      	adds	r3, #48	@ 0x30
900023c2:	443b      	add	r3, r7
900023c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
900023c8:	4319      	orrs	r1, r3
900023ca:	683b      	ldr	r3, [r7, #0]
900023cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900023ce:	3206      	adds	r2, #6
900023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900023d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900023d6:	4613      	mov	r3, r2
900023d8:	005b      	lsls	r3, r3, #1
900023da:	4413      	add	r3, r2
900023dc:	005b      	lsls	r3, r3, #1
900023de:	3330      	adds	r3, #48	@ 0x30
900023e0:	443b      	add	r3, r7
900023e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
900023e6:	099b      	lsrs	r3, r3, #6
900023e8:	b2db      	uxtb	r3, r3
900023ea:	4619      	mov	r1, r3
900023ec:	683b      	ldr	r3, [r7, #0]
900023ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900023f0:	3210      	adds	r2, #16
900023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900023f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900023f8:	4613      	mov	r3, r2
900023fa:	005b      	lsls	r3, r3, #1
900023fc:	4413      	add	r3, r2
900023fe:	005b      	lsls	r3, r3, #1
90002400:	3304      	adds	r3, #4
90002402:	3330      	adds	r3, #48	@ 0x30
90002404:	443b      	add	r3, r7
90002406:	f813 3c28 	ldrb.w	r3, [r3, #-40]
9000240a:	4619      	mov	r1, r3
9000240c:	683a      	ldr	r2, [r7, #0]
9000240e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002410:	330a      	adds	r3, #10
90002412:	009b      	lsls	r3, r3, #2
90002414:	4413      	add	r3, r2
90002416:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90002418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000241a:	4613      	mov	r3, r2
9000241c:	005b      	lsls	r3, r3, #1
9000241e:	4413      	add	r3, r2
90002420:	005b      	lsls	r3, r3, #1
90002422:	3305      	adds	r3, #5
90002424:	3330      	adds	r3, #48	@ 0x30
90002426:	443b      	add	r3, r7
90002428:	f813 3c28 	ldrb.w	r3, [r3, #-40]
9000242c:	091b      	lsrs	r3, r3, #4
9000242e:	b2db      	uxtb	r3, r3
90002430:	4619      	mov	r1, r3
90002432:	683a      	ldr	r2, [r7, #0]
90002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002436:	3314      	adds	r3, #20
90002438:	009b      	lsls	r3, r3, #2
9000243a:	4413      	add	r3, r2
9000243c:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
9000243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002440:	3301      	adds	r3, #1
90002442:	62bb      	str	r3, [r7, #40]	@ 0x28
90002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002446:	2b04      	cmp	r3, #4
90002448:	d98a      	bls.n	90002360 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
9000244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
9000244c:	4618      	mov	r0, r3
9000244e:	3730      	adds	r7, #48	@ 0x30
90002450:	46bd      	mov	sp, r7
90002452:	bd80      	pop	{r7, pc}

90002454 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
90002454:	b580      	push	{r7, lr}
90002456:	b082      	sub	sp, #8
90002458:	af00      	add	r7, sp, #0
9000245a:	6078      	str	r0, [r7, #4]
9000245c:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
9000245e:	687b      	ldr	r3, [r7, #4]
90002460:	3318      	adds	r3, #24
90002462:	6839      	ldr	r1, [r7, #0]
90002464:	4618      	mov	r0, r3
90002466:	f000 f8bb 	bl	900025e0 <ft5336_gest_id>
9000246a:	4603      	mov	r3, r0
}
9000246c:	4618      	mov	r0, r3
9000246e:	3708      	adds	r7, #8
90002470:	46bd      	mov	sp, r7
90002472:	bd80      	pop	{r7, pc}

90002474 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
90002474:	b580      	push	{r7, lr}
90002476:	b082      	sub	sp, #8
90002478:	af00      	add	r7, sp, #0
9000247a:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
9000247c:	687b      	ldr	r3, [r7, #4]
9000247e:	3318      	adds	r3, #24
90002480:	2101      	movs	r1, #1
90002482:	4618      	mov	r0, r3
90002484:	f000 f941 	bl	9000270a <ft5336_g_mode>
90002488:	4603      	mov	r3, r0
}
9000248a:	4618      	mov	r0, r3
9000248c:	3708      	adds	r7, #8
9000248e:	46bd      	mov	sp, r7
90002490:	bd80      	pop	{r7, pc}

90002492 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
90002492:	b580      	push	{r7, lr}
90002494:	b082      	sub	sp, #8
90002496:	af00      	add	r7, sp, #0
90002498:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
9000249a:	687b      	ldr	r3, [r7, #4]
9000249c:	3318      	adds	r3, #24
9000249e:	2100      	movs	r1, #0
900024a0:	4618      	mov	r0, r3
900024a2:	f000 f932 	bl	9000270a <ft5336_g_mode>
900024a6:	4603      	mov	r3, r0
}
900024a8:	4618      	mov	r0, r3
900024aa:	3708      	adds	r7, #8
900024ac:	46bd      	mov	sp, r7
900024ae:	bd80      	pop	{r7, pc}

900024b0 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
900024b0:	b480      	push	{r7}
900024b2:	b083      	sub	sp, #12
900024b4:	af00      	add	r7, sp, #0
900024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
900024b8:	2300      	movs	r3, #0
}
900024ba:	4618      	mov	r0, r3
900024bc:	370c      	adds	r7, #12
900024be:	46bd      	mov	sp, r7
900024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900024c4:	4770      	bx	lr

900024c6 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
900024c6:	b480      	push	{r7}
900024c8:	b083      	sub	sp, #12
900024ca:	af00      	add	r7, sp, #0
900024cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
900024ce:	2300      	movs	r3, #0
}
900024d0:	4618      	mov	r0, r3
900024d2:	370c      	adds	r7, #12
900024d4:	46bd      	mov	sp, r7
900024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
900024da:	4770      	bx	lr

900024dc <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
900024dc:	b580      	push	{r7, lr}
900024de:	b084      	sub	sp, #16
900024e0:	af00      	add	r7, sp, #0
900024e2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900024e4:	687b      	ldr	r3, [r7, #4]
900024e6:	3318      	adds	r3, #24
900024e8:	f107 020b 	add.w	r2, r7, #11
900024ec:	4611      	mov	r1, r2
900024ee:	4618      	mov	r0, r3
900024f0:	f000 f886 	bl	90002600 <ft5336_td_status>
900024f4:	4603      	mov	r3, r0
900024f6:	2b00      	cmp	r3, #0
900024f8:	d003      	beq.n	90002502 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
900024fa:	f04f 33ff 	mov.w	r3, #4294967295
900024fe:	60fb      	str	r3, [r7, #12]
90002500:	e007      	b.n	90002512 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90002502:	7afb      	ldrb	r3, [r7, #11]
90002504:	2b05      	cmp	r3, #5
90002506:	d902      	bls.n	9000250e <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
90002508:	2300      	movs	r3, #0
9000250a:	60fb      	str	r3, [r7, #12]
9000250c:	e001      	b.n	90002512 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
9000250e:	7afb      	ldrb	r3, [r7, #11]
90002510:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
90002512:	68fb      	ldr	r3, [r7, #12]
}
90002514:	4618      	mov	r0, r3
90002516:	3710      	adds	r7, #16
90002518:	46bd      	mov	sp, r7
9000251a:	bd80      	pop	{r7, pc}

9000251c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000251c:	b590      	push	{r4, r7, lr}
9000251e:	b087      	sub	sp, #28
90002520:	af00      	add	r7, sp, #0
90002522:	60f8      	str	r0, [r7, #12]
90002524:	607a      	str	r2, [r7, #4]
90002526:	461a      	mov	r2, r3
90002528:	460b      	mov	r3, r1
9000252a:	72fb      	strb	r3, [r7, #11]
9000252c:	4613      	mov	r3, r2
9000252e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90002530:	68fb      	ldr	r3, [r7, #12]
90002532:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90002534:	697b      	ldr	r3, [r7, #20]
90002536:	691c      	ldr	r4, [r3, #16]
90002538:	697b      	ldr	r3, [r7, #20]
9000253a:	8918      	ldrh	r0, [r3, #8]
9000253c:	7afb      	ldrb	r3, [r7, #11]
9000253e:	b299      	uxth	r1, r3
90002540:	893b      	ldrh	r3, [r7, #8]
90002542:	687a      	ldr	r2, [r7, #4]
90002544:	47a0      	blx	r4
90002546:	4603      	mov	r3, r0
}
90002548:	4618      	mov	r0, r3
9000254a:	371c      	adds	r7, #28
9000254c:	46bd      	mov	sp, r7
9000254e:	bd90      	pop	{r4, r7, pc}

90002550 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90002550:	b590      	push	{r4, r7, lr}
90002552:	b087      	sub	sp, #28
90002554:	af00      	add	r7, sp, #0
90002556:	60f8      	str	r0, [r7, #12]
90002558:	607a      	str	r2, [r7, #4]
9000255a:	461a      	mov	r2, r3
9000255c:	460b      	mov	r3, r1
9000255e:	72fb      	strb	r3, [r7, #11]
90002560:	4613      	mov	r3, r2
90002562:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90002564:	68fb      	ldr	r3, [r7, #12]
90002566:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90002568:	697b      	ldr	r3, [r7, #20]
9000256a:	68dc      	ldr	r4, [r3, #12]
9000256c:	697b      	ldr	r3, [r7, #20]
9000256e:	8918      	ldrh	r0, [r3, #8]
90002570:	7afb      	ldrb	r3, [r7, #11]
90002572:	b299      	uxth	r1, r3
90002574:	893b      	ldrh	r3, [r7, #8]
90002576:	687a      	ldr	r2, [r7, #4]
90002578:	47a0      	blx	r4
9000257a:	4603      	mov	r3, r0
}
9000257c:	4618      	mov	r0, r3
9000257e:	371c      	adds	r7, #28
90002580:	46bd      	mov	sp, r7
90002582:	bd90      	pop	{r4, r7, pc}

90002584 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90002584:	b590      	push	{r4, r7, lr}
90002586:	b085      	sub	sp, #20
90002588:	af00      	add	r7, sp, #0
9000258a:	60f8      	str	r0, [r7, #12]
9000258c:	607a      	str	r2, [r7, #4]
9000258e:	461a      	mov	r2, r3
90002590:	460b      	mov	r3, r1
90002592:	72fb      	strb	r3, [r7, #11]
90002594:	4613      	mov	r3, r2
90002596:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90002598:	68fb      	ldr	r3, [r7, #12]
9000259a:	685c      	ldr	r4, [r3, #4]
9000259c:	68fb      	ldr	r3, [r7, #12]
9000259e:	6898      	ldr	r0, [r3, #8]
900025a0:	893b      	ldrh	r3, [r7, #8]
900025a2:	7af9      	ldrb	r1, [r7, #11]
900025a4:	687a      	ldr	r2, [r7, #4]
900025a6:	47a0      	blx	r4
900025a8:	4603      	mov	r3, r0
}
900025aa:	4618      	mov	r0, r3
900025ac:	3714      	adds	r7, #20
900025ae:	46bd      	mov	sp, r7
900025b0:	bd90      	pop	{r4, r7, pc}

900025b2 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
900025b2:	b590      	push	{r4, r7, lr}
900025b4:	b085      	sub	sp, #20
900025b6:	af00      	add	r7, sp, #0
900025b8:	60f8      	str	r0, [r7, #12]
900025ba:	607a      	str	r2, [r7, #4]
900025bc:	461a      	mov	r2, r3
900025be:	460b      	mov	r3, r1
900025c0:	72fb      	strb	r3, [r7, #11]
900025c2:	4613      	mov	r3, r2
900025c4:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900025c6:	68fb      	ldr	r3, [r7, #12]
900025c8:	681c      	ldr	r4, [r3, #0]
900025ca:	68fb      	ldr	r3, [r7, #12]
900025cc:	6898      	ldr	r0, [r3, #8]
900025ce:	893b      	ldrh	r3, [r7, #8]
900025d0:	7af9      	ldrb	r1, [r7, #11]
900025d2:	687a      	ldr	r2, [r7, #4]
900025d4:	47a0      	blx	r4
900025d6:	4603      	mov	r3, r0
}
900025d8:	4618      	mov	r0, r3
900025da:	3714      	adds	r7, #20
900025dc:	46bd      	mov	sp, r7
900025de:	bd90      	pop	{r4, r7, pc}

900025e0 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900025e0:	b580      	push	{r7, lr}
900025e2:	b082      	sub	sp, #8
900025e4:	af00      	add	r7, sp, #0
900025e6:	6078      	str	r0, [r7, #4]
900025e8:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
900025ea:	2301      	movs	r3, #1
900025ec:	683a      	ldr	r2, [r7, #0]
900025ee:	2101      	movs	r1, #1
900025f0:	6878      	ldr	r0, [r7, #4]
900025f2:	f7ff ffc7 	bl	90002584 <ft5336_read_reg>
900025f6:	4603      	mov	r3, r0
}
900025f8:	4618      	mov	r0, r3
900025fa:	3708      	adds	r7, #8
900025fc:	46bd      	mov	sp, r7
900025fe:	bd80      	pop	{r7, pc}

90002600 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90002600:	b580      	push	{r7, lr}
90002602:	b084      	sub	sp, #16
90002604:	af00      	add	r7, sp, #0
90002606:	6078      	str	r0, [r7, #4]
90002608:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
9000260a:	2301      	movs	r3, #1
9000260c:	683a      	ldr	r2, [r7, #0]
9000260e:	2102      	movs	r1, #2
90002610:	6878      	ldr	r0, [r7, #4]
90002612:	f7ff ffb7 	bl	90002584 <ft5336_read_reg>
90002616:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90002618:	68fb      	ldr	r3, [r7, #12]
9000261a:	2b00      	cmp	r3, #0
9000261c:	d10a      	bne.n	90002634 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
9000261e:	683b      	ldr	r3, [r7, #0]
90002620:	781b      	ldrb	r3, [r3, #0]
90002622:	f003 030f 	and.w	r3, r3, #15
90002626:	b2da      	uxtb	r2, r3
90002628:	683b      	ldr	r3, [r7, #0]
9000262a:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
9000262c:	683b      	ldr	r3, [r7, #0]
9000262e:	781a      	ldrb	r2, [r3, #0]
90002630:	683b      	ldr	r3, [r7, #0]
90002632:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90002634:	68fb      	ldr	r3, [r7, #12]
}
90002636:	4618      	mov	r0, r3
90002638:	3710      	adds	r7, #16
9000263a:	46bd      	mov	sp, r7
9000263c:	bd80      	pop	{r7, pc}

9000263e <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
9000263e:	b580      	push	{r7, lr}
90002640:	b082      	sub	sp, #8
90002642:	af00      	add	r7, sp, #0
90002644:	6078      	str	r0, [r7, #4]
90002646:	460b      	mov	r3, r1
90002648:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
9000264a:	1cfa      	adds	r2, r7, #3
9000264c:	2301      	movs	r3, #1
9000264e:	2191      	movs	r1, #145	@ 0x91
90002650:	6878      	ldr	r0, [r7, #4]
90002652:	f7ff ffae 	bl	900025b2 <ft5336_write_reg>
90002656:	4603      	mov	r3, r0
}
90002658:	4618      	mov	r0, r3
9000265a:	3708      	adds	r7, #8
9000265c:	46bd      	mov	sp, r7
9000265e:	bd80      	pop	{r7, pc}

90002660 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90002660:	b580      	push	{r7, lr}
90002662:	b082      	sub	sp, #8
90002664:	af00      	add	r7, sp, #0
90002666:	6078      	str	r0, [r7, #4]
90002668:	460b      	mov	r3, r1
9000266a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
9000266c:	1cfa      	adds	r2, r7, #3
9000266e:	2301      	movs	r3, #1
90002670:	2192      	movs	r1, #146	@ 0x92
90002672:	6878      	ldr	r0, [r7, #4]
90002674:	f7ff ff9d 	bl	900025b2 <ft5336_write_reg>
90002678:	4603      	mov	r3, r0
}
9000267a:	4618      	mov	r0, r3
9000267c:	3708      	adds	r7, #8
9000267e:	46bd      	mov	sp, r7
90002680:	bd80      	pop	{r7, pc}

90002682 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90002682:	b580      	push	{r7, lr}
90002684:	b082      	sub	sp, #8
90002686:	af00      	add	r7, sp, #0
90002688:	6078      	str	r0, [r7, #4]
9000268a:	460b      	mov	r3, r1
9000268c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
9000268e:	1cfa      	adds	r2, r7, #3
90002690:	2301      	movs	r3, #1
90002692:	2193      	movs	r1, #147	@ 0x93
90002694:	6878      	ldr	r0, [r7, #4]
90002696:	f7ff ff8c 	bl	900025b2 <ft5336_write_reg>
9000269a:	4603      	mov	r3, r0
}
9000269c:	4618      	mov	r0, r3
9000269e:	3708      	adds	r7, #8
900026a0:	46bd      	mov	sp, r7
900026a2:	bd80      	pop	{r7, pc}

900026a4 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900026a4:	b580      	push	{r7, lr}
900026a6:	b082      	sub	sp, #8
900026a8:	af00      	add	r7, sp, #0
900026aa:	6078      	str	r0, [r7, #4]
900026ac:	460b      	mov	r3, r1
900026ae:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
900026b0:	1cfa      	adds	r2, r7, #3
900026b2:	2301      	movs	r3, #1
900026b4:	2194      	movs	r1, #148	@ 0x94
900026b6:	6878      	ldr	r0, [r7, #4]
900026b8:	f7ff ff7b 	bl	900025b2 <ft5336_write_reg>
900026bc:	4603      	mov	r3, r0
}
900026be:	4618      	mov	r0, r3
900026c0:	3708      	adds	r7, #8
900026c2:	46bd      	mov	sp, r7
900026c4:	bd80      	pop	{r7, pc}

900026c6 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900026c6:	b580      	push	{r7, lr}
900026c8:	b082      	sub	sp, #8
900026ca:	af00      	add	r7, sp, #0
900026cc:	6078      	str	r0, [r7, #4]
900026ce:	460b      	mov	r3, r1
900026d0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
900026d2:	1cfa      	adds	r2, r7, #3
900026d4:	2301      	movs	r3, #1
900026d6:	2195      	movs	r1, #149	@ 0x95
900026d8:	6878      	ldr	r0, [r7, #4]
900026da:	f7ff ff6a 	bl	900025b2 <ft5336_write_reg>
900026de:	4603      	mov	r3, r0
}
900026e0:	4618      	mov	r0, r3
900026e2:	3708      	adds	r7, #8
900026e4:	46bd      	mov	sp, r7
900026e6:	bd80      	pop	{r7, pc}

900026e8 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
900026e8:	b580      	push	{r7, lr}
900026ea:	b082      	sub	sp, #8
900026ec:	af00      	add	r7, sp, #0
900026ee:	6078      	str	r0, [r7, #4]
900026f0:	460b      	mov	r3, r1
900026f2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
900026f4:	1cfa      	adds	r2, r7, #3
900026f6:	2301      	movs	r3, #1
900026f8:	2196      	movs	r1, #150	@ 0x96
900026fa:	6878      	ldr	r0, [r7, #4]
900026fc:	f7ff ff59 	bl	900025b2 <ft5336_write_reg>
90002700:	4603      	mov	r3, r0
}
90002702:	4618      	mov	r0, r3
90002704:	3708      	adds	r7, #8
90002706:	46bd      	mov	sp, r7
90002708:	bd80      	pop	{r7, pc}

9000270a <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
9000270a:	b580      	push	{r7, lr}
9000270c:	b082      	sub	sp, #8
9000270e:	af00      	add	r7, sp, #0
90002710:	6078      	str	r0, [r7, #4]
90002712:	460b      	mov	r3, r1
90002714:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
90002716:	1cfa      	adds	r2, r7, #3
90002718:	2301      	movs	r3, #1
9000271a:	21a4      	movs	r1, #164	@ 0xa4
9000271c:	6878      	ldr	r0, [r7, #4]
9000271e:	f7ff ff48 	bl	900025b2 <ft5336_write_reg>
90002722:	4603      	mov	r3, r0
}
90002724:	4618      	mov	r0, r3
90002726:	3708      	adds	r7, #8
90002728:	46bd      	mov	sp, r7
9000272a:	bd80      	pop	{r7, pc}

9000272c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
9000272c:	b580      	push	{r7, lr}
9000272e:	b084      	sub	sp, #16
90002730:	af00      	add	r7, sp, #0
90002732:	6078      	str	r0, [r7, #4]
90002734:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
90002736:	2301      	movs	r3, #1
90002738:	683a      	ldr	r2, [r7, #0]
9000273a:	21a8      	movs	r1, #168	@ 0xa8
9000273c:	6878      	ldr	r0, [r7, #4]
9000273e:	f7ff ff21 	bl	90002584 <ft5336_read_reg>
90002742:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90002744:	68fb      	ldr	r3, [r7, #12]
90002746:	2b00      	cmp	r3, #0
90002748:	d107      	bne.n	9000275a <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
9000274a:	683b      	ldr	r3, [r7, #0]
9000274c:	781a      	ldrb	r2, [r3, #0]
9000274e:	683b      	ldr	r3, [r7, #0]
90002750:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
90002752:	683b      	ldr	r3, [r7, #0]
90002754:	781a      	ldrb	r2, [r3, #0]
90002756:	683b      	ldr	r3, [r7, #0]
90002758:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
9000275a:	68fb      	ldr	r3, [r7, #12]
}
9000275c:	4618      	mov	r0, r3
9000275e:	3710      	adds	r7, #16
90002760:	46bd      	mov	sp, r7
90002762:	bd80      	pop	{r7, pc}

90002764 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90002764:	b580      	push	{r7, lr}
90002766:	b084      	sub	sp, #16
90002768:	af00      	add	r7, sp, #0
9000276a:	6078      	str	r0, [r7, #4]
9000276c:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
9000276e:	f04f 33ff 	mov.w	r3, #4294967295
90002772:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90002774:	683b      	ldr	r3, [r7, #0]
90002776:	681b      	ldr	r3, [r3, #0]
90002778:	4619      	mov	r1, r3
9000277a:	6878      	ldr	r0, [r7, #4]
9000277c:	f000 f832 	bl	900027e4 <MT48LC4M32B2_ClockEnable>
90002780:	4603      	mov	r3, r0
90002782:	2b00      	cmp	r3, #0
90002784:	d128      	bne.n	900027d8 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90002786:	2001      	movs	r0, #1
90002788:	f000 f8e2 	bl	90002950 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000278c:	683b      	ldr	r3, [r7, #0]
9000278e:	681b      	ldr	r3, [r3, #0]
90002790:	4619      	mov	r1, r3
90002792:	6878      	ldr	r0, [r7, #4]
90002794:	f000 f84a 	bl	9000282c <MT48LC4M32B2_Precharge>
90002798:	4603      	mov	r3, r0
9000279a:	2b00      	cmp	r3, #0
9000279c:	d11c      	bne.n	900027d8 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
9000279e:	683b      	ldr	r3, [r7, #0]
900027a0:	6819      	ldr	r1, [r3, #0]
900027a2:	683b      	ldr	r3, [r7, #0]
900027a4:	685b      	ldr	r3, [r3, #4]
900027a6:	461a      	mov	r2, r3
900027a8:	6878      	ldr	r0, [r7, #4]
900027aa:	f000 f897 	bl	900028dc <MT48LC4M32B2_RefreshMode>
900027ae:	4603      	mov	r3, r0
900027b0:	2b00      	cmp	r3, #0
900027b2:	d111      	bne.n	900027d8 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
900027b4:	6839      	ldr	r1, [r7, #0]
900027b6:	6878      	ldr	r0, [r7, #4]
900027b8:	f000 f85c 	bl	90002874 <MT48LC4M32B2_ModeRegConfig>
900027bc:	4603      	mov	r3, r0
900027be:	2b00      	cmp	r3, #0
900027c0:	d10a      	bne.n	900027d8 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
900027c2:	683b      	ldr	r3, [r7, #0]
900027c4:	689b      	ldr	r3, [r3, #8]
900027c6:	4619      	mov	r1, r3
900027c8:	6878      	ldr	r0, [r7, #4]
900027ca:	f000 f8ad 	bl	90002928 <MT48LC4M32B2_RefreshRate>
900027ce:	4603      	mov	r3, r0
900027d0:	2b00      	cmp	r3, #0
900027d2:	d101      	bne.n	900027d8 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
900027d4:	2300      	movs	r3, #0
900027d6:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
900027d8:	68fb      	ldr	r3, [r7, #12]
}
900027da:	4618      	mov	r0, r3
900027dc:	3710      	adds	r7, #16
900027de:	46bd      	mov	sp, r7
900027e0:	bd80      	pop	{r7, pc}
	...

900027e4 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900027e4:	b580      	push	{r7, lr}
900027e6:	b082      	sub	sp, #8
900027e8:	af00      	add	r7, sp, #0
900027ea:	6078      	str	r0, [r7, #4]
900027ec:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900027ee:	4b0e      	ldr	r3, [pc, #56]	@ (90002828 <MT48LC4M32B2_ClockEnable+0x44>)
900027f0:	2201      	movs	r2, #1
900027f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900027f4:	4a0c      	ldr	r2, [pc, #48]	@ (90002828 <MT48LC4M32B2_ClockEnable+0x44>)
900027f6:	683b      	ldr	r3, [r7, #0]
900027f8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900027fa:	4b0b      	ldr	r3, [pc, #44]	@ (90002828 <MT48LC4M32B2_ClockEnable+0x44>)
900027fc:	2201      	movs	r2, #1
900027fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90002800:	4b09      	ldr	r3, [pc, #36]	@ (90002828 <MT48LC4M32B2_ClockEnable+0x44>)
90002802:	2200      	movs	r2, #0
90002804:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90002806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000280a:	4907      	ldr	r1, [pc, #28]	@ (90002828 <MT48LC4M32B2_ClockEnable+0x44>)
9000280c:	6878      	ldr	r0, [r7, #4]
9000280e:	f009 f91b 	bl	9000ba48 <HAL_SDRAM_SendCommand>
90002812:	4603      	mov	r3, r0
90002814:	2b00      	cmp	r3, #0
90002816:	d002      	beq.n	9000281e <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90002818:	f04f 33ff 	mov.w	r3, #4294967295
9000281c:	e000      	b.n	90002820 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000281e:	2300      	movs	r3, #0
  }
}
90002820:	4618      	mov	r0, r3
90002822:	3708      	adds	r7, #8
90002824:	46bd      	mov	sp, r7
90002826:	bd80      	pop	{r7, pc}
90002828:	2000116c 	.word	0x2000116c

9000282c <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
9000282c:	b580      	push	{r7, lr}
9000282e:	b082      	sub	sp, #8
90002830:	af00      	add	r7, sp, #0
90002832:	6078      	str	r0, [r7, #4]
90002834:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90002836:	4b0e      	ldr	r3, [pc, #56]	@ (90002870 <MT48LC4M32B2_Precharge+0x44>)
90002838:	2202      	movs	r2, #2
9000283a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
9000283c:	4a0c      	ldr	r2, [pc, #48]	@ (90002870 <MT48LC4M32B2_Precharge+0x44>)
9000283e:	683b      	ldr	r3, [r7, #0]
90002840:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90002842:	4b0b      	ldr	r3, [pc, #44]	@ (90002870 <MT48LC4M32B2_Precharge+0x44>)
90002844:	2201      	movs	r2, #1
90002846:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90002848:	4b09      	ldr	r3, [pc, #36]	@ (90002870 <MT48LC4M32B2_Precharge+0x44>)
9000284a:	2200      	movs	r2, #0
9000284c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000284e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90002852:	4907      	ldr	r1, [pc, #28]	@ (90002870 <MT48LC4M32B2_Precharge+0x44>)
90002854:	6878      	ldr	r0, [r7, #4]
90002856:	f009 f8f7 	bl	9000ba48 <HAL_SDRAM_SendCommand>
9000285a:	4603      	mov	r3, r0
9000285c:	2b00      	cmp	r3, #0
9000285e:	d002      	beq.n	90002866 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90002860:	f04f 33ff 	mov.w	r3, #4294967295
90002864:	e000      	b.n	90002868 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90002866:	2300      	movs	r3, #0
  }
}
90002868:	4618      	mov	r0, r3
9000286a:	3708      	adds	r7, #8
9000286c:	46bd      	mov	sp, r7
9000286e:	bd80      	pop	{r7, pc}
90002870:	2000116c 	.word	0x2000116c

90002874 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90002874:	b580      	push	{r7, lr}
90002876:	b084      	sub	sp, #16
90002878:	af00      	add	r7, sp, #0
9000287a:	6078      	str	r0, [r7, #4]
9000287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000287e:	683b      	ldr	r3, [r7, #0]
90002880:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
90002882:	683b      	ldr	r3, [r7, #0]
90002884:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90002886:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90002888:	683b      	ldr	r3, [r7, #0]
9000288a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
9000288c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
9000288e:	683b      	ldr	r3, [r7, #0]
90002890:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90002892:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90002894:	683b      	ldr	r3, [r7, #0]
90002896:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90002898:	4313      	orrs	r3, r2
9000289a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000289c:	4b0e      	ldr	r3, [pc, #56]	@ (900028d8 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000289e:	2204      	movs	r2, #4
900028a0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
900028a2:	683b      	ldr	r3, [r7, #0]
900028a4:	681b      	ldr	r3, [r3, #0]
900028a6:	4a0c      	ldr	r2, [pc, #48]	@ (900028d8 <MT48LC4M32B2_ModeRegConfig+0x64>)
900028a8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900028aa:	4b0b      	ldr	r3, [pc, #44]	@ (900028d8 <MT48LC4M32B2_ModeRegConfig+0x64>)
900028ac:	2201      	movs	r2, #1
900028ae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
900028b0:	4a09      	ldr	r2, [pc, #36]	@ (900028d8 <MT48LC4M32B2_ModeRegConfig+0x64>)
900028b2:	68fb      	ldr	r3, [r7, #12]
900028b4:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900028b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900028ba:	4907      	ldr	r1, [pc, #28]	@ (900028d8 <MT48LC4M32B2_ModeRegConfig+0x64>)
900028bc:	6878      	ldr	r0, [r7, #4]
900028be:	f009 f8c3 	bl	9000ba48 <HAL_SDRAM_SendCommand>
900028c2:	4603      	mov	r3, r0
900028c4:	2b00      	cmp	r3, #0
900028c6:	d002      	beq.n	900028ce <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
900028c8:	f04f 33ff 	mov.w	r3, #4294967295
900028cc:	e000      	b.n	900028d0 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900028ce:	2300      	movs	r3, #0
  }
}
900028d0:	4618      	mov	r0, r3
900028d2:	3710      	adds	r7, #16
900028d4:	46bd      	mov	sp, r7
900028d6:	bd80      	pop	{r7, pc}
900028d8:	2000116c 	.word	0x2000116c

900028dc <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
900028dc:	b580      	push	{r7, lr}
900028de:	b084      	sub	sp, #16
900028e0:	af00      	add	r7, sp, #0
900028e2:	60f8      	str	r0, [r7, #12]
900028e4:	60b9      	str	r1, [r7, #8]
900028e6:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
900028e8:	4a0e      	ldr	r2, [pc, #56]	@ (90002924 <MT48LC4M32B2_RefreshMode+0x48>)
900028ea:	687b      	ldr	r3, [r7, #4]
900028ec:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
900028ee:	4a0d      	ldr	r2, [pc, #52]	@ (90002924 <MT48LC4M32B2_RefreshMode+0x48>)
900028f0:	68bb      	ldr	r3, [r7, #8]
900028f2:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
900028f4:	4b0b      	ldr	r3, [pc, #44]	@ (90002924 <MT48LC4M32B2_RefreshMode+0x48>)
900028f6:	2208      	movs	r2, #8
900028f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900028fa:	4b0a      	ldr	r3, [pc, #40]	@ (90002924 <MT48LC4M32B2_RefreshMode+0x48>)
900028fc:	2200      	movs	r2, #0
900028fe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90002900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90002904:	4907      	ldr	r1, [pc, #28]	@ (90002924 <MT48LC4M32B2_RefreshMode+0x48>)
90002906:	68f8      	ldr	r0, [r7, #12]
90002908:	f009 f89e 	bl	9000ba48 <HAL_SDRAM_SendCommand>
9000290c:	4603      	mov	r3, r0
9000290e:	2b00      	cmp	r3, #0
90002910:	d002      	beq.n	90002918 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90002912:	f04f 33ff 	mov.w	r3, #4294967295
90002916:	e000      	b.n	9000291a <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90002918:	2300      	movs	r3, #0
  }
}
9000291a:	4618      	mov	r0, r3
9000291c:	3710      	adds	r7, #16
9000291e:	46bd      	mov	sp, r7
90002920:	bd80      	pop	{r7, pc}
90002922:	bf00      	nop
90002924:	2000116c 	.word	0x2000116c

90002928 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
90002928:	b580      	push	{r7, lr}
9000292a:	b082      	sub	sp, #8
9000292c:	af00      	add	r7, sp, #0
9000292e:	6078      	str	r0, [r7, #4]
90002930:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90002932:	6839      	ldr	r1, [r7, #0]
90002934:	6878      	ldr	r0, [r7, #4]
90002936:	f009 f8bc 	bl	9000bab2 <HAL_SDRAM_ProgramRefreshRate>
9000293a:	4603      	mov	r3, r0
9000293c:	2b00      	cmp	r3, #0
9000293e:	d002      	beq.n	90002946 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90002940:	f04f 33ff 	mov.w	r3, #4294967295
90002944:	e000      	b.n	90002948 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
90002946:	2300      	movs	r3, #0
  }
}
90002948:	4618      	mov	r0, r3
9000294a:	3708      	adds	r7, #8
9000294c:	46bd      	mov	sp, r7
9000294e:	bd80      	pop	{r7, pc}

90002950 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90002950:	b580      	push	{r7, lr}
90002952:	b084      	sub	sp, #16
90002954:	af00      	add	r7, sp, #0
90002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90002958:	f002 f930 	bl	90004bbc <HAL_GetTick>
9000295c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
9000295e:	bf00      	nop
90002960:	f002 f92c 	bl	90004bbc <HAL_GetTick>
90002964:	4602      	mov	r2, r0
90002966:	68fb      	ldr	r3, [r7, #12]
90002968:	1ad3      	subs	r3, r2, r3
9000296a:	687a      	ldr	r2, [r7, #4]
9000296c:	429a      	cmp	r2, r3
9000296e:	d8f7      	bhi.n	90002960 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90002970:	2300      	movs	r3, #0
}
90002972:	4618      	mov	r0, r3
90002974:	3710      	adds	r7, #16
90002976:	46bd      	mov	sp, r7
90002978:	bd80      	pop	{r7, pc}
	...

9000297c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
9000297c:	b580      	push	{r7, lr}
9000297e:	b08a      	sub	sp, #40	@ 0x28
90002980:	af00      	add	r7, sp, #0
90002982:	4603      	mov	r3, r0
90002984:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90002986:	2300      	movs	r3, #0
90002988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
9000298a:	79fb      	ldrb	r3, [r7, #7]
9000298c:	2b00      	cmp	r3, #0
9000298e:	d10f      	bne.n	900029b0 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
90002990:	4b26      	ldr	r3, [pc, #152]	@ (90002a2c <BSP_LED_Init+0xb0>)
90002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002996:	4a25      	ldr	r2, [pc, #148]	@ (90002a2c <BSP_LED_Init+0xb0>)
90002998:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
9000299c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900029a0:	4b22      	ldr	r3, [pc, #136]	@ (90002a2c <BSP_LED_Init+0xb0>)
900029a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900029a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900029aa:	60fb      	str	r3, [r7, #12]
900029ac:	68fb      	ldr	r3, [r7, #12]
900029ae:	e015      	b.n	900029dc <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
900029b0:	79fb      	ldrb	r3, [r7, #7]
900029b2:	2b01      	cmp	r3, #1
900029b4:	d10f      	bne.n	900029d6 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
900029b6:	4b1d      	ldr	r3, [pc, #116]	@ (90002a2c <BSP_LED_Init+0xb0>)
900029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900029bc:	4a1b      	ldr	r2, [pc, #108]	@ (90002a2c <BSP_LED_Init+0xb0>)
900029be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900029c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900029c6:	4b19      	ldr	r3, [pc, #100]	@ (90002a2c <BSP_LED_Init+0xb0>)
900029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900029d0:	60bb      	str	r3, [r7, #8]
900029d2:	68bb      	ldr	r3, [r7, #8]
900029d4:	e002      	b.n	900029dc <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
900029d6:	f06f 0301 	mvn.w	r3, #1
900029da:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
900029dc:	79fb      	ldrb	r3, [r7, #7]
900029de:	4a14      	ldr	r2, [pc, #80]	@ (90002a30 <BSP_LED_Init+0xb4>)
900029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900029e4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900029e6:	2301      	movs	r3, #1
900029e8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
900029ea:	2301      	movs	r3, #1
900029ec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900029ee:	2303      	movs	r3, #3
900029f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
900029f2:	79fb      	ldrb	r3, [r7, #7]
900029f4:	4a0f      	ldr	r2, [pc, #60]	@ (90002a34 <BSP_LED_Init+0xb8>)
900029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900029fa:	f107 0210 	add.w	r2, r7, #16
900029fe:	4611      	mov	r1, r2
90002a00:	4618      	mov	r0, r3
90002a02:	f002 fd85 	bl	90005510 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
90002a06:	79fb      	ldrb	r3, [r7, #7]
90002a08:	4a0a      	ldr	r2, [pc, #40]	@ (90002a34 <BSP_LED_Init+0xb8>)
90002a0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90002a0e:	79fb      	ldrb	r3, [r7, #7]
90002a10:	4a07      	ldr	r2, [pc, #28]	@ (90002a30 <BSP_LED_Init+0xb4>)
90002a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002a16:	b29b      	uxth	r3, r3
90002a18:	2201      	movs	r2, #1
90002a1a:	4619      	mov	r1, r3
90002a1c:	f003 f832 	bl	90005a84 <HAL_GPIO_WritePin>
  return ret;
90002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
90002a22:	4618      	mov	r0, r3
90002a24:	3728      	adds	r7, #40	@ 0x28
90002a26:	46bd      	mov	sp, r7
90002a28:	bd80      	pop	{r7, pc}
90002a2a:	bf00      	nop
90002a2c:	58024400 	.word	0x58024400
90002a30:	900140d4 	.word	0x900140d4
90002a34:	20000034 	.word	0x20000034

90002a38 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
90002a38:	b580      	push	{r7, lr}
90002a3a:	b084      	sub	sp, #16
90002a3c:	af00      	add	r7, sp, #0
90002a3e:	4603      	mov	r3, r0
90002a40:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90002a42:	2300      	movs	r3, #0
90002a44:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
90002a46:	79fb      	ldrb	r3, [r7, #7]
90002a48:	4a08      	ldr	r2, [pc, #32]	@ (90002a6c <BSP_LED_On+0x34>)
90002a4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90002a4e:	79fb      	ldrb	r3, [r7, #7]
90002a50:	4a07      	ldr	r2, [pc, #28]	@ (90002a70 <BSP_LED_On+0x38>)
90002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002a56:	b29b      	uxth	r3, r3
90002a58:	2200      	movs	r2, #0
90002a5a:	4619      	mov	r1, r3
90002a5c:	f003 f812 	bl	90005a84 <HAL_GPIO_WritePin>
  return ret;
90002a60:	68fb      	ldr	r3, [r7, #12]
}
90002a62:	4618      	mov	r0, r3
90002a64:	3710      	adds	r7, #16
90002a66:	46bd      	mov	sp, r7
90002a68:	bd80      	pop	{r7, pc}
90002a6a:	bf00      	nop
90002a6c:	20000034 	.word	0x20000034
90002a70:	900140d4 	.word	0x900140d4

90002a74 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
90002a74:	b580      	push	{r7, lr}
90002a76:	b084      	sub	sp, #16
90002a78:	af00      	add	r7, sp, #0
90002a7a:	4603      	mov	r3, r0
90002a7c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90002a7e:	2300      	movs	r3, #0
90002a80:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
90002a82:	79fb      	ldrb	r3, [r7, #7]
90002a84:	4a08      	ldr	r2, [pc, #32]	@ (90002aa8 <BSP_LED_Off+0x34>)
90002a86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90002a8a:	79fb      	ldrb	r3, [r7, #7]
90002a8c:	4a07      	ldr	r2, [pc, #28]	@ (90002aac <BSP_LED_Off+0x38>)
90002a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002a92:	b29b      	uxth	r3, r3
90002a94:	2201      	movs	r2, #1
90002a96:	4619      	mov	r1, r3
90002a98:	f002 fff4 	bl	90005a84 <HAL_GPIO_WritePin>
  return ret;
90002a9c:	68fb      	ldr	r3, [r7, #12]
}
90002a9e:	4618      	mov	r0, r3
90002aa0:	3710      	adds	r7, #16
90002aa2:	46bd      	mov	sp, r7
90002aa4:	bd80      	pop	{r7, pc}
90002aa6:	bf00      	nop
90002aa8:	20000034 	.word	0x20000034
90002aac:	900140d4 	.word	0x900140d4

90002ab0 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
90002ab0:	b580      	push	{r7, lr}
90002ab2:	b082      	sub	sp, #8
90002ab4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90002ab6:	2300      	movs	r3, #0
90002ab8:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90002aba:	4b16      	ldr	r3, [pc, #88]	@ (90002b14 <BSP_I2C4_Init+0x64>)
90002abc:	4a16      	ldr	r2, [pc, #88]	@ (90002b18 <BSP_I2C4_Init+0x68>)
90002abe:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
90002ac0:	4b16      	ldr	r3, [pc, #88]	@ (90002b1c <BSP_I2C4_Init+0x6c>)
90002ac2:	681b      	ldr	r3, [r3, #0]
90002ac4:	2b00      	cmp	r3, #0
90002ac6:	d11f      	bne.n	90002b08 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90002ac8:	4b14      	ldr	r3, [pc, #80]	@ (90002b1c <BSP_I2C4_Init+0x6c>)
90002aca:	681b      	ldr	r3, [r3, #0]
90002acc:	3301      	adds	r3, #1
90002ace:	4a13      	ldr	r2, [pc, #76]	@ (90002b1c <BSP_I2C4_Init+0x6c>)
90002ad0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90002ad2:	4810      	ldr	r0, [pc, #64]	@ (90002b14 <BSP_I2C4_Init+0x64>)
90002ad4:	f005 fc28 	bl	90008328 <HAL_I2C_GetState>
90002ad8:	4603      	mov	r3, r0
90002ada:	2b00      	cmp	r3, #0
90002adc:	d114      	bne.n	90002b08 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
90002ade:	480d      	ldr	r0, [pc, #52]	@ (90002b14 <BSP_I2C4_Init+0x64>)
90002ae0:	f000 fb60 	bl	900031a4 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90002ae4:	f007 fbe6 	bl	9000a2b4 <HAL_RCC_GetPCLK2Freq>
90002ae8:	4603      	mov	r3, r0
90002aea:	490d      	ldr	r1, [pc, #52]	@ (90002b20 <BSP_I2C4_Init+0x70>)
90002aec:	4618      	mov	r0, r3
90002aee:	f000 f8e3 	bl	90002cb8 <I2C_GetTiming>
90002af2:	4603      	mov	r3, r0
90002af4:	4619      	mov	r1, r3
90002af6:	4807      	ldr	r0, [pc, #28]	@ (90002b14 <BSP_I2C4_Init+0x64>)
90002af8:	f000 f838 	bl	90002b6c <MX_I2C4_Init>
90002afc:	4603      	mov	r3, r0
90002afe:	2b00      	cmp	r3, #0
90002b00:	d002      	beq.n	90002b08 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
90002b02:	f06f 0307 	mvn.w	r3, #7
90002b06:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90002b08:	687b      	ldr	r3, [r7, #4]
}
90002b0a:	4618      	mov	r0, r3
90002b0c:	3708      	adds	r7, #8
90002b0e:	46bd      	mov	sp, r7
90002b10:	bd80      	pop	{r7, pc}
90002b12:	bf00      	nop
90002b14:	20001b84 	.word	0x20001b84
90002b18:	58001c00 	.word	0x58001c00
90002b1c:	2000117c 	.word	0x2000117c
90002b20:	000186a0 	.word	0x000186a0

90002b24 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
90002b24:	b580      	push	{r7, lr}
90002b26:	b082      	sub	sp, #8
90002b28:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
90002b2a:	2300      	movs	r3, #0
90002b2c:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
90002b2e:	4b0d      	ldr	r3, [pc, #52]	@ (90002b64 <BSP_I2C4_DeInit+0x40>)
90002b30:	681b      	ldr	r3, [r3, #0]
90002b32:	3b01      	subs	r3, #1
90002b34:	4a0b      	ldr	r2, [pc, #44]	@ (90002b64 <BSP_I2C4_DeInit+0x40>)
90002b36:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90002b38:	4b0a      	ldr	r3, [pc, #40]	@ (90002b64 <BSP_I2C4_DeInit+0x40>)
90002b3a:	681b      	ldr	r3, [r3, #0]
90002b3c:	2b00      	cmp	r3, #0
90002b3e:	d10b      	bne.n	90002b58 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
90002b40:	4809      	ldr	r0, [pc, #36]	@ (90002b68 <BSP_I2C4_DeInit+0x44>)
90002b42:	f000 fb9b 	bl	9000327c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90002b46:	4808      	ldr	r0, [pc, #32]	@ (90002b68 <BSP_I2C4_DeInit+0x44>)
90002b48:	f005 f97c 	bl	90007e44 <HAL_I2C_DeInit>
90002b4c:	4603      	mov	r3, r0
90002b4e:	2b00      	cmp	r3, #0
90002b50:	d002      	beq.n	90002b58 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
90002b52:	f06f 0307 	mvn.w	r3, #7
90002b56:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
90002b58:	687b      	ldr	r3, [r7, #4]
}
90002b5a:	4618      	mov	r0, r3
90002b5c:	3708      	adds	r7, #8
90002b5e:	46bd      	mov	sp, r7
90002b60:	bd80      	pop	{r7, pc}
90002b62:	bf00      	nop
90002b64:	2000117c 	.word	0x2000117c
90002b68:	20001b84 	.word	0x20001b84

90002b6c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90002b6c:	b580      	push	{r7, lr}
90002b6e:	b084      	sub	sp, #16
90002b70:	af00      	add	r7, sp, #0
90002b72:	6078      	str	r0, [r7, #4]
90002b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90002b76:	2300      	movs	r3, #0
90002b78:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90002b7a:	687b      	ldr	r3, [r7, #4]
90002b7c:	683a      	ldr	r2, [r7, #0]
90002b7e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90002b80:	687b      	ldr	r3, [r7, #4]
90002b82:	2200      	movs	r2, #0
90002b84:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90002b86:	687b      	ldr	r3, [r7, #4]
90002b88:	2201      	movs	r2, #1
90002b8a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90002b8c:	687b      	ldr	r3, [r7, #4]
90002b8e:	2200      	movs	r2, #0
90002b90:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90002b92:	687b      	ldr	r3, [r7, #4]
90002b94:	2200      	movs	r2, #0
90002b96:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90002b98:	687b      	ldr	r3, [r7, #4]
90002b9a:	2200      	movs	r2, #0
90002b9c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90002b9e:	687b      	ldr	r3, [r7, #4]
90002ba0:	2200      	movs	r2, #0
90002ba2:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90002ba4:	687b      	ldr	r3, [r7, #4]
90002ba6:	2200      	movs	r2, #0
90002ba8:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90002baa:	6878      	ldr	r0, [r7, #4]
90002bac:	f005 f8ae 	bl	90007d0c <HAL_I2C_Init>
90002bb0:	4603      	mov	r3, r0
90002bb2:	2b00      	cmp	r3, #0
90002bb4:	d002      	beq.n	90002bbc <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90002bb6:	2301      	movs	r3, #1
90002bb8:	73fb      	strb	r3, [r7, #15]
90002bba:	e014      	b.n	90002be6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90002bbc:	2300      	movs	r3, #0
90002bbe:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90002bc0:	68b9      	ldr	r1, [r7, #8]
90002bc2:	6878      	ldr	r0, [r7, #4]
90002bc4:	f005 fe8c 	bl	900088e0 <HAL_I2CEx_ConfigAnalogFilter>
90002bc8:	4603      	mov	r3, r0
90002bca:	2b00      	cmp	r3, #0
90002bcc:	d002      	beq.n	90002bd4 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
90002bce:	2301      	movs	r3, #1
90002bd0:	73fb      	strb	r3, [r7, #15]
90002bd2:	e008      	b.n	90002be6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90002bd4:	2100      	movs	r1, #0
90002bd6:	6878      	ldr	r0, [r7, #4]
90002bd8:	f005 fecd 	bl	90008976 <HAL_I2CEx_ConfigDigitalFilter>
90002bdc:	4603      	mov	r3, r0
90002bde:	2b00      	cmp	r3, #0
90002be0:	d001      	beq.n	90002be6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90002be2:	2301      	movs	r3, #1
90002be4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90002be6:	7bfb      	ldrb	r3, [r7, #15]
}
90002be8:	4618      	mov	r0, r3
90002bea:	3710      	adds	r7, #16
90002bec:	46bd      	mov	sp, r7
90002bee:	bd80      	pop	{r7, pc}

90002bf0 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90002bf0:	b580      	push	{r7, lr}
90002bf2:	b088      	sub	sp, #32
90002bf4:	af02      	add	r7, sp, #8
90002bf6:	60ba      	str	r2, [r7, #8]
90002bf8:	461a      	mov	r2, r3
90002bfa:	4603      	mov	r3, r0
90002bfc:	81fb      	strh	r3, [r7, #14]
90002bfe:	460b      	mov	r3, r1
90002c00:	81bb      	strh	r3, [r7, #12]
90002c02:	4613      	mov	r3, r2
90002c04:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90002c06:	89b9      	ldrh	r1, [r7, #12]
90002c08:	89f8      	ldrh	r0, [r7, #14]
90002c0a:	88fb      	ldrh	r3, [r7, #6]
90002c0c:	9300      	str	r3, [sp, #0]
90002c0e:	68bb      	ldr	r3, [r7, #8]
90002c10:	2201      	movs	r2, #1
90002c12:	f000 fb57 	bl	900032c4 <I2C4_WriteReg>
90002c16:	4603      	mov	r3, r0
90002c18:	2b00      	cmp	r3, #0
90002c1a:	d102      	bne.n	90002c22 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90002c1c:	2300      	movs	r3, #0
90002c1e:	617b      	str	r3, [r7, #20]
90002c20:	e00c      	b.n	90002c3c <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90002c22:	4809      	ldr	r0, [pc, #36]	@ (90002c48 <BSP_I2C4_WriteReg+0x58>)
90002c24:	f005 fb8e 	bl	90008344 <HAL_I2C_GetError>
90002c28:	4603      	mov	r3, r0
90002c2a:	2b04      	cmp	r3, #4
90002c2c:	d103      	bne.n	90002c36 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90002c2e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90002c32:	617b      	str	r3, [r7, #20]
90002c34:	e002      	b.n	90002c3c <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90002c36:	f06f 0303 	mvn.w	r3, #3
90002c3a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90002c3c:	697b      	ldr	r3, [r7, #20]
}
90002c3e:	4618      	mov	r0, r3
90002c40:	3718      	adds	r7, #24
90002c42:	46bd      	mov	sp, r7
90002c44:	bd80      	pop	{r7, pc}
90002c46:	bf00      	nop
90002c48:	20001b84 	.word	0x20001b84

90002c4c <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90002c4c:	b580      	push	{r7, lr}
90002c4e:	b088      	sub	sp, #32
90002c50:	af02      	add	r7, sp, #8
90002c52:	60ba      	str	r2, [r7, #8]
90002c54:	461a      	mov	r2, r3
90002c56:	4603      	mov	r3, r0
90002c58:	81fb      	strh	r3, [r7, #14]
90002c5a:	460b      	mov	r3, r1
90002c5c:	81bb      	strh	r3, [r7, #12]
90002c5e:	4613      	mov	r3, r2
90002c60:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90002c62:	89b9      	ldrh	r1, [r7, #12]
90002c64:	89f8      	ldrh	r0, [r7, #14]
90002c66:	88fb      	ldrh	r3, [r7, #6]
90002c68:	9300      	str	r3, [sp, #0]
90002c6a:	68bb      	ldr	r3, [r7, #8]
90002c6c:	2201      	movs	r2, #1
90002c6e:	f000 fb4f 	bl	90003310 <I2C4_ReadReg>
90002c72:	4603      	mov	r3, r0
90002c74:	2b00      	cmp	r3, #0
90002c76:	d102      	bne.n	90002c7e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90002c78:	2300      	movs	r3, #0
90002c7a:	617b      	str	r3, [r7, #20]
90002c7c:	e00c      	b.n	90002c98 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90002c7e:	4809      	ldr	r0, [pc, #36]	@ (90002ca4 <BSP_I2C4_ReadReg+0x58>)
90002c80:	f005 fb60 	bl	90008344 <HAL_I2C_GetError>
90002c84:	4603      	mov	r3, r0
90002c86:	2b04      	cmp	r3, #4
90002c88:	d103      	bne.n	90002c92 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90002c8a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90002c8e:	617b      	str	r3, [r7, #20]
90002c90:	e002      	b.n	90002c98 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90002c92:	f06f 0303 	mvn.w	r3, #3
90002c96:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90002c98:	697b      	ldr	r3, [r7, #20]
}
90002c9a:	4618      	mov	r0, r3
90002c9c:	3718      	adds	r7, #24
90002c9e:	46bd      	mov	sp, r7
90002ca0:	bd80      	pop	{r7, pc}
90002ca2:	bf00      	nop
90002ca4:	20001b84 	.word	0x20001b84

90002ca8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
90002ca8:	b580      	push	{r7, lr}
90002caa:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
90002cac:	f001 ff86 	bl	90004bbc <HAL_GetTick>
90002cb0:	4603      	mov	r3, r0
}
90002cb2:	4618      	mov	r0, r3
90002cb4:	bd80      	pop	{r7, pc}
	...

90002cb8 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90002cb8:	b580      	push	{r7, lr}
90002cba:	b086      	sub	sp, #24
90002cbc:	af00      	add	r7, sp, #0
90002cbe:	6078      	str	r0, [r7, #4]
90002cc0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90002cc2:	2300      	movs	r3, #0
90002cc4:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90002cc6:	687b      	ldr	r3, [r7, #4]
90002cc8:	2b00      	cmp	r3, #0
90002cca:	d06b      	beq.n	90002da4 <I2C_GetTiming+0xec>
90002ccc:	683b      	ldr	r3, [r7, #0]
90002cce:	2b00      	cmp	r3, #0
90002cd0:	d068      	beq.n	90002da4 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90002cd2:	2300      	movs	r3, #0
90002cd4:	613b      	str	r3, [r7, #16]
90002cd6:	e060      	b.n	90002d9a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90002cd8:	4a35      	ldr	r2, [pc, #212]	@ (90002db0 <I2C_GetTiming+0xf8>)
90002cda:	693b      	ldr	r3, [r7, #16]
90002cdc:	212c      	movs	r1, #44	@ 0x2c
90002cde:	fb01 f303 	mul.w	r3, r1, r3
90002ce2:	4413      	add	r3, r2
90002ce4:	3304      	adds	r3, #4
90002ce6:	681b      	ldr	r3, [r3, #0]
90002ce8:	683a      	ldr	r2, [r7, #0]
90002cea:	429a      	cmp	r2, r3
90002cec:	d352      	bcc.n	90002d94 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90002cee:	4a30      	ldr	r2, [pc, #192]	@ (90002db0 <I2C_GetTiming+0xf8>)
90002cf0:	693b      	ldr	r3, [r7, #16]
90002cf2:	212c      	movs	r1, #44	@ 0x2c
90002cf4:	fb01 f303 	mul.w	r3, r1, r3
90002cf8:	4413      	add	r3, r2
90002cfa:	3308      	adds	r3, #8
90002cfc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90002cfe:	683a      	ldr	r2, [r7, #0]
90002d00:	429a      	cmp	r2, r3
90002d02:	d847      	bhi.n	90002d94 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90002d04:	6939      	ldr	r1, [r7, #16]
90002d06:	6878      	ldr	r0, [r7, #4]
90002d08:	f000 f856 	bl	90002db8 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90002d0c:	6939      	ldr	r1, [r7, #16]
90002d0e:	6878      	ldr	r0, [r7, #4]
90002d10:	f000 f940 	bl	90002f94 <I2C_Compute_SCLL_SCLH>
90002d14:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90002d16:	68fb      	ldr	r3, [r7, #12]
90002d18:	2b7f      	cmp	r3, #127	@ 0x7f
90002d1a:	d842      	bhi.n	90002da2 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90002d1c:	4925      	ldr	r1, [pc, #148]	@ (90002db4 <I2C_GetTiming+0xfc>)
90002d1e:	68fa      	ldr	r2, [r7, #12]
90002d20:	4613      	mov	r3, r2
90002d22:	009b      	lsls	r3, r3, #2
90002d24:	4413      	add	r3, r2
90002d26:	009b      	lsls	r3, r3, #2
90002d28:	440b      	add	r3, r1
90002d2a:	681b      	ldr	r3, [r3, #0]
90002d2c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90002d2e:	4821      	ldr	r0, [pc, #132]	@ (90002db4 <I2C_GetTiming+0xfc>)
90002d30:	68fa      	ldr	r2, [r7, #12]
90002d32:	4613      	mov	r3, r2
90002d34:	009b      	lsls	r3, r3, #2
90002d36:	4413      	add	r3, r2
90002d38:	009b      	lsls	r3, r3, #2
90002d3a:	4403      	add	r3, r0
90002d3c:	3304      	adds	r3, #4
90002d3e:	681b      	ldr	r3, [r3, #0]
90002d40:	051b      	lsls	r3, r3, #20
90002d42:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90002d46:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90002d48:	481a      	ldr	r0, [pc, #104]	@ (90002db4 <I2C_GetTiming+0xfc>)
90002d4a:	68fa      	ldr	r2, [r7, #12]
90002d4c:	4613      	mov	r3, r2
90002d4e:	009b      	lsls	r3, r3, #2
90002d50:	4413      	add	r3, r2
90002d52:	009b      	lsls	r3, r3, #2
90002d54:	4403      	add	r3, r0
90002d56:	3308      	adds	r3, #8
90002d58:	681b      	ldr	r3, [r3, #0]
90002d5a:	041b      	lsls	r3, r3, #16
90002d5c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90002d60:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90002d62:	4814      	ldr	r0, [pc, #80]	@ (90002db4 <I2C_GetTiming+0xfc>)
90002d64:	68fa      	ldr	r2, [r7, #12]
90002d66:	4613      	mov	r3, r2
90002d68:	009b      	lsls	r3, r3, #2
90002d6a:	4413      	add	r3, r2
90002d6c:	009b      	lsls	r3, r3, #2
90002d6e:	4403      	add	r3, r0
90002d70:	330c      	adds	r3, #12
90002d72:	681b      	ldr	r3, [r3, #0]
90002d74:	021b      	lsls	r3, r3, #8
90002d76:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90002d78:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90002d7a:	480e      	ldr	r0, [pc, #56]	@ (90002db4 <I2C_GetTiming+0xfc>)
90002d7c:	68fa      	ldr	r2, [r7, #12]
90002d7e:	4613      	mov	r3, r2
90002d80:	009b      	lsls	r3, r3, #2
90002d82:	4413      	add	r3, r2
90002d84:	009b      	lsls	r3, r3, #2
90002d86:	4403      	add	r3, r0
90002d88:	3310      	adds	r3, #16
90002d8a:	681b      	ldr	r3, [r3, #0]
90002d8c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90002d8e:	430b      	orrs	r3, r1
90002d90:	617b      	str	r3, [r7, #20]
        }
        break;
90002d92:	e006      	b.n	90002da2 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90002d94:	693b      	ldr	r3, [r7, #16]
90002d96:	3301      	adds	r3, #1
90002d98:	613b      	str	r3, [r7, #16]
90002d9a:	693b      	ldr	r3, [r7, #16]
90002d9c:	2b02      	cmp	r3, #2
90002d9e:	d99b      	bls.n	90002cd8 <I2C_GetTiming+0x20>
90002da0:	e000      	b.n	90002da4 <I2C_GetTiming+0xec>
        break;
90002da2:	bf00      	nop
      }
    }
  }

  return ret;
90002da4:	697b      	ldr	r3, [r7, #20]
}
90002da6:	4618      	mov	r0, r3
90002da8:	3718      	adds	r7, #24
90002daa:	46bd      	mov	sp, r7
90002dac:	bd80      	pop	{r7, pc}
90002dae:	bf00      	nop
90002db0:	900140dc 	.word	0x900140dc
90002db4:	20001180 	.word	0x20001180

90002db8 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90002db8:	b480      	push	{r7}
90002dba:	b08f      	sub	sp, #60	@ 0x3c
90002dbc:	af00      	add	r7, sp, #0
90002dbe:	6078      	str	r0, [r7, #4]
90002dc0:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90002dc2:	2310      	movs	r3, #16
90002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90002dc6:	687b      	ldr	r3, [r7, #4]
90002dc8:	085a      	lsrs	r2, r3, #1
90002dca:	4b6e      	ldr	r3, [pc, #440]	@ (90002f84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90002dcc:	4413      	add	r3, r2
90002dce:	687a      	ldr	r2, [r7, #4]
90002dd0:	fbb3 f3f2 	udiv	r3, r3, r2
90002dd4:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90002dd6:	2332      	movs	r3, #50	@ 0x32
90002dd8:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90002dda:	f44f 7382 	mov.w	r3, #260	@ 0x104
90002dde:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90002de0:	4a69      	ldr	r2, [pc, #420]	@ (90002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90002de2:	683b      	ldr	r3, [r7, #0]
90002de4:	212c      	movs	r1, #44	@ 0x2c
90002de6:	fb01 f303 	mul.w	r3, r1, r3
90002dea:	4413      	add	r3, r2
90002dec:	3324      	adds	r3, #36	@ 0x24
90002dee:	681b      	ldr	r3, [r3, #0]
90002df0:	4618      	mov	r0, r3
90002df2:	4a65      	ldr	r2, [pc, #404]	@ (90002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90002df4:	683b      	ldr	r3, [r7, #0]
90002df6:	212c      	movs	r1, #44	@ 0x2c
90002df8:	fb01 f303 	mul.w	r3, r1, r3
90002dfc:	4413      	add	r3, r2
90002dfe:	330c      	adds	r3, #12
90002e00:	681b      	ldr	r3, [r3, #0]
90002e02:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90002e04:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90002e06:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90002e08:	495f      	ldr	r1, [pc, #380]	@ (90002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90002e0a:	683b      	ldr	r3, [r7, #0]
90002e0c:	202c      	movs	r0, #44	@ 0x2c
90002e0e:	fb00 f303 	mul.w	r3, r0, r3
90002e12:	440b      	add	r3, r1
90002e14:	3328      	adds	r3, #40	@ 0x28
90002e16:	681b      	ldr	r3, [r3, #0]
90002e18:	3303      	adds	r3, #3
90002e1a:	69f9      	ldr	r1, [r7, #28]
90002e1c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90002e20:	1ad3      	subs	r3, r2, r3
90002e22:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90002e24:	4a58      	ldr	r2, [pc, #352]	@ (90002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90002e26:	683b      	ldr	r3, [r7, #0]
90002e28:	212c      	movs	r1, #44	@ 0x2c
90002e2a:	fb01 f303 	mul.w	r3, r1, r3
90002e2e:	4413      	add	r3, r2
90002e30:	3310      	adds	r3, #16
90002e32:	681b      	ldr	r3, [r3, #0]
90002e34:	4618      	mov	r0, r3
90002e36:	4a54      	ldr	r2, [pc, #336]	@ (90002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90002e38:	683b      	ldr	r3, [r7, #0]
90002e3a:	212c      	movs	r1, #44	@ 0x2c
90002e3c:	fb01 f303 	mul.w	r3, r1, r3
90002e40:	4413      	add	r3, r2
90002e42:	3320      	adds	r3, #32
90002e44:	681b      	ldr	r3, [r3, #0]
90002e46:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90002e48:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90002e4a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90002e4c:	494e      	ldr	r1, [pc, #312]	@ (90002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90002e4e:	683b      	ldr	r3, [r7, #0]
90002e50:	202c      	movs	r0, #44	@ 0x2c
90002e52:	fb00 f303 	mul.w	r3, r0, r3
90002e56:	440b      	add	r3, r1
90002e58:	3328      	adds	r3, #40	@ 0x28
90002e5a:	681b      	ldr	r3, [r3, #0]
90002e5c:	3304      	adds	r3, #4
90002e5e:	69f9      	ldr	r1, [r7, #28]
90002e60:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90002e64:	1ad3      	subs	r3, r2, r3
90002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90002e68:	4a47      	ldr	r2, [pc, #284]	@ (90002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90002e6a:	683b      	ldr	r3, [r7, #0]
90002e6c:	212c      	movs	r1, #44	@ 0x2c
90002e6e:	fb01 f303 	mul.w	r3, r1, r3
90002e72:	4413      	add	r3, r2
90002e74:	3320      	adds	r3, #32
90002e76:	681b      	ldr	r3, [r3, #0]
90002e78:	4618      	mov	r0, r3
90002e7a:	4a43      	ldr	r2, [pc, #268]	@ (90002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90002e7c:	683b      	ldr	r3, [r7, #0]
90002e7e:	212c      	movs	r1, #44	@ 0x2c
90002e80:	fb01 f303 	mul.w	r3, r1, r3
90002e84:	4413      	add	r3, r2
90002e86:	3314      	adds	r3, #20
90002e88:	681b      	ldr	r3, [r3, #0]
90002e8a:	4403      	add	r3, r0
90002e8c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90002e90:	2b00      	cmp	r3, #0
90002e92:	dc01      	bgt.n	90002e98 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90002e94:	2300      	movs	r3, #0
90002e96:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90002e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002e9a:	2b00      	cmp	r3, #0
90002e9c:	dc01      	bgt.n	90002ea2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90002e9e:	2300      	movs	r3, #0
90002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90002ea2:	2300      	movs	r3, #0
90002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
90002ea6:	e062      	b.n	90002f6e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90002ea8:	2300      	movs	r3, #0
90002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
90002eac:	e059      	b.n	90002f62 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002eb0:	3301      	adds	r3, #1
90002eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002eb4:	3201      	adds	r2, #1
90002eb6:	fb03 f202 	mul.w	r2, r3, r2
90002eba:	69fb      	ldr	r3, [r7, #28]
90002ebc:	fb02 f303 	mul.w	r3, r2, r3
90002ec0:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90002ec2:	693b      	ldr	r3, [r7, #16]
90002ec4:	68fa      	ldr	r2, [r7, #12]
90002ec6:	429a      	cmp	r2, r3
90002ec8:	d348      	bcc.n	90002f5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90002eca:	2300      	movs	r3, #0
90002ecc:	623b      	str	r3, [r7, #32]
90002ece:	e042      	b.n	90002f56 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90002ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002ed2:	3301      	adds	r3, #1
90002ed4:	6a3a      	ldr	r2, [r7, #32]
90002ed6:	fb03 f202 	mul.w	r2, r3, r2
90002eda:	69fb      	ldr	r3, [r7, #28]
90002edc:	fb02 f303 	mul.w	r3, r2, r3
90002ee0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90002ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90002ee4:	68ba      	ldr	r2, [r7, #8]
90002ee6:	429a      	cmp	r2, r3
90002ee8:	d332      	bcc.n	90002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90002eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002eec:	68ba      	ldr	r2, [r7, #8]
90002eee:	429a      	cmp	r2, r3
90002ef0:	d82e      	bhi.n	90002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90002ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90002ef6:	429a      	cmp	r2, r3
90002ef8:	d02a      	beq.n	90002f50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90002efa:	4b24      	ldr	r3, [pc, #144]	@ (90002f8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90002efc:	681a      	ldr	r2, [r3, #0]
90002efe:	4924      	ldr	r1, [pc, #144]	@ (90002f90 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90002f00:	4613      	mov	r3, r2
90002f02:	009b      	lsls	r3, r3, #2
90002f04:	4413      	add	r3, r2
90002f06:	009b      	lsls	r3, r3, #2
90002f08:	440b      	add	r3, r1
90002f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002f0c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90002f0e:	4b1f      	ldr	r3, [pc, #124]	@ (90002f8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90002f10:	681a      	ldr	r2, [r3, #0]
90002f12:	491f      	ldr	r1, [pc, #124]	@ (90002f90 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90002f14:	4613      	mov	r3, r2
90002f16:	009b      	lsls	r3, r3, #2
90002f18:	4413      	add	r3, r2
90002f1a:	009b      	lsls	r3, r3, #2
90002f1c:	440b      	add	r3, r1
90002f1e:	3304      	adds	r3, #4
90002f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90002f22:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90002f24:	4b19      	ldr	r3, [pc, #100]	@ (90002f8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90002f26:	681a      	ldr	r2, [r3, #0]
90002f28:	4919      	ldr	r1, [pc, #100]	@ (90002f90 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90002f2a:	4613      	mov	r3, r2
90002f2c:	009b      	lsls	r3, r3, #2
90002f2e:	4413      	add	r3, r2
90002f30:	009b      	lsls	r3, r3, #2
90002f32:	440b      	add	r3, r1
90002f34:	3308      	adds	r3, #8
90002f36:	6a3a      	ldr	r2, [r7, #32]
90002f38:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90002f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002f3c:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90002f3e:	4b13      	ldr	r3, [pc, #76]	@ (90002f8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90002f40:	681b      	ldr	r3, [r3, #0]
90002f42:	3301      	adds	r3, #1
90002f44:	4a11      	ldr	r2, [pc, #68]	@ (90002f8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90002f46:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90002f48:	4b10      	ldr	r3, [pc, #64]	@ (90002f8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90002f4a:	681b      	ldr	r3, [r3, #0]
90002f4c:	2b7f      	cmp	r3, #127	@ 0x7f
90002f4e:	d812      	bhi.n	90002f76 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90002f50:	6a3b      	ldr	r3, [r7, #32]
90002f52:	3301      	adds	r3, #1
90002f54:	623b      	str	r3, [r7, #32]
90002f56:	6a3b      	ldr	r3, [r7, #32]
90002f58:	2b0f      	cmp	r3, #15
90002f5a:	d9b9      	bls.n	90002ed0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002f5e:	3301      	adds	r3, #1
90002f60:	627b      	str	r3, [r7, #36]	@ 0x24
90002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002f64:	2b0f      	cmp	r3, #15
90002f66:	d9a2      	bls.n	90002eae <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90002f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002f6a:	3301      	adds	r3, #1
90002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
90002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002f70:	2b0f      	cmp	r3, #15
90002f72:	d999      	bls.n	90002ea8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90002f74:	e000      	b.n	90002f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90002f76:	bf00      	nop
          }
        }
      }
    }
  }
}
90002f78:	373c      	adds	r7, #60	@ 0x3c
90002f7a:	46bd      	mov	sp, r7
90002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f80:	4770      	bx	lr
90002f82:	bf00      	nop
90002f84:	3b9aca00 	.word	0x3b9aca00
90002f88:	900140dc 	.word	0x900140dc
90002f8c:	20001b80 	.word	0x20001b80
90002f90:	20001180 	.word	0x20001180

90002f94 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90002f94:	b480      	push	{r7}
90002f96:	b093      	sub	sp, #76	@ 0x4c
90002f98:	af00      	add	r7, sp, #0
90002f9a:	6078      	str	r0, [r7, #4]
90002f9c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90002f9e:	f04f 33ff 	mov.w	r3, #4294967295
90002fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90002fa4:	687b      	ldr	r3, [r7, #4]
90002fa6:	085a      	lsrs	r2, r3, #1
90002fa8:	4b7a      	ldr	r3, [pc, #488]	@ (90003194 <I2C_Compute_SCLL_SCLH+0x200>)
90002faa:	4413      	add	r3, r2
90002fac:	687a      	ldr	r2, [r7, #4]
90002fae:	fbb3 f3f2 	udiv	r3, r3, r2
90002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90002fb4:	4a78      	ldr	r2, [pc, #480]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
90002fb6:	683b      	ldr	r3, [r7, #0]
90002fb8:	212c      	movs	r1, #44	@ 0x2c
90002fba:	fb01 f303 	mul.w	r3, r1, r3
90002fbe:	4413      	add	r3, r2
90002fc0:	681b      	ldr	r3, [r3, #0]
90002fc2:	085a      	lsrs	r2, r3, #1
90002fc4:	4b73      	ldr	r3, [pc, #460]	@ (90003194 <I2C_Compute_SCLL_SCLH+0x200>)
90002fc6:	4413      	add	r3, r2
90002fc8:	4973      	ldr	r1, [pc, #460]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
90002fca:	683a      	ldr	r2, [r7, #0]
90002fcc:	202c      	movs	r0, #44	@ 0x2c
90002fce:	fb00 f202 	mul.w	r2, r0, r2
90002fd2:	440a      	add	r2, r1
90002fd4:	6812      	ldr	r2, [r2, #0]
90002fd6:	fbb3 f3f2 	udiv	r3, r3, r2
90002fda:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90002fdc:	2332      	movs	r3, #50	@ 0x32
90002fde:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90002fe0:	4a6d      	ldr	r2, [pc, #436]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
90002fe2:	683b      	ldr	r3, [r7, #0]
90002fe4:	212c      	movs	r1, #44	@ 0x2c
90002fe6:	fb01 f303 	mul.w	r3, r1, r3
90002fea:	4413      	add	r3, r2
90002fec:	3328      	adds	r3, #40	@ 0x28
90002fee:	681a      	ldr	r2, [r3, #0]
90002ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002ff2:	fb02 f303 	mul.w	r3, r2, r3
90002ff6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90002ff8:	4a67      	ldr	r2, [pc, #412]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
90002ffa:	683b      	ldr	r3, [r7, #0]
90002ffc:	212c      	movs	r1, #44	@ 0x2c
90002ffe:	fb01 f303 	mul.w	r3, r1, r3
90003002:	4413      	add	r3, r2
90003004:	3304      	adds	r3, #4
90003006:	681b      	ldr	r3, [r3, #0]
90003008:	4a62      	ldr	r2, [pc, #392]	@ (90003194 <I2C_Compute_SCLL_SCLH+0x200>)
9000300a:	fbb2 f3f3 	udiv	r3, r2, r3
9000300e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90003010:	4a61      	ldr	r2, [pc, #388]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
90003012:	683b      	ldr	r3, [r7, #0]
90003014:	212c      	movs	r1, #44	@ 0x2c
90003016:	fb01 f303 	mul.w	r3, r1, r3
9000301a:	4413      	add	r3, r2
9000301c:	3308      	adds	r3, #8
9000301e:	681b      	ldr	r3, [r3, #0]
90003020:	4a5c      	ldr	r2, [pc, #368]	@ (90003194 <I2C_Compute_SCLL_SCLH+0x200>)
90003022:	fbb2 f3f3 	udiv	r3, r2, r3
90003026:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90003028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000302a:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
9000302c:	2300      	movs	r3, #0
9000302e:	637b      	str	r3, [r7, #52]	@ 0x34
90003030:	e0a3      	b.n	9000317a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90003032:	495a      	ldr	r1, [pc, #360]	@ (9000319c <I2C_Compute_SCLL_SCLH+0x208>)
90003034:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90003036:	4613      	mov	r3, r2
90003038:	009b      	lsls	r3, r3, #2
9000303a:	4413      	add	r3, r2
9000303c:	009b      	lsls	r3, r3, #2
9000303e:	440b      	add	r3, r1
90003040:	681b      	ldr	r3, [r3, #0]
90003042:	1c5a      	adds	r2, r3, #1
90003044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90003046:	fb02 f303 	mul.w	r3, r2, r3
9000304a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
9000304c:	2300      	movs	r3, #0
9000304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
90003050:	e08c      	b.n	9000316c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90003052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003054:	6a3b      	ldr	r3, [r7, #32]
90003056:	441a      	add	r2, r3
90003058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000305a:	3301      	adds	r3, #1
9000305c:	6979      	ldr	r1, [r7, #20]
9000305e:	fb03 f101 	mul.w	r1, r3, r1
90003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90003064:	005b      	lsls	r3, r3, #1
90003066:	440b      	add	r3, r1
90003068:	4413      	add	r3, r2
9000306a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
9000306c:	4a4a      	ldr	r2, [pc, #296]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
9000306e:	683b      	ldr	r3, [r7, #0]
90003070:	212c      	movs	r1, #44	@ 0x2c
90003072:	fb01 f303 	mul.w	r3, r1, r3
90003076:	4413      	add	r3, r2
90003078:	3318      	adds	r3, #24
9000307a:	681b      	ldr	r3, [r3, #0]
9000307c:	693a      	ldr	r2, [r7, #16]
9000307e:	429a      	cmp	r2, r3
90003080:	d971      	bls.n	90003166 <I2C_Compute_SCLL_SCLH+0x1d2>
90003082:	693a      	ldr	r2, [r7, #16]
90003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90003086:	1ad2      	subs	r2, r2, r3
90003088:	6a3b      	ldr	r3, [r7, #32]
9000308a:	1ad3      	subs	r3, r2, r3
9000308c:	089b      	lsrs	r3, r3, #2
9000308e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90003090:	429a      	cmp	r2, r3
90003092:	d268      	bcs.n	90003166 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90003094:	2300      	movs	r3, #0
90003096:	63bb      	str	r3, [r7, #56]	@ 0x38
90003098:	e062      	b.n	90003160 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
9000309a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000309c:	6a3b      	ldr	r3, [r7, #32]
9000309e:	441a      	add	r2, r3
900030a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900030a2:	3301      	adds	r3, #1
900030a4:	6979      	ldr	r1, [r7, #20]
900030a6:	fb03 f101 	mul.w	r1, r3, r1
900030aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900030ac:	005b      	lsls	r3, r3, #1
900030ae:	440b      	add	r3, r1
900030b0:	4413      	add	r3, r2
900030b2:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
900030b4:	693a      	ldr	r2, [r7, #16]
900030b6:	68fb      	ldr	r3, [r7, #12]
900030b8:	441a      	add	r2, r3
900030ba:	4937      	ldr	r1, [pc, #220]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
900030bc:	683b      	ldr	r3, [r7, #0]
900030be:	202c      	movs	r0, #44	@ 0x2c
900030c0:	fb00 f303 	mul.w	r3, r0, r3
900030c4:	440b      	add	r3, r1
900030c6:	3320      	adds	r3, #32
900030c8:	681b      	ldr	r3, [r3, #0]
900030ca:	441a      	add	r2, r3
900030cc:	4932      	ldr	r1, [pc, #200]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
900030ce:	683b      	ldr	r3, [r7, #0]
900030d0:	202c      	movs	r0, #44	@ 0x2c
900030d2:	fb00 f303 	mul.w	r3, r0, r3
900030d6:	440b      	add	r3, r1
900030d8:	3324      	adds	r3, #36	@ 0x24
900030da:	681b      	ldr	r3, [r3, #0]
900030dc:	4413      	add	r3, r2
900030de:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900030e0:	68ba      	ldr	r2, [r7, #8]
900030e2:	69bb      	ldr	r3, [r7, #24]
900030e4:	429a      	cmp	r2, r3
900030e6:	d338      	bcc.n	9000315a <I2C_Compute_SCLL_SCLH+0x1c6>
900030e8:	68ba      	ldr	r2, [r7, #8]
900030ea:	69fb      	ldr	r3, [r7, #28]
900030ec:	429a      	cmp	r2, r3
900030ee:	d834      	bhi.n	9000315a <I2C_Compute_SCLL_SCLH+0x1c6>
900030f0:	4a29      	ldr	r2, [pc, #164]	@ (90003198 <I2C_Compute_SCLL_SCLH+0x204>)
900030f2:	683b      	ldr	r3, [r7, #0]
900030f4:	212c      	movs	r1, #44	@ 0x2c
900030f6:	fb01 f303 	mul.w	r3, r1, r3
900030fa:	4413      	add	r3, r2
900030fc:	331c      	adds	r3, #28
900030fe:	681b      	ldr	r3, [r3, #0]
90003100:	68fa      	ldr	r2, [r7, #12]
90003102:	429a      	cmp	r2, r3
90003104:	d329      	bcc.n	9000315a <I2C_Compute_SCLL_SCLH+0x1c6>
90003106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90003108:	68fb      	ldr	r3, [r7, #12]
9000310a:	429a      	cmp	r2, r3
9000310c:	d225      	bcs.n	9000315a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
9000310e:	68ba      	ldr	r2, [r7, #8]
90003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90003112:	1ad3      	subs	r3, r2, r3
90003114:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90003116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003118:	2b00      	cmp	r3, #0
9000311a:	da02      	bge.n	90003122 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
9000311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000311e:	425b      	negs	r3, r3
90003120:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90003122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003124:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90003126:	429a      	cmp	r2, r3
90003128:	d917      	bls.n	9000315a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
9000312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000312c:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
9000312e:	491b      	ldr	r1, [pc, #108]	@ (9000319c <I2C_Compute_SCLL_SCLH+0x208>)
90003130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90003132:	4613      	mov	r3, r2
90003134:	009b      	lsls	r3, r3, #2
90003136:	4413      	add	r3, r2
90003138:	009b      	lsls	r3, r3, #2
9000313a:	440b      	add	r3, r1
9000313c:	3310      	adds	r3, #16
9000313e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90003140:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90003142:	4916      	ldr	r1, [pc, #88]	@ (9000319c <I2C_Compute_SCLL_SCLH+0x208>)
90003144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90003146:	4613      	mov	r3, r2
90003148:	009b      	lsls	r3, r3, #2
9000314a:	4413      	add	r3, r2
9000314c:	009b      	lsls	r3, r3, #2
9000314e:	440b      	add	r3, r1
90003150:	330c      	adds	r3, #12
90003152:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90003154:	601a      	str	r2, [r3, #0]
              ret = count;
90003156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90003158:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
9000315a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000315c:	3301      	adds	r3, #1
9000315e:	63bb      	str	r3, [r7, #56]	@ 0x38
90003160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90003162:	2bff      	cmp	r3, #255	@ 0xff
90003164:	d999      	bls.n	9000309a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90003166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90003168:	3301      	adds	r3, #1
9000316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000316c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000316e:	2bff      	cmp	r3, #255	@ 0xff
90003170:	f67f af6f 	bls.w	90003052 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90003176:	3301      	adds	r3, #1
90003178:	637b      	str	r3, [r7, #52]	@ 0x34
9000317a:	4b09      	ldr	r3, [pc, #36]	@ (900031a0 <I2C_Compute_SCLL_SCLH+0x20c>)
9000317c:	681b      	ldr	r3, [r3, #0]
9000317e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90003180:	429a      	cmp	r2, r3
90003182:	f4ff af56 	bcc.w	90003032 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90003186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90003188:	4618      	mov	r0, r3
9000318a:	374c      	adds	r7, #76	@ 0x4c
9000318c:	46bd      	mov	sp, r7
9000318e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003192:	4770      	bx	lr
90003194:	3b9aca00 	.word	0x3b9aca00
90003198:	900140dc 	.word	0x900140dc
9000319c:	20001180 	.word	0x20001180
900031a0:	20001b80 	.word	0x20001b80

900031a4 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
900031a4:	b580      	push	{r7, lr}
900031a6:	b08a      	sub	sp, #40	@ 0x28
900031a8:	af00      	add	r7, sp, #0
900031aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
900031ac:	4b31      	ldr	r3, [pc, #196]	@ (90003274 <I2C4_MspInit+0xd0>)
900031ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031b2:	4a30      	ldr	r2, [pc, #192]	@ (90003274 <I2C4_MspInit+0xd0>)
900031b4:	f043 0308 	orr.w	r3, r3, #8
900031b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031bc:	4b2d      	ldr	r3, [pc, #180]	@ (90003274 <I2C4_MspInit+0xd0>)
900031be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031c2:	f003 0308 	and.w	r3, r3, #8
900031c6:	613b      	str	r3, [r7, #16]
900031c8:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
900031ca:	4b2a      	ldr	r3, [pc, #168]	@ (90003274 <I2C4_MspInit+0xd0>)
900031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031d0:	4a28      	ldr	r2, [pc, #160]	@ (90003274 <I2C4_MspInit+0xd0>)
900031d2:	f043 0308 	orr.w	r3, r3, #8
900031d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031da:	4b26      	ldr	r3, [pc, #152]	@ (90003274 <I2C4_MspInit+0xd0>)
900031dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031e0:	f003 0308 	and.w	r3, r3, #8
900031e4:	60fb      	str	r3, [r7, #12]
900031e6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
900031e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
900031ec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
900031ee:	2312      	movs	r3, #18
900031f0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
900031f2:	2300      	movs	r3, #0
900031f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900031f6:	2302      	movs	r3, #2
900031f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
900031fa:	2304      	movs	r3, #4
900031fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
900031fe:	f107 0314 	add.w	r3, r7, #20
90003202:	4619      	mov	r1, r3
90003204:	481c      	ldr	r0, [pc, #112]	@ (90003278 <I2C4_MspInit+0xd4>)
90003206:	f002 f983 	bl	90005510 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
9000320a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
9000320e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90003210:	2312      	movs	r3, #18
90003212:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90003214:	2300      	movs	r3, #0
90003216:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90003218:	2302      	movs	r3, #2
9000321a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
9000321c:	2304      	movs	r3, #4
9000321e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90003220:	f107 0314 	add.w	r3, r7, #20
90003224:	4619      	mov	r1, r3
90003226:	4814      	ldr	r0, [pc, #80]	@ (90003278 <I2C4_MspInit+0xd4>)
90003228:	f002 f972 	bl	90005510 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
9000322c:	4b11      	ldr	r3, [pc, #68]	@ (90003274 <I2C4_MspInit+0xd0>)
9000322e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003232:	4a10      	ldr	r2, [pc, #64]	@ (90003274 <I2C4_MspInit+0xd0>)
90003234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90003238:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
9000323c:	4b0d      	ldr	r3, [pc, #52]	@ (90003274 <I2C4_MspInit+0xd0>)
9000323e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90003246:	60bb      	str	r3, [r7, #8]
90003248:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
9000324a:	4b0a      	ldr	r3, [pc, #40]	@ (90003274 <I2C4_MspInit+0xd0>)
9000324c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90003250:	4a08      	ldr	r2, [pc, #32]	@ (90003274 <I2C4_MspInit+0xd0>)
90003252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90003256:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
9000325a:	4b06      	ldr	r3, [pc, #24]	@ (90003274 <I2C4_MspInit+0xd0>)
9000325c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90003260:	4a04      	ldr	r2, [pc, #16]	@ (90003274 <I2C4_MspInit+0xd0>)
90003262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90003266:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
9000326a:	bf00      	nop
9000326c:	3728      	adds	r7, #40	@ 0x28
9000326e:	46bd      	mov	sp, r7
90003270:	bd80      	pop	{r7, pc}
90003272:	bf00      	nop
90003274:	58024400 	.word	0x58024400
90003278:	58020c00 	.word	0x58020c00

9000327c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
9000327c:	b580      	push	{r7, lr}
9000327e:	b088      	sub	sp, #32
90003280:	af00      	add	r7, sp, #0
90003282:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
90003284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90003288:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
9000328a:	68fb      	ldr	r3, [r7, #12]
9000328c:	4619      	mov	r1, r3
9000328e:	480b      	ldr	r0, [pc, #44]	@ (900032bc <I2C4_MspDeInit+0x40>)
90003290:	f002 faee 	bl	90005870 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
90003294:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90003298:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
9000329a:	68fb      	ldr	r3, [r7, #12]
9000329c:	4619      	mov	r1, r3
9000329e:	4807      	ldr	r0, [pc, #28]	@ (900032bc <I2C4_MspDeInit+0x40>)
900032a0:	f002 fae6 	bl	90005870 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
900032a4:	4b06      	ldr	r3, [pc, #24]	@ (900032c0 <I2C4_MspDeInit+0x44>)
900032a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900032aa:	4a05      	ldr	r2, [pc, #20]	@ (900032c0 <I2C4_MspDeInit+0x44>)
900032ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
900032b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
900032b4:	bf00      	nop
900032b6:	3720      	adds	r7, #32
900032b8:	46bd      	mov	sp, r7
900032ba:	bd80      	pop	{r7, pc}
900032bc:	58020c00 	.word	0x58020c00
900032c0:	58024400 	.word	0x58024400

900032c4 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
900032c4:	b580      	push	{r7, lr}
900032c6:	b088      	sub	sp, #32
900032c8:	af04      	add	r7, sp, #16
900032ca:	607b      	str	r3, [r7, #4]
900032cc:	4603      	mov	r3, r0
900032ce:	81fb      	strh	r3, [r7, #14]
900032d0:	460b      	mov	r3, r1
900032d2:	81bb      	strh	r3, [r7, #12]
900032d4:	4613      	mov	r3, r2
900032d6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900032d8:	8978      	ldrh	r0, [r7, #10]
900032da:	89ba      	ldrh	r2, [r7, #12]
900032dc:	89f9      	ldrh	r1, [r7, #14]
900032de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
900032e2:	9302      	str	r3, [sp, #8]
900032e4:	8b3b      	ldrh	r3, [r7, #24]
900032e6:	9301      	str	r3, [sp, #4]
900032e8:	687b      	ldr	r3, [r7, #4]
900032ea:	9300      	str	r3, [sp, #0]
900032ec:	4603      	mov	r3, r0
900032ee:	4807      	ldr	r0, [pc, #28]	@ (9000330c <I2C4_WriteReg+0x48>)
900032f0:	f004 fdec 	bl	90007ecc <HAL_I2C_Mem_Write>
900032f4:	4603      	mov	r3, r0
900032f6:	2b00      	cmp	r3, #0
900032f8:	d101      	bne.n	900032fe <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
900032fa:	2300      	movs	r3, #0
900032fc:	e001      	b.n	90003302 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
900032fe:	f06f 0307 	mvn.w	r3, #7
}
90003302:	4618      	mov	r0, r3
90003304:	3710      	adds	r7, #16
90003306:	46bd      	mov	sp, r7
90003308:	bd80      	pop	{r7, pc}
9000330a:	bf00      	nop
9000330c:	20001b84 	.word	0x20001b84

90003310 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90003310:	b580      	push	{r7, lr}
90003312:	b088      	sub	sp, #32
90003314:	af04      	add	r7, sp, #16
90003316:	607b      	str	r3, [r7, #4]
90003318:	4603      	mov	r3, r0
9000331a:	81fb      	strh	r3, [r7, #14]
9000331c:	460b      	mov	r3, r1
9000331e:	81bb      	strh	r3, [r7, #12]
90003320:	4613      	mov	r3, r2
90003322:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90003324:	8978      	ldrh	r0, [r7, #10]
90003326:	89ba      	ldrh	r2, [r7, #12]
90003328:	89f9      	ldrh	r1, [r7, #14]
9000332a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000332e:	9302      	str	r3, [sp, #8]
90003330:	8b3b      	ldrh	r3, [r7, #24]
90003332:	9301      	str	r3, [sp, #4]
90003334:	687b      	ldr	r3, [r7, #4]
90003336:	9300      	str	r3, [sp, #0]
90003338:	4603      	mov	r3, r0
9000333a:	4807      	ldr	r0, [pc, #28]	@ (90003358 <I2C4_ReadReg+0x48>)
9000333c:	f004 feda 	bl	900080f4 <HAL_I2C_Mem_Read>
90003340:	4603      	mov	r3, r0
90003342:	2b00      	cmp	r3, #0
90003344:	d101      	bne.n	9000334a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90003346:	2300      	movs	r3, #0
90003348:	e001      	b.n	9000334e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
9000334a:	f06f 0307 	mvn.w	r3, #7
}
9000334e:	4618      	mov	r0, r3
90003350:	3710      	adds	r7, #16
90003352:	46bd      	mov	sp, r7
90003354:	bd80      	pop	{r7, pc}
90003356:	bf00      	nop
90003358:	20001b84 	.word	0x20001b84

9000335c <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
9000335c:	b580      	push	{r7, lr}
9000335e:	b084      	sub	sp, #16
90003360:	af02      	add	r7, sp, #8
90003362:	6078      	str	r0, [r7, #4]
90003364:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90003366:	f44f 7388 	mov.w	r3, #272	@ 0x110
9000336a:	9300      	str	r3, [sp, #0]
9000336c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90003370:	2200      	movs	r2, #0
90003372:	6839      	ldr	r1, [r7, #0]
90003374:	6878      	ldr	r0, [r7, #4]
90003376:	f000 f805 	bl	90003384 <BSP_LCD_InitEx>
9000337a:	4603      	mov	r3, r0
}
9000337c:	4618      	mov	r0, r3
9000337e:	3708      	adds	r7, #8
90003380:	46bd      	mov	sp, r7
90003382:	bd80      	pop	{r7, pc}

90003384 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90003384:	b580      	push	{r7, lr}
90003386:	b09e      	sub	sp, #120	@ 0x78
90003388:	af00      	add	r7, sp, #0
9000338a:	60f8      	str	r0, [r7, #12]
9000338c:	60b9      	str	r1, [r7, #8]
9000338e:	607a      	str	r2, [r7, #4]
90003390:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90003392:	2300      	movs	r3, #0
90003394:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90003396:	2300      	movs	r3, #0
90003398:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
9000339a:	68bb      	ldr	r3, [r7, #8]
9000339c:	2b01      	cmp	r3, #1
9000339e:	d808      	bhi.n	900033b2 <BSP_LCD_InitEx+0x2e>
900033a0:	68fb      	ldr	r3, [r7, #12]
900033a2:	2b00      	cmp	r3, #0
900033a4:	d105      	bne.n	900033b2 <BSP_LCD_InitEx+0x2e>
900033a6:	687b      	ldr	r3, [r7, #4]
900033a8:	2b02      	cmp	r3, #2
900033aa:	d006      	beq.n	900033ba <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
900033ac:	687b      	ldr	r3, [r7, #4]
900033ae:	2b00      	cmp	r3, #0
900033b0:	d003      	beq.n	900033ba <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900033b2:	f06f 0301 	mvn.w	r3, #1
900033b6:	677b      	str	r3, [r7, #116]	@ 0x74
900033b8:	e0a8      	b.n	9000350c <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
900033ba:	687b      	ldr	r3, [r7, #4]
900033bc:	2b02      	cmp	r3, #2
900033be:	d109      	bne.n	900033d4 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
900033c0:	2302      	movs	r3, #2
900033c2:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
900033c4:	4a54      	ldr	r2, [pc, #336]	@ (90003518 <BSP_LCD_InitEx+0x194>)
900033c6:	68fb      	ldr	r3, [r7, #12]
900033c8:	015b      	lsls	r3, r3, #5
900033ca:	4413      	add	r3, r2
900033cc:	3310      	adds	r3, #16
900033ce:	2202      	movs	r2, #2
900033d0:	601a      	str	r2, [r3, #0]
900033d2:	e008      	b.n	900033e6 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
900033d4:	2300      	movs	r3, #0
900033d6:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
900033d8:	4a4f      	ldr	r2, [pc, #316]	@ (90003518 <BSP_LCD_InitEx+0x194>)
900033da:	68fb      	ldr	r3, [r7, #12]
900033dc:	015b      	lsls	r3, r3, #5
900033de:	4413      	add	r3, r2
900033e0:	3310      	adds	r3, #16
900033e2:	2204      	movs	r2, #4
900033e4:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
900033e6:	4a4c      	ldr	r2, [pc, #304]	@ (90003518 <BSP_LCD_InitEx+0x194>)
900033e8:	68fb      	ldr	r3, [r7, #12]
900033ea:	015b      	lsls	r3, r3, #5
900033ec:	4413      	add	r3, r2
900033ee:	330c      	adds	r3, #12
900033f0:	687a      	ldr	r2, [r7, #4]
900033f2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
900033f4:	4a48      	ldr	r2, [pc, #288]	@ (90003518 <BSP_LCD_InitEx+0x194>)
900033f6:	68fb      	ldr	r3, [r7, #12]
900033f8:	015b      	lsls	r3, r3, #5
900033fa:	4413      	add	r3, r2
900033fc:	683a      	ldr	r2, [r7, #0]
900033fe:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90003400:	4a45      	ldr	r2, [pc, #276]	@ (90003518 <BSP_LCD_InitEx+0x194>)
90003402:	68fb      	ldr	r3, [r7, #12]
90003404:	015b      	lsls	r3, r3, #5
90003406:	4413      	add	r3, r2
90003408:	3304      	adds	r3, #4
9000340a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
9000340e:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90003410:	4b42      	ldr	r3, [pc, #264]	@ (9000351c <BSP_LCD_InitEx+0x198>)
90003412:	4a43      	ldr	r2, [pc, #268]	@ (90003520 <BSP_LCD_InitEx+0x19c>)
90003414:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90003416:	4b43      	ldr	r3, [pc, #268]	@ (90003524 <BSP_LCD_InitEx+0x1a0>)
90003418:	4a43      	ldr	r2, [pc, #268]	@ (90003528 <BSP_LCD_InitEx+0x1a4>)
9000341a:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
9000341c:	483f      	ldr	r0, [pc, #252]	@ (9000351c <BSP_LCD_InitEx+0x198>)
9000341e:	f000 fda3 	bl	90003f68 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90003422:	4840      	ldr	r0, [pc, #256]	@ (90003524 <BSP_LCD_InitEx+0x1a0>)
90003424:	f000 fe6c 	bl	90004100 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90003428:	4b40      	ldr	r3, [pc, #256]	@ (9000352c <BSP_LCD_InitEx+0x1a8>)
9000342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
9000342c:	4b40      	ldr	r3, [pc, #256]	@ (90003530 <BSP_LCD_InitEx+0x1ac>)
9000342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90003430:	2370      	movs	r3, #112	@ 0x70
90003432:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90003434:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90003438:	f107 0344 	add.w	r3, r7, #68	@ 0x44
9000343c:	4611      	mov	r1, r2
9000343e:	4618      	mov	r0, r3
90003440:	f7fe fe30 	bl	900020a4 <FT5336_RegisterBusIO>
90003444:	4603      	mov	r3, r0
90003446:	2b00      	cmp	r3, #0
90003448:	da03      	bge.n	90003452 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000344a:	f06f 0304 	mvn.w	r3, #4
9000344e:	677b      	str	r3, [r7, #116]	@ 0x74
90003450:	e02b      	b.n	900034aa <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90003452:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90003456:	f107 0344 	add.w	r3, r7, #68	@ 0x44
9000345a:	4611      	mov	r1, r2
9000345c:	4618      	mov	r0, r3
9000345e:	f7fe ff1b 	bl	90002298 <FT5336_ReadID>
90003462:	4603      	mov	r3, r0
90003464:	2b00      	cmp	r3, #0
90003466:	da03      	bge.n	90003470 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90003468:	f06f 0304 	mvn.w	r3, #4
9000346c:	677b      	str	r3, [r7, #116]	@ 0x74
9000346e:	e01c      	b.n	900034aa <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90003470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90003472:	2b51      	cmp	r3, #81	@ 0x51
90003474:	d003      	beq.n	9000347e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90003476:	f06f 0306 	mvn.w	r3, #6
9000347a:	677b      	str	r3, [r7, #116]	@ 0x74
9000347c:	e015      	b.n	900034aa <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
9000347e:	4827      	ldr	r0, [pc, #156]	@ (9000351c <BSP_LCD_InitEx+0x198>)
90003480:	f7fe f88e 	bl	900015a0 <MX_LTDC_ClockConfig>
90003484:	4603      	mov	r3, r0
90003486:	2b00      	cmp	r3, #0
90003488:	d003      	beq.n	90003492 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
9000348a:	f06f 0303 	mvn.w	r3, #3
9000348e:	677b      	str	r3, [r7, #116]	@ 0x74
90003490:	e00b      	b.n	900034aa <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90003492:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90003496:	6839      	ldr	r1, [r7, #0]
90003498:	4820      	ldr	r0, [pc, #128]	@ (9000351c <BSP_LCD_InitEx+0x198>)
9000349a:	f000 f84d 	bl	90003538 <MX_LTDC_Init>
9000349e:	4603      	mov	r3, r0
900034a0:	2b00      	cmp	r3, #0
900034a2:	d002      	beq.n	900034aa <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900034a4:	f06f 0303 	mvn.w	r3, #3
900034a8:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
900034aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
900034ac:	2b00      	cmp	r3, #0
900034ae:	d12d      	bne.n	9000350c <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900034b0:	2000      	movs	r0, #0
900034b2:	f000 feb7 	bl	90004224 <BSP_SDRAM_Init>
900034b6:	4603      	mov	r3, r0
900034b8:	2b00      	cmp	r3, #0
900034ba:	d002      	beq.n	900034c2 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
900034bc:	f06f 0303 	mvn.w	r3, #3
900034c0:	e025      	b.n	9000350e <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
900034c2:	2300      	movs	r3, #0
900034c4:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
900034c6:	683b      	ldr	r3, [r7, #0]
900034c8:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
900034ca:	2300      	movs	r3, #0
900034cc:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
900034ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
900034d2:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
900034d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
900034d6:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
900034d8:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900034dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
900034de:	f107 0314 	add.w	r3, r7, #20
900034e2:	461a      	mov	r2, r3
900034e4:	2100      	movs	r1, #0
900034e6:	480d      	ldr	r0, [pc, #52]	@ (9000351c <BSP_LCD_InitEx+0x198>)
900034e8:	f000 f872 	bl	900035d0 <MX_LTDC_ConfigLayer>
900034ec:	4603      	mov	r3, r0
900034ee:	2b00      	cmp	r3, #0
900034f0:	d002      	beq.n	900034f8 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
900034f2:	f06f 0303 	mvn.w	r3, #3
900034f6:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
900034f8:	480e      	ldr	r0, [pc, #56]	@ (90003534 <BSP_LCD_InitEx+0x1b0>)
900034fa:	f000 fe69 	bl	900041d0 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
900034fe:	4a06      	ldr	r2, [pc, #24]	@ (90003518 <BSP_LCD_InitEx+0x194>)
90003500:	68fb      	ldr	r3, [r7, #12]
90003502:	015b      	lsls	r3, r3, #5
90003504:	4413      	add	r3, r2
90003506:	3318      	adds	r3, #24
90003508:	2201      	movs	r2, #1
9000350a:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
9000350c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
9000350e:	4618      	mov	r0, r3
90003510:	3778      	adds	r7, #120	@ 0x78
90003512:	46bd      	mov	sp, r7
90003514:	bd80      	pop	{r7, pc}
90003516:	bf00      	nop
90003518:	20001d34 	.word	0x20001d34
9000351c:	20001c8c 	.word	0x20001c8c
90003520:	50001000 	.word	0x50001000
90003524:	20001c24 	.word	0x20001c24
90003528:	52001000 	.word	0x52001000
9000352c:	90002ab1 	.word	0x90002ab1
90003530:	90002c4d 	.word	0x90002c4d
90003534:	20001bd8 	.word	0x20001bd8

90003538 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90003538:	b580      	push	{r7, lr}
9000353a:	b084      	sub	sp, #16
9000353c:	af00      	add	r7, sp, #0
9000353e:	60f8      	str	r0, [r7, #12]
90003540:	60b9      	str	r1, [r7, #8]
90003542:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90003544:	68fb      	ldr	r3, [r7, #12]
90003546:	4a21      	ldr	r2, [pc, #132]	@ (900035cc <MX_LTDC_Init+0x94>)
90003548:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
9000354a:	68fb      	ldr	r3, [r7, #12]
9000354c:	2200      	movs	r2, #0
9000354e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90003550:	68fb      	ldr	r3, [r7, #12]
90003552:	2200      	movs	r2, #0
90003554:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90003556:	68fb      	ldr	r3, [r7, #12]
90003558:	2200      	movs	r2, #0
9000355a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000355c:	68fb      	ldr	r3, [r7, #12]
9000355e:	2200      	movs	r2, #0
90003560:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90003562:	68fb      	ldr	r3, [r7, #12]
90003564:	2228      	movs	r2, #40	@ 0x28
90003566:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90003568:	68fb      	ldr	r3, [r7, #12]
9000356a:	222a      	movs	r2, #42	@ 0x2a
9000356c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
9000356e:	68bb      	ldr	r3, [r7, #8]
90003570:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90003574:	68fb      	ldr	r3, [r7, #12]
90003576:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90003578:	68bb      	ldr	r3, [r7, #8]
9000357a:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
9000357e:	68fb      	ldr	r3, [r7, #12]
90003580:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90003582:	68fb      	ldr	r3, [r7, #12]
90003584:	2209      	movs	r2, #9
90003586:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90003588:	68fb      	ldr	r3, [r7, #12]
9000358a:	220b      	movs	r2, #11
9000358c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
9000358e:	687b      	ldr	r3, [r7, #4]
90003590:	f103 020b 	add.w	r2, r3, #11
90003594:	68fb      	ldr	r3, [r7, #12]
90003596:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90003598:	687b      	ldr	r3, [r7, #4]
9000359a:	f103 020d 	add.w	r2, r3, #13
9000359e:	68fb      	ldr	r3, [r7, #12]
900035a0:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
900035a2:	68fb      	ldr	r3, [r7, #12]
900035a4:	22ff      	movs	r2, #255	@ 0xff
900035a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
900035aa:	68fb      	ldr	r3, [r7, #12]
900035ac:	22ff      	movs	r2, #255	@ 0xff
900035ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
900035b2:	68fb      	ldr	r3, [r7, #12]
900035b4:	22ff      	movs	r2, #255	@ 0xff
900035b6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
900035ba:	68f8      	ldr	r0, [r7, #12]
900035bc:	f005 fa27 	bl	90008a0e <HAL_LTDC_Init>
900035c0:	4603      	mov	r3, r0
}
900035c2:	4618      	mov	r0, r3
900035c4:	3710      	adds	r7, #16
900035c6:	46bd      	mov	sp, r7
900035c8:	bd80      	pop	{r7, pc}
900035ca:	bf00      	nop
900035cc:	50001000 	.word	0x50001000

900035d0 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
900035d0:	b580      	push	{r7, lr}
900035d2:	b092      	sub	sp, #72	@ 0x48
900035d4:	af00      	add	r7, sp, #0
900035d6:	60f8      	str	r0, [r7, #12]
900035d8:	60b9      	str	r1, [r7, #8]
900035da:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
900035dc:	687b      	ldr	r3, [r7, #4]
900035de:	681b      	ldr	r3, [r3, #0]
900035e0:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
900035e2:	687b      	ldr	r3, [r7, #4]
900035e4:	685b      	ldr	r3, [r3, #4]
900035e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
900035e8:	687b      	ldr	r3, [r7, #4]
900035ea:	689b      	ldr	r3, [r3, #8]
900035ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
900035ee:	687b      	ldr	r3, [r7, #4]
900035f0:	68db      	ldr	r3, [r3, #12]
900035f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
900035f4:	687b      	ldr	r3, [r7, #4]
900035f6:	691b      	ldr	r3, [r3, #16]
900035f8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
900035fa:	23ff      	movs	r3, #255	@ 0xff
900035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
900035fe:	2300      	movs	r3, #0
90003600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90003602:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
90003606:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90003608:	2307      	movs	r3, #7
9000360a:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
9000360c:	687b      	ldr	r3, [r7, #4]
9000360e:	695b      	ldr	r3, [r3, #20]
90003610:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90003612:	687b      	ldr	r3, [r7, #4]
90003614:	685a      	ldr	r2, [r3, #4]
90003616:	687b      	ldr	r3, [r7, #4]
90003618:	681b      	ldr	r3, [r3, #0]
9000361a:	1ad3      	subs	r3, r2, r3
9000361c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
9000361e:	687b      	ldr	r3, [r7, #4]
90003620:	68da      	ldr	r2, [r3, #12]
90003622:	687b      	ldr	r3, [r7, #4]
90003624:	689b      	ldr	r3, [r3, #8]
90003626:	1ad3      	subs	r3, r2, r3
90003628:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
9000362a:	2300      	movs	r3, #0
9000362c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90003630:	2300      	movs	r3, #0
90003632:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
90003636:	2300      	movs	r3, #0
90003638:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
9000363c:	f107 0314 	add.w	r3, r7, #20
90003640:	68ba      	ldr	r2, [r7, #8]
90003642:	4619      	mov	r1, r3
90003644:	68f8      	ldr	r0, [r7, #12]
90003646:	f005 fa89 	bl	90008b5c <HAL_LTDC_ConfigLayer>
9000364a:	4603      	mov	r3, r0
}
9000364c:	4618      	mov	r0, r3
9000364e:	3748      	adds	r7, #72	@ 0x48
90003650:	46bd      	mov	sp, r7
90003652:	bd80      	pop	{r7, pc}

90003654 <BSP_LCD_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
int32_t BSP_LCD_ConfigLayer(uint32_t Instance, uint32_t LayerIndex, BSP_LCD_LayerConfig_t *Config)
{
90003654:	b580      	push	{r7, lr}
90003656:	b086      	sub	sp, #24
90003658:	af00      	add	r7, sp, #0
9000365a:	60f8      	str	r0, [r7, #12]
9000365c:	60b9      	str	r1, [r7, #8]
9000365e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90003660:	2300      	movs	r3, #0
90003662:	617b      	str	r3, [r7, #20]
  if(Instance >= LCD_INSTANCES_NBR)
90003664:	68fb      	ldr	r3, [r7, #12]
90003666:	2b00      	cmp	r3, #0
90003668:	d003      	beq.n	90003672 <BSP_LCD_ConfigLayer+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000366a:	f06f 0301 	mvn.w	r3, #1
9000366e:	617b      	str	r3, [r7, #20]
90003670:	e00a      	b.n	90003688 <BSP_LCD_ConfigLayer+0x34>
  }
  else
  {
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
90003672:	687a      	ldr	r2, [r7, #4]
90003674:	68b9      	ldr	r1, [r7, #8]
90003676:	4807      	ldr	r0, [pc, #28]	@ (90003694 <BSP_LCD_ConfigLayer+0x40>)
90003678:	f7ff ffaa 	bl	900035d0 <MX_LTDC_ConfigLayer>
9000367c:	4603      	mov	r3, r0
9000367e:	2b00      	cmp	r3, #0
90003680:	d002      	beq.n	90003688 <BSP_LCD_ConfigLayer+0x34>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90003682:	f06f 0303 	mvn.w	r3, #3
90003686:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
90003688:	697b      	ldr	r3, [r7, #20]
}
9000368a:	4618      	mov	r0, r3
9000368c:	3718      	adds	r7, #24
9000368e:	46bd      	mov	sp, r7
90003690:	bd80      	pop	{r7, pc}
90003692:	bf00      	nop
90003694:	20001c8c 	.word	0x20001c8c

90003698 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90003698:	b480      	push	{r7}
9000369a:	b085      	sub	sp, #20
9000369c:	af00      	add	r7, sp, #0
9000369e:	6078      	str	r0, [r7, #4]
900036a0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900036a2:	2300      	movs	r3, #0
900036a4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900036a6:	687b      	ldr	r3, [r7, #4]
900036a8:	2b00      	cmp	r3, #0
900036aa:	d003      	beq.n	900036b4 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900036ac:	f06f 0301 	mvn.w	r3, #1
900036b0:	60fb      	str	r3, [r7, #12]
900036b2:	e007      	b.n	900036c4 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
900036b4:	4a07      	ldr	r2, [pc, #28]	@ (900036d4 <BSP_LCD_GetPixelFormat+0x3c>)
900036b6:	687b      	ldr	r3, [r7, #4]
900036b8:	015b      	lsls	r3, r3, #5
900036ba:	4413      	add	r3, r2
900036bc:	330c      	adds	r3, #12
900036be:	681a      	ldr	r2, [r3, #0]
900036c0:	683b      	ldr	r3, [r7, #0]
900036c2:	601a      	str	r2, [r3, #0]
  }

  return ret;
900036c4:	68fb      	ldr	r3, [r7, #12]
}
900036c6:	4618      	mov	r0, r3
900036c8:	3714      	adds	r7, #20
900036ca:	46bd      	mov	sp, r7
900036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900036d0:	4770      	bx	lr
900036d2:	bf00      	nop
900036d4:	20001d34 	.word	0x20001d34

900036d8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
900036d8:	b480      	push	{r7}
900036da:	b085      	sub	sp, #20
900036dc:	af00      	add	r7, sp, #0
900036de:	6078      	str	r0, [r7, #4]
900036e0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900036e2:	2300      	movs	r3, #0
900036e4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900036e6:	687b      	ldr	r3, [r7, #4]
900036e8:	2b00      	cmp	r3, #0
900036ea:	d003      	beq.n	900036f4 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900036ec:	f06f 0301 	mvn.w	r3, #1
900036f0:	60fb      	str	r3, [r7, #12]
900036f2:	e006      	b.n	90003702 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
900036f4:	4a06      	ldr	r2, [pc, #24]	@ (90003710 <BSP_LCD_SetActiveLayer+0x38>)
900036f6:	687b      	ldr	r3, [r7, #4]
900036f8:	015b      	lsls	r3, r3, #5
900036fa:	4413      	add	r3, r2
900036fc:	3308      	adds	r3, #8
900036fe:	683a      	ldr	r2, [r7, #0]
90003700:	601a      	str	r2, [r3, #0]
  }

  return ret;
90003702:	68fb      	ldr	r3, [r7, #12]
}
90003704:	4618      	mov	r0, r3
90003706:	3714      	adds	r7, #20
90003708:	46bd      	mov	sp, r7
9000370a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000370e:	4770      	bx	lr
90003710:	20001d34 	.word	0x20001d34

90003714 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE
  * @retval BSP status
  */
int32_t BSP_LCD_SetLayerVisible(uint32_t Instance, uint32_t LayerIndex, FunctionalState State)
{
90003714:	b480      	push	{r7}
90003716:	b087      	sub	sp, #28
90003718:	af00      	add	r7, sp, #0
9000371a:	60f8      	str	r0, [r7, #12]
9000371c:	60b9      	str	r1, [r7, #8]
9000371e:	4613      	mov	r3, r2
90003720:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90003722:	2300      	movs	r3, #0
90003724:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
90003726:	68fb      	ldr	r3, [r7, #12]
90003728:	2b00      	cmp	r3, #0
9000372a:	d003      	beq.n	90003734 <BSP_LCD_SetLayerVisible+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000372c:	f06f 0301 	mvn.w	r3, #1
90003730:	617b      	str	r3, [r7, #20]
90003732:	e037      	b.n	900037a4 <BSP_LCD_SetLayerVisible+0x90>
  }
  else
  {
    if(State == ENABLE)
90003734:	79fb      	ldrb	r3, [r7, #7]
90003736:	2b01      	cmp	r3, #1
90003738:	d112      	bne.n	90003760 <BSP_LCD_SetLayerVisible+0x4c>
    {
      __HAL_LTDC_LAYER_ENABLE(&hlcd_ltdc, LayerIndex);
9000373a:	4b1e      	ldr	r3, [pc, #120]	@ (900037b4 <BSP_LCD_SetLayerVisible+0xa0>)
9000373c:	681b      	ldr	r3, [r3, #0]
9000373e:	461a      	mov	r2, r3
90003740:	68bb      	ldr	r3, [r7, #8]
90003742:	01db      	lsls	r3, r3, #7
90003744:	4413      	add	r3, r2
90003746:	3384      	adds	r3, #132	@ 0x84
90003748:	681b      	ldr	r3, [r3, #0]
9000374a:	4a1a      	ldr	r2, [pc, #104]	@ (900037b4 <BSP_LCD_SetLayerVisible+0xa0>)
9000374c:	6812      	ldr	r2, [r2, #0]
9000374e:	4611      	mov	r1, r2
90003750:	68ba      	ldr	r2, [r7, #8]
90003752:	01d2      	lsls	r2, r2, #7
90003754:	440a      	add	r2, r1
90003756:	3284      	adds	r2, #132	@ 0x84
90003758:	f043 0301 	orr.w	r3, r3, #1
9000375c:	6013      	str	r3, [r2, #0]
9000375e:	e011      	b.n	90003784 <BSP_LCD_SetLayerVisible+0x70>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hlcd_ltdc, LayerIndex);
90003760:	4b14      	ldr	r3, [pc, #80]	@ (900037b4 <BSP_LCD_SetLayerVisible+0xa0>)
90003762:	681b      	ldr	r3, [r3, #0]
90003764:	461a      	mov	r2, r3
90003766:	68bb      	ldr	r3, [r7, #8]
90003768:	01db      	lsls	r3, r3, #7
9000376a:	4413      	add	r3, r2
9000376c:	3384      	adds	r3, #132	@ 0x84
9000376e:	681b      	ldr	r3, [r3, #0]
90003770:	4a10      	ldr	r2, [pc, #64]	@ (900037b4 <BSP_LCD_SetLayerVisible+0xa0>)
90003772:	6812      	ldr	r2, [r2, #0]
90003774:	4611      	mov	r1, r2
90003776:	68ba      	ldr	r2, [r7, #8]
90003778:	01d2      	lsls	r2, r2, #7
9000377a:	440a      	add	r2, r1
9000377c:	3284      	adds	r2, #132	@ 0x84
9000377e:	f023 0301 	bic.w	r3, r3, #1
90003782:	6013      	str	r3, [r2, #0]
    }

    if(Lcd_Ctx[Instance].ReloadEnable == 1U)
90003784:	4a0c      	ldr	r2, [pc, #48]	@ (900037b8 <BSP_LCD_SetLayerVisible+0xa4>)
90003786:	68fb      	ldr	r3, [r7, #12]
90003788:	015b      	lsls	r3, r3, #5
9000378a:	4413      	add	r3, r2
9000378c:	3318      	adds	r3, #24
9000378e:	681b      	ldr	r3, [r3, #0]
90003790:	2b01      	cmp	r3, #1
90003792:	d107      	bne.n	900037a4 <BSP_LCD_SetLayerVisible+0x90>
    {
      __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hlcd_ltdc);
90003794:	4b07      	ldr	r3, [pc, #28]	@ (900037b4 <BSP_LCD_SetLayerVisible+0xa0>)
90003796:	681b      	ldr	r3, [r3, #0]
90003798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000379a:	4b06      	ldr	r3, [pc, #24]	@ (900037b4 <BSP_LCD_SetLayerVisible+0xa0>)
9000379c:	681b      	ldr	r3, [r3, #0]
9000379e:	f042 0201 	orr.w	r2, r2, #1
900037a2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  return ret;
900037a4:	697b      	ldr	r3, [r7, #20]
}
900037a6:	4618      	mov	r0, r3
900037a8:	371c      	adds	r7, #28
900037aa:	46bd      	mov	sp, r7
900037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900037b0:	4770      	bx	lr
900037b2:	bf00      	nop
900037b4:	20001c8c 	.word	0x20001c8c
900037b8:	20001d34 	.word	0x20001d34

900037bc <BSP_LCD_SetColorKeying>:
  * @param  LayerIndex  Layer foreground or background
  * @param  Color       Color reference
  * @retval BSP status
  */
int32_t BSP_LCD_SetColorKeying(uint32_t Instance, uint32_t LayerIndex, uint32_t Color)
{
900037bc:	b580      	push	{r7, lr}
900037be:	b086      	sub	sp, #24
900037c0:	af00      	add	r7, sp, #0
900037c2:	60f8      	str	r0, [r7, #12]
900037c4:	60b9      	str	r1, [r7, #8]
900037c6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
900037c8:	2300      	movs	r3, #0
900037ca:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
900037cc:	68fb      	ldr	r3, [r7, #12]
900037ce:	2b00      	cmp	r3, #0
900037d0:	d003      	beq.n	900037da <BSP_LCD_SetColorKeying+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900037d2:	f06f 0301 	mvn.w	r3, #1
900037d6:	617b      	str	r3, [r7, #20]
900037d8:	e01a      	b.n	90003810 <BSP_LCD_SetColorKeying+0x54>
  }
  else
  {
    if(Lcd_Ctx[Instance].ReloadEnable == 1U)
900037da:	4a10      	ldr	r2, [pc, #64]	@ (9000381c <BSP_LCD_SetColorKeying+0x60>)
900037dc:	68fb      	ldr	r3, [r7, #12]
900037de:	015b      	lsls	r3, r3, #5
900037e0:	4413      	add	r3, r2
900037e2:	3318      	adds	r3, #24
900037e4:	681b      	ldr	r3, [r3, #0]
900037e6:	2b01      	cmp	r3, #1
900037e8:	d109      	bne.n	900037fe <BSP_LCD_SetColorKeying+0x42>
    {
      /* Configure and Enable the color Keying for LCD Layer */
      (void)HAL_LTDC_ConfigColorKeying(&hlcd_ltdc, Color, LayerIndex);
900037ea:	68ba      	ldr	r2, [r7, #8]
900037ec:	6879      	ldr	r1, [r7, #4]
900037ee:	480c      	ldr	r0, [pc, #48]	@ (90003820 <BSP_LCD_SetColorKeying+0x64>)
900037f0:	f005 f9f2 	bl	90008bd8 <HAL_LTDC_ConfigColorKeying>
      (void)HAL_LTDC_EnableColorKeying(&hlcd_ltdc, LayerIndex);
900037f4:	68b9      	ldr	r1, [r7, #8]
900037f6:	480a      	ldr	r0, [pc, #40]	@ (90003820 <BSP_LCD_SetColorKeying+0x64>)
900037f8:	f005 fa32 	bl	90008c60 <HAL_LTDC_EnableColorKeying>
900037fc:	e008      	b.n	90003810 <BSP_LCD_SetColorKeying+0x54>
    }
    else
    {
      /* Configure and Enable the color Keying for LCD Layer */
      (void)HAL_LTDC_ConfigColorKeying_NoReload(&hlcd_ltdc, Color, LayerIndex);
900037fe:	68ba      	ldr	r2, [r7, #8]
90003800:	6879      	ldr	r1, [r7, #4]
90003802:	4807      	ldr	r0, [pc, #28]	@ (90003820 <BSP_LCD_SetColorKeying+0x64>)
90003804:	f005 fa65 	bl	90008cd2 <HAL_LTDC_ConfigColorKeying_NoReload>
      (void)HAL_LTDC_EnableColorKeying_NoReload(&hlcd_ltdc, LayerIndex);
90003808:	68b9      	ldr	r1, [r7, #8]
9000380a:	4805      	ldr	r0, [pc, #20]	@ (90003820 <BSP_LCD_SetColorKeying+0x64>)
9000380c:	f005 faa1 	bl	90008d52 <HAL_LTDC_EnableColorKeying_NoReload>
    }
  }

  return ret;
90003810:	697b      	ldr	r3, [r7, #20]
}
90003812:	4618      	mov	r0, r3
90003814:	3718      	adds	r7, #24
90003816:	46bd      	mov	sp, r7
90003818:	bd80      	pop	{r7, pc}
9000381a:	bf00      	nop
9000381c:	20001d34 	.word	0x20001d34
90003820:	20001c8c 	.word	0x20001c8c

90003824 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90003824:	b480      	push	{r7}
90003826:	b085      	sub	sp, #20
90003828:	af00      	add	r7, sp, #0
9000382a:	6078      	str	r0, [r7, #4]
9000382c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000382e:	2300      	movs	r3, #0
90003830:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90003832:	687b      	ldr	r3, [r7, #4]
90003834:	2b00      	cmp	r3, #0
90003836:	d003      	beq.n	90003840 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90003838:	f06f 0301 	mvn.w	r3, #1
9000383c:	60fb      	str	r3, [r7, #12]
9000383e:	e006      	b.n	9000384e <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90003840:	4a06      	ldr	r2, [pc, #24]	@ (9000385c <BSP_LCD_GetXSize+0x38>)
90003842:	687b      	ldr	r3, [r7, #4]
90003844:	015b      	lsls	r3, r3, #5
90003846:	4413      	add	r3, r2
90003848:	681a      	ldr	r2, [r3, #0]
9000384a:	683b      	ldr	r3, [r7, #0]
9000384c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000384e:	68fb      	ldr	r3, [r7, #12]
}
90003850:	4618      	mov	r0, r3
90003852:	3714      	adds	r7, #20
90003854:	46bd      	mov	sp, r7
90003856:	f85d 7b04 	ldr.w	r7, [sp], #4
9000385a:	4770      	bx	lr
9000385c:	20001d34 	.word	0x20001d34

90003860 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90003860:	b480      	push	{r7}
90003862:	b085      	sub	sp, #20
90003864:	af00      	add	r7, sp, #0
90003866:	6078      	str	r0, [r7, #4]
90003868:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000386a:	2300      	movs	r3, #0
9000386c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000386e:	687b      	ldr	r3, [r7, #4]
90003870:	2b00      	cmp	r3, #0
90003872:	d003      	beq.n	9000387c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90003874:	f06f 0301 	mvn.w	r3, #1
90003878:	60fb      	str	r3, [r7, #12]
9000387a:	e007      	b.n	9000388c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
9000387c:	4a07      	ldr	r2, [pc, #28]	@ (9000389c <BSP_LCD_GetYSize+0x3c>)
9000387e:	687b      	ldr	r3, [r7, #4]
90003880:	015b      	lsls	r3, r3, #5
90003882:	4413      	add	r3, r2
90003884:	3304      	adds	r3, #4
90003886:	681a      	ldr	r2, [r3, #0]
90003888:	683b      	ldr	r3, [r7, #0]
9000388a:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000388c:	68fb      	ldr	r3, [r7, #12]
}
9000388e:	4618      	mov	r0, r3
90003890:	3714      	adds	r7, #20
90003892:	46bd      	mov	sp, r7
90003894:	f85d 7b04 	ldr.w	r7, [sp], #4
90003898:	4770      	bx	lr
9000389a:	bf00      	nop
9000389c:	20001d34 	.word	0x20001d34

900038a0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
900038a0:	b580      	push	{r7, lr}
900038a2:	b08e      	sub	sp, #56	@ 0x38
900038a4:	af02      	add	r7, sp, #8
900038a6:	60f8      	str	r0, [r7, #12]
900038a8:	60b9      	str	r1, [r7, #8]
900038aa:	607a      	str	r2, [r7, #4]
900038ac:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900038ae:	2300      	movs	r3, #0
900038b0:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
900038b2:	683b      	ldr	r3, [r7, #0]
900038b4:	330a      	adds	r3, #10
900038b6:	781b      	ldrb	r3, [r3, #0]
900038b8:	461a      	mov	r2, r3
900038ba:	683b      	ldr	r3, [r7, #0]
900038bc:	330b      	adds	r3, #11
900038be:	781b      	ldrb	r3, [r3, #0]
900038c0:	021b      	lsls	r3, r3, #8
900038c2:	441a      	add	r2, r3
900038c4:	683b      	ldr	r3, [r7, #0]
900038c6:	330c      	adds	r3, #12
900038c8:	781b      	ldrb	r3, [r3, #0]
900038ca:	041b      	lsls	r3, r3, #16
900038cc:	441a      	add	r2, r3
900038ce:	683b      	ldr	r3, [r7, #0]
900038d0:	330d      	adds	r3, #13
900038d2:	781b      	ldrb	r3, [r3, #0]
900038d4:	061b      	lsls	r3, r3, #24
900038d6:	4413      	add	r3, r2
900038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
900038da:	683b      	ldr	r3, [r7, #0]
900038dc:	3312      	adds	r3, #18
900038de:	781b      	ldrb	r3, [r3, #0]
900038e0:	461a      	mov	r2, r3
900038e2:	683b      	ldr	r3, [r7, #0]
900038e4:	3313      	adds	r3, #19
900038e6:	781b      	ldrb	r3, [r3, #0]
900038e8:	021b      	lsls	r3, r3, #8
900038ea:	441a      	add	r2, r3
900038ec:	683b      	ldr	r3, [r7, #0]
900038ee:	3314      	adds	r3, #20
900038f0:	781b      	ldrb	r3, [r3, #0]
900038f2:	041b      	lsls	r3, r3, #16
900038f4:	441a      	add	r2, r3
900038f6:	683b      	ldr	r3, [r7, #0]
900038f8:	3315      	adds	r3, #21
900038fa:	781b      	ldrb	r3, [r3, #0]
900038fc:	061b      	lsls	r3, r3, #24
900038fe:	4413      	add	r3, r2
90003900:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
90003902:	683b      	ldr	r3, [r7, #0]
90003904:	3316      	adds	r3, #22
90003906:	781b      	ldrb	r3, [r3, #0]
90003908:	461a      	mov	r2, r3
9000390a:	683b      	ldr	r3, [r7, #0]
9000390c:	3317      	adds	r3, #23
9000390e:	781b      	ldrb	r3, [r3, #0]
90003910:	021b      	lsls	r3, r3, #8
90003912:	441a      	add	r2, r3
90003914:	683b      	ldr	r3, [r7, #0]
90003916:	3318      	adds	r3, #24
90003918:	781b      	ldrb	r3, [r3, #0]
9000391a:	041b      	lsls	r3, r3, #16
9000391c:	441a      	add	r2, r3
9000391e:	683b      	ldr	r3, [r7, #0]
90003920:	3319      	adds	r3, #25
90003922:	781b      	ldrb	r3, [r3, #0]
90003924:	061b      	lsls	r3, r3, #24
90003926:	4413      	add	r3, r2
90003928:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
9000392a:	683b      	ldr	r3, [r7, #0]
9000392c:	331c      	adds	r3, #28
9000392e:	781b      	ldrb	r3, [r3, #0]
90003930:	461a      	mov	r2, r3
90003932:	683b      	ldr	r3, [r7, #0]
90003934:	331d      	adds	r3, #29
90003936:	781b      	ldrb	r3, [r3, #0]
90003938:	021b      	lsls	r3, r3, #8
9000393a:	4413      	add	r3, r2
9000393c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
9000393e:	4a37      	ldr	r2, [pc, #220]	@ (90003a1c <BSP_LCD_DrawBitmap+0x17c>)
90003940:	68fb      	ldr	r3, [r7, #12]
90003942:	015b      	lsls	r3, r3, #5
90003944:	4413      	add	r3, r2
90003946:	3308      	adds	r3, #8
90003948:	681b      	ldr	r3, [r3, #0]
9000394a:	4a35      	ldr	r2, [pc, #212]	@ (90003a20 <BSP_LCD_DrawBitmap+0x180>)
9000394c:	2134      	movs	r1, #52	@ 0x34
9000394e:	fb01 f303 	mul.w	r3, r1, r3
90003952:	4413      	add	r3, r2
90003954:	335c      	adds	r3, #92	@ 0x5c
90003956:	681a      	ldr	r2, [r3, #0]
90003958:	4930      	ldr	r1, [pc, #192]	@ (90003a1c <BSP_LCD_DrawBitmap+0x17c>)
9000395a:	68fb      	ldr	r3, [r7, #12]
9000395c:	015b      	lsls	r3, r3, #5
9000395e:	440b      	add	r3, r1
90003960:	681b      	ldr	r3, [r3, #0]
90003962:	6879      	ldr	r1, [r7, #4]
90003964:	fb03 f101 	mul.w	r1, r3, r1
90003968:	68bb      	ldr	r3, [r7, #8]
9000396a:	440b      	add	r3, r1
9000396c:	482b      	ldr	r0, [pc, #172]	@ (90003a1c <BSP_LCD_DrawBitmap+0x17c>)
9000396e:	68f9      	ldr	r1, [r7, #12]
90003970:	0149      	lsls	r1, r1, #5
90003972:	4401      	add	r1, r0
90003974:	3110      	adds	r1, #16
90003976:	6809      	ldr	r1, [r1, #0]
90003978:	fb01 f303 	mul.w	r3, r1, r3
9000397c:	4413      	add	r3, r2
9000397e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90003980:	693b      	ldr	r3, [r7, #16]
90003982:	3b20      	subs	r3, #32
90003984:	2b07      	cmp	r3, #7
90003986:	d802      	bhi.n	9000398e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90003988:	2300      	movs	r3, #0
9000398a:	627b      	str	r3, [r7, #36]	@ 0x24
9000398c:	e008      	b.n	900039a0 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
9000398e:	693b      	ldr	r3, [r7, #16]
90003990:	3b10      	subs	r3, #16
90003992:	2b07      	cmp	r3, #7
90003994:	d802      	bhi.n	9000399c <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
90003996:	2302      	movs	r3, #2
90003998:	627b      	str	r3, [r7, #36]	@ 0x24
9000399a:	e001      	b.n	900039a0 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
9000399c:	2301      	movs	r3, #1
9000399e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
900039a0:	697b      	ldr	r3, [r7, #20]
900039a2:	3b01      	subs	r3, #1
900039a4:	69ba      	ldr	r2, [r7, #24]
900039a6:	fb02 f303 	mul.w	r3, r2, r3
900039aa:	693a      	ldr	r2, [r7, #16]
900039ac:	08d2      	lsrs	r2, r2, #3
900039ae:	fb03 f202 	mul.w	r2, r3, r2
900039b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900039b4:	4413      	add	r3, r2
900039b6:	683a      	ldr	r2, [r7, #0]
900039b8:	4413      	add	r3, r2
900039ba:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
900039bc:	2300      	movs	r3, #0
900039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
900039c0:	e023      	b.n	90003a0a <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
900039c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900039c6:	9300      	str	r3, [sp, #0]
900039c8:	69bb      	ldr	r3, [r7, #24]
900039ca:	6a39      	ldr	r1, [r7, #32]
900039cc:	68f8      	ldr	r0, [r7, #12]
900039ce:	f000 fa77 	bl	90003ec0 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
900039d2:	4a12      	ldr	r2, [pc, #72]	@ (90003a1c <BSP_LCD_DrawBitmap+0x17c>)
900039d4:	68fb      	ldr	r3, [r7, #12]
900039d6:	015b      	lsls	r3, r3, #5
900039d8:	4413      	add	r3, r2
900039da:	681b      	ldr	r3, [r3, #0]
900039dc:	490f      	ldr	r1, [pc, #60]	@ (90003a1c <BSP_LCD_DrawBitmap+0x17c>)
900039de:	68fa      	ldr	r2, [r7, #12]
900039e0:	0152      	lsls	r2, r2, #5
900039e2:	440a      	add	r2, r1
900039e4:	3210      	adds	r2, #16
900039e6:	6812      	ldr	r2, [r2, #0]
900039e8:	fb02 f303 	mul.w	r3, r2, r3
900039ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900039ee:	4413      	add	r3, r2
900039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
900039f2:	693b      	ldr	r3, [r7, #16]
900039f4:	08db      	lsrs	r3, r3, #3
900039f6:	69ba      	ldr	r2, [r7, #24]
900039f8:	fb02 f303 	mul.w	r3, r2, r3
900039fc:	425b      	negs	r3, r3
900039fe:	6a3a      	ldr	r2, [r7, #32]
90003a00:	4413      	add	r3, r2
90003a02:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90003a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90003a06:	3301      	adds	r3, #1
90003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
90003a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90003a0c:	697b      	ldr	r3, [r7, #20]
90003a0e:	429a      	cmp	r2, r3
90003a10:	d3d7      	bcc.n	900039c2 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
90003a12:	69fb      	ldr	r3, [r7, #28]
}
90003a14:	4618      	mov	r0, r3
90003a16:	3730      	adds	r7, #48	@ 0x30
90003a18:	46bd      	mov	sp, r7
90003a1a:	bd80      	pop	{r7, pc}
90003a1c:	20001d34 	.word	0x20001d34
90003a20:	20001c8c 	.word	0x20001c8c

90003a24 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90003a24:	b580      	push	{r7, lr}
90003a26:	b088      	sub	sp, #32
90003a28:	af00      	add	r7, sp, #0
90003a2a:	60f8      	str	r0, [r7, #12]
90003a2c:	60b9      	str	r1, [r7, #8]
90003a2e:	607a      	str	r2, [r7, #4]
90003a30:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
90003a32:	683b      	ldr	r3, [r7, #0]
90003a34:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90003a36:	2300      	movs	r3, #0
90003a38:	61fb      	str	r3, [r7, #28]
90003a3a:	e032      	b.n	90003aa2 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90003a3c:	2300      	movs	r3, #0
90003a3e:	617b      	str	r3, [r7, #20]
90003a40:	e028      	b.n	90003a94 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
90003a42:	69bb      	ldr	r3, [r7, #24]
90003a44:	781b      	ldrb	r3, [r3, #0]
90003a46:	461a      	mov	r2, r3
90003a48:	69bb      	ldr	r3, [r7, #24]
90003a4a:	3301      	adds	r3, #1
90003a4c:	781b      	ldrb	r3, [r3, #0]
90003a4e:	021b      	lsls	r3, r3, #8
90003a50:	431a      	orrs	r2, r3
90003a52:	69bb      	ldr	r3, [r7, #24]
90003a54:	3302      	adds	r3, #2
90003a56:	781b      	ldrb	r3, [r3, #0]
90003a58:	041b      	lsls	r3, r3, #16
90003a5a:	431a      	orrs	r2, r3
90003a5c:	69bb      	ldr	r3, [r7, #24]
90003a5e:	3303      	adds	r3, #3
90003a60:	781b      	ldrb	r3, [r3, #0]
90003a62:	061b      	lsls	r3, r3, #24
90003a64:	4313      	orrs	r3, r2
90003a66:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90003a68:	68ba      	ldr	r2, [r7, #8]
90003a6a:	697b      	ldr	r3, [r7, #20]
90003a6c:	18d1      	adds	r1, r2, r3
90003a6e:	687a      	ldr	r2, [r7, #4]
90003a70:	69fb      	ldr	r3, [r7, #28]
90003a72:	441a      	add	r2, r3
90003a74:	693b      	ldr	r3, [r7, #16]
90003a76:	68f8      	ldr	r0, [r7, #12]
90003a78:	f000 f95e 	bl	90003d38 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
90003a7c:	4a0d      	ldr	r2, [pc, #52]	@ (90003ab4 <BSP_LCD_FillRGBRect+0x90>)
90003a7e:	68fb      	ldr	r3, [r7, #12]
90003a80:	015b      	lsls	r3, r3, #5
90003a82:	4413      	add	r3, r2
90003a84:	3310      	adds	r3, #16
90003a86:	681b      	ldr	r3, [r3, #0]
90003a88:	69ba      	ldr	r2, [r7, #24]
90003a8a:	4413      	add	r3, r2
90003a8c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
90003a8e:	697b      	ldr	r3, [r7, #20]
90003a90:	3301      	adds	r3, #1
90003a92:	617b      	str	r3, [r7, #20]
90003a94:	697a      	ldr	r2, [r7, #20]
90003a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90003a98:	429a      	cmp	r2, r3
90003a9a:	d3d2      	bcc.n	90003a42 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
90003a9c:	69fb      	ldr	r3, [r7, #28]
90003a9e:	3301      	adds	r3, #1
90003aa0:	61fb      	str	r3, [r7, #28]
90003aa2:	69fa      	ldr	r2, [r7, #28]
90003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90003aa6:	429a      	cmp	r2, r3
90003aa8:	d3c8      	bcc.n	90003a3c <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
90003aaa:	2300      	movs	r3, #0
}
90003aac:	4618      	mov	r0, r3
90003aae:	3720      	adds	r7, #32
90003ab0:	46bd      	mov	sp, r7
90003ab2:	bd80      	pop	{r7, pc}
90003ab4:	20001d34 	.word	0x20001d34

90003ab8 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90003ab8:	b580      	push	{r7, lr}
90003aba:	b088      	sub	sp, #32
90003abc:	af02      	add	r7, sp, #8
90003abe:	60f8      	str	r0, [r7, #12]
90003ac0:	60b9      	str	r1, [r7, #8]
90003ac2:	607a      	str	r2, [r7, #4]
90003ac4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90003ac6:	4a21      	ldr	r2, [pc, #132]	@ (90003b4c <BSP_LCD_DrawHLine+0x94>)
90003ac8:	68fb      	ldr	r3, [r7, #12]
90003aca:	015b      	lsls	r3, r3, #5
90003acc:	4413      	add	r3, r2
90003ace:	3308      	adds	r3, #8
90003ad0:	681b      	ldr	r3, [r3, #0]
90003ad2:	4a1f      	ldr	r2, [pc, #124]	@ (90003b50 <BSP_LCD_DrawHLine+0x98>)
90003ad4:	2134      	movs	r1, #52	@ 0x34
90003ad6:	fb01 f303 	mul.w	r3, r1, r3
90003ada:	4413      	add	r3, r2
90003adc:	335c      	adds	r3, #92	@ 0x5c
90003ade:	681a      	ldr	r2, [r3, #0]
90003ae0:	491a      	ldr	r1, [pc, #104]	@ (90003b4c <BSP_LCD_DrawHLine+0x94>)
90003ae2:	68fb      	ldr	r3, [r7, #12]
90003ae4:	015b      	lsls	r3, r3, #5
90003ae6:	440b      	add	r3, r1
90003ae8:	3310      	adds	r3, #16
90003aea:	681b      	ldr	r3, [r3, #0]
90003aec:	4817      	ldr	r0, [pc, #92]	@ (90003b4c <BSP_LCD_DrawHLine+0x94>)
90003aee:	68f9      	ldr	r1, [r7, #12]
90003af0:	0149      	lsls	r1, r1, #5
90003af2:	4401      	add	r1, r0
90003af4:	6809      	ldr	r1, [r1, #0]
90003af6:	6878      	ldr	r0, [r7, #4]
90003af8:	fb01 f000 	mul.w	r0, r1, r0
90003afc:	68b9      	ldr	r1, [r7, #8]
90003afe:	4401      	add	r1, r0
90003b00:	fb01 f303 	mul.w	r3, r1, r3
90003b04:	4413      	add	r3, r2
90003b06:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90003b08:	68ba      	ldr	r2, [r7, #8]
90003b0a:	683b      	ldr	r3, [r7, #0]
90003b0c:	441a      	add	r2, r3
90003b0e:	490f      	ldr	r1, [pc, #60]	@ (90003b4c <BSP_LCD_DrawHLine+0x94>)
90003b10:	68fb      	ldr	r3, [r7, #12]
90003b12:	015b      	lsls	r3, r3, #5
90003b14:	440b      	add	r3, r1
90003b16:	681b      	ldr	r3, [r3, #0]
90003b18:	429a      	cmp	r2, r3
90003b1a:	d907      	bls.n	90003b2c <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90003b1c:	4a0b      	ldr	r2, [pc, #44]	@ (90003b4c <BSP_LCD_DrawHLine+0x94>)
90003b1e:	68fb      	ldr	r3, [r7, #12]
90003b20:	015b      	lsls	r3, r3, #5
90003b22:	4413      	add	r3, r2
90003b24:	681a      	ldr	r2, [r3, #0]
90003b26:	68bb      	ldr	r3, [r7, #8]
90003b28:	1ad3      	subs	r3, r2, r3
90003b2a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90003b2c:	6979      	ldr	r1, [r7, #20]
90003b2e:	6a3b      	ldr	r3, [r7, #32]
90003b30:	9301      	str	r3, [sp, #4]
90003b32:	2300      	movs	r3, #0
90003b34:	9300      	str	r3, [sp, #0]
90003b36:	2301      	movs	r3, #1
90003b38:	683a      	ldr	r2, [r7, #0]
90003b3a:	68f8      	ldr	r0, [r7, #12]
90003b3c:	f000 f956 	bl	90003dec <LL_FillBuffer>

  return BSP_ERROR_NONE;
90003b40:	2300      	movs	r3, #0
}
90003b42:	4618      	mov	r0, r3
90003b44:	3718      	adds	r7, #24
90003b46:	46bd      	mov	sp, r7
90003b48:	bd80      	pop	{r7, pc}
90003b4a:	bf00      	nop
90003b4c:	20001d34 	.word	0x20001d34
90003b50:	20001c8c 	.word	0x20001c8c

90003b54 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90003b54:	b580      	push	{r7, lr}
90003b56:	b088      	sub	sp, #32
90003b58:	af02      	add	r7, sp, #8
90003b5a:	60f8      	str	r0, [r7, #12]
90003b5c:	60b9      	str	r1, [r7, #8]
90003b5e:	607a      	str	r2, [r7, #4]
90003b60:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90003b62:	4a24      	ldr	r2, [pc, #144]	@ (90003bf4 <BSP_LCD_DrawVLine+0xa0>)
90003b64:	68fb      	ldr	r3, [r7, #12]
90003b66:	015b      	lsls	r3, r3, #5
90003b68:	4413      	add	r3, r2
90003b6a:	3308      	adds	r3, #8
90003b6c:	681b      	ldr	r3, [r3, #0]
90003b6e:	4a22      	ldr	r2, [pc, #136]	@ (90003bf8 <BSP_LCD_DrawVLine+0xa4>)
90003b70:	2134      	movs	r1, #52	@ 0x34
90003b72:	fb01 f303 	mul.w	r3, r1, r3
90003b76:	4413      	add	r3, r2
90003b78:	335c      	adds	r3, #92	@ 0x5c
90003b7a:	681a      	ldr	r2, [r3, #0]
90003b7c:	491d      	ldr	r1, [pc, #116]	@ (90003bf4 <BSP_LCD_DrawVLine+0xa0>)
90003b7e:	68fb      	ldr	r3, [r7, #12]
90003b80:	015b      	lsls	r3, r3, #5
90003b82:	440b      	add	r3, r1
90003b84:	3310      	adds	r3, #16
90003b86:	681b      	ldr	r3, [r3, #0]
90003b88:	481a      	ldr	r0, [pc, #104]	@ (90003bf4 <BSP_LCD_DrawVLine+0xa0>)
90003b8a:	68f9      	ldr	r1, [r7, #12]
90003b8c:	0149      	lsls	r1, r1, #5
90003b8e:	4401      	add	r1, r0
90003b90:	6809      	ldr	r1, [r1, #0]
90003b92:	6878      	ldr	r0, [r7, #4]
90003b94:	fb01 f000 	mul.w	r0, r1, r0
90003b98:	68b9      	ldr	r1, [r7, #8]
90003b9a:	4401      	add	r1, r0
90003b9c:	fb01 f303 	mul.w	r3, r1, r3
90003ba0:	4413      	add	r3, r2
90003ba2:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
90003ba4:	687a      	ldr	r2, [r7, #4]
90003ba6:	683b      	ldr	r3, [r7, #0]
90003ba8:	441a      	add	r2, r3
90003baa:	4912      	ldr	r1, [pc, #72]	@ (90003bf4 <BSP_LCD_DrawVLine+0xa0>)
90003bac:	68fb      	ldr	r3, [r7, #12]
90003bae:	015b      	lsls	r3, r3, #5
90003bb0:	440b      	add	r3, r1
90003bb2:	3304      	adds	r3, #4
90003bb4:	681b      	ldr	r3, [r3, #0]
90003bb6:	429a      	cmp	r2, r3
90003bb8:	d908      	bls.n	90003bcc <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90003bba:	4a0e      	ldr	r2, [pc, #56]	@ (90003bf4 <BSP_LCD_DrawVLine+0xa0>)
90003bbc:	68fb      	ldr	r3, [r7, #12]
90003bbe:	015b      	lsls	r3, r3, #5
90003bc0:	4413      	add	r3, r2
90003bc2:	3304      	adds	r3, #4
90003bc4:	681a      	ldr	r2, [r3, #0]
90003bc6:	687b      	ldr	r3, [r7, #4]
90003bc8:	1ad3      	subs	r3, r2, r3
90003bca:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90003bcc:	6979      	ldr	r1, [r7, #20]
90003bce:	4a09      	ldr	r2, [pc, #36]	@ (90003bf4 <BSP_LCD_DrawVLine+0xa0>)
90003bd0:	68fb      	ldr	r3, [r7, #12]
90003bd2:	015b      	lsls	r3, r3, #5
90003bd4:	4413      	add	r3, r2
90003bd6:	681b      	ldr	r3, [r3, #0]
90003bd8:	3b01      	subs	r3, #1
90003bda:	6a3a      	ldr	r2, [r7, #32]
90003bdc:	9201      	str	r2, [sp, #4]
90003bde:	9300      	str	r3, [sp, #0]
90003be0:	683b      	ldr	r3, [r7, #0]
90003be2:	2201      	movs	r2, #1
90003be4:	68f8      	ldr	r0, [r7, #12]
90003be6:	f000 f901 	bl	90003dec <LL_FillBuffer>

  return BSP_ERROR_NONE;
90003bea:	2300      	movs	r3, #0
}
90003bec:	4618      	mov	r0, r3
90003bee:	3718      	adds	r7, #24
90003bf0:	46bd      	mov	sp, r7
90003bf2:	bd80      	pop	{r7, pc}
90003bf4:	20001d34 	.word	0x20001d34
90003bf8:	20001c8c 	.word	0x20001c8c

90003bfc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90003bfc:	b580      	push	{r7, lr}
90003bfe:	b088      	sub	sp, #32
90003c00:	af02      	add	r7, sp, #8
90003c02:	60f8      	str	r0, [r7, #12]
90003c04:	60b9      	str	r1, [r7, #8]
90003c06:	607a      	str	r2, [r7, #4]
90003c08:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90003c0a:	4a1b      	ldr	r2, [pc, #108]	@ (90003c78 <BSP_LCD_FillRect+0x7c>)
90003c0c:	68fb      	ldr	r3, [r7, #12]
90003c0e:	015b      	lsls	r3, r3, #5
90003c10:	4413      	add	r3, r2
90003c12:	3308      	adds	r3, #8
90003c14:	681b      	ldr	r3, [r3, #0]
90003c16:	4a19      	ldr	r2, [pc, #100]	@ (90003c7c <BSP_LCD_FillRect+0x80>)
90003c18:	2134      	movs	r1, #52	@ 0x34
90003c1a:	fb01 f303 	mul.w	r3, r1, r3
90003c1e:	4413      	add	r3, r2
90003c20:	335c      	adds	r3, #92	@ 0x5c
90003c22:	681a      	ldr	r2, [r3, #0]
90003c24:	4914      	ldr	r1, [pc, #80]	@ (90003c78 <BSP_LCD_FillRect+0x7c>)
90003c26:	68fb      	ldr	r3, [r7, #12]
90003c28:	015b      	lsls	r3, r3, #5
90003c2a:	440b      	add	r3, r1
90003c2c:	3310      	adds	r3, #16
90003c2e:	681b      	ldr	r3, [r3, #0]
90003c30:	4811      	ldr	r0, [pc, #68]	@ (90003c78 <BSP_LCD_FillRect+0x7c>)
90003c32:	68f9      	ldr	r1, [r7, #12]
90003c34:	0149      	lsls	r1, r1, #5
90003c36:	4401      	add	r1, r0
90003c38:	6809      	ldr	r1, [r1, #0]
90003c3a:	6878      	ldr	r0, [r7, #4]
90003c3c:	fb01 f000 	mul.w	r0, r1, r0
90003c40:	68b9      	ldr	r1, [r7, #8]
90003c42:	4401      	add	r1, r0
90003c44:	fb01 f303 	mul.w	r3, r1, r3
90003c48:	4413      	add	r3, r2
90003c4a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
90003c4c:	6979      	ldr	r1, [r7, #20]
90003c4e:	4a0a      	ldr	r2, [pc, #40]	@ (90003c78 <BSP_LCD_FillRect+0x7c>)
90003c50:	68fb      	ldr	r3, [r7, #12]
90003c52:	015b      	lsls	r3, r3, #5
90003c54:	4413      	add	r3, r2
90003c56:	681a      	ldr	r2, [r3, #0]
90003c58:	683b      	ldr	r3, [r7, #0]
90003c5a:	1ad3      	subs	r3, r2, r3
90003c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003c5e:	9201      	str	r2, [sp, #4]
90003c60:	9300      	str	r3, [sp, #0]
90003c62:	6a3b      	ldr	r3, [r7, #32]
90003c64:	683a      	ldr	r2, [r7, #0]
90003c66:	68f8      	ldr	r0, [r7, #12]
90003c68:	f000 f8c0 	bl	90003dec <LL_FillBuffer>

  return BSP_ERROR_NONE;
90003c6c:	2300      	movs	r3, #0
}
90003c6e:	4618      	mov	r0, r3
90003c70:	3718      	adds	r7, #24
90003c72:	46bd      	mov	sp, r7
90003c74:	bd80      	pop	{r7, pc}
90003c76:	bf00      	nop
90003c78:	20001d34 	.word	0x20001d34
90003c7c:	20001c8c 	.word	0x20001c8c

90003c80 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90003c80:	b480      	push	{r7}
90003c82:	b085      	sub	sp, #20
90003c84:	af00      	add	r7, sp, #0
90003c86:	60f8      	str	r0, [r7, #12]
90003c88:	60b9      	str	r1, [r7, #8]
90003c8a:	607a      	str	r2, [r7, #4]
90003c8c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90003c8e:	4a28      	ldr	r2, [pc, #160]	@ (90003d30 <BSP_LCD_ReadPixel+0xb0>)
90003c90:	68fb      	ldr	r3, [r7, #12]
90003c92:	015b      	lsls	r3, r3, #5
90003c94:	4413      	add	r3, r2
90003c96:	3308      	adds	r3, #8
90003c98:	681b      	ldr	r3, [r3, #0]
90003c9a:	4a26      	ldr	r2, [pc, #152]	@ (90003d34 <BSP_LCD_ReadPixel+0xb4>)
90003c9c:	2134      	movs	r1, #52	@ 0x34
90003c9e:	fb01 f303 	mul.w	r3, r1, r3
90003ca2:	4413      	add	r3, r2
90003ca4:	3348      	adds	r3, #72	@ 0x48
90003ca6:	681b      	ldr	r3, [r3, #0]
90003ca8:	2b00      	cmp	r3, #0
90003caa:	d11c      	bne.n	90003ce6 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90003cac:	4a20      	ldr	r2, [pc, #128]	@ (90003d30 <BSP_LCD_ReadPixel+0xb0>)
90003cae:	68fb      	ldr	r3, [r7, #12]
90003cb0:	015b      	lsls	r3, r3, #5
90003cb2:	4413      	add	r3, r2
90003cb4:	3308      	adds	r3, #8
90003cb6:	681b      	ldr	r3, [r3, #0]
90003cb8:	4a1e      	ldr	r2, [pc, #120]	@ (90003d34 <BSP_LCD_ReadPixel+0xb4>)
90003cba:	2134      	movs	r1, #52	@ 0x34
90003cbc:	fb01 f303 	mul.w	r3, r1, r3
90003cc0:	4413      	add	r3, r2
90003cc2:	335c      	adds	r3, #92	@ 0x5c
90003cc4:	681a      	ldr	r2, [r3, #0]
90003cc6:	491a      	ldr	r1, [pc, #104]	@ (90003d30 <BSP_LCD_ReadPixel+0xb0>)
90003cc8:	68fb      	ldr	r3, [r7, #12]
90003cca:	015b      	lsls	r3, r3, #5
90003ccc:	440b      	add	r3, r1
90003cce:	681b      	ldr	r3, [r3, #0]
90003cd0:	6879      	ldr	r1, [r7, #4]
90003cd2:	fb03 f101 	mul.w	r1, r3, r1
90003cd6:	68bb      	ldr	r3, [r7, #8]
90003cd8:	440b      	add	r3, r1
90003cda:	009b      	lsls	r3, r3, #2
90003cdc:	4413      	add	r3, r2
90003cde:	681a      	ldr	r2, [r3, #0]
90003ce0:	683b      	ldr	r3, [r7, #0]
90003ce2:	601a      	str	r2, [r3, #0]
90003ce4:	e01d      	b.n	90003d22 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90003ce6:	4a12      	ldr	r2, [pc, #72]	@ (90003d30 <BSP_LCD_ReadPixel+0xb0>)
90003ce8:	68fb      	ldr	r3, [r7, #12]
90003cea:	015b      	lsls	r3, r3, #5
90003cec:	4413      	add	r3, r2
90003cee:	3308      	adds	r3, #8
90003cf0:	681b      	ldr	r3, [r3, #0]
90003cf2:	4a10      	ldr	r2, [pc, #64]	@ (90003d34 <BSP_LCD_ReadPixel+0xb4>)
90003cf4:	2134      	movs	r1, #52	@ 0x34
90003cf6:	fb01 f303 	mul.w	r3, r1, r3
90003cfa:	4413      	add	r3, r2
90003cfc:	335c      	adds	r3, #92	@ 0x5c
90003cfe:	681a      	ldr	r2, [r3, #0]
90003d00:	490b      	ldr	r1, [pc, #44]	@ (90003d30 <BSP_LCD_ReadPixel+0xb0>)
90003d02:	68fb      	ldr	r3, [r7, #12]
90003d04:	015b      	lsls	r3, r3, #5
90003d06:	440b      	add	r3, r1
90003d08:	681b      	ldr	r3, [r3, #0]
90003d0a:	6879      	ldr	r1, [r7, #4]
90003d0c:	fb03 f101 	mul.w	r1, r3, r1
90003d10:	68bb      	ldr	r3, [r7, #8]
90003d12:	440b      	add	r3, r1
90003d14:	005b      	lsls	r3, r3, #1
90003d16:	4413      	add	r3, r2
90003d18:	881b      	ldrh	r3, [r3, #0]
90003d1a:	b29b      	uxth	r3, r3
90003d1c:	461a      	mov	r2, r3
90003d1e:	683b      	ldr	r3, [r7, #0]
90003d20:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90003d22:	2300      	movs	r3, #0
}
90003d24:	4618      	mov	r0, r3
90003d26:	3714      	adds	r7, #20
90003d28:	46bd      	mov	sp, r7
90003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d2e:	4770      	bx	lr
90003d30:	20001d34 	.word	0x20001d34
90003d34:	20001c8c 	.word	0x20001c8c

90003d38 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90003d38:	b480      	push	{r7}
90003d3a:	b085      	sub	sp, #20
90003d3c:	af00      	add	r7, sp, #0
90003d3e:	60f8      	str	r0, [r7, #12]
90003d40:	60b9      	str	r1, [r7, #8]
90003d42:	607a      	str	r2, [r7, #4]
90003d44:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90003d46:	4a27      	ldr	r2, [pc, #156]	@ (90003de4 <BSP_LCD_WritePixel+0xac>)
90003d48:	68fb      	ldr	r3, [r7, #12]
90003d4a:	015b      	lsls	r3, r3, #5
90003d4c:	4413      	add	r3, r2
90003d4e:	3308      	adds	r3, #8
90003d50:	681b      	ldr	r3, [r3, #0]
90003d52:	4a25      	ldr	r2, [pc, #148]	@ (90003de8 <BSP_LCD_WritePixel+0xb0>)
90003d54:	2134      	movs	r1, #52	@ 0x34
90003d56:	fb01 f303 	mul.w	r3, r1, r3
90003d5a:	4413      	add	r3, r2
90003d5c:	3348      	adds	r3, #72	@ 0x48
90003d5e:	681b      	ldr	r3, [r3, #0]
90003d60:	2b00      	cmp	r3, #0
90003d62:	d11c      	bne.n	90003d9e <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90003d64:	4a1f      	ldr	r2, [pc, #124]	@ (90003de4 <BSP_LCD_WritePixel+0xac>)
90003d66:	68fb      	ldr	r3, [r7, #12]
90003d68:	015b      	lsls	r3, r3, #5
90003d6a:	4413      	add	r3, r2
90003d6c:	3308      	adds	r3, #8
90003d6e:	681b      	ldr	r3, [r3, #0]
90003d70:	4a1d      	ldr	r2, [pc, #116]	@ (90003de8 <BSP_LCD_WritePixel+0xb0>)
90003d72:	2134      	movs	r1, #52	@ 0x34
90003d74:	fb01 f303 	mul.w	r3, r1, r3
90003d78:	4413      	add	r3, r2
90003d7a:	335c      	adds	r3, #92	@ 0x5c
90003d7c:	681a      	ldr	r2, [r3, #0]
90003d7e:	4919      	ldr	r1, [pc, #100]	@ (90003de4 <BSP_LCD_WritePixel+0xac>)
90003d80:	68fb      	ldr	r3, [r7, #12]
90003d82:	015b      	lsls	r3, r3, #5
90003d84:	440b      	add	r3, r1
90003d86:	681b      	ldr	r3, [r3, #0]
90003d88:	6879      	ldr	r1, [r7, #4]
90003d8a:	fb03 f101 	mul.w	r1, r3, r1
90003d8e:	68bb      	ldr	r3, [r7, #8]
90003d90:	440b      	add	r3, r1
90003d92:	009b      	lsls	r3, r3, #2
90003d94:	4413      	add	r3, r2
90003d96:	461a      	mov	r2, r3
90003d98:	683b      	ldr	r3, [r7, #0]
90003d9a:	6013      	str	r3, [r2, #0]
90003d9c:	e01b      	b.n	90003dd6 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
90003d9e:	4a11      	ldr	r2, [pc, #68]	@ (90003de4 <BSP_LCD_WritePixel+0xac>)
90003da0:	68fb      	ldr	r3, [r7, #12]
90003da2:	015b      	lsls	r3, r3, #5
90003da4:	4413      	add	r3, r2
90003da6:	3308      	adds	r3, #8
90003da8:	681b      	ldr	r3, [r3, #0]
90003daa:	4a0f      	ldr	r2, [pc, #60]	@ (90003de8 <BSP_LCD_WritePixel+0xb0>)
90003dac:	2134      	movs	r1, #52	@ 0x34
90003dae:	fb01 f303 	mul.w	r3, r1, r3
90003db2:	4413      	add	r3, r2
90003db4:	335c      	adds	r3, #92	@ 0x5c
90003db6:	681a      	ldr	r2, [r3, #0]
90003db8:	490a      	ldr	r1, [pc, #40]	@ (90003de4 <BSP_LCD_WritePixel+0xac>)
90003dba:	68fb      	ldr	r3, [r7, #12]
90003dbc:	015b      	lsls	r3, r3, #5
90003dbe:	440b      	add	r3, r1
90003dc0:	681b      	ldr	r3, [r3, #0]
90003dc2:	6879      	ldr	r1, [r7, #4]
90003dc4:	fb03 f101 	mul.w	r1, r3, r1
90003dc8:	68bb      	ldr	r3, [r7, #8]
90003dca:	440b      	add	r3, r1
90003dcc:	005b      	lsls	r3, r3, #1
90003dce:	4413      	add	r3, r2
90003dd0:	683a      	ldr	r2, [r7, #0]
90003dd2:	b292      	uxth	r2, r2
90003dd4:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90003dd6:	2300      	movs	r3, #0
}
90003dd8:	4618      	mov	r0, r3
90003dda:	3714      	adds	r7, #20
90003ddc:	46bd      	mov	sp, r7
90003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
90003de2:	4770      	bx	lr
90003de4:	20001d34 	.word	0x20001d34
90003de8:	20001c8c 	.word	0x20001c8c

90003dec <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90003dec:	b580      	push	{r7, lr}
90003dee:	b088      	sub	sp, #32
90003df0:	af02      	add	r7, sp, #8
90003df2:	60f8      	str	r0, [r7, #12]
90003df4:	60b9      	str	r1, [r7, #8]
90003df6:	607a      	str	r2, [r7, #4]
90003df8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90003dfc:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90003dfe:	4a2d      	ldr	r2, [pc, #180]	@ (90003eb4 <LL_FillBuffer+0xc8>)
90003e00:	68fb      	ldr	r3, [r7, #12]
90003e02:	015b      	lsls	r3, r3, #5
90003e04:	4413      	add	r3, r2
90003e06:	330c      	adds	r3, #12
90003e08:	681b      	ldr	r3, [r3, #0]
90003e0a:	2b02      	cmp	r3, #2
90003e0c:	d129      	bne.n	90003e62 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90003e0e:	2302      	movs	r3, #2
90003e10:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
90003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90003e14:	0adb      	lsrs	r3, r3, #11
90003e16:	f003 021f 	and.w	r2, r3, #31
90003e1a:	4613      	mov	r3, r2
90003e1c:	011b      	lsls	r3, r3, #4
90003e1e:	4413      	add	r3, r2
90003e20:	015a      	lsls	r2, r3, #5
90003e22:	1ad3      	subs	r3, r2, r3
90003e24:	3317      	adds	r3, #23
90003e26:	099b      	lsrs	r3, r3, #6
90003e28:	0419      	lsls	r1, r3, #16
90003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90003e2c:	095b      	lsrs	r3, r3, #5
90003e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90003e32:	4613      	mov	r3, r2
90003e34:	01db      	lsls	r3, r3, #7
90003e36:	4413      	add	r3, r2
90003e38:	005b      	lsls	r3, r3, #1
90003e3a:	4413      	add	r3, r2
90003e3c:	3321      	adds	r3, #33	@ 0x21
90003e3e:	099b      	lsrs	r3, r3, #6
90003e40:	021b      	lsls	r3, r3, #8
90003e42:	4319      	orrs	r1, r3
90003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90003e46:	f003 021f 	and.w	r2, r3, #31
90003e4a:	4613      	mov	r3, r2
90003e4c:	011b      	lsls	r3, r3, #4
90003e4e:	4413      	add	r3, r2
90003e50:	015a      	lsls	r2, r3, #5
90003e52:	1ad3      	subs	r3, r2, r3
90003e54:	3317      	adds	r3, #23
90003e56:	099b      	lsrs	r3, r3, #6
90003e58:	430b      	orrs	r3, r1
90003e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
90003e5e:	613b      	str	r3, [r7, #16]
    break;
90003e60:	e002      	b.n	90003e68 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90003e62:	2300      	movs	r3, #0
90003e64:	617b      	str	r3, [r7, #20]
    break;
90003e66:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90003e68:	4b13      	ldr	r3, [pc, #76]	@ (90003eb8 <LL_FillBuffer+0xcc>)
90003e6a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
90003e6e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90003e70:	4a11      	ldr	r2, [pc, #68]	@ (90003eb8 <LL_FillBuffer+0xcc>)
90003e72:	697b      	ldr	r3, [r7, #20]
90003e74:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90003e76:	4a10      	ldr	r2, [pc, #64]	@ (90003eb8 <LL_FillBuffer+0xcc>)
90003e78:	6a3b      	ldr	r3, [r7, #32]
90003e7a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
90003e7c:	4b0e      	ldr	r3, [pc, #56]	@ (90003eb8 <LL_FillBuffer+0xcc>)
90003e7e:	4a0f      	ldr	r2, [pc, #60]	@ (90003ebc <LL_FillBuffer+0xd0>)
90003e80:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90003e82:	480d      	ldr	r0, [pc, #52]	@ (90003eb8 <LL_FillBuffer+0xcc>)
90003e84:	f001 f86e 	bl	90004f64 <HAL_DMA2D_Init>
90003e88:	4603      	mov	r3, r0
90003e8a:	2b00      	cmp	r3, #0
90003e8c:	d10e      	bne.n	90003eac <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90003e8e:	68ba      	ldr	r2, [r7, #8]
90003e90:	683b      	ldr	r3, [r7, #0]
90003e92:	9300      	str	r3, [sp, #0]
90003e94:	687b      	ldr	r3, [r7, #4]
90003e96:	6939      	ldr	r1, [r7, #16]
90003e98:	4807      	ldr	r0, [pc, #28]	@ (90003eb8 <LL_FillBuffer+0xcc>)
90003e9a:	f001 f8d1 	bl	90005040 <HAL_DMA2D_Start>
90003e9e:	4603      	mov	r3, r0
90003ea0:	2b00      	cmp	r3, #0
90003ea2:	d103      	bne.n	90003eac <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90003ea4:	2132      	movs	r1, #50	@ 0x32
90003ea6:	4804      	ldr	r0, [pc, #16]	@ (90003eb8 <LL_FillBuffer+0xcc>)
90003ea8:	f001 f8f5 	bl	90005096 <HAL_DMA2D_PollForTransfer>
    }
  }
}
90003eac:	bf00      	nop
90003eae:	3718      	adds	r7, #24
90003eb0:	46bd      	mov	sp, r7
90003eb2:	bd80      	pop	{r7, pc}
90003eb4:	20001d34 	.word	0x20001d34
90003eb8:	20001c24 	.word	0x20001c24
90003ebc:	52001000 	.word	0x52001000

90003ec0 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90003ec0:	b580      	push	{r7, lr}
90003ec2:	b088      	sub	sp, #32
90003ec4:	af02      	add	r7, sp, #8
90003ec6:	60f8      	str	r0, [r7, #12]
90003ec8:	60b9      	str	r1, [r7, #8]
90003eca:	607a      	str	r2, [r7, #4]
90003ecc:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90003ece:	4a23      	ldr	r2, [pc, #140]	@ (90003f5c <LL_ConvertLineToRGB+0x9c>)
90003ed0:	68fb      	ldr	r3, [r7, #12]
90003ed2:	015b      	lsls	r3, r3, #5
90003ed4:	4413      	add	r3, r2
90003ed6:	330c      	adds	r3, #12
90003ed8:	681b      	ldr	r3, [r3, #0]
90003eda:	2b02      	cmp	r3, #2
90003edc:	d102      	bne.n	90003ee4 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90003ede:	2302      	movs	r3, #2
90003ee0:	617b      	str	r3, [r7, #20]
    break;
90003ee2:	e002      	b.n	90003eea <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90003ee4:	2300      	movs	r3, #0
90003ee6:	617b      	str	r3, [r7, #20]
    break;
90003ee8:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90003eea:	4b1d      	ldr	r3, [pc, #116]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003eec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90003ef0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90003ef2:	4a1b      	ldr	r2, [pc, #108]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003ef4:	697b      	ldr	r3, [r7, #20]
90003ef6:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90003ef8:	4b19      	ldr	r3, [pc, #100]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003efa:	2200      	movs	r2, #0
90003efc:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90003efe:	4b18      	ldr	r3, [pc, #96]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f00:	2200      	movs	r2, #0
90003f02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90003f04:	4b16      	ldr	r3, [pc, #88]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f06:	22ff      	movs	r2, #255	@ 0xff
90003f08:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90003f0a:	4a15      	ldr	r2, [pc, #84]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f0c:	6a3b      	ldr	r3, [r7, #32]
90003f0e:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90003f10:	4b13      	ldr	r3, [pc, #76]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f12:	2200      	movs	r2, #0
90003f14:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90003f16:	4b12      	ldr	r3, [pc, #72]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f18:	4a12      	ldr	r2, [pc, #72]	@ (90003f64 <LL_ConvertLineToRGB+0xa4>)
90003f1a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90003f1c:	4810      	ldr	r0, [pc, #64]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f1e:	f001 f821 	bl	90004f64 <HAL_DMA2D_Init>
90003f22:	4603      	mov	r3, r0
90003f24:	2b00      	cmp	r3, #0
90003f26:	d115      	bne.n	90003f54 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90003f28:	2101      	movs	r1, #1
90003f2a:	480d      	ldr	r0, [pc, #52]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f2c:	f001 f99c 	bl	90005268 <HAL_DMA2D_ConfigLayer>
90003f30:	4603      	mov	r3, r0
90003f32:	2b00      	cmp	r3, #0
90003f34:	d10e      	bne.n	90003f54 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90003f36:	68b9      	ldr	r1, [r7, #8]
90003f38:	687a      	ldr	r2, [r7, #4]
90003f3a:	2301      	movs	r3, #1
90003f3c:	9300      	str	r3, [sp, #0]
90003f3e:	683b      	ldr	r3, [r7, #0]
90003f40:	4807      	ldr	r0, [pc, #28]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f42:	f001 f87d 	bl	90005040 <HAL_DMA2D_Start>
90003f46:	4603      	mov	r3, r0
90003f48:	2b00      	cmp	r3, #0
90003f4a:	d103      	bne.n	90003f54 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90003f4c:	2132      	movs	r1, #50	@ 0x32
90003f4e:	4804      	ldr	r0, [pc, #16]	@ (90003f60 <LL_ConvertLineToRGB+0xa0>)
90003f50:	f001 f8a1 	bl	90005096 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90003f54:	bf00      	nop
90003f56:	3718      	adds	r7, #24
90003f58:	46bd      	mov	sp, r7
90003f5a:	bd80      	pop	{r7, pc}
90003f5c:	20001d34 	.word	0x20001d34
90003f60:	20001c24 	.word	0x20001c24
90003f64:	52001000 	.word	0x52001000

90003f68 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90003f68:	b580      	push	{r7, lr}
90003f6a:	b08e      	sub	sp, #56	@ 0x38
90003f6c:	af00      	add	r7, sp, #0
90003f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90003f70:	687b      	ldr	r3, [r7, #4]
90003f72:	681b      	ldr	r3, [r3, #0]
90003f74:	4a5b      	ldr	r2, [pc, #364]	@ (900040e4 <LTDC_MspInit+0x17c>)
90003f76:	4293      	cmp	r3, r2
90003f78:	f040 80b0 	bne.w	900040dc <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90003f7c:	4b5a      	ldr	r3, [pc, #360]	@ (900040e8 <LTDC_MspInit+0x180>)
90003f7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90003f82:	4a59      	ldr	r2, [pc, #356]	@ (900040e8 <LTDC_MspInit+0x180>)
90003f84:	f043 0308 	orr.w	r3, r3, #8
90003f88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90003f8c:	4b56      	ldr	r3, [pc, #344]	@ (900040e8 <LTDC_MspInit+0x180>)
90003f8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90003f92:	f003 0308 	and.w	r3, r3, #8
90003f96:	623b      	str	r3, [r7, #32]
90003f98:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90003f9a:	4b53      	ldr	r3, [pc, #332]	@ (900040e8 <LTDC_MspInit+0x180>)
90003f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003fa0:	4a51      	ldr	r2, [pc, #324]	@ (900040e8 <LTDC_MspInit+0x180>)
90003fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90003fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003faa:	4b4f      	ldr	r3, [pc, #316]	@ (900040e8 <LTDC_MspInit+0x180>)
90003fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90003fb4:	61fb      	str	r3, [r7, #28]
90003fb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90003fb8:	4b4b      	ldr	r3, [pc, #300]	@ (900040e8 <LTDC_MspInit+0x180>)
90003fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003fbe:	4a4a      	ldr	r2, [pc, #296]	@ (900040e8 <LTDC_MspInit+0x180>)
90003fc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90003fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003fc8:	4b47      	ldr	r3, [pc, #284]	@ (900040e8 <LTDC_MspInit+0x180>)
90003fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90003fd2:	61bb      	str	r3, [r7, #24]
90003fd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90003fd6:	4b44      	ldr	r3, [pc, #272]	@ (900040e8 <LTDC_MspInit+0x180>)
90003fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003fdc:	4a42      	ldr	r2, [pc, #264]	@ (900040e8 <LTDC_MspInit+0x180>)
90003fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90003fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003fe6:	4b40      	ldr	r3, [pc, #256]	@ (900040e8 <LTDC_MspInit+0x180>)
90003fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90003ff0:	617b      	str	r3, [r7, #20]
90003ff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90003ff4:	4b3c      	ldr	r3, [pc, #240]	@ (900040e8 <LTDC_MspInit+0x180>)
90003ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003ffa:	4a3b      	ldr	r2, [pc, #236]	@ (900040e8 <LTDC_MspInit+0x180>)
90003ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90004000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90004004:	4b38      	ldr	r3, [pc, #224]	@ (900040e8 <LTDC_MspInit+0x180>)
90004006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000400a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000400e:	613b      	str	r3, [r7, #16]
90004010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90004012:	4b35      	ldr	r3, [pc, #212]	@ (900040e8 <LTDC_MspInit+0x180>)
90004014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90004018:	4a33      	ldr	r2, [pc, #204]	@ (900040e8 <LTDC_MspInit+0x180>)
9000401a:	f043 0308 	orr.w	r3, r3, #8
9000401e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90004022:	4b31      	ldr	r3, [pc, #196]	@ (900040e8 <LTDC_MspInit+0x180>)
90004024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90004028:	f003 0308 	and.w	r3, r3, #8
9000402c:	60fb      	str	r3, [r7, #12]
9000402e:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90004030:	f24d 2303 	movw	r3, #53763	@ 0xd203
90004034:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90004036:	2302      	movs	r3, #2
90004038:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
9000403a:	2300      	movs	r3, #0
9000403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000403e:	2302      	movs	r3, #2
90004040:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90004042:	230e      	movs	r3, #14
90004044:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90004046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000404a:	4619      	mov	r1, r3
9000404c:	4827      	ldr	r0, [pc, #156]	@ (900040ec <LTDC_MspInit+0x184>)
9000404e:	f001 fa5f 	bl	90005510 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90004052:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90004056:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90004058:	230e      	movs	r3, #14
9000405a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
9000405c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90004060:	4619      	mov	r1, r3
90004062:	4823      	ldr	r0, [pc, #140]	@ (900040f0 <LTDC_MspInit+0x188>)
90004064:	f001 fa54 	bl	90005510 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90004068:	23ff      	movs	r3, #255	@ 0xff
9000406a:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000406c:	230e      	movs	r3, #14
9000406e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90004070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90004074:	4619      	mov	r1, r3
90004076:	481f      	ldr	r0, [pc, #124]	@ (900040f4 <LTDC_MspInit+0x18c>)
90004078:	f001 fa4a 	bl	90005510 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
9000407c:	f240 2302 	movw	r3, #514	@ 0x202
90004080:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90004082:	2302      	movs	r3, #2
90004084:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90004086:	2300      	movs	r3, #0
90004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000408a:	2302      	movs	r3, #2
9000408c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000408e:	230e      	movs	r3, #14
90004090:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90004092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90004096:	4619      	mov	r1, r3
90004098:	4817      	ldr	r0, [pc, #92]	@ (900040f8 <LTDC_MspInit+0x190>)
9000409a:	f001 fa39 	bl	90005510 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
9000409e:	2380      	movs	r3, #128	@ 0x80
900040a0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900040a2:	2301      	movs	r3, #1
900040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900040a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900040aa:	4619      	mov	r1, r3
900040ac:	4813      	ldr	r0, [pc, #76]	@ (900040fc <LTDC_MspInit+0x194>)
900040ae:	f001 fa2f 	bl	90005510 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
900040b2:	2201      	movs	r2, #1
900040b4:	2180      	movs	r1, #128	@ 0x80
900040b6:	4811      	ldr	r0, [pc, #68]	@ (900040fc <LTDC_MspInit+0x194>)
900040b8:	f001 fce4 	bl	90005a84 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
900040bc:	4b0a      	ldr	r3, [pc, #40]	@ (900040e8 <LTDC_MspInit+0x180>)
900040be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
900040c2:	4a09      	ldr	r2, [pc, #36]	@ (900040e8 <LTDC_MspInit+0x180>)
900040c4:	f043 0308 	orr.w	r3, r3, #8
900040c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
900040cc:	4b06      	ldr	r3, [pc, #24]	@ (900040e8 <LTDC_MspInit+0x180>)
900040ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
900040d2:	4a05      	ldr	r2, [pc, #20]	@ (900040e8 <LTDC_MspInit+0x180>)
900040d4:	f023 0308 	bic.w	r3, r3, #8
900040d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
900040dc:	bf00      	nop
900040de:	3738      	adds	r7, #56	@ 0x38
900040e0:	46bd      	mov	sp, r7
900040e2:	bd80      	pop	{r7, pc}
900040e4:	50001000 	.word	0x50001000
900040e8:	58024400 	.word	0x58024400
900040ec:	58022000 	.word	0x58022000
900040f0:	58022400 	.word	0x58022400
900040f4:	58022800 	.word	0x58022800
900040f8:	58021c00 	.word	0x58021c00
900040fc:	58020c00 	.word	0x58020c00

90004100 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90004100:	b480      	push	{r7}
90004102:	b085      	sub	sp, #20
90004104:	af00      	add	r7, sp, #0
90004106:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90004108:	687b      	ldr	r3, [r7, #4]
9000410a:	681b      	ldr	r3, [r3, #0]
9000410c:	4a11      	ldr	r2, [pc, #68]	@ (90004154 <DMA2D_MspInit+0x54>)
9000410e:	4293      	cmp	r3, r2
90004110:	d11a      	bne.n	90004148 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004112:	4b11      	ldr	r3, [pc, #68]	@ (90004158 <DMA2D_MspInit+0x58>)
90004114:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90004118:	4a0f      	ldr	r2, [pc, #60]	@ (90004158 <DMA2D_MspInit+0x58>)
9000411a:	f043 0310 	orr.w	r3, r3, #16
9000411e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90004122:	4b0d      	ldr	r3, [pc, #52]	@ (90004158 <DMA2D_MspInit+0x58>)
90004124:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90004128:	f003 0310 	and.w	r3, r3, #16
9000412c:	60fb      	str	r3, [r7, #12]
9000412e:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90004130:	4b09      	ldr	r3, [pc, #36]	@ (90004158 <DMA2D_MspInit+0x58>)
90004132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90004134:	4a08      	ldr	r2, [pc, #32]	@ (90004158 <DMA2D_MspInit+0x58>)
90004136:	f043 0310 	orr.w	r3, r3, #16
9000413a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
9000413c:	4b06      	ldr	r3, [pc, #24]	@ (90004158 <DMA2D_MspInit+0x58>)
9000413e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90004140:	4a05      	ldr	r2, [pc, #20]	@ (90004158 <DMA2D_MspInit+0x58>)
90004142:	f023 0310 	bic.w	r3, r3, #16
90004146:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90004148:	bf00      	nop
9000414a:	3714      	adds	r7, #20
9000414c:	46bd      	mov	sp, r7
9000414e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004152:	4770      	bx	lr
90004154:	52001000 	.word	0x52001000
90004158:	58024400 	.word	0x58024400

9000415c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
9000415c:	b580      	push	{r7, lr}
9000415e:	b08a      	sub	sp, #40	@ 0x28
90004160:	af00      	add	r7, sp, #0
90004162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90004164:	4b18      	ldr	r3, [pc, #96]	@ (900041c8 <TIMx_PWM_MspInit+0x6c>)
90004166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000416a:	4a17      	ldr	r2, [pc, #92]	@ (900041c8 <TIMx_PWM_MspInit+0x6c>)
9000416c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90004170:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90004174:	4b14      	ldr	r3, [pc, #80]	@ (900041c8 <TIMx_PWM_MspInit+0x6c>)
90004176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000417a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000417e:	613b      	str	r3, [r7, #16]
90004180:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90004182:	4b11      	ldr	r3, [pc, #68]	@ (900041c8 <TIMx_PWM_MspInit+0x6c>)
90004184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90004188:	4a0f      	ldr	r2, [pc, #60]	@ (900041c8 <TIMx_PWM_MspInit+0x6c>)
9000418a:	f043 0302 	orr.w	r3, r3, #2
9000418e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90004192:	4b0d      	ldr	r3, [pc, #52]	@ (900041c8 <TIMx_PWM_MspInit+0x6c>)
90004194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90004198:	f003 0302 	and.w	r3, r3, #2
9000419c:	60fb      	str	r3, [r7, #12]
9000419e:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
900041a0:	2302      	movs	r3, #2
900041a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
900041a4:	2300      	movs	r3, #0
900041a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
900041a8:	2301      	movs	r3, #1
900041aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
900041ac:	2303      	movs	r3, #3
900041ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
900041b0:	2301      	movs	r3, #1
900041b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
900041b4:	f107 0314 	add.w	r3, r7, #20
900041b8:	4619      	mov	r1, r3
900041ba:	4804      	ldr	r0, [pc, #16]	@ (900041cc <TIMx_PWM_MspInit+0x70>)
900041bc:	f001 f9a8 	bl	90005510 <HAL_GPIO_Init>
}
900041c0:	bf00      	nop
900041c2:	3728      	adds	r7, #40	@ 0x28
900041c4:	46bd      	mov	sp, r7
900041c6:	bd80      	pop	{r7, pc}
900041c8:	58024400 	.word	0x58024400
900041cc:	58022800 	.word	0x58022800

900041d0 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
900041d0:	b580      	push	{r7, lr}
900041d2:	b082      	sub	sp, #8
900041d4:	af00      	add	r7, sp, #0
900041d6:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
900041d8:	687b      	ldr	r3, [r7, #4]
900041da:	4a11      	ldr	r2, [pc, #68]	@ (90004220 <TIMx_PWM_Init+0x50>)
900041dc:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
900041de:	6878      	ldr	r0, [r7, #4]
900041e0:	f007 fce6 	bl	9000bbb0 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
900041e4:	6878      	ldr	r0, [r7, #4]
900041e6:	f7ff ffb9 	bl	9000415c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
900041ea:	687b      	ldr	r3, [r7, #4]
900041ec:	2204      	movs	r2, #4
900041ee:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
900041f0:	687b      	ldr	r3, [r7, #4]
900041f2:	f24c 3250 	movw	r2, #50000	@ 0xc350
900041f6:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
900041f8:	687b      	ldr	r3, [r7, #4]
900041fa:	2200      	movs	r2, #0
900041fc:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
900041fe:	687b      	ldr	r3, [r7, #4]
90004200:	2200      	movs	r2, #0
90004202:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90004204:	687b      	ldr	r3, [r7, #4]
90004206:	2200      	movs	r2, #0
90004208:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
9000420a:	687b      	ldr	r3, [r7, #4]
9000420c:	2200      	movs	r2, #0
9000420e:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90004210:	6878      	ldr	r0, [r7, #4]
90004212:	f007 fc76 	bl	9000bb02 <HAL_TIM_PWM_Init>
}
90004216:	bf00      	nop
90004218:	3708      	adds	r7, #8
9000421a:	46bd      	mov	sp, r7
9000421c:	bd80      	pop	{r7, pc}
9000421e:	bf00      	nop
90004220:	40010400 	.word	0x40010400

90004224 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90004224:	b580      	push	{r7, lr}
90004226:	b084      	sub	sp, #16
90004228:	af00      	add	r7, sp, #0
9000422a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
9000422c:	2300      	movs	r3, #0
9000422e:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90004230:	687b      	ldr	r3, [r7, #4]
90004232:	2b00      	cmp	r3, #0
90004234:	d003      	beq.n	9000423e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90004236:	f06f 0301 	mvn.w	r3, #1
9000423a:	60fb      	str	r3, [r7, #12]
9000423c:	e044      	b.n	900042c8 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
9000423e:	687b      	ldr	r3, [r7, #4]
90004240:	2234      	movs	r2, #52	@ 0x34
90004242:	fb02 f303 	mul.w	r3, r2, r3
90004246:	4a23      	ldr	r2, [pc, #140]	@ (900042d4 <BSP_SDRAM_Init+0xb0>)
90004248:	4413      	add	r3, r2
9000424a:	4618      	mov	r0, r3
9000424c:	f000 f892 	bl	90004374 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90004250:	687b      	ldr	r3, [r7, #4]
90004252:	2234      	movs	r2, #52	@ 0x34
90004254:	fb02 f303 	mul.w	r3, r2, r3
90004258:	4a1e      	ldr	r2, [pc, #120]	@ (900042d4 <BSP_SDRAM_Init+0xb0>)
9000425a:	4413      	add	r3, r2
9000425c:	2210      	movs	r2, #16
9000425e:	2104      	movs	r1, #4
90004260:	4618      	mov	r0, r3
90004262:	f000 f83b 	bl	900042dc <MX_SDRAM_BANK2_Init>
90004266:	4603      	mov	r3, r0
90004268:	2b00      	cmp	r3, #0
9000426a:	d003      	beq.n	90004274 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
9000426c:	f04f 33ff 	mov.w	r3, #4294967295
90004270:	60fb      	str	r3, [r7, #12]
90004272:	e029      	b.n	900042c8 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90004274:	4b18      	ldr	r3, [pc, #96]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
90004276:	2208      	movs	r2, #8
90004278:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
9000427a:	4b17      	ldr	r3, [pc, #92]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
9000427c:	2203      	movs	r2, #3
9000427e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90004280:	4b15      	ldr	r3, [pc, #84]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
90004282:	f240 6203 	movw	r2, #1539	@ 0x603
90004286:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90004288:	4b13      	ldr	r3, [pc, #76]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
9000428a:	2200      	movs	r2, #0
9000428c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
9000428e:	4b12      	ldr	r3, [pc, #72]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
90004290:	2200      	movs	r2, #0
90004292:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90004294:	4b10      	ldr	r3, [pc, #64]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
90004296:	2230      	movs	r2, #48	@ 0x30
90004298:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
9000429a:	4b0f      	ldr	r3, [pc, #60]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
9000429c:	2200      	movs	r2, #0
9000429e:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
900042a0:	4b0d      	ldr	r3, [pc, #52]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
900042a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
900042a6:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
900042a8:	687b      	ldr	r3, [r7, #4]
900042aa:	2234      	movs	r2, #52	@ 0x34
900042ac:	fb02 f303 	mul.w	r3, r2, r3
900042b0:	4a08      	ldr	r2, [pc, #32]	@ (900042d4 <BSP_SDRAM_Init+0xb0>)
900042b2:	4413      	add	r3, r2
900042b4:	4908      	ldr	r1, [pc, #32]	@ (900042d8 <BSP_SDRAM_Init+0xb4>)
900042b6:	4618      	mov	r0, r3
900042b8:	f7fe fa54 	bl	90002764 <MT48LC4M32B2_Init>
900042bc:	4603      	mov	r3, r0
900042be:	2b00      	cmp	r3, #0
900042c0:	d002      	beq.n	900042c8 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
900042c2:	f06f 0304 	mvn.w	r3, #4
900042c6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
900042c8:	68fb      	ldr	r3, [r7, #12]
}
900042ca:	4618      	mov	r0, r3
900042cc:	3710      	adds	r7, #16
900042ce:	46bd      	mov	sp, r7
900042d0:	bd80      	pop	{r7, pc}
900042d2:	bf00      	nop
900042d4:	20001d54 	.word	0x20001d54
900042d8:	20001d88 	.word	0x20001d88

900042dc <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
900042dc:	b580      	push	{r7, lr}
900042de:	b08c      	sub	sp, #48	@ 0x30
900042e0:	af00      	add	r7, sp, #0
900042e2:	60f8      	str	r0, [r7, #12]
900042e4:	60b9      	str	r1, [r7, #8]
900042e6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
900042e8:	4b20      	ldr	r3, [pc, #128]	@ (9000436c <MX_SDRAM_BANK2_Init+0x90>)
900042ea:	4a21      	ldr	r2, [pc, #132]	@ (90004370 <MX_SDRAM_BANK2_Init+0x94>)
900042ec:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
900042ee:	68fb      	ldr	r3, [r7, #12]
900042f0:	2201      	movs	r2, #1
900042f2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900042f4:	68fb      	ldr	r3, [r7, #12]
900042f6:	2200      	movs	r2, #0
900042f8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
900042fa:	68fb      	ldr	r3, [r7, #12]
900042fc:	68ba      	ldr	r2, [r7, #8]
900042fe:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90004300:	68fb      	ldr	r3, [r7, #12]
90004302:	687a      	ldr	r2, [r7, #4]
90004304:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90004306:	4b19      	ldr	r3, [pc, #100]	@ (9000436c <MX_SDRAM_BANK2_Init+0x90>)
90004308:	2240      	movs	r2, #64	@ 0x40
9000430a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
9000430c:	68fb      	ldr	r3, [r7, #12]
9000430e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90004312:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90004314:	68fb      	ldr	r3, [r7, #12]
90004316:	2200      	movs	r2, #0
90004318:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
9000431a:	68fb      	ldr	r3, [r7, #12]
9000431c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90004320:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90004322:	68fb      	ldr	r3, [r7, #12]
90004324:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90004328:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
9000432a:	68fb      	ldr	r3, [r7, #12]
9000432c:	2200      	movs	r2, #0
9000432e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90004330:	2302      	movs	r3, #2
90004332:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90004334:	2307      	movs	r3, #7
90004336:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90004338:	2304      	movs	r3, #4
9000433a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
9000433c:	2307      	movs	r3, #7
9000433e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90004340:	2302      	movs	r3, #2
90004342:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90004344:	2302      	movs	r3, #2
90004346:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90004348:	2302      	movs	r3, #2
9000434a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
9000434c:	f107 0314 	add.w	r3, r7, #20
90004350:	4619      	mov	r1, r3
90004352:	68f8      	ldr	r0, [r7, #12]
90004354:	f007 fb32 	bl	9000b9bc <HAL_SDRAM_Init>
90004358:	4603      	mov	r3, r0
9000435a:	2b00      	cmp	r3, #0
9000435c:	d001      	beq.n	90004362 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
9000435e:	2301      	movs	r3, #1
90004360:	e000      	b.n	90004364 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90004362:	2300      	movs	r3, #0
}
90004364:	4618      	mov	r0, r3
90004366:	3730      	adds	r7, #48	@ 0x30
90004368:	46bd      	mov	sp, r7
9000436a:	bd80      	pop	{r7, pc}
9000436c:	20001d54 	.word	0x20001d54
90004370:	52004140 	.word	0x52004140

90004374 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90004374:	b580      	push	{r7, lr}
90004376:	b08e      	sub	sp, #56	@ 0x38
90004378:	af00      	add	r7, sp, #0
9000437a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
9000437c:	4b73      	ldr	r3, [pc, #460]	@ (9000454c <SDRAM_MspInit+0x1d8>)
9000437e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90004382:	4a72      	ldr	r2, [pc, #456]	@ (9000454c <SDRAM_MspInit+0x1d8>)
90004384:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90004388:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
9000438c:	4b6f      	ldr	r3, [pc, #444]	@ (9000454c <SDRAM_MspInit+0x1d8>)
9000438e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90004392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90004396:	623b      	str	r3, [r7, #32]
90004398:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
9000439a:	4b6c      	ldr	r3, [pc, #432]	@ (9000454c <SDRAM_MspInit+0x1d8>)
9000439c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900043a0:	4a6a      	ldr	r2, [pc, #424]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043a2:	f043 0301 	orr.w	r3, r3, #1
900043a6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
900043aa:	4b68      	ldr	r3, [pc, #416]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900043b0:	f003 0301 	and.w	r3, r3, #1
900043b4:	61fb      	str	r3, [r7, #28]
900043b6:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
900043b8:	4b64      	ldr	r3, [pc, #400]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900043be:	4a63      	ldr	r2, [pc, #396]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043c0:	f043 0308 	orr.w	r3, r3, #8
900043c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900043c8:	4b60      	ldr	r3, [pc, #384]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900043ce:	f003 0308 	and.w	r3, r3, #8
900043d2:	61bb      	str	r3, [r7, #24]
900043d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900043d6:	4b5d      	ldr	r3, [pc, #372]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900043dc:	4a5b      	ldr	r2, [pc, #364]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043de:	f043 0310 	orr.w	r3, r3, #16
900043e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900043e6:	4b59      	ldr	r3, [pc, #356]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900043ec:	f003 0310 	and.w	r3, r3, #16
900043f0:	617b      	str	r3, [r7, #20]
900043f2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900043f4:	4b55      	ldr	r3, [pc, #340]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900043fa:	4a54      	ldr	r2, [pc, #336]	@ (9000454c <SDRAM_MspInit+0x1d8>)
900043fc:	f043 0320 	orr.w	r3, r3, #32
90004400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90004404:	4b51      	ldr	r3, [pc, #324]	@ (9000454c <SDRAM_MspInit+0x1d8>)
90004406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000440a:	f003 0320 	and.w	r3, r3, #32
9000440e:	613b      	str	r3, [r7, #16]
90004410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90004412:	4b4e      	ldr	r3, [pc, #312]	@ (9000454c <SDRAM_MspInit+0x1d8>)
90004414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90004418:	4a4c      	ldr	r2, [pc, #304]	@ (9000454c <SDRAM_MspInit+0x1d8>)
9000441a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000441e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90004422:	4b4a      	ldr	r3, [pc, #296]	@ (9000454c <SDRAM_MspInit+0x1d8>)
90004424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90004428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000442c:	60fb      	str	r3, [r7, #12]
9000442e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90004430:	4b46      	ldr	r3, [pc, #280]	@ (9000454c <SDRAM_MspInit+0x1d8>)
90004432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90004436:	4a45      	ldr	r2, [pc, #276]	@ (9000454c <SDRAM_MspInit+0x1d8>)
90004438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000443c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90004440:	4b42      	ldr	r3, [pc, #264]	@ (9000454c <SDRAM_MspInit+0x1d8>)
90004442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90004446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000444a:	60bb      	str	r3, [r7, #8]
9000444c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
9000444e:	2302      	movs	r3, #2
90004450:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90004452:	2301      	movs	r3, #1
90004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90004456:	2303      	movs	r3, #3
90004458:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
9000445a:	230c      	movs	r3, #12
9000445c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000445e:	f24c 7303 	movw	r3, #50947	@ 0xc703
90004462:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90004464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90004468:	4619      	mov	r1, r3
9000446a:	4839      	ldr	r0, [pc, #228]	@ (90004550 <SDRAM_MspInit+0x1dc>)
9000446c:	f001 f850 	bl	90005510 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90004470:	f64f 7383 	movw	r3, #65411	@ 0xff83
90004474:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90004476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000447a:	4619      	mov	r1, r3
9000447c:	4835      	ldr	r0, [pc, #212]	@ (90004554 <SDRAM_MspInit+0x1e0>)
9000447e:	f001 f847 	bl	90005510 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90004482:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90004486:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90004488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000448c:	4619      	mov	r1, r3
9000448e:	4832      	ldr	r0, [pc, #200]	@ (90004558 <SDRAM_MspInit+0x1e4>)
90004490:	f001 f83e 	bl	90005510 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90004494:	f248 1333 	movw	r3, #33075	@ 0x8133
90004498:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000449a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000449e:	4619      	mov	r1, r3
900044a0:	482e      	ldr	r0, [pc, #184]	@ (9000455c <SDRAM_MspInit+0x1e8>)
900044a2:	f001 f835 	bl	90005510 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
900044a6:	23e0      	movs	r3, #224	@ 0xe0
900044a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900044aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
900044ae:	4619      	mov	r1, r3
900044b0:	482b      	ldr	r0, [pc, #172]	@ (90004560 <SDRAM_MspInit+0x1ec>)
900044b2:	f001 f82d 	bl	90005510 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900044b6:	4b2b      	ldr	r3, [pc, #172]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
900044bc:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900044be:	4b29      	ldr	r3, [pc, #164]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
900044c4:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900044c6:	4b27      	ldr	r3, [pc, #156]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044c8:	2280      	movs	r2, #128	@ 0x80
900044ca:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
900044cc:	4b25      	ldr	r3, [pc, #148]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044ce:	2200      	movs	r2, #0
900044d0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900044d2:	4b24      	ldr	r3, [pc, #144]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044d4:	f240 2202 	movw	r2, #514	@ 0x202
900044d8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
900044da:	4b22      	ldr	r3, [pc, #136]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044dc:	f640 0208 	movw	r2, #2056	@ 0x808
900044e0:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900044e2:	4b20      	ldr	r3, [pc, #128]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044e4:	2220      	movs	r2, #32
900044e6:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900044e8:	4b1e      	ldr	r3, [pc, #120]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044ea:	2280      	movs	r2, #128	@ 0x80
900044ec:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900044ee:	4b1d      	ldr	r3, [pc, #116]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900044f4:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
900044f6:	4b1b      	ldr	r3, [pc, #108]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044f8:	2200      	movs	r2, #0
900044fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
900044fc:	4b19      	ldr	r3, [pc, #100]	@ (90004564 <SDRAM_MspInit+0x1f0>)
900044fe:	2200      	movs	r2, #0
90004500:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90004502:	4b18      	ldr	r3, [pc, #96]	@ (90004564 <SDRAM_MspInit+0x1f0>)
90004504:	2280      	movs	r2, #128	@ 0x80
90004506:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90004508:	4b16      	ldr	r3, [pc, #88]	@ (90004564 <SDRAM_MspInit+0x1f0>)
9000450a:	2200      	movs	r2, #0
9000450c:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
9000450e:	4b15      	ldr	r3, [pc, #84]	@ (90004564 <SDRAM_MspInit+0x1f0>)
90004510:	2200      	movs	r2, #0
90004512:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90004514:	4b13      	ldr	r3, [pc, #76]	@ (90004564 <SDRAM_MspInit+0x1f0>)
90004516:	4a14      	ldr	r2, [pc, #80]	@ (90004568 <SDRAM_MspInit+0x1f4>)
90004518:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000451a:	4b14      	ldr	r3, [pc, #80]	@ (9000456c <SDRAM_MspInit+0x1f8>)
9000451c:	4a11      	ldr	r2, [pc, #68]	@ (90004564 <SDRAM_MspInit+0x1f0>)
9000451e:	631a      	str	r2, [r3, #48]	@ 0x30
90004520:	4b10      	ldr	r3, [pc, #64]	@ (90004564 <SDRAM_MspInit+0x1f0>)
90004522:	4a12      	ldr	r2, [pc, #72]	@ (9000456c <SDRAM_MspInit+0x1f8>)
90004524:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90004526:	480f      	ldr	r0, [pc, #60]	@ (90004564 <SDRAM_MspInit+0x1f0>)
90004528:	f004 fe0a 	bl	90009140 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
9000452c:	480d      	ldr	r0, [pc, #52]	@ (90004564 <SDRAM_MspInit+0x1f0>)
9000452e:	f004 fdbb 	bl	900090a8 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90004532:	2200      	movs	r2, #0
90004534:	210f      	movs	r1, #15
90004536:	207a      	movs	r0, #122	@ 0x7a
90004538:	f000 fc67 	bl	90004e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
9000453c:	207a      	movs	r0, #122	@ 0x7a
9000453e:	f000 fc7e 	bl	90004e3e <HAL_NVIC_EnableIRQ>
}
90004542:	bf00      	nop
90004544:	3738      	adds	r7, #56	@ 0x38
90004546:	46bd      	mov	sp, r7
90004548:	bd80      	pop	{r7, pc}
9000454a:	bf00      	nop
9000454c:	58024400 	.word	0x58024400
90004550:	58020c00 	.word	0x58020c00
90004554:	58021000 	.word	0x58021000
90004558:	58021400 	.word	0x58021400
9000455c:	58021800 	.word	0x58021800
90004560:	58021c00 	.word	0x58021c00
90004564:	20001da8 	.word	0x20001da8
90004568:	52000040 	.word	0x52000040
9000456c:	20001d54 	.word	0x20001d54

90004570 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90004570:	b580      	push	{r7, lr}
90004572:	b088      	sub	sp, #32
90004574:	af00      	add	r7, sp, #0
90004576:	6078      	str	r0, [r7, #4]
90004578:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000457a:	2300      	movs	r3, #0
9000457c:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
9000457e:	687b      	ldr	r3, [r7, #4]
90004580:	2b00      	cmp	r3, #0
90004582:	d11c      	bne.n	900045be <BSP_TS_Init+0x4e>
90004584:	683b      	ldr	r3, [r7, #0]
90004586:	681b      	ldr	r3, [r3, #0]
90004588:	2b00      	cmp	r3, #0
9000458a:	d018      	beq.n	900045be <BSP_TS_Init+0x4e>
9000458c:	683b      	ldr	r3, [r7, #0]
9000458e:	681b      	ldr	r3, [r3, #0]
90004590:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
90004594:	d813      	bhi.n	900045be <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90004596:	683b      	ldr	r3, [r7, #0]
90004598:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
9000459a:	2b00      	cmp	r3, #0
9000459c:	d00f      	beq.n	900045be <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
9000459e:	683b      	ldr	r3, [r7, #0]
900045a0:	685b      	ldr	r3, [r3, #4]
900045a2:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
900045a6:	d80a      	bhi.n	900045be <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
900045a8:	683b      	ldr	r3, [r7, #0]
900045aa:	68da      	ldr	r2, [r3, #12]
900045ac:	683b      	ldr	r3, [r7, #0]
900045ae:	6819      	ldr	r1, [r3, #0]
900045b0:	683b      	ldr	r3, [r7, #0]
900045b2:	685b      	ldr	r3, [r3, #4]
900045b4:	428b      	cmp	r3, r1
900045b6:	bf28      	it	cs
900045b8:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
900045ba:	429a      	cmp	r2, r3
900045bc:	d903      	bls.n	900045c6 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900045be:	f06f 0301 	mvn.w	r3, #1
900045c2:	61fb      	str	r3, [r7, #28]
900045c4:	e06e      	b.n	900046a4 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
900045c6:	6878      	ldr	r0, [r7, #4]
900045c8:	f000 f98c 	bl	900048e4 <FT5336_Probe>
900045cc:	4603      	mov	r3, r0
900045ce:	2b00      	cmp	r3, #0
900045d0:	d003      	beq.n	900045da <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
900045d2:	f04f 33ff 	mov.w	r3, #4294967295
900045d6:	61fb      	str	r3, [r7, #28]
900045d8:	e064      	b.n	900046a4 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900045da:	683b      	ldr	r3, [r7, #0]
900045dc:	681a      	ldr	r2, [r3, #0]
900045de:	4934      	ldr	r1, [pc, #208]	@ (900046b0 <BSP_TS_Init+0x140>)
900045e0:	687b      	ldr	r3, [r7, #4]
900045e2:	019b      	lsls	r3, r3, #6
900045e4:	440b      	add	r3, r1
900045e6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
900045e8:	683b      	ldr	r3, [r7, #0]
900045ea:	685a      	ldr	r2, [r3, #4]
900045ec:	4930      	ldr	r1, [pc, #192]	@ (900046b0 <BSP_TS_Init+0x140>)
900045ee:	687b      	ldr	r3, [r7, #4]
900045f0:	019b      	lsls	r3, r3, #6
900045f2:	440b      	add	r3, r1
900045f4:	3304      	adds	r3, #4
900045f6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
900045f8:	683b      	ldr	r3, [r7, #0]
900045fa:	689a      	ldr	r2, [r3, #8]
900045fc:	492c      	ldr	r1, [pc, #176]	@ (900046b0 <BSP_TS_Init+0x140>)
900045fe:	687b      	ldr	r3, [r7, #4]
90004600:	019b      	lsls	r3, r3, #6
90004602:	440b      	add	r3, r1
90004604:	3308      	adds	r3, #8
90004606:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
90004608:	683b      	ldr	r3, [r7, #0]
9000460a:	68da      	ldr	r2, [r3, #12]
9000460c:	4928      	ldr	r1, [pc, #160]	@ (900046b0 <BSP_TS_Init+0x140>)
9000460e:	687b      	ldr	r3, [r7, #4]
90004610:	019b      	lsls	r3, r3, #6
90004612:	440b      	add	r3, r1
90004614:	330c      	adds	r3, #12
90004616:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90004618:	4b26      	ldr	r3, [pc, #152]	@ (900046b4 <BSP_TS_Init+0x144>)
9000461a:	681b      	ldr	r3, [r3, #0]
9000461c:	69db      	ldr	r3, [r3, #28]
9000461e:	4926      	ldr	r1, [pc, #152]	@ (900046b8 <BSP_TS_Init+0x148>)
90004620:	687a      	ldr	r2, [r7, #4]
90004622:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90004626:	f107 010c 	add.w	r1, r7, #12
9000462a:	4610      	mov	r0, r2
9000462c:	4798      	blx	r3
9000462e:	4603      	mov	r3, r0
90004630:	2b00      	cmp	r3, #0
90004632:	da03      	bge.n	9000463c <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90004634:	f06f 0304 	mvn.w	r3, #4
90004638:	61fb      	str	r3, [r7, #28]
9000463a:	e033      	b.n	900046a4 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
9000463c:	693a      	ldr	r2, [r7, #16]
9000463e:	491c      	ldr	r1, [pc, #112]	@ (900046b0 <BSP_TS_Init+0x140>)
90004640:	687b      	ldr	r3, [r7, #4]
90004642:	019b      	lsls	r3, r3, #6
90004644:	440b      	add	r3, r1
90004646:	3310      	adds	r3, #16
90004648:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
9000464a:	697a      	ldr	r2, [r7, #20]
9000464c:	4918      	ldr	r1, [pc, #96]	@ (900046b0 <BSP_TS_Init+0x140>)
9000464e:	687b      	ldr	r3, [r7, #4]
90004650:	019b      	lsls	r3, r3, #6
90004652:	440b      	add	r3, r1
90004654:	3314      	adds	r3, #20
90004656:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
90004658:	2300      	movs	r3, #0
9000465a:	61bb      	str	r3, [r7, #24]
9000465c:	e01f      	b.n	9000469e <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000465e:	683b      	ldr	r3, [r7, #0]
90004660:	681a      	ldr	r2, [r3, #0]
90004662:	683b      	ldr	r3, [r7, #0]
90004664:	68db      	ldr	r3, [r3, #12]
90004666:	4413      	add	r3, r2
90004668:	1c5a      	adds	r2, r3, #1
9000466a:	4811      	ldr	r0, [pc, #68]	@ (900046b0 <BSP_TS_Init+0x140>)
9000466c:	687b      	ldr	r3, [r7, #4]
9000466e:	0119      	lsls	r1, r3, #4
90004670:	69bb      	ldr	r3, [r7, #24]
90004672:	440b      	add	r3, r1
90004674:	3306      	adds	r3, #6
90004676:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000467a:	683b      	ldr	r3, [r7, #0]
9000467c:	685a      	ldr	r2, [r3, #4]
9000467e:	683b      	ldr	r3, [r7, #0]
90004680:	68db      	ldr	r3, [r3, #12]
90004682:	4413      	add	r3, r2
90004684:	1c5a      	adds	r2, r3, #1
90004686:	480a      	ldr	r0, [pc, #40]	@ (900046b0 <BSP_TS_Init+0x140>)
90004688:	687b      	ldr	r3, [r7, #4]
9000468a:	0119      	lsls	r1, r3, #4
9000468c:	69bb      	ldr	r3, [r7, #24]
9000468e:	440b      	add	r3, r1
90004690:	330a      	adds	r3, #10
90004692:	009b      	lsls	r3, r3, #2
90004694:	4403      	add	r3, r0
90004696:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
90004698:	69bb      	ldr	r3, [r7, #24]
9000469a:	3301      	adds	r3, #1
9000469c:	61bb      	str	r3, [r7, #24]
9000469e:	69bb      	ldr	r3, [r7, #24]
900046a0:	2b04      	cmp	r3, #4
900046a2:	d9dc      	bls.n	9000465e <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
900046a4:	69fb      	ldr	r3, [r7, #28]
}
900046a6:	4618      	mov	r0, r3
900046a8:	3720      	adds	r7, #32
900046aa:	46bd      	mov	sp, r7
900046ac:	bd80      	pop	{r7, pc}
900046ae:	bf00      	nop
900046b0:	20001e1c 	.word	0x20001e1c
900046b4:	20001e14 	.word	0x20001e14
900046b8:	20001e18 	.word	0x20001e18

900046bc <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
900046bc:	b580      	push	{r7, lr}
900046be:	b08a      	sub	sp, #40	@ 0x28
900046c0:	af00      	add	r7, sp, #0
900046c2:	6078      	str	r0, [r7, #4]
900046c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900046c6:	2300      	movs	r3, #0
900046c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
900046ca:	687b      	ldr	r3, [r7, #4]
900046cc:	2b00      	cmp	r3, #0
900046ce:	d003      	beq.n	900046d8 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900046d0:	f06f 0301 	mvn.w	r3, #1
900046d4:	627b      	str	r3, [r7, #36]	@ 0x24
900046d6:	e0f9      	b.n	900048cc <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
900046d8:	4b7f      	ldr	r3, [pc, #508]	@ (900048d8 <BSP_TS_GetState+0x21c>)
900046da:	681b      	ldr	r3, [r3, #0]
900046dc:	691b      	ldr	r3, [r3, #16]
900046de:	497f      	ldr	r1, [pc, #508]	@ (900048dc <BSP_TS_GetState+0x220>)
900046e0:	687a      	ldr	r2, [r7, #4]
900046e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
900046e6:	f107 0108 	add.w	r1, r7, #8
900046ea:	4610      	mov	r0, r2
900046ec:	4798      	blx	r3
900046ee:	4603      	mov	r3, r0
900046f0:	2b00      	cmp	r3, #0
900046f2:	da03      	bge.n	900046fc <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
900046f4:	f06f 0304 	mvn.w	r3, #4
900046f8:	627b      	str	r3, [r7, #36]	@ 0x24
900046fa:	e0e7      	b.n	900048cc <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
900046fc:	68bb      	ldr	r3, [r7, #8]
900046fe:	2b00      	cmp	r3, #0
90004700:	f000 80d1 	beq.w	900048a6 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
90004704:	68fb      	ldr	r3, [r7, #12]
90004706:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
90004708:	693b      	ldr	r3, [r7, #16]
9000470a:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000470c:	4a74      	ldr	r2, [pc, #464]	@ (900048e0 <BSP_TS_GetState+0x224>)
9000470e:	687b      	ldr	r3, [r7, #4]
90004710:	019b      	lsls	r3, r3, #6
90004712:	4413      	add	r3, r2
90004714:	3308      	adds	r3, #8
90004716:	681b      	ldr	r3, [r3, #0]
90004718:	f003 0308 	and.w	r3, r3, #8
9000471c:	2b00      	cmp	r3, #0
9000471e:	d003      	beq.n	90004728 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
90004720:	693b      	ldr	r3, [r7, #16]
90004722:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
90004724:	68fb      	ldr	r3, [r7, #12]
90004726:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90004728:	4a6d      	ldr	r2, [pc, #436]	@ (900048e0 <BSP_TS_GetState+0x224>)
9000472a:	687b      	ldr	r3, [r7, #4]
9000472c:	019b      	lsls	r3, r3, #6
9000472e:	4413      	add	r3, r2
90004730:	3308      	adds	r3, #8
90004732:	681b      	ldr	r3, [r3, #0]
90004734:	f003 0302 	and.w	r3, r3, #2
90004738:	2b00      	cmp	r3, #0
9000473a:	d009      	beq.n	90004750 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
9000473c:	4a68      	ldr	r2, [pc, #416]	@ (900048e0 <BSP_TS_GetState+0x224>)
9000473e:	687b      	ldr	r3, [r7, #4]
90004740:	019b      	lsls	r3, r3, #6
90004742:	4413      	add	r3, r2
90004744:	3310      	adds	r3, #16
90004746:	681a      	ldr	r2, [r3, #0]
90004748:	68fb      	ldr	r3, [r7, #12]
9000474a:	1ad3      	subs	r3, r2, r3
9000474c:	3b01      	subs	r3, #1
9000474e:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90004750:	4a63      	ldr	r2, [pc, #396]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004752:	687b      	ldr	r3, [r7, #4]
90004754:	019b      	lsls	r3, r3, #6
90004756:	4413      	add	r3, r2
90004758:	3308      	adds	r3, #8
9000475a:	681b      	ldr	r3, [r3, #0]
9000475c:	f003 0304 	and.w	r3, r3, #4
90004760:	2b00      	cmp	r3, #0
90004762:	d008      	beq.n	90004776 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90004764:	4a5e      	ldr	r2, [pc, #376]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004766:	687b      	ldr	r3, [r7, #4]
90004768:	019b      	lsls	r3, r3, #6
9000476a:	4413      	add	r3, r2
9000476c:	3314      	adds	r3, #20
9000476e:	681a      	ldr	r2, [r3, #0]
90004770:	693b      	ldr	r3, [r7, #16]
90004772:	1ad3      	subs	r3, r2, r3
90004774:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90004776:	4a5a      	ldr	r2, [pc, #360]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004778:	687b      	ldr	r3, [r7, #4]
9000477a:	019b      	lsls	r3, r3, #6
9000477c:	4413      	add	r3, r2
9000477e:	681b      	ldr	r3, [r3, #0]
90004780:	6a3a      	ldr	r2, [r7, #32]
90004782:	fb03 f202 	mul.w	r2, r3, r2
90004786:	4956      	ldr	r1, [pc, #344]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004788:	687b      	ldr	r3, [r7, #4]
9000478a:	019b      	lsls	r3, r3, #6
9000478c:	440b      	add	r3, r1
9000478e:	3310      	adds	r3, #16
90004790:	681b      	ldr	r3, [r3, #0]
90004792:	fbb2 f2f3 	udiv	r2, r2, r3
90004796:	683b      	ldr	r3, [r7, #0]
90004798:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000479a:	4a51      	ldr	r2, [pc, #324]	@ (900048e0 <BSP_TS_GetState+0x224>)
9000479c:	687b      	ldr	r3, [r7, #4]
9000479e:	019b      	lsls	r3, r3, #6
900047a0:	4413      	add	r3, r2
900047a2:	3304      	adds	r3, #4
900047a4:	681b      	ldr	r3, [r3, #0]
900047a6:	69fa      	ldr	r2, [r7, #28]
900047a8:	fb03 f202 	mul.w	r2, r3, r2
900047ac:	494c      	ldr	r1, [pc, #304]	@ (900048e0 <BSP_TS_GetState+0x224>)
900047ae:	687b      	ldr	r3, [r7, #4]
900047b0:	019b      	lsls	r3, r3, #6
900047b2:	440b      	add	r3, r1
900047b4:	3314      	adds	r3, #20
900047b6:	681b      	ldr	r3, [r3, #0]
900047b8:	fbb2 f2f3 	udiv	r2, r2, r3
900047bc:	683b      	ldr	r3, [r7, #0]
900047be:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
900047c0:	68ba      	ldr	r2, [r7, #8]
900047c2:	683b      	ldr	r3, [r7, #0]
900047c4:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
900047c6:	683b      	ldr	r3, [r7, #0]
900047c8:	685a      	ldr	r2, [r3, #4]
900047ca:	4945      	ldr	r1, [pc, #276]	@ (900048e0 <BSP_TS_GetState+0x224>)
900047cc:	687b      	ldr	r3, [r7, #4]
900047ce:	019b      	lsls	r3, r3, #6
900047d0:	440b      	add	r3, r1
900047d2:	3318      	adds	r3, #24
900047d4:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
900047d6:	429a      	cmp	r2, r3
900047d8:	d909      	bls.n	900047ee <BSP_TS_GetState+0x132>
900047da:	683b      	ldr	r3, [r7, #0]
900047dc:	685a      	ldr	r2, [r3, #4]
900047de:	4940      	ldr	r1, [pc, #256]	@ (900048e0 <BSP_TS_GetState+0x224>)
900047e0:	687b      	ldr	r3, [r7, #4]
900047e2:	019b      	lsls	r3, r3, #6
900047e4:	440b      	add	r3, r1
900047e6:	3318      	adds	r3, #24
900047e8:	681b      	ldr	r3, [r3, #0]
900047ea:	1ad3      	subs	r3, r2, r3
900047ec:	e008      	b.n	90004800 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
900047ee:	4a3c      	ldr	r2, [pc, #240]	@ (900048e0 <BSP_TS_GetState+0x224>)
900047f0:	687b      	ldr	r3, [r7, #4]
900047f2:	019b      	lsls	r3, r3, #6
900047f4:	4413      	add	r3, r2
900047f6:	3318      	adds	r3, #24
900047f8:	681a      	ldr	r2, [r3, #0]
900047fa:	683b      	ldr	r3, [r7, #0]
900047fc:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
900047fe:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90004800:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90004802:	683b      	ldr	r3, [r7, #0]
90004804:	689a      	ldr	r2, [r3, #8]
90004806:	4936      	ldr	r1, [pc, #216]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004808:	687b      	ldr	r3, [r7, #4]
9000480a:	019b      	lsls	r3, r3, #6
9000480c:	440b      	add	r3, r1
9000480e:	332c      	adds	r3, #44	@ 0x2c
90004810:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90004812:	429a      	cmp	r2, r3
90004814:	d909      	bls.n	9000482a <BSP_TS_GetState+0x16e>
90004816:	683b      	ldr	r3, [r7, #0]
90004818:	689a      	ldr	r2, [r3, #8]
9000481a:	4931      	ldr	r1, [pc, #196]	@ (900048e0 <BSP_TS_GetState+0x224>)
9000481c:	687b      	ldr	r3, [r7, #4]
9000481e:	019b      	lsls	r3, r3, #6
90004820:	440b      	add	r3, r1
90004822:	332c      	adds	r3, #44	@ 0x2c
90004824:	681b      	ldr	r3, [r3, #0]
90004826:	1ad3      	subs	r3, r2, r3
90004828:	e008      	b.n	9000483c <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
9000482a:	4a2d      	ldr	r2, [pc, #180]	@ (900048e0 <BSP_TS_GetState+0x224>)
9000482c:	687b      	ldr	r3, [r7, #4]
9000482e:	019b      	lsls	r3, r3, #6
90004830:	4413      	add	r3, r2
90004832:	332c      	adds	r3, #44	@ 0x2c
90004834:	681a      	ldr	r2, [r3, #0]
90004836:	683b      	ldr	r3, [r7, #0]
90004838:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
9000483a:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
9000483c:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
9000483e:	4a28      	ldr	r2, [pc, #160]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004840:	687b      	ldr	r3, [r7, #4]
90004842:	019b      	lsls	r3, r3, #6
90004844:	4413      	add	r3, r2
90004846:	330c      	adds	r3, #12
90004848:	681b      	ldr	r3, [r3, #0]
9000484a:	69ba      	ldr	r2, [r7, #24]
9000484c:	429a      	cmp	r2, r3
9000484e:	d808      	bhi.n	90004862 <BSP_TS_GetState+0x1a6>
90004850:	4a23      	ldr	r2, [pc, #140]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004852:	687b      	ldr	r3, [r7, #4]
90004854:	019b      	lsls	r3, r3, #6
90004856:	4413      	add	r3, r2
90004858:	330c      	adds	r3, #12
9000485a:	681b      	ldr	r3, [r3, #0]
9000485c:	697a      	ldr	r2, [r7, #20]
9000485e:	429a      	cmp	r2, r3
90004860:	d910      	bls.n	90004884 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90004862:	683b      	ldr	r3, [r7, #0]
90004864:	685a      	ldr	r2, [r3, #4]
90004866:	491e      	ldr	r1, [pc, #120]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004868:	687b      	ldr	r3, [r7, #4]
9000486a:	019b      	lsls	r3, r3, #6
9000486c:	440b      	add	r3, r1
9000486e:	3318      	adds	r3, #24
90004870:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90004872:	683b      	ldr	r3, [r7, #0]
90004874:	689a      	ldr	r2, [r3, #8]
90004876:	491a      	ldr	r1, [pc, #104]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004878:	687b      	ldr	r3, [r7, #4]
9000487a:	019b      	lsls	r3, r3, #6
9000487c:	440b      	add	r3, r1
9000487e:	332c      	adds	r3, #44	@ 0x2c
90004880:	601a      	str	r2, [r3, #0]
90004882:	e023      	b.n	900048cc <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
90004884:	4a16      	ldr	r2, [pc, #88]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004886:	687b      	ldr	r3, [r7, #4]
90004888:	019b      	lsls	r3, r3, #6
9000488a:	4413      	add	r3, r2
9000488c:	3318      	adds	r3, #24
9000488e:	681a      	ldr	r2, [r3, #0]
90004890:	683b      	ldr	r3, [r7, #0]
90004892:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90004894:	4a12      	ldr	r2, [pc, #72]	@ (900048e0 <BSP_TS_GetState+0x224>)
90004896:	687b      	ldr	r3, [r7, #4]
90004898:	019b      	lsls	r3, r3, #6
9000489a:	4413      	add	r3, r2
9000489c:	332c      	adds	r3, #44	@ 0x2c
9000489e:	681a      	ldr	r2, [r3, #0]
900048a0:	683b      	ldr	r3, [r7, #0]
900048a2:	609a      	str	r2, [r3, #8]
900048a4:	e012      	b.n	900048cc <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
900048a6:	683b      	ldr	r3, [r7, #0]
900048a8:	2200      	movs	r2, #0
900048aa:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
900048ac:	4a0c      	ldr	r2, [pc, #48]	@ (900048e0 <BSP_TS_GetState+0x224>)
900048ae:	687b      	ldr	r3, [r7, #4]
900048b0:	019b      	lsls	r3, r3, #6
900048b2:	4413      	add	r3, r2
900048b4:	3318      	adds	r3, #24
900048b6:	681a      	ldr	r2, [r3, #0]
900048b8:	683b      	ldr	r3, [r7, #0]
900048ba:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900048bc:	4a08      	ldr	r2, [pc, #32]	@ (900048e0 <BSP_TS_GetState+0x224>)
900048be:	687b      	ldr	r3, [r7, #4]
900048c0:	019b      	lsls	r3, r3, #6
900048c2:	4413      	add	r3, r2
900048c4:	332c      	adds	r3, #44	@ 0x2c
900048c6:	681a      	ldr	r2, [r3, #0]
900048c8:	683b      	ldr	r3, [r7, #0]
900048ca:	609a      	str	r2, [r3, #8]
    }
}

return ret;
900048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
900048ce:	4618      	mov	r0, r3
900048d0:	3728      	adds	r7, #40	@ 0x28
900048d2:	46bd      	mov	sp, r7
900048d4:	bd80      	pop	{r7, pc}
900048d6:	bf00      	nop
900048d8:	20001e14 	.word	0x20001e14
900048dc:	20001e18 	.word	0x20001e18
900048e0:	20001e1c 	.word	0x20001e1c

900048e4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
900048e4:	b580      	push	{r7, lr}
900048e6:	b08a      	sub	sp, #40	@ 0x28
900048e8:	af00      	add	r7, sp, #0
900048ea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
900048ec:	2300      	movs	r3, #0
900048ee:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
900048f0:	2300      	movs	r3, #0
900048f2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
900048f4:	2370      	movs	r3, #112	@ 0x70
900048f6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
900048f8:	4b23      	ldr	r3, [pc, #140]	@ (90004988 <FT5336_Probe+0xa4>)
900048fa:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
900048fc:	4b23      	ldr	r3, [pc, #140]	@ (9000498c <FT5336_Probe+0xa8>)
900048fe:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90004900:	4b23      	ldr	r3, [pc, #140]	@ (90004990 <FT5336_Probe+0xac>)
90004902:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90004904:	4b23      	ldr	r3, [pc, #140]	@ (90004994 <FT5336_Probe+0xb0>)
90004906:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
90004908:	4b23      	ldr	r3, [pc, #140]	@ (90004998 <FT5336_Probe+0xb4>)
9000490a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
9000490c:	f107 030c 	add.w	r3, r7, #12
90004910:	4619      	mov	r1, r3
90004912:	4822      	ldr	r0, [pc, #136]	@ (9000499c <FT5336_Probe+0xb8>)
90004914:	f7fd fbc6 	bl	900020a4 <FT5336_RegisterBusIO>
90004918:	4603      	mov	r3, r0
9000491a:	2b00      	cmp	r3, #0
9000491c:	d003      	beq.n	90004926 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
9000491e:	f06f 0307 	mvn.w	r3, #7
90004922:	627b      	str	r3, [r7, #36]	@ 0x24
90004924:	e02a      	b.n	9000497c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90004926:	f107 0308 	add.w	r3, r7, #8
9000492a:	4619      	mov	r1, r3
9000492c:	481b      	ldr	r0, [pc, #108]	@ (9000499c <FT5336_Probe+0xb8>)
9000492e:	f7fd fcb3 	bl	90002298 <FT5336_ReadID>
90004932:	4603      	mov	r3, r0
90004934:	2b00      	cmp	r3, #0
90004936:	d003      	beq.n	90004940 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
90004938:	f06f 0304 	mvn.w	r3, #4
9000493c:	627b      	str	r3, [r7, #36]	@ 0x24
9000493e:	e01d      	b.n	9000497c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
90004940:	68bb      	ldr	r3, [r7, #8]
90004942:	2b51      	cmp	r3, #81	@ 0x51
90004944:	d003      	beq.n	9000494e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
90004946:	f06f 0306 	mvn.w	r3, #6
9000494a:	627b      	str	r3, [r7, #36]	@ 0x24
9000494c:	e016      	b.n	9000497c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
9000494e:	4a14      	ldr	r2, [pc, #80]	@ (900049a0 <FT5336_Probe+0xbc>)
90004950:	687b      	ldr	r3, [r7, #4]
90004952:	4912      	ldr	r1, [pc, #72]	@ (9000499c <FT5336_Probe+0xb8>)
90004954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90004958:	4b12      	ldr	r3, [pc, #72]	@ (900049a4 <FT5336_Probe+0xc0>)
9000495a:	4a13      	ldr	r2, [pc, #76]	@ (900049a8 <FT5336_Probe+0xc4>)
9000495c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
9000495e:	4b11      	ldr	r3, [pc, #68]	@ (900049a4 <FT5336_Probe+0xc0>)
90004960:	681b      	ldr	r3, [r3, #0]
90004962:	681b      	ldr	r3, [r3, #0]
90004964:	490e      	ldr	r1, [pc, #56]	@ (900049a0 <FT5336_Probe+0xbc>)
90004966:	687a      	ldr	r2, [r7, #4]
90004968:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000496c:	4610      	mov	r0, r2
9000496e:	4798      	blx	r3
90004970:	4603      	mov	r3, r0
90004972:	2b00      	cmp	r3, #0
90004974:	d002      	beq.n	9000497c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
90004976:	f06f 0304 	mvn.w	r3, #4
9000497a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
9000497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000497e:	4618      	mov	r0, r3
90004980:	3728      	adds	r7, #40	@ 0x28
90004982:	46bd      	mov	sp, r7
90004984:	bd80      	pop	{r7, pc}
90004986:	bf00      	nop
90004988:	90002ab1 	.word	0x90002ab1
9000498c:	90002b25 	.word	0x90002b25
90004990:	90002c4d 	.word	0x90002c4d
90004994:	90002bf1 	.word	0x90002bf1
90004998:	90002ca9 	.word	0x90002ca9
9000499c:	20001e5c 	.word	0x20001e5c
900049a0:	20001e18 	.word	0x20001e18
900049a4:	20001e14 	.word	0x20001e14
900049a8:	20000004 	.word	0x20000004

900049ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
900049ac:	b480      	push	{r7}
900049ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900049b0:	4b29      	ldr	r3, [pc, #164]	@ (90004a58 <SystemInit+0xac>)
900049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900049b6:	4a28      	ldr	r2, [pc, #160]	@ (90004a58 <SystemInit+0xac>)
900049b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
900049bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
900049c0:	4b26      	ldr	r3, [pc, #152]	@ (90004a5c <SystemInit+0xb0>)
900049c2:	681b      	ldr	r3, [r3, #0]
900049c4:	4a25      	ldr	r2, [pc, #148]	@ (90004a5c <SystemInit+0xb0>)
900049c6:	f043 0301 	orr.w	r3, r3, #1
900049ca:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900049cc:	4b23      	ldr	r3, [pc, #140]	@ (90004a5c <SystemInit+0xb0>)
900049ce:	2200      	movs	r2, #0
900049d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900049d2:	4b22      	ldr	r3, [pc, #136]	@ (90004a5c <SystemInit+0xb0>)
900049d4:	681a      	ldr	r2, [r3, #0]
900049d6:	4921      	ldr	r1, [pc, #132]	@ (90004a5c <SystemInit+0xb0>)
900049d8:	4b21      	ldr	r3, [pc, #132]	@ (90004a60 <SystemInit+0xb4>)
900049da:	4013      	ands	r3, r2
900049dc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
900049de:	4b1f      	ldr	r3, [pc, #124]	@ (90004a5c <SystemInit+0xb0>)
900049e0:	2200      	movs	r2, #0
900049e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
900049e4:	4b1d      	ldr	r3, [pc, #116]	@ (90004a5c <SystemInit+0xb0>)
900049e6:	2200      	movs	r2, #0
900049e8:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
900049ea:	4b1c      	ldr	r3, [pc, #112]	@ (90004a5c <SystemInit+0xb0>)
900049ec:	2200      	movs	r2, #0
900049ee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
900049f0:	4b1a      	ldr	r3, [pc, #104]	@ (90004a5c <SystemInit+0xb0>)
900049f2:	2200      	movs	r2, #0
900049f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
900049f6:	4b19      	ldr	r3, [pc, #100]	@ (90004a5c <SystemInit+0xb0>)
900049f8:	2200      	movs	r2, #0
900049fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
900049fc:	4b17      	ldr	r3, [pc, #92]	@ (90004a5c <SystemInit+0xb0>)
900049fe:	2200      	movs	r2, #0
90004a00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90004a02:	4b16      	ldr	r3, [pc, #88]	@ (90004a5c <SystemInit+0xb0>)
90004a04:	2200      	movs	r2, #0
90004a06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90004a08:	4b14      	ldr	r3, [pc, #80]	@ (90004a5c <SystemInit+0xb0>)
90004a0a:	2200      	movs	r2, #0
90004a0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90004a0e:	4b13      	ldr	r3, [pc, #76]	@ (90004a5c <SystemInit+0xb0>)
90004a10:	2200      	movs	r2, #0
90004a12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90004a14:	4b11      	ldr	r3, [pc, #68]	@ (90004a5c <SystemInit+0xb0>)
90004a16:	2200      	movs	r2, #0
90004a18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90004a1a:	4b10      	ldr	r3, [pc, #64]	@ (90004a5c <SystemInit+0xb0>)
90004a1c:	2200      	movs	r2, #0
90004a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90004a20:	4b0e      	ldr	r3, [pc, #56]	@ (90004a5c <SystemInit+0xb0>)
90004a22:	681b      	ldr	r3, [r3, #0]
90004a24:	4a0d      	ldr	r2, [pc, #52]	@ (90004a5c <SystemInit+0xb0>)
90004a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90004a2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (90004a5c <SystemInit+0xb0>)
90004a2e:	2200      	movs	r2, #0
90004a30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90004a32:	4b0c      	ldr	r3, [pc, #48]	@ (90004a64 <SystemInit+0xb8>)
90004a34:	681a      	ldr	r2, [r3, #0]
90004a36:	4b0c      	ldr	r3, [pc, #48]	@ (90004a68 <SystemInit+0xbc>)
90004a38:	4013      	ands	r3, r2
90004a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90004a3e:	d202      	bcs.n	90004a46 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90004a40:	4b0a      	ldr	r3, [pc, #40]	@ (90004a6c <SystemInit+0xc0>)
90004a42:	2201      	movs	r2, #1
90004a44:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90004a46:	4b04      	ldr	r3, [pc, #16]	@ (90004a58 <SystemInit+0xac>)
90004a48:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90004a4c:	609a      	str	r2, [r3, #8]
#endif  


}
90004a4e:	bf00      	nop
90004a50:	46bd      	mov	sp, r7
90004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
90004a56:	4770      	bx	lr
90004a58:	e000ed00 	.word	0xe000ed00
90004a5c:	58024400 	.word	0x58024400
90004a60:	eaf6ed7f 	.word	0xeaf6ed7f
90004a64:	5c001000 	.word	0x5c001000
90004a68:	ffff0000 	.word	0xffff0000
90004a6c:	51008108 	.word	0x51008108

90004a70 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90004a70:	b480      	push	{r7}
90004a72:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90004a74:	4b09      	ldr	r3, [pc, #36]	@ (90004a9c <ExitRun0Mode+0x2c>)
90004a76:	68db      	ldr	r3, [r3, #12]
90004a78:	4a08      	ldr	r2, [pc, #32]	@ (90004a9c <ExitRun0Mode+0x2c>)
90004a7a:	f043 0302 	orr.w	r3, r3, #2
90004a7e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90004a80:	bf00      	nop
90004a82:	4b06      	ldr	r3, [pc, #24]	@ (90004a9c <ExitRun0Mode+0x2c>)
90004a84:	685b      	ldr	r3, [r3, #4]
90004a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90004a8a:	2b00      	cmp	r3, #0
90004a8c:	d0f9      	beq.n	90004a82 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
90004a8e:	bf00      	nop
90004a90:	bf00      	nop
90004a92:	46bd      	mov	sp, r7
90004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
90004a98:	4770      	bx	lr
90004a9a:	bf00      	nop
90004a9c:	58024800 	.word	0x58024800

90004aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90004aa0:	b580      	push	{r7, lr}
90004aa2:	b082      	sub	sp, #8
90004aa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90004aa6:	2003      	movs	r0, #3
90004aa8:	f000 f9a4 	bl	90004df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90004aac:	f005 fa58 	bl	90009f60 <HAL_RCC_GetSysClockFreq>
90004ab0:	4602      	mov	r2, r0
90004ab2:	4b15      	ldr	r3, [pc, #84]	@ (90004b08 <HAL_Init+0x68>)
90004ab4:	699b      	ldr	r3, [r3, #24]
90004ab6:	0a1b      	lsrs	r3, r3, #8
90004ab8:	f003 030f 	and.w	r3, r3, #15
90004abc:	4913      	ldr	r1, [pc, #76]	@ (90004b0c <HAL_Init+0x6c>)
90004abe:	5ccb      	ldrb	r3, [r1, r3]
90004ac0:	f003 031f 	and.w	r3, r3, #31
90004ac4:	fa22 f303 	lsr.w	r3, r2, r3
90004ac8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90004aca:	4b0f      	ldr	r3, [pc, #60]	@ (90004b08 <HAL_Init+0x68>)
90004acc:	699b      	ldr	r3, [r3, #24]
90004ace:	f003 030f 	and.w	r3, r3, #15
90004ad2:	4a0e      	ldr	r2, [pc, #56]	@ (90004b0c <HAL_Init+0x6c>)
90004ad4:	5cd3      	ldrb	r3, [r2, r3]
90004ad6:	f003 031f 	and.w	r3, r3, #31
90004ada:	687a      	ldr	r2, [r7, #4]
90004adc:	fa22 f303 	lsr.w	r3, r2, r3
90004ae0:	4a0b      	ldr	r2, [pc, #44]	@ (90004b10 <HAL_Init+0x70>)
90004ae2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90004ae4:	4a0b      	ldr	r2, [pc, #44]	@ (90004b14 <HAL_Init+0x74>)
90004ae6:	687b      	ldr	r3, [r7, #4]
90004ae8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90004aea:	200f      	movs	r0, #15
90004aec:	f000 f81c 	bl	90004b28 <HAL_InitTick>
90004af0:	4603      	mov	r3, r0
90004af2:	2b00      	cmp	r3, #0
90004af4:	d001      	beq.n	90004afa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90004af6:	2301      	movs	r3, #1
90004af8:	e002      	b.n	90004b00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90004afa:	f000 f80d 	bl	90004b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90004afe:	2300      	movs	r3, #0
}
90004b00:	4618      	mov	r0, r3
90004b02:	3708      	adds	r7, #8
90004b04:	46bd      	mov	sp, r7
90004b06:	bd80      	pop	{r7, pc}
90004b08:	58024400 	.word	0x58024400
90004b0c:	9001418c 	.word	0x9001418c
90004b10:	20000040 	.word	0x20000040
90004b14:	2000003c 	.word	0x2000003c

90004b18 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90004b18:	b480      	push	{r7}
90004b1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90004b1c:	bf00      	nop
90004b1e:	46bd      	mov	sp, r7
90004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
90004b24:	4770      	bx	lr
	...

90004b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90004b28:	b580      	push	{r7, lr}
90004b2a:	b082      	sub	sp, #8
90004b2c:	af00      	add	r7, sp, #0
90004b2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90004b30:	4b15      	ldr	r3, [pc, #84]	@ (90004b88 <HAL_InitTick+0x60>)
90004b32:	781b      	ldrb	r3, [r3, #0]
90004b34:	2b00      	cmp	r3, #0
90004b36:	d101      	bne.n	90004b3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90004b38:	2301      	movs	r3, #1
90004b3a:	e021      	b.n	90004b80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90004b3c:	4b13      	ldr	r3, [pc, #76]	@ (90004b8c <HAL_InitTick+0x64>)
90004b3e:	681a      	ldr	r2, [r3, #0]
90004b40:	4b11      	ldr	r3, [pc, #68]	@ (90004b88 <HAL_InitTick+0x60>)
90004b42:	781b      	ldrb	r3, [r3, #0]
90004b44:	4619      	mov	r1, r3
90004b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90004b4a:	fbb3 f3f1 	udiv	r3, r3, r1
90004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
90004b52:	4618      	mov	r0, r3
90004b54:	f000 f981 	bl	90004e5a <HAL_SYSTICK_Config>
90004b58:	4603      	mov	r3, r0
90004b5a:	2b00      	cmp	r3, #0
90004b5c:	d001      	beq.n	90004b62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
90004b5e:	2301      	movs	r3, #1
90004b60:	e00e      	b.n	90004b80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004b62:	687b      	ldr	r3, [r7, #4]
90004b64:	2b0f      	cmp	r3, #15
90004b66:	d80a      	bhi.n	90004b7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90004b68:	2200      	movs	r2, #0
90004b6a:	6879      	ldr	r1, [r7, #4]
90004b6c:	f04f 30ff 	mov.w	r0, #4294967295
90004b70:	f000 f94b 	bl	90004e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90004b74:	4a06      	ldr	r2, [pc, #24]	@ (90004b90 <HAL_InitTick+0x68>)
90004b76:	687b      	ldr	r3, [r7, #4]
90004b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90004b7a:	2300      	movs	r3, #0
90004b7c:	e000      	b.n	90004b80 <HAL_InitTick+0x58>
    return HAL_ERROR;
90004b7e:	2301      	movs	r3, #1
}
90004b80:	4618      	mov	r0, r3
90004b82:	3708      	adds	r7, #8
90004b84:	46bd      	mov	sp, r7
90004b86:	bd80      	pop	{r7, pc}
90004b88:	20000048 	.word	0x20000048
90004b8c:	2000003c 	.word	0x2000003c
90004b90:	20000044 	.word	0x20000044

90004b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90004b94:	b480      	push	{r7}
90004b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90004b98:	4b06      	ldr	r3, [pc, #24]	@ (90004bb4 <HAL_IncTick+0x20>)
90004b9a:	781b      	ldrb	r3, [r3, #0]
90004b9c:	461a      	mov	r2, r3
90004b9e:	4b06      	ldr	r3, [pc, #24]	@ (90004bb8 <HAL_IncTick+0x24>)
90004ba0:	681b      	ldr	r3, [r3, #0]
90004ba2:	4413      	add	r3, r2
90004ba4:	4a04      	ldr	r2, [pc, #16]	@ (90004bb8 <HAL_IncTick+0x24>)
90004ba6:	6013      	str	r3, [r2, #0]
}
90004ba8:	bf00      	nop
90004baa:	46bd      	mov	sp, r7
90004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
90004bb0:	4770      	bx	lr
90004bb2:	bf00      	nop
90004bb4:	20000048 	.word	0x20000048
90004bb8:	20001e84 	.word	0x20001e84

90004bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90004bbc:	b480      	push	{r7}
90004bbe:	af00      	add	r7, sp, #0
  return uwTick;
90004bc0:	4b03      	ldr	r3, [pc, #12]	@ (90004bd0 <HAL_GetTick+0x14>)
90004bc2:	681b      	ldr	r3, [r3, #0]
}
90004bc4:	4618      	mov	r0, r3
90004bc6:	46bd      	mov	sp, r7
90004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
90004bcc:	4770      	bx	lr
90004bce:	bf00      	nop
90004bd0:	20001e84 	.word	0x20001e84

90004bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90004bd4:	b580      	push	{r7, lr}
90004bd6:	b084      	sub	sp, #16
90004bd8:	af00      	add	r7, sp, #0
90004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90004bdc:	f7ff ffee 	bl	90004bbc <HAL_GetTick>
90004be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90004be2:	687b      	ldr	r3, [r7, #4]
90004be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90004be6:	68fb      	ldr	r3, [r7, #12]
90004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
90004bec:	d005      	beq.n	90004bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90004bee:	4b0a      	ldr	r3, [pc, #40]	@ (90004c18 <HAL_Delay+0x44>)
90004bf0:	781b      	ldrb	r3, [r3, #0]
90004bf2:	461a      	mov	r2, r3
90004bf4:	68fb      	ldr	r3, [r7, #12]
90004bf6:	4413      	add	r3, r2
90004bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90004bfa:	bf00      	nop
90004bfc:	f7ff ffde 	bl	90004bbc <HAL_GetTick>
90004c00:	4602      	mov	r2, r0
90004c02:	68bb      	ldr	r3, [r7, #8]
90004c04:	1ad3      	subs	r3, r2, r3
90004c06:	68fa      	ldr	r2, [r7, #12]
90004c08:	429a      	cmp	r2, r3
90004c0a:	d8f7      	bhi.n	90004bfc <HAL_Delay+0x28>
  {
  }
}
90004c0c:	bf00      	nop
90004c0e:	bf00      	nop
90004c10:	3710      	adds	r7, #16
90004c12:	46bd      	mov	sp, r7
90004c14:	bd80      	pop	{r7, pc}
90004c16:	bf00      	nop
90004c18:	20000048 	.word	0x20000048

90004c1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90004c1c:	b480      	push	{r7}
90004c1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90004c20:	4b03      	ldr	r3, [pc, #12]	@ (90004c30 <HAL_GetREVID+0x14>)
90004c22:	681b      	ldr	r3, [r3, #0]
90004c24:	0c1b      	lsrs	r3, r3, #16
}
90004c26:	4618      	mov	r0, r3
90004c28:	46bd      	mov	sp, r7
90004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90004c2e:	4770      	bx	lr
90004c30:	5c001000 	.word	0x5c001000

90004c34 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90004c34:	b480      	push	{r7}
90004c36:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90004c38:	4b05      	ldr	r3, [pc, #20]	@ (90004c50 <HAL_EnableCompensationCell+0x1c>)
90004c3a:	6a1b      	ldr	r3, [r3, #32]
90004c3c:	4a04      	ldr	r2, [pc, #16]	@ (90004c50 <HAL_EnableCompensationCell+0x1c>)
90004c3e:	f043 0301 	orr.w	r3, r3, #1
90004c42:	6213      	str	r3, [r2, #32]
}
90004c44:	bf00      	nop
90004c46:	46bd      	mov	sp, r7
90004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
90004c4c:	4770      	bx	lr
90004c4e:	bf00      	nop
90004c50:	58000400 	.word	0x58000400

90004c54 <__NVIC_SetPriorityGrouping>:
{
90004c54:	b480      	push	{r7}
90004c56:	b085      	sub	sp, #20
90004c58:	af00      	add	r7, sp, #0
90004c5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90004c5c:	687b      	ldr	r3, [r7, #4]
90004c5e:	f003 0307 	and.w	r3, r3, #7
90004c62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90004c64:	4b0b      	ldr	r3, [pc, #44]	@ (90004c94 <__NVIC_SetPriorityGrouping+0x40>)
90004c66:	68db      	ldr	r3, [r3, #12]
90004c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90004c6a:	68ba      	ldr	r2, [r7, #8]
90004c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90004c70:	4013      	ands	r3, r2
90004c72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90004c74:	68fb      	ldr	r3, [r7, #12]
90004c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90004c78:	68bb      	ldr	r3, [r7, #8]
90004c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90004c7c:	4b06      	ldr	r3, [pc, #24]	@ (90004c98 <__NVIC_SetPriorityGrouping+0x44>)
90004c7e:	4313      	orrs	r3, r2
90004c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90004c82:	4a04      	ldr	r2, [pc, #16]	@ (90004c94 <__NVIC_SetPriorityGrouping+0x40>)
90004c84:	68bb      	ldr	r3, [r7, #8]
90004c86:	60d3      	str	r3, [r2, #12]
}
90004c88:	bf00      	nop
90004c8a:	3714      	adds	r7, #20
90004c8c:	46bd      	mov	sp, r7
90004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004c92:	4770      	bx	lr
90004c94:	e000ed00 	.word	0xe000ed00
90004c98:	05fa0000 	.word	0x05fa0000

90004c9c <__NVIC_GetPriorityGrouping>:
{
90004c9c:	b480      	push	{r7}
90004c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90004ca0:	4b04      	ldr	r3, [pc, #16]	@ (90004cb4 <__NVIC_GetPriorityGrouping+0x18>)
90004ca2:	68db      	ldr	r3, [r3, #12]
90004ca4:	0a1b      	lsrs	r3, r3, #8
90004ca6:	f003 0307 	and.w	r3, r3, #7
}
90004caa:	4618      	mov	r0, r3
90004cac:	46bd      	mov	sp, r7
90004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
90004cb2:	4770      	bx	lr
90004cb4:	e000ed00 	.word	0xe000ed00

90004cb8 <__NVIC_EnableIRQ>:
{
90004cb8:	b480      	push	{r7}
90004cba:	b083      	sub	sp, #12
90004cbc:	af00      	add	r7, sp, #0
90004cbe:	4603      	mov	r3, r0
90004cc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90004cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90004cc6:	2b00      	cmp	r3, #0
90004cc8:	db0b      	blt.n	90004ce2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90004cca:	88fb      	ldrh	r3, [r7, #6]
90004ccc:	f003 021f 	and.w	r2, r3, #31
90004cd0:	4907      	ldr	r1, [pc, #28]	@ (90004cf0 <__NVIC_EnableIRQ+0x38>)
90004cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90004cd6:	095b      	lsrs	r3, r3, #5
90004cd8:	2001      	movs	r0, #1
90004cda:	fa00 f202 	lsl.w	r2, r0, r2
90004cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90004ce2:	bf00      	nop
90004ce4:	370c      	adds	r7, #12
90004ce6:	46bd      	mov	sp, r7
90004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
90004cec:	4770      	bx	lr
90004cee:	bf00      	nop
90004cf0:	e000e100 	.word	0xe000e100

90004cf4 <__NVIC_SetPriority>:
{
90004cf4:	b480      	push	{r7}
90004cf6:	b083      	sub	sp, #12
90004cf8:	af00      	add	r7, sp, #0
90004cfa:	4603      	mov	r3, r0
90004cfc:	6039      	str	r1, [r7, #0]
90004cfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90004d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90004d04:	2b00      	cmp	r3, #0
90004d06:	db0a      	blt.n	90004d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90004d08:	683b      	ldr	r3, [r7, #0]
90004d0a:	b2da      	uxtb	r2, r3
90004d0c:	490c      	ldr	r1, [pc, #48]	@ (90004d40 <__NVIC_SetPriority+0x4c>)
90004d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90004d12:	0112      	lsls	r2, r2, #4
90004d14:	b2d2      	uxtb	r2, r2
90004d16:	440b      	add	r3, r1
90004d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90004d1c:	e00a      	b.n	90004d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90004d1e:	683b      	ldr	r3, [r7, #0]
90004d20:	b2da      	uxtb	r2, r3
90004d22:	4908      	ldr	r1, [pc, #32]	@ (90004d44 <__NVIC_SetPriority+0x50>)
90004d24:	88fb      	ldrh	r3, [r7, #6]
90004d26:	f003 030f 	and.w	r3, r3, #15
90004d2a:	3b04      	subs	r3, #4
90004d2c:	0112      	lsls	r2, r2, #4
90004d2e:	b2d2      	uxtb	r2, r2
90004d30:	440b      	add	r3, r1
90004d32:	761a      	strb	r2, [r3, #24]
}
90004d34:	bf00      	nop
90004d36:	370c      	adds	r7, #12
90004d38:	46bd      	mov	sp, r7
90004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
90004d3e:	4770      	bx	lr
90004d40:	e000e100 	.word	0xe000e100
90004d44:	e000ed00 	.word	0xe000ed00

90004d48 <NVIC_EncodePriority>:
{
90004d48:	b480      	push	{r7}
90004d4a:	b089      	sub	sp, #36	@ 0x24
90004d4c:	af00      	add	r7, sp, #0
90004d4e:	60f8      	str	r0, [r7, #12]
90004d50:	60b9      	str	r1, [r7, #8]
90004d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90004d54:	68fb      	ldr	r3, [r7, #12]
90004d56:	f003 0307 	and.w	r3, r3, #7
90004d5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90004d5c:	69fb      	ldr	r3, [r7, #28]
90004d5e:	f1c3 0307 	rsb	r3, r3, #7
90004d62:	2b04      	cmp	r3, #4
90004d64:	bf28      	it	cs
90004d66:	2304      	movcs	r3, #4
90004d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90004d6a:	69fb      	ldr	r3, [r7, #28]
90004d6c:	3304      	adds	r3, #4
90004d6e:	2b06      	cmp	r3, #6
90004d70:	d902      	bls.n	90004d78 <NVIC_EncodePriority+0x30>
90004d72:	69fb      	ldr	r3, [r7, #28]
90004d74:	3b03      	subs	r3, #3
90004d76:	e000      	b.n	90004d7a <NVIC_EncodePriority+0x32>
90004d78:	2300      	movs	r3, #0
90004d7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90004d7c:	f04f 32ff 	mov.w	r2, #4294967295
90004d80:	69bb      	ldr	r3, [r7, #24]
90004d82:	fa02 f303 	lsl.w	r3, r2, r3
90004d86:	43da      	mvns	r2, r3
90004d88:	68bb      	ldr	r3, [r7, #8]
90004d8a:	401a      	ands	r2, r3
90004d8c:	697b      	ldr	r3, [r7, #20]
90004d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90004d90:	f04f 31ff 	mov.w	r1, #4294967295
90004d94:	697b      	ldr	r3, [r7, #20]
90004d96:	fa01 f303 	lsl.w	r3, r1, r3
90004d9a:	43d9      	mvns	r1, r3
90004d9c:	687b      	ldr	r3, [r7, #4]
90004d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90004da0:	4313      	orrs	r3, r2
}
90004da2:	4618      	mov	r0, r3
90004da4:	3724      	adds	r7, #36	@ 0x24
90004da6:	46bd      	mov	sp, r7
90004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
90004dac:	4770      	bx	lr
	...

90004db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90004db0:	b580      	push	{r7, lr}
90004db2:	b082      	sub	sp, #8
90004db4:	af00      	add	r7, sp, #0
90004db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90004db8:	687b      	ldr	r3, [r7, #4]
90004dba:	3b01      	subs	r3, #1
90004dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90004dc0:	d301      	bcc.n	90004dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90004dc2:	2301      	movs	r3, #1
90004dc4:	e00f      	b.n	90004de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90004dc6:	4a0a      	ldr	r2, [pc, #40]	@ (90004df0 <SysTick_Config+0x40>)
90004dc8:	687b      	ldr	r3, [r7, #4]
90004dca:	3b01      	subs	r3, #1
90004dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90004dce:	210f      	movs	r1, #15
90004dd0:	f04f 30ff 	mov.w	r0, #4294967295
90004dd4:	f7ff ff8e 	bl	90004cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90004dd8:	4b05      	ldr	r3, [pc, #20]	@ (90004df0 <SysTick_Config+0x40>)
90004dda:	2200      	movs	r2, #0
90004ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90004dde:	4b04      	ldr	r3, [pc, #16]	@ (90004df0 <SysTick_Config+0x40>)
90004de0:	2207      	movs	r2, #7
90004de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90004de4:	2300      	movs	r3, #0
}
90004de6:	4618      	mov	r0, r3
90004de8:	3708      	adds	r7, #8
90004dea:	46bd      	mov	sp, r7
90004dec:	bd80      	pop	{r7, pc}
90004dee:	bf00      	nop
90004df0:	e000e010 	.word	0xe000e010

90004df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90004df4:	b580      	push	{r7, lr}
90004df6:	b082      	sub	sp, #8
90004df8:	af00      	add	r7, sp, #0
90004dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90004dfc:	6878      	ldr	r0, [r7, #4]
90004dfe:	f7ff ff29 	bl	90004c54 <__NVIC_SetPriorityGrouping>
}
90004e02:	bf00      	nop
90004e04:	3708      	adds	r7, #8
90004e06:	46bd      	mov	sp, r7
90004e08:	bd80      	pop	{r7, pc}

90004e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90004e0a:	b580      	push	{r7, lr}
90004e0c:	b086      	sub	sp, #24
90004e0e:	af00      	add	r7, sp, #0
90004e10:	4603      	mov	r3, r0
90004e12:	60b9      	str	r1, [r7, #8]
90004e14:	607a      	str	r2, [r7, #4]
90004e16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90004e18:	f7ff ff40 	bl	90004c9c <__NVIC_GetPriorityGrouping>
90004e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90004e1e:	687a      	ldr	r2, [r7, #4]
90004e20:	68b9      	ldr	r1, [r7, #8]
90004e22:	6978      	ldr	r0, [r7, #20]
90004e24:	f7ff ff90 	bl	90004d48 <NVIC_EncodePriority>
90004e28:	4602      	mov	r2, r0
90004e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90004e2e:	4611      	mov	r1, r2
90004e30:	4618      	mov	r0, r3
90004e32:	f7ff ff5f 	bl	90004cf4 <__NVIC_SetPriority>
}
90004e36:	bf00      	nop
90004e38:	3718      	adds	r7, #24
90004e3a:	46bd      	mov	sp, r7
90004e3c:	bd80      	pop	{r7, pc}

90004e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90004e3e:	b580      	push	{r7, lr}
90004e40:	b082      	sub	sp, #8
90004e42:	af00      	add	r7, sp, #0
90004e44:	4603      	mov	r3, r0
90004e46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90004e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90004e4c:	4618      	mov	r0, r3
90004e4e:	f7ff ff33 	bl	90004cb8 <__NVIC_EnableIRQ>
}
90004e52:	bf00      	nop
90004e54:	3708      	adds	r7, #8
90004e56:	46bd      	mov	sp, r7
90004e58:	bd80      	pop	{r7, pc}

90004e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90004e5a:	b580      	push	{r7, lr}
90004e5c:	b082      	sub	sp, #8
90004e5e:	af00      	add	r7, sp, #0
90004e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90004e62:	6878      	ldr	r0, [r7, #4]
90004e64:	f7ff ffa4 	bl	90004db0 <SysTick_Config>
90004e68:	4603      	mov	r3, r0
}
90004e6a:	4618      	mov	r0, r3
90004e6c:	3708      	adds	r7, #8
90004e6e:	46bd      	mov	sp, r7
90004e70:	bd80      	pop	{r7, pc}
	...

90004e74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90004e74:	b480      	push	{r7}
90004e76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90004e78:	f3bf 8f5f 	dmb	sy
}
90004e7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90004e7e:	4b07      	ldr	r3, [pc, #28]	@ (90004e9c <HAL_MPU_Disable+0x28>)
90004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90004e82:	4a06      	ldr	r2, [pc, #24]	@ (90004e9c <HAL_MPU_Disable+0x28>)
90004e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004e88:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90004e8a:	4b05      	ldr	r3, [pc, #20]	@ (90004ea0 <HAL_MPU_Disable+0x2c>)
90004e8c:	2200      	movs	r2, #0
90004e8e:	605a      	str	r2, [r3, #4]
}
90004e90:	bf00      	nop
90004e92:	46bd      	mov	sp, r7
90004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
90004e98:	4770      	bx	lr
90004e9a:	bf00      	nop
90004e9c:	e000ed00 	.word	0xe000ed00
90004ea0:	e000ed90 	.word	0xe000ed90

90004ea4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90004ea4:	b480      	push	{r7}
90004ea6:	b083      	sub	sp, #12
90004ea8:	af00      	add	r7, sp, #0
90004eaa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90004eac:	4a0b      	ldr	r2, [pc, #44]	@ (90004edc <HAL_MPU_Enable+0x38>)
90004eae:	687b      	ldr	r3, [r7, #4]
90004eb0:	f043 0301 	orr.w	r3, r3, #1
90004eb4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90004eb6:	4b0a      	ldr	r3, [pc, #40]	@ (90004ee0 <HAL_MPU_Enable+0x3c>)
90004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90004eba:	4a09      	ldr	r2, [pc, #36]	@ (90004ee0 <HAL_MPU_Enable+0x3c>)
90004ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004ec0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90004ec2:	f3bf 8f4f 	dsb	sy
}
90004ec6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90004ec8:	f3bf 8f6f 	isb	sy
}
90004ecc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90004ece:	bf00      	nop
90004ed0:	370c      	adds	r7, #12
90004ed2:	46bd      	mov	sp, r7
90004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
90004ed8:	4770      	bx	lr
90004eda:	bf00      	nop
90004edc:	e000ed90 	.word	0xe000ed90
90004ee0:	e000ed00 	.word	0xe000ed00

90004ee4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90004ee4:	b480      	push	{r7}
90004ee6:	b083      	sub	sp, #12
90004ee8:	af00      	add	r7, sp, #0
90004eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90004eec:	687b      	ldr	r3, [r7, #4]
90004eee:	785a      	ldrb	r2, [r3, #1]
90004ef0:	4b1b      	ldr	r3, [pc, #108]	@ (90004f60 <HAL_MPU_ConfigRegion+0x7c>)
90004ef2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90004ef4:	4b1a      	ldr	r3, [pc, #104]	@ (90004f60 <HAL_MPU_ConfigRegion+0x7c>)
90004ef6:	691b      	ldr	r3, [r3, #16]
90004ef8:	4a19      	ldr	r2, [pc, #100]	@ (90004f60 <HAL_MPU_ConfigRegion+0x7c>)
90004efa:	f023 0301 	bic.w	r3, r3, #1
90004efe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90004f00:	4a17      	ldr	r2, [pc, #92]	@ (90004f60 <HAL_MPU_ConfigRegion+0x7c>)
90004f02:	687b      	ldr	r3, [r7, #4]
90004f04:	685b      	ldr	r3, [r3, #4]
90004f06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90004f08:	687b      	ldr	r3, [r7, #4]
90004f0a:	7b1b      	ldrb	r3, [r3, #12]
90004f0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90004f0e:	687b      	ldr	r3, [r7, #4]
90004f10:	7adb      	ldrb	r3, [r3, #11]
90004f12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90004f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90004f16:	687b      	ldr	r3, [r7, #4]
90004f18:	7a9b      	ldrb	r3, [r3, #10]
90004f1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90004f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90004f1e:	687b      	ldr	r3, [r7, #4]
90004f20:	7b5b      	ldrb	r3, [r3, #13]
90004f22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90004f24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90004f26:	687b      	ldr	r3, [r7, #4]
90004f28:	7b9b      	ldrb	r3, [r3, #14]
90004f2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90004f2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90004f2e:	687b      	ldr	r3, [r7, #4]
90004f30:	7bdb      	ldrb	r3, [r3, #15]
90004f32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90004f34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90004f36:	687b      	ldr	r3, [r7, #4]
90004f38:	7a5b      	ldrb	r3, [r3, #9]
90004f3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90004f3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90004f3e:	687b      	ldr	r3, [r7, #4]
90004f40:	7a1b      	ldrb	r3, [r3, #8]
90004f42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90004f44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90004f46:	687a      	ldr	r2, [r7, #4]
90004f48:	7812      	ldrb	r2, [r2, #0]
90004f4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90004f4c:	4a04      	ldr	r2, [pc, #16]	@ (90004f60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90004f4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90004f50:	6113      	str	r3, [r2, #16]
}
90004f52:	bf00      	nop
90004f54:	370c      	adds	r7, #12
90004f56:	46bd      	mov	sp, r7
90004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
90004f5c:	4770      	bx	lr
90004f5e:	bf00      	nop
90004f60:	e000ed90 	.word	0xe000ed90

90004f64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90004f64:	b580      	push	{r7, lr}
90004f66:	b082      	sub	sp, #8
90004f68:	af00      	add	r7, sp, #0
90004f6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90004f6c:	687b      	ldr	r3, [r7, #4]
90004f6e:	2b00      	cmp	r3, #0
90004f70:	d101      	bne.n	90004f76 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90004f72:	2301      	movs	r3, #1
90004f74:	e04f      	b.n	90005016 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90004f76:	687b      	ldr	r3, [r7, #4]
90004f78:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
90004f7c:	b2db      	uxtb	r3, r3
90004f7e:	2b00      	cmp	r3, #0
90004f80:	d106      	bne.n	90004f90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90004f82:	687b      	ldr	r3, [r7, #4]
90004f84:	2200      	movs	r2, #0
90004f86:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90004f8a:	6878      	ldr	r0, [r7, #4]
90004f8c:	f000 f84e 	bl	9000502c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90004f90:	687b      	ldr	r3, [r7, #4]
90004f92:	2202      	movs	r2, #2
90004f94:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90004f98:	687b      	ldr	r3, [r7, #4]
90004f9a:	681b      	ldr	r3, [r3, #0]
90004f9c:	681a      	ldr	r2, [r3, #0]
90004f9e:	4b20      	ldr	r3, [pc, #128]	@ (90005020 <HAL_DMA2D_Init+0xbc>)
90004fa0:	4013      	ands	r3, r2
90004fa2:	687a      	ldr	r2, [r7, #4]
90004fa4:	6851      	ldr	r1, [r2, #4]
90004fa6:	687a      	ldr	r2, [r7, #4]
90004fa8:	69d2      	ldr	r2, [r2, #28]
90004faa:	4311      	orrs	r1, r2
90004fac:	687a      	ldr	r2, [r7, #4]
90004fae:	6812      	ldr	r2, [r2, #0]
90004fb0:	430b      	orrs	r3, r1
90004fb2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90004fb4:	687b      	ldr	r3, [r7, #4]
90004fb6:	681b      	ldr	r3, [r3, #0]
90004fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90004fba:	4b1a      	ldr	r3, [pc, #104]	@ (90005024 <HAL_DMA2D_Init+0xc0>)
90004fbc:	4013      	ands	r3, r2
90004fbe:	687a      	ldr	r2, [r7, #4]
90004fc0:	6891      	ldr	r1, [r2, #8]
90004fc2:	687a      	ldr	r2, [r7, #4]
90004fc4:	6992      	ldr	r2, [r2, #24]
90004fc6:	4311      	orrs	r1, r2
90004fc8:	687a      	ldr	r2, [r7, #4]
90004fca:	6812      	ldr	r2, [r2, #0]
90004fcc:	430b      	orrs	r3, r1
90004fce:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90004fd0:	687b      	ldr	r3, [r7, #4]
90004fd2:	681b      	ldr	r3, [r3, #0]
90004fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
90004fd6:	4b14      	ldr	r3, [pc, #80]	@ (90005028 <HAL_DMA2D_Init+0xc4>)
90004fd8:	4013      	ands	r3, r2
90004fda:	687a      	ldr	r2, [r7, #4]
90004fdc:	68d1      	ldr	r1, [r2, #12]
90004fde:	687a      	ldr	r2, [r7, #4]
90004fe0:	6812      	ldr	r2, [r2, #0]
90004fe2:	430b      	orrs	r3, r1
90004fe4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90004fe6:	687b      	ldr	r3, [r7, #4]
90004fe8:	681b      	ldr	r3, [r3, #0]
90004fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90004fec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90004ff0:	687b      	ldr	r3, [r7, #4]
90004ff2:	691b      	ldr	r3, [r3, #16]
90004ff4:	051a      	lsls	r2, r3, #20
90004ff6:	687b      	ldr	r3, [r7, #4]
90004ff8:	695b      	ldr	r3, [r3, #20]
90004ffa:	055b      	lsls	r3, r3, #21
90004ffc:	431a      	orrs	r2, r3
90004ffe:	687b      	ldr	r3, [r7, #4]
90005000:	681b      	ldr	r3, [r3, #0]
90005002:	430a      	orrs	r2, r1
90005004:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90005006:	687b      	ldr	r3, [r7, #4]
90005008:	2200      	movs	r2, #0
9000500a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000500c:	687b      	ldr	r3, [r7, #4]
9000500e:	2201      	movs	r2, #1
90005010:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90005014:	2300      	movs	r3, #0
}
90005016:	4618      	mov	r0, r3
90005018:	3708      	adds	r7, #8
9000501a:	46bd      	mov	sp, r7
9000501c:	bd80      	pop	{r7, pc}
9000501e:	bf00      	nop
90005020:	fff8ffbf 	.word	0xfff8ffbf
90005024:	fffffef8 	.word	0xfffffef8
90005028:	ffff0000 	.word	0xffff0000

9000502c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
9000502c:	b480      	push	{r7}
9000502e:	b083      	sub	sp, #12
90005030:	af00      	add	r7, sp, #0
90005032:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90005034:	bf00      	nop
90005036:	370c      	adds	r7, #12
90005038:	46bd      	mov	sp, r7
9000503a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000503e:	4770      	bx	lr

90005040 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90005040:	b580      	push	{r7, lr}
90005042:	b086      	sub	sp, #24
90005044:	af02      	add	r7, sp, #8
90005046:	60f8      	str	r0, [r7, #12]
90005048:	60b9      	str	r1, [r7, #8]
9000504a:	607a      	str	r2, [r7, #4]
9000504c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000504e:	68fb      	ldr	r3, [r7, #12]
90005050:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90005054:	2b01      	cmp	r3, #1
90005056:	d101      	bne.n	9000505c <HAL_DMA2D_Start+0x1c>
90005058:	2302      	movs	r3, #2
9000505a:	e018      	b.n	9000508e <HAL_DMA2D_Start+0x4e>
9000505c:	68fb      	ldr	r3, [r7, #12]
9000505e:	2201      	movs	r2, #1
90005060:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90005064:	68fb      	ldr	r3, [r7, #12]
90005066:	2202      	movs	r2, #2
90005068:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
9000506c:	69bb      	ldr	r3, [r7, #24]
9000506e:	9300      	str	r3, [sp, #0]
90005070:	683b      	ldr	r3, [r7, #0]
90005072:	687a      	ldr	r2, [r7, #4]
90005074:	68b9      	ldr	r1, [r7, #8]
90005076:	68f8      	ldr	r0, [r7, #12]
90005078:	f000 f9a4 	bl	900053c4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
9000507c:	68fb      	ldr	r3, [r7, #12]
9000507e:	681b      	ldr	r3, [r3, #0]
90005080:	681a      	ldr	r2, [r3, #0]
90005082:	68fb      	ldr	r3, [r7, #12]
90005084:	681b      	ldr	r3, [r3, #0]
90005086:	f042 0201 	orr.w	r2, r2, #1
9000508a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
9000508c:	2300      	movs	r3, #0
}
9000508e:	4618      	mov	r0, r3
90005090:	3710      	adds	r7, #16
90005092:	46bd      	mov	sp, r7
90005094:	bd80      	pop	{r7, pc}

90005096 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90005096:	b580      	push	{r7, lr}
90005098:	b086      	sub	sp, #24
9000509a:	af00      	add	r7, sp, #0
9000509c:	6078      	str	r0, [r7, #4]
9000509e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900050a0:	2300      	movs	r3, #0
900050a2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900050a4:	687b      	ldr	r3, [r7, #4]
900050a6:	681b      	ldr	r3, [r3, #0]
900050a8:	681b      	ldr	r3, [r3, #0]
900050aa:	f003 0301 	and.w	r3, r3, #1
900050ae:	2b00      	cmp	r3, #0
900050b0:	d056      	beq.n	90005160 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900050b2:	f7ff fd83 	bl	90004bbc <HAL_GetTick>
900050b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900050b8:	e04b      	b.n	90005152 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900050ba:	687b      	ldr	r3, [r7, #4]
900050bc:	681b      	ldr	r3, [r3, #0]
900050be:	685b      	ldr	r3, [r3, #4]
900050c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900050c2:	68fb      	ldr	r3, [r7, #12]
900050c4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
900050c8:	2b00      	cmp	r3, #0
900050ca:	d023      	beq.n	90005114 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900050cc:	68fb      	ldr	r3, [r7, #12]
900050ce:	f003 0320 	and.w	r3, r3, #32
900050d2:	2b00      	cmp	r3, #0
900050d4:	d005      	beq.n	900050e2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900050d6:	687b      	ldr	r3, [r7, #4]
900050d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900050da:	f043 0202 	orr.w	r2, r3, #2
900050de:	687b      	ldr	r3, [r7, #4]
900050e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900050e2:	68fb      	ldr	r3, [r7, #12]
900050e4:	f003 0301 	and.w	r3, r3, #1
900050e8:	2b00      	cmp	r3, #0
900050ea:	d005      	beq.n	900050f8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900050ec:	687b      	ldr	r3, [r7, #4]
900050ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900050f0:	f043 0201 	orr.w	r2, r3, #1
900050f4:	687b      	ldr	r3, [r7, #4]
900050f6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900050f8:	687b      	ldr	r3, [r7, #4]
900050fa:	681b      	ldr	r3, [r3, #0]
900050fc:	2221      	movs	r2, #33	@ 0x21
900050fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90005100:	687b      	ldr	r3, [r7, #4]
90005102:	2204      	movs	r2, #4
90005104:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90005108:	687b      	ldr	r3, [r7, #4]
9000510a:	2200      	movs	r2, #0
9000510c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90005110:	2301      	movs	r3, #1
90005112:	e0a5      	b.n	90005260 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90005114:	683b      	ldr	r3, [r7, #0]
90005116:	f1b3 3fff 	cmp.w	r3, #4294967295
9000511a:	d01a      	beq.n	90005152 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000511c:	f7ff fd4e 	bl	90004bbc <HAL_GetTick>
90005120:	4602      	mov	r2, r0
90005122:	697b      	ldr	r3, [r7, #20]
90005124:	1ad3      	subs	r3, r2, r3
90005126:	683a      	ldr	r2, [r7, #0]
90005128:	429a      	cmp	r2, r3
9000512a:	d302      	bcc.n	90005132 <HAL_DMA2D_PollForTransfer+0x9c>
9000512c:	683b      	ldr	r3, [r7, #0]
9000512e:	2b00      	cmp	r3, #0
90005130:	d10f      	bne.n	90005152 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90005132:	687b      	ldr	r3, [r7, #4]
90005134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90005136:	f043 0220 	orr.w	r2, r3, #32
9000513a:	687b      	ldr	r3, [r7, #4]
9000513c:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000513e:	687b      	ldr	r3, [r7, #4]
90005140:	2203      	movs	r2, #3
90005142:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90005146:	687b      	ldr	r3, [r7, #4]
90005148:	2200      	movs	r2, #0
9000514a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
9000514e:	2303      	movs	r3, #3
90005150:	e086      	b.n	90005260 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90005152:	687b      	ldr	r3, [r7, #4]
90005154:	681b      	ldr	r3, [r3, #0]
90005156:	685b      	ldr	r3, [r3, #4]
90005158:	f003 0302 	and.w	r3, r3, #2
9000515c:	2b00      	cmp	r3, #0
9000515e:	d0ac      	beq.n	900050ba <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90005160:	687b      	ldr	r3, [r7, #4]
90005162:	681b      	ldr	r3, [r3, #0]
90005164:	69db      	ldr	r3, [r3, #28]
90005166:	f003 0320 	and.w	r3, r3, #32
9000516a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
9000516c:	687b      	ldr	r3, [r7, #4]
9000516e:	681b      	ldr	r3, [r3, #0]
90005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005172:	f003 0320 	and.w	r3, r3, #32
90005176:	693a      	ldr	r2, [r7, #16]
90005178:	4313      	orrs	r3, r2
9000517a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
9000517c:	693b      	ldr	r3, [r7, #16]
9000517e:	2b00      	cmp	r3, #0
90005180:	d061      	beq.n	90005246 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90005182:	f7ff fd1b 	bl	90004bbc <HAL_GetTick>
90005186:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90005188:	e056      	b.n	90005238 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000518a:	687b      	ldr	r3, [r7, #4]
9000518c:	681b      	ldr	r3, [r3, #0]
9000518e:	685b      	ldr	r3, [r3, #4]
90005190:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90005192:	68fb      	ldr	r3, [r7, #12]
90005194:	f003 0329 	and.w	r3, r3, #41	@ 0x29
90005198:	2b00      	cmp	r3, #0
9000519a:	d02e      	beq.n	900051fa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
9000519c:	68fb      	ldr	r3, [r7, #12]
9000519e:	f003 0308 	and.w	r3, r3, #8
900051a2:	2b00      	cmp	r3, #0
900051a4:	d005      	beq.n	900051b2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900051a6:	687b      	ldr	r3, [r7, #4]
900051a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900051aa:	f043 0204 	orr.w	r2, r3, #4
900051ae:	687b      	ldr	r3, [r7, #4]
900051b0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900051b2:	68fb      	ldr	r3, [r7, #12]
900051b4:	f003 0320 	and.w	r3, r3, #32
900051b8:	2b00      	cmp	r3, #0
900051ba:	d005      	beq.n	900051c8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900051bc:	687b      	ldr	r3, [r7, #4]
900051be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900051c0:	f043 0202 	orr.w	r2, r3, #2
900051c4:	687b      	ldr	r3, [r7, #4]
900051c6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900051c8:	68fb      	ldr	r3, [r7, #12]
900051ca:	f003 0301 	and.w	r3, r3, #1
900051ce:	2b00      	cmp	r3, #0
900051d0:	d005      	beq.n	900051de <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900051d2:	687b      	ldr	r3, [r7, #4]
900051d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900051d6:	f043 0201 	orr.w	r2, r3, #1
900051da:	687b      	ldr	r3, [r7, #4]
900051dc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900051de:	687b      	ldr	r3, [r7, #4]
900051e0:	681b      	ldr	r3, [r3, #0]
900051e2:	2229      	movs	r2, #41	@ 0x29
900051e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900051e6:	687b      	ldr	r3, [r7, #4]
900051e8:	2204      	movs	r2, #4
900051ea:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900051ee:	687b      	ldr	r3, [r7, #4]
900051f0:	2200      	movs	r2, #0
900051f2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
900051f6:	2301      	movs	r3, #1
900051f8:	e032      	b.n	90005260 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900051fa:	683b      	ldr	r3, [r7, #0]
900051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
90005200:	d01a      	beq.n	90005238 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90005202:	f7ff fcdb 	bl	90004bbc <HAL_GetTick>
90005206:	4602      	mov	r2, r0
90005208:	697b      	ldr	r3, [r7, #20]
9000520a:	1ad3      	subs	r3, r2, r3
9000520c:	683a      	ldr	r2, [r7, #0]
9000520e:	429a      	cmp	r2, r3
90005210:	d302      	bcc.n	90005218 <HAL_DMA2D_PollForTransfer+0x182>
90005212:	683b      	ldr	r3, [r7, #0]
90005214:	2b00      	cmp	r3, #0
90005216:	d10f      	bne.n	90005238 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90005218:	687b      	ldr	r3, [r7, #4]
9000521a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000521c:	f043 0220 	orr.w	r2, r3, #32
90005220:	687b      	ldr	r3, [r7, #4]
90005222:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90005224:	687b      	ldr	r3, [r7, #4]
90005226:	2203      	movs	r2, #3
90005228:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000522c:	687b      	ldr	r3, [r7, #4]
9000522e:	2200      	movs	r2, #0
90005230:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90005234:	2303      	movs	r3, #3
90005236:	e013      	b.n	90005260 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90005238:	687b      	ldr	r3, [r7, #4]
9000523a:	681b      	ldr	r3, [r3, #0]
9000523c:	685b      	ldr	r3, [r3, #4]
9000523e:	f003 0310 	and.w	r3, r3, #16
90005242:	2b00      	cmp	r3, #0
90005244:	d0a1      	beq.n	9000518a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90005246:	687b      	ldr	r3, [r7, #4]
90005248:	681b      	ldr	r3, [r3, #0]
9000524a:	2212      	movs	r2, #18
9000524c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000524e:	687b      	ldr	r3, [r7, #4]
90005250:	2201      	movs	r2, #1
90005252:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90005256:	687b      	ldr	r3, [r7, #4]
90005258:	2200      	movs	r2, #0
9000525a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
9000525e:	2300      	movs	r3, #0
}
90005260:	4618      	mov	r0, r3
90005262:	3718      	adds	r7, #24
90005264:	46bd      	mov	sp, r7
90005266:	bd80      	pop	{r7, pc}

90005268 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90005268:	b480      	push	{r7}
9000526a:	b087      	sub	sp, #28
9000526c:	af00      	add	r7, sp, #0
9000526e:	6078      	str	r0, [r7, #4]
90005270:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90005272:	687b      	ldr	r3, [r7, #4]
90005274:	685b      	ldr	r3, [r3, #4]
90005276:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
9000527a:	683b      	ldr	r3, [r7, #0]
9000527c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000527e:	687b      	ldr	r3, [r7, #4]
90005280:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90005284:	2b01      	cmp	r3, #1
90005286:	d101      	bne.n	9000528c <HAL_DMA2D_ConfigLayer+0x24>
90005288:	2302      	movs	r3, #2
9000528a:	e092      	b.n	900053b2 <HAL_DMA2D_ConfigLayer+0x14a>
9000528c:	687b      	ldr	r3, [r7, #4]
9000528e:	2201      	movs	r2, #1
90005290:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90005294:	687b      	ldr	r3, [r7, #4]
90005296:	2202      	movs	r2, #2
90005298:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
9000529c:	683a      	ldr	r2, [r7, #0]
9000529e:	4613      	mov	r3, r2
900052a0:	00db      	lsls	r3, r3, #3
900052a2:	1a9b      	subs	r3, r3, r2
900052a4:	009b      	lsls	r3, r3, #2
900052a6:	3328      	adds	r3, #40	@ 0x28
900052a8:	687a      	ldr	r2, [r7, #4]
900052aa:	4413      	add	r3, r2
900052ac:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900052ae:	68fb      	ldr	r3, [r7, #12]
900052b0:	685a      	ldr	r2, [r3, #4]
900052b2:	68fb      	ldr	r3, [r7, #12]
900052b4:	689b      	ldr	r3, [r3, #8]
900052b6:	041b      	lsls	r3, r3, #16
900052b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900052ba:	68fb      	ldr	r3, [r7, #12]
900052bc:	691b      	ldr	r3, [r3, #16]
900052be:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900052c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900052c2:	68fb      	ldr	r3, [r7, #12]
900052c4:	695b      	ldr	r3, [r3, #20]
900052c6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900052c8:	4313      	orrs	r3, r2
900052ca:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
900052cc:	4b3c      	ldr	r3, [pc, #240]	@ (900053c0 <HAL_DMA2D_ConfigLayer+0x158>)
900052ce:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900052d0:	68fb      	ldr	r3, [r7, #12]
900052d2:	685b      	ldr	r3, [r3, #4]
900052d4:	2b0a      	cmp	r3, #10
900052d6:	d003      	beq.n	900052e0 <HAL_DMA2D_ConfigLayer+0x78>
900052d8:	68fb      	ldr	r3, [r7, #12]
900052da:	685b      	ldr	r3, [r3, #4]
900052dc:	2b09      	cmp	r3, #9
900052de:	d107      	bne.n	900052f0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900052e0:	68fb      	ldr	r3, [r7, #12]
900052e2:	68db      	ldr	r3, [r3, #12]
900052e4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
900052e8:	693a      	ldr	r2, [r7, #16]
900052ea:	4313      	orrs	r3, r2
900052ec:	613b      	str	r3, [r7, #16]
900052ee:	e005      	b.n	900052fc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900052f0:	68fb      	ldr	r3, [r7, #12]
900052f2:	68db      	ldr	r3, [r3, #12]
900052f4:	061b      	lsls	r3, r3, #24
900052f6:	693a      	ldr	r2, [r7, #16]
900052f8:	4313      	orrs	r3, r2
900052fa:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
900052fc:	683b      	ldr	r3, [r7, #0]
900052fe:	2b00      	cmp	r3, #0
90005300:	d120      	bne.n	90005344 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90005302:	687b      	ldr	r3, [r7, #4]
90005304:	681b      	ldr	r3, [r3, #0]
90005306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005308:	697b      	ldr	r3, [r7, #20]
9000530a:	43db      	mvns	r3, r3
9000530c:	ea02 0103 	and.w	r1, r2, r3
90005310:	687b      	ldr	r3, [r7, #4]
90005312:	681b      	ldr	r3, [r3, #0]
90005314:	693a      	ldr	r2, [r7, #16]
90005316:	430a      	orrs	r2, r1
90005318:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000531a:	687b      	ldr	r3, [r7, #4]
9000531c:	681b      	ldr	r3, [r3, #0]
9000531e:	68fa      	ldr	r2, [r7, #12]
90005320:	6812      	ldr	r2, [r2, #0]
90005322:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90005324:	68fb      	ldr	r3, [r7, #12]
90005326:	685b      	ldr	r3, [r3, #4]
90005328:	2b0a      	cmp	r3, #10
9000532a:	d003      	beq.n	90005334 <HAL_DMA2D_ConfigLayer+0xcc>
9000532c:	68fb      	ldr	r3, [r7, #12]
9000532e:	685b      	ldr	r3, [r3, #4]
90005330:	2b09      	cmp	r3, #9
90005332:	d135      	bne.n	900053a0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90005334:	68fb      	ldr	r3, [r7, #12]
90005336:	68da      	ldr	r2, [r3, #12]
90005338:	687b      	ldr	r3, [r7, #4]
9000533a:	681b      	ldr	r3, [r3, #0]
9000533c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90005340:	629a      	str	r2, [r3, #40]	@ 0x28
90005342:	e02d      	b.n	900053a0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90005344:	68fb      	ldr	r3, [r7, #12]
90005346:	685b      	ldr	r3, [r3, #4]
90005348:	2b0b      	cmp	r3, #11
9000534a:	d109      	bne.n	90005360 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
9000534c:	68fb      	ldr	r3, [r7, #12]
9000534e:	699b      	ldr	r3, [r3, #24]
90005350:	049b      	lsls	r3, r3, #18
90005352:	693a      	ldr	r2, [r7, #16]
90005354:	4313      	orrs	r3, r2
90005356:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90005358:	697b      	ldr	r3, [r7, #20]
9000535a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
9000535e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90005360:	687b      	ldr	r3, [r7, #4]
90005362:	681b      	ldr	r3, [r3, #0]
90005364:	69da      	ldr	r2, [r3, #28]
90005366:	697b      	ldr	r3, [r7, #20]
90005368:	43db      	mvns	r3, r3
9000536a:	ea02 0103 	and.w	r1, r2, r3
9000536e:	687b      	ldr	r3, [r7, #4]
90005370:	681b      	ldr	r3, [r3, #0]
90005372:	693a      	ldr	r2, [r7, #16]
90005374:	430a      	orrs	r2, r1
90005376:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90005378:	687b      	ldr	r3, [r7, #4]
9000537a:	681b      	ldr	r3, [r3, #0]
9000537c:	68fa      	ldr	r2, [r7, #12]
9000537e:	6812      	ldr	r2, [r2, #0]
90005380:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90005382:	68fb      	ldr	r3, [r7, #12]
90005384:	685b      	ldr	r3, [r3, #4]
90005386:	2b0a      	cmp	r3, #10
90005388:	d003      	beq.n	90005392 <HAL_DMA2D_ConfigLayer+0x12a>
9000538a:	68fb      	ldr	r3, [r7, #12]
9000538c:	685b      	ldr	r3, [r3, #4]
9000538e:	2b09      	cmp	r3, #9
90005390:	d106      	bne.n	900053a0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90005392:	68fb      	ldr	r3, [r7, #12]
90005394:	68da      	ldr	r2, [r3, #12]
90005396:	687b      	ldr	r3, [r7, #4]
90005398:	681b      	ldr	r3, [r3, #0]
9000539a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
9000539e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900053a0:	687b      	ldr	r3, [r7, #4]
900053a2:	2201      	movs	r2, #1
900053a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900053a8:	687b      	ldr	r3, [r7, #4]
900053aa:	2200      	movs	r2, #0
900053ac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900053b0:	2300      	movs	r3, #0
}
900053b2:	4618      	mov	r0, r3
900053b4:	371c      	adds	r7, #28
900053b6:	46bd      	mov	sp, r7
900053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900053bc:	4770      	bx	lr
900053be:	bf00      	nop
900053c0:	ff33000f 	.word	0xff33000f

900053c4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
900053c4:	b480      	push	{r7}
900053c6:	b08b      	sub	sp, #44	@ 0x2c
900053c8:	af00      	add	r7, sp, #0
900053ca:	60f8      	str	r0, [r7, #12]
900053cc:	60b9      	str	r1, [r7, #8]
900053ce:	607a      	str	r2, [r7, #4]
900053d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
900053d2:	68fb      	ldr	r3, [r7, #12]
900053d4:	681b      	ldr	r3, [r3, #0]
900053d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900053d8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
900053dc:	683b      	ldr	r3, [r7, #0]
900053de:	041a      	lsls	r2, r3, #16
900053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900053e2:	431a      	orrs	r2, r3
900053e4:	68fb      	ldr	r3, [r7, #12]
900053e6:	681b      	ldr	r3, [r3, #0]
900053e8:	430a      	orrs	r2, r1
900053ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
900053ec:	68fb      	ldr	r3, [r7, #12]
900053ee:	681b      	ldr	r3, [r3, #0]
900053f0:	687a      	ldr	r2, [r7, #4]
900053f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
900053f4:	68fb      	ldr	r3, [r7, #12]
900053f6:	685b      	ldr	r3, [r3, #4]
900053f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
900053fc:	d174      	bne.n	900054e8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
900053fe:	68bb      	ldr	r3, [r7, #8]
90005400:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90005404:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90005406:	68bb      	ldr	r3, [r7, #8]
90005408:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000540c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
9000540e:	68bb      	ldr	r3, [r7, #8]
90005410:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90005414:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90005416:	68bb      	ldr	r3, [r7, #8]
90005418:	b2db      	uxtb	r3, r3
9000541a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
9000541c:	68fb      	ldr	r3, [r7, #12]
9000541e:	689b      	ldr	r3, [r3, #8]
90005420:	2b00      	cmp	r3, #0
90005422:	d108      	bne.n	90005436 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90005424:	69ba      	ldr	r2, [r7, #24]
90005426:	69fb      	ldr	r3, [r7, #28]
90005428:	431a      	orrs	r2, r3
9000542a:	6a3b      	ldr	r3, [r7, #32]
9000542c:	4313      	orrs	r3, r2
9000542e:	697a      	ldr	r2, [r7, #20]
90005430:	4313      	orrs	r3, r2
90005432:	627b      	str	r3, [r7, #36]	@ 0x24
90005434:	e053      	b.n	900054de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90005436:	68fb      	ldr	r3, [r7, #12]
90005438:	689b      	ldr	r3, [r3, #8]
9000543a:	2b01      	cmp	r3, #1
9000543c:	d106      	bne.n	9000544c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
9000543e:	69ba      	ldr	r2, [r7, #24]
90005440:	69fb      	ldr	r3, [r7, #28]
90005442:	4313      	orrs	r3, r2
90005444:	697a      	ldr	r2, [r7, #20]
90005446:	4313      	orrs	r3, r2
90005448:	627b      	str	r3, [r7, #36]	@ 0x24
9000544a:	e048      	b.n	900054de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
9000544c:	68fb      	ldr	r3, [r7, #12]
9000544e:	689b      	ldr	r3, [r3, #8]
90005450:	2b02      	cmp	r3, #2
90005452:	d111      	bne.n	90005478 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90005454:	69fb      	ldr	r3, [r7, #28]
90005456:	0cdb      	lsrs	r3, r3, #19
90005458:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
9000545a:	69bb      	ldr	r3, [r7, #24]
9000545c:	0a9b      	lsrs	r3, r3, #10
9000545e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90005460:	697b      	ldr	r3, [r7, #20]
90005462:	08db      	lsrs	r3, r3, #3
90005464:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90005466:	69bb      	ldr	r3, [r7, #24]
90005468:	015a      	lsls	r2, r3, #5
9000546a:	69fb      	ldr	r3, [r7, #28]
9000546c:	02db      	lsls	r3, r3, #11
9000546e:	4313      	orrs	r3, r2
90005470:	697a      	ldr	r2, [r7, #20]
90005472:	4313      	orrs	r3, r2
90005474:	627b      	str	r3, [r7, #36]	@ 0x24
90005476:	e032      	b.n	900054de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90005478:	68fb      	ldr	r3, [r7, #12]
9000547a:	689b      	ldr	r3, [r3, #8]
9000547c:	2b03      	cmp	r3, #3
9000547e:	d117      	bne.n	900054b0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90005480:	6a3b      	ldr	r3, [r7, #32]
90005482:	0fdb      	lsrs	r3, r3, #31
90005484:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90005486:	69fb      	ldr	r3, [r7, #28]
90005488:	0cdb      	lsrs	r3, r3, #19
9000548a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
9000548c:	69bb      	ldr	r3, [r7, #24]
9000548e:	0adb      	lsrs	r3, r3, #11
90005490:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90005492:	697b      	ldr	r3, [r7, #20]
90005494:	08db      	lsrs	r3, r3, #3
90005496:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90005498:	69bb      	ldr	r3, [r7, #24]
9000549a:	015a      	lsls	r2, r3, #5
9000549c:	69fb      	ldr	r3, [r7, #28]
9000549e:	029b      	lsls	r3, r3, #10
900054a0:	431a      	orrs	r2, r3
900054a2:	6a3b      	ldr	r3, [r7, #32]
900054a4:	03db      	lsls	r3, r3, #15
900054a6:	4313      	orrs	r3, r2
900054a8:	697a      	ldr	r2, [r7, #20]
900054aa:	4313      	orrs	r3, r2
900054ac:	627b      	str	r3, [r7, #36]	@ 0x24
900054ae:	e016      	b.n	900054de <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
900054b0:	6a3b      	ldr	r3, [r7, #32]
900054b2:	0f1b      	lsrs	r3, r3, #28
900054b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
900054b6:	69fb      	ldr	r3, [r7, #28]
900054b8:	0d1b      	lsrs	r3, r3, #20
900054ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
900054bc:	69bb      	ldr	r3, [r7, #24]
900054be:	0b1b      	lsrs	r3, r3, #12
900054c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
900054c2:	697b      	ldr	r3, [r7, #20]
900054c4:	091b      	lsrs	r3, r3, #4
900054c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900054c8:	69bb      	ldr	r3, [r7, #24]
900054ca:	011a      	lsls	r2, r3, #4
900054cc:	69fb      	ldr	r3, [r7, #28]
900054ce:	021b      	lsls	r3, r3, #8
900054d0:	431a      	orrs	r2, r3
900054d2:	6a3b      	ldr	r3, [r7, #32]
900054d4:	031b      	lsls	r3, r3, #12
900054d6:	4313      	orrs	r3, r2
900054d8:	697a      	ldr	r2, [r7, #20]
900054da:	4313      	orrs	r3, r2
900054dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
900054de:	68fb      	ldr	r3, [r7, #12]
900054e0:	681b      	ldr	r3, [r3, #0]
900054e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900054e4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
900054e6:	e00d      	b.n	90005504 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
900054e8:	68fb      	ldr	r3, [r7, #12]
900054ea:	685b      	ldr	r3, [r3, #4]
900054ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900054f0:	d104      	bne.n	900054fc <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
900054f2:	68fb      	ldr	r3, [r7, #12]
900054f4:	681b      	ldr	r3, [r3, #0]
900054f6:	68ba      	ldr	r2, [r7, #8]
900054f8:	615a      	str	r2, [r3, #20]
}
900054fa:	e003      	b.n	90005504 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
900054fc:	68fb      	ldr	r3, [r7, #12]
900054fe:	681b      	ldr	r3, [r3, #0]
90005500:	68ba      	ldr	r2, [r7, #8]
90005502:	60da      	str	r2, [r3, #12]
}
90005504:	bf00      	nop
90005506:	372c      	adds	r7, #44	@ 0x2c
90005508:	46bd      	mov	sp, r7
9000550a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000550e:	4770      	bx	lr

90005510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90005510:	b480      	push	{r7}
90005512:	b089      	sub	sp, #36	@ 0x24
90005514:	af00      	add	r7, sp, #0
90005516:	6078      	str	r0, [r7, #4]
90005518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
9000551a:	2300      	movs	r3, #0
9000551c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
9000551e:	4b89      	ldr	r3, [pc, #548]	@ (90005744 <HAL_GPIO_Init+0x234>)
90005520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90005522:	e194      	b.n	9000584e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90005524:	683b      	ldr	r3, [r7, #0]
90005526:	681a      	ldr	r2, [r3, #0]
90005528:	2101      	movs	r1, #1
9000552a:	69fb      	ldr	r3, [r7, #28]
9000552c:	fa01 f303 	lsl.w	r3, r1, r3
90005530:	4013      	ands	r3, r2
90005532:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90005534:	693b      	ldr	r3, [r7, #16]
90005536:	2b00      	cmp	r3, #0
90005538:	f000 8186 	beq.w	90005848 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
9000553c:	683b      	ldr	r3, [r7, #0]
9000553e:	685b      	ldr	r3, [r3, #4]
90005540:	f003 0303 	and.w	r3, r3, #3
90005544:	2b01      	cmp	r3, #1
90005546:	d005      	beq.n	90005554 <HAL_GPIO_Init+0x44>
90005548:	683b      	ldr	r3, [r7, #0]
9000554a:	685b      	ldr	r3, [r3, #4]
9000554c:	f003 0303 	and.w	r3, r3, #3
90005550:	2b02      	cmp	r3, #2
90005552:	d130      	bne.n	900055b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90005554:	687b      	ldr	r3, [r7, #4]
90005556:	689b      	ldr	r3, [r3, #8]
90005558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000555a:	69fb      	ldr	r3, [r7, #28]
9000555c:	005b      	lsls	r3, r3, #1
9000555e:	2203      	movs	r2, #3
90005560:	fa02 f303 	lsl.w	r3, r2, r3
90005564:	43db      	mvns	r3, r3
90005566:	69ba      	ldr	r2, [r7, #24]
90005568:	4013      	ands	r3, r2
9000556a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
9000556c:	683b      	ldr	r3, [r7, #0]
9000556e:	68da      	ldr	r2, [r3, #12]
90005570:	69fb      	ldr	r3, [r7, #28]
90005572:	005b      	lsls	r3, r3, #1
90005574:	fa02 f303 	lsl.w	r3, r2, r3
90005578:	69ba      	ldr	r2, [r7, #24]
9000557a:	4313      	orrs	r3, r2
9000557c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
9000557e:	687b      	ldr	r3, [r7, #4]
90005580:	69ba      	ldr	r2, [r7, #24]
90005582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90005584:	687b      	ldr	r3, [r7, #4]
90005586:	685b      	ldr	r3, [r3, #4]
90005588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
9000558a:	2201      	movs	r2, #1
9000558c:	69fb      	ldr	r3, [r7, #28]
9000558e:	fa02 f303 	lsl.w	r3, r2, r3
90005592:	43db      	mvns	r3, r3
90005594:	69ba      	ldr	r2, [r7, #24]
90005596:	4013      	ands	r3, r2
90005598:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000559a:	683b      	ldr	r3, [r7, #0]
9000559c:	685b      	ldr	r3, [r3, #4]
9000559e:	091b      	lsrs	r3, r3, #4
900055a0:	f003 0201 	and.w	r2, r3, #1
900055a4:	69fb      	ldr	r3, [r7, #28]
900055a6:	fa02 f303 	lsl.w	r3, r2, r3
900055aa:	69ba      	ldr	r2, [r7, #24]
900055ac:	4313      	orrs	r3, r2
900055ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900055b0:	687b      	ldr	r3, [r7, #4]
900055b2:	69ba      	ldr	r2, [r7, #24]
900055b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900055b6:	683b      	ldr	r3, [r7, #0]
900055b8:	685b      	ldr	r3, [r3, #4]
900055ba:	f003 0303 	and.w	r3, r3, #3
900055be:	2b03      	cmp	r3, #3
900055c0:	d017      	beq.n	900055f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
900055c2:	687b      	ldr	r3, [r7, #4]
900055c4:	68db      	ldr	r3, [r3, #12]
900055c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900055c8:	69fb      	ldr	r3, [r7, #28]
900055ca:	005b      	lsls	r3, r3, #1
900055cc:	2203      	movs	r2, #3
900055ce:	fa02 f303 	lsl.w	r3, r2, r3
900055d2:	43db      	mvns	r3, r3
900055d4:	69ba      	ldr	r2, [r7, #24]
900055d6:	4013      	ands	r3, r2
900055d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
900055da:	683b      	ldr	r3, [r7, #0]
900055dc:	689a      	ldr	r2, [r3, #8]
900055de:	69fb      	ldr	r3, [r7, #28]
900055e0:	005b      	lsls	r3, r3, #1
900055e2:	fa02 f303 	lsl.w	r3, r2, r3
900055e6:	69ba      	ldr	r2, [r7, #24]
900055e8:	4313      	orrs	r3, r2
900055ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
900055ec:	687b      	ldr	r3, [r7, #4]
900055ee:	69ba      	ldr	r2, [r7, #24]
900055f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
900055f2:	683b      	ldr	r3, [r7, #0]
900055f4:	685b      	ldr	r3, [r3, #4]
900055f6:	f003 0303 	and.w	r3, r3, #3
900055fa:	2b02      	cmp	r3, #2
900055fc:	d123      	bne.n	90005646 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
900055fe:	69fb      	ldr	r3, [r7, #28]
90005600:	08da      	lsrs	r2, r3, #3
90005602:	687b      	ldr	r3, [r7, #4]
90005604:	3208      	adds	r2, #8
90005606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000560a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000560c:	69fb      	ldr	r3, [r7, #28]
9000560e:	f003 0307 	and.w	r3, r3, #7
90005612:	009b      	lsls	r3, r3, #2
90005614:	220f      	movs	r2, #15
90005616:	fa02 f303 	lsl.w	r3, r2, r3
9000561a:	43db      	mvns	r3, r3
9000561c:	69ba      	ldr	r2, [r7, #24]
9000561e:	4013      	ands	r3, r2
90005620:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90005622:	683b      	ldr	r3, [r7, #0]
90005624:	691a      	ldr	r2, [r3, #16]
90005626:	69fb      	ldr	r3, [r7, #28]
90005628:	f003 0307 	and.w	r3, r3, #7
9000562c:	009b      	lsls	r3, r3, #2
9000562e:	fa02 f303 	lsl.w	r3, r2, r3
90005632:	69ba      	ldr	r2, [r7, #24]
90005634:	4313      	orrs	r3, r2
90005636:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90005638:	69fb      	ldr	r3, [r7, #28]
9000563a:	08da      	lsrs	r2, r3, #3
9000563c:	687b      	ldr	r3, [r7, #4]
9000563e:	3208      	adds	r2, #8
90005640:	69b9      	ldr	r1, [r7, #24]
90005642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90005646:	687b      	ldr	r3, [r7, #4]
90005648:	681b      	ldr	r3, [r3, #0]
9000564a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
9000564c:	69fb      	ldr	r3, [r7, #28]
9000564e:	005b      	lsls	r3, r3, #1
90005650:	2203      	movs	r2, #3
90005652:	fa02 f303 	lsl.w	r3, r2, r3
90005656:	43db      	mvns	r3, r3
90005658:	69ba      	ldr	r2, [r7, #24]
9000565a:	4013      	ands	r3, r2
9000565c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
9000565e:	683b      	ldr	r3, [r7, #0]
90005660:	685b      	ldr	r3, [r3, #4]
90005662:	f003 0203 	and.w	r2, r3, #3
90005666:	69fb      	ldr	r3, [r7, #28]
90005668:	005b      	lsls	r3, r3, #1
9000566a:	fa02 f303 	lsl.w	r3, r2, r3
9000566e:	69ba      	ldr	r2, [r7, #24]
90005670:	4313      	orrs	r3, r2
90005672:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90005674:	687b      	ldr	r3, [r7, #4]
90005676:	69ba      	ldr	r2, [r7, #24]
90005678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
9000567a:	683b      	ldr	r3, [r7, #0]
9000567c:	685b      	ldr	r3, [r3, #4]
9000567e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90005682:	2b00      	cmp	r3, #0
90005684:	f000 80e0 	beq.w	90005848 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90005688:	4b2f      	ldr	r3, [pc, #188]	@ (90005748 <HAL_GPIO_Init+0x238>)
9000568a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
9000568e:	4a2e      	ldr	r2, [pc, #184]	@ (90005748 <HAL_GPIO_Init+0x238>)
90005690:	f043 0302 	orr.w	r3, r3, #2
90005694:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90005698:	4b2b      	ldr	r3, [pc, #172]	@ (90005748 <HAL_GPIO_Init+0x238>)
9000569a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
9000569e:	f003 0302 	and.w	r3, r3, #2
900056a2:	60fb      	str	r3, [r7, #12]
900056a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
900056a6:	4a29      	ldr	r2, [pc, #164]	@ (9000574c <HAL_GPIO_Init+0x23c>)
900056a8:	69fb      	ldr	r3, [r7, #28]
900056aa:	089b      	lsrs	r3, r3, #2
900056ac:	3302      	adds	r3, #2
900056ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900056b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900056b4:	69fb      	ldr	r3, [r7, #28]
900056b6:	f003 0303 	and.w	r3, r3, #3
900056ba:	009b      	lsls	r3, r3, #2
900056bc:	220f      	movs	r2, #15
900056be:	fa02 f303 	lsl.w	r3, r2, r3
900056c2:	43db      	mvns	r3, r3
900056c4:	69ba      	ldr	r2, [r7, #24]
900056c6:	4013      	ands	r3, r2
900056c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
900056ca:	687b      	ldr	r3, [r7, #4]
900056cc:	4a20      	ldr	r2, [pc, #128]	@ (90005750 <HAL_GPIO_Init+0x240>)
900056ce:	4293      	cmp	r3, r2
900056d0:	d052      	beq.n	90005778 <HAL_GPIO_Init+0x268>
900056d2:	687b      	ldr	r3, [r7, #4]
900056d4:	4a1f      	ldr	r2, [pc, #124]	@ (90005754 <HAL_GPIO_Init+0x244>)
900056d6:	4293      	cmp	r3, r2
900056d8:	d031      	beq.n	9000573e <HAL_GPIO_Init+0x22e>
900056da:	687b      	ldr	r3, [r7, #4]
900056dc:	4a1e      	ldr	r2, [pc, #120]	@ (90005758 <HAL_GPIO_Init+0x248>)
900056de:	4293      	cmp	r3, r2
900056e0:	d02b      	beq.n	9000573a <HAL_GPIO_Init+0x22a>
900056e2:	687b      	ldr	r3, [r7, #4]
900056e4:	4a1d      	ldr	r2, [pc, #116]	@ (9000575c <HAL_GPIO_Init+0x24c>)
900056e6:	4293      	cmp	r3, r2
900056e8:	d025      	beq.n	90005736 <HAL_GPIO_Init+0x226>
900056ea:	687b      	ldr	r3, [r7, #4]
900056ec:	4a1c      	ldr	r2, [pc, #112]	@ (90005760 <HAL_GPIO_Init+0x250>)
900056ee:	4293      	cmp	r3, r2
900056f0:	d01f      	beq.n	90005732 <HAL_GPIO_Init+0x222>
900056f2:	687b      	ldr	r3, [r7, #4]
900056f4:	4a1b      	ldr	r2, [pc, #108]	@ (90005764 <HAL_GPIO_Init+0x254>)
900056f6:	4293      	cmp	r3, r2
900056f8:	d019      	beq.n	9000572e <HAL_GPIO_Init+0x21e>
900056fa:	687b      	ldr	r3, [r7, #4]
900056fc:	4a1a      	ldr	r2, [pc, #104]	@ (90005768 <HAL_GPIO_Init+0x258>)
900056fe:	4293      	cmp	r3, r2
90005700:	d013      	beq.n	9000572a <HAL_GPIO_Init+0x21a>
90005702:	687b      	ldr	r3, [r7, #4]
90005704:	4a19      	ldr	r2, [pc, #100]	@ (9000576c <HAL_GPIO_Init+0x25c>)
90005706:	4293      	cmp	r3, r2
90005708:	d00d      	beq.n	90005726 <HAL_GPIO_Init+0x216>
9000570a:	687b      	ldr	r3, [r7, #4]
9000570c:	4a18      	ldr	r2, [pc, #96]	@ (90005770 <HAL_GPIO_Init+0x260>)
9000570e:	4293      	cmp	r3, r2
90005710:	d007      	beq.n	90005722 <HAL_GPIO_Init+0x212>
90005712:	687b      	ldr	r3, [r7, #4]
90005714:	4a17      	ldr	r2, [pc, #92]	@ (90005774 <HAL_GPIO_Init+0x264>)
90005716:	4293      	cmp	r3, r2
90005718:	d101      	bne.n	9000571e <HAL_GPIO_Init+0x20e>
9000571a:	2309      	movs	r3, #9
9000571c:	e02d      	b.n	9000577a <HAL_GPIO_Init+0x26a>
9000571e:	230a      	movs	r3, #10
90005720:	e02b      	b.n	9000577a <HAL_GPIO_Init+0x26a>
90005722:	2308      	movs	r3, #8
90005724:	e029      	b.n	9000577a <HAL_GPIO_Init+0x26a>
90005726:	2307      	movs	r3, #7
90005728:	e027      	b.n	9000577a <HAL_GPIO_Init+0x26a>
9000572a:	2306      	movs	r3, #6
9000572c:	e025      	b.n	9000577a <HAL_GPIO_Init+0x26a>
9000572e:	2305      	movs	r3, #5
90005730:	e023      	b.n	9000577a <HAL_GPIO_Init+0x26a>
90005732:	2304      	movs	r3, #4
90005734:	e021      	b.n	9000577a <HAL_GPIO_Init+0x26a>
90005736:	2303      	movs	r3, #3
90005738:	e01f      	b.n	9000577a <HAL_GPIO_Init+0x26a>
9000573a:	2302      	movs	r3, #2
9000573c:	e01d      	b.n	9000577a <HAL_GPIO_Init+0x26a>
9000573e:	2301      	movs	r3, #1
90005740:	e01b      	b.n	9000577a <HAL_GPIO_Init+0x26a>
90005742:	bf00      	nop
90005744:	58000080 	.word	0x58000080
90005748:	58024400 	.word	0x58024400
9000574c:	58000400 	.word	0x58000400
90005750:	58020000 	.word	0x58020000
90005754:	58020400 	.word	0x58020400
90005758:	58020800 	.word	0x58020800
9000575c:	58020c00 	.word	0x58020c00
90005760:	58021000 	.word	0x58021000
90005764:	58021400 	.word	0x58021400
90005768:	58021800 	.word	0x58021800
9000576c:	58021c00 	.word	0x58021c00
90005770:	58022000 	.word	0x58022000
90005774:	58022400 	.word	0x58022400
90005778:	2300      	movs	r3, #0
9000577a:	69fa      	ldr	r2, [r7, #28]
9000577c:	f002 0203 	and.w	r2, r2, #3
90005780:	0092      	lsls	r2, r2, #2
90005782:	4093      	lsls	r3, r2
90005784:	69ba      	ldr	r2, [r7, #24]
90005786:	4313      	orrs	r3, r2
90005788:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
9000578a:	4938      	ldr	r1, [pc, #224]	@ (9000586c <HAL_GPIO_Init+0x35c>)
9000578c:	69fb      	ldr	r3, [r7, #28]
9000578e:	089b      	lsrs	r3, r3, #2
90005790:	3302      	adds	r3, #2
90005792:	69ba      	ldr	r2, [r7, #24]
90005794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90005798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
9000579c:	681b      	ldr	r3, [r3, #0]
9000579e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900057a0:	693b      	ldr	r3, [r7, #16]
900057a2:	43db      	mvns	r3, r3
900057a4:	69ba      	ldr	r2, [r7, #24]
900057a6:	4013      	ands	r3, r2
900057a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
900057aa:	683b      	ldr	r3, [r7, #0]
900057ac:	685b      	ldr	r3, [r3, #4]
900057ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
900057b2:	2b00      	cmp	r3, #0
900057b4:	d003      	beq.n	900057be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
900057b6:	69ba      	ldr	r2, [r7, #24]
900057b8:	693b      	ldr	r3, [r7, #16]
900057ba:	4313      	orrs	r3, r2
900057bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
900057be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
900057c2:	69bb      	ldr	r3, [r7, #24]
900057c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
900057c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
900057ca:	685b      	ldr	r3, [r3, #4]
900057cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900057ce:	693b      	ldr	r3, [r7, #16]
900057d0:	43db      	mvns	r3, r3
900057d2:	69ba      	ldr	r2, [r7, #24]
900057d4:	4013      	ands	r3, r2
900057d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
900057d8:	683b      	ldr	r3, [r7, #0]
900057da:	685b      	ldr	r3, [r3, #4]
900057dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
900057e0:	2b00      	cmp	r3, #0
900057e2:	d003      	beq.n	900057ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
900057e4:	69ba      	ldr	r2, [r7, #24]
900057e6:	693b      	ldr	r3, [r7, #16]
900057e8:	4313      	orrs	r3, r2
900057ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
900057ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
900057f0:	69bb      	ldr	r3, [r7, #24]
900057f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
900057f4:	697b      	ldr	r3, [r7, #20]
900057f6:	685b      	ldr	r3, [r3, #4]
900057f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900057fa:	693b      	ldr	r3, [r7, #16]
900057fc:	43db      	mvns	r3, r3
900057fe:	69ba      	ldr	r2, [r7, #24]
90005800:	4013      	ands	r3, r2
90005802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90005804:	683b      	ldr	r3, [r7, #0]
90005806:	685b      	ldr	r3, [r3, #4]
90005808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000580c:	2b00      	cmp	r3, #0
9000580e:	d003      	beq.n	90005818 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90005810:	69ba      	ldr	r2, [r7, #24]
90005812:	693b      	ldr	r3, [r7, #16]
90005814:	4313      	orrs	r3, r2
90005816:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90005818:	697b      	ldr	r3, [r7, #20]
9000581a:	69ba      	ldr	r2, [r7, #24]
9000581c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
9000581e:	697b      	ldr	r3, [r7, #20]
90005820:	681b      	ldr	r3, [r3, #0]
90005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90005824:	693b      	ldr	r3, [r7, #16]
90005826:	43db      	mvns	r3, r3
90005828:	69ba      	ldr	r2, [r7, #24]
9000582a:	4013      	ands	r3, r2
9000582c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
9000582e:	683b      	ldr	r3, [r7, #0]
90005830:	685b      	ldr	r3, [r3, #4]
90005832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90005836:	2b00      	cmp	r3, #0
90005838:	d003      	beq.n	90005842 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
9000583a:	69ba      	ldr	r2, [r7, #24]
9000583c:	693b      	ldr	r3, [r7, #16]
9000583e:	4313      	orrs	r3, r2
90005840:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90005842:	697b      	ldr	r3, [r7, #20]
90005844:	69ba      	ldr	r2, [r7, #24]
90005846:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90005848:	69fb      	ldr	r3, [r7, #28]
9000584a:	3301      	adds	r3, #1
9000584c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000584e:	683b      	ldr	r3, [r7, #0]
90005850:	681a      	ldr	r2, [r3, #0]
90005852:	69fb      	ldr	r3, [r7, #28]
90005854:	fa22 f303 	lsr.w	r3, r2, r3
90005858:	2b00      	cmp	r3, #0
9000585a:	f47f ae63 	bne.w	90005524 <HAL_GPIO_Init+0x14>
  }
}
9000585e:	bf00      	nop
90005860:	bf00      	nop
90005862:	3724      	adds	r7, #36	@ 0x24
90005864:	46bd      	mov	sp, r7
90005866:	f85d 7b04 	ldr.w	r7, [sp], #4
9000586a:	4770      	bx	lr
9000586c:	58000400 	.word	0x58000400

90005870 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
90005870:	b480      	push	{r7}
90005872:	b087      	sub	sp, #28
90005874:	af00      	add	r7, sp, #0
90005876:	6078      	str	r0, [r7, #4]
90005878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
9000587a:	2300      	movs	r3, #0
9000587c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
9000587e:	4b75      	ldr	r3, [pc, #468]	@ (90005a54 <HAL_GPIO_DeInit+0x1e4>)
90005880:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90005882:	e0d9      	b.n	90005a38 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
90005884:	2201      	movs	r2, #1
90005886:	697b      	ldr	r3, [r7, #20]
90005888:	fa02 f303 	lsl.w	r3, r2, r3
9000588c:	683a      	ldr	r2, [r7, #0]
9000588e:	4013      	ands	r3, r2
90005890:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
90005892:	68fb      	ldr	r3, [r7, #12]
90005894:	2b00      	cmp	r3, #0
90005896:	f000 80cc 	beq.w	90005a32 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
9000589a:	4a6f      	ldr	r2, [pc, #444]	@ (90005a58 <HAL_GPIO_DeInit+0x1e8>)
9000589c:	697b      	ldr	r3, [r7, #20]
9000589e:	089b      	lsrs	r3, r3, #2
900058a0:	3302      	adds	r3, #2
900058a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900058a6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
900058a8:	697b      	ldr	r3, [r7, #20]
900058aa:	f003 0303 	and.w	r3, r3, #3
900058ae:	009b      	lsls	r3, r3, #2
900058b0:	220f      	movs	r2, #15
900058b2:	fa02 f303 	lsl.w	r3, r2, r3
900058b6:	68ba      	ldr	r2, [r7, #8]
900058b8:	4013      	ands	r3, r2
900058ba:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900058bc:	687b      	ldr	r3, [r7, #4]
900058be:	4a67      	ldr	r2, [pc, #412]	@ (90005a5c <HAL_GPIO_DeInit+0x1ec>)
900058c0:	4293      	cmp	r3, r2
900058c2:	d037      	beq.n	90005934 <HAL_GPIO_DeInit+0xc4>
900058c4:	687b      	ldr	r3, [r7, #4]
900058c6:	4a66      	ldr	r2, [pc, #408]	@ (90005a60 <HAL_GPIO_DeInit+0x1f0>)
900058c8:	4293      	cmp	r3, r2
900058ca:	d031      	beq.n	90005930 <HAL_GPIO_DeInit+0xc0>
900058cc:	687b      	ldr	r3, [r7, #4]
900058ce:	4a65      	ldr	r2, [pc, #404]	@ (90005a64 <HAL_GPIO_DeInit+0x1f4>)
900058d0:	4293      	cmp	r3, r2
900058d2:	d02b      	beq.n	9000592c <HAL_GPIO_DeInit+0xbc>
900058d4:	687b      	ldr	r3, [r7, #4]
900058d6:	4a64      	ldr	r2, [pc, #400]	@ (90005a68 <HAL_GPIO_DeInit+0x1f8>)
900058d8:	4293      	cmp	r3, r2
900058da:	d025      	beq.n	90005928 <HAL_GPIO_DeInit+0xb8>
900058dc:	687b      	ldr	r3, [r7, #4]
900058de:	4a63      	ldr	r2, [pc, #396]	@ (90005a6c <HAL_GPIO_DeInit+0x1fc>)
900058e0:	4293      	cmp	r3, r2
900058e2:	d01f      	beq.n	90005924 <HAL_GPIO_DeInit+0xb4>
900058e4:	687b      	ldr	r3, [r7, #4]
900058e6:	4a62      	ldr	r2, [pc, #392]	@ (90005a70 <HAL_GPIO_DeInit+0x200>)
900058e8:	4293      	cmp	r3, r2
900058ea:	d019      	beq.n	90005920 <HAL_GPIO_DeInit+0xb0>
900058ec:	687b      	ldr	r3, [r7, #4]
900058ee:	4a61      	ldr	r2, [pc, #388]	@ (90005a74 <HAL_GPIO_DeInit+0x204>)
900058f0:	4293      	cmp	r3, r2
900058f2:	d013      	beq.n	9000591c <HAL_GPIO_DeInit+0xac>
900058f4:	687b      	ldr	r3, [r7, #4]
900058f6:	4a60      	ldr	r2, [pc, #384]	@ (90005a78 <HAL_GPIO_DeInit+0x208>)
900058f8:	4293      	cmp	r3, r2
900058fa:	d00d      	beq.n	90005918 <HAL_GPIO_DeInit+0xa8>
900058fc:	687b      	ldr	r3, [r7, #4]
900058fe:	4a5f      	ldr	r2, [pc, #380]	@ (90005a7c <HAL_GPIO_DeInit+0x20c>)
90005900:	4293      	cmp	r3, r2
90005902:	d007      	beq.n	90005914 <HAL_GPIO_DeInit+0xa4>
90005904:	687b      	ldr	r3, [r7, #4]
90005906:	4a5e      	ldr	r2, [pc, #376]	@ (90005a80 <HAL_GPIO_DeInit+0x210>)
90005908:	4293      	cmp	r3, r2
9000590a:	d101      	bne.n	90005910 <HAL_GPIO_DeInit+0xa0>
9000590c:	2309      	movs	r3, #9
9000590e:	e012      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
90005910:	230a      	movs	r3, #10
90005912:	e010      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
90005914:	2308      	movs	r3, #8
90005916:	e00e      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
90005918:	2307      	movs	r3, #7
9000591a:	e00c      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
9000591c:	2306      	movs	r3, #6
9000591e:	e00a      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
90005920:	2305      	movs	r3, #5
90005922:	e008      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
90005924:	2304      	movs	r3, #4
90005926:	e006      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
90005928:	2303      	movs	r3, #3
9000592a:	e004      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
9000592c:	2302      	movs	r3, #2
9000592e:	e002      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
90005930:	2301      	movs	r3, #1
90005932:	e000      	b.n	90005936 <HAL_GPIO_DeInit+0xc6>
90005934:	2300      	movs	r3, #0
90005936:	697a      	ldr	r2, [r7, #20]
90005938:	f002 0203 	and.w	r2, r2, #3
9000593c:	0092      	lsls	r2, r2, #2
9000593e:	4093      	lsls	r3, r2
90005940:	68ba      	ldr	r2, [r7, #8]
90005942:	429a      	cmp	r2, r3
90005944:	d136      	bne.n	900059b4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90005946:	693b      	ldr	r3, [r7, #16]
90005948:	681a      	ldr	r2, [r3, #0]
9000594a:	68fb      	ldr	r3, [r7, #12]
9000594c:	43db      	mvns	r3, r3
9000594e:	401a      	ands	r2, r3
90005950:	693b      	ldr	r3, [r7, #16]
90005952:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90005954:	693b      	ldr	r3, [r7, #16]
90005956:	685a      	ldr	r2, [r3, #4]
90005958:	68fb      	ldr	r3, [r7, #12]
9000595a:	43db      	mvns	r3, r3
9000595c:	401a      	ands	r2, r3
9000595e:	693b      	ldr	r3, [r7, #16]
90005960:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90005962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90005966:	685a      	ldr	r2, [r3, #4]
90005968:	68fb      	ldr	r3, [r7, #12]
9000596a:	43db      	mvns	r3, r3
9000596c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
90005970:	4013      	ands	r3, r2
90005972:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90005974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90005978:	681a      	ldr	r2, [r3, #0]
9000597a:	68fb      	ldr	r3, [r7, #12]
9000597c:	43db      	mvns	r3, r3
9000597e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
90005982:	4013      	ands	r3, r2
90005984:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
90005986:	697b      	ldr	r3, [r7, #20]
90005988:	f003 0303 	and.w	r3, r3, #3
9000598c:	009b      	lsls	r3, r3, #2
9000598e:	220f      	movs	r2, #15
90005990:	fa02 f303 	lsl.w	r3, r2, r3
90005994:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90005996:	4a30      	ldr	r2, [pc, #192]	@ (90005a58 <HAL_GPIO_DeInit+0x1e8>)
90005998:	697b      	ldr	r3, [r7, #20]
9000599a:	089b      	lsrs	r3, r3, #2
9000599c:	3302      	adds	r3, #2
9000599e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
900059a2:	68bb      	ldr	r3, [r7, #8]
900059a4:	43da      	mvns	r2, r3
900059a6:	482c      	ldr	r0, [pc, #176]	@ (90005a58 <HAL_GPIO_DeInit+0x1e8>)
900059a8:	697b      	ldr	r3, [r7, #20]
900059aa:	089b      	lsrs	r3, r3, #2
900059ac:	400a      	ands	r2, r1
900059ae:	3302      	adds	r3, #2
900059b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900059b4:	687b      	ldr	r3, [r7, #4]
900059b6:	681a      	ldr	r2, [r3, #0]
900059b8:	697b      	ldr	r3, [r7, #20]
900059ba:	005b      	lsls	r3, r3, #1
900059bc:	2103      	movs	r1, #3
900059be:	fa01 f303 	lsl.w	r3, r1, r3
900059c2:	431a      	orrs	r2, r3
900059c4:	687b      	ldr	r3, [r7, #4]
900059c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900059c8:	697b      	ldr	r3, [r7, #20]
900059ca:	08da      	lsrs	r2, r3, #3
900059cc:	687b      	ldr	r3, [r7, #4]
900059ce:	3208      	adds	r2, #8
900059d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
900059d4:	697b      	ldr	r3, [r7, #20]
900059d6:	f003 0307 	and.w	r3, r3, #7
900059da:	009b      	lsls	r3, r3, #2
900059dc:	220f      	movs	r2, #15
900059de:	fa02 f303 	lsl.w	r3, r2, r3
900059e2:	43db      	mvns	r3, r3
900059e4:	697a      	ldr	r2, [r7, #20]
900059e6:	08d2      	lsrs	r2, r2, #3
900059e8:	4019      	ands	r1, r3
900059ea:	687b      	ldr	r3, [r7, #4]
900059ec:	3208      	adds	r2, #8
900059ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900059f2:	687b      	ldr	r3, [r7, #4]
900059f4:	68da      	ldr	r2, [r3, #12]
900059f6:	697b      	ldr	r3, [r7, #20]
900059f8:	005b      	lsls	r3, r3, #1
900059fa:	2103      	movs	r1, #3
900059fc:	fa01 f303 	lsl.w	r3, r1, r3
90005a00:	43db      	mvns	r3, r3
90005a02:	401a      	ands	r2, r3
90005a04:	687b      	ldr	r3, [r7, #4]
90005a06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90005a08:	687b      	ldr	r3, [r7, #4]
90005a0a:	685a      	ldr	r2, [r3, #4]
90005a0c:	2101      	movs	r1, #1
90005a0e:	697b      	ldr	r3, [r7, #20]
90005a10:	fa01 f303 	lsl.w	r3, r1, r3
90005a14:	43db      	mvns	r3, r3
90005a16:	401a      	ands	r2, r3
90005a18:	687b      	ldr	r3, [r7, #4]
90005a1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90005a1c:	687b      	ldr	r3, [r7, #4]
90005a1e:	689a      	ldr	r2, [r3, #8]
90005a20:	697b      	ldr	r3, [r7, #20]
90005a22:	005b      	lsls	r3, r3, #1
90005a24:	2103      	movs	r1, #3
90005a26:	fa01 f303 	lsl.w	r3, r1, r3
90005a2a:	43db      	mvns	r3, r3
90005a2c:	401a      	ands	r2, r3
90005a2e:	687b      	ldr	r3, [r7, #4]
90005a30:	609a      	str	r2, [r3, #8]
    }

    position++;
90005a32:	697b      	ldr	r3, [r7, #20]
90005a34:	3301      	adds	r3, #1
90005a36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
90005a38:	683a      	ldr	r2, [r7, #0]
90005a3a:	697b      	ldr	r3, [r7, #20]
90005a3c:	fa22 f303 	lsr.w	r3, r2, r3
90005a40:	2b00      	cmp	r3, #0
90005a42:	f47f af1f 	bne.w	90005884 <HAL_GPIO_DeInit+0x14>
  }
}
90005a46:	bf00      	nop
90005a48:	bf00      	nop
90005a4a:	371c      	adds	r7, #28
90005a4c:	46bd      	mov	sp, r7
90005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a52:	4770      	bx	lr
90005a54:	58000080 	.word	0x58000080
90005a58:	58000400 	.word	0x58000400
90005a5c:	58020000 	.word	0x58020000
90005a60:	58020400 	.word	0x58020400
90005a64:	58020800 	.word	0x58020800
90005a68:	58020c00 	.word	0x58020c00
90005a6c:	58021000 	.word	0x58021000
90005a70:	58021400 	.word	0x58021400
90005a74:	58021800 	.word	0x58021800
90005a78:	58021c00 	.word	0x58021c00
90005a7c:	58022000 	.word	0x58022000
90005a80:	58022400 	.word	0x58022400

90005a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90005a84:	b480      	push	{r7}
90005a86:	b083      	sub	sp, #12
90005a88:	af00      	add	r7, sp, #0
90005a8a:	6078      	str	r0, [r7, #4]
90005a8c:	460b      	mov	r3, r1
90005a8e:	807b      	strh	r3, [r7, #2]
90005a90:	4613      	mov	r3, r2
90005a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90005a94:	787b      	ldrb	r3, [r7, #1]
90005a96:	2b00      	cmp	r3, #0
90005a98:	d003      	beq.n	90005aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90005a9a:	887a      	ldrh	r2, [r7, #2]
90005a9c:	687b      	ldr	r3, [r7, #4]
90005a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90005aa0:	e003      	b.n	90005aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90005aa2:	887b      	ldrh	r3, [r7, #2]
90005aa4:	041a      	lsls	r2, r3, #16
90005aa6:	687b      	ldr	r3, [r7, #4]
90005aa8:	619a      	str	r2, [r3, #24]
}
90005aaa:	bf00      	nop
90005aac:	370c      	adds	r7, #12
90005aae:	46bd      	mov	sp, r7
90005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
90005ab4:	4770      	bx	lr

90005ab6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
90005ab6:	b580      	push	{r7, lr}
90005ab8:	b084      	sub	sp, #16
90005aba:	af02      	add	r7, sp, #8
90005abc:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
90005abe:	687b      	ldr	r3, [r7, #4]
90005ac0:	2b00      	cmp	r3, #0
90005ac2:	d101      	bne.n	90005ac8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
90005ac4:	2301      	movs	r3, #1
90005ac6:	e04f      	b.n	90005b68 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
90005ac8:	687b      	ldr	r3, [r7, #4]
90005aca:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
90005ace:	b2db      	uxtb	r3, r3
90005ad0:	2b00      	cmp	r3, #0
90005ad2:	d106      	bne.n	90005ae2 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
90005ad4:	687b      	ldr	r3, [r7, #4]
90005ad6:	2200      	movs	r2, #0
90005ad8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
90005adc:	6878      	ldr	r0, [r7, #4]
90005ade:	f7fb fe1d 	bl	9000171c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
90005ae2:	687b      	ldr	r3, [r7, #4]
90005ae4:	2203      	movs	r2, #3
90005ae6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
90005aea:	687b      	ldr	r3, [r7, #4]
90005aec:	681b      	ldr	r3, [r3, #0]
90005aee:	4618      	mov	r0, r3
90005af0:	f006 faf3 	bl	9000c0da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
90005af4:	687b      	ldr	r3, [r7, #4]
90005af6:	6818      	ldr	r0, [r3, #0]
90005af8:	687b      	ldr	r3, [r7, #4]
90005afa:	7c1a      	ldrb	r2, [r3, #16]
90005afc:	f88d 2000 	strb.w	r2, [sp]
90005b00:	3304      	adds	r3, #4
90005b02:	cb0e      	ldmia	r3, {r1, r2, r3}
90005b04:	f006 fa66 	bl	9000bfd4 <USB_CoreInit>
90005b08:	4603      	mov	r3, r0
90005b0a:	2b00      	cmp	r3, #0
90005b0c:	d005      	beq.n	90005b1a <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
90005b0e:	687b      	ldr	r3, [r7, #4]
90005b10:	2202      	movs	r2, #2
90005b12:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
90005b16:	2301      	movs	r3, #1
90005b18:	e026      	b.n	90005b68 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
90005b1a:	687b      	ldr	r3, [r7, #4]
90005b1c:	681b      	ldr	r3, [r3, #0]
90005b1e:	2101      	movs	r1, #1
90005b20:	4618      	mov	r0, r3
90005b22:	f006 faeb 	bl	9000c0fc <USB_SetCurrentMode>
90005b26:	4603      	mov	r3, r0
90005b28:	2b00      	cmp	r3, #0
90005b2a:	d005      	beq.n	90005b38 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
90005b2c:	687b      	ldr	r3, [r7, #4]
90005b2e:	2202      	movs	r2, #2
90005b30:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
90005b34:	2301      	movs	r3, #1
90005b36:	e017      	b.n	90005b68 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
90005b38:	687b      	ldr	r3, [r7, #4]
90005b3a:	6818      	ldr	r0, [r3, #0]
90005b3c:	687b      	ldr	r3, [r7, #4]
90005b3e:	7c1a      	ldrb	r2, [r3, #16]
90005b40:	f88d 2000 	strb.w	r2, [sp]
90005b44:	3304      	adds	r3, #4
90005b46:	cb0e      	ldmia	r3, {r1, r2, r3}
90005b48:	f006 fc8e 	bl	9000c468 <USB_HostInit>
90005b4c:	4603      	mov	r3, r0
90005b4e:	2b00      	cmp	r3, #0
90005b50:	d005      	beq.n	90005b5e <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
90005b52:	687b      	ldr	r3, [r7, #4]
90005b54:	2202      	movs	r2, #2
90005b56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
90005b5a:	2301      	movs	r3, #1
90005b5c:	e004      	b.n	90005b68 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
90005b5e:	687b      	ldr	r3, [r7, #4]
90005b60:	2201      	movs	r2, #1
90005b62:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
90005b66:	2300      	movs	r3, #0
}
90005b68:	4618      	mov	r0, r3
90005b6a:	3708      	adds	r7, #8
90005b6c:	46bd      	mov	sp, r7
90005b6e:	bd80      	pop	{r7, pc}

90005b70 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
90005b70:	b590      	push	{r4, r7, lr}
90005b72:	b08b      	sub	sp, #44	@ 0x2c
90005b74:	af04      	add	r7, sp, #16
90005b76:	6078      	str	r0, [r7, #4]
90005b78:	4608      	mov	r0, r1
90005b7a:	4611      	mov	r1, r2
90005b7c:	461a      	mov	r2, r3
90005b7e:	4603      	mov	r3, r0
90005b80:	70fb      	strb	r3, [r7, #3]
90005b82:	460b      	mov	r3, r1
90005b84:	70bb      	strb	r3, [r7, #2]
90005b86:	4613      	mov	r3, r2
90005b88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
90005b8a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
90005b8c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
90005b8e:	687b      	ldr	r3, [r7, #4]
90005b90:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90005b94:	2b01      	cmp	r3, #1
90005b96:	d101      	bne.n	90005b9c <HAL_HCD_HC_Init+0x2c>
90005b98:	2302      	movs	r3, #2
90005b9a:	e09d      	b.n	90005cd8 <HAL_HCD_HC_Init+0x168>
90005b9c:	687b      	ldr	r3, [r7, #4]
90005b9e:	2201      	movs	r2, #1
90005ba0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
90005ba4:	78fa      	ldrb	r2, [r7, #3]
90005ba6:	6879      	ldr	r1, [r7, #4]
90005ba8:	4613      	mov	r3, r2
90005baa:	011b      	lsls	r3, r3, #4
90005bac:	1a9b      	subs	r3, r3, r2
90005bae:	009b      	lsls	r3, r3, #2
90005bb0:	440b      	add	r3, r1
90005bb2:	3319      	adds	r3, #25
90005bb4:	2200      	movs	r2, #0
90005bb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
90005bb8:	78fa      	ldrb	r2, [r7, #3]
90005bba:	6879      	ldr	r1, [r7, #4]
90005bbc:	4613      	mov	r3, r2
90005bbe:	011b      	lsls	r3, r3, #4
90005bc0:	1a9b      	subs	r3, r3, r2
90005bc2:	009b      	lsls	r3, r3, #2
90005bc4:	440b      	add	r3, r1
90005bc6:	3314      	adds	r3, #20
90005bc8:	787a      	ldrb	r2, [r7, #1]
90005bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
90005bcc:	78fa      	ldrb	r2, [r7, #3]
90005bce:	6879      	ldr	r1, [r7, #4]
90005bd0:	4613      	mov	r3, r2
90005bd2:	011b      	lsls	r3, r3, #4
90005bd4:	1a9b      	subs	r3, r3, r2
90005bd6:	009b      	lsls	r3, r3, #2
90005bd8:	440b      	add	r3, r1
90005bda:	3315      	adds	r3, #21
90005bdc:	78fa      	ldrb	r2, [r7, #3]
90005bde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
90005be0:	78fa      	ldrb	r2, [r7, #3]
90005be2:	6879      	ldr	r1, [r7, #4]
90005be4:	4613      	mov	r3, r2
90005be6:	011b      	lsls	r3, r3, #4
90005be8:	1a9b      	subs	r3, r3, r2
90005bea:	009b      	lsls	r3, r3, #2
90005bec:	440b      	add	r3, r1
90005bee:	3326      	adds	r3, #38	@ 0x26
90005bf0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
90005bf4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
90005bf6:	78fa      	ldrb	r2, [r7, #3]
90005bf8:	78bb      	ldrb	r3, [r7, #2]
90005bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90005bfe:	b2d8      	uxtb	r0, r3
90005c00:	6879      	ldr	r1, [r7, #4]
90005c02:	4613      	mov	r3, r2
90005c04:	011b      	lsls	r3, r3, #4
90005c06:	1a9b      	subs	r3, r3, r2
90005c08:	009b      	lsls	r3, r3, #2
90005c0a:	440b      	add	r3, r1
90005c0c:	3316      	adds	r3, #22
90005c0e:	4602      	mov	r2, r0
90005c10:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
90005c12:	78fb      	ldrb	r3, [r7, #3]
90005c14:	4619      	mov	r1, r3
90005c16:	6878      	ldr	r0, [r7, #4]
90005c18:	f000 fbc8 	bl	900063ac <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
90005c1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
90005c20:	2b00      	cmp	r3, #0
90005c22:	da0a      	bge.n	90005c3a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
90005c24:	78fa      	ldrb	r2, [r7, #3]
90005c26:	6879      	ldr	r1, [r7, #4]
90005c28:	4613      	mov	r3, r2
90005c2a:	011b      	lsls	r3, r3, #4
90005c2c:	1a9b      	subs	r3, r3, r2
90005c2e:	009b      	lsls	r3, r3, #2
90005c30:	440b      	add	r3, r1
90005c32:	3317      	adds	r3, #23
90005c34:	2201      	movs	r2, #1
90005c36:	701a      	strb	r2, [r3, #0]
90005c38:	e009      	b.n	90005c4e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
90005c3a:	78fa      	ldrb	r2, [r7, #3]
90005c3c:	6879      	ldr	r1, [r7, #4]
90005c3e:	4613      	mov	r3, r2
90005c40:	011b      	lsls	r3, r3, #4
90005c42:	1a9b      	subs	r3, r3, r2
90005c44:	009b      	lsls	r3, r3, #2
90005c46:	440b      	add	r3, r1
90005c48:	3317      	adds	r3, #23
90005c4a:	2200      	movs	r2, #0
90005c4c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
90005c4e:	687b      	ldr	r3, [r7, #4]
90005c50:	681b      	ldr	r3, [r3, #0]
90005c52:	4618      	mov	r0, r3
90005c54:	f006 fd52 	bl	9000c6fc <USB_GetHostSpeed>
90005c58:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
90005c5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
90005c5e:	2b01      	cmp	r3, #1
90005c60:	d10b      	bne.n	90005c7a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
90005c62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
90005c66:	2b01      	cmp	r3, #1
90005c68:	d107      	bne.n	90005c7a <HAL_HCD_HC_Init+0x10a>
90005c6a:	693b      	ldr	r3, [r7, #16]
90005c6c:	2b00      	cmp	r3, #0
90005c6e:	d104      	bne.n	90005c7a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
90005c70:	697b      	ldr	r3, [r7, #20]
90005c72:	2bbc      	cmp	r3, #188	@ 0xbc
90005c74:	d901      	bls.n	90005c7a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
90005c76:	23bc      	movs	r3, #188	@ 0xbc
90005c78:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
90005c7a:	78fa      	ldrb	r2, [r7, #3]
90005c7c:	6879      	ldr	r1, [r7, #4]
90005c7e:	4613      	mov	r3, r2
90005c80:	011b      	lsls	r3, r3, #4
90005c82:	1a9b      	subs	r3, r3, r2
90005c84:	009b      	lsls	r3, r3, #2
90005c86:	440b      	add	r3, r1
90005c88:	3318      	adds	r3, #24
90005c8a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
90005c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
90005c90:	78fa      	ldrb	r2, [r7, #3]
90005c92:	697b      	ldr	r3, [r7, #20]
90005c94:	b298      	uxth	r0, r3
90005c96:	6879      	ldr	r1, [r7, #4]
90005c98:	4613      	mov	r3, r2
90005c9a:	011b      	lsls	r3, r3, #4
90005c9c:	1a9b      	subs	r3, r3, r2
90005c9e:	009b      	lsls	r3, r3, #2
90005ca0:	440b      	add	r3, r1
90005ca2:	3328      	adds	r3, #40	@ 0x28
90005ca4:	4602      	mov	r2, r0
90005ca6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
90005ca8:	687b      	ldr	r3, [r7, #4]
90005caa:	6818      	ldr	r0, [r3, #0]
90005cac:	697b      	ldr	r3, [r7, #20]
90005cae:	b29b      	uxth	r3, r3
90005cb0:	787c      	ldrb	r4, [r7, #1]
90005cb2:	78ba      	ldrb	r2, [r7, #2]
90005cb4:	78f9      	ldrb	r1, [r7, #3]
90005cb6:	9302      	str	r3, [sp, #8]
90005cb8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
90005cbc:	9301      	str	r3, [sp, #4]
90005cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
90005cc2:	9300      	str	r3, [sp, #0]
90005cc4:	4623      	mov	r3, r4
90005cc6:	f006 fd41 	bl	9000c74c <USB_HC_Init>
90005cca:	4603      	mov	r3, r0
90005ccc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
90005cce:	687b      	ldr	r3, [r7, #4]
90005cd0:	2200      	movs	r2, #0
90005cd2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
90005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
90005cd8:	4618      	mov	r0, r3
90005cda:	371c      	adds	r7, #28
90005cdc:	46bd      	mov	sp, r7
90005cde:	bd90      	pop	{r4, r7, pc}

90005ce0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
90005ce0:	b580      	push	{r7, lr}
90005ce2:	b084      	sub	sp, #16
90005ce4:	af00      	add	r7, sp, #0
90005ce6:	6078      	str	r0, [r7, #4]
90005ce8:	460b      	mov	r3, r1
90005cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
90005cec:	2300      	movs	r3, #0
90005cee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
90005cf0:	687b      	ldr	r3, [r7, #4]
90005cf2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90005cf6:	2b01      	cmp	r3, #1
90005cf8:	d101      	bne.n	90005cfe <HAL_HCD_HC_Halt+0x1e>
90005cfa:	2302      	movs	r3, #2
90005cfc:	e00f      	b.n	90005d1e <HAL_HCD_HC_Halt+0x3e>
90005cfe:	687b      	ldr	r3, [r7, #4]
90005d00:	2201      	movs	r2, #1
90005d02:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
90005d06:	687b      	ldr	r3, [r7, #4]
90005d08:	681b      	ldr	r3, [r3, #0]
90005d0a:	78fa      	ldrb	r2, [r7, #3]
90005d0c:	4611      	mov	r1, r2
90005d0e:	4618      	mov	r0, r3
90005d10:	f007 f8c1 	bl	9000ce96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
90005d14:	687b      	ldr	r3, [r7, #4]
90005d16:	2200      	movs	r2, #0
90005d18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
90005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
90005d1e:	4618      	mov	r0, r3
90005d20:	3710      	adds	r7, #16
90005d22:	46bd      	mov	sp, r7
90005d24:	bd80      	pop	{r7, pc}
	...

90005d28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
90005d28:	b580      	push	{r7, lr}
90005d2a:	b082      	sub	sp, #8
90005d2c:	af00      	add	r7, sp, #0
90005d2e:	6078      	str	r0, [r7, #4]
90005d30:	4608      	mov	r0, r1
90005d32:	4611      	mov	r1, r2
90005d34:	461a      	mov	r2, r3
90005d36:	4603      	mov	r3, r0
90005d38:	70fb      	strb	r3, [r7, #3]
90005d3a:	460b      	mov	r3, r1
90005d3c:	70bb      	strb	r3, [r7, #2]
90005d3e:	4613      	mov	r3, r2
90005d40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
90005d42:	78fa      	ldrb	r2, [r7, #3]
90005d44:	6879      	ldr	r1, [r7, #4]
90005d46:	4613      	mov	r3, r2
90005d48:	011b      	lsls	r3, r3, #4
90005d4a:	1a9b      	subs	r3, r3, r2
90005d4c:	009b      	lsls	r3, r3, #2
90005d4e:	440b      	add	r3, r1
90005d50:	3317      	adds	r3, #23
90005d52:	78ba      	ldrb	r2, [r7, #2]
90005d54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
90005d56:	78fa      	ldrb	r2, [r7, #3]
90005d58:	6879      	ldr	r1, [r7, #4]
90005d5a:	4613      	mov	r3, r2
90005d5c:	011b      	lsls	r3, r3, #4
90005d5e:	1a9b      	subs	r3, r3, r2
90005d60:	009b      	lsls	r3, r3, #2
90005d62:	440b      	add	r3, r1
90005d64:	3326      	adds	r3, #38	@ 0x26
90005d66:	787a      	ldrb	r2, [r7, #1]
90005d68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
90005d6a:	7c3b      	ldrb	r3, [r7, #16]
90005d6c:	2b00      	cmp	r3, #0
90005d6e:	d114      	bne.n	90005d9a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
90005d70:	78fa      	ldrb	r2, [r7, #3]
90005d72:	6879      	ldr	r1, [r7, #4]
90005d74:	4613      	mov	r3, r2
90005d76:	011b      	lsls	r3, r3, #4
90005d78:	1a9b      	subs	r3, r3, r2
90005d7a:	009b      	lsls	r3, r3, #2
90005d7c:	440b      	add	r3, r1
90005d7e:	332a      	adds	r3, #42	@ 0x2a
90005d80:	2203      	movs	r2, #3
90005d82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
90005d84:	78fa      	ldrb	r2, [r7, #3]
90005d86:	6879      	ldr	r1, [r7, #4]
90005d88:	4613      	mov	r3, r2
90005d8a:	011b      	lsls	r3, r3, #4
90005d8c:	1a9b      	subs	r3, r3, r2
90005d8e:	009b      	lsls	r3, r3, #2
90005d90:	440b      	add	r3, r1
90005d92:	3319      	adds	r3, #25
90005d94:	7f3a      	ldrb	r2, [r7, #28]
90005d96:	701a      	strb	r2, [r3, #0]
90005d98:	e009      	b.n	90005dae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90005d9a:	78fa      	ldrb	r2, [r7, #3]
90005d9c:	6879      	ldr	r1, [r7, #4]
90005d9e:	4613      	mov	r3, r2
90005da0:	011b      	lsls	r3, r3, #4
90005da2:	1a9b      	subs	r3, r3, r2
90005da4:	009b      	lsls	r3, r3, #2
90005da6:	440b      	add	r3, r1
90005da8:	332a      	adds	r3, #42	@ 0x2a
90005daa:	2202      	movs	r2, #2
90005dac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
90005dae:	787b      	ldrb	r3, [r7, #1]
90005db0:	2b03      	cmp	r3, #3
90005db2:	f200 8102 	bhi.w	90005fba <HAL_HCD_HC_SubmitRequest+0x292>
90005db6:	a201      	add	r2, pc, #4	@ (adr r2, 90005dbc <HAL_HCD_HC_SubmitRequest+0x94>)
90005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005dbc:	90005dcd 	.word	0x90005dcd
90005dc0:	90005fa5 	.word	0x90005fa5
90005dc4:	90005e91 	.word	0x90005e91
90005dc8:	90005f1b 	.word	0x90005f1b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
90005dcc:	7c3b      	ldrb	r3, [r7, #16]
90005dce:	2b01      	cmp	r3, #1
90005dd0:	f040 80f5 	bne.w	90005fbe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
90005dd4:	78bb      	ldrb	r3, [r7, #2]
90005dd6:	2b00      	cmp	r3, #0
90005dd8:	d12d      	bne.n	90005e36 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
90005dda:	8b3b      	ldrh	r3, [r7, #24]
90005ddc:	2b00      	cmp	r3, #0
90005dde:	d109      	bne.n	90005df4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
90005de0:	78fa      	ldrb	r2, [r7, #3]
90005de2:	6879      	ldr	r1, [r7, #4]
90005de4:	4613      	mov	r3, r2
90005de6:	011b      	lsls	r3, r3, #4
90005de8:	1a9b      	subs	r3, r3, r2
90005dea:	009b      	lsls	r3, r3, #2
90005dec:	440b      	add	r3, r1
90005dee:	333d      	adds	r3, #61	@ 0x3d
90005df0:	2201      	movs	r2, #1
90005df2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
90005df4:	78fa      	ldrb	r2, [r7, #3]
90005df6:	6879      	ldr	r1, [r7, #4]
90005df8:	4613      	mov	r3, r2
90005dfa:	011b      	lsls	r3, r3, #4
90005dfc:	1a9b      	subs	r3, r3, r2
90005dfe:	009b      	lsls	r3, r3, #2
90005e00:	440b      	add	r3, r1
90005e02:	333d      	adds	r3, #61	@ 0x3d
90005e04:	781b      	ldrb	r3, [r3, #0]
90005e06:	2b00      	cmp	r3, #0
90005e08:	d10a      	bne.n	90005e20 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90005e0a:	78fa      	ldrb	r2, [r7, #3]
90005e0c:	6879      	ldr	r1, [r7, #4]
90005e0e:	4613      	mov	r3, r2
90005e10:	011b      	lsls	r3, r3, #4
90005e12:	1a9b      	subs	r3, r3, r2
90005e14:	009b      	lsls	r3, r3, #2
90005e16:	440b      	add	r3, r1
90005e18:	332a      	adds	r3, #42	@ 0x2a
90005e1a:	2200      	movs	r2, #0
90005e1c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
90005e1e:	e0ce      	b.n	90005fbe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90005e20:	78fa      	ldrb	r2, [r7, #3]
90005e22:	6879      	ldr	r1, [r7, #4]
90005e24:	4613      	mov	r3, r2
90005e26:	011b      	lsls	r3, r3, #4
90005e28:	1a9b      	subs	r3, r3, r2
90005e2a:	009b      	lsls	r3, r3, #2
90005e2c:	440b      	add	r3, r1
90005e2e:	332a      	adds	r3, #42	@ 0x2a
90005e30:	2202      	movs	r2, #2
90005e32:	701a      	strb	r2, [r3, #0]
      break;
90005e34:	e0c3      	b.n	90005fbe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
90005e36:	78fa      	ldrb	r2, [r7, #3]
90005e38:	6879      	ldr	r1, [r7, #4]
90005e3a:	4613      	mov	r3, r2
90005e3c:	011b      	lsls	r3, r3, #4
90005e3e:	1a9b      	subs	r3, r3, r2
90005e40:	009b      	lsls	r3, r3, #2
90005e42:	440b      	add	r3, r1
90005e44:	331a      	adds	r3, #26
90005e46:	781b      	ldrb	r3, [r3, #0]
90005e48:	2b01      	cmp	r3, #1
90005e4a:	f040 80b8 	bne.w	90005fbe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
90005e4e:	78fa      	ldrb	r2, [r7, #3]
90005e50:	6879      	ldr	r1, [r7, #4]
90005e52:	4613      	mov	r3, r2
90005e54:	011b      	lsls	r3, r3, #4
90005e56:	1a9b      	subs	r3, r3, r2
90005e58:	009b      	lsls	r3, r3, #2
90005e5a:	440b      	add	r3, r1
90005e5c:	333c      	adds	r3, #60	@ 0x3c
90005e5e:	781b      	ldrb	r3, [r3, #0]
90005e60:	2b00      	cmp	r3, #0
90005e62:	d10a      	bne.n	90005e7a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90005e64:	78fa      	ldrb	r2, [r7, #3]
90005e66:	6879      	ldr	r1, [r7, #4]
90005e68:	4613      	mov	r3, r2
90005e6a:	011b      	lsls	r3, r3, #4
90005e6c:	1a9b      	subs	r3, r3, r2
90005e6e:	009b      	lsls	r3, r3, #2
90005e70:	440b      	add	r3, r1
90005e72:	332a      	adds	r3, #42	@ 0x2a
90005e74:	2200      	movs	r2, #0
90005e76:	701a      	strb	r2, [r3, #0]
      break;
90005e78:	e0a1      	b.n	90005fbe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90005e7a:	78fa      	ldrb	r2, [r7, #3]
90005e7c:	6879      	ldr	r1, [r7, #4]
90005e7e:	4613      	mov	r3, r2
90005e80:	011b      	lsls	r3, r3, #4
90005e82:	1a9b      	subs	r3, r3, r2
90005e84:	009b      	lsls	r3, r3, #2
90005e86:	440b      	add	r3, r1
90005e88:	332a      	adds	r3, #42	@ 0x2a
90005e8a:	2202      	movs	r2, #2
90005e8c:	701a      	strb	r2, [r3, #0]
      break;
90005e8e:	e096      	b.n	90005fbe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
90005e90:	78bb      	ldrb	r3, [r7, #2]
90005e92:	2b00      	cmp	r3, #0
90005e94:	d120      	bne.n	90005ed8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
90005e96:	78fa      	ldrb	r2, [r7, #3]
90005e98:	6879      	ldr	r1, [r7, #4]
90005e9a:	4613      	mov	r3, r2
90005e9c:	011b      	lsls	r3, r3, #4
90005e9e:	1a9b      	subs	r3, r3, r2
90005ea0:	009b      	lsls	r3, r3, #2
90005ea2:	440b      	add	r3, r1
90005ea4:	333d      	adds	r3, #61	@ 0x3d
90005ea6:	781b      	ldrb	r3, [r3, #0]
90005ea8:	2b00      	cmp	r3, #0
90005eaa:	d10a      	bne.n	90005ec2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90005eac:	78fa      	ldrb	r2, [r7, #3]
90005eae:	6879      	ldr	r1, [r7, #4]
90005eb0:	4613      	mov	r3, r2
90005eb2:	011b      	lsls	r3, r3, #4
90005eb4:	1a9b      	subs	r3, r3, r2
90005eb6:	009b      	lsls	r3, r3, #2
90005eb8:	440b      	add	r3, r1
90005eba:	332a      	adds	r3, #42	@ 0x2a
90005ebc:	2200      	movs	r2, #0
90005ebe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
90005ec0:	e07e      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90005ec2:	78fa      	ldrb	r2, [r7, #3]
90005ec4:	6879      	ldr	r1, [r7, #4]
90005ec6:	4613      	mov	r3, r2
90005ec8:	011b      	lsls	r3, r3, #4
90005eca:	1a9b      	subs	r3, r3, r2
90005ecc:	009b      	lsls	r3, r3, #2
90005ece:	440b      	add	r3, r1
90005ed0:	332a      	adds	r3, #42	@ 0x2a
90005ed2:	2202      	movs	r2, #2
90005ed4:	701a      	strb	r2, [r3, #0]
      break;
90005ed6:	e073      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
90005ed8:	78fa      	ldrb	r2, [r7, #3]
90005eda:	6879      	ldr	r1, [r7, #4]
90005edc:	4613      	mov	r3, r2
90005ede:	011b      	lsls	r3, r3, #4
90005ee0:	1a9b      	subs	r3, r3, r2
90005ee2:	009b      	lsls	r3, r3, #2
90005ee4:	440b      	add	r3, r1
90005ee6:	333c      	adds	r3, #60	@ 0x3c
90005ee8:	781b      	ldrb	r3, [r3, #0]
90005eea:	2b00      	cmp	r3, #0
90005eec:	d10a      	bne.n	90005f04 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90005eee:	78fa      	ldrb	r2, [r7, #3]
90005ef0:	6879      	ldr	r1, [r7, #4]
90005ef2:	4613      	mov	r3, r2
90005ef4:	011b      	lsls	r3, r3, #4
90005ef6:	1a9b      	subs	r3, r3, r2
90005ef8:	009b      	lsls	r3, r3, #2
90005efa:	440b      	add	r3, r1
90005efc:	332a      	adds	r3, #42	@ 0x2a
90005efe:	2200      	movs	r2, #0
90005f00:	701a      	strb	r2, [r3, #0]
      break;
90005f02:	e05d      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90005f04:	78fa      	ldrb	r2, [r7, #3]
90005f06:	6879      	ldr	r1, [r7, #4]
90005f08:	4613      	mov	r3, r2
90005f0a:	011b      	lsls	r3, r3, #4
90005f0c:	1a9b      	subs	r3, r3, r2
90005f0e:	009b      	lsls	r3, r3, #2
90005f10:	440b      	add	r3, r1
90005f12:	332a      	adds	r3, #42	@ 0x2a
90005f14:	2202      	movs	r2, #2
90005f16:	701a      	strb	r2, [r3, #0]
      break;
90005f18:	e052      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
90005f1a:	78bb      	ldrb	r3, [r7, #2]
90005f1c:	2b00      	cmp	r3, #0
90005f1e:	d120      	bne.n	90005f62 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
90005f20:	78fa      	ldrb	r2, [r7, #3]
90005f22:	6879      	ldr	r1, [r7, #4]
90005f24:	4613      	mov	r3, r2
90005f26:	011b      	lsls	r3, r3, #4
90005f28:	1a9b      	subs	r3, r3, r2
90005f2a:	009b      	lsls	r3, r3, #2
90005f2c:	440b      	add	r3, r1
90005f2e:	333d      	adds	r3, #61	@ 0x3d
90005f30:	781b      	ldrb	r3, [r3, #0]
90005f32:	2b00      	cmp	r3, #0
90005f34:	d10a      	bne.n	90005f4c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90005f36:	78fa      	ldrb	r2, [r7, #3]
90005f38:	6879      	ldr	r1, [r7, #4]
90005f3a:	4613      	mov	r3, r2
90005f3c:	011b      	lsls	r3, r3, #4
90005f3e:	1a9b      	subs	r3, r3, r2
90005f40:	009b      	lsls	r3, r3, #2
90005f42:	440b      	add	r3, r1
90005f44:	332a      	adds	r3, #42	@ 0x2a
90005f46:	2200      	movs	r2, #0
90005f48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
90005f4a:	e039      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90005f4c:	78fa      	ldrb	r2, [r7, #3]
90005f4e:	6879      	ldr	r1, [r7, #4]
90005f50:	4613      	mov	r3, r2
90005f52:	011b      	lsls	r3, r3, #4
90005f54:	1a9b      	subs	r3, r3, r2
90005f56:	009b      	lsls	r3, r3, #2
90005f58:	440b      	add	r3, r1
90005f5a:	332a      	adds	r3, #42	@ 0x2a
90005f5c:	2202      	movs	r2, #2
90005f5e:	701a      	strb	r2, [r3, #0]
      break;
90005f60:	e02e      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
90005f62:	78fa      	ldrb	r2, [r7, #3]
90005f64:	6879      	ldr	r1, [r7, #4]
90005f66:	4613      	mov	r3, r2
90005f68:	011b      	lsls	r3, r3, #4
90005f6a:	1a9b      	subs	r3, r3, r2
90005f6c:	009b      	lsls	r3, r3, #2
90005f6e:	440b      	add	r3, r1
90005f70:	333c      	adds	r3, #60	@ 0x3c
90005f72:	781b      	ldrb	r3, [r3, #0]
90005f74:	2b00      	cmp	r3, #0
90005f76:	d10a      	bne.n	90005f8e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90005f78:	78fa      	ldrb	r2, [r7, #3]
90005f7a:	6879      	ldr	r1, [r7, #4]
90005f7c:	4613      	mov	r3, r2
90005f7e:	011b      	lsls	r3, r3, #4
90005f80:	1a9b      	subs	r3, r3, r2
90005f82:	009b      	lsls	r3, r3, #2
90005f84:	440b      	add	r3, r1
90005f86:	332a      	adds	r3, #42	@ 0x2a
90005f88:	2200      	movs	r2, #0
90005f8a:	701a      	strb	r2, [r3, #0]
      break;
90005f8c:	e018      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90005f8e:	78fa      	ldrb	r2, [r7, #3]
90005f90:	6879      	ldr	r1, [r7, #4]
90005f92:	4613      	mov	r3, r2
90005f94:	011b      	lsls	r3, r3, #4
90005f96:	1a9b      	subs	r3, r3, r2
90005f98:	009b      	lsls	r3, r3, #2
90005f9a:	440b      	add	r3, r1
90005f9c:	332a      	adds	r3, #42	@ 0x2a
90005f9e:	2202      	movs	r2, #2
90005fa0:	701a      	strb	r2, [r3, #0]
      break;
90005fa2:	e00d      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90005fa4:	78fa      	ldrb	r2, [r7, #3]
90005fa6:	6879      	ldr	r1, [r7, #4]
90005fa8:	4613      	mov	r3, r2
90005faa:	011b      	lsls	r3, r3, #4
90005fac:	1a9b      	subs	r3, r3, r2
90005fae:	009b      	lsls	r3, r3, #2
90005fb0:	440b      	add	r3, r1
90005fb2:	332a      	adds	r3, #42	@ 0x2a
90005fb4:	2200      	movs	r2, #0
90005fb6:	701a      	strb	r2, [r3, #0]
      break;
90005fb8:	e002      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
90005fba:	bf00      	nop
90005fbc:	e000      	b.n	90005fc0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
90005fbe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
90005fc0:	78fa      	ldrb	r2, [r7, #3]
90005fc2:	6879      	ldr	r1, [r7, #4]
90005fc4:	4613      	mov	r3, r2
90005fc6:	011b      	lsls	r3, r3, #4
90005fc8:	1a9b      	subs	r3, r3, r2
90005fca:	009b      	lsls	r3, r3, #2
90005fcc:	440b      	add	r3, r1
90005fce:	332c      	adds	r3, #44	@ 0x2c
90005fd0:	697a      	ldr	r2, [r7, #20]
90005fd2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
90005fd4:	78fa      	ldrb	r2, [r7, #3]
90005fd6:	8b39      	ldrh	r1, [r7, #24]
90005fd8:	6878      	ldr	r0, [r7, #4]
90005fda:	4613      	mov	r3, r2
90005fdc:	011b      	lsls	r3, r3, #4
90005fde:	1a9b      	subs	r3, r3, r2
90005fe0:	009b      	lsls	r3, r3, #2
90005fe2:	4403      	add	r3, r0
90005fe4:	3334      	adds	r3, #52	@ 0x34
90005fe6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
90005fe8:	78fa      	ldrb	r2, [r7, #3]
90005fea:	6879      	ldr	r1, [r7, #4]
90005fec:	4613      	mov	r3, r2
90005fee:	011b      	lsls	r3, r3, #4
90005ff0:	1a9b      	subs	r3, r3, r2
90005ff2:	009b      	lsls	r3, r3, #2
90005ff4:	440b      	add	r3, r1
90005ff6:	334c      	adds	r3, #76	@ 0x4c
90005ff8:	2200      	movs	r2, #0
90005ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
90005ffc:	78fa      	ldrb	r2, [r7, #3]
90005ffe:	6879      	ldr	r1, [r7, #4]
90006000:	4613      	mov	r3, r2
90006002:	011b      	lsls	r3, r3, #4
90006004:	1a9b      	subs	r3, r3, r2
90006006:	009b      	lsls	r3, r3, #2
90006008:	440b      	add	r3, r1
9000600a:	3338      	adds	r3, #56	@ 0x38
9000600c:	2200      	movs	r2, #0
9000600e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
90006010:	78fa      	ldrb	r2, [r7, #3]
90006012:	6879      	ldr	r1, [r7, #4]
90006014:	4613      	mov	r3, r2
90006016:	011b      	lsls	r3, r3, #4
90006018:	1a9b      	subs	r3, r3, r2
9000601a:	009b      	lsls	r3, r3, #2
9000601c:	440b      	add	r3, r1
9000601e:	3315      	adds	r3, #21
90006020:	78fa      	ldrb	r2, [r7, #3]
90006022:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
90006024:	78fa      	ldrb	r2, [r7, #3]
90006026:	6879      	ldr	r1, [r7, #4]
90006028:	4613      	mov	r3, r2
9000602a:	011b      	lsls	r3, r3, #4
9000602c:	1a9b      	subs	r3, r3, r2
9000602e:	009b      	lsls	r3, r3, #2
90006030:	440b      	add	r3, r1
90006032:	334d      	adds	r3, #77	@ 0x4d
90006034:	2200      	movs	r2, #0
90006036:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
90006038:	687b      	ldr	r3, [r7, #4]
9000603a:	6818      	ldr	r0, [r3, #0]
9000603c:	78fa      	ldrb	r2, [r7, #3]
9000603e:	4613      	mov	r3, r2
90006040:	011b      	lsls	r3, r3, #4
90006042:	1a9b      	subs	r3, r3, r2
90006044:	009b      	lsls	r3, r3, #2
90006046:	3310      	adds	r3, #16
90006048:	687a      	ldr	r2, [r7, #4]
9000604a:	4413      	add	r3, r2
9000604c:	1d19      	adds	r1, r3, #4
9000604e:	687b      	ldr	r3, [r7, #4]
90006050:	799b      	ldrb	r3, [r3, #6]
90006052:	461a      	mov	r2, r3
90006054:	f006 fc9e 	bl	9000c994 <USB_HC_StartXfer>
90006058:	4603      	mov	r3, r0
}
9000605a:	4618      	mov	r0, r3
9000605c:	3708      	adds	r7, #8
9000605e:	46bd      	mov	sp, r7
90006060:	bd80      	pop	{r7, pc}
90006062:	bf00      	nop

90006064 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90006064:	b580      	push	{r7, lr}
90006066:	b086      	sub	sp, #24
90006068:	af00      	add	r7, sp, #0
9000606a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000606c:	687b      	ldr	r3, [r7, #4]
9000606e:	681b      	ldr	r3, [r3, #0]
90006070:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90006072:	693b      	ldr	r3, [r7, #16]
90006074:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90006076:	687b      	ldr	r3, [r7, #4]
90006078:	681b      	ldr	r3, [r3, #0]
9000607a:	4618      	mov	r0, r3
9000607c:	f006 f9b4 	bl	9000c3e8 <USB_GetMode>
90006080:	4603      	mov	r3, r0
90006082:	2b01      	cmp	r3, #1
90006084:	f040 80fb 	bne.w	9000627e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90006088:	687b      	ldr	r3, [r7, #4]
9000608a:	681b      	ldr	r3, [r3, #0]
9000608c:	4618      	mov	r0, r3
9000608e:	f006 f977 	bl	9000c380 <USB_ReadInterrupts>
90006092:	4603      	mov	r3, r0
90006094:	2b00      	cmp	r3, #0
90006096:	f000 80f1 	beq.w	9000627c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
9000609a:	687b      	ldr	r3, [r7, #4]
9000609c:	681b      	ldr	r3, [r3, #0]
9000609e:	4618      	mov	r0, r3
900060a0:	f006 f96e 	bl	9000c380 <USB_ReadInterrupts>
900060a4:	4603      	mov	r3, r0
900060a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
900060aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900060ae:	d104      	bne.n	900060ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
900060b0:	687b      	ldr	r3, [r7, #4]
900060b2:	681b      	ldr	r3, [r3, #0]
900060b4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
900060b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
900060ba:	687b      	ldr	r3, [r7, #4]
900060bc:	681b      	ldr	r3, [r3, #0]
900060be:	4618      	mov	r0, r3
900060c0:	f006 f95e 	bl	9000c380 <USB_ReadInterrupts>
900060c4:	4603      	mov	r3, r0
900060c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
900060ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
900060ce:	d104      	bne.n	900060da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
900060d0:	687b      	ldr	r3, [r7, #4]
900060d2:	681b      	ldr	r3, [r3, #0]
900060d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
900060d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
900060da:	687b      	ldr	r3, [r7, #4]
900060dc:	681b      	ldr	r3, [r3, #0]
900060de:	4618      	mov	r0, r3
900060e0:	f006 f94e 	bl	9000c380 <USB_ReadInterrupts>
900060e4:	4603      	mov	r3, r0
900060e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
900060ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
900060ee:	d104      	bne.n	900060fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
900060f0:	687b      	ldr	r3, [r7, #4]
900060f2:	681b      	ldr	r3, [r3, #0]
900060f4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
900060f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
900060fa:	687b      	ldr	r3, [r7, #4]
900060fc:	681b      	ldr	r3, [r3, #0]
900060fe:	4618      	mov	r0, r3
90006100:	f006 f93e 	bl	9000c380 <USB_ReadInterrupts>
90006104:	4603      	mov	r3, r0
90006106:	f003 0302 	and.w	r3, r3, #2
9000610a:	2b02      	cmp	r3, #2
9000610c:	d103      	bne.n	90006116 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
9000610e:	687b      	ldr	r3, [r7, #4]
90006110:	681b      	ldr	r3, [r3, #0]
90006112:	2202      	movs	r2, #2
90006114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90006116:	687b      	ldr	r3, [r7, #4]
90006118:	681b      	ldr	r3, [r3, #0]
9000611a:	4618      	mov	r0, r3
9000611c:	f006 f930 	bl	9000c380 <USB_ReadInterrupts>
90006120:	4603      	mov	r3, r0
90006122:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90006126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000612a:	d120      	bne.n	9000616e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
9000612c:	687b      	ldr	r3, [r7, #4]
9000612e:	681b      	ldr	r3, [r3, #0]
90006130:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90006134:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90006136:	68fb      	ldr	r3, [r7, #12]
90006138:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000613c:	681b      	ldr	r3, [r3, #0]
9000613e:	f003 0301 	and.w	r3, r3, #1
90006142:	2b00      	cmp	r3, #0
90006144:	d113      	bne.n	9000616e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90006146:	2110      	movs	r1, #16
90006148:	6938      	ldr	r0, [r7, #16]
9000614a:	f006 f823 	bl	9000c194 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
9000614e:	6938      	ldr	r0, [r7, #16]
90006150:	f006 f852 	bl	9000c1f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90006154:	687b      	ldr	r3, [r7, #4]
90006156:	7a5b      	ldrb	r3, [r3, #9]
90006158:	2b02      	cmp	r3, #2
9000615a:	d105      	bne.n	90006168 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000615c:	687b      	ldr	r3, [r7, #4]
9000615e:	681b      	ldr	r3, [r3, #0]
90006160:	2101      	movs	r1, #1
90006162:	4618      	mov	r0, r3
90006164:	f006 fa2a 	bl	9000c5bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90006168:	6878      	ldr	r0, [r7, #4]
9000616a:	f7fb fc41 	bl	900019f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
9000616e:	687b      	ldr	r3, [r7, #4]
90006170:	681b      	ldr	r3, [r3, #0]
90006172:	4618      	mov	r0, r3
90006174:	f006 f904 	bl	9000c380 <USB_ReadInterrupts>
90006178:	4603      	mov	r3, r0
9000617a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
9000617e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90006182:	d102      	bne.n	9000618a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90006184:	6878      	ldr	r0, [r7, #4]
90006186:	f001 fd4d 	bl	90007c24 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
9000618a:	687b      	ldr	r3, [r7, #4]
9000618c:	681b      	ldr	r3, [r3, #0]
9000618e:	4618      	mov	r0, r3
90006190:	f006 f8f6 	bl	9000c380 <USB_ReadInterrupts>
90006194:	4603      	mov	r3, r0
90006196:	f003 0308 	and.w	r3, r3, #8
9000619a:	2b08      	cmp	r3, #8
9000619c:	d106      	bne.n	900061ac <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
9000619e:	6878      	ldr	r0, [r7, #4]
900061a0:	f7fb fc0a 	bl	900019b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
900061a4:	687b      	ldr	r3, [r7, #4]
900061a6:	681b      	ldr	r3, [r3, #0]
900061a8:	2208      	movs	r2, #8
900061aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
900061ac:	687b      	ldr	r3, [r7, #4]
900061ae:	681b      	ldr	r3, [r3, #0]
900061b0:	4618      	mov	r0, r3
900061b2:	f006 f8e5 	bl	9000c380 <USB_ReadInterrupts>
900061b6:	4603      	mov	r3, r0
900061b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900061bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
900061c0:	d139      	bne.n	90006236 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
900061c2:	687b      	ldr	r3, [r7, #4]
900061c4:	681b      	ldr	r3, [r3, #0]
900061c6:	4618      	mov	r0, r3
900061c8:	f006 fe54 	bl	9000ce74 <USB_HC_ReadInterrupt>
900061cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900061ce:	2300      	movs	r3, #0
900061d0:	617b      	str	r3, [r7, #20]
900061d2:	e025      	b.n	90006220 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
900061d4:	697b      	ldr	r3, [r7, #20]
900061d6:	f003 030f 	and.w	r3, r3, #15
900061da:	68ba      	ldr	r2, [r7, #8]
900061dc:	fa22 f303 	lsr.w	r3, r2, r3
900061e0:	f003 0301 	and.w	r3, r3, #1
900061e4:	2b00      	cmp	r3, #0
900061e6:	d018      	beq.n	9000621a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900061e8:	697b      	ldr	r3, [r7, #20]
900061ea:	015a      	lsls	r2, r3, #5
900061ec:	68fb      	ldr	r3, [r7, #12]
900061ee:	4413      	add	r3, r2
900061f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900061f4:	681b      	ldr	r3, [r3, #0]
900061f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
900061fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900061fe:	d106      	bne.n	9000620e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90006200:	697b      	ldr	r3, [r7, #20]
90006202:	b2db      	uxtb	r3, r3
90006204:	4619      	mov	r1, r3
90006206:	6878      	ldr	r0, [r7, #4]
90006208:	f000 f905 	bl	90006416 <HCD_HC_IN_IRQHandler>
9000620c:	e005      	b.n	9000621a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
9000620e:	697b      	ldr	r3, [r7, #20]
90006210:	b2db      	uxtb	r3, r3
90006212:	4619      	mov	r1, r3
90006214:	6878      	ldr	r0, [r7, #4]
90006216:	f000 ff67 	bl	900070e8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000621a:	697b      	ldr	r3, [r7, #20]
9000621c:	3301      	adds	r3, #1
9000621e:	617b      	str	r3, [r7, #20]
90006220:	687b      	ldr	r3, [r7, #4]
90006222:	795b      	ldrb	r3, [r3, #5]
90006224:	461a      	mov	r2, r3
90006226:	697b      	ldr	r3, [r7, #20]
90006228:	4293      	cmp	r3, r2
9000622a:	d3d3      	bcc.n	900061d4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
9000622c:	687b      	ldr	r3, [r7, #4]
9000622e:	681b      	ldr	r3, [r3, #0]
90006230:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90006234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90006236:	687b      	ldr	r3, [r7, #4]
90006238:	681b      	ldr	r3, [r3, #0]
9000623a:	4618      	mov	r0, r3
9000623c:	f006 f8a0 	bl	9000c380 <USB_ReadInterrupts>
90006240:	4603      	mov	r3, r0
90006242:	f003 0310 	and.w	r3, r3, #16
90006246:	2b10      	cmp	r3, #16
90006248:	d101      	bne.n	9000624e <HAL_HCD_IRQHandler+0x1ea>
9000624a:	2301      	movs	r3, #1
9000624c:	e000      	b.n	90006250 <HAL_HCD_IRQHandler+0x1ec>
9000624e:	2300      	movs	r3, #0
90006250:	2b00      	cmp	r3, #0
90006252:	d014      	beq.n	9000627e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90006254:	687b      	ldr	r3, [r7, #4]
90006256:	681b      	ldr	r3, [r3, #0]
90006258:	699a      	ldr	r2, [r3, #24]
9000625a:	687b      	ldr	r3, [r7, #4]
9000625c:	681b      	ldr	r3, [r3, #0]
9000625e:	f022 0210 	bic.w	r2, r2, #16
90006262:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90006264:	6878      	ldr	r0, [r7, #4]
90006266:	f001 fbfe 	bl	90007a66 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
9000626a:	687b      	ldr	r3, [r7, #4]
9000626c:	681b      	ldr	r3, [r3, #0]
9000626e:	699a      	ldr	r2, [r3, #24]
90006270:	687b      	ldr	r3, [r7, #4]
90006272:	681b      	ldr	r3, [r3, #0]
90006274:	f042 0210 	orr.w	r2, r2, #16
90006278:	619a      	str	r2, [r3, #24]
9000627a:	e000      	b.n	9000627e <HAL_HCD_IRQHandler+0x21a>
      return;
9000627c:	bf00      	nop
    }
  }
}
9000627e:	3718      	adds	r7, #24
90006280:	46bd      	mov	sp, r7
90006282:	bd80      	pop	{r7, pc}

90006284 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
90006284:	b580      	push	{r7, lr}
90006286:	b082      	sub	sp, #8
90006288:	af00      	add	r7, sp, #0
9000628a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
9000628c:	687b      	ldr	r3, [r7, #4]
9000628e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90006292:	2b01      	cmp	r3, #1
90006294:	d101      	bne.n	9000629a <HAL_HCD_Start+0x16>
90006296:	2302      	movs	r3, #2
90006298:	e013      	b.n	900062c2 <HAL_HCD_Start+0x3e>
9000629a:	687b      	ldr	r3, [r7, #4]
9000629c:	2201      	movs	r2, #1
9000629e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
900062a2:	687b      	ldr	r3, [r7, #4]
900062a4:	681b      	ldr	r3, [r3, #0]
900062a6:	2101      	movs	r1, #1
900062a8:	4618      	mov	r0, r3
900062aa:	f006 f9ee 	bl	9000c68a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
900062ae:	687b      	ldr	r3, [r7, #4]
900062b0:	681b      	ldr	r3, [r3, #0]
900062b2:	4618      	mov	r0, r3
900062b4:	f005 ff00 	bl	9000c0b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
900062b8:	687b      	ldr	r3, [r7, #4]
900062ba:	2200      	movs	r2, #0
900062bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
900062c0:	2300      	movs	r3, #0
}
900062c2:	4618      	mov	r0, r3
900062c4:	3708      	adds	r7, #8
900062c6:	46bd      	mov	sp, r7
900062c8:	bd80      	pop	{r7, pc}

900062ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
900062ca:	b580      	push	{r7, lr}
900062cc:	b082      	sub	sp, #8
900062ce:	af00      	add	r7, sp, #0
900062d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
900062d2:	687b      	ldr	r3, [r7, #4]
900062d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
900062d8:	2b01      	cmp	r3, #1
900062da:	d101      	bne.n	900062e0 <HAL_HCD_Stop+0x16>
900062dc:	2302      	movs	r3, #2
900062de:	e00d      	b.n	900062fc <HAL_HCD_Stop+0x32>
900062e0:	687b      	ldr	r3, [r7, #4]
900062e2:	2201      	movs	r2, #1
900062e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
900062e8:	687b      	ldr	r3, [r7, #4]
900062ea:	681b      	ldr	r3, [r3, #0]
900062ec:	4618      	mov	r0, r3
900062ee:	f006 ff2f 	bl	9000d150 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
900062f2:	687b      	ldr	r3, [r7, #4]
900062f4:	2200      	movs	r2, #0
900062f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
900062fa:	2300      	movs	r3, #0
}
900062fc:	4618      	mov	r0, r3
900062fe:	3708      	adds	r7, #8
90006300:	46bd      	mov	sp, r7
90006302:	bd80      	pop	{r7, pc}

90006304 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
90006304:	b580      	push	{r7, lr}
90006306:	b082      	sub	sp, #8
90006308:	af00      	add	r7, sp, #0
9000630a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
9000630c:	687b      	ldr	r3, [r7, #4]
9000630e:	681b      	ldr	r3, [r3, #0]
90006310:	4618      	mov	r0, r3
90006312:	f006 f990 	bl	9000c636 <USB_ResetPort>
90006316:	4603      	mov	r3, r0
}
90006318:	4618      	mov	r0, r3
9000631a:	3708      	adds	r7, #8
9000631c:	46bd      	mov	sp, r7
9000631e:	bd80      	pop	{r7, pc}

90006320 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
90006320:	b480      	push	{r7}
90006322:	b083      	sub	sp, #12
90006324:	af00      	add	r7, sp, #0
90006326:	6078      	str	r0, [r7, #4]
90006328:	460b      	mov	r3, r1
9000632a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
9000632c:	78fa      	ldrb	r2, [r7, #3]
9000632e:	6879      	ldr	r1, [r7, #4]
90006330:	4613      	mov	r3, r2
90006332:	011b      	lsls	r3, r3, #4
90006334:	1a9b      	subs	r3, r3, r2
90006336:	009b      	lsls	r3, r3, #2
90006338:	440b      	add	r3, r1
9000633a:	334c      	adds	r3, #76	@ 0x4c
9000633c:	781b      	ldrb	r3, [r3, #0]
}
9000633e:	4618      	mov	r0, r3
90006340:	370c      	adds	r7, #12
90006342:	46bd      	mov	sp, r7
90006344:	f85d 7b04 	ldr.w	r7, [sp], #4
90006348:	4770      	bx	lr

9000634a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
9000634a:	b480      	push	{r7}
9000634c:	b083      	sub	sp, #12
9000634e:	af00      	add	r7, sp, #0
90006350:	6078      	str	r0, [r7, #4]
90006352:	460b      	mov	r3, r1
90006354:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
90006356:	78fa      	ldrb	r2, [r7, #3]
90006358:	6879      	ldr	r1, [r7, #4]
9000635a:	4613      	mov	r3, r2
9000635c:	011b      	lsls	r3, r3, #4
9000635e:	1a9b      	subs	r3, r3, r2
90006360:	009b      	lsls	r3, r3, #2
90006362:	440b      	add	r3, r1
90006364:	3338      	adds	r3, #56	@ 0x38
90006366:	681b      	ldr	r3, [r3, #0]
}
90006368:	4618      	mov	r0, r3
9000636a:	370c      	adds	r7, #12
9000636c:	46bd      	mov	sp, r7
9000636e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006372:	4770      	bx	lr

90006374 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
90006374:	b580      	push	{r7, lr}
90006376:	b082      	sub	sp, #8
90006378:	af00      	add	r7, sp, #0
9000637a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
9000637c:	687b      	ldr	r3, [r7, #4]
9000637e:	681b      	ldr	r3, [r3, #0]
90006380:	4618      	mov	r0, r3
90006382:	f006 f9d2 	bl	9000c72a <USB_GetCurrentFrame>
90006386:	4603      	mov	r3, r0
}
90006388:	4618      	mov	r0, r3
9000638a:	3708      	adds	r7, #8
9000638c:	46bd      	mov	sp, r7
9000638e:	bd80      	pop	{r7, pc}

90006390 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
90006390:	b580      	push	{r7, lr}
90006392:	b082      	sub	sp, #8
90006394:	af00      	add	r7, sp, #0
90006396:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
90006398:	687b      	ldr	r3, [r7, #4]
9000639a:	681b      	ldr	r3, [r3, #0]
9000639c:	4618      	mov	r0, r3
9000639e:	f006 f9ad 	bl	9000c6fc <USB_GetHostSpeed>
900063a2:	4603      	mov	r3, r0
}
900063a4:	4618      	mov	r0, r3
900063a6:	3708      	adds	r7, #8
900063a8:	46bd      	mov	sp, r7
900063aa:	bd80      	pop	{r7, pc}

900063ac <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
900063ac:	b480      	push	{r7}
900063ae:	b083      	sub	sp, #12
900063b0:	af00      	add	r7, sp, #0
900063b2:	6078      	str	r0, [r7, #4]
900063b4:	460b      	mov	r3, r1
900063b6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
900063b8:	78fa      	ldrb	r2, [r7, #3]
900063ba:	6879      	ldr	r1, [r7, #4]
900063bc:	4613      	mov	r3, r2
900063be:	011b      	lsls	r3, r3, #4
900063c0:	1a9b      	subs	r3, r3, r2
900063c2:	009b      	lsls	r3, r3, #2
900063c4:	440b      	add	r3, r1
900063c6:	331a      	adds	r3, #26
900063c8:	2200      	movs	r2, #0
900063ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
900063cc:	78fa      	ldrb	r2, [r7, #3]
900063ce:	6879      	ldr	r1, [r7, #4]
900063d0:	4613      	mov	r3, r2
900063d2:	011b      	lsls	r3, r3, #4
900063d4:	1a9b      	subs	r3, r3, r2
900063d6:	009b      	lsls	r3, r3, #2
900063d8:	440b      	add	r3, r1
900063da:	331b      	adds	r3, #27
900063dc:	2200      	movs	r2, #0
900063de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
900063e0:	78fa      	ldrb	r2, [r7, #3]
900063e2:	6879      	ldr	r1, [r7, #4]
900063e4:	4613      	mov	r3, r2
900063e6:	011b      	lsls	r3, r3, #4
900063e8:	1a9b      	subs	r3, r3, r2
900063ea:	009b      	lsls	r3, r3, #2
900063ec:	440b      	add	r3, r1
900063ee:	3325      	adds	r3, #37	@ 0x25
900063f0:	2200      	movs	r2, #0
900063f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
900063f4:	78fa      	ldrb	r2, [r7, #3]
900063f6:	6879      	ldr	r1, [r7, #4]
900063f8:	4613      	mov	r3, r2
900063fa:	011b      	lsls	r3, r3, #4
900063fc:	1a9b      	subs	r3, r3, r2
900063fe:	009b      	lsls	r3, r3, #2
90006400:	440b      	add	r3, r1
90006402:	3324      	adds	r3, #36	@ 0x24
90006404:	2200      	movs	r2, #0
90006406:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
90006408:	2300      	movs	r3, #0
}
9000640a:	4618      	mov	r0, r3
9000640c:	370c      	adds	r7, #12
9000640e:	46bd      	mov	sp, r7
90006410:	f85d 7b04 	ldr.w	r7, [sp], #4
90006414:	4770      	bx	lr

90006416 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90006416:	b580      	push	{r7, lr}
90006418:	b086      	sub	sp, #24
9000641a:	af00      	add	r7, sp, #0
9000641c:	6078      	str	r0, [r7, #4]
9000641e:	460b      	mov	r3, r1
90006420:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90006422:	687b      	ldr	r3, [r7, #4]
90006424:	681b      	ldr	r3, [r3, #0]
90006426:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90006428:	697b      	ldr	r3, [r7, #20]
9000642a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
9000642c:	687b      	ldr	r3, [r7, #4]
9000642e:	681b      	ldr	r3, [r3, #0]
90006430:	78fa      	ldrb	r2, [r7, #3]
90006432:	4611      	mov	r1, r2
90006434:	4618      	mov	r0, r3
90006436:	f005 ffb6 	bl	9000c3a6 <USB_ReadChInterrupts>
9000643a:	4603      	mov	r3, r0
9000643c:	f003 0304 	and.w	r3, r3, #4
90006440:	2b04      	cmp	r3, #4
90006442:	d11a      	bne.n	9000647a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90006444:	78fb      	ldrb	r3, [r7, #3]
90006446:	015a      	lsls	r2, r3, #5
90006448:	693b      	ldr	r3, [r7, #16]
9000644a:	4413      	add	r3, r2
9000644c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006450:	461a      	mov	r2, r3
90006452:	2304      	movs	r3, #4
90006454:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90006456:	78fa      	ldrb	r2, [r7, #3]
90006458:	6879      	ldr	r1, [r7, #4]
9000645a:	4613      	mov	r3, r2
9000645c:	011b      	lsls	r3, r3, #4
9000645e:	1a9b      	subs	r3, r3, r2
90006460:	009b      	lsls	r3, r3, #2
90006462:	440b      	add	r3, r1
90006464:	334d      	adds	r3, #77	@ 0x4d
90006466:	2207      	movs	r2, #7
90006468:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000646a:	687b      	ldr	r3, [r7, #4]
9000646c:	681b      	ldr	r3, [r3, #0]
9000646e:	78fa      	ldrb	r2, [r7, #3]
90006470:	4611      	mov	r1, r2
90006472:	4618      	mov	r0, r3
90006474:	f006 fd0f 	bl	9000ce96 <USB_HC_Halt>
90006478:	e09e      	b.n	900065b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
9000647a:	687b      	ldr	r3, [r7, #4]
9000647c:	681b      	ldr	r3, [r3, #0]
9000647e:	78fa      	ldrb	r2, [r7, #3]
90006480:	4611      	mov	r1, r2
90006482:	4618      	mov	r0, r3
90006484:	f005 ff8f 	bl	9000c3a6 <USB_ReadChInterrupts>
90006488:	4603      	mov	r3, r0
9000648a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000648e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90006492:	d11b      	bne.n	900064cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
90006494:	78fb      	ldrb	r3, [r7, #3]
90006496:	015a      	lsls	r2, r3, #5
90006498:	693b      	ldr	r3, [r7, #16]
9000649a:	4413      	add	r3, r2
9000649c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900064a0:	461a      	mov	r2, r3
900064a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
900064a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
900064a8:	78fa      	ldrb	r2, [r7, #3]
900064aa:	6879      	ldr	r1, [r7, #4]
900064ac:	4613      	mov	r3, r2
900064ae:	011b      	lsls	r3, r3, #4
900064b0:	1a9b      	subs	r3, r3, r2
900064b2:	009b      	lsls	r3, r3, #2
900064b4:	440b      	add	r3, r1
900064b6:	334d      	adds	r3, #77	@ 0x4d
900064b8:	2208      	movs	r2, #8
900064ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900064bc:	687b      	ldr	r3, [r7, #4]
900064be:	681b      	ldr	r3, [r3, #0]
900064c0:	78fa      	ldrb	r2, [r7, #3]
900064c2:	4611      	mov	r1, r2
900064c4:	4618      	mov	r0, r3
900064c6:	f006 fce6 	bl	9000ce96 <USB_HC_Halt>
900064ca:	e075      	b.n	900065b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900064cc:	687b      	ldr	r3, [r7, #4]
900064ce:	681b      	ldr	r3, [r3, #0]
900064d0:	78fa      	ldrb	r2, [r7, #3]
900064d2:	4611      	mov	r1, r2
900064d4:	4618      	mov	r0, r3
900064d6:	f005 ff66 	bl	9000c3a6 <USB_ReadChInterrupts>
900064da:	4603      	mov	r3, r0
900064dc:	f003 0308 	and.w	r3, r3, #8
900064e0:	2b08      	cmp	r3, #8
900064e2:	d11a      	bne.n	9000651a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900064e4:	78fb      	ldrb	r3, [r7, #3]
900064e6:	015a      	lsls	r2, r3, #5
900064e8:	693b      	ldr	r3, [r7, #16]
900064ea:	4413      	add	r3, r2
900064ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900064f0:	461a      	mov	r2, r3
900064f2:	2308      	movs	r3, #8
900064f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900064f6:	78fa      	ldrb	r2, [r7, #3]
900064f8:	6879      	ldr	r1, [r7, #4]
900064fa:	4613      	mov	r3, r2
900064fc:	011b      	lsls	r3, r3, #4
900064fe:	1a9b      	subs	r3, r3, r2
90006500:	009b      	lsls	r3, r3, #2
90006502:	440b      	add	r3, r1
90006504:	334d      	adds	r3, #77	@ 0x4d
90006506:	2206      	movs	r2, #6
90006508:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000650a:	687b      	ldr	r3, [r7, #4]
9000650c:	681b      	ldr	r3, [r3, #0]
9000650e:	78fa      	ldrb	r2, [r7, #3]
90006510:	4611      	mov	r1, r2
90006512:	4618      	mov	r0, r3
90006514:	f006 fcbf 	bl	9000ce96 <USB_HC_Halt>
90006518:	e04e      	b.n	900065b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
9000651a:	687b      	ldr	r3, [r7, #4]
9000651c:	681b      	ldr	r3, [r3, #0]
9000651e:	78fa      	ldrb	r2, [r7, #3]
90006520:	4611      	mov	r1, r2
90006522:	4618      	mov	r0, r3
90006524:	f005 ff3f 	bl	9000c3a6 <USB_ReadChInterrupts>
90006528:	4603      	mov	r3, r0
9000652a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000652e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90006532:	d11b      	bne.n	9000656c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90006534:	78fb      	ldrb	r3, [r7, #3]
90006536:	015a      	lsls	r2, r3, #5
90006538:	693b      	ldr	r3, [r7, #16]
9000653a:	4413      	add	r3, r2
9000653c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006540:	461a      	mov	r2, r3
90006542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90006546:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
90006548:	78fa      	ldrb	r2, [r7, #3]
9000654a:	6879      	ldr	r1, [r7, #4]
9000654c:	4613      	mov	r3, r2
9000654e:	011b      	lsls	r3, r3, #4
90006550:	1a9b      	subs	r3, r3, r2
90006552:	009b      	lsls	r3, r3, #2
90006554:	440b      	add	r3, r1
90006556:	334d      	adds	r3, #77	@ 0x4d
90006558:	2209      	movs	r2, #9
9000655a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000655c:	687b      	ldr	r3, [r7, #4]
9000655e:	681b      	ldr	r3, [r3, #0]
90006560:	78fa      	ldrb	r2, [r7, #3]
90006562:	4611      	mov	r1, r2
90006564:	4618      	mov	r0, r3
90006566:	f006 fc96 	bl	9000ce96 <USB_HC_Halt>
9000656a:	e025      	b.n	900065b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
9000656c:	687b      	ldr	r3, [r7, #4]
9000656e:	681b      	ldr	r3, [r3, #0]
90006570:	78fa      	ldrb	r2, [r7, #3]
90006572:	4611      	mov	r1, r2
90006574:	4618      	mov	r0, r3
90006576:	f005 ff16 	bl	9000c3a6 <USB_ReadChInterrupts>
9000657a:	4603      	mov	r3, r0
9000657c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90006580:	2b80      	cmp	r3, #128	@ 0x80
90006582:	d119      	bne.n	900065b8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90006584:	78fb      	ldrb	r3, [r7, #3]
90006586:	015a      	lsls	r2, r3, #5
90006588:	693b      	ldr	r3, [r7, #16]
9000658a:	4413      	add	r3, r2
9000658c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006590:	461a      	mov	r2, r3
90006592:	2380      	movs	r3, #128	@ 0x80
90006594:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90006596:	78fa      	ldrb	r2, [r7, #3]
90006598:	6879      	ldr	r1, [r7, #4]
9000659a:	4613      	mov	r3, r2
9000659c:	011b      	lsls	r3, r3, #4
9000659e:	1a9b      	subs	r3, r3, r2
900065a0:	009b      	lsls	r3, r3, #2
900065a2:	440b      	add	r3, r1
900065a4:	334d      	adds	r3, #77	@ 0x4d
900065a6:	2207      	movs	r2, #7
900065a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900065aa:	687b      	ldr	r3, [r7, #4]
900065ac:	681b      	ldr	r3, [r3, #0]
900065ae:	78fa      	ldrb	r2, [r7, #3]
900065b0:	4611      	mov	r1, r2
900065b2:	4618      	mov	r0, r3
900065b4:	f006 fc6f 	bl	9000ce96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900065b8:	687b      	ldr	r3, [r7, #4]
900065ba:	681b      	ldr	r3, [r3, #0]
900065bc:	78fa      	ldrb	r2, [r7, #3]
900065be:	4611      	mov	r1, r2
900065c0:	4618      	mov	r0, r3
900065c2:	f005 fef0 	bl	9000c3a6 <USB_ReadChInterrupts>
900065c6:	4603      	mov	r3, r0
900065c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900065cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900065d0:	d112      	bne.n	900065f8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900065d2:	687b      	ldr	r3, [r7, #4]
900065d4:	681b      	ldr	r3, [r3, #0]
900065d6:	78fa      	ldrb	r2, [r7, #3]
900065d8:	4611      	mov	r1, r2
900065da:	4618      	mov	r0, r3
900065dc:	f006 fc5b 	bl	9000ce96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900065e0:	78fb      	ldrb	r3, [r7, #3]
900065e2:	015a      	lsls	r2, r3, #5
900065e4:	693b      	ldr	r3, [r7, #16]
900065e6:	4413      	add	r3, r2
900065e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900065ec:	461a      	mov	r2, r3
900065ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
900065f2:	6093      	str	r3, [r2, #8]
900065f4:	f000 bd75 	b.w	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900065f8:	687b      	ldr	r3, [r7, #4]
900065fa:	681b      	ldr	r3, [r3, #0]
900065fc:	78fa      	ldrb	r2, [r7, #3]
900065fe:	4611      	mov	r1, r2
90006600:	4618      	mov	r0, r3
90006602:	f005 fed0 	bl	9000c3a6 <USB_ReadChInterrupts>
90006606:	4603      	mov	r3, r0
90006608:	f003 0301 	and.w	r3, r3, #1
9000660c:	2b01      	cmp	r3, #1
9000660e:	f040 8128 	bne.w	90006862 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90006612:	78fb      	ldrb	r3, [r7, #3]
90006614:	015a      	lsls	r2, r3, #5
90006616:	693b      	ldr	r3, [r7, #16]
90006618:	4413      	add	r3, r2
9000661a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000661e:	461a      	mov	r2, r3
90006620:	2320      	movs	r3, #32
90006622:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
90006624:	78fa      	ldrb	r2, [r7, #3]
90006626:	6879      	ldr	r1, [r7, #4]
90006628:	4613      	mov	r3, r2
9000662a:	011b      	lsls	r3, r3, #4
9000662c:	1a9b      	subs	r3, r3, r2
9000662e:	009b      	lsls	r3, r3, #2
90006630:	440b      	add	r3, r1
90006632:	331b      	adds	r3, #27
90006634:	781b      	ldrb	r3, [r3, #0]
90006636:	2b01      	cmp	r3, #1
90006638:	d119      	bne.n	9000666e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
9000663a:	78fa      	ldrb	r2, [r7, #3]
9000663c:	6879      	ldr	r1, [r7, #4]
9000663e:	4613      	mov	r3, r2
90006640:	011b      	lsls	r3, r3, #4
90006642:	1a9b      	subs	r3, r3, r2
90006644:	009b      	lsls	r3, r3, #2
90006646:	440b      	add	r3, r1
90006648:	331b      	adds	r3, #27
9000664a:	2200      	movs	r2, #0
9000664c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000664e:	78fb      	ldrb	r3, [r7, #3]
90006650:	015a      	lsls	r2, r3, #5
90006652:	693b      	ldr	r3, [r7, #16]
90006654:	4413      	add	r3, r2
90006656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000665a:	685b      	ldr	r3, [r3, #4]
9000665c:	78fa      	ldrb	r2, [r7, #3]
9000665e:	0151      	lsls	r1, r2, #5
90006660:	693a      	ldr	r2, [r7, #16]
90006662:	440a      	add	r2, r1
90006664:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90006668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000666c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
9000666e:	687b      	ldr	r3, [r7, #4]
90006670:	799b      	ldrb	r3, [r3, #6]
90006672:	2b00      	cmp	r3, #0
90006674:	d01b      	beq.n	900066ae <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90006676:	78fa      	ldrb	r2, [r7, #3]
90006678:	6879      	ldr	r1, [r7, #4]
9000667a:	4613      	mov	r3, r2
9000667c:	011b      	lsls	r3, r3, #4
9000667e:	1a9b      	subs	r3, r3, r2
90006680:	009b      	lsls	r3, r3, #2
90006682:	440b      	add	r3, r1
90006684:	3330      	adds	r3, #48	@ 0x30
90006686:	6819      	ldr	r1, [r3, #0]
90006688:	78fb      	ldrb	r3, [r7, #3]
9000668a:	015a      	lsls	r2, r3, #5
9000668c:	693b      	ldr	r3, [r7, #16]
9000668e:	4413      	add	r3, r2
90006690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006694:	691b      	ldr	r3, [r3, #16]
90006696:	f3c3 0312 	ubfx	r3, r3, #0, #19
9000669a:	78fa      	ldrb	r2, [r7, #3]
9000669c:	1ac9      	subs	r1, r1, r3
9000669e:	6878      	ldr	r0, [r7, #4]
900066a0:	4613      	mov	r3, r2
900066a2:	011b      	lsls	r3, r3, #4
900066a4:	1a9b      	subs	r3, r3, r2
900066a6:	009b      	lsls	r3, r3, #2
900066a8:	4403      	add	r3, r0
900066aa:	3338      	adds	r3, #56	@ 0x38
900066ac:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
900066ae:	78fa      	ldrb	r2, [r7, #3]
900066b0:	6879      	ldr	r1, [r7, #4]
900066b2:	4613      	mov	r3, r2
900066b4:	011b      	lsls	r3, r3, #4
900066b6:	1a9b      	subs	r3, r3, r2
900066b8:	009b      	lsls	r3, r3, #2
900066ba:	440b      	add	r3, r1
900066bc:	334d      	adds	r3, #77	@ 0x4d
900066be:	2201      	movs	r2, #1
900066c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
900066c2:	78fa      	ldrb	r2, [r7, #3]
900066c4:	6879      	ldr	r1, [r7, #4]
900066c6:	4613      	mov	r3, r2
900066c8:	011b      	lsls	r3, r3, #4
900066ca:	1a9b      	subs	r3, r3, r2
900066cc:	009b      	lsls	r3, r3, #2
900066ce:	440b      	add	r3, r1
900066d0:	3344      	adds	r3, #68	@ 0x44
900066d2:	2200      	movs	r2, #0
900066d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900066d6:	78fb      	ldrb	r3, [r7, #3]
900066d8:	015a      	lsls	r2, r3, #5
900066da:	693b      	ldr	r3, [r7, #16]
900066dc:	4413      	add	r3, r2
900066de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900066e2:	461a      	mov	r2, r3
900066e4:	2301      	movs	r3, #1
900066e6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900066e8:	78fa      	ldrb	r2, [r7, #3]
900066ea:	6879      	ldr	r1, [r7, #4]
900066ec:	4613      	mov	r3, r2
900066ee:	011b      	lsls	r3, r3, #4
900066f0:	1a9b      	subs	r3, r3, r2
900066f2:	009b      	lsls	r3, r3, #2
900066f4:	440b      	add	r3, r1
900066f6:	3326      	adds	r3, #38	@ 0x26
900066f8:	781b      	ldrb	r3, [r3, #0]
900066fa:	2b00      	cmp	r3, #0
900066fc:	d00a      	beq.n	90006714 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900066fe:	78fa      	ldrb	r2, [r7, #3]
90006700:	6879      	ldr	r1, [r7, #4]
90006702:	4613      	mov	r3, r2
90006704:	011b      	lsls	r3, r3, #4
90006706:	1a9b      	subs	r3, r3, r2
90006708:	009b      	lsls	r3, r3, #2
9000670a:	440b      	add	r3, r1
9000670c:	3326      	adds	r3, #38	@ 0x26
9000670e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006710:	2b02      	cmp	r3, #2
90006712:	d110      	bne.n	90006736 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90006714:	687b      	ldr	r3, [r7, #4]
90006716:	681b      	ldr	r3, [r3, #0]
90006718:	78fa      	ldrb	r2, [r7, #3]
9000671a:	4611      	mov	r1, r2
9000671c:	4618      	mov	r0, r3
9000671e:	f006 fbba 	bl	9000ce96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90006722:	78fb      	ldrb	r3, [r7, #3]
90006724:	015a      	lsls	r2, r3, #5
90006726:	693b      	ldr	r3, [r7, #16]
90006728:	4413      	add	r3, r2
9000672a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000672e:	461a      	mov	r2, r3
90006730:	2310      	movs	r3, #16
90006732:	6093      	str	r3, [r2, #8]
90006734:	e03d      	b.n	900067b2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90006736:	78fa      	ldrb	r2, [r7, #3]
90006738:	6879      	ldr	r1, [r7, #4]
9000673a:	4613      	mov	r3, r2
9000673c:	011b      	lsls	r3, r3, #4
9000673e:	1a9b      	subs	r3, r3, r2
90006740:	009b      	lsls	r3, r3, #2
90006742:	440b      	add	r3, r1
90006744:	3326      	adds	r3, #38	@ 0x26
90006746:	781b      	ldrb	r3, [r3, #0]
90006748:	2b03      	cmp	r3, #3
9000674a:	d00a      	beq.n	90006762 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
9000674c:	78fa      	ldrb	r2, [r7, #3]
9000674e:	6879      	ldr	r1, [r7, #4]
90006750:	4613      	mov	r3, r2
90006752:	011b      	lsls	r3, r3, #4
90006754:	1a9b      	subs	r3, r3, r2
90006756:	009b      	lsls	r3, r3, #2
90006758:	440b      	add	r3, r1
9000675a:	3326      	adds	r3, #38	@ 0x26
9000675c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
9000675e:	2b01      	cmp	r3, #1
90006760:	d127      	bne.n	900067b2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90006762:	78fb      	ldrb	r3, [r7, #3]
90006764:	015a      	lsls	r2, r3, #5
90006766:	693b      	ldr	r3, [r7, #16]
90006768:	4413      	add	r3, r2
9000676a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000676e:	681b      	ldr	r3, [r3, #0]
90006770:	78fa      	ldrb	r2, [r7, #3]
90006772:	0151      	lsls	r1, r2, #5
90006774:	693a      	ldr	r2, [r7, #16]
90006776:	440a      	add	r2, r1
90006778:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000677c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
90006780:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90006782:	78fa      	ldrb	r2, [r7, #3]
90006784:	6879      	ldr	r1, [r7, #4]
90006786:	4613      	mov	r3, r2
90006788:	011b      	lsls	r3, r3, #4
9000678a:	1a9b      	subs	r3, r3, r2
9000678c:	009b      	lsls	r3, r3, #2
9000678e:	440b      	add	r3, r1
90006790:	334c      	adds	r3, #76	@ 0x4c
90006792:	2201      	movs	r2, #1
90006794:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90006796:	78fa      	ldrb	r2, [r7, #3]
90006798:	6879      	ldr	r1, [r7, #4]
9000679a:	4613      	mov	r3, r2
9000679c:	011b      	lsls	r3, r3, #4
9000679e:	1a9b      	subs	r3, r3, r2
900067a0:	009b      	lsls	r3, r3, #2
900067a2:	440b      	add	r3, r1
900067a4:	334c      	adds	r3, #76	@ 0x4c
900067a6:	781a      	ldrb	r2, [r3, #0]
900067a8:	78fb      	ldrb	r3, [r7, #3]
900067aa:	4619      	mov	r1, r3
900067ac:	6878      	ldr	r0, [r7, #4]
900067ae:	f7fb f949 	bl	90001a44 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
900067b2:	687b      	ldr	r3, [r7, #4]
900067b4:	799b      	ldrb	r3, [r3, #6]
900067b6:	2b01      	cmp	r3, #1
900067b8:	d13b      	bne.n	90006832 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
900067ba:	78fa      	ldrb	r2, [r7, #3]
900067bc:	6879      	ldr	r1, [r7, #4]
900067be:	4613      	mov	r3, r2
900067c0:	011b      	lsls	r3, r3, #4
900067c2:	1a9b      	subs	r3, r3, r2
900067c4:	009b      	lsls	r3, r3, #2
900067c6:	440b      	add	r3, r1
900067c8:	3338      	adds	r3, #56	@ 0x38
900067ca:	6819      	ldr	r1, [r3, #0]
900067cc:	78fa      	ldrb	r2, [r7, #3]
900067ce:	6878      	ldr	r0, [r7, #4]
900067d0:	4613      	mov	r3, r2
900067d2:	011b      	lsls	r3, r3, #4
900067d4:	1a9b      	subs	r3, r3, r2
900067d6:	009b      	lsls	r3, r3, #2
900067d8:	4403      	add	r3, r0
900067da:	3328      	adds	r3, #40	@ 0x28
900067dc:	881b      	ldrh	r3, [r3, #0]
900067de:	440b      	add	r3, r1
900067e0:	1e59      	subs	r1, r3, #1
900067e2:	78fa      	ldrb	r2, [r7, #3]
900067e4:	6878      	ldr	r0, [r7, #4]
900067e6:	4613      	mov	r3, r2
900067e8:	011b      	lsls	r3, r3, #4
900067ea:	1a9b      	subs	r3, r3, r2
900067ec:	009b      	lsls	r3, r3, #2
900067ee:	4403      	add	r3, r0
900067f0:	3328      	adds	r3, #40	@ 0x28
900067f2:	881b      	ldrh	r3, [r3, #0]
900067f4:	fbb1 f3f3 	udiv	r3, r1, r3
900067f8:	f003 0301 	and.w	r3, r3, #1
900067fc:	2b00      	cmp	r3, #0
900067fe:	f000 8470 	beq.w	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90006802:	78fa      	ldrb	r2, [r7, #3]
90006804:	6879      	ldr	r1, [r7, #4]
90006806:	4613      	mov	r3, r2
90006808:	011b      	lsls	r3, r3, #4
9000680a:	1a9b      	subs	r3, r3, r2
9000680c:	009b      	lsls	r3, r3, #2
9000680e:	440b      	add	r3, r1
90006810:	333c      	adds	r3, #60	@ 0x3c
90006812:	781b      	ldrb	r3, [r3, #0]
90006814:	78fa      	ldrb	r2, [r7, #3]
90006816:	f083 0301 	eor.w	r3, r3, #1
9000681a:	b2d8      	uxtb	r0, r3
9000681c:	6879      	ldr	r1, [r7, #4]
9000681e:	4613      	mov	r3, r2
90006820:	011b      	lsls	r3, r3, #4
90006822:	1a9b      	subs	r3, r3, r2
90006824:	009b      	lsls	r3, r3, #2
90006826:	440b      	add	r3, r1
90006828:	333c      	adds	r3, #60	@ 0x3c
9000682a:	4602      	mov	r2, r0
9000682c:	701a      	strb	r2, [r3, #0]
9000682e:	f000 bc58 	b.w	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90006832:	78fa      	ldrb	r2, [r7, #3]
90006834:	6879      	ldr	r1, [r7, #4]
90006836:	4613      	mov	r3, r2
90006838:	011b      	lsls	r3, r3, #4
9000683a:	1a9b      	subs	r3, r3, r2
9000683c:	009b      	lsls	r3, r3, #2
9000683e:	440b      	add	r3, r1
90006840:	333c      	adds	r3, #60	@ 0x3c
90006842:	781b      	ldrb	r3, [r3, #0]
90006844:	78fa      	ldrb	r2, [r7, #3]
90006846:	f083 0301 	eor.w	r3, r3, #1
9000684a:	b2d8      	uxtb	r0, r3
9000684c:	6879      	ldr	r1, [r7, #4]
9000684e:	4613      	mov	r3, r2
90006850:	011b      	lsls	r3, r3, #4
90006852:	1a9b      	subs	r3, r3, r2
90006854:	009b      	lsls	r3, r3, #2
90006856:	440b      	add	r3, r1
90006858:	333c      	adds	r3, #60	@ 0x3c
9000685a:	4602      	mov	r2, r0
9000685c:	701a      	strb	r2, [r3, #0]
9000685e:	f000 bc40 	b.w	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90006862:	687b      	ldr	r3, [r7, #4]
90006864:	681b      	ldr	r3, [r3, #0]
90006866:	78fa      	ldrb	r2, [r7, #3]
90006868:	4611      	mov	r1, r2
9000686a:	4618      	mov	r0, r3
9000686c:	f005 fd9b 	bl	9000c3a6 <USB_ReadChInterrupts>
90006870:	4603      	mov	r3, r0
90006872:	f003 0320 	and.w	r3, r3, #32
90006876:	2b20      	cmp	r3, #32
90006878:	d131      	bne.n	900068de <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
9000687a:	78fb      	ldrb	r3, [r7, #3]
9000687c:	015a      	lsls	r2, r3, #5
9000687e:	693b      	ldr	r3, [r7, #16]
90006880:	4413      	add	r3, r2
90006882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006886:	461a      	mov	r2, r3
90006888:	2320      	movs	r3, #32
9000688a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
9000688c:	78fa      	ldrb	r2, [r7, #3]
9000688e:	6879      	ldr	r1, [r7, #4]
90006890:	4613      	mov	r3, r2
90006892:	011b      	lsls	r3, r3, #4
90006894:	1a9b      	subs	r3, r3, r2
90006896:	009b      	lsls	r3, r3, #2
90006898:	440b      	add	r3, r1
9000689a:	331a      	adds	r3, #26
9000689c:	781b      	ldrb	r3, [r3, #0]
9000689e:	2b01      	cmp	r3, #1
900068a0:	f040 841f 	bne.w	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
900068a4:	78fa      	ldrb	r2, [r7, #3]
900068a6:	6879      	ldr	r1, [r7, #4]
900068a8:	4613      	mov	r3, r2
900068aa:	011b      	lsls	r3, r3, #4
900068ac:	1a9b      	subs	r3, r3, r2
900068ae:	009b      	lsls	r3, r3, #2
900068b0:	440b      	add	r3, r1
900068b2:	331b      	adds	r3, #27
900068b4:	2201      	movs	r2, #1
900068b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900068b8:	78fa      	ldrb	r2, [r7, #3]
900068ba:	6879      	ldr	r1, [r7, #4]
900068bc:	4613      	mov	r3, r2
900068be:	011b      	lsls	r3, r3, #4
900068c0:	1a9b      	subs	r3, r3, r2
900068c2:	009b      	lsls	r3, r3, #2
900068c4:	440b      	add	r3, r1
900068c6:	334d      	adds	r3, #77	@ 0x4d
900068c8:	2203      	movs	r2, #3
900068ca:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
900068cc:	687b      	ldr	r3, [r7, #4]
900068ce:	681b      	ldr	r3, [r3, #0]
900068d0:	78fa      	ldrb	r2, [r7, #3]
900068d2:	4611      	mov	r1, r2
900068d4:	4618      	mov	r0, r3
900068d6:	f006 fade 	bl	9000ce96 <USB_HC_Halt>
900068da:	f000 bc02 	b.w	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900068de:	687b      	ldr	r3, [r7, #4]
900068e0:	681b      	ldr	r3, [r3, #0]
900068e2:	78fa      	ldrb	r2, [r7, #3]
900068e4:	4611      	mov	r1, r2
900068e6:	4618      	mov	r0, r3
900068e8:	f005 fd5d 	bl	9000c3a6 <USB_ReadChInterrupts>
900068ec:	4603      	mov	r3, r0
900068ee:	f003 0302 	and.w	r3, r3, #2
900068f2:	2b02      	cmp	r3, #2
900068f4:	f040 8305 	bne.w	90006f02 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900068f8:	78fb      	ldrb	r3, [r7, #3]
900068fa:	015a      	lsls	r2, r3, #5
900068fc:	693b      	ldr	r3, [r7, #16]
900068fe:	4413      	add	r3, r2
90006900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006904:	461a      	mov	r2, r3
90006906:	2302      	movs	r3, #2
90006908:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
9000690a:	78fa      	ldrb	r2, [r7, #3]
9000690c:	6879      	ldr	r1, [r7, #4]
9000690e:	4613      	mov	r3, r2
90006910:	011b      	lsls	r3, r3, #4
90006912:	1a9b      	subs	r3, r3, r2
90006914:	009b      	lsls	r3, r3, #2
90006916:	440b      	add	r3, r1
90006918:	334d      	adds	r3, #77	@ 0x4d
9000691a:	781b      	ldrb	r3, [r3, #0]
9000691c:	2b01      	cmp	r3, #1
9000691e:	d114      	bne.n	9000694a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90006920:	78fa      	ldrb	r2, [r7, #3]
90006922:	6879      	ldr	r1, [r7, #4]
90006924:	4613      	mov	r3, r2
90006926:	011b      	lsls	r3, r3, #4
90006928:	1a9b      	subs	r3, r3, r2
9000692a:	009b      	lsls	r3, r3, #2
9000692c:	440b      	add	r3, r1
9000692e:	334d      	adds	r3, #77	@ 0x4d
90006930:	2202      	movs	r2, #2
90006932:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90006934:	78fa      	ldrb	r2, [r7, #3]
90006936:	6879      	ldr	r1, [r7, #4]
90006938:	4613      	mov	r3, r2
9000693a:	011b      	lsls	r3, r3, #4
9000693c:	1a9b      	subs	r3, r3, r2
9000693e:	009b      	lsls	r3, r3, #2
90006940:	440b      	add	r3, r1
90006942:	334c      	adds	r3, #76	@ 0x4c
90006944:	2201      	movs	r2, #1
90006946:	701a      	strb	r2, [r3, #0]
90006948:	e2cc      	b.n	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000694a:	78fa      	ldrb	r2, [r7, #3]
9000694c:	6879      	ldr	r1, [r7, #4]
9000694e:	4613      	mov	r3, r2
90006950:	011b      	lsls	r3, r3, #4
90006952:	1a9b      	subs	r3, r3, r2
90006954:	009b      	lsls	r3, r3, #2
90006956:	440b      	add	r3, r1
90006958:	334d      	adds	r3, #77	@ 0x4d
9000695a:	781b      	ldrb	r3, [r3, #0]
9000695c:	2b06      	cmp	r3, #6
9000695e:	d114      	bne.n	9000698a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90006960:	78fa      	ldrb	r2, [r7, #3]
90006962:	6879      	ldr	r1, [r7, #4]
90006964:	4613      	mov	r3, r2
90006966:	011b      	lsls	r3, r3, #4
90006968:	1a9b      	subs	r3, r3, r2
9000696a:	009b      	lsls	r3, r3, #2
9000696c:	440b      	add	r3, r1
9000696e:	334d      	adds	r3, #77	@ 0x4d
90006970:	2202      	movs	r2, #2
90006972:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
90006974:	78fa      	ldrb	r2, [r7, #3]
90006976:	6879      	ldr	r1, [r7, #4]
90006978:	4613      	mov	r3, r2
9000697a:	011b      	lsls	r3, r3, #4
9000697c:	1a9b      	subs	r3, r3, r2
9000697e:	009b      	lsls	r3, r3, #2
90006980:	440b      	add	r3, r1
90006982:	334c      	adds	r3, #76	@ 0x4c
90006984:	2205      	movs	r2, #5
90006986:	701a      	strb	r2, [r3, #0]
90006988:	e2ac      	b.n	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000698a:	78fa      	ldrb	r2, [r7, #3]
9000698c:	6879      	ldr	r1, [r7, #4]
9000698e:	4613      	mov	r3, r2
90006990:	011b      	lsls	r3, r3, #4
90006992:	1a9b      	subs	r3, r3, r2
90006994:	009b      	lsls	r3, r3, #2
90006996:	440b      	add	r3, r1
90006998:	334d      	adds	r3, #77	@ 0x4d
9000699a:	781b      	ldrb	r3, [r3, #0]
9000699c:	2b07      	cmp	r3, #7
9000699e:	d00b      	beq.n	900069b8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900069a0:	78fa      	ldrb	r2, [r7, #3]
900069a2:	6879      	ldr	r1, [r7, #4]
900069a4:	4613      	mov	r3, r2
900069a6:	011b      	lsls	r3, r3, #4
900069a8:	1a9b      	subs	r3, r3, r2
900069aa:	009b      	lsls	r3, r3, #2
900069ac:	440b      	add	r3, r1
900069ae:	334d      	adds	r3, #77	@ 0x4d
900069b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900069b2:	2b09      	cmp	r3, #9
900069b4:	f040 80a6 	bne.w	90006b04 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900069b8:	78fa      	ldrb	r2, [r7, #3]
900069ba:	6879      	ldr	r1, [r7, #4]
900069bc:	4613      	mov	r3, r2
900069be:	011b      	lsls	r3, r3, #4
900069c0:	1a9b      	subs	r3, r3, r2
900069c2:	009b      	lsls	r3, r3, #2
900069c4:	440b      	add	r3, r1
900069c6:	334d      	adds	r3, #77	@ 0x4d
900069c8:	2202      	movs	r2, #2
900069ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900069cc:	78fa      	ldrb	r2, [r7, #3]
900069ce:	6879      	ldr	r1, [r7, #4]
900069d0:	4613      	mov	r3, r2
900069d2:	011b      	lsls	r3, r3, #4
900069d4:	1a9b      	subs	r3, r3, r2
900069d6:	009b      	lsls	r3, r3, #2
900069d8:	440b      	add	r3, r1
900069da:	3344      	adds	r3, #68	@ 0x44
900069dc:	681b      	ldr	r3, [r3, #0]
900069de:	1c59      	adds	r1, r3, #1
900069e0:	6878      	ldr	r0, [r7, #4]
900069e2:	4613      	mov	r3, r2
900069e4:	011b      	lsls	r3, r3, #4
900069e6:	1a9b      	subs	r3, r3, r2
900069e8:	009b      	lsls	r3, r3, #2
900069ea:	4403      	add	r3, r0
900069ec:	3344      	adds	r3, #68	@ 0x44
900069ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900069f0:	78fa      	ldrb	r2, [r7, #3]
900069f2:	6879      	ldr	r1, [r7, #4]
900069f4:	4613      	mov	r3, r2
900069f6:	011b      	lsls	r3, r3, #4
900069f8:	1a9b      	subs	r3, r3, r2
900069fa:	009b      	lsls	r3, r3, #2
900069fc:	440b      	add	r3, r1
900069fe:	3344      	adds	r3, #68	@ 0x44
90006a00:	681b      	ldr	r3, [r3, #0]
90006a02:	2b02      	cmp	r3, #2
90006a04:	d943      	bls.n	90006a8e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90006a06:	78fa      	ldrb	r2, [r7, #3]
90006a08:	6879      	ldr	r1, [r7, #4]
90006a0a:	4613      	mov	r3, r2
90006a0c:	011b      	lsls	r3, r3, #4
90006a0e:	1a9b      	subs	r3, r3, r2
90006a10:	009b      	lsls	r3, r3, #2
90006a12:	440b      	add	r3, r1
90006a14:	3344      	adds	r3, #68	@ 0x44
90006a16:	2200      	movs	r2, #0
90006a18:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90006a1a:	78fa      	ldrb	r2, [r7, #3]
90006a1c:	6879      	ldr	r1, [r7, #4]
90006a1e:	4613      	mov	r3, r2
90006a20:	011b      	lsls	r3, r3, #4
90006a22:	1a9b      	subs	r3, r3, r2
90006a24:	009b      	lsls	r3, r3, #2
90006a26:	440b      	add	r3, r1
90006a28:	331a      	adds	r3, #26
90006a2a:	781b      	ldrb	r3, [r3, #0]
90006a2c:	2b01      	cmp	r3, #1
90006a2e:	d123      	bne.n	90006a78 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
90006a30:	78fa      	ldrb	r2, [r7, #3]
90006a32:	6879      	ldr	r1, [r7, #4]
90006a34:	4613      	mov	r3, r2
90006a36:	011b      	lsls	r3, r3, #4
90006a38:	1a9b      	subs	r3, r3, r2
90006a3a:	009b      	lsls	r3, r3, #2
90006a3c:	440b      	add	r3, r1
90006a3e:	331b      	adds	r3, #27
90006a40:	2200      	movs	r2, #0
90006a42:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
90006a44:	78fa      	ldrb	r2, [r7, #3]
90006a46:	6879      	ldr	r1, [r7, #4]
90006a48:	4613      	mov	r3, r2
90006a4a:	011b      	lsls	r3, r3, #4
90006a4c:	1a9b      	subs	r3, r3, r2
90006a4e:	009b      	lsls	r3, r3, #2
90006a50:	440b      	add	r3, r1
90006a52:	331c      	adds	r3, #28
90006a54:	2200      	movs	r2, #0
90006a56:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90006a58:	78fb      	ldrb	r3, [r7, #3]
90006a5a:	015a      	lsls	r2, r3, #5
90006a5c:	693b      	ldr	r3, [r7, #16]
90006a5e:	4413      	add	r3, r2
90006a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006a64:	685b      	ldr	r3, [r3, #4]
90006a66:	78fa      	ldrb	r2, [r7, #3]
90006a68:	0151      	lsls	r1, r2, #5
90006a6a:	693a      	ldr	r2, [r7, #16]
90006a6c:	440a      	add	r2, r1
90006a6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90006a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006a76:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
90006a78:	78fa      	ldrb	r2, [r7, #3]
90006a7a:	6879      	ldr	r1, [r7, #4]
90006a7c:	4613      	mov	r3, r2
90006a7e:	011b      	lsls	r3, r3, #4
90006a80:	1a9b      	subs	r3, r3, r2
90006a82:	009b      	lsls	r3, r3, #2
90006a84:	440b      	add	r3, r1
90006a86:	334c      	adds	r3, #76	@ 0x4c
90006a88:	2204      	movs	r2, #4
90006a8a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90006a8c:	e229      	b.n	90006ee2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90006a8e:	78fa      	ldrb	r2, [r7, #3]
90006a90:	6879      	ldr	r1, [r7, #4]
90006a92:	4613      	mov	r3, r2
90006a94:	011b      	lsls	r3, r3, #4
90006a96:	1a9b      	subs	r3, r3, r2
90006a98:	009b      	lsls	r3, r3, #2
90006a9a:	440b      	add	r3, r1
90006a9c:	334c      	adds	r3, #76	@ 0x4c
90006a9e:	2202      	movs	r2, #2
90006aa0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006aa2:	78fa      	ldrb	r2, [r7, #3]
90006aa4:	6879      	ldr	r1, [r7, #4]
90006aa6:	4613      	mov	r3, r2
90006aa8:	011b      	lsls	r3, r3, #4
90006aaa:	1a9b      	subs	r3, r3, r2
90006aac:	009b      	lsls	r3, r3, #2
90006aae:	440b      	add	r3, r1
90006ab0:	3326      	adds	r3, #38	@ 0x26
90006ab2:	781b      	ldrb	r3, [r3, #0]
90006ab4:	2b00      	cmp	r3, #0
90006ab6:	d00b      	beq.n	90006ad0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90006ab8:	78fa      	ldrb	r2, [r7, #3]
90006aba:	6879      	ldr	r1, [r7, #4]
90006abc:	4613      	mov	r3, r2
90006abe:	011b      	lsls	r3, r3, #4
90006ac0:	1a9b      	subs	r3, r3, r2
90006ac2:	009b      	lsls	r3, r3, #2
90006ac4:	440b      	add	r3, r1
90006ac6:	3326      	adds	r3, #38	@ 0x26
90006ac8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006aca:	2b02      	cmp	r3, #2
90006acc:	f040 8209 	bne.w	90006ee2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90006ad0:	78fb      	ldrb	r3, [r7, #3]
90006ad2:	015a      	lsls	r2, r3, #5
90006ad4:	693b      	ldr	r3, [r7, #16]
90006ad6:	4413      	add	r3, r2
90006ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006adc:	681b      	ldr	r3, [r3, #0]
90006ade:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90006ae0:	68fb      	ldr	r3, [r7, #12]
90006ae2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90006ae6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90006ae8:	68fb      	ldr	r3, [r7, #12]
90006aea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90006aee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90006af0:	78fb      	ldrb	r3, [r7, #3]
90006af2:	015a      	lsls	r2, r3, #5
90006af4:	693b      	ldr	r3, [r7, #16]
90006af6:	4413      	add	r3, r2
90006af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006afc:	461a      	mov	r2, r3
90006afe:	68fb      	ldr	r3, [r7, #12]
90006b00:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90006b02:	e1ee      	b.n	90006ee2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90006b04:	78fa      	ldrb	r2, [r7, #3]
90006b06:	6879      	ldr	r1, [r7, #4]
90006b08:	4613      	mov	r3, r2
90006b0a:	011b      	lsls	r3, r3, #4
90006b0c:	1a9b      	subs	r3, r3, r2
90006b0e:	009b      	lsls	r3, r3, #2
90006b10:	440b      	add	r3, r1
90006b12:	334d      	adds	r3, #77	@ 0x4d
90006b14:	781b      	ldrb	r3, [r3, #0]
90006b16:	2b05      	cmp	r3, #5
90006b18:	f040 80c8 	bne.w	90006cac <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90006b1c:	78fa      	ldrb	r2, [r7, #3]
90006b1e:	6879      	ldr	r1, [r7, #4]
90006b20:	4613      	mov	r3, r2
90006b22:	011b      	lsls	r3, r3, #4
90006b24:	1a9b      	subs	r3, r3, r2
90006b26:	009b      	lsls	r3, r3, #2
90006b28:	440b      	add	r3, r1
90006b2a:	334d      	adds	r3, #77	@ 0x4d
90006b2c:	2202      	movs	r2, #2
90006b2e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90006b30:	78fa      	ldrb	r2, [r7, #3]
90006b32:	6879      	ldr	r1, [r7, #4]
90006b34:	4613      	mov	r3, r2
90006b36:	011b      	lsls	r3, r3, #4
90006b38:	1a9b      	subs	r3, r3, r2
90006b3a:	009b      	lsls	r3, r3, #2
90006b3c:	440b      	add	r3, r1
90006b3e:	331b      	adds	r3, #27
90006b40:	781b      	ldrb	r3, [r3, #0]
90006b42:	2b01      	cmp	r3, #1
90006b44:	f040 81ce 	bne.w	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90006b48:	78fa      	ldrb	r2, [r7, #3]
90006b4a:	6879      	ldr	r1, [r7, #4]
90006b4c:	4613      	mov	r3, r2
90006b4e:	011b      	lsls	r3, r3, #4
90006b50:	1a9b      	subs	r3, r3, r2
90006b52:	009b      	lsls	r3, r3, #2
90006b54:	440b      	add	r3, r1
90006b56:	3326      	adds	r3, #38	@ 0x26
90006b58:	781b      	ldrb	r3, [r3, #0]
90006b5a:	2b03      	cmp	r3, #3
90006b5c:	d16b      	bne.n	90006c36 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90006b5e:	78fa      	ldrb	r2, [r7, #3]
90006b60:	6879      	ldr	r1, [r7, #4]
90006b62:	4613      	mov	r3, r2
90006b64:	011b      	lsls	r3, r3, #4
90006b66:	1a9b      	subs	r3, r3, r2
90006b68:	009b      	lsls	r3, r3, #2
90006b6a:	440b      	add	r3, r1
90006b6c:	3348      	adds	r3, #72	@ 0x48
90006b6e:	681b      	ldr	r3, [r3, #0]
90006b70:	1c59      	adds	r1, r3, #1
90006b72:	6878      	ldr	r0, [r7, #4]
90006b74:	4613      	mov	r3, r2
90006b76:	011b      	lsls	r3, r3, #4
90006b78:	1a9b      	subs	r3, r3, r2
90006b7a:	009b      	lsls	r3, r3, #2
90006b7c:	4403      	add	r3, r0
90006b7e:	3348      	adds	r3, #72	@ 0x48
90006b80:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
90006b82:	78fa      	ldrb	r2, [r7, #3]
90006b84:	6879      	ldr	r1, [r7, #4]
90006b86:	4613      	mov	r3, r2
90006b88:	011b      	lsls	r3, r3, #4
90006b8a:	1a9b      	subs	r3, r3, r2
90006b8c:	009b      	lsls	r3, r3, #2
90006b8e:	440b      	add	r3, r1
90006b90:	3348      	adds	r3, #72	@ 0x48
90006b92:	681b      	ldr	r3, [r3, #0]
90006b94:	2b02      	cmp	r3, #2
90006b96:	d943      	bls.n	90006c20 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
90006b98:	78fa      	ldrb	r2, [r7, #3]
90006b9a:	6879      	ldr	r1, [r7, #4]
90006b9c:	4613      	mov	r3, r2
90006b9e:	011b      	lsls	r3, r3, #4
90006ba0:	1a9b      	subs	r3, r3, r2
90006ba2:	009b      	lsls	r3, r3, #2
90006ba4:	440b      	add	r3, r1
90006ba6:	3348      	adds	r3, #72	@ 0x48
90006ba8:	2200      	movs	r2, #0
90006baa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
90006bac:	78fa      	ldrb	r2, [r7, #3]
90006bae:	6879      	ldr	r1, [r7, #4]
90006bb0:	4613      	mov	r3, r2
90006bb2:	011b      	lsls	r3, r3, #4
90006bb4:	1a9b      	subs	r3, r3, r2
90006bb6:	009b      	lsls	r3, r3, #2
90006bb8:	440b      	add	r3, r1
90006bba:	331b      	adds	r3, #27
90006bbc:	2200      	movs	r2, #0
90006bbe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
90006bc0:	78fa      	ldrb	r2, [r7, #3]
90006bc2:	6879      	ldr	r1, [r7, #4]
90006bc4:	4613      	mov	r3, r2
90006bc6:	011b      	lsls	r3, r3, #4
90006bc8:	1a9b      	subs	r3, r3, r2
90006bca:	009b      	lsls	r3, r3, #2
90006bcc:	440b      	add	r3, r1
90006bce:	3344      	adds	r3, #68	@ 0x44
90006bd0:	681b      	ldr	r3, [r3, #0]
90006bd2:	2b02      	cmp	r3, #2
90006bd4:	d809      	bhi.n	90006bea <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90006bd6:	78fa      	ldrb	r2, [r7, #3]
90006bd8:	6879      	ldr	r1, [r7, #4]
90006bda:	4613      	mov	r3, r2
90006bdc:	011b      	lsls	r3, r3, #4
90006bde:	1a9b      	subs	r3, r3, r2
90006be0:	009b      	lsls	r3, r3, #2
90006be2:	440b      	add	r3, r1
90006be4:	331c      	adds	r3, #28
90006be6:	2201      	movs	r2, #1
90006be8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90006bea:	78fb      	ldrb	r3, [r7, #3]
90006bec:	015a      	lsls	r2, r3, #5
90006bee:	693b      	ldr	r3, [r7, #16]
90006bf0:	4413      	add	r3, r2
90006bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006bf6:	685b      	ldr	r3, [r3, #4]
90006bf8:	78fa      	ldrb	r2, [r7, #3]
90006bfa:	0151      	lsls	r1, r2, #5
90006bfc:	693a      	ldr	r2, [r7, #16]
90006bfe:	440a      	add	r2, r1
90006c00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90006c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006c08:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90006c0a:	78fa      	ldrb	r2, [r7, #3]
90006c0c:	6879      	ldr	r1, [r7, #4]
90006c0e:	4613      	mov	r3, r2
90006c10:	011b      	lsls	r3, r3, #4
90006c12:	1a9b      	subs	r3, r3, r2
90006c14:	009b      	lsls	r3, r3, #2
90006c16:	440b      	add	r3, r1
90006c18:	334c      	adds	r3, #76	@ 0x4c
90006c1a:	2204      	movs	r2, #4
90006c1c:	701a      	strb	r2, [r3, #0]
90006c1e:	e014      	b.n	90006c4a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90006c20:	78fa      	ldrb	r2, [r7, #3]
90006c22:	6879      	ldr	r1, [r7, #4]
90006c24:	4613      	mov	r3, r2
90006c26:	011b      	lsls	r3, r3, #4
90006c28:	1a9b      	subs	r3, r3, r2
90006c2a:	009b      	lsls	r3, r3, #2
90006c2c:	440b      	add	r3, r1
90006c2e:	334c      	adds	r3, #76	@ 0x4c
90006c30:	2202      	movs	r2, #2
90006c32:	701a      	strb	r2, [r3, #0]
90006c34:	e009      	b.n	90006c4a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
90006c36:	78fa      	ldrb	r2, [r7, #3]
90006c38:	6879      	ldr	r1, [r7, #4]
90006c3a:	4613      	mov	r3, r2
90006c3c:	011b      	lsls	r3, r3, #4
90006c3e:	1a9b      	subs	r3, r3, r2
90006c40:	009b      	lsls	r3, r3, #2
90006c42:	440b      	add	r3, r1
90006c44:	334c      	adds	r3, #76	@ 0x4c
90006c46:	2202      	movs	r2, #2
90006c48:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006c4a:	78fa      	ldrb	r2, [r7, #3]
90006c4c:	6879      	ldr	r1, [r7, #4]
90006c4e:	4613      	mov	r3, r2
90006c50:	011b      	lsls	r3, r3, #4
90006c52:	1a9b      	subs	r3, r3, r2
90006c54:	009b      	lsls	r3, r3, #2
90006c56:	440b      	add	r3, r1
90006c58:	3326      	adds	r3, #38	@ 0x26
90006c5a:	781b      	ldrb	r3, [r3, #0]
90006c5c:	2b00      	cmp	r3, #0
90006c5e:	d00b      	beq.n	90006c78 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90006c60:	78fa      	ldrb	r2, [r7, #3]
90006c62:	6879      	ldr	r1, [r7, #4]
90006c64:	4613      	mov	r3, r2
90006c66:	011b      	lsls	r3, r3, #4
90006c68:	1a9b      	subs	r3, r3, r2
90006c6a:	009b      	lsls	r3, r3, #2
90006c6c:	440b      	add	r3, r1
90006c6e:	3326      	adds	r3, #38	@ 0x26
90006c70:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006c72:	2b02      	cmp	r3, #2
90006c74:	f040 8136 	bne.w	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90006c78:	78fb      	ldrb	r3, [r7, #3]
90006c7a:	015a      	lsls	r2, r3, #5
90006c7c:	693b      	ldr	r3, [r7, #16]
90006c7e:	4413      	add	r3, r2
90006c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006c84:	681b      	ldr	r3, [r3, #0]
90006c86:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90006c88:	68fb      	ldr	r3, [r7, #12]
90006c8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90006c8e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90006c90:	68fb      	ldr	r3, [r7, #12]
90006c92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90006c96:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90006c98:	78fb      	ldrb	r3, [r7, #3]
90006c9a:	015a      	lsls	r2, r3, #5
90006c9c:	693b      	ldr	r3, [r7, #16]
90006c9e:	4413      	add	r3, r2
90006ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006ca4:	461a      	mov	r2, r3
90006ca6:	68fb      	ldr	r3, [r7, #12]
90006ca8:	6013      	str	r3, [r2, #0]
90006caa:	e11b      	b.n	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90006cac:	78fa      	ldrb	r2, [r7, #3]
90006cae:	6879      	ldr	r1, [r7, #4]
90006cb0:	4613      	mov	r3, r2
90006cb2:	011b      	lsls	r3, r3, #4
90006cb4:	1a9b      	subs	r3, r3, r2
90006cb6:	009b      	lsls	r3, r3, #2
90006cb8:	440b      	add	r3, r1
90006cba:	334d      	adds	r3, #77	@ 0x4d
90006cbc:	781b      	ldrb	r3, [r3, #0]
90006cbe:	2b03      	cmp	r3, #3
90006cc0:	f040 8081 	bne.w	90006dc6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90006cc4:	78fa      	ldrb	r2, [r7, #3]
90006cc6:	6879      	ldr	r1, [r7, #4]
90006cc8:	4613      	mov	r3, r2
90006cca:	011b      	lsls	r3, r3, #4
90006ccc:	1a9b      	subs	r3, r3, r2
90006cce:	009b      	lsls	r3, r3, #2
90006cd0:	440b      	add	r3, r1
90006cd2:	334d      	adds	r3, #77	@ 0x4d
90006cd4:	2202      	movs	r2, #2
90006cd6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90006cd8:	78fa      	ldrb	r2, [r7, #3]
90006cda:	6879      	ldr	r1, [r7, #4]
90006cdc:	4613      	mov	r3, r2
90006cde:	011b      	lsls	r3, r3, #4
90006ce0:	1a9b      	subs	r3, r3, r2
90006ce2:	009b      	lsls	r3, r3, #2
90006ce4:	440b      	add	r3, r1
90006ce6:	331b      	adds	r3, #27
90006ce8:	781b      	ldrb	r3, [r3, #0]
90006cea:	2b01      	cmp	r3, #1
90006cec:	f040 80fa 	bne.w	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90006cf0:	78fa      	ldrb	r2, [r7, #3]
90006cf2:	6879      	ldr	r1, [r7, #4]
90006cf4:	4613      	mov	r3, r2
90006cf6:	011b      	lsls	r3, r3, #4
90006cf8:	1a9b      	subs	r3, r3, r2
90006cfa:	009b      	lsls	r3, r3, #2
90006cfc:	440b      	add	r3, r1
90006cfe:	334c      	adds	r3, #76	@ 0x4c
90006d00:	2202      	movs	r2, #2
90006d02:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90006d04:	78fb      	ldrb	r3, [r7, #3]
90006d06:	015a      	lsls	r2, r3, #5
90006d08:	693b      	ldr	r3, [r7, #16]
90006d0a:	4413      	add	r3, r2
90006d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006d10:	685b      	ldr	r3, [r3, #4]
90006d12:	78fa      	ldrb	r2, [r7, #3]
90006d14:	0151      	lsls	r1, r2, #5
90006d16:	693a      	ldr	r2, [r7, #16]
90006d18:	440a      	add	r2, r1
90006d1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90006d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006d22:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90006d24:	78fb      	ldrb	r3, [r7, #3]
90006d26:	015a      	lsls	r2, r3, #5
90006d28:	693b      	ldr	r3, [r7, #16]
90006d2a:	4413      	add	r3, r2
90006d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006d30:	68db      	ldr	r3, [r3, #12]
90006d32:	78fa      	ldrb	r2, [r7, #3]
90006d34:	0151      	lsls	r1, r2, #5
90006d36:	693a      	ldr	r2, [r7, #16]
90006d38:	440a      	add	r2, r1
90006d3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90006d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90006d42:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90006d44:	78fb      	ldrb	r3, [r7, #3]
90006d46:	015a      	lsls	r2, r3, #5
90006d48:	693b      	ldr	r3, [r7, #16]
90006d4a:	4413      	add	r3, r2
90006d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006d50:	68db      	ldr	r3, [r3, #12]
90006d52:	78fa      	ldrb	r2, [r7, #3]
90006d54:	0151      	lsls	r1, r2, #5
90006d56:	693a      	ldr	r2, [r7, #16]
90006d58:	440a      	add	r2, r1
90006d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90006d5e:	f023 0320 	bic.w	r3, r3, #32
90006d62:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006d64:	78fa      	ldrb	r2, [r7, #3]
90006d66:	6879      	ldr	r1, [r7, #4]
90006d68:	4613      	mov	r3, r2
90006d6a:	011b      	lsls	r3, r3, #4
90006d6c:	1a9b      	subs	r3, r3, r2
90006d6e:	009b      	lsls	r3, r3, #2
90006d70:	440b      	add	r3, r1
90006d72:	3326      	adds	r3, #38	@ 0x26
90006d74:	781b      	ldrb	r3, [r3, #0]
90006d76:	2b00      	cmp	r3, #0
90006d78:	d00b      	beq.n	90006d92 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90006d7a:	78fa      	ldrb	r2, [r7, #3]
90006d7c:	6879      	ldr	r1, [r7, #4]
90006d7e:	4613      	mov	r3, r2
90006d80:	011b      	lsls	r3, r3, #4
90006d82:	1a9b      	subs	r3, r3, r2
90006d84:	009b      	lsls	r3, r3, #2
90006d86:	440b      	add	r3, r1
90006d88:	3326      	adds	r3, #38	@ 0x26
90006d8a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006d8c:	2b02      	cmp	r3, #2
90006d8e:	f040 80a9 	bne.w	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90006d92:	78fb      	ldrb	r3, [r7, #3]
90006d94:	015a      	lsls	r2, r3, #5
90006d96:	693b      	ldr	r3, [r7, #16]
90006d98:	4413      	add	r3, r2
90006d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006d9e:	681b      	ldr	r3, [r3, #0]
90006da0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90006da2:	68fb      	ldr	r3, [r7, #12]
90006da4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90006da8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90006daa:	68fb      	ldr	r3, [r7, #12]
90006dac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90006db0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90006db2:	78fb      	ldrb	r3, [r7, #3]
90006db4:	015a      	lsls	r2, r3, #5
90006db6:	693b      	ldr	r3, [r7, #16]
90006db8:	4413      	add	r3, r2
90006dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006dbe:	461a      	mov	r2, r3
90006dc0:	68fb      	ldr	r3, [r7, #12]
90006dc2:	6013      	str	r3, [r2, #0]
90006dc4:	e08e      	b.n	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90006dc6:	78fa      	ldrb	r2, [r7, #3]
90006dc8:	6879      	ldr	r1, [r7, #4]
90006dca:	4613      	mov	r3, r2
90006dcc:	011b      	lsls	r3, r3, #4
90006dce:	1a9b      	subs	r3, r3, r2
90006dd0:	009b      	lsls	r3, r3, #2
90006dd2:	440b      	add	r3, r1
90006dd4:	334d      	adds	r3, #77	@ 0x4d
90006dd6:	781b      	ldrb	r3, [r3, #0]
90006dd8:	2b04      	cmp	r3, #4
90006dda:	d143      	bne.n	90006e64 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90006ddc:	78fa      	ldrb	r2, [r7, #3]
90006dde:	6879      	ldr	r1, [r7, #4]
90006de0:	4613      	mov	r3, r2
90006de2:	011b      	lsls	r3, r3, #4
90006de4:	1a9b      	subs	r3, r3, r2
90006de6:	009b      	lsls	r3, r3, #2
90006de8:	440b      	add	r3, r1
90006dea:	334d      	adds	r3, #77	@ 0x4d
90006dec:	2202      	movs	r2, #2
90006dee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90006df0:	78fa      	ldrb	r2, [r7, #3]
90006df2:	6879      	ldr	r1, [r7, #4]
90006df4:	4613      	mov	r3, r2
90006df6:	011b      	lsls	r3, r3, #4
90006df8:	1a9b      	subs	r3, r3, r2
90006dfa:	009b      	lsls	r3, r3, #2
90006dfc:	440b      	add	r3, r1
90006dfe:	334c      	adds	r3, #76	@ 0x4c
90006e00:	2202      	movs	r2, #2
90006e02:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006e04:	78fa      	ldrb	r2, [r7, #3]
90006e06:	6879      	ldr	r1, [r7, #4]
90006e08:	4613      	mov	r3, r2
90006e0a:	011b      	lsls	r3, r3, #4
90006e0c:	1a9b      	subs	r3, r3, r2
90006e0e:	009b      	lsls	r3, r3, #2
90006e10:	440b      	add	r3, r1
90006e12:	3326      	adds	r3, #38	@ 0x26
90006e14:	781b      	ldrb	r3, [r3, #0]
90006e16:	2b00      	cmp	r3, #0
90006e18:	d00a      	beq.n	90006e30 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90006e1a:	78fa      	ldrb	r2, [r7, #3]
90006e1c:	6879      	ldr	r1, [r7, #4]
90006e1e:	4613      	mov	r3, r2
90006e20:	011b      	lsls	r3, r3, #4
90006e22:	1a9b      	subs	r3, r3, r2
90006e24:	009b      	lsls	r3, r3, #2
90006e26:	440b      	add	r3, r1
90006e28:	3326      	adds	r3, #38	@ 0x26
90006e2a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006e2c:	2b02      	cmp	r3, #2
90006e2e:	d159      	bne.n	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90006e30:	78fb      	ldrb	r3, [r7, #3]
90006e32:	015a      	lsls	r2, r3, #5
90006e34:	693b      	ldr	r3, [r7, #16]
90006e36:	4413      	add	r3, r2
90006e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006e3c:	681b      	ldr	r3, [r3, #0]
90006e3e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90006e40:	68fb      	ldr	r3, [r7, #12]
90006e42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90006e46:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90006e48:	68fb      	ldr	r3, [r7, #12]
90006e4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90006e4e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90006e50:	78fb      	ldrb	r3, [r7, #3]
90006e52:	015a      	lsls	r2, r3, #5
90006e54:	693b      	ldr	r3, [r7, #16]
90006e56:	4413      	add	r3, r2
90006e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006e5c:	461a      	mov	r2, r3
90006e5e:	68fb      	ldr	r3, [r7, #12]
90006e60:	6013      	str	r3, [r2, #0]
90006e62:	e03f      	b.n	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90006e64:	78fa      	ldrb	r2, [r7, #3]
90006e66:	6879      	ldr	r1, [r7, #4]
90006e68:	4613      	mov	r3, r2
90006e6a:	011b      	lsls	r3, r3, #4
90006e6c:	1a9b      	subs	r3, r3, r2
90006e6e:	009b      	lsls	r3, r3, #2
90006e70:	440b      	add	r3, r1
90006e72:	334d      	adds	r3, #77	@ 0x4d
90006e74:	781b      	ldrb	r3, [r3, #0]
90006e76:	2b08      	cmp	r3, #8
90006e78:	d126      	bne.n	90006ec8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90006e7a:	78fa      	ldrb	r2, [r7, #3]
90006e7c:	6879      	ldr	r1, [r7, #4]
90006e7e:	4613      	mov	r3, r2
90006e80:	011b      	lsls	r3, r3, #4
90006e82:	1a9b      	subs	r3, r3, r2
90006e84:	009b      	lsls	r3, r3, #2
90006e86:	440b      	add	r3, r1
90006e88:	334d      	adds	r3, #77	@ 0x4d
90006e8a:	2202      	movs	r2, #2
90006e8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90006e8e:	78fa      	ldrb	r2, [r7, #3]
90006e90:	6879      	ldr	r1, [r7, #4]
90006e92:	4613      	mov	r3, r2
90006e94:	011b      	lsls	r3, r3, #4
90006e96:	1a9b      	subs	r3, r3, r2
90006e98:	009b      	lsls	r3, r3, #2
90006e9a:	440b      	add	r3, r1
90006e9c:	3344      	adds	r3, #68	@ 0x44
90006e9e:	681b      	ldr	r3, [r3, #0]
90006ea0:	1c59      	adds	r1, r3, #1
90006ea2:	6878      	ldr	r0, [r7, #4]
90006ea4:	4613      	mov	r3, r2
90006ea6:	011b      	lsls	r3, r3, #4
90006ea8:	1a9b      	subs	r3, r3, r2
90006eaa:	009b      	lsls	r3, r3, #2
90006eac:	4403      	add	r3, r0
90006eae:	3344      	adds	r3, #68	@ 0x44
90006eb0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90006eb2:	78fa      	ldrb	r2, [r7, #3]
90006eb4:	6879      	ldr	r1, [r7, #4]
90006eb6:	4613      	mov	r3, r2
90006eb8:	011b      	lsls	r3, r3, #4
90006eba:	1a9b      	subs	r3, r3, r2
90006ebc:	009b      	lsls	r3, r3, #2
90006ebe:	440b      	add	r3, r1
90006ec0:	334c      	adds	r3, #76	@ 0x4c
90006ec2:	2204      	movs	r2, #4
90006ec4:	701a      	strb	r2, [r3, #0]
90006ec6:	e00d      	b.n	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90006ec8:	78fa      	ldrb	r2, [r7, #3]
90006eca:	6879      	ldr	r1, [r7, #4]
90006ecc:	4613      	mov	r3, r2
90006ece:	011b      	lsls	r3, r3, #4
90006ed0:	1a9b      	subs	r3, r3, r2
90006ed2:	009b      	lsls	r3, r3, #2
90006ed4:	440b      	add	r3, r1
90006ed6:	334d      	adds	r3, #77	@ 0x4d
90006ed8:	781b      	ldrb	r3, [r3, #0]
90006eda:	2b02      	cmp	r3, #2
90006edc:	f000 8100 	beq.w	900070e0 <HCD_HC_IN_IRQHandler+0xcca>
90006ee0:	e000      	b.n	90006ee4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90006ee2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90006ee4:	78fa      	ldrb	r2, [r7, #3]
90006ee6:	6879      	ldr	r1, [r7, #4]
90006ee8:	4613      	mov	r3, r2
90006eea:	011b      	lsls	r3, r3, #4
90006eec:	1a9b      	subs	r3, r3, r2
90006eee:	009b      	lsls	r3, r3, #2
90006ef0:	440b      	add	r3, r1
90006ef2:	334c      	adds	r3, #76	@ 0x4c
90006ef4:	781a      	ldrb	r2, [r3, #0]
90006ef6:	78fb      	ldrb	r3, [r7, #3]
90006ef8:	4619      	mov	r1, r3
90006efa:	6878      	ldr	r0, [r7, #4]
90006efc:	f7fa fda2 	bl	90001a44 <HAL_HCD_HC_NotifyURBChange_Callback>
90006f00:	e0ef      	b.n	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90006f02:	687b      	ldr	r3, [r7, #4]
90006f04:	681b      	ldr	r3, [r3, #0]
90006f06:	78fa      	ldrb	r2, [r7, #3]
90006f08:	4611      	mov	r1, r2
90006f0a:	4618      	mov	r0, r3
90006f0c:	f005 fa4b 	bl	9000c3a6 <USB_ReadChInterrupts>
90006f10:	4603      	mov	r3, r0
90006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90006f16:	2b40      	cmp	r3, #64	@ 0x40
90006f18:	d12f      	bne.n	90006f7a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90006f1a:	78fb      	ldrb	r3, [r7, #3]
90006f1c:	015a      	lsls	r2, r3, #5
90006f1e:	693b      	ldr	r3, [r7, #16]
90006f20:	4413      	add	r3, r2
90006f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90006f26:	461a      	mov	r2, r3
90006f28:	2340      	movs	r3, #64	@ 0x40
90006f2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90006f2c:	78fa      	ldrb	r2, [r7, #3]
90006f2e:	6879      	ldr	r1, [r7, #4]
90006f30:	4613      	mov	r3, r2
90006f32:	011b      	lsls	r3, r3, #4
90006f34:	1a9b      	subs	r3, r3, r2
90006f36:	009b      	lsls	r3, r3, #2
90006f38:	440b      	add	r3, r1
90006f3a:	334d      	adds	r3, #77	@ 0x4d
90006f3c:	2205      	movs	r2, #5
90006f3e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90006f40:	78fa      	ldrb	r2, [r7, #3]
90006f42:	6879      	ldr	r1, [r7, #4]
90006f44:	4613      	mov	r3, r2
90006f46:	011b      	lsls	r3, r3, #4
90006f48:	1a9b      	subs	r3, r3, r2
90006f4a:	009b      	lsls	r3, r3, #2
90006f4c:	440b      	add	r3, r1
90006f4e:	331a      	adds	r3, #26
90006f50:	781b      	ldrb	r3, [r3, #0]
90006f52:	2b00      	cmp	r3, #0
90006f54:	d109      	bne.n	90006f6a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90006f56:	78fa      	ldrb	r2, [r7, #3]
90006f58:	6879      	ldr	r1, [r7, #4]
90006f5a:	4613      	mov	r3, r2
90006f5c:	011b      	lsls	r3, r3, #4
90006f5e:	1a9b      	subs	r3, r3, r2
90006f60:	009b      	lsls	r3, r3, #2
90006f62:	440b      	add	r3, r1
90006f64:	3344      	adds	r3, #68	@ 0x44
90006f66:	2200      	movs	r2, #0
90006f68:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90006f6a:	687b      	ldr	r3, [r7, #4]
90006f6c:	681b      	ldr	r3, [r3, #0]
90006f6e:	78fa      	ldrb	r2, [r7, #3]
90006f70:	4611      	mov	r1, r2
90006f72:	4618      	mov	r0, r3
90006f74:	f005 ff8f 	bl	9000ce96 <USB_HC_Halt>
90006f78:	e0b3      	b.n	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90006f7a:	687b      	ldr	r3, [r7, #4]
90006f7c:	681b      	ldr	r3, [r3, #0]
90006f7e:	78fa      	ldrb	r2, [r7, #3]
90006f80:	4611      	mov	r1, r2
90006f82:	4618      	mov	r0, r3
90006f84:	f005 fa0f 	bl	9000c3a6 <USB_ReadChInterrupts>
90006f88:	4603      	mov	r3, r0
90006f8a:	f003 0310 	and.w	r3, r3, #16
90006f8e:	2b10      	cmp	r3, #16
90006f90:	f040 80a7 	bne.w	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90006f94:	78fa      	ldrb	r2, [r7, #3]
90006f96:	6879      	ldr	r1, [r7, #4]
90006f98:	4613      	mov	r3, r2
90006f9a:	011b      	lsls	r3, r3, #4
90006f9c:	1a9b      	subs	r3, r3, r2
90006f9e:	009b      	lsls	r3, r3, #2
90006fa0:	440b      	add	r3, r1
90006fa2:	3326      	adds	r3, #38	@ 0x26
90006fa4:	781b      	ldrb	r3, [r3, #0]
90006fa6:	2b03      	cmp	r3, #3
90006fa8:	d11b      	bne.n	90006fe2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90006faa:	78fa      	ldrb	r2, [r7, #3]
90006fac:	6879      	ldr	r1, [r7, #4]
90006fae:	4613      	mov	r3, r2
90006fb0:	011b      	lsls	r3, r3, #4
90006fb2:	1a9b      	subs	r3, r3, r2
90006fb4:	009b      	lsls	r3, r3, #2
90006fb6:	440b      	add	r3, r1
90006fb8:	3344      	adds	r3, #68	@ 0x44
90006fba:	2200      	movs	r2, #0
90006fbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90006fbe:	78fa      	ldrb	r2, [r7, #3]
90006fc0:	6879      	ldr	r1, [r7, #4]
90006fc2:	4613      	mov	r3, r2
90006fc4:	011b      	lsls	r3, r3, #4
90006fc6:	1a9b      	subs	r3, r3, r2
90006fc8:	009b      	lsls	r3, r3, #2
90006fca:	440b      	add	r3, r1
90006fcc:	334d      	adds	r3, #77	@ 0x4d
90006fce:	2204      	movs	r2, #4
90006fd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90006fd2:	687b      	ldr	r3, [r7, #4]
90006fd4:	681b      	ldr	r3, [r3, #0]
90006fd6:	78fa      	ldrb	r2, [r7, #3]
90006fd8:	4611      	mov	r1, r2
90006fda:	4618      	mov	r0, r3
90006fdc:	f005 ff5b 	bl	9000ce96 <USB_HC_Halt>
90006fe0:	e03f      	b.n	90007062 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90006fe2:	78fa      	ldrb	r2, [r7, #3]
90006fe4:	6879      	ldr	r1, [r7, #4]
90006fe6:	4613      	mov	r3, r2
90006fe8:	011b      	lsls	r3, r3, #4
90006fea:	1a9b      	subs	r3, r3, r2
90006fec:	009b      	lsls	r3, r3, #2
90006fee:	440b      	add	r3, r1
90006ff0:	3326      	adds	r3, #38	@ 0x26
90006ff2:	781b      	ldrb	r3, [r3, #0]
90006ff4:	2b00      	cmp	r3, #0
90006ff6:	d00a      	beq.n	9000700e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90006ff8:	78fa      	ldrb	r2, [r7, #3]
90006ffa:	6879      	ldr	r1, [r7, #4]
90006ffc:	4613      	mov	r3, r2
90006ffe:	011b      	lsls	r3, r3, #4
90007000:	1a9b      	subs	r3, r3, r2
90007002:	009b      	lsls	r3, r3, #2
90007004:	440b      	add	r3, r1
90007006:	3326      	adds	r3, #38	@ 0x26
90007008:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000700a:	2b02      	cmp	r3, #2
9000700c:	d129      	bne.n	90007062 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
9000700e:	78fa      	ldrb	r2, [r7, #3]
90007010:	6879      	ldr	r1, [r7, #4]
90007012:	4613      	mov	r3, r2
90007014:	011b      	lsls	r3, r3, #4
90007016:	1a9b      	subs	r3, r3, r2
90007018:	009b      	lsls	r3, r3, #2
9000701a:	440b      	add	r3, r1
9000701c:	3344      	adds	r3, #68	@ 0x44
9000701e:	2200      	movs	r2, #0
90007020:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90007022:	687b      	ldr	r3, [r7, #4]
90007024:	799b      	ldrb	r3, [r3, #6]
90007026:	2b00      	cmp	r3, #0
90007028:	d00a      	beq.n	90007040 <HCD_HC_IN_IRQHandler+0xc2a>
9000702a:	78fa      	ldrb	r2, [r7, #3]
9000702c:	6879      	ldr	r1, [r7, #4]
9000702e:	4613      	mov	r3, r2
90007030:	011b      	lsls	r3, r3, #4
90007032:	1a9b      	subs	r3, r3, r2
90007034:	009b      	lsls	r3, r3, #2
90007036:	440b      	add	r3, r1
90007038:	331b      	adds	r3, #27
9000703a:	781b      	ldrb	r3, [r3, #0]
9000703c:	2b01      	cmp	r3, #1
9000703e:	d110      	bne.n	90007062 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90007040:	78fa      	ldrb	r2, [r7, #3]
90007042:	6879      	ldr	r1, [r7, #4]
90007044:	4613      	mov	r3, r2
90007046:	011b      	lsls	r3, r3, #4
90007048:	1a9b      	subs	r3, r3, r2
9000704a:	009b      	lsls	r3, r3, #2
9000704c:	440b      	add	r3, r1
9000704e:	334d      	adds	r3, #77	@ 0x4d
90007050:	2204      	movs	r2, #4
90007052:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90007054:	687b      	ldr	r3, [r7, #4]
90007056:	681b      	ldr	r3, [r3, #0]
90007058:	78fa      	ldrb	r2, [r7, #3]
9000705a:	4611      	mov	r1, r2
9000705c:	4618      	mov	r0, r3
9000705e:	f005 ff1a 	bl	9000ce96 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90007062:	78fa      	ldrb	r2, [r7, #3]
90007064:	6879      	ldr	r1, [r7, #4]
90007066:	4613      	mov	r3, r2
90007068:	011b      	lsls	r3, r3, #4
9000706a:	1a9b      	subs	r3, r3, r2
9000706c:	009b      	lsls	r3, r3, #2
9000706e:	440b      	add	r3, r1
90007070:	331b      	adds	r3, #27
90007072:	781b      	ldrb	r3, [r3, #0]
90007074:	2b01      	cmp	r3, #1
90007076:	d129      	bne.n	900070cc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90007078:	78fa      	ldrb	r2, [r7, #3]
9000707a:	6879      	ldr	r1, [r7, #4]
9000707c:	4613      	mov	r3, r2
9000707e:	011b      	lsls	r3, r3, #4
90007080:	1a9b      	subs	r3, r3, r2
90007082:	009b      	lsls	r3, r3, #2
90007084:	440b      	add	r3, r1
90007086:	331b      	adds	r3, #27
90007088:	2200      	movs	r2, #0
9000708a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000708c:	78fb      	ldrb	r3, [r7, #3]
9000708e:	015a      	lsls	r2, r3, #5
90007090:	693b      	ldr	r3, [r7, #16]
90007092:	4413      	add	r3, r2
90007094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007098:	685b      	ldr	r3, [r3, #4]
9000709a:	78fa      	ldrb	r2, [r7, #3]
9000709c:	0151      	lsls	r1, r2, #5
9000709e:	693a      	ldr	r2, [r7, #16]
900070a0:	440a      	add	r2, r1
900070a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900070a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900070aa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
900070ac:	78fb      	ldrb	r3, [r7, #3]
900070ae:	015a      	lsls	r2, r3, #5
900070b0:	693b      	ldr	r3, [r7, #16]
900070b2:	4413      	add	r3, r2
900070b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900070b8:	68db      	ldr	r3, [r3, #12]
900070ba:	78fa      	ldrb	r2, [r7, #3]
900070bc:	0151      	lsls	r1, r2, #5
900070be:	693a      	ldr	r2, [r7, #16]
900070c0:	440a      	add	r2, r1
900070c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900070c6:	f043 0320 	orr.w	r3, r3, #32
900070ca:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900070cc:	78fb      	ldrb	r3, [r7, #3]
900070ce:	015a      	lsls	r2, r3, #5
900070d0:	693b      	ldr	r3, [r7, #16]
900070d2:	4413      	add	r3, r2
900070d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900070d8:	461a      	mov	r2, r3
900070da:	2310      	movs	r3, #16
900070dc:	6093      	str	r3, [r2, #8]
900070de:	e000      	b.n	900070e2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
900070e0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
900070e2:	3718      	adds	r7, #24
900070e4:	46bd      	mov	sp, r7
900070e6:	bd80      	pop	{r7, pc}

900070e8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
900070e8:	b580      	push	{r7, lr}
900070ea:	b086      	sub	sp, #24
900070ec:	af00      	add	r7, sp, #0
900070ee:	6078      	str	r0, [r7, #4]
900070f0:	460b      	mov	r3, r1
900070f2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900070f4:	687b      	ldr	r3, [r7, #4]
900070f6:	681b      	ldr	r3, [r3, #0]
900070f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900070fa:	697b      	ldr	r3, [r7, #20]
900070fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
900070fe:	687b      	ldr	r3, [r7, #4]
90007100:	681b      	ldr	r3, [r3, #0]
90007102:	78fa      	ldrb	r2, [r7, #3]
90007104:	4611      	mov	r1, r2
90007106:	4618      	mov	r0, r3
90007108:	f005 f94d 	bl	9000c3a6 <USB_ReadChInterrupts>
9000710c:	4603      	mov	r3, r0
9000710e:	f003 0304 	and.w	r3, r3, #4
90007112:	2b04      	cmp	r3, #4
90007114:	d11b      	bne.n	9000714e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90007116:	78fb      	ldrb	r3, [r7, #3]
90007118:	015a      	lsls	r2, r3, #5
9000711a:	693b      	ldr	r3, [r7, #16]
9000711c:	4413      	add	r3, r2
9000711e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007122:	461a      	mov	r2, r3
90007124:	2304      	movs	r3, #4
90007126:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90007128:	78fa      	ldrb	r2, [r7, #3]
9000712a:	6879      	ldr	r1, [r7, #4]
9000712c:	4613      	mov	r3, r2
9000712e:	011b      	lsls	r3, r3, #4
90007130:	1a9b      	subs	r3, r3, r2
90007132:	009b      	lsls	r3, r3, #2
90007134:	440b      	add	r3, r1
90007136:	334d      	adds	r3, #77	@ 0x4d
90007138:	2207      	movs	r2, #7
9000713a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000713c:	687b      	ldr	r3, [r7, #4]
9000713e:	681b      	ldr	r3, [r3, #0]
90007140:	78fa      	ldrb	r2, [r7, #3]
90007142:	4611      	mov	r1, r2
90007144:	4618      	mov	r0, r3
90007146:	f005 fea6 	bl	9000ce96 <USB_HC_Halt>
9000714a:	f000 bc89 	b.w	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
9000714e:	687b      	ldr	r3, [r7, #4]
90007150:	681b      	ldr	r3, [r3, #0]
90007152:	78fa      	ldrb	r2, [r7, #3]
90007154:	4611      	mov	r1, r2
90007156:	4618      	mov	r0, r3
90007158:	f005 f925 	bl	9000c3a6 <USB_ReadChInterrupts>
9000715c:	4603      	mov	r3, r0
9000715e:	f003 0320 	and.w	r3, r3, #32
90007162:	2b20      	cmp	r3, #32
90007164:	f040 8082 	bne.w	9000726c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90007168:	78fb      	ldrb	r3, [r7, #3]
9000716a:	015a      	lsls	r2, r3, #5
9000716c:	693b      	ldr	r3, [r7, #16]
9000716e:	4413      	add	r3, r2
90007170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007174:	461a      	mov	r2, r3
90007176:	2320      	movs	r3, #32
90007178:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
9000717a:	78fa      	ldrb	r2, [r7, #3]
9000717c:	6879      	ldr	r1, [r7, #4]
9000717e:	4613      	mov	r3, r2
90007180:	011b      	lsls	r3, r3, #4
90007182:	1a9b      	subs	r3, r3, r2
90007184:	009b      	lsls	r3, r3, #2
90007186:	440b      	add	r3, r1
90007188:	3319      	adds	r3, #25
9000718a:	781b      	ldrb	r3, [r3, #0]
9000718c:	2b01      	cmp	r3, #1
9000718e:	d124      	bne.n	900071da <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90007190:	78fa      	ldrb	r2, [r7, #3]
90007192:	6879      	ldr	r1, [r7, #4]
90007194:	4613      	mov	r3, r2
90007196:	011b      	lsls	r3, r3, #4
90007198:	1a9b      	subs	r3, r3, r2
9000719a:	009b      	lsls	r3, r3, #2
9000719c:	440b      	add	r3, r1
9000719e:	3319      	adds	r3, #25
900071a0:	2200      	movs	r2, #0
900071a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900071a4:	78fa      	ldrb	r2, [r7, #3]
900071a6:	6879      	ldr	r1, [r7, #4]
900071a8:	4613      	mov	r3, r2
900071aa:	011b      	lsls	r3, r3, #4
900071ac:	1a9b      	subs	r3, r3, r2
900071ae:	009b      	lsls	r3, r3, #2
900071b0:	440b      	add	r3, r1
900071b2:	334c      	adds	r3, #76	@ 0x4c
900071b4:	2202      	movs	r2, #2
900071b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900071b8:	78fa      	ldrb	r2, [r7, #3]
900071ba:	6879      	ldr	r1, [r7, #4]
900071bc:	4613      	mov	r3, r2
900071be:	011b      	lsls	r3, r3, #4
900071c0:	1a9b      	subs	r3, r3, r2
900071c2:	009b      	lsls	r3, r3, #2
900071c4:	440b      	add	r3, r1
900071c6:	334d      	adds	r3, #77	@ 0x4d
900071c8:	2203      	movs	r2, #3
900071ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900071cc:	687b      	ldr	r3, [r7, #4]
900071ce:	681b      	ldr	r3, [r3, #0]
900071d0:	78fa      	ldrb	r2, [r7, #3]
900071d2:	4611      	mov	r1, r2
900071d4:	4618      	mov	r0, r3
900071d6:	f005 fe5e 	bl	9000ce96 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
900071da:	78fa      	ldrb	r2, [r7, #3]
900071dc:	6879      	ldr	r1, [r7, #4]
900071de:	4613      	mov	r3, r2
900071e0:	011b      	lsls	r3, r3, #4
900071e2:	1a9b      	subs	r3, r3, r2
900071e4:	009b      	lsls	r3, r3, #2
900071e6:	440b      	add	r3, r1
900071e8:	331a      	adds	r3, #26
900071ea:	781b      	ldrb	r3, [r3, #0]
900071ec:	2b01      	cmp	r3, #1
900071ee:	f040 8437 	bne.w	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
900071f2:	78fa      	ldrb	r2, [r7, #3]
900071f4:	6879      	ldr	r1, [r7, #4]
900071f6:	4613      	mov	r3, r2
900071f8:	011b      	lsls	r3, r3, #4
900071fa:	1a9b      	subs	r3, r3, r2
900071fc:	009b      	lsls	r3, r3, #2
900071fe:	440b      	add	r3, r1
90007200:	331b      	adds	r3, #27
90007202:	781b      	ldrb	r3, [r3, #0]
90007204:	2b00      	cmp	r3, #0
90007206:	f040 842b 	bne.w	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
9000720a:	78fa      	ldrb	r2, [r7, #3]
9000720c:	6879      	ldr	r1, [r7, #4]
9000720e:	4613      	mov	r3, r2
90007210:	011b      	lsls	r3, r3, #4
90007212:	1a9b      	subs	r3, r3, r2
90007214:	009b      	lsls	r3, r3, #2
90007216:	440b      	add	r3, r1
90007218:	3326      	adds	r3, #38	@ 0x26
9000721a:	781b      	ldrb	r3, [r3, #0]
9000721c:	2b01      	cmp	r3, #1
9000721e:	d009      	beq.n	90007234 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90007220:	78fa      	ldrb	r2, [r7, #3]
90007222:	6879      	ldr	r1, [r7, #4]
90007224:	4613      	mov	r3, r2
90007226:	011b      	lsls	r3, r3, #4
90007228:	1a9b      	subs	r3, r3, r2
9000722a:	009b      	lsls	r3, r3, #2
9000722c:	440b      	add	r3, r1
9000722e:	331b      	adds	r3, #27
90007230:	2201      	movs	r2, #1
90007232:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90007234:	78fa      	ldrb	r2, [r7, #3]
90007236:	6879      	ldr	r1, [r7, #4]
90007238:	4613      	mov	r3, r2
9000723a:	011b      	lsls	r3, r3, #4
9000723c:	1a9b      	subs	r3, r3, r2
9000723e:	009b      	lsls	r3, r3, #2
90007240:	440b      	add	r3, r1
90007242:	334d      	adds	r3, #77	@ 0x4d
90007244:	2203      	movs	r2, #3
90007246:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90007248:	687b      	ldr	r3, [r7, #4]
9000724a:	681b      	ldr	r3, [r3, #0]
9000724c:	78fa      	ldrb	r2, [r7, #3]
9000724e:	4611      	mov	r1, r2
90007250:	4618      	mov	r0, r3
90007252:	f005 fe20 	bl	9000ce96 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90007256:	78fa      	ldrb	r2, [r7, #3]
90007258:	6879      	ldr	r1, [r7, #4]
9000725a:	4613      	mov	r3, r2
9000725c:	011b      	lsls	r3, r3, #4
9000725e:	1a9b      	subs	r3, r3, r2
90007260:	009b      	lsls	r3, r3, #2
90007262:	440b      	add	r3, r1
90007264:	3344      	adds	r3, #68	@ 0x44
90007266:	2200      	movs	r2, #0
90007268:	601a      	str	r2, [r3, #0]
9000726a:	e3f9      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
9000726c:	687b      	ldr	r3, [r7, #4]
9000726e:	681b      	ldr	r3, [r3, #0]
90007270:	78fa      	ldrb	r2, [r7, #3]
90007272:	4611      	mov	r1, r2
90007274:	4618      	mov	r0, r3
90007276:	f005 f896 	bl	9000c3a6 <USB_ReadChInterrupts>
9000727a:	4603      	mov	r3, r0
9000727c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90007280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90007284:	d111      	bne.n	900072aa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90007286:	78fb      	ldrb	r3, [r7, #3]
90007288:	015a      	lsls	r2, r3, #5
9000728a:	693b      	ldr	r3, [r7, #16]
9000728c:	4413      	add	r3, r2
9000728e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007292:	461a      	mov	r2, r3
90007294:	f44f 7300 	mov.w	r3, #512	@ 0x200
90007298:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000729a:	687b      	ldr	r3, [r7, #4]
9000729c:	681b      	ldr	r3, [r3, #0]
9000729e:	78fa      	ldrb	r2, [r7, #3]
900072a0:	4611      	mov	r1, r2
900072a2:	4618      	mov	r0, r3
900072a4:	f005 fdf7 	bl	9000ce96 <USB_HC_Halt>
900072a8:	e3da      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900072aa:	687b      	ldr	r3, [r7, #4]
900072ac:	681b      	ldr	r3, [r3, #0]
900072ae:	78fa      	ldrb	r2, [r7, #3]
900072b0:	4611      	mov	r1, r2
900072b2:	4618      	mov	r0, r3
900072b4:	f005 f877 	bl	9000c3a6 <USB_ReadChInterrupts>
900072b8:	4603      	mov	r3, r0
900072ba:	f003 0301 	and.w	r3, r3, #1
900072be:	2b01      	cmp	r3, #1
900072c0:	d168      	bne.n	90007394 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900072c2:	78fa      	ldrb	r2, [r7, #3]
900072c4:	6879      	ldr	r1, [r7, #4]
900072c6:	4613      	mov	r3, r2
900072c8:	011b      	lsls	r3, r3, #4
900072ca:	1a9b      	subs	r3, r3, r2
900072cc:	009b      	lsls	r3, r3, #2
900072ce:	440b      	add	r3, r1
900072d0:	3344      	adds	r3, #68	@ 0x44
900072d2:	2200      	movs	r2, #0
900072d4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
900072d6:	687b      	ldr	r3, [r7, #4]
900072d8:	681b      	ldr	r3, [r3, #0]
900072da:	78fa      	ldrb	r2, [r7, #3]
900072dc:	4611      	mov	r1, r2
900072de:	4618      	mov	r0, r3
900072e0:	f005 f861 	bl	9000c3a6 <USB_ReadChInterrupts>
900072e4:	4603      	mov	r3, r0
900072e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900072ea:	2b40      	cmp	r3, #64	@ 0x40
900072ec:	d112      	bne.n	90007314 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
900072ee:	78fa      	ldrb	r2, [r7, #3]
900072f0:	6879      	ldr	r1, [r7, #4]
900072f2:	4613      	mov	r3, r2
900072f4:	011b      	lsls	r3, r3, #4
900072f6:	1a9b      	subs	r3, r3, r2
900072f8:	009b      	lsls	r3, r3, #2
900072fa:	440b      	add	r3, r1
900072fc:	3319      	adds	r3, #25
900072fe:	2201      	movs	r2, #1
90007300:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90007302:	78fb      	ldrb	r3, [r7, #3]
90007304:	015a      	lsls	r2, r3, #5
90007306:	693b      	ldr	r3, [r7, #16]
90007308:	4413      	add	r3, r2
9000730a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000730e:	461a      	mov	r2, r3
90007310:	2340      	movs	r3, #64	@ 0x40
90007312:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90007314:	78fa      	ldrb	r2, [r7, #3]
90007316:	6879      	ldr	r1, [r7, #4]
90007318:	4613      	mov	r3, r2
9000731a:	011b      	lsls	r3, r3, #4
9000731c:	1a9b      	subs	r3, r3, r2
9000731e:	009b      	lsls	r3, r3, #2
90007320:	440b      	add	r3, r1
90007322:	331b      	adds	r3, #27
90007324:	781b      	ldrb	r3, [r3, #0]
90007326:	2b00      	cmp	r3, #0
90007328:	d019      	beq.n	9000735e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
9000732a:	78fa      	ldrb	r2, [r7, #3]
9000732c:	6879      	ldr	r1, [r7, #4]
9000732e:	4613      	mov	r3, r2
90007330:	011b      	lsls	r3, r3, #4
90007332:	1a9b      	subs	r3, r3, r2
90007334:	009b      	lsls	r3, r3, #2
90007336:	440b      	add	r3, r1
90007338:	331b      	adds	r3, #27
9000733a:	2200      	movs	r2, #0
9000733c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000733e:	78fb      	ldrb	r3, [r7, #3]
90007340:	015a      	lsls	r2, r3, #5
90007342:	693b      	ldr	r3, [r7, #16]
90007344:	4413      	add	r3, r2
90007346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000734a:	685b      	ldr	r3, [r3, #4]
9000734c:	78fa      	ldrb	r2, [r7, #3]
9000734e:	0151      	lsls	r1, r2, #5
90007350:	693a      	ldr	r2, [r7, #16]
90007352:	440a      	add	r2, r1
90007354:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90007358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000735c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
9000735e:	78fb      	ldrb	r3, [r7, #3]
90007360:	015a      	lsls	r2, r3, #5
90007362:	693b      	ldr	r3, [r7, #16]
90007364:	4413      	add	r3, r2
90007366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000736a:	461a      	mov	r2, r3
9000736c:	2301      	movs	r3, #1
9000736e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
90007370:	78fa      	ldrb	r2, [r7, #3]
90007372:	6879      	ldr	r1, [r7, #4]
90007374:	4613      	mov	r3, r2
90007376:	011b      	lsls	r3, r3, #4
90007378:	1a9b      	subs	r3, r3, r2
9000737a:	009b      	lsls	r3, r3, #2
9000737c:	440b      	add	r3, r1
9000737e:	334d      	adds	r3, #77	@ 0x4d
90007380:	2201      	movs	r2, #1
90007382:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90007384:	687b      	ldr	r3, [r7, #4]
90007386:	681b      	ldr	r3, [r3, #0]
90007388:	78fa      	ldrb	r2, [r7, #3]
9000738a:	4611      	mov	r1, r2
9000738c:	4618      	mov	r0, r3
9000738e:	f005 fd82 	bl	9000ce96 <USB_HC_Halt>
90007392:	e365      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90007394:	687b      	ldr	r3, [r7, #4]
90007396:	681b      	ldr	r3, [r3, #0]
90007398:	78fa      	ldrb	r2, [r7, #3]
9000739a:	4611      	mov	r1, r2
9000739c:	4618      	mov	r0, r3
9000739e:	f005 f802 	bl	9000c3a6 <USB_ReadChInterrupts>
900073a2:	4603      	mov	r3, r0
900073a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900073a8:	2b40      	cmp	r3, #64	@ 0x40
900073aa:	d139      	bne.n	90007420 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
900073ac:	78fa      	ldrb	r2, [r7, #3]
900073ae:	6879      	ldr	r1, [r7, #4]
900073b0:	4613      	mov	r3, r2
900073b2:	011b      	lsls	r3, r3, #4
900073b4:	1a9b      	subs	r3, r3, r2
900073b6:	009b      	lsls	r3, r3, #2
900073b8:	440b      	add	r3, r1
900073ba:	334d      	adds	r3, #77	@ 0x4d
900073bc:	2205      	movs	r2, #5
900073be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
900073c0:	78fa      	ldrb	r2, [r7, #3]
900073c2:	6879      	ldr	r1, [r7, #4]
900073c4:	4613      	mov	r3, r2
900073c6:	011b      	lsls	r3, r3, #4
900073c8:	1a9b      	subs	r3, r3, r2
900073ca:	009b      	lsls	r3, r3, #2
900073cc:	440b      	add	r3, r1
900073ce:	331a      	adds	r3, #26
900073d0:	781b      	ldrb	r3, [r3, #0]
900073d2:	2b00      	cmp	r3, #0
900073d4:	d109      	bne.n	900073ea <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
900073d6:	78fa      	ldrb	r2, [r7, #3]
900073d8:	6879      	ldr	r1, [r7, #4]
900073da:	4613      	mov	r3, r2
900073dc:	011b      	lsls	r3, r3, #4
900073de:	1a9b      	subs	r3, r3, r2
900073e0:	009b      	lsls	r3, r3, #2
900073e2:	440b      	add	r3, r1
900073e4:	3319      	adds	r3, #25
900073e6:	2201      	movs	r2, #1
900073e8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
900073ea:	78fa      	ldrb	r2, [r7, #3]
900073ec:	6879      	ldr	r1, [r7, #4]
900073ee:	4613      	mov	r3, r2
900073f0:	011b      	lsls	r3, r3, #4
900073f2:	1a9b      	subs	r3, r3, r2
900073f4:	009b      	lsls	r3, r3, #2
900073f6:	440b      	add	r3, r1
900073f8:	3344      	adds	r3, #68	@ 0x44
900073fa:	2200      	movs	r2, #0
900073fc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900073fe:	687b      	ldr	r3, [r7, #4]
90007400:	681b      	ldr	r3, [r3, #0]
90007402:	78fa      	ldrb	r2, [r7, #3]
90007404:	4611      	mov	r1, r2
90007406:	4618      	mov	r0, r3
90007408:	f005 fd45 	bl	9000ce96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
9000740c:	78fb      	ldrb	r3, [r7, #3]
9000740e:	015a      	lsls	r2, r3, #5
90007410:	693b      	ldr	r3, [r7, #16]
90007412:	4413      	add	r3, r2
90007414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007418:	461a      	mov	r2, r3
9000741a:	2340      	movs	r3, #64	@ 0x40
9000741c:	6093      	str	r3, [r2, #8]
9000741e:	e31f      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90007420:	687b      	ldr	r3, [r7, #4]
90007422:	681b      	ldr	r3, [r3, #0]
90007424:	78fa      	ldrb	r2, [r7, #3]
90007426:	4611      	mov	r1, r2
90007428:	4618      	mov	r0, r3
9000742a:	f004 ffbc 	bl	9000c3a6 <USB_ReadChInterrupts>
9000742e:	4603      	mov	r3, r0
90007430:	f003 0308 	and.w	r3, r3, #8
90007434:	2b08      	cmp	r3, #8
90007436:	d11a      	bne.n	9000746e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90007438:	78fb      	ldrb	r3, [r7, #3]
9000743a:	015a      	lsls	r2, r3, #5
9000743c:	693b      	ldr	r3, [r7, #16]
9000743e:	4413      	add	r3, r2
90007440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007444:	461a      	mov	r2, r3
90007446:	2308      	movs	r3, #8
90007448:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
9000744a:	78fa      	ldrb	r2, [r7, #3]
9000744c:	6879      	ldr	r1, [r7, #4]
9000744e:	4613      	mov	r3, r2
90007450:	011b      	lsls	r3, r3, #4
90007452:	1a9b      	subs	r3, r3, r2
90007454:	009b      	lsls	r3, r3, #2
90007456:	440b      	add	r3, r1
90007458:	334d      	adds	r3, #77	@ 0x4d
9000745a:	2206      	movs	r2, #6
9000745c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000745e:	687b      	ldr	r3, [r7, #4]
90007460:	681b      	ldr	r3, [r3, #0]
90007462:	78fa      	ldrb	r2, [r7, #3]
90007464:	4611      	mov	r1, r2
90007466:	4618      	mov	r0, r3
90007468:	f005 fd15 	bl	9000ce96 <USB_HC_Halt>
9000746c:	e2f8      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
9000746e:	687b      	ldr	r3, [r7, #4]
90007470:	681b      	ldr	r3, [r3, #0]
90007472:	78fa      	ldrb	r2, [r7, #3]
90007474:	4611      	mov	r1, r2
90007476:	4618      	mov	r0, r3
90007478:	f004 ff95 	bl	9000c3a6 <USB_ReadChInterrupts>
9000747c:	4603      	mov	r3, r0
9000747e:	f003 0310 	and.w	r3, r3, #16
90007482:	2b10      	cmp	r3, #16
90007484:	d144      	bne.n	90007510 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90007486:	78fa      	ldrb	r2, [r7, #3]
90007488:	6879      	ldr	r1, [r7, #4]
9000748a:	4613      	mov	r3, r2
9000748c:	011b      	lsls	r3, r3, #4
9000748e:	1a9b      	subs	r3, r3, r2
90007490:	009b      	lsls	r3, r3, #2
90007492:	440b      	add	r3, r1
90007494:	3344      	adds	r3, #68	@ 0x44
90007496:	2200      	movs	r2, #0
90007498:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
9000749a:	78fa      	ldrb	r2, [r7, #3]
9000749c:	6879      	ldr	r1, [r7, #4]
9000749e:	4613      	mov	r3, r2
900074a0:	011b      	lsls	r3, r3, #4
900074a2:	1a9b      	subs	r3, r3, r2
900074a4:	009b      	lsls	r3, r3, #2
900074a6:	440b      	add	r3, r1
900074a8:	334d      	adds	r3, #77	@ 0x4d
900074aa:	2204      	movs	r2, #4
900074ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
900074ae:	78fa      	ldrb	r2, [r7, #3]
900074b0:	6879      	ldr	r1, [r7, #4]
900074b2:	4613      	mov	r3, r2
900074b4:	011b      	lsls	r3, r3, #4
900074b6:	1a9b      	subs	r3, r3, r2
900074b8:	009b      	lsls	r3, r3, #2
900074ba:	440b      	add	r3, r1
900074bc:	3319      	adds	r3, #25
900074be:	781b      	ldrb	r3, [r3, #0]
900074c0:	2b00      	cmp	r3, #0
900074c2:	d114      	bne.n	900074ee <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
900074c4:	78fa      	ldrb	r2, [r7, #3]
900074c6:	6879      	ldr	r1, [r7, #4]
900074c8:	4613      	mov	r3, r2
900074ca:	011b      	lsls	r3, r3, #4
900074cc:	1a9b      	subs	r3, r3, r2
900074ce:	009b      	lsls	r3, r3, #2
900074d0:	440b      	add	r3, r1
900074d2:	3318      	adds	r3, #24
900074d4:	781b      	ldrb	r3, [r3, #0]
900074d6:	2b00      	cmp	r3, #0
900074d8:	d109      	bne.n	900074ee <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
900074da:	78fa      	ldrb	r2, [r7, #3]
900074dc:	6879      	ldr	r1, [r7, #4]
900074de:	4613      	mov	r3, r2
900074e0:	011b      	lsls	r3, r3, #4
900074e2:	1a9b      	subs	r3, r3, r2
900074e4:	009b      	lsls	r3, r3, #2
900074e6:	440b      	add	r3, r1
900074e8:	3319      	adds	r3, #25
900074ea:	2201      	movs	r2, #1
900074ec:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
900074ee:	687b      	ldr	r3, [r7, #4]
900074f0:	681b      	ldr	r3, [r3, #0]
900074f2:	78fa      	ldrb	r2, [r7, #3]
900074f4:	4611      	mov	r1, r2
900074f6:	4618      	mov	r0, r3
900074f8:	f005 fccd 	bl	9000ce96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900074fc:	78fb      	ldrb	r3, [r7, #3]
900074fe:	015a      	lsls	r2, r3, #5
90007500:	693b      	ldr	r3, [r7, #16]
90007502:	4413      	add	r3, r2
90007504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007508:	461a      	mov	r2, r3
9000750a:	2310      	movs	r3, #16
9000750c:	6093      	str	r3, [r2, #8]
9000750e:	e2a7      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90007510:	687b      	ldr	r3, [r7, #4]
90007512:	681b      	ldr	r3, [r3, #0]
90007514:	78fa      	ldrb	r2, [r7, #3]
90007516:	4611      	mov	r1, r2
90007518:	4618      	mov	r0, r3
9000751a:	f004 ff44 	bl	9000c3a6 <USB_ReadChInterrupts>
9000751e:	4603      	mov	r3, r0
90007520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90007524:	2b80      	cmp	r3, #128	@ 0x80
90007526:	f040 8083 	bne.w	90007630 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
9000752a:	687b      	ldr	r3, [r7, #4]
9000752c:	799b      	ldrb	r3, [r3, #6]
9000752e:	2b00      	cmp	r3, #0
90007530:	d111      	bne.n	90007556 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90007532:	78fa      	ldrb	r2, [r7, #3]
90007534:	6879      	ldr	r1, [r7, #4]
90007536:	4613      	mov	r3, r2
90007538:	011b      	lsls	r3, r3, #4
9000753a:	1a9b      	subs	r3, r3, r2
9000753c:	009b      	lsls	r3, r3, #2
9000753e:	440b      	add	r3, r1
90007540:	334d      	adds	r3, #77	@ 0x4d
90007542:	2207      	movs	r2, #7
90007544:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90007546:	687b      	ldr	r3, [r7, #4]
90007548:	681b      	ldr	r3, [r3, #0]
9000754a:	78fa      	ldrb	r2, [r7, #3]
9000754c:	4611      	mov	r1, r2
9000754e:	4618      	mov	r0, r3
90007550:	f005 fca1 	bl	9000ce96 <USB_HC_Halt>
90007554:	e062      	b.n	9000761c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90007556:	78fa      	ldrb	r2, [r7, #3]
90007558:	6879      	ldr	r1, [r7, #4]
9000755a:	4613      	mov	r3, r2
9000755c:	011b      	lsls	r3, r3, #4
9000755e:	1a9b      	subs	r3, r3, r2
90007560:	009b      	lsls	r3, r3, #2
90007562:	440b      	add	r3, r1
90007564:	3344      	adds	r3, #68	@ 0x44
90007566:	681b      	ldr	r3, [r3, #0]
90007568:	1c59      	adds	r1, r3, #1
9000756a:	6878      	ldr	r0, [r7, #4]
9000756c:	4613      	mov	r3, r2
9000756e:	011b      	lsls	r3, r3, #4
90007570:	1a9b      	subs	r3, r3, r2
90007572:	009b      	lsls	r3, r3, #2
90007574:	4403      	add	r3, r0
90007576:	3344      	adds	r3, #68	@ 0x44
90007578:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000757a:	78fa      	ldrb	r2, [r7, #3]
9000757c:	6879      	ldr	r1, [r7, #4]
9000757e:	4613      	mov	r3, r2
90007580:	011b      	lsls	r3, r3, #4
90007582:	1a9b      	subs	r3, r3, r2
90007584:	009b      	lsls	r3, r3, #2
90007586:	440b      	add	r3, r1
90007588:	3344      	adds	r3, #68	@ 0x44
9000758a:	681b      	ldr	r3, [r3, #0]
9000758c:	2b02      	cmp	r3, #2
9000758e:	d922      	bls.n	900075d6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90007590:	78fa      	ldrb	r2, [r7, #3]
90007592:	6879      	ldr	r1, [r7, #4]
90007594:	4613      	mov	r3, r2
90007596:	011b      	lsls	r3, r3, #4
90007598:	1a9b      	subs	r3, r3, r2
9000759a:	009b      	lsls	r3, r3, #2
9000759c:	440b      	add	r3, r1
9000759e:	3344      	adds	r3, #68	@ 0x44
900075a0:	2200      	movs	r2, #0
900075a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900075a4:	78fa      	ldrb	r2, [r7, #3]
900075a6:	6879      	ldr	r1, [r7, #4]
900075a8:	4613      	mov	r3, r2
900075aa:	011b      	lsls	r3, r3, #4
900075ac:	1a9b      	subs	r3, r3, r2
900075ae:	009b      	lsls	r3, r3, #2
900075b0:	440b      	add	r3, r1
900075b2:	334c      	adds	r3, #76	@ 0x4c
900075b4:	2204      	movs	r2, #4
900075b6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900075b8:	78fa      	ldrb	r2, [r7, #3]
900075ba:	6879      	ldr	r1, [r7, #4]
900075bc:	4613      	mov	r3, r2
900075be:	011b      	lsls	r3, r3, #4
900075c0:	1a9b      	subs	r3, r3, r2
900075c2:	009b      	lsls	r3, r3, #2
900075c4:	440b      	add	r3, r1
900075c6:	334c      	adds	r3, #76	@ 0x4c
900075c8:	781a      	ldrb	r2, [r3, #0]
900075ca:	78fb      	ldrb	r3, [r7, #3]
900075cc:	4619      	mov	r1, r3
900075ce:	6878      	ldr	r0, [r7, #4]
900075d0:	f7fa fa38 	bl	90001a44 <HAL_HCD_HC_NotifyURBChange_Callback>
900075d4:	e022      	b.n	9000761c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900075d6:	78fa      	ldrb	r2, [r7, #3]
900075d8:	6879      	ldr	r1, [r7, #4]
900075da:	4613      	mov	r3, r2
900075dc:	011b      	lsls	r3, r3, #4
900075de:	1a9b      	subs	r3, r3, r2
900075e0:	009b      	lsls	r3, r3, #2
900075e2:	440b      	add	r3, r1
900075e4:	334c      	adds	r3, #76	@ 0x4c
900075e6:	2202      	movs	r2, #2
900075e8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
900075ea:	78fb      	ldrb	r3, [r7, #3]
900075ec:	015a      	lsls	r2, r3, #5
900075ee:	693b      	ldr	r3, [r7, #16]
900075f0:	4413      	add	r3, r2
900075f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900075f6:	681b      	ldr	r3, [r3, #0]
900075f8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900075fa:	68fb      	ldr	r3, [r7, #12]
900075fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90007600:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90007602:	68fb      	ldr	r3, [r7, #12]
90007604:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90007608:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000760a:	78fb      	ldrb	r3, [r7, #3]
9000760c:	015a      	lsls	r2, r3, #5
9000760e:	693b      	ldr	r3, [r7, #16]
90007610:	4413      	add	r3, r2
90007612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007616:	461a      	mov	r2, r3
90007618:	68fb      	ldr	r3, [r7, #12]
9000761a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000761c:	78fb      	ldrb	r3, [r7, #3]
9000761e:	015a      	lsls	r2, r3, #5
90007620:	693b      	ldr	r3, [r7, #16]
90007622:	4413      	add	r3, r2
90007624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007628:	461a      	mov	r2, r3
9000762a:	2380      	movs	r3, #128	@ 0x80
9000762c:	6093      	str	r3, [r2, #8]
9000762e:	e217      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90007630:	687b      	ldr	r3, [r7, #4]
90007632:	681b      	ldr	r3, [r3, #0]
90007634:	78fa      	ldrb	r2, [r7, #3]
90007636:	4611      	mov	r1, r2
90007638:	4618      	mov	r0, r3
9000763a:	f004 feb4 	bl	9000c3a6 <USB_ReadChInterrupts>
9000763e:	4603      	mov	r3, r0
90007640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90007644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90007648:	d11b      	bne.n	90007682 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000764a:	78fa      	ldrb	r2, [r7, #3]
9000764c:	6879      	ldr	r1, [r7, #4]
9000764e:	4613      	mov	r3, r2
90007650:	011b      	lsls	r3, r3, #4
90007652:	1a9b      	subs	r3, r3, r2
90007654:	009b      	lsls	r3, r3, #2
90007656:	440b      	add	r3, r1
90007658:	334d      	adds	r3, #77	@ 0x4d
9000765a:	2209      	movs	r2, #9
9000765c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000765e:	687b      	ldr	r3, [r7, #4]
90007660:	681b      	ldr	r3, [r3, #0]
90007662:	78fa      	ldrb	r2, [r7, #3]
90007664:	4611      	mov	r1, r2
90007666:	4618      	mov	r0, r3
90007668:	f005 fc15 	bl	9000ce96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
9000766c:	78fb      	ldrb	r3, [r7, #3]
9000766e:	015a      	lsls	r2, r3, #5
90007670:	693b      	ldr	r3, [r7, #16]
90007672:	4413      	add	r3, r2
90007674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007678:	461a      	mov	r2, r3
9000767a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000767e:	6093      	str	r3, [r2, #8]
90007680:	e1ee      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90007682:	687b      	ldr	r3, [r7, #4]
90007684:	681b      	ldr	r3, [r3, #0]
90007686:	78fa      	ldrb	r2, [r7, #3]
90007688:	4611      	mov	r1, r2
9000768a:	4618      	mov	r0, r3
9000768c:	f004 fe8b 	bl	9000c3a6 <USB_ReadChInterrupts>
90007690:	4603      	mov	r3, r0
90007692:	f003 0302 	and.w	r3, r3, #2
90007696:	2b02      	cmp	r3, #2
90007698:	f040 81df 	bne.w	90007a5a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
9000769c:	78fb      	ldrb	r3, [r7, #3]
9000769e:	015a      	lsls	r2, r3, #5
900076a0:	693b      	ldr	r3, [r7, #16]
900076a2:	4413      	add	r3, r2
900076a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900076a8:	461a      	mov	r2, r3
900076aa:	2302      	movs	r3, #2
900076ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900076ae:	78fa      	ldrb	r2, [r7, #3]
900076b0:	6879      	ldr	r1, [r7, #4]
900076b2:	4613      	mov	r3, r2
900076b4:	011b      	lsls	r3, r3, #4
900076b6:	1a9b      	subs	r3, r3, r2
900076b8:	009b      	lsls	r3, r3, #2
900076ba:	440b      	add	r3, r1
900076bc:	334d      	adds	r3, #77	@ 0x4d
900076be:	781b      	ldrb	r3, [r3, #0]
900076c0:	2b01      	cmp	r3, #1
900076c2:	f040 8093 	bne.w	900077ec <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900076c6:	78fa      	ldrb	r2, [r7, #3]
900076c8:	6879      	ldr	r1, [r7, #4]
900076ca:	4613      	mov	r3, r2
900076cc:	011b      	lsls	r3, r3, #4
900076ce:	1a9b      	subs	r3, r3, r2
900076d0:	009b      	lsls	r3, r3, #2
900076d2:	440b      	add	r3, r1
900076d4:	334d      	adds	r3, #77	@ 0x4d
900076d6:	2202      	movs	r2, #2
900076d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900076da:	78fa      	ldrb	r2, [r7, #3]
900076dc:	6879      	ldr	r1, [r7, #4]
900076de:	4613      	mov	r3, r2
900076e0:	011b      	lsls	r3, r3, #4
900076e2:	1a9b      	subs	r3, r3, r2
900076e4:	009b      	lsls	r3, r3, #2
900076e6:	440b      	add	r3, r1
900076e8:	334c      	adds	r3, #76	@ 0x4c
900076ea:	2201      	movs	r2, #1
900076ec:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900076ee:	78fa      	ldrb	r2, [r7, #3]
900076f0:	6879      	ldr	r1, [r7, #4]
900076f2:	4613      	mov	r3, r2
900076f4:	011b      	lsls	r3, r3, #4
900076f6:	1a9b      	subs	r3, r3, r2
900076f8:	009b      	lsls	r3, r3, #2
900076fa:	440b      	add	r3, r1
900076fc:	3326      	adds	r3, #38	@ 0x26
900076fe:	781b      	ldrb	r3, [r3, #0]
90007700:	2b02      	cmp	r3, #2
90007702:	d00b      	beq.n	9000771c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
90007704:	78fa      	ldrb	r2, [r7, #3]
90007706:	6879      	ldr	r1, [r7, #4]
90007708:	4613      	mov	r3, r2
9000770a:	011b      	lsls	r3, r3, #4
9000770c:	1a9b      	subs	r3, r3, r2
9000770e:	009b      	lsls	r3, r3, #2
90007710:	440b      	add	r3, r1
90007712:	3326      	adds	r3, #38	@ 0x26
90007714:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90007716:	2b03      	cmp	r3, #3
90007718:	f040 8190 	bne.w	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
9000771c:	687b      	ldr	r3, [r7, #4]
9000771e:	799b      	ldrb	r3, [r3, #6]
90007720:	2b00      	cmp	r3, #0
90007722:	d115      	bne.n	90007750 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
90007724:	78fa      	ldrb	r2, [r7, #3]
90007726:	6879      	ldr	r1, [r7, #4]
90007728:	4613      	mov	r3, r2
9000772a:	011b      	lsls	r3, r3, #4
9000772c:	1a9b      	subs	r3, r3, r2
9000772e:	009b      	lsls	r3, r3, #2
90007730:	440b      	add	r3, r1
90007732:	333d      	adds	r3, #61	@ 0x3d
90007734:	781b      	ldrb	r3, [r3, #0]
90007736:	78fa      	ldrb	r2, [r7, #3]
90007738:	f083 0301 	eor.w	r3, r3, #1
9000773c:	b2d8      	uxtb	r0, r3
9000773e:	6879      	ldr	r1, [r7, #4]
90007740:	4613      	mov	r3, r2
90007742:	011b      	lsls	r3, r3, #4
90007744:	1a9b      	subs	r3, r3, r2
90007746:	009b      	lsls	r3, r3, #2
90007748:	440b      	add	r3, r1
9000774a:	333d      	adds	r3, #61	@ 0x3d
9000774c:	4602      	mov	r2, r0
9000774e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
90007750:	687b      	ldr	r3, [r7, #4]
90007752:	799b      	ldrb	r3, [r3, #6]
90007754:	2b01      	cmp	r3, #1
90007756:	f040 8171 	bne.w	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
9000775a:	78fa      	ldrb	r2, [r7, #3]
9000775c:	6879      	ldr	r1, [r7, #4]
9000775e:	4613      	mov	r3, r2
90007760:	011b      	lsls	r3, r3, #4
90007762:	1a9b      	subs	r3, r3, r2
90007764:	009b      	lsls	r3, r3, #2
90007766:	440b      	add	r3, r1
90007768:	3334      	adds	r3, #52	@ 0x34
9000776a:	681b      	ldr	r3, [r3, #0]
9000776c:	2b00      	cmp	r3, #0
9000776e:	f000 8165 	beq.w	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
90007772:	78fa      	ldrb	r2, [r7, #3]
90007774:	6879      	ldr	r1, [r7, #4]
90007776:	4613      	mov	r3, r2
90007778:	011b      	lsls	r3, r3, #4
9000777a:	1a9b      	subs	r3, r3, r2
9000777c:	009b      	lsls	r3, r3, #2
9000777e:	440b      	add	r3, r1
90007780:	3334      	adds	r3, #52	@ 0x34
90007782:	6819      	ldr	r1, [r3, #0]
90007784:	78fa      	ldrb	r2, [r7, #3]
90007786:	6878      	ldr	r0, [r7, #4]
90007788:	4613      	mov	r3, r2
9000778a:	011b      	lsls	r3, r3, #4
9000778c:	1a9b      	subs	r3, r3, r2
9000778e:	009b      	lsls	r3, r3, #2
90007790:	4403      	add	r3, r0
90007792:	3328      	adds	r3, #40	@ 0x28
90007794:	881b      	ldrh	r3, [r3, #0]
90007796:	440b      	add	r3, r1
90007798:	1e59      	subs	r1, r3, #1
9000779a:	78fa      	ldrb	r2, [r7, #3]
9000779c:	6878      	ldr	r0, [r7, #4]
9000779e:	4613      	mov	r3, r2
900077a0:	011b      	lsls	r3, r3, #4
900077a2:	1a9b      	subs	r3, r3, r2
900077a4:	009b      	lsls	r3, r3, #2
900077a6:	4403      	add	r3, r0
900077a8:	3328      	adds	r3, #40	@ 0x28
900077aa:	881b      	ldrh	r3, [r3, #0]
900077ac:	fbb1 f3f3 	udiv	r3, r1, r3
900077b0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
900077b2:	68bb      	ldr	r3, [r7, #8]
900077b4:	f003 0301 	and.w	r3, r3, #1
900077b8:	2b00      	cmp	r3, #0
900077ba:	f000 813f 	beq.w	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
900077be:	78fa      	ldrb	r2, [r7, #3]
900077c0:	6879      	ldr	r1, [r7, #4]
900077c2:	4613      	mov	r3, r2
900077c4:	011b      	lsls	r3, r3, #4
900077c6:	1a9b      	subs	r3, r3, r2
900077c8:	009b      	lsls	r3, r3, #2
900077ca:	440b      	add	r3, r1
900077cc:	333d      	adds	r3, #61	@ 0x3d
900077ce:	781b      	ldrb	r3, [r3, #0]
900077d0:	78fa      	ldrb	r2, [r7, #3]
900077d2:	f083 0301 	eor.w	r3, r3, #1
900077d6:	b2d8      	uxtb	r0, r3
900077d8:	6879      	ldr	r1, [r7, #4]
900077da:	4613      	mov	r3, r2
900077dc:	011b      	lsls	r3, r3, #4
900077de:	1a9b      	subs	r3, r3, r2
900077e0:	009b      	lsls	r3, r3, #2
900077e2:	440b      	add	r3, r1
900077e4:	333d      	adds	r3, #61	@ 0x3d
900077e6:	4602      	mov	r2, r0
900077e8:	701a      	strb	r2, [r3, #0]
900077ea:	e127      	b.n	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
900077ec:	78fa      	ldrb	r2, [r7, #3]
900077ee:	6879      	ldr	r1, [r7, #4]
900077f0:	4613      	mov	r3, r2
900077f2:	011b      	lsls	r3, r3, #4
900077f4:	1a9b      	subs	r3, r3, r2
900077f6:	009b      	lsls	r3, r3, #2
900077f8:	440b      	add	r3, r1
900077fa:	334d      	adds	r3, #77	@ 0x4d
900077fc:	781b      	ldrb	r3, [r3, #0]
900077fe:	2b03      	cmp	r3, #3
90007800:	d120      	bne.n	90007844 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90007802:	78fa      	ldrb	r2, [r7, #3]
90007804:	6879      	ldr	r1, [r7, #4]
90007806:	4613      	mov	r3, r2
90007808:	011b      	lsls	r3, r3, #4
9000780a:	1a9b      	subs	r3, r3, r2
9000780c:	009b      	lsls	r3, r3, #2
9000780e:	440b      	add	r3, r1
90007810:	334d      	adds	r3, #77	@ 0x4d
90007812:	2202      	movs	r2, #2
90007814:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90007816:	78fa      	ldrb	r2, [r7, #3]
90007818:	6879      	ldr	r1, [r7, #4]
9000781a:	4613      	mov	r3, r2
9000781c:	011b      	lsls	r3, r3, #4
9000781e:	1a9b      	subs	r3, r3, r2
90007820:	009b      	lsls	r3, r3, #2
90007822:	440b      	add	r3, r1
90007824:	331b      	adds	r3, #27
90007826:	781b      	ldrb	r3, [r3, #0]
90007828:	2b01      	cmp	r3, #1
9000782a:	f040 8107 	bne.w	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000782e:	78fa      	ldrb	r2, [r7, #3]
90007830:	6879      	ldr	r1, [r7, #4]
90007832:	4613      	mov	r3, r2
90007834:	011b      	lsls	r3, r3, #4
90007836:	1a9b      	subs	r3, r3, r2
90007838:	009b      	lsls	r3, r3, #2
9000783a:	440b      	add	r3, r1
9000783c:	334c      	adds	r3, #76	@ 0x4c
9000783e:	2202      	movs	r2, #2
90007840:	701a      	strb	r2, [r3, #0]
90007842:	e0fb      	b.n	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90007844:	78fa      	ldrb	r2, [r7, #3]
90007846:	6879      	ldr	r1, [r7, #4]
90007848:	4613      	mov	r3, r2
9000784a:	011b      	lsls	r3, r3, #4
9000784c:	1a9b      	subs	r3, r3, r2
9000784e:	009b      	lsls	r3, r3, #2
90007850:	440b      	add	r3, r1
90007852:	334d      	adds	r3, #77	@ 0x4d
90007854:	781b      	ldrb	r3, [r3, #0]
90007856:	2b04      	cmp	r3, #4
90007858:	d13a      	bne.n	900078d0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000785a:	78fa      	ldrb	r2, [r7, #3]
9000785c:	6879      	ldr	r1, [r7, #4]
9000785e:	4613      	mov	r3, r2
90007860:	011b      	lsls	r3, r3, #4
90007862:	1a9b      	subs	r3, r3, r2
90007864:	009b      	lsls	r3, r3, #2
90007866:	440b      	add	r3, r1
90007868:	334d      	adds	r3, #77	@ 0x4d
9000786a:	2202      	movs	r2, #2
9000786c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000786e:	78fa      	ldrb	r2, [r7, #3]
90007870:	6879      	ldr	r1, [r7, #4]
90007872:	4613      	mov	r3, r2
90007874:	011b      	lsls	r3, r3, #4
90007876:	1a9b      	subs	r3, r3, r2
90007878:	009b      	lsls	r3, r3, #2
9000787a:	440b      	add	r3, r1
9000787c:	334c      	adds	r3, #76	@ 0x4c
9000787e:	2202      	movs	r2, #2
90007880:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90007882:	78fa      	ldrb	r2, [r7, #3]
90007884:	6879      	ldr	r1, [r7, #4]
90007886:	4613      	mov	r3, r2
90007888:	011b      	lsls	r3, r3, #4
9000788a:	1a9b      	subs	r3, r3, r2
9000788c:	009b      	lsls	r3, r3, #2
9000788e:	440b      	add	r3, r1
90007890:	331b      	adds	r3, #27
90007892:	781b      	ldrb	r3, [r3, #0]
90007894:	2b01      	cmp	r3, #1
90007896:	f040 80d1 	bne.w	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
9000789a:	78fa      	ldrb	r2, [r7, #3]
9000789c:	6879      	ldr	r1, [r7, #4]
9000789e:	4613      	mov	r3, r2
900078a0:	011b      	lsls	r3, r3, #4
900078a2:	1a9b      	subs	r3, r3, r2
900078a4:	009b      	lsls	r3, r3, #2
900078a6:	440b      	add	r3, r1
900078a8:	331b      	adds	r3, #27
900078aa:	2200      	movs	r2, #0
900078ac:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900078ae:	78fb      	ldrb	r3, [r7, #3]
900078b0:	015a      	lsls	r2, r3, #5
900078b2:	693b      	ldr	r3, [r7, #16]
900078b4:	4413      	add	r3, r2
900078b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900078ba:	685b      	ldr	r3, [r3, #4]
900078bc:	78fa      	ldrb	r2, [r7, #3]
900078be:	0151      	lsls	r1, r2, #5
900078c0:	693a      	ldr	r2, [r7, #16]
900078c2:	440a      	add	r2, r1
900078c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900078c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900078cc:	6053      	str	r3, [r2, #4]
900078ce:	e0b5      	b.n	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900078d0:	78fa      	ldrb	r2, [r7, #3]
900078d2:	6879      	ldr	r1, [r7, #4]
900078d4:	4613      	mov	r3, r2
900078d6:	011b      	lsls	r3, r3, #4
900078d8:	1a9b      	subs	r3, r3, r2
900078da:	009b      	lsls	r3, r3, #2
900078dc:	440b      	add	r3, r1
900078de:	334d      	adds	r3, #77	@ 0x4d
900078e0:	781b      	ldrb	r3, [r3, #0]
900078e2:	2b05      	cmp	r3, #5
900078e4:	d114      	bne.n	90007910 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900078e6:	78fa      	ldrb	r2, [r7, #3]
900078e8:	6879      	ldr	r1, [r7, #4]
900078ea:	4613      	mov	r3, r2
900078ec:	011b      	lsls	r3, r3, #4
900078ee:	1a9b      	subs	r3, r3, r2
900078f0:	009b      	lsls	r3, r3, #2
900078f2:	440b      	add	r3, r1
900078f4:	334d      	adds	r3, #77	@ 0x4d
900078f6:	2202      	movs	r2, #2
900078f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
900078fa:	78fa      	ldrb	r2, [r7, #3]
900078fc:	6879      	ldr	r1, [r7, #4]
900078fe:	4613      	mov	r3, r2
90007900:	011b      	lsls	r3, r3, #4
90007902:	1a9b      	subs	r3, r3, r2
90007904:	009b      	lsls	r3, r3, #2
90007906:	440b      	add	r3, r1
90007908:	334c      	adds	r3, #76	@ 0x4c
9000790a:	2202      	movs	r2, #2
9000790c:	701a      	strb	r2, [r3, #0]
9000790e:	e095      	b.n	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90007910:	78fa      	ldrb	r2, [r7, #3]
90007912:	6879      	ldr	r1, [r7, #4]
90007914:	4613      	mov	r3, r2
90007916:	011b      	lsls	r3, r3, #4
90007918:	1a9b      	subs	r3, r3, r2
9000791a:	009b      	lsls	r3, r3, #2
9000791c:	440b      	add	r3, r1
9000791e:	334d      	adds	r3, #77	@ 0x4d
90007920:	781b      	ldrb	r3, [r3, #0]
90007922:	2b06      	cmp	r3, #6
90007924:	d114      	bne.n	90007950 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90007926:	78fa      	ldrb	r2, [r7, #3]
90007928:	6879      	ldr	r1, [r7, #4]
9000792a:	4613      	mov	r3, r2
9000792c:	011b      	lsls	r3, r3, #4
9000792e:	1a9b      	subs	r3, r3, r2
90007930:	009b      	lsls	r3, r3, #2
90007932:	440b      	add	r3, r1
90007934:	334d      	adds	r3, #77	@ 0x4d
90007936:	2202      	movs	r2, #2
90007938:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
9000793a:	78fa      	ldrb	r2, [r7, #3]
9000793c:	6879      	ldr	r1, [r7, #4]
9000793e:	4613      	mov	r3, r2
90007940:	011b      	lsls	r3, r3, #4
90007942:	1a9b      	subs	r3, r3, r2
90007944:	009b      	lsls	r3, r3, #2
90007946:	440b      	add	r3, r1
90007948:	334c      	adds	r3, #76	@ 0x4c
9000794a:	2205      	movs	r2, #5
9000794c:	701a      	strb	r2, [r3, #0]
9000794e:	e075      	b.n	90007a3c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90007950:	78fa      	ldrb	r2, [r7, #3]
90007952:	6879      	ldr	r1, [r7, #4]
90007954:	4613      	mov	r3, r2
90007956:	011b      	lsls	r3, r3, #4
90007958:	1a9b      	subs	r3, r3, r2
9000795a:	009b      	lsls	r3, r3, #2
9000795c:	440b      	add	r3, r1
9000795e:	334d      	adds	r3, #77	@ 0x4d
90007960:	781b      	ldrb	r3, [r3, #0]
90007962:	2b07      	cmp	r3, #7
90007964:	d00a      	beq.n	9000797c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90007966:	78fa      	ldrb	r2, [r7, #3]
90007968:	6879      	ldr	r1, [r7, #4]
9000796a:	4613      	mov	r3, r2
9000796c:	011b      	lsls	r3, r3, #4
9000796e:	1a9b      	subs	r3, r3, r2
90007970:	009b      	lsls	r3, r3, #2
90007972:	440b      	add	r3, r1
90007974:	334d      	adds	r3, #77	@ 0x4d
90007976:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90007978:	2b09      	cmp	r3, #9
9000797a:	d170      	bne.n	90007a5e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000797c:	78fa      	ldrb	r2, [r7, #3]
9000797e:	6879      	ldr	r1, [r7, #4]
90007980:	4613      	mov	r3, r2
90007982:	011b      	lsls	r3, r3, #4
90007984:	1a9b      	subs	r3, r3, r2
90007986:	009b      	lsls	r3, r3, #2
90007988:	440b      	add	r3, r1
9000798a:	334d      	adds	r3, #77	@ 0x4d
9000798c:	2202      	movs	r2, #2
9000798e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90007990:	78fa      	ldrb	r2, [r7, #3]
90007992:	6879      	ldr	r1, [r7, #4]
90007994:	4613      	mov	r3, r2
90007996:	011b      	lsls	r3, r3, #4
90007998:	1a9b      	subs	r3, r3, r2
9000799a:	009b      	lsls	r3, r3, #2
9000799c:	440b      	add	r3, r1
9000799e:	3344      	adds	r3, #68	@ 0x44
900079a0:	681b      	ldr	r3, [r3, #0]
900079a2:	1c59      	adds	r1, r3, #1
900079a4:	6878      	ldr	r0, [r7, #4]
900079a6:	4613      	mov	r3, r2
900079a8:	011b      	lsls	r3, r3, #4
900079aa:	1a9b      	subs	r3, r3, r2
900079ac:	009b      	lsls	r3, r3, #2
900079ae:	4403      	add	r3, r0
900079b0:	3344      	adds	r3, #68	@ 0x44
900079b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900079b4:	78fa      	ldrb	r2, [r7, #3]
900079b6:	6879      	ldr	r1, [r7, #4]
900079b8:	4613      	mov	r3, r2
900079ba:	011b      	lsls	r3, r3, #4
900079bc:	1a9b      	subs	r3, r3, r2
900079be:	009b      	lsls	r3, r3, #2
900079c0:	440b      	add	r3, r1
900079c2:	3344      	adds	r3, #68	@ 0x44
900079c4:	681b      	ldr	r3, [r3, #0]
900079c6:	2b02      	cmp	r3, #2
900079c8:	d914      	bls.n	900079f4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900079ca:	78fa      	ldrb	r2, [r7, #3]
900079cc:	6879      	ldr	r1, [r7, #4]
900079ce:	4613      	mov	r3, r2
900079d0:	011b      	lsls	r3, r3, #4
900079d2:	1a9b      	subs	r3, r3, r2
900079d4:	009b      	lsls	r3, r3, #2
900079d6:	440b      	add	r3, r1
900079d8:	3344      	adds	r3, #68	@ 0x44
900079da:	2200      	movs	r2, #0
900079dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900079de:	78fa      	ldrb	r2, [r7, #3]
900079e0:	6879      	ldr	r1, [r7, #4]
900079e2:	4613      	mov	r3, r2
900079e4:	011b      	lsls	r3, r3, #4
900079e6:	1a9b      	subs	r3, r3, r2
900079e8:	009b      	lsls	r3, r3, #2
900079ea:	440b      	add	r3, r1
900079ec:	334c      	adds	r3, #76	@ 0x4c
900079ee:	2204      	movs	r2, #4
900079f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900079f2:	e022      	b.n	90007a3a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900079f4:	78fa      	ldrb	r2, [r7, #3]
900079f6:	6879      	ldr	r1, [r7, #4]
900079f8:	4613      	mov	r3, r2
900079fa:	011b      	lsls	r3, r3, #4
900079fc:	1a9b      	subs	r3, r3, r2
900079fe:	009b      	lsls	r3, r3, #2
90007a00:	440b      	add	r3, r1
90007a02:	334c      	adds	r3, #76	@ 0x4c
90007a04:	2202      	movs	r2, #2
90007a06:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90007a08:	78fb      	ldrb	r3, [r7, #3]
90007a0a:	015a      	lsls	r2, r3, #5
90007a0c:	693b      	ldr	r3, [r7, #16]
90007a0e:	4413      	add	r3, r2
90007a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007a14:	681b      	ldr	r3, [r3, #0]
90007a16:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90007a18:	68fb      	ldr	r3, [r7, #12]
90007a1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90007a1e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90007a20:	68fb      	ldr	r3, [r7, #12]
90007a22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90007a26:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90007a28:	78fb      	ldrb	r3, [r7, #3]
90007a2a:	015a      	lsls	r2, r3, #5
90007a2c:	693b      	ldr	r3, [r7, #16]
90007a2e:	4413      	add	r3, r2
90007a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007a34:	461a      	mov	r2, r3
90007a36:	68fb      	ldr	r3, [r7, #12]
90007a38:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90007a3a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90007a3c:	78fa      	ldrb	r2, [r7, #3]
90007a3e:	6879      	ldr	r1, [r7, #4]
90007a40:	4613      	mov	r3, r2
90007a42:	011b      	lsls	r3, r3, #4
90007a44:	1a9b      	subs	r3, r3, r2
90007a46:	009b      	lsls	r3, r3, #2
90007a48:	440b      	add	r3, r1
90007a4a:	334c      	adds	r3, #76	@ 0x4c
90007a4c:	781a      	ldrb	r2, [r3, #0]
90007a4e:	78fb      	ldrb	r3, [r7, #3]
90007a50:	4619      	mov	r1, r3
90007a52:	6878      	ldr	r0, [r7, #4]
90007a54:	f7f9 fff6 	bl	90001a44 <HAL_HCD_HC_NotifyURBChange_Callback>
90007a58:	e002      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90007a5a:	bf00      	nop
90007a5c:	e000      	b.n	90007a60 <HCD_HC_OUT_IRQHandler+0x978>
      return;
90007a5e:	bf00      	nop
  }
}
90007a60:	3718      	adds	r7, #24
90007a62:	46bd      	mov	sp, r7
90007a64:	bd80      	pop	{r7, pc}

90007a66 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90007a66:	b580      	push	{r7, lr}
90007a68:	b08a      	sub	sp, #40	@ 0x28
90007a6a:	af00      	add	r7, sp, #0
90007a6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90007a6e:	687b      	ldr	r3, [r7, #4]
90007a70:	681b      	ldr	r3, [r3, #0]
90007a72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
90007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007a76:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90007a78:	687b      	ldr	r3, [r7, #4]
90007a7a:	681b      	ldr	r3, [r3, #0]
90007a7c:	6a1b      	ldr	r3, [r3, #32]
90007a7e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
90007a80:	69fb      	ldr	r3, [r7, #28]
90007a82:	f003 030f 	and.w	r3, r3, #15
90007a86:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90007a88:	69fb      	ldr	r3, [r7, #28]
90007a8a:	0c5b      	lsrs	r3, r3, #17
90007a8c:	f003 030f 	and.w	r3, r3, #15
90007a90:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
90007a92:	69fb      	ldr	r3, [r7, #28]
90007a94:	091b      	lsrs	r3, r3, #4
90007a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
90007a9a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
90007a9c:	697b      	ldr	r3, [r7, #20]
90007a9e:	2b02      	cmp	r3, #2
90007aa0:	d004      	beq.n	90007aac <HCD_RXQLVL_IRQHandler+0x46>
90007aa2:	697b      	ldr	r3, [r7, #20]
90007aa4:	2b05      	cmp	r3, #5
90007aa6:	f000 80b6 	beq.w	90007c16 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
90007aaa:	e0b7      	b.n	90007c1c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
90007aac:	693b      	ldr	r3, [r7, #16]
90007aae:	2b00      	cmp	r3, #0
90007ab0:	f000 80b3 	beq.w	90007c1a <HCD_RXQLVL_IRQHandler+0x1b4>
90007ab4:	6879      	ldr	r1, [r7, #4]
90007ab6:	69ba      	ldr	r2, [r7, #24]
90007ab8:	4613      	mov	r3, r2
90007aba:	011b      	lsls	r3, r3, #4
90007abc:	1a9b      	subs	r3, r3, r2
90007abe:	009b      	lsls	r3, r3, #2
90007ac0:	440b      	add	r3, r1
90007ac2:	332c      	adds	r3, #44	@ 0x2c
90007ac4:	681b      	ldr	r3, [r3, #0]
90007ac6:	2b00      	cmp	r3, #0
90007ac8:	f000 80a7 	beq.w	90007c1a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
90007acc:	6879      	ldr	r1, [r7, #4]
90007ace:	69ba      	ldr	r2, [r7, #24]
90007ad0:	4613      	mov	r3, r2
90007ad2:	011b      	lsls	r3, r3, #4
90007ad4:	1a9b      	subs	r3, r3, r2
90007ad6:	009b      	lsls	r3, r3, #2
90007ad8:	440b      	add	r3, r1
90007ada:	3338      	adds	r3, #56	@ 0x38
90007adc:	681a      	ldr	r2, [r3, #0]
90007ade:	693b      	ldr	r3, [r7, #16]
90007ae0:	18d1      	adds	r1, r2, r3
90007ae2:	6878      	ldr	r0, [r7, #4]
90007ae4:	69ba      	ldr	r2, [r7, #24]
90007ae6:	4613      	mov	r3, r2
90007ae8:	011b      	lsls	r3, r3, #4
90007aea:	1a9b      	subs	r3, r3, r2
90007aec:	009b      	lsls	r3, r3, #2
90007aee:	4403      	add	r3, r0
90007af0:	3334      	adds	r3, #52	@ 0x34
90007af2:	681b      	ldr	r3, [r3, #0]
90007af4:	4299      	cmp	r1, r3
90007af6:	f200 8083 	bhi.w	90007c00 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90007afa:	687b      	ldr	r3, [r7, #4]
90007afc:	6818      	ldr	r0, [r3, #0]
90007afe:	6879      	ldr	r1, [r7, #4]
90007b00:	69ba      	ldr	r2, [r7, #24]
90007b02:	4613      	mov	r3, r2
90007b04:	011b      	lsls	r3, r3, #4
90007b06:	1a9b      	subs	r3, r3, r2
90007b08:	009b      	lsls	r3, r3, #2
90007b0a:	440b      	add	r3, r1
90007b0c:	332c      	adds	r3, #44	@ 0x2c
90007b0e:	681b      	ldr	r3, [r3, #0]
90007b10:	693a      	ldr	r2, [r7, #16]
90007b12:	b292      	uxth	r2, r2
90007b14:	4619      	mov	r1, r3
90007b16:	f004 fbdb 	bl	9000c2d0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90007b1a:	6879      	ldr	r1, [r7, #4]
90007b1c:	69ba      	ldr	r2, [r7, #24]
90007b1e:	4613      	mov	r3, r2
90007b20:	011b      	lsls	r3, r3, #4
90007b22:	1a9b      	subs	r3, r3, r2
90007b24:	009b      	lsls	r3, r3, #2
90007b26:	440b      	add	r3, r1
90007b28:	332c      	adds	r3, #44	@ 0x2c
90007b2a:	681a      	ldr	r2, [r3, #0]
90007b2c:	693b      	ldr	r3, [r7, #16]
90007b2e:	18d1      	adds	r1, r2, r3
90007b30:	6878      	ldr	r0, [r7, #4]
90007b32:	69ba      	ldr	r2, [r7, #24]
90007b34:	4613      	mov	r3, r2
90007b36:	011b      	lsls	r3, r3, #4
90007b38:	1a9b      	subs	r3, r3, r2
90007b3a:	009b      	lsls	r3, r3, #2
90007b3c:	4403      	add	r3, r0
90007b3e:	332c      	adds	r3, #44	@ 0x2c
90007b40:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90007b42:	6879      	ldr	r1, [r7, #4]
90007b44:	69ba      	ldr	r2, [r7, #24]
90007b46:	4613      	mov	r3, r2
90007b48:	011b      	lsls	r3, r3, #4
90007b4a:	1a9b      	subs	r3, r3, r2
90007b4c:	009b      	lsls	r3, r3, #2
90007b4e:	440b      	add	r3, r1
90007b50:	3338      	adds	r3, #56	@ 0x38
90007b52:	681a      	ldr	r2, [r3, #0]
90007b54:	693b      	ldr	r3, [r7, #16]
90007b56:	18d1      	adds	r1, r2, r3
90007b58:	6878      	ldr	r0, [r7, #4]
90007b5a:	69ba      	ldr	r2, [r7, #24]
90007b5c:	4613      	mov	r3, r2
90007b5e:	011b      	lsls	r3, r3, #4
90007b60:	1a9b      	subs	r3, r3, r2
90007b62:	009b      	lsls	r3, r3, #2
90007b64:	4403      	add	r3, r0
90007b66:	3338      	adds	r3, #56	@ 0x38
90007b68:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90007b6a:	69bb      	ldr	r3, [r7, #24]
90007b6c:	015a      	lsls	r2, r3, #5
90007b6e:	6a3b      	ldr	r3, [r7, #32]
90007b70:	4413      	add	r3, r2
90007b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007b76:	691b      	ldr	r3, [r3, #16]
90007b78:	0cdb      	lsrs	r3, r3, #19
90007b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
90007b7e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
90007b80:	6879      	ldr	r1, [r7, #4]
90007b82:	69ba      	ldr	r2, [r7, #24]
90007b84:	4613      	mov	r3, r2
90007b86:	011b      	lsls	r3, r3, #4
90007b88:	1a9b      	subs	r3, r3, r2
90007b8a:	009b      	lsls	r3, r3, #2
90007b8c:	440b      	add	r3, r1
90007b8e:	3328      	adds	r3, #40	@ 0x28
90007b90:	881b      	ldrh	r3, [r3, #0]
90007b92:	461a      	mov	r2, r3
90007b94:	693b      	ldr	r3, [r7, #16]
90007b96:	4293      	cmp	r3, r2
90007b98:	d13f      	bne.n	90007c1a <HCD_RXQLVL_IRQHandler+0x1b4>
90007b9a:	68fb      	ldr	r3, [r7, #12]
90007b9c:	2b00      	cmp	r3, #0
90007b9e:	d03c      	beq.n	90007c1a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
90007ba0:	69bb      	ldr	r3, [r7, #24]
90007ba2:	015a      	lsls	r2, r3, #5
90007ba4:	6a3b      	ldr	r3, [r7, #32]
90007ba6:	4413      	add	r3, r2
90007ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007bac:	681b      	ldr	r3, [r3, #0]
90007bae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90007bb0:	68bb      	ldr	r3, [r7, #8]
90007bb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90007bb6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90007bb8:	68bb      	ldr	r3, [r7, #8]
90007bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90007bbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
90007bc0:	69bb      	ldr	r3, [r7, #24]
90007bc2:	015a      	lsls	r2, r3, #5
90007bc4:	6a3b      	ldr	r3, [r7, #32]
90007bc6:	4413      	add	r3, r2
90007bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90007bcc:	461a      	mov	r2, r3
90007bce:	68bb      	ldr	r3, [r7, #8]
90007bd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90007bd2:	6879      	ldr	r1, [r7, #4]
90007bd4:	69ba      	ldr	r2, [r7, #24]
90007bd6:	4613      	mov	r3, r2
90007bd8:	011b      	lsls	r3, r3, #4
90007bda:	1a9b      	subs	r3, r3, r2
90007bdc:	009b      	lsls	r3, r3, #2
90007bde:	440b      	add	r3, r1
90007be0:	333c      	adds	r3, #60	@ 0x3c
90007be2:	781b      	ldrb	r3, [r3, #0]
90007be4:	f083 0301 	eor.w	r3, r3, #1
90007be8:	b2d8      	uxtb	r0, r3
90007bea:	6879      	ldr	r1, [r7, #4]
90007bec:	69ba      	ldr	r2, [r7, #24]
90007bee:	4613      	mov	r3, r2
90007bf0:	011b      	lsls	r3, r3, #4
90007bf2:	1a9b      	subs	r3, r3, r2
90007bf4:	009b      	lsls	r3, r3, #2
90007bf6:	440b      	add	r3, r1
90007bf8:	333c      	adds	r3, #60	@ 0x3c
90007bfa:	4602      	mov	r2, r0
90007bfc:	701a      	strb	r2, [r3, #0]
      break;
90007bfe:	e00c      	b.n	90007c1a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90007c00:	6879      	ldr	r1, [r7, #4]
90007c02:	69ba      	ldr	r2, [r7, #24]
90007c04:	4613      	mov	r3, r2
90007c06:	011b      	lsls	r3, r3, #4
90007c08:	1a9b      	subs	r3, r3, r2
90007c0a:	009b      	lsls	r3, r3, #2
90007c0c:	440b      	add	r3, r1
90007c0e:	334c      	adds	r3, #76	@ 0x4c
90007c10:	2204      	movs	r2, #4
90007c12:	701a      	strb	r2, [r3, #0]
      break;
90007c14:	e001      	b.n	90007c1a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90007c16:	bf00      	nop
90007c18:	e000      	b.n	90007c1c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90007c1a:	bf00      	nop
  }
}
90007c1c:	bf00      	nop
90007c1e:	3728      	adds	r7, #40	@ 0x28
90007c20:	46bd      	mov	sp, r7
90007c22:	bd80      	pop	{r7, pc}

90007c24 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90007c24:	b580      	push	{r7, lr}
90007c26:	b086      	sub	sp, #24
90007c28:	af00      	add	r7, sp, #0
90007c2a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90007c2c:	687b      	ldr	r3, [r7, #4]
90007c2e:	681b      	ldr	r3, [r3, #0]
90007c30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90007c32:	697b      	ldr	r3, [r7, #20]
90007c34:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90007c36:	693b      	ldr	r3, [r7, #16]
90007c38:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90007c3c:	681b      	ldr	r3, [r3, #0]
90007c3e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90007c40:	693b      	ldr	r3, [r7, #16]
90007c42:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90007c46:	681b      	ldr	r3, [r3, #0]
90007c48:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90007c4a:	68bb      	ldr	r3, [r7, #8]
90007c4c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90007c50:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90007c52:	68fb      	ldr	r3, [r7, #12]
90007c54:	f003 0302 	and.w	r3, r3, #2
90007c58:	2b02      	cmp	r3, #2
90007c5a:	d10b      	bne.n	90007c74 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90007c5c:	68fb      	ldr	r3, [r7, #12]
90007c5e:	f003 0301 	and.w	r3, r3, #1
90007c62:	2b01      	cmp	r3, #1
90007c64:	d102      	bne.n	90007c6c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90007c66:	6878      	ldr	r0, [r7, #4]
90007c68:	f7f9 feb4 	bl	900019d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90007c6c:	68bb      	ldr	r3, [r7, #8]
90007c6e:	f043 0302 	orr.w	r3, r3, #2
90007c72:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90007c74:	68fb      	ldr	r3, [r7, #12]
90007c76:	f003 0308 	and.w	r3, r3, #8
90007c7a:	2b08      	cmp	r3, #8
90007c7c:	d132      	bne.n	90007ce4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90007c7e:	68bb      	ldr	r3, [r7, #8]
90007c80:	f043 0308 	orr.w	r3, r3, #8
90007c84:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90007c86:	68fb      	ldr	r3, [r7, #12]
90007c88:	f003 0304 	and.w	r3, r3, #4
90007c8c:	2b04      	cmp	r3, #4
90007c8e:	d126      	bne.n	90007cde <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90007c90:	687b      	ldr	r3, [r7, #4]
90007c92:	7a5b      	ldrb	r3, [r3, #9]
90007c94:	2b02      	cmp	r3, #2
90007c96:	d113      	bne.n	90007cc0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90007c98:	68fb      	ldr	r3, [r7, #12]
90007c9a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90007c9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90007ca2:	d106      	bne.n	90007cb2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90007ca4:	687b      	ldr	r3, [r7, #4]
90007ca6:	681b      	ldr	r3, [r3, #0]
90007ca8:	2102      	movs	r1, #2
90007caa:	4618      	mov	r0, r3
90007cac:	f004 fc86 	bl	9000c5bc <USB_InitFSLSPClkSel>
90007cb0:	e011      	b.n	90007cd6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90007cb2:	687b      	ldr	r3, [r7, #4]
90007cb4:	681b      	ldr	r3, [r3, #0]
90007cb6:	2101      	movs	r1, #1
90007cb8:	4618      	mov	r0, r3
90007cba:	f004 fc7f 	bl	9000c5bc <USB_InitFSLSPClkSel>
90007cbe:	e00a      	b.n	90007cd6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
90007cc0:	687b      	ldr	r3, [r7, #4]
90007cc2:	79db      	ldrb	r3, [r3, #7]
90007cc4:	2b01      	cmp	r3, #1
90007cc6:	d106      	bne.n	90007cd6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90007cc8:	693b      	ldr	r3, [r7, #16]
90007cca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90007cce:	461a      	mov	r2, r3
90007cd0:	f64e 2360 	movw	r3, #60000	@ 0xea60
90007cd4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90007cd6:	6878      	ldr	r0, [r7, #4]
90007cd8:	f7f9 fe98 	bl	90001a0c <HAL_HCD_PortEnabled_Callback>
90007cdc:	e002      	b.n	90007ce4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90007cde:	6878      	ldr	r0, [r7, #4]
90007ce0:	f7f9 fea2 	bl	90001a28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90007ce4:	68fb      	ldr	r3, [r7, #12]
90007ce6:	f003 0320 	and.w	r3, r3, #32
90007cea:	2b20      	cmp	r3, #32
90007cec:	d103      	bne.n	90007cf6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90007cee:	68bb      	ldr	r3, [r7, #8]
90007cf0:	f043 0320 	orr.w	r3, r3, #32
90007cf4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90007cf6:	693b      	ldr	r3, [r7, #16]
90007cf8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90007cfc:	461a      	mov	r2, r3
90007cfe:	68bb      	ldr	r3, [r7, #8]
90007d00:	6013      	str	r3, [r2, #0]
}
90007d02:	bf00      	nop
90007d04:	3718      	adds	r7, #24
90007d06:	46bd      	mov	sp, r7
90007d08:	bd80      	pop	{r7, pc}
	...

90007d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90007d0c:	b580      	push	{r7, lr}
90007d0e:	b082      	sub	sp, #8
90007d10:	af00      	add	r7, sp, #0
90007d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90007d14:	687b      	ldr	r3, [r7, #4]
90007d16:	2b00      	cmp	r3, #0
90007d18:	d101      	bne.n	90007d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90007d1a:	2301      	movs	r3, #1
90007d1c:	e08b      	b.n	90007e36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90007d1e:	687b      	ldr	r3, [r7, #4]
90007d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90007d24:	b2db      	uxtb	r3, r3
90007d26:	2b00      	cmp	r3, #0
90007d28:	d106      	bne.n	90007d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90007d2a:	687b      	ldr	r3, [r7, #4]
90007d2c:	2200      	movs	r2, #0
90007d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90007d32:	6878      	ldr	r0, [r7, #4]
90007d34:	f000 f8b5 	bl	90007ea2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90007d38:	687b      	ldr	r3, [r7, #4]
90007d3a:	2224      	movs	r2, #36	@ 0x24
90007d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90007d40:	687b      	ldr	r3, [r7, #4]
90007d42:	681b      	ldr	r3, [r3, #0]
90007d44:	681a      	ldr	r2, [r3, #0]
90007d46:	687b      	ldr	r3, [r7, #4]
90007d48:	681b      	ldr	r3, [r3, #0]
90007d4a:	f022 0201 	bic.w	r2, r2, #1
90007d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007d50:	687b      	ldr	r3, [r7, #4]
90007d52:	685a      	ldr	r2, [r3, #4]
90007d54:	687b      	ldr	r3, [r7, #4]
90007d56:	681b      	ldr	r3, [r3, #0]
90007d58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90007d5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90007d5e:	687b      	ldr	r3, [r7, #4]
90007d60:	681b      	ldr	r3, [r3, #0]
90007d62:	689a      	ldr	r2, [r3, #8]
90007d64:	687b      	ldr	r3, [r7, #4]
90007d66:	681b      	ldr	r3, [r3, #0]
90007d68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90007d6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007d6e:	687b      	ldr	r3, [r7, #4]
90007d70:	68db      	ldr	r3, [r3, #12]
90007d72:	2b01      	cmp	r3, #1
90007d74:	d107      	bne.n	90007d86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90007d76:	687b      	ldr	r3, [r7, #4]
90007d78:	689a      	ldr	r2, [r3, #8]
90007d7a:	687b      	ldr	r3, [r7, #4]
90007d7c:	681b      	ldr	r3, [r3, #0]
90007d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90007d82:	609a      	str	r2, [r3, #8]
90007d84:	e006      	b.n	90007d94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007d86:	687b      	ldr	r3, [r7, #4]
90007d88:	689a      	ldr	r2, [r3, #8]
90007d8a:	687b      	ldr	r3, [r7, #4]
90007d8c:	681b      	ldr	r3, [r3, #0]
90007d8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90007d92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007d94:	687b      	ldr	r3, [r7, #4]
90007d96:	68db      	ldr	r3, [r3, #12]
90007d98:	2b02      	cmp	r3, #2
90007d9a:	d108      	bne.n	90007dae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90007d9c:	687b      	ldr	r3, [r7, #4]
90007d9e:	681b      	ldr	r3, [r3, #0]
90007da0:	685a      	ldr	r2, [r3, #4]
90007da2:	687b      	ldr	r3, [r7, #4]
90007da4:	681b      	ldr	r3, [r3, #0]
90007da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90007daa:	605a      	str	r2, [r3, #4]
90007dac:	e007      	b.n	90007dbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90007dae:	687b      	ldr	r3, [r7, #4]
90007db0:	681b      	ldr	r3, [r3, #0]
90007db2:	685a      	ldr	r2, [r3, #4]
90007db4:	687b      	ldr	r3, [r7, #4]
90007db6:	681b      	ldr	r3, [r3, #0]
90007db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90007dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007dbe:	687b      	ldr	r3, [r7, #4]
90007dc0:	681b      	ldr	r3, [r3, #0]
90007dc2:	6859      	ldr	r1, [r3, #4]
90007dc4:	687b      	ldr	r3, [r7, #4]
90007dc6:	681a      	ldr	r2, [r3, #0]
90007dc8:	4b1d      	ldr	r3, [pc, #116]	@ (90007e40 <HAL_I2C_Init+0x134>)
90007dca:	430b      	orrs	r3, r1
90007dcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90007dce:	687b      	ldr	r3, [r7, #4]
90007dd0:	681b      	ldr	r3, [r3, #0]
90007dd2:	68da      	ldr	r2, [r3, #12]
90007dd4:	687b      	ldr	r3, [r7, #4]
90007dd6:	681b      	ldr	r3, [r3, #0]
90007dd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90007ddc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007dde:	687b      	ldr	r3, [r7, #4]
90007de0:	691a      	ldr	r2, [r3, #16]
90007de2:	687b      	ldr	r3, [r7, #4]
90007de4:	695b      	ldr	r3, [r3, #20]
90007de6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90007dea:	687b      	ldr	r3, [r7, #4]
90007dec:	699b      	ldr	r3, [r3, #24]
90007dee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007df0:	687b      	ldr	r3, [r7, #4]
90007df2:	681b      	ldr	r3, [r3, #0]
90007df4:	430a      	orrs	r2, r1
90007df6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007df8:	687b      	ldr	r3, [r7, #4]
90007dfa:	69d9      	ldr	r1, [r3, #28]
90007dfc:	687b      	ldr	r3, [r7, #4]
90007dfe:	6a1a      	ldr	r2, [r3, #32]
90007e00:	687b      	ldr	r3, [r7, #4]
90007e02:	681b      	ldr	r3, [r3, #0]
90007e04:	430a      	orrs	r2, r1
90007e06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90007e08:	687b      	ldr	r3, [r7, #4]
90007e0a:	681b      	ldr	r3, [r3, #0]
90007e0c:	681a      	ldr	r2, [r3, #0]
90007e0e:	687b      	ldr	r3, [r7, #4]
90007e10:	681b      	ldr	r3, [r3, #0]
90007e12:	f042 0201 	orr.w	r2, r2, #1
90007e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007e18:	687b      	ldr	r3, [r7, #4]
90007e1a:	2200      	movs	r2, #0
90007e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90007e1e:	687b      	ldr	r3, [r7, #4]
90007e20:	2220      	movs	r2, #32
90007e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90007e26:	687b      	ldr	r3, [r7, #4]
90007e28:	2200      	movs	r2, #0
90007e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007e2c:	687b      	ldr	r3, [r7, #4]
90007e2e:	2200      	movs	r2, #0
90007e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90007e34:	2300      	movs	r3, #0
}
90007e36:	4618      	mov	r0, r3
90007e38:	3708      	adds	r7, #8
90007e3a:	46bd      	mov	sp, r7
90007e3c:	bd80      	pop	{r7, pc}
90007e3e:	bf00      	nop
90007e40:	02008000 	.word	0x02008000

90007e44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
90007e44:	b580      	push	{r7, lr}
90007e46:	b082      	sub	sp, #8
90007e48:	af00      	add	r7, sp, #0
90007e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90007e4c:	687b      	ldr	r3, [r7, #4]
90007e4e:	2b00      	cmp	r3, #0
90007e50:	d101      	bne.n	90007e56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
90007e52:	2301      	movs	r3, #1
90007e54:	e021      	b.n	90007e9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
90007e56:	687b      	ldr	r3, [r7, #4]
90007e58:	2224      	movs	r2, #36	@ 0x24
90007e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
90007e5e:	687b      	ldr	r3, [r7, #4]
90007e60:	681b      	ldr	r3, [r3, #0]
90007e62:	681a      	ldr	r2, [r3, #0]
90007e64:	687b      	ldr	r3, [r7, #4]
90007e66:	681b      	ldr	r3, [r3, #0]
90007e68:	f022 0201 	bic.w	r2, r2, #1
90007e6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
90007e6e:	6878      	ldr	r0, [r7, #4]
90007e70:	f000 f821 	bl	90007eb6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007e74:	687b      	ldr	r3, [r7, #4]
90007e76:	2200      	movs	r2, #0
90007e78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
90007e7a:	687b      	ldr	r3, [r7, #4]
90007e7c:	2200      	movs	r2, #0
90007e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90007e82:	687b      	ldr	r3, [r7, #4]
90007e84:	2200      	movs	r2, #0
90007e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007e88:	687b      	ldr	r3, [r7, #4]
90007e8a:	2200      	movs	r2, #0
90007e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
90007e90:	687b      	ldr	r3, [r7, #4]
90007e92:	2200      	movs	r2, #0
90007e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
90007e98:	2300      	movs	r3, #0
}
90007e9a:	4618      	mov	r0, r3
90007e9c:	3708      	adds	r7, #8
90007e9e:	46bd      	mov	sp, r7
90007ea0:	bd80      	pop	{r7, pc}

90007ea2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90007ea2:	b480      	push	{r7}
90007ea4:	b083      	sub	sp, #12
90007ea6:	af00      	add	r7, sp, #0
90007ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90007eaa:	bf00      	nop
90007eac:	370c      	adds	r7, #12
90007eae:	46bd      	mov	sp, r7
90007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
90007eb4:	4770      	bx	lr

90007eb6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
90007eb6:	b480      	push	{r7}
90007eb8:	b083      	sub	sp, #12
90007eba:	af00      	add	r7, sp, #0
90007ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
90007ebe:	bf00      	nop
90007ec0:	370c      	adds	r7, #12
90007ec2:	46bd      	mov	sp, r7
90007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
90007ec8:	4770      	bx	lr
	...

90007ecc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90007ecc:	b580      	push	{r7, lr}
90007ece:	b088      	sub	sp, #32
90007ed0:	af02      	add	r7, sp, #8
90007ed2:	60f8      	str	r0, [r7, #12]
90007ed4:	4608      	mov	r0, r1
90007ed6:	4611      	mov	r1, r2
90007ed8:	461a      	mov	r2, r3
90007eda:	4603      	mov	r3, r0
90007edc:	817b      	strh	r3, [r7, #10]
90007ede:	460b      	mov	r3, r1
90007ee0:	813b      	strh	r3, [r7, #8]
90007ee2:	4613      	mov	r3, r2
90007ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90007ee6:	68fb      	ldr	r3, [r7, #12]
90007ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90007eec:	b2db      	uxtb	r3, r3
90007eee:	2b20      	cmp	r3, #32
90007ef0:	f040 80f9 	bne.w	900080e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
90007ef4:	6a3b      	ldr	r3, [r7, #32]
90007ef6:	2b00      	cmp	r3, #0
90007ef8:	d002      	beq.n	90007f00 <HAL_I2C_Mem_Write+0x34>
90007efa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90007efc:	2b00      	cmp	r3, #0
90007efe:	d105      	bne.n	90007f0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007f00:	68fb      	ldr	r3, [r7, #12]
90007f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
90007f06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90007f08:	2301      	movs	r3, #1
90007f0a:	e0ed      	b.n	900080e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90007f0c:	68fb      	ldr	r3, [r7, #12]
90007f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90007f12:	2b01      	cmp	r3, #1
90007f14:	d101      	bne.n	90007f1a <HAL_I2C_Mem_Write+0x4e>
90007f16:	2302      	movs	r3, #2
90007f18:	e0e6      	b.n	900080e8 <HAL_I2C_Mem_Write+0x21c>
90007f1a:	68fb      	ldr	r3, [r7, #12]
90007f1c:	2201      	movs	r2, #1
90007f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90007f22:	f7fc fe4b 	bl	90004bbc <HAL_GetTick>
90007f26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90007f28:	697b      	ldr	r3, [r7, #20]
90007f2a:	9300      	str	r3, [sp, #0]
90007f2c:	2319      	movs	r3, #25
90007f2e:	2201      	movs	r2, #1
90007f30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90007f34:	68f8      	ldr	r0, [r7, #12]
90007f36:	f000 fadd 	bl	900084f4 <I2C_WaitOnFlagUntilTimeout>
90007f3a:	4603      	mov	r3, r0
90007f3c:	2b00      	cmp	r3, #0
90007f3e:	d001      	beq.n	90007f44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
90007f40:	2301      	movs	r3, #1
90007f42:	e0d1      	b.n	900080e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007f44:	68fb      	ldr	r3, [r7, #12]
90007f46:	2221      	movs	r2, #33	@ 0x21
90007f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007f4c:	68fb      	ldr	r3, [r7, #12]
90007f4e:	2240      	movs	r2, #64	@ 0x40
90007f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007f54:	68fb      	ldr	r3, [r7, #12]
90007f56:	2200      	movs	r2, #0
90007f58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90007f5a:	68fb      	ldr	r3, [r7, #12]
90007f5c:	6a3a      	ldr	r2, [r7, #32]
90007f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90007f60:	68fb      	ldr	r3, [r7, #12]
90007f62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90007f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90007f66:	68fb      	ldr	r3, [r7, #12]
90007f68:	2200      	movs	r2, #0
90007f6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90007f6c:	88f8      	ldrh	r0, [r7, #6]
90007f6e:	893a      	ldrh	r2, [r7, #8]
90007f70:	8979      	ldrh	r1, [r7, #10]
90007f72:	697b      	ldr	r3, [r7, #20]
90007f74:	9301      	str	r3, [sp, #4]
90007f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90007f78:	9300      	str	r3, [sp, #0]
90007f7a:	4603      	mov	r3, r0
90007f7c:	68f8      	ldr	r0, [r7, #12]
90007f7e:	f000 f9ed 	bl	9000835c <I2C_RequestMemoryWrite>
90007f82:	4603      	mov	r3, r0
90007f84:	2b00      	cmp	r3, #0
90007f86:	d005      	beq.n	90007f94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90007f88:	68fb      	ldr	r3, [r7, #12]
90007f8a:	2200      	movs	r2, #0
90007f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90007f90:	2301      	movs	r3, #1
90007f92:	e0a9      	b.n	900080e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007f94:	68fb      	ldr	r3, [r7, #12]
90007f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90007f98:	b29b      	uxth	r3, r3
90007f9a:	2bff      	cmp	r3, #255	@ 0xff
90007f9c:	d90e      	bls.n	90007fbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90007f9e:	68fb      	ldr	r3, [r7, #12]
90007fa0:	22ff      	movs	r2, #255	@ 0xff
90007fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90007fa4:	68fb      	ldr	r3, [r7, #12]
90007fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90007fa8:	b2da      	uxtb	r2, r3
90007faa:	8979      	ldrh	r1, [r7, #10]
90007fac:	2300      	movs	r3, #0
90007fae:	9300      	str	r3, [sp, #0]
90007fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90007fb4:	68f8      	ldr	r0, [r7, #12]
90007fb6:	f000 fc61 	bl	9000887c <I2C_TransferConfig>
90007fba:	e00f      	b.n	90007fdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90007fbc:	68fb      	ldr	r3, [r7, #12]
90007fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90007fc0:	b29a      	uxth	r2, r3
90007fc2:	68fb      	ldr	r3, [r7, #12]
90007fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90007fc6:	68fb      	ldr	r3, [r7, #12]
90007fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90007fca:	b2da      	uxtb	r2, r3
90007fcc:	8979      	ldrh	r1, [r7, #10]
90007fce:	2300      	movs	r3, #0
90007fd0:	9300      	str	r3, [sp, #0]
90007fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90007fd6:	68f8      	ldr	r0, [r7, #12]
90007fd8:	f000 fc50 	bl	9000887c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007fdc:	697a      	ldr	r2, [r7, #20]
90007fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90007fe0:	68f8      	ldr	r0, [r7, #12]
90007fe2:	f000 fae0 	bl	900085a6 <I2C_WaitOnTXISFlagUntilTimeout>
90007fe6:	4603      	mov	r3, r0
90007fe8:	2b00      	cmp	r3, #0
90007fea:	d001      	beq.n	90007ff0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
90007fec:	2301      	movs	r3, #1
90007fee:	e07b      	b.n	900080e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007ff0:	68fb      	ldr	r3, [r7, #12]
90007ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007ff4:	781a      	ldrb	r2, [r3, #0]
90007ff6:	68fb      	ldr	r3, [r7, #12]
90007ff8:	681b      	ldr	r3, [r3, #0]
90007ffa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90007ffc:	68fb      	ldr	r3, [r7, #12]
90007ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90008000:	1c5a      	adds	r2, r3, #1
90008002:	68fb      	ldr	r3, [r7, #12]
90008004:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
90008006:	68fb      	ldr	r3, [r7, #12]
90008008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000800a:	b29b      	uxth	r3, r3
9000800c:	3b01      	subs	r3, #1
9000800e:	b29a      	uxth	r2, r3
90008010:	68fb      	ldr	r3, [r7, #12]
90008012:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
90008014:	68fb      	ldr	r3, [r7, #12]
90008016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90008018:	3b01      	subs	r3, #1
9000801a:	b29a      	uxth	r2, r3
9000801c:	68fb      	ldr	r3, [r7, #12]
9000801e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008020:	68fb      	ldr	r3, [r7, #12]
90008022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90008024:	b29b      	uxth	r3, r3
90008026:	2b00      	cmp	r3, #0
90008028:	d034      	beq.n	90008094 <HAL_I2C_Mem_Write+0x1c8>
9000802a:	68fb      	ldr	r3, [r7, #12]
9000802c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000802e:	2b00      	cmp	r3, #0
90008030:	d130      	bne.n	90008094 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90008032:	697b      	ldr	r3, [r7, #20]
90008034:	9300      	str	r3, [sp, #0]
90008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90008038:	2200      	movs	r2, #0
9000803a:	2180      	movs	r1, #128	@ 0x80
9000803c:	68f8      	ldr	r0, [r7, #12]
9000803e:	f000 fa59 	bl	900084f4 <I2C_WaitOnFlagUntilTimeout>
90008042:	4603      	mov	r3, r0
90008044:	2b00      	cmp	r3, #0
90008046:	d001      	beq.n	9000804c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
90008048:	2301      	movs	r3, #1
9000804a:	e04d      	b.n	900080e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000804c:	68fb      	ldr	r3, [r7, #12]
9000804e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90008050:	b29b      	uxth	r3, r3
90008052:	2bff      	cmp	r3, #255	@ 0xff
90008054:	d90e      	bls.n	90008074 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008056:	68fb      	ldr	r3, [r7, #12]
90008058:	22ff      	movs	r2, #255	@ 0xff
9000805a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
9000805c:	68fb      	ldr	r3, [r7, #12]
9000805e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90008060:	b2da      	uxtb	r2, r3
90008062:	8979      	ldrh	r1, [r7, #10]
90008064:	2300      	movs	r3, #0
90008066:	9300      	str	r3, [sp, #0]
90008068:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
9000806c:	68f8      	ldr	r0, [r7, #12]
9000806e:	f000 fc05 	bl	9000887c <I2C_TransferConfig>
90008072:	e00f      	b.n	90008094 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90008074:	68fb      	ldr	r3, [r7, #12]
90008076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90008078:	b29a      	uxth	r2, r3
9000807a:	68fb      	ldr	r3, [r7, #12]
9000807c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
9000807e:	68fb      	ldr	r3, [r7, #12]
90008080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90008082:	b2da      	uxtb	r2, r3
90008084:	8979      	ldrh	r1, [r7, #10]
90008086:	2300      	movs	r3, #0
90008088:	9300      	str	r3, [sp, #0]
9000808a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
9000808e:	68f8      	ldr	r0, [r7, #12]
90008090:	f000 fbf4 	bl	9000887c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
90008094:	68fb      	ldr	r3, [r7, #12]
90008096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90008098:	b29b      	uxth	r3, r3
9000809a:	2b00      	cmp	r3, #0
9000809c:	d19e      	bne.n	90007fdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000809e:	697a      	ldr	r2, [r7, #20]
900080a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
900080a2:	68f8      	ldr	r0, [r7, #12]
900080a4:	f000 fac6 	bl	90008634 <I2C_WaitOnSTOPFlagUntilTimeout>
900080a8:	4603      	mov	r3, r0
900080aa:	2b00      	cmp	r3, #0
900080ac:	d001      	beq.n	900080b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
900080ae:	2301      	movs	r3, #1
900080b0:	e01a      	b.n	900080e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900080b2:	68fb      	ldr	r3, [r7, #12]
900080b4:	681b      	ldr	r3, [r3, #0]
900080b6:	2220      	movs	r2, #32
900080b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900080ba:	68fb      	ldr	r3, [r7, #12]
900080bc:	681b      	ldr	r3, [r3, #0]
900080be:	6859      	ldr	r1, [r3, #4]
900080c0:	68fb      	ldr	r3, [r7, #12]
900080c2:	681a      	ldr	r2, [r3, #0]
900080c4:	4b0a      	ldr	r3, [pc, #40]	@ (900080f0 <HAL_I2C_Mem_Write+0x224>)
900080c6:	400b      	ands	r3, r1
900080c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
900080ca:	68fb      	ldr	r3, [r7, #12]
900080cc:	2220      	movs	r2, #32
900080ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900080d2:	68fb      	ldr	r3, [r7, #12]
900080d4:	2200      	movs	r2, #0
900080d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900080da:	68fb      	ldr	r3, [r7, #12]
900080dc:	2200      	movs	r2, #0
900080de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900080e2:	2300      	movs	r3, #0
900080e4:	e000      	b.n	900080e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
900080e6:	2302      	movs	r3, #2
  }
}
900080e8:	4618      	mov	r0, r3
900080ea:	3718      	adds	r7, #24
900080ec:	46bd      	mov	sp, r7
900080ee:	bd80      	pop	{r7, pc}
900080f0:	fe00e800 	.word	0xfe00e800

900080f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
900080f4:	b580      	push	{r7, lr}
900080f6:	b088      	sub	sp, #32
900080f8:	af02      	add	r7, sp, #8
900080fa:	60f8      	str	r0, [r7, #12]
900080fc:	4608      	mov	r0, r1
900080fe:	4611      	mov	r1, r2
90008100:	461a      	mov	r2, r3
90008102:	4603      	mov	r3, r0
90008104:	817b      	strh	r3, [r7, #10]
90008106:	460b      	mov	r3, r1
90008108:	813b      	strh	r3, [r7, #8]
9000810a:	4613      	mov	r3, r2
9000810c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000810e:	68fb      	ldr	r3, [r7, #12]
90008110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90008114:	b2db      	uxtb	r3, r3
90008116:	2b20      	cmp	r3, #32
90008118:	f040 80fd 	bne.w	90008316 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
9000811c:	6a3b      	ldr	r3, [r7, #32]
9000811e:	2b00      	cmp	r3, #0
90008120:	d002      	beq.n	90008128 <HAL_I2C_Mem_Read+0x34>
90008122:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90008124:	2b00      	cmp	r3, #0
90008126:	d105      	bne.n	90008134 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008128:	68fb      	ldr	r3, [r7, #12]
9000812a:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000812e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90008130:	2301      	movs	r3, #1
90008132:	e0f1      	b.n	90008318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90008134:	68fb      	ldr	r3, [r7, #12]
90008136:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
9000813a:	2b01      	cmp	r3, #1
9000813c:	d101      	bne.n	90008142 <HAL_I2C_Mem_Read+0x4e>
9000813e:	2302      	movs	r3, #2
90008140:	e0ea      	b.n	90008318 <HAL_I2C_Mem_Read+0x224>
90008142:	68fb      	ldr	r3, [r7, #12]
90008144:	2201      	movs	r2, #1
90008146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
9000814a:	f7fc fd37 	bl	90004bbc <HAL_GetTick>
9000814e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90008150:	697b      	ldr	r3, [r7, #20]
90008152:	9300      	str	r3, [sp, #0]
90008154:	2319      	movs	r3, #25
90008156:	2201      	movs	r2, #1
90008158:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
9000815c:	68f8      	ldr	r0, [r7, #12]
9000815e:	f000 f9c9 	bl	900084f4 <I2C_WaitOnFlagUntilTimeout>
90008162:	4603      	mov	r3, r0
90008164:	2b00      	cmp	r3, #0
90008166:	d001      	beq.n	9000816c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90008168:	2301      	movs	r3, #1
9000816a:	e0d5      	b.n	90008318 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000816c:	68fb      	ldr	r3, [r7, #12]
9000816e:	2222      	movs	r2, #34	@ 0x22
90008170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008174:	68fb      	ldr	r3, [r7, #12]
90008176:	2240      	movs	r2, #64	@ 0x40
90008178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000817c:	68fb      	ldr	r3, [r7, #12]
9000817e:	2200      	movs	r2, #0
90008180:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90008182:	68fb      	ldr	r3, [r7, #12]
90008184:	6a3a      	ldr	r2, [r7, #32]
90008186:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90008188:	68fb      	ldr	r3, [r7, #12]
9000818a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
9000818c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
9000818e:	68fb      	ldr	r3, [r7, #12]
90008190:	2200      	movs	r2, #0
90008192:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90008194:	88f8      	ldrh	r0, [r7, #6]
90008196:	893a      	ldrh	r2, [r7, #8]
90008198:	8979      	ldrh	r1, [r7, #10]
9000819a:	697b      	ldr	r3, [r7, #20]
9000819c:	9301      	str	r3, [sp, #4]
9000819e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900081a0:	9300      	str	r3, [sp, #0]
900081a2:	4603      	mov	r3, r0
900081a4:	68f8      	ldr	r0, [r7, #12]
900081a6:	f000 f92d 	bl	90008404 <I2C_RequestMemoryRead>
900081aa:	4603      	mov	r3, r0
900081ac:	2b00      	cmp	r3, #0
900081ae:	d005      	beq.n	900081bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
900081b0:	68fb      	ldr	r3, [r7, #12]
900081b2:	2200      	movs	r2, #0
900081b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
900081b8:	2301      	movs	r3, #1
900081ba:	e0ad      	b.n	90008318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900081bc:	68fb      	ldr	r3, [r7, #12]
900081be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900081c0:	b29b      	uxth	r3, r3
900081c2:	2bff      	cmp	r3, #255	@ 0xff
900081c4:	d90e      	bls.n	900081e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
900081c6:	68fb      	ldr	r3, [r7, #12]
900081c8:	22ff      	movs	r2, #255	@ 0xff
900081ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
900081cc:	68fb      	ldr	r3, [r7, #12]
900081ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900081d0:	b2da      	uxtb	r2, r3
900081d2:	8979      	ldrh	r1, [r7, #10]
900081d4:	4b52      	ldr	r3, [pc, #328]	@ (90008320 <HAL_I2C_Mem_Read+0x22c>)
900081d6:	9300      	str	r3, [sp, #0]
900081d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
900081dc:	68f8      	ldr	r0, [r7, #12]
900081de:	f000 fb4d 	bl	9000887c <I2C_TransferConfig>
900081e2:	e00f      	b.n	90008204 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
900081e4:	68fb      	ldr	r3, [r7, #12]
900081e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900081e8:	b29a      	uxth	r2, r3
900081ea:	68fb      	ldr	r3, [r7, #12]
900081ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900081ee:	68fb      	ldr	r3, [r7, #12]
900081f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900081f2:	b2da      	uxtb	r2, r3
900081f4:	8979      	ldrh	r1, [r7, #10]
900081f6:	4b4a      	ldr	r3, [pc, #296]	@ (90008320 <HAL_I2C_Mem_Read+0x22c>)
900081f8:	9300      	str	r3, [sp, #0]
900081fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
900081fe:	68f8      	ldr	r0, [r7, #12]
90008200:	f000 fb3c 	bl	9000887c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90008204:	697b      	ldr	r3, [r7, #20]
90008206:	9300      	str	r3, [sp, #0]
90008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000820a:	2200      	movs	r2, #0
9000820c:	2104      	movs	r1, #4
9000820e:	68f8      	ldr	r0, [r7, #12]
90008210:	f000 f970 	bl	900084f4 <I2C_WaitOnFlagUntilTimeout>
90008214:	4603      	mov	r3, r0
90008216:	2b00      	cmp	r3, #0
90008218:	d001      	beq.n	9000821e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
9000821a:	2301      	movs	r3, #1
9000821c:	e07c      	b.n	90008318 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000821e:	68fb      	ldr	r3, [r7, #12]
90008220:	681b      	ldr	r3, [r3, #0]
90008222:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90008224:	68fb      	ldr	r3, [r7, #12]
90008226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90008228:	b2d2      	uxtb	r2, r2
9000822a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
9000822c:	68fb      	ldr	r3, [r7, #12]
9000822e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90008230:	1c5a      	adds	r2, r3, #1
90008232:	68fb      	ldr	r3, [r7, #12]
90008234:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90008236:	68fb      	ldr	r3, [r7, #12]
90008238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000823a:	3b01      	subs	r3, #1
9000823c:	b29a      	uxth	r2, r3
9000823e:	68fb      	ldr	r3, [r7, #12]
90008240:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90008242:	68fb      	ldr	r3, [r7, #12]
90008244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90008246:	b29b      	uxth	r3, r3
90008248:	3b01      	subs	r3, #1
9000824a:	b29a      	uxth	r2, r3
9000824c:	68fb      	ldr	r3, [r7, #12]
9000824e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008250:	68fb      	ldr	r3, [r7, #12]
90008252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90008254:	b29b      	uxth	r3, r3
90008256:	2b00      	cmp	r3, #0
90008258:	d034      	beq.n	900082c4 <HAL_I2C_Mem_Read+0x1d0>
9000825a:	68fb      	ldr	r3, [r7, #12]
9000825c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000825e:	2b00      	cmp	r3, #0
90008260:	d130      	bne.n	900082c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90008262:	697b      	ldr	r3, [r7, #20]
90008264:	9300      	str	r3, [sp, #0]
90008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90008268:	2200      	movs	r2, #0
9000826a:	2180      	movs	r1, #128	@ 0x80
9000826c:	68f8      	ldr	r0, [r7, #12]
9000826e:	f000 f941 	bl	900084f4 <I2C_WaitOnFlagUntilTimeout>
90008272:	4603      	mov	r3, r0
90008274:	2b00      	cmp	r3, #0
90008276:	d001      	beq.n	9000827c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90008278:	2301      	movs	r3, #1
9000827a:	e04d      	b.n	90008318 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000827c:	68fb      	ldr	r3, [r7, #12]
9000827e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90008280:	b29b      	uxth	r3, r3
90008282:	2bff      	cmp	r3, #255	@ 0xff
90008284:	d90e      	bls.n	900082a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008286:	68fb      	ldr	r3, [r7, #12]
90008288:	22ff      	movs	r2, #255	@ 0xff
9000828a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
9000828c:	68fb      	ldr	r3, [r7, #12]
9000828e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90008290:	b2da      	uxtb	r2, r3
90008292:	8979      	ldrh	r1, [r7, #10]
90008294:	2300      	movs	r3, #0
90008296:	9300      	str	r3, [sp, #0]
90008298:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
9000829c:	68f8      	ldr	r0, [r7, #12]
9000829e:	f000 faed 	bl	9000887c <I2C_TransferConfig>
900082a2:	e00f      	b.n	900082c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
900082a4:	68fb      	ldr	r3, [r7, #12]
900082a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900082a8:	b29a      	uxth	r2, r3
900082aa:	68fb      	ldr	r3, [r7, #12]
900082ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900082ae:	68fb      	ldr	r3, [r7, #12]
900082b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900082b2:	b2da      	uxtb	r2, r3
900082b4:	8979      	ldrh	r1, [r7, #10]
900082b6:	2300      	movs	r3, #0
900082b8:	9300      	str	r3, [sp, #0]
900082ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
900082be:	68f8      	ldr	r0, [r7, #12]
900082c0:	f000 fadc 	bl	9000887c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
900082c4:	68fb      	ldr	r3, [r7, #12]
900082c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900082c8:	b29b      	uxth	r3, r3
900082ca:	2b00      	cmp	r3, #0
900082cc:	d19a      	bne.n	90008204 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900082ce:	697a      	ldr	r2, [r7, #20]
900082d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
900082d2:	68f8      	ldr	r0, [r7, #12]
900082d4:	f000 f9ae 	bl	90008634 <I2C_WaitOnSTOPFlagUntilTimeout>
900082d8:	4603      	mov	r3, r0
900082da:	2b00      	cmp	r3, #0
900082dc:	d001      	beq.n	900082e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
900082de:	2301      	movs	r3, #1
900082e0:	e01a      	b.n	90008318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900082e2:	68fb      	ldr	r3, [r7, #12]
900082e4:	681b      	ldr	r3, [r3, #0]
900082e6:	2220      	movs	r2, #32
900082e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900082ea:	68fb      	ldr	r3, [r7, #12]
900082ec:	681b      	ldr	r3, [r3, #0]
900082ee:	6859      	ldr	r1, [r3, #4]
900082f0:	68fb      	ldr	r3, [r7, #12]
900082f2:	681a      	ldr	r2, [r3, #0]
900082f4:	4b0b      	ldr	r3, [pc, #44]	@ (90008324 <HAL_I2C_Mem_Read+0x230>)
900082f6:	400b      	ands	r3, r1
900082f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
900082fa:	68fb      	ldr	r3, [r7, #12]
900082fc:	2220      	movs	r2, #32
900082fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90008302:	68fb      	ldr	r3, [r7, #12]
90008304:	2200      	movs	r2, #0
90008306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000830a:	68fb      	ldr	r3, [r7, #12]
9000830c:	2200      	movs	r2, #0
9000830e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90008312:	2300      	movs	r3, #0
90008314:	e000      	b.n	90008318 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90008316:	2302      	movs	r3, #2
  }
}
90008318:	4618      	mov	r0, r3
9000831a:	3718      	adds	r7, #24
9000831c:	46bd      	mov	sp, r7
9000831e:	bd80      	pop	{r7, pc}
90008320:	80002400 	.word	0x80002400
90008324:	fe00e800 	.word	0xfe00e800

90008328 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90008328:	b480      	push	{r7}
9000832a:	b083      	sub	sp, #12
9000832c:	af00      	add	r7, sp, #0
9000832e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90008330:	687b      	ldr	r3, [r7, #4]
90008332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90008336:	b2db      	uxtb	r3, r3
}
90008338:	4618      	mov	r0, r3
9000833a:	370c      	adds	r7, #12
9000833c:	46bd      	mov	sp, r7
9000833e:	f85d 7b04 	ldr.w	r7, [sp], #4
90008342:	4770      	bx	lr

90008344 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90008344:	b480      	push	{r7}
90008346:	b083      	sub	sp, #12
90008348:	af00      	add	r7, sp, #0
9000834a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
9000834c:	687b      	ldr	r3, [r7, #4]
9000834e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90008350:	4618      	mov	r0, r3
90008352:	370c      	adds	r7, #12
90008354:	46bd      	mov	sp, r7
90008356:	f85d 7b04 	ldr.w	r7, [sp], #4
9000835a:	4770      	bx	lr

9000835c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
9000835c:	b580      	push	{r7, lr}
9000835e:	b086      	sub	sp, #24
90008360:	af02      	add	r7, sp, #8
90008362:	60f8      	str	r0, [r7, #12]
90008364:	4608      	mov	r0, r1
90008366:	4611      	mov	r1, r2
90008368:	461a      	mov	r2, r3
9000836a:	4603      	mov	r3, r0
9000836c:	817b      	strh	r3, [r7, #10]
9000836e:	460b      	mov	r3, r1
90008370:	813b      	strh	r3, [r7, #8]
90008372:	4613      	mov	r3, r2
90008374:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90008376:	88fb      	ldrh	r3, [r7, #6]
90008378:	b2da      	uxtb	r2, r3
9000837a:	8979      	ldrh	r1, [r7, #10]
9000837c:	4b20      	ldr	r3, [pc, #128]	@ (90008400 <I2C_RequestMemoryWrite+0xa4>)
9000837e:	9300      	str	r3, [sp, #0]
90008380:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90008384:	68f8      	ldr	r0, [r7, #12]
90008386:	f000 fa79 	bl	9000887c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000838a:	69fa      	ldr	r2, [r7, #28]
9000838c:	69b9      	ldr	r1, [r7, #24]
9000838e:	68f8      	ldr	r0, [r7, #12]
90008390:	f000 f909 	bl	900085a6 <I2C_WaitOnTXISFlagUntilTimeout>
90008394:	4603      	mov	r3, r0
90008396:	2b00      	cmp	r3, #0
90008398:	d001      	beq.n	9000839e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
9000839a:	2301      	movs	r3, #1
9000839c:	e02c      	b.n	900083f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000839e:	88fb      	ldrh	r3, [r7, #6]
900083a0:	2b01      	cmp	r3, #1
900083a2:	d105      	bne.n	900083b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900083a4:	893b      	ldrh	r3, [r7, #8]
900083a6:	b2da      	uxtb	r2, r3
900083a8:	68fb      	ldr	r3, [r7, #12]
900083aa:	681b      	ldr	r3, [r3, #0]
900083ac:	629a      	str	r2, [r3, #40]	@ 0x28
900083ae:	e015      	b.n	900083dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900083b0:	893b      	ldrh	r3, [r7, #8]
900083b2:	0a1b      	lsrs	r3, r3, #8
900083b4:	b29b      	uxth	r3, r3
900083b6:	b2da      	uxtb	r2, r3
900083b8:	68fb      	ldr	r3, [r7, #12]
900083ba:	681b      	ldr	r3, [r3, #0]
900083bc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900083be:	69fa      	ldr	r2, [r7, #28]
900083c0:	69b9      	ldr	r1, [r7, #24]
900083c2:	68f8      	ldr	r0, [r7, #12]
900083c4:	f000 f8ef 	bl	900085a6 <I2C_WaitOnTXISFlagUntilTimeout>
900083c8:	4603      	mov	r3, r0
900083ca:	2b00      	cmp	r3, #0
900083cc:	d001      	beq.n	900083d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
900083ce:	2301      	movs	r3, #1
900083d0:	e012      	b.n	900083f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900083d2:	893b      	ldrh	r3, [r7, #8]
900083d4:	b2da      	uxtb	r2, r3
900083d6:	68fb      	ldr	r3, [r7, #12]
900083d8:	681b      	ldr	r3, [r3, #0]
900083da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
900083dc:	69fb      	ldr	r3, [r7, #28]
900083de:	9300      	str	r3, [sp, #0]
900083e0:	69bb      	ldr	r3, [r7, #24]
900083e2:	2200      	movs	r2, #0
900083e4:	2180      	movs	r1, #128	@ 0x80
900083e6:	68f8      	ldr	r0, [r7, #12]
900083e8:	f000 f884 	bl	900084f4 <I2C_WaitOnFlagUntilTimeout>
900083ec:	4603      	mov	r3, r0
900083ee:	2b00      	cmp	r3, #0
900083f0:	d001      	beq.n	900083f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
900083f2:	2301      	movs	r3, #1
900083f4:	e000      	b.n	900083f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
900083f6:	2300      	movs	r3, #0
}
900083f8:	4618      	mov	r0, r3
900083fa:	3710      	adds	r7, #16
900083fc:	46bd      	mov	sp, r7
900083fe:	bd80      	pop	{r7, pc}
90008400:	80002000 	.word	0x80002000

90008404 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90008404:	b580      	push	{r7, lr}
90008406:	b086      	sub	sp, #24
90008408:	af02      	add	r7, sp, #8
9000840a:	60f8      	str	r0, [r7, #12]
9000840c:	4608      	mov	r0, r1
9000840e:	4611      	mov	r1, r2
90008410:	461a      	mov	r2, r3
90008412:	4603      	mov	r3, r0
90008414:	817b      	strh	r3, [r7, #10]
90008416:	460b      	mov	r3, r1
90008418:	813b      	strh	r3, [r7, #8]
9000841a:	4613      	mov	r3, r2
9000841c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
9000841e:	88fb      	ldrh	r3, [r7, #6]
90008420:	b2da      	uxtb	r2, r3
90008422:	8979      	ldrh	r1, [r7, #10]
90008424:	4b20      	ldr	r3, [pc, #128]	@ (900084a8 <I2C_RequestMemoryRead+0xa4>)
90008426:	9300      	str	r3, [sp, #0]
90008428:	2300      	movs	r3, #0
9000842a:	68f8      	ldr	r0, [r7, #12]
9000842c:	f000 fa26 	bl	9000887c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008430:	69fa      	ldr	r2, [r7, #28]
90008432:	69b9      	ldr	r1, [r7, #24]
90008434:	68f8      	ldr	r0, [r7, #12]
90008436:	f000 f8b6 	bl	900085a6 <I2C_WaitOnTXISFlagUntilTimeout>
9000843a:	4603      	mov	r3, r0
9000843c:	2b00      	cmp	r3, #0
9000843e:	d001      	beq.n	90008444 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90008440:	2301      	movs	r3, #1
90008442:	e02c      	b.n	9000849e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90008444:	88fb      	ldrh	r3, [r7, #6]
90008446:	2b01      	cmp	r3, #1
90008448:	d105      	bne.n	90008456 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000844a:	893b      	ldrh	r3, [r7, #8]
9000844c:	b2da      	uxtb	r2, r3
9000844e:	68fb      	ldr	r3, [r7, #12]
90008450:	681b      	ldr	r3, [r3, #0]
90008452:	629a      	str	r2, [r3, #40]	@ 0x28
90008454:	e015      	b.n	90008482 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008456:	893b      	ldrh	r3, [r7, #8]
90008458:	0a1b      	lsrs	r3, r3, #8
9000845a:	b29b      	uxth	r3, r3
9000845c:	b2da      	uxtb	r2, r3
9000845e:	68fb      	ldr	r3, [r7, #12]
90008460:	681b      	ldr	r3, [r3, #0]
90008462:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008464:	69fa      	ldr	r2, [r7, #28]
90008466:	69b9      	ldr	r1, [r7, #24]
90008468:	68f8      	ldr	r0, [r7, #12]
9000846a:	f000 f89c 	bl	900085a6 <I2C_WaitOnTXISFlagUntilTimeout>
9000846e:	4603      	mov	r3, r0
90008470:	2b00      	cmp	r3, #0
90008472:	d001      	beq.n	90008478 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90008474:	2301      	movs	r3, #1
90008476:	e012      	b.n	9000849e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90008478:	893b      	ldrh	r3, [r7, #8]
9000847a:	b2da      	uxtb	r2, r3
9000847c:	68fb      	ldr	r3, [r7, #12]
9000847e:	681b      	ldr	r3, [r3, #0]
90008480:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90008482:	69fb      	ldr	r3, [r7, #28]
90008484:	9300      	str	r3, [sp, #0]
90008486:	69bb      	ldr	r3, [r7, #24]
90008488:	2200      	movs	r2, #0
9000848a:	2140      	movs	r1, #64	@ 0x40
9000848c:	68f8      	ldr	r0, [r7, #12]
9000848e:	f000 f831 	bl	900084f4 <I2C_WaitOnFlagUntilTimeout>
90008492:	4603      	mov	r3, r0
90008494:	2b00      	cmp	r3, #0
90008496:	d001      	beq.n	9000849c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90008498:	2301      	movs	r3, #1
9000849a:	e000      	b.n	9000849e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
9000849c:	2300      	movs	r3, #0
}
9000849e:	4618      	mov	r0, r3
900084a0:	3710      	adds	r7, #16
900084a2:	46bd      	mov	sp, r7
900084a4:	bd80      	pop	{r7, pc}
900084a6:	bf00      	nop
900084a8:	80002000 	.word	0x80002000

900084ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
900084ac:	b480      	push	{r7}
900084ae:	b083      	sub	sp, #12
900084b0:	af00      	add	r7, sp, #0
900084b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900084b4:	687b      	ldr	r3, [r7, #4]
900084b6:	681b      	ldr	r3, [r3, #0]
900084b8:	699b      	ldr	r3, [r3, #24]
900084ba:	f003 0302 	and.w	r3, r3, #2
900084be:	2b02      	cmp	r3, #2
900084c0:	d103      	bne.n	900084ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
900084c2:	687b      	ldr	r3, [r7, #4]
900084c4:	681b      	ldr	r3, [r3, #0]
900084c6:	2200      	movs	r2, #0
900084c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900084ca:	687b      	ldr	r3, [r7, #4]
900084cc:	681b      	ldr	r3, [r3, #0]
900084ce:	699b      	ldr	r3, [r3, #24]
900084d0:	f003 0301 	and.w	r3, r3, #1
900084d4:	2b01      	cmp	r3, #1
900084d6:	d007      	beq.n	900084e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900084d8:	687b      	ldr	r3, [r7, #4]
900084da:	681b      	ldr	r3, [r3, #0]
900084dc:	699a      	ldr	r2, [r3, #24]
900084de:	687b      	ldr	r3, [r7, #4]
900084e0:	681b      	ldr	r3, [r3, #0]
900084e2:	f042 0201 	orr.w	r2, r2, #1
900084e6:	619a      	str	r2, [r3, #24]
  }
}
900084e8:	bf00      	nop
900084ea:	370c      	adds	r7, #12
900084ec:	46bd      	mov	sp, r7
900084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900084f2:	4770      	bx	lr

900084f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
900084f4:	b580      	push	{r7, lr}
900084f6:	b084      	sub	sp, #16
900084f8:	af00      	add	r7, sp, #0
900084fa:	60f8      	str	r0, [r7, #12]
900084fc:	60b9      	str	r1, [r7, #8]
900084fe:	603b      	str	r3, [r7, #0]
90008500:	4613      	mov	r3, r2
90008502:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008504:	e03b      	b.n	9000857e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90008506:	69ba      	ldr	r2, [r7, #24]
90008508:	6839      	ldr	r1, [r7, #0]
9000850a:	68f8      	ldr	r0, [r7, #12]
9000850c:	f000 f8d6 	bl	900086bc <I2C_IsErrorOccurred>
90008510:	4603      	mov	r3, r0
90008512:	2b00      	cmp	r3, #0
90008514:	d001      	beq.n	9000851a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90008516:	2301      	movs	r3, #1
90008518:	e041      	b.n	9000859e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000851a:	683b      	ldr	r3, [r7, #0]
9000851c:	f1b3 3fff 	cmp.w	r3, #4294967295
90008520:	d02d      	beq.n	9000857e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008522:	f7fc fb4b 	bl	90004bbc <HAL_GetTick>
90008526:	4602      	mov	r2, r0
90008528:	69bb      	ldr	r3, [r7, #24]
9000852a:	1ad3      	subs	r3, r2, r3
9000852c:	683a      	ldr	r2, [r7, #0]
9000852e:	429a      	cmp	r2, r3
90008530:	d302      	bcc.n	90008538 <I2C_WaitOnFlagUntilTimeout+0x44>
90008532:	683b      	ldr	r3, [r7, #0]
90008534:	2b00      	cmp	r3, #0
90008536:	d122      	bne.n	9000857e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008538:	68fb      	ldr	r3, [r7, #12]
9000853a:	681b      	ldr	r3, [r3, #0]
9000853c:	699a      	ldr	r2, [r3, #24]
9000853e:	68bb      	ldr	r3, [r7, #8]
90008540:	4013      	ands	r3, r2
90008542:	68ba      	ldr	r2, [r7, #8]
90008544:	429a      	cmp	r2, r3
90008546:	bf0c      	ite	eq
90008548:	2301      	moveq	r3, #1
9000854a:	2300      	movne	r3, #0
9000854c:	b2db      	uxtb	r3, r3
9000854e:	461a      	mov	r2, r3
90008550:	79fb      	ldrb	r3, [r7, #7]
90008552:	429a      	cmp	r2, r3
90008554:	d113      	bne.n	9000857e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008556:	68fb      	ldr	r3, [r7, #12]
90008558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000855a:	f043 0220 	orr.w	r2, r3, #32
9000855e:	68fb      	ldr	r3, [r7, #12]
90008560:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008562:	68fb      	ldr	r3, [r7, #12]
90008564:	2220      	movs	r2, #32
90008566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000856a:	68fb      	ldr	r3, [r7, #12]
9000856c:	2200      	movs	r2, #0
9000856e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90008572:	68fb      	ldr	r3, [r7, #12]
90008574:	2200      	movs	r2, #0
90008576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
9000857a:	2301      	movs	r3, #1
9000857c:	e00f      	b.n	9000859e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000857e:	68fb      	ldr	r3, [r7, #12]
90008580:	681b      	ldr	r3, [r3, #0]
90008582:	699a      	ldr	r2, [r3, #24]
90008584:	68bb      	ldr	r3, [r7, #8]
90008586:	4013      	ands	r3, r2
90008588:	68ba      	ldr	r2, [r7, #8]
9000858a:	429a      	cmp	r2, r3
9000858c:	bf0c      	ite	eq
9000858e:	2301      	moveq	r3, #1
90008590:	2300      	movne	r3, #0
90008592:	b2db      	uxtb	r3, r3
90008594:	461a      	mov	r2, r3
90008596:	79fb      	ldrb	r3, [r7, #7]
90008598:	429a      	cmp	r2, r3
9000859a:	d0b4      	beq.n	90008506 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000859c:	2300      	movs	r3, #0
}
9000859e:	4618      	mov	r0, r3
900085a0:	3710      	adds	r7, #16
900085a2:	46bd      	mov	sp, r7
900085a4:	bd80      	pop	{r7, pc}

900085a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900085a6:	b580      	push	{r7, lr}
900085a8:	b084      	sub	sp, #16
900085aa:	af00      	add	r7, sp, #0
900085ac:	60f8      	str	r0, [r7, #12]
900085ae:	60b9      	str	r1, [r7, #8]
900085b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900085b2:	e033      	b.n	9000861c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
900085b4:	687a      	ldr	r2, [r7, #4]
900085b6:	68b9      	ldr	r1, [r7, #8]
900085b8:	68f8      	ldr	r0, [r7, #12]
900085ba:	f000 f87f 	bl	900086bc <I2C_IsErrorOccurred>
900085be:	4603      	mov	r3, r0
900085c0:	2b00      	cmp	r3, #0
900085c2:	d001      	beq.n	900085c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
900085c4:	2301      	movs	r3, #1
900085c6:	e031      	b.n	9000862c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900085c8:	68bb      	ldr	r3, [r7, #8]
900085ca:	f1b3 3fff 	cmp.w	r3, #4294967295
900085ce:	d025      	beq.n	9000861c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900085d0:	f7fc faf4 	bl	90004bbc <HAL_GetTick>
900085d4:	4602      	mov	r2, r0
900085d6:	687b      	ldr	r3, [r7, #4]
900085d8:	1ad3      	subs	r3, r2, r3
900085da:	68ba      	ldr	r2, [r7, #8]
900085dc:	429a      	cmp	r2, r3
900085de:	d302      	bcc.n	900085e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
900085e0:	68bb      	ldr	r3, [r7, #8]
900085e2:	2b00      	cmp	r3, #0
900085e4:	d11a      	bne.n	9000861c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900085e6:	68fb      	ldr	r3, [r7, #12]
900085e8:	681b      	ldr	r3, [r3, #0]
900085ea:	699b      	ldr	r3, [r3, #24]
900085ec:	f003 0302 	and.w	r3, r3, #2
900085f0:	2b02      	cmp	r3, #2
900085f2:	d013      	beq.n	9000861c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900085f4:	68fb      	ldr	r3, [r7, #12]
900085f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900085f8:	f043 0220 	orr.w	r2, r3, #32
900085fc:	68fb      	ldr	r3, [r7, #12]
900085fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008600:	68fb      	ldr	r3, [r7, #12]
90008602:	2220      	movs	r2, #32
90008604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008608:	68fb      	ldr	r3, [r7, #12]
9000860a:	2200      	movs	r2, #0
9000860c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90008610:	68fb      	ldr	r3, [r7, #12]
90008612:	2200      	movs	r2, #0
90008614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90008618:	2301      	movs	r3, #1
9000861a:	e007      	b.n	9000862c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000861c:	68fb      	ldr	r3, [r7, #12]
9000861e:	681b      	ldr	r3, [r3, #0]
90008620:	699b      	ldr	r3, [r3, #24]
90008622:	f003 0302 	and.w	r3, r3, #2
90008626:	2b02      	cmp	r3, #2
90008628:	d1c4      	bne.n	900085b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
9000862a:	2300      	movs	r3, #0
}
9000862c:	4618      	mov	r0, r3
9000862e:	3710      	adds	r7, #16
90008630:	46bd      	mov	sp, r7
90008632:	bd80      	pop	{r7, pc}

90008634 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90008634:	b580      	push	{r7, lr}
90008636:	b084      	sub	sp, #16
90008638:	af00      	add	r7, sp, #0
9000863a:	60f8      	str	r0, [r7, #12]
9000863c:	60b9      	str	r1, [r7, #8]
9000863e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008640:	e02f      	b.n	900086a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90008642:	687a      	ldr	r2, [r7, #4]
90008644:	68b9      	ldr	r1, [r7, #8]
90008646:	68f8      	ldr	r0, [r7, #12]
90008648:	f000 f838 	bl	900086bc <I2C_IsErrorOccurred>
9000864c:	4603      	mov	r3, r0
9000864e:	2b00      	cmp	r3, #0
90008650:	d001      	beq.n	90008656 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90008652:	2301      	movs	r3, #1
90008654:	e02d      	b.n	900086b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008656:	f7fc fab1 	bl	90004bbc <HAL_GetTick>
9000865a:	4602      	mov	r2, r0
9000865c:	687b      	ldr	r3, [r7, #4]
9000865e:	1ad3      	subs	r3, r2, r3
90008660:	68ba      	ldr	r2, [r7, #8]
90008662:	429a      	cmp	r2, r3
90008664:	d302      	bcc.n	9000866c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90008666:	68bb      	ldr	r3, [r7, #8]
90008668:	2b00      	cmp	r3, #0
9000866a:	d11a      	bne.n	900086a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000866c:	68fb      	ldr	r3, [r7, #12]
9000866e:	681b      	ldr	r3, [r3, #0]
90008670:	699b      	ldr	r3, [r3, #24]
90008672:	f003 0320 	and.w	r3, r3, #32
90008676:	2b20      	cmp	r3, #32
90008678:	d013      	beq.n	900086a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000867a:	68fb      	ldr	r3, [r7, #12]
9000867c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000867e:	f043 0220 	orr.w	r2, r3, #32
90008682:	68fb      	ldr	r3, [r7, #12]
90008684:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90008686:	68fb      	ldr	r3, [r7, #12]
90008688:	2220      	movs	r2, #32
9000868a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
9000868e:	68fb      	ldr	r3, [r7, #12]
90008690:	2200      	movs	r2, #0
90008692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90008696:	68fb      	ldr	r3, [r7, #12]
90008698:	2200      	movs	r2, #0
9000869a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
9000869e:	2301      	movs	r3, #1
900086a0:	e007      	b.n	900086b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900086a2:	68fb      	ldr	r3, [r7, #12]
900086a4:	681b      	ldr	r3, [r3, #0]
900086a6:	699b      	ldr	r3, [r3, #24]
900086a8:	f003 0320 	and.w	r3, r3, #32
900086ac:	2b20      	cmp	r3, #32
900086ae:	d1c8      	bne.n	90008642 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
900086b0:	2300      	movs	r3, #0
}
900086b2:	4618      	mov	r0, r3
900086b4:	3710      	adds	r7, #16
900086b6:	46bd      	mov	sp, r7
900086b8:	bd80      	pop	{r7, pc}
	...

900086bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
900086bc:	b580      	push	{r7, lr}
900086be:	b08a      	sub	sp, #40	@ 0x28
900086c0:	af00      	add	r7, sp, #0
900086c2:	60f8      	str	r0, [r7, #12]
900086c4:	60b9      	str	r1, [r7, #8]
900086c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900086c8:	2300      	movs	r3, #0
900086ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
900086ce:	68fb      	ldr	r3, [r7, #12]
900086d0:	681b      	ldr	r3, [r3, #0]
900086d2:	699b      	ldr	r3, [r3, #24]
900086d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
900086d6:	2300      	movs	r3, #0
900086d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
900086da:	687b      	ldr	r3, [r7, #4]
900086dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900086de:	69bb      	ldr	r3, [r7, #24]
900086e0:	f003 0310 	and.w	r3, r3, #16
900086e4:	2b00      	cmp	r3, #0
900086e6:	d068      	beq.n	900087ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900086e8:	68fb      	ldr	r3, [r7, #12]
900086ea:	681b      	ldr	r3, [r3, #0]
900086ec:	2210      	movs	r2, #16
900086ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900086f0:	e049      	b.n	90008786 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900086f2:	68bb      	ldr	r3, [r7, #8]
900086f4:	f1b3 3fff 	cmp.w	r3, #4294967295
900086f8:	d045      	beq.n	90008786 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900086fa:	f7fc fa5f 	bl	90004bbc <HAL_GetTick>
900086fe:	4602      	mov	r2, r0
90008700:	69fb      	ldr	r3, [r7, #28]
90008702:	1ad3      	subs	r3, r2, r3
90008704:	68ba      	ldr	r2, [r7, #8]
90008706:	429a      	cmp	r2, r3
90008708:	d302      	bcc.n	90008710 <I2C_IsErrorOccurred+0x54>
9000870a:	68bb      	ldr	r3, [r7, #8]
9000870c:	2b00      	cmp	r3, #0
9000870e:	d13a      	bne.n	90008786 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90008710:	68fb      	ldr	r3, [r7, #12]
90008712:	681b      	ldr	r3, [r3, #0]
90008714:	685b      	ldr	r3, [r3, #4]
90008716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
9000871a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
9000871c:	68fb      	ldr	r3, [r7, #12]
9000871e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90008722:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90008724:	68fb      	ldr	r3, [r7, #12]
90008726:	681b      	ldr	r3, [r3, #0]
90008728:	699b      	ldr	r3, [r3, #24]
9000872a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
9000872e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008732:	d121      	bne.n	90008778 <I2C_IsErrorOccurred+0xbc>
90008734:	697b      	ldr	r3, [r7, #20]
90008736:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000873a:	d01d      	beq.n	90008778 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
9000873c:	7cfb      	ldrb	r3, [r7, #19]
9000873e:	2b20      	cmp	r3, #32
90008740:	d01a      	beq.n	90008778 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90008742:	68fb      	ldr	r3, [r7, #12]
90008744:	681b      	ldr	r3, [r3, #0]
90008746:	685a      	ldr	r2, [r3, #4]
90008748:	68fb      	ldr	r3, [r7, #12]
9000874a:	681b      	ldr	r3, [r3, #0]
9000874c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90008750:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90008752:	f7fc fa33 	bl	90004bbc <HAL_GetTick>
90008756:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008758:	e00e      	b.n	90008778 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000875a:	f7fc fa2f 	bl	90004bbc <HAL_GetTick>
9000875e:	4602      	mov	r2, r0
90008760:	69fb      	ldr	r3, [r7, #28]
90008762:	1ad3      	subs	r3, r2, r3
90008764:	2b19      	cmp	r3, #25
90008766:	d907      	bls.n	90008778 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90008768:	6a3b      	ldr	r3, [r7, #32]
9000876a:	f043 0320 	orr.w	r3, r3, #32
9000876e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90008770:	2301      	movs	r3, #1
90008772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90008776:	e006      	b.n	90008786 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008778:	68fb      	ldr	r3, [r7, #12]
9000877a:	681b      	ldr	r3, [r3, #0]
9000877c:	699b      	ldr	r3, [r3, #24]
9000877e:	f003 0320 	and.w	r3, r3, #32
90008782:	2b20      	cmp	r3, #32
90008784:	d1e9      	bne.n	9000875a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008786:	68fb      	ldr	r3, [r7, #12]
90008788:	681b      	ldr	r3, [r3, #0]
9000878a:	699b      	ldr	r3, [r3, #24]
9000878c:	f003 0320 	and.w	r3, r3, #32
90008790:	2b20      	cmp	r3, #32
90008792:	d003      	beq.n	9000879c <I2C_IsErrorOccurred+0xe0>
90008794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90008798:	2b00      	cmp	r3, #0
9000879a:	d0aa      	beq.n	900086f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
9000879c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900087a0:	2b00      	cmp	r3, #0
900087a2:	d103      	bne.n	900087ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900087a4:	68fb      	ldr	r3, [r7, #12]
900087a6:	681b      	ldr	r3, [r3, #0]
900087a8:	2220      	movs	r2, #32
900087aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900087ac:	6a3b      	ldr	r3, [r7, #32]
900087ae:	f043 0304 	orr.w	r3, r3, #4
900087b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
900087b4:	2301      	movs	r3, #1
900087b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900087ba:	68fb      	ldr	r3, [r7, #12]
900087bc:	681b      	ldr	r3, [r3, #0]
900087be:	699b      	ldr	r3, [r3, #24]
900087c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900087c2:	69bb      	ldr	r3, [r7, #24]
900087c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900087c8:	2b00      	cmp	r3, #0
900087ca:	d00b      	beq.n	900087e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
900087cc:	6a3b      	ldr	r3, [r7, #32]
900087ce:	f043 0301 	orr.w	r3, r3, #1
900087d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900087d4:	68fb      	ldr	r3, [r7, #12]
900087d6:	681b      	ldr	r3, [r3, #0]
900087d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
900087dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900087de:	2301      	movs	r3, #1
900087e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900087e4:	69bb      	ldr	r3, [r7, #24]
900087e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900087ea:	2b00      	cmp	r3, #0
900087ec:	d00b      	beq.n	90008806 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900087ee:	6a3b      	ldr	r3, [r7, #32]
900087f0:	f043 0308 	orr.w	r3, r3, #8
900087f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900087f6:	68fb      	ldr	r3, [r7, #12]
900087f8:	681b      	ldr	r3, [r3, #0]
900087fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
900087fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90008800:	2301      	movs	r3, #1
90008802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90008806:	69bb      	ldr	r3, [r7, #24]
90008808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000880c:	2b00      	cmp	r3, #0
9000880e:	d00b      	beq.n	90008828 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90008810:	6a3b      	ldr	r3, [r7, #32]
90008812:	f043 0302 	orr.w	r3, r3, #2
90008816:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90008818:	68fb      	ldr	r3, [r7, #12]
9000881a:	681b      	ldr	r3, [r3, #0]
9000881c:	f44f 7200 	mov.w	r2, #512	@ 0x200
90008820:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90008822:	2301      	movs	r3, #1
90008824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90008828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000882c:	2b00      	cmp	r3, #0
9000882e:	d01c      	beq.n	9000886a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90008830:	68f8      	ldr	r0, [r7, #12]
90008832:	f7ff fe3b 	bl	900084ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90008836:	68fb      	ldr	r3, [r7, #12]
90008838:	681b      	ldr	r3, [r3, #0]
9000883a:	6859      	ldr	r1, [r3, #4]
9000883c:	68fb      	ldr	r3, [r7, #12]
9000883e:	681a      	ldr	r2, [r3, #0]
90008840:	4b0d      	ldr	r3, [pc, #52]	@ (90008878 <I2C_IsErrorOccurred+0x1bc>)
90008842:	400b      	ands	r3, r1
90008844:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90008846:	68fb      	ldr	r3, [r7, #12]
90008848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000884a:	6a3b      	ldr	r3, [r7, #32]
9000884c:	431a      	orrs	r2, r3
9000884e:	68fb      	ldr	r3, [r7, #12]
90008850:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90008852:	68fb      	ldr	r3, [r7, #12]
90008854:	2220      	movs	r2, #32
90008856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000885a:	68fb      	ldr	r3, [r7, #12]
9000885c:	2200      	movs	r2, #0
9000885e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008862:	68fb      	ldr	r3, [r7, #12]
90008864:	2200      	movs	r2, #0
90008866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
9000886a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
9000886e:	4618      	mov	r0, r3
90008870:	3728      	adds	r7, #40	@ 0x28
90008872:	46bd      	mov	sp, r7
90008874:	bd80      	pop	{r7, pc}
90008876:	bf00      	nop
90008878:	fe00e800 	.word	0xfe00e800

9000887c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
9000887c:	b480      	push	{r7}
9000887e:	b087      	sub	sp, #28
90008880:	af00      	add	r7, sp, #0
90008882:	60f8      	str	r0, [r7, #12]
90008884:	607b      	str	r3, [r7, #4]
90008886:	460b      	mov	r3, r1
90008888:	817b      	strh	r3, [r7, #10]
9000888a:	4613      	mov	r3, r2
9000888c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000888e:	897b      	ldrh	r3, [r7, #10]
90008890:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008894:	7a7b      	ldrb	r3, [r7, #9]
90008896:	041b      	lsls	r3, r3, #16
90008898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000889c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000889e:	687b      	ldr	r3, [r7, #4]
900088a0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900088a2:	6a3b      	ldr	r3, [r7, #32]
900088a4:	4313      	orrs	r3, r2
900088a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
900088aa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900088ac:	68fb      	ldr	r3, [r7, #12]
900088ae:	681b      	ldr	r3, [r3, #0]
900088b0:	685a      	ldr	r2, [r3, #4]
900088b2:	6a3b      	ldr	r3, [r7, #32]
900088b4:	0d5b      	lsrs	r3, r3, #21
900088b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
900088ba:	4b08      	ldr	r3, [pc, #32]	@ (900088dc <I2C_TransferConfig+0x60>)
900088bc:	430b      	orrs	r3, r1
900088be:	43db      	mvns	r3, r3
900088c0:	ea02 0103 	and.w	r1, r2, r3
900088c4:	68fb      	ldr	r3, [r7, #12]
900088c6:	681b      	ldr	r3, [r3, #0]
900088c8:	697a      	ldr	r2, [r7, #20]
900088ca:	430a      	orrs	r2, r1
900088cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900088ce:	bf00      	nop
900088d0:	371c      	adds	r7, #28
900088d2:	46bd      	mov	sp, r7
900088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900088d8:	4770      	bx	lr
900088da:	bf00      	nop
900088dc:	03ff63ff 	.word	0x03ff63ff

900088e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900088e0:	b480      	push	{r7}
900088e2:	b083      	sub	sp, #12
900088e4:	af00      	add	r7, sp, #0
900088e6:	6078      	str	r0, [r7, #4]
900088e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900088ea:	687b      	ldr	r3, [r7, #4]
900088ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900088f0:	b2db      	uxtb	r3, r3
900088f2:	2b20      	cmp	r3, #32
900088f4:	d138      	bne.n	90008968 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900088f6:	687b      	ldr	r3, [r7, #4]
900088f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900088fc:	2b01      	cmp	r3, #1
900088fe:	d101      	bne.n	90008904 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90008900:	2302      	movs	r3, #2
90008902:	e032      	b.n	9000896a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90008904:	687b      	ldr	r3, [r7, #4]
90008906:	2201      	movs	r2, #1
90008908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
9000890c:	687b      	ldr	r3, [r7, #4]
9000890e:	2224      	movs	r2, #36	@ 0x24
90008910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008914:	687b      	ldr	r3, [r7, #4]
90008916:	681b      	ldr	r3, [r3, #0]
90008918:	681a      	ldr	r2, [r3, #0]
9000891a:	687b      	ldr	r3, [r7, #4]
9000891c:	681b      	ldr	r3, [r3, #0]
9000891e:	f022 0201 	bic.w	r2, r2, #1
90008922:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90008924:	687b      	ldr	r3, [r7, #4]
90008926:	681b      	ldr	r3, [r3, #0]
90008928:	681a      	ldr	r2, [r3, #0]
9000892a:	687b      	ldr	r3, [r7, #4]
9000892c:	681b      	ldr	r3, [r3, #0]
9000892e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90008932:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90008934:	687b      	ldr	r3, [r7, #4]
90008936:	681b      	ldr	r3, [r3, #0]
90008938:	6819      	ldr	r1, [r3, #0]
9000893a:	687b      	ldr	r3, [r7, #4]
9000893c:	681b      	ldr	r3, [r3, #0]
9000893e:	683a      	ldr	r2, [r7, #0]
90008940:	430a      	orrs	r2, r1
90008942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90008944:	687b      	ldr	r3, [r7, #4]
90008946:	681b      	ldr	r3, [r3, #0]
90008948:	681a      	ldr	r2, [r3, #0]
9000894a:	687b      	ldr	r3, [r7, #4]
9000894c:	681b      	ldr	r3, [r3, #0]
9000894e:	f042 0201 	orr.w	r2, r2, #1
90008952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90008954:	687b      	ldr	r3, [r7, #4]
90008956:	2220      	movs	r2, #32
90008958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000895c:	687b      	ldr	r3, [r7, #4]
9000895e:	2200      	movs	r2, #0
90008960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90008964:	2300      	movs	r3, #0
90008966:	e000      	b.n	9000896a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90008968:	2302      	movs	r3, #2
  }
}
9000896a:	4618      	mov	r0, r3
9000896c:	370c      	adds	r7, #12
9000896e:	46bd      	mov	sp, r7
90008970:	f85d 7b04 	ldr.w	r7, [sp], #4
90008974:	4770      	bx	lr

90008976 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90008976:	b480      	push	{r7}
90008978:	b085      	sub	sp, #20
9000897a:	af00      	add	r7, sp, #0
9000897c:	6078      	str	r0, [r7, #4]
9000897e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008980:	687b      	ldr	r3, [r7, #4]
90008982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90008986:	b2db      	uxtb	r3, r3
90008988:	2b20      	cmp	r3, #32
9000898a:	d139      	bne.n	90008a00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000898c:	687b      	ldr	r3, [r7, #4]
9000898e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90008992:	2b01      	cmp	r3, #1
90008994:	d101      	bne.n	9000899a <HAL_I2CEx_ConfigDigitalFilter+0x24>
90008996:	2302      	movs	r3, #2
90008998:	e033      	b.n	90008a02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000899a:	687b      	ldr	r3, [r7, #4]
9000899c:	2201      	movs	r2, #1
9000899e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900089a2:	687b      	ldr	r3, [r7, #4]
900089a4:	2224      	movs	r2, #36	@ 0x24
900089a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900089aa:	687b      	ldr	r3, [r7, #4]
900089ac:	681b      	ldr	r3, [r3, #0]
900089ae:	681a      	ldr	r2, [r3, #0]
900089b0:	687b      	ldr	r3, [r7, #4]
900089b2:	681b      	ldr	r3, [r3, #0]
900089b4:	f022 0201 	bic.w	r2, r2, #1
900089b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900089ba:	687b      	ldr	r3, [r7, #4]
900089bc:	681b      	ldr	r3, [r3, #0]
900089be:	681b      	ldr	r3, [r3, #0]
900089c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
900089c2:	68fb      	ldr	r3, [r7, #12]
900089c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
900089c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
900089ca:	683b      	ldr	r3, [r7, #0]
900089cc:	021b      	lsls	r3, r3, #8
900089ce:	68fa      	ldr	r2, [r7, #12]
900089d0:	4313      	orrs	r3, r2
900089d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900089d4:	687b      	ldr	r3, [r7, #4]
900089d6:	681b      	ldr	r3, [r3, #0]
900089d8:	68fa      	ldr	r2, [r7, #12]
900089da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900089dc:	687b      	ldr	r3, [r7, #4]
900089de:	681b      	ldr	r3, [r3, #0]
900089e0:	681a      	ldr	r2, [r3, #0]
900089e2:	687b      	ldr	r3, [r7, #4]
900089e4:	681b      	ldr	r3, [r3, #0]
900089e6:	f042 0201 	orr.w	r2, r2, #1
900089ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900089ec:	687b      	ldr	r3, [r7, #4]
900089ee:	2220      	movs	r2, #32
900089f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900089f4:	687b      	ldr	r3, [r7, #4]
900089f6:	2200      	movs	r2, #0
900089f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900089fc:	2300      	movs	r3, #0
900089fe:	e000      	b.n	90008a02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90008a00:	2302      	movs	r3, #2
  }
}
90008a02:	4618      	mov	r0, r3
90008a04:	3714      	adds	r7, #20
90008a06:	46bd      	mov	sp, r7
90008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
90008a0c:	4770      	bx	lr

90008a0e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90008a0e:	b580      	push	{r7, lr}
90008a10:	b084      	sub	sp, #16
90008a12:	af00      	add	r7, sp, #0
90008a14:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90008a16:	687b      	ldr	r3, [r7, #4]
90008a18:	2b00      	cmp	r3, #0
90008a1a:	d101      	bne.n	90008a20 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90008a1c:	2301      	movs	r3, #1
90008a1e:	e08f      	b.n	90008b40 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90008a20:	687b      	ldr	r3, [r7, #4]
90008a22:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90008a26:	b2db      	uxtb	r3, r3
90008a28:	2b00      	cmp	r3, #0
90008a2a:	d106      	bne.n	90008a3a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90008a2c:	687b      	ldr	r3, [r7, #4]
90008a2e:	2200      	movs	r2, #0
90008a30:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90008a34:	6878      	ldr	r0, [r7, #4]
90008a36:	f000 f887 	bl	90008b48 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90008a3a:	687b      	ldr	r3, [r7, #4]
90008a3c:	2202      	movs	r2, #2
90008a3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90008a42:	687b      	ldr	r3, [r7, #4]
90008a44:	681b      	ldr	r3, [r3, #0]
90008a46:	699a      	ldr	r2, [r3, #24]
90008a48:	687b      	ldr	r3, [r7, #4]
90008a4a:	681b      	ldr	r3, [r3, #0]
90008a4c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90008a50:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90008a52:	687b      	ldr	r3, [r7, #4]
90008a54:	681b      	ldr	r3, [r3, #0]
90008a56:	6999      	ldr	r1, [r3, #24]
90008a58:	687b      	ldr	r3, [r7, #4]
90008a5a:	685a      	ldr	r2, [r3, #4]
90008a5c:	687b      	ldr	r3, [r7, #4]
90008a5e:	689b      	ldr	r3, [r3, #8]
90008a60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90008a62:	687b      	ldr	r3, [r7, #4]
90008a64:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90008a66:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90008a68:	687b      	ldr	r3, [r7, #4]
90008a6a:	691b      	ldr	r3, [r3, #16]
90008a6c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90008a6e:	687b      	ldr	r3, [r7, #4]
90008a70:	681b      	ldr	r3, [r3, #0]
90008a72:	430a      	orrs	r2, r1
90008a74:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
90008a76:	687b      	ldr	r3, [r7, #4]
90008a78:	695b      	ldr	r3, [r3, #20]
90008a7a:	041b      	lsls	r3, r3, #16
90008a7c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
90008a7e:	687b      	ldr	r3, [r7, #4]
90008a80:	6999      	ldr	r1, [r3, #24]
90008a82:	687b      	ldr	r3, [r7, #4]
90008a84:	681b      	ldr	r3, [r3, #0]
90008a86:	68fa      	ldr	r2, [r7, #12]
90008a88:	430a      	orrs	r2, r1
90008a8a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90008a8c:	687b      	ldr	r3, [r7, #4]
90008a8e:	69db      	ldr	r3, [r3, #28]
90008a90:	041b      	lsls	r3, r3, #16
90008a92:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90008a94:	687b      	ldr	r3, [r7, #4]
90008a96:	6a19      	ldr	r1, [r3, #32]
90008a98:	687b      	ldr	r3, [r7, #4]
90008a9a:	681b      	ldr	r3, [r3, #0]
90008a9c:	68fa      	ldr	r2, [r7, #12]
90008a9e:	430a      	orrs	r2, r1
90008aa0:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90008aa2:	687b      	ldr	r3, [r7, #4]
90008aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90008aa6:	041b      	lsls	r3, r3, #16
90008aa8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
90008aaa:	687b      	ldr	r3, [r7, #4]
90008aac:	6a99      	ldr	r1, [r3, #40]	@ 0x28
90008aae:	687b      	ldr	r3, [r7, #4]
90008ab0:	681b      	ldr	r3, [r3, #0]
90008ab2:	68fa      	ldr	r2, [r7, #12]
90008ab4:	430a      	orrs	r2, r1
90008ab6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
90008ab8:	687b      	ldr	r3, [r7, #4]
90008aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008abc:	041b      	lsls	r3, r3, #16
90008abe:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90008ac0:	687b      	ldr	r3, [r7, #4]
90008ac2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90008ac4:	687b      	ldr	r3, [r7, #4]
90008ac6:	681b      	ldr	r3, [r3, #0]
90008ac8:	68fa      	ldr	r2, [r7, #12]
90008aca:	430a      	orrs	r2, r1
90008acc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90008ace:	687b      	ldr	r3, [r7, #4]
90008ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90008ad4:	021b      	lsls	r3, r3, #8
90008ad6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90008ad8:	687b      	ldr	r3, [r7, #4]
90008ada:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
90008ade:	041b      	lsls	r3, r3, #16
90008ae0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90008ae2:	687b      	ldr	r3, [r7, #4]
90008ae4:	681b      	ldr	r3, [r3, #0]
90008ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
90008ae8:	687b      	ldr	r3, [r7, #4]
90008aea:	681b      	ldr	r3, [r3, #0]
90008aec:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90008af0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90008af2:	687b      	ldr	r3, [r7, #4]
90008af4:	681b      	ldr	r3, [r3, #0]
90008af6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
90008af8:	68ba      	ldr	r2, [r7, #8]
90008afa:	68fb      	ldr	r3, [r7, #12]
90008afc:	4313      	orrs	r3, r2
90008afe:	687a      	ldr	r2, [r7, #4]
90008b00:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90008b04:	431a      	orrs	r2, r3
90008b06:	687b      	ldr	r3, [r7, #4]
90008b08:	681b      	ldr	r3, [r3, #0]
90008b0a:	430a      	orrs	r2, r1
90008b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90008b0e:	687b      	ldr	r3, [r7, #4]
90008b10:	681b      	ldr	r3, [r3, #0]
90008b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90008b14:	687b      	ldr	r3, [r7, #4]
90008b16:	681b      	ldr	r3, [r3, #0]
90008b18:	f042 0206 	orr.w	r2, r2, #6
90008b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90008b1e:	687b      	ldr	r3, [r7, #4]
90008b20:	681b      	ldr	r3, [r3, #0]
90008b22:	699a      	ldr	r2, [r3, #24]
90008b24:	687b      	ldr	r3, [r7, #4]
90008b26:	681b      	ldr	r3, [r3, #0]
90008b28:	f042 0201 	orr.w	r2, r2, #1
90008b2c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90008b2e:	687b      	ldr	r3, [r7, #4]
90008b30:	2200      	movs	r2, #0
90008b32:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90008b36:	687b      	ldr	r3, [r7, #4]
90008b38:	2201      	movs	r2, #1
90008b3a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
90008b3e:	2300      	movs	r3, #0
}
90008b40:	4618      	mov	r0, r3
90008b42:	3710      	adds	r7, #16
90008b44:	46bd      	mov	sp, r7
90008b46:	bd80      	pop	{r7, pc}

90008b48 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90008b48:	b480      	push	{r7}
90008b4a:	b083      	sub	sp, #12
90008b4c:	af00      	add	r7, sp, #0
90008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90008b50:	bf00      	nop
90008b52:	370c      	adds	r7, #12
90008b54:	46bd      	mov	sp, r7
90008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b5a:	4770      	bx	lr

90008b5c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90008b5c:	b5b0      	push	{r4, r5, r7, lr}
90008b5e:	b084      	sub	sp, #16
90008b60:	af00      	add	r7, sp, #0
90008b62:	60f8      	str	r0, [r7, #12]
90008b64:	60b9      	str	r1, [r7, #8]
90008b66:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90008b68:	68fb      	ldr	r3, [r7, #12]
90008b6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90008b6e:	2b01      	cmp	r3, #1
90008b70:	d101      	bne.n	90008b76 <HAL_LTDC_ConfigLayer+0x1a>
90008b72:	2302      	movs	r3, #2
90008b74:	e02c      	b.n	90008bd0 <HAL_LTDC_ConfigLayer+0x74>
90008b76:	68fb      	ldr	r3, [r7, #12]
90008b78:	2201      	movs	r2, #1
90008b7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90008b7e:	68fb      	ldr	r3, [r7, #12]
90008b80:	2202      	movs	r2, #2
90008b82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90008b86:	68fa      	ldr	r2, [r7, #12]
90008b88:	687b      	ldr	r3, [r7, #4]
90008b8a:	2134      	movs	r1, #52	@ 0x34
90008b8c:	fb01 f303 	mul.w	r3, r1, r3
90008b90:	4413      	add	r3, r2
90008b92:	f103 0238 	add.w	r2, r3, #56	@ 0x38
90008b96:	68bb      	ldr	r3, [r7, #8]
90008b98:	4614      	mov	r4, r2
90008b9a:	461d      	mov	r5, r3
90008b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90008b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90008ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90008ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90008ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90008ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90008ba8:	682b      	ldr	r3, [r5, #0]
90008baa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90008bac:	687a      	ldr	r2, [r7, #4]
90008bae:	68b9      	ldr	r1, [r7, #8]
90008bb0:	68f8      	ldr	r0, [r7, #12]
90008bb2:	f000 f903 	bl	90008dbc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90008bb6:	68fb      	ldr	r3, [r7, #12]
90008bb8:	681b      	ldr	r3, [r3, #0]
90008bba:	2201      	movs	r2, #1
90008bbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90008bbe:	68fb      	ldr	r3, [r7, #12]
90008bc0:	2201      	movs	r2, #1
90008bc2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90008bc6:	68fb      	ldr	r3, [r7, #12]
90008bc8:	2200      	movs	r2, #0
90008bca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90008bce:	2300      	movs	r3, #0
}
90008bd0:	4618      	mov	r0, r3
90008bd2:	3710      	adds	r7, #16
90008bd4:	46bd      	mov	sp, r7
90008bd6:	bdb0      	pop	{r4, r5, r7, pc}

90008bd8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
90008bd8:	b480      	push	{r7}
90008bda:	b085      	sub	sp, #20
90008bdc:	af00      	add	r7, sp, #0
90008bde:	60f8      	str	r0, [r7, #12]
90008be0:	60b9      	str	r1, [r7, #8]
90008be2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
90008be4:	68fb      	ldr	r3, [r7, #12]
90008be6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90008bea:	2b01      	cmp	r3, #1
90008bec:	d101      	bne.n	90008bf2 <HAL_LTDC_ConfigColorKeying+0x1a>
90008bee:	2302      	movs	r3, #2
90008bf0:	e030      	b.n	90008c54 <HAL_LTDC_ConfigColorKeying+0x7c>
90008bf2:	68fb      	ldr	r3, [r7, #12]
90008bf4:	2201      	movs	r2, #1
90008bf6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90008bfa:	68fb      	ldr	r3, [r7, #12]
90008bfc:	2202      	movs	r2, #2
90008bfe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
90008c02:	68fb      	ldr	r3, [r7, #12]
90008c04:	681b      	ldr	r3, [r3, #0]
90008c06:	461a      	mov	r2, r3
90008c08:	687b      	ldr	r3, [r7, #4]
90008c0a:	01db      	lsls	r3, r3, #7
90008c0c:	4413      	add	r3, r2
90008c0e:	3384      	adds	r3, #132	@ 0x84
90008c10:	68db      	ldr	r3, [r3, #12]
90008c12:	68fa      	ldr	r2, [r7, #12]
90008c14:	6812      	ldr	r2, [r2, #0]
90008c16:	4611      	mov	r1, r2
90008c18:	687a      	ldr	r2, [r7, #4]
90008c1a:	01d2      	lsls	r2, r2, #7
90008c1c:	440a      	add	r2, r1
90008c1e:	3284      	adds	r2, #132	@ 0x84
90008c20:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90008c24:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
90008c26:	68fb      	ldr	r3, [r7, #12]
90008c28:	681b      	ldr	r3, [r3, #0]
90008c2a:	461a      	mov	r2, r3
90008c2c:	687b      	ldr	r3, [r7, #4]
90008c2e:	01db      	lsls	r3, r3, #7
90008c30:	4413      	add	r3, r2
90008c32:	3384      	adds	r3, #132	@ 0x84
90008c34:	461a      	mov	r2, r3
90008c36:	68bb      	ldr	r3, [r7, #8]
90008c38:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90008c3a:	68fb      	ldr	r3, [r7, #12]
90008c3c:	681b      	ldr	r3, [r3, #0]
90008c3e:	2201      	movs	r2, #1
90008c40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90008c42:	68fb      	ldr	r3, [r7, #12]
90008c44:	2201      	movs	r2, #1
90008c46:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90008c4a:	68fb      	ldr	r3, [r7, #12]
90008c4c:	2200      	movs	r2, #0
90008c4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90008c52:	2300      	movs	r3, #0
}
90008c54:	4618      	mov	r0, r3
90008c56:	3714      	adds	r7, #20
90008c58:	46bd      	mov	sp, r7
90008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90008c5e:	4770      	bx	lr

90008c60 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
90008c60:	b480      	push	{r7}
90008c62:	b083      	sub	sp, #12
90008c64:	af00      	add	r7, sp, #0
90008c66:	6078      	str	r0, [r7, #4]
90008c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
90008c6a:	687b      	ldr	r3, [r7, #4]
90008c6c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90008c70:	2b01      	cmp	r3, #1
90008c72:	d101      	bne.n	90008c78 <HAL_LTDC_EnableColorKeying+0x18>
90008c74:	2302      	movs	r3, #2
90008c76:	e026      	b.n	90008cc6 <HAL_LTDC_EnableColorKeying+0x66>
90008c78:	687b      	ldr	r3, [r7, #4]
90008c7a:	2201      	movs	r2, #1
90008c7c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90008c80:	687b      	ldr	r3, [r7, #4]
90008c82:	2202      	movs	r2, #2
90008c84:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
90008c88:	687b      	ldr	r3, [r7, #4]
90008c8a:	681b      	ldr	r3, [r3, #0]
90008c8c:	461a      	mov	r2, r3
90008c8e:	683b      	ldr	r3, [r7, #0]
90008c90:	01db      	lsls	r3, r3, #7
90008c92:	4413      	add	r3, r2
90008c94:	3384      	adds	r3, #132	@ 0x84
90008c96:	681b      	ldr	r3, [r3, #0]
90008c98:	687a      	ldr	r2, [r7, #4]
90008c9a:	6812      	ldr	r2, [r2, #0]
90008c9c:	4611      	mov	r1, r2
90008c9e:	683a      	ldr	r2, [r7, #0]
90008ca0:	01d2      	lsls	r2, r2, #7
90008ca2:	440a      	add	r2, r1
90008ca4:	3284      	adds	r2, #132	@ 0x84
90008ca6:	f043 0302 	orr.w	r3, r3, #2
90008caa:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90008cac:	687b      	ldr	r3, [r7, #4]
90008cae:	681b      	ldr	r3, [r3, #0]
90008cb0:	2201      	movs	r2, #1
90008cb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90008cb4:	687b      	ldr	r3, [r7, #4]
90008cb6:	2201      	movs	r2, #1
90008cb8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90008cbc:	687b      	ldr	r3, [r7, #4]
90008cbe:	2200      	movs	r2, #0
90008cc0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90008cc4:	2300      	movs	r3, #0
}
90008cc6:	4618      	mov	r0, r3
90008cc8:	370c      	adds	r7, #12
90008cca:	46bd      	mov	sp, r7
90008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
90008cd0:	4770      	bx	lr

90008cd2 <HAL_LTDC_ConfigColorKeying_NoReload>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
90008cd2:	b480      	push	{r7}
90008cd4:	b085      	sub	sp, #20
90008cd6:	af00      	add	r7, sp, #0
90008cd8:	60f8      	str	r0, [r7, #12]
90008cda:	60b9      	str	r1, [r7, #8]
90008cdc:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
90008cde:	68fb      	ldr	r3, [r7, #12]
90008ce0:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90008ce4:	2b01      	cmp	r3, #1
90008ce6:	d101      	bne.n	90008cec <HAL_LTDC_ConfigColorKeying_NoReload+0x1a>
90008ce8:	2302      	movs	r3, #2
90008cea:	e02c      	b.n	90008d46 <HAL_LTDC_ConfigColorKeying_NoReload+0x74>
90008cec:	68fb      	ldr	r3, [r7, #12]
90008cee:	2201      	movs	r2, #1
90008cf0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90008cf4:	68fb      	ldr	r3, [r7, #12]
90008cf6:	2202      	movs	r2, #2
90008cf8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
90008cfc:	68fb      	ldr	r3, [r7, #12]
90008cfe:	681b      	ldr	r3, [r3, #0]
90008d00:	461a      	mov	r2, r3
90008d02:	687b      	ldr	r3, [r7, #4]
90008d04:	01db      	lsls	r3, r3, #7
90008d06:	4413      	add	r3, r2
90008d08:	3384      	adds	r3, #132	@ 0x84
90008d0a:	68db      	ldr	r3, [r3, #12]
90008d0c:	68fa      	ldr	r2, [r7, #12]
90008d0e:	6812      	ldr	r2, [r2, #0]
90008d10:	4611      	mov	r1, r2
90008d12:	687a      	ldr	r2, [r7, #4]
90008d14:	01d2      	lsls	r2, r2, #7
90008d16:	440a      	add	r2, r1
90008d18:	3284      	adds	r2, #132	@ 0x84
90008d1a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90008d1e:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
90008d20:	68fb      	ldr	r3, [r7, #12]
90008d22:	681b      	ldr	r3, [r3, #0]
90008d24:	461a      	mov	r2, r3
90008d26:	687b      	ldr	r3, [r7, #4]
90008d28:	01db      	lsls	r3, r3, #7
90008d2a:	4413      	add	r3, r2
90008d2c:	3384      	adds	r3, #132	@ 0x84
90008d2e:	461a      	mov	r2, r3
90008d30:	68bb      	ldr	r3, [r7, #8]
90008d32:	60d3      	str	r3, [r2, #12]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90008d34:	68fb      	ldr	r3, [r7, #12]
90008d36:	2201      	movs	r2, #1
90008d38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90008d3c:	68fb      	ldr	r3, [r7, #12]
90008d3e:	2200      	movs	r2, #0
90008d40:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90008d44:	2300      	movs	r3, #0
}
90008d46:	4618      	mov	r0, r3
90008d48:	3714      	adds	r7, #20
90008d4a:	46bd      	mov	sp, r7
90008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
90008d50:	4770      	bx	lr

90008d52 <HAL_LTDC_EnableColorKeying_NoReload>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
90008d52:	b480      	push	{r7}
90008d54:	b083      	sub	sp, #12
90008d56:	af00      	add	r7, sp, #0
90008d58:	6078      	str	r0, [r7, #4]
90008d5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
90008d5c:	687b      	ldr	r3, [r7, #4]
90008d5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
90008d62:	2b01      	cmp	r3, #1
90008d64:	d101      	bne.n	90008d6a <HAL_LTDC_EnableColorKeying_NoReload+0x18>
90008d66:	2302      	movs	r3, #2
90008d68:	e022      	b.n	90008db0 <HAL_LTDC_EnableColorKeying_NoReload+0x5e>
90008d6a:	687b      	ldr	r3, [r7, #4]
90008d6c:	2201      	movs	r2, #1
90008d6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90008d72:	687b      	ldr	r3, [r7, #4]
90008d74:	2202      	movs	r2, #2
90008d76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
90008d7a:	687b      	ldr	r3, [r7, #4]
90008d7c:	681b      	ldr	r3, [r3, #0]
90008d7e:	461a      	mov	r2, r3
90008d80:	683b      	ldr	r3, [r7, #0]
90008d82:	01db      	lsls	r3, r3, #7
90008d84:	4413      	add	r3, r2
90008d86:	3384      	adds	r3, #132	@ 0x84
90008d88:	681b      	ldr	r3, [r3, #0]
90008d8a:	687a      	ldr	r2, [r7, #4]
90008d8c:	6812      	ldr	r2, [r2, #0]
90008d8e:	4611      	mov	r1, r2
90008d90:	683a      	ldr	r2, [r7, #0]
90008d92:	01d2      	lsls	r2, r2, #7
90008d94:	440a      	add	r2, r1
90008d96:	3284      	adds	r2, #132	@ 0x84
90008d98:	f043 0302 	orr.w	r3, r3, #2
90008d9c:	6013      	str	r3, [r2, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90008d9e:	687b      	ldr	r3, [r7, #4]
90008da0:	2201      	movs	r2, #1
90008da2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90008da6:	687b      	ldr	r3, [r7, #4]
90008da8:	2200      	movs	r2, #0
90008daa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90008dae:	2300      	movs	r3, #0
}
90008db0:	4618      	mov	r0, r3
90008db2:	370c      	adds	r7, #12
90008db4:	46bd      	mov	sp, r7
90008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
90008dba:	4770      	bx	lr

90008dbc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90008dbc:	b480      	push	{r7}
90008dbe:	b089      	sub	sp, #36	@ 0x24
90008dc0:	af00      	add	r7, sp, #0
90008dc2:	60f8      	str	r0, [r7, #12]
90008dc4:	60b9      	str	r1, [r7, #8]
90008dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90008dc8:	68bb      	ldr	r3, [r7, #8]
90008dca:	685a      	ldr	r2, [r3, #4]
90008dcc:	68fb      	ldr	r3, [r7, #12]
90008dce:	681b      	ldr	r3, [r3, #0]
90008dd0:	68db      	ldr	r3, [r3, #12]
90008dd2:	0c1b      	lsrs	r3, r3, #16
90008dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
90008dd8:	4413      	add	r3, r2
90008dda:	041b      	lsls	r3, r3, #16
90008ddc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90008dde:	68fb      	ldr	r3, [r7, #12]
90008de0:	681b      	ldr	r3, [r3, #0]
90008de2:	461a      	mov	r2, r3
90008de4:	687b      	ldr	r3, [r7, #4]
90008de6:	01db      	lsls	r3, r3, #7
90008de8:	4413      	add	r3, r2
90008dea:	3384      	adds	r3, #132	@ 0x84
90008dec:	685b      	ldr	r3, [r3, #4]
90008dee:	68fa      	ldr	r2, [r7, #12]
90008df0:	6812      	ldr	r2, [r2, #0]
90008df2:	4611      	mov	r1, r2
90008df4:	687a      	ldr	r2, [r7, #4]
90008df6:	01d2      	lsls	r2, r2, #7
90008df8:	440a      	add	r2, r1
90008dfa:	3284      	adds	r2, #132	@ 0x84
90008dfc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90008e00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90008e02:	68bb      	ldr	r3, [r7, #8]
90008e04:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90008e06:	68fb      	ldr	r3, [r7, #12]
90008e08:	681b      	ldr	r3, [r3, #0]
90008e0a:	68db      	ldr	r3, [r3, #12]
90008e0c:	0c1b      	lsrs	r3, r3, #16
90008e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90008e12:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90008e14:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90008e16:	68fb      	ldr	r3, [r7, #12]
90008e18:	681b      	ldr	r3, [r3, #0]
90008e1a:	4619      	mov	r1, r3
90008e1c:	687b      	ldr	r3, [r7, #4]
90008e1e:	01db      	lsls	r3, r3, #7
90008e20:	440b      	add	r3, r1
90008e22:	3384      	adds	r3, #132	@ 0x84
90008e24:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90008e26:	69fb      	ldr	r3, [r7, #28]
90008e28:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90008e2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90008e2c:	68bb      	ldr	r3, [r7, #8]
90008e2e:	68da      	ldr	r2, [r3, #12]
90008e30:	68fb      	ldr	r3, [r7, #12]
90008e32:	681b      	ldr	r3, [r3, #0]
90008e34:	68db      	ldr	r3, [r3, #12]
90008e36:	f3c3 030a 	ubfx	r3, r3, #0, #11
90008e3a:	4413      	add	r3, r2
90008e3c:	041b      	lsls	r3, r3, #16
90008e3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90008e40:	68fb      	ldr	r3, [r7, #12]
90008e42:	681b      	ldr	r3, [r3, #0]
90008e44:	461a      	mov	r2, r3
90008e46:	687b      	ldr	r3, [r7, #4]
90008e48:	01db      	lsls	r3, r3, #7
90008e4a:	4413      	add	r3, r2
90008e4c:	3384      	adds	r3, #132	@ 0x84
90008e4e:	689b      	ldr	r3, [r3, #8]
90008e50:	68fa      	ldr	r2, [r7, #12]
90008e52:	6812      	ldr	r2, [r2, #0]
90008e54:	4611      	mov	r1, r2
90008e56:	687a      	ldr	r2, [r7, #4]
90008e58:	01d2      	lsls	r2, r2, #7
90008e5a:	440a      	add	r2, r1
90008e5c:	3284      	adds	r2, #132	@ 0x84
90008e5e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90008e62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90008e64:	68bb      	ldr	r3, [r7, #8]
90008e66:	689a      	ldr	r2, [r3, #8]
90008e68:	68fb      	ldr	r3, [r7, #12]
90008e6a:	681b      	ldr	r3, [r3, #0]
90008e6c:	68db      	ldr	r3, [r3, #12]
90008e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
90008e72:	4413      	add	r3, r2
90008e74:	1c5a      	adds	r2, r3, #1
90008e76:	68fb      	ldr	r3, [r7, #12]
90008e78:	681b      	ldr	r3, [r3, #0]
90008e7a:	4619      	mov	r1, r3
90008e7c:	687b      	ldr	r3, [r7, #4]
90008e7e:	01db      	lsls	r3, r3, #7
90008e80:	440b      	add	r3, r1
90008e82:	3384      	adds	r3, #132	@ 0x84
90008e84:	4619      	mov	r1, r3
90008e86:	69fb      	ldr	r3, [r7, #28]
90008e88:	4313      	orrs	r3, r2
90008e8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90008e8c:	68fb      	ldr	r3, [r7, #12]
90008e8e:	681b      	ldr	r3, [r3, #0]
90008e90:	461a      	mov	r2, r3
90008e92:	687b      	ldr	r3, [r7, #4]
90008e94:	01db      	lsls	r3, r3, #7
90008e96:	4413      	add	r3, r2
90008e98:	3384      	adds	r3, #132	@ 0x84
90008e9a:	691b      	ldr	r3, [r3, #16]
90008e9c:	68fa      	ldr	r2, [r7, #12]
90008e9e:	6812      	ldr	r2, [r2, #0]
90008ea0:	4611      	mov	r1, r2
90008ea2:	687a      	ldr	r2, [r7, #4]
90008ea4:	01d2      	lsls	r2, r2, #7
90008ea6:	440a      	add	r2, r1
90008ea8:	3284      	adds	r2, #132	@ 0x84
90008eaa:	f023 0307 	bic.w	r3, r3, #7
90008eae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90008eb0:	68fb      	ldr	r3, [r7, #12]
90008eb2:	681b      	ldr	r3, [r3, #0]
90008eb4:	461a      	mov	r2, r3
90008eb6:	687b      	ldr	r3, [r7, #4]
90008eb8:	01db      	lsls	r3, r3, #7
90008eba:	4413      	add	r3, r2
90008ebc:	3384      	adds	r3, #132	@ 0x84
90008ebe:	461a      	mov	r2, r3
90008ec0:	68bb      	ldr	r3, [r7, #8]
90008ec2:	691b      	ldr	r3, [r3, #16]
90008ec4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90008ec6:	68bb      	ldr	r3, [r7, #8]
90008ec8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
90008ecc:	021b      	lsls	r3, r3, #8
90008ece:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90008ed0:	68bb      	ldr	r3, [r7, #8]
90008ed2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
90008ed6:	041b      	lsls	r3, r3, #16
90008ed8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90008eda:	68bb      	ldr	r3, [r7, #8]
90008edc:	699b      	ldr	r3, [r3, #24]
90008ede:	061b      	lsls	r3, r3, #24
90008ee0:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
90008ee2:	68bb      	ldr	r3, [r7, #8]
90008ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90008ee8:	461a      	mov	r2, r3
90008eea:	69fb      	ldr	r3, [r7, #28]
90008eec:	431a      	orrs	r2, r3
90008eee:	69bb      	ldr	r3, [r7, #24]
90008ef0:	431a      	orrs	r2, r3
90008ef2:	68fb      	ldr	r3, [r7, #12]
90008ef4:	681b      	ldr	r3, [r3, #0]
90008ef6:	4619      	mov	r1, r3
90008ef8:	687b      	ldr	r3, [r7, #4]
90008efa:	01db      	lsls	r3, r3, #7
90008efc:	440b      	add	r3, r1
90008efe:	3384      	adds	r3, #132	@ 0x84
90008f00:	4619      	mov	r1, r3
90008f02:	697b      	ldr	r3, [r7, #20]
90008f04:	4313      	orrs	r3, r2
90008f06:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90008f08:	68fb      	ldr	r3, [r7, #12]
90008f0a:	681b      	ldr	r3, [r3, #0]
90008f0c:	461a      	mov	r2, r3
90008f0e:	687b      	ldr	r3, [r7, #4]
90008f10:	01db      	lsls	r3, r3, #7
90008f12:	4413      	add	r3, r2
90008f14:	3384      	adds	r3, #132	@ 0x84
90008f16:	695b      	ldr	r3, [r3, #20]
90008f18:	68fa      	ldr	r2, [r7, #12]
90008f1a:	6812      	ldr	r2, [r2, #0]
90008f1c:	4611      	mov	r1, r2
90008f1e:	687a      	ldr	r2, [r7, #4]
90008f20:	01d2      	lsls	r2, r2, #7
90008f22:	440a      	add	r2, r1
90008f24:	3284      	adds	r2, #132	@ 0x84
90008f26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90008f2a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90008f2c:	68fb      	ldr	r3, [r7, #12]
90008f2e:	681b      	ldr	r3, [r3, #0]
90008f30:	461a      	mov	r2, r3
90008f32:	687b      	ldr	r3, [r7, #4]
90008f34:	01db      	lsls	r3, r3, #7
90008f36:	4413      	add	r3, r2
90008f38:	3384      	adds	r3, #132	@ 0x84
90008f3a:	461a      	mov	r2, r3
90008f3c:	68bb      	ldr	r3, [r7, #8]
90008f3e:	695b      	ldr	r3, [r3, #20]
90008f40:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90008f42:	68fb      	ldr	r3, [r7, #12]
90008f44:	681b      	ldr	r3, [r3, #0]
90008f46:	461a      	mov	r2, r3
90008f48:	687b      	ldr	r3, [r7, #4]
90008f4a:	01db      	lsls	r3, r3, #7
90008f4c:	4413      	add	r3, r2
90008f4e:	3384      	adds	r3, #132	@ 0x84
90008f50:	69da      	ldr	r2, [r3, #28]
90008f52:	68fb      	ldr	r3, [r7, #12]
90008f54:	681b      	ldr	r3, [r3, #0]
90008f56:	4619      	mov	r1, r3
90008f58:	687b      	ldr	r3, [r7, #4]
90008f5a:	01db      	lsls	r3, r3, #7
90008f5c:	440b      	add	r3, r1
90008f5e:	3384      	adds	r3, #132	@ 0x84
90008f60:	4619      	mov	r1, r3
90008f62:	4b4f      	ldr	r3, [pc, #316]	@ (900090a0 <LTDC_SetConfig+0x2e4>)
90008f64:	4013      	ands	r3, r2
90008f66:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90008f68:	68bb      	ldr	r3, [r7, #8]
90008f6a:	69da      	ldr	r2, [r3, #28]
90008f6c:	68bb      	ldr	r3, [r7, #8]
90008f6e:	6a1b      	ldr	r3, [r3, #32]
90008f70:	68f9      	ldr	r1, [r7, #12]
90008f72:	6809      	ldr	r1, [r1, #0]
90008f74:	4608      	mov	r0, r1
90008f76:	6879      	ldr	r1, [r7, #4]
90008f78:	01c9      	lsls	r1, r1, #7
90008f7a:	4401      	add	r1, r0
90008f7c:	3184      	adds	r1, #132	@ 0x84
90008f7e:	4313      	orrs	r3, r2
90008f80:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90008f82:	68fb      	ldr	r3, [r7, #12]
90008f84:	681b      	ldr	r3, [r3, #0]
90008f86:	461a      	mov	r2, r3
90008f88:	687b      	ldr	r3, [r7, #4]
90008f8a:	01db      	lsls	r3, r3, #7
90008f8c:	4413      	add	r3, r2
90008f8e:	3384      	adds	r3, #132	@ 0x84
90008f90:	461a      	mov	r2, r3
90008f92:	68bb      	ldr	r3, [r7, #8]
90008f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90008f96:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90008f98:	68bb      	ldr	r3, [r7, #8]
90008f9a:	691b      	ldr	r3, [r3, #16]
90008f9c:	2b00      	cmp	r3, #0
90008f9e:	d102      	bne.n	90008fa6 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90008fa0:	2304      	movs	r3, #4
90008fa2:	61fb      	str	r3, [r7, #28]
90008fa4:	e01b      	b.n	90008fde <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90008fa6:	68bb      	ldr	r3, [r7, #8]
90008fa8:	691b      	ldr	r3, [r3, #16]
90008faa:	2b01      	cmp	r3, #1
90008fac:	d102      	bne.n	90008fb4 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
90008fae:	2303      	movs	r3, #3
90008fb0:	61fb      	str	r3, [r7, #28]
90008fb2:	e014      	b.n	90008fde <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90008fb4:	68bb      	ldr	r3, [r7, #8]
90008fb6:	691b      	ldr	r3, [r3, #16]
90008fb8:	2b04      	cmp	r3, #4
90008fba:	d00b      	beq.n	90008fd4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90008fbc:	68bb      	ldr	r3, [r7, #8]
90008fbe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90008fc0:	2b02      	cmp	r3, #2
90008fc2:	d007      	beq.n	90008fd4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90008fc4:	68bb      	ldr	r3, [r7, #8]
90008fc6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90008fc8:	2b03      	cmp	r3, #3
90008fca:	d003      	beq.n	90008fd4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90008fcc:	68bb      	ldr	r3, [r7, #8]
90008fce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90008fd0:	2b07      	cmp	r3, #7
90008fd2:	d102      	bne.n	90008fda <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90008fd4:	2302      	movs	r3, #2
90008fd6:	61fb      	str	r3, [r7, #28]
90008fd8:	e001      	b.n	90008fde <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
90008fda:	2301      	movs	r3, #1
90008fdc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90008fde:	68fb      	ldr	r3, [r7, #12]
90008fe0:	681b      	ldr	r3, [r3, #0]
90008fe2:	461a      	mov	r2, r3
90008fe4:	687b      	ldr	r3, [r7, #4]
90008fe6:	01db      	lsls	r3, r3, #7
90008fe8:	4413      	add	r3, r2
90008fea:	3384      	adds	r3, #132	@ 0x84
90008fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008fee:	68fa      	ldr	r2, [r7, #12]
90008ff0:	6812      	ldr	r2, [r2, #0]
90008ff2:	4611      	mov	r1, r2
90008ff4:	687a      	ldr	r2, [r7, #4]
90008ff6:	01d2      	lsls	r2, r2, #7
90008ff8:	440a      	add	r2, r1
90008ffa:	3284      	adds	r2, #132	@ 0x84
90008ffc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90009000:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90009002:	68bb      	ldr	r3, [r7, #8]
90009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009006:	69fa      	ldr	r2, [r7, #28]
90009008:	fb02 f303 	mul.w	r3, r2, r3
9000900c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000900e:	68bb      	ldr	r3, [r7, #8]
90009010:	6859      	ldr	r1, [r3, #4]
90009012:	68bb      	ldr	r3, [r7, #8]
90009014:	681b      	ldr	r3, [r3, #0]
90009016:	1acb      	subs	r3, r1, r3
90009018:	69f9      	ldr	r1, [r7, #28]
9000901a:	fb01 f303 	mul.w	r3, r1, r3
9000901e:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90009020:	68f9      	ldr	r1, [r7, #12]
90009022:	6809      	ldr	r1, [r1, #0]
90009024:	4608      	mov	r0, r1
90009026:	6879      	ldr	r1, [r7, #4]
90009028:	01c9      	lsls	r1, r1, #7
9000902a:	4401      	add	r1, r0
9000902c:	3184      	adds	r1, #132	@ 0x84
9000902e:	4313      	orrs	r3, r2
90009030:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90009032:	68fb      	ldr	r3, [r7, #12]
90009034:	681b      	ldr	r3, [r3, #0]
90009036:	461a      	mov	r2, r3
90009038:	687b      	ldr	r3, [r7, #4]
9000903a:	01db      	lsls	r3, r3, #7
9000903c:	4413      	add	r3, r2
9000903e:	3384      	adds	r3, #132	@ 0x84
90009040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90009042:	68fb      	ldr	r3, [r7, #12]
90009044:	681b      	ldr	r3, [r3, #0]
90009046:	4619      	mov	r1, r3
90009048:	687b      	ldr	r3, [r7, #4]
9000904a:	01db      	lsls	r3, r3, #7
9000904c:	440b      	add	r3, r1
9000904e:	3384      	adds	r3, #132	@ 0x84
90009050:	4619      	mov	r1, r3
90009052:	4b14      	ldr	r3, [pc, #80]	@ (900090a4 <LTDC_SetConfig+0x2e8>)
90009054:	4013      	ands	r3, r2
90009056:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009058:	68fb      	ldr	r3, [r7, #12]
9000905a:	681b      	ldr	r3, [r3, #0]
9000905c:	461a      	mov	r2, r3
9000905e:	687b      	ldr	r3, [r7, #4]
90009060:	01db      	lsls	r3, r3, #7
90009062:	4413      	add	r3, r2
90009064:	3384      	adds	r3, #132	@ 0x84
90009066:	461a      	mov	r2, r3
90009068:	68bb      	ldr	r3, [r7, #8]
9000906a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000906c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000906e:	68fb      	ldr	r3, [r7, #12]
90009070:	681b      	ldr	r3, [r3, #0]
90009072:	461a      	mov	r2, r3
90009074:	687b      	ldr	r3, [r7, #4]
90009076:	01db      	lsls	r3, r3, #7
90009078:	4413      	add	r3, r2
9000907a:	3384      	adds	r3, #132	@ 0x84
9000907c:	681b      	ldr	r3, [r3, #0]
9000907e:	68fa      	ldr	r2, [r7, #12]
90009080:	6812      	ldr	r2, [r2, #0]
90009082:	4611      	mov	r1, r2
90009084:	687a      	ldr	r2, [r7, #4]
90009086:	01d2      	lsls	r2, r2, #7
90009088:	440a      	add	r2, r1
9000908a:	3284      	adds	r2, #132	@ 0x84
9000908c:	f043 0301 	orr.w	r3, r3, #1
90009090:	6013      	str	r3, [r2, #0]
}
90009092:	bf00      	nop
90009094:	3724      	adds	r7, #36	@ 0x24
90009096:	46bd      	mov	sp, r7
90009098:	f85d 7b04 	ldr.w	r7, [sp], #4
9000909c:	4770      	bx	lr
9000909e:	bf00      	nop
900090a0:	fffff8f8 	.word	0xfffff8f8
900090a4:	fffff800 	.word	0xfffff800

900090a8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900090a8:	b580      	push	{r7, lr}
900090aa:	b084      	sub	sp, #16
900090ac:	af00      	add	r7, sp, #0
900090ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900090b0:	f7fb fd84 	bl	90004bbc <HAL_GetTick>
900090b4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900090b6:	687b      	ldr	r3, [r7, #4]
900090b8:	2b00      	cmp	r3, #0
900090ba:	d101      	bne.n	900090c0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
900090bc:	2301      	movs	r3, #1
900090be:	e03b      	b.n	90009138 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
900090c0:	687b      	ldr	r3, [r7, #4]
900090c2:	2200      	movs	r2, #0
900090c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
900090c8:	687b      	ldr	r3, [r7, #4]
900090ca:	2202      	movs	r2, #2
900090cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
900090d0:	687b      	ldr	r3, [r7, #4]
900090d2:	681b      	ldr	r3, [r3, #0]
900090d4:	68da      	ldr	r2, [r3, #12]
900090d6:	687b      	ldr	r3, [r7, #4]
900090d8:	681b      	ldr	r3, [r3, #0]
900090da:	f022 0201 	bic.w	r2, r2, #1
900090de:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900090e0:	e00f      	b.n	90009102 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
900090e2:	f7fb fd6b 	bl	90004bbc <HAL_GetTick>
900090e6:	4602      	mov	r2, r0
900090e8:	68fb      	ldr	r3, [r7, #12]
900090ea:	1ad3      	subs	r3, r2, r3
900090ec:	2b05      	cmp	r3, #5
900090ee:	d908      	bls.n	90009102 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
900090f0:	687b      	ldr	r3, [r7, #4]
900090f2:	2240      	movs	r2, #64	@ 0x40
900090f4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
900090f6:	687b      	ldr	r3, [r7, #4]
900090f8:	2203      	movs	r2, #3
900090fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
900090fe:	2301      	movs	r3, #1
90009100:	e01a      	b.n	90009138 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009102:	687b      	ldr	r3, [r7, #4]
90009104:	681b      	ldr	r3, [r3, #0]
90009106:	68db      	ldr	r3, [r3, #12]
90009108:	f003 0301 	and.w	r3, r3, #1
9000910c:	2b00      	cmp	r3, #0
9000910e:	d1e8      	bne.n	900090e2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90009110:	6878      	ldr	r0, [r7, #4]
90009112:	f000 f86d 	bl	900091f0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90009116:	687b      	ldr	r3, [r7, #4]
90009118:	2200      	movs	r2, #0
9000911a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
9000911c:	687b      	ldr	r3, [r7, #4]
9000911e:	2200      	movs	r2, #0
90009120:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90009122:	687b      	ldr	r3, [r7, #4]
90009124:	2200      	movs	r2, #0
90009126:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009128:	687b      	ldr	r3, [r7, #4]
9000912a:	2200      	movs	r2, #0
9000912c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
9000912e:	687b      	ldr	r3, [r7, #4]
90009130:	2201      	movs	r2, #1
90009132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90009136:	2300      	movs	r3, #0
}
90009138:	4618      	mov	r0, r3
9000913a:	3710      	adds	r7, #16
9000913c:	46bd      	mov	sp, r7
9000913e:	bd80      	pop	{r7, pc}

90009140 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
90009140:	b480      	push	{r7}
90009142:	b083      	sub	sp, #12
90009144:	af00      	add	r7, sp, #0
90009146:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90009148:	687b      	ldr	r3, [r7, #4]
9000914a:	2b00      	cmp	r3, #0
9000914c:	d101      	bne.n	90009152 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
9000914e:	2301      	movs	r3, #1
90009150:	e048      	b.n	900091e4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
90009152:	687b      	ldr	r3, [r7, #4]
90009154:	681b      	ldr	r3, [r3, #0]
90009156:	68da      	ldr	r2, [r3, #12]
90009158:	687b      	ldr	r3, [r7, #4]
9000915a:	681b      	ldr	r3, [r3, #0]
9000915c:	f022 0201 	bic.w	r2, r2, #1
90009160:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
90009162:	687b      	ldr	r3, [r7, #4]
90009164:	681b      	ldr	r3, [r3, #0]
90009166:	2200      	movs	r2, #0
90009168:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
9000916a:	687b      	ldr	r3, [r7, #4]
9000916c:	681b      	ldr	r3, [r3, #0]
9000916e:	2200      	movs	r2, #0
90009170:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90009172:	687b      	ldr	r3, [r7, #4]
90009174:	681b      	ldr	r3, [r3, #0]
90009176:	2200      	movs	r2, #0
90009178:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
9000917a:	687b      	ldr	r3, [r7, #4]
9000917c:	681b      	ldr	r3, [r3, #0]
9000917e:	2200      	movs	r2, #0
90009180:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90009182:	687b      	ldr	r3, [r7, #4]
90009184:	681b      	ldr	r3, [r3, #0]
90009186:	2200      	movs	r2, #0
90009188:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
9000918a:	687b      	ldr	r3, [r7, #4]
9000918c:	681b      	ldr	r3, [r3, #0]
9000918e:	2200      	movs	r2, #0
90009190:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90009192:	687b      	ldr	r3, [r7, #4]
90009194:	681b      	ldr	r3, [r3, #0]
90009196:	2200      	movs	r2, #0
90009198:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
9000919a:	687b      	ldr	r3, [r7, #4]
9000919c:	681b      	ldr	r3, [r3, #0]
9000919e:	2200      	movs	r2, #0
900091a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
900091a2:	687b      	ldr	r3, [r7, #4]
900091a4:	681b      	ldr	r3, [r3, #0]
900091a6:	2200      	movs	r2, #0
900091a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
900091aa:	687b      	ldr	r3, [r7, #4]
900091ac:	681b      	ldr	r3, [r3, #0]
900091ae:	2200      	movs	r2, #0
900091b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
900091b2:	687b      	ldr	r3, [r7, #4]
900091b4:	681b      	ldr	r3, [r3, #0]
900091b6:	221f      	movs	r2, #31
900091b8:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
900091ba:	687b      	ldr	r3, [r7, #4]
900091bc:	2200      	movs	r2, #0
900091be:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
900091c0:	687b      	ldr	r3, [r7, #4]
900091c2:	2200      	movs	r2, #0
900091c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
900091c6:	687b      	ldr	r3, [r7, #4]
900091c8:	2200      	movs	r2, #0
900091ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900091cc:	687b      	ldr	r3, [r7, #4]
900091ce:	2200      	movs	r2, #0
900091d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
900091d2:	687b      	ldr	r3, [r7, #4]
900091d4:	2200      	movs	r2, #0
900091d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
900091da:	687b      	ldr	r3, [r7, #4]
900091dc:	2200      	movs	r2, #0
900091de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
900091e2:	2300      	movs	r3, #0
}
900091e4:	4618      	mov	r0, r3
900091e6:	370c      	adds	r7, #12
900091e8:	46bd      	mov	sp, r7
900091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
900091ee:	4770      	bx	lr

900091f0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900091f0:	b480      	push	{r7}
900091f2:	b085      	sub	sp, #20
900091f4:	af00      	add	r7, sp, #0
900091f6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
900091f8:	687b      	ldr	r3, [r7, #4]
900091fa:	68d9      	ldr	r1, [r3, #12]
900091fc:	687b      	ldr	r3, [r7, #4]
900091fe:	691a      	ldr	r2, [r3, #16]
90009200:	687b      	ldr	r3, [r7, #4]
90009202:	681b      	ldr	r3, [r3, #0]
90009204:	430a      	orrs	r2, r1
90009206:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009208:	687b      	ldr	r3, [r7, #4]
9000920a:	695a      	ldr	r2, [r3, #20]
9000920c:	687b      	ldr	r3, [r7, #4]
9000920e:	699b      	ldr	r3, [r3, #24]
90009210:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90009212:	687b      	ldr	r3, [r7, #4]
90009214:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009216:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90009218:	687b      	ldr	r3, [r7, #4]
9000921a:	6a1b      	ldr	r3, [r3, #32]
9000921c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000921e:	687b      	ldr	r3, [r7, #4]
90009220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90009222:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90009224:	687b      	ldr	r3, [r7, #4]
90009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009228:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
9000922a:	687b      	ldr	r3, [r7, #4]
9000922c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
9000922e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009230:	687b      	ldr	r3, [r7, #4]
90009232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009234:	3b01      	subs	r3, #1
90009236:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90009238:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
9000923c:	687b      	ldr	r3, [r7, #4]
9000923e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009240:	687b      	ldr	r3, [r7, #4]
90009242:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009244:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009246:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009248:	687b      	ldr	r3, [r7, #4]
9000924a:	685b      	ldr	r3, [r3, #4]
9000924c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009250:	d107      	bne.n	90009262 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90009252:	687b      	ldr	r3, [r7, #4]
90009254:	681b      	ldr	r3, [r3, #0]
90009256:	691a      	ldr	r2, [r3, #16]
90009258:	687b      	ldr	r3, [r7, #4]
9000925a:	681b      	ldr	r3, [r3, #0]
9000925c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90009260:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90009262:	687b      	ldr	r3, [r7, #4]
90009264:	681b      	ldr	r3, [r3, #0]
90009266:	2200      	movs	r2, #0
90009268:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000926a:	687b      	ldr	r3, [r7, #4]
9000926c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000926e:	2b00      	cmp	r3, #0
90009270:	da11      	bge.n	90009296 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009272:	687b      	ldr	r3, [r7, #4]
90009274:	681b      	ldr	r3, [r3, #0]
90009276:	695a      	ldr	r2, [r3, #20]
90009278:	687b      	ldr	r3, [r7, #4]
9000927a:	681b      	ldr	r3, [r3, #0]
9000927c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90009280:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90009282:	687b      	ldr	r3, [r7, #4]
90009284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90009286:	425b      	negs	r3, r3
90009288:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000928a:	687b      	ldr	r3, [r7, #4]
9000928c:	681b      	ldr	r3, [r3, #0]
9000928e:	68fa      	ldr	r2, [r7, #12]
90009290:	b292      	uxth	r2, r2
90009292:	621a      	str	r2, [r3, #32]
90009294:	e006      	b.n	900092a4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90009296:	687b      	ldr	r3, [r7, #4]
90009298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000929a:	461a      	mov	r2, r3
9000929c:	687b      	ldr	r3, [r7, #4]
9000929e:	681b      	ldr	r3, [r3, #0]
900092a0:	b292      	uxth	r2, r2
900092a2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
900092a4:	687b      	ldr	r3, [r7, #4]
900092a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900092a8:	2b00      	cmp	r3, #0
900092aa:	da15      	bge.n	900092d8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
900092ac:	687b      	ldr	r3, [r7, #4]
900092ae:	681b      	ldr	r3, [r3, #0]
900092b0:	695a      	ldr	r2, [r3, #20]
900092b2:	687b      	ldr	r3, [r7, #4]
900092b4:	681b      	ldr	r3, [r3, #0]
900092b6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
900092ba:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
900092bc:	687b      	ldr	r3, [r7, #4]
900092be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900092c0:	425b      	negs	r3, r3
900092c2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
900092c4:	687b      	ldr	r3, [r7, #4]
900092c6:	681b      	ldr	r3, [r3, #0]
900092c8:	6a19      	ldr	r1, [r3, #32]
900092ca:	68fb      	ldr	r3, [r7, #12]
900092cc:	041a      	lsls	r2, r3, #16
900092ce:	687b      	ldr	r3, [r7, #4]
900092d0:	681b      	ldr	r3, [r3, #0]
900092d2:	430a      	orrs	r2, r1
900092d4:	621a      	str	r2, [r3, #32]
900092d6:	e009      	b.n	900092ec <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
900092d8:	687b      	ldr	r3, [r7, #4]
900092da:	681b      	ldr	r3, [r3, #0]
900092dc:	6a19      	ldr	r1, [r3, #32]
900092de:	687b      	ldr	r3, [r7, #4]
900092e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900092e2:	041a      	lsls	r2, r3, #16
900092e4:	687b      	ldr	r3, [r7, #4]
900092e6:	681b      	ldr	r3, [r3, #0]
900092e8:	430a      	orrs	r2, r1
900092ea:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
900092ec:	687b      	ldr	r3, [r7, #4]
900092ee:	685b      	ldr	r3, [r3, #4]
900092f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900092f4:	d006      	beq.n	90009304 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
900092f6:	687b      	ldr	r3, [r7, #4]
900092f8:	685a      	ldr	r2, [r3, #4]
900092fa:	687b      	ldr	r3, [r7, #4]
900092fc:	681b      	ldr	r3, [r3, #0]
900092fe:	b2d2      	uxtb	r2, r2
90009300:	629a      	str	r2, [r3, #40]	@ 0x28
90009302:	e003      	b.n	9000930c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90009304:	687b      	ldr	r3, [r7, #4]
90009306:	681b      	ldr	r3, [r3, #0]
90009308:	2200      	movs	r2, #0
9000930a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000930c:	687b      	ldr	r3, [r7, #4]
9000930e:	681b      	ldr	r3, [r3, #0]
90009310:	2200      	movs	r2, #0
90009312:	625a      	str	r2, [r3, #36]	@ 0x24
}
90009314:	bf00      	nop
90009316:	3714      	adds	r7, #20
90009318:	46bd      	mov	sp, r7
9000931a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000931e:	4770      	bx	lr

90009320 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
90009320:	b480      	push	{r7}
90009322:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
90009324:	4b05      	ldr	r3, [pc, #20]	@ (9000933c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
90009326:	68db      	ldr	r3, [r3, #12]
90009328:	4a04      	ldr	r2, [pc, #16]	@ (9000933c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
9000932a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000932e:	60d3      	str	r3, [r2, #12]
}
90009330:	bf00      	nop
90009332:	46bd      	mov	sp, r7
90009334:	f85d 7b04 	ldr.w	r7, [sp], #4
90009338:	4770      	bx	lr
9000933a:	bf00      	nop
9000933c:	58024800 	.word	0x58024800

90009340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90009340:	b580      	push	{r7, lr}
90009342:	b08c      	sub	sp, #48	@ 0x30
90009344:	af00      	add	r7, sp, #0
90009346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90009348:	687b      	ldr	r3, [r7, #4]
9000934a:	2b00      	cmp	r3, #0
9000934c:	d102      	bne.n	90009354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
9000934e:	2301      	movs	r3, #1
90009350:	f000 bc48 	b.w	90009be4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90009354:	687b      	ldr	r3, [r7, #4]
90009356:	681b      	ldr	r3, [r3, #0]
90009358:	f003 0301 	and.w	r3, r3, #1
9000935c:	2b00      	cmp	r3, #0
9000935e:	f000 8088 	beq.w	90009472 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009362:	4b99      	ldr	r3, [pc, #612]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009364:	691b      	ldr	r3, [r3, #16]
90009366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000936a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000936c:	4b96      	ldr	r3, [pc, #600]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
9000936e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009370:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90009372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90009374:	2b10      	cmp	r3, #16
90009376:	d007      	beq.n	90009388 <HAL_RCC_OscConfig+0x48>
90009378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000937a:	2b18      	cmp	r3, #24
9000937c:	d111      	bne.n	900093a2 <HAL_RCC_OscConfig+0x62>
9000937e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90009380:	f003 0303 	and.w	r3, r3, #3
90009384:	2b02      	cmp	r3, #2
90009386:	d10c      	bne.n	900093a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90009388:	4b8f      	ldr	r3, [pc, #572]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
9000938a:	681b      	ldr	r3, [r3, #0]
9000938c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90009390:	2b00      	cmp	r3, #0
90009392:	d06d      	beq.n	90009470 <HAL_RCC_OscConfig+0x130>
90009394:	687b      	ldr	r3, [r7, #4]
90009396:	685b      	ldr	r3, [r3, #4]
90009398:	2b00      	cmp	r3, #0
9000939a:	d169      	bne.n	90009470 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
9000939c:	2301      	movs	r3, #1
9000939e:	f000 bc21 	b.w	90009be4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900093a2:	687b      	ldr	r3, [r7, #4]
900093a4:	685b      	ldr	r3, [r3, #4]
900093a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900093aa:	d106      	bne.n	900093ba <HAL_RCC_OscConfig+0x7a>
900093ac:	4b86      	ldr	r3, [pc, #536]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093ae:	681b      	ldr	r3, [r3, #0]
900093b0:	4a85      	ldr	r2, [pc, #532]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900093b6:	6013      	str	r3, [r2, #0]
900093b8:	e02e      	b.n	90009418 <HAL_RCC_OscConfig+0xd8>
900093ba:	687b      	ldr	r3, [r7, #4]
900093bc:	685b      	ldr	r3, [r3, #4]
900093be:	2b00      	cmp	r3, #0
900093c0:	d10c      	bne.n	900093dc <HAL_RCC_OscConfig+0x9c>
900093c2:	4b81      	ldr	r3, [pc, #516]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093c4:	681b      	ldr	r3, [r3, #0]
900093c6:	4a80      	ldr	r2, [pc, #512]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900093cc:	6013      	str	r3, [r2, #0]
900093ce:	4b7e      	ldr	r3, [pc, #504]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093d0:	681b      	ldr	r3, [r3, #0]
900093d2:	4a7d      	ldr	r2, [pc, #500]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
900093d8:	6013      	str	r3, [r2, #0]
900093da:	e01d      	b.n	90009418 <HAL_RCC_OscConfig+0xd8>
900093dc:	687b      	ldr	r3, [r7, #4]
900093de:	685b      	ldr	r3, [r3, #4]
900093e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
900093e4:	d10c      	bne.n	90009400 <HAL_RCC_OscConfig+0xc0>
900093e6:	4b78      	ldr	r3, [pc, #480]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093e8:	681b      	ldr	r3, [r3, #0]
900093ea:	4a77      	ldr	r2, [pc, #476]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
900093f0:	6013      	str	r3, [r2, #0]
900093f2:	4b75      	ldr	r3, [pc, #468]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093f4:	681b      	ldr	r3, [r3, #0]
900093f6:	4a74      	ldr	r2, [pc, #464]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900093f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900093fc:	6013      	str	r3, [r2, #0]
900093fe:	e00b      	b.n	90009418 <HAL_RCC_OscConfig+0xd8>
90009400:	4b71      	ldr	r3, [pc, #452]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009402:	681b      	ldr	r3, [r3, #0]
90009404:	4a70      	ldr	r2, [pc, #448]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000940a:	6013      	str	r3, [r2, #0]
9000940c:	4b6e      	ldr	r3, [pc, #440]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
9000940e:	681b      	ldr	r3, [r3, #0]
90009410:	4a6d      	ldr	r2, [pc, #436]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90009416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90009418:	687b      	ldr	r3, [r7, #4]
9000941a:	685b      	ldr	r3, [r3, #4]
9000941c:	2b00      	cmp	r3, #0
9000941e:	d013      	beq.n	90009448 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90009420:	f7fb fbcc 	bl	90004bbc <HAL_GetTick>
90009424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90009426:	e008      	b.n	9000943a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90009428:	f7fb fbc8 	bl	90004bbc <HAL_GetTick>
9000942c:	4602      	mov	r2, r0
9000942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009430:	1ad3      	subs	r3, r2, r3
90009432:	2b64      	cmp	r3, #100	@ 0x64
90009434:	d901      	bls.n	9000943a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90009436:	2303      	movs	r3, #3
90009438:	e3d4      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000943a:	4b63      	ldr	r3, [pc, #396]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
9000943c:	681b      	ldr	r3, [r3, #0]
9000943e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90009442:	2b00      	cmp	r3, #0
90009444:	d0f0      	beq.n	90009428 <HAL_RCC_OscConfig+0xe8>
90009446:	e014      	b.n	90009472 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90009448:	f7fb fbb8 	bl	90004bbc <HAL_GetTick>
9000944c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000944e:	e008      	b.n	90009462 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90009450:	f7fb fbb4 	bl	90004bbc <HAL_GetTick>
90009454:	4602      	mov	r2, r0
90009456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009458:	1ad3      	subs	r3, r2, r3
9000945a:	2b64      	cmp	r3, #100	@ 0x64
9000945c:	d901      	bls.n	90009462 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
9000945e:	2303      	movs	r3, #3
90009460:	e3c0      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90009462:	4b59      	ldr	r3, [pc, #356]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009464:	681b      	ldr	r3, [r3, #0]
90009466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000946a:	2b00      	cmp	r3, #0
9000946c:	d1f0      	bne.n	90009450 <HAL_RCC_OscConfig+0x110>
9000946e:	e000      	b.n	90009472 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90009470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90009472:	687b      	ldr	r3, [r7, #4]
90009474:	681b      	ldr	r3, [r3, #0]
90009476:	f003 0302 	and.w	r3, r3, #2
9000947a:	2b00      	cmp	r3, #0
9000947c:	f000 80ca 	beq.w	90009614 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009480:	4b51      	ldr	r3, [pc, #324]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009482:	691b      	ldr	r3, [r3, #16]
90009484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009488:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000948a:	4b4f      	ldr	r3, [pc, #316]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
9000948c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000948e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90009490:	6a3b      	ldr	r3, [r7, #32]
90009492:	2b00      	cmp	r3, #0
90009494:	d007      	beq.n	900094a6 <HAL_RCC_OscConfig+0x166>
90009496:	6a3b      	ldr	r3, [r7, #32]
90009498:	2b18      	cmp	r3, #24
9000949a:	d156      	bne.n	9000954a <HAL_RCC_OscConfig+0x20a>
9000949c:	69fb      	ldr	r3, [r7, #28]
9000949e:	f003 0303 	and.w	r3, r3, #3
900094a2:	2b00      	cmp	r3, #0
900094a4:	d151      	bne.n	9000954a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900094a6:	4b48      	ldr	r3, [pc, #288]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900094a8:	681b      	ldr	r3, [r3, #0]
900094aa:	f003 0304 	and.w	r3, r3, #4
900094ae:	2b00      	cmp	r3, #0
900094b0:	d005      	beq.n	900094be <HAL_RCC_OscConfig+0x17e>
900094b2:	687b      	ldr	r3, [r7, #4]
900094b4:	68db      	ldr	r3, [r3, #12]
900094b6:	2b00      	cmp	r3, #0
900094b8:	d101      	bne.n	900094be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
900094ba:	2301      	movs	r3, #1
900094bc:	e392      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900094be:	4b42      	ldr	r3, [pc, #264]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900094c0:	681b      	ldr	r3, [r3, #0]
900094c2:	f023 0219 	bic.w	r2, r3, #25
900094c6:	687b      	ldr	r3, [r7, #4]
900094c8:	68db      	ldr	r3, [r3, #12]
900094ca:	493f      	ldr	r1, [pc, #252]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900094cc:	4313      	orrs	r3, r2
900094ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900094d0:	f7fb fb74 	bl	90004bbc <HAL_GetTick>
900094d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900094d6:	e008      	b.n	900094ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900094d8:	f7fb fb70 	bl	90004bbc <HAL_GetTick>
900094dc:	4602      	mov	r2, r0
900094de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900094e0:	1ad3      	subs	r3, r2, r3
900094e2:	2b02      	cmp	r3, #2
900094e4:	d901      	bls.n	900094ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
900094e6:	2303      	movs	r3, #3
900094e8:	e37c      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900094ea:	4b37      	ldr	r3, [pc, #220]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900094ec:	681b      	ldr	r3, [r3, #0]
900094ee:	f003 0304 	and.w	r3, r3, #4
900094f2:	2b00      	cmp	r3, #0
900094f4:	d0f0      	beq.n	900094d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900094f6:	f7fb fb91 	bl	90004c1c <HAL_GetREVID>
900094fa:	4603      	mov	r3, r0
900094fc:	f241 0203 	movw	r2, #4099	@ 0x1003
90009500:	4293      	cmp	r3, r2
90009502:	d817      	bhi.n	90009534 <HAL_RCC_OscConfig+0x1f4>
90009504:	687b      	ldr	r3, [r7, #4]
90009506:	691b      	ldr	r3, [r3, #16]
90009508:	2b40      	cmp	r3, #64	@ 0x40
9000950a:	d108      	bne.n	9000951e <HAL_RCC_OscConfig+0x1de>
9000950c:	4b2e      	ldr	r3, [pc, #184]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
9000950e:	685b      	ldr	r3, [r3, #4]
90009510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90009514:	4a2c      	ldr	r2, [pc, #176]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000951a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000951c:	e07a      	b.n	90009614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000951e:	4b2a      	ldr	r3, [pc, #168]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009520:	685b      	ldr	r3, [r3, #4]
90009522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009526:	687b      	ldr	r3, [r7, #4]
90009528:	691b      	ldr	r3, [r3, #16]
9000952a:	031b      	lsls	r3, r3, #12
9000952c:	4926      	ldr	r1, [pc, #152]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
9000952e:	4313      	orrs	r3, r2
90009530:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90009532:	e06f      	b.n	90009614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90009534:	4b24      	ldr	r3, [pc, #144]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009536:	685b      	ldr	r3, [r3, #4]
90009538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
9000953c:	687b      	ldr	r3, [r7, #4]
9000953e:	691b      	ldr	r3, [r3, #16]
90009540:	061b      	lsls	r3, r3, #24
90009542:	4921      	ldr	r1, [pc, #132]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009544:	4313      	orrs	r3, r2
90009546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90009548:	e064      	b.n	90009614 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000954a:	687b      	ldr	r3, [r7, #4]
9000954c:	68db      	ldr	r3, [r3, #12]
9000954e:	2b00      	cmp	r3, #0
90009550:	d047      	beq.n	900095e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90009552:	4b1d      	ldr	r3, [pc, #116]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009554:	681b      	ldr	r3, [r3, #0]
90009556:	f023 0219 	bic.w	r2, r3, #25
9000955a:	687b      	ldr	r3, [r7, #4]
9000955c:	68db      	ldr	r3, [r3, #12]
9000955e:	491a      	ldr	r1, [pc, #104]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009560:	4313      	orrs	r3, r2
90009562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90009564:	f7fb fb2a 	bl	90004bbc <HAL_GetTick>
90009568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000956a:	e008      	b.n	9000957e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000956c:	f7fb fb26 	bl	90004bbc <HAL_GetTick>
90009570:	4602      	mov	r2, r0
90009572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009574:	1ad3      	subs	r3, r2, r3
90009576:	2b02      	cmp	r3, #2
90009578:	d901      	bls.n	9000957e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
9000957a:	2303      	movs	r3, #3
9000957c:	e332      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000957e:	4b12      	ldr	r3, [pc, #72]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
90009580:	681b      	ldr	r3, [r3, #0]
90009582:	f003 0304 	and.w	r3, r3, #4
90009586:	2b00      	cmp	r3, #0
90009588:	d0f0      	beq.n	9000956c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000958a:	f7fb fb47 	bl	90004c1c <HAL_GetREVID>
9000958e:	4603      	mov	r3, r0
90009590:	f241 0203 	movw	r2, #4099	@ 0x1003
90009594:	4293      	cmp	r3, r2
90009596:	d819      	bhi.n	900095cc <HAL_RCC_OscConfig+0x28c>
90009598:	687b      	ldr	r3, [r7, #4]
9000959a:	691b      	ldr	r3, [r3, #16]
9000959c:	2b40      	cmp	r3, #64	@ 0x40
9000959e:	d108      	bne.n	900095b2 <HAL_RCC_OscConfig+0x272>
900095a0:	4b09      	ldr	r3, [pc, #36]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900095a2:	685b      	ldr	r3, [r3, #4]
900095a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
900095a8:	4a07      	ldr	r2, [pc, #28]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900095aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900095ae:	6053      	str	r3, [r2, #4]
900095b0:	e030      	b.n	90009614 <HAL_RCC_OscConfig+0x2d4>
900095b2:	4b05      	ldr	r3, [pc, #20]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900095b4:	685b      	ldr	r3, [r3, #4]
900095b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900095ba:	687b      	ldr	r3, [r7, #4]
900095bc:	691b      	ldr	r3, [r3, #16]
900095be:	031b      	lsls	r3, r3, #12
900095c0:	4901      	ldr	r1, [pc, #4]	@ (900095c8 <HAL_RCC_OscConfig+0x288>)
900095c2:	4313      	orrs	r3, r2
900095c4:	604b      	str	r3, [r1, #4]
900095c6:	e025      	b.n	90009614 <HAL_RCC_OscConfig+0x2d4>
900095c8:	58024400 	.word	0x58024400
900095cc:	4b9a      	ldr	r3, [pc, #616]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900095ce:	685b      	ldr	r3, [r3, #4]
900095d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
900095d4:	687b      	ldr	r3, [r7, #4]
900095d6:	691b      	ldr	r3, [r3, #16]
900095d8:	061b      	lsls	r3, r3, #24
900095da:	4997      	ldr	r1, [pc, #604]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900095dc:	4313      	orrs	r3, r2
900095de:	604b      	str	r3, [r1, #4]
900095e0:	e018      	b.n	90009614 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
900095e2:	4b95      	ldr	r3, [pc, #596]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900095e4:	681b      	ldr	r3, [r3, #0]
900095e6:	4a94      	ldr	r2, [pc, #592]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900095e8:	f023 0301 	bic.w	r3, r3, #1
900095ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900095ee:	f7fb fae5 	bl	90004bbc <HAL_GetTick>
900095f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
900095f4:	e008      	b.n	90009608 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900095f6:	f7fb fae1 	bl	90004bbc <HAL_GetTick>
900095fa:	4602      	mov	r2, r0
900095fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900095fe:	1ad3      	subs	r3, r2, r3
90009600:	2b02      	cmp	r3, #2
90009602:	d901      	bls.n	90009608 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90009604:	2303      	movs	r3, #3
90009606:	e2ed      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90009608:	4b8b      	ldr	r3, [pc, #556]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000960a:	681b      	ldr	r3, [r3, #0]
9000960c:	f003 0304 	and.w	r3, r3, #4
90009610:	2b00      	cmp	r3, #0
90009612:	d1f0      	bne.n	900095f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90009614:	687b      	ldr	r3, [r7, #4]
90009616:	681b      	ldr	r3, [r3, #0]
90009618:	f003 0310 	and.w	r3, r3, #16
9000961c:	2b00      	cmp	r3, #0
9000961e:	f000 80a9 	beq.w	90009774 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009622:	4b85      	ldr	r3, [pc, #532]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009624:	691b      	ldr	r3, [r3, #16]
90009626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000962a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000962c:	4b82      	ldr	r3, [pc, #520]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000962e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009630:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90009632:	69bb      	ldr	r3, [r7, #24]
90009634:	2b08      	cmp	r3, #8
90009636:	d007      	beq.n	90009648 <HAL_RCC_OscConfig+0x308>
90009638:	69bb      	ldr	r3, [r7, #24]
9000963a:	2b18      	cmp	r3, #24
9000963c:	d13a      	bne.n	900096b4 <HAL_RCC_OscConfig+0x374>
9000963e:	697b      	ldr	r3, [r7, #20]
90009640:	f003 0303 	and.w	r3, r3, #3
90009644:	2b01      	cmp	r3, #1
90009646:	d135      	bne.n	900096b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90009648:	4b7b      	ldr	r3, [pc, #492]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000964a:	681b      	ldr	r3, [r3, #0]
9000964c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90009650:	2b00      	cmp	r3, #0
90009652:	d005      	beq.n	90009660 <HAL_RCC_OscConfig+0x320>
90009654:	687b      	ldr	r3, [r7, #4]
90009656:	69db      	ldr	r3, [r3, #28]
90009658:	2b80      	cmp	r3, #128	@ 0x80
9000965a:	d001      	beq.n	90009660 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
9000965c:	2301      	movs	r3, #1
9000965e:	e2c1      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90009660:	f7fb fadc 	bl	90004c1c <HAL_GetREVID>
90009664:	4603      	mov	r3, r0
90009666:	f241 0203 	movw	r2, #4099	@ 0x1003
9000966a:	4293      	cmp	r3, r2
9000966c:	d817      	bhi.n	9000969e <HAL_RCC_OscConfig+0x35e>
9000966e:	687b      	ldr	r3, [r7, #4]
90009670:	6a1b      	ldr	r3, [r3, #32]
90009672:	2b20      	cmp	r3, #32
90009674:	d108      	bne.n	90009688 <HAL_RCC_OscConfig+0x348>
90009676:	4b70      	ldr	r3, [pc, #448]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009678:	685b      	ldr	r3, [r3, #4]
9000967a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
9000967e:	4a6e      	ldr	r2, [pc, #440]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90009684:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90009686:	e075      	b.n	90009774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90009688:	4b6b      	ldr	r3, [pc, #428]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000968a:	685b      	ldr	r3, [r3, #4]
9000968c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90009690:	687b      	ldr	r3, [r7, #4]
90009692:	6a1b      	ldr	r3, [r3, #32]
90009694:	069b      	lsls	r3, r3, #26
90009696:	4968      	ldr	r1, [pc, #416]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009698:	4313      	orrs	r3, r2
9000969a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000969c:	e06a      	b.n	90009774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000969e:	4b66      	ldr	r3, [pc, #408]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900096a0:	68db      	ldr	r3, [r3, #12]
900096a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
900096a6:	687b      	ldr	r3, [r7, #4]
900096a8:	6a1b      	ldr	r3, [r3, #32]
900096aa:	061b      	lsls	r3, r3, #24
900096ac:	4962      	ldr	r1, [pc, #392]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900096ae:	4313      	orrs	r3, r2
900096b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900096b2:	e05f      	b.n	90009774 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
900096b4:	687b      	ldr	r3, [r7, #4]
900096b6:	69db      	ldr	r3, [r3, #28]
900096b8:	2b00      	cmp	r3, #0
900096ba:	d042      	beq.n	90009742 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
900096bc:	4b5e      	ldr	r3, [pc, #376]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900096be:	681b      	ldr	r3, [r3, #0]
900096c0:	4a5d      	ldr	r2, [pc, #372]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900096c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900096c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900096c8:	f7fb fa78 	bl	90004bbc <HAL_GetTick>
900096cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900096ce:	e008      	b.n	900096e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
900096d0:	f7fb fa74 	bl	90004bbc <HAL_GetTick>
900096d4:	4602      	mov	r2, r0
900096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900096d8:	1ad3      	subs	r3, r2, r3
900096da:	2b02      	cmp	r3, #2
900096dc:	d901      	bls.n	900096e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
900096de:	2303      	movs	r3, #3
900096e0:	e280      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900096e2:	4b55      	ldr	r3, [pc, #340]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900096e4:	681b      	ldr	r3, [r3, #0]
900096e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900096ea:	2b00      	cmp	r3, #0
900096ec:	d0f0      	beq.n	900096d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900096ee:	f7fb fa95 	bl	90004c1c <HAL_GetREVID>
900096f2:	4603      	mov	r3, r0
900096f4:	f241 0203 	movw	r2, #4099	@ 0x1003
900096f8:	4293      	cmp	r3, r2
900096fa:	d817      	bhi.n	9000972c <HAL_RCC_OscConfig+0x3ec>
900096fc:	687b      	ldr	r3, [r7, #4]
900096fe:	6a1b      	ldr	r3, [r3, #32]
90009700:	2b20      	cmp	r3, #32
90009702:	d108      	bne.n	90009716 <HAL_RCC_OscConfig+0x3d6>
90009704:	4b4c      	ldr	r3, [pc, #304]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009706:	685b      	ldr	r3, [r3, #4]
90009708:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
9000970c:	4a4a      	ldr	r2, [pc, #296]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000970e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90009712:	6053      	str	r3, [r2, #4]
90009714:	e02e      	b.n	90009774 <HAL_RCC_OscConfig+0x434>
90009716:	4b48      	ldr	r3, [pc, #288]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009718:	685b      	ldr	r3, [r3, #4]
9000971a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
9000971e:	687b      	ldr	r3, [r7, #4]
90009720:	6a1b      	ldr	r3, [r3, #32]
90009722:	069b      	lsls	r3, r3, #26
90009724:	4944      	ldr	r1, [pc, #272]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009726:	4313      	orrs	r3, r2
90009728:	604b      	str	r3, [r1, #4]
9000972a:	e023      	b.n	90009774 <HAL_RCC_OscConfig+0x434>
9000972c:	4b42      	ldr	r3, [pc, #264]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000972e:	68db      	ldr	r3, [r3, #12]
90009730:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90009734:	687b      	ldr	r3, [r7, #4]
90009736:	6a1b      	ldr	r3, [r3, #32]
90009738:	061b      	lsls	r3, r3, #24
9000973a:	493f      	ldr	r1, [pc, #252]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000973c:	4313      	orrs	r3, r2
9000973e:	60cb      	str	r3, [r1, #12]
90009740:	e018      	b.n	90009774 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90009742:	4b3d      	ldr	r3, [pc, #244]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009744:	681b      	ldr	r3, [r3, #0]
90009746:	4a3c      	ldr	r2, [pc, #240]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000974c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000974e:	f7fb fa35 	bl	90004bbc <HAL_GetTick>
90009752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90009754:	e008      	b.n	90009768 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90009756:	f7fb fa31 	bl	90004bbc <HAL_GetTick>
9000975a:	4602      	mov	r2, r0
9000975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000975e:	1ad3      	subs	r3, r2, r3
90009760:	2b02      	cmp	r3, #2
90009762:	d901      	bls.n	90009768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90009764:	2303      	movs	r3, #3
90009766:	e23d      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90009768:	4b33      	ldr	r3, [pc, #204]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000976a:	681b      	ldr	r3, [r3, #0]
9000976c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90009770:	2b00      	cmp	r3, #0
90009772:	d1f0      	bne.n	90009756 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90009774:	687b      	ldr	r3, [r7, #4]
90009776:	681b      	ldr	r3, [r3, #0]
90009778:	f003 0308 	and.w	r3, r3, #8
9000977c:	2b00      	cmp	r3, #0
9000977e:	d036      	beq.n	900097ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90009780:	687b      	ldr	r3, [r7, #4]
90009782:	695b      	ldr	r3, [r3, #20]
90009784:	2b00      	cmp	r3, #0
90009786:	d019      	beq.n	900097bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90009788:	4b2b      	ldr	r3, [pc, #172]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000978a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
9000978c:	4a2a      	ldr	r2, [pc, #168]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000978e:	f043 0301 	orr.w	r3, r3, #1
90009792:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90009794:	f7fb fa12 	bl	90004bbc <HAL_GetTick>
90009798:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000979a:	e008      	b.n	900097ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000979c:	f7fb fa0e 	bl	90004bbc <HAL_GetTick>
900097a0:	4602      	mov	r2, r0
900097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900097a4:	1ad3      	subs	r3, r2, r3
900097a6:	2b02      	cmp	r3, #2
900097a8:	d901      	bls.n	900097ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
900097aa:	2303      	movs	r3, #3
900097ac:	e21a      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900097ae:	4b22      	ldr	r3, [pc, #136]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900097b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900097b2:	f003 0302 	and.w	r3, r3, #2
900097b6:	2b00      	cmp	r3, #0
900097b8:	d0f0      	beq.n	9000979c <HAL_RCC_OscConfig+0x45c>
900097ba:	e018      	b.n	900097ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900097bc:	4b1e      	ldr	r3, [pc, #120]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900097be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900097c0:	4a1d      	ldr	r2, [pc, #116]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900097c2:	f023 0301 	bic.w	r3, r3, #1
900097c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900097c8:	f7fb f9f8 	bl	90004bbc <HAL_GetTick>
900097cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900097ce:	e008      	b.n	900097e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900097d0:	f7fb f9f4 	bl	90004bbc <HAL_GetTick>
900097d4:	4602      	mov	r2, r0
900097d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900097d8:	1ad3      	subs	r3, r2, r3
900097da:	2b02      	cmp	r3, #2
900097dc:	d901      	bls.n	900097e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
900097de:	2303      	movs	r3, #3
900097e0:	e200      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900097e2:	4b15      	ldr	r3, [pc, #84]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
900097e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900097e6:	f003 0302 	and.w	r3, r3, #2
900097ea:	2b00      	cmp	r3, #0
900097ec:	d1f0      	bne.n	900097d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
900097ee:	687b      	ldr	r3, [r7, #4]
900097f0:	681b      	ldr	r3, [r3, #0]
900097f2:	f003 0320 	and.w	r3, r3, #32
900097f6:	2b00      	cmp	r3, #0
900097f8:	d039      	beq.n	9000986e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
900097fa:	687b      	ldr	r3, [r7, #4]
900097fc:	699b      	ldr	r3, [r3, #24]
900097fe:	2b00      	cmp	r3, #0
90009800:	d01c      	beq.n	9000983c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90009802:	4b0d      	ldr	r3, [pc, #52]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009804:	681b      	ldr	r3, [r3, #0]
90009806:	4a0c      	ldr	r2, [pc, #48]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
90009808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
9000980c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000980e:	f7fb f9d5 	bl	90004bbc <HAL_GetTick>
90009812:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90009814:	e008      	b.n	90009828 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90009816:	f7fb f9d1 	bl	90004bbc <HAL_GetTick>
9000981a:	4602      	mov	r2, r0
9000981c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000981e:	1ad3      	subs	r3, r2, r3
90009820:	2b02      	cmp	r3, #2
90009822:	d901      	bls.n	90009828 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90009824:	2303      	movs	r3, #3
90009826:	e1dd      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90009828:	4b03      	ldr	r3, [pc, #12]	@ (90009838 <HAL_RCC_OscConfig+0x4f8>)
9000982a:	681b      	ldr	r3, [r3, #0]
9000982c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90009830:	2b00      	cmp	r3, #0
90009832:	d0f0      	beq.n	90009816 <HAL_RCC_OscConfig+0x4d6>
90009834:	e01b      	b.n	9000986e <HAL_RCC_OscConfig+0x52e>
90009836:	bf00      	nop
90009838:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
9000983c:	4b9b      	ldr	r3, [pc, #620]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
9000983e:	681b      	ldr	r3, [r3, #0]
90009840:	4a9a      	ldr	r2, [pc, #616]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90009846:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90009848:	f7fb f9b8 	bl	90004bbc <HAL_GetTick>
9000984c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000984e:	e008      	b.n	90009862 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90009850:	f7fb f9b4 	bl	90004bbc <HAL_GetTick>
90009854:	4602      	mov	r2, r0
90009856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009858:	1ad3      	subs	r3, r2, r3
9000985a:	2b02      	cmp	r3, #2
9000985c:	d901      	bls.n	90009862 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
9000985e:	2303      	movs	r3, #3
90009860:	e1c0      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90009862:	4b92      	ldr	r3, [pc, #584]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009864:	681b      	ldr	r3, [r3, #0]
90009866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000986a:	2b00      	cmp	r3, #0
9000986c:	d1f0      	bne.n	90009850 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000986e:	687b      	ldr	r3, [r7, #4]
90009870:	681b      	ldr	r3, [r3, #0]
90009872:	f003 0304 	and.w	r3, r3, #4
90009876:	2b00      	cmp	r3, #0
90009878:	f000 8081 	beq.w	9000997e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
9000987c:	4b8c      	ldr	r3, [pc, #560]	@ (90009ab0 <HAL_RCC_OscConfig+0x770>)
9000987e:	681b      	ldr	r3, [r3, #0]
90009880:	4a8b      	ldr	r2, [pc, #556]	@ (90009ab0 <HAL_RCC_OscConfig+0x770>)
90009882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90009886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90009888:	f7fb f998 	bl	90004bbc <HAL_GetTick>
9000988c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000988e:	e008      	b.n	900098a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90009890:	f7fb f994 	bl	90004bbc <HAL_GetTick>
90009894:	4602      	mov	r2, r0
90009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009898:	1ad3      	subs	r3, r2, r3
9000989a:	2b64      	cmp	r3, #100	@ 0x64
9000989c:	d901      	bls.n	900098a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
9000989e:	2303      	movs	r3, #3
900098a0:	e1a0      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900098a2:	4b83      	ldr	r3, [pc, #524]	@ (90009ab0 <HAL_RCC_OscConfig+0x770>)
900098a4:	681b      	ldr	r3, [r3, #0]
900098a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900098aa:	2b00      	cmp	r3, #0
900098ac:	d0f0      	beq.n	90009890 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900098ae:	687b      	ldr	r3, [r7, #4]
900098b0:	689b      	ldr	r3, [r3, #8]
900098b2:	2b01      	cmp	r3, #1
900098b4:	d106      	bne.n	900098c4 <HAL_RCC_OscConfig+0x584>
900098b6:	4b7d      	ldr	r3, [pc, #500]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900098ba:	4a7c      	ldr	r2, [pc, #496]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098bc:	f043 0301 	orr.w	r3, r3, #1
900098c0:	6713      	str	r3, [r2, #112]	@ 0x70
900098c2:	e02d      	b.n	90009920 <HAL_RCC_OscConfig+0x5e0>
900098c4:	687b      	ldr	r3, [r7, #4]
900098c6:	689b      	ldr	r3, [r3, #8]
900098c8:	2b00      	cmp	r3, #0
900098ca:	d10c      	bne.n	900098e6 <HAL_RCC_OscConfig+0x5a6>
900098cc:	4b77      	ldr	r3, [pc, #476]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900098d0:	4a76      	ldr	r2, [pc, #472]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098d2:	f023 0301 	bic.w	r3, r3, #1
900098d6:	6713      	str	r3, [r2, #112]	@ 0x70
900098d8:	4b74      	ldr	r3, [pc, #464]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900098dc:	4a73      	ldr	r2, [pc, #460]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098de:	f023 0304 	bic.w	r3, r3, #4
900098e2:	6713      	str	r3, [r2, #112]	@ 0x70
900098e4:	e01c      	b.n	90009920 <HAL_RCC_OscConfig+0x5e0>
900098e6:	687b      	ldr	r3, [r7, #4]
900098e8:	689b      	ldr	r3, [r3, #8]
900098ea:	2b05      	cmp	r3, #5
900098ec:	d10c      	bne.n	90009908 <HAL_RCC_OscConfig+0x5c8>
900098ee:	4b6f      	ldr	r3, [pc, #444]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900098f2:	4a6e      	ldr	r2, [pc, #440]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098f4:	f043 0304 	orr.w	r3, r3, #4
900098f8:	6713      	str	r3, [r2, #112]	@ 0x70
900098fa:	4b6c      	ldr	r3, [pc, #432]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900098fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900098fe:	4a6b      	ldr	r2, [pc, #428]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009900:	f043 0301 	orr.w	r3, r3, #1
90009904:	6713      	str	r3, [r2, #112]	@ 0x70
90009906:	e00b      	b.n	90009920 <HAL_RCC_OscConfig+0x5e0>
90009908:	4b68      	ldr	r3, [pc, #416]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
9000990a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000990c:	4a67      	ldr	r2, [pc, #412]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
9000990e:	f023 0301 	bic.w	r3, r3, #1
90009912:	6713      	str	r3, [r2, #112]	@ 0x70
90009914:	4b65      	ldr	r3, [pc, #404]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90009918:	4a64      	ldr	r2, [pc, #400]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
9000991a:	f023 0304 	bic.w	r3, r3, #4
9000991e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90009920:	687b      	ldr	r3, [r7, #4]
90009922:	689b      	ldr	r3, [r3, #8]
90009924:	2b00      	cmp	r3, #0
90009926:	d015      	beq.n	90009954 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90009928:	f7fb f948 	bl	90004bbc <HAL_GetTick>
9000992c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000992e:	e00a      	b.n	90009946 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90009930:	f7fb f944 	bl	90004bbc <HAL_GetTick>
90009934:	4602      	mov	r2, r0
90009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009938:	1ad3      	subs	r3, r2, r3
9000993a:	f241 3288 	movw	r2, #5000	@ 0x1388
9000993e:	4293      	cmp	r3, r2
90009940:	d901      	bls.n	90009946 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90009942:	2303      	movs	r3, #3
90009944:	e14e      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90009946:	4b59      	ldr	r3, [pc, #356]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000994a:	f003 0302 	and.w	r3, r3, #2
9000994e:	2b00      	cmp	r3, #0
90009950:	d0ee      	beq.n	90009930 <HAL_RCC_OscConfig+0x5f0>
90009952:	e014      	b.n	9000997e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90009954:	f7fb f932 	bl	90004bbc <HAL_GetTick>
90009958:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000995a:	e00a      	b.n	90009972 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000995c:	f7fb f92e 	bl	90004bbc <HAL_GetTick>
90009960:	4602      	mov	r2, r0
90009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009964:	1ad3      	subs	r3, r2, r3
90009966:	f241 3288 	movw	r2, #5000	@ 0x1388
9000996a:	4293      	cmp	r3, r2
9000996c:	d901      	bls.n	90009972 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
9000996e:	2303      	movs	r3, #3
90009970:	e138      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90009972:	4b4e      	ldr	r3, [pc, #312]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90009976:	f003 0302 	and.w	r3, r3, #2
9000997a:	2b00      	cmp	r3, #0
9000997c:	d1ee      	bne.n	9000995c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000997e:	687b      	ldr	r3, [r7, #4]
90009980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90009982:	2b00      	cmp	r3, #0
90009984:	f000 812d 	beq.w	90009be2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90009988:	4b48      	ldr	r3, [pc, #288]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
9000998a:	691b      	ldr	r3, [r3, #16]
9000998c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009990:	2b18      	cmp	r3, #24
90009992:	f000 80bd 	beq.w	90009b10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90009996:	687b      	ldr	r3, [r7, #4]
90009998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000999a:	2b02      	cmp	r3, #2
9000999c:	f040 809e 	bne.w	90009adc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900099a0:	4b42      	ldr	r3, [pc, #264]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900099a2:	681b      	ldr	r3, [r3, #0]
900099a4:	4a41      	ldr	r2, [pc, #260]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900099a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900099aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900099ac:	f7fb f906 	bl	90004bbc <HAL_GetTick>
900099b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900099b2:	e008      	b.n	900099c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900099b4:	f7fb f902 	bl	90004bbc <HAL_GetTick>
900099b8:	4602      	mov	r2, r0
900099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900099bc:	1ad3      	subs	r3, r2, r3
900099be:	2b02      	cmp	r3, #2
900099c0:	d901      	bls.n	900099c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900099c2:	2303      	movs	r3, #3
900099c4:	e10e      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900099c6:	4b39      	ldr	r3, [pc, #228]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900099c8:	681b      	ldr	r3, [r3, #0]
900099ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900099ce:	2b00      	cmp	r3, #0
900099d0:	d1f0      	bne.n	900099b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900099d2:	4b36      	ldr	r3, [pc, #216]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900099d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
900099d6:	4b37      	ldr	r3, [pc, #220]	@ (90009ab4 <HAL_RCC_OscConfig+0x774>)
900099d8:	4013      	ands	r3, r2
900099da:	687a      	ldr	r2, [r7, #4]
900099dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
900099de:	687a      	ldr	r2, [r7, #4]
900099e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900099e2:	0112      	lsls	r2, r2, #4
900099e4:	430a      	orrs	r2, r1
900099e6:	4931      	ldr	r1, [pc, #196]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
900099e8:	4313      	orrs	r3, r2
900099ea:	628b      	str	r3, [r1, #40]	@ 0x28
900099ec:	687b      	ldr	r3, [r7, #4]
900099ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900099f0:	3b01      	subs	r3, #1
900099f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
900099f6:	687b      	ldr	r3, [r7, #4]
900099f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900099fa:	3b01      	subs	r3, #1
900099fc:	025b      	lsls	r3, r3, #9
900099fe:	b29b      	uxth	r3, r3
90009a00:	431a      	orrs	r2, r3
90009a02:	687b      	ldr	r3, [r7, #4]
90009a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009a06:	3b01      	subs	r3, #1
90009a08:	041b      	lsls	r3, r3, #16
90009a0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009a0e:	431a      	orrs	r2, r3
90009a10:	687b      	ldr	r3, [r7, #4]
90009a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90009a14:	3b01      	subs	r3, #1
90009a16:	061b      	lsls	r3, r3, #24
90009a18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009a1c:	4923      	ldr	r1, [pc, #140]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a1e:	4313      	orrs	r3, r2
90009a20:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90009a22:	4b22      	ldr	r3, [pc, #136]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a26:	4a21      	ldr	r2, [pc, #132]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a28:	f023 0301 	bic.w	r3, r3, #1
90009a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90009a2e:	4b1f      	ldr	r3, [pc, #124]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009a32:	4b21      	ldr	r3, [pc, #132]	@ (90009ab8 <HAL_RCC_OscConfig+0x778>)
90009a34:	4013      	ands	r3, r2
90009a36:	687a      	ldr	r2, [r7, #4]
90009a38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90009a3a:	00d2      	lsls	r2, r2, #3
90009a3c:	491b      	ldr	r1, [pc, #108]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a3e:	4313      	orrs	r3, r2
90009a40:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90009a42:	4b1a      	ldr	r3, [pc, #104]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a46:	f023 020c 	bic.w	r2, r3, #12
90009a4a:	687b      	ldr	r3, [r7, #4]
90009a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009a4e:	4917      	ldr	r1, [pc, #92]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a50:	4313      	orrs	r3, r2
90009a52:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90009a54:	4b15      	ldr	r3, [pc, #84]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a58:	f023 0202 	bic.w	r2, r3, #2
90009a5c:	687b      	ldr	r3, [r7, #4]
90009a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90009a60:	4912      	ldr	r1, [pc, #72]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a62:	4313      	orrs	r3, r2
90009a64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90009a66:	4b11      	ldr	r3, [pc, #68]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a6a:	4a10      	ldr	r2, [pc, #64]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90009a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90009a72:	4b0e      	ldr	r3, [pc, #56]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a76:	4a0d      	ldr	r2, [pc, #52]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90009a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90009a7e:	4b0b      	ldr	r3, [pc, #44]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a82:	4a0a      	ldr	r2, [pc, #40]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90009a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90009a8a:	4b08      	ldr	r3, [pc, #32]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a8e:	4a07      	ldr	r2, [pc, #28]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a90:	f043 0301 	orr.w	r3, r3, #1
90009a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90009a96:	4b05      	ldr	r3, [pc, #20]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a98:	681b      	ldr	r3, [r3, #0]
90009a9a:	4a04      	ldr	r2, [pc, #16]	@ (90009aac <HAL_RCC_OscConfig+0x76c>)
90009a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90009aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90009aa2:	f7fb f88b 	bl	90004bbc <HAL_GetTick>
90009aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90009aa8:	e011      	b.n	90009ace <HAL_RCC_OscConfig+0x78e>
90009aaa:	bf00      	nop
90009aac:	58024400 	.word	0x58024400
90009ab0:	58024800 	.word	0x58024800
90009ab4:	fffffc0c 	.word	0xfffffc0c
90009ab8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90009abc:	f7fb f87e 	bl	90004bbc <HAL_GetTick>
90009ac0:	4602      	mov	r2, r0
90009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009ac4:	1ad3      	subs	r3, r2, r3
90009ac6:	2b02      	cmp	r3, #2
90009ac8:	d901      	bls.n	90009ace <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90009aca:	2303      	movs	r3, #3
90009acc:	e08a      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90009ace:	4b47      	ldr	r3, [pc, #284]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009ad0:	681b      	ldr	r3, [r3, #0]
90009ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90009ad6:	2b00      	cmp	r3, #0
90009ad8:	d0f0      	beq.n	90009abc <HAL_RCC_OscConfig+0x77c>
90009ada:	e082      	b.n	90009be2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90009adc:	4b43      	ldr	r3, [pc, #268]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009ade:	681b      	ldr	r3, [r3, #0]
90009ae0:	4a42      	ldr	r2, [pc, #264]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90009ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90009ae8:	f7fb f868 	bl	90004bbc <HAL_GetTick>
90009aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90009aee:	e008      	b.n	90009b02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90009af0:	f7fb f864 	bl	90004bbc <HAL_GetTick>
90009af4:	4602      	mov	r2, r0
90009af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009af8:	1ad3      	subs	r3, r2, r3
90009afa:	2b02      	cmp	r3, #2
90009afc:	d901      	bls.n	90009b02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90009afe:	2303      	movs	r3, #3
90009b00:	e070      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90009b02:	4b3a      	ldr	r3, [pc, #232]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009b04:	681b      	ldr	r3, [r3, #0]
90009b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90009b0a:	2b00      	cmp	r3, #0
90009b0c:	d1f0      	bne.n	90009af0 <HAL_RCC_OscConfig+0x7b0>
90009b0e:	e068      	b.n	90009be2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90009b10:	4b36      	ldr	r3, [pc, #216]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009b14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90009b16:	4b35      	ldr	r3, [pc, #212]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90009b1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90009b1c:	687b      	ldr	r3, [r7, #4]
90009b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90009b20:	2b01      	cmp	r3, #1
90009b22:	d031      	beq.n	90009b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90009b24:	693b      	ldr	r3, [r7, #16]
90009b26:	f003 0203 	and.w	r2, r3, #3
90009b2a:	687b      	ldr	r3, [r7, #4]
90009b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90009b2e:	429a      	cmp	r2, r3
90009b30:	d12a      	bne.n	90009b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90009b32:	693b      	ldr	r3, [r7, #16]
90009b34:	091b      	lsrs	r3, r3, #4
90009b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90009b3a:	687b      	ldr	r3, [r7, #4]
90009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90009b3e:	429a      	cmp	r2, r3
90009b40:	d122      	bne.n	90009b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90009b42:	68fb      	ldr	r3, [r7, #12]
90009b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009b48:	687b      	ldr	r3, [r7, #4]
90009b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90009b4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90009b4e:	429a      	cmp	r2, r3
90009b50:	d11a      	bne.n	90009b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90009b52:	68fb      	ldr	r3, [r7, #12]
90009b54:	0a5b      	lsrs	r3, r3, #9
90009b56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90009b5a:	687b      	ldr	r3, [r7, #4]
90009b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90009b5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90009b60:	429a      	cmp	r2, r3
90009b62:	d111      	bne.n	90009b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90009b64:	68fb      	ldr	r3, [r7, #12]
90009b66:	0c1b      	lsrs	r3, r3, #16
90009b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90009b6c:	687b      	ldr	r3, [r7, #4]
90009b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009b70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90009b72:	429a      	cmp	r2, r3
90009b74:	d108      	bne.n	90009b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90009b76:	68fb      	ldr	r3, [r7, #12]
90009b78:	0e1b      	lsrs	r3, r3, #24
90009b7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90009b7e:	687b      	ldr	r3, [r7, #4]
90009b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90009b82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90009b84:	429a      	cmp	r2, r3
90009b86:	d001      	beq.n	90009b8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90009b88:	2301      	movs	r3, #1
90009b8a:	e02b      	b.n	90009be4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90009b8c:	4b17      	ldr	r3, [pc, #92]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90009b90:	08db      	lsrs	r3, r3, #3
90009b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009b96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90009b98:	687b      	ldr	r3, [r7, #4]
90009b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90009b9c:	693a      	ldr	r2, [r7, #16]
90009b9e:	429a      	cmp	r2, r3
90009ba0:	d01f      	beq.n	90009be2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90009ba2:	4b12      	ldr	r3, [pc, #72]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009ba6:	4a11      	ldr	r2, [pc, #68]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009ba8:	f023 0301 	bic.w	r3, r3, #1
90009bac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90009bae:	f7fb f805 	bl	90004bbc <HAL_GetTick>
90009bb2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90009bb4:	bf00      	nop
90009bb6:	f7fb f801 	bl	90004bbc <HAL_GetTick>
90009bba:	4602      	mov	r2, r0
90009bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009bbe:	4293      	cmp	r3, r2
90009bc0:	d0f9      	beq.n	90009bb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90009bc2:	4b0a      	ldr	r3, [pc, #40]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90009bc6:	4b0a      	ldr	r3, [pc, #40]	@ (90009bf0 <HAL_RCC_OscConfig+0x8b0>)
90009bc8:	4013      	ands	r3, r2
90009bca:	687a      	ldr	r2, [r7, #4]
90009bcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90009bce:	00d2      	lsls	r2, r2, #3
90009bd0:	4906      	ldr	r1, [pc, #24]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009bd2:	4313      	orrs	r3, r2
90009bd4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90009bd6:	4b05      	ldr	r3, [pc, #20]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009bda:	4a04      	ldr	r2, [pc, #16]	@ (90009bec <HAL_RCC_OscConfig+0x8ac>)
90009bdc:	f043 0301 	orr.w	r3, r3, #1
90009be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
90009be2:	2300      	movs	r3, #0
}
90009be4:	4618      	mov	r0, r3
90009be6:	3730      	adds	r7, #48	@ 0x30
90009be8:	46bd      	mov	sp, r7
90009bea:	bd80      	pop	{r7, pc}
90009bec:	58024400 	.word	0x58024400
90009bf0:	ffff0007 	.word	0xffff0007

90009bf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90009bf4:	b580      	push	{r7, lr}
90009bf6:	b086      	sub	sp, #24
90009bf8:	af00      	add	r7, sp, #0
90009bfa:	6078      	str	r0, [r7, #4]
90009bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90009bfe:	687b      	ldr	r3, [r7, #4]
90009c00:	2b00      	cmp	r3, #0
90009c02:	d101      	bne.n	90009c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90009c04:	2301      	movs	r3, #1
90009c06:	e19c      	b.n	90009f42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90009c08:	4b8a      	ldr	r3, [pc, #552]	@ (90009e34 <HAL_RCC_ClockConfig+0x240>)
90009c0a:	681b      	ldr	r3, [r3, #0]
90009c0c:	f003 030f 	and.w	r3, r3, #15
90009c10:	683a      	ldr	r2, [r7, #0]
90009c12:	429a      	cmp	r2, r3
90009c14:	d910      	bls.n	90009c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90009c16:	4b87      	ldr	r3, [pc, #540]	@ (90009e34 <HAL_RCC_ClockConfig+0x240>)
90009c18:	681b      	ldr	r3, [r3, #0]
90009c1a:	f023 020f 	bic.w	r2, r3, #15
90009c1e:	4985      	ldr	r1, [pc, #532]	@ (90009e34 <HAL_RCC_ClockConfig+0x240>)
90009c20:	683b      	ldr	r3, [r7, #0]
90009c22:	4313      	orrs	r3, r2
90009c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90009c26:	4b83      	ldr	r3, [pc, #524]	@ (90009e34 <HAL_RCC_ClockConfig+0x240>)
90009c28:	681b      	ldr	r3, [r3, #0]
90009c2a:	f003 030f 	and.w	r3, r3, #15
90009c2e:	683a      	ldr	r2, [r7, #0]
90009c30:	429a      	cmp	r2, r3
90009c32:	d001      	beq.n	90009c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90009c34:	2301      	movs	r3, #1
90009c36:	e184      	b.n	90009f42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90009c38:	687b      	ldr	r3, [r7, #4]
90009c3a:	681b      	ldr	r3, [r3, #0]
90009c3c:	f003 0304 	and.w	r3, r3, #4
90009c40:	2b00      	cmp	r3, #0
90009c42:	d010      	beq.n	90009c66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90009c44:	687b      	ldr	r3, [r7, #4]
90009c46:	691a      	ldr	r2, [r3, #16]
90009c48:	4b7b      	ldr	r3, [pc, #492]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009c4a:	699b      	ldr	r3, [r3, #24]
90009c4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90009c50:	429a      	cmp	r2, r3
90009c52:	d908      	bls.n	90009c66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90009c54:	4b78      	ldr	r3, [pc, #480]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009c56:	699b      	ldr	r3, [r3, #24]
90009c58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90009c5c:	687b      	ldr	r3, [r7, #4]
90009c5e:	691b      	ldr	r3, [r3, #16]
90009c60:	4975      	ldr	r1, [pc, #468]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009c62:	4313      	orrs	r3, r2
90009c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90009c66:	687b      	ldr	r3, [r7, #4]
90009c68:	681b      	ldr	r3, [r3, #0]
90009c6a:	f003 0308 	and.w	r3, r3, #8
90009c6e:	2b00      	cmp	r3, #0
90009c70:	d010      	beq.n	90009c94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90009c72:	687b      	ldr	r3, [r7, #4]
90009c74:	695a      	ldr	r2, [r3, #20]
90009c76:	4b70      	ldr	r3, [pc, #448]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009c78:	69db      	ldr	r3, [r3, #28]
90009c7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90009c7e:	429a      	cmp	r2, r3
90009c80:	d908      	bls.n	90009c94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90009c82:	4b6d      	ldr	r3, [pc, #436]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009c84:	69db      	ldr	r3, [r3, #28]
90009c86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90009c8a:	687b      	ldr	r3, [r7, #4]
90009c8c:	695b      	ldr	r3, [r3, #20]
90009c8e:	496a      	ldr	r1, [pc, #424]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009c90:	4313      	orrs	r3, r2
90009c92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90009c94:	687b      	ldr	r3, [r7, #4]
90009c96:	681b      	ldr	r3, [r3, #0]
90009c98:	f003 0310 	and.w	r3, r3, #16
90009c9c:	2b00      	cmp	r3, #0
90009c9e:	d010      	beq.n	90009cc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90009ca0:	687b      	ldr	r3, [r7, #4]
90009ca2:	699a      	ldr	r2, [r3, #24]
90009ca4:	4b64      	ldr	r3, [pc, #400]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009ca6:	69db      	ldr	r3, [r3, #28]
90009ca8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90009cac:	429a      	cmp	r2, r3
90009cae:	d908      	bls.n	90009cc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90009cb0:	4b61      	ldr	r3, [pc, #388]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009cb2:	69db      	ldr	r3, [r3, #28]
90009cb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90009cb8:	687b      	ldr	r3, [r7, #4]
90009cba:	699b      	ldr	r3, [r3, #24]
90009cbc:	495e      	ldr	r1, [pc, #376]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009cbe:	4313      	orrs	r3, r2
90009cc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90009cc2:	687b      	ldr	r3, [r7, #4]
90009cc4:	681b      	ldr	r3, [r3, #0]
90009cc6:	f003 0320 	and.w	r3, r3, #32
90009cca:	2b00      	cmp	r3, #0
90009ccc:	d010      	beq.n	90009cf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90009cce:	687b      	ldr	r3, [r7, #4]
90009cd0:	69da      	ldr	r2, [r3, #28]
90009cd2:	4b59      	ldr	r3, [pc, #356]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009cd4:	6a1b      	ldr	r3, [r3, #32]
90009cd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90009cda:	429a      	cmp	r2, r3
90009cdc:	d908      	bls.n	90009cf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90009cde:	4b56      	ldr	r3, [pc, #344]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009ce0:	6a1b      	ldr	r3, [r3, #32]
90009ce2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90009ce6:	687b      	ldr	r3, [r7, #4]
90009ce8:	69db      	ldr	r3, [r3, #28]
90009cea:	4953      	ldr	r1, [pc, #332]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009cec:	4313      	orrs	r3, r2
90009cee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90009cf0:	687b      	ldr	r3, [r7, #4]
90009cf2:	681b      	ldr	r3, [r3, #0]
90009cf4:	f003 0302 	and.w	r3, r3, #2
90009cf8:	2b00      	cmp	r3, #0
90009cfa:	d010      	beq.n	90009d1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90009cfc:	687b      	ldr	r3, [r7, #4]
90009cfe:	68da      	ldr	r2, [r3, #12]
90009d00:	4b4d      	ldr	r3, [pc, #308]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d02:	699b      	ldr	r3, [r3, #24]
90009d04:	f003 030f 	and.w	r3, r3, #15
90009d08:	429a      	cmp	r2, r3
90009d0a:	d908      	bls.n	90009d1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90009d0c:	4b4a      	ldr	r3, [pc, #296]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d0e:	699b      	ldr	r3, [r3, #24]
90009d10:	f023 020f 	bic.w	r2, r3, #15
90009d14:	687b      	ldr	r3, [r7, #4]
90009d16:	68db      	ldr	r3, [r3, #12]
90009d18:	4947      	ldr	r1, [pc, #284]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d1a:	4313      	orrs	r3, r2
90009d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90009d1e:	687b      	ldr	r3, [r7, #4]
90009d20:	681b      	ldr	r3, [r3, #0]
90009d22:	f003 0301 	and.w	r3, r3, #1
90009d26:	2b00      	cmp	r3, #0
90009d28:	d055      	beq.n	90009dd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90009d2a:	4b43      	ldr	r3, [pc, #268]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d2c:	699b      	ldr	r3, [r3, #24]
90009d2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
90009d32:	687b      	ldr	r3, [r7, #4]
90009d34:	689b      	ldr	r3, [r3, #8]
90009d36:	4940      	ldr	r1, [pc, #256]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d38:	4313      	orrs	r3, r2
90009d3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90009d3c:	687b      	ldr	r3, [r7, #4]
90009d3e:	685b      	ldr	r3, [r3, #4]
90009d40:	2b02      	cmp	r3, #2
90009d42:	d107      	bne.n	90009d54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90009d44:	4b3c      	ldr	r3, [pc, #240]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d46:	681b      	ldr	r3, [r3, #0]
90009d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90009d4c:	2b00      	cmp	r3, #0
90009d4e:	d121      	bne.n	90009d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90009d50:	2301      	movs	r3, #1
90009d52:	e0f6      	b.n	90009f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90009d54:	687b      	ldr	r3, [r7, #4]
90009d56:	685b      	ldr	r3, [r3, #4]
90009d58:	2b03      	cmp	r3, #3
90009d5a:	d107      	bne.n	90009d6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90009d5c:	4b36      	ldr	r3, [pc, #216]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d5e:	681b      	ldr	r3, [r3, #0]
90009d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90009d64:	2b00      	cmp	r3, #0
90009d66:	d115      	bne.n	90009d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90009d68:	2301      	movs	r3, #1
90009d6a:	e0ea      	b.n	90009f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90009d6c:	687b      	ldr	r3, [r7, #4]
90009d6e:	685b      	ldr	r3, [r3, #4]
90009d70:	2b01      	cmp	r3, #1
90009d72:	d107      	bne.n	90009d84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90009d74:	4b30      	ldr	r3, [pc, #192]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d76:	681b      	ldr	r3, [r3, #0]
90009d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90009d7c:	2b00      	cmp	r3, #0
90009d7e:	d109      	bne.n	90009d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90009d80:	2301      	movs	r3, #1
90009d82:	e0de      	b.n	90009f42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90009d84:	4b2c      	ldr	r3, [pc, #176]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d86:	681b      	ldr	r3, [r3, #0]
90009d88:	f003 0304 	and.w	r3, r3, #4
90009d8c:	2b00      	cmp	r3, #0
90009d8e:	d101      	bne.n	90009d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90009d90:	2301      	movs	r3, #1
90009d92:	e0d6      	b.n	90009f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90009d94:	4b28      	ldr	r3, [pc, #160]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009d96:	691b      	ldr	r3, [r3, #16]
90009d98:	f023 0207 	bic.w	r2, r3, #7
90009d9c:	687b      	ldr	r3, [r7, #4]
90009d9e:	685b      	ldr	r3, [r3, #4]
90009da0:	4925      	ldr	r1, [pc, #148]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009da2:	4313      	orrs	r3, r2
90009da4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009da6:	f7fa ff09 	bl	90004bbc <HAL_GetTick>
90009daa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90009dac:	e00a      	b.n	90009dc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90009dae:	f7fa ff05 	bl	90004bbc <HAL_GetTick>
90009db2:	4602      	mov	r2, r0
90009db4:	697b      	ldr	r3, [r7, #20]
90009db6:	1ad3      	subs	r3, r2, r3
90009db8:	f241 3288 	movw	r2, #5000	@ 0x1388
90009dbc:	4293      	cmp	r3, r2
90009dbe:	d901      	bls.n	90009dc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90009dc0:	2303      	movs	r3, #3
90009dc2:	e0be      	b.n	90009f42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90009dc4:	4b1c      	ldr	r3, [pc, #112]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009dc6:	691b      	ldr	r3, [r3, #16]
90009dc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
90009dcc:	687b      	ldr	r3, [r7, #4]
90009dce:	685b      	ldr	r3, [r3, #4]
90009dd0:	00db      	lsls	r3, r3, #3
90009dd2:	429a      	cmp	r2, r3
90009dd4:	d1eb      	bne.n	90009dae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90009dd6:	687b      	ldr	r3, [r7, #4]
90009dd8:	681b      	ldr	r3, [r3, #0]
90009dda:	f003 0302 	and.w	r3, r3, #2
90009dde:	2b00      	cmp	r3, #0
90009de0:	d010      	beq.n	90009e04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90009de2:	687b      	ldr	r3, [r7, #4]
90009de4:	68da      	ldr	r2, [r3, #12]
90009de6:	4b14      	ldr	r3, [pc, #80]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009de8:	699b      	ldr	r3, [r3, #24]
90009dea:	f003 030f 	and.w	r3, r3, #15
90009dee:	429a      	cmp	r2, r3
90009df0:	d208      	bcs.n	90009e04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90009df2:	4b11      	ldr	r3, [pc, #68]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009df4:	699b      	ldr	r3, [r3, #24]
90009df6:	f023 020f 	bic.w	r2, r3, #15
90009dfa:	687b      	ldr	r3, [r7, #4]
90009dfc:	68db      	ldr	r3, [r3, #12]
90009dfe:	490e      	ldr	r1, [pc, #56]	@ (90009e38 <HAL_RCC_ClockConfig+0x244>)
90009e00:	4313      	orrs	r3, r2
90009e02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90009e04:	4b0b      	ldr	r3, [pc, #44]	@ (90009e34 <HAL_RCC_ClockConfig+0x240>)
90009e06:	681b      	ldr	r3, [r3, #0]
90009e08:	f003 030f 	and.w	r3, r3, #15
90009e0c:	683a      	ldr	r2, [r7, #0]
90009e0e:	429a      	cmp	r2, r3
90009e10:	d214      	bcs.n	90009e3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90009e12:	4b08      	ldr	r3, [pc, #32]	@ (90009e34 <HAL_RCC_ClockConfig+0x240>)
90009e14:	681b      	ldr	r3, [r3, #0]
90009e16:	f023 020f 	bic.w	r2, r3, #15
90009e1a:	4906      	ldr	r1, [pc, #24]	@ (90009e34 <HAL_RCC_ClockConfig+0x240>)
90009e1c:	683b      	ldr	r3, [r7, #0]
90009e1e:	4313      	orrs	r3, r2
90009e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90009e22:	4b04      	ldr	r3, [pc, #16]	@ (90009e34 <HAL_RCC_ClockConfig+0x240>)
90009e24:	681b      	ldr	r3, [r3, #0]
90009e26:	f003 030f 	and.w	r3, r3, #15
90009e2a:	683a      	ldr	r2, [r7, #0]
90009e2c:	429a      	cmp	r2, r3
90009e2e:	d005      	beq.n	90009e3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90009e30:	2301      	movs	r3, #1
90009e32:	e086      	b.n	90009f42 <HAL_RCC_ClockConfig+0x34e>
90009e34:	52002000 	.word	0x52002000
90009e38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90009e3c:	687b      	ldr	r3, [r7, #4]
90009e3e:	681b      	ldr	r3, [r3, #0]
90009e40:	f003 0304 	and.w	r3, r3, #4
90009e44:	2b00      	cmp	r3, #0
90009e46:	d010      	beq.n	90009e6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90009e48:	687b      	ldr	r3, [r7, #4]
90009e4a:	691a      	ldr	r2, [r3, #16]
90009e4c:	4b3f      	ldr	r3, [pc, #252]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009e4e:	699b      	ldr	r3, [r3, #24]
90009e50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90009e54:	429a      	cmp	r2, r3
90009e56:	d208      	bcs.n	90009e6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90009e58:	4b3c      	ldr	r3, [pc, #240]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009e5a:	699b      	ldr	r3, [r3, #24]
90009e5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90009e60:	687b      	ldr	r3, [r7, #4]
90009e62:	691b      	ldr	r3, [r3, #16]
90009e64:	4939      	ldr	r1, [pc, #228]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009e66:	4313      	orrs	r3, r2
90009e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90009e6a:	687b      	ldr	r3, [r7, #4]
90009e6c:	681b      	ldr	r3, [r3, #0]
90009e6e:	f003 0308 	and.w	r3, r3, #8
90009e72:	2b00      	cmp	r3, #0
90009e74:	d010      	beq.n	90009e98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90009e76:	687b      	ldr	r3, [r7, #4]
90009e78:	695a      	ldr	r2, [r3, #20]
90009e7a:	4b34      	ldr	r3, [pc, #208]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009e7c:	69db      	ldr	r3, [r3, #28]
90009e7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90009e82:	429a      	cmp	r2, r3
90009e84:	d208      	bcs.n	90009e98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90009e86:	4b31      	ldr	r3, [pc, #196]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009e88:	69db      	ldr	r3, [r3, #28]
90009e8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90009e8e:	687b      	ldr	r3, [r7, #4]
90009e90:	695b      	ldr	r3, [r3, #20]
90009e92:	492e      	ldr	r1, [pc, #184]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009e94:	4313      	orrs	r3, r2
90009e96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90009e98:	687b      	ldr	r3, [r7, #4]
90009e9a:	681b      	ldr	r3, [r3, #0]
90009e9c:	f003 0310 	and.w	r3, r3, #16
90009ea0:	2b00      	cmp	r3, #0
90009ea2:	d010      	beq.n	90009ec6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90009ea4:	687b      	ldr	r3, [r7, #4]
90009ea6:	699a      	ldr	r2, [r3, #24]
90009ea8:	4b28      	ldr	r3, [pc, #160]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009eaa:	69db      	ldr	r3, [r3, #28]
90009eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90009eb0:	429a      	cmp	r2, r3
90009eb2:	d208      	bcs.n	90009ec6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90009eb4:	4b25      	ldr	r3, [pc, #148]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009eb6:	69db      	ldr	r3, [r3, #28]
90009eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90009ebc:	687b      	ldr	r3, [r7, #4]
90009ebe:	699b      	ldr	r3, [r3, #24]
90009ec0:	4922      	ldr	r1, [pc, #136]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009ec2:	4313      	orrs	r3, r2
90009ec4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90009ec6:	687b      	ldr	r3, [r7, #4]
90009ec8:	681b      	ldr	r3, [r3, #0]
90009eca:	f003 0320 	and.w	r3, r3, #32
90009ece:	2b00      	cmp	r3, #0
90009ed0:	d010      	beq.n	90009ef4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90009ed2:	687b      	ldr	r3, [r7, #4]
90009ed4:	69da      	ldr	r2, [r3, #28]
90009ed6:	4b1d      	ldr	r3, [pc, #116]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009ed8:	6a1b      	ldr	r3, [r3, #32]
90009eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90009ede:	429a      	cmp	r2, r3
90009ee0:	d208      	bcs.n	90009ef4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90009ee2:	4b1a      	ldr	r3, [pc, #104]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009ee4:	6a1b      	ldr	r3, [r3, #32]
90009ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90009eea:	687b      	ldr	r3, [r7, #4]
90009eec:	69db      	ldr	r3, [r3, #28]
90009eee:	4917      	ldr	r1, [pc, #92]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009ef0:	4313      	orrs	r3, r2
90009ef2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009ef4:	f000 f834 	bl	90009f60 <HAL_RCC_GetSysClockFreq>
90009ef8:	4602      	mov	r2, r0
90009efa:	4b14      	ldr	r3, [pc, #80]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009efc:	699b      	ldr	r3, [r3, #24]
90009efe:	0a1b      	lsrs	r3, r3, #8
90009f00:	f003 030f 	and.w	r3, r3, #15
90009f04:	4912      	ldr	r1, [pc, #72]	@ (90009f50 <HAL_RCC_ClockConfig+0x35c>)
90009f06:	5ccb      	ldrb	r3, [r1, r3]
90009f08:	f003 031f 	and.w	r3, r3, #31
90009f0c:	fa22 f303 	lsr.w	r3, r2, r3
90009f10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009f12:	4b0e      	ldr	r3, [pc, #56]	@ (90009f4c <HAL_RCC_ClockConfig+0x358>)
90009f14:	699b      	ldr	r3, [r3, #24]
90009f16:	f003 030f 	and.w	r3, r3, #15
90009f1a:	4a0d      	ldr	r2, [pc, #52]	@ (90009f50 <HAL_RCC_ClockConfig+0x35c>)
90009f1c:	5cd3      	ldrb	r3, [r2, r3]
90009f1e:	f003 031f 	and.w	r3, r3, #31
90009f22:	693a      	ldr	r2, [r7, #16]
90009f24:	fa22 f303 	lsr.w	r3, r2, r3
90009f28:	4a0a      	ldr	r2, [pc, #40]	@ (90009f54 <HAL_RCC_ClockConfig+0x360>)
90009f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90009f2c:	4a0a      	ldr	r2, [pc, #40]	@ (90009f58 <HAL_RCC_ClockConfig+0x364>)
90009f2e:	693b      	ldr	r3, [r7, #16]
90009f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90009f32:	4b0a      	ldr	r3, [pc, #40]	@ (90009f5c <HAL_RCC_ClockConfig+0x368>)
90009f34:	681b      	ldr	r3, [r3, #0]
90009f36:	4618      	mov	r0, r3
90009f38:	f7fa fdf6 	bl	90004b28 <HAL_InitTick>
90009f3c:	4603      	mov	r3, r0
90009f3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90009f40:	7bfb      	ldrb	r3, [r7, #15]
}
90009f42:	4618      	mov	r0, r3
90009f44:	3718      	adds	r7, #24
90009f46:	46bd      	mov	sp, r7
90009f48:	bd80      	pop	{r7, pc}
90009f4a:	bf00      	nop
90009f4c:	58024400 	.word	0x58024400
90009f50:	9001418c 	.word	0x9001418c
90009f54:	20000040 	.word	0x20000040
90009f58:	2000003c 	.word	0x2000003c
90009f5c:	20000044 	.word	0x20000044

90009f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90009f60:	b480      	push	{r7}
90009f62:	b089      	sub	sp, #36	@ 0x24
90009f64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90009f66:	4bb3      	ldr	r3, [pc, #716]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
90009f68:	691b      	ldr	r3, [r3, #16]
90009f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009f6e:	2b18      	cmp	r3, #24
90009f70:	f200 8155 	bhi.w	9000a21e <HAL_RCC_GetSysClockFreq+0x2be>
90009f74:	a201      	add	r2, pc, #4	@ (adr r2, 90009f7c <HAL_RCC_GetSysClockFreq+0x1c>)
90009f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f7a:	bf00      	nop
90009f7c:	90009fe1 	.word	0x90009fe1
90009f80:	9000a21f 	.word	0x9000a21f
90009f84:	9000a21f 	.word	0x9000a21f
90009f88:	9000a21f 	.word	0x9000a21f
90009f8c:	9000a21f 	.word	0x9000a21f
90009f90:	9000a21f 	.word	0x9000a21f
90009f94:	9000a21f 	.word	0x9000a21f
90009f98:	9000a21f 	.word	0x9000a21f
90009f9c:	9000a007 	.word	0x9000a007
90009fa0:	9000a21f 	.word	0x9000a21f
90009fa4:	9000a21f 	.word	0x9000a21f
90009fa8:	9000a21f 	.word	0x9000a21f
90009fac:	9000a21f 	.word	0x9000a21f
90009fb0:	9000a21f 	.word	0x9000a21f
90009fb4:	9000a21f 	.word	0x9000a21f
90009fb8:	9000a21f 	.word	0x9000a21f
90009fbc:	9000a00d 	.word	0x9000a00d
90009fc0:	9000a21f 	.word	0x9000a21f
90009fc4:	9000a21f 	.word	0x9000a21f
90009fc8:	9000a21f 	.word	0x9000a21f
90009fcc:	9000a21f 	.word	0x9000a21f
90009fd0:	9000a21f 	.word	0x9000a21f
90009fd4:	9000a21f 	.word	0x9000a21f
90009fd8:	9000a21f 	.word	0x9000a21f
90009fdc:	9000a013 	.word	0x9000a013
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009fe0:	4b94      	ldr	r3, [pc, #592]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
90009fe2:	681b      	ldr	r3, [r3, #0]
90009fe4:	f003 0320 	and.w	r3, r3, #32
90009fe8:	2b00      	cmp	r3, #0
90009fea:	d009      	beq.n	9000a000 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009fec:	4b91      	ldr	r3, [pc, #580]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
90009fee:	681b      	ldr	r3, [r3, #0]
90009ff0:	08db      	lsrs	r3, r3, #3
90009ff2:	f003 0303 	and.w	r3, r3, #3
90009ff6:	4a90      	ldr	r2, [pc, #576]	@ (9000a238 <HAL_RCC_GetSysClockFreq+0x2d8>)
90009ff8:	fa22 f303 	lsr.w	r3, r2, r3
90009ffc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
90009ffe:	e111      	b.n	9000a224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000a000:	4b8d      	ldr	r3, [pc, #564]	@ (9000a238 <HAL_RCC_GetSysClockFreq+0x2d8>)
9000a002:	61bb      	str	r3, [r7, #24]
      break;
9000a004:	e10e      	b.n	9000a224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
9000a006:	4b8d      	ldr	r3, [pc, #564]	@ (9000a23c <HAL_RCC_GetSysClockFreq+0x2dc>)
9000a008:	61bb      	str	r3, [r7, #24]
      break;
9000a00a:	e10b      	b.n	9000a224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
9000a00c:	4b8c      	ldr	r3, [pc, #560]	@ (9000a240 <HAL_RCC_GetSysClockFreq+0x2e0>)
9000a00e:	61bb      	str	r3, [r7, #24]
      break;
9000a010:	e108      	b.n	9000a224 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a012:	4b88      	ldr	r3, [pc, #544]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a016:	f003 0303 	and.w	r3, r3, #3
9000a01a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a01c:	4b85      	ldr	r3, [pc, #532]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a020:	091b      	lsrs	r3, r3, #4
9000a022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000a026:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a028:	4b82      	ldr	r3, [pc, #520]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a02c:	f003 0301 	and.w	r3, r3, #1
9000a030:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a032:	4b80      	ldr	r3, [pc, #512]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000a036:	08db      	lsrs	r3, r3, #3
9000a038:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000a03c:	68fa      	ldr	r2, [r7, #12]
9000a03e:	fb02 f303 	mul.w	r3, r2, r3
9000a042:	ee07 3a90 	vmov	s15, r3
9000a046:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a04a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
9000a04e:	693b      	ldr	r3, [r7, #16]
9000a050:	2b00      	cmp	r3, #0
9000a052:	f000 80e1 	beq.w	9000a218 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
9000a056:	697b      	ldr	r3, [r7, #20]
9000a058:	2b02      	cmp	r3, #2
9000a05a:	f000 8083 	beq.w	9000a164 <HAL_RCC_GetSysClockFreq+0x204>
9000a05e:	697b      	ldr	r3, [r7, #20]
9000a060:	2b02      	cmp	r3, #2
9000a062:	f200 80a1 	bhi.w	9000a1a8 <HAL_RCC_GetSysClockFreq+0x248>
9000a066:	697b      	ldr	r3, [r7, #20]
9000a068:	2b00      	cmp	r3, #0
9000a06a:	d003      	beq.n	9000a074 <HAL_RCC_GetSysClockFreq+0x114>
9000a06c:	697b      	ldr	r3, [r7, #20]
9000a06e:	2b01      	cmp	r3, #1
9000a070:	d056      	beq.n	9000a120 <HAL_RCC_GetSysClockFreq+0x1c0>
9000a072:	e099      	b.n	9000a1a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a074:	4b6f      	ldr	r3, [pc, #444]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a076:	681b      	ldr	r3, [r3, #0]
9000a078:	f003 0320 	and.w	r3, r3, #32
9000a07c:	2b00      	cmp	r3, #0
9000a07e:	d02d      	beq.n	9000a0dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a080:	4b6c      	ldr	r3, [pc, #432]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a082:	681b      	ldr	r3, [r3, #0]
9000a084:	08db      	lsrs	r3, r3, #3
9000a086:	f003 0303 	and.w	r3, r3, #3
9000a08a:	4a6b      	ldr	r2, [pc, #428]	@ (9000a238 <HAL_RCC_GetSysClockFreq+0x2d8>)
9000a08c:	fa22 f303 	lsr.w	r3, r2, r3
9000a090:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a092:	687b      	ldr	r3, [r7, #4]
9000a094:	ee07 3a90 	vmov	s15, r3
9000a098:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a09c:	693b      	ldr	r3, [r7, #16]
9000a09e:	ee07 3a90 	vmov	s15, r3
9000a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a0a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a0aa:	4b62      	ldr	r3, [pc, #392]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a0ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a0b2:	ee07 3a90 	vmov	s15, r3
9000a0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a0ba:	ed97 6a02 	vldr	s12, [r7, #8]
9000a0be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 9000a244 <HAL_RCC_GetSysClockFreq+0x2e4>
9000a0c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a0ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a0d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
9000a0da:	e087      	b.n	9000a1ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a0dc:	693b      	ldr	r3, [r7, #16]
9000a0de:	ee07 3a90 	vmov	s15, r3
9000a0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a0e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 9000a248 <HAL_RCC_GetSysClockFreq+0x2e8>
9000a0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a0ee:	4b51      	ldr	r3, [pc, #324]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a0f6:	ee07 3a90 	vmov	s15, r3
9000a0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a0fe:	ed97 6a02 	vldr	s12, [r7, #8]
9000a102:	eddf 5a50 	vldr	s11, [pc, #320]	@ 9000a244 <HAL_RCC_GetSysClockFreq+0x2e4>
9000a106:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a10a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a10e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a112:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a116:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a11a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000a11e:	e065      	b.n	9000a1ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a120:	693b      	ldr	r3, [r7, #16]
9000a122:	ee07 3a90 	vmov	s15, r3
9000a126:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a12a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 9000a24c <HAL_RCC_GetSysClockFreq+0x2ec>
9000a12e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a132:	4b40      	ldr	r3, [pc, #256]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a136:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a13a:	ee07 3a90 	vmov	s15, r3
9000a13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a142:	ed97 6a02 	vldr	s12, [r7, #8]
9000a146:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 9000a244 <HAL_RCC_GetSysClockFreq+0x2e4>
9000a14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a156:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a15a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a15e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000a162:	e043      	b.n	9000a1ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a164:	693b      	ldr	r3, [r7, #16]
9000a166:	ee07 3a90 	vmov	s15, r3
9000a16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a16e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 9000a250 <HAL_RCC_GetSysClockFreq+0x2f0>
9000a172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a176:	4b2f      	ldr	r3, [pc, #188]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a17e:	ee07 3a90 	vmov	s15, r3
9000a182:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a186:	ed97 6a02 	vldr	s12, [r7, #8]
9000a18a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 9000a244 <HAL_RCC_GetSysClockFreq+0x2e4>
9000a18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a192:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a19e:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a1a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000a1a6:	e021      	b.n	9000a1ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a1a8:	693b      	ldr	r3, [r7, #16]
9000a1aa:	ee07 3a90 	vmov	s15, r3
9000a1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a1b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 9000a24c <HAL_RCC_GetSysClockFreq+0x2ec>
9000a1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a1ba:	4b1e      	ldr	r3, [pc, #120]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a1c2:	ee07 3a90 	vmov	s15, r3
9000a1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a1ca:	ed97 6a02 	vldr	s12, [r7, #8]
9000a1ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 9000a244 <HAL_RCC_GetSysClockFreq+0x2e4>
9000a1d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a1d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a1da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000a1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a1e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000a1ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000a1ec:	4b11      	ldr	r3, [pc, #68]	@ (9000a234 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000a1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000a1f0:	0a5b      	lsrs	r3, r3, #9
9000a1f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000a1f6:	3301      	adds	r3, #1
9000a1f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000a1fa:	683b      	ldr	r3, [r7, #0]
9000a1fc:	ee07 3a90 	vmov	s15, r3
9000a200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
9000a204:	edd7 6a07 	vldr	s13, [r7, #28]
9000a208:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a20c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a210:	ee17 3a90 	vmov	r3, s15
9000a214:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
9000a216:	e005      	b.n	9000a224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
9000a218:	2300      	movs	r3, #0
9000a21a:	61bb      	str	r3, [r7, #24]
      break;
9000a21c:	e002      	b.n	9000a224 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
9000a21e:	4b07      	ldr	r3, [pc, #28]	@ (9000a23c <HAL_RCC_GetSysClockFreq+0x2dc>)
9000a220:	61bb      	str	r3, [r7, #24]
      break;
9000a222:	bf00      	nop
  }

  return sysclockfreq;
9000a224:	69bb      	ldr	r3, [r7, #24]
}
9000a226:	4618      	mov	r0, r3
9000a228:	3724      	adds	r7, #36	@ 0x24
9000a22a:	46bd      	mov	sp, r7
9000a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a230:	4770      	bx	lr
9000a232:	bf00      	nop
9000a234:	58024400 	.word	0x58024400
9000a238:	03d09000 	.word	0x03d09000
9000a23c:	003d0900 	.word	0x003d0900
9000a240:	017d7840 	.word	0x017d7840
9000a244:	46000000 	.word	0x46000000
9000a248:	4c742400 	.word	0x4c742400
9000a24c:	4a742400 	.word	0x4a742400
9000a250:	4bbebc20 	.word	0x4bbebc20

9000a254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
9000a254:	b580      	push	{r7, lr}
9000a256:	b082      	sub	sp, #8
9000a258:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a25a:	f7ff fe81 	bl	90009f60 <HAL_RCC_GetSysClockFreq>
9000a25e:	4602      	mov	r2, r0
9000a260:	4b10      	ldr	r3, [pc, #64]	@ (9000a2a4 <HAL_RCC_GetHCLKFreq+0x50>)
9000a262:	699b      	ldr	r3, [r3, #24]
9000a264:	0a1b      	lsrs	r3, r3, #8
9000a266:	f003 030f 	and.w	r3, r3, #15
9000a26a:	490f      	ldr	r1, [pc, #60]	@ (9000a2a8 <HAL_RCC_GetHCLKFreq+0x54>)
9000a26c:	5ccb      	ldrb	r3, [r1, r3]
9000a26e:	f003 031f 	and.w	r3, r3, #31
9000a272:	fa22 f303 	lsr.w	r3, r2, r3
9000a276:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a278:	4b0a      	ldr	r3, [pc, #40]	@ (9000a2a4 <HAL_RCC_GetHCLKFreq+0x50>)
9000a27a:	699b      	ldr	r3, [r3, #24]
9000a27c:	f003 030f 	and.w	r3, r3, #15
9000a280:	4a09      	ldr	r2, [pc, #36]	@ (9000a2a8 <HAL_RCC_GetHCLKFreq+0x54>)
9000a282:	5cd3      	ldrb	r3, [r2, r3]
9000a284:	f003 031f 	and.w	r3, r3, #31
9000a288:	687a      	ldr	r2, [r7, #4]
9000a28a:	fa22 f303 	lsr.w	r3, r2, r3
9000a28e:	4a07      	ldr	r2, [pc, #28]	@ (9000a2ac <HAL_RCC_GetHCLKFreq+0x58>)
9000a290:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000a292:	4a07      	ldr	r2, [pc, #28]	@ (9000a2b0 <HAL_RCC_GetHCLKFreq+0x5c>)
9000a294:	687b      	ldr	r3, [r7, #4]
9000a296:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
9000a298:	4b04      	ldr	r3, [pc, #16]	@ (9000a2ac <HAL_RCC_GetHCLKFreq+0x58>)
9000a29a:	681b      	ldr	r3, [r3, #0]
}
9000a29c:	4618      	mov	r0, r3
9000a29e:	3708      	adds	r7, #8
9000a2a0:	46bd      	mov	sp, r7
9000a2a2:	bd80      	pop	{r7, pc}
9000a2a4:	58024400 	.word	0x58024400
9000a2a8:	9001418c 	.word	0x9001418c
9000a2ac:	20000040 	.word	0x20000040
9000a2b0:	2000003c 	.word	0x2000003c

9000a2b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000a2b4:	b580      	push	{r7, lr}
9000a2b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000a2b8:	f7ff ffcc 	bl	9000a254 <HAL_RCC_GetHCLKFreq>
9000a2bc:	4602      	mov	r2, r0
9000a2be:	4b06      	ldr	r3, [pc, #24]	@ (9000a2d8 <HAL_RCC_GetPCLK2Freq+0x24>)
9000a2c0:	69db      	ldr	r3, [r3, #28]
9000a2c2:	0a1b      	lsrs	r3, r3, #8
9000a2c4:	f003 0307 	and.w	r3, r3, #7
9000a2c8:	4904      	ldr	r1, [pc, #16]	@ (9000a2dc <HAL_RCC_GetPCLK2Freq+0x28>)
9000a2ca:	5ccb      	ldrb	r3, [r1, r3]
9000a2cc:	f003 031f 	and.w	r3, r3, #31
9000a2d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000a2d4:	4618      	mov	r0, r3
9000a2d6:	bd80      	pop	{r7, pc}
9000a2d8:	58024400 	.word	0x58024400
9000a2dc:	9001418c 	.word	0x9001418c

9000a2e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
9000a2e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
9000a2e4:	b0ca      	sub	sp, #296	@ 0x128
9000a2e6:	af00      	add	r7, sp, #0
9000a2e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
9000a2ec:	2300      	movs	r3, #0
9000a2ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
9000a2f2:	2300      	movs	r3, #0
9000a2f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000a2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a300:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
9000a304:	2500      	movs	r5, #0
9000a306:	ea54 0305 	orrs.w	r3, r4, r5
9000a30a:	d049      	beq.n	9000a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
9000a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
9000a312:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000a316:	d02f      	beq.n	9000a378 <HAL_RCCEx_PeriphCLKConfig+0x98>
9000a318:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000a31c:	d828      	bhi.n	9000a370 <HAL_RCCEx_PeriphCLKConfig+0x90>
9000a31e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000a322:	d01a      	beq.n	9000a35a <HAL_RCCEx_PeriphCLKConfig+0x7a>
9000a324:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000a328:	d822      	bhi.n	9000a370 <HAL_RCCEx_PeriphCLKConfig+0x90>
9000a32a:	2b00      	cmp	r3, #0
9000a32c:	d003      	beq.n	9000a336 <HAL_RCCEx_PeriphCLKConfig+0x56>
9000a32e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a332:	d007      	beq.n	9000a344 <HAL_RCCEx_PeriphCLKConfig+0x64>
9000a334:	e01c      	b.n	9000a370 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a336:	4bb8      	ldr	r3, [pc, #736]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a33a:	4ab7      	ldr	r2, [pc, #732]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a33c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a340:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
9000a342:	e01a      	b.n	9000a37a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000a344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a348:	3308      	adds	r3, #8
9000a34a:	2102      	movs	r1, #2
9000a34c:	4618      	mov	r0, r3
9000a34e:	f001 f9d1 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a352:	4603      	mov	r3, r0
9000a354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
9000a358:	e00f      	b.n	9000a37a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000a35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a35e:	3328      	adds	r3, #40	@ 0x28
9000a360:	2102      	movs	r1, #2
9000a362:	4618      	mov	r0, r3
9000a364:	f001 fa78 	bl	9000b858 <RCCEx_PLL3_Config>
9000a368:	4603      	mov	r3, r0
9000a36a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
9000a36e:	e004      	b.n	9000a37a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000a370:	2301      	movs	r3, #1
9000a372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a376:	e000      	b.n	9000a37a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
9000a378:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a37a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a37e:	2b00      	cmp	r3, #0
9000a380:	d10a      	bne.n	9000a398 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000a382:	4ba5      	ldr	r3, [pc, #660]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000a386:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
9000a38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a38e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
9000a390:	4aa1      	ldr	r2, [pc, #644]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a392:	430b      	orrs	r3, r1
9000a394:	6513      	str	r3, [r2, #80]	@ 0x50
9000a396:	e003      	b.n	9000a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a39c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000a3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a3a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
9000a3ac:	f04f 0900 	mov.w	r9, #0
9000a3b0:	ea58 0309 	orrs.w	r3, r8, r9
9000a3b4:	d047      	beq.n	9000a446 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
9000a3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a3ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a3bc:	2b04      	cmp	r3, #4
9000a3be:	d82a      	bhi.n	9000a416 <HAL_RCCEx_PeriphCLKConfig+0x136>
9000a3c0:	a201      	add	r2, pc, #4	@ (adr r2, 9000a3c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
9000a3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a3c6:	bf00      	nop
9000a3c8:	9000a3dd 	.word	0x9000a3dd
9000a3cc:	9000a3eb 	.word	0x9000a3eb
9000a3d0:	9000a401 	.word	0x9000a401
9000a3d4:	9000a41f 	.word	0x9000a41f
9000a3d8:	9000a41f 	.word	0x9000a41f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a3dc:	4b8e      	ldr	r3, [pc, #568]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a3e0:	4a8d      	ldr	r2, [pc, #564]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a3e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a3e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000a3e8:	e01a      	b.n	9000a420 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000a3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a3ee:	3308      	adds	r3, #8
9000a3f0:	2100      	movs	r1, #0
9000a3f2:	4618      	mov	r0, r3
9000a3f4:	f001 f97e 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a3f8:	4603      	mov	r3, r0
9000a3fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000a3fe:	e00f      	b.n	9000a420 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000a400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a404:	3328      	adds	r3, #40	@ 0x28
9000a406:	2100      	movs	r1, #0
9000a408:	4618      	mov	r0, r3
9000a40a:	f001 fa25 	bl	9000b858 <RCCEx_PLL3_Config>
9000a40e:	4603      	mov	r3, r0
9000a410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000a414:	e004      	b.n	9000a420 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000a416:	2301      	movs	r3, #1
9000a418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a41c:	e000      	b.n	9000a420 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
9000a41e:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a424:	2b00      	cmp	r3, #0
9000a426:	d10a      	bne.n	9000a43e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000a428:	4b7b      	ldr	r3, [pc, #492]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a42a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000a42c:	f023 0107 	bic.w	r1, r3, #7
9000a430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a436:	4a78      	ldr	r2, [pc, #480]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a438:	430b      	orrs	r3, r1
9000a43a:	6513      	str	r3, [r2, #80]	@ 0x50
9000a43c:	e003      	b.n	9000a446 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a43e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000a446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a44e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
9000a452:	f04f 0b00 	mov.w	fp, #0
9000a456:	ea5a 030b 	orrs.w	r3, sl, fp
9000a45a:	d04c      	beq.n	9000a4f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
9000a45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
9000a462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000a466:	d030      	beq.n	9000a4ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
9000a468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000a46c:	d829      	bhi.n	9000a4c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
9000a46e:	2bc0      	cmp	r3, #192	@ 0xc0
9000a470:	d02d      	beq.n	9000a4ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
9000a472:	2bc0      	cmp	r3, #192	@ 0xc0
9000a474:	d825      	bhi.n	9000a4c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
9000a476:	2b80      	cmp	r3, #128	@ 0x80
9000a478:	d018      	beq.n	9000a4ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
9000a47a:	2b80      	cmp	r3, #128	@ 0x80
9000a47c:	d821      	bhi.n	9000a4c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
9000a47e:	2b00      	cmp	r3, #0
9000a480:	d002      	beq.n	9000a488 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
9000a482:	2b40      	cmp	r3, #64	@ 0x40
9000a484:	d007      	beq.n	9000a496 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
9000a486:	e01c      	b.n	9000a4c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a488:	4b63      	ldr	r3, [pc, #396]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a48c:	4a62      	ldr	r2, [pc, #392]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a48e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
9000a494:	e01c      	b.n	9000a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000a496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a49a:	3308      	adds	r3, #8
9000a49c:	2100      	movs	r1, #0
9000a49e:	4618      	mov	r0, r3
9000a4a0:	f001 f928 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a4a4:	4603      	mov	r3, r0
9000a4a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
9000a4aa:	e011      	b.n	9000a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000a4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a4b0:	3328      	adds	r3, #40	@ 0x28
9000a4b2:	2100      	movs	r1, #0
9000a4b4:	4618      	mov	r0, r3
9000a4b6:	f001 f9cf 	bl	9000b858 <RCCEx_PLL3_Config>
9000a4ba:	4603      	mov	r3, r0
9000a4bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
9000a4c0:	e006      	b.n	9000a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000a4c2:	2301      	movs	r3, #1
9000a4c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a4c8:	e002      	b.n	9000a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
9000a4ca:	bf00      	nop
9000a4cc:	e000      	b.n	9000a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
9000a4ce:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a4d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a4d4:	2b00      	cmp	r3, #0
9000a4d6:	d10a      	bne.n	9000a4ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000a4d8:	4b4f      	ldr	r3, [pc, #316]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a4da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000a4dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
9000a4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a4e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
9000a4e6:	4a4c      	ldr	r2, [pc, #304]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a4e8:	430b      	orrs	r3, r1
9000a4ea:	6513      	str	r3, [r2, #80]	@ 0x50
9000a4ec:	e003      	b.n	9000a4f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a4ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a4f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000a4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a4fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
9000a502:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
9000a506:	2300      	movs	r3, #0
9000a508:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
9000a50c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
9000a510:	460b      	mov	r3, r1
9000a512:	4313      	orrs	r3, r2
9000a514:	d053      	beq.n	9000a5be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
9000a516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a51a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
9000a51e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
9000a522:	d035      	beq.n	9000a590 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
9000a524:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
9000a528:	d82e      	bhi.n	9000a588 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000a52a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
9000a52e:	d031      	beq.n	9000a594 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
9000a530:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
9000a534:	d828      	bhi.n	9000a588 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000a536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
9000a53a:	d01a      	beq.n	9000a572 <HAL_RCCEx_PeriphCLKConfig+0x292>
9000a53c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
9000a540:	d822      	bhi.n	9000a588 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000a542:	2b00      	cmp	r3, #0
9000a544:	d003      	beq.n	9000a54e <HAL_RCCEx_PeriphCLKConfig+0x26e>
9000a546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000a54a:	d007      	beq.n	9000a55c <HAL_RCCEx_PeriphCLKConfig+0x27c>
9000a54c:	e01c      	b.n	9000a588 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a54e:	4b32      	ldr	r3, [pc, #200]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a552:	4a31      	ldr	r2, [pc, #196]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000a55a:	e01c      	b.n	9000a596 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000a55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a560:	3308      	adds	r3, #8
9000a562:	2100      	movs	r1, #0
9000a564:	4618      	mov	r0, r3
9000a566:	f001 f8c5 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a56a:	4603      	mov	r3, r0
9000a56c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
9000a570:	e011      	b.n	9000a596 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000a572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a576:	3328      	adds	r3, #40	@ 0x28
9000a578:	2100      	movs	r1, #0
9000a57a:	4618      	mov	r0, r3
9000a57c:	f001 f96c 	bl	9000b858 <RCCEx_PLL3_Config>
9000a580:	4603      	mov	r3, r0
9000a582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000a586:	e006      	b.n	9000a596 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
9000a588:	2301      	movs	r3, #1
9000a58a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a58e:	e002      	b.n	9000a596 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
9000a590:	bf00      	nop
9000a592:	e000      	b.n	9000a596 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
9000a594:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a59a:	2b00      	cmp	r3, #0
9000a59c:	d10b      	bne.n	9000a5b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000a59e:	4b1e      	ldr	r3, [pc, #120]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a5a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a5a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
9000a5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a5aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
9000a5ae:	4a1a      	ldr	r2, [pc, #104]	@ (9000a618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000a5b0:	430b      	orrs	r3, r1
9000a5b2:	6593      	str	r3, [r2, #88]	@ 0x58
9000a5b4:	e003      	b.n	9000a5be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a5ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000a5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a5c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
9000a5ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
9000a5ce:	2300      	movs	r3, #0
9000a5d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
9000a5d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
9000a5d8:	460b      	mov	r3, r1
9000a5da:	4313      	orrs	r3, r2
9000a5dc:	d056      	beq.n	9000a68c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
9000a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a5e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
9000a5e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
9000a5ea:	d038      	beq.n	9000a65e <HAL_RCCEx_PeriphCLKConfig+0x37e>
9000a5ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
9000a5f0:	d831      	bhi.n	9000a656 <HAL_RCCEx_PeriphCLKConfig+0x376>
9000a5f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
9000a5f6:	d034      	beq.n	9000a662 <HAL_RCCEx_PeriphCLKConfig+0x382>
9000a5f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
9000a5fc:	d82b      	bhi.n	9000a656 <HAL_RCCEx_PeriphCLKConfig+0x376>
9000a5fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000a602:	d01d      	beq.n	9000a640 <HAL_RCCEx_PeriphCLKConfig+0x360>
9000a604:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000a608:	d825      	bhi.n	9000a656 <HAL_RCCEx_PeriphCLKConfig+0x376>
9000a60a:	2b00      	cmp	r3, #0
9000a60c:	d006      	beq.n	9000a61c <HAL_RCCEx_PeriphCLKConfig+0x33c>
9000a60e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
9000a612:	d00a      	beq.n	9000a62a <HAL_RCCEx_PeriphCLKConfig+0x34a>
9000a614:	e01f      	b.n	9000a656 <HAL_RCCEx_PeriphCLKConfig+0x376>
9000a616:	bf00      	nop
9000a618:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a61c:	4ba2      	ldr	r3, [pc, #648]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a620:	4aa1      	ldr	r2, [pc, #644]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000a628:	e01c      	b.n	9000a664 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a62e:	3308      	adds	r3, #8
9000a630:	2100      	movs	r1, #0
9000a632:	4618      	mov	r0, r3
9000a634:	f001 f85e 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a638:	4603      	mov	r3, r0
9000a63a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
9000a63e:	e011      	b.n	9000a664 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a644:	3328      	adds	r3, #40	@ 0x28
9000a646:	2100      	movs	r1, #0
9000a648:	4618      	mov	r0, r3
9000a64a:	f001 f905 	bl	9000b858 <RCCEx_PLL3_Config>
9000a64e:	4603      	mov	r3, r0
9000a650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000a654:	e006      	b.n	9000a664 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
9000a656:	2301      	movs	r3, #1
9000a658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a65c:	e002      	b.n	9000a664 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
9000a65e:	bf00      	nop
9000a660:	e000      	b.n	9000a664 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
9000a662:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a668:	2b00      	cmp	r3, #0
9000a66a:	d10b      	bne.n	9000a684 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000a66c:	4b8e      	ldr	r3, [pc, #568]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a66e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a670:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
9000a674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a678:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
9000a67c:	4a8a      	ldr	r2, [pc, #552]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a67e:	430b      	orrs	r3, r1
9000a680:	6593      	str	r3, [r2, #88]	@ 0x58
9000a682:	e003      	b.n	9000a68c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000a68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a690:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a694:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
9000a698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
9000a69c:	2300      	movs	r3, #0
9000a69e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
9000a6a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
9000a6a6:	460b      	mov	r3, r1
9000a6a8:	4313      	orrs	r3, r2
9000a6aa:	d03a      	beq.n	9000a722 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
9000a6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a6b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000a6b2:	2b30      	cmp	r3, #48	@ 0x30
9000a6b4:	d01f      	beq.n	9000a6f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
9000a6b6:	2b30      	cmp	r3, #48	@ 0x30
9000a6b8:	d819      	bhi.n	9000a6ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
9000a6ba:	2b20      	cmp	r3, #32
9000a6bc:	d00c      	beq.n	9000a6d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000a6be:	2b20      	cmp	r3, #32
9000a6c0:	d815      	bhi.n	9000a6ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
9000a6c2:	2b00      	cmp	r3, #0
9000a6c4:	d019      	beq.n	9000a6fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
9000a6c6:	2b10      	cmp	r3, #16
9000a6c8:	d111      	bne.n	9000a6ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a6ca:	4b77      	ldr	r3, [pc, #476]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a6ce:	4a76      	ldr	r2, [pc, #472]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a6d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a6d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
9000a6d6:	e011      	b.n	9000a6fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000a6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a6dc:	3308      	adds	r3, #8
9000a6de:	2102      	movs	r1, #2
9000a6e0:	4618      	mov	r0, r3
9000a6e2:	f001 f807 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a6e6:	4603      	mov	r3, r0
9000a6e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
9000a6ec:	e006      	b.n	9000a6fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
9000a6ee:	2301      	movs	r3, #1
9000a6f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a6f4:	e002      	b.n	9000a6fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000a6f6:	bf00      	nop
9000a6f8:	e000      	b.n	9000a6fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000a6fa:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a700:	2b00      	cmp	r3, #0
9000a702:	d10a      	bne.n	9000a71a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000a704:	4b68      	ldr	r3, [pc, #416]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000a708:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
9000a70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000a712:	4a65      	ldr	r2, [pc, #404]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a714:	430b      	orrs	r3, r1
9000a716:	64d3      	str	r3, [r2, #76]	@ 0x4c
9000a718:	e003      	b.n	9000a722 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a71a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a71e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000a722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a726:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a72a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
9000a72e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
9000a732:	2300      	movs	r3, #0
9000a734:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
9000a738:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
9000a73c:	460b      	mov	r3, r1
9000a73e:	4313      	orrs	r3, r2
9000a740:	d051      	beq.n	9000a7e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
9000a742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
9000a748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000a74c:	d035      	beq.n	9000a7ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
9000a74e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000a752:	d82e      	bhi.n	9000a7b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
9000a754:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
9000a758:	d031      	beq.n	9000a7be <HAL_RCCEx_PeriphCLKConfig+0x4de>
9000a75a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
9000a75e:	d828      	bhi.n	9000a7b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
9000a760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
9000a764:	d01a      	beq.n	9000a79c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
9000a766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
9000a76a:	d822      	bhi.n	9000a7b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
9000a76c:	2b00      	cmp	r3, #0
9000a76e:	d003      	beq.n	9000a778 <HAL_RCCEx_PeriphCLKConfig+0x498>
9000a770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000a774:	d007      	beq.n	9000a786 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000a776:	e01c      	b.n	9000a7b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a778:	4b4b      	ldr	r3, [pc, #300]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a77c:	4a4a      	ldr	r2, [pc, #296]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a77e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
9000a784:	e01c      	b.n	9000a7c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000a786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a78a:	3308      	adds	r3, #8
9000a78c:	2100      	movs	r1, #0
9000a78e:	4618      	mov	r0, r3
9000a790:	f000 ffb0 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a794:	4603      	mov	r3, r0
9000a796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
9000a79a:	e011      	b.n	9000a7c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000a79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a7a0:	3328      	adds	r3, #40	@ 0x28
9000a7a2:	2100      	movs	r1, #0
9000a7a4:	4618      	mov	r0, r3
9000a7a6:	f001 f857 	bl	9000b858 <RCCEx_PLL3_Config>
9000a7aa:	4603      	mov	r3, r0
9000a7ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
9000a7b0:	e006      	b.n	9000a7c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000a7b2:	2301      	movs	r3, #1
9000a7b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a7b8:	e002      	b.n	9000a7c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
9000a7ba:	bf00      	nop
9000a7bc:	e000      	b.n	9000a7c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
9000a7be:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a7c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a7c4:	2b00      	cmp	r3, #0
9000a7c6:	d10a      	bne.n	9000a7de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000a7c8:	4b37      	ldr	r3, [pc, #220]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a7ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000a7cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
9000a7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a7d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
9000a7d6:	4a34      	ldr	r2, [pc, #208]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a7d8:	430b      	orrs	r3, r1
9000a7da:	6513      	str	r3, [r2, #80]	@ 0x50
9000a7dc:	e003      	b.n	9000a7e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a7de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a7e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000a7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a7ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
9000a7f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
9000a7f6:	2300      	movs	r3, #0
9000a7f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
9000a7fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
9000a800:	460b      	mov	r3, r1
9000a802:	4313      	orrs	r3, r2
9000a804:	d056      	beq.n	9000a8b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
9000a806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a80a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000a80c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000a810:	d033      	beq.n	9000a87a <HAL_RCCEx_PeriphCLKConfig+0x59a>
9000a812:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000a816:	d82c      	bhi.n	9000a872 <HAL_RCCEx_PeriphCLKConfig+0x592>
9000a818:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000a81c:	d02f      	beq.n	9000a87e <HAL_RCCEx_PeriphCLKConfig+0x59e>
9000a81e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000a822:	d826      	bhi.n	9000a872 <HAL_RCCEx_PeriphCLKConfig+0x592>
9000a824:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
9000a828:	d02b      	beq.n	9000a882 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
9000a82a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
9000a82e:	d820      	bhi.n	9000a872 <HAL_RCCEx_PeriphCLKConfig+0x592>
9000a830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000a834:	d012      	beq.n	9000a85c <HAL_RCCEx_PeriphCLKConfig+0x57c>
9000a836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000a83a:	d81a      	bhi.n	9000a872 <HAL_RCCEx_PeriphCLKConfig+0x592>
9000a83c:	2b00      	cmp	r3, #0
9000a83e:	d022      	beq.n	9000a886 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
9000a840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a844:	d115      	bne.n	9000a872 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000a846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a84a:	3308      	adds	r3, #8
9000a84c:	2101      	movs	r1, #1
9000a84e:	4618      	mov	r0, r3
9000a850:	f000 ff50 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a854:	4603      	mov	r3, r0
9000a856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000a85a:	e015      	b.n	9000a888 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000a85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a860:	3328      	adds	r3, #40	@ 0x28
9000a862:	2101      	movs	r1, #1
9000a864:	4618      	mov	r0, r3
9000a866:	f000 fff7 	bl	9000b858 <RCCEx_PLL3_Config>
9000a86a:	4603      	mov	r3, r0
9000a86c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000a870:	e00a      	b.n	9000a888 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000a872:	2301      	movs	r3, #1
9000a874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a878:	e006      	b.n	9000a888 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000a87a:	bf00      	nop
9000a87c:	e004      	b.n	9000a888 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000a87e:	bf00      	nop
9000a880:	e002      	b.n	9000a888 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000a882:	bf00      	nop
9000a884:	e000      	b.n	9000a888 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000a886:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a88c:	2b00      	cmp	r3, #0
9000a88e:	d10d      	bne.n	9000a8ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000a890:	4b05      	ldr	r3, [pc, #20]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000a894:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
9000a898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a89c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000a89e:	4a02      	ldr	r2, [pc, #8]	@ (9000a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000a8a0:	430b      	orrs	r3, r1
9000a8a2:	6513      	str	r3, [r2, #80]	@ 0x50
9000a8a4:	e006      	b.n	9000a8b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
9000a8a6:	bf00      	nop
9000a8a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a8b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a8bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
9000a8c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
9000a8c4:	2300      	movs	r3, #0
9000a8c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
9000a8ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
9000a8ce:	460b      	mov	r3, r1
9000a8d0:	4313      	orrs	r3, r2
9000a8d2:	d055      	beq.n	9000a980 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
9000a8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a8d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
9000a8dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000a8e0:	d033      	beq.n	9000a94a <HAL_RCCEx_PeriphCLKConfig+0x66a>
9000a8e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000a8e6:	d82c      	bhi.n	9000a942 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000a8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000a8ec:	d02f      	beq.n	9000a94e <HAL_RCCEx_PeriphCLKConfig+0x66e>
9000a8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000a8f2:	d826      	bhi.n	9000a942 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000a8f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000a8f8:	d02b      	beq.n	9000a952 <HAL_RCCEx_PeriphCLKConfig+0x672>
9000a8fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000a8fe:	d820      	bhi.n	9000a942 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000a900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000a904:	d012      	beq.n	9000a92c <HAL_RCCEx_PeriphCLKConfig+0x64c>
9000a906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000a90a:	d81a      	bhi.n	9000a942 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000a90c:	2b00      	cmp	r3, #0
9000a90e:	d022      	beq.n	9000a956 <HAL_RCCEx_PeriphCLKConfig+0x676>
9000a910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000a914:	d115      	bne.n	9000a942 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000a916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a91a:	3308      	adds	r3, #8
9000a91c:	2101      	movs	r1, #1
9000a91e:	4618      	mov	r0, r3
9000a920:	f000 fee8 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a924:	4603      	mov	r3, r0
9000a926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000a92a:	e015      	b.n	9000a958 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000a92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a930:	3328      	adds	r3, #40	@ 0x28
9000a932:	2101      	movs	r1, #1
9000a934:	4618      	mov	r0, r3
9000a936:	f000 ff8f 	bl	9000b858 <RCCEx_PLL3_Config>
9000a93a:	4603      	mov	r3, r0
9000a93c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000a940:	e00a      	b.n	9000a958 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
9000a942:	2301      	movs	r3, #1
9000a944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a948:	e006      	b.n	9000a958 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000a94a:	bf00      	nop
9000a94c:	e004      	b.n	9000a958 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000a94e:	bf00      	nop
9000a950:	e002      	b.n	9000a958 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000a952:	bf00      	nop
9000a954:	e000      	b.n	9000a958 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000a956:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a95c:	2b00      	cmp	r3, #0
9000a95e:	d10b      	bne.n	9000a978 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000a960:	4ba3      	ldr	r3, [pc, #652]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000a962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a964:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
9000a968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a96c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
9000a970:	4a9f      	ldr	r2, [pc, #636]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000a972:	430b      	orrs	r3, r1
9000a974:	6593      	str	r3, [r2, #88]	@ 0x58
9000a976:	e003      	b.n	9000a980 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000a978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a97c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000a980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a984:	e9d3 2300 	ldrd	r2, r3, [r3]
9000a988:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
9000a98c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
9000a990:	2300      	movs	r3, #0
9000a992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
9000a996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
9000a99a:	460b      	mov	r3, r1
9000a99c:	4313      	orrs	r3, r2
9000a99e:	d037      	beq.n	9000aa10 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
9000a9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a9a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000a9a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000a9aa:	d00e      	beq.n	9000a9ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
9000a9ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000a9b0:	d816      	bhi.n	9000a9e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
9000a9b2:	2b00      	cmp	r3, #0
9000a9b4:	d018      	beq.n	9000a9e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
9000a9b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000a9ba:	d111      	bne.n	9000a9e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a9bc:	4b8c      	ldr	r3, [pc, #560]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000a9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000a9c0:	4a8b      	ldr	r2, [pc, #556]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000a9c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000a9c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
9000a9c8:	e00f      	b.n	9000a9ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000a9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a9ce:	3308      	adds	r3, #8
9000a9d0:	2101      	movs	r1, #1
9000a9d2:	4618      	mov	r0, r3
9000a9d4:	f000 fe8e 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000a9d8:	4603      	mov	r3, r0
9000a9da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
9000a9de:	e004      	b.n	9000a9ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000a9e0:	2301      	movs	r3, #1
9000a9e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000a9e6:	e000      	b.n	9000a9ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
9000a9e8:	bf00      	nop
    }

    if (ret == HAL_OK)
9000a9ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000a9ee:	2b00      	cmp	r3, #0
9000a9f0:	d10a      	bne.n	9000aa08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000a9f2:	4b7f      	ldr	r3, [pc, #508]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000a9f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000a9f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
9000a9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000a9fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000aa00:	4a7b      	ldr	r2, [pc, #492]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000aa02:	430b      	orrs	r3, r1
9000aa04:	6513      	str	r3, [r2, #80]	@ 0x50
9000aa06:	e003      	b.n	9000aa10 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000aa08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000aa0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000aa10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
9000aa18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
9000aa1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
9000aa20:	2300      	movs	r3, #0
9000aa22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
9000aa26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
9000aa2a:	460b      	mov	r3, r1
9000aa2c:	4313      	orrs	r3, r2
9000aa2e:	d039      	beq.n	9000aaa4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
9000aa30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000aa34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000aa36:	2b03      	cmp	r3, #3
9000aa38:	d81c      	bhi.n	9000aa74 <HAL_RCCEx_PeriphCLKConfig+0x794>
9000aa3a:	a201      	add	r2, pc, #4	@ (adr r2, 9000aa40 <HAL_RCCEx_PeriphCLKConfig+0x760>)
9000aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000aa40:	9000aa7d 	.word	0x9000aa7d
9000aa44:	9000aa51 	.word	0x9000aa51
9000aa48:	9000aa5f 	.word	0x9000aa5f
9000aa4c:	9000aa7d 	.word	0x9000aa7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000aa50:	4b67      	ldr	r3, [pc, #412]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000aa52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000aa54:	4a66      	ldr	r2, [pc, #408]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000aa56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000aa5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
9000aa5c:	e00f      	b.n	9000aa7e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000aa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000aa62:	3308      	adds	r3, #8
9000aa64:	2102      	movs	r1, #2
9000aa66:	4618      	mov	r0, r3
9000aa68:	f000 fe44 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000aa6c:	4603      	mov	r3, r0
9000aa6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
9000aa72:	e004      	b.n	9000aa7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
9000aa74:	2301      	movs	r3, #1
9000aa76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000aa7a:	e000      	b.n	9000aa7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
9000aa7c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000aa7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000aa82:	2b00      	cmp	r3, #0
9000aa84:	d10a      	bne.n	9000aa9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000aa86:	4b5a      	ldr	r3, [pc, #360]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000aa88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000aa8a:	f023 0103 	bic.w	r1, r3, #3
9000aa8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000aa92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000aa94:	4a56      	ldr	r2, [pc, #344]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000aa96:	430b      	orrs	r3, r1
9000aa98:	64d3      	str	r3, [r2, #76]	@ 0x4c
9000aa9a:	e003      	b.n	9000aaa4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000aa9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000aaa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000aaa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
9000aaac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
9000aab0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
9000aab4:	2300      	movs	r3, #0
9000aab6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
9000aaba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
9000aabe:	460b      	mov	r3, r1
9000aac0:	4313      	orrs	r3, r2
9000aac2:	f000 809f 	beq.w	9000ac04 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000aac6:	4b4b      	ldr	r3, [pc, #300]	@ (9000abf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000aac8:	681b      	ldr	r3, [r3, #0]
9000aaca:	4a4a      	ldr	r2, [pc, #296]	@ (9000abf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000aacc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000aad0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000aad2:	f7fa f873 	bl	90004bbc <HAL_GetTick>
9000aad6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000aada:	e00b      	b.n	9000aaf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000aadc:	f7fa f86e 	bl	90004bbc <HAL_GetTick>
9000aae0:	4602      	mov	r2, r0
9000aae2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
9000aae6:	1ad3      	subs	r3, r2, r3
9000aae8:	2b64      	cmp	r3, #100	@ 0x64
9000aaea:	d903      	bls.n	9000aaf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
9000aaec:	2303      	movs	r3, #3
9000aaee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000aaf2:	e005      	b.n	9000ab00 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000aaf4:	4b3f      	ldr	r3, [pc, #252]	@ (9000abf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000aaf6:	681b      	ldr	r3, [r3, #0]
9000aaf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000aafc:	2b00      	cmp	r3, #0
9000aafe:	d0ed      	beq.n	9000aadc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
9000ab00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000ab04:	2b00      	cmp	r3, #0
9000ab06:	d179      	bne.n	9000abfc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000ab08:	4b39      	ldr	r3, [pc, #228]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000ab0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
9000ab0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ab10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000ab14:	4053      	eors	r3, r2
9000ab16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000ab1a:	2b00      	cmp	r3, #0
9000ab1c:	d015      	beq.n	9000ab4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000ab1e:	4b34      	ldr	r3, [pc, #208]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000ab20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000ab22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000ab26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
9000ab2a:	4b31      	ldr	r3, [pc, #196]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000ab2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000ab2e:	4a30      	ldr	r2, [pc, #192]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000ab30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000ab34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000ab36:	4b2e      	ldr	r3, [pc, #184]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000ab38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000ab3a:	4a2d      	ldr	r2, [pc, #180]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000ab3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000ab40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
9000ab42:	4a2b      	ldr	r2, [pc, #172]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000ab44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
9000ab48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ab4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000ab52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000ab56:	d118      	bne.n	9000ab8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000ab58:	f7fa f830 	bl	90004bbc <HAL_GetTick>
9000ab5c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000ab60:	e00d      	b.n	9000ab7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000ab62:	f7fa f82b 	bl	90004bbc <HAL_GetTick>
9000ab66:	4602      	mov	r2, r0
9000ab68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
9000ab6c:	1ad2      	subs	r2, r2, r3
9000ab6e:	f241 3388 	movw	r3, #5000	@ 0x1388
9000ab72:	429a      	cmp	r2, r3
9000ab74:	d903      	bls.n	9000ab7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
9000ab76:	2303      	movs	r3, #3
9000ab78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
9000ab7c:	e005      	b.n	9000ab8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000ab7e:	4b1c      	ldr	r3, [pc, #112]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000ab80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000ab82:	f003 0302 	and.w	r3, r3, #2
9000ab86:	2b00      	cmp	r3, #0
9000ab88:	d0eb      	beq.n	9000ab62 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
9000ab8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000ab8e:	2b00      	cmp	r3, #0
9000ab90:	d129      	bne.n	9000abe6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000ab92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ab96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000ab9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000ab9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000aba2:	d10e      	bne.n	9000abc2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
9000aba4:	4b12      	ldr	r3, [pc, #72]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000aba6:	691b      	ldr	r3, [r3, #16]
9000aba8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
9000abac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000abb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000abb4:	091a      	lsrs	r2, r3, #4
9000abb6:	4b10      	ldr	r3, [pc, #64]	@ (9000abf8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
9000abb8:	4013      	ands	r3, r2
9000abba:	4a0d      	ldr	r2, [pc, #52]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000abbc:	430b      	orrs	r3, r1
9000abbe:	6113      	str	r3, [r2, #16]
9000abc0:	e005      	b.n	9000abce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000abc2:	4b0b      	ldr	r3, [pc, #44]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000abc4:	691b      	ldr	r3, [r3, #16]
9000abc6:	4a0a      	ldr	r2, [pc, #40]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000abc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
9000abcc:	6113      	str	r3, [r2, #16]
9000abce:	4b08      	ldr	r3, [pc, #32]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000abd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
9000abd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000abd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000abda:	f3c3 030b 	ubfx	r3, r3, #0, #12
9000abde:	4a04      	ldr	r2, [pc, #16]	@ (9000abf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000abe0:	430b      	orrs	r3, r1
9000abe2:	6713      	str	r3, [r2, #112]	@ 0x70
9000abe4:	e00e      	b.n	9000ac04 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
9000abe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000abea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
9000abee:	e009      	b.n	9000ac04 <HAL_RCCEx_PeriphCLKConfig+0x924>
9000abf0:	58024400 	.word	0x58024400
9000abf4:	58024800 	.word	0x58024800
9000abf8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
9000abfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000ac00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000ac04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
9000ac0c:	f002 0301 	and.w	r3, r2, #1
9000ac10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
9000ac14:	2300      	movs	r3, #0
9000ac16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
9000ac1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
9000ac1e:	460b      	mov	r3, r1
9000ac20:	4313      	orrs	r3, r2
9000ac22:	f000 8089 	beq.w	9000ad38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
9000ac26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ac2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
9000ac2c:	2b28      	cmp	r3, #40	@ 0x28
9000ac2e:	d86b      	bhi.n	9000ad08 <HAL_RCCEx_PeriphCLKConfig+0xa28>
9000ac30:	a201      	add	r2, pc, #4	@ (adr r2, 9000ac38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000ac32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ac36:	bf00      	nop
9000ac38:	9000ad11 	.word	0x9000ad11
9000ac3c:	9000ad09 	.word	0x9000ad09
9000ac40:	9000ad09 	.word	0x9000ad09
9000ac44:	9000ad09 	.word	0x9000ad09
9000ac48:	9000ad09 	.word	0x9000ad09
9000ac4c:	9000ad09 	.word	0x9000ad09
9000ac50:	9000ad09 	.word	0x9000ad09
9000ac54:	9000ad09 	.word	0x9000ad09
9000ac58:	9000acdd 	.word	0x9000acdd
9000ac5c:	9000ad09 	.word	0x9000ad09
9000ac60:	9000ad09 	.word	0x9000ad09
9000ac64:	9000ad09 	.word	0x9000ad09
9000ac68:	9000ad09 	.word	0x9000ad09
9000ac6c:	9000ad09 	.word	0x9000ad09
9000ac70:	9000ad09 	.word	0x9000ad09
9000ac74:	9000ad09 	.word	0x9000ad09
9000ac78:	9000acf3 	.word	0x9000acf3
9000ac7c:	9000ad09 	.word	0x9000ad09
9000ac80:	9000ad09 	.word	0x9000ad09
9000ac84:	9000ad09 	.word	0x9000ad09
9000ac88:	9000ad09 	.word	0x9000ad09
9000ac8c:	9000ad09 	.word	0x9000ad09
9000ac90:	9000ad09 	.word	0x9000ad09
9000ac94:	9000ad09 	.word	0x9000ad09
9000ac98:	9000ad11 	.word	0x9000ad11
9000ac9c:	9000ad09 	.word	0x9000ad09
9000aca0:	9000ad09 	.word	0x9000ad09
9000aca4:	9000ad09 	.word	0x9000ad09
9000aca8:	9000ad09 	.word	0x9000ad09
9000acac:	9000ad09 	.word	0x9000ad09
9000acb0:	9000ad09 	.word	0x9000ad09
9000acb4:	9000ad09 	.word	0x9000ad09
9000acb8:	9000ad11 	.word	0x9000ad11
9000acbc:	9000ad09 	.word	0x9000ad09
9000acc0:	9000ad09 	.word	0x9000ad09
9000acc4:	9000ad09 	.word	0x9000ad09
9000acc8:	9000ad09 	.word	0x9000ad09
9000accc:	9000ad09 	.word	0x9000ad09
9000acd0:	9000ad09 	.word	0x9000ad09
9000acd4:	9000ad09 	.word	0x9000ad09
9000acd8:	9000ad11 	.word	0x9000ad11
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ace0:	3308      	adds	r3, #8
9000ace2:	2101      	movs	r1, #1
9000ace4:	4618      	mov	r0, r3
9000ace6:	f000 fd05 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000acea:	4603      	mov	r3, r0
9000acec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000acf0:	e00f      	b.n	9000ad12 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000acf6:	3328      	adds	r3, #40	@ 0x28
9000acf8:	2101      	movs	r1, #1
9000acfa:	4618      	mov	r0, r3
9000acfc:	f000 fdac 	bl	9000b858 <RCCEx_PLL3_Config>
9000ad00:	4603      	mov	r3, r0
9000ad02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000ad06:	e004      	b.n	9000ad12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000ad08:	2301      	movs	r3, #1
9000ad0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000ad0e:	e000      	b.n	9000ad12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
9000ad10:	bf00      	nop
    }

    if (ret == HAL_OK)
9000ad12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000ad16:	2b00      	cmp	r3, #0
9000ad18:	d10a      	bne.n	9000ad30 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000ad1a:	4bbf      	ldr	r3, [pc, #764]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000ad1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ad1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000ad22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ad26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
9000ad28:	4abb      	ldr	r2, [pc, #748]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000ad2a:	430b      	orrs	r3, r1
9000ad2c:	6553      	str	r3, [r2, #84]	@ 0x54
9000ad2e:	e003      	b.n	9000ad38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000ad30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000ad34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000ad38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
9000ad40:	f002 0302 	and.w	r3, r2, #2
9000ad44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000ad48:	2300      	movs	r3, #0
9000ad4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000ad4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
9000ad52:	460b      	mov	r3, r1
9000ad54:	4313      	orrs	r3, r2
9000ad56:	d041      	beq.n	9000addc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
9000ad58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ad5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
9000ad5e:	2b05      	cmp	r3, #5
9000ad60:	d824      	bhi.n	9000adac <HAL_RCCEx_PeriphCLKConfig+0xacc>
9000ad62:	a201      	add	r2, pc, #4	@ (adr r2, 9000ad68 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
9000ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ad68:	9000adb5 	.word	0x9000adb5
9000ad6c:	9000ad81 	.word	0x9000ad81
9000ad70:	9000ad97 	.word	0x9000ad97
9000ad74:	9000adb5 	.word	0x9000adb5
9000ad78:	9000adb5 	.word	0x9000adb5
9000ad7c:	9000adb5 	.word	0x9000adb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000ad80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ad84:	3308      	adds	r3, #8
9000ad86:	2101      	movs	r1, #1
9000ad88:	4618      	mov	r0, r3
9000ad8a:	f000 fcb3 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000ad8e:	4603      	mov	r3, r0
9000ad90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
9000ad94:	e00f      	b.n	9000adb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000ad96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ad9a:	3328      	adds	r3, #40	@ 0x28
9000ad9c:	2101      	movs	r1, #1
9000ad9e:	4618      	mov	r0, r3
9000ada0:	f000 fd5a 	bl	9000b858 <RCCEx_PLL3_Config>
9000ada4:	4603      	mov	r3, r0
9000ada6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
9000adaa:	e004      	b.n	9000adb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000adac:	2301      	movs	r3, #1
9000adae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000adb2:	e000      	b.n	9000adb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
9000adb4:	bf00      	nop
    }

    if (ret == HAL_OK)
9000adb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000adba:	2b00      	cmp	r3, #0
9000adbc:	d10a      	bne.n	9000add4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000adbe:	4b96      	ldr	r3, [pc, #600]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000adc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000adc2:	f023 0107 	bic.w	r1, r3, #7
9000adc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000adca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
9000adcc:	4a92      	ldr	r2, [pc, #584]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000adce:	430b      	orrs	r3, r1
9000add0:	6553      	str	r3, [r2, #84]	@ 0x54
9000add2:	e003      	b.n	9000addc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000add4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000add8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000addc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
9000ade4:	f002 0304 	and.w	r3, r2, #4
9000ade8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
9000adec:	2300      	movs	r3, #0
9000adee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
9000adf2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
9000adf6:	460b      	mov	r3, r1
9000adf8:	4313      	orrs	r3, r2
9000adfa:	d044      	beq.n	9000ae86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000adfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ae00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000ae04:	2b05      	cmp	r3, #5
9000ae06:	d825      	bhi.n	9000ae54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
9000ae08:	a201      	add	r2, pc, #4	@ (adr r2, 9000ae10 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
9000ae0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ae0e:	bf00      	nop
9000ae10:	9000ae5d 	.word	0x9000ae5d
9000ae14:	9000ae29 	.word	0x9000ae29
9000ae18:	9000ae3f 	.word	0x9000ae3f
9000ae1c:	9000ae5d 	.word	0x9000ae5d
9000ae20:	9000ae5d 	.word	0x9000ae5d
9000ae24:	9000ae5d 	.word	0x9000ae5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000ae28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ae2c:	3308      	adds	r3, #8
9000ae2e:	2101      	movs	r1, #1
9000ae30:	4618      	mov	r0, r3
9000ae32:	f000 fc5f 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000ae36:	4603      	mov	r3, r0
9000ae38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
9000ae3c:	e00f      	b.n	9000ae5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ae42:	3328      	adds	r3, #40	@ 0x28
9000ae44:	2101      	movs	r1, #1
9000ae46:	4618      	mov	r0, r3
9000ae48:	f000 fd06 	bl	9000b858 <RCCEx_PLL3_Config>
9000ae4c:	4603      	mov	r3, r0
9000ae4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
9000ae52:	e004      	b.n	9000ae5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000ae54:	2301      	movs	r3, #1
9000ae56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000ae5a:	e000      	b.n	9000ae5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
9000ae5c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000ae5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000ae62:	2b00      	cmp	r3, #0
9000ae64:	d10b      	bne.n	9000ae7e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000ae66:	4b6c      	ldr	r3, [pc, #432]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000ae68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000ae6a:	f023 0107 	bic.w	r1, r3, #7
9000ae6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ae72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000ae76:	4a68      	ldr	r2, [pc, #416]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000ae78:	430b      	orrs	r3, r1
9000ae7a:	6593      	str	r3, [r2, #88]	@ 0x58
9000ae7c:	e003      	b.n	9000ae86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000ae7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000ae82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000ae86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000ae8e:	f002 0320 	and.w	r3, r2, #32
9000ae92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
9000ae96:	2300      	movs	r3, #0
9000ae98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
9000ae9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
9000aea0:	460b      	mov	r3, r1
9000aea2:	4313      	orrs	r3, r2
9000aea4:	d055      	beq.n	9000af52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
9000aea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000aeaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000aeae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000aeb2:	d033      	beq.n	9000af1c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
9000aeb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000aeb8:	d82c      	bhi.n	9000af14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000aeba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000aebe:	d02f      	beq.n	9000af20 <HAL_RCCEx_PeriphCLKConfig+0xc40>
9000aec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000aec4:	d826      	bhi.n	9000af14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000aec6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000aeca:	d02b      	beq.n	9000af24 <HAL_RCCEx_PeriphCLKConfig+0xc44>
9000aecc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000aed0:	d820      	bhi.n	9000af14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000aed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000aed6:	d012      	beq.n	9000aefe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
9000aed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000aedc:	d81a      	bhi.n	9000af14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000aede:	2b00      	cmp	r3, #0
9000aee0:	d022      	beq.n	9000af28 <HAL_RCCEx_PeriphCLKConfig+0xc48>
9000aee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000aee6:	d115      	bne.n	9000af14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000aee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000aeec:	3308      	adds	r3, #8
9000aeee:	2100      	movs	r1, #0
9000aef0:	4618      	mov	r0, r3
9000aef2:	f000 fbff 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000aef6:	4603      	mov	r3, r0
9000aef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000aefc:	e015      	b.n	9000af2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000aefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000af02:	3328      	adds	r3, #40	@ 0x28
9000af04:	2102      	movs	r1, #2
9000af06:	4618      	mov	r0, r3
9000af08:	f000 fca6 	bl	9000b858 <RCCEx_PLL3_Config>
9000af0c:	4603      	mov	r3, r0
9000af0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000af12:	e00a      	b.n	9000af2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000af14:	2301      	movs	r3, #1
9000af16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000af1a:	e006      	b.n	9000af2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000af1c:	bf00      	nop
9000af1e:	e004      	b.n	9000af2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000af20:	bf00      	nop
9000af22:	e002      	b.n	9000af2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000af24:	bf00      	nop
9000af26:	e000      	b.n	9000af2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000af28:	bf00      	nop
    }

    if (ret == HAL_OK)
9000af2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000af2e:	2b00      	cmp	r3, #0
9000af30:	d10b      	bne.n	9000af4a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000af32:	4b39      	ldr	r3, [pc, #228]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000af34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000af36:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
9000af3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000af3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000af42:	4a35      	ldr	r2, [pc, #212]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000af44:	430b      	orrs	r3, r1
9000af46:	6553      	str	r3, [r2, #84]	@ 0x54
9000af48:	e003      	b.n	9000af52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000af4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000af4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000af52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000af56:	e9d3 2300 	ldrd	r2, r3, [r3]
9000af5a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
9000af5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
9000af62:	2300      	movs	r3, #0
9000af64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
9000af68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
9000af6c:	460b      	mov	r3, r1
9000af6e:	4313      	orrs	r3, r2
9000af70:	d058      	beq.n	9000b024 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
9000af72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000af76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000af7a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
9000af7e:	d033      	beq.n	9000afe8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
9000af80:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
9000af84:	d82c      	bhi.n	9000afe0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000af86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000af8a:	d02f      	beq.n	9000afec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
9000af8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000af90:	d826      	bhi.n	9000afe0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000af92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
9000af96:	d02b      	beq.n	9000aff0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
9000af98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
9000af9c:	d820      	bhi.n	9000afe0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000af9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000afa2:	d012      	beq.n	9000afca <HAL_RCCEx_PeriphCLKConfig+0xcea>
9000afa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000afa8:	d81a      	bhi.n	9000afe0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000afaa:	2b00      	cmp	r3, #0
9000afac:	d022      	beq.n	9000aff4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
9000afae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000afb2:	d115      	bne.n	9000afe0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000afb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000afb8:	3308      	adds	r3, #8
9000afba:	2100      	movs	r1, #0
9000afbc:	4618      	mov	r0, r3
9000afbe:	f000 fb99 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000afc2:	4603      	mov	r3, r0
9000afc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
9000afc8:	e015      	b.n	9000aff6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000afca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000afce:	3328      	adds	r3, #40	@ 0x28
9000afd0:	2102      	movs	r1, #2
9000afd2:	4618      	mov	r0, r3
9000afd4:	f000 fc40 	bl	9000b858 <RCCEx_PLL3_Config>
9000afd8:	4603      	mov	r3, r0
9000afda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
9000afde:	e00a      	b.n	9000aff6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000afe0:	2301      	movs	r3, #1
9000afe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000afe6:	e006      	b.n	9000aff6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000afe8:	bf00      	nop
9000afea:	e004      	b.n	9000aff6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000afec:	bf00      	nop
9000afee:	e002      	b.n	9000aff6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000aff0:	bf00      	nop
9000aff2:	e000      	b.n	9000aff6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000aff4:	bf00      	nop
    }

    if (ret == HAL_OK)
9000aff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000affa:	2b00      	cmp	r3, #0
9000affc:	d10e      	bne.n	9000b01c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000affe:	4b06      	ldr	r3, [pc, #24]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000b000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000b002:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
9000b006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b00a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000b00e:	4a02      	ldr	r2, [pc, #8]	@ (9000b018 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000b010:	430b      	orrs	r3, r1
9000b012:	6593      	str	r3, [r2, #88]	@ 0x58
9000b014:	e006      	b.n	9000b024 <HAL_RCCEx_PeriphCLKConfig+0xd44>
9000b016:	bf00      	nop
9000b018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b01c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b028:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b02c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
9000b030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
9000b034:	2300      	movs	r3, #0
9000b036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
9000b03a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
9000b03e:	460b      	mov	r3, r1
9000b040:	4313      	orrs	r3, r2
9000b042:	d055      	beq.n	9000b0f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b048:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
9000b04c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
9000b050:	d033      	beq.n	9000b0ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
9000b052:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
9000b056:	d82c      	bhi.n	9000b0b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000b058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000b05c:	d02f      	beq.n	9000b0be <HAL_RCCEx_PeriphCLKConfig+0xdde>
9000b05e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000b062:	d826      	bhi.n	9000b0b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000b064:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
9000b068:	d02b      	beq.n	9000b0c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
9000b06a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
9000b06e:	d820      	bhi.n	9000b0b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000b070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000b074:	d012      	beq.n	9000b09c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
9000b076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000b07a:	d81a      	bhi.n	9000b0b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000b07c:	2b00      	cmp	r3, #0
9000b07e:	d022      	beq.n	9000b0c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
9000b080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
9000b084:	d115      	bne.n	9000b0b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b08a:	3308      	adds	r3, #8
9000b08c:	2100      	movs	r1, #0
9000b08e:	4618      	mov	r0, r3
9000b090:	f000 fb30 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000b094:	4603      	mov	r3, r0
9000b096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000b09a:	e015      	b.n	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b0a0:	3328      	adds	r3, #40	@ 0x28
9000b0a2:	2102      	movs	r1, #2
9000b0a4:	4618      	mov	r0, r3
9000b0a6:	f000 fbd7 	bl	9000b858 <RCCEx_PLL3_Config>
9000b0aa:	4603      	mov	r3, r0
9000b0ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000b0b0:	e00a      	b.n	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000b0b2:	2301      	movs	r3, #1
9000b0b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000b0b8:	e006      	b.n	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000b0ba:	bf00      	nop
9000b0bc:	e004      	b.n	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000b0be:	bf00      	nop
9000b0c0:	e002      	b.n	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000b0c2:	bf00      	nop
9000b0c4:	e000      	b.n	9000b0c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000b0c6:	bf00      	nop
    }

    if (ret == HAL_OK)
9000b0c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b0cc:	2b00      	cmp	r3, #0
9000b0ce:	d10b      	bne.n	9000b0e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000b0d0:	4ba1      	ldr	r3, [pc, #644]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b0d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000b0d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
9000b0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b0dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
9000b0e0:	4a9d      	ldr	r2, [pc, #628]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b0e2:	430b      	orrs	r3, r1
9000b0e4:	6593      	str	r3, [r2, #88]	@ 0x58
9000b0e6:	e003      	b.n	9000b0f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b0e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b0ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b0f8:	f002 0308 	and.w	r3, r2, #8
9000b0fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
9000b100:	2300      	movs	r3, #0
9000b102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
9000b106:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
9000b10a:	460b      	mov	r3, r1
9000b10c:	4313      	orrs	r3, r2
9000b10e:	d01e      	beq.n	9000b14e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000b110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
9000b118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000b11c:	d10c      	bne.n	9000b138 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b122:	3328      	adds	r3, #40	@ 0x28
9000b124:	2102      	movs	r1, #2
9000b126:	4618      	mov	r0, r3
9000b128:	f000 fb96 	bl	9000b858 <RCCEx_PLL3_Config>
9000b12c:	4603      	mov	r3, r0
9000b12e:	2b00      	cmp	r3, #0
9000b130:	d002      	beq.n	9000b138 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
9000b132:	2301      	movs	r3, #1
9000b134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b138:	4b87      	ldr	r3, [pc, #540]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b13a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000b13c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
9000b140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
9000b148:	4a83      	ldr	r2, [pc, #524]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b14a:	430b      	orrs	r3, r1
9000b14c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b152:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b156:	f002 0310 	and.w	r3, r2, #16
9000b15a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
9000b15e:	2300      	movs	r3, #0
9000b160:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
9000b164:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
9000b168:	460b      	mov	r3, r1
9000b16a:	4313      	orrs	r3, r2
9000b16c:	d01e      	beq.n	9000b1ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000b16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b172:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000b176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000b17a:	d10c      	bne.n	9000b196 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b180:	3328      	adds	r3, #40	@ 0x28
9000b182:	2102      	movs	r1, #2
9000b184:	4618      	mov	r0, r3
9000b186:	f000 fb67 	bl	9000b858 <RCCEx_PLL3_Config>
9000b18a:	4603      	mov	r3, r0
9000b18c:	2b00      	cmp	r3, #0
9000b18e:	d002      	beq.n	9000b196 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
9000b190:	2301      	movs	r3, #1
9000b192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b196:	4b70      	ldr	r3, [pc, #448]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000b19a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
9000b19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b1a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000b1a6:	4a6c      	ldr	r2, [pc, #432]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b1a8:	430b      	orrs	r3, r1
9000b1aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b1b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
9000b1b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
9000b1bc:	2300      	movs	r3, #0
9000b1be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
9000b1c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
9000b1c6:	460b      	mov	r3, r1
9000b1c8:	4313      	orrs	r3, r2
9000b1ca:	d03e      	beq.n	9000b24a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
9000b1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b1d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
9000b1d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000b1d8:	d022      	beq.n	9000b220 <HAL_RCCEx_PeriphCLKConfig+0xf40>
9000b1da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000b1de:	d81b      	bhi.n	9000b218 <HAL_RCCEx_PeriphCLKConfig+0xf38>
9000b1e0:	2b00      	cmp	r3, #0
9000b1e2:	d003      	beq.n	9000b1ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
9000b1e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000b1e8:	d00b      	beq.n	9000b202 <HAL_RCCEx_PeriphCLKConfig+0xf22>
9000b1ea:	e015      	b.n	9000b218 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b1f0:	3308      	adds	r3, #8
9000b1f2:	2100      	movs	r1, #0
9000b1f4:	4618      	mov	r0, r3
9000b1f6:	f000 fa7d 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000b1fa:	4603      	mov	r3, r0
9000b1fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
9000b200:	e00f      	b.n	9000b222 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b206:	3328      	adds	r3, #40	@ 0x28
9000b208:	2102      	movs	r1, #2
9000b20a:	4618      	mov	r0, r3
9000b20c:	f000 fb24 	bl	9000b858 <RCCEx_PLL3_Config>
9000b210:	4603      	mov	r3, r0
9000b212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
9000b216:	e004      	b.n	9000b222 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000b218:	2301      	movs	r3, #1
9000b21a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000b21e:	e000      	b.n	9000b222 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
9000b220:	bf00      	nop
    }

    if (ret == HAL_OK)
9000b222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b226:	2b00      	cmp	r3, #0
9000b228:	d10b      	bne.n	9000b242 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000b22a:	4b4b      	ldr	r3, [pc, #300]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b22c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000b22e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
9000b232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b236:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
9000b23a:	4a47      	ldr	r2, [pc, #284]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b23c:	430b      	orrs	r3, r1
9000b23e:	6593      	str	r3, [r2, #88]	@ 0x58
9000b240:	e003      	b.n	9000b24a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b252:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
9000b256:	67bb      	str	r3, [r7, #120]	@ 0x78
9000b258:	2300      	movs	r3, #0
9000b25a:	67fb      	str	r3, [r7, #124]	@ 0x7c
9000b25c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
9000b260:	460b      	mov	r3, r1
9000b262:	4313      	orrs	r3, r2
9000b264:	d03b      	beq.n	9000b2de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
9000b266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000b26e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000b272:	d01f      	beq.n	9000b2b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
9000b274:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
9000b278:	d818      	bhi.n	9000b2ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
9000b27a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000b27e:	d003      	beq.n	9000b288 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
9000b280:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000b284:	d007      	beq.n	9000b296 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
9000b286:	e011      	b.n	9000b2ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b288:	4b33      	ldr	r3, [pc, #204]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b28c:	4a32      	ldr	r2, [pc, #200]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b28e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000b292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
9000b294:	e00f      	b.n	9000b2b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b29a:	3328      	adds	r3, #40	@ 0x28
9000b29c:	2101      	movs	r1, #1
9000b29e:	4618      	mov	r0, r3
9000b2a0:	f000 fada 	bl	9000b858 <RCCEx_PLL3_Config>
9000b2a4:	4603      	mov	r3, r0
9000b2a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
9000b2aa:	e004      	b.n	9000b2b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000b2ac:	2301      	movs	r3, #1
9000b2ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000b2b2:	e000      	b.n	9000b2b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
9000b2b4:	bf00      	nop
    }

    if (ret == HAL_OK)
9000b2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b2ba:	2b00      	cmp	r3, #0
9000b2bc:	d10b      	bne.n	9000b2d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000b2be:	4b26      	ldr	r3, [pc, #152]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b2c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000b2c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
9000b2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000b2ce:	4a22      	ldr	r2, [pc, #136]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b2d0:	430b      	orrs	r3, r1
9000b2d2:	6553      	str	r3, [r2, #84]	@ 0x54
9000b2d4:	e003      	b.n	9000b2de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b2da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000b2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b2e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
9000b2ea:	673b      	str	r3, [r7, #112]	@ 0x70
9000b2ec:	2300      	movs	r3, #0
9000b2ee:	677b      	str	r3, [r7, #116]	@ 0x74
9000b2f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
9000b2f4:	460b      	mov	r3, r1
9000b2f6:	4313      	orrs	r3, r2
9000b2f8:	d034      	beq.n	9000b364 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
9000b2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b2fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000b300:	2b00      	cmp	r3, #0
9000b302:	d003      	beq.n	9000b30c <HAL_RCCEx_PeriphCLKConfig+0x102c>
9000b304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000b308:	d007      	beq.n	9000b31a <HAL_RCCEx_PeriphCLKConfig+0x103a>
9000b30a:	e011      	b.n	9000b330 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b30c:	4b12      	ldr	r3, [pc, #72]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b310:	4a11      	ldr	r2, [pc, #68]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000b316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
9000b318:	e00e      	b.n	9000b338 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b31e:	3308      	adds	r3, #8
9000b320:	2102      	movs	r1, #2
9000b322:	4618      	mov	r0, r3
9000b324:	f000 f9e6 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000b328:	4603      	mov	r3, r0
9000b32a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
9000b32e:	e003      	b.n	9000b338 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
9000b330:	2301      	movs	r3, #1
9000b332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000b336:	bf00      	nop
    }

    if (ret == HAL_OK)
9000b338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b33c:	2b00      	cmp	r3, #0
9000b33e:	d10d      	bne.n	9000b35c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000b340:	4b05      	ldr	r3, [pc, #20]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000b344:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000b348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b34c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000b34e:	4a02      	ldr	r2, [pc, #8]	@ (9000b358 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000b350:	430b      	orrs	r3, r1
9000b352:	64d3      	str	r3, [r2, #76]	@ 0x4c
9000b354:	e006      	b.n	9000b364 <HAL_RCCEx_PeriphCLKConfig+0x1084>
9000b356:	bf00      	nop
9000b358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b35c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b368:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b36c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
9000b370:	66bb      	str	r3, [r7, #104]	@ 0x68
9000b372:	2300      	movs	r3, #0
9000b374:	66fb      	str	r3, [r7, #108]	@ 0x6c
9000b376:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
9000b37a:	460b      	mov	r3, r1
9000b37c:	4313      	orrs	r3, r2
9000b37e:	d00c      	beq.n	9000b39a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b384:	3328      	adds	r3, #40	@ 0x28
9000b386:	2102      	movs	r1, #2
9000b388:	4618      	mov	r0, r3
9000b38a:	f000 fa65 	bl	9000b858 <RCCEx_PLL3_Config>
9000b38e:	4603      	mov	r3, r0
9000b390:	2b00      	cmp	r3, #0
9000b392:	d002      	beq.n	9000b39a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
9000b394:	2301      	movs	r3, #1
9000b396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b3a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
9000b3a6:	663b      	str	r3, [r7, #96]	@ 0x60
9000b3a8:	2300      	movs	r3, #0
9000b3aa:	667b      	str	r3, [r7, #100]	@ 0x64
9000b3ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
9000b3b0:	460b      	mov	r3, r1
9000b3b2:	4313      	orrs	r3, r2
9000b3b4:	d038      	beq.n	9000b428 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
9000b3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
9000b3be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000b3c2:	d018      	beq.n	9000b3f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
9000b3c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000b3c8:	d811      	bhi.n	9000b3ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
9000b3ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000b3ce:	d014      	beq.n	9000b3fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
9000b3d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000b3d4:	d80b      	bhi.n	9000b3ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
9000b3d6:	2b00      	cmp	r3, #0
9000b3d8:	d011      	beq.n	9000b3fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
9000b3da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000b3de:	d106      	bne.n	9000b3ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b3e0:	4bc3      	ldr	r3, [pc, #780]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b3e4:	4ac2      	ldr	r2, [pc, #776]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b3e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000b3ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
9000b3ec:	e008      	b.n	9000b400 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000b3ee:	2301      	movs	r3, #1
9000b3f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000b3f4:	e004      	b.n	9000b400 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000b3f6:	bf00      	nop
9000b3f8:	e002      	b.n	9000b400 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000b3fa:	bf00      	nop
9000b3fc:	e000      	b.n	9000b400 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000b3fe:	bf00      	nop
    }

    if (ret == HAL_OK)
9000b400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b404:	2b00      	cmp	r3, #0
9000b406:	d10b      	bne.n	9000b420 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000b408:	4bb9      	ldr	r3, [pc, #740]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b40a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000b40c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
9000b410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
9000b418:	4ab5      	ldr	r2, [pc, #724]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b41a:	430b      	orrs	r3, r1
9000b41c:	6553      	str	r3, [r2, #84]	@ 0x54
9000b41e:	e003      	b.n	9000b428 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000b428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b430:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
9000b434:	65bb      	str	r3, [r7, #88]	@ 0x58
9000b436:	2300      	movs	r3, #0
9000b438:	65fb      	str	r3, [r7, #92]	@ 0x5c
9000b43a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
9000b43e:	460b      	mov	r3, r1
9000b440:	4313      	orrs	r3, r2
9000b442:	d009      	beq.n	9000b458 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000b444:	4baa      	ldr	r3, [pc, #680]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000b448:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
9000b44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
9000b452:	4aa7      	ldr	r2, [pc, #668]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b454:	430b      	orrs	r3, r1
9000b456:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000b458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b460:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
9000b464:	653b      	str	r3, [r7, #80]	@ 0x50
9000b466:	2300      	movs	r3, #0
9000b468:	657b      	str	r3, [r7, #84]	@ 0x54
9000b46a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
9000b46e:	460b      	mov	r3, r1
9000b470:	4313      	orrs	r3, r2
9000b472:	d00a      	beq.n	9000b48a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000b474:	4b9e      	ldr	r3, [pc, #632]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b476:	691b      	ldr	r3, [r3, #16]
9000b478:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
9000b47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b480:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
9000b484:	4a9a      	ldr	r2, [pc, #616]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b486:	430b      	orrs	r3, r1
9000b488:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000b48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b492:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
9000b496:	64bb      	str	r3, [r7, #72]	@ 0x48
9000b498:	2300      	movs	r3, #0
9000b49a:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000b49c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
9000b4a0:	460b      	mov	r3, r1
9000b4a2:	4313      	orrs	r3, r2
9000b4a4:	d009      	beq.n	9000b4ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000b4a6:	4b92      	ldr	r3, [pc, #584]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b4a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000b4aa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
9000b4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b4b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000b4b4:	4a8e      	ldr	r2, [pc, #568]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b4b6:	430b      	orrs	r3, r1
9000b4b8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000b4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b4c2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
9000b4c6:	643b      	str	r3, [r7, #64]	@ 0x40
9000b4c8:	2300      	movs	r3, #0
9000b4ca:	647b      	str	r3, [r7, #68]	@ 0x44
9000b4cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
9000b4d0:	460b      	mov	r3, r1
9000b4d2:	4313      	orrs	r3, r2
9000b4d4:	d00e      	beq.n	9000b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000b4d6:	4b86      	ldr	r3, [pc, #536]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b4d8:	691b      	ldr	r3, [r3, #16]
9000b4da:	4a85      	ldr	r2, [pc, #532]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b4dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b4e0:	6113      	str	r3, [r2, #16]
9000b4e2:	4b83      	ldr	r3, [pc, #524]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b4e4:	6919      	ldr	r1, [r3, #16]
9000b4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b4ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
9000b4ee:	4a80      	ldr	r2, [pc, #512]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b4f0:	430b      	orrs	r3, r1
9000b4f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000b4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b4fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
9000b500:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b502:	2300      	movs	r3, #0
9000b504:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b506:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
9000b50a:	460b      	mov	r3, r1
9000b50c:	4313      	orrs	r3, r2
9000b50e:	d009      	beq.n	9000b524 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000b510:	4b77      	ldr	r3, [pc, #476]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000b514:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
9000b518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b51c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000b51e:	4a74      	ldr	r2, [pc, #464]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b520:	430b      	orrs	r3, r1
9000b522:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000b524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b528:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b52c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
9000b530:	633b      	str	r3, [r7, #48]	@ 0x30
9000b532:	2300      	movs	r3, #0
9000b534:	637b      	str	r3, [r7, #52]	@ 0x34
9000b536:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
9000b53a:	460b      	mov	r3, r1
9000b53c:	4313      	orrs	r3, r2
9000b53e:	d00a      	beq.n	9000b556 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000b540:	4b6b      	ldr	r3, [pc, #428]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000b544:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
9000b548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000b550:	4a67      	ldr	r2, [pc, #412]	@ (9000b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000b552:	430b      	orrs	r3, r1
9000b554:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b55e:	2100      	movs	r1, #0
9000b560:	62b9      	str	r1, [r7, #40]	@ 0x28
9000b562:	f003 0301 	and.w	r3, r3, #1
9000b566:	62fb      	str	r3, [r7, #44]	@ 0x2c
9000b568:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
9000b56c:	460b      	mov	r3, r1
9000b56e:	4313      	orrs	r3, r2
9000b570:	d011      	beq.n	9000b596 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b576:	3308      	adds	r3, #8
9000b578:	2100      	movs	r1, #0
9000b57a:	4618      	mov	r0, r3
9000b57c:	f000 f8ba 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000b580:	4603      	mov	r3, r0
9000b582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000b586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b58a:	2b00      	cmp	r3, #0
9000b58c:	d003      	beq.n	9000b596 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b58e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b59e:	2100      	movs	r1, #0
9000b5a0:	6239      	str	r1, [r7, #32]
9000b5a2:	f003 0302 	and.w	r3, r3, #2
9000b5a6:	627b      	str	r3, [r7, #36]	@ 0x24
9000b5a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
9000b5ac:	460b      	mov	r3, r1
9000b5ae:	4313      	orrs	r3, r2
9000b5b0:	d011      	beq.n	9000b5d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b5b6:	3308      	adds	r3, #8
9000b5b8:	2101      	movs	r1, #1
9000b5ba:	4618      	mov	r0, r3
9000b5bc:	f000 f89a 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000b5c0:	4603      	mov	r3, r0
9000b5c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000b5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b5ca:	2b00      	cmp	r3, #0
9000b5cc:	d003      	beq.n	9000b5d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b5d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b5de:	2100      	movs	r1, #0
9000b5e0:	61b9      	str	r1, [r7, #24]
9000b5e2:	f003 0304 	and.w	r3, r3, #4
9000b5e6:	61fb      	str	r3, [r7, #28]
9000b5e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
9000b5ec:	460b      	mov	r3, r1
9000b5ee:	4313      	orrs	r3, r2
9000b5f0:	d011      	beq.n	9000b616 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b5f6:	3308      	adds	r3, #8
9000b5f8:	2102      	movs	r1, #2
9000b5fa:	4618      	mov	r0, r3
9000b5fc:	f000 f87a 	bl	9000b6f4 <RCCEx_PLL2_Config>
9000b600:	4603      	mov	r3, r0
9000b602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000b606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b60a:	2b00      	cmp	r3, #0
9000b60c:	d003      	beq.n	9000b616 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b60e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b612:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b61e:	2100      	movs	r1, #0
9000b620:	6139      	str	r1, [r7, #16]
9000b622:	f003 0308 	and.w	r3, r3, #8
9000b626:	617b      	str	r3, [r7, #20]
9000b628:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
9000b62c:	460b      	mov	r3, r1
9000b62e:	4313      	orrs	r3, r2
9000b630:	d011      	beq.n	9000b656 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b636:	3328      	adds	r3, #40	@ 0x28
9000b638:	2100      	movs	r1, #0
9000b63a:	4618      	mov	r0, r3
9000b63c:	f000 f90c 	bl	9000b858 <RCCEx_PLL3_Config>
9000b640:	4603      	mov	r3, r0
9000b642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
9000b646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b64a:	2b00      	cmp	r3, #0
9000b64c:	d003      	beq.n	9000b656 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b64e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b65e:	2100      	movs	r1, #0
9000b660:	60b9      	str	r1, [r7, #8]
9000b662:	f003 0310 	and.w	r3, r3, #16
9000b666:	60fb      	str	r3, [r7, #12]
9000b668:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
9000b66c:	460b      	mov	r3, r1
9000b66e:	4313      	orrs	r3, r2
9000b670:	d011      	beq.n	9000b696 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b676:	3328      	adds	r3, #40	@ 0x28
9000b678:	2101      	movs	r1, #1
9000b67a:	4618      	mov	r0, r3
9000b67c:	f000 f8ec 	bl	9000b858 <RCCEx_PLL3_Config>
9000b680:	4603      	mov	r3, r0
9000b682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000b686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b68a:	2b00      	cmp	r3, #0
9000b68c:	d003      	beq.n	9000b696 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b68e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000b69e:	2100      	movs	r1, #0
9000b6a0:	6039      	str	r1, [r7, #0]
9000b6a2:	f003 0320 	and.w	r3, r3, #32
9000b6a6:	607b      	str	r3, [r7, #4]
9000b6a8:	e9d7 1200 	ldrd	r1, r2, [r7]
9000b6ac:	460b      	mov	r3, r1
9000b6ae:	4313      	orrs	r3, r2
9000b6b0:	d011      	beq.n	9000b6d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000b6b6:	3328      	adds	r3, #40	@ 0x28
9000b6b8:	2102      	movs	r1, #2
9000b6ba:	4618      	mov	r0, r3
9000b6bc:	f000 f8cc 	bl	9000b858 <RCCEx_PLL3_Config>
9000b6c0:	4603      	mov	r3, r0
9000b6c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000b6c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b6ca:	2b00      	cmp	r3, #0
9000b6cc:	d003      	beq.n	9000b6d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000b6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000b6d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
9000b6d6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
9000b6da:	2b00      	cmp	r3, #0
9000b6dc:	d101      	bne.n	9000b6e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
9000b6de:	2300      	movs	r3, #0
9000b6e0:	e000      	b.n	9000b6e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
9000b6e2:	2301      	movs	r3, #1
}
9000b6e4:	4618      	mov	r0, r3
9000b6e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
9000b6ea:	46bd      	mov	sp, r7
9000b6ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000b6f0:	58024400 	.word	0x58024400

9000b6f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000b6f4:	b580      	push	{r7, lr}
9000b6f6:	b084      	sub	sp, #16
9000b6f8:	af00      	add	r7, sp, #0
9000b6fa:	6078      	str	r0, [r7, #4]
9000b6fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000b6fe:	2300      	movs	r3, #0
9000b700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b702:	4b53      	ldr	r3, [pc, #332]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b706:	f003 0303 	and.w	r3, r3, #3
9000b70a:	2b03      	cmp	r3, #3
9000b70c:	d101      	bne.n	9000b712 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
9000b70e:	2301      	movs	r3, #1
9000b710:	e099      	b.n	9000b846 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000b712:	4b4f      	ldr	r3, [pc, #316]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b714:	681b      	ldr	r3, [r3, #0]
9000b716:	4a4e      	ldr	r2, [pc, #312]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b718:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
9000b71c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b71e:	f7f9 fa4d 	bl	90004bbc <HAL_GetTick>
9000b722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000b724:	e008      	b.n	9000b738 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000b726:	f7f9 fa49 	bl	90004bbc <HAL_GetTick>
9000b72a:	4602      	mov	r2, r0
9000b72c:	68bb      	ldr	r3, [r7, #8]
9000b72e:	1ad3      	subs	r3, r2, r3
9000b730:	2b02      	cmp	r3, #2
9000b732:	d901      	bls.n	9000b738 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
9000b734:	2303      	movs	r3, #3
9000b736:	e086      	b.n	9000b846 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000b738:	4b45      	ldr	r3, [pc, #276]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b73a:	681b      	ldr	r3, [r3, #0]
9000b73c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000b740:	2b00      	cmp	r3, #0
9000b742:	d1f0      	bne.n	9000b726 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000b744:	4b42      	ldr	r3, [pc, #264]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b748:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
9000b74c:	687b      	ldr	r3, [r7, #4]
9000b74e:	681b      	ldr	r3, [r3, #0]
9000b750:	031b      	lsls	r3, r3, #12
9000b752:	493f      	ldr	r1, [pc, #252]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b754:	4313      	orrs	r3, r2
9000b756:	628b      	str	r3, [r1, #40]	@ 0x28
9000b758:	687b      	ldr	r3, [r7, #4]
9000b75a:	685b      	ldr	r3, [r3, #4]
9000b75c:	3b01      	subs	r3, #1
9000b75e:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000b762:	687b      	ldr	r3, [r7, #4]
9000b764:	689b      	ldr	r3, [r3, #8]
9000b766:	3b01      	subs	r3, #1
9000b768:	025b      	lsls	r3, r3, #9
9000b76a:	b29b      	uxth	r3, r3
9000b76c:	431a      	orrs	r2, r3
9000b76e:	687b      	ldr	r3, [r7, #4]
9000b770:	68db      	ldr	r3, [r3, #12]
9000b772:	3b01      	subs	r3, #1
9000b774:	041b      	lsls	r3, r3, #16
9000b776:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000b77a:	431a      	orrs	r2, r3
9000b77c:	687b      	ldr	r3, [r7, #4]
9000b77e:	691b      	ldr	r3, [r3, #16]
9000b780:	3b01      	subs	r3, #1
9000b782:	061b      	lsls	r3, r3, #24
9000b784:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000b788:	4931      	ldr	r1, [pc, #196]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b78a:	4313      	orrs	r3, r2
9000b78c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000b78e:	4b30      	ldr	r3, [pc, #192]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b792:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000b796:	687b      	ldr	r3, [r7, #4]
9000b798:	695b      	ldr	r3, [r3, #20]
9000b79a:	492d      	ldr	r1, [pc, #180]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b79c:	4313      	orrs	r3, r2
9000b79e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000b7a0:	4b2b      	ldr	r3, [pc, #172]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b7a4:	f023 0220 	bic.w	r2, r3, #32
9000b7a8:	687b      	ldr	r3, [r7, #4]
9000b7aa:	699b      	ldr	r3, [r3, #24]
9000b7ac:	4928      	ldr	r1, [pc, #160]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7ae:	4313      	orrs	r3, r2
9000b7b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
9000b7b2:	4b27      	ldr	r3, [pc, #156]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b7b6:	4a26      	ldr	r2, [pc, #152]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7b8:	f023 0310 	bic.w	r3, r3, #16
9000b7bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000b7be:	4b24      	ldr	r3, [pc, #144]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000b7c2:	4b24      	ldr	r3, [pc, #144]	@ (9000b854 <RCCEx_PLL2_Config+0x160>)
9000b7c4:	4013      	ands	r3, r2
9000b7c6:	687a      	ldr	r2, [r7, #4]
9000b7c8:	69d2      	ldr	r2, [r2, #28]
9000b7ca:	00d2      	lsls	r2, r2, #3
9000b7cc:	4920      	ldr	r1, [pc, #128]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7ce:	4313      	orrs	r3, r2
9000b7d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000b7d2:	4b1f      	ldr	r3, [pc, #124]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b7d6:	4a1e      	ldr	r2, [pc, #120]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7d8:	f043 0310 	orr.w	r3, r3, #16
9000b7dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000b7de:	683b      	ldr	r3, [r7, #0]
9000b7e0:	2b00      	cmp	r3, #0
9000b7e2:	d106      	bne.n	9000b7f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000b7e4:	4b1a      	ldr	r3, [pc, #104]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b7e8:	4a19      	ldr	r2, [pc, #100]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
9000b7ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000b7f0:	e00f      	b.n	9000b812 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000b7f2:	683b      	ldr	r3, [r7, #0]
9000b7f4:	2b01      	cmp	r3, #1
9000b7f6:	d106      	bne.n	9000b806 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000b7f8:	4b15      	ldr	r3, [pc, #84]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b7fc:	4a14      	ldr	r2, [pc, #80]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b7fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
9000b802:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000b804:	e005      	b.n	9000b812 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000b806:	4b12      	ldr	r3, [pc, #72]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b80a:	4a11      	ldr	r2, [pc, #68]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b80c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
9000b810:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000b812:	4b0f      	ldr	r3, [pc, #60]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b814:	681b      	ldr	r3, [r3, #0]
9000b816:	4a0e      	ldr	r2, [pc, #56]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b818:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
9000b81c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b81e:	f7f9 f9cd 	bl	90004bbc <HAL_GetTick>
9000b822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000b824:	e008      	b.n	9000b838 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000b826:	f7f9 f9c9 	bl	90004bbc <HAL_GetTick>
9000b82a:	4602      	mov	r2, r0
9000b82c:	68bb      	ldr	r3, [r7, #8]
9000b82e:	1ad3      	subs	r3, r2, r3
9000b830:	2b02      	cmp	r3, #2
9000b832:	d901      	bls.n	9000b838 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000b834:	2303      	movs	r3, #3
9000b836:	e006      	b.n	9000b846 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000b838:	4b05      	ldr	r3, [pc, #20]	@ (9000b850 <RCCEx_PLL2_Config+0x15c>)
9000b83a:	681b      	ldr	r3, [r3, #0]
9000b83c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000b840:	2b00      	cmp	r3, #0
9000b842:	d0f0      	beq.n	9000b826 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000b844:	7bfb      	ldrb	r3, [r7, #15]
}
9000b846:	4618      	mov	r0, r3
9000b848:	3710      	adds	r7, #16
9000b84a:	46bd      	mov	sp, r7
9000b84c:	bd80      	pop	{r7, pc}
9000b84e:	bf00      	nop
9000b850:	58024400 	.word	0x58024400
9000b854:	ffff0007 	.word	0xffff0007

9000b858 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000b858:	b580      	push	{r7, lr}
9000b85a:	b084      	sub	sp, #16
9000b85c:	af00      	add	r7, sp, #0
9000b85e:	6078      	str	r0, [r7, #4]
9000b860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000b862:	2300      	movs	r3, #0
9000b864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b866:	4b53      	ldr	r3, [pc, #332]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b86a:	f003 0303 	and.w	r3, r3, #3
9000b86e:	2b03      	cmp	r3, #3
9000b870:	d101      	bne.n	9000b876 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
9000b872:	2301      	movs	r3, #1
9000b874:	e099      	b.n	9000b9aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000b876:	4b4f      	ldr	r3, [pc, #316]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b878:	681b      	ldr	r3, [r3, #0]
9000b87a:	4a4e      	ldr	r2, [pc, #312]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b87c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
9000b880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b882:	f7f9 f99b 	bl	90004bbc <HAL_GetTick>
9000b886:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b888:	e008      	b.n	9000b89c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000b88a:	f7f9 f997 	bl	90004bbc <HAL_GetTick>
9000b88e:	4602      	mov	r2, r0
9000b890:	68bb      	ldr	r3, [r7, #8]
9000b892:	1ad3      	subs	r3, r2, r3
9000b894:	2b02      	cmp	r3, #2
9000b896:	d901      	bls.n	9000b89c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000b898:	2303      	movs	r3, #3
9000b89a:	e086      	b.n	9000b9aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b89c:	4b45      	ldr	r3, [pc, #276]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b89e:	681b      	ldr	r3, [r3, #0]
9000b8a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000b8a4:	2b00      	cmp	r3, #0
9000b8a6:	d1f0      	bne.n	9000b88a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000b8a8:	4b42      	ldr	r3, [pc, #264]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b8ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
9000b8b0:	687b      	ldr	r3, [r7, #4]
9000b8b2:	681b      	ldr	r3, [r3, #0]
9000b8b4:	051b      	lsls	r3, r3, #20
9000b8b6:	493f      	ldr	r1, [pc, #252]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b8b8:	4313      	orrs	r3, r2
9000b8ba:	628b      	str	r3, [r1, #40]	@ 0x28
9000b8bc:	687b      	ldr	r3, [r7, #4]
9000b8be:	685b      	ldr	r3, [r3, #4]
9000b8c0:	3b01      	subs	r3, #1
9000b8c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000b8c6:	687b      	ldr	r3, [r7, #4]
9000b8c8:	689b      	ldr	r3, [r3, #8]
9000b8ca:	3b01      	subs	r3, #1
9000b8cc:	025b      	lsls	r3, r3, #9
9000b8ce:	b29b      	uxth	r3, r3
9000b8d0:	431a      	orrs	r2, r3
9000b8d2:	687b      	ldr	r3, [r7, #4]
9000b8d4:	68db      	ldr	r3, [r3, #12]
9000b8d6:	3b01      	subs	r3, #1
9000b8d8:	041b      	lsls	r3, r3, #16
9000b8da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000b8de:	431a      	orrs	r2, r3
9000b8e0:	687b      	ldr	r3, [r7, #4]
9000b8e2:	691b      	ldr	r3, [r3, #16]
9000b8e4:	3b01      	subs	r3, #1
9000b8e6:	061b      	lsls	r3, r3, #24
9000b8e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000b8ec:	4931      	ldr	r1, [pc, #196]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b8ee:	4313      	orrs	r3, r2
9000b8f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000b8f2:	4b30      	ldr	r3, [pc, #192]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b8f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
9000b8fa:	687b      	ldr	r3, [r7, #4]
9000b8fc:	695b      	ldr	r3, [r3, #20]
9000b8fe:	492d      	ldr	r1, [pc, #180]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b900:	4313      	orrs	r3, r2
9000b902:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000b904:	4b2b      	ldr	r3, [pc, #172]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b908:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
9000b90c:	687b      	ldr	r3, [r7, #4]
9000b90e:	699b      	ldr	r3, [r3, #24]
9000b910:	4928      	ldr	r1, [pc, #160]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b912:	4313      	orrs	r3, r2
9000b914:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000b916:	4b27      	ldr	r3, [pc, #156]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b91a:	4a26      	ldr	r2, [pc, #152]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b91c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
9000b920:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000b922:	4b24      	ldr	r3, [pc, #144]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000b926:	4b24      	ldr	r3, [pc, #144]	@ (9000b9b8 <RCCEx_PLL3_Config+0x160>)
9000b928:	4013      	ands	r3, r2
9000b92a:	687a      	ldr	r2, [r7, #4]
9000b92c:	69d2      	ldr	r2, [r2, #28]
9000b92e:	00d2      	lsls	r2, r2, #3
9000b930:	4920      	ldr	r1, [pc, #128]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b932:	4313      	orrs	r3, r2
9000b934:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000b936:	4b1f      	ldr	r3, [pc, #124]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b93a:	4a1e      	ldr	r2, [pc, #120]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b93c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000b940:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000b942:	683b      	ldr	r3, [r7, #0]
9000b944:	2b00      	cmp	r3, #0
9000b946:	d106      	bne.n	9000b956 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000b948:	4b1a      	ldr	r3, [pc, #104]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b94c:	4a19      	ldr	r2, [pc, #100]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b94e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000b952:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000b954:	e00f      	b.n	9000b976 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000b956:	683b      	ldr	r3, [r7, #0]
9000b958:	2b01      	cmp	r3, #1
9000b95a:	d106      	bne.n	9000b96a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000b95c:	4b15      	ldr	r3, [pc, #84]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b960:	4a14      	ldr	r2, [pc, #80]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b962:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
9000b966:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000b968:	e005      	b.n	9000b976 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000b96a:	4b12      	ldr	r3, [pc, #72]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b96e:	4a11      	ldr	r2, [pc, #68]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000b974:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000b976:	4b0f      	ldr	r3, [pc, #60]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b978:	681b      	ldr	r3, [r3, #0]
9000b97a:	4a0e      	ldr	r2, [pc, #56]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b97c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
9000b980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b982:	f7f9 f91b 	bl	90004bbc <HAL_GetTick>
9000b986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000b988:	e008      	b.n	9000b99c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000b98a:	f7f9 f917 	bl	90004bbc <HAL_GetTick>
9000b98e:	4602      	mov	r2, r0
9000b990:	68bb      	ldr	r3, [r7, #8]
9000b992:	1ad3      	subs	r3, r2, r3
9000b994:	2b02      	cmp	r3, #2
9000b996:	d901      	bls.n	9000b99c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
9000b998:	2303      	movs	r3, #3
9000b99a:	e006      	b.n	9000b9aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000b99c:	4b05      	ldr	r3, [pc, #20]	@ (9000b9b4 <RCCEx_PLL3_Config+0x15c>)
9000b99e:	681b      	ldr	r3, [r3, #0]
9000b9a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
9000b9a4:	2b00      	cmp	r3, #0
9000b9a6:	d0f0      	beq.n	9000b98a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
9000b9a8:	7bfb      	ldrb	r3, [r7, #15]
}
9000b9aa:	4618      	mov	r0, r3
9000b9ac:	3710      	adds	r7, #16
9000b9ae:	46bd      	mov	sp, r7
9000b9b0:	bd80      	pop	{r7, pc}
9000b9b2:	bf00      	nop
9000b9b4:	58024400 	.word	0x58024400
9000b9b8:	ffff0007 	.word	0xffff0007

9000b9bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
9000b9bc:	b580      	push	{r7, lr}
9000b9be:	b082      	sub	sp, #8
9000b9c0:	af00      	add	r7, sp, #0
9000b9c2:	6078      	str	r0, [r7, #4]
9000b9c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000b9c6:	687b      	ldr	r3, [r7, #4]
9000b9c8:	2b00      	cmp	r3, #0
9000b9ca:	d101      	bne.n	9000b9d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
9000b9cc:	2301      	movs	r3, #1
9000b9ce:	e02b      	b.n	9000ba28 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000b9d0:	687b      	ldr	r3, [r7, #4]
9000b9d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000b9d6:	b2db      	uxtb	r3, r3
9000b9d8:	2b00      	cmp	r3, #0
9000b9da:	d106      	bne.n	9000b9ea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
9000b9dc:	687b      	ldr	r3, [r7, #4]
9000b9de:	2200      	movs	r2, #0
9000b9e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
9000b9e4:	6878      	ldr	r0, [r7, #4]
9000b9e6:	f000 f825 	bl	9000ba34 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b9ea:	687b      	ldr	r3, [r7, #4]
9000b9ec:	2202      	movs	r2, #2
9000b9ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000b9f2:	687b      	ldr	r3, [r7, #4]
9000b9f4:	681a      	ldr	r2, [r3, #0]
9000b9f6:	687b      	ldr	r3, [r7, #4]
9000b9f8:	3304      	adds	r3, #4
9000b9fa:	4619      	mov	r1, r3
9000b9fc:	4610      	mov	r0, r2
9000b9fe:	f000 f9e7 	bl	9000bdd0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000ba02:	687b      	ldr	r3, [r7, #4]
9000ba04:	6818      	ldr	r0, [r3, #0]
9000ba06:	687b      	ldr	r3, [r7, #4]
9000ba08:	685b      	ldr	r3, [r3, #4]
9000ba0a:	461a      	mov	r2, r3
9000ba0c:	6839      	ldr	r1, [r7, #0]
9000ba0e:	f000 fa3b 	bl	9000be88 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000ba12:	4b07      	ldr	r3, [pc, #28]	@ (9000ba30 <HAL_SDRAM_Init+0x74>)
9000ba14:	681b      	ldr	r3, [r3, #0]
9000ba16:	4a06      	ldr	r2, [pc, #24]	@ (9000ba30 <HAL_SDRAM_Init+0x74>)
9000ba18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000ba1c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000ba1e:	687b      	ldr	r3, [r7, #4]
9000ba20:	2201      	movs	r2, #1
9000ba22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
9000ba26:	2300      	movs	r3, #0
}
9000ba28:	4618      	mov	r0, r3
9000ba2a:	3708      	adds	r7, #8
9000ba2c:	46bd      	mov	sp, r7
9000ba2e:	bd80      	pop	{r7, pc}
9000ba30:	52004000 	.word	0x52004000

9000ba34 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
9000ba34:	b480      	push	{r7}
9000ba36:	b083      	sub	sp, #12
9000ba38:	af00      	add	r7, sp, #0
9000ba3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
9000ba3c:	bf00      	nop
9000ba3e:	370c      	adds	r7, #12
9000ba40:	46bd      	mov	sp, r7
9000ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba46:	4770      	bx	lr

9000ba48 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000ba48:	b580      	push	{r7, lr}
9000ba4a:	b086      	sub	sp, #24
9000ba4c:	af00      	add	r7, sp, #0
9000ba4e:	60f8      	str	r0, [r7, #12]
9000ba50:	60b9      	str	r1, [r7, #8]
9000ba52:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000ba54:	68fb      	ldr	r3, [r7, #12]
9000ba56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000ba5a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000ba5c:	7dfb      	ldrb	r3, [r7, #23]
9000ba5e:	2b02      	cmp	r3, #2
9000ba60:	d101      	bne.n	9000ba66 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
9000ba62:	2302      	movs	r3, #2
9000ba64:	e021      	b.n	9000baaa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000ba66:	7dfb      	ldrb	r3, [r7, #23]
9000ba68:	2b01      	cmp	r3, #1
9000ba6a:	d002      	beq.n	9000ba72 <HAL_SDRAM_SendCommand+0x2a>
9000ba6c:	7dfb      	ldrb	r3, [r7, #23]
9000ba6e:	2b05      	cmp	r3, #5
9000ba70:	d118      	bne.n	9000baa4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ba72:	68fb      	ldr	r3, [r7, #12]
9000ba74:	2202      	movs	r2, #2
9000ba76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000ba7a:	68fb      	ldr	r3, [r7, #12]
9000ba7c:	681b      	ldr	r3, [r3, #0]
9000ba7e:	687a      	ldr	r2, [r7, #4]
9000ba80:	68b9      	ldr	r1, [r7, #8]
9000ba82:	4618      	mov	r0, r3
9000ba84:	f000 fa6a 	bl	9000bf5c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000ba88:	68bb      	ldr	r3, [r7, #8]
9000ba8a:	681b      	ldr	r3, [r3, #0]
9000ba8c:	2b02      	cmp	r3, #2
9000ba8e:	d104      	bne.n	9000ba9a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000ba90:	68fb      	ldr	r3, [r7, #12]
9000ba92:	2205      	movs	r2, #5
9000ba94:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000ba98:	e006      	b.n	9000baa8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
9000ba9a:	68fb      	ldr	r3, [r7, #12]
9000ba9c:	2201      	movs	r2, #1
9000ba9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000baa2:	e001      	b.n	9000baa8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
9000baa4:	2301      	movs	r3, #1
9000baa6:	e000      	b.n	9000baaa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
9000baa8:	2300      	movs	r3, #0
}
9000baaa:	4618      	mov	r0, r3
9000baac:	3718      	adds	r7, #24
9000baae:	46bd      	mov	sp, r7
9000bab0:	bd80      	pop	{r7, pc}

9000bab2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000bab2:	b580      	push	{r7, lr}
9000bab4:	b082      	sub	sp, #8
9000bab6:	af00      	add	r7, sp, #0
9000bab8:	6078      	str	r0, [r7, #4]
9000baba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000babc:	687b      	ldr	r3, [r7, #4]
9000babe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000bac2:	b2db      	uxtb	r3, r3
9000bac4:	2b02      	cmp	r3, #2
9000bac6:	d101      	bne.n	9000bacc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
9000bac8:	2302      	movs	r3, #2
9000baca:	e016      	b.n	9000bafa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000bacc:	687b      	ldr	r3, [r7, #4]
9000bace:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000bad2:	b2db      	uxtb	r3, r3
9000bad4:	2b01      	cmp	r3, #1
9000bad6:	d10f      	bne.n	9000baf8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bad8:	687b      	ldr	r3, [r7, #4]
9000bada:	2202      	movs	r2, #2
9000badc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000bae0:	687b      	ldr	r3, [r7, #4]
9000bae2:	681b      	ldr	r3, [r3, #0]
9000bae4:	6839      	ldr	r1, [r7, #0]
9000bae6:	4618      	mov	r0, r3
9000bae8:	f000 fa5c 	bl	9000bfa4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
9000baec:	687b      	ldr	r3, [r7, #4]
9000baee:	2201      	movs	r2, #1
9000baf0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
9000baf4:	2300      	movs	r3, #0
9000baf6:	e000      	b.n	9000bafa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
9000baf8:	2301      	movs	r3, #1
}
9000bafa:	4618      	mov	r0, r3
9000bafc:	3708      	adds	r7, #8
9000bafe:	46bd      	mov	sp, r7
9000bb00:	bd80      	pop	{r7, pc}

9000bb02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
9000bb02:	b580      	push	{r7, lr}
9000bb04:	b082      	sub	sp, #8
9000bb06:	af00      	add	r7, sp, #0
9000bb08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
9000bb0a:	687b      	ldr	r3, [r7, #4]
9000bb0c:	2b00      	cmp	r3, #0
9000bb0e:	d101      	bne.n	9000bb14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
9000bb10:	2301      	movs	r3, #1
9000bb12:	e049      	b.n	9000bba8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
9000bb14:	687b      	ldr	r3, [r7, #4]
9000bb16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
9000bb1a:	b2db      	uxtb	r3, r3
9000bb1c:	2b00      	cmp	r3, #0
9000bb1e:	d106      	bne.n	9000bb2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
9000bb20:	687b      	ldr	r3, [r7, #4]
9000bb22:	2200      	movs	r2, #0
9000bb24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
9000bb28:	6878      	ldr	r0, [r7, #4]
9000bb2a:	f000 f89d 	bl	9000bc68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000bb2e:	687b      	ldr	r3, [r7, #4]
9000bb30:	2202      	movs	r2, #2
9000bb32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000bb36:	687b      	ldr	r3, [r7, #4]
9000bb38:	681a      	ldr	r2, [r3, #0]
9000bb3a:	687b      	ldr	r3, [r7, #4]
9000bb3c:	3304      	adds	r3, #4
9000bb3e:	4619      	mov	r1, r3
9000bb40:	4610      	mov	r0, r2
9000bb42:	f000 f8a5 	bl	9000bc90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000bb46:	687b      	ldr	r3, [r7, #4]
9000bb48:	2201      	movs	r2, #1
9000bb4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000bb4e:	687b      	ldr	r3, [r7, #4]
9000bb50:	2201      	movs	r2, #1
9000bb52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000bb56:	687b      	ldr	r3, [r7, #4]
9000bb58:	2201      	movs	r2, #1
9000bb5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000bb5e:	687b      	ldr	r3, [r7, #4]
9000bb60:	2201      	movs	r2, #1
9000bb62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000bb66:	687b      	ldr	r3, [r7, #4]
9000bb68:	2201      	movs	r2, #1
9000bb6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000bb6e:	687b      	ldr	r3, [r7, #4]
9000bb70:	2201      	movs	r2, #1
9000bb72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000bb76:	687b      	ldr	r3, [r7, #4]
9000bb78:	2201      	movs	r2, #1
9000bb7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000bb7e:	687b      	ldr	r3, [r7, #4]
9000bb80:	2201      	movs	r2, #1
9000bb82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000bb86:	687b      	ldr	r3, [r7, #4]
9000bb88:	2201      	movs	r2, #1
9000bb8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000bb8e:	687b      	ldr	r3, [r7, #4]
9000bb90:	2201      	movs	r2, #1
9000bb92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000bb96:	687b      	ldr	r3, [r7, #4]
9000bb98:	2201      	movs	r2, #1
9000bb9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
9000bb9e:	687b      	ldr	r3, [r7, #4]
9000bba0:	2201      	movs	r2, #1
9000bba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000bba6:	2300      	movs	r3, #0
}
9000bba8:	4618      	mov	r0, r3
9000bbaa:	3708      	adds	r7, #8
9000bbac:	46bd      	mov	sp, r7
9000bbae:	bd80      	pop	{r7, pc}

9000bbb0 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
9000bbb0:	b580      	push	{r7, lr}
9000bbb2:	b082      	sub	sp, #8
9000bbb4:	af00      	add	r7, sp, #0
9000bbb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
9000bbb8:	687b      	ldr	r3, [r7, #4]
9000bbba:	2202      	movs	r2, #2
9000bbbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
9000bbc0:	687b      	ldr	r3, [r7, #4]
9000bbc2:	681b      	ldr	r3, [r3, #0]
9000bbc4:	6a1a      	ldr	r2, [r3, #32]
9000bbc6:	f241 1311 	movw	r3, #4369	@ 0x1111
9000bbca:	4013      	ands	r3, r2
9000bbcc:	2b00      	cmp	r3, #0
9000bbce:	d10f      	bne.n	9000bbf0 <HAL_TIM_PWM_DeInit+0x40>
9000bbd0:	687b      	ldr	r3, [r7, #4]
9000bbd2:	681b      	ldr	r3, [r3, #0]
9000bbd4:	6a1a      	ldr	r2, [r3, #32]
9000bbd6:	f240 4344 	movw	r3, #1092	@ 0x444
9000bbda:	4013      	ands	r3, r2
9000bbdc:	2b00      	cmp	r3, #0
9000bbde:	d107      	bne.n	9000bbf0 <HAL_TIM_PWM_DeInit+0x40>
9000bbe0:	687b      	ldr	r3, [r7, #4]
9000bbe2:	681b      	ldr	r3, [r3, #0]
9000bbe4:	681a      	ldr	r2, [r3, #0]
9000bbe6:	687b      	ldr	r3, [r7, #4]
9000bbe8:	681b      	ldr	r3, [r3, #0]
9000bbea:	f022 0201 	bic.w	r2, r2, #1
9000bbee:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
9000bbf0:	6878      	ldr	r0, [r7, #4]
9000bbf2:	f000 f843 	bl	9000bc7c <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
9000bbf6:	687b      	ldr	r3, [r7, #4]
9000bbf8:	2200      	movs	r2, #0
9000bbfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000bbfe:	687b      	ldr	r3, [r7, #4]
9000bc00:	2200      	movs	r2, #0
9000bc02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000bc06:	687b      	ldr	r3, [r7, #4]
9000bc08:	2200      	movs	r2, #0
9000bc0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000bc0e:	687b      	ldr	r3, [r7, #4]
9000bc10:	2200      	movs	r2, #0
9000bc12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000bc16:	687b      	ldr	r3, [r7, #4]
9000bc18:	2200      	movs	r2, #0
9000bc1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000bc1e:	687b      	ldr	r3, [r7, #4]
9000bc20:	2200      	movs	r2, #0
9000bc22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000bc26:	687b      	ldr	r3, [r7, #4]
9000bc28:	2200      	movs	r2, #0
9000bc2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000bc2e:	687b      	ldr	r3, [r7, #4]
9000bc30:	2200      	movs	r2, #0
9000bc32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000bc36:	687b      	ldr	r3, [r7, #4]
9000bc38:	2200      	movs	r2, #0
9000bc3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000bc3e:	687b      	ldr	r3, [r7, #4]
9000bc40:	2200      	movs	r2, #0
9000bc42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000bc46:	687b      	ldr	r3, [r7, #4]
9000bc48:	2200      	movs	r2, #0
9000bc4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
9000bc4e:	687b      	ldr	r3, [r7, #4]
9000bc50:	2200      	movs	r2, #0
9000bc52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
9000bc56:	687b      	ldr	r3, [r7, #4]
9000bc58:	2200      	movs	r2, #0
9000bc5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
9000bc5e:	2300      	movs	r3, #0
}
9000bc60:	4618      	mov	r0, r3
9000bc62:	3708      	adds	r7, #8
9000bc64:	46bd      	mov	sp, r7
9000bc66:	bd80      	pop	{r7, pc}

9000bc68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
9000bc68:	b480      	push	{r7}
9000bc6a:	b083      	sub	sp, #12
9000bc6c:	af00      	add	r7, sp, #0
9000bc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
9000bc70:	bf00      	nop
9000bc72:	370c      	adds	r7, #12
9000bc74:	46bd      	mov	sp, r7
9000bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc7a:	4770      	bx	lr

9000bc7c <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
9000bc7c:	b480      	push	{r7}
9000bc7e:	b083      	sub	sp, #12
9000bc80:	af00      	add	r7, sp, #0
9000bc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
9000bc84:	bf00      	nop
9000bc86:	370c      	adds	r7, #12
9000bc88:	46bd      	mov	sp, r7
9000bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc8e:	4770      	bx	lr

9000bc90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
9000bc90:	b480      	push	{r7}
9000bc92:	b085      	sub	sp, #20
9000bc94:	af00      	add	r7, sp, #0
9000bc96:	6078      	str	r0, [r7, #4]
9000bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
9000bc9a:	687b      	ldr	r3, [r7, #4]
9000bc9c:	681b      	ldr	r3, [r3, #0]
9000bc9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bca0:	687b      	ldr	r3, [r7, #4]
9000bca2:	4a43      	ldr	r2, [pc, #268]	@ (9000bdb0 <TIM_Base_SetConfig+0x120>)
9000bca4:	4293      	cmp	r3, r2
9000bca6:	d013      	beq.n	9000bcd0 <TIM_Base_SetConfig+0x40>
9000bca8:	687b      	ldr	r3, [r7, #4]
9000bcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000bcae:	d00f      	beq.n	9000bcd0 <TIM_Base_SetConfig+0x40>
9000bcb0:	687b      	ldr	r3, [r7, #4]
9000bcb2:	4a40      	ldr	r2, [pc, #256]	@ (9000bdb4 <TIM_Base_SetConfig+0x124>)
9000bcb4:	4293      	cmp	r3, r2
9000bcb6:	d00b      	beq.n	9000bcd0 <TIM_Base_SetConfig+0x40>
9000bcb8:	687b      	ldr	r3, [r7, #4]
9000bcba:	4a3f      	ldr	r2, [pc, #252]	@ (9000bdb8 <TIM_Base_SetConfig+0x128>)
9000bcbc:	4293      	cmp	r3, r2
9000bcbe:	d007      	beq.n	9000bcd0 <TIM_Base_SetConfig+0x40>
9000bcc0:	687b      	ldr	r3, [r7, #4]
9000bcc2:	4a3e      	ldr	r2, [pc, #248]	@ (9000bdbc <TIM_Base_SetConfig+0x12c>)
9000bcc4:	4293      	cmp	r3, r2
9000bcc6:	d003      	beq.n	9000bcd0 <TIM_Base_SetConfig+0x40>
9000bcc8:	687b      	ldr	r3, [r7, #4]
9000bcca:	4a3d      	ldr	r2, [pc, #244]	@ (9000bdc0 <TIM_Base_SetConfig+0x130>)
9000bccc:	4293      	cmp	r3, r2
9000bcce:	d108      	bne.n	9000bce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000bcd0:	68fb      	ldr	r3, [r7, #12]
9000bcd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
9000bcd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
9000bcd8:	683b      	ldr	r3, [r7, #0]
9000bcda:	685b      	ldr	r3, [r3, #4]
9000bcdc:	68fa      	ldr	r2, [r7, #12]
9000bcde:	4313      	orrs	r3, r2
9000bce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bce2:	687b      	ldr	r3, [r7, #4]
9000bce4:	4a32      	ldr	r2, [pc, #200]	@ (9000bdb0 <TIM_Base_SetConfig+0x120>)
9000bce6:	4293      	cmp	r3, r2
9000bce8:	d01f      	beq.n	9000bd2a <TIM_Base_SetConfig+0x9a>
9000bcea:	687b      	ldr	r3, [r7, #4]
9000bcec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000bcf0:	d01b      	beq.n	9000bd2a <TIM_Base_SetConfig+0x9a>
9000bcf2:	687b      	ldr	r3, [r7, #4]
9000bcf4:	4a2f      	ldr	r2, [pc, #188]	@ (9000bdb4 <TIM_Base_SetConfig+0x124>)
9000bcf6:	4293      	cmp	r3, r2
9000bcf8:	d017      	beq.n	9000bd2a <TIM_Base_SetConfig+0x9a>
9000bcfa:	687b      	ldr	r3, [r7, #4]
9000bcfc:	4a2e      	ldr	r2, [pc, #184]	@ (9000bdb8 <TIM_Base_SetConfig+0x128>)
9000bcfe:	4293      	cmp	r3, r2
9000bd00:	d013      	beq.n	9000bd2a <TIM_Base_SetConfig+0x9a>
9000bd02:	687b      	ldr	r3, [r7, #4]
9000bd04:	4a2d      	ldr	r2, [pc, #180]	@ (9000bdbc <TIM_Base_SetConfig+0x12c>)
9000bd06:	4293      	cmp	r3, r2
9000bd08:	d00f      	beq.n	9000bd2a <TIM_Base_SetConfig+0x9a>
9000bd0a:	687b      	ldr	r3, [r7, #4]
9000bd0c:	4a2c      	ldr	r2, [pc, #176]	@ (9000bdc0 <TIM_Base_SetConfig+0x130>)
9000bd0e:	4293      	cmp	r3, r2
9000bd10:	d00b      	beq.n	9000bd2a <TIM_Base_SetConfig+0x9a>
9000bd12:	687b      	ldr	r3, [r7, #4]
9000bd14:	4a2b      	ldr	r2, [pc, #172]	@ (9000bdc4 <TIM_Base_SetConfig+0x134>)
9000bd16:	4293      	cmp	r3, r2
9000bd18:	d007      	beq.n	9000bd2a <TIM_Base_SetConfig+0x9a>
9000bd1a:	687b      	ldr	r3, [r7, #4]
9000bd1c:	4a2a      	ldr	r2, [pc, #168]	@ (9000bdc8 <TIM_Base_SetConfig+0x138>)
9000bd1e:	4293      	cmp	r3, r2
9000bd20:	d003      	beq.n	9000bd2a <TIM_Base_SetConfig+0x9a>
9000bd22:	687b      	ldr	r3, [r7, #4]
9000bd24:	4a29      	ldr	r2, [pc, #164]	@ (9000bdcc <TIM_Base_SetConfig+0x13c>)
9000bd26:	4293      	cmp	r3, r2
9000bd28:	d108      	bne.n	9000bd3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
9000bd2a:	68fb      	ldr	r3, [r7, #12]
9000bd2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000bd30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bd32:	683b      	ldr	r3, [r7, #0]
9000bd34:	68db      	ldr	r3, [r3, #12]
9000bd36:	68fa      	ldr	r2, [r7, #12]
9000bd38:	4313      	orrs	r3, r2
9000bd3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bd3c:	68fb      	ldr	r3, [r7, #12]
9000bd3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
9000bd42:	683b      	ldr	r3, [r7, #0]
9000bd44:	695b      	ldr	r3, [r3, #20]
9000bd46:	4313      	orrs	r3, r2
9000bd48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bd4a:	683b      	ldr	r3, [r7, #0]
9000bd4c:	689a      	ldr	r2, [r3, #8]
9000bd4e:	687b      	ldr	r3, [r7, #4]
9000bd50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000bd52:	683b      	ldr	r3, [r7, #0]
9000bd54:	681a      	ldr	r2, [r3, #0]
9000bd56:	687b      	ldr	r3, [r7, #4]
9000bd58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000bd5a:	687b      	ldr	r3, [r7, #4]
9000bd5c:	4a14      	ldr	r2, [pc, #80]	@ (9000bdb0 <TIM_Base_SetConfig+0x120>)
9000bd5e:	4293      	cmp	r3, r2
9000bd60:	d00f      	beq.n	9000bd82 <TIM_Base_SetConfig+0xf2>
9000bd62:	687b      	ldr	r3, [r7, #4]
9000bd64:	4a16      	ldr	r2, [pc, #88]	@ (9000bdc0 <TIM_Base_SetConfig+0x130>)
9000bd66:	4293      	cmp	r3, r2
9000bd68:	d00b      	beq.n	9000bd82 <TIM_Base_SetConfig+0xf2>
9000bd6a:	687b      	ldr	r3, [r7, #4]
9000bd6c:	4a15      	ldr	r2, [pc, #84]	@ (9000bdc4 <TIM_Base_SetConfig+0x134>)
9000bd6e:	4293      	cmp	r3, r2
9000bd70:	d007      	beq.n	9000bd82 <TIM_Base_SetConfig+0xf2>
9000bd72:	687b      	ldr	r3, [r7, #4]
9000bd74:	4a14      	ldr	r2, [pc, #80]	@ (9000bdc8 <TIM_Base_SetConfig+0x138>)
9000bd76:	4293      	cmp	r3, r2
9000bd78:	d003      	beq.n	9000bd82 <TIM_Base_SetConfig+0xf2>
9000bd7a:	687b      	ldr	r3, [r7, #4]
9000bd7c:	4a13      	ldr	r2, [pc, #76]	@ (9000bdcc <TIM_Base_SetConfig+0x13c>)
9000bd7e:	4293      	cmp	r3, r2
9000bd80:	d103      	bne.n	9000bd8a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000bd82:	683b      	ldr	r3, [r7, #0]
9000bd84:	691a      	ldr	r2, [r3, #16]
9000bd86:	687b      	ldr	r3, [r7, #4]
9000bd88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
9000bd8a:	687b      	ldr	r3, [r7, #4]
9000bd8c:	681b      	ldr	r3, [r3, #0]
9000bd8e:	f043 0204 	orr.w	r2, r3, #4
9000bd92:	687b      	ldr	r3, [r7, #4]
9000bd94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000bd96:	687b      	ldr	r3, [r7, #4]
9000bd98:	2201      	movs	r2, #1
9000bd9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
9000bd9c:	687b      	ldr	r3, [r7, #4]
9000bd9e:	68fa      	ldr	r2, [r7, #12]
9000bda0:	601a      	str	r2, [r3, #0]
}
9000bda2:	bf00      	nop
9000bda4:	3714      	adds	r7, #20
9000bda6:	46bd      	mov	sp, r7
9000bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bdac:	4770      	bx	lr
9000bdae:	bf00      	nop
9000bdb0:	40010000 	.word	0x40010000
9000bdb4:	40000400 	.word	0x40000400
9000bdb8:	40000800 	.word	0x40000800
9000bdbc:	40000c00 	.word	0x40000c00
9000bdc0:	40010400 	.word	0x40010400
9000bdc4:	40014000 	.word	0x40014000
9000bdc8:	40014400 	.word	0x40014400
9000bdcc:	40014800 	.word	0x40014800

9000bdd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000bdd0:	b480      	push	{r7}
9000bdd2:	b083      	sub	sp, #12
9000bdd4:	af00      	add	r7, sp, #0
9000bdd6:	6078      	str	r0, [r7, #4]
9000bdd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000bdda:	683b      	ldr	r3, [r7, #0]
9000bddc:	681b      	ldr	r3, [r3, #0]
9000bdde:	2b00      	cmp	r3, #0
9000bde0:	d121      	bne.n	9000be26 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bde2:	687b      	ldr	r3, [r7, #4]
9000bde4:	681a      	ldr	r2, [r3, #0]
9000bde6:	4b27      	ldr	r3, [pc, #156]	@ (9000be84 <FMC_SDRAM_Init+0xb4>)
9000bde8:	4013      	ands	r3, r2
9000bdea:	683a      	ldr	r2, [r7, #0]
9000bdec:	6851      	ldr	r1, [r2, #4]
9000bdee:	683a      	ldr	r2, [r7, #0]
9000bdf0:	6892      	ldr	r2, [r2, #8]
9000bdf2:	4311      	orrs	r1, r2
9000bdf4:	683a      	ldr	r2, [r7, #0]
9000bdf6:	68d2      	ldr	r2, [r2, #12]
9000bdf8:	4311      	orrs	r1, r2
9000bdfa:	683a      	ldr	r2, [r7, #0]
9000bdfc:	6912      	ldr	r2, [r2, #16]
9000bdfe:	4311      	orrs	r1, r2
9000be00:	683a      	ldr	r2, [r7, #0]
9000be02:	6952      	ldr	r2, [r2, #20]
9000be04:	4311      	orrs	r1, r2
9000be06:	683a      	ldr	r2, [r7, #0]
9000be08:	6992      	ldr	r2, [r2, #24]
9000be0a:	4311      	orrs	r1, r2
9000be0c:	683a      	ldr	r2, [r7, #0]
9000be0e:	69d2      	ldr	r2, [r2, #28]
9000be10:	4311      	orrs	r1, r2
9000be12:	683a      	ldr	r2, [r7, #0]
9000be14:	6a12      	ldr	r2, [r2, #32]
9000be16:	4311      	orrs	r1, r2
9000be18:	683a      	ldr	r2, [r7, #0]
9000be1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000be1c:	430a      	orrs	r2, r1
9000be1e:	431a      	orrs	r2, r3
9000be20:	687b      	ldr	r3, [r7, #4]
9000be22:	601a      	str	r2, [r3, #0]
9000be24:	e026      	b.n	9000be74 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000be26:	687b      	ldr	r3, [r7, #4]
9000be28:	681b      	ldr	r3, [r3, #0]
9000be2a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000be2e:	683b      	ldr	r3, [r7, #0]
9000be30:	69d9      	ldr	r1, [r3, #28]
9000be32:	683b      	ldr	r3, [r7, #0]
9000be34:	6a1b      	ldr	r3, [r3, #32]
9000be36:	4319      	orrs	r1, r3
9000be38:	683b      	ldr	r3, [r7, #0]
9000be3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000be3c:	430b      	orrs	r3, r1
9000be3e:	431a      	orrs	r2, r3
9000be40:	687b      	ldr	r3, [r7, #4]
9000be42:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000be44:	687b      	ldr	r3, [r7, #4]
9000be46:	685a      	ldr	r2, [r3, #4]
9000be48:	4b0e      	ldr	r3, [pc, #56]	@ (9000be84 <FMC_SDRAM_Init+0xb4>)
9000be4a:	4013      	ands	r3, r2
9000be4c:	683a      	ldr	r2, [r7, #0]
9000be4e:	6851      	ldr	r1, [r2, #4]
9000be50:	683a      	ldr	r2, [r7, #0]
9000be52:	6892      	ldr	r2, [r2, #8]
9000be54:	4311      	orrs	r1, r2
9000be56:	683a      	ldr	r2, [r7, #0]
9000be58:	68d2      	ldr	r2, [r2, #12]
9000be5a:	4311      	orrs	r1, r2
9000be5c:	683a      	ldr	r2, [r7, #0]
9000be5e:	6912      	ldr	r2, [r2, #16]
9000be60:	4311      	orrs	r1, r2
9000be62:	683a      	ldr	r2, [r7, #0]
9000be64:	6952      	ldr	r2, [r2, #20]
9000be66:	4311      	orrs	r1, r2
9000be68:	683a      	ldr	r2, [r7, #0]
9000be6a:	6992      	ldr	r2, [r2, #24]
9000be6c:	430a      	orrs	r2, r1
9000be6e:	431a      	orrs	r2, r3
9000be70:	687b      	ldr	r3, [r7, #4]
9000be72:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000be74:	2300      	movs	r3, #0
}
9000be76:	4618      	mov	r0, r3
9000be78:	370c      	adds	r7, #12
9000be7a:	46bd      	mov	sp, r7
9000be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000be80:	4770      	bx	lr
9000be82:	bf00      	nop
9000be84:	ffff8000 	.word	0xffff8000

9000be88 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000be88:	b480      	push	{r7}
9000be8a:	b085      	sub	sp, #20
9000be8c:	af00      	add	r7, sp, #0
9000be8e:	60f8      	str	r0, [r7, #12]
9000be90:	60b9      	str	r1, [r7, #8]
9000be92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000be94:	687b      	ldr	r3, [r7, #4]
9000be96:	2b00      	cmp	r3, #0
9000be98:	d128      	bne.n	9000beec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000be9a:	68fb      	ldr	r3, [r7, #12]
9000be9c:	689b      	ldr	r3, [r3, #8]
9000be9e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000bea2:	68bb      	ldr	r3, [r7, #8]
9000bea4:	681b      	ldr	r3, [r3, #0]
9000bea6:	1e59      	subs	r1, r3, #1
9000bea8:	68bb      	ldr	r3, [r7, #8]
9000beaa:	685b      	ldr	r3, [r3, #4]
9000beac:	3b01      	subs	r3, #1
9000beae:	011b      	lsls	r3, r3, #4
9000beb0:	4319      	orrs	r1, r3
9000beb2:	68bb      	ldr	r3, [r7, #8]
9000beb4:	689b      	ldr	r3, [r3, #8]
9000beb6:	3b01      	subs	r3, #1
9000beb8:	021b      	lsls	r3, r3, #8
9000beba:	4319      	orrs	r1, r3
9000bebc:	68bb      	ldr	r3, [r7, #8]
9000bebe:	68db      	ldr	r3, [r3, #12]
9000bec0:	3b01      	subs	r3, #1
9000bec2:	031b      	lsls	r3, r3, #12
9000bec4:	4319      	orrs	r1, r3
9000bec6:	68bb      	ldr	r3, [r7, #8]
9000bec8:	691b      	ldr	r3, [r3, #16]
9000beca:	3b01      	subs	r3, #1
9000becc:	041b      	lsls	r3, r3, #16
9000bece:	4319      	orrs	r1, r3
9000bed0:	68bb      	ldr	r3, [r7, #8]
9000bed2:	695b      	ldr	r3, [r3, #20]
9000bed4:	3b01      	subs	r3, #1
9000bed6:	051b      	lsls	r3, r3, #20
9000bed8:	4319      	orrs	r1, r3
9000beda:	68bb      	ldr	r3, [r7, #8]
9000bedc:	699b      	ldr	r3, [r3, #24]
9000bede:	3b01      	subs	r3, #1
9000bee0:	061b      	lsls	r3, r3, #24
9000bee2:	430b      	orrs	r3, r1
9000bee4:	431a      	orrs	r2, r3
9000bee6:	68fb      	ldr	r3, [r7, #12]
9000bee8:	609a      	str	r2, [r3, #8]
9000beea:	e02d      	b.n	9000bf48 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000beec:	68fb      	ldr	r3, [r7, #12]
9000beee:	689a      	ldr	r2, [r3, #8]
9000bef0:	4b19      	ldr	r3, [pc, #100]	@ (9000bf58 <FMC_SDRAM_Timing_Init+0xd0>)
9000bef2:	4013      	ands	r3, r2
9000bef4:	68ba      	ldr	r2, [r7, #8]
9000bef6:	68d2      	ldr	r2, [r2, #12]
9000bef8:	3a01      	subs	r2, #1
9000befa:	0311      	lsls	r1, r2, #12
9000befc:	68ba      	ldr	r2, [r7, #8]
9000befe:	6952      	ldr	r2, [r2, #20]
9000bf00:	3a01      	subs	r2, #1
9000bf02:	0512      	lsls	r2, r2, #20
9000bf04:	430a      	orrs	r2, r1
9000bf06:	431a      	orrs	r2, r3
9000bf08:	68fb      	ldr	r3, [r7, #12]
9000bf0a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000bf0c:	68fb      	ldr	r3, [r7, #12]
9000bf0e:	68db      	ldr	r3, [r3, #12]
9000bf10:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000bf14:	68bb      	ldr	r3, [r7, #8]
9000bf16:	681b      	ldr	r3, [r3, #0]
9000bf18:	1e59      	subs	r1, r3, #1
9000bf1a:	68bb      	ldr	r3, [r7, #8]
9000bf1c:	685b      	ldr	r3, [r3, #4]
9000bf1e:	3b01      	subs	r3, #1
9000bf20:	011b      	lsls	r3, r3, #4
9000bf22:	4319      	orrs	r1, r3
9000bf24:	68bb      	ldr	r3, [r7, #8]
9000bf26:	689b      	ldr	r3, [r3, #8]
9000bf28:	3b01      	subs	r3, #1
9000bf2a:	021b      	lsls	r3, r3, #8
9000bf2c:	4319      	orrs	r1, r3
9000bf2e:	68bb      	ldr	r3, [r7, #8]
9000bf30:	691b      	ldr	r3, [r3, #16]
9000bf32:	3b01      	subs	r3, #1
9000bf34:	041b      	lsls	r3, r3, #16
9000bf36:	4319      	orrs	r1, r3
9000bf38:	68bb      	ldr	r3, [r7, #8]
9000bf3a:	699b      	ldr	r3, [r3, #24]
9000bf3c:	3b01      	subs	r3, #1
9000bf3e:	061b      	lsls	r3, r3, #24
9000bf40:	430b      	orrs	r3, r1
9000bf42:	431a      	orrs	r2, r3
9000bf44:	68fb      	ldr	r3, [r7, #12]
9000bf46:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000bf48:	2300      	movs	r3, #0
}
9000bf4a:	4618      	mov	r0, r3
9000bf4c:	3714      	adds	r7, #20
9000bf4e:	46bd      	mov	sp, r7
9000bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf54:	4770      	bx	lr
9000bf56:	bf00      	nop
9000bf58:	ff0f0fff 	.word	0xff0f0fff

9000bf5c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000bf5c:	b480      	push	{r7}
9000bf5e:	b085      	sub	sp, #20
9000bf60:	af00      	add	r7, sp, #0
9000bf62:	60f8      	str	r0, [r7, #12]
9000bf64:	60b9      	str	r1, [r7, #8]
9000bf66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000bf68:	68fb      	ldr	r3, [r7, #12]
9000bf6a:	691a      	ldr	r2, [r3, #16]
9000bf6c:	4b0c      	ldr	r3, [pc, #48]	@ (9000bfa0 <FMC_SDRAM_SendCommand+0x44>)
9000bf6e:	4013      	ands	r3, r2
9000bf70:	68ba      	ldr	r2, [r7, #8]
9000bf72:	6811      	ldr	r1, [r2, #0]
9000bf74:	68ba      	ldr	r2, [r7, #8]
9000bf76:	6852      	ldr	r2, [r2, #4]
9000bf78:	4311      	orrs	r1, r2
9000bf7a:	68ba      	ldr	r2, [r7, #8]
9000bf7c:	6892      	ldr	r2, [r2, #8]
9000bf7e:	3a01      	subs	r2, #1
9000bf80:	0152      	lsls	r2, r2, #5
9000bf82:	4311      	orrs	r1, r2
9000bf84:	68ba      	ldr	r2, [r7, #8]
9000bf86:	68d2      	ldr	r2, [r2, #12]
9000bf88:	0252      	lsls	r2, r2, #9
9000bf8a:	430a      	orrs	r2, r1
9000bf8c:	431a      	orrs	r2, r3
9000bf8e:	68fb      	ldr	r3, [r7, #12]
9000bf90:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000bf92:	2300      	movs	r3, #0
}
9000bf94:	4618      	mov	r0, r3
9000bf96:	3714      	adds	r7, #20
9000bf98:	46bd      	mov	sp, r7
9000bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf9e:	4770      	bx	lr
9000bfa0:	ffc00000 	.word	0xffc00000

9000bfa4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000bfa4:	b480      	push	{r7}
9000bfa6:	b083      	sub	sp, #12
9000bfa8:	af00      	add	r7, sp, #0
9000bfaa:	6078      	str	r0, [r7, #4]
9000bfac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000bfae:	687b      	ldr	r3, [r7, #4]
9000bfb0:	695a      	ldr	r2, [r3, #20]
9000bfb2:	4b07      	ldr	r3, [pc, #28]	@ (9000bfd0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000bfb4:	4013      	ands	r3, r2
9000bfb6:	683a      	ldr	r2, [r7, #0]
9000bfb8:	0052      	lsls	r2, r2, #1
9000bfba:	431a      	orrs	r2, r3
9000bfbc:	687b      	ldr	r3, [r7, #4]
9000bfbe:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000bfc0:	2300      	movs	r3, #0
}
9000bfc2:	4618      	mov	r0, r3
9000bfc4:	370c      	adds	r7, #12
9000bfc6:	46bd      	mov	sp, r7
9000bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bfcc:	4770      	bx	lr
9000bfce:	bf00      	nop
9000bfd0:	ffffc001 	.word	0xffffc001

9000bfd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
9000bfd4:	b084      	sub	sp, #16
9000bfd6:	b580      	push	{r7, lr}
9000bfd8:	b084      	sub	sp, #16
9000bfda:	af00      	add	r7, sp, #0
9000bfdc:	6078      	str	r0, [r7, #4]
9000bfde:	f107 001c 	add.w	r0, r7, #28
9000bfe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
9000bfe6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
9000bfea:	2b01      	cmp	r3, #1
9000bfec:	d121      	bne.n	9000c032 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
9000bfee:	687b      	ldr	r3, [r7, #4]
9000bff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000bff2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
9000bff6:	687b      	ldr	r3, [r7, #4]
9000bff8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
9000bffa:	687b      	ldr	r3, [r7, #4]
9000bffc:	68da      	ldr	r2, [r3, #12]
9000bffe:	4b2c      	ldr	r3, [pc, #176]	@ (9000c0b0 <USB_CoreInit+0xdc>)
9000c000:	4013      	ands	r3, r2
9000c002:	687a      	ldr	r2, [r7, #4]
9000c004:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
9000c006:	687b      	ldr	r3, [r7, #4]
9000c008:	68db      	ldr	r3, [r3, #12]
9000c00a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
9000c00e:	687b      	ldr	r3, [r7, #4]
9000c010:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
9000c012:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
9000c016:	2b01      	cmp	r3, #1
9000c018:	d105      	bne.n	9000c026 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
9000c01a:	687b      	ldr	r3, [r7, #4]
9000c01c:	68db      	ldr	r3, [r3, #12]
9000c01e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
9000c022:	687b      	ldr	r3, [r7, #4]
9000c024:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
9000c026:	6878      	ldr	r0, [r7, #4]
9000c028:	f000 f9ec 	bl	9000c404 <USB_CoreReset>
9000c02c:	4603      	mov	r3, r0
9000c02e:	73fb      	strb	r3, [r7, #15]
9000c030:	e01b      	b.n	9000c06a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
9000c032:	687b      	ldr	r3, [r7, #4]
9000c034:	68db      	ldr	r3, [r3, #12]
9000c036:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
9000c03a:	687b      	ldr	r3, [r7, #4]
9000c03c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
9000c03e:	6878      	ldr	r0, [r7, #4]
9000c040:	f000 f9e0 	bl	9000c404 <USB_CoreReset>
9000c044:	4603      	mov	r3, r0
9000c046:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
9000c048:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
9000c04c:	2b00      	cmp	r3, #0
9000c04e:	d106      	bne.n	9000c05e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
9000c050:	687b      	ldr	r3, [r7, #4]
9000c052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000c054:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
9000c058:	687b      	ldr	r3, [r7, #4]
9000c05a:	639a      	str	r2, [r3, #56]	@ 0x38
9000c05c:	e005      	b.n	9000c06a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
9000c05e:	687b      	ldr	r3, [r7, #4]
9000c060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000c062:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
9000c066:	687b      	ldr	r3, [r7, #4]
9000c068:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
9000c06a:	7fbb      	ldrb	r3, [r7, #30]
9000c06c:	2b01      	cmp	r3, #1
9000c06e:	d116      	bne.n	9000c09e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
9000c070:	687b      	ldr	r3, [r7, #4]
9000c072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
9000c074:	b29a      	uxth	r2, r3
9000c076:	687b      	ldr	r3, [r7, #4]
9000c078:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
9000c07a:	687b      	ldr	r3, [r7, #4]
9000c07c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
9000c07e:	4b0d      	ldr	r3, [pc, #52]	@ (9000c0b4 <USB_CoreInit+0xe0>)
9000c080:	4313      	orrs	r3, r2
9000c082:	687a      	ldr	r2, [r7, #4]
9000c084:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
9000c086:	687b      	ldr	r3, [r7, #4]
9000c088:	689b      	ldr	r3, [r3, #8]
9000c08a:	f043 0206 	orr.w	r2, r3, #6
9000c08e:	687b      	ldr	r3, [r7, #4]
9000c090:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
9000c092:	687b      	ldr	r3, [r7, #4]
9000c094:	689b      	ldr	r3, [r3, #8]
9000c096:	f043 0220 	orr.w	r2, r3, #32
9000c09a:	687b      	ldr	r3, [r7, #4]
9000c09c:	609a      	str	r2, [r3, #8]
  }

  return ret;
9000c09e:	7bfb      	ldrb	r3, [r7, #15]
}
9000c0a0:	4618      	mov	r0, r3
9000c0a2:	3710      	adds	r7, #16
9000c0a4:	46bd      	mov	sp, r7
9000c0a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
9000c0aa:	b004      	add	sp, #16
9000c0ac:	4770      	bx	lr
9000c0ae:	bf00      	nop
9000c0b0:	ffbdffbf 	.word	0xffbdffbf
9000c0b4:	03ee0000 	.word	0x03ee0000

9000c0b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000c0b8:	b480      	push	{r7}
9000c0ba:	b083      	sub	sp, #12
9000c0bc:	af00      	add	r7, sp, #0
9000c0be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000c0c0:	687b      	ldr	r3, [r7, #4]
9000c0c2:	689b      	ldr	r3, [r3, #8]
9000c0c4:	f043 0201 	orr.w	r2, r3, #1
9000c0c8:	687b      	ldr	r3, [r7, #4]
9000c0ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000c0cc:	2300      	movs	r3, #0
}
9000c0ce:	4618      	mov	r0, r3
9000c0d0:	370c      	adds	r7, #12
9000c0d2:	46bd      	mov	sp, r7
9000c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c0d8:	4770      	bx	lr

9000c0da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000c0da:	b480      	push	{r7}
9000c0dc:	b083      	sub	sp, #12
9000c0de:	af00      	add	r7, sp, #0
9000c0e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000c0e2:	687b      	ldr	r3, [r7, #4]
9000c0e4:	689b      	ldr	r3, [r3, #8]
9000c0e6:	f023 0201 	bic.w	r2, r3, #1
9000c0ea:	687b      	ldr	r3, [r7, #4]
9000c0ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000c0ee:	2300      	movs	r3, #0
}
9000c0f0:	4618      	mov	r0, r3
9000c0f2:	370c      	adds	r7, #12
9000c0f4:	46bd      	mov	sp, r7
9000c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c0fa:	4770      	bx	lr

9000c0fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
9000c0fc:	b580      	push	{r7, lr}
9000c0fe:	b084      	sub	sp, #16
9000c100:	af00      	add	r7, sp, #0
9000c102:	6078      	str	r0, [r7, #4]
9000c104:	460b      	mov	r3, r1
9000c106:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
9000c108:	2300      	movs	r3, #0
9000c10a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
9000c10c:	687b      	ldr	r3, [r7, #4]
9000c10e:	68db      	ldr	r3, [r3, #12]
9000c110:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
9000c114:	687b      	ldr	r3, [r7, #4]
9000c116:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
9000c118:	78fb      	ldrb	r3, [r7, #3]
9000c11a:	2b01      	cmp	r3, #1
9000c11c:	d115      	bne.n	9000c14a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
9000c11e:	687b      	ldr	r3, [r7, #4]
9000c120:	68db      	ldr	r3, [r3, #12]
9000c122:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
9000c126:	687b      	ldr	r3, [r7, #4]
9000c128:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
9000c12a:	200a      	movs	r0, #10
9000c12c:	f7f8 fd52 	bl	90004bd4 <HAL_Delay>
      ms += 10U;
9000c130:	68fb      	ldr	r3, [r7, #12]
9000c132:	330a      	adds	r3, #10
9000c134:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
9000c136:	6878      	ldr	r0, [r7, #4]
9000c138:	f000 f956 	bl	9000c3e8 <USB_GetMode>
9000c13c:	4603      	mov	r3, r0
9000c13e:	2b01      	cmp	r3, #1
9000c140:	d01e      	beq.n	9000c180 <USB_SetCurrentMode+0x84>
9000c142:	68fb      	ldr	r3, [r7, #12]
9000c144:	2bc7      	cmp	r3, #199	@ 0xc7
9000c146:	d9f0      	bls.n	9000c12a <USB_SetCurrentMode+0x2e>
9000c148:	e01a      	b.n	9000c180 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
9000c14a:	78fb      	ldrb	r3, [r7, #3]
9000c14c:	2b00      	cmp	r3, #0
9000c14e:	d115      	bne.n	9000c17c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
9000c150:	687b      	ldr	r3, [r7, #4]
9000c152:	68db      	ldr	r3, [r3, #12]
9000c154:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
9000c158:	687b      	ldr	r3, [r7, #4]
9000c15a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
9000c15c:	200a      	movs	r0, #10
9000c15e:	f7f8 fd39 	bl	90004bd4 <HAL_Delay>
      ms += 10U;
9000c162:	68fb      	ldr	r3, [r7, #12]
9000c164:	330a      	adds	r3, #10
9000c166:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
9000c168:	6878      	ldr	r0, [r7, #4]
9000c16a:	f000 f93d 	bl	9000c3e8 <USB_GetMode>
9000c16e:	4603      	mov	r3, r0
9000c170:	2b00      	cmp	r3, #0
9000c172:	d005      	beq.n	9000c180 <USB_SetCurrentMode+0x84>
9000c174:	68fb      	ldr	r3, [r7, #12]
9000c176:	2bc7      	cmp	r3, #199	@ 0xc7
9000c178:	d9f0      	bls.n	9000c15c <USB_SetCurrentMode+0x60>
9000c17a:	e001      	b.n	9000c180 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
9000c17c:	2301      	movs	r3, #1
9000c17e:	e005      	b.n	9000c18c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
9000c180:	68fb      	ldr	r3, [r7, #12]
9000c182:	2bc8      	cmp	r3, #200	@ 0xc8
9000c184:	d101      	bne.n	9000c18a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
9000c186:	2301      	movs	r3, #1
9000c188:	e000      	b.n	9000c18c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
9000c18a:	2300      	movs	r3, #0
}
9000c18c:	4618      	mov	r0, r3
9000c18e:	3710      	adds	r7, #16
9000c190:	46bd      	mov	sp, r7
9000c192:	bd80      	pop	{r7, pc}

9000c194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000c194:	b480      	push	{r7}
9000c196:	b085      	sub	sp, #20
9000c198:	af00      	add	r7, sp, #0
9000c19a:	6078      	str	r0, [r7, #4]
9000c19c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000c19e:	2300      	movs	r3, #0
9000c1a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000c1a2:	68fb      	ldr	r3, [r7, #12]
9000c1a4:	3301      	adds	r3, #1
9000c1a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000c1a8:	68fb      	ldr	r3, [r7, #12]
9000c1aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000c1ae:	d901      	bls.n	9000c1b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000c1b0:	2303      	movs	r3, #3
9000c1b2:	e01b      	b.n	9000c1ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000c1b4:	687b      	ldr	r3, [r7, #4]
9000c1b6:	691b      	ldr	r3, [r3, #16]
9000c1b8:	2b00      	cmp	r3, #0
9000c1ba:	daf2      	bge.n	9000c1a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000c1bc:	2300      	movs	r3, #0
9000c1be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000c1c0:	683b      	ldr	r3, [r7, #0]
9000c1c2:	019b      	lsls	r3, r3, #6
9000c1c4:	f043 0220 	orr.w	r2, r3, #32
9000c1c8:	687b      	ldr	r3, [r7, #4]
9000c1ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000c1cc:	68fb      	ldr	r3, [r7, #12]
9000c1ce:	3301      	adds	r3, #1
9000c1d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000c1d2:	68fb      	ldr	r3, [r7, #12]
9000c1d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000c1d8:	d901      	bls.n	9000c1de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000c1da:	2303      	movs	r3, #3
9000c1dc:	e006      	b.n	9000c1ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000c1de:	687b      	ldr	r3, [r7, #4]
9000c1e0:	691b      	ldr	r3, [r3, #16]
9000c1e2:	f003 0320 	and.w	r3, r3, #32
9000c1e6:	2b20      	cmp	r3, #32
9000c1e8:	d0f0      	beq.n	9000c1cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000c1ea:	2300      	movs	r3, #0
}
9000c1ec:	4618      	mov	r0, r3
9000c1ee:	3714      	adds	r7, #20
9000c1f0:	46bd      	mov	sp, r7
9000c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c1f6:	4770      	bx	lr

9000c1f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000c1f8:	b480      	push	{r7}
9000c1fa:	b085      	sub	sp, #20
9000c1fc:	af00      	add	r7, sp, #0
9000c1fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000c200:	2300      	movs	r3, #0
9000c202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000c204:	68fb      	ldr	r3, [r7, #12]
9000c206:	3301      	adds	r3, #1
9000c208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000c20a:	68fb      	ldr	r3, [r7, #12]
9000c20c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000c210:	d901      	bls.n	9000c216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000c212:	2303      	movs	r3, #3
9000c214:	e018      	b.n	9000c248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000c216:	687b      	ldr	r3, [r7, #4]
9000c218:	691b      	ldr	r3, [r3, #16]
9000c21a:	2b00      	cmp	r3, #0
9000c21c:	daf2      	bge.n	9000c204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000c21e:	2300      	movs	r3, #0
9000c220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000c222:	687b      	ldr	r3, [r7, #4]
9000c224:	2210      	movs	r2, #16
9000c226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000c228:	68fb      	ldr	r3, [r7, #12]
9000c22a:	3301      	adds	r3, #1
9000c22c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000c22e:	68fb      	ldr	r3, [r7, #12]
9000c230:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000c234:	d901      	bls.n	9000c23a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000c236:	2303      	movs	r3, #3
9000c238:	e006      	b.n	9000c248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000c23a:	687b      	ldr	r3, [r7, #4]
9000c23c:	691b      	ldr	r3, [r3, #16]
9000c23e:	f003 0310 	and.w	r3, r3, #16
9000c242:	2b10      	cmp	r3, #16
9000c244:	d0f0      	beq.n	9000c228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000c246:	2300      	movs	r3, #0
}
9000c248:	4618      	mov	r0, r3
9000c24a:	3714      	adds	r7, #20
9000c24c:	46bd      	mov	sp, r7
9000c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c252:	4770      	bx	lr

9000c254 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
9000c254:	b480      	push	{r7}
9000c256:	b089      	sub	sp, #36	@ 0x24
9000c258:	af00      	add	r7, sp, #0
9000c25a:	60f8      	str	r0, [r7, #12]
9000c25c:	60b9      	str	r1, [r7, #8]
9000c25e:	4611      	mov	r1, r2
9000c260:	461a      	mov	r2, r3
9000c262:	460b      	mov	r3, r1
9000c264:	71fb      	strb	r3, [r7, #7]
9000c266:	4613      	mov	r3, r2
9000c268:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c26a:	68fb      	ldr	r3, [r7, #12]
9000c26c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
9000c26e:	68bb      	ldr	r3, [r7, #8]
9000c270:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
9000c272:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
9000c276:	2b00      	cmp	r3, #0
9000c278:	d123      	bne.n	9000c2c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
9000c27a:	88bb      	ldrh	r3, [r7, #4]
9000c27c:	3303      	adds	r3, #3
9000c27e:	089b      	lsrs	r3, r3, #2
9000c280:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
9000c282:	2300      	movs	r3, #0
9000c284:	61bb      	str	r3, [r7, #24]
9000c286:	e018      	b.n	9000c2ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
9000c288:	79fb      	ldrb	r3, [r7, #7]
9000c28a:	031a      	lsls	r2, r3, #12
9000c28c:	697b      	ldr	r3, [r7, #20]
9000c28e:	4413      	add	r3, r2
9000c290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000c294:	461a      	mov	r2, r3
9000c296:	69fb      	ldr	r3, [r7, #28]
9000c298:	681b      	ldr	r3, [r3, #0]
9000c29a:	6013      	str	r3, [r2, #0]
      pSrc++;
9000c29c:	69fb      	ldr	r3, [r7, #28]
9000c29e:	3301      	adds	r3, #1
9000c2a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
9000c2a2:	69fb      	ldr	r3, [r7, #28]
9000c2a4:	3301      	adds	r3, #1
9000c2a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
9000c2a8:	69fb      	ldr	r3, [r7, #28]
9000c2aa:	3301      	adds	r3, #1
9000c2ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
9000c2ae:	69fb      	ldr	r3, [r7, #28]
9000c2b0:	3301      	adds	r3, #1
9000c2b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
9000c2b4:	69bb      	ldr	r3, [r7, #24]
9000c2b6:	3301      	adds	r3, #1
9000c2b8:	61bb      	str	r3, [r7, #24]
9000c2ba:	69ba      	ldr	r2, [r7, #24]
9000c2bc:	693b      	ldr	r3, [r7, #16]
9000c2be:	429a      	cmp	r2, r3
9000c2c0:	d3e2      	bcc.n	9000c288 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
9000c2c2:	2300      	movs	r3, #0
}
9000c2c4:	4618      	mov	r0, r3
9000c2c6:	3724      	adds	r7, #36	@ 0x24
9000c2c8:	46bd      	mov	sp, r7
9000c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c2ce:	4770      	bx	lr

9000c2d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000c2d0:	b480      	push	{r7}
9000c2d2:	b08b      	sub	sp, #44	@ 0x2c
9000c2d4:	af00      	add	r7, sp, #0
9000c2d6:	60f8      	str	r0, [r7, #12]
9000c2d8:	60b9      	str	r1, [r7, #8]
9000c2da:	4613      	mov	r3, r2
9000c2dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c2de:	68fb      	ldr	r3, [r7, #12]
9000c2e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000c2e2:	68bb      	ldr	r3, [r7, #8]
9000c2e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000c2e6:	88fb      	ldrh	r3, [r7, #6]
9000c2e8:	089b      	lsrs	r3, r3, #2
9000c2ea:	b29b      	uxth	r3, r3
9000c2ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000c2ee:	88fb      	ldrh	r3, [r7, #6]
9000c2f0:	f003 0303 	and.w	r3, r3, #3
9000c2f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000c2f6:	2300      	movs	r3, #0
9000c2f8:	623b      	str	r3, [r7, #32]
9000c2fa:	e014      	b.n	9000c326 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000c2fc:	69bb      	ldr	r3, [r7, #24]
9000c2fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000c302:	681a      	ldr	r2, [r3, #0]
9000c304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c306:	601a      	str	r2, [r3, #0]
    pDest++;
9000c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c30a:	3301      	adds	r3, #1
9000c30c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c310:	3301      	adds	r3, #1
9000c312:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000c314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c316:	3301      	adds	r3, #1
9000c318:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000c31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c31c:	3301      	adds	r3, #1
9000c31e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000c320:	6a3b      	ldr	r3, [r7, #32]
9000c322:	3301      	adds	r3, #1
9000c324:	623b      	str	r3, [r7, #32]
9000c326:	6a3a      	ldr	r2, [r7, #32]
9000c328:	697b      	ldr	r3, [r7, #20]
9000c32a:	429a      	cmp	r2, r3
9000c32c:	d3e6      	bcc.n	9000c2fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000c32e:	8bfb      	ldrh	r3, [r7, #30]
9000c330:	2b00      	cmp	r3, #0
9000c332:	d01e      	beq.n	9000c372 <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000c334:	2300      	movs	r3, #0
9000c336:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000c338:	69bb      	ldr	r3, [r7, #24]
9000c33a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000c33e:	461a      	mov	r2, r3
9000c340:	f107 0310 	add.w	r3, r7, #16
9000c344:	6812      	ldr	r2, [r2, #0]
9000c346:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000c348:	693a      	ldr	r2, [r7, #16]
9000c34a:	6a3b      	ldr	r3, [r7, #32]
9000c34c:	b2db      	uxtb	r3, r3
9000c34e:	00db      	lsls	r3, r3, #3
9000c350:	fa22 f303 	lsr.w	r3, r2, r3
9000c354:	b2da      	uxtb	r2, r3
9000c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c358:	701a      	strb	r2, [r3, #0]
      i++;
9000c35a:	6a3b      	ldr	r3, [r7, #32]
9000c35c:	3301      	adds	r3, #1
9000c35e:	623b      	str	r3, [r7, #32]
      pDest++;
9000c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c362:	3301      	adds	r3, #1
9000c364:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000c366:	8bfb      	ldrh	r3, [r7, #30]
9000c368:	3b01      	subs	r3, #1
9000c36a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000c36c:	8bfb      	ldrh	r3, [r7, #30]
9000c36e:	2b00      	cmp	r3, #0
9000c370:	d1ea      	bne.n	9000c348 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000c372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000c374:	4618      	mov	r0, r3
9000c376:	372c      	adds	r7, #44	@ 0x2c
9000c378:	46bd      	mov	sp, r7
9000c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c37e:	4770      	bx	lr

9000c380 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000c380:	b480      	push	{r7}
9000c382:	b085      	sub	sp, #20
9000c384:	af00      	add	r7, sp, #0
9000c386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000c388:	687b      	ldr	r3, [r7, #4]
9000c38a:	695b      	ldr	r3, [r3, #20]
9000c38c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000c38e:	687b      	ldr	r3, [r7, #4]
9000c390:	699b      	ldr	r3, [r3, #24]
9000c392:	68fa      	ldr	r2, [r7, #12]
9000c394:	4013      	ands	r3, r2
9000c396:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000c398:	68fb      	ldr	r3, [r7, #12]
}
9000c39a:	4618      	mov	r0, r3
9000c39c:	3714      	adds	r7, #20
9000c39e:	46bd      	mov	sp, r7
9000c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c3a4:	4770      	bx	lr

9000c3a6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000c3a6:	b480      	push	{r7}
9000c3a8:	b085      	sub	sp, #20
9000c3aa:	af00      	add	r7, sp, #0
9000c3ac:	6078      	str	r0, [r7, #4]
9000c3ae:	460b      	mov	r3, r1
9000c3b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c3b2:	687b      	ldr	r3, [r7, #4]
9000c3b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000c3b6:	78fb      	ldrb	r3, [r7, #3]
9000c3b8:	015a      	lsls	r2, r3, #5
9000c3ba:	68fb      	ldr	r3, [r7, #12]
9000c3bc:	4413      	add	r3, r2
9000c3be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c3c2:	689b      	ldr	r3, [r3, #8]
9000c3c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000c3c6:	78fb      	ldrb	r3, [r7, #3]
9000c3c8:	015a      	lsls	r2, r3, #5
9000c3ca:	68fb      	ldr	r3, [r7, #12]
9000c3cc:	4413      	add	r3, r2
9000c3ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c3d2:	68db      	ldr	r3, [r3, #12]
9000c3d4:	68ba      	ldr	r2, [r7, #8]
9000c3d6:	4013      	ands	r3, r2
9000c3d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000c3da:	68bb      	ldr	r3, [r7, #8]
}
9000c3dc:	4618      	mov	r0, r3
9000c3de:	3714      	adds	r7, #20
9000c3e0:	46bd      	mov	sp, r7
9000c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c3e6:	4770      	bx	lr

9000c3e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000c3e8:	b480      	push	{r7}
9000c3ea:	b083      	sub	sp, #12
9000c3ec:	af00      	add	r7, sp, #0
9000c3ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000c3f0:	687b      	ldr	r3, [r7, #4]
9000c3f2:	695b      	ldr	r3, [r3, #20]
9000c3f4:	f003 0301 	and.w	r3, r3, #1
}
9000c3f8:	4618      	mov	r0, r3
9000c3fa:	370c      	adds	r7, #12
9000c3fc:	46bd      	mov	sp, r7
9000c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c402:	4770      	bx	lr

9000c404 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
9000c404:	b480      	push	{r7}
9000c406:	b085      	sub	sp, #20
9000c408:	af00      	add	r7, sp, #0
9000c40a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000c40c:	2300      	movs	r3, #0
9000c40e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000c410:	68fb      	ldr	r3, [r7, #12]
9000c412:	3301      	adds	r3, #1
9000c414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000c416:	68fb      	ldr	r3, [r7, #12]
9000c418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000c41c:	d901      	bls.n	9000c422 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
9000c41e:	2303      	movs	r3, #3
9000c420:	e01b      	b.n	9000c45a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000c422:	687b      	ldr	r3, [r7, #4]
9000c424:	691b      	ldr	r3, [r3, #16]
9000c426:	2b00      	cmp	r3, #0
9000c428:	daf2      	bge.n	9000c410 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
9000c42a:	2300      	movs	r3, #0
9000c42c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
9000c42e:	687b      	ldr	r3, [r7, #4]
9000c430:	691b      	ldr	r3, [r3, #16]
9000c432:	f043 0201 	orr.w	r2, r3, #1
9000c436:	687b      	ldr	r3, [r7, #4]
9000c438:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000c43a:	68fb      	ldr	r3, [r7, #12]
9000c43c:	3301      	adds	r3, #1
9000c43e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000c440:	68fb      	ldr	r3, [r7, #12]
9000c442:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000c446:	d901      	bls.n	9000c44c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
9000c448:	2303      	movs	r3, #3
9000c44a:	e006      	b.n	9000c45a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
9000c44c:	687b      	ldr	r3, [r7, #4]
9000c44e:	691b      	ldr	r3, [r3, #16]
9000c450:	f003 0301 	and.w	r3, r3, #1
9000c454:	2b01      	cmp	r3, #1
9000c456:	d0f0      	beq.n	9000c43a <USB_CoreReset+0x36>

  return HAL_OK;
9000c458:	2300      	movs	r3, #0
}
9000c45a:	4618      	mov	r0, r3
9000c45c:	3714      	adds	r7, #20
9000c45e:	46bd      	mov	sp, r7
9000c460:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c464:	4770      	bx	lr
	...

9000c468 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
9000c468:	b084      	sub	sp, #16
9000c46a:	b580      	push	{r7, lr}
9000c46c:	b086      	sub	sp, #24
9000c46e:	af00      	add	r7, sp, #0
9000c470:	6078      	str	r0, [r7, #4]
9000c472:	f107 0024 	add.w	r0, r7, #36	@ 0x24
9000c476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
9000c47a:	2300      	movs	r3, #0
9000c47c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c47e:	687b      	ldr	r3, [r7, #4]
9000c480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
9000c482:	68fb      	ldr	r3, [r7, #12]
9000c484:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
9000c488:	461a      	mov	r2, r3
9000c48a:	2300      	movs	r3, #0
9000c48c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
9000c48e:	687b      	ldr	r3, [r7, #4]
9000c490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000c492:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
9000c496:	687b      	ldr	r3, [r7, #4]
9000c498:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
9000c49a:	687b      	ldr	r3, [r7, #4]
9000c49c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000c49e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
9000c4a2:	687b      	ldr	r3, [r7, #4]
9000c4a4:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
9000c4a6:	687b      	ldr	r3, [r7, #4]
9000c4a8:	68db      	ldr	r3, [r3, #12]
9000c4aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000c4ae:	2b00      	cmp	r3, #0
9000c4b0:	d119      	bne.n	9000c4e6 <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
9000c4b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000c4b6:	2b01      	cmp	r3, #1
9000c4b8:	d10a      	bne.n	9000c4d0 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
9000c4ba:	68fb      	ldr	r3, [r7, #12]
9000c4bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c4c0:	681b      	ldr	r3, [r3, #0]
9000c4c2:	68fa      	ldr	r2, [r7, #12]
9000c4c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000c4c8:	f043 0304 	orr.w	r3, r3, #4
9000c4cc:	6013      	str	r3, [r2, #0]
9000c4ce:	e014      	b.n	9000c4fa <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
9000c4d0:	68fb      	ldr	r3, [r7, #12]
9000c4d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c4d6:	681b      	ldr	r3, [r3, #0]
9000c4d8:	68fa      	ldr	r2, [r7, #12]
9000c4da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000c4de:	f023 0304 	bic.w	r3, r3, #4
9000c4e2:	6013      	str	r3, [r2, #0]
9000c4e4:	e009      	b.n	9000c4fa <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
9000c4e6:	68fb      	ldr	r3, [r7, #12]
9000c4e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c4ec:	681b      	ldr	r3, [r3, #0]
9000c4ee:	68fa      	ldr	r2, [r7, #12]
9000c4f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000c4f4:	f023 0304 	bic.w	r3, r3, #4
9000c4f8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000c4fa:	2110      	movs	r1, #16
9000c4fc:	6878      	ldr	r0, [r7, #4]
9000c4fe:	f7ff fe49 	bl	9000c194 <USB_FlushTxFifo>
9000c502:	4603      	mov	r3, r0
9000c504:	2b00      	cmp	r3, #0
9000c506:	d001      	beq.n	9000c50c <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
9000c508:	2301      	movs	r3, #1
9000c50a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000c50c:	6878      	ldr	r0, [r7, #4]
9000c50e:	f7ff fe73 	bl	9000c1f8 <USB_FlushRxFifo>
9000c512:	4603      	mov	r3, r0
9000c514:	2b00      	cmp	r3, #0
9000c516:	d001      	beq.n	9000c51c <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
9000c518:	2301      	movs	r3, #1
9000c51a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
9000c51c:	2300      	movs	r3, #0
9000c51e:	613b      	str	r3, [r7, #16]
9000c520:	e015      	b.n	9000c54e <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
9000c522:	693b      	ldr	r3, [r7, #16]
9000c524:	015a      	lsls	r2, r3, #5
9000c526:	68fb      	ldr	r3, [r7, #12]
9000c528:	4413      	add	r3, r2
9000c52a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c52e:	461a      	mov	r2, r3
9000c530:	f04f 33ff 	mov.w	r3, #4294967295
9000c534:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
9000c536:	693b      	ldr	r3, [r7, #16]
9000c538:	015a      	lsls	r2, r3, #5
9000c53a:	68fb      	ldr	r3, [r7, #12]
9000c53c:	4413      	add	r3, r2
9000c53e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c542:	461a      	mov	r2, r3
9000c544:	2300      	movs	r3, #0
9000c546:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
9000c548:	693b      	ldr	r3, [r7, #16]
9000c54a:	3301      	adds	r3, #1
9000c54c:	613b      	str	r3, [r7, #16]
9000c54e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
9000c552:	461a      	mov	r2, r3
9000c554:	693b      	ldr	r3, [r7, #16]
9000c556:	4293      	cmp	r3, r2
9000c558:	d3e3      	bcc.n	9000c522 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
9000c55a:	687b      	ldr	r3, [r7, #4]
9000c55c:	2200      	movs	r2, #0
9000c55e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000c560:	687b      	ldr	r3, [r7, #4]
9000c562:	f04f 32ff 	mov.w	r2, #4294967295
9000c566:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
9000c568:	687b      	ldr	r3, [r7, #4]
9000c56a:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000c56e:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
9000c570:	687b      	ldr	r3, [r7, #4]
9000c572:	4a0f      	ldr	r2, [pc, #60]	@ (9000c5b0 <USB_HostInit+0x148>)
9000c574:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
9000c576:	687b      	ldr	r3, [r7, #4]
9000c578:	4a0e      	ldr	r2, [pc, #56]	@ (9000c5b4 <USB_HostInit+0x14c>)
9000c57a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
9000c57e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000c582:	2b00      	cmp	r3, #0
9000c584:	d105      	bne.n	9000c592 <USB_HostInit+0x12a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
9000c586:	687b      	ldr	r3, [r7, #4]
9000c588:	699b      	ldr	r3, [r3, #24]
9000c58a:	f043 0210 	orr.w	r2, r3, #16
9000c58e:	687b      	ldr	r3, [r7, #4]
9000c590:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
9000c592:	687b      	ldr	r3, [r7, #4]
9000c594:	699a      	ldr	r2, [r3, #24]
9000c596:	4b08      	ldr	r3, [pc, #32]	@ (9000c5b8 <USB_HostInit+0x150>)
9000c598:	4313      	orrs	r3, r2
9000c59a:	687a      	ldr	r2, [r7, #4]
9000c59c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
9000c59e:	7dfb      	ldrb	r3, [r7, #23]
}
9000c5a0:	4618      	mov	r0, r3
9000c5a2:	3718      	adds	r7, #24
9000c5a4:	46bd      	mov	sp, r7
9000c5a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
9000c5aa:	b004      	add	sp, #16
9000c5ac:	4770      	bx	lr
9000c5ae:	bf00      	nop
9000c5b0:	01000200 	.word	0x01000200
9000c5b4:	00e00300 	.word	0x00e00300
9000c5b8:	a3200008 	.word	0xa3200008

9000c5bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000c5bc:	b480      	push	{r7}
9000c5be:	b085      	sub	sp, #20
9000c5c0:	af00      	add	r7, sp, #0
9000c5c2:	6078      	str	r0, [r7, #4]
9000c5c4:	460b      	mov	r3, r1
9000c5c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c5c8:	687b      	ldr	r3, [r7, #4]
9000c5ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000c5cc:	68fb      	ldr	r3, [r7, #12]
9000c5ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c5d2:	681b      	ldr	r3, [r3, #0]
9000c5d4:	68fa      	ldr	r2, [r7, #12]
9000c5d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000c5da:	f023 0303 	bic.w	r3, r3, #3
9000c5de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000c5e0:	68fb      	ldr	r3, [r7, #12]
9000c5e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c5e6:	681a      	ldr	r2, [r3, #0]
9000c5e8:	78fb      	ldrb	r3, [r7, #3]
9000c5ea:	f003 0303 	and.w	r3, r3, #3
9000c5ee:	68f9      	ldr	r1, [r7, #12]
9000c5f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000c5f4:	4313      	orrs	r3, r2
9000c5f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000c5f8:	78fb      	ldrb	r3, [r7, #3]
9000c5fa:	2b01      	cmp	r3, #1
9000c5fc:	d107      	bne.n	9000c60e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000c5fe:	68fb      	ldr	r3, [r7, #12]
9000c600:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c604:	461a      	mov	r2, r3
9000c606:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000c60a:	6053      	str	r3, [r2, #4]
9000c60c:	e00c      	b.n	9000c628 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000c60e:	78fb      	ldrb	r3, [r7, #3]
9000c610:	2b02      	cmp	r3, #2
9000c612:	d107      	bne.n	9000c624 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000c614:	68fb      	ldr	r3, [r7, #12]
9000c616:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c61a:	461a      	mov	r2, r3
9000c61c:	f241 7370 	movw	r3, #6000	@ 0x1770
9000c620:	6053      	str	r3, [r2, #4]
9000c622:	e001      	b.n	9000c628 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000c624:	2301      	movs	r3, #1
9000c626:	e000      	b.n	9000c62a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000c628:	2300      	movs	r3, #0
}
9000c62a:	4618      	mov	r0, r3
9000c62c:	3714      	adds	r7, #20
9000c62e:	46bd      	mov	sp, r7
9000c630:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c634:	4770      	bx	lr

9000c636 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
9000c636:	b580      	push	{r7, lr}
9000c638:	b084      	sub	sp, #16
9000c63a:	af00      	add	r7, sp, #0
9000c63c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c63e:	687b      	ldr	r3, [r7, #4]
9000c640:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
9000c642:	2300      	movs	r3, #0
9000c644:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
9000c646:	68fb      	ldr	r3, [r7, #12]
9000c648:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000c64c:	681b      	ldr	r3, [r3, #0]
9000c64e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
9000c650:	68bb      	ldr	r3, [r7, #8]
9000c652:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
9000c656:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
9000c658:	68bb      	ldr	r3, [r7, #8]
9000c65a:	68fa      	ldr	r2, [r7, #12]
9000c65c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
9000c660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000c664:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
9000c666:	2064      	movs	r0, #100	@ 0x64
9000c668:	f7f8 fab4 	bl	90004bd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
9000c66c:	68bb      	ldr	r3, [r7, #8]
9000c66e:	68fa      	ldr	r2, [r7, #12]
9000c670:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
9000c674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
9000c678:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
9000c67a:	200a      	movs	r0, #10
9000c67c:	f7f8 faaa 	bl	90004bd4 <HAL_Delay>

  return HAL_OK;
9000c680:	2300      	movs	r3, #0
}
9000c682:	4618      	mov	r0, r3
9000c684:	3710      	adds	r7, #16
9000c686:	46bd      	mov	sp, r7
9000c688:	bd80      	pop	{r7, pc}

9000c68a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
9000c68a:	b480      	push	{r7}
9000c68c:	b085      	sub	sp, #20
9000c68e:	af00      	add	r7, sp, #0
9000c690:	6078      	str	r0, [r7, #4]
9000c692:	460b      	mov	r3, r1
9000c694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c696:	687b      	ldr	r3, [r7, #4]
9000c698:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
9000c69a:	2300      	movs	r3, #0
9000c69c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
9000c69e:	68fb      	ldr	r3, [r7, #12]
9000c6a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000c6a4:	681b      	ldr	r3, [r3, #0]
9000c6a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
9000c6a8:	68bb      	ldr	r3, [r7, #8]
9000c6aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
9000c6ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
9000c6b0:	68bb      	ldr	r3, [r7, #8]
9000c6b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
9000c6b6:	2b00      	cmp	r3, #0
9000c6b8:	d109      	bne.n	9000c6ce <USB_DriveVbus+0x44>
9000c6ba:	78fb      	ldrb	r3, [r7, #3]
9000c6bc:	2b01      	cmp	r3, #1
9000c6be:	d106      	bne.n	9000c6ce <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
9000c6c0:	68bb      	ldr	r3, [r7, #8]
9000c6c2:	68fa      	ldr	r2, [r7, #12]
9000c6c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
9000c6c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
9000c6cc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
9000c6ce:	68bb      	ldr	r3, [r7, #8]
9000c6d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
9000c6d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000c6d8:	d109      	bne.n	9000c6ee <USB_DriveVbus+0x64>
9000c6da:	78fb      	ldrb	r3, [r7, #3]
9000c6dc:	2b00      	cmp	r3, #0
9000c6de:	d106      	bne.n	9000c6ee <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
9000c6e0:	68bb      	ldr	r3, [r7, #8]
9000c6e2:	68fa      	ldr	r2, [r7, #12]
9000c6e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
9000c6e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c6ec:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
9000c6ee:	2300      	movs	r3, #0
}
9000c6f0:	4618      	mov	r0, r3
9000c6f2:	3714      	adds	r7, #20
9000c6f4:	46bd      	mov	sp, r7
9000c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c6fa:	4770      	bx	lr

9000c6fc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
9000c6fc:	b480      	push	{r7}
9000c6fe:	b085      	sub	sp, #20
9000c700:	af00      	add	r7, sp, #0
9000c702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c704:	687b      	ldr	r3, [r7, #4]
9000c706:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
9000c708:	2300      	movs	r3, #0
9000c70a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
9000c70c:	68fb      	ldr	r3, [r7, #12]
9000c70e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000c712:	681b      	ldr	r3, [r3, #0]
9000c714:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
9000c716:	68bb      	ldr	r3, [r7, #8]
9000c718:	0c5b      	lsrs	r3, r3, #17
9000c71a:	f003 0303 	and.w	r3, r3, #3
}
9000c71e:	4618      	mov	r0, r3
9000c720:	3714      	adds	r7, #20
9000c722:	46bd      	mov	sp, r7
9000c724:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c728:	4770      	bx	lr

9000c72a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
9000c72a:	b480      	push	{r7}
9000c72c:	b085      	sub	sp, #20
9000c72e:	af00      	add	r7, sp, #0
9000c730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c732:	687b      	ldr	r3, [r7, #4]
9000c734:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
9000c736:	68fb      	ldr	r3, [r7, #12]
9000c738:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c73c:	689b      	ldr	r3, [r3, #8]
9000c73e:	b29b      	uxth	r3, r3
}
9000c740:	4618      	mov	r0, r3
9000c742:	3714      	adds	r7, #20
9000c744:	46bd      	mov	sp, r7
9000c746:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c74a:	4770      	bx	lr

9000c74c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
9000c74c:	b580      	push	{r7, lr}
9000c74e:	b088      	sub	sp, #32
9000c750:	af00      	add	r7, sp, #0
9000c752:	6078      	str	r0, [r7, #4]
9000c754:	4608      	mov	r0, r1
9000c756:	4611      	mov	r1, r2
9000c758:	461a      	mov	r2, r3
9000c75a:	4603      	mov	r3, r0
9000c75c:	70fb      	strb	r3, [r7, #3]
9000c75e:	460b      	mov	r3, r1
9000c760:	70bb      	strb	r3, [r7, #2]
9000c762:	4613      	mov	r3, r2
9000c764:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
9000c766:	2300      	movs	r3, #0
9000c768:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c76a:	687b      	ldr	r3, [r7, #4]
9000c76c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
9000c76e:	78fb      	ldrb	r3, [r7, #3]
9000c770:	015a      	lsls	r2, r3, #5
9000c772:	693b      	ldr	r3, [r7, #16]
9000c774:	4413      	add	r3, r2
9000c776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c77a:	461a      	mov	r2, r3
9000c77c:	f04f 33ff 	mov.w	r3, #4294967295
9000c780:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
9000c782:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
9000c786:	2b03      	cmp	r3, #3
9000c788:	d878      	bhi.n	9000c87c <USB_HC_Init+0x130>
9000c78a:	a201      	add	r2, pc, #4	@ (adr r2, 9000c790 <USB_HC_Init+0x44>)
9000c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000c790:	9000c7a1 	.word	0x9000c7a1
9000c794:	9000c83f 	.word	0x9000c83f
9000c798:	9000c7a1 	.word	0x9000c7a1
9000c79c:	9000c801 	.word	0x9000c801
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
9000c7a0:	78fb      	ldrb	r3, [r7, #3]
9000c7a2:	015a      	lsls	r2, r3, #5
9000c7a4:	693b      	ldr	r3, [r7, #16]
9000c7a6:	4413      	add	r3, r2
9000c7a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c7ac:	461a      	mov	r2, r3
9000c7ae:	f240 439d 	movw	r3, #1181	@ 0x49d
9000c7b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
9000c7b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
9000c7b8:	2b00      	cmp	r3, #0
9000c7ba:	da10      	bge.n	9000c7de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
9000c7bc:	78fb      	ldrb	r3, [r7, #3]
9000c7be:	015a      	lsls	r2, r3, #5
9000c7c0:	693b      	ldr	r3, [r7, #16]
9000c7c2:	4413      	add	r3, r2
9000c7c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c7c8:	68db      	ldr	r3, [r3, #12]
9000c7ca:	78fa      	ldrb	r2, [r7, #3]
9000c7cc:	0151      	lsls	r1, r2, #5
9000c7ce:	693a      	ldr	r2, [r7, #16]
9000c7d0:	440a      	add	r2, r1
9000c7d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c7d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000c7da:	60d3      	str	r3, [r2, #12]
      else
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                               USB_OTG_HCINTMSK_ACKM;
      }
      break;
9000c7dc:	e054      	b.n	9000c888 <USB_HC_Init+0x13c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
9000c7de:	78fb      	ldrb	r3, [r7, #3]
9000c7e0:	015a      	lsls	r2, r3, #5
9000c7e2:	693b      	ldr	r3, [r7, #16]
9000c7e4:	4413      	add	r3, r2
9000c7e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c7ea:	68db      	ldr	r3, [r3, #12]
9000c7ec:	78fa      	ldrb	r2, [r7, #3]
9000c7ee:	0151      	lsls	r1, r2, #5
9000c7f0:	693a      	ldr	r2, [r7, #16]
9000c7f2:	440a      	add	r2, r1
9000c7f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c7f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
9000c7fc:	60d3      	str	r3, [r2, #12]
      break;
9000c7fe:	e043      	b.n	9000c888 <USB_HC_Init+0x13c>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
9000c800:	78fb      	ldrb	r3, [r7, #3]
9000c802:	015a      	lsls	r2, r3, #5
9000c804:	693b      	ldr	r3, [r7, #16]
9000c806:	4413      	add	r3, r2
9000c808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c80c:	461a      	mov	r2, r3
9000c80e:	f240 639d 	movw	r3, #1693	@ 0x69d
9000c812:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
9000c814:	f997 3002 	ldrsb.w	r3, [r7, #2]
9000c818:	2b00      	cmp	r3, #0
9000c81a:	da32      	bge.n	9000c882 <USB_HC_Init+0x136>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
9000c81c:	78fb      	ldrb	r3, [r7, #3]
9000c81e:	015a      	lsls	r2, r3, #5
9000c820:	693b      	ldr	r3, [r7, #16]
9000c822:	4413      	add	r3, r2
9000c824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c828:	68db      	ldr	r3, [r3, #12]
9000c82a:	78fa      	ldrb	r2, [r7, #3]
9000c82c:	0151      	lsls	r1, r2, #5
9000c82e:	693a      	ldr	r2, [r7, #16]
9000c830:	440a      	add	r2, r1
9000c832:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000c83a:	60d3      	str	r3, [r2, #12]
      }

      break;
9000c83c:	e021      	b.n	9000c882 <USB_HC_Init+0x136>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
9000c83e:	78fb      	ldrb	r3, [r7, #3]
9000c840:	015a      	lsls	r2, r3, #5
9000c842:	693b      	ldr	r3, [r7, #16]
9000c844:	4413      	add	r3, r2
9000c846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c84a:	461a      	mov	r2, r3
9000c84c:	f240 2325 	movw	r3, #549	@ 0x225
9000c850:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
9000c852:	f997 3002 	ldrsb.w	r3, [r7, #2]
9000c856:	2b00      	cmp	r3, #0
9000c858:	da15      	bge.n	9000c886 <USB_HC_Init+0x13a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
9000c85a:	78fb      	ldrb	r3, [r7, #3]
9000c85c:	015a      	lsls	r2, r3, #5
9000c85e:	693b      	ldr	r3, [r7, #16]
9000c860:	4413      	add	r3, r2
9000c862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c866:	68db      	ldr	r3, [r3, #12]
9000c868:	78fa      	ldrb	r2, [r7, #3]
9000c86a:	0151      	lsls	r1, r2, #5
9000c86c:	693a      	ldr	r2, [r7, #16]
9000c86e:	440a      	add	r2, r1
9000c870:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c874:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
9000c878:	60d3      	str	r3, [r2, #12]
      }
      break;
9000c87a:	e004      	b.n	9000c886 <USB_HC_Init+0x13a>

    default:
      ret = HAL_ERROR;
9000c87c:	2301      	movs	r3, #1
9000c87e:	77fb      	strb	r3, [r7, #31]
      break;
9000c880:	e002      	b.n	9000c888 <USB_HC_Init+0x13c>
      break;
9000c882:	bf00      	nop
9000c884:	e000      	b.n	9000c888 <USB_HC_Init+0x13c>
      break;
9000c886:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
9000c888:	78fb      	ldrb	r3, [r7, #3]
9000c88a:	015a      	lsls	r2, r3, #5
9000c88c:	693b      	ldr	r3, [r7, #16]
9000c88e:	4413      	add	r3, r2
9000c890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c894:	461a      	mov	r2, r3
9000c896:	2300      	movs	r3, #0
9000c898:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
9000c89a:	78fb      	ldrb	r3, [r7, #3]
9000c89c:	015a      	lsls	r2, r3, #5
9000c89e:	693b      	ldr	r3, [r7, #16]
9000c8a0:	4413      	add	r3, r2
9000c8a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c8a6:	68db      	ldr	r3, [r3, #12]
9000c8a8:	78fa      	ldrb	r2, [r7, #3]
9000c8aa:	0151      	lsls	r1, r2, #5
9000c8ac:	693a      	ldr	r2, [r7, #16]
9000c8ae:	440a      	add	r2, r1
9000c8b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c8b4:	f043 0302 	orr.w	r3, r3, #2
9000c8b8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
9000c8ba:	693b      	ldr	r3, [r7, #16]
9000c8bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c8c0:	699a      	ldr	r2, [r3, #24]
9000c8c2:	78fb      	ldrb	r3, [r7, #3]
9000c8c4:	f003 030f 	and.w	r3, r3, #15
9000c8c8:	2101      	movs	r1, #1
9000c8ca:	fa01 f303 	lsl.w	r3, r1, r3
9000c8ce:	6939      	ldr	r1, [r7, #16]
9000c8d0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000c8d4:	4313      	orrs	r3, r2
9000c8d6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
9000c8d8:	687b      	ldr	r3, [r7, #4]
9000c8da:	699b      	ldr	r3, [r3, #24]
9000c8dc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
9000c8e0:	687b      	ldr	r3, [r7, #4]
9000c8e2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
9000c8e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
9000c8e8:	2b00      	cmp	r3, #0
9000c8ea:	da03      	bge.n	9000c8f4 <USB_HC_Init+0x1a8>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
9000c8ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000c8f0:	61bb      	str	r3, [r7, #24]
9000c8f2:	e001      	b.n	9000c8f8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharEpDir = 0U;
9000c8f4:	2300      	movs	r3, #0
9000c8f6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
9000c8f8:	6878      	ldr	r0, [r7, #4]
9000c8fa:	f7ff feff 	bl	9000c6fc <USB_GetHostSpeed>
9000c8fe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
9000c900:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
9000c904:	2b02      	cmp	r3, #2
9000c906:	d106      	bne.n	9000c916 <USB_HC_Init+0x1ca>
9000c908:	68fb      	ldr	r3, [r7, #12]
9000c90a:	2b02      	cmp	r3, #2
9000c90c:	d003      	beq.n	9000c916 <USB_HC_Init+0x1ca>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
9000c90e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
9000c912:	617b      	str	r3, [r7, #20]
9000c914:	e001      	b.n	9000c91a <USB_HC_Init+0x1ce>
  }
  else
  {
    HCcharLowSpeed = 0U;
9000c916:	2300      	movs	r3, #0
9000c918:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
9000c91a:	787b      	ldrb	r3, [r7, #1]
9000c91c:	059b      	lsls	r3, r3, #22
9000c91e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
9000c922:	78bb      	ldrb	r3, [r7, #2]
9000c924:	02db      	lsls	r3, r3, #11
9000c926:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
9000c92a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
9000c92c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
9000c930:	049b      	lsls	r3, r3, #18
9000c932:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
9000c936:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
9000c938:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
9000c93a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
9000c93e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
9000c940:	69bb      	ldr	r3, [r7, #24]
9000c942:	431a      	orrs	r2, r3
9000c944:	697b      	ldr	r3, [r7, #20]
9000c946:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
9000c948:	78fa      	ldrb	r2, [r7, #3]
9000c94a:	0151      	lsls	r1, r2, #5
9000c94c:	693a      	ldr	r2, [r7, #16]
9000c94e:	440a      	add	r2, r1
9000c950:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
9000c954:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
9000c958:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
9000c95a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
9000c95e:	2b03      	cmp	r3, #3
9000c960:	d003      	beq.n	9000c96a <USB_HC_Init+0x21e>
9000c962:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
9000c966:	2b01      	cmp	r3, #1
9000c968:	d10f      	bne.n	9000c98a <USB_HC_Init+0x23e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
9000c96a:	78fb      	ldrb	r3, [r7, #3]
9000c96c:	015a      	lsls	r2, r3, #5
9000c96e:	693b      	ldr	r3, [r7, #16]
9000c970:	4413      	add	r3, r2
9000c972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c976:	681b      	ldr	r3, [r3, #0]
9000c978:	78fa      	ldrb	r2, [r7, #3]
9000c97a:	0151      	lsls	r1, r2, #5
9000c97c:	693a      	ldr	r2, [r7, #16]
9000c97e:	440a      	add	r2, r1
9000c980:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c984:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
9000c988:	6013      	str	r3, [r2, #0]
  }

  return ret;
9000c98a:	7ffb      	ldrb	r3, [r7, #31]
}
9000c98c:	4618      	mov	r0, r3
9000c98e:	3720      	adds	r7, #32
9000c990:	46bd      	mov	sp, r7
9000c992:	bd80      	pop	{r7, pc}

9000c994 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
9000c994:	b580      	push	{r7, lr}
9000c996:	b08c      	sub	sp, #48	@ 0x30
9000c998:	af02      	add	r7, sp, #8
9000c99a:	60f8      	str	r0, [r7, #12]
9000c99c:	60b9      	str	r1, [r7, #8]
9000c99e:	4613      	mov	r3, r2
9000c9a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c9a2:	68fb      	ldr	r3, [r7, #12]
9000c9a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
9000c9a6:	68bb      	ldr	r3, [r7, #8]
9000c9a8:	785b      	ldrb	r3, [r3, #1]
9000c9aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
9000c9ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
9000c9b0:	837b      	strh	r3, [r7, #26]

  /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
  if (dma == 1U)
9000c9b2:	79fb      	ldrb	r3, [r7, #7]
9000c9b4:	2b01      	cmp	r3, #1
9000c9b6:	d118      	bne.n	9000c9ea <USB_HC_StartXfer+0x56>
  {
    if ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
9000c9b8:	68bb      	ldr	r3, [r7, #8]
9000c9ba:	7c9b      	ldrb	r3, [r3, #18]
9000c9bc:	2b00      	cmp	r3, #0
9000c9be:	d003      	beq.n	9000c9c8 <USB_HC_StartXfer+0x34>
9000c9c0:	68bb      	ldr	r3, [r7, #8]
9000c9c2:	7c9b      	ldrb	r3, [r3, #18]
9000c9c4:	2b02      	cmp	r3, #2
9000c9c6:	d120      	bne.n	9000ca0a <USB_HC_StartXfer+0x76>
    {

      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
9000c9c8:	69fb      	ldr	r3, [r7, #28]
9000c9ca:	015a      	lsls	r2, r3, #5
9000c9cc:	6a3b      	ldr	r3, [r7, #32]
9000c9ce:	4413      	add	r3, r2
9000c9d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c9d4:	68db      	ldr	r3, [r3, #12]
9000c9d6:	69fa      	ldr	r2, [r7, #28]
9000c9d8:	0151      	lsls	r1, r2, #5
9000c9da:	6a3a      	ldr	r2, [r7, #32]
9000c9dc:	440a      	add	r2, r1
9000c9de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c9e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
9000c9e6:	60d3      	str	r3, [r2, #12]
9000c9e8:	e00f      	b.n	9000ca0a <USB_HC_StartXfer+0x76>
                                               USB_OTG_HCINTMSK_NAKM);
    }
  }
  else
  {
    if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
9000c9ea:	68bb      	ldr	r3, [r7, #8]
9000c9ec:	791b      	ldrb	r3, [r3, #4]
9000c9ee:	2b00      	cmp	r3, #0
9000c9f0:	d10b      	bne.n	9000ca0a <USB_HC_StartXfer+0x76>
9000c9f2:	68bb      	ldr	r3, [r7, #8]
9000c9f4:	795b      	ldrb	r3, [r3, #5]
9000c9f6:	2b01      	cmp	r3, #1
9000c9f8:	d107      	bne.n	9000ca0a <USB_HC_StartXfer+0x76>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
9000c9fa:	68bb      	ldr	r3, [r7, #8]
9000c9fc:	785b      	ldrb	r3, [r3, #1]
9000c9fe:	4619      	mov	r1, r3
9000ca00:	68f8      	ldr	r0, [r7, #12]
9000ca02:	f000 fb69 	bl	9000d0d8 <USB_DoPing>
      return HAL_OK;
9000ca06:	2300      	movs	r3, #0
9000ca08:	e230      	b.n	9000ce6c <USB_HC_StartXfer+0x4d8>
    }
  }

  if (hc->do_ssplit == 1U)
9000ca0a:	68bb      	ldr	r3, [r7, #8]
9000ca0c:	799b      	ldrb	r3, [r3, #6]
9000ca0e:	2b01      	cmp	r3, #1
9000ca10:	d158      	bne.n	9000cac4 <USB_HC_StartXfer+0x130>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
9000ca12:	2301      	movs	r3, #1
9000ca14:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
9000ca16:	68bb      	ldr	r3, [r7, #8]
9000ca18:	78db      	ldrb	r3, [r3, #3]
9000ca1a:	2b00      	cmp	r3, #0
9000ca1c:	d007      	beq.n	9000ca2e <USB_HC_StartXfer+0x9a>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
9000ca1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
9000ca20:	68ba      	ldr	r2, [r7, #8]
9000ca22:	8a92      	ldrh	r2, [r2, #20]
9000ca24:	fb03 f202 	mul.w	r2, r3, r2
9000ca28:	68bb      	ldr	r3, [r7, #8]
9000ca2a:	61da      	str	r2, [r3, #28]
9000ca2c:	e079      	b.n	9000cb22 <USB_HC_StartXfer+0x18e>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
9000ca2e:	68bb      	ldr	r3, [r7, #8]
9000ca30:	7c9b      	ldrb	r3, [r3, #18]
9000ca32:	2b01      	cmp	r3, #1
9000ca34:	d130      	bne.n	9000ca98 <USB_HC_StartXfer+0x104>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
9000ca36:	68bb      	ldr	r3, [r7, #8]
9000ca38:	6a1b      	ldr	r3, [r3, #32]
9000ca3a:	2bbc      	cmp	r3, #188	@ 0xbc
9000ca3c:	d918      	bls.n	9000ca70 <USB_HC_StartXfer+0xdc>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
9000ca3e:	68bb      	ldr	r3, [r7, #8]
9000ca40:	8a9b      	ldrh	r3, [r3, #20]
9000ca42:	461a      	mov	r2, r3
9000ca44:	68bb      	ldr	r3, [r7, #8]
9000ca46:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
9000ca48:	68bb      	ldr	r3, [r7, #8]
9000ca4a:	69da      	ldr	r2, [r3, #28]
9000ca4c:	68bb      	ldr	r3, [r7, #8]
9000ca4e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
9000ca50:	68bb      	ldr	r3, [r7, #8]
9000ca52:	68db      	ldr	r3, [r3, #12]
9000ca54:	2b01      	cmp	r3, #1
9000ca56:	d003      	beq.n	9000ca60 <USB_HC_StartXfer+0xcc>
9000ca58:	68bb      	ldr	r3, [r7, #8]
9000ca5a:	68db      	ldr	r3, [r3, #12]
9000ca5c:	2b02      	cmp	r3, #2
9000ca5e:	d103      	bne.n	9000ca68 <USB_HC_StartXfer+0xd4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
9000ca60:	68bb      	ldr	r3, [r7, #8]
9000ca62:	2202      	movs	r2, #2
9000ca64:	60da      	str	r2, [r3, #12]
9000ca66:	e05c      	b.n	9000cb22 <USB_HC_StartXfer+0x18e>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
9000ca68:	68bb      	ldr	r3, [r7, #8]
9000ca6a:	2201      	movs	r2, #1
9000ca6c:	60da      	str	r2, [r3, #12]
9000ca6e:	e058      	b.n	9000cb22 <USB_HC_StartXfer+0x18e>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
9000ca70:	68bb      	ldr	r3, [r7, #8]
9000ca72:	6a1a      	ldr	r2, [r3, #32]
9000ca74:	68bb      	ldr	r3, [r7, #8]
9000ca76:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
9000ca78:	68bb      	ldr	r3, [r7, #8]
9000ca7a:	68db      	ldr	r3, [r3, #12]
9000ca7c:	2b01      	cmp	r3, #1
9000ca7e:	d007      	beq.n	9000ca90 <USB_HC_StartXfer+0xfc>
9000ca80:	68bb      	ldr	r3, [r7, #8]
9000ca82:	68db      	ldr	r3, [r3, #12]
9000ca84:	2b02      	cmp	r3, #2
9000ca86:	d003      	beq.n	9000ca90 <USB_HC_StartXfer+0xfc>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
9000ca88:	68bb      	ldr	r3, [r7, #8]
9000ca8a:	2204      	movs	r2, #4
9000ca8c:	60da      	str	r2, [r3, #12]
9000ca8e:	e048      	b.n	9000cb22 <USB_HC_StartXfer+0x18e>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
9000ca90:	68bb      	ldr	r3, [r7, #8]
9000ca92:	2203      	movs	r2, #3
9000ca94:	60da      	str	r2, [r3, #12]
9000ca96:	e044      	b.n	9000cb22 <USB_HC_StartXfer+0x18e>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
9000ca98:	79fb      	ldrb	r3, [r7, #7]
9000ca9a:	2b01      	cmp	r3, #1
9000ca9c:	d10d      	bne.n	9000caba <USB_HC_StartXfer+0x126>
9000ca9e:	68bb      	ldr	r3, [r7, #8]
9000caa0:	6a1b      	ldr	r3, [r3, #32]
9000caa2:	68ba      	ldr	r2, [r7, #8]
9000caa4:	8a92      	ldrh	r2, [r2, #20]
9000caa6:	4293      	cmp	r3, r2
9000caa8:	d907      	bls.n	9000caba <USB_HC_StartXfer+0x126>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
9000caaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
9000caac:	68ba      	ldr	r2, [r7, #8]
9000caae:	8a92      	ldrh	r2, [r2, #20]
9000cab0:	fb03 f202 	mul.w	r2, r3, r2
9000cab4:	68bb      	ldr	r3, [r7, #8]
9000cab6:	61da      	str	r2, [r3, #28]
9000cab8:	e033      	b.n	9000cb22 <USB_HC_StartXfer+0x18e>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
9000caba:	68bb      	ldr	r3, [r7, #8]
9000cabc:	6a1a      	ldr	r2, [r3, #32]
9000cabe:	68bb      	ldr	r3, [r7, #8]
9000cac0:	61da      	str	r2, [r3, #28]
9000cac2:	e02e      	b.n	9000cb22 <USB_HC_StartXfer+0x18e>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
9000cac4:	68bb      	ldr	r3, [r7, #8]
9000cac6:	6a1b      	ldr	r3, [r3, #32]
9000cac8:	2b00      	cmp	r3, #0
9000caca:	d018      	beq.n	9000cafe <USB_HC_StartXfer+0x16a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
9000cacc:	68bb      	ldr	r3, [r7, #8]
9000cace:	6a1b      	ldr	r3, [r3, #32]
9000cad0:	68ba      	ldr	r2, [r7, #8]
9000cad2:	8a92      	ldrh	r2, [r2, #20]
9000cad4:	4413      	add	r3, r2
9000cad6:	3b01      	subs	r3, #1
9000cad8:	68ba      	ldr	r2, [r7, #8]
9000cada:	8a92      	ldrh	r2, [r2, #20]
9000cadc:	fbb3 f3f2 	udiv	r3, r3, r2
9000cae0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
9000cae2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
9000cae4:	8b7b      	ldrh	r3, [r7, #26]
9000cae6:	429a      	cmp	r2, r3
9000cae8:	d90b      	bls.n	9000cb02 <USB_HC_StartXfer+0x16e>
      {
        num_packets = max_hc_pkt_count;
9000caea:	8b7b      	ldrh	r3, [r7, #26]
9000caec:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
9000caee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
9000caf0:	68ba      	ldr	r2, [r7, #8]
9000caf2:	8a92      	ldrh	r2, [r2, #20]
9000caf4:	fb03 f202 	mul.w	r2, r3, r2
9000caf8:	68bb      	ldr	r3, [r7, #8]
9000cafa:	61da      	str	r2, [r3, #28]
9000cafc:	e001      	b.n	9000cb02 <USB_HC_StartXfer+0x16e>
      }
    }
    else
    {
      num_packets = 1U;
9000cafe:	2301      	movs	r3, #1
9000cb00:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
9000cb02:	68bb      	ldr	r3, [r7, #8]
9000cb04:	78db      	ldrb	r3, [r3, #3]
9000cb06:	2b00      	cmp	r3, #0
9000cb08:	d007      	beq.n	9000cb1a <USB_HC_StartXfer+0x186>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
9000cb0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
9000cb0c:	68ba      	ldr	r2, [r7, #8]
9000cb0e:	8a92      	ldrh	r2, [r2, #20]
9000cb10:	fb03 f202 	mul.w	r2, r3, r2
9000cb14:	68bb      	ldr	r3, [r7, #8]
9000cb16:	61da      	str	r2, [r3, #28]
9000cb18:	e003      	b.n	9000cb22 <USB_HC_StartXfer+0x18e>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
9000cb1a:	68bb      	ldr	r3, [r7, #8]
9000cb1c:	6a1a      	ldr	r2, [r3, #32]
9000cb1e:	68bb      	ldr	r3, [r7, #8]
9000cb20:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
9000cb22:	68bb      	ldr	r3, [r7, #8]
9000cb24:	69db      	ldr	r3, [r3, #28]
9000cb26:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
9000cb2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
9000cb2c:	04d9      	lsls	r1, r3, #19
9000cb2e:	4ba4      	ldr	r3, [pc, #656]	@ (9000cdc0 <USB_HC_StartXfer+0x42c>)
9000cb30:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
9000cb32:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
9000cb34:	68bb      	ldr	r3, [r7, #8]
9000cb36:	7d9b      	ldrb	r3, [r3, #22]
9000cb38:	075b      	lsls	r3, r3, #29
9000cb3a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
9000cb3e:	69f9      	ldr	r1, [r7, #28]
9000cb40:	0148      	lsls	r0, r1, #5
9000cb42:	6a39      	ldr	r1, [r7, #32]
9000cb44:	4401      	add	r1, r0
9000cb46:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
9000cb4a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
9000cb4c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
9000cb4e:	79fb      	ldrb	r3, [r7, #7]
9000cb50:	2b00      	cmp	r3, #0
9000cb52:	d009      	beq.n	9000cb68 <USB_HC_StartXfer+0x1d4>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
9000cb54:	68bb      	ldr	r3, [r7, #8]
9000cb56:	6999      	ldr	r1, [r3, #24]
9000cb58:	69fb      	ldr	r3, [r7, #28]
9000cb5a:	015a      	lsls	r2, r3, #5
9000cb5c:	6a3b      	ldr	r3, [r7, #32]
9000cb5e:	4413      	add	r3, r2
9000cb60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cb64:	460a      	mov	r2, r1
9000cb66:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
9000cb68:	6a3b      	ldr	r3, [r7, #32]
9000cb6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000cb6e:	689b      	ldr	r3, [r3, #8]
9000cb70:	f003 0301 	and.w	r3, r3, #1
9000cb74:	2b00      	cmp	r3, #0
9000cb76:	bf0c      	ite	eq
9000cb78:	2301      	moveq	r3, #1
9000cb7a:	2300      	movne	r3, #0
9000cb7c:	b2db      	uxtb	r3, r3
9000cb7e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
9000cb80:	69fb      	ldr	r3, [r7, #28]
9000cb82:	015a      	lsls	r2, r3, #5
9000cb84:	6a3b      	ldr	r3, [r7, #32]
9000cb86:	4413      	add	r3, r2
9000cb88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cb8c:	681b      	ldr	r3, [r3, #0]
9000cb8e:	69fa      	ldr	r2, [r7, #28]
9000cb90:	0151      	lsls	r1, r2, #5
9000cb92:	6a3a      	ldr	r2, [r7, #32]
9000cb94:	440a      	add	r2, r1
9000cb96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cb9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000cb9e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
9000cba0:	69fb      	ldr	r3, [r7, #28]
9000cba2:	015a      	lsls	r2, r3, #5
9000cba4:	6a3b      	ldr	r3, [r7, #32]
9000cba6:	4413      	add	r3, r2
9000cba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cbac:	681a      	ldr	r2, [r3, #0]
9000cbae:	7e7b      	ldrb	r3, [r7, #25]
9000cbb0:	075b      	lsls	r3, r3, #29
9000cbb2:	69f9      	ldr	r1, [r7, #28]
9000cbb4:	0148      	lsls	r0, r1, #5
9000cbb6:	6a39      	ldr	r1, [r7, #32]
9000cbb8:	4401      	add	r1, r0
9000cbba:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
9000cbbe:	4313      	orrs	r3, r2
9000cbc0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
9000cbc2:	68bb      	ldr	r3, [r7, #8]
9000cbc4:	799b      	ldrb	r3, [r3, #6]
9000cbc6:	2b01      	cmp	r3, #1
9000cbc8:	f040 80c4 	bne.w	9000cd54 <USB_HC_StartXfer+0x3c0>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
9000cbcc:	68bb      	ldr	r3, [r7, #8]
9000cbce:	7c5b      	ldrb	r3, [r3, #17]
9000cbd0:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
9000cbd2:	68ba      	ldr	r2, [r7, #8]
9000cbd4:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
9000cbd6:	4313      	orrs	r3, r2
9000cbd8:	69fa      	ldr	r2, [r7, #28]
9000cbda:	0151      	lsls	r1, r2, #5
9000cbdc:	6a3a      	ldr	r2, [r7, #32]
9000cbde:	440a      	add	r2, r1
9000cbe0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
9000cbe4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
9000cbe8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
9000cbea:	69fb      	ldr	r3, [r7, #28]
9000cbec:	015a      	lsls	r2, r3, #5
9000cbee:	6a3b      	ldr	r3, [r7, #32]
9000cbf0:	4413      	add	r3, r2
9000cbf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cbf6:	68db      	ldr	r3, [r3, #12]
9000cbf8:	69fa      	ldr	r2, [r7, #28]
9000cbfa:	0151      	lsls	r1, r2, #5
9000cbfc:	6a3a      	ldr	r2, [r7, #32]
9000cbfe:	440a      	add	r2, r1
9000cc00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cc04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
9000cc08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
9000cc0a:	68bb      	ldr	r3, [r7, #8]
9000cc0c:	79db      	ldrb	r3, [r3, #7]
9000cc0e:	2b01      	cmp	r3, #1
9000cc10:	d123      	bne.n	9000cc5a <USB_HC_StartXfer+0x2c6>
9000cc12:	68bb      	ldr	r3, [r7, #8]
9000cc14:	78db      	ldrb	r3, [r3, #3]
9000cc16:	2b00      	cmp	r3, #0
9000cc18:	d11f      	bne.n	9000cc5a <USB_HC_StartXfer+0x2c6>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
9000cc1a:	69fb      	ldr	r3, [r7, #28]
9000cc1c:	015a      	lsls	r2, r3, #5
9000cc1e:	6a3b      	ldr	r3, [r7, #32]
9000cc20:	4413      	add	r3, r2
9000cc22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cc26:	685b      	ldr	r3, [r3, #4]
9000cc28:	69fa      	ldr	r2, [r7, #28]
9000cc2a:	0151      	lsls	r1, r2, #5
9000cc2c:	6a3a      	ldr	r2, [r7, #32]
9000cc2e:	440a      	add	r2, r1
9000cc30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cc34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000cc38:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
9000cc3a:	69fb      	ldr	r3, [r7, #28]
9000cc3c:	015a      	lsls	r2, r3, #5
9000cc3e:	6a3b      	ldr	r3, [r7, #32]
9000cc40:	4413      	add	r3, r2
9000cc42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cc46:	68db      	ldr	r3, [r3, #12]
9000cc48:	69fa      	ldr	r2, [r7, #28]
9000cc4a:	0151      	lsls	r1, r2, #5
9000cc4c:	6a3a      	ldr	r2, [r7, #32]
9000cc4e:	440a      	add	r2, r1
9000cc50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cc54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000cc58:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
9000cc5a:	68bb      	ldr	r3, [r7, #8]
9000cc5c:	7c9b      	ldrb	r3, [r3, #18]
9000cc5e:	2b01      	cmp	r3, #1
9000cc60:	d003      	beq.n	9000cc6a <USB_HC_StartXfer+0x2d6>
9000cc62:	68bb      	ldr	r3, [r7, #8]
9000cc64:	7c9b      	ldrb	r3, [r3, #18]
9000cc66:	2b03      	cmp	r3, #3
9000cc68:	d117      	bne.n	9000cc9a <USB_HC_StartXfer+0x306>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
9000cc6a:	68bb      	ldr	r3, [r7, #8]
9000cc6c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
9000cc6e:	2b01      	cmp	r3, #1
9000cc70:	d113      	bne.n	9000cc9a <USB_HC_StartXfer+0x306>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
9000cc72:	68bb      	ldr	r3, [r7, #8]
9000cc74:	78db      	ldrb	r3, [r3, #3]
9000cc76:	2b01      	cmp	r3, #1
9000cc78:	d10f      	bne.n	9000cc9a <USB_HC_StartXfer+0x306>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
9000cc7a:	69fb      	ldr	r3, [r7, #28]
9000cc7c:	015a      	lsls	r2, r3, #5
9000cc7e:	6a3b      	ldr	r3, [r7, #32]
9000cc80:	4413      	add	r3, r2
9000cc82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cc86:	685b      	ldr	r3, [r3, #4]
9000cc88:	69fa      	ldr	r2, [r7, #28]
9000cc8a:	0151      	lsls	r1, r2, #5
9000cc8c:	6a3a      	ldr	r2, [r7, #32]
9000cc8e:	440a      	add	r2, r1
9000cc90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cc94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000cc98:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
9000cc9a:	68bb      	ldr	r3, [r7, #8]
9000cc9c:	7c9b      	ldrb	r3, [r3, #18]
9000cc9e:	2b01      	cmp	r3, #1
9000cca0:	d163      	bne.n	9000cd6a <USB_HC_StartXfer+0x3d6>
9000cca2:	68bb      	ldr	r3, [r7, #8]
9000cca4:	78db      	ldrb	r3, [r3, #3]
9000cca6:	2b00      	cmp	r3, #0
9000cca8:	d15f      	bne.n	9000cd6a <USB_HC_StartXfer+0x3d6>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
9000ccaa:	68bb      	ldr	r3, [r7, #8]
9000ccac:	68db      	ldr	r3, [r3, #12]
9000ccae:	3b01      	subs	r3, #1
9000ccb0:	2b03      	cmp	r3, #3
9000ccb2:	d859      	bhi.n	9000cd68 <USB_HC_StartXfer+0x3d4>
9000ccb4:	a201      	add	r2, pc, #4	@ (adr r2, 9000ccbc <USB_HC_StartXfer+0x328>)
9000ccb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ccba:	bf00      	nop
9000ccbc:	9000cccd 	.word	0x9000cccd
9000ccc0:	9000ccef 	.word	0x9000ccef
9000ccc4:	9000cd11 	.word	0x9000cd11
9000ccc8:	9000cd33 	.word	0x9000cd33
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
9000cccc:	69fb      	ldr	r3, [r7, #28]
9000ccce:	015a      	lsls	r2, r3, #5
9000ccd0:	6a3b      	ldr	r3, [r7, #32]
9000ccd2:	4413      	add	r3, r2
9000ccd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000ccd8:	685b      	ldr	r3, [r3, #4]
9000ccda:	69fa      	ldr	r2, [r7, #28]
9000ccdc:	0151      	lsls	r1, r2, #5
9000ccde:	6a3a      	ldr	r2, [r7, #32]
9000cce0:	440a      	add	r2, r1
9000cce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
9000ccea:	6053      	str	r3, [r2, #4]
          break;
9000ccec:	e03d      	b.n	9000cd6a <USB_HC_StartXfer+0x3d6>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
9000ccee:	69fb      	ldr	r3, [r7, #28]
9000ccf0:	015a      	lsls	r2, r3, #5
9000ccf2:	6a3b      	ldr	r3, [r7, #32]
9000ccf4:	4413      	add	r3, r2
9000ccf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000ccfa:	685b      	ldr	r3, [r3, #4]
9000ccfc:	69fa      	ldr	r2, [r7, #28]
9000ccfe:	0151      	lsls	r1, r2, #5
9000cd00:	6a3a      	ldr	r2, [r7, #32]
9000cd02:	440a      	add	r2, r1
9000cd04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cd08:	f043 030e 	orr.w	r3, r3, #14
9000cd0c:	6053      	str	r3, [r2, #4]
          break;
9000cd0e:	e02c      	b.n	9000cd6a <USB_HC_StartXfer+0x3d6>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
9000cd10:	69fb      	ldr	r3, [r7, #28]
9000cd12:	015a      	lsls	r2, r3, #5
9000cd14:	6a3b      	ldr	r3, [r7, #32]
9000cd16:	4413      	add	r3, r2
9000cd18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cd1c:	685b      	ldr	r3, [r3, #4]
9000cd1e:	69fa      	ldr	r2, [r7, #28]
9000cd20:	0151      	lsls	r1, r2, #5
9000cd22:	6a3a      	ldr	r2, [r7, #32]
9000cd24:	440a      	add	r2, r1
9000cd26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cd2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
9000cd2e:	6053      	str	r3, [r2, #4]
          break;
9000cd30:	e01b      	b.n	9000cd6a <USB_HC_StartXfer+0x3d6>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
9000cd32:	69fb      	ldr	r3, [r7, #28]
9000cd34:	015a      	lsls	r2, r3, #5
9000cd36:	6a3b      	ldr	r3, [r7, #32]
9000cd38:	4413      	add	r3, r2
9000cd3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cd3e:	685b      	ldr	r3, [r3, #4]
9000cd40:	69fa      	ldr	r2, [r7, #28]
9000cd42:	0151      	lsls	r1, r2, #5
9000cd44:	6a3a      	ldr	r2, [r7, #32]
9000cd46:	440a      	add	r2, r1
9000cd48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cd4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
9000cd50:	6053      	str	r3, [r2, #4]
          break;
9000cd52:	e00a      	b.n	9000cd6a <USB_HC_StartXfer+0x3d6>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
9000cd54:	69fb      	ldr	r3, [r7, #28]
9000cd56:	015a      	lsls	r2, r3, #5
9000cd58:	6a3b      	ldr	r3, [r7, #32]
9000cd5a:	4413      	add	r3, r2
9000cd5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cd60:	461a      	mov	r2, r3
9000cd62:	2300      	movs	r3, #0
9000cd64:	6053      	str	r3, [r2, #4]
9000cd66:	e000      	b.n	9000cd6a <USB_HC_StartXfer+0x3d6>
          break;
9000cd68:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
9000cd6a:	69fb      	ldr	r3, [r7, #28]
9000cd6c:	015a      	lsls	r2, r3, #5
9000cd6e:	6a3b      	ldr	r3, [r7, #32]
9000cd70:	4413      	add	r3, r2
9000cd72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cd76:	681b      	ldr	r3, [r3, #0]
9000cd78:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000cd7a:	693b      	ldr	r3, [r7, #16]
9000cd7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
9000cd80:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
9000cd82:	68bb      	ldr	r3, [r7, #8]
9000cd84:	78db      	ldrb	r3, [r3, #3]
9000cd86:	2b00      	cmp	r3, #0
9000cd88:	d004      	beq.n	9000cd94 <USB_HC_StartXfer+0x400>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
9000cd8a:	693b      	ldr	r3, [r7, #16]
9000cd8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
9000cd90:	613b      	str	r3, [r7, #16]
9000cd92:	e003      	b.n	9000cd9c <USB_HC_StartXfer+0x408>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
9000cd94:	693b      	ldr	r3, [r7, #16]
9000cd96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000cd9a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
9000cd9c:	693b      	ldr	r3, [r7, #16]
9000cd9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000cda2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
9000cda4:	69fb      	ldr	r3, [r7, #28]
9000cda6:	015a      	lsls	r2, r3, #5
9000cda8:	6a3b      	ldr	r3, [r7, #32]
9000cdaa:	4413      	add	r3, r2
9000cdac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cdb0:	461a      	mov	r2, r3
9000cdb2:	693b      	ldr	r3, [r7, #16]
9000cdb4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
9000cdb6:	79fb      	ldrb	r3, [r7, #7]
9000cdb8:	2b00      	cmp	r3, #0
9000cdba:	d003      	beq.n	9000cdc4 <USB_HC_StartXfer+0x430>
  {
    return HAL_OK;
9000cdbc:	2300      	movs	r3, #0
9000cdbe:	e055      	b.n	9000ce6c <USB_HC_StartXfer+0x4d8>
9000cdc0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
9000cdc4:	68bb      	ldr	r3, [r7, #8]
9000cdc6:	78db      	ldrb	r3, [r3, #3]
9000cdc8:	2b00      	cmp	r3, #0
9000cdca:	d14e      	bne.n	9000ce6a <USB_HC_StartXfer+0x4d6>
9000cdcc:	68bb      	ldr	r3, [r7, #8]
9000cdce:	6a1b      	ldr	r3, [r3, #32]
9000cdd0:	2b00      	cmp	r3, #0
9000cdd2:	d04a      	beq.n	9000ce6a <USB_HC_StartXfer+0x4d6>
9000cdd4:	68bb      	ldr	r3, [r7, #8]
9000cdd6:	79db      	ldrb	r3, [r3, #7]
9000cdd8:	2b00      	cmp	r3, #0
9000cdda:	d146      	bne.n	9000ce6a <USB_HC_StartXfer+0x4d6>
  {
    switch (hc->ep_type)
9000cddc:	68bb      	ldr	r3, [r7, #8]
9000cdde:	7c9b      	ldrb	r3, [r3, #18]
9000cde0:	2b03      	cmp	r3, #3
9000cde2:	d831      	bhi.n	9000ce48 <USB_HC_StartXfer+0x4b4>
9000cde4:	a201      	add	r2, pc, #4	@ (adr r2, 9000cdec <USB_HC_StartXfer+0x458>)
9000cde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cdea:	bf00      	nop
9000cdec:	9000cdfd 	.word	0x9000cdfd
9000cdf0:	9000ce21 	.word	0x9000ce21
9000cdf4:	9000cdfd 	.word	0x9000cdfd
9000cdf8:	9000ce21 	.word	0x9000ce21
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
9000cdfc:	68bb      	ldr	r3, [r7, #8]
9000cdfe:	6a1b      	ldr	r3, [r3, #32]
9000ce00:	3303      	adds	r3, #3
9000ce02:	089b      	lsrs	r3, r3, #2
9000ce04:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
9000ce06:	8afa      	ldrh	r2, [r7, #22]
9000ce08:	68fb      	ldr	r3, [r7, #12]
9000ce0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000ce0c:	b29b      	uxth	r3, r3
9000ce0e:	429a      	cmp	r2, r3
9000ce10:	d91c      	bls.n	9000ce4c <USB_HC_StartXfer+0x4b8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
9000ce12:	68fb      	ldr	r3, [r7, #12]
9000ce14:	699b      	ldr	r3, [r3, #24]
9000ce16:	f043 0220 	orr.w	r2, r3, #32
9000ce1a:	68fb      	ldr	r3, [r7, #12]
9000ce1c:	619a      	str	r2, [r3, #24]
        }
        break;
9000ce1e:	e015      	b.n	9000ce4c <USB_HC_StartXfer+0x4b8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
9000ce20:	68bb      	ldr	r3, [r7, #8]
9000ce22:	6a1b      	ldr	r3, [r3, #32]
9000ce24:	3303      	adds	r3, #3
9000ce26:	089b      	lsrs	r3, r3, #2
9000ce28:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
9000ce2a:	8afa      	ldrh	r2, [r7, #22]
9000ce2c:	6a3b      	ldr	r3, [r7, #32]
9000ce2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000ce32:	691b      	ldr	r3, [r3, #16]
9000ce34:	b29b      	uxth	r3, r3
9000ce36:	429a      	cmp	r2, r3
9000ce38:	d90a      	bls.n	9000ce50 <USB_HC_StartXfer+0x4bc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
9000ce3a:	68fb      	ldr	r3, [r7, #12]
9000ce3c:	699b      	ldr	r3, [r3, #24]
9000ce3e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
9000ce42:	68fb      	ldr	r3, [r7, #12]
9000ce44:	619a      	str	r2, [r3, #24]
        }
        break;
9000ce46:	e003      	b.n	9000ce50 <USB_HC_StartXfer+0x4bc>

      default:
        break;
9000ce48:	bf00      	nop
9000ce4a:	e002      	b.n	9000ce52 <USB_HC_StartXfer+0x4be>
        break;
9000ce4c:	bf00      	nop
9000ce4e:	e000      	b.n	9000ce52 <USB_HC_StartXfer+0x4be>
        break;
9000ce50:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
9000ce52:	68bb      	ldr	r3, [r7, #8]
9000ce54:	6999      	ldr	r1, [r3, #24]
9000ce56:	68bb      	ldr	r3, [r7, #8]
9000ce58:	785a      	ldrb	r2, [r3, #1]
9000ce5a:	68bb      	ldr	r3, [r7, #8]
9000ce5c:	6a1b      	ldr	r3, [r3, #32]
9000ce5e:	b29b      	uxth	r3, r3
9000ce60:	2000      	movs	r0, #0
9000ce62:	9000      	str	r0, [sp, #0]
9000ce64:	68f8      	ldr	r0, [r7, #12]
9000ce66:	f7ff f9f5 	bl	9000c254 <USB_WritePacket>
  }

  return HAL_OK;
9000ce6a:	2300      	movs	r3, #0
}
9000ce6c:	4618      	mov	r0, r3
9000ce6e:	3728      	adds	r7, #40	@ 0x28
9000ce70:	46bd      	mov	sp, r7
9000ce72:	bd80      	pop	{r7, pc}

9000ce74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000ce74:	b480      	push	{r7}
9000ce76:	b085      	sub	sp, #20
9000ce78:	af00      	add	r7, sp, #0
9000ce7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000ce7c:	687b      	ldr	r3, [r7, #4]
9000ce7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000ce80:	68fb      	ldr	r3, [r7, #12]
9000ce82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000ce86:	695b      	ldr	r3, [r3, #20]
9000ce88:	b29b      	uxth	r3, r3
}
9000ce8a:	4618      	mov	r0, r3
9000ce8c:	3714      	adds	r7, #20
9000ce8e:	46bd      	mov	sp, r7
9000ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ce94:	4770      	bx	lr

9000ce96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000ce96:	b480      	push	{r7}
9000ce98:	b089      	sub	sp, #36	@ 0x24
9000ce9a:	af00      	add	r7, sp, #0
9000ce9c:	6078      	str	r0, [r7, #4]
9000ce9e:	460b      	mov	r3, r1
9000cea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000cea2:	687b      	ldr	r3, [r7, #4]
9000cea4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000cea6:	78fb      	ldrb	r3, [r7, #3]
9000cea8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000ceaa:	2300      	movs	r3, #0
9000ceac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000ceae:	69bb      	ldr	r3, [r7, #24]
9000ceb0:	015a      	lsls	r2, r3, #5
9000ceb2:	69fb      	ldr	r3, [r7, #28]
9000ceb4:	4413      	add	r3, r2
9000ceb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000ceba:	681b      	ldr	r3, [r3, #0]
9000cebc:	0c9b      	lsrs	r3, r3, #18
9000cebe:	f003 0303 	and.w	r3, r3, #3
9000cec2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000cec4:	69bb      	ldr	r3, [r7, #24]
9000cec6:	015a      	lsls	r2, r3, #5
9000cec8:	69fb      	ldr	r3, [r7, #28]
9000ceca:	4413      	add	r3, r2
9000cecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000ced0:	681b      	ldr	r3, [r3, #0]
9000ced2:	0fdb      	lsrs	r3, r3, #31
9000ced4:	f003 0301 	and.w	r3, r3, #1
9000ced8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000ceda:	69bb      	ldr	r3, [r7, #24]
9000cedc:	015a      	lsls	r2, r3, #5
9000cede:	69fb      	ldr	r3, [r7, #28]
9000cee0:	4413      	add	r3, r2
9000cee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cee6:	685b      	ldr	r3, [r3, #4]
9000cee8:	0fdb      	lsrs	r3, r3, #31
9000ceea:	f003 0301 	and.w	r3, r3, #1
9000ceee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000cef0:	687b      	ldr	r3, [r7, #4]
9000cef2:	689b      	ldr	r3, [r3, #8]
9000cef4:	f003 0320 	and.w	r3, r3, #32
9000cef8:	2b20      	cmp	r3, #32
9000cefa:	d10d      	bne.n	9000cf18 <USB_HC_Halt+0x82>
9000cefc:	68fb      	ldr	r3, [r7, #12]
9000cefe:	2b00      	cmp	r3, #0
9000cf00:	d10a      	bne.n	9000cf18 <USB_HC_Halt+0x82>
9000cf02:	693b      	ldr	r3, [r7, #16]
9000cf04:	2b00      	cmp	r3, #0
9000cf06:	d005      	beq.n	9000cf14 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000cf08:	697b      	ldr	r3, [r7, #20]
9000cf0a:	2b01      	cmp	r3, #1
9000cf0c:	d002      	beq.n	9000cf14 <USB_HC_Halt+0x7e>
9000cf0e:	697b      	ldr	r3, [r7, #20]
9000cf10:	2b03      	cmp	r3, #3
9000cf12:	d101      	bne.n	9000cf18 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000cf14:	2300      	movs	r3, #0
9000cf16:	e0d8      	b.n	9000d0ca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000cf18:	697b      	ldr	r3, [r7, #20]
9000cf1a:	2b00      	cmp	r3, #0
9000cf1c:	d002      	beq.n	9000cf24 <USB_HC_Halt+0x8e>
9000cf1e:	697b      	ldr	r3, [r7, #20]
9000cf20:	2b02      	cmp	r3, #2
9000cf22:	d173      	bne.n	9000d00c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000cf24:	69bb      	ldr	r3, [r7, #24]
9000cf26:	015a      	lsls	r2, r3, #5
9000cf28:	69fb      	ldr	r3, [r7, #28]
9000cf2a:	4413      	add	r3, r2
9000cf2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cf30:	681b      	ldr	r3, [r3, #0]
9000cf32:	69ba      	ldr	r2, [r7, #24]
9000cf34:	0151      	lsls	r1, r2, #5
9000cf36:	69fa      	ldr	r2, [r7, #28]
9000cf38:	440a      	add	r2, r1
9000cf3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cf3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000cf42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000cf44:	687b      	ldr	r3, [r7, #4]
9000cf46:	689b      	ldr	r3, [r3, #8]
9000cf48:	f003 0320 	and.w	r3, r3, #32
9000cf4c:	2b00      	cmp	r3, #0
9000cf4e:	d14a      	bne.n	9000cfe6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000cf50:	687b      	ldr	r3, [r7, #4]
9000cf52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000cf54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000cf58:	2b00      	cmp	r3, #0
9000cf5a:	d133      	bne.n	9000cfc4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000cf5c:	69bb      	ldr	r3, [r7, #24]
9000cf5e:	015a      	lsls	r2, r3, #5
9000cf60:	69fb      	ldr	r3, [r7, #28]
9000cf62:	4413      	add	r3, r2
9000cf64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cf68:	681b      	ldr	r3, [r3, #0]
9000cf6a:	69ba      	ldr	r2, [r7, #24]
9000cf6c:	0151      	lsls	r1, r2, #5
9000cf6e:	69fa      	ldr	r2, [r7, #28]
9000cf70:	440a      	add	r2, r1
9000cf72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cf76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000cf7a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000cf7c:	69bb      	ldr	r3, [r7, #24]
9000cf7e:	015a      	lsls	r2, r3, #5
9000cf80:	69fb      	ldr	r3, [r7, #28]
9000cf82:	4413      	add	r3, r2
9000cf84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cf88:	681b      	ldr	r3, [r3, #0]
9000cf8a:	69ba      	ldr	r2, [r7, #24]
9000cf8c:	0151      	lsls	r1, r2, #5
9000cf8e:	69fa      	ldr	r2, [r7, #28]
9000cf90:	440a      	add	r2, r1
9000cf92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cf96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000cf9a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000cf9c:	68bb      	ldr	r3, [r7, #8]
9000cf9e:	3301      	adds	r3, #1
9000cfa0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000cfa2:	68bb      	ldr	r3, [r7, #8]
9000cfa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000cfa8:	d82e      	bhi.n	9000d008 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000cfaa:	69bb      	ldr	r3, [r7, #24]
9000cfac:	015a      	lsls	r2, r3, #5
9000cfae:	69fb      	ldr	r3, [r7, #28]
9000cfb0:	4413      	add	r3, r2
9000cfb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cfb6:	681b      	ldr	r3, [r3, #0]
9000cfb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000cfbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000cfc0:	d0ec      	beq.n	9000cf9c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000cfc2:	e081      	b.n	9000d0c8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000cfc4:	69bb      	ldr	r3, [r7, #24]
9000cfc6:	015a      	lsls	r2, r3, #5
9000cfc8:	69fb      	ldr	r3, [r7, #28]
9000cfca:	4413      	add	r3, r2
9000cfcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cfd0:	681b      	ldr	r3, [r3, #0]
9000cfd2:	69ba      	ldr	r2, [r7, #24]
9000cfd4:	0151      	lsls	r1, r2, #5
9000cfd6:	69fa      	ldr	r2, [r7, #28]
9000cfd8:	440a      	add	r2, r1
9000cfda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000cfde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000cfe2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000cfe4:	e070      	b.n	9000d0c8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000cfe6:	69bb      	ldr	r3, [r7, #24]
9000cfe8:	015a      	lsls	r2, r3, #5
9000cfea:	69fb      	ldr	r3, [r7, #28]
9000cfec:	4413      	add	r3, r2
9000cfee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000cff2:	681b      	ldr	r3, [r3, #0]
9000cff4:	69ba      	ldr	r2, [r7, #24]
9000cff6:	0151      	lsls	r1, r2, #5
9000cff8:	69fa      	ldr	r2, [r7, #28]
9000cffa:	440a      	add	r2, r1
9000cffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000d000:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000d004:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000d006:	e05f      	b.n	9000d0c8 <USB_HC_Halt+0x232>
            break;
9000d008:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000d00a:	e05d      	b.n	9000d0c8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000d00c:	69bb      	ldr	r3, [r7, #24]
9000d00e:	015a      	lsls	r2, r3, #5
9000d010:	69fb      	ldr	r3, [r7, #28]
9000d012:	4413      	add	r3, r2
9000d014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d018:	681b      	ldr	r3, [r3, #0]
9000d01a:	69ba      	ldr	r2, [r7, #24]
9000d01c:	0151      	lsls	r1, r2, #5
9000d01e:	69fa      	ldr	r2, [r7, #28]
9000d020:	440a      	add	r2, r1
9000d022:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000d026:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000d02a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000d02c:	69fb      	ldr	r3, [r7, #28]
9000d02e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000d032:	691b      	ldr	r3, [r3, #16]
9000d034:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000d038:	2b00      	cmp	r3, #0
9000d03a:	d133      	bne.n	9000d0a4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000d03c:	69bb      	ldr	r3, [r7, #24]
9000d03e:	015a      	lsls	r2, r3, #5
9000d040:	69fb      	ldr	r3, [r7, #28]
9000d042:	4413      	add	r3, r2
9000d044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d048:	681b      	ldr	r3, [r3, #0]
9000d04a:	69ba      	ldr	r2, [r7, #24]
9000d04c:	0151      	lsls	r1, r2, #5
9000d04e:	69fa      	ldr	r2, [r7, #28]
9000d050:	440a      	add	r2, r1
9000d052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000d056:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000d05a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000d05c:	69bb      	ldr	r3, [r7, #24]
9000d05e:	015a      	lsls	r2, r3, #5
9000d060:	69fb      	ldr	r3, [r7, #28]
9000d062:	4413      	add	r3, r2
9000d064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d068:	681b      	ldr	r3, [r3, #0]
9000d06a:	69ba      	ldr	r2, [r7, #24]
9000d06c:	0151      	lsls	r1, r2, #5
9000d06e:	69fa      	ldr	r2, [r7, #28]
9000d070:	440a      	add	r2, r1
9000d072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000d076:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000d07a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000d07c:	68bb      	ldr	r3, [r7, #8]
9000d07e:	3301      	adds	r3, #1
9000d080:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000d082:	68bb      	ldr	r3, [r7, #8]
9000d084:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000d088:	d81d      	bhi.n	9000d0c6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000d08a:	69bb      	ldr	r3, [r7, #24]
9000d08c:	015a      	lsls	r2, r3, #5
9000d08e:	69fb      	ldr	r3, [r7, #28]
9000d090:	4413      	add	r3, r2
9000d092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d096:	681b      	ldr	r3, [r3, #0]
9000d098:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000d09c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000d0a0:	d0ec      	beq.n	9000d07c <USB_HC_Halt+0x1e6>
9000d0a2:	e011      	b.n	9000d0c8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000d0a4:	69bb      	ldr	r3, [r7, #24]
9000d0a6:	015a      	lsls	r2, r3, #5
9000d0a8:	69fb      	ldr	r3, [r7, #28]
9000d0aa:	4413      	add	r3, r2
9000d0ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d0b0:	681b      	ldr	r3, [r3, #0]
9000d0b2:	69ba      	ldr	r2, [r7, #24]
9000d0b4:	0151      	lsls	r1, r2, #5
9000d0b6:	69fa      	ldr	r2, [r7, #28]
9000d0b8:	440a      	add	r2, r1
9000d0ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000d0be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000d0c2:	6013      	str	r3, [r2, #0]
9000d0c4:	e000      	b.n	9000d0c8 <USB_HC_Halt+0x232>
          break;
9000d0c6:	bf00      	nop
    }
  }

  return HAL_OK;
9000d0c8:	2300      	movs	r3, #0
}
9000d0ca:	4618      	mov	r0, r3
9000d0cc:	3724      	adds	r7, #36	@ 0x24
9000d0ce:	46bd      	mov	sp, r7
9000d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d0d4:	4770      	bx	lr
	...

9000d0d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
9000d0d8:	b480      	push	{r7}
9000d0da:	b087      	sub	sp, #28
9000d0dc:	af00      	add	r7, sp, #0
9000d0de:	6078      	str	r0, [r7, #4]
9000d0e0:	460b      	mov	r3, r1
9000d0e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000d0e4:	687b      	ldr	r3, [r7, #4]
9000d0e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
9000d0e8:	78fb      	ldrb	r3, [r7, #3]
9000d0ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
9000d0ec:	2301      	movs	r3, #1
9000d0ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
9000d0f0:	68fb      	ldr	r3, [r7, #12]
9000d0f2:	04da      	lsls	r2, r3, #19
9000d0f4:	4b15      	ldr	r3, [pc, #84]	@ (9000d14c <USB_DoPing+0x74>)
9000d0f6:	4013      	ands	r3, r2
9000d0f8:	693a      	ldr	r2, [r7, #16]
9000d0fa:	0151      	lsls	r1, r2, #5
9000d0fc:	697a      	ldr	r2, [r7, #20]
9000d0fe:	440a      	add	r2, r1
9000d100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000d104:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000d108:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
9000d10a:	693b      	ldr	r3, [r7, #16]
9000d10c:	015a      	lsls	r2, r3, #5
9000d10e:	697b      	ldr	r3, [r7, #20]
9000d110:	4413      	add	r3, r2
9000d112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d116:	681b      	ldr	r3, [r3, #0]
9000d118:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000d11a:	68bb      	ldr	r3, [r7, #8]
9000d11c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
9000d120:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
9000d122:	68bb      	ldr	r3, [r7, #8]
9000d124:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000d128:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
9000d12a:	693b      	ldr	r3, [r7, #16]
9000d12c:	015a      	lsls	r2, r3, #5
9000d12e:	697b      	ldr	r3, [r7, #20]
9000d130:	4413      	add	r3, r2
9000d132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d136:	461a      	mov	r2, r3
9000d138:	68bb      	ldr	r3, [r7, #8]
9000d13a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
9000d13c:	2300      	movs	r3, #0
}
9000d13e:	4618      	mov	r0, r3
9000d140:	371c      	adds	r7, #28
9000d142:	46bd      	mov	sp, r7
9000d144:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d148:	4770      	bx	lr
9000d14a:	bf00      	nop
9000d14c:	1ff80000 	.word	0x1ff80000

9000d150 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000d150:	b580      	push	{r7, lr}
9000d152:	b088      	sub	sp, #32
9000d154:	af00      	add	r7, sp, #0
9000d156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000d158:	2300      	movs	r3, #0
9000d15a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000d15c:	687b      	ldr	r3, [r7, #4]
9000d15e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000d160:	2300      	movs	r3, #0
9000d162:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000d164:	6878      	ldr	r0, [r7, #4]
9000d166:	f7fe ffb8 	bl	9000c0da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000d16a:	2110      	movs	r1, #16
9000d16c:	6878      	ldr	r0, [r7, #4]
9000d16e:	f7ff f811 	bl	9000c194 <USB_FlushTxFifo>
9000d172:	4603      	mov	r3, r0
9000d174:	2b00      	cmp	r3, #0
9000d176:	d001      	beq.n	9000d17c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000d178:	2301      	movs	r3, #1
9000d17a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000d17c:	6878      	ldr	r0, [r7, #4]
9000d17e:	f7ff f83b 	bl	9000c1f8 <USB_FlushRxFifo>
9000d182:	4603      	mov	r3, r0
9000d184:	2b00      	cmp	r3, #0
9000d186:	d001      	beq.n	9000d18c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000d188:	2301      	movs	r3, #1
9000d18a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000d18c:	2300      	movs	r3, #0
9000d18e:	61bb      	str	r3, [r7, #24]
9000d190:	e01f      	b.n	9000d1d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000d192:	69bb      	ldr	r3, [r7, #24]
9000d194:	015a      	lsls	r2, r3, #5
9000d196:	697b      	ldr	r3, [r7, #20]
9000d198:	4413      	add	r3, r2
9000d19a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d19e:	681b      	ldr	r3, [r3, #0]
9000d1a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000d1a2:	693b      	ldr	r3, [r7, #16]
9000d1a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000d1a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000d1aa:	693b      	ldr	r3, [r7, #16]
9000d1ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000d1b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000d1b2:	693b      	ldr	r3, [r7, #16]
9000d1b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000d1b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000d1ba:	69bb      	ldr	r3, [r7, #24]
9000d1bc:	015a      	lsls	r2, r3, #5
9000d1be:	697b      	ldr	r3, [r7, #20]
9000d1c0:	4413      	add	r3, r2
9000d1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d1c6:	461a      	mov	r2, r3
9000d1c8:	693b      	ldr	r3, [r7, #16]
9000d1ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000d1cc:	69bb      	ldr	r3, [r7, #24]
9000d1ce:	3301      	adds	r3, #1
9000d1d0:	61bb      	str	r3, [r7, #24]
9000d1d2:	69bb      	ldr	r3, [r7, #24]
9000d1d4:	2b0f      	cmp	r3, #15
9000d1d6:	d9dc      	bls.n	9000d192 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000d1d8:	2300      	movs	r3, #0
9000d1da:	61bb      	str	r3, [r7, #24]
9000d1dc:	e034      	b.n	9000d248 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000d1de:	69bb      	ldr	r3, [r7, #24]
9000d1e0:	015a      	lsls	r2, r3, #5
9000d1e2:	697b      	ldr	r3, [r7, #20]
9000d1e4:	4413      	add	r3, r2
9000d1e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d1ea:	681b      	ldr	r3, [r3, #0]
9000d1ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000d1ee:	693b      	ldr	r3, [r7, #16]
9000d1f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000d1f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000d1f6:	693b      	ldr	r3, [r7, #16]
9000d1f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000d1fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000d1fe:	693b      	ldr	r3, [r7, #16]
9000d200:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000d204:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000d206:	69bb      	ldr	r3, [r7, #24]
9000d208:	015a      	lsls	r2, r3, #5
9000d20a:	697b      	ldr	r3, [r7, #20]
9000d20c:	4413      	add	r3, r2
9000d20e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d212:	461a      	mov	r2, r3
9000d214:	693b      	ldr	r3, [r7, #16]
9000d216:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000d218:	68fb      	ldr	r3, [r7, #12]
9000d21a:	3301      	adds	r3, #1
9000d21c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000d21e:	68fb      	ldr	r3, [r7, #12]
9000d220:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000d224:	d80c      	bhi.n	9000d240 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000d226:	69bb      	ldr	r3, [r7, #24]
9000d228:	015a      	lsls	r2, r3, #5
9000d22a:	697b      	ldr	r3, [r7, #20]
9000d22c:	4413      	add	r3, r2
9000d22e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000d232:	681b      	ldr	r3, [r3, #0]
9000d234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000d238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000d23c:	d0ec      	beq.n	9000d218 <USB_StopHost+0xc8>
9000d23e:	e000      	b.n	9000d242 <USB_StopHost+0xf2>
        break;
9000d240:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000d242:	69bb      	ldr	r3, [r7, #24]
9000d244:	3301      	adds	r3, #1
9000d246:	61bb      	str	r3, [r7, #24]
9000d248:	69bb      	ldr	r3, [r7, #24]
9000d24a:	2b0f      	cmp	r3, #15
9000d24c:	d9c7      	bls.n	9000d1de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000d24e:	697b      	ldr	r3, [r7, #20]
9000d250:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000d254:	461a      	mov	r2, r3
9000d256:	f04f 33ff 	mov.w	r3, #4294967295
9000d25a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000d25c:	687b      	ldr	r3, [r7, #4]
9000d25e:	f04f 32ff 	mov.w	r2, #4294967295
9000d262:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000d264:	6878      	ldr	r0, [r7, #4]
9000d266:	f7fe ff27 	bl	9000c0b8 <USB_EnableGlobalInt>

  return ret;
9000d26a:	7ffb      	ldrb	r3, [r7, #31]
}
9000d26c:	4618      	mov	r0, r3
9000d26e:	3720      	adds	r7, #32
9000d270:	46bd      	mov	sp, r7
9000d272:	bd80      	pop	{r7, pc}

9000d274 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
9000d274:	b580      	push	{r7, lr}
9000d276:	b084      	sub	sp, #16
9000d278:	af00      	add	r7, sp, #0
9000d27a:	4603      	mov	r3, r0
9000d27c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
9000d27e:	79fb      	ldrb	r3, [r7, #7]
9000d280:	4a08      	ldr	r2, [pc, #32]	@ (9000d2a4 <disk_status+0x30>)
9000d282:	009b      	lsls	r3, r3, #2
9000d284:	4413      	add	r3, r2
9000d286:	685b      	ldr	r3, [r3, #4]
9000d288:	685b      	ldr	r3, [r3, #4]
9000d28a:	79fa      	ldrb	r2, [r7, #7]
9000d28c:	4905      	ldr	r1, [pc, #20]	@ (9000d2a4 <disk_status+0x30>)
9000d28e:	440a      	add	r2, r1
9000d290:	7a12      	ldrb	r2, [r2, #8]
9000d292:	4610      	mov	r0, r2
9000d294:	4798      	blx	r3
9000d296:	4603      	mov	r3, r0
9000d298:	73fb      	strb	r3, [r7, #15]
  return stat;
9000d29a:	7bfb      	ldrb	r3, [r7, #15]
}
9000d29c:	4618      	mov	r0, r3
9000d29e:	3710      	adds	r7, #16
9000d2a0:	46bd      	mov	sp, r7
9000d2a2:	bd80      	pop	{r7, pc}
9000d2a4:	20001eb0 	.word	0x20001eb0

9000d2a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
9000d2a8:	b580      	push	{r7, lr}
9000d2aa:	b084      	sub	sp, #16
9000d2ac:	af00      	add	r7, sp, #0
9000d2ae:	4603      	mov	r3, r0
9000d2b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
9000d2b2:	2300      	movs	r3, #0
9000d2b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
9000d2b6:	79fb      	ldrb	r3, [r7, #7]
9000d2b8:	4a0e      	ldr	r2, [pc, #56]	@ (9000d2f4 <disk_initialize+0x4c>)
9000d2ba:	5cd3      	ldrb	r3, [r2, r3]
9000d2bc:	2b00      	cmp	r3, #0
9000d2be:	d114      	bne.n	9000d2ea <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
9000d2c0:	79fb      	ldrb	r3, [r7, #7]
9000d2c2:	4a0c      	ldr	r2, [pc, #48]	@ (9000d2f4 <disk_initialize+0x4c>)
9000d2c4:	009b      	lsls	r3, r3, #2
9000d2c6:	4413      	add	r3, r2
9000d2c8:	685b      	ldr	r3, [r3, #4]
9000d2ca:	681b      	ldr	r3, [r3, #0]
9000d2cc:	79fa      	ldrb	r2, [r7, #7]
9000d2ce:	4909      	ldr	r1, [pc, #36]	@ (9000d2f4 <disk_initialize+0x4c>)
9000d2d0:	440a      	add	r2, r1
9000d2d2:	7a12      	ldrb	r2, [r2, #8]
9000d2d4:	4610      	mov	r0, r2
9000d2d6:	4798      	blx	r3
9000d2d8:	4603      	mov	r3, r0
9000d2da:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
9000d2dc:	7bfb      	ldrb	r3, [r7, #15]
9000d2de:	2b00      	cmp	r3, #0
9000d2e0:	d103      	bne.n	9000d2ea <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
9000d2e2:	79fb      	ldrb	r3, [r7, #7]
9000d2e4:	4a03      	ldr	r2, [pc, #12]	@ (9000d2f4 <disk_initialize+0x4c>)
9000d2e6:	2101      	movs	r1, #1
9000d2e8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
9000d2ea:	7bfb      	ldrb	r3, [r7, #15]
}
9000d2ec:	4618      	mov	r0, r3
9000d2ee:	3710      	adds	r7, #16
9000d2f0:	46bd      	mov	sp, r7
9000d2f2:	bd80      	pop	{r7, pc}
9000d2f4:	20001eb0 	.word	0x20001eb0

9000d2f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
9000d2f8:	b590      	push	{r4, r7, lr}
9000d2fa:	b087      	sub	sp, #28
9000d2fc:	af00      	add	r7, sp, #0
9000d2fe:	60b9      	str	r1, [r7, #8]
9000d300:	607a      	str	r2, [r7, #4]
9000d302:	603b      	str	r3, [r7, #0]
9000d304:	4603      	mov	r3, r0
9000d306:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
9000d308:	7bfb      	ldrb	r3, [r7, #15]
9000d30a:	4a0a      	ldr	r2, [pc, #40]	@ (9000d334 <disk_read+0x3c>)
9000d30c:	009b      	lsls	r3, r3, #2
9000d30e:	4413      	add	r3, r2
9000d310:	685b      	ldr	r3, [r3, #4]
9000d312:	689c      	ldr	r4, [r3, #8]
9000d314:	7bfb      	ldrb	r3, [r7, #15]
9000d316:	4a07      	ldr	r2, [pc, #28]	@ (9000d334 <disk_read+0x3c>)
9000d318:	4413      	add	r3, r2
9000d31a:	7a18      	ldrb	r0, [r3, #8]
9000d31c:	683b      	ldr	r3, [r7, #0]
9000d31e:	687a      	ldr	r2, [r7, #4]
9000d320:	68b9      	ldr	r1, [r7, #8]
9000d322:	47a0      	blx	r4
9000d324:	4603      	mov	r3, r0
9000d326:	75fb      	strb	r3, [r7, #23]
  return res;
9000d328:	7dfb      	ldrb	r3, [r7, #23]
}
9000d32a:	4618      	mov	r0, r3
9000d32c:	371c      	adds	r7, #28
9000d32e:	46bd      	mov	sp, r7
9000d330:	bd90      	pop	{r4, r7, pc}
9000d332:	bf00      	nop
9000d334:	20001eb0 	.word	0x20001eb0

9000d338 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
9000d338:	b590      	push	{r4, r7, lr}
9000d33a:	b087      	sub	sp, #28
9000d33c:	af00      	add	r7, sp, #0
9000d33e:	60b9      	str	r1, [r7, #8]
9000d340:	607a      	str	r2, [r7, #4]
9000d342:	603b      	str	r3, [r7, #0]
9000d344:	4603      	mov	r3, r0
9000d346:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
9000d348:	7bfb      	ldrb	r3, [r7, #15]
9000d34a:	4a0a      	ldr	r2, [pc, #40]	@ (9000d374 <disk_write+0x3c>)
9000d34c:	009b      	lsls	r3, r3, #2
9000d34e:	4413      	add	r3, r2
9000d350:	685b      	ldr	r3, [r3, #4]
9000d352:	68dc      	ldr	r4, [r3, #12]
9000d354:	7bfb      	ldrb	r3, [r7, #15]
9000d356:	4a07      	ldr	r2, [pc, #28]	@ (9000d374 <disk_write+0x3c>)
9000d358:	4413      	add	r3, r2
9000d35a:	7a18      	ldrb	r0, [r3, #8]
9000d35c:	683b      	ldr	r3, [r7, #0]
9000d35e:	687a      	ldr	r2, [r7, #4]
9000d360:	68b9      	ldr	r1, [r7, #8]
9000d362:	47a0      	blx	r4
9000d364:	4603      	mov	r3, r0
9000d366:	75fb      	strb	r3, [r7, #23]
  return res;
9000d368:	7dfb      	ldrb	r3, [r7, #23]
}
9000d36a:	4618      	mov	r0, r3
9000d36c:	371c      	adds	r7, #28
9000d36e:	46bd      	mov	sp, r7
9000d370:	bd90      	pop	{r4, r7, pc}
9000d372:	bf00      	nop
9000d374:	20001eb0 	.word	0x20001eb0

9000d378 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
9000d378:	b580      	push	{r7, lr}
9000d37a:	b084      	sub	sp, #16
9000d37c:	af00      	add	r7, sp, #0
9000d37e:	4603      	mov	r3, r0
9000d380:	603a      	str	r2, [r7, #0]
9000d382:	71fb      	strb	r3, [r7, #7]
9000d384:	460b      	mov	r3, r1
9000d386:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
9000d388:	79fb      	ldrb	r3, [r7, #7]
9000d38a:	4a09      	ldr	r2, [pc, #36]	@ (9000d3b0 <disk_ioctl+0x38>)
9000d38c:	009b      	lsls	r3, r3, #2
9000d38e:	4413      	add	r3, r2
9000d390:	685b      	ldr	r3, [r3, #4]
9000d392:	691b      	ldr	r3, [r3, #16]
9000d394:	79fa      	ldrb	r2, [r7, #7]
9000d396:	4906      	ldr	r1, [pc, #24]	@ (9000d3b0 <disk_ioctl+0x38>)
9000d398:	440a      	add	r2, r1
9000d39a:	7a10      	ldrb	r0, [r2, #8]
9000d39c:	79b9      	ldrb	r1, [r7, #6]
9000d39e:	683a      	ldr	r2, [r7, #0]
9000d3a0:	4798      	blx	r3
9000d3a2:	4603      	mov	r3, r0
9000d3a4:	73fb      	strb	r3, [r7, #15]
  return res;
9000d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
9000d3a8:	4618      	mov	r0, r3
9000d3aa:	3710      	adds	r7, #16
9000d3ac:	46bd      	mov	sp, r7
9000d3ae:	bd80      	pop	{r7, pc}
9000d3b0:	20001eb0 	.word	0x20001eb0

9000d3b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
9000d3b4:	b480      	push	{r7}
9000d3b6:	af00      	add	r7, sp, #0
  return 0;
9000d3b8:	2300      	movs	r3, #0
}
9000d3ba:	4618      	mov	r0, r3
9000d3bc:	46bd      	mov	sp, r7
9000d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d3c2:	4770      	bx	lr

9000d3c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
9000d3c4:	b480      	push	{r7}
9000d3c6:	b085      	sub	sp, #20
9000d3c8:	af00      	add	r7, sp, #0
9000d3ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
9000d3cc:	687b      	ldr	r3, [r7, #4]
9000d3ce:	3301      	adds	r3, #1
9000d3d0:	781b      	ldrb	r3, [r3, #0]
9000d3d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
9000d3d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
9000d3d8:	021b      	lsls	r3, r3, #8
9000d3da:	b21a      	sxth	r2, r3
9000d3dc:	687b      	ldr	r3, [r7, #4]
9000d3de:	781b      	ldrb	r3, [r3, #0]
9000d3e0:	b21b      	sxth	r3, r3
9000d3e2:	4313      	orrs	r3, r2
9000d3e4:	b21b      	sxth	r3, r3
9000d3e6:	81fb      	strh	r3, [r7, #14]
	return rv;
9000d3e8:	89fb      	ldrh	r3, [r7, #14]
}
9000d3ea:	4618      	mov	r0, r3
9000d3ec:	3714      	adds	r7, #20
9000d3ee:	46bd      	mov	sp, r7
9000d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d3f4:	4770      	bx	lr

9000d3f6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
9000d3f6:	b480      	push	{r7}
9000d3f8:	b085      	sub	sp, #20
9000d3fa:	af00      	add	r7, sp, #0
9000d3fc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
9000d3fe:	687b      	ldr	r3, [r7, #4]
9000d400:	3303      	adds	r3, #3
9000d402:	781b      	ldrb	r3, [r3, #0]
9000d404:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
9000d406:	68fb      	ldr	r3, [r7, #12]
9000d408:	021b      	lsls	r3, r3, #8
9000d40a:	687a      	ldr	r2, [r7, #4]
9000d40c:	3202      	adds	r2, #2
9000d40e:	7812      	ldrb	r2, [r2, #0]
9000d410:	4313      	orrs	r3, r2
9000d412:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
9000d414:	68fb      	ldr	r3, [r7, #12]
9000d416:	021b      	lsls	r3, r3, #8
9000d418:	687a      	ldr	r2, [r7, #4]
9000d41a:	3201      	adds	r2, #1
9000d41c:	7812      	ldrb	r2, [r2, #0]
9000d41e:	4313      	orrs	r3, r2
9000d420:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
9000d422:	68fb      	ldr	r3, [r7, #12]
9000d424:	021b      	lsls	r3, r3, #8
9000d426:	687a      	ldr	r2, [r7, #4]
9000d428:	7812      	ldrb	r2, [r2, #0]
9000d42a:	4313      	orrs	r3, r2
9000d42c:	60fb      	str	r3, [r7, #12]
	return rv;
9000d42e:	68fb      	ldr	r3, [r7, #12]
}
9000d430:	4618      	mov	r0, r3
9000d432:	3714      	adds	r7, #20
9000d434:	46bd      	mov	sp, r7
9000d436:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d43a:	4770      	bx	lr

9000d43c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
9000d43c:	b480      	push	{r7}
9000d43e:	b083      	sub	sp, #12
9000d440:	af00      	add	r7, sp, #0
9000d442:	6078      	str	r0, [r7, #4]
9000d444:	460b      	mov	r3, r1
9000d446:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
9000d448:	687b      	ldr	r3, [r7, #4]
9000d44a:	1c5a      	adds	r2, r3, #1
9000d44c:	607a      	str	r2, [r7, #4]
9000d44e:	887a      	ldrh	r2, [r7, #2]
9000d450:	b2d2      	uxtb	r2, r2
9000d452:	701a      	strb	r2, [r3, #0]
9000d454:	887b      	ldrh	r3, [r7, #2]
9000d456:	0a1b      	lsrs	r3, r3, #8
9000d458:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
9000d45a:	687b      	ldr	r3, [r7, #4]
9000d45c:	1c5a      	adds	r2, r3, #1
9000d45e:	607a      	str	r2, [r7, #4]
9000d460:	887a      	ldrh	r2, [r7, #2]
9000d462:	b2d2      	uxtb	r2, r2
9000d464:	701a      	strb	r2, [r3, #0]
}
9000d466:	bf00      	nop
9000d468:	370c      	adds	r7, #12
9000d46a:	46bd      	mov	sp, r7
9000d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d470:	4770      	bx	lr

9000d472 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
9000d472:	b480      	push	{r7}
9000d474:	b083      	sub	sp, #12
9000d476:	af00      	add	r7, sp, #0
9000d478:	6078      	str	r0, [r7, #4]
9000d47a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
9000d47c:	687b      	ldr	r3, [r7, #4]
9000d47e:	1c5a      	adds	r2, r3, #1
9000d480:	607a      	str	r2, [r7, #4]
9000d482:	683a      	ldr	r2, [r7, #0]
9000d484:	b2d2      	uxtb	r2, r2
9000d486:	701a      	strb	r2, [r3, #0]
9000d488:	683b      	ldr	r3, [r7, #0]
9000d48a:	0a1b      	lsrs	r3, r3, #8
9000d48c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
9000d48e:	687b      	ldr	r3, [r7, #4]
9000d490:	1c5a      	adds	r2, r3, #1
9000d492:	607a      	str	r2, [r7, #4]
9000d494:	683a      	ldr	r2, [r7, #0]
9000d496:	b2d2      	uxtb	r2, r2
9000d498:	701a      	strb	r2, [r3, #0]
9000d49a:	683b      	ldr	r3, [r7, #0]
9000d49c:	0a1b      	lsrs	r3, r3, #8
9000d49e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
9000d4a0:	687b      	ldr	r3, [r7, #4]
9000d4a2:	1c5a      	adds	r2, r3, #1
9000d4a4:	607a      	str	r2, [r7, #4]
9000d4a6:	683a      	ldr	r2, [r7, #0]
9000d4a8:	b2d2      	uxtb	r2, r2
9000d4aa:	701a      	strb	r2, [r3, #0]
9000d4ac:	683b      	ldr	r3, [r7, #0]
9000d4ae:	0a1b      	lsrs	r3, r3, #8
9000d4b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
9000d4b2:	687b      	ldr	r3, [r7, #4]
9000d4b4:	1c5a      	adds	r2, r3, #1
9000d4b6:	607a      	str	r2, [r7, #4]
9000d4b8:	683a      	ldr	r2, [r7, #0]
9000d4ba:	b2d2      	uxtb	r2, r2
9000d4bc:	701a      	strb	r2, [r3, #0]
}
9000d4be:	bf00      	nop
9000d4c0:	370c      	adds	r7, #12
9000d4c2:	46bd      	mov	sp, r7
9000d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d4c8:	4770      	bx	lr

9000d4ca <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
9000d4ca:	b480      	push	{r7}
9000d4cc:	b087      	sub	sp, #28
9000d4ce:	af00      	add	r7, sp, #0
9000d4d0:	60f8      	str	r0, [r7, #12]
9000d4d2:	60b9      	str	r1, [r7, #8]
9000d4d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
9000d4d6:	68fb      	ldr	r3, [r7, #12]
9000d4d8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
9000d4da:	68bb      	ldr	r3, [r7, #8]
9000d4dc:	613b      	str	r3, [r7, #16]

	if (cnt) {
9000d4de:	687b      	ldr	r3, [r7, #4]
9000d4e0:	2b00      	cmp	r3, #0
9000d4e2:	d00d      	beq.n	9000d500 <mem_cpy+0x36>
		do {
			*d++ = *s++;
9000d4e4:	693a      	ldr	r2, [r7, #16]
9000d4e6:	1c53      	adds	r3, r2, #1
9000d4e8:	613b      	str	r3, [r7, #16]
9000d4ea:	697b      	ldr	r3, [r7, #20]
9000d4ec:	1c59      	adds	r1, r3, #1
9000d4ee:	6179      	str	r1, [r7, #20]
9000d4f0:	7812      	ldrb	r2, [r2, #0]
9000d4f2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
9000d4f4:	687b      	ldr	r3, [r7, #4]
9000d4f6:	3b01      	subs	r3, #1
9000d4f8:	607b      	str	r3, [r7, #4]
9000d4fa:	687b      	ldr	r3, [r7, #4]
9000d4fc:	2b00      	cmp	r3, #0
9000d4fe:	d1f1      	bne.n	9000d4e4 <mem_cpy+0x1a>
	}
}
9000d500:	bf00      	nop
9000d502:	371c      	adds	r7, #28
9000d504:	46bd      	mov	sp, r7
9000d506:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d50a:	4770      	bx	lr

9000d50c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
9000d50c:	b480      	push	{r7}
9000d50e:	b087      	sub	sp, #28
9000d510:	af00      	add	r7, sp, #0
9000d512:	60f8      	str	r0, [r7, #12]
9000d514:	60b9      	str	r1, [r7, #8]
9000d516:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
9000d518:	68fb      	ldr	r3, [r7, #12]
9000d51a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
9000d51c:	697b      	ldr	r3, [r7, #20]
9000d51e:	1c5a      	adds	r2, r3, #1
9000d520:	617a      	str	r2, [r7, #20]
9000d522:	68ba      	ldr	r2, [r7, #8]
9000d524:	b2d2      	uxtb	r2, r2
9000d526:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
9000d528:	687b      	ldr	r3, [r7, #4]
9000d52a:	3b01      	subs	r3, #1
9000d52c:	607b      	str	r3, [r7, #4]
9000d52e:	687b      	ldr	r3, [r7, #4]
9000d530:	2b00      	cmp	r3, #0
9000d532:	d1f3      	bne.n	9000d51c <mem_set+0x10>
}
9000d534:	bf00      	nop
9000d536:	bf00      	nop
9000d538:	371c      	adds	r7, #28
9000d53a:	46bd      	mov	sp, r7
9000d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d540:	4770      	bx	lr

9000d542 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
9000d542:	b480      	push	{r7}
9000d544:	b089      	sub	sp, #36	@ 0x24
9000d546:	af00      	add	r7, sp, #0
9000d548:	60f8      	str	r0, [r7, #12]
9000d54a:	60b9      	str	r1, [r7, #8]
9000d54c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
9000d54e:	68fb      	ldr	r3, [r7, #12]
9000d550:	61fb      	str	r3, [r7, #28]
9000d552:	68bb      	ldr	r3, [r7, #8]
9000d554:	61bb      	str	r3, [r7, #24]
	int r = 0;
9000d556:	2300      	movs	r3, #0
9000d558:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
9000d55a:	69fb      	ldr	r3, [r7, #28]
9000d55c:	1c5a      	adds	r2, r3, #1
9000d55e:	61fa      	str	r2, [r7, #28]
9000d560:	781b      	ldrb	r3, [r3, #0]
9000d562:	4619      	mov	r1, r3
9000d564:	69bb      	ldr	r3, [r7, #24]
9000d566:	1c5a      	adds	r2, r3, #1
9000d568:	61ba      	str	r2, [r7, #24]
9000d56a:	781b      	ldrb	r3, [r3, #0]
9000d56c:	1acb      	subs	r3, r1, r3
9000d56e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
9000d570:	687b      	ldr	r3, [r7, #4]
9000d572:	3b01      	subs	r3, #1
9000d574:	607b      	str	r3, [r7, #4]
9000d576:	687b      	ldr	r3, [r7, #4]
9000d578:	2b00      	cmp	r3, #0
9000d57a:	d002      	beq.n	9000d582 <mem_cmp+0x40>
9000d57c:	697b      	ldr	r3, [r7, #20]
9000d57e:	2b00      	cmp	r3, #0
9000d580:	d0eb      	beq.n	9000d55a <mem_cmp+0x18>

	return r;
9000d582:	697b      	ldr	r3, [r7, #20]
}
9000d584:	4618      	mov	r0, r3
9000d586:	3724      	adds	r7, #36	@ 0x24
9000d588:	46bd      	mov	sp, r7
9000d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d58e:	4770      	bx	lr

9000d590 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
9000d590:	b480      	push	{r7}
9000d592:	b083      	sub	sp, #12
9000d594:	af00      	add	r7, sp, #0
9000d596:	6078      	str	r0, [r7, #4]
9000d598:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
9000d59a:	e002      	b.n	9000d5a2 <chk_chr+0x12>
9000d59c:	687b      	ldr	r3, [r7, #4]
9000d59e:	3301      	adds	r3, #1
9000d5a0:	607b      	str	r3, [r7, #4]
9000d5a2:	687b      	ldr	r3, [r7, #4]
9000d5a4:	781b      	ldrb	r3, [r3, #0]
9000d5a6:	2b00      	cmp	r3, #0
9000d5a8:	d005      	beq.n	9000d5b6 <chk_chr+0x26>
9000d5aa:	687b      	ldr	r3, [r7, #4]
9000d5ac:	781b      	ldrb	r3, [r3, #0]
9000d5ae:	461a      	mov	r2, r3
9000d5b0:	683b      	ldr	r3, [r7, #0]
9000d5b2:	4293      	cmp	r3, r2
9000d5b4:	d1f2      	bne.n	9000d59c <chk_chr+0xc>
	return *str;
9000d5b6:	687b      	ldr	r3, [r7, #4]
9000d5b8:	781b      	ldrb	r3, [r3, #0]
}
9000d5ba:	4618      	mov	r0, r3
9000d5bc:	370c      	adds	r7, #12
9000d5be:	46bd      	mov	sp, r7
9000d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d5c4:	4770      	bx	lr
	...

9000d5c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
9000d5c8:	b480      	push	{r7}
9000d5ca:	b085      	sub	sp, #20
9000d5cc:	af00      	add	r7, sp, #0
9000d5ce:	6078      	str	r0, [r7, #4]
9000d5d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
9000d5d2:	2300      	movs	r3, #0
9000d5d4:	60bb      	str	r3, [r7, #8]
9000d5d6:	68bb      	ldr	r3, [r7, #8]
9000d5d8:	60fb      	str	r3, [r7, #12]
9000d5da:	e029      	b.n	9000d630 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
9000d5dc:	4a27      	ldr	r2, [pc, #156]	@ (9000d67c <chk_lock+0xb4>)
9000d5de:	68fb      	ldr	r3, [r7, #12]
9000d5e0:	011b      	lsls	r3, r3, #4
9000d5e2:	4413      	add	r3, r2
9000d5e4:	681b      	ldr	r3, [r3, #0]
9000d5e6:	2b00      	cmp	r3, #0
9000d5e8:	d01d      	beq.n	9000d626 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
9000d5ea:	4a24      	ldr	r2, [pc, #144]	@ (9000d67c <chk_lock+0xb4>)
9000d5ec:	68fb      	ldr	r3, [r7, #12]
9000d5ee:	011b      	lsls	r3, r3, #4
9000d5f0:	4413      	add	r3, r2
9000d5f2:	681a      	ldr	r2, [r3, #0]
9000d5f4:	687b      	ldr	r3, [r7, #4]
9000d5f6:	681b      	ldr	r3, [r3, #0]
9000d5f8:	429a      	cmp	r2, r3
9000d5fa:	d116      	bne.n	9000d62a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
9000d5fc:	4a1f      	ldr	r2, [pc, #124]	@ (9000d67c <chk_lock+0xb4>)
9000d5fe:	68fb      	ldr	r3, [r7, #12]
9000d600:	011b      	lsls	r3, r3, #4
9000d602:	4413      	add	r3, r2
9000d604:	3304      	adds	r3, #4
9000d606:	681a      	ldr	r2, [r3, #0]
9000d608:	687b      	ldr	r3, [r7, #4]
9000d60a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
9000d60c:	429a      	cmp	r2, r3
9000d60e:	d10c      	bne.n	9000d62a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
9000d610:	4a1a      	ldr	r2, [pc, #104]	@ (9000d67c <chk_lock+0xb4>)
9000d612:	68fb      	ldr	r3, [r7, #12]
9000d614:	011b      	lsls	r3, r3, #4
9000d616:	4413      	add	r3, r2
9000d618:	3308      	adds	r3, #8
9000d61a:	681a      	ldr	r2, [r3, #0]
9000d61c:	687b      	ldr	r3, [r7, #4]
9000d61e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
9000d620:	429a      	cmp	r2, r3
9000d622:	d102      	bne.n	9000d62a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
9000d624:	e007      	b.n	9000d636 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
9000d626:	2301      	movs	r3, #1
9000d628:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
9000d62a:	68fb      	ldr	r3, [r7, #12]
9000d62c:	3301      	adds	r3, #1
9000d62e:	60fb      	str	r3, [r7, #12]
9000d630:	68fb      	ldr	r3, [r7, #12]
9000d632:	2b01      	cmp	r3, #1
9000d634:	d9d2      	bls.n	9000d5dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
9000d636:	68fb      	ldr	r3, [r7, #12]
9000d638:	2b02      	cmp	r3, #2
9000d63a:	d109      	bne.n	9000d650 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
9000d63c:	68bb      	ldr	r3, [r7, #8]
9000d63e:	2b00      	cmp	r3, #0
9000d640:	d102      	bne.n	9000d648 <chk_lock+0x80>
9000d642:	683b      	ldr	r3, [r7, #0]
9000d644:	2b02      	cmp	r3, #2
9000d646:	d101      	bne.n	9000d64c <chk_lock+0x84>
9000d648:	2300      	movs	r3, #0
9000d64a:	e010      	b.n	9000d66e <chk_lock+0xa6>
9000d64c:	2312      	movs	r3, #18
9000d64e:	e00e      	b.n	9000d66e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
9000d650:	683b      	ldr	r3, [r7, #0]
9000d652:	2b00      	cmp	r3, #0
9000d654:	d108      	bne.n	9000d668 <chk_lock+0xa0>
9000d656:	4a09      	ldr	r2, [pc, #36]	@ (9000d67c <chk_lock+0xb4>)
9000d658:	68fb      	ldr	r3, [r7, #12]
9000d65a:	011b      	lsls	r3, r3, #4
9000d65c:	4413      	add	r3, r2
9000d65e:	330c      	adds	r3, #12
9000d660:	881b      	ldrh	r3, [r3, #0]
9000d662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000d666:	d101      	bne.n	9000d66c <chk_lock+0xa4>
9000d668:	2310      	movs	r3, #16
9000d66a:	e000      	b.n	9000d66e <chk_lock+0xa6>
9000d66c:	2300      	movs	r3, #0
}
9000d66e:	4618      	mov	r0, r3
9000d670:	3714      	adds	r7, #20
9000d672:	46bd      	mov	sp, r7
9000d674:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d678:	4770      	bx	lr
9000d67a:	bf00      	nop
9000d67c:	20001e90 	.word	0x20001e90

9000d680 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
9000d680:	b480      	push	{r7}
9000d682:	b083      	sub	sp, #12
9000d684:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
9000d686:	2300      	movs	r3, #0
9000d688:	607b      	str	r3, [r7, #4]
9000d68a:	e002      	b.n	9000d692 <enq_lock+0x12>
9000d68c:	687b      	ldr	r3, [r7, #4]
9000d68e:	3301      	adds	r3, #1
9000d690:	607b      	str	r3, [r7, #4]
9000d692:	687b      	ldr	r3, [r7, #4]
9000d694:	2b01      	cmp	r3, #1
9000d696:	d806      	bhi.n	9000d6a6 <enq_lock+0x26>
9000d698:	4a09      	ldr	r2, [pc, #36]	@ (9000d6c0 <enq_lock+0x40>)
9000d69a:	687b      	ldr	r3, [r7, #4]
9000d69c:	011b      	lsls	r3, r3, #4
9000d69e:	4413      	add	r3, r2
9000d6a0:	681b      	ldr	r3, [r3, #0]
9000d6a2:	2b00      	cmp	r3, #0
9000d6a4:	d1f2      	bne.n	9000d68c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
9000d6a6:	687b      	ldr	r3, [r7, #4]
9000d6a8:	2b02      	cmp	r3, #2
9000d6aa:	bf14      	ite	ne
9000d6ac:	2301      	movne	r3, #1
9000d6ae:	2300      	moveq	r3, #0
9000d6b0:	b2db      	uxtb	r3, r3
}
9000d6b2:	4618      	mov	r0, r3
9000d6b4:	370c      	adds	r7, #12
9000d6b6:	46bd      	mov	sp, r7
9000d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d6bc:	4770      	bx	lr
9000d6be:	bf00      	nop
9000d6c0:	20001e90 	.word	0x20001e90

9000d6c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
9000d6c4:	b480      	push	{r7}
9000d6c6:	b085      	sub	sp, #20
9000d6c8:	af00      	add	r7, sp, #0
9000d6ca:	6078      	str	r0, [r7, #4]
9000d6cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
9000d6ce:	2300      	movs	r3, #0
9000d6d0:	60fb      	str	r3, [r7, #12]
9000d6d2:	e01f      	b.n	9000d714 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
9000d6d4:	4a41      	ldr	r2, [pc, #260]	@ (9000d7dc <inc_lock+0x118>)
9000d6d6:	68fb      	ldr	r3, [r7, #12]
9000d6d8:	011b      	lsls	r3, r3, #4
9000d6da:	4413      	add	r3, r2
9000d6dc:	681a      	ldr	r2, [r3, #0]
9000d6de:	687b      	ldr	r3, [r7, #4]
9000d6e0:	681b      	ldr	r3, [r3, #0]
9000d6e2:	429a      	cmp	r2, r3
9000d6e4:	d113      	bne.n	9000d70e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
9000d6e6:	4a3d      	ldr	r2, [pc, #244]	@ (9000d7dc <inc_lock+0x118>)
9000d6e8:	68fb      	ldr	r3, [r7, #12]
9000d6ea:	011b      	lsls	r3, r3, #4
9000d6ec:	4413      	add	r3, r2
9000d6ee:	3304      	adds	r3, #4
9000d6f0:	681a      	ldr	r2, [r3, #0]
9000d6f2:	687b      	ldr	r3, [r7, #4]
9000d6f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
9000d6f6:	429a      	cmp	r2, r3
9000d6f8:	d109      	bne.n	9000d70e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
9000d6fa:	4a38      	ldr	r2, [pc, #224]	@ (9000d7dc <inc_lock+0x118>)
9000d6fc:	68fb      	ldr	r3, [r7, #12]
9000d6fe:	011b      	lsls	r3, r3, #4
9000d700:	4413      	add	r3, r2
9000d702:	3308      	adds	r3, #8
9000d704:	681a      	ldr	r2, [r3, #0]
9000d706:	687b      	ldr	r3, [r7, #4]
9000d708:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
9000d70a:	429a      	cmp	r2, r3
9000d70c:	d006      	beq.n	9000d71c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
9000d70e:	68fb      	ldr	r3, [r7, #12]
9000d710:	3301      	adds	r3, #1
9000d712:	60fb      	str	r3, [r7, #12]
9000d714:	68fb      	ldr	r3, [r7, #12]
9000d716:	2b01      	cmp	r3, #1
9000d718:	d9dc      	bls.n	9000d6d4 <inc_lock+0x10>
9000d71a:	e000      	b.n	9000d71e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
9000d71c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
9000d71e:	68fb      	ldr	r3, [r7, #12]
9000d720:	2b02      	cmp	r3, #2
9000d722:	d132      	bne.n	9000d78a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
9000d724:	2300      	movs	r3, #0
9000d726:	60fb      	str	r3, [r7, #12]
9000d728:	e002      	b.n	9000d730 <inc_lock+0x6c>
9000d72a:	68fb      	ldr	r3, [r7, #12]
9000d72c:	3301      	adds	r3, #1
9000d72e:	60fb      	str	r3, [r7, #12]
9000d730:	68fb      	ldr	r3, [r7, #12]
9000d732:	2b01      	cmp	r3, #1
9000d734:	d806      	bhi.n	9000d744 <inc_lock+0x80>
9000d736:	4a29      	ldr	r2, [pc, #164]	@ (9000d7dc <inc_lock+0x118>)
9000d738:	68fb      	ldr	r3, [r7, #12]
9000d73a:	011b      	lsls	r3, r3, #4
9000d73c:	4413      	add	r3, r2
9000d73e:	681b      	ldr	r3, [r3, #0]
9000d740:	2b00      	cmp	r3, #0
9000d742:	d1f2      	bne.n	9000d72a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
9000d744:	68fb      	ldr	r3, [r7, #12]
9000d746:	2b02      	cmp	r3, #2
9000d748:	d101      	bne.n	9000d74e <inc_lock+0x8a>
9000d74a:	2300      	movs	r3, #0
9000d74c:	e040      	b.n	9000d7d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
9000d74e:	687b      	ldr	r3, [r7, #4]
9000d750:	681a      	ldr	r2, [r3, #0]
9000d752:	4922      	ldr	r1, [pc, #136]	@ (9000d7dc <inc_lock+0x118>)
9000d754:	68fb      	ldr	r3, [r7, #12]
9000d756:	011b      	lsls	r3, r3, #4
9000d758:	440b      	add	r3, r1
9000d75a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
9000d75c:	687b      	ldr	r3, [r7, #4]
9000d75e:	689a      	ldr	r2, [r3, #8]
9000d760:	491e      	ldr	r1, [pc, #120]	@ (9000d7dc <inc_lock+0x118>)
9000d762:	68fb      	ldr	r3, [r7, #12]
9000d764:	011b      	lsls	r3, r3, #4
9000d766:	440b      	add	r3, r1
9000d768:	3304      	adds	r3, #4
9000d76a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
9000d76c:	687b      	ldr	r3, [r7, #4]
9000d76e:	695a      	ldr	r2, [r3, #20]
9000d770:	491a      	ldr	r1, [pc, #104]	@ (9000d7dc <inc_lock+0x118>)
9000d772:	68fb      	ldr	r3, [r7, #12]
9000d774:	011b      	lsls	r3, r3, #4
9000d776:	440b      	add	r3, r1
9000d778:	3308      	adds	r3, #8
9000d77a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
9000d77c:	4a17      	ldr	r2, [pc, #92]	@ (9000d7dc <inc_lock+0x118>)
9000d77e:	68fb      	ldr	r3, [r7, #12]
9000d780:	011b      	lsls	r3, r3, #4
9000d782:	4413      	add	r3, r2
9000d784:	330c      	adds	r3, #12
9000d786:	2200      	movs	r2, #0
9000d788:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
9000d78a:	683b      	ldr	r3, [r7, #0]
9000d78c:	2b00      	cmp	r3, #0
9000d78e:	d009      	beq.n	9000d7a4 <inc_lock+0xe0>
9000d790:	4a12      	ldr	r2, [pc, #72]	@ (9000d7dc <inc_lock+0x118>)
9000d792:	68fb      	ldr	r3, [r7, #12]
9000d794:	011b      	lsls	r3, r3, #4
9000d796:	4413      	add	r3, r2
9000d798:	330c      	adds	r3, #12
9000d79a:	881b      	ldrh	r3, [r3, #0]
9000d79c:	2b00      	cmp	r3, #0
9000d79e:	d001      	beq.n	9000d7a4 <inc_lock+0xe0>
9000d7a0:	2300      	movs	r3, #0
9000d7a2:	e015      	b.n	9000d7d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
9000d7a4:	683b      	ldr	r3, [r7, #0]
9000d7a6:	2b00      	cmp	r3, #0
9000d7a8:	d108      	bne.n	9000d7bc <inc_lock+0xf8>
9000d7aa:	4a0c      	ldr	r2, [pc, #48]	@ (9000d7dc <inc_lock+0x118>)
9000d7ac:	68fb      	ldr	r3, [r7, #12]
9000d7ae:	011b      	lsls	r3, r3, #4
9000d7b0:	4413      	add	r3, r2
9000d7b2:	330c      	adds	r3, #12
9000d7b4:	881b      	ldrh	r3, [r3, #0]
9000d7b6:	3301      	adds	r3, #1
9000d7b8:	b29a      	uxth	r2, r3
9000d7ba:	e001      	b.n	9000d7c0 <inc_lock+0xfc>
9000d7bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
9000d7c0:	4906      	ldr	r1, [pc, #24]	@ (9000d7dc <inc_lock+0x118>)
9000d7c2:	68fb      	ldr	r3, [r7, #12]
9000d7c4:	011b      	lsls	r3, r3, #4
9000d7c6:	440b      	add	r3, r1
9000d7c8:	330c      	adds	r3, #12
9000d7ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
9000d7cc:	68fb      	ldr	r3, [r7, #12]
9000d7ce:	3301      	adds	r3, #1
}
9000d7d0:	4618      	mov	r0, r3
9000d7d2:	3714      	adds	r7, #20
9000d7d4:	46bd      	mov	sp, r7
9000d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d7da:	4770      	bx	lr
9000d7dc:	20001e90 	.word	0x20001e90

9000d7e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
9000d7e0:	b480      	push	{r7}
9000d7e2:	b085      	sub	sp, #20
9000d7e4:	af00      	add	r7, sp, #0
9000d7e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
9000d7e8:	687b      	ldr	r3, [r7, #4]
9000d7ea:	3b01      	subs	r3, #1
9000d7ec:	607b      	str	r3, [r7, #4]
9000d7ee:	687b      	ldr	r3, [r7, #4]
9000d7f0:	2b01      	cmp	r3, #1
9000d7f2:	d825      	bhi.n	9000d840 <dec_lock+0x60>
		n = Files[i].ctr;
9000d7f4:	4a17      	ldr	r2, [pc, #92]	@ (9000d854 <dec_lock+0x74>)
9000d7f6:	687b      	ldr	r3, [r7, #4]
9000d7f8:	011b      	lsls	r3, r3, #4
9000d7fa:	4413      	add	r3, r2
9000d7fc:	330c      	adds	r3, #12
9000d7fe:	881b      	ldrh	r3, [r3, #0]
9000d800:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
9000d802:	89fb      	ldrh	r3, [r7, #14]
9000d804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000d808:	d101      	bne.n	9000d80e <dec_lock+0x2e>
9000d80a:	2300      	movs	r3, #0
9000d80c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
9000d80e:	89fb      	ldrh	r3, [r7, #14]
9000d810:	2b00      	cmp	r3, #0
9000d812:	d002      	beq.n	9000d81a <dec_lock+0x3a>
9000d814:	89fb      	ldrh	r3, [r7, #14]
9000d816:	3b01      	subs	r3, #1
9000d818:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
9000d81a:	4a0e      	ldr	r2, [pc, #56]	@ (9000d854 <dec_lock+0x74>)
9000d81c:	687b      	ldr	r3, [r7, #4]
9000d81e:	011b      	lsls	r3, r3, #4
9000d820:	4413      	add	r3, r2
9000d822:	330c      	adds	r3, #12
9000d824:	89fa      	ldrh	r2, [r7, #14]
9000d826:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
9000d828:	89fb      	ldrh	r3, [r7, #14]
9000d82a:	2b00      	cmp	r3, #0
9000d82c:	d105      	bne.n	9000d83a <dec_lock+0x5a>
9000d82e:	4a09      	ldr	r2, [pc, #36]	@ (9000d854 <dec_lock+0x74>)
9000d830:	687b      	ldr	r3, [r7, #4]
9000d832:	011b      	lsls	r3, r3, #4
9000d834:	4413      	add	r3, r2
9000d836:	2200      	movs	r2, #0
9000d838:	601a      	str	r2, [r3, #0]
		res = FR_OK;
9000d83a:	2300      	movs	r3, #0
9000d83c:	737b      	strb	r3, [r7, #13]
9000d83e:	e001      	b.n	9000d844 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
9000d840:	2302      	movs	r3, #2
9000d842:	737b      	strb	r3, [r7, #13]
	}
	return res;
9000d844:	7b7b      	ldrb	r3, [r7, #13]
}
9000d846:	4618      	mov	r0, r3
9000d848:	3714      	adds	r7, #20
9000d84a:	46bd      	mov	sp, r7
9000d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d850:	4770      	bx	lr
9000d852:	bf00      	nop
9000d854:	20001e90 	.word	0x20001e90

9000d858 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
9000d858:	b480      	push	{r7}
9000d85a:	b085      	sub	sp, #20
9000d85c:	af00      	add	r7, sp, #0
9000d85e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
9000d860:	2300      	movs	r3, #0
9000d862:	60fb      	str	r3, [r7, #12]
9000d864:	e010      	b.n	9000d888 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
9000d866:	4a0d      	ldr	r2, [pc, #52]	@ (9000d89c <clear_lock+0x44>)
9000d868:	68fb      	ldr	r3, [r7, #12]
9000d86a:	011b      	lsls	r3, r3, #4
9000d86c:	4413      	add	r3, r2
9000d86e:	681b      	ldr	r3, [r3, #0]
9000d870:	687a      	ldr	r2, [r7, #4]
9000d872:	429a      	cmp	r2, r3
9000d874:	d105      	bne.n	9000d882 <clear_lock+0x2a>
9000d876:	4a09      	ldr	r2, [pc, #36]	@ (9000d89c <clear_lock+0x44>)
9000d878:	68fb      	ldr	r3, [r7, #12]
9000d87a:	011b      	lsls	r3, r3, #4
9000d87c:	4413      	add	r3, r2
9000d87e:	2200      	movs	r2, #0
9000d880:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
9000d882:	68fb      	ldr	r3, [r7, #12]
9000d884:	3301      	adds	r3, #1
9000d886:	60fb      	str	r3, [r7, #12]
9000d888:	68fb      	ldr	r3, [r7, #12]
9000d88a:	2b01      	cmp	r3, #1
9000d88c:	d9eb      	bls.n	9000d866 <clear_lock+0xe>
	}
}
9000d88e:	bf00      	nop
9000d890:	bf00      	nop
9000d892:	3714      	adds	r7, #20
9000d894:	46bd      	mov	sp, r7
9000d896:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d89a:	4770      	bx	lr
9000d89c:	20001e90 	.word	0x20001e90

9000d8a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
9000d8a0:	b580      	push	{r7, lr}
9000d8a2:	b086      	sub	sp, #24
9000d8a4:	af00      	add	r7, sp, #0
9000d8a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
9000d8a8:	2300      	movs	r3, #0
9000d8aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
9000d8ac:	687b      	ldr	r3, [r7, #4]
9000d8ae:	78db      	ldrb	r3, [r3, #3]
9000d8b0:	2b00      	cmp	r3, #0
9000d8b2:	d034      	beq.n	9000d91e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
9000d8b4:	687b      	ldr	r3, [r7, #4]
9000d8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000d8b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
9000d8ba:	687b      	ldr	r3, [r7, #4]
9000d8bc:	7858      	ldrb	r0, [r3, #1]
9000d8be:	687b      	ldr	r3, [r7, #4]
9000d8c0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
9000d8c4:	2301      	movs	r3, #1
9000d8c6:	697a      	ldr	r2, [r7, #20]
9000d8c8:	f7ff fd36 	bl	9000d338 <disk_write>
9000d8cc:	4603      	mov	r3, r0
9000d8ce:	2b00      	cmp	r3, #0
9000d8d0:	d002      	beq.n	9000d8d8 <sync_window+0x38>
			res = FR_DISK_ERR;
9000d8d2:	2301      	movs	r3, #1
9000d8d4:	73fb      	strb	r3, [r7, #15]
9000d8d6:	e022      	b.n	9000d91e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
9000d8d8:	687b      	ldr	r3, [r7, #4]
9000d8da:	2200      	movs	r2, #0
9000d8dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
9000d8de:	687b      	ldr	r3, [r7, #4]
9000d8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000d8e2:	697a      	ldr	r2, [r7, #20]
9000d8e4:	1ad2      	subs	r2, r2, r3
9000d8e6:	687b      	ldr	r3, [r7, #4]
9000d8e8:	69db      	ldr	r3, [r3, #28]
9000d8ea:	429a      	cmp	r2, r3
9000d8ec:	d217      	bcs.n	9000d91e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
9000d8ee:	687b      	ldr	r3, [r7, #4]
9000d8f0:	789b      	ldrb	r3, [r3, #2]
9000d8f2:	613b      	str	r3, [r7, #16]
9000d8f4:	e010      	b.n	9000d918 <sync_window+0x78>
					wsect += fs->fsize;
9000d8f6:	687b      	ldr	r3, [r7, #4]
9000d8f8:	69db      	ldr	r3, [r3, #28]
9000d8fa:	697a      	ldr	r2, [r7, #20]
9000d8fc:	4413      	add	r3, r2
9000d8fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
9000d900:	687b      	ldr	r3, [r7, #4]
9000d902:	7858      	ldrb	r0, [r3, #1]
9000d904:	687b      	ldr	r3, [r7, #4]
9000d906:	f103 0134 	add.w	r1, r3, #52	@ 0x34
9000d90a:	2301      	movs	r3, #1
9000d90c:	697a      	ldr	r2, [r7, #20]
9000d90e:	f7ff fd13 	bl	9000d338 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
9000d912:	693b      	ldr	r3, [r7, #16]
9000d914:	3b01      	subs	r3, #1
9000d916:	613b      	str	r3, [r7, #16]
9000d918:	693b      	ldr	r3, [r7, #16]
9000d91a:	2b01      	cmp	r3, #1
9000d91c:	d8eb      	bhi.n	9000d8f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
9000d91e:	7bfb      	ldrb	r3, [r7, #15]
}
9000d920:	4618      	mov	r0, r3
9000d922:	3718      	adds	r7, #24
9000d924:	46bd      	mov	sp, r7
9000d926:	bd80      	pop	{r7, pc}

9000d928 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
9000d928:	b580      	push	{r7, lr}
9000d92a:	b084      	sub	sp, #16
9000d92c:	af00      	add	r7, sp, #0
9000d92e:	6078      	str	r0, [r7, #4]
9000d930:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
9000d932:	2300      	movs	r3, #0
9000d934:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
9000d936:	687b      	ldr	r3, [r7, #4]
9000d938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000d93a:	683a      	ldr	r2, [r7, #0]
9000d93c:	429a      	cmp	r2, r3
9000d93e:	d01b      	beq.n	9000d978 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
9000d940:	6878      	ldr	r0, [r7, #4]
9000d942:	f7ff ffad 	bl	9000d8a0 <sync_window>
9000d946:	4603      	mov	r3, r0
9000d948:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
9000d94a:	7bfb      	ldrb	r3, [r7, #15]
9000d94c:	2b00      	cmp	r3, #0
9000d94e:	d113      	bne.n	9000d978 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
9000d950:	687b      	ldr	r3, [r7, #4]
9000d952:	7858      	ldrb	r0, [r3, #1]
9000d954:	687b      	ldr	r3, [r7, #4]
9000d956:	f103 0134 	add.w	r1, r3, #52	@ 0x34
9000d95a:	2301      	movs	r3, #1
9000d95c:	683a      	ldr	r2, [r7, #0]
9000d95e:	f7ff fccb 	bl	9000d2f8 <disk_read>
9000d962:	4603      	mov	r3, r0
9000d964:	2b00      	cmp	r3, #0
9000d966:	d004      	beq.n	9000d972 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
9000d968:	f04f 33ff 	mov.w	r3, #4294967295
9000d96c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
9000d96e:	2301      	movs	r3, #1
9000d970:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
9000d972:	687b      	ldr	r3, [r7, #4]
9000d974:	683a      	ldr	r2, [r7, #0]
9000d976:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
9000d978:	7bfb      	ldrb	r3, [r7, #15]
}
9000d97a:	4618      	mov	r0, r3
9000d97c:	3710      	adds	r7, #16
9000d97e:	46bd      	mov	sp, r7
9000d980:	bd80      	pop	{r7, pc}
	...

9000d984 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
9000d984:	b580      	push	{r7, lr}
9000d986:	b084      	sub	sp, #16
9000d988:	af00      	add	r7, sp, #0
9000d98a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
9000d98c:	6878      	ldr	r0, [r7, #4]
9000d98e:	f7ff ff87 	bl	9000d8a0 <sync_window>
9000d992:	4603      	mov	r3, r0
9000d994:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
9000d996:	7bfb      	ldrb	r3, [r7, #15]
9000d998:	2b00      	cmp	r3, #0
9000d99a:	d158      	bne.n	9000da4e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
9000d99c:	687b      	ldr	r3, [r7, #4]
9000d99e:	781b      	ldrb	r3, [r3, #0]
9000d9a0:	2b03      	cmp	r3, #3
9000d9a2:	d148      	bne.n	9000da36 <sync_fs+0xb2>
9000d9a4:	687b      	ldr	r3, [r7, #4]
9000d9a6:	791b      	ldrb	r3, [r3, #4]
9000d9a8:	2b01      	cmp	r3, #1
9000d9aa:	d144      	bne.n	9000da36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
9000d9ac:	687b      	ldr	r3, [r7, #4]
9000d9ae:	3334      	adds	r3, #52	@ 0x34
9000d9b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000d9b4:	2100      	movs	r1, #0
9000d9b6:	4618      	mov	r0, r3
9000d9b8:	f7ff fda8 	bl	9000d50c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
9000d9bc:	687b      	ldr	r3, [r7, #4]
9000d9be:	3334      	adds	r3, #52	@ 0x34
9000d9c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
9000d9c4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
9000d9c8:	4618      	mov	r0, r3
9000d9ca:	f7ff fd37 	bl	9000d43c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
9000d9ce:	687b      	ldr	r3, [r7, #4]
9000d9d0:	3334      	adds	r3, #52	@ 0x34
9000d9d2:	4921      	ldr	r1, [pc, #132]	@ (9000da58 <sync_fs+0xd4>)
9000d9d4:	4618      	mov	r0, r3
9000d9d6:	f7ff fd4c 	bl	9000d472 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
9000d9da:	687b      	ldr	r3, [r7, #4]
9000d9dc:	3334      	adds	r3, #52	@ 0x34
9000d9de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
9000d9e2:	491e      	ldr	r1, [pc, #120]	@ (9000da5c <sync_fs+0xd8>)
9000d9e4:	4618      	mov	r0, r3
9000d9e6:	f7ff fd44 	bl	9000d472 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
9000d9ea:	687b      	ldr	r3, [r7, #4]
9000d9ec:	3334      	adds	r3, #52	@ 0x34
9000d9ee:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
9000d9f2:	687b      	ldr	r3, [r7, #4]
9000d9f4:	695b      	ldr	r3, [r3, #20]
9000d9f6:	4619      	mov	r1, r3
9000d9f8:	4610      	mov	r0, r2
9000d9fa:	f7ff fd3a 	bl	9000d472 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
9000d9fe:	687b      	ldr	r3, [r7, #4]
9000da00:	3334      	adds	r3, #52	@ 0x34
9000da02:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
9000da06:	687b      	ldr	r3, [r7, #4]
9000da08:	691b      	ldr	r3, [r3, #16]
9000da0a:	4619      	mov	r1, r3
9000da0c:	4610      	mov	r0, r2
9000da0e:	f7ff fd30 	bl	9000d472 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
9000da12:	687b      	ldr	r3, [r7, #4]
9000da14:	6a1b      	ldr	r3, [r3, #32]
9000da16:	1c5a      	adds	r2, r3, #1
9000da18:	687b      	ldr	r3, [r7, #4]
9000da1a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
9000da1c:	687b      	ldr	r3, [r7, #4]
9000da1e:	7858      	ldrb	r0, [r3, #1]
9000da20:	687b      	ldr	r3, [r7, #4]
9000da22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
9000da26:	687b      	ldr	r3, [r7, #4]
9000da28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000da2a:	2301      	movs	r3, #1
9000da2c:	f7ff fc84 	bl	9000d338 <disk_write>
			fs->fsi_flag = 0;
9000da30:	687b      	ldr	r3, [r7, #4]
9000da32:	2200      	movs	r2, #0
9000da34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
9000da36:	687b      	ldr	r3, [r7, #4]
9000da38:	785b      	ldrb	r3, [r3, #1]
9000da3a:	2200      	movs	r2, #0
9000da3c:	2100      	movs	r1, #0
9000da3e:	4618      	mov	r0, r3
9000da40:	f7ff fc9a 	bl	9000d378 <disk_ioctl>
9000da44:	4603      	mov	r3, r0
9000da46:	2b00      	cmp	r3, #0
9000da48:	d001      	beq.n	9000da4e <sync_fs+0xca>
9000da4a:	2301      	movs	r3, #1
9000da4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
9000da4e:	7bfb      	ldrb	r3, [r7, #15]
}
9000da50:	4618      	mov	r0, r3
9000da52:	3710      	adds	r7, #16
9000da54:	46bd      	mov	sp, r7
9000da56:	bd80      	pop	{r7, pc}
9000da58:	41615252 	.word	0x41615252
9000da5c:	61417272 	.word	0x61417272

9000da60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
9000da60:	b480      	push	{r7}
9000da62:	b083      	sub	sp, #12
9000da64:	af00      	add	r7, sp, #0
9000da66:	6078      	str	r0, [r7, #4]
9000da68:	6039      	str	r1, [r7, #0]
	clst -= 2;
9000da6a:	683b      	ldr	r3, [r7, #0]
9000da6c:	3b02      	subs	r3, #2
9000da6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
9000da70:	687b      	ldr	r3, [r7, #4]
9000da72:	699b      	ldr	r3, [r3, #24]
9000da74:	3b02      	subs	r3, #2
9000da76:	683a      	ldr	r2, [r7, #0]
9000da78:	429a      	cmp	r2, r3
9000da7a:	d301      	bcc.n	9000da80 <clust2sect+0x20>
9000da7c:	2300      	movs	r3, #0
9000da7e:	e008      	b.n	9000da92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
9000da80:	687b      	ldr	r3, [r7, #4]
9000da82:	895b      	ldrh	r3, [r3, #10]
9000da84:	461a      	mov	r2, r3
9000da86:	683b      	ldr	r3, [r7, #0]
9000da88:	fb03 f202 	mul.w	r2, r3, r2
9000da8c:	687b      	ldr	r3, [r7, #4]
9000da8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000da90:	4413      	add	r3, r2
}
9000da92:	4618      	mov	r0, r3
9000da94:	370c      	adds	r7, #12
9000da96:	46bd      	mov	sp, r7
9000da98:	f85d 7b04 	ldr.w	r7, [sp], #4
9000da9c:	4770      	bx	lr

9000da9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
9000da9e:	b580      	push	{r7, lr}
9000daa0:	b086      	sub	sp, #24
9000daa2:	af00      	add	r7, sp, #0
9000daa4:	6078      	str	r0, [r7, #4]
9000daa6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
9000daa8:	687b      	ldr	r3, [r7, #4]
9000daaa:	681b      	ldr	r3, [r3, #0]
9000daac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
9000daae:	683b      	ldr	r3, [r7, #0]
9000dab0:	2b01      	cmp	r3, #1
9000dab2:	d904      	bls.n	9000dabe <get_fat+0x20>
9000dab4:	693b      	ldr	r3, [r7, #16]
9000dab6:	699b      	ldr	r3, [r3, #24]
9000dab8:	683a      	ldr	r2, [r7, #0]
9000daba:	429a      	cmp	r2, r3
9000dabc:	d302      	bcc.n	9000dac4 <get_fat+0x26>
		val = 1;	/* Internal error */
9000dabe:	2301      	movs	r3, #1
9000dac0:	617b      	str	r3, [r7, #20]
9000dac2:	e08e      	b.n	9000dbe2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
9000dac4:	f04f 33ff 	mov.w	r3, #4294967295
9000dac8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
9000daca:	693b      	ldr	r3, [r7, #16]
9000dacc:	781b      	ldrb	r3, [r3, #0]
9000dace:	2b03      	cmp	r3, #3
9000dad0:	d061      	beq.n	9000db96 <get_fat+0xf8>
9000dad2:	2b03      	cmp	r3, #3
9000dad4:	dc7b      	bgt.n	9000dbce <get_fat+0x130>
9000dad6:	2b01      	cmp	r3, #1
9000dad8:	d002      	beq.n	9000dae0 <get_fat+0x42>
9000dada:	2b02      	cmp	r3, #2
9000dadc:	d041      	beq.n	9000db62 <get_fat+0xc4>
9000dade:	e076      	b.n	9000dbce <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
9000dae0:	683b      	ldr	r3, [r7, #0]
9000dae2:	60fb      	str	r3, [r7, #12]
9000dae4:	68fb      	ldr	r3, [r7, #12]
9000dae6:	085b      	lsrs	r3, r3, #1
9000dae8:	68fa      	ldr	r2, [r7, #12]
9000daea:	4413      	add	r3, r2
9000daec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
9000daee:	693b      	ldr	r3, [r7, #16]
9000daf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000daf2:	68fb      	ldr	r3, [r7, #12]
9000daf4:	0a5b      	lsrs	r3, r3, #9
9000daf6:	4413      	add	r3, r2
9000daf8:	4619      	mov	r1, r3
9000dafa:	6938      	ldr	r0, [r7, #16]
9000dafc:	f7ff ff14 	bl	9000d928 <move_window>
9000db00:	4603      	mov	r3, r0
9000db02:	2b00      	cmp	r3, #0
9000db04:	d166      	bne.n	9000dbd4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
9000db06:	68fb      	ldr	r3, [r7, #12]
9000db08:	1c5a      	adds	r2, r3, #1
9000db0a:	60fa      	str	r2, [r7, #12]
9000db0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000db10:	693a      	ldr	r2, [r7, #16]
9000db12:	4413      	add	r3, r2
9000db14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
9000db18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
9000db1a:	693b      	ldr	r3, [r7, #16]
9000db1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000db1e:	68fb      	ldr	r3, [r7, #12]
9000db20:	0a5b      	lsrs	r3, r3, #9
9000db22:	4413      	add	r3, r2
9000db24:	4619      	mov	r1, r3
9000db26:	6938      	ldr	r0, [r7, #16]
9000db28:	f7ff fefe 	bl	9000d928 <move_window>
9000db2c:	4603      	mov	r3, r0
9000db2e:	2b00      	cmp	r3, #0
9000db30:	d152      	bne.n	9000dbd8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
9000db32:	68fb      	ldr	r3, [r7, #12]
9000db34:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000db38:	693a      	ldr	r2, [r7, #16]
9000db3a:	4413      	add	r3, r2
9000db3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
9000db40:	021b      	lsls	r3, r3, #8
9000db42:	68ba      	ldr	r2, [r7, #8]
9000db44:	4313      	orrs	r3, r2
9000db46:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
9000db48:	683b      	ldr	r3, [r7, #0]
9000db4a:	f003 0301 	and.w	r3, r3, #1
9000db4e:	2b00      	cmp	r3, #0
9000db50:	d002      	beq.n	9000db58 <get_fat+0xba>
9000db52:	68bb      	ldr	r3, [r7, #8]
9000db54:	091b      	lsrs	r3, r3, #4
9000db56:	e002      	b.n	9000db5e <get_fat+0xc0>
9000db58:	68bb      	ldr	r3, [r7, #8]
9000db5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
9000db5e:	617b      	str	r3, [r7, #20]
			break;
9000db60:	e03f      	b.n	9000dbe2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
9000db62:	693b      	ldr	r3, [r7, #16]
9000db64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000db66:	683b      	ldr	r3, [r7, #0]
9000db68:	0a1b      	lsrs	r3, r3, #8
9000db6a:	4413      	add	r3, r2
9000db6c:	4619      	mov	r1, r3
9000db6e:	6938      	ldr	r0, [r7, #16]
9000db70:	f7ff feda 	bl	9000d928 <move_window>
9000db74:	4603      	mov	r3, r0
9000db76:	2b00      	cmp	r3, #0
9000db78:	d130      	bne.n	9000dbdc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
9000db7a:	693b      	ldr	r3, [r7, #16]
9000db7c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000db80:	683b      	ldr	r3, [r7, #0]
9000db82:	005b      	lsls	r3, r3, #1
9000db84:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
9000db88:	4413      	add	r3, r2
9000db8a:	4618      	mov	r0, r3
9000db8c:	f7ff fc1a 	bl	9000d3c4 <ld_word>
9000db90:	4603      	mov	r3, r0
9000db92:	617b      	str	r3, [r7, #20]
			break;
9000db94:	e025      	b.n	9000dbe2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
9000db96:	693b      	ldr	r3, [r7, #16]
9000db98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000db9a:	683b      	ldr	r3, [r7, #0]
9000db9c:	09db      	lsrs	r3, r3, #7
9000db9e:	4413      	add	r3, r2
9000dba0:	4619      	mov	r1, r3
9000dba2:	6938      	ldr	r0, [r7, #16]
9000dba4:	f7ff fec0 	bl	9000d928 <move_window>
9000dba8:	4603      	mov	r3, r0
9000dbaa:	2b00      	cmp	r3, #0
9000dbac:	d118      	bne.n	9000dbe0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
9000dbae:	693b      	ldr	r3, [r7, #16]
9000dbb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000dbb4:	683b      	ldr	r3, [r7, #0]
9000dbb6:	009b      	lsls	r3, r3, #2
9000dbb8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
9000dbbc:	4413      	add	r3, r2
9000dbbe:	4618      	mov	r0, r3
9000dbc0:	f7ff fc19 	bl	9000d3f6 <ld_dword>
9000dbc4:	4603      	mov	r3, r0
9000dbc6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
9000dbca:	617b      	str	r3, [r7, #20]
			break;
9000dbcc:	e009      	b.n	9000dbe2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
9000dbce:	2301      	movs	r3, #1
9000dbd0:	617b      	str	r3, [r7, #20]
9000dbd2:	e006      	b.n	9000dbe2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
9000dbd4:	bf00      	nop
9000dbd6:	e004      	b.n	9000dbe2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
9000dbd8:	bf00      	nop
9000dbda:	e002      	b.n	9000dbe2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
9000dbdc:	bf00      	nop
9000dbde:	e000      	b.n	9000dbe2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
9000dbe0:	bf00      	nop
		}
	}

	return val;
9000dbe2:	697b      	ldr	r3, [r7, #20]
}
9000dbe4:	4618      	mov	r0, r3
9000dbe6:	3718      	adds	r7, #24
9000dbe8:	46bd      	mov	sp, r7
9000dbea:	bd80      	pop	{r7, pc}

9000dbec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
9000dbec:	b590      	push	{r4, r7, lr}
9000dbee:	b089      	sub	sp, #36	@ 0x24
9000dbf0:	af00      	add	r7, sp, #0
9000dbf2:	60f8      	str	r0, [r7, #12]
9000dbf4:	60b9      	str	r1, [r7, #8]
9000dbf6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
9000dbf8:	2302      	movs	r3, #2
9000dbfa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
9000dbfc:	68bb      	ldr	r3, [r7, #8]
9000dbfe:	2b01      	cmp	r3, #1
9000dc00:	f240 80d9 	bls.w	9000ddb6 <put_fat+0x1ca>
9000dc04:	68fb      	ldr	r3, [r7, #12]
9000dc06:	699b      	ldr	r3, [r3, #24]
9000dc08:	68ba      	ldr	r2, [r7, #8]
9000dc0a:	429a      	cmp	r2, r3
9000dc0c:	f080 80d3 	bcs.w	9000ddb6 <put_fat+0x1ca>
		switch (fs->fs_type) {
9000dc10:	68fb      	ldr	r3, [r7, #12]
9000dc12:	781b      	ldrb	r3, [r3, #0]
9000dc14:	2b03      	cmp	r3, #3
9000dc16:	f000 8096 	beq.w	9000dd46 <put_fat+0x15a>
9000dc1a:	2b03      	cmp	r3, #3
9000dc1c:	f300 80cb 	bgt.w	9000ddb6 <put_fat+0x1ca>
9000dc20:	2b01      	cmp	r3, #1
9000dc22:	d002      	beq.n	9000dc2a <put_fat+0x3e>
9000dc24:	2b02      	cmp	r3, #2
9000dc26:	d06e      	beq.n	9000dd06 <put_fat+0x11a>
9000dc28:	e0c5      	b.n	9000ddb6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
9000dc2a:	68bb      	ldr	r3, [r7, #8]
9000dc2c:	61bb      	str	r3, [r7, #24]
9000dc2e:	69bb      	ldr	r3, [r7, #24]
9000dc30:	085b      	lsrs	r3, r3, #1
9000dc32:	69ba      	ldr	r2, [r7, #24]
9000dc34:	4413      	add	r3, r2
9000dc36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
9000dc38:	68fb      	ldr	r3, [r7, #12]
9000dc3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000dc3c:	69bb      	ldr	r3, [r7, #24]
9000dc3e:	0a5b      	lsrs	r3, r3, #9
9000dc40:	4413      	add	r3, r2
9000dc42:	4619      	mov	r1, r3
9000dc44:	68f8      	ldr	r0, [r7, #12]
9000dc46:	f7ff fe6f 	bl	9000d928 <move_window>
9000dc4a:	4603      	mov	r3, r0
9000dc4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
9000dc4e:	7ffb      	ldrb	r3, [r7, #31]
9000dc50:	2b00      	cmp	r3, #0
9000dc52:	f040 80a9 	bne.w	9000dda8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
9000dc56:	68fb      	ldr	r3, [r7, #12]
9000dc58:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000dc5c:	69bb      	ldr	r3, [r7, #24]
9000dc5e:	1c59      	adds	r1, r3, #1
9000dc60:	61b9      	str	r1, [r7, #24]
9000dc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000dc66:	4413      	add	r3, r2
9000dc68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
9000dc6a:	68bb      	ldr	r3, [r7, #8]
9000dc6c:	f003 0301 	and.w	r3, r3, #1
9000dc70:	2b00      	cmp	r3, #0
9000dc72:	d00d      	beq.n	9000dc90 <put_fat+0xa4>
9000dc74:	697b      	ldr	r3, [r7, #20]
9000dc76:	781b      	ldrb	r3, [r3, #0]
9000dc78:	b25b      	sxtb	r3, r3
9000dc7a:	f003 030f 	and.w	r3, r3, #15
9000dc7e:	b25a      	sxtb	r2, r3
9000dc80:	687b      	ldr	r3, [r7, #4]
9000dc82:	b25b      	sxtb	r3, r3
9000dc84:	011b      	lsls	r3, r3, #4
9000dc86:	b25b      	sxtb	r3, r3
9000dc88:	4313      	orrs	r3, r2
9000dc8a:	b25b      	sxtb	r3, r3
9000dc8c:	b2db      	uxtb	r3, r3
9000dc8e:	e001      	b.n	9000dc94 <put_fat+0xa8>
9000dc90:	687b      	ldr	r3, [r7, #4]
9000dc92:	b2db      	uxtb	r3, r3
9000dc94:	697a      	ldr	r2, [r7, #20]
9000dc96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
9000dc98:	68fb      	ldr	r3, [r7, #12]
9000dc9a:	2201      	movs	r2, #1
9000dc9c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
9000dc9e:	68fb      	ldr	r3, [r7, #12]
9000dca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000dca2:	69bb      	ldr	r3, [r7, #24]
9000dca4:	0a5b      	lsrs	r3, r3, #9
9000dca6:	4413      	add	r3, r2
9000dca8:	4619      	mov	r1, r3
9000dcaa:	68f8      	ldr	r0, [r7, #12]
9000dcac:	f7ff fe3c 	bl	9000d928 <move_window>
9000dcb0:	4603      	mov	r3, r0
9000dcb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
9000dcb4:	7ffb      	ldrb	r3, [r7, #31]
9000dcb6:	2b00      	cmp	r3, #0
9000dcb8:	d178      	bne.n	9000ddac <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
9000dcba:	68fb      	ldr	r3, [r7, #12]
9000dcbc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000dcc0:	69bb      	ldr	r3, [r7, #24]
9000dcc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000dcc6:	4413      	add	r3, r2
9000dcc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
9000dcca:	68bb      	ldr	r3, [r7, #8]
9000dccc:	f003 0301 	and.w	r3, r3, #1
9000dcd0:	2b00      	cmp	r3, #0
9000dcd2:	d003      	beq.n	9000dcdc <put_fat+0xf0>
9000dcd4:	687b      	ldr	r3, [r7, #4]
9000dcd6:	091b      	lsrs	r3, r3, #4
9000dcd8:	b2db      	uxtb	r3, r3
9000dcda:	e00e      	b.n	9000dcfa <put_fat+0x10e>
9000dcdc:	697b      	ldr	r3, [r7, #20]
9000dcde:	781b      	ldrb	r3, [r3, #0]
9000dce0:	b25b      	sxtb	r3, r3
9000dce2:	f023 030f 	bic.w	r3, r3, #15
9000dce6:	b25a      	sxtb	r2, r3
9000dce8:	687b      	ldr	r3, [r7, #4]
9000dcea:	0a1b      	lsrs	r3, r3, #8
9000dcec:	b25b      	sxtb	r3, r3
9000dcee:	f003 030f 	and.w	r3, r3, #15
9000dcf2:	b25b      	sxtb	r3, r3
9000dcf4:	4313      	orrs	r3, r2
9000dcf6:	b25b      	sxtb	r3, r3
9000dcf8:	b2db      	uxtb	r3, r3
9000dcfa:	697a      	ldr	r2, [r7, #20]
9000dcfc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
9000dcfe:	68fb      	ldr	r3, [r7, #12]
9000dd00:	2201      	movs	r2, #1
9000dd02:	70da      	strb	r2, [r3, #3]
			break;
9000dd04:	e057      	b.n	9000ddb6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
9000dd06:	68fb      	ldr	r3, [r7, #12]
9000dd08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000dd0a:	68bb      	ldr	r3, [r7, #8]
9000dd0c:	0a1b      	lsrs	r3, r3, #8
9000dd0e:	4413      	add	r3, r2
9000dd10:	4619      	mov	r1, r3
9000dd12:	68f8      	ldr	r0, [r7, #12]
9000dd14:	f7ff fe08 	bl	9000d928 <move_window>
9000dd18:	4603      	mov	r3, r0
9000dd1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
9000dd1c:	7ffb      	ldrb	r3, [r7, #31]
9000dd1e:	2b00      	cmp	r3, #0
9000dd20:	d146      	bne.n	9000ddb0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
9000dd22:	68fb      	ldr	r3, [r7, #12]
9000dd24:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000dd28:	68bb      	ldr	r3, [r7, #8]
9000dd2a:	005b      	lsls	r3, r3, #1
9000dd2c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
9000dd30:	4413      	add	r3, r2
9000dd32:	687a      	ldr	r2, [r7, #4]
9000dd34:	b292      	uxth	r2, r2
9000dd36:	4611      	mov	r1, r2
9000dd38:	4618      	mov	r0, r3
9000dd3a:	f7ff fb7f 	bl	9000d43c <st_word>
			fs->wflag = 1;
9000dd3e:	68fb      	ldr	r3, [r7, #12]
9000dd40:	2201      	movs	r2, #1
9000dd42:	70da      	strb	r2, [r3, #3]
			break;
9000dd44:	e037      	b.n	9000ddb6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
9000dd46:	68fb      	ldr	r3, [r7, #12]
9000dd48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000dd4a:	68bb      	ldr	r3, [r7, #8]
9000dd4c:	09db      	lsrs	r3, r3, #7
9000dd4e:	4413      	add	r3, r2
9000dd50:	4619      	mov	r1, r3
9000dd52:	68f8      	ldr	r0, [r7, #12]
9000dd54:	f7ff fde8 	bl	9000d928 <move_window>
9000dd58:	4603      	mov	r3, r0
9000dd5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
9000dd5c:	7ffb      	ldrb	r3, [r7, #31]
9000dd5e:	2b00      	cmp	r3, #0
9000dd60:	d128      	bne.n	9000ddb4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
9000dd62:	687b      	ldr	r3, [r7, #4]
9000dd64:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
9000dd68:	68fb      	ldr	r3, [r7, #12]
9000dd6a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000dd6e:	68bb      	ldr	r3, [r7, #8]
9000dd70:	009b      	lsls	r3, r3, #2
9000dd72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
9000dd76:	4413      	add	r3, r2
9000dd78:	4618      	mov	r0, r3
9000dd7a:	f7ff fb3c 	bl	9000d3f6 <ld_dword>
9000dd7e:	4603      	mov	r3, r0
9000dd80:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
9000dd84:	4323      	orrs	r3, r4
9000dd86:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
9000dd88:	68fb      	ldr	r3, [r7, #12]
9000dd8a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000dd8e:	68bb      	ldr	r3, [r7, #8]
9000dd90:	009b      	lsls	r3, r3, #2
9000dd92:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
9000dd96:	4413      	add	r3, r2
9000dd98:	6879      	ldr	r1, [r7, #4]
9000dd9a:	4618      	mov	r0, r3
9000dd9c:	f7ff fb69 	bl	9000d472 <st_dword>
			fs->wflag = 1;
9000dda0:	68fb      	ldr	r3, [r7, #12]
9000dda2:	2201      	movs	r2, #1
9000dda4:	70da      	strb	r2, [r3, #3]
			break;
9000dda6:	e006      	b.n	9000ddb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
9000dda8:	bf00      	nop
9000ddaa:	e004      	b.n	9000ddb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
9000ddac:	bf00      	nop
9000ddae:	e002      	b.n	9000ddb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
9000ddb0:	bf00      	nop
9000ddb2:	e000      	b.n	9000ddb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
9000ddb4:	bf00      	nop
		}
	}
	return res;
9000ddb6:	7ffb      	ldrb	r3, [r7, #31]
}
9000ddb8:	4618      	mov	r0, r3
9000ddba:	3724      	adds	r7, #36	@ 0x24
9000ddbc:	46bd      	mov	sp, r7
9000ddbe:	bd90      	pop	{r4, r7, pc}

9000ddc0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
9000ddc0:	b580      	push	{r7, lr}
9000ddc2:	b088      	sub	sp, #32
9000ddc4:	af00      	add	r7, sp, #0
9000ddc6:	60f8      	str	r0, [r7, #12]
9000ddc8:	60b9      	str	r1, [r7, #8]
9000ddca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
9000ddcc:	2300      	movs	r3, #0
9000ddce:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
9000ddd0:	68fb      	ldr	r3, [r7, #12]
9000ddd2:	681b      	ldr	r3, [r3, #0]
9000ddd4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
9000ddd6:	68bb      	ldr	r3, [r7, #8]
9000ddd8:	2b01      	cmp	r3, #1
9000ddda:	d904      	bls.n	9000dde6 <remove_chain+0x26>
9000dddc:	69bb      	ldr	r3, [r7, #24]
9000ddde:	699b      	ldr	r3, [r3, #24]
9000dde0:	68ba      	ldr	r2, [r7, #8]
9000dde2:	429a      	cmp	r2, r3
9000dde4:	d301      	bcc.n	9000ddea <remove_chain+0x2a>
9000dde6:	2302      	movs	r3, #2
9000dde8:	e04b      	b.n	9000de82 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
9000ddea:	687b      	ldr	r3, [r7, #4]
9000ddec:	2b00      	cmp	r3, #0
9000ddee:	d00c      	beq.n	9000de0a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
9000ddf0:	f04f 32ff 	mov.w	r2, #4294967295
9000ddf4:	6879      	ldr	r1, [r7, #4]
9000ddf6:	69b8      	ldr	r0, [r7, #24]
9000ddf8:	f7ff fef8 	bl	9000dbec <put_fat>
9000ddfc:	4603      	mov	r3, r0
9000ddfe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
9000de00:	7ffb      	ldrb	r3, [r7, #31]
9000de02:	2b00      	cmp	r3, #0
9000de04:	d001      	beq.n	9000de0a <remove_chain+0x4a>
9000de06:	7ffb      	ldrb	r3, [r7, #31]
9000de08:	e03b      	b.n	9000de82 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
9000de0a:	68b9      	ldr	r1, [r7, #8]
9000de0c:	68f8      	ldr	r0, [r7, #12]
9000de0e:	f7ff fe46 	bl	9000da9e <get_fat>
9000de12:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
9000de14:	697b      	ldr	r3, [r7, #20]
9000de16:	2b00      	cmp	r3, #0
9000de18:	d031      	beq.n	9000de7e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
9000de1a:	697b      	ldr	r3, [r7, #20]
9000de1c:	2b01      	cmp	r3, #1
9000de1e:	d101      	bne.n	9000de24 <remove_chain+0x64>
9000de20:	2302      	movs	r3, #2
9000de22:	e02e      	b.n	9000de82 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
9000de24:	697b      	ldr	r3, [r7, #20]
9000de26:	f1b3 3fff 	cmp.w	r3, #4294967295
9000de2a:	d101      	bne.n	9000de30 <remove_chain+0x70>
9000de2c:	2301      	movs	r3, #1
9000de2e:	e028      	b.n	9000de82 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
9000de30:	2200      	movs	r2, #0
9000de32:	68b9      	ldr	r1, [r7, #8]
9000de34:	69b8      	ldr	r0, [r7, #24]
9000de36:	f7ff fed9 	bl	9000dbec <put_fat>
9000de3a:	4603      	mov	r3, r0
9000de3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
9000de3e:	7ffb      	ldrb	r3, [r7, #31]
9000de40:	2b00      	cmp	r3, #0
9000de42:	d001      	beq.n	9000de48 <remove_chain+0x88>
9000de44:	7ffb      	ldrb	r3, [r7, #31]
9000de46:	e01c      	b.n	9000de82 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
9000de48:	69bb      	ldr	r3, [r7, #24]
9000de4a:	695a      	ldr	r2, [r3, #20]
9000de4c:	69bb      	ldr	r3, [r7, #24]
9000de4e:	699b      	ldr	r3, [r3, #24]
9000de50:	3b02      	subs	r3, #2
9000de52:	429a      	cmp	r2, r3
9000de54:	d20b      	bcs.n	9000de6e <remove_chain+0xae>
			fs->free_clst++;
9000de56:	69bb      	ldr	r3, [r7, #24]
9000de58:	695b      	ldr	r3, [r3, #20]
9000de5a:	1c5a      	adds	r2, r3, #1
9000de5c:	69bb      	ldr	r3, [r7, #24]
9000de5e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
9000de60:	69bb      	ldr	r3, [r7, #24]
9000de62:	791b      	ldrb	r3, [r3, #4]
9000de64:	f043 0301 	orr.w	r3, r3, #1
9000de68:	b2da      	uxtb	r2, r3
9000de6a:	69bb      	ldr	r3, [r7, #24]
9000de6c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
9000de6e:	697b      	ldr	r3, [r7, #20]
9000de70:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
9000de72:	69bb      	ldr	r3, [r7, #24]
9000de74:	699b      	ldr	r3, [r3, #24]
9000de76:	68ba      	ldr	r2, [r7, #8]
9000de78:	429a      	cmp	r2, r3
9000de7a:	d3c6      	bcc.n	9000de0a <remove_chain+0x4a>
9000de7c:	e000      	b.n	9000de80 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
9000de7e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
9000de80:	2300      	movs	r3, #0
}
9000de82:	4618      	mov	r0, r3
9000de84:	3720      	adds	r7, #32
9000de86:	46bd      	mov	sp, r7
9000de88:	bd80      	pop	{r7, pc}

9000de8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
9000de8a:	b580      	push	{r7, lr}
9000de8c:	b088      	sub	sp, #32
9000de8e:	af00      	add	r7, sp, #0
9000de90:	6078      	str	r0, [r7, #4]
9000de92:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
9000de94:	687b      	ldr	r3, [r7, #4]
9000de96:	681b      	ldr	r3, [r3, #0]
9000de98:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
9000de9a:	683b      	ldr	r3, [r7, #0]
9000de9c:	2b00      	cmp	r3, #0
9000de9e:	d10d      	bne.n	9000debc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
9000dea0:	693b      	ldr	r3, [r7, #16]
9000dea2:	691b      	ldr	r3, [r3, #16]
9000dea4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
9000dea6:	69bb      	ldr	r3, [r7, #24]
9000dea8:	2b00      	cmp	r3, #0
9000deaa:	d004      	beq.n	9000deb6 <create_chain+0x2c>
9000deac:	693b      	ldr	r3, [r7, #16]
9000deae:	699b      	ldr	r3, [r3, #24]
9000deb0:	69ba      	ldr	r2, [r7, #24]
9000deb2:	429a      	cmp	r2, r3
9000deb4:	d31b      	bcc.n	9000deee <create_chain+0x64>
9000deb6:	2301      	movs	r3, #1
9000deb8:	61bb      	str	r3, [r7, #24]
9000deba:	e018      	b.n	9000deee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
9000debc:	6839      	ldr	r1, [r7, #0]
9000debe:	6878      	ldr	r0, [r7, #4]
9000dec0:	f7ff fded 	bl	9000da9e <get_fat>
9000dec4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
9000dec6:	68fb      	ldr	r3, [r7, #12]
9000dec8:	2b01      	cmp	r3, #1
9000deca:	d801      	bhi.n	9000ded0 <create_chain+0x46>
9000decc:	2301      	movs	r3, #1
9000dece:	e070      	b.n	9000dfb2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
9000ded0:	68fb      	ldr	r3, [r7, #12]
9000ded2:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ded6:	d101      	bne.n	9000dedc <create_chain+0x52>
9000ded8:	68fb      	ldr	r3, [r7, #12]
9000deda:	e06a      	b.n	9000dfb2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
9000dedc:	693b      	ldr	r3, [r7, #16]
9000dede:	699b      	ldr	r3, [r3, #24]
9000dee0:	68fa      	ldr	r2, [r7, #12]
9000dee2:	429a      	cmp	r2, r3
9000dee4:	d201      	bcs.n	9000deea <create_chain+0x60>
9000dee6:	68fb      	ldr	r3, [r7, #12]
9000dee8:	e063      	b.n	9000dfb2 <create_chain+0x128>
		scl = clst;
9000deea:	683b      	ldr	r3, [r7, #0]
9000deec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
9000deee:	69bb      	ldr	r3, [r7, #24]
9000def0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
9000def2:	69fb      	ldr	r3, [r7, #28]
9000def4:	3301      	adds	r3, #1
9000def6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
9000def8:	693b      	ldr	r3, [r7, #16]
9000defa:	699b      	ldr	r3, [r3, #24]
9000defc:	69fa      	ldr	r2, [r7, #28]
9000defe:	429a      	cmp	r2, r3
9000df00:	d307      	bcc.n	9000df12 <create_chain+0x88>
				ncl = 2;
9000df02:	2302      	movs	r3, #2
9000df04:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
9000df06:	69fa      	ldr	r2, [r7, #28]
9000df08:	69bb      	ldr	r3, [r7, #24]
9000df0a:	429a      	cmp	r2, r3
9000df0c:	d901      	bls.n	9000df12 <create_chain+0x88>
9000df0e:	2300      	movs	r3, #0
9000df10:	e04f      	b.n	9000dfb2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
9000df12:	69f9      	ldr	r1, [r7, #28]
9000df14:	6878      	ldr	r0, [r7, #4]
9000df16:	f7ff fdc2 	bl	9000da9e <get_fat>
9000df1a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
9000df1c:	68fb      	ldr	r3, [r7, #12]
9000df1e:	2b00      	cmp	r3, #0
9000df20:	d00e      	beq.n	9000df40 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
9000df22:	68fb      	ldr	r3, [r7, #12]
9000df24:	2b01      	cmp	r3, #1
9000df26:	d003      	beq.n	9000df30 <create_chain+0xa6>
9000df28:	68fb      	ldr	r3, [r7, #12]
9000df2a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000df2e:	d101      	bne.n	9000df34 <create_chain+0xaa>
9000df30:	68fb      	ldr	r3, [r7, #12]
9000df32:	e03e      	b.n	9000dfb2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
9000df34:	69fa      	ldr	r2, [r7, #28]
9000df36:	69bb      	ldr	r3, [r7, #24]
9000df38:	429a      	cmp	r2, r3
9000df3a:	d1da      	bne.n	9000def2 <create_chain+0x68>
9000df3c:	2300      	movs	r3, #0
9000df3e:	e038      	b.n	9000dfb2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
9000df40:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
9000df42:	f04f 32ff 	mov.w	r2, #4294967295
9000df46:	69f9      	ldr	r1, [r7, #28]
9000df48:	6938      	ldr	r0, [r7, #16]
9000df4a:	f7ff fe4f 	bl	9000dbec <put_fat>
9000df4e:	4603      	mov	r3, r0
9000df50:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
9000df52:	7dfb      	ldrb	r3, [r7, #23]
9000df54:	2b00      	cmp	r3, #0
9000df56:	d109      	bne.n	9000df6c <create_chain+0xe2>
9000df58:	683b      	ldr	r3, [r7, #0]
9000df5a:	2b00      	cmp	r3, #0
9000df5c:	d006      	beq.n	9000df6c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
9000df5e:	69fa      	ldr	r2, [r7, #28]
9000df60:	6839      	ldr	r1, [r7, #0]
9000df62:	6938      	ldr	r0, [r7, #16]
9000df64:	f7ff fe42 	bl	9000dbec <put_fat>
9000df68:	4603      	mov	r3, r0
9000df6a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
9000df6c:	7dfb      	ldrb	r3, [r7, #23]
9000df6e:	2b00      	cmp	r3, #0
9000df70:	d116      	bne.n	9000dfa0 <create_chain+0x116>
		fs->last_clst = ncl;
9000df72:	693b      	ldr	r3, [r7, #16]
9000df74:	69fa      	ldr	r2, [r7, #28]
9000df76:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
9000df78:	693b      	ldr	r3, [r7, #16]
9000df7a:	695a      	ldr	r2, [r3, #20]
9000df7c:	693b      	ldr	r3, [r7, #16]
9000df7e:	699b      	ldr	r3, [r3, #24]
9000df80:	3b02      	subs	r3, #2
9000df82:	429a      	cmp	r2, r3
9000df84:	d804      	bhi.n	9000df90 <create_chain+0x106>
9000df86:	693b      	ldr	r3, [r7, #16]
9000df88:	695b      	ldr	r3, [r3, #20]
9000df8a:	1e5a      	subs	r2, r3, #1
9000df8c:	693b      	ldr	r3, [r7, #16]
9000df8e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
9000df90:	693b      	ldr	r3, [r7, #16]
9000df92:	791b      	ldrb	r3, [r3, #4]
9000df94:	f043 0301 	orr.w	r3, r3, #1
9000df98:	b2da      	uxtb	r2, r3
9000df9a:	693b      	ldr	r3, [r7, #16]
9000df9c:	711a      	strb	r2, [r3, #4]
9000df9e:	e007      	b.n	9000dfb0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
9000dfa0:	7dfb      	ldrb	r3, [r7, #23]
9000dfa2:	2b01      	cmp	r3, #1
9000dfa4:	d102      	bne.n	9000dfac <create_chain+0x122>
9000dfa6:	f04f 33ff 	mov.w	r3, #4294967295
9000dfaa:	e000      	b.n	9000dfae <create_chain+0x124>
9000dfac:	2301      	movs	r3, #1
9000dfae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
9000dfb0:	69fb      	ldr	r3, [r7, #28]
}
9000dfb2:	4618      	mov	r0, r3
9000dfb4:	3720      	adds	r7, #32
9000dfb6:	46bd      	mov	sp, r7
9000dfb8:	bd80      	pop	{r7, pc}

9000dfba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
9000dfba:	b480      	push	{r7}
9000dfbc:	b087      	sub	sp, #28
9000dfbe:	af00      	add	r7, sp, #0
9000dfc0:	6078      	str	r0, [r7, #4]
9000dfc2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
9000dfc4:	687b      	ldr	r3, [r7, #4]
9000dfc6:	681b      	ldr	r3, [r3, #0]
9000dfc8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
9000dfca:	687b      	ldr	r3, [r7, #4]
9000dfcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000dfce:	3304      	adds	r3, #4
9000dfd0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
9000dfd2:	683b      	ldr	r3, [r7, #0]
9000dfd4:	0a5b      	lsrs	r3, r3, #9
9000dfd6:	68fa      	ldr	r2, [r7, #12]
9000dfd8:	8952      	ldrh	r2, [r2, #10]
9000dfda:	fbb3 f3f2 	udiv	r3, r3, r2
9000dfde:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
9000dfe0:	693b      	ldr	r3, [r7, #16]
9000dfe2:	1d1a      	adds	r2, r3, #4
9000dfe4:	613a      	str	r2, [r7, #16]
9000dfe6:	681b      	ldr	r3, [r3, #0]
9000dfe8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
9000dfea:	68bb      	ldr	r3, [r7, #8]
9000dfec:	2b00      	cmp	r3, #0
9000dfee:	d101      	bne.n	9000dff4 <clmt_clust+0x3a>
9000dff0:	2300      	movs	r3, #0
9000dff2:	e010      	b.n	9000e016 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
9000dff4:	697a      	ldr	r2, [r7, #20]
9000dff6:	68bb      	ldr	r3, [r7, #8]
9000dff8:	429a      	cmp	r2, r3
9000dffa:	d307      	bcc.n	9000e00c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
9000dffc:	697a      	ldr	r2, [r7, #20]
9000dffe:	68bb      	ldr	r3, [r7, #8]
9000e000:	1ad3      	subs	r3, r2, r3
9000e002:	617b      	str	r3, [r7, #20]
9000e004:	693b      	ldr	r3, [r7, #16]
9000e006:	3304      	adds	r3, #4
9000e008:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
9000e00a:	e7e9      	b.n	9000dfe0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
9000e00c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
9000e00e:	693b      	ldr	r3, [r7, #16]
9000e010:	681a      	ldr	r2, [r3, #0]
9000e012:	697b      	ldr	r3, [r7, #20]
9000e014:	4413      	add	r3, r2
}
9000e016:	4618      	mov	r0, r3
9000e018:	371c      	adds	r7, #28
9000e01a:	46bd      	mov	sp, r7
9000e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e020:	4770      	bx	lr

9000e022 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
9000e022:	b580      	push	{r7, lr}
9000e024:	b086      	sub	sp, #24
9000e026:	af00      	add	r7, sp, #0
9000e028:	6078      	str	r0, [r7, #4]
9000e02a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
9000e02c:	687b      	ldr	r3, [r7, #4]
9000e02e:	681b      	ldr	r3, [r3, #0]
9000e030:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
9000e032:	683b      	ldr	r3, [r7, #0]
9000e034:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000e038:	d204      	bcs.n	9000e044 <dir_sdi+0x22>
9000e03a:	683b      	ldr	r3, [r7, #0]
9000e03c:	f003 031f 	and.w	r3, r3, #31
9000e040:	2b00      	cmp	r3, #0
9000e042:	d001      	beq.n	9000e048 <dir_sdi+0x26>
		return FR_INT_ERR;
9000e044:	2302      	movs	r3, #2
9000e046:	e063      	b.n	9000e110 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
9000e048:	687b      	ldr	r3, [r7, #4]
9000e04a:	683a      	ldr	r2, [r7, #0]
9000e04c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
9000e04e:	687b      	ldr	r3, [r7, #4]
9000e050:	689b      	ldr	r3, [r3, #8]
9000e052:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
9000e054:	697b      	ldr	r3, [r7, #20]
9000e056:	2b00      	cmp	r3, #0
9000e058:	d106      	bne.n	9000e068 <dir_sdi+0x46>
9000e05a:	693b      	ldr	r3, [r7, #16]
9000e05c:	781b      	ldrb	r3, [r3, #0]
9000e05e:	2b02      	cmp	r3, #2
9000e060:	d902      	bls.n	9000e068 <dir_sdi+0x46>
		clst = fs->dirbase;
9000e062:	693b      	ldr	r3, [r7, #16]
9000e064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000e066:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
9000e068:	697b      	ldr	r3, [r7, #20]
9000e06a:	2b00      	cmp	r3, #0
9000e06c:	d10c      	bne.n	9000e088 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
9000e06e:	683b      	ldr	r3, [r7, #0]
9000e070:	095b      	lsrs	r3, r3, #5
9000e072:	693a      	ldr	r2, [r7, #16]
9000e074:	8912      	ldrh	r2, [r2, #8]
9000e076:	4293      	cmp	r3, r2
9000e078:	d301      	bcc.n	9000e07e <dir_sdi+0x5c>
9000e07a:	2302      	movs	r3, #2
9000e07c:	e048      	b.n	9000e110 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
9000e07e:	693b      	ldr	r3, [r7, #16]
9000e080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
9000e082:	687b      	ldr	r3, [r7, #4]
9000e084:	61da      	str	r2, [r3, #28]
9000e086:	e029      	b.n	9000e0dc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
9000e088:	693b      	ldr	r3, [r7, #16]
9000e08a:	895b      	ldrh	r3, [r3, #10]
9000e08c:	025b      	lsls	r3, r3, #9
9000e08e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
9000e090:	e019      	b.n	9000e0c6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
9000e092:	687b      	ldr	r3, [r7, #4]
9000e094:	6979      	ldr	r1, [r7, #20]
9000e096:	4618      	mov	r0, r3
9000e098:	f7ff fd01 	bl	9000da9e <get_fat>
9000e09c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
9000e09e:	697b      	ldr	r3, [r7, #20]
9000e0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e0a4:	d101      	bne.n	9000e0aa <dir_sdi+0x88>
9000e0a6:	2301      	movs	r3, #1
9000e0a8:	e032      	b.n	9000e110 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
9000e0aa:	697b      	ldr	r3, [r7, #20]
9000e0ac:	2b01      	cmp	r3, #1
9000e0ae:	d904      	bls.n	9000e0ba <dir_sdi+0x98>
9000e0b0:	693b      	ldr	r3, [r7, #16]
9000e0b2:	699b      	ldr	r3, [r3, #24]
9000e0b4:	697a      	ldr	r2, [r7, #20]
9000e0b6:	429a      	cmp	r2, r3
9000e0b8:	d301      	bcc.n	9000e0be <dir_sdi+0x9c>
9000e0ba:	2302      	movs	r3, #2
9000e0bc:	e028      	b.n	9000e110 <dir_sdi+0xee>
			ofs -= csz;
9000e0be:	683a      	ldr	r2, [r7, #0]
9000e0c0:	68fb      	ldr	r3, [r7, #12]
9000e0c2:	1ad3      	subs	r3, r2, r3
9000e0c4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
9000e0c6:	683a      	ldr	r2, [r7, #0]
9000e0c8:	68fb      	ldr	r3, [r7, #12]
9000e0ca:	429a      	cmp	r2, r3
9000e0cc:	d2e1      	bcs.n	9000e092 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
9000e0ce:	6979      	ldr	r1, [r7, #20]
9000e0d0:	6938      	ldr	r0, [r7, #16]
9000e0d2:	f7ff fcc5 	bl	9000da60 <clust2sect>
9000e0d6:	4602      	mov	r2, r0
9000e0d8:	687b      	ldr	r3, [r7, #4]
9000e0da:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
9000e0dc:	687b      	ldr	r3, [r7, #4]
9000e0de:	697a      	ldr	r2, [r7, #20]
9000e0e0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
9000e0e2:	687b      	ldr	r3, [r7, #4]
9000e0e4:	69db      	ldr	r3, [r3, #28]
9000e0e6:	2b00      	cmp	r3, #0
9000e0e8:	d101      	bne.n	9000e0ee <dir_sdi+0xcc>
9000e0ea:	2302      	movs	r3, #2
9000e0ec:	e010      	b.n	9000e110 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
9000e0ee:	687b      	ldr	r3, [r7, #4]
9000e0f0:	69da      	ldr	r2, [r3, #28]
9000e0f2:	683b      	ldr	r3, [r7, #0]
9000e0f4:	0a5b      	lsrs	r3, r3, #9
9000e0f6:	441a      	add	r2, r3
9000e0f8:	687b      	ldr	r3, [r7, #4]
9000e0fa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
9000e0fc:	693b      	ldr	r3, [r7, #16]
9000e0fe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000e102:	683b      	ldr	r3, [r7, #0]
9000e104:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000e108:	441a      	add	r2, r3
9000e10a:	687b      	ldr	r3, [r7, #4]
9000e10c:	621a      	str	r2, [r3, #32]

	return FR_OK;
9000e10e:	2300      	movs	r3, #0
}
9000e110:	4618      	mov	r0, r3
9000e112:	3718      	adds	r7, #24
9000e114:	46bd      	mov	sp, r7
9000e116:	bd80      	pop	{r7, pc}

9000e118 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
9000e118:	b580      	push	{r7, lr}
9000e11a:	b086      	sub	sp, #24
9000e11c:	af00      	add	r7, sp, #0
9000e11e:	6078      	str	r0, [r7, #4]
9000e120:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
9000e122:	687b      	ldr	r3, [r7, #4]
9000e124:	681b      	ldr	r3, [r3, #0]
9000e126:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
9000e128:	687b      	ldr	r3, [r7, #4]
9000e12a:	695b      	ldr	r3, [r3, #20]
9000e12c:	3320      	adds	r3, #32
9000e12e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
9000e130:	687b      	ldr	r3, [r7, #4]
9000e132:	69db      	ldr	r3, [r3, #28]
9000e134:	2b00      	cmp	r3, #0
9000e136:	d003      	beq.n	9000e140 <dir_next+0x28>
9000e138:	68bb      	ldr	r3, [r7, #8]
9000e13a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000e13e:	d301      	bcc.n	9000e144 <dir_next+0x2c>
9000e140:	2304      	movs	r3, #4
9000e142:	e0aa      	b.n	9000e29a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
9000e144:	68bb      	ldr	r3, [r7, #8]
9000e146:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000e14a:	2b00      	cmp	r3, #0
9000e14c:	f040 8098 	bne.w	9000e280 <dir_next+0x168>
		dp->sect++;				/* Next sector */
9000e150:	687b      	ldr	r3, [r7, #4]
9000e152:	69db      	ldr	r3, [r3, #28]
9000e154:	1c5a      	adds	r2, r3, #1
9000e156:	687b      	ldr	r3, [r7, #4]
9000e158:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
9000e15a:	687b      	ldr	r3, [r7, #4]
9000e15c:	699b      	ldr	r3, [r3, #24]
9000e15e:	2b00      	cmp	r3, #0
9000e160:	d10b      	bne.n	9000e17a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
9000e162:	68bb      	ldr	r3, [r7, #8]
9000e164:	095b      	lsrs	r3, r3, #5
9000e166:	68fa      	ldr	r2, [r7, #12]
9000e168:	8912      	ldrh	r2, [r2, #8]
9000e16a:	4293      	cmp	r3, r2
9000e16c:	f0c0 8088 	bcc.w	9000e280 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
9000e170:	687b      	ldr	r3, [r7, #4]
9000e172:	2200      	movs	r2, #0
9000e174:	61da      	str	r2, [r3, #28]
9000e176:	2304      	movs	r3, #4
9000e178:	e08f      	b.n	9000e29a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
9000e17a:	68bb      	ldr	r3, [r7, #8]
9000e17c:	0a5b      	lsrs	r3, r3, #9
9000e17e:	68fa      	ldr	r2, [r7, #12]
9000e180:	8952      	ldrh	r2, [r2, #10]
9000e182:	3a01      	subs	r2, #1
9000e184:	4013      	ands	r3, r2
9000e186:	2b00      	cmp	r3, #0
9000e188:	d17a      	bne.n	9000e280 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
9000e18a:	687a      	ldr	r2, [r7, #4]
9000e18c:	687b      	ldr	r3, [r7, #4]
9000e18e:	699b      	ldr	r3, [r3, #24]
9000e190:	4619      	mov	r1, r3
9000e192:	4610      	mov	r0, r2
9000e194:	f7ff fc83 	bl	9000da9e <get_fat>
9000e198:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
9000e19a:	697b      	ldr	r3, [r7, #20]
9000e19c:	2b01      	cmp	r3, #1
9000e19e:	d801      	bhi.n	9000e1a4 <dir_next+0x8c>
9000e1a0:	2302      	movs	r3, #2
9000e1a2:	e07a      	b.n	9000e29a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
9000e1a4:	697b      	ldr	r3, [r7, #20]
9000e1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e1aa:	d101      	bne.n	9000e1b0 <dir_next+0x98>
9000e1ac:	2301      	movs	r3, #1
9000e1ae:	e074      	b.n	9000e29a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
9000e1b0:	68fb      	ldr	r3, [r7, #12]
9000e1b2:	699b      	ldr	r3, [r3, #24]
9000e1b4:	697a      	ldr	r2, [r7, #20]
9000e1b6:	429a      	cmp	r2, r3
9000e1b8:	d358      	bcc.n	9000e26c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
9000e1ba:	683b      	ldr	r3, [r7, #0]
9000e1bc:	2b00      	cmp	r3, #0
9000e1be:	d104      	bne.n	9000e1ca <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
9000e1c0:	687b      	ldr	r3, [r7, #4]
9000e1c2:	2200      	movs	r2, #0
9000e1c4:	61da      	str	r2, [r3, #28]
9000e1c6:	2304      	movs	r3, #4
9000e1c8:	e067      	b.n	9000e29a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
9000e1ca:	687a      	ldr	r2, [r7, #4]
9000e1cc:	687b      	ldr	r3, [r7, #4]
9000e1ce:	699b      	ldr	r3, [r3, #24]
9000e1d0:	4619      	mov	r1, r3
9000e1d2:	4610      	mov	r0, r2
9000e1d4:	f7ff fe59 	bl	9000de8a <create_chain>
9000e1d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
9000e1da:	697b      	ldr	r3, [r7, #20]
9000e1dc:	2b00      	cmp	r3, #0
9000e1de:	d101      	bne.n	9000e1e4 <dir_next+0xcc>
9000e1e0:	2307      	movs	r3, #7
9000e1e2:	e05a      	b.n	9000e29a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
9000e1e4:	697b      	ldr	r3, [r7, #20]
9000e1e6:	2b01      	cmp	r3, #1
9000e1e8:	d101      	bne.n	9000e1ee <dir_next+0xd6>
9000e1ea:	2302      	movs	r3, #2
9000e1ec:	e055      	b.n	9000e29a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
9000e1ee:	697b      	ldr	r3, [r7, #20]
9000e1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e1f4:	d101      	bne.n	9000e1fa <dir_next+0xe2>
9000e1f6:	2301      	movs	r3, #1
9000e1f8:	e04f      	b.n	9000e29a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
9000e1fa:	68f8      	ldr	r0, [r7, #12]
9000e1fc:	f7ff fb50 	bl	9000d8a0 <sync_window>
9000e200:	4603      	mov	r3, r0
9000e202:	2b00      	cmp	r3, #0
9000e204:	d001      	beq.n	9000e20a <dir_next+0xf2>
9000e206:	2301      	movs	r3, #1
9000e208:	e047      	b.n	9000e29a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
9000e20a:	68fb      	ldr	r3, [r7, #12]
9000e20c:	3334      	adds	r3, #52	@ 0x34
9000e20e:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000e212:	2100      	movs	r1, #0
9000e214:	4618      	mov	r0, r3
9000e216:	f7ff f979 	bl	9000d50c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
9000e21a:	2300      	movs	r3, #0
9000e21c:	613b      	str	r3, [r7, #16]
9000e21e:	6979      	ldr	r1, [r7, #20]
9000e220:	68f8      	ldr	r0, [r7, #12]
9000e222:	f7ff fc1d 	bl	9000da60 <clust2sect>
9000e226:	4602      	mov	r2, r0
9000e228:	68fb      	ldr	r3, [r7, #12]
9000e22a:	631a      	str	r2, [r3, #48]	@ 0x30
9000e22c:	e012      	b.n	9000e254 <dir_next+0x13c>
						fs->wflag = 1;
9000e22e:	68fb      	ldr	r3, [r7, #12]
9000e230:	2201      	movs	r2, #1
9000e232:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
9000e234:	68f8      	ldr	r0, [r7, #12]
9000e236:	f7ff fb33 	bl	9000d8a0 <sync_window>
9000e23a:	4603      	mov	r3, r0
9000e23c:	2b00      	cmp	r3, #0
9000e23e:	d001      	beq.n	9000e244 <dir_next+0x12c>
9000e240:	2301      	movs	r3, #1
9000e242:	e02a      	b.n	9000e29a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
9000e244:	693b      	ldr	r3, [r7, #16]
9000e246:	3301      	adds	r3, #1
9000e248:	613b      	str	r3, [r7, #16]
9000e24a:	68fb      	ldr	r3, [r7, #12]
9000e24c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000e24e:	1c5a      	adds	r2, r3, #1
9000e250:	68fb      	ldr	r3, [r7, #12]
9000e252:	631a      	str	r2, [r3, #48]	@ 0x30
9000e254:	68fb      	ldr	r3, [r7, #12]
9000e256:	895b      	ldrh	r3, [r3, #10]
9000e258:	461a      	mov	r2, r3
9000e25a:	693b      	ldr	r3, [r7, #16]
9000e25c:	4293      	cmp	r3, r2
9000e25e:	d3e6      	bcc.n	9000e22e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
9000e260:	68fb      	ldr	r3, [r7, #12]
9000e262:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000e264:	693b      	ldr	r3, [r7, #16]
9000e266:	1ad2      	subs	r2, r2, r3
9000e268:	68fb      	ldr	r3, [r7, #12]
9000e26a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
9000e26c:	687b      	ldr	r3, [r7, #4]
9000e26e:	697a      	ldr	r2, [r7, #20]
9000e270:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
9000e272:	6979      	ldr	r1, [r7, #20]
9000e274:	68f8      	ldr	r0, [r7, #12]
9000e276:	f7ff fbf3 	bl	9000da60 <clust2sect>
9000e27a:	4602      	mov	r2, r0
9000e27c:	687b      	ldr	r3, [r7, #4]
9000e27e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
9000e280:	687b      	ldr	r3, [r7, #4]
9000e282:	68ba      	ldr	r2, [r7, #8]
9000e284:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
9000e286:	68fb      	ldr	r3, [r7, #12]
9000e288:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000e28c:	68bb      	ldr	r3, [r7, #8]
9000e28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000e292:	441a      	add	r2, r3
9000e294:	687b      	ldr	r3, [r7, #4]
9000e296:	621a      	str	r2, [r3, #32]

	return FR_OK;
9000e298:	2300      	movs	r3, #0
}
9000e29a:	4618      	mov	r0, r3
9000e29c:	3718      	adds	r7, #24
9000e29e:	46bd      	mov	sp, r7
9000e2a0:	bd80      	pop	{r7, pc}

9000e2a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
9000e2a2:	b580      	push	{r7, lr}
9000e2a4:	b086      	sub	sp, #24
9000e2a6:	af00      	add	r7, sp, #0
9000e2a8:	6078      	str	r0, [r7, #4]
9000e2aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
9000e2ac:	687b      	ldr	r3, [r7, #4]
9000e2ae:	681b      	ldr	r3, [r3, #0]
9000e2b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
9000e2b2:	2100      	movs	r1, #0
9000e2b4:	6878      	ldr	r0, [r7, #4]
9000e2b6:	f7ff feb4 	bl	9000e022 <dir_sdi>
9000e2ba:	4603      	mov	r3, r0
9000e2bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
9000e2be:	7dfb      	ldrb	r3, [r7, #23]
9000e2c0:	2b00      	cmp	r3, #0
9000e2c2:	d12b      	bne.n	9000e31c <dir_alloc+0x7a>
		n = 0;
9000e2c4:	2300      	movs	r3, #0
9000e2c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
9000e2c8:	687b      	ldr	r3, [r7, #4]
9000e2ca:	69db      	ldr	r3, [r3, #28]
9000e2cc:	4619      	mov	r1, r3
9000e2ce:	68f8      	ldr	r0, [r7, #12]
9000e2d0:	f7ff fb2a 	bl	9000d928 <move_window>
9000e2d4:	4603      	mov	r3, r0
9000e2d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
9000e2d8:	7dfb      	ldrb	r3, [r7, #23]
9000e2da:	2b00      	cmp	r3, #0
9000e2dc:	d11d      	bne.n	9000e31a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
9000e2de:	687b      	ldr	r3, [r7, #4]
9000e2e0:	6a1b      	ldr	r3, [r3, #32]
9000e2e2:	781b      	ldrb	r3, [r3, #0]
9000e2e4:	2be5      	cmp	r3, #229	@ 0xe5
9000e2e6:	d004      	beq.n	9000e2f2 <dir_alloc+0x50>
9000e2e8:	687b      	ldr	r3, [r7, #4]
9000e2ea:	6a1b      	ldr	r3, [r3, #32]
9000e2ec:	781b      	ldrb	r3, [r3, #0]
9000e2ee:	2b00      	cmp	r3, #0
9000e2f0:	d107      	bne.n	9000e302 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
9000e2f2:	693b      	ldr	r3, [r7, #16]
9000e2f4:	3301      	adds	r3, #1
9000e2f6:	613b      	str	r3, [r7, #16]
9000e2f8:	693a      	ldr	r2, [r7, #16]
9000e2fa:	683b      	ldr	r3, [r7, #0]
9000e2fc:	429a      	cmp	r2, r3
9000e2fe:	d102      	bne.n	9000e306 <dir_alloc+0x64>
9000e300:	e00c      	b.n	9000e31c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
9000e302:	2300      	movs	r3, #0
9000e304:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
9000e306:	2101      	movs	r1, #1
9000e308:	6878      	ldr	r0, [r7, #4]
9000e30a:	f7ff ff05 	bl	9000e118 <dir_next>
9000e30e:	4603      	mov	r3, r0
9000e310:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
9000e312:	7dfb      	ldrb	r3, [r7, #23]
9000e314:	2b00      	cmp	r3, #0
9000e316:	d0d7      	beq.n	9000e2c8 <dir_alloc+0x26>
9000e318:	e000      	b.n	9000e31c <dir_alloc+0x7a>
			if (res != FR_OK) break;
9000e31a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
9000e31c:	7dfb      	ldrb	r3, [r7, #23]
9000e31e:	2b04      	cmp	r3, #4
9000e320:	d101      	bne.n	9000e326 <dir_alloc+0x84>
9000e322:	2307      	movs	r3, #7
9000e324:	75fb      	strb	r3, [r7, #23]
	return res;
9000e326:	7dfb      	ldrb	r3, [r7, #23]
}
9000e328:	4618      	mov	r0, r3
9000e32a:	3718      	adds	r7, #24
9000e32c:	46bd      	mov	sp, r7
9000e32e:	bd80      	pop	{r7, pc}

9000e330 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
9000e330:	b580      	push	{r7, lr}
9000e332:	b084      	sub	sp, #16
9000e334:	af00      	add	r7, sp, #0
9000e336:	6078      	str	r0, [r7, #4]
9000e338:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
9000e33a:	683b      	ldr	r3, [r7, #0]
9000e33c:	331a      	adds	r3, #26
9000e33e:	4618      	mov	r0, r3
9000e340:	f7ff f840 	bl	9000d3c4 <ld_word>
9000e344:	4603      	mov	r3, r0
9000e346:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
9000e348:	687b      	ldr	r3, [r7, #4]
9000e34a:	781b      	ldrb	r3, [r3, #0]
9000e34c:	2b03      	cmp	r3, #3
9000e34e:	d109      	bne.n	9000e364 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
9000e350:	683b      	ldr	r3, [r7, #0]
9000e352:	3314      	adds	r3, #20
9000e354:	4618      	mov	r0, r3
9000e356:	f7ff f835 	bl	9000d3c4 <ld_word>
9000e35a:	4603      	mov	r3, r0
9000e35c:	041b      	lsls	r3, r3, #16
9000e35e:	68fa      	ldr	r2, [r7, #12]
9000e360:	4313      	orrs	r3, r2
9000e362:	60fb      	str	r3, [r7, #12]
	}

	return cl;
9000e364:	68fb      	ldr	r3, [r7, #12]
}
9000e366:	4618      	mov	r0, r3
9000e368:	3710      	adds	r7, #16
9000e36a:	46bd      	mov	sp, r7
9000e36c:	bd80      	pop	{r7, pc}

9000e36e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
9000e36e:	b580      	push	{r7, lr}
9000e370:	b084      	sub	sp, #16
9000e372:	af00      	add	r7, sp, #0
9000e374:	60f8      	str	r0, [r7, #12]
9000e376:	60b9      	str	r1, [r7, #8]
9000e378:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
9000e37a:	68bb      	ldr	r3, [r7, #8]
9000e37c:	331a      	adds	r3, #26
9000e37e:	687a      	ldr	r2, [r7, #4]
9000e380:	b292      	uxth	r2, r2
9000e382:	4611      	mov	r1, r2
9000e384:	4618      	mov	r0, r3
9000e386:	f7ff f859 	bl	9000d43c <st_word>
	if (fs->fs_type == FS_FAT32) {
9000e38a:	68fb      	ldr	r3, [r7, #12]
9000e38c:	781b      	ldrb	r3, [r3, #0]
9000e38e:	2b03      	cmp	r3, #3
9000e390:	d109      	bne.n	9000e3a6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
9000e392:	68bb      	ldr	r3, [r7, #8]
9000e394:	f103 0214 	add.w	r2, r3, #20
9000e398:	687b      	ldr	r3, [r7, #4]
9000e39a:	0c1b      	lsrs	r3, r3, #16
9000e39c:	b29b      	uxth	r3, r3
9000e39e:	4619      	mov	r1, r3
9000e3a0:	4610      	mov	r0, r2
9000e3a2:	f7ff f84b 	bl	9000d43c <st_word>
	}
}
9000e3a6:	bf00      	nop
9000e3a8:	3710      	adds	r7, #16
9000e3aa:	46bd      	mov	sp, r7
9000e3ac:	bd80      	pop	{r7, pc}
	...

9000e3b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
9000e3b0:	b590      	push	{r4, r7, lr}
9000e3b2:	b087      	sub	sp, #28
9000e3b4:	af00      	add	r7, sp, #0
9000e3b6:	6078      	str	r0, [r7, #4]
9000e3b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
9000e3ba:	683b      	ldr	r3, [r7, #0]
9000e3bc:	331a      	adds	r3, #26
9000e3be:	4618      	mov	r0, r3
9000e3c0:	f7ff f800 	bl	9000d3c4 <ld_word>
9000e3c4:	4603      	mov	r3, r0
9000e3c6:	2b00      	cmp	r3, #0
9000e3c8:	d001      	beq.n	9000e3ce <cmp_lfn+0x1e>
9000e3ca:	2300      	movs	r3, #0
9000e3cc:	e059      	b.n	9000e482 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
9000e3ce:	683b      	ldr	r3, [r7, #0]
9000e3d0:	781b      	ldrb	r3, [r3, #0]
9000e3d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000e3d6:	1e5a      	subs	r2, r3, #1
9000e3d8:	4613      	mov	r3, r2
9000e3da:	005b      	lsls	r3, r3, #1
9000e3dc:	4413      	add	r3, r2
9000e3de:	009b      	lsls	r3, r3, #2
9000e3e0:	4413      	add	r3, r2
9000e3e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
9000e3e4:	2301      	movs	r3, #1
9000e3e6:	81fb      	strh	r3, [r7, #14]
9000e3e8:	2300      	movs	r3, #0
9000e3ea:	613b      	str	r3, [r7, #16]
9000e3ec:	e033      	b.n	9000e456 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
9000e3ee:	4a27      	ldr	r2, [pc, #156]	@ (9000e48c <cmp_lfn+0xdc>)
9000e3f0:	693b      	ldr	r3, [r7, #16]
9000e3f2:	4413      	add	r3, r2
9000e3f4:	781b      	ldrb	r3, [r3, #0]
9000e3f6:	461a      	mov	r2, r3
9000e3f8:	683b      	ldr	r3, [r7, #0]
9000e3fa:	4413      	add	r3, r2
9000e3fc:	4618      	mov	r0, r3
9000e3fe:	f7fe ffe1 	bl	9000d3c4 <ld_word>
9000e402:	4603      	mov	r3, r0
9000e404:	81bb      	strh	r3, [r7, #12]
		if (wc) {
9000e406:	89fb      	ldrh	r3, [r7, #14]
9000e408:	2b00      	cmp	r3, #0
9000e40a:	d01a      	beq.n	9000e442 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
9000e40c:	697b      	ldr	r3, [r7, #20]
9000e40e:	2bfe      	cmp	r3, #254	@ 0xfe
9000e410:	d812      	bhi.n	9000e438 <cmp_lfn+0x88>
9000e412:	89bb      	ldrh	r3, [r7, #12]
9000e414:	4618      	mov	r0, r3
9000e416:	f001 fd2d 	bl	9000fe74 <ff_wtoupper>
9000e41a:	4603      	mov	r3, r0
9000e41c:	461c      	mov	r4, r3
9000e41e:	697b      	ldr	r3, [r7, #20]
9000e420:	1c5a      	adds	r2, r3, #1
9000e422:	617a      	str	r2, [r7, #20]
9000e424:	005b      	lsls	r3, r3, #1
9000e426:	687a      	ldr	r2, [r7, #4]
9000e428:	4413      	add	r3, r2
9000e42a:	881b      	ldrh	r3, [r3, #0]
9000e42c:	4618      	mov	r0, r3
9000e42e:	f001 fd21 	bl	9000fe74 <ff_wtoupper>
9000e432:	4603      	mov	r3, r0
9000e434:	429c      	cmp	r4, r3
9000e436:	d001      	beq.n	9000e43c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
9000e438:	2300      	movs	r3, #0
9000e43a:	e022      	b.n	9000e482 <cmp_lfn+0xd2>
			}
			wc = uc;
9000e43c:	89bb      	ldrh	r3, [r7, #12]
9000e43e:	81fb      	strh	r3, [r7, #14]
9000e440:	e006      	b.n	9000e450 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
9000e442:	89bb      	ldrh	r3, [r7, #12]
9000e444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000e448:	4293      	cmp	r3, r2
9000e44a:	d001      	beq.n	9000e450 <cmp_lfn+0xa0>
9000e44c:	2300      	movs	r3, #0
9000e44e:	e018      	b.n	9000e482 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
9000e450:	693b      	ldr	r3, [r7, #16]
9000e452:	3301      	adds	r3, #1
9000e454:	613b      	str	r3, [r7, #16]
9000e456:	693b      	ldr	r3, [r7, #16]
9000e458:	2b0c      	cmp	r3, #12
9000e45a:	d9c8      	bls.n	9000e3ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
9000e45c:	683b      	ldr	r3, [r7, #0]
9000e45e:	781b      	ldrb	r3, [r3, #0]
9000e460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000e464:	2b00      	cmp	r3, #0
9000e466:	d00b      	beq.n	9000e480 <cmp_lfn+0xd0>
9000e468:	89fb      	ldrh	r3, [r7, #14]
9000e46a:	2b00      	cmp	r3, #0
9000e46c:	d008      	beq.n	9000e480 <cmp_lfn+0xd0>
9000e46e:	697b      	ldr	r3, [r7, #20]
9000e470:	005b      	lsls	r3, r3, #1
9000e472:	687a      	ldr	r2, [r7, #4]
9000e474:	4413      	add	r3, r2
9000e476:	881b      	ldrh	r3, [r3, #0]
9000e478:	2b00      	cmp	r3, #0
9000e47a:	d001      	beq.n	9000e480 <cmp_lfn+0xd0>
9000e47c:	2300      	movs	r3, #0
9000e47e:	e000      	b.n	9000e482 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
9000e480:	2301      	movs	r3, #1
}
9000e482:	4618      	mov	r0, r3
9000e484:	371c      	adds	r7, #28
9000e486:	46bd      	mov	sp, r7
9000e488:	bd90      	pop	{r4, r7, pc}
9000e48a:	bf00      	nop
9000e48c:	9001421c 	.word	0x9001421c

9000e490 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
9000e490:	b580      	push	{r7, lr}
9000e492:	b088      	sub	sp, #32
9000e494:	af00      	add	r7, sp, #0
9000e496:	60f8      	str	r0, [r7, #12]
9000e498:	60b9      	str	r1, [r7, #8]
9000e49a:	4611      	mov	r1, r2
9000e49c:	461a      	mov	r2, r3
9000e49e:	460b      	mov	r3, r1
9000e4a0:	71fb      	strb	r3, [r7, #7]
9000e4a2:	4613      	mov	r3, r2
9000e4a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
9000e4a6:	68bb      	ldr	r3, [r7, #8]
9000e4a8:	330d      	adds	r3, #13
9000e4aa:	79ba      	ldrb	r2, [r7, #6]
9000e4ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
9000e4ae:	68bb      	ldr	r3, [r7, #8]
9000e4b0:	330b      	adds	r3, #11
9000e4b2:	220f      	movs	r2, #15
9000e4b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
9000e4b6:	68bb      	ldr	r3, [r7, #8]
9000e4b8:	330c      	adds	r3, #12
9000e4ba:	2200      	movs	r2, #0
9000e4bc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
9000e4be:	68bb      	ldr	r3, [r7, #8]
9000e4c0:	331a      	adds	r3, #26
9000e4c2:	2100      	movs	r1, #0
9000e4c4:	4618      	mov	r0, r3
9000e4c6:	f7fe ffb9 	bl	9000d43c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
9000e4ca:	79fb      	ldrb	r3, [r7, #7]
9000e4cc:	1e5a      	subs	r2, r3, #1
9000e4ce:	4613      	mov	r3, r2
9000e4d0:	005b      	lsls	r3, r3, #1
9000e4d2:	4413      	add	r3, r2
9000e4d4:	009b      	lsls	r3, r3, #2
9000e4d6:	4413      	add	r3, r2
9000e4d8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
9000e4da:	2300      	movs	r3, #0
9000e4dc:	82fb      	strh	r3, [r7, #22]
9000e4de:	2300      	movs	r3, #0
9000e4e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
9000e4e2:	8afb      	ldrh	r3, [r7, #22]
9000e4e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000e4e8:	4293      	cmp	r3, r2
9000e4ea:	d007      	beq.n	9000e4fc <put_lfn+0x6c>
9000e4ec:	69fb      	ldr	r3, [r7, #28]
9000e4ee:	1c5a      	adds	r2, r3, #1
9000e4f0:	61fa      	str	r2, [r7, #28]
9000e4f2:	005b      	lsls	r3, r3, #1
9000e4f4:	68fa      	ldr	r2, [r7, #12]
9000e4f6:	4413      	add	r3, r2
9000e4f8:	881b      	ldrh	r3, [r3, #0]
9000e4fa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
9000e4fc:	4a17      	ldr	r2, [pc, #92]	@ (9000e55c <put_lfn+0xcc>)
9000e4fe:	69bb      	ldr	r3, [r7, #24]
9000e500:	4413      	add	r3, r2
9000e502:	781b      	ldrb	r3, [r3, #0]
9000e504:	461a      	mov	r2, r3
9000e506:	68bb      	ldr	r3, [r7, #8]
9000e508:	4413      	add	r3, r2
9000e50a:	8afa      	ldrh	r2, [r7, #22]
9000e50c:	4611      	mov	r1, r2
9000e50e:	4618      	mov	r0, r3
9000e510:	f7fe ff94 	bl	9000d43c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
9000e514:	8afb      	ldrh	r3, [r7, #22]
9000e516:	2b00      	cmp	r3, #0
9000e518:	d102      	bne.n	9000e520 <put_lfn+0x90>
9000e51a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
9000e51e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
9000e520:	69bb      	ldr	r3, [r7, #24]
9000e522:	3301      	adds	r3, #1
9000e524:	61bb      	str	r3, [r7, #24]
9000e526:	69bb      	ldr	r3, [r7, #24]
9000e528:	2b0c      	cmp	r3, #12
9000e52a:	d9da      	bls.n	9000e4e2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
9000e52c:	8afb      	ldrh	r3, [r7, #22]
9000e52e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000e532:	4293      	cmp	r3, r2
9000e534:	d006      	beq.n	9000e544 <put_lfn+0xb4>
9000e536:	69fb      	ldr	r3, [r7, #28]
9000e538:	005b      	lsls	r3, r3, #1
9000e53a:	68fa      	ldr	r2, [r7, #12]
9000e53c:	4413      	add	r3, r2
9000e53e:	881b      	ldrh	r3, [r3, #0]
9000e540:	2b00      	cmp	r3, #0
9000e542:	d103      	bne.n	9000e54c <put_lfn+0xbc>
9000e544:	79fb      	ldrb	r3, [r7, #7]
9000e546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000e54a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
9000e54c:	68bb      	ldr	r3, [r7, #8]
9000e54e:	79fa      	ldrb	r2, [r7, #7]
9000e550:	701a      	strb	r2, [r3, #0]
}
9000e552:	bf00      	nop
9000e554:	3720      	adds	r7, #32
9000e556:	46bd      	mov	sp, r7
9000e558:	bd80      	pop	{r7, pc}
9000e55a:	bf00      	nop
9000e55c:	9001421c 	.word	0x9001421c

9000e560 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
9000e560:	b580      	push	{r7, lr}
9000e562:	b08c      	sub	sp, #48	@ 0x30
9000e564:	af00      	add	r7, sp, #0
9000e566:	60f8      	str	r0, [r7, #12]
9000e568:	60b9      	str	r1, [r7, #8]
9000e56a:	607a      	str	r2, [r7, #4]
9000e56c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
9000e56e:	220b      	movs	r2, #11
9000e570:	68b9      	ldr	r1, [r7, #8]
9000e572:	68f8      	ldr	r0, [r7, #12]
9000e574:	f7fe ffa9 	bl	9000d4ca <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
9000e578:	683b      	ldr	r3, [r7, #0]
9000e57a:	2b05      	cmp	r3, #5
9000e57c:	d929      	bls.n	9000e5d2 <gen_numname+0x72>
		sr = seq;
9000e57e:	683b      	ldr	r3, [r7, #0]
9000e580:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
9000e582:	e020      	b.n	9000e5c6 <gen_numname+0x66>
			wc = *lfn++;
9000e584:	687b      	ldr	r3, [r7, #4]
9000e586:	1c9a      	adds	r2, r3, #2
9000e588:	607a      	str	r2, [r7, #4]
9000e58a:	881b      	ldrh	r3, [r3, #0]
9000e58c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
9000e58e:	2300      	movs	r3, #0
9000e590:	62bb      	str	r3, [r7, #40]	@ 0x28
9000e592:	e015      	b.n	9000e5c0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
9000e594:	69fb      	ldr	r3, [r7, #28]
9000e596:	005a      	lsls	r2, r3, #1
9000e598:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
9000e59a:	f003 0301 	and.w	r3, r3, #1
9000e59e:	4413      	add	r3, r2
9000e5a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
9000e5a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
9000e5a4:	085b      	lsrs	r3, r3, #1
9000e5a6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
9000e5a8:	69fb      	ldr	r3, [r7, #28]
9000e5aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
9000e5ae:	2b00      	cmp	r3, #0
9000e5b0:	d003      	beq.n	9000e5ba <gen_numname+0x5a>
9000e5b2:	69fa      	ldr	r2, [r7, #28]
9000e5b4:	4b30      	ldr	r3, [pc, #192]	@ (9000e678 <gen_numname+0x118>)
9000e5b6:	4053      	eors	r3, r2
9000e5b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
9000e5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e5bc:	3301      	adds	r3, #1
9000e5be:	62bb      	str	r3, [r7, #40]	@ 0x28
9000e5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e5c2:	2b0f      	cmp	r3, #15
9000e5c4:	d9e6      	bls.n	9000e594 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
9000e5c6:	687b      	ldr	r3, [r7, #4]
9000e5c8:	881b      	ldrh	r3, [r3, #0]
9000e5ca:	2b00      	cmp	r3, #0
9000e5cc:	d1da      	bne.n	9000e584 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
9000e5ce:	69fb      	ldr	r3, [r7, #28]
9000e5d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
9000e5d2:	2307      	movs	r3, #7
9000e5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
9000e5d6:	683b      	ldr	r3, [r7, #0]
9000e5d8:	b2db      	uxtb	r3, r3
9000e5da:	f003 030f 	and.w	r3, r3, #15
9000e5de:	b2db      	uxtb	r3, r3
9000e5e0:	3330      	adds	r3, #48	@ 0x30
9000e5e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
9000e5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e5ea:	2b39      	cmp	r3, #57	@ 0x39
9000e5ec:	d904      	bls.n	9000e5f8 <gen_numname+0x98>
9000e5ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e5f2:	3307      	adds	r3, #7
9000e5f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
9000e5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e5fa:	1e5a      	subs	r2, r3, #1
9000e5fc:	62ba      	str	r2, [r7, #40]	@ 0x28
9000e5fe:	3330      	adds	r3, #48	@ 0x30
9000e600:	443b      	add	r3, r7
9000e602:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
9000e606:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
9000e60a:	683b      	ldr	r3, [r7, #0]
9000e60c:	091b      	lsrs	r3, r3, #4
9000e60e:	603b      	str	r3, [r7, #0]
	} while (seq);
9000e610:	683b      	ldr	r3, [r7, #0]
9000e612:	2b00      	cmp	r3, #0
9000e614:	d1df      	bne.n	9000e5d6 <gen_numname+0x76>
	ns[i] = '~';
9000e616:	f107 0214 	add.w	r2, r7, #20
9000e61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e61c:	4413      	add	r3, r2
9000e61e:	227e      	movs	r2, #126	@ 0x7e
9000e620:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
9000e622:	2300      	movs	r3, #0
9000e624:	627b      	str	r3, [r7, #36]	@ 0x24
9000e626:	e002      	b.n	9000e62e <gen_numname+0xce>
9000e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000e62a:	3301      	adds	r3, #1
9000e62c:	627b      	str	r3, [r7, #36]	@ 0x24
9000e62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000e630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e632:	429a      	cmp	r2, r3
9000e634:	d205      	bcs.n	9000e642 <gen_numname+0xe2>
9000e636:	68fa      	ldr	r2, [r7, #12]
9000e638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000e63a:	4413      	add	r3, r2
9000e63c:	781b      	ldrb	r3, [r3, #0]
9000e63e:	2b20      	cmp	r3, #32
9000e640:	d1f2      	bne.n	9000e628 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
9000e642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e644:	2b07      	cmp	r3, #7
9000e646:	d807      	bhi.n	9000e658 <gen_numname+0xf8>
9000e648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e64a:	1c5a      	adds	r2, r3, #1
9000e64c:	62ba      	str	r2, [r7, #40]	@ 0x28
9000e64e:	3330      	adds	r3, #48	@ 0x30
9000e650:	443b      	add	r3, r7
9000e652:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
9000e656:	e000      	b.n	9000e65a <gen_numname+0xfa>
9000e658:	2120      	movs	r1, #32
9000e65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000e65c:	1c5a      	adds	r2, r3, #1
9000e65e:	627a      	str	r2, [r7, #36]	@ 0x24
9000e660:	68fa      	ldr	r2, [r7, #12]
9000e662:	4413      	add	r3, r2
9000e664:	460a      	mov	r2, r1
9000e666:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
9000e668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000e66a:	2b07      	cmp	r3, #7
9000e66c:	d9e9      	bls.n	9000e642 <gen_numname+0xe2>
}
9000e66e:	bf00      	nop
9000e670:	bf00      	nop
9000e672:	3730      	adds	r7, #48	@ 0x30
9000e674:	46bd      	mov	sp, r7
9000e676:	bd80      	pop	{r7, pc}
9000e678:	00011021 	.word	0x00011021

9000e67c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
9000e67c:	b480      	push	{r7}
9000e67e:	b085      	sub	sp, #20
9000e680:	af00      	add	r7, sp, #0
9000e682:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
9000e684:	2300      	movs	r3, #0
9000e686:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
9000e688:	230b      	movs	r3, #11
9000e68a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
9000e68c:	7bfb      	ldrb	r3, [r7, #15]
9000e68e:	b2da      	uxtb	r2, r3
9000e690:	0852      	lsrs	r2, r2, #1
9000e692:	01db      	lsls	r3, r3, #7
9000e694:	4313      	orrs	r3, r2
9000e696:	b2da      	uxtb	r2, r3
9000e698:	687b      	ldr	r3, [r7, #4]
9000e69a:	1c59      	adds	r1, r3, #1
9000e69c:	6079      	str	r1, [r7, #4]
9000e69e:	781b      	ldrb	r3, [r3, #0]
9000e6a0:	4413      	add	r3, r2
9000e6a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
9000e6a4:	68bb      	ldr	r3, [r7, #8]
9000e6a6:	3b01      	subs	r3, #1
9000e6a8:	60bb      	str	r3, [r7, #8]
9000e6aa:	68bb      	ldr	r3, [r7, #8]
9000e6ac:	2b00      	cmp	r3, #0
9000e6ae:	d1ed      	bne.n	9000e68c <sum_sfn+0x10>
	return sum;
9000e6b0:	7bfb      	ldrb	r3, [r7, #15]
}
9000e6b2:	4618      	mov	r0, r3
9000e6b4:	3714      	adds	r7, #20
9000e6b6:	46bd      	mov	sp, r7
9000e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e6bc:	4770      	bx	lr

9000e6be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
9000e6be:	b580      	push	{r7, lr}
9000e6c0:	b086      	sub	sp, #24
9000e6c2:	af00      	add	r7, sp, #0
9000e6c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
9000e6c6:	687b      	ldr	r3, [r7, #4]
9000e6c8:	681b      	ldr	r3, [r3, #0]
9000e6ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
9000e6cc:	2100      	movs	r1, #0
9000e6ce:	6878      	ldr	r0, [r7, #4]
9000e6d0:	f7ff fca7 	bl	9000e022 <dir_sdi>
9000e6d4:	4603      	mov	r3, r0
9000e6d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
9000e6d8:	7dfb      	ldrb	r3, [r7, #23]
9000e6da:	2b00      	cmp	r3, #0
9000e6dc:	d001      	beq.n	9000e6e2 <dir_find+0x24>
9000e6de:	7dfb      	ldrb	r3, [r7, #23]
9000e6e0:	e0a9      	b.n	9000e836 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
9000e6e2:	23ff      	movs	r3, #255	@ 0xff
9000e6e4:	753b      	strb	r3, [r7, #20]
9000e6e6:	7d3b      	ldrb	r3, [r7, #20]
9000e6e8:	757b      	strb	r3, [r7, #21]
9000e6ea:	687b      	ldr	r3, [r7, #4]
9000e6ec:	f04f 32ff 	mov.w	r2, #4294967295
9000e6f0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
9000e6f2:	687b      	ldr	r3, [r7, #4]
9000e6f4:	69db      	ldr	r3, [r3, #28]
9000e6f6:	4619      	mov	r1, r3
9000e6f8:	6938      	ldr	r0, [r7, #16]
9000e6fa:	f7ff f915 	bl	9000d928 <move_window>
9000e6fe:	4603      	mov	r3, r0
9000e700:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
9000e702:	7dfb      	ldrb	r3, [r7, #23]
9000e704:	2b00      	cmp	r3, #0
9000e706:	f040 8090 	bne.w	9000e82a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
9000e70a:	687b      	ldr	r3, [r7, #4]
9000e70c:	6a1b      	ldr	r3, [r3, #32]
9000e70e:	781b      	ldrb	r3, [r3, #0]
9000e710:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
9000e712:	7dbb      	ldrb	r3, [r7, #22]
9000e714:	2b00      	cmp	r3, #0
9000e716:	d102      	bne.n	9000e71e <dir_find+0x60>
9000e718:	2304      	movs	r3, #4
9000e71a:	75fb      	strb	r3, [r7, #23]
9000e71c:	e08a      	b.n	9000e834 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
9000e71e:	687b      	ldr	r3, [r7, #4]
9000e720:	6a1b      	ldr	r3, [r3, #32]
9000e722:	330b      	adds	r3, #11
9000e724:	781b      	ldrb	r3, [r3, #0]
9000e726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000e72a:	73fb      	strb	r3, [r7, #15]
9000e72c:	687b      	ldr	r3, [r7, #4]
9000e72e:	7bfa      	ldrb	r2, [r7, #15]
9000e730:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
9000e732:	7dbb      	ldrb	r3, [r7, #22]
9000e734:	2be5      	cmp	r3, #229	@ 0xe5
9000e736:	d007      	beq.n	9000e748 <dir_find+0x8a>
9000e738:	7bfb      	ldrb	r3, [r7, #15]
9000e73a:	f003 0308 	and.w	r3, r3, #8
9000e73e:	2b00      	cmp	r3, #0
9000e740:	d009      	beq.n	9000e756 <dir_find+0x98>
9000e742:	7bfb      	ldrb	r3, [r7, #15]
9000e744:	2b0f      	cmp	r3, #15
9000e746:	d006      	beq.n	9000e756 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
9000e748:	23ff      	movs	r3, #255	@ 0xff
9000e74a:	757b      	strb	r3, [r7, #21]
9000e74c:	687b      	ldr	r3, [r7, #4]
9000e74e:	f04f 32ff 	mov.w	r2, #4294967295
9000e752:	631a      	str	r2, [r3, #48]	@ 0x30
9000e754:	e05e      	b.n	9000e814 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
9000e756:	7bfb      	ldrb	r3, [r7, #15]
9000e758:	2b0f      	cmp	r3, #15
9000e75a:	d136      	bne.n	9000e7ca <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
9000e75c:	687b      	ldr	r3, [r7, #4]
9000e75e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
9000e762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000e766:	2b00      	cmp	r3, #0
9000e768:	d154      	bne.n	9000e814 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
9000e76a:	7dbb      	ldrb	r3, [r7, #22]
9000e76c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000e770:	2b00      	cmp	r3, #0
9000e772:	d00d      	beq.n	9000e790 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
9000e774:	687b      	ldr	r3, [r7, #4]
9000e776:	6a1b      	ldr	r3, [r3, #32]
9000e778:	7b5b      	ldrb	r3, [r3, #13]
9000e77a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
9000e77c:	7dbb      	ldrb	r3, [r7, #22]
9000e77e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
9000e782:	75bb      	strb	r3, [r7, #22]
9000e784:	7dbb      	ldrb	r3, [r7, #22]
9000e786:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
9000e788:	687b      	ldr	r3, [r7, #4]
9000e78a:	695a      	ldr	r2, [r3, #20]
9000e78c:	687b      	ldr	r3, [r7, #4]
9000e78e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000e790:	7dba      	ldrb	r2, [r7, #22]
9000e792:	7d7b      	ldrb	r3, [r7, #21]
9000e794:	429a      	cmp	r2, r3
9000e796:	d115      	bne.n	9000e7c4 <dir_find+0x106>
9000e798:	687b      	ldr	r3, [r7, #4]
9000e79a:	6a1b      	ldr	r3, [r3, #32]
9000e79c:	330d      	adds	r3, #13
9000e79e:	781b      	ldrb	r3, [r3, #0]
9000e7a0:	7d3a      	ldrb	r2, [r7, #20]
9000e7a2:	429a      	cmp	r2, r3
9000e7a4:	d10e      	bne.n	9000e7c4 <dir_find+0x106>
9000e7a6:	693b      	ldr	r3, [r7, #16]
9000e7a8:	68da      	ldr	r2, [r3, #12]
9000e7aa:	687b      	ldr	r3, [r7, #4]
9000e7ac:	6a1b      	ldr	r3, [r3, #32]
9000e7ae:	4619      	mov	r1, r3
9000e7b0:	4610      	mov	r0, r2
9000e7b2:	f7ff fdfd 	bl	9000e3b0 <cmp_lfn>
9000e7b6:	4603      	mov	r3, r0
9000e7b8:	2b00      	cmp	r3, #0
9000e7ba:	d003      	beq.n	9000e7c4 <dir_find+0x106>
9000e7bc:	7d7b      	ldrb	r3, [r7, #21]
9000e7be:	3b01      	subs	r3, #1
9000e7c0:	b2db      	uxtb	r3, r3
9000e7c2:	e000      	b.n	9000e7c6 <dir_find+0x108>
9000e7c4:	23ff      	movs	r3, #255	@ 0xff
9000e7c6:	757b      	strb	r3, [r7, #21]
9000e7c8:	e024      	b.n	9000e814 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
9000e7ca:	7d7b      	ldrb	r3, [r7, #21]
9000e7cc:	2b00      	cmp	r3, #0
9000e7ce:	d109      	bne.n	9000e7e4 <dir_find+0x126>
9000e7d0:	687b      	ldr	r3, [r7, #4]
9000e7d2:	6a1b      	ldr	r3, [r3, #32]
9000e7d4:	4618      	mov	r0, r3
9000e7d6:	f7ff ff51 	bl	9000e67c <sum_sfn>
9000e7da:	4603      	mov	r3, r0
9000e7dc:	461a      	mov	r2, r3
9000e7de:	7d3b      	ldrb	r3, [r7, #20]
9000e7e0:	4293      	cmp	r3, r2
9000e7e2:	d024      	beq.n	9000e82e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
9000e7e4:	687b      	ldr	r3, [r7, #4]
9000e7e6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
9000e7ea:	f003 0301 	and.w	r3, r3, #1
9000e7ee:	2b00      	cmp	r3, #0
9000e7f0:	d10a      	bne.n	9000e808 <dir_find+0x14a>
9000e7f2:	687b      	ldr	r3, [r7, #4]
9000e7f4:	6a18      	ldr	r0, [r3, #32]
9000e7f6:	687b      	ldr	r3, [r7, #4]
9000e7f8:	3324      	adds	r3, #36	@ 0x24
9000e7fa:	220b      	movs	r2, #11
9000e7fc:	4619      	mov	r1, r3
9000e7fe:	f7fe fea0 	bl	9000d542 <mem_cmp>
9000e802:	4603      	mov	r3, r0
9000e804:	2b00      	cmp	r3, #0
9000e806:	d014      	beq.n	9000e832 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
9000e808:	23ff      	movs	r3, #255	@ 0xff
9000e80a:	757b      	strb	r3, [r7, #21]
9000e80c:	687b      	ldr	r3, [r7, #4]
9000e80e:	f04f 32ff 	mov.w	r2, #4294967295
9000e812:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
9000e814:	2100      	movs	r1, #0
9000e816:	6878      	ldr	r0, [r7, #4]
9000e818:	f7ff fc7e 	bl	9000e118 <dir_next>
9000e81c:	4603      	mov	r3, r0
9000e81e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
9000e820:	7dfb      	ldrb	r3, [r7, #23]
9000e822:	2b00      	cmp	r3, #0
9000e824:	f43f af65 	beq.w	9000e6f2 <dir_find+0x34>
9000e828:	e004      	b.n	9000e834 <dir_find+0x176>
		if (res != FR_OK) break;
9000e82a:	bf00      	nop
9000e82c:	e002      	b.n	9000e834 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
9000e82e:	bf00      	nop
9000e830:	e000      	b.n	9000e834 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
9000e832:	bf00      	nop

	return res;
9000e834:	7dfb      	ldrb	r3, [r7, #23]
}
9000e836:	4618      	mov	r0, r3
9000e838:	3718      	adds	r7, #24
9000e83a:	46bd      	mov	sp, r7
9000e83c:	bd80      	pop	{r7, pc}
	...

9000e840 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
9000e840:	b580      	push	{r7, lr}
9000e842:	b08c      	sub	sp, #48	@ 0x30
9000e844:	af00      	add	r7, sp, #0
9000e846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
9000e848:	687b      	ldr	r3, [r7, #4]
9000e84a:	681b      	ldr	r3, [r3, #0]
9000e84c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
9000e84e:	687b      	ldr	r3, [r7, #4]
9000e850:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
9000e854:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
9000e858:	2b00      	cmp	r3, #0
9000e85a:	d001      	beq.n	9000e860 <dir_register+0x20>
9000e85c:	2306      	movs	r3, #6
9000e85e:	e0e0      	b.n	9000ea22 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
9000e860:	2300      	movs	r3, #0
9000e862:	627b      	str	r3, [r7, #36]	@ 0x24
9000e864:	e002      	b.n	9000e86c <dir_register+0x2c>
9000e866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000e868:	3301      	adds	r3, #1
9000e86a:	627b      	str	r3, [r7, #36]	@ 0x24
9000e86c:	69fb      	ldr	r3, [r7, #28]
9000e86e:	68da      	ldr	r2, [r3, #12]
9000e870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000e872:	005b      	lsls	r3, r3, #1
9000e874:	4413      	add	r3, r2
9000e876:	881b      	ldrh	r3, [r3, #0]
9000e878:	2b00      	cmp	r3, #0
9000e87a:	d1f4      	bne.n	9000e866 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
9000e87c:	687b      	ldr	r3, [r7, #4]
9000e87e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
9000e882:	f107 030c 	add.w	r3, r7, #12
9000e886:	220c      	movs	r2, #12
9000e888:	4618      	mov	r0, r3
9000e88a:	f7fe fe1e 	bl	9000d4ca <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
9000e88e:	7dfb      	ldrb	r3, [r7, #23]
9000e890:	f003 0301 	and.w	r3, r3, #1
9000e894:	2b00      	cmp	r3, #0
9000e896:	d032      	beq.n	9000e8fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
9000e898:	687b      	ldr	r3, [r7, #4]
9000e89a:	2240      	movs	r2, #64	@ 0x40
9000e89c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
9000e8a0:	2301      	movs	r3, #1
9000e8a2:	62bb      	str	r3, [r7, #40]	@ 0x28
9000e8a4:	e016      	b.n	9000e8d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
9000e8a6:	687b      	ldr	r3, [r7, #4]
9000e8a8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
9000e8ac:	69fb      	ldr	r3, [r7, #28]
9000e8ae:	68da      	ldr	r2, [r3, #12]
9000e8b0:	f107 010c 	add.w	r1, r7, #12
9000e8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e8b6:	f7ff fe53 	bl	9000e560 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
9000e8ba:	6878      	ldr	r0, [r7, #4]
9000e8bc:	f7ff feff 	bl	9000e6be <dir_find>
9000e8c0:	4603      	mov	r3, r0
9000e8c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
9000e8c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e8ca:	2b00      	cmp	r3, #0
9000e8cc:	d106      	bne.n	9000e8dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
9000e8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e8d0:	3301      	adds	r3, #1
9000e8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
9000e8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e8d6:	2b63      	cmp	r3, #99	@ 0x63
9000e8d8:	d9e5      	bls.n	9000e8a6 <dir_register+0x66>
9000e8da:	e000      	b.n	9000e8de <dir_register+0x9e>
			if (res != FR_OK) break;
9000e8dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
9000e8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000e8e0:	2b64      	cmp	r3, #100	@ 0x64
9000e8e2:	d101      	bne.n	9000e8e8 <dir_register+0xa8>
9000e8e4:	2307      	movs	r3, #7
9000e8e6:	e09c      	b.n	9000ea22 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
9000e8e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e8ec:	2b04      	cmp	r3, #4
9000e8ee:	d002      	beq.n	9000e8f6 <dir_register+0xb6>
9000e8f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e8f4:	e095      	b.n	9000ea22 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
9000e8f6:	7dfa      	ldrb	r2, [r7, #23]
9000e8f8:	687b      	ldr	r3, [r7, #4]
9000e8fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
9000e8fe:	7dfb      	ldrb	r3, [r7, #23]
9000e900:	f003 0302 	and.w	r3, r3, #2
9000e904:	2b00      	cmp	r3, #0
9000e906:	d007      	beq.n	9000e918 <dir_register+0xd8>
9000e908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000e90a:	330c      	adds	r3, #12
9000e90c:	4a47      	ldr	r2, [pc, #284]	@ (9000ea2c <dir_register+0x1ec>)
9000e90e:	fba2 2303 	umull	r2, r3, r2, r3
9000e912:	089b      	lsrs	r3, r3, #2
9000e914:	3301      	adds	r3, #1
9000e916:	e000      	b.n	9000e91a <dir_register+0xda>
9000e918:	2301      	movs	r3, #1
9000e91a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
9000e91c:	6a39      	ldr	r1, [r7, #32]
9000e91e:	6878      	ldr	r0, [r7, #4]
9000e920:	f7ff fcbf 	bl	9000e2a2 <dir_alloc>
9000e924:	4603      	mov	r3, r0
9000e926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
9000e92a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e92e:	2b00      	cmp	r3, #0
9000e930:	d148      	bne.n	9000e9c4 <dir_register+0x184>
9000e932:	6a3b      	ldr	r3, [r7, #32]
9000e934:	3b01      	subs	r3, #1
9000e936:	623b      	str	r3, [r7, #32]
9000e938:	6a3b      	ldr	r3, [r7, #32]
9000e93a:	2b00      	cmp	r3, #0
9000e93c:	d042      	beq.n	9000e9c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
9000e93e:	687b      	ldr	r3, [r7, #4]
9000e940:	695a      	ldr	r2, [r3, #20]
9000e942:	6a3b      	ldr	r3, [r7, #32]
9000e944:	015b      	lsls	r3, r3, #5
9000e946:	1ad3      	subs	r3, r2, r3
9000e948:	4619      	mov	r1, r3
9000e94a:	6878      	ldr	r0, [r7, #4]
9000e94c:	f7ff fb69 	bl	9000e022 <dir_sdi>
9000e950:	4603      	mov	r3, r0
9000e952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
9000e956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e95a:	2b00      	cmp	r3, #0
9000e95c:	d132      	bne.n	9000e9c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
9000e95e:	687b      	ldr	r3, [r7, #4]
9000e960:	3324      	adds	r3, #36	@ 0x24
9000e962:	4618      	mov	r0, r3
9000e964:	f7ff fe8a 	bl	9000e67c <sum_sfn>
9000e968:	4603      	mov	r3, r0
9000e96a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
9000e96c:	687b      	ldr	r3, [r7, #4]
9000e96e:	69db      	ldr	r3, [r3, #28]
9000e970:	4619      	mov	r1, r3
9000e972:	69f8      	ldr	r0, [r7, #28]
9000e974:	f7fe ffd8 	bl	9000d928 <move_window>
9000e978:	4603      	mov	r3, r0
9000e97a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
9000e97e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e982:	2b00      	cmp	r3, #0
9000e984:	d11d      	bne.n	9000e9c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
9000e986:	69fb      	ldr	r3, [r7, #28]
9000e988:	68d8      	ldr	r0, [r3, #12]
9000e98a:	687b      	ldr	r3, [r7, #4]
9000e98c:	6a19      	ldr	r1, [r3, #32]
9000e98e:	6a3b      	ldr	r3, [r7, #32]
9000e990:	b2da      	uxtb	r2, r3
9000e992:	7efb      	ldrb	r3, [r7, #27]
9000e994:	f7ff fd7c 	bl	9000e490 <put_lfn>
				fs->wflag = 1;
9000e998:	69fb      	ldr	r3, [r7, #28]
9000e99a:	2201      	movs	r2, #1
9000e99c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
9000e99e:	2100      	movs	r1, #0
9000e9a0:	6878      	ldr	r0, [r7, #4]
9000e9a2:	f7ff fbb9 	bl	9000e118 <dir_next>
9000e9a6:	4603      	mov	r3, r0
9000e9a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
9000e9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e9b0:	2b00      	cmp	r3, #0
9000e9b2:	d107      	bne.n	9000e9c4 <dir_register+0x184>
9000e9b4:	6a3b      	ldr	r3, [r7, #32]
9000e9b6:	3b01      	subs	r3, #1
9000e9b8:	623b      	str	r3, [r7, #32]
9000e9ba:	6a3b      	ldr	r3, [r7, #32]
9000e9bc:	2b00      	cmp	r3, #0
9000e9be:	d1d5      	bne.n	9000e96c <dir_register+0x12c>
9000e9c0:	e000      	b.n	9000e9c4 <dir_register+0x184>
				if (res != FR_OK) break;
9000e9c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
9000e9c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e9c8:	2b00      	cmp	r3, #0
9000e9ca:	d128      	bne.n	9000ea1e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
9000e9cc:	687b      	ldr	r3, [r7, #4]
9000e9ce:	69db      	ldr	r3, [r3, #28]
9000e9d0:	4619      	mov	r1, r3
9000e9d2:	69f8      	ldr	r0, [r7, #28]
9000e9d4:	f7fe ffa8 	bl	9000d928 <move_window>
9000e9d8:	4603      	mov	r3, r0
9000e9da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
9000e9de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000e9e2:	2b00      	cmp	r3, #0
9000e9e4:	d11b      	bne.n	9000ea1e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
9000e9e6:	687b      	ldr	r3, [r7, #4]
9000e9e8:	6a1b      	ldr	r3, [r3, #32]
9000e9ea:	2220      	movs	r2, #32
9000e9ec:	2100      	movs	r1, #0
9000e9ee:	4618      	mov	r0, r3
9000e9f0:	f7fe fd8c 	bl	9000d50c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
9000e9f4:	687b      	ldr	r3, [r7, #4]
9000e9f6:	6a18      	ldr	r0, [r3, #32]
9000e9f8:	687b      	ldr	r3, [r7, #4]
9000e9fa:	3324      	adds	r3, #36	@ 0x24
9000e9fc:	220b      	movs	r2, #11
9000e9fe:	4619      	mov	r1, r3
9000ea00:	f7fe fd63 	bl	9000d4ca <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
9000ea04:	687b      	ldr	r3, [r7, #4]
9000ea06:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
9000ea0a:	687b      	ldr	r3, [r7, #4]
9000ea0c:	6a1b      	ldr	r3, [r3, #32]
9000ea0e:	330c      	adds	r3, #12
9000ea10:	f002 0218 	and.w	r2, r2, #24
9000ea14:	b2d2      	uxtb	r2, r2
9000ea16:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
9000ea18:	69fb      	ldr	r3, [r7, #28]
9000ea1a:	2201      	movs	r2, #1
9000ea1c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
9000ea1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
9000ea22:	4618      	mov	r0, r3
9000ea24:	3730      	adds	r7, #48	@ 0x30
9000ea26:	46bd      	mov	sp, r7
9000ea28:	bd80      	pop	{r7, pc}
9000ea2a:	bf00      	nop
9000ea2c:	4ec4ec4f 	.word	0x4ec4ec4f

9000ea30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
9000ea30:	b580      	push	{r7, lr}
9000ea32:	b08a      	sub	sp, #40	@ 0x28
9000ea34:	af00      	add	r7, sp, #0
9000ea36:	6078      	str	r0, [r7, #4]
9000ea38:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
9000ea3a:	683b      	ldr	r3, [r7, #0]
9000ea3c:	681b      	ldr	r3, [r3, #0]
9000ea3e:	613b      	str	r3, [r7, #16]
9000ea40:	687b      	ldr	r3, [r7, #4]
9000ea42:	681b      	ldr	r3, [r3, #0]
9000ea44:	68db      	ldr	r3, [r3, #12]
9000ea46:	60fb      	str	r3, [r7, #12]
9000ea48:	2300      	movs	r3, #0
9000ea4a:	617b      	str	r3, [r7, #20]
9000ea4c:	697b      	ldr	r3, [r7, #20]
9000ea4e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
9000ea50:	69bb      	ldr	r3, [r7, #24]
9000ea52:	1c5a      	adds	r2, r3, #1
9000ea54:	61ba      	str	r2, [r7, #24]
9000ea56:	693a      	ldr	r2, [r7, #16]
9000ea58:	4413      	add	r3, r2
9000ea5a:	781b      	ldrb	r3, [r3, #0]
9000ea5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
9000ea5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ea60:	2b1f      	cmp	r3, #31
9000ea62:	d940      	bls.n	9000eae6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
9000ea64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ea66:	2b2f      	cmp	r3, #47	@ 0x2f
9000ea68:	d006      	beq.n	9000ea78 <create_name+0x48>
9000ea6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ea6c:	2b5c      	cmp	r3, #92	@ 0x5c
9000ea6e:	d110      	bne.n	9000ea92 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
9000ea70:	e002      	b.n	9000ea78 <create_name+0x48>
9000ea72:	69bb      	ldr	r3, [r7, #24]
9000ea74:	3301      	adds	r3, #1
9000ea76:	61bb      	str	r3, [r7, #24]
9000ea78:	693a      	ldr	r2, [r7, #16]
9000ea7a:	69bb      	ldr	r3, [r7, #24]
9000ea7c:	4413      	add	r3, r2
9000ea7e:	781b      	ldrb	r3, [r3, #0]
9000ea80:	2b2f      	cmp	r3, #47	@ 0x2f
9000ea82:	d0f6      	beq.n	9000ea72 <create_name+0x42>
9000ea84:	693a      	ldr	r2, [r7, #16]
9000ea86:	69bb      	ldr	r3, [r7, #24]
9000ea88:	4413      	add	r3, r2
9000ea8a:	781b      	ldrb	r3, [r3, #0]
9000ea8c:	2b5c      	cmp	r3, #92	@ 0x5c
9000ea8e:	d0f0      	beq.n	9000ea72 <create_name+0x42>
			break;
9000ea90:	e02a      	b.n	9000eae8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
9000ea92:	697b      	ldr	r3, [r7, #20]
9000ea94:	2bfe      	cmp	r3, #254	@ 0xfe
9000ea96:	d901      	bls.n	9000ea9c <create_name+0x6c>
9000ea98:	2306      	movs	r3, #6
9000ea9a:	e17d      	b.n	9000ed98 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
9000ea9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ea9e:	b2db      	uxtb	r3, r3
9000eaa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
9000eaa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000eaa4:	2101      	movs	r1, #1
9000eaa6:	4618      	mov	r0, r3
9000eaa8:	f001 f9a8 	bl	9000fdfc <ff_convert>
9000eaac:	4603      	mov	r3, r0
9000eaae:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
9000eab0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000eab2:	2b00      	cmp	r3, #0
9000eab4:	d101      	bne.n	9000eaba <create_name+0x8a>
9000eab6:	2306      	movs	r3, #6
9000eab8:	e16e      	b.n	9000ed98 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
9000eaba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000eabc:	2b7f      	cmp	r3, #127	@ 0x7f
9000eabe:	d809      	bhi.n	9000ead4 <create_name+0xa4>
9000eac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000eac2:	4619      	mov	r1, r3
9000eac4:	488d      	ldr	r0, [pc, #564]	@ (9000ecfc <create_name+0x2cc>)
9000eac6:	f7fe fd63 	bl	9000d590 <chk_chr>
9000eaca:	4603      	mov	r3, r0
9000eacc:	2b00      	cmp	r3, #0
9000eace:	d001      	beq.n	9000ead4 <create_name+0xa4>
9000ead0:	2306      	movs	r3, #6
9000ead2:	e161      	b.n	9000ed98 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
9000ead4:	697b      	ldr	r3, [r7, #20]
9000ead6:	1c5a      	adds	r2, r3, #1
9000ead8:	617a      	str	r2, [r7, #20]
9000eada:	005b      	lsls	r3, r3, #1
9000eadc:	68fa      	ldr	r2, [r7, #12]
9000eade:	4413      	add	r3, r2
9000eae0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
9000eae2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
9000eae4:	e7b4      	b.n	9000ea50 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
9000eae6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
9000eae8:	693a      	ldr	r2, [r7, #16]
9000eaea:	69bb      	ldr	r3, [r7, #24]
9000eaec:	441a      	add	r2, r3
9000eaee:	683b      	ldr	r3, [r7, #0]
9000eaf0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
9000eaf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000eaf4:	2b1f      	cmp	r3, #31
9000eaf6:	d801      	bhi.n	9000eafc <create_name+0xcc>
9000eaf8:	2304      	movs	r3, #4
9000eafa:	e000      	b.n	9000eafe <create_name+0xce>
9000eafc:	2300      	movs	r3, #0
9000eafe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
9000eb02:	e011      	b.n	9000eb28 <create_name+0xf8>
		w = lfn[di - 1];
9000eb04:	697a      	ldr	r2, [r7, #20]
9000eb06:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
9000eb0a:	4413      	add	r3, r2
9000eb0c:	005b      	lsls	r3, r3, #1
9000eb0e:	68fa      	ldr	r2, [r7, #12]
9000eb10:	4413      	add	r3, r2
9000eb12:	881b      	ldrh	r3, [r3, #0]
9000eb14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
9000eb16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000eb18:	2b20      	cmp	r3, #32
9000eb1a:	d002      	beq.n	9000eb22 <create_name+0xf2>
9000eb1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000eb1e:	2b2e      	cmp	r3, #46	@ 0x2e
9000eb20:	d106      	bne.n	9000eb30 <create_name+0x100>
		di--;
9000eb22:	697b      	ldr	r3, [r7, #20]
9000eb24:	3b01      	subs	r3, #1
9000eb26:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
9000eb28:	697b      	ldr	r3, [r7, #20]
9000eb2a:	2b00      	cmp	r3, #0
9000eb2c:	d1ea      	bne.n	9000eb04 <create_name+0xd4>
9000eb2e:	e000      	b.n	9000eb32 <create_name+0x102>
		if (w != ' ' && w != '.') break;
9000eb30:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
9000eb32:	697b      	ldr	r3, [r7, #20]
9000eb34:	005b      	lsls	r3, r3, #1
9000eb36:	68fa      	ldr	r2, [r7, #12]
9000eb38:	4413      	add	r3, r2
9000eb3a:	2200      	movs	r2, #0
9000eb3c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
9000eb3e:	697b      	ldr	r3, [r7, #20]
9000eb40:	2b00      	cmp	r3, #0
9000eb42:	d101      	bne.n	9000eb48 <create_name+0x118>
9000eb44:	2306      	movs	r3, #6
9000eb46:	e127      	b.n	9000ed98 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
9000eb48:	687b      	ldr	r3, [r7, #4]
9000eb4a:	3324      	adds	r3, #36	@ 0x24
9000eb4c:	220b      	movs	r2, #11
9000eb4e:	2120      	movs	r1, #32
9000eb50:	4618      	mov	r0, r3
9000eb52:	f7fe fcdb 	bl	9000d50c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
9000eb56:	2300      	movs	r3, #0
9000eb58:	61bb      	str	r3, [r7, #24]
9000eb5a:	e002      	b.n	9000eb62 <create_name+0x132>
9000eb5c:	69bb      	ldr	r3, [r7, #24]
9000eb5e:	3301      	adds	r3, #1
9000eb60:	61bb      	str	r3, [r7, #24]
9000eb62:	69bb      	ldr	r3, [r7, #24]
9000eb64:	005b      	lsls	r3, r3, #1
9000eb66:	68fa      	ldr	r2, [r7, #12]
9000eb68:	4413      	add	r3, r2
9000eb6a:	881b      	ldrh	r3, [r3, #0]
9000eb6c:	2b20      	cmp	r3, #32
9000eb6e:	d0f5      	beq.n	9000eb5c <create_name+0x12c>
9000eb70:	69bb      	ldr	r3, [r7, #24]
9000eb72:	005b      	lsls	r3, r3, #1
9000eb74:	68fa      	ldr	r2, [r7, #12]
9000eb76:	4413      	add	r3, r2
9000eb78:	881b      	ldrh	r3, [r3, #0]
9000eb7a:	2b2e      	cmp	r3, #46	@ 0x2e
9000eb7c:	d0ee      	beq.n	9000eb5c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
9000eb7e:	69bb      	ldr	r3, [r7, #24]
9000eb80:	2b00      	cmp	r3, #0
9000eb82:	d009      	beq.n	9000eb98 <create_name+0x168>
9000eb84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000eb88:	f043 0303 	orr.w	r3, r3, #3
9000eb8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
9000eb90:	e002      	b.n	9000eb98 <create_name+0x168>
9000eb92:	697b      	ldr	r3, [r7, #20]
9000eb94:	3b01      	subs	r3, #1
9000eb96:	617b      	str	r3, [r7, #20]
9000eb98:	697b      	ldr	r3, [r7, #20]
9000eb9a:	2b00      	cmp	r3, #0
9000eb9c:	d009      	beq.n	9000ebb2 <create_name+0x182>
9000eb9e:	697a      	ldr	r2, [r7, #20]
9000eba0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
9000eba4:	4413      	add	r3, r2
9000eba6:	005b      	lsls	r3, r3, #1
9000eba8:	68fa      	ldr	r2, [r7, #12]
9000ebaa:	4413      	add	r3, r2
9000ebac:	881b      	ldrh	r3, [r3, #0]
9000ebae:	2b2e      	cmp	r3, #46	@ 0x2e
9000ebb0:	d1ef      	bne.n	9000eb92 <create_name+0x162>

	i = b = 0; ni = 8;
9000ebb2:	2300      	movs	r3, #0
9000ebb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
9000ebb8:	2300      	movs	r3, #0
9000ebba:	623b      	str	r3, [r7, #32]
9000ebbc:	2308      	movs	r3, #8
9000ebbe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
9000ebc0:	69bb      	ldr	r3, [r7, #24]
9000ebc2:	1c5a      	adds	r2, r3, #1
9000ebc4:	61ba      	str	r2, [r7, #24]
9000ebc6:	005b      	lsls	r3, r3, #1
9000ebc8:	68fa      	ldr	r2, [r7, #12]
9000ebca:	4413      	add	r3, r2
9000ebcc:	881b      	ldrh	r3, [r3, #0]
9000ebce:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
9000ebd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ebd2:	2b00      	cmp	r3, #0
9000ebd4:	f000 8090 	beq.w	9000ecf8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
9000ebd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ebda:	2b20      	cmp	r3, #32
9000ebdc:	d006      	beq.n	9000ebec <create_name+0x1bc>
9000ebde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ebe0:	2b2e      	cmp	r3, #46	@ 0x2e
9000ebe2:	d10a      	bne.n	9000ebfa <create_name+0x1ca>
9000ebe4:	69ba      	ldr	r2, [r7, #24]
9000ebe6:	697b      	ldr	r3, [r7, #20]
9000ebe8:	429a      	cmp	r2, r3
9000ebea:	d006      	beq.n	9000ebfa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
9000ebec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000ebf0:	f043 0303 	orr.w	r3, r3, #3
9000ebf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
9000ebf8:	e07d      	b.n	9000ecf6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
9000ebfa:	6a3a      	ldr	r2, [r7, #32]
9000ebfc:	69fb      	ldr	r3, [r7, #28]
9000ebfe:	429a      	cmp	r2, r3
9000ec00:	d203      	bcs.n	9000ec0a <create_name+0x1da>
9000ec02:	69ba      	ldr	r2, [r7, #24]
9000ec04:	697b      	ldr	r3, [r7, #20]
9000ec06:	429a      	cmp	r2, r3
9000ec08:	d123      	bne.n	9000ec52 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
9000ec0a:	69fb      	ldr	r3, [r7, #28]
9000ec0c:	2b0b      	cmp	r3, #11
9000ec0e:	d106      	bne.n	9000ec1e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
9000ec10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000ec14:	f043 0303 	orr.w	r3, r3, #3
9000ec18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
9000ec1c:	e075      	b.n	9000ed0a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
9000ec1e:	69ba      	ldr	r2, [r7, #24]
9000ec20:	697b      	ldr	r3, [r7, #20]
9000ec22:	429a      	cmp	r2, r3
9000ec24:	d005      	beq.n	9000ec32 <create_name+0x202>
9000ec26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000ec2a:	f043 0303 	orr.w	r3, r3, #3
9000ec2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
9000ec32:	69ba      	ldr	r2, [r7, #24]
9000ec34:	697b      	ldr	r3, [r7, #20]
9000ec36:	429a      	cmp	r2, r3
9000ec38:	d866      	bhi.n	9000ed08 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
9000ec3a:	697b      	ldr	r3, [r7, #20]
9000ec3c:	61bb      	str	r3, [r7, #24]
9000ec3e:	2308      	movs	r3, #8
9000ec40:	623b      	str	r3, [r7, #32]
9000ec42:	230b      	movs	r3, #11
9000ec44:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
9000ec46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000ec4a:	009b      	lsls	r3, r3, #2
9000ec4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
9000ec50:	e051      	b.n	9000ecf6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
9000ec52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ec54:	2b7f      	cmp	r3, #127	@ 0x7f
9000ec56:	d914      	bls.n	9000ec82 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
9000ec58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ec5a:	2100      	movs	r1, #0
9000ec5c:	4618      	mov	r0, r3
9000ec5e:	f001 f8cd 	bl	9000fdfc <ff_convert>
9000ec62:	4603      	mov	r3, r0
9000ec64:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
9000ec66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ec68:	2b00      	cmp	r3, #0
9000ec6a:	d004      	beq.n	9000ec76 <create_name+0x246>
9000ec6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ec6e:	3b80      	subs	r3, #128	@ 0x80
9000ec70:	4a23      	ldr	r2, [pc, #140]	@ (9000ed00 <create_name+0x2d0>)
9000ec72:	5cd3      	ldrb	r3, [r2, r3]
9000ec74:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
9000ec76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000ec7a:	f043 0302 	orr.w	r3, r3, #2
9000ec7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
9000ec82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ec84:	2b00      	cmp	r3, #0
9000ec86:	d007      	beq.n	9000ec98 <create_name+0x268>
9000ec88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ec8a:	4619      	mov	r1, r3
9000ec8c:	481d      	ldr	r0, [pc, #116]	@ (9000ed04 <create_name+0x2d4>)
9000ec8e:	f7fe fc7f 	bl	9000d590 <chk_chr>
9000ec92:	4603      	mov	r3, r0
9000ec94:	2b00      	cmp	r3, #0
9000ec96:	d008      	beq.n	9000ecaa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
9000ec98:	235f      	movs	r3, #95	@ 0x5f
9000ec9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
9000ec9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000eca0:	f043 0303 	orr.w	r3, r3, #3
9000eca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
9000eca8:	e01b      	b.n	9000ece2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
9000ecaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ecac:	2b40      	cmp	r3, #64	@ 0x40
9000ecae:	d909      	bls.n	9000ecc4 <create_name+0x294>
9000ecb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ecb2:	2b5a      	cmp	r3, #90	@ 0x5a
9000ecb4:	d806      	bhi.n	9000ecc4 <create_name+0x294>
					b |= 2;
9000ecb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000ecba:	f043 0302 	orr.w	r3, r3, #2
9000ecbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
9000ecc2:	e00e      	b.n	9000ece2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
9000ecc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ecc6:	2b60      	cmp	r3, #96	@ 0x60
9000ecc8:	d90b      	bls.n	9000ece2 <create_name+0x2b2>
9000ecca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000eccc:	2b7a      	cmp	r3, #122	@ 0x7a
9000ecce:	d808      	bhi.n	9000ece2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
9000ecd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000ecd4:	f043 0301 	orr.w	r3, r3, #1
9000ecd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
9000ecdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
9000ecde:	3b20      	subs	r3, #32
9000ece0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
9000ece2:	6a3b      	ldr	r3, [r7, #32]
9000ece4:	1c5a      	adds	r2, r3, #1
9000ece6:	623a      	str	r2, [r7, #32]
9000ece8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
9000ecea:	b2d1      	uxtb	r1, r2
9000ecec:	687a      	ldr	r2, [r7, #4]
9000ecee:	4413      	add	r3, r2
9000ecf0:	460a      	mov	r2, r1
9000ecf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
9000ecf6:	e763      	b.n	9000ebc0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
9000ecf8:	bf00      	nop
9000ecfa:	e006      	b.n	9000ed0a <create_name+0x2da>
9000ecfc:	9001403c 	.word	0x9001403c
9000ed00:	9001419c 	.word	0x9001419c
9000ed04:	90014048 	.word	0x90014048
			if (si > di) break;			/* No extension */
9000ed08:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
9000ed0a:	687b      	ldr	r3, [r7, #4]
9000ed0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
9000ed10:	2be5      	cmp	r3, #229	@ 0xe5
9000ed12:	d103      	bne.n	9000ed1c <create_name+0x2ec>
9000ed14:	687b      	ldr	r3, [r7, #4]
9000ed16:	2205      	movs	r2, #5
9000ed18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
9000ed1c:	69fb      	ldr	r3, [r7, #28]
9000ed1e:	2b08      	cmp	r3, #8
9000ed20:	d104      	bne.n	9000ed2c <create_name+0x2fc>
9000ed22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000ed26:	009b      	lsls	r3, r3, #2
9000ed28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
9000ed2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000ed30:	f003 030c 	and.w	r3, r3, #12
9000ed34:	2b0c      	cmp	r3, #12
9000ed36:	d005      	beq.n	9000ed44 <create_name+0x314>
9000ed38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000ed3c:	f003 0303 	and.w	r3, r3, #3
9000ed40:	2b03      	cmp	r3, #3
9000ed42:	d105      	bne.n	9000ed50 <create_name+0x320>
9000ed44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000ed48:	f043 0302 	orr.w	r3, r3, #2
9000ed4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
9000ed50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000ed54:	f003 0302 	and.w	r3, r3, #2
9000ed58:	2b00      	cmp	r3, #0
9000ed5a:	d117      	bne.n	9000ed8c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
9000ed5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000ed60:	f003 0303 	and.w	r3, r3, #3
9000ed64:	2b01      	cmp	r3, #1
9000ed66:	d105      	bne.n	9000ed74 <create_name+0x344>
9000ed68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000ed6c:	f043 0310 	orr.w	r3, r3, #16
9000ed70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
9000ed74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9000ed78:	f003 030c 	and.w	r3, r3, #12
9000ed7c:	2b04      	cmp	r3, #4
9000ed7e:	d105      	bne.n	9000ed8c <create_name+0x35c>
9000ed80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000ed84:	f043 0308 	orr.w	r3, r3, #8
9000ed88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
9000ed8c:	687b      	ldr	r3, [r7, #4]
9000ed8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
9000ed92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
9000ed96:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
9000ed98:	4618      	mov	r0, r3
9000ed9a:	3728      	adds	r7, #40	@ 0x28
9000ed9c:	46bd      	mov	sp, r7
9000ed9e:	bd80      	pop	{r7, pc}

9000eda0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
9000eda0:	b580      	push	{r7, lr}
9000eda2:	b086      	sub	sp, #24
9000eda4:	af00      	add	r7, sp, #0
9000eda6:	6078      	str	r0, [r7, #4]
9000eda8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
9000edaa:	687b      	ldr	r3, [r7, #4]
9000edac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
9000edae:	693b      	ldr	r3, [r7, #16]
9000edb0:	681b      	ldr	r3, [r3, #0]
9000edb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
9000edb4:	e002      	b.n	9000edbc <follow_path+0x1c>
9000edb6:	683b      	ldr	r3, [r7, #0]
9000edb8:	3301      	adds	r3, #1
9000edba:	603b      	str	r3, [r7, #0]
9000edbc:	683b      	ldr	r3, [r7, #0]
9000edbe:	781b      	ldrb	r3, [r3, #0]
9000edc0:	2b2f      	cmp	r3, #47	@ 0x2f
9000edc2:	d0f8      	beq.n	9000edb6 <follow_path+0x16>
9000edc4:	683b      	ldr	r3, [r7, #0]
9000edc6:	781b      	ldrb	r3, [r3, #0]
9000edc8:	2b5c      	cmp	r3, #92	@ 0x5c
9000edca:	d0f4      	beq.n	9000edb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
9000edcc:	693b      	ldr	r3, [r7, #16]
9000edce:	2200      	movs	r2, #0
9000edd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
9000edd2:	683b      	ldr	r3, [r7, #0]
9000edd4:	781b      	ldrb	r3, [r3, #0]
9000edd6:	2b1f      	cmp	r3, #31
9000edd8:	d80a      	bhi.n	9000edf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
9000edda:	687b      	ldr	r3, [r7, #4]
9000eddc:	2280      	movs	r2, #128	@ 0x80
9000edde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
9000ede2:	2100      	movs	r1, #0
9000ede4:	6878      	ldr	r0, [r7, #4]
9000ede6:	f7ff f91c 	bl	9000e022 <dir_sdi>
9000edea:	4603      	mov	r3, r0
9000edec:	75fb      	strb	r3, [r7, #23]
9000edee:	e043      	b.n	9000ee78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
9000edf0:	463b      	mov	r3, r7
9000edf2:	4619      	mov	r1, r3
9000edf4:	6878      	ldr	r0, [r7, #4]
9000edf6:	f7ff fe1b 	bl	9000ea30 <create_name>
9000edfa:	4603      	mov	r3, r0
9000edfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
9000edfe:	7dfb      	ldrb	r3, [r7, #23]
9000ee00:	2b00      	cmp	r3, #0
9000ee02:	d134      	bne.n	9000ee6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
9000ee04:	6878      	ldr	r0, [r7, #4]
9000ee06:	f7ff fc5a 	bl	9000e6be <dir_find>
9000ee0a:	4603      	mov	r3, r0
9000ee0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
9000ee0e:	687b      	ldr	r3, [r7, #4]
9000ee10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
9000ee14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
9000ee16:	7dfb      	ldrb	r3, [r7, #23]
9000ee18:	2b00      	cmp	r3, #0
9000ee1a:	d00a      	beq.n	9000ee32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
9000ee1c:	7dfb      	ldrb	r3, [r7, #23]
9000ee1e:	2b04      	cmp	r3, #4
9000ee20:	d127      	bne.n	9000ee72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
9000ee22:	7afb      	ldrb	r3, [r7, #11]
9000ee24:	f003 0304 	and.w	r3, r3, #4
9000ee28:	2b00      	cmp	r3, #0
9000ee2a:	d122      	bne.n	9000ee72 <follow_path+0xd2>
9000ee2c:	2305      	movs	r3, #5
9000ee2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
9000ee30:	e01f      	b.n	9000ee72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
9000ee32:	7afb      	ldrb	r3, [r7, #11]
9000ee34:	f003 0304 	and.w	r3, r3, #4
9000ee38:	2b00      	cmp	r3, #0
9000ee3a:	d11c      	bne.n	9000ee76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
9000ee3c:	693b      	ldr	r3, [r7, #16]
9000ee3e:	799b      	ldrb	r3, [r3, #6]
9000ee40:	f003 0310 	and.w	r3, r3, #16
9000ee44:	2b00      	cmp	r3, #0
9000ee46:	d102      	bne.n	9000ee4e <follow_path+0xae>
				res = FR_NO_PATH; break;
9000ee48:	2305      	movs	r3, #5
9000ee4a:	75fb      	strb	r3, [r7, #23]
9000ee4c:	e014      	b.n	9000ee78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
9000ee4e:	68fb      	ldr	r3, [r7, #12]
9000ee50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000ee54:	687b      	ldr	r3, [r7, #4]
9000ee56:	695b      	ldr	r3, [r3, #20]
9000ee58:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000ee5c:	4413      	add	r3, r2
9000ee5e:	4619      	mov	r1, r3
9000ee60:	68f8      	ldr	r0, [r7, #12]
9000ee62:	f7ff fa65 	bl	9000e330 <ld_clust>
9000ee66:	4602      	mov	r2, r0
9000ee68:	693b      	ldr	r3, [r7, #16]
9000ee6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
9000ee6c:	e7c0      	b.n	9000edf0 <follow_path+0x50>
			if (res != FR_OK) break;
9000ee6e:	bf00      	nop
9000ee70:	e002      	b.n	9000ee78 <follow_path+0xd8>
				break;
9000ee72:	bf00      	nop
9000ee74:	e000      	b.n	9000ee78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
9000ee76:	bf00      	nop
			}
		}
	}

	return res;
9000ee78:	7dfb      	ldrb	r3, [r7, #23]
}
9000ee7a:	4618      	mov	r0, r3
9000ee7c:	3718      	adds	r7, #24
9000ee7e:	46bd      	mov	sp, r7
9000ee80:	bd80      	pop	{r7, pc}

9000ee82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
9000ee82:	b480      	push	{r7}
9000ee84:	b087      	sub	sp, #28
9000ee86:	af00      	add	r7, sp, #0
9000ee88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
9000ee8a:	f04f 33ff 	mov.w	r3, #4294967295
9000ee8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
9000ee90:	687b      	ldr	r3, [r7, #4]
9000ee92:	681b      	ldr	r3, [r3, #0]
9000ee94:	2b00      	cmp	r3, #0
9000ee96:	d031      	beq.n	9000eefc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
9000ee98:	687b      	ldr	r3, [r7, #4]
9000ee9a:	681b      	ldr	r3, [r3, #0]
9000ee9c:	617b      	str	r3, [r7, #20]
9000ee9e:	e002      	b.n	9000eea6 <get_ldnumber+0x24>
9000eea0:	697b      	ldr	r3, [r7, #20]
9000eea2:	3301      	adds	r3, #1
9000eea4:	617b      	str	r3, [r7, #20]
9000eea6:	697b      	ldr	r3, [r7, #20]
9000eea8:	781b      	ldrb	r3, [r3, #0]
9000eeaa:	2b1f      	cmp	r3, #31
9000eeac:	d903      	bls.n	9000eeb6 <get_ldnumber+0x34>
9000eeae:	697b      	ldr	r3, [r7, #20]
9000eeb0:	781b      	ldrb	r3, [r3, #0]
9000eeb2:	2b3a      	cmp	r3, #58	@ 0x3a
9000eeb4:	d1f4      	bne.n	9000eea0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
9000eeb6:	697b      	ldr	r3, [r7, #20]
9000eeb8:	781b      	ldrb	r3, [r3, #0]
9000eeba:	2b3a      	cmp	r3, #58	@ 0x3a
9000eebc:	d11c      	bne.n	9000eef8 <get_ldnumber+0x76>
			tp = *path;
9000eebe:	687b      	ldr	r3, [r7, #4]
9000eec0:	681b      	ldr	r3, [r3, #0]
9000eec2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
9000eec4:	68fb      	ldr	r3, [r7, #12]
9000eec6:	1c5a      	adds	r2, r3, #1
9000eec8:	60fa      	str	r2, [r7, #12]
9000eeca:	781b      	ldrb	r3, [r3, #0]
9000eecc:	3b30      	subs	r3, #48	@ 0x30
9000eece:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
9000eed0:	68bb      	ldr	r3, [r7, #8]
9000eed2:	2b09      	cmp	r3, #9
9000eed4:	d80e      	bhi.n	9000eef4 <get_ldnumber+0x72>
9000eed6:	68fa      	ldr	r2, [r7, #12]
9000eed8:	697b      	ldr	r3, [r7, #20]
9000eeda:	429a      	cmp	r2, r3
9000eedc:	d10a      	bne.n	9000eef4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
9000eede:	68bb      	ldr	r3, [r7, #8]
9000eee0:	2b00      	cmp	r3, #0
9000eee2:	d107      	bne.n	9000eef4 <get_ldnumber+0x72>
					vol = (int)i;
9000eee4:	68bb      	ldr	r3, [r7, #8]
9000eee6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
9000eee8:	697b      	ldr	r3, [r7, #20]
9000eeea:	3301      	adds	r3, #1
9000eeec:	617b      	str	r3, [r7, #20]
9000eeee:	687b      	ldr	r3, [r7, #4]
9000eef0:	697a      	ldr	r2, [r7, #20]
9000eef2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
9000eef4:	693b      	ldr	r3, [r7, #16]
9000eef6:	e002      	b.n	9000eefe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
9000eef8:	2300      	movs	r3, #0
9000eefa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
9000eefc:	693b      	ldr	r3, [r7, #16]
}
9000eefe:	4618      	mov	r0, r3
9000ef00:	371c      	adds	r7, #28
9000ef02:	46bd      	mov	sp, r7
9000ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ef08:	4770      	bx	lr
	...

9000ef0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
9000ef0c:	b580      	push	{r7, lr}
9000ef0e:	b082      	sub	sp, #8
9000ef10:	af00      	add	r7, sp, #0
9000ef12:	6078      	str	r0, [r7, #4]
9000ef14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
9000ef16:	687b      	ldr	r3, [r7, #4]
9000ef18:	2200      	movs	r2, #0
9000ef1a:	70da      	strb	r2, [r3, #3]
9000ef1c:	687b      	ldr	r3, [r7, #4]
9000ef1e:	f04f 32ff 	mov.w	r2, #4294967295
9000ef22:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
9000ef24:	6839      	ldr	r1, [r7, #0]
9000ef26:	6878      	ldr	r0, [r7, #4]
9000ef28:	f7fe fcfe 	bl	9000d928 <move_window>
9000ef2c:	4603      	mov	r3, r0
9000ef2e:	2b00      	cmp	r3, #0
9000ef30:	d001      	beq.n	9000ef36 <check_fs+0x2a>
9000ef32:	2304      	movs	r3, #4
9000ef34:	e038      	b.n	9000efa8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
9000ef36:	687b      	ldr	r3, [r7, #4]
9000ef38:	3334      	adds	r3, #52	@ 0x34
9000ef3a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
9000ef3e:	4618      	mov	r0, r3
9000ef40:	f7fe fa40 	bl	9000d3c4 <ld_word>
9000ef44:	4603      	mov	r3, r0
9000ef46:	461a      	mov	r2, r3
9000ef48:	f64a 2355 	movw	r3, #43605	@ 0xaa55
9000ef4c:	429a      	cmp	r2, r3
9000ef4e:	d001      	beq.n	9000ef54 <check_fs+0x48>
9000ef50:	2303      	movs	r3, #3
9000ef52:	e029      	b.n	9000efa8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
9000ef54:	687b      	ldr	r3, [r7, #4]
9000ef56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
9000ef5a:	2be9      	cmp	r3, #233	@ 0xe9
9000ef5c:	d009      	beq.n	9000ef72 <check_fs+0x66>
9000ef5e:	687b      	ldr	r3, [r7, #4]
9000ef60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
9000ef64:	2beb      	cmp	r3, #235	@ 0xeb
9000ef66:	d11e      	bne.n	9000efa6 <check_fs+0x9a>
9000ef68:	687b      	ldr	r3, [r7, #4]
9000ef6a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
9000ef6e:	2b90      	cmp	r3, #144	@ 0x90
9000ef70:	d119      	bne.n	9000efa6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
9000ef72:	687b      	ldr	r3, [r7, #4]
9000ef74:	3334      	adds	r3, #52	@ 0x34
9000ef76:	3336      	adds	r3, #54	@ 0x36
9000ef78:	4618      	mov	r0, r3
9000ef7a:	f7fe fa3c 	bl	9000d3f6 <ld_dword>
9000ef7e:	4603      	mov	r3, r0
9000ef80:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
9000ef84:	4a0a      	ldr	r2, [pc, #40]	@ (9000efb0 <check_fs+0xa4>)
9000ef86:	4293      	cmp	r3, r2
9000ef88:	d101      	bne.n	9000ef8e <check_fs+0x82>
9000ef8a:	2300      	movs	r3, #0
9000ef8c:	e00c      	b.n	9000efa8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
9000ef8e:	687b      	ldr	r3, [r7, #4]
9000ef90:	3334      	adds	r3, #52	@ 0x34
9000ef92:	3352      	adds	r3, #82	@ 0x52
9000ef94:	4618      	mov	r0, r3
9000ef96:	f7fe fa2e 	bl	9000d3f6 <ld_dword>
9000ef9a:	4603      	mov	r3, r0
9000ef9c:	4a05      	ldr	r2, [pc, #20]	@ (9000efb4 <check_fs+0xa8>)
9000ef9e:	4293      	cmp	r3, r2
9000efa0:	d101      	bne.n	9000efa6 <check_fs+0x9a>
9000efa2:	2300      	movs	r3, #0
9000efa4:	e000      	b.n	9000efa8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
9000efa6:	2302      	movs	r3, #2
}
9000efa8:	4618      	mov	r0, r3
9000efaa:	3708      	adds	r7, #8
9000efac:	46bd      	mov	sp, r7
9000efae:	bd80      	pop	{r7, pc}
9000efb0:	00544146 	.word	0x00544146
9000efb4:	33544146 	.word	0x33544146

9000efb8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
9000efb8:	b580      	push	{r7, lr}
9000efba:	b096      	sub	sp, #88	@ 0x58
9000efbc:	af00      	add	r7, sp, #0
9000efbe:	60f8      	str	r0, [r7, #12]
9000efc0:	60b9      	str	r1, [r7, #8]
9000efc2:	4613      	mov	r3, r2
9000efc4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
9000efc6:	68bb      	ldr	r3, [r7, #8]
9000efc8:	2200      	movs	r2, #0
9000efca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
9000efcc:	68f8      	ldr	r0, [r7, #12]
9000efce:	f7ff ff58 	bl	9000ee82 <get_ldnumber>
9000efd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
9000efd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000efd6:	2b00      	cmp	r3, #0
9000efd8:	da01      	bge.n	9000efde <find_volume+0x26>
9000efda:	230b      	movs	r3, #11
9000efdc:	e22d      	b.n	9000f43a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
9000efde:	4aa1      	ldr	r2, [pc, #644]	@ (9000f264 <find_volume+0x2ac>)
9000efe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000efe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000efe6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
9000efe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000efea:	2b00      	cmp	r3, #0
9000efec:	d101      	bne.n	9000eff2 <find_volume+0x3a>
9000efee:	230c      	movs	r3, #12
9000eff0:	e223      	b.n	9000f43a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
9000eff2:	68bb      	ldr	r3, [r7, #8]
9000eff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000eff6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
9000eff8:	79fb      	ldrb	r3, [r7, #7]
9000effa:	f023 0301 	bic.w	r3, r3, #1
9000effe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
9000f000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f002:	781b      	ldrb	r3, [r3, #0]
9000f004:	2b00      	cmp	r3, #0
9000f006:	d01a      	beq.n	9000f03e <find_volume+0x86>
		stat = disk_status(fs->drv);
9000f008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f00a:	785b      	ldrb	r3, [r3, #1]
9000f00c:	4618      	mov	r0, r3
9000f00e:	f7fe f931 	bl	9000d274 <disk_status>
9000f012:	4603      	mov	r3, r0
9000f014:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
9000f018:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
9000f01c:	f003 0301 	and.w	r3, r3, #1
9000f020:	2b00      	cmp	r3, #0
9000f022:	d10c      	bne.n	9000f03e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
9000f024:	79fb      	ldrb	r3, [r7, #7]
9000f026:	2b00      	cmp	r3, #0
9000f028:	d007      	beq.n	9000f03a <find_volume+0x82>
9000f02a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
9000f02e:	f003 0304 	and.w	r3, r3, #4
9000f032:	2b00      	cmp	r3, #0
9000f034:	d001      	beq.n	9000f03a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
9000f036:	230a      	movs	r3, #10
9000f038:	e1ff      	b.n	9000f43a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
9000f03a:	2300      	movs	r3, #0
9000f03c:	e1fd      	b.n	9000f43a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
9000f03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f040:	2200      	movs	r2, #0
9000f042:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
9000f044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000f046:	b2da      	uxtb	r2, r3
9000f048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f04a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
9000f04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f04e:	785b      	ldrb	r3, [r3, #1]
9000f050:	4618      	mov	r0, r3
9000f052:	f7fe f929 	bl	9000d2a8 <disk_initialize>
9000f056:	4603      	mov	r3, r0
9000f058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
9000f05c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
9000f060:	f003 0301 	and.w	r3, r3, #1
9000f064:	2b00      	cmp	r3, #0
9000f066:	d001      	beq.n	9000f06c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
9000f068:	2303      	movs	r3, #3
9000f06a:	e1e6      	b.n	9000f43a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
9000f06c:	79fb      	ldrb	r3, [r7, #7]
9000f06e:	2b00      	cmp	r3, #0
9000f070:	d007      	beq.n	9000f082 <find_volume+0xca>
9000f072:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
9000f076:	f003 0304 	and.w	r3, r3, #4
9000f07a:	2b00      	cmp	r3, #0
9000f07c:	d001      	beq.n	9000f082 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
9000f07e:	230a      	movs	r3, #10
9000f080:	e1db      	b.n	9000f43a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
9000f082:	2300      	movs	r3, #0
9000f084:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
9000f086:	6d39      	ldr	r1, [r7, #80]	@ 0x50
9000f088:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
9000f08a:	f7ff ff3f 	bl	9000ef0c <check_fs>
9000f08e:	4603      	mov	r3, r0
9000f090:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
9000f094:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
9000f098:	2b02      	cmp	r3, #2
9000f09a:	d149      	bne.n	9000f130 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
9000f09c:	2300      	movs	r3, #0
9000f09e:	643b      	str	r3, [r7, #64]	@ 0x40
9000f0a0:	e01e      	b.n	9000f0e0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
9000f0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f0a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
9000f0a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f0aa:	011b      	lsls	r3, r3, #4
9000f0ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
9000f0b0:	4413      	add	r3, r2
9000f0b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
9000f0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000f0b6:	3304      	adds	r3, #4
9000f0b8:	781b      	ldrb	r3, [r3, #0]
9000f0ba:	2b00      	cmp	r3, #0
9000f0bc:	d006      	beq.n	9000f0cc <find_volume+0x114>
9000f0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000f0c0:	3308      	adds	r3, #8
9000f0c2:	4618      	mov	r0, r3
9000f0c4:	f7fe f997 	bl	9000d3f6 <ld_dword>
9000f0c8:	4602      	mov	r2, r0
9000f0ca:	e000      	b.n	9000f0ce <find_volume+0x116>
9000f0cc:	2200      	movs	r2, #0
9000f0ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f0d0:	009b      	lsls	r3, r3, #2
9000f0d2:	3358      	adds	r3, #88	@ 0x58
9000f0d4:	443b      	add	r3, r7
9000f0d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
9000f0da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f0dc:	3301      	adds	r3, #1
9000f0de:	643b      	str	r3, [r7, #64]	@ 0x40
9000f0e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f0e2:	2b03      	cmp	r3, #3
9000f0e4:	d9dd      	bls.n	9000f0a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
9000f0e6:	2300      	movs	r3, #0
9000f0e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
9000f0ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f0ec:	2b00      	cmp	r3, #0
9000f0ee:	d002      	beq.n	9000f0f6 <find_volume+0x13e>
9000f0f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f0f2:	3b01      	subs	r3, #1
9000f0f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
9000f0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f0f8:	009b      	lsls	r3, r3, #2
9000f0fa:	3358      	adds	r3, #88	@ 0x58
9000f0fc:	443b      	add	r3, r7
9000f0fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
9000f102:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
9000f104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000f106:	2b00      	cmp	r3, #0
9000f108:	d005      	beq.n	9000f116 <find_volume+0x15e>
9000f10a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
9000f10c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
9000f10e:	f7ff fefd 	bl	9000ef0c <check_fs>
9000f112:	4603      	mov	r3, r0
9000f114:	e000      	b.n	9000f118 <find_volume+0x160>
9000f116:	2303      	movs	r3, #3
9000f118:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
9000f11c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
9000f120:	2b01      	cmp	r3, #1
9000f122:	d905      	bls.n	9000f130 <find_volume+0x178>
9000f124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f126:	3301      	adds	r3, #1
9000f128:	643b      	str	r3, [r7, #64]	@ 0x40
9000f12a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
9000f12c:	2b03      	cmp	r3, #3
9000f12e:	d9e2      	bls.n	9000f0f6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
9000f130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
9000f134:	2b04      	cmp	r3, #4
9000f136:	d101      	bne.n	9000f13c <find_volume+0x184>
9000f138:	2301      	movs	r3, #1
9000f13a:	e17e      	b.n	9000f43a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
9000f13c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
9000f140:	2b01      	cmp	r3, #1
9000f142:	d901      	bls.n	9000f148 <find_volume+0x190>
9000f144:	230d      	movs	r3, #13
9000f146:	e178      	b.n	9000f43a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
9000f148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f14a:	3334      	adds	r3, #52	@ 0x34
9000f14c:	330b      	adds	r3, #11
9000f14e:	4618      	mov	r0, r3
9000f150:	f7fe f938 	bl	9000d3c4 <ld_word>
9000f154:	4603      	mov	r3, r0
9000f156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000f15a:	d001      	beq.n	9000f160 <find_volume+0x1a8>
9000f15c:	230d      	movs	r3, #13
9000f15e:	e16c      	b.n	9000f43a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
9000f160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f162:	3334      	adds	r3, #52	@ 0x34
9000f164:	3316      	adds	r3, #22
9000f166:	4618      	mov	r0, r3
9000f168:	f7fe f92c 	bl	9000d3c4 <ld_word>
9000f16c:	4603      	mov	r3, r0
9000f16e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
9000f170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000f172:	2b00      	cmp	r3, #0
9000f174:	d106      	bne.n	9000f184 <find_volume+0x1cc>
9000f176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f178:	3334      	adds	r3, #52	@ 0x34
9000f17a:	3324      	adds	r3, #36	@ 0x24
9000f17c:	4618      	mov	r0, r3
9000f17e:	f7fe f93a 	bl	9000d3f6 <ld_dword>
9000f182:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
9000f184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f186:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
9000f188:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
9000f18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f18c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
9000f190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f192:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
9000f194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f196:	789b      	ldrb	r3, [r3, #2]
9000f198:	2b01      	cmp	r3, #1
9000f19a:	d005      	beq.n	9000f1a8 <find_volume+0x1f0>
9000f19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f19e:	789b      	ldrb	r3, [r3, #2]
9000f1a0:	2b02      	cmp	r3, #2
9000f1a2:	d001      	beq.n	9000f1a8 <find_volume+0x1f0>
9000f1a4:	230d      	movs	r3, #13
9000f1a6:	e148      	b.n	9000f43a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
9000f1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1aa:	789b      	ldrb	r3, [r3, #2]
9000f1ac:	461a      	mov	r2, r3
9000f1ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000f1b0:	fb02 f303 	mul.w	r3, r2, r3
9000f1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
9000f1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
9000f1bc:	461a      	mov	r2, r3
9000f1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
9000f1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1c4:	895b      	ldrh	r3, [r3, #10]
9000f1c6:	2b00      	cmp	r3, #0
9000f1c8:	d008      	beq.n	9000f1dc <find_volume+0x224>
9000f1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1cc:	895b      	ldrh	r3, [r3, #10]
9000f1ce:	461a      	mov	r2, r3
9000f1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1d2:	895b      	ldrh	r3, [r3, #10]
9000f1d4:	3b01      	subs	r3, #1
9000f1d6:	4013      	ands	r3, r2
9000f1d8:	2b00      	cmp	r3, #0
9000f1da:	d001      	beq.n	9000f1e0 <find_volume+0x228>
9000f1dc:	230d      	movs	r3, #13
9000f1de:	e12c      	b.n	9000f43a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
9000f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1e2:	3334      	adds	r3, #52	@ 0x34
9000f1e4:	3311      	adds	r3, #17
9000f1e6:	4618      	mov	r0, r3
9000f1e8:	f7fe f8ec 	bl	9000d3c4 <ld_word>
9000f1ec:	4603      	mov	r3, r0
9000f1ee:	461a      	mov	r2, r3
9000f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
9000f1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f1f6:	891b      	ldrh	r3, [r3, #8]
9000f1f8:	f003 030f 	and.w	r3, r3, #15
9000f1fc:	b29b      	uxth	r3, r3
9000f1fe:	2b00      	cmp	r3, #0
9000f200:	d001      	beq.n	9000f206 <find_volume+0x24e>
9000f202:	230d      	movs	r3, #13
9000f204:	e119      	b.n	9000f43a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
9000f206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f208:	3334      	adds	r3, #52	@ 0x34
9000f20a:	3313      	adds	r3, #19
9000f20c:	4618      	mov	r0, r3
9000f20e:	f7fe f8d9 	bl	9000d3c4 <ld_word>
9000f212:	4603      	mov	r3, r0
9000f214:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
9000f216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
9000f218:	2b00      	cmp	r3, #0
9000f21a:	d106      	bne.n	9000f22a <find_volume+0x272>
9000f21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f21e:	3334      	adds	r3, #52	@ 0x34
9000f220:	3320      	adds	r3, #32
9000f222:	4618      	mov	r0, r3
9000f224:	f7fe f8e7 	bl	9000d3f6 <ld_dword>
9000f228:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
9000f22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f22c:	3334      	adds	r3, #52	@ 0x34
9000f22e:	330e      	adds	r3, #14
9000f230:	4618      	mov	r0, r3
9000f232:	f7fe f8c7 	bl	9000d3c4 <ld_word>
9000f236:	4603      	mov	r3, r0
9000f238:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
9000f23a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
9000f23c:	2b00      	cmp	r3, #0
9000f23e:	d101      	bne.n	9000f244 <find_volume+0x28c>
9000f240:	230d      	movs	r3, #13
9000f242:	e0fa      	b.n	9000f43a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
9000f244:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
9000f246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000f248:	4413      	add	r3, r2
9000f24a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000f24c:	8912      	ldrh	r2, [r2, #8]
9000f24e:	0912      	lsrs	r2, r2, #4
9000f250:	b292      	uxth	r2, r2
9000f252:	4413      	add	r3, r2
9000f254:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
9000f256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000f258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000f25a:	429a      	cmp	r2, r3
9000f25c:	d204      	bcs.n	9000f268 <find_volume+0x2b0>
9000f25e:	230d      	movs	r3, #13
9000f260:	e0eb      	b.n	9000f43a <find_volume+0x482>
9000f262:	bf00      	nop
9000f264:	20001e88 	.word	0x20001e88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
9000f268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000f26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000f26c:	1ad3      	subs	r3, r2, r3
9000f26e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000f270:	8952      	ldrh	r2, [r2, #10]
9000f272:	fbb3 f3f2 	udiv	r3, r3, r2
9000f276:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
9000f278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000f27a:	2b00      	cmp	r3, #0
9000f27c:	d101      	bne.n	9000f282 <find_volume+0x2ca>
9000f27e:	230d      	movs	r3, #13
9000f280:	e0db      	b.n	9000f43a <find_volume+0x482>
		fmt = FS_FAT32;
9000f282:	2303      	movs	r3, #3
9000f284:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
9000f288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000f28a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
9000f28e:	4293      	cmp	r3, r2
9000f290:	d802      	bhi.n	9000f298 <find_volume+0x2e0>
9000f292:	2302      	movs	r3, #2
9000f294:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
9000f298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000f29a:	f640 72f5 	movw	r2, #4085	@ 0xff5
9000f29e:	4293      	cmp	r3, r2
9000f2a0:	d802      	bhi.n	9000f2a8 <find_volume+0x2f0>
9000f2a2:	2301      	movs	r3, #1
9000f2a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
9000f2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000f2aa:	1c9a      	adds	r2, r3, #2
9000f2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f2ae:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
9000f2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f2b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
9000f2b4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
9000f2b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
9000f2b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000f2ba:	441a      	add	r2, r3
9000f2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f2be:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
9000f2c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
9000f2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000f2c4:	441a      	add	r2, r3
9000f2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f2c8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
9000f2ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
9000f2ce:	2b03      	cmp	r3, #3
9000f2d0:	d11e      	bne.n	9000f310 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
9000f2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f2d4:	3334      	adds	r3, #52	@ 0x34
9000f2d6:	332a      	adds	r3, #42	@ 0x2a
9000f2d8:	4618      	mov	r0, r3
9000f2da:	f7fe f873 	bl	9000d3c4 <ld_word>
9000f2de:	4603      	mov	r3, r0
9000f2e0:	2b00      	cmp	r3, #0
9000f2e2:	d001      	beq.n	9000f2e8 <find_volume+0x330>
9000f2e4:	230d      	movs	r3, #13
9000f2e6:	e0a8      	b.n	9000f43a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
9000f2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f2ea:	891b      	ldrh	r3, [r3, #8]
9000f2ec:	2b00      	cmp	r3, #0
9000f2ee:	d001      	beq.n	9000f2f4 <find_volume+0x33c>
9000f2f0:	230d      	movs	r3, #13
9000f2f2:	e0a2      	b.n	9000f43a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
9000f2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f2f6:	3334      	adds	r3, #52	@ 0x34
9000f2f8:	332c      	adds	r3, #44	@ 0x2c
9000f2fa:	4618      	mov	r0, r3
9000f2fc:	f7fe f87b 	bl	9000d3f6 <ld_dword>
9000f300:	4602      	mov	r2, r0
9000f302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f304:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
9000f306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f308:	699b      	ldr	r3, [r3, #24]
9000f30a:	009b      	lsls	r3, r3, #2
9000f30c:	647b      	str	r3, [r7, #68]	@ 0x44
9000f30e:	e01f      	b.n	9000f350 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
9000f310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f312:	891b      	ldrh	r3, [r3, #8]
9000f314:	2b00      	cmp	r3, #0
9000f316:	d101      	bne.n	9000f31c <find_volume+0x364>
9000f318:	230d      	movs	r3, #13
9000f31a:	e08e      	b.n	9000f43a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
9000f31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f31e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000f320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000f322:	441a      	add	r2, r3
9000f324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f326:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
9000f328:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
9000f32c:	2b02      	cmp	r3, #2
9000f32e:	d103      	bne.n	9000f338 <find_volume+0x380>
9000f330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f332:	699b      	ldr	r3, [r3, #24]
9000f334:	005b      	lsls	r3, r3, #1
9000f336:	e00a      	b.n	9000f34e <find_volume+0x396>
9000f338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f33a:	699a      	ldr	r2, [r3, #24]
9000f33c:	4613      	mov	r3, r2
9000f33e:	005b      	lsls	r3, r3, #1
9000f340:	4413      	add	r3, r2
9000f342:	085a      	lsrs	r2, r3, #1
9000f344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f346:	699b      	ldr	r3, [r3, #24]
9000f348:	f003 0301 	and.w	r3, r3, #1
9000f34c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
9000f34e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
9000f350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f352:	69da      	ldr	r2, [r3, #28]
9000f354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000f356:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
9000f35a:	0a5b      	lsrs	r3, r3, #9
9000f35c:	429a      	cmp	r2, r3
9000f35e:	d201      	bcs.n	9000f364 <find_volume+0x3ac>
9000f360:	230d      	movs	r3, #13
9000f362:	e06a      	b.n	9000f43a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
9000f364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f366:	f04f 32ff 	mov.w	r2, #4294967295
9000f36a:	615a      	str	r2, [r3, #20]
9000f36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f36e:	695a      	ldr	r2, [r3, #20]
9000f370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f372:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
9000f374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f376:	2280      	movs	r2, #128	@ 0x80
9000f378:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
9000f37a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
9000f37e:	2b03      	cmp	r3, #3
9000f380:	d149      	bne.n	9000f416 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
9000f382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f384:	3334      	adds	r3, #52	@ 0x34
9000f386:	3330      	adds	r3, #48	@ 0x30
9000f388:	4618      	mov	r0, r3
9000f38a:	f7fe f81b 	bl	9000d3c4 <ld_word>
9000f38e:	4603      	mov	r3, r0
9000f390:	2b01      	cmp	r3, #1
9000f392:	d140      	bne.n	9000f416 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
9000f394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000f396:	3301      	adds	r3, #1
9000f398:	4619      	mov	r1, r3
9000f39a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
9000f39c:	f7fe fac4 	bl	9000d928 <move_window>
9000f3a0:	4603      	mov	r3, r0
9000f3a2:	2b00      	cmp	r3, #0
9000f3a4:	d137      	bne.n	9000f416 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
9000f3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f3a8:	2200      	movs	r2, #0
9000f3aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
9000f3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f3ae:	3334      	adds	r3, #52	@ 0x34
9000f3b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
9000f3b4:	4618      	mov	r0, r3
9000f3b6:	f7fe f805 	bl	9000d3c4 <ld_word>
9000f3ba:	4603      	mov	r3, r0
9000f3bc:	461a      	mov	r2, r3
9000f3be:	f64a 2355 	movw	r3, #43605	@ 0xaa55
9000f3c2:	429a      	cmp	r2, r3
9000f3c4:	d127      	bne.n	9000f416 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
9000f3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f3c8:	3334      	adds	r3, #52	@ 0x34
9000f3ca:	4618      	mov	r0, r3
9000f3cc:	f7fe f813 	bl	9000d3f6 <ld_dword>
9000f3d0:	4603      	mov	r3, r0
9000f3d2:	4a1c      	ldr	r2, [pc, #112]	@ (9000f444 <find_volume+0x48c>)
9000f3d4:	4293      	cmp	r3, r2
9000f3d6:	d11e      	bne.n	9000f416 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
9000f3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f3da:	3334      	adds	r3, #52	@ 0x34
9000f3dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
9000f3e0:	4618      	mov	r0, r3
9000f3e2:	f7fe f808 	bl	9000d3f6 <ld_dword>
9000f3e6:	4603      	mov	r3, r0
9000f3e8:	4a17      	ldr	r2, [pc, #92]	@ (9000f448 <find_volume+0x490>)
9000f3ea:	4293      	cmp	r3, r2
9000f3ec:	d113      	bne.n	9000f416 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
9000f3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f3f0:	3334      	adds	r3, #52	@ 0x34
9000f3f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
9000f3f6:	4618      	mov	r0, r3
9000f3f8:	f7fd fffd 	bl	9000d3f6 <ld_dword>
9000f3fc:	4602      	mov	r2, r0
9000f3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f400:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
9000f402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f404:	3334      	adds	r3, #52	@ 0x34
9000f406:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
9000f40a:	4618      	mov	r0, r3
9000f40c:	f7fd fff3 	bl	9000d3f6 <ld_dword>
9000f410:	4602      	mov	r2, r0
9000f412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f414:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
9000f416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f418:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
9000f41c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
9000f41e:	4b0b      	ldr	r3, [pc, #44]	@ (9000f44c <find_volume+0x494>)
9000f420:	881b      	ldrh	r3, [r3, #0]
9000f422:	3301      	adds	r3, #1
9000f424:	b29a      	uxth	r2, r3
9000f426:	4b09      	ldr	r3, [pc, #36]	@ (9000f44c <find_volume+0x494>)
9000f428:	801a      	strh	r2, [r3, #0]
9000f42a:	4b08      	ldr	r3, [pc, #32]	@ (9000f44c <find_volume+0x494>)
9000f42c:	881a      	ldrh	r2, [r3, #0]
9000f42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000f430:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
9000f432:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
9000f434:	f7fe fa10 	bl	9000d858 <clear_lock>
#endif
	return FR_OK;
9000f438:	2300      	movs	r3, #0
}
9000f43a:	4618      	mov	r0, r3
9000f43c:	3758      	adds	r7, #88	@ 0x58
9000f43e:	46bd      	mov	sp, r7
9000f440:	bd80      	pop	{r7, pc}
9000f442:	bf00      	nop
9000f444:	41615252 	.word	0x41615252
9000f448:	61417272 	.word	0x61417272
9000f44c:	20001e8c 	.word	0x20001e8c

9000f450 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
9000f450:	b580      	push	{r7, lr}
9000f452:	b084      	sub	sp, #16
9000f454:	af00      	add	r7, sp, #0
9000f456:	6078      	str	r0, [r7, #4]
9000f458:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
9000f45a:	2309      	movs	r3, #9
9000f45c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
9000f45e:	687b      	ldr	r3, [r7, #4]
9000f460:	2b00      	cmp	r3, #0
9000f462:	d01c      	beq.n	9000f49e <validate+0x4e>
9000f464:	687b      	ldr	r3, [r7, #4]
9000f466:	681b      	ldr	r3, [r3, #0]
9000f468:	2b00      	cmp	r3, #0
9000f46a:	d018      	beq.n	9000f49e <validate+0x4e>
9000f46c:	687b      	ldr	r3, [r7, #4]
9000f46e:	681b      	ldr	r3, [r3, #0]
9000f470:	781b      	ldrb	r3, [r3, #0]
9000f472:	2b00      	cmp	r3, #0
9000f474:	d013      	beq.n	9000f49e <validate+0x4e>
9000f476:	687b      	ldr	r3, [r7, #4]
9000f478:	889a      	ldrh	r2, [r3, #4]
9000f47a:	687b      	ldr	r3, [r7, #4]
9000f47c:	681b      	ldr	r3, [r3, #0]
9000f47e:	88db      	ldrh	r3, [r3, #6]
9000f480:	429a      	cmp	r2, r3
9000f482:	d10c      	bne.n	9000f49e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
9000f484:	687b      	ldr	r3, [r7, #4]
9000f486:	681b      	ldr	r3, [r3, #0]
9000f488:	785b      	ldrb	r3, [r3, #1]
9000f48a:	4618      	mov	r0, r3
9000f48c:	f7fd fef2 	bl	9000d274 <disk_status>
9000f490:	4603      	mov	r3, r0
9000f492:	f003 0301 	and.w	r3, r3, #1
9000f496:	2b00      	cmp	r3, #0
9000f498:	d101      	bne.n	9000f49e <validate+0x4e>
			res = FR_OK;
9000f49a:	2300      	movs	r3, #0
9000f49c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
9000f49e:	7bfb      	ldrb	r3, [r7, #15]
9000f4a0:	2b00      	cmp	r3, #0
9000f4a2:	d102      	bne.n	9000f4aa <validate+0x5a>
9000f4a4:	687b      	ldr	r3, [r7, #4]
9000f4a6:	681b      	ldr	r3, [r3, #0]
9000f4a8:	e000      	b.n	9000f4ac <validate+0x5c>
9000f4aa:	2300      	movs	r3, #0
9000f4ac:	683a      	ldr	r2, [r7, #0]
9000f4ae:	6013      	str	r3, [r2, #0]
	return res;
9000f4b0:	7bfb      	ldrb	r3, [r7, #15]
}
9000f4b2:	4618      	mov	r0, r3
9000f4b4:	3710      	adds	r7, #16
9000f4b6:	46bd      	mov	sp, r7
9000f4b8:	bd80      	pop	{r7, pc}
	...

9000f4bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
9000f4bc:	b580      	push	{r7, lr}
9000f4be:	b088      	sub	sp, #32
9000f4c0:	af00      	add	r7, sp, #0
9000f4c2:	60f8      	str	r0, [r7, #12]
9000f4c4:	60b9      	str	r1, [r7, #8]
9000f4c6:	4613      	mov	r3, r2
9000f4c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
9000f4ca:	68bb      	ldr	r3, [r7, #8]
9000f4cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
9000f4ce:	f107 0310 	add.w	r3, r7, #16
9000f4d2:	4618      	mov	r0, r3
9000f4d4:	f7ff fcd5 	bl	9000ee82 <get_ldnumber>
9000f4d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
9000f4da:	69fb      	ldr	r3, [r7, #28]
9000f4dc:	2b00      	cmp	r3, #0
9000f4de:	da01      	bge.n	9000f4e4 <f_mount+0x28>
9000f4e0:	230b      	movs	r3, #11
9000f4e2:	e02b      	b.n	9000f53c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
9000f4e4:	4a17      	ldr	r2, [pc, #92]	@ (9000f544 <f_mount+0x88>)
9000f4e6:	69fb      	ldr	r3, [r7, #28]
9000f4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000f4ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
9000f4ee:	69bb      	ldr	r3, [r7, #24]
9000f4f0:	2b00      	cmp	r3, #0
9000f4f2:	d005      	beq.n	9000f500 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
9000f4f4:	69b8      	ldr	r0, [r7, #24]
9000f4f6:	f7fe f9af 	bl	9000d858 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
9000f4fa:	69bb      	ldr	r3, [r7, #24]
9000f4fc:	2200      	movs	r2, #0
9000f4fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
9000f500:	68fb      	ldr	r3, [r7, #12]
9000f502:	2b00      	cmp	r3, #0
9000f504:	d002      	beq.n	9000f50c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
9000f506:	68fb      	ldr	r3, [r7, #12]
9000f508:	2200      	movs	r2, #0
9000f50a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
9000f50c:	68fa      	ldr	r2, [r7, #12]
9000f50e:	490d      	ldr	r1, [pc, #52]	@ (9000f544 <f_mount+0x88>)
9000f510:	69fb      	ldr	r3, [r7, #28]
9000f512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
9000f516:	68fb      	ldr	r3, [r7, #12]
9000f518:	2b00      	cmp	r3, #0
9000f51a:	d002      	beq.n	9000f522 <f_mount+0x66>
9000f51c:	79fb      	ldrb	r3, [r7, #7]
9000f51e:	2b01      	cmp	r3, #1
9000f520:	d001      	beq.n	9000f526 <f_mount+0x6a>
9000f522:	2300      	movs	r3, #0
9000f524:	e00a      	b.n	9000f53c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
9000f526:	f107 010c 	add.w	r1, r7, #12
9000f52a:	f107 0308 	add.w	r3, r7, #8
9000f52e:	2200      	movs	r2, #0
9000f530:	4618      	mov	r0, r3
9000f532:	f7ff fd41 	bl	9000efb8 <find_volume>
9000f536:	4603      	mov	r3, r0
9000f538:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
9000f53a:	7dfb      	ldrb	r3, [r7, #23]
}
9000f53c:	4618      	mov	r0, r3
9000f53e:	3720      	adds	r7, #32
9000f540:	46bd      	mov	sp, r7
9000f542:	bd80      	pop	{r7, pc}
9000f544:	20001e88 	.word	0x20001e88

9000f548 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
9000f548:	b580      	push	{r7, lr}
9000f54a:	b09a      	sub	sp, #104	@ 0x68
9000f54c:	af00      	add	r7, sp, #0
9000f54e:	60f8      	str	r0, [r7, #12]
9000f550:	60b9      	str	r1, [r7, #8]
9000f552:	4613      	mov	r3, r2
9000f554:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
9000f556:	68fb      	ldr	r3, [r7, #12]
9000f558:	2b00      	cmp	r3, #0
9000f55a:	d101      	bne.n	9000f560 <f_open+0x18>
9000f55c:	2309      	movs	r3, #9
9000f55e:	e1b9      	b.n	9000f8d4 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
9000f560:	79fb      	ldrb	r3, [r7, #7]
9000f562:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000f566:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
9000f568:	79fa      	ldrb	r2, [r7, #7]
9000f56a:	f107 0110 	add.w	r1, r7, #16
9000f56e:	f107 0308 	add.w	r3, r7, #8
9000f572:	4618      	mov	r0, r3
9000f574:	f7ff fd20 	bl	9000efb8 <find_volume>
9000f578:	4603      	mov	r3, r0
9000f57a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
9000f57e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f582:	2b00      	cmp	r3, #0
9000f584:	f040 819d 	bne.w	9000f8c2 <f_open+0x37a>
		dj.obj.fs = fs;
9000f588:	693b      	ldr	r3, [r7, #16]
9000f58a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
9000f58c:	f44f 7000 	mov.w	r0, #512	@ 0x200
9000f590:	f000 fc1d 	bl	9000fdce <ff_memalloc>
9000f594:	65b8      	str	r0, [r7, #88]	@ 0x58
9000f596:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
9000f598:	2b00      	cmp	r3, #0
9000f59a:	d101      	bne.n	9000f5a0 <f_open+0x58>
9000f59c:	2311      	movs	r3, #17
9000f59e:	e199      	b.n	9000f8d4 <f_open+0x38c>
9000f5a0:	693b      	ldr	r3, [r7, #16]
9000f5a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
9000f5a4:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
9000f5a6:	68ba      	ldr	r2, [r7, #8]
9000f5a8:	f107 0314 	add.w	r3, r7, #20
9000f5ac:	4611      	mov	r1, r2
9000f5ae:	4618      	mov	r0, r3
9000f5b0:	f7ff fbf6 	bl	9000eda0 <follow_path>
9000f5b4:	4603      	mov	r3, r0
9000f5b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
9000f5ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f5be:	2b00      	cmp	r3, #0
9000f5c0:	d118      	bne.n	9000f5f4 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
9000f5c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000f5c6:	b25b      	sxtb	r3, r3
9000f5c8:	2b00      	cmp	r3, #0
9000f5ca:	da03      	bge.n	9000f5d4 <f_open+0x8c>
				res = FR_INVALID_NAME;
9000f5cc:	2306      	movs	r3, #6
9000f5ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
9000f5d2:	e00f      	b.n	9000f5f4 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
9000f5d4:	79fb      	ldrb	r3, [r7, #7]
9000f5d6:	2b01      	cmp	r3, #1
9000f5d8:	bf8c      	ite	hi
9000f5da:	2301      	movhi	r3, #1
9000f5dc:	2300      	movls	r3, #0
9000f5de:	b2db      	uxtb	r3, r3
9000f5e0:	461a      	mov	r2, r3
9000f5e2:	f107 0314 	add.w	r3, r7, #20
9000f5e6:	4611      	mov	r1, r2
9000f5e8:	4618      	mov	r0, r3
9000f5ea:	f7fd ffed 	bl	9000d5c8 <chk_lock>
9000f5ee:	4603      	mov	r3, r0
9000f5f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
9000f5f4:	79fb      	ldrb	r3, [r7, #7]
9000f5f6:	f003 031c 	and.w	r3, r3, #28
9000f5fa:	2b00      	cmp	r3, #0
9000f5fc:	d07f      	beq.n	9000f6fe <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
9000f5fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f602:	2b00      	cmp	r3, #0
9000f604:	d017      	beq.n	9000f636 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
9000f606:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f60a:	2b04      	cmp	r3, #4
9000f60c:	d10e      	bne.n	9000f62c <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
9000f60e:	f7fe f837 	bl	9000d680 <enq_lock>
9000f612:	4603      	mov	r3, r0
9000f614:	2b00      	cmp	r3, #0
9000f616:	d006      	beq.n	9000f626 <f_open+0xde>
9000f618:	f107 0314 	add.w	r3, r7, #20
9000f61c:	4618      	mov	r0, r3
9000f61e:	f7ff f90f 	bl	9000e840 <dir_register>
9000f622:	4603      	mov	r3, r0
9000f624:	e000      	b.n	9000f628 <f_open+0xe0>
9000f626:	2312      	movs	r3, #18
9000f628:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
9000f62c:	79fb      	ldrb	r3, [r7, #7]
9000f62e:	f043 0308 	orr.w	r3, r3, #8
9000f632:	71fb      	strb	r3, [r7, #7]
9000f634:	e010      	b.n	9000f658 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
9000f636:	7ebb      	ldrb	r3, [r7, #26]
9000f638:	f003 0311 	and.w	r3, r3, #17
9000f63c:	2b00      	cmp	r3, #0
9000f63e:	d003      	beq.n	9000f648 <f_open+0x100>
					res = FR_DENIED;
9000f640:	2307      	movs	r3, #7
9000f642:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
9000f646:	e007      	b.n	9000f658 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
9000f648:	79fb      	ldrb	r3, [r7, #7]
9000f64a:	f003 0304 	and.w	r3, r3, #4
9000f64e:	2b00      	cmp	r3, #0
9000f650:	d002      	beq.n	9000f658 <f_open+0x110>
9000f652:	2308      	movs	r3, #8
9000f654:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
9000f658:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f65c:	2b00      	cmp	r3, #0
9000f65e:	d168      	bne.n	9000f732 <f_open+0x1ea>
9000f660:	79fb      	ldrb	r3, [r7, #7]
9000f662:	f003 0308 	and.w	r3, r3, #8
9000f666:	2b00      	cmp	r3, #0
9000f668:	d063      	beq.n	9000f732 <f_open+0x1ea>
				dw = GET_FATTIME();
9000f66a:	f7fd fea3 	bl	9000d3b4 <get_fattime>
9000f66e:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
9000f670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000f672:	330e      	adds	r3, #14
9000f674:	6d79      	ldr	r1, [r7, #84]	@ 0x54
9000f676:	4618      	mov	r0, r3
9000f678:	f7fd fefb 	bl	9000d472 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
9000f67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000f67e:	3316      	adds	r3, #22
9000f680:	6d79      	ldr	r1, [r7, #84]	@ 0x54
9000f682:	4618      	mov	r0, r3
9000f684:	f7fd fef5 	bl	9000d472 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
9000f688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000f68a:	330b      	adds	r3, #11
9000f68c:	2220      	movs	r2, #32
9000f68e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
9000f690:	693b      	ldr	r3, [r7, #16]
9000f692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
9000f694:	4611      	mov	r1, r2
9000f696:	4618      	mov	r0, r3
9000f698:	f7fe fe4a 	bl	9000e330 <ld_clust>
9000f69c:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
9000f69e:	693b      	ldr	r3, [r7, #16]
9000f6a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
9000f6a2:	2200      	movs	r2, #0
9000f6a4:	4618      	mov	r0, r3
9000f6a6:	f7fe fe62 	bl	9000e36e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
9000f6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000f6ac:	331c      	adds	r3, #28
9000f6ae:	2100      	movs	r1, #0
9000f6b0:	4618      	mov	r0, r3
9000f6b2:	f7fd fede 	bl	9000d472 <st_dword>
					fs->wflag = 1;
9000f6b6:	693b      	ldr	r3, [r7, #16]
9000f6b8:	2201      	movs	r2, #1
9000f6ba:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
9000f6bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000f6be:	2b00      	cmp	r3, #0
9000f6c0:	d037      	beq.n	9000f732 <f_open+0x1ea>
						dw = fs->winsect;
9000f6c2:	693b      	ldr	r3, [r7, #16]
9000f6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000f6c6:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
9000f6c8:	f107 0314 	add.w	r3, r7, #20
9000f6cc:	2200      	movs	r2, #0
9000f6ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
9000f6d0:	4618      	mov	r0, r3
9000f6d2:	f7fe fb75 	bl	9000ddc0 <remove_chain>
9000f6d6:	4603      	mov	r3, r0
9000f6d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
9000f6dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f6e0:	2b00      	cmp	r3, #0
9000f6e2:	d126      	bne.n	9000f732 <f_open+0x1ea>
							res = move_window(fs, dw);
9000f6e4:	693b      	ldr	r3, [r7, #16]
9000f6e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
9000f6e8:	4618      	mov	r0, r3
9000f6ea:	f7fe f91d 	bl	9000d928 <move_window>
9000f6ee:	4603      	mov	r3, r0
9000f6f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
9000f6f4:	693b      	ldr	r3, [r7, #16]
9000f6f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
9000f6f8:	3a01      	subs	r2, #1
9000f6fa:	611a      	str	r2, [r3, #16]
9000f6fc:	e019      	b.n	9000f732 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
9000f6fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f702:	2b00      	cmp	r3, #0
9000f704:	d115      	bne.n	9000f732 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
9000f706:	7ebb      	ldrb	r3, [r7, #26]
9000f708:	f003 0310 	and.w	r3, r3, #16
9000f70c:	2b00      	cmp	r3, #0
9000f70e:	d003      	beq.n	9000f718 <f_open+0x1d0>
					res = FR_NO_FILE;
9000f710:	2304      	movs	r3, #4
9000f712:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
9000f716:	e00c      	b.n	9000f732 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
9000f718:	79fb      	ldrb	r3, [r7, #7]
9000f71a:	f003 0302 	and.w	r3, r3, #2
9000f71e:	2b00      	cmp	r3, #0
9000f720:	d007      	beq.n	9000f732 <f_open+0x1ea>
9000f722:	7ebb      	ldrb	r3, [r7, #26]
9000f724:	f003 0301 	and.w	r3, r3, #1
9000f728:	2b00      	cmp	r3, #0
9000f72a:	d002      	beq.n	9000f732 <f_open+0x1ea>
						res = FR_DENIED;
9000f72c:	2307      	movs	r3, #7
9000f72e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
9000f732:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f736:	2b00      	cmp	r3, #0
9000f738:	d126      	bne.n	9000f788 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
9000f73a:	79fb      	ldrb	r3, [r7, #7]
9000f73c:	f003 0308 	and.w	r3, r3, #8
9000f740:	2b00      	cmp	r3, #0
9000f742:	d003      	beq.n	9000f74c <f_open+0x204>
				mode |= FA_MODIFIED;
9000f744:	79fb      	ldrb	r3, [r7, #7]
9000f746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000f74a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
9000f74c:	693b      	ldr	r3, [r7, #16]
9000f74e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000f750:	68fb      	ldr	r3, [r7, #12]
9000f752:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
9000f754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
9000f756:	68fb      	ldr	r3, [r7, #12]
9000f758:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
9000f75a:	79fb      	ldrb	r3, [r7, #7]
9000f75c:	2b01      	cmp	r3, #1
9000f75e:	bf8c      	ite	hi
9000f760:	2301      	movhi	r3, #1
9000f762:	2300      	movls	r3, #0
9000f764:	b2db      	uxtb	r3, r3
9000f766:	461a      	mov	r2, r3
9000f768:	f107 0314 	add.w	r3, r7, #20
9000f76c:	4611      	mov	r1, r2
9000f76e:	4618      	mov	r0, r3
9000f770:	f7fd ffa8 	bl	9000d6c4 <inc_lock>
9000f774:	4602      	mov	r2, r0
9000f776:	68fb      	ldr	r3, [r7, #12]
9000f778:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
9000f77a:	68fb      	ldr	r3, [r7, #12]
9000f77c:	691b      	ldr	r3, [r3, #16]
9000f77e:	2b00      	cmp	r3, #0
9000f780:	d102      	bne.n	9000f788 <f_open+0x240>
9000f782:	2302      	movs	r3, #2
9000f784:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
9000f788:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f78c:	2b00      	cmp	r3, #0
9000f78e:	f040 8095 	bne.w	9000f8bc <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
9000f792:	693b      	ldr	r3, [r7, #16]
9000f794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
9000f796:	4611      	mov	r1, r2
9000f798:	4618      	mov	r0, r3
9000f79a:	f7fe fdc9 	bl	9000e330 <ld_clust>
9000f79e:	4602      	mov	r2, r0
9000f7a0:	68fb      	ldr	r3, [r7, #12]
9000f7a2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
9000f7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000f7a6:	331c      	adds	r3, #28
9000f7a8:	4618      	mov	r0, r3
9000f7aa:	f7fd fe24 	bl	9000d3f6 <ld_dword>
9000f7ae:	4602      	mov	r2, r0
9000f7b0:	68fb      	ldr	r3, [r7, #12]
9000f7b2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
9000f7b4:	68fb      	ldr	r3, [r7, #12]
9000f7b6:	2200      	movs	r2, #0
9000f7b8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
9000f7ba:	693a      	ldr	r2, [r7, #16]
9000f7bc:	68fb      	ldr	r3, [r7, #12]
9000f7be:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
9000f7c0:	693b      	ldr	r3, [r7, #16]
9000f7c2:	88da      	ldrh	r2, [r3, #6]
9000f7c4:	68fb      	ldr	r3, [r7, #12]
9000f7c6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
9000f7c8:	68fb      	ldr	r3, [r7, #12]
9000f7ca:	79fa      	ldrb	r2, [r7, #7]
9000f7cc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
9000f7ce:	68fb      	ldr	r3, [r7, #12]
9000f7d0:	2200      	movs	r2, #0
9000f7d2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
9000f7d4:	68fb      	ldr	r3, [r7, #12]
9000f7d6:	2200      	movs	r2, #0
9000f7d8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
9000f7da:	68fb      	ldr	r3, [r7, #12]
9000f7dc:	2200      	movs	r2, #0
9000f7de:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
9000f7e0:	68fb      	ldr	r3, [r7, #12]
9000f7e2:	3330      	adds	r3, #48	@ 0x30
9000f7e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000f7e8:	2100      	movs	r1, #0
9000f7ea:	4618      	mov	r0, r3
9000f7ec:	f7fd fe8e 	bl	9000d50c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
9000f7f0:	79fb      	ldrb	r3, [r7, #7]
9000f7f2:	f003 0320 	and.w	r3, r3, #32
9000f7f6:	2b00      	cmp	r3, #0
9000f7f8:	d060      	beq.n	9000f8bc <f_open+0x374>
9000f7fa:	68fb      	ldr	r3, [r7, #12]
9000f7fc:	68db      	ldr	r3, [r3, #12]
9000f7fe:	2b00      	cmp	r3, #0
9000f800:	d05c      	beq.n	9000f8bc <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
9000f802:	68fb      	ldr	r3, [r7, #12]
9000f804:	68da      	ldr	r2, [r3, #12]
9000f806:	68fb      	ldr	r3, [r7, #12]
9000f808:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
9000f80a:	693b      	ldr	r3, [r7, #16]
9000f80c:	895b      	ldrh	r3, [r3, #10]
9000f80e:	025b      	lsls	r3, r3, #9
9000f810:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
9000f812:	68fb      	ldr	r3, [r7, #12]
9000f814:	689b      	ldr	r3, [r3, #8]
9000f816:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
9000f818:	68fb      	ldr	r3, [r7, #12]
9000f81a:	68db      	ldr	r3, [r3, #12]
9000f81c:	65fb      	str	r3, [r7, #92]	@ 0x5c
9000f81e:	e016      	b.n	9000f84e <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
9000f820:	68fb      	ldr	r3, [r7, #12]
9000f822:	6e39      	ldr	r1, [r7, #96]	@ 0x60
9000f824:	4618      	mov	r0, r3
9000f826:	f7fe f93a 	bl	9000da9e <get_fat>
9000f82a:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
9000f82c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
9000f82e:	2b01      	cmp	r3, #1
9000f830:	d802      	bhi.n	9000f838 <f_open+0x2f0>
9000f832:	2302      	movs	r3, #2
9000f834:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
9000f838:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
9000f83a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000f83e:	d102      	bne.n	9000f846 <f_open+0x2fe>
9000f840:	2301      	movs	r3, #1
9000f842:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
9000f846:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
9000f848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000f84a:	1ad3      	subs	r3, r2, r3
9000f84c:	65fb      	str	r3, [r7, #92]	@ 0x5c
9000f84e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f852:	2b00      	cmp	r3, #0
9000f854:	d103      	bne.n	9000f85e <f_open+0x316>
9000f856:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
9000f858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000f85a:	429a      	cmp	r2, r3
9000f85c:	d8e0      	bhi.n	9000f820 <f_open+0x2d8>
				}
				fp->clust = clst;
9000f85e:	68fb      	ldr	r3, [r7, #12]
9000f860:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
9000f862:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
9000f864:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f868:	2b00      	cmp	r3, #0
9000f86a:	d127      	bne.n	9000f8bc <f_open+0x374>
9000f86c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
9000f86e:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000f872:	2b00      	cmp	r3, #0
9000f874:	d022      	beq.n	9000f8bc <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
9000f876:	693b      	ldr	r3, [r7, #16]
9000f878:	6e39      	ldr	r1, [r7, #96]	@ 0x60
9000f87a:	4618      	mov	r0, r3
9000f87c:	f7fe f8f0 	bl	9000da60 <clust2sect>
9000f880:	64b8      	str	r0, [r7, #72]	@ 0x48
9000f882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
9000f884:	2b00      	cmp	r3, #0
9000f886:	d103      	bne.n	9000f890 <f_open+0x348>
						res = FR_INT_ERR;
9000f888:	2302      	movs	r3, #2
9000f88a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
9000f88e:	e015      	b.n	9000f8bc <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
9000f890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
9000f892:	0a5a      	lsrs	r2, r3, #9
9000f894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
9000f896:	441a      	add	r2, r3
9000f898:	68fb      	ldr	r3, [r7, #12]
9000f89a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
9000f89c:	693b      	ldr	r3, [r7, #16]
9000f89e:	7858      	ldrb	r0, [r3, #1]
9000f8a0:	68fb      	ldr	r3, [r7, #12]
9000f8a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
9000f8a6:	68fb      	ldr	r3, [r7, #12]
9000f8a8:	6a1a      	ldr	r2, [r3, #32]
9000f8aa:	2301      	movs	r3, #1
9000f8ac:	f7fd fd24 	bl	9000d2f8 <disk_read>
9000f8b0:	4603      	mov	r3, r0
9000f8b2:	2b00      	cmp	r3, #0
9000f8b4:	d002      	beq.n	9000f8bc <f_open+0x374>
9000f8b6:	2301      	movs	r3, #1
9000f8b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
9000f8bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
9000f8be:	f000 fa92 	bl	9000fde6 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
9000f8c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
9000f8c6:	2b00      	cmp	r3, #0
9000f8c8:	d002      	beq.n	9000f8d0 <f_open+0x388>
9000f8ca:	68fb      	ldr	r3, [r7, #12]
9000f8cc:	2200      	movs	r2, #0
9000f8ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
9000f8d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
9000f8d4:	4618      	mov	r0, r3
9000f8d6:	3768      	adds	r7, #104	@ 0x68
9000f8d8:	46bd      	mov	sp, r7
9000f8da:	bd80      	pop	{r7, pc}

9000f8dc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
9000f8dc:	b580      	push	{r7, lr}
9000f8de:	b08c      	sub	sp, #48	@ 0x30
9000f8e0:	af00      	add	r7, sp, #0
9000f8e2:	60f8      	str	r0, [r7, #12]
9000f8e4:	60b9      	str	r1, [r7, #8]
9000f8e6:	607a      	str	r2, [r7, #4]
9000f8e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
9000f8ea:	68bb      	ldr	r3, [r7, #8]
9000f8ec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
9000f8ee:	683b      	ldr	r3, [r7, #0]
9000f8f0:	2200      	movs	r2, #0
9000f8f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
9000f8f4:	68fb      	ldr	r3, [r7, #12]
9000f8f6:	f107 0210 	add.w	r2, r7, #16
9000f8fa:	4611      	mov	r1, r2
9000f8fc:	4618      	mov	r0, r3
9000f8fe:	f7ff fda7 	bl	9000f450 <validate>
9000f902:	4603      	mov	r3, r0
9000f904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
9000f908:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000f90c:	2b00      	cmp	r3, #0
9000f90e:	d107      	bne.n	9000f920 <f_write+0x44>
9000f910:	68fb      	ldr	r3, [r7, #12]
9000f912:	7d5b      	ldrb	r3, [r3, #21]
9000f914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
9000f918:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000f91c:	2b00      	cmp	r3, #0
9000f91e:	d002      	beq.n	9000f926 <f_write+0x4a>
9000f920:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
9000f924:	e14b      	b.n	9000fbbe <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
9000f926:	68fb      	ldr	r3, [r7, #12]
9000f928:	7d1b      	ldrb	r3, [r3, #20]
9000f92a:	f003 0302 	and.w	r3, r3, #2
9000f92e:	2b00      	cmp	r3, #0
9000f930:	d101      	bne.n	9000f936 <f_write+0x5a>
9000f932:	2307      	movs	r3, #7
9000f934:	e143      	b.n	9000fbbe <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
9000f936:	68fb      	ldr	r3, [r7, #12]
9000f938:	699a      	ldr	r2, [r3, #24]
9000f93a:	687b      	ldr	r3, [r7, #4]
9000f93c:	441a      	add	r2, r3
9000f93e:	68fb      	ldr	r3, [r7, #12]
9000f940:	699b      	ldr	r3, [r3, #24]
9000f942:	429a      	cmp	r2, r3
9000f944:	f080 812d 	bcs.w	9000fba2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
9000f948:	68fb      	ldr	r3, [r7, #12]
9000f94a:	699b      	ldr	r3, [r3, #24]
9000f94c:	43db      	mvns	r3, r3
9000f94e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
9000f950:	e127      	b.n	9000fba2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
9000f952:	68fb      	ldr	r3, [r7, #12]
9000f954:	699b      	ldr	r3, [r3, #24]
9000f956:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000f95a:	2b00      	cmp	r3, #0
9000f95c:	f040 80e3 	bne.w	9000fb26 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
9000f960:	68fb      	ldr	r3, [r7, #12]
9000f962:	699b      	ldr	r3, [r3, #24]
9000f964:	0a5b      	lsrs	r3, r3, #9
9000f966:	693a      	ldr	r2, [r7, #16]
9000f968:	8952      	ldrh	r2, [r2, #10]
9000f96a:	3a01      	subs	r2, #1
9000f96c:	4013      	ands	r3, r2
9000f96e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
9000f970:	69bb      	ldr	r3, [r7, #24]
9000f972:	2b00      	cmp	r3, #0
9000f974:	d143      	bne.n	9000f9fe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
9000f976:	68fb      	ldr	r3, [r7, #12]
9000f978:	699b      	ldr	r3, [r3, #24]
9000f97a:	2b00      	cmp	r3, #0
9000f97c:	d10c      	bne.n	9000f998 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
9000f97e:	68fb      	ldr	r3, [r7, #12]
9000f980:	689b      	ldr	r3, [r3, #8]
9000f982:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
9000f984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000f986:	2b00      	cmp	r3, #0
9000f988:	d11a      	bne.n	9000f9c0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
9000f98a:	68fb      	ldr	r3, [r7, #12]
9000f98c:	2100      	movs	r1, #0
9000f98e:	4618      	mov	r0, r3
9000f990:	f7fe fa7b 	bl	9000de8a <create_chain>
9000f994:	62b8      	str	r0, [r7, #40]	@ 0x28
9000f996:	e013      	b.n	9000f9c0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
9000f998:	68fb      	ldr	r3, [r7, #12]
9000f99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000f99c:	2b00      	cmp	r3, #0
9000f99e:	d007      	beq.n	9000f9b0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
9000f9a0:	68fb      	ldr	r3, [r7, #12]
9000f9a2:	699b      	ldr	r3, [r3, #24]
9000f9a4:	4619      	mov	r1, r3
9000f9a6:	68f8      	ldr	r0, [r7, #12]
9000f9a8:	f7fe fb07 	bl	9000dfba <clmt_clust>
9000f9ac:	62b8      	str	r0, [r7, #40]	@ 0x28
9000f9ae:	e007      	b.n	9000f9c0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
9000f9b0:	68fa      	ldr	r2, [r7, #12]
9000f9b2:	68fb      	ldr	r3, [r7, #12]
9000f9b4:	69db      	ldr	r3, [r3, #28]
9000f9b6:	4619      	mov	r1, r3
9000f9b8:	4610      	mov	r0, r2
9000f9ba:	f7fe fa66 	bl	9000de8a <create_chain>
9000f9be:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
9000f9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000f9c2:	2b00      	cmp	r3, #0
9000f9c4:	f000 80f2 	beq.w	9000fbac <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
9000f9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000f9ca:	2b01      	cmp	r3, #1
9000f9cc:	d104      	bne.n	9000f9d8 <f_write+0xfc>
9000f9ce:	68fb      	ldr	r3, [r7, #12]
9000f9d0:	2202      	movs	r2, #2
9000f9d2:	755a      	strb	r2, [r3, #21]
9000f9d4:	2302      	movs	r3, #2
9000f9d6:	e0f2      	b.n	9000fbbe <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
9000f9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000f9da:	f1b3 3fff 	cmp.w	r3, #4294967295
9000f9de:	d104      	bne.n	9000f9ea <f_write+0x10e>
9000f9e0:	68fb      	ldr	r3, [r7, #12]
9000f9e2:	2201      	movs	r2, #1
9000f9e4:	755a      	strb	r2, [r3, #21]
9000f9e6:	2301      	movs	r3, #1
9000f9e8:	e0e9      	b.n	9000fbbe <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
9000f9ea:	68fb      	ldr	r3, [r7, #12]
9000f9ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000f9ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
9000f9f0:	68fb      	ldr	r3, [r7, #12]
9000f9f2:	689b      	ldr	r3, [r3, #8]
9000f9f4:	2b00      	cmp	r3, #0
9000f9f6:	d102      	bne.n	9000f9fe <f_write+0x122>
9000f9f8:	68fb      	ldr	r3, [r7, #12]
9000f9fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000f9fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
9000f9fe:	68fb      	ldr	r3, [r7, #12]
9000fa00:	7d1b      	ldrb	r3, [r3, #20]
9000fa02:	b25b      	sxtb	r3, r3
9000fa04:	2b00      	cmp	r3, #0
9000fa06:	da18      	bge.n	9000fa3a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
9000fa08:	693b      	ldr	r3, [r7, #16]
9000fa0a:	7858      	ldrb	r0, [r3, #1]
9000fa0c:	68fb      	ldr	r3, [r7, #12]
9000fa0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
9000fa12:	68fb      	ldr	r3, [r7, #12]
9000fa14:	6a1a      	ldr	r2, [r3, #32]
9000fa16:	2301      	movs	r3, #1
9000fa18:	f7fd fc8e 	bl	9000d338 <disk_write>
9000fa1c:	4603      	mov	r3, r0
9000fa1e:	2b00      	cmp	r3, #0
9000fa20:	d004      	beq.n	9000fa2c <f_write+0x150>
9000fa22:	68fb      	ldr	r3, [r7, #12]
9000fa24:	2201      	movs	r2, #1
9000fa26:	755a      	strb	r2, [r3, #21]
9000fa28:	2301      	movs	r3, #1
9000fa2a:	e0c8      	b.n	9000fbbe <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
9000fa2c:	68fb      	ldr	r3, [r7, #12]
9000fa2e:	7d1b      	ldrb	r3, [r3, #20]
9000fa30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000fa34:	b2da      	uxtb	r2, r3
9000fa36:	68fb      	ldr	r3, [r7, #12]
9000fa38:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
9000fa3a:	693a      	ldr	r2, [r7, #16]
9000fa3c:	68fb      	ldr	r3, [r7, #12]
9000fa3e:	69db      	ldr	r3, [r3, #28]
9000fa40:	4619      	mov	r1, r3
9000fa42:	4610      	mov	r0, r2
9000fa44:	f7fe f80c 	bl	9000da60 <clust2sect>
9000fa48:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
9000fa4a:	697b      	ldr	r3, [r7, #20]
9000fa4c:	2b00      	cmp	r3, #0
9000fa4e:	d104      	bne.n	9000fa5a <f_write+0x17e>
9000fa50:	68fb      	ldr	r3, [r7, #12]
9000fa52:	2202      	movs	r2, #2
9000fa54:	755a      	strb	r2, [r3, #21]
9000fa56:	2302      	movs	r3, #2
9000fa58:	e0b1      	b.n	9000fbbe <f_write+0x2e2>
			sect += csect;
9000fa5a:	697a      	ldr	r2, [r7, #20]
9000fa5c:	69bb      	ldr	r3, [r7, #24]
9000fa5e:	4413      	add	r3, r2
9000fa60:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
9000fa62:	687b      	ldr	r3, [r7, #4]
9000fa64:	0a5b      	lsrs	r3, r3, #9
9000fa66:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
9000fa68:	6a3b      	ldr	r3, [r7, #32]
9000fa6a:	2b00      	cmp	r3, #0
9000fa6c:	d03c      	beq.n	9000fae8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
9000fa6e:	69ba      	ldr	r2, [r7, #24]
9000fa70:	6a3b      	ldr	r3, [r7, #32]
9000fa72:	4413      	add	r3, r2
9000fa74:	693a      	ldr	r2, [r7, #16]
9000fa76:	8952      	ldrh	r2, [r2, #10]
9000fa78:	4293      	cmp	r3, r2
9000fa7a:	d905      	bls.n	9000fa88 <f_write+0x1ac>
					cc = fs->csize - csect;
9000fa7c:	693b      	ldr	r3, [r7, #16]
9000fa7e:	895b      	ldrh	r3, [r3, #10]
9000fa80:	461a      	mov	r2, r3
9000fa82:	69bb      	ldr	r3, [r7, #24]
9000fa84:	1ad3      	subs	r3, r2, r3
9000fa86:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
9000fa88:	693b      	ldr	r3, [r7, #16]
9000fa8a:	7858      	ldrb	r0, [r3, #1]
9000fa8c:	6a3b      	ldr	r3, [r7, #32]
9000fa8e:	697a      	ldr	r2, [r7, #20]
9000fa90:	69f9      	ldr	r1, [r7, #28]
9000fa92:	f7fd fc51 	bl	9000d338 <disk_write>
9000fa96:	4603      	mov	r3, r0
9000fa98:	2b00      	cmp	r3, #0
9000fa9a:	d004      	beq.n	9000faa6 <f_write+0x1ca>
9000fa9c:	68fb      	ldr	r3, [r7, #12]
9000fa9e:	2201      	movs	r2, #1
9000faa0:	755a      	strb	r2, [r3, #21]
9000faa2:	2301      	movs	r3, #1
9000faa4:	e08b      	b.n	9000fbbe <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
9000faa6:	68fb      	ldr	r3, [r7, #12]
9000faa8:	6a1a      	ldr	r2, [r3, #32]
9000faaa:	697b      	ldr	r3, [r7, #20]
9000faac:	1ad3      	subs	r3, r2, r3
9000faae:	6a3a      	ldr	r2, [r7, #32]
9000fab0:	429a      	cmp	r2, r3
9000fab2:	d915      	bls.n	9000fae0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
9000fab4:	68fb      	ldr	r3, [r7, #12]
9000fab6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
9000faba:	68fb      	ldr	r3, [r7, #12]
9000fabc:	6a1a      	ldr	r2, [r3, #32]
9000fabe:	697b      	ldr	r3, [r7, #20]
9000fac0:	1ad3      	subs	r3, r2, r3
9000fac2:	025b      	lsls	r3, r3, #9
9000fac4:	69fa      	ldr	r2, [r7, #28]
9000fac6:	4413      	add	r3, r2
9000fac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000facc:	4619      	mov	r1, r3
9000face:	f7fd fcfc 	bl	9000d4ca <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
9000fad2:	68fb      	ldr	r3, [r7, #12]
9000fad4:	7d1b      	ldrb	r3, [r3, #20]
9000fad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000fada:	b2da      	uxtb	r2, r3
9000fadc:	68fb      	ldr	r3, [r7, #12]
9000fade:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
9000fae0:	6a3b      	ldr	r3, [r7, #32]
9000fae2:	025b      	lsls	r3, r3, #9
9000fae4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
9000fae6:	e03f      	b.n	9000fb68 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
9000fae8:	68fb      	ldr	r3, [r7, #12]
9000faea:	6a1b      	ldr	r3, [r3, #32]
9000faec:	697a      	ldr	r2, [r7, #20]
9000faee:	429a      	cmp	r2, r3
9000faf0:	d016      	beq.n	9000fb20 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
9000faf2:	68fb      	ldr	r3, [r7, #12]
9000faf4:	699a      	ldr	r2, [r3, #24]
9000faf6:	68fb      	ldr	r3, [r7, #12]
9000faf8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
9000fafa:	429a      	cmp	r2, r3
9000fafc:	d210      	bcs.n	9000fb20 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
9000fafe:	693b      	ldr	r3, [r7, #16]
9000fb00:	7858      	ldrb	r0, [r3, #1]
9000fb02:	68fb      	ldr	r3, [r7, #12]
9000fb04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
9000fb08:	2301      	movs	r3, #1
9000fb0a:	697a      	ldr	r2, [r7, #20]
9000fb0c:	f7fd fbf4 	bl	9000d2f8 <disk_read>
9000fb10:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
9000fb12:	2b00      	cmp	r3, #0
9000fb14:	d004      	beq.n	9000fb20 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
9000fb16:	68fb      	ldr	r3, [r7, #12]
9000fb18:	2201      	movs	r2, #1
9000fb1a:	755a      	strb	r2, [r3, #21]
9000fb1c:	2301      	movs	r3, #1
9000fb1e:	e04e      	b.n	9000fbbe <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
9000fb20:	68fb      	ldr	r3, [r7, #12]
9000fb22:	697a      	ldr	r2, [r7, #20]
9000fb24:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
9000fb26:	68fb      	ldr	r3, [r7, #12]
9000fb28:	699b      	ldr	r3, [r3, #24]
9000fb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000fb2e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
9000fb32:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
9000fb34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000fb36:	687b      	ldr	r3, [r7, #4]
9000fb38:	429a      	cmp	r2, r3
9000fb3a:	d901      	bls.n	9000fb40 <f_write+0x264>
9000fb3c:	687b      	ldr	r3, [r7, #4]
9000fb3e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
9000fb40:	68fb      	ldr	r3, [r7, #12]
9000fb42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
9000fb46:	68fb      	ldr	r3, [r7, #12]
9000fb48:	699b      	ldr	r3, [r3, #24]
9000fb4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000fb4e:	4413      	add	r3, r2
9000fb50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000fb52:	69f9      	ldr	r1, [r7, #28]
9000fb54:	4618      	mov	r0, r3
9000fb56:	f7fd fcb8 	bl	9000d4ca <mem_cpy>
		fp->flag |= FA_DIRTY;
9000fb5a:	68fb      	ldr	r3, [r7, #12]
9000fb5c:	7d1b      	ldrb	r3, [r3, #20]
9000fb5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
9000fb62:	b2da      	uxtb	r2, r3
9000fb64:	68fb      	ldr	r3, [r7, #12]
9000fb66:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
9000fb68:	69fa      	ldr	r2, [r7, #28]
9000fb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000fb6c:	4413      	add	r3, r2
9000fb6e:	61fb      	str	r3, [r7, #28]
9000fb70:	68fb      	ldr	r3, [r7, #12]
9000fb72:	699a      	ldr	r2, [r3, #24]
9000fb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000fb76:	441a      	add	r2, r3
9000fb78:	68fb      	ldr	r3, [r7, #12]
9000fb7a:	619a      	str	r2, [r3, #24]
9000fb7c:	68fb      	ldr	r3, [r7, #12]
9000fb7e:	68da      	ldr	r2, [r3, #12]
9000fb80:	68fb      	ldr	r3, [r7, #12]
9000fb82:	699b      	ldr	r3, [r3, #24]
9000fb84:	429a      	cmp	r2, r3
9000fb86:	bf38      	it	cc
9000fb88:	461a      	movcc	r2, r3
9000fb8a:	68fb      	ldr	r3, [r7, #12]
9000fb8c:	60da      	str	r2, [r3, #12]
9000fb8e:	683b      	ldr	r3, [r7, #0]
9000fb90:	681a      	ldr	r2, [r3, #0]
9000fb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000fb94:	441a      	add	r2, r3
9000fb96:	683b      	ldr	r3, [r7, #0]
9000fb98:	601a      	str	r2, [r3, #0]
9000fb9a:	687a      	ldr	r2, [r7, #4]
9000fb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000fb9e:	1ad3      	subs	r3, r2, r3
9000fba0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
9000fba2:	687b      	ldr	r3, [r7, #4]
9000fba4:	2b00      	cmp	r3, #0
9000fba6:	f47f aed4 	bne.w	9000f952 <f_write+0x76>
9000fbaa:	e000      	b.n	9000fbae <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
9000fbac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
9000fbae:	68fb      	ldr	r3, [r7, #12]
9000fbb0:	7d1b      	ldrb	r3, [r3, #20]
9000fbb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000fbb6:	b2da      	uxtb	r2, r3
9000fbb8:	68fb      	ldr	r3, [r7, #12]
9000fbba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
9000fbbc:	2300      	movs	r3, #0
}
9000fbbe:	4618      	mov	r0, r3
9000fbc0:	3730      	adds	r7, #48	@ 0x30
9000fbc2:	46bd      	mov	sp, r7
9000fbc4:	bd80      	pop	{r7, pc}

9000fbc6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
9000fbc6:	b580      	push	{r7, lr}
9000fbc8:	b086      	sub	sp, #24
9000fbca:	af00      	add	r7, sp, #0
9000fbcc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
9000fbce:	687b      	ldr	r3, [r7, #4]
9000fbd0:	f107 0208 	add.w	r2, r7, #8
9000fbd4:	4611      	mov	r1, r2
9000fbd6:	4618      	mov	r0, r3
9000fbd8:	f7ff fc3a 	bl	9000f450 <validate>
9000fbdc:	4603      	mov	r3, r0
9000fbde:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
9000fbe0:	7dfb      	ldrb	r3, [r7, #23]
9000fbe2:	2b00      	cmp	r3, #0
9000fbe4:	d168      	bne.n	9000fcb8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
9000fbe6:	687b      	ldr	r3, [r7, #4]
9000fbe8:	7d1b      	ldrb	r3, [r3, #20]
9000fbea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000fbee:	2b00      	cmp	r3, #0
9000fbf0:	d062      	beq.n	9000fcb8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
9000fbf2:	687b      	ldr	r3, [r7, #4]
9000fbf4:	7d1b      	ldrb	r3, [r3, #20]
9000fbf6:	b25b      	sxtb	r3, r3
9000fbf8:	2b00      	cmp	r3, #0
9000fbfa:	da15      	bge.n	9000fc28 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
9000fbfc:	68bb      	ldr	r3, [r7, #8]
9000fbfe:	7858      	ldrb	r0, [r3, #1]
9000fc00:	687b      	ldr	r3, [r7, #4]
9000fc02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
9000fc06:	687b      	ldr	r3, [r7, #4]
9000fc08:	6a1a      	ldr	r2, [r3, #32]
9000fc0a:	2301      	movs	r3, #1
9000fc0c:	f7fd fb94 	bl	9000d338 <disk_write>
9000fc10:	4603      	mov	r3, r0
9000fc12:	2b00      	cmp	r3, #0
9000fc14:	d001      	beq.n	9000fc1a <f_sync+0x54>
9000fc16:	2301      	movs	r3, #1
9000fc18:	e04f      	b.n	9000fcba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
9000fc1a:	687b      	ldr	r3, [r7, #4]
9000fc1c:	7d1b      	ldrb	r3, [r3, #20]
9000fc1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000fc22:	b2da      	uxtb	r2, r3
9000fc24:	687b      	ldr	r3, [r7, #4]
9000fc26:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
9000fc28:	f7fd fbc4 	bl	9000d3b4 <get_fattime>
9000fc2c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
9000fc2e:	68ba      	ldr	r2, [r7, #8]
9000fc30:	687b      	ldr	r3, [r7, #4]
9000fc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000fc34:	4619      	mov	r1, r3
9000fc36:	4610      	mov	r0, r2
9000fc38:	f7fd fe76 	bl	9000d928 <move_window>
9000fc3c:	4603      	mov	r3, r0
9000fc3e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
9000fc40:	7dfb      	ldrb	r3, [r7, #23]
9000fc42:	2b00      	cmp	r3, #0
9000fc44:	d138      	bne.n	9000fcb8 <f_sync+0xf2>
					dir = fp->dir_ptr;
9000fc46:	687b      	ldr	r3, [r7, #4]
9000fc48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000fc4a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
9000fc4c:	68fb      	ldr	r3, [r7, #12]
9000fc4e:	330b      	adds	r3, #11
9000fc50:	781a      	ldrb	r2, [r3, #0]
9000fc52:	68fb      	ldr	r3, [r7, #12]
9000fc54:	330b      	adds	r3, #11
9000fc56:	f042 0220 	orr.w	r2, r2, #32
9000fc5a:	b2d2      	uxtb	r2, r2
9000fc5c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
9000fc5e:	687b      	ldr	r3, [r7, #4]
9000fc60:	6818      	ldr	r0, [r3, #0]
9000fc62:	687b      	ldr	r3, [r7, #4]
9000fc64:	689b      	ldr	r3, [r3, #8]
9000fc66:	461a      	mov	r2, r3
9000fc68:	68f9      	ldr	r1, [r7, #12]
9000fc6a:	f7fe fb80 	bl	9000e36e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
9000fc6e:	68fb      	ldr	r3, [r7, #12]
9000fc70:	f103 021c 	add.w	r2, r3, #28
9000fc74:	687b      	ldr	r3, [r7, #4]
9000fc76:	68db      	ldr	r3, [r3, #12]
9000fc78:	4619      	mov	r1, r3
9000fc7a:	4610      	mov	r0, r2
9000fc7c:	f7fd fbf9 	bl	9000d472 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
9000fc80:	68fb      	ldr	r3, [r7, #12]
9000fc82:	3316      	adds	r3, #22
9000fc84:	6939      	ldr	r1, [r7, #16]
9000fc86:	4618      	mov	r0, r3
9000fc88:	f7fd fbf3 	bl	9000d472 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
9000fc8c:	68fb      	ldr	r3, [r7, #12]
9000fc8e:	3312      	adds	r3, #18
9000fc90:	2100      	movs	r1, #0
9000fc92:	4618      	mov	r0, r3
9000fc94:	f7fd fbd2 	bl	9000d43c <st_word>
					fs->wflag = 1;
9000fc98:	68bb      	ldr	r3, [r7, #8]
9000fc9a:	2201      	movs	r2, #1
9000fc9c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
9000fc9e:	68bb      	ldr	r3, [r7, #8]
9000fca0:	4618      	mov	r0, r3
9000fca2:	f7fd fe6f 	bl	9000d984 <sync_fs>
9000fca6:	4603      	mov	r3, r0
9000fca8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
9000fcaa:	687b      	ldr	r3, [r7, #4]
9000fcac:	7d1b      	ldrb	r3, [r3, #20]
9000fcae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
9000fcb2:	b2da      	uxtb	r2, r3
9000fcb4:	687b      	ldr	r3, [r7, #4]
9000fcb6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
9000fcb8:	7dfb      	ldrb	r3, [r7, #23]
}
9000fcba:	4618      	mov	r0, r3
9000fcbc:	3718      	adds	r7, #24
9000fcbe:	46bd      	mov	sp, r7
9000fcc0:	bd80      	pop	{r7, pc}

9000fcc2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
9000fcc2:	b580      	push	{r7, lr}
9000fcc4:	b084      	sub	sp, #16
9000fcc6:	af00      	add	r7, sp, #0
9000fcc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
9000fcca:	6878      	ldr	r0, [r7, #4]
9000fccc:	f7ff ff7b 	bl	9000fbc6 <f_sync>
9000fcd0:	4603      	mov	r3, r0
9000fcd2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
9000fcd4:	7bfb      	ldrb	r3, [r7, #15]
9000fcd6:	2b00      	cmp	r3, #0
9000fcd8:	d118      	bne.n	9000fd0c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
9000fcda:	687b      	ldr	r3, [r7, #4]
9000fcdc:	f107 0208 	add.w	r2, r7, #8
9000fce0:	4611      	mov	r1, r2
9000fce2:	4618      	mov	r0, r3
9000fce4:	f7ff fbb4 	bl	9000f450 <validate>
9000fce8:	4603      	mov	r3, r0
9000fcea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
9000fcec:	7bfb      	ldrb	r3, [r7, #15]
9000fcee:	2b00      	cmp	r3, #0
9000fcf0:	d10c      	bne.n	9000fd0c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
9000fcf2:	687b      	ldr	r3, [r7, #4]
9000fcf4:	691b      	ldr	r3, [r3, #16]
9000fcf6:	4618      	mov	r0, r3
9000fcf8:	f7fd fd72 	bl	9000d7e0 <dec_lock>
9000fcfc:	4603      	mov	r3, r0
9000fcfe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
9000fd00:	7bfb      	ldrb	r3, [r7, #15]
9000fd02:	2b00      	cmp	r3, #0
9000fd04:	d102      	bne.n	9000fd0c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
9000fd06:	687b      	ldr	r3, [r7, #4]
9000fd08:	2200      	movs	r2, #0
9000fd0a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
9000fd0c:	7bfb      	ldrb	r3, [r7, #15]
}
9000fd0e:	4618      	mov	r0, r3
9000fd10:	3710      	adds	r7, #16
9000fd12:	46bd      	mov	sp, r7
9000fd14:	bd80      	pop	{r7, pc}
	...

9000fd18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
9000fd18:	b480      	push	{r7}
9000fd1a:	b087      	sub	sp, #28
9000fd1c:	af00      	add	r7, sp, #0
9000fd1e:	60f8      	str	r0, [r7, #12]
9000fd20:	60b9      	str	r1, [r7, #8]
9000fd22:	4613      	mov	r3, r2
9000fd24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
9000fd26:	2301      	movs	r3, #1
9000fd28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
9000fd2a:	2300      	movs	r3, #0
9000fd2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
9000fd2e:	4b1f      	ldr	r3, [pc, #124]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd30:	7a5b      	ldrb	r3, [r3, #9]
9000fd32:	b2db      	uxtb	r3, r3
9000fd34:	2b00      	cmp	r3, #0
9000fd36:	d131      	bne.n	9000fd9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
9000fd38:	4b1c      	ldr	r3, [pc, #112]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd3a:	7a5b      	ldrb	r3, [r3, #9]
9000fd3c:	b2db      	uxtb	r3, r3
9000fd3e:	461a      	mov	r2, r3
9000fd40:	4b1a      	ldr	r3, [pc, #104]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd42:	2100      	movs	r1, #0
9000fd44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
9000fd46:	4b19      	ldr	r3, [pc, #100]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd48:	7a5b      	ldrb	r3, [r3, #9]
9000fd4a:	b2db      	uxtb	r3, r3
9000fd4c:	4a17      	ldr	r2, [pc, #92]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd4e:	009b      	lsls	r3, r3, #2
9000fd50:	4413      	add	r3, r2
9000fd52:	68fa      	ldr	r2, [r7, #12]
9000fd54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
9000fd56:	4b15      	ldr	r3, [pc, #84]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd58:	7a5b      	ldrb	r3, [r3, #9]
9000fd5a:	b2db      	uxtb	r3, r3
9000fd5c:	461a      	mov	r2, r3
9000fd5e:	4b13      	ldr	r3, [pc, #76]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd60:	4413      	add	r3, r2
9000fd62:	79fa      	ldrb	r2, [r7, #7]
9000fd64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
9000fd66:	4b11      	ldr	r3, [pc, #68]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd68:	7a5b      	ldrb	r3, [r3, #9]
9000fd6a:	b2db      	uxtb	r3, r3
9000fd6c:	1c5a      	adds	r2, r3, #1
9000fd6e:	b2d1      	uxtb	r1, r2
9000fd70:	4a0e      	ldr	r2, [pc, #56]	@ (9000fdac <FATFS_LinkDriverEx+0x94>)
9000fd72:	7251      	strb	r1, [r2, #9]
9000fd74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
9000fd76:	7dbb      	ldrb	r3, [r7, #22]
9000fd78:	3330      	adds	r3, #48	@ 0x30
9000fd7a:	b2da      	uxtb	r2, r3
9000fd7c:	68bb      	ldr	r3, [r7, #8]
9000fd7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
9000fd80:	68bb      	ldr	r3, [r7, #8]
9000fd82:	3301      	adds	r3, #1
9000fd84:	223a      	movs	r2, #58	@ 0x3a
9000fd86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
9000fd88:	68bb      	ldr	r3, [r7, #8]
9000fd8a:	3302      	adds	r3, #2
9000fd8c:	222f      	movs	r2, #47	@ 0x2f
9000fd8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
9000fd90:	68bb      	ldr	r3, [r7, #8]
9000fd92:	3303      	adds	r3, #3
9000fd94:	2200      	movs	r2, #0
9000fd96:	701a      	strb	r2, [r3, #0]
    ret = 0;
9000fd98:	2300      	movs	r3, #0
9000fd9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
9000fd9c:	7dfb      	ldrb	r3, [r7, #23]
}
9000fd9e:	4618      	mov	r0, r3
9000fda0:	371c      	adds	r7, #28
9000fda2:	46bd      	mov	sp, r7
9000fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000fda8:	4770      	bx	lr
9000fdaa:	bf00      	nop
9000fdac:	20001eb0 	.word	0x20001eb0

9000fdb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
9000fdb0:	b580      	push	{r7, lr}
9000fdb2:	b082      	sub	sp, #8
9000fdb4:	af00      	add	r7, sp, #0
9000fdb6:	6078      	str	r0, [r7, #4]
9000fdb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
9000fdba:	2200      	movs	r2, #0
9000fdbc:	6839      	ldr	r1, [r7, #0]
9000fdbe:	6878      	ldr	r0, [r7, #4]
9000fdc0:	f7ff ffaa 	bl	9000fd18 <FATFS_LinkDriverEx>
9000fdc4:	4603      	mov	r3, r0
}
9000fdc6:	4618      	mov	r0, r3
9000fdc8:	3708      	adds	r7, #8
9000fdca:	46bd      	mov	sp, r7
9000fdcc:	bd80      	pop	{r7, pc}

9000fdce <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
9000fdce:	b580      	push	{r7, lr}
9000fdd0:	b082      	sub	sp, #8
9000fdd2:	af00      	add	r7, sp, #0
9000fdd4:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
9000fdd6:	6878      	ldr	r0, [r7, #4]
9000fdd8:	f003 ffa2 	bl	90013d20 <malloc>
9000fddc:	4603      	mov	r3, r0
}
9000fdde:	4618      	mov	r0, r3
9000fde0:	3708      	adds	r7, #8
9000fde2:	46bd      	mov	sp, r7
9000fde4:	bd80      	pop	{r7, pc}

9000fde6 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
9000fde6:	b580      	push	{r7, lr}
9000fde8:	b082      	sub	sp, #8
9000fdea:	af00      	add	r7, sp, #0
9000fdec:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
9000fdee:	6878      	ldr	r0, [r7, #4]
9000fdf0:	f003 ff9e 	bl	90013d30 <free>
}
9000fdf4:	bf00      	nop
9000fdf6:	3708      	adds	r7, #8
9000fdf8:	46bd      	mov	sp, r7
9000fdfa:	bd80      	pop	{r7, pc}

9000fdfc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
9000fdfc:	b480      	push	{r7}
9000fdfe:	b085      	sub	sp, #20
9000fe00:	af00      	add	r7, sp, #0
9000fe02:	4603      	mov	r3, r0
9000fe04:	6039      	str	r1, [r7, #0]
9000fe06:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
9000fe08:	88fb      	ldrh	r3, [r7, #6]
9000fe0a:	2b7f      	cmp	r3, #127	@ 0x7f
9000fe0c:	d802      	bhi.n	9000fe14 <ff_convert+0x18>
		c = chr;
9000fe0e:	88fb      	ldrh	r3, [r7, #6]
9000fe10:	81fb      	strh	r3, [r7, #14]
9000fe12:	e025      	b.n	9000fe60 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
9000fe14:	683b      	ldr	r3, [r7, #0]
9000fe16:	2b00      	cmp	r3, #0
9000fe18:	d00b      	beq.n	9000fe32 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
9000fe1a:	88fb      	ldrh	r3, [r7, #6]
9000fe1c:	2bff      	cmp	r3, #255	@ 0xff
9000fe1e:	d805      	bhi.n	9000fe2c <ff_convert+0x30>
9000fe20:	88fb      	ldrh	r3, [r7, #6]
9000fe22:	3b80      	subs	r3, #128	@ 0x80
9000fe24:	4a12      	ldr	r2, [pc, #72]	@ (9000fe70 <ff_convert+0x74>)
9000fe26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000fe2a:	e000      	b.n	9000fe2e <ff_convert+0x32>
9000fe2c:	2300      	movs	r3, #0
9000fe2e:	81fb      	strh	r3, [r7, #14]
9000fe30:	e016      	b.n	9000fe60 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
9000fe32:	2300      	movs	r3, #0
9000fe34:	81fb      	strh	r3, [r7, #14]
9000fe36:	e009      	b.n	9000fe4c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
9000fe38:	89fb      	ldrh	r3, [r7, #14]
9000fe3a:	4a0d      	ldr	r2, [pc, #52]	@ (9000fe70 <ff_convert+0x74>)
9000fe3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000fe40:	88fa      	ldrh	r2, [r7, #6]
9000fe42:	429a      	cmp	r2, r3
9000fe44:	d006      	beq.n	9000fe54 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
9000fe46:	89fb      	ldrh	r3, [r7, #14]
9000fe48:	3301      	adds	r3, #1
9000fe4a:	81fb      	strh	r3, [r7, #14]
9000fe4c:	89fb      	ldrh	r3, [r7, #14]
9000fe4e:	2b7f      	cmp	r3, #127	@ 0x7f
9000fe50:	d9f2      	bls.n	9000fe38 <ff_convert+0x3c>
9000fe52:	e000      	b.n	9000fe56 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
9000fe54:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
9000fe56:	89fb      	ldrh	r3, [r7, #14]
9000fe58:	3380      	adds	r3, #128	@ 0x80
9000fe5a:	b29b      	uxth	r3, r3
9000fe5c:	b2db      	uxtb	r3, r3
9000fe5e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
9000fe60:	89fb      	ldrh	r3, [r7, #14]
}
9000fe62:	4618      	mov	r0, r3
9000fe64:	3714      	adds	r7, #20
9000fe66:	46bd      	mov	sp, r7
9000fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
9000fe6c:	4770      	bx	lr
9000fe6e:	bf00      	nop
9000fe70:	9001422c 	.word	0x9001422c

9000fe74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
9000fe74:	b480      	push	{r7}
9000fe76:	b087      	sub	sp, #28
9000fe78:	af00      	add	r7, sp, #0
9000fe7a:	4603      	mov	r3, r0
9000fe7c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
9000fe7e:	88fb      	ldrh	r3, [r7, #6]
9000fe80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000fe84:	d201      	bcs.n	9000fe8a <ff_wtoupper+0x16>
9000fe86:	4b3e      	ldr	r3, [pc, #248]	@ (9000ff80 <ff_wtoupper+0x10c>)
9000fe88:	e000      	b.n	9000fe8c <ff_wtoupper+0x18>
9000fe8a:	4b3e      	ldr	r3, [pc, #248]	@ (9000ff84 <ff_wtoupper+0x110>)
9000fe8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
9000fe8e:	697b      	ldr	r3, [r7, #20]
9000fe90:	1c9a      	adds	r2, r3, #2
9000fe92:	617a      	str	r2, [r7, #20]
9000fe94:	881b      	ldrh	r3, [r3, #0]
9000fe96:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
9000fe98:	8a7b      	ldrh	r3, [r7, #18]
9000fe9a:	2b00      	cmp	r3, #0
9000fe9c:	d068      	beq.n	9000ff70 <ff_wtoupper+0xfc>
9000fe9e:	88fa      	ldrh	r2, [r7, #6]
9000fea0:	8a7b      	ldrh	r3, [r7, #18]
9000fea2:	429a      	cmp	r2, r3
9000fea4:	d364      	bcc.n	9000ff70 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
9000fea6:	697b      	ldr	r3, [r7, #20]
9000fea8:	1c9a      	adds	r2, r3, #2
9000feaa:	617a      	str	r2, [r7, #20]
9000feac:	881b      	ldrh	r3, [r3, #0]
9000feae:	823b      	strh	r3, [r7, #16]
9000feb0:	8a3b      	ldrh	r3, [r7, #16]
9000feb2:	0a1b      	lsrs	r3, r3, #8
9000feb4:	81fb      	strh	r3, [r7, #14]
9000feb6:	8a3b      	ldrh	r3, [r7, #16]
9000feb8:	b2db      	uxtb	r3, r3
9000feba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
9000febc:	88fa      	ldrh	r2, [r7, #6]
9000febe:	8a79      	ldrh	r1, [r7, #18]
9000fec0:	8a3b      	ldrh	r3, [r7, #16]
9000fec2:	440b      	add	r3, r1
9000fec4:	429a      	cmp	r2, r3
9000fec6:	da49      	bge.n	9000ff5c <ff_wtoupper+0xe8>
			switch (cmd) {
9000fec8:	89fb      	ldrh	r3, [r7, #14]
9000feca:	2b08      	cmp	r3, #8
9000fecc:	d84f      	bhi.n	9000ff6e <ff_wtoupper+0xfa>
9000fece:	a201      	add	r2, pc, #4	@ (adr r2, 9000fed4 <ff_wtoupper+0x60>)
9000fed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000fed4:	9000fef9 	.word	0x9000fef9
9000fed8:	9000ff0b 	.word	0x9000ff0b
9000fedc:	9000ff21 	.word	0x9000ff21
9000fee0:	9000ff29 	.word	0x9000ff29
9000fee4:	9000ff31 	.word	0x9000ff31
9000fee8:	9000ff39 	.word	0x9000ff39
9000feec:	9000ff41 	.word	0x9000ff41
9000fef0:	9000ff49 	.word	0x9000ff49
9000fef4:	9000ff51 	.word	0x9000ff51
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
9000fef8:	88fa      	ldrh	r2, [r7, #6]
9000fefa:	8a7b      	ldrh	r3, [r7, #18]
9000fefc:	1ad3      	subs	r3, r2, r3
9000fefe:	005b      	lsls	r3, r3, #1
9000ff00:	697a      	ldr	r2, [r7, #20]
9000ff02:	4413      	add	r3, r2
9000ff04:	881b      	ldrh	r3, [r3, #0]
9000ff06:	80fb      	strh	r3, [r7, #6]
9000ff08:	e027      	b.n	9000ff5a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
9000ff0a:	88fa      	ldrh	r2, [r7, #6]
9000ff0c:	8a7b      	ldrh	r3, [r7, #18]
9000ff0e:	1ad3      	subs	r3, r2, r3
9000ff10:	b29b      	uxth	r3, r3
9000ff12:	f003 0301 	and.w	r3, r3, #1
9000ff16:	b29b      	uxth	r3, r3
9000ff18:	88fa      	ldrh	r2, [r7, #6]
9000ff1a:	1ad3      	subs	r3, r2, r3
9000ff1c:	80fb      	strh	r3, [r7, #6]
9000ff1e:	e01c      	b.n	9000ff5a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
9000ff20:	88fb      	ldrh	r3, [r7, #6]
9000ff22:	3b10      	subs	r3, #16
9000ff24:	80fb      	strh	r3, [r7, #6]
9000ff26:	e018      	b.n	9000ff5a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
9000ff28:	88fb      	ldrh	r3, [r7, #6]
9000ff2a:	3b20      	subs	r3, #32
9000ff2c:	80fb      	strh	r3, [r7, #6]
9000ff2e:	e014      	b.n	9000ff5a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
9000ff30:	88fb      	ldrh	r3, [r7, #6]
9000ff32:	3b30      	subs	r3, #48	@ 0x30
9000ff34:	80fb      	strh	r3, [r7, #6]
9000ff36:	e010      	b.n	9000ff5a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
9000ff38:	88fb      	ldrh	r3, [r7, #6]
9000ff3a:	3b1a      	subs	r3, #26
9000ff3c:	80fb      	strh	r3, [r7, #6]
9000ff3e:	e00c      	b.n	9000ff5a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
9000ff40:	88fb      	ldrh	r3, [r7, #6]
9000ff42:	3308      	adds	r3, #8
9000ff44:	80fb      	strh	r3, [r7, #6]
9000ff46:	e008      	b.n	9000ff5a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
9000ff48:	88fb      	ldrh	r3, [r7, #6]
9000ff4a:	3b50      	subs	r3, #80	@ 0x50
9000ff4c:	80fb      	strh	r3, [r7, #6]
9000ff4e:	e004      	b.n	9000ff5a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
9000ff50:	88fb      	ldrh	r3, [r7, #6]
9000ff52:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
9000ff56:	80fb      	strh	r3, [r7, #6]
9000ff58:	bf00      	nop
			}
			break;
9000ff5a:	e008      	b.n	9000ff6e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
9000ff5c:	89fb      	ldrh	r3, [r7, #14]
9000ff5e:	2b00      	cmp	r3, #0
9000ff60:	d195      	bne.n	9000fe8e <ff_wtoupper+0x1a>
9000ff62:	8a3b      	ldrh	r3, [r7, #16]
9000ff64:	005b      	lsls	r3, r3, #1
9000ff66:	697a      	ldr	r2, [r7, #20]
9000ff68:	4413      	add	r3, r2
9000ff6a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
9000ff6c:	e78f      	b.n	9000fe8e <ff_wtoupper+0x1a>
			break;
9000ff6e:	bf00      	nop
	}

	return chr;
9000ff70:	88fb      	ldrh	r3, [r7, #6]
}
9000ff72:	4618      	mov	r0, r3
9000ff74:	371c      	adds	r7, #28
9000ff76:	46bd      	mov	sp, r7
9000ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ff7c:	4770      	bx	lr
9000ff7e:	bf00      	nop
9000ff80:	9001432c 	.word	0x9001432c
9000ff84:	90014520 	.word	0x90014520

9000ff88 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
9000ff88:	b590      	push	{r4, r7, lr}
9000ff8a:	b089      	sub	sp, #36	@ 0x24
9000ff8c:	af04      	add	r7, sp, #16
9000ff8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
9000ff90:	687b      	ldr	r3, [r7, #4]
9000ff92:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000ff96:	7919      	ldrb	r1, [r3, #4]
9000ff98:	2350      	movs	r3, #80	@ 0x50
9000ff9a:	2206      	movs	r2, #6
9000ff9c:	6878      	ldr	r0, [r7, #4]
9000ff9e:	f001 fcd7 	bl	90011950 <USBH_FindInterface>
9000ffa2:	4603      	mov	r3, r0
9000ffa4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
9000ffa6:	7bfb      	ldrb	r3, [r7, #15]
9000ffa8:	2bff      	cmp	r3, #255	@ 0xff
9000ffaa:	d002      	beq.n	9000ffb2 <USBH_MSC_InterfaceInit+0x2a>
9000ffac:	7bfb      	ldrb	r3, [r7, #15]
9000ffae:	2b01      	cmp	r3, #1
9000ffb0:	d901      	bls.n	9000ffb6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
9000ffb2:	2302      	movs	r3, #2
9000ffb4:	e106      	b.n	900101c4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
9000ffb6:	7bfb      	ldrb	r3, [r7, #15]
9000ffb8:	4619      	mov	r1, r3
9000ffba:	6878      	ldr	r0, [r7, #4]
9000ffbc:	f001 fcac 	bl	90011918 <USBH_SelectInterface>
9000ffc0:	4603      	mov	r3, r0
9000ffc2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
9000ffc4:	7bbb      	ldrb	r3, [r7, #14]
9000ffc6:	2b00      	cmp	r3, #0
9000ffc8:	d001      	beq.n	9000ffce <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
9000ffca:	2302      	movs	r3, #2
9000ffcc:	e0fa      	b.n	900101c4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
9000ffce:	687b      	ldr	r3, [r7, #4]
9000ffd0:	f8d3 447c 	ldr.w	r4, [r3, #1148]	@ 0x47c
9000ffd4:	f44f 7082 	mov.w	r0, #260	@ 0x104
9000ffd8:	f003 fea2 	bl	90013d20 <malloc>
9000ffdc:	4603      	mov	r3, r0
9000ffde:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000ffe0:	687b      	ldr	r3, [r7, #4]
9000ffe2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000ffe6:	69db      	ldr	r3, [r3, #28]
9000ffe8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
9000ffea:	68bb      	ldr	r3, [r7, #8]
9000ffec:	2b00      	cmp	r3, #0
9000ffee:	d101      	bne.n	9000fff4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
9000fff0:	2302      	movs	r3, #2
9000fff2:	e0e7      	b.n	900101c4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
9000fff4:	f44f 7282 	mov.w	r2, #260	@ 0x104
9000fff8:	2100      	movs	r1, #0
9000fffa:	68b8      	ldr	r0, [r7, #8]
9000fffc:	f003 ff4e 	bl	90013e9c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
90010000:	7bfb      	ldrb	r3, [r7, #15]
90010002:	687a      	ldr	r2, [r7, #4]
90010004:	211a      	movs	r1, #26
90010006:	fb01 f303 	mul.w	r3, r1, r3
9001000a:	4413      	add	r3, r2
9001000c:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
90010010:	781b      	ldrb	r3, [r3, #0]
90010012:	b25b      	sxtb	r3, r3
90010014:	2b00      	cmp	r3, #0
90010016:	da16      	bge.n	90010046 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
90010018:	7bfb      	ldrb	r3, [r7, #15]
9001001a:	687a      	ldr	r2, [r7, #4]
9001001c:	211a      	movs	r1, #26
9001001e:	fb01 f303 	mul.w	r3, r1, r3
90010022:	4413      	add	r3, r2
90010024:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
90010028:	781a      	ldrb	r2, [r3, #0]
9001002a:	68bb      	ldr	r3, [r7, #8]
9001002c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
9001002e:	7bfb      	ldrb	r3, [r7, #15]
90010030:	687a      	ldr	r2, [r7, #4]
90010032:	211a      	movs	r1, #26
90010034:	fb01 f303 	mul.w	r3, r1, r3
90010038:	4413      	add	r3, r2
9001003a:	f503 638a 	add.w	r3, r3, #1104	@ 0x450
9001003e:	881a      	ldrh	r2, [r3, #0]
90010040:	68bb      	ldr	r3, [r7, #8]
90010042:	815a      	strh	r2, [r3, #10]
90010044:	e015      	b.n	90010072 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
90010046:	7bfb      	ldrb	r3, [r7, #15]
90010048:	687a      	ldr	r2, [r7, #4]
9001004a:	211a      	movs	r1, #26
9001004c:	fb01 f303 	mul.w	r3, r1, r3
90010050:	4413      	add	r3, r2
90010052:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
90010056:	781a      	ldrb	r2, [r3, #0]
90010058:	68bb      	ldr	r3, [r7, #8]
9001005a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
9001005c:	7bfb      	ldrb	r3, [r7, #15]
9001005e:	687a      	ldr	r2, [r7, #4]
90010060:	211a      	movs	r1, #26
90010062:	fb01 f303 	mul.w	r3, r1, r3
90010066:	4413      	add	r3, r2
90010068:	f503 638a 	add.w	r3, r3, #1104	@ 0x450
9001006c:	881a      	ldrh	r2, [r3, #0]
9001006e:	68bb      	ldr	r3, [r7, #8]
90010070:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
90010072:	7bfb      	ldrb	r3, [r7, #15]
90010074:	687a      	ldr	r2, [r7, #4]
90010076:	211a      	movs	r1, #26
90010078:	fb01 f303 	mul.w	r3, r1, r3
9001007c:	4413      	add	r3, r2
9001007e:	f203 4356 	addw	r3, r3, #1110	@ 0x456
90010082:	781b      	ldrb	r3, [r3, #0]
90010084:	b25b      	sxtb	r3, r3
90010086:	2b00      	cmp	r3, #0
90010088:	da16      	bge.n	900100b8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
9001008a:	7bfb      	ldrb	r3, [r7, #15]
9001008c:	687a      	ldr	r2, [r7, #4]
9001008e:	211a      	movs	r1, #26
90010090:	fb01 f303 	mul.w	r3, r1, r3
90010094:	4413      	add	r3, r2
90010096:	f203 4356 	addw	r3, r3, #1110	@ 0x456
9001009a:	781a      	ldrb	r2, [r3, #0]
9001009c:	68bb      	ldr	r3, [r7, #8]
9001009e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
900100a0:	7bfb      	ldrb	r3, [r7, #15]
900100a2:	687a      	ldr	r2, [r7, #4]
900100a4:	211a      	movs	r1, #26
900100a6:	fb01 f303 	mul.w	r3, r1, r3
900100aa:	4413      	add	r3, r2
900100ac:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
900100b0:	881a      	ldrh	r2, [r3, #0]
900100b2:	68bb      	ldr	r3, [r7, #8]
900100b4:	815a      	strh	r2, [r3, #10]
900100b6:	e015      	b.n	900100e4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
900100b8:	7bfb      	ldrb	r3, [r7, #15]
900100ba:	687a      	ldr	r2, [r7, #4]
900100bc:	211a      	movs	r1, #26
900100be:	fb01 f303 	mul.w	r3, r1, r3
900100c2:	4413      	add	r3, r2
900100c4:	f203 4356 	addw	r3, r3, #1110	@ 0x456
900100c8:	781a      	ldrb	r2, [r3, #0]
900100ca:	68bb      	ldr	r3, [r7, #8]
900100cc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
900100ce:	7bfb      	ldrb	r3, [r7, #15]
900100d0:	687a      	ldr	r2, [r7, #4]
900100d2:	211a      	movs	r1, #26
900100d4:	fb01 f303 	mul.w	r3, r1, r3
900100d8:	4413      	add	r3, r2
900100da:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
900100de:	881a      	ldrh	r2, [r3, #0]
900100e0:	68bb      	ldr	r3, [r7, #8]
900100e2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
900100e4:	68bb      	ldr	r3, [r7, #8]
900100e6:	2200      	movs	r2, #0
900100e8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
900100ea:	68bb      	ldr	r3, [r7, #8]
900100ec:	2200      	movs	r2, #0
900100ee:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
900100f0:	68bb      	ldr	r3, [r7, #8]
900100f2:	2200      	movs	r2, #0
900100f4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
900100f6:	68bb      	ldr	r3, [r7, #8]
900100f8:	799b      	ldrb	r3, [r3, #6]
900100fa:	4619      	mov	r1, r3
900100fc:	6878      	ldr	r0, [r7, #4]
900100fe:	f002 ffbe 	bl	9001307e <USBH_AllocPipe>
90010102:	4603      	mov	r3, r0
90010104:	461a      	mov	r2, r3
90010106:	68bb      	ldr	r3, [r7, #8]
90010108:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
9001010a:	68bb      	ldr	r3, [r7, #8]
9001010c:	79db      	ldrb	r3, [r3, #7]
9001010e:	4619      	mov	r1, r3
90010110:	6878      	ldr	r0, [r7, #4]
90010112:	f002 ffb4 	bl	9001307e <USBH_AllocPipe>
90010116:	4603      	mov	r3, r0
90010118:	461a      	mov	r2, r3
9001011a:	68bb      	ldr	r3, [r7, #8]
9001011c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
9001011e:	6878      	ldr	r0, [r7, #4]
90010120:	f000 fe02 	bl	90010d28 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
90010124:	68bb      	ldr	r3, [r7, #8]
90010126:	799b      	ldrb	r3, [r3, #6]
90010128:	2b00      	cmp	r3, #0
9001012a:	d01e      	beq.n	9001016a <USBH_MSC_InterfaceInit+0x1e2>
9001012c:	68bb      	ldr	r3, [r7, #8]
9001012e:	891b      	ldrh	r3, [r3, #8]
90010130:	2b00      	cmp	r3, #0
90010132:	d01a      	beq.n	9001016a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
90010134:	68bb      	ldr	r3, [r7, #8]
90010136:	7959      	ldrb	r1, [r3, #5]
90010138:	68bb      	ldr	r3, [r7, #8]
9001013a:	7998      	ldrb	r0, [r3, #6]
9001013c:	687b      	ldr	r3, [r7, #4]
9001013e:	f893 441c 	ldrb.w	r4, [r3, #1052]	@ 0x41c
90010142:	687b      	ldr	r3, [r7, #4]
90010144:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
90010148:	68ba      	ldr	r2, [r7, #8]
9001014a:	8912      	ldrh	r2, [r2, #8]
9001014c:	9202      	str	r2, [sp, #8]
9001014e:	2202      	movs	r2, #2
90010150:	9201      	str	r2, [sp, #4]
90010152:	9300      	str	r3, [sp, #0]
90010154:	4623      	mov	r3, r4
90010156:	4602      	mov	r2, r0
90010158:	6878      	ldr	r0, [r7, #4]
9001015a:	f002 ff61 	bl	90013020 <USBH_OpenPipe>
9001015e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
90010160:	68bb      	ldr	r3, [r7, #8]
90010162:	79db      	ldrb	r3, [r3, #7]
90010164:	2b00      	cmp	r3, #0
90010166:	d02c      	beq.n	900101c2 <USBH_MSC_InterfaceInit+0x23a>
90010168:	e001      	b.n	9001016e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
9001016a:	2303      	movs	r3, #3
9001016c:	e02a      	b.n	900101c4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
9001016e:	68bb      	ldr	r3, [r7, #8]
90010170:	895b      	ldrh	r3, [r3, #10]
90010172:	2b00      	cmp	r3, #0
90010174:	d025      	beq.n	900101c2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
90010176:	68bb      	ldr	r3, [r7, #8]
90010178:	7919      	ldrb	r1, [r3, #4]
9001017a:	68bb      	ldr	r3, [r7, #8]
9001017c:	79d8      	ldrb	r0, [r3, #7]
9001017e:	687b      	ldr	r3, [r7, #4]
90010180:	f893 441c 	ldrb.w	r4, [r3, #1052]	@ 0x41c
90010184:	687b      	ldr	r3, [r7, #4]
90010186:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
9001018a:	68ba      	ldr	r2, [r7, #8]
9001018c:	8952      	ldrh	r2, [r2, #10]
9001018e:	9202      	str	r2, [sp, #8]
90010190:	2202      	movs	r2, #2
90010192:	9201      	str	r2, [sp, #4]
90010194:	9300      	str	r3, [sp, #0]
90010196:	4623      	mov	r3, r4
90010198:	4602      	mov	r2, r0
9001019a:	6878      	ldr	r0, [r7, #4]
9001019c:	f002 ff40 	bl	90013020 <USBH_OpenPipe>
900101a0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
900101a2:	68bb      	ldr	r3, [r7, #8]
900101a4:	791b      	ldrb	r3, [r3, #4]
900101a6:	2200      	movs	r2, #0
900101a8:	4619      	mov	r1, r3
900101aa:	6878      	ldr	r0, [r7, #4]
900101ac:	f7f1 fd84 	bl	90001cb8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
900101b0:	68bb      	ldr	r3, [r7, #8]
900101b2:	795b      	ldrb	r3, [r3, #5]
900101b4:	2200      	movs	r2, #0
900101b6:	4619      	mov	r1, r3
900101b8:	6878      	ldr	r0, [r7, #4]
900101ba:	f7f1 fd7d 	bl	90001cb8 <USBH_LL_SetToggle>

  return USBH_OK;
900101be:	2300      	movs	r3, #0
900101c0:	e000      	b.n	900101c4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
900101c2:	2303      	movs	r3, #3
}
900101c4:	4618      	mov	r0, r3
900101c6:	3714      	adds	r7, #20
900101c8:	46bd      	mov	sp, r7
900101ca:	bd90      	pop	{r4, r7, pc}

900101cc <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
900101cc:	b580      	push	{r7, lr}
900101ce:	b084      	sub	sp, #16
900101d0:	af00      	add	r7, sp, #0
900101d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900101d4:	687b      	ldr	r3, [r7, #4]
900101d6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
900101da:	69db      	ldr	r3, [r3, #28]
900101dc:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
900101de:	68fb      	ldr	r3, [r7, #12]
900101e0:	795b      	ldrb	r3, [r3, #5]
900101e2:	2b00      	cmp	r3, #0
900101e4:	d00e      	beq.n	90010204 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
900101e6:	68fb      	ldr	r3, [r7, #12]
900101e8:	795b      	ldrb	r3, [r3, #5]
900101ea:	4619      	mov	r1, r3
900101ec:	6878      	ldr	r0, [r7, #4]
900101ee:	f002 ff36 	bl	9001305e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
900101f2:	68fb      	ldr	r3, [r7, #12]
900101f4:	795b      	ldrb	r3, [r3, #5]
900101f6:	4619      	mov	r1, r3
900101f8:	6878      	ldr	r0, [r7, #4]
900101fa:	f002 ff62 	bl	900130c2 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
900101fe:	68fb      	ldr	r3, [r7, #12]
90010200:	2200      	movs	r2, #0
90010202:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
90010204:	68fb      	ldr	r3, [r7, #12]
90010206:	791b      	ldrb	r3, [r3, #4]
90010208:	2b00      	cmp	r3, #0
9001020a:	d00e      	beq.n	9001022a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
9001020c:	68fb      	ldr	r3, [r7, #12]
9001020e:	791b      	ldrb	r3, [r3, #4]
90010210:	4619      	mov	r1, r3
90010212:	6878      	ldr	r0, [r7, #4]
90010214:	f002 ff23 	bl	9001305e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
90010218:	68fb      	ldr	r3, [r7, #12]
9001021a:	791b      	ldrb	r3, [r3, #4]
9001021c:	4619      	mov	r1, r3
9001021e:	6878      	ldr	r0, [r7, #4]
90010220:	f002 ff4f 	bl	900130c2 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
90010224:	68fb      	ldr	r3, [r7, #12]
90010226:	2200      	movs	r2, #0
90010228:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
9001022a:	687b      	ldr	r3, [r7, #4]
9001022c:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010230:	69db      	ldr	r3, [r3, #28]
90010232:	2b00      	cmp	r3, #0
90010234:	d00b      	beq.n	9001024e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
90010236:	687b      	ldr	r3, [r7, #4]
90010238:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9001023c:	69db      	ldr	r3, [r3, #28]
9001023e:	4618      	mov	r0, r3
90010240:	f003 fd76 	bl	90013d30 <free>
    phost->pActiveClass->pData = 0U;
90010244:	687b      	ldr	r3, [r7, #4]
90010246:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9001024a:	2200      	movs	r2, #0
9001024c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
9001024e:	2300      	movs	r3, #0
}
90010250:	4618      	mov	r0, r3
90010252:	3710      	adds	r7, #16
90010254:	46bd      	mov	sp, r7
90010256:	bd80      	pop	{r7, pc}

90010258 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
90010258:	b580      	push	{r7, lr}
9001025a:	b084      	sub	sp, #16
9001025c:	af00      	add	r7, sp, #0
9001025e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90010260:	687b      	ldr	r3, [r7, #4]
90010262:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010266:	69db      	ldr	r3, [r3, #28]
90010268:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
9001026a:	2301      	movs	r3, #1
9001026c:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
9001026e:	68bb      	ldr	r3, [r7, #8]
90010270:	7b9b      	ldrb	r3, [r3, #14]
90010272:	2b03      	cmp	r3, #3
90010274:	d041      	beq.n	900102fa <USBH_MSC_ClassRequest+0xa2>
90010276:	2b03      	cmp	r3, #3
90010278:	dc4b      	bgt.n	90010312 <USBH_MSC_ClassRequest+0xba>
9001027a:	2b00      	cmp	r3, #0
9001027c:	d001      	beq.n	90010282 <USBH_MSC_ClassRequest+0x2a>
9001027e:	2b02      	cmp	r3, #2
90010280:	d147      	bne.n	90010312 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
90010282:	68bb      	ldr	r3, [r7, #8]
90010284:	4619      	mov	r1, r3
90010286:	6878      	ldr	r0, [r7, #4]
90010288:	f000 fd30 	bl	90010cec <USBH_MSC_BOT_REQ_GetMaxLUN>
9001028c:	4603      	mov	r3, r0
9001028e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
90010290:	7bfb      	ldrb	r3, [r7, #15]
90010292:	2b03      	cmp	r3, #3
90010294:	d104      	bne.n	900102a0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
90010296:	68bb      	ldr	r3, [r7, #8]
90010298:	2200      	movs	r2, #0
9001029a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
9001029c:	2300      	movs	r3, #0
9001029e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
900102a0:	7bfb      	ldrb	r3, [r7, #15]
900102a2:	2b00      	cmp	r3, #0
900102a4:	d137      	bne.n	90010316 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
900102a6:	68bb      	ldr	r3, [r7, #8]
900102a8:	781b      	ldrb	r3, [r3, #0]
900102aa:	2b02      	cmp	r3, #2
900102ac:	d804      	bhi.n	900102b8 <USBH_MSC_ClassRequest+0x60>
900102ae:	68bb      	ldr	r3, [r7, #8]
900102b0:	781b      	ldrb	r3, [r3, #0]
900102b2:	3301      	adds	r3, #1
900102b4:	b2da      	uxtb	r2, r3
900102b6:	e000      	b.n	900102ba <USBH_MSC_ClassRequest+0x62>
900102b8:	2202      	movs	r2, #2
900102ba:	68bb      	ldr	r3, [r7, #8]
900102bc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
900102be:	2300      	movs	r3, #0
900102c0:	73bb      	strb	r3, [r7, #14]
900102c2:	e014      	b.n	900102ee <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
900102c4:	7bbb      	ldrb	r3, [r7, #14]
900102c6:	68ba      	ldr	r2, [r7, #8]
900102c8:	2134      	movs	r1, #52	@ 0x34
900102ca:	fb01 f303 	mul.w	r3, r1, r3
900102ce:	4413      	add	r3, r2
900102d0:	3392      	adds	r3, #146	@ 0x92
900102d2:	2202      	movs	r2, #2
900102d4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
900102d6:	7bbb      	ldrb	r3, [r7, #14]
900102d8:	68ba      	ldr	r2, [r7, #8]
900102da:	2134      	movs	r1, #52	@ 0x34
900102dc:	fb01 f303 	mul.w	r3, r1, r3
900102e0:	4413      	add	r3, r2
900102e2:	33c1      	adds	r3, #193	@ 0xc1
900102e4:	2200      	movs	r2, #0
900102e6:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
900102e8:	7bbb      	ldrb	r3, [r7, #14]
900102ea:	3301      	adds	r3, #1
900102ec:	73bb      	strb	r3, [r7, #14]
900102ee:	68bb      	ldr	r3, [r7, #8]
900102f0:	781b      	ldrb	r3, [r3, #0]
900102f2:	7bba      	ldrb	r2, [r7, #14]
900102f4:	429a      	cmp	r2, r3
900102f6:	d3e5      	bcc.n	900102c4 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
900102f8:	e00d      	b.n	90010316 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
900102fa:	2100      	movs	r1, #0
900102fc:	6878      	ldr	r0, [r7, #4]
900102fe:	f002 f907 	bl	90012510 <USBH_ClrFeature>
90010302:	4603      	mov	r3, r0
90010304:	2b00      	cmp	r3, #0
90010306:	d108      	bne.n	9001031a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
90010308:	68bb      	ldr	r3, [r7, #8]
9001030a:	7bda      	ldrb	r2, [r3, #15]
9001030c:	68bb      	ldr	r3, [r7, #8]
9001030e:	739a      	strb	r2, [r3, #14]
      }
      break;
90010310:	e003      	b.n	9001031a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
90010312:	bf00      	nop
90010314:	e002      	b.n	9001031c <USBH_MSC_ClassRequest+0xc4>
      break;
90010316:	bf00      	nop
90010318:	e000      	b.n	9001031c <USBH_MSC_ClassRequest+0xc4>
      break;
9001031a:	bf00      	nop
  }

  return status;
9001031c:	7bfb      	ldrb	r3, [r7, #15]
}
9001031e:	4618      	mov	r0, r3
90010320:	3710      	adds	r7, #16
90010322:	46bd      	mov	sp, r7
90010324:	bd80      	pop	{r7, pc}
	...

90010328 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
90010328:	b580      	push	{r7, lr}
9001032a:	b086      	sub	sp, #24
9001032c:	af00      	add	r7, sp, #0
9001032e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90010330:	687b      	ldr	r3, [r7, #4]
90010332:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010336:	69db      	ldr	r3, [r3, #28]
90010338:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
9001033a:	2301      	movs	r3, #1
9001033c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
9001033e:	2301      	movs	r3, #1
90010340:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
90010342:	2301      	movs	r3, #1
90010344:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
90010346:	693b      	ldr	r3, [r7, #16]
90010348:	7b1b      	ldrb	r3, [r3, #12]
9001034a:	2b0a      	cmp	r3, #10
9001034c:	f000 8280 	beq.w	90010850 <USBH_MSC_Process+0x528>
90010350:	2b0a      	cmp	r3, #10
90010352:	f300 82b8 	bgt.w	900108c6 <USBH_MSC_Process+0x59e>
90010356:	2b00      	cmp	r3, #0
90010358:	d003      	beq.n	90010362 <USBH_MSC_Process+0x3a>
9001035a:	2b01      	cmp	r3, #1
9001035c:	f000 82b0 	beq.w	900108c0 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
90010360:	e2b1      	b.n	900108c6 <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
90010362:	693b      	ldr	r3, [r7, #16]
90010364:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010368:	693a      	ldr	r2, [r7, #16]
9001036a:	7812      	ldrb	r2, [r2, #0]
9001036c:	4293      	cmp	r3, r2
9001036e:	f080 825d 	bcs.w	9001082c <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
90010372:	693b      	ldr	r3, [r7, #16]
90010374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010378:	4619      	mov	r1, r3
9001037a:	693a      	ldr	r2, [r7, #16]
9001037c:	2334      	movs	r3, #52	@ 0x34
9001037e:	fb01 f303 	mul.w	r3, r1, r3
90010382:	4413      	add	r3, r2
90010384:	3391      	adds	r3, #145	@ 0x91
90010386:	2201      	movs	r2, #1
90010388:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
9001038a:	693b      	ldr	r3, [r7, #16]
9001038c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010390:	4619      	mov	r1, r3
90010392:	693a      	ldr	r2, [r7, #16]
90010394:	2334      	movs	r3, #52	@ 0x34
90010396:	fb01 f303 	mul.w	r3, r1, r3
9001039a:	4413      	add	r3, r2
9001039c:	3390      	adds	r3, #144	@ 0x90
9001039e:	781b      	ldrb	r3, [r3, #0]
900103a0:	2b08      	cmp	r3, #8
900103a2:	f200 824b 	bhi.w	9001083c <USBH_MSC_Process+0x514>
900103a6:	a201      	add	r2, pc, #4	@ (adr r2, 900103ac <USBH_MSC_Process+0x84>)
900103a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900103ac:	900103d1 	.word	0x900103d1
900103b0:	9001083d 	.word	0x9001083d
900103b4:	9001049b 	.word	0x9001049b
900103b8:	90010621 	.word	0x90010621
900103bc:	900103f7 	.word	0x900103f7
900103c0:	900106ed 	.word	0x900106ed
900103c4:	9001083d 	.word	0x9001083d
900103c8:	9001083d 	.word	0x9001083d
900103cc:	9001081b 	.word	0x9001081b
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
900103d0:	693b      	ldr	r3, [r7, #16]
900103d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900103d6:	4619      	mov	r1, r3
900103d8:	693a      	ldr	r2, [r7, #16]
900103da:	2334      	movs	r3, #52	@ 0x34
900103dc:	fb01 f303 	mul.w	r3, r1, r3
900103e0:	4413      	add	r3, r2
900103e2:	3390      	adds	r3, #144	@ 0x90
900103e4:	2204      	movs	r2, #4
900103e6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
900103e8:	687b      	ldr	r3, [r7, #4]
900103ea:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
900103ee:	693b      	ldr	r3, [r7, #16]
900103f0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
900103f4:	e22b      	b.n	9001084e <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
900103f6:	693b      	ldr	r3, [r7, #16]
900103f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900103fc:	b2d9      	uxtb	r1, r3
900103fe:	693b      	ldr	r3, [r7, #16]
90010400:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010404:	461a      	mov	r2, r3
90010406:	2334      	movs	r3, #52	@ 0x34
90010408:	fb02 f303 	mul.w	r3, r2, r3
9001040c:	3398      	adds	r3, #152	@ 0x98
9001040e:	693a      	ldr	r2, [r7, #16]
90010410:	4413      	add	r3, r2
90010412:	3307      	adds	r3, #7
90010414:	461a      	mov	r2, r3
90010416:	6878      	ldr	r0, [r7, #4]
90010418:	f000 ffa3 	bl	90011362 <USBH_MSC_SCSI_Inquiry>
9001041c:	4603      	mov	r3, r0
9001041e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
90010420:	7bfb      	ldrb	r3, [r7, #15]
90010422:	2b00      	cmp	r3, #0
90010424:	d10c      	bne.n	90010440 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
90010426:	693b      	ldr	r3, [r7, #16]
90010428:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001042c:	4619      	mov	r1, r3
9001042e:	693a      	ldr	r2, [r7, #16]
90010430:	2334      	movs	r3, #52	@ 0x34
90010432:	fb01 f303 	mul.w	r3, r1, r3
90010436:	4413      	add	r3, r2
90010438:	3390      	adds	r3, #144	@ 0x90
9001043a:	2202      	movs	r2, #2
9001043c:	701a      	strb	r2, [r3, #0]
            break;
9001043e:	e1ff      	b.n	90010840 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
90010440:	7bfb      	ldrb	r3, [r7, #15]
90010442:	2b02      	cmp	r3, #2
90010444:	d10c      	bne.n	90010460 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
90010446:	693b      	ldr	r3, [r7, #16]
90010448:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001044c:	4619      	mov	r1, r3
9001044e:	693a      	ldr	r2, [r7, #16]
90010450:	2334      	movs	r3, #52	@ 0x34
90010452:	fb01 f303 	mul.w	r3, r1, r3
90010456:	4413      	add	r3, r2
90010458:	3390      	adds	r3, #144	@ 0x90
9001045a:	2205      	movs	r2, #5
9001045c:	701a      	strb	r2, [r3, #0]
            break;
9001045e:	e1ef      	b.n	90010840 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
90010460:	7bfb      	ldrb	r3, [r7, #15]
90010462:	2b04      	cmp	r3, #4
90010464:	f040 81ec 	bne.w	90010840 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
90010468:	693b      	ldr	r3, [r7, #16]
9001046a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001046e:	4619      	mov	r1, r3
90010470:	693a      	ldr	r2, [r7, #16]
90010472:	2334      	movs	r3, #52	@ 0x34
90010474:	fb01 f303 	mul.w	r3, r1, r3
90010478:	4413      	add	r3, r2
9001047a:	3390      	adds	r3, #144	@ 0x90
9001047c:	2208      	movs	r2, #8
9001047e:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
90010480:	693b      	ldr	r3, [r7, #16]
90010482:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010486:	4619      	mov	r1, r3
90010488:	693a      	ldr	r2, [r7, #16]
9001048a:	2334      	movs	r3, #52	@ 0x34
9001048c:	fb01 f303 	mul.w	r3, r1, r3
90010490:	4413      	add	r3, r2
90010492:	3391      	adds	r3, #145	@ 0x91
90010494:	2202      	movs	r2, #2
90010496:	701a      	strb	r2, [r3, #0]
            break;
90010498:	e1d2      	b.n	90010840 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
9001049a:	693b      	ldr	r3, [r7, #16]
9001049c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900104a0:	b2db      	uxtb	r3, r3
900104a2:	4619      	mov	r1, r3
900104a4:	6878      	ldr	r0, [r7, #4]
900104a6:	f000 fe9f 	bl	900111e8 <USBH_MSC_SCSI_TestUnitReady>
900104aa:	4603      	mov	r3, r0
900104ac:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
900104ae:	7bbb      	ldrb	r3, [r7, #14]
900104b0:	2b00      	cmp	r3, #0
900104b2:	d14a      	bne.n	9001054a <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
900104b4:	693b      	ldr	r3, [r7, #16]
900104b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900104ba:	4619      	mov	r1, r3
900104bc:	693a      	ldr	r2, [r7, #16]
900104be:	2334      	movs	r3, #52	@ 0x34
900104c0:	fb01 f303 	mul.w	r3, r1, r3
900104c4:	4413      	add	r3, r2
900104c6:	3392      	adds	r3, #146	@ 0x92
900104c8:	781b      	ldrb	r3, [r3, #0]
900104ca:	2b00      	cmp	r3, #0
900104cc:	d00c      	beq.n	900104e8 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
900104ce:	693b      	ldr	r3, [r7, #16]
900104d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900104d4:	4619      	mov	r1, r3
900104d6:	693a      	ldr	r2, [r7, #16]
900104d8:	2334      	movs	r3, #52	@ 0x34
900104da:	fb01 f303 	mul.w	r3, r1, r3
900104de:	4413      	add	r3, r2
900104e0:	33c1      	adds	r3, #193	@ 0xc1
900104e2:	2201      	movs	r2, #1
900104e4:	701a      	strb	r2, [r3, #0]
900104e6:	e00b      	b.n	90010500 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
900104e8:	693b      	ldr	r3, [r7, #16]
900104ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900104ee:	4619      	mov	r1, r3
900104f0:	693a      	ldr	r2, [r7, #16]
900104f2:	2334      	movs	r3, #52	@ 0x34
900104f4:	fb01 f303 	mul.w	r3, r1, r3
900104f8:	4413      	add	r3, r2
900104fa:	33c1      	adds	r3, #193	@ 0xc1
900104fc:	2200      	movs	r2, #0
900104fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
90010500:	693b      	ldr	r3, [r7, #16]
90010502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010506:	4619      	mov	r1, r3
90010508:	693a      	ldr	r2, [r7, #16]
9001050a:	2334      	movs	r3, #52	@ 0x34
9001050c:	fb01 f303 	mul.w	r3, r1, r3
90010510:	4413      	add	r3, r2
90010512:	3390      	adds	r3, #144	@ 0x90
90010514:	2203      	movs	r2, #3
90010516:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
90010518:	693b      	ldr	r3, [r7, #16]
9001051a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001051e:	4619      	mov	r1, r3
90010520:	693a      	ldr	r2, [r7, #16]
90010522:	2334      	movs	r3, #52	@ 0x34
90010524:	fb01 f303 	mul.w	r3, r1, r3
90010528:	4413      	add	r3, r2
9001052a:	3391      	adds	r3, #145	@ 0x91
9001052c:	2200      	movs	r2, #0
9001052e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
90010530:	693b      	ldr	r3, [r7, #16]
90010532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010536:	4619      	mov	r1, r3
90010538:	693a      	ldr	r2, [r7, #16]
9001053a:	2334      	movs	r3, #52	@ 0x34
9001053c:	fb01 f303 	mul.w	r3, r1, r3
90010540:	4413      	add	r3, r2
90010542:	3392      	adds	r3, #146	@ 0x92
90010544:	2200      	movs	r2, #0
90010546:	701a      	strb	r2, [r3, #0]
            break;
90010548:	e17c      	b.n	90010844 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
9001054a:	7bbb      	ldrb	r3, [r7, #14]
9001054c:	2b02      	cmp	r3, #2
9001054e:	d14a      	bne.n	900105e6 <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
90010550:	693b      	ldr	r3, [r7, #16]
90010552:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010556:	4619      	mov	r1, r3
90010558:	693a      	ldr	r2, [r7, #16]
9001055a:	2334      	movs	r3, #52	@ 0x34
9001055c:	fb01 f303 	mul.w	r3, r1, r3
90010560:	4413      	add	r3, r2
90010562:	3392      	adds	r3, #146	@ 0x92
90010564:	781b      	ldrb	r3, [r3, #0]
90010566:	2b02      	cmp	r3, #2
90010568:	d00c      	beq.n	90010584 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
9001056a:	693b      	ldr	r3, [r7, #16]
9001056c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010570:	4619      	mov	r1, r3
90010572:	693a      	ldr	r2, [r7, #16]
90010574:	2334      	movs	r3, #52	@ 0x34
90010576:	fb01 f303 	mul.w	r3, r1, r3
9001057a:	4413      	add	r3, r2
9001057c:	33c1      	adds	r3, #193	@ 0xc1
9001057e:	2201      	movs	r2, #1
90010580:	701a      	strb	r2, [r3, #0]
90010582:	e00b      	b.n	9001059c <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
90010584:	693b      	ldr	r3, [r7, #16]
90010586:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001058a:	4619      	mov	r1, r3
9001058c:	693a      	ldr	r2, [r7, #16]
9001058e:	2334      	movs	r3, #52	@ 0x34
90010590:	fb01 f303 	mul.w	r3, r1, r3
90010594:	4413      	add	r3, r2
90010596:	33c1      	adds	r3, #193	@ 0xc1
90010598:	2200      	movs	r2, #0
9001059a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
9001059c:	693b      	ldr	r3, [r7, #16]
9001059e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900105a2:	4619      	mov	r1, r3
900105a4:	693a      	ldr	r2, [r7, #16]
900105a6:	2334      	movs	r3, #52	@ 0x34
900105a8:	fb01 f303 	mul.w	r3, r1, r3
900105ac:	4413      	add	r3, r2
900105ae:	3390      	adds	r3, #144	@ 0x90
900105b0:	2205      	movs	r2, #5
900105b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
900105b4:	693b      	ldr	r3, [r7, #16]
900105b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900105ba:	4619      	mov	r1, r3
900105bc:	693a      	ldr	r2, [r7, #16]
900105be:	2334      	movs	r3, #52	@ 0x34
900105c0:	fb01 f303 	mul.w	r3, r1, r3
900105c4:	4413      	add	r3, r2
900105c6:	3391      	adds	r3, #145	@ 0x91
900105c8:	2201      	movs	r2, #1
900105ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
900105cc:	693b      	ldr	r3, [r7, #16]
900105ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900105d2:	4619      	mov	r1, r3
900105d4:	693a      	ldr	r2, [r7, #16]
900105d6:	2334      	movs	r3, #52	@ 0x34
900105d8:	fb01 f303 	mul.w	r3, r1, r3
900105dc:	4413      	add	r3, r2
900105de:	3392      	adds	r3, #146	@ 0x92
900105e0:	2202      	movs	r2, #2
900105e2:	701a      	strb	r2, [r3, #0]
            break;
900105e4:	e12e      	b.n	90010844 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
900105e6:	7bbb      	ldrb	r3, [r7, #14]
900105e8:	2b04      	cmp	r3, #4
900105ea:	f040 812b 	bne.w	90010844 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
900105ee:	693b      	ldr	r3, [r7, #16]
900105f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900105f4:	4619      	mov	r1, r3
900105f6:	693a      	ldr	r2, [r7, #16]
900105f8:	2334      	movs	r3, #52	@ 0x34
900105fa:	fb01 f303 	mul.w	r3, r1, r3
900105fe:	4413      	add	r3, r2
90010600:	3390      	adds	r3, #144	@ 0x90
90010602:	2208      	movs	r2, #8
90010604:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
90010606:	693b      	ldr	r3, [r7, #16]
90010608:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001060c:	4619      	mov	r1, r3
9001060e:	693a      	ldr	r2, [r7, #16]
90010610:	2334      	movs	r3, #52	@ 0x34
90010612:	fb01 f303 	mul.w	r3, r1, r3
90010616:	4413      	add	r3, r2
90010618:	3391      	adds	r3, #145	@ 0x91
9001061a:	2202      	movs	r2, #2
9001061c:	701a      	strb	r2, [r3, #0]
            break;
9001061e:	e111      	b.n	90010844 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
90010620:	693b      	ldr	r3, [r7, #16]
90010622:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010626:	b2d9      	uxtb	r1, r3
90010628:	693b      	ldr	r3, [r7, #16]
9001062a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001062e:	461a      	mov	r2, r3
90010630:	2334      	movs	r3, #52	@ 0x34
90010632:	fb02 f303 	mul.w	r3, r2, r3
90010636:	3390      	adds	r3, #144	@ 0x90
90010638:	693a      	ldr	r2, [r7, #16]
9001063a:	4413      	add	r3, r2
9001063c:	3304      	adds	r3, #4
9001063e:	461a      	mov	r2, r3
90010640:	6878      	ldr	r0, [r7, #4]
90010642:	f000 fe14 	bl	9001126e <USBH_MSC_SCSI_ReadCapacity>
90010646:	4603      	mov	r3, r0
90010648:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
9001064a:	7bfb      	ldrb	r3, [r7, #15]
9001064c:	2b00      	cmp	r3, #0
9001064e:	d120      	bne.n	90010692 <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90010650:	693b      	ldr	r3, [r7, #16]
90010652:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010656:	4619      	mov	r1, r3
90010658:	693a      	ldr	r2, [r7, #16]
9001065a:	2334      	movs	r3, #52	@ 0x34
9001065c:	fb01 f303 	mul.w	r3, r1, r3
90010660:	4413      	add	r3, r2
90010662:	3390      	adds	r3, #144	@ 0x90
90010664:	2201      	movs	r2, #1
90010666:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
90010668:	693b      	ldr	r3, [r7, #16]
9001066a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001066e:	4619      	mov	r1, r3
90010670:	693a      	ldr	r2, [r7, #16]
90010672:	2334      	movs	r3, #52	@ 0x34
90010674:	fb01 f303 	mul.w	r3, r1, r3
90010678:	4413      	add	r3, r2
9001067a:	3391      	adds	r3, #145	@ 0x91
9001067c:	2200      	movs	r2, #0
9001067e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
90010680:	693b      	ldr	r3, [r7, #16]
90010682:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010686:	3301      	adds	r3, #1
90010688:	b29a      	uxth	r2, r3
9001068a:	693b      	ldr	r3, [r7, #16]
9001068c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
90010690:	e0da      	b.n	90010848 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
90010692:	7bfb      	ldrb	r3, [r7, #15]
90010694:	2b02      	cmp	r3, #2
90010696:	d10c      	bne.n	900106b2 <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
90010698:	693b      	ldr	r3, [r7, #16]
9001069a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001069e:	4619      	mov	r1, r3
900106a0:	693a      	ldr	r2, [r7, #16]
900106a2:	2334      	movs	r3, #52	@ 0x34
900106a4:	fb01 f303 	mul.w	r3, r1, r3
900106a8:	4413      	add	r3, r2
900106aa:	3390      	adds	r3, #144	@ 0x90
900106ac:	2205      	movs	r2, #5
900106ae:	701a      	strb	r2, [r3, #0]
            break;
900106b0:	e0ca      	b.n	90010848 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
900106b2:	7bfb      	ldrb	r3, [r7, #15]
900106b4:	2b04      	cmp	r3, #4
900106b6:	f040 80c7 	bne.w	90010848 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
900106ba:	693b      	ldr	r3, [r7, #16]
900106bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900106c0:	4619      	mov	r1, r3
900106c2:	693a      	ldr	r2, [r7, #16]
900106c4:	2334      	movs	r3, #52	@ 0x34
900106c6:	fb01 f303 	mul.w	r3, r1, r3
900106ca:	4413      	add	r3, r2
900106cc:	3390      	adds	r3, #144	@ 0x90
900106ce:	2208      	movs	r2, #8
900106d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
900106d2:	693b      	ldr	r3, [r7, #16]
900106d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900106d8:	4619      	mov	r1, r3
900106da:	693a      	ldr	r2, [r7, #16]
900106dc:	2334      	movs	r3, #52	@ 0x34
900106de:	fb01 f303 	mul.w	r3, r1, r3
900106e2:	4413      	add	r3, r2
900106e4:	3391      	adds	r3, #145	@ 0x91
900106e6:	2202      	movs	r2, #2
900106e8:	701a      	strb	r2, [r3, #0]
            break;
900106ea:	e0ad      	b.n	90010848 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
900106ec:	693b      	ldr	r3, [r7, #16]
900106ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900106f2:	b2d9      	uxtb	r1, r3
900106f4:	693b      	ldr	r3, [r7, #16]
900106f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900106fa:	461a      	mov	r2, r3
900106fc:	2334      	movs	r3, #52	@ 0x34
900106fe:	fb02 f303 	mul.w	r3, r2, r3
90010702:	3398      	adds	r3, #152	@ 0x98
90010704:	693a      	ldr	r2, [r7, #16]
90010706:	4413      	add	r3, r2
90010708:	3304      	adds	r3, #4
9001070a:	461a      	mov	r2, r3
9001070c:	6878      	ldr	r0, [r7, #4]
9001070e:	f000 fecd 	bl	900114ac <USBH_MSC_SCSI_RequestSense>
90010712:	4603      	mov	r3, r0
90010714:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
90010716:	7bfb      	ldrb	r3, [r7, #15]
90010718:	2b00      	cmp	r3, #0
9001071a:	d146      	bne.n	900107aa <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
9001071c:	693b      	ldr	r3, [r7, #16]
9001071e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010722:	4619      	mov	r1, r3
90010724:	693a      	ldr	r2, [r7, #16]
90010726:	2334      	movs	r3, #52	@ 0x34
90010728:	fb01 f303 	mul.w	r3, r1, r3
9001072c:	4413      	add	r3, r2
9001072e:	339c      	adds	r3, #156	@ 0x9c
90010730:	781b      	ldrb	r3, [r3, #0]
90010732:	2b06      	cmp	r3, #6
90010734:	d00c      	beq.n	90010750 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
90010736:	693b      	ldr	r3, [r7, #16]
90010738:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001073c:	4619      	mov	r1, r3
9001073e:	693a      	ldr	r2, [r7, #16]
90010740:	2334      	movs	r3, #52	@ 0x34
90010742:	fb01 f303 	mul.w	r3, r1, r3
90010746:	4413      	add	r3, r2
90010748:	339c      	adds	r3, #156	@ 0x9c
9001074a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
9001074c:	2b02      	cmp	r3, #2
9001074e:	d117      	bne.n	90010780 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
90010750:	687b      	ldr	r3, [r7, #4]
90010752:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
90010756:	693b      	ldr	r3, [r7, #16]
90010758:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
9001075c:	1ad3      	subs	r3, r2, r3
9001075e:	f242 720f 	movw	r2, #9999	@ 0x270f
90010762:	4293      	cmp	r3, r2
90010764:	d80c      	bhi.n	90010780 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
90010766:	693b      	ldr	r3, [r7, #16]
90010768:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001076c:	4619      	mov	r1, r3
9001076e:	693a      	ldr	r2, [r7, #16]
90010770:	2334      	movs	r3, #52	@ 0x34
90010772:	fb01 f303 	mul.w	r3, r1, r3
90010776:	4413      	add	r3, r2
90010778:	3390      	adds	r3, #144	@ 0x90
9001077a:	2202      	movs	r2, #2
9001077c:	701a      	strb	r2, [r3, #0]
                  break;
9001077e:	e066      	b.n	9001084e <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90010780:	693b      	ldr	r3, [r7, #16]
90010782:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010786:	4619      	mov	r1, r3
90010788:	693a      	ldr	r2, [r7, #16]
9001078a:	2334      	movs	r3, #52	@ 0x34
9001078c:	fb01 f303 	mul.w	r3, r1, r3
90010790:	4413      	add	r3, r2
90010792:	3390      	adds	r3, #144	@ 0x90
90010794:	2201      	movs	r2, #1
90010796:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
90010798:	693b      	ldr	r3, [r7, #16]
9001079a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
9001079e:	3301      	adds	r3, #1
900107a0:	b29a      	uxth	r2, r3
900107a2:	693b      	ldr	r3, [r7, #16]
900107a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
900107a8:	e050      	b.n	9001084c <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
900107aa:	7bfb      	ldrb	r3, [r7, #15]
900107ac:	2b02      	cmp	r3, #2
900107ae:	d118      	bne.n	900107e2 <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
900107b0:	693b      	ldr	r3, [r7, #16]
900107b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900107b6:	4619      	mov	r1, r3
900107b8:	693a      	ldr	r2, [r7, #16]
900107ba:	2334      	movs	r3, #52	@ 0x34
900107bc:	fb01 f303 	mul.w	r3, r1, r3
900107c0:	4413      	add	r3, r2
900107c2:	3390      	adds	r3, #144	@ 0x90
900107c4:	2208      	movs	r2, #8
900107c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
900107c8:	693b      	ldr	r3, [r7, #16]
900107ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900107ce:	4619      	mov	r1, r3
900107d0:	693a      	ldr	r2, [r7, #16]
900107d2:	2334      	movs	r3, #52	@ 0x34
900107d4:	fb01 f303 	mul.w	r3, r1, r3
900107d8:	4413      	add	r3, r2
900107da:	3391      	adds	r3, #145	@ 0x91
900107dc:	2202      	movs	r2, #2
900107de:	701a      	strb	r2, [r3, #0]
            break;
900107e0:	e034      	b.n	9001084c <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
900107e2:	7bfb      	ldrb	r3, [r7, #15]
900107e4:	2b04      	cmp	r3, #4
900107e6:	d131      	bne.n	9001084c <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
900107e8:	693b      	ldr	r3, [r7, #16]
900107ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
900107ee:	4619      	mov	r1, r3
900107f0:	693a      	ldr	r2, [r7, #16]
900107f2:	2334      	movs	r3, #52	@ 0x34
900107f4:	fb01 f303 	mul.w	r3, r1, r3
900107f8:	4413      	add	r3, r2
900107fa:	3390      	adds	r3, #144	@ 0x90
900107fc:	2208      	movs	r2, #8
900107fe:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
90010800:	693b      	ldr	r3, [r7, #16]
90010802:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010806:	4619      	mov	r1, r3
90010808:	693a      	ldr	r2, [r7, #16]
9001080a:	2334      	movs	r3, #52	@ 0x34
9001080c:	fb01 f303 	mul.w	r3, r1, r3
90010810:	4413      	add	r3, r2
90010812:	3391      	adds	r3, #145	@ 0x91
90010814:	2202      	movs	r2, #2
90010816:	701a      	strb	r2, [r3, #0]
            break;
90010818:	e018      	b.n	9001084c <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
9001081a:	693b      	ldr	r3, [r7, #16]
9001081c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010820:	3301      	adds	r3, #1
90010822:	b29a      	uxth	r2, r3
90010824:	693b      	ldr	r3, [r7, #16]
90010826:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
9001082a:	e010      	b.n	9001084e <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
9001082c:	693b      	ldr	r3, [r7, #16]
9001082e:	2200      	movs	r2, #0
90010830:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
90010834:	693b      	ldr	r3, [r7, #16]
90010836:	220a      	movs	r2, #10
90010838:	731a      	strb	r2, [r3, #12]
      break;
9001083a:	e045      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
            break;
9001083c:	bf00      	nop
9001083e:	e043      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
            break;
90010840:	bf00      	nop
90010842:	e041      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
            break;
90010844:	bf00      	nop
90010846:	e03f      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
            break;
90010848:	bf00      	nop
9001084a:	e03d      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
            break;
9001084c:	bf00      	nop
      break;
9001084e:	e03b      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
90010850:	693b      	ldr	r3, [r7, #16]
90010852:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
90010856:	693a      	ldr	r2, [r7, #16]
90010858:	7812      	ldrb	r2, [r2, #0]
9001085a:	4293      	cmp	r3, r2
9001085c:	d228      	bcs.n	900108b0 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
9001085e:	693b      	ldr	r3, [r7, #16]
90010860:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
90010864:	693b      	ldr	r3, [r7, #16]
90010866:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
9001086a:	693b      	ldr	r3, [r7, #16]
9001086c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
90010870:	4619      	mov	r1, r3
90010872:	693a      	ldr	r2, [r7, #16]
90010874:	2334      	movs	r3, #52	@ 0x34
90010876:	fb01 f303 	mul.w	r3, r1, r3
9001087a:	4413      	add	r3, r2
9001087c:	3391      	adds	r3, #145	@ 0x91
9001087e:	781b      	ldrb	r3, [r3, #0]
90010880:	2b00      	cmp	r3, #0
90010882:	d106      	bne.n	90010892 <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
90010884:	687b      	ldr	r3, [r7, #4]
90010886:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
9001088a:	2102      	movs	r1, #2
9001088c:	6878      	ldr	r0, [r7, #4]
9001088e:	4798      	blx	r3
90010890:	e005      	b.n	9001089e <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
90010892:	687b      	ldr	r3, [r7, #4]
90010894:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90010898:	2106      	movs	r1, #6
9001089a:	6878      	ldr	r0, [r7, #4]
9001089c:	4798      	blx	r3
        MSC_Handle->lun++;
9001089e:	693b      	ldr	r3, [r7, #16]
900108a0:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
900108a4:	3301      	adds	r3, #1
900108a6:	b29a      	uxth	r2, r3
900108a8:	693b      	ldr	r3, [r7, #16]
900108aa:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
900108ae:	e00b      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
900108b0:	693b      	ldr	r3, [r7, #16]
900108b2:	2200      	movs	r2, #0
900108b4:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
900108b8:	693b      	ldr	r3, [r7, #16]
900108ba:	2201      	movs	r2, #1
900108bc:	731a      	strb	r2, [r3, #12]
      break;
900108be:	e003      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
900108c0:	2300      	movs	r3, #0
900108c2:	75fb      	strb	r3, [r7, #23]
      break;
900108c4:	e000      	b.n	900108c8 <USBH_MSC_Process+0x5a0>
      break;
900108c6:	bf00      	nop
  }
  return error;
900108c8:	7dfb      	ldrb	r3, [r7, #23]
}
900108ca:	4618      	mov	r0, r3
900108cc:	3718      	adds	r7, #24
900108ce:	46bd      	mov	sp, r7
900108d0:	bd80      	pop	{r7, pc}
900108d2:	bf00      	nop

900108d4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
900108d4:	b480      	push	{r7}
900108d6:	b083      	sub	sp, #12
900108d8:	af00      	add	r7, sp, #0
900108da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
900108dc:	2300      	movs	r3, #0
}
900108de:	4618      	mov	r0, r3
900108e0:	370c      	adds	r7, #12
900108e2:	46bd      	mov	sp, r7
900108e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900108e8:	4770      	bx	lr

900108ea <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
900108ea:	b580      	push	{r7, lr}
900108ec:	b088      	sub	sp, #32
900108ee:	af02      	add	r7, sp, #8
900108f0:	6078      	str	r0, [r7, #4]
900108f2:	460b      	mov	r3, r1
900108f4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900108f6:	687b      	ldr	r3, [r7, #4]
900108f8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
900108fc:	69db      	ldr	r3, [r3, #28]
900108fe:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
90010900:	2301      	movs	r3, #1
90010902:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
90010904:	2301      	movs	r3, #1
90010906:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
90010908:	78fb      	ldrb	r3, [r7, #3]
9001090a:	693a      	ldr	r2, [r7, #16]
9001090c:	2134      	movs	r1, #52	@ 0x34
9001090e:	fb01 f303 	mul.w	r3, r1, r3
90010912:	4413      	add	r3, r2
90010914:	3390      	adds	r3, #144	@ 0x90
90010916:	781b      	ldrb	r3, [r3, #0]
90010918:	2b07      	cmp	r3, #7
9001091a:	d03c      	beq.n	90010996 <USBH_MSC_RdWrProcess+0xac>
9001091c:	2b07      	cmp	r3, #7
9001091e:	f300 80a8 	bgt.w	90010a72 <USBH_MSC_RdWrProcess+0x188>
90010922:	2b05      	cmp	r3, #5
90010924:	d06c      	beq.n	90010a00 <USBH_MSC_RdWrProcess+0x116>
90010926:	2b06      	cmp	r3, #6
90010928:	f040 80a3 	bne.w	90010a72 <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
9001092c:	78f9      	ldrb	r1, [r7, #3]
9001092e:	2300      	movs	r3, #0
90010930:	9300      	str	r3, [sp, #0]
90010932:	2300      	movs	r3, #0
90010934:	2200      	movs	r2, #0
90010936:	6878      	ldr	r0, [r7, #4]
90010938:	f000 fea7 	bl	9001168a <USBH_MSC_SCSI_Read>
9001093c:	4603      	mov	r3, r0
9001093e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
90010940:	7bfb      	ldrb	r3, [r7, #15]
90010942:	2b00      	cmp	r3, #0
90010944:	d10b      	bne.n	9001095e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
90010946:	78fb      	ldrb	r3, [r7, #3]
90010948:	693a      	ldr	r2, [r7, #16]
9001094a:	2134      	movs	r1, #52	@ 0x34
9001094c:	fb01 f303 	mul.w	r3, r1, r3
90010950:	4413      	add	r3, r2
90010952:	3390      	adds	r3, #144	@ 0x90
90010954:	2201      	movs	r2, #1
90010956:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
90010958:	2300      	movs	r3, #0
9001095a:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
9001095c:	e08b      	b.n	90010a76 <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
9001095e:	7bfb      	ldrb	r3, [r7, #15]
90010960:	2b02      	cmp	r3, #2
90010962:	d109      	bne.n	90010978 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
90010964:	78fb      	ldrb	r3, [r7, #3]
90010966:	693a      	ldr	r2, [r7, #16]
90010968:	2134      	movs	r1, #52	@ 0x34
9001096a:	fb01 f303 	mul.w	r3, r1, r3
9001096e:	4413      	add	r3, r2
90010970:	3390      	adds	r3, #144	@ 0x90
90010972:	2205      	movs	r2, #5
90010974:	701a      	strb	r2, [r3, #0]
      break;
90010976:	e07e      	b.n	90010a76 <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
90010978:	7bfb      	ldrb	r3, [r7, #15]
9001097a:	2b04      	cmp	r3, #4
9001097c:	d17b      	bne.n	90010a76 <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
9001097e:	78fb      	ldrb	r3, [r7, #3]
90010980:	693a      	ldr	r2, [r7, #16]
90010982:	2134      	movs	r1, #52	@ 0x34
90010984:	fb01 f303 	mul.w	r3, r1, r3
90010988:	4413      	add	r3, r2
9001098a:	3390      	adds	r3, #144	@ 0x90
9001098c:	2208      	movs	r2, #8
9001098e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
90010990:	2302      	movs	r3, #2
90010992:	75fb      	strb	r3, [r7, #23]
      break;
90010994:	e06f      	b.n	90010a76 <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
90010996:	78f9      	ldrb	r1, [r7, #3]
90010998:	2300      	movs	r3, #0
9001099a:	9300      	str	r3, [sp, #0]
9001099c:	2300      	movs	r3, #0
9001099e:	2200      	movs	r2, #0
900109a0:	6878      	ldr	r0, [r7, #4]
900109a2:	f000 fe02 	bl	900115aa <USBH_MSC_SCSI_Write>
900109a6:	4603      	mov	r3, r0
900109a8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
900109aa:	7bfb      	ldrb	r3, [r7, #15]
900109ac:	2b00      	cmp	r3, #0
900109ae:	d10b      	bne.n	900109c8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
900109b0:	78fb      	ldrb	r3, [r7, #3]
900109b2:	693a      	ldr	r2, [r7, #16]
900109b4:	2134      	movs	r1, #52	@ 0x34
900109b6:	fb01 f303 	mul.w	r3, r1, r3
900109ba:	4413      	add	r3, r2
900109bc:	3390      	adds	r3, #144	@ 0x90
900109be:	2201      	movs	r2, #1
900109c0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
900109c2:	2300      	movs	r3, #0
900109c4:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
900109c6:	e058      	b.n	90010a7a <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
900109c8:	7bfb      	ldrb	r3, [r7, #15]
900109ca:	2b02      	cmp	r3, #2
900109cc:	d109      	bne.n	900109e2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
900109ce:	78fb      	ldrb	r3, [r7, #3]
900109d0:	693a      	ldr	r2, [r7, #16]
900109d2:	2134      	movs	r1, #52	@ 0x34
900109d4:	fb01 f303 	mul.w	r3, r1, r3
900109d8:	4413      	add	r3, r2
900109da:	3390      	adds	r3, #144	@ 0x90
900109dc:	2205      	movs	r2, #5
900109de:	701a      	strb	r2, [r3, #0]
      break;
900109e0:	e04b      	b.n	90010a7a <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
900109e2:	7bfb      	ldrb	r3, [r7, #15]
900109e4:	2b04      	cmp	r3, #4
900109e6:	d148      	bne.n	90010a7a <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
900109e8:	78fb      	ldrb	r3, [r7, #3]
900109ea:	693a      	ldr	r2, [r7, #16]
900109ec:	2134      	movs	r1, #52	@ 0x34
900109ee:	fb01 f303 	mul.w	r3, r1, r3
900109f2:	4413      	add	r3, r2
900109f4:	3390      	adds	r3, #144	@ 0x90
900109f6:	2208      	movs	r2, #8
900109f8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
900109fa:	2302      	movs	r3, #2
900109fc:	75fb      	strb	r3, [r7, #23]
      break;
900109fe:	e03c      	b.n	90010a7a <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
90010a00:	78fb      	ldrb	r3, [r7, #3]
90010a02:	2234      	movs	r2, #52	@ 0x34
90010a04:	fb02 f303 	mul.w	r3, r2, r3
90010a08:	3398      	adds	r3, #152	@ 0x98
90010a0a:	693a      	ldr	r2, [r7, #16]
90010a0c:	4413      	add	r3, r2
90010a0e:	1d1a      	adds	r2, r3, #4
90010a10:	78fb      	ldrb	r3, [r7, #3]
90010a12:	4619      	mov	r1, r3
90010a14:	6878      	ldr	r0, [r7, #4]
90010a16:	f000 fd49 	bl	900114ac <USBH_MSC_SCSI_RequestSense>
90010a1a:	4603      	mov	r3, r0
90010a1c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
90010a1e:	7bfb      	ldrb	r3, [r7, #15]
90010a20:	2b00      	cmp	r3, #0
90010a22:	d114      	bne.n	90010a4e <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
90010a24:	78fb      	ldrb	r3, [r7, #3]
90010a26:	693a      	ldr	r2, [r7, #16]
90010a28:	2134      	movs	r1, #52	@ 0x34
90010a2a:	fb01 f303 	mul.w	r3, r1, r3
90010a2e:	4413      	add	r3, r2
90010a30:	3390      	adds	r3, #144	@ 0x90
90010a32:	2201      	movs	r2, #1
90010a34:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
90010a36:	78fb      	ldrb	r3, [r7, #3]
90010a38:	693a      	ldr	r2, [r7, #16]
90010a3a:	2134      	movs	r1, #52	@ 0x34
90010a3c:	fb01 f303 	mul.w	r3, r1, r3
90010a40:	4413      	add	r3, r2
90010a42:	3391      	adds	r3, #145	@ 0x91
90010a44:	2202      	movs	r2, #2
90010a46:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
90010a48:	2302      	movs	r3, #2
90010a4a:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
90010a4c:	e017      	b.n	90010a7e <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
90010a4e:	7bfb      	ldrb	r3, [r7, #15]
90010a50:	2b02      	cmp	r3, #2
90010a52:	d014      	beq.n	90010a7e <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
90010a54:	7bfb      	ldrb	r3, [r7, #15]
90010a56:	2b04      	cmp	r3, #4
90010a58:	d111      	bne.n	90010a7e <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
90010a5a:	78fb      	ldrb	r3, [r7, #3]
90010a5c:	693a      	ldr	r2, [r7, #16]
90010a5e:	2134      	movs	r1, #52	@ 0x34
90010a60:	fb01 f303 	mul.w	r3, r1, r3
90010a64:	4413      	add	r3, r2
90010a66:	3390      	adds	r3, #144	@ 0x90
90010a68:	2208      	movs	r2, #8
90010a6a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
90010a6c:	2302      	movs	r3, #2
90010a6e:	75fb      	strb	r3, [r7, #23]
      break;
90010a70:	e005      	b.n	90010a7e <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
90010a72:	bf00      	nop
90010a74:	e004      	b.n	90010a80 <USBH_MSC_RdWrProcess+0x196>
      break;
90010a76:	bf00      	nop
90010a78:	e002      	b.n	90010a80 <USBH_MSC_RdWrProcess+0x196>
      break;
90010a7a:	bf00      	nop
90010a7c:	e000      	b.n	90010a80 <USBH_MSC_RdWrProcess+0x196>
      break;
90010a7e:	bf00      	nop

  }
  return error;
90010a80:	7dfb      	ldrb	r3, [r7, #23]
}
90010a82:	4618      	mov	r0, r3
90010a84:	3718      	adds	r7, #24
90010a86:	46bd      	mov	sp, r7
90010a88:	bd80      	pop	{r7, pc}

90010a8a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
90010a8a:	b480      	push	{r7}
90010a8c:	b085      	sub	sp, #20
90010a8e:	af00      	add	r7, sp, #0
90010a90:	6078      	str	r0, [r7, #4]
90010a92:	460b      	mov	r3, r1
90010a94:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90010a96:	687b      	ldr	r3, [r7, #4]
90010a98:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010a9c:	69db      	ldr	r3, [r3, #28]
90010a9e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
90010aa0:	78fb      	ldrb	r3, [r7, #3]
90010aa2:	b29a      	uxth	r2, r3
90010aa4:	68bb      	ldr	r3, [r7, #8]
90010aa6:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
90010aaa:	687b      	ldr	r3, [r7, #4]
90010aac:	781b      	ldrb	r3, [r3, #0]
90010aae:	b2db      	uxtb	r3, r3
90010ab0:	2b0b      	cmp	r3, #11
90010ab2:	d10c      	bne.n	90010ace <USBH_MSC_UnitIsReady+0x44>
90010ab4:	78fb      	ldrb	r3, [r7, #3]
90010ab6:	68ba      	ldr	r2, [r7, #8]
90010ab8:	2134      	movs	r1, #52	@ 0x34
90010aba:	fb01 f303 	mul.w	r3, r1, r3
90010abe:	4413      	add	r3, r2
90010ac0:	3391      	adds	r3, #145	@ 0x91
90010ac2:	781b      	ldrb	r3, [r3, #0]
90010ac4:	2b00      	cmp	r3, #0
90010ac6:	d102      	bne.n	90010ace <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
90010ac8:	2301      	movs	r3, #1
90010aca:	73fb      	strb	r3, [r7, #15]
90010acc:	e001      	b.n	90010ad2 <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
90010ace:	2300      	movs	r3, #0
90010ad0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
90010ad2:	7bfb      	ldrb	r3, [r7, #15]
}
90010ad4:	4618      	mov	r0, r3
90010ad6:	3714      	adds	r7, #20
90010ad8:	46bd      	mov	sp, r7
90010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
90010ade:	4770      	bx	lr

90010ae0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
90010ae0:	b580      	push	{r7, lr}
90010ae2:	b086      	sub	sp, #24
90010ae4:	af00      	add	r7, sp, #0
90010ae6:	60f8      	str	r0, [r7, #12]
90010ae8:	460b      	mov	r3, r1
90010aea:	607a      	str	r2, [r7, #4]
90010aec:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90010aee:	68fb      	ldr	r3, [r7, #12]
90010af0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010af4:	69db      	ldr	r3, [r3, #28]
90010af6:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
90010af8:	7afb      	ldrb	r3, [r7, #11]
90010afa:	b29a      	uxth	r2, r3
90010afc:	697b      	ldr	r3, [r7, #20]
90010afe:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
90010b02:	68fb      	ldr	r3, [r7, #12]
90010b04:	781b      	ldrb	r3, [r3, #0]
90010b06:	b2db      	uxtb	r3, r3
90010b08:	2b0b      	cmp	r3, #11
90010b0a:	d10d      	bne.n	90010b28 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
90010b0c:	7afb      	ldrb	r3, [r7, #11]
90010b0e:	2234      	movs	r2, #52	@ 0x34
90010b10:	fb02 f303 	mul.w	r3, r2, r3
90010b14:	3390      	adds	r3, #144	@ 0x90
90010b16:	697a      	ldr	r2, [r7, #20]
90010b18:	4413      	add	r3, r2
90010b1a:	2234      	movs	r2, #52	@ 0x34
90010b1c:	4619      	mov	r1, r3
90010b1e:	6878      	ldr	r0, [r7, #4]
90010b20:	f003 fa00 	bl	90013f24 <memcpy>
    return USBH_OK;
90010b24:	2300      	movs	r3, #0
90010b26:	e000      	b.n	90010b2a <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
90010b28:	2302      	movs	r3, #2
  }
}
90010b2a:	4618      	mov	r0, r3
90010b2c:	3718      	adds	r7, #24
90010b2e:	46bd      	mov	sp, r7
90010b30:	bd80      	pop	{r7, pc}

90010b32 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
90010b32:	b580      	push	{r7, lr}
90010b34:	b088      	sub	sp, #32
90010b36:	af02      	add	r7, sp, #8
90010b38:	60f8      	str	r0, [r7, #12]
90010b3a:	607a      	str	r2, [r7, #4]
90010b3c:	603b      	str	r3, [r7, #0]
90010b3e:	460b      	mov	r3, r1
90010b40:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90010b42:	68fb      	ldr	r3, [r7, #12]
90010b44:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010b48:	69db      	ldr	r3, [r3, #28]
90010b4a:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
90010b4c:	7afb      	ldrb	r3, [r7, #11]
90010b4e:	b29a      	uxth	r2, r3
90010b50:	697b      	ldr	r3, [r7, #20]
90010b52:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.PortEnabled == 0U) ||
90010b56:	68fb      	ldr	r3, [r7, #12]
90010b58:	f893 3423 	ldrb.w	r3, [r3, #1059]	@ 0x423
90010b5c:	b2db      	uxtb	r3, r3
90010b5e:	2b00      	cmp	r3, #0
90010b60:	d00e      	beq.n	90010b80 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
90010b62:	68fb      	ldr	r3, [r7, #12]
90010b64:	781b      	ldrb	r3, [r3, #0]
90010b66:	b2db      	uxtb	r3, r3
  if ((phost->device.PortEnabled == 0U) ||
90010b68:	2b0b      	cmp	r3, #11
90010b6a:	d109      	bne.n	90010b80 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90010b6c:	7afb      	ldrb	r3, [r7, #11]
90010b6e:	697a      	ldr	r2, [r7, #20]
90010b70:	2134      	movs	r1, #52	@ 0x34
90010b72:	fb01 f303 	mul.w	r3, r1, r3
90010b76:	4413      	add	r3, r2
90010b78:	3390      	adds	r3, #144	@ 0x90
90010b7a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
90010b7c:	2b01      	cmp	r3, #1
90010b7e:	d001      	beq.n	90010b84 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
90010b80:	2302      	movs	r3, #2
90010b82:	e032      	b.n	90010bea <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
90010b84:	7afb      	ldrb	r3, [r7, #11]
90010b86:	697a      	ldr	r2, [r7, #20]
90010b88:	2134      	movs	r1, #52	@ 0x34
90010b8a:	fb01 f303 	mul.w	r3, r1, r3
90010b8e:	4413      	add	r3, r2
90010b90:	3390      	adds	r3, #144	@ 0x90
90010b92:	2206      	movs	r2, #6
90010b94:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
90010b96:	7af9      	ldrb	r1, [r7, #11]
90010b98:	6a3b      	ldr	r3, [r7, #32]
90010b9a:	9300      	str	r3, [sp, #0]
90010b9c:	683b      	ldr	r3, [r7, #0]
90010b9e:	687a      	ldr	r2, [r7, #4]
90010ba0:	68f8      	ldr	r0, [r7, #12]
90010ba2:	f000 fd72 	bl	9001168a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
90010ba6:	68fb      	ldr	r3, [r7, #12]
90010ba8:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
90010bac:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90010bae:	e013      	b.n	90010bd8 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.PortEnabled == 0U))
90010bb0:	68fb      	ldr	r3, [r7, #12]
90010bb2:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
90010bb6:	693b      	ldr	r3, [r7, #16]
90010bb8:	1ad2      	subs	r2, r2, r3
90010bba:	6a3b      	ldr	r3, [r7, #32]
90010bbc:	f242 7110 	movw	r1, #10000	@ 0x2710
90010bc0:	fb01 f303 	mul.w	r3, r1, r3
90010bc4:	429a      	cmp	r2, r3
90010bc6:	d805      	bhi.n	90010bd4 <USBH_MSC_Read+0xa2>
90010bc8:	68fb      	ldr	r3, [r7, #12]
90010bca:	f893 3423 	ldrb.w	r3, [r3, #1059]	@ 0x423
90010bce:	b2db      	uxtb	r3, r3
90010bd0:	2b00      	cmp	r3, #0
90010bd2:	d101      	bne.n	90010bd8 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
90010bd4:	2302      	movs	r3, #2
90010bd6:	e008      	b.n	90010bea <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90010bd8:	7afb      	ldrb	r3, [r7, #11]
90010bda:	4619      	mov	r1, r3
90010bdc:	68f8      	ldr	r0, [r7, #12]
90010bde:	f7ff fe84 	bl	900108ea <USBH_MSC_RdWrProcess>
90010be2:	4603      	mov	r3, r0
90010be4:	2b01      	cmp	r3, #1
90010be6:	d0e3      	beq.n	90010bb0 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
90010be8:	2300      	movs	r3, #0
}
90010bea:	4618      	mov	r0, r3
90010bec:	3718      	adds	r7, #24
90010bee:	46bd      	mov	sp, r7
90010bf0:	bd80      	pop	{r7, pc}

90010bf2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
90010bf2:	b580      	push	{r7, lr}
90010bf4:	b088      	sub	sp, #32
90010bf6:	af02      	add	r7, sp, #8
90010bf8:	60f8      	str	r0, [r7, #12]
90010bfa:	607a      	str	r2, [r7, #4]
90010bfc:	603b      	str	r3, [r7, #0]
90010bfe:	460b      	mov	r3, r1
90010c00:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90010c02:	68fb      	ldr	r3, [r7, #12]
90010c04:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010c08:	69db      	ldr	r3, [r3, #28]
90010c0a:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
90010c0c:	7afb      	ldrb	r3, [r7, #11]
90010c0e:	b29a      	uxth	r2, r3
90010c10:	697b      	ldr	r3, [r7, #20]
90010c12:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.PortEnabled == 0U) ||
90010c16:	68fb      	ldr	r3, [r7, #12]
90010c18:	f893 3423 	ldrb.w	r3, [r3, #1059]	@ 0x423
90010c1c:	b2db      	uxtb	r3, r3
90010c1e:	2b00      	cmp	r3, #0
90010c20:	d00e      	beq.n	90010c40 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
90010c22:	68fb      	ldr	r3, [r7, #12]
90010c24:	781b      	ldrb	r3, [r3, #0]
90010c26:	b2db      	uxtb	r3, r3
  if ((phost->device.PortEnabled == 0U) ||
90010c28:	2b0b      	cmp	r3, #11
90010c2a:	d109      	bne.n	90010c40 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90010c2c:	7afb      	ldrb	r3, [r7, #11]
90010c2e:	697a      	ldr	r2, [r7, #20]
90010c30:	2134      	movs	r1, #52	@ 0x34
90010c32:	fb01 f303 	mul.w	r3, r1, r3
90010c36:	4413      	add	r3, r2
90010c38:	3390      	adds	r3, #144	@ 0x90
90010c3a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
90010c3c:	2b01      	cmp	r3, #1
90010c3e:	d001      	beq.n	90010c44 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
90010c40:	2302      	movs	r3, #2
90010c42:	e032      	b.n	90010caa <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
90010c44:	7afb      	ldrb	r3, [r7, #11]
90010c46:	697a      	ldr	r2, [r7, #20]
90010c48:	2134      	movs	r1, #52	@ 0x34
90010c4a:	fb01 f303 	mul.w	r3, r1, r3
90010c4e:	4413      	add	r3, r2
90010c50:	3390      	adds	r3, #144	@ 0x90
90010c52:	2207      	movs	r2, #7
90010c54:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
90010c56:	7af9      	ldrb	r1, [r7, #11]
90010c58:	6a3b      	ldr	r3, [r7, #32]
90010c5a:	9300      	str	r3, [sp, #0]
90010c5c:	683b      	ldr	r3, [r7, #0]
90010c5e:	687a      	ldr	r2, [r7, #4]
90010c60:	68f8      	ldr	r0, [r7, #12]
90010c62:	f000 fca2 	bl	900115aa <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
90010c66:	68fb      	ldr	r3, [r7, #12]
90010c68:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
90010c6c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90010c6e:	e013      	b.n	90010c98 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.PortEnabled == 0U))
90010c70:	68fb      	ldr	r3, [r7, #12]
90010c72:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
90010c76:	693b      	ldr	r3, [r7, #16]
90010c78:	1ad2      	subs	r2, r2, r3
90010c7a:	6a3b      	ldr	r3, [r7, #32]
90010c7c:	f242 7110 	movw	r1, #10000	@ 0x2710
90010c80:	fb01 f303 	mul.w	r3, r1, r3
90010c84:	429a      	cmp	r2, r3
90010c86:	d805      	bhi.n	90010c94 <USBH_MSC_Write+0xa2>
90010c88:	68fb      	ldr	r3, [r7, #12]
90010c8a:	f893 3423 	ldrb.w	r3, [r3, #1059]	@ 0x423
90010c8e:	b2db      	uxtb	r3, r3
90010c90:	2b00      	cmp	r3, #0
90010c92:	d101      	bne.n	90010c98 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
90010c94:	2302      	movs	r3, #2
90010c96:	e008      	b.n	90010caa <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90010c98:	7afb      	ldrb	r3, [r7, #11]
90010c9a:	4619      	mov	r1, r3
90010c9c:	68f8      	ldr	r0, [r7, #12]
90010c9e:	f7ff fe24 	bl	900108ea <USBH_MSC_RdWrProcess>
90010ca2:	4603      	mov	r3, r0
90010ca4:	2b01      	cmp	r3, #1
90010ca6:	d0e3      	beq.n	90010c70 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
90010ca8:	2300      	movs	r3, #0
}
90010caa:	4618      	mov	r0, r3
90010cac:	3718      	adds	r7, #24
90010cae:	46bd      	mov	sp, r7
90010cb0:	bd80      	pop	{r7, pc}

90010cb2 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
90010cb2:	b580      	push	{r7, lr}
90010cb4:	b082      	sub	sp, #8
90010cb6:	af00      	add	r7, sp, #0
90010cb8:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
90010cba:	687b      	ldr	r3, [r7, #4]
90010cbc:	2221      	movs	r2, #33	@ 0x21
90010cbe:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
90010cc0:	687b      	ldr	r3, [r7, #4]
90010cc2:	22ff      	movs	r2, #255	@ 0xff
90010cc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
90010cc6:	687b      	ldr	r3, [r7, #4]
90010cc8:	2200      	movs	r2, #0
90010cca:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
90010ccc:	687b      	ldr	r3, [r7, #4]
90010cce:	2200      	movs	r2, #0
90010cd0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
90010cd2:	687b      	ldr	r3, [r7, #4]
90010cd4:	2200      	movs	r2, #0
90010cd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
90010cd8:	2200      	movs	r2, #0
90010cda:	2100      	movs	r1, #0
90010cdc:	6878      	ldr	r0, [r7, #4]
90010cde:	f001 ff4b 	bl	90012b78 <USBH_CtlReq>
90010ce2:	4603      	mov	r3, r0
}
90010ce4:	4618      	mov	r0, r3
90010ce6:	3708      	adds	r7, #8
90010ce8:	46bd      	mov	sp, r7
90010cea:	bd80      	pop	{r7, pc}

90010cec <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
90010cec:	b580      	push	{r7, lr}
90010cee:	b082      	sub	sp, #8
90010cf0:	af00      	add	r7, sp, #0
90010cf2:	6078      	str	r0, [r7, #4]
90010cf4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
90010cf6:	687b      	ldr	r3, [r7, #4]
90010cf8:	22a1      	movs	r2, #161	@ 0xa1
90010cfa:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
90010cfc:	687b      	ldr	r3, [r7, #4]
90010cfe:	22fe      	movs	r2, #254	@ 0xfe
90010d00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
90010d02:	687b      	ldr	r3, [r7, #4]
90010d04:	2200      	movs	r2, #0
90010d06:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
90010d08:	687b      	ldr	r3, [r7, #4]
90010d0a:	2200      	movs	r2, #0
90010d0c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
90010d0e:	687b      	ldr	r3, [r7, #4]
90010d10:	2201      	movs	r2, #1
90010d12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
90010d14:	2201      	movs	r2, #1
90010d16:	6839      	ldr	r1, [r7, #0]
90010d18:	6878      	ldr	r0, [r7, #4]
90010d1a:	f001 ff2d 	bl	90012b78 <USBH_CtlReq>
90010d1e:	4603      	mov	r3, r0
}
90010d20:	4618      	mov	r0, r3
90010d22:	3708      	adds	r7, #8
90010d24:	46bd      	mov	sp, r7
90010d26:	bd80      	pop	{r7, pc}

90010d28 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
90010d28:	b480      	push	{r7}
90010d2a:	b085      	sub	sp, #20
90010d2c:	af00      	add	r7, sp, #0
90010d2e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90010d30:	687b      	ldr	r3, [r7, #4]
90010d32:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010d36:	69db      	ldr	r3, [r3, #28]
90010d38:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
90010d3a:	68fb      	ldr	r3, [r7, #12]
90010d3c:	4a09      	ldr	r2, [pc, #36]	@ (90010d64 <USBH_MSC_BOT_Init+0x3c>)
90010d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
90010d40:	68fb      	ldr	r3, [r7, #12]
90010d42:	4a09      	ldr	r2, [pc, #36]	@ (90010d68 <USBH_MSC_BOT_Init+0x40>)
90010d44:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
90010d46:	68fb      	ldr	r3, [r7, #12]
90010d48:	2201      	movs	r2, #1
90010d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90010d4e:	68fb      	ldr	r3, [r7, #12]
90010d50:	2201      	movs	r2, #1
90010d52:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
90010d56:	2300      	movs	r3, #0
}
90010d58:	4618      	mov	r0, r3
90010d5a:	3714      	adds	r7, #20
90010d5c:	46bd      	mov	sp, r7
90010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
90010d62:	4770      	bx	lr
90010d64:	43425355 	.word	0x43425355
90010d68:	20304050 	.word	0x20304050

90010d6c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
90010d6c:	b580      	push	{r7, lr}
90010d6e:	b088      	sub	sp, #32
90010d70:	af02      	add	r7, sp, #8
90010d72:	6078      	str	r0, [r7, #4]
90010d74:	460b      	mov	r3, r1
90010d76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
90010d78:	2301      	movs	r3, #1
90010d7a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
90010d7c:	2301      	movs	r3, #1
90010d7e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
90010d80:	2301      	movs	r3, #1
90010d82:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
90010d84:	2300      	movs	r3, #0
90010d86:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90010d88:	687b      	ldr	r3, [r7, #4]
90010d8a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90010d8e:	69db      	ldr	r3, [r3, #28]
90010d90:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
90010d92:	2300      	movs	r3, #0
90010d94:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
90010d96:	693b      	ldr	r3, [r7, #16]
90010d98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
90010d9c:	3b01      	subs	r3, #1
90010d9e:	2b0a      	cmp	r3, #10
90010da0:	f200 819e 	bhi.w	900110e0 <USBH_MSC_BOT_Process+0x374>
90010da4:	a201      	add	r2, pc, #4	@ (adr r2, 90010dac <USBH_MSC_BOT_Process+0x40>)
90010da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90010daa:	bf00      	nop
90010dac:	90010dd9 	.word	0x90010dd9
90010db0:	90010e01 	.word	0x90010e01
90010db4:	90010e6b 	.word	0x90010e6b
90010db8:	90010e89 	.word	0x90010e89
90010dbc:	90010f0d 	.word	0x90010f0d
90010dc0:	90010f2f 	.word	0x90010f2f
90010dc4:	90010fc7 	.word	0x90010fc7
90010dc8:	90010fe3 	.word	0x90010fe3
90010dcc:	90011035 	.word	0x90011035
90010dd0:	90011065 	.word	0x90011065
90010dd4:	900110c7 	.word	0x900110c7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
90010dd8:	693b      	ldr	r3, [r7, #16]
90010dda:	78fa      	ldrb	r2, [r7, #3]
90010ddc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
90010de0:	693b      	ldr	r3, [r7, #16]
90010de2:	2202      	movs	r2, #2
90010de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90010de8:	693b      	ldr	r3, [r7, #16]
90010dea:	f103 0154 	add.w	r1, r3, #84	@ 0x54
90010dee:	693b      	ldr	r3, [r7, #16]
90010df0:	795b      	ldrb	r3, [r3, #5]
90010df2:	2201      	movs	r2, #1
90010df4:	9200      	str	r2, [sp, #0]
90010df6:	221f      	movs	r2, #31
90010df8:	6878      	ldr	r0, [r7, #4]
90010dfa:	f002 f8ce 	bl	90012f9a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
90010dfe:	e17e      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90010e00:	693b      	ldr	r3, [r7, #16]
90010e02:	795b      	ldrb	r3, [r3, #5]
90010e04:	4619      	mov	r1, r3
90010e06:	6878      	ldr	r0, [r7, #4]
90010e08:	f7f0 ff25 	bl	90001c56 <USBH_LL_GetURBState>
90010e0c:	4603      	mov	r3, r0
90010e0e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
90010e10:	7d3b      	ldrb	r3, [r7, #20]
90010e12:	2b01      	cmp	r3, #1
90010e14:	d118      	bne.n	90010e48 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
90010e16:	693b      	ldr	r3, [r7, #16]
90010e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90010e1a:	2b00      	cmp	r3, #0
90010e1c:	d00f      	beq.n	90010e3e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
90010e1e:	693b      	ldr	r3, [r7, #16]
90010e20:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90010e24:	b25b      	sxtb	r3, r3
90010e26:	2b00      	cmp	r3, #0
90010e28:	da04      	bge.n	90010e34 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
90010e2a:	693b      	ldr	r3, [r7, #16]
90010e2c:	2203      	movs	r2, #3
90010e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
90010e32:	e157      	b.n	900110e4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
90010e34:	693b      	ldr	r3, [r7, #16]
90010e36:	2205      	movs	r2, #5
90010e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010e3c:	e152      	b.n	900110e4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
90010e3e:	693b      	ldr	r3, [r7, #16]
90010e40:	2207      	movs	r2, #7
90010e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010e46:	e14d      	b.n	900110e4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
90010e48:	7d3b      	ldrb	r3, [r7, #20]
90010e4a:	2b02      	cmp	r3, #2
90010e4c:	d104      	bne.n	90010e58 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90010e4e:	693b      	ldr	r3, [r7, #16]
90010e50:	2201      	movs	r2, #1
90010e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010e56:	e145      	b.n	900110e4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
90010e58:	7d3b      	ldrb	r3, [r7, #20]
90010e5a:	2b05      	cmp	r3, #5
90010e5c:	f040 8142 	bne.w	900110e4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
90010e60:	693b      	ldr	r3, [r7, #16]
90010e62:	220a      	movs	r2, #10
90010e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010e68:	e13c      	b.n	900110e4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:

      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
90010e6a:	693b      	ldr	r3, [r7, #16]
90010e6c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
90010e70:	693b      	ldr	r3, [r7, #16]
90010e72:	895a      	ldrh	r2, [r3, #10]
90010e74:	693b      	ldr	r3, [r7, #16]
90010e76:	791b      	ldrb	r3, [r3, #4]
90010e78:	6878      	ldr	r0, [r7, #4]
90010e7a:	f002 f8b3 	bl	90012fe4 <USBH_BulkReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
90010e7e:	693b      	ldr	r3, [r7, #16]
90010e80:	2204      	movs	r2, #4
90010e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
90010e86:	e13a      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
90010e88:	693b      	ldr	r3, [r7, #16]
90010e8a:	791b      	ldrb	r3, [r3, #4]
90010e8c:	4619      	mov	r1, r3
90010e8e:	6878      	ldr	r0, [r7, #4]
90010e90:	f7f0 fee1 	bl	90001c56 <USBH_LL_GetURBState>
90010e94:	4603      	mov	r3, r0
90010e96:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
90010e98:	7d3b      	ldrb	r3, [r7, #20]
90010e9a:	2b01      	cmp	r3, #1
90010e9c:	d12d      	bne.n	90010efa <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
90010e9e:	693b      	ldr	r3, [r7, #16]
90010ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90010ea2:	693a      	ldr	r2, [r7, #16]
90010ea4:	8952      	ldrh	r2, [r2, #10]
90010ea6:	4293      	cmp	r3, r2
90010ea8:	d910      	bls.n	90010ecc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
90010eaa:	693b      	ldr	r3, [r7, #16]
90010eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90010eb0:	693a      	ldr	r2, [r7, #16]
90010eb2:	8952      	ldrh	r2, [r2, #10]
90010eb4:	441a      	add	r2, r3
90010eb6:	693b      	ldr	r3, [r7, #16]
90010eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
90010ebc:	693b      	ldr	r3, [r7, #16]
90010ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90010ec0:	693a      	ldr	r2, [r7, #16]
90010ec2:	8952      	ldrh	r2, [r2, #10]
90010ec4:	1a9a      	subs	r2, r3, r2
90010ec6:	693b      	ldr	r3, [r7, #16]
90010ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
90010eca:	e002      	b.n	90010ed2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
90010ecc:	693b      	ldr	r3, [r7, #16]
90010ece:	2200      	movs	r2, #0
90010ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90010ed2:	693b      	ldr	r3, [r7, #16]
90010ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90010ed6:	2b00      	cmp	r3, #0
90010ed8:	d00a      	beq.n	90010ef0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
90010eda:	693b      	ldr	r3, [r7, #16]
90010edc:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
90010ee0:	693b      	ldr	r3, [r7, #16]
90010ee2:	895a      	ldrh	r2, [r3, #10]
90010ee4:	693b      	ldr	r3, [r7, #16]
90010ee6:	791b      	ldrb	r3, [r3, #4]
90010ee8:	6878      	ldr	r0, [r7, #4]
90010eea:	f002 f87b 	bl	90012fe4 <USBH_BulkReceiveData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
90010eee:	e0fb      	b.n	900110e8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
90010ef0:	693b      	ldr	r3, [r7, #16]
90010ef2:	2207      	movs	r2, #7
90010ef4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010ef8:	e0f6      	b.n	900110e8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
90010efa:	7d3b      	ldrb	r3, [r7, #20]
90010efc:	2b05      	cmp	r3, #5
90010efe:	f040 80f3 	bne.w	900110e8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
90010f02:	693b      	ldr	r3, [r7, #16]
90010f04:	2209      	movs	r2, #9
90010f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010f0a:	e0ed      	b.n	900110e8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
90010f0c:	693b      	ldr	r3, [r7, #16]
90010f0e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
90010f12:	693b      	ldr	r3, [r7, #16]
90010f14:	891a      	ldrh	r2, [r3, #8]
90010f16:	693b      	ldr	r3, [r7, #16]
90010f18:	795b      	ldrb	r3, [r3, #5]
90010f1a:	2001      	movs	r0, #1
90010f1c:	9000      	str	r0, [sp, #0]
90010f1e:	6878      	ldr	r0, [r7, #4]
90010f20:	f002 f83b 	bl	90012f9a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
90010f24:	693b      	ldr	r3, [r7, #16]
90010f26:	2206      	movs	r2, #6
90010f28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010f2c:	e0e7      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90010f2e:	693b      	ldr	r3, [r7, #16]
90010f30:	795b      	ldrb	r3, [r3, #5]
90010f32:	4619      	mov	r1, r3
90010f34:	6878      	ldr	r0, [r7, #4]
90010f36:	f7f0 fe8e 	bl	90001c56 <USBH_LL_GetURBState>
90010f3a:	4603      	mov	r3, r0
90010f3c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
90010f3e:	7d3b      	ldrb	r3, [r7, #20]
90010f40:	2b01      	cmp	r3, #1
90010f42:	d12f      	bne.n	90010fa4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
90010f44:	693b      	ldr	r3, [r7, #16]
90010f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90010f48:	693a      	ldr	r2, [r7, #16]
90010f4a:	8912      	ldrh	r2, [r2, #8]
90010f4c:	4293      	cmp	r3, r2
90010f4e:	d910      	bls.n	90010f72 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90010f50:	693b      	ldr	r3, [r7, #16]
90010f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90010f56:	693a      	ldr	r2, [r7, #16]
90010f58:	8912      	ldrh	r2, [r2, #8]
90010f5a:	441a      	add	r2, r3
90010f5c:	693b      	ldr	r3, [r7, #16]
90010f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
90010f62:	693b      	ldr	r3, [r7, #16]
90010f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90010f66:	693a      	ldr	r2, [r7, #16]
90010f68:	8912      	ldrh	r2, [r2, #8]
90010f6a:	1a9a      	subs	r2, r3, r2
90010f6c:	693b      	ldr	r3, [r7, #16]
90010f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
90010f70:	e002      	b.n	90010f78 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
90010f72:	693b      	ldr	r3, [r7, #16]
90010f74:	2200      	movs	r2, #0
90010f76:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90010f78:	693b      	ldr	r3, [r7, #16]
90010f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90010f7c:	2b00      	cmp	r3, #0
90010f7e:	d00c      	beq.n	90010f9a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
90010f80:	693b      	ldr	r3, [r7, #16]
90010f82:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
90010f86:	693b      	ldr	r3, [r7, #16]
90010f88:	891a      	ldrh	r2, [r3, #8]
90010f8a:	693b      	ldr	r3, [r7, #16]
90010f8c:	795b      	ldrb	r3, [r3, #5]
90010f8e:	2001      	movs	r0, #1
90010f90:	9000      	str	r0, [sp, #0]
90010f92:	6878      	ldr	r0, [r7, #4]
90010f94:	f002 f801 	bl	90012f9a <USBH_BulkSendData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
90010f98:	e0a8      	b.n	900110ec <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
90010f9a:	693b      	ldr	r3, [r7, #16]
90010f9c:	2207      	movs	r2, #7
90010f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010fa2:	e0a3      	b.n	900110ec <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
90010fa4:	7d3b      	ldrb	r3, [r7, #20]
90010fa6:	2b02      	cmp	r3, #2
90010fa8:	d104      	bne.n	90010fb4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
90010faa:	693b      	ldr	r3, [r7, #16]
90010fac:	2205      	movs	r2, #5
90010fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010fb2:	e09b      	b.n	900110ec <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
90010fb4:	7d3b      	ldrb	r3, [r7, #20]
90010fb6:	2b05      	cmp	r3, #5
90010fb8:	f040 8098 	bne.w	900110ec <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
90010fbc:	693b      	ldr	r3, [r7, #16]
90010fbe:	220a      	movs	r2, #10
90010fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90010fc4:	e092      	b.n	900110ec <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
90010fc6:	693b      	ldr	r3, [r7, #16]
90010fc8:	f103 0178 	add.w	r1, r3, #120	@ 0x78
90010fcc:	693b      	ldr	r3, [r7, #16]
90010fce:	791b      	ldrb	r3, [r3, #4]
90010fd0:	220d      	movs	r2, #13
90010fd2:	6878      	ldr	r0, [r7, #4]
90010fd4:	f002 f806 	bl	90012fe4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
90010fd8:	693b      	ldr	r3, [r7, #16]
90010fda:	2208      	movs	r2, #8
90010fdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */
      break;
90010fe0:	e08d      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
90010fe2:	693b      	ldr	r3, [r7, #16]
90010fe4:	791b      	ldrb	r3, [r3, #4]
90010fe6:	4619      	mov	r1, r3
90010fe8:	6878      	ldr	r0, [r7, #4]
90010fea:	f7f0 fe34 	bl	90001c56 <USBH_LL_GetURBState>
90010fee:	4603      	mov	r3, r0
90010ff0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
90010ff2:	7d3b      	ldrb	r3, [r7, #20]
90010ff4:	2b01      	cmp	r3, #1
90010ff6:	d115      	bne.n	90011024 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90010ff8:	693b      	ldr	r3, [r7, #16]
90010ffa:	2201      	movs	r2, #1
90010ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90011000:	693b      	ldr	r3, [r7, #16]
90011002:	2201      	movs	r2, #1
90011004:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
90011008:	6878      	ldr	r0, [r7, #4]
9001100a:	f000 f8a9 	bl	90011160 <USBH_MSC_DecodeCSW>
9001100e:	4603      	mov	r3, r0
90011010:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
90011012:	7d7b      	ldrb	r3, [r7, #21]
90011014:	2b00      	cmp	r3, #0
90011016:	d102      	bne.n	9001101e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
90011018:	2300      	movs	r3, #0
9001101a:	75fb      	strb	r3, [r7, #23]
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
9001101c:	e068      	b.n	900110f0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
9001101e:	2302      	movs	r3, #2
90011020:	75fb      	strb	r3, [r7, #23]
      break;
90011022:	e065      	b.n	900110f0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
90011024:	7d3b      	ldrb	r3, [r7, #20]
90011026:	2b05      	cmp	r3, #5
90011028:	d162      	bne.n	900110f0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
9001102a:	693b      	ldr	r3, [r7, #16]
9001102c:	2209      	movs	r2, #9
9001102e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90011032:	e05d      	b.n	900110f0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
90011034:	78fb      	ldrb	r3, [r7, #3]
90011036:	2200      	movs	r2, #0
90011038:	4619      	mov	r1, r3
9001103a:	6878      	ldr	r0, [r7, #4]
9001103c:	f000 f864 	bl	90011108 <USBH_MSC_BOT_Abort>
90011040:	4603      	mov	r3, r0
90011042:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
90011044:	7dbb      	ldrb	r3, [r7, #22]
90011046:	2b00      	cmp	r3, #0
90011048:	d104      	bne.n	90011054 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
9001104a:	693b      	ldr	r3, [r7, #16]
9001104c:	2207      	movs	r2, #7
9001104e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
90011052:	e04f      	b.n	900110f4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
90011054:	7dbb      	ldrb	r3, [r7, #22]
90011056:	2b04      	cmp	r3, #4
90011058:	d14c      	bne.n	900110f4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
9001105a:	693b      	ldr	r3, [r7, #16]
9001105c:	220b      	movs	r2, #11
9001105e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
90011062:	e047      	b.n	900110f4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
90011064:	78fb      	ldrb	r3, [r7, #3]
90011066:	2201      	movs	r2, #1
90011068:	4619      	mov	r1, r3
9001106a:	6878      	ldr	r0, [r7, #4]
9001106c:	f000 f84c 	bl	90011108 <USBH_MSC_BOT_Abort>
90011070:	4603      	mov	r3, r0
90011072:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
90011074:	7dbb      	ldrb	r3, [r7, #22]
90011076:	2b00      	cmp	r3, #0
90011078:	d11d      	bne.n	900110b6 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
9001107a:	693b      	ldr	r3, [r7, #16]
9001107c:	795b      	ldrb	r3, [r3, #5]
9001107e:	4619      	mov	r1, r3
90011080:	6878      	ldr	r0, [r7, #4]
90011082:	f7f0 fe4b 	bl	90001d1c <USBH_LL_GetToggle>
90011086:	4603      	mov	r3, r0
90011088:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
9001108a:	693b      	ldr	r3, [r7, #16]
9001108c:	7959      	ldrb	r1, [r3, #5]
9001108e:	7bfb      	ldrb	r3, [r7, #15]
90011090:	f1c3 0301 	rsb	r3, r3, #1
90011094:	b2db      	uxtb	r3, r3
90011096:	461a      	mov	r2, r3
90011098:	6878      	ldr	r0, [r7, #4]
9001109a:	f7f0 fe0d 	bl	90001cb8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
9001109e:	693b      	ldr	r3, [r7, #16]
900110a0:	791b      	ldrb	r3, [r3, #4]
900110a2:	2200      	movs	r2, #0
900110a4:	4619      	mov	r1, r3
900110a6:	6878      	ldr	r0, [r7, #4]
900110a8:	f7f0 fe06 	bl	90001cb8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
900110ac:	693b      	ldr	r3, [r7, #16]
900110ae:	2209      	movs	r2, #9
900110b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
900110b4:	e020      	b.n	900110f8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
900110b6:	7dbb      	ldrb	r3, [r7, #22]
900110b8:	2b04      	cmp	r3, #4
900110ba:	d11d      	bne.n	900110f8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
900110bc:	693b      	ldr	r3, [r7, #16]
900110be:	220b      	movs	r2, #11
900110c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
900110c4:	e018      	b.n	900110f8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
900110c6:	6878      	ldr	r0, [r7, #4]
900110c8:	f7ff fdf3 	bl	90010cb2 <USBH_MSC_BOT_REQ_Reset>
900110cc:	4603      	mov	r3, r0
900110ce:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
900110d0:	7dfb      	ldrb	r3, [r7, #23]
900110d2:	2b00      	cmp	r3, #0
900110d4:	d112      	bne.n	900110fc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
900110d6:	693b      	ldr	r3, [r7, #16]
900110d8:	2201      	movs	r2, #1
900110da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
900110de:	e00d      	b.n	900110fc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
900110e0:	bf00      	nop
900110e2:	e00c      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>
      break;
900110e4:	bf00      	nop
900110e6:	e00a      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>
      break;
900110e8:	bf00      	nop
900110ea:	e008      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>
      break;
900110ec:	bf00      	nop
900110ee:	e006      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>
      break;
900110f0:	bf00      	nop
900110f2:	e004      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>
      break;
900110f4:	bf00      	nop
900110f6:	e002      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>
      break;
900110f8:	bf00      	nop
900110fa:	e000      	b.n	900110fe <USBH_MSC_BOT_Process+0x392>
      break;
900110fc:	bf00      	nop
  }
  return status;
900110fe:	7dfb      	ldrb	r3, [r7, #23]
}
90011100:	4618      	mov	r0, r3
90011102:	3718      	adds	r7, #24
90011104:	46bd      	mov	sp, r7
90011106:	bd80      	pop	{r7, pc}

90011108 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
90011108:	b580      	push	{r7, lr}
9001110a:	b084      	sub	sp, #16
9001110c:	af00      	add	r7, sp, #0
9001110e:	6078      	str	r0, [r7, #4]
90011110:	460b      	mov	r3, r1
90011112:	70fb      	strb	r3, [r7, #3]
90011114:	4613      	mov	r3, r2
90011116:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
90011118:	2302      	movs	r3, #2
9001111a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9001111c:	687b      	ldr	r3, [r7, #4]
9001111e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011122:	69db      	ldr	r3, [r3, #28]
90011124:	60bb      	str	r3, [r7, #8]

  switch (dir)
90011126:	78bb      	ldrb	r3, [r7, #2]
90011128:	2b00      	cmp	r3, #0
9001112a:	d002      	beq.n	90011132 <USBH_MSC_BOT_Abort+0x2a>
9001112c:	2b01      	cmp	r3, #1
9001112e:	d009      	beq.n	90011144 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
90011130:	e011      	b.n	90011156 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
90011132:	68bb      	ldr	r3, [r7, #8]
90011134:	79db      	ldrb	r3, [r3, #7]
90011136:	4619      	mov	r1, r3
90011138:	6878      	ldr	r0, [r7, #4]
9001113a:	f001 f9e9 	bl	90012510 <USBH_ClrFeature>
9001113e:	4603      	mov	r3, r0
90011140:	73fb      	strb	r3, [r7, #15]
      break;
90011142:	e008      	b.n	90011156 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
90011144:	68bb      	ldr	r3, [r7, #8]
90011146:	799b      	ldrb	r3, [r3, #6]
90011148:	4619      	mov	r1, r3
9001114a:	6878      	ldr	r0, [r7, #4]
9001114c:	f001 f9e0 	bl	90012510 <USBH_ClrFeature>
90011150:	4603      	mov	r3, r0
90011152:	73fb      	strb	r3, [r7, #15]
      break;
90011154:	bf00      	nop
  }
  return status;
90011156:	7bfb      	ldrb	r3, [r7, #15]
}
90011158:	4618      	mov	r0, r3
9001115a:	3710      	adds	r7, #16
9001115c:	46bd      	mov	sp, r7
9001115e:	bd80      	pop	{r7, pc}

90011160 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
90011160:	b580      	push	{r7, lr}
90011162:	b084      	sub	sp, #16
90011164:	af00      	add	r7, sp, #0
90011166:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90011168:	687b      	ldr	r3, [r7, #4]
9001116a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9001116e:	69db      	ldr	r3, [r3, #28]
90011170:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
90011172:	2301      	movs	r3, #1
90011174:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
90011176:	68bb      	ldr	r3, [r7, #8]
90011178:	791b      	ldrb	r3, [r3, #4]
9001117a:	4619      	mov	r1, r3
9001117c:	6878      	ldr	r0, [r7, #4]
9001117e:	f7f0 fcff 	bl	90001b80 <USBH_LL_GetLastXferSize>
90011182:	4603      	mov	r3, r0
90011184:	2b0d      	cmp	r3, #13
90011186:	d002      	beq.n	9001118e <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
90011188:	2302      	movs	r3, #2
9001118a:	73fb      	strb	r3, [r7, #15]
9001118c:	e024      	b.n	900111d8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
9001118e:	68bb      	ldr	r3, [r7, #8]
90011190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90011192:	4a14      	ldr	r2, [pc, #80]	@ (900111e4 <USBH_MSC_DecodeCSW+0x84>)
90011194:	4293      	cmp	r3, r2
90011196:	d11d      	bne.n	900111d4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
90011198:	68bb      	ldr	r3, [r7, #8]
9001119a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
9001119c:	68bb      	ldr	r3, [r7, #8]
9001119e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900111a0:	429a      	cmp	r2, r3
900111a2:	d119      	bne.n	900111d8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
900111a4:	68bb      	ldr	r3, [r7, #8]
900111a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
900111aa:	2b00      	cmp	r3, #0
900111ac:	d102      	bne.n	900111b4 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
900111ae:	2300      	movs	r3, #0
900111b0:	73fb      	strb	r3, [r7, #15]
900111b2:	e011      	b.n	900111d8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
900111b4:	68bb      	ldr	r3, [r7, #8]
900111b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
900111ba:	2b01      	cmp	r3, #1
900111bc:	d102      	bne.n	900111c4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
900111be:	2301      	movs	r3, #1
900111c0:	73fb      	strb	r3, [r7, #15]
900111c2:	e009      	b.n	900111d8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
900111c4:	68bb      	ldr	r3, [r7, #8]
900111c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
900111ca:	2b02      	cmp	r3, #2
900111cc:	d104      	bne.n	900111d8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
900111ce:	2302      	movs	r3, #2
900111d0:	73fb      	strb	r3, [r7, #15]
900111d2:	e001      	b.n	900111d8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
900111d4:	2302      	movs	r3, #2
900111d6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
900111d8:	7bfb      	ldrb	r3, [r7, #15]
}
900111da:	4618      	mov	r0, r3
900111dc:	3710      	adds	r7, #16
900111de:	46bd      	mov	sp, r7
900111e0:	bd80      	pop	{r7, pc}
900111e2:	bf00      	nop
900111e4:	53425355 	.word	0x53425355

900111e8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
900111e8:	b580      	push	{r7, lr}
900111ea:	b084      	sub	sp, #16
900111ec:	af00      	add	r7, sp, #0
900111ee:	6078      	str	r0, [r7, #4]
900111f0:	460b      	mov	r3, r1
900111f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
900111f4:	2302      	movs	r3, #2
900111f6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900111f8:	687b      	ldr	r3, [r7, #4]
900111fa:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
900111fe:	69db      	ldr	r3, [r3, #28]
90011200:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
90011202:	68bb      	ldr	r3, [r7, #8]
90011204:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
90011208:	2b01      	cmp	r3, #1
9001120a:	d002      	beq.n	90011212 <USBH_MSC_SCSI_TestUnitReady+0x2a>
9001120c:	2b02      	cmp	r3, #2
9001120e:	d021      	beq.n	90011254 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
90011210:	e028      	b.n	90011264 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
90011212:	68bb      	ldr	r3, [r7, #8]
90011214:	2200      	movs	r2, #0
90011216:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90011218:	68bb      	ldr	r3, [r7, #8]
9001121a:	2200      	movs	r2, #0
9001121c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90011220:	68bb      	ldr	r3, [r7, #8]
90011222:	220a      	movs	r2, #10
90011224:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90011228:	68bb      	ldr	r3, [r7, #8]
9001122a:	3363      	adds	r3, #99	@ 0x63
9001122c:	2210      	movs	r2, #16
9001122e:	2100      	movs	r1, #0
90011230:	4618      	mov	r0, r3
90011232:	f002 fe33 	bl	90013e9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
90011236:	68bb      	ldr	r3, [r7, #8]
90011238:	2200      	movs	r2, #0
9001123a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
9001123e:	68bb      	ldr	r3, [r7, #8]
90011240:	2201      	movs	r2, #1
90011242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90011246:	68bb      	ldr	r3, [r7, #8]
90011248:	2202      	movs	r2, #2
9001124a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
9001124e:	2301      	movs	r3, #1
90011250:	73fb      	strb	r3, [r7, #15]
      break;
90011252:	e007      	b.n	90011264 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
90011254:	78fb      	ldrb	r3, [r7, #3]
90011256:	4619      	mov	r1, r3
90011258:	6878      	ldr	r0, [r7, #4]
9001125a:	f7ff fd87 	bl	90010d6c <USBH_MSC_BOT_Process>
9001125e:	4603      	mov	r3, r0
90011260:	73fb      	strb	r3, [r7, #15]
      break;
90011262:	bf00      	nop
  }

  return error;
90011264:	7bfb      	ldrb	r3, [r7, #15]
}
90011266:	4618      	mov	r0, r3
90011268:	3710      	adds	r7, #16
9001126a:	46bd      	mov	sp, r7
9001126c:	bd80      	pop	{r7, pc}

9001126e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
9001126e:	b580      	push	{r7, lr}
90011270:	b086      	sub	sp, #24
90011272:	af00      	add	r7, sp, #0
90011274:	60f8      	str	r0, [r7, #12]
90011276:	460b      	mov	r3, r1
90011278:	607a      	str	r2, [r7, #4]
9001127a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
9001127c:	2301      	movs	r3, #1
9001127e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90011280:	68fb      	ldr	r3, [r7, #12]
90011282:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011286:	69db      	ldr	r3, [r3, #28]
90011288:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
9001128a:	693b      	ldr	r3, [r7, #16]
9001128c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
90011290:	2b01      	cmp	r3, #1
90011292:	d002      	beq.n	9001129a <USBH_MSC_SCSI_ReadCapacity+0x2c>
90011294:	2b02      	cmp	r3, #2
90011296:	d027      	beq.n	900112e8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
90011298:	e05e      	b.n	90011358 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
9001129a:	693b      	ldr	r3, [r7, #16]
9001129c:	2208      	movs	r2, #8
9001129e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
900112a0:	693b      	ldr	r3, [r7, #16]
900112a2:	2280      	movs	r2, #128	@ 0x80
900112a4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900112a8:	693b      	ldr	r3, [r7, #16]
900112aa:	220a      	movs	r2, #10
900112ac:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
900112b0:	693b      	ldr	r3, [r7, #16]
900112b2:	3363      	adds	r3, #99	@ 0x63
900112b4:	2210      	movs	r2, #16
900112b6:	2100      	movs	r1, #0
900112b8:	4618      	mov	r0, r3
900112ba:	f002 fdef 	bl	90013e9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
900112be:	693b      	ldr	r3, [r7, #16]
900112c0:	2225      	movs	r2, #37	@ 0x25
900112c2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
900112c6:	693b      	ldr	r3, [r7, #16]
900112c8:	2201      	movs	r2, #1
900112ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900112ce:	693b      	ldr	r3, [r7, #16]
900112d0:	2202      	movs	r2, #2
900112d2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900112d6:	693b      	ldr	r3, [r7, #16]
900112d8:	f103 0210 	add.w	r2, r3, #16
900112dc:	693b      	ldr	r3, [r7, #16]
900112de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
900112e2:	2301      	movs	r3, #1
900112e4:	75fb      	strb	r3, [r7, #23]
      break;
900112e6:	e037      	b.n	90011358 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
900112e8:	7afb      	ldrb	r3, [r7, #11]
900112ea:	4619      	mov	r1, r3
900112ec:	68f8      	ldr	r0, [r7, #12]
900112ee:	f7ff fd3d 	bl	90010d6c <USBH_MSC_BOT_Process>
900112f2:	4603      	mov	r3, r0
900112f4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
900112f6:	7dfb      	ldrb	r3, [r7, #23]
900112f8:	2b00      	cmp	r3, #0
900112fa:	d12c      	bne.n	90011356 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
900112fc:	693b      	ldr	r3, [r7, #16]
900112fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90011302:	3303      	adds	r3, #3
90011304:	781b      	ldrb	r3, [r3, #0]
90011306:	461a      	mov	r2, r3
90011308:	693b      	ldr	r3, [r7, #16]
9001130a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001130e:	3302      	adds	r3, #2
90011310:	781b      	ldrb	r3, [r3, #0]
90011312:	021b      	lsls	r3, r3, #8
90011314:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
90011316:	693b      	ldr	r3, [r7, #16]
90011318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001131c:	3301      	adds	r3, #1
9001131e:	781b      	ldrb	r3, [r3, #0]
90011320:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
90011322:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
90011324:	693b      	ldr	r3, [r7, #16]
90011326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001132a:	781b      	ldrb	r3, [r3, #0]
9001132c:	061b      	lsls	r3, r3, #24
9001132e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
90011330:	687b      	ldr	r3, [r7, #4]
90011332:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
90011334:	693b      	ldr	r3, [r7, #16]
90011336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001133a:	3307      	adds	r3, #7
9001133c:	781b      	ldrb	r3, [r3, #0]
9001133e:	461a      	mov	r2, r3
90011340:	693b      	ldr	r3, [r7, #16]
90011342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90011346:	3306      	adds	r3, #6
90011348:	781b      	ldrb	r3, [r3, #0]
9001134a:	021b      	lsls	r3, r3, #8
9001134c:	b29b      	uxth	r3, r3
9001134e:	4313      	orrs	r3, r2
90011350:	b29a      	uxth	r2, r3
90011352:	687b      	ldr	r3, [r7, #4]
90011354:	809a      	strh	r2, [r3, #4]
      break;
90011356:	bf00      	nop
  }

  return error;
90011358:	7dfb      	ldrb	r3, [r7, #23]
}
9001135a:	4618      	mov	r0, r3
9001135c:	3718      	adds	r7, #24
9001135e:	46bd      	mov	sp, r7
90011360:	bd80      	pop	{r7, pc}

90011362 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
90011362:	b580      	push	{r7, lr}
90011364:	b086      	sub	sp, #24
90011366:	af00      	add	r7, sp, #0
90011368:	60f8      	str	r0, [r7, #12]
9001136a:	460b      	mov	r3, r1
9001136c:	607a      	str	r2, [r7, #4]
9001136e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
90011370:	2302      	movs	r3, #2
90011372:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90011374:	68fb      	ldr	r3, [r7, #12]
90011376:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9001137a:	69db      	ldr	r3, [r3, #28]
9001137c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
9001137e:	693b      	ldr	r3, [r7, #16]
90011380:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
90011384:	2b01      	cmp	r3, #1
90011386:	d002      	beq.n	9001138e <USBH_MSC_SCSI_Inquiry+0x2c>
90011388:	2b02      	cmp	r3, #2
9001138a:	d03d      	beq.n	90011408 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
9001138c:	e089      	b.n	900114a2 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
9001138e:	693b      	ldr	r3, [r7, #16]
90011390:	2224      	movs	r2, #36	@ 0x24
90011392:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90011394:	693b      	ldr	r3, [r7, #16]
90011396:	2280      	movs	r2, #128	@ 0x80
90011398:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9001139c:	693b      	ldr	r3, [r7, #16]
9001139e:	220a      	movs	r2, #10
900113a0:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
900113a4:	693b      	ldr	r3, [r7, #16]
900113a6:	3363      	adds	r3, #99	@ 0x63
900113a8:	220a      	movs	r2, #10
900113aa:	2100      	movs	r1, #0
900113ac:	4618      	mov	r0, r3
900113ae:	f002 fd75 	bl	90013e9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
900113b2:	693b      	ldr	r3, [r7, #16]
900113b4:	2212      	movs	r2, #18
900113b6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
900113ba:	7afb      	ldrb	r3, [r7, #11]
900113bc:	015b      	lsls	r3, r3, #5
900113be:	b2da      	uxtb	r2, r3
900113c0:	693b      	ldr	r3, [r7, #16]
900113c2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
900113c6:	693b      	ldr	r3, [r7, #16]
900113c8:	2200      	movs	r2, #0
900113ca:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
900113ce:	693b      	ldr	r3, [r7, #16]
900113d0:	2200      	movs	r2, #0
900113d2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
900113d6:	693b      	ldr	r3, [r7, #16]
900113d8:	2224      	movs	r2, #36	@ 0x24
900113da:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
900113de:	693b      	ldr	r3, [r7, #16]
900113e0:	2200      	movs	r2, #0
900113e2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
900113e6:	693b      	ldr	r3, [r7, #16]
900113e8:	2201      	movs	r2, #1
900113ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900113ee:	693b      	ldr	r3, [r7, #16]
900113f0:	2202      	movs	r2, #2
900113f2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900113f6:	693b      	ldr	r3, [r7, #16]
900113f8:	f103 0210 	add.w	r2, r3, #16
900113fc:	693b      	ldr	r3, [r7, #16]
900113fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
90011402:	2301      	movs	r3, #1
90011404:	75fb      	strb	r3, [r7, #23]
      break;
90011406:	e04c      	b.n	900114a2 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
90011408:	7afb      	ldrb	r3, [r7, #11]
9001140a:	4619      	mov	r1, r3
9001140c:	68f8      	ldr	r0, [r7, #12]
9001140e:	f7ff fcad 	bl	90010d6c <USBH_MSC_BOT_Process>
90011412:	4603      	mov	r3, r0
90011414:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
90011416:	7dfb      	ldrb	r3, [r7, #23]
90011418:	2b00      	cmp	r3, #0
9001141a:	d141      	bne.n	900114a0 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
9001141c:	2222      	movs	r2, #34	@ 0x22
9001141e:	2100      	movs	r1, #0
90011420:	6878      	ldr	r0, [r7, #4]
90011422:	f002 fd3b 	bl	90013e9c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
90011426:	693b      	ldr	r3, [r7, #16]
90011428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001142c:	781b      	ldrb	r3, [r3, #0]
9001142e:	f003 031f 	and.w	r3, r3, #31
90011432:	b2da      	uxtb	r2, r3
90011434:	687b      	ldr	r3, [r7, #4]
90011436:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
90011438:	693b      	ldr	r3, [r7, #16]
9001143a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001143e:	781b      	ldrb	r3, [r3, #0]
90011440:	095b      	lsrs	r3, r3, #5
90011442:	b2da      	uxtb	r2, r3
90011444:	687b      	ldr	r3, [r7, #4]
90011446:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
90011448:	693b      	ldr	r3, [r7, #16]
9001144a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001144e:	3301      	adds	r3, #1
90011450:	781b      	ldrb	r3, [r3, #0]
90011452:	b25b      	sxtb	r3, r3
90011454:	2b00      	cmp	r3, #0
90011456:	da03      	bge.n	90011460 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
90011458:	687b      	ldr	r3, [r7, #4]
9001145a:	2201      	movs	r2, #1
9001145c:	709a      	strb	r2, [r3, #2]
9001145e:	e002      	b.n	90011466 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
90011460:	687b      	ldr	r3, [r7, #4]
90011462:	2200      	movs	r2, #0
90011464:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
90011466:	687b      	ldr	r3, [r7, #4]
90011468:	1cd8      	adds	r0, r3, #3
9001146a:	693b      	ldr	r3, [r7, #16]
9001146c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90011470:	3308      	adds	r3, #8
90011472:	2208      	movs	r2, #8
90011474:	4619      	mov	r1, r3
90011476:	f002 fd55 	bl	90013f24 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
9001147a:	687b      	ldr	r3, [r7, #4]
9001147c:	f103 000c 	add.w	r0, r3, #12
90011480:	693b      	ldr	r3, [r7, #16]
90011482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90011486:	3310      	adds	r3, #16
90011488:	2210      	movs	r2, #16
9001148a:	4619      	mov	r1, r3
9001148c:	f002 fd4a 	bl	90013f24 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
90011490:	687b      	ldr	r3, [r7, #4]
90011492:	331d      	adds	r3, #29
90011494:	693a      	ldr	r2, [r7, #16]
90011496:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
9001149a:	3220      	adds	r2, #32
9001149c:	6812      	ldr	r2, [r2, #0]
9001149e:	601a      	str	r2, [r3, #0]
      break;
900114a0:	bf00      	nop
  }

  return error;
900114a2:	7dfb      	ldrb	r3, [r7, #23]
}
900114a4:	4618      	mov	r0, r3
900114a6:	3718      	adds	r7, #24
900114a8:	46bd      	mov	sp, r7
900114aa:	bd80      	pop	{r7, pc}

900114ac <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
900114ac:	b580      	push	{r7, lr}
900114ae:	b086      	sub	sp, #24
900114b0:	af00      	add	r7, sp, #0
900114b2:	60f8      	str	r0, [r7, #12]
900114b4:	460b      	mov	r3, r1
900114b6:	607a      	str	r2, [r7, #4]
900114b8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
900114ba:	2302      	movs	r3, #2
900114bc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900114be:	68fb      	ldr	r3, [r7, #12]
900114c0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
900114c4:	69db      	ldr	r3, [r3, #28]
900114c6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
900114c8:	693b      	ldr	r3, [r7, #16]
900114ca:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
900114ce:	2b01      	cmp	r3, #1
900114d0:	d002      	beq.n	900114d8 <USBH_MSC_SCSI_RequestSense+0x2c>
900114d2:	2b02      	cmp	r3, #2
900114d4:	d03d      	beq.n	90011552 <USBH_MSC_SCSI_RequestSense+0xa6>
        }
      }
      break;

    default:
      break;
900114d6:	e063      	b.n	900115a0 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
900114d8:	693b      	ldr	r3, [r7, #16]
900114da:	220e      	movs	r2, #14
900114dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
900114de:	693b      	ldr	r3, [r7, #16]
900114e0:	2280      	movs	r2, #128	@ 0x80
900114e2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900114e6:	693b      	ldr	r3, [r7, #16]
900114e8:	220a      	movs	r2, #10
900114ea:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
900114ee:	693b      	ldr	r3, [r7, #16]
900114f0:	3363      	adds	r3, #99	@ 0x63
900114f2:	2210      	movs	r2, #16
900114f4:	2100      	movs	r1, #0
900114f6:	4618      	mov	r0, r3
900114f8:	f002 fcd0 	bl	90013e9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
900114fc:	693b      	ldr	r3, [r7, #16]
900114fe:	2203      	movs	r2, #3
90011500:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
90011504:	7afb      	ldrb	r3, [r7, #11]
90011506:	015b      	lsls	r3, r3, #5
90011508:	b2da      	uxtb	r2, r3
9001150a:	693b      	ldr	r3, [r7, #16]
9001150c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
90011510:	693b      	ldr	r3, [r7, #16]
90011512:	2200      	movs	r2, #0
90011514:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
90011518:	693b      	ldr	r3, [r7, #16]
9001151a:	2200      	movs	r2, #0
9001151c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
90011520:	693b      	ldr	r3, [r7, #16]
90011522:	220e      	movs	r2, #14
90011524:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
90011528:	693b      	ldr	r3, [r7, #16]
9001152a:	2200      	movs	r2, #0
9001152c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90011530:	693b      	ldr	r3, [r7, #16]
90011532:	2201      	movs	r2, #1
90011534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90011538:	693b      	ldr	r3, [r7, #16]
9001153a:	2202      	movs	r2, #2
9001153c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90011540:	693b      	ldr	r3, [r7, #16]
90011542:	f103 0210 	add.w	r2, r3, #16
90011546:	693b      	ldr	r3, [r7, #16]
90011548:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
9001154c:	2301      	movs	r3, #1
9001154e:	75fb      	strb	r3, [r7, #23]
      break;
90011550:	e026      	b.n	900115a0 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
90011552:	7afb      	ldrb	r3, [r7, #11]
90011554:	4619      	mov	r1, r3
90011556:	68f8      	ldr	r0, [r7, #12]
90011558:	f7ff fc08 	bl	90010d6c <USBH_MSC_BOT_Process>
9001155c:	4603      	mov	r3, r0
9001155e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
90011560:	7dfb      	ldrb	r3, [r7, #23]
90011562:	2b00      	cmp	r3, #0
90011564:	d11b      	bne.n	9001159e <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
90011566:	693b      	ldr	r3, [r7, #16]
90011568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001156c:	3302      	adds	r3, #2
9001156e:	781b      	ldrb	r3, [r3, #0]
90011570:	f003 030f 	and.w	r3, r3, #15
90011574:	b2da      	uxtb	r2, r3
90011576:	687b      	ldr	r3, [r7, #4]
90011578:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
9001157a:	693b      	ldr	r3, [r7, #16]
9001157c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90011580:	7b1a      	ldrb	r2, [r3, #12]
90011582:	687b      	ldr	r3, [r7, #4]
90011584:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
90011586:	693b      	ldr	r3, [r7, #16]
90011588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9001158c:	7b5a      	ldrb	r2, [r3, #13]
9001158e:	687b      	ldr	r3, [r7, #4]
90011590:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
90011592:	687b      	ldr	r3, [r7, #4]
90011594:	785b      	ldrb	r3, [r3, #1]
90011596:	2b3a      	cmp	r3, #58	@ 0x3a
90011598:	d101      	bne.n	9001159e <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
9001159a:	2304      	movs	r3, #4
9001159c:	75fb      	strb	r3, [r7, #23]
      break;
9001159e:	bf00      	nop
  }

  return error;
900115a0:	7dfb      	ldrb	r3, [r7, #23]
}
900115a2:	4618      	mov	r0, r3
900115a4:	3718      	adds	r7, #24
900115a6:	46bd      	mov	sp, r7
900115a8:	bd80      	pop	{r7, pc}

900115aa <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
900115aa:	b580      	push	{r7, lr}
900115ac:	b086      	sub	sp, #24
900115ae:	af00      	add	r7, sp, #0
900115b0:	60f8      	str	r0, [r7, #12]
900115b2:	607a      	str	r2, [r7, #4]
900115b4:	603b      	str	r3, [r7, #0]
900115b6:	460b      	mov	r3, r1
900115b8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
900115ba:	2302      	movs	r3, #2
900115bc:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900115be:	68fb      	ldr	r3, [r7, #12]
900115c0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
900115c4:	69db      	ldr	r3, [r3, #28]
900115c6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
900115c8:	693b      	ldr	r3, [r7, #16]
900115ca:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
900115ce:	2b01      	cmp	r3, #1
900115d0:	d002      	beq.n	900115d8 <USBH_MSC_SCSI_Write+0x2e>
900115d2:	2b02      	cmp	r3, #2
900115d4:	d04c      	beq.n	90011670 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
900115d6:	e053      	b.n	90011680 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
900115d8:	7afb      	ldrb	r3, [r7, #11]
900115da:	693a      	ldr	r2, [r7, #16]
900115dc:	2134      	movs	r1, #52	@ 0x34
900115de:	fb01 f303 	mul.w	r3, r1, r3
900115e2:	4413      	add	r3, r2
900115e4:	3398      	adds	r3, #152	@ 0x98
900115e6:	881b      	ldrh	r3, [r3, #0]
900115e8:	461a      	mov	r2, r3
900115ea:	6a3b      	ldr	r3, [r7, #32]
900115ec:	fb03 f202 	mul.w	r2, r3, r2
900115f0:	693b      	ldr	r3, [r7, #16]
900115f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
900115f4:	693b      	ldr	r3, [r7, #16]
900115f6:	2200      	movs	r2, #0
900115f8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900115fc:	693b      	ldr	r3, [r7, #16]
900115fe:	220a      	movs	r2, #10
90011600:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90011604:	693b      	ldr	r3, [r7, #16]
90011606:	3363      	adds	r3, #99	@ 0x63
90011608:	2210      	movs	r2, #16
9001160a:	2100      	movs	r1, #0
9001160c:	4618      	mov	r0, r3
9001160e:	f002 fc45 	bl	90013e9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
90011612:	693b      	ldr	r3, [r7, #16]
90011614:	222a      	movs	r2, #42	@ 0x2a
90011616:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
9001161a:	79fa      	ldrb	r2, [r7, #7]
9001161c:	693b      	ldr	r3, [r7, #16]
9001161e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
90011622:	79ba      	ldrb	r2, [r7, #6]
90011624:	693b      	ldr	r3, [r7, #16]
90011626:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
9001162a:	797a      	ldrb	r2, [r7, #5]
9001162c:	693b      	ldr	r3, [r7, #16]
9001162e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
90011632:	1d3b      	adds	r3, r7, #4
90011634:	781a      	ldrb	r2, [r3, #0]
90011636:	693b      	ldr	r3, [r7, #16]
90011638:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
9001163c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
90011640:	693b      	ldr	r3, [r7, #16]
90011642:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
90011646:	f107 0320 	add.w	r3, r7, #32
9001164a:	781a      	ldrb	r2, [r3, #0]
9001164c:	693b      	ldr	r3, [r7, #16]
9001164e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90011652:	693b      	ldr	r3, [r7, #16]
90011654:	2201      	movs	r2, #1
90011656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9001165a:	693b      	ldr	r3, [r7, #16]
9001165c:	2202      	movs	r2, #2
9001165e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
90011662:	693b      	ldr	r3, [r7, #16]
90011664:	683a      	ldr	r2, [r7, #0]
90011666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
9001166a:	2301      	movs	r3, #1
9001166c:	75fb      	strb	r3, [r7, #23]
      break;
9001166e:	e007      	b.n	90011680 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
90011670:	7afb      	ldrb	r3, [r7, #11]
90011672:	4619      	mov	r1, r3
90011674:	68f8      	ldr	r0, [r7, #12]
90011676:	f7ff fb79 	bl	90010d6c <USBH_MSC_BOT_Process>
9001167a:	4603      	mov	r3, r0
9001167c:	75fb      	strb	r3, [r7, #23]
      break;
9001167e:	bf00      	nop
  }

  return error;
90011680:	7dfb      	ldrb	r3, [r7, #23]
}
90011682:	4618      	mov	r0, r3
90011684:	3718      	adds	r7, #24
90011686:	46bd      	mov	sp, r7
90011688:	bd80      	pop	{r7, pc}

9001168a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
9001168a:	b580      	push	{r7, lr}
9001168c:	b086      	sub	sp, #24
9001168e:	af00      	add	r7, sp, #0
90011690:	60f8      	str	r0, [r7, #12]
90011692:	607a      	str	r2, [r7, #4]
90011694:	603b      	str	r3, [r7, #0]
90011696:	460b      	mov	r3, r1
90011698:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
9001169a:	2302      	movs	r3, #2
9001169c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9001169e:	68fb      	ldr	r3, [r7, #12]
900116a0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
900116a4:	69db      	ldr	r3, [r3, #28]
900116a6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
900116a8:	693b      	ldr	r3, [r7, #16]
900116aa:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
900116ae:	2b01      	cmp	r3, #1
900116b0:	d002      	beq.n	900116b8 <USBH_MSC_SCSI_Read+0x2e>
900116b2:	2b02      	cmp	r3, #2
900116b4:	d04c      	beq.n	90011750 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
900116b6:	e053      	b.n	90011760 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
900116b8:	7afb      	ldrb	r3, [r7, #11]
900116ba:	693a      	ldr	r2, [r7, #16]
900116bc:	2134      	movs	r1, #52	@ 0x34
900116be:	fb01 f303 	mul.w	r3, r1, r3
900116c2:	4413      	add	r3, r2
900116c4:	3398      	adds	r3, #152	@ 0x98
900116c6:	881b      	ldrh	r3, [r3, #0]
900116c8:	461a      	mov	r2, r3
900116ca:	6a3b      	ldr	r3, [r7, #32]
900116cc:	fb03 f202 	mul.w	r2, r3, r2
900116d0:	693b      	ldr	r3, [r7, #16]
900116d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
900116d4:	693b      	ldr	r3, [r7, #16]
900116d6:	2280      	movs	r2, #128	@ 0x80
900116d8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900116dc:	693b      	ldr	r3, [r7, #16]
900116de:	220a      	movs	r2, #10
900116e0:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
900116e4:	693b      	ldr	r3, [r7, #16]
900116e6:	3363      	adds	r3, #99	@ 0x63
900116e8:	2210      	movs	r2, #16
900116ea:	2100      	movs	r1, #0
900116ec:	4618      	mov	r0, r3
900116ee:	f002 fbd5 	bl	90013e9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
900116f2:	693b      	ldr	r3, [r7, #16]
900116f4:	2228      	movs	r2, #40	@ 0x28
900116f6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
900116fa:	79fa      	ldrb	r2, [r7, #7]
900116fc:	693b      	ldr	r3, [r7, #16]
900116fe:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
90011702:	79ba      	ldrb	r2, [r7, #6]
90011704:	693b      	ldr	r3, [r7, #16]
90011706:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
9001170a:	797a      	ldrb	r2, [r7, #5]
9001170c:	693b      	ldr	r3, [r7, #16]
9001170e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
90011712:	1d3b      	adds	r3, r7, #4
90011714:	781a      	ldrb	r2, [r3, #0]
90011716:	693b      	ldr	r3, [r7, #16]
90011718:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
9001171c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
90011720:	693b      	ldr	r3, [r7, #16]
90011722:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
90011726:	f107 0320 	add.w	r3, r7, #32
9001172a:	781a      	ldrb	r2, [r3, #0]
9001172c:	693b      	ldr	r3, [r7, #16]
9001172e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90011732:	693b      	ldr	r3, [r7, #16]
90011734:	2201      	movs	r2, #1
90011736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9001173a:	693b      	ldr	r3, [r7, #16]
9001173c:	2202      	movs	r2, #2
9001173e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
90011742:	693b      	ldr	r3, [r7, #16]
90011744:	683a      	ldr	r2, [r7, #0]
90011746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
9001174a:	2301      	movs	r3, #1
9001174c:	75fb      	strb	r3, [r7, #23]
      break;
9001174e:	e007      	b.n	90011760 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
90011750:	7afb      	ldrb	r3, [r7, #11]
90011752:	4619      	mov	r1, r3
90011754:	68f8      	ldr	r0, [r7, #12]
90011756:	f7ff fb09 	bl	90010d6c <USBH_MSC_BOT_Process>
9001175a:	4603      	mov	r3, r0
9001175c:	75fb      	strb	r3, [r7, #23]
      break;
9001175e:	bf00      	nop
  }

  return error;
90011760:	7dfb      	ldrb	r3, [r7, #23]
}
90011762:	4618      	mov	r0, r3
90011764:	3718      	adds	r7, #24
90011766:	46bd      	mov	sp, r7
90011768:	bd80      	pop	{r7, pc}

9001176a <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
9001176a:	b580      	push	{r7, lr}
9001176c:	b084      	sub	sp, #16
9001176e:	af00      	add	r7, sp, #0
90011770:	60f8      	str	r0, [r7, #12]
90011772:	60b9      	str	r1, [r7, #8]
90011774:	4613      	mov	r3, r2
90011776:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
90011778:	68fb      	ldr	r3, [r7, #12]
9001177a:	2b00      	cmp	r3, #0
9001177c:	d101      	bne.n	90011782 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
9001177e:	2302      	movs	r3, #2
90011780:	e029      	b.n	900117d6 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
90011782:	68fb      	ldr	r3, [r7, #12]
90011784:	79fa      	ldrb	r2, [r7, #7]
90011786:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
9001178a:	68fb      	ldr	r3, [r7, #12]
9001178c:	2200      	movs	r2, #0
9001178e:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
  phost->ClassNumber = 0U;
90011792:	68fb      	ldr	r3, [r7, #12]
90011794:	2200      	movs	r2, #0
90011796:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
9001179a:	68f8      	ldr	r0, [r7, #12]
9001179c:	f000 f81f 	bl	900117de <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
900117a0:	68fb      	ldr	r3, [r7, #12]
900117a2:	2200      	movs	r2, #0
900117a4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_connected = 0U;
900117a8:	68fb      	ldr	r3, [r7, #12]
900117aa:	2200      	movs	r2, #0
900117ac:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
900117b0:	68fb      	ldr	r3, [r7, #12]
900117b2:	2200      	movs	r2, #0
900117b4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
900117b8:	68fb      	ldr	r3, [r7, #12]
900117ba:	2200      	movs	r2, #0
900117bc:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

  /* Assign User process */
  if (pUsrFunc != NULL)
900117c0:	68bb      	ldr	r3, [r7, #8]
900117c2:	2b00      	cmp	r3, #0
900117c4:	d003      	beq.n	900117ce <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
900117c6:	68fb      	ldr	r3, [r7, #12]
900117c8:	68ba      	ldr	r2, [r7, #8]
900117ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
900117ce:	68f8      	ldr	r0, [r7, #12]
900117d0:	f7f0 f946 	bl	90001a60 <USBH_LL_Init>

  return USBH_OK;
900117d4:	2300      	movs	r3, #0
}
900117d6:	4618      	mov	r0, r3
900117d8:	3710      	adds	r7, #16
900117da:	46bd      	mov	sp, r7
900117dc:	bd80      	pop	{r7, pc}

900117de <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
900117de:	b580      	push	{r7, lr}
900117e0:	b084      	sub	sp, #16
900117e2:	af00      	add	r7, sp, #0
900117e4:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
900117e6:	2300      	movs	r3, #0
900117e8:	60fb      	str	r3, [r7, #12]
900117ea:	e00a      	b.n	90011802 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
900117ec:	687a      	ldr	r2, [r7, #4]
900117ee:	68fb      	ldr	r3, [r7, #12]
900117f0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
900117f4:	009b      	lsls	r3, r3, #2
900117f6:	4413      	add	r3, r2
900117f8:	2200      	movs	r2, #0
900117fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
900117fc:	68fb      	ldr	r3, [r7, #12]
900117fe:	3301      	adds	r3, #1
90011800:	60fb      	str	r3, [r7, #12]
90011802:	68fb      	ldr	r3, [r7, #12]
90011804:	2b0f      	cmp	r3, #15
90011806:	d9f1      	bls.n	900117ec <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
90011808:	2300      	movs	r3, #0
9001180a:	60fb      	str	r3, [r7, #12]
9001180c:	e009      	b.n	90011822 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
9001180e:	687a      	ldr	r2, [r7, #4]
90011810:	68fb      	ldr	r3, [r7, #12]
90011812:	4413      	add	r3, r2
90011814:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
90011818:	2200      	movs	r2, #0
9001181a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
9001181c:	68fb      	ldr	r3, [r7, #12]
9001181e:	3301      	adds	r3, #1
90011820:	60fb      	str	r3, [r7, #12]
90011822:	68fb      	ldr	r3, [r7, #12]
90011824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90011828:	d3f1      	bcc.n	9001180e <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
9001182a:	687b      	ldr	r3, [r7, #4]
9001182c:	2200      	movs	r2, #0
9001182e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
90011830:	687b      	ldr	r3, [r7, #4]
90011832:	2200      	movs	r2, #0
90011834:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
90011836:	687b      	ldr	r3, [r7, #4]
90011838:	2201      	movs	r2, #1
9001183a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
9001183c:	687b      	ldr	r3, [r7, #4]
9001183e:	2200      	movs	r2, #0
90011840:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4

  phost->Control.state = CTRL_SETUP;
90011844:	687b      	ldr	r3, [r7, #4]
90011846:	2201      	movs	r2, #1
90011848:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
9001184a:	687b      	ldr	r3, [r7, #4]
9001184c:	2240      	movs	r2, #64	@ 0x40
9001184e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
90011850:	687b      	ldr	r3, [r7, #4]
90011852:	2200      	movs	r2, #0
90011854:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
90011856:	687b      	ldr	r3, [r7, #4]
90011858:	2200      	movs	r2, #0
9001185a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
9001185e:	687b      	ldr	r3, [r7, #4]
90011860:	2201      	movs	r2, #1
90011862:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  phost->device.RstCnt = 0U;
90011866:	687b      	ldr	r3, [r7, #4]
90011868:	2200      	movs	r2, #0
9001186a:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
  phost->device.EnumCnt = 0U;
9001186e:	687b      	ldr	r3, [r7, #4]
90011870:	2200      	movs	r2, #0
90011872:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
90011876:	687b      	ldr	r3, [r7, #4]
90011878:	331c      	adds	r3, #28
9001187a:	f44f 7200 	mov.w	r2, #512	@ 0x200
9001187e:	2100      	movs	r1, #0
90011880:	4618      	mov	r0, r3
90011882:	f002 fb0b 	bl	90013e9c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
90011886:	687b      	ldr	r3, [r7, #4]
90011888:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
9001188c:	f44f 7200 	mov.w	r2, #512	@ 0x200
90011890:	2100      	movs	r1, #0
90011892:	4618      	mov	r0, r3
90011894:	f002 fb02 	bl	90013e9c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
90011898:	687b      	ldr	r3, [r7, #4]
9001189a:	f203 4326 	addw	r3, r3, #1062	@ 0x426
9001189e:	2212      	movs	r2, #18
900118a0:	2100      	movs	r1, #0
900118a2:	4618      	mov	r0, r3
900118a4:	f002 fafa 	bl	90013e9c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
900118a8:	687b      	ldr	r3, [r7, #4]
900118aa:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
900118ae:	223e      	movs	r2, #62	@ 0x3e
900118b0:	2100      	movs	r1, #0
900118b2:	4618      	mov	r0, r3
900118b4:	f002 faf2 	bl	90013e9c <memset>

  return USBH_OK;
900118b8:	2300      	movs	r3, #0
}
900118ba:	4618      	mov	r0, r3
900118bc:	3710      	adds	r7, #16
900118be:	46bd      	mov	sp, r7
900118c0:	bd80      	pop	{r7, pc}

900118c2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
900118c2:	b480      	push	{r7}
900118c4:	b085      	sub	sp, #20
900118c6:	af00      	add	r7, sp, #0
900118c8:	6078      	str	r0, [r7, #4]
900118ca:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
900118cc:	2300      	movs	r3, #0
900118ce:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
900118d0:	683b      	ldr	r3, [r7, #0]
900118d2:	2b00      	cmp	r3, #0
900118d4:	d017      	beq.n	90011906 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
900118d6:	687b      	ldr	r3, [r7, #4]
900118d8:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
900118dc:	2b00      	cmp	r3, #0
900118de:	d10f      	bne.n	90011900 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
900118e0:	687b      	ldr	r3, [r7, #4]
900118e2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
900118e6:	1c59      	adds	r1, r3, #1
900118e8:	687a      	ldr	r2, [r7, #4]
900118ea:	f8c2 1480 	str.w	r1, [r2, #1152]	@ 0x480
900118ee:	687a      	ldr	r2, [r7, #4]
900118f0:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
900118f4:	6839      	ldr	r1, [r7, #0]
900118f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
900118fa:	2300      	movs	r3, #0
900118fc:	73fb      	strb	r3, [r7, #15]
900118fe:	e004      	b.n	9001190a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
90011900:	2302      	movs	r3, #2
90011902:	73fb      	strb	r3, [r7, #15]
90011904:	e001      	b.n	9001190a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
90011906:	2302      	movs	r3, #2
90011908:	73fb      	strb	r3, [r7, #15]
  }

  return status;
9001190a:	7bfb      	ldrb	r3, [r7, #15]
}
9001190c:	4618      	mov	r0, r3
9001190e:	3714      	adds	r7, #20
90011910:	46bd      	mov	sp, r7
90011912:	f85d 7b04 	ldr.w	r7, [sp], #4
90011916:	4770      	bx	lr

90011918 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
90011918:	b480      	push	{r7}
9001191a:	b085      	sub	sp, #20
9001191c:	af00      	add	r7, sp, #0
9001191e:	6078      	str	r0, [r7, #4]
90011920:	460b      	mov	r3, r1
90011922:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
90011924:	2300      	movs	r3, #0
90011926:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
90011928:	687b      	ldr	r3, [r7, #4]
9001192a:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
9001192e:	78fa      	ldrb	r2, [r7, #3]
90011930:	429a      	cmp	r2, r3
90011932:	d204      	bcs.n	9001193e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
90011934:	687b      	ldr	r3, [r7, #4]
90011936:	78fa      	ldrb	r2, [r7, #3]
90011938:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
9001193c:	e001      	b.n	90011942 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
9001193e:	2302      	movs	r3, #2
90011940:	73fb      	strb	r3, [r7, #15]
  }

  return status;
90011942:	7bfb      	ldrb	r3, [r7, #15]
}
90011944:	4618      	mov	r0, r3
90011946:	3714      	adds	r7, #20
90011948:	46bd      	mov	sp, r7
9001194a:	f85d 7b04 	ldr.w	r7, [sp], #4
9001194e:	4770      	bx	lr

90011950 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
90011950:	b480      	push	{r7}
90011952:	b087      	sub	sp, #28
90011954:	af00      	add	r7, sp, #0
90011956:	6078      	str	r0, [r7, #4]
90011958:	4608      	mov	r0, r1
9001195a:	4611      	mov	r1, r2
9001195c:	461a      	mov	r2, r3
9001195e:	4603      	mov	r3, r0
90011960:	70fb      	strb	r3, [r7, #3]
90011962:	460b      	mov	r3, r1
90011964:	70bb      	strb	r3, [r7, #2]
90011966:	4613      	mov	r3, r2
90011968:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
9001196a:	2300      	movs	r3, #0
9001196c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
9001196e:	2300      	movs	r3, #0
90011970:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
90011972:	687b      	ldr	r3, [r7, #4]
90011974:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
90011978:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
9001197a:	e025      	b.n	900119c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
9001197c:	7dfb      	ldrb	r3, [r7, #23]
9001197e:	221a      	movs	r2, #26
90011980:	fb02 f303 	mul.w	r3, r2, r3
90011984:	3308      	adds	r3, #8
90011986:	68fa      	ldr	r2, [r7, #12]
90011988:	4413      	add	r3, r2
9001198a:	3302      	adds	r3, #2
9001198c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
9001198e:	693b      	ldr	r3, [r7, #16]
90011990:	795b      	ldrb	r3, [r3, #5]
90011992:	78fa      	ldrb	r2, [r7, #3]
90011994:	429a      	cmp	r2, r3
90011996:	d002      	beq.n	9001199e <USBH_FindInterface+0x4e>
90011998:	78fb      	ldrb	r3, [r7, #3]
9001199a:	2bff      	cmp	r3, #255	@ 0xff
9001199c:	d111      	bne.n	900119c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
9001199e:	693b      	ldr	r3, [r7, #16]
900119a0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
900119a2:	78ba      	ldrb	r2, [r7, #2]
900119a4:	429a      	cmp	r2, r3
900119a6:	d002      	beq.n	900119ae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
900119a8:	78bb      	ldrb	r3, [r7, #2]
900119aa:	2bff      	cmp	r3, #255	@ 0xff
900119ac:	d109      	bne.n	900119c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
900119ae:	693b      	ldr	r3, [r7, #16]
900119b0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
900119b2:	787a      	ldrb	r2, [r7, #1]
900119b4:	429a      	cmp	r2, r3
900119b6:	d002      	beq.n	900119be <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
900119b8:	787b      	ldrb	r3, [r7, #1]
900119ba:	2bff      	cmp	r3, #255	@ 0xff
900119bc:	d101      	bne.n	900119c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
900119be:	7dfb      	ldrb	r3, [r7, #23]
900119c0:	e006      	b.n	900119d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
900119c2:	7dfb      	ldrb	r3, [r7, #23]
900119c4:	3301      	adds	r3, #1
900119c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
900119c8:	7dfb      	ldrb	r3, [r7, #23]
900119ca:	2b01      	cmp	r3, #1
900119cc:	d9d6      	bls.n	9001197c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
900119ce:	23ff      	movs	r3, #255	@ 0xff
}
900119d0:	4618      	mov	r0, r3
900119d2:	371c      	adds	r7, #28
900119d4:	46bd      	mov	sp, r7
900119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
900119da:	4770      	bx	lr

900119dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
900119dc:	b580      	push	{r7, lr}
900119de:	b082      	sub	sp, #8
900119e0:	af00      	add	r7, sp, #0
900119e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
900119e4:	6878      	ldr	r0, [r7, #4]
900119e6:	f7f0 f877 	bl	90001ad8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
900119ea:	2101      	movs	r1, #1
900119ec:	6878      	ldr	r0, [r7, #4]
900119ee:	f7f0 f945 	bl	90001c7c <USBH_LL_DriverVBUS>

  return USBH_OK;
900119f2:	2300      	movs	r3, #0
}
900119f4:	4618      	mov	r0, r3
900119f6:	3708      	adds	r7, #8
900119f8:	46bd      	mov	sp, r7
900119fa:	bd80      	pop	{r7, pc}

900119fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
900119fc:	b580      	push	{r7, lr}
900119fe:	b088      	sub	sp, #32
90011a00:	af04      	add	r7, sp, #16
90011a02:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
90011a04:	2302      	movs	r3, #2
90011a06:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
90011a08:	2300      	movs	r3, #0
90011a0a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
90011a0c:	687b      	ldr	r3, [r7, #4]
90011a0e:	f893 3421 	ldrb.w	r3, [r3, #1057]	@ 0x421
90011a12:	b2db      	uxtb	r3, r3
90011a14:	2b01      	cmp	r3, #1
90011a16:	d102      	bne.n	90011a1e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
90011a18:	687b      	ldr	r3, [r7, #4]
90011a1a:	2203      	movs	r2, #3
90011a1c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
90011a1e:	687b      	ldr	r3, [r7, #4]
90011a20:	781b      	ldrb	r3, [r3, #0]
90011a22:	b2db      	uxtb	r3, r3
90011a24:	2b0b      	cmp	r3, #11
90011a26:	f200 81be 	bhi.w	90011da6 <USBH_Process+0x3aa>
90011a2a:	a201      	add	r2, pc, #4	@ (adr r2, 90011a30 <USBH_Process+0x34>)
90011a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90011a30:	90011a61 	.word	0x90011a61
90011a34:	90011a93 	.word	0x90011a93
90011a38:	90011afd 	.word	0x90011afd
90011a3c:	90011d41 	.word	0x90011d41
90011a40:	90011da7 	.word	0x90011da7
90011a44:	90011b9d 	.word	0x90011b9d
90011a48:	90011ce7 	.word	0x90011ce7
90011a4c:	90011bd3 	.word	0x90011bd3
90011a50:	90011bf3 	.word	0x90011bf3
90011a54:	90011c11 	.word	0x90011c11
90011a58:	90011c55 	.word	0x90011c55
90011a5c:	90011d29 	.word	0x90011d29
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
90011a60:	687b      	ldr	r3, [r7, #4]
90011a62:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
90011a66:	b2db      	uxtb	r3, r3
90011a68:	2b00      	cmp	r3, #0
90011a6a:	f000 819e 	beq.w	90011daa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
90011a6e:	687b      	ldr	r3, [r7, #4]
90011a70:	2201      	movs	r2, #1
90011a72:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
90011a74:	20c8      	movs	r0, #200	@ 0xc8
90011a76:	f7f0 f983 	bl	90001d80 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
90011a7a:	6878      	ldr	r0, [r7, #4]
90011a7c:	f7f0 f871 	bl	90001b62 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
90011a80:	687b      	ldr	r3, [r7, #4]
90011a82:	2200      	movs	r2, #0
90011a84:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        phost->Timeout = 0U;
90011a88:	687b      	ldr	r3, [r7, #4]
90011a8a:	2200      	movs	r2, #0
90011a8c:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
90011a90:	e18b      	b.n	90011daa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
90011a92:	687b      	ldr	r3, [r7, #4]
90011a94:	f893 3423 	ldrb.w	r3, [r3, #1059]	@ 0x423
90011a98:	b2db      	uxtb	r3, r3
90011a9a:	2b01      	cmp	r3, #1
90011a9c:	d107      	bne.n	90011aae <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
90011a9e:	687b      	ldr	r3, [r7, #4]
90011aa0:	2200      	movs	r2, #0
90011aa2:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
        phost->gState = HOST_DEV_ATTACHED;
90011aa6:	687b      	ldr	r3, [r7, #4]
90011aa8:	2202      	movs	r2, #2
90011aaa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
90011aac:	e18c      	b.n	90011dc8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
90011aae:	687b      	ldr	r3, [r7, #4]
90011ab0:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
90011ab4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
90011ab8:	d914      	bls.n	90011ae4 <USBH_Process+0xe8>
          phost->device.RstCnt++;
90011aba:	687b      	ldr	r3, [r7, #4]
90011abc:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
90011ac0:	3301      	adds	r3, #1
90011ac2:	b2da      	uxtb	r2, r3
90011ac4:	687b      	ldr	r3, [r7, #4]
90011ac6:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
          if (phost->device.RstCnt > 3U)
90011aca:	687b      	ldr	r3, [r7, #4]
90011acc:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
90011ad0:	2b03      	cmp	r3, #3
90011ad2:	d903      	bls.n	90011adc <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
90011ad4:	687b      	ldr	r3, [r7, #4]
90011ad6:	220d      	movs	r2, #13
90011ad8:	701a      	strb	r2, [r3, #0]
      break;
90011ada:	e175      	b.n	90011dc8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
90011adc:	687b      	ldr	r3, [r7, #4]
90011ade:	2200      	movs	r2, #0
90011ae0:	701a      	strb	r2, [r3, #0]
      break;
90011ae2:	e171      	b.n	90011dc8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
90011ae4:	687b      	ldr	r3, [r7, #4]
90011ae6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
90011aea:	f103 020a 	add.w	r2, r3, #10
90011aee:	687b      	ldr	r3, [r7, #4]
90011af0:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8
          USBH_Delay(10U);
90011af4:	200a      	movs	r0, #10
90011af6:	f7f0 f943 	bl	90001d80 <USBH_Delay>
      break;
90011afa:	e165      	b.n	90011dc8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
90011afc:	687b      	ldr	r3, [r7, #4]
90011afe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90011b02:	2b00      	cmp	r3, #0
90011b04:	d005      	beq.n	90011b12 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
90011b06:	687b      	ldr	r3, [r7, #4]
90011b08:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90011b0c:	2104      	movs	r1, #4
90011b0e:	6878      	ldr	r0, [r7, #4]
90011b10:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
90011b12:	2064      	movs	r0, #100	@ 0x64
90011b14:	f7f0 f934 	bl	90001d80 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
90011b18:	6878      	ldr	r0, [r7, #4]
90011b1a:	f7ef fffb 	bl	90001b14 <USBH_LL_GetSpeed>
90011b1e:	4603      	mov	r3, r0
90011b20:	461a      	mov	r2, r3
90011b22:	687b      	ldr	r3, [r7, #4]
90011b24:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
90011b28:	687b      	ldr	r3, [r7, #4]
90011b2a:	2205      	movs	r2, #5
90011b2c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90011b2e:	2100      	movs	r1, #0
90011b30:	6878      	ldr	r0, [r7, #4]
90011b32:	f001 faa4 	bl	9001307e <USBH_AllocPipe>
90011b36:	4603      	mov	r3, r0
90011b38:	461a      	mov	r2, r3
90011b3a:	687b      	ldr	r3, [r7, #4]
90011b3c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90011b3e:	2180      	movs	r1, #128	@ 0x80
90011b40:	6878      	ldr	r0, [r7, #4]
90011b42:	f001 fa9c 	bl	9001307e <USBH_AllocPipe>
90011b46:	4603      	mov	r3, r0
90011b48:	461a      	mov	r2, r3
90011b4a:	687b      	ldr	r3, [r7, #4]
90011b4c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90011b4e:	687b      	ldr	r3, [r7, #4]
90011b50:	7919      	ldrb	r1, [r3, #4]
90011b52:	687b      	ldr	r3, [r7, #4]
90011b54:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
90011b58:	687b      	ldr	r3, [r7, #4]
90011b5a:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
90011b5e:	687a      	ldr	r2, [r7, #4]
90011b60:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90011b62:	9202      	str	r2, [sp, #8]
90011b64:	2200      	movs	r2, #0
90011b66:	9201      	str	r2, [sp, #4]
90011b68:	9300      	str	r3, [sp, #0]
90011b6a:	4603      	mov	r3, r0
90011b6c:	2280      	movs	r2, #128	@ 0x80
90011b6e:	6878      	ldr	r0, [r7, #4]
90011b70:	f001 fa56 	bl	90013020 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
90011b74:	687b      	ldr	r3, [r7, #4]
90011b76:	7959      	ldrb	r1, [r3, #5]
90011b78:	687b      	ldr	r3, [r7, #4]
90011b7a:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
90011b7e:	687b      	ldr	r3, [r7, #4]
90011b80:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
90011b84:	687a      	ldr	r2, [r7, #4]
90011b86:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
90011b88:	9202      	str	r2, [sp, #8]
90011b8a:	2200      	movs	r2, #0
90011b8c:	9201      	str	r2, [sp, #4]
90011b8e:	9300      	str	r3, [sp, #0]
90011b90:	4603      	mov	r3, r0
90011b92:	2200      	movs	r2, #0
90011b94:	6878      	ldr	r0, [r7, #4]
90011b96:	f001 fa43 	bl	90013020 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
90011b9a:	e115      	b.n	90011dc8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
90011b9c:	6878      	ldr	r0, [r7, #4]
90011b9e:	f000 f919 	bl	90011dd4 <USBH_HandleEnum>
90011ba2:	4603      	mov	r3, r0
90011ba4:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
90011ba6:	7bbb      	ldrb	r3, [r7, #14]
90011ba8:	b2db      	uxtb	r3, r3
90011baa:	2b00      	cmp	r3, #0
90011bac:	f040 80ff 	bne.w	90011dae <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
90011bb0:	687b      	ldr	r3, [r7, #4]
90011bb2:	2200      	movs	r2, #0
90011bb4:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

        if (phost->device.DevDesc.bNumConfigurations == 1U)
90011bb8:	687b      	ldr	r3, [r7, #4]
90011bba:	f893 3437 	ldrb.w	r3, [r3, #1079]	@ 0x437
90011bbe:	2b01      	cmp	r3, #1
90011bc0:	d103      	bne.n	90011bca <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
90011bc2:	687b      	ldr	r3, [r7, #4]
90011bc4:	2208      	movs	r2, #8
90011bc6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
90011bc8:	e0f1      	b.n	90011dae <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
90011bca:	687b      	ldr	r3, [r7, #4]
90011bcc:	2207      	movs	r2, #7
90011bce:	701a      	strb	r2, [r3, #0]
      break;
90011bd0:	e0ed      	b.n	90011dae <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
90011bd2:	687b      	ldr	r3, [r7, #4]
90011bd4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90011bd8:	2b00      	cmp	r3, #0
90011bda:	f000 80ea 	beq.w	90011db2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
90011bde:	687b      	ldr	r3, [r7, #4]
90011be0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90011be4:	2101      	movs	r1, #1
90011be6:	6878      	ldr	r0, [r7, #4]
90011be8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
90011bea:	687b      	ldr	r3, [r7, #4]
90011bec:	2208      	movs	r2, #8
90011bee:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
90011bf0:	e0df      	b.n	90011db2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
90011bf2:	687b      	ldr	r3, [r7, #4]
90011bf4:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
90011bf8:	4619      	mov	r1, r3
90011bfa:	6878      	ldr	r0, [r7, #4]
90011bfc:	f000 fc41 	bl	90012482 <USBH_SetCfg>
90011c00:	4603      	mov	r3, r0
90011c02:	2b00      	cmp	r3, #0
90011c04:	f040 80d7 	bne.w	90011db6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
90011c08:	687b      	ldr	r3, [r7, #4]
90011c0a:	2209      	movs	r2, #9
90011c0c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
90011c0e:	e0d2      	b.n	90011db6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
90011c10:	687b      	ldr	r3, [r7, #4]
90011c12:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
90011c16:	f003 0320 	and.w	r3, r3, #32
90011c1a:	2b00      	cmp	r3, #0
90011c1c:	d016      	beq.n	90011c4c <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
90011c1e:	2101      	movs	r1, #1
90011c20:	6878      	ldr	r0, [r7, #4]
90011c22:	f000 fc51 	bl	900124c8 <USBH_SetFeature>
90011c26:	4603      	mov	r3, r0
90011c28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
90011c2a:	7bbb      	ldrb	r3, [r7, #14]
90011c2c:	b2db      	uxtb	r3, r3
90011c2e:	2b00      	cmp	r3, #0
90011c30:	d103      	bne.n	90011c3a <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
90011c32:	687b      	ldr	r3, [r7, #4]
90011c34:	220a      	movs	r2, #10
90011c36:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
90011c38:	e0bf      	b.n	90011dba <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
90011c3a:	7bbb      	ldrb	r3, [r7, #14]
90011c3c:	b2db      	uxtb	r3, r3
90011c3e:	2b03      	cmp	r3, #3
90011c40:	f040 80bb 	bne.w	90011dba <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
90011c44:	687b      	ldr	r3, [r7, #4]
90011c46:	220a      	movs	r2, #10
90011c48:	701a      	strb	r2, [r3, #0]
      break;
90011c4a:	e0b6      	b.n	90011dba <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
90011c4c:	687b      	ldr	r3, [r7, #4]
90011c4e:	220a      	movs	r2, #10
90011c50:	701a      	strb	r2, [r3, #0]
      break;
90011c52:	e0b2      	b.n	90011dba <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
90011c54:	687b      	ldr	r3, [r7, #4]
90011c56:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
90011c5a:	2b00      	cmp	r3, #0
90011c5c:	f000 80af 	beq.w	90011dbe <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
90011c60:	687b      	ldr	r3, [r7, #4]
90011c62:	2200      	movs	r2, #0
90011c64:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
90011c68:	2300      	movs	r3, #0
90011c6a:	73fb      	strb	r3, [r7, #15]
90011c6c:	e018      	b.n	90011ca0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
90011c6e:	7bfa      	ldrb	r2, [r7, #15]
90011c70:	687b      	ldr	r3, [r7, #4]
90011c72:	f502 728f 	add.w	r2, r2, #286	@ 0x11e
90011c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90011c7a:	791a      	ldrb	r2, [r3, #4]
90011c7c:	687b      	ldr	r3, [r7, #4]
90011c7e:	f893 3447 	ldrb.w	r3, [r3, #1095]	@ 0x447
90011c82:	429a      	cmp	r2, r3
90011c84:	d109      	bne.n	90011c9a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
90011c86:	7bfa      	ldrb	r2, [r7, #15]
90011c88:	687b      	ldr	r3, [r7, #4]
90011c8a:	f502 728f 	add.w	r2, r2, #286	@ 0x11e
90011c8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
90011c92:	687b      	ldr	r3, [r7, #4]
90011c94:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
            break;
90011c98:	e005      	b.n	90011ca6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
90011c9a:	7bfb      	ldrb	r3, [r7, #15]
90011c9c:	3301      	adds	r3, #1
90011c9e:	73fb      	strb	r3, [r7, #15]
90011ca0:	7bfb      	ldrb	r3, [r7, #15]
90011ca2:	2b00      	cmp	r3, #0
90011ca4:	d0e3      	beq.n	90011c6e <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
90011ca6:	687b      	ldr	r3, [r7, #4]
90011ca8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011cac:	2b00      	cmp	r3, #0
90011cae:	d016      	beq.n	90011cde <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
90011cb0:	687b      	ldr	r3, [r7, #4]
90011cb2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011cb6:	689b      	ldr	r3, [r3, #8]
90011cb8:	6878      	ldr	r0, [r7, #4]
90011cba:	4798      	blx	r3
90011cbc:	4603      	mov	r3, r0
90011cbe:	2b00      	cmp	r3, #0
90011cc0:	d109      	bne.n	90011cd6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
90011cc2:	687b      	ldr	r3, [r7, #4]
90011cc4:	2206      	movs	r2, #6
90011cc6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
90011cc8:	687b      	ldr	r3, [r7, #4]
90011cca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90011cce:	2103      	movs	r1, #3
90011cd0:	6878      	ldr	r0, [r7, #4]
90011cd2:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
90011cd4:	e073      	b.n	90011dbe <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
90011cd6:	687b      	ldr	r3, [r7, #4]
90011cd8:	220d      	movs	r2, #13
90011cda:	701a      	strb	r2, [r3, #0]
      break;
90011cdc:	e06f      	b.n	90011dbe <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
90011cde:	687b      	ldr	r3, [r7, #4]
90011ce0:	220d      	movs	r2, #13
90011ce2:	701a      	strb	r2, [r3, #0]
      break;
90011ce4:	e06b      	b.n	90011dbe <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
90011ce6:	687b      	ldr	r3, [r7, #4]
90011ce8:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011cec:	2b00      	cmp	r3, #0
90011cee:	d017      	beq.n	90011d20 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
90011cf0:	687b      	ldr	r3, [r7, #4]
90011cf2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011cf6:	691b      	ldr	r3, [r3, #16]
90011cf8:	6878      	ldr	r0, [r7, #4]
90011cfa:	4798      	blx	r3
90011cfc:	4603      	mov	r3, r0
90011cfe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
90011d00:	7bbb      	ldrb	r3, [r7, #14]
90011d02:	b2db      	uxtb	r3, r3
90011d04:	2b00      	cmp	r3, #0
90011d06:	d103      	bne.n	90011d10 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
90011d08:	687b      	ldr	r3, [r7, #4]
90011d0a:	220b      	movs	r2, #11
90011d0c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
90011d0e:	e058      	b.n	90011dc2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
90011d10:	7bbb      	ldrb	r3, [r7, #14]
90011d12:	b2db      	uxtb	r3, r3
90011d14:	2b02      	cmp	r3, #2
90011d16:	d154      	bne.n	90011dc2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
90011d18:	687b      	ldr	r3, [r7, #4]
90011d1a:	220d      	movs	r2, #13
90011d1c:	701a      	strb	r2, [r3, #0]
      break;
90011d1e:	e050      	b.n	90011dc2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
90011d20:	687b      	ldr	r3, [r7, #4]
90011d22:	220d      	movs	r2, #13
90011d24:	701a      	strb	r2, [r3, #0]
      break;
90011d26:	e04c      	b.n	90011dc2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
90011d28:	687b      	ldr	r3, [r7, #4]
90011d2a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011d2e:	2b00      	cmp	r3, #0
90011d30:	d049      	beq.n	90011dc6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
90011d32:	687b      	ldr	r3, [r7, #4]
90011d34:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011d38:	695b      	ldr	r3, [r3, #20]
90011d3a:	6878      	ldr	r0, [r7, #4]
90011d3c:	4798      	blx	r3
      }
      break;
90011d3e:	e042      	b.n	90011dc6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
90011d40:	687b      	ldr	r3, [r7, #4]
90011d42:	2200      	movs	r2, #0
90011d44:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

      (void)DeInitStateMachine(phost);
90011d48:	6878      	ldr	r0, [r7, #4]
90011d4a:	f7ff fd48 	bl	900117de <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
90011d4e:	687b      	ldr	r3, [r7, #4]
90011d50:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011d54:	2b00      	cmp	r3, #0
90011d56:	d009      	beq.n	90011d6c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
90011d58:	687b      	ldr	r3, [r7, #4]
90011d5a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
90011d5e:	68db      	ldr	r3, [r3, #12]
90011d60:	6878      	ldr	r0, [r7, #4]
90011d62:	4798      	blx	r3
        phost->pActiveClass = NULL;
90011d64:	687b      	ldr	r3, [r7, #4]
90011d66:	2200      	movs	r2, #0
90011d68:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
      }

      if (phost->pUser != NULL)
90011d6c:	687b      	ldr	r3, [r7, #4]
90011d6e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90011d72:	2b00      	cmp	r3, #0
90011d74:	d005      	beq.n	90011d82 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
90011d76:	687b      	ldr	r3, [r7, #4]
90011d78:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90011d7c:	2105      	movs	r1, #5
90011d7e:	6878      	ldr	r0, [r7, #4]
90011d80:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
90011d82:	687b      	ldr	r3, [r7, #4]
90011d84:	f893 3422 	ldrb.w	r3, [r3, #1058]	@ 0x422
90011d88:	b2db      	uxtb	r3, r3
90011d8a:	2b01      	cmp	r3, #1
90011d8c:	d107      	bne.n	90011d9e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
90011d8e:	687b      	ldr	r3, [r7, #4]
90011d90:	2200      	movs	r2, #0
90011d92:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
90011d96:	6878      	ldr	r0, [r7, #4]
90011d98:	f7ff fe20 	bl	900119dc <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
90011d9c:	e014      	b.n	90011dc8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
90011d9e:	6878      	ldr	r0, [r7, #4]
90011da0:	f7ef fe9a 	bl	90001ad8 <USBH_LL_Start>
      break;
90011da4:	e010      	b.n	90011dc8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
90011da6:	bf00      	nop
90011da8:	e00e      	b.n	90011dc8 <USBH_Process+0x3cc>
      break;
90011daa:	bf00      	nop
90011dac:	e00c      	b.n	90011dc8 <USBH_Process+0x3cc>
      break;
90011dae:	bf00      	nop
90011db0:	e00a      	b.n	90011dc8 <USBH_Process+0x3cc>
    break;
90011db2:	bf00      	nop
90011db4:	e008      	b.n	90011dc8 <USBH_Process+0x3cc>
      break;
90011db6:	bf00      	nop
90011db8:	e006      	b.n	90011dc8 <USBH_Process+0x3cc>
      break;
90011dba:	bf00      	nop
90011dbc:	e004      	b.n	90011dc8 <USBH_Process+0x3cc>
      break;
90011dbe:	bf00      	nop
90011dc0:	e002      	b.n	90011dc8 <USBH_Process+0x3cc>
      break;
90011dc2:	bf00      	nop
90011dc4:	e000      	b.n	90011dc8 <USBH_Process+0x3cc>
      break;
90011dc6:	bf00      	nop
  }
  return USBH_OK;
90011dc8:	2300      	movs	r3, #0
}
90011dca:	4618      	mov	r0, r3
90011dcc:	3710      	adds	r7, #16
90011dce:	46bd      	mov	sp, r7
90011dd0:	bd80      	pop	{r7, pc}
90011dd2:	bf00      	nop

90011dd4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
90011dd4:	b580      	push	{r7, lr}
90011dd6:	b088      	sub	sp, #32
90011dd8:	af04      	add	r7, sp, #16
90011dda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
90011ddc:	2301      	movs	r3, #1
90011dde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
90011de0:	2301      	movs	r3, #1
90011de2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
90011de4:	687b      	ldr	r3, [r7, #4]
90011de6:	785b      	ldrb	r3, [r3, #1]
90011de8:	2b07      	cmp	r3, #7
90011dea:	f200 81bd 	bhi.w	90012168 <USBH_HandleEnum+0x394>
90011dee:	a201      	add	r2, pc, #4	@ (adr r2, 90011df4 <USBH_HandleEnum+0x20>)
90011df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90011df4:	90011e15 	.word	0x90011e15
90011df8:	90011ecf 	.word	0x90011ecf
90011dfc:	90011f39 	.word	0x90011f39
90011e00:	90011fc3 	.word	0x90011fc3
90011e04:	9001202d 	.word	0x9001202d
90011e08:	9001209d 	.word	0x9001209d
90011e0c:	900120e3 	.word	0x900120e3
90011e10:	90012129 	.word	0x90012129
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
90011e14:	2108      	movs	r1, #8
90011e16:	6878      	ldr	r0, [r7, #4]
90011e18:	f000 fa50 	bl	900122bc <USBH_Get_DevDesc>
90011e1c:	4603      	mov	r3, r0
90011e1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
90011e20:	7bbb      	ldrb	r3, [r7, #14]
90011e22:	2b00      	cmp	r3, #0
90011e24:	d12e      	bne.n	90011e84 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
90011e26:	687b      	ldr	r3, [r7, #4]
90011e28:	f893 242d 	ldrb.w	r2, [r3, #1069]	@ 0x42d
90011e2c:	687b      	ldr	r3, [r7, #4]
90011e2e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
90011e30:	687b      	ldr	r3, [r7, #4]
90011e32:	2201      	movs	r2, #1
90011e34:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
90011e36:	687b      	ldr	r3, [r7, #4]
90011e38:	7919      	ldrb	r1, [r3, #4]
90011e3a:	687b      	ldr	r3, [r7, #4]
90011e3c:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
90011e40:	687b      	ldr	r3, [r7, #4]
90011e42:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
90011e46:	687a      	ldr	r2, [r7, #4]
90011e48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
90011e4a:	9202      	str	r2, [sp, #8]
90011e4c:	2200      	movs	r2, #0
90011e4e:	9201      	str	r2, [sp, #4]
90011e50:	9300      	str	r3, [sp, #0]
90011e52:	4603      	mov	r3, r0
90011e54:	2280      	movs	r2, #128	@ 0x80
90011e56:	6878      	ldr	r0, [r7, #4]
90011e58:	f001 f8e2 	bl	90013020 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
90011e5c:	687b      	ldr	r3, [r7, #4]
90011e5e:	7959      	ldrb	r1, [r3, #5]
90011e60:	687b      	ldr	r3, [r7, #4]
90011e62:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
90011e66:	687b      	ldr	r3, [r7, #4]
90011e68:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
90011e6c:	687a      	ldr	r2, [r7, #4]
90011e6e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
90011e70:	9202      	str	r2, [sp, #8]
90011e72:	2200      	movs	r2, #0
90011e74:	9201      	str	r2, [sp, #4]
90011e76:	9300      	str	r3, [sp, #0]
90011e78:	4603      	mov	r3, r0
90011e7a:	2200      	movs	r2, #0
90011e7c:	6878      	ldr	r0, [r7, #4]
90011e7e:	f001 f8cf 	bl	90013020 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
90011e82:	e173      	b.n	9001216c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90011e84:	7bbb      	ldrb	r3, [r7, #14]
90011e86:	2b03      	cmp	r3, #3
90011e88:	f040 8170 	bne.w	9001216c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
90011e8c:	687b      	ldr	r3, [r7, #4]
90011e8e:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
90011e92:	3301      	adds	r3, #1
90011e94:	b2da      	uxtb	r2, r3
90011e96:	687b      	ldr	r3, [r7, #4]
90011e98:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
90011e9c:	687b      	ldr	r3, [r7, #4]
90011e9e:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
90011ea2:	2b03      	cmp	r3, #3
90011ea4:	d903      	bls.n	90011eae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
90011ea6:	687b      	ldr	r3, [r7, #4]
90011ea8:	220d      	movs	r2, #13
90011eaa:	701a      	strb	r2, [r3, #0]
      break;
90011eac:	e15e      	b.n	9001216c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
90011eae:	687b      	ldr	r3, [r7, #4]
90011eb0:	795b      	ldrb	r3, [r3, #5]
90011eb2:	4619      	mov	r1, r3
90011eb4:	6878      	ldr	r0, [r7, #4]
90011eb6:	f001 f904 	bl	900130c2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
90011eba:	687b      	ldr	r3, [r7, #4]
90011ebc:	791b      	ldrb	r3, [r3, #4]
90011ebe:	4619      	mov	r1, r3
90011ec0:	6878      	ldr	r0, [r7, #4]
90011ec2:	f001 f8fe 	bl	900130c2 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
90011ec6:	687b      	ldr	r3, [r7, #4]
90011ec8:	2200      	movs	r2, #0
90011eca:	701a      	strb	r2, [r3, #0]
      break;
90011ecc:	e14e      	b.n	9001216c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
90011ece:	2112      	movs	r1, #18
90011ed0:	6878      	ldr	r0, [r7, #4]
90011ed2:	f000 f9f3 	bl	900122bc <USBH_Get_DevDesc>
90011ed6:	4603      	mov	r3, r0
90011ed8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
90011eda:	7bbb      	ldrb	r3, [r7, #14]
90011edc:	2b00      	cmp	r3, #0
90011ede:	d103      	bne.n	90011ee8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
90011ee0:	687b      	ldr	r3, [r7, #4]
90011ee2:	2202      	movs	r2, #2
90011ee4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
90011ee6:	e143      	b.n	90012170 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90011ee8:	7bbb      	ldrb	r3, [r7, #14]
90011eea:	2b03      	cmp	r3, #3
90011eec:	f040 8140 	bne.w	90012170 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
90011ef0:	687b      	ldr	r3, [r7, #4]
90011ef2:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
90011ef6:	3301      	adds	r3, #1
90011ef8:	b2da      	uxtb	r2, r3
90011efa:	687b      	ldr	r3, [r7, #4]
90011efc:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
90011f00:	687b      	ldr	r3, [r7, #4]
90011f02:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
90011f06:	2b03      	cmp	r3, #3
90011f08:	d903      	bls.n	90011f12 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
90011f0a:	687b      	ldr	r3, [r7, #4]
90011f0c:	220d      	movs	r2, #13
90011f0e:	701a      	strb	r2, [r3, #0]
      break;
90011f10:	e12e      	b.n	90012170 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
90011f12:	687b      	ldr	r3, [r7, #4]
90011f14:	795b      	ldrb	r3, [r3, #5]
90011f16:	4619      	mov	r1, r3
90011f18:	6878      	ldr	r0, [r7, #4]
90011f1a:	f001 f8d2 	bl	900130c2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
90011f1e:	687b      	ldr	r3, [r7, #4]
90011f20:	791b      	ldrb	r3, [r3, #4]
90011f22:	4619      	mov	r1, r3
90011f24:	6878      	ldr	r0, [r7, #4]
90011f26:	f001 f8cc 	bl	900130c2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
90011f2a:	687b      	ldr	r3, [r7, #4]
90011f2c:	2200      	movs	r2, #0
90011f2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
90011f30:	687b      	ldr	r3, [r7, #4]
90011f32:	2200      	movs	r2, #0
90011f34:	701a      	strb	r2, [r3, #0]
      break;
90011f36:	e11b      	b.n	90012170 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
90011f38:	2101      	movs	r1, #1
90011f3a:	6878      	ldr	r0, [r7, #4]
90011f3c:	f000 fa7d 	bl	9001243a <USBH_SetAddress>
90011f40:	4603      	mov	r3, r0
90011f42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
90011f44:	7bbb      	ldrb	r3, [r7, #14]
90011f46:	2b00      	cmp	r3, #0
90011f48:	d130      	bne.n	90011fac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
90011f4a:	2002      	movs	r0, #2
90011f4c:	f7ef ff18 	bl	90001d80 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
90011f50:	687b      	ldr	r3, [r7, #4]
90011f52:	2201      	movs	r2, #1
90011f54:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
90011f58:	687b      	ldr	r3, [r7, #4]
90011f5a:	2203      	movs	r2, #3
90011f5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
90011f5e:	687b      	ldr	r3, [r7, #4]
90011f60:	7919      	ldrb	r1, [r3, #4]
90011f62:	687b      	ldr	r3, [r7, #4]
90011f64:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
90011f68:	687b      	ldr	r3, [r7, #4]
90011f6a:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
90011f6e:	687a      	ldr	r2, [r7, #4]
90011f70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
90011f72:	9202      	str	r2, [sp, #8]
90011f74:	2200      	movs	r2, #0
90011f76:	9201      	str	r2, [sp, #4]
90011f78:	9300      	str	r3, [sp, #0]
90011f7a:	4603      	mov	r3, r0
90011f7c:	2280      	movs	r2, #128	@ 0x80
90011f7e:	6878      	ldr	r0, [r7, #4]
90011f80:	f001 f84e 	bl	90013020 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
90011f84:	687b      	ldr	r3, [r7, #4]
90011f86:	7959      	ldrb	r1, [r3, #5]
90011f88:	687b      	ldr	r3, [r7, #4]
90011f8a:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
90011f8e:	687b      	ldr	r3, [r7, #4]
90011f90:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
90011f94:	687a      	ldr	r2, [r7, #4]
90011f96:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
90011f98:	9202      	str	r2, [sp, #8]
90011f9a:	2200      	movs	r2, #0
90011f9c:	9201      	str	r2, [sp, #4]
90011f9e:	9300      	str	r3, [sp, #0]
90011fa0:	4603      	mov	r3, r0
90011fa2:	2200      	movs	r2, #0
90011fa4:	6878      	ldr	r0, [r7, #4]
90011fa6:	f001 f83b 	bl	90013020 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
90011faa:	e0e3      	b.n	90012174 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90011fac:	7bbb      	ldrb	r3, [r7, #14]
90011fae:	2b03      	cmp	r3, #3
90011fb0:	f040 80e0 	bne.w	90012174 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
90011fb4:	687b      	ldr	r3, [r7, #4]
90011fb6:	220d      	movs	r2, #13
90011fb8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
90011fba:	687b      	ldr	r3, [r7, #4]
90011fbc:	2200      	movs	r2, #0
90011fbe:	705a      	strb	r2, [r3, #1]
      break;
90011fc0:	e0d8      	b.n	90012174 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
90011fc2:	2109      	movs	r1, #9
90011fc4:	6878      	ldr	r0, [r7, #4]
90011fc6:	f000 f9a5 	bl	90012314 <USBH_Get_CfgDesc>
90011fca:	4603      	mov	r3, r0
90011fcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
90011fce:	7bbb      	ldrb	r3, [r7, #14]
90011fd0:	2b00      	cmp	r3, #0
90011fd2:	d103      	bne.n	90011fdc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
90011fd4:	687b      	ldr	r3, [r7, #4]
90011fd6:	2204      	movs	r2, #4
90011fd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
90011fda:	e0cd      	b.n	90012178 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90011fdc:	7bbb      	ldrb	r3, [r7, #14]
90011fde:	2b03      	cmp	r3, #3
90011fe0:	f040 80ca 	bne.w	90012178 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
90011fe4:	687b      	ldr	r3, [r7, #4]
90011fe6:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
90011fea:	3301      	adds	r3, #1
90011fec:	b2da      	uxtb	r2, r3
90011fee:	687b      	ldr	r3, [r7, #4]
90011ff0:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
90011ff4:	687b      	ldr	r3, [r7, #4]
90011ff6:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
90011ffa:	2b03      	cmp	r3, #3
90011ffc:	d903      	bls.n	90012006 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
90011ffe:	687b      	ldr	r3, [r7, #4]
90012000:	220d      	movs	r2, #13
90012002:	701a      	strb	r2, [r3, #0]
      break;
90012004:	e0b8      	b.n	90012178 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
90012006:	687b      	ldr	r3, [r7, #4]
90012008:	795b      	ldrb	r3, [r3, #5]
9001200a:	4619      	mov	r1, r3
9001200c:	6878      	ldr	r0, [r7, #4]
9001200e:	f001 f858 	bl	900130c2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
90012012:	687b      	ldr	r3, [r7, #4]
90012014:	791b      	ldrb	r3, [r3, #4]
90012016:	4619      	mov	r1, r3
90012018:	6878      	ldr	r0, [r7, #4]
9001201a:	f001 f852 	bl	900130c2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
9001201e:	687b      	ldr	r3, [r7, #4]
90012020:	2200      	movs	r2, #0
90012022:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
90012024:	687b      	ldr	r3, [r7, #4]
90012026:	2200      	movs	r2, #0
90012028:	701a      	strb	r2, [r3, #0]
      break;
9001202a:	e0a5      	b.n	90012178 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
9001202c:	687b      	ldr	r3, [r7, #4]
9001202e:	f8b3 343a 	ldrh.w	r3, [r3, #1082]	@ 0x43a
90012032:	4619      	mov	r1, r3
90012034:	6878      	ldr	r0, [r7, #4]
90012036:	f000 f96d 	bl	90012314 <USBH_Get_CfgDesc>
9001203a:	4603      	mov	r3, r0
9001203c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
9001203e:	7bbb      	ldrb	r3, [r7, #14]
90012040:	2b00      	cmp	r3, #0
90012042:	d103      	bne.n	9001204c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
90012044:	687b      	ldr	r3, [r7, #4]
90012046:	2205      	movs	r2, #5
90012048:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
9001204a:	e097      	b.n	9001217c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
9001204c:	7bbb      	ldrb	r3, [r7, #14]
9001204e:	2b03      	cmp	r3, #3
90012050:	f040 8094 	bne.w	9001217c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
90012054:	687b      	ldr	r3, [r7, #4]
90012056:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
9001205a:	3301      	adds	r3, #1
9001205c:	b2da      	uxtb	r2, r3
9001205e:	687b      	ldr	r3, [r7, #4]
90012060:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
90012064:	687b      	ldr	r3, [r7, #4]
90012066:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
9001206a:	2b03      	cmp	r3, #3
9001206c:	d903      	bls.n	90012076 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
9001206e:	687b      	ldr	r3, [r7, #4]
90012070:	220d      	movs	r2, #13
90012072:	701a      	strb	r2, [r3, #0]
      break;
90012074:	e082      	b.n	9001217c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
90012076:	687b      	ldr	r3, [r7, #4]
90012078:	795b      	ldrb	r3, [r3, #5]
9001207a:	4619      	mov	r1, r3
9001207c:	6878      	ldr	r0, [r7, #4]
9001207e:	f001 f820 	bl	900130c2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
90012082:	687b      	ldr	r3, [r7, #4]
90012084:	791b      	ldrb	r3, [r3, #4]
90012086:	4619      	mov	r1, r3
90012088:	6878      	ldr	r0, [r7, #4]
9001208a:	f001 f81a 	bl	900130c2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
9001208e:	687b      	ldr	r3, [r7, #4]
90012090:	2200      	movs	r2, #0
90012092:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
90012094:	687b      	ldr	r3, [r7, #4]
90012096:	2200      	movs	r2, #0
90012098:	701a      	strb	r2, [r3, #0]
      break;
9001209a:	e06f      	b.n	9001217c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
9001209c:	687b      	ldr	r3, [r7, #4]
9001209e:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
900120a2:	2b00      	cmp	r3, #0
900120a4:	d019      	beq.n	900120da <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
900120a6:	687b      	ldr	r3, [r7, #4]
900120a8:	f893 1434 	ldrb.w	r1, [r3, #1076]	@ 0x434
                                        phost->device.Data, 0xFFU);
900120ac:	687b      	ldr	r3, [r7, #4]
900120ae:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
900120b2:	23ff      	movs	r3, #255	@ 0xff
900120b4:	6878      	ldr	r0, [r7, #4]
900120b6:	f000 f957 	bl	90012368 <USBH_Get_StringDesc>
900120ba:	4603      	mov	r3, r0
900120bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
900120be:	7bbb      	ldrb	r3, [r7, #14]
900120c0:	2b00      	cmp	r3, #0
900120c2:	d103      	bne.n	900120cc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
900120c4:	687b      	ldr	r3, [r7, #4]
900120c6:	2206      	movs	r2, #6
900120c8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
900120ca:	e059      	b.n	90012180 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
900120cc:	7bbb      	ldrb	r3, [r7, #14]
900120ce:	2b03      	cmp	r3, #3
900120d0:	d156      	bne.n	90012180 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
900120d2:	687b      	ldr	r3, [r7, #4]
900120d4:	2206      	movs	r2, #6
900120d6:	705a      	strb	r2, [r3, #1]
      break;
900120d8:	e052      	b.n	90012180 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
900120da:	687b      	ldr	r3, [r7, #4]
900120dc:	2206      	movs	r2, #6
900120de:	705a      	strb	r2, [r3, #1]
      break;
900120e0:	e04e      	b.n	90012180 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
900120e2:	687b      	ldr	r3, [r7, #4]
900120e4:	f893 3435 	ldrb.w	r3, [r3, #1077]	@ 0x435
900120e8:	2b00      	cmp	r3, #0
900120ea:	d019      	beq.n	90012120 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
900120ec:	687b      	ldr	r3, [r7, #4]
900120ee:	f893 1435 	ldrb.w	r1, [r3, #1077]	@ 0x435
                                        phost->device.Data, 0xFFU);
900120f2:	687b      	ldr	r3, [r7, #4]
900120f4:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
900120f8:	23ff      	movs	r3, #255	@ 0xff
900120fa:	6878      	ldr	r0, [r7, #4]
900120fc:	f000 f934 	bl	90012368 <USBH_Get_StringDesc>
90012100:	4603      	mov	r3, r0
90012102:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
90012104:	7bbb      	ldrb	r3, [r7, #14]
90012106:	2b00      	cmp	r3, #0
90012108:	d103      	bne.n	90012112 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
9001210a:	687b      	ldr	r3, [r7, #4]
9001210c:	2207      	movs	r2, #7
9001210e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
90012110:	e038      	b.n	90012184 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90012112:	7bbb      	ldrb	r3, [r7, #14]
90012114:	2b03      	cmp	r3, #3
90012116:	d135      	bne.n	90012184 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
90012118:	687b      	ldr	r3, [r7, #4]
9001211a:	2207      	movs	r2, #7
9001211c:	705a      	strb	r2, [r3, #1]
      break;
9001211e:	e031      	b.n	90012184 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
90012120:	687b      	ldr	r3, [r7, #4]
90012122:	2207      	movs	r2, #7
90012124:	705a      	strb	r2, [r3, #1]
      break;
90012126:	e02d      	b.n	90012184 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
90012128:	687b      	ldr	r3, [r7, #4]
9001212a:	f893 3436 	ldrb.w	r3, [r3, #1078]	@ 0x436
9001212e:	2b00      	cmp	r3, #0
90012130:	d017      	beq.n	90012162 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
90012132:	687b      	ldr	r3, [r7, #4]
90012134:	f893 1436 	ldrb.w	r1, [r3, #1078]	@ 0x436
                                        phost->device.Data, 0xFFU);
90012138:	687b      	ldr	r3, [r7, #4]
9001213a:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
9001213e:	23ff      	movs	r3, #255	@ 0xff
90012140:	6878      	ldr	r0, [r7, #4]
90012142:	f000 f911 	bl	90012368 <USBH_Get_StringDesc>
90012146:	4603      	mov	r3, r0
90012148:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
9001214a:	7bbb      	ldrb	r3, [r7, #14]
9001214c:	2b00      	cmp	r3, #0
9001214e:	d102      	bne.n	90012156 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
90012150:	2300      	movs	r3, #0
90012152:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
90012154:	e018      	b.n	90012188 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90012156:	7bbb      	ldrb	r3, [r7, #14]
90012158:	2b03      	cmp	r3, #3
9001215a:	d115      	bne.n	90012188 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
9001215c:	2300      	movs	r3, #0
9001215e:	73fb      	strb	r3, [r7, #15]
      break;
90012160:	e012      	b.n	90012188 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
90012162:	2300      	movs	r3, #0
90012164:	73fb      	strb	r3, [r7, #15]
      break;
90012166:	e00f      	b.n	90012188 <USBH_HandleEnum+0x3b4>

    default:
      break;
90012168:	bf00      	nop
9001216a:	e00e      	b.n	9001218a <USBH_HandleEnum+0x3b6>
      break;
9001216c:	bf00      	nop
9001216e:	e00c      	b.n	9001218a <USBH_HandleEnum+0x3b6>
      break;
90012170:	bf00      	nop
90012172:	e00a      	b.n	9001218a <USBH_HandleEnum+0x3b6>
      break;
90012174:	bf00      	nop
90012176:	e008      	b.n	9001218a <USBH_HandleEnum+0x3b6>
      break;
90012178:	bf00      	nop
9001217a:	e006      	b.n	9001218a <USBH_HandleEnum+0x3b6>
      break;
9001217c:	bf00      	nop
9001217e:	e004      	b.n	9001218a <USBH_HandleEnum+0x3b6>
      break;
90012180:	bf00      	nop
90012182:	e002      	b.n	9001218a <USBH_HandleEnum+0x3b6>
      break;
90012184:	bf00      	nop
90012186:	e000      	b.n	9001218a <USBH_HandleEnum+0x3b6>
      break;
90012188:	bf00      	nop
  }
  return Status;
9001218a:	7bfb      	ldrb	r3, [r7, #15]
}
9001218c:	4618      	mov	r0, r3
9001218e:	3710      	adds	r7, #16
90012190:	46bd      	mov	sp, r7
90012192:	bd80      	pop	{r7, pc}

90012194 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
90012194:	b480      	push	{r7}
90012196:	b083      	sub	sp, #12
90012198:	af00      	add	r7, sp, #0
9001219a:	6078      	str	r0, [r7, #4]
9001219c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
9001219e:	687b      	ldr	r3, [r7, #4]
900121a0:	683a      	ldr	r2, [r7, #0]
900121a2:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
}
900121a6:	bf00      	nop
900121a8:	370c      	adds	r7, #12
900121aa:	46bd      	mov	sp, r7
900121ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900121b0:	4770      	bx	lr

900121b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
900121b2:	b580      	push	{r7, lr}
900121b4:	b082      	sub	sp, #8
900121b6:	af00      	add	r7, sp, #0
900121b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
900121ba:	687b      	ldr	r3, [r7, #4]
900121bc:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
900121c0:	1c5a      	adds	r2, r3, #1
900121c2:	687b      	ldr	r3, [r7, #4]
900121c4:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
900121c8:	6878      	ldr	r0, [r7, #4]
900121ca:	f000 f804 	bl	900121d6 <USBH_HandleSof>
}
900121ce:	bf00      	nop
900121d0:	3708      	adds	r7, #8
900121d2:	46bd      	mov	sp, r7
900121d4:	bd80      	pop	{r7, pc}

900121d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
900121d6:	b580      	push	{r7, lr}
900121d8:	b082      	sub	sp, #8
900121da:	af00      	add	r7, sp, #0
900121dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
900121de:	687b      	ldr	r3, [r7, #4]
900121e0:	781b      	ldrb	r3, [r3, #0]
900121e2:	b2db      	uxtb	r3, r3
900121e4:	2b0b      	cmp	r3, #11
900121e6:	d10a      	bne.n	900121fe <USBH_HandleSof+0x28>
900121e8:	687b      	ldr	r3, [r7, #4]
900121ea:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
900121ee:	2b00      	cmp	r3, #0
900121f0:	d005      	beq.n	900121fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
900121f2:	687b      	ldr	r3, [r7, #4]
900121f4:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
900121f8:	699b      	ldr	r3, [r3, #24]
900121fa:	6878      	ldr	r0, [r7, #4]
900121fc:	4798      	blx	r3
  }
}
900121fe:	bf00      	nop
90012200:	3708      	adds	r7, #8
90012202:	46bd      	mov	sp, r7
90012204:	bd80      	pop	{r7, pc}

90012206 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
90012206:	b480      	push	{r7}
90012208:	b083      	sub	sp, #12
9001220a:	af00      	add	r7, sp, #0
9001220c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9001220e:	687b      	ldr	r3, [r7, #4]
90012210:	2201      	movs	r2, #1
90012212:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
90012216:	bf00      	nop
}
90012218:	370c      	adds	r7, #12
9001221a:	46bd      	mov	sp, r7
9001221c:	f85d 7b04 	ldr.w	r7, [sp], #4
90012220:	4770      	bx	lr

90012222 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
90012222:	b480      	push	{r7}
90012224:	b083      	sub	sp, #12
90012226:	af00      	add	r7, sp, #0
90012228:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9001222a:	687b      	ldr	r3, [r7, #4]
9001222c:	2200      	movs	r2, #0
9001222e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
90012232:	687b      	ldr	r3, [r7, #4]
90012234:	2201      	movs	r2, #1
90012236:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9001223a:	bf00      	nop
}
9001223c:	370c      	adds	r7, #12
9001223e:	46bd      	mov	sp, r7
90012240:	f85d 7b04 	ldr.w	r7, [sp], #4
90012244:	4770      	bx	lr

90012246 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
90012246:	b480      	push	{r7}
90012248:	b083      	sub	sp, #12
9001224a:	af00      	add	r7, sp, #0
9001224c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9001224e:	687b      	ldr	r3, [r7, #4]
90012250:	2201      	movs	r2, #1
90012252:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
90012256:	687b      	ldr	r3, [r7, #4]
90012258:	2200      	movs	r2, #0
9001225a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9001225e:	687b      	ldr	r3, [r7, #4]
90012260:	2200      	movs	r2, #0
90012262:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
90012266:	2300      	movs	r3, #0
}
90012268:	4618      	mov	r0, r3
9001226a:	370c      	adds	r7, #12
9001226c:	46bd      	mov	sp, r7
9001226e:	f85d 7b04 	ldr.w	r7, [sp], #4
90012272:	4770      	bx	lr

90012274 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
90012274:	b580      	push	{r7, lr}
90012276:	b082      	sub	sp, #8
90012278:	af00      	add	r7, sp, #0
9001227a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9001227c:	687b      	ldr	r3, [r7, #4]
9001227e:	2201      	movs	r2, #1
90012280:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
90012284:	687b      	ldr	r3, [r7, #4]
90012286:	2200      	movs	r2, #0
90012288:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9001228c:	687b      	ldr	r3, [r7, #4]
9001228e:	2200      	movs	r2, #0
90012290:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
90012294:	6878      	ldr	r0, [r7, #4]
90012296:	f7ef fc2e 	bl	90001af6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9001229a:	687b      	ldr	r3, [r7, #4]
9001229c:	791b      	ldrb	r3, [r3, #4]
9001229e:	4619      	mov	r1, r3
900122a0:	6878      	ldr	r0, [r7, #4]
900122a2:	f000 ff0e 	bl	900130c2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
900122a6:	687b      	ldr	r3, [r7, #4]
900122a8:	795b      	ldrb	r3, [r3, #5]
900122aa:	4619      	mov	r1, r3
900122ac:	6878      	ldr	r0, [r7, #4]
900122ae:	f000 ff08 	bl	900130c2 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
900122b2:	2300      	movs	r3, #0
}
900122b4:	4618      	mov	r0, r3
900122b6:	3708      	adds	r7, #8
900122b8:	46bd      	mov	sp, r7
900122ba:	bd80      	pop	{r7, pc}

900122bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
900122bc:	b580      	push	{r7, lr}
900122be:	b086      	sub	sp, #24
900122c0:	af02      	add	r7, sp, #8
900122c2:	6078      	str	r0, [r7, #4]
900122c4:	460b      	mov	r3, r1
900122c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
900122c8:	887b      	ldrh	r3, [r7, #2]
900122ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900122ce:	d901      	bls.n	900122d4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
900122d0:	2303      	movs	r3, #3
900122d2:	e01b      	b.n	9001230c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
900122d4:	687b      	ldr	r3, [r7, #4]
900122d6:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
  status = USBH_GetDescriptor(phost,
900122da:	887b      	ldrh	r3, [r7, #2]
900122dc:	9300      	str	r3, [sp, #0]
900122de:	4613      	mov	r3, r2
900122e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
900122e4:	2100      	movs	r1, #0
900122e6:	6878      	ldr	r0, [r7, #4]
900122e8:	f000 f872 	bl	900123d0 <USBH_GetDescriptor>
900122ec:	4603      	mov	r3, r0
900122ee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
900122f0:	7bfb      	ldrb	r3, [r7, #15]
900122f2:	2b00      	cmp	r3, #0
900122f4:	d109      	bne.n	9001230a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
900122f6:	687b      	ldr	r3, [r7, #4]
900122f8:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
900122fc:	887a      	ldrh	r2, [r7, #2]
900122fe:	4619      	mov	r1, r3
90012300:	6878      	ldr	r0, [r7, #4]
90012302:	f000 f929 	bl	90012558 <USBH_ParseDevDesc>
90012306:	4603      	mov	r3, r0
90012308:	73fb      	strb	r3, [r7, #15]
  }

  return status;
9001230a:	7bfb      	ldrb	r3, [r7, #15]
}
9001230c:	4618      	mov	r0, r3
9001230e:	3710      	adds	r7, #16
90012310:	46bd      	mov	sp, r7
90012312:	bd80      	pop	{r7, pc}

90012314 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
90012314:	b580      	push	{r7, lr}
90012316:	b086      	sub	sp, #24
90012318:	af02      	add	r7, sp, #8
9001231a:	6078      	str	r0, [r7, #4]
9001231c:	460b      	mov	r3, r1
9001231e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
90012320:	687b      	ldr	r3, [r7, #4]
90012322:	331c      	adds	r3, #28
90012324:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
90012326:	887b      	ldrh	r3, [r7, #2]
90012328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9001232c:	d901      	bls.n	90012332 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
9001232e:	2303      	movs	r3, #3
90012330:	e016      	b.n	90012360 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90012332:	887b      	ldrh	r3, [r7, #2]
90012334:	9300      	str	r3, [sp, #0]
90012336:	68bb      	ldr	r3, [r7, #8]
90012338:	f44f 7200 	mov.w	r2, #512	@ 0x200
9001233c:	2100      	movs	r1, #0
9001233e:	6878      	ldr	r0, [r7, #4]
90012340:	f000 f846 	bl	900123d0 <USBH_GetDescriptor>
90012344:	4603      	mov	r3, r0
90012346:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
90012348:	7bfb      	ldrb	r3, [r7, #15]
9001234a:	2b00      	cmp	r3, #0
9001234c:	d107      	bne.n	9001235e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
9001234e:	887b      	ldrh	r3, [r7, #2]
90012350:	461a      	mov	r2, r3
90012352:	68b9      	ldr	r1, [r7, #8]
90012354:	6878      	ldr	r0, [r7, #4]
90012356:	f000 f9af 	bl	900126b8 <USBH_ParseCfgDesc>
9001235a:	4603      	mov	r3, r0
9001235c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
9001235e:	7bfb      	ldrb	r3, [r7, #15]
}
90012360:	4618      	mov	r0, r3
90012362:	3710      	adds	r7, #16
90012364:	46bd      	mov	sp, r7
90012366:	bd80      	pop	{r7, pc}

90012368 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
90012368:	b580      	push	{r7, lr}
9001236a:	b088      	sub	sp, #32
9001236c:	af02      	add	r7, sp, #8
9001236e:	60f8      	str	r0, [r7, #12]
90012370:	607a      	str	r2, [r7, #4]
90012372:	461a      	mov	r2, r3
90012374:	460b      	mov	r3, r1
90012376:	72fb      	strb	r3, [r7, #11]
90012378:	4613      	mov	r3, r2
9001237a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
9001237c:	893b      	ldrh	r3, [r7, #8]
9001237e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90012382:	d802      	bhi.n	9001238a <USBH_Get_StringDesc+0x22>
90012384:	687b      	ldr	r3, [r7, #4]
90012386:	2b00      	cmp	r3, #0
90012388:	d101      	bne.n	9001238e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
9001238a:	2303      	movs	r3, #3
9001238c:	e01c      	b.n	900123c8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
9001238e:	7afb      	ldrb	r3, [r7, #11]
90012390:	b29b      	uxth	r3, r3
90012392:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
90012396:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
90012398:	68fb      	ldr	r3, [r7, #12]
9001239a:	f503 7107 	add.w	r1, r3, #540	@ 0x21c
  status = USBH_GetDescriptor(phost,
9001239e:	893b      	ldrh	r3, [r7, #8]
900123a0:	9300      	str	r3, [sp, #0]
900123a2:	460b      	mov	r3, r1
900123a4:	2100      	movs	r1, #0
900123a6:	68f8      	ldr	r0, [r7, #12]
900123a8:	f000 f812 	bl	900123d0 <USBH_GetDescriptor>
900123ac:	4603      	mov	r3, r0
900123ae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
900123b0:	7dfb      	ldrb	r3, [r7, #23]
900123b2:	2b00      	cmp	r3, #0
900123b4:	d107      	bne.n	900123c6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
900123b6:	68fb      	ldr	r3, [r7, #12]
900123b8:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
900123bc:	893a      	ldrh	r2, [r7, #8]
900123be:	6879      	ldr	r1, [r7, #4]
900123c0:	4618      	mov	r0, r3
900123c2:	f000 fb8c 	bl	90012ade <USBH_ParseStringDesc>
  }

  return status;
900123c6:	7dfb      	ldrb	r3, [r7, #23]
}
900123c8:	4618      	mov	r0, r3
900123ca:	3718      	adds	r7, #24
900123cc:	46bd      	mov	sp, r7
900123ce:	bd80      	pop	{r7, pc}

900123d0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
900123d0:	b580      	push	{r7, lr}
900123d2:	b084      	sub	sp, #16
900123d4:	af00      	add	r7, sp, #0
900123d6:	60f8      	str	r0, [r7, #12]
900123d8:	607b      	str	r3, [r7, #4]
900123da:	460b      	mov	r3, r1
900123dc:	72fb      	strb	r3, [r7, #11]
900123de:	4613      	mov	r3, r2
900123e0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
900123e2:	68fb      	ldr	r3, [r7, #12]
900123e4:	789b      	ldrb	r3, [r3, #2]
900123e6:	2b01      	cmp	r3, #1
900123e8:	d11c      	bne.n	90012424 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
900123ea:	7afb      	ldrb	r3, [r7, #11]
900123ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
900123f0:	b2da      	uxtb	r2, r3
900123f2:	68fb      	ldr	r3, [r7, #12]
900123f4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
900123f6:	68fb      	ldr	r3, [r7, #12]
900123f8:	2206      	movs	r2, #6
900123fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
900123fc:	68fb      	ldr	r3, [r7, #12]
900123fe:	893a      	ldrh	r2, [r7, #8]
90012400:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
90012402:	893b      	ldrh	r3, [r7, #8]
90012404:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90012408:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9001240c:	d104      	bne.n	90012418 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
9001240e:	68fb      	ldr	r3, [r7, #12]
90012410:	f240 4209 	movw	r2, #1033	@ 0x409
90012414:	829a      	strh	r2, [r3, #20]
90012416:	e002      	b.n	9001241e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
90012418:	68fb      	ldr	r3, [r7, #12]
9001241a:	2200      	movs	r2, #0
9001241c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
9001241e:	68fb      	ldr	r3, [r7, #12]
90012420:	8b3a      	ldrh	r2, [r7, #24]
90012422:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
90012424:	8b3b      	ldrh	r3, [r7, #24]
90012426:	461a      	mov	r2, r3
90012428:	6879      	ldr	r1, [r7, #4]
9001242a:	68f8      	ldr	r0, [r7, #12]
9001242c:	f000 fba4 	bl	90012b78 <USBH_CtlReq>
90012430:	4603      	mov	r3, r0
}
90012432:	4618      	mov	r0, r3
90012434:	3710      	adds	r7, #16
90012436:	46bd      	mov	sp, r7
90012438:	bd80      	pop	{r7, pc}

9001243a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
9001243a:	b580      	push	{r7, lr}
9001243c:	b082      	sub	sp, #8
9001243e:	af00      	add	r7, sp, #0
90012440:	6078      	str	r0, [r7, #4]
90012442:	460b      	mov	r3, r1
90012444:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
90012446:	687b      	ldr	r3, [r7, #4]
90012448:	789b      	ldrb	r3, [r3, #2]
9001244a:	2b01      	cmp	r3, #1
9001244c:	d10f      	bne.n	9001246e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
9001244e:	687b      	ldr	r3, [r7, #4]
90012450:	2200      	movs	r2, #0
90012452:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
90012454:	687b      	ldr	r3, [r7, #4]
90012456:	2205      	movs	r2, #5
90012458:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
9001245a:	78fb      	ldrb	r3, [r7, #3]
9001245c:	b29a      	uxth	r2, r3
9001245e:	687b      	ldr	r3, [r7, #4]
90012460:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
90012462:	687b      	ldr	r3, [r7, #4]
90012464:	2200      	movs	r2, #0
90012466:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
90012468:	687b      	ldr	r3, [r7, #4]
9001246a:	2200      	movs	r2, #0
9001246c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
9001246e:	2200      	movs	r2, #0
90012470:	2100      	movs	r1, #0
90012472:	6878      	ldr	r0, [r7, #4]
90012474:	f000 fb80 	bl	90012b78 <USBH_CtlReq>
90012478:	4603      	mov	r3, r0
}
9001247a:	4618      	mov	r0, r3
9001247c:	3708      	adds	r7, #8
9001247e:	46bd      	mov	sp, r7
90012480:	bd80      	pop	{r7, pc}

90012482 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
90012482:	b580      	push	{r7, lr}
90012484:	b082      	sub	sp, #8
90012486:	af00      	add	r7, sp, #0
90012488:	6078      	str	r0, [r7, #4]
9001248a:	460b      	mov	r3, r1
9001248c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
9001248e:	687b      	ldr	r3, [r7, #4]
90012490:	789b      	ldrb	r3, [r3, #2]
90012492:	2b01      	cmp	r3, #1
90012494:	d10e      	bne.n	900124b4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
90012496:	687b      	ldr	r3, [r7, #4]
90012498:	2200      	movs	r2, #0
9001249a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
9001249c:	687b      	ldr	r3, [r7, #4]
9001249e:	2209      	movs	r2, #9
900124a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
900124a2:	687b      	ldr	r3, [r7, #4]
900124a4:	887a      	ldrh	r2, [r7, #2]
900124a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
900124a8:	687b      	ldr	r3, [r7, #4]
900124aa:	2200      	movs	r2, #0
900124ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
900124ae:	687b      	ldr	r3, [r7, #4]
900124b0:	2200      	movs	r2, #0
900124b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
900124b4:	2200      	movs	r2, #0
900124b6:	2100      	movs	r1, #0
900124b8:	6878      	ldr	r0, [r7, #4]
900124ba:	f000 fb5d 	bl	90012b78 <USBH_CtlReq>
900124be:	4603      	mov	r3, r0
}
900124c0:	4618      	mov	r0, r3
900124c2:	3708      	adds	r7, #8
900124c4:	46bd      	mov	sp, r7
900124c6:	bd80      	pop	{r7, pc}

900124c8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
900124c8:	b580      	push	{r7, lr}
900124ca:	b082      	sub	sp, #8
900124cc:	af00      	add	r7, sp, #0
900124ce:	6078      	str	r0, [r7, #4]
900124d0:	460b      	mov	r3, r1
900124d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
900124d4:	687b      	ldr	r3, [r7, #4]
900124d6:	789b      	ldrb	r3, [r3, #2]
900124d8:	2b01      	cmp	r3, #1
900124da:	d10f      	bne.n	900124fc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
900124dc:	687b      	ldr	r3, [r7, #4]
900124de:	2200      	movs	r2, #0
900124e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
900124e2:	687b      	ldr	r3, [r7, #4]
900124e4:	2203      	movs	r2, #3
900124e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
900124e8:	78fb      	ldrb	r3, [r7, #3]
900124ea:	b29a      	uxth	r2, r3
900124ec:	687b      	ldr	r3, [r7, #4]
900124ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
900124f0:	687b      	ldr	r3, [r7, #4]
900124f2:	2200      	movs	r2, #0
900124f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
900124f6:	687b      	ldr	r3, [r7, #4]
900124f8:	2200      	movs	r2, #0
900124fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
900124fc:	2200      	movs	r2, #0
900124fe:	2100      	movs	r1, #0
90012500:	6878      	ldr	r0, [r7, #4]
90012502:	f000 fb39 	bl	90012b78 <USBH_CtlReq>
90012506:	4603      	mov	r3, r0
}
90012508:	4618      	mov	r0, r3
9001250a:	3708      	adds	r7, #8
9001250c:	46bd      	mov	sp, r7
9001250e:	bd80      	pop	{r7, pc}

90012510 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
90012510:	b580      	push	{r7, lr}
90012512:	b082      	sub	sp, #8
90012514:	af00      	add	r7, sp, #0
90012516:	6078      	str	r0, [r7, #4]
90012518:	460b      	mov	r3, r1
9001251a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
9001251c:	687b      	ldr	r3, [r7, #4]
9001251e:	789b      	ldrb	r3, [r3, #2]
90012520:	2b01      	cmp	r3, #1
90012522:	d10f      	bne.n	90012544 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
90012524:	687b      	ldr	r3, [r7, #4]
90012526:	2202      	movs	r2, #2
90012528:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
9001252a:	687b      	ldr	r3, [r7, #4]
9001252c:	2201      	movs	r2, #1
9001252e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
90012530:	687b      	ldr	r3, [r7, #4]
90012532:	2200      	movs	r2, #0
90012534:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
90012536:	78fb      	ldrb	r3, [r7, #3]
90012538:	b29a      	uxth	r2, r3
9001253a:	687b      	ldr	r3, [r7, #4]
9001253c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
9001253e:	687b      	ldr	r3, [r7, #4]
90012540:	2200      	movs	r2, #0
90012542:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
90012544:	2200      	movs	r2, #0
90012546:	2100      	movs	r1, #0
90012548:	6878      	ldr	r0, [r7, #4]
9001254a:	f000 fb15 	bl	90012b78 <USBH_CtlReq>
9001254e:	4603      	mov	r3, r0
}
90012550:	4618      	mov	r0, r3
90012552:	3708      	adds	r7, #8
90012554:	46bd      	mov	sp, r7
90012556:	bd80      	pop	{r7, pc}

90012558 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
90012558:	b480      	push	{r7}
9001255a:	b087      	sub	sp, #28
9001255c:	af00      	add	r7, sp, #0
9001255e:	60f8      	str	r0, [r7, #12]
90012560:	60b9      	str	r1, [r7, #8]
90012562:	4613      	mov	r3, r2
90012564:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
90012566:	68fb      	ldr	r3, [r7, #12]
90012568:	f203 4326 	addw	r3, r3, #1062	@ 0x426
9001256c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
9001256e:	2300      	movs	r3, #0
90012570:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
90012572:	68bb      	ldr	r3, [r7, #8]
90012574:	2b00      	cmp	r3, #0
90012576:	d101      	bne.n	9001257c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
90012578:	2302      	movs	r3, #2
9001257a:	e094      	b.n	900126a6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
9001257c:	68bb      	ldr	r3, [r7, #8]
9001257e:	781a      	ldrb	r2, [r3, #0]
90012580:	693b      	ldr	r3, [r7, #16]
90012582:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
90012584:	68bb      	ldr	r3, [r7, #8]
90012586:	785a      	ldrb	r2, [r3, #1]
90012588:	693b      	ldr	r3, [r7, #16]
9001258a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
9001258c:	68bb      	ldr	r3, [r7, #8]
9001258e:	3302      	adds	r3, #2
90012590:	781b      	ldrb	r3, [r3, #0]
90012592:	461a      	mov	r2, r3
90012594:	68bb      	ldr	r3, [r7, #8]
90012596:	3303      	adds	r3, #3
90012598:	781b      	ldrb	r3, [r3, #0]
9001259a:	021b      	lsls	r3, r3, #8
9001259c:	b29b      	uxth	r3, r3
9001259e:	4313      	orrs	r3, r2
900125a0:	b29a      	uxth	r2, r3
900125a2:	693b      	ldr	r3, [r7, #16]
900125a4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
900125a6:	68bb      	ldr	r3, [r7, #8]
900125a8:	791a      	ldrb	r2, [r3, #4]
900125aa:	693b      	ldr	r3, [r7, #16]
900125ac:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
900125ae:	68bb      	ldr	r3, [r7, #8]
900125b0:	795a      	ldrb	r2, [r3, #5]
900125b2:	693b      	ldr	r3, [r7, #16]
900125b4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
900125b6:	68bb      	ldr	r3, [r7, #8]
900125b8:	799a      	ldrb	r2, [r3, #6]
900125ba:	693b      	ldr	r3, [r7, #16]
900125bc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
900125be:	68bb      	ldr	r3, [r7, #8]
900125c0:	79da      	ldrb	r2, [r3, #7]
900125c2:	693b      	ldr	r3, [r7, #16]
900125c4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
900125c6:	68fb      	ldr	r3, [r7, #12]
900125c8:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
900125cc:	2b00      	cmp	r3, #0
900125ce:	d004      	beq.n	900125da <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
900125d0:	68fb      	ldr	r3, [r7, #12]
900125d2:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
900125d6:	2b01      	cmp	r3, #1
900125d8:	d11b      	bne.n	90012612 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
900125da:	693b      	ldr	r3, [r7, #16]
900125dc:	79db      	ldrb	r3, [r3, #7]
900125de:	2b20      	cmp	r3, #32
900125e0:	dc0f      	bgt.n	90012602 <USBH_ParseDevDesc+0xaa>
900125e2:	2b08      	cmp	r3, #8
900125e4:	db0f      	blt.n	90012606 <USBH_ParseDevDesc+0xae>
900125e6:	3b08      	subs	r3, #8
900125e8:	4a32      	ldr	r2, [pc, #200]	@ (900126b4 <USBH_ParseDevDesc+0x15c>)
900125ea:	fa22 f303 	lsr.w	r3, r2, r3
900125ee:	f003 0301 	and.w	r3, r3, #1
900125f2:	2b00      	cmp	r3, #0
900125f4:	bf14      	ite	ne
900125f6:	2301      	movne	r3, #1
900125f8:	2300      	moveq	r3, #0
900125fa:	b2db      	uxtb	r3, r3
900125fc:	2b00      	cmp	r3, #0
900125fe:	d106      	bne.n	9001260e <USBH_ParseDevDesc+0xb6>
90012600:	e001      	b.n	90012606 <USBH_ParseDevDesc+0xae>
90012602:	2b40      	cmp	r3, #64	@ 0x40
90012604:	d003      	beq.n	9001260e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
90012606:	693b      	ldr	r3, [r7, #16]
90012608:	2208      	movs	r2, #8
9001260a:	71da      	strb	r2, [r3, #7]
        break;
9001260c:	e000      	b.n	90012610 <USBH_ParseDevDesc+0xb8>
        break;
9001260e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
90012610:	e00e      	b.n	90012630 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
90012612:	68fb      	ldr	r3, [r7, #12]
90012614:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
90012618:	2b02      	cmp	r3, #2
9001261a:	d107      	bne.n	9001262c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
9001261c:	693b      	ldr	r3, [r7, #16]
9001261e:	79db      	ldrb	r3, [r3, #7]
90012620:	2b08      	cmp	r3, #8
90012622:	d005      	beq.n	90012630 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
90012624:	693b      	ldr	r3, [r7, #16]
90012626:	2208      	movs	r2, #8
90012628:	71da      	strb	r2, [r3, #7]
9001262a:	e001      	b.n	90012630 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
9001262c:	2303      	movs	r3, #3
9001262e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
90012630:	88fb      	ldrh	r3, [r7, #6]
90012632:	2b08      	cmp	r3, #8
90012634:	d936      	bls.n	900126a4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
90012636:	68bb      	ldr	r3, [r7, #8]
90012638:	3308      	adds	r3, #8
9001263a:	781b      	ldrb	r3, [r3, #0]
9001263c:	461a      	mov	r2, r3
9001263e:	68bb      	ldr	r3, [r7, #8]
90012640:	3309      	adds	r3, #9
90012642:	781b      	ldrb	r3, [r3, #0]
90012644:	021b      	lsls	r3, r3, #8
90012646:	b29b      	uxth	r3, r3
90012648:	4313      	orrs	r3, r2
9001264a:	b29a      	uxth	r2, r3
9001264c:	693b      	ldr	r3, [r7, #16]
9001264e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
90012650:	68bb      	ldr	r3, [r7, #8]
90012652:	330a      	adds	r3, #10
90012654:	781b      	ldrb	r3, [r3, #0]
90012656:	461a      	mov	r2, r3
90012658:	68bb      	ldr	r3, [r7, #8]
9001265a:	330b      	adds	r3, #11
9001265c:	781b      	ldrb	r3, [r3, #0]
9001265e:	021b      	lsls	r3, r3, #8
90012660:	b29b      	uxth	r3, r3
90012662:	4313      	orrs	r3, r2
90012664:	b29a      	uxth	r2, r3
90012666:	693b      	ldr	r3, [r7, #16]
90012668:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
9001266a:	68bb      	ldr	r3, [r7, #8]
9001266c:	330c      	adds	r3, #12
9001266e:	781b      	ldrb	r3, [r3, #0]
90012670:	461a      	mov	r2, r3
90012672:	68bb      	ldr	r3, [r7, #8]
90012674:	330d      	adds	r3, #13
90012676:	781b      	ldrb	r3, [r3, #0]
90012678:	021b      	lsls	r3, r3, #8
9001267a:	b29b      	uxth	r3, r3
9001267c:	4313      	orrs	r3, r2
9001267e:	b29a      	uxth	r2, r3
90012680:	693b      	ldr	r3, [r7, #16]
90012682:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
90012684:	68bb      	ldr	r3, [r7, #8]
90012686:	7b9a      	ldrb	r2, [r3, #14]
90012688:	693b      	ldr	r3, [r7, #16]
9001268a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
9001268c:	68bb      	ldr	r3, [r7, #8]
9001268e:	7bda      	ldrb	r2, [r3, #15]
90012690:	693b      	ldr	r3, [r7, #16]
90012692:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
90012694:	68bb      	ldr	r3, [r7, #8]
90012696:	7c1a      	ldrb	r2, [r3, #16]
90012698:	693b      	ldr	r3, [r7, #16]
9001269a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
9001269c:	68bb      	ldr	r3, [r7, #8]
9001269e:	7c5a      	ldrb	r2, [r3, #17]
900126a0:	693b      	ldr	r3, [r7, #16]
900126a2:	745a      	strb	r2, [r3, #17]
  }

  return status;
900126a4:	7dfb      	ldrb	r3, [r7, #23]
}
900126a6:	4618      	mov	r0, r3
900126a8:	371c      	adds	r7, #28
900126aa:	46bd      	mov	sp, r7
900126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900126b0:	4770      	bx	lr
900126b2:	bf00      	nop
900126b4:	01000101 	.word	0x01000101

900126b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
900126b8:	b580      	push	{r7, lr}
900126ba:	b08c      	sub	sp, #48	@ 0x30
900126bc:	af00      	add	r7, sp, #0
900126be:	60f8      	str	r0, [r7, #12]
900126c0:	60b9      	str	r1, [r7, #8]
900126c2:	4613      	mov	r3, r2
900126c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
900126c6:	68fb      	ldr	r3, [r7, #12]
900126c8:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
900126cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
900126ce:	2300      	movs	r3, #0
900126d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
900126d4:	2300      	movs	r3, #0
900126d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
900126da:	2300      	movs	r3, #0
900126dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
900126e0:	68bb      	ldr	r3, [r7, #8]
900126e2:	2b00      	cmp	r3, #0
900126e4:	d101      	bne.n	900126ea <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
900126e6:	2302      	movs	r3, #2
900126e8:	e0de      	b.n	900128a8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
900126ea:	68bb      	ldr	r3, [r7, #8]
900126ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
900126ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900126f0:	781b      	ldrb	r3, [r3, #0]
900126f2:	2b09      	cmp	r3, #9
900126f4:	d002      	beq.n	900126fc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
900126f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900126f8:	2209      	movs	r2, #9
900126fa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
900126fc:	68bb      	ldr	r3, [r7, #8]
900126fe:	781a      	ldrb	r2, [r3, #0]
90012700:	6a3b      	ldr	r3, [r7, #32]
90012702:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
90012704:	68bb      	ldr	r3, [r7, #8]
90012706:	785a      	ldrb	r2, [r3, #1]
90012708:	6a3b      	ldr	r3, [r7, #32]
9001270a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
9001270c:	68bb      	ldr	r3, [r7, #8]
9001270e:	3302      	adds	r3, #2
90012710:	781b      	ldrb	r3, [r3, #0]
90012712:	461a      	mov	r2, r3
90012714:	68bb      	ldr	r3, [r7, #8]
90012716:	3303      	adds	r3, #3
90012718:	781b      	ldrb	r3, [r3, #0]
9001271a:	021b      	lsls	r3, r3, #8
9001271c:	b29b      	uxth	r3, r3
9001271e:	4313      	orrs	r3, r2
90012720:	b29b      	uxth	r3, r3
90012722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90012726:	bf28      	it	cs
90012728:	f44f 7300 	movcs.w	r3, #512	@ 0x200
9001272c:	b29a      	uxth	r2, r3
9001272e:	6a3b      	ldr	r3, [r7, #32]
90012730:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
90012732:	68bb      	ldr	r3, [r7, #8]
90012734:	791a      	ldrb	r2, [r3, #4]
90012736:	6a3b      	ldr	r3, [r7, #32]
90012738:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
9001273a:	68bb      	ldr	r3, [r7, #8]
9001273c:	795a      	ldrb	r2, [r3, #5]
9001273e:	6a3b      	ldr	r3, [r7, #32]
90012740:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
90012742:	68bb      	ldr	r3, [r7, #8]
90012744:	799a      	ldrb	r2, [r3, #6]
90012746:	6a3b      	ldr	r3, [r7, #32]
90012748:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
9001274a:	68bb      	ldr	r3, [r7, #8]
9001274c:	79da      	ldrb	r2, [r3, #7]
9001274e:	6a3b      	ldr	r3, [r7, #32]
90012750:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
90012752:	68bb      	ldr	r3, [r7, #8]
90012754:	7a1a      	ldrb	r2, [r3, #8]
90012756:	6a3b      	ldr	r3, [r7, #32]
90012758:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
9001275a:	88fb      	ldrh	r3, [r7, #6]
9001275c:	2b09      	cmp	r3, #9
9001275e:	f240 80a1 	bls.w	900128a4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
90012762:	2309      	movs	r3, #9
90012764:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
90012766:	2300      	movs	r3, #0
90012768:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
9001276a:	e085      	b.n	90012878 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
9001276c:	f107 0316 	add.w	r3, r7, #22
90012770:	4619      	mov	r1, r3
90012772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
90012774:	f000 f9e6 	bl	90012b44 <USBH_GetNextDesc>
90012778:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
9001277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9001277c:	785b      	ldrb	r3, [r3, #1]
9001277e:	2b04      	cmp	r3, #4
90012780:	d17a      	bne.n	90012878 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
90012782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90012784:	781b      	ldrb	r3, [r3, #0]
90012786:	2b09      	cmp	r3, #9
90012788:	d002      	beq.n	90012790 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
9001278a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9001278c:	2209      	movs	r2, #9
9001278e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
90012790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90012794:	221a      	movs	r2, #26
90012796:	fb02 f303 	mul.w	r3, r2, r3
9001279a:	3308      	adds	r3, #8
9001279c:	6a3a      	ldr	r2, [r7, #32]
9001279e:	4413      	add	r3, r2
900127a0:	3302      	adds	r3, #2
900127a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
900127a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
900127a6:	69f8      	ldr	r0, [r7, #28]
900127a8:	f000 f882 	bl	900128b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
900127ac:	2300      	movs	r3, #0
900127ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
900127b2:	2300      	movs	r3, #0
900127b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
900127b6:	e043      	b.n	90012840 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
900127b8:	f107 0316 	add.w	r3, r7, #22
900127bc:	4619      	mov	r1, r3
900127be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
900127c0:	f000 f9c0 	bl	90012b44 <USBH_GetNextDesc>
900127c4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
900127c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900127c8:	785b      	ldrb	r3, [r3, #1]
900127ca:	2b05      	cmp	r3, #5
900127cc:	d138      	bne.n	90012840 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
900127ce:	69fb      	ldr	r3, [r7, #28]
900127d0:	795b      	ldrb	r3, [r3, #5]
900127d2:	2b01      	cmp	r3, #1
900127d4:	d113      	bne.n	900127fe <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
900127d6:	69fb      	ldr	r3, [r7, #28]
900127d8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
900127da:	2b02      	cmp	r3, #2
900127dc:	d003      	beq.n	900127e6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
900127de:	69fb      	ldr	r3, [r7, #28]
900127e0:	799b      	ldrb	r3, [r3, #6]
900127e2:	2b03      	cmp	r3, #3
900127e4:	d10b      	bne.n	900127fe <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
900127e6:	69fb      	ldr	r3, [r7, #28]
900127e8:	79db      	ldrb	r3, [r3, #7]
900127ea:	2b00      	cmp	r3, #0
900127ec:	d10b      	bne.n	90012806 <USBH_ParseCfgDesc+0x14e>
900127ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900127f0:	781b      	ldrb	r3, [r3, #0]
900127f2:	2b09      	cmp	r3, #9
900127f4:	d007      	beq.n	90012806 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
900127f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900127f8:	2209      	movs	r2, #9
900127fa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
900127fc:	e003      	b.n	90012806 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
900127fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90012800:	2207      	movs	r2, #7
90012802:	701a      	strb	r2, [r3, #0]
90012804:	e000      	b.n	90012808 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
90012806:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
90012808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9001280c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
90012810:	3201      	adds	r2, #1
90012812:	00d2      	lsls	r2, r2, #3
90012814:	211a      	movs	r1, #26
90012816:	fb01 f303 	mul.w	r3, r1, r3
9001281a:	4413      	add	r3, r2
9001281c:	3308      	adds	r3, #8
9001281e:	6a3a      	ldr	r2, [r7, #32]
90012820:	4413      	add	r3, r2
90012822:	3304      	adds	r3, #4
90012824:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
90012826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90012828:	69b9      	ldr	r1, [r7, #24]
9001282a:	68f8      	ldr	r0, [r7, #12]
9001282c:	f000 f86f 	bl	9001290e <USBH_ParseEPDesc>
90012830:	4603      	mov	r3, r0
90012832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
90012836:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
9001283a:	3301      	adds	r3, #1
9001283c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
90012840:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
90012844:	2b01      	cmp	r3, #1
90012846:	d80a      	bhi.n	9001285e <USBH_ParseCfgDesc+0x1a6>
90012848:	69fb      	ldr	r3, [r7, #28]
9001284a:	791b      	ldrb	r3, [r3, #4]
9001284c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
90012850:	429a      	cmp	r2, r3
90012852:	d204      	bcs.n	9001285e <USBH_ParseCfgDesc+0x1a6>
90012854:	6a3b      	ldr	r3, [r7, #32]
90012856:	885a      	ldrh	r2, [r3, #2]
90012858:	8afb      	ldrh	r3, [r7, #22]
9001285a:	429a      	cmp	r2, r3
9001285c:	d8ac      	bhi.n	900127b8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
9001285e:	69fb      	ldr	r3, [r7, #28]
90012860:	791b      	ldrb	r3, [r3, #4]
90012862:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
90012866:	429a      	cmp	r2, r3
90012868:	d201      	bcs.n	9001286e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
9001286a:	2303      	movs	r3, #3
9001286c:	e01c      	b.n	900128a8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
9001286e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90012872:	3301      	adds	r3, #1
90012874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
90012878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9001287c:	2b01      	cmp	r3, #1
9001287e:	d805      	bhi.n	9001288c <USBH_ParseCfgDesc+0x1d4>
90012880:	6a3b      	ldr	r3, [r7, #32]
90012882:	885a      	ldrh	r2, [r3, #2]
90012884:	8afb      	ldrh	r3, [r7, #22]
90012886:	429a      	cmp	r2, r3
90012888:	f63f af70 	bhi.w	9001276c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
9001288c:	6a3b      	ldr	r3, [r7, #32]
9001288e:	791b      	ldrb	r3, [r3, #4]
90012890:	2b02      	cmp	r3, #2
90012892:	bf28      	it	cs
90012894:	2302      	movcs	r3, #2
90012896:	b2db      	uxtb	r3, r3
90012898:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
9001289c:	429a      	cmp	r2, r3
9001289e:	d201      	bcs.n	900128a4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
900128a0:	2303      	movs	r3, #3
900128a2:	e001      	b.n	900128a8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
900128a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
900128a8:	4618      	mov	r0, r3
900128aa:	3730      	adds	r7, #48	@ 0x30
900128ac:	46bd      	mov	sp, r7
900128ae:	bd80      	pop	{r7, pc}

900128b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
900128b0:	b480      	push	{r7}
900128b2:	b083      	sub	sp, #12
900128b4:	af00      	add	r7, sp, #0
900128b6:	6078      	str	r0, [r7, #4]
900128b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
900128ba:	683b      	ldr	r3, [r7, #0]
900128bc:	781a      	ldrb	r2, [r3, #0]
900128be:	687b      	ldr	r3, [r7, #4]
900128c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
900128c2:	683b      	ldr	r3, [r7, #0]
900128c4:	785a      	ldrb	r2, [r3, #1]
900128c6:	687b      	ldr	r3, [r7, #4]
900128c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
900128ca:	683b      	ldr	r3, [r7, #0]
900128cc:	789a      	ldrb	r2, [r3, #2]
900128ce:	687b      	ldr	r3, [r7, #4]
900128d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
900128d2:	683b      	ldr	r3, [r7, #0]
900128d4:	78da      	ldrb	r2, [r3, #3]
900128d6:	687b      	ldr	r3, [r7, #4]
900128d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
900128da:	683b      	ldr	r3, [r7, #0]
900128dc:	791a      	ldrb	r2, [r3, #4]
900128de:	687b      	ldr	r3, [r7, #4]
900128e0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
900128e2:	683b      	ldr	r3, [r7, #0]
900128e4:	795a      	ldrb	r2, [r3, #5]
900128e6:	687b      	ldr	r3, [r7, #4]
900128e8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
900128ea:	683b      	ldr	r3, [r7, #0]
900128ec:	799a      	ldrb	r2, [r3, #6]
900128ee:	687b      	ldr	r3, [r7, #4]
900128f0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
900128f2:	683b      	ldr	r3, [r7, #0]
900128f4:	79da      	ldrb	r2, [r3, #7]
900128f6:	687b      	ldr	r3, [r7, #4]
900128f8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
900128fa:	683b      	ldr	r3, [r7, #0]
900128fc:	7a1a      	ldrb	r2, [r3, #8]
900128fe:	687b      	ldr	r3, [r7, #4]
90012900:	721a      	strb	r2, [r3, #8]
}
90012902:	bf00      	nop
90012904:	370c      	adds	r7, #12
90012906:	46bd      	mov	sp, r7
90012908:	f85d 7b04 	ldr.w	r7, [sp], #4
9001290c:	4770      	bx	lr

9001290e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
9001290e:	b480      	push	{r7}
90012910:	b087      	sub	sp, #28
90012912:	af00      	add	r7, sp, #0
90012914:	60f8      	str	r0, [r7, #12]
90012916:	60b9      	str	r1, [r7, #8]
90012918:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
9001291a:	2300      	movs	r3, #0
9001291c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
9001291e:	687b      	ldr	r3, [r7, #4]
90012920:	781a      	ldrb	r2, [r3, #0]
90012922:	68bb      	ldr	r3, [r7, #8]
90012924:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
90012926:	687b      	ldr	r3, [r7, #4]
90012928:	785a      	ldrb	r2, [r3, #1]
9001292a:	68bb      	ldr	r3, [r7, #8]
9001292c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
9001292e:	687b      	ldr	r3, [r7, #4]
90012930:	789a      	ldrb	r2, [r3, #2]
90012932:	68bb      	ldr	r3, [r7, #8]
90012934:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
90012936:	687b      	ldr	r3, [r7, #4]
90012938:	78da      	ldrb	r2, [r3, #3]
9001293a:	68bb      	ldr	r3, [r7, #8]
9001293c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
9001293e:	687b      	ldr	r3, [r7, #4]
90012940:	3304      	adds	r3, #4
90012942:	781b      	ldrb	r3, [r3, #0]
90012944:	461a      	mov	r2, r3
90012946:	687b      	ldr	r3, [r7, #4]
90012948:	3305      	adds	r3, #5
9001294a:	781b      	ldrb	r3, [r3, #0]
9001294c:	021b      	lsls	r3, r3, #8
9001294e:	b29b      	uxth	r3, r3
90012950:	4313      	orrs	r3, r2
90012952:	b29a      	uxth	r2, r3
90012954:	68bb      	ldr	r3, [r7, #8]
90012956:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
90012958:	687b      	ldr	r3, [r7, #4]
9001295a:	799a      	ldrb	r2, [r3, #6]
9001295c:	68bb      	ldr	r3, [r7, #8]
9001295e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
90012960:	68bb      	ldr	r3, [r7, #8]
90012962:	889b      	ldrh	r3, [r3, #4]
90012964:	2b00      	cmp	r3, #0
90012966:	d009      	beq.n	9001297c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
90012968:	68bb      	ldr	r3, [r7, #8]
9001296a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
9001296c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90012970:	d804      	bhi.n	9001297c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
90012972:	68bb      	ldr	r3, [r7, #8]
90012974:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
90012976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9001297a:	d901      	bls.n	90012980 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
9001297c:	2303      	movs	r3, #3
9001297e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
90012980:	68fb      	ldr	r3, [r7, #12]
90012982:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
90012986:	2b00      	cmp	r3, #0
90012988:	d136      	bne.n	900129f8 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
9001298a:	68bb      	ldr	r3, [r7, #8]
9001298c:	78db      	ldrb	r3, [r3, #3]
9001298e:	f003 0303 	and.w	r3, r3, #3
90012992:	2b02      	cmp	r3, #2
90012994:	d108      	bne.n	900129a8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
90012996:	68bb      	ldr	r3, [r7, #8]
90012998:	889b      	ldrh	r3, [r3, #4]
9001299a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9001299e:	f240 8097 	bls.w	90012ad0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
900129a2:	2303      	movs	r3, #3
900129a4:	75fb      	strb	r3, [r7, #23]
900129a6:	e093      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
900129a8:	68bb      	ldr	r3, [r7, #8]
900129aa:	78db      	ldrb	r3, [r3, #3]
900129ac:	f003 0303 	and.w	r3, r3, #3
900129b0:	2b00      	cmp	r3, #0
900129b2:	d107      	bne.n	900129c4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
900129b4:	68bb      	ldr	r3, [r7, #8]
900129b6:	889b      	ldrh	r3, [r3, #4]
900129b8:	2b40      	cmp	r3, #64	@ 0x40
900129ba:	f240 8089 	bls.w	90012ad0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
900129be:	2303      	movs	r3, #3
900129c0:	75fb      	strb	r3, [r7, #23]
900129c2:	e085      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
900129c4:	68bb      	ldr	r3, [r7, #8]
900129c6:	78db      	ldrb	r3, [r3, #3]
900129c8:	f003 0303 	and.w	r3, r3, #3
900129cc:	2b01      	cmp	r3, #1
900129ce:	d005      	beq.n	900129dc <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
900129d0:	68bb      	ldr	r3, [r7, #8]
900129d2:	78db      	ldrb	r3, [r3, #3]
900129d4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
900129d8:	2b03      	cmp	r3, #3
900129da:	d10a      	bne.n	900129f2 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
900129dc:	68bb      	ldr	r3, [r7, #8]
900129de:	799b      	ldrb	r3, [r3, #6]
900129e0:	2b00      	cmp	r3, #0
900129e2:	d003      	beq.n	900129ec <USBH_ParseEPDesc+0xde>
900129e4:	68bb      	ldr	r3, [r7, #8]
900129e6:	799b      	ldrb	r3, [r3, #6]
900129e8:	2b10      	cmp	r3, #16
900129ea:	d970      	bls.n	90012ace <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
900129ec:	2303      	movs	r3, #3
900129ee:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
900129f0:	e06d      	b.n	90012ace <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
900129f2:	2303      	movs	r3, #3
900129f4:	75fb      	strb	r3, [r7, #23]
900129f6:	e06b      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
900129f8:	68fb      	ldr	r3, [r7, #12]
900129fa:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
900129fe:	2b01      	cmp	r3, #1
90012a00:	d13c      	bne.n	90012a7c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
90012a02:	68bb      	ldr	r3, [r7, #8]
90012a04:	78db      	ldrb	r3, [r3, #3]
90012a06:	f003 0303 	and.w	r3, r3, #3
90012a0a:	2b02      	cmp	r3, #2
90012a0c:	d005      	beq.n	90012a1a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
90012a0e:	68bb      	ldr	r3, [r7, #8]
90012a10:	78db      	ldrb	r3, [r3, #3]
90012a12:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
90012a16:	2b00      	cmp	r3, #0
90012a18:	d106      	bne.n	90012a28 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
90012a1a:	68bb      	ldr	r3, [r7, #8]
90012a1c:	889b      	ldrh	r3, [r3, #4]
90012a1e:	2b40      	cmp	r3, #64	@ 0x40
90012a20:	d956      	bls.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
90012a22:	2303      	movs	r3, #3
90012a24:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
90012a26:	e053      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
90012a28:	68bb      	ldr	r3, [r7, #8]
90012a2a:	78db      	ldrb	r3, [r3, #3]
90012a2c:	f003 0303 	and.w	r3, r3, #3
90012a30:	2b01      	cmp	r3, #1
90012a32:	d10e      	bne.n	90012a52 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
90012a34:	68bb      	ldr	r3, [r7, #8]
90012a36:	799b      	ldrb	r3, [r3, #6]
90012a38:	2b00      	cmp	r3, #0
90012a3a:	d007      	beq.n	90012a4c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
90012a3c:	68bb      	ldr	r3, [r7, #8]
90012a3e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
90012a40:	2b10      	cmp	r3, #16
90012a42:	d803      	bhi.n	90012a4c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
90012a44:	68bb      	ldr	r3, [r7, #8]
90012a46:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
90012a48:	2b40      	cmp	r3, #64	@ 0x40
90012a4a:	d941      	bls.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
90012a4c:	2303      	movs	r3, #3
90012a4e:	75fb      	strb	r3, [r7, #23]
90012a50:	e03e      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
90012a52:	68bb      	ldr	r3, [r7, #8]
90012a54:	78db      	ldrb	r3, [r3, #3]
90012a56:	f003 0303 	and.w	r3, r3, #3
90012a5a:	2b03      	cmp	r3, #3
90012a5c:	d10b      	bne.n	90012a76 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
90012a5e:	68bb      	ldr	r3, [r7, #8]
90012a60:	799b      	ldrb	r3, [r3, #6]
90012a62:	2b00      	cmp	r3, #0
90012a64:	d004      	beq.n	90012a70 <USBH_ParseEPDesc+0x162>
90012a66:	68bb      	ldr	r3, [r7, #8]
90012a68:	889b      	ldrh	r3, [r3, #4]
90012a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90012a6e:	d32f      	bcc.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
90012a70:	2303      	movs	r3, #3
90012a72:	75fb      	strb	r3, [r7, #23]
90012a74:	e02c      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
90012a76:	2303      	movs	r3, #3
90012a78:	75fb      	strb	r3, [r7, #23]
90012a7a:	e029      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
90012a7c:	68fb      	ldr	r3, [r7, #12]
90012a7e:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
90012a82:	2b02      	cmp	r3, #2
90012a84:	d120      	bne.n	90012ac8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
90012a86:	68bb      	ldr	r3, [r7, #8]
90012a88:	78db      	ldrb	r3, [r3, #3]
90012a8a:	f003 0303 	and.w	r3, r3, #3
90012a8e:	2b00      	cmp	r3, #0
90012a90:	d106      	bne.n	90012aa0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
90012a92:	68bb      	ldr	r3, [r7, #8]
90012a94:	889b      	ldrh	r3, [r3, #4]
90012a96:	2b08      	cmp	r3, #8
90012a98:	d01a      	beq.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
90012a9a:	2303      	movs	r3, #3
90012a9c:	75fb      	strb	r3, [r7, #23]
90012a9e:	e017      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
90012aa0:	68bb      	ldr	r3, [r7, #8]
90012aa2:	78db      	ldrb	r3, [r3, #3]
90012aa4:	f003 0303 	and.w	r3, r3, #3
90012aa8:	2b03      	cmp	r3, #3
90012aaa:	d10a      	bne.n	90012ac2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
90012aac:	68bb      	ldr	r3, [r7, #8]
90012aae:	799b      	ldrb	r3, [r3, #6]
90012ab0:	2b00      	cmp	r3, #0
90012ab2:	d003      	beq.n	90012abc <USBH_ParseEPDesc+0x1ae>
90012ab4:	68bb      	ldr	r3, [r7, #8]
90012ab6:	889b      	ldrh	r3, [r3, #4]
90012ab8:	2b08      	cmp	r3, #8
90012aba:	d909      	bls.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
90012abc:	2303      	movs	r3, #3
90012abe:	75fb      	strb	r3, [r7, #23]
90012ac0:	e006      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
90012ac2:	2303      	movs	r3, #3
90012ac4:	75fb      	strb	r3, [r7, #23]
90012ac6:	e003      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
90012ac8:	2303      	movs	r3, #3
90012aca:	75fb      	strb	r3, [r7, #23]
90012acc:	e000      	b.n	90012ad0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
90012ace:	bf00      	nop
  }

  return status;
90012ad0:	7dfb      	ldrb	r3, [r7, #23]
}
90012ad2:	4618      	mov	r0, r3
90012ad4:	371c      	adds	r7, #28
90012ad6:	46bd      	mov	sp, r7
90012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
90012adc:	4770      	bx	lr

90012ade <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
90012ade:	b480      	push	{r7}
90012ae0:	b087      	sub	sp, #28
90012ae2:	af00      	add	r7, sp, #0
90012ae4:	60f8      	str	r0, [r7, #12]
90012ae6:	60b9      	str	r1, [r7, #8]
90012ae8:	4613      	mov	r3, r2
90012aea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
90012aec:	68fb      	ldr	r3, [r7, #12]
90012aee:	3301      	adds	r3, #1
90012af0:	781b      	ldrb	r3, [r3, #0]
90012af2:	2b03      	cmp	r3, #3
90012af4:	d120      	bne.n	90012b38 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
90012af6:	68fb      	ldr	r3, [r7, #12]
90012af8:	781b      	ldrb	r3, [r3, #0]
90012afa:	1e9a      	subs	r2, r3, #2
90012afc:	88fb      	ldrh	r3, [r7, #6]
90012afe:	4293      	cmp	r3, r2
90012b00:	bf28      	it	cs
90012b02:	4613      	movcs	r3, r2
90012b04:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
90012b06:	68fb      	ldr	r3, [r7, #12]
90012b08:	3302      	adds	r3, #2
90012b0a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
90012b0c:	2300      	movs	r3, #0
90012b0e:	82fb      	strh	r3, [r7, #22]
90012b10:	e00b      	b.n	90012b2a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
90012b12:	8afb      	ldrh	r3, [r7, #22]
90012b14:	68fa      	ldr	r2, [r7, #12]
90012b16:	4413      	add	r3, r2
90012b18:	781a      	ldrb	r2, [r3, #0]
90012b1a:	68bb      	ldr	r3, [r7, #8]
90012b1c:	701a      	strb	r2, [r3, #0]
      pdest++;
90012b1e:	68bb      	ldr	r3, [r7, #8]
90012b20:	3301      	adds	r3, #1
90012b22:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
90012b24:	8afb      	ldrh	r3, [r7, #22]
90012b26:	3302      	adds	r3, #2
90012b28:	82fb      	strh	r3, [r7, #22]
90012b2a:	8afa      	ldrh	r2, [r7, #22]
90012b2c:	8abb      	ldrh	r3, [r7, #20]
90012b2e:	429a      	cmp	r2, r3
90012b30:	d3ef      	bcc.n	90012b12 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
90012b32:	68bb      	ldr	r3, [r7, #8]
90012b34:	2200      	movs	r2, #0
90012b36:	701a      	strb	r2, [r3, #0]
  }
}
90012b38:	bf00      	nop
90012b3a:	371c      	adds	r7, #28
90012b3c:	46bd      	mov	sp, r7
90012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
90012b42:	4770      	bx	lr

90012b44 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
90012b44:	b480      	push	{r7}
90012b46:	b085      	sub	sp, #20
90012b48:	af00      	add	r7, sp, #0
90012b4a:	6078      	str	r0, [r7, #4]
90012b4c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90012b4e:	683b      	ldr	r3, [r7, #0]
90012b50:	881b      	ldrh	r3, [r3, #0]
90012b52:	687a      	ldr	r2, [r7, #4]
90012b54:	7812      	ldrb	r2, [r2, #0]
90012b56:	4413      	add	r3, r2
90012b58:	b29a      	uxth	r2, r3
90012b5a:	683b      	ldr	r3, [r7, #0]
90012b5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
90012b5e:	687b      	ldr	r3, [r7, #4]
90012b60:	781b      	ldrb	r3, [r3, #0]
90012b62:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
90012b64:	687b      	ldr	r3, [r7, #4]
90012b66:	4413      	add	r3, r2
90012b68:	60fb      	str	r3, [r7, #12]

  return (pnext);
90012b6a:	68fb      	ldr	r3, [r7, #12]
}
90012b6c:	4618      	mov	r0, r3
90012b6e:	3714      	adds	r7, #20
90012b70:	46bd      	mov	sp, r7
90012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
90012b76:	4770      	bx	lr

90012b78 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
90012b78:	b580      	push	{r7, lr}
90012b7a:	b086      	sub	sp, #24
90012b7c:	af00      	add	r7, sp, #0
90012b7e:	60f8      	str	r0, [r7, #12]
90012b80:	60b9      	str	r1, [r7, #8]
90012b82:	4613      	mov	r3, r2
90012b84:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
90012b86:	2301      	movs	r3, #1
90012b88:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
90012b8a:	68fb      	ldr	r3, [r7, #12]
90012b8c:	789b      	ldrb	r3, [r3, #2]
90012b8e:	2b01      	cmp	r3, #1
90012b90:	d002      	beq.n	90012b98 <USBH_CtlReq+0x20>
90012b92:	2b02      	cmp	r3, #2
90012b94:	d00f      	beq.n	90012bb6 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
90012b96:	e027      	b.n	90012be8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
90012b98:	68fb      	ldr	r3, [r7, #12]
90012b9a:	68ba      	ldr	r2, [r7, #8]
90012b9c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
90012b9e:	68fb      	ldr	r3, [r7, #12]
90012ba0:	88fa      	ldrh	r2, [r7, #6]
90012ba2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
90012ba4:	68fb      	ldr	r3, [r7, #12]
90012ba6:	2201      	movs	r2, #1
90012ba8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
90012baa:	68fb      	ldr	r3, [r7, #12]
90012bac:	2202      	movs	r2, #2
90012bae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
90012bb0:	2301      	movs	r3, #1
90012bb2:	75fb      	strb	r3, [r7, #23]
      break;
90012bb4:	e018      	b.n	90012be8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
90012bb6:	68f8      	ldr	r0, [r7, #12]
90012bb8:	f000 f81c 	bl	90012bf4 <USBH_HandleControl>
90012bbc:	4603      	mov	r3, r0
90012bbe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
90012bc0:	7dfb      	ldrb	r3, [r7, #23]
90012bc2:	2b00      	cmp	r3, #0
90012bc4:	d002      	beq.n	90012bcc <USBH_CtlReq+0x54>
90012bc6:	7dfb      	ldrb	r3, [r7, #23]
90012bc8:	2b03      	cmp	r3, #3
90012bca:	d106      	bne.n	90012bda <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
90012bcc:	68fb      	ldr	r3, [r7, #12]
90012bce:	2201      	movs	r2, #1
90012bd0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
90012bd2:	68fb      	ldr	r3, [r7, #12]
90012bd4:	2200      	movs	r2, #0
90012bd6:	761a      	strb	r2, [r3, #24]
      break;
90012bd8:	e005      	b.n	90012be6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
90012bda:	7dfb      	ldrb	r3, [r7, #23]
90012bdc:	2b02      	cmp	r3, #2
90012bde:	d102      	bne.n	90012be6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
90012be0:	68fb      	ldr	r3, [r7, #12]
90012be2:	2201      	movs	r2, #1
90012be4:	709a      	strb	r2, [r3, #2]
      break;
90012be6:	bf00      	nop
  }
  return status;
90012be8:	7dfb      	ldrb	r3, [r7, #23]
}
90012bea:	4618      	mov	r0, r3
90012bec:	3718      	adds	r7, #24
90012bee:	46bd      	mov	sp, r7
90012bf0:	bd80      	pop	{r7, pc}
	...

90012bf4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
90012bf4:	b580      	push	{r7, lr}
90012bf6:	b086      	sub	sp, #24
90012bf8:	af02      	add	r7, sp, #8
90012bfa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
90012bfc:	2301      	movs	r3, #1
90012bfe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
90012c00:	2300      	movs	r3, #0
90012c02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
90012c04:	687b      	ldr	r3, [r7, #4]
90012c06:	7e1b      	ldrb	r3, [r3, #24]
90012c08:	3b01      	subs	r3, #1
90012c0a:	2b0a      	cmp	r3, #10
90012c0c:	f200 8157 	bhi.w	90012ebe <USBH_HandleControl+0x2ca>
90012c10:	a201      	add	r2, pc, #4	@ (adr r2, 90012c18 <USBH_HandleControl+0x24>)
90012c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90012c16:	bf00      	nop
90012c18:	90012c45 	.word	0x90012c45
90012c1c:	90012c5f 	.word	0x90012c5f
90012c20:	90012cc9 	.word	0x90012cc9
90012c24:	90012cef 	.word	0x90012cef
90012c28:	90012d29 	.word	0x90012d29
90012c2c:	90012d53 	.word	0x90012d53
90012c30:	90012da5 	.word	0x90012da5
90012c34:	90012dc7 	.word	0x90012dc7
90012c38:	90012e03 	.word	0x90012e03
90012c3c:	90012e29 	.word	0x90012e29
90012c40:	90012e67 	.word	0x90012e67
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
90012c44:	687b      	ldr	r3, [r7, #4]
90012c46:	f103 0110 	add.w	r1, r3, #16
90012c4a:	687b      	ldr	r3, [r7, #4]
90012c4c:	795b      	ldrb	r3, [r3, #5]
90012c4e:	461a      	mov	r2, r3
90012c50:	6878      	ldr	r0, [r7, #4]
90012c52:	f000 f945 	bl	90012ee0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
90012c56:	687b      	ldr	r3, [r7, #4]
90012c58:	2202      	movs	r2, #2
90012c5a:	761a      	strb	r2, [r3, #24]
      break;
90012c5c:	e13a      	b.n	90012ed4 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90012c5e:	687b      	ldr	r3, [r7, #4]
90012c60:	795b      	ldrb	r3, [r3, #5]
90012c62:	4619      	mov	r1, r3
90012c64:	6878      	ldr	r0, [r7, #4]
90012c66:	f7ee fff6 	bl	90001c56 <USBH_LL_GetURBState>
90012c6a:	4603      	mov	r3, r0
90012c6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
90012c6e:	7bbb      	ldrb	r3, [r7, #14]
90012c70:	2b01      	cmp	r3, #1
90012c72:	d11e      	bne.n	90012cb2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
90012c74:	687b      	ldr	r3, [r7, #4]
90012c76:	7c1b      	ldrb	r3, [r3, #16]
90012c78:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
90012c7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
90012c7e:	687b      	ldr	r3, [r7, #4]
90012c80:	8adb      	ldrh	r3, [r3, #22]
90012c82:	2b00      	cmp	r3, #0
90012c84:	d00a      	beq.n	90012c9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
90012c86:	7b7b      	ldrb	r3, [r7, #13]
90012c88:	2b80      	cmp	r3, #128	@ 0x80
90012c8a:	d103      	bne.n	90012c94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
90012c8c:	687b      	ldr	r3, [r7, #4]
90012c8e:	2203      	movs	r2, #3
90012c90:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
90012c92:	e116      	b.n	90012ec2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
90012c94:	687b      	ldr	r3, [r7, #4]
90012c96:	2205      	movs	r2, #5
90012c98:	761a      	strb	r2, [r3, #24]
      break;
90012c9a:	e112      	b.n	90012ec2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
90012c9c:	7b7b      	ldrb	r3, [r7, #13]
90012c9e:	2b80      	cmp	r3, #128	@ 0x80
90012ca0:	d103      	bne.n	90012caa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
90012ca2:	687b      	ldr	r3, [r7, #4]
90012ca4:	2209      	movs	r2, #9
90012ca6:	761a      	strb	r2, [r3, #24]
      break;
90012ca8:	e10b      	b.n	90012ec2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
90012caa:	687b      	ldr	r3, [r7, #4]
90012cac:	2207      	movs	r2, #7
90012cae:	761a      	strb	r2, [r3, #24]
      break;
90012cb0:	e107      	b.n	90012ec2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
90012cb2:	7bbb      	ldrb	r3, [r7, #14]
90012cb4:	2b04      	cmp	r3, #4
90012cb6:	d003      	beq.n	90012cc0 <USBH_HandleControl+0xcc>
90012cb8:	7bbb      	ldrb	r3, [r7, #14]
90012cba:	2b02      	cmp	r3, #2
90012cbc:	f040 8101 	bne.w	90012ec2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
90012cc0:	687b      	ldr	r3, [r7, #4]
90012cc2:	220b      	movs	r2, #11
90012cc4:	761a      	strb	r2, [r3, #24]
      break;
90012cc6:	e0fc      	b.n	90012ec2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
90012cc8:	687b      	ldr	r3, [r7, #4]
90012cca:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
90012cce:	b29a      	uxth	r2, r3
90012cd0:	687b      	ldr	r3, [r7, #4]
90012cd2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
90012cd4:	687b      	ldr	r3, [r7, #4]
90012cd6:	6899      	ldr	r1, [r3, #8]
90012cd8:	687b      	ldr	r3, [r7, #4]
90012cda:	899a      	ldrh	r2, [r3, #12]
90012cdc:	687b      	ldr	r3, [r7, #4]
90012cde:	791b      	ldrb	r3, [r3, #4]
90012ce0:	6878      	ldr	r0, [r7, #4]
90012ce2:	f000 f93c 	bl	90012f5e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
90012ce6:	687b      	ldr	r3, [r7, #4]
90012ce8:	2204      	movs	r2, #4
90012cea:	761a      	strb	r2, [r3, #24]
      break;
90012cec:	e0f2      	b.n	90012ed4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
90012cee:	687b      	ldr	r3, [r7, #4]
90012cf0:	791b      	ldrb	r3, [r3, #4]
90012cf2:	4619      	mov	r1, r3
90012cf4:	6878      	ldr	r0, [r7, #4]
90012cf6:	f7ee ffae 	bl	90001c56 <USBH_LL_GetURBState>
90012cfa:	4603      	mov	r3, r0
90012cfc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
90012cfe:	7bbb      	ldrb	r3, [r7, #14]
90012d00:	2b01      	cmp	r3, #1
90012d02:	d103      	bne.n	90012d0c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
90012d04:	687b      	ldr	r3, [r7, #4]
90012d06:	2209      	movs	r2, #9
90012d08:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
90012d0a:	e0dc      	b.n	90012ec6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
90012d0c:	7bbb      	ldrb	r3, [r7, #14]
90012d0e:	2b05      	cmp	r3, #5
90012d10:	d102      	bne.n	90012d18 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
90012d12:	2303      	movs	r3, #3
90012d14:	73fb      	strb	r3, [r7, #15]
      break;
90012d16:	e0d6      	b.n	90012ec6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
90012d18:	7bbb      	ldrb	r3, [r7, #14]
90012d1a:	2b04      	cmp	r3, #4
90012d1c:	f040 80d3 	bne.w	90012ec6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
90012d20:	687b      	ldr	r3, [r7, #4]
90012d22:	220b      	movs	r2, #11
90012d24:	761a      	strb	r2, [r3, #24]
      break;
90012d26:	e0ce      	b.n	90012ec6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
90012d28:	687b      	ldr	r3, [r7, #4]
90012d2a:	6899      	ldr	r1, [r3, #8]
90012d2c:	687b      	ldr	r3, [r7, #4]
90012d2e:	899a      	ldrh	r2, [r3, #12]
90012d30:	687b      	ldr	r3, [r7, #4]
90012d32:	795b      	ldrb	r3, [r3, #5]
90012d34:	2001      	movs	r0, #1
90012d36:	9000      	str	r0, [sp, #0]
90012d38:	6878      	ldr	r0, [r7, #4]
90012d3a:	f000 f8eb 	bl	90012f14 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
90012d3e:	687b      	ldr	r3, [r7, #4]
90012d40:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
90012d44:	b29a      	uxth	r2, r3
90012d46:	687b      	ldr	r3, [r7, #4]
90012d48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
90012d4a:	687b      	ldr	r3, [r7, #4]
90012d4c:	2206      	movs	r2, #6
90012d4e:	761a      	strb	r2, [r3, #24]
      break;
90012d50:	e0c0      	b.n	90012ed4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90012d52:	687b      	ldr	r3, [r7, #4]
90012d54:	795b      	ldrb	r3, [r3, #5]
90012d56:	4619      	mov	r1, r3
90012d58:	6878      	ldr	r0, [r7, #4]
90012d5a:	f7ee ff7c 	bl	90001c56 <USBH_LL_GetURBState>
90012d5e:	4603      	mov	r3, r0
90012d60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
90012d62:	7bbb      	ldrb	r3, [r7, #14]
90012d64:	2b01      	cmp	r3, #1
90012d66:	d103      	bne.n	90012d70 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
90012d68:	687b      	ldr	r3, [r7, #4]
90012d6a:	2207      	movs	r2, #7
90012d6c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
90012d6e:	e0ac      	b.n	90012eca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
90012d70:	7bbb      	ldrb	r3, [r7, #14]
90012d72:	2b05      	cmp	r3, #5
90012d74:	d105      	bne.n	90012d82 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
90012d76:	687b      	ldr	r3, [r7, #4]
90012d78:	220c      	movs	r2, #12
90012d7a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
90012d7c:	2303      	movs	r3, #3
90012d7e:	73fb      	strb	r3, [r7, #15]
      break;
90012d80:	e0a3      	b.n	90012eca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
90012d82:	7bbb      	ldrb	r3, [r7, #14]
90012d84:	2b02      	cmp	r3, #2
90012d86:	d103      	bne.n	90012d90 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
90012d88:	687b      	ldr	r3, [r7, #4]
90012d8a:	2205      	movs	r2, #5
90012d8c:	761a      	strb	r2, [r3, #24]
      break;
90012d8e:	e09c      	b.n	90012eca <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
90012d90:	7bbb      	ldrb	r3, [r7, #14]
90012d92:	2b04      	cmp	r3, #4
90012d94:	f040 8099 	bne.w	90012eca <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
90012d98:	687b      	ldr	r3, [r7, #4]
90012d9a:	220b      	movs	r2, #11
90012d9c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
90012d9e:	2302      	movs	r3, #2
90012da0:	73fb      	strb	r3, [r7, #15]
      break;
90012da2:	e092      	b.n	90012eca <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
90012da4:	687b      	ldr	r3, [r7, #4]
90012da6:	791b      	ldrb	r3, [r3, #4]
90012da8:	2200      	movs	r2, #0
90012daa:	2100      	movs	r1, #0
90012dac:	6878      	ldr	r0, [r7, #4]
90012dae:	f000 f8d6 	bl	90012f5e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
90012db2:	687b      	ldr	r3, [r7, #4]
90012db4:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
90012db8:	b29a      	uxth	r2, r3
90012dba:	687b      	ldr	r3, [r7, #4]
90012dbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
90012dbe:	687b      	ldr	r3, [r7, #4]
90012dc0:	2208      	movs	r2, #8
90012dc2:	761a      	strb	r2, [r3, #24]

      break;
90012dc4:	e086      	b.n	90012ed4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
90012dc6:	687b      	ldr	r3, [r7, #4]
90012dc8:	791b      	ldrb	r3, [r3, #4]
90012dca:	4619      	mov	r1, r3
90012dcc:	6878      	ldr	r0, [r7, #4]
90012dce:	f7ee ff42 	bl	90001c56 <USBH_LL_GetURBState>
90012dd2:	4603      	mov	r3, r0
90012dd4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
90012dd6:	7bbb      	ldrb	r3, [r7, #14]
90012dd8:	2b01      	cmp	r3, #1
90012dda:	d105      	bne.n	90012de8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
90012ddc:	687b      	ldr	r3, [r7, #4]
90012dde:	220d      	movs	r2, #13
90012de0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
90012de2:	2300      	movs	r3, #0
90012de4:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
90012de6:	e072      	b.n	90012ece <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
90012de8:	7bbb      	ldrb	r3, [r7, #14]
90012dea:	2b04      	cmp	r3, #4
90012dec:	d103      	bne.n	90012df6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
90012dee:	687b      	ldr	r3, [r7, #4]
90012df0:	220b      	movs	r2, #11
90012df2:	761a      	strb	r2, [r3, #24]
      break;
90012df4:	e06b      	b.n	90012ece <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
90012df6:	7bbb      	ldrb	r3, [r7, #14]
90012df8:	2b05      	cmp	r3, #5
90012dfa:	d168      	bne.n	90012ece <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
90012dfc:	2303      	movs	r3, #3
90012dfe:	73fb      	strb	r3, [r7, #15]
      break;
90012e00:	e065      	b.n	90012ece <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
90012e02:	687b      	ldr	r3, [r7, #4]
90012e04:	795b      	ldrb	r3, [r3, #5]
90012e06:	2201      	movs	r2, #1
90012e08:	9200      	str	r2, [sp, #0]
90012e0a:	2200      	movs	r2, #0
90012e0c:	2100      	movs	r1, #0
90012e0e:	6878      	ldr	r0, [r7, #4]
90012e10:	f000 f880 	bl	90012f14 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
90012e14:	687b      	ldr	r3, [r7, #4]
90012e16:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
90012e1a:	b29a      	uxth	r2, r3
90012e1c:	687b      	ldr	r3, [r7, #4]
90012e1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
90012e20:	687b      	ldr	r3, [r7, #4]
90012e22:	220a      	movs	r2, #10
90012e24:	761a      	strb	r2, [r3, #24]
      break;
90012e26:	e055      	b.n	90012ed4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90012e28:	687b      	ldr	r3, [r7, #4]
90012e2a:	795b      	ldrb	r3, [r3, #5]
90012e2c:	4619      	mov	r1, r3
90012e2e:	6878      	ldr	r0, [r7, #4]
90012e30:	f7ee ff11 	bl	90001c56 <USBH_LL_GetURBState>
90012e34:	4603      	mov	r3, r0
90012e36:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
90012e38:	7bbb      	ldrb	r3, [r7, #14]
90012e3a:	2b01      	cmp	r3, #1
90012e3c:	d105      	bne.n	90012e4a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
90012e3e:	2300      	movs	r3, #0
90012e40:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
90012e42:	687b      	ldr	r3, [r7, #4]
90012e44:	220d      	movs	r2, #13
90012e46:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
90012e48:	e043      	b.n	90012ed2 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
90012e4a:	7bbb      	ldrb	r3, [r7, #14]
90012e4c:	2b02      	cmp	r3, #2
90012e4e:	d103      	bne.n	90012e58 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
90012e50:	687b      	ldr	r3, [r7, #4]
90012e52:	2209      	movs	r2, #9
90012e54:	761a      	strb	r2, [r3, #24]
      break;
90012e56:	e03c      	b.n	90012ed2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
90012e58:	7bbb      	ldrb	r3, [r7, #14]
90012e5a:	2b04      	cmp	r3, #4
90012e5c:	d139      	bne.n	90012ed2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
90012e5e:	687b      	ldr	r3, [r7, #4]
90012e60:	220b      	movs	r2, #11
90012e62:	761a      	strb	r2, [r3, #24]
      break;
90012e64:	e035      	b.n	90012ed2 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
90012e66:	687b      	ldr	r3, [r7, #4]
90012e68:	7e5b      	ldrb	r3, [r3, #25]
90012e6a:	3301      	adds	r3, #1
90012e6c:	b2da      	uxtb	r2, r3
90012e6e:	687b      	ldr	r3, [r7, #4]
90012e70:	765a      	strb	r2, [r3, #25]
90012e72:	687b      	ldr	r3, [r7, #4]
90012e74:	7e5b      	ldrb	r3, [r3, #25]
90012e76:	2b02      	cmp	r3, #2
90012e78:	d806      	bhi.n	90012e88 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
90012e7a:	687b      	ldr	r3, [r7, #4]
90012e7c:	2201      	movs	r2, #1
90012e7e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
90012e80:	687b      	ldr	r3, [r7, #4]
90012e82:	2201      	movs	r2, #1
90012e84:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
90012e86:	e025      	b.n	90012ed4 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
90012e88:	687b      	ldr	r3, [r7, #4]
90012e8a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
90012e8e:	2106      	movs	r1, #6
90012e90:	6878      	ldr	r0, [r7, #4]
90012e92:	4798      	blx	r3
        phost->Control.errorcount = 0U;
90012e94:	687b      	ldr	r3, [r7, #4]
90012e96:	2200      	movs	r2, #0
90012e98:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
90012e9a:	687b      	ldr	r3, [r7, #4]
90012e9c:	795b      	ldrb	r3, [r3, #5]
90012e9e:	4619      	mov	r1, r3
90012ea0:	6878      	ldr	r0, [r7, #4]
90012ea2:	f000 f90e 	bl	900130c2 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
90012ea6:	687b      	ldr	r3, [r7, #4]
90012ea8:	791b      	ldrb	r3, [r3, #4]
90012eaa:	4619      	mov	r1, r3
90012eac:	6878      	ldr	r0, [r7, #4]
90012eae:	f000 f908 	bl	900130c2 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
90012eb2:	687b      	ldr	r3, [r7, #4]
90012eb4:	2200      	movs	r2, #0
90012eb6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
90012eb8:	2302      	movs	r3, #2
90012eba:	73fb      	strb	r3, [r7, #15]
      break;
90012ebc:	e00a      	b.n	90012ed4 <USBH_HandleControl+0x2e0>

    default:
      break;
90012ebe:	bf00      	nop
90012ec0:	e008      	b.n	90012ed4 <USBH_HandleControl+0x2e0>
      break;
90012ec2:	bf00      	nop
90012ec4:	e006      	b.n	90012ed4 <USBH_HandleControl+0x2e0>
      break;
90012ec6:	bf00      	nop
90012ec8:	e004      	b.n	90012ed4 <USBH_HandleControl+0x2e0>
      break;
90012eca:	bf00      	nop
90012ecc:	e002      	b.n	90012ed4 <USBH_HandleControl+0x2e0>
      break;
90012ece:	bf00      	nop
90012ed0:	e000      	b.n	90012ed4 <USBH_HandleControl+0x2e0>
      break;
90012ed2:	bf00      	nop
  }

  return status;
90012ed4:	7bfb      	ldrb	r3, [r7, #15]
}
90012ed6:	4618      	mov	r0, r3
90012ed8:	3710      	adds	r7, #16
90012eda:	46bd      	mov	sp, r7
90012edc:	bd80      	pop	{r7, pc}
90012ede:	bf00      	nop

90012ee0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
90012ee0:	b580      	push	{r7, lr}
90012ee2:	b088      	sub	sp, #32
90012ee4:	af04      	add	r7, sp, #16
90012ee6:	60f8      	str	r0, [r7, #12]
90012ee8:	60b9      	str	r1, [r7, #8]
90012eea:	4613      	mov	r3, r2
90012eec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
90012eee:	79f9      	ldrb	r1, [r7, #7]
90012ef0:	2300      	movs	r3, #0
90012ef2:	9303      	str	r3, [sp, #12]
90012ef4:	2308      	movs	r3, #8
90012ef6:	9302      	str	r3, [sp, #8]
90012ef8:	68bb      	ldr	r3, [r7, #8]
90012efa:	9301      	str	r3, [sp, #4]
90012efc:	2300      	movs	r3, #0
90012efe:	9300      	str	r3, [sp, #0]
90012f00:	2300      	movs	r3, #0
90012f02:	2200      	movs	r2, #0
90012f04:	68f8      	ldr	r0, [r7, #12]
90012f06:	f7ee fe82 	bl	90001c0e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
90012f0a:	2300      	movs	r3, #0
}
90012f0c:	4618      	mov	r0, r3
90012f0e:	3710      	adds	r7, #16
90012f10:	46bd      	mov	sp, r7
90012f12:	bd80      	pop	{r7, pc}

90012f14 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
90012f14:	b580      	push	{r7, lr}
90012f16:	b088      	sub	sp, #32
90012f18:	af04      	add	r7, sp, #16
90012f1a:	60f8      	str	r0, [r7, #12]
90012f1c:	60b9      	str	r1, [r7, #8]
90012f1e:	4611      	mov	r1, r2
90012f20:	461a      	mov	r2, r3
90012f22:	460b      	mov	r3, r1
90012f24:	80fb      	strh	r3, [r7, #6]
90012f26:	4613      	mov	r3, r2
90012f28:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
90012f2a:	68fb      	ldr	r3, [r7, #12]
90012f2c:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
90012f30:	2b00      	cmp	r3, #0
90012f32:	d001      	beq.n	90012f38 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
90012f34:	2300      	movs	r3, #0
90012f36:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
90012f38:	7979      	ldrb	r1, [r7, #5]
90012f3a:	7e3b      	ldrb	r3, [r7, #24]
90012f3c:	9303      	str	r3, [sp, #12]
90012f3e:	88fb      	ldrh	r3, [r7, #6]
90012f40:	9302      	str	r3, [sp, #8]
90012f42:	68bb      	ldr	r3, [r7, #8]
90012f44:	9301      	str	r3, [sp, #4]
90012f46:	2301      	movs	r3, #1
90012f48:	9300      	str	r3, [sp, #0]
90012f4a:	2300      	movs	r3, #0
90012f4c:	2200      	movs	r2, #0
90012f4e:	68f8      	ldr	r0, [r7, #12]
90012f50:	f7ee fe5d 	bl	90001c0e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
90012f54:	2300      	movs	r3, #0
}
90012f56:	4618      	mov	r0, r3
90012f58:	3710      	adds	r7, #16
90012f5a:	46bd      	mov	sp, r7
90012f5c:	bd80      	pop	{r7, pc}

90012f5e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
90012f5e:	b580      	push	{r7, lr}
90012f60:	b088      	sub	sp, #32
90012f62:	af04      	add	r7, sp, #16
90012f64:	60f8      	str	r0, [r7, #12]
90012f66:	60b9      	str	r1, [r7, #8]
90012f68:	4611      	mov	r1, r2
90012f6a:	461a      	mov	r2, r3
90012f6c:	460b      	mov	r3, r1
90012f6e:	80fb      	strh	r3, [r7, #6]
90012f70:	4613      	mov	r3, r2
90012f72:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
90012f74:	7979      	ldrb	r1, [r7, #5]
90012f76:	2300      	movs	r3, #0
90012f78:	9303      	str	r3, [sp, #12]
90012f7a:	88fb      	ldrh	r3, [r7, #6]
90012f7c:	9302      	str	r3, [sp, #8]
90012f7e:	68bb      	ldr	r3, [r7, #8]
90012f80:	9301      	str	r3, [sp, #4]
90012f82:	2301      	movs	r3, #1
90012f84:	9300      	str	r3, [sp, #0]
90012f86:	2300      	movs	r3, #0
90012f88:	2201      	movs	r2, #1
90012f8a:	68f8      	ldr	r0, [r7, #12]
90012f8c:	f7ee fe3f 	bl	90001c0e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
90012f90:	2300      	movs	r3, #0

}
90012f92:	4618      	mov	r0, r3
90012f94:	3710      	adds	r7, #16
90012f96:	46bd      	mov	sp, r7
90012f98:	bd80      	pop	{r7, pc}

90012f9a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
90012f9a:	b580      	push	{r7, lr}
90012f9c:	b088      	sub	sp, #32
90012f9e:	af04      	add	r7, sp, #16
90012fa0:	60f8      	str	r0, [r7, #12]
90012fa2:	60b9      	str	r1, [r7, #8]
90012fa4:	4611      	mov	r1, r2
90012fa6:	461a      	mov	r2, r3
90012fa8:	460b      	mov	r3, r1
90012faa:	80fb      	strh	r3, [r7, #6]
90012fac:	4613      	mov	r3, r2
90012fae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
90012fb0:	68fb      	ldr	r3, [r7, #12]
90012fb2:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
90012fb6:	2b00      	cmp	r3, #0
90012fb8:	d001      	beq.n	90012fbe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
90012fba:	2300      	movs	r3, #0
90012fbc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
90012fbe:	7979      	ldrb	r1, [r7, #5]
90012fc0:	7e3b      	ldrb	r3, [r7, #24]
90012fc2:	9303      	str	r3, [sp, #12]
90012fc4:	88fb      	ldrh	r3, [r7, #6]
90012fc6:	9302      	str	r3, [sp, #8]
90012fc8:	68bb      	ldr	r3, [r7, #8]
90012fca:	9301      	str	r3, [sp, #4]
90012fcc:	2301      	movs	r3, #1
90012fce:	9300      	str	r3, [sp, #0]
90012fd0:	2302      	movs	r3, #2
90012fd2:	2200      	movs	r2, #0
90012fd4:	68f8      	ldr	r0, [r7, #12]
90012fd6:	f7ee fe1a 	bl	90001c0e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
90012fda:	2300      	movs	r3, #0
}
90012fdc:	4618      	mov	r0, r3
90012fde:	3710      	adds	r7, #16
90012fe0:	46bd      	mov	sp, r7
90012fe2:	bd80      	pop	{r7, pc}

90012fe4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
90012fe4:	b580      	push	{r7, lr}
90012fe6:	b088      	sub	sp, #32
90012fe8:	af04      	add	r7, sp, #16
90012fea:	60f8      	str	r0, [r7, #12]
90012fec:	60b9      	str	r1, [r7, #8]
90012fee:	4611      	mov	r1, r2
90012ff0:	461a      	mov	r2, r3
90012ff2:	460b      	mov	r3, r1
90012ff4:	80fb      	strh	r3, [r7, #6]
90012ff6:	4613      	mov	r3, r2
90012ff8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
90012ffa:	7979      	ldrb	r1, [r7, #5]
90012ffc:	2300      	movs	r3, #0
90012ffe:	9303      	str	r3, [sp, #12]
90013000:	88fb      	ldrh	r3, [r7, #6]
90013002:	9302      	str	r3, [sp, #8]
90013004:	68bb      	ldr	r3, [r7, #8]
90013006:	9301      	str	r3, [sp, #4]
90013008:	2301      	movs	r3, #1
9001300a:	9300      	str	r3, [sp, #0]
9001300c:	2302      	movs	r3, #2
9001300e:	2201      	movs	r2, #1
90013010:	68f8      	ldr	r0, [r7, #12]
90013012:	f7ee fdfc 	bl	90001c0e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
90013016:	2300      	movs	r3, #0
}
90013018:	4618      	mov	r0, r3
9001301a:	3710      	adds	r7, #16
9001301c:	46bd      	mov	sp, r7
9001301e:	bd80      	pop	{r7, pc}

90013020 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
90013020:	b580      	push	{r7, lr}
90013022:	b086      	sub	sp, #24
90013024:	af04      	add	r7, sp, #16
90013026:	6078      	str	r0, [r7, #4]
90013028:	4608      	mov	r0, r1
9001302a:	4611      	mov	r1, r2
9001302c:	461a      	mov	r2, r3
9001302e:	4603      	mov	r3, r0
90013030:	70fb      	strb	r3, [r7, #3]
90013032:	460b      	mov	r3, r1
90013034:	70bb      	strb	r3, [r7, #2]
90013036:	4613      	mov	r3, r2
90013038:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
9001303a:	7878      	ldrb	r0, [r7, #1]
9001303c:	78ba      	ldrb	r2, [r7, #2]
9001303e:	78f9      	ldrb	r1, [r7, #3]
90013040:	8b3b      	ldrh	r3, [r7, #24]
90013042:	9302      	str	r3, [sp, #8]
90013044:	7d3b      	ldrb	r3, [r7, #20]
90013046:	9301      	str	r3, [sp, #4]
90013048:	7c3b      	ldrb	r3, [r7, #16]
9001304a:	9300      	str	r3, [sp, #0]
9001304c:	4603      	mov	r3, r0
9001304e:	6878      	ldr	r0, [r7, #4]
90013050:	f7ee fda9 	bl	90001ba6 <USBH_LL_OpenPipe>

  return USBH_OK;
90013054:	2300      	movs	r3, #0
}
90013056:	4618      	mov	r0, r3
90013058:	3708      	adds	r7, #8
9001305a:	46bd      	mov	sp, r7
9001305c:	bd80      	pop	{r7, pc}

9001305e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
9001305e:	b580      	push	{r7, lr}
90013060:	b082      	sub	sp, #8
90013062:	af00      	add	r7, sp, #0
90013064:	6078      	str	r0, [r7, #4]
90013066:	460b      	mov	r3, r1
90013068:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
9001306a:	78fb      	ldrb	r3, [r7, #3]
9001306c:	4619      	mov	r1, r3
9001306e:	6878      	ldr	r0, [r7, #4]
90013070:	f7ee fdba 	bl	90001be8 <USBH_LL_ClosePipe>

  return USBH_OK;
90013074:	2300      	movs	r3, #0
}
90013076:	4618      	mov	r0, r3
90013078:	3708      	adds	r7, #8
9001307a:	46bd      	mov	sp, r7
9001307c:	bd80      	pop	{r7, pc}

9001307e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
9001307e:	b580      	push	{r7, lr}
90013080:	b084      	sub	sp, #16
90013082:	af00      	add	r7, sp, #0
90013084:	6078      	str	r0, [r7, #4]
90013086:	460b      	mov	r3, r1
90013088:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
9001308a:	6878      	ldr	r0, [r7, #4]
9001308c:	f000 f839 	bl	90013102 <USBH_GetFreePipe>
90013090:	4603      	mov	r3, r0
90013092:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
90013094:	89fb      	ldrh	r3, [r7, #14]
90013096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9001309a:	4293      	cmp	r3, r2
9001309c:	d00b      	beq.n	900130b6 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
9001309e:	78fa      	ldrb	r2, [r7, #3]
900130a0:	89fb      	ldrh	r3, [r7, #14]
900130a2:	f003 030f 	and.w	r3, r3, #15
900130a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
900130aa:	6879      	ldr	r1, [r7, #4]
900130ac:	f503 7390 	add.w	r3, r3, #288	@ 0x120
900130b0:	009b      	lsls	r3, r3, #2
900130b2:	440b      	add	r3, r1
900130b4:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
900130b6:	89fb      	ldrh	r3, [r7, #14]
900130b8:	b2db      	uxtb	r3, r3
}
900130ba:	4618      	mov	r0, r3
900130bc:	3710      	adds	r7, #16
900130be:	46bd      	mov	sp, r7
900130c0:	bd80      	pop	{r7, pc}

900130c2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
900130c2:	b480      	push	{r7}
900130c4:	b083      	sub	sp, #12
900130c6:	af00      	add	r7, sp, #0
900130c8:	6078      	str	r0, [r7, #4]
900130ca:	460b      	mov	r3, r1
900130cc:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
900130ce:	78fb      	ldrb	r3, [r7, #3]
900130d0:	2b0f      	cmp	r3, #15
900130d2:	d80f      	bhi.n	900130f4 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
900130d4:	78fb      	ldrb	r3, [r7, #3]
900130d6:	687a      	ldr	r2, [r7, #4]
900130d8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
900130dc:	009b      	lsls	r3, r3, #2
900130de:	4413      	add	r3, r2
900130e0:	685a      	ldr	r2, [r3, #4]
900130e2:	78fb      	ldrb	r3, [r7, #3]
900130e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
900130e8:	6879      	ldr	r1, [r7, #4]
900130ea:	f503 7390 	add.w	r3, r3, #288	@ 0x120
900130ee:	009b      	lsls	r3, r3, #2
900130f0:	440b      	add	r3, r1
900130f2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
900130f4:	2300      	movs	r3, #0
}
900130f6:	4618      	mov	r0, r3
900130f8:	370c      	adds	r7, #12
900130fa:	46bd      	mov	sp, r7
900130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
90013100:	4770      	bx	lr

90013102 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
90013102:	b480      	push	{r7}
90013104:	b085      	sub	sp, #20
90013106:	af00      	add	r7, sp, #0
90013108:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
9001310a:	2300      	movs	r3, #0
9001310c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
9001310e:	2300      	movs	r3, #0
90013110:	73fb      	strb	r3, [r7, #15]
90013112:	e010      	b.n	90013136 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
90013114:	7bfb      	ldrb	r3, [r7, #15]
90013116:	687a      	ldr	r2, [r7, #4]
90013118:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9001311c:	009b      	lsls	r3, r3, #2
9001311e:	4413      	add	r3, r2
90013120:	685b      	ldr	r3, [r3, #4]
90013122:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90013126:	2b00      	cmp	r3, #0
90013128:	d102      	bne.n	90013130 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
9001312a:	7bfb      	ldrb	r3, [r7, #15]
9001312c:	b29b      	uxth	r3, r3
9001312e:	e007      	b.n	90013140 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
90013130:	7bfb      	ldrb	r3, [r7, #15]
90013132:	3301      	adds	r3, #1
90013134:	73fb      	strb	r3, [r7, #15]
90013136:	7bfb      	ldrb	r3, [r7, #15]
90013138:	2b0f      	cmp	r3, #15
9001313a:	d9eb      	bls.n	90013114 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
9001313c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
90013140:	4618      	mov	r0, r3
90013142:	3714      	adds	r7, #20
90013144:	46bd      	mov	sp, r7
90013146:	f85d 7b04 	ldr.w	r7, [sp], #4
9001314a:	4770      	bx	lr

9001314c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9001314c:	b580      	push	{r7, lr}
9001314e:	b082      	sub	sp, #8
90013150:	af00      	add	r7, sp, #0
90013152:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
90013154:	687b      	ldr	r3, [r7, #4]
90013156:	681b      	ldr	r3, [r3, #0]
90013158:	4a22      	ldr	r2, [pc, #136]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
9001315a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9001315c:	687b      	ldr	r3, [r7, #4]
9001315e:	685b      	ldr	r3, [r3, #4]
90013160:	4a20      	ldr	r2, [pc, #128]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
90013162:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
90013164:	687b      	ldr	r3, [r7, #4]
90013166:	689b      	ldr	r3, [r3, #8]
90013168:	4a1e      	ldr	r2, [pc, #120]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
9001316a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9001316c:	687b      	ldr	r3, [r7, #4]
9001316e:	68db      	ldr	r3, [r3, #12]
90013170:	4a1c      	ldr	r2, [pc, #112]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
90013172:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
90013174:	687b      	ldr	r3, [r7, #4]
90013176:	691b      	ldr	r3, [r3, #16]
90013178:	4a1a      	ldr	r2, [pc, #104]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
9001317a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9001317c:	687b      	ldr	r3, [r7, #4]
9001317e:	695b      	ldr	r3, [r3, #20]
90013180:	4a18      	ldr	r2, [pc, #96]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
90013182:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
90013184:	687b      	ldr	r3, [r7, #4]
90013186:	699b      	ldr	r3, [r3, #24]
90013188:	4a16      	ldr	r2, [pc, #88]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
9001318a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9001318c:	687b      	ldr	r3, [r7, #4]
9001318e:	69db      	ldr	r3, [r3, #28]
90013190:	4a14      	ldr	r2, [pc, #80]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
90013192:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
90013194:	687b      	ldr	r3, [r7, #4]
90013196:	6a1b      	ldr	r3, [r3, #32]
90013198:	4a12      	ldr	r2, [pc, #72]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
9001319a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9001319c:	687b      	ldr	r3, [r7, #4]
9001319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900131a0:	4a10      	ldr	r2, [pc, #64]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
900131a2:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
900131a4:	687b      	ldr	r3, [r7, #4]
900131a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900131a8:	4a0e      	ldr	r2, [pc, #56]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
900131aa:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
900131ac:	4b0e      	ldr	r3, [pc, #56]	@ (900131e8 <UTIL_LCD_SetFuncDriver+0x9c>)
900131ae:	2200      	movs	r2, #0
900131b0:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
900131b2:	4b0d      	ldr	r3, [pc, #52]	@ (900131e8 <UTIL_LCD_SetFuncDriver+0x9c>)
900131b4:	2200      	movs	r2, #0
900131b6:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
900131b8:	4b0a      	ldr	r3, [pc, #40]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
900131ba:	69db      	ldr	r3, [r3, #28]
900131bc:	4a0b      	ldr	r2, [pc, #44]	@ (900131ec <UTIL_LCD_SetFuncDriver+0xa0>)
900131be:	4611      	mov	r1, r2
900131c0:	2000      	movs	r0, #0
900131c2:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
900131c4:	4b07      	ldr	r3, [pc, #28]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
900131c6:	6a1b      	ldr	r3, [r3, #32]
900131c8:	4a09      	ldr	r2, [pc, #36]	@ (900131f0 <UTIL_LCD_SetFuncDriver+0xa4>)
900131ca:	4611      	mov	r1, r2
900131cc:	2000      	movs	r0, #0
900131ce:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
900131d0:	4b04      	ldr	r3, [pc, #16]	@ (900131e4 <UTIL_LCD_SetFuncDriver+0x98>)
900131d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900131d4:	4a07      	ldr	r2, [pc, #28]	@ (900131f4 <UTIL_LCD_SetFuncDriver+0xa8>)
900131d6:	4611      	mov	r1, r2
900131d8:	2000      	movs	r0, #0
900131da:	4798      	blx	r3
}
900131dc:	bf00      	nop
900131de:	3708      	adds	r7, #8
900131e0:	46bd      	mov	sp, r7
900131e2:	bd80      	pop	{r7, pc}
900131e4:	20001efc 	.word	0x20001efc
900131e8:	20001ebc 	.word	0x20001ebc
900131ec:	20001ed0 	.word	0x20001ed0
900131f0:	20001ed4 	.word	0x20001ed4
900131f4:	20001ed8 	.word	0x20001ed8

900131f8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
900131f8:	b580      	push	{r7, lr}
900131fa:	b082      	sub	sp, #8
900131fc:	af00      	add	r7, sp, #0
900131fe:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
90013200:	4b0a      	ldr	r3, [pc, #40]	@ (9001322c <UTIL_LCD_SetLayer+0x34>)
90013202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90013204:	2b00      	cmp	r3, #0
90013206:	d00c      	beq.n	90013222 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
90013208:	4b08      	ldr	r3, [pc, #32]	@ (9001322c <UTIL_LCD_SetLayer+0x34>)
9001320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9001320c:	4a08      	ldr	r2, [pc, #32]	@ (90013230 <UTIL_LCD_SetLayer+0x38>)
9001320e:	6912      	ldr	r2, [r2, #16]
90013210:	6879      	ldr	r1, [r7, #4]
90013212:	4610      	mov	r0, r2
90013214:	4798      	blx	r3
90013216:	4603      	mov	r3, r0
90013218:	2b00      	cmp	r3, #0
9001321a:	d102      	bne.n	90013222 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9001321c:	4a04      	ldr	r2, [pc, #16]	@ (90013230 <UTIL_LCD_SetLayer+0x38>)
9001321e:	687b      	ldr	r3, [r7, #4]
90013220:	60d3      	str	r3, [r2, #12]
    }
  }
}
90013222:	bf00      	nop
90013224:	3708      	adds	r7, #8
90013226:	46bd      	mov	sp, r7
90013228:	bd80      	pop	{r7, pc}
9001322a:	bf00      	nop
9001322c:	20001efc 	.word	0x20001efc
90013230:	20001ebc 	.word	0x20001ebc

90013234 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
90013234:	b480      	push	{r7}
90013236:	b083      	sub	sp, #12
90013238:	af00      	add	r7, sp, #0
9001323a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9001323c:	4b06      	ldr	r3, [pc, #24]	@ (90013258 <UTIL_LCD_SetTextColor+0x24>)
9001323e:	68db      	ldr	r3, [r3, #12]
90013240:	4a05      	ldr	r2, [pc, #20]	@ (90013258 <UTIL_LCD_SetTextColor+0x24>)
90013242:	015b      	lsls	r3, r3, #5
90013244:	4413      	add	r3, r2
90013246:	687a      	ldr	r2, [r7, #4]
90013248:	601a      	str	r2, [r3, #0]
}
9001324a:	bf00      	nop
9001324c:	370c      	adds	r7, #12
9001324e:	46bd      	mov	sp, r7
90013250:	f85d 7b04 	ldr.w	r7, [sp], #4
90013254:	4770      	bx	lr
90013256:	bf00      	nop
90013258:	20001ebc 	.word	0x20001ebc

9001325c <UTIL_LCD_GetTextColor>:
/**
  * @brief  Gets the LCD text color.
  * @retval Used text color.
  */
uint32_t UTIL_LCD_GetTextColor(void)
{
9001325c:	b480      	push	{r7}
9001325e:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].TextColor;
90013260:	4b05      	ldr	r3, [pc, #20]	@ (90013278 <UTIL_LCD_GetTextColor+0x1c>)
90013262:	68db      	ldr	r3, [r3, #12]
90013264:	4a04      	ldr	r2, [pc, #16]	@ (90013278 <UTIL_LCD_GetTextColor+0x1c>)
90013266:	015b      	lsls	r3, r3, #5
90013268:	4413      	add	r3, r2
9001326a:	681b      	ldr	r3, [r3, #0]
}
9001326c:	4618      	mov	r0, r3
9001326e:	46bd      	mov	sp, r7
90013270:	f85d 7b04 	ldr.w	r7, [sp], #4
90013274:	4770      	bx	lr
90013276:	bf00      	nop
90013278:	20001ebc 	.word	0x20001ebc

9001327c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9001327c:	b480      	push	{r7}
9001327e:	b083      	sub	sp, #12
90013280:	af00      	add	r7, sp, #0
90013282:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
90013284:	4b06      	ldr	r3, [pc, #24]	@ (900132a0 <UTIL_LCD_SetBackColor+0x24>)
90013286:	68db      	ldr	r3, [r3, #12]
90013288:	4a05      	ldr	r2, [pc, #20]	@ (900132a0 <UTIL_LCD_SetBackColor+0x24>)
9001328a:	015b      	lsls	r3, r3, #5
9001328c:	4413      	add	r3, r2
9001328e:	3304      	adds	r3, #4
90013290:	687a      	ldr	r2, [r7, #4]
90013292:	601a      	str	r2, [r3, #0]
}
90013294:	bf00      	nop
90013296:	370c      	adds	r7, #12
90013298:	46bd      	mov	sp, r7
9001329a:	f85d 7b04 	ldr.w	r7, [sp], #4
9001329e:	4770      	bx	lr
900132a0:	20001ebc 	.word	0x20001ebc

900132a4 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
900132a4:	b480      	push	{r7}
900132a6:	b083      	sub	sp, #12
900132a8:	af00      	add	r7, sp, #0
900132aa:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
900132ac:	4b06      	ldr	r3, [pc, #24]	@ (900132c8 <UTIL_LCD_SetFont+0x24>)
900132ae:	68db      	ldr	r3, [r3, #12]
900132b0:	4a05      	ldr	r2, [pc, #20]	@ (900132c8 <UTIL_LCD_SetFont+0x24>)
900132b2:	015b      	lsls	r3, r3, #5
900132b4:	4413      	add	r3, r2
900132b6:	3308      	adds	r3, #8
900132b8:	687a      	ldr	r2, [r7, #4]
900132ba:	601a      	str	r2, [r3, #0]
}
900132bc:	bf00      	nop
900132be:	370c      	adds	r7, #12
900132c0:	46bd      	mov	sp, r7
900132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900132c6:	4770      	bx	lr
900132c8:	20001ebc 	.word	0x20001ebc

900132cc <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
900132cc:	b590      	push	{r4, r7, lr}
900132ce:	b087      	sub	sp, #28
900132d0:	af02      	add	r7, sp, #8
900132d2:	60f8      	str	r0, [r7, #12]
900132d4:	60b9      	str	r1, [r7, #8]
900132d6:	607a      	str	r2, [r7, #4]
900132d8:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
900132da:	4b08      	ldr	r3, [pc, #32]	@ (900132fc <UTIL_LCD_FillRGBRect+0x30>)
900132dc:	685c      	ldr	r4, [r3, #4]
900132de:	4b08      	ldr	r3, [pc, #32]	@ (90013300 <UTIL_LCD_FillRGBRect+0x34>)
900132e0:	6918      	ldr	r0, [r3, #16]
900132e2:	6a3b      	ldr	r3, [r7, #32]
900132e4:	9301      	str	r3, [sp, #4]
900132e6:	683b      	ldr	r3, [r7, #0]
900132e8:	9300      	str	r3, [sp, #0]
900132ea:	687b      	ldr	r3, [r7, #4]
900132ec:	68ba      	ldr	r2, [r7, #8]
900132ee:	68f9      	ldr	r1, [r7, #12]
900132f0:	47a0      	blx	r4
}
900132f2:	bf00      	nop
900132f4:	3714      	adds	r7, #20
900132f6:	46bd      	mov	sp, r7
900132f8:	bd90      	pop	{r4, r7, pc}
900132fa:	bf00      	nop
900132fc:	20001efc 	.word	0x20001efc
90013300:	20001ebc 	.word	0x20001ebc

90013304 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90013304:	b590      	push	{r4, r7, lr}
90013306:	b087      	sub	sp, #28
90013308:	af02      	add	r7, sp, #8
9001330a:	60f8      	str	r0, [r7, #12]
9001330c:	60b9      	str	r1, [r7, #8]
9001330e:	607a      	str	r2, [r7, #4]
90013310:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
90013312:	4b15      	ldr	r3, [pc, #84]	@ (90013368 <UTIL_LCD_DrawHLine+0x64>)
90013314:	69db      	ldr	r3, [r3, #28]
90013316:	2b02      	cmp	r3, #2
90013318:	d118      	bne.n	9001334c <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
9001331a:	4b14      	ldr	r3, [pc, #80]	@ (9001336c <UTIL_LCD_DrawHLine+0x68>)
9001331c:	689c      	ldr	r4, [r3, #8]
9001331e:	4b12      	ldr	r3, [pc, #72]	@ (90013368 <UTIL_LCD_DrawHLine+0x64>)
90013320:	6918      	ldr	r0, [r3, #16]
90013322:	683b      	ldr	r3, [r7, #0]
90013324:	08db      	lsrs	r3, r3, #3
90013326:	f003 021f 	and.w	r2, r3, #31
9001332a:	683b      	ldr	r3, [r7, #0]
9001332c:	0a9b      	lsrs	r3, r3, #10
9001332e:	015b      	lsls	r3, r3, #5
90013330:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
90013334:	431a      	orrs	r2, r3
90013336:	683b      	ldr	r3, [r7, #0]
90013338:	0cdb      	lsrs	r3, r3, #19
9001333a:	02db      	lsls	r3, r3, #11
9001333c:	b29b      	uxth	r3, r3
9001333e:	4313      	orrs	r3, r2
90013340:	9300      	str	r3, [sp, #0]
90013342:	687b      	ldr	r3, [r7, #4]
90013344:	68ba      	ldr	r2, [r7, #8]
90013346:	68f9      	ldr	r1, [r7, #12]
90013348:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
9001334a:	e009      	b.n	90013360 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
9001334c:	4b07      	ldr	r3, [pc, #28]	@ (9001336c <UTIL_LCD_DrawHLine+0x68>)
9001334e:	689c      	ldr	r4, [r3, #8]
90013350:	4b05      	ldr	r3, [pc, #20]	@ (90013368 <UTIL_LCD_DrawHLine+0x64>)
90013352:	6918      	ldr	r0, [r3, #16]
90013354:	683b      	ldr	r3, [r7, #0]
90013356:	9300      	str	r3, [sp, #0]
90013358:	687b      	ldr	r3, [r7, #4]
9001335a:	68ba      	ldr	r2, [r7, #8]
9001335c:	68f9      	ldr	r1, [r7, #12]
9001335e:	47a0      	blx	r4
}
90013360:	bf00      	nop
90013362:	3714      	adds	r7, #20
90013364:	46bd      	mov	sp, r7
90013366:	bd90      	pop	{r4, r7, pc}
90013368:	20001ebc 	.word	0x20001ebc
9001336c:	20001efc 	.word	0x20001efc

90013370 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90013370:	b590      	push	{r4, r7, lr}
90013372:	b087      	sub	sp, #28
90013374:	af02      	add	r7, sp, #8
90013376:	60f8      	str	r0, [r7, #12]
90013378:	60b9      	str	r1, [r7, #8]
9001337a:	607a      	str	r2, [r7, #4]
9001337c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9001337e:	4b15      	ldr	r3, [pc, #84]	@ (900133d4 <UTIL_LCD_DrawVLine+0x64>)
90013380:	69db      	ldr	r3, [r3, #28]
90013382:	2b02      	cmp	r3, #2
90013384:	d118      	bne.n	900133b8 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
90013386:	4b14      	ldr	r3, [pc, #80]	@ (900133d8 <UTIL_LCD_DrawVLine+0x68>)
90013388:	68dc      	ldr	r4, [r3, #12]
9001338a:	4b12      	ldr	r3, [pc, #72]	@ (900133d4 <UTIL_LCD_DrawVLine+0x64>)
9001338c:	6918      	ldr	r0, [r3, #16]
9001338e:	683b      	ldr	r3, [r7, #0]
90013390:	08db      	lsrs	r3, r3, #3
90013392:	f003 021f 	and.w	r2, r3, #31
90013396:	683b      	ldr	r3, [r7, #0]
90013398:	0a9b      	lsrs	r3, r3, #10
9001339a:	015b      	lsls	r3, r3, #5
9001339c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
900133a0:	431a      	orrs	r2, r3
900133a2:	683b      	ldr	r3, [r7, #0]
900133a4:	0cdb      	lsrs	r3, r3, #19
900133a6:	02db      	lsls	r3, r3, #11
900133a8:	b29b      	uxth	r3, r3
900133aa:	4313      	orrs	r3, r2
900133ac:	9300      	str	r3, [sp, #0]
900133ae:	687b      	ldr	r3, [r7, #4]
900133b0:	68ba      	ldr	r2, [r7, #8]
900133b2:	68f9      	ldr	r1, [r7, #12]
900133b4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
900133b6:	e009      	b.n	900133cc <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
900133b8:	4b07      	ldr	r3, [pc, #28]	@ (900133d8 <UTIL_LCD_DrawVLine+0x68>)
900133ba:	68dc      	ldr	r4, [r3, #12]
900133bc:	4b05      	ldr	r3, [pc, #20]	@ (900133d4 <UTIL_LCD_DrawVLine+0x64>)
900133be:	6918      	ldr	r0, [r3, #16]
900133c0:	683b      	ldr	r3, [r7, #0]
900133c2:	9300      	str	r3, [sp, #0]
900133c4:	687b      	ldr	r3, [r7, #4]
900133c6:	68ba      	ldr	r2, [r7, #8]
900133c8:	68f9      	ldr	r1, [r7, #12]
900133ca:	47a0      	blx	r4
}
900133cc:	bf00      	nop
900133ce:	3714      	adds	r7, #20
900133d0:	46bd      	mov	sp, r7
900133d2:	bd90      	pop	{r4, r7, pc}
900133d4:	20001ebc 	.word	0x20001ebc
900133d8:	20001efc 	.word	0x20001efc

900133dc <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
900133dc:	b5b0      	push	{r4, r5, r7, lr}
900133de:	b082      	sub	sp, #8
900133e0:	af00      	add	r7, sp, #0
900133e2:	4603      	mov	r3, r0
900133e4:	603a      	str	r2, [r7, #0]
900133e6:	80fb      	strh	r3, [r7, #6]
900133e8:	460b      	mov	r3, r1
900133ea:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
900133ec:	4b13      	ldr	r3, [pc, #76]	@ (9001343c <UTIL_LCD_SetPixel+0x60>)
900133ee:	69db      	ldr	r3, [r3, #28]
900133f0:	2b02      	cmp	r3, #2
900133f2:	d117      	bne.n	90013424 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
900133f4:	4b12      	ldr	r3, [pc, #72]	@ (90013440 <UTIL_LCD_SetPixel+0x64>)
900133f6:	699c      	ldr	r4, [r3, #24]
900133f8:	4b10      	ldr	r3, [pc, #64]	@ (9001343c <UTIL_LCD_SetPixel+0x60>)
900133fa:	6918      	ldr	r0, [r3, #16]
900133fc:	88f9      	ldrh	r1, [r7, #6]
900133fe:	88bd      	ldrh	r5, [r7, #4]
90013400:	683b      	ldr	r3, [r7, #0]
90013402:	08db      	lsrs	r3, r3, #3
90013404:	f003 021f 	and.w	r2, r3, #31
90013408:	683b      	ldr	r3, [r7, #0]
9001340a:	0a9b      	lsrs	r3, r3, #10
9001340c:	015b      	lsls	r3, r3, #5
9001340e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
90013412:	431a      	orrs	r2, r3
90013414:	683b      	ldr	r3, [r7, #0]
90013416:	0cdb      	lsrs	r3, r3, #19
90013418:	02db      	lsls	r3, r3, #11
9001341a:	b29b      	uxth	r3, r3
9001341c:	4313      	orrs	r3, r2
9001341e:	462a      	mov	r2, r5
90013420:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
90013422:	e007      	b.n	90013434 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
90013424:	4b06      	ldr	r3, [pc, #24]	@ (90013440 <UTIL_LCD_SetPixel+0x64>)
90013426:	699c      	ldr	r4, [r3, #24]
90013428:	4b04      	ldr	r3, [pc, #16]	@ (9001343c <UTIL_LCD_SetPixel+0x60>)
9001342a:	6918      	ldr	r0, [r3, #16]
9001342c:	88f9      	ldrh	r1, [r7, #6]
9001342e:	88ba      	ldrh	r2, [r7, #4]
90013430:	683b      	ldr	r3, [r7, #0]
90013432:	47a0      	blx	r4
}
90013434:	bf00      	nop
90013436:	3708      	adds	r7, #8
90013438:	46bd      	mov	sp, r7
9001343a:	bdb0      	pop	{r4, r5, r7, pc}
9001343c:	20001ebc 	.word	0x20001ebc
90013440:	20001efc 	.word	0x20001efc

90013444 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
90013444:	b580      	push	{r7, lr}
90013446:	b084      	sub	sp, #16
90013448:	af02      	add	r7, sp, #8
9001344a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9001344c:	4b07      	ldr	r3, [pc, #28]	@ (9001346c <UTIL_LCD_Clear+0x28>)
9001344e:	695a      	ldr	r2, [r3, #20]
90013450:	4b06      	ldr	r3, [pc, #24]	@ (9001346c <UTIL_LCD_Clear+0x28>)
90013452:	6999      	ldr	r1, [r3, #24]
90013454:	687b      	ldr	r3, [r7, #4]
90013456:	9300      	str	r3, [sp, #0]
90013458:	460b      	mov	r3, r1
9001345a:	2100      	movs	r1, #0
9001345c:	2000      	movs	r0, #0
9001345e:	f000 fa1f 	bl	900138a0 <UTIL_LCD_FillRect>
}
90013462:	bf00      	nop
90013464:	3708      	adds	r7, #8
90013466:	46bd      	mov	sp, r7
90013468:	bd80      	pop	{r7, pc}
9001346a:	bf00      	nop
9001346c:	20001ebc 	.word	0x20001ebc

90013470 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
90013470:	b580      	push	{r7, lr}
90013472:	b084      	sub	sp, #16
90013474:	af00      	add	r7, sp, #0
90013476:	60f8      	str	r0, [r7, #12]
90013478:	60b9      	str	r1, [r7, #8]
9001347a:	4613      	mov	r3, r2
9001347c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9001347e:	4b16      	ldr	r3, [pc, #88]	@ (900134d8 <UTIL_LCD_DisplayChar+0x68>)
90013480:	68db      	ldr	r3, [r3, #12]
90013482:	4a15      	ldr	r2, [pc, #84]	@ (900134d8 <UTIL_LCD_DisplayChar+0x68>)
90013484:	015b      	lsls	r3, r3, #5
90013486:	4413      	add	r3, r2
90013488:	3308      	adds	r3, #8
9001348a:	681b      	ldr	r3, [r3, #0]
9001348c:	681a      	ldr	r2, [r3, #0]
9001348e:	79fb      	ldrb	r3, [r7, #7]
90013490:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
90013492:	4911      	ldr	r1, [pc, #68]	@ (900134d8 <UTIL_LCD_DisplayChar+0x68>)
90013494:	68c9      	ldr	r1, [r1, #12]
90013496:	4810      	ldr	r0, [pc, #64]	@ (900134d8 <UTIL_LCD_DisplayChar+0x68>)
90013498:	0149      	lsls	r1, r1, #5
9001349a:	4401      	add	r1, r0
9001349c:	3108      	adds	r1, #8
9001349e:	6809      	ldr	r1, [r1, #0]
900134a0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
900134a2:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
900134a6:	4b0c      	ldr	r3, [pc, #48]	@ (900134d8 <UTIL_LCD_DisplayChar+0x68>)
900134a8:	68db      	ldr	r3, [r3, #12]
900134aa:	480b      	ldr	r0, [pc, #44]	@ (900134d8 <UTIL_LCD_DisplayChar+0x68>)
900134ac:	015b      	lsls	r3, r3, #5
900134ae:	4403      	add	r3, r0
900134b0:	3308      	adds	r3, #8
900134b2:	681b      	ldr	r3, [r3, #0]
900134b4:	889b      	ldrh	r3, [r3, #4]
900134b6:	3307      	adds	r3, #7
900134b8:	2b00      	cmp	r3, #0
900134ba:	da00      	bge.n	900134be <UTIL_LCD_DisplayChar+0x4e>
900134bc:	3307      	adds	r3, #7
900134be:	10db      	asrs	r3, r3, #3
900134c0:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
900134c4:	4413      	add	r3, r2
900134c6:	461a      	mov	r2, r3
900134c8:	68b9      	ldr	r1, [r7, #8]
900134ca:	68f8      	ldr	r0, [r7, #12]
900134cc:	f000 face 	bl	90013a6c <DrawChar>
}
900134d0:	bf00      	nop
900134d2:	3710      	adds	r7, #16
900134d4:	46bd      	mov	sp, r7
900134d6:	bd80      	pop	{r7, pc}
900134d8:	20001ebc 	.word	0x20001ebc

900134dc <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
900134dc:	b580      	push	{r7, lr}
900134de:	b08a      	sub	sp, #40	@ 0x28
900134e0:	af00      	add	r7, sp, #0
900134e2:	60f8      	str	r0, [r7, #12]
900134e4:	60b9      	str	r1, [r7, #8]
900134e6:	607a      	str	r2, [r7, #4]
900134e8:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
900134ea:	2301      	movs	r3, #1
900134ec:	627b      	str	r3, [r7, #36]	@ 0x24
900134ee:	2300      	movs	r3, #0
900134f0:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
900134f2:	2300      	movs	r3, #0
900134f4:	61fb      	str	r3, [r7, #28]
900134f6:	2300      	movs	r3, #0
900134f8:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
900134fa:	687b      	ldr	r3, [r7, #4]
900134fc:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
900134fe:	e002      	b.n	90013506 <UTIL_LCD_DisplayStringAt+0x2a>
90013500:	69fb      	ldr	r3, [r7, #28]
90013502:	3301      	adds	r3, #1
90013504:	61fb      	str	r3, [r7, #28]
90013506:	69bb      	ldr	r3, [r7, #24]
90013508:	1c5a      	adds	r2, r3, #1
9001350a:	61ba      	str	r2, [r7, #24]
9001350c:	781b      	ldrb	r3, [r3, #0]
9001350e:	2b00      	cmp	r3, #0
90013510:	d1f6      	bne.n	90013500 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
90013512:	4b48      	ldr	r3, [pc, #288]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
90013514:	695b      	ldr	r3, [r3, #20]
90013516:	4a47      	ldr	r2, [pc, #284]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
90013518:	68d2      	ldr	r2, [r2, #12]
9001351a:	4946      	ldr	r1, [pc, #280]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
9001351c:	0152      	lsls	r2, r2, #5
9001351e:	440a      	add	r2, r1
90013520:	3208      	adds	r2, #8
90013522:	6812      	ldr	r2, [r2, #0]
90013524:	8892      	ldrh	r2, [r2, #4]
90013526:	fbb3 f3f2 	udiv	r3, r3, r2
9001352a:	617b      	str	r3, [r7, #20]

  switch (Mode)
9001352c:	78fb      	ldrb	r3, [r7, #3]
9001352e:	2b03      	cmp	r3, #3
90013530:	d018      	beq.n	90013564 <UTIL_LCD_DisplayStringAt+0x88>
90013532:	2b03      	cmp	r3, #3
90013534:	dc2a      	bgt.n	9001358c <UTIL_LCD_DisplayStringAt+0xb0>
90013536:	2b01      	cmp	r3, #1
90013538:	d002      	beq.n	90013540 <UTIL_LCD_DisplayStringAt+0x64>
9001353a:	2b02      	cmp	r3, #2
9001353c:	d015      	beq.n	9001356a <UTIL_LCD_DisplayStringAt+0x8e>
9001353e:	e025      	b.n	9001358c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
90013540:	697a      	ldr	r2, [r7, #20]
90013542:	69fb      	ldr	r3, [r7, #28]
90013544:	1ad3      	subs	r3, r2, r3
90013546:	4a3b      	ldr	r2, [pc, #236]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
90013548:	68d2      	ldr	r2, [r2, #12]
9001354a:	493a      	ldr	r1, [pc, #232]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
9001354c:	0152      	lsls	r2, r2, #5
9001354e:	440a      	add	r2, r1
90013550:	3208      	adds	r2, #8
90013552:	6812      	ldr	r2, [r2, #0]
90013554:	8892      	ldrh	r2, [r2, #4]
90013556:	fb02 f303 	mul.w	r3, r2, r3
9001355a:	085b      	lsrs	r3, r3, #1
9001355c:	68fa      	ldr	r2, [r7, #12]
9001355e:	4413      	add	r3, r2
90013560:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
90013562:	e016      	b.n	90013592 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
90013564:	68fb      	ldr	r3, [r7, #12]
90013566:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
90013568:	e013      	b.n	90013592 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9001356a:	697a      	ldr	r2, [r7, #20]
9001356c:	69fb      	ldr	r3, [r7, #28]
9001356e:	1ad3      	subs	r3, r2, r3
90013570:	4a30      	ldr	r2, [pc, #192]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
90013572:	68d2      	ldr	r2, [r2, #12]
90013574:	492f      	ldr	r1, [pc, #188]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
90013576:	0152      	lsls	r2, r2, #5
90013578:	440a      	add	r2, r1
9001357a:	3208      	adds	r2, #8
9001357c:	6812      	ldr	r2, [r2, #0]
9001357e:	8892      	ldrh	r2, [r2, #4]
90013580:	fb03 f202 	mul.w	r2, r3, r2
90013584:	68fb      	ldr	r3, [r7, #12]
90013586:	1ad3      	subs	r3, r2, r3
90013588:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9001358a:	e002      	b.n	90013592 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9001358c:	68fb      	ldr	r3, [r7, #12]
9001358e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
90013590:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
90013592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90013594:	2b00      	cmp	r3, #0
90013596:	d003      	beq.n	900135a0 <UTIL_LCD_DisplayStringAt+0xc4>
90013598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9001359a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9001359e:	d31b      	bcc.n	900135d8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
900135a0:	2301      	movs	r3, #1
900135a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
900135a4:	e018      	b.n	900135d8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
900135a6:	687b      	ldr	r3, [r7, #4]
900135a8:	781b      	ldrb	r3, [r3, #0]
900135aa:	461a      	mov	r2, r3
900135ac:	68b9      	ldr	r1, [r7, #8]
900135ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
900135b0:	f7ff ff5e 	bl	90013470 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
900135b4:	4b1f      	ldr	r3, [pc, #124]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
900135b6:	68db      	ldr	r3, [r3, #12]
900135b8:	4a1e      	ldr	r2, [pc, #120]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
900135ba:	015b      	lsls	r3, r3, #5
900135bc:	4413      	add	r3, r2
900135be:	3308      	adds	r3, #8
900135c0:	681b      	ldr	r3, [r3, #0]
900135c2:	889b      	ldrh	r3, [r3, #4]
900135c4:	461a      	mov	r2, r3
900135c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900135c8:	4413      	add	r3, r2
900135ca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
900135cc:	687b      	ldr	r3, [r7, #4]
900135ce:	3301      	adds	r3, #1
900135d0:	607b      	str	r3, [r7, #4]
    i++;
900135d2:	6a3b      	ldr	r3, [r7, #32]
900135d4:	3301      	adds	r3, #1
900135d6:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
900135d8:	687b      	ldr	r3, [r7, #4]
900135da:	781b      	ldrb	r3, [r3, #0]
900135dc:	2b00      	cmp	r3, #0
900135de:	bf14      	ite	ne
900135e0:	2301      	movne	r3, #1
900135e2:	2300      	moveq	r3, #0
900135e4:	b2da      	uxtb	r2, r3
900135e6:	4b13      	ldr	r3, [pc, #76]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
900135e8:	6959      	ldr	r1, [r3, #20]
900135ea:	4b12      	ldr	r3, [pc, #72]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
900135ec:	68db      	ldr	r3, [r3, #12]
900135ee:	4811      	ldr	r0, [pc, #68]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
900135f0:	015b      	lsls	r3, r3, #5
900135f2:	4403      	add	r3, r0
900135f4:	3308      	adds	r3, #8
900135f6:	681b      	ldr	r3, [r3, #0]
900135f8:	889b      	ldrh	r3, [r3, #4]
900135fa:	4618      	mov	r0, r3
900135fc:	6a3b      	ldr	r3, [r7, #32]
900135fe:	fb00 f303 	mul.w	r3, r0, r3
90013602:	1acb      	subs	r3, r1, r3
90013604:	b29b      	uxth	r3, r3
90013606:	490b      	ldr	r1, [pc, #44]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
90013608:	68c9      	ldr	r1, [r1, #12]
9001360a:	480a      	ldr	r0, [pc, #40]	@ (90013634 <UTIL_LCD_DisplayStringAt+0x158>)
9001360c:	0149      	lsls	r1, r1, #5
9001360e:	4401      	add	r1, r0
90013610:	3108      	adds	r1, #8
90013612:	6809      	ldr	r1, [r1, #0]
90013614:	8889      	ldrh	r1, [r1, #4]
90013616:	428b      	cmp	r3, r1
90013618:	bf2c      	ite	cs
9001361a:	2301      	movcs	r3, #1
9001361c:	2300      	movcc	r3, #0
9001361e:	b2db      	uxtb	r3, r3
90013620:	4013      	ands	r3, r2
90013622:	b2db      	uxtb	r3, r3
90013624:	2b00      	cmp	r3, #0
90013626:	d1be      	bne.n	900135a6 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
90013628:	bf00      	nop
9001362a:	bf00      	nop
9001362c:	3728      	adds	r7, #40	@ 0x28
9001362e:	46bd      	mov	sp, r7
90013630:	bd80      	pop	{r7, pc}
90013632:	bf00      	nop
90013634:	20001ebc 	.word	0x20001ebc

90013638 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90013638:	b580      	push	{r7, lr}
9001363a:	b084      	sub	sp, #16
9001363c:	af00      	add	r7, sp, #0
9001363e:	60f8      	str	r0, [r7, #12]
90013640:	60b9      	str	r1, [r7, #8]
90013642:	607a      	str	r2, [r7, #4]
90013644:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
90013646:	69bb      	ldr	r3, [r7, #24]
90013648:	687a      	ldr	r2, [r7, #4]
9001364a:	68b9      	ldr	r1, [r7, #8]
9001364c:	68f8      	ldr	r0, [r7, #12]
9001364e:	f7ff fe59 	bl	90013304 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
90013652:	68ba      	ldr	r2, [r7, #8]
90013654:	683b      	ldr	r3, [r7, #0]
90013656:	4413      	add	r3, r2
90013658:	1e59      	subs	r1, r3, #1
9001365a:	69bb      	ldr	r3, [r7, #24]
9001365c:	687a      	ldr	r2, [r7, #4]
9001365e:	68f8      	ldr	r0, [r7, #12]
90013660:	f7ff fe50 	bl	90013304 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
90013664:	69bb      	ldr	r3, [r7, #24]
90013666:	683a      	ldr	r2, [r7, #0]
90013668:	68b9      	ldr	r1, [r7, #8]
9001366a:	68f8      	ldr	r0, [r7, #12]
9001366c:	f7ff fe80 	bl	90013370 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
90013670:	68fa      	ldr	r2, [r7, #12]
90013672:	687b      	ldr	r3, [r7, #4]
90013674:	4413      	add	r3, r2
90013676:	1e58      	subs	r0, r3, #1
90013678:	69bb      	ldr	r3, [r7, #24]
9001367a:	683a      	ldr	r2, [r7, #0]
9001367c:	68b9      	ldr	r1, [r7, #8]
9001367e:	f7ff fe77 	bl	90013370 <UTIL_LCD_DrawVLine>
}
90013682:	bf00      	nop
90013684:	3710      	adds	r7, #16
90013686:	46bd      	mov	sp, r7
90013688:	bd80      	pop	{r7, pc}
	...

9001368c <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
9001368c:	b580      	push	{r7, lr}
9001368e:	b088      	sub	sp, #32
90013690:	af00      	add	r7, sp, #0
90013692:	60f8      	str	r0, [r7, #12]
90013694:	60b9      	str	r1, [r7, #8]
90013696:	607a      	str	r2, [r7, #4]
90013698:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
9001369a:	687b      	ldr	r3, [r7, #4]
9001369c:	005b      	lsls	r3, r3, #1
9001369e:	f1c3 0303 	rsb	r3, r3, #3
900136a2:	61fb      	str	r3, [r7, #28]
  current_x = 0;
900136a4:	2300      	movs	r3, #0
900136a6:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
900136a8:	687b      	ldr	r3, [r7, #4]
900136aa:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
900136ac:	e0eb      	b.n	90013886 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
900136ae:	68ba      	ldr	r2, [r7, #8]
900136b0:	697b      	ldr	r3, [r7, #20]
900136b2:	1ad2      	subs	r2, r2, r3
900136b4:	4b79      	ldr	r3, [pc, #484]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
900136b6:	699b      	ldr	r3, [r3, #24]
900136b8:	429a      	cmp	r2, r3
900136ba:	d22d      	bcs.n	90013718 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
900136bc:	68fa      	ldr	r2, [r7, #12]
900136be:	69bb      	ldr	r3, [r7, #24]
900136c0:	441a      	add	r2, r3
900136c2:	4b76      	ldr	r3, [pc, #472]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
900136c4:	695b      	ldr	r3, [r3, #20]
900136c6:	429a      	cmp	r2, r3
900136c8:	d20f      	bcs.n	900136ea <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
900136ca:	68fb      	ldr	r3, [r7, #12]
900136cc:	b29a      	uxth	r2, r3
900136ce:	69bb      	ldr	r3, [r7, #24]
900136d0:	b29b      	uxth	r3, r3
900136d2:	4413      	add	r3, r2
900136d4:	b298      	uxth	r0, r3
900136d6:	68bb      	ldr	r3, [r7, #8]
900136d8:	b29a      	uxth	r2, r3
900136da:	697b      	ldr	r3, [r7, #20]
900136dc:	b29b      	uxth	r3, r3
900136de:	1ad3      	subs	r3, r2, r3
900136e0:	b29b      	uxth	r3, r3
900136e2:	683a      	ldr	r2, [r7, #0]
900136e4:	4619      	mov	r1, r3
900136e6:	f7ff fe79 	bl	900133dc <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
900136ea:	68fa      	ldr	r2, [r7, #12]
900136ec:	69bb      	ldr	r3, [r7, #24]
900136ee:	1ad2      	subs	r2, r2, r3
900136f0:	4b6a      	ldr	r3, [pc, #424]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
900136f2:	695b      	ldr	r3, [r3, #20]
900136f4:	429a      	cmp	r2, r3
900136f6:	d20f      	bcs.n	90013718 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
900136f8:	68fb      	ldr	r3, [r7, #12]
900136fa:	b29a      	uxth	r2, r3
900136fc:	69bb      	ldr	r3, [r7, #24]
900136fe:	b29b      	uxth	r3, r3
90013700:	1ad3      	subs	r3, r2, r3
90013702:	b298      	uxth	r0, r3
90013704:	68bb      	ldr	r3, [r7, #8]
90013706:	b29a      	uxth	r2, r3
90013708:	697b      	ldr	r3, [r7, #20]
9001370a:	b29b      	uxth	r3, r3
9001370c:	1ad3      	subs	r3, r2, r3
9001370e:	b29b      	uxth	r3, r3
90013710:	683a      	ldr	r2, [r7, #0]
90013712:	4619      	mov	r1, r3
90013714:	f7ff fe62 	bl	900133dc <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
90013718:	68ba      	ldr	r2, [r7, #8]
9001371a:	69bb      	ldr	r3, [r7, #24]
9001371c:	1ad2      	subs	r2, r2, r3
9001371e:	4b5f      	ldr	r3, [pc, #380]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
90013720:	699b      	ldr	r3, [r3, #24]
90013722:	429a      	cmp	r2, r3
90013724:	d22d      	bcs.n	90013782 <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
90013726:	68fa      	ldr	r2, [r7, #12]
90013728:	697b      	ldr	r3, [r7, #20]
9001372a:	441a      	add	r2, r3
9001372c:	4b5b      	ldr	r3, [pc, #364]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
9001372e:	695b      	ldr	r3, [r3, #20]
90013730:	429a      	cmp	r2, r3
90013732:	d20f      	bcs.n	90013754 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
90013734:	68fb      	ldr	r3, [r7, #12]
90013736:	b29a      	uxth	r2, r3
90013738:	697b      	ldr	r3, [r7, #20]
9001373a:	b29b      	uxth	r3, r3
9001373c:	4413      	add	r3, r2
9001373e:	b298      	uxth	r0, r3
90013740:	68bb      	ldr	r3, [r7, #8]
90013742:	b29a      	uxth	r2, r3
90013744:	69bb      	ldr	r3, [r7, #24]
90013746:	b29b      	uxth	r3, r3
90013748:	1ad3      	subs	r3, r2, r3
9001374a:	b29b      	uxth	r3, r3
9001374c:	683a      	ldr	r2, [r7, #0]
9001374e:	4619      	mov	r1, r3
90013750:	f7ff fe44 	bl	900133dc <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
90013754:	68fa      	ldr	r2, [r7, #12]
90013756:	697b      	ldr	r3, [r7, #20]
90013758:	1ad2      	subs	r2, r2, r3
9001375a:	4b50      	ldr	r3, [pc, #320]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
9001375c:	695b      	ldr	r3, [r3, #20]
9001375e:	429a      	cmp	r2, r3
90013760:	d20f      	bcs.n	90013782 <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
90013762:	68fb      	ldr	r3, [r7, #12]
90013764:	b29a      	uxth	r2, r3
90013766:	697b      	ldr	r3, [r7, #20]
90013768:	b29b      	uxth	r3, r3
9001376a:	1ad3      	subs	r3, r2, r3
9001376c:	b298      	uxth	r0, r3
9001376e:	68bb      	ldr	r3, [r7, #8]
90013770:	b29a      	uxth	r2, r3
90013772:	69bb      	ldr	r3, [r7, #24]
90013774:	b29b      	uxth	r3, r3
90013776:	1ad3      	subs	r3, r2, r3
90013778:	b29b      	uxth	r3, r3
9001377a:	683a      	ldr	r2, [r7, #0]
9001377c:	4619      	mov	r1, r3
9001377e:	f7ff fe2d 	bl	900133dc <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
90013782:	68ba      	ldr	r2, [r7, #8]
90013784:	697b      	ldr	r3, [r7, #20]
90013786:	441a      	add	r2, r3
90013788:	4b44      	ldr	r3, [pc, #272]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
9001378a:	699b      	ldr	r3, [r3, #24]
9001378c:	429a      	cmp	r2, r3
9001378e:	d22d      	bcs.n	900137ec <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
90013790:	68fa      	ldr	r2, [r7, #12]
90013792:	69bb      	ldr	r3, [r7, #24]
90013794:	441a      	add	r2, r3
90013796:	4b41      	ldr	r3, [pc, #260]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
90013798:	695b      	ldr	r3, [r3, #20]
9001379a:	429a      	cmp	r2, r3
9001379c:	d20f      	bcs.n	900137be <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
9001379e:	68fb      	ldr	r3, [r7, #12]
900137a0:	b29a      	uxth	r2, r3
900137a2:	69bb      	ldr	r3, [r7, #24]
900137a4:	b29b      	uxth	r3, r3
900137a6:	4413      	add	r3, r2
900137a8:	b298      	uxth	r0, r3
900137aa:	68bb      	ldr	r3, [r7, #8]
900137ac:	b29a      	uxth	r2, r3
900137ae:	697b      	ldr	r3, [r7, #20]
900137b0:	b29b      	uxth	r3, r3
900137b2:	4413      	add	r3, r2
900137b4:	b29b      	uxth	r3, r3
900137b6:	683a      	ldr	r2, [r7, #0]
900137b8:	4619      	mov	r1, r3
900137ba:	f7ff fe0f 	bl	900133dc <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
900137be:	68fa      	ldr	r2, [r7, #12]
900137c0:	69bb      	ldr	r3, [r7, #24]
900137c2:	1ad2      	subs	r2, r2, r3
900137c4:	4b35      	ldr	r3, [pc, #212]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
900137c6:	695b      	ldr	r3, [r3, #20]
900137c8:	429a      	cmp	r2, r3
900137ca:	d20f      	bcs.n	900137ec <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
900137cc:	68fb      	ldr	r3, [r7, #12]
900137ce:	b29a      	uxth	r2, r3
900137d0:	69bb      	ldr	r3, [r7, #24]
900137d2:	b29b      	uxth	r3, r3
900137d4:	1ad3      	subs	r3, r2, r3
900137d6:	b298      	uxth	r0, r3
900137d8:	68bb      	ldr	r3, [r7, #8]
900137da:	b29a      	uxth	r2, r3
900137dc:	697b      	ldr	r3, [r7, #20]
900137de:	b29b      	uxth	r3, r3
900137e0:	4413      	add	r3, r2
900137e2:	b29b      	uxth	r3, r3
900137e4:	683a      	ldr	r2, [r7, #0]
900137e6:	4619      	mov	r1, r3
900137e8:	f7ff fdf8 	bl	900133dc <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
900137ec:	68ba      	ldr	r2, [r7, #8]
900137ee:	69bb      	ldr	r3, [r7, #24]
900137f0:	441a      	add	r2, r3
900137f2:	4b2a      	ldr	r3, [pc, #168]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
900137f4:	699b      	ldr	r3, [r3, #24]
900137f6:	429a      	cmp	r2, r3
900137f8:	d22d      	bcs.n	90013856 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
900137fa:	68fa      	ldr	r2, [r7, #12]
900137fc:	697b      	ldr	r3, [r7, #20]
900137fe:	441a      	add	r2, r3
90013800:	4b26      	ldr	r3, [pc, #152]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
90013802:	695b      	ldr	r3, [r3, #20]
90013804:	429a      	cmp	r2, r3
90013806:	d20f      	bcs.n	90013828 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
90013808:	68fb      	ldr	r3, [r7, #12]
9001380a:	b29a      	uxth	r2, r3
9001380c:	697b      	ldr	r3, [r7, #20]
9001380e:	b29b      	uxth	r3, r3
90013810:	4413      	add	r3, r2
90013812:	b298      	uxth	r0, r3
90013814:	68bb      	ldr	r3, [r7, #8]
90013816:	b29a      	uxth	r2, r3
90013818:	69bb      	ldr	r3, [r7, #24]
9001381a:	b29b      	uxth	r3, r3
9001381c:	4413      	add	r3, r2
9001381e:	b29b      	uxth	r3, r3
90013820:	683a      	ldr	r2, [r7, #0]
90013822:	4619      	mov	r1, r3
90013824:	f7ff fdda 	bl	900133dc <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
90013828:	68fa      	ldr	r2, [r7, #12]
9001382a:	697b      	ldr	r3, [r7, #20]
9001382c:	1ad2      	subs	r2, r2, r3
9001382e:	4b1b      	ldr	r3, [pc, #108]	@ (9001389c <UTIL_LCD_DrawCircle+0x210>)
90013830:	695b      	ldr	r3, [r3, #20]
90013832:	429a      	cmp	r2, r3
90013834:	d20f      	bcs.n	90013856 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
90013836:	68fb      	ldr	r3, [r7, #12]
90013838:	b29a      	uxth	r2, r3
9001383a:	697b      	ldr	r3, [r7, #20]
9001383c:	b29b      	uxth	r3, r3
9001383e:	1ad3      	subs	r3, r2, r3
90013840:	b298      	uxth	r0, r3
90013842:	68bb      	ldr	r3, [r7, #8]
90013844:	b29a      	uxth	r2, r3
90013846:	69bb      	ldr	r3, [r7, #24]
90013848:	b29b      	uxth	r3, r3
9001384a:	4413      	add	r3, r2
9001384c:	b29b      	uxth	r3, r3
9001384e:	683a      	ldr	r2, [r7, #0]
90013850:	4619      	mov	r1, r3
90013852:	f7ff fdc3 	bl	900133dc <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
90013856:	69fb      	ldr	r3, [r7, #28]
90013858:	2b00      	cmp	r3, #0
9001385a:	da06      	bge.n	9001386a <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
9001385c:	69bb      	ldr	r3, [r7, #24]
9001385e:	009a      	lsls	r2, r3, #2
90013860:	69fb      	ldr	r3, [r7, #28]
90013862:	4413      	add	r3, r2
90013864:	3306      	adds	r3, #6
90013866:	61fb      	str	r3, [r7, #28]
90013868:	e00a      	b.n	90013880 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
9001386a:	69ba      	ldr	r2, [r7, #24]
9001386c:	697b      	ldr	r3, [r7, #20]
9001386e:	1ad3      	subs	r3, r2, r3
90013870:	009a      	lsls	r2, r3, #2
90013872:	69fb      	ldr	r3, [r7, #28]
90013874:	4413      	add	r3, r2
90013876:	330a      	adds	r3, #10
90013878:	61fb      	str	r3, [r7, #28]
      current_y--;
9001387a:	697b      	ldr	r3, [r7, #20]
9001387c:	3b01      	subs	r3, #1
9001387e:	617b      	str	r3, [r7, #20]
    }
    current_x++;
90013880:	69bb      	ldr	r3, [r7, #24]
90013882:	3301      	adds	r3, #1
90013884:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
90013886:	69ba      	ldr	r2, [r7, #24]
90013888:	697b      	ldr	r3, [r7, #20]
9001388a:	429a      	cmp	r2, r3
9001388c:	f67f af0f 	bls.w	900136ae <UTIL_LCD_DrawCircle+0x22>
  }
}
90013890:	bf00      	nop
90013892:	bf00      	nop
90013894:	3720      	adds	r7, #32
90013896:	46bd      	mov	sp, r7
90013898:	bd80      	pop	{r7, pc}
9001389a:	bf00      	nop
9001389c:	20001ebc 	.word	0x20001ebc

900138a0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
900138a0:	b590      	push	{r4, r7, lr}
900138a2:	b087      	sub	sp, #28
900138a4:	af02      	add	r7, sp, #8
900138a6:	60f8      	str	r0, [r7, #12]
900138a8:	60b9      	str	r1, [r7, #8]
900138aa:	607a      	str	r2, [r7, #4]
900138ac:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
900138ae:	4b17      	ldr	r3, [pc, #92]	@ (9001390c <UTIL_LCD_FillRect+0x6c>)
900138b0:	69db      	ldr	r3, [r3, #28]
900138b2:	2b02      	cmp	r3, #2
900138b4:	d11a      	bne.n	900138ec <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
900138b6:	4b16      	ldr	r3, [pc, #88]	@ (90013910 <UTIL_LCD_FillRect+0x70>)
900138b8:	691c      	ldr	r4, [r3, #16]
900138ba:	4b14      	ldr	r3, [pc, #80]	@ (9001390c <UTIL_LCD_FillRect+0x6c>)
900138bc:	6918      	ldr	r0, [r3, #16]
900138be:	6a3b      	ldr	r3, [r7, #32]
900138c0:	08db      	lsrs	r3, r3, #3
900138c2:	f003 021f 	and.w	r2, r3, #31
900138c6:	6a3b      	ldr	r3, [r7, #32]
900138c8:	0a9b      	lsrs	r3, r3, #10
900138ca:	015b      	lsls	r3, r3, #5
900138cc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
900138d0:	431a      	orrs	r2, r3
900138d2:	6a3b      	ldr	r3, [r7, #32]
900138d4:	0cdb      	lsrs	r3, r3, #19
900138d6:	02db      	lsls	r3, r3, #11
900138d8:	b29b      	uxth	r3, r3
900138da:	4313      	orrs	r3, r2
900138dc:	9301      	str	r3, [sp, #4]
900138de:	683b      	ldr	r3, [r7, #0]
900138e0:	9300      	str	r3, [sp, #0]
900138e2:	687b      	ldr	r3, [r7, #4]
900138e4:	68ba      	ldr	r2, [r7, #8]
900138e6:	68f9      	ldr	r1, [r7, #12]
900138e8:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
900138ea:	e00b      	b.n	90013904 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
900138ec:	4b08      	ldr	r3, [pc, #32]	@ (90013910 <UTIL_LCD_FillRect+0x70>)
900138ee:	691c      	ldr	r4, [r3, #16]
900138f0:	4b06      	ldr	r3, [pc, #24]	@ (9001390c <UTIL_LCD_FillRect+0x6c>)
900138f2:	6918      	ldr	r0, [r3, #16]
900138f4:	6a3b      	ldr	r3, [r7, #32]
900138f6:	9301      	str	r3, [sp, #4]
900138f8:	683b      	ldr	r3, [r7, #0]
900138fa:	9300      	str	r3, [sp, #0]
900138fc:	687b      	ldr	r3, [r7, #4]
900138fe:	68ba      	ldr	r2, [r7, #8]
90013900:	68f9      	ldr	r1, [r7, #12]
90013902:	47a0      	blx	r4
}
90013904:	bf00      	nop
90013906:	3714      	adds	r7, #20
90013908:	46bd      	mov	sp, r7
9001390a:	bd90      	pop	{r4, r7, pc}
9001390c:	20001ebc 	.word	0x20001ebc
90013910:	20001efc 	.word	0x20001efc

90013914 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
90013914:	b580      	push	{r7, lr}
90013916:	b088      	sub	sp, #32
90013918:	af00      	add	r7, sp, #0
9001391a:	60f8      	str	r0, [r7, #12]
9001391c:	60b9      	str	r1, [r7, #8]
9001391e:	607a      	str	r2, [r7, #4]
90013920:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
90013922:	687b      	ldr	r3, [r7, #4]
90013924:	005b      	lsls	r3, r3, #1
90013926:	f1c3 0303 	rsb	r3, r3, #3
9001392a:	61fb      	str	r3, [r7, #28]

  current_x = 0;
9001392c:	2300      	movs	r3, #0
9001392e:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
90013930:	687b      	ldr	r3, [r7, #4]
90013932:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
90013934:	e08b      	b.n	90013a4e <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
90013936:	697b      	ldr	r3, [r7, #20]
90013938:	2b00      	cmp	r3, #0
9001393a:	d036      	beq.n	900139aa <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
9001393c:	697a      	ldr	r2, [r7, #20]
9001393e:	68fb      	ldr	r3, [r7, #12]
90013940:	429a      	cmp	r2, r3
90013942:	d31c      	bcc.n	9001397e <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
90013944:	68ba      	ldr	r2, [r7, #8]
90013946:	69bb      	ldr	r3, [r7, #24]
90013948:	18d0      	adds	r0, r2, r3
9001394a:	697b      	ldr	r3, [r7, #20]
9001394c:	005a      	lsls	r2, r3, #1
9001394e:	68f9      	ldr	r1, [r7, #12]
90013950:	697b      	ldr	r3, [r7, #20]
90013952:	1acb      	subs	r3, r1, r3
90013954:	441a      	add	r2, r3
90013956:	683b      	ldr	r3, [r7, #0]
90013958:	4601      	mov	r1, r0
9001395a:	2000      	movs	r0, #0
9001395c:	f7ff fcd2 	bl	90013304 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
90013960:	68ba      	ldr	r2, [r7, #8]
90013962:	69bb      	ldr	r3, [r7, #24]
90013964:	1ad0      	subs	r0, r2, r3
90013966:	697b      	ldr	r3, [r7, #20]
90013968:	005a      	lsls	r2, r3, #1
9001396a:	68f9      	ldr	r1, [r7, #12]
9001396c:	697b      	ldr	r3, [r7, #20]
9001396e:	1acb      	subs	r3, r1, r3
90013970:	441a      	add	r2, r3
90013972:	683b      	ldr	r3, [r7, #0]
90013974:	4601      	mov	r1, r0
90013976:	2000      	movs	r0, #0
90013978:	f7ff fcc4 	bl	90013304 <UTIL_LCD_DrawHLine>
9001397c:	e015      	b.n	900139aa <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
9001397e:	68fa      	ldr	r2, [r7, #12]
90013980:	697b      	ldr	r3, [r7, #20]
90013982:	1ad0      	subs	r0, r2, r3
90013984:	68ba      	ldr	r2, [r7, #8]
90013986:	69bb      	ldr	r3, [r7, #24]
90013988:	18d1      	adds	r1, r2, r3
9001398a:	697b      	ldr	r3, [r7, #20]
9001398c:	005a      	lsls	r2, r3, #1
9001398e:	683b      	ldr	r3, [r7, #0]
90013990:	f7ff fcb8 	bl	90013304 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
90013994:	68fa      	ldr	r2, [r7, #12]
90013996:	697b      	ldr	r3, [r7, #20]
90013998:	1ad0      	subs	r0, r2, r3
9001399a:	68ba      	ldr	r2, [r7, #8]
9001399c:	69bb      	ldr	r3, [r7, #24]
9001399e:	1ad1      	subs	r1, r2, r3
900139a0:	697b      	ldr	r3, [r7, #20]
900139a2:	005a      	lsls	r2, r3, #1
900139a4:	683b      	ldr	r3, [r7, #0]
900139a6:	f7ff fcad 	bl	90013304 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
900139aa:	69bb      	ldr	r3, [r7, #24]
900139ac:	2b00      	cmp	r3, #0
900139ae:	d036      	beq.n	90013a1e <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
900139b0:	69ba      	ldr	r2, [r7, #24]
900139b2:	68fb      	ldr	r3, [r7, #12]
900139b4:	429a      	cmp	r2, r3
900139b6:	d31c      	bcc.n	900139f2 <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
900139b8:	68ba      	ldr	r2, [r7, #8]
900139ba:	697b      	ldr	r3, [r7, #20]
900139bc:	1ad0      	subs	r0, r2, r3
900139be:	69bb      	ldr	r3, [r7, #24]
900139c0:	005a      	lsls	r2, r3, #1
900139c2:	68f9      	ldr	r1, [r7, #12]
900139c4:	69bb      	ldr	r3, [r7, #24]
900139c6:	1acb      	subs	r3, r1, r3
900139c8:	441a      	add	r2, r3
900139ca:	683b      	ldr	r3, [r7, #0]
900139cc:	4601      	mov	r1, r0
900139ce:	2000      	movs	r0, #0
900139d0:	f7ff fc98 	bl	90013304 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
900139d4:	68ba      	ldr	r2, [r7, #8]
900139d6:	697b      	ldr	r3, [r7, #20]
900139d8:	18d0      	adds	r0, r2, r3
900139da:	69bb      	ldr	r3, [r7, #24]
900139dc:	005a      	lsls	r2, r3, #1
900139de:	68f9      	ldr	r1, [r7, #12]
900139e0:	69bb      	ldr	r3, [r7, #24]
900139e2:	1acb      	subs	r3, r1, r3
900139e4:	441a      	add	r2, r3
900139e6:	683b      	ldr	r3, [r7, #0]
900139e8:	4601      	mov	r1, r0
900139ea:	2000      	movs	r0, #0
900139ec:	f7ff fc8a 	bl	90013304 <UTIL_LCD_DrawHLine>
900139f0:	e015      	b.n	90013a1e <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
900139f2:	68fa      	ldr	r2, [r7, #12]
900139f4:	69bb      	ldr	r3, [r7, #24]
900139f6:	1ad0      	subs	r0, r2, r3
900139f8:	68ba      	ldr	r2, [r7, #8]
900139fa:	697b      	ldr	r3, [r7, #20]
900139fc:	1ad1      	subs	r1, r2, r3
900139fe:	69bb      	ldr	r3, [r7, #24]
90013a00:	005a      	lsls	r2, r3, #1
90013a02:	683b      	ldr	r3, [r7, #0]
90013a04:	f7ff fc7e 	bl	90013304 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
90013a08:	68fa      	ldr	r2, [r7, #12]
90013a0a:	69bb      	ldr	r3, [r7, #24]
90013a0c:	1ad0      	subs	r0, r2, r3
90013a0e:	68ba      	ldr	r2, [r7, #8]
90013a10:	697b      	ldr	r3, [r7, #20]
90013a12:	18d1      	adds	r1, r2, r3
90013a14:	69bb      	ldr	r3, [r7, #24]
90013a16:	005a      	lsls	r2, r3, #1
90013a18:	683b      	ldr	r3, [r7, #0]
90013a1a:	f7ff fc73 	bl	90013304 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
90013a1e:	69fb      	ldr	r3, [r7, #28]
90013a20:	2b00      	cmp	r3, #0
90013a22:	da06      	bge.n	90013a32 <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
90013a24:	69bb      	ldr	r3, [r7, #24]
90013a26:	009a      	lsls	r2, r3, #2
90013a28:	69fb      	ldr	r3, [r7, #28]
90013a2a:	4413      	add	r3, r2
90013a2c:	3306      	adds	r3, #6
90013a2e:	61fb      	str	r3, [r7, #28]
90013a30:	e00a      	b.n	90013a48 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
90013a32:	69ba      	ldr	r2, [r7, #24]
90013a34:	697b      	ldr	r3, [r7, #20]
90013a36:	1ad3      	subs	r3, r2, r3
90013a38:	009a      	lsls	r2, r3, #2
90013a3a:	69fb      	ldr	r3, [r7, #28]
90013a3c:	4413      	add	r3, r2
90013a3e:	330a      	adds	r3, #10
90013a40:	61fb      	str	r3, [r7, #28]
      current_y--;
90013a42:	697b      	ldr	r3, [r7, #20]
90013a44:	3b01      	subs	r3, #1
90013a46:	617b      	str	r3, [r7, #20]
    }
    current_x++;
90013a48:	69bb      	ldr	r3, [r7, #24]
90013a4a:	3301      	adds	r3, #1
90013a4c:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
90013a4e:	69ba      	ldr	r2, [r7, #24]
90013a50:	697b      	ldr	r3, [r7, #20]
90013a52:	429a      	cmp	r2, r3
90013a54:	f67f af6f 	bls.w	90013936 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
90013a58:	683b      	ldr	r3, [r7, #0]
90013a5a:	687a      	ldr	r2, [r7, #4]
90013a5c:	68b9      	ldr	r1, [r7, #8]
90013a5e:	68f8      	ldr	r0, [r7, #12]
90013a60:	f7ff fe14 	bl	9001368c <UTIL_LCD_DrawCircle>
}
90013a64:	bf00      	nop
90013a66:	3720      	adds	r7, #32
90013a68:	46bd      	mov	sp, r7
90013a6a:	bd80      	pop	{r7, pc}

90013a6c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
90013a6c:	b580      	push	{r7, lr}
90013a6e:	b0b2      	sub	sp, #200	@ 0xc8
90013a70:	af02      	add	r7, sp, #8
90013a72:	60f8      	str	r0, [r7, #12]
90013a74:	60b9      	str	r1, [r7, #8]
90013a76:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
90013a78:	2300      	movs	r3, #0
90013a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
90013a7e:	2300      	movs	r3, #0
90013a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
90013a84:	4ba5      	ldr	r3, [pc, #660]	@ (90013d1c <DrawChar+0x2b0>)
90013a86:	68db      	ldr	r3, [r3, #12]
90013a88:	4aa4      	ldr	r2, [pc, #656]	@ (90013d1c <DrawChar+0x2b0>)
90013a8a:	015b      	lsls	r3, r3, #5
90013a8c:	4413      	add	r3, r2
90013a8e:	3308      	adds	r3, #8
90013a90:	681b      	ldr	r3, [r3, #0]
90013a92:	88db      	ldrh	r3, [r3, #6]
90013a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
90013a98:	4ba0      	ldr	r3, [pc, #640]	@ (90013d1c <DrawChar+0x2b0>)
90013a9a:	68db      	ldr	r3, [r3, #12]
90013a9c:	4a9f      	ldr	r2, [pc, #636]	@ (90013d1c <DrawChar+0x2b0>)
90013a9e:	015b      	lsls	r3, r3, #5
90013aa0:	4413      	add	r3, r2
90013aa2:	3308      	adds	r3, #8
90013aa4:	681b      	ldr	r3, [r3, #0]
90013aa6:	889b      	ldrh	r3, [r3, #4]
90013aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
90013aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
90013ab0:	3307      	adds	r3, #7
90013ab2:	f023 0207 	bic.w	r2, r3, #7
90013ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
90013aba:	1ad3      	subs	r3, r2, r3
90013abc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
90013ac0:	2300      	movs	r3, #0
90013ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
90013ac6:	e11c      	b.n	90013d02 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
90013ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
90013acc:	3307      	adds	r3, #7
90013ace:	08db      	lsrs	r3, r3, #3
90013ad0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
90013ad4:	fb02 f303 	mul.w	r3, r2, r3
90013ad8:	687a      	ldr	r2, [r7, #4]
90013ada:	4413      	add	r3, r2
90013adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
90013ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
90013ae4:	3307      	adds	r3, #7
90013ae6:	08db      	lsrs	r3, r3, #3
90013ae8:	2b01      	cmp	r3, #1
90013aea:	d002      	beq.n	90013af2 <DrawChar+0x86>
90013aec:	2b02      	cmp	r3, #2
90013aee:	d006      	beq.n	90013afe <DrawChar+0x92>
90013af0:	e011      	b.n	90013b16 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
90013af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
90013af6:	781b      	ldrb	r3, [r3, #0]
90013af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
90013afc:	e01d      	b.n	90013b3a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
90013afe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
90013b02:	781b      	ldrb	r3, [r3, #0]
90013b04:	021b      	lsls	r3, r3, #8
90013b06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
90013b0a:	3201      	adds	r2, #1
90013b0c:	7812      	ldrb	r2, [r2, #0]
90013b0e:	4313      	orrs	r3, r2
90013b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
90013b14:	e011      	b.n	90013b3a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
90013b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
90013b1a:	781b      	ldrb	r3, [r3, #0]
90013b1c:	041a      	lsls	r2, r3, #16
90013b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
90013b22:	3301      	adds	r3, #1
90013b24:	781b      	ldrb	r3, [r3, #0]
90013b26:	021b      	lsls	r3, r3, #8
90013b28:	4313      	orrs	r3, r2
90013b2a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
90013b2e:	3202      	adds	r2, #2
90013b30:	7812      	ldrb	r2, [r2, #0]
90013b32:	4313      	orrs	r3, r2
90013b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
90013b38:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
90013b3a:	4b78      	ldr	r3, [pc, #480]	@ (90013d1c <DrawChar+0x2b0>)
90013b3c:	68db      	ldr	r3, [r3, #12]
90013b3e:	4a77      	ldr	r2, [pc, #476]	@ (90013d1c <DrawChar+0x2b0>)
90013b40:	015b      	lsls	r3, r3, #5
90013b42:	4413      	add	r3, r2
90013b44:	331c      	adds	r3, #28
90013b46:	681b      	ldr	r3, [r3, #0]
90013b48:	2b02      	cmp	r3, #2
90013b4a:	f040 808c 	bne.w	90013c66 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
90013b4e:	2300      	movs	r3, #0
90013b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90013b54:	e074      	b.n	90013c40 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
90013b56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
90013b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
90013b5e:	1ad2      	subs	r2, r2, r3
90013b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
90013b64:	4413      	add	r3, r2
90013b66:	3b01      	subs	r3, #1
90013b68:	2201      	movs	r2, #1
90013b6a:	fa02 f303 	lsl.w	r3, r2, r3
90013b6e:	461a      	mov	r2, r3
90013b70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
90013b74:	4013      	ands	r3, r2
90013b76:	2b00      	cmp	r3, #0
90013b78:	d02d      	beq.n	90013bd6 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
90013b7a:	4b68      	ldr	r3, [pc, #416]	@ (90013d1c <DrawChar+0x2b0>)
90013b7c:	68db      	ldr	r3, [r3, #12]
90013b7e:	4a67      	ldr	r2, [pc, #412]	@ (90013d1c <DrawChar+0x2b0>)
90013b80:	015b      	lsls	r3, r3, #5
90013b82:	4413      	add	r3, r2
90013b84:	681b      	ldr	r3, [r3, #0]
90013b86:	08db      	lsrs	r3, r3, #3
90013b88:	b29b      	uxth	r3, r3
90013b8a:	f003 031f 	and.w	r3, r3, #31
90013b8e:	b29a      	uxth	r2, r3
90013b90:	4b62      	ldr	r3, [pc, #392]	@ (90013d1c <DrawChar+0x2b0>)
90013b92:	68db      	ldr	r3, [r3, #12]
90013b94:	4961      	ldr	r1, [pc, #388]	@ (90013d1c <DrawChar+0x2b0>)
90013b96:	015b      	lsls	r3, r3, #5
90013b98:	440b      	add	r3, r1
90013b9a:	681b      	ldr	r3, [r3, #0]
90013b9c:	0a9b      	lsrs	r3, r3, #10
90013b9e:	b29b      	uxth	r3, r3
90013ba0:	015b      	lsls	r3, r3, #5
90013ba2:	b29b      	uxth	r3, r3
90013ba4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
90013ba8:	b29b      	uxth	r3, r3
90013baa:	4313      	orrs	r3, r2
90013bac:	b29a      	uxth	r2, r3
90013bae:	4b5b      	ldr	r3, [pc, #364]	@ (90013d1c <DrawChar+0x2b0>)
90013bb0:	68db      	ldr	r3, [r3, #12]
90013bb2:	495a      	ldr	r1, [pc, #360]	@ (90013d1c <DrawChar+0x2b0>)
90013bb4:	015b      	lsls	r3, r3, #5
90013bb6:	440b      	add	r3, r1
90013bb8:	681b      	ldr	r3, [r3, #0]
90013bba:	0cdb      	lsrs	r3, r3, #19
90013bbc:	b29b      	uxth	r3, r3
90013bbe:	02db      	lsls	r3, r3, #11
90013bc0:	b29b      	uxth	r3, r3
90013bc2:	4313      	orrs	r3, r2
90013bc4:	b29a      	uxth	r2, r3
90013bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
90013bca:	005b      	lsls	r3, r3, #1
90013bcc:	33c0      	adds	r3, #192	@ 0xc0
90013bce:	443b      	add	r3, r7
90013bd0:	f823 2c4c 	strh.w	r2, [r3, #-76]
90013bd4:	e02f      	b.n	90013c36 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
90013bd6:	4b51      	ldr	r3, [pc, #324]	@ (90013d1c <DrawChar+0x2b0>)
90013bd8:	68db      	ldr	r3, [r3, #12]
90013bda:	4a50      	ldr	r2, [pc, #320]	@ (90013d1c <DrawChar+0x2b0>)
90013bdc:	015b      	lsls	r3, r3, #5
90013bde:	4413      	add	r3, r2
90013be0:	3304      	adds	r3, #4
90013be2:	681b      	ldr	r3, [r3, #0]
90013be4:	08db      	lsrs	r3, r3, #3
90013be6:	b29b      	uxth	r3, r3
90013be8:	f003 031f 	and.w	r3, r3, #31
90013bec:	b29a      	uxth	r2, r3
90013bee:	4b4b      	ldr	r3, [pc, #300]	@ (90013d1c <DrawChar+0x2b0>)
90013bf0:	68db      	ldr	r3, [r3, #12]
90013bf2:	494a      	ldr	r1, [pc, #296]	@ (90013d1c <DrawChar+0x2b0>)
90013bf4:	015b      	lsls	r3, r3, #5
90013bf6:	440b      	add	r3, r1
90013bf8:	3304      	adds	r3, #4
90013bfa:	681b      	ldr	r3, [r3, #0]
90013bfc:	0a9b      	lsrs	r3, r3, #10
90013bfe:	b29b      	uxth	r3, r3
90013c00:	015b      	lsls	r3, r3, #5
90013c02:	b29b      	uxth	r3, r3
90013c04:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
90013c08:	b29b      	uxth	r3, r3
90013c0a:	4313      	orrs	r3, r2
90013c0c:	b29a      	uxth	r2, r3
90013c0e:	4b43      	ldr	r3, [pc, #268]	@ (90013d1c <DrawChar+0x2b0>)
90013c10:	68db      	ldr	r3, [r3, #12]
90013c12:	4942      	ldr	r1, [pc, #264]	@ (90013d1c <DrawChar+0x2b0>)
90013c14:	015b      	lsls	r3, r3, #5
90013c16:	440b      	add	r3, r1
90013c18:	3304      	adds	r3, #4
90013c1a:	681b      	ldr	r3, [r3, #0]
90013c1c:	0cdb      	lsrs	r3, r3, #19
90013c1e:	b29b      	uxth	r3, r3
90013c20:	02db      	lsls	r3, r3, #11
90013c22:	b29b      	uxth	r3, r3
90013c24:	4313      	orrs	r3, r2
90013c26:	b29a      	uxth	r2, r3
90013c28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
90013c2c:	005b      	lsls	r3, r3, #1
90013c2e:	33c0      	adds	r3, #192	@ 0xc0
90013c30:	443b      	add	r3, r7
90013c32:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
90013c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
90013c3a:	3301      	adds	r3, #1
90013c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90013c40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
90013c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
90013c48:	429a      	cmp	r2, r3
90013c4a:	d384      	bcc.n	90013b56 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
90013c4c:	68b9      	ldr	r1, [r7, #8]
90013c4e:	1c4b      	adds	r3, r1, #1
90013c50:	60bb      	str	r3, [r7, #8]
90013c52:	f107 0274 	add.w	r2, r7, #116	@ 0x74
90013c56:	2301      	movs	r3, #1
90013c58:	9300      	str	r3, [sp, #0]
90013c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
90013c5e:	68f8      	ldr	r0, [r7, #12]
90013c60:	f7ff fb34 	bl	900132cc <UTIL_LCD_FillRGBRect>
90013c64:	e048      	b.n	90013cf8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
90013c66:	2300      	movs	r3, #0
90013c68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90013c6c:	e032      	b.n	90013cd4 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
90013c6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
90013c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
90013c76:	1ad2      	subs	r2, r2, r3
90013c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
90013c7c:	4413      	add	r3, r2
90013c7e:	3b01      	subs	r3, #1
90013c80:	2201      	movs	r2, #1
90013c82:	fa02 f303 	lsl.w	r3, r2, r3
90013c86:	461a      	mov	r2, r3
90013c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
90013c8c:	4013      	ands	r3, r2
90013c8e:	2b00      	cmp	r3, #0
90013c90:	d00d      	beq.n	90013cae <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
90013c92:	4b22      	ldr	r3, [pc, #136]	@ (90013d1c <DrawChar+0x2b0>)
90013c94:	68db      	ldr	r3, [r3, #12]
90013c96:	4a21      	ldr	r2, [pc, #132]	@ (90013d1c <DrawChar+0x2b0>)
90013c98:	015b      	lsls	r3, r3, #5
90013c9a:	4413      	add	r3, r2
90013c9c:	681a      	ldr	r2, [r3, #0]
90013c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
90013ca2:	009b      	lsls	r3, r3, #2
90013ca4:	33c0      	adds	r3, #192	@ 0xc0
90013ca6:	443b      	add	r3, r7
90013ca8:	f843 2cac 	str.w	r2, [r3, #-172]
90013cac:	e00d      	b.n	90013cca <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
90013cae:	4b1b      	ldr	r3, [pc, #108]	@ (90013d1c <DrawChar+0x2b0>)
90013cb0:	68db      	ldr	r3, [r3, #12]
90013cb2:	4a1a      	ldr	r2, [pc, #104]	@ (90013d1c <DrawChar+0x2b0>)
90013cb4:	015b      	lsls	r3, r3, #5
90013cb6:	4413      	add	r3, r2
90013cb8:	3304      	adds	r3, #4
90013cba:	681a      	ldr	r2, [r3, #0]
90013cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
90013cc0:	009b      	lsls	r3, r3, #2
90013cc2:	33c0      	adds	r3, #192	@ 0xc0
90013cc4:	443b      	add	r3, r7
90013cc6:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
90013cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
90013cce:	3301      	adds	r3, #1
90013cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90013cd4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
90013cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
90013cdc:	429a      	cmp	r2, r3
90013cde:	d3c6      	bcc.n	90013c6e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
90013ce0:	68b9      	ldr	r1, [r7, #8]
90013ce2:	1c4b      	adds	r3, r1, #1
90013ce4:	60bb      	str	r3, [r7, #8]
90013ce6:	f107 0214 	add.w	r2, r7, #20
90013cea:	2301      	movs	r3, #1
90013cec:	9300      	str	r3, [sp, #0]
90013cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
90013cf2:	68f8      	ldr	r0, [r7, #12]
90013cf4:	f7ff faea 	bl	900132cc <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
90013cf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
90013cfc:	3301      	adds	r3, #1
90013cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
90013d02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
90013d06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
90013d0a:	429a      	cmp	r2, r3
90013d0c:	f4ff aedc 	bcc.w	90013ac8 <DrawChar+0x5c>
    }
  }
}
90013d10:	bf00      	nop
90013d12:	bf00      	nop
90013d14:	37c0      	adds	r7, #192	@ 0xc0
90013d16:	46bd      	mov	sp, r7
90013d18:	bd80      	pop	{r7, pc}
90013d1a:	bf00      	nop
90013d1c:	20001ebc 	.word	0x20001ebc

90013d20 <malloc>:
90013d20:	4b02      	ldr	r3, [pc, #8]	@ (90013d2c <malloc+0xc>)
90013d22:	4601      	mov	r1, r0
90013d24:	6818      	ldr	r0, [r3, #0]
90013d26:	f000 b82d 	b.w	90013d84 <_malloc_r>
90013d2a:	bf00      	nop
90013d2c:	2000007c 	.word	0x2000007c

90013d30 <free>:
90013d30:	4b02      	ldr	r3, [pc, #8]	@ (90013d3c <free+0xc>)
90013d32:	4601      	mov	r1, r0
90013d34:	6818      	ldr	r0, [r3, #0]
90013d36:	f000 b903 	b.w	90013f40 <_free_r>
90013d3a:	bf00      	nop
90013d3c:	2000007c 	.word	0x2000007c

90013d40 <sbrk_aligned>:
90013d40:	b570      	push	{r4, r5, r6, lr}
90013d42:	4e0f      	ldr	r6, [pc, #60]	@ (90013d80 <sbrk_aligned+0x40>)
90013d44:	460c      	mov	r4, r1
90013d46:	6831      	ldr	r1, [r6, #0]
90013d48:	4605      	mov	r5, r0
90013d4a:	b911      	cbnz	r1, 90013d52 <sbrk_aligned+0x12>
90013d4c:	f000 f8ae 	bl	90013eac <_sbrk_r>
90013d50:	6030      	str	r0, [r6, #0]
90013d52:	4621      	mov	r1, r4
90013d54:	4628      	mov	r0, r5
90013d56:	f000 f8a9 	bl	90013eac <_sbrk_r>
90013d5a:	1c43      	adds	r3, r0, #1
90013d5c:	d103      	bne.n	90013d66 <sbrk_aligned+0x26>
90013d5e:	f04f 34ff 	mov.w	r4, #4294967295
90013d62:	4620      	mov	r0, r4
90013d64:	bd70      	pop	{r4, r5, r6, pc}
90013d66:	1cc4      	adds	r4, r0, #3
90013d68:	f024 0403 	bic.w	r4, r4, #3
90013d6c:	42a0      	cmp	r0, r4
90013d6e:	d0f8      	beq.n	90013d62 <sbrk_aligned+0x22>
90013d70:	1a21      	subs	r1, r4, r0
90013d72:	4628      	mov	r0, r5
90013d74:	f000 f89a 	bl	90013eac <_sbrk_r>
90013d78:	3001      	adds	r0, #1
90013d7a:	d1f2      	bne.n	90013d62 <sbrk_aligned+0x22>
90013d7c:	e7ef      	b.n	90013d5e <sbrk_aligned+0x1e>
90013d7e:	bf00      	nop
90013d80:	20001f28 	.word	0x20001f28

90013d84 <_malloc_r>:
90013d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90013d88:	1ccd      	adds	r5, r1, #3
90013d8a:	f025 0503 	bic.w	r5, r5, #3
90013d8e:	3508      	adds	r5, #8
90013d90:	2d0c      	cmp	r5, #12
90013d92:	bf38      	it	cc
90013d94:	250c      	movcc	r5, #12
90013d96:	2d00      	cmp	r5, #0
90013d98:	4606      	mov	r6, r0
90013d9a:	db01      	blt.n	90013da0 <_malloc_r+0x1c>
90013d9c:	42a9      	cmp	r1, r5
90013d9e:	d904      	bls.n	90013daa <_malloc_r+0x26>
90013da0:	230c      	movs	r3, #12
90013da2:	6033      	str	r3, [r6, #0]
90013da4:	2000      	movs	r0, #0
90013da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90013daa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 90013e80 <_malloc_r+0xfc>
90013dae:	f000 f869 	bl	90013e84 <__malloc_lock>
90013db2:	f8d8 3000 	ldr.w	r3, [r8]
90013db6:	461c      	mov	r4, r3
90013db8:	bb44      	cbnz	r4, 90013e0c <_malloc_r+0x88>
90013dba:	4629      	mov	r1, r5
90013dbc:	4630      	mov	r0, r6
90013dbe:	f7ff ffbf 	bl	90013d40 <sbrk_aligned>
90013dc2:	1c43      	adds	r3, r0, #1
90013dc4:	4604      	mov	r4, r0
90013dc6:	d158      	bne.n	90013e7a <_malloc_r+0xf6>
90013dc8:	f8d8 4000 	ldr.w	r4, [r8]
90013dcc:	4627      	mov	r7, r4
90013dce:	2f00      	cmp	r7, #0
90013dd0:	d143      	bne.n	90013e5a <_malloc_r+0xd6>
90013dd2:	2c00      	cmp	r4, #0
90013dd4:	d04b      	beq.n	90013e6e <_malloc_r+0xea>
90013dd6:	6823      	ldr	r3, [r4, #0]
90013dd8:	4639      	mov	r1, r7
90013dda:	4630      	mov	r0, r6
90013ddc:	eb04 0903 	add.w	r9, r4, r3
90013de0:	f000 f864 	bl	90013eac <_sbrk_r>
90013de4:	4581      	cmp	r9, r0
90013de6:	d142      	bne.n	90013e6e <_malloc_r+0xea>
90013de8:	6821      	ldr	r1, [r4, #0]
90013dea:	1a6d      	subs	r5, r5, r1
90013dec:	4629      	mov	r1, r5
90013dee:	4630      	mov	r0, r6
90013df0:	f7ff ffa6 	bl	90013d40 <sbrk_aligned>
90013df4:	3001      	adds	r0, #1
90013df6:	d03a      	beq.n	90013e6e <_malloc_r+0xea>
90013df8:	6823      	ldr	r3, [r4, #0]
90013dfa:	442b      	add	r3, r5
90013dfc:	6023      	str	r3, [r4, #0]
90013dfe:	f8d8 3000 	ldr.w	r3, [r8]
90013e02:	685a      	ldr	r2, [r3, #4]
90013e04:	bb62      	cbnz	r2, 90013e60 <_malloc_r+0xdc>
90013e06:	f8c8 7000 	str.w	r7, [r8]
90013e0a:	e00f      	b.n	90013e2c <_malloc_r+0xa8>
90013e0c:	6822      	ldr	r2, [r4, #0]
90013e0e:	1b52      	subs	r2, r2, r5
90013e10:	d420      	bmi.n	90013e54 <_malloc_r+0xd0>
90013e12:	2a0b      	cmp	r2, #11
90013e14:	d917      	bls.n	90013e46 <_malloc_r+0xc2>
90013e16:	1961      	adds	r1, r4, r5
90013e18:	42a3      	cmp	r3, r4
90013e1a:	6025      	str	r5, [r4, #0]
90013e1c:	bf18      	it	ne
90013e1e:	6059      	strne	r1, [r3, #4]
90013e20:	6863      	ldr	r3, [r4, #4]
90013e22:	bf08      	it	eq
90013e24:	f8c8 1000 	streq.w	r1, [r8]
90013e28:	5162      	str	r2, [r4, r5]
90013e2a:	604b      	str	r3, [r1, #4]
90013e2c:	4630      	mov	r0, r6
90013e2e:	f000 f82f 	bl	90013e90 <__malloc_unlock>
90013e32:	f104 000b 	add.w	r0, r4, #11
90013e36:	1d23      	adds	r3, r4, #4
90013e38:	f020 0007 	bic.w	r0, r0, #7
90013e3c:	1ac2      	subs	r2, r0, r3
90013e3e:	bf1c      	itt	ne
90013e40:	1a1b      	subne	r3, r3, r0
90013e42:	50a3      	strne	r3, [r4, r2]
90013e44:	e7af      	b.n	90013da6 <_malloc_r+0x22>
90013e46:	6862      	ldr	r2, [r4, #4]
90013e48:	42a3      	cmp	r3, r4
90013e4a:	bf0c      	ite	eq
90013e4c:	f8c8 2000 	streq.w	r2, [r8]
90013e50:	605a      	strne	r2, [r3, #4]
90013e52:	e7eb      	b.n	90013e2c <_malloc_r+0xa8>
90013e54:	4623      	mov	r3, r4
90013e56:	6864      	ldr	r4, [r4, #4]
90013e58:	e7ae      	b.n	90013db8 <_malloc_r+0x34>
90013e5a:	463c      	mov	r4, r7
90013e5c:	687f      	ldr	r7, [r7, #4]
90013e5e:	e7b6      	b.n	90013dce <_malloc_r+0x4a>
90013e60:	461a      	mov	r2, r3
90013e62:	685b      	ldr	r3, [r3, #4]
90013e64:	42a3      	cmp	r3, r4
90013e66:	d1fb      	bne.n	90013e60 <_malloc_r+0xdc>
90013e68:	2300      	movs	r3, #0
90013e6a:	6053      	str	r3, [r2, #4]
90013e6c:	e7de      	b.n	90013e2c <_malloc_r+0xa8>
90013e6e:	230c      	movs	r3, #12
90013e70:	6033      	str	r3, [r6, #0]
90013e72:	4630      	mov	r0, r6
90013e74:	f000 f80c 	bl	90013e90 <__malloc_unlock>
90013e78:	e794      	b.n	90013da4 <_malloc_r+0x20>
90013e7a:	6005      	str	r5, [r0, #0]
90013e7c:	e7d6      	b.n	90013e2c <_malloc_r+0xa8>
90013e7e:	bf00      	nop
90013e80:	20001f2c 	.word	0x20001f2c

90013e84 <__malloc_lock>:
90013e84:	4801      	ldr	r0, [pc, #4]	@ (90013e8c <__malloc_lock+0x8>)
90013e86:	f000 b84b 	b.w	90013f20 <__retarget_lock_acquire_recursive>
90013e8a:	bf00      	nop
90013e8c:	2000206c 	.word	0x2000206c

90013e90 <__malloc_unlock>:
90013e90:	4801      	ldr	r0, [pc, #4]	@ (90013e98 <__malloc_unlock+0x8>)
90013e92:	f000 b846 	b.w	90013f22 <__retarget_lock_release_recursive>
90013e96:	bf00      	nop
90013e98:	2000206c 	.word	0x2000206c

90013e9c <memset>:
90013e9c:	4402      	add	r2, r0
90013e9e:	4603      	mov	r3, r0
90013ea0:	4293      	cmp	r3, r2
90013ea2:	d100      	bne.n	90013ea6 <memset+0xa>
90013ea4:	4770      	bx	lr
90013ea6:	f803 1b01 	strb.w	r1, [r3], #1
90013eaa:	e7f9      	b.n	90013ea0 <memset+0x4>

90013eac <_sbrk_r>:
90013eac:	b538      	push	{r3, r4, r5, lr}
90013eae:	4d06      	ldr	r5, [pc, #24]	@ (90013ec8 <_sbrk_r+0x1c>)
90013eb0:	2300      	movs	r3, #0
90013eb2:	4604      	mov	r4, r0
90013eb4:	4608      	mov	r0, r1
90013eb6:	602b      	str	r3, [r5, #0]
90013eb8:	f7ed fbfa 	bl	900016b0 <_sbrk>
90013ebc:	1c43      	adds	r3, r0, #1
90013ebe:	d102      	bne.n	90013ec6 <_sbrk_r+0x1a>
90013ec0:	682b      	ldr	r3, [r5, #0]
90013ec2:	b103      	cbz	r3, 90013ec6 <_sbrk_r+0x1a>
90013ec4:	6023      	str	r3, [r4, #0]
90013ec6:	bd38      	pop	{r3, r4, r5, pc}
90013ec8:	20002068 	.word	0x20002068

90013ecc <__errno>:
90013ecc:	4b01      	ldr	r3, [pc, #4]	@ (90013ed4 <__errno+0x8>)
90013ece:	6818      	ldr	r0, [r3, #0]
90013ed0:	4770      	bx	lr
90013ed2:	bf00      	nop
90013ed4:	2000007c 	.word	0x2000007c

90013ed8 <__libc_init_array>:
90013ed8:	b570      	push	{r4, r5, r6, lr}
90013eda:	4d0d      	ldr	r5, [pc, #52]	@ (90013f10 <__libc_init_array+0x38>)
90013edc:	4c0d      	ldr	r4, [pc, #52]	@ (90013f14 <__libc_init_array+0x3c>)
90013ede:	1b64      	subs	r4, r4, r5
90013ee0:	10a4      	asrs	r4, r4, #2
90013ee2:	2600      	movs	r6, #0
90013ee4:	42a6      	cmp	r6, r4
90013ee6:	d109      	bne.n	90013efc <__libc_init_array+0x24>
90013ee8:	4d0b      	ldr	r5, [pc, #44]	@ (90013f18 <__libc_init_array+0x40>)
90013eea:	4c0c      	ldr	r4, [pc, #48]	@ (90013f1c <__libc_init_array+0x44>)
90013eec:	f000 f872 	bl	90013fd4 <_init>
90013ef0:	1b64      	subs	r4, r4, r5
90013ef2:	10a4      	asrs	r4, r4, #2
90013ef4:	2600      	movs	r6, #0
90013ef6:	42a6      	cmp	r6, r4
90013ef8:	d105      	bne.n	90013f06 <__libc_init_array+0x2e>
90013efa:	bd70      	pop	{r4, r5, r6, pc}
90013efc:	f855 3b04 	ldr.w	r3, [r5], #4
90013f00:	4798      	blx	r3
90013f02:	3601      	adds	r6, #1
90013f04:	e7ee      	b.n	90013ee4 <__libc_init_array+0xc>
90013f06:	f855 3b04 	ldr.w	r3, [r5], #4
90013f0a:	4798      	blx	r3
90013f0c:	3601      	adds	r6, #1
90013f0e:	e7f2      	b.n	90013ef6 <__libc_init_array+0x1e>
90013f10:	90017854 	.word	0x90017854
90013f14:	90017854 	.word	0x90017854
90013f18:	90017854 	.word	0x90017854
90013f1c:	90017858 	.word	0x90017858

90013f20 <__retarget_lock_acquire_recursive>:
90013f20:	4770      	bx	lr

90013f22 <__retarget_lock_release_recursive>:
90013f22:	4770      	bx	lr

90013f24 <memcpy>:
90013f24:	440a      	add	r2, r1
90013f26:	4291      	cmp	r1, r2
90013f28:	f100 33ff 	add.w	r3, r0, #4294967295
90013f2c:	d100      	bne.n	90013f30 <memcpy+0xc>
90013f2e:	4770      	bx	lr
90013f30:	b510      	push	{r4, lr}
90013f32:	f811 4b01 	ldrb.w	r4, [r1], #1
90013f36:	f803 4f01 	strb.w	r4, [r3, #1]!
90013f3a:	4291      	cmp	r1, r2
90013f3c:	d1f9      	bne.n	90013f32 <memcpy+0xe>
90013f3e:	bd10      	pop	{r4, pc}

90013f40 <_free_r>:
90013f40:	b538      	push	{r3, r4, r5, lr}
90013f42:	4605      	mov	r5, r0
90013f44:	2900      	cmp	r1, #0
90013f46:	d041      	beq.n	90013fcc <_free_r+0x8c>
90013f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
90013f4c:	1f0c      	subs	r4, r1, #4
90013f4e:	2b00      	cmp	r3, #0
90013f50:	bfb8      	it	lt
90013f52:	18e4      	addlt	r4, r4, r3
90013f54:	f7ff ff96 	bl	90013e84 <__malloc_lock>
90013f58:	4a1d      	ldr	r2, [pc, #116]	@ (90013fd0 <_free_r+0x90>)
90013f5a:	6813      	ldr	r3, [r2, #0]
90013f5c:	b933      	cbnz	r3, 90013f6c <_free_r+0x2c>
90013f5e:	6063      	str	r3, [r4, #4]
90013f60:	6014      	str	r4, [r2, #0]
90013f62:	4628      	mov	r0, r5
90013f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90013f68:	f7ff bf92 	b.w	90013e90 <__malloc_unlock>
90013f6c:	42a3      	cmp	r3, r4
90013f6e:	d908      	bls.n	90013f82 <_free_r+0x42>
90013f70:	6820      	ldr	r0, [r4, #0]
90013f72:	1821      	adds	r1, r4, r0
90013f74:	428b      	cmp	r3, r1
90013f76:	bf01      	itttt	eq
90013f78:	6819      	ldreq	r1, [r3, #0]
90013f7a:	685b      	ldreq	r3, [r3, #4]
90013f7c:	1809      	addeq	r1, r1, r0
90013f7e:	6021      	streq	r1, [r4, #0]
90013f80:	e7ed      	b.n	90013f5e <_free_r+0x1e>
90013f82:	461a      	mov	r2, r3
90013f84:	685b      	ldr	r3, [r3, #4]
90013f86:	b10b      	cbz	r3, 90013f8c <_free_r+0x4c>
90013f88:	42a3      	cmp	r3, r4
90013f8a:	d9fa      	bls.n	90013f82 <_free_r+0x42>
90013f8c:	6811      	ldr	r1, [r2, #0]
90013f8e:	1850      	adds	r0, r2, r1
90013f90:	42a0      	cmp	r0, r4
90013f92:	d10b      	bne.n	90013fac <_free_r+0x6c>
90013f94:	6820      	ldr	r0, [r4, #0]
90013f96:	4401      	add	r1, r0
90013f98:	1850      	adds	r0, r2, r1
90013f9a:	4283      	cmp	r3, r0
90013f9c:	6011      	str	r1, [r2, #0]
90013f9e:	d1e0      	bne.n	90013f62 <_free_r+0x22>
90013fa0:	6818      	ldr	r0, [r3, #0]
90013fa2:	685b      	ldr	r3, [r3, #4]
90013fa4:	6053      	str	r3, [r2, #4]
90013fa6:	4408      	add	r0, r1
90013fa8:	6010      	str	r0, [r2, #0]
90013faa:	e7da      	b.n	90013f62 <_free_r+0x22>
90013fac:	d902      	bls.n	90013fb4 <_free_r+0x74>
90013fae:	230c      	movs	r3, #12
90013fb0:	602b      	str	r3, [r5, #0]
90013fb2:	e7d6      	b.n	90013f62 <_free_r+0x22>
90013fb4:	6820      	ldr	r0, [r4, #0]
90013fb6:	1821      	adds	r1, r4, r0
90013fb8:	428b      	cmp	r3, r1
90013fba:	bf04      	itt	eq
90013fbc:	6819      	ldreq	r1, [r3, #0]
90013fbe:	685b      	ldreq	r3, [r3, #4]
90013fc0:	6063      	str	r3, [r4, #4]
90013fc2:	bf04      	itt	eq
90013fc4:	1809      	addeq	r1, r1, r0
90013fc6:	6021      	streq	r1, [r4, #0]
90013fc8:	6054      	str	r4, [r2, #4]
90013fca:	e7ca      	b.n	90013f62 <_free_r+0x22>
90013fcc:	bd38      	pop	{r3, r4, r5, pc}
90013fce:	bf00      	nop
90013fd0:	20001f2c 	.word	0x20001f2c

90013fd4 <_init>:
90013fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013fd6:	bf00      	nop
90013fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
90013fda:	bc08      	pop	{r3}
90013fdc:	469e      	mov	lr, r3
90013fde:	4770      	bx	lr

90013fe0 <_fini>:
90013fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013fe2:	bf00      	nop
90013fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
90013fe6:	bc08      	pop	{r3}
90013fe8:	469e      	mov	lr, r3
90013fea:	4770      	bx	lr
