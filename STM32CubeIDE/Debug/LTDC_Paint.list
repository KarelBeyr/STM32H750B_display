
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c278  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004dc0  0800c518  0800c518  0000d518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080112d8  080112d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080112e0  080112e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080112e4  080112e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f0  24000000  080112e8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000103c  240000f0  080113d8  000130f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400112c  080113d8  0001312c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000130f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024917  00000000  00000000  0001311e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004511  00000000  00000000  00037a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d10  00000000  00000000  0003bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016b6  00000000  00000000  0003dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f2b6  00000000  00000000  0003f30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025f57  00000000  00000000  0007e5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00189d35  00000000  00000000  000a451b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022e250  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008624  00000000  00000000  0022e294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  002368b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000f0 	.word	0x240000f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c500 	.word	0x0800c500

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000f4 	.word	0x240000f4
 80002dc:	0800c500 	.word	0x0800c500

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <clearInput>:
#include "appLogic.h"

uint32_t lastCursorTime = 0;

void clearInput(AppContext *ctx) {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	809a      	strh	r2, [r3, #4]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <revertCalibration>:

void revertCalibration(AppContext *ctx) {
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->calibrationPoints[ctx->calibrationIndex];
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	3324      	adds	r3, #36	@ 0x24
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	885a      	ldrh	r2, [r3, #2]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	809a      	strh	r2, [r3, #4]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <clearVoltage>:

void clearVoltage(AppContext *ctx) {
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	719a      	strb	r2, [r3, #6]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <backspace>:

void backspace(AppContext *ctx) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	889b      	ldrh	r3, [r3, #4]
 800071c:	4a06      	ldr	r2, [pc, #24]	@ (8000738 <backspace+0x28>)
 800071e:	fba2 2303 	umull	r2, r3, r2, r3
 8000722:	08db      	lsrs	r3, r3, #3
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	809a      	strh	r2, [r3, #4]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	cccccccd 	.word	0xcccccccd

0800073c <stopPWM>:

void stopPWM(AppContext *ctx, CallbackFunction stopPwmCallback) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  ctx->isPwmRunning = false;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	71da      	strb	r2, [r3, #7]
  stopPwmCallback();
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	4798      	blx	r3
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <LinearInterpolate>:

uint16_t LinearInterpolate(uint16_t x, uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1) {
 8000758:	b490      	push	{r4, r7}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4604      	mov	r4, r0
 8000760:	4608      	mov	r0, r1
 8000762:	4611      	mov	r1, r2
 8000764:	461a      	mov	r2, r3
 8000766:	4623      	mov	r3, r4
 8000768:	80fb      	strh	r3, [r7, #6]
 800076a:	4603      	mov	r3, r0
 800076c:	80bb      	strh	r3, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	807b      	strh	r3, [r7, #2]
 8000772:	4613      	mov	r3, r2
 8000774:	803b      	strh	r3, [r7, #0]
    if (x1 == x0) return y0; // Prevent division by zero
 8000776:	887a      	ldrh	r2, [r7, #2]
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	d101      	bne.n	8000782 <LinearInterpolate+0x2a>
 800077e:	883b      	ldrh	r3, [r7, #0]
 8000780:	e011      	b.n	80007a6 <LinearInterpolate+0x4e>
    return y0 + ((uint32_t)(x - x0) * (y1 - y0)) / (x1 - x0);
 8000782:	88fa      	ldrh	r2, [r7, #6]
 8000784:	88bb      	ldrh	r3, [r7, #4]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	4619      	mov	r1, r3
 800078a:	8a3a      	ldrh	r2, [r7, #16]
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	fb01 f303 	mul.w	r3, r1, r3
 8000794:	8879      	ldrh	r1, [r7, #2]
 8000796:	88ba      	ldrh	r2, [r7, #4]
 8000798:	1a8a      	subs	r2, r1, r2
 800079a:	fbb3 f3f2 	udiv	r3, r3, r2
 800079e:	b29a      	uxth	r2, r3
 80007a0:	883b      	ldrh	r3, [r7, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	b29b      	uxth	r3, r3
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc90      	pop	{r4, r7}
 80007ae:	4770      	bx	lr

080007b0 <GetPwmForVoltage>:

uint16_t GetPwmForVoltage(AppContext* ctx) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	6078      	str	r0, [r7, #4]
    if (ctx->voltage <= 80) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	885b      	ldrh	r3, [r3, #2]
 80007bc:	2b50      	cmp	r3, #80	@ 0x50
 80007be:	d803      	bhi.n	80007c8 <GetPwmForVoltage+0x18>
        return ctx->calibrationPoints[0];
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80007c6:	e02c      	b.n	8000822 <GetPwmForVoltage+0x72>
    } else if (ctx->voltage <= 200) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	885b      	ldrh	r3, [r3, #2]
 80007cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80007ce:	d80f      	bhi.n	80007f0 <GetPwmForVoltage+0x40>
        return LinearInterpolate(ctx->voltage, 80, 200, ctx->calibrationPoints[0], ctx->calibrationPoints[1]);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	8858      	ldrh	r0, [r3, #2]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	4613      	mov	r3, r2
 80007e4:	22c8      	movs	r2, #200	@ 0xc8
 80007e6:	2150      	movs	r1, #80	@ 0x50
 80007e8:	f7ff ffb6 	bl	8000758 <LinearInterpolate>
 80007ec:	4603      	mov	r3, r0
 80007ee:	e018      	b.n	8000822 <GetPwmForVoltage+0x72>
    } else if (ctx->voltage <= 400) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	885b      	ldrh	r3, [r3, #2]
 80007f4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80007f8:	d810      	bhi.n	800081c <GetPwmForVoltage+0x6c>
        return LinearInterpolate(ctx->voltage, 200, 400, ctx->calibrationPoints[1], ctx->calibrationPoints[2]);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8858      	ldrh	r0, [r3, #2]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000812:	21c8      	movs	r1, #200	@ 0xc8
 8000814:	f7ff ffa0 	bl	8000758 <LinearInterpolate>
 8000818:	4603      	mov	r3, r0
 800081a:	e002      	b.n	8000822 <GetPwmForVoltage+0x72>
    } else {
        return ctx->calibrationPoints[2];
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
    }
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <startPWM>:

void startPWM(AppContext *ctx, CallbackWithParam startPwmCallback) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	6039      	str	r1, [r7, #0]
  ctx->isPwmRunning = true;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	71da      	strb	r2, [r3, #7]
  uint16_t percent = GetPwmForVoltage(ctx);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffb8 	bl	80007b0 <GetPwmForVoltage>
 8000840:	4603      	mov	r3, r0
 8000842:	81fb      	strh	r3, [r7, #14]
  startPwmCallback(percent);
 8000844:	89fa      	ldrh	r2, [r7, #14]
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	4610      	mov	r0, r2
 800084a:	4798      	blx	r3
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <setSTATE_F3>:

void setSTATE_F3(AppContext *ctx) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  clearInput(ctx);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff25 	bl	80006ac <clearInput>
  ctx->currentState = STATE_F3;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2202      	movs	r2, #2
 8000866:	701a      	strb	r2, [r3, #0]
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
  ctx->calibrationIndex = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  ctx->inputValue = ctx->calibrationPoints[0];
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	809a      	strh	r2, [r3, #4]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  clearInput(ctx);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff01 	bl	80006ac <clearInput>
  ctx->currentState = STATE_F1;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	889b      	ldrh	r3, [r3, #4]
 80008c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80008c6:	d904      	bls.n	80008d2 <validateAndSetVoltage+0x1a>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	889b      	ldrh	r3, [r3, #4]
 80008cc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80008d0:	d914      	bls.n	80008fc <validateAndSetVoltage+0x44>
  {
    strcpy(ctx->message, "Not in range 80 - 400!");
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3309      	adds	r3, #9
 80008d6:	4a10      	ldr	r2, [pc, #64]	@ (8000918 <validateAndSetVoltage+0x60>)
 80008d8:	461c      	mov	r4, r3
 80008da:	4615      	mov	r5, r2
 80008dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008de:	6020      	str	r0, [r4, #0]
 80008e0:	6061      	str	r1, [r4, #4]
 80008e2:	60a2      	str	r2, [r4, #8]
 80008e4:	60e3      	str	r3, [r4, #12]
 80008e6:	6828      	ldr	r0, [r5, #0]
 80008e8:	6120      	str	r0, [r4, #16]
 80008ea:	88ab      	ldrh	r3, [r5, #4]
 80008ec:	79aa      	ldrb	r2, [r5, #6]
 80008ee:	82a3      	strh	r3, [r4, #20]
 80008f0:	4613      	mov	r3, r2
 80008f2:	75a3      	strb	r3, [r4, #22]
    clearInput(ctx);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fed9 	bl	80006ac <clearInput>
    return;
 80008fa:	e009      	b.n	8000910 <validateAndSetVoltage+0x58>
  }
  ctx->isVoltageEntered = true;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2201      	movs	r2, #1
 8000900:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	889a      	ldrh	r2, [r3, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	809a      	strh	r2, [r3, #4]
}
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bdb0      	pop	{r4, r5, r7, pc}
 8000916:	bf00      	nop
 8000918:	0800c518 	.word	0x0800c518

0800091c <validateAndSetCalibration>:

void validateAndSetCalibration(AppContext *ctx) {
 800091c:	b5b0      	push	{r4, r5, r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 0 || ctx->inputValue > 100)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	889b      	ldrh	r3, [r3, #4]
 8000928:	2b64      	cmp	r3, #100	@ 0x64
 800092a:	d911      	bls.n	8000950 <validateAndSetCalibration+0x34>
  {
    strcpy(ctx->message, "Not in range 0 - 100!");
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3309      	adds	r3, #9
 8000930:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <validateAndSetCalibration+0x8c>)
 8000932:	461d      	mov	r5, r3
 8000934:	4614      	mov	r4, r2
 8000936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000938:	6028      	str	r0, [r5, #0]
 800093a:	6069      	str	r1, [r5, #4]
 800093c:	60aa      	str	r2, [r5, #8]
 800093e:	60eb      	str	r3, [r5, #12]
 8000940:	6820      	ldr	r0, [r4, #0]
 8000942:	6128      	str	r0, [r5, #16]
 8000944:	88a3      	ldrh	r3, [r4, #4]
 8000946:	82ab      	strh	r3, [r5, #20]
    clearInput(ctx);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff feaf 	bl	80006ac <clearInput>
    return;
 800094e:	e027      	b.n	80009a0 <validateAndSetCalibration+0x84>
  }
  ctx->calibrationPoints[ctx->calibrationIndex] = ctx->inputValue;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000956:	4618      	mov	r0, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	8899      	ldrh	r1, [r3, #4]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	f100 0324 	add.w	r3, r0, #36	@ 0x24
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4413      	add	r3, r2
 8000966:	460a      	mov	r2, r1
 8000968:	805a      	strh	r2, [r3, #2]
  ctx->calibrationIndex = (ctx->calibrationIndex + 1) % 3;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <validateAndSetCalibration+0x90>)
 8000974:	fb83 3102 	smull	r3, r1, r3, r2
 8000978:	17d3      	asrs	r3, r2, #31
 800097a:	1ac9      	subs	r1, r1, r3
 800097c:	460b      	mov	r3, r1
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	440b      	add	r3, r1
 8000982:	1ad1      	subs	r1, r2, r3
 8000984:	b2ca      	uxtb	r2, r1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  ctx->inputValue = ctx->calibrationPoints[ctx->calibrationIndex];
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	3324      	adds	r3, #36	@ 0x24
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	885a      	ldrh	r2, [r3, #2]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	809a      	strh	r2, [r3, #4]
}
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bdb0      	pop	{r4, r5, r7, pc}
 80009a6:	bf00      	nop
 80009a8:	0800c530 	.word	0x0800c530
 80009ac:	55555556 	.word	0x55555556

080009b0 <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key, uint8_t maxValue) // maxValue is actually divided by 10
{
 80009b0:	b4b0      	push	{r4, r5, r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
 80009bc:	4613      	mov	r3, r2
 80009be:	70bb      	strb	r3, [r7, #2]
  uint8_t digit = key - '0';
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	3b30      	subs	r3, #48	@ 0x30
 80009c4:	73fb      	strb	r3, [r7, #15]
  if (ctx->inputValue > maxValue) {
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	889a      	ldrh	r2, [r3, #4]
 80009ca:	78bb      	ldrb	r3, [r7, #2]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d90a      	bls.n	80009e8 <updateInput+0x38>
    strcpy(ctx->message, "Input too high!");
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3309      	adds	r3, #9
 80009d6:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <updateInput+0x5c>)
 80009d8:	461c      	mov	r4, r3
 80009da:	4615      	mov	r5, r2
 80009dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009de:	6020      	str	r0, [r4, #0]
 80009e0:	6061      	str	r1, [r4, #4]
 80009e2:	60a2      	str	r2, [r4, #8]
 80009e4:	60e3      	str	r3, [r4, #12]
    return;
 80009e6:	e00c      	b.n	8000a02 <updateInput+0x52>
  }
  ctx->inputValue = ctx->inputValue * 10 + digit;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	889b      	ldrh	r3, [r3, #4]
 80009ec:	461a      	mov	r2, r3
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4413      	add	r3, r2
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	809a      	strh	r2, [r3, #4]
}
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bcb0      	pop	{r4, r5, r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	0800c548 	.word	0x0800c548

08000a10 <handle_event>:

bool handle_event(AppContext *ctx, KeyboardButton key, CallbackWithParam startPwmCallback, CallbackFunction stopPwmCallback)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	72fb      	strb	r3, [r7, #11]
  if (key == KEY_NULL)
 8000a20:	7afb      	ldrb	r3, [r7, #11]
 8000a22:	2b4e      	cmp	r3, #78	@ 0x4e
 8000a24:	d11f      	bne.n	8000a66 <handle_event+0x56>
  {
	  // cursor logic
	  uint32_t now = HAL_GetTick();
 8000a26:	f003 f9c1 	bl	8003dac <HAL_GetTick>
 8000a2a:	6178      	str	r0, [r7, #20]
	  if (now - lastCursorTime > 500)
 8000a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8000b9c <handle_event+0x18c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a38:	d913      	bls.n	8000a62 <handle_event+0x52>
	  {
		  ctx->displayCursor = !ctx->displayCursor;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	7a1b      	ldrb	r3, [r3, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bf14      	ite	ne
 8000a42:	2301      	movne	r3, #1
 8000a44:	2300      	moveq	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f083 0301 	eor.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	721a      	strb	r2, [r3, #8]
		  lastCursorTime = now;
 8000a58:	4a50      	ldr	r2, [pc, #320]	@ (8000b9c <handle_event+0x18c>)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	6013      	str	r3, [r2, #0]
		  return true;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e097      	b.n	8000b92 <handle_event+0x182>
	  }
	  return false;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e095      	b.n	8000b92 <handle_event+0x182>
  }
  strcpy(ctx->message, "");
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3309      	adds	r3, #9
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d148      	bne.n	8000b08 <handle_event+0xf8>
	if (ctx->isPwmRunning == true)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	79db      	ldrb	r3, [r3, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d008      	beq.n	8000a90 <handle_event+0x80>
	{
	  if (key == KEY_Stop) stopPWM(ctx, stopPwmCallback);
 8000a7e:	7afb      	ldrb	r3, [r7, #11]
 8000a80:	2b73      	cmp	r3, #115	@ 0x73
 8000a82:	d103      	bne.n	8000a8c <handle_event+0x7c>
 8000a84:	6839      	ldr	r1, [r7, #0]
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fe58 	bl	800073c <stopPWM>
	  return false; // when PWM is running, we can only press the "STOP" button
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e080      	b.n	8000b92 <handle_event+0x182>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	799b      	ldrb	r3, [r3, #6]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00d      	beq.n	8000ab4 <handle_event+0xa4>
	{
	  if (key == KEY_Start) {
 8000a98:	7afb      	ldrb	r3, [r7, #11]
 8000a9a:	2b53      	cmp	r3, #83	@ 0x53
 8000a9c:	d103      	bne.n	8000aa6 <handle_event+0x96>
		  startPWM(ctx, startPwmCallback);
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff fec2 	bl	800082a <startPWM>
	  }
      if (key == KEY_Clear) clearVoltage(ctx);
 8000aa6:	7afb      	ldrb	r3, [r7, #11]
 8000aa8:	2b63      	cmp	r3, #99	@ 0x63
 8000aaa:	d121      	bne.n	8000af0 <handle_event+0xe0>
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f7ff fe1e 	bl	80006ee <clearVoltage>
 8000ab2:	e01d      	b.n	8000af0 <handle_event+0xe0>
	} else
	{
	  if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key, 40);
 8000ab4:	7afb      	ldrb	r3, [r7, #11]
 8000ab6:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ab8:	d908      	bls.n	8000acc <handle_event+0xbc>
 8000aba:	7afb      	ldrb	r3, [r7, #11]
 8000abc:	2b39      	cmp	r3, #57	@ 0x39
 8000abe:	d805      	bhi.n	8000acc <handle_event+0xbc>
 8000ac0:	7afb      	ldrb	r3, [r7, #11]
 8000ac2:	2228      	movs	r2, #40	@ 0x28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f7ff ff72 	bl	80009b0 <updateInput>
	  if (key == KEY_Enter) validateAndSetVoltage(ctx);
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	2b65      	cmp	r3, #101	@ 0x65
 8000ad0:	d102      	bne.n	8000ad8 <handle_event+0xc8>
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff fef0 	bl	80008b8 <validateAndSetVoltage>
	  if (key == KEY_BkSp) backspace(ctx);
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	2b62      	cmp	r3, #98	@ 0x62
 8000adc:	d102      	bne.n	8000ae4 <handle_event+0xd4>
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fe16 	bl	8000710 <backspace>
	  if (key == KEY_ESC) clearInput(ctx);
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	2b60      	cmp	r3, #96	@ 0x60
 8000ae8:	d102      	bne.n	8000af0 <handle_event+0xe0>
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fdde 	bl	80006ac <clearInput>
	}

    if (key == KEY_F2) setSTATE_F2(ctx);
 8000af0:	7afb      	ldrb	r3, [r7, #11]
 8000af2:	2b40      	cmp	r3, #64	@ 0x40
 8000af4:	d102      	bne.n	8000afc <handle_event+0xec>
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff feba 	bl	8000870 <setSTATE_F2>
    if (key == KEY_F3) setSTATE_F3(ctx);
 8000afc:	7afb      	ldrb	r3, [r7, #11]
 8000afe:	2b23      	cmp	r3, #35	@ 0x23
 8000b00:	d102      	bne.n	8000b08 <handle_event+0xf8>
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff fea6 	bl	8000854 <setSTATE_F3>
  }

  if (ctx->currentState == STATE_F2) {
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d12f      	bne.n	8000b70 <handle_event+0x160>
	if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key, 10);
 8000b10:	7afb      	ldrb	r3, [r7, #11]
 8000b12:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b14:	d908      	bls.n	8000b28 <handle_event+0x118>
 8000b16:	7afb      	ldrb	r3, [r7, #11]
 8000b18:	2b39      	cmp	r3, #57	@ 0x39
 8000b1a:	d805      	bhi.n	8000b28 <handle_event+0x118>
 8000b1c:	7afb      	ldrb	r3, [r7, #11]
 8000b1e:	220a      	movs	r2, #10
 8000b20:	4619      	mov	r1, r3
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff ff44 	bl	80009b0 <updateInput>
	if (key == KEY_Enter) validateAndSetCalibration(ctx);
 8000b28:	7afb      	ldrb	r3, [r7, #11]
 8000b2a:	2b65      	cmp	r3, #101	@ 0x65
 8000b2c:	d102      	bne.n	8000b34 <handle_event+0x124>
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff fef4 	bl	800091c <validateAndSetCalibration>
	if (key == KEY_BkSp) backspace(ctx);
 8000b34:	7afb      	ldrb	r3, [r7, #11]
 8000b36:	2b62      	cmp	r3, #98	@ 0x62
 8000b38:	d102      	bne.n	8000b40 <handle_event+0x130>
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f7ff fde8 	bl	8000710 <backspace>
	if (key == KEY_ESC) revertCalibration(ctx);
 8000b40:	7afb      	ldrb	r3, [r7, #11]
 8000b42:	2b60      	cmp	r3, #96	@ 0x60
 8000b44:	d102      	bne.n	8000b4c <handle_event+0x13c>
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff fdbd 	bl	80006c6 <revertCalibration>
	if (key == KEY_Clear) clearInput(ctx);
 8000b4c:	7afb      	ldrb	r3, [r7, #11]
 8000b4e:	2b63      	cmp	r3, #99	@ 0x63
 8000b50:	d102      	bne.n	8000b58 <handle_event+0x148>
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f7ff fdaa 	bl	80006ac <clearInput>
	if (key == KEY_F1) setSTATE_F1(ctx);
 8000b58:	7afb      	ldrb	r3, [r7, #11]
 8000b5a:	2b21      	cmp	r3, #33	@ 0x21
 8000b5c:	d102      	bne.n	8000b64 <handle_event+0x154>
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f7ff fe9c 	bl	800089c <setSTATE_F1>
	if (key == KEY_F3) setSTATE_F3(ctx);
 8000b64:	7afb      	ldrb	r3, [r7, #11]
 8000b66:	2b23      	cmp	r3, #35	@ 0x23
 8000b68:	d102      	bne.n	8000b70 <handle_event+0x160>
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff fe72 	bl	8000854 <setSTATE_F3>
  }

  if (ctx->currentState == STATE_F3) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d10b      	bne.n	8000b90 <handle_event+0x180>
	if (key == KEY_F1) setSTATE_F1(ctx);
 8000b78:	7afb      	ldrb	r3, [r7, #11]
 8000b7a:	2b21      	cmp	r3, #33	@ 0x21
 8000b7c:	d102      	bne.n	8000b84 <handle_event+0x174>
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff fe8c 	bl	800089c <setSTATE_F1>
	if (key == KEY_F2) setSTATE_F2(ctx);
 8000b84:	7afb      	ldrb	r3, [r7, #11]
 8000b86:	2b40      	cmp	r3, #64	@ 0x40
 8000b88:	d102      	bne.n	8000b90 <handle_event+0x180>
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fe70 	bl	8000870 <setSTATE_F2>
  }
return true;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2400010c 	.word	0x2400010c

08000ba0 <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	ctx->isVoltageEntered = false;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	809a      	strh	r2, [r3, #4]
	strcpy(ctx->message, " ");
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3309      	adds	r3, #9
 8000bc4:	490b      	ldr	r1, [pc, #44]	@ (8000bf4 <InitializeAppContext+0x54>)
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	460b      	mov	r3, r1
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	8013      	strh	r3, [r2, #0]

	ctx->calibrationPoints[0] = 20; // TODO - persist those values in flash
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2214      	movs	r2, #20
 8000bd2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	ctx->calibrationPoints[1] = 50;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2232      	movs	r2, #50	@ 0x32
 8000bda:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	ctx->calibrationPoints[2] = 100;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2264      	movs	r2, #100	@ 0x64
 8000be2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

	setSTATE_F2(ctx);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fe42 	bl	8000870 <setSTATE_F2>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	0800c558 	.word	0x0800c558

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c34 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000bfc:	f003 f830 	bl	8003c60 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f002 ffcc 	bl	8003b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f00a fd85 	bl	800b738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f000 f80f 	bl	8000c50 <main>
  bx  lr
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c3c:	240000f0 	.word	0x240000f0
  ldr r2, =_sidata
 8000c40:	080112e8 	.word	0x080112e8
  ldr r2, =_sbss
 8000c44:	240000f0 	.word	0x240000f0
  ldr r4, =_ebss
 8000c48:	2400112c 	.word	0x2400112c

08000c4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC3_IRQHandler>
	...

08000c50 <main>:
void TIM8_Stop();
void TIM8_Start(uint16_t percent);
void MX_TIM8_PWM_Init();

int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b096      	sub	sp, #88	@ 0x58
 8000c54:	af00      	add	r7, sp, #0
  MPU_Config(); // Configure the MPU attributes as Write Through for SDRAM
 8000c56:	f000 fb65 	bl	8001324 <MPU_Config>
  CPU_CACHE_Enable();
 8000c5a:	f000 fad1 	bl	8001200 <CPU_CACHE_Enable>
  HAL_Init();
 8000c5e:	f003 f817 	bl	8003c90 <HAL_Init>
  SystemClock_Config();
 8000c62:	f000 f9c9 	bl	8000ff8 <SystemClock_Config>
  MX_USART3_UART_Init();
 8000c66:	f000 f90d 	bl	8000e84 <MX_USART3_UART_Init>

  printf("Starting fresh...\r\n");
 8000c6a:	4818      	ldr	r0, [pc, #96]	@ (8000ccc <main+0x7c>)
 8000c6c:	f00a fc0e 	bl	800b48c <puts>

  AppContext ctx;
  InitializeAppContext(&ctx);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff94 	bl	8000ba0 <InitializeAppContext>
  InitializeLcd();
 8000c78:	f000 fc86 	bl	8001588 <InitializeLcd>
  UartClearScreen();
 8000c7c:	f000 fcd4 	bl	8001628 <UartClearScreen>
  InitFlexiKeyboard(); // has to be AFTER InitializeLcd, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
 8000c80:	f00a f910 	bl	800aea4 <InitFlexiKeyboard>
  MX_TIM8_PWM_Init(); // initialize PWM output on pin PI2
 8000c84:	f000 f828 	bl	8000cd8 <MX_TIM8_PWM_Init>

  while (1)
  {
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 5ms blocking code to scan the keyboard
 8000c88:	f00a f8a6 	bl	800add8 <ReadFlexiKeyboard>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  bool ctxChanged = handle_event(&ctx, key, TIM8_Start, TIM8_Stop);
 8000c92:	f897 1057 	ldrb.w	r1, [r7, #87]	@ 0x57
 8000c96:	1d38      	adds	r0, r7, #4
 8000c98:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <main+0x80>)
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <main+0x84>)
 8000c9c:	f7ff feb8 	bl	8000a10 <handle_event>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	  if (!ctxChanged) continue; // no need to redraw display
 8000ca6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000caa:	f083 0301 	eor.w	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d108      	bne.n	8000cc6 <main+0x76>
	  UartRenderState(&ctx);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fcc4 	bl	8001644 <UartRenderState>
	  DisplayRenderState(&ctx);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fee8 	bl	8001a94 <DisplayRenderState>
 8000cc4:	e7e0      	b.n	8000c88 <main+0x38>
	  if (!ctxChanged) continue; // no need to redraw display
 8000cc6:	bf00      	nop
  {
 8000cc8:	e7de      	b.n	8000c88 <main+0x38>
 8000cca:	bf00      	nop
 8000ccc:	0800c55c 	.word	0x0800c55c
 8000cd0:	08000e41 	.word	0x08000e41
 8000cd4:	08000df9 	.word	0x08000df9

08000cd8 <MX_TIM8_PWM_Init>:
  }
}

void MX_TIM8_PWM_Init()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	@ 0x48
 8000cdc:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cde:	4b42      	ldr	r3, [pc, #264]	@ (8000de8 <MX_TIM8_PWM_Init+0x110>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	4a40      	ldr	r2, [pc, #256]	@ (8000de8 <MX_TIM8_PWM_Init+0x110>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cee:	4b3e      	ldr	r3, [pc, #248]	@ (8000de8 <MX_TIM8_PWM_Init+0x110>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000de8 <MX_TIM8_PWM_Init+0x110>)
 8000cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d02:	4a39      	ldr	r2, [pc, #228]	@ (8000de8 <MX_TIM8_PWM_Init+0x110>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d0c:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <MX_TIM8_PWM_Init+0x110>)
 8000d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4829      	ldr	r0, [pc, #164]	@ (8000dec <MX_TIM8_PWM_Init+0x114>)
 8000d46:	f003 fcdb 	bl	8004700 <HAL_GPIO_Init>

    uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // TIM8 is on APB2
 8000d4a:	f005 ff99 	bl	8006c80 <HAL_RCC_GetPCLK2Freq>
 8000d4e:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = 9;
 8000d50:	2309      	movs	r3, #9
 8000d52:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t period = (timerClock / ((prescaler + 1) * 5000)) - 1; // 10kHz - magic, I need to look at this deeper
 8000d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d56:	3301      	adds	r3, #1
 8000d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d5c:	fb02 f303 	mul.w	r3, r2, r3
 8000d60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	3b01      	subs	r3, #1
 8000d68:	63fb      	str	r3, [r7, #60]	@ 0x3c

    htim8.Instance = TIM8;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <MX_TIM8_PWM_Init+0x11c>)
 8000d6e:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler = prescaler;
 8000d70:	4a1f      	ldr	r2, [pc, #124]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d74:	6053      	str	r3, [r2, #4]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
    htim8.Init.Period = period;
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d80:	60d3      	str	r3, [r2, #12]
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) Error_Handler();
 8000d94:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000d96:	f007 fe58 	bl	8008a4a <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM8_PWM_Init+0xcc>
 8000da0:	f000 f926 	bl	8000ff0 <Error_Handler>

    TIM_OC_InitTypeDef sConfigOC = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db8:	2360      	movs	r3, #96	@ 0x60
 8000dba:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = 0; // (period + 1) * duty / 100;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]

    if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) Error_Handler();
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	220c      	movs	r2, #12
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <MX_TIM8_PWM_Init+0x118>)
 8000dd2:	f008 f8a5 	bl	8008f20 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM8_PWM_Init+0x108>
 8000ddc:	f000 f908 	bl	8000ff0 <Error_Handler>
}
 8000de0:	bf00      	nop
 8000de2:	3748      	adds	r7, #72	@ 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58022000 	.word	0x58022000
 8000df0:	24000110 	.word	0x24000110
 8000df4:	40010400 	.word	0x40010400

08000df8 <TIM8_Start>:

void TIM8_Start(uint16_t percent)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	// TODO convert voltage to PWM percentage using calibration points
    uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim8);
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <TIM8_Start+0x40>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e08:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = (period + 1) * percent / 100;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	88fa      	ldrh	r2, [r7, #6]
 8000e10:	fb02 f303 	mul.w	r3, r2, r3
 8000e14:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <TIM8_Start+0x44>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pulse);
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <TIM8_Start+0x40>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e26:	210c      	movs	r1, #12
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <TIM8_Start+0x40>)
 8000e2a:	f007 fed5 	bl	8008bd8 <HAL_TIM_PWM_Start>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24000110 	.word	0x24000110
 8000e3c:	51eb851f 	.word	0x51eb851f

08000e40 <TIM8_Stop>:

void TIM8_Stop()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
 8000e44:	210c      	movs	r1, #12
 8000e46:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <TIM8_Stop+0x10>)
 8000e48:	f007 ffd4 	bl	8008df4 <HAL_TIM_PWM_Stop>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	24000110 	.word	0x24000110

08000e54 <__io_putchar>:

int __io_putchar(int ch) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000e5c:	1d39      	adds	r1, r7, #4
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	2201      	movs	r2, #1
 8000e64:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <__io_putchar+0x2c>)
 8000e66:	f008 fd5a 	bl	800991e <HAL_UART_Transmit>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <__io_putchar+0x22>
    return -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	e000      	b.n	8000e78 <__io_putchar+0x24>
  }
  return ch;
 8000e76:	687b      	ldr	r3, [r7, #4]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2400015c 	.word	0x2400015c

08000e84 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <MX_USART3_UART_Init+0x94>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ece:	f008 fcd6 	bl	800987e <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ed8:	f000 f88a 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ee0:	f009 fd6d 	bl	800a9be <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eea:	f000 f881 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4808      	ldr	r0, [pc, #32]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000ef2:	f009 fda2 	bl	800aa3a <HAL_UARTEx_SetRxFifoThreshold>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 f878 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_USART3_UART_Init+0x90>)
 8000f02:	f009 fd23 	bl	800a94c <HAL_UARTEx_DisableFifoMode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 f870 	bl	8000ff0 <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2400015c 	.word	0x2400015c
 8000f18:	40004800 	.word	0x40004800

08000f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	22c0      	movs	r2, #192	@ 0xc0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00a fba7 	bl	800b690 <memset>
  if(huart->Instance==USART3)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <HAL_UART_MspInit+0xc8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d146      	bne.n	8000fda <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f4c:	f04f 0202 	mov.w	r2, #2
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 fea2 	bl	8006cac <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f6e:	f000 f83f 	bl	8000ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <HAL_UART_MspInit+0xcc>)
 8000f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f78:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe8 <HAL_UART_MspInit+0xcc>)
 8000f7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f82:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_UART_MspInit+0xcc>)
 8000f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_UART_MspInit+0xcc>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <HAL_UART_MspInit+0xcc>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_UART_MspInit+0xcc>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <HAL_UART_MspInit+0xd0>)
 8000fd6:	f003 fb93 	bl	8004700 <HAL_GPIO_Init>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	37e8      	adds	r7, #232	@ 0xe8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40004800 	.word	0x40004800
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	58020400 	.word	0x58020400

08000ff0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  while(1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <Error_Handler+0x4>

08000ff8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ce      	sub	sp, #312	@ 0x138
 8000ffc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001008:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	4b78      	ldr	r3, [pc, #480]	@ (80011f4 <SystemClock_Config+0x1fc>)
 8001012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001014:	4a77      	ldr	r2, [pc, #476]	@ (80011f4 <SystemClock_Config+0x1fc>)
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800101c:	4b75      	ldr	r3, [pc, #468]	@ (80011f4 <SystemClock_Config+0x1fc>)
 800101e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001020:	f003 0201 	and.w	r2, r3, #1
 8001024:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001028:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	4b72      	ldr	r3, [pc, #456]	@ (80011f8 <SystemClock_Config+0x200>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a71      	ldr	r2, [pc, #452]	@ (80011f8 <SystemClock_Config+0x200>)
 8001034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b6f      	ldr	r3, [pc, #444]	@ (80011f8 <SystemClock_Config+0x200>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8001042:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001046:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001050:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001054:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001056:	bf00      	nop
 8001058:	4b67      	ldr	r3, [pc, #412]	@ (80011f8 <SystemClock_Config+0x200>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001064:	d1f8      	bne.n	8001058 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001066:	2301      	movs	r3, #1
 8001068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001070:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
 800108c:	2305      	movs	r3, #5
 800108e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001092:	23a0      	movs	r3, #160	@ 0xa0
 8001094:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010b6:	2308      	movs	r3, #8
 80010b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80010bc:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fe0d 	bl	8005ce0 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
 80010cc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80010d4:	f7ff ff8c 	bl	8000ff0 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
 80010d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010dc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80010e0:	2205      	movs	r2, #5
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
 80010e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010e8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80010ec:	2260      	movs	r2, #96	@ 0x60
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80010f8:	2202      	movs	r2, #2
 80010fa:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
 80010fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001100:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001104:	220a      	movs	r2, #10
 8001106:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
 8001108:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800110c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001110:	2212      	movs	r2, #18
 8001112:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001114:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001118:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800111c:	2200      	movs	r2, #0
 800111e:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001120:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001124:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001128:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800112c:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800112e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001132:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
 8001136:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001142:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001146:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800114a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800114e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4618      	mov	r0, r3
 8001158:	f005 fda8 	bl	8006cac <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800115c:	233f      	movs	r3, #63	@ 0x3f
 800115e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2303      	movs	r3, #3
 8001164:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800116e:	2308      	movs	r3, #8
 8001170:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001174:	2340      	movs	r3, #64	@ 0x40
 8001176:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800117a:	2340      	movs	r3, #64	@ 0x40
 800117c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001184:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001188:	2340      	movs	r3, #64	@ 0x40
 800118a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800118e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001192:	2104      	movs	r1, #4
 8001194:	4618      	mov	r0, r3
 8001196:	f005 f9fd 	bl	8006594 <HAL_RCC_ClockConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
 80011a0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x1b4>
  {
    Error_Handler();
 80011a8:	f7ff ff22 	bl	8000ff0 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <SystemClock_Config+0x204>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <SystemClock_Config+0x204>)
 80011b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b6:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <SystemClock_Config+0x204>)
 80011ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011be:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <SystemClock_Config+0x204>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <SystemClock_Config+0x204>)
 80011ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ce:	f003 0202 	and.w	r2, r3, #2
 80011d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011e0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80011e4:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 80011e6:	f002 fe1d 	bl	8003e24 <HAL_EnableCompensationCell>
}
 80011ea:	bf00      	nop
 80011ec:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58000400 	.word	0x58000400
 80011f8:	58024800 	.word	0x58024800
 80011fc:	58024400 	.word	0x58024400

08001200 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001206:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11b      	bne.n	800124a <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001212:	f3bf 8f4f 	dsb	sy
}
 8001216:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001218:	f3bf 8f6f 	isb	sy
}
 800121c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001226:	f3bf 8f4f 	dsb	sy
}
 800122a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800122c:	f3bf 8f6f 	isb	sy
}
 8001230:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001232:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a28      	ldr	r2, [pc, #160]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800123e:	f3bf 8f4f 	dsb	sy
}
 8001242:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001244:	f3bf 8f6f 	isb	sy
}
 8001248:	e000      	b.n	800124c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800124a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d138      	bne.n	80012ca <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 8001268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0b5b      	lsrs	r3, r3, #13
 8001272:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001276:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001280:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800128a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001290:	4911      	ldr	r1, [pc, #68]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 8001292:	4313      	orrs	r3, r2
 8001294:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ef      	bne.n	8001282 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e5      	bne.n	8001278 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ac:	f3bf 8f4f 	dsb	sy
}
 80012b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <CPU_CACHE_Enable+0xd8>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012be:	f3bf 8f4f 	dsb	sy
}
 80012c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c4:	f3bf 8f6f 	isb	sy
}
 80012c8:	e000      	b.n	80012cc <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012ca:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012e4:	490e      	ldr	r1, [pc, #56]	@ (8001320 <MX_LTDC_ClockConfig+0x44>)
 80012e6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_LTDC_ClockConfig+0x44>)
 80012f4:	2205      	movs	r2, #5
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_LTDC_ClockConfig+0x44>)
 80012fa:	22c0      	movs	r2, #192	@ 0xc0
 80012fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_LTDC_ClockConfig+0x44>)
 8001300:	2202      	movs	r2, #2
 8001302:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_LTDC_ClockConfig+0x44>)
 8001306:	2214      	movs	r2, #20
 8001308:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <MX_LTDC_ClockConfig+0x44>)
 800130c:	2263      	movs	r2, #99	@ 0x63
 800130e:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <MX_LTDC_ClockConfig+0x44>)
 8001312:	f005 fccb 	bl	8006cac <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	240001f0 	.word	0x240001f0

08001324 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 800132a:	f002 fe9b 	bl	8004064 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800132e:	2301      	movs	r3, #1
 8001330:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8001332:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8001336:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8001338:	2318      	movs	r3, #24
 800133a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800133c:	2303      	movs	r3, #3
 800133e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001344:	2301      	movs	r3, #1
 8001346:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800134c:	2301      	movs	r3, #1
 800134e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001350:	2300      	movs	r3, #0
 8001352:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800135c:	463b      	mov	r3, r7
 800135e:	4618      	mov	r0, r3
 8001360:	f002 feb8 	bl	80040d4 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001364:	2004      	movs	r0, #4
 8001366:	f002 fe95 	bl	8004094 <HAL_MPU_Enable>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <UsageFault_Handler+0x4>

080013a0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80013ce:	f002 fcd9 	bl	8003d84 <HAL_IncTick>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e00a      	b.n	80013fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013e8:	f3af 8000 	nop.w
 80013ec:	4601      	mov	r1, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	60ba      	str	r2, [r7, #8]
 80013f4:	b2ca      	uxtb	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	dbf0      	blt.n	80013e8 <_read+0x12>
  }

  return len;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e009      	b.n	8001436 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	60ba      	str	r2, [r7, #8]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fd12 	bl	8000e54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	dbf1      	blt.n	8001422 <_write+0x12>
  }
  return len;
 800143e:	687b      	ldr	r3, [r7, #4]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_close>:

int _close(int file)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001470:	605a      	str	r2, [r3, #4]
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_isatty>:

int _isatty(int file)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	@ (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f00a f924 	bl	800b72c <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	24080000 	.word	0x24080000
 8001510:	00000400 	.word	0x00000400
 8001514:	240002b0 	.word	0x240002b0
 8001518:	24001130 	.word	0x24001130

0800151c <ClearCache>:
uint32_t foregroundColor = UTIL_LCD_COLOR_GREEN; // Default: white
uint32_t backgroundColor = UTIL_LCD_COLOR_BLACK; // Default: black
sFONT *font = &Font32;

void ClearCache()
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
	// otherwise I get LCD artefacts
	//SCB_CleanDCache_by_Addr((void *)SDRAM_DEVICE_ADDR, 480*272*4*2);
	SCB_CleanDCache_by_Addr((uint32_t *)backBuffer, BUFFER_SIZE);
 8001522:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <ClearCache+0x64>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	f44f 23ff 	mov.w	r3, #522240	@ 0x7f800
 800152c:	60bb      	str	r3, [r7, #8]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	dd1d      	ble.n	8001570 <ClearCache+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 021f 	and.w	r2, r3, #31
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4413      	add	r3, r2
 800153e:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001544:	f3bf 8f4f 	dsb	sy
}
 8001548:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800154a:	4a0e      	ldr	r2, [pc, #56]	@ (8001584 <ClearCache+0x68>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	3320      	adds	r3, #32
 8001556:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b20      	subs	r3, #32
 800155c:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	dcf2      	bgt.n	800154a <ClearCache+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 8001564:	f3bf 8f4f 	dsb	sy
}
 8001568:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156a:	f3bf 8f6f 	isb	sy
}
 800156e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001570:	bf00      	nop
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	24000004 	.word	0x24000004
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <InitializeLcd>:

void InitializeLcd(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800158c:	2101      	movs	r1, #1
 800158e:	2000      	movs	r0, #0
 8001590:	f001 fa78 	bl	8002a84 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001594:	4816      	ldr	r0, [pc, #88]	@ (80015f0 <InitializeLcd+0x68>)
 8001596:	f009 fd4f 	bl	800b038 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
 800159a:	2000      	movs	r0, #0
 800159c:	f009 fda2 	bl	800b0e4 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80015a0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80015a4:	f009 fdf8 	bl	800b198 <UTIL_LCD_Clear>

  BSP_LCD_SetLayerAddress(0, 0, (uint32_t)backBuffer);
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <InitializeLcd+0x6c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	2100      	movs	r1, #0
 80015b0:	2000      	movs	r0, #0
 80015b2:	f001 fc21 	bl	8002df8 <BSP_LCD_SetLayerAddress>
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80015b6:	2102      	movs	r1, #2
 80015b8:	480f      	ldr	r0, [pc, #60]	@ (80015f8 <InitializeLcd+0x70>)
 80015ba:	f004 f87d 	bl	80056b8 <HAL_LTDC_Reload>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80015be:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80015c2:	f009 fde9 	bl	800b198 <UTIL_LCD_Clear>

  BSP_LCD_GetXSize(0, &x_size);
 80015c6:	490d      	ldr	r1, [pc, #52]	@ (80015fc <InitializeLcd+0x74>)
 80015c8:	2000      	movs	r0, #0
 80015ca:	f001 fc41 	bl	8002e50 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80015ce:	490c      	ldr	r1, [pc, #48]	@ (8001600 <InitializeLcd+0x78>)
 80015d0:	2000      	movs	r0, #0
 80015d2:	f001 fc5b 	bl	8002e8c <BSP_LCD_GetYSize>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 80015d6:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80015da:	f009 fda1 	bl	800b120 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80015de:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80015e2:	f009 fdb1 	bl	800b148 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
 80015e6:	4807      	ldr	r0, [pc, #28]	@ (8001604 <InitializeLcd+0x7c>)
 80015e8:	f009 fdc2 	bl	800b170 <UTIL_LCD_SetFont>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	0800c7ec 	.word	0x0800c7ec
 80015f4:	24000004 	.word	0x24000004
 80015f8:	24000de4 	.word	0x24000de4
 80015fc:	240002b4 	.word	0x240002b4
 8001600:	240002b8 	.word	0x240002b8
 8001604:	2400007c 	.word	0x2400007c

08001608 <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4803      	ldr	r0, [pc, #12]	@ (8001624 <uartSetCursorPosition+0x1c>)
 8001618:	f009 fed0 	bl	800b3bc <iprintf>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	0800c570 	.word	0x0800c570

08001628 <UartClearScreen>:

void UartClearScreen() {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  printf("\033[2J");
 800162c:	4803      	ldr	r0, [pc, #12]	@ (800163c <UartClearScreen+0x14>)
 800162e:	f009 fec5 	bl	800b3bc <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
 8001632:	4803      	ldr	r0, [pc, #12]	@ (8001640 <UartClearScreen+0x18>)
 8001634:	f009 fec2 	bl	800b3bc <iprintf>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	0800c57c 	.word	0x0800c57c
 8001640:	0800c584 	.word	0x0800c584

08001644 <UartRenderState>:

void UartRenderState(AppContext *ctx) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uartSetCursorPosition(1, 1);
 800164c:	2101      	movs	r1, #1
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff ffda 	bl	8001608 <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d13a      	bne.n	80016d2 <UartRenderState+0x8e>
    printf("F1: Voltage control    ");
 800165c:	481f      	ldr	r0, [pc, #124]	@ (80016dc <UartRenderState+0x98>)
 800165e:	f009 fead 	bl	800b3bc <iprintf>
    uartSetCursorPosition(2, 1);
 8001662:	2101      	movs	r1, #1
 8001664:	2002      	movs	r0, #2
 8001666:	f7ff ffcf 	bl	8001608 <uartSetCursorPosition>
    printf("Current input: %d     ", ctx->inputValue);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	889b      	ldrh	r3, [r3, #4]
 800166e:	4619      	mov	r1, r3
 8001670:	481b      	ldr	r0, [pc, #108]	@ (80016e0 <UartRenderState+0x9c>)
 8001672:	f009 fea3 	bl	800b3bc <iprintf>
    uartSetCursorPosition(3, 1);
 8001676:	2101      	movs	r1, #1
 8001678:	2003      	movs	r0, #3
 800167a:	f7ff ffc5 	bl	8001608 <uartSetCursorPosition>
    if (ctx->voltage > 0) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	885b      	ldrh	r3, [r3, #2]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <UartRenderState+0x50>
      printf("Voltage: %dV     ", ctx->voltage);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	885b      	ldrh	r3, [r3, #2]
 800168a:	4619      	mov	r1, r3
 800168c:	4815      	ldr	r0, [pc, #84]	@ (80016e4 <UartRenderState+0xa0>)
 800168e:	f009 fe95 	bl	800b3bc <iprintf>
 8001692:	e002      	b.n	800169a <UartRenderState+0x56>
    } else {
      printf("Voltage: N/A     ");
 8001694:	4814      	ldr	r0, [pc, #80]	@ (80016e8 <UartRenderState+0xa4>)
 8001696:	f009 fe91 	bl	800b3bc <iprintf>
    }
    uartSetCursorPosition(4, 1);
 800169a:	2101      	movs	r1, #1
 800169c:	2004      	movs	r0, #4
 800169e:	f7ff ffb3 	bl	8001608 <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	79db      	ldrb	r3, [r3, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <UartRenderState+0x74>
      printf("PWM is running at %dV   ", ctx->voltage);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	885b      	ldrh	r3, [r3, #2]
 80016ae:	4619      	mov	r1, r3
 80016b0:	480e      	ldr	r0, [pc, #56]	@ (80016ec <UartRenderState+0xa8>)
 80016b2:	f009 fe83 	bl	800b3bc <iprintf>
 80016b6:	e002      	b.n	80016be <UartRenderState+0x7a>
    } else {
      printf("PWM is OFF              ");
 80016b8:	480d      	ldr	r0, [pc, #52]	@ (80016f0 <UartRenderState+0xac>)
 80016ba:	f009 fe7f 	bl	800b3bc <iprintf>
    }
    uartSetCursorPosition(5, 1);
 80016be:	2101      	movs	r1, #1
 80016c0:	2005      	movs	r0, #5
 80016c2:	f7ff ffa1 	bl	8001608 <uartSetCursorPosition>
    printf("%s                                                               \r\n", ctx->message);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3309      	adds	r3, #9
 80016ca:	4619      	mov	r1, r3
 80016cc:	4809      	ldr	r0, [pc, #36]	@ (80016f4 <UartRenderState+0xb0>)
 80016ce:	f009 fe75 	bl	800b3bc <iprintf>
  }
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	0800c588 	.word	0x0800c588
 80016e0:	0800c5a0 	.word	0x0800c5a0
 80016e4:	0800c5b8 	.word	0x0800c5b8
 80016e8:	0800c5cc 	.word	0x0800c5cc
 80016ec:	0800c5e0 	.word	0x0800c5e0
 80016f0:	0800c5fc 	.word	0x0800c5fc
 80016f4:	0800c618 	.word	0x0800c618

080016f8 <DrawPixel>:

void DrawPixel(uint16_t x, uint16_t y, uint32_t color)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	603a      	str	r2, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
 8001704:	460b      	mov	r3, r1
 8001706:	80bb      	strh	r3, [r7, #4]
    uint32_t index = y * LCD_WIDTH + x;
 8001708:	88ba      	ldrh	r2, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	015b      	lsls	r3, r3, #5
 8001712:	461a      	mov	r2, r3
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
    backBuffer[index] = color;
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <DrawPixel+0x3c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	24000004 	.word	0x24000004

08001738 <DrawLine>:


void DrawLine(int x0, int y0, int x1, int y1, uint32_t color)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
    int dx = abs(x1 - x0);
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	bfb8      	it	lt
 8001750:	425b      	neglt	r3, r3
 8001752:	623b      	str	r3, [r7, #32]
    int sx = x0 < x1 ? 1 : -1;
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	da01      	bge.n	8001760 <DrawLine+0x28>
 800175c:	2301      	movs	r3, #1
 800175e:	e001      	b.n	8001764 <DrawLine+0x2c>
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	61fb      	str	r3, [r7, #28]
    int dy = -abs(y1 - y0);
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	bfb8      	it	lt
 8001770:	425b      	neglt	r3, r3
 8001772:	425b      	negs	r3, r3
 8001774:	61bb      	str	r3, [r7, #24]
    int sy = y0 < y1 ? 1 : -1;
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	da01      	bge.n	8001782 <DrawLine+0x4a>
 800177e:	2301      	movs	r3, #1
 8001780:	e001      	b.n	8001786 <DrawLine+0x4e>
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	617b      	str	r3, [r7, #20]
    int err = dx + dy;  // error term
 8001788:	6a3a      	ldr	r2, [r7, #32]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4413      	add	r3, r2
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24

    while (1)
    {
        DrawPixel(x0, y0, color);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	b29b      	uxth	r3, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	b291      	uxth	r1, r2
 8001798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ffac 	bl	80016f8 <DrawPixel>

        if (x0 == x1 && y0 == y1)
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d103      	bne.n	80017b0 <DrawLine+0x78>
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d01b      	beq.n	80017e8 <DrawLine+0xb0>
            break;

        int e2 = 2 * err;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	613b      	str	r3, [r7, #16]
        if (e2 >= dy)
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	db07      	blt.n	80017ce <DrawLine+0x96>
        {
            err += dy;
 80017be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	4413      	add	r3, r2
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
            x0 += sx;
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
        }
        if (e2 <= dx)
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dcdc      	bgt.n	8001790 <DrawLine+0x58>
        {
            err += dx;
 80017d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	4413      	add	r3, r2
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
            y0 += sy;
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	60bb      	str	r3, [r7, #8]
    {
 80017e6:	e7d3      	b.n	8001790 <DrawLine+0x58>
            break;
 80017e8:	bf00      	nop
        }
    }
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	@ 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <DrawChar>:


void DrawChar(uint16_t x, uint16_t y, char c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
 80017fe:	460b      	mov	r3, r1
 8001800:	80bb      	strh	r3, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	70fb      	strb	r3, [r7, #3]
    uint16_t i, j;
    uint16_t width = font->Width;
 8001806:	4b35      	ldr	r3, [pc, #212]	@ (80018dc <DrawChar+0xe8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	889b      	ldrh	r3, [r3, #4]
 800180c:	837b      	strh	r3, [r7, #26]
    uint16_t height = font->Height;
 800180e:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <DrawChar+0xe8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	88db      	ldrh	r3, [r3, #6]
 8001814:	833b      	strh	r3, [r7, #24]
    uint8_t bytesPerRow = (width + 7) / 8;
 8001816:	8b7b      	ldrh	r3, [r7, #26]
 8001818:	3307      	adds	r3, #7
 800181a:	2b00      	cmp	r3, #0
 800181c:	da00      	bge.n	8001820 <DrawChar+0x2c>
 800181e:	3307      	adds	r3, #7
 8001820:	10db      	asrs	r3, r3, #3
 8001822:	75fb      	strb	r3, [r7, #23]

    const uint8_t *char_table = font->table + (c - 32) * height * bytesPerRow;
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <DrawChar+0xe8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	3a20      	subs	r2, #32
 800182e:	8b39      	ldrh	r1, [r7, #24]
 8001830:	fb01 f202 	mul.w	r2, r1, r2
 8001834:	7df9      	ldrb	r1, [r7, #23]
 8001836:	fb01 f202 	mul.w	r2, r1, r2
 800183a:	4413      	add	r3, r2
 800183c:	613b      	str	r3, [r7, #16]

    for (i = 0; i < height; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	83fb      	strh	r3, [r7, #30]
 8001842:	e042      	b.n	80018ca <DrawChar+0xd6>
    {
        for (j = 0; j < width; j++)
 8001844:	2300      	movs	r3, #0
 8001846:	83bb      	strh	r3, [r7, #28]
 8001848:	e038      	b.n	80018bc <DrawChar+0xc8>
        {
            // Find the byte and bit for this pixel
            uint8_t byte = char_table[i * bytesPerRow + (j / 8)];
 800184a:	8bfb      	ldrh	r3, [r7, #30]
 800184c:	7dfa      	ldrb	r2, [r7, #23]
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	8bba      	ldrh	r2, [r7, #28]
 8001854:	08d2      	lsrs	r2, r2, #3
 8001856:	b292      	uxth	r2, r2
 8001858:	4413      	add	r3, r2
 800185a:	461a      	mov	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4413      	add	r3, r2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	73fb      	strb	r3, [r7, #15]
            uint8_t bit = 1 << (7 - (j % 8));
 8001864:	8bbb      	ldrh	r3, [r7, #28]
 8001866:	43db      	mvns	r3, r3
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	2201      	movs	r2, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	73bb      	strb	r3, [r7, #14]

            if (byte & bit)
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	4013      	ands	r3, r2
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00d      	beq.n	800189c <DrawChar+0xa8>
            	DrawPixel(x + j, y + i, foregroundColor);
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	b298      	uxth	r0, r3
 8001888:	88ba      	ldrh	r2, [r7, #4]
 800188a:	8bfb      	ldrh	r3, [r7, #30]
 800188c:	4413      	add	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	4a13      	ldr	r2, [pc, #76]	@ (80018e0 <DrawChar+0xec>)
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff ff2f 	bl	80016f8 <DrawPixel>
 800189a:	e00c      	b.n	80018b6 <DrawChar+0xc2>
            else
            	DrawPixel(x + j, y + i, backgroundColor);
 800189c:	88fa      	ldrh	r2, [r7, #6]
 800189e:	8bbb      	ldrh	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	b298      	uxth	r0, r3
 80018a4:	88ba      	ldrh	r2, [r7, #4]
 80018a6:	8bfb      	ldrh	r3, [r7, #30]
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <DrawChar+0xf0>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff ff21 	bl	80016f8 <DrawPixel>
        for (j = 0; j < width; j++)
 80018b6:	8bbb      	ldrh	r3, [r7, #28]
 80018b8:	3301      	adds	r3, #1
 80018ba:	83bb      	strh	r3, [r7, #28]
 80018bc:	8bba      	ldrh	r2, [r7, #28]
 80018be:	8b7b      	ldrh	r3, [r7, #26]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3c2      	bcc.n	800184a <DrawChar+0x56>
    for (i = 0; i < height; i++)
 80018c4:	8bfb      	ldrh	r3, [r7, #30]
 80018c6:	3301      	adds	r3, #1
 80018c8:	83fb      	strh	r3, [r7, #30]
 80018ca:	8bfa      	ldrh	r2, [r7, #30]
 80018cc:	8b3b      	ldrh	r3, [r7, #24]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3b8      	bcc.n	8001844 <DrawChar+0x50>
        }
    }
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	24000010 	.word	0x24000010
 80018e0:	24000008 	.word	0x24000008
 80018e4:	2400000c 	.word	0x2400000c

080018e8 <DrawText>:

void DrawText(uint16_t x, uint16_t y, uint8_t *text)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	603a      	str	r2, [r7, #0]
 80018f2:	80fb      	strh	r3, [r7, #6]
 80018f4:	460b      	mov	r3, r1
 80018f6:	80bb      	strh	r3, [r7, #4]
    while (*text)
 80018f8:	e00f      	b.n	800191a <DrawText+0x32>
    {
        DrawChar(x, y, *text);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	88b9      	ldrh	r1, [r7, #4]
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff76 	bl	80017f4 <DrawChar>
        x += font->Width;
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <DrawText+0x44>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	889a      	ldrh	r2, [r3, #4]
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4413      	add	r3, r2
 8001912:	80fb      	strh	r3, [r7, #6]
        text++;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	603b      	str	r3, [r7, #0]
    while (*text)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1eb      	bne.n	80018fa <DrawText+0x12>
    }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	24000010 	.word	0x24000010

08001930 <displayPaddedLine>:

void displayPaddedLine(uint16_t y, const char *text)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	80fb      	strh	r3, [r7, #6]
//    if (len > LCD_LINE_WIDTH) len = LCD_LINE_WIDTH;
//    memcpy(padded, text, len);



    DrawText(0, y*(font->Height), (uint8_t *)text);
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <displayPaddedLine+0x2c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	88db      	ldrh	r3, [r3, #6]
 8001942:	88fa      	ldrh	r2, [r7, #6]
 8001944:	fb12 f303 	smulbb	r3, r2, r3
 8001948:	b29b      	uxth	r3, r3
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff ffca 	bl	80018e8 <DrawText>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	24000010 	.word	0x24000010

08001960 <getCursor>:

char getCursor(AppContext *ctx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	return ctx->displayCursor ? '_' : ' ';
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7a1b      	ldrb	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <getCursor+0x14>
 8001970:	235f      	movs	r3, #95	@ 0x5f
 8001972:	e000      	b.n	8001976 <getCursor+0x16>
 8001974:	2320      	movs	r3, #32
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <getValueWithCursor>:

const char* getValueWithCursor(AppContext *ctx) {
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    static char result[7];  // adjust size as needed
    if (ctx->inputValue != 0)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	889b      	ldrh	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00c      	beq.n	80019ae <getValueWithCursor+0x2a>
        sprintf(result, "%d%c", ctx->inputValue, getCursor(ctx));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	889b      	ldrh	r3, [r3, #4]
 8001998:	461c      	mov	r4, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffe0 	bl	8001960 <getCursor>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4622      	mov	r2, r4
 80019a4:	4909      	ldr	r1, [pc, #36]	@ (80019cc <getValueWithCursor+0x48>)
 80019a6:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <getValueWithCursor+0x4c>)
 80019a8:	f009 fd78 	bl	800b49c <siprintf>
 80019ac:	e008      	b.n	80019c0 <getValueWithCursor+0x3c>
    else
        sprintf(result, "%c", getCursor(ctx));
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffd6 	bl	8001960 <getCursor>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4906      	ldr	r1, [pc, #24]	@ (80019d4 <getValueWithCursor+0x50>)
 80019ba:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <getValueWithCursor+0x4c>)
 80019bc:	f009 fd6e 	bl	800b49c <siprintf>
    return result;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <getValueWithCursor+0x4c>)
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	0800c65c 	.word	0x0800c65c
 80019d0:	240002bc 	.word	0x240002bc
 80019d4:	0800c664 	.word	0x0800c664

080019d8 <DrawCalibrationLine>:

void DrawCalibrationLine(AppContext *ctx, uint16_t voltage, uint8_t idx)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b08b      	sub	sp, #44	@ 0x2c
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
 80019e4:	4613      	mov	r3, r2
 80019e6:	707b      	strb	r3, [r7, #1]
	char buffer[LCD_LINE_WIDTH+1];
    if (ctx->calibrationIndex == idx)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019ee:	787a      	ldrb	r2, [r7, #1]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d10b      	bne.n	8001a0c <DrawCalibrationLine+0x34>
    	sprintf(buffer, "PWM %% for %dV: %s", voltage, getValueWithCursor(ctx));
 80019f4:	887c      	ldrh	r4, [r7, #2]
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffc4 	bl	8001984 <getValueWithCursor>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f107 000c 	add.w	r0, r7, #12
 8001a02:	4622      	mov	r2, r4
 8001a04:	490f      	ldr	r1, [pc, #60]	@ (8001a44 <DrawCalibrationLine+0x6c>)
 8001a06:	f009 fd49 	bl	800b49c <siprintf>
 8001a0a:	e00c      	b.n	8001a26 <DrawCalibrationLine+0x4e>
    else
    	sprintf(buffer, "PWM %% for %dV: %d", voltage, ctx->calibrationPoints[idx]);
 8001a0c:	8879      	ldrh	r1, [r7, #2]
 8001a0e:	787b      	ldrb	r3, [r7, #1]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	3324      	adds	r3, #36	@ 0x24
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	885b      	ldrh	r3, [r3, #2]
 8001a1a:	f107 000c 	add.w	r0, r7, #12
 8001a1e:	460a      	mov	r2, r1
 8001a20:	4909      	ldr	r1, [pc, #36]	@ (8001a48 <DrawCalibrationLine+0x70>)
 8001a22:	f009 fd3b 	bl	800b49c <siprintf>
    displayPaddedLine(idx+1, buffer);
 8001a26:	787b      	ldrb	r3, [r7, #1]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f107 020c 	add.w	r2, r7, #12
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff7b 	bl	8001930 <displayPaddedLine>
}
 8001a3a:	bf00      	nop
 8001a3c:	372c      	adds	r7, #44	@ 0x2c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd90      	pop	{r4, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800c668 	.word	0x0800c668
 8001a48:	0800c67c 	.word	0x0800c67c

08001a4c <RenderNewFrame>:

void RenderNewFrame() // do the double buffering magic
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
  ClearCache();
 8001a52:	f7ff fd63 	bl	800151c <ClearCache>

  BSP_LCD_SetLayerAddress(0, 0, (uint32_t)backBuffer);
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <RenderNewFrame+0x3c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f001 f9ca 	bl	8002df8 <BSP_LCD_SetLayerAddress>
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001a64:	2102      	movs	r1, #2
 8001a66:	4809      	ldr	r0, [pc, #36]	@ (8001a8c <RenderNewFrame+0x40>)
 8001a68:	f003 fe26 	bl	80056b8 <HAL_LTDC_Reload>

  // Swap pointers
  uint32_t *temp = frontBuffer;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <RenderNewFrame+0x44>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	607b      	str	r3, [r7, #4]
  frontBuffer = backBuffer;
 8001a72:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <RenderNewFrame+0x3c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <RenderNewFrame+0x44>)
 8001a78:	6013      	str	r3, [r2, #0]
  backBuffer = temp;
 8001a7a:	4a03      	ldr	r2, [pc, #12]	@ (8001a88 <RenderNewFrame+0x3c>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	24000004 	.word	0x24000004
 8001a8c:	24000de4 	.word	0x24000de4
 8001a90:	24000000 	.word	0x24000000

08001a94 <DisplayRenderState>:

void DisplayRenderState(AppContext *ctx)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b093      	sub	sp, #76	@ 0x4c
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	6078      	str	r0, [r7, #4]
  char buffer[LCD_LINE_WIDTH+1];
  for (int x = 0; x < 480; x++) // basically clear screen. TODO: Make it much faster
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001aa0:	e015      	b.n	8001ace <DisplayRenderState+0x3a>
  {
	  for (int y = 0; y <272; y++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aa6:	e00b      	b.n	8001ac0 <DisplayRenderState+0x2c>
	  {
		  DrawPixel(x, y, UTIL_LCD_COLOR_BLACK);
 8001aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001aae:	b291      	uxth	r1, r2
 8001ab0:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe1f 	bl	80016f8 <DrawPixel>
	  for (int y = 0; y <272; y++)
 8001aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001abc:	3301      	adds	r3, #1
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac2:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001ac6:	dbef      	blt.n	8001aa8 <DisplayRenderState+0x14>
  for (int x = 0; x < 480; x++) // basically clear screen. TODO: Make it much faster
 8001ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aca:	3301      	adds	r3, #1
 8001acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ad0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001ad4:	dbe5      	blt.n	8001aa2 <DisplayRenderState+0xe>
	  }
  }
  font = &Font32;
 8001ad6:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <DisplayRenderState+0x11c>)
 8001ad8:	4a36      	ldr	r2, [pc, #216]	@ (8001bb4 <DisplayRenderState+0x120>)
 8001ada:	601a      	str	r2, [r3, #0]
  foregroundColor = UTIL_LCD_COLOR_GREEN;
 8001adc:	4b36      	ldr	r3, [pc, #216]	@ (8001bb8 <DisplayRenderState+0x124>)
 8001ade:	f04f 22ff 	mov.w	r2, #4278255360	@ 0xff00ff00
 8001ae2:	601a      	str	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d179      	bne.n	8001be0 <DisplayRenderState+0x14c>
	  //font = &Font40;
	displayPaddedLine(0, "F1: Voltage control");
 8001aec:	4933      	ldr	r1, [pc, #204]	@ (8001bbc <DisplayRenderState+0x128>)
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff ff1e 	bl	8001930 <displayPaddedLine>
    if (ctx->isPwmRunning == true) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	79db      	ldrb	r3, [r3, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d024      	beq.n	8001b46 <DisplayRenderState+0xb2>
        sprintf(buffer, "PWM is running at %dV", ctx->voltage);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	885b      	ldrh	r3, [r3, #2]
 8001b00:	461a      	mov	r2, r3
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	492e      	ldr	r1, [pc, #184]	@ (8001bc0 <DisplayRenderState+0x12c>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f009 fcc7 	bl	800b49c <siprintf>
        displayPaddedLine(1, buffer);
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4619      	mov	r1, r3
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff ff0b 	bl	8001930 <displayPaddedLine>

        sprintf(buffer, "PWM duty %d%%", GetPwmForVoltage(ctx));
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe fe48 	bl	80007b0 <GetPwmForVoltage>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	4926      	ldr	r1, [pc, #152]	@ (8001bc4 <DisplayRenderState+0x130>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f009 fcb6 	bl	800b49c <siprintf>
        displayPaddedLine(2, buffer);
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4619      	mov	r1, r3
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7ff fefa 	bl	8001930 <displayPaddedLine>

      displayPaddedLine(3, "Press STOP");
 8001b3c:	4922      	ldr	r1, [pc, #136]	@ (8001bc8 <DisplayRenderState+0x134>)
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f7ff fef6 	bl	8001930 <displayPaddedLine>
 8001b44:	e20b      	b.n	8001f5e <DisplayRenderState+0x4ca>
    }
    else if (ctx->isVoltageEntered)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	799b      	ldrb	r3, [r3, #6]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d017      	beq.n	8001b7e <DisplayRenderState+0xea>
    {
	  sprintf(buffer, "Voltage: %dV", ctx->voltage);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	885b      	ldrh	r3, [r3, #2]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	491c      	ldr	r1, [pc, #112]	@ (8001bcc <DisplayRenderState+0x138>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f009 fc9e 	bl	800b49c <siprintf>
      displayPaddedLine(1, buffer);
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff fee2 	bl	8001930 <displayPaddedLine>
      displayPaddedLine(2, "Press START or Clear");
 8001b6c:	4918      	ldr	r1, [pc, #96]	@ (8001bd0 <DisplayRenderState+0x13c>)
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f7ff fede 	bl	8001930 <displayPaddedLine>
      displayPaddedLine(3, "");
 8001b74:	4917      	ldr	r1, [pc, #92]	@ (8001bd4 <DisplayRenderState+0x140>)
 8001b76:	2003      	movs	r0, #3
 8001b78:	f7ff feda 	bl	8001930 <displayPaddedLine>
 8001b7c:	e1ef      	b.n	8001f5e <DisplayRenderState+0x4ca>
    }
    else
    {
	  sprintf(buffer, "Enter voltage: %s", getValueWithCursor(ctx));
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff00 	bl	8001984 <getValueWithCursor>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4913      	ldr	r1, [pc, #76]	@ (8001bd8 <DisplayRenderState+0x144>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f009 fc85 	bl	800b49c <siprintf>
      displayPaddedLine(1, buffer);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff fec9 	bl	8001930 <displayPaddedLine>
      displayPaddedLine(2, "Press Enter");
 8001b9e:	490f      	ldr	r1, [pc, #60]	@ (8001bdc <DisplayRenderState+0x148>)
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7ff fec5 	bl	8001930 <displayPaddedLine>
      displayPaddedLine(3, "");
 8001ba6:	490b      	ldr	r1, [pc, #44]	@ (8001bd4 <DisplayRenderState+0x140>)
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f7ff fec1 	bl	8001930 <displayPaddedLine>
 8001bae:	e1d6      	b.n	8001f5e <DisplayRenderState+0x4ca>
 8001bb0:	24000010 	.word	0x24000010
 8001bb4:	2400007c 	.word	0x2400007c
 8001bb8:	24000008 	.word	0x24000008
 8001bbc:	0800c690 	.word	0x0800c690
 8001bc0:	0800c6a4 	.word	0x0800c6a4
 8001bc4:	0800c6bc 	.word	0x0800c6bc
 8001bc8:	0800c6cc 	.word	0x0800c6cc
 8001bcc:	0800c6d8 	.word	0x0800c6d8
 8001bd0:	0800c6e8 	.word	0x0800c6e8
 8001bd4:	0800c700 	.word	0x0800c700
 8001bd8:	0800c704 	.word	0x0800c704
 8001bdc:	0800c718 	.word	0x0800c718
    }
  }
  else if (ctx->currentState == STATE_F2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	f040 81a6 	bne.w	8001f36 <DisplayRenderState+0x4a2>
  {
	font = &Font24;
 8001bea:	4bb1      	ldr	r3, [pc, #708]	@ (8001eb0 <DisplayRenderState+0x41c>)
 8001bec:	4ab1      	ldr	r2, [pc, #708]	@ (8001eb4 <DisplayRenderState+0x420>)
 8001bee:	601a      	str	r2, [r3, #0]
    DrawText(0, 0, (uint8_t *)"F2: Calibration");
 8001bf0:	4ab1      	ldr	r2, [pc, #708]	@ (8001eb8 <DisplayRenderState+0x424>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff fe77 	bl	80018e8 <DrawText>
    DrawCalibrationLine(ctx, 80, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2150      	movs	r1, #80	@ 0x50
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff feea 	bl	80019d8 <DrawCalibrationLine>
    DrawCalibrationLine(ctx, 200, 1);
 8001c04:	2201      	movs	r2, #1
 8001c06:	21c8      	movs	r1, #200	@ 0xc8
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fee5 	bl	80019d8 <DrawCalibrationLine>
    DrawCalibrationLine(ctx, 400, 2);
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fedf 	bl	80019d8 <DrawCalibrationLine>

    uint16_t cx = 50;
 8001c1a:	2332      	movs	r3, #50	@ 0x32
 8001c1c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint16_t cy = 250;
 8001c1e:	23fa      	movs	r3, #250	@ 0xfa
 8001c20:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t dx = 400;
 8001c22:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c26:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t dy = 120;
 8001c28:	2378      	movs	r3, #120	@ 0x78
 8001c2a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    DrawLine(cx, cy, cx+dx, cy, UTIL_LCD_COLOR_WHITE);
 8001c2c:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8001c2e:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8001c30:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c32:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c34:	441a      	add	r2, r3
 8001c36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001c38:	f04f 34ff 	mov.w	r4, #4294967295
 8001c3c:	9400      	str	r4, [sp, #0]
 8001c3e:	f7ff fd7b 	bl	8001738 <DrawLine>
    DrawLine(cx, cy, cx, cy-dy, UTIL_LCD_COLOR_WHITE);
 8001c42:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8001c44:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8001c46:	8ebc      	ldrh	r4, [r7, #52]	@ 0x34
 8001c48:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001c4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	4622      	mov	r2, r4
 8001c56:	f7ff fd6f 	bl	8001738 <DrawLine>

    DrawLine(cx+(dx / 5), cy, cx+(dx / 5), cy-5, UTIL_LCD_COLOR_WHITE);
 8001c5a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c5c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001c5e:	4997      	ldr	r1, [pc, #604]	@ (8001ebc <DisplayRenderState+0x428>)
 8001c60:	fba1 1202 	umull	r1, r2, r1, r2
 8001c64:	0892      	lsrs	r2, r2, #2
 8001c66:	b292      	uxth	r2, r2
 8001c68:	1898      	adds	r0, r3, r2
 8001c6a:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8001c6c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c6e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001c70:	4c92      	ldr	r4, [pc, #584]	@ (8001ebc <DisplayRenderState+0x428>)
 8001c72:	fba4 4202 	umull	r4, r2, r4, r2
 8001c76:	0892      	lsrs	r2, r2, #2
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	441a      	add	r2, r3
 8001c7c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001c7e:	3b05      	subs	r3, #5
 8001c80:	f04f 34ff 	mov.w	r4, #4294967295
 8001c84:	9400      	str	r4, [sp, #0]
 8001c86:	f7ff fd57 	bl	8001738 <DrawLine>
    DrawLine(cx+(dx / 2), cy, cx+(dx / 2), cy-5, UTIL_LCD_COLOR_WHITE);
 8001c8a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c8c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001c8e:	0852      	lsrs	r2, r2, #1
 8001c90:	b292      	uxth	r2, r2
 8001c92:	1898      	adds	r0, r3, r2
 8001c94:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8001c96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c98:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001c9a:	0852      	lsrs	r2, r2, #1
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	441a      	add	r2, r3
 8001ca0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001ca2:	3b05      	subs	r3, #5
 8001ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ca8:	9400      	str	r4, [sp, #0]
 8001caa:	f7ff fd45 	bl	8001738 <DrawLine>
    DrawLine(cx+dx, cy, cx+dx, cy-5, UTIL_LCD_COLOR_WHITE);
 8001cae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cb0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001cb2:	18d0      	adds	r0, r2, r3
 8001cb4:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8001cb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cb8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001cba:	441a      	add	r2, r3
 8001cbc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001cbe:	3b05      	subs	r3, #5
 8001cc0:	f04f 34ff 	mov.w	r4, #4294967295
 8001cc4:	9400      	str	r4, [sp, #0]
 8001cc6:	f7ff fd37 	bl	8001738 <DrawLine>

    uint16_t y0 = cy - (ctx->calibrationPoints[0] * dy / 100);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	4a79      	ldr	r2, [pc, #484]	@ (8001ec0 <DisplayRenderState+0x42c>)
 8001cda:	fb82 1203 	smull	r1, r2, r2, r3
 8001cde:	1152      	asrs	r2, r2, #5
 8001ce0:	17db      	asrs	r3, r3, #31
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001ce8:	4413      	add	r3, r2
 8001cea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t y1 = cy - (ctx->calibrationPoints[1] * dy / 100);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	4a71      	ldr	r2, [pc, #452]	@ (8001ec0 <DisplayRenderState+0x42c>)
 8001cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8001d00:	1152      	asrs	r2, r2, #5
 8001d02:	17db      	asrs	r3, r3, #31
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d0a:	4413      	add	r3, r2
 8001d0c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t y2 = cy - (ctx->calibrationPoints[2] * dy / 100);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001d14:	461a      	mov	r2, r3
 8001d16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	4a68      	ldr	r2, [pc, #416]	@ (8001ec0 <DisplayRenderState+0x42c>)
 8001d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d22:	1152      	asrs	r2, r2, #5
 8001d24:	17db      	asrs	r3, r3, #31
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d2c:	4413      	add	r3, r2
 8001d2e:	853b      	strh	r3, [r7, #40]	@ 0x28

    DrawLine(cx, y0, cx+5, y0, UTIL_LCD_COLOR_WHITE);
 8001d30:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8001d32:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001d34:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001d36:	1d5a      	adds	r2, r3, #5
 8001d38:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d3a:	f04f 34ff 	mov.w	r4, #4294967295
 8001d3e:	9400      	str	r4, [sp, #0]
 8001d40:	f7ff fcfa 	bl	8001738 <DrawLine>
    DrawLine(cx, y1, cx+5, y1, UTIL_LCD_COLOR_WHITE);
 8001d44:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8001d46:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001d48:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001d4a:	1d5a      	adds	r2, r3, #5
 8001d4c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d4e:	f04f 34ff 	mov.w	r4, #4294967295
 8001d52:	9400      	str	r4, [sp, #0]
 8001d54:	f7ff fcf0 	bl	8001738 <DrawLine>
    DrawLine(cx, y2, cx+5, y2, UTIL_LCD_COLOR_WHITE);
 8001d58:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8001d5a:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001d5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001d5e:	1d5a      	adds	r2, r3, #5
 8001d60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d62:	f04f 34ff 	mov.w	r4, #4294967295
 8001d66:	9400      	str	r4, [sp, #0]
 8001d68:	f7ff fce6 	bl	8001738 <DrawLine>

    font = &Font16;
 8001d6c:	4b50      	ldr	r3, [pc, #320]	@ (8001eb0 <DisplayRenderState+0x41c>)
 8001d6e:	4a55      	ldr	r2, [pc, #340]	@ (8001ec4 <DisplayRenderState+0x430>)
 8001d70:	601a      	str	r2, [r3, #0]
    foregroundColor = UTIL_LCD_COLOR_WHITE;
 8001d72:	4b55      	ldr	r3, [pc, #340]	@ (8001ec8 <DisplayRenderState+0x434>)
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	601a      	str	r2, [r3, #0]
    DrawText(cx+(dx/5)-15, cy+8, (uint8_t *)"80V");
 8001d7a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ebc <DisplayRenderState+0x428>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001d88:	4413      	add	r3, r2
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b0f      	subs	r3, #15
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d92:	3308      	adds	r3, #8
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4a4d      	ldr	r2, [pc, #308]	@ (8001ecc <DisplayRenderState+0x438>)
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7ff fda5 	bl	80018e8 <DrawText>
    DrawText(cx+(dx/2)-20, cy+8, (uint8_t *)"200V");
 8001d9e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001da6:	4413      	add	r3, r2
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b14      	subs	r3, #20
 8001dac:	b298      	uxth	r0, r3
 8001dae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001db0:	3308      	adds	r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4a46      	ldr	r2, [pc, #280]	@ (8001ed0 <DisplayRenderState+0x43c>)
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7ff fd96 	bl	80018e8 <DrawText>
    DrawText(cx+dx-25, cy+8, (uint8_t *)"400V");
 8001dbc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001dbe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b19      	subs	r3, #25
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001dca:	3308      	adds	r3, #8
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4a41      	ldr	r2, [pc, #260]	@ (8001ed4 <DisplayRenderState+0x440>)
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7ff fd89 	bl	80018e8 <DrawText>

    sprintf(buffer, "%d%%", ctx->calibrationPoints[0]);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	493d      	ldr	r1, [pc, #244]	@ (8001ed8 <DisplayRenderState+0x444>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f009 fb59 	bl	800b49c <siprintf>
    DrawText(cx-35, y0-6, (uint8_t *)buffer);
 8001dea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001dec:	3b23      	subs	r3, #35	@ 0x23
 8001dee:	b298      	uxth	r0, r3
 8001df0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001df2:	3b06      	subs	r3, #6
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f107 020c 	add.w	r2, r7, #12
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7ff fd74 	bl	80018e8 <DrawText>
    sprintf(buffer, "%d%%", ctx->calibrationPoints[1]);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001e06:	461a      	mov	r2, r3
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4932      	ldr	r1, [pc, #200]	@ (8001ed8 <DisplayRenderState+0x444>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f009 fb44 	bl	800b49c <siprintf>
    DrawText(cx-35, y1-6, (uint8_t *)buffer);
 8001e14:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001e16:	3b23      	subs	r3, #35	@ 0x23
 8001e18:	b298      	uxth	r0, r3
 8001e1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001e1c:	3b06      	subs	r3, #6
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f107 020c 	add.w	r2, r7, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7ff fd5f 	bl	80018e8 <DrawText>
    sprintf(buffer, "%d%%", ctx->calibrationPoints[2]);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001e30:	461a      	mov	r2, r3
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4928      	ldr	r1, [pc, #160]	@ (8001ed8 <DisplayRenderState+0x444>)
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f009 fb2f 	bl	800b49c <siprintf>
    uint16_t shift = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if (ctx->calibrationPoints[2] == 100) shift = -10;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001e48:	2b64      	cmp	r3, #100	@ 0x64
 8001e4a:	d102      	bne.n	8001e52 <DisplayRenderState+0x3be>
 8001e4c:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8001e50:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DrawText(cx-35+shift, y2-6, (uint8_t *)buffer);
 8001e52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001e54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e56:	4413      	add	r3, r2
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b23      	subs	r3, #35	@ 0x23
 8001e5c:	b298      	uxth	r0, r3
 8001e5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e60:	3b06      	subs	r3, #6
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f107 020c 	add.w	r2, r7, #12
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7ff fd3d 	bl	80018e8 <DrawText>

    DrawLine(cx+(dx / 5), y0, cx+(dx / 2), y1, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 8001e6e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001e70:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e72:	4912      	ldr	r1, [pc, #72]	@ (8001ebc <DisplayRenderState+0x428>)
 8001e74:	fba1 1202 	umull	r1, r2, r1, r2
 8001e78:	0892      	lsrs	r2, r2, #2
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	1898      	adds	r0, r3, r2
 8001e7e:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001e80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001e82:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e84:	0852      	lsrs	r2, r2, #1
 8001e86:	b292      	uxth	r2, r2
 8001e88:	441a      	add	r2, r3
 8001e8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001e8c:	4c13      	ldr	r4, [pc, #76]	@ (8001edc <DisplayRenderState+0x448>)
 8001e8e:	9400      	str	r4, [sp, #0]
 8001e90:	f7ff fc52 	bl	8001738 <DrawLine>
    DrawLine(cx+(dx / 5), y0+1, cx+(dx / 2), y1+1, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 8001e94:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001e96:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e98:	4908      	ldr	r1, [pc, #32]	@ (8001ebc <DisplayRenderState+0x428>)
 8001e9a:	fba1 1202 	umull	r1, r2, r1, r2
 8001e9e:	0892      	lsrs	r2, r2, #2
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	1898      	adds	r0, r3, r2
 8001ea4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ea6:	1c59      	adds	r1, r3, #1
 8001ea8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001eaa:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001eac:	e018      	b.n	8001ee0 <DisplayRenderState+0x44c>
 8001eae:	bf00      	nop
 8001eb0:	24000010 	.word	0x24000010
 8001eb4:	24000084 	.word	0x24000084
 8001eb8:	0800c724 	.word	0x0800c724
 8001ebc:	cccccccd 	.word	0xcccccccd
 8001ec0:	51eb851f 	.word	0x51eb851f
 8001ec4:	2400008c 	.word	0x2400008c
 8001ec8:	24000008 	.word	0x24000008
 8001ecc:	0800c734 	.word	0x0800c734
 8001ed0:	0800c738 	.word	0x0800c738
 8001ed4:	0800c740 	.word	0x0800c740
 8001ed8:	0800c748 	.word	0x0800c748
 8001edc:	ffb9c4ca 	.word	0xffb9c4ca
 8001ee0:	0852      	lsrs	r2, r2, #1
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	441a      	add	r2, r3
 8001ee6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4c24      	ldr	r4, [pc, #144]	@ (8001f7c <DisplayRenderState+0x4e8>)
 8001eec:	9400      	str	r4, [sp, #0]
 8001eee:	f7ff fc23 	bl	8001738 <DrawLine>

    DrawLine(cx+(dx / 2), y1, cx+dx, y2, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 8001ef2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001ef4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001ef6:	0852      	lsrs	r2, r2, #1
 8001ef8:	b292      	uxth	r2, r2
 8001efa:	1898      	adds	r0, r3, r2
 8001efc:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001efe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f02:	441a      	add	r2, r3
 8001f04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f06:	4c1d      	ldr	r4, [pc, #116]	@ (8001f7c <DisplayRenderState+0x4e8>)
 8001f08:	9400      	str	r4, [sp, #0]
 8001f0a:	f7ff fc15 	bl	8001738 <DrawLine>
    DrawLine(cx+(dx / 2), y1+1, cx+dx, y2+1, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 8001f0e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001f10:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001f12:	0852      	lsrs	r2, r2, #1
 8001f14:	b292      	uxth	r2, r2
 8001f16:	1898      	adds	r0, r3, r2
 8001f18:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f1e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f20:	441a      	add	r2, r3
 8001f22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f24:	3301      	adds	r3, #1
 8001f26:	4c15      	ldr	r4, [pc, #84]	@ (8001f7c <DisplayRenderState+0x4e8>)
 8001f28:	9400      	str	r4, [sp, #0]
 8001f2a:	f7ff fc05 	bl	8001738 <DrawLine>
    font = &Font24; // for potential error message
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <DisplayRenderState+0x4ec>)
 8001f30:	4a14      	ldr	r2, [pc, #80]	@ (8001f84 <DisplayRenderState+0x4f0>)
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e013      	b.n	8001f5e <DisplayRenderState+0x4ca>
  }
  else if (ctx->currentState == STATE_F3)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d10f      	bne.n	8001f5e <DisplayRenderState+0x4ca>
  {
	displayPaddedLine(0, "F3: Voltage and current");
 8001f3e:	4912      	ldr	r1, [pc, #72]	@ (8001f88 <DisplayRenderState+0x4f4>)
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fcf5 	bl	8001930 <displayPaddedLine>
    displayPaddedLine(1, "");
 8001f46:	4911      	ldr	r1, [pc, #68]	@ (8001f8c <DisplayRenderState+0x4f8>)
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff fcf1 	bl	8001930 <displayPaddedLine>
    displayPaddedLine(2, "");
 8001f4e:	490f      	ldr	r1, [pc, #60]	@ (8001f8c <DisplayRenderState+0x4f8>)
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7ff fced 	bl	8001930 <displayPaddedLine>
    displayPaddedLine(3, "");
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <DisplayRenderState+0x4f8>)
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f7ff fce9 	bl	8001930 <displayPaddedLine>
  }

  foregroundColor = UTIL_LCD_COLOR_RED;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <DisplayRenderState+0x4fc>)
 8001f60:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <DisplayRenderState+0x500>)
 8001f62:	601a      	str	r2, [r3, #0]
  displayPaddedLine(4, ctx->message);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3309      	adds	r3, #9
 8001f68:	4619      	mov	r1, r3
 8001f6a:	2004      	movs	r0, #4
 8001f6c:	f7ff fce0 	bl	8001930 <displayPaddedLine>

  RenderNewFrame();
 8001f70:	f7ff fd6c 	bl	8001a4c <RenderNewFrame>
}
 8001f74:	bf00      	nop
 8001f76:	3744      	adds	r7, #68	@ 0x44
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	ffb9c4ca 	.word	0xffb9c4ca
 8001f80:	24000010 	.word	0x24000010
 8001f84:	24000084 	.word	0x24000084
 8001f88:	0800c750 	.word	0x0800c750
 8001f8c:	0800c700 	.word	0x0800c700
 8001f90:	24000008 	.word	0x24000008
 8001f94:	ffff0000 	.word	0xffff0000

08001f98 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e02c      	b.n	800200a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	891a      	ldrh	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8002014 <FT5336_RegisterBusIO+0x7c>)
 8001fe4:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8002018 <FT5336_RegisterBusIO+0x80>)
 8001fea:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4798      	blx	r3
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	e002      	b.n	800200a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	0800203d 	.word	0x0800203d
 8002018:	08002071 	.word	0x08002071

0800201c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3318      	adds	r3, #24
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f850 	bl	80020d2 <ft5336_chip_id>
 8002032:	4603      	mov	r3, r0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	461a      	mov	r2, r3
 8002048:	460b      	mov	r3, r1
 800204a:	72fb      	strb	r3, [r7, #11]
 800204c:	4613      	mov	r3, r2
 800204e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	691c      	ldr	r4, [r3, #16]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	8918      	ldrh	r0, [r3, #8]
 800205c:	7afb      	ldrb	r3, [r7, #11]
 800205e:	b299      	uxth	r1, r3
 8002060:	893b      	ldrh	r3, [r7, #8]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	47a0      	blx	r4
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}

08002070 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	461a      	mov	r2, r3
 800207c:	460b      	mov	r3, r1
 800207e:	72fb      	strb	r3, [r7, #11]
 8002080:	4613      	mov	r3, r2
 8002082:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	68dc      	ldr	r4, [r3, #12]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	8918      	ldrh	r0, [r3, #8]
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	b299      	uxth	r1, r3
 8002094:	893b      	ldrh	r3, [r7, #8]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	47a0      	blx	r4
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd90      	pop	{r4, r7, pc}

080020a4 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	461a      	mov	r2, r3
 80020b0:	460b      	mov	r3, r1
 80020b2:	72fb      	strb	r3, [r7, #11]
 80020b4:	4613      	mov	r3, r2
 80020b6:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685c      	ldr	r4, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6898      	ldr	r0, [r3, #8]
 80020c0:	893b      	ldrh	r3, [r7, #8]
 80020c2:	7af9      	ldrb	r1, [r7, #11]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	47a0      	blx	r4
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}

080020d2 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80020dc:	2301      	movs	r3, #1
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	21a8      	movs	r1, #168	@ 0xa8
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffde 	bl	80020a4 <ft5336_read_reg>
 80020e8:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002100:	68fb      	ldr	r3, [r7, #12]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
 8002118:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f831 	bl	8002188 <MT48LC4M32B2_ClockEnable>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d128      	bne.n	800217e <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800212c:	2001      	movs	r0, #1
 800212e:	f000 f8e1 	bl	80022f4 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f849 	bl	80021d0 <MT48LC4M32B2_Precharge>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11c      	bne.n	800217e <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	461a      	mov	r2, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f896 	bl	8002280 <MT48LC4M32B2_RefreshMode>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d111      	bne.n	800217e <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f85b 	bl	8002218 <MT48LC4M32B2_ModeRegConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8ac 	bl	80022cc <MT48LC4M32B2_RefreshRate>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MT48LC4M32B2_ClockEnable+0x44>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002198:	4a0c      	ldr	r2, [pc, #48]	@ (80021cc <MT48LC4M32B2_ClockEnable+0x44>)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <MT48LC4M32B2_ClockEnable+0x44>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MT48LC4M32B2_ClockEnable+0x44>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80021aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021ae:	4907      	ldr	r1, [pc, #28]	@ (80021cc <MT48LC4M32B2_ClockEnable+0x44>)
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f006 fbed 	bl	8008990 <HAL_SDRAM_SendCommand>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	e000      	b.n	80021c4 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80021c2:	2300      	movs	r3, #0
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	240002c4 	.word	0x240002c4

080021d0 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <MT48LC4M32B2_Precharge+0x44>)
 80021dc:	2202      	movs	r2, #2
 80021de:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80021e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002214 <MT48LC4M32B2_Precharge+0x44>)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <MT48LC4M32B2_Precharge+0x44>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <MT48LC4M32B2_Precharge+0x44>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80021f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f6:	4907      	ldr	r1, [pc, #28]	@ (8002214 <MT48LC4M32B2_Precharge+0x44>)
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f006 fbc9 	bl	8008990 <HAL_SDRAM_SendCommand>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
 8002208:	e000      	b.n	800220c <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800220a:	2300      	movs	r3, #0
  }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	240002c4 	.word	0x240002c4

08002218 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800222a:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8002230:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8002236:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800223c:	4313      	orrs	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002242:	2204      	movs	r2, #4
 8002244:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0c      	ldr	r2, [pc, #48]	@ (800227c <MT48LC4M32B2_ModeRegConfig+0x64>)
 800224c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002250:	2201      	movs	r2, #1
 8002252:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002254:	4a09      	ldr	r2, [pc, #36]	@ (800227c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800225a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800225e:	4907      	ldr	r1, [pc, #28]	@ (800227c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f006 fb95 	bl	8008990 <HAL_SDRAM_SendCommand>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
 8002270:	e000      	b.n	8002274 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002272:	2300      	movs	r3, #0
  }
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	240002c4 	.word	0x240002c4

08002280 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800228c:	4a0e      	ldr	r2, [pc, #56]	@ (80022c8 <MT48LC4M32B2_RefreshMode+0x48>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8002292:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <MT48LC4M32B2_RefreshMode+0x48>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <MT48LC4M32B2_RefreshMode+0x48>)
 800229a:	2208      	movs	r2, #8
 800229c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <MT48LC4M32B2_RefreshMode+0x48>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80022a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a8:	4907      	ldr	r1, [pc, #28]	@ (80022c8 <MT48LC4M32B2_RefreshMode+0x48>)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f006 fb70 	bl	8008990 <HAL_SDRAM_SendCommand>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e000      	b.n	80022be <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80022bc:	2300      	movs	r3, #0
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	240002c4 	.word	0x240002c4

080022cc <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80022d6:	6839      	ldr	r1, [r7, #0]
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f006 fb8e 	bl	80089fa <HAL_SDRAM_ProgramRefreshRate>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	e000      	b.n	80022ec <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80022ea:	2300      	movs	r3, #0
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80022fc:	f001 fd56 	bl	8003dac <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002302:	bf00      	nop
 8002304:	f001 fd52 	bl	8003dac <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800232a:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <BSP_I2C4_Init+0x64>)
 800232c:	4a16      	ldr	r2, [pc, #88]	@ (8002388 <BSP_I2C4_Init+0x68>)
 800232e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <BSP_I2C4_Init+0x6c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11f      	bne.n	8002378 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002338:	4b14      	ldr	r3, [pc, #80]	@ (800238c <BSP_I2C4_Init+0x6c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	4a13      	ldr	r2, [pc, #76]	@ (800238c <BSP_I2C4_Init+0x6c>)
 8002340:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002342:	4810      	ldr	r0, [pc, #64]	@ (8002384 <BSP_I2C4_Init+0x64>)
 8002344:	f002 fd7e 	bl	8004e44 <HAL_I2C_GetState>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d114      	bne.n	8002378 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800234e:	480d      	ldr	r0, [pc, #52]	@ (8002384 <BSP_I2C4_Init+0x64>)
 8002350:	f000 fb06 	bl	8002960 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002354:	f004 fc94 	bl	8006c80 <HAL_RCC_GetPCLK2Freq>
 8002358:	4603      	mov	r3, r0
 800235a:	490d      	ldr	r1, [pc, #52]	@ (8002390 <BSP_I2C4_Init+0x70>)
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f889 	bl	8002474 <I2C_GetTiming>
 8002362:	4603      	mov	r3, r0
 8002364:	4619      	mov	r1, r3
 8002366:	4807      	ldr	r0, [pc, #28]	@ (8002384 <BSP_I2C4_Init+0x64>)
 8002368:	f000 f814 	bl	8002394 <MX_I2C4_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002372:	f06f 0307 	mvn.w	r3, #7
 8002376:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8002378:	687b      	ldr	r3, [r7, #4]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	24000cdc 	.word	0x24000cdc
 8002388:	58001c00 	.word	0x58001c00
 800238c:	240002d4 	.word	0x240002d4
 8002390:	000186a0 	.word	0x000186a0

08002394 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f002 fb76 	bl	8004ac4 <HAL_I2C_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e014      	b.n	800240e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f002 ffb2 	bl	8005354 <HAL_I2CEx_ConfigAnalogFilter>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e008      	b.n	800240e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80023fc:	2100      	movs	r1, #0
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f002 fff3 	bl	80053ea <HAL_I2CEx_ConfigDigitalFilter>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af02      	add	r7, sp, #8
 800241e:	60ba      	str	r2, [r7, #8]
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	81fb      	strh	r3, [r7, #14]
 8002426:	460b      	mov	r3, r1
 8002428:	81bb      	strh	r3, [r7, #12]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800242e:	89b9      	ldrh	r1, [r7, #12]
 8002430:	89f8      	ldrh	r0, [r7, #14]
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2201      	movs	r2, #1
 800243a:	f000 fafd 	bl	8002a38 <I2C4_ReadReg>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00c      	b.n	8002464 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800244a:	4809      	ldr	r0, [pc, #36]	@ (8002470 <BSP_I2C4_ReadReg+0x58>)
 800244c:	f002 fd08 	bl	8004e60 <HAL_I2C_GetError>
 8002450:	4603      	mov	r3, r0
 8002452:	2b04      	cmp	r3, #4
 8002454:	d103      	bne.n	800245e <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002456:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e002      	b.n	8002464 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800245e:	f06f 0303 	mvn.w	r3, #3
 8002462:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002464:	697b      	ldr	r3, [r7, #20]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	24000cdc 	.word	0x24000cdc

08002474 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d06b      	beq.n	8002560 <I2C_GetTiming+0xec>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d068      	beq.n	8002560 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	e060      	b.n	8002556 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002494:	4a35      	ldr	r2, [pc, #212]	@ (800256c <I2C_GetTiming+0xf8>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	212c      	movs	r1, #44	@ 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d352      	bcc.n	8002550 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80024aa:	4a30      	ldr	r2, [pc, #192]	@ (800256c <I2C_GetTiming+0xf8>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	212c      	movs	r1, #44	@ 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3308      	adds	r3, #8
 80024b8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d847      	bhi.n	8002550 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80024c0:	6939      	ldr	r1, [r7, #16]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f856 	bl	8002574 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80024c8:	6939      	ldr	r1, [r7, #16]
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f940 	bl	8002750 <I2C_Compute_SCLL_SCLH>
 80024d0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80024d6:	d842      	bhi.n	800255e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80024d8:	4925      	ldr	r1, [pc, #148]	@ (8002570 <I2C_GetTiming+0xfc>)
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80024ea:	4821      	ldr	r0, [pc, #132]	@ (8002570 <I2C_GetTiming+0xfc>)
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4403      	add	r3, r0
 80024f8:	3304      	adds	r3, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	051b      	lsls	r3, r3, #20
 80024fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002502:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002504:	481a      	ldr	r0, [pc, #104]	@ (8002570 <I2C_GetTiming+0xfc>)
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4403      	add	r3, r0
 8002512:	3308      	adds	r3, #8
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800251c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800251e:	4814      	ldr	r0, [pc, #80]	@ (8002570 <I2C_GetTiming+0xfc>)
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	330c      	adds	r3, #12
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002534:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002536:	480e      	ldr	r0, [pc, #56]	@ (8002570 <I2C_GetTiming+0xfc>)
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4403      	add	r3, r0
 8002544:	3310      	adds	r3, #16
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800254a:	430b      	orrs	r3, r1
 800254c:	617b      	str	r3, [r7, #20]
        }
        break;
 800254e:	e006      	b.n	800255e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	3301      	adds	r3, #1
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d99b      	bls.n	8002494 <I2C_GetTiming+0x20>
 800255c:	e000      	b.n	8002560 <I2C_GetTiming+0xec>
        break;
 800255e:	bf00      	nop
      }
    }
  }

  return ret;
 8002560:	697b      	ldr	r3, [r7, #20]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	0800c768 	.word	0x0800c768
 8002570:	240002d8 	.word	0x240002d8

08002574 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002574:	b480      	push	{r7}
 8002576:	b08f      	sub	sp, #60	@ 0x3c
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800257e:	2310      	movs	r3, #16
 8002580:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	085a      	lsrs	r2, r3, #1
 8002586:	4b6e      	ldr	r3, [pc, #440]	@ (8002740 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002588:	4413      	add	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002590:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002592:	2332      	movs	r3, #50	@ 0x32
 8002594:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002596:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800259a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800259c:	4a69      	ldr	r2, [pc, #420]	@ (8002744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	212c      	movs	r1, #44	@ 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3324      	adds	r3, #36	@ 0x24
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	4a65      	ldr	r2, [pc, #404]	@ (8002744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	212c      	movs	r1, #44	@ 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	330c      	adds	r3, #12
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80025c0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80025c2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80025c4:	495f      	ldr	r1, [pc, #380]	@ (8002744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	202c      	movs	r0, #44	@ 0x2c
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	440b      	add	r3, r1
 80025d0:	3328      	adds	r3, #40	@ 0x28
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3303      	adds	r3, #3
 80025d6:	69f9      	ldr	r1, [r7, #28]
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80025e0:	4a58      	ldr	r2, [pc, #352]	@ (8002744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	212c      	movs	r1, #44	@ 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3310      	adds	r3, #16
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	4a54      	ldr	r2, [pc, #336]	@ (8002744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	212c      	movs	r1, #44	@ 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3320      	adds	r3, #32
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002604:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002606:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002608:	494e      	ldr	r1, [pc, #312]	@ (8002744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	202c      	movs	r0, #44	@ 0x2c
 800260e:	fb00 f303 	mul.w	r3, r0, r3
 8002612:	440b      	add	r3, r1
 8002614:	3328      	adds	r3, #40	@ 0x28
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3304      	adds	r3, #4
 800261a:	69f9      	ldr	r1, [r7, #28]
 800261c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002624:	4a47      	ldr	r2, [pc, #284]	@ (8002744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	212c      	movs	r1, #44	@ 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3320      	adds	r3, #32
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	4a43      	ldr	r2, [pc, #268]	@ (8002744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	212c      	movs	r1, #44	@ 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3314      	adds	r3, #20
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4403      	add	r3, r0
 8002648:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	2b00      	cmp	r3, #0
 800264e:	dc01      	bgt.n	8002654 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8002654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002656:	2b00      	cmp	r3, #0
 8002658:	dc01      	bgt.n	800265e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002662:	e062      	b.n	800272a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
 8002668:	e059      	b.n	800271e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	3301      	adds	r3, #1
 800266e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002670:	3201      	adds	r2, #1
 8002672:	fb03 f202 	mul.w	r2, r3, r2
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	429a      	cmp	r2, r3
 8002684:	d348      	bcc.n	8002718 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	e042      	b.n	8002712 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	3301      	adds	r3, #1
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	fb03 f202 	mul.w	r2, r3, r2
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800269e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d332      	bcc.n	800270c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80026a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d82e      	bhi.n	800270c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80026ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d02a      	beq.n	800270c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80026b6:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4924      	ldr	r1, [pc, #144]	@ (800274c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80026ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	491f      	ldr	r1, [pc, #124]	@ (800274c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3304      	adds	r3, #4
 80026dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026de:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80026e0:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4919      	ldr	r1, [pc, #100]	@ (800274c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3308      	adds	r3, #8
 80026f2:	6a3a      	ldr	r2, [r7, #32]
 80026f4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80026f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f8:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 80026fa:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002702:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002704:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b7f      	cmp	r3, #127	@ 0x7f
 800270a:	d812      	bhi.n	8002732 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	3301      	adds	r3, #1
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	2b0f      	cmp	r3, #15
 8002716:	d9b9      	bls.n	800268c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	3301      	adds	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d9a2      	bls.n	800266a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002726:	3301      	adds	r3, #1
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800272a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d999      	bls.n	8002664 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002730:	e000      	b.n	8002734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002732:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002734:	373c      	adds	r7, #60	@ 0x3c
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	3b9aca00 	.word	0x3b9aca00
 8002744:	0800c768 	.word	0x0800c768
 8002748:	24000cd8 	.word	0x24000cd8
 800274c:	240002d8 	.word	0x240002d8

08002750 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002750:	b480      	push	{r7}
 8002752:	b093      	sub	sp, #76	@ 0x4c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	085a      	lsrs	r2, r3, #1
 8002764:	4b7a      	ldr	r3, [pc, #488]	@ (8002950 <I2C_Compute_SCLL_SCLH+0x200>)
 8002766:	4413      	add	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	fbb3 f3f2 	udiv	r3, r3, r2
 800276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002770:	4a78      	ldr	r2, [pc, #480]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	212c      	movs	r1, #44	@ 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	085a      	lsrs	r2, r3, #1
 8002780:	4b73      	ldr	r3, [pc, #460]	@ (8002950 <I2C_Compute_SCLL_SCLH+0x200>)
 8002782:	4413      	add	r3, r2
 8002784:	4973      	ldr	r1, [pc, #460]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	202c      	movs	r0, #44	@ 0x2c
 800278a:	fb00 f202 	mul.w	r2, r0, r2
 800278e:	440a      	add	r2, r1
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	fbb3 f3f2 	udiv	r3, r3, r2
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002798:	2332      	movs	r3, #50	@ 0x32
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800279c:	4a6d      	ldr	r2, [pc, #436]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	212c      	movs	r1, #44	@ 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3328      	adds	r3, #40	@ 0x28
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80027b4:	4a67      	ldr	r2, [pc, #412]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	212c      	movs	r1, #44	@ 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a62      	ldr	r2, [pc, #392]	@ (8002950 <I2C_Compute_SCLL_SCLH+0x200>)
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80027cc:	4a61      	ldr	r2, [pc, #388]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	212c      	movs	r1, #44	@ 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3308      	adds	r3, #8
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002950 <I2C_Compute_SCLL_SCLH+0x200>)
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80027ec:	e0a3      	b.n	8002936 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80027ee:	495a      	ldr	r1, [pc, #360]	@ (8002958 <I2C_Compute_SCLL_SCLH+0x208>)
 80027f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002808:	2300      	movs	r3, #0
 800280a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800280c:	e08c      	b.n	8002928 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800280e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	441a      	add	r2, r3
 8002814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002816:	3301      	adds	r3, #1
 8002818:	6979      	ldr	r1, [r7, #20]
 800281a:	fb03 f101 	mul.w	r1, r3, r1
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	440b      	add	r3, r1
 8002824:	4413      	add	r3, r2
 8002826:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002828:	4a4a      	ldr	r2, [pc, #296]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	212c      	movs	r1, #44	@ 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3318      	adds	r3, #24
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	d971      	bls.n	8002922 <I2C_Compute_SCLL_SCLH+0x1d2>
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	1ad2      	subs	r2, r2, r3
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d268      	bcs.n	8002922 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002850:	2300      	movs	r3, #0
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002854:	e062      	b.n	800291c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	441a      	add	r2, r3
 800285c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285e:	3301      	adds	r3, #1
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	fb03 f101 	mul.w	r1, r3, r1
 8002866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	440b      	add	r3, r1
 800286c:	4413      	add	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	441a      	add	r2, r3
 8002876:	4937      	ldr	r1, [pc, #220]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	202c      	movs	r0, #44	@ 0x2c
 800287c:	fb00 f303 	mul.w	r3, r0, r3
 8002880:	440b      	add	r3, r1
 8002882:	3320      	adds	r3, #32
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	441a      	add	r2, r3
 8002888:	4932      	ldr	r1, [pc, #200]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	202c      	movs	r0, #44	@ 0x2c
 800288e:	fb00 f303 	mul.w	r3, r0, r3
 8002892:	440b      	add	r3, r1
 8002894:	3324      	adds	r3, #36	@ 0x24
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4413      	add	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d338      	bcc.n	8002916 <I2C_Compute_SCLL_SCLH+0x1c6>
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d834      	bhi.n	8002916 <I2C_Compute_SCLL_SCLH+0x1c6>
 80028ac:	4a29      	ldr	r2, [pc, #164]	@ (8002954 <I2C_Compute_SCLL_SCLH+0x204>)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	212c      	movs	r1, #44	@ 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	331c      	adds	r3, #28
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d329      	bcc.n	8002916 <I2C_Compute_SCLL_SCLH+0x1c6>
 80028c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d225      	bcs.n	8002916 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	da02      	bge.n	80028de <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80028d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028da:	425b      	negs	r3, r3
 80028dc:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80028de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d917      	bls.n	8002916 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80028e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e8:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 80028ea:	491b      	ldr	r1, [pc, #108]	@ (8002958 <I2C_Compute_SCLL_SCLH+0x208>)
 80028ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3310      	adds	r3, #16
 80028fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028fc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80028fe:	4916      	ldr	r1, [pc, #88]	@ (8002958 <I2C_Compute_SCLL_SCLH+0x208>)
 8002900:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	330c      	adds	r3, #12
 800290e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002910:	601a      	str	r2, [r3, #0]
              ret = count;
 8002912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002914:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002918:	3301      	adds	r3, #1
 800291a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800291c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291e:	2bff      	cmp	r3, #255	@ 0xff
 8002920:	d999      	bls.n	8002856 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002924:	3301      	adds	r3, #1
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292a:	2bff      	cmp	r3, #255	@ 0xff
 800292c:	f67f af6f 	bls.w	800280e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002932:	3301      	adds	r3, #1
 8002934:	637b      	str	r3, [r7, #52]	@ 0x34
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <I2C_Compute_SCLL_SCLH+0x20c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800293c:	429a      	cmp	r2, r3
 800293e:	f4ff af56 	bcc.w	80027ee <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002944:	4618      	mov	r0, r3
 8002946:	374c      	adds	r7, #76	@ 0x4c
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	3b9aca00 	.word	0x3b9aca00
 8002954:	0800c768 	.word	0x0800c768
 8002958:	240002d8 	.word	0x240002d8
 800295c:	24000cd8 	.word	0x24000cd8

08002960 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	@ 0x28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8002968:	4b31      	ldr	r3, [pc, #196]	@ (8002a30 <I2C4_MspInit+0xd0>)
 800296a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296e:	4a30      	ldr	r2, [pc, #192]	@ (8002a30 <I2C4_MspInit+0xd0>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002978:	4b2d      	ldr	r3, [pc, #180]	@ (8002a30 <I2C4_MspInit+0xd0>)
 800297a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8002986:	4b2a      	ldr	r3, [pc, #168]	@ (8002a30 <I2C4_MspInit+0xd0>)
 8002988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800298c:	4a28      	ldr	r2, [pc, #160]	@ (8002a30 <I2C4_MspInit+0xd0>)
 800298e:	f043 0308 	orr.w	r3, r3, #8
 8002992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002996:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <I2C4_MspInit+0xd0>)
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80029a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80029aa:	2312      	movs	r3, #18
 80029ac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80029b2:	2302      	movs	r3, #2
 80029b4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80029b6:	2304      	movs	r3, #4
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	481c      	ldr	r0, [pc, #112]	@ (8002a34 <I2C4_MspInit+0xd4>)
 80029c2:	f001 fe9d 	bl	8004700 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80029c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80029cc:	2312      	movs	r3, #18
 80029ce:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80029d4:	2302      	movs	r3, #2
 80029d6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80029d8:	2304      	movs	r3, #4
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4814      	ldr	r0, [pc, #80]	@ (8002a34 <I2C4_MspInit+0xd4>)
 80029e4:	f001 fe8c 	bl	8004700 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <I2C4_MspInit+0xd0>)
 80029ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029ee:	4a10      	ldr	r2, [pc, #64]	@ (8002a30 <I2C4_MspInit+0xd0>)
 80029f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80029f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <I2C4_MspInit+0xd0>)
 80029fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002a06:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <I2C4_MspInit+0xd0>)
 8002a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a0c:	4a08      	ldr	r2, [pc, #32]	@ (8002a30 <I2C4_MspInit+0xd0>)
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a12:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <I2C4_MspInit+0xd0>)
 8002a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a1c:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <I2C4_MspInit+0xd0>)
 8002a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	@ 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	58024400 	.word	0x58024400
 8002a34:	58020c00 	.word	0x58020c00

08002a38 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af04      	add	r7, sp, #16
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	4603      	mov	r3, r0
 8002a42:	81fb      	strh	r3, [r7, #14]
 8002a44:	460b      	mov	r3, r1
 8002a46:	81bb      	strh	r3, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002a4c:	8978      	ldrh	r0, [r7, #10]
 8002a4e:	89ba      	ldrh	r2, [r7, #12]
 8002a50:	89f9      	ldrh	r1, [r7, #14]
 8002a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	8b3b      	ldrh	r3, [r7, #24]
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4603      	mov	r3, r0
 8002a62:	4807      	ldr	r0, [pc, #28]	@ (8002a80 <I2C4_ReadReg+0x48>)
 8002a64:	f002 f8d4 	bl	8004c10 <HAL_I2C_Mem_Read>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e001      	b.n	8002a76 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002a72:	f06f 0307 	mvn.w	r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	24000cdc 	.word	0x24000cdc

08002a84 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002a8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002a98:	2200      	movs	r2, #0
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f805 	bl	8002aac <BSP_LCD_InitEx>
 8002aa2:	4603      	mov	r3, r0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b09e      	sub	sp, #120	@ 0x78
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d808      	bhi.n	8002ada <BSP_LCD_InitEx+0x2e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <BSP_LCD_InitEx+0x2e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d006      	beq.n	8002ae2 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ada:	f06f 0301 	mvn.w	r3, #1
 8002ade:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ae0:	e0a8      	b.n	8002c34 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d109      	bne.n	8002afc <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8002aec:	4a54      	ldr	r2, [pc, #336]	@ (8002c40 <BSP_LCD_InitEx+0x194>)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015b      	lsls	r3, r3, #5
 8002af2:	4413      	add	r3, r2
 8002af4:	3310      	adds	r3, #16
 8002af6:	2202      	movs	r2, #2
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e008      	b.n	8002b0e <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8002afc:	2300      	movs	r3, #0
 8002afe:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8002b00:	4a4f      	ldr	r2, [pc, #316]	@ (8002c40 <BSP_LCD_InitEx+0x194>)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	015b      	lsls	r3, r3, #5
 8002b06:	4413      	add	r3, r2
 8002b08:	3310      	adds	r3, #16
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c40 <BSP_LCD_InitEx+0x194>)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015b      	lsls	r3, r3, #5
 8002b14:	4413      	add	r3, r2
 8002b16:	330c      	adds	r3, #12
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8002b1c:	4a48      	ldr	r2, [pc, #288]	@ (8002c40 <BSP_LCD_InitEx+0x194>)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015b      	lsls	r3, r3, #5
 8002b22:	4413      	add	r3, r2
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8002b28:	4a45      	ldr	r2, [pc, #276]	@ (8002c40 <BSP_LCD_InitEx+0x194>)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	015b      	lsls	r3, r3, #5
 8002b2e:	4413      	add	r3, r2
 8002b30:	3304      	adds	r3, #4
 8002b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b36:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8002b38:	4b42      	ldr	r3, [pc, #264]	@ (8002c44 <BSP_LCD_InitEx+0x198>)
 8002b3a:	4a43      	ldr	r2, [pc, #268]	@ (8002c48 <BSP_LCD_InitEx+0x19c>)
 8002b3c:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8002b3e:	4b43      	ldr	r3, [pc, #268]	@ (8002c4c <BSP_LCD_InitEx+0x1a0>)
 8002b40:	4a43      	ldr	r2, [pc, #268]	@ (8002c50 <BSP_LCD_InitEx+0x1a4>)
 8002b42:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8002b44:	483f      	ldr	r0, [pc, #252]	@ (8002c44 <BSP_LCD_InitEx+0x198>)
 8002b46:	f000 fd25 	bl	8003594 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8002b4a:	4840      	ldr	r0, [pc, #256]	@ (8002c4c <BSP_LCD_InitEx+0x1a0>)
 8002b4c:	f000 fdee 	bl	800372c <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002b50:	4b40      	ldr	r3, [pc, #256]	@ (8002c54 <BSP_LCD_InitEx+0x1a8>)
 8002b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8002b54:	4b40      	ldr	r3, [pc, #256]	@ (8002c58 <BSP_LCD_InitEx+0x1ac>)
 8002b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8002b58:	2370      	movs	r3, #112	@ 0x70
 8002b5a:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002b5c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002b60:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fa16 	bl	8001f98 <FT5336_RegisterBusIO>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da03      	bge.n	8002b7a <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b72:	f06f 0304 	mvn.w	r3, #4
 8002b76:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b78:	e02b      	b.n	8002bd2 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8002b7a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002b7e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fa49 	bl	800201c <FT5336_ReadID>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	da03      	bge.n	8002b98 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b90:	f06f 0304 	mvn.w	r3, #4
 8002b94:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b96:	e01c      	b.n	8002bd2 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8002b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b9a:	2b51      	cmp	r3, #81	@ 0x51
 8002b9c:	d003      	beq.n	8002ba6 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002b9e:	f06f 0306 	mvn.w	r3, #6
 8002ba2:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ba4:	e015      	b.n	8002bd2 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8002ba6:	4827      	ldr	r0, [pc, #156]	@ (8002c44 <BSP_LCD_InitEx+0x198>)
 8002ba8:	f7fe fb98 	bl	80012dc <MX_LTDC_ClockConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002bb2:	f06f 0303 	mvn.w	r3, #3
 8002bb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bb8:	e00b      	b.n	8002bd2 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002bba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	4820      	ldr	r0, [pc, #128]	@ (8002c44 <BSP_LCD_InitEx+0x198>)
 8002bc2:	f000 f84d 	bl	8002c60 <MX_LTDC_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002bcc:	f06f 0303 	mvn.w	r3, #3
 8002bd0:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8002bd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d12d      	bne.n	8002c34 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f000 fe39 	bl	8003850 <BSP_SDRAM_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8002be4:	f06f 0303 	mvn.w	r3, #3
 8002be8:	e025      	b.n	8002c36 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8002bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bfa:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 8002bfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8002c00:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	480d      	ldr	r0, [pc, #52]	@ (8002c44 <BSP_LCD_InitEx+0x198>)
 8002c10:	f000 f872 	bl	8002cf8 <MX_LTDC_ConfigLayer>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002c1a:	f06f 0303 	mvn.w	r3, #3
 8002c1e:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8002c20:	480e      	ldr	r0, [pc, #56]	@ (8002c5c <BSP_LCD_InitEx+0x1b0>)
 8002c22:	f000 fdeb 	bl	80037fc <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 8002c26:	4a06      	ldr	r2, [pc, #24]	@ (8002c40 <BSP_LCD_InitEx+0x194>)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015b      	lsls	r3, r3, #5
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3318      	adds	r3, #24
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8002c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3778      	adds	r7, #120	@ 0x78
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	24000e8c 	.word	0x24000e8c
 8002c44:	24000de4 	.word	0x24000de4
 8002c48:	50001000 	.word	0x50001000
 8002c4c:	24000d7c 	.word	0x24000d7c
 8002c50:	52001000 	.word	0x52001000
 8002c54:	08002321 	.word	0x08002321
 8002c58:	08002419 	.word	0x08002419
 8002c5c:	24000d30 	.word	0x24000d30

08002c60 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a21      	ldr	r2, [pc, #132]	@ (8002cf4 <MX_LTDC_Init+0x94>)
 8002c70:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2228      	movs	r2, #40	@ 0x28
 8002c8e:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	222a      	movs	r2, #42	@ 0x2a
 8002c94:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f103 0235 	add.w	r2, r3, #53	@ 0x35
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2209      	movs	r2, #9
 8002cae:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	220b      	movs	r2, #11
 8002cb4:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f103 020b 	add.w	r2, r3, #11
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f103 020d 	add.w	r2, r3, #13
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22ff      	movs	r2, #255	@ 0xff
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22ff      	movs	r2, #255	@ 0xff
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	22ff      	movs	r2, #255	@ 0xff
 8002cde:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f002 fbcd 	bl	8005482 <HAL_LTDC_Init>
 8002ce8:	4603      	mov	r3, r0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	50001000 	.word	0x50001000

08002cf8 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b092      	sub	sp, #72	@ 0x48
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 8002d22:	23ff      	movs	r3, #255	@ 0xff
 8002d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002d30:	2307      	movs	r3, #7
 8002d32:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f002 fc2f 	bl	80055d0 <HAL_LTDC_ConfigLayer>
 8002d72:	4603      	mov	r3, r0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3748      	adds	r7, #72	@ 0x48
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d90:	f06f 0301 	mvn.w	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	e007      	b.n	8002da8 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002d98:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <BSP_LCD_GetPixelFormat+0x3c>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	015b      	lsls	r3, r3, #5
 8002d9e:	4413      	add	r3, r2
 8002da0:	330c      	adds	r3, #12
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	24000e8c 	.word	0x24000e8c

08002dbc <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002dd0:	f06f 0301 	mvn.w	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e006      	b.n	8002de6 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002dd8:	4a06      	ldr	r2, [pc, #24]	@ (8002df4 <BSP_LCD_SetActiveLayer+0x38>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	4413      	add	r3, r2
 8002de0:	3308      	adds	r3, #8
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	24000e8c 	.word	0x24000e8c

08002df8 <BSP_LCD_SetLayerAddress>:
  * @param  LayerIndex  Layer foreground or background
  * @param  Address     New LCD frame buffer value
  * @retval BSP status
  */
int32_t BSP_LCD_SetLayerAddress(uint32_t Instance, uint32_t LayerIndex, uint32_t Address)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <BSP_LCD_SetLayerAddress+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e0e:	f06f 0301 	mvn.w	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e012      	b.n	8002e3c <BSP_LCD_SetLayerAddress+0x44>
  }
  else
  {
    if(Lcd_Ctx[Instance].ReloadEnable == 1U)
 8002e16:	4a0c      	ldr	r2, [pc, #48]	@ (8002e48 <BSP_LCD_SetLayerAddress+0x50>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	015b      	lsls	r3, r3, #5
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3318      	adds	r3, #24
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d105      	bne.n	8002e32 <BSP_LCD_SetLayerAddress+0x3a>
    {
      (void)HAL_LTDC_SetAddress(&hlcd_ltdc, Address, LayerIndex);
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4808      	ldr	r0, [pc, #32]	@ (8002e4c <BSP_LCD_SetLayerAddress+0x54>)
 8002e2c:	f002 fc0e 	bl	800564c <HAL_LTDC_SetAddress>
 8002e30:	e004      	b.n	8002e3c <BSP_LCD_SetLayerAddress+0x44>
    }
    else
    {
      (void)HAL_LTDC_SetAddress_NoReload(&hlcd_ltdc, Address, LayerIndex);
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4805      	ldr	r0, [pc, #20]	@ (8002e4c <BSP_LCD_SetLayerAddress+0x54>)
 8002e38:	f002 fc6d 	bl	8005716 <HAL_LTDC_SetAddress_NoReload>
    }
  }

  return ret;
 8002e3c:	697b      	ldr	r3, [r7, #20]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24000e8c 	.word	0x24000e8c
 8002e4c:	24000de4 	.word	0x24000de4

08002e50 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e64:	f06f 0301 	mvn.w	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	e006      	b.n	8002e7a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	@ (8002e88 <BSP_LCD_GetXSize+0x38>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	015b      	lsls	r3, r3, #5
 8002e72:	4413      	add	r3, r2
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	24000e8c 	.word	0x24000e8c

08002e8c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ea0:	f06f 0301 	mvn.w	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e007      	b.n	8002eb8 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002ea8:	4a07      	ldr	r2, [pc, #28]	@ (8002ec8 <BSP_LCD_GetYSize+0x3c>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	24000e8c 	.word	0x24000e8c

08002ecc <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	@ 0x38
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	330a      	adds	r3, #10
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	330b      	adds	r3, #11
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	441a      	add	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	441a      	add	r2, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	330d      	adds	r3, #13
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	4413      	add	r3, r2
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	3312      	adds	r3, #18
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	3313      	adds	r3, #19
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	441a      	add	r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	3314      	adds	r3, #20
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	441a      	add	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3315      	adds	r3, #21
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	4413      	add	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3316      	adds	r3, #22
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	3317      	adds	r3, #23
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	441a      	add	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3318      	adds	r3, #24
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	441a      	add	r2, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	3319      	adds	r3, #25
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4413      	add	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	331c      	adds	r3, #28
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	331d      	adds	r3, #29
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	4413      	add	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002f6a:	4a37      	ldr	r2, [pc, #220]	@ (8003048 <BSP_LCD_DrawBitmap+0x17c>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	4413      	add	r3, r2
 8002f72:	3308      	adds	r3, #8
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a35      	ldr	r2, [pc, #212]	@ (800304c <BSP_LCD_DrawBitmap+0x180>)
 8002f78:	2134      	movs	r1, #52	@ 0x34
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	335c      	adds	r3, #92	@ 0x5c
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4930      	ldr	r1, [pc, #192]	@ (8003048 <BSP_LCD_DrawBitmap+0x17c>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	440b      	add	r3, r1
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	fb03 f101 	mul.w	r1, r3, r1
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	440b      	add	r3, r1
 8002f98:	482b      	ldr	r0, [pc, #172]	@ (8003048 <BSP_LCD_DrawBitmap+0x17c>)
 8002f9a:	68f9      	ldr	r1, [r7, #12]
 8002f9c:	0149      	lsls	r1, r1, #5
 8002f9e:	4401      	add	r1, r0
 8002fa0:	3110      	adds	r1, #16
 8002fa2:	6809      	ldr	r1, [r1, #0]
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	3b20      	subs	r3, #32
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d802      	bhi.n	8002fba <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb8:	e008      	b.n	8002fcc <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	3b10      	subs	r3, #16
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d802      	bhi.n	8002fc8 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc6:	e001      	b.n	8002fcc <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	08d2      	lsrs	r2, r2, #3
 8002fda:	fb03 f202 	mul.w	r2, r3, r2
 8002fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe0:	4413      	add	r3, r2
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fec:	e023      	b.n	8003036 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6a39      	ldr	r1, [r7, #32]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fa77 	bl	80034ec <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002ffe:	4a12      	ldr	r2, [pc, #72]	@ (8003048 <BSP_LCD_DrawBitmap+0x17c>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015b      	lsls	r3, r3, #5
 8003004:	4413      	add	r3, r2
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	490f      	ldr	r1, [pc, #60]	@ (8003048 <BSP_LCD_DrawBitmap+0x17c>)
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	0152      	lsls	r2, r2, #5
 800300e:	440a      	add	r2, r1
 8003010:	3210      	adds	r2, #16
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800301a:	4413      	add	r3, r2
 800301c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	08db      	lsrs	r3, r3, #3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	425b      	negs	r3, r3
 800302a:	6a3a      	ldr	r2, [r7, #32]
 800302c:	4413      	add	r3, r2
 800302e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	3301      	adds	r3, #1
 8003034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	429a      	cmp	r2, r3
 800303c:	d3d7      	bcc.n	8002fee <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 800303e:	69fb      	ldr	r3, [r7, #28]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3730      	adds	r7, #48	@ 0x30
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	24000e8c 	.word	0x24000e8c
 800304c:	24000de4 	.word	0x24000de4

08003050 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e032      	b.n	80030ce <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e028      	b.n	80030c0 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	3301      	adds	r3, #1
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	431a      	orrs	r2, r3
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3302      	adds	r3, #2
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	3303      	adds	r3, #3
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	18d1      	adds	r1, r2, r3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	441a      	add	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f95e 	bl	8003364 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 80030a8:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <BSP_LCD_FillRGBRect+0x90>)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	015b      	lsls	r3, r3, #5
 80030ae:	4413      	add	r3, r2
 80030b0:	3310      	adds	r3, #16
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3d2      	bcc.n	800306e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d3c8      	bcc.n	8003068 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	24000e8c 	.word	0x24000e8c

080030e4 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80030f2:	4a21      	ldr	r2, [pc, #132]	@ (8003178 <BSP_LCD_DrawHLine+0x94>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	015b      	lsls	r3, r3, #5
 80030f8:	4413      	add	r3, r2
 80030fa:	3308      	adds	r3, #8
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1f      	ldr	r2, [pc, #124]	@ (800317c <BSP_LCD_DrawHLine+0x98>)
 8003100:	2134      	movs	r1, #52	@ 0x34
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	335c      	adds	r3, #92	@ 0x5c
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	491a      	ldr	r1, [pc, #104]	@ (8003178 <BSP_LCD_DrawHLine+0x94>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	440b      	add	r3, r1
 8003114:	3310      	adds	r3, #16
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4817      	ldr	r0, [pc, #92]	@ (8003178 <BSP_LCD_DrawHLine+0x94>)
 800311a:	68f9      	ldr	r1, [r7, #12]
 800311c:	0149      	lsls	r1, r1, #5
 800311e:	4401      	add	r1, r0
 8003120:	6809      	ldr	r1, [r1, #0]
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	fb01 f000 	mul.w	r0, r1, r0
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4401      	add	r1, r0
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	441a      	add	r2, r3
 800313a:	490f      	ldr	r1, [pc, #60]	@ (8003178 <BSP_LCD_DrawHLine+0x94>)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	440b      	add	r3, r1
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d907      	bls.n	8003158 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8003148:	4a0b      	ldr	r2, [pc, #44]	@ (8003178 <BSP_LCD_DrawHLine+0x94>)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	015b      	lsls	r3, r3, #5
 800314e:	4413      	add	r3, r2
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8003158:	6979      	ldr	r1, [r7, #20]
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2300      	movs	r3, #0
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2301      	movs	r3, #1
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f956 	bl	8003418 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	24000e8c 	.word	0x24000e8c
 800317c:	24000de4 	.word	0x24000de4

08003180 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800318e:	4a24      	ldr	r2, [pc, #144]	@ (8003220 <BSP_LCD_DrawVLine+0xa0>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	015b      	lsls	r3, r3, #5
 8003194:	4413      	add	r3, r2
 8003196:	3308      	adds	r3, #8
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a22      	ldr	r2, [pc, #136]	@ (8003224 <BSP_LCD_DrawVLine+0xa4>)
 800319c:	2134      	movs	r1, #52	@ 0x34
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	335c      	adds	r3, #92	@ 0x5c
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	491d      	ldr	r1, [pc, #116]	@ (8003220 <BSP_LCD_DrawVLine+0xa0>)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	015b      	lsls	r3, r3, #5
 80031ae:	440b      	add	r3, r1
 80031b0:	3310      	adds	r3, #16
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	481a      	ldr	r0, [pc, #104]	@ (8003220 <BSP_LCD_DrawVLine+0xa0>)
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	0149      	lsls	r1, r1, #5
 80031ba:	4401      	add	r1, r0
 80031bc:	6809      	ldr	r1, [r1, #0]
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	fb01 f000 	mul.w	r0, r1, r0
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4401      	add	r1, r0
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	441a      	add	r2, r3
 80031d6:	4912      	ldr	r1, [pc, #72]	@ (8003220 <BSP_LCD_DrawVLine+0xa0>)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	015b      	lsls	r3, r3, #5
 80031dc:	440b      	add	r3, r1
 80031de:	3304      	adds	r3, #4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d908      	bls.n	80031f8 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80031e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003220 <BSP_LCD_DrawVLine+0xa0>)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015b      	lsls	r3, r3, #5
 80031ec:	4413      	add	r3, r2
 80031ee:	3304      	adds	r3, #4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80031f8:	6979      	ldr	r1, [r7, #20]
 80031fa:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <BSP_LCD_DrawVLine+0xa0>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	015b      	lsls	r3, r3, #5
 8003200:	4413      	add	r3, r2
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3b01      	subs	r3, #1
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	9201      	str	r2, [sp, #4]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f901 	bl	8003418 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	24000e8c 	.word	0x24000e8c
 8003224:	24000de4 	.word	0x24000de4

08003228 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8003236:	4a1b      	ldr	r2, [pc, #108]	@ (80032a4 <BSP_LCD_FillRect+0x7c>)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	4413      	add	r3, r2
 800323e:	3308      	adds	r3, #8
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a19      	ldr	r2, [pc, #100]	@ (80032a8 <BSP_LCD_FillRect+0x80>)
 8003244:	2134      	movs	r1, #52	@ 0x34
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	335c      	adds	r3, #92	@ 0x5c
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4914      	ldr	r1, [pc, #80]	@ (80032a4 <BSP_LCD_FillRect+0x7c>)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	015b      	lsls	r3, r3, #5
 8003256:	440b      	add	r3, r1
 8003258:	3310      	adds	r3, #16
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4811      	ldr	r0, [pc, #68]	@ (80032a4 <BSP_LCD_FillRect+0x7c>)
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	0149      	lsls	r1, r1, #5
 8003262:	4401      	add	r1, r0
 8003264:	6809      	ldr	r1, [r1, #0]
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	fb01 f000 	mul.w	r0, r1, r0
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	4401      	add	r1, r0
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8003278:	6979      	ldr	r1, [r7, #20]
 800327a:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <BSP_LCD_FillRect+0x7c>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015b      	lsls	r3, r3, #5
 8003280:	4413      	add	r3, r2
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f8c0 	bl	8003418 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	24000e8c 	.word	0x24000e8c
 80032a8:	24000de4 	.word	0x24000de4

080032ac <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80032ba:	4a28      	ldr	r2, [pc, #160]	@ (800335c <BSP_LCD_ReadPixel+0xb0>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	4413      	add	r3, r2
 80032c2:	3308      	adds	r3, #8
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a26      	ldr	r2, [pc, #152]	@ (8003360 <BSP_LCD_ReadPixel+0xb4>)
 80032c8:	2134      	movs	r1, #52	@ 0x34
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3348      	adds	r3, #72	@ 0x48
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11c      	bne.n	8003312 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 80032d8:	4a20      	ldr	r2, [pc, #128]	@ (800335c <BSP_LCD_ReadPixel+0xb0>)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	015b      	lsls	r3, r3, #5
 80032de:	4413      	add	r3, r2
 80032e0:	3308      	adds	r3, #8
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003360 <BSP_LCD_ReadPixel+0xb4>)
 80032e6:	2134      	movs	r1, #52	@ 0x34
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	335c      	adds	r3, #92	@ 0x5c
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	491a      	ldr	r1, [pc, #104]	@ (800335c <BSP_LCD_ReadPixel+0xb0>)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	015b      	lsls	r3, r3, #5
 80032f8:	440b      	add	r3, r1
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	fb03 f101 	mul.w	r1, r3, r1
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	440b      	add	r3, r1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e01d      	b.n	800334e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003312:	4a12      	ldr	r2, [pc, #72]	@ (800335c <BSP_LCD_ReadPixel+0xb0>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015b      	lsls	r3, r3, #5
 8003318:	4413      	add	r3, r2
 800331a:	3308      	adds	r3, #8
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a10      	ldr	r2, [pc, #64]	@ (8003360 <BSP_LCD_ReadPixel+0xb4>)
 8003320:	2134      	movs	r1, #52	@ 0x34
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	335c      	adds	r3, #92	@ 0x5c
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	490b      	ldr	r1, [pc, #44]	@ (800335c <BSP_LCD_ReadPixel+0xb0>)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015b      	lsls	r3, r3, #5
 8003332:	440b      	add	r3, r1
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fb03 f101 	mul.w	r1, r3, r1
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	440b      	add	r3, r1
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	24000e8c 	.word	0x24000e8c
 8003360:	24000de4 	.word	0x24000de4

08003364 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003372:	4a27      	ldr	r2, [pc, #156]	@ (8003410 <BSP_LCD_WritePixel+0xac>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	015b      	lsls	r3, r3, #5
 8003378:	4413      	add	r3, r2
 800337a:	3308      	adds	r3, #8
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a25      	ldr	r2, [pc, #148]	@ (8003414 <BSP_LCD_WritePixel+0xb0>)
 8003380:	2134      	movs	r1, #52	@ 0x34
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3348      	adds	r3, #72	@ 0x48
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11c      	bne.n	80033ca <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8003390:	4a1f      	ldr	r2, [pc, #124]	@ (8003410 <BSP_LCD_WritePixel+0xac>)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	015b      	lsls	r3, r3, #5
 8003396:	4413      	add	r3, r2
 8003398:	3308      	adds	r3, #8
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1d      	ldr	r2, [pc, #116]	@ (8003414 <BSP_LCD_WritePixel+0xb0>)
 800339e:	2134      	movs	r1, #52	@ 0x34
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	335c      	adds	r3, #92	@ 0x5c
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4919      	ldr	r1, [pc, #100]	@ (8003410 <BSP_LCD_WritePixel+0xac>)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	015b      	lsls	r3, r3, #5
 80033b0:	440b      	add	r3, r1
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	fb03 f101 	mul.w	r1, r3, r1
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	440b      	add	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	461a      	mov	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e01b      	b.n	8003402 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 80033ca:	4a11      	ldr	r2, [pc, #68]	@ (8003410 <BSP_LCD_WritePixel+0xac>)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	015b      	lsls	r3, r3, #5
 80033d0:	4413      	add	r3, r2
 80033d2:	3308      	adds	r3, #8
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003414 <BSP_LCD_WritePixel+0xb0>)
 80033d8:	2134      	movs	r1, #52	@ 0x34
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	335c      	adds	r3, #92	@ 0x5c
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	490a      	ldr	r1, [pc, #40]	@ (8003410 <BSP_LCD_WritePixel+0xac>)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015b      	lsls	r3, r3, #5
 80033ea:	440b      	add	r3, r1
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	fb03 f101 	mul.w	r1, r3, r1
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	440b      	add	r3, r1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	b292      	uxth	r2, r2
 8003400:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	24000e8c 	.word	0x24000e8c
 8003414:	24000de4 	.word	0x24000de4

08003418 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 800342a:	4a2d      	ldr	r2, [pc, #180]	@ (80034e0 <LL_FillBuffer+0xc8>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	015b      	lsls	r3, r3, #5
 8003430:	4413      	add	r3, r2
 8003432:	330c      	adds	r3, #12
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d129      	bne.n	800348e <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800343a:	2302      	movs	r3, #2
 800343c:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	0adb      	lsrs	r3, r3, #11
 8003442:	f003 021f 	and.w	r2, r3, #31
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	4413      	add	r3, r2
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	3317      	adds	r3, #23
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	0419      	lsls	r1, r3, #16
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800345e:	4613      	mov	r3, r2
 8003460:	01db      	lsls	r3, r3, #7
 8003462:	4413      	add	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	3321      	adds	r3, #33	@ 0x21
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	4319      	orrs	r1, r3
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	f003 021f 	and.w	r2, r3, #31
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	3317      	adds	r3, #23
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	430b      	orrs	r3, r1
 8003486:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800348a:	613b      	str	r3, [r7, #16]
    break;
 800348c:	e002      	b.n	8003494 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
    break;
 8003492:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003494:	4b13      	ldr	r3, [pc, #76]	@ (80034e4 <LL_FillBuffer+0xcc>)
 8003496:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800349a:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800349c:	4a11      	ldr	r2, [pc, #68]	@ (80034e4 <LL_FillBuffer+0xcc>)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80034a2:	4a10      	ldr	r2, [pc, #64]	@ (80034e4 <LL_FillBuffer+0xcc>)
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 80034a8:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <LL_FillBuffer+0xcc>)
 80034aa:	4a0f      	ldr	r2, [pc, #60]	@ (80034e8 <LL_FillBuffer+0xd0>)
 80034ac:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80034ae:	480d      	ldr	r0, [pc, #52]	@ (80034e4 <LL_FillBuffer+0xcc>)
 80034b0:	f000 fe50 	bl	8004154 <HAL_DMA2D_Init>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10e      	bne.n	80034d8 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6939      	ldr	r1, [r7, #16]
 80034c4:	4807      	ldr	r0, [pc, #28]	@ (80034e4 <LL_FillBuffer+0xcc>)
 80034c6:	f000 feb3 	bl	8004230 <HAL_DMA2D_Start>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80034d0:	2132      	movs	r1, #50	@ 0x32
 80034d2:	4804      	ldr	r0, [pc, #16]	@ (80034e4 <LL_FillBuffer+0xcc>)
 80034d4:	f000 fed7 	bl	8004286 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	24000e8c 	.word	0x24000e8c
 80034e4:	24000d7c 	.word	0x24000d7c
 80034e8:	52001000 	.word	0x52001000

080034ec <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80034fa:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <LL_ConvertLineToRGB+0x9c>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	4413      	add	r3, r2
 8003502:	330c      	adds	r3, #12
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d102      	bne.n	8003510 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800350a:	2302      	movs	r3, #2
 800350c:	617b      	str	r3, [r7, #20]
    break;
 800350e:	e002      	b.n	8003516 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
    break;
 8003514:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 8003518:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800351c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800351e:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800352a:	4b18      	ldr	r3, [pc, #96]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 800352c:	2200      	movs	r2, #0
 800352e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003530:	4b16      	ldr	r3, [pc, #88]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 8003532:	22ff      	movs	r2, #255	@ 0xff
 8003534:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8003536:	4a15      	ldr	r2, [pc, #84]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800353c:	4b13      	ldr	r3, [pc, #76]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 800353e:	2200      	movs	r2, #0
 8003540:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8003542:	4b12      	ldr	r3, [pc, #72]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 8003544:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <LL_ConvertLineToRGB+0xa4>)
 8003546:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003548:	4810      	ldr	r0, [pc, #64]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 800354a:	f000 fe03 	bl	8004154 <HAL_DMA2D_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d115      	bne.n	8003580 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003554:	2101      	movs	r1, #1
 8003556:	480d      	ldr	r0, [pc, #52]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 8003558:	f000 ff7e 	bl	8004458 <HAL_DMA2D_ConfigLayer>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10e      	bne.n	8003580 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	2301      	movs	r3, #1
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	4807      	ldr	r0, [pc, #28]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 800356e:	f000 fe5f 	bl	8004230 <HAL_DMA2D_Start>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003578:	2132      	movs	r1, #50	@ 0x32
 800357a:	4804      	ldr	r0, [pc, #16]	@ (800358c <LL_ConvertLineToRGB+0xa0>)
 800357c:	f000 fe83 	bl	8004286 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003580:	bf00      	nop
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	24000e8c 	.word	0x24000e8c
 800358c:	24000d7c 	.word	0x24000d7c
 8003590:	52001000 	.word	0x52001000

08003594 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08e      	sub	sp, #56	@ 0x38
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003710 <LTDC_MspInit+0x17c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f040 80b0 	bne.w	8003708 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80035a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003714 <LTDC_MspInit+0x180>)
 80035aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035ae:	4a59      	ldr	r2, [pc, #356]	@ (8003714 <LTDC_MspInit+0x180>)
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80035b8:	4b56      	ldr	r3, [pc, #344]	@ (8003714 <LTDC_MspInit+0x180>)
 80035ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80035c6:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <LTDC_MspInit+0x180>)
 80035c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035cc:	4a51      	ldr	r2, [pc, #324]	@ (8003714 <LTDC_MspInit+0x180>)
 80035ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003714 <LTDC_MspInit+0x180>)
 80035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80035e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003714 <LTDC_MspInit+0x180>)
 80035e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003714 <LTDC_MspInit+0x180>)
 80035ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035f4:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <LTDC_MspInit+0x180>)
 80035f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003602:	4b44      	ldr	r3, [pc, #272]	@ (8003714 <LTDC_MspInit+0x180>)
 8003604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003608:	4a42      	ldr	r2, [pc, #264]	@ (8003714 <LTDC_MspInit+0x180>)
 800360a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800360e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003612:	4b40      	ldr	r3, [pc, #256]	@ (8003714 <LTDC_MspInit+0x180>)
 8003614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003620:	4b3c      	ldr	r3, [pc, #240]	@ (8003714 <LTDC_MspInit+0x180>)
 8003622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003626:	4a3b      	ldr	r2, [pc, #236]	@ (8003714 <LTDC_MspInit+0x180>)
 8003628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003630:	4b38      	ldr	r3, [pc, #224]	@ (8003714 <LTDC_MspInit+0x180>)
 8003632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800363e:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <LTDC_MspInit+0x180>)
 8003640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003644:	4a33      	ldr	r2, [pc, #204]	@ (8003714 <LTDC_MspInit+0x180>)
 8003646:	f043 0308 	orr.w	r3, r3, #8
 800364a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800364e:	4b31      	ldr	r3, [pc, #196]	@ (8003714 <LTDC_MspInit+0x180>)
 8003650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 800365c:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800366a:	2302      	movs	r3, #2
 800366c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800366e:	230e      	movs	r3, #14
 8003670:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003676:	4619      	mov	r1, r3
 8003678:	4827      	ldr	r0, [pc, #156]	@ (8003718 <LTDC_MspInit+0x184>)
 800367a:	f001 f841 	bl	8004700 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
 800367e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003684:	230e      	movs	r3, #14
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800368c:	4619      	mov	r1, r3
 800368e:	4823      	ldr	r0, [pc, #140]	@ (800371c <LTDC_MspInit+0x188>)
 8003690:	f001 f836 	bl	8004700 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003694:	23ff      	movs	r3, #255	@ 0xff
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003698:	230e      	movs	r3, #14
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800369c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036a0:	4619      	mov	r1, r3
 80036a2:	481f      	ldr	r0, [pc, #124]	@ (8003720 <LTDC_MspInit+0x18c>)
 80036a4:	f001 f82c 	bl	8004700 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 80036a8:	f240 2302 	movw	r3, #514	@ 0x202
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036ae:	2302      	movs	r3, #2
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80036b6:	2302      	movs	r3, #2
 80036b8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036ba:	230e      	movs	r3, #14
 80036bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80036be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036c2:	4619      	mov	r1, r3
 80036c4:	4817      	ldr	r0, [pc, #92]	@ (8003724 <LTDC_MspInit+0x190>)
 80036c6:	f001 f81b 	bl	8004700 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 80036ca:	2380      	movs	r3, #128	@ 0x80
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036ce:	2301      	movs	r3, #1
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80036d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d6:	4619      	mov	r1, r3
 80036d8:	4813      	ldr	r0, [pc, #76]	@ (8003728 <LTDC_MspInit+0x194>)
 80036da:	f001 f811 	bl	8004700 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80036de:	2201      	movs	r2, #1
 80036e0:	2180      	movs	r1, #128	@ 0x80
 80036e2:	4811      	ldr	r0, [pc, #68]	@ (8003728 <LTDC_MspInit+0x194>)
 80036e4:	f001 f9d4 	bl	8004a90 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80036e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <LTDC_MspInit+0x180>)
 80036ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ee:	4a09      	ldr	r2, [pc, #36]	@ (8003714 <LTDC_MspInit+0x180>)
 80036f0:	f043 0308 	orr.w	r3, r3, #8
 80036f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80036f8:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <LTDC_MspInit+0x180>)
 80036fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036fe:	4a05      	ldr	r2, [pc, #20]	@ (8003714 <LTDC_MspInit+0x180>)
 8003700:	f023 0308 	bic.w	r3, r3, #8
 8003704:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 8003708:	bf00      	nop
 800370a:	3738      	adds	r7, #56	@ 0x38
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	50001000 	.word	0x50001000
 8003714:	58024400 	.word	0x58024400
 8003718:	58022000 	.word	0x58022000
 800371c:	58022400 	.word	0x58022400
 8003720:	58022800 	.word	0x58022800
 8003724:	58021c00 	.word	0x58021c00
 8003728:	58020c00 	.word	0x58020c00

0800372c <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a11      	ldr	r2, [pc, #68]	@ (8003780 <DMA2D_MspInit+0x54>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d11a      	bne.n	8003774 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800373e:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <DMA2D_MspInit+0x58>)
 8003740:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003744:	4a0f      	ldr	r2, [pc, #60]	@ (8003784 <DMA2D_MspInit+0x58>)
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800374e:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <DMA2D_MspInit+0x58>)
 8003750:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 800375c:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <DMA2D_MspInit+0x58>)
 800375e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003760:	4a08      	ldr	r2, [pc, #32]	@ (8003784 <DMA2D_MspInit+0x58>)
 8003762:	f043 0310 	orr.w	r3, r3, #16
 8003766:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <DMA2D_MspInit+0x58>)
 800376a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800376c:	4a05      	ldr	r2, [pc, #20]	@ (8003784 <DMA2D_MspInit+0x58>)
 800376e:	f023 0310 	bic.w	r3, r3, #16
 8003772:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	52001000 	.word	0x52001000
 8003784:	58024400 	.word	0x58024400

08003788 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	@ 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003790:	4b18      	ldr	r3, [pc, #96]	@ (80037f4 <TIMx_PWM_MspInit+0x6c>)
 8003792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003796:	4a17      	ldr	r2, [pc, #92]	@ (80037f4 <TIMx_PWM_MspInit+0x6c>)
 8003798:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800379c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037a0:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <TIMx_PWM_MspInit+0x6c>)
 80037a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <TIMx_PWM_MspInit+0x6c>)
 80037b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037b4:	4a0f      	ldr	r2, [pc, #60]	@ (80037f4 <TIMx_PWM_MspInit+0x6c>)
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <TIMx_PWM_MspInit+0x6c>)
 80037c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80037d4:	2301      	movs	r3, #1
 80037d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 80037d8:	2303      	movs	r3, #3
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 80037dc:	2301      	movs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	4619      	mov	r1, r3
 80037e6:	4804      	ldr	r0, [pc, #16]	@ (80037f8 <TIMx_PWM_MspInit+0x70>)
 80037e8:	f000 ff8a 	bl	8004700 <HAL_GPIO_Init>
}
 80037ec:	bf00      	nop
 80037ee:	3728      	adds	r7, #40	@ 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	58024400 	.word	0x58024400
 80037f8:	58022800 	.word	0x58022800

080037fc <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a11      	ldr	r2, [pc, #68]	@ (800384c <TIMx_PWM_Init+0x50>)
 8003808:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f005 f974 	bl	8008af8 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ffb9 	bl	8003788 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2204      	movs	r2, #4
 800381a:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003822:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f005 f904 	bl	8008a4a <HAL_TIM_PWM_Init>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40010400 	.word	0x40010400

08003850 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003862:	f06f 0301 	mvn.w	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e044      	b.n	80038f4 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2234      	movs	r2, #52	@ 0x34
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	4a23      	ldr	r2, [pc, #140]	@ (8003900 <BSP_SDRAM_Init+0xb0>)
 8003874:	4413      	add	r3, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f892 	bl	80039a0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2234      	movs	r2, #52	@ 0x34
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	4a1e      	ldr	r2, [pc, #120]	@ (8003900 <BSP_SDRAM_Init+0xb0>)
 8003886:	4413      	add	r3, r2
 8003888:	2210      	movs	r2, #16
 800388a:	2104      	movs	r1, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f83b 	bl	8003908 <MX_SDRAM_BANK2_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	e029      	b.n	80038f4 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80038a0:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038a2:	2208      	movs	r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80038a6:	4b17      	ldr	r3, [pc, #92]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038a8:	2203      	movs	r2, #3
 80038aa:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80038ac:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038ae:	f240 6203 	movw	r2, #1539	@ 0x603
 80038b2:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 80038b4:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80038ba:	4b12      	ldr	r3, [pc, #72]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038bc:	2200      	movs	r2, #0
 80038be:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 80038c0:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038c2:	2230      	movs	r2, #48	@ 0x30
 80038c4:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d2:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2234      	movs	r2, #52	@ 0x34
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	4a08      	ldr	r2, [pc, #32]	@ (8003900 <BSP_SDRAM_Init+0xb0>)
 80038de:	4413      	add	r3, r2
 80038e0:	4908      	ldr	r1, [pc, #32]	@ (8003904 <BSP_SDRAM_Init+0xb4>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fc11 	bl	800210a <MT48LC4M32B2_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80038ee:	f06f 0304 	mvn.w	r3, #4
 80038f2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	24000eac 	.word	0x24000eac
 8003904:	24000ee0 	.word	0x24000ee0

08003908 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	@ 0x30
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8003914:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <MX_SDRAM_BANK2_Init+0x90>)
 8003916:	4a21      	ldr	r2, [pc, #132]	@ (800399c <MX_SDRAM_BANK2_Init+0x94>)
 8003918:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <MX_SDRAM_BANK2_Init+0x90>)
 8003934:	2240      	movs	r2, #64	@ 0x40
 8003936:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800393e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800394c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800395c:	2302      	movs	r3, #2
 800395e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003960:	2307      	movs	r3, #7
 8003962:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003964:	2304      	movs	r3, #4
 8003966:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8003968:	2307      	movs	r3, #7
 800396a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800396c:	2302      	movs	r3, #2
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 8003970:	2302      	movs	r3, #2
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 8003974:	2302      	movs	r3, #2
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	4619      	mov	r1, r3
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f004 ffc0 	bl	8008904 <HAL_SDRAM_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3730      	adds	r7, #48	@ 0x30
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	24000eac 	.word	0x24000eac
 800399c:	52004140 	.word	0x52004140

080039a0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08e      	sub	sp, #56	@ 0x38
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039a8:	4b73      	ldr	r3, [pc, #460]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039ae:	4a72      	ldr	r2, [pc, #456]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80039b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80039c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80039d6:	4b68      	ldr	r3, [pc, #416]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039e4:	4b64      	ldr	r3, [pc, #400]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ea:	4a63      	ldr	r2, [pc, #396]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039ec:	f043 0308 	orr.w	r3, r3, #8
 80039f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039f4:	4b60      	ldr	r3, [pc, #384]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 80039f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a02:	4b5d      	ldr	r3, [pc, #372]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a08:	4a5b      	ldr	r2, [pc, #364]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a0a:	f043 0310 	orr.w	r3, r3, #16
 8003a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a12:	4b59      	ldr	r3, [pc, #356]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a20:	4b55      	ldr	r3, [pc, #340]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a26:	4a54      	ldr	r2, [pc, #336]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a28:	f043 0320 	orr.w	r3, r3, #32
 8003a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a30:	4b51      	ldr	r3, [pc, #324]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a44:	4a4c      	ldr	r2, [pc, #304]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a5c:	4b46      	ldr	r3, [pc, #280]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a62:	4a45      	ldr	r2, [pc, #276]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a6c:	4b42      	ldr	r3, [pc, #264]	@ (8003b78 <SDRAM_MspInit+0x1d8>)
 8003a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003a86:	230c      	movs	r3, #12
 8003a88:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8003a8a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a94:	4619      	mov	r1, r3
 8003a96:	4839      	ldr	r0, [pc, #228]	@ (8003b7c <SDRAM_MspInit+0x1dc>)
 8003a98:	f000 fe32 	bl	8004700 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003a9c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4835      	ldr	r0, [pc, #212]	@ (8003b80 <SDRAM_MspInit+0x1e0>)
 8003aaa:	f000 fe29 	bl	8004700 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003aae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4832      	ldr	r0, [pc, #200]	@ (8003b84 <SDRAM_MspInit+0x1e4>)
 8003abc:	f000 fe20 	bl	8004700 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8003ac0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aca:	4619      	mov	r1, r3
 8003acc:	482e      	ldr	r0, [pc, #184]	@ (8003b88 <SDRAM_MspInit+0x1e8>)
 8003ace:	f000 fe17 	bl	8004700 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8003ad2:	23e0      	movs	r3, #224	@ 0xe0
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ada:	4619      	mov	r1, r3
 8003adc:	482b      	ldr	r0, [pc, #172]	@ (8003b8c <SDRAM_MspInit+0x1ec>)
 8003ade:	f000 fe0f 	bl	8004700 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003ae4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ae8:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8003aea:	4b29      	ldr	r3, [pc, #164]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af0:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8003af2:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003af4:	2280      	movs	r2, #128	@ 0x80
 8003af6:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003af8:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8003afe:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b00:	f240 2202 	movw	r2, #514	@ 0x202
 8003b04:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8003b06:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b08:	f640 0208 	movw	r2, #2056	@ 0x808
 8003b0c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b10:	2220      	movs	r2, #32
 8003b12:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8003b14:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b16:	2280      	movs	r2, #128	@ 0x80
 8003b18:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8003b28:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8003b2e:	4b18      	ldr	r3, [pc, #96]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b30:	2280      	movs	r2, #128	@ 0x80
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003b34:	4b16      	ldr	r3, [pc, #88]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8003b3a:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8003b40:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b42:	4a14      	ldr	r2, [pc, #80]	@ (8003b94 <SDRAM_MspInit+0x1f4>)
 8003b44:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003b46:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <SDRAM_MspInit+0x1f8>)
 8003b48:	4a11      	ldr	r2, [pc, #68]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b4c:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b4e:	4a12      	ldr	r2, [pc, #72]	@ (8003b98 <SDRAM_MspInit+0x1f8>)
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8003b52:	480f      	ldr	r0, [pc, #60]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b54:	f001 ffd4 	bl	8005b00 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003b58:	480d      	ldr	r0, [pc, #52]	@ (8003b90 <SDRAM_MspInit+0x1f0>)
 8003b5a:	f001 ff85 	bl	8005a68 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	210f      	movs	r1, #15
 8003b62:	207a      	movs	r0, #122	@ 0x7a
 8003b64:	f000 fa49 	bl	8003ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003b68:	207a      	movs	r0, #122	@ 0x7a
 8003b6a:	f000 fa60 	bl	800402e <HAL_NVIC_EnableIRQ>
}
 8003b6e:	bf00      	nop
 8003b70:	3738      	adds	r7, #56	@ 0x38
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58020c00 	.word	0x58020c00
 8003b80:	58021000 	.word	0x58021000
 8003b84:	58021400 	.word	0x58021400
 8003b88:	58021800 	.word	0x58021800
 8003b8c:	58021c00 	.word	0x58021c00
 8003b90:	24000f00 	.word	0x24000f00
 8003b94:	52000040 	.word	0x52000040
 8003b98:	24000eac 	.word	0x24000eac

08003b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ba0:	4b29      	ldr	r3, [pc, #164]	@ (8003c48 <SystemInit+0xac>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba6:	4a28      	ldr	r2, [pc, #160]	@ (8003c48 <SystemInit+0xac>)
 8003ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003bb0:	4b26      	ldr	r3, [pc, #152]	@ (8003c4c <SystemInit+0xb0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	@ (8003c4c <SystemInit+0xb0>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003bbc:	4b23      	ldr	r3, [pc, #140]	@ (8003c4c <SystemInit+0xb0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003bc2:	4b22      	ldr	r3, [pc, #136]	@ (8003c4c <SystemInit+0xb0>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4921      	ldr	r1, [pc, #132]	@ (8003c4c <SystemInit+0xb0>)
 8003bc8:	4b21      	ldr	r3, [pc, #132]	@ (8003c50 <SystemInit+0xb4>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003bce:	4b1f      	ldr	r3, [pc, #124]	@ (8003c4c <SystemInit+0xb0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <SystemInit+0xb0>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003bda:	4b1c      	ldr	r3, [pc, #112]	@ (8003c4c <SystemInit+0xb0>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003be0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c4c <SystemInit+0xb0>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003be6:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <SystemInit+0xb0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003bec:	4b17      	ldr	r3, [pc, #92]	@ (8003c4c <SystemInit+0xb0>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003bf2:	4b16      	ldr	r3, [pc, #88]	@ (8003c4c <SystemInit+0xb0>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003bf8:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <SystemInit+0xb0>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8003bfe:	4b13      	ldr	r3, [pc, #76]	@ (8003c4c <SystemInit+0xb0>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003c04:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <SystemInit+0xb0>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003c0a:	4b10      	ldr	r3, [pc, #64]	@ (8003c4c <SystemInit+0xb0>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c10:	4b0e      	ldr	r3, [pc, #56]	@ (8003c4c <SystemInit+0xb0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0d      	ldr	r2, [pc, #52]	@ (8003c4c <SystemInit+0xb0>)
 8003c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <SystemInit+0xb0>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003c22:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <SystemInit+0xb8>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <SystemInit+0xbc>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c2e:	d202      	bcs.n	8003c36 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <SystemInit+0xc0>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
 8003c36:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <SystemInit+0xac>)
 8003c38:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c3c:	609a      	str	r2, [r3, #8]
#endif  


}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c54:	5c001000 	.word	0x5c001000
 8003c58:	ffff0000 	.word	0xffff0000
 8003c5c:	51008108 	.word	0x51008108

08003c60 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003c64:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <ExitRun0Mode+0x2c>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <ExitRun0Mode+0x2c>)
 8003c6a:	f043 0302 	orr.w	r3, r3, #2
 8003c6e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003c70:	bf00      	nop
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <ExitRun0Mode+0x2c>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f9      	beq.n	8003c72 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	58024800 	.word	0x58024800

08003c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c96:	2003      	movs	r0, #3
 8003c98:	f000 f9a4 	bl	8003fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c9c:	f002 fe30 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <HAL_Init+0x68>)
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	4913      	ldr	r1, [pc, #76]	@ (8003cfc <HAL_Init+0x6c>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cba:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <HAL_Init+0x68>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cfc <HAL_Init+0x6c>)
 8003cc4:	5cd3      	ldrb	r3, [r2, r3]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003d00 <HAL_Init+0x70>)
 8003cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003d04 <HAL_Init+0x74>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cda:	200f      	movs	r0, #15
 8003cdc:	f000 f81c 	bl	8003d18 <HAL_InitTick>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e002      	b.n	8003cf0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003cea:	f000 f80d 	bl	8003d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	0800c818 	.word	0x0800c818
 8003d00:	24000018 	.word	0x24000018
 8003d04:	24000014 	.word	0x24000014

08003d08 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003d20:	4b15      	ldr	r3, [pc, #84]	@ (8003d78 <HAL_InitTick+0x60>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e021      	b.n	8003d70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003d2c:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <HAL_InitTick+0x64>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <HAL_InitTick+0x60>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	4619      	mov	r1, r3
 8003d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f981 	bl	800404a <HAL_SYSTICK_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e00e      	b.n	8003d70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b0f      	cmp	r3, #15
 8003d56:	d80a      	bhi.n	8003d6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d60:	f000 f94b 	bl	8003ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d64:	4a06      	ldr	r2, [pc, #24]	@ (8003d80 <HAL_InitTick+0x68>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	24000020 	.word	0x24000020
 8003d7c:	24000014 	.word	0x24000014
 8003d80:	2400001c 	.word	0x2400001c

08003d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d88:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <HAL_IncTick+0x20>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <HAL_IncTick+0x24>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4413      	add	r3, r2
 8003d94:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <HAL_IncTick+0x24>)
 8003d96:	6013      	str	r3, [r2, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	24000020 	.word	0x24000020
 8003da8:	24000f6c 	.word	0x24000f6c

08003dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return uwTick;
 8003db0:	4b03      	ldr	r3, [pc, #12]	@ (8003dc0 <HAL_GetTick+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	24000f6c 	.word	0x24000f6c

08003dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dcc:	f7ff ffee 	bl	8003dac <HAL_GetTick>
 8003dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d005      	beq.n	8003dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dde:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <HAL_Delay+0x44>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dea:	bf00      	nop
 8003dec:	f7ff ffde 	bl	8003dac <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d8f7      	bhi.n	8003dec <HAL_Delay+0x28>
  {
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	24000020 	.word	0x24000020

08003e0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e10:	4b03      	ldr	r3, [pc, #12]	@ (8003e20 <HAL_GetREVID+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0c1b      	lsrs	r3, r3, #16
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	5c001000 	.word	0x5c001000

08003e24 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_EnableCompensationCell+0x1c>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <HAL_EnableCompensationCell+0x1c>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6213      	str	r3, [r2, #32]
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	58000400 	.word	0x58000400

08003e44 <__NVIC_SetPriorityGrouping>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <__NVIC_SetPriorityGrouping+0x40>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e60:	4013      	ands	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e6c:	4b06      	ldr	r3, [pc, #24]	@ (8003e88 <__NVIC_SetPriorityGrouping+0x44>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e72:	4a04      	ldr	r2, [pc, #16]	@ (8003e84 <__NVIC_SetPriorityGrouping+0x40>)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	60d3      	str	r3, [r2, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000ed00 	.word	0xe000ed00
 8003e88:	05fa0000 	.word	0x05fa0000

08003e8c <__NVIC_GetPriorityGrouping>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e90:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	f003 0307 	and.w	r3, r3, #7
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <__NVIC_EnableIRQ>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	db0b      	blt.n	8003ed2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	f003 021f 	and.w	r2, r3, #31
 8003ec0:	4907      	ldr	r1, [pc, #28]	@ (8003ee0 <__NVIC_EnableIRQ+0x38>)
 8003ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2001      	movs	r0, #1
 8003eca:	fa00 f202 	lsl.w	r2, r0, r2
 8003ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000e100 	.word	0xe000e100

08003ee4 <__NVIC_SetPriority>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db0a      	blt.n	8003f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	490c      	ldr	r1, [pc, #48]	@ (8003f30 <__NVIC_SetPriority+0x4c>)
 8003efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	440b      	add	r3, r1
 8003f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f0c:	e00a      	b.n	8003f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4908      	ldr	r1, [pc, #32]	@ (8003f34 <__NVIC_SetPriority+0x50>)
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	440b      	add	r3, r1
 8003f22:	761a      	strb	r2, [r3, #24]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000e100 	.word	0xe000e100
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <NVIC_EncodePriority>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	@ 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f1c3 0307 	rsb	r3, r3, #7
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf28      	it	cs
 8003f56:	2304      	movcs	r3, #4
 8003f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d902      	bls.n	8003f68 <NVIC_EncodePriority+0x30>
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3b03      	subs	r3, #3
 8003f66:	e000      	b.n	8003f6a <NVIC_EncodePriority+0x32>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	43d9      	mvns	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	4313      	orrs	r3, r2
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3724      	adds	r7, #36	@ 0x24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fb0:	d301      	bcc.n	8003fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e00f      	b.n	8003fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <SysTick_Config+0x40>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fbe:	210f      	movs	r1, #15
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	f7ff ff8e 	bl	8003ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <SysTick_Config+0x40>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fce:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <SysTick_Config+0x40>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010

08003fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff29 	bl	8003e44 <__NVIC_SetPriorityGrouping>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004008:	f7ff ff40 	bl	8003e8c <__NVIC_GetPriorityGrouping>
 800400c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ff90 	bl	8003f38 <NVIC_EncodePriority>
 8004018:	4602      	mov	r2, r0
 800401a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff5f 	bl	8003ee4 <__NVIC_SetPriority>
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff33 	bl	8003ea8 <__NVIC_EnableIRQ>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ffa4 	bl	8003fa0 <SysTick_Config>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004068:	f3bf 8f5f 	dmb	sy
}
 800406c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800406e:	4b07      	ldr	r3, [pc, #28]	@ (800408c <HAL_MPU_Disable+0x28>)
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	4a06      	ldr	r2, [pc, #24]	@ (800408c <HAL_MPU_Disable+0x28>)
 8004074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004078:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800407a:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <HAL_MPU_Disable+0x2c>)
 800407c:	2200      	movs	r2, #0
 800407e:	605a      	str	r2, [r3, #4]
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	e000ed00 	.word	0xe000ed00
 8004090:	e000ed90 	.word	0xe000ed90

08004094 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800409c:	4a0b      	ldr	r2, [pc, #44]	@ (80040cc <HAL_MPU_Enable+0x38>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	@ (80040d0 <HAL_MPU_Enable+0x3c>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	4a09      	ldr	r2, [pc, #36]	@ (80040d0 <HAL_MPU_Enable+0x3c>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80040b2:	f3bf 8f4f 	dsb	sy
}
 80040b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040b8:	f3bf 8f6f 	isb	sy
}
 80040bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000ed90 	.word	0xe000ed90
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	785a      	ldrb	r2, [r3, #1]
 80040e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <HAL_MPU_ConfigRegion+0x7c>)
 80040e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80040e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004150 <HAL_MPU_ConfigRegion+0x7c>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	4a19      	ldr	r2, [pc, #100]	@ (8004150 <HAL_MPU_ConfigRegion+0x7c>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80040f0:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <HAL_MPU_ConfigRegion+0x7c>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7b1b      	ldrb	r3, [r3, #12]
 80040fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7adb      	ldrb	r3, [r3, #11]
 8004102:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004104:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7a9b      	ldrb	r3, [r3, #10]
 800410a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800410c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	7b5b      	ldrb	r3, [r3, #13]
 8004112:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004114:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7b9b      	ldrb	r3, [r3, #14]
 800411a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800411c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7bdb      	ldrb	r3, [r3, #15]
 8004122:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004124:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7a5b      	ldrb	r3, [r3, #9]
 800412a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800412c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	7a1b      	ldrb	r3, [r3, #8]
 8004132:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004134:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800413c:	4a04      	ldr	r2, [pc, #16]	@ (8004150 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800413e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004140:	6113      	str	r3, [r2, #16]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000ed90 	.word	0xe000ed90

08004154 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e04f      	b.n	8004206 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f84e 	bl	800421c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <HAL_DMA2D_Init+0xbc>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6851      	ldr	r1, [r2, #4]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	69d2      	ldr	r2, [r2, #28]
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004214 <HAL_DMA2D_Init+0xc0>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6891      	ldr	r1, [r2, #8]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6992      	ldr	r2, [r2, #24]
 80041b6:	4311      	orrs	r1, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	430b      	orrs	r3, r1
 80041be:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041c6:	4b14      	ldr	r3, [pc, #80]	@ (8004218 <HAL_DMA2D_Init+0xc4>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68d1      	ldr	r1, [r2, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041dc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	051a      	lsls	r2, r3, #20
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	055b      	lsls	r3, r3, #21
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	fff8ffbf 	.word	0xfff8ffbf
 8004214:	fffffef8 	.word	0xfffffef8
 8004218:	ffff0000 	.word	0xffff0000

0800421c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_DMA2D_Start+0x1c>
 8004248:	2302      	movs	r3, #2
 800424a:	e018      	b.n	800427e <HAL_DMA2D_Start+0x4e>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f9a4 	bl	80045b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d056      	beq.n	8004350 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80042a2:	f7ff fd83 	bl	8003dac <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80042a8:	e04b      	b.n	8004342 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d023      	beq.n	8004304 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042e0:	f043 0201 	orr.w	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2221      	movs	r2, #33	@ 0x21
 80042ee:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0a5      	b.n	8004450 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d01a      	beq.n	8004342 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800430c:	f7ff fd4e 	bl	8003dac <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d302      	bcc.n	8004322 <HAL_DMA2D_PollForTransfer+0x9c>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2203      	movs	r2, #3
 8004332:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e086      	b.n	8004450 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ac      	beq.n	80042aa <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d061      	beq.n	8004436 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004372:	f7ff fd1b 	bl	8003dac <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004378:	e056      	b.n	8004428 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02e      	beq.n	80043ea <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800439a:	f043 0204 	orr.w	r2, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043b0:	f043 0202 	orr.w	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c6:	f043 0201 	orr.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2229      	movs	r2, #41	@ 0x29
 80043d4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2204      	movs	r2, #4
 80043da:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e032      	b.n	8004450 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d01a      	beq.n	8004428 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7ff fcdb 	bl	8003dac <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <HAL_DMA2D_PollForTransfer+0x182>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2203      	movs	r2, #3
 8004418:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e013      	b.n	8004450 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0a1      	beq.n	800437a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2212      	movs	r2, #18
 800443c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_DMA2D_ConfigLayer+0x24>
 8004478:	2302      	movs	r3, #2
 800447a:	e092      	b.n	80045a2 <HAL_DMA2D_ConfigLayer+0x14a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	3328      	adds	r3, #40	@ 0x28
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80044b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80044bc:	4b3c      	ldr	r3, [pc, #240]	@ (80045b0 <HAL_DMA2D_ConfigLayer+0x158>)
 80044be:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b0a      	cmp	r3, #10
 80044c6:	d003      	beq.n	80044d0 <HAL_DMA2D_ConfigLayer+0x78>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b09      	cmp	r3, #9
 80044ce:	d107      	bne.n	80044e0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	e005      	b.n	80044ec <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d120      	bne.n	8004534 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	ea02 0103 	and.w	r1, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	430a      	orrs	r2, r1
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b0a      	cmp	r3, #10
 800451a:	d003      	beq.n	8004524 <HAL_DMA2D_ConfigLayer+0xcc>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b09      	cmp	r3, #9
 8004522:	d135      	bne.n	8004590 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004530:	629a      	str	r2, [r3, #40]	@ 0x28
 8004532:	e02d      	b.n	8004590 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b0b      	cmp	r3, #11
 800453a:	d109      	bne.n	8004550 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	049b      	lsls	r3, r3, #18
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800454e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	43db      	mvns	r3, r3
 800455a:	ea02 0103 	and.w	r1, r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	430a      	orrs	r2, r1
 8004566:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b0a      	cmp	r3, #10
 8004578:	d003      	beq.n	8004582 <HAL_DMA2D_ConfigLayer+0x12a>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b09      	cmp	r3, #9
 8004580:	d106      	bne.n	8004590 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800458e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	ff33000f 	.word	0xff33000f

080045b4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b08b      	sub	sp, #44	@ 0x2c
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	041a      	lsls	r2, r3, #16
 80045d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045ec:	d174      	bne.n	80046d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80045f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80045fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004604:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d108      	bne.n	8004626 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	431a      	orrs	r2, r3
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	4313      	orrs	r3, r2
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
 8004624:	e053      	b.n	80046ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d106      	bne.n	800463c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4313      	orrs	r3, r2
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
 800463a:	e048      	b.n	80046ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d111      	bne.n	8004668 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	0cdb      	lsrs	r3, r3, #19
 8004648:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	0a9b      	lsrs	r3, r3, #10
 800464e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	08db      	lsrs	r3, r3, #3
 8004654:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	02db      	lsls	r3, r3, #11
 800465e:	4313      	orrs	r3, r2
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
 8004666:	e032      	b.n	80046ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d117      	bne.n	80046a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	0fdb      	lsrs	r3, r3, #31
 8004674:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	0cdb      	lsrs	r3, r3, #19
 800467a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	0adb      	lsrs	r3, r3, #11
 8004680:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	08db      	lsrs	r3, r3, #3
 8004686:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	029b      	lsls	r3, r3, #10
 8004690:	431a      	orrs	r2, r3
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	03db      	lsls	r3, r3, #15
 8004696:	4313      	orrs	r3, r2
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
 800469e:	e016      	b.n	80046ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	0f1b      	lsrs	r3, r3, #28
 80046a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	0d1b      	lsrs	r3, r3, #20
 80046aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	0b1b      	lsrs	r3, r3, #12
 80046b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	011a      	lsls	r2, r3, #4
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	431a      	orrs	r2, r3
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	031b      	lsls	r3, r3, #12
 80046c6:	4313      	orrs	r3, r2
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80046d6:	e00d      	b.n	80046f4 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046e0:	d104      	bne.n	80046ec <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	615a      	str	r2, [r3, #20]
}
 80046ea:	e003      	b.n	80046f4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	60da      	str	r2, [r3, #12]
}
 80046f4:	bf00      	nop
 80046f6:	372c      	adds	r7, #44	@ 0x2c
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800470e:	4b89      	ldr	r3, [pc, #548]	@ (8004934 <HAL_GPIO_Init+0x234>)
 8004710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004712:	e194      	b.n	8004a3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2101      	movs	r1, #1
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8186 	beq.w	8004a38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d005      	beq.n	8004744 <HAL_GPIO_Init+0x44>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d130      	bne.n	80047a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	2203      	movs	r2, #3
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800477a:	2201      	movs	r2, #1
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	f003 0201 	and.w	r2, r3, #1
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d017      	beq.n	80047e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	2203      	movs	r2, #3
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d123      	bne.n	8004836 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	08da      	lsrs	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3208      	adds	r2, #8
 80047f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	220f      	movs	r2, #15
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	08da      	lsrs	r2, r3, #3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3208      	adds	r2, #8
 8004830:	69b9      	ldr	r1, [r7, #24]
 8004832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	2203      	movs	r2, #3
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0203 	and.w	r2, r3, #3
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80e0 	beq.w	8004a38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004878:	4b2f      	ldr	r3, [pc, #188]	@ (8004938 <HAL_GPIO_Init+0x238>)
 800487a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800487e:	4a2e      	ldr	r2, [pc, #184]	@ (8004938 <HAL_GPIO_Init+0x238>)
 8004880:	f043 0302 	orr.w	r3, r3, #2
 8004884:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004888:	4b2b      	ldr	r3, [pc, #172]	@ (8004938 <HAL_GPIO_Init+0x238>)
 800488a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004896:	4a29      	ldr	r2, [pc, #164]	@ (800493c <HAL_GPIO_Init+0x23c>)
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	3302      	adds	r3, #2
 800489e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	220f      	movs	r2, #15
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a20      	ldr	r2, [pc, #128]	@ (8004940 <HAL_GPIO_Init+0x240>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d052      	beq.n	8004968 <HAL_GPIO_Init+0x268>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <HAL_GPIO_Init+0x244>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d031      	beq.n	800492e <HAL_GPIO_Init+0x22e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004948 <HAL_GPIO_Init+0x248>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02b      	beq.n	800492a <HAL_GPIO_Init+0x22a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1d      	ldr	r2, [pc, #116]	@ (800494c <HAL_GPIO_Init+0x24c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d025      	beq.n	8004926 <HAL_GPIO_Init+0x226>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004950 <HAL_GPIO_Init+0x250>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01f      	beq.n	8004922 <HAL_GPIO_Init+0x222>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <HAL_GPIO_Init+0x254>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d019      	beq.n	800491e <HAL_GPIO_Init+0x21e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004958 <HAL_GPIO_Init+0x258>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_GPIO_Init+0x21a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a19      	ldr	r2, [pc, #100]	@ (800495c <HAL_GPIO_Init+0x25c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00d      	beq.n	8004916 <HAL_GPIO_Init+0x216>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a18      	ldr	r2, [pc, #96]	@ (8004960 <HAL_GPIO_Init+0x260>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <HAL_GPIO_Init+0x212>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a17      	ldr	r2, [pc, #92]	@ (8004964 <HAL_GPIO_Init+0x264>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_GPIO_Init+0x20e>
 800490a:	2309      	movs	r3, #9
 800490c:	e02d      	b.n	800496a <HAL_GPIO_Init+0x26a>
 800490e:	230a      	movs	r3, #10
 8004910:	e02b      	b.n	800496a <HAL_GPIO_Init+0x26a>
 8004912:	2308      	movs	r3, #8
 8004914:	e029      	b.n	800496a <HAL_GPIO_Init+0x26a>
 8004916:	2307      	movs	r3, #7
 8004918:	e027      	b.n	800496a <HAL_GPIO_Init+0x26a>
 800491a:	2306      	movs	r3, #6
 800491c:	e025      	b.n	800496a <HAL_GPIO_Init+0x26a>
 800491e:	2305      	movs	r3, #5
 8004920:	e023      	b.n	800496a <HAL_GPIO_Init+0x26a>
 8004922:	2304      	movs	r3, #4
 8004924:	e021      	b.n	800496a <HAL_GPIO_Init+0x26a>
 8004926:	2303      	movs	r3, #3
 8004928:	e01f      	b.n	800496a <HAL_GPIO_Init+0x26a>
 800492a:	2302      	movs	r3, #2
 800492c:	e01d      	b.n	800496a <HAL_GPIO_Init+0x26a>
 800492e:	2301      	movs	r3, #1
 8004930:	e01b      	b.n	800496a <HAL_GPIO_Init+0x26a>
 8004932:	bf00      	nop
 8004934:	58000080 	.word	0x58000080
 8004938:	58024400 	.word	0x58024400
 800493c:	58000400 	.word	0x58000400
 8004940:	58020000 	.word	0x58020000
 8004944:	58020400 	.word	0x58020400
 8004948:	58020800 	.word	0x58020800
 800494c:	58020c00 	.word	0x58020c00
 8004950:	58021000 	.word	0x58021000
 8004954:	58021400 	.word	0x58021400
 8004958:	58021800 	.word	0x58021800
 800495c:	58021c00 	.word	0x58021c00
 8004960:	58022000 	.word	0x58022000
 8004964:	58022400 	.word	0x58022400
 8004968:	2300      	movs	r3, #0
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	f002 0203 	and.w	r2, r2, #3
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	4093      	lsls	r3, r2
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800497a:	4938      	ldr	r1, [pc, #224]	@ (8004a5c <HAL_GPIO_Init+0x35c>)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f47f ae63 	bne.w	8004714 <HAL_GPIO_Init+0x14>
  }
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	3724      	adds	r7, #36	@ 0x24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	58000400 	.word	0x58000400

08004a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	e001      	b.n	8004a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004aac:	e003      	b.n	8004ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	041a      	lsls	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	619a      	str	r2, [r3, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e08b      	b.n	8004bee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f886 	bl	8004bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	@ 0x24
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	e006      	b.n	8004b4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d108      	bne.n	8004b66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	e007      	b.n	8004b76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <HAL_I2C_Init+0x134>)
 8004b82:	430b      	orrs	r3, r1
 8004b84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	02008000 	.word	0x02008000

08004bfc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	817b      	strh	r3, [r7, #10]
 8004c22:	460b      	mov	r3, r1
 8004c24:	813b      	strh	r3, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	f040 80fd 	bne.w	8004e32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_I2C_Mem_Read+0x34>
 8004c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0f1      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_I2C_Mem_Read+0x4e>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0ea      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c66:	f7ff f8a1 	bl	8003dac <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2319      	movs	r3, #25
 8004c72:	2201      	movs	r2, #1
 8004c74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f975 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0d5      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2222      	movs	r2, #34	@ 0x22
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2240      	movs	r2, #64	@ 0x40
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a3a      	ldr	r2, [r7, #32]
 8004ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cb0:	88f8      	ldrh	r0, [r7, #6]
 8004cb2:	893a      	ldrh	r2, [r7, #8]
 8004cb4:	8979      	ldrh	r1, [r7, #10]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f8d9 	bl	8004e78 <I2C_RequestMemoryRead>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0ad      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2bff      	cmp	r3, #255	@ 0xff
 8004ce0:	d90e      	bls.n	8004d00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	22ff      	movs	r2, #255	@ 0xff
 8004ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	8979      	ldrh	r1, [r7, #10]
 8004cf0:	4b52      	ldr	r3, [pc, #328]	@ (8004e3c <HAL_I2C_Mem_Read+0x22c>)
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 faf9 	bl	80052f0 <I2C_TransferConfig>
 8004cfe:	e00f      	b.n	8004d20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	8979      	ldrh	r1, [r7, #10]
 8004d12:	4b4a      	ldr	r3, [pc, #296]	@ (8004e3c <HAL_I2C_Mem_Read+0x22c>)
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fae8 	bl	80052f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	2200      	movs	r2, #0
 8004d28:	2104      	movs	r1, #4
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f91c 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07c      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d034      	beq.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d130      	bne.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	2200      	movs	r2, #0
 8004d86:	2180      	movs	r1, #128	@ 0x80
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f8ed 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e04d      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2bff      	cmp	r3, #255	@ 0xff
 8004da0:	d90e      	bls.n	8004dc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	22ff      	movs	r2, #255	@ 0xff
 8004da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	8979      	ldrh	r1, [r7, #10]
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fa99 	bl	80052f0 <I2C_TransferConfig>
 8004dbe:	e00f      	b.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fa88 	bl	80052f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d19a      	bne.n	8004d20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f95a 	bl	80050a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01a      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2220      	movs	r2, #32
 8004e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_I2C_Mem_Read+0x230>)
 8004e12:	400b      	ands	r3, r1
 8004e14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	80002400 	.word	0x80002400
 8004e40:	fe00e800 	.word	0xfe00e800

08004e44 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e52:	b2db      	uxtb	r3, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	813b      	strh	r3, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	8979      	ldrh	r1, [r7, #10]
 8004e98:	4b20      	ldr	r3, [pc, #128]	@ (8004f1c <I2C_RequestMemoryRead+0xa4>)
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fa26 	bl	80052f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	69b9      	ldr	r1, [r7, #24]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f8b6 	bl	800501a <I2C_WaitOnTXISFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e02c      	b.n	8004f12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d105      	bne.n	8004eca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ebe:	893b      	ldrh	r3, [r7, #8]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ec8:	e015      	b.n	8004ef6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004eca:	893b      	ldrh	r3, [r7, #8]
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	69b9      	ldr	r1, [r7, #24]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f89c 	bl	800501a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e012      	b.n	8004f12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eec:	893b      	ldrh	r3, [r7, #8]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2140      	movs	r1, #64	@ 0x40
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f831 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	80002000 	.word	0x80002000

08004f20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d103      	bne.n	8004f3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d007      	beq.n	8004f5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	619a      	str	r2, [r3, #24]
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f78:	e03b      	b.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f8d6 	bl	8005130 <I2C_IsErrorOccurred>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e041      	b.n	8005012 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d02d      	beq.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fe ff09 	bl	8003dac <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <I2C_WaitOnFlagUntilTimeout+0x44>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d122      	bne.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d113      	bne.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e00f      	b.n	8005012 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	bf0c      	ite	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	2300      	movne	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	429a      	cmp	r2, r3
 800500e:	d0b4      	beq.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005026:	e033      	b.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f87f 	bl	8005130 <I2C_IsErrorOccurred>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e031      	b.n	80050a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d025      	beq.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005044:	f7fe feb2 	bl	8003dac <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d11a      	bne.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d013      	beq.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e007      	b.n	80050a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	d1c4      	bne.n	8005028 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050b4:	e02f      	b.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f838 	bl	8005130 <I2C_IsErrorOccurred>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e02d      	b.n	8005126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fe fe6f 	bl	8003dac <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11a      	bne.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d013      	beq.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e007      	b.n	8005126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d1c8      	bne.n	80050b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	@ 0x28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d068      	beq.n	800522e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2210      	movs	r2, #16
 8005162:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005164:	e049      	b.n	80051fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d045      	beq.n	80051fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fe fe1d 	bl	8003dac <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <I2C_IsErrorOccurred+0x54>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d13a      	bne.n	80051fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800518e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005196:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a6:	d121      	bne.n	80051ec <I2C_IsErrorOccurred+0xbc>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ae:	d01d      	beq.n	80051ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d01a      	beq.n	80051ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051c6:	f7fe fdf1 	bl	8003dac <HAL_GetTick>
 80051ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051cc:	e00e      	b.n	80051ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051ce:	f7fe fded 	bl	8003dac <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b19      	cmp	r3, #25
 80051da:	d907      	bls.n	80051ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	f043 0320 	orr.w	r3, r3, #32
 80051e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80051ea:	e006      	b.n	80051fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d1e9      	bne.n	80051ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b20      	cmp	r3, #32
 8005206:	d003      	beq.n	8005210 <I2C_IsErrorOccurred+0xe0>
 8005208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0aa      	beq.n	8005166 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2220      	movs	r2, #32
 800521e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	f043 0304 	orr.w	r3, r3, #4
 8005226:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f043 0308 	orr.w	r3, r3, #8
 8005268:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	f043 0302 	orr.w	r3, r3, #2
 800528a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800529c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01c      	beq.n	80052de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fe3b 	bl	8004f20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <I2C_IsErrorOccurred+0x1bc>)
 80052b6:	400b      	ands	r3, r1
 80052b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80052de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3728      	adds	r7, #40	@ 0x28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	fe00e800 	.word	0xfe00e800

080052f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	817b      	strh	r3, [r7, #10]
 80052fe:	4613      	mov	r3, r2
 8005300:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005302:	897b      	ldrh	r3, [r7, #10]
 8005304:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005308:	7a7b      	ldrb	r3, [r7, #9]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005310:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	4313      	orrs	r3, r2
 800531a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800531e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	0d5b      	lsrs	r3, r3, #21
 800532a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <I2C_TransferConfig+0x60>)
 8005330:	430b      	orrs	r3, r1
 8005332:	43db      	mvns	r3, r3
 8005334:	ea02 0103 	and.w	r1, r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	03ff63ff 	.word	0x03ff63ff

08005354 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b20      	cmp	r3, #32
 8005368:	d138      	bne.n	80053dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005374:	2302      	movs	r3, #2
 8005376:	e032      	b.n	80053de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	@ 0x24
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6819      	ldr	r1, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e000      	b.n	80053de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d139      	bne.n	8005474 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800540a:	2302      	movs	r3, #2
 800540c:	e033      	b.n	8005476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2224      	movs	r2, #36	@ 0x24
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800543c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e08f      	b.n	80055b4 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f887 	bl	80055bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80054c4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6999      	ldr	r1, [r3, #24]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	041b      	lsls	r3, r3, #16
 80054f0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6999      	ldr	r1, [r3, #24]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	041b      	lsls	r3, r3, #16
 8005506:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a19      	ldr	r1, [r3, #32]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	430a      	orrs	r2, r1
 8005514:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	430a      	orrs	r2, r1
 800552a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	430a      	orrs	r2, r1
 8005540:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005564:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0206 	orr.w	r2, r2, #6
 8005590:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_LTDC_ConfigLayer+0x1a>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e02c      	b.n	8005644 <HAL_LTDC_ConfigLayer+0x74>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2134      	movs	r1, #52	@ 0x34
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800561a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f8a9 	bl	800577c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2201      	movs	r2, #1
 8005630:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bdb0      	pop	{r4, r5, r7, pc}

0800564c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_LTDC_SetAddress+0x1a>
 8005662:	2302      	movs	r3, #2
 8005664:	e024      	b.n	80056b0 <HAL_LTDC_SetAddress+0x64>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2234      	movs	r2, #52	@ 0x34
 800567a:	fb02 f303 	mul.w	r3, r2, r3
 800567e:	3338      	adds	r3, #56	@ 0x38
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6979      	ldr	r1, [r7, #20]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f873 	bl	800577c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2201      	movs	r2, #1
 800569c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_LTDC_Reload+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e01c      	b.n	800570a <HAL_LTDC_Reload+0x52>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0208 	orr.w	r2, r2, #8
 80056ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_LTDC_SetAddress_NoReload>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_LTDC_SetAddress_NoReload+0x1a>
 800572c:	2302      	movs	r3, #2
 800572e:	e020      	b.n	8005772 <HAL_LTDC_SetAddress_NoReload+0x5c>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2234      	movs	r2, #52	@ 0x34
 8005744:	fb02 f303 	mul.w	r3, r2, r3
 8005748:	3338      	adds	r3, #56	@ 0x38
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6979      	ldr	r1, [r7, #20]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f80e 	bl	800577c <LTDC_SetConfig>

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800577c:	b480      	push	{r7}
 800577e:	b089      	sub	sp, #36	@ 0x24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	0c1b      	lsrs	r3, r3, #16
 8005794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005798:	4413      	add	r3, r2
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	01db      	lsls	r3, r3, #7
 80057a8:	4413      	add	r3, r2
 80057aa:	3384      	adds	r3, #132	@ 0x84
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	4611      	mov	r1, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	01d2      	lsls	r2, r2, #7
 80057b8:	440a      	add	r2, r1
 80057ba:	3284      	adds	r2, #132	@ 0x84
 80057bc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80057c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057d2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80057d4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4619      	mov	r1, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	01db      	lsls	r3, r3, #7
 80057e0:	440b      	add	r3, r1
 80057e2:	3384      	adds	r3, #132	@ 0x84
 80057e4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057fa:	4413      	add	r3, r2
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	01db      	lsls	r3, r3, #7
 800580a:	4413      	add	r3, r2
 800580c:	3384      	adds	r3, #132	@ 0x84
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	4611      	mov	r1, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	01d2      	lsls	r2, r2, #7
 800581a:	440a      	add	r2, r1
 800581c:	3284      	adds	r2, #132	@ 0x84
 800581e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005822:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005832:	4413      	add	r3, r2
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	01db      	lsls	r3, r3, #7
 8005840:	440b      	add	r3, r1
 8005842:	3384      	adds	r3, #132	@ 0x84
 8005844:	4619      	mov	r1, r3
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	01db      	lsls	r3, r3, #7
 8005856:	4413      	add	r3, r2
 8005858:	3384      	adds	r3, #132	@ 0x84
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	4611      	mov	r1, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	01d2      	lsls	r2, r2, #7
 8005866:	440a      	add	r2, r1
 8005868:	3284      	adds	r2, #132	@ 0x84
 800586a:	f023 0307 	bic.w	r3, r3, #7
 800586e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	01db      	lsls	r3, r3, #7
 800587a:	4413      	add	r3, r2
 800587c:	3384      	adds	r3, #132	@ 0x84
 800587e:	461a      	mov	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	061b      	lsls	r3, r3, #24
 80058a0:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058a8:	461a      	mov	r2, r3
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4619      	mov	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	01db      	lsls	r3, r3, #7
 80058bc:	440b      	add	r3, r1
 80058be:	3384      	adds	r3, #132	@ 0x84
 80058c0:	4619      	mov	r1, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	01db      	lsls	r3, r3, #7
 80058d2:	4413      	add	r3, r2
 80058d4:	3384      	adds	r3, #132	@ 0x84
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	4611      	mov	r1, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	01d2      	lsls	r2, r2, #7
 80058e2:	440a      	add	r2, r1
 80058e4:	3284      	adds	r2, #132	@ 0x84
 80058e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	01db      	lsls	r3, r3, #7
 80058f6:	4413      	add	r3, r2
 80058f8:	3384      	adds	r3, #132	@ 0x84
 80058fa:	461a      	mov	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	01db      	lsls	r3, r3, #7
 800590c:	4413      	add	r3, r2
 800590e:	3384      	adds	r3, #132	@ 0x84
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	01db      	lsls	r3, r3, #7
 800591c:	440b      	add	r3, r1
 800591e:	3384      	adds	r3, #132	@ 0x84
 8005920:	4619      	mov	r1, r3
 8005922:	4b4f      	ldr	r3, [pc, #316]	@ (8005a60 <LTDC_SetConfig+0x2e4>)
 8005924:	4013      	ands	r3, r2
 8005926:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	68f9      	ldr	r1, [r7, #12]
 8005932:	6809      	ldr	r1, [r1, #0]
 8005934:	4608      	mov	r0, r1
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	01c9      	lsls	r1, r1, #7
 800593a:	4401      	add	r1, r0
 800593c:	3184      	adds	r1, #132	@ 0x84
 800593e:	4313      	orrs	r3, r2
 8005940:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	01db      	lsls	r3, r3, #7
 800594c:	4413      	add	r3, r2
 800594e:	3384      	adds	r3, #132	@ 0x84
 8005950:	461a      	mov	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8005960:	2304      	movs	r3, #4
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e01b      	b.n	800599e <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d102      	bne.n	8005974 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800596e:	2303      	movs	r3, #3
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	e014      	b.n	800599e <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b04      	cmp	r3, #4
 800597a:	d00b      	beq.n	8005994 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005980:	2b02      	cmp	r3, #2
 8005982:	d007      	beq.n	8005994 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005988:	2b03      	cmp	r3, #3
 800598a:	d003      	beq.n	8005994 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005990:	2b07      	cmp	r3, #7
 8005992:	d102      	bne.n	800599a <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8005994:	2302      	movs	r3, #2
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	e001      	b.n	800599e <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800599a:	2301      	movs	r3, #1
 800599c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	01db      	lsls	r3, r3, #7
 80059a8:	4413      	add	r3, r2
 80059aa:	3384      	adds	r3, #132	@ 0x84
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	4611      	mov	r1, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	01d2      	lsls	r2, r2, #7
 80059b8:	440a      	add	r2, r1
 80059ba:	3284      	adds	r2, #132	@ 0x84
 80059bc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80059c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	fb02 f303 	mul.w	r3, r2, r3
 80059cc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6859      	ldr	r1, [r3, #4]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1acb      	subs	r3, r1, r3
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	fb01 f303 	mul.w	r3, r1, r3
 80059de:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	6809      	ldr	r1, [r1, #0]
 80059e4:	4608      	mov	r0, r1
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	01c9      	lsls	r1, r1, #7
 80059ea:	4401      	add	r1, r0
 80059ec:	3184      	adds	r1, #132	@ 0x84
 80059ee:	4313      	orrs	r3, r2
 80059f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	01db      	lsls	r3, r3, #7
 80059fc:	4413      	add	r3, r2
 80059fe:	3384      	adds	r3, #132	@ 0x84
 8005a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4619      	mov	r1, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	01db      	lsls	r3, r3, #7
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3384      	adds	r3, #132	@ 0x84
 8005a10:	4619      	mov	r1, r3
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <LTDC_SetConfig+0x2e8>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	01db      	lsls	r3, r3, #7
 8005a22:	4413      	add	r3, r2
 8005a24:	3384      	adds	r3, #132	@ 0x84
 8005a26:	461a      	mov	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	01db      	lsls	r3, r3, #7
 8005a38:	4413      	add	r3, r2
 8005a3a:	3384      	adds	r3, #132	@ 0x84
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	4611      	mov	r1, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	01d2      	lsls	r2, r2, #7
 8005a48:	440a      	add	r2, r1
 8005a4a:	3284      	adds	r2, #132	@ 0x84
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	6013      	str	r3, [r2, #0]
}
 8005a52:	bf00      	nop
 8005a54:	3724      	adds	r7, #36	@ 0x24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	fffff8f8 	.word	0xfffff8f8
 8005a64:	fffff800 	.word	0xfffff800

08005a68 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a70:	f7fe f99c 	bl	8003dac <HAL_GetTick>
 8005a74:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e03b      	b.n	8005af8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005aa0:	e00f      	b.n	8005ac2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005aa2:	f7fe f983 	bl	8003dac <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	d908      	bls.n	8005ac2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2240      	movs	r2, #64	@ 0x40
 8005ab4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e01a      	b.n	8005af8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e8      	bne.n	8005aa2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f86d 	bl	8005bb0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e048      	b.n	8005ba4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	221f      	movs	r2, #31
 8005b78:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68d9      	ldr	r1, [r3, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695a      	ldr	r2, [r3, #20]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005bd6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8005be2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8005bee:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8005bf8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005c04:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005c06:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c10:	d107      	bne.n	8005c22 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8005c20:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2200      	movs	r2, #0
 8005c28:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da11      	bge.n	8005c56 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005c40:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c46:	425b      	negs	r3, r3
 8005c48:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	b292      	uxth	r2, r2
 8005c52:	621a      	str	r2, [r3, #32]
 8005c54:	e006      	b.n	8005c64 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	b292      	uxth	r2, r2
 8005c62:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da15      	bge.n	8005c98 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8005c7a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c80:	425b      	negs	r3, r3
 8005c82:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6a19      	ldr	r1, [r3, #32]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	041a      	lsls	r2, r3, #16
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	621a      	str	r2, [r3, #32]
 8005c96:	e009      	b.n	8005cac <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6a19      	ldr	r1, [r3, #32]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	041a      	lsls	r2, r3, #16
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb4:	d006      	beq.n	8005cc4 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cc2:	e003      	b.n	8005ccc <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08c      	sub	sp, #48	@ 0x30
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f000 bc48 	b.w	8006584 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8088 	beq.w	8005e12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d02:	4b99      	ldr	r3, [pc, #612]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d0c:	4b96      	ldr	r3, [pc, #600]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d007      	beq.n	8005d28 <HAL_RCC_OscConfig+0x48>
 8005d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1a:	2b18      	cmp	r3, #24
 8005d1c:	d111      	bne.n	8005d42 <HAL_RCC_OscConfig+0x62>
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d10c      	bne.n	8005d42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d28:	4b8f      	ldr	r3, [pc, #572]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d06d      	beq.n	8005e10 <HAL_RCC_OscConfig+0x130>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d169      	bne.n	8005e10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f000 bc21 	b.w	8006584 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4a:	d106      	bne.n	8005d5a <HAL_RCC_OscConfig+0x7a>
 8005d4c:	4b86      	ldr	r3, [pc, #536]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a85      	ldr	r2, [pc, #532]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	e02e      	b.n	8005db8 <HAL_RCC_OscConfig+0xd8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10c      	bne.n	8005d7c <HAL_RCC_OscConfig+0x9c>
 8005d62:	4b81      	ldr	r3, [pc, #516]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a80      	ldr	r2, [pc, #512]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	4b7e      	ldr	r3, [pc, #504]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a7d      	ldr	r2, [pc, #500]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xd8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0xc0>
 8005d86:	4b78      	ldr	r3, [pc, #480]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a77      	ldr	r2, [pc, #476]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b75      	ldr	r3, [pc, #468]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a74      	ldr	r2, [pc, #464]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xd8>
 8005da0:	4b71      	ldr	r3, [pc, #452]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a70      	ldr	r2, [pc, #448]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b6e      	ldr	r3, [pc, #440]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6d      	ldr	r2, [pc, #436]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fd fff4 	bl	8003dac <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fd fff0 	bl	8003dac <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	@ 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e3d4      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dda:	4b63      	ldr	r3, [pc, #396]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xe8>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fd ffe0 	bl	8003dac <HAL_GetTick>
 8005dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fd ffdc 	bl	8003dac <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	@ 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e3c0      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e02:	4b59      	ldr	r3, [pc, #356]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x110>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80ca 	beq.w	8005fb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e20:	4b51      	ldr	r3, [pc, #324]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_RCC_OscConfig+0x166>
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	2b18      	cmp	r3, #24
 8005e3a:	d156      	bne.n	8005eea <HAL_RCC_OscConfig+0x20a>
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d151      	bne.n	8005eea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e46:	4b48      	ldr	r3, [pc, #288]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_RCC_OscConfig+0x17e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e392      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e5e:	4b42      	ldr	r3, [pc, #264]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 0219 	bic.w	r2, r3, #25
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	493f      	ldr	r1, [pc, #252]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fd ff9c 	bl	8003dac <HAL_GetTick>
 8005e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e78:	f7fd ff98 	bl	8003dac <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e37c      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e8a:	4b37      	ldr	r3, [pc, #220]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e96:	f7fd ffb9 	bl	8003e0c <HAL_GetREVID>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d817      	bhi.n	8005ed4 <HAL_RCC_OscConfig+0x1f4>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b40      	cmp	r3, #64	@ 0x40
 8005eaa:	d108      	bne.n	8005ebe <HAL_RCC_OscConfig+0x1de>
 8005eac:	4b2e      	ldr	r3, [pc, #184]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ebc:	e07a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	031b      	lsls	r3, r3, #12
 8005ecc:	4926      	ldr	r1, [pc, #152]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed2:	e06f      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed4:	4b24      	ldr	r3, [pc, #144]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	061b      	lsls	r3, r3, #24
 8005ee2:	4921      	ldr	r1, [pc, #132]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ee8:	e064      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d047      	beq.n	8005f82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f023 0219 	bic.w	r2, r3, #25
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	491a      	ldr	r1, [pc, #104]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fd ff52 	bl	8003dac <HAL_GetTick>
 8005f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f0c:	f7fd ff4e 	bl	8003dac <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e332      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f1e:	4b12      	ldr	r3, [pc, #72]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2a:	f7fd ff6f 	bl	8003e0c <HAL_GetREVID>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d819      	bhi.n	8005f6c <HAL_RCC_OscConfig+0x28c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b40      	cmp	r3, #64	@ 0x40
 8005f3e:	d108      	bne.n	8005f52 <HAL_RCC_OscConfig+0x272>
 8005f40:	4b09      	ldr	r3, [pc, #36]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f48:	4a07      	ldr	r2, [pc, #28]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f4e:	6053      	str	r3, [r2, #4]
 8005f50:	e030      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2d4>
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	031b      	lsls	r3, r3, #12
 8005f60:	4901      	ldr	r1, [pc, #4]	@ (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	604b      	str	r3, [r1, #4]
 8005f66:	e025      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2d4>
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	4b9a      	ldr	r3, [pc, #616]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	4997      	ldr	r1, [pc, #604]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	e018      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f82:	4b95      	ldr	r3, [pc, #596]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a94      	ldr	r2, [pc, #592]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8e:	f7fd ff0d 	bl	8003dac <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f96:	f7fd ff09 	bl	8003dac <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e2ed      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fa8:	4b8b      	ldr	r3, [pc, #556]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f0      	bne.n	8005f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80a9 	beq.w	8006114 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc2:	4b85      	ldr	r3, [pc, #532]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fcc:	4b82      	ldr	r3, [pc, #520]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d007      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x308>
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b18      	cmp	r3, #24
 8005fdc:	d13a      	bne.n	8006054 <HAL_RCC_OscConfig+0x374>
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d135      	bne.n	8006054 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fe8:	4b7b      	ldr	r3, [pc, #492]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_RCC_OscConfig+0x320>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2b80      	cmp	r3, #128	@ 0x80
 8005ffa:	d001      	beq.n	8006000 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e2c1      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006000:	f7fd ff04 	bl	8003e0c <HAL_GetREVID>
 8006004:	4603      	mov	r3, r0
 8006006:	f241 0203 	movw	r2, #4099	@ 0x1003
 800600a:	4293      	cmp	r3, r2
 800600c:	d817      	bhi.n	800603e <HAL_RCC_OscConfig+0x35e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	2b20      	cmp	r3, #32
 8006014:	d108      	bne.n	8006028 <HAL_RCC_OscConfig+0x348>
 8006016:	4b70      	ldr	r3, [pc, #448]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800601e:	4a6e      	ldr	r2, [pc, #440]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006024:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006026:	e075      	b.n	8006114 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006028:	4b6b      	ldr	r3, [pc, #428]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	069b      	lsls	r3, r3, #26
 8006036:	4968      	ldr	r1, [pc, #416]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006038:	4313      	orrs	r3, r2
 800603a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800603c:	e06a      	b.n	8006114 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800603e:	4b66      	ldr	r3, [pc, #408]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	061b      	lsls	r3, r3, #24
 800604c:	4962      	ldr	r1, [pc, #392]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 800604e:	4313      	orrs	r3, r2
 8006050:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006052:	e05f      	b.n	8006114 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d042      	beq.n	80060e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800605c:	4b5e      	ldr	r3, [pc, #376]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a5d      	ldr	r2, [pc, #372]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7fd fea0 	bl	8003dac <HAL_GetTick>
 800606c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006070:	f7fd fe9c 	bl	8003dac <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e280      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006082:	4b55      	ldr	r3, [pc, #340]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0f0      	beq.n	8006070 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800608e:	f7fd febd 	bl	8003e0c <HAL_GetREVID>
 8006092:	4603      	mov	r3, r0
 8006094:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006098:	4293      	cmp	r3, r2
 800609a:	d817      	bhi.n	80060cc <HAL_RCC_OscConfig+0x3ec>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d108      	bne.n	80060b6 <HAL_RCC_OscConfig+0x3d6>
 80060a4:	4b4c      	ldr	r3, [pc, #304]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80060ac:	4a4a      	ldr	r2, [pc, #296]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80060ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060b2:	6053      	str	r3, [r2, #4]
 80060b4:	e02e      	b.n	8006114 <HAL_RCC_OscConfig+0x434>
 80060b6:	4b48      	ldr	r3, [pc, #288]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	069b      	lsls	r3, r3, #26
 80060c4:	4944      	ldr	r1, [pc, #272]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	604b      	str	r3, [r1, #4]
 80060ca:	e023      	b.n	8006114 <HAL_RCC_OscConfig+0x434>
 80060cc:	4b42      	ldr	r3, [pc, #264]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	061b      	lsls	r3, r3, #24
 80060da:	493f      	ldr	r1, [pc, #252]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	60cb      	str	r3, [r1, #12]
 80060e0:	e018      	b.n	8006114 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060e2:	4b3d      	ldr	r3, [pc, #244]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a3c      	ldr	r2, [pc, #240]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80060e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ee:	f7fd fe5d 	bl	8003dac <HAL_GetTick>
 80060f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060f6:	f7fd fe59 	bl	8003dac <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e23d      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006108:	4b33      	ldr	r3, [pc, #204]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f0      	bne.n	80060f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d036      	beq.n	800618e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d019      	beq.n	800615c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006128:	4b2b      	ldr	r3, [pc, #172]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 800612a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800612c:	4a2a      	ldr	r2, [pc, #168]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006134:	f7fd fe3a 	bl	8003dac <HAL_GetTick>
 8006138:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800613c:	f7fd fe36 	bl	8003dac <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e21a      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800614e:	4b22      	ldr	r3, [pc, #136]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f0      	beq.n	800613c <HAL_RCC_OscConfig+0x45c>
 800615a:	e018      	b.n	800618e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800615c:	4b1e      	ldr	r3, [pc, #120]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 800615e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006160:	4a1d      	ldr	r2, [pc, #116]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fd fe20 	bl	8003dac <HAL_GetTick>
 800616c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006170:	f7fd fe1c 	bl	8003dac <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e200      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006182:	4b15      	ldr	r3, [pc, #84]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 8006184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d039      	beq.n	800620e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01c      	beq.n	80061dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a0c      	ldr	r2, [pc, #48]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80061a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061ae:	f7fd fdfd 	bl	8003dac <HAL_GetTick>
 80061b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061b6:	f7fd fdf9 	bl	8003dac <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e1dd      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061c8:	4b03      	ldr	r3, [pc, #12]	@ (80061d8 <HAL_RCC_OscConfig+0x4f8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <HAL_RCC_OscConfig+0x4d6>
 80061d4:	e01b      	b.n	800620e <HAL_RCC_OscConfig+0x52e>
 80061d6:	bf00      	nop
 80061d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061dc:	4b9b      	ldr	r3, [pc, #620]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a9a      	ldr	r2, [pc, #616]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80061e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061e8:	f7fd fde0 	bl	8003dac <HAL_GetTick>
 80061ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f0:	f7fd fddc 	bl	8003dac <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e1c0      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006202:	4b92      	ldr	r3, [pc, #584]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f0      	bne.n	80061f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 8081 	beq.w	800631e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800621c:	4b8c      	ldr	r3, [pc, #560]	@ (8006450 <HAL_RCC_OscConfig+0x770>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a8b      	ldr	r2, [pc, #556]	@ (8006450 <HAL_RCC_OscConfig+0x770>)
 8006222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006228:	f7fd fdc0 	bl	8003dac <HAL_GetTick>
 800622c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006230:	f7fd fdbc 	bl	8003dac <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b64      	cmp	r3, #100	@ 0x64
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e1a0      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006242:	4b83      	ldr	r3, [pc, #524]	@ (8006450 <HAL_RCC_OscConfig+0x770>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d106      	bne.n	8006264 <HAL_RCC_OscConfig+0x584>
 8006256:	4b7d      	ldr	r3, [pc, #500]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625a:	4a7c      	ldr	r2, [pc, #496]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	6713      	str	r3, [r2, #112]	@ 0x70
 8006262:	e02d      	b.n	80062c0 <HAL_RCC_OscConfig+0x5e0>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10c      	bne.n	8006286 <HAL_RCC_OscConfig+0x5a6>
 800626c:	4b77      	ldr	r3, [pc, #476]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006270:	4a76      	ldr	r2, [pc, #472]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	6713      	str	r3, [r2, #112]	@ 0x70
 8006278:	4b74      	ldr	r3, [pc, #464]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627c:	4a73      	ldr	r2, [pc, #460]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800627e:	f023 0304 	bic.w	r3, r3, #4
 8006282:	6713      	str	r3, [r2, #112]	@ 0x70
 8006284:	e01c      	b.n	80062c0 <HAL_RCC_OscConfig+0x5e0>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b05      	cmp	r3, #5
 800628c:	d10c      	bne.n	80062a8 <HAL_RCC_OscConfig+0x5c8>
 800628e:	4b6f      	ldr	r3, [pc, #444]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	4a6e      	ldr	r2, [pc, #440]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006294:	f043 0304 	orr.w	r3, r3, #4
 8006298:	6713      	str	r3, [r2, #112]	@ 0x70
 800629a:	4b6c      	ldr	r3, [pc, #432]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629e:	4a6b      	ldr	r2, [pc, #428]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80062a6:	e00b      	b.n	80062c0 <HAL_RCC_OscConfig+0x5e0>
 80062a8:	4b68      	ldr	r3, [pc, #416]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ac:	4a67      	ldr	r2, [pc, #412]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b4:	4b65      	ldr	r3, [pc, #404]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b8:	4a64      	ldr	r2, [pc, #400]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80062ba:	f023 0304 	bic.w	r3, r3, #4
 80062be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d015      	beq.n	80062f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c8:	f7fd fd70 	bl	8003dac <HAL_GetTick>
 80062cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fd fd6c 	bl	8003dac <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e14e      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062e6:	4b59      	ldr	r3, [pc, #356]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0ee      	beq.n	80062d0 <HAL_RCC_OscConfig+0x5f0>
 80062f2:	e014      	b.n	800631e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f4:	f7fd fd5a 	bl	8003dac <HAL_GetTick>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062fa:	e00a      	b.n	8006312 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fc:	f7fd fd56 	bl	8003dac <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800630a:	4293      	cmp	r3, r2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e138      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006312:	4b4e      	ldr	r3, [pc, #312]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1ee      	bne.n	80062fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 812d 	beq.w	8006582 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006328:	4b48      	ldr	r3, [pc, #288]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006330:	2b18      	cmp	r3, #24
 8006332:	f000 80bd 	beq.w	80064b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	2b02      	cmp	r3, #2
 800633c:	f040 809e 	bne.w	800647c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006340:	4b42      	ldr	r3, [pc, #264]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a41      	ldr	r2, [pc, #260]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800634a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fd fd2e 	bl	8003dac <HAL_GetTick>
 8006350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006354:	f7fd fd2a 	bl	8003dac <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e10e      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006366:	4b39      	ldr	r3, [pc, #228]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006372:	4b36      	ldr	r3, [pc, #216]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006376:	4b37      	ldr	r3, [pc, #220]	@ (8006454 <HAL_RCC_OscConfig+0x774>)
 8006378:	4013      	ands	r3, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006382:	0112      	lsls	r2, r2, #4
 8006384:	430a      	orrs	r2, r1
 8006386:	4931      	ldr	r1, [pc, #196]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006388:	4313      	orrs	r3, r2
 800638a:	628b      	str	r3, [r1, #40]	@ 0x28
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	3b01      	subs	r3, #1
 8006392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800639a:	3b01      	subs	r3, #1
 800639c:	025b      	lsls	r3, r3, #9
 800639e:	b29b      	uxth	r3, r3
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a6:	3b01      	subs	r3, #1
 80063a8:	041b      	lsls	r3, r3, #16
 80063aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b4:	3b01      	subs	r3, #1
 80063b6:	061b      	lsls	r3, r3, #24
 80063b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063bc:	4923      	ldr	r1, [pc, #140]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80063c2:	4b22      	ldr	r3, [pc, #136]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80063c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c6:	4a21      	ldr	r2, [pc, #132]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063ce:	4b1f      	ldr	r3, [pc, #124]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80063d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063d2:	4b21      	ldr	r3, [pc, #132]	@ (8006458 <HAL_RCC_OscConfig+0x778>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063da:	00d2      	lsls	r2, r2, #3
 80063dc:	491b      	ldr	r1, [pc, #108]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063e2:	4b1a      	ldr	r3, [pc, #104]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	f023 020c 	bic.w	r2, r3, #12
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	4917      	ldr	r1, [pc, #92]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063f4:	4b15      	ldr	r3, [pc, #84]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	f023 0202 	bic.w	r2, r3, #2
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006400:	4912      	ldr	r1, [pc, #72]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006406:	4b11      	ldr	r3, [pc, #68]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640a:	4a10      	ldr	r2, [pc, #64]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800640c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006412:	4b0e      	ldr	r3, [pc, #56]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	4a0d      	ldr	r2, [pc, #52]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800641e:	4b0b      	ldr	r3, [pc, #44]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	4a0a      	ldr	r2, [pc, #40]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800642a:	4b08      	ldr	r3, [pc, #32]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	4a07      	ldr	r2, [pc, #28]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006436:	4b05      	ldr	r3, [pc, #20]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a04      	ldr	r2, [pc, #16]	@ (800644c <HAL_RCC_OscConfig+0x76c>)
 800643c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fd fcb3 	bl	8003dac <HAL_GetTick>
 8006446:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006448:	e011      	b.n	800646e <HAL_RCC_OscConfig+0x78e>
 800644a:	bf00      	nop
 800644c:	58024400 	.word	0x58024400
 8006450:	58024800 	.word	0x58024800
 8006454:	fffffc0c 	.word	0xfffffc0c
 8006458:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800645c:	f7fd fca6 	bl	8003dac <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e08a      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800646e:	4b47      	ldr	r3, [pc, #284]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0x77c>
 800647a:	e082      	b.n	8006582 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800647c:	4b43      	ldr	r3, [pc, #268]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a42      	ldr	r2, [pc, #264]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 8006482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006488:	f7fd fc90 	bl	8003dac <HAL_GetTick>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006490:	f7fd fc8c 	bl	8003dac <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e070      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a2:	4b3a      	ldr	r3, [pc, #232]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f0      	bne.n	8006490 <HAL_RCC_OscConfig+0x7b0>
 80064ae:	e068      	b.n	8006582 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064b0:	4b36      	ldr	r3, [pc, #216]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064b6:	4b35      	ldr	r3, [pc, #212]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d031      	beq.n	8006528 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f003 0203 	and.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d12a      	bne.n	8006528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064de:	429a      	cmp	r2, r3
 80064e0:	d122      	bne.n	8006528 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d11a      	bne.n	8006528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	0a5b      	lsrs	r3, r3, #9
 80064f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d111      	bne.n	8006528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006510:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d108      	bne.n	8006528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	0e1b      	lsrs	r3, r3, #24
 800651a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006522:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e02b      	b.n	8006584 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800652c:	4b17      	ldr	r3, [pc, #92]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 800652e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006530:	08db      	lsrs	r3, r3, #3
 8006532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006536:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d01f      	beq.n	8006582 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006542:	4b12      	ldr	r3, [pc, #72]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 8006544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006546:	4a11      	ldr	r2, [pc, #68]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800654e:	f7fd fc2d 	bl	8003dac <HAL_GetTick>
 8006552:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006554:	bf00      	nop
 8006556:	f7fd fc29 	bl	8003dac <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	4293      	cmp	r3, r2
 8006560:	d0f9      	beq.n	8006556 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006562:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 8006564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006566:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <HAL_RCC_OscConfig+0x8b0>)
 8006568:	4013      	ands	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800656e:	00d2      	lsls	r2, r2, #3
 8006570:	4906      	ldr	r1, [pc, #24]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 8006572:	4313      	orrs	r3, r2
 8006574:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006576:	4b05      	ldr	r3, [pc, #20]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	4a04      	ldr	r2, [pc, #16]	@ (800658c <HAL_RCC_OscConfig+0x8ac>)
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3730      	adds	r7, #48	@ 0x30
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	58024400 	.word	0x58024400
 8006590:	ffff0007 	.word	0xffff0007

08006594 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e19c      	b.n	80068e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065a8:	4b8a      	ldr	r3, [pc, #552]	@ (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d910      	bls.n	80065d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b6:	4b87      	ldr	r3, [pc, #540]	@ (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f023 020f 	bic.w	r2, r3, #15
 80065be:	4985      	ldr	r1, [pc, #532]	@ (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c6:	4b83      	ldr	r3, [pc, #524]	@ (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d001      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e184      	b.n	80068e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d010      	beq.n	8006606 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	4b7b      	ldr	r3, [pc, #492]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d908      	bls.n	8006606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065f4:	4b78      	ldr	r3, [pc, #480]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	4975      	ldr	r1, [pc, #468]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006602:	4313      	orrs	r3, r2
 8006604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d010      	beq.n	8006634 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695a      	ldr	r2, [r3, #20]
 8006616:	4b70      	ldr	r3, [pc, #448]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800661e:	429a      	cmp	r2, r3
 8006620:	d908      	bls.n	8006634 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006622:	4b6d      	ldr	r3, [pc, #436]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	496a      	ldr	r1, [pc, #424]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006630:	4313      	orrs	r3, r2
 8006632:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d010      	beq.n	8006662 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	4b64      	ldr	r3, [pc, #400]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800664c:	429a      	cmp	r2, r3
 800664e:	d908      	bls.n	8006662 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006650:	4b61      	ldr	r3, [pc, #388]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	495e      	ldr	r1, [pc, #376]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800665e:	4313      	orrs	r3, r2
 8006660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d010      	beq.n	8006690 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69da      	ldr	r2, [r3, #28]
 8006672:	4b59      	ldr	r3, [pc, #356]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800667a:	429a      	cmp	r2, r3
 800667c:	d908      	bls.n	8006690 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800667e:	4b56      	ldr	r3, [pc, #344]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	4953      	ldr	r1, [pc, #332]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800668c:	4313      	orrs	r3, r2
 800668e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	4b4d      	ldr	r3, [pc, #308]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d908      	bls.n	80066be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066ac:	4b4a      	ldr	r3, [pc, #296]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f023 020f 	bic.w	r2, r3, #15
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4947      	ldr	r1, [pc, #284]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d055      	beq.n	8006776 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066ca:	4b43      	ldr	r3, [pc, #268]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	4940      	ldr	r1, [pc, #256]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d107      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066e4:	4b3c      	ldr	r3, [pc, #240]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d121      	bne.n	8006734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0f6      	b.n	80068e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d107      	bne.n	800670c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066fc:	4b36      	ldr	r3, [pc, #216]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d115      	bne.n	8006734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0ea      	b.n	80068e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d107      	bne.n	8006724 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006714:	4b30      	ldr	r3, [pc, #192]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0de      	b.n	80068e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006724:	4b2c      	ldr	r3, [pc, #176]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0d6      	b.n	80068e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006734:	4b28      	ldr	r3, [pc, #160]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f023 0207 	bic.w	r2, r3, #7
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	4925      	ldr	r1, [pc, #148]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006746:	f7fd fb31 	bl	8003dac <HAL_GetTick>
 800674a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674c:	e00a      	b.n	8006764 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674e:	f7fd fb2d 	bl	8003dac <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675c:	4293      	cmp	r3, r2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e0be      	b.n	80068e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006764:	4b1c      	ldr	r3, [pc, #112]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	429a      	cmp	r2, r3
 8006774:	d1eb      	bne.n	800674e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d010      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	4b14      	ldr	r3, [pc, #80]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	429a      	cmp	r2, r3
 8006790:	d208      	bcs.n	80067a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006792:	4b11      	ldr	r3, [pc, #68]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f023 020f 	bic.w	r2, r3, #15
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	490e      	ldr	r1, [pc, #56]	@ (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067a4:	4b0b      	ldr	r3, [pc, #44]	@ (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d214      	bcs.n	80067dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067b2:	4b08      	ldr	r3, [pc, #32]	@ (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f023 020f 	bic.w	r2, r3, #15
 80067ba:	4906      	ldr	r1, [pc, #24]	@ (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	4313      	orrs	r3, r2
 80067c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b04      	ldr	r3, [pc, #16]	@ (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d005      	beq.n	80067dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e086      	b.n	80068e2 <HAL_RCC_ClockConfig+0x34e>
 80067d4:	52002000 	.word	0x52002000
 80067d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d010      	beq.n	800680a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	4b3f      	ldr	r3, [pc, #252]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d208      	bcs.n	800680a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067f8:	4b3c      	ldr	r3, [pc, #240]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	4939      	ldr	r1, [pc, #228]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 8006806:	4313      	orrs	r3, r2
 8006808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d010      	beq.n	8006838 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	4b34      	ldr	r3, [pc, #208]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006822:	429a      	cmp	r2, r3
 8006824:	d208      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006826:	4b31      	ldr	r3, [pc, #196]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	492e      	ldr	r1, [pc, #184]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 8006834:	4313      	orrs	r3, r2
 8006836:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	d010      	beq.n	8006866 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699a      	ldr	r2, [r3, #24]
 8006848:	4b28      	ldr	r3, [pc, #160]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006850:	429a      	cmp	r2, r3
 8006852:	d208      	bcs.n	8006866 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006854:	4b25      	ldr	r3, [pc, #148]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	4922      	ldr	r1, [pc, #136]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 8006862:	4313      	orrs	r3, r2
 8006864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d010      	beq.n	8006894 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69da      	ldr	r2, [r3, #28]
 8006876:	4b1d      	ldr	r3, [pc, #116]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800687e:	429a      	cmp	r2, r3
 8006880:	d208      	bcs.n	8006894 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006882:	4b1a      	ldr	r3, [pc, #104]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	4917      	ldr	r1, [pc, #92]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 8006890:	4313      	orrs	r3, r2
 8006892:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006894:	f000 f834 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 8006898:	4602      	mov	r2, r0
 800689a:	4b14      	ldr	r3, [pc, #80]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	4912      	ldr	r1, [pc, #72]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80068a6:	5ccb      	ldrb	r3, [r1, r3]
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068b2:	4b0e      	ldr	r3, [pc, #56]	@ (80068ec <HAL_RCC_ClockConfig+0x358>)
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	4a0d      	ldr	r2, [pc, #52]	@ (80068f0 <HAL_RCC_ClockConfig+0x35c>)
 80068bc:	5cd3      	ldrb	r3, [r2, r3]
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
 80068c8:	4a0a      	ldr	r2, [pc, #40]	@ (80068f4 <HAL_RCC_ClockConfig+0x360>)
 80068ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068cc:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <HAL_RCC_ClockConfig+0x364>)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80068d2:	4b0a      	ldr	r3, [pc, #40]	@ (80068fc <HAL_RCC_ClockConfig+0x368>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd fa1e 	bl	8003d18 <HAL_InitTick>
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	58024400 	.word	0x58024400
 80068f0:	0800c818 	.word	0x0800c818
 80068f4:	24000018 	.word	0x24000018
 80068f8:	24000014 	.word	0x24000014
 80068fc:	2400001c 	.word	0x2400001c

08006900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006900:	b480      	push	{r7}
 8006902:	b089      	sub	sp, #36	@ 0x24
 8006904:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006906:	4bb3      	ldr	r3, [pc, #716]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800690e:	2b18      	cmp	r3, #24
 8006910:	f200 8155 	bhi.w	8006bbe <HAL_RCC_GetSysClockFreq+0x2be>
 8006914:	a201      	add	r2, pc, #4	@ (adr r2, 800691c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	08006981 	.word	0x08006981
 8006920:	08006bbf 	.word	0x08006bbf
 8006924:	08006bbf 	.word	0x08006bbf
 8006928:	08006bbf 	.word	0x08006bbf
 800692c:	08006bbf 	.word	0x08006bbf
 8006930:	08006bbf 	.word	0x08006bbf
 8006934:	08006bbf 	.word	0x08006bbf
 8006938:	08006bbf 	.word	0x08006bbf
 800693c:	080069a7 	.word	0x080069a7
 8006940:	08006bbf 	.word	0x08006bbf
 8006944:	08006bbf 	.word	0x08006bbf
 8006948:	08006bbf 	.word	0x08006bbf
 800694c:	08006bbf 	.word	0x08006bbf
 8006950:	08006bbf 	.word	0x08006bbf
 8006954:	08006bbf 	.word	0x08006bbf
 8006958:	08006bbf 	.word	0x08006bbf
 800695c:	080069ad 	.word	0x080069ad
 8006960:	08006bbf 	.word	0x08006bbf
 8006964:	08006bbf 	.word	0x08006bbf
 8006968:	08006bbf 	.word	0x08006bbf
 800696c:	08006bbf 	.word	0x08006bbf
 8006970:	08006bbf 	.word	0x08006bbf
 8006974:	08006bbf 	.word	0x08006bbf
 8006978:	08006bbf 	.word	0x08006bbf
 800697c:	080069b3 	.word	0x080069b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006980:	4b94      	ldr	r3, [pc, #592]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d009      	beq.n	80069a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800698c:	4b91      	ldr	r3, [pc, #580]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	08db      	lsrs	r3, r3, #3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	4a90      	ldr	r2, [pc, #576]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800699e:	e111      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069a0:	4b8d      	ldr	r3, [pc, #564]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069a2:	61bb      	str	r3, [r7, #24]
      break;
 80069a4:	e10e      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069a6:	4b8d      	ldr	r3, [pc, #564]	@ (8006bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069a8:	61bb      	str	r3, [r7, #24]
      break;
 80069aa:	e10b      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069ac:	4b8c      	ldr	r3, [pc, #560]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069ae:	61bb      	str	r3, [r7, #24]
      break;
 80069b0:	e108      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069b2:	4b88      	ldr	r3, [pc, #544]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069bc:	4b85      	ldr	r3, [pc, #532]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069c8:	4b82      	ldr	r3, [pc, #520]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069d2:	4b80      	ldr	r3, [pc, #512]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d6:	08db      	lsrs	r3, r3, #3
 80069d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80e1 	beq.w	8006bb8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	f000 8083 	beq.w	8006b04 <HAL_RCC_GetSysClockFreq+0x204>
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	f200 80a1 	bhi.w	8006b48 <HAL_RCC_GetSysClockFreq+0x248>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_RCC_GetSysClockFreq+0x114>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d056      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a12:	e099      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a14:	4b6f      	ldr	r3, [pc, #444]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02d      	beq.n	8006a7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a20:	4b6c      	ldr	r3, [pc, #432]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	08db      	lsrs	r3, r3, #3
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	4b62      	ldr	r3, [pc, #392]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006a7a:	e087      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006be8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8e:	4b51      	ldr	r3, [pc, #324]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aa2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006abe:	e065      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad2:	4b40      	ldr	r3, [pc, #256]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ae6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b02:	e043      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006bf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b16:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b46:	e021      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b8c:	4b11      	ldr	r3, [pc, #68]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b90:	0a5b      	lsrs	r3, r3, #9
 8006b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b96:	3301      	adds	r3, #1
 8006b98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb0:	ee17 3a90 	vmov	r3, s15
 8006bb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bb6:	e005      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61bb      	str	r3, [r7, #24]
      break;
 8006bbc:	e002      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006bbe:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bc0:	61bb      	str	r3, [r7, #24]
      break;
 8006bc2:	bf00      	nop
  }

  return sysclockfreq;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3724      	adds	r7, #36	@ 0x24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	58024400 	.word	0x58024400
 8006bd8:	03d09000 	.word	0x03d09000
 8006bdc:	003d0900 	.word	0x003d0900
 8006be0:	017d7840 	.word	0x017d7840
 8006be4:	46000000 	.word	0x46000000
 8006be8:	4c742400 	.word	0x4c742400
 8006bec:	4a742400 	.word	0x4a742400
 8006bf0:	4bbebc20 	.word	0x4bbebc20

08006bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006bfa:	f7ff fe81 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	0a1b      	lsrs	r3, r3, #8
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	490f      	ldr	r1, [pc, #60]	@ (8006c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c0c:	5ccb      	ldrb	r3, [r1, r3]
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	fa22 f303 	lsr.w	r3, r2, r3
 8006c16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c18:	4b0a      	ldr	r3, [pc, #40]	@ (8006c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	4a09      	ldr	r2, [pc, #36]	@ (8006c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c22:	5cd3      	ldrb	r3, [r2, r3]
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2e:	4a07      	ldr	r2, [pc, #28]	@ (8006c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8006c30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c32:	4a07      	ldr	r2, [pc, #28]	@ (8006c50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c38:	4b04      	ldr	r3, [pc, #16]	@ (8006c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	58024400 	.word	0x58024400
 8006c48:	0800c818 	.word	0x0800c818
 8006c4c:	24000018 	.word	0x24000018
 8006c50:	24000014 	.word	0x24000014

08006c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c58:	f7ff ffcc 	bl	8006bf4 <HAL_RCC_GetHCLKFreq>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	091b      	lsrs	r3, r3, #4
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	4904      	ldr	r1, [pc, #16]	@ (8006c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c6a:	5ccb      	ldrb	r3, [r1, r3]
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	58024400 	.word	0x58024400
 8006c7c:	0800c818 	.word	0x0800c818

08006c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c84:	f7ff ffb6 	bl	8006bf4 <HAL_RCC_GetHCLKFreq>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	4904      	ldr	r1, [pc, #16]	@ (8006ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c96:	5ccb      	ldrb	r3, [r1, r3]
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	0800c818 	.word	0x0800c818

08006cac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb0:	b0ca      	sub	sp, #296	@ 0x128
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006cd0:	2500      	movs	r5, #0
 8006cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8006cd6:	d049      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ce2:	d02f      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ce8:	d828      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cee:	d01a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cf4:	d822      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cfe:	d007      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d00:	e01c      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d02:	4bb8      	ldr	r3, [pc, #736]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d06:	4ab7      	ldr	r2, [pc, #732]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d0e:	e01a      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	3308      	adds	r3, #8
 8006d16:	2102      	movs	r1, #2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 fc8f 	bl	800863c <RCCEx_PLL2_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d24:	e00f      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	3328      	adds	r3, #40	@ 0x28
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fd36 	bl	80087a0 <RCCEx_PLL3_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d3a:	e004      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d4e:	4ba5      	ldr	r3, [pc, #660]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d5c:	4aa1      	ldr	r2, [pc, #644]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d62:	e003      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006d78:	f04f 0900 	mov.w	r9, #0
 8006d7c:	ea58 0309 	orrs.w	r3, r8, r9
 8006d80:	d047      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d82a      	bhi.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006da9 	.word	0x08006da9
 8006d98:	08006db7 	.word	0x08006db7
 8006d9c:	08006dcd 	.word	0x08006dcd
 8006da0:	08006deb 	.word	0x08006deb
 8006da4:	08006deb 	.word	0x08006deb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da8:	4b8e      	ldr	r3, [pc, #568]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	4a8d      	ldr	r2, [pc, #564]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006db4:	e01a      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dba:	3308      	adds	r3, #8
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 fc3c 	bl	800863c <RCCEx_PLL2_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dca:	e00f      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd0:	3328      	adds	r3, #40	@ 0x28
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 fce3 	bl	80087a0 <RCCEx_PLL3_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006de0:	e004      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006df4:	4b7b      	ldr	r3, [pc, #492]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df8:	f023 0107 	bic.w	r1, r3, #7
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e02:	4a78      	ldr	r2, [pc, #480]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e08:	e003      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006e1e:	f04f 0b00 	mov.w	fp, #0
 8006e22:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e26:	d04c      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e32:	d030      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e38:	d829      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e3c:	d02d      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e40:	d825      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e42:	2b80      	cmp	r3, #128	@ 0x80
 8006e44:	d018      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e46:	2b80      	cmp	r3, #128	@ 0x80
 8006e48:	d821      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e4e:	2b40      	cmp	r3, #64	@ 0x40
 8006e50:	d007      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e52:	e01c      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e54:	4b63      	ldr	r3, [pc, #396]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	4a62      	ldr	r2, [pc, #392]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e60:	e01c      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	3308      	adds	r3, #8
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f001 fbe6 	bl	800863c <RCCEx_PLL2_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e76:	e011      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7c:	3328      	adds	r3, #40	@ 0x28
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fc8d 	bl	80087a0 <RCCEx_PLL3_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e8c:	e006      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e94:	e002      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e96:	bf00      	nop
 8006e98:	e000      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb2:	4a4c      	ldr	r2, [pc, #304]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eb8:	e003      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006ece:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006ed8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006edc:	460b      	mov	r3, r1
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	d053      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006eea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006eee:	d035      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ef4:	d82e      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ef6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006efa:	d031      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006efc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f00:	d828      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f06:	d01a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f0c:	d822      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f16:	d007      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f18:	e01c      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1a:	4b32      	ldr	r3, [pc, #200]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a31      	ldr	r2, [pc, #196]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f26:	e01c      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fb83 	bl	800863c <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f3c:	e011      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f42:	3328      	adds	r3, #40	@ 0x28
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f001 fc2a 	bl	80087a0 <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f52:	e006      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f5a:	e002      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f5c:	bf00      	nop
 8006f5e:	e000      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10b      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f80:	e003      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006f96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006fa0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	d056      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fb6:	d038      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fbc:	d831      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fc2:	d034      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006fc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fc8:	d82b      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fce:	d01d      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd4:	d825      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d006      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006fda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fde:	d00a      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006fe0:	e01f      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fe2:	bf00      	nop
 8006fe4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe8:	4ba2      	ldr	r3, [pc, #648]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	4aa1      	ldr	r2, [pc, #644]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ff4:	e01c      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fb1c 	bl	800863c <RCCEx_PLL2_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800700a:	e011      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800700c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007010:	3328      	adds	r3, #40	@ 0x28
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f001 fbc3 	bl	80087a0 <RCCEx_PLL3_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007020:	e006      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007028:	e002      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800702a:	bf00      	nop
 800702c:	e000      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800702e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10b      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007038:	4b8e      	ldr	r3, [pc, #568]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800703a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007044:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007048:	4a8a      	ldr	r2, [pc, #552]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800704a:	430b      	orrs	r3, r1
 800704c:	6593      	str	r3, [r2, #88]	@ 0x58
 800704e:	e003      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007068:	2300      	movs	r3, #0
 800706a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800706e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d03a      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800707e:	2b30      	cmp	r3, #48	@ 0x30
 8007080:	d01f      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007082:	2b30      	cmp	r3, #48	@ 0x30
 8007084:	d819      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007086:	2b20      	cmp	r3, #32
 8007088:	d00c      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800708a:	2b20      	cmp	r3, #32
 800708c:	d815      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d019      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007092:	2b10      	cmp	r3, #16
 8007094:	d111      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007096:	4b77      	ldr	r3, [pc, #476]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4a76      	ldr	r2, [pc, #472]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800709c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070a2:	e011      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a8:	3308      	adds	r3, #8
 80070aa:	2102      	movs	r1, #2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 fac5 	bl	800863c <RCCEx_PLL2_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c0:	e002      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070d0:	4b68      	ldr	r3, [pc, #416]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070de:	4a65      	ldr	r2, [pc, #404]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e0:	430b      	orrs	r3, r1
 80070e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070e4:	e003      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80070fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070fe:	2300      	movs	r3, #0
 8007100:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007104:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007108:	460b      	mov	r3, r1
 800710a:	4313      	orrs	r3, r2
 800710c:	d051      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007118:	d035      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800711a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800711e:	d82e      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007120:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007124:	d031      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007126:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800712a:	d828      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800712c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007130:	d01a      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007136:	d822      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007140:	d007      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007142:	e01c      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007144:	4b4b      	ldr	r3, [pc, #300]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007148:	4a4a      	ldr	r2, [pc, #296]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800714a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800714e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007150:	e01c      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007156:	3308      	adds	r3, #8
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f001 fa6e 	bl	800863c <RCCEx_PLL2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007166:	e011      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	3328      	adds	r3, #40	@ 0x28
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f001 fb15 	bl	80087a0 <RCCEx_PLL3_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800717c:	e006      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007184:	e002      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800718a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800718c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007194:	4b37      	ldr	r3, [pc, #220]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007198:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800719c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a2:	4a34      	ldr	r2, [pc, #208]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071a4:	430b      	orrs	r3, r1
 80071a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80071a8:	e003      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80071be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071c2:	2300      	movs	r3, #0
 80071c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80071cc:	460b      	mov	r3, r1
 80071ce:	4313      	orrs	r3, r2
 80071d0:	d056      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071dc:	d033      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80071de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071e2:	d82c      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071e8:	d02f      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80071ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071ee:	d826      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071f4:	d02b      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80071f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071fa:	d820      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007200:	d012      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007206:	d81a      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d022      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007210:	d115      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007216:	3308      	adds	r3, #8
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f001 fa0e 	bl	800863c <RCCEx_PLL2_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007226:	e015      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722c:	3328      	adds	r3, #40	@ 0x28
 800722e:	2101      	movs	r1, #1
 8007230:	4618      	mov	r0, r3
 8007232:	f001 fab5 	bl	80087a0 <RCCEx_PLL3_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800723c:	e00a      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007244:	e006      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007246:	bf00      	nop
 8007248:	e004      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10d      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800725c:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800725e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007260:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800726a:	4a02      	ldr	r2, [pc, #8]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800726c:	430b      	orrs	r3, r1
 800726e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800727c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800728c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007296:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d055      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072ac:	d033      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80072ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072b2:	d82c      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b8:	d02f      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072be:	d826      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072c4:	d02b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80072c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072ca:	d820      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d0:	d012      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80072d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d6:	d81a      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d022      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80072dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e0:	d115      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e6:	3308      	adds	r3, #8
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 f9a6 	bl	800863c <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072f6:	e015      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fc:	3328      	adds	r3, #40	@ 0x28
 80072fe:	2101      	movs	r1, #1
 8007300:	4618      	mov	r0, r3
 8007302:	f001 fa4d 	bl	80087a0 <RCCEx_PLL3_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800730c:	e00a      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007314:	e006      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007316:	bf00      	nop
 8007318:	e004      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800731a:	bf00      	nop
 800731c:	e002      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800731e:	bf00      	nop
 8007320:	e000      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800732c:	4ba3      	ldr	r3, [pc, #652]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007330:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800733c:	4a9f      	ldr	r2, [pc, #636]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800733e:	430b      	orrs	r3, r1
 8007340:	6593      	str	r3, [r2, #88]	@ 0x58
 8007342:	e003      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007366:	460b      	mov	r3, r1
 8007368:	4313      	orrs	r3, r2
 800736a:	d037      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007376:	d00e      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800737c:	d816      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d018      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007386:	d111      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007388:	4b8c      	ldr	r3, [pc, #560]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	4a8b      	ldr	r2, [pc, #556]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007394:	e00f      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	3308      	adds	r3, #8
 800739c:	2101      	movs	r1, #1
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 f94c 	bl	800863c <RCCEx_PLL2_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073aa:	e004      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80073b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073be:	4b7f      	ldr	r3, [pc, #508]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	4a7b      	ldr	r2, [pc, #492]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ce:	430b      	orrs	r3, r1
 80073d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80073d2:	e003      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80073e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073ec:	2300      	movs	r3, #0
 80073ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80073f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4313      	orrs	r3, r2
 80073fa:	d039      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007402:	2b03      	cmp	r3, #3
 8007404:	d81c      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007406:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007449 	.word	0x08007449
 8007410:	0800741d 	.word	0x0800741d
 8007414:	0800742b 	.word	0x0800742b
 8007418:	08007449 	.word	0x08007449
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741c:	4b67      	ldr	r3, [pc, #412]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	4a66      	ldr	r2, [pc, #408]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007428:	e00f      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742e:	3308      	adds	r3, #8
 8007430:	2102      	movs	r1, #2
 8007432:	4618      	mov	r0, r3
 8007434:	f001 f902 	bl	800863c <RCCEx_PLL2_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800743e:	e004      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007446:	e000      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007452:	4b5a      	ldr	r3, [pc, #360]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007456:	f023 0103 	bic.w	r1, r3, #3
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007460:	4a56      	ldr	r2, [pc, #344]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007462:	430b      	orrs	r3, r1
 8007464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007466:	e003      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800747c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007480:	2300      	movs	r3, #0
 8007482:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007486:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800748a:	460b      	mov	r3, r1
 800748c:	4313      	orrs	r3, r2
 800748e:	f000 809f 	beq.w	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007492:	4b4b      	ldr	r3, [pc, #300]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a4a      	ldr	r2, [pc, #296]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800749c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800749e:	f7fc fc85 	bl	8003dac <HAL_GetTick>
 80074a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074a6:	e00b      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a8:	f7fc fc80 	bl	8003dac <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b64      	cmp	r3, #100	@ 0x64
 80074b6:	d903      	bls.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074be:	e005      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074c0:	4b3f      	ldr	r3, [pc, #252]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0ed      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80074cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d179      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074d4:	4b39      	ldr	r3, [pc, #228]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074e0:	4053      	eors	r3, r2
 80074e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d015      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074ea:	4b34      	ldr	r3, [pc, #208]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074f6:	4b31      	ldr	r3, [pc, #196]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fa:	4a30      	ldr	r2, [pc, #192]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007500:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007502:	4b2e      	ldr	r3, [pc, #184]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007506:	4a2d      	ldr	r2, [pc, #180]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800750c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800750e:	4a2b      	ldr	r2, [pc, #172]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007514:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800751e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007522:	d118      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007524:	f7fc fc42 	bl	8003dac <HAL_GetTick>
 8007528:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800752c:	e00d      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800752e:	f7fc fc3d 	bl	8003dac <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007538:	1ad2      	subs	r2, r2, r3
 800753a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800753e:	429a      	cmp	r2, r3
 8007540:	d903      	bls.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007548:	e005      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800754a:	4b1c      	ldr	r3, [pc, #112]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0eb      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755a:	2b00      	cmp	r3, #0
 800755c:	d129      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800756e:	d10e      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007570:	4b12      	ldr	r3, [pc, #72]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007580:	091a      	lsrs	r2, r3, #4
 8007582:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007584:	4013      	ands	r3, r2
 8007586:	4a0d      	ldr	r2, [pc, #52]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007588:	430b      	orrs	r3, r1
 800758a:	6113      	str	r3, [r2, #16]
 800758c:	e005      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800758e:	4b0b      	ldr	r3, [pc, #44]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	4a0a      	ldr	r2, [pc, #40]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007598:	6113      	str	r3, [r2, #16]
 800759a:	4b08      	ldr	r3, [pc, #32]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800759c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075aa:	4a04      	ldr	r2, [pc, #16]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ac:	430b      	orrs	r3, r1
 80075ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80075b0:	e00e      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80075ba:	e009      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80075bc:	58024400 	.word	0x58024400
 80075c0:	58024800 	.word	0x58024800
 80075c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f002 0301 	and.w	r3, r2, #1
 80075dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075e0:	2300      	movs	r3, #0
 80075e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f000 8089 	beq.w	8007704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075f8:	2b28      	cmp	r3, #40	@ 0x28
 80075fa:	d86b      	bhi.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80075fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	080076dd 	.word	0x080076dd
 8007608:	080076d5 	.word	0x080076d5
 800760c:	080076d5 	.word	0x080076d5
 8007610:	080076d5 	.word	0x080076d5
 8007614:	080076d5 	.word	0x080076d5
 8007618:	080076d5 	.word	0x080076d5
 800761c:	080076d5 	.word	0x080076d5
 8007620:	080076d5 	.word	0x080076d5
 8007624:	080076a9 	.word	0x080076a9
 8007628:	080076d5 	.word	0x080076d5
 800762c:	080076d5 	.word	0x080076d5
 8007630:	080076d5 	.word	0x080076d5
 8007634:	080076d5 	.word	0x080076d5
 8007638:	080076d5 	.word	0x080076d5
 800763c:	080076d5 	.word	0x080076d5
 8007640:	080076d5 	.word	0x080076d5
 8007644:	080076bf 	.word	0x080076bf
 8007648:	080076d5 	.word	0x080076d5
 800764c:	080076d5 	.word	0x080076d5
 8007650:	080076d5 	.word	0x080076d5
 8007654:	080076d5 	.word	0x080076d5
 8007658:	080076d5 	.word	0x080076d5
 800765c:	080076d5 	.word	0x080076d5
 8007660:	080076d5 	.word	0x080076d5
 8007664:	080076dd 	.word	0x080076dd
 8007668:	080076d5 	.word	0x080076d5
 800766c:	080076d5 	.word	0x080076d5
 8007670:	080076d5 	.word	0x080076d5
 8007674:	080076d5 	.word	0x080076d5
 8007678:	080076d5 	.word	0x080076d5
 800767c:	080076d5 	.word	0x080076d5
 8007680:	080076d5 	.word	0x080076d5
 8007684:	080076dd 	.word	0x080076dd
 8007688:	080076d5 	.word	0x080076d5
 800768c:	080076d5 	.word	0x080076d5
 8007690:	080076d5 	.word	0x080076d5
 8007694:	080076d5 	.word	0x080076d5
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076d5 	.word	0x080076d5
 80076a0:	080076d5 	.word	0x080076d5
 80076a4:	080076dd 	.word	0x080076dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ac:	3308      	adds	r3, #8
 80076ae:	2101      	movs	r1, #1
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 ffc3 	bl	800863c <RCCEx_PLL2_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076bc:	e00f      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c2:	3328      	adds	r3, #40	@ 0x28
 80076c4:	2101      	movs	r1, #1
 80076c6:	4618      	mov	r0, r3
 80076c8:	f001 f86a 	bl	80087a0 <RCCEx_PLL3_Config>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076d2:	e004      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076da:	e000      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80076dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076e6:	4bbf      	ldr	r3, [pc, #764]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076f4:	4abb      	ldr	r2, [pc, #748]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076f6:	430b      	orrs	r3, r1
 80076f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80076fa:	e003      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	f002 0302 	and.w	r3, r2, #2
 8007710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007714:	2300      	movs	r3, #0
 8007716:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800771a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800771e:	460b      	mov	r3, r1
 8007720:	4313      	orrs	r3, r2
 8007722:	d041      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800772a:	2b05      	cmp	r3, #5
 800772c:	d824      	bhi.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007781 	.word	0x08007781
 8007738:	0800774d 	.word	0x0800774d
 800773c:	08007763 	.word	0x08007763
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007781 	.word	0x08007781
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	3308      	adds	r3, #8
 8007752:	2101      	movs	r1, #1
 8007754:	4618      	mov	r0, r3
 8007756:	f000 ff71 	bl	800863c <RCCEx_PLL2_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007760:	e00f      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007766:	3328      	adds	r3, #40	@ 0x28
 8007768:	2101      	movs	r1, #1
 800776a:	4618      	mov	r0, r3
 800776c:	f001 f818 	bl	80087a0 <RCCEx_PLL3_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007776:	e004      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800778a:	4b96      	ldr	r3, [pc, #600]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800778c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778e:	f023 0107 	bic.w	r1, r3, #7
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007798:	4a92      	ldr	r2, [pc, #584]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800779a:	430b      	orrs	r3, r1
 800779c:	6553      	str	r3, [r2, #84]	@ 0x54
 800779e:	e003      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f002 0304 	and.w	r3, r2, #4
 80077b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077b8:	2300      	movs	r3, #0
 80077ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4313      	orrs	r3, r2
 80077c6:	d044      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	d825      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80077d4:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	08007829 	.word	0x08007829
 80077e0:	080077f5 	.word	0x080077f5
 80077e4:	0800780b 	.word	0x0800780b
 80077e8:	08007829 	.word	0x08007829
 80077ec:	08007829 	.word	0x08007829
 80077f0:	08007829 	.word	0x08007829
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f8:	3308      	adds	r3, #8
 80077fa:	2101      	movs	r1, #1
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 ff1d 	bl	800863c <RCCEx_PLL2_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007808:	e00f      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780e:	3328      	adds	r3, #40	@ 0x28
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f000 ffc4 	bl	80087a0 <RCCEx_PLL3_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800781e:	e004      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007826:	e000      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007832:	4b6c      	ldr	r3, [pc, #432]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007836:	f023 0107 	bic.w	r1, r3, #7
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007842:	4a68      	ldr	r2, [pc, #416]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007844:	430b      	orrs	r3, r1
 8007846:	6593      	str	r3, [r2, #88]	@ 0x58
 8007848:	e003      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	f002 0320 	and.w	r3, r2, #32
 800785e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007862:	2300      	movs	r3, #0
 8007864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800786c:	460b      	mov	r3, r1
 800786e:	4313      	orrs	r3, r2
 8007870:	d055      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800787e:	d033      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007884:	d82c      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788a:	d02f      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007890:	d826      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007896:	d02b      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800789c:	d820      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800789e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a2:	d012      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a8:	d81a      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d022      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078b2:	d115      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b8:	3308      	adds	r3, #8
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 febd 	bl	800863c <RCCEx_PLL2_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078c8:	e015      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ce:	3328      	adds	r3, #40	@ 0x28
 80078d0:	2102      	movs	r1, #2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 ff64 	bl	80087a0 <RCCEx_PLL3_Config>
 80078d8:	4603      	mov	r3, r0
 80078da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078de:	e00a      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078e6:	e006      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078e8:	bf00      	nop
 80078ea:	e004      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078ec:	bf00      	nop
 80078ee:	e002      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078f0:	bf00      	nop
 80078f2:	e000      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078fe:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790e:	4a35      	ldr	r2, [pc, #212]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007910:	430b      	orrs	r3, r1
 8007912:	6553      	str	r3, [r2, #84]	@ 0x54
 8007914:	e003      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800792a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800792e:	2300      	movs	r3, #0
 8007930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007934:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007938:	460b      	mov	r3, r1
 800793a:	4313      	orrs	r3, r2
 800793c:	d058      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007946:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800794a:	d033      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800794c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007950:	d82c      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007956:	d02f      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800795c:	d826      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800795e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007962:	d02b      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007968:	d820      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800796a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796e:	d012      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007974:	d81a      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d022      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800797a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800797e:	d115      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007984:	3308      	adds	r3, #8
 8007986:	2100      	movs	r1, #0
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fe57 	bl	800863c <RCCEx_PLL2_Config>
 800798e:	4603      	mov	r3, r0
 8007990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007994:	e015      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	3328      	adds	r3, #40	@ 0x28
 800799c:	2102      	movs	r1, #2
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fefe 	bl	80087a0 <RCCEx_PLL3_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079aa:	e00a      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079b2:	e006      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079b4:	bf00      	nop
 80079b6:	e004      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079b8:	bf00      	nop
 80079ba:	e002      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079bc:	bf00      	nop
 80079be:	e000      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10e      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079ca:	4b06      	ldr	r3, [pc, #24]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079da:	4a02      	ldr	r2, [pc, #8]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079dc:	430b      	orrs	r3, r1
 80079de:	6593      	str	r3, [r2, #88]	@ 0x58
 80079e0:	e006      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80079e2:	bf00      	nop
 80079e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80079fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a00:	2300      	movs	r3, #0
 8007a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	d055      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a1c:	d033      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a22:	d82c      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a28:	d02f      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a2e:	d826      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a34:	d02b      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a3a:	d820      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a40:	d012      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a46:	d81a      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d022      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a50:	d115      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a56:	3308      	adds	r3, #8
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fdee 	bl	800863c <RCCEx_PLL2_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a66:	e015      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6c:	3328      	adds	r3, #40	@ 0x28
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fe95 	bl	80087a0 <RCCEx_PLL3_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a7c:	e00a      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a84:	e006      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a86:	bf00      	nop
 8007a88:	e004      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e002      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a8e:	bf00      	nop
 8007a90:	e000      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007aac:	4a9d      	ldr	r2, [pc, #628]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ab2:	e003      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f002 0308 	and.w	r3, r2, #8
 8007ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007acc:	2300      	movs	r3, #0
 8007ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ad2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d01e      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ae8:	d10c      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aee:	3328      	adds	r3, #40	@ 0x28
 8007af0:	2102      	movs	r1, #2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fe54 	bl	80087a0 <RCCEx_PLL3_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b04:	4b87      	ldr	r3, [pc, #540]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b14:	4a83      	ldr	r2, [pc, #524]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b16:	430b      	orrs	r3, r1
 8007b18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f002 0310 	and.w	r3, r2, #16
 8007b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007b34:	460b      	mov	r3, r1
 8007b36:	4313      	orrs	r3, r2
 8007b38:	d01e      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b46:	d10c      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4c:	3328      	adds	r3, #40	@ 0x28
 8007b4e:	2102      	movs	r1, #2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fe25 	bl	80087a0 <RCCEx_PLL3_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b62:	4b70      	ldr	r3, [pc, #448]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b72:	4a6c      	ldr	r2, [pc, #432]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b74:	430b      	orrs	r3, r1
 8007b76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b92:	460b      	mov	r3, r1
 8007b94:	4313      	orrs	r3, r2
 8007b96:	d03e      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba4:	d022      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007baa:	d81b      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb4:	d00b      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007bb6:	e015      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fd3b 	bl	800863c <RCCEx_PLL2_Config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bcc:	e00f      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	3328      	adds	r3, #40	@ 0x28
 8007bd4:	2102      	movs	r1, #2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fde2 	bl	80087a0 <RCCEx_PLL3_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007be2:	e004      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10b      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c06:	4a47      	ldr	r2, [pc, #284]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c0c:	e003      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c24:	2300      	movs	r3, #0
 8007c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	d03b      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c3e:	d01f      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c44:	d818      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c4a:	d003      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c50:	d007      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c52:	e011      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c54:	4b33      	ldr	r3, [pc, #204]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	4a32      	ldr	r2, [pc, #200]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c60:	e00f      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c66:	3328      	adds	r3, #40	@ 0x28
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fd98 	bl	80087a0 <RCCEx_PLL3_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c76:	e004      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c7e:	e000      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c8a:	4b26      	ldr	r3, [pc, #152]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9a:	4a22      	ldr	r2, [pc, #136]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ca0:	e003      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007cb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cb8:	2300      	movs	r3, #0
 8007cba:	677b      	str	r3, [r7, #116]	@ 0x74
 8007cbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	d034      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd4:	d007      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007cd6:	e011      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd8:	4b12      	ldr	r3, [pc, #72]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	4a11      	ldr	r2, [pc, #68]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ce4:	e00e      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	3308      	adds	r3, #8
 8007cec:	2102      	movs	r1, #2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fca4 	bl	800863c <RCCEx_PLL2_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cfa:	e003      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10d      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d1a:	4a02      	ldr	r2, [pc, #8]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d20:	e006      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d22:	bf00      	nop
 8007d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d3e:	2300      	movs	r3, #0
 8007d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d00c      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	3328      	adds	r3, #40	@ 0x28
 8007d52:	2102      	movs	r1, #2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fd23 	bl	80087a0 <RCCEx_PLL3_Config>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d72:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d74:	2300      	movs	r3, #0
 8007d76:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	d038      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d8e:	d018      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d94:	d811      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9a:	d014      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da0:	d80b      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007daa:	d106      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dac:	4bc3      	ldr	r3, [pc, #780]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db0:	4ac2      	ldr	r2, [pc, #776]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007db8:	e008      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dc0:	e004      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dc2:	bf00      	nop
 8007dc4:	e002      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dc6:	bf00      	nop
 8007dc8:	e000      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10b      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dd4:	4bb9      	ldr	r3, [pc, #740]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de4:	4ab5      	ldr	r2, [pc, #724]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007de6:	430b      	orrs	r3, r1
 8007de8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dea:	e003      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e02:	2300      	movs	r3, #0
 8007e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	d009      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e10:	4baa      	ldr	r3, [pc, #680]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e1e:	4aa7      	ldr	r2, [pc, #668]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e20:	430b      	orrs	r3, r1
 8007e22:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e30:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e32:	2300      	movs	r3, #0
 8007e34:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	d00a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e40:	4b9e      	ldr	r3, [pc, #632]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e50:	4a9a      	ldr	r2, [pc, #616]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e64:	2300      	movs	r3, #0
 8007e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	d009      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e72:	4b92      	ldr	r3, [pc, #584]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e76:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e80:	4a8e      	ldr	r2, [pc, #568]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e82:	430b      	orrs	r3, r1
 8007e84:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007e92:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e94:	2300      	movs	r3, #0
 8007e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ea2:	4b86      	ldr	r3, [pc, #536]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	4a85      	ldr	r2, [pc, #532]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ea8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007eac:	6113      	str	r3, [r2, #16]
 8007eae:	4b83      	ldr	r3, [pc, #524]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb0:	6919      	ldr	r1, [r3, #16]
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007eba:	4a80      	ldr	r2, [pc, #512]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	d009      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007edc:	4b77      	ldr	r3, [pc, #476]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ee0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eea:	4a74      	ldr	r2, [pc, #464]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eec:	430b      	orrs	r3, r1
 8007eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007efe:	2300      	movs	r3, #0
 8007f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d00a      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f10:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f1c:	4a67      	ldr	r2, [pc, #412]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	d011      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f42:	3308      	adds	r3, #8
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fb78 	bl	800863c <RCCEx_PLL2_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	6239      	str	r1, [r7, #32]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	d011      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f82:	3308      	adds	r3, #8
 8007f84:	2101      	movs	r1, #1
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fb58 	bl	800863c <RCCEx_PLL2_Config>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	2100      	movs	r1, #0
 8007fac:	61b9      	str	r1, [r7, #24]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	d011      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fb38 	bl	800863c <RCCEx_PLL2_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	2100      	movs	r1, #0
 8007fec:	6139      	str	r1, [r7, #16]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	d011      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008002:	3328      	adds	r3, #40	@ 0x28
 8008004:	2100      	movs	r1, #0
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fbca 	bl	80087a0 <RCCEx_PLL3_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800801e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	2100      	movs	r1, #0
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008038:	460b      	mov	r3, r1
 800803a:	4313      	orrs	r3, r2
 800803c:	d011      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008042:	3328      	adds	r3, #40	@ 0x28
 8008044:	2101      	movs	r1, #1
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fbaa 	bl	80087a0 <RCCEx_PLL3_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800805e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	2100      	movs	r1, #0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	607b      	str	r3, [r7, #4]
 8008074:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008078:	460b      	mov	r3, r1
 800807a:	4313      	orrs	r3, r2
 800807c:	d011      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008082:	3328      	adds	r3, #40	@ 0x28
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fb8a 	bl	80087a0 <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80080a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e000      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80080b6:	46bd      	mov	sp, r7
 80080b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080bc:	58024400 	.word	0x58024400

080080c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080c4:	f7fe fd96 	bl	8006bf4 <HAL_RCC_GetHCLKFreq>
 80080c8:	4602      	mov	r2, r0
 80080ca:	4b06      	ldr	r3, [pc, #24]	@ (80080e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	091b      	lsrs	r3, r3, #4
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	4904      	ldr	r1, [pc, #16]	@ (80080e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080d6:	5ccb      	ldrb	r3, [r1, r3]
 80080d8:	f003 031f 	and.w	r3, r3, #31
 80080dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	58024400 	.word	0x58024400
 80080e8:	0800c818 	.word	0x0800c818

080080ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b089      	sub	sp, #36	@ 0x24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080f4:	4ba1      	ldr	r3, [pc, #644]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80080fe:	4b9f      	ldr	r3, [pc, #636]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008102:	0b1b      	lsrs	r3, r3, #12
 8008104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008108:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800810a:	4b9c      	ldr	r3, [pc, #624]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810e:	091b      	lsrs	r3, r3, #4
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008116:	4b99      	ldr	r3, [pc, #612]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811a:	08db      	lsrs	r3, r3, #3
 800811c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	fb02 f303 	mul.w	r3, r2, r3
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8111 	beq.w	800835c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	2b02      	cmp	r3, #2
 800813e:	f000 8083 	beq.w	8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	2b02      	cmp	r3, #2
 8008146:	f200 80a1 	bhi.w	800828c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d056      	beq.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008156:	e099      	b.n	800828c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008158:	4b88      	ldr	r3, [pc, #544]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	d02d      	beq.n	80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008164:	4b85      	ldr	r3, [pc, #532]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	08db      	lsrs	r3, r3, #3
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	4a84      	ldr	r2, [pc, #528]	@ (8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008170:	fa22 f303 	lsr.w	r3, r2, r3
 8008174:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	ee07 3a90 	vmov	s15, r3
 800817c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818e:	4b7b      	ldr	r3, [pc, #492]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819e:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081be:	e087      	b.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008388 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80081ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d2:	4b6a      	ldr	r3, [pc, #424]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008202:	e065      	b.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800838c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008216:	4b59      	ldr	r3, [pc, #356]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008226:	ed97 6a03 	vldr	s12, [r7, #12]
 800822a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800822e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800823a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008246:	e043      	b.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825a:	4b48      	ldr	r3, [pc, #288]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800825c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826a:	ed97 6a03 	vldr	s12, [r7, #12]
 800826e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800827e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800828a:	e021      	b.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008296:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800838c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800829a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800829e:	4b37      	ldr	r3, [pc, #220]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80082d0:	4b2a      	ldr	r3, [pc, #168]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d4:	0a5b      	lsrs	r3, r3, #9
 80082d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082f6:	ee17 2a90 	vmov	r2, s15
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80082fe:	4b1f      	ldr	r3, [pc, #124]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008302:	0c1b      	lsrs	r3, r3, #16
 8008304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008308:	ee07 3a90 	vmov	s15, r3
 800830c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008314:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008318:	edd7 6a07 	vldr	s13, [r7, #28]
 800831c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008324:	ee17 2a90 	vmov	r2, s15
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800832c:	4b13      	ldr	r3, [pc, #76]	@ (800837c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800832e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008330:	0e1b      	lsrs	r3, r3, #24
 8008332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008346:	edd7 6a07 	vldr	s13, [r7, #28]
 800834a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800834e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008352:	ee17 2a90 	vmov	r2, s15
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800835a:	e008      	b.n	800836e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	609a      	str	r2, [r3, #8]
}
 800836e:	bf00      	nop
 8008370:	3724      	adds	r7, #36	@ 0x24
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	58024400 	.word	0x58024400
 8008380:	03d09000 	.word	0x03d09000
 8008384:	46000000 	.word	0x46000000
 8008388:	4c742400 	.word	0x4c742400
 800838c:	4a742400 	.word	0x4a742400
 8008390:	4bbebc20 	.word	0x4bbebc20

08008394 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008394:	b480      	push	{r7}
 8008396:	b089      	sub	sp, #36	@ 0x24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800839c:	4ba1      	ldr	r3, [pc, #644]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80083a6:	4b9f      	ldr	r3, [pc, #636]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083aa:	0d1b      	lsrs	r3, r3, #20
 80083ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083b2:	4b9c      	ldr	r3, [pc, #624]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b6:	0a1b      	lsrs	r3, r3, #8
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80083be:	4b99      	ldr	r3, [pc, #612]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c2:	08db      	lsrs	r3, r3, #3
 80083c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	fb02 f303 	mul.w	r3, r2, r3
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8111 	beq.w	8008604 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	f000 8083 	beq.w	80084f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	f200 80a1 	bhi.w	8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d056      	beq.n	80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80083fe:	e099      	b.n	8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008400:	4b88      	ldr	r3, [pc, #544]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d02d      	beq.n	8008468 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800840c:	4b85      	ldr	r3, [pc, #532]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	4a84      	ldr	r2, [pc, #528]	@ (8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
 800841c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008436:	4b7b      	ldr	r3, [pc, #492]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008446:	ed97 6a03 	vldr	s12, [r7, #12]
 800844a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800862c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800844e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800845a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008466:	e087      	b.n	8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008472:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847a:	4b6a      	ldr	r3, [pc, #424]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800847c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848a:	ed97 6a03 	vldr	s12, [r7, #12]
 800848e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800862c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800849e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084aa:	e065      	b.n	8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084be:	4b59      	ldr	r3, [pc, #356]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80084d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800862c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ee:	e043      	b.n	8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80084fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008502:	4b48      	ldr	r3, [pc, #288]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008512:	ed97 6a03 	vldr	s12, [r7, #12]
 8008516:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800862c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800851a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008532:	e021      	b.n	8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008546:	4b37      	ldr	r3, [pc, #220]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008556:	ed97 6a03 	vldr	s12, [r7, #12]
 800855a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800862c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800855e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800856a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008576:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008578:	4b2a      	ldr	r3, [pc, #168]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800857a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857c:	0a5b      	lsrs	r3, r3, #9
 800857e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800858e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008592:	edd7 6a07 	vldr	s13, [r7, #28]
 8008596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800859a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800859e:	ee17 2a90 	vmov	r2, s15
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80085a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085aa:	0c1b      	lsrs	r3, r3, #16
 80085ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085cc:	ee17 2a90 	vmov	r2, s15
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80085d4:	4b13      	ldr	r3, [pc, #76]	@ (8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d8:	0e1b      	lsrs	r3, r3, #24
 80085da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80085f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085fa:	ee17 2a90 	vmov	r2, s15
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008602:	e008      	b.n	8008616 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	609a      	str	r2, [r3, #8]
}
 8008616:	bf00      	nop
 8008618:	3724      	adds	r7, #36	@ 0x24
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	58024400 	.word	0x58024400
 8008628:	03d09000 	.word	0x03d09000
 800862c:	46000000 	.word	0x46000000
 8008630:	4c742400 	.word	0x4c742400
 8008634:	4a742400 	.word	0x4a742400
 8008638:	4bbebc20 	.word	0x4bbebc20

0800863c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800864a:	4b53      	ldr	r3, [pc, #332]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 800864c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	2b03      	cmp	r3, #3
 8008654:	d101      	bne.n	800865a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e099      	b.n	800878e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800865a:	4b4f      	ldr	r3, [pc, #316]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a4e      	ldr	r2, [pc, #312]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008660:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008666:	f7fb fba1 	bl	8003dac <HAL_GetTick>
 800866a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800866c:	e008      	b.n	8008680 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800866e:	f7fb fb9d 	bl	8003dac <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d901      	bls.n	8008680 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e086      	b.n	800878e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008680:	4b45      	ldr	r3, [pc, #276]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1f0      	bne.n	800866e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800868c:	4b42      	ldr	r3, [pc, #264]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 800868e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008690:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	493f      	ldr	r1, [pc, #252]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 800869c:	4313      	orrs	r3, r2
 800869e:	628b      	str	r3, [r1, #40]	@ 0x28
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	025b      	lsls	r3, r3, #9
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	041b      	lsls	r3, r3, #16
 80086be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	061b      	lsls	r3, r3, #24
 80086cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086d0:	4931      	ldr	r1, [pc, #196]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80086d6:	4b30      	ldr	r3, [pc, #192]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 80086d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	492d      	ldr	r1, [pc, #180]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80086e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 80086ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ec:	f023 0220 	bic.w	r2, r3, #32
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	4928      	ldr	r1, [pc, #160]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80086fa:	4b27      	ldr	r3, [pc, #156]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 80086fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fe:	4a26      	ldr	r2, [pc, #152]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008700:	f023 0310 	bic.w	r3, r3, #16
 8008704:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008706:	4b24      	ldr	r3, [pc, #144]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800870a:	4b24      	ldr	r3, [pc, #144]	@ (800879c <RCCEx_PLL2_Config+0x160>)
 800870c:	4013      	ands	r3, r2
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	69d2      	ldr	r2, [r2, #28]
 8008712:	00d2      	lsls	r2, r2, #3
 8008714:	4920      	ldr	r1, [pc, #128]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008716:	4313      	orrs	r3, r2
 8008718:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800871a:	4b1f      	ldr	r3, [pc, #124]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 800871c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871e:	4a1e      	ldr	r2, [pc, #120]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008720:	f043 0310 	orr.w	r3, r3, #16
 8008724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d106      	bne.n	800873a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800872c:	4b1a      	ldr	r3, [pc, #104]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 800872e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008730:	4a19      	ldr	r2, [pc, #100]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008732:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008736:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008738:	e00f      	b.n	800875a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d106      	bne.n	800874e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008740:	4b15      	ldr	r3, [pc, #84]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008744:	4a14      	ldr	r2, [pc, #80]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800874a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800874c:	e005      	b.n	800875a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800874e:	4b12      	ldr	r3, [pc, #72]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008752:	4a11      	ldr	r2, [pc, #68]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008754:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008758:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800875a:	4b0f      	ldr	r3, [pc, #60]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a0e      	ldr	r2, [pc, #56]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008760:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008766:	f7fb fb21 	bl	8003dac <HAL_GetTick>
 800876a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800876c:	e008      	b.n	8008780 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800876e:	f7fb fb1d 	bl	8003dac <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d901      	bls.n	8008780 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e006      	b.n	800878e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008780:	4b05      	ldr	r3, [pc, #20]	@ (8008798 <RCCEx_PLL2_Config+0x15c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0f0      	beq.n	800876e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	58024400 	.word	0x58024400
 800879c:	ffff0007 	.word	0xffff0007

080087a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087ae:	4b53      	ldr	r3, [pc, #332]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d101      	bne.n	80087be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e099      	b.n	80088f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80087be:	4b4f      	ldr	r3, [pc, #316]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a4e      	ldr	r2, [pc, #312]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80087c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ca:	f7fb faef 	bl	8003dac <HAL_GetTick>
 80087ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087d0:	e008      	b.n	80087e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80087d2:	f7fb faeb 	bl	8003dac <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d901      	bls.n	80087e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e086      	b.n	80088f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087e4:	4b45      	ldr	r3, [pc, #276]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f0      	bne.n	80087d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80087f0:	4b42      	ldr	r3, [pc, #264]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80087f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	051b      	lsls	r3, r3, #20
 80087fe:	493f      	ldr	r1, [pc, #252]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008800:	4313      	orrs	r3, r2
 8008802:	628b      	str	r3, [r1, #40]	@ 0x28
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	3b01      	subs	r3, #1
 800880a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	3b01      	subs	r3, #1
 8008814:	025b      	lsls	r3, r3, #9
 8008816:	b29b      	uxth	r3, r3
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	3b01      	subs	r3, #1
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008826:	431a      	orrs	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	3b01      	subs	r3, #1
 800882e:	061b      	lsls	r3, r3, #24
 8008830:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008834:	4931      	ldr	r1, [pc, #196]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008836:	4313      	orrs	r3, r2
 8008838:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800883a:	4b30      	ldr	r3, [pc, #192]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 800883c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	492d      	ldr	r1, [pc, #180]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008848:	4313      	orrs	r3, r2
 800884a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800884c:	4b2b      	ldr	r3, [pc, #172]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 800884e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008850:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	4928      	ldr	r1, [pc, #160]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 800885a:	4313      	orrs	r3, r2
 800885c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800885e:	4b27      	ldr	r3, [pc, #156]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008862:	4a26      	ldr	r2, [pc, #152]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008868:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800886a:	4b24      	ldr	r3, [pc, #144]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 800886c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800886e:	4b24      	ldr	r3, [pc, #144]	@ (8008900 <RCCEx_PLL3_Config+0x160>)
 8008870:	4013      	ands	r3, r2
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	69d2      	ldr	r2, [r2, #28]
 8008876:	00d2      	lsls	r2, r2, #3
 8008878:	4920      	ldr	r1, [pc, #128]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 800887a:	4313      	orrs	r3, r2
 800887c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800887e:	4b1f      	ldr	r3, [pc, #124]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008882:	4a1e      	ldr	r2, [pc, #120]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008888:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d106      	bne.n	800889e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008890:	4b1a      	ldr	r3, [pc, #104]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008894:	4a19      	ldr	r2, [pc, #100]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 8008896:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800889a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800889c:	e00f      	b.n	80088be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d106      	bne.n	80088b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80088a4:	4b15      	ldr	r3, [pc, #84]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80088a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a8:	4a14      	ldr	r2, [pc, #80]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80088aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088b0:	e005      	b.n	80088be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80088b2:	4b12      	ldr	r3, [pc, #72]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	4a11      	ldr	r2, [pc, #68]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80088b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80088be:	4b0f      	ldr	r3, [pc, #60]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a0e      	ldr	r2, [pc, #56]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80088c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ca:	f7fb fa6f 	bl	8003dac <HAL_GetTick>
 80088ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088d0:	e008      	b.n	80088e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088d2:	f7fb fa6b 	bl	8003dac <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d901      	bls.n	80088e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e006      	b.n	80088f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088e4:	4b05      	ldr	r3, [pc, #20]	@ (80088fc <RCCEx_PLL3_Config+0x15c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f0      	beq.n	80088d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	58024400 	.word	0x58024400
 8008900:	ffff0007 	.word	0xffff0007

08008904 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e02b      	b.n	8008970 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f825 	bl	800897c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3304      	adds	r3, #4
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f002 f905 	bl	800ab54 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	461a      	mov	r2, r3
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	f002 f959 	bl	800ac0c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800895a:	4b07      	ldr	r3, [pc, #28]	@ (8008978 <HAL_SDRAM_Init+0x74>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a06      	ldr	r2, [pc, #24]	@ (8008978 <HAL_SDRAM_Init+0x74>)
 8008960:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008964:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	52004000 	.word	0x52004000

0800897c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80089a2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d101      	bne.n	80089ae <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
 80089ac:	e021      	b.n	80089f2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d002      	beq.n	80089ba <HAL_SDRAM_SendCommand+0x2a>
 80089b4:	7dfb      	ldrb	r3, [r7, #23]
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	d118      	bne.n	80089ec <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2202      	movs	r2, #2
 80089be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f002 f988 	bl	800ace0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d104      	bne.n	80089e2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2205      	movs	r2, #5
 80089dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80089e0:	e006      	b.n	80089f0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80089ea:	e001      	b.n	80089f0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e000      	b.n	80089f2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d101      	bne.n	8008a14 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008a10:	2302      	movs	r3, #2
 8008a12:	e016      	b.n	8008a42 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d10f      	bne.n	8008a40 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f002 f97a 	bl	800ad28 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e000      	b.n	8008a42 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e049      	b.n	8008af0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f89d 	bl	8008bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4619      	mov	r1, r3
 8008a88:	4610      	mov	r0, r2
 8008a8a:	f000 fb5d 	bl	8009148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b12:	4013      	ands	r3, r2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10f      	bne.n	8008b38 <HAL_TIM_PWM_DeInit+0x40>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6a1a      	ldr	r2, [r3, #32]
 8008b1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008b22:	4013      	ands	r3, r2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d107      	bne.n	8008b38 <HAL_TIM_PWM_DeInit+0x40>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f843 	bl	8008bc4 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d109      	bne.n	8008bfc <HAL_TIM_PWM_Start+0x24>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	bf14      	ite	ne
 8008bf4:	2301      	movne	r3, #1
 8008bf6:	2300      	moveq	r3, #0
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	e03c      	b.n	8008c76 <HAL_TIM_PWM_Start+0x9e>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d109      	bne.n	8008c16 <HAL_TIM_PWM_Start+0x3e>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	bf14      	ite	ne
 8008c0e:	2301      	movne	r3, #1
 8008c10:	2300      	moveq	r3, #0
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	e02f      	b.n	8008c76 <HAL_TIM_PWM_Start+0x9e>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d109      	bne.n	8008c30 <HAL_TIM_PWM_Start+0x58>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	bf14      	ite	ne
 8008c28:	2301      	movne	r3, #1
 8008c2a:	2300      	moveq	r3, #0
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	e022      	b.n	8008c76 <HAL_TIM_PWM_Start+0x9e>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b0c      	cmp	r3, #12
 8008c34:	d109      	bne.n	8008c4a <HAL_TIM_PWM_Start+0x72>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	bf14      	ite	ne
 8008c42:	2301      	movne	r3, #1
 8008c44:	2300      	moveq	r3, #0
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	e015      	b.n	8008c76 <HAL_TIM_PWM_Start+0x9e>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b10      	cmp	r3, #16
 8008c4e:	d109      	bne.n	8008c64 <HAL_TIM_PWM_Start+0x8c>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	bf14      	ite	ne
 8008c5c:	2301      	movne	r3, #1
 8008c5e:	2300      	moveq	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	e008      	b.n	8008c76 <HAL_TIM_PWM_Start+0x9e>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	bf14      	ite	ne
 8008c70:	2301      	movne	r3, #1
 8008c72:	2300      	moveq	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e0a1      	b.n	8008dc2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <HAL_TIM_PWM_Start+0xb6>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c8c:	e023      	b.n	8008cd6 <HAL_TIM_PWM_Start+0xfe>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d104      	bne.n	8008c9e <HAL_TIM_PWM_Start+0xc6>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c9c:	e01b      	b.n	8008cd6 <HAL_TIM_PWM_Start+0xfe>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_PWM_Start+0xd6>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cac:	e013      	b.n	8008cd6 <HAL_TIM_PWM_Start+0xfe>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b0c      	cmp	r3, #12
 8008cb2:	d104      	bne.n	8008cbe <HAL_TIM_PWM_Start+0xe6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cbc:	e00b      	b.n	8008cd6 <HAL_TIM_PWM_Start+0xfe>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b10      	cmp	r3, #16
 8008cc2:	d104      	bne.n	8008cce <HAL_TIM_PWM_Start+0xf6>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ccc:	e003      	b.n	8008cd6 <HAL_TIM_PWM_Start+0xfe>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fda8 	bl	8009834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a38      	ldr	r2, [pc, #224]	@ (8008dcc <HAL_TIM_PWM_Start+0x1f4>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d013      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x13e>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a37      	ldr	r2, [pc, #220]	@ (8008dd0 <HAL_TIM_PWM_Start+0x1f8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00e      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x13e>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a35      	ldr	r2, [pc, #212]	@ (8008dd4 <HAL_TIM_PWM_Start+0x1fc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d009      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x13e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a34      	ldr	r2, [pc, #208]	@ (8008dd8 <HAL_TIM_PWM_Start+0x200>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d004      	beq.n	8008d16 <HAL_TIM_PWM_Start+0x13e>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a32      	ldr	r2, [pc, #200]	@ (8008ddc <HAL_TIM_PWM_Start+0x204>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d101      	bne.n	8008d1a <HAL_TIM_PWM_Start+0x142>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <HAL_TIM_PWM_Start+0x144>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d007      	beq.n	8008d30 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a25      	ldr	r2, [pc, #148]	@ (8008dcc <HAL_TIM_PWM_Start+0x1f4>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d022      	beq.n	8008d80 <HAL_TIM_PWM_Start+0x1a8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d42:	d01d      	beq.n	8008d80 <HAL_TIM_PWM_Start+0x1a8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a25      	ldr	r2, [pc, #148]	@ (8008de0 <HAL_TIM_PWM_Start+0x208>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d018      	beq.n	8008d80 <HAL_TIM_PWM_Start+0x1a8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a24      	ldr	r2, [pc, #144]	@ (8008de4 <HAL_TIM_PWM_Start+0x20c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d013      	beq.n	8008d80 <HAL_TIM_PWM_Start+0x1a8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a22      	ldr	r2, [pc, #136]	@ (8008de8 <HAL_TIM_PWM_Start+0x210>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00e      	beq.n	8008d80 <HAL_TIM_PWM_Start+0x1a8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a1a      	ldr	r2, [pc, #104]	@ (8008dd0 <HAL_TIM_PWM_Start+0x1f8>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d009      	beq.n	8008d80 <HAL_TIM_PWM_Start+0x1a8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a1e      	ldr	r2, [pc, #120]	@ (8008dec <HAL_TIM_PWM_Start+0x214>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <HAL_TIM_PWM_Start+0x1a8>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a16      	ldr	r2, [pc, #88]	@ (8008dd4 <HAL_TIM_PWM_Start+0x1fc>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d115      	bne.n	8008dac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	4b1a      	ldr	r3, [pc, #104]	@ (8008df0 <HAL_TIM_PWM_Start+0x218>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b06      	cmp	r3, #6
 8008d90:	d015      	beq.n	8008dbe <HAL_TIM_PWM_Start+0x1e6>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d98:	d011      	beq.n	8008dbe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f042 0201 	orr.w	r2, r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008daa:	e008      	b.n	8008dbe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0201 	orr.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e000      	b.n	8008dc0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40010000 	.word	0x40010000
 8008dd0:	40010400 	.word	0x40010400
 8008dd4:	40014000 	.word	0x40014000
 8008dd8:	40014400 	.word	0x40014400
 8008ddc:	40014800 	.word	0x40014800
 8008de0:	40000400 	.word	0x40000400
 8008de4:	40000800 	.word	0x40000800
 8008de8:	40000c00 	.word	0x40000c00
 8008dec:	40001800 	.word	0x40001800
 8008df0:	00010007 	.word	0x00010007

08008df4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fd14 	bl	8009834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a3e      	ldr	r2, [pc, #248]	@ (8008f0c <HAL_TIM_PWM_Stop+0x118>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d013      	beq.n	8008e3e <HAL_TIM_PWM_Stop+0x4a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a3d      	ldr	r2, [pc, #244]	@ (8008f10 <HAL_TIM_PWM_Stop+0x11c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00e      	beq.n	8008e3e <HAL_TIM_PWM_Stop+0x4a>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a3b      	ldr	r2, [pc, #236]	@ (8008f14 <HAL_TIM_PWM_Stop+0x120>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d009      	beq.n	8008e3e <HAL_TIM_PWM_Stop+0x4a>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a3a      	ldr	r2, [pc, #232]	@ (8008f18 <HAL_TIM_PWM_Stop+0x124>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d004      	beq.n	8008e3e <HAL_TIM_PWM_Stop+0x4a>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a38      	ldr	r2, [pc, #224]	@ (8008f1c <HAL_TIM_PWM_Stop+0x128>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d101      	bne.n	8008e42 <HAL_TIM_PWM_Stop+0x4e>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <HAL_TIM_PWM_Stop+0x50>
 8008e42:	2300      	movs	r3, #0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d017      	beq.n	8008e78 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6a1a      	ldr	r2, [r3, #32]
 8008e4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008e52:	4013      	ands	r3, r2
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10f      	bne.n	8008e78 <HAL_TIM_PWM_Stop+0x84>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6a1a      	ldr	r2, [r3, #32]
 8008e5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008e62:	4013      	ands	r3, r2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d107      	bne.n	8008e78 <HAL_TIM_PWM_Stop+0x84>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6a1a      	ldr	r2, [r3, #32]
 8008e7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008e82:	4013      	ands	r3, r2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10f      	bne.n	8008ea8 <HAL_TIM_PWM_Stop+0xb4>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6a1a      	ldr	r2, [r3, #32]
 8008e8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008e92:	4013      	ands	r3, r2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d107      	bne.n	8008ea8 <HAL_TIM_PWM_Stop+0xb4>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0201 	bic.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <HAL_TIM_PWM_Stop+0xc4>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008eb6:	e023      	b.n	8008f00 <HAL_TIM_PWM_Stop+0x10c>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d104      	bne.n	8008ec8 <HAL_TIM_PWM_Stop+0xd4>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ec6:	e01b      	b.n	8008f00 <HAL_TIM_PWM_Stop+0x10c>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	d104      	bne.n	8008ed8 <HAL_TIM_PWM_Stop+0xe4>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ed6:	e013      	b.n	8008f00 <HAL_TIM_PWM_Stop+0x10c>
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b0c      	cmp	r3, #12
 8008edc:	d104      	bne.n	8008ee8 <HAL_TIM_PWM_Stop+0xf4>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ee6:	e00b      	b.n	8008f00 <HAL_TIM_PWM_Stop+0x10c>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d104      	bne.n	8008ef8 <HAL_TIM_PWM_Stop+0x104>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ef6:	e003      	b.n	8008f00 <HAL_TIM_PWM_Stop+0x10c>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40010400 	.word	0x40010400
 8008f14:	40014000 	.word	0x40014000
 8008f18:	40014400 	.word	0x40014400
 8008f1c:	40014800 	.word	0x40014800

08008f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e0ff      	b.n	800913e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b14      	cmp	r3, #20
 8008f4a:	f200 80f0 	bhi.w	800912e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008fa9 	.word	0x08008fa9
 8008f58:	0800912f 	.word	0x0800912f
 8008f5c:	0800912f 	.word	0x0800912f
 8008f60:	0800912f 	.word	0x0800912f
 8008f64:	08008fe9 	.word	0x08008fe9
 8008f68:	0800912f 	.word	0x0800912f
 8008f6c:	0800912f 	.word	0x0800912f
 8008f70:	0800912f 	.word	0x0800912f
 8008f74:	0800902b 	.word	0x0800902b
 8008f78:	0800912f 	.word	0x0800912f
 8008f7c:	0800912f 	.word	0x0800912f
 8008f80:	0800912f 	.word	0x0800912f
 8008f84:	0800906b 	.word	0x0800906b
 8008f88:	0800912f 	.word	0x0800912f
 8008f8c:	0800912f 	.word	0x0800912f
 8008f90:	0800912f 	.word	0x0800912f
 8008f94:	080090ad 	.word	0x080090ad
 8008f98:	0800912f 	.word	0x0800912f
 8008f9c:	0800912f 	.word	0x0800912f
 8008fa0:	0800912f 	.word	0x0800912f
 8008fa4:	080090ed 	.word	0x080090ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f96a 	bl	8009288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699a      	ldr	r2, [r3, #24]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0208 	orr.w	r2, r2, #8
 8008fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0204 	bic.w	r2, r2, #4
 8008fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6999      	ldr	r1, [r3, #24]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	619a      	str	r2, [r3, #24]
      break;
 8008fe6:	e0a5      	b.n	8009134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f9da 	bl	80093a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699a      	ldr	r2, [r3, #24]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	699a      	ldr	r2, [r3, #24]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6999      	ldr	r1, [r3, #24]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	021a      	lsls	r2, r3, #8
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	619a      	str	r2, [r3, #24]
      break;
 8009028:	e084      	b.n	8009134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fa43 	bl	80094bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69da      	ldr	r2, [r3, #28]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f042 0208 	orr.w	r2, r2, #8
 8009044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0204 	bic.w	r2, r2, #4
 8009054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69d9      	ldr	r1, [r3, #28]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	691a      	ldr	r2, [r3, #16]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	61da      	str	r2, [r3, #28]
      break;
 8009068:	e064      	b.n	8009134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	4618      	mov	r0, r3
 8009072:	f000 faab 	bl	80095cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69da      	ldr	r2, [r3, #28]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69da      	ldr	r2, [r3, #28]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69d9      	ldr	r1, [r3, #28]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	021a      	lsls	r2, r3, #8
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	61da      	str	r2, [r3, #28]
      break;
 80090aa:	e043      	b.n	8009134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 faf4 	bl	80096a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0208 	orr.w	r2, r2, #8
 80090c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0204 	bic.w	r2, r2, #4
 80090d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	691a      	ldr	r2, [r3, #16]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80090ea:	e023      	b.n	8009134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fb38 	bl	8009768 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009106:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009116:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	021a      	lsls	r2, r3, #8
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800912c:	e002      	b.n	8009134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
      break;
 8009132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800913c:	7dfb      	ldrb	r3, [r7, #23]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop

08009148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a43      	ldr	r2, [pc, #268]	@ (8009268 <TIM_Base_SetConfig+0x120>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d013      	beq.n	8009188 <TIM_Base_SetConfig+0x40>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009166:	d00f      	beq.n	8009188 <TIM_Base_SetConfig+0x40>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a40      	ldr	r2, [pc, #256]	@ (800926c <TIM_Base_SetConfig+0x124>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00b      	beq.n	8009188 <TIM_Base_SetConfig+0x40>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a3f      	ldr	r2, [pc, #252]	@ (8009270 <TIM_Base_SetConfig+0x128>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d007      	beq.n	8009188 <TIM_Base_SetConfig+0x40>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a3e      	ldr	r2, [pc, #248]	@ (8009274 <TIM_Base_SetConfig+0x12c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d003      	beq.n	8009188 <TIM_Base_SetConfig+0x40>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a3d      	ldr	r2, [pc, #244]	@ (8009278 <TIM_Base_SetConfig+0x130>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d108      	bne.n	800919a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800918e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a32      	ldr	r2, [pc, #200]	@ (8009268 <TIM_Base_SetConfig+0x120>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d01f      	beq.n	80091e2 <TIM_Base_SetConfig+0x9a>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091a8:	d01b      	beq.n	80091e2 <TIM_Base_SetConfig+0x9a>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a2f      	ldr	r2, [pc, #188]	@ (800926c <TIM_Base_SetConfig+0x124>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d017      	beq.n	80091e2 <TIM_Base_SetConfig+0x9a>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a2e      	ldr	r2, [pc, #184]	@ (8009270 <TIM_Base_SetConfig+0x128>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d013      	beq.n	80091e2 <TIM_Base_SetConfig+0x9a>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a2d      	ldr	r2, [pc, #180]	@ (8009274 <TIM_Base_SetConfig+0x12c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00f      	beq.n	80091e2 <TIM_Base_SetConfig+0x9a>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009278 <TIM_Base_SetConfig+0x130>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00b      	beq.n	80091e2 <TIM_Base_SetConfig+0x9a>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2b      	ldr	r2, [pc, #172]	@ (800927c <TIM_Base_SetConfig+0x134>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d007      	beq.n	80091e2 <TIM_Base_SetConfig+0x9a>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a2a      	ldr	r2, [pc, #168]	@ (8009280 <TIM_Base_SetConfig+0x138>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d003      	beq.n	80091e2 <TIM_Base_SetConfig+0x9a>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a29      	ldr	r2, [pc, #164]	@ (8009284 <TIM_Base_SetConfig+0x13c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d108      	bne.n	80091f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a14      	ldr	r2, [pc, #80]	@ (8009268 <TIM_Base_SetConfig+0x120>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00f      	beq.n	800923a <TIM_Base_SetConfig+0xf2>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a16      	ldr	r2, [pc, #88]	@ (8009278 <TIM_Base_SetConfig+0x130>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00b      	beq.n	800923a <TIM_Base_SetConfig+0xf2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a15      	ldr	r2, [pc, #84]	@ (800927c <TIM_Base_SetConfig+0x134>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d007      	beq.n	800923a <TIM_Base_SetConfig+0xf2>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a14      	ldr	r2, [pc, #80]	@ (8009280 <TIM_Base_SetConfig+0x138>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d003      	beq.n	800923a <TIM_Base_SetConfig+0xf2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a13      	ldr	r2, [pc, #76]	@ (8009284 <TIM_Base_SetConfig+0x13c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d103      	bne.n	8009242 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	691a      	ldr	r2, [r3, #16]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f043 0204 	orr.w	r2, r3, #4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	601a      	str	r2, [r3, #0]
}
 800925a:	bf00      	nop
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40010000 	.word	0x40010000
 800926c:	40000400 	.word	0x40000400
 8009270:	40000800 	.word	0x40000800
 8009274:	40000c00 	.word	0x40000c00
 8009278:	40010400 	.word	0x40010400
 800927c:	40014000 	.word	0x40014000
 8009280:	40014400 	.word	0x40014400
 8009284:	40014800 	.word	0x40014800

08009288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	f023 0201 	bic.w	r2, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	4b37      	ldr	r3, [pc, #220]	@ (8009390 <TIM_OC1_SetConfig+0x108>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0303 	bic.w	r3, r3, #3
 80092be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f023 0302 	bic.w	r3, r3, #2
 80092d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a2d      	ldr	r2, [pc, #180]	@ (8009394 <TIM_OC1_SetConfig+0x10c>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00f      	beq.n	8009304 <TIM_OC1_SetConfig+0x7c>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009398 <TIM_OC1_SetConfig+0x110>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d00b      	beq.n	8009304 <TIM_OC1_SetConfig+0x7c>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a2b      	ldr	r2, [pc, #172]	@ (800939c <TIM_OC1_SetConfig+0x114>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d007      	beq.n	8009304 <TIM_OC1_SetConfig+0x7c>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a2a      	ldr	r2, [pc, #168]	@ (80093a0 <TIM_OC1_SetConfig+0x118>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d003      	beq.n	8009304 <TIM_OC1_SetConfig+0x7c>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a29      	ldr	r2, [pc, #164]	@ (80093a4 <TIM_OC1_SetConfig+0x11c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d10c      	bne.n	800931e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f023 0308 	bic.w	r3, r3, #8
 800930a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	4313      	orrs	r3, r2
 8009314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f023 0304 	bic.w	r3, r3, #4
 800931c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a1c      	ldr	r2, [pc, #112]	@ (8009394 <TIM_OC1_SetConfig+0x10c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d00f      	beq.n	8009346 <TIM_OC1_SetConfig+0xbe>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a1b      	ldr	r2, [pc, #108]	@ (8009398 <TIM_OC1_SetConfig+0x110>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00b      	beq.n	8009346 <TIM_OC1_SetConfig+0xbe>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a1a      	ldr	r2, [pc, #104]	@ (800939c <TIM_OC1_SetConfig+0x114>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d007      	beq.n	8009346 <TIM_OC1_SetConfig+0xbe>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a19      	ldr	r2, [pc, #100]	@ (80093a0 <TIM_OC1_SetConfig+0x118>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d003      	beq.n	8009346 <TIM_OC1_SetConfig+0xbe>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a18      	ldr	r2, [pc, #96]	@ (80093a4 <TIM_OC1_SetConfig+0x11c>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d111      	bne.n	800936a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800934c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	4313      	orrs	r3, r2
 800935e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	621a      	str	r2, [r3, #32]
}
 8009384:	bf00      	nop
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	fffeff8f 	.word	0xfffeff8f
 8009394:	40010000 	.word	0x40010000
 8009398:	40010400 	.word	0x40010400
 800939c:	40014000 	.word	0x40014000
 80093a0:	40014400 	.word	0x40014400
 80093a4:	40014800 	.word	0x40014800

080093a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	f023 0210 	bic.w	r2, r3, #16
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4b34      	ldr	r3, [pc, #208]	@ (80094a4 <TIM_OC2_SetConfig+0xfc>)
 80093d4:	4013      	ands	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f023 0320 	bic.w	r3, r3, #32
 80093f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	011b      	lsls	r3, r3, #4
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a29      	ldr	r2, [pc, #164]	@ (80094a8 <TIM_OC2_SetConfig+0x100>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d003      	beq.n	8009410 <TIM_OC2_SetConfig+0x68>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a28      	ldr	r2, [pc, #160]	@ (80094ac <TIM_OC2_SetConfig+0x104>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d10d      	bne.n	800942c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800942a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a1e      	ldr	r2, [pc, #120]	@ (80094a8 <TIM_OC2_SetConfig+0x100>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d00f      	beq.n	8009454 <TIM_OC2_SetConfig+0xac>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a1d      	ldr	r2, [pc, #116]	@ (80094ac <TIM_OC2_SetConfig+0x104>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00b      	beq.n	8009454 <TIM_OC2_SetConfig+0xac>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a1c      	ldr	r2, [pc, #112]	@ (80094b0 <TIM_OC2_SetConfig+0x108>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d007      	beq.n	8009454 <TIM_OC2_SetConfig+0xac>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a1b      	ldr	r2, [pc, #108]	@ (80094b4 <TIM_OC2_SetConfig+0x10c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d003      	beq.n	8009454 <TIM_OC2_SetConfig+0xac>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a1a      	ldr	r2, [pc, #104]	@ (80094b8 <TIM_OC2_SetConfig+0x110>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d113      	bne.n	800947c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800945a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	4313      	orrs	r3, r2
 800947a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	621a      	str	r2, [r3, #32]
}
 8009496:	bf00      	nop
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	feff8fff 	.word	0xfeff8fff
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40010400 	.word	0x40010400
 80094b0:	40014000 	.word	0x40014000
 80094b4:	40014400 	.word	0x40014400
 80094b8:	40014800 	.word	0x40014800

080094bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4b33      	ldr	r3, [pc, #204]	@ (80095b4 <TIM_OC3_SetConfig+0xf8>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0303 	bic.w	r3, r3, #3
 80094f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	4313      	orrs	r3, r2
 8009510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a28      	ldr	r2, [pc, #160]	@ (80095b8 <TIM_OC3_SetConfig+0xfc>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d003      	beq.n	8009522 <TIM_OC3_SetConfig+0x66>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a27      	ldr	r2, [pc, #156]	@ (80095bc <TIM_OC3_SetConfig+0x100>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d10d      	bne.n	800953e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4313      	orrs	r3, r2
 8009534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800953c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a1d      	ldr	r2, [pc, #116]	@ (80095b8 <TIM_OC3_SetConfig+0xfc>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00f      	beq.n	8009566 <TIM_OC3_SetConfig+0xaa>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a1c      	ldr	r2, [pc, #112]	@ (80095bc <TIM_OC3_SetConfig+0x100>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00b      	beq.n	8009566 <TIM_OC3_SetConfig+0xaa>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a1b      	ldr	r2, [pc, #108]	@ (80095c0 <TIM_OC3_SetConfig+0x104>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d007      	beq.n	8009566 <TIM_OC3_SetConfig+0xaa>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a1a      	ldr	r2, [pc, #104]	@ (80095c4 <TIM_OC3_SetConfig+0x108>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d003      	beq.n	8009566 <TIM_OC3_SetConfig+0xaa>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a19      	ldr	r2, [pc, #100]	@ (80095c8 <TIM_OC3_SetConfig+0x10c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d113      	bne.n	800958e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800956c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	4313      	orrs	r3, r2
 8009580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	621a      	str	r2, [r3, #32]
}
 80095a8:	bf00      	nop
 80095aa:	371c      	adds	r7, #28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	fffeff8f 	.word	0xfffeff8f
 80095b8:	40010000 	.word	0x40010000
 80095bc:	40010400 	.word	0x40010400
 80095c0:	40014000 	.word	0x40014000
 80095c4:	40014400 	.word	0x40014400
 80095c8:	40014800 	.word	0x40014800

080095cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	4b24      	ldr	r3, [pc, #144]	@ (8009688 <TIM_OC4_SetConfig+0xbc>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	031b      	lsls	r3, r3, #12
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a19      	ldr	r2, [pc, #100]	@ (800968c <TIM_OC4_SetConfig+0xc0>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00f      	beq.n	800964c <TIM_OC4_SetConfig+0x80>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a18      	ldr	r2, [pc, #96]	@ (8009690 <TIM_OC4_SetConfig+0xc4>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00b      	beq.n	800964c <TIM_OC4_SetConfig+0x80>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a17      	ldr	r2, [pc, #92]	@ (8009694 <TIM_OC4_SetConfig+0xc8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d007      	beq.n	800964c <TIM_OC4_SetConfig+0x80>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a16      	ldr	r2, [pc, #88]	@ (8009698 <TIM_OC4_SetConfig+0xcc>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d003      	beq.n	800964c <TIM_OC4_SetConfig+0x80>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a15      	ldr	r2, [pc, #84]	@ (800969c <TIM_OC4_SetConfig+0xd0>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d109      	bne.n	8009660 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	019b      	lsls	r3, r3, #6
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	4313      	orrs	r3, r2
 800965e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	621a      	str	r2, [r3, #32]
}
 800967a:	bf00      	nop
 800967c:	371c      	adds	r7, #28
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	feff8fff 	.word	0xfeff8fff
 800968c:	40010000 	.word	0x40010000
 8009690:	40010400 	.word	0x40010400
 8009694:	40014000 	.word	0x40014000
 8009698:	40014400 	.word	0x40014400
 800969c:	40014800 	.word	0x40014800

080096a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4b21      	ldr	r3, [pc, #132]	@ (8009750 <TIM_OC5_SetConfig+0xb0>)
 80096cc:	4013      	ands	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80096e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a18      	ldr	r2, [pc, #96]	@ (8009754 <TIM_OC5_SetConfig+0xb4>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00f      	beq.n	8009716 <TIM_OC5_SetConfig+0x76>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a17      	ldr	r2, [pc, #92]	@ (8009758 <TIM_OC5_SetConfig+0xb8>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d00b      	beq.n	8009716 <TIM_OC5_SetConfig+0x76>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a16      	ldr	r2, [pc, #88]	@ (800975c <TIM_OC5_SetConfig+0xbc>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d007      	beq.n	8009716 <TIM_OC5_SetConfig+0x76>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a15      	ldr	r2, [pc, #84]	@ (8009760 <TIM_OC5_SetConfig+0xc0>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d003      	beq.n	8009716 <TIM_OC5_SetConfig+0x76>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a14      	ldr	r2, [pc, #80]	@ (8009764 <TIM_OC5_SetConfig+0xc4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d109      	bne.n	800972a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800971c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	4313      	orrs	r3, r2
 8009728:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	621a      	str	r2, [r3, #32]
}
 8009744:	bf00      	nop
 8009746:	371c      	adds	r7, #28
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	fffeff8f 	.word	0xfffeff8f
 8009754:	40010000 	.word	0x40010000
 8009758:	40010400 	.word	0x40010400
 800975c:	40014000 	.word	0x40014000
 8009760:	40014400 	.word	0x40014400
 8009764:	40014800 	.word	0x40014800

08009768 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4b22      	ldr	r3, [pc, #136]	@ (800981c <TIM_OC6_SetConfig+0xb4>)
 8009794:	4013      	ands	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	051b      	lsls	r3, r3, #20
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a19      	ldr	r2, [pc, #100]	@ (8009820 <TIM_OC6_SetConfig+0xb8>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00f      	beq.n	80097e0 <TIM_OC6_SetConfig+0x78>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a18      	ldr	r2, [pc, #96]	@ (8009824 <TIM_OC6_SetConfig+0xbc>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d00b      	beq.n	80097e0 <TIM_OC6_SetConfig+0x78>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a17      	ldr	r2, [pc, #92]	@ (8009828 <TIM_OC6_SetConfig+0xc0>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d007      	beq.n	80097e0 <TIM_OC6_SetConfig+0x78>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a16      	ldr	r2, [pc, #88]	@ (800982c <TIM_OC6_SetConfig+0xc4>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d003      	beq.n	80097e0 <TIM_OC6_SetConfig+0x78>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a15      	ldr	r2, [pc, #84]	@ (8009830 <TIM_OC6_SetConfig+0xc8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d109      	bne.n	80097f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	029b      	lsls	r3, r3, #10
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	621a      	str	r2, [r3, #32]
}
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	feff8fff 	.word	0xfeff8fff
 8009820:	40010000 	.word	0x40010000
 8009824:	40010400 	.word	0x40010400
 8009828:	40014000 	.word	0x40014000
 800982c:	40014400 	.word	0x40014400
 8009830:	40014800 	.word	0x40014800

08009834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	2201      	movs	r2, #1
 8009848:	fa02 f303 	lsl.w	r3, r2, r3
 800984c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a1a      	ldr	r2, [r3, #32]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	43db      	mvns	r3, r3
 8009856:	401a      	ands	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a1a      	ldr	r2, [r3, #32]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f003 031f 	and.w	r3, r3, #31
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	fa01 f303 	lsl.w	r3, r1, r3
 800986c:	431a      	orrs	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	621a      	str	r2, [r3, #32]
}
 8009872:	bf00      	nop
 8009874:	371c      	adds	r7, #28
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e042      	b.n	8009916 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7f7 fb3a 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2224      	movs	r2, #36	@ 0x24
 80098ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fe1f 	bl	800a50c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f8b4 	bl	8009a3c <UART_SetConfig>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d101      	bne.n	80098de <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e01b      	b.n	8009916 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0201 	orr.w	r2, r2, #1
 800990c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fe9e 	bl	800a650 <UART_CheckIdleState>
 8009914:	4603      	mov	r3, r0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b08a      	sub	sp, #40	@ 0x28
 8009922:	af02      	add	r7, sp, #8
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	603b      	str	r3, [r7, #0]
 800992a:	4613      	mov	r3, r2
 800992c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009934:	2b20      	cmp	r3, #32
 8009936:	d17b      	bne.n	8009a30 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <HAL_UART_Transmit+0x26>
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e074      	b.n	8009a32 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2221      	movs	r2, #33	@ 0x21
 8009954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009958:	f7fa fa28 	bl	8003dac <HAL_GetTick>
 800995c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	88fa      	ldrh	r2, [r7, #6]
 8009962:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	88fa      	ldrh	r2, [r7, #6]
 800996a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009976:	d108      	bne.n	800998a <HAL_UART_Transmit+0x6c>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d104      	bne.n	800998a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009980:	2300      	movs	r3, #0
 8009982:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	61bb      	str	r3, [r7, #24]
 8009988:	e003      	b.n	8009992 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009992:	e030      	b.n	80099f6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	2200      	movs	r2, #0
 800999c:	2180      	movs	r1, #128	@ 0x80
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 ff00 	bl	800a7a4 <UART_WaitOnFlagUntilTimeout>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d005      	beq.n	80099b6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e03d      	b.n	8009a32 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10b      	bne.n	80099d4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	3302      	adds	r3, #2
 80099d0:	61bb      	str	r3, [r7, #24]
 80099d2:	e007      	b.n	80099e4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	781a      	ldrb	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	3301      	adds	r3, #1
 80099e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1c8      	bne.n	8009994 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2140      	movs	r1, #64	@ 0x40
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 fec9 	bl	800a7a4 <UART_WaitOnFlagUntilTimeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d005      	beq.n	8009a24 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e006      	b.n	8009a32 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2220      	movs	r2, #32
 8009a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	e000      	b.n	8009a32 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009a30:	2302      	movs	r3, #2
  }
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3720      	adds	r7, #32
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a40:	b092      	sub	sp, #72	@ 0x48
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	431a      	orrs	r2, r3
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4bbe      	ldr	r3, [pc, #760]	@ (8009d64 <UART_SetConfig+0x328>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4ab3      	ldr	r2, [pc, #716]	@ (8009d68 <UART_SetConfig+0x32c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d004      	beq.n	8009aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	4baf      	ldr	r3, [pc, #700]	@ (8009d6c <UART_SetConfig+0x330>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	6812      	ldr	r2, [r2, #0]
 8009ab6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	f023 010f 	bic.w	r1, r3, #15
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4aa6      	ldr	r2, [pc, #664]	@ (8009d70 <UART_SetConfig+0x334>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d177      	bne.n	8009bcc <UART_SetConfig+0x190>
 8009adc:	4ba5      	ldr	r3, [pc, #660]	@ (8009d74 <UART_SetConfig+0x338>)
 8009ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ae4:	2b28      	cmp	r3, #40	@ 0x28
 8009ae6:	d86d      	bhi.n	8009bc4 <UART_SetConfig+0x188>
 8009ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <UART_SetConfig+0xb4>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b95 	.word	0x08009b95
 8009af4:	08009bc5 	.word	0x08009bc5
 8009af8:	08009bc5 	.word	0x08009bc5
 8009afc:	08009bc5 	.word	0x08009bc5
 8009b00:	08009bc5 	.word	0x08009bc5
 8009b04:	08009bc5 	.word	0x08009bc5
 8009b08:	08009bc5 	.word	0x08009bc5
 8009b0c:	08009bc5 	.word	0x08009bc5
 8009b10:	08009b9d 	.word	0x08009b9d
 8009b14:	08009bc5 	.word	0x08009bc5
 8009b18:	08009bc5 	.word	0x08009bc5
 8009b1c:	08009bc5 	.word	0x08009bc5
 8009b20:	08009bc5 	.word	0x08009bc5
 8009b24:	08009bc5 	.word	0x08009bc5
 8009b28:	08009bc5 	.word	0x08009bc5
 8009b2c:	08009bc5 	.word	0x08009bc5
 8009b30:	08009ba5 	.word	0x08009ba5
 8009b34:	08009bc5 	.word	0x08009bc5
 8009b38:	08009bc5 	.word	0x08009bc5
 8009b3c:	08009bc5 	.word	0x08009bc5
 8009b40:	08009bc5 	.word	0x08009bc5
 8009b44:	08009bc5 	.word	0x08009bc5
 8009b48:	08009bc5 	.word	0x08009bc5
 8009b4c:	08009bc5 	.word	0x08009bc5
 8009b50:	08009bad 	.word	0x08009bad
 8009b54:	08009bc5 	.word	0x08009bc5
 8009b58:	08009bc5 	.word	0x08009bc5
 8009b5c:	08009bc5 	.word	0x08009bc5
 8009b60:	08009bc5 	.word	0x08009bc5
 8009b64:	08009bc5 	.word	0x08009bc5
 8009b68:	08009bc5 	.word	0x08009bc5
 8009b6c:	08009bc5 	.word	0x08009bc5
 8009b70:	08009bb5 	.word	0x08009bb5
 8009b74:	08009bc5 	.word	0x08009bc5
 8009b78:	08009bc5 	.word	0x08009bc5
 8009b7c:	08009bc5 	.word	0x08009bc5
 8009b80:	08009bc5 	.word	0x08009bc5
 8009b84:	08009bc5 	.word	0x08009bc5
 8009b88:	08009bc5 	.word	0x08009bc5
 8009b8c:	08009bc5 	.word	0x08009bc5
 8009b90:	08009bbd 	.word	0x08009bbd
 8009b94:	2301      	movs	r3, #1
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e222      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba2:	e21e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ba4:	2308      	movs	r3, #8
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e21a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bac:	2310      	movs	r3, #16
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e216      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bb4:	2320      	movs	r3, #32
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bba:	e212      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bbc:	2340      	movs	r3, #64	@ 0x40
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e20e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bc4:	2380      	movs	r3, #128	@ 0x80
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e20a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a69      	ldr	r2, [pc, #420]	@ (8009d78 <UART_SetConfig+0x33c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d130      	bne.n	8009c38 <UART_SetConfig+0x1fc>
 8009bd6:	4b67      	ldr	r3, [pc, #412]	@ (8009d74 <UART_SetConfig+0x338>)
 8009bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bda:	f003 0307 	and.w	r3, r3, #7
 8009bde:	2b05      	cmp	r3, #5
 8009be0:	d826      	bhi.n	8009c30 <UART_SetConfig+0x1f4>
 8009be2:	a201      	add	r2, pc, #4	@ (adr r2, 8009be8 <UART_SetConfig+0x1ac>)
 8009be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be8:	08009c01 	.word	0x08009c01
 8009bec:	08009c09 	.word	0x08009c09
 8009bf0:	08009c11 	.word	0x08009c11
 8009bf4:	08009c19 	.word	0x08009c19
 8009bf8:	08009c21 	.word	0x08009c21
 8009bfc:	08009c29 	.word	0x08009c29
 8009c00:	2300      	movs	r3, #0
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c06:	e1ec      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c08:	2304      	movs	r3, #4
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0e:	e1e8      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c10:	2308      	movs	r3, #8
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c16:	e1e4      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c18:	2310      	movs	r3, #16
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1e:	e1e0      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c20:	2320      	movs	r3, #32
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c26:	e1dc      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c28:	2340      	movs	r3, #64	@ 0x40
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2e:	e1d8      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c30:	2380      	movs	r3, #128	@ 0x80
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c36:	e1d4      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8009d7c <UART_SetConfig+0x340>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d130      	bne.n	8009ca4 <UART_SetConfig+0x268>
 8009c42:	4b4c      	ldr	r3, [pc, #304]	@ (8009d74 <UART_SetConfig+0x338>)
 8009c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	2b05      	cmp	r3, #5
 8009c4c:	d826      	bhi.n	8009c9c <UART_SetConfig+0x260>
 8009c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c54 <UART_SetConfig+0x218>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c6d 	.word	0x08009c6d
 8009c58:	08009c75 	.word	0x08009c75
 8009c5c:	08009c7d 	.word	0x08009c7d
 8009c60:	08009c85 	.word	0x08009c85
 8009c64:	08009c8d 	.word	0x08009c8d
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e1b6      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c74:	2304      	movs	r3, #4
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7a:	e1b2      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c82:	e1ae      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c84:	2310      	movs	r3, #16
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8a:	e1aa      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c92:	e1a6      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c94:	2340      	movs	r3, #64	@ 0x40
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9a:	e1a2      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c9c:	2380      	movs	r3, #128	@ 0x80
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca2:	e19e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a35      	ldr	r2, [pc, #212]	@ (8009d80 <UART_SetConfig+0x344>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d130      	bne.n	8009d10 <UART_SetConfig+0x2d4>
 8009cae:	4b31      	ldr	r3, [pc, #196]	@ (8009d74 <UART_SetConfig+0x338>)
 8009cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cb2:	f003 0307 	and.w	r3, r3, #7
 8009cb6:	2b05      	cmp	r3, #5
 8009cb8:	d826      	bhi.n	8009d08 <UART_SetConfig+0x2cc>
 8009cba:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc0 <UART_SetConfig+0x284>)
 8009cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc0:	08009cd9 	.word	0x08009cd9
 8009cc4:	08009ce1 	.word	0x08009ce1
 8009cc8:	08009ce9 	.word	0x08009ce9
 8009ccc:	08009cf1 	.word	0x08009cf1
 8009cd0:	08009cf9 	.word	0x08009cf9
 8009cd4:	08009d01 	.word	0x08009d01
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e180      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e17c      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ce8:	2308      	movs	r3, #8
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e178      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009cf0:	2310      	movs	r3, #16
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf6:	e174      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	e170      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d00:	2340      	movs	r3, #64	@ 0x40
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d06:	e16c      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d08:	2380      	movs	r3, #128	@ 0x80
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0e:	e168      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a1b      	ldr	r2, [pc, #108]	@ (8009d84 <UART_SetConfig+0x348>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d142      	bne.n	8009da0 <UART_SetConfig+0x364>
 8009d1a:	4b16      	ldr	r3, [pc, #88]	@ (8009d74 <UART_SetConfig+0x338>)
 8009d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d1e:	f003 0307 	and.w	r3, r3, #7
 8009d22:	2b05      	cmp	r3, #5
 8009d24:	d838      	bhi.n	8009d98 <UART_SetConfig+0x35c>
 8009d26:	a201      	add	r2, pc, #4	@ (adr r2, 8009d2c <UART_SetConfig+0x2f0>)
 8009d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2c:	08009d45 	.word	0x08009d45
 8009d30:	08009d4d 	.word	0x08009d4d
 8009d34:	08009d55 	.word	0x08009d55
 8009d38:	08009d5d 	.word	0x08009d5d
 8009d3c:	08009d89 	.word	0x08009d89
 8009d40:	08009d91 	.word	0x08009d91
 8009d44:	2300      	movs	r3, #0
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e14a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e146      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d54:	2308      	movs	r3, #8
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e142      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e13e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d64:	cfff69f3 	.word	0xcfff69f3
 8009d68:	58000c00 	.word	0x58000c00
 8009d6c:	11fff4ff 	.word	0x11fff4ff
 8009d70:	40011000 	.word	0x40011000
 8009d74:	58024400 	.word	0x58024400
 8009d78:	40004400 	.word	0x40004400
 8009d7c:	40004800 	.word	0x40004800
 8009d80:	40004c00 	.word	0x40004c00
 8009d84:	40005000 	.word	0x40005000
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e128      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d90:	2340      	movs	r3, #64	@ 0x40
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e124      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d98:	2380      	movs	r3, #128	@ 0x80
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e120      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4acb      	ldr	r2, [pc, #812]	@ (800a0d4 <UART_SetConfig+0x698>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d176      	bne.n	8009e98 <UART_SetConfig+0x45c>
 8009daa:	4bcb      	ldr	r3, [pc, #812]	@ (800a0d8 <UART_SetConfig+0x69c>)
 8009dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009db2:	2b28      	cmp	r3, #40	@ 0x28
 8009db4:	d86c      	bhi.n	8009e90 <UART_SetConfig+0x454>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <UART_SetConfig+0x380>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009e61 	.word	0x08009e61
 8009dc0:	08009e91 	.word	0x08009e91
 8009dc4:	08009e91 	.word	0x08009e91
 8009dc8:	08009e91 	.word	0x08009e91
 8009dcc:	08009e91 	.word	0x08009e91
 8009dd0:	08009e91 	.word	0x08009e91
 8009dd4:	08009e91 	.word	0x08009e91
 8009dd8:	08009e91 	.word	0x08009e91
 8009ddc:	08009e69 	.word	0x08009e69
 8009de0:	08009e91 	.word	0x08009e91
 8009de4:	08009e91 	.word	0x08009e91
 8009de8:	08009e91 	.word	0x08009e91
 8009dec:	08009e91 	.word	0x08009e91
 8009df0:	08009e91 	.word	0x08009e91
 8009df4:	08009e91 	.word	0x08009e91
 8009df8:	08009e91 	.word	0x08009e91
 8009dfc:	08009e71 	.word	0x08009e71
 8009e00:	08009e91 	.word	0x08009e91
 8009e04:	08009e91 	.word	0x08009e91
 8009e08:	08009e91 	.word	0x08009e91
 8009e0c:	08009e91 	.word	0x08009e91
 8009e10:	08009e91 	.word	0x08009e91
 8009e14:	08009e91 	.word	0x08009e91
 8009e18:	08009e91 	.word	0x08009e91
 8009e1c:	08009e79 	.word	0x08009e79
 8009e20:	08009e91 	.word	0x08009e91
 8009e24:	08009e91 	.word	0x08009e91
 8009e28:	08009e91 	.word	0x08009e91
 8009e2c:	08009e91 	.word	0x08009e91
 8009e30:	08009e91 	.word	0x08009e91
 8009e34:	08009e91 	.word	0x08009e91
 8009e38:	08009e91 	.word	0x08009e91
 8009e3c:	08009e81 	.word	0x08009e81
 8009e40:	08009e91 	.word	0x08009e91
 8009e44:	08009e91 	.word	0x08009e91
 8009e48:	08009e91 	.word	0x08009e91
 8009e4c:	08009e91 	.word	0x08009e91
 8009e50:	08009e91 	.word	0x08009e91
 8009e54:	08009e91 	.word	0x08009e91
 8009e58:	08009e91 	.word	0x08009e91
 8009e5c:	08009e89 	.word	0x08009e89
 8009e60:	2301      	movs	r3, #1
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e0bc      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e68:	2304      	movs	r3, #4
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6e:	e0b8      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e70:	2308      	movs	r3, #8
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e76:	e0b4      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e78:	2310      	movs	r3, #16
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	e0b0      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e80:	2320      	movs	r3, #32
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e86:	e0ac      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e88:	2340      	movs	r3, #64	@ 0x40
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	e0a8      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e90:	2380      	movs	r3, #128	@ 0x80
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e96:	e0a4      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a8f      	ldr	r2, [pc, #572]	@ (800a0dc <UART_SetConfig+0x6a0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d130      	bne.n	8009f04 <UART_SetConfig+0x4c8>
 8009ea2:	4b8d      	ldr	r3, [pc, #564]	@ (800a0d8 <UART_SetConfig+0x69c>)
 8009ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea6:	f003 0307 	and.w	r3, r3, #7
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	d826      	bhi.n	8009efc <UART_SetConfig+0x4c0>
 8009eae:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb4 <UART_SetConfig+0x478>)
 8009eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb4:	08009ecd 	.word	0x08009ecd
 8009eb8:	08009ed5 	.word	0x08009ed5
 8009ebc:	08009edd 	.word	0x08009edd
 8009ec0:	08009ee5 	.word	0x08009ee5
 8009ec4:	08009eed 	.word	0x08009eed
 8009ec8:	08009ef5 	.word	0x08009ef5
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed2:	e086      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eda:	e082      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009edc:	2308      	movs	r3, #8
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee2:	e07e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eea:	e07a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009eec:	2320      	movs	r3, #32
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef2:	e076      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ef4:	2340      	movs	r3, #64	@ 0x40
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efa:	e072      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009efc:	2380      	movs	r3, #128	@ 0x80
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f02:	e06e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a75      	ldr	r2, [pc, #468]	@ (800a0e0 <UART_SetConfig+0x6a4>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d130      	bne.n	8009f70 <UART_SetConfig+0x534>
 8009f0e:	4b72      	ldr	r3, [pc, #456]	@ (800a0d8 <UART_SetConfig+0x69c>)
 8009f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f12:	f003 0307 	and.w	r3, r3, #7
 8009f16:	2b05      	cmp	r3, #5
 8009f18:	d826      	bhi.n	8009f68 <UART_SetConfig+0x52c>
 8009f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f20 <UART_SetConfig+0x4e4>)
 8009f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f20:	08009f39 	.word	0x08009f39
 8009f24:	08009f41 	.word	0x08009f41
 8009f28:	08009f49 	.word	0x08009f49
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f59 	.word	0x08009f59
 8009f34:	08009f61 	.word	0x08009f61
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e050      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f40:	2304      	movs	r3, #4
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f46:	e04c      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f48:	2308      	movs	r3, #8
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4e:	e048      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f50:	2310      	movs	r3, #16
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f56:	e044      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5e:	e040      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f60:	2340      	movs	r3, #64	@ 0x40
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f66:	e03c      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f68:	2380      	movs	r3, #128	@ 0x80
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6e:	e038      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a5b      	ldr	r2, [pc, #364]	@ (800a0e4 <UART_SetConfig+0x6a8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d130      	bne.n	8009fdc <UART_SetConfig+0x5a0>
 8009f7a:	4b57      	ldr	r3, [pc, #348]	@ (800a0d8 <UART_SetConfig+0x69c>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	d826      	bhi.n	8009fd4 <UART_SetConfig+0x598>
 8009f86:	a201      	add	r2, pc, #4	@ (adr r2, 8009f8c <UART_SetConfig+0x550>)
 8009f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8c:	08009fa5 	.word	0x08009fa5
 8009f90:	08009fad 	.word	0x08009fad
 8009f94:	08009fb5 	.word	0x08009fb5
 8009f98:	08009fbd 	.word	0x08009fbd
 8009f9c:	08009fc5 	.word	0x08009fc5
 8009fa0:	08009fcd 	.word	0x08009fcd
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e01a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fac:	2304      	movs	r3, #4
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb2:	e016      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fb4:	2308      	movs	r3, #8
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fba:	e012      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fbc:	2310      	movs	r3, #16
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc2:	e00e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fc4:	2320      	movs	r3, #32
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fca:	e00a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fcc:	2340      	movs	r3, #64	@ 0x40
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd2:	e006      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fd4:	2380      	movs	r3, #128	@ 0x80
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fda:	e002      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fdc:	2380      	movs	r3, #128	@ 0x80
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a3f      	ldr	r2, [pc, #252]	@ (800a0e4 <UART_SetConfig+0x6a8>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	f040 80f8 	bne.w	800a1de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	dc46      	bgt.n	800a084 <UART_SetConfig+0x648>
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	f2c0 8082 	blt.w	800a100 <UART_SetConfig+0x6c4>
 8009ffc:	3b02      	subs	r3, #2
 8009ffe:	2b1e      	cmp	r3, #30
 800a000:	d87e      	bhi.n	800a100 <UART_SetConfig+0x6c4>
 800a002:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <UART_SetConfig+0x5cc>)
 800a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a008:	0800a08b 	.word	0x0800a08b
 800a00c:	0800a101 	.word	0x0800a101
 800a010:	0800a093 	.word	0x0800a093
 800a014:	0800a101 	.word	0x0800a101
 800a018:	0800a101 	.word	0x0800a101
 800a01c:	0800a101 	.word	0x0800a101
 800a020:	0800a0a3 	.word	0x0800a0a3
 800a024:	0800a101 	.word	0x0800a101
 800a028:	0800a101 	.word	0x0800a101
 800a02c:	0800a101 	.word	0x0800a101
 800a030:	0800a101 	.word	0x0800a101
 800a034:	0800a101 	.word	0x0800a101
 800a038:	0800a101 	.word	0x0800a101
 800a03c:	0800a101 	.word	0x0800a101
 800a040:	0800a0b3 	.word	0x0800a0b3
 800a044:	0800a101 	.word	0x0800a101
 800a048:	0800a101 	.word	0x0800a101
 800a04c:	0800a101 	.word	0x0800a101
 800a050:	0800a101 	.word	0x0800a101
 800a054:	0800a101 	.word	0x0800a101
 800a058:	0800a101 	.word	0x0800a101
 800a05c:	0800a101 	.word	0x0800a101
 800a060:	0800a101 	.word	0x0800a101
 800a064:	0800a101 	.word	0x0800a101
 800a068:	0800a101 	.word	0x0800a101
 800a06c:	0800a101 	.word	0x0800a101
 800a070:	0800a101 	.word	0x0800a101
 800a074:	0800a101 	.word	0x0800a101
 800a078:	0800a101 	.word	0x0800a101
 800a07c:	0800a101 	.word	0x0800a101
 800a080:	0800a0f3 	.word	0x0800a0f3
 800a084:	2b40      	cmp	r3, #64	@ 0x40
 800a086:	d037      	beq.n	800a0f8 <UART_SetConfig+0x6bc>
 800a088:	e03a      	b.n	800a100 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a08a:	f7fe f819 	bl	80080c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a08e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a090:	e03c      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe f828 	bl	80080ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a0:	e034      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0a2:	f107 0318 	add.w	r3, r7, #24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe f974 	bl	8008394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b0:	e02c      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0b2:	4b09      	ldr	r3, [pc, #36]	@ (800a0d8 <UART_SetConfig+0x69c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0320 	and.w	r3, r3, #32
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d016      	beq.n	800a0ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0be:	4b06      	ldr	r3, [pc, #24]	@ (800a0d8 <UART_SetConfig+0x69c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	08db      	lsrs	r3, r3, #3
 800a0c4:	f003 0303 	and.w	r3, r3, #3
 800a0c8:	4a07      	ldr	r2, [pc, #28]	@ (800a0e8 <UART_SetConfig+0x6ac>)
 800a0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0d0:	e01c      	b.n	800a10c <UART_SetConfig+0x6d0>
 800a0d2:	bf00      	nop
 800a0d4:	40011400 	.word	0x40011400
 800a0d8:	58024400 	.word	0x58024400
 800a0dc:	40007800 	.word	0x40007800
 800a0e0:	40007c00 	.word	0x40007c00
 800a0e4:	58000c00 	.word	0x58000c00
 800a0e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a0ec:	4b9d      	ldr	r3, [pc, #628]	@ (800a364 <UART_SetConfig+0x928>)
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f0:	e00c      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0f2:	4b9d      	ldr	r3, [pc, #628]	@ (800a368 <UART_SetConfig+0x92c>)
 800a0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f6:	e009      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0fe:	e005      	b.n	800a10c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a10a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 81de 	beq.w	800a4d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a118:	4a94      	ldr	r2, [pc, #592]	@ (800a36c <UART_SetConfig+0x930>)
 800a11a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11e:	461a      	mov	r2, r3
 800a120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a122:	fbb3 f3f2 	udiv	r3, r3, r2
 800a126:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	4613      	mov	r3, r2
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	4413      	add	r3, r2
 800a132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a134:	429a      	cmp	r2, r3
 800a136:	d305      	bcc.n	800a144 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a13e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a140:	429a      	cmp	r2, r3
 800a142:	d903      	bls.n	800a14c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a14a:	e1c1      	b.n	800a4d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14e:	2200      	movs	r2, #0
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	60fa      	str	r2, [r7, #12]
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a158:	4a84      	ldr	r2, [pc, #528]	@ (800a36c <UART_SetConfig+0x930>)
 800a15a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	2200      	movs	r2, #0
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	607a      	str	r2, [r7, #4]
 800a166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a16a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a16e:	f7f6 f907 	bl	8000380 <__aeabi_uldivmod>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4610      	mov	r0, r2
 800a178:	4619      	mov	r1, r3
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	020b      	lsls	r3, r1, #8
 800a184:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a188:	0202      	lsls	r2, r0, #8
 800a18a:	6979      	ldr	r1, [r7, #20]
 800a18c:	6849      	ldr	r1, [r1, #4]
 800a18e:	0849      	lsrs	r1, r1, #1
 800a190:	2000      	movs	r0, #0
 800a192:	460c      	mov	r4, r1
 800a194:	4605      	mov	r5, r0
 800a196:	eb12 0804 	adds.w	r8, r2, r4
 800a19a:	eb43 0905 	adc.w	r9, r3, r5
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	469a      	mov	sl, r3
 800a1a6:	4693      	mov	fp, r2
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7f6 f8e6 	bl	8000380 <__aeabi_uldivmod>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1c2:	d308      	bcc.n	800a1d6 <UART_SetConfig+0x79a>
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1ca:	d204      	bcs.n	800a1d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1d2:	60da      	str	r2, [r3, #12]
 800a1d4:	e17c      	b.n	800a4d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1dc:	e178      	b.n	800a4d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1e6:	f040 80c5 	bne.w	800a374 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a1ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	2b20      	cmp	r3, #32
 800a1f0:	dc48      	bgt.n	800a284 <UART_SetConfig+0x848>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	db7b      	blt.n	800a2ee <UART_SetConfig+0x8b2>
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	d879      	bhi.n	800a2ee <UART_SetConfig+0x8b2>
 800a1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a200 <UART_SetConfig+0x7c4>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a28b 	.word	0x0800a28b
 800a204:	0800a293 	.word	0x0800a293
 800a208:	0800a2ef 	.word	0x0800a2ef
 800a20c:	0800a2ef 	.word	0x0800a2ef
 800a210:	0800a29b 	.word	0x0800a29b
 800a214:	0800a2ef 	.word	0x0800a2ef
 800a218:	0800a2ef 	.word	0x0800a2ef
 800a21c:	0800a2ef 	.word	0x0800a2ef
 800a220:	0800a2ab 	.word	0x0800a2ab
 800a224:	0800a2ef 	.word	0x0800a2ef
 800a228:	0800a2ef 	.word	0x0800a2ef
 800a22c:	0800a2ef 	.word	0x0800a2ef
 800a230:	0800a2ef 	.word	0x0800a2ef
 800a234:	0800a2ef 	.word	0x0800a2ef
 800a238:	0800a2ef 	.word	0x0800a2ef
 800a23c:	0800a2ef 	.word	0x0800a2ef
 800a240:	0800a2bb 	.word	0x0800a2bb
 800a244:	0800a2ef 	.word	0x0800a2ef
 800a248:	0800a2ef 	.word	0x0800a2ef
 800a24c:	0800a2ef 	.word	0x0800a2ef
 800a250:	0800a2ef 	.word	0x0800a2ef
 800a254:	0800a2ef 	.word	0x0800a2ef
 800a258:	0800a2ef 	.word	0x0800a2ef
 800a25c:	0800a2ef 	.word	0x0800a2ef
 800a260:	0800a2ef 	.word	0x0800a2ef
 800a264:	0800a2ef 	.word	0x0800a2ef
 800a268:	0800a2ef 	.word	0x0800a2ef
 800a26c:	0800a2ef 	.word	0x0800a2ef
 800a270:	0800a2ef 	.word	0x0800a2ef
 800a274:	0800a2ef 	.word	0x0800a2ef
 800a278:	0800a2ef 	.word	0x0800a2ef
 800a27c:	0800a2ef 	.word	0x0800a2ef
 800a280:	0800a2e1 	.word	0x0800a2e1
 800a284:	2b40      	cmp	r3, #64	@ 0x40
 800a286:	d02e      	beq.n	800a2e6 <UART_SetConfig+0x8aa>
 800a288:	e031      	b.n	800a2ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a28a:	f7fc fce3 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 800a28e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a290:	e033      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a292:	f7fc fcf5 	bl	8006c80 <HAL_RCC_GetPCLK2Freq>
 800a296:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a298:	e02f      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a29a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fd ff24 	bl	80080ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a8:	e027      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2aa:	f107 0318 	add.w	r3, r7, #24
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe f870 	bl	8008394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b8:	e01f      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a370 <UART_SetConfig+0x934>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0320 	and.w	r3, r3, #32
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a370 <UART_SetConfig+0x934>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	08db      	lsrs	r3, r3, #3
 800a2cc:	f003 0303 	and.w	r3, r3, #3
 800a2d0:	4a24      	ldr	r2, [pc, #144]	@ (800a364 <UART_SetConfig+0x928>)
 800a2d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2d8:	e00f      	b.n	800a2fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a2da:	4b22      	ldr	r3, [pc, #136]	@ (800a364 <UART_SetConfig+0x928>)
 800a2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2de:	e00c      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2e0:	4b21      	ldr	r3, [pc, #132]	@ (800a368 <UART_SetConfig+0x92c>)
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e4:	e009      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ec:	e005      	b.n	800a2fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 80e7 	beq.w	800a4d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a306:	4a19      	ldr	r2, [pc, #100]	@ (800a36c <UART_SetConfig+0x930>)
 800a308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a30c:	461a      	mov	r2, r3
 800a30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a310:	fbb3 f3f2 	udiv	r3, r3, r2
 800a314:	005a      	lsls	r2, r3, #1
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	085b      	lsrs	r3, r3, #1
 800a31c:	441a      	add	r2, r3
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	fbb2 f3f3 	udiv	r3, r2, r3
 800a326:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32a:	2b0f      	cmp	r3, #15
 800a32c:	d916      	bls.n	800a35c <UART_SetConfig+0x920>
 800a32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a334:	d212      	bcs.n	800a35c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a338:	b29b      	uxth	r3, r3
 800a33a:	f023 030f 	bic.w	r3, r3, #15
 800a33e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a342:	085b      	lsrs	r3, r3, #1
 800a344:	b29b      	uxth	r3, r3
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a34e:	4313      	orrs	r3, r2
 800a350:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a358:	60da      	str	r2, [r3, #12]
 800a35a:	e0b9      	b.n	800a4d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a362:	e0b5      	b.n	800a4d0 <UART_SetConfig+0xa94>
 800a364:	03d09000 	.word	0x03d09000
 800a368:	003d0900 	.word	0x003d0900
 800a36c:	0800c828 	.word	0x0800c828
 800a370:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a374:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a378:	2b20      	cmp	r3, #32
 800a37a:	dc49      	bgt.n	800a410 <UART_SetConfig+0x9d4>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	db7c      	blt.n	800a47a <UART_SetConfig+0xa3e>
 800a380:	2b20      	cmp	r3, #32
 800a382:	d87a      	bhi.n	800a47a <UART_SetConfig+0xa3e>
 800a384:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <UART_SetConfig+0x950>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a417 	.word	0x0800a417
 800a390:	0800a41f 	.word	0x0800a41f
 800a394:	0800a47b 	.word	0x0800a47b
 800a398:	0800a47b 	.word	0x0800a47b
 800a39c:	0800a427 	.word	0x0800a427
 800a3a0:	0800a47b 	.word	0x0800a47b
 800a3a4:	0800a47b 	.word	0x0800a47b
 800a3a8:	0800a47b 	.word	0x0800a47b
 800a3ac:	0800a437 	.word	0x0800a437
 800a3b0:	0800a47b 	.word	0x0800a47b
 800a3b4:	0800a47b 	.word	0x0800a47b
 800a3b8:	0800a47b 	.word	0x0800a47b
 800a3bc:	0800a47b 	.word	0x0800a47b
 800a3c0:	0800a47b 	.word	0x0800a47b
 800a3c4:	0800a47b 	.word	0x0800a47b
 800a3c8:	0800a47b 	.word	0x0800a47b
 800a3cc:	0800a447 	.word	0x0800a447
 800a3d0:	0800a47b 	.word	0x0800a47b
 800a3d4:	0800a47b 	.word	0x0800a47b
 800a3d8:	0800a47b 	.word	0x0800a47b
 800a3dc:	0800a47b 	.word	0x0800a47b
 800a3e0:	0800a47b 	.word	0x0800a47b
 800a3e4:	0800a47b 	.word	0x0800a47b
 800a3e8:	0800a47b 	.word	0x0800a47b
 800a3ec:	0800a47b 	.word	0x0800a47b
 800a3f0:	0800a47b 	.word	0x0800a47b
 800a3f4:	0800a47b 	.word	0x0800a47b
 800a3f8:	0800a47b 	.word	0x0800a47b
 800a3fc:	0800a47b 	.word	0x0800a47b
 800a400:	0800a47b 	.word	0x0800a47b
 800a404:	0800a47b 	.word	0x0800a47b
 800a408:	0800a47b 	.word	0x0800a47b
 800a40c:	0800a46d 	.word	0x0800a46d
 800a410:	2b40      	cmp	r3, #64	@ 0x40
 800a412:	d02e      	beq.n	800a472 <UART_SetConfig+0xa36>
 800a414:	e031      	b.n	800a47a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a416:	f7fc fc1d 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 800a41a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a41c:	e033      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a41e:	f7fc fc2f 	bl	8006c80 <HAL_RCC_GetPCLK2Freq>
 800a422:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a424:	e02f      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fd fe5e 	bl	80080ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a434:	e027      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a436:	f107 0318 	add.w	r3, r7, #24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fd ffaa 	bl	8008394 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a444:	e01f      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a446:	4b2d      	ldr	r3, [pc, #180]	@ (800a4fc <UART_SetConfig+0xac0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d009      	beq.n	800a466 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a452:	4b2a      	ldr	r3, [pc, #168]	@ (800a4fc <UART_SetConfig+0xac0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	08db      	lsrs	r3, r3, #3
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	4a28      	ldr	r2, [pc, #160]	@ (800a500 <UART_SetConfig+0xac4>)
 800a45e:	fa22 f303 	lsr.w	r3, r2, r3
 800a462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a464:	e00f      	b.n	800a486 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a466:	4b26      	ldr	r3, [pc, #152]	@ (800a500 <UART_SetConfig+0xac4>)
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46a:	e00c      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a46c:	4b25      	ldr	r3, [pc, #148]	@ (800a504 <UART_SetConfig+0xac8>)
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e009      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a478:	e005      	b.n	800a486 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a484:	bf00      	nop
    }

    if (pclk != 0U)
 800a486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d021      	beq.n	800a4d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a490:	4a1d      	ldr	r2, [pc, #116]	@ (800a508 <UART_SetConfig+0xacc>)
 800a492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a496:	461a      	mov	r2, r3
 800a498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a49a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	441a      	add	r2, r3
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b2:	2b0f      	cmp	r3, #15
 800a4b4:	d909      	bls.n	800a4ca <UART_SetConfig+0xa8e>
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4bc:	d205      	bcs.n	800a4ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60da      	str	r2, [r3, #12]
 800a4c8:	e002      	b.n	800a4d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a4ec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3748      	adds	r7, #72	@ 0x48
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4fa:	bf00      	nop
 800a4fc:	58024400 	.word	0x58024400
 800a500:	03d09000 	.word	0x03d09000
 800a504:	003d0900 	.word	0x003d0900
 800a508:	0800c828 	.word	0x0800c828

0800a50c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01a      	beq.n	800a622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a60a:	d10a      	bne.n	800a622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00a      	beq.n	800a644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	605a      	str	r2, [r3, #4]
  }
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b098      	sub	sp, #96	@ 0x60
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a660:	f7f9 fba4 	bl	8003dac <HAL_GetTick>
 800a664:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0308 	and.w	r3, r3, #8
 800a670:	2b08      	cmp	r3, #8
 800a672:	d12f      	bne.n	800a6d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a67c:	2200      	movs	r2, #0
 800a67e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f88e 	bl	800a7a4 <UART_WaitOnFlagUntilTimeout>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d022      	beq.n	800a6d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	e853 3f00 	ldrex	r3, [r3]
 800a69a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e6      	bne.n	800a68e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e063      	b.n	800a79c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d149      	bne.n	800a776 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f857 	bl	800a7a4 <UART_WaitOnFlagUntilTimeout>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d03c      	beq.n	800a776 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	623b      	str	r3, [r7, #32]
   return(result);
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a71a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a71c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e6      	bne.n	800a6fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3308      	adds	r3, #8
 800a734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f023 0301 	bic.w	r3, r3, #1
 800a744:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3308      	adds	r3, #8
 800a74c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a74e:	61fa      	str	r2, [r7, #28]
 800a750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a752:	69b9      	ldr	r1, [r7, #24]
 800a754:	69fa      	ldr	r2, [r7, #28]
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	617b      	str	r3, [r7, #20]
   return(result);
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e5      	bne.n	800a72e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2220      	movs	r2, #32
 800a766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e012      	b.n	800a79c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2220      	movs	r2, #32
 800a77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3758      	adds	r7, #88	@ 0x58
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b4:	e04f      	b.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7bc:	d04b      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7be:	f7f9 faf5 	bl	8003dac <HAL_GetTick>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d302      	bcc.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e04e      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d037      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b80      	cmp	r3, #128	@ 0x80
 800a7ea:	d034      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2b40      	cmp	r3, #64	@ 0x40
 800a7f0:	d031      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	f003 0308 	and.w	r3, r3, #8
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d110      	bne.n	800a822 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2208      	movs	r2, #8
 800a806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f839 	bl	800a880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2208      	movs	r2, #8
 800a812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e029      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a82c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a830:	d111      	bne.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a83a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 f81f 	bl	800a880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2220      	movs	r2, #32
 800a846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e00f      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69da      	ldr	r2, [r3, #28]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4013      	ands	r3, r2
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	429a      	cmp	r2, r3
 800a864:	bf0c      	ite	eq
 800a866:	2301      	moveq	r3, #1
 800a868:	2300      	movne	r3, #0
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	461a      	mov	r2, r3
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	429a      	cmp	r2, r3
 800a872:	d0a0      	beq.n	800a7b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a880:	b480      	push	{r7}
 800a882:	b095      	sub	sp, #84	@ 0x54
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a89c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e6      	bne.n	800a888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3308      	adds	r3, #8
 800a8c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a948 <UART_EndRxTransfer+0xc8>)
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e5      	bne.n	800a8ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d118      	bne.n	800a928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	e853 3f00 	ldrex	r3, [r3]
 800a902:	60bb      	str	r3, [r7, #8]
   return(result);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f023 0310 	bic.w	r3, r3, #16
 800a90a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	461a      	mov	r2, r3
 800a912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6979      	ldr	r1, [r7, #20]
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	613b      	str	r3, [r7, #16]
   return(result);
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e6      	bne.n	800a8f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a93c:	bf00      	nop
 800a93e:	3754      	adds	r7, #84	@ 0x54
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	effffffe 	.word	0xeffffffe

0800a94c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d101      	bne.n	800a962 <HAL_UARTEx_DisableFifoMode+0x16>
 800a95e:	2302      	movs	r3, #2
 800a960:	e027      	b.n	800a9b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2224      	movs	r2, #36	@ 0x24
 800a96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f022 0201 	bic.w	r2, r2, #1
 800a988:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a990:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e02d      	b.n	800aa32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2224      	movs	r2, #36	@ 0x24
 800a9e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0201 	bic.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f850 	bl	800aab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2220      	movs	r2, #32
 800aa24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d101      	bne.n	800aa52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e02d      	b.n	800aaae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2224      	movs	r2, #36	@ 0x24
 800aa5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0201 	bic.w	r2, r2, #1
 800aa78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f812 	bl	800aab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d108      	bne.n	800aada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aad8:	e031      	b.n	800ab3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aada:	2310      	movs	r3, #16
 800aadc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aade:	2310      	movs	r3, #16
 800aae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	0e5b      	lsrs	r3, r3, #25
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 0307 	and.w	r3, r3, #7
 800aaf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	0f5b      	lsrs	r3, r3, #29
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	f003 0307 	and.w	r3, r3, #7
 800ab00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	7b3a      	ldrb	r2, [r7, #12]
 800ab06:	4911      	ldr	r1, [pc, #68]	@ (800ab4c <UARTEx_SetNbDataToProcess+0x94>)
 800ab08:	5c8a      	ldrb	r2, [r1, r2]
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab0e:	7b3a      	ldrb	r2, [r7, #12]
 800ab10:	490f      	ldr	r1, [pc, #60]	@ (800ab50 <UARTEx_SetNbDataToProcess+0x98>)
 800ab12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
 800ab22:	7b7a      	ldrb	r2, [r7, #13]
 800ab24:	4909      	ldr	r1, [pc, #36]	@ (800ab4c <UARTEx_SetNbDataToProcess+0x94>)
 800ab26:	5c8a      	ldrb	r2, [r1, r2]
 800ab28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab2c:	7b7a      	ldrb	r2, [r7, #13]
 800ab2e:	4908      	ldr	r1, [pc, #32]	@ (800ab50 <UARTEx_SetNbDataToProcess+0x98>)
 800ab30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	0800c840 	.word	0x0800c840
 800ab50:	0800c848 	.word	0x0800c848

0800ab54 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d121      	bne.n	800abaa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	4b27      	ldr	r3, [pc, #156]	@ (800ac08 <FMC_SDRAM_Init+0xb4>)
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	6851      	ldr	r1, [r2, #4]
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	6892      	ldr	r2, [r2, #8]
 800ab76:	4311      	orrs	r1, r2
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	68d2      	ldr	r2, [r2, #12]
 800ab7c:	4311      	orrs	r1, r2
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	6912      	ldr	r2, [r2, #16]
 800ab82:	4311      	orrs	r1, r2
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	6952      	ldr	r2, [r2, #20]
 800ab88:	4311      	orrs	r1, r2
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	6992      	ldr	r2, [r2, #24]
 800ab8e:	4311      	orrs	r1, r2
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	69d2      	ldr	r2, [r2, #28]
 800ab94:	4311      	orrs	r1, r2
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	6a12      	ldr	r2, [r2, #32]
 800ab9a:	4311      	orrs	r1, r2
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aba0:	430a      	orrs	r2, r1
 800aba2:	431a      	orrs	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	e026      	b.n	800abf8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	69d9      	ldr	r1, [r3, #28]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	4319      	orrs	r1, r3
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc0:	430b      	orrs	r3, r1
 800abc2:	431a      	orrs	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	4b0e      	ldr	r3, [pc, #56]	@ (800ac08 <FMC_SDRAM_Init+0xb4>)
 800abce:	4013      	ands	r3, r2
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	6851      	ldr	r1, [r2, #4]
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	6892      	ldr	r2, [r2, #8]
 800abd8:	4311      	orrs	r1, r2
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	68d2      	ldr	r2, [r2, #12]
 800abde:	4311      	orrs	r1, r2
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	6912      	ldr	r2, [r2, #16]
 800abe4:	4311      	orrs	r1, r2
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	6952      	ldr	r2, [r2, #20]
 800abea:	4311      	orrs	r1, r2
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	6992      	ldr	r2, [r2, #24]
 800abf0:	430a      	orrs	r2, r1
 800abf2:	431a      	orrs	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	ffff8000 	.word	0xffff8000

0800ac0c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d128      	bne.n	800ac70 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	1e59      	subs	r1, r3, #1
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	4319      	orrs	r1, r3
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	021b      	lsls	r3, r3, #8
 800ac3e:	4319      	orrs	r1, r3
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	031b      	lsls	r3, r3, #12
 800ac48:	4319      	orrs	r1, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	041b      	lsls	r3, r3, #16
 800ac52:	4319      	orrs	r1, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	051b      	lsls	r3, r3, #20
 800ac5c:	4319      	orrs	r1, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	061b      	lsls	r3, r3, #24
 800ac66:	430b      	orrs	r3, r1
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	609a      	str	r2, [r3, #8]
 800ac6e:	e02d      	b.n	800accc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	689a      	ldr	r2, [r3, #8]
 800ac74:	4b19      	ldr	r3, [pc, #100]	@ (800acdc <FMC_SDRAM_Timing_Init+0xd0>)
 800ac76:	4013      	ands	r3, r2
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	68d2      	ldr	r2, [r2, #12]
 800ac7c:	3a01      	subs	r2, #1
 800ac7e:	0311      	lsls	r1, r2, #12
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	6952      	ldr	r2, [r2, #20]
 800ac84:	3a01      	subs	r2, #1
 800ac86:	0512      	lsls	r2, r2, #20
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	431a      	orrs	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	1e59      	subs	r1, r3, #1
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	3b01      	subs	r3, #1
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	4319      	orrs	r1, r3
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	3b01      	subs	r3, #1
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	4319      	orrs	r1, r3
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	041b      	lsls	r3, r3, #16
 800acba:	4319      	orrs	r1, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	061b      	lsls	r3, r3, #24
 800acc4:	430b      	orrs	r3, r1
 800acc6:	431a      	orrs	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	ff0f0fff 	.word	0xff0f0fff

0800ace0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	691a      	ldr	r2, [r3, #16]
 800acf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ad24 <FMC_SDRAM_SendCommand+0x44>)
 800acf2:	4013      	ands	r3, r2
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	6811      	ldr	r1, [r2, #0]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	6852      	ldr	r2, [r2, #4]
 800acfc:	4311      	orrs	r1, r2
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	6892      	ldr	r2, [r2, #8]
 800ad02:	3a01      	subs	r2, #1
 800ad04:	0152      	lsls	r2, r2, #5
 800ad06:	4311      	orrs	r1, r2
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	68d2      	ldr	r2, [r2, #12]
 800ad0c:	0252      	lsls	r2, r2, #9
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	431a      	orrs	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	ffc00000 	.word	0xffc00000

0800ad28 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	695a      	ldr	r2, [r3, #20]
 800ad36:	4b07      	ldr	r3, [pc, #28]	@ (800ad54 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ad38:	4013      	ands	r3, r2
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	0052      	lsls	r2, r2, #1
 800ad3e:	431a      	orrs	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	ffffc001 	.word	0xffffc001

0800ad58 <setAllRowsInactive>:
volatile int lastRow = -1;
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;

void setAllRowsInactive(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
 800ad5e:	2300      	movs	r3, #0
 800ad60:	607b      	str	r3, [r7, #4]
 800ad62:	e00f      	b.n	800ad84 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
 800ad64:	4a0b      	ldr	r2, [pc, #44]	@ (800ad94 <setAllRowsInactive+0x3c>)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ad6c:	4a09      	ldr	r2, [pc, #36]	@ (800ad94 <setAllRowsInactive+0x3c>)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	00db      	lsls	r3, r3, #3
 800ad72:	4413      	add	r3, r2
 800ad74:	889b      	ldrh	r3, [r3, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	4619      	mov	r1, r3
 800ad7a:	f7f9 fe89 	bl	8004a90 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3301      	adds	r3, #1
 800ad82:	607b      	str	r3, [r7, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b04      	cmp	r3, #4
 800ad88:	ddec      	ble.n	800ad64 <setAllRowsInactive+0xc>
    }
}
 800ad8a:	bf00      	nop
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	24000024 	.word	0x24000024

0800ad98 <setRowActive>:

void setRowActive(int row)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	db12      	blt.n	800adcc <setRowActive+0x34>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	dc0f      	bgt.n	800adcc <setRowActive+0x34>
        return;

    setAllRowsInactive();
 800adac:	f7ff ffd4 	bl	800ad58 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
 800adb0:	4a08      	ldr	r2, [pc, #32]	@ (800add4 <setRowActive+0x3c>)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800adb8:	4a06      	ldr	r2, [pc, #24]	@ (800add4 <setRowActive+0x3c>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	4413      	add	r3, r2
 800adc0:	889b      	ldrh	r3, [r3, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	4619      	mov	r1, r3
 800adc6:	f7f9 fe63 	bl	8004a90 <HAL_GPIO_WritePin>
 800adca:	e000      	b.n	800adce <setRowActive+0x36>
        return;
 800adcc:	bf00      	nop
}
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	24000024 	.word	0x24000024

0800add8 <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
 800adde:	2300      	movs	r3, #0
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	e04c      	b.n	800ae7e <ReadFlexiKeyboard+0xa6>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f7ff ffd7 	bl	800ad98 <setRowActive>
        HAL_Delay(1);         // Small delay for settling
 800adea:	2001      	movs	r0, #1
 800adec:	f7f8 ffea 	bl	8003dc4 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
 800adf0:	2300      	movs	r3, #0
 800adf2:	60bb      	str	r3, [r7, #8]
 800adf4:	e03d      	b.n	800ae72 <ReadFlexiKeyboard+0x9a>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
 800adf6:	4a26      	ldr	r2, [pc, #152]	@ (800ae90 <ReadFlexiKeyboard+0xb8>)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800adfe:	4924      	ldr	r1, [pc, #144]	@ (800ae90 <ReadFlexiKeyboard+0xb8>)
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	440b      	add	r3, r1
 800ae06:	889b      	ldrh	r3, [r3, #4]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	f7f9 fe28 	bl	8004a60 <HAL_GPIO_ReadPin>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d12a      	bne.n	800ae6c <ReadFlexiKeyboard+0x94>
            {
                uint32_t now = HAL_GetTick();
 800ae16:	f7f8 ffc9 	bl	8003dac <HAL_GetTick>
 800ae1a:	6078      	str	r0, [r7, #4]

                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) { // Debounce/repeat suppression
 800ae1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ae94 <ReadFlexiKeyboard+0xbc>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d10d      	bne.n	800ae42 <ReadFlexiKeyboard+0x6a>
 800ae26:	4b1c      	ldr	r3, [pc, #112]	@ (800ae98 <ReadFlexiKeyboard+0xc0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d108      	bne.n	800ae42 <ReadFlexiKeyboard+0x6a>
 800ae30:	4b1a      	ldr	r3, [pc, #104]	@ (800ae9c <ReadFlexiKeyboard+0xc4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ae3c:	d201      	bcs.n	800ae42 <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
 800ae3e:	234e      	movs	r3, #78	@ 0x4e
 800ae40:	e021      	b.n	800ae86 <ReadFlexiKeyboard+0xae>
                }

                lastRow = row;
 800ae42:	4a14      	ldr	r2, [pc, #80]	@ (800ae94 <ReadFlexiKeyboard+0xbc>)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6013      	str	r3, [r2, #0]
                lastCol = col;
 800ae48:	4a13      	ldr	r2, [pc, #76]	@ (800ae98 <ReadFlexiKeyboard+0xc0>)
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
 800ae4e:	4a13      	ldr	r2, [pc, #76]	@ (800ae9c <ReadFlexiKeyboard+0xc4>)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6013      	str	r3, [r2, #0]

                KeyboardButton receivedChar = keymap[row][col];
 800ae54:	4912      	ldr	r1, [pc, #72]	@ (800aea0 <ReadFlexiKeyboard+0xc8>)
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	18ca      	adds	r2, r1, r3
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	4413      	add	r3, r2
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	70fb      	strb	r3, [r7, #3]
                //printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
                return receivedChar;
 800ae68:	78fb      	ldrb	r3, [r7, #3]
 800ae6a:	e00c      	b.n	800ae86 <ReadFlexiKeyboard+0xae>
        for (int col = 0; col < NUM_COLS; col++)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60bb      	str	r3, [r7, #8]
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	ddbe      	ble.n	800adf6 <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	ddaf      	ble.n	800ade4 <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
 800ae84:	234e      	movs	r3, #78	@ 0x4e
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	2400004c 	.word	0x2400004c
 800ae94:	24000074 	.word	0x24000074
 800ae98:	24000078 	.word	0x24000078
 800ae9c:	24000f70 	.word	0x24000f70
 800aea0:	0800c850 	.word	0x0800c850

0800aea4 <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b090      	sub	sp, #64	@ 0x40
 800aea8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aeaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	605a      	str	r2, [r3, #4]
 800aeb4:	609a      	str	r2, [r3, #8]
 800aeb6:	60da      	str	r2, [r3, #12]
 800aeb8:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800aeba:	4b5c      	ldr	r3, [pc, #368]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800aebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aec0:	4a5a      	ldr	r2, [pc, #360]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800aec2:	f043 0301 	orr.w	r3, r3, #1
 800aec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800aeca:	4b58      	ldr	r3, [pc, #352]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800aecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	623b      	str	r3, [r7, #32]
 800aed6:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800aed8:	4b54      	ldr	r3, [pc, #336]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800aeda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aede:	4a53      	ldr	r2, [pc, #332]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800aee0:	f043 0302 	orr.w	r3, r3, #2
 800aee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800aee8:	4b50      	ldr	r3, [pc, #320]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800aeea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aeee:	f003 0302 	and.w	r3, r3, #2
 800aef2:	61fb      	str	r3, [r7, #28]
 800aef4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800aef6:	4b4d      	ldr	r3, [pc, #308]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800aef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aefc:	4a4b      	ldr	r2, [pc, #300]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800aefe:	f043 0308 	orr.w	r3, r3, #8
 800af02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800af06:	4b49      	ldr	r3, [pc, #292]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af0c:	f003 0308 	and.w	r3, r3, #8
 800af10:	61bb      	str	r3, [r7, #24]
 800af12:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800af14:	4b45      	ldr	r3, [pc, #276]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af1a:	4a44      	ldr	r2, [pc, #272]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af1c:	f043 0310 	orr.w	r3, r3, #16
 800af20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800af24:	4b41      	ldr	r3, [pc, #260]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af2a:	f003 0310 	and.w	r3, r3, #16
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800af32:	4b3e      	ldr	r3, [pc, #248]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af38:	4a3c      	ldr	r2, [pc, #240]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800af42:	4b3a      	ldr	r3, [pc, #232]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800af50:	4b36      	ldr	r3, [pc, #216]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af56:	4a35      	ldr	r2, [pc, #212]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800af60:	4b32      	ldr	r3, [pc, #200]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800af6e:	4b2f      	ldr	r3, [pc, #188]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af74:	4a2d      	ldr	r2, [pc, #180]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800af7e:	4b2b      	ldr	r3, [pc, #172]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af88:	60bb      	str	r3, [r7, #8]
 800af8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800af8c:	4b27      	ldr	r3, [pc, #156]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af92:	4a26      	ldr	r2, [pc, #152]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800af98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800af9c:	4b23      	ldr	r3, [pc, #140]	@ (800b02c <InitFlexiKeyboard+0x188>)
 800af9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afa6:	607b      	str	r3, [r7, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800afaa:	2301      	movs	r3, #1
 800afac:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afae:	2300      	movs	r3, #0
 800afb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afb2:	2300      	movs	r3, #0
 800afb4:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
 800afb6:	2300      	movs	r3, #0
 800afb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afba:	e012      	b.n	800afe2 <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
 800afbc:	4a1c      	ldr	r2, [pc, #112]	@ (800b030 <InitFlexiKeyboard+0x18c>)
 800afbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	4413      	add	r3, r2
 800afc4:	889b      	ldrh	r3, [r3, #4]
 800afc6:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
 800afc8:	4a19      	ldr	r2, [pc, #100]	@ (800b030 <InitFlexiKeyboard+0x18c>)
 800afca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afd0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800afd4:	4611      	mov	r1, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7f9 fb92 	bl	8004700 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
 800afdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afde:	3301      	adds	r3, #1
 800afe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afe4:	2b04      	cmp	r3, #4
 800afe6:	dde9      	ble.n	800afbc <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800afe8:	2300      	movs	r3, #0
 800afea:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800afec:	2302      	movs	r3, #2
 800afee:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
 800aff0:	2300      	movs	r3, #0
 800aff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aff4:	e012      	b.n	800b01c <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
 800aff6:	4a0f      	ldr	r2, [pc, #60]	@ (800b034 <InitFlexiKeyboard+0x190>)
 800aff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	4413      	add	r3, r2
 800affe:	889b      	ldrh	r3, [r3, #4]
 800b000:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
 800b002:	4a0c      	ldr	r2, [pc, #48]	@ (800b034 <InitFlexiKeyboard+0x190>)
 800b004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b006:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b00a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b00e:	4611      	mov	r1, r2
 800b010:	4618      	mov	r0, r3
 800b012:	f7f9 fb75 	bl	8004700 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
 800b016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b018:	3301      	adds	r3, #1
 800b01a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01e:	2b04      	cmp	r3, #4
 800b020:	dde9      	ble.n	800aff6 <InitFlexiKeyboard+0x152>
	}
}
 800b022:	bf00      	nop
 800b024:	bf00      	nop
 800b026:	3740      	adds	r7, #64	@ 0x40
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	58024400 	.word	0x58024400
 800b030:	24000024 	.word	0x24000024
 800b034:	2400004c 	.word	0x2400004c

0800b038 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a22      	ldr	r2, [pc, #136]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b046:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	4a20      	ldr	r2, [pc, #128]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b04e:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	4a1e      	ldr	r2, [pc, #120]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b056:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	4a1c      	ldr	r2, [pc, #112]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b05e:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	4a1a      	ldr	r2, [pc, #104]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b066:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	4a18      	ldr	r2, [pc, #96]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b06e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	4a16      	ldr	r2, [pc, #88]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b076:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	4a14      	ldr	r2, [pc, #80]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b07e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	4a12      	ldr	r2, [pc, #72]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b086:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08c:	4a10      	ldr	r2, [pc, #64]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b08e:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b094:	4a0e      	ldr	r2, [pc, #56]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b096:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 800b098:	4b0e      	ldr	r3, [pc, #56]	@ (800b0d4 <UTIL_LCD_SetFuncDriver+0x9c>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 800b09e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d4 <UTIL_LCD_SetFuncDriver+0x9c>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800b0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	4a0b      	ldr	r2, [pc, #44]	@ (800b0d8 <UTIL_LCD_SetFuncDriver+0xa0>)
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800b0b0:	4b07      	ldr	r3, [pc, #28]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	4a09      	ldr	r2, [pc, #36]	@ (800b0dc <UTIL_LCD_SetFuncDriver+0xa4>)
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800b0bc:	4b04      	ldr	r3, [pc, #16]	@ (800b0d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800b0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c0:	4a07      	ldr	r2, [pc, #28]	@ (800b0e0 <UTIL_LCD_SetFuncDriver+0xa8>)
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	4798      	blx	r3
}
 800b0c8:	bf00      	nop
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	24000fb4 	.word	0x24000fb4
 800b0d4:	24000f74 	.word	0x24000f74
 800b0d8:	24000f88 	.word	0x24000f88
 800b0dc:	24000f8c 	.word	0x24000f8c
 800b0e0:	24000f90 	.word	0x24000f90

0800b0e4 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b118 <UTIL_LCD_SetLayer+0x34>)
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00c      	beq.n	800b10e <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800b0f4:	4b08      	ldr	r3, [pc, #32]	@ (800b118 <UTIL_LCD_SetLayer+0x34>)
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f8:	4a08      	ldr	r2, [pc, #32]	@ (800b11c <UTIL_LCD_SetLayer+0x38>)
 800b0fa:	6912      	ldr	r2, [r2, #16]
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	4610      	mov	r0, r2
 800b100:	4798      	blx	r3
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d102      	bne.n	800b10e <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 800b108:	4a04      	ldr	r2, [pc, #16]	@ (800b11c <UTIL_LCD_SetLayer+0x38>)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	60d3      	str	r3, [r2, #12]
    }
  }
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	24000fb4 	.word	0x24000fb4
 800b11c:	24000f74 	.word	0x24000f74

0800b120 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800b128:	4b06      	ldr	r3, [pc, #24]	@ (800b144 <UTIL_LCD_SetTextColor+0x24>)
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	4a05      	ldr	r2, [pc, #20]	@ (800b144 <UTIL_LCD_SetTextColor+0x24>)
 800b12e:	015b      	lsls	r3, r3, #5
 800b130:	4413      	add	r3, r2
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	601a      	str	r2, [r3, #0]
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	24000f74 	.word	0x24000f74

0800b148 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800b150:	4b06      	ldr	r3, [pc, #24]	@ (800b16c <UTIL_LCD_SetBackColor+0x24>)
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	4a05      	ldr	r2, [pc, #20]	@ (800b16c <UTIL_LCD_SetBackColor+0x24>)
 800b156:	015b      	lsls	r3, r3, #5
 800b158:	4413      	add	r3, r2
 800b15a:	3304      	adds	r3, #4
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	601a      	str	r2, [r3, #0]
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	24000f74 	.word	0x24000f74

0800b170 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800b178:	4b06      	ldr	r3, [pc, #24]	@ (800b194 <UTIL_LCD_SetFont+0x24>)
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	4a05      	ldr	r2, [pc, #20]	@ (800b194 <UTIL_LCD_SetFont+0x24>)
 800b17e:	015b      	lsls	r3, r3, #5
 800b180:	4413      	add	r3, r2
 800b182:	3308      	adds	r3, #8
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	24000f74 	.word	0x24000f74

0800b198 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800b1a0:	4b07      	ldr	r3, [pc, #28]	@ (800b1c0 <UTIL_LCD_Clear+0x28>)
 800b1a2:	695a      	ldr	r2, [r3, #20]
 800b1a4:	4b06      	ldr	r3, [pc, #24]	@ (800b1c0 <UTIL_LCD_Clear+0x28>)
 800b1a6:	6999      	ldr	r1, [r3, #24]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	f000 f807 	bl	800b1c4 <UTIL_LCD_FillRect>
}
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	24000f74 	.word	0x24000f74

0800b1c4 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800b1c4:	b590      	push	{r4, r7, lr}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af02      	add	r7, sp, #8
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
 800b1d0:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800b1d2:	4b17      	ldr	r3, [pc, #92]	@ (800b230 <UTIL_LCD_FillRect+0x6c>)
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d11a      	bne.n	800b210 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800b1da:	4b16      	ldr	r3, [pc, #88]	@ (800b234 <UTIL_LCD_FillRect+0x70>)
 800b1dc:	691c      	ldr	r4, [r3, #16]
 800b1de:	4b14      	ldr	r3, [pc, #80]	@ (800b230 <UTIL_LCD_FillRect+0x6c>)
 800b1e0:	6918      	ldr	r0, [r3, #16]
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	08db      	lsrs	r3, r3, #3
 800b1e6:	f003 021f 	and.w	r2, r3, #31
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	0a9b      	lsrs	r3, r3, #10
 800b1ee:	015b      	lsls	r3, r3, #5
 800b1f0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800b1f4:	431a      	orrs	r2, r3
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	0cdb      	lsrs	r3, r3, #19
 800b1fa:	02db      	lsls	r3, r3, #11
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	4313      	orrs	r3, r2
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	68f9      	ldr	r1, [r7, #12]
 800b20c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 800b20e:	e00b      	b.n	800b228 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800b210:	4b08      	ldr	r3, [pc, #32]	@ (800b234 <UTIL_LCD_FillRect+0x70>)
 800b212:	691c      	ldr	r4, [r3, #16]
 800b214:	4b06      	ldr	r3, [pc, #24]	@ (800b230 <UTIL_LCD_FillRect+0x6c>)
 800b216:	6918      	ldr	r0, [r3, #16]
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	68f9      	ldr	r1, [r7, #12]
 800b226:	47a0      	blx	r4
}
 800b228:	bf00      	nop
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd90      	pop	{r4, r7, pc}
 800b230:	24000f74 	.word	0x24000f74
 800b234:	24000fb4 	.word	0x24000fb4

0800b238 <std>:
 800b238:	2300      	movs	r3, #0
 800b23a:	b510      	push	{r4, lr}
 800b23c:	4604      	mov	r4, r0
 800b23e:	e9c0 3300 	strd	r3, r3, [r0]
 800b242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b246:	6083      	str	r3, [r0, #8]
 800b248:	8181      	strh	r1, [r0, #12]
 800b24a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b24c:	81c2      	strh	r2, [r0, #14]
 800b24e:	6183      	str	r3, [r0, #24]
 800b250:	4619      	mov	r1, r3
 800b252:	2208      	movs	r2, #8
 800b254:	305c      	adds	r0, #92	@ 0x5c
 800b256:	f000 fa1b 	bl	800b690 <memset>
 800b25a:	4b0d      	ldr	r3, [pc, #52]	@ (800b290 <std+0x58>)
 800b25c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b25e:	4b0d      	ldr	r3, [pc, #52]	@ (800b294 <std+0x5c>)
 800b260:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b262:	4b0d      	ldr	r3, [pc, #52]	@ (800b298 <std+0x60>)
 800b264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b266:	4b0d      	ldr	r3, [pc, #52]	@ (800b29c <std+0x64>)
 800b268:	6323      	str	r3, [r4, #48]	@ 0x30
 800b26a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a0 <std+0x68>)
 800b26c:	6224      	str	r4, [r4, #32]
 800b26e:	429c      	cmp	r4, r3
 800b270:	d006      	beq.n	800b280 <std+0x48>
 800b272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b276:	4294      	cmp	r4, r2
 800b278:	d002      	beq.n	800b280 <std+0x48>
 800b27a:	33d0      	adds	r3, #208	@ 0xd0
 800b27c:	429c      	cmp	r4, r3
 800b27e:	d105      	bne.n	800b28c <std+0x54>
 800b280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b288:	f000 ba7a 	b.w	800b780 <__retarget_lock_init_recursive>
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	bf00      	nop
 800b290:	0800b4e1 	.word	0x0800b4e1
 800b294:	0800b503 	.word	0x0800b503
 800b298:	0800b53b 	.word	0x0800b53b
 800b29c:	0800b55f 	.word	0x0800b55f
 800b2a0:	24000fe0 	.word	0x24000fe0

0800b2a4 <stdio_exit_handler>:
 800b2a4:	4a02      	ldr	r2, [pc, #8]	@ (800b2b0 <stdio_exit_handler+0xc>)
 800b2a6:	4903      	ldr	r1, [pc, #12]	@ (800b2b4 <stdio_exit_handler+0x10>)
 800b2a8:	4803      	ldr	r0, [pc, #12]	@ (800b2b8 <stdio_exit_handler+0x14>)
 800b2aa:	f000 b869 	b.w	800b380 <_fwalk_sglue>
 800b2ae:	bf00      	nop
 800b2b0:	24000094 	.word	0x24000094
 800b2b4:	0800c2cd 	.word	0x0800c2cd
 800b2b8:	240000a4 	.word	0x240000a4

0800b2bc <cleanup_stdio>:
 800b2bc:	6841      	ldr	r1, [r0, #4]
 800b2be:	4b0c      	ldr	r3, [pc, #48]	@ (800b2f0 <cleanup_stdio+0x34>)
 800b2c0:	4299      	cmp	r1, r3
 800b2c2:	b510      	push	{r4, lr}
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	d001      	beq.n	800b2cc <cleanup_stdio+0x10>
 800b2c8:	f001 f800 	bl	800c2cc <_fflush_r>
 800b2cc:	68a1      	ldr	r1, [r4, #8]
 800b2ce:	4b09      	ldr	r3, [pc, #36]	@ (800b2f4 <cleanup_stdio+0x38>)
 800b2d0:	4299      	cmp	r1, r3
 800b2d2:	d002      	beq.n	800b2da <cleanup_stdio+0x1e>
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f000 fff9 	bl	800c2cc <_fflush_r>
 800b2da:	68e1      	ldr	r1, [r4, #12]
 800b2dc:	4b06      	ldr	r3, [pc, #24]	@ (800b2f8 <cleanup_stdio+0x3c>)
 800b2de:	4299      	cmp	r1, r3
 800b2e0:	d004      	beq.n	800b2ec <cleanup_stdio+0x30>
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e8:	f000 bff0 	b.w	800c2cc <_fflush_r>
 800b2ec:	bd10      	pop	{r4, pc}
 800b2ee:	bf00      	nop
 800b2f0:	24000fe0 	.word	0x24000fe0
 800b2f4:	24001048 	.word	0x24001048
 800b2f8:	240010b0 	.word	0x240010b0

0800b2fc <global_stdio_init.part.0>:
 800b2fc:	b510      	push	{r4, lr}
 800b2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b32c <global_stdio_init.part.0+0x30>)
 800b300:	4c0b      	ldr	r4, [pc, #44]	@ (800b330 <global_stdio_init.part.0+0x34>)
 800b302:	4a0c      	ldr	r2, [pc, #48]	@ (800b334 <global_stdio_init.part.0+0x38>)
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	4620      	mov	r0, r4
 800b308:	2200      	movs	r2, #0
 800b30a:	2104      	movs	r1, #4
 800b30c:	f7ff ff94 	bl	800b238 <std>
 800b310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b314:	2201      	movs	r2, #1
 800b316:	2109      	movs	r1, #9
 800b318:	f7ff ff8e 	bl	800b238 <std>
 800b31c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b320:	2202      	movs	r2, #2
 800b322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b326:	2112      	movs	r1, #18
 800b328:	f7ff bf86 	b.w	800b238 <std>
 800b32c:	24001118 	.word	0x24001118
 800b330:	24000fe0 	.word	0x24000fe0
 800b334:	0800b2a5 	.word	0x0800b2a5

0800b338 <__sfp_lock_acquire>:
 800b338:	4801      	ldr	r0, [pc, #4]	@ (800b340 <__sfp_lock_acquire+0x8>)
 800b33a:	f000 ba22 	b.w	800b782 <__retarget_lock_acquire_recursive>
 800b33e:	bf00      	nop
 800b340:	24001121 	.word	0x24001121

0800b344 <__sfp_lock_release>:
 800b344:	4801      	ldr	r0, [pc, #4]	@ (800b34c <__sfp_lock_release+0x8>)
 800b346:	f000 ba1d 	b.w	800b784 <__retarget_lock_release_recursive>
 800b34a:	bf00      	nop
 800b34c:	24001121 	.word	0x24001121

0800b350 <__sinit>:
 800b350:	b510      	push	{r4, lr}
 800b352:	4604      	mov	r4, r0
 800b354:	f7ff fff0 	bl	800b338 <__sfp_lock_acquire>
 800b358:	6a23      	ldr	r3, [r4, #32]
 800b35a:	b11b      	cbz	r3, 800b364 <__sinit+0x14>
 800b35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b360:	f7ff bff0 	b.w	800b344 <__sfp_lock_release>
 800b364:	4b04      	ldr	r3, [pc, #16]	@ (800b378 <__sinit+0x28>)
 800b366:	6223      	str	r3, [r4, #32]
 800b368:	4b04      	ldr	r3, [pc, #16]	@ (800b37c <__sinit+0x2c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1f5      	bne.n	800b35c <__sinit+0xc>
 800b370:	f7ff ffc4 	bl	800b2fc <global_stdio_init.part.0>
 800b374:	e7f2      	b.n	800b35c <__sinit+0xc>
 800b376:	bf00      	nop
 800b378:	0800b2bd 	.word	0x0800b2bd
 800b37c:	24001118 	.word	0x24001118

0800b380 <_fwalk_sglue>:
 800b380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b384:	4607      	mov	r7, r0
 800b386:	4688      	mov	r8, r1
 800b388:	4614      	mov	r4, r2
 800b38a:	2600      	movs	r6, #0
 800b38c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b390:	f1b9 0901 	subs.w	r9, r9, #1
 800b394:	d505      	bpl.n	800b3a2 <_fwalk_sglue+0x22>
 800b396:	6824      	ldr	r4, [r4, #0]
 800b398:	2c00      	cmp	r4, #0
 800b39a:	d1f7      	bne.n	800b38c <_fwalk_sglue+0xc>
 800b39c:	4630      	mov	r0, r6
 800b39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a2:	89ab      	ldrh	r3, [r5, #12]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d907      	bls.n	800b3b8 <_fwalk_sglue+0x38>
 800b3a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	d003      	beq.n	800b3b8 <_fwalk_sglue+0x38>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	47c0      	blx	r8
 800b3b6:	4306      	orrs	r6, r0
 800b3b8:	3568      	adds	r5, #104	@ 0x68
 800b3ba:	e7e9      	b.n	800b390 <_fwalk_sglue+0x10>

0800b3bc <iprintf>:
 800b3bc:	b40f      	push	{r0, r1, r2, r3}
 800b3be:	b507      	push	{r0, r1, r2, lr}
 800b3c0:	4906      	ldr	r1, [pc, #24]	@ (800b3dc <iprintf+0x20>)
 800b3c2:	ab04      	add	r3, sp, #16
 800b3c4:	6808      	ldr	r0, [r1, #0]
 800b3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ca:	6881      	ldr	r1, [r0, #8]
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	f000 fc55 	bl	800bc7c <_vfiprintf_r>
 800b3d2:	b003      	add	sp, #12
 800b3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3d8:	b004      	add	sp, #16
 800b3da:	4770      	bx	lr
 800b3dc:	240000a0 	.word	0x240000a0

0800b3e0 <_puts_r>:
 800b3e0:	6a03      	ldr	r3, [r0, #32]
 800b3e2:	b570      	push	{r4, r5, r6, lr}
 800b3e4:	6884      	ldr	r4, [r0, #8]
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	460e      	mov	r6, r1
 800b3ea:	b90b      	cbnz	r3, 800b3f0 <_puts_r+0x10>
 800b3ec:	f7ff ffb0 	bl	800b350 <__sinit>
 800b3f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3f2:	07db      	lsls	r3, r3, #31
 800b3f4:	d405      	bmi.n	800b402 <_puts_r+0x22>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	0598      	lsls	r0, r3, #22
 800b3fa:	d402      	bmi.n	800b402 <_puts_r+0x22>
 800b3fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3fe:	f000 f9c0 	bl	800b782 <__retarget_lock_acquire_recursive>
 800b402:	89a3      	ldrh	r3, [r4, #12]
 800b404:	0719      	lsls	r1, r3, #28
 800b406:	d502      	bpl.n	800b40e <_puts_r+0x2e>
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d135      	bne.n	800b47a <_puts_r+0x9a>
 800b40e:	4621      	mov	r1, r4
 800b410:	4628      	mov	r0, r5
 800b412:	f000 f8e7 	bl	800b5e4 <__swsetup_r>
 800b416:	b380      	cbz	r0, 800b47a <_puts_r+0x9a>
 800b418:	f04f 35ff 	mov.w	r5, #4294967295
 800b41c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b41e:	07da      	lsls	r2, r3, #31
 800b420:	d405      	bmi.n	800b42e <_puts_r+0x4e>
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	059b      	lsls	r3, r3, #22
 800b426:	d402      	bmi.n	800b42e <_puts_r+0x4e>
 800b428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b42a:	f000 f9ab 	bl	800b784 <__retarget_lock_release_recursive>
 800b42e:	4628      	mov	r0, r5
 800b430:	bd70      	pop	{r4, r5, r6, pc}
 800b432:	2b00      	cmp	r3, #0
 800b434:	da04      	bge.n	800b440 <_puts_r+0x60>
 800b436:	69a2      	ldr	r2, [r4, #24]
 800b438:	429a      	cmp	r2, r3
 800b43a:	dc17      	bgt.n	800b46c <_puts_r+0x8c>
 800b43c:	290a      	cmp	r1, #10
 800b43e:	d015      	beq.n	800b46c <_puts_r+0x8c>
 800b440:	6823      	ldr	r3, [r4, #0]
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	6022      	str	r2, [r4, #0]
 800b446:	7019      	strb	r1, [r3, #0]
 800b448:	68a3      	ldr	r3, [r4, #8]
 800b44a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b44e:	3b01      	subs	r3, #1
 800b450:	60a3      	str	r3, [r4, #8]
 800b452:	2900      	cmp	r1, #0
 800b454:	d1ed      	bne.n	800b432 <_puts_r+0x52>
 800b456:	2b00      	cmp	r3, #0
 800b458:	da11      	bge.n	800b47e <_puts_r+0x9e>
 800b45a:	4622      	mov	r2, r4
 800b45c:	210a      	movs	r1, #10
 800b45e:	4628      	mov	r0, r5
 800b460:	f000 f881 	bl	800b566 <__swbuf_r>
 800b464:	3001      	adds	r0, #1
 800b466:	d0d7      	beq.n	800b418 <_puts_r+0x38>
 800b468:	250a      	movs	r5, #10
 800b46a:	e7d7      	b.n	800b41c <_puts_r+0x3c>
 800b46c:	4622      	mov	r2, r4
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 f879 	bl	800b566 <__swbuf_r>
 800b474:	3001      	adds	r0, #1
 800b476:	d1e7      	bne.n	800b448 <_puts_r+0x68>
 800b478:	e7ce      	b.n	800b418 <_puts_r+0x38>
 800b47a:	3e01      	subs	r6, #1
 800b47c:	e7e4      	b.n	800b448 <_puts_r+0x68>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	220a      	movs	r2, #10
 800b486:	701a      	strb	r2, [r3, #0]
 800b488:	e7ee      	b.n	800b468 <_puts_r+0x88>
	...

0800b48c <puts>:
 800b48c:	4b02      	ldr	r3, [pc, #8]	@ (800b498 <puts+0xc>)
 800b48e:	4601      	mov	r1, r0
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	f7ff bfa5 	b.w	800b3e0 <_puts_r>
 800b496:	bf00      	nop
 800b498:	240000a0 	.word	0x240000a0

0800b49c <siprintf>:
 800b49c:	b40e      	push	{r1, r2, r3}
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	b09d      	sub	sp, #116	@ 0x74
 800b4a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b4a4:	9002      	str	r0, [sp, #8]
 800b4a6:	9006      	str	r0, [sp, #24]
 800b4a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4ac:	480a      	ldr	r0, [pc, #40]	@ (800b4d8 <siprintf+0x3c>)
 800b4ae:	9107      	str	r1, [sp, #28]
 800b4b0:	9104      	str	r1, [sp, #16]
 800b4b2:	490a      	ldr	r1, [pc, #40]	@ (800b4dc <siprintf+0x40>)
 800b4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b8:	9105      	str	r1, [sp, #20]
 800b4ba:	2400      	movs	r4, #0
 800b4bc:	a902      	add	r1, sp, #8
 800b4be:	6800      	ldr	r0, [r0, #0]
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b4c4:	f000 fab4 	bl	800ba30 <_svfiprintf_r>
 800b4c8:	9b02      	ldr	r3, [sp, #8]
 800b4ca:	701c      	strb	r4, [r3, #0]
 800b4cc:	b01d      	add	sp, #116	@ 0x74
 800b4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d2:	b003      	add	sp, #12
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	240000a0 	.word	0x240000a0
 800b4dc:	ffff0208 	.word	0xffff0208

0800b4e0 <__sread>:
 800b4e0:	b510      	push	{r4, lr}
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e8:	f000 f8fc 	bl	800b6e4 <_read_r>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	bfab      	itete	ge
 800b4f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b4f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b4f4:	181b      	addge	r3, r3, r0
 800b4f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b4fa:	bfac      	ite	ge
 800b4fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b4fe:	81a3      	strhlt	r3, [r4, #12]
 800b500:	bd10      	pop	{r4, pc}

0800b502 <__swrite>:
 800b502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b506:	461f      	mov	r7, r3
 800b508:	898b      	ldrh	r3, [r1, #12]
 800b50a:	05db      	lsls	r3, r3, #23
 800b50c:	4605      	mov	r5, r0
 800b50e:	460c      	mov	r4, r1
 800b510:	4616      	mov	r6, r2
 800b512:	d505      	bpl.n	800b520 <__swrite+0x1e>
 800b514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b518:	2302      	movs	r3, #2
 800b51a:	2200      	movs	r2, #0
 800b51c:	f000 f8d0 	bl	800b6c0 <_lseek_r>
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	4632      	mov	r2, r6
 800b52e:	463b      	mov	r3, r7
 800b530:	4628      	mov	r0, r5
 800b532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b536:	f000 b8e7 	b.w	800b708 <_write_r>

0800b53a <__sseek>:
 800b53a:	b510      	push	{r4, lr}
 800b53c:	460c      	mov	r4, r1
 800b53e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b542:	f000 f8bd 	bl	800b6c0 <_lseek_r>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	bf15      	itete	ne
 800b54c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b54e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b556:	81a3      	strheq	r3, [r4, #12]
 800b558:	bf18      	it	ne
 800b55a:	81a3      	strhne	r3, [r4, #12]
 800b55c:	bd10      	pop	{r4, pc}

0800b55e <__sclose>:
 800b55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b562:	f000 b89d 	b.w	800b6a0 <_close_r>

0800b566 <__swbuf_r>:
 800b566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b568:	460e      	mov	r6, r1
 800b56a:	4614      	mov	r4, r2
 800b56c:	4605      	mov	r5, r0
 800b56e:	b118      	cbz	r0, 800b578 <__swbuf_r+0x12>
 800b570:	6a03      	ldr	r3, [r0, #32]
 800b572:	b90b      	cbnz	r3, 800b578 <__swbuf_r+0x12>
 800b574:	f7ff feec 	bl	800b350 <__sinit>
 800b578:	69a3      	ldr	r3, [r4, #24]
 800b57a:	60a3      	str	r3, [r4, #8]
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	071a      	lsls	r2, r3, #28
 800b580:	d501      	bpl.n	800b586 <__swbuf_r+0x20>
 800b582:	6923      	ldr	r3, [r4, #16]
 800b584:	b943      	cbnz	r3, 800b598 <__swbuf_r+0x32>
 800b586:	4621      	mov	r1, r4
 800b588:	4628      	mov	r0, r5
 800b58a:	f000 f82b 	bl	800b5e4 <__swsetup_r>
 800b58e:	b118      	cbz	r0, 800b598 <__swbuf_r+0x32>
 800b590:	f04f 37ff 	mov.w	r7, #4294967295
 800b594:	4638      	mov	r0, r7
 800b596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	6922      	ldr	r2, [r4, #16]
 800b59c:	1a98      	subs	r0, r3, r2
 800b59e:	6963      	ldr	r3, [r4, #20]
 800b5a0:	b2f6      	uxtb	r6, r6
 800b5a2:	4283      	cmp	r3, r0
 800b5a4:	4637      	mov	r7, r6
 800b5a6:	dc05      	bgt.n	800b5b4 <__swbuf_r+0x4e>
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f000 fe8e 	bl	800c2cc <_fflush_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d1ed      	bne.n	800b590 <__swbuf_r+0x2a>
 800b5b4:	68a3      	ldr	r3, [r4, #8]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	60a3      	str	r3, [r4, #8]
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	6022      	str	r2, [r4, #0]
 800b5c0:	701e      	strb	r6, [r3, #0]
 800b5c2:	6962      	ldr	r2, [r4, #20]
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d004      	beq.n	800b5d4 <__swbuf_r+0x6e>
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	07db      	lsls	r3, r3, #31
 800b5ce:	d5e1      	bpl.n	800b594 <__swbuf_r+0x2e>
 800b5d0:	2e0a      	cmp	r6, #10
 800b5d2:	d1df      	bne.n	800b594 <__swbuf_r+0x2e>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	f000 fe78 	bl	800c2cc <_fflush_r>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d0d9      	beq.n	800b594 <__swbuf_r+0x2e>
 800b5e0:	e7d6      	b.n	800b590 <__swbuf_r+0x2a>
	...

0800b5e4 <__swsetup_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4b29      	ldr	r3, [pc, #164]	@ (800b68c <__swsetup_r+0xa8>)
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	b118      	cbz	r0, 800b5f8 <__swsetup_r+0x14>
 800b5f0:	6a03      	ldr	r3, [r0, #32]
 800b5f2:	b90b      	cbnz	r3, 800b5f8 <__swsetup_r+0x14>
 800b5f4:	f7ff feac 	bl	800b350 <__sinit>
 800b5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fc:	0719      	lsls	r1, r3, #28
 800b5fe:	d422      	bmi.n	800b646 <__swsetup_r+0x62>
 800b600:	06da      	lsls	r2, r3, #27
 800b602:	d407      	bmi.n	800b614 <__swsetup_r+0x30>
 800b604:	2209      	movs	r2, #9
 800b606:	602a      	str	r2, [r5, #0]
 800b608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	f04f 30ff 	mov.w	r0, #4294967295
 800b612:	e033      	b.n	800b67c <__swsetup_r+0x98>
 800b614:	0758      	lsls	r0, r3, #29
 800b616:	d512      	bpl.n	800b63e <__swsetup_r+0x5a>
 800b618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b61a:	b141      	cbz	r1, 800b62e <__swsetup_r+0x4a>
 800b61c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b620:	4299      	cmp	r1, r3
 800b622:	d002      	beq.n	800b62a <__swsetup_r+0x46>
 800b624:	4628      	mov	r0, r5
 800b626:	f000 f8af 	bl	800b788 <_free_r>
 800b62a:	2300      	movs	r3, #0
 800b62c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	2300      	movs	r3, #0
 800b638:	6063      	str	r3, [r4, #4]
 800b63a:	6923      	ldr	r3, [r4, #16]
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	f043 0308 	orr.w	r3, r3, #8
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	6923      	ldr	r3, [r4, #16]
 800b648:	b94b      	cbnz	r3, 800b65e <__swsetup_r+0x7a>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b654:	d003      	beq.n	800b65e <__swsetup_r+0x7a>
 800b656:	4621      	mov	r1, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	f000 fe85 	bl	800c368 <__smakebuf_r>
 800b65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b662:	f013 0201 	ands.w	r2, r3, #1
 800b666:	d00a      	beq.n	800b67e <__swsetup_r+0x9a>
 800b668:	2200      	movs	r2, #0
 800b66a:	60a2      	str	r2, [r4, #8]
 800b66c:	6962      	ldr	r2, [r4, #20]
 800b66e:	4252      	negs	r2, r2
 800b670:	61a2      	str	r2, [r4, #24]
 800b672:	6922      	ldr	r2, [r4, #16]
 800b674:	b942      	cbnz	r2, 800b688 <__swsetup_r+0xa4>
 800b676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b67a:	d1c5      	bne.n	800b608 <__swsetup_r+0x24>
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	0799      	lsls	r1, r3, #30
 800b680:	bf58      	it	pl
 800b682:	6962      	ldrpl	r2, [r4, #20]
 800b684:	60a2      	str	r2, [r4, #8]
 800b686:	e7f4      	b.n	800b672 <__swsetup_r+0x8e>
 800b688:	2000      	movs	r0, #0
 800b68a:	e7f7      	b.n	800b67c <__swsetup_r+0x98>
 800b68c:	240000a0 	.word	0x240000a0

0800b690 <memset>:
 800b690:	4402      	add	r2, r0
 800b692:	4603      	mov	r3, r0
 800b694:	4293      	cmp	r3, r2
 800b696:	d100      	bne.n	800b69a <memset+0xa>
 800b698:	4770      	bx	lr
 800b69a:	f803 1b01 	strb.w	r1, [r3], #1
 800b69e:	e7f9      	b.n	800b694 <memset+0x4>

0800b6a0 <_close_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4d06      	ldr	r5, [pc, #24]	@ (800b6bc <_close_r+0x1c>)
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	4608      	mov	r0, r1
 800b6aa:	602b      	str	r3, [r5, #0]
 800b6ac:	f7f5 fecc 	bl	8001448 <_close>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_close_r+0x1a>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_close_r+0x1a>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	2400111c 	.word	0x2400111c

0800b6c0 <_lseek_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d07      	ldr	r5, [pc, #28]	@ (800b6e0 <_lseek_r+0x20>)
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	602a      	str	r2, [r5, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f7f5 fee1 	bl	8001496 <_lseek>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_lseek_r+0x1e>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_lseek_r+0x1e>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	2400111c 	.word	0x2400111c

0800b6e4 <_read_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	@ (800b704 <_read_r+0x20>)
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4608      	mov	r0, r1
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	602a      	str	r2, [r5, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f7f5 fe6f 	bl	80013d6 <_read>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_read_r+0x1e>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_read_r+0x1e>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	2400111c 	.word	0x2400111c

0800b708 <_write_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d07      	ldr	r5, [pc, #28]	@ (800b728 <_write_r+0x20>)
 800b70c:	4604      	mov	r4, r0
 800b70e:	4608      	mov	r0, r1
 800b710:	4611      	mov	r1, r2
 800b712:	2200      	movs	r2, #0
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	f7f5 fe7a 	bl	8001410 <_write>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_write_r+0x1e>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_write_r+0x1e>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	2400111c 	.word	0x2400111c

0800b72c <__errno>:
 800b72c:	4b01      	ldr	r3, [pc, #4]	@ (800b734 <__errno+0x8>)
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	240000a0 	.word	0x240000a0

0800b738 <__libc_init_array>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4d0d      	ldr	r5, [pc, #52]	@ (800b770 <__libc_init_array+0x38>)
 800b73c:	4c0d      	ldr	r4, [pc, #52]	@ (800b774 <__libc_init_array+0x3c>)
 800b73e:	1b64      	subs	r4, r4, r5
 800b740:	10a4      	asrs	r4, r4, #2
 800b742:	2600      	movs	r6, #0
 800b744:	42a6      	cmp	r6, r4
 800b746:	d109      	bne.n	800b75c <__libc_init_array+0x24>
 800b748:	4d0b      	ldr	r5, [pc, #44]	@ (800b778 <__libc_init_array+0x40>)
 800b74a:	4c0c      	ldr	r4, [pc, #48]	@ (800b77c <__libc_init_array+0x44>)
 800b74c:	f000 fed8 	bl	800c500 <_init>
 800b750:	1b64      	subs	r4, r4, r5
 800b752:	10a4      	asrs	r4, r4, #2
 800b754:	2600      	movs	r6, #0
 800b756:	42a6      	cmp	r6, r4
 800b758:	d105      	bne.n	800b766 <__libc_init_array+0x2e>
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b760:	4798      	blx	r3
 800b762:	3601      	adds	r6, #1
 800b764:	e7ee      	b.n	800b744 <__libc_init_array+0xc>
 800b766:	f855 3b04 	ldr.w	r3, [r5], #4
 800b76a:	4798      	blx	r3
 800b76c:	3601      	adds	r6, #1
 800b76e:	e7f2      	b.n	800b756 <__libc_init_array+0x1e>
 800b770:	080112e0 	.word	0x080112e0
 800b774:	080112e0 	.word	0x080112e0
 800b778:	080112e0 	.word	0x080112e0
 800b77c:	080112e4 	.word	0x080112e4

0800b780 <__retarget_lock_init_recursive>:
 800b780:	4770      	bx	lr

0800b782 <__retarget_lock_acquire_recursive>:
 800b782:	4770      	bx	lr

0800b784 <__retarget_lock_release_recursive>:
 800b784:	4770      	bx	lr
	...

0800b788 <_free_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4605      	mov	r5, r0
 800b78c:	2900      	cmp	r1, #0
 800b78e:	d041      	beq.n	800b814 <_free_r+0x8c>
 800b790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b794:	1f0c      	subs	r4, r1, #4
 800b796:	2b00      	cmp	r3, #0
 800b798:	bfb8      	it	lt
 800b79a:	18e4      	addlt	r4, r4, r3
 800b79c:	f000 f8e0 	bl	800b960 <__malloc_lock>
 800b7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b818 <_free_r+0x90>)
 800b7a2:	6813      	ldr	r3, [r2, #0]
 800b7a4:	b933      	cbnz	r3, 800b7b4 <_free_r+0x2c>
 800b7a6:	6063      	str	r3, [r4, #4]
 800b7a8:	6014      	str	r4, [r2, #0]
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7b0:	f000 b8dc 	b.w	800b96c <__malloc_unlock>
 800b7b4:	42a3      	cmp	r3, r4
 800b7b6:	d908      	bls.n	800b7ca <_free_r+0x42>
 800b7b8:	6820      	ldr	r0, [r4, #0]
 800b7ba:	1821      	adds	r1, r4, r0
 800b7bc:	428b      	cmp	r3, r1
 800b7be:	bf01      	itttt	eq
 800b7c0:	6819      	ldreq	r1, [r3, #0]
 800b7c2:	685b      	ldreq	r3, [r3, #4]
 800b7c4:	1809      	addeq	r1, r1, r0
 800b7c6:	6021      	streq	r1, [r4, #0]
 800b7c8:	e7ed      	b.n	800b7a6 <_free_r+0x1e>
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	b10b      	cbz	r3, 800b7d4 <_free_r+0x4c>
 800b7d0:	42a3      	cmp	r3, r4
 800b7d2:	d9fa      	bls.n	800b7ca <_free_r+0x42>
 800b7d4:	6811      	ldr	r1, [r2, #0]
 800b7d6:	1850      	adds	r0, r2, r1
 800b7d8:	42a0      	cmp	r0, r4
 800b7da:	d10b      	bne.n	800b7f4 <_free_r+0x6c>
 800b7dc:	6820      	ldr	r0, [r4, #0]
 800b7de:	4401      	add	r1, r0
 800b7e0:	1850      	adds	r0, r2, r1
 800b7e2:	4283      	cmp	r3, r0
 800b7e4:	6011      	str	r1, [r2, #0]
 800b7e6:	d1e0      	bne.n	800b7aa <_free_r+0x22>
 800b7e8:	6818      	ldr	r0, [r3, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	6053      	str	r3, [r2, #4]
 800b7ee:	4408      	add	r0, r1
 800b7f0:	6010      	str	r0, [r2, #0]
 800b7f2:	e7da      	b.n	800b7aa <_free_r+0x22>
 800b7f4:	d902      	bls.n	800b7fc <_free_r+0x74>
 800b7f6:	230c      	movs	r3, #12
 800b7f8:	602b      	str	r3, [r5, #0]
 800b7fa:	e7d6      	b.n	800b7aa <_free_r+0x22>
 800b7fc:	6820      	ldr	r0, [r4, #0]
 800b7fe:	1821      	adds	r1, r4, r0
 800b800:	428b      	cmp	r3, r1
 800b802:	bf04      	itt	eq
 800b804:	6819      	ldreq	r1, [r3, #0]
 800b806:	685b      	ldreq	r3, [r3, #4]
 800b808:	6063      	str	r3, [r4, #4]
 800b80a:	bf04      	itt	eq
 800b80c:	1809      	addeq	r1, r1, r0
 800b80e:	6021      	streq	r1, [r4, #0]
 800b810:	6054      	str	r4, [r2, #4]
 800b812:	e7ca      	b.n	800b7aa <_free_r+0x22>
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	bf00      	nop
 800b818:	24001128 	.word	0x24001128

0800b81c <sbrk_aligned>:
 800b81c:	b570      	push	{r4, r5, r6, lr}
 800b81e:	4e0f      	ldr	r6, [pc, #60]	@ (800b85c <sbrk_aligned+0x40>)
 800b820:	460c      	mov	r4, r1
 800b822:	6831      	ldr	r1, [r6, #0]
 800b824:	4605      	mov	r5, r0
 800b826:	b911      	cbnz	r1, 800b82e <sbrk_aligned+0x12>
 800b828:	f000 fe16 	bl	800c458 <_sbrk_r>
 800b82c:	6030      	str	r0, [r6, #0]
 800b82e:	4621      	mov	r1, r4
 800b830:	4628      	mov	r0, r5
 800b832:	f000 fe11 	bl	800c458 <_sbrk_r>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	d103      	bne.n	800b842 <sbrk_aligned+0x26>
 800b83a:	f04f 34ff 	mov.w	r4, #4294967295
 800b83e:	4620      	mov	r0, r4
 800b840:	bd70      	pop	{r4, r5, r6, pc}
 800b842:	1cc4      	adds	r4, r0, #3
 800b844:	f024 0403 	bic.w	r4, r4, #3
 800b848:	42a0      	cmp	r0, r4
 800b84a:	d0f8      	beq.n	800b83e <sbrk_aligned+0x22>
 800b84c:	1a21      	subs	r1, r4, r0
 800b84e:	4628      	mov	r0, r5
 800b850:	f000 fe02 	bl	800c458 <_sbrk_r>
 800b854:	3001      	adds	r0, #1
 800b856:	d1f2      	bne.n	800b83e <sbrk_aligned+0x22>
 800b858:	e7ef      	b.n	800b83a <sbrk_aligned+0x1e>
 800b85a:	bf00      	nop
 800b85c:	24001124 	.word	0x24001124

0800b860 <_malloc_r>:
 800b860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b864:	1ccd      	adds	r5, r1, #3
 800b866:	f025 0503 	bic.w	r5, r5, #3
 800b86a:	3508      	adds	r5, #8
 800b86c:	2d0c      	cmp	r5, #12
 800b86e:	bf38      	it	cc
 800b870:	250c      	movcc	r5, #12
 800b872:	2d00      	cmp	r5, #0
 800b874:	4606      	mov	r6, r0
 800b876:	db01      	blt.n	800b87c <_malloc_r+0x1c>
 800b878:	42a9      	cmp	r1, r5
 800b87a:	d904      	bls.n	800b886 <_malloc_r+0x26>
 800b87c:	230c      	movs	r3, #12
 800b87e:	6033      	str	r3, [r6, #0]
 800b880:	2000      	movs	r0, #0
 800b882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b95c <_malloc_r+0xfc>
 800b88a:	f000 f869 	bl	800b960 <__malloc_lock>
 800b88e:	f8d8 3000 	ldr.w	r3, [r8]
 800b892:	461c      	mov	r4, r3
 800b894:	bb44      	cbnz	r4, 800b8e8 <_malloc_r+0x88>
 800b896:	4629      	mov	r1, r5
 800b898:	4630      	mov	r0, r6
 800b89a:	f7ff ffbf 	bl	800b81c <sbrk_aligned>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	d158      	bne.n	800b956 <_malloc_r+0xf6>
 800b8a4:	f8d8 4000 	ldr.w	r4, [r8]
 800b8a8:	4627      	mov	r7, r4
 800b8aa:	2f00      	cmp	r7, #0
 800b8ac:	d143      	bne.n	800b936 <_malloc_r+0xd6>
 800b8ae:	2c00      	cmp	r4, #0
 800b8b0:	d04b      	beq.n	800b94a <_malloc_r+0xea>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	eb04 0903 	add.w	r9, r4, r3
 800b8bc:	f000 fdcc 	bl	800c458 <_sbrk_r>
 800b8c0:	4581      	cmp	r9, r0
 800b8c2:	d142      	bne.n	800b94a <_malloc_r+0xea>
 800b8c4:	6821      	ldr	r1, [r4, #0]
 800b8c6:	1a6d      	subs	r5, r5, r1
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f7ff ffa6 	bl	800b81c <sbrk_aligned>
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d03a      	beq.n	800b94a <_malloc_r+0xea>
 800b8d4:	6823      	ldr	r3, [r4, #0]
 800b8d6:	442b      	add	r3, r5
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	f8d8 3000 	ldr.w	r3, [r8]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	bb62      	cbnz	r2, 800b93c <_malloc_r+0xdc>
 800b8e2:	f8c8 7000 	str.w	r7, [r8]
 800b8e6:	e00f      	b.n	800b908 <_malloc_r+0xa8>
 800b8e8:	6822      	ldr	r2, [r4, #0]
 800b8ea:	1b52      	subs	r2, r2, r5
 800b8ec:	d420      	bmi.n	800b930 <_malloc_r+0xd0>
 800b8ee:	2a0b      	cmp	r2, #11
 800b8f0:	d917      	bls.n	800b922 <_malloc_r+0xc2>
 800b8f2:	1961      	adds	r1, r4, r5
 800b8f4:	42a3      	cmp	r3, r4
 800b8f6:	6025      	str	r5, [r4, #0]
 800b8f8:	bf18      	it	ne
 800b8fa:	6059      	strne	r1, [r3, #4]
 800b8fc:	6863      	ldr	r3, [r4, #4]
 800b8fe:	bf08      	it	eq
 800b900:	f8c8 1000 	streq.w	r1, [r8]
 800b904:	5162      	str	r2, [r4, r5]
 800b906:	604b      	str	r3, [r1, #4]
 800b908:	4630      	mov	r0, r6
 800b90a:	f000 f82f 	bl	800b96c <__malloc_unlock>
 800b90e:	f104 000b 	add.w	r0, r4, #11
 800b912:	1d23      	adds	r3, r4, #4
 800b914:	f020 0007 	bic.w	r0, r0, #7
 800b918:	1ac2      	subs	r2, r0, r3
 800b91a:	bf1c      	itt	ne
 800b91c:	1a1b      	subne	r3, r3, r0
 800b91e:	50a3      	strne	r3, [r4, r2]
 800b920:	e7af      	b.n	800b882 <_malloc_r+0x22>
 800b922:	6862      	ldr	r2, [r4, #4]
 800b924:	42a3      	cmp	r3, r4
 800b926:	bf0c      	ite	eq
 800b928:	f8c8 2000 	streq.w	r2, [r8]
 800b92c:	605a      	strne	r2, [r3, #4]
 800b92e:	e7eb      	b.n	800b908 <_malloc_r+0xa8>
 800b930:	4623      	mov	r3, r4
 800b932:	6864      	ldr	r4, [r4, #4]
 800b934:	e7ae      	b.n	800b894 <_malloc_r+0x34>
 800b936:	463c      	mov	r4, r7
 800b938:	687f      	ldr	r7, [r7, #4]
 800b93a:	e7b6      	b.n	800b8aa <_malloc_r+0x4a>
 800b93c:	461a      	mov	r2, r3
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	42a3      	cmp	r3, r4
 800b942:	d1fb      	bne.n	800b93c <_malloc_r+0xdc>
 800b944:	2300      	movs	r3, #0
 800b946:	6053      	str	r3, [r2, #4]
 800b948:	e7de      	b.n	800b908 <_malloc_r+0xa8>
 800b94a:	230c      	movs	r3, #12
 800b94c:	6033      	str	r3, [r6, #0]
 800b94e:	4630      	mov	r0, r6
 800b950:	f000 f80c 	bl	800b96c <__malloc_unlock>
 800b954:	e794      	b.n	800b880 <_malloc_r+0x20>
 800b956:	6005      	str	r5, [r0, #0]
 800b958:	e7d6      	b.n	800b908 <_malloc_r+0xa8>
 800b95a:	bf00      	nop
 800b95c:	24001128 	.word	0x24001128

0800b960 <__malloc_lock>:
 800b960:	4801      	ldr	r0, [pc, #4]	@ (800b968 <__malloc_lock+0x8>)
 800b962:	f7ff bf0e 	b.w	800b782 <__retarget_lock_acquire_recursive>
 800b966:	bf00      	nop
 800b968:	24001120 	.word	0x24001120

0800b96c <__malloc_unlock>:
 800b96c:	4801      	ldr	r0, [pc, #4]	@ (800b974 <__malloc_unlock+0x8>)
 800b96e:	f7ff bf09 	b.w	800b784 <__retarget_lock_release_recursive>
 800b972:	bf00      	nop
 800b974:	24001120 	.word	0x24001120

0800b978 <__ssputs_r>:
 800b978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	688e      	ldr	r6, [r1, #8]
 800b97e:	461f      	mov	r7, r3
 800b980:	42be      	cmp	r6, r7
 800b982:	680b      	ldr	r3, [r1, #0]
 800b984:	4682      	mov	sl, r0
 800b986:	460c      	mov	r4, r1
 800b988:	4690      	mov	r8, r2
 800b98a:	d82d      	bhi.n	800b9e8 <__ssputs_r+0x70>
 800b98c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b990:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b994:	d026      	beq.n	800b9e4 <__ssputs_r+0x6c>
 800b996:	6965      	ldr	r5, [r4, #20]
 800b998:	6909      	ldr	r1, [r1, #16]
 800b99a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b99e:	eba3 0901 	sub.w	r9, r3, r1
 800b9a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9a6:	1c7b      	adds	r3, r7, #1
 800b9a8:	444b      	add	r3, r9
 800b9aa:	106d      	asrs	r5, r5, #1
 800b9ac:	429d      	cmp	r5, r3
 800b9ae:	bf38      	it	cc
 800b9b0:	461d      	movcc	r5, r3
 800b9b2:	0553      	lsls	r3, r2, #21
 800b9b4:	d527      	bpl.n	800ba06 <__ssputs_r+0x8e>
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7ff ff52 	bl	800b860 <_malloc_r>
 800b9bc:	4606      	mov	r6, r0
 800b9be:	b360      	cbz	r0, 800ba1a <__ssputs_r+0xa2>
 800b9c0:	6921      	ldr	r1, [r4, #16]
 800b9c2:	464a      	mov	r2, r9
 800b9c4:	f000 fd58 	bl	800c478 <memcpy>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b9ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	6126      	str	r6, [r4, #16]
 800b9d6:	6165      	str	r5, [r4, #20]
 800b9d8:	444e      	add	r6, r9
 800b9da:	eba5 0509 	sub.w	r5, r5, r9
 800b9de:	6026      	str	r6, [r4, #0]
 800b9e0:	60a5      	str	r5, [r4, #8]
 800b9e2:	463e      	mov	r6, r7
 800b9e4:	42be      	cmp	r6, r7
 800b9e6:	d900      	bls.n	800b9ea <__ssputs_r+0x72>
 800b9e8:	463e      	mov	r6, r7
 800b9ea:	6820      	ldr	r0, [r4, #0]
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	4641      	mov	r1, r8
 800b9f0:	f000 fcf6 	bl	800c3e0 <memmove>
 800b9f4:	68a3      	ldr	r3, [r4, #8]
 800b9f6:	1b9b      	subs	r3, r3, r6
 800b9f8:	60a3      	str	r3, [r4, #8]
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	4433      	add	r3, r6
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	2000      	movs	r0, #0
 800ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba06:	462a      	mov	r2, r5
 800ba08:	f000 fd44 	bl	800c494 <_realloc_r>
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d1e0      	bne.n	800b9d4 <__ssputs_r+0x5c>
 800ba12:	6921      	ldr	r1, [r4, #16]
 800ba14:	4650      	mov	r0, sl
 800ba16:	f7ff feb7 	bl	800b788 <_free_r>
 800ba1a:	230c      	movs	r3, #12
 800ba1c:	f8ca 3000 	str.w	r3, [sl]
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba26:	81a3      	strh	r3, [r4, #12]
 800ba28:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2c:	e7e9      	b.n	800ba02 <__ssputs_r+0x8a>
	...

0800ba30 <_svfiprintf_r>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	4698      	mov	r8, r3
 800ba36:	898b      	ldrh	r3, [r1, #12]
 800ba38:	061b      	lsls	r3, r3, #24
 800ba3a:	b09d      	sub	sp, #116	@ 0x74
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	460d      	mov	r5, r1
 800ba40:	4614      	mov	r4, r2
 800ba42:	d510      	bpl.n	800ba66 <_svfiprintf_r+0x36>
 800ba44:	690b      	ldr	r3, [r1, #16]
 800ba46:	b973      	cbnz	r3, 800ba66 <_svfiprintf_r+0x36>
 800ba48:	2140      	movs	r1, #64	@ 0x40
 800ba4a:	f7ff ff09 	bl	800b860 <_malloc_r>
 800ba4e:	6028      	str	r0, [r5, #0]
 800ba50:	6128      	str	r0, [r5, #16]
 800ba52:	b930      	cbnz	r0, 800ba62 <_svfiprintf_r+0x32>
 800ba54:	230c      	movs	r3, #12
 800ba56:	603b      	str	r3, [r7, #0]
 800ba58:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5c:	b01d      	add	sp, #116	@ 0x74
 800ba5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba62:	2340      	movs	r3, #64	@ 0x40
 800ba64:	616b      	str	r3, [r5, #20]
 800ba66:	2300      	movs	r3, #0
 800ba68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba6a:	2320      	movs	r3, #32
 800ba6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba74:	2330      	movs	r3, #48	@ 0x30
 800ba76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc14 <_svfiprintf_r+0x1e4>
 800ba7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba7e:	f04f 0901 	mov.w	r9, #1
 800ba82:	4623      	mov	r3, r4
 800ba84:	469a      	mov	sl, r3
 800ba86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba8a:	b10a      	cbz	r2, 800ba90 <_svfiprintf_r+0x60>
 800ba8c:	2a25      	cmp	r2, #37	@ 0x25
 800ba8e:	d1f9      	bne.n	800ba84 <_svfiprintf_r+0x54>
 800ba90:	ebba 0b04 	subs.w	fp, sl, r4
 800ba94:	d00b      	beq.n	800baae <_svfiprintf_r+0x7e>
 800ba96:	465b      	mov	r3, fp
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f7ff ff6b 	bl	800b978 <__ssputs_r>
 800baa2:	3001      	adds	r0, #1
 800baa4:	f000 80a7 	beq.w	800bbf6 <_svfiprintf_r+0x1c6>
 800baa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baaa:	445a      	add	r2, fp
 800baac:	9209      	str	r2, [sp, #36]	@ 0x24
 800baae:	f89a 3000 	ldrb.w	r3, [sl]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 809f 	beq.w	800bbf6 <_svfiprintf_r+0x1c6>
 800bab8:	2300      	movs	r3, #0
 800baba:	f04f 32ff 	mov.w	r2, #4294967295
 800babe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bac2:	f10a 0a01 	add.w	sl, sl, #1
 800bac6:	9304      	str	r3, [sp, #16]
 800bac8:	9307      	str	r3, [sp, #28]
 800baca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bace:	931a      	str	r3, [sp, #104]	@ 0x68
 800bad0:	4654      	mov	r4, sl
 800bad2:	2205      	movs	r2, #5
 800bad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad8:	484e      	ldr	r0, [pc, #312]	@ (800bc14 <_svfiprintf_r+0x1e4>)
 800bada:	f7f4 fc01 	bl	80002e0 <memchr>
 800bade:	9a04      	ldr	r2, [sp, #16]
 800bae0:	b9d8      	cbnz	r0, 800bb1a <_svfiprintf_r+0xea>
 800bae2:	06d0      	lsls	r0, r2, #27
 800bae4:	bf44      	itt	mi
 800bae6:	2320      	movmi	r3, #32
 800bae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baec:	0711      	lsls	r1, r2, #28
 800baee:	bf44      	itt	mi
 800baf0:	232b      	movmi	r3, #43	@ 0x2b
 800baf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bafa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bafc:	d015      	beq.n	800bb2a <_svfiprintf_r+0xfa>
 800bafe:	9a07      	ldr	r2, [sp, #28]
 800bb00:	4654      	mov	r4, sl
 800bb02:	2000      	movs	r0, #0
 800bb04:	f04f 0c0a 	mov.w	ip, #10
 800bb08:	4621      	mov	r1, r4
 800bb0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb0e:	3b30      	subs	r3, #48	@ 0x30
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d94b      	bls.n	800bbac <_svfiprintf_r+0x17c>
 800bb14:	b1b0      	cbz	r0, 800bb44 <_svfiprintf_r+0x114>
 800bb16:	9207      	str	r2, [sp, #28]
 800bb18:	e014      	b.n	800bb44 <_svfiprintf_r+0x114>
 800bb1a:	eba0 0308 	sub.w	r3, r0, r8
 800bb1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb22:	4313      	orrs	r3, r2
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	46a2      	mov	sl, r4
 800bb28:	e7d2      	b.n	800bad0 <_svfiprintf_r+0xa0>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	1d19      	adds	r1, r3, #4
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	9103      	str	r1, [sp, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfbb      	ittet	lt
 800bb36:	425b      	neglt	r3, r3
 800bb38:	f042 0202 	orrlt.w	r2, r2, #2
 800bb3c:	9307      	strge	r3, [sp, #28]
 800bb3e:	9307      	strlt	r3, [sp, #28]
 800bb40:	bfb8      	it	lt
 800bb42:	9204      	strlt	r2, [sp, #16]
 800bb44:	7823      	ldrb	r3, [r4, #0]
 800bb46:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb48:	d10a      	bne.n	800bb60 <_svfiprintf_r+0x130>
 800bb4a:	7863      	ldrb	r3, [r4, #1]
 800bb4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb4e:	d132      	bne.n	800bbb6 <_svfiprintf_r+0x186>
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	9203      	str	r2, [sp, #12]
 800bb58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb5c:	3402      	adds	r4, #2
 800bb5e:	9305      	str	r3, [sp, #20]
 800bb60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc24 <_svfiprintf_r+0x1f4>
 800bb64:	7821      	ldrb	r1, [r4, #0]
 800bb66:	2203      	movs	r2, #3
 800bb68:	4650      	mov	r0, sl
 800bb6a:	f7f4 fbb9 	bl	80002e0 <memchr>
 800bb6e:	b138      	cbz	r0, 800bb80 <_svfiprintf_r+0x150>
 800bb70:	9b04      	ldr	r3, [sp, #16]
 800bb72:	eba0 000a 	sub.w	r0, r0, sl
 800bb76:	2240      	movs	r2, #64	@ 0x40
 800bb78:	4082      	lsls	r2, r0
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	3401      	adds	r4, #1
 800bb7e:	9304      	str	r3, [sp, #16]
 800bb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb84:	4824      	ldr	r0, [pc, #144]	@ (800bc18 <_svfiprintf_r+0x1e8>)
 800bb86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb8a:	2206      	movs	r2, #6
 800bb8c:	f7f4 fba8 	bl	80002e0 <memchr>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d036      	beq.n	800bc02 <_svfiprintf_r+0x1d2>
 800bb94:	4b21      	ldr	r3, [pc, #132]	@ (800bc1c <_svfiprintf_r+0x1ec>)
 800bb96:	bb1b      	cbnz	r3, 800bbe0 <_svfiprintf_r+0x1b0>
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	3307      	adds	r3, #7
 800bb9c:	f023 0307 	bic.w	r3, r3, #7
 800bba0:	3308      	adds	r3, #8
 800bba2:	9303      	str	r3, [sp, #12]
 800bba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba6:	4433      	add	r3, r6
 800bba8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbaa:	e76a      	b.n	800ba82 <_svfiprintf_r+0x52>
 800bbac:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	e7a8      	b.n	800bb08 <_svfiprintf_r+0xd8>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	3401      	adds	r4, #1
 800bbba:	9305      	str	r3, [sp, #20]
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	f04f 0c0a 	mov.w	ip, #10
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc8:	3a30      	subs	r2, #48	@ 0x30
 800bbca:	2a09      	cmp	r2, #9
 800bbcc:	d903      	bls.n	800bbd6 <_svfiprintf_r+0x1a6>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d0c6      	beq.n	800bb60 <_svfiprintf_r+0x130>
 800bbd2:	9105      	str	r1, [sp, #20]
 800bbd4:	e7c4      	b.n	800bb60 <_svfiprintf_r+0x130>
 800bbd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbda:	4604      	mov	r4, r0
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e7f0      	b.n	800bbc2 <_svfiprintf_r+0x192>
 800bbe0:	ab03      	add	r3, sp, #12
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	462a      	mov	r2, r5
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	@ (800bc20 <_svfiprintf_r+0x1f0>)
 800bbe8:	a904      	add	r1, sp, #16
 800bbea:	4638      	mov	r0, r7
 800bbec:	f3af 8000 	nop.w
 800bbf0:	1c42      	adds	r2, r0, #1
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	d1d6      	bne.n	800bba4 <_svfiprintf_r+0x174>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	065b      	lsls	r3, r3, #25
 800bbfa:	f53f af2d 	bmi.w	800ba58 <_svfiprintf_r+0x28>
 800bbfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc00:	e72c      	b.n	800ba5c <_svfiprintf_r+0x2c>
 800bc02:	ab03      	add	r3, sp, #12
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	462a      	mov	r2, r5
 800bc08:	4b05      	ldr	r3, [pc, #20]	@ (800bc20 <_svfiprintf_r+0x1f0>)
 800bc0a:	a904      	add	r1, sp, #16
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	f000 f9bb 	bl	800bf88 <_printf_i>
 800bc12:	e7ed      	b.n	800bbf0 <_svfiprintf_r+0x1c0>
 800bc14:	080112a4 	.word	0x080112a4
 800bc18:	080112ae 	.word	0x080112ae
 800bc1c:	00000000 	.word	0x00000000
 800bc20:	0800b979 	.word	0x0800b979
 800bc24:	080112aa 	.word	0x080112aa

0800bc28 <__sfputc_r>:
 800bc28:	6893      	ldr	r3, [r2, #8]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	b410      	push	{r4}
 800bc30:	6093      	str	r3, [r2, #8]
 800bc32:	da08      	bge.n	800bc46 <__sfputc_r+0x1e>
 800bc34:	6994      	ldr	r4, [r2, #24]
 800bc36:	42a3      	cmp	r3, r4
 800bc38:	db01      	blt.n	800bc3e <__sfputc_r+0x16>
 800bc3a:	290a      	cmp	r1, #10
 800bc3c:	d103      	bne.n	800bc46 <__sfputc_r+0x1e>
 800bc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc42:	f7ff bc90 	b.w	800b566 <__swbuf_r>
 800bc46:	6813      	ldr	r3, [r2, #0]
 800bc48:	1c58      	adds	r0, r3, #1
 800bc4a:	6010      	str	r0, [r2, #0]
 800bc4c:	7019      	strb	r1, [r3, #0]
 800bc4e:	4608      	mov	r0, r1
 800bc50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <__sfputs_r>:
 800bc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc58:	4606      	mov	r6, r0
 800bc5a:	460f      	mov	r7, r1
 800bc5c:	4614      	mov	r4, r2
 800bc5e:	18d5      	adds	r5, r2, r3
 800bc60:	42ac      	cmp	r4, r5
 800bc62:	d101      	bne.n	800bc68 <__sfputs_r+0x12>
 800bc64:	2000      	movs	r0, #0
 800bc66:	e007      	b.n	800bc78 <__sfputs_r+0x22>
 800bc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6c:	463a      	mov	r2, r7
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff ffda 	bl	800bc28 <__sfputc_r>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d1f3      	bne.n	800bc60 <__sfputs_r+0xa>
 800bc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc7c <_vfiprintf_r>:
 800bc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc80:	460d      	mov	r5, r1
 800bc82:	b09d      	sub	sp, #116	@ 0x74
 800bc84:	4614      	mov	r4, r2
 800bc86:	4698      	mov	r8, r3
 800bc88:	4606      	mov	r6, r0
 800bc8a:	b118      	cbz	r0, 800bc94 <_vfiprintf_r+0x18>
 800bc8c:	6a03      	ldr	r3, [r0, #32]
 800bc8e:	b90b      	cbnz	r3, 800bc94 <_vfiprintf_r+0x18>
 800bc90:	f7ff fb5e 	bl	800b350 <__sinit>
 800bc94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc96:	07d9      	lsls	r1, r3, #31
 800bc98:	d405      	bmi.n	800bca6 <_vfiprintf_r+0x2a>
 800bc9a:	89ab      	ldrh	r3, [r5, #12]
 800bc9c:	059a      	lsls	r2, r3, #22
 800bc9e:	d402      	bmi.n	800bca6 <_vfiprintf_r+0x2a>
 800bca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bca2:	f7ff fd6e 	bl	800b782 <__retarget_lock_acquire_recursive>
 800bca6:	89ab      	ldrh	r3, [r5, #12]
 800bca8:	071b      	lsls	r3, r3, #28
 800bcaa:	d501      	bpl.n	800bcb0 <_vfiprintf_r+0x34>
 800bcac:	692b      	ldr	r3, [r5, #16]
 800bcae:	b99b      	cbnz	r3, 800bcd8 <_vfiprintf_r+0x5c>
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	f7ff fc96 	bl	800b5e4 <__swsetup_r>
 800bcb8:	b170      	cbz	r0, 800bcd8 <_vfiprintf_r+0x5c>
 800bcba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcbc:	07dc      	lsls	r4, r3, #31
 800bcbe:	d504      	bpl.n	800bcca <_vfiprintf_r+0x4e>
 800bcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc4:	b01d      	add	sp, #116	@ 0x74
 800bcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	0598      	lsls	r0, r3, #22
 800bcce:	d4f7      	bmi.n	800bcc0 <_vfiprintf_r+0x44>
 800bcd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcd2:	f7ff fd57 	bl	800b784 <__retarget_lock_release_recursive>
 800bcd6:	e7f3      	b.n	800bcc0 <_vfiprintf_r+0x44>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcdc:	2320      	movs	r3, #32
 800bcde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bce2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bce6:	2330      	movs	r3, #48	@ 0x30
 800bce8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be98 <_vfiprintf_r+0x21c>
 800bcec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcf0:	f04f 0901 	mov.w	r9, #1
 800bcf4:	4623      	mov	r3, r4
 800bcf6:	469a      	mov	sl, r3
 800bcf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcfc:	b10a      	cbz	r2, 800bd02 <_vfiprintf_r+0x86>
 800bcfe:	2a25      	cmp	r2, #37	@ 0x25
 800bd00:	d1f9      	bne.n	800bcf6 <_vfiprintf_r+0x7a>
 800bd02:	ebba 0b04 	subs.w	fp, sl, r4
 800bd06:	d00b      	beq.n	800bd20 <_vfiprintf_r+0xa4>
 800bd08:	465b      	mov	r3, fp
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f7ff ffa1 	bl	800bc56 <__sfputs_r>
 800bd14:	3001      	adds	r0, #1
 800bd16:	f000 80a7 	beq.w	800be68 <_vfiprintf_r+0x1ec>
 800bd1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd1c:	445a      	add	r2, fp
 800bd1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd20:	f89a 3000 	ldrb.w	r3, [sl]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 809f 	beq.w	800be68 <_vfiprintf_r+0x1ec>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd34:	f10a 0a01 	add.w	sl, sl, #1
 800bd38:	9304      	str	r3, [sp, #16]
 800bd3a:	9307      	str	r3, [sp, #28]
 800bd3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd40:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd42:	4654      	mov	r4, sl
 800bd44:	2205      	movs	r2, #5
 800bd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd4a:	4853      	ldr	r0, [pc, #332]	@ (800be98 <_vfiprintf_r+0x21c>)
 800bd4c:	f7f4 fac8 	bl	80002e0 <memchr>
 800bd50:	9a04      	ldr	r2, [sp, #16]
 800bd52:	b9d8      	cbnz	r0, 800bd8c <_vfiprintf_r+0x110>
 800bd54:	06d1      	lsls	r1, r2, #27
 800bd56:	bf44      	itt	mi
 800bd58:	2320      	movmi	r3, #32
 800bd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd5e:	0713      	lsls	r3, r2, #28
 800bd60:	bf44      	itt	mi
 800bd62:	232b      	movmi	r3, #43	@ 0x2b
 800bd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd68:	f89a 3000 	ldrb.w	r3, [sl]
 800bd6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd6e:	d015      	beq.n	800bd9c <_vfiprintf_r+0x120>
 800bd70:	9a07      	ldr	r2, [sp, #28]
 800bd72:	4654      	mov	r4, sl
 800bd74:	2000      	movs	r0, #0
 800bd76:	f04f 0c0a 	mov.w	ip, #10
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd80:	3b30      	subs	r3, #48	@ 0x30
 800bd82:	2b09      	cmp	r3, #9
 800bd84:	d94b      	bls.n	800be1e <_vfiprintf_r+0x1a2>
 800bd86:	b1b0      	cbz	r0, 800bdb6 <_vfiprintf_r+0x13a>
 800bd88:	9207      	str	r2, [sp, #28]
 800bd8a:	e014      	b.n	800bdb6 <_vfiprintf_r+0x13a>
 800bd8c:	eba0 0308 	sub.w	r3, r0, r8
 800bd90:	fa09 f303 	lsl.w	r3, r9, r3
 800bd94:	4313      	orrs	r3, r2
 800bd96:	9304      	str	r3, [sp, #16]
 800bd98:	46a2      	mov	sl, r4
 800bd9a:	e7d2      	b.n	800bd42 <_vfiprintf_r+0xc6>
 800bd9c:	9b03      	ldr	r3, [sp, #12]
 800bd9e:	1d19      	adds	r1, r3, #4
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	9103      	str	r1, [sp, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	bfbb      	ittet	lt
 800bda8:	425b      	neglt	r3, r3
 800bdaa:	f042 0202 	orrlt.w	r2, r2, #2
 800bdae:	9307      	strge	r3, [sp, #28]
 800bdb0:	9307      	strlt	r3, [sp, #28]
 800bdb2:	bfb8      	it	lt
 800bdb4:	9204      	strlt	r2, [sp, #16]
 800bdb6:	7823      	ldrb	r3, [r4, #0]
 800bdb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdba:	d10a      	bne.n	800bdd2 <_vfiprintf_r+0x156>
 800bdbc:	7863      	ldrb	r3, [r4, #1]
 800bdbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdc0:	d132      	bne.n	800be28 <_vfiprintf_r+0x1ac>
 800bdc2:	9b03      	ldr	r3, [sp, #12]
 800bdc4:	1d1a      	adds	r2, r3, #4
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	9203      	str	r2, [sp, #12]
 800bdca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdce:	3402      	adds	r4, #2
 800bdd0:	9305      	str	r3, [sp, #20]
 800bdd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bea8 <_vfiprintf_r+0x22c>
 800bdd6:	7821      	ldrb	r1, [r4, #0]
 800bdd8:	2203      	movs	r2, #3
 800bdda:	4650      	mov	r0, sl
 800bddc:	f7f4 fa80 	bl	80002e0 <memchr>
 800bde0:	b138      	cbz	r0, 800bdf2 <_vfiprintf_r+0x176>
 800bde2:	9b04      	ldr	r3, [sp, #16]
 800bde4:	eba0 000a 	sub.w	r0, r0, sl
 800bde8:	2240      	movs	r2, #64	@ 0x40
 800bdea:	4082      	lsls	r2, r0
 800bdec:	4313      	orrs	r3, r2
 800bdee:	3401      	adds	r4, #1
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf6:	4829      	ldr	r0, [pc, #164]	@ (800be9c <_vfiprintf_r+0x220>)
 800bdf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdfc:	2206      	movs	r2, #6
 800bdfe:	f7f4 fa6f 	bl	80002e0 <memchr>
 800be02:	2800      	cmp	r0, #0
 800be04:	d03f      	beq.n	800be86 <_vfiprintf_r+0x20a>
 800be06:	4b26      	ldr	r3, [pc, #152]	@ (800bea0 <_vfiprintf_r+0x224>)
 800be08:	bb1b      	cbnz	r3, 800be52 <_vfiprintf_r+0x1d6>
 800be0a:	9b03      	ldr	r3, [sp, #12]
 800be0c:	3307      	adds	r3, #7
 800be0e:	f023 0307 	bic.w	r3, r3, #7
 800be12:	3308      	adds	r3, #8
 800be14:	9303      	str	r3, [sp, #12]
 800be16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be18:	443b      	add	r3, r7
 800be1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be1c:	e76a      	b.n	800bcf4 <_vfiprintf_r+0x78>
 800be1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be22:	460c      	mov	r4, r1
 800be24:	2001      	movs	r0, #1
 800be26:	e7a8      	b.n	800bd7a <_vfiprintf_r+0xfe>
 800be28:	2300      	movs	r3, #0
 800be2a:	3401      	adds	r4, #1
 800be2c:	9305      	str	r3, [sp, #20]
 800be2e:	4619      	mov	r1, r3
 800be30:	f04f 0c0a 	mov.w	ip, #10
 800be34:	4620      	mov	r0, r4
 800be36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be3a:	3a30      	subs	r2, #48	@ 0x30
 800be3c:	2a09      	cmp	r2, #9
 800be3e:	d903      	bls.n	800be48 <_vfiprintf_r+0x1cc>
 800be40:	2b00      	cmp	r3, #0
 800be42:	d0c6      	beq.n	800bdd2 <_vfiprintf_r+0x156>
 800be44:	9105      	str	r1, [sp, #20]
 800be46:	e7c4      	b.n	800bdd2 <_vfiprintf_r+0x156>
 800be48:	fb0c 2101 	mla	r1, ip, r1, r2
 800be4c:	4604      	mov	r4, r0
 800be4e:	2301      	movs	r3, #1
 800be50:	e7f0      	b.n	800be34 <_vfiprintf_r+0x1b8>
 800be52:	ab03      	add	r3, sp, #12
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	462a      	mov	r2, r5
 800be58:	4b12      	ldr	r3, [pc, #72]	@ (800bea4 <_vfiprintf_r+0x228>)
 800be5a:	a904      	add	r1, sp, #16
 800be5c:	4630      	mov	r0, r6
 800be5e:	f3af 8000 	nop.w
 800be62:	4607      	mov	r7, r0
 800be64:	1c78      	adds	r0, r7, #1
 800be66:	d1d6      	bne.n	800be16 <_vfiprintf_r+0x19a>
 800be68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be6a:	07d9      	lsls	r1, r3, #31
 800be6c:	d405      	bmi.n	800be7a <_vfiprintf_r+0x1fe>
 800be6e:	89ab      	ldrh	r3, [r5, #12]
 800be70:	059a      	lsls	r2, r3, #22
 800be72:	d402      	bmi.n	800be7a <_vfiprintf_r+0x1fe>
 800be74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be76:	f7ff fc85 	bl	800b784 <__retarget_lock_release_recursive>
 800be7a:	89ab      	ldrh	r3, [r5, #12]
 800be7c:	065b      	lsls	r3, r3, #25
 800be7e:	f53f af1f 	bmi.w	800bcc0 <_vfiprintf_r+0x44>
 800be82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be84:	e71e      	b.n	800bcc4 <_vfiprintf_r+0x48>
 800be86:	ab03      	add	r3, sp, #12
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	462a      	mov	r2, r5
 800be8c:	4b05      	ldr	r3, [pc, #20]	@ (800bea4 <_vfiprintf_r+0x228>)
 800be8e:	a904      	add	r1, sp, #16
 800be90:	4630      	mov	r0, r6
 800be92:	f000 f879 	bl	800bf88 <_printf_i>
 800be96:	e7e4      	b.n	800be62 <_vfiprintf_r+0x1e6>
 800be98:	080112a4 	.word	0x080112a4
 800be9c:	080112ae 	.word	0x080112ae
 800bea0:	00000000 	.word	0x00000000
 800bea4:	0800bc57 	.word	0x0800bc57
 800bea8:	080112aa 	.word	0x080112aa

0800beac <_printf_common>:
 800beac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb0:	4616      	mov	r6, r2
 800beb2:	4698      	mov	r8, r3
 800beb4:	688a      	ldr	r2, [r1, #8]
 800beb6:	690b      	ldr	r3, [r1, #16]
 800beb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bebc:	4293      	cmp	r3, r2
 800bebe:	bfb8      	it	lt
 800bec0:	4613      	movlt	r3, r2
 800bec2:	6033      	str	r3, [r6, #0]
 800bec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bec8:	4607      	mov	r7, r0
 800beca:	460c      	mov	r4, r1
 800becc:	b10a      	cbz	r2, 800bed2 <_printf_common+0x26>
 800bece:	3301      	adds	r3, #1
 800bed0:	6033      	str	r3, [r6, #0]
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	0699      	lsls	r1, r3, #26
 800bed6:	bf42      	ittt	mi
 800bed8:	6833      	ldrmi	r3, [r6, #0]
 800beda:	3302      	addmi	r3, #2
 800bedc:	6033      	strmi	r3, [r6, #0]
 800bede:	6825      	ldr	r5, [r4, #0]
 800bee0:	f015 0506 	ands.w	r5, r5, #6
 800bee4:	d106      	bne.n	800bef4 <_printf_common+0x48>
 800bee6:	f104 0a19 	add.w	sl, r4, #25
 800beea:	68e3      	ldr	r3, [r4, #12]
 800beec:	6832      	ldr	r2, [r6, #0]
 800beee:	1a9b      	subs	r3, r3, r2
 800bef0:	42ab      	cmp	r3, r5
 800bef2:	dc26      	bgt.n	800bf42 <_printf_common+0x96>
 800bef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bef8:	6822      	ldr	r2, [r4, #0]
 800befa:	3b00      	subs	r3, #0
 800befc:	bf18      	it	ne
 800befe:	2301      	movne	r3, #1
 800bf00:	0692      	lsls	r2, r2, #26
 800bf02:	d42b      	bmi.n	800bf5c <_printf_common+0xb0>
 800bf04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf08:	4641      	mov	r1, r8
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	47c8      	blx	r9
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d01e      	beq.n	800bf50 <_printf_common+0xa4>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	6922      	ldr	r2, [r4, #16]
 800bf16:	f003 0306 	and.w	r3, r3, #6
 800bf1a:	2b04      	cmp	r3, #4
 800bf1c:	bf02      	ittt	eq
 800bf1e:	68e5      	ldreq	r5, [r4, #12]
 800bf20:	6833      	ldreq	r3, [r6, #0]
 800bf22:	1aed      	subeq	r5, r5, r3
 800bf24:	68a3      	ldr	r3, [r4, #8]
 800bf26:	bf0c      	ite	eq
 800bf28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf2c:	2500      	movne	r5, #0
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	bfc4      	itt	gt
 800bf32:	1a9b      	subgt	r3, r3, r2
 800bf34:	18ed      	addgt	r5, r5, r3
 800bf36:	2600      	movs	r6, #0
 800bf38:	341a      	adds	r4, #26
 800bf3a:	42b5      	cmp	r5, r6
 800bf3c:	d11a      	bne.n	800bf74 <_printf_common+0xc8>
 800bf3e:	2000      	movs	r0, #0
 800bf40:	e008      	b.n	800bf54 <_printf_common+0xa8>
 800bf42:	2301      	movs	r3, #1
 800bf44:	4652      	mov	r2, sl
 800bf46:	4641      	mov	r1, r8
 800bf48:	4638      	mov	r0, r7
 800bf4a:	47c8      	blx	r9
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	d103      	bne.n	800bf58 <_printf_common+0xac>
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf58:	3501      	adds	r5, #1
 800bf5a:	e7c6      	b.n	800beea <_printf_common+0x3e>
 800bf5c:	18e1      	adds	r1, r4, r3
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	2030      	movs	r0, #48	@ 0x30
 800bf62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf66:	4422      	add	r2, r4
 800bf68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf70:	3302      	adds	r3, #2
 800bf72:	e7c7      	b.n	800bf04 <_printf_common+0x58>
 800bf74:	2301      	movs	r3, #1
 800bf76:	4622      	mov	r2, r4
 800bf78:	4641      	mov	r1, r8
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	47c8      	blx	r9
 800bf7e:	3001      	adds	r0, #1
 800bf80:	d0e6      	beq.n	800bf50 <_printf_common+0xa4>
 800bf82:	3601      	adds	r6, #1
 800bf84:	e7d9      	b.n	800bf3a <_printf_common+0x8e>
	...

0800bf88 <_printf_i>:
 800bf88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8c:	7e0f      	ldrb	r7, [r1, #24]
 800bf8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf90:	2f78      	cmp	r7, #120	@ 0x78
 800bf92:	4691      	mov	r9, r2
 800bf94:	4680      	mov	r8, r0
 800bf96:	460c      	mov	r4, r1
 800bf98:	469a      	mov	sl, r3
 800bf9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf9e:	d807      	bhi.n	800bfb0 <_printf_i+0x28>
 800bfa0:	2f62      	cmp	r7, #98	@ 0x62
 800bfa2:	d80a      	bhi.n	800bfba <_printf_i+0x32>
 800bfa4:	2f00      	cmp	r7, #0
 800bfa6:	f000 80d1 	beq.w	800c14c <_printf_i+0x1c4>
 800bfaa:	2f58      	cmp	r7, #88	@ 0x58
 800bfac:	f000 80b8 	beq.w	800c120 <_printf_i+0x198>
 800bfb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfb8:	e03a      	b.n	800c030 <_printf_i+0xa8>
 800bfba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfbe:	2b15      	cmp	r3, #21
 800bfc0:	d8f6      	bhi.n	800bfb0 <_printf_i+0x28>
 800bfc2:	a101      	add	r1, pc, #4	@ (adr r1, 800bfc8 <_printf_i+0x40>)
 800bfc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfc8:	0800c021 	.word	0x0800c021
 800bfcc:	0800c035 	.word	0x0800c035
 800bfd0:	0800bfb1 	.word	0x0800bfb1
 800bfd4:	0800bfb1 	.word	0x0800bfb1
 800bfd8:	0800bfb1 	.word	0x0800bfb1
 800bfdc:	0800bfb1 	.word	0x0800bfb1
 800bfe0:	0800c035 	.word	0x0800c035
 800bfe4:	0800bfb1 	.word	0x0800bfb1
 800bfe8:	0800bfb1 	.word	0x0800bfb1
 800bfec:	0800bfb1 	.word	0x0800bfb1
 800bff0:	0800bfb1 	.word	0x0800bfb1
 800bff4:	0800c133 	.word	0x0800c133
 800bff8:	0800c05f 	.word	0x0800c05f
 800bffc:	0800c0ed 	.word	0x0800c0ed
 800c000:	0800bfb1 	.word	0x0800bfb1
 800c004:	0800bfb1 	.word	0x0800bfb1
 800c008:	0800c155 	.word	0x0800c155
 800c00c:	0800bfb1 	.word	0x0800bfb1
 800c010:	0800c05f 	.word	0x0800c05f
 800c014:	0800bfb1 	.word	0x0800bfb1
 800c018:	0800bfb1 	.word	0x0800bfb1
 800c01c:	0800c0f5 	.word	0x0800c0f5
 800c020:	6833      	ldr	r3, [r6, #0]
 800c022:	1d1a      	adds	r2, r3, #4
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6032      	str	r2, [r6, #0]
 800c028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c02c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c030:	2301      	movs	r3, #1
 800c032:	e09c      	b.n	800c16e <_printf_i+0x1e6>
 800c034:	6833      	ldr	r3, [r6, #0]
 800c036:	6820      	ldr	r0, [r4, #0]
 800c038:	1d19      	adds	r1, r3, #4
 800c03a:	6031      	str	r1, [r6, #0]
 800c03c:	0606      	lsls	r6, r0, #24
 800c03e:	d501      	bpl.n	800c044 <_printf_i+0xbc>
 800c040:	681d      	ldr	r5, [r3, #0]
 800c042:	e003      	b.n	800c04c <_printf_i+0xc4>
 800c044:	0645      	lsls	r5, r0, #25
 800c046:	d5fb      	bpl.n	800c040 <_printf_i+0xb8>
 800c048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	da03      	bge.n	800c058 <_printf_i+0xd0>
 800c050:	232d      	movs	r3, #45	@ 0x2d
 800c052:	426d      	negs	r5, r5
 800c054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c058:	4858      	ldr	r0, [pc, #352]	@ (800c1bc <_printf_i+0x234>)
 800c05a:	230a      	movs	r3, #10
 800c05c:	e011      	b.n	800c082 <_printf_i+0xfa>
 800c05e:	6821      	ldr	r1, [r4, #0]
 800c060:	6833      	ldr	r3, [r6, #0]
 800c062:	0608      	lsls	r0, r1, #24
 800c064:	f853 5b04 	ldr.w	r5, [r3], #4
 800c068:	d402      	bmi.n	800c070 <_printf_i+0xe8>
 800c06a:	0649      	lsls	r1, r1, #25
 800c06c:	bf48      	it	mi
 800c06e:	b2ad      	uxthmi	r5, r5
 800c070:	2f6f      	cmp	r7, #111	@ 0x6f
 800c072:	4852      	ldr	r0, [pc, #328]	@ (800c1bc <_printf_i+0x234>)
 800c074:	6033      	str	r3, [r6, #0]
 800c076:	bf14      	ite	ne
 800c078:	230a      	movne	r3, #10
 800c07a:	2308      	moveq	r3, #8
 800c07c:	2100      	movs	r1, #0
 800c07e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c082:	6866      	ldr	r6, [r4, #4]
 800c084:	60a6      	str	r6, [r4, #8]
 800c086:	2e00      	cmp	r6, #0
 800c088:	db05      	blt.n	800c096 <_printf_i+0x10e>
 800c08a:	6821      	ldr	r1, [r4, #0]
 800c08c:	432e      	orrs	r6, r5
 800c08e:	f021 0104 	bic.w	r1, r1, #4
 800c092:	6021      	str	r1, [r4, #0]
 800c094:	d04b      	beq.n	800c12e <_printf_i+0x1a6>
 800c096:	4616      	mov	r6, r2
 800c098:	fbb5 f1f3 	udiv	r1, r5, r3
 800c09c:	fb03 5711 	mls	r7, r3, r1, r5
 800c0a0:	5dc7      	ldrb	r7, [r0, r7]
 800c0a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0a6:	462f      	mov	r7, r5
 800c0a8:	42bb      	cmp	r3, r7
 800c0aa:	460d      	mov	r5, r1
 800c0ac:	d9f4      	bls.n	800c098 <_printf_i+0x110>
 800c0ae:	2b08      	cmp	r3, #8
 800c0b0:	d10b      	bne.n	800c0ca <_printf_i+0x142>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	07df      	lsls	r7, r3, #31
 800c0b6:	d508      	bpl.n	800c0ca <_printf_i+0x142>
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	6861      	ldr	r1, [r4, #4]
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	bfde      	ittt	le
 800c0c0:	2330      	movle	r3, #48	@ 0x30
 800c0c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0ca:	1b92      	subs	r2, r2, r6
 800c0cc:	6122      	str	r2, [r4, #16]
 800c0ce:	f8cd a000 	str.w	sl, [sp]
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	aa03      	add	r2, sp, #12
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4640      	mov	r0, r8
 800c0da:	f7ff fee7 	bl	800beac <_printf_common>
 800c0de:	3001      	adds	r0, #1
 800c0e0:	d14a      	bne.n	800c178 <_printf_i+0x1f0>
 800c0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e6:	b004      	add	sp, #16
 800c0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	f043 0320 	orr.w	r3, r3, #32
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	4832      	ldr	r0, [pc, #200]	@ (800c1c0 <_printf_i+0x238>)
 800c0f6:	2778      	movs	r7, #120	@ 0x78
 800c0f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	6831      	ldr	r1, [r6, #0]
 800c100:	061f      	lsls	r7, r3, #24
 800c102:	f851 5b04 	ldr.w	r5, [r1], #4
 800c106:	d402      	bmi.n	800c10e <_printf_i+0x186>
 800c108:	065f      	lsls	r7, r3, #25
 800c10a:	bf48      	it	mi
 800c10c:	b2ad      	uxthmi	r5, r5
 800c10e:	6031      	str	r1, [r6, #0]
 800c110:	07d9      	lsls	r1, r3, #31
 800c112:	bf44      	itt	mi
 800c114:	f043 0320 	orrmi.w	r3, r3, #32
 800c118:	6023      	strmi	r3, [r4, #0]
 800c11a:	b11d      	cbz	r5, 800c124 <_printf_i+0x19c>
 800c11c:	2310      	movs	r3, #16
 800c11e:	e7ad      	b.n	800c07c <_printf_i+0xf4>
 800c120:	4826      	ldr	r0, [pc, #152]	@ (800c1bc <_printf_i+0x234>)
 800c122:	e7e9      	b.n	800c0f8 <_printf_i+0x170>
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	f023 0320 	bic.w	r3, r3, #32
 800c12a:	6023      	str	r3, [r4, #0]
 800c12c:	e7f6      	b.n	800c11c <_printf_i+0x194>
 800c12e:	4616      	mov	r6, r2
 800c130:	e7bd      	b.n	800c0ae <_printf_i+0x126>
 800c132:	6833      	ldr	r3, [r6, #0]
 800c134:	6825      	ldr	r5, [r4, #0]
 800c136:	6961      	ldr	r1, [r4, #20]
 800c138:	1d18      	adds	r0, r3, #4
 800c13a:	6030      	str	r0, [r6, #0]
 800c13c:	062e      	lsls	r6, r5, #24
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	d501      	bpl.n	800c146 <_printf_i+0x1be>
 800c142:	6019      	str	r1, [r3, #0]
 800c144:	e002      	b.n	800c14c <_printf_i+0x1c4>
 800c146:	0668      	lsls	r0, r5, #25
 800c148:	d5fb      	bpl.n	800c142 <_printf_i+0x1ba>
 800c14a:	8019      	strh	r1, [r3, #0]
 800c14c:	2300      	movs	r3, #0
 800c14e:	6123      	str	r3, [r4, #16]
 800c150:	4616      	mov	r6, r2
 800c152:	e7bc      	b.n	800c0ce <_printf_i+0x146>
 800c154:	6833      	ldr	r3, [r6, #0]
 800c156:	1d1a      	adds	r2, r3, #4
 800c158:	6032      	str	r2, [r6, #0]
 800c15a:	681e      	ldr	r6, [r3, #0]
 800c15c:	6862      	ldr	r2, [r4, #4]
 800c15e:	2100      	movs	r1, #0
 800c160:	4630      	mov	r0, r6
 800c162:	f7f4 f8bd 	bl	80002e0 <memchr>
 800c166:	b108      	cbz	r0, 800c16c <_printf_i+0x1e4>
 800c168:	1b80      	subs	r0, r0, r6
 800c16a:	6060      	str	r0, [r4, #4]
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	6123      	str	r3, [r4, #16]
 800c170:	2300      	movs	r3, #0
 800c172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c176:	e7aa      	b.n	800c0ce <_printf_i+0x146>
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	4632      	mov	r2, r6
 800c17c:	4649      	mov	r1, r9
 800c17e:	4640      	mov	r0, r8
 800c180:	47d0      	blx	sl
 800c182:	3001      	adds	r0, #1
 800c184:	d0ad      	beq.n	800c0e2 <_printf_i+0x15a>
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	079b      	lsls	r3, r3, #30
 800c18a:	d413      	bmi.n	800c1b4 <_printf_i+0x22c>
 800c18c:	68e0      	ldr	r0, [r4, #12]
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	4298      	cmp	r0, r3
 800c192:	bfb8      	it	lt
 800c194:	4618      	movlt	r0, r3
 800c196:	e7a6      	b.n	800c0e6 <_printf_i+0x15e>
 800c198:	2301      	movs	r3, #1
 800c19a:	4632      	mov	r2, r6
 800c19c:	4649      	mov	r1, r9
 800c19e:	4640      	mov	r0, r8
 800c1a0:	47d0      	blx	sl
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	d09d      	beq.n	800c0e2 <_printf_i+0x15a>
 800c1a6:	3501      	adds	r5, #1
 800c1a8:	68e3      	ldr	r3, [r4, #12]
 800c1aa:	9903      	ldr	r1, [sp, #12]
 800c1ac:	1a5b      	subs	r3, r3, r1
 800c1ae:	42ab      	cmp	r3, r5
 800c1b0:	dcf2      	bgt.n	800c198 <_printf_i+0x210>
 800c1b2:	e7eb      	b.n	800c18c <_printf_i+0x204>
 800c1b4:	2500      	movs	r5, #0
 800c1b6:	f104 0619 	add.w	r6, r4, #25
 800c1ba:	e7f5      	b.n	800c1a8 <_printf_i+0x220>
 800c1bc:	080112b5 	.word	0x080112b5
 800c1c0:	080112c6 	.word	0x080112c6

0800c1c4 <__sflush_r>:
 800c1c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1cc:	0716      	lsls	r6, r2, #28
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	d454      	bmi.n	800c27e <__sflush_r+0xba>
 800c1d4:	684b      	ldr	r3, [r1, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	dc02      	bgt.n	800c1e0 <__sflush_r+0x1c>
 800c1da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	dd48      	ble.n	800c272 <__sflush_r+0xae>
 800c1e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1e2:	2e00      	cmp	r6, #0
 800c1e4:	d045      	beq.n	800c272 <__sflush_r+0xae>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1ec:	682f      	ldr	r7, [r5, #0]
 800c1ee:	6a21      	ldr	r1, [r4, #32]
 800c1f0:	602b      	str	r3, [r5, #0]
 800c1f2:	d030      	beq.n	800c256 <__sflush_r+0x92>
 800c1f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1f6:	89a3      	ldrh	r3, [r4, #12]
 800c1f8:	0759      	lsls	r1, r3, #29
 800c1fa:	d505      	bpl.n	800c208 <__sflush_r+0x44>
 800c1fc:	6863      	ldr	r3, [r4, #4]
 800c1fe:	1ad2      	subs	r2, r2, r3
 800c200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c202:	b10b      	cbz	r3, 800c208 <__sflush_r+0x44>
 800c204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c206:	1ad2      	subs	r2, r2, r3
 800c208:	2300      	movs	r3, #0
 800c20a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c20c:	6a21      	ldr	r1, [r4, #32]
 800c20e:	4628      	mov	r0, r5
 800c210:	47b0      	blx	r6
 800c212:	1c43      	adds	r3, r0, #1
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	d106      	bne.n	800c226 <__sflush_r+0x62>
 800c218:	6829      	ldr	r1, [r5, #0]
 800c21a:	291d      	cmp	r1, #29
 800c21c:	d82b      	bhi.n	800c276 <__sflush_r+0xb2>
 800c21e:	4a2a      	ldr	r2, [pc, #168]	@ (800c2c8 <__sflush_r+0x104>)
 800c220:	40ca      	lsrs	r2, r1
 800c222:	07d6      	lsls	r6, r2, #31
 800c224:	d527      	bpl.n	800c276 <__sflush_r+0xb2>
 800c226:	2200      	movs	r2, #0
 800c228:	6062      	str	r2, [r4, #4]
 800c22a:	04d9      	lsls	r1, r3, #19
 800c22c:	6922      	ldr	r2, [r4, #16]
 800c22e:	6022      	str	r2, [r4, #0]
 800c230:	d504      	bpl.n	800c23c <__sflush_r+0x78>
 800c232:	1c42      	adds	r2, r0, #1
 800c234:	d101      	bne.n	800c23a <__sflush_r+0x76>
 800c236:	682b      	ldr	r3, [r5, #0]
 800c238:	b903      	cbnz	r3, 800c23c <__sflush_r+0x78>
 800c23a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c23c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c23e:	602f      	str	r7, [r5, #0]
 800c240:	b1b9      	cbz	r1, 800c272 <__sflush_r+0xae>
 800c242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c246:	4299      	cmp	r1, r3
 800c248:	d002      	beq.n	800c250 <__sflush_r+0x8c>
 800c24a:	4628      	mov	r0, r5
 800c24c:	f7ff fa9c 	bl	800b788 <_free_r>
 800c250:	2300      	movs	r3, #0
 800c252:	6363      	str	r3, [r4, #52]	@ 0x34
 800c254:	e00d      	b.n	800c272 <__sflush_r+0xae>
 800c256:	2301      	movs	r3, #1
 800c258:	4628      	mov	r0, r5
 800c25a:	47b0      	blx	r6
 800c25c:	4602      	mov	r2, r0
 800c25e:	1c50      	adds	r0, r2, #1
 800c260:	d1c9      	bne.n	800c1f6 <__sflush_r+0x32>
 800c262:	682b      	ldr	r3, [r5, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d0c6      	beq.n	800c1f6 <__sflush_r+0x32>
 800c268:	2b1d      	cmp	r3, #29
 800c26a:	d001      	beq.n	800c270 <__sflush_r+0xac>
 800c26c:	2b16      	cmp	r3, #22
 800c26e:	d11e      	bne.n	800c2ae <__sflush_r+0xea>
 800c270:	602f      	str	r7, [r5, #0]
 800c272:	2000      	movs	r0, #0
 800c274:	e022      	b.n	800c2bc <__sflush_r+0xf8>
 800c276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c27a:	b21b      	sxth	r3, r3
 800c27c:	e01b      	b.n	800c2b6 <__sflush_r+0xf2>
 800c27e:	690f      	ldr	r7, [r1, #16]
 800c280:	2f00      	cmp	r7, #0
 800c282:	d0f6      	beq.n	800c272 <__sflush_r+0xae>
 800c284:	0793      	lsls	r3, r2, #30
 800c286:	680e      	ldr	r6, [r1, #0]
 800c288:	bf08      	it	eq
 800c28a:	694b      	ldreq	r3, [r1, #20]
 800c28c:	600f      	str	r7, [r1, #0]
 800c28e:	bf18      	it	ne
 800c290:	2300      	movne	r3, #0
 800c292:	eba6 0807 	sub.w	r8, r6, r7
 800c296:	608b      	str	r3, [r1, #8]
 800c298:	f1b8 0f00 	cmp.w	r8, #0
 800c29c:	dde9      	ble.n	800c272 <__sflush_r+0xae>
 800c29e:	6a21      	ldr	r1, [r4, #32]
 800c2a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c2a2:	4643      	mov	r3, r8
 800c2a4:	463a      	mov	r2, r7
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	47b0      	blx	r6
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	dc08      	bgt.n	800c2c0 <__sflush_r+0xfc>
 800c2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2b6:	81a3      	strh	r3, [r4, #12]
 800c2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c0:	4407      	add	r7, r0
 800c2c2:	eba8 0800 	sub.w	r8, r8, r0
 800c2c6:	e7e7      	b.n	800c298 <__sflush_r+0xd4>
 800c2c8:	20400001 	.word	0x20400001

0800c2cc <_fflush_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	690b      	ldr	r3, [r1, #16]
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	b913      	cbnz	r3, 800c2dc <_fflush_r+0x10>
 800c2d6:	2500      	movs	r5, #0
 800c2d8:	4628      	mov	r0, r5
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
 800c2dc:	b118      	cbz	r0, 800c2e6 <_fflush_r+0x1a>
 800c2de:	6a03      	ldr	r3, [r0, #32]
 800c2e0:	b90b      	cbnz	r3, 800c2e6 <_fflush_r+0x1a>
 800c2e2:	f7ff f835 	bl	800b350 <__sinit>
 800c2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d0f3      	beq.n	800c2d6 <_fflush_r+0xa>
 800c2ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2f0:	07d0      	lsls	r0, r2, #31
 800c2f2:	d404      	bmi.n	800c2fe <_fflush_r+0x32>
 800c2f4:	0599      	lsls	r1, r3, #22
 800c2f6:	d402      	bmi.n	800c2fe <_fflush_r+0x32>
 800c2f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2fa:	f7ff fa42 	bl	800b782 <__retarget_lock_acquire_recursive>
 800c2fe:	4628      	mov	r0, r5
 800c300:	4621      	mov	r1, r4
 800c302:	f7ff ff5f 	bl	800c1c4 <__sflush_r>
 800c306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c308:	07da      	lsls	r2, r3, #31
 800c30a:	4605      	mov	r5, r0
 800c30c:	d4e4      	bmi.n	800c2d8 <_fflush_r+0xc>
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	059b      	lsls	r3, r3, #22
 800c312:	d4e1      	bmi.n	800c2d8 <_fflush_r+0xc>
 800c314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c316:	f7ff fa35 	bl	800b784 <__retarget_lock_release_recursive>
 800c31a:	e7dd      	b.n	800c2d8 <_fflush_r+0xc>

0800c31c <__swhatbuf_r>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	460c      	mov	r4, r1
 800c320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c324:	2900      	cmp	r1, #0
 800c326:	b096      	sub	sp, #88	@ 0x58
 800c328:	4615      	mov	r5, r2
 800c32a:	461e      	mov	r6, r3
 800c32c:	da0d      	bge.n	800c34a <__swhatbuf_r+0x2e>
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c334:	f04f 0100 	mov.w	r1, #0
 800c338:	bf14      	ite	ne
 800c33a:	2340      	movne	r3, #64	@ 0x40
 800c33c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c340:	2000      	movs	r0, #0
 800c342:	6031      	str	r1, [r6, #0]
 800c344:	602b      	str	r3, [r5, #0]
 800c346:	b016      	add	sp, #88	@ 0x58
 800c348:	bd70      	pop	{r4, r5, r6, pc}
 800c34a:	466a      	mov	r2, sp
 800c34c:	f000 f862 	bl	800c414 <_fstat_r>
 800c350:	2800      	cmp	r0, #0
 800c352:	dbec      	blt.n	800c32e <__swhatbuf_r+0x12>
 800c354:	9901      	ldr	r1, [sp, #4]
 800c356:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c35a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c35e:	4259      	negs	r1, r3
 800c360:	4159      	adcs	r1, r3
 800c362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c366:	e7eb      	b.n	800c340 <__swhatbuf_r+0x24>

0800c368 <__smakebuf_r>:
 800c368:	898b      	ldrh	r3, [r1, #12]
 800c36a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c36c:	079d      	lsls	r5, r3, #30
 800c36e:	4606      	mov	r6, r0
 800c370:	460c      	mov	r4, r1
 800c372:	d507      	bpl.n	800c384 <__smakebuf_r+0x1c>
 800c374:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	2301      	movs	r3, #1
 800c37e:	6163      	str	r3, [r4, #20]
 800c380:	b003      	add	sp, #12
 800c382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c384:	ab01      	add	r3, sp, #4
 800c386:	466a      	mov	r2, sp
 800c388:	f7ff ffc8 	bl	800c31c <__swhatbuf_r>
 800c38c:	9f00      	ldr	r7, [sp, #0]
 800c38e:	4605      	mov	r5, r0
 800c390:	4639      	mov	r1, r7
 800c392:	4630      	mov	r0, r6
 800c394:	f7ff fa64 	bl	800b860 <_malloc_r>
 800c398:	b948      	cbnz	r0, 800c3ae <__smakebuf_r+0x46>
 800c39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c39e:	059a      	lsls	r2, r3, #22
 800c3a0:	d4ee      	bmi.n	800c380 <__smakebuf_r+0x18>
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	f043 0302 	orr.w	r3, r3, #2
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	e7e2      	b.n	800c374 <__smakebuf_r+0xc>
 800c3ae:	89a3      	ldrh	r3, [r4, #12]
 800c3b0:	6020      	str	r0, [r4, #0]
 800c3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	9b01      	ldr	r3, [sp, #4]
 800c3ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3be:	b15b      	cbz	r3, 800c3d8 <__smakebuf_r+0x70>
 800c3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f000 f837 	bl	800c438 <_isatty_r>
 800c3ca:	b128      	cbz	r0, 800c3d8 <__smakebuf_r+0x70>
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	f023 0303 	bic.w	r3, r3, #3
 800c3d2:	f043 0301 	orr.w	r3, r3, #1
 800c3d6:	81a3      	strh	r3, [r4, #12]
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	431d      	orrs	r5, r3
 800c3dc:	81a5      	strh	r5, [r4, #12]
 800c3de:	e7cf      	b.n	800c380 <__smakebuf_r+0x18>

0800c3e0 <memmove>:
 800c3e0:	4288      	cmp	r0, r1
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	eb01 0402 	add.w	r4, r1, r2
 800c3e8:	d902      	bls.n	800c3f0 <memmove+0x10>
 800c3ea:	4284      	cmp	r4, r0
 800c3ec:	4623      	mov	r3, r4
 800c3ee:	d807      	bhi.n	800c400 <memmove+0x20>
 800c3f0:	1e43      	subs	r3, r0, #1
 800c3f2:	42a1      	cmp	r1, r4
 800c3f4:	d008      	beq.n	800c408 <memmove+0x28>
 800c3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3fe:	e7f8      	b.n	800c3f2 <memmove+0x12>
 800c400:	4402      	add	r2, r0
 800c402:	4601      	mov	r1, r0
 800c404:	428a      	cmp	r2, r1
 800c406:	d100      	bne.n	800c40a <memmove+0x2a>
 800c408:	bd10      	pop	{r4, pc}
 800c40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c412:	e7f7      	b.n	800c404 <memmove+0x24>

0800c414 <_fstat_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4d07      	ldr	r5, [pc, #28]	@ (800c434 <_fstat_r+0x20>)
 800c418:	2300      	movs	r3, #0
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	4611      	mov	r1, r2
 800c420:	602b      	str	r3, [r5, #0]
 800c422:	f7f5 f81d 	bl	8001460 <_fstat>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d102      	bne.n	800c430 <_fstat_r+0x1c>
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	b103      	cbz	r3, 800c430 <_fstat_r+0x1c>
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	bd38      	pop	{r3, r4, r5, pc}
 800c432:	bf00      	nop
 800c434:	2400111c 	.word	0x2400111c

0800c438 <_isatty_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4d06      	ldr	r5, [pc, #24]	@ (800c454 <_isatty_r+0x1c>)
 800c43c:	2300      	movs	r3, #0
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	602b      	str	r3, [r5, #0]
 800c444:	f7f5 f81c 	bl	8001480 <_isatty>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_isatty_r+0x1a>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_isatty_r+0x1a>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	2400111c 	.word	0x2400111c

0800c458 <_sbrk_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d06      	ldr	r5, [pc, #24]	@ (800c474 <_sbrk_r+0x1c>)
 800c45c:	2300      	movs	r3, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	f7f5 f824 	bl	80014b0 <_sbrk>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d102      	bne.n	800c472 <_sbrk_r+0x1a>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	b103      	cbz	r3, 800c472 <_sbrk_r+0x1a>
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	2400111c 	.word	0x2400111c

0800c478 <memcpy>:
 800c478:	440a      	add	r2, r1
 800c47a:	4291      	cmp	r1, r2
 800c47c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c480:	d100      	bne.n	800c484 <memcpy+0xc>
 800c482:	4770      	bx	lr
 800c484:	b510      	push	{r4, lr}
 800c486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c48a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c48e:	4291      	cmp	r1, r2
 800c490:	d1f9      	bne.n	800c486 <memcpy+0xe>
 800c492:	bd10      	pop	{r4, pc}

0800c494 <_realloc_r>:
 800c494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c498:	4607      	mov	r7, r0
 800c49a:	4614      	mov	r4, r2
 800c49c:	460d      	mov	r5, r1
 800c49e:	b921      	cbnz	r1, 800c4aa <_realloc_r+0x16>
 800c4a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	f7ff b9db 	b.w	800b860 <_malloc_r>
 800c4aa:	b92a      	cbnz	r2, 800c4b8 <_realloc_r+0x24>
 800c4ac:	f7ff f96c 	bl	800b788 <_free_r>
 800c4b0:	4625      	mov	r5, r4
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b8:	f000 f81a 	bl	800c4f0 <_malloc_usable_size_r>
 800c4bc:	4284      	cmp	r4, r0
 800c4be:	4606      	mov	r6, r0
 800c4c0:	d802      	bhi.n	800c4c8 <_realloc_r+0x34>
 800c4c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4c6:	d8f4      	bhi.n	800c4b2 <_realloc_r+0x1e>
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	f7ff f9c8 	bl	800b860 <_malloc_r>
 800c4d0:	4680      	mov	r8, r0
 800c4d2:	b908      	cbnz	r0, 800c4d8 <_realloc_r+0x44>
 800c4d4:	4645      	mov	r5, r8
 800c4d6:	e7ec      	b.n	800c4b2 <_realloc_r+0x1e>
 800c4d8:	42b4      	cmp	r4, r6
 800c4da:	4622      	mov	r2, r4
 800c4dc:	4629      	mov	r1, r5
 800c4de:	bf28      	it	cs
 800c4e0:	4632      	movcs	r2, r6
 800c4e2:	f7ff ffc9 	bl	800c478 <memcpy>
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	f7ff f94d 	bl	800b788 <_free_r>
 800c4ee:	e7f1      	b.n	800c4d4 <_realloc_r+0x40>

0800c4f0 <_malloc_usable_size_r>:
 800c4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f4:	1f18      	subs	r0, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bfbc      	itt	lt
 800c4fa:	580b      	ldrlt	r3, [r1, r0]
 800c4fc:	18c0      	addlt	r0, r0, r3
 800c4fe:	4770      	bx	lr

0800c500 <_init>:
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	bf00      	nop
 800c504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c506:	bc08      	pop	{r3}
 800c508:	469e      	mov	lr, r3
 800c50a:	4770      	bx	lr

0800c50c <_fini>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	bf00      	nop
 800c510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c512:	bc08      	pop	{r3}
 800c514:	469e      	mov	lr, r3
 800c516:	4770      	bx	lr
