
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e04c  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026bc  9000e2ec  9000e2ec  0000f2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  900109a8  900109a8  000120cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  900109a8  900109a8  000119a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  900109b0  900109b0  000120cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  900109b0  900109b0  000119b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  900109b4  900109b4  000119b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  900109b8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001414  200000d0  90010a84  000120d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  200014e4  90010a84  000124e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000120cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad3f  00000000  00000000  000120fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000540f  00000000  00000000  0003ce39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002128  00000000  00000000  00042248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019c1  00000000  00000000  00044370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004114f  00000000  00000000  00045d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c952  00000000  00000000  00086e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018dafd  00000000  00000000  000b37d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002412cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009814  00000000  00000000  00241314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0024ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d0 	.word	0x200000d0
900002bc:	00000000 	.word	0x00000000
900002c0:	9000e2d4 	.word	0x9000e2d4

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000d4 	.word	0x200000d4
900002dc:	9000e2d4 	.word	0x9000e2d4

900002e0 <strlen>:
900002e0:	4603      	mov	r3, r0
900002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
900002e6:	2a00      	cmp	r2, #0
900002e8:	d1fb      	bne.n	900002e2 <strlen+0x2>
900002ea:	1a18      	subs	r0, r3, r0
900002ec:	3801      	subs	r0, #1
900002ee:	4770      	bx	lr

900002f0 <memchr>:
900002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002f4:	2a10      	cmp	r2, #16
900002f6:	db2b      	blt.n	90000350 <memchr+0x60>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	d008      	beq.n	90000310 <memchr+0x20>
900002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
90000302:	3a01      	subs	r2, #1
90000304:	428b      	cmp	r3, r1
90000306:	d02d      	beq.n	90000364 <memchr+0x74>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	b342      	cbz	r2, 90000360 <memchr+0x70>
9000030e:	d1f6      	bne.n	900002fe <memchr+0xe>
90000310:	b4f0      	push	{r4, r5, r6, r7}
90000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000031a:	f022 0407 	bic.w	r4, r2, #7
9000031e:	f07f 0700 	mvns.w	r7, #0
90000322:	2300      	movs	r3, #0
90000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000328:	3c08      	subs	r4, #8
9000032a:	ea85 0501 	eor.w	r5, r5, r1
9000032e:	ea86 0601 	eor.w	r6, r6, r1
90000332:	fa85 f547 	uadd8	r5, r5, r7
90000336:	faa3 f587 	sel	r5, r3, r7
9000033a:	fa86 f647 	uadd8	r6, r6, r7
9000033e:	faa5 f687 	sel	r6, r5, r7
90000342:	b98e      	cbnz	r6, 90000368 <memchr+0x78>
90000344:	d1ee      	bne.n	90000324 <memchr+0x34>
90000346:	bcf0      	pop	{r4, r5, r6, r7}
90000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000034c:	f002 0207 	and.w	r2, r2, #7
90000350:	b132      	cbz	r2, 90000360 <memchr+0x70>
90000352:	f810 3b01 	ldrb.w	r3, [r0], #1
90000356:	3a01      	subs	r2, #1
90000358:	ea83 0301 	eor.w	r3, r3, r1
9000035c:	b113      	cbz	r3, 90000364 <memchr+0x74>
9000035e:	d1f8      	bne.n	90000352 <memchr+0x62>
90000360:	2000      	movs	r0, #0
90000362:	4770      	bx	lr
90000364:	3801      	subs	r0, #1
90000366:	4770      	bx	lr
90000368:	2d00      	cmp	r5, #0
9000036a:	bf06      	itte	eq
9000036c:	4635      	moveq	r5, r6
9000036e:	3803      	subeq	r0, #3
90000370:	3807      	subne	r0, #7
90000372:	f015 0f01 	tst.w	r5, #1
90000376:	d107      	bne.n	90000388 <memchr+0x98>
90000378:	3001      	adds	r0, #1
9000037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000037e:	bf02      	ittt	eq
90000380:	3001      	addeq	r0, #1
90000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000386:	3001      	addeq	r0, #1
90000388:	bcf0      	pop	{r4, r5, r6, r7}
9000038a:	3801      	subs	r0, #1
9000038c:	4770      	bx	lr
9000038e:	bf00      	nop

90000390 <__aeabi_uldivmod>:
90000390:	b953      	cbnz	r3, 900003a8 <__aeabi_uldivmod+0x18>
90000392:	b94a      	cbnz	r2, 900003a8 <__aeabi_uldivmod+0x18>
90000394:	2900      	cmp	r1, #0
90000396:	bf08      	it	eq
90000398:	2800      	cmpeq	r0, #0
9000039a:	bf1c      	itt	ne
9000039c:	f04f 31ff 	movne.w	r1, #4294967295
900003a0:	f04f 30ff 	movne.w	r0, #4294967295
900003a4:	f000 b988 	b.w	900006b8 <__aeabi_idiv0>
900003a8:	f1ad 0c08 	sub.w	ip, sp, #8
900003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003b0:	f000 f806 	bl	900003c0 <__udivmoddi4>
900003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003bc:	b004      	add	sp, #16
900003be:	4770      	bx	lr

900003c0 <__udivmoddi4>:
900003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003c4:	9d08      	ldr	r5, [sp, #32]
900003c6:	468e      	mov	lr, r1
900003c8:	4604      	mov	r4, r0
900003ca:	4688      	mov	r8, r1
900003cc:	2b00      	cmp	r3, #0
900003ce:	d14a      	bne.n	90000466 <__udivmoddi4+0xa6>
900003d0:	428a      	cmp	r2, r1
900003d2:	4617      	mov	r7, r2
900003d4:	d962      	bls.n	9000049c <__udivmoddi4+0xdc>
900003d6:	fab2 f682 	clz	r6, r2
900003da:	b14e      	cbz	r6, 900003f0 <__udivmoddi4+0x30>
900003dc:	f1c6 0320 	rsb	r3, r6, #32
900003e0:	fa01 f806 	lsl.w	r8, r1, r6
900003e4:	fa20 f303 	lsr.w	r3, r0, r3
900003e8:	40b7      	lsls	r7, r6
900003ea:	ea43 0808 	orr.w	r8, r3, r8
900003ee:	40b4      	lsls	r4, r6
900003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003f4:	fa1f fc87 	uxth.w	ip, r7
900003f8:	fbb8 f1fe 	udiv	r1, r8, lr
900003fc:	0c23      	lsrs	r3, r4, #16
900003fe:	fb0e 8811 	mls	r8, lr, r1, r8
90000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
90000406:	fb01 f20c 	mul.w	r2, r1, ip
9000040a:	429a      	cmp	r2, r3
9000040c:	d909      	bls.n	90000422 <__udivmoddi4+0x62>
9000040e:	18fb      	adds	r3, r7, r3
90000410:	f101 30ff 	add.w	r0, r1, #4294967295
90000414:	f080 80ea 	bcs.w	900005ec <__udivmoddi4+0x22c>
90000418:	429a      	cmp	r2, r3
9000041a:	f240 80e7 	bls.w	900005ec <__udivmoddi4+0x22c>
9000041e:	3902      	subs	r1, #2
90000420:	443b      	add	r3, r7
90000422:	1a9a      	subs	r2, r3, r2
90000424:	b2a3      	uxth	r3, r4
90000426:	fbb2 f0fe 	udiv	r0, r2, lr
9000042a:	fb0e 2210 	mls	r2, lr, r0, r2
9000042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000432:	fb00 fc0c 	mul.w	ip, r0, ip
90000436:	459c      	cmp	ip, r3
90000438:	d909      	bls.n	9000044e <__udivmoddi4+0x8e>
9000043a:	18fb      	adds	r3, r7, r3
9000043c:	f100 32ff 	add.w	r2, r0, #4294967295
90000440:	f080 80d6 	bcs.w	900005f0 <__udivmoddi4+0x230>
90000444:	459c      	cmp	ip, r3
90000446:	f240 80d3 	bls.w	900005f0 <__udivmoddi4+0x230>
9000044a:	443b      	add	r3, r7
9000044c:	3802      	subs	r0, #2
9000044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000452:	eba3 030c 	sub.w	r3, r3, ip
90000456:	2100      	movs	r1, #0
90000458:	b11d      	cbz	r5, 90000462 <__udivmoddi4+0xa2>
9000045a:	40f3      	lsrs	r3, r6
9000045c:	2200      	movs	r2, #0
9000045e:	e9c5 3200 	strd	r3, r2, [r5]
90000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000466:	428b      	cmp	r3, r1
90000468:	d905      	bls.n	90000476 <__udivmoddi4+0xb6>
9000046a:	b10d      	cbz	r5, 90000470 <__udivmoddi4+0xb0>
9000046c:	e9c5 0100 	strd	r0, r1, [r5]
90000470:	2100      	movs	r1, #0
90000472:	4608      	mov	r0, r1
90000474:	e7f5      	b.n	90000462 <__udivmoddi4+0xa2>
90000476:	fab3 f183 	clz	r1, r3
9000047a:	2900      	cmp	r1, #0
9000047c:	d146      	bne.n	9000050c <__udivmoddi4+0x14c>
9000047e:	4573      	cmp	r3, lr
90000480:	d302      	bcc.n	90000488 <__udivmoddi4+0xc8>
90000482:	4282      	cmp	r2, r0
90000484:	f200 8105 	bhi.w	90000692 <__udivmoddi4+0x2d2>
90000488:	1a84      	subs	r4, r0, r2
9000048a:	eb6e 0203 	sbc.w	r2, lr, r3
9000048e:	2001      	movs	r0, #1
90000490:	4690      	mov	r8, r2
90000492:	2d00      	cmp	r5, #0
90000494:	d0e5      	beq.n	90000462 <__udivmoddi4+0xa2>
90000496:	e9c5 4800 	strd	r4, r8, [r5]
9000049a:	e7e2      	b.n	90000462 <__udivmoddi4+0xa2>
9000049c:	2a00      	cmp	r2, #0
9000049e:	f000 8090 	beq.w	900005c2 <__udivmoddi4+0x202>
900004a2:	fab2 f682 	clz	r6, r2
900004a6:	2e00      	cmp	r6, #0
900004a8:	f040 80a4 	bne.w	900005f4 <__udivmoddi4+0x234>
900004ac:	1a8a      	subs	r2, r1, r2
900004ae:	0c03      	lsrs	r3, r0, #16
900004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004b4:	b280      	uxth	r0, r0
900004b6:	b2bc      	uxth	r4, r7
900004b8:	2101      	movs	r1, #1
900004ba:	fbb2 fcfe 	udiv	ip, r2, lr
900004be:	fb0e 221c 	mls	r2, lr, ip, r2
900004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004c6:	fb04 f20c 	mul.w	r2, r4, ip
900004ca:	429a      	cmp	r2, r3
900004cc:	d907      	bls.n	900004de <__udivmoddi4+0x11e>
900004ce:	18fb      	adds	r3, r7, r3
900004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004d4:	d202      	bcs.n	900004dc <__udivmoddi4+0x11c>
900004d6:	429a      	cmp	r2, r3
900004d8:	f200 80e0 	bhi.w	9000069c <__udivmoddi4+0x2dc>
900004dc:	46c4      	mov	ip, r8
900004de:	1a9b      	subs	r3, r3, r2
900004e0:	fbb3 f2fe 	udiv	r2, r3, lr
900004e4:	fb0e 3312 	mls	r3, lr, r2, r3
900004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004ec:	fb02 f404 	mul.w	r4, r2, r4
900004f0:	429c      	cmp	r4, r3
900004f2:	d907      	bls.n	90000504 <__udivmoddi4+0x144>
900004f4:	18fb      	adds	r3, r7, r3
900004f6:	f102 30ff 	add.w	r0, r2, #4294967295
900004fa:	d202      	bcs.n	90000502 <__udivmoddi4+0x142>
900004fc:	429c      	cmp	r4, r3
900004fe:	f200 80ca 	bhi.w	90000696 <__udivmoddi4+0x2d6>
90000502:	4602      	mov	r2, r0
90000504:	1b1b      	subs	r3, r3, r4
90000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
9000050a:	e7a5      	b.n	90000458 <__udivmoddi4+0x98>
9000050c:	f1c1 0620 	rsb	r6, r1, #32
90000510:	408b      	lsls	r3, r1
90000512:	fa22 f706 	lsr.w	r7, r2, r6
90000516:	431f      	orrs	r7, r3
90000518:	fa0e f401 	lsl.w	r4, lr, r1
9000051c:	fa20 f306 	lsr.w	r3, r0, r6
90000520:	fa2e fe06 	lsr.w	lr, lr, r6
90000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000528:	4323      	orrs	r3, r4
9000052a:	fa00 f801 	lsl.w	r8, r0, r1
9000052e:	fa1f fc87 	uxth.w	ip, r7
90000532:	fbbe f0f9 	udiv	r0, lr, r9
90000536:	0c1c      	lsrs	r4, r3, #16
90000538:	fb09 ee10 	mls	lr, r9, r0, lr
9000053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000540:	fb00 fe0c 	mul.w	lr, r0, ip
90000544:	45a6      	cmp	lr, r4
90000546:	fa02 f201 	lsl.w	r2, r2, r1
9000054a:	d909      	bls.n	90000560 <__udivmoddi4+0x1a0>
9000054c:	193c      	adds	r4, r7, r4
9000054e:	f100 3aff 	add.w	sl, r0, #4294967295
90000552:	f080 809c 	bcs.w	9000068e <__udivmoddi4+0x2ce>
90000556:	45a6      	cmp	lr, r4
90000558:	f240 8099 	bls.w	9000068e <__udivmoddi4+0x2ce>
9000055c:	3802      	subs	r0, #2
9000055e:	443c      	add	r4, r7
90000560:	eba4 040e 	sub.w	r4, r4, lr
90000564:	fa1f fe83 	uxth.w	lr, r3
90000568:	fbb4 f3f9 	udiv	r3, r4, r9
9000056c:	fb09 4413 	mls	r4, r9, r3, r4
90000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000574:	fb03 fc0c 	mul.w	ip, r3, ip
90000578:	45a4      	cmp	ip, r4
9000057a:	d908      	bls.n	9000058e <__udivmoddi4+0x1ce>
9000057c:	193c      	adds	r4, r7, r4
9000057e:	f103 3eff 	add.w	lr, r3, #4294967295
90000582:	f080 8082 	bcs.w	9000068a <__udivmoddi4+0x2ca>
90000586:	45a4      	cmp	ip, r4
90000588:	d97f      	bls.n	9000068a <__udivmoddi4+0x2ca>
9000058a:	3b02      	subs	r3, #2
9000058c:	443c      	add	r4, r7
9000058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000592:	eba4 040c 	sub.w	r4, r4, ip
90000596:	fba0 ec02 	umull	lr, ip, r0, r2
9000059a:	4564      	cmp	r4, ip
9000059c:	4673      	mov	r3, lr
9000059e:	46e1      	mov	r9, ip
900005a0:	d362      	bcc.n	90000668 <__udivmoddi4+0x2a8>
900005a2:	d05f      	beq.n	90000664 <__udivmoddi4+0x2a4>
900005a4:	b15d      	cbz	r5, 900005be <__udivmoddi4+0x1fe>
900005a6:	ebb8 0203 	subs.w	r2, r8, r3
900005aa:	eb64 0409 	sbc.w	r4, r4, r9
900005ae:	fa04 f606 	lsl.w	r6, r4, r6
900005b2:	fa22 f301 	lsr.w	r3, r2, r1
900005b6:	431e      	orrs	r6, r3
900005b8:	40cc      	lsrs	r4, r1
900005ba:	e9c5 6400 	strd	r6, r4, [r5]
900005be:	2100      	movs	r1, #0
900005c0:	e74f      	b.n	90000462 <__udivmoddi4+0xa2>
900005c2:	fbb1 fcf2 	udiv	ip, r1, r2
900005c6:	0c01      	lsrs	r1, r0, #16
900005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005cc:	b280      	uxth	r0, r0
900005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005d2:	463b      	mov	r3, r7
900005d4:	4638      	mov	r0, r7
900005d6:	463c      	mov	r4, r7
900005d8:	46b8      	mov	r8, r7
900005da:	46be      	mov	lr, r7
900005dc:	2620      	movs	r6, #32
900005de:	fbb1 f1f7 	udiv	r1, r1, r7
900005e2:	eba2 0208 	sub.w	r2, r2, r8
900005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005ea:	e766      	b.n	900004ba <__udivmoddi4+0xfa>
900005ec:	4601      	mov	r1, r0
900005ee:	e718      	b.n	90000422 <__udivmoddi4+0x62>
900005f0:	4610      	mov	r0, r2
900005f2:	e72c      	b.n	9000044e <__udivmoddi4+0x8e>
900005f4:	f1c6 0220 	rsb	r2, r6, #32
900005f8:	fa2e f302 	lsr.w	r3, lr, r2
900005fc:	40b7      	lsls	r7, r6
900005fe:	40b1      	lsls	r1, r6
90000600:	fa20 f202 	lsr.w	r2, r0, r2
90000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000608:	430a      	orrs	r2, r1
9000060a:	fbb3 f8fe 	udiv	r8, r3, lr
9000060e:	b2bc      	uxth	r4, r7
90000610:	fb0e 3318 	mls	r3, lr, r8, r3
90000614:	0c11      	lsrs	r1, r2, #16
90000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000061a:	fb08 f904 	mul.w	r9, r8, r4
9000061e:	40b0      	lsls	r0, r6
90000620:	4589      	cmp	r9, r1
90000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000626:	b280      	uxth	r0, r0
90000628:	d93e      	bls.n	900006a8 <__udivmoddi4+0x2e8>
9000062a:	1879      	adds	r1, r7, r1
9000062c:	f108 3cff 	add.w	ip, r8, #4294967295
90000630:	d201      	bcs.n	90000636 <__udivmoddi4+0x276>
90000632:	4589      	cmp	r9, r1
90000634:	d81f      	bhi.n	90000676 <__udivmoddi4+0x2b6>
90000636:	eba1 0109 	sub.w	r1, r1, r9
9000063a:	fbb1 f9fe 	udiv	r9, r1, lr
9000063e:	fb09 f804 	mul.w	r8, r9, r4
90000642:	fb0e 1119 	mls	r1, lr, r9, r1
90000646:	b292      	uxth	r2, r2
90000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000064c:	4542      	cmp	r2, r8
9000064e:	d229      	bcs.n	900006a4 <__udivmoddi4+0x2e4>
90000650:	18ba      	adds	r2, r7, r2
90000652:	f109 31ff 	add.w	r1, r9, #4294967295
90000656:	d2c4      	bcs.n	900005e2 <__udivmoddi4+0x222>
90000658:	4542      	cmp	r2, r8
9000065a:	d2c2      	bcs.n	900005e2 <__udivmoddi4+0x222>
9000065c:	f1a9 0102 	sub.w	r1, r9, #2
90000660:	443a      	add	r2, r7
90000662:	e7be      	b.n	900005e2 <__udivmoddi4+0x222>
90000664:	45f0      	cmp	r8, lr
90000666:	d29d      	bcs.n	900005a4 <__udivmoddi4+0x1e4>
90000668:	ebbe 0302 	subs.w	r3, lr, r2
9000066c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000670:	3801      	subs	r0, #1
90000672:	46e1      	mov	r9, ip
90000674:	e796      	b.n	900005a4 <__udivmoddi4+0x1e4>
90000676:	eba7 0909 	sub.w	r9, r7, r9
9000067a:	4449      	add	r1, r9
9000067c:	f1a8 0c02 	sub.w	ip, r8, #2
90000680:	fbb1 f9fe 	udiv	r9, r1, lr
90000684:	fb09 f804 	mul.w	r8, r9, r4
90000688:	e7db      	b.n	90000642 <__udivmoddi4+0x282>
9000068a:	4673      	mov	r3, lr
9000068c:	e77f      	b.n	9000058e <__udivmoddi4+0x1ce>
9000068e:	4650      	mov	r0, sl
90000690:	e766      	b.n	90000560 <__udivmoddi4+0x1a0>
90000692:	4608      	mov	r0, r1
90000694:	e6fd      	b.n	90000492 <__udivmoddi4+0xd2>
90000696:	443b      	add	r3, r7
90000698:	3a02      	subs	r2, #2
9000069a:	e733      	b.n	90000504 <__udivmoddi4+0x144>
9000069c:	f1ac 0c02 	sub.w	ip, ip, #2
900006a0:	443b      	add	r3, r7
900006a2:	e71c      	b.n	900004de <__udivmoddi4+0x11e>
900006a4:	4649      	mov	r1, r9
900006a6:	e79c      	b.n	900005e2 <__udivmoddi4+0x222>
900006a8:	eba1 0109 	sub.w	r1, r1, r9
900006ac:	46c4      	mov	ip, r8
900006ae:	fbb1 f9fe 	udiv	r9, r1, lr
900006b2:	fb09 f804 	mul.w	r8, r9, r4
900006b6:	e7c4      	b.n	90000642 <__udivmoddi4+0x282>

900006b8 <__aeabi_idiv0>:
900006b8:	4770      	bx	lr
900006ba:	bf00      	nop

900006bc <clearInput>:
#include "appLogic.h"

uint32_t lastCursorTime = 0;

void clearInput(AppContext *ctx) {
900006bc:	b480      	push	{r7}
900006be:	b083      	sub	sp, #12
900006c0:	af00      	add	r7, sp, #0
900006c2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
900006c4:	687b      	ldr	r3, [r7, #4]
900006c6:	2200      	movs	r2, #0
900006c8:	809a      	strh	r2, [r3, #4]
}
900006ca:	bf00      	nop
900006cc:	370c      	adds	r7, #12
900006ce:	46bd      	mov	sp, r7
900006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006d4:	4770      	bx	lr

900006d6 <clearVoltage>:

void clearVoltage(AppContext *ctx) {
900006d6:	b480      	push	{r7}
900006d8:	b083      	sub	sp, #12
900006da:	af00      	add	r7, sp, #0
900006dc:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
900006de:	687b      	ldr	r3, [r7, #4]
900006e0:	2200      	movs	r2, #0
900006e2:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
900006e4:	687b      	ldr	r3, [r7, #4]
900006e6:	2200      	movs	r2, #0
900006e8:	719a      	strb	r2, [r3, #6]
}
900006ea:	bf00      	nop
900006ec:	370c      	adds	r7, #12
900006ee:	46bd      	mov	sp, r7
900006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006f4:	4770      	bx	lr
	...

900006f8 <backspace>:

void backspace(AppContext *ctx) {
900006f8:	b480      	push	{r7}
900006fa:	b083      	sub	sp, #12
900006fc:	af00      	add	r7, sp, #0
900006fe:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
90000700:	687b      	ldr	r3, [r7, #4]
90000702:	889b      	ldrh	r3, [r3, #4]
90000704:	4a06      	ldr	r2, [pc, #24]	@ (90000720 <backspace+0x28>)
90000706:	fba2 2303 	umull	r2, r3, r2, r3
9000070a:	08db      	lsrs	r3, r3, #3
9000070c:	b29a      	uxth	r2, r3
9000070e:	687b      	ldr	r3, [r7, #4]
90000710:	809a      	strh	r2, [r3, #4]
}
90000712:	bf00      	nop
90000714:	370c      	adds	r7, #12
90000716:	46bd      	mov	sp, r7
90000718:	f85d 7b04 	ldr.w	r7, [sp], #4
9000071c:	4770      	bx	lr
9000071e:	bf00      	nop
90000720:	cccccccd 	.word	0xcccccccd

90000724 <stopPWM>:

void stopPWM(AppContext *ctx, CallbackFunction stopPwmCallback) {
90000724:	b580      	push	{r7, lr}
90000726:	b082      	sub	sp, #8
90000728:	af00      	add	r7, sp, #0
9000072a:	6078      	str	r0, [r7, #4]
9000072c:	6039      	str	r1, [r7, #0]
  ctx->isPwmRunning = false;
9000072e:	687b      	ldr	r3, [r7, #4]
90000730:	2200      	movs	r2, #0
90000732:	71da      	strb	r2, [r3, #7]
  stopPwmCallback();
90000734:	683b      	ldr	r3, [r7, #0]
90000736:	4798      	blx	r3
}
90000738:	bf00      	nop
9000073a:	3708      	adds	r7, #8
9000073c:	46bd      	mov	sp, r7
9000073e:	bd80      	pop	{r7, pc}

90000740 <startPWM>:

void startPWM(AppContext *ctx, CallbackWithParam startPwmCallback) {
90000740:	b580      	push	{r7, lr}
90000742:	b082      	sub	sp, #8
90000744:	af00      	add	r7, sp, #0
90000746:	6078      	str	r0, [r7, #4]
90000748:	6039      	str	r1, [r7, #0]
  ctx->isPwmRunning = true;
9000074a:	687b      	ldr	r3, [r7, #4]
9000074c:	2201      	movs	r2, #1
9000074e:	71da      	strb	r2, [r3, #7]
  startPwmCallback(ctx->voltage / 4);
90000750:	687b      	ldr	r3, [r7, #4]
90000752:	885b      	ldrh	r3, [r3, #2]
90000754:	089b      	lsrs	r3, r3, #2
90000756:	b29b      	uxth	r3, r3
90000758:	461a      	mov	r2, r3
9000075a:	683b      	ldr	r3, [r7, #0]
9000075c:	4610      	mov	r0, r2
9000075e:	4798      	blx	r3
}
90000760:	bf00      	nop
90000762:	3708      	adds	r7, #8
90000764:	46bd      	mov	sp, r7
90000766:	bd80      	pop	{r7, pc}

90000768 <setSTATE_F3>:

void setSTATE_F3(AppContext *ctx) {
90000768:	b480      	push	{r7}
9000076a:	b083      	sub	sp, #12
9000076c:	af00      	add	r7, sp, #0
9000076e:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F3;
90000770:	687b      	ldr	r3, [r7, #4]
90000772:	2202      	movs	r2, #2
90000774:	701a      	strb	r2, [r3, #0]
}
90000776:	bf00      	nop
90000778:	370c      	adds	r7, #12
9000077a:	46bd      	mov	sp, r7
9000077c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000780:	4770      	bx	lr

90000782 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
90000782:	b480      	push	{r7}
90000784:	b083      	sub	sp, #12
90000786:	af00      	add	r7, sp, #0
90000788:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
9000078a:	687b      	ldr	r3, [r7, #4]
9000078c:	2201      	movs	r2, #1
9000078e:	701a      	strb	r2, [r3, #0]
}
90000790:	bf00      	nop
90000792:	370c      	adds	r7, #12
90000794:	46bd      	mov	sp, r7
90000796:	f85d 7b04 	ldr.w	r7, [sp], #4
9000079a:	4770      	bx	lr

9000079c <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
9000079c:	b480      	push	{r7}
9000079e:	b083      	sub	sp, #12
900007a0:	af00      	add	r7, sp, #0
900007a2:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F1;
900007a4:	687b      	ldr	r3, [r7, #4]
900007a6:	2200      	movs	r2, #0
900007a8:	701a      	strb	r2, [r3, #0]
}
900007aa:	bf00      	nop
900007ac:	370c      	adds	r7, #12
900007ae:	46bd      	mov	sp, r7
900007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900007b4:	4770      	bx	lr
	...

900007b8 <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
900007b8:	b5b0      	push	{r4, r5, r7, lr}
900007ba:	b082      	sub	sp, #8
900007bc:	af00      	add	r7, sp, #0
900007be:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
900007c0:	687b      	ldr	r3, [r7, #4]
900007c2:	889b      	ldrh	r3, [r3, #4]
900007c4:	2b4f      	cmp	r3, #79	@ 0x4f
900007c6:	d904      	bls.n	900007d2 <validateAndSetVoltage+0x1a>
900007c8:	687b      	ldr	r3, [r7, #4]
900007ca:	889b      	ldrh	r3, [r3, #4]
900007cc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
900007d0:	d914      	bls.n	900007fc <validateAndSetVoltage+0x44>
  {
    strcpy(ctx->message, "Not in range 80 - 400!");
900007d2:	687b      	ldr	r3, [r7, #4]
900007d4:	3309      	adds	r3, #9
900007d6:	4a10      	ldr	r2, [pc, #64]	@ (90000818 <validateAndSetVoltage+0x60>)
900007d8:	461c      	mov	r4, r3
900007da:	4615      	mov	r5, r2
900007dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900007de:	6020      	str	r0, [r4, #0]
900007e0:	6061      	str	r1, [r4, #4]
900007e2:	60a2      	str	r2, [r4, #8]
900007e4:	60e3      	str	r3, [r4, #12]
900007e6:	6828      	ldr	r0, [r5, #0]
900007e8:	6120      	str	r0, [r4, #16]
900007ea:	88ab      	ldrh	r3, [r5, #4]
900007ec:	79aa      	ldrb	r2, [r5, #6]
900007ee:	82a3      	strh	r3, [r4, #20]
900007f0:	4613      	mov	r3, r2
900007f2:	75a3      	strb	r3, [r4, #22]
    clearInput(ctx);
900007f4:	6878      	ldr	r0, [r7, #4]
900007f6:	f7ff ff61 	bl	900006bc <clearInput>
    return;
900007fa:	e009      	b.n	90000810 <validateAndSetVoltage+0x58>
  }
  ctx->isVoltageEntered = true;
900007fc:	687b      	ldr	r3, [r7, #4]
900007fe:	2201      	movs	r2, #1
90000800:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
90000802:	687b      	ldr	r3, [r7, #4]
90000804:	889a      	ldrh	r2, [r3, #4]
90000806:	687b      	ldr	r3, [r7, #4]
90000808:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
9000080a:	687b      	ldr	r3, [r7, #4]
9000080c:	2200      	movs	r2, #0
9000080e:	809a      	strh	r2, [r3, #4]
}
90000810:	3708      	adds	r7, #8
90000812:	46bd      	mov	sp, r7
90000814:	bdb0      	pop	{r4, r5, r7, pc}
90000816:	bf00      	nop
90000818:	9000e2ec 	.word	0x9000e2ec

9000081c <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key) {
9000081c:	b4b0      	push	{r4, r5, r7}
9000081e:	b085      	sub	sp, #20
90000820:	af00      	add	r7, sp, #0
90000822:	6078      	str	r0, [r7, #4]
90000824:	460b      	mov	r3, r1
90000826:	70fb      	strb	r3, [r7, #3]
  uint8_t digit = key - '0';
90000828:	78fb      	ldrb	r3, [r7, #3]
9000082a:	3b30      	subs	r3, #48	@ 0x30
9000082c:	73fb      	strb	r3, [r7, #15]
  if (ctx->inputValue > 40) {
9000082e:	687b      	ldr	r3, [r7, #4]
90000830:	889b      	ldrh	r3, [r3, #4]
90000832:	2b28      	cmp	r3, #40	@ 0x28
90000834:	d90a      	bls.n	9000084c <updateInput+0x30>
    strcpy(ctx->message, "Input too high!");
90000836:	687b      	ldr	r3, [r7, #4]
90000838:	3309      	adds	r3, #9
9000083a:	4a0d      	ldr	r2, [pc, #52]	@ (90000870 <updateInput+0x54>)
9000083c:	461c      	mov	r4, r3
9000083e:	4615      	mov	r5, r2
90000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90000842:	6020      	str	r0, [r4, #0]
90000844:	6061      	str	r1, [r4, #4]
90000846:	60a2      	str	r2, [r4, #8]
90000848:	60e3      	str	r3, [r4, #12]
    return;
9000084a:	e00c      	b.n	90000866 <updateInput+0x4a>
  }
  ctx->inputValue = ctx->inputValue * 10 + digit;
9000084c:	687b      	ldr	r3, [r7, #4]
9000084e:	889b      	ldrh	r3, [r3, #4]
90000850:	461a      	mov	r2, r3
90000852:	0092      	lsls	r2, r2, #2
90000854:	4413      	add	r3, r2
90000856:	005b      	lsls	r3, r3, #1
90000858:	b29a      	uxth	r2, r3
9000085a:	7bfb      	ldrb	r3, [r7, #15]
9000085c:	b29b      	uxth	r3, r3
9000085e:	4413      	add	r3, r2
90000860:	b29a      	uxth	r2, r3
90000862:	687b      	ldr	r3, [r7, #4]
90000864:	809a      	strh	r2, [r3, #4]
}
90000866:	3714      	adds	r7, #20
90000868:	46bd      	mov	sp, r7
9000086a:	bcb0      	pop	{r4, r5, r7}
9000086c:	4770      	bx	lr
9000086e:	bf00      	nop
90000870:	9000e304 	.word	0x9000e304

90000874 <handle_event>:

bool handle_event(AppContext *ctx, KeyboardButton key, CallbackWithParam startPwmCallback, CallbackFunction stopPwmCallback)
{
90000874:	b580      	push	{r7, lr}
90000876:	b086      	sub	sp, #24
90000878:	af00      	add	r7, sp, #0
9000087a:	60f8      	str	r0, [r7, #12]
9000087c:	607a      	str	r2, [r7, #4]
9000087e:	603b      	str	r3, [r7, #0]
90000880:	460b      	mov	r3, r1
90000882:	72fb      	strb	r3, [r7, #11]
  if (key == KEY_NULL)
90000884:	7afb      	ldrb	r3, [r7, #11]
90000886:	2b4e      	cmp	r3, #78	@ 0x4e
90000888:	d120      	bne.n	900008cc <handle_event+0x58>
  {
	  // cursor logic
	  uint32_t now = HAL_GetTick();
9000088a:	f002 fe4f 	bl	9000352c <HAL_GetTick>
9000088e:	6178      	str	r0, [r7, #20]
	  if (now - lastCursorTime > 1500)
90000890:	4b49      	ldr	r3, [pc, #292]	@ (900009b8 <handle_event+0x144>)
90000892:	681b      	ldr	r3, [r3, #0]
90000894:	697a      	ldr	r2, [r7, #20]
90000896:	1ad3      	subs	r3, r2, r3
90000898:	f240 52dc 	movw	r2, #1500	@ 0x5dc
9000089c:	4293      	cmp	r3, r2
9000089e:	d913      	bls.n	900008c8 <handle_event+0x54>
	  {
		  ctx->displayCursor = !ctx->displayCursor;
900008a0:	68fb      	ldr	r3, [r7, #12]
900008a2:	7a1b      	ldrb	r3, [r3, #8]
900008a4:	2b00      	cmp	r3, #0
900008a6:	bf14      	ite	ne
900008a8:	2301      	movne	r3, #1
900008aa:	2300      	moveq	r3, #0
900008ac:	b2db      	uxtb	r3, r3
900008ae:	f083 0301 	eor.w	r3, r3, #1
900008b2:	b2db      	uxtb	r3, r3
900008b4:	f003 0301 	and.w	r3, r3, #1
900008b8:	b2da      	uxtb	r2, r3
900008ba:	68fb      	ldr	r3, [r7, #12]
900008bc:	721a      	strb	r2, [r3, #8]
		  lastCursorTime = now;
900008be:	4a3e      	ldr	r2, [pc, #248]	@ (900009b8 <handle_event+0x144>)
900008c0:	697b      	ldr	r3, [r7, #20]
900008c2:	6013      	str	r3, [r2, #0]
		  return true;
900008c4:	2301      	movs	r3, #1
900008c6:	e072      	b.n	900009ae <handle_event+0x13a>
	  }
	  return false;
900008c8:	2300      	movs	r3, #0
900008ca:	e070      	b.n	900009ae <handle_event+0x13a>
  }
  strcpy(ctx->message, "");
900008cc:	68fb      	ldr	r3, [r7, #12]
900008ce:	3309      	adds	r3, #9
900008d0:	2200      	movs	r2, #0
900008d2:	701a      	strb	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
900008d4:	68fb      	ldr	r3, [r7, #12]
900008d6:	781b      	ldrb	r3, [r3, #0]
900008d8:	2b00      	cmp	r3, #0
900008da:	d147      	bne.n	9000096c <handle_event+0xf8>
	if (ctx->isPwmRunning == true)
900008dc:	68fb      	ldr	r3, [r7, #12]
900008de:	79db      	ldrb	r3, [r3, #7]
900008e0:	2b00      	cmp	r3, #0
900008e2:	d008      	beq.n	900008f6 <handle_event+0x82>
	{
	  if (key == KEY_Stop) stopPWM(ctx, stopPwmCallback);
900008e4:	7afb      	ldrb	r3, [r7, #11]
900008e6:	2b73      	cmp	r3, #115	@ 0x73
900008e8:	d103      	bne.n	900008f2 <handle_event+0x7e>
900008ea:	6839      	ldr	r1, [r7, #0]
900008ec:	68f8      	ldr	r0, [r7, #12]
900008ee:	f7ff ff19 	bl	90000724 <stopPWM>
	  return false; // when PWM is running, we can only press the "STOP" button
900008f2:	2300      	movs	r3, #0
900008f4:	e05b      	b.n	900009ae <handle_event+0x13a>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
900008f6:	68fb      	ldr	r3, [r7, #12]
900008f8:	799b      	ldrb	r3, [r3, #6]
900008fa:	2b00      	cmp	r3, #0
900008fc:	d00d      	beq.n	9000091a <handle_event+0xa6>
	{
	  if (key == KEY_Start) {
900008fe:	7afb      	ldrb	r3, [r7, #11]
90000900:	2b53      	cmp	r3, #83	@ 0x53
90000902:	d103      	bne.n	9000090c <handle_event+0x98>
		  startPWM(ctx, startPwmCallback);
90000904:	6879      	ldr	r1, [r7, #4]
90000906:	68f8      	ldr	r0, [r7, #12]
90000908:	f7ff ff1a 	bl	90000740 <startPWM>
	  }
      if (key == KEY_Clear) clearVoltage(ctx);
9000090c:	7afb      	ldrb	r3, [r7, #11]
9000090e:	2b63      	cmp	r3, #99	@ 0x63
90000910:	d120      	bne.n	90000954 <handle_event+0xe0>
90000912:	68f8      	ldr	r0, [r7, #12]
90000914:	f7ff fedf 	bl	900006d6 <clearVoltage>
90000918:	e01c      	b.n	90000954 <handle_event+0xe0>
	} else
	{
	  if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key);
9000091a:	7afb      	ldrb	r3, [r7, #11]
9000091c:	2b2f      	cmp	r3, #47	@ 0x2f
9000091e:	d907      	bls.n	90000930 <handle_event+0xbc>
90000920:	7afb      	ldrb	r3, [r7, #11]
90000922:	2b39      	cmp	r3, #57	@ 0x39
90000924:	d804      	bhi.n	90000930 <handle_event+0xbc>
90000926:	7afb      	ldrb	r3, [r7, #11]
90000928:	4619      	mov	r1, r3
9000092a:	68f8      	ldr	r0, [r7, #12]
9000092c:	f7ff ff76 	bl	9000081c <updateInput>
	  if (key == KEY_Enter) validateAndSetVoltage(ctx);
90000930:	7afb      	ldrb	r3, [r7, #11]
90000932:	2b65      	cmp	r3, #101	@ 0x65
90000934:	d102      	bne.n	9000093c <handle_event+0xc8>
90000936:	68f8      	ldr	r0, [r7, #12]
90000938:	f7ff ff3e 	bl	900007b8 <validateAndSetVoltage>
	  if (key == KEY_BkSp) backspace(ctx);
9000093c:	7afb      	ldrb	r3, [r7, #11]
9000093e:	2b62      	cmp	r3, #98	@ 0x62
90000940:	d102      	bne.n	90000948 <handle_event+0xd4>
90000942:	68f8      	ldr	r0, [r7, #12]
90000944:	f7ff fed8 	bl	900006f8 <backspace>
	  if (key == KEY_ESC) clearInput(ctx);
90000948:	7afb      	ldrb	r3, [r7, #11]
9000094a:	2b60      	cmp	r3, #96	@ 0x60
9000094c:	d102      	bne.n	90000954 <handle_event+0xe0>
9000094e:	68f8      	ldr	r0, [r7, #12]
90000950:	f7ff feb4 	bl	900006bc <clearInput>
	}

    if (key == KEY_F2) setSTATE_F2(ctx);
90000954:	7afb      	ldrb	r3, [r7, #11]
90000956:	2b40      	cmp	r3, #64	@ 0x40
90000958:	d102      	bne.n	90000960 <handle_event+0xec>
9000095a:	68f8      	ldr	r0, [r7, #12]
9000095c:	f7ff ff11 	bl	90000782 <setSTATE_F2>
    if (key == KEY_F3) setSTATE_F3(ctx);
90000960:	7afb      	ldrb	r3, [r7, #11]
90000962:	2b23      	cmp	r3, #35	@ 0x23
90000964:	d102      	bne.n	9000096c <handle_event+0xf8>
90000966:	68f8      	ldr	r0, [r7, #12]
90000968:	f7ff fefe 	bl	90000768 <setSTATE_F3>
  }

  if (ctx->currentState == STATE_F2) {
9000096c:	68fb      	ldr	r3, [r7, #12]
9000096e:	781b      	ldrb	r3, [r3, #0]
90000970:	2b01      	cmp	r3, #1
90000972:	d10b      	bne.n	9000098c <handle_event+0x118>
	if (key == KEY_F1) setSTATE_F1(ctx);
90000974:	7afb      	ldrb	r3, [r7, #11]
90000976:	2b21      	cmp	r3, #33	@ 0x21
90000978:	d102      	bne.n	90000980 <handle_event+0x10c>
9000097a:	68f8      	ldr	r0, [r7, #12]
9000097c:	f7ff ff0e 	bl	9000079c <setSTATE_F1>
	if (key == KEY_F3) setSTATE_F3(ctx);
90000980:	7afb      	ldrb	r3, [r7, #11]
90000982:	2b23      	cmp	r3, #35	@ 0x23
90000984:	d102      	bne.n	9000098c <handle_event+0x118>
90000986:	68f8      	ldr	r0, [r7, #12]
90000988:	f7ff feee 	bl	90000768 <setSTATE_F3>
  }

  if (ctx->currentState == STATE_F3) {
9000098c:	68fb      	ldr	r3, [r7, #12]
9000098e:	781b      	ldrb	r3, [r3, #0]
90000990:	2b02      	cmp	r3, #2
90000992:	d10b      	bne.n	900009ac <handle_event+0x138>
	if (key == KEY_F1) setSTATE_F1(ctx);
90000994:	7afb      	ldrb	r3, [r7, #11]
90000996:	2b21      	cmp	r3, #33	@ 0x21
90000998:	d102      	bne.n	900009a0 <handle_event+0x12c>
9000099a:	68f8      	ldr	r0, [r7, #12]
9000099c:	f7ff fefe 	bl	9000079c <setSTATE_F1>
	if (key == KEY_F2) setSTATE_F2(ctx);
900009a0:	7afb      	ldrb	r3, [r7, #11]
900009a2:	2b40      	cmp	r3, #64	@ 0x40
900009a4:	d102      	bne.n	900009ac <handle_event+0x138>
900009a6:	68f8      	ldr	r0, [r7, #12]
900009a8:	f7ff feeb 	bl	90000782 <setSTATE_F2>
  }
return true;
900009ac:	2301      	movs	r3, #1
}
900009ae:	4618      	mov	r0, r3
900009b0:	3718      	adds	r7, #24
900009b2:	46bd      	mov	sp, r7
900009b4:	bd80      	pop	{r7, pc}
900009b6:	bf00      	nop
900009b8:	200000ec 	.word	0x200000ec

900009bc <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx) {
900009bc:	b480      	push	{r7}
900009be:	b083      	sub	sp, #12
900009c0:	af00      	add	r7, sp, #0
900009c2:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_F1;
900009c4:	687b      	ldr	r3, [r7, #4]
900009c6:	2200      	movs	r2, #0
900009c8:	701a      	strb	r2, [r3, #0]
	ctx->isVoltageEntered = false;
900009ca:	687b      	ldr	r3, [r7, #4]
900009cc:	2200      	movs	r2, #0
900009ce:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
900009d0:	687b      	ldr	r3, [r7, #4]
900009d2:	2200      	movs	r2, #0
900009d4:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
900009d6:	687b      	ldr	r3, [r7, #4]
900009d8:	2200      	movs	r2, #0
900009da:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
900009dc:	687b      	ldr	r3, [r7, #4]
900009de:	2200      	movs	r2, #0
900009e0:	809a      	strh	r2, [r3, #4]
}
900009e2:	bf00      	nop
900009e4:	370c      	adds	r7, #12
900009e6:	46bd      	mov	sp, r7
900009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
900009ec:	4770      	bx	lr
	...

900009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900009f0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000a2c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900009f4:	f002 fcf4 	bl	900033e0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900009f8:	f002 fc90 	bl	9000331c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900009fc:	480c      	ldr	r0, [pc, #48]	@ (90000a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900009fe:	490d      	ldr	r1, [pc, #52]	@ (90000a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90000a00:	4a0d      	ldr	r2, [pc, #52]	@ (90000a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
90000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000a04:	e002      	b.n	90000a0c <LoopCopyDataInit>

90000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000a0a:	3304      	adds	r3, #4

90000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000a10:	d3f9      	bcc.n	90000a06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000a12:	4a0a      	ldr	r2, [pc, #40]	@ (90000a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000a14:	4c0a      	ldr	r4, [pc, #40]	@ (90000a40 <LoopFillZerobss+0x22>)
  movs r3, #0
90000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
90000a18:	e001      	b.n	90000a1e <LoopFillZerobss>

90000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000a1c:	3204      	adds	r2, #4

90000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000a20:	d3fb      	bcc.n	90000a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000a22:	f00c fe31 	bl	9000d688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000a26:	f000 f80f 	bl	90000a48 <main>
  bx  lr
90000a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000a34:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
90000a38:	900109b8 	.word	0x900109b8
  ldr r2, =_sbss
90000a3c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
90000a40:	200014e4 	.word	0x200014e4

90000a44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000a44:	e7fe      	b.n	90000a44 <ADC3_IRQHandler>
	...

90000a48 <main>:
void TIM8_Stop();
void TIM8_Start(uint32_t percent);
void MX_TIM8_PWM_Init();

int main(void)
{
90000a48:	b580      	push	{r7, lr}
90000a4a:	b096      	sub	sp, #88	@ 0x58
90000a4c:	af00      	add	r7, sp, #0
  MPU_Config(); // Configure the MPU attributes as Write Through for SDRAM
90000a4e:	f000 fb63 	bl	90001118 <MPU_Config>
  CPU_CACHE_Enable();
90000a52:	f000 facf 	bl	90000ff4 <CPU_CACHE_Enable>
  HAL_Init();
90000a56:	f002 fcdb 	bl	90003410 <HAL_Init>
  SystemClock_Config();
90000a5a:	f000 f9c7 	bl	90000dec <SystemClock_Config>
  MX_USART3_UART_Init();
90000a5e:	f000 f90b 	bl	90000c78 <MX_USART3_UART_Init>

  printf("Starting...\r\n");
90000a62:	4818      	ldr	r0, [pc, #96]	@ (90000ac4 <main+0x7c>)
90000a64:	f00c fcaa 	bl	9000d3bc <puts>

  AppContext ctx;
  InitializeAppContext(&ctx);
90000a68:	1d3b      	adds	r3, r7, #4
90000a6a:	4618      	mov	r0, r3
90000a6c:	f7ff ffa6 	bl	900009bc <InitializeAppContext>
  InitializeLcd();
90000a70:	f000 fcf2 	bl	90001458 <InitializeLcd>
  UartClearScreen();
90000a74:	f000 fd2e 	bl	900014d4 <UartClearScreen>
  InitFlexiKeyboard(); // has to be AFTER InitializeLcd, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000a78:	f00b fdfe 	bl	9000c678 <InitFlexiKeyboard>
  MX_TIM8_PWM_Init(); // initialize PWM output on pin PI2
90000a7c:	f000 f828 	bl	90000ad0 <MX_TIM8_PWM_Init>

  while (1)
  {
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 5ms blocking code to scan the keyboard
90000a80:	f00b fd94 	bl	9000c5ac <ReadFlexiKeyboard>
90000a84:	4603      	mov	r3, r0
90000a86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  bool ctxChanged = handle_event(&ctx, key, TIM8_Start, TIM8_Stop);
90000a8a:	f897 1057 	ldrb.w	r1, [r7, #87]	@ 0x57
90000a8e:	1d38      	adds	r0, r7, #4
90000a90:	4b0d      	ldr	r3, [pc, #52]	@ (90000ac8 <main+0x80>)
90000a92:	4a0e      	ldr	r2, [pc, #56]	@ (90000acc <main+0x84>)
90000a94:	f7ff feee 	bl	90000874 <handle_event>
90000a98:	4603      	mov	r3, r0
90000a9a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	  if (!ctxChanged) continue; // no need to redraw display
90000a9e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
90000aa2:	f083 0301 	eor.w	r3, r3, #1
90000aa6:	b2db      	uxtb	r3, r3
90000aa8:	2b00      	cmp	r3, #0
90000aaa:	d108      	bne.n	90000abe <main+0x76>
	  UartRenderState(&ctx);
90000aac:	1d3b      	adds	r3, r7, #4
90000aae:	4618      	mov	r0, r3
90000ab0:	f000 fd1e 	bl	900014f0 <UartRenderState>
	  DisplayRenderState(&ctx);
90000ab4:	1d3b      	adds	r3, r7, #4
90000ab6:	4618      	mov	r0, r3
90000ab8:	f000 fd9e 	bl	900015f8 <DisplayRenderState>
90000abc:	e7e0      	b.n	90000a80 <main+0x38>
	  if (!ctxChanged) continue; // no need to redraw display
90000abe:	bf00      	nop
  {
90000ac0:	e7de      	b.n	90000a80 <main+0x38>
90000ac2:	bf00      	nop
90000ac4:	9000e314 	.word	0x9000e314
90000ac8:	90000c35 	.word	0x90000c35
90000acc:	90000bf1 	.word	0x90000bf1

90000ad0 <MX_TIM8_PWM_Init>:
  }
}

void MX_TIM8_PWM_Init()
{
90000ad0:	b580      	push	{r7, lr}
90000ad2:	b092      	sub	sp, #72	@ 0x48
90000ad4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOI_CLK_ENABLE();
90000ad6:	4b42      	ldr	r3, [pc, #264]	@ (90000be0 <MX_TIM8_PWM_Init+0x110>)
90000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000adc:	4a40      	ldr	r2, [pc, #256]	@ (90000be0 <MX_TIM8_PWM_Init+0x110>)
90000ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000ae6:	4b3e      	ldr	r3, [pc, #248]	@ (90000be0 <MX_TIM8_PWM_Init+0x110>)
90000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90000af0:	60bb      	str	r3, [r7, #8]
90000af2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM8_CLK_ENABLE();
90000af4:	4b3a      	ldr	r3, [pc, #232]	@ (90000be0 <MX_TIM8_PWM_Init+0x110>)
90000af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90000afa:	4a39      	ldr	r2, [pc, #228]	@ (90000be0 <MX_TIM8_PWM_Init+0x110>)
90000afc:	f043 0302 	orr.w	r3, r3, #2
90000b00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90000b04:	4b36      	ldr	r3, [pc, #216]	@ (90000be0 <MX_TIM8_PWM_Init+0x110>)
90000b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90000b0a:	f003 0302 	and.w	r3, r3, #2
90000b0e:	607b      	str	r3, [r7, #4]
90000b10:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
90000b12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
90000b16:	2200      	movs	r2, #0
90000b18:	601a      	str	r2, [r3, #0]
90000b1a:	605a      	str	r2, [r3, #4]
90000b1c:	609a      	str	r2, [r3, #8]
90000b1e:	60da      	str	r2, [r3, #12]
90000b20:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
90000b22:	2304      	movs	r3, #4
90000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b26:	2302      	movs	r3, #2
90000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b2a:	2300      	movs	r3, #0
90000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b2e:	2300      	movs	r3, #0
90000b30:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
90000b32:	2303      	movs	r3, #3
90000b34:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
90000b3a:	4619      	mov	r1, r3
90000b3c:	4829      	ldr	r0, [pc, #164]	@ (90000be4 <MX_TIM8_PWM_Init+0x114>)
90000b3e:	f003 f99f 	bl	90003e80 <HAL_GPIO_Init>

    uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // TIM8 is on APB2
90000b42:	f007 f96b 	bl	90007e1c <HAL_RCC_GetPCLK2Freq>
90000b46:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = 9;
90000b48:	2309      	movs	r3, #9
90000b4a:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t period = (timerClock / ((prescaler + 1) * 5000)) - 1; // 10kHz - magic, I need to look at this deeper
90000b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
90000b4e:	3301      	adds	r3, #1
90000b50:	f241 3288 	movw	r2, #5000	@ 0x1388
90000b54:	fb02 f303 	mul.w	r3, r2, r3
90000b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
90000b5e:	3b01      	subs	r3, #1
90000b60:	63fb      	str	r3, [r7, #60]	@ 0x3c

    htim8.Instance = TIM8;
90000b62:	4b21      	ldr	r3, [pc, #132]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000b64:	4a21      	ldr	r2, [pc, #132]	@ (90000bec <MX_TIM8_PWM_Init+0x11c>)
90000b66:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler = prescaler;
90000b68:	4a1f      	ldr	r2, [pc, #124]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
90000b6c:	6053      	str	r3, [r2, #4]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
90000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000b70:	2200      	movs	r2, #0
90000b72:	609a      	str	r2, [r3, #8]
    htim8.Init.Period = period;
90000b74:	4a1c      	ldr	r2, [pc, #112]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90000b78:	60d3      	str	r3, [r2, #12]
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
90000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000b7c:	2200      	movs	r2, #0
90000b7e:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
90000b80:	4b19      	ldr	r3, [pc, #100]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000b82:	2200      	movs	r2, #0
90000b84:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90000b86:	4b18      	ldr	r3, [pc, #96]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000b88:	2200      	movs	r2, #0
90000b8a:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) Error_Handler();
90000b8c:	4816      	ldr	r0, [pc, #88]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000b8e:	f009 f82a 	bl	90009be6 <HAL_TIM_PWM_Init>
90000b92:	4603      	mov	r3, r0
90000b94:	2b00      	cmp	r3, #0
90000b96:	d001      	beq.n	90000b9c <MX_TIM8_PWM_Init+0xcc>
90000b98:	f000 f924 	bl	90000de4 <Error_Handler>

    TIM_OC_InitTypeDef sConfigOC = {0};
90000b9c:	f107 030c 	add.w	r3, r7, #12
90000ba0:	2200      	movs	r2, #0
90000ba2:	601a      	str	r2, [r3, #0]
90000ba4:	605a      	str	r2, [r3, #4]
90000ba6:	609a      	str	r2, [r3, #8]
90000ba8:	60da      	str	r2, [r3, #12]
90000baa:	611a      	str	r2, [r3, #16]
90000bac:	615a      	str	r2, [r3, #20]
90000bae:	619a      	str	r2, [r3, #24]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
90000bb0:	2360      	movs	r3, #96	@ 0x60
90000bb2:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = 0; // (period + 1) * duty / 100;
90000bb4:	2300      	movs	r3, #0
90000bb6:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
90000bb8:	2300      	movs	r3, #0
90000bba:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
90000bbc:	2300      	movs	r3, #0
90000bbe:	61fb      	str	r3, [r7, #28]

    if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) Error_Handler();
90000bc0:	f107 030c 	add.w	r3, r7, #12
90000bc4:	220c      	movs	r2, #12
90000bc6:	4619      	mov	r1, r3
90000bc8:	4807      	ldr	r0, [pc, #28]	@ (90000be8 <MX_TIM8_PWM_Init+0x118>)
90000bca:	f009 fa77 	bl	9000a0bc <HAL_TIM_PWM_ConfigChannel>
90000bce:	4603      	mov	r3, r0
90000bd0:	2b00      	cmp	r3, #0
90000bd2:	d001      	beq.n	90000bd8 <MX_TIM8_PWM_Init+0x108>
90000bd4:	f000 f906 	bl	90000de4 <Error_Handler>
}
90000bd8:	bf00      	nop
90000bda:	3748      	adds	r7, #72	@ 0x48
90000bdc:	46bd      	mov	sp, r7
90000bde:	bd80      	pop	{r7, pc}
90000be0:	58024400 	.word	0x58024400
90000be4:	58022000 	.word	0x58022000
90000be8:	200000f0 	.word	0x200000f0
90000bec:	40010400 	.word	0x40010400

90000bf0 <TIM8_Start>:

void TIM8_Start(uint32_t percent)
{
90000bf0:	b580      	push	{r7, lr}
90000bf2:	b084      	sub	sp, #16
90000bf4:	af00      	add	r7, sp, #0
90000bf6:	6078      	str	r0, [r7, #4]
    uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim8);
90000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (90000c2c <TIM8_Start+0x3c>)
90000bfa:	681b      	ldr	r3, [r3, #0]
90000bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000bfe:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = (period + 1) * percent / 100;
90000c00:	68fb      	ldr	r3, [r7, #12]
90000c02:	3301      	adds	r3, #1
90000c04:	687a      	ldr	r2, [r7, #4]
90000c06:	fb02 f303 	mul.w	r3, r2, r3
90000c0a:	4a09      	ldr	r2, [pc, #36]	@ (90000c30 <TIM8_Start+0x40>)
90000c0c:	fba2 2303 	umull	r2, r3, r2, r3
90000c10:	095b      	lsrs	r3, r3, #5
90000c12:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pulse);
90000c14:	4b05      	ldr	r3, [pc, #20]	@ (90000c2c <TIM8_Start+0x3c>)
90000c16:	681b      	ldr	r3, [r3, #0]
90000c18:	68ba      	ldr	r2, [r7, #8]
90000c1a:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
90000c1c:	210c      	movs	r1, #12
90000c1e:	4803      	ldr	r0, [pc, #12]	@ (90000c2c <TIM8_Start+0x3c>)
90000c20:	f009 f8a8 	bl	90009d74 <HAL_TIM_PWM_Start>
}
90000c24:	bf00      	nop
90000c26:	3710      	adds	r7, #16
90000c28:	46bd      	mov	sp, r7
90000c2a:	bd80      	pop	{r7, pc}
90000c2c:	200000f0 	.word	0x200000f0
90000c30:	51eb851f 	.word	0x51eb851f

90000c34 <TIM8_Stop>:

void TIM8_Stop()
{
90000c34:	b580      	push	{r7, lr}
90000c36:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
90000c38:	210c      	movs	r1, #12
90000c3a:	4802      	ldr	r0, [pc, #8]	@ (90000c44 <TIM8_Stop+0x10>)
90000c3c:	f009 f9a8 	bl	90009f90 <HAL_TIM_PWM_Stop>
}
90000c40:	bf00      	nop
90000c42:	bd80      	pop	{r7, pc}
90000c44:	200000f0 	.word	0x200000f0

90000c48 <__io_putchar>:

int __io_putchar(int ch) {
90000c48:	b580      	push	{r7, lr}
90000c4a:	b082      	sub	sp, #8
90000c4c:	af00      	add	r7, sp, #0
90000c4e:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
90000c50:	1d39      	adds	r1, r7, #4
90000c52:	f04f 33ff 	mov.w	r3, #4294967295
90000c56:	2201      	movs	r2, #1
90000c58:	4806      	ldr	r0, [pc, #24]	@ (90000c74 <__io_putchar+0x2c>)
90000c5a:	f009 ff2e 	bl	9000aaba <HAL_UART_Transmit>
90000c5e:	4603      	mov	r3, r0
90000c60:	2b00      	cmp	r3, #0
90000c62:	d002      	beq.n	90000c6a <__io_putchar+0x22>
    return -1;
90000c64:	f04f 33ff 	mov.w	r3, #4294967295
90000c68:	e000      	b.n	90000c6c <__io_putchar+0x24>
  }
  return ch;
90000c6a:	687b      	ldr	r3, [r7, #4]
}
90000c6c:	4618      	mov	r0, r3
90000c6e:	3708      	adds	r7, #8
90000c70:	46bd      	mov	sp, r7
90000c72:	bd80      	pop	{r7, pc}
90000c74:	2000013c 	.word	0x2000013c

90000c78 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
90000c78:	b580      	push	{r7, lr}
90000c7a:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000c7c:	4b22      	ldr	r3, [pc, #136]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000c7e:	4a23      	ldr	r2, [pc, #140]	@ (90000d0c <MX_USART3_UART_Init+0x94>)
90000c80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000c82:	4b21      	ldr	r3, [pc, #132]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000c88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000c8a:	4b1f      	ldr	r3, [pc, #124]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000c8c:	2200      	movs	r2, #0
90000c8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000c90:	4b1d      	ldr	r3, [pc, #116]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000c92:	2200      	movs	r2, #0
90000c94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000c96:	4b1c      	ldr	r3, [pc, #112]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000c98:	2200      	movs	r2, #0
90000c9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000c9e:	220c      	movs	r2, #12
90000ca0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000ca2:	4b19      	ldr	r3, [pc, #100]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000ca4:	2200      	movs	r2, #0
90000ca6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000ca8:	4b17      	ldr	r3, [pc, #92]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000caa:	2200      	movs	r2, #0
90000cac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000cae:	4b16      	ldr	r3, [pc, #88]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000cb0:	2200      	movs	r2, #0
90000cb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000cb4:	4b14      	ldr	r3, [pc, #80]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000cb6:	2200      	movs	r2, #0
90000cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000cba:	4b13      	ldr	r3, [pc, #76]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000cbc:	2200      	movs	r2, #0
90000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000cc0:	4811      	ldr	r0, [pc, #68]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000cc2:	f009 feaa 	bl	9000aa1a <HAL_UART_Init>
90000cc6:	4603      	mov	r3, r0
90000cc8:	2b00      	cmp	r3, #0
90000cca:	d001      	beq.n	90000cd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000ccc:	f000 f88a 	bl	90000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000cd0:	2100      	movs	r1, #0
90000cd2:	480d      	ldr	r0, [pc, #52]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000cd4:	f00a ff41 	bl	9000bb5a <HAL_UARTEx_SetTxFifoThreshold>
90000cd8:	4603      	mov	r3, r0
90000cda:	2b00      	cmp	r3, #0
90000cdc:	d001      	beq.n	90000ce2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000cde:	f000 f881 	bl	90000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ce2:	2100      	movs	r1, #0
90000ce4:	4808      	ldr	r0, [pc, #32]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000ce6:	f00a ff76 	bl	9000bbd6 <HAL_UARTEx_SetRxFifoThreshold>
90000cea:	4603      	mov	r3, r0
90000cec:	2b00      	cmp	r3, #0
90000cee:	d001      	beq.n	90000cf4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000cf0:	f000 f878 	bl	90000de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000cf4:	4804      	ldr	r0, [pc, #16]	@ (90000d08 <MX_USART3_UART_Init+0x90>)
90000cf6:	f00a fef7 	bl	9000bae8 <HAL_UARTEx_DisableFifoMode>
90000cfa:	4603      	mov	r3, r0
90000cfc:	2b00      	cmp	r3, #0
90000cfe:	d001      	beq.n	90000d04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000d00:	f000 f870 	bl	90000de4 <Error_Handler>
  }
}
90000d04:	bf00      	nop
90000d06:	bd80      	pop	{r7, pc}
90000d08:	2000013c 	.word	0x2000013c
90000d0c:	40004800 	.word	0x40004800

90000d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000d10:	b580      	push	{r7, lr}
90000d12:	b0ba      	sub	sp, #232	@ 0xe8
90000d14:	af00      	add	r7, sp, #0
90000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000d18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000d1c:	2200      	movs	r2, #0
90000d1e:	601a      	str	r2, [r3, #0]
90000d20:	605a      	str	r2, [r3, #4]
90000d22:	609a      	str	r2, [r3, #8]
90000d24:	60da      	str	r2, [r3, #12]
90000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000d28:	f107 0310 	add.w	r3, r7, #16
90000d2c:	22c0      	movs	r2, #192	@ 0xc0
90000d2e:	2100      	movs	r1, #0
90000d30:	4618      	mov	r0, r3
90000d32:	f00c fc45 	bl	9000d5c0 <memset>
  if(huart->Instance==USART3)
90000d36:	687b      	ldr	r3, [r7, #4]
90000d38:	681b      	ldr	r3, [r3, #0]
90000d3a:	4a27      	ldr	r2, [pc, #156]	@ (90000dd8 <HAL_UART_MspInit+0xc8>)
90000d3c:	4293      	cmp	r3, r2
90000d3e:	d146      	bne.n	90000dce <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000d40:	f04f 0202 	mov.w	r2, #2
90000d44:	f04f 0300 	mov.w	r3, #0
90000d48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000d4c:	2300      	movs	r3, #0
90000d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000d52:	f107 0310 	add.w	r3, r7, #16
90000d56:	4618      	mov	r0, r3
90000d58:	f007 f876 	bl	90007e48 <HAL_RCCEx_PeriphCLKConfig>
90000d5c:	4603      	mov	r3, r0
90000d5e:	2b00      	cmp	r3, #0
90000d60:	d001      	beq.n	90000d66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000d62:	f000 f83f 	bl	90000de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000d66:	4b1d      	ldr	r3, [pc, #116]	@ (90000ddc <HAL_UART_MspInit+0xcc>)
90000d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (90000ddc <HAL_UART_MspInit+0xcc>)
90000d6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000d72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000d76:	4b19      	ldr	r3, [pc, #100]	@ (90000ddc <HAL_UART_MspInit+0xcc>)
90000d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000d7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000d80:	60fb      	str	r3, [r7, #12]
90000d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000d84:	4b15      	ldr	r3, [pc, #84]	@ (90000ddc <HAL_UART_MspInit+0xcc>)
90000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000d8a:	4a14      	ldr	r2, [pc, #80]	@ (90000ddc <HAL_UART_MspInit+0xcc>)
90000d8c:	f043 0302 	orr.w	r3, r3, #2
90000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000d94:	4b11      	ldr	r3, [pc, #68]	@ (90000ddc <HAL_UART_MspInit+0xcc>)
90000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000d9a:	f003 0302 	and.w	r3, r3, #2
90000d9e:	60bb      	str	r3, [r7, #8]
90000da0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000da2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000daa:	2302      	movs	r3, #2
90000dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000db0:	2300      	movs	r3, #0
90000db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000db6:	2300      	movs	r3, #0
90000db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000dbc:	2307      	movs	r3, #7
90000dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000dc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000dc6:	4619      	mov	r1, r3
90000dc8:	4805      	ldr	r0, [pc, #20]	@ (90000de0 <HAL_UART_MspInit+0xd0>)
90000dca:	f003 f859 	bl	90003e80 <HAL_GPIO_Init>
  }
}
90000dce:	bf00      	nop
90000dd0:	37e8      	adds	r7, #232	@ 0xe8
90000dd2:	46bd      	mov	sp, r7
90000dd4:	bd80      	pop	{r7, pc}
90000dd6:	bf00      	nop
90000dd8:	40004800 	.word	0x40004800
90000ddc:	58024400 	.word	0x58024400
90000de0:	58020400 	.word	0x58020400

90000de4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000de4:	b480      	push	{r7}
90000de6:	af00      	add	r7, sp, #0
  while(1)
90000de8:	bf00      	nop
90000dea:	e7fd      	b.n	90000de8 <Error_Handler+0x4>

90000dec <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000dec:	b580      	push	{r7, lr}
90000dee:	b0ce      	sub	sp, #312	@ 0x138
90000df0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000df2:	2300      	movs	r3, #0
90000df4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000df8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000dfc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000e00:	2200      	movs	r2, #0
90000e02:	601a      	str	r2, [r3, #0]
90000e04:	4b78      	ldr	r3, [pc, #480]	@ (90000fe8 <SystemClock_Config+0x1fc>)
90000e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000e08:	4a77      	ldr	r2, [pc, #476]	@ (90000fe8 <SystemClock_Config+0x1fc>)
90000e0a:	f023 0301 	bic.w	r3, r3, #1
90000e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000e10:	4b75      	ldr	r3, [pc, #468]	@ (90000fe8 <SystemClock_Config+0x1fc>)
90000e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000e14:	f003 0201 	and.w	r2, r3, #1
90000e18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000e20:	601a      	str	r2, [r3, #0]
90000e22:	4b72      	ldr	r3, [pc, #456]	@ (90000fec <SystemClock_Config+0x200>)
90000e24:	699b      	ldr	r3, [r3, #24]
90000e26:	4a71      	ldr	r2, [pc, #452]	@ (90000fec <SystemClock_Config+0x200>)
90000e28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000e2c:	6193      	str	r3, [r2, #24]
90000e2e:	4b6f      	ldr	r3, [pc, #444]	@ (90000fec <SystemClock_Config+0x200>)
90000e30:	699b      	ldr	r3, [r3, #24]
90000e32:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000e36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e3a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000e3e:	601a      	str	r2, [r3, #0]
90000e40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000e44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000e48:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000e4a:	bf00      	nop
90000e4c:	4b67      	ldr	r3, [pc, #412]	@ (90000fec <SystemClock_Config+0x200>)
90000e4e:	699b      	ldr	r3, [r3, #24]
90000e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000e58:	d1f8      	bne.n	90000e4c <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000e5a:	2301      	movs	r3, #1
90000e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000e60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000e68:	2300      	movs	r3, #0
90000e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000e6e:	2300      	movs	r3, #0
90000e70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000e74:	2302      	movs	r3, #2
90000e76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000e7a:	2302      	movs	r3, #2
90000e7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000e80:	2305      	movs	r3, #5
90000e82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000e86:	23a0      	movs	r3, #160	@ 0xa0
90000e88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000e8c:	2300      	movs	r3, #0
90000e8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000e92:	2302      	movs	r3, #2
90000e94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000e98:	2302      	movs	r3, #2
90000e9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000e9e:	2304      	movs	r3, #4
90000ea0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000ea4:	2300      	movs	r3, #0
90000ea6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000eaa:	2308      	movs	r3, #8
90000eac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000eb0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000eb4:	4618      	mov	r0, r3
90000eb6:	f005 ffe1 	bl	90006e7c <HAL_RCC_OscConfig>
90000eba:	4603      	mov	r3, r0
90000ebc:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000ec0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000ec4:	2b00      	cmp	r3, #0
90000ec6:	d001      	beq.n	90000ecc <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000ec8:	f7ff ff8c 	bl	90000de4 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000ecc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ed0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ed4:	2205      	movs	r2, #5
90000ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000ed8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000edc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ee0:	2260      	movs	r2, #96	@ 0x60
90000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000ee4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ee8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000eec:	2202      	movs	r2, #2
90000eee:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000ef0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ef4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ef8:	220a      	movs	r2, #10
90000efa:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f00:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000f04:	2212      	movs	r2, #18
90000f06:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000f08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f0c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000f10:	2200      	movs	r2, #0
90000f12:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000f14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f18:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000f1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000f20:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000f22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f26:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000f2a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000f2e:	f04f 0300 	mov.w	r3, #0
90000f32:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000f3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000f3e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000f46:	f107 0308 	add.w	r3, r7, #8
90000f4a:	4618      	mov	r0, r3
90000f4c:	f006 ff7c 	bl	90007e48 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000f50:	233f      	movs	r3, #63	@ 0x3f
90000f52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000f56:	2303      	movs	r3, #3
90000f58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000f5c:	2300      	movs	r3, #0
90000f5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000f62:	2308      	movs	r3, #8
90000f64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000f68:	2340      	movs	r3, #64	@ 0x40
90000f6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000f6e:	2340      	movs	r3, #64	@ 0x40
90000f70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000f74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000f78:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000f7c:	2340      	movs	r3, #64	@ 0x40
90000f7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000f82:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000f86:	2104      	movs	r1, #4
90000f88:	4618      	mov	r0, r3
90000f8a:	f006 fbd1 	bl	90007730 <HAL_RCC_ClockConfig>
90000f8e:	4603      	mov	r3, r0
90000f90:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000f94:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000f98:	2b00      	cmp	r3, #0
90000f9a:	d001      	beq.n	90000fa0 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000f9c:	f7ff ff22 	bl	90000de4 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000fa0:	4b13      	ldr	r3, [pc, #76]	@ (90000ff0 <SystemClock_Config+0x204>)
90000fa2:	681b      	ldr	r3, [r3, #0]
90000fa4:	4a12      	ldr	r2, [pc, #72]	@ (90000ff0 <SystemClock_Config+0x204>)
90000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000faa:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000fac:	4b10      	ldr	r3, [pc, #64]	@ (90000ff0 <SystemClock_Config+0x204>)
90000fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000fb2:	4a0f      	ldr	r2, [pc, #60]	@ (90000ff0 <SystemClock_Config+0x204>)
90000fb4:	f043 0302 	orr.w	r3, r3, #2
90000fb8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (90000ff0 <SystemClock_Config+0x204>)
90000fbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000fc2:	f003 0202 	and.w	r2, r3, #2
90000fc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000fca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000fce:	601a      	str	r2, [r3, #0]
90000fd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000fd4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000fd8:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000fda:	f002 fae3 	bl	900035a4 <HAL_EnableCompensationCell>
}
90000fde:	bf00      	nop
90000fe0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000fe4:	46bd      	mov	sp, r7
90000fe6:	bd80      	pop	{r7, pc}
90000fe8:	58000400 	.word	0x58000400
90000fec:	58024800 	.word	0x58024800
90000ff0:	58024400 	.word	0x58024400

90000ff4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000ff4:	b480      	push	{r7}
90000ff6:	b085      	sub	sp, #20
90000ff8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000ffa:	4b34      	ldr	r3, [pc, #208]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
90000ffc:	695b      	ldr	r3, [r3, #20]
90000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90001002:	2b00      	cmp	r3, #0
90001004:	d11b      	bne.n	9000103e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90001006:	f3bf 8f4f 	dsb	sy
}
9000100a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000100c:	f3bf 8f6f 	isb	sy
}
90001010:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90001012:	4b2e      	ldr	r3, [pc, #184]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
90001014:	2200      	movs	r2, #0
90001016:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000101a:	f3bf 8f4f 	dsb	sy
}
9000101e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001020:	f3bf 8f6f 	isb	sy
}
90001024:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90001026:	4b29      	ldr	r3, [pc, #164]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
90001028:	695b      	ldr	r3, [r3, #20]
9000102a:	4a28      	ldr	r2, [pc, #160]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
9000102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90001030:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90001032:	f3bf 8f4f 	dsb	sy
}
90001036:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001038:	f3bf 8f6f 	isb	sy
}
9000103c:	e000      	b.n	90001040 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000103e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90001040:	4b22      	ldr	r3, [pc, #136]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
90001042:	695b      	ldr	r3, [r3, #20]
90001044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90001048:	2b00      	cmp	r3, #0
9000104a:	d138      	bne.n	900010be <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000104c:	4b1f      	ldr	r3, [pc, #124]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
9000104e:	2200      	movs	r2, #0
90001050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90001054:	f3bf 8f4f 	dsb	sy
}
90001058:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
9000105a:	4b1c      	ldr	r3, [pc, #112]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
9000105c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90001060:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90001062:	68fb      	ldr	r3, [r7, #12]
90001064:	0b5b      	lsrs	r3, r3, #13
90001066:	f3c3 030e 	ubfx	r3, r3, #0, #15
9000106a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000106c:	68fb      	ldr	r3, [r7, #12]
9000106e:	08db      	lsrs	r3, r3, #3
90001070:	f3c3 0309 	ubfx	r3, r3, #0, #10
90001074:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001076:	68bb      	ldr	r3, [r7, #8]
90001078:	015a      	lsls	r2, r3, #5
9000107a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
9000107e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90001080:	687a      	ldr	r2, [r7, #4]
90001082:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001084:	4911      	ldr	r1, [pc, #68]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
90001086:	4313      	orrs	r3, r2
90001088:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
9000108c:	687b      	ldr	r3, [r7, #4]
9000108e:	1e5a      	subs	r2, r3, #1
90001090:	607a      	str	r2, [r7, #4]
90001092:	2b00      	cmp	r3, #0
90001094:	d1ef      	bne.n	90001076 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90001096:	68bb      	ldr	r3, [r7, #8]
90001098:	1e5a      	subs	r2, r3, #1
9000109a:	60ba      	str	r2, [r7, #8]
9000109c:	2b00      	cmp	r3, #0
9000109e:	d1e5      	bne.n	9000106c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
900010a0:	f3bf 8f4f 	dsb	sy
}
900010a4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900010a6:	4b09      	ldr	r3, [pc, #36]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
900010a8:	695b      	ldr	r3, [r3, #20]
900010aa:	4a08      	ldr	r2, [pc, #32]	@ (900010cc <CPU_CACHE_Enable+0xd8>)
900010ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900010b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900010b2:	f3bf 8f4f 	dsb	sy
}
900010b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900010b8:	f3bf 8f6f 	isb	sy
}
900010bc:	e000      	b.n	900010c0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900010be:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
900010c0:	bf00      	nop
900010c2:	3714      	adds	r7, #20
900010c4:	46bd      	mov	sp, r7
900010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900010ca:	4770      	bx	lr
900010cc:	e000ed00 	.word	0xe000ed00

900010d0 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
900010d0:	b580      	push	{r7, lr}
900010d2:	b082      	sub	sp, #8
900010d4:	af00      	add	r7, sp, #0
900010d6:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900010d8:	490e      	ldr	r1, [pc, #56]	@ (90001114 <MX_LTDC_ClockConfig+0x44>)
900010da:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
900010de:	f04f 0300 	mov.w	r3, #0
900010e2:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
900010e6:	4b0b      	ldr	r3, [pc, #44]	@ (90001114 <MX_LTDC_ClockConfig+0x44>)
900010e8:	2205      	movs	r2, #5
900010ea:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
900010ec:	4b09      	ldr	r3, [pc, #36]	@ (90001114 <MX_LTDC_ClockConfig+0x44>)
900010ee:	22c0      	movs	r2, #192	@ 0xc0
900010f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
900010f2:	4b08      	ldr	r3, [pc, #32]	@ (90001114 <MX_LTDC_ClockConfig+0x44>)
900010f4:	2202      	movs	r2, #2
900010f6:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
900010f8:	4b06      	ldr	r3, [pc, #24]	@ (90001114 <MX_LTDC_ClockConfig+0x44>)
900010fa:	2214      	movs	r2, #20
900010fc:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
900010fe:	4b05      	ldr	r3, [pc, #20]	@ (90001114 <MX_LTDC_ClockConfig+0x44>)
90001100:	2263      	movs	r2, #99	@ 0x63
90001102:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90001104:	4803      	ldr	r0, [pc, #12]	@ (90001114 <MX_LTDC_ClockConfig+0x44>)
90001106:	f006 fe9f 	bl	90007e48 <HAL_RCCEx_PeriphCLKConfig>
9000110a:	4603      	mov	r3, r0
}
9000110c:	4618      	mov	r0, r3
9000110e:	3708      	adds	r7, #8
90001110:	46bd      	mov	sp, r7
90001112:	bd80      	pop	{r7, pc}
90001114:	200001d0 	.word	0x200001d0

90001118 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90001118:	b580      	push	{r7, lr}
9000111a:	b084      	sub	sp, #16
9000111c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
9000111e:	f002 fb61 	bl	900037e4 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90001122:	2301      	movs	r3, #1
90001124:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90001126:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
9000112a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
9000112c:	2318      	movs	r3, #24
9000112e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90001130:	2303      	movs	r3, #3
90001132:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90001134:	2300      	movs	r3, #0
90001136:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90001138:	2301      	movs	r3, #1
9000113a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
9000113c:	2300      	movs	r3, #0
9000113e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90001140:	2301      	movs	r3, #1
90001142:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90001144:	2300      	movs	r3, #0
90001146:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90001148:	2300      	movs	r3, #0
9000114a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
9000114c:	2300      	movs	r3, #0
9000114e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001150:	463b      	mov	r3, r7
90001152:	4618      	mov	r0, r3
90001154:	f002 fb7e 	bl	90003854 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90001158:	2004      	movs	r0, #4
9000115a:	f002 fb5b 	bl	90003814 <HAL_MPU_Enable>
}
9000115e:	bf00      	nop
90001160:	3710      	adds	r7, #16
90001162:	46bd      	mov	sp, r7
90001164:	bd80      	pop	{r7, pc}

90001166 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90001166:	b480      	push	{r7}
90001168:	af00      	add	r7, sp, #0
}
9000116a:	bf00      	nop
9000116c:	46bd      	mov	sp, r7
9000116e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001172:	4770      	bx	lr

90001174 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90001174:	b480      	push	{r7}
90001176:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90001178:	bf00      	nop
9000117a:	e7fd      	b.n	90001178 <HardFault_Handler+0x4>

9000117c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
9000117c:	b480      	push	{r7}
9000117e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90001180:	bf00      	nop
90001182:	e7fd      	b.n	90001180 <MemManage_Handler+0x4>

90001184 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90001184:	b480      	push	{r7}
90001186:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90001188:	bf00      	nop
9000118a:	e7fd      	b.n	90001188 <BusFault_Handler+0x4>

9000118c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
9000118c:	b480      	push	{r7}
9000118e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90001190:	bf00      	nop
90001192:	e7fd      	b.n	90001190 <UsageFault_Handler+0x4>

90001194 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90001194:	b480      	push	{r7}
90001196:	af00      	add	r7, sp, #0
}
90001198:	bf00      	nop
9000119a:	46bd      	mov	sp, r7
9000119c:	f85d 7b04 	ldr.w	r7, [sp], #4
900011a0:	4770      	bx	lr

900011a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
900011a2:	b480      	push	{r7}
900011a4:	af00      	add	r7, sp, #0
}
900011a6:	bf00      	nop
900011a8:	46bd      	mov	sp, r7
900011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900011ae:	4770      	bx	lr

900011b0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
900011b0:	b480      	push	{r7}
900011b2:	af00      	add	r7, sp, #0
}
900011b4:	bf00      	nop
900011b6:	46bd      	mov	sp, r7
900011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900011bc:	4770      	bx	lr

900011be <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
900011be:	b580      	push	{r7, lr}
900011c0:	af00      	add	r7, sp, #0
  HAL_IncTick();
900011c2:	f002 f99f 	bl	90003504 <HAL_IncTick>
}
900011c6:	bf00      	nop
900011c8:	bd80      	pop	{r7, pc}
	...

900011cc <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
900011cc:	b580      	push	{r7, lr}
900011ce:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
900011d0:	4802      	ldr	r0, [pc, #8]	@ (900011dc <OTG_FS_IRQHandler+0x10>)
900011d2:	f003 f836 	bl	90004242 <HAL_HCD_IRQHandler>
}
900011d6:	bf00      	nop
900011d8:	bd80      	pop	{r7, pc}
900011da:	bf00      	nop
900011dc:	20000294 	.word	0x20000294

900011e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
900011e0:	b580      	push	{r7, lr}
900011e2:	b086      	sub	sp, #24
900011e4:	af00      	add	r7, sp, #0
900011e6:	60f8      	str	r0, [r7, #12]
900011e8:	60b9      	str	r1, [r7, #8]
900011ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
900011ec:	2300      	movs	r3, #0
900011ee:	617b      	str	r3, [r7, #20]
900011f0:	e00a      	b.n	90001208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
900011f2:	f3af 8000 	nop.w
900011f6:	4601      	mov	r1, r0
900011f8:	68bb      	ldr	r3, [r7, #8]
900011fa:	1c5a      	adds	r2, r3, #1
900011fc:	60ba      	str	r2, [r7, #8]
900011fe:	b2ca      	uxtb	r2, r1
90001200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001202:	697b      	ldr	r3, [r7, #20]
90001204:	3301      	adds	r3, #1
90001206:	617b      	str	r3, [r7, #20]
90001208:	697a      	ldr	r2, [r7, #20]
9000120a:	687b      	ldr	r3, [r7, #4]
9000120c:	429a      	cmp	r2, r3
9000120e:	dbf0      	blt.n	900011f2 <_read+0x12>
  }

  return len;
90001210:	687b      	ldr	r3, [r7, #4]
}
90001212:	4618      	mov	r0, r3
90001214:	3718      	adds	r7, #24
90001216:	46bd      	mov	sp, r7
90001218:	bd80      	pop	{r7, pc}

9000121a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
9000121a:	b580      	push	{r7, lr}
9000121c:	b086      	sub	sp, #24
9000121e:	af00      	add	r7, sp, #0
90001220:	60f8      	str	r0, [r7, #12]
90001222:	60b9      	str	r1, [r7, #8]
90001224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001226:	2300      	movs	r3, #0
90001228:	617b      	str	r3, [r7, #20]
9000122a:	e009      	b.n	90001240 <_write+0x26>
  {
    __io_putchar(*ptr++);
9000122c:	68bb      	ldr	r3, [r7, #8]
9000122e:	1c5a      	adds	r2, r3, #1
90001230:	60ba      	str	r2, [r7, #8]
90001232:	781b      	ldrb	r3, [r3, #0]
90001234:	4618      	mov	r0, r3
90001236:	f7ff fd07 	bl	90000c48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000123a:	697b      	ldr	r3, [r7, #20]
9000123c:	3301      	adds	r3, #1
9000123e:	617b      	str	r3, [r7, #20]
90001240:	697a      	ldr	r2, [r7, #20]
90001242:	687b      	ldr	r3, [r7, #4]
90001244:	429a      	cmp	r2, r3
90001246:	dbf1      	blt.n	9000122c <_write+0x12>
  }
  return len;
90001248:	687b      	ldr	r3, [r7, #4]
}
9000124a:	4618      	mov	r0, r3
9000124c:	3718      	adds	r7, #24
9000124e:	46bd      	mov	sp, r7
90001250:	bd80      	pop	{r7, pc}

90001252 <_close>:

int _close(int file)
{
90001252:	b480      	push	{r7}
90001254:	b083      	sub	sp, #12
90001256:	af00      	add	r7, sp, #0
90001258:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
9000125a:	f04f 33ff 	mov.w	r3, #4294967295
}
9000125e:	4618      	mov	r0, r3
90001260:	370c      	adds	r7, #12
90001262:	46bd      	mov	sp, r7
90001264:	f85d 7b04 	ldr.w	r7, [sp], #4
90001268:	4770      	bx	lr

9000126a <_fstat>:


int _fstat(int file, struct stat *st)
{
9000126a:	b480      	push	{r7}
9000126c:	b083      	sub	sp, #12
9000126e:	af00      	add	r7, sp, #0
90001270:	6078      	str	r0, [r7, #4]
90001272:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90001274:	683b      	ldr	r3, [r7, #0]
90001276:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
9000127a:	605a      	str	r2, [r3, #4]
  return 0;
9000127c:	2300      	movs	r3, #0
}
9000127e:	4618      	mov	r0, r3
90001280:	370c      	adds	r7, #12
90001282:	46bd      	mov	sp, r7
90001284:	f85d 7b04 	ldr.w	r7, [sp], #4
90001288:	4770      	bx	lr

9000128a <_isatty>:

int _isatty(int file)
{
9000128a:	b480      	push	{r7}
9000128c:	b083      	sub	sp, #12
9000128e:	af00      	add	r7, sp, #0
90001290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
90001292:	2301      	movs	r3, #1
}
90001294:	4618      	mov	r0, r3
90001296:	370c      	adds	r7, #12
90001298:	46bd      	mov	sp, r7
9000129a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000129e:	4770      	bx	lr

900012a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
900012a0:	b480      	push	{r7}
900012a2:	b085      	sub	sp, #20
900012a4:	af00      	add	r7, sp, #0
900012a6:	60f8      	str	r0, [r7, #12]
900012a8:	60b9      	str	r1, [r7, #8]
900012aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
900012ac:	2300      	movs	r3, #0
}
900012ae:	4618      	mov	r0, r3
900012b0:	3714      	adds	r7, #20
900012b2:	46bd      	mov	sp, r7
900012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900012b8:	4770      	bx	lr
	...

900012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
900012bc:	b580      	push	{r7, lr}
900012be:	b086      	sub	sp, #24
900012c0:	af00      	add	r7, sp, #0
900012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900012c4:	4a14      	ldr	r2, [pc, #80]	@ (90001318 <_sbrk+0x5c>)
900012c6:	4b15      	ldr	r3, [pc, #84]	@ (9000131c <_sbrk+0x60>)
900012c8:	1ad3      	subs	r3, r2, r3
900012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
900012cc:	697b      	ldr	r3, [r7, #20]
900012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
900012d0:	4b13      	ldr	r3, [pc, #76]	@ (90001320 <_sbrk+0x64>)
900012d2:	681b      	ldr	r3, [r3, #0]
900012d4:	2b00      	cmp	r3, #0
900012d6:	d102      	bne.n	900012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900012d8:	4b11      	ldr	r3, [pc, #68]	@ (90001320 <_sbrk+0x64>)
900012da:	4a12      	ldr	r2, [pc, #72]	@ (90001324 <_sbrk+0x68>)
900012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900012de:	4b10      	ldr	r3, [pc, #64]	@ (90001320 <_sbrk+0x64>)
900012e0:	681a      	ldr	r2, [r3, #0]
900012e2:	687b      	ldr	r3, [r7, #4]
900012e4:	4413      	add	r3, r2
900012e6:	693a      	ldr	r2, [r7, #16]
900012e8:	429a      	cmp	r2, r3
900012ea:	d207      	bcs.n	900012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
900012ec:	f00c f9c6 	bl	9000d67c <__errno>
900012f0:	4603      	mov	r3, r0
900012f2:	220c      	movs	r2, #12
900012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900012f6:	f04f 33ff 	mov.w	r3, #4294967295
900012fa:	e009      	b.n	90001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900012fc:	4b08      	ldr	r3, [pc, #32]	@ (90001320 <_sbrk+0x64>)
900012fe:	681b      	ldr	r3, [r3, #0]
90001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001302:	4b07      	ldr	r3, [pc, #28]	@ (90001320 <_sbrk+0x64>)
90001304:	681a      	ldr	r2, [r3, #0]
90001306:	687b      	ldr	r3, [r7, #4]
90001308:	4413      	add	r3, r2
9000130a:	4a05      	ldr	r2, [pc, #20]	@ (90001320 <_sbrk+0x64>)
9000130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
9000130e:	68fb      	ldr	r3, [r7, #12]
}
90001310:	4618      	mov	r0, r3
90001312:	3718      	adds	r7, #24
90001314:	46bd      	mov	sp, r7
90001316:	bd80      	pop	{r7, pc}
90001318:	20020000 	.word	0x20020000
9000131c:	00001000 	.word	0x00001000
90001320:	20000290 	.word	0x20000290
90001324:	200014e8 	.word	0x200014e8

90001328 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90001328:	b580      	push	{r7, lr}
9000132a:	b082      	sub	sp, #8
9000132c:	af00      	add	r7, sp, #0
9000132e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90001330:	687b      	ldr	r3, [r7, #4]
90001332:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001336:	4618      	mov	r0, r3
90001338:	f00b fa68 	bl	9000c80c <USBH_LL_IncTimer>
}
9000133c:	bf00      	nop
9000133e:	3708      	adds	r7, #8
90001340:	46bd      	mov	sp, r7
90001342:	bd80      	pop	{r7, pc}

90001344 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90001344:	b580      	push	{r7, lr}
90001346:	b082      	sub	sp, #8
90001348:	af00      	add	r7, sp, #0
9000134a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
9000134c:	687b      	ldr	r3, [r7, #4]
9000134e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001352:	4618      	mov	r0, r3
90001354:	f00b faa4 	bl	9000c8a0 <USBH_LL_Connect>
}
90001358:	bf00      	nop
9000135a:	3708      	adds	r7, #8
9000135c:	46bd      	mov	sp, r7
9000135e:	bd80      	pop	{r7, pc}

90001360 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90001360:	b580      	push	{r7, lr}
90001362:	b082      	sub	sp, #8
90001364:	af00      	add	r7, sp, #0
90001366:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90001368:	687b      	ldr	r3, [r7, #4]
9000136a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000136e:	4618      	mov	r0, r3
90001370:	f00b faad 	bl	9000c8ce <USBH_LL_Disconnect>
}
90001374:	bf00      	nop
90001376:	3708      	adds	r7, #8
90001378:	46bd      	mov	sp, r7
9000137a:	bd80      	pop	{r7, pc}

9000137c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
9000137c:	b580      	push	{r7, lr}
9000137e:	b082      	sub	sp, #8
90001380:	af00      	add	r7, sp, #0
90001382:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90001384:	687b      	ldr	r3, [r7, #4]
90001386:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000138a:	4618      	mov	r0, r3
9000138c:	f00b fa68 	bl	9000c860 <USBH_LL_PortEnabled>
}
90001390:	bf00      	nop
90001392:	3708      	adds	r7, #8
90001394:	46bd      	mov	sp, r7
90001396:	bd80      	pop	{r7, pc}

90001398 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001398:	b580      	push	{r7, lr}
9000139a:	b082      	sub	sp, #8
9000139c:	af00      	add	r7, sp, #0
9000139e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
900013a0:	687b      	ldr	r3, [r7, #4]
900013a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900013a6:	4618      	mov	r0, r3
900013a8:	f00b fa68 	bl	9000c87c <USBH_LL_PortDisabled>
}
900013ac:	bf00      	nop
900013ae:	3708      	adds	r7, #8
900013b0:	46bd      	mov	sp, r7
900013b2:	bd80      	pop	{r7, pc}

900013b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
900013b4:	b480      	push	{r7}
900013b6:	b083      	sub	sp, #12
900013b8:	af00      	add	r7, sp, #0
900013ba:	6078      	str	r0, [r7, #4]
900013bc:	460b      	mov	r3, r1
900013be:	70fb      	strb	r3, [r7, #3]
900013c0:	4613      	mov	r3, r2
900013c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
900013c4:	bf00      	nop
900013c6:	370c      	adds	r7, #12
900013c8:	46bd      	mov	sp, r7
900013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
900013ce:	4770      	bx	lr

900013d0 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
900013d0:	b580      	push	{r7, lr}
900013d2:	b082      	sub	sp, #8
900013d4:	af00      	add	r7, sp, #0
900013d6:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
900013d8:	687b      	ldr	r3, [r7, #4]
900013da:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
900013de:	4618      	mov	r0, r3
900013e0:	f003 f83f 	bl	90004462 <HAL_HCD_Stop>
  return USBH_OK;
900013e4:	2300      	movs	r3, #0
}
900013e6:	4618      	mov	r0, r3
900013e8:	3708      	adds	r7, #8
900013ea:	46bd      	mov	sp, r7
900013ec:	bd80      	pop	{r7, pc}
	...

900013f0 <ClearCache>:

uint32_t x_size, y_size;
#define LCD_LINE_WIDTH 24

void ClearCache()
{
900013f0:	b480      	push	{r7}
900013f2:	b085      	sub	sp, #20
900013f4:	af00      	add	r7, sp, #0
900013f6:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900013fa:	60fb      	str	r3, [r7, #12]
900013fc:	f44f 23ff 	mov.w	r3, #522240	@ 0x7f800
90001400:	60bb      	str	r3, [r7, #8]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
90001402:	68bb      	ldr	r3, [r7, #8]
90001404:	2b00      	cmp	r3, #0
90001406:	dd1d      	ble.n	90001444 <ClearCache+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
90001408:	68fb      	ldr	r3, [r7, #12]
9000140a:	f003 021f 	and.w	r2, r3, #31
9000140e:	68bb      	ldr	r3, [r7, #8]
90001410:	4413      	add	r3, r2
90001412:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
90001414:	68fb      	ldr	r3, [r7, #12]
90001416:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
90001418:	f3bf 8f4f 	dsb	sy
}
9000141c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
9000141e:	4a0d      	ldr	r2, [pc, #52]	@ (90001454 <ClearCache+0x64>)
90001420:	683b      	ldr	r3, [r7, #0]
90001422:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
90001426:	683b      	ldr	r3, [r7, #0]
90001428:	3320      	adds	r3, #32
9000142a:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
9000142c:	687b      	ldr	r3, [r7, #4]
9000142e:	3b20      	subs	r3, #32
90001430:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
90001432:	687b      	ldr	r3, [r7, #4]
90001434:	2b00      	cmp	r3, #0
90001436:	dcf2      	bgt.n	9000141e <ClearCache+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
90001438:	f3bf 8f4f 	dsb	sy
}
9000143c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000143e:	f3bf 8f6f 	isb	sy
}
90001442:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
90001444:	bf00      	nop
	// otherwise I get LCD artefacts
	SCB_CleanDCache_by_Addr((void *)SDRAM_DEVICE_ADDR, 480*272*4);
}
90001446:	bf00      	nop
90001448:	3714      	adds	r7, #20
9000144a:	46bd      	mov	sp, r7
9000144c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001450:	4770      	bx	lr
90001452:	bf00      	nop
90001454:	e000ed00 	.word	0xe000ed00

90001458 <InitializeLcd>:

void InitializeLcd(void)
{
90001458:	b580      	push	{r7, lr}
9000145a:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
9000145c:	2101      	movs	r1, #1
9000145e:	2000      	movs	r0, #0
90001460:	f000 fefc 	bl	9000225c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90001464:	480f      	ldr	r0, [pc, #60]	@ (900014a4 <InitializeLcd+0x4c>)
90001466:	f00b fa77 	bl	9000c958 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
9000146a:	2000      	movs	r0, #0
9000146c:	f00b faca 	bl	9000ca04 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90001470:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001474:	f00b fb3c 	bl	9000caf0 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90001478:	490b      	ldr	r1, [pc, #44]	@ (900014a8 <InitializeLcd+0x50>)
9000147a:	2000      	movs	r0, #0
9000147c:	f001 f8a8 	bl	900025d0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90001480:	490a      	ldr	r1, [pc, #40]	@ (900014ac <InitializeLcd+0x54>)
90001482:	2000      	movs	r0, #0
90001484:	f001 f8c2 	bl	9000260c <BSP_LCD_GetYSize>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
90001488:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
9000148c:	f00b fad8 	bl	9000ca40 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
90001490:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001494:	f00b fae8 	bl	9000ca68 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
90001498:	4805      	ldr	r0, [pc, #20]	@ (900014b0 <InitializeLcd+0x58>)
9000149a:	f00b faf9 	bl	9000ca90 <UTIL_LCD_SetFont>
}
9000149e:	bf00      	nop
900014a0:	bd80      	pop	{r7, pc}
900014a2:	bf00      	nop
900014a4:	9000e554 	.word	0x9000e554
900014a8:	20000674 	.word	0x20000674
900014ac:	20000678 	.word	0x20000678
900014b0:	20000068 	.word	0x20000068

900014b4 <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
900014b4:	b580      	push	{r7, lr}
900014b6:	b082      	sub	sp, #8
900014b8:	af00      	add	r7, sp, #0
900014ba:	6078      	str	r0, [r7, #4]
900014bc:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
900014be:	683a      	ldr	r2, [r7, #0]
900014c0:	6879      	ldr	r1, [r7, #4]
900014c2:	4803      	ldr	r0, [pc, #12]	@ (900014d0 <uartSetCursorPosition+0x1c>)
900014c4:	f00b ff12 	bl	9000d2ec <iprintf>
}
900014c8:	bf00      	nop
900014ca:	3708      	adds	r7, #8
900014cc:	46bd      	mov	sp, r7
900014ce:	bd80      	pop	{r7, pc}
900014d0:	9000e324 	.word	0x9000e324

900014d4 <UartClearScreen>:

void UartClearScreen() {
900014d4:	b580      	push	{r7, lr}
900014d6:	af00      	add	r7, sp, #0
  printf("\033[2J");
900014d8:	4803      	ldr	r0, [pc, #12]	@ (900014e8 <UartClearScreen+0x14>)
900014da:	f00b ff07 	bl	9000d2ec <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
900014de:	4803      	ldr	r0, [pc, #12]	@ (900014ec <UartClearScreen+0x18>)
900014e0:	f00b ff04 	bl	9000d2ec <iprintf>
}
900014e4:	bf00      	nop
900014e6:	bd80      	pop	{r7, pc}
900014e8:	9000e330 	.word	0x9000e330
900014ec:	9000e338 	.word	0x9000e338

900014f0 <UartRenderState>:

void UartRenderState(AppContext *ctx) {
900014f0:	b580      	push	{r7, lr}
900014f2:	b082      	sub	sp, #8
900014f4:	af00      	add	r7, sp, #0
900014f6:	6078      	str	r0, [r7, #4]
  uartSetCursorPosition(1, 1);
900014f8:	2101      	movs	r1, #1
900014fa:	2001      	movs	r0, #1
900014fc:	f7ff ffda 	bl	900014b4 <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
90001500:	687b      	ldr	r3, [r7, #4]
90001502:	781b      	ldrb	r3, [r3, #0]
90001504:	2b00      	cmp	r3, #0
90001506:	d13a      	bne.n	9000157e <UartRenderState+0x8e>
    printf("F1: Voltage control    ");
90001508:	481f      	ldr	r0, [pc, #124]	@ (90001588 <UartRenderState+0x98>)
9000150a:	f00b feef 	bl	9000d2ec <iprintf>
    uartSetCursorPosition(2, 1);
9000150e:	2101      	movs	r1, #1
90001510:	2002      	movs	r0, #2
90001512:	f7ff ffcf 	bl	900014b4 <uartSetCursorPosition>
    printf("Current input: %d     ", ctx->inputValue);
90001516:	687b      	ldr	r3, [r7, #4]
90001518:	889b      	ldrh	r3, [r3, #4]
9000151a:	4619      	mov	r1, r3
9000151c:	481b      	ldr	r0, [pc, #108]	@ (9000158c <UartRenderState+0x9c>)
9000151e:	f00b fee5 	bl	9000d2ec <iprintf>
    uartSetCursorPosition(3, 1);
90001522:	2101      	movs	r1, #1
90001524:	2003      	movs	r0, #3
90001526:	f7ff ffc5 	bl	900014b4 <uartSetCursorPosition>
    if (ctx->voltage > 0) {
9000152a:	687b      	ldr	r3, [r7, #4]
9000152c:	885b      	ldrh	r3, [r3, #2]
9000152e:	2b00      	cmp	r3, #0
90001530:	d006      	beq.n	90001540 <UartRenderState+0x50>
      printf("Voltage: %dV     ", ctx->voltage);
90001532:	687b      	ldr	r3, [r7, #4]
90001534:	885b      	ldrh	r3, [r3, #2]
90001536:	4619      	mov	r1, r3
90001538:	4815      	ldr	r0, [pc, #84]	@ (90001590 <UartRenderState+0xa0>)
9000153a:	f00b fed7 	bl	9000d2ec <iprintf>
9000153e:	e002      	b.n	90001546 <UartRenderState+0x56>
    } else {
      printf("Voltage: N/A     ");
90001540:	4814      	ldr	r0, [pc, #80]	@ (90001594 <UartRenderState+0xa4>)
90001542:	f00b fed3 	bl	9000d2ec <iprintf>
    }
    uartSetCursorPosition(4, 1);
90001546:	2101      	movs	r1, #1
90001548:	2004      	movs	r0, #4
9000154a:	f7ff ffb3 	bl	900014b4 <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
9000154e:	687b      	ldr	r3, [r7, #4]
90001550:	79db      	ldrb	r3, [r3, #7]
90001552:	2b00      	cmp	r3, #0
90001554:	d006      	beq.n	90001564 <UartRenderState+0x74>
      printf("PWM is running at %dV   ", ctx->voltage);
90001556:	687b      	ldr	r3, [r7, #4]
90001558:	885b      	ldrh	r3, [r3, #2]
9000155a:	4619      	mov	r1, r3
9000155c:	480e      	ldr	r0, [pc, #56]	@ (90001598 <UartRenderState+0xa8>)
9000155e:	f00b fec5 	bl	9000d2ec <iprintf>
90001562:	e002      	b.n	9000156a <UartRenderState+0x7a>
    } else {
      printf("PWM is OFF              ");
90001564:	480d      	ldr	r0, [pc, #52]	@ (9000159c <UartRenderState+0xac>)
90001566:	f00b fec1 	bl	9000d2ec <iprintf>
    }
    uartSetCursorPosition(5, 1);
9000156a:	2101      	movs	r1, #1
9000156c:	2005      	movs	r0, #5
9000156e:	f7ff ffa1 	bl	900014b4 <uartSetCursorPosition>
    printf("%s                                                               \r\n", ctx->message);
90001572:	687b      	ldr	r3, [r7, #4]
90001574:	3309      	adds	r3, #9
90001576:	4619      	mov	r1, r3
90001578:	4809      	ldr	r0, [pc, #36]	@ (900015a0 <UartRenderState+0xb0>)
9000157a:	f00b feb7 	bl	9000d2ec <iprintf>
  }
}
9000157e:	bf00      	nop
90001580:	3708      	adds	r7, #8
90001582:	46bd      	mov	sp, r7
90001584:	bd80      	pop	{r7, pc}
90001586:	bf00      	nop
90001588:	9000e33c 	.word	0x9000e33c
9000158c:	9000e354 	.word	0x9000e354
90001590:	9000e36c 	.word	0x9000e36c
90001594:	9000e380 	.word	0x9000e380
90001598:	9000e394 	.word	0x9000e394
9000159c:	9000e3b0 	.word	0x9000e3b0
900015a0:	9000e3cc 	.word	0x9000e3cc

900015a4 <displayPaddedLine>:

void displayPaddedLine(uint16_t y, const char *text)
{
900015a4:	b580      	push	{r7, lr}
900015a6:	b08a      	sub	sp, #40	@ 0x28
900015a8:	af00      	add	r7, sp, #0
900015aa:	4603      	mov	r3, r0
900015ac:	6039      	str	r1, [r7, #0]
900015ae:	80fb      	strh	r3, [r7, #6]
	// the sole purpose of this helper method is to overwrite the whole row so that we do not need to rely on clear screen

    char padded[LCD_LINE_WIDTH];
    memset(padded, ' ', LCD_LINE_WIDTH);
900015b0:	f107 030c 	add.w	r3, r7, #12
900015b4:	2218      	movs	r2, #24
900015b6:	2120      	movs	r1, #32
900015b8:	4618      	mov	r0, r3
900015ba:	f00c f801 	bl	9000d5c0 <memset>

    // Copy up to 24 characters from text
    size_t len = strlen(text);
900015be:	6838      	ldr	r0, [r7, #0]
900015c0:	f7fe fe8e 	bl	900002e0 <strlen>
900015c4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (len > LCD_LINE_WIDTH) len = LCD_LINE_WIDTH;
900015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900015c8:	2b18      	cmp	r3, #24
900015ca:	d901      	bls.n	900015d0 <displayPaddedLine+0x2c>
900015cc:	2318      	movs	r3, #24
900015ce:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(padded, text, len);
900015d0:	f107 030c 	add.w	r3, r7, #12
900015d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900015d6:	6839      	ldr	r1, [r7, #0]
900015d8:	4618      	mov	r0, r3
900015da:	f00c f87c 	bl	9000d6d6 <memcpy>

    // Display the padded string
    UTIL_LCD_DisplayStringAt(0, y*32, (uint8_t *)padded, LEFT_MODE);
900015de:	88fb      	ldrh	r3, [r7, #6]
900015e0:	015b      	lsls	r3, r3, #5
900015e2:	4619      	mov	r1, r3
900015e4:	f107 020c 	add.w	r2, r7, #12
900015e8:	2303      	movs	r3, #3
900015ea:	2000      	movs	r0, #0
900015ec:	f00b facc 	bl	9000cb88 <UTIL_LCD_DisplayStringAt>
}
900015f0:	bf00      	nop
900015f2:	3728      	adds	r7, #40	@ 0x28
900015f4:	46bd      	mov	sp, r7
900015f6:	bd80      	pop	{r7, pc}

900015f8 <DisplayRenderState>:

void DisplayRenderState(AppContext *ctx)
{
900015f8:	b580      	push	{r7, lr}
900015fa:	b08a      	sub	sp, #40	@ 0x28
900015fc:	af00      	add	r7, sp, #0
900015fe:	6078      	str	r0, [r7, #4]
  char buffer[LCD_LINE_WIDTH+1];

  if (ctx->currentState == STATE_F1) {
90001600:	687b      	ldr	r3, [r7, #4]
90001602:	781b      	ldrb	r3, [r3, #0]
90001604:	2b00      	cmp	r3, #0
90001606:	d15f      	bne.n	900016c8 <DisplayRenderState+0xd0>
	displayPaddedLine(0, "F1: Voltage control");
90001608:	494d      	ldr	r1, [pc, #308]	@ (90001740 <DisplayRenderState+0x148>)
9000160a:	2000      	movs	r0, #0
9000160c:	f7ff ffca 	bl	900015a4 <displayPaddedLine>
    if (ctx->isPwmRunning == true) {
90001610:	687b      	ldr	r3, [r7, #4]
90001612:	79db      	ldrb	r3, [r3, #7]
90001614:	2b00      	cmp	r3, #0
90001616:	d013      	beq.n	90001640 <DisplayRenderState+0x48>
      sprintf(buffer, "PWM is running at %dV", ctx->voltage);
90001618:	687b      	ldr	r3, [r7, #4]
9000161a:	885b      	ldrh	r3, [r3, #2]
9000161c:	461a      	mov	r2, r3
9000161e:	f107 030c 	add.w	r3, r7, #12
90001622:	4948      	ldr	r1, [pc, #288]	@ (90001744 <DisplayRenderState+0x14c>)
90001624:	4618      	mov	r0, r3
90001626:	f00b fed1 	bl	9000d3cc <siprintf>
      displayPaddedLine(2, buffer);
9000162a:	f107 030c 	add.w	r3, r7, #12
9000162e:	4619      	mov	r1, r3
90001630:	2002      	movs	r0, #2
90001632:	f7ff ffb7 	bl	900015a4 <displayPaddedLine>
      displayPaddedLine(3, "Press STOP");
90001636:	4944      	ldr	r1, [pc, #272]	@ (90001748 <DisplayRenderState+0x150>)
90001638:	2003      	movs	r0, #3
9000163a:	f7ff ffb3 	bl	900015a4 <displayPaddedLine>
9000163e:	e06c      	b.n	9000171a <DisplayRenderState+0x122>
    }
    else if (ctx->isVoltageEntered)
90001640:	687b      	ldr	r3, [r7, #4]
90001642:	799b      	ldrb	r3, [r3, #6]
90001644:	2b00      	cmp	r3, #0
90001646:	d013      	beq.n	90001670 <DisplayRenderState+0x78>
    {
	  sprintf(buffer, "Voltage: %dV", ctx->voltage);
90001648:	687b      	ldr	r3, [r7, #4]
9000164a:	885b      	ldrh	r3, [r3, #2]
9000164c:	461a      	mov	r2, r3
9000164e:	f107 030c 	add.w	r3, r7, #12
90001652:	493e      	ldr	r1, [pc, #248]	@ (9000174c <DisplayRenderState+0x154>)
90001654:	4618      	mov	r0, r3
90001656:	f00b feb9 	bl	9000d3cc <siprintf>
      displayPaddedLine(2, buffer);
9000165a:	f107 030c 	add.w	r3, r7, #12
9000165e:	4619      	mov	r1, r3
90001660:	2002      	movs	r0, #2
90001662:	f7ff ff9f 	bl	900015a4 <displayPaddedLine>
      displayPaddedLine(3, "Press START or Clear");
90001666:	493a      	ldr	r1, [pc, #232]	@ (90001750 <DisplayRenderState+0x158>)
90001668:	2003      	movs	r0, #3
9000166a:	f7ff ff9b 	bl	900015a4 <displayPaddedLine>
9000166e:	e054      	b.n	9000171a <DisplayRenderState+0x122>
    }
    else
    {
	  char cursor = ' ';
90001670:	2320      	movs	r3, #32
90001672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if (ctx->displayCursor) cursor = '_';
90001676:	687b      	ldr	r3, [r7, #4]
90001678:	7a1b      	ldrb	r3, [r3, #8]
9000167a:	2b00      	cmp	r3, #0
9000167c:	d002      	beq.n	90001684 <DisplayRenderState+0x8c>
9000167e:	235f      	movs	r3, #95	@ 0x5f
90001680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if (ctx->inputValue != 0)
90001684:	687b      	ldr	r3, [r7, #4]
90001686:	889b      	ldrh	r3, [r3, #4]
90001688:	2b00      	cmp	r3, #0
9000168a:	d00a      	beq.n	900016a2 <DisplayRenderState+0xaa>
		  sprintf(buffer, "Enter voltage: %d%c", ctx->inputValue, cursor);
9000168c:	687b      	ldr	r3, [r7, #4]
9000168e:	889b      	ldrh	r3, [r3, #4]
90001690:	461a      	mov	r2, r3
90001692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90001696:	f107 000c 	add.w	r0, r7, #12
9000169a:	492e      	ldr	r1, [pc, #184]	@ (90001754 <DisplayRenderState+0x15c>)
9000169c:	f00b fe96 	bl	9000d3cc <siprintf>
900016a0:	e007      	b.n	900016b2 <DisplayRenderState+0xba>
	  else
		  sprintf(buffer, "Enter voltage: %c", cursor);
900016a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
900016a6:	f107 030c 	add.w	r3, r7, #12
900016aa:	492b      	ldr	r1, [pc, #172]	@ (90001758 <DisplayRenderState+0x160>)
900016ac:	4618      	mov	r0, r3
900016ae:	f00b fe8d 	bl	9000d3cc <siprintf>

      displayPaddedLine(2, buffer);
900016b2:	f107 030c 	add.w	r3, r7, #12
900016b6:	4619      	mov	r1, r3
900016b8:	2002      	movs	r0, #2
900016ba:	f7ff ff73 	bl	900015a4 <displayPaddedLine>
      displayPaddedLine(3, "Press Enter");
900016be:	4927      	ldr	r1, [pc, #156]	@ (9000175c <DisplayRenderState+0x164>)
900016c0:	2003      	movs	r0, #3
900016c2:	f7ff ff6f 	bl	900015a4 <displayPaddedLine>
900016c6:	e028      	b.n	9000171a <DisplayRenderState+0x122>
    }
  }
  else if (ctx->currentState == STATE_F2)
900016c8:	687b      	ldr	r3, [r7, #4]
900016ca:	781b      	ldrb	r3, [r3, #0]
900016cc:	2b01      	cmp	r3, #1
900016ce:	d110      	bne.n	900016f2 <DisplayRenderState+0xfa>
  {
    displayPaddedLine(0, "F2: Voltage and current");
900016d0:	4923      	ldr	r1, [pc, #140]	@ (90001760 <DisplayRenderState+0x168>)
900016d2:	2000      	movs	r0, #0
900016d4:	f7ff ff66 	bl	900015a4 <displayPaddedLine>
    displayPaddedLine(1, "");
900016d8:	4922      	ldr	r1, [pc, #136]	@ (90001764 <DisplayRenderState+0x16c>)
900016da:	2001      	movs	r0, #1
900016dc:	f7ff ff62 	bl	900015a4 <displayPaddedLine>
    displayPaddedLine(2, "");
900016e0:	4920      	ldr	r1, [pc, #128]	@ (90001764 <DisplayRenderState+0x16c>)
900016e2:	2002      	movs	r0, #2
900016e4:	f7ff ff5e 	bl	900015a4 <displayPaddedLine>
    displayPaddedLine(3, "");
900016e8:	491e      	ldr	r1, [pc, #120]	@ (90001764 <DisplayRenderState+0x16c>)
900016ea:	2003      	movs	r0, #3
900016ec:	f7ff ff5a 	bl	900015a4 <displayPaddedLine>
900016f0:	e013      	b.n	9000171a <DisplayRenderState+0x122>
  }
  else if (ctx->currentState == STATE_F3)
900016f2:	687b      	ldr	r3, [r7, #4]
900016f4:	781b      	ldrb	r3, [r3, #0]
900016f6:	2b02      	cmp	r3, #2
900016f8:	d10f      	bne.n	9000171a <DisplayRenderState+0x122>
  {
	displayPaddedLine(0, "F3: Calibration");
900016fa:	491b      	ldr	r1, [pc, #108]	@ (90001768 <DisplayRenderState+0x170>)
900016fc:	2000      	movs	r0, #0
900016fe:	f7ff ff51 	bl	900015a4 <displayPaddedLine>
    displayPaddedLine(1, "");
90001702:	4918      	ldr	r1, [pc, #96]	@ (90001764 <DisplayRenderState+0x16c>)
90001704:	2001      	movs	r0, #1
90001706:	f7ff ff4d 	bl	900015a4 <displayPaddedLine>
    displayPaddedLine(2, "");
9000170a:	4916      	ldr	r1, [pc, #88]	@ (90001764 <DisplayRenderState+0x16c>)
9000170c:	2002      	movs	r0, #2
9000170e:	f7ff ff49 	bl	900015a4 <displayPaddedLine>
    displayPaddedLine(3, "");
90001712:	4914      	ldr	r1, [pc, #80]	@ (90001764 <DisplayRenderState+0x16c>)
90001714:	2003      	movs	r0, #3
90001716:	f7ff ff45 	bl	900015a4 <displayPaddedLine>
  }

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000171a:	4814      	ldr	r0, [pc, #80]	@ (9000176c <DisplayRenderState+0x174>)
9000171c:	f00b f990 	bl	9000ca40 <UTIL_LCD_SetTextColor>
  displayPaddedLine(4, ctx->message);
90001720:	687b      	ldr	r3, [r7, #4]
90001722:	3309      	adds	r3, #9
90001724:	4619      	mov	r1, r3
90001726:	2004      	movs	r0, #4
90001728:	f7ff ff3c 	bl	900015a4 <displayPaddedLine>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
9000172c:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
90001730:	f00b f986 	bl	9000ca40 <UTIL_LCD_SetTextColor>

  ClearCache();
90001734:	f7ff fe5c 	bl	900013f0 <ClearCache>
}
90001738:	bf00      	nop
9000173a:	3728      	adds	r7, #40	@ 0x28
9000173c:	46bd      	mov	sp, r7
9000173e:	bd80      	pop	{r7, pc}
90001740:	9000e410 	.word	0x9000e410
90001744:	9000e424 	.word	0x9000e424
90001748:	9000e43c 	.word	0x9000e43c
9000174c:	9000e448 	.word	0x9000e448
90001750:	9000e458 	.word	0x9000e458
90001754:	9000e470 	.word	0x9000e470
90001758:	9000e484 	.word	0x9000e484
9000175c:	9000e498 	.word	0x9000e498
90001760:	9000e4a4 	.word	0x9000e4a4
90001764:	9000e4bc 	.word	0x9000e4bc
90001768:	9000e4c0 	.word	0x9000e4c0
9000176c:	ffff0000 	.word	0xffff0000

90001770 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001770:	b580      	push	{r7, lr}
90001772:	b084      	sub	sp, #16
90001774:	af00      	add	r7, sp, #0
90001776:	6078      	str	r0, [r7, #4]
90001778:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
9000177a:	687b      	ldr	r3, [r7, #4]
9000177c:	2b00      	cmp	r3, #0
9000177e:	d103      	bne.n	90001788 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90001780:	f04f 33ff 	mov.w	r3, #4294967295
90001784:	60fb      	str	r3, [r7, #12]
90001786:	e02c      	b.n	900017e2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90001788:	683b      	ldr	r3, [r7, #0]
9000178a:	681a      	ldr	r2, [r3, #0]
9000178c:	687b      	ldr	r3, [r7, #4]
9000178e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90001790:	683b      	ldr	r3, [r7, #0]
90001792:	685a      	ldr	r2, [r3, #4]
90001794:	687b      	ldr	r3, [r7, #4]
90001796:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90001798:	683b      	ldr	r3, [r7, #0]
9000179a:	891a      	ldrh	r2, [r3, #8]
9000179c:	687b      	ldr	r3, [r7, #4]
9000179e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
900017a0:	683b      	ldr	r3, [r7, #0]
900017a2:	68da      	ldr	r2, [r3, #12]
900017a4:	687b      	ldr	r3, [r7, #4]
900017a6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
900017a8:	683b      	ldr	r3, [r7, #0]
900017aa:	691a      	ldr	r2, [r3, #16]
900017ac:	687b      	ldr	r3, [r7, #4]
900017ae:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
900017b0:	683b      	ldr	r3, [r7, #0]
900017b2:	695a      	ldr	r2, [r3, #20]
900017b4:	687b      	ldr	r3, [r7, #4]
900017b6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
900017b8:	687b      	ldr	r3, [r7, #4]
900017ba:	4a0c      	ldr	r2, [pc, #48]	@ (900017ec <FT5336_RegisterBusIO+0x7c>)
900017bc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900017be:	687b      	ldr	r3, [r7, #4]
900017c0:	4a0b      	ldr	r2, [pc, #44]	@ (900017f0 <FT5336_RegisterBusIO+0x80>)
900017c2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
900017c4:	687b      	ldr	r3, [r7, #4]
900017c6:	687a      	ldr	r2, [r7, #4]
900017c8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900017ca:	687b      	ldr	r3, [r7, #4]
900017cc:	681b      	ldr	r3, [r3, #0]
900017ce:	2b00      	cmp	r3, #0
900017d0:	d004      	beq.n	900017dc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900017d2:	687b      	ldr	r3, [r7, #4]
900017d4:	681b      	ldr	r3, [r3, #0]
900017d6:	4798      	blx	r3
900017d8:	60f8      	str	r0, [r7, #12]
900017da:	e002      	b.n	900017e2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
900017dc:	f04f 33ff 	mov.w	r3, #4294967295
900017e0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
900017e2:	68fb      	ldr	r3, [r7, #12]
}
900017e4:	4618      	mov	r0, r3
900017e6:	3710      	adds	r7, #16
900017e8:	46bd      	mov	sp, r7
900017ea:	bd80      	pop	{r7, pc}
900017ec:	90001815 	.word	0x90001815
900017f0:	90001849 	.word	0x90001849

900017f4 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
900017f4:	b580      	push	{r7, lr}
900017f6:	b082      	sub	sp, #8
900017f8:	af00      	add	r7, sp, #0
900017fa:	6078      	str	r0, [r7, #4]
900017fc:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900017fe:	687b      	ldr	r3, [r7, #4]
90001800:	3318      	adds	r3, #24
90001802:	6839      	ldr	r1, [r7, #0]
90001804:	4618      	mov	r0, r3
90001806:	f000 f850 	bl	900018aa <ft5336_chip_id>
9000180a:	4603      	mov	r3, r0
}
9000180c:	4618      	mov	r0, r3
9000180e:	3708      	adds	r7, #8
90001810:	46bd      	mov	sp, r7
90001812:	bd80      	pop	{r7, pc}

90001814 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001814:	b590      	push	{r4, r7, lr}
90001816:	b087      	sub	sp, #28
90001818:	af00      	add	r7, sp, #0
9000181a:	60f8      	str	r0, [r7, #12]
9000181c:	607a      	str	r2, [r7, #4]
9000181e:	461a      	mov	r2, r3
90001820:	460b      	mov	r3, r1
90001822:	72fb      	strb	r3, [r7, #11]
90001824:	4613      	mov	r3, r2
90001826:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001828:	68fb      	ldr	r3, [r7, #12]
9000182a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
9000182c:	697b      	ldr	r3, [r7, #20]
9000182e:	691c      	ldr	r4, [r3, #16]
90001830:	697b      	ldr	r3, [r7, #20]
90001832:	8918      	ldrh	r0, [r3, #8]
90001834:	7afb      	ldrb	r3, [r7, #11]
90001836:	b299      	uxth	r1, r3
90001838:	893b      	ldrh	r3, [r7, #8]
9000183a:	687a      	ldr	r2, [r7, #4]
9000183c:	47a0      	blx	r4
9000183e:	4603      	mov	r3, r0
}
90001840:	4618      	mov	r0, r3
90001842:	371c      	adds	r7, #28
90001844:	46bd      	mov	sp, r7
90001846:	bd90      	pop	{r4, r7, pc}

90001848 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001848:	b590      	push	{r4, r7, lr}
9000184a:	b087      	sub	sp, #28
9000184c:	af00      	add	r7, sp, #0
9000184e:	60f8      	str	r0, [r7, #12]
90001850:	607a      	str	r2, [r7, #4]
90001852:	461a      	mov	r2, r3
90001854:	460b      	mov	r3, r1
90001856:	72fb      	strb	r3, [r7, #11]
90001858:	4613      	mov	r3, r2
9000185a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
9000185c:	68fb      	ldr	r3, [r7, #12]
9000185e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001860:	697b      	ldr	r3, [r7, #20]
90001862:	68dc      	ldr	r4, [r3, #12]
90001864:	697b      	ldr	r3, [r7, #20]
90001866:	8918      	ldrh	r0, [r3, #8]
90001868:	7afb      	ldrb	r3, [r7, #11]
9000186a:	b299      	uxth	r1, r3
9000186c:	893b      	ldrh	r3, [r7, #8]
9000186e:	687a      	ldr	r2, [r7, #4]
90001870:	47a0      	blx	r4
90001872:	4603      	mov	r3, r0
}
90001874:	4618      	mov	r0, r3
90001876:	371c      	adds	r7, #28
90001878:	46bd      	mov	sp, r7
9000187a:	bd90      	pop	{r4, r7, pc}

9000187c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
9000187c:	b590      	push	{r4, r7, lr}
9000187e:	b085      	sub	sp, #20
90001880:	af00      	add	r7, sp, #0
90001882:	60f8      	str	r0, [r7, #12]
90001884:	607a      	str	r2, [r7, #4]
90001886:	461a      	mov	r2, r3
90001888:	460b      	mov	r3, r1
9000188a:	72fb      	strb	r3, [r7, #11]
9000188c:	4613      	mov	r3, r2
9000188e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90001890:	68fb      	ldr	r3, [r7, #12]
90001892:	685c      	ldr	r4, [r3, #4]
90001894:	68fb      	ldr	r3, [r7, #12]
90001896:	6898      	ldr	r0, [r3, #8]
90001898:	893b      	ldrh	r3, [r7, #8]
9000189a:	7af9      	ldrb	r1, [r7, #11]
9000189c:	687a      	ldr	r2, [r7, #4]
9000189e:	47a0      	blx	r4
900018a0:	4603      	mov	r3, r0
}
900018a2:	4618      	mov	r0, r3
900018a4:	3714      	adds	r7, #20
900018a6:	46bd      	mov	sp, r7
900018a8:	bd90      	pop	{r4, r7, pc}

900018aa <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900018aa:	b580      	push	{r7, lr}
900018ac:	b084      	sub	sp, #16
900018ae:	af00      	add	r7, sp, #0
900018b0:	6078      	str	r0, [r7, #4]
900018b2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900018b4:	2301      	movs	r3, #1
900018b6:	683a      	ldr	r2, [r7, #0]
900018b8:	21a8      	movs	r1, #168	@ 0xa8
900018ba:	6878      	ldr	r0, [r7, #4]
900018bc:	f7ff ffde 	bl	9000187c <ft5336_read_reg>
900018c0:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900018c2:	68fb      	ldr	r3, [r7, #12]
900018c4:	2b00      	cmp	r3, #0
900018c6:	d107      	bne.n	900018d8 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900018c8:	683b      	ldr	r3, [r7, #0]
900018ca:	781a      	ldrb	r2, [r3, #0]
900018cc:	683b      	ldr	r3, [r7, #0]
900018ce:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900018d0:	683b      	ldr	r3, [r7, #0]
900018d2:	781a      	ldrb	r2, [r3, #0]
900018d4:	683b      	ldr	r3, [r7, #0]
900018d6:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900018d8:	68fb      	ldr	r3, [r7, #12]
}
900018da:	4618      	mov	r0, r3
900018dc:	3710      	adds	r7, #16
900018de:	46bd      	mov	sp, r7
900018e0:	bd80      	pop	{r7, pc}

900018e2 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900018e2:	b580      	push	{r7, lr}
900018e4:	b084      	sub	sp, #16
900018e6:	af00      	add	r7, sp, #0
900018e8:	6078      	str	r0, [r7, #4]
900018ea:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
900018ec:	f04f 33ff 	mov.w	r3, #4294967295
900018f0:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900018f2:	683b      	ldr	r3, [r7, #0]
900018f4:	681b      	ldr	r3, [r3, #0]
900018f6:	4619      	mov	r1, r3
900018f8:	6878      	ldr	r0, [r7, #4]
900018fa:	f000 f831 	bl	90001960 <MT48LC4M32B2_ClockEnable>
900018fe:	4603      	mov	r3, r0
90001900:	2b00      	cmp	r3, #0
90001902:	d128      	bne.n	90001956 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90001904:	2001      	movs	r0, #1
90001906:	f000 f8e1 	bl	90001acc <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000190a:	683b      	ldr	r3, [r7, #0]
9000190c:	681b      	ldr	r3, [r3, #0]
9000190e:	4619      	mov	r1, r3
90001910:	6878      	ldr	r0, [r7, #4]
90001912:	f000 f849 	bl	900019a8 <MT48LC4M32B2_Precharge>
90001916:	4603      	mov	r3, r0
90001918:	2b00      	cmp	r3, #0
9000191a:	d11c      	bne.n	90001956 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
9000191c:	683b      	ldr	r3, [r7, #0]
9000191e:	6819      	ldr	r1, [r3, #0]
90001920:	683b      	ldr	r3, [r7, #0]
90001922:	685b      	ldr	r3, [r3, #4]
90001924:	461a      	mov	r2, r3
90001926:	6878      	ldr	r0, [r7, #4]
90001928:	f000 f896 	bl	90001a58 <MT48LC4M32B2_RefreshMode>
9000192c:	4603      	mov	r3, r0
9000192e:	2b00      	cmp	r3, #0
90001930:	d111      	bne.n	90001956 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001932:	6839      	ldr	r1, [r7, #0]
90001934:	6878      	ldr	r0, [r7, #4]
90001936:	f000 f85b 	bl	900019f0 <MT48LC4M32B2_ModeRegConfig>
9000193a:	4603      	mov	r3, r0
9000193c:	2b00      	cmp	r3, #0
9000193e:	d10a      	bne.n	90001956 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001940:	683b      	ldr	r3, [r7, #0]
90001942:	689b      	ldr	r3, [r3, #8]
90001944:	4619      	mov	r1, r3
90001946:	6878      	ldr	r0, [r7, #4]
90001948:	f000 f8ac 	bl	90001aa4 <MT48LC4M32B2_RefreshRate>
9000194c:	4603      	mov	r3, r0
9000194e:	2b00      	cmp	r3, #0
90001950:	d101      	bne.n	90001956 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001952:	2300      	movs	r3, #0
90001954:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
90001956:	68fb      	ldr	r3, [r7, #12]
}
90001958:	4618      	mov	r0, r3
9000195a:	3710      	adds	r7, #16
9000195c:	46bd      	mov	sp, r7
9000195e:	bd80      	pop	{r7, pc}

90001960 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001960:	b580      	push	{r7, lr}
90001962:	b082      	sub	sp, #8
90001964:	af00      	add	r7, sp, #0
90001966:	6078      	str	r0, [r7, #4]
90001968:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000196a:	4b0e      	ldr	r3, [pc, #56]	@ (900019a4 <MT48LC4M32B2_ClockEnable+0x44>)
9000196c:	2201      	movs	r2, #1
9000196e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001970:	4a0c      	ldr	r2, [pc, #48]	@ (900019a4 <MT48LC4M32B2_ClockEnable+0x44>)
90001972:	683b      	ldr	r3, [r7, #0]
90001974:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001976:	4b0b      	ldr	r3, [pc, #44]	@ (900019a4 <MT48LC4M32B2_ClockEnable+0x44>)
90001978:	2201      	movs	r2, #1
9000197a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000197c:	4b09      	ldr	r3, [pc, #36]	@ (900019a4 <MT48LC4M32B2_ClockEnable+0x44>)
9000197e:	2200      	movs	r2, #0
90001980:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001982:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001986:	4907      	ldr	r1, [pc, #28]	@ (900019a4 <MT48LC4M32B2_ClockEnable+0x44>)
90001988:	6878      	ldr	r0, [r7, #4]
9000198a:	f008 f8cf 	bl	90009b2c <HAL_SDRAM_SendCommand>
9000198e:	4603      	mov	r3, r0
90001990:	2b00      	cmp	r3, #0
90001992:	d002      	beq.n	9000199a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001994:	f04f 33ff 	mov.w	r3, #4294967295
90001998:	e000      	b.n	9000199c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000199a:	2300      	movs	r3, #0
  }
}
9000199c:	4618      	mov	r0, r3
9000199e:	3708      	adds	r7, #8
900019a0:	46bd      	mov	sp, r7
900019a2:	bd80      	pop	{r7, pc}
900019a4:	2000067c 	.word	0x2000067c

900019a8 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900019a8:	b580      	push	{r7, lr}
900019aa:	b082      	sub	sp, #8
900019ac:	af00      	add	r7, sp, #0
900019ae:	6078      	str	r0, [r7, #4]
900019b0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900019b2:	4b0e      	ldr	r3, [pc, #56]	@ (900019ec <MT48LC4M32B2_Precharge+0x44>)
900019b4:	2202      	movs	r2, #2
900019b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900019b8:	4a0c      	ldr	r2, [pc, #48]	@ (900019ec <MT48LC4M32B2_Precharge+0x44>)
900019ba:	683b      	ldr	r3, [r7, #0]
900019bc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900019be:	4b0b      	ldr	r3, [pc, #44]	@ (900019ec <MT48LC4M32B2_Precharge+0x44>)
900019c0:	2201      	movs	r2, #1
900019c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900019c4:	4b09      	ldr	r3, [pc, #36]	@ (900019ec <MT48LC4M32B2_Precharge+0x44>)
900019c6:	2200      	movs	r2, #0
900019c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900019ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900019ce:	4907      	ldr	r1, [pc, #28]	@ (900019ec <MT48LC4M32B2_Precharge+0x44>)
900019d0:	6878      	ldr	r0, [r7, #4]
900019d2:	f008 f8ab 	bl	90009b2c <HAL_SDRAM_SendCommand>
900019d6:	4603      	mov	r3, r0
900019d8:	2b00      	cmp	r3, #0
900019da:	d002      	beq.n	900019e2 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900019dc:	f04f 33ff 	mov.w	r3, #4294967295
900019e0:	e000      	b.n	900019e4 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900019e2:	2300      	movs	r3, #0
  }
}
900019e4:	4618      	mov	r0, r3
900019e6:	3708      	adds	r7, #8
900019e8:	46bd      	mov	sp, r7
900019ea:	bd80      	pop	{r7, pc}
900019ec:	2000067c 	.word	0x2000067c

900019f0 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900019f0:	b580      	push	{r7, lr}
900019f2:	b084      	sub	sp, #16
900019f4:	af00      	add	r7, sp, #0
900019f6:	6078      	str	r0, [r7, #4]
900019f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900019fa:	683b      	ldr	r3, [r7, #0]
900019fc:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
900019fe:	683b      	ldr	r3, [r7, #0]
90001a00:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001a02:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001a04:	683b      	ldr	r3, [r7, #0]
90001a06:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
90001a08:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
90001a0a:	683b      	ldr	r3, [r7, #0]
90001a0c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001a0e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001a10:	683b      	ldr	r3, [r7, #0]
90001a12:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001a14:	4313      	orrs	r3, r2
90001a16:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90001a18:	4b0e      	ldr	r3, [pc, #56]	@ (90001a54 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001a1a:	2204      	movs	r2, #4
90001a1c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001a1e:	683b      	ldr	r3, [r7, #0]
90001a20:	681b      	ldr	r3, [r3, #0]
90001a22:	4a0c      	ldr	r2, [pc, #48]	@ (90001a54 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001a24:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001a26:	4b0b      	ldr	r3, [pc, #44]	@ (90001a54 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001a28:	2201      	movs	r2, #1
90001a2a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001a2c:	4a09      	ldr	r2, [pc, #36]	@ (90001a54 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001a2e:	68fb      	ldr	r3, [r7, #12]
90001a30:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001a32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001a36:	4907      	ldr	r1, [pc, #28]	@ (90001a54 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001a38:	6878      	ldr	r0, [r7, #4]
90001a3a:	f008 f877 	bl	90009b2c <HAL_SDRAM_SendCommand>
90001a3e:	4603      	mov	r3, r0
90001a40:	2b00      	cmp	r3, #0
90001a42:	d002      	beq.n	90001a4a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001a44:	f04f 33ff 	mov.w	r3, #4294967295
90001a48:	e000      	b.n	90001a4c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001a4a:	2300      	movs	r3, #0
  }
}
90001a4c:	4618      	mov	r0, r3
90001a4e:	3710      	adds	r7, #16
90001a50:	46bd      	mov	sp, r7
90001a52:	bd80      	pop	{r7, pc}
90001a54:	2000067c 	.word	0x2000067c

90001a58 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
90001a58:	b580      	push	{r7, lr}
90001a5a:	b084      	sub	sp, #16
90001a5c:	af00      	add	r7, sp, #0
90001a5e:	60f8      	str	r0, [r7, #12]
90001a60:	60b9      	str	r1, [r7, #8]
90001a62:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001a64:	4a0e      	ldr	r2, [pc, #56]	@ (90001aa0 <MT48LC4M32B2_RefreshMode+0x48>)
90001a66:	687b      	ldr	r3, [r7, #4]
90001a68:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
90001a6a:	4a0d      	ldr	r2, [pc, #52]	@ (90001aa0 <MT48LC4M32B2_RefreshMode+0x48>)
90001a6c:	68bb      	ldr	r3, [r7, #8]
90001a6e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001a70:	4b0b      	ldr	r3, [pc, #44]	@ (90001aa0 <MT48LC4M32B2_RefreshMode+0x48>)
90001a72:	2208      	movs	r2, #8
90001a74:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001a76:	4b0a      	ldr	r3, [pc, #40]	@ (90001aa0 <MT48LC4M32B2_RefreshMode+0x48>)
90001a78:	2200      	movs	r2, #0
90001a7a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001a80:	4907      	ldr	r1, [pc, #28]	@ (90001aa0 <MT48LC4M32B2_RefreshMode+0x48>)
90001a82:	68f8      	ldr	r0, [r7, #12]
90001a84:	f008 f852 	bl	90009b2c <HAL_SDRAM_SendCommand>
90001a88:	4603      	mov	r3, r0
90001a8a:	2b00      	cmp	r3, #0
90001a8c:	d002      	beq.n	90001a94 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90001a8e:	f04f 33ff 	mov.w	r3, #4294967295
90001a92:	e000      	b.n	90001a96 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001a94:	2300      	movs	r3, #0
  }
}
90001a96:	4618      	mov	r0, r3
90001a98:	3710      	adds	r7, #16
90001a9a:	46bd      	mov	sp, r7
90001a9c:	bd80      	pop	{r7, pc}
90001a9e:	bf00      	nop
90001aa0:	2000067c 	.word	0x2000067c

90001aa4 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
90001aa4:	b580      	push	{r7, lr}
90001aa6:	b082      	sub	sp, #8
90001aa8:	af00      	add	r7, sp, #0
90001aaa:	6078      	str	r0, [r7, #4]
90001aac:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90001aae:	6839      	ldr	r1, [r7, #0]
90001ab0:	6878      	ldr	r0, [r7, #4]
90001ab2:	f008 f870 	bl	90009b96 <HAL_SDRAM_ProgramRefreshRate>
90001ab6:	4603      	mov	r3, r0
90001ab8:	2b00      	cmp	r3, #0
90001aba:	d002      	beq.n	90001ac2 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001abc:	f04f 33ff 	mov.w	r3, #4294967295
90001ac0:	e000      	b.n	90001ac4 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001ac2:	2300      	movs	r3, #0
  }
}
90001ac4:	4618      	mov	r0, r3
90001ac6:	3708      	adds	r7, #8
90001ac8:	46bd      	mov	sp, r7
90001aca:	bd80      	pop	{r7, pc}

90001acc <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001acc:	b580      	push	{r7, lr}
90001ace:	b084      	sub	sp, #16
90001ad0:	af00      	add	r7, sp, #0
90001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90001ad4:	f001 fd2a 	bl	9000352c <HAL_GetTick>
90001ad8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
90001ada:	bf00      	nop
90001adc:	f001 fd26 	bl	9000352c <HAL_GetTick>
90001ae0:	4602      	mov	r2, r0
90001ae2:	68fb      	ldr	r3, [r7, #12]
90001ae4:	1ad3      	subs	r3, r2, r3
90001ae6:	687a      	ldr	r2, [r7, #4]
90001ae8:	429a      	cmp	r2, r3
90001aea:	d8f7      	bhi.n	90001adc <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001aec:	2300      	movs	r3, #0
}
90001aee:	4618      	mov	r0, r3
90001af0:	3710      	adds	r7, #16
90001af2:	46bd      	mov	sp, r7
90001af4:	bd80      	pop	{r7, pc}
	...

90001af8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
90001af8:	b580      	push	{r7, lr}
90001afa:	b082      	sub	sp, #8
90001afc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001afe:	2300      	movs	r3, #0
90001b00:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
90001b02:	4b16      	ldr	r3, [pc, #88]	@ (90001b5c <BSP_I2C4_Init+0x64>)
90001b04:	4a16      	ldr	r2, [pc, #88]	@ (90001b60 <BSP_I2C4_Init+0x68>)
90001b06:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
90001b08:	4b16      	ldr	r3, [pc, #88]	@ (90001b64 <BSP_I2C4_Init+0x6c>)
90001b0a:	681b      	ldr	r3, [r3, #0]
90001b0c:	2b00      	cmp	r3, #0
90001b0e:	d11f      	bne.n	90001b50 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001b10:	4b14      	ldr	r3, [pc, #80]	@ (90001b64 <BSP_I2C4_Init+0x6c>)
90001b12:	681b      	ldr	r3, [r3, #0]
90001b14:	3301      	adds	r3, #1
90001b16:	4a13      	ldr	r2, [pc, #76]	@ (90001b64 <BSP_I2C4_Init+0x6c>)
90001b18:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90001b1a:	4810      	ldr	r0, [pc, #64]	@ (90001b5c <BSP_I2C4_Init+0x64>)
90001b1c:	f004 faf8 	bl	90006110 <HAL_I2C_GetState>
90001b20:	4603      	mov	r3, r0
90001b22:	2b00      	cmp	r3, #0
90001b24:	d114      	bne.n	90001b50 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
90001b26:	480d      	ldr	r0, [pc, #52]	@ (90001b5c <BSP_I2C4_Init+0x64>)
90001b28:	f000 fb06 	bl	90002138 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001b2c:	f006 f976 	bl	90007e1c <HAL_RCC_GetPCLK2Freq>
90001b30:	4603      	mov	r3, r0
90001b32:	490d      	ldr	r1, [pc, #52]	@ (90001b68 <BSP_I2C4_Init+0x70>)
90001b34:	4618      	mov	r0, r3
90001b36:	f000 f889 	bl	90001c4c <I2C_GetTiming>
90001b3a:	4603      	mov	r3, r0
90001b3c:	4619      	mov	r1, r3
90001b3e:	4807      	ldr	r0, [pc, #28]	@ (90001b5c <BSP_I2C4_Init+0x64>)
90001b40:	f000 f814 	bl	90001b6c <MX_I2C4_Init>
90001b44:	4603      	mov	r3, r0
90001b46:	2b00      	cmp	r3, #0
90001b48:	d002      	beq.n	90001b50 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
90001b4a:	f06f 0307 	mvn.w	r3, #7
90001b4e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001b50:	687b      	ldr	r3, [r7, #4]
}
90001b52:	4618      	mov	r0, r3
90001b54:	3708      	adds	r7, #8
90001b56:	46bd      	mov	sp, r7
90001b58:	bd80      	pop	{r7, pc}
90001b5a:	bf00      	nop
90001b5c:	20001094 	.word	0x20001094
90001b60:	58001c00 	.word	0x58001c00
90001b64:	2000068c 	.word	0x2000068c
90001b68:	000186a0 	.word	0x000186a0

90001b6c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001b6c:	b580      	push	{r7, lr}
90001b6e:	b084      	sub	sp, #16
90001b70:	af00      	add	r7, sp, #0
90001b72:	6078      	str	r0, [r7, #4]
90001b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001b76:	2300      	movs	r3, #0
90001b78:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90001b7a:	687b      	ldr	r3, [r7, #4]
90001b7c:	683a      	ldr	r2, [r7, #0]
90001b7e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001b80:	687b      	ldr	r3, [r7, #4]
90001b82:	2200      	movs	r2, #0
90001b84:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001b86:	687b      	ldr	r3, [r7, #4]
90001b88:	2201      	movs	r2, #1
90001b8a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001b8c:	687b      	ldr	r3, [r7, #4]
90001b8e:	2200      	movs	r2, #0
90001b90:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001b92:	687b      	ldr	r3, [r7, #4]
90001b94:	2200      	movs	r2, #0
90001b96:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001b98:	687b      	ldr	r3, [r7, #4]
90001b9a:	2200      	movs	r2, #0
90001b9c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90001b9e:	687b      	ldr	r3, [r7, #4]
90001ba0:	2200      	movs	r2, #0
90001ba2:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001ba4:	687b      	ldr	r3, [r7, #4]
90001ba6:	2200      	movs	r2, #0
90001ba8:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90001baa:	6878      	ldr	r0, [r7, #4]
90001bac:	f004 f8f0 	bl	90005d90 <HAL_I2C_Init>
90001bb0:	4603      	mov	r3, r0
90001bb2:	2b00      	cmp	r3, #0
90001bb4:	d002      	beq.n	90001bbc <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001bb6:	2301      	movs	r3, #1
90001bb8:	73fb      	strb	r3, [r7, #15]
90001bba:	e014      	b.n	90001be6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001bbc:	2300      	movs	r3, #0
90001bbe:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001bc0:	68b9      	ldr	r1, [r7, #8]
90001bc2:	6878      	ldr	r0, [r7, #4]
90001bc4:	f004 fd2c 	bl	90006620 <HAL_I2CEx_ConfigAnalogFilter>
90001bc8:	4603      	mov	r3, r0
90001bca:	2b00      	cmp	r3, #0
90001bcc:	d002      	beq.n	90001bd4 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
90001bce:	2301      	movs	r3, #1
90001bd0:	73fb      	strb	r3, [r7, #15]
90001bd2:	e008      	b.n	90001be6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001bd4:	2100      	movs	r1, #0
90001bd6:	6878      	ldr	r0, [r7, #4]
90001bd8:	f004 fd6d 	bl	900066b6 <HAL_I2CEx_ConfigDigitalFilter>
90001bdc:	4603      	mov	r3, r0
90001bde:	2b00      	cmp	r3, #0
90001be0:	d001      	beq.n	90001be6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001be2:	2301      	movs	r3, #1
90001be4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001be6:	7bfb      	ldrb	r3, [r7, #15]
}
90001be8:	4618      	mov	r0, r3
90001bea:	3710      	adds	r7, #16
90001bec:	46bd      	mov	sp, r7
90001bee:	bd80      	pop	{r7, pc}

90001bf0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001bf0:	b580      	push	{r7, lr}
90001bf2:	b088      	sub	sp, #32
90001bf4:	af02      	add	r7, sp, #8
90001bf6:	60ba      	str	r2, [r7, #8]
90001bf8:	461a      	mov	r2, r3
90001bfa:	4603      	mov	r3, r0
90001bfc:	81fb      	strh	r3, [r7, #14]
90001bfe:	460b      	mov	r3, r1
90001c00:	81bb      	strh	r3, [r7, #12]
90001c02:	4613      	mov	r3, r2
90001c04:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001c06:	89b9      	ldrh	r1, [r7, #12]
90001c08:	89f8      	ldrh	r0, [r7, #14]
90001c0a:	88fb      	ldrh	r3, [r7, #6]
90001c0c:	9300      	str	r3, [sp, #0]
90001c0e:	68bb      	ldr	r3, [r7, #8]
90001c10:	2201      	movs	r2, #1
90001c12:	f000 fafd 	bl	90002210 <I2C4_ReadReg>
90001c16:	4603      	mov	r3, r0
90001c18:	2b00      	cmp	r3, #0
90001c1a:	d102      	bne.n	90001c22 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001c1c:	2300      	movs	r3, #0
90001c1e:	617b      	str	r3, [r7, #20]
90001c20:	e00c      	b.n	90001c3c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90001c22:	4809      	ldr	r0, [pc, #36]	@ (90001c48 <BSP_I2C4_ReadReg+0x58>)
90001c24:	f004 fa82 	bl	9000612c <HAL_I2C_GetError>
90001c28:	4603      	mov	r3, r0
90001c2a:	2b04      	cmp	r3, #4
90001c2c:	d103      	bne.n	90001c36 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
90001c2e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
90001c32:	617b      	str	r3, [r7, #20]
90001c34:	e002      	b.n	90001c3c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001c36:	f06f 0303 	mvn.w	r3, #3
90001c3a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001c3c:	697b      	ldr	r3, [r7, #20]
}
90001c3e:	4618      	mov	r0, r3
90001c40:	3718      	adds	r7, #24
90001c42:	46bd      	mov	sp, r7
90001c44:	bd80      	pop	{r7, pc}
90001c46:	bf00      	nop
90001c48:	20001094 	.word	0x20001094

90001c4c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001c4c:	b580      	push	{r7, lr}
90001c4e:	b086      	sub	sp, #24
90001c50:	af00      	add	r7, sp, #0
90001c52:	6078      	str	r0, [r7, #4]
90001c54:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001c56:	2300      	movs	r3, #0
90001c58:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001c5a:	687b      	ldr	r3, [r7, #4]
90001c5c:	2b00      	cmp	r3, #0
90001c5e:	d06b      	beq.n	90001d38 <I2C_GetTiming+0xec>
90001c60:	683b      	ldr	r3, [r7, #0]
90001c62:	2b00      	cmp	r3, #0
90001c64:	d068      	beq.n	90001d38 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001c66:	2300      	movs	r3, #0
90001c68:	613b      	str	r3, [r7, #16]
90001c6a:	e060      	b.n	90001d2e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001c6c:	4a35      	ldr	r2, [pc, #212]	@ (90001d44 <I2C_GetTiming+0xf8>)
90001c6e:	693b      	ldr	r3, [r7, #16]
90001c70:	212c      	movs	r1, #44	@ 0x2c
90001c72:	fb01 f303 	mul.w	r3, r1, r3
90001c76:	4413      	add	r3, r2
90001c78:	3304      	adds	r3, #4
90001c7a:	681b      	ldr	r3, [r3, #0]
90001c7c:	683a      	ldr	r2, [r7, #0]
90001c7e:	429a      	cmp	r2, r3
90001c80:	d352      	bcc.n	90001d28 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001c82:	4a30      	ldr	r2, [pc, #192]	@ (90001d44 <I2C_GetTiming+0xf8>)
90001c84:	693b      	ldr	r3, [r7, #16]
90001c86:	212c      	movs	r1, #44	@ 0x2c
90001c88:	fb01 f303 	mul.w	r3, r1, r3
90001c8c:	4413      	add	r3, r2
90001c8e:	3308      	adds	r3, #8
90001c90:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001c92:	683a      	ldr	r2, [r7, #0]
90001c94:	429a      	cmp	r2, r3
90001c96:	d847      	bhi.n	90001d28 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001c98:	6939      	ldr	r1, [r7, #16]
90001c9a:	6878      	ldr	r0, [r7, #4]
90001c9c:	f000 f856 	bl	90001d4c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001ca0:	6939      	ldr	r1, [r7, #16]
90001ca2:	6878      	ldr	r0, [r7, #4]
90001ca4:	f000 f940 	bl	90001f28 <I2C_Compute_SCLL_SCLH>
90001ca8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90001caa:	68fb      	ldr	r3, [r7, #12]
90001cac:	2b7f      	cmp	r3, #127	@ 0x7f
90001cae:	d842      	bhi.n	90001d36 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001cb0:	4925      	ldr	r1, [pc, #148]	@ (90001d48 <I2C_GetTiming+0xfc>)
90001cb2:	68fa      	ldr	r2, [r7, #12]
90001cb4:	4613      	mov	r3, r2
90001cb6:	009b      	lsls	r3, r3, #2
90001cb8:	4413      	add	r3, r2
90001cba:	009b      	lsls	r3, r3, #2
90001cbc:	440b      	add	r3, r1
90001cbe:	681b      	ldr	r3, [r3, #0]
90001cc0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001cc2:	4821      	ldr	r0, [pc, #132]	@ (90001d48 <I2C_GetTiming+0xfc>)
90001cc4:	68fa      	ldr	r2, [r7, #12]
90001cc6:	4613      	mov	r3, r2
90001cc8:	009b      	lsls	r3, r3, #2
90001cca:	4413      	add	r3, r2
90001ccc:	009b      	lsls	r3, r3, #2
90001cce:	4403      	add	r3, r0
90001cd0:	3304      	adds	r3, #4
90001cd2:	681b      	ldr	r3, [r3, #0]
90001cd4:	051b      	lsls	r3, r3, #20
90001cd6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001cda:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001cdc:	481a      	ldr	r0, [pc, #104]	@ (90001d48 <I2C_GetTiming+0xfc>)
90001cde:	68fa      	ldr	r2, [r7, #12]
90001ce0:	4613      	mov	r3, r2
90001ce2:	009b      	lsls	r3, r3, #2
90001ce4:	4413      	add	r3, r2
90001ce6:	009b      	lsls	r3, r3, #2
90001ce8:	4403      	add	r3, r0
90001cea:	3308      	adds	r3, #8
90001cec:	681b      	ldr	r3, [r3, #0]
90001cee:	041b      	lsls	r3, r3, #16
90001cf0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001cf4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001cf6:	4814      	ldr	r0, [pc, #80]	@ (90001d48 <I2C_GetTiming+0xfc>)
90001cf8:	68fa      	ldr	r2, [r7, #12]
90001cfa:	4613      	mov	r3, r2
90001cfc:	009b      	lsls	r3, r3, #2
90001cfe:	4413      	add	r3, r2
90001d00:	009b      	lsls	r3, r3, #2
90001d02:	4403      	add	r3, r0
90001d04:	330c      	adds	r3, #12
90001d06:	681b      	ldr	r3, [r3, #0]
90001d08:	021b      	lsls	r3, r3, #8
90001d0a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001d0c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001d0e:	480e      	ldr	r0, [pc, #56]	@ (90001d48 <I2C_GetTiming+0xfc>)
90001d10:	68fa      	ldr	r2, [r7, #12]
90001d12:	4613      	mov	r3, r2
90001d14:	009b      	lsls	r3, r3, #2
90001d16:	4413      	add	r3, r2
90001d18:	009b      	lsls	r3, r3, #2
90001d1a:	4403      	add	r3, r0
90001d1c:	3310      	adds	r3, #16
90001d1e:	681b      	ldr	r3, [r3, #0]
90001d20:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001d22:	430b      	orrs	r3, r1
90001d24:	617b      	str	r3, [r7, #20]
        }
        break;
90001d26:	e006      	b.n	90001d36 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001d28:	693b      	ldr	r3, [r7, #16]
90001d2a:	3301      	adds	r3, #1
90001d2c:	613b      	str	r3, [r7, #16]
90001d2e:	693b      	ldr	r3, [r7, #16]
90001d30:	2b02      	cmp	r3, #2
90001d32:	d99b      	bls.n	90001c6c <I2C_GetTiming+0x20>
90001d34:	e000      	b.n	90001d38 <I2C_GetTiming+0xec>
        break;
90001d36:	bf00      	nop
      }
    }
  }

  return ret;
90001d38:	697b      	ldr	r3, [r7, #20]
}
90001d3a:	4618      	mov	r0, r3
90001d3c:	3718      	adds	r7, #24
90001d3e:	46bd      	mov	sp, r7
90001d40:	bd80      	pop	{r7, pc}
90001d42:	bf00      	nop
90001d44:	9000e4d0 	.word	0x9000e4d0
90001d48:	20000690 	.word	0x20000690

90001d4c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001d4c:	b480      	push	{r7}
90001d4e:	b08f      	sub	sp, #60	@ 0x3c
90001d50:	af00      	add	r7, sp, #0
90001d52:	6078      	str	r0, [r7, #4]
90001d54:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001d56:	2310      	movs	r3, #16
90001d58:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001d5a:	687b      	ldr	r3, [r7, #4]
90001d5c:	085a      	lsrs	r2, r3, #1
90001d5e:	4b6e      	ldr	r3, [pc, #440]	@ (90001f18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001d60:	4413      	add	r3, r2
90001d62:	687a      	ldr	r2, [r7, #4]
90001d64:	fbb3 f3f2 	udiv	r3, r3, r2
90001d68:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001d6a:	2332      	movs	r3, #50	@ 0x32
90001d6c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001d6e:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001d72:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001d74:	4a69      	ldr	r2, [pc, #420]	@ (90001f1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d76:	683b      	ldr	r3, [r7, #0]
90001d78:	212c      	movs	r1, #44	@ 0x2c
90001d7a:	fb01 f303 	mul.w	r3, r1, r3
90001d7e:	4413      	add	r3, r2
90001d80:	3324      	adds	r3, #36	@ 0x24
90001d82:	681b      	ldr	r3, [r3, #0]
90001d84:	4618      	mov	r0, r3
90001d86:	4a65      	ldr	r2, [pc, #404]	@ (90001f1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d88:	683b      	ldr	r3, [r7, #0]
90001d8a:	212c      	movs	r1, #44	@ 0x2c
90001d8c:	fb01 f303 	mul.w	r3, r1, r3
90001d90:	4413      	add	r3, r2
90001d92:	330c      	adds	r3, #12
90001d94:	681b      	ldr	r3, [r3, #0]
90001d96:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001d98:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001d9a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001d9c:	495f      	ldr	r1, [pc, #380]	@ (90001f1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001d9e:	683b      	ldr	r3, [r7, #0]
90001da0:	202c      	movs	r0, #44	@ 0x2c
90001da2:	fb00 f303 	mul.w	r3, r0, r3
90001da6:	440b      	add	r3, r1
90001da8:	3328      	adds	r3, #40	@ 0x28
90001daa:	681b      	ldr	r3, [r3, #0]
90001dac:	3303      	adds	r3, #3
90001dae:	69f9      	ldr	r1, [r7, #28]
90001db0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001db4:	1ad3      	subs	r3, r2, r3
90001db6:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001db8:	4a58      	ldr	r2, [pc, #352]	@ (90001f1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001dba:	683b      	ldr	r3, [r7, #0]
90001dbc:	212c      	movs	r1, #44	@ 0x2c
90001dbe:	fb01 f303 	mul.w	r3, r1, r3
90001dc2:	4413      	add	r3, r2
90001dc4:	3310      	adds	r3, #16
90001dc6:	681b      	ldr	r3, [r3, #0]
90001dc8:	4618      	mov	r0, r3
90001dca:	4a54      	ldr	r2, [pc, #336]	@ (90001f1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001dcc:	683b      	ldr	r3, [r7, #0]
90001dce:	212c      	movs	r1, #44	@ 0x2c
90001dd0:	fb01 f303 	mul.w	r3, r1, r3
90001dd4:	4413      	add	r3, r2
90001dd6:	3320      	adds	r3, #32
90001dd8:	681b      	ldr	r3, [r3, #0]
90001dda:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001ddc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001dde:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001de0:	494e      	ldr	r1, [pc, #312]	@ (90001f1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001de2:	683b      	ldr	r3, [r7, #0]
90001de4:	202c      	movs	r0, #44	@ 0x2c
90001de6:	fb00 f303 	mul.w	r3, r0, r3
90001dea:	440b      	add	r3, r1
90001dec:	3328      	adds	r3, #40	@ 0x28
90001dee:	681b      	ldr	r3, [r3, #0]
90001df0:	3304      	adds	r3, #4
90001df2:	69f9      	ldr	r1, [r7, #28]
90001df4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001df8:	1ad3      	subs	r3, r2, r3
90001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001dfc:	4a47      	ldr	r2, [pc, #284]	@ (90001f1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001dfe:	683b      	ldr	r3, [r7, #0]
90001e00:	212c      	movs	r1, #44	@ 0x2c
90001e02:	fb01 f303 	mul.w	r3, r1, r3
90001e06:	4413      	add	r3, r2
90001e08:	3320      	adds	r3, #32
90001e0a:	681b      	ldr	r3, [r3, #0]
90001e0c:	4618      	mov	r0, r3
90001e0e:	4a43      	ldr	r2, [pc, #268]	@ (90001f1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001e10:	683b      	ldr	r3, [r7, #0]
90001e12:	212c      	movs	r1, #44	@ 0x2c
90001e14:	fb01 f303 	mul.w	r3, r1, r3
90001e18:	4413      	add	r3, r2
90001e1a:	3314      	adds	r3, #20
90001e1c:	681b      	ldr	r3, [r3, #0]
90001e1e:	4403      	add	r3, r0
90001e20:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e24:	2b00      	cmp	r3, #0
90001e26:	dc01      	bgt.n	90001e2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001e28:	2300      	movs	r3, #0
90001e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001e2e:	2b00      	cmp	r3, #0
90001e30:	dc01      	bgt.n	90001e36 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001e32:	2300      	movs	r3, #0
90001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001e36:	2300      	movs	r3, #0
90001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
90001e3a:	e062      	b.n	90001f02 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001e3c:	2300      	movs	r3, #0
90001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
90001e40:	e059      	b.n	90001ef6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001e44:	3301      	adds	r3, #1
90001e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001e48:	3201      	adds	r2, #1
90001e4a:	fb03 f202 	mul.w	r2, r3, r2
90001e4e:	69fb      	ldr	r3, [r7, #28]
90001e50:	fb02 f303 	mul.w	r3, r2, r3
90001e54:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001e56:	693b      	ldr	r3, [r7, #16]
90001e58:	68fa      	ldr	r2, [r7, #12]
90001e5a:	429a      	cmp	r2, r3
90001e5c:	d348      	bcc.n	90001ef0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001e5e:	2300      	movs	r3, #0
90001e60:	623b      	str	r3, [r7, #32]
90001e62:	e042      	b.n	90001eea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001e66:	3301      	adds	r3, #1
90001e68:	6a3a      	ldr	r2, [r7, #32]
90001e6a:	fb03 f202 	mul.w	r2, r3, r2
90001e6e:	69fb      	ldr	r3, [r7, #28]
90001e70:	fb02 f303 	mul.w	r3, r2, r3
90001e74:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e78:	68ba      	ldr	r2, [r7, #8]
90001e7a:	429a      	cmp	r2, r3
90001e7c:	d332      	bcc.n	90001ee4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001e80:	68ba      	ldr	r2, [r7, #8]
90001e82:	429a      	cmp	r2, r3
90001e84:	d82e      	bhi.n	90001ee4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001e8a:	429a      	cmp	r2, r3
90001e8c:	d02a      	beq.n	90001ee4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001e8e:	4b24      	ldr	r3, [pc, #144]	@ (90001f20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001e90:	681a      	ldr	r2, [r3, #0]
90001e92:	4924      	ldr	r1, [pc, #144]	@ (90001f24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001e94:	4613      	mov	r3, r2
90001e96:	009b      	lsls	r3, r3, #2
90001e98:	4413      	add	r3, r2
90001e9a:	009b      	lsls	r3, r3, #2
90001e9c:	440b      	add	r3, r1
90001e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001ea0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001ea2:	4b1f      	ldr	r3, [pc, #124]	@ (90001f20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001ea4:	681a      	ldr	r2, [r3, #0]
90001ea6:	491f      	ldr	r1, [pc, #124]	@ (90001f24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001ea8:	4613      	mov	r3, r2
90001eaa:	009b      	lsls	r3, r3, #2
90001eac:	4413      	add	r3, r2
90001eae:	009b      	lsls	r3, r3, #2
90001eb0:	440b      	add	r3, r1
90001eb2:	3304      	adds	r3, #4
90001eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001eb6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001eb8:	4b19      	ldr	r3, [pc, #100]	@ (90001f20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001eba:	681a      	ldr	r2, [r3, #0]
90001ebc:	4919      	ldr	r1, [pc, #100]	@ (90001f24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001ebe:	4613      	mov	r3, r2
90001ec0:	009b      	lsls	r3, r3, #2
90001ec2:	4413      	add	r3, r2
90001ec4:	009b      	lsls	r3, r3, #2
90001ec6:	440b      	add	r3, r1
90001ec8:	3308      	adds	r3, #8
90001eca:	6a3a      	ldr	r2, [r7, #32]
90001ecc:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001ed0:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001ed2:	4b13      	ldr	r3, [pc, #76]	@ (90001f20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001ed4:	681b      	ldr	r3, [r3, #0]
90001ed6:	3301      	adds	r3, #1
90001ed8:	4a11      	ldr	r2, [pc, #68]	@ (90001f20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001eda:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001edc:	4b10      	ldr	r3, [pc, #64]	@ (90001f20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001ede:	681b      	ldr	r3, [r3, #0]
90001ee0:	2b7f      	cmp	r3, #127	@ 0x7f
90001ee2:	d812      	bhi.n	90001f0a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001ee4:	6a3b      	ldr	r3, [r7, #32]
90001ee6:	3301      	adds	r3, #1
90001ee8:	623b      	str	r3, [r7, #32]
90001eea:	6a3b      	ldr	r3, [r7, #32]
90001eec:	2b0f      	cmp	r3, #15
90001eee:	d9b9      	bls.n	90001e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001ef2:	3301      	adds	r3, #1
90001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
90001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001ef8:	2b0f      	cmp	r3, #15
90001efa:	d9a2      	bls.n	90001e42 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001efe:	3301      	adds	r3, #1
90001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
90001f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001f04:	2b0f      	cmp	r3, #15
90001f06:	d999      	bls.n	90001e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001f08:	e000      	b.n	90001f0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001f0a:	bf00      	nop
          }
        }
      }
    }
  }
}
90001f0c:	373c      	adds	r7, #60	@ 0x3c
90001f0e:	46bd      	mov	sp, r7
90001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f14:	4770      	bx	lr
90001f16:	bf00      	nop
90001f18:	3b9aca00 	.word	0x3b9aca00
90001f1c:	9000e4d0 	.word	0x9000e4d0
90001f20:	20001090 	.word	0x20001090
90001f24:	20000690 	.word	0x20000690

90001f28 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001f28:	b480      	push	{r7}
90001f2a:	b093      	sub	sp, #76	@ 0x4c
90001f2c:	af00      	add	r7, sp, #0
90001f2e:	6078      	str	r0, [r7, #4]
90001f30:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001f32:	f04f 33ff 	mov.w	r3, #4294967295
90001f36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001f38:	687b      	ldr	r3, [r7, #4]
90001f3a:	085a      	lsrs	r2, r3, #1
90001f3c:	4b7a      	ldr	r3, [pc, #488]	@ (90002128 <I2C_Compute_SCLL_SCLH+0x200>)
90001f3e:	4413      	add	r3, r2
90001f40:	687a      	ldr	r2, [r7, #4]
90001f42:	fbb3 f3f2 	udiv	r3, r3, r2
90001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001f48:	4a78      	ldr	r2, [pc, #480]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90001f4a:	683b      	ldr	r3, [r7, #0]
90001f4c:	212c      	movs	r1, #44	@ 0x2c
90001f4e:	fb01 f303 	mul.w	r3, r1, r3
90001f52:	4413      	add	r3, r2
90001f54:	681b      	ldr	r3, [r3, #0]
90001f56:	085a      	lsrs	r2, r3, #1
90001f58:	4b73      	ldr	r3, [pc, #460]	@ (90002128 <I2C_Compute_SCLL_SCLH+0x200>)
90001f5a:	4413      	add	r3, r2
90001f5c:	4973      	ldr	r1, [pc, #460]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90001f5e:	683a      	ldr	r2, [r7, #0]
90001f60:	202c      	movs	r0, #44	@ 0x2c
90001f62:	fb00 f202 	mul.w	r2, r0, r2
90001f66:	440a      	add	r2, r1
90001f68:	6812      	ldr	r2, [r2, #0]
90001f6a:	fbb3 f3f2 	udiv	r3, r3, r2
90001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001f70:	2332      	movs	r3, #50	@ 0x32
90001f72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001f74:	4a6d      	ldr	r2, [pc, #436]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90001f76:	683b      	ldr	r3, [r7, #0]
90001f78:	212c      	movs	r1, #44	@ 0x2c
90001f7a:	fb01 f303 	mul.w	r3, r1, r3
90001f7e:	4413      	add	r3, r2
90001f80:	3328      	adds	r3, #40	@ 0x28
90001f82:	681a      	ldr	r2, [r3, #0]
90001f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001f86:	fb02 f303 	mul.w	r3, r2, r3
90001f8a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001f8c:	4a67      	ldr	r2, [pc, #412]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90001f8e:	683b      	ldr	r3, [r7, #0]
90001f90:	212c      	movs	r1, #44	@ 0x2c
90001f92:	fb01 f303 	mul.w	r3, r1, r3
90001f96:	4413      	add	r3, r2
90001f98:	3304      	adds	r3, #4
90001f9a:	681b      	ldr	r3, [r3, #0]
90001f9c:	4a62      	ldr	r2, [pc, #392]	@ (90002128 <I2C_Compute_SCLL_SCLH+0x200>)
90001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
90001fa2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001fa4:	4a61      	ldr	r2, [pc, #388]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90001fa6:	683b      	ldr	r3, [r7, #0]
90001fa8:	212c      	movs	r1, #44	@ 0x2c
90001faa:	fb01 f303 	mul.w	r3, r1, r3
90001fae:	4413      	add	r3, r2
90001fb0:	3308      	adds	r3, #8
90001fb2:	681b      	ldr	r3, [r3, #0]
90001fb4:	4a5c      	ldr	r2, [pc, #368]	@ (90002128 <I2C_Compute_SCLL_SCLH+0x200>)
90001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
90001fba:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001fbe:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001fc0:	2300      	movs	r3, #0
90001fc2:	637b      	str	r3, [r7, #52]	@ 0x34
90001fc4:	e0a3      	b.n	9000210e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001fc6:	495a      	ldr	r1, [pc, #360]	@ (90002130 <I2C_Compute_SCLL_SCLH+0x208>)
90001fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001fca:	4613      	mov	r3, r2
90001fcc:	009b      	lsls	r3, r3, #2
90001fce:	4413      	add	r3, r2
90001fd0:	009b      	lsls	r3, r3, #2
90001fd2:	440b      	add	r3, r1
90001fd4:	681b      	ldr	r3, [r3, #0]
90001fd6:	1c5a      	adds	r2, r3, #1
90001fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001fda:	fb02 f303 	mul.w	r3, r2, r3
90001fde:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001fe0:	2300      	movs	r3, #0
90001fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001fe4:	e08c      	b.n	90002100 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001fe8:	6a3b      	ldr	r3, [r7, #32]
90001fea:	441a      	add	r2, r3
90001fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001fee:	3301      	adds	r3, #1
90001ff0:	6979      	ldr	r1, [r7, #20]
90001ff2:	fb03 f101 	mul.w	r1, r3, r1
90001ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001ff8:	005b      	lsls	r3, r3, #1
90001ffa:	440b      	add	r3, r1
90001ffc:	4413      	add	r3, r2
90001ffe:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90002000:	4a4a      	ldr	r2, [pc, #296]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90002002:	683b      	ldr	r3, [r7, #0]
90002004:	212c      	movs	r1, #44	@ 0x2c
90002006:	fb01 f303 	mul.w	r3, r1, r3
9000200a:	4413      	add	r3, r2
9000200c:	3318      	adds	r3, #24
9000200e:	681b      	ldr	r3, [r3, #0]
90002010:	693a      	ldr	r2, [r7, #16]
90002012:	429a      	cmp	r2, r3
90002014:	d971      	bls.n	900020fa <I2C_Compute_SCLL_SCLH+0x1d2>
90002016:	693a      	ldr	r2, [r7, #16]
90002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000201a:	1ad2      	subs	r2, r2, r3
9000201c:	6a3b      	ldr	r3, [r7, #32]
9000201e:	1ad3      	subs	r3, r2, r3
90002020:	089b      	lsrs	r3, r3, #2
90002022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002024:	429a      	cmp	r2, r3
90002026:	d268      	bcs.n	900020fa <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90002028:	2300      	movs	r3, #0
9000202a:	63bb      	str	r3, [r7, #56]	@ 0x38
9000202c:	e062      	b.n	900020f4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
9000202e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90002030:	6a3b      	ldr	r3, [r7, #32]
90002032:	441a      	add	r2, r3
90002034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90002036:	3301      	adds	r3, #1
90002038:	6979      	ldr	r1, [r7, #20]
9000203a:	fb03 f101 	mul.w	r1, r3, r1
9000203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002040:	005b      	lsls	r3, r3, #1
90002042:	440b      	add	r3, r1
90002044:	4413      	add	r3, r2
90002046:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90002048:	693a      	ldr	r2, [r7, #16]
9000204a:	68fb      	ldr	r3, [r7, #12]
9000204c:	441a      	add	r2, r3
9000204e:	4937      	ldr	r1, [pc, #220]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90002050:	683b      	ldr	r3, [r7, #0]
90002052:	202c      	movs	r0, #44	@ 0x2c
90002054:	fb00 f303 	mul.w	r3, r0, r3
90002058:	440b      	add	r3, r1
9000205a:	3320      	adds	r3, #32
9000205c:	681b      	ldr	r3, [r3, #0]
9000205e:	441a      	add	r2, r3
90002060:	4932      	ldr	r1, [pc, #200]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90002062:	683b      	ldr	r3, [r7, #0]
90002064:	202c      	movs	r0, #44	@ 0x2c
90002066:	fb00 f303 	mul.w	r3, r0, r3
9000206a:	440b      	add	r3, r1
9000206c:	3324      	adds	r3, #36	@ 0x24
9000206e:	681b      	ldr	r3, [r3, #0]
90002070:	4413      	add	r3, r2
90002072:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90002074:	68ba      	ldr	r2, [r7, #8]
90002076:	69bb      	ldr	r3, [r7, #24]
90002078:	429a      	cmp	r2, r3
9000207a:	d338      	bcc.n	900020ee <I2C_Compute_SCLL_SCLH+0x1c6>
9000207c:	68ba      	ldr	r2, [r7, #8]
9000207e:	69fb      	ldr	r3, [r7, #28]
90002080:	429a      	cmp	r2, r3
90002082:	d834      	bhi.n	900020ee <I2C_Compute_SCLL_SCLH+0x1c6>
90002084:	4a29      	ldr	r2, [pc, #164]	@ (9000212c <I2C_Compute_SCLL_SCLH+0x204>)
90002086:	683b      	ldr	r3, [r7, #0]
90002088:	212c      	movs	r1, #44	@ 0x2c
9000208a:	fb01 f303 	mul.w	r3, r1, r3
9000208e:	4413      	add	r3, r2
90002090:	331c      	adds	r3, #28
90002092:	681b      	ldr	r3, [r3, #0]
90002094:	68fa      	ldr	r2, [r7, #12]
90002096:	429a      	cmp	r2, r3
90002098:	d329      	bcc.n	900020ee <I2C_Compute_SCLL_SCLH+0x1c6>
9000209a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000209c:	68fb      	ldr	r3, [r7, #12]
9000209e:	429a      	cmp	r2, r3
900020a0:	d225      	bcs.n	900020ee <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
900020a2:	68ba      	ldr	r2, [r7, #8]
900020a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900020a6:	1ad3      	subs	r3, r2, r3
900020a8:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
900020aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900020ac:	2b00      	cmp	r3, #0
900020ae:	da02      	bge.n	900020b6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
900020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900020b2:	425b      	negs	r3, r3
900020b4:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
900020b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900020b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
900020ba:	429a      	cmp	r2, r3
900020bc:	d917      	bls.n	900020ee <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
900020be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900020c0:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
900020c2:	491b      	ldr	r1, [pc, #108]	@ (90002130 <I2C_Compute_SCLL_SCLH+0x208>)
900020c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900020c6:	4613      	mov	r3, r2
900020c8:	009b      	lsls	r3, r3, #2
900020ca:	4413      	add	r3, r2
900020cc:	009b      	lsls	r3, r3, #2
900020ce:	440b      	add	r3, r1
900020d0:	3310      	adds	r3, #16
900020d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
900020d4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
900020d6:	4916      	ldr	r1, [pc, #88]	@ (90002130 <I2C_Compute_SCLL_SCLH+0x208>)
900020d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
900020da:	4613      	mov	r3, r2
900020dc:	009b      	lsls	r3, r3, #2
900020de:	4413      	add	r3, r2
900020e0:	009b      	lsls	r3, r3, #2
900020e2:	440b      	add	r3, r1
900020e4:	330c      	adds	r3, #12
900020e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
900020e8:	601a      	str	r2, [r3, #0]
              ret = count;
900020ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
900020ec:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900020ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900020f0:	3301      	adds	r3, #1
900020f2:	63bb      	str	r3, [r7, #56]	@ 0x38
900020f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900020f6:	2bff      	cmp	r3, #255	@ 0xff
900020f8:	d999      	bls.n	9000202e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900020fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
900020fc:	3301      	adds	r3, #1
900020fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
90002100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90002102:	2bff      	cmp	r3, #255	@ 0xff
90002104:	f67f af6f 	bls.w	90001fe6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90002108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000210a:	3301      	adds	r3, #1
9000210c:	637b      	str	r3, [r7, #52]	@ 0x34
9000210e:	4b09      	ldr	r3, [pc, #36]	@ (90002134 <I2C_Compute_SCLL_SCLH+0x20c>)
90002110:	681b      	ldr	r3, [r3, #0]
90002112:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90002114:	429a      	cmp	r2, r3
90002116:	f4ff af56 	bcc.w	90001fc6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
9000211a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
9000211c:	4618      	mov	r0, r3
9000211e:	374c      	adds	r7, #76	@ 0x4c
90002120:	46bd      	mov	sp, r7
90002122:	f85d 7b04 	ldr.w	r7, [sp], #4
90002126:	4770      	bx	lr
90002128:	3b9aca00 	.word	0x3b9aca00
9000212c:	9000e4d0 	.word	0x9000e4d0
90002130:	20000690 	.word	0x20000690
90002134:	20001090 	.word	0x20001090

90002138 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90002138:	b580      	push	{r7, lr}
9000213a:	b08a      	sub	sp, #40	@ 0x28
9000213c:	af00      	add	r7, sp, #0
9000213e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90002140:	4b31      	ldr	r3, [pc, #196]	@ (90002208 <I2C4_MspInit+0xd0>)
90002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002146:	4a30      	ldr	r2, [pc, #192]	@ (90002208 <I2C4_MspInit+0xd0>)
90002148:	f043 0308 	orr.w	r3, r3, #8
9000214c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002150:	4b2d      	ldr	r3, [pc, #180]	@ (90002208 <I2C4_MspInit+0xd0>)
90002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002156:	f003 0308 	and.w	r3, r3, #8
9000215a:	613b      	str	r3, [r7, #16]
9000215c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000215e:	4b2a      	ldr	r3, [pc, #168]	@ (90002208 <I2C4_MspInit+0xd0>)
90002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002164:	4a28      	ldr	r2, [pc, #160]	@ (90002208 <I2C4_MspInit+0xd0>)
90002166:	f043 0308 	orr.w	r3, r3, #8
9000216a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000216e:	4b26      	ldr	r3, [pc, #152]	@ (90002208 <I2C4_MspInit+0xd0>)
90002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002174:	f003 0308 	and.w	r3, r3, #8
90002178:	60fb      	str	r3, [r7, #12]
9000217a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000217c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90002180:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90002182:	2312      	movs	r3, #18
90002184:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90002186:	2300      	movs	r3, #0
90002188:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000218a:	2302      	movs	r3, #2
9000218c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
9000218e:	2304      	movs	r3, #4
90002190:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90002192:	f107 0314 	add.w	r3, r7, #20
90002196:	4619      	mov	r1, r3
90002198:	481c      	ldr	r0, [pc, #112]	@ (9000220c <I2C4_MspInit+0xd4>)
9000219a:	f001 fe71 	bl	90003e80 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
9000219e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
900021a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
900021a4:	2312      	movs	r3, #18
900021a6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
900021a8:	2300      	movs	r3, #0
900021aa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900021ac:	2302      	movs	r3, #2
900021ae:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
900021b0:	2304      	movs	r3, #4
900021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900021b4:	f107 0314 	add.w	r3, r7, #20
900021b8:	4619      	mov	r1, r3
900021ba:	4814      	ldr	r0, [pc, #80]	@ (9000220c <I2C4_MspInit+0xd4>)
900021bc:	f001 fe60 	bl	90003e80 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
900021c0:	4b11      	ldr	r3, [pc, #68]	@ (90002208 <I2C4_MspInit+0xd0>)
900021c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900021c6:	4a10      	ldr	r2, [pc, #64]	@ (90002208 <I2C4_MspInit+0xd0>)
900021c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900021cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
900021d0:	4b0d      	ldr	r3, [pc, #52]	@ (90002208 <I2C4_MspInit+0xd0>)
900021d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
900021d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900021da:	60bb      	str	r3, [r7, #8]
900021dc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
900021de:	4b0a      	ldr	r3, [pc, #40]	@ (90002208 <I2C4_MspInit+0xd0>)
900021e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
900021e4:	4a08      	ldr	r2, [pc, #32]	@ (90002208 <I2C4_MspInit+0xd0>)
900021e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900021ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
900021ee:	4b06      	ldr	r3, [pc, #24]	@ (90002208 <I2C4_MspInit+0xd0>)
900021f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
900021f4:	4a04      	ldr	r2, [pc, #16]	@ (90002208 <I2C4_MspInit+0xd0>)
900021f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
900021fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
900021fe:	bf00      	nop
90002200:	3728      	adds	r7, #40	@ 0x28
90002202:	46bd      	mov	sp, r7
90002204:	bd80      	pop	{r7, pc}
90002206:	bf00      	nop
90002208:	58024400 	.word	0x58024400
9000220c:	58020c00 	.word	0x58020c00

90002210 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90002210:	b580      	push	{r7, lr}
90002212:	b088      	sub	sp, #32
90002214:	af04      	add	r7, sp, #16
90002216:	607b      	str	r3, [r7, #4]
90002218:	4603      	mov	r3, r0
9000221a:	81fb      	strh	r3, [r7, #14]
9000221c:	460b      	mov	r3, r1
9000221e:	81bb      	strh	r3, [r7, #12]
90002220:	4613      	mov	r3, r2
90002222:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90002224:	8978      	ldrh	r0, [r7, #10]
90002226:	89ba      	ldrh	r2, [r7, #12]
90002228:	89f9      	ldrh	r1, [r7, #14]
9000222a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000222e:	9302      	str	r3, [sp, #8]
90002230:	8b3b      	ldrh	r3, [r7, #24]
90002232:	9301      	str	r3, [sp, #4]
90002234:	687b      	ldr	r3, [r7, #4]
90002236:	9300      	str	r3, [sp, #0]
90002238:	4603      	mov	r3, r0
9000223a:	4807      	ldr	r0, [pc, #28]	@ (90002258 <I2C4_ReadReg+0x48>)
9000223c:	f003 fe4e 	bl	90005edc <HAL_I2C_Mem_Read>
90002240:	4603      	mov	r3, r0
90002242:	2b00      	cmp	r3, #0
90002244:	d101      	bne.n	9000224a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90002246:	2300      	movs	r3, #0
90002248:	e001      	b.n	9000224e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
9000224a:	f06f 0307 	mvn.w	r3, #7
}
9000224e:	4618      	mov	r0, r3
90002250:	3710      	adds	r7, #16
90002252:	46bd      	mov	sp, r7
90002254:	bd80      	pop	{r7, pc}
90002256:	bf00      	nop
90002258:	20001094 	.word	0x20001094

9000225c <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
9000225c:	b580      	push	{r7, lr}
9000225e:	b084      	sub	sp, #16
90002260:	af02      	add	r7, sp, #8
90002262:	6078      	str	r0, [r7, #4]
90002264:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90002266:	f44f 7388 	mov.w	r3, #272	@ 0x110
9000226a:	9300      	str	r3, [sp, #0]
9000226c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90002270:	2200      	movs	r2, #0
90002272:	6839      	ldr	r1, [r7, #0]
90002274:	6878      	ldr	r0, [r7, #4]
90002276:	f000 f805 	bl	90002284 <BSP_LCD_InitEx>
9000227a:	4603      	mov	r3, r0
}
9000227c:	4618      	mov	r0, r3
9000227e:	3708      	adds	r7, #8
90002280:	46bd      	mov	sp, r7
90002282:	bd80      	pop	{r7, pc}

90002284 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90002284:	b580      	push	{r7, lr}
90002286:	b09e      	sub	sp, #120	@ 0x78
90002288:	af00      	add	r7, sp, #0
9000228a:	60f8      	str	r0, [r7, #12]
9000228c:	60b9      	str	r1, [r7, #8]
9000228e:	607a      	str	r2, [r7, #4]
90002290:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002292:	2300      	movs	r3, #0
90002294:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90002296:	2300      	movs	r3, #0
90002298:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
9000229a:	68bb      	ldr	r3, [r7, #8]
9000229c:	2b01      	cmp	r3, #1
9000229e:	d808      	bhi.n	900022b2 <BSP_LCD_InitEx+0x2e>
900022a0:	68fb      	ldr	r3, [r7, #12]
900022a2:	2b00      	cmp	r3, #0
900022a4:	d105      	bne.n	900022b2 <BSP_LCD_InitEx+0x2e>
900022a6:	687b      	ldr	r3, [r7, #4]
900022a8:	2b02      	cmp	r3, #2
900022aa:	d006      	beq.n	900022ba <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
900022ac:	687b      	ldr	r3, [r7, #4]
900022ae:	2b00      	cmp	r3, #0
900022b0:	d003      	beq.n	900022ba <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900022b2:	f06f 0301 	mvn.w	r3, #1
900022b6:	677b      	str	r3, [r7, #116]	@ 0x74
900022b8:	e0a8      	b.n	9000240c <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
900022ba:	687b      	ldr	r3, [r7, #4]
900022bc:	2b02      	cmp	r3, #2
900022be:	d109      	bne.n	900022d4 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
900022c0:	2302      	movs	r3, #2
900022c2:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
900022c4:	4a54      	ldr	r2, [pc, #336]	@ (90002418 <BSP_LCD_InitEx+0x194>)
900022c6:	68fb      	ldr	r3, [r7, #12]
900022c8:	015b      	lsls	r3, r3, #5
900022ca:	4413      	add	r3, r2
900022cc:	3310      	adds	r3, #16
900022ce:	2202      	movs	r2, #2
900022d0:	601a      	str	r2, [r3, #0]
900022d2:	e008      	b.n	900022e6 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
900022d4:	2300      	movs	r3, #0
900022d6:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
900022d8:	4a4f      	ldr	r2, [pc, #316]	@ (90002418 <BSP_LCD_InitEx+0x194>)
900022da:	68fb      	ldr	r3, [r7, #12]
900022dc:	015b      	lsls	r3, r3, #5
900022de:	4413      	add	r3, r2
900022e0:	3310      	adds	r3, #16
900022e2:	2204      	movs	r2, #4
900022e4:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
900022e6:	4a4c      	ldr	r2, [pc, #304]	@ (90002418 <BSP_LCD_InitEx+0x194>)
900022e8:	68fb      	ldr	r3, [r7, #12]
900022ea:	015b      	lsls	r3, r3, #5
900022ec:	4413      	add	r3, r2
900022ee:	330c      	adds	r3, #12
900022f0:	687a      	ldr	r2, [r7, #4]
900022f2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
900022f4:	4a48      	ldr	r2, [pc, #288]	@ (90002418 <BSP_LCD_InitEx+0x194>)
900022f6:	68fb      	ldr	r3, [r7, #12]
900022f8:	015b      	lsls	r3, r3, #5
900022fa:	4413      	add	r3, r2
900022fc:	683a      	ldr	r2, [r7, #0]
900022fe:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90002300:	4a45      	ldr	r2, [pc, #276]	@ (90002418 <BSP_LCD_InitEx+0x194>)
90002302:	68fb      	ldr	r3, [r7, #12]
90002304:	015b      	lsls	r3, r3, #5
90002306:	4413      	add	r3, r2
90002308:	3304      	adds	r3, #4
9000230a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
9000230e:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90002310:	4b42      	ldr	r3, [pc, #264]	@ (9000241c <BSP_LCD_InitEx+0x198>)
90002312:	4a43      	ldr	r2, [pc, #268]	@ (90002420 <BSP_LCD_InitEx+0x19c>)
90002314:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90002316:	4b43      	ldr	r3, [pc, #268]	@ (90002424 <BSP_LCD_InitEx+0x1a0>)
90002318:	4a43      	ldr	r2, [pc, #268]	@ (90002428 <BSP_LCD_InitEx+0x1a4>)
9000231a:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
9000231c:	483f      	ldr	r0, [pc, #252]	@ (9000241c <BSP_LCD_InitEx+0x198>)
9000231e:	f000 fcf9 	bl	90002d14 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90002322:	4840      	ldr	r0, [pc, #256]	@ (90002424 <BSP_LCD_InitEx+0x1a0>)
90002324:	f000 fdc2 	bl	90002eac <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90002328:	4b40      	ldr	r3, [pc, #256]	@ (9000242c <BSP_LCD_InitEx+0x1a8>)
9000232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
9000232c:	4b40      	ldr	r3, [pc, #256]	@ (90002430 <BSP_LCD_InitEx+0x1ac>)
9000232e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90002330:	2370      	movs	r3, #112	@ 0x70
90002332:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90002334:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90002338:	f107 0344 	add.w	r3, r7, #68	@ 0x44
9000233c:	4611      	mov	r1, r2
9000233e:	4618      	mov	r0, r3
90002340:	f7ff fa16 	bl	90001770 <FT5336_RegisterBusIO>
90002344:	4603      	mov	r3, r0
90002346:	2b00      	cmp	r3, #0
90002348:	da03      	bge.n	90002352 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000234a:	f06f 0304 	mvn.w	r3, #4
9000234e:	677b      	str	r3, [r7, #116]	@ 0x74
90002350:	e02b      	b.n	900023aa <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90002352:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90002356:	f107 0344 	add.w	r3, r7, #68	@ 0x44
9000235a:	4611      	mov	r1, r2
9000235c:	4618      	mov	r0, r3
9000235e:	f7ff fa49 	bl	900017f4 <FT5336_ReadID>
90002362:	4603      	mov	r3, r0
90002364:	2b00      	cmp	r3, #0
90002366:	da03      	bge.n	90002370 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002368:	f06f 0304 	mvn.w	r3, #4
9000236c:	677b      	str	r3, [r7, #116]	@ 0x74
9000236e:	e01c      	b.n	900023aa <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90002370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90002372:	2b51      	cmp	r3, #81	@ 0x51
90002374:	d003      	beq.n	9000237e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90002376:	f06f 0306 	mvn.w	r3, #6
9000237a:	677b      	str	r3, [r7, #116]	@ 0x74
9000237c:	e015      	b.n	900023aa <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
9000237e:	4827      	ldr	r0, [pc, #156]	@ (9000241c <BSP_LCD_InitEx+0x198>)
90002380:	f7fe fea6 	bl	900010d0 <MX_LTDC_ClockConfig>
90002384:	4603      	mov	r3, r0
90002386:	2b00      	cmp	r3, #0
90002388:	d003      	beq.n	90002392 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
9000238a:	f06f 0303 	mvn.w	r3, #3
9000238e:	677b      	str	r3, [r7, #116]	@ 0x74
90002390:	e00b      	b.n	900023aa <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90002392:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90002396:	6839      	ldr	r1, [r7, #0]
90002398:	4820      	ldr	r0, [pc, #128]	@ (9000241c <BSP_LCD_InitEx+0x198>)
9000239a:	f000 f84d 	bl	90002438 <MX_LTDC_Init>
9000239e:	4603      	mov	r3, r0
900023a0:	2b00      	cmp	r3, #0
900023a2:	d002      	beq.n	900023aa <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
900023a4:	f06f 0303 	mvn.w	r3, #3
900023a8:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
900023aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
900023ac:	2b00      	cmp	r3, #0
900023ae:	d12d      	bne.n	9000240c <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900023b0:	2000      	movs	r0, #0
900023b2:	f000 fe0d 	bl	90002fd0 <BSP_SDRAM_Init>
900023b6:	4603      	mov	r3, r0
900023b8:	2b00      	cmp	r3, #0
900023ba:	d002      	beq.n	900023c2 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
900023bc:	f06f 0303 	mvn.w	r3, #3
900023c0:	e025      	b.n	9000240e <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
900023c2:	2300      	movs	r3, #0
900023c4:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
900023c6:	683b      	ldr	r3, [r7, #0]
900023c8:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
900023ca:	2300      	movs	r3, #0
900023cc:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
900023ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
900023d2:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
900023d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
900023d6:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
900023d8:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
900023de:	f107 0314 	add.w	r3, r7, #20
900023e2:	461a      	mov	r2, r3
900023e4:	2100      	movs	r1, #0
900023e6:	480d      	ldr	r0, [pc, #52]	@ (9000241c <BSP_LCD_InitEx+0x198>)
900023e8:	f000 f872 	bl	900024d0 <MX_LTDC_ConfigLayer>
900023ec:	4603      	mov	r3, r0
900023ee:	2b00      	cmp	r3, #0
900023f0:	d002      	beq.n	900023f8 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
900023f2:	f06f 0303 	mvn.w	r3, #3
900023f6:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
900023f8:	480e      	ldr	r0, [pc, #56]	@ (90002434 <BSP_LCD_InitEx+0x1b0>)
900023fa:	f000 fdbf 	bl	90002f7c <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
900023fe:	4a06      	ldr	r2, [pc, #24]	@ (90002418 <BSP_LCD_InitEx+0x194>)
90002400:	68fb      	ldr	r3, [r7, #12]
90002402:	015b      	lsls	r3, r3, #5
90002404:	4413      	add	r3, r2
90002406:	3318      	adds	r3, #24
90002408:	2201      	movs	r2, #1
9000240a:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
9000240c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
9000240e:	4618      	mov	r0, r3
90002410:	3778      	adds	r7, #120	@ 0x78
90002412:	46bd      	mov	sp, r7
90002414:	bd80      	pop	{r7, pc}
90002416:	bf00      	nop
90002418:	20001244 	.word	0x20001244
9000241c:	2000119c 	.word	0x2000119c
90002420:	50001000 	.word	0x50001000
90002424:	20001134 	.word	0x20001134
90002428:	52001000 	.word	0x52001000
9000242c:	90001af9 	.word	0x90001af9
90002430:	90001bf1 	.word	0x90001bf1
90002434:	200010e8 	.word	0x200010e8

90002438 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90002438:	b580      	push	{r7, lr}
9000243a:	b084      	sub	sp, #16
9000243c:	af00      	add	r7, sp, #0
9000243e:	60f8      	str	r0, [r7, #12]
90002440:	60b9      	str	r1, [r7, #8]
90002442:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90002444:	68fb      	ldr	r3, [r7, #12]
90002446:	4a21      	ldr	r2, [pc, #132]	@ (900024cc <MX_LTDC_Init+0x94>)
90002448:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
9000244a:	68fb      	ldr	r3, [r7, #12]
9000244c:	2200      	movs	r2, #0
9000244e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90002450:	68fb      	ldr	r3, [r7, #12]
90002452:	2200      	movs	r2, #0
90002454:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90002456:	68fb      	ldr	r3, [r7, #12]
90002458:	2200      	movs	r2, #0
9000245a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000245c:	68fb      	ldr	r3, [r7, #12]
9000245e:	2200      	movs	r2, #0
90002460:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90002462:	68fb      	ldr	r3, [r7, #12]
90002464:	2228      	movs	r2, #40	@ 0x28
90002466:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90002468:	68fb      	ldr	r3, [r7, #12]
9000246a:	222a      	movs	r2, #42	@ 0x2a
9000246c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
9000246e:	68bb      	ldr	r3, [r7, #8]
90002470:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002474:	68fb      	ldr	r3, [r7, #12]
90002476:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90002478:	68bb      	ldr	r3, [r7, #8]
9000247a:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
9000247e:	68fb      	ldr	r3, [r7, #12]
90002480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90002482:	68fb      	ldr	r3, [r7, #12]
90002484:	2209      	movs	r2, #9
90002486:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90002488:	68fb      	ldr	r3, [r7, #12]
9000248a:	220b      	movs	r2, #11
9000248c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
9000248e:	687b      	ldr	r3, [r7, #4]
90002490:	f103 020b 	add.w	r2, r3, #11
90002494:	68fb      	ldr	r3, [r7, #12]
90002496:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90002498:	687b      	ldr	r3, [r7, #4]
9000249a:	f103 020d 	add.w	r2, r3, #13
9000249e:	68fb      	ldr	r3, [r7, #12]
900024a0:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
900024a2:	68fb      	ldr	r3, [r7, #12]
900024a4:	22ff      	movs	r2, #255	@ 0xff
900024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
900024aa:	68fb      	ldr	r3, [r7, #12]
900024ac:	22ff      	movs	r2, #255	@ 0xff
900024ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
900024b2:	68fb      	ldr	r3, [r7, #12]
900024b4:	22ff      	movs	r2, #255	@ 0xff
900024b6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
900024ba:	68f8      	ldr	r0, [r7, #12]
900024bc:	f004 f947 	bl	9000674e <HAL_LTDC_Init>
900024c0:	4603      	mov	r3, r0
}
900024c2:	4618      	mov	r0, r3
900024c4:	3710      	adds	r7, #16
900024c6:	46bd      	mov	sp, r7
900024c8:	bd80      	pop	{r7, pc}
900024ca:	bf00      	nop
900024cc:	50001000 	.word	0x50001000

900024d0 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
900024d0:	b580      	push	{r7, lr}
900024d2:	b092      	sub	sp, #72	@ 0x48
900024d4:	af00      	add	r7, sp, #0
900024d6:	60f8      	str	r0, [r7, #12]
900024d8:	60b9      	str	r1, [r7, #8]
900024da:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
900024dc:	687b      	ldr	r3, [r7, #4]
900024de:	681b      	ldr	r3, [r3, #0]
900024e0:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
900024e2:	687b      	ldr	r3, [r7, #4]
900024e4:	685b      	ldr	r3, [r3, #4]
900024e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
900024e8:	687b      	ldr	r3, [r7, #4]
900024ea:	689b      	ldr	r3, [r3, #8]
900024ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
900024ee:	687b      	ldr	r3, [r7, #4]
900024f0:	68db      	ldr	r3, [r3, #12]
900024f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
900024f4:	687b      	ldr	r3, [r7, #4]
900024f6:	691b      	ldr	r3, [r3, #16]
900024f8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
900024fa:	23ff      	movs	r3, #255	@ 0xff
900024fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
900024fe:	2300      	movs	r3, #0
90002500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90002502:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
90002506:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90002508:	2307      	movs	r3, #7
9000250a:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
9000250c:	687b      	ldr	r3, [r7, #4]
9000250e:	695b      	ldr	r3, [r3, #20]
90002510:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90002512:	687b      	ldr	r3, [r7, #4]
90002514:	685a      	ldr	r2, [r3, #4]
90002516:	687b      	ldr	r3, [r7, #4]
90002518:	681b      	ldr	r3, [r3, #0]
9000251a:	1ad3      	subs	r3, r2, r3
9000251c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
9000251e:	687b      	ldr	r3, [r7, #4]
90002520:	68da      	ldr	r2, [r3, #12]
90002522:	687b      	ldr	r3, [r7, #4]
90002524:	689b      	ldr	r3, [r3, #8]
90002526:	1ad3      	subs	r3, r2, r3
90002528:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
9000252a:	2300      	movs	r3, #0
9000252c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90002530:	2300      	movs	r3, #0
90002532:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
90002536:	2300      	movs	r3, #0
90002538:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
9000253c:	f107 0314 	add.w	r3, r7, #20
90002540:	68ba      	ldr	r2, [r7, #8]
90002542:	4619      	mov	r1, r3
90002544:	68f8      	ldr	r0, [r7, #12]
90002546:	f004 f9a9 	bl	9000689c <HAL_LTDC_ConfigLayer>
9000254a:	4603      	mov	r3, r0
}
9000254c:	4618      	mov	r0, r3
9000254e:	3748      	adds	r7, #72	@ 0x48
90002550:	46bd      	mov	sp, r7
90002552:	bd80      	pop	{r7, pc}

90002554 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90002554:	b480      	push	{r7}
90002556:	b085      	sub	sp, #20
90002558:	af00      	add	r7, sp, #0
9000255a:	6078      	str	r0, [r7, #4]
9000255c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000255e:	2300      	movs	r3, #0
90002560:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002562:	687b      	ldr	r3, [r7, #4]
90002564:	2b00      	cmp	r3, #0
90002566:	d003      	beq.n	90002570 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002568:	f06f 0301 	mvn.w	r3, #1
9000256c:	60fb      	str	r3, [r7, #12]
9000256e:	e007      	b.n	90002580 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002570:	4a07      	ldr	r2, [pc, #28]	@ (90002590 <BSP_LCD_GetPixelFormat+0x3c>)
90002572:	687b      	ldr	r3, [r7, #4]
90002574:	015b      	lsls	r3, r3, #5
90002576:	4413      	add	r3, r2
90002578:	330c      	adds	r3, #12
9000257a:	681a      	ldr	r2, [r3, #0]
9000257c:	683b      	ldr	r3, [r7, #0]
9000257e:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002580:	68fb      	ldr	r3, [r7, #12]
}
90002582:	4618      	mov	r0, r3
90002584:	3714      	adds	r7, #20
90002586:	46bd      	mov	sp, r7
90002588:	f85d 7b04 	ldr.w	r7, [sp], #4
9000258c:	4770      	bx	lr
9000258e:	bf00      	nop
90002590:	20001244 	.word	0x20001244

90002594 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002594:	b480      	push	{r7}
90002596:	b085      	sub	sp, #20
90002598:	af00      	add	r7, sp, #0
9000259a:	6078      	str	r0, [r7, #4]
9000259c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000259e:	2300      	movs	r3, #0
900025a0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900025a2:	687b      	ldr	r3, [r7, #4]
900025a4:	2b00      	cmp	r3, #0
900025a6:	d003      	beq.n	900025b0 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900025a8:	f06f 0301 	mvn.w	r3, #1
900025ac:	60fb      	str	r3, [r7, #12]
900025ae:	e006      	b.n	900025be <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
900025b0:	4a06      	ldr	r2, [pc, #24]	@ (900025cc <BSP_LCD_SetActiveLayer+0x38>)
900025b2:	687b      	ldr	r3, [r7, #4]
900025b4:	015b      	lsls	r3, r3, #5
900025b6:	4413      	add	r3, r2
900025b8:	3308      	adds	r3, #8
900025ba:	683a      	ldr	r2, [r7, #0]
900025bc:	601a      	str	r2, [r3, #0]
  }

  return ret;
900025be:	68fb      	ldr	r3, [r7, #12]
}
900025c0:	4618      	mov	r0, r3
900025c2:	3714      	adds	r7, #20
900025c4:	46bd      	mov	sp, r7
900025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900025ca:	4770      	bx	lr
900025cc:	20001244 	.word	0x20001244

900025d0 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
900025d0:	b480      	push	{r7}
900025d2:	b085      	sub	sp, #20
900025d4:	af00      	add	r7, sp, #0
900025d6:	6078      	str	r0, [r7, #4]
900025d8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900025da:	2300      	movs	r3, #0
900025dc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900025de:	687b      	ldr	r3, [r7, #4]
900025e0:	2b00      	cmp	r3, #0
900025e2:	d003      	beq.n	900025ec <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900025e4:	f06f 0301 	mvn.w	r3, #1
900025e8:	60fb      	str	r3, [r7, #12]
900025ea:	e006      	b.n	900025fa <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
900025ec:	4a06      	ldr	r2, [pc, #24]	@ (90002608 <BSP_LCD_GetXSize+0x38>)
900025ee:	687b      	ldr	r3, [r7, #4]
900025f0:	015b      	lsls	r3, r3, #5
900025f2:	4413      	add	r3, r2
900025f4:	681a      	ldr	r2, [r3, #0]
900025f6:	683b      	ldr	r3, [r7, #0]
900025f8:	601a      	str	r2, [r3, #0]
  }

  return ret;
900025fa:	68fb      	ldr	r3, [r7, #12]
}
900025fc:	4618      	mov	r0, r3
900025fe:	3714      	adds	r7, #20
90002600:	46bd      	mov	sp, r7
90002602:	f85d 7b04 	ldr.w	r7, [sp], #4
90002606:	4770      	bx	lr
90002608:	20001244 	.word	0x20001244

9000260c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
9000260c:	b480      	push	{r7}
9000260e:	b085      	sub	sp, #20
90002610:	af00      	add	r7, sp, #0
90002612:	6078      	str	r0, [r7, #4]
90002614:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002616:	2300      	movs	r3, #0
90002618:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000261a:	687b      	ldr	r3, [r7, #4]
9000261c:	2b00      	cmp	r3, #0
9000261e:	d003      	beq.n	90002628 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002620:	f06f 0301 	mvn.w	r3, #1
90002624:	60fb      	str	r3, [r7, #12]
90002626:	e007      	b.n	90002638 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
90002628:	4a07      	ldr	r2, [pc, #28]	@ (90002648 <BSP_LCD_GetYSize+0x3c>)
9000262a:	687b      	ldr	r3, [r7, #4]
9000262c:	015b      	lsls	r3, r3, #5
9000262e:	4413      	add	r3, r2
90002630:	3304      	adds	r3, #4
90002632:	681a      	ldr	r2, [r3, #0]
90002634:	683b      	ldr	r3, [r7, #0]
90002636:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002638:	68fb      	ldr	r3, [r7, #12]
}
9000263a:	4618      	mov	r0, r3
9000263c:	3714      	adds	r7, #20
9000263e:	46bd      	mov	sp, r7
90002640:	f85d 7b04 	ldr.w	r7, [sp], #4
90002644:	4770      	bx	lr
90002646:	bf00      	nop
90002648:	20001244 	.word	0x20001244

9000264c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
9000264c:	b580      	push	{r7, lr}
9000264e:	b08e      	sub	sp, #56	@ 0x38
90002650:	af02      	add	r7, sp, #8
90002652:	60f8      	str	r0, [r7, #12]
90002654:	60b9      	str	r1, [r7, #8]
90002656:	607a      	str	r2, [r7, #4]
90002658:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000265a:	2300      	movs	r3, #0
9000265c:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
9000265e:	683b      	ldr	r3, [r7, #0]
90002660:	330a      	adds	r3, #10
90002662:	781b      	ldrb	r3, [r3, #0]
90002664:	461a      	mov	r2, r3
90002666:	683b      	ldr	r3, [r7, #0]
90002668:	330b      	adds	r3, #11
9000266a:	781b      	ldrb	r3, [r3, #0]
9000266c:	021b      	lsls	r3, r3, #8
9000266e:	441a      	add	r2, r3
90002670:	683b      	ldr	r3, [r7, #0]
90002672:	330c      	adds	r3, #12
90002674:	781b      	ldrb	r3, [r3, #0]
90002676:	041b      	lsls	r3, r3, #16
90002678:	441a      	add	r2, r3
9000267a:	683b      	ldr	r3, [r7, #0]
9000267c:	330d      	adds	r3, #13
9000267e:	781b      	ldrb	r3, [r3, #0]
90002680:	061b      	lsls	r3, r3, #24
90002682:	4413      	add	r3, r2
90002684:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90002686:	683b      	ldr	r3, [r7, #0]
90002688:	3312      	adds	r3, #18
9000268a:	781b      	ldrb	r3, [r3, #0]
9000268c:	461a      	mov	r2, r3
9000268e:	683b      	ldr	r3, [r7, #0]
90002690:	3313      	adds	r3, #19
90002692:	781b      	ldrb	r3, [r3, #0]
90002694:	021b      	lsls	r3, r3, #8
90002696:	441a      	add	r2, r3
90002698:	683b      	ldr	r3, [r7, #0]
9000269a:	3314      	adds	r3, #20
9000269c:	781b      	ldrb	r3, [r3, #0]
9000269e:	041b      	lsls	r3, r3, #16
900026a0:	441a      	add	r2, r3
900026a2:	683b      	ldr	r3, [r7, #0]
900026a4:	3315      	adds	r3, #21
900026a6:	781b      	ldrb	r3, [r3, #0]
900026a8:	061b      	lsls	r3, r3, #24
900026aa:	4413      	add	r3, r2
900026ac:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
900026ae:	683b      	ldr	r3, [r7, #0]
900026b0:	3316      	adds	r3, #22
900026b2:	781b      	ldrb	r3, [r3, #0]
900026b4:	461a      	mov	r2, r3
900026b6:	683b      	ldr	r3, [r7, #0]
900026b8:	3317      	adds	r3, #23
900026ba:	781b      	ldrb	r3, [r3, #0]
900026bc:	021b      	lsls	r3, r3, #8
900026be:	441a      	add	r2, r3
900026c0:	683b      	ldr	r3, [r7, #0]
900026c2:	3318      	adds	r3, #24
900026c4:	781b      	ldrb	r3, [r3, #0]
900026c6:	041b      	lsls	r3, r3, #16
900026c8:	441a      	add	r2, r3
900026ca:	683b      	ldr	r3, [r7, #0]
900026cc:	3319      	adds	r3, #25
900026ce:	781b      	ldrb	r3, [r3, #0]
900026d0:	061b      	lsls	r3, r3, #24
900026d2:	4413      	add	r3, r2
900026d4:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
900026d6:	683b      	ldr	r3, [r7, #0]
900026d8:	331c      	adds	r3, #28
900026da:	781b      	ldrb	r3, [r3, #0]
900026dc:	461a      	mov	r2, r3
900026de:	683b      	ldr	r3, [r7, #0]
900026e0:	331d      	adds	r3, #29
900026e2:	781b      	ldrb	r3, [r3, #0]
900026e4:	021b      	lsls	r3, r3, #8
900026e6:	4413      	add	r3, r2
900026e8:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
900026ea:	4a37      	ldr	r2, [pc, #220]	@ (900027c8 <BSP_LCD_DrawBitmap+0x17c>)
900026ec:	68fb      	ldr	r3, [r7, #12]
900026ee:	015b      	lsls	r3, r3, #5
900026f0:	4413      	add	r3, r2
900026f2:	3308      	adds	r3, #8
900026f4:	681b      	ldr	r3, [r3, #0]
900026f6:	4a35      	ldr	r2, [pc, #212]	@ (900027cc <BSP_LCD_DrawBitmap+0x180>)
900026f8:	2134      	movs	r1, #52	@ 0x34
900026fa:	fb01 f303 	mul.w	r3, r1, r3
900026fe:	4413      	add	r3, r2
90002700:	335c      	adds	r3, #92	@ 0x5c
90002702:	681a      	ldr	r2, [r3, #0]
90002704:	4930      	ldr	r1, [pc, #192]	@ (900027c8 <BSP_LCD_DrawBitmap+0x17c>)
90002706:	68fb      	ldr	r3, [r7, #12]
90002708:	015b      	lsls	r3, r3, #5
9000270a:	440b      	add	r3, r1
9000270c:	681b      	ldr	r3, [r3, #0]
9000270e:	6879      	ldr	r1, [r7, #4]
90002710:	fb03 f101 	mul.w	r1, r3, r1
90002714:	68bb      	ldr	r3, [r7, #8]
90002716:	440b      	add	r3, r1
90002718:	482b      	ldr	r0, [pc, #172]	@ (900027c8 <BSP_LCD_DrawBitmap+0x17c>)
9000271a:	68f9      	ldr	r1, [r7, #12]
9000271c:	0149      	lsls	r1, r1, #5
9000271e:	4401      	add	r1, r0
90002720:	3110      	adds	r1, #16
90002722:	6809      	ldr	r1, [r1, #0]
90002724:	fb01 f303 	mul.w	r3, r1, r3
90002728:	4413      	add	r3, r2
9000272a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
9000272c:	693b      	ldr	r3, [r7, #16]
9000272e:	3b20      	subs	r3, #32
90002730:	2b07      	cmp	r3, #7
90002732:	d802      	bhi.n	9000273a <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90002734:	2300      	movs	r3, #0
90002736:	627b      	str	r3, [r7, #36]	@ 0x24
90002738:	e008      	b.n	9000274c <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
9000273a:	693b      	ldr	r3, [r7, #16]
9000273c:	3b10      	subs	r3, #16
9000273e:	2b07      	cmp	r3, #7
90002740:	d802      	bhi.n	90002748 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
90002742:	2302      	movs	r3, #2
90002744:	627b      	str	r3, [r7, #36]	@ 0x24
90002746:	e001      	b.n	9000274c <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
90002748:	2301      	movs	r3, #1
9000274a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
9000274c:	697b      	ldr	r3, [r7, #20]
9000274e:	3b01      	subs	r3, #1
90002750:	69ba      	ldr	r2, [r7, #24]
90002752:	fb02 f303 	mul.w	r3, r2, r3
90002756:	693a      	ldr	r2, [r7, #16]
90002758:	08d2      	lsrs	r2, r2, #3
9000275a:	fb03 f202 	mul.w	r2, r3, r2
9000275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002760:	4413      	add	r3, r2
90002762:	683a      	ldr	r2, [r7, #0]
90002764:	4413      	add	r3, r2
90002766:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002768:	2300      	movs	r3, #0
9000276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
9000276c:	e023      	b.n	900027b6 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
9000276e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002772:	9300      	str	r3, [sp, #0]
90002774:	69bb      	ldr	r3, [r7, #24]
90002776:	6a39      	ldr	r1, [r7, #32]
90002778:	68f8      	ldr	r0, [r7, #12]
9000277a:	f000 fa77 	bl	90002c6c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000277e:	4a12      	ldr	r2, [pc, #72]	@ (900027c8 <BSP_LCD_DrawBitmap+0x17c>)
90002780:	68fb      	ldr	r3, [r7, #12]
90002782:	015b      	lsls	r3, r3, #5
90002784:	4413      	add	r3, r2
90002786:	681b      	ldr	r3, [r3, #0]
90002788:	490f      	ldr	r1, [pc, #60]	@ (900027c8 <BSP_LCD_DrawBitmap+0x17c>)
9000278a:	68fa      	ldr	r2, [r7, #12]
9000278c:	0152      	lsls	r2, r2, #5
9000278e:	440a      	add	r2, r1
90002790:	3210      	adds	r2, #16
90002792:	6812      	ldr	r2, [r2, #0]
90002794:	fb02 f303 	mul.w	r3, r2, r3
90002798:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000279a:	4413      	add	r3, r2
9000279c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
9000279e:	693b      	ldr	r3, [r7, #16]
900027a0:	08db      	lsrs	r3, r3, #3
900027a2:	69ba      	ldr	r2, [r7, #24]
900027a4:	fb02 f303 	mul.w	r3, r2, r3
900027a8:	425b      	negs	r3, r3
900027aa:	6a3a      	ldr	r2, [r7, #32]
900027ac:	4413      	add	r3, r2
900027ae:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
900027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900027b2:	3301      	adds	r3, #1
900027b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
900027b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900027b8:	697b      	ldr	r3, [r7, #20]
900027ba:	429a      	cmp	r2, r3
900027bc:	d3d7      	bcc.n	9000276e <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
900027be:	69fb      	ldr	r3, [r7, #28]
}
900027c0:	4618      	mov	r0, r3
900027c2:	3730      	adds	r7, #48	@ 0x30
900027c4:	46bd      	mov	sp, r7
900027c6:	bd80      	pop	{r7, pc}
900027c8:	20001244 	.word	0x20001244
900027cc:	2000119c 	.word	0x2000119c

900027d0 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
900027d0:	b580      	push	{r7, lr}
900027d2:	b088      	sub	sp, #32
900027d4:	af00      	add	r7, sp, #0
900027d6:	60f8      	str	r0, [r7, #12]
900027d8:	60b9      	str	r1, [r7, #8]
900027da:	607a      	str	r2, [r7, #4]
900027dc:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
900027de:	683b      	ldr	r3, [r7, #0]
900027e0:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
900027e2:	2300      	movs	r3, #0
900027e4:	61fb      	str	r3, [r7, #28]
900027e6:	e032      	b.n	9000284e <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
900027e8:	2300      	movs	r3, #0
900027ea:	617b      	str	r3, [r7, #20]
900027ec:	e028      	b.n	90002840 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
900027ee:	69bb      	ldr	r3, [r7, #24]
900027f0:	781b      	ldrb	r3, [r3, #0]
900027f2:	461a      	mov	r2, r3
900027f4:	69bb      	ldr	r3, [r7, #24]
900027f6:	3301      	adds	r3, #1
900027f8:	781b      	ldrb	r3, [r3, #0]
900027fa:	021b      	lsls	r3, r3, #8
900027fc:	431a      	orrs	r2, r3
900027fe:	69bb      	ldr	r3, [r7, #24]
90002800:	3302      	adds	r3, #2
90002802:	781b      	ldrb	r3, [r3, #0]
90002804:	041b      	lsls	r3, r3, #16
90002806:	431a      	orrs	r2, r3
90002808:	69bb      	ldr	r3, [r7, #24]
9000280a:	3303      	adds	r3, #3
9000280c:	781b      	ldrb	r3, [r3, #0]
9000280e:	061b      	lsls	r3, r3, #24
90002810:	4313      	orrs	r3, r2
90002812:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90002814:	68ba      	ldr	r2, [r7, #8]
90002816:	697b      	ldr	r3, [r7, #20]
90002818:	18d1      	adds	r1, r2, r3
9000281a:	687a      	ldr	r2, [r7, #4]
9000281c:	69fb      	ldr	r3, [r7, #28]
9000281e:	441a      	add	r2, r3
90002820:	693b      	ldr	r3, [r7, #16]
90002822:	68f8      	ldr	r0, [r7, #12]
90002824:	f000 f95e 	bl	90002ae4 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
90002828:	4a0d      	ldr	r2, [pc, #52]	@ (90002860 <BSP_LCD_FillRGBRect+0x90>)
9000282a:	68fb      	ldr	r3, [r7, #12]
9000282c:	015b      	lsls	r3, r3, #5
9000282e:	4413      	add	r3, r2
90002830:	3310      	adds	r3, #16
90002832:	681b      	ldr	r3, [r3, #0]
90002834:	69ba      	ldr	r2, [r7, #24]
90002836:	4413      	add	r3, r2
90002838:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
9000283a:	697b      	ldr	r3, [r7, #20]
9000283c:	3301      	adds	r3, #1
9000283e:	617b      	str	r3, [r7, #20]
90002840:	697a      	ldr	r2, [r7, #20]
90002842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002844:	429a      	cmp	r2, r3
90002846:	d3d2      	bcc.n	900027ee <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
90002848:	69fb      	ldr	r3, [r7, #28]
9000284a:	3301      	adds	r3, #1
9000284c:	61fb      	str	r3, [r7, #28]
9000284e:	69fa      	ldr	r2, [r7, #28]
90002850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002852:	429a      	cmp	r2, r3
90002854:	d3c8      	bcc.n	900027e8 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
90002856:	2300      	movs	r3, #0
}
90002858:	4618      	mov	r0, r3
9000285a:	3720      	adds	r7, #32
9000285c:	46bd      	mov	sp, r7
9000285e:	bd80      	pop	{r7, pc}
90002860:	20001244 	.word	0x20001244

90002864 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002864:	b580      	push	{r7, lr}
90002866:	b088      	sub	sp, #32
90002868:	af02      	add	r7, sp, #8
9000286a:	60f8      	str	r0, [r7, #12]
9000286c:	60b9      	str	r1, [r7, #8]
9000286e:	607a      	str	r2, [r7, #4]
90002870:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002872:	4a21      	ldr	r2, [pc, #132]	@ (900028f8 <BSP_LCD_DrawHLine+0x94>)
90002874:	68fb      	ldr	r3, [r7, #12]
90002876:	015b      	lsls	r3, r3, #5
90002878:	4413      	add	r3, r2
9000287a:	3308      	adds	r3, #8
9000287c:	681b      	ldr	r3, [r3, #0]
9000287e:	4a1f      	ldr	r2, [pc, #124]	@ (900028fc <BSP_LCD_DrawHLine+0x98>)
90002880:	2134      	movs	r1, #52	@ 0x34
90002882:	fb01 f303 	mul.w	r3, r1, r3
90002886:	4413      	add	r3, r2
90002888:	335c      	adds	r3, #92	@ 0x5c
9000288a:	681a      	ldr	r2, [r3, #0]
9000288c:	491a      	ldr	r1, [pc, #104]	@ (900028f8 <BSP_LCD_DrawHLine+0x94>)
9000288e:	68fb      	ldr	r3, [r7, #12]
90002890:	015b      	lsls	r3, r3, #5
90002892:	440b      	add	r3, r1
90002894:	3310      	adds	r3, #16
90002896:	681b      	ldr	r3, [r3, #0]
90002898:	4817      	ldr	r0, [pc, #92]	@ (900028f8 <BSP_LCD_DrawHLine+0x94>)
9000289a:	68f9      	ldr	r1, [r7, #12]
9000289c:	0149      	lsls	r1, r1, #5
9000289e:	4401      	add	r1, r0
900028a0:	6809      	ldr	r1, [r1, #0]
900028a2:	6878      	ldr	r0, [r7, #4]
900028a4:	fb01 f000 	mul.w	r0, r1, r0
900028a8:	68b9      	ldr	r1, [r7, #8]
900028aa:	4401      	add	r1, r0
900028ac:	fb01 f303 	mul.w	r3, r1, r3
900028b0:	4413      	add	r3, r2
900028b2:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
900028b4:	68ba      	ldr	r2, [r7, #8]
900028b6:	683b      	ldr	r3, [r7, #0]
900028b8:	441a      	add	r2, r3
900028ba:	490f      	ldr	r1, [pc, #60]	@ (900028f8 <BSP_LCD_DrawHLine+0x94>)
900028bc:	68fb      	ldr	r3, [r7, #12]
900028be:	015b      	lsls	r3, r3, #5
900028c0:	440b      	add	r3, r1
900028c2:	681b      	ldr	r3, [r3, #0]
900028c4:	429a      	cmp	r2, r3
900028c6:	d907      	bls.n	900028d8 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
900028c8:	4a0b      	ldr	r2, [pc, #44]	@ (900028f8 <BSP_LCD_DrawHLine+0x94>)
900028ca:	68fb      	ldr	r3, [r7, #12]
900028cc:	015b      	lsls	r3, r3, #5
900028ce:	4413      	add	r3, r2
900028d0:	681a      	ldr	r2, [r3, #0]
900028d2:	68bb      	ldr	r3, [r7, #8]
900028d4:	1ad3      	subs	r3, r2, r3
900028d6:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
900028d8:	6979      	ldr	r1, [r7, #20]
900028da:	6a3b      	ldr	r3, [r7, #32]
900028dc:	9301      	str	r3, [sp, #4]
900028de:	2300      	movs	r3, #0
900028e0:	9300      	str	r3, [sp, #0]
900028e2:	2301      	movs	r3, #1
900028e4:	683a      	ldr	r2, [r7, #0]
900028e6:	68f8      	ldr	r0, [r7, #12]
900028e8:	f000 f956 	bl	90002b98 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900028ec:	2300      	movs	r3, #0
}
900028ee:	4618      	mov	r0, r3
900028f0:	3718      	adds	r7, #24
900028f2:	46bd      	mov	sp, r7
900028f4:	bd80      	pop	{r7, pc}
900028f6:	bf00      	nop
900028f8:	20001244 	.word	0x20001244
900028fc:	2000119c 	.word	0x2000119c

90002900 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002900:	b580      	push	{r7, lr}
90002902:	b088      	sub	sp, #32
90002904:	af02      	add	r7, sp, #8
90002906:	60f8      	str	r0, [r7, #12]
90002908:	60b9      	str	r1, [r7, #8]
9000290a:	607a      	str	r2, [r7, #4]
9000290c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000290e:	4a24      	ldr	r2, [pc, #144]	@ (900029a0 <BSP_LCD_DrawVLine+0xa0>)
90002910:	68fb      	ldr	r3, [r7, #12]
90002912:	015b      	lsls	r3, r3, #5
90002914:	4413      	add	r3, r2
90002916:	3308      	adds	r3, #8
90002918:	681b      	ldr	r3, [r3, #0]
9000291a:	4a22      	ldr	r2, [pc, #136]	@ (900029a4 <BSP_LCD_DrawVLine+0xa4>)
9000291c:	2134      	movs	r1, #52	@ 0x34
9000291e:	fb01 f303 	mul.w	r3, r1, r3
90002922:	4413      	add	r3, r2
90002924:	335c      	adds	r3, #92	@ 0x5c
90002926:	681a      	ldr	r2, [r3, #0]
90002928:	491d      	ldr	r1, [pc, #116]	@ (900029a0 <BSP_LCD_DrawVLine+0xa0>)
9000292a:	68fb      	ldr	r3, [r7, #12]
9000292c:	015b      	lsls	r3, r3, #5
9000292e:	440b      	add	r3, r1
90002930:	3310      	adds	r3, #16
90002932:	681b      	ldr	r3, [r3, #0]
90002934:	481a      	ldr	r0, [pc, #104]	@ (900029a0 <BSP_LCD_DrawVLine+0xa0>)
90002936:	68f9      	ldr	r1, [r7, #12]
90002938:	0149      	lsls	r1, r1, #5
9000293a:	4401      	add	r1, r0
9000293c:	6809      	ldr	r1, [r1, #0]
9000293e:	6878      	ldr	r0, [r7, #4]
90002940:	fb01 f000 	mul.w	r0, r1, r0
90002944:	68b9      	ldr	r1, [r7, #8]
90002946:	4401      	add	r1, r0
90002948:	fb01 f303 	mul.w	r3, r1, r3
9000294c:	4413      	add	r3, r2
9000294e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
90002950:	687a      	ldr	r2, [r7, #4]
90002952:	683b      	ldr	r3, [r7, #0]
90002954:	441a      	add	r2, r3
90002956:	4912      	ldr	r1, [pc, #72]	@ (900029a0 <BSP_LCD_DrawVLine+0xa0>)
90002958:	68fb      	ldr	r3, [r7, #12]
9000295a:	015b      	lsls	r3, r3, #5
9000295c:	440b      	add	r3, r1
9000295e:	3304      	adds	r3, #4
90002960:	681b      	ldr	r3, [r3, #0]
90002962:	429a      	cmp	r2, r3
90002964:	d908      	bls.n	90002978 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90002966:	4a0e      	ldr	r2, [pc, #56]	@ (900029a0 <BSP_LCD_DrawVLine+0xa0>)
90002968:	68fb      	ldr	r3, [r7, #12]
9000296a:	015b      	lsls	r3, r3, #5
9000296c:	4413      	add	r3, r2
9000296e:	3304      	adds	r3, #4
90002970:	681a      	ldr	r2, [r3, #0]
90002972:	687b      	ldr	r3, [r7, #4]
90002974:	1ad3      	subs	r3, r2, r3
90002976:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002978:	6979      	ldr	r1, [r7, #20]
9000297a:	4a09      	ldr	r2, [pc, #36]	@ (900029a0 <BSP_LCD_DrawVLine+0xa0>)
9000297c:	68fb      	ldr	r3, [r7, #12]
9000297e:	015b      	lsls	r3, r3, #5
90002980:	4413      	add	r3, r2
90002982:	681b      	ldr	r3, [r3, #0]
90002984:	3b01      	subs	r3, #1
90002986:	6a3a      	ldr	r2, [r7, #32]
90002988:	9201      	str	r2, [sp, #4]
9000298a:	9300      	str	r3, [sp, #0]
9000298c:	683b      	ldr	r3, [r7, #0]
9000298e:	2201      	movs	r2, #1
90002990:	68f8      	ldr	r0, [r7, #12]
90002992:	f000 f901 	bl	90002b98 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002996:	2300      	movs	r3, #0
}
90002998:	4618      	mov	r0, r3
9000299a:	3718      	adds	r7, #24
9000299c:	46bd      	mov	sp, r7
9000299e:	bd80      	pop	{r7, pc}
900029a0:	20001244 	.word	0x20001244
900029a4:	2000119c 	.word	0x2000119c

900029a8 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
900029a8:	b580      	push	{r7, lr}
900029aa:	b088      	sub	sp, #32
900029ac:	af02      	add	r7, sp, #8
900029ae:	60f8      	str	r0, [r7, #12]
900029b0:	60b9      	str	r1, [r7, #8]
900029b2:	607a      	str	r2, [r7, #4]
900029b4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900029b6:	4a1b      	ldr	r2, [pc, #108]	@ (90002a24 <BSP_LCD_FillRect+0x7c>)
900029b8:	68fb      	ldr	r3, [r7, #12]
900029ba:	015b      	lsls	r3, r3, #5
900029bc:	4413      	add	r3, r2
900029be:	3308      	adds	r3, #8
900029c0:	681b      	ldr	r3, [r3, #0]
900029c2:	4a19      	ldr	r2, [pc, #100]	@ (90002a28 <BSP_LCD_FillRect+0x80>)
900029c4:	2134      	movs	r1, #52	@ 0x34
900029c6:	fb01 f303 	mul.w	r3, r1, r3
900029ca:	4413      	add	r3, r2
900029cc:	335c      	adds	r3, #92	@ 0x5c
900029ce:	681a      	ldr	r2, [r3, #0]
900029d0:	4914      	ldr	r1, [pc, #80]	@ (90002a24 <BSP_LCD_FillRect+0x7c>)
900029d2:	68fb      	ldr	r3, [r7, #12]
900029d4:	015b      	lsls	r3, r3, #5
900029d6:	440b      	add	r3, r1
900029d8:	3310      	adds	r3, #16
900029da:	681b      	ldr	r3, [r3, #0]
900029dc:	4811      	ldr	r0, [pc, #68]	@ (90002a24 <BSP_LCD_FillRect+0x7c>)
900029de:	68f9      	ldr	r1, [r7, #12]
900029e0:	0149      	lsls	r1, r1, #5
900029e2:	4401      	add	r1, r0
900029e4:	6809      	ldr	r1, [r1, #0]
900029e6:	6878      	ldr	r0, [r7, #4]
900029e8:	fb01 f000 	mul.w	r0, r1, r0
900029ec:	68b9      	ldr	r1, [r7, #8]
900029ee:	4401      	add	r1, r0
900029f0:	fb01 f303 	mul.w	r3, r1, r3
900029f4:	4413      	add	r3, r2
900029f6:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
900029f8:	6979      	ldr	r1, [r7, #20]
900029fa:	4a0a      	ldr	r2, [pc, #40]	@ (90002a24 <BSP_LCD_FillRect+0x7c>)
900029fc:	68fb      	ldr	r3, [r7, #12]
900029fe:	015b      	lsls	r3, r3, #5
90002a00:	4413      	add	r3, r2
90002a02:	681a      	ldr	r2, [r3, #0]
90002a04:	683b      	ldr	r3, [r7, #0]
90002a06:	1ad3      	subs	r3, r2, r3
90002a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90002a0a:	9201      	str	r2, [sp, #4]
90002a0c:	9300      	str	r3, [sp, #0]
90002a0e:	6a3b      	ldr	r3, [r7, #32]
90002a10:	683a      	ldr	r2, [r7, #0]
90002a12:	68f8      	ldr	r0, [r7, #12]
90002a14:	f000 f8c0 	bl	90002b98 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002a18:	2300      	movs	r3, #0
}
90002a1a:	4618      	mov	r0, r3
90002a1c:	3718      	adds	r7, #24
90002a1e:	46bd      	mov	sp, r7
90002a20:	bd80      	pop	{r7, pc}
90002a22:	bf00      	nop
90002a24:	20001244 	.word	0x20001244
90002a28:	2000119c 	.word	0x2000119c

90002a2c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002a2c:	b480      	push	{r7}
90002a2e:	b085      	sub	sp, #20
90002a30:	af00      	add	r7, sp, #0
90002a32:	60f8      	str	r0, [r7, #12]
90002a34:	60b9      	str	r1, [r7, #8]
90002a36:	607a      	str	r2, [r7, #4]
90002a38:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002a3a:	4a28      	ldr	r2, [pc, #160]	@ (90002adc <BSP_LCD_ReadPixel+0xb0>)
90002a3c:	68fb      	ldr	r3, [r7, #12]
90002a3e:	015b      	lsls	r3, r3, #5
90002a40:	4413      	add	r3, r2
90002a42:	3308      	adds	r3, #8
90002a44:	681b      	ldr	r3, [r3, #0]
90002a46:	4a26      	ldr	r2, [pc, #152]	@ (90002ae0 <BSP_LCD_ReadPixel+0xb4>)
90002a48:	2134      	movs	r1, #52	@ 0x34
90002a4a:	fb01 f303 	mul.w	r3, r1, r3
90002a4e:	4413      	add	r3, r2
90002a50:	3348      	adds	r3, #72	@ 0x48
90002a52:	681b      	ldr	r3, [r3, #0]
90002a54:	2b00      	cmp	r3, #0
90002a56:	d11c      	bne.n	90002a92 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002a58:	4a20      	ldr	r2, [pc, #128]	@ (90002adc <BSP_LCD_ReadPixel+0xb0>)
90002a5a:	68fb      	ldr	r3, [r7, #12]
90002a5c:	015b      	lsls	r3, r3, #5
90002a5e:	4413      	add	r3, r2
90002a60:	3308      	adds	r3, #8
90002a62:	681b      	ldr	r3, [r3, #0]
90002a64:	4a1e      	ldr	r2, [pc, #120]	@ (90002ae0 <BSP_LCD_ReadPixel+0xb4>)
90002a66:	2134      	movs	r1, #52	@ 0x34
90002a68:	fb01 f303 	mul.w	r3, r1, r3
90002a6c:	4413      	add	r3, r2
90002a6e:	335c      	adds	r3, #92	@ 0x5c
90002a70:	681a      	ldr	r2, [r3, #0]
90002a72:	491a      	ldr	r1, [pc, #104]	@ (90002adc <BSP_LCD_ReadPixel+0xb0>)
90002a74:	68fb      	ldr	r3, [r7, #12]
90002a76:	015b      	lsls	r3, r3, #5
90002a78:	440b      	add	r3, r1
90002a7a:	681b      	ldr	r3, [r3, #0]
90002a7c:	6879      	ldr	r1, [r7, #4]
90002a7e:	fb03 f101 	mul.w	r1, r3, r1
90002a82:	68bb      	ldr	r3, [r7, #8]
90002a84:	440b      	add	r3, r1
90002a86:	009b      	lsls	r3, r3, #2
90002a88:	4413      	add	r3, r2
90002a8a:	681a      	ldr	r2, [r3, #0]
90002a8c:	683b      	ldr	r3, [r7, #0]
90002a8e:	601a      	str	r2, [r3, #0]
90002a90:	e01d      	b.n	90002ace <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002a92:	4a12      	ldr	r2, [pc, #72]	@ (90002adc <BSP_LCD_ReadPixel+0xb0>)
90002a94:	68fb      	ldr	r3, [r7, #12]
90002a96:	015b      	lsls	r3, r3, #5
90002a98:	4413      	add	r3, r2
90002a9a:	3308      	adds	r3, #8
90002a9c:	681b      	ldr	r3, [r3, #0]
90002a9e:	4a10      	ldr	r2, [pc, #64]	@ (90002ae0 <BSP_LCD_ReadPixel+0xb4>)
90002aa0:	2134      	movs	r1, #52	@ 0x34
90002aa2:	fb01 f303 	mul.w	r3, r1, r3
90002aa6:	4413      	add	r3, r2
90002aa8:	335c      	adds	r3, #92	@ 0x5c
90002aaa:	681a      	ldr	r2, [r3, #0]
90002aac:	490b      	ldr	r1, [pc, #44]	@ (90002adc <BSP_LCD_ReadPixel+0xb0>)
90002aae:	68fb      	ldr	r3, [r7, #12]
90002ab0:	015b      	lsls	r3, r3, #5
90002ab2:	440b      	add	r3, r1
90002ab4:	681b      	ldr	r3, [r3, #0]
90002ab6:	6879      	ldr	r1, [r7, #4]
90002ab8:	fb03 f101 	mul.w	r1, r3, r1
90002abc:	68bb      	ldr	r3, [r7, #8]
90002abe:	440b      	add	r3, r1
90002ac0:	005b      	lsls	r3, r3, #1
90002ac2:	4413      	add	r3, r2
90002ac4:	881b      	ldrh	r3, [r3, #0]
90002ac6:	b29b      	uxth	r3, r3
90002ac8:	461a      	mov	r2, r3
90002aca:	683b      	ldr	r3, [r7, #0]
90002acc:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002ace:	2300      	movs	r3, #0
}
90002ad0:	4618      	mov	r0, r3
90002ad2:	3714      	adds	r7, #20
90002ad4:	46bd      	mov	sp, r7
90002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ada:	4770      	bx	lr
90002adc:	20001244 	.word	0x20001244
90002ae0:	2000119c 	.word	0x2000119c

90002ae4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002ae4:	b480      	push	{r7}
90002ae6:	b085      	sub	sp, #20
90002ae8:	af00      	add	r7, sp, #0
90002aea:	60f8      	str	r0, [r7, #12]
90002aec:	60b9      	str	r1, [r7, #8]
90002aee:	607a      	str	r2, [r7, #4]
90002af0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002af2:	4a27      	ldr	r2, [pc, #156]	@ (90002b90 <BSP_LCD_WritePixel+0xac>)
90002af4:	68fb      	ldr	r3, [r7, #12]
90002af6:	015b      	lsls	r3, r3, #5
90002af8:	4413      	add	r3, r2
90002afa:	3308      	adds	r3, #8
90002afc:	681b      	ldr	r3, [r3, #0]
90002afe:	4a25      	ldr	r2, [pc, #148]	@ (90002b94 <BSP_LCD_WritePixel+0xb0>)
90002b00:	2134      	movs	r1, #52	@ 0x34
90002b02:	fb01 f303 	mul.w	r3, r1, r3
90002b06:	4413      	add	r3, r2
90002b08:	3348      	adds	r3, #72	@ 0x48
90002b0a:	681b      	ldr	r3, [r3, #0]
90002b0c:	2b00      	cmp	r3, #0
90002b0e:	d11c      	bne.n	90002b4a <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
90002b10:	4a1f      	ldr	r2, [pc, #124]	@ (90002b90 <BSP_LCD_WritePixel+0xac>)
90002b12:	68fb      	ldr	r3, [r7, #12]
90002b14:	015b      	lsls	r3, r3, #5
90002b16:	4413      	add	r3, r2
90002b18:	3308      	adds	r3, #8
90002b1a:	681b      	ldr	r3, [r3, #0]
90002b1c:	4a1d      	ldr	r2, [pc, #116]	@ (90002b94 <BSP_LCD_WritePixel+0xb0>)
90002b1e:	2134      	movs	r1, #52	@ 0x34
90002b20:	fb01 f303 	mul.w	r3, r1, r3
90002b24:	4413      	add	r3, r2
90002b26:	335c      	adds	r3, #92	@ 0x5c
90002b28:	681a      	ldr	r2, [r3, #0]
90002b2a:	4919      	ldr	r1, [pc, #100]	@ (90002b90 <BSP_LCD_WritePixel+0xac>)
90002b2c:	68fb      	ldr	r3, [r7, #12]
90002b2e:	015b      	lsls	r3, r3, #5
90002b30:	440b      	add	r3, r1
90002b32:	681b      	ldr	r3, [r3, #0]
90002b34:	6879      	ldr	r1, [r7, #4]
90002b36:	fb03 f101 	mul.w	r1, r3, r1
90002b3a:	68bb      	ldr	r3, [r7, #8]
90002b3c:	440b      	add	r3, r1
90002b3e:	009b      	lsls	r3, r3, #2
90002b40:	4413      	add	r3, r2
90002b42:	461a      	mov	r2, r3
90002b44:	683b      	ldr	r3, [r7, #0]
90002b46:	6013      	str	r3, [r2, #0]
90002b48:	e01b      	b.n	90002b82 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
90002b4a:	4a11      	ldr	r2, [pc, #68]	@ (90002b90 <BSP_LCD_WritePixel+0xac>)
90002b4c:	68fb      	ldr	r3, [r7, #12]
90002b4e:	015b      	lsls	r3, r3, #5
90002b50:	4413      	add	r3, r2
90002b52:	3308      	adds	r3, #8
90002b54:	681b      	ldr	r3, [r3, #0]
90002b56:	4a0f      	ldr	r2, [pc, #60]	@ (90002b94 <BSP_LCD_WritePixel+0xb0>)
90002b58:	2134      	movs	r1, #52	@ 0x34
90002b5a:	fb01 f303 	mul.w	r3, r1, r3
90002b5e:	4413      	add	r3, r2
90002b60:	335c      	adds	r3, #92	@ 0x5c
90002b62:	681a      	ldr	r2, [r3, #0]
90002b64:	490a      	ldr	r1, [pc, #40]	@ (90002b90 <BSP_LCD_WritePixel+0xac>)
90002b66:	68fb      	ldr	r3, [r7, #12]
90002b68:	015b      	lsls	r3, r3, #5
90002b6a:	440b      	add	r3, r1
90002b6c:	681b      	ldr	r3, [r3, #0]
90002b6e:	6879      	ldr	r1, [r7, #4]
90002b70:	fb03 f101 	mul.w	r1, r3, r1
90002b74:	68bb      	ldr	r3, [r7, #8]
90002b76:	440b      	add	r3, r1
90002b78:	005b      	lsls	r3, r3, #1
90002b7a:	4413      	add	r3, r2
90002b7c:	683a      	ldr	r2, [r7, #0]
90002b7e:	b292      	uxth	r2, r2
90002b80:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002b82:	2300      	movs	r3, #0
}
90002b84:	4618      	mov	r0, r3
90002b86:	3714      	adds	r7, #20
90002b88:	46bd      	mov	sp, r7
90002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
90002b8e:	4770      	bx	lr
90002b90:	20001244 	.word	0x20001244
90002b94:	2000119c 	.word	0x2000119c

90002b98 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002b98:	b580      	push	{r7, lr}
90002b9a:	b088      	sub	sp, #32
90002b9c:	af02      	add	r7, sp, #8
90002b9e:	60f8      	str	r0, [r7, #12]
90002ba0:	60b9      	str	r1, [r7, #8]
90002ba2:	607a      	str	r2, [r7, #4]
90002ba4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002ba8:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90002baa:	4a2d      	ldr	r2, [pc, #180]	@ (90002c60 <LL_FillBuffer+0xc8>)
90002bac:	68fb      	ldr	r3, [r7, #12]
90002bae:	015b      	lsls	r3, r3, #5
90002bb0:	4413      	add	r3, r2
90002bb2:	330c      	adds	r3, #12
90002bb4:	681b      	ldr	r3, [r3, #0]
90002bb6:	2b02      	cmp	r3, #2
90002bb8:	d129      	bne.n	90002c0e <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002bba:	2302      	movs	r3, #2
90002bbc:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
90002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002bc0:	0adb      	lsrs	r3, r3, #11
90002bc2:	f003 021f 	and.w	r2, r3, #31
90002bc6:	4613      	mov	r3, r2
90002bc8:	011b      	lsls	r3, r3, #4
90002bca:	4413      	add	r3, r2
90002bcc:	015a      	lsls	r2, r3, #5
90002bce:	1ad3      	subs	r3, r2, r3
90002bd0:	3317      	adds	r3, #23
90002bd2:	099b      	lsrs	r3, r3, #6
90002bd4:	0419      	lsls	r1, r3, #16
90002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002bd8:	095b      	lsrs	r3, r3, #5
90002bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90002bde:	4613      	mov	r3, r2
90002be0:	01db      	lsls	r3, r3, #7
90002be2:	4413      	add	r3, r2
90002be4:	005b      	lsls	r3, r3, #1
90002be6:	4413      	add	r3, r2
90002be8:	3321      	adds	r3, #33	@ 0x21
90002bea:	099b      	lsrs	r3, r3, #6
90002bec:	021b      	lsls	r3, r3, #8
90002bee:	4319      	orrs	r1, r3
90002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002bf2:	f003 021f 	and.w	r2, r3, #31
90002bf6:	4613      	mov	r3, r2
90002bf8:	011b      	lsls	r3, r3, #4
90002bfa:	4413      	add	r3, r2
90002bfc:	015a      	lsls	r2, r3, #5
90002bfe:	1ad3      	subs	r3, r2, r3
90002c00:	3317      	adds	r3, #23
90002c02:	099b      	lsrs	r3, r3, #6
90002c04:	430b      	orrs	r3, r1
90002c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
90002c0a:	613b      	str	r3, [r7, #16]
    break;
90002c0c:	e002      	b.n	90002c14 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002c0e:	2300      	movs	r3, #0
90002c10:	617b      	str	r3, [r7, #20]
    break;
90002c12:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002c14:	4b13      	ldr	r3, [pc, #76]	@ (90002c64 <LL_FillBuffer+0xcc>)
90002c16:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
90002c1a:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002c1c:	4a11      	ldr	r2, [pc, #68]	@ (90002c64 <LL_FillBuffer+0xcc>)
90002c1e:	697b      	ldr	r3, [r7, #20]
90002c20:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
90002c22:	4a10      	ldr	r2, [pc, #64]	@ (90002c64 <LL_FillBuffer+0xcc>)
90002c24:	6a3b      	ldr	r3, [r7, #32]
90002c26:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
90002c28:	4b0e      	ldr	r3, [pc, #56]	@ (90002c64 <LL_FillBuffer+0xcc>)
90002c2a:	4a0f      	ldr	r2, [pc, #60]	@ (90002c68 <LL_FillBuffer+0xd0>)
90002c2c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002c2e:	480d      	ldr	r0, [pc, #52]	@ (90002c64 <LL_FillBuffer+0xcc>)
90002c30:	f000 fe50 	bl	900038d4 <HAL_DMA2D_Init>
90002c34:	4603      	mov	r3, r0
90002c36:	2b00      	cmp	r3, #0
90002c38:	d10e      	bne.n	90002c58 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90002c3a:	68ba      	ldr	r2, [r7, #8]
90002c3c:	683b      	ldr	r3, [r7, #0]
90002c3e:	9300      	str	r3, [sp, #0]
90002c40:	687b      	ldr	r3, [r7, #4]
90002c42:	6939      	ldr	r1, [r7, #16]
90002c44:	4807      	ldr	r0, [pc, #28]	@ (90002c64 <LL_FillBuffer+0xcc>)
90002c46:	f000 feb3 	bl	900039b0 <HAL_DMA2D_Start>
90002c4a:	4603      	mov	r3, r0
90002c4c:	2b00      	cmp	r3, #0
90002c4e:	d103      	bne.n	90002c58 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002c50:	2132      	movs	r1, #50	@ 0x32
90002c52:	4804      	ldr	r0, [pc, #16]	@ (90002c64 <LL_FillBuffer+0xcc>)
90002c54:	f000 fed7 	bl	90003a06 <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002c58:	bf00      	nop
90002c5a:	3718      	adds	r7, #24
90002c5c:	46bd      	mov	sp, r7
90002c5e:	bd80      	pop	{r7, pc}
90002c60:	20001244 	.word	0x20001244
90002c64:	20001134 	.word	0x20001134
90002c68:	52001000 	.word	0x52001000

90002c6c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002c6c:	b580      	push	{r7, lr}
90002c6e:	b088      	sub	sp, #32
90002c70:	af02      	add	r7, sp, #8
90002c72:	60f8      	str	r0, [r7, #12]
90002c74:	60b9      	str	r1, [r7, #8]
90002c76:	607a      	str	r2, [r7, #4]
90002c78:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002c7a:	4a23      	ldr	r2, [pc, #140]	@ (90002d08 <LL_ConvertLineToRGB+0x9c>)
90002c7c:	68fb      	ldr	r3, [r7, #12]
90002c7e:	015b      	lsls	r3, r3, #5
90002c80:	4413      	add	r3, r2
90002c82:	330c      	adds	r3, #12
90002c84:	681b      	ldr	r3, [r3, #0]
90002c86:	2b02      	cmp	r3, #2
90002c88:	d102      	bne.n	90002c90 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002c8a:	2302      	movs	r3, #2
90002c8c:	617b      	str	r3, [r7, #20]
    break;
90002c8e:	e002      	b.n	90002c96 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002c90:	2300      	movs	r3, #0
90002c92:	617b      	str	r3, [r7, #20]
    break;
90002c94:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002c96:	4b1d      	ldr	r3, [pc, #116]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002c98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002c9c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002c9e:	4a1b      	ldr	r2, [pc, #108]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002ca0:	697b      	ldr	r3, [r7, #20]
90002ca2:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002ca4:	4b19      	ldr	r3, [pc, #100]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002ca6:	2200      	movs	r2, #0
90002ca8:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90002caa:	4b18      	ldr	r3, [pc, #96]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cac:	2200      	movs	r2, #0
90002cae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002cb0:	4b16      	ldr	r3, [pc, #88]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cb2:	22ff      	movs	r2, #255	@ 0xff
90002cb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002cb6:	4a15      	ldr	r2, [pc, #84]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cb8:	6a3b      	ldr	r3, [r7, #32]
90002cba:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002cbc:	4b13      	ldr	r3, [pc, #76]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cbe:	2200      	movs	r2, #0
90002cc0:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002cc2:	4b12      	ldr	r3, [pc, #72]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cc4:	4a12      	ldr	r2, [pc, #72]	@ (90002d10 <LL_ConvertLineToRGB+0xa4>)
90002cc6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002cc8:	4810      	ldr	r0, [pc, #64]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cca:	f000 fe03 	bl	900038d4 <HAL_DMA2D_Init>
90002cce:	4603      	mov	r3, r0
90002cd0:	2b00      	cmp	r3, #0
90002cd2:	d115      	bne.n	90002d00 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002cd4:	2101      	movs	r1, #1
90002cd6:	480d      	ldr	r0, [pc, #52]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cd8:	f000 ff7e 	bl	90003bd8 <HAL_DMA2D_ConfigLayer>
90002cdc:	4603      	mov	r3, r0
90002cde:	2b00      	cmp	r3, #0
90002ce0:	d10e      	bne.n	90002d00 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002ce2:	68b9      	ldr	r1, [r7, #8]
90002ce4:	687a      	ldr	r2, [r7, #4]
90002ce6:	2301      	movs	r3, #1
90002ce8:	9300      	str	r3, [sp, #0]
90002cea:	683b      	ldr	r3, [r7, #0]
90002cec:	4807      	ldr	r0, [pc, #28]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cee:	f000 fe5f 	bl	900039b0 <HAL_DMA2D_Start>
90002cf2:	4603      	mov	r3, r0
90002cf4:	2b00      	cmp	r3, #0
90002cf6:	d103      	bne.n	90002d00 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002cf8:	2132      	movs	r1, #50	@ 0x32
90002cfa:	4804      	ldr	r0, [pc, #16]	@ (90002d0c <LL_ConvertLineToRGB+0xa0>)
90002cfc:	f000 fe83 	bl	90003a06 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002d00:	bf00      	nop
90002d02:	3718      	adds	r7, #24
90002d04:	46bd      	mov	sp, r7
90002d06:	bd80      	pop	{r7, pc}
90002d08:	20001244 	.word	0x20001244
90002d0c:	20001134 	.word	0x20001134
90002d10:	52001000 	.word	0x52001000

90002d14 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002d14:	b580      	push	{r7, lr}
90002d16:	b08e      	sub	sp, #56	@ 0x38
90002d18:	af00      	add	r7, sp, #0
90002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002d1c:	687b      	ldr	r3, [r7, #4]
90002d1e:	681b      	ldr	r3, [r3, #0]
90002d20:	4a5b      	ldr	r2, [pc, #364]	@ (90002e90 <LTDC_MspInit+0x17c>)
90002d22:	4293      	cmp	r3, r2
90002d24:	f040 80b0 	bne.w	90002e88 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002d28:	4b5a      	ldr	r3, [pc, #360]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002d2e:	4a59      	ldr	r2, [pc, #356]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d30:	f043 0308 	orr.w	r3, r3, #8
90002d34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002d38:	4b56      	ldr	r3, [pc, #344]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002d3e:	f003 0308 	and.w	r3, r3, #8
90002d42:	623b      	str	r3, [r7, #32]
90002d44:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002d46:	4b53      	ldr	r3, [pc, #332]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d4c:	4a51      	ldr	r2, [pc, #324]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d56:	4b4f      	ldr	r3, [pc, #316]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002d60:	61fb      	str	r3, [r7, #28]
90002d62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002d64:	4b4b      	ldr	r3, [pc, #300]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d6a:	4a4a      	ldr	r2, [pc, #296]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d74:	4b47      	ldr	r3, [pc, #284]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002d7e:	61bb      	str	r3, [r7, #24]
90002d80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002d82:	4b44      	ldr	r3, [pc, #272]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d88:	4a42      	ldr	r2, [pc, #264]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002d92:	4b40      	ldr	r3, [pc, #256]	@ (90002e94 <LTDC_MspInit+0x180>)
90002d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002d9c:	617b      	str	r3, [r7, #20]
90002d9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002da0:	4b3c      	ldr	r3, [pc, #240]	@ (90002e94 <LTDC_MspInit+0x180>)
90002da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002da6:	4a3b      	ldr	r2, [pc, #236]	@ (90002e94 <LTDC_MspInit+0x180>)
90002da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002db0:	4b38      	ldr	r3, [pc, #224]	@ (90002e94 <LTDC_MspInit+0x180>)
90002db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002dba:	613b      	str	r3, [r7, #16]
90002dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002dbe:	4b35      	ldr	r3, [pc, #212]	@ (90002e94 <LTDC_MspInit+0x180>)
90002dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002dc4:	4a33      	ldr	r2, [pc, #204]	@ (90002e94 <LTDC_MspInit+0x180>)
90002dc6:	f043 0308 	orr.w	r3, r3, #8
90002dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002dce:	4b31      	ldr	r3, [pc, #196]	@ (90002e94 <LTDC_MspInit+0x180>)
90002dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002dd4:	f003 0308 	and.w	r3, r3, #8
90002dd8:	60fb      	str	r3, [r7, #12]
90002dda:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002ddc:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002de0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002de2:	2302      	movs	r3, #2
90002de4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002de6:	2300      	movs	r3, #0
90002de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002dea:	2302      	movs	r3, #2
90002dec:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002dee:	230e      	movs	r3, #14
90002df0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002df6:	4619      	mov	r1, r3
90002df8:	4827      	ldr	r0, [pc, #156]	@ (90002e98 <LTDC_MspInit+0x184>)
90002dfa:	f001 f841 	bl	90003e80 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002dfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002e02:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002e04:	230e      	movs	r3, #14
90002e06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e0c:	4619      	mov	r1, r3
90002e0e:	4823      	ldr	r0, [pc, #140]	@ (90002e9c <LTDC_MspInit+0x188>)
90002e10:	f001 f836 	bl	90003e80 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002e14:	23ff      	movs	r3, #255	@ 0xff
90002e16:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002e18:	230e      	movs	r3, #14
90002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e20:	4619      	mov	r1, r3
90002e22:	481f      	ldr	r0, [pc, #124]	@ (90002ea0 <LTDC_MspInit+0x18c>)
90002e24:	f001 f82c 	bl	90003e80 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002e28:	f240 2302 	movw	r3, #514	@ 0x202
90002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002e2e:	2302      	movs	r3, #2
90002e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002e32:	2300      	movs	r3, #0
90002e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002e36:	2302      	movs	r3, #2
90002e38:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002e3a:	230e      	movs	r3, #14
90002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e42:	4619      	mov	r1, r3
90002e44:	4817      	ldr	r0, [pc, #92]	@ (90002ea4 <LTDC_MspInit+0x190>)
90002e46:	f001 f81b 	bl	90003e80 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002e4a:	2380      	movs	r3, #128	@ 0x80
90002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002e4e:	2301      	movs	r3, #1
90002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002e56:	4619      	mov	r1, r3
90002e58:	4813      	ldr	r0, [pc, #76]	@ (90002ea8 <LTDC_MspInit+0x194>)
90002e5a:	f001 f811 	bl	90003e80 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002e5e:	2201      	movs	r2, #1
90002e60:	2180      	movs	r1, #128	@ 0x80
90002e62:	4811      	ldr	r0, [pc, #68]	@ (90002ea8 <LTDC_MspInit+0x194>)
90002e64:	f001 f9d4 	bl	90004210 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002e68:	4b0a      	ldr	r3, [pc, #40]	@ (90002e94 <LTDC_MspInit+0x180>)
90002e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002e6e:	4a09      	ldr	r2, [pc, #36]	@ (90002e94 <LTDC_MspInit+0x180>)
90002e70:	f043 0308 	orr.w	r3, r3, #8
90002e74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002e78:	4b06      	ldr	r3, [pc, #24]	@ (90002e94 <LTDC_MspInit+0x180>)
90002e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002e7e:	4a05      	ldr	r2, [pc, #20]	@ (90002e94 <LTDC_MspInit+0x180>)
90002e80:	f023 0308 	bic.w	r3, r3, #8
90002e84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002e88:	bf00      	nop
90002e8a:	3738      	adds	r7, #56	@ 0x38
90002e8c:	46bd      	mov	sp, r7
90002e8e:	bd80      	pop	{r7, pc}
90002e90:	50001000 	.word	0x50001000
90002e94:	58024400 	.word	0x58024400
90002e98:	58022000 	.word	0x58022000
90002e9c:	58022400 	.word	0x58022400
90002ea0:	58022800 	.word	0x58022800
90002ea4:	58021c00 	.word	0x58021c00
90002ea8:	58020c00 	.word	0x58020c00

90002eac <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002eac:	b480      	push	{r7}
90002eae:	b085      	sub	sp, #20
90002eb0:	af00      	add	r7, sp, #0
90002eb2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002eb4:	687b      	ldr	r3, [r7, #4]
90002eb6:	681b      	ldr	r3, [r3, #0]
90002eb8:	4a11      	ldr	r2, [pc, #68]	@ (90002f00 <DMA2D_MspInit+0x54>)
90002eba:	4293      	cmp	r3, r2
90002ebc:	d11a      	bne.n	90002ef4 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002ebe:	4b11      	ldr	r3, [pc, #68]	@ (90002f04 <DMA2D_MspInit+0x58>)
90002ec0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002ec4:	4a0f      	ldr	r2, [pc, #60]	@ (90002f04 <DMA2D_MspInit+0x58>)
90002ec6:	f043 0310 	orr.w	r3, r3, #16
90002eca:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002ece:	4b0d      	ldr	r3, [pc, #52]	@ (90002f04 <DMA2D_MspInit+0x58>)
90002ed0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002ed4:	f003 0310 	and.w	r3, r3, #16
90002ed8:	60fb      	str	r3, [r7, #12]
90002eda:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002edc:	4b09      	ldr	r3, [pc, #36]	@ (90002f04 <DMA2D_MspInit+0x58>)
90002ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002ee0:	4a08      	ldr	r2, [pc, #32]	@ (90002f04 <DMA2D_MspInit+0x58>)
90002ee2:	f043 0310 	orr.w	r3, r3, #16
90002ee6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002ee8:	4b06      	ldr	r3, [pc, #24]	@ (90002f04 <DMA2D_MspInit+0x58>)
90002eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002eec:	4a05      	ldr	r2, [pc, #20]	@ (90002f04 <DMA2D_MspInit+0x58>)
90002eee:	f023 0310 	bic.w	r3, r3, #16
90002ef2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002ef4:	bf00      	nop
90002ef6:	3714      	adds	r7, #20
90002ef8:	46bd      	mov	sp, r7
90002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
90002efe:	4770      	bx	lr
90002f00:	52001000 	.word	0x52001000
90002f04:	58024400 	.word	0x58024400

90002f08 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002f08:	b580      	push	{r7, lr}
90002f0a:	b08a      	sub	sp, #40	@ 0x28
90002f0c:	af00      	add	r7, sp, #0
90002f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002f10:	4b18      	ldr	r3, [pc, #96]	@ (90002f74 <TIMx_PWM_MspInit+0x6c>)
90002f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f16:	4a17      	ldr	r2, [pc, #92]	@ (90002f74 <TIMx_PWM_MspInit+0x6c>)
90002f18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f20:	4b14      	ldr	r3, [pc, #80]	@ (90002f74 <TIMx_PWM_MspInit+0x6c>)
90002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002f2a:	613b      	str	r3, [r7, #16]
90002f2c:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002f2e:	4b11      	ldr	r3, [pc, #68]	@ (90002f74 <TIMx_PWM_MspInit+0x6c>)
90002f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002f34:	4a0f      	ldr	r2, [pc, #60]	@ (90002f74 <TIMx_PWM_MspInit+0x6c>)
90002f36:	f043 0302 	orr.w	r3, r3, #2
90002f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (90002f74 <TIMx_PWM_MspInit+0x6c>)
90002f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002f44:	f003 0302 	and.w	r3, r3, #2
90002f48:	60fb      	str	r3, [r7, #12]
90002f4a:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002f4c:	2302      	movs	r3, #2
90002f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002f50:	2300      	movs	r3, #0
90002f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002f54:	2301      	movs	r3, #1
90002f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002f58:	2303      	movs	r3, #3
90002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002f5c:	2301      	movs	r3, #1
90002f5e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002f60:	f107 0314 	add.w	r3, r7, #20
90002f64:	4619      	mov	r1, r3
90002f66:	4804      	ldr	r0, [pc, #16]	@ (90002f78 <TIMx_PWM_MspInit+0x70>)
90002f68:	f000 ff8a 	bl	90003e80 <HAL_GPIO_Init>
}
90002f6c:	bf00      	nop
90002f6e:	3728      	adds	r7, #40	@ 0x28
90002f70:	46bd      	mov	sp, r7
90002f72:	bd80      	pop	{r7, pc}
90002f74:	58024400 	.word	0x58024400
90002f78:	58022800 	.word	0x58022800

90002f7c <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002f7c:	b580      	push	{r7, lr}
90002f7e:	b082      	sub	sp, #8
90002f80:	af00      	add	r7, sp, #0
90002f82:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002f84:	687b      	ldr	r3, [r7, #4]
90002f86:	4a11      	ldr	r2, [pc, #68]	@ (90002fcc <TIMx_PWM_Init+0x50>)
90002f88:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002f8a:	6878      	ldr	r0, [r7, #4]
90002f8c:	f006 fe82 	bl	90009c94 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002f90:	6878      	ldr	r0, [r7, #4]
90002f92:	f7ff ffb9 	bl	90002f08 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002f96:	687b      	ldr	r3, [r7, #4]
90002f98:	2204      	movs	r2, #4
90002f9a:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002f9c:	687b      	ldr	r3, [r7, #4]
90002f9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002fa2:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002fa4:	687b      	ldr	r3, [r7, #4]
90002fa6:	2200      	movs	r2, #0
90002fa8:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002faa:	687b      	ldr	r3, [r7, #4]
90002fac:	2200      	movs	r2, #0
90002fae:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002fb0:	687b      	ldr	r3, [r7, #4]
90002fb2:	2200      	movs	r2, #0
90002fb4:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002fb6:	687b      	ldr	r3, [r7, #4]
90002fb8:	2200      	movs	r2, #0
90002fba:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002fbc:	6878      	ldr	r0, [r7, #4]
90002fbe:	f006 fe12 	bl	90009be6 <HAL_TIM_PWM_Init>
}
90002fc2:	bf00      	nop
90002fc4:	3708      	adds	r7, #8
90002fc6:	46bd      	mov	sp, r7
90002fc8:	bd80      	pop	{r7, pc}
90002fca:	bf00      	nop
90002fcc:	40010400 	.word	0x40010400

90002fd0 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002fd0:	b580      	push	{r7, lr}
90002fd2:	b084      	sub	sp, #16
90002fd4:	af00      	add	r7, sp, #0
90002fd6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002fd8:	2300      	movs	r3, #0
90002fda:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002fdc:	687b      	ldr	r3, [r7, #4]
90002fde:	2b00      	cmp	r3, #0
90002fe0:	d003      	beq.n	90002fea <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002fe2:	f06f 0301 	mvn.w	r3, #1
90002fe6:	60fb      	str	r3, [r7, #12]
90002fe8:	e044      	b.n	90003074 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002fea:	687b      	ldr	r3, [r7, #4]
90002fec:	2234      	movs	r2, #52	@ 0x34
90002fee:	fb02 f303 	mul.w	r3, r2, r3
90002ff2:	4a23      	ldr	r2, [pc, #140]	@ (90003080 <BSP_SDRAM_Init+0xb0>)
90002ff4:	4413      	add	r3, r2
90002ff6:	4618      	mov	r0, r3
90002ff8:	f000 f892 	bl	90003120 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002ffc:	687b      	ldr	r3, [r7, #4]
90002ffe:	2234      	movs	r2, #52	@ 0x34
90003000:	fb02 f303 	mul.w	r3, r2, r3
90003004:	4a1e      	ldr	r2, [pc, #120]	@ (90003080 <BSP_SDRAM_Init+0xb0>)
90003006:	4413      	add	r3, r2
90003008:	2210      	movs	r2, #16
9000300a:	2104      	movs	r1, #4
9000300c:	4618      	mov	r0, r3
9000300e:	f000 f83b 	bl	90003088 <MX_SDRAM_BANK2_Init>
90003012:	4603      	mov	r3, r0
90003014:	2b00      	cmp	r3, #0
90003016:	d003      	beq.n	90003020 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90003018:	f04f 33ff 	mov.w	r3, #4294967295
9000301c:	60fb      	str	r3, [r7, #12]
9000301e:	e029      	b.n	90003074 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90003020:	4b18      	ldr	r3, [pc, #96]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
90003022:	2208      	movs	r2, #8
90003024:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90003026:	4b17      	ldr	r3, [pc, #92]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
90003028:	2203      	movs	r2, #3
9000302a:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
9000302c:	4b15      	ldr	r3, [pc, #84]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
9000302e:	f240 6203 	movw	r2, #1539	@ 0x603
90003032:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90003034:	4b13      	ldr	r3, [pc, #76]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
90003036:	2200      	movs	r2, #0
90003038:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
9000303a:	4b12      	ldr	r3, [pc, #72]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
9000303c:	2200      	movs	r2, #0
9000303e:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90003040:	4b10      	ldr	r3, [pc, #64]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
90003042:	2230      	movs	r2, #48	@ 0x30
90003044:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90003046:	4b0f      	ldr	r3, [pc, #60]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
90003048:	2200      	movs	r2, #0
9000304a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
9000304c:	4b0d      	ldr	r3, [pc, #52]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
9000304e:	f44f 7200 	mov.w	r2, #512	@ 0x200
90003052:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90003054:	687b      	ldr	r3, [r7, #4]
90003056:	2234      	movs	r2, #52	@ 0x34
90003058:	fb02 f303 	mul.w	r3, r2, r3
9000305c:	4a08      	ldr	r2, [pc, #32]	@ (90003080 <BSP_SDRAM_Init+0xb0>)
9000305e:	4413      	add	r3, r2
90003060:	4908      	ldr	r1, [pc, #32]	@ (90003084 <BSP_SDRAM_Init+0xb4>)
90003062:	4618      	mov	r0, r3
90003064:	f7fe fc3d 	bl	900018e2 <MT48LC4M32B2_Init>
90003068:	4603      	mov	r3, r0
9000306a:	2b00      	cmp	r3, #0
9000306c:	d002      	beq.n	90003074 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
9000306e:	f06f 0304 	mvn.w	r3, #4
90003072:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90003074:	68fb      	ldr	r3, [r7, #12]
}
90003076:	4618      	mov	r0, r3
90003078:	3710      	adds	r7, #16
9000307a:	46bd      	mov	sp, r7
9000307c:	bd80      	pop	{r7, pc}
9000307e:	bf00      	nop
90003080:	20001264 	.word	0x20001264
90003084:	20001298 	.word	0x20001298

90003088 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90003088:	b580      	push	{r7, lr}
9000308a:	b08c      	sub	sp, #48	@ 0x30
9000308c:	af00      	add	r7, sp, #0
9000308e:	60f8      	str	r0, [r7, #12]
90003090:	60b9      	str	r1, [r7, #8]
90003092:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90003094:	4b20      	ldr	r3, [pc, #128]	@ (90003118 <MX_SDRAM_BANK2_Init+0x90>)
90003096:	4a21      	ldr	r2, [pc, #132]	@ (9000311c <MX_SDRAM_BANK2_Init+0x94>)
90003098:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
9000309a:	68fb      	ldr	r3, [r7, #12]
9000309c:	2201      	movs	r2, #1
9000309e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900030a0:	68fb      	ldr	r3, [r7, #12]
900030a2:	2200      	movs	r2, #0
900030a4:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
900030a6:	68fb      	ldr	r3, [r7, #12]
900030a8:	68ba      	ldr	r2, [r7, #8]
900030aa:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
900030ac:	68fb      	ldr	r3, [r7, #12]
900030ae:	687a      	ldr	r2, [r7, #4]
900030b0:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900030b2:	4b19      	ldr	r3, [pc, #100]	@ (90003118 <MX_SDRAM_BANK2_Init+0x90>)
900030b4:	2240      	movs	r2, #64	@ 0x40
900030b6:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900030b8:	68fb      	ldr	r3, [r7, #12]
900030ba:	f44f 72c0 	mov.w	r2, #384	@ 0x180
900030be:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900030c0:	68fb      	ldr	r3, [r7, #12]
900030c2:	2200      	movs	r2, #0
900030c4:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
900030c6:	68fb      	ldr	r3, [r7, #12]
900030c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
900030cc:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900030ce:	68fb      	ldr	r3, [r7, #12]
900030d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
900030d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
900030d6:	68fb      	ldr	r3, [r7, #12]
900030d8:	2200      	movs	r2, #0
900030da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
900030dc:	2302      	movs	r3, #2
900030de:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
900030e0:	2307      	movs	r3, #7
900030e2:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
900030e4:	2304      	movs	r3, #4
900030e6:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
900030e8:	2307      	movs	r3, #7
900030ea:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
900030ec:	2302      	movs	r3, #2
900030ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
900030f0:	2302      	movs	r3, #2
900030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
900030f4:	2302      	movs	r3, #2
900030f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900030f8:	f107 0314 	add.w	r3, r7, #20
900030fc:	4619      	mov	r1, r3
900030fe:	68f8      	ldr	r0, [r7, #12]
90003100:	f006 fcce 	bl	90009aa0 <HAL_SDRAM_Init>
90003104:	4603      	mov	r3, r0
90003106:	2b00      	cmp	r3, #0
90003108:	d001      	beq.n	9000310e <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
9000310a:	2301      	movs	r3, #1
9000310c:	e000      	b.n	90003110 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
9000310e:	2300      	movs	r3, #0
}
90003110:	4618      	mov	r0, r3
90003112:	3730      	adds	r7, #48	@ 0x30
90003114:	46bd      	mov	sp, r7
90003116:	bd80      	pop	{r7, pc}
90003118:	20001264 	.word	0x20001264
9000311c:	52004140 	.word	0x52004140

90003120 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90003120:	b580      	push	{r7, lr}
90003122:	b08e      	sub	sp, #56	@ 0x38
90003124:	af00      	add	r7, sp, #0
90003126:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90003128:	4b73      	ldr	r3, [pc, #460]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
9000312a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
9000312e:	4a72      	ldr	r2, [pc, #456]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
90003130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90003134:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90003138:	4b6f      	ldr	r3, [pc, #444]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
9000313a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
9000313e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90003142:	623b      	str	r3, [r7, #32]
90003144:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90003146:	4b6c      	ldr	r3, [pc, #432]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
90003148:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
9000314c:	4a6a      	ldr	r2, [pc, #424]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
9000314e:	f043 0301 	orr.w	r3, r3, #1
90003152:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90003156:	4b68      	ldr	r3, [pc, #416]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
90003158:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
9000315c:	f003 0301 	and.w	r3, r3, #1
90003160:	61fb      	str	r3, [r7, #28]
90003162:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90003164:	4b64      	ldr	r3, [pc, #400]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
90003166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000316a:	4a63      	ldr	r2, [pc, #396]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
9000316c:	f043 0308 	orr.w	r3, r3, #8
90003170:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003174:	4b60      	ldr	r3, [pc, #384]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
90003176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000317a:	f003 0308 	and.w	r3, r3, #8
9000317e:	61bb      	str	r3, [r7, #24]
90003180:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90003182:	4b5d      	ldr	r3, [pc, #372]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
90003184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003188:	4a5b      	ldr	r2, [pc, #364]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
9000318a:	f043 0310 	orr.w	r3, r3, #16
9000318e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90003192:	4b59      	ldr	r3, [pc, #356]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
90003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90003198:	f003 0310 	and.w	r3, r3, #16
9000319c:	617b      	str	r3, [r7, #20]
9000319e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900031a0:	4b55      	ldr	r3, [pc, #340]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031a6:	4a54      	ldr	r2, [pc, #336]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031a8:	f043 0320 	orr.w	r3, r3, #32
900031ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031b0:	4b51      	ldr	r3, [pc, #324]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031b6:	f003 0320 	and.w	r3, r3, #32
900031ba:	613b      	str	r3, [r7, #16]
900031bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900031be:	4b4e      	ldr	r3, [pc, #312]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031c4:	4a4c      	ldr	r2, [pc, #304]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
900031ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031ce:	4b4a      	ldr	r3, [pc, #296]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900031d8:	60fb      	str	r3, [r7, #12]
900031da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900031dc:	4b46      	ldr	r3, [pc, #280]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031e2:	4a45      	ldr	r2, [pc, #276]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900031e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900031ec:	4b42      	ldr	r3, [pc, #264]	@ (900032f8 <SDRAM_MspInit+0x1d8>)
900031ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900031f6:	60bb      	str	r3, [r7, #8]
900031f8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900031fa:	2302      	movs	r3, #2
900031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
900031fe:	2301      	movs	r3, #1
90003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90003202:	2303      	movs	r3, #3
90003204:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90003206:	230c      	movs	r3, #12
90003208:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000320a:	f24c 7303 	movw	r3, #50947	@ 0xc703
9000320e:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90003210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003214:	4619      	mov	r1, r3
90003216:	4839      	ldr	r0, [pc, #228]	@ (900032fc <SDRAM_MspInit+0x1dc>)
90003218:	f000 fe32 	bl	90003e80 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000321c:	f64f 7383 	movw	r3, #65411	@ 0xff83
90003220:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90003222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003226:	4619      	mov	r1, r3
90003228:	4835      	ldr	r0, [pc, #212]	@ (90003300 <SDRAM_MspInit+0x1e0>)
9000322a:	f000 fe29 	bl	90003e80 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000322e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90003232:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90003234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003238:	4619      	mov	r1, r3
9000323a:	4832      	ldr	r0, [pc, #200]	@ (90003304 <SDRAM_MspInit+0x1e4>)
9000323c:	f000 fe20 	bl	90003e80 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90003240:	f248 1333 	movw	r3, #33075	@ 0x8133
90003244:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90003246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000324a:	4619      	mov	r1, r3
9000324c:	482e      	ldr	r0, [pc, #184]	@ (90003308 <SDRAM_MspInit+0x1e8>)
9000324e:	f000 fe17 	bl	90003e80 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90003252:	23e0      	movs	r3, #224	@ 0xe0
90003254:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90003256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000325a:	4619      	mov	r1, r3
9000325c:	482b      	ldr	r0, [pc, #172]	@ (9000330c <SDRAM_MspInit+0x1ec>)
9000325e:	f000 fe0f 	bl	90003e80 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90003262:	4b2b      	ldr	r3, [pc, #172]	@ (90003310 <SDRAM_MspInit+0x1f0>)
90003264:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90003268:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
9000326a:	4b29      	ldr	r3, [pc, #164]	@ (90003310 <SDRAM_MspInit+0x1f0>)
9000326c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90003270:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90003272:	4b27      	ldr	r3, [pc, #156]	@ (90003310 <SDRAM_MspInit+0x1f0>)
90003274:	2280      	movs	r2, #128	@ 0x80
90003276:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90003278:	4b25      	ldr	r3, [pc, #148]	@ (90003310 <SDRAM_MspInit+0x1f0>)
9000327a:	2200      	movs	r2, #0
9000327c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
9000327e:	4b24      	ldr	r3, [pc, #144]	@ (90003310 <SDRAM_MspInit+0x1f0>)
90003280:	f240 2202 	movw	r2, #514	@ 0x202
90003284:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90003286:	4b22      	ldr	r3, [pc, #136]	@ (90003310 <SDRAM_MspInit+0x1f0>)
90003288:	f640 0208 	movw	r2, #2056	@ 0x808
9000328c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000328e:	4b20      	ldr	r3, [pc, #128]	@ (90003310 <SDRAM_MspInit+0x1f0>)
90003290:	2220      	movs	r2, #32
90003292:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90003294:	4b1e      	ldr	r3, [pc, #120]	@ (90003310 <SDRAM_MspInit+0x1f0>)
90003296:	2280      	movs	r2, #128	@ 0x80
90003298:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000329a:	4b1d      	ldr	r3, [pc, #116]	@ (90003310 <SDRAM_MspInit+0x1f0>)
9000329c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900032a0:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
900032a2:	4b1b      	ldr	r3, [pc, #108]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032a4:	2200      	movs	r2, #0
900032a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
900032a8:	4b19      	ldr	r3, [pc, #100]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032aa:	2200      	movs	r2, #0
900032ac:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
900032ae:	4b18      	ldr	r3, [pc, #96]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032b0:	2280      	movs	r2, #128	@ 0x80
900032b2:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
900032b4:	4b16      	ldr	r3, [pc, #88]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032b6:	2200      	movs	r2, #0
900032b8:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
900032ba:	4b15      	ldr	r3, [pc, #84]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032bc:	2200      	movs	r2, #0
900032be:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900032c0:	4b13      	ldr	r3, [pc, #76]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032c2:	4a14      	ldr	r2, [pc, #80]	@ (90003314 <SDRAM_MspInit+0x1f4>)
900032c4:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900032c6:	4b14      	ldr	r3, [pc, #80]	@ (90003318 <SDRAM_MspInit+0x1f8>)
900032c8:	4a11      	ldr	r2, [pc, #68]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032ca:	631a      	str	r2, [r3, #48]	@ 0x30
900032cc:	4b10      	ldr	r3, [pc, #64]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032ce:	4a12      	ldr	r2, [pc, #72]	@ (90003318 <SDRAM_MspInit+0x1f8>)
900032d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
900032d2:	480f      	ldr	r0, [pc, #60]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032d4:	f003 fce2 	bl	90006c9c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
900032d8:	480d      	ldr	r0, [pc, #52]	@ (90003310 <SDRAM_MspInit+0x1f0>)
900032da:	f003 fc93 	bl	90006c04 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
900032de:	2200      	movs	r2, #0
900032e0:	210f      	movs	r1, #15
900032e2:	207a      	movs	r0, #122	@ 0x7a
900032e4:	f000 fa49 	bl	9000377a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
900032e8:	207a      	movs	r0, #122	@ 0x7a
900032ea:	f000 fa60 	bl	900037ae <HAL_NVIC_EnableIRQ>
}
900032ee:	bf00      	nop
900032f0:	3738      	adds	r7, #56	@ 0x38
900032f2:	46bd      	mov	sp, r7
900032f4:	bd80      	pop	{r7, pc}
900032f6:	bf00      	nop
900032f8:	58024400 	.word	0x58024400
900032fc:	58020c00 	.word	0x58020c00
90003300:	58021000 	.word	0x58021000
90003304:	58021400 	.word	0x58021400
90003308:	58021800 	.word	0x58021800
9000330c:	58021c00 	.word	0x58021c00
90003310:	200012b8 	.word	0x200012b8
90003314:	52000040 	.word	0x52000040
90003318:	20001264 	.word	0x20001264

9000331c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
9000331c:	b480      	push	{r7}
9000331e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90003320:	4b29      	ldr	r3, [pc, #164]	@ (900033c8 <SystemInit+0xac>)
90003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90003326:	4a28      	ldr	r2, [pc, #160]	@ (900033c8 <SystemInit+0xac>)
90003328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
9000332c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90003330:	4b26      	ldr	r3, [pc, #152]	@ (900033cc <SystemInit+0xb0>)
90003332:	681b      	ldr	r3, [r3, #0]
90003334:	4a25      	ldr	r2, [pc, #148]	@ (900033cc <SystemInit+0xb0>)
90003336:	f043 0301 	orr.w	r3, r3, #1
9000333a:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
9000333c:	4b23      	ldr	r3, [pc, #140]	@ (900033cc <SystemInit+0xb0>)
9000333e:	2200      	movs	r2, #0
90003340:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90003342:	4b22      	ldr	r3, [pc, #136]	@ (900033cc <SystemInit+0xb0>)
90003344:	681a      	ldr	r2, [r3, #0]
90003346:	4921      	ldr	r1, [pc, #132]	@ (900033cc <SystemInit+0xb0>)
90003348:	4b21      	ldr	r3, [pc, #132]	@ (900033d0 <SystemInit+0xb4>)
9000334a:	4013      	ands	r3, r2
9000334c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
9000334e:	4b1f      	ldr	r3, [pc, #124]	@ (900033cc <SystemInit+0xb0>)
90003350:	2200      	movs	r2, #0
90003352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003354:	4b1d      	ldr	r3, [pc, #116]	@ (900033cc <SystemInit+0xb0>)
90003356:	2200      	movs	r2, #0
90003358:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
9000335a:	4b1c      	ldr	r3, [pc, #112]	@ (900033cc <SystemInit+0xb0>)
9000335c:	2200      	movs	r2, #0
9000335e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90003360:	4b1a      	ldr	r3, [pc, #104]	@ (900033cc <SystemInit+0xb0>)
90003362:	2200      	movs	r2, #0
90003364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90003366:	4b19      	ldr	r3, [pc, #100]	@ (900033cc <SystemInit+0xb0>)
90003368:	2200      	movs	r2, #0
9000336a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
9000336c:	4b17      	ldr	r3, [pc, #92]	@ (900033cc <SystemInit+0xb0>)
9000336e:	2200      	movs	r2, #0
90003370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90003372:	4b16      	ldr	r3, [pc, #88]	@ (900033cc <SystemInit+0xb0>)
90003374:	2200      	movs	r2, #0
90003376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90003378:	4b14      	ldr	r3, [pc, #80]	@ (900033cc <SystemInit+0xb0>)
9000337a:	2200      	movs	r2, #0
9000337c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
9000337e:	4b13      	ldr	r3, [pc, #76]	@ (900033cc <SystemInit+0xb0>)
90003380:	2200      	movs	r2, #0
90003382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90003384:	4b11      	ldr	r3, [pc, #68]	@ (900033cc <SystemInit+0xb0>)
90003386:	2200      	movs	r2, #0
90003388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
9000338a:	4b10      	ldr	r3, [pc, #64]	@ (900033cc <SystemInit+0xb0>)
9000338c:	2200      	movs	r2, #0
9000338e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90003390:	4b0e      	ldr	r3, [pc, #56]	@ (900033cc <SystemInit+0xb0>)
90003392:	681b      	ldr	r3, [r3, #0]
90003394:	4a0d      	ldr	r2, [pc, #52]	@ (900033cc <SystemInit+0xb0>)
90003396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
9000339a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
9000339c:	4b0b      	ldr	r3, [pc, #44]	@ (900033cc <SystemInit+0xb0>)
9000339e:	2200      	movs	r2, #0
900033a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900033a2:	4b0c      	ldr	r3, [pc, #48]	@ (900033d4 <SystemInit+0xb8>)
900033a4:	681a      	ldr	r2, [r3, #0]
900033a6:	4b0c      	ldr	r3, [pc, #48]	@ (900033d8 <SystemInit+0xbc>)
900033a8:	4013      	ands	r3, r2
900033aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900033ae:	d202      	bcs.n	900033b6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
900033b0:	4b0a      	ldr	r3, [pc, #40]	@ (900033dc <SystemInit+0xc0>)
900033b2:	2201      	movs	r2, #1
900033b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
900033b6:	4b04      	ldr	r3, [pc, #16]	@ (900033c8 <SystemInit+0xac>)
900033b8:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
900033bc:	609a      	str	r2, [r3, #8]
#endif  


}
900033be:	bf00      	nop
900033c0:	46bd      	mov	sp, r7
900033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900033c6:	4770      	bx	lr
900033c8:	e000ed00 	.word	0xe000ed00
900033cc:	58024400 	.word	0x58024400
900033d0:	eaf6ed7f 	.word	0xeaf6ed7f
900033d4:	5c001000 	.word	0x5c001000
900033d8:	ffff0000 	.word	0xffff0000
900033dc:	51008108 	.word	0x51008108

900033e0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
900033e0:	b480      	push	{r7}
900033e2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
900033e4:	4b09      	ldr	r3, [pc, #36]	@ (9000340c <ExitRun0Mode+0x2c>)
900033e6:	68db      	ldr	r3, [r3, #12]
900033e8:	4a08      	ldr	r2, [pc, #32]	@ (9000340c <ExitRun0Mode+0x2c>)
900033ea:	f043 0302 	orr.w	r3, r3, #2
900033ee:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
900033f0:	bf00      	nop
900033f2:	4b06      	ldr	r3, [pc, #24]	@ (9000340c <ExitRun0Mode+0x2c>)
900033f4:	685b      	ldr	r3, [r3, #4]
900033f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900033fa:	2b00      	cmp	r3, #0
900033fc:	d0f9      	beq.n	900033f2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
900033fe:	bf00      	nop
90003400:	bf00      	nop
90003402:	46bd      	mov	sp, r7
90003404:	f85d 7b04 	ldr.w	r7, [sp], #4
90003408:	4770      	bx	lr
9000340a:	bf00      	nop
9000340c:	58024800 	.word	0x58024800

90003410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90003410:	b580      	push	{r7, lr}
90003412:	b082      	sub	sp, #8
90003414:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90003416:	2003      	movs	r0, #3
90003418:	f000 f9a4 	bl	90003764 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000341c:	f004 fb3e 	bl	90007a9c <HAL_RCC_GetSysClockFreq>
90003420:	4602      	mov	r2, r0
90003422:	4b15      	ldr	r3, [pc, #84]	@ (90003478 <HAL_Init+0x68>)
90003424:	699b      	ldr	r3, [r3, #24]
90003426:	0a1b      	lsrs	r3, r3, #8
90003428:	f003 030f 	and.w	r3, r3, #15
9000342c:	4913      	ldr	r1, [pc, #76]	@ (9000347c <HAL_Init+0x6c>)
9000342e:	5ccb      	ldrb	r3, [r1, r3]
90003430:	f003 031f 	and.w	r3, r3, #31
90003434:	fa22 f303 	lsr.w	r3, r2, r3
90003438:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000343a:	4b0f      	ldr	r3, [pc, #60]	@ (90003478 <HAL_Init+0x68>)
9000343c:	699b      	ldr	r3, [r3, #24]
9000343e:	f003 030f 	and.w	r3, r3, #15
90003442:	4a0e      	ldr	r2, [pc, #56]	@ (9000347c <HAL_Init+0x6c>)
90003444:	5cd3      	ldrb	r3, [r2, r3]
90003446:	f003 031f 	and.w	r3, r3, #31
9000344a:	687a      	ldr	r2, [r7, #4]
9000344c:	fa22 f303 	lsr.w	r3, r2, r3
90003450:	4a0b      	ldr	r2, [pc, #44]	@ (90003480 <HAL_Init+0x70>)
90003452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003454:	4a0b      	ldr	r2, [pc, #44]	@ (90003484 <HAL_Init+0x74>)
90003456:	687b      	ldr	r3, [r7, #4]
90003458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000345a:	200f      	movs	r0, #15
9000345c:	f000 f81c 	bl	90003498 <HAL_InitTick>
90003460:	4603      	mov	r3, r0
90003462:	2b00      	cmp	r3, #0
90003464:	d001      	beq.n	9000346a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90003466:	2301      	movs	r3, #1
90003468:	e002      	b.n	90003470 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
9000346a:	f000 f80d 	bl	90003488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000346e:	2300      	movs	r3, #0
}
90003470:	4618      	mov	r0, r3
90003472:	3708      	adds	r7, #8
90003474:	46bd      	mov	sp, r7
90003476:	bd80      	pop	{r7, pc}
90003478:	58024400 	.word	0x58024400
9000347c:	9000e580 	.word	0x9000e580
90003480:	20000004 	.word	0x20000004
90003484:	20000000 	.word	0x20000000

90003488 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90003488:	b480      	push	{r7}
9000348a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
9000348c:	bf00      	nop
9000348e:	46bd      	mov	sp, r7
90003490:	f85d 7b04 	ldr.w	r7, [sp], #4
90003494:	4770      	bx	lr
	...

90003498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90003498:	b580      	push	{r7, lr}
9000349a:	b082      	sub	sp, #8
9000349c:	af00      	add	r7, sp, #0
9000349e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
900034a0:	4b15      	ldr	r3, [pc, #84]	@ (900034f8 <HAL_InitTick+0x60>)
900034a2:	781b      	ldrb	r3, [r3, #0]
900034a4:	2b00      	cmp	r3, #0
900034a6:	d101      	bne.n	900034ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
900034a8:	2301      	movs	r3, #1
900034aa:	e021      	b.n	900034f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
900034ac:	4b13      	ldr	r3, [pc, #76]	@ (900034fc <HAL_InitTick+0x64>)
900034ae:	681a      	ldr	r2, [r3, #0]
900034b0:	4b11      	ldr	r3, [pc, #68]	@ (900034f8 <HAL_InitTick+0x60>)
900034b2:	781b      	ldrb	r3, [r3, #0]
900034b4:	4619      	mov	r1, r3
900034b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
900034ba:	fbb3 f3f1 	udiv	r3, r3, r1
900034be:	fbb2 f3f3 	udiv	r3, r2, r3
900034c2:	4618      	mov	r0, r3
900034c4:	f000 f981 	bl	900037ca <HAL_SYSTICK_Config>
900034c8:	4603      	mov	r3, r0
900034ca:	2b00      	cmp	r3, #0
900034cc:	d001      	beq.n	900034d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
900034ce:	2301      	movs	r3, #1
900034d0:	e00e      	b.n	900034f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900034d2:	687b      	ldr	r3, [r7, #4]
900034d4:	2b0f      	cmp	r3, #15
900034d6:	d80a      	bhi.n	900034ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
900034d8:	2200      	movs	r2, #0
900034da:	6879      	ldr	r1, [r7, #4]
900034dc:	f04f 30ff 	mov.w	r0, #4294967295
900034e0:	f000 f94b 	bl	9000377a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
900034e4:	4a06      	ldr	r2, [pc, #24]	@ (90003500 <HAL_InitTick+0x68>)
900034e6:	687b      	ldr	r3, [r7, #4]
900034e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
900034ea:	2300      	movs	r3, #0
900034ec:	e000      	b.n	900034f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
900034ee:	2301      	movs	r3, #1
}
900034f0:	4618      	mov	r0, r3
900034f2:	3708      	adds	r7, #8
900034f4:	46bd      	mov	sp, r7
900034f6:	bd80      	pop	{r7, pc}
900034f8:	2000000c 	.word	0x2000000c
900034fc:	20000000 	.word	0x20000000
90003500:	20000008 	.word	0x20000008

90003504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003504:	b480      	push	{r7}
90003506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90003508:	4b06      	ldr	r3, [pc, #24]	@ (90003524 <HAL_IncTick+0x20>)
9000350a:	781b      	ldrb	r3, [r3, #0]
9000350c:	461a      	mov	r2, r3
9000350e:	4b06      	ldr	r3, [pc, #24]	@ (90003528 <HAL_IncTick+0x24>)
90003510:	681b      	ldr	r3, [r3, #0]
90003512:	4413      	add	r3, r2
90003514:	4a04      	ldr	r2, [pc, #16]	@ (90003528 <HAL_IncTick+0x24>)
90003516:	6013      	str	r3, [r2, #0]
}
90003518:	bf00      	nop
9000351a:	46bd      	mov	sp, r7
9000351c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003520:	4770      	bx	lr
90003522:	bf00      	nop
90003524:	2000000c 	.word	0x2000000c
90003528:	20001324 	.word	0x20001324

9000352c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
9000352c:	b480      	push	{r7}
9000352e:	af00      	add	r7, sp, #0
  return uwTick;
90003530:	4b03      	ldr	r3, [pc, #12]	@ (90003540 <HAL_GetTick+0x14>)
90003532:	681b      	ldr	r3, [r3, #0]
}
90003534:	4618      	mov	r0, r3
90003536:	46bd      	mov	sp, r7
90003538:	f85d 7b04 	ldr.w	r7, [sp], #4
9000353c:	4770      	bx	lr
9000353e:	bf00      	nop
90003540:	20001324 	.word	0x20001324

90003544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90003544:	b580      	push	{r7, lr}
90003546:	b084      	sub	sp, #16
90003548:	af00      	add	r7, sp, #0
9000354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
9000354c:	f7ff ffee 	bl	9000352c <HAL_GetTick>
90003550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90003552:	687b      	ldr	r3, [r7, #4]
90003554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90003556:	68fb      	ldr	r3, [r7, #12]
90003558:	f1b3 3fff 	cmp.w	r3, #4294967295
9000355c:	d005      	beq.n	9000356a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
9000355e:	4b0a      	ldr	r3, [pc, #40]	@ (90003588 <HAL_Delay+0x44>)
90003560:	781b      	ldrb	r3, [r3, #0]
90003562:	461a      	mov	r2, r3
90003564:	68fb      	ldr	r3, [r7, #12]
90003566:	4413      	add	r3, r2
90003568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
9000356a:	bf00      	nop
9000356c:	f7ff ffde 	bl	9000352c <HAL_GetTick>
90003570:	4602      	mov	r2, r0
90003572:	68bb      	ldr	r3, [r7, #8]
90003574:	1ad3      	subs	r3, r2, r3
90003576:	68fa      	ldr	r2, [r7, #12]
90003578:	429a      	cmp	r2, r3
9000357a:	d8f7      	bhi.n	9000356c <HAL_Delay+0x28>
  {
  }
}
9000357c:	bf00      	nop
9000357e:	bf00      	nop
90003580:	3710      	adds	r7, #16
90003582:	46bd      	mov	sp, r7
90003584:	bd80      	pop	{r7, pc}
90003586:	bf00      	nop
90003588:	2000000c 	.word	0x2000000c

9000358c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
9000358c:	b480      	push	{r7}
9000358e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003590:	4b03      	ldr	r3, [pc, #12]	@ (900035a0 <HAL_GetREVID+0x14>)
90003592:	681b      	ldr	r3, [r3, #0]
90003594:	0c1b      	lsrs	r3, r3, #16
}
90003596:	4618      	mov	r0, r3
90003598:	46bd      	mov	sp, r7
9000359a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000359e:	4770      	bx	lr
900035a0:	5c001000 	.word	0x5c001000

900035a4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
900035a4:	b480      	push	{r7}
900035a6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
900035a8:	4b05      	ldr	r3, [pc, #20]	@ (900035c0 <HAL_EnableCompensationCell+0x1c>)
900035aa:	6a1b      	ldr	r3, [r3, #32]
900035ac:	4a04      	ldr	r2, [pc, #16]	@ (900035c0 <HAL_EnableCompensationCell+0x1c>)
900035ae:	f043 0301 	orr.w	r3, r3, #1
900035b2:	6213      	str	r3, [r2, #32]
}
900035b4:	bf00      	nop
900035b6:	46bd      	mov	sp, r7
900035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900035bc:	4770      	bx	lr
900035be:	bf00      	nop
900035c0:	58000400 	.word	0x58000400

900035c4 <__NVIC_SetPriorityGrouping>:
{
900035c4:	b480      	push	{r7}
900035c6:	b085      	sub	sp, #20
900035c8:	af00      	add	r7, sp, #0
900035ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900035cc:	687b      	ldr	r3, [r7, #4]
900035ce:	f003 0307 	and.w	r3, r3, #7
900035d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900035d4:	4b0b      	ldr	r3, [pc, #44]	@ (90003604 <__NVIC_SetPriorityGrouping+0x40>)
900035d6:	68db      	ldr	r3, [r3, #12]
900035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900035da:	68ba      	ldr	r2, [r7, #8]
900035dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
900035e0:	4013      	ands	r3, r2
900035e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900035e4:	68fb      	ldr	r3, [r7, #12]
900035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900035e8:	68bb      	ldr	r3, [r7, #8]
900035ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900035ec:	4b06      	ldr	r3, [pc, #24]	@ (90003608 <__NVIC_SetPriorityGrouping+0x44>)
900035ee:	4313      	orrs	r3, r2
900035f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900035f2:	4a04      	ldr	r2, [pc, #16]	@ (90003604 <__NVIC_SetPriorityGrouping+0x40>)
900035f4:	68bb      	ldr	r3, [r7, #8]
900035f6:	60d3      	str	r3, [r2, #12]
}
900035f8:	bf00      	nop
900035fa:	3714      	adds	r7, #20
900035fc:	46bd      	mov	sp, r7
900035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90003602:	4770      	bx	lr
90003604:	e000ed00 	.word	0xe000ed00
90003608:	05fa0000 	.word	0x05fa0000

9000360c <__NVIC_GetPriorityGrouping>:
{
9000360c:	b480      	push	{r7}
9000360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003610:	4b04      	ldr	r3, [pc, #16]	@ (90003624 <__NVIC_GetPriorityGrouping+0x18>)
90003612:	68db      	ldr	r3, [r3, #12]
90003614:	0a1b      	lsrs	r3, r3, #8
90003616:	f003 0307 	and.w	r3, r3, #7
}
9000361a:	4618      	mov	r0, r3
9000361c:	46bd      	mov	sp, r7
9000361e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003622:	4770      	bx	lr
90003624:	e000ed00 	.word	0xe000ed00

90003628 <__NVIC_EnableIRQ>:
{
90003628:	b480      	push	{r7}
9000362a:	b083      	sub	sp, #12
9000362c:	af00      	add	r7, sp, #0
9000362e:	4603      	mov	r3, r0
90003630:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003636:	2b00      	cmp	r3, #0
90003638:	db0b      	blt.n	90003652 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000363a:	88fb      	ldrh	r3, [r7, #6]
9000363c:	f003 021f 	and.w	r2, r3, #31
90003640:	4907      	ldr	r1, [pc, #28]	@ (90003660 <__NVIC_EnableIRQ+0x38>)
90003642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003646:	095b      	lsrs	r3, r3, #5
90003648:	2001      	movs	r0, #1
9000364a:	fa00 f202 	lsl.w	r2, r0, r2
9000364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90003652:	bf00      	nop
90003654:	370c      	adds	r7, #12
90003656:	46bd      	mov	sp, r7
90003658:	f85d 7b04 	ldr.w	r7, [sp], #4
9000365c:	4770      	bx	lr
9000365e:	bf00      	nop
90003660:	e000e100 	.word	0xe000e100

90003664 <__NVIC_SetPriority>:
{
90003664:	b480      	push	{r7}
90003666:	b083      	sub	sp, #12
90003668:	af00      	add	r7, sp, #0
9000366a:	4603      	mov	r3, r0
9000366c:	6039      	str	r1, [r7, #0]
9000366e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003674:	2b00      	cmp	r3, #0
90003676:	db0a      	blt.n	9000368e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003678:	683b      	ldr	r3, [r7, #0]
9000367a:	b2da      	uxtb	r2, r3
9000367c:	490c      	ldr	r1, [pc, #48]	@ (900036b0 <__NVIC_SetPriority+0x4c>)
9000367e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003682:	0112      	lsls	r2, r2, #4
90003684:	b2d2      	uxtb	r2, r2
90003686:	440b      	add	r3, r1
90003688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
9000368c:	e00a      	b.n	900036a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000368e:	683b      	ldr	r3, [r7, #0]
90003690:	b2da      	uxtb	r2, r3
90003692:	4908      	ldr	r1, [pc, #32]	@ (900036b4 <__NVIC_SetPriority+0x50>)
90003694:	88fb      	ldrh	r3, [r7, #6]
90003696:	f003 030f 	and.w	r3, r3, #15
9000369a:	3b04      	subs	r3, #4
9000369c:	0112      	lsls	r2, r2, #4
9000369e:	b2d2      	uxtb	r2, r2
900036a0:	440b      	add	r3, r1
900036a2:	761a      	strb	r2, [r3, #24]
}
900036a4:	bf00      	nop
900036a6:	370c      	adds	r7, #12
900036a8:	46bd      	mov	sp, r7
900036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900036ae:	4770      	bx	lr
900036b0:	e000e100 	.word	0xe000e100
900036b4:	e000ed00 	.word	0xe000ed00

900036b8 <NVIC_EncodePriority>:
{
900036b8:	b480      	push	{r7}
900036ba:	b089      	sub	sp, #36	@ 0x24
900036bc:	af00      	add	r7, sp, #0
900036be:	60f8      	str	r0, [r7, #12]
900036c0:	60b9      	str	r1, [r7, #8]
900036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900036c4:	68fb      	ldr	r3, [r7, #12]
900036c6:	f003 0307 	and.w	r3, r3, #7
900036ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900036cc:	69fb      	ldr	r3, [r7, #28]
900036ce:	f1c3 0307 	rsb	r3, r3, #7
900036d2:	2b04      	cmp	r3, #4
900036d4:	bf28      	it	cs
900036d6:	2304      	movcs	r3, #4
900036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900036da:	69fb      	ldr	r3, [r7, #28]
900036dc:	3304      	adds	r3, #4
900036de:	2b06      	cmp	r3, #6
900036e0:	d902      	bls.n	900036e8 <NVIC_EncodePriority+0x30>
900036e2:	69fb      	ldr	r3, [r7, #28]
900036e4:	3b03      	subs	r3, #3
900036e6:	e000      	b.n	900036ea <NVIC_EncodePriority+0x32>
900036e8:	2300      	movs	r3, #0
900036ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900036ec:	f04f 32ff 	mov.w	r2, #4294967295
900036f0:	69bb      	ldr	r3, [r7, #24]
900036f2:	fa02 f303 	lsl.w	r3, r2, r3
900036f6:	43da      	mvns	r2, r3
900036f8:	68bb      	ldr	r3, [r7, #8]
900036fa:	401a      	ands	r2, r3
900036fc:	697b      	ldr	r3, [r7, #20]
900036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003700:	f04f 31ff 	mov.w	r1, #4294967295
90003704:	697b      	ldr	r3, [r7, #20]
90003706:	fa01 f303 	lsl.w	r3, r1, r3
9000370a:	43d9      	mvns	r1, r3
9000370c:	687b      	ldr	r3, [r7, #4]
9000370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003710:	4313      	orrs	r3, r2
}
90003712:	4618      	mov	r0, r3
90003714:	3724      	adds	r7, #36	@ 0x24
90003716:	46bd      	mov	sp, r7
90003718:	f85d 7b04 	ldr.w	r7, [sp], #4
9000371c:	4770      	bx	lr
	...

90003720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003720:	b580      	push	{r7, lr}
90003722:	b082      	sub	sp, #8
90003724:	af00      	add	r7, sp, #0
90003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90003728:	687b      	ldr	r3, [r7, #4]
9000372a:	3b01      	subs	r3, #1
9000372c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003730:	d301      	bcc.n	90003736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003732:	2301      	movs	r3, #1
90003734:	e00f      	b.n	90003756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90003736:	4a0a      	ldr	r2, [pc, #40]	@ (90003760 <SysTick_Config+0x40>)
90003738:	687b      	ldr	r3, [r7, #4]
9000373a:	3b01      	subs	r3, #1
9000373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
9000373e:	210f      	movs	r1, #15
90003740:	f04f 30ff 	mov.w	r0, #4294967295
90003744:	f7ff ff8e 	bl	90003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90003748:	4b05      	ldr	r3, [pc, #20]	@ (90003760 <SysTick_Config+0x40>)
9000374a:	2200      	movs	r2, #0
9000374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
9000374e:	4b04      	ldr	r3, [pc, #16]	@ (90003760 <SysTick_Config+0x40>)
90003750:	2207      	movs	r2, #7
90003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003754:	2300      	movs	r3, #0
}
90003756:	4618      	mov	r0, r3
90003758:	3708      	adds	r7, #8
9000375a:	46bd      	mov	sp, r7
9000375c:	bd80      	pop	{r7, pc}
9000375e:	bf00      	nop
90003760:	e000e010 	.word	0xe000e010

90003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003764:	b580      	push	{r7, lr}
90003766:	b082      	sub	sp, #8
90003768:	af00      	add	r7, sp, #0
9000376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
9000376c:	6878      	ldr	r0, [r7, #4]
9000376e:	f7ff ff29 	bl	900035c4 <__NVIC_SetPriorityGrouping>
}
90003772:	bf00      	nop
90003774:	3708      	adds	r7, #8
90003776:	46bd      	mov	sp, r7
90003778:	bd80      	pop	{r7, pc}

9000377a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000377a:	b580      	push	{r7, lr}
9000377c:	b086      	sub	sp, #24
9000377e:	af00      	add	r7, sp, #0
90003780:	4603      	mov	r3, r0
90003782:	60b9      	str	r1, [r7, #8]
90003784:	607a      	str	r2, [r7, #4]
90003786:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003788:	f7ff ff40 	bl	9000360c <__NVIC_GetPriorityGrouping>
9000378c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
9000378e:	687a      	ldr	r2, [r7, #4]
90003790:	68b9      	ldr	r1, [r7, #8]
90003792:	6978      	ldr	r0, [r7, #20]
90003794:	f7ff ff90 	bl	900036b8 <NVIC_EncodePriority>
90003798:	4602      	mov	r2, r0
9000379a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
9000379e:	4611      	mov	r1, r2
900037a0:	4618      	mov	r0, r3
900037a2:	f7ff ff5f 	bl	90003664 <__NVIC_SetPriority>
}
900037a6:	bf00      	nop
900037a8:	3718      	adds	r7, #24
900037aa:	46bd      	mov	sp, r7
900037ac:	bd80      	pop	{r7, pc}

900037ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900037ae:	b580      	push	{r7, lr}
900037b0:	b082      	sub	sp, #8
900037b2:	af00      	add	r7, sp, #0
900037b4:	4603      	mov	r3, r0
900037b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900037b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900037bc:	4618      	mov	r0, r3
900037be:	f7ff ff33 	bl	90003628 <__NVIC_EnableIRQ>
}
900037c2:	bf00      	nop
900037c4:	3708      	adds	r7, #8
900037c6:	46bd      	mov	sp, r7
900037c8:	bd80      	pop	{r7, pc}

900037ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
900037ca:	b580      	push	{r7, lr}
900037cc:	b082      	sub	sp, #8
900037ce:	af00      	add	r7, sp, #0
900037d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
900037d2:	6878      	ldr	r0, [r7, #4]
900037d4:	f7ff ffa4 	bl	90003720 <SysTick_Config>
900037d8:	4603      	mov	r3, r0
}
900037da:	4618      	mov	r0, r3
900037dc:	3708      	adds	r7, #8
900037de:	46bd      	mov	sp, r7
900037e0:	bd80      	pop	{r7, pc}
	...

900037e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
900037e4:	b480      	push	{r7}
900037e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900037e8:	f3bf 8f5f 	dmb	sy
}
900037ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900037ee:	4b07      	ldr	r3, [pc, #28]	@ (9000380c <HAL_MPU_Disable+0x28>)
900037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900037f2:	4a06      	ldr	r2, [pc, #24]	@ (9000380c <HAL_MPU_Disable+0x28>)
900037f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900037f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900037fa:	4b05      	ldr	r3, [pc, #20]	@ (90003810 <HAL_MPU_Disable+0x2c>)
900037fc:	2200      	movs	r2, #0
900037fe:	605a      	str	r2, [r3, #4]
}
90003800:	bf00      	nop
90003802:	46bd      	mov	sp, r7
90003804:	f85d 7b04 	ldr.w	r7, [sp], #4
90003808:	4770      	bx	lr
9000380a:	bf00      	nop
9000380c:	e000ed00 	.word	0xe000ed00
90003810:	e000ed90 	.word	0xe000ed90

90003814 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003814:	b480      	push	{r7}
90003816:	b083      	sub	sp, #12
90003818:	af00      	add	r7, sp, #0
9000381a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
9000381c:	4a0b      	ldr	r2, [pc, #44]	@ (9000384c <HAL_MPU_Enable+0x38>)
9000381e:	687b      	ldr	r3, [r7, #4]
90003820:	f043 0301 	orr.w	r3, r3, #1
90003824:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90003826:	4b0a      	ldr	r3, [pc, #40]	@ (90003850 <HAL_MPU_Enable+0x3c>)
90003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000382a:	4a09      	ldr	r2, [pc, #36]	@ (90003850 <HAL_MPU_Enable+0x3c>)
9000382c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90003830:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003832:	f3bf 8f4f 	dsb	sy
}
90003836:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90003838:	f3bf 8f6f 	isb	sy
}
9000383c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
9000383e:	bf00      	nop
90003840:	370c      	adds	r7, #12
90003842:	46bd      	mov	sp, r7
90003844:	f85d 7b04 	ldr.w	r7, [sp], #4
90003848:	4770      	bx	lr
9000384a:	bf00      	nop
9000384c:	e000ed90 	.word	0xe000ed90
90003850:	e000ed00 	.word	0xe000ed00

90003854 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003854:	b480      	push	{r7}
90003856:	b083      	sub	sp, #12
90003858:	af00      	add	r7, sp, #0
9000385a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
9000385c:	687b      	ldr	r3, [r7, #4]
9000385e:	785a      	ldrb	r2, [r3, #1]
90003860:	4b1b      	ldr	r3, [pc, #108]	@ (900038d0 <HAL_MPU_ConfigRegion+0x7c>)
90003862:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003864:	4b1a      	ldr	r3, [pc, #104]	@ (900038d0 <HAL_MPU_ConfigRegion+0x7c>)
90003866:	691b      	ldr	r3, [r3, #16]
90003868:	4a19      	ldr	r2, [pc, #100]	@ (900038d0 <HAL_MPU_ConfigRegion+0x7c>)
9000386a:	f023 0301 	bic.w	r3, r3, #1
9000386e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003870:	4a17      	ldr	r2, [pc, #92]	@ (900038d0 <HAL_MPU_ConfigRegion+0x7c>)
90003872:	687b      	ldr	r3, [r7, #4]
90003874:	685b      	ldr	r3, [r3, #4]
90003876:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003878:	687b      	ldr	r3, [r7, #4]
9000387a:	7b1b      	ldrb	r3, [r3, #12]
9000387c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000387e:	687b      	ldr	r3, [r7, #4]
90003880:	7adb      	ldrb	r3, [r3, #11]
90003882:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003884:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003886:	687b      	ldr	r3, [r7, #4]
90003888:	7a9b      	ldrb	r3, [r3, #10]
9000388a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000388c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000388e:	687b      	ldr	r3, [r7, #4]
90003890:	7b5b      	ldrb	r3, [r3, #13]
90003892:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003894:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003896:	687b      	ldr	r3, [r7, #4]
90003898:	7b9b      	ldrb	r3, [r3, #14]
9000389a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000389c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000389e:	687b      	ldr	r3, [r7, #4]
900038a0:	7bdb      	ldrb	r3, [r3, #15]
900038a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900038a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900038a6:	687b      	ldr	r3, [r7, #4]
900038a8:	7a5b      	ldrb	r3, [r3, #9]
900038aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900038ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900038ae:	687b      	ldr	r3, [r7, #4]
900038b0:	7a1b      	ldrb	r3, [r3, #8]
900038b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900038b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
900038b6:	687a      	ldr	r2, [r7, #4]
900038b8:	7812      	ldrb	r2, [r2, #0]
900038ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900038bc:	4a04      	ldr	r2, [pc, #16]	@ (900038d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900038be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900038c0:	6113      	str	r3, [r2, #16]
}
900038c2:	bf00      	nop
900038c4:	370c      	adds	r7, #12
900038c6:	46bd      	mov	sp, r7
900038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900038cc:	4770      	bx	lr
900038ce:	bf00      	nop
900038d0:	e000ed90 	.word	0xe000ed90

900038d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900038d4:	b580      	push	{r7, lr}
900038d6:	b082      	sub	sp, #8
900038d8:	af00      	add	r7, sp, #0
900038da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900038dc:	687b      	ldr	r3, [r7, #4]
900038de:	2b00      	cmp	r3, #0
900038e0:	d101      	bne.n	900038e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
900038e2:	2301      	movs	r3, #1
900038e4:	e04f      	b.n	90003986 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900038e6:	687b      	ldr	r3, [r7, #4]
900038e8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
900038ec:	b2db      	uxtb	r3, r3
900038ee:	2b00      	cmp	r3, #0
900038f0:	d106      	bne.n	90003900 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
900038f2:	687b      	ldr	r3, [r7, #4]
900038f4:	2200      	movs	r2, #0
900038f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900038fa:	6878      	ldr	r0, [r7, #4]
900038fc:	f000 f84e 	bl	9000399c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003900:	687b      	ldr	r3, [r7, #4]
90003902:	2202      	movs	r2, #2
90003904:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90003908:	687b      	ldr	r3, [r7, #4]
9000390a:	681b      	ldr	r3, [r3, #0]
9000390c:	681a      	ldr	r2, [r3, #0]
9000390e:	4b20      	ldr	r3, [pc, #128]	@ (90003990 <HAL_DMA2D_Init+0xbc>)
90003910:	4013      	ands	r3, r2
90003912:	687a      	ldr	r2, [r7, #4]
90003914:	6851      	ldr	r1, [r2, #4]
90003916:	687a      	ldr	r2, [r7, #4]
90003918:	69d2      	ldr	r2, [r2, #28]
9000391a:	4311      	orrs	r1, r2
9000391c:	687a      	ldr	r2, [r7, #4]
9000391e:	6812      	ldr	r2, [r2, #0]
90003920:	430b      	orrs	r3, r1
90003922:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003924:	687b      	ldr	r3, [r7, #4]
90003926:	681b      	ldr	r3, [r3, #0]
90003928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000392a:	4b1a      	ldr	r3, [pc, #104]	@ (90003994 <HAL_DMA2D_Init+0xc0>)
9000392c:	4013      	ands	r3, r2
9000392e:	687a      	ldr	r2, [r7, #4]
90003930:	6891      	ldr	r1, [r2, #8]
90003932:	687a      	ldr	r2, [r7, #4]
90003934:	6992      	ldr	r2, [r2, #24]
90003936:	4311      	orrs	r1, r2
90003938:	687a      	ldr	r2, [r7, #4]
9000393a:	6812      	ldr	r2, [r2, #0]
9000393c:	430b      	orrs	r3, r1
9000393e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003940:	687b      	ldr	r3, [r7, #4]
90003942:	681b      	ldr	r3, [r3, #0]
90003944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
90003946:	4b14      	ldr	r3, [pc, #80]	@ (90003998 <HAL_DMA2D_Init+0xc4>)
90003948:	4013      	ands	r3, r2
9000394a:	687a      	ldr	r2, [r7, #4]
9000394c:	68d1      	ldr	r1, [r2, #12]
9000394e:	687a      	ldr	r2, [r7, #4]
90003950:	6812      	ldr	r2, [r2, #0]
90003952:	430b      	orrs	r3, r1
90003954:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90003956:	687b      	ldr	r3, [r7, #4]
90003958:	681b      	ldr	r3, [r3, #0]
9000395a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000395c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003960:	687b      	ldr	r3, [r7, #4]
90003962:	691b      	ldr	r3, [r3, #16]
90003964:	051a      	lsls	r2, r3, #20
90003966:	687b      	ldr	r3, [r7, #4]
90003968:	695b      	ldr	r3, [r3, #20]
9000396a:	055b      	lsls	r3, r3, #21
9000396c:	431a      	orrs	r2, r3
9000396e:	687b      	ldr	r3, [r7, #4]
90003970:	681b      	ldr	r3, [r3, #0]
90003972:	430a      	orrs	r2, r1
90003974:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003976:	687b      	ldr	r3, [r7, #4]
90003978:	2200      	movs	r2, #0
9000397a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000397c:	687b      	ldr	r3, [r7, #4]
9000397e:	2201      	movs	r2, #1
90003980:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003984:	2300      	movs	r3, #0
}
90003986:	4618      	mov	r0, r3
90003988:	3708      	adds	r7, #8
9000398a:	46bd      	mov	sp, r7
9000398c:	bd80      	pop	{r7, pc}
9000398e:	bf00      	nop
90003990:	fff8ffbf 	.word	0xfff8ffbf
90003994:	fffffef8 	.word	0xfffffef8
90003998:	ffff0000 	.word	0xffff0000

9000399c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
9000399c:	b480      	push	{r7}
9000399e:	b083      	sub	sp, #12
900039a0:	af00      	add	r7, sp, #0
900039a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
900039a4:	bf00      	nop
900039a6:	370c      	adds	r7, #12
900039a8:	46bd      	mov	sp, r7
900039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900039ae:	4770      	bx	lr

900039b0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
900039b0:	b580      	push	{r7, lr}
900039b2:	b086      	sub	sp, #24
900039b4:	af02      	add	r7, sp, #8
900039b6:	60f8      	str	r0, [r7, #12]
900039b8:	60b9      	str	r1, [r7, #8]
900039ba:	607a      	str	r2, [r7, #4]
900039bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
900039be:	68fb      	ldr	r3, [r7, #12]
900039c0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900039c4:	2b01      	cmp	r3, #1
900039c6:	d101      	bne.n	900039cc <HAL_DMA2D_Start+0x1c>
900039c8:	2302      	movs	r3, #2
900039ca:	e018      	b.n	900039fe <HAL_DMA2D_Start+0x4e>
900039cc:	68fb      	ldr	r3, [r7, #12]
900039ce:	2201      	movs	r2, #1
900039d0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900039d4:	68fb      	ldr	r3, [r7, #12]
900039d6:	2202      	movs	r2, #2
900039d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900039dc:	69bb      	ldr	r3, [r7, #24]
900039de:	9300      	str	r3, [sp, #0]
900039e0:	683b      	ldr	r3, [r7, #0]
900039e2:	687a      	ldr	r2, [r7, #4]
900039e4:	68b9      	ldr	r1, [r7, #8]
900039e6:	68f8      	ldr	r0, [r7, #12]
900039e8:	f000 f9a4 	bl	90003d34 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
900039ec:	68fb      	ldr	r3, [r7, #12]
900039ee:	681b      	ldr	r3, [r3, #0]
900039f0:	681a      	ldr	r2, [r3, #0]
900039f2:	68fb      	ldr	r3, [r7, #12]
900039f4:	681b      	ldr	r3, [r3, #0]
900039f6:	f042 0201 	orr.w	r2, r2, #1
900039fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900039fc:	2300      	movs	r3, #0
}
900039fe:	4618      	mov	r0, r3
90003a00:	3710      	adds	r7, #16
90003a02:	46bd      	mov	sp, r7
90003a04:	bd80      	pop	{r7, pc}

90003a06 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90003a06:	b580      	push	{r7, lr}
90003a08:	b086      	sub	sp, #24
90003a0a:	af00      	add	r7, sp, #0
90003a0c:	6078      	str	r0, [r7, #4]
90003a0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
90003a10:	2300      	movs	r3, #0
90003a12:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003a14:	687b      	ldr	r3, [r7, #4]
90003a16:	681b      	ldr	r3, [r3, #0]
90003a18:	681b      	ldr	r3, [r3, #0]
90003a1a:	f003 0301 	and.w	r3, r3, #1
90003a1e:	2b00      	cmp	r3, #0
90003a20:	d056      	beq.n	90003ad0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003a22:	f7ff fd83 	bl	9000352c <HAL_GetTick>
90003a26:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003a28:	e04b      	b.n	90003ac2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003a2a:	687b      	ldr	r3, [r7, #4]
90003a2c:	681b      	ldr	r3, [r3, #0]
90003a2e:	685b      	ldr	r3, [r3, #4]
90003a30:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003a32:	68fb      	ldr	r3, [r7, #12]
90003a34:	f003 0321 	and.w	r3, r3, #33	@ 0x21
90003a38:	2b00      	cmp	r3, #0
90003a3a:	d023      	beq.n	90003a84 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003a3c:	68fb      	ldr	r3, [r7, #12]
90003a3e:	f003 0320 	and.w	r3, r3, #32
90003a42:	2b00      	cmp	r3, #0
90003a44:	d005      	beq.n	90003a52 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003a46:	687b      	ldr	r3, [r7, #4]
90003a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003a4a:	f043 0202 	orr.w	r2, r3, #2
90003a4e:	687b      	ldr	r3, [r7, #4]
90003a50:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003a52:	68fb      	ldr	r3, [r7, #12]
90003a54:	f003 0301 	and.w	r3, r3, #1
90003a58:	2b00      	cmp	r3, #0
90003a5a:	d005      	beq.n	90003a68 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003a5c:	687b      	ldr	r3, [r7, #4]
90003a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003a60:	f043 0201 	orr.w	r2, r3, #1
90003a64:	687b      	ldr	r3, [r7, #4]
90003a66:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003a68:	687b      	ldr	r3, [r7, #4]
90003a6a:	681b      	ldr	r3, [r3, #0]
90003a6c:	2221      	movs	r2, #33	@ 0x21
90003a6e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003a70:	687b      	ldr	r3, [r7, #4]
90003a72:	2204      	movs	r2, #4
90003a74:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003a78:	687b      	ldr	r3, [r7, #4]
90003a7a:	2200      	movs	r2, #0
90003a7c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003a80:	2301      	movs	r3, #1
90003a82:	e0a5      	b.n	90003bd0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003a84:	683b      	ldr	r3, [r7, #0]
90003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
90003a8a:	d01a      	beq.n	90003ac2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003a8c:	f7ff fd4e 	bl	9000352c <HAL_GetTick>
90003a90:	4602      	mov	r2, r0
90003a92:	697b      	ldr	r3, [r7, #20]
90003a94:	1ad3      	subs	r3, r2, r3
90003a96:	683a      	ldr	r2, [r7, #0]
90003a98:	429a      	cmp	r2, r3
90003a9a:	d302      	bcc.n	90003aa2 <HAL_DMA2D_PollForTransfer+0x9c>
90003a9c:	683b      	ldr	r3, [r7, #0]
90003a9e:	2b00      	cmp	r3, #0
90003aa0:	d10f      	bne.n	90003ac2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003aa2:	687b      	ldr	r3, [r7, #4]
90003aa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003aa6:	f043 0220 	orr.w	r2, r3, #32
90003aaa:	687b      	ldr	r3, [r7, #4]
90003aac:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003aae:	687b      	ldr	r3, [r7, #4]
90003ab0:	2203      	movs	r2, #3
90003ab2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003ab6:	687b      	ldr	r3, [r7, #4]
90003ab8:	2200      	movs	r2, #0
90003aba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003abe:	2303      	movs	r3, #3
90003ac0:	e086      	b.n	90003bd0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003ac2:	687b      	ldr	r3, [r7, #4]
90003ac4:	681b      	ldr	r3, [r3, #0]
90003ac6:	685b      	ldr	r3, [r3, #4]
90003ac8:	f003 0302 	and.w	r3, r3, #2
90003acc:	2b00      	cmp	r3, #0
90003ace:	d0ac      	beq.n	90003a2a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003ad0:	687b      	ldr	r3, [r7, #4]
90003ad2:	681b      	ldr	r3, [r3, #0]
90003ad4:	69db      	ldr	r3, [r3, #28]
90003ad6:	f003 0320 	and.w	r3, r3, #32
90003ada:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003adc:	687b      	ldr	r3, [r7, #4]
90003ade:	681b      	ldr	r3, [r3, #0]
90003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003ae2:	f003 0320 	and.w	r3, r3, #32
90003ae6:	693a      	ldr	r2, [r7, #16]
90003ae8:	4313      	orrs	r3, r2
90003aea:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003aec:	693b      	ldr	r3, [r7, #16]
90003aee:	2b00      	cmp	r3, #0
90003af0:	d061      	beq.n	90003bb6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90003af2:	f7ff fd1b 	bl	9000352c <HAL_GetTick>
90003af6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003af8:	e056      	b.n	90003ba8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003afa:	687b      	ldr	r3, [r7, #4]
90003afc:	681b      	ldr	r3, [r3, #0]
90003afe:	685b      	ldr	r3, [r3, #4]
90003b00:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90003b02:	68fb      	ldr	r3, [r7, #12]
90003b04:	f003 0329 	and.w	r3, r3, #41	@ 0x29
90003b08:	2b00      	cmp	r3, #0
90003b0a:	d02e      	beq.n	90003b6a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003b0c:	68fb      	ldr	r3, [r7, #12]
90003b0e:	f003 0308 	and.w	r3, r3, #8
90003b12:	2b00      	cmp	r3, #0
90003b14:	d005      	beq.n	90003b22 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90003b16:	687b      	ldr	r3, [r7, #4]
90003b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003b1a:	f043 0204 	orr.w	r2, r3, #4
90003b1e:	687b      	ldr	r3, [r7, #4]
90003b20:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003b22:	68fb      	ldr	r3, [r7, #12]
90003b24:	f003 0320 	and.w	r3, r3, #32
90003b28:	2b00      	cmp	r3, #0
90003b2a:	d005      	beq.n	90003b38 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003b2c:	687b      	ldr	r3, [r7, #4]
90003b2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003b30:	f043 0202 	orr.w	r2, r3, #2
90003b34:	687b      	ldr	r3, [r7, #4]
90003b36:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003b38:	68fb      	ldr	r3, [r7, #12]
90003b3a:	f003 0301 	and.w	r3, r3, #1
90003b3e:	2b00      	cmp	r3, #0
90003b40:	d005      	beq.n	90003b4e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003b42:	687b      	ldr	r3, [r7, #4]
90003b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003b46:	f043 0201 	orr.w	r2, r3, #1
90003b4a:	687b      	ldr	r3, [r7, #4]
90003b4c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003b4e:	687b      	ldr	r3, [r7, #4]
90003b50:	681b      	ldr	r3, [r3, #0]
90003b52:	2229      	movs	r2, #41	@ 0x29
90003b54:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003b56:	687b      	ldr	r3, [r7, #4]
90003b58:	2204      	movs	r2, #4
90003b5a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003b5e:	687b      	ldr	r3, [r7, #4]
90003b60:	2200      	movs	r2, #0
90003b62:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003b66:	2301      	movs	r3, #1
90003b68:	e032      	b.n	90003bd0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003b6a:	683b      	ldr	r3, [r7, #0]
90003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
90003b70:	d01a      	beq.n	90003ba8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003b72:	f7ff fcdb 	bl	9000352c <HAL_GetTick>
90003b76:	4602      	mov	r2, r0
90003b78:	697b      	ldr	r3, [r7, #20]
90003b7a:	1ad3      	subs	r3, r2, r3
90003b7c:	683a      	ldr	r2, [r7, #0]
90003b7e:	429a      	cmp	r2, r3
90003b80:	d302      	bcc.n	90003b88 <HAL_DMA2D_PollForTransfer+0x182>
90003b82:	683b      	ldr	r3, [r7, #0]
90003b84:	2b00      	cmp	r3, #0
90003b86:	d10f      	bne.n	90003ba8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003b88:	687b      	ldr	r3, [r7, #4]
90003b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003b8c:	f043 0220 	orr.w	r2, r3, #32
90003b90:	687b      	ldr	r3, [r7, #4]
90003b92:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003b94:	687b      	ldr	r3, [r7, #4]
90003b96:	2203      	movs	r2, #3
90003b98:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003b9c:	687b      	ldr	r3, [r7, #4]
90003b9e:	2200      	movs	r2, #0
90003ba0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003ba4:	2303      	movs	r3, #3
90003ba6:	e013      	b.n	90003bd0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003ba8:	687b      	ldr	r3, [r7, #4]
90003baa:	681b      	ldr	r3, [r3, #0]
90003bac:	685b      	ldr	r3, [r3, #4]
90003bae:	f003 0310 	and.w	r3, r3, #16
90003bb2:	2b00      	cmp	r3, #0
90003bb4:	d0a1      	beq.n	90003afa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003bb6:	687b      	ldr	r3, [r7, #4]
90003bb8:	681b      	ldr	r3, [r3, #0]
90003bba:	2212      	movs	r2, #18
90003bbc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003bbe:	687b      	ldr	r3, [r7, #4]
90003bc0:	2201      	movs	r2, #1
90003bc2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003bc6:	687b      	ldr	r3, [r7, #4]
90003bc8:	2200      	movs	r2, #0
90003bca:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003bce:	2300      	movs	r3, #0
}
90003bd0:	4618      	mov	r0, r3
90003bd2:	3718      	adds	r7, #24
90003bd4:	46bd      	mov	sp, r7
90003bd6:	bd80      	pop	{r7, pc}

90003bd8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003bd8:	b480      	push	{r7}
90003bda:	b087      	sub	sp, #28
90003bdc:	af00      	add	r7, sp, #0
90003bde:	6078      	str	r0, [r7, #4]
90003be0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003be2:	687b      	ldr	r3, [r7, #4]
90003be4:	685b      	ldr	r3, [r3, #4]
90003be6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90003bea:	683b      	ldr	r3, [r7, #0]
90003bec:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003bee:	687b      	ldr	r3, [r7, #4]
90003bf0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003bf4:	2b01      	cmp	r3, #1
90003bf6:	d101      	bne.n	90003bfc <HAL_DMA2D_ConfigLayer+0x24>
90003bf8:	2302      	movs	r3, #2
90003bfa:	e092      	b.n	90003d22 <HAL_DMA2D_ConfigLayer+0x14a>
90003bfc:	687b      	ldr	r3, [r7, #4]
90003bfe:	2201      	movs	r2, #1
90003c00:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003c04:	687b      	ldr	r3, [r7, #4]
90003c06:	2202      	movs	r2, #2
90003c08:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003c0c:	683a      	ldr	r2, [r7, #0]
90003c0e:	4613      	mov	r3, r2
90003c10:	00db      	lsls	r3, r3, #3
90003c12:	1a9b      	subs	r3, r3, r2
90003c14:	009b      	lsls	r3, r3, #2
90003c16:	3328      	adds	r3, #40	@ 0x28
90003c18:	687a      	ldr	r2, [r7, #4]
90003c1a:	4413      	add	r3, r2
90003c1c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003c1e:	68fb      	ldr	r3, [r7, #12]
90003c20:	685a      	ldr	r2, [r3, #4]
90003c22:	68fb      	ldr	r3, [r7, #12]
90003c24:	689b      	ldr	r3, [r3, #8]
90003c26:	041b      	lsls	r3, r3, #16
90003c28:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003c2a:	68fb      	ldr	r3, [r7, #12]
90003c2c:	691b      	ldr	r3, [r3, #16]
90003c2e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003c30:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003c32:	68fb      	ldr	r3, [r7, #12]
90003c34:	695b      	ldr	r3, [r3, #20]
90003c36:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003c38:	4313      	orrs	r3, r2
90003c3a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003c3c:	4b3c      	ldr	r3, [pc, #240]	@ (90003d30 <HAL_DMA2D_ConfigLayer+0x158>)
90003c3e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003c40:	68fb      	ldr	r3, [r7, #12]
90003c42:	685b      	ldr	r3, [r3, #4]
90003c44:	2b0a      	cmp	r3, #10
90003c46:	d003      	beq.n	90003c50 <HAL_DMA2D_ConfigLayer+0x78>
90003c48:	68fb      	ldr	r3, [r7, #12]
90003c4a:	685b      	ldr	r3, [r3, #4]
90003c4c:	2b09      	cmp	r3, #9
90003c4e:	d107      	bne.n	90003c60 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003c50:	68fb      	ldr	r3, [r7, #12]
90003c52:	68db      	ldr	r3, [r3, #12]
90003c54:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003c58:	693a      	ldr	r2, [r7, #16]
90003c5a:	4313      	orrs	r3, r2
90003c5c:	613b      	str	r3, [r7, #16]
90003c5e:	e005      	b.n	90003c6c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003c60:	68fb      	ldr	r3, [r7, #12]
90003c62:	68db      	ldr	r3, [r3, #12]
90003c64:	061b      	lsls	r3, r3, #24
90003c66:	693a      	ldr	r2, [r7, #16]
90003c68:	4313      	orrs	r3, r2
90003c6a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003c6c:	683b      	ldr	r3, [r7, #0]
90003c6e:	2b00      	cmp	r3, #0
90003c70:	d120      	bne.n	90003cb4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003c72:	687b      	ldr	r3, [r7, #4]
90003c74:	681b      	ldr	r3, [r3, #0]
90003c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003c78:	697b      	ldr	r3, [r7, #20]
90003c7a:	43db      	mvns	r3, r3
90003c7c:	ea02 0103 	and.w	r1, r2, r3
90003c80:	687b      	ldr	r3, [r7, #4]
90003c82:	681b      	ldr	r3, [r3, #0]
90003c84:	693a      	ldr	r2, [r7, #16]
90003c86:	430a      	orrs	r2, r1
90003c88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003c8a:	687b      	ldr	r3, [r7, #4]
90003c8c:	681b      	ldr	r3, [r3, #0]
90003c8e:	68fa      	ldr	r2, [r7, #12]
90003c90:	6812      	ldr	r2, [r2, #0]
90003c92:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003c94:	68fb      	ldr	r3, [r7, #12]
90003c96:	685b      	ldr	r3, [r3, #4]
90003c98:	2b0a      	cmp	r3, #10
90003c9a:	d003      	beq.n	90003ca4 <HAL_DMA2D_ConfigLayer+0xcc>
90003c9c:	68fb      	ldr	r3, [r7, #12]
90003c9e:	685b      	ldr	r3, [r3, #4]
90003ca0:	2b09      	cmp	r3, #9
90003ca2:	d135      	bne.n	90003d10 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003ca4:	68fb      	ldr	r3, [r7, #12]
90003ca6:	68da      	ldr	r2, [r3, #12]
90003ca8:	687b      	ldr	r3, [r7, #4]
90003caa:	681b      	ldr	r3, [r3, #0]
90003cac:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003cb0:	629a      	str	r2, [r3, #40]	@ 0x28
90003cb2:	e02d      	b.n	90003d10 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003cb4:	68fb      	ldr	r3, [r7, #12]
90003cb6:	685b      	ldr	r3, [r3, #4]
90003cb8:	2b0b      	cmp	r3, #11
90003cba:	d109      	bne.n	90003cd0 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003cbc:	68fb      	ldr	r3, [r7, #12]
90003cbe:	699b      	ldr	r3, [r3, #24]
90003cc0:	049b      	lsls	r3, r3, #18
90003cc2:	693a      	ldr	r2, [r7, #16]
90003cc4:	4313      	orrs	r3, r2
90003cc6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003cc8:	697b      	ldr	r3, [r7, #20]
90003cca:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
90003cce:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003cd0:	687b      	ldr	r3, [r7, #4]
90003cd2:	681b      	ldr	r3, [r3, #0]
90003cd4:	69da      	ldr	r2, [r3, #28]
90003cd6:	697b      	ldr	r3, [r7, #20]
90003cd8:	43db      	mvns	r3, r3
90003cda:	ea02 0103 	and.w	r1, r2, r3
90003cde:	687b      	ldr	r3, [r7, #4]
90003ce0:	681b      	ldr	r3, [r3, #0]
90003ce2:	693a      	ldr	r2, [r7, #16]
90003ce4:	430a      	orrs	r2, r1
90003ce6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003ce8:	687b      	ldr	r3, [r7, #4]
90003cea:	681b      	ldr	r3, [r3, #0]
90003cec:	68fa      	ldr	r2, [r7, #12]
90003cee:	6812      	ldr	r2, [r2, #0]
90003cf0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003cf2:	68fb      	ldr	r3, [r7, #12]
90003cf4:	685b      	ldr	r3, [r3, #4]
90003cf6:	2b0a      	cmp	r3, #10
90003cf8:	d003      	beq.n	90003d02 <HAL_DMA2D_ConfigLayer+0x12a>
90003cfa:	68fb      	ldr	r3, [r7, #12]
90003cfc:	685b      	ldr	r3, [r3, #4]
90003cfe:	2b09      	cmp	r3, #9
90003d00:	d106      	bne.n	90003d10 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003d02:	68fb      	ldr	r3, [r7, #12]
90003d04:	68da      	ldr	r2, [r3, #12]
90003d06:	687b      	ldr	r3, [r7, #4]
90003d08:	681b      	ldr	r3, [r3, #0]
90003d0a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003d0e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003d10:	687b      	ldr	r3, [r7, #4]
90003d12:	2201      	movs	r2, #1
90003d14:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003d18:	687b      	ldr	r3, [r7, #4]
90003d1a:	2200      	movs	r2, #0
90003d1c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003d20:	2300      	movs	r3, #0
}
90003d22:	4618      	mov	r0, r3
90003d24:	371c      	adds	r7, #28
90003d26:	46bd      	mov	sp, r7
90003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d2c:	4770      	bx	lr
90003d2e:	bf00      	nop
90003d30:	ff33000f 	.word	0xff33000f

90003d34 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003d34:	b480      	push	{r7}
90003d36:	b08b      	sub	sp, #44	@ 0x2c
90003d38:	af00      	add	r7, sp, #0
90003d3a:	60f8      	str	r0, [r7, #12]
90003d3c:	60b9      	str	r1, [r7, #8]
90003d3e:	607a      	str	r2, [r7, #4]
90003d40:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003d42:	68fb      	ldr	r3, [r7, #12]
90003d44:	681b      	ldr	r3, [r3, #0]
90003d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003d48:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003d4c:	683b      	ldr	r3, [r7, #0]
90003d4e:	041a      	lsls	r2, r3, #16
90003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003d52:	431a      	orrs	r2, r3
90003d54:	68fb      	ldr	r3, [r7, #12]
90003d56:	681b      	ldr	r3, [r3, #0]
90003d58:	430a      	orrs	r2, r1
90003d5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003d5c:	68fb      	ldr	r3, [r7, #12]
90003d5e:	681b      	ldr	r3, [r3, #0]
90003d60:	687a      	ldr	r2, [r7, #4]
90003d62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003d64:	68fb      	ldr	r3, [r7, #12]
90003d66:	685b      	ldr	r3, [r3, #4]
90003d68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003d6c:	d174      	bne.n	90003e58 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003d6e:	68bb      	ldr	r3, [r7, #8]
90003d70:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003d74:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003d76:	68bb      	ldr	r3, [r7, #8]
90003d78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003d7c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003d7e:	68bb      	ldr	r3, [r7, #8]
90003d80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003d84:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003d86:	68bb      	ldr	r3, [r7, #8]
90003d88:	b2db      	uxtb	r3, r3
90003d8a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003d8c:	68fb      	ldr	r3, [r7, #12]
90003d8e:	689b      	ldr	r3, [r3, #8]
90003d90:	2b00      	cmp	r3, #0
90003d92:	d108      	bne.n	90003da6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003d94:	69ba      	ldr	r2, [r7, #24]
90003d96:	69fb      	ldr	r3, [r7, #28]
90003d98:	431a      	orrs	r2, r3
90003d9a:	6a3b      	ldr	r3, [r7, #32]
90003d9c:	4313      	orrs	r3, r2
90003d9e:	697a      	ldr	r2, [r7, #20]
90003da0:	4313      	orrs	r3, r2
90003da2:	627b      	str	r3, [r7, #36]	@ 0x24
90003da4:	e053      	b.n	90003e4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003da6:	68fb      	ldr	r3, [r7, #12]
90003da8:	689b      	ldr	r3, [r3, #8]
90003daa:	2b01      	cmp	r3, #1
90003dac:	d106      	bne.n	90003dbc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003dae:	69ba      	ldr	r2, [r7, #24]
90003db0:	69fb      	ldr	r3, [r7, #28]
90003db2:	4313      	orrs	r3, r2
90003db4:	697a      	ldr	r2, [r7, #20]
90003db6:	4313      	orrs	r3, r2
90003db8:	627b      	str	r3, [r7, #36]	@ 0x24
90003dba:	e048      	b.n	90003e4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003dbc:	68fb      	ldr	r3, [r7, #12]
90003dbe:	689b      	ldr	r3, [r3, #8]
90003dc0:	2b02      	cmp	r3, #2
90003dc2:	d111      	bne.n	90003de8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003dc4:	69fb      	ldr	r3, [r7, #28]
90003dc6:	0cdb      	lsrs	r3, r3, #19
90003dc8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003dca:	69bb      	ldr	r3, [r7, #24]
90003dcc:	0a9b      	lsrs	r3, r3, #10
90003dce:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003dd0:	697b      	ldr	r3, [r7, #20]
90003dd2:	08db      	lsrs	r3, r3, #3
90003dd4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003dd6:	69bb      	ldr	r3, [r7, #24]
90003dd8:	015a      	lsls	r2, r3, #5
90003dda:	69fb      	ldr	r3, [r7, #28]
90003ddc:	02db      	lsls	r3, r3, #11
90003dde:	4313      	orrs	r3, r2
90003de0:	697a      	ldr	r2, [r7, #20]
90003de2:	4313      	orrs	r3, r2
90003de4:	627b      	str	r3, [r7, #36]	@ 0x24
90003de6:	e032      	b.n	90003e4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003de8:	68fb      	ldr	r3, [r7, #12]
90003dea:	689b      	ldr	r3, [r3, #8]
90003dec:	2b03      	cmp	r3, #3
90003dee:	d117      	bne.n	90003e20 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003df0:	6a3b      	ldr	r3, [r7, #32]
90003df2:	0fdb      	lsrs	r3, r3, #31
90003df4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003df6:	69fb      	ldr	r3, [r7, #28]
90003df8:	0cdb      	lsrs	r3, r3, #19
90003dfa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003dfc:	69bb      	ldr	r3, [r7, #24]
90003dfe:	0adb      	lsrs	r3, r3, #11
90003e00:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003e02:	697b      	ldr	r3, [r7, #20]
90003e04:	08db      	lsrs	r3, r3, #3
90003e06:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003e08:	69bb      	ldr	r3, [r7, #24]
90003e0a:	015a      	lsls	r2, r3, #5
90003e0c:	69fb      	ldr	r3, [r7, #28]
90003e0e:	029b      	lsls	r3, r3, #10
90003e10:	431a      	orrs	r2, r3
90003e12:	6a3b      	ldr	r3, [r7, #32]
90003e14:	03db      	lsls	r3, r3, #15
90003e16:	4313      	orrs	r3, r2
90003e18:	697a      	ldr	r2, [r7, #20]
90003e1a:	4313      	orrs	r3, r2
90003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
90003e1e:	e016      	b.n	90003e4e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003e20:	6a3b      	ldr	r3, [r7, #32]
90003e22:	0f1b      	lsrs	r3, r3, #28
90003e24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003e26:	69fb      	ldr	r3, [r7, #28]
90003e28:	0d1b      	lsrs	r3, r3, #20
90003e2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003e2c:	69bb      	ldr	r3, [r7, #24]
90003e2e:	0b1b      	lsrs	r3, r3, #12
90003e30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003e32:	697b      	ldr	r3, [r7, #20]
90003e34:	091b      	lsrs	r3, r3, #4
90003e36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003e38:	69bb      	ldr	r3, [r7, #24]
90003e3a:	011a      	lsls	r2, r3, #4
90003e3c:	69fb      	ldr	r3, [r7, #28]
90003e3e:	021b      	lsls	r3, r3, #8
90003e40:	431a      	orrs	r2, r3
90003e42:	6a3b      	ldr	r3, [r7, #32]
90003e44:	031b      	lsls	r3, r3, #12
90003e46:	4313      	orrs	r3, r2
90003e48:	697a      	ldr	r2, [r7, #20]
90003e4a:	4313      	orrs	r3, r2
90003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003e4e:	68fb      	ldr	r3, [r7, #12]
90003e50:	681b      	ldr	r3, [r3, #0]
90003e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003e54:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003e56:	e00d      	b.n	90003e74 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003e58:	68fb      	ldr	r3, [r7, #12]
90003e5a:	685b      	ldr	r3, [r3, #4]
90003e5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003e60:	d104      	bne.n	90003e6c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003e62:	68fb      	ldr	r3, [r7, #12]
90003e64:	681b      	ldr	r3, [r3, #0]
90003e66:	68ba      	ldr	r2, [r7, #8]
90003e68:	615a      	str	r2, [r3, #20]
}
90003e6a:	e003      	b.n	90003e74 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003e6c:	68fb      	ldr	r3, [r7, #12]
90003e6e:	681b      	ldr	r3, [r3, #0]
90003e70:	68ba      	ldr	r2, [r7, #8]
90003e72:	60da      	str	r2, [r3, #12]
}
90003e74:	bf00      	nop
90003e76:	372c      	adds	r7, #44	@ 0x2c
90003e78:	46bd      	mov	sp, r7
90003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003e7e:	4770      	bx	lr

90003e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003e80:	b480      	push	{r7}
90003e82:	b089      	sub	sp, #36	@ 0x24
90003e84:	af00      	add	r7, sp, #0
90003e86:	6078      	str	r0, [r7, #4]
90003e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003e8a:	2300      	movs	r3, #0
90003e8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003e8e:	4b89      	ldr	r3, [pc, #548]	@ (900040b4 <HAL_GPIO_Init+0x234>)
90003e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003e92:	e194      	b.n	900041be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003e94:	683b      	ldr	r3, [r7, #0]
90003e96:	681a      	ldr	r2, [r3, #0]
90003e98:	2101      	movs	r1, #1
90003e9a:	69fb      	ldr	r3, [r7, #28]
90003e9c:	fa01 f303 	lsl.w	r3, r1, r3
90003ea0:	4013      	ands	r3, r2
90003ea2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003ea4:	693b      	ldr	r3, [r7, #16]
90003ea6:	2b00      	cmp	r3, #0
90003ea8:	f000 8186 	beq.w	900041b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003eac:	683b      	ldr	r3, [r7, #0]
90003eae:	685b      	ldr	r3, [r3, #4]
90003eb0:	f003 0303 	and.w	r3, r3, #3
90003eb4:	2b01      	cmp	r3, #1
90003eb6:	d005      	beq.n	90003ec4 <HAL_GPIO_Init+0x44>
90003eb8:	683b      	ldr	r3, [r7, #0]
90003eba:	685b      	ldr	r3, [r3, #4]
90003ebc:	f003 0303 	and.w	r3, r3, #3
90003ec0:	2b02      	cmp	r3, #2
90003ec2:	d130      	bne.n	90003f26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003ec4:	687b      	ldr	r3, [r7, #4]
90003ec6:	689b      	ldr	r3, [r3, #8]
90003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003eca:	69fb      	ldr	r3, [r7, #28]
90003ecc:	005b      	lsls	r3, r3, #1
90003ece:	2203      	movs	r2, #3
90003ed0:	fa02 f303 	lsl.w	r3, r2, r3
90003ed4:	43db      	mvns	r3, r3
90003ed6:	69ba      	ldr	r2, [r7, #24]
90003ed8:	4013      	ands	r3, r2
90003eda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003edc:	683b      	ldr	r3, [r7, #0]
90003ede:	68da      	ldr	r2, [r3, #12]
90003ee0:	69fb      	ldr	r3, [r7, #28]
90003ee2:	005b      	lsls	r3, r3, #1
90003ee4:	fa02 f303 	lsl.w	r3, r2, r3
90003ee8:	69ba      	ldr	r2, [r7, #24]
90003eea:	4313      	orrs	r3, r2
90003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003eee:	687b      	ldr	r3, [r7, #4]
90003ef0:	69ba      	ldr	r2, [r7, #24]
90003ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003ef4:	687b      	ldr	r3, [r7, #4]
90003ef6:	685b      	ldr	r3, [r3, #4]
90003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003efa:	2201      	movs	r2, #1
90003efc:	69fb      	ldr	r3, [r7, #28]
90003efe:	fa02 f303 	lsl.w	r3, r2, r3
90003f02:	43db      	mvns	r3, r3
90003f04:	69ba      	ldr	r2, [r7, #24]
90003f06:	4013      	ands	r3, r2
90003f08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003f0a:	683b      	ldr	r3, [r7, #0]
90003f0c:	685b      	ldr	r3, [r3, #4]
90003f0e:	091b      	lsrs	r3, r3, #4
90003f10:	f003 0201 	and.w	r2, r3, #1
90003f14:	69fb      	ldr	r3, [r7, #28]
90003f16:	fa02 f303 	lsl.w	r3, r2, r3
90003f1a:	69ba      	ldr	r2, [r7, #24]
90003f1c:	4313      	orrs	r3, r2
90003f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003f20:	687b      	ldr	r3, [r7, #4]
90003f22:	69ba      	ldr	r2, [r7, #24]
90003f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003f26:	683b      	ldr	r3, [r7, #0]
90003f28:	685b      	ldr	r3, [r3, #4]
90003f2a:	f003 0303 	and.w	r3, r3, #3
90003f2e:	2b03      	cmp	r3, #3
90003f30:	d017      	beq.n	90003f62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003f32:	687b      	ldr	r3, [r7, #4]
90003f34:	68db      	ldr	r3, [r3, #12]
90003f36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003f38:	69fb      	ldr	r3, [r7, #28]
90003f3a:	005b      	lsls	r3, r3, #1
90003f3c:	2203      	movs	r2, #3
90003f3e:	fa02 f303 	lsl.w	r3, r2, r3
90003f42:	43db      	mvns	r3, r3
90003f44:	69ba      	ldr	r2, [r7, #24]
90003f46:	4013      	ands	r3, r2
90003f48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003f4a:	683b      	ldr	r3, [r7, #0]
90003f4c:	689a      	ldr	r2, [r3, #8]
90003f4e:	69fb      	ldr	r3, [r7, #28]
90003f50:	005b      	lsls	r3, r3, #1
90003f52:	fa02 f303 	lsl.w	r3, r2, r3
90003f56:	69ba      	ldr	r2, [r7, #24]
90003f58:	4313      	orrs	r3, r2
90003f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003f5c:	687b      	ldr	r3, [r7, #4]
90003f5e:	69ba      	ldr	r2, [r7, #24]
90003f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003f62:	683b      	ldr	r3, [r7, #0]
90003f64:	685b      	ldr	r3, [r3, #4]
90003f66:	f003 0303 	and.w	r3, r3, #3
90003f6a:	2b02      	cmp	r3, #2
90003f6c:	d123      	bne.n	90003fb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003f6e:	69fb      	ldr	r3, [r7, #28]
90003f70:	08da      	lsrs	r2, r3, #3
90003f72:	687b      	ldr	r3, [r7, #4]
90003f74:	3208      	adds	r2, #8
90003f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003f7c:	69fb      	ldr	r3, [r7, #28]
90003f7e:	f003 0307 	and.w	r3, r3, #7
90003f82:	009b      	lsls	r3, r3, #2
90003f84:	220f      	movs	r2, #15
90003f86:	fa02 f303 	lsl.w	r3, r2, r3
90003f8a:	43db      	mvns	r3, r3
90003f8c:	69ba      	ldr	r2, [r7, #24]
90003f8e:	4013      	ands	r3, r2
90003f90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003f92:	683b      	ldr	r3, [r7, #0]
90003f94:	691a      	ldr	r2, [r3, #16]
90003f96:	69fb      	ldr	r3, [r7, #28]
90003f98:	f003 0307 	and.w	r3, r3, #7
90003f9c:	009b      	lsls	r3, r3, #2
90003f9e:	fa02 f303 	lsl.w	r3, r2, r3
90003fa2:	69ba      	ldr	r2, [r7, #24]
90003fa4:	4313      	orrs	r3, r2
90003fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003fa8:	69fb      	ldr	r3, [r7, #28]
90003faa:	08da      	lsrs	r2, r3, #3
90003fac:	687b      	ldr	r3, [r7, #4]
90003fae:	3208      	adds	r2, #8
90003fb0:	69b9      	ldr	r1, [r7, #24]
90003fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003fb6:	687b      	ldr	r3, [r7, #4]
90003fb8:	681b      	ldr	r3, [r3, #0]
90003fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003fbc:	69fb      	ldr	r3, [r7, #28]
90003fbe:	005b      	lsls	r3, r3, #1
90003fc0:	2203      	movs	r2, #3
90003fc2:	fa02 f303 	lsl.w	r3, r2, r3
90003fc6:	43db      	mvns	r3, r3
90003fc8:	69ba      	ldr	r2, [r7, #24]
90003fca:	4013      	ands	r3, r2
90003fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003fce:	683b      	ldr	r3, [r7, #0]
90003fd0:	685b      	ldr	r3, [r3, #4]
90003fd2:	f003 0203 	and.w	r2, r3, #3
90003fd6:	69fb      	ldr	r3, [r7, #28]
90003fd8:	005b      	lsls	r3, r3, #1
90003fda:	fa02 f303 	lsl.w	r3, r2, r3
90003fde:	69ba      	ldr	r2, [r7, #24]
90003fe0:	4313      	orrs	r3, r2
90003fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003fe4:	687b      	ldr	r3, [r7, #4]
90003fe6:	69ba      	ldr	r2, [r7, #24]
90003fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003fea:	683b      	ldr	r3, [r7, #0]
90003fec:	685b      	ldr	r3, [r3, #4]
90003fee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003ff2:	2b00      	cmp	r3, #0
90003ff4:	f000 80e0 	beq.w	900041b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003ff8:	4b2f      	ldr	r3, [pc, #188]	@ (900040b8 <HAL_GPIO_Init+0x238>)
90003ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003ffe:	4a2e      	ldr	r2, [pc, #184]	@ (900040b8 <HAL_GPIO_Init+0x238>)
90004000:	f043 0302 	orr.w	r3, r3, #2
90004004:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90004008:	4b2b      	ldr	r3, [pc, #172]	@ (900040b8 <HAL_GPIO_Init+0x238>)
9000400a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
9000400e:	f003 0302 	and.w	r3, r3, #2
90004012:	60fb      	str	r3, [r7, #12]
90004014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90004016:	4a29      	ldr	r2, [pc, #164]	@ (900040bc <HAL_GPIO_Init+0x23c>)
90004018:	69fb      	ldr	r3, [r7, #28]
9000401a:	089b      	lsrs	r3, r3, #2
9000401c:	3302      	adds	r3, #2
9000401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90004024:	69fb      	ldr	r3, [r7, #28]
90004026:	f003 0303 	and.w	r3, r3, #3
9000402a:	009b      	lsls	r3, r3, #2
9000402c:	220f      	movs	r2, #15
9000402e:	fa02 f303 	lsl.w	r3, r2, r3
90004032:	43db      	mvns	r3, r3
90004034:	69ba      	ldr	r2, [r7, #24]
90004036:	4013      	ands	r3, r2
90004038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000403a:	687b      	ldr	r3, [r7, #4]
9000403c:	4a20      	ldr	r2, [pc, #128]	@ (900040c0 <HAL_GPIO_Init+0x240>)
9000403e:	4293      	cmp	r3, r2
90004040:	d052      	beq.n	900040e8 <HAL_GPIO_Init+0x268>
90004042:	687b      	ldr	r3, [r7, #4]
90004044:	4a1f      	ldr	r2, [pc, #124]	@ (900040c4 <HAL_GPIO_Init+0x244>)
90004046:	4293      	cmp	r3, r2
90004048:	d031      	beq.n	900040ae <HAL_GPIO_Init+0x22e>
9000404a:	687b      	ldr	r3, [r7, #4]
9000404c:	4a1e      	ldr	r2, [pc, #120]	@ (900040c8 <HAL_GPIO_Init+0x248>)
9000404e:	4293      	cmp	r3, r2
90004050:	d02b      	beq.n	900040aa <HAL_GPIO_Init+0x22a>
90004052:	687b      	ldr	r3, [r7, #4]
90004054:	4a1d      	ldr	r2, [pc, #116]	@ (900040cc <HAL_GPIO_Init+0x24c>)
90004056:	4293      	cmp	r3, r2
90004058:	d025      	beq.n	900040a6 <HAL_GPIO_Init+0x226>
9000405a:	687b      	ldr	r3, [r7, #4]
9000405c:	4a1c      	ldr	r2, [pc, #112]	@ (900040d0 <HAL_GPIO_Init+0x250>)
9000405e:	4293      	cmp	r3, r2
90004060:	d01f      	beq.n	900040a2 <HAL_GPIO_Init+0x222>
90004062:	687b      	ldr	r3, [r7, #4]
90004064:	4a1b      	ldr	r2, [pc, #108]	@ (900040d4 <HAL_GPIO_Init+0x254>)
90004066:	4293      	cmp	r3, r2
90004068:	d019      	beq.n	9000409e <HAL_GPIO_Init+0x21e>
9000406a:	687b      	ldr	r3, [r7, #4]
9000406c:	4a1a      	ldr	r2, [pc, #104]	@ (900040d8 <HAL_GPIO_Init+0x258>)
9000406e:	4293      	cmp	r3, r2
90004070:	d013      	beq.n	9000409a <HAL_GPIO_Init+0x21a>
90004072:	687b      	ldr	r3, [r7, #4]
90004074:	4a19      	ldr	r2, [pc, #100]	@ (900040dc <HAL_GPIO_Init+0x25c>)
90004076:	4293      	cmp	r3, r2
90004078:	d00d      	beq.n	90004096 <HAL_GPIO_Init+0x216>
9000407a:	687b      	ldr	r3, [r7, #4]
9000407c:	4a18      	ldr	r2, [pc, #96]	@ (900040e0 <HAL_GPIO_Init+0x260>)
9000407e:	4293      	cmp	r3, r2
90004080:	d007      	beq.n	90004092 <HAL_GPIO_Init+0x212>
90004082:	687b      	ldr	r3, [r7, #4]
90004084:	4a17      	ldr	r2, [pc, #92]	@ (900040e4 <HAL_GPIO_Init+0x264>)
90004086:	4293      	cmp	r3, r2
90004088:	d101      	bne.n	9000408e <HAL_GPIO_Init+0x20e>
9000408a:	2309      	movs	r3, #9
9000408c:	e02d      	b.n	900040ea <HAL_GPIO_Init+0x26a>
9000408e:	230a      	movs	r3, #10
90004090:	e02b      	b.n	900040ea <HAL_GPIO_Init+0x26a>
90004092:	2308      	movs	r3, #8
90004094:	e029      	b.n	900040ea <HAL_GPIO_Init+0x26a>
90004096:	2307      	movs	r3, #7
90004098:	e027      	b.n	900040ea <HAL_GPIO_Init+0x26a>
9000409a:	2306      	movs	r3, #6
9000409c:	e025      	b.n	900040ea <HAL_GPIO_Init+0x26a>
9000409e:	2305      	movs	r3, #5
900040a0:	e023      	b.n	900040ea <HAL_GPIO_Init+0x26a>
900040a2:	2304      	movs	r3, #4
900040a4:	e021      	b.n	900040ea <HAL_GPIO_Init+0x26a>
900040a6:	2303      	movs	r3, #3
900040a8:	e01f      	b.n	900040ea <HAL_GPIO_Init+0x26a>
900040aa:	2302      	movs	r3, #2
900040ac:	e01d      	b.n	900040ea <HAL_GPIO_Init+0x26a>
900040ae:	2301      	movs	r3, #1
900040b0:	e01b      	b.n	900040ea <HAL_GPIO_Init+0x26a>
900040b2:	bf00      	nop
900040b4:	58000080 	.word	0x58000080
900040b8:	58024400 	.word	0x58024400
900040bc:	58000400 	.word	0x58000400
900040c0:	58020000 	.word	0x58020000
900040c4:	58020400 	.word	0x58020400
900040c8:	58020800 	.word	0x58020800
900040cc:	58020c00 	.word	0x58020c00
900040d0:	58021000 	.word	0x58021000
900040d4:	58021400 	.word	0x58021400
900040d8:	58021800 	.word	0x58021800
900040dc:	58021c00 	.word	0x58021c00
900040e0:	58022000 	.word	0x58022000
900040e4:	58022400 	.word	0x58022400
900040e8:	2300      	movs	r3, #0
900040ea:	69fa      	ldr	r2, [r7, #28]
900040ec:	f002 0203 	and.w	r2, r2, #3
900040f0:	0092      	lsls	r2, r2, #2
900040f2:	4093      	lsls	r3, r2
900040f4:	69ba      	ldr	r2, [r7, #24]
900040f6:	4313      	orrs	r3, r2
900040f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
900040fa:	4938      	ldr	r1, [pc, #224]	@ (900041dc <HAL_GPIO_Init+0x35c>)
900040fc:	69fb      	ldr	r3, [r7, #28]
900040fe:	089b      	lsrs	r3, r3, #2
90004100:	3302      	adds	r3, #2
90004102:	69ba      	ldr	r2, [r7, #24]
90004104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90004108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
9000410c:	681b      	ldr	r3, [r3, #0]
9000410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004110:	693b      	ldr	r3, [r7, #16]
90004112:	43db      	mvns	r3, r3
90004114:	69ba      	ldr	r2, [r7, #24]
90004116:	4013      	ands	r3, r2
90004118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
9000411a:	683b      	ldr	r3, [r7, #0]
9000411c:	685b      	ldr	r3, [r3, #4]
9000411e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90004122:	2b00      	cmp	r3, #0
90004124:	d003      	beq.n	9000412e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90004126:	69ba      	ldr	r2, [r7, #24]
90004128:	693b      	ldr	r3, [r7, #16]
9000412a:	4313      	orrs	r3, r2
9000412c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
9000412e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90004132:	69bb      	ldr	r3, [r7, #24]
90004134:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90004136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
9000413a:	685b      	ldr	r3, [r3, #4]
9000413c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000413e:	693b      	ldr	r3, [r7, #16]
90004140:	43db      	mvns	r3, r3
90004142:	69ba      	ldr	r2, [r7, #24]
90004144:	4013      	ands	r3, r2
90004146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90004148:	683b      	ldr	r3, [r7, #0]
9000414a:	685b      	ldr	r3, [r3, #4]
9000414c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004150:	2b00      	cmp	r3, #0
90004152:	d003      	beq.n	9000415c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90004154:	69ba      	ldr	r2, [r7, #24]
90004156:	693b      	ldr	r3, [r7, #16]
90004158:	4313      	orrs	r3, r2
9000415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
9000415c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90004160:	69bb      	ldr	r3, [r7, #24]
90004162:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90004164:	697b      	ldr	r3, [r7, #20]
90004166:	685b      	ldr	r3, [r3, #4]
90004168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000416a:	693b      	ldr	r3, [r7, #16]
9000416c:	43db      	mvns	r3, r3
9000416e:	69ba      	ldr	r2, [r7, #24]
90004170:	4013      	ands	r3, r2
90004172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90004174:	683b      	ldr	r3, [r7, #0]
90004176:	685b      	ldr	r3, [r3, #4]
90004178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000417c:	2b00      	cmp	r3, #0
9000417e:	d003      	beq.n	90004188 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90004180:	69ba      	ldr	r2, [r7, #24]
90004182:	693b      	ldr	r3, [r7, #16]
90004184:	4313      	orrs	r3, r2
90004186:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90004188:	697b      	ldr	r3, [r7, #20]
9000418a:	69ba      	ldr	r2, [r7, #24]
9000418c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
9000418e:	697b      	ldr	r3, [r7, #20]
90004190:	681b      	ldr	r3, [r3, #0]
90004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004194:	693b      	ldr	r3, [r7, #16]
90004196:	43db      	mvns	r3, r3
90004198:	69ba      	ldr	r2, [r7, #24]
9000419a:	4013      	ands	r3, r2
9000419c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
9000419e:	683b      	ldr	r3, [r7, #0]
900041a0:	685b      	ldr	r3, [r3, #4]
900041a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
900041a6:	2b00      	cmp	r3, #0
900041a8:	d003      	beq.n	900041b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
900041aa:	69ba      	ldr	r2, [r7, #24]
900041ac:	693b      	ldr	r3, [r7, #16]
900041ae:	4313      	orrs	r3, r2
900041b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
900041b2:	697b      	ldr	r3, [r7, #20]
900041b4:	69ba      	ldr	r2, [r7, #24]
900041b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
900041b8:	69fb      	ldr	r3, [r7, #28]
900041ba:	3301      	adds	r3, #1
900041bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900041be:	683b      	ldr	r3, [r7, #0]
900041c0:	681a      	ldr	r2, [r3, #0]
900041c2:	69fb      	ldr	r3, [r7, #28]
900041c4:	fa22 f303 	lsr.w	r3, r2, r3
900041c8:	2b00      	cmp	r3, #0
900041ca:	f47f ae63 	bne.w	90003e94 <HAL_GPIO_Init+0x14>
  }
}
900041ce:	bf00      	nop
900041d0:	bf00      	nop
900041d2:	3724      	adds	r7, #36	@ 0x24
900041d4:	46bd      	mov	sp, r7
900041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
900041da:	4770      	bx	lr
900041dc:	58000400 	.word	0x58000400

900041e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
900041e0:	b480      	push	{r7}
900041e2:	b085      	sub	sp, #20
900041e4:	af00      	add	r7, sp, #0
900041e6:	6078      	str	r0, [r7, #4]
900041e8:	460b      	mov	r3, r1
900041ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
900041ec:	687b      	ldr	r3, [r7, #4]
900041ee:	691a      	ldr	r2, [r3, #16]
900041f0:	887b      	ldrh	r3, [r7, #2]
900041f2:	4013      	ands	r3, r2
900041f4:	2b00      	cmp	r3, #0
900041f6:	d002      	beq.n	900041fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
900041f8:	2301      	movs	r3, #1
900041fa:	73fb      	strb	r3, [r7, #15]
900041fc:	e001      	b.n	90004202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
900041fe:	2300      	movs	r3, #0
90004200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90004202:	7bfb      	ldrb	r3, [r7, #15]
}
90004204:	4618      	mov	r0, r3
90004206:	3714      	adds	r7, #20
90004208:	46bd      	mov	sp, r7
9000420a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000420e:	4770      	bx	lr

90004210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90004210:	b480      	push	{r7}
90004212:	b083      	sub	sp, #12
90004214:	af00      	add	r7, sp, #0
90004216:	6078      	str	r0, [r7, #4]
90004218:	460b      	mov	r3, r1
9000421a:	807b      	strh	r3, [r7, #2]
9000421c:	4613      	mov	r3, r2
9000421e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90004220:	787b      	ldrb	r3, [r7, #1]
90004222:	2b00      	cmp	r3, #0
90004224:	d003      	beq.n	9000422e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90004226:	887a      	ldrh	r2, [r7, #2]
90004228:	687b      	ldr	r3, [r7, #4]
9000422a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
9000422c:	e003      	b.n	90004236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000422e:	887b      	ldrh	r3, [r7, #2]
90004230:	041a      	lsls	r2, r3, #16
90004232:	687b      	ldr	r3, [r7, #4]
90004234:	619a      	str	r2, [r3, #24]
}
90004236:	bf00      	nop
90004238:	370c      	adds	r7, #12
9000423a:	46bd      	mov	sp, r7
9000423c:	f85d 7b04 	ldr.w	r7, [sp], #4
90004240:	4770      	bx	lr

90004242 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90004242:	b580      	push	{r7, lr}
90004244:	b086      	sub	sp, #24
90004246:	af00      	add	r7, sp, #0
90004248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000424a:	687b      	ldr	r3, [r7, #4]
9000424c:	681b      	ldr	r3, [r3, #0]
9000424e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004250:	693b      	ldr	r3, [r7, #16]
90004252:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90004254:	687b      	ldr	r3, [r7, #4]
90004256:	681b      	ldr	r3, [r3, #0]
90004258:	4618      	mov	r0, r3
9000425a:	f007 ff59 	bl	9000c110 <USB_GetMode>
9000425e:	4603      	mov	r3, r0
90004260:	2b01      	cmp	r3, #1
90004262:	f040 80fb 	bne.w	9000445c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90004266:	687b      	ldr	r3, [r7, #4]
90004268:	681b      	ldr	r3, [r3, #0]
9000426a:	4618      	mov	r0, r3
9000426c:	f007 ff1c 	bl	9000c0a8 <USB_ReadInterrupts>
90004270:	4603      	mov	r3, r0
90004272:	2b00      	cmp	r3, #0
90004274:	f000 80f1 	beq.w	9000445a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90004278:	687b      	ldr	r3, [r7, #4]
9000427a:	681b      	ldr	r3, [r3, #0]
9000427c:	4618      	mov	r0, r3
9000427e:	f007 ff13 	bl	9000c0a8 <USB_ReadInterrupts>
90004282:	4603      	mov	r3, r0
90004284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
9000428c:	d104      	bne.n	90004298 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
9000428e:	687b      	ldr	r3, [r7, #4]
90004290:	681b      	ldr	r3, [r3, #0]
90004292:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90004296:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90004298:	687b      	ldr	r3, [r7, #4]
9000429a:	681b      	ldr	r3, [r3, #0]
9000429c:	4618      	mov	r0, r3
9000429e:	f007 ff03 	bl	9000c0a8 <USB_ReadInterrupts>
900042a2:	4603      	mov	r3, r0
900042a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
900042a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
900042ac:	d104      	bne.n	900042b8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
900042ae:	687b      	ldr	r3, [r7, #4]
900042b0:	681b      	ldr	r3, [r3, #0]
900042b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
900042b6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
900042b8:	687b      	ldr	r3, [r7, #4]
900042ba:	681b      	ldr	r3, [r3, #0]
900042bc:	4618      	mov	r0, r3
900042be:	f007 fef3 	bl	9000c0a8 <USB_ReadInterrupts>
900042c2:	4603      	mov	r3, r0
900042c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
900042c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
900042cc:	d104      	bne.n	900042d8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
900042ce:	687b      	ldr	r3, [r7, #4]
900042d0:	681b      	ldr	r3, [r3, #0]
900042d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
900042d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
900042d8:	687b      	ldr	r3, [r7, #4]
900042da:	681b      	ldr	r3, [r3, #0]
900042dc:	4618      	mov	r0, r3
900042de:	f007 fee3 	bl	9000c0a8 <USB_ReadInterrupts>
900042e2:	4603      	mov	r3, r0
900042e4:	f003 0302 	and.w	r3, r3, #2
900042e8:	2b02      	cmp	r3, #2
900042ea:	d103      	bne.n	900042f4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
900042ec:	687b      	ldr	r3, [r7, #4]
900042ee:	681b      	ldr	r3, [r3, #0]
900042f0:	2202      	movs	r2, #2
900042f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
900042f4:	687b      	ldr	r3, [r7, #4]
900042f6:	681b      	ldr	r3, [r3, #0]
900042f8:	4618      	mov	r0, r3
900042fa:	f007 fed5 	bl	9000c0a8 <USB_ReadInterrupts>
900042fe:	4603      	mov	r3, r0
90004300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90004304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90004308:	d120      	bne.n	9000434c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
9000430a:	687b      	ldr	r3, [r7, #4]
9000430c:	681b      	ldr	r3, [r3, #0]
9000430e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90004312:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90004314:	68fb      	ldr	r3, [r7, #12]
90004316:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000431a:	681b      	ldr	r3, [r3, #0]
9000431c:	f003 0301 	and.w	r3, r3, #1
90004320:	2b00      	cmp	r3, #0
90004322:	d113      	bne.n	9000434c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90004324:	2110      	movs	r1, #16
90004326:	6938      	ldr	r0, [r7, #16]
90004328:	f007 fe06 	bl	9000bf38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
9000432c:	6938      	ldr	r0, [r7, #16]
9000432e:	f007 fe35 	bl	9000bf9c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90004332:	687b      	ldr	r3, [r7, #4]
90004334:	7a5b      	ldrb	r3, [r3, #9]
90004336:	2b02      	cmp	r3, #2
90004338:	d105      	bne.n	90004346 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000433a:	687b      	ldr	r3, [r7, #4]
9000433c:	681b      	ldr	r3, [r3, #0]
9000433e:	2101      	movs	r1, #1
90004340:	4618      	mov	r0, r3
90004342:	f007 fef3 	bl	9000c12c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90004346:	6878      	ldr	r0, [r7, #4]
90004348:	f7fd f80a 	bl	90001360 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
9000434c:	687b      	ldr	r3, [r7, #4]
9000434e:	681b      	ldr	r3, [r3, #0]
90004350:	4618      	mov	r0, r3
90004352:	f007 fea9 	bl	9000c0a8 <USB_ReadInterrupts>
90004356:	4603      	mov	r3, r0
90004358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
9000435c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90004360:	d102      	bne.n	90004368 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90004362:	6878      	ldr	r0, [r7, #4]
90004364:	f001 fca1 	bl	90005caa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90004368:	687b      	ldr	r3, [r7, #4]
9000436a:	681b      	ldr	r3, [r3, #0]
9000436c:	4618      	mov	r0, r3
9000436e:	f007 fe9b 	bl	9000c0a8 <USB_ReadInterrupts>
90004372:	4603      	mov	r3, r0
90004374:	f003 0308 	and.w	r3, r3, #8
90004378:	2b08      	cmp	r3, #8
9000437a:	d106      	bne.n	9000438a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
9000437c:	6878      	ldr	r0, [r7, #4]
9000437e:	f7fc ffd3 	bl	90001328 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90004382:	687b      	ldr	r3, [r7, #4]
90004384:	681b      	ldr	r3, [r3, #0]
90004386:	2208      	movs	r2, #8
90004388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
9000438a:	687b      	ldr	r3, [r7, #4]
9000438c:	681b      	ldr	r3, [r3, #0]
9000438e:	4618      	mov	r0, r3
90004390:	f007 fe8a 	bl	9000c0a8 <USB_ReadInterrupts>
90004394:	4603      	mov	r3, r0
90004396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000439a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000439e:	d139      	bne.n	90004414 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
900043a0:	687b      	ldr	r3, [r7, #4]
900043a2:	681b      	ldr	r3, [r3, #0]
900043a4:	4618      	mov	r0, r3
900043a6:	f007 fefe 	bl	9000c1a6 <USB_HC_ReadInterrupt>
900043aa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900043ac:	2300      	movs	r3, #0
900043ae:	617b      	str	r3, [r7, #20]
900043b0:	e025      	b.n	900043fe <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
900043b2:	697b      	ldr	r3, [r7, #20]
900043b4:	f003 030f 	and.w	r3, r3, #15
900043b8:	68ba      	ldr	r2, [r7, #8]
900043ba:	fa22 f303 	lsr.w	r3, r2, r3
900043be:	f003 0301 	and.w	r3, r3, #1
900043c2:	2b00      	cmp	r3, #0
900043c4:	d018      	beq.n	900043f8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900043c6:	697b      	ldr	r3, [r7, #20]
900043c8:	015a      	lsls	r2, r3, #5
900043ca:	68fb      	ldr	r3, [r7, #12]
900043cc:	4413      	add	r3, r2
900043ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043d2:	681b      	ldr	r3, [r3, #0]
900043d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
900043d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900043dc:	d106      	bne.n	900043ec <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
900043de:	697b      	ldr	r3, [r7, #20]
900043e0:	b2db      	uxtb	r3, r3
900043e2:	4619      	mov	r1, r3
900043e4:	6878      	ldr	r0, [r7, #4]
900043e6:	f000 f859 	bl	9000449c <HCD_HC_IN_IRQHandler>
900043ea:	e005      	b.n	900043f8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
900043ec:	697b      	ldr	r3, [r7, #20]
900043ee:	b2db      	uxtb	r3, r3
900043f0:	4619      	mov	r1, r3
900043f2:	6878      	ldr	r0, [r7, #4]
900043f4:	f000 febb 	bl	9000516e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900043f8:	697b      	ldr	r3, [r7, #20]
900043fa:	3301      	adds	r3, #1
900043fc:	617b      	str	r3, [r7, #20]
900043fe:	687b      	ldr	r3, [r7, #4]
90004400:	795b      	ldrb	r3, [r3, #5]
90004402:	461a      	mov	r2, r3
90004404:	697b      	ldr	r3, [r7, #20]
90004406:	4293      	cmp	r3, r2
90004408:	d3d3      	bcc.n	900043b2 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
9000440a:	687b      	ldr	r3, [r7, #4]
9000440c:	681b      	ldr	r3, [r3, #0]
9000440e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90004412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90004414:	687b      	ldr	r3, [r7, #4]
90004416:	681b      	ldr	r3, [r3, #0]
90004418:	4618      	mov	r0, r3
9000441a:	f007 fe45 	bl	9000c0a8 <USB_ReadInterrupts>
9000441e:	4603      	mov	r3, r0
90004420:	f003 0310 	and.w	r3, r3, #16
90004424:	2b10      	cmp	r3, #16
90004426:	d101      	bne.n	9000442c <HAL_HCD_IRQHandler+0x1ea>
90004428:	2301      	movs	r3, #1
9000442a:	e000      	b.n	9000442e <HAL_HCD_IRQHandler+0x1ec>
9000442c:	2300      	movs	r3, #0
9000442e:	2b00      	cmp	r3, #0
90004430:	d014      	beq.n	9000445c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004432:	687b      	ldr	r3, [r7, #4]
90004434:	681b      	ldr	r3, [r3, #0]
90004436:	699a      	ldr	r2, [r3, #24]
90004438:	687b      	ldr	r3, [r7, #4]
9000443a:	681b      	ldr	r3, [r3, #0]
9000443c:	f022 0210 	bic.w	r2, r2, #16
90004440:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90004442:	6878      	ldr	r0, [r7, #4]
90004444:	f001 fb52 	bl	90005aec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004448:	687b      	ldr	r3, [r7, #4]
9000444a:	681b      	ldr	r3, [r3, #0]
9000444c:	699a      	ldr	r2, [r3, #24]
9000444e:	687b      	ldr	r3, [r7, #4]
90004450:	681b      	ldr	r3, [r3, #0]
90004452:	f042 0210 	orr.w	r2, r2, #16
90004456:	619a      	str	r2, [r3, #24]
90004458:	e000      	b.n	9000445c <HAL_HCD_IRQHandler+0x21a>
      return;
9000445a:	bf00      	nop
    }
  }
}
9000445c:	3718      	adds	r7, #24
9000445e:	46bd      	mov	sp, r7
90004460:	bd80      	pop	{r7, pc}

90004462 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
90004462:	b580      	push	{r7, lr}
90004464:	b082      	sub	sp, #8
90004466:	af00      	add	r7, sp, #0
90004468:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
9000446a:	687b      	ldr	r3, [r7, #4]
9000446c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004470:	2b01      	cmp	r3, #1
90004472:	d101      	bne.n	90004478 <HAL_HCD_Stop+0x16>
90004474:	2302      	movs	r3, #2
90004476:	e00d      	b.n	90004494 <HAL_HCD_Stop+0x32>
90004478:	687b      	ldr	r3, [r7, #4]
9000447a:	2201      	movs	r2, #1
9000447c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90004480:	687b      	ldr	r3, [r7, #4]
90004482:	681b      	ldr	r3, [r3, #0]
90004484:	4618      	mov	r0, r3
90004486:	f007 ffbf 	bl	9000c408 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
9000448a:	687b      	ldr	r3, [r7, #4]
9000448c:	2200      	movs	r2, #0
9000448e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
90004492:	2300      	movs	r3, #0
}
90004494:	4618      	mov	r0, r3
90004496:	3708      	adds	r7, #8
90004498:	46bd      	mov	sp, r7
9000449a:	bd80      	pop	{r7, pc}

9000449c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
9000449c:	b580      	push	{r7, lr}
9000449e:	b086      	sub	sp, #24
900044a0:	af00      	add	r7, sp, #0
900044a2:	6078      	str	r0, [r7, #4]
900044a4:	460b      	mov	r3, r1
900044a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900044a8:	687b      	ldr	r3, [r7, #4]
900044aa:	681b      	ldr	r3, [r3, #0]
900044ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900044ae:	697b      	ldr	r3, [r7, #20]
900044b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
900044b2:	687b      	ldr	r3, [r7, #4]
900044b4:	681b      	ldr	r3, [r3, #0]
900044b6:	78fa      	ldrb	r2, [r7, #3]
900044b8:	4611      	mov	r1, r2
900044ba:	4618      	mov	r0, r3
900044bc:	f007 fe07 	bl	9000c0ce <USB_ReadChInterrupts>
900044c0:	4603      	mov	r3, r0
900044c2:	f003 0304 	and.w	r3, r3, #4
900044c6:	2b04      	cmp	r3, #4
900044c8:	d11a      	bne.n	90004500 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
900044ca:	78fb      	ldrb	r3, [r7, #3]
900044cc:	015a      	lsls	r2, r3, #5
900044ce:	693b      	ldr	r3, [r7, #16]
900044d0:	4413      	add	r3, r2
900044d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044d6:	461a      	mov	r2, r3
900044d8:	2304      	movs	r3, #4
900044da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900044dc:	78fa      	ldrb	r2, [r7, #3]
900044de:	6879      	ldr	r1, [r7, #4]
900044e0:	4613      	mov	r3, r2
900044e2:	011b      	lsls	r3, r3, #4
900044e4:	1a9b      	subs	r3, r3, r2
900044e6:	009b      	lsls	r3, r3, #2
900044e8:	440b      	add	r3, r1
900044ea:	334d      	adds	r3, #77	@ 0x4d
900044ec:	2207      	movs	r2, #7
900044ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900044f0:	687b      	ldr	r3, [r7, #4]
900044f2:	681b      	ldr	r3, [r3, #0]
900044f4:	78fa      	ldrb	r2, [r7, #3]
900044f6:	4611      	mov	r1, r2
900044f8:	4618      	mov	r0, r3
900044fa:	f007 fe65 	bl	9000c1c8 <USB_HC_Halt>
900044fe:	e09e      	b.n	9000463e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
90004500:	687b      	ldr	r3, [r7, #4]
90004502:	681b      	ldr	r3, [r3, #0]
90004504:	78fa      	ldrb	r2, [r7, #3]
90004506:	4611      	mov	r1, r2
90004508:	4618      	mov	r0, r3
9000450a:	f007 fde0 	bl	9000c0ce <USB_ReadChInterrupts>
9000450e:	4603      	mov	r3, r0
90004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90004514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90004518:	d11b      	bne.n	90004552 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
9000451a:	78fb      	ldrb	r3, [r7, #3]
9000451c:	015a      	lsls	r2, r3, #5
9000451e:	693b      	ldr	r3, [r7, #16]
90004520:	4413      	add	r3, r2
90004522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004526:	461a      	mov	r2, r3
90004528:	f44f 7380 	mov.w	r3, #256	@ 0x100
9000452c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
9000452e:	78fa      	ldrb	r2, [r7, #3]
90004530:	6879      	ldr	r1, [r7, #4]
90004532:	4613      	mov	r3, r2
90004534:	011b      	lsls	r3, r3, #4
90004536:	1a9b      	subs	r3, r3, r2
90004538:	009b      	lsls	r3, r3, #2
9000453a:	440b      	add	r3, r1
9000453c:	334d      	adds	r3, #77	@ 0x4d
9000453e:	2208      	movs	r2, #8
90004540:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004542:	687b      	ldr	r3, [r7, #4]
90004544:	681b      	ldr	r3, [r3, #0]
90004546:	78fa      	ldrb	r2, [r7, #3]
90004548:	4611      	mov	r1, r2
9000454a:	4618      	mov	r0, r3
9000454c:	f007 fe3c 	bl	9000c1c8 <USB_HC_Halt>
90004550:	e075      	b.n	9000463e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90004552:	687b      	ldr	r3, [r7, #4]
90004554:	681b      	ldr	r3, [r3, #0]
90004556:	78fa      	ldrb	r2, [r7, #3]
90004558:	4611      	mov	r1, r2
9000455a:	4618      	mov	r0, r3
9000455c:	f007 fdb7 	bl	9000c0ce <USB_ReadChInterrupts>
90004560:	4603      	mov	r3, r0
90004562:	f003 0308 	and.w	r3, r3, #8
90004566:	2b08      	cmp	r3, #8
90004568:	d11a      	bne.n	900045a0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000456a:	78fb      	ldrb	r3, [r7, #3]
9000456c:	015a      	lsls	r2, r3, #5
9000456e:	693b      	ldr	r3, [r7, #16]
90004570:	4413      	add	r3, r2
90004572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004576:	461a      	mov	r2, r3
90004578:	2308      	movs	r3, #8
9000457a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
9000457c:	78fa      	ldrb	r2, [r7, #3]
9000457e:	6879      	ldr	r1, [r7, #4]
90004580:	4613      	mov	r3, r2
90004582:	011b      	lsls	r3, r3, #4
90004584:	1a9b      	subs	r3, r3, r2
90004586:	009b      	lsls	r3, r3, #2
90004588:	440b      	add	r3, r1
9000458a:	334d      	adds	r3, #77	@ 0x4d
9000458c:	2206      	movs	r2, #6
9000458e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004590:	687b      	ldr	r3, [r7, #4]
90004592:	681b      	ldr	r3, [r3, #0]
90004594:	78fa      	ldrb	r2, [r7, #3]
90004596:	4611      	mov	r1, r2
90004598:	4618      	mov	r0, r3
9000459a:	f007 fe15 	bl	9000c1c8 <USB_HC_Halt>
9000459e:	e04e      	b.n	9000463e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900045a0:	687b      	ldr	r3, [r7, #4]
900045a2:	681b      	ldr	r3, [r3, #0]
900045a4:	78fa      	ldrb	r2, [r7, #3]
900045a6:	4611      	mov	r1, r2
900045a8:	4618      	mov	r0, r3
900045aa:	f007 fd90 	bl	9000c0ce <USB_ReadChInterrupts>
900045ae:	4603      	mov	r3, r0
900045b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900045b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900045b8:	d11b      	bne.n	900045f2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900045ba:	78fb      	ldrb	r3, [r7, #3]
900045bc:	015a      	lsls	r2, r3, #5
900045be:	693b      	ldr	r3, [r7, #16]
900045c0:	4413      	add	r3, r2
900045c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900045c6:	461a      	mov	r2, r3
900045c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900045cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
900045ce:	78fa      	ldrb	r2, [r7, #3]
900045d0:	6879      	ldr	r1, [r7, #4]
900045d2:	4613      	mov	r3, r2
900045d4:	011b      	lsls	r3, r3, #4
900045d6:	1a9b      	subs	r3, r3, r2
900045d8:	009b      	lsls	r3, r3, #2
900045da:	440b      	add	r3, r1
900045dc:	334d      	adds	r3, #77	@ 0x4d
900045de:	2209      	movs	r2, #9
900045e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900045e2:	687b      	ldr	r3, [r7, #4]
900045e4:	681b      	ldr	r3, [r3, #0]
900045e6:	78fa      	ldrb	r2, [r7, #3]
900045e8:	4611      	mov	r1, r2
900045ea:	4618      	mov	r0, r3
900045ec:	f007 fdec 	bl	9000c1c8 <USB_HC_Halt>
900045f0:	e025      	b.n	9000463e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
900045f2:	687b      	ldr	r3, [r7, #4]
900045f4:	681b      	ldr	r3, [r3, #0]
900045f6:	78fa      	ldrb	r2, [r7, #3]
900045f8:	4611      	mov	r1, r2
900045fa:	4618      	mov	r0, r3
900045fc:	f007 fd67 	bl	9000c0ce <USB_ReadChInterrupts>
90004600:	4603      	mov	r3, r0
90004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90004606:	2b80      	cmp	r3, #128	@ 0x80
90004608:	d119      	bne.n	9000463e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000460a:	78fb      	ldrb	r3, [r7, #3]
9000460c:	015a      	lsls	r2, r3, #5
9000460e:	693b      	ldr	r3, [r7, #16]
90004610:	4413      	add	r3, r2
90004612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004616:	461a      	mov	r2, r3
90004618:	2380      	movs	r3, #128	@ 0x80
9000461a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
9000461c:	78fa      	ldrb	r2, [r7, #3]
9000461e:	6879      	ldr	r1, [r7, #4]
90004620:	4613      	mov	r3, r2
90004622:	011b      	lsls	r3, r3, #4
90004624:	1a9b      	subs	r3, r3, r2
90004626:	009b      	lsls	r3, r3, #2
90004628:	440b      	add	r3, r1
9000462a:	334d      	adds	r3, #77	@ 0x4d
9000462c:	2207      	movs	r2, #7
9000462e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004630:	687b      	ldr	r3, [r7, #4]
90004632:	681b      	ldr	r3, [r3, #0]
90004634:	78fa      	ldrb	r2, [r7, #3]
90004636:	4611      	mov	r1, r2
90004638:	4618      	mov	r0, r3
9000463a:	f007 fdc5 	bl	9000c1c8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
9000463e:	687b      	ldr	r3, [r7, #4]
90004640:	681b      	ldr	r3, [r3, #0]
90004642:	78fa      	ldrb	r2, [r7, #3]
90004644:	4611      	mov	r1, r2
90004646:	4618      	mov	r0, r3
90004648:	f007 fd41 	bl	9000c0ce <USB_ReadChInterrupts>
9000464c:	4603      	mov	r3, r0
9000464e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004656:	d112      	bne.n	9000467e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004658:	687b      	ldr	r3, [r7, #4]
9000465a:	681b      	ldr	r3, [r3, #0]
9000465c:	78fa      	ldrb	r2, [r7, #3]
9000465e:	4611      	mov	r1, r2
90004660:	4618      	mov	r0, r3
90004662:	f007 fdb1 	bl	9000c1c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004666:	78fb      	ldrb	r3, [r7, #3]
90004668:	015a      	lsls	r2, r3, #5
9000466a:	693b      	ldr	r3, [r7, #16]
9000466c:	4413      	add	r3, r2
9000466e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004672:	461a      	mov	r2, r3
90004674:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004678:	6093      	str	r3, [r2, #8]
9000467a:	f000 bd75 	b.w	90005168 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
9000467e:	687b      	ldr	r3, [r7, #4]
90004680:	681b      	ldr	r3, [r3, #0]
90004682:	78fa      	ldrb	r2, [r7, #3]
90004684:	4611      	mov	r1, r2
90004686:	4618      	mov	r0, r3
90004688:	f007 fd21 	bl	9000c0ce <USB_ReadChInterrupts>
9000468c:	4603      	mov	r3, r0
9000468e:	f003 0301 	and.w	r3, r3, #1
90004692:	2b01      	cmp	r3, #1
90004694:	f040 8128 	bne.w	900048e8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004698:	78fb      	ldrb	r3, [r7, #3]
9000469a:	015a      	lsls	r2, r3, #5
9000469c:	693b      	ldr	r3, [r7, #16]
9000469e:	4413      	add	r3, r2
900046a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046a4:	461a      	mov	r2, r3
900046a6:	2320      	movs	r3, #32
900046a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
900046aa:	78fa      	ldrb	r2, [r7, #3]
900046ac:	6879      	ldr	r1, [r7, #4]
900046ae:	4613      	mov	r3, r2
900046b0:	011b      	lsls	r3, r3, #4
900046b2:	1a9b      	subs	r3, r3, r2
900046b4:	009b      	lsls	r3, r3, #2
900046b6:	440b      	add	r3, r1
900046b8:	331b      	adds	r3, #27
900046ba:	781b      	ldrb	r3, [r3, #0]
900046bc:	2b01      	cmp	r3, #1
900046be:	d119      	bne.n	900046f4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900046c0:	78fa      	ldrb	r2, [r7, #3]
900046c2:	6879      	ldr	r1, [r7, #4]
900046c4:	4613      	mov	r3, r2
900046c6:	011b      	lsls	r3, r3, #4
900046c8:	1a9b      	subs	r3, r3, r2
900046ca:	009b      	lsls	r3, r3, #2
900046cc:	440b      	add	r3, r1
900046ce:	331b      	adds	r3, #27
900046d0:	2200      	movs	r2, #0
900046d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900046d4:	78fb      	ldrb	r3, [r7, #3]
900046d6:	015a      	lsls	r2, r3, #5
900046d8:	693b      	ldr	r3, [r7, #16]
900046da:	4413      	add	r3, r2
900046dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046e0:	685b      	ldr	r3, [r3, #4]
900046e2:	78fa      	ldrb	r2, [r7, #3]
900046e4:	0151      	lsls	r1, r2, #5
900046e6:	693a      	ldr	r2, [r7, #16]
900046e8:	440a      	add	r2, r1
900046ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900046ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900046f2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
900046f4:	687b      	ldr	r3, [r7, #4]
900046f6:	799b      	ldrb	r3, [r3, #6]
900046f8:	2b00      	cmp	r3, #0
900046fa:	d01b      	beq.n	90004734 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900046fc:	78fa      	ldrb	r2, [r7, #3]
900046fe:	6879      	ldr	r1, [r7, #4]
90004700:	4613      	mov	r3, r2
90004702:	011b      	lsls	r3, r3, #4
90004704:	1a9b      	subs	r3, r3, r2
90004706:	009b      	lsls	r3, r3, #2
90004708:	440b      	add	r3, r1
9000470a:	3330      	adds	r3, #48	@ 0x30
9000470c:	6819      	ldr	r1, [r3, #0]
9000470e:	78fb      	ldrb	r3, [r7, #3]
90004710:	015a      	lsls	r2, r3, #5
90004712:	693b      	ldr	r3, [r7, #16]
90004714:	4413      	add	r3, r2
90004716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000471a:	691b      	ldr	r3, [r3, #16]
9000471c:	f3c3 0312 	ubfx	r3, r3, #0, #19
90004720:	78fa      	ldrb	r2, [r7, #3]
90004722:	1ac9      	subs	r1, r1, r3
90004724:	6878      	ldr	r0, [r7, #4]
90004726:	4613      	mov	r3, r2
90004728:	011b      	lsls	r3, r3, #4
9000472a:	1a9b      	subs	r3, r3, r2
9000472c:	009b      	lsls	r3, r3, #2
9000472e:	4403      	add	r3, r0
90004730:	3338      	adds	r3, #56	@ 0x38
90004732:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004734:	78fa      	ldrb	r2, [r7, #3]
90004736:	6879      	ldr	r1, [r7, #4]
90004738:	4613      	mov	r3, r2
9000473a:	011b      	lsls	r3, r3, #4
9000473c:	1a9b      	subs	r3, r3, r2
9000473e:	009b      	lsls	r3, r3, #2
90004740:	440b      	add	r3, r1
90004742:	334d      	adds	r3, #77	@ 0x4d
90004744:	2201      	movs	r2, #1
90004746:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004748:	78fa      	ldrb	r2, [r7, #3]
9000474a:	6879      	ldr	r1, [r7, #4]
9000474c:	4613      	mov	r3, r2
9000474e:	011b      	lsls	r3, r3, #4
90004750:	1a9b      	subs	r3, r3, r2
90004752:	009b      	lsls	r3, r3, #2
90004754:	440b      	add	r3, r1
90004756:	3344      	adds	r3, #68	@ 0x44
90004758:	2200      	movs	r2, #0
9000475a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
9000475c:	78fb      	ldrb	r3, [r7, #3]
9000475e:	015a      	lsls	r2, r3, #5
90004760:	693b      	ldr	r3, [r7, #16]
90004762:	4413      	add	r3, r2
90004764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004768:	461a      	mov	r2, r3
9000476a:	2301      	movs	r3, #1
9000476c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000476e:	78fa      	ldrb	r2, [r7, #3]
90004770:	6879      	ldr	r1, [r7, #4]
90004772:	4613      	mov	r3, r2
90004774:	011b      	lsls	r3, r3, #4
90004776:	1a9b      	subs	r3, r3, r2
90004778:	009b      	lsls	r3, r3, #2
9000477a:	440b      	add	r3, r1
9000477c:	3326      	adds	r3, #38	@ 0x26
9000477e:	781b      	ldrb	r3, [r3, #0]
90004780:	2b00      	cmp	r3, #0
90004782:	d00a      	beq.n	9000479a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004784:	78fa      	ldrb	r2, [r7, #3]
90004786:	6879      	ldr	r1, [r7, #4]
90004788:	4613      	mov	r3, r2
9000478a:	011b      	lsls	r3, r3, #4
9000478c:	1a9b      	subs	r3, r3, r2
9000478e:	009b      	lsls	r3, r3, #2
90004790:	440b      	add	r3, r1
90004792:	3326      	adds	r3, #38	@ 0x26
90004794:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004796:	2b02      	cmp	r3, #2
90004798:	d110      	bne.n	900047bc <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000479a:	687b      	ldr	r3, [r7, #4]
9000479c:	681b      	ldr	r3, [r3, #0]
9000479e:	78fa      	ldrb	r2, [r7, #3]
900047a0:	4611      	mov	r1, r2
900047a2:	4618      	mov	r0, r3
900047a4:	f007 fd10 	bl	9000c1c8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
900047a8:	78fb      	ldrb	r3, [r7, #3]
900047aa:	015a      	lsls	r2, r3, #5
900047ac:	693b      	ldr	r3, [r7, #16]
900047ae:	4413      	add	r3, r2
900047b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047b4:	461a      	mov	r2, r3
900047b6:	2310      	movs	r3, #16
900047b8:	6093      	str	r3, [r2, #8]
900047ba:	e03d      	b.n	90004838 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900047bc:	78fa      	ldrb	r2, [r7, #3]
900047be:	6879      	ldr	r1, [r7, #4]
900047c0:	4613      	mov	r3, r2
900047c2:	011b      	lsls	r3, r3, #4
900047c4:	1a9b      	subs	r3, r3, r2
900047c6:	009b      	lsls	r3, r3, #2
900047c8:	440b      	add	r3, r1
900047ca:	3326      	adds	r3, #38	@ 0x26
900047cc:	781b      	ldrb	r3, [r3, #0]
900047ce:	2b03      	cmp	r3, #3
900047d0:	d00a      	beq.n	900047e8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
900047d2:	78fa      	ldrb	r2, [r7, #3]
900047d4:	6879      	ldr	r1, [r7, #4]
900047d6:	4613      	mov	r3, r2
900047d8:	011b      	lsls	r3, r3, #4
900047da:	1a9b      	subs	r3, r3, r2
900047dc:	009b      	lsls	r3, r3, #2
900047de:	440b      	add	r3, r1
900047e0:	3326      	adds	r3, #38	@ 0x26
900047e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900047e4:	2b01      	cmp	r3, #1
900047e6:	d127      	bne.n	90004838 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900047e8:	78fb      	ldrb	r3, [r7, #3]
900047ea:	015a      	lsls	r2, r3, #5
900047ec:	693b      	ldr	r3, [r7, #16]
900047ee:	4413      	add	r3, r2
900047f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900047f4:	681b      	ldr	r3, [r3, #0]
900047f6:	78fa      	ldrb	r2, [r7, #3]
900047f8:	0151      	lsls	r1, r2, #5
900047fa:	693a      	ldr	r2, [r7, #16]
900047fc:	440a      	add	r2, r1
900047fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004802:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
90004806:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004808:	78fa      	ldrb	r2, [r7, #3]
9000480a:	6879      	ldr	r1, [r7, #4]
9000480c:	4613      	mov	r3, r2
9000480e:	011b      	lsls	r3, r3, #4
90004810:	1a9b      	subs	r3, r3, r2
90004812:	009b      	lsls	r3, r3, #2
90004814:	440b      	add	r3, r1
90004816:	334c      	adds	r3, #76	@ 0x4c
90004818:	2201      	movs	r2, #1
9000481a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000481c:	78fa      	ldrb	r2, [r7, #3]
9000481e:	6879      	ldr	r1, [r7, #4]
90004820:	4613      	mov	r3, r2
90004822:	011b      	lsls	r3, r3, #4
90004824:	1a9b      	subs	r3, r3, r2
90004826:	009b      	lsls	r3, r3, #2
90004828:	440b      	add	r3, r1
9000482a:	334c      	adds	r3, #76	@ 0x4c
9000482c:	781a      	ldrb	r2, [r3, #0]
9000482e:	78fb      	ldrb	r3, [r7, #3]
90004830:	4619      	mov	r1, r3
90004832:	6878      	ldr	r0, [r7, #4]
90004834:	f7fc fdbe 	bl	900013b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
90004838:	687b      	ldr	r3, [r7, #4]
9000483a:	799b      	ldrb	r3, [r3, #6]
9000483c:	2b01      	cmp	r3, #1
9000483e:	d13b      	bne.n	900048b8 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
90004840:	78fa      	ldrb	r2, [r7, #3]
90004842:	6879      	ldr	r1, [r7, #4]
90004844:	4613      	mov	r3, r2
90004846:	011b      	lsls	r3, r3, #4
90004848:	1a9b      	subs	r3, r3, r2
9000484a:	009b      	lsls	r3, r3, #2
9000484c:	440b      	add	r3, r1
9000484e:	3338      	adds	r3, #56	@ 0x38
90004850:	6819      	ldr	r1, [r3, #0]
90004852:	78fa      	ldrb	r2, [r7, #3]
90004854:	6878      	ldr	r0, [r7, #4]
90004856:	4613      	mov	r3, r2
90004858:	011b      	lsls	r3, r3, #4
9000485a:	1a9b      	subs	r3, r3, r2
9000485c:	009b      	lsls	r3, r3, #2
9000485e:	4403      	add	r3, r0
90004860:	3328      	adds	r3, #40	@ 0x28
90004862:	881b      	ldrh	r3, [r3, #0]
90004864:	440b      	add	r3, r1
90004866:	1e59      	subs	r1, r3, #1
90004868:	78fa      	ldrb	r2, [r7, #3]
9000486a:	6878      	ldr	r0, [r7, #4]
9000486c:	4613      	mov	r3, r2
9000486e:	011b      	lsls	r3, r3, #4
90004870:	1a9b      	subs	r3, r3, r2
90004872:	009b      	lsls	r3, r3, #2
90004874:	4403      	add	r3, r0
90004876:	3328      	adds	r3, #40	@ 0x28
90004878:	881b      	ldrh	r3, [r3, #0]
9000487a:	fbb1 f3f3 	udiv	r3, r1, r3
9000487e:	f003 0301 	and.w	r3, r3, #1
90004882:	2b00      	cmp	r3, #0
90004884:	f000 8470 	beq.w	90005168 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004888:	78fa      	ldrb	r2, [r7, #3]
9000488a:	6879      	ldr	r1, [r7, #4]
9000488c:	4613      	mov	r3, r2
9000488e:	011b      	lsls	r3, r3, #4
90004890:	1a9b      	subs	r3, r3, r2
90004892:	009b      	lsls	r3, r3, #2
90004894:	440b      	add	r3, r1
90004896:	333c      	adds	r3, #60	@ 0x3c
90004898:	781b      	ldrb	r3, [r3, #0]
9000489a:	78fa      	ldrb	r2, [r7, #3]
9000489c:	f083 0301 	eor.w	r3, r3, #1
900048a0:	b2d8      	uxtb	r0, r3
900048a2:	6879      	ldr	r1, [r7, #4]
900048a4:	4613      	mov	r3, r2
900048a6:	011b      	lsls	r3, r3, #4
900048a8:	1a9b      	subs	r3, r3, r2
900048aa:	009b      	lsls	r3, r3, #2
900048ac:	440b      	add	r3, r1
900048ae:	333c      	adds	r3, #60	@ 0x3c
900048b0:	4602      	mov	r2, r0
900048b2:	701a      	strb	r2, [r3, #0]
900048b4:	f000 bc58 	b.w	90005168 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
900048b8:	78fa      	ldrb	r2, [r7, #3]
900048ba:	6879      	ldr	r1, [r7, #4]
900048bc:	4613      	mov	r3, r2
900048be:	011b      	lsls	r3, r3, #4
900048c0:	1a9b      	subs	r3, r3, r2
900048c2:	009b      	lsls	r3, r3, #2
900048c4:	440b      	add	r3, r1
900048c6:	333c      	adds	r3, #60	@ 0x3c
900048c8:	781b      	ldrb	r3, [r3, #0]
900048ca:	78fa      	ldrb	r2, [r7, #3]
900048cc:	f083 0301 	eor.w	r3, r3, #1
900048d0:	b2d8      	uxtb	r0, r3
900048d2:	6879      	ldr	r1, [r7, #4]
900048d4:	4613      	mov	r3, r2
900048d6:	011b      	lsls	r3, r3, #4
900048d8:	1a9b      	subs	r3, r3, r2
900048da:	009b      	lsls	r3, r3, #2
900048dc:	440b      	add	r3, r1
900048de:	333c      	adds	r3, #60	@ 0x3c
900048e0:	4602      	mov	r2, r0
900048e2:	701a      	strb	r2, [r3, #0]
900048e4:	f000 bc40 	b.w	90005168 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900048e8:	687b      	ldr	r3, [r7, #4]
900048ea:	681b      	ldr	r3, [r3, #0]
900048ec:	78fa      	ldrb	r2, [r7, #3]
900048ee:	4611      	mov	r1, r2
900048f0:	4618      	mov	r0, r3
900048f2:	f007 fbec 	bl	9000c0ce <USB_ReadChInterrupts>
900048f6:	4603      	mov	r3, r0
900048f8:	f003 0320 	and.w	r3, r3, #32
900048fc:	2b20      	cmp	r3, #32
900048fe:	d131      	bne.n	90004964 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004900:	78fb      	ldrb	r3, [r7, #3]
90004902:	015a      	lsls	r2, r3, #5
90004904:	693b      	ldr	r3, [r7, #16]
90004906:	4413      	add	r3, r2
90004908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000490c:	461a      	mov	r2, r3
9000490e:	2320      	movs	r3, #32
90004910:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
90004912:	78fa      	ldrb	r2, [r7, #3]
90004914:	6879      	ldr	r1, [r7, #4]
90004916:	4613      	mov	r3, r2
90004918:	011b      	lsls	r3, r3, #4
9000491a:	1a9b      	subs	r3, r3, r2
9000491c:	009b      	lsls	r3, r3, #2
9000491e:	440b      	add	r3, r1
90004920:	331a      	adds	r3, #26
90004922:	781b      	ldrb	r3, [r3, #0]
90004924:	2b01      	cmp	r3, #1
90004926:	f040 841f 	bne.w	90005168 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
9000492a:	78fa      	ldrb	r2, [r7, #3]
9000492c:	6879      	ldr	r1, [r7, #4]
9000492e:	4613      	mov	r3, r2
90004930:	011b      	lsls	r3, r3, #4
90004932:	1a9b      	subs	r3, r3, r2
90004934:	009b      	lsls	r3, r3, #2
90004936:	440b      	add	r3, r1
90004938:	331b      	adds	r3, #27
9000493a:	2201      	movs	r2, #1
9000493c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
9000493e:	78fa      	ldrb	r2, [r7, #3]
90004940:	6879      	ldr	r1, [r7, #4]
90004942:	4613      	mov	r3, r2
90004944:	011b      	lsls	r3, r3, #4
90004946:	1a9b      	subs	r3, r3, r2
90004948:	009b      	lsls	r3, r3, #2
9000494a:	440b      	add	r3, r1
9000494c:	334d      	adds	r3, #77	@ 0x4d
9000494e:	2203      	movs	r2, #3
90004950:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004952:	687b      	ldr	r3, [r7, #4]
90004954:	681b      	ldr	r3, [r3, #0]
90004956:	78fa      	ldrb	r2, [r7, #3]
90004958:	4611      	mov	r1, r2
9000495a:	4618      	mov	r0, r3
9000495c:	f007 fc34 	bl	9000c1c8 <USB_HC_Halt>
90004960:	f000 bc02 	b.w	90005168 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90004964:	687b      	ldr	r3, [r7, #4]
90004966:	681b      	ldr	r3, [r3, #0]
90004968:	78fa      	ldrb	r2, [r7, #3]
9000496a:	4611      	mov	r1, r2
9000496c:	4618      	mov	r0, r3
9000496e:	f007 fbae 	bl	9000c0ce <USB_ReadChInterrupts>
90004972:	4603      	mov	r3, r0
90004974:	f003 0302 	and.w	r3, r3, #2
90004978:	2b02      	cmp	r3, #2
9000497a:	f040 8305 	bne.w	90004f88 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
9000497e:	78fb      	ldrb	r3, [r7, #3]
90004980:	015a      	lsls	r2, r3, #5
90004982:	693b      	ldr	r3, [r7, #16]
90004984:	4413      	add	r3, r2
90004986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000498a:	461a      	mov	r2, r3
9000498c:	2302      	movs	r3, #2
9000498e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90004990:	78fa      	ldrb	r2, [r7, #3]
90004992:	6879      	ldr	r1, [r7, #4]
90004994:	4613      	mov	r3, r2
90004996:	011b      	lsls	r3, r3, #4
90004998:	1a9b      	subs	r3, r3, r2
9000499a:	009b      	lsls	r3, r3, #2
9000499c:	440b      	add	r3, r1
9000499e:	334d      	adds	r3, #77	@ 0x4d
900049a0:	781b      	ldrb	r3, [r3, #0]
900049a2:	2b01      	cmp	r3, #1
900049a4:	d114      	bne.n	900049d0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900049a6:	78fa      	ldrb	r2, [r7, #3]
900049a8:	6879      	ldr	r1, [r7, #4]
900049aa:	4613      	mov	r3, r2
900049ac:	011b      	lsls	r3, r3, #4
900049ae:	1a9b      	subs	r3, r3, r2
900049b0:	009b      	lsls	r3, r3, #2
900049b2:	440b      	add	r3, r1
900049b4:	334d      	adds	r3, #77	@ 0x4d
900049b6:	2202      	movs	r2, #2
900049b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900049ba:	78fa      	ldrb	r2, [r7, #3]
900049bc:	6879      	ldr	r1, [r7, #4]
900049be:	4613      	mov	r3, r2
900049c0:	011b      	lsls	r3, r3, #4
900049c2:	1a9b      	subs	r3, r3, r2
900049c4:	009b      	lsls	r3, r3, #2
900049c6:	440b      	add	r3, r1
900049c8:	334c      	adds	r3, #76	@ 0x4c
900049ca:	2201      	movs	r2, #1
900049cc:	701a      	strb	r2, [r3, #0]
900049ce:	e2cc      	b.n	90004f6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
900049d0:	78fa      	ldrb	r2, [r7, #3]
900049d2:	6879      	ldr	r1, [r7, #4]
900049d4:	4613      	mov	r3, r2
900049d6:	011b      	lsls	r3, r3, #4
900049d8:	1a9b      	subs	r3, r3, r2
900049da:	009b      	lsls	r3, r3, #2
900049dc:	440b      	add	r3, r1
900049de:	334d      	adds	r3, #77	@ 0x4d
900049e0:	781b      	ldrb	r3, [r3, #0]
900049e2:	2b06      	cmp	r3, #6
900049e4:	d114      	bne.n	90004a10 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900049e6:	78fa      	ldrb	r2, [r7, #3]
900049e8:	6879      	ldr	r1, [r7, #4]
900049ea:	4613      	mov	r3, r2
900049ec:	011b      	lsls	r3, r3, #4
900049ee:	1a9b      	subs	r3, r3, r2
900049f0:	009b      	lsls	r3, r3, #2
900049f2:	440b      	add	r3, r1
900049f4:	334d      	adds	r3, #77	@ 0x4d
900049f6:	2202      	movs	r2, #2
900049f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
900049fa:	78fa      	ldrb	r2, [r7, #3]
900049fc:	6879      	ldr	r1, [r7, #4]
900049fe:	4613      	mov	r3, r2
90004a00:	011b      	lsls	r3, r3, #4
90004a02:	1a9b      	subs	r3, r3, r2
90004a04:	009b      	lsls	r3, r3, #2
90004a06:	440b      	add	r3, r1
90004a08:	334c      	adds	r3, #76	@ 0x4c
90004a0a:	2205      	movs	r2, #5
90004a0c:	701a      	strb	r2, [r3, #0]
90004a0e:	e2ac      	b.n	90004f6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004a10:	78fa      	ldrb	r2, [r7, #3]
90004a12:	6879      	ldr	r1, [r7, #4]
90004a14:	4613      	mov	r3, r2
90004a16:	011b      	lsls	r3, r3, #4
90004a18:	1a9b      	subs	r3, r3, r2
90004a1a:	009b      	lsls	r3, r3, #2
90004a1c:	440b      	add	r3, r1
90004a1e:	334d      	adds	r3, #77	@ 0x4d
90004a20:	781b      	ldrb	r3, [r3, #0]
90004a22:	2b07      	cmp	r3, #7
90004a24:	d00b      	beq.n	90004a3e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90004a26:	78fa      	ldrb	r2, [r7, #3]
90004a28:	6879      	ldr	r1, [r7, #4]
90004a2a:	4613      	mov	r3, r2
90004a2c:	011b      	lsls	r3, r3, #4
90004a2e:	1a9b      	subs	r3, r3, r2
90004a30:	009b      	lsls	r3, r3, #2
90004a32:	440b      	add	r3, r1
90004a34:	334d      	adds	r3, #77	@ 0x4d
90004a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004a38:	2b09      	cmp	r3, #9
90004a3a:	f040 80a6 	bne.w	90004b8a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a3e:	78fa      	ldrb	r2, [r7, #3]
90004a40:	6879      	ldr	r1, [r7, #4]
90004a42:	4613      	mov	r3, r2
90004a44:	011b      	lsls	r3, r3, #4
90004a46:	1a9b      	subs	r3, r3, r2
90004a48:	009b      	lsls	r3, r3, #2
90004a4a:	440b      	add	r3, r1
90004a4c:	334d      	adds	r3, #77	@ 0x4d
90004a4e:	2202      	movs	r2, #2
90004a50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004a52:	78fa      	ldrb	r2, [r7, #3]
90004a54:	6879      	ldr	r1, [r7, #4]
90004a56:	4613      	mov	r3, r2
90004a58:	011b      	lsls	r3, r3, #4
90004a5a:	1a9b      	subs	r3, r3, r2
90004a5c:	009b      	lsls	r3, r3, #2
90004a5e:	440b      	add	r3, r1
90004a60:	3344      	adds	r3, #68	@ 0x44
90004a62:	681b      	ldr	r3, [r3, #0]
90004a64:	1c59      	adds	r1, r3, #1
90004a66:	6878      	ldr	r0, [r7, #4]
90004a68:	4613      	mov	r3, r2
90004a6a:	011b      	lsls	r3, r3, #4
90004a6c:	1a9b      	subs	r3, r3, r2
90004a6e:	009b      	lsls	r3, r3, #2
90004a70:	4403      	add	r3, r0
90004a72:	3344      	adds	r3, #68	@ 0x44
90004a74:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004a76:	78fa      	ldrb	r2, [r7, #3]
90004a78:	6879      	ldr	r1, [r7, #4]
90004a7a:	4613      	mov	r3, r2
90004a7c:	011b      	lsls	r3, r3, #4
90004a7e:	1a9b      	subs	r3, r3, r2
90004a80:	009b      	lsls	r3, r3, #2
90004a82:	440b      	add	r3, r1
90004a84:	3344      	adds	r3, #68	@ 0x44
90004a86:	681b      	ldr	r3, [r3, #0]
90004a88:	2b02      	cmp	r3, #2
90004a8a:	d943      	bls.n	90004b14 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004a8c:	78fa      	ldrb	r2, [r7, #3]
90004a8e:	6879      	ldr	r1, [r7, #4]
90004a90:	4613      	mov	r3, r2
90004a92:	011b      	lsls	r3, r3, #4
90004a94:	1a9b      	subs	r3, r3, r2
90004a96:	009b      	lsls	r3, r3, #2
90004a98:	440b      	add	r3, r1
90004a9a:	3344      	adds	r3, #68	@ 0x44
90004a9c:	2200      	movs	r2, #0
90004a9e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90004aa0:	78fa      	ldrb	r2, [r7, #3]
90004aa2:	6879      	ldr	r1, [r7, #4]
90004aa4:	4613      	mov	r3, r2
90004aa6:	011b      	lsls	r3, r3, #4
90004aa8:	1a9b      	subs	r3, r3, r2
90004aaa:	009b      	lsls	r3, r3, #2
90004aac:	440b      	add	r3, r1
90004aae:	331a      	adds	r3, #26
90004ab0:	781b      	ldrb	r3, [r3, #0]
90004ab2:	2b01      	cmp	r3, #1
90004ab4:	d123      	bne.n	90004afe <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
90004ab6:	78fa      	ldrb	r2, [r7, #3]
90004ab8:	6879      	ldr	r1, [r7, #4]
90004aba:	4613      	mov	r3, r2
90004abc:	011b      	lsls	r3, r3, #4
90004abe:	1a9b      	subs	r3, r3, r2
90004ac0:	009b      	lsls	r3, r3, #2
90004ac2:	440b      	add	r3, r1
90004ac4:	331b      	adds	r3, #27
90004ac6:	2200      	movs	r2, #0
90004ac8:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
90004aca:	78fa      	ldrb	r2, [r7, #3]
90004acc:	6879      	ldr	r1, [r7, #4]
90004ace:	4613      	mov	r3, r2
90004ad0:	011b      	lsls	r3, r3, #4
90004ad2:	1a9b      	subs	r3, r3, r2
90004ad4:	009b      	lsls	r3, r3, #2
90004ad6:	440b      	add	r3, r1
90004ad8:	331c      	adds	r3, #28
90004ada:	2200      	movs	r2, #0
90004adc:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004ade:	78fb      	ldrb	r3, [r7, #3]
90004ae0:	015a      	lsls	r2, r3, #5
90004ae2:	693b      	ldr	r3, [r7, #16]
90004ae4:	4413      	add	r3, r2
90004ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004aea:	685b      	ldr	r3, [r3, #4]
90004aec:	78fa      	ldrb	r2, [r7, #3]
90004aee:	0151      	lsls	r1, r2, #5
90004af0:	693a      	ldr	r2, [r7, #16]
90004af2:	440a      	add	r2, r1
90004af4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004afc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
90004afe:	78fa      	ldrb	r2, [r7, #3]
90004b00:	6879      	ldr	r1, [r7, #4]
90004b02:	4613      	mov	r3, r2
90004b04:	011b      	lsls	r3, r3, #4
90004b06:	1a9b      	subs	r3, r3, r2
90004b08:	009b      	lsls	r3, r3, #2
90004b0a:	440b      	add	r3, r1
90004b0c:	334c      	adds	r3, #76	@ 0x4c
90004b0e:	2204      	movs	r2, #4
90004b10:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004b12:	e229      	b.n	90004f68 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b14:	78fa      	ldrb	r2, [r7, #3]
90004b16:	6879      	ldr	r1, [r7, #4]
90004b18:	4613      	mov	r3, r2
90004b1a:	011b      	lsls	r3, r3, #4
90004b1c:	1a9b      	subs	r3, r3, r2
90004b1e:	009b      	lsls	r3, r3, #2
90004b20:	440b      	add	r3, r1
90004b22:	334c      	adds	r3, #76	@ 0x4c
90004b24:	2202      	movs	r2, #2
90004b26:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b28:	78fa      	ldrb	r2, [r7, #3]
90004b2a:	6879      	ldr	r1, [r7, #4]
90004b2c:	4613      	mov	r3, r2
90004b2e:	011b      	lsls	r3, r3, #4
90004b30:	1a9b      	subs	r3, r3, r2
90004b32:	009b      	lsls	r3, r3, #2
90004b34:	440b      	add	r3, r1
90004b36:	3326      	adds	r3, #38	@ 0x26
90004b38:	781b      	ldrb	r3, [r3, #0]
90004b3a:	2b00      	cmp	r3, #0
90004b3c:	d00b      	beq.n	90004b56 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004b3e:	78fa      	ldrb	r2, [r7, #3]
90004b40:	6879      	ldr	r1, [r7, #4]
90004b42:	4613      	mov	r3, r2
90004b44:	011b      	lsls	r3, r3, #4
90004b46:	1a9b      	subs	r3, r3, r2
90004b48:	009b      	lsls	r3, r3, #2
90004b4a:	440b      	add	r3, r1
90004b4c:	3326      	adds	r3, #38	@ 0x26
90004b4e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b50:	2b02      	cmp	r3, #2
90004b52:	f040 8209 	bne.w	90004f68 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004b56:	78fb      	ldrb	r3, [r7, #3]
90004b58:	015a      	lsls	r2, r3, #5
90004b5a:	693b      	ldr	r3, [r7, #16]
90004b5c:	4413      	add	r3, r2
90004b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b62:	681b      	ldr	r3, [r3, #0]
90004b64:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004b66:	68fb      	ldr	r3, [r7, #12]
90004b68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004b6c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004b6e:	68fb      	ldr	r3, [r7, #12]
90004b70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004b74:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004b76:	78fb      	ldrb	r3, [r7, #3]
90004b78:	015a      	lsls	r2, r3, #5
90004b7a:	693b      	ldr	r3, [r7, #16]
90004b7c:	4413      	add	r3, r2
90004b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b82:	461a      	mov	r2, r3
90004b84:	68fb      	ldr	r3, [r7, #12]
90004b86:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004b88:	e1ee      	b.n	90004f68 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90004b8a:	78fa      	ldrb	r2, [r7, #3]
90004b8c:	6879      	ldr	r1, [r7, #4]
90004b8e:	4613      	mov	r3, r2
90004b90:	011b      	lsls	r3, r3, #4
90004b92:	1a9b      	subs	r3, r3, r2
90004b94:	009b      	lsls	r3, r3, #2
90004b96:	440b      	add	r3, r1
90004b98:	334d      	adds	r3, #77	@ 0x4d
90004b9a:	781b      	ldrb	r3, [r3, #0]
90004b9c:	2b05      	cmp	r3, #5
90004b9e:	f040 80c8 	bne.w	90004d32 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004ba2:	78fa      	ldrb	r2, [r7, #3]
90004ba4:	6879      	ldr	r1, [r7, #4]
90004ba6:	4613      	mov	r3, r2
90004ba8:	011b      	lsls	r3, r3, #4
90004baa:	1a9b      	subs	r3, r3, r2
90004bac:	009b      	lsls	r3, r3, #2
90004bae:	440b      	add	r3, r1
90004bb0:	334d      	adds	r3, #77	@ 0x4d
90004bb2:	2202      	movs	r2, #2
90004bb4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004bb6:	78fa      	ldrb	r2, [r7, #3]
90004bb8:	6879      	ldr	r1, [r7, #4]
90004bba:	4613      	mov	r3, r2
90004bbc:	011b      	lsls	r3, r3, #4
90004bbe:	1a9b      	subs	r3, r3, r2
90004bc0:	009b      	lsls	r3, r3, #2
90004bc2:	440b      	add	r3, r1
90004bc4:	331b      	adds	r3, #27
90004bc6:	781b      	ldrb	r3, [r3, #0]
90004bc8:	2b01      	cmp	r3, #1
90004bca:	f040 81ce 	bne.w	90004f6a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004bce:	78fa      	ldrb	r2, [r7, #3]
90004bd0:	6879      	ldr	r1, [r7, #4]
90004bd2:	4613      	mov	r3, r2
90004bd4:	011b      	lsls	r3, r3, #4
90004bd6:	1a9b      	subs	r3, r3, r2
90004bd8:	009b      	lsls	r3, r3, #2
90004bda:	440b      	add	r3, r1
90004bdc:	3326      	adds	r3, #38	@ 0x26
90004bde:	781b      	ldrb	r3, [r3, #0]
90004be0:	2b03      	cmp	r3, #3
90004be2:	d16b      	bne.n	90004cbc <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90004be4:	78fa      	ldrb	r2, [r7, #3]
90004be6:	6879      	ldr	r1, [r7, #4]
90004be8:	4613      	mov	r3, r2
90004bea:	011b      	lsls	r3, r3, #4
90004bec:	1a9b      	subs	r3, r3, r2
90004bee:	009b      	lsls	r3, r3, #2
90004bf0:	440b      	add	r3, r1
90004bf2:	3348      	adds	r3, #72	@ 0x48
90004bf4:	681b      	ldr	r3, [r3, #0]
90004bf6:	1c59      	adds	r1, r3, #1
90004bf8:	6878      	ldr	r0, [r7, #4]
90004bfa:	4613      	mov	r3, r2
90004bfc:	011b      	lsls	r3, r3, #4
90004bfe:	1a9b      	subs	r3, r3, r2
90004c00:	009b      	lsls	r3, r3, #2
90004c02:	4403      	add	r3, r0
90004c04:	3348      	adds	r3, #72	@ 0x48
90004c06:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
90004c08:	78fa      	ldrb	r2, [r7, #3]
90004c0a:	6879      	ldr	r1, [r7, #4]
90004c0c:	4613      	mov	r3, r2
90004c0e:	011b      	lsls	r3, r3, #4
90004c10:	1a9b      	subs	r3, r3, r2
90004c12:	009b      	lsls	r3, r3, #2
90004c14:	440b      	add	r3, r1
90004c16:	3348      	adds	r3, #72	@ 0x48
90004c18:	681b      	ldr	r3, [r3, #0]
90004c1a:	2b02      	cmp	r3, #2
90004c1c:	d943      	bls.n	90004ca6 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
90004c1e:	78fa      	ldrb	r2, [r7, #3]
90004c20:	6879      	ldr	r1, [r7, #4]
90004c22:	4613      	mov	r3, r2
90004c24:	011b      	lsls	r3, r3, #4
90004c26:	1a9b      	subs	r3, r3, r2
90004c28:	009b      	lsls	r3, r3, #2
90004c2a:	440b      	add	r3, r1
90004c2c:	3348      	adds	r3, #72	@ 0x48
90004c2e:	2200      	movs	r2, #0
90004c30:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
90004c32:	78fa      	ldrb	r2, [r7, #3]
90004c34:	6879      	ldr	r1, [r7, #4]
90004c36:	4613      	mov	r3, r2
90004c38:	011b      	lsls	r3, r3, #4
90004c3a:	1a9b      	subs	r3, r3, r2
90004c3c:	009b      	lsls	r3, r3, #2
90004c3e:	440b      	add	r3, r1
90004c40:	331b      	adds	r3, #27
90004c42:	2200      	movs	r2, #0
90004c44:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
90004c46:	78fa      	ldrb	r2, [r7, #3]
90004c48:	6879      	ldr	r1, [r7, #4]
90004c4a:	4613      	mov	r3, r2
90004c4c:	011b      	lsls	r3, r3, #4
90004c4e:	1a9b      	subs	r3, r3, r2
90004c50:	009b      	lsls	r3, r3, #2
90004c52:	440b      	add	r3, r1
90004c54:	3344      	adds	r3, #68	@ 0x44
90004c56:	681b      	ldr	r3, [r3, #0]
90004c58:	2b02      	cmp	r3, #2
90004c5a:	d809      	bhi.n	90004c70 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90004c5c:	78fa      	ldrb	r2, [r7, #3]
90004c5e:	6879      	ldr	r1, [r7, #4]
90004c60:	4613      	mov	r3, r2
90004c62:	011b      	lsls	r3, r3, #4
90004c64:	1a9b      	subs	r3, r3, r2
90004c66:	009b      	lsls	r3, r3, #2
90004c68:	440b      	add	r3, r1
90004c6a:	331c      	adds	r3, #28
90004c6c:	2201      	movs	r2, #1
90004c6e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004c70:	78fb      	ldrb	r3, [r7, #3]
90004c72:	015a      	lsls	r2, r3, #5
90004c74:	693b      	ldr	r3, [r7, #16]
90004c76:	4413      	add	r3, r2
90004c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c7c:	685b      	ldr	r3, [r3, #4]
90004c7e:	78fa      	ldrb	r2, [r7, #3]
90004c80:	0151      	lsls	r1, r2, #5
90004c82:	693a      	ldr	r2, [r7, #16]
90004c84:	440a      	add	r2, r1
90004c86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004c8e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004c90:	78fa      	ldrb	r2, [r7, #3]
90004c92:	6879      	ldr	r1, [r7, #4]
90004c94:	4613      	mov	r3, r2
90004c96:	011b      	lsls	r3, r3, #4
90004c98:	1a9b      	subs	r3, r3, r2
90004c9a:	009b      	lsls	r3, r3, #2
90004c9c:	440b      	add	r3, r1
90004c9e:	334c      	adds	r3, #76	@ 0x4c
90004ca0:	2204      	movs	r2, #4
90004ca2:	701a      	strb	r2, [r3, #0]
90004ca4:	e014      	b.n	90004cd0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004ca6:	78fa      	ldrb	r2, [r7, #3]
90004ca8:	6879      	ldr	r1, [r7, #4]
90004caa:	4613      	mov	r3, r2
90004cac:	011b      	lsls	r3, r3, #4
90004cae:	1a9b      	subs	r3, r3, r2
90004cb0:	009b      	lsls	r3, r3, #2
90004cb2:	440b      	add	r3, r1
90004cb4:	334c      	adds	r3, #76	@ 0x4c
90004cb6:	2202      	movs	r2, #2
90004cb8:	701a      	strb	r2, [r3, #0]
90004cba:	e009      	b.n	90004cd0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004cbc:	78fa      	ldrb	r2, [r7, #3]
90004cbe:	6879      	ldr	r1, [r7, #4]
90004cc0:	4613      	mov	r3, r2
90004cc2:	011b      	lsls	r3, r3, #4
90004cc4:	1a9b      	subs	r3, r3, r2
90004cc6:	009b      	lsls	r3, r3, #2
90004cc8:	440b      	add	r3, r1
90004cca:	334c      	adds	r3, #76	@ 0x4c
90004ccc:	2202      	movs	r2, #2
90004cce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004cd0:	78fa      	ldrb	r2, [r7, #3]
90004cd2:	6879      	ldr	r1, [r7, #4]
90004cd4:	4613      	mov	r3, r2
90004cd6:	011b      	lsls	r3, r3, #4
90004cd8:	1a9b      	subs	r3, r3, r2
90004cda:	009b      	lsls	r3, r3, #2
90004cdc:	440b      	add	r3, r1
90004cde:	3326      	adds	r3, #38	@ 0x26
90004ce0:	781b      	ldrb	r3, [r3, #0]
90004ce2:	2b00      	cmp	r3, #0
90004ce4:	d00b      	beq.n	90004cfe <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004ce6:	78fa      	ldrb	r2, [r7, #3]
90004ce8:	6879      	ldr	r1, [r7, #4]
90004cea:	4613      	mov	r3, r2
90004cec:	011b      	lsls	r3, r3, #4
90004cee:	1a9b      	subs	r3, r3, r2
90004cf0:	009b      	lsls	r3, r3, #2
90004cf2:	440b      	add	r3, r1
90004cf4:	3326      	adds	r3, #38	@ 0x26
90004cf6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004cf8:	2b02      	cmp	r3, #2
90004cfa:	f040 8136 	bne.w	90004f6a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004cfe:	78fb      	ldrb	r3, [r7, #3]
90004d00:	015a      	lsls	r2, r3, #5
90004d02:	693b      	ldr	r3, [r7, #16]
90004d04:	4413      	add	r3, r2
90004d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d0a:	681b      	ldr	r3, [r3, #0]
90004d0c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004d0e:	68fb      	ldr	r3, [r7, #12]
90004d10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004d14:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004d16:	68fb      	ldr	r3, [r7, #12]
90004d18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004d1c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004d1e:	78fb      	ldrb	r3, [r7, #3]
90004d20:	015a      	lsls	r2, r3, #5
90004d22:	693b      	ldr	r3, [r7, #16]
90004d24:	4413      	add	r3, r2
90004d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d2a:	461a      	mov	r2, r3
90004d2c:	68fb      	ldr	r3, [r7, #12]
90004d2e:	6013      	str	r3, [r2, #0]
90004d30:	e11b      	b.n	90004f6a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004d32:	78fa      	ldrb	r2, [r7, #3]
90004d34:	6879      	ldr	r1, [r7, #4]
90004d36:	4613      	mov	r3, r2
90004d38:	011b      	lsls	r3, r3, #4
90004d3a:	1a9b      	subs	r3, r3, r2
90004d3c:	009b      	lsls	r3, r3, #2
90004d3e:	440b      	add	r3, r1
90004d40:	334d      	adds	r3, #77	@ 0x4d
90004d42:	781b      	ldrb	r3, [r3, #0]
90004d44:	2b03      	cmp	r3, #3
90004d46:	f040 8081 	bne.w	90004e4c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004d4a:	78fa      	ldrb	r2, [r7, #3]
90004d4c:	6879      	ldr	r1, [r7, #4]
90004d4e:	4613      	mov	r3, r2
90004d50:	011b      	lsls	r3, r3, #4
90004d52:	1a9b      	subs	r3, r3, r2
90004d54:	009b      	lsls	r3, r3, #2
90004d56:	440b      	add	r3, r1
90004d58:	334d      	adds	r3, #77	@ 0x4d
90004d5a:	2202      	movs	r2, #2
90004d5c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004d5e:	78fa      	ldrb	r2, [r7, #3]
90004d60:	6879      	ldr	r1, [r7, #4]
90004d62:	4613      	mov	r3, r2
90004d64:	011b      	lsls	r3, r3, #4
90004d66:	1a9b      	subs	r3, r3, r2
90004d68:	009b      	lsls	r3, r3, #2
90004d6a:	440b      	add	r3, r1
90004d6c:	331b      	adds	r3, #27
90004d6e:	781b      	ldrb	r3, [r3, #0]
90004d70:	2b01      	cmp	r3, #1
90004d72:	f040 80fa 	bne.w	90004f6a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004d76:	78fa      	ldrb	r2, [r7, #3]
90004d78:	6879      	ldr	r1, [r7, #4]
90004d7a:	4613      	mov	r3, r2
90004d7c:	011b      	lsls	r3, r3, #4
90004d7e:	1a9b      	subs	r3, r3, r2
90004d80:	009b      	lsls	r3, r3, #2
90004d82:	440b      	add	r3, r1
90004d84:	334c      	adds	r3, #76	@ 0x4c
90004d86:	2202      	movs	r2, #2
90004d88:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004d8a:	78fb      	ldrb	r3, [r7, #3]
90004d8c:	015a      	lsls	r2, r3, #5
90004d8e:	693b      	ldr	r3, [r7, #16]
90004d90:	4413      	add	r3, r2
90004d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d96:	685b      	ldr	r3, [r3, #4]
90004d98:	78fa      	ldrb	r2, [r7, #3]
90004d9a:	0151      	lsls	r1, r2, #5
90004d9c:	693a      	ldr	r2, [r7, #16]
90004d9e:	440a      	add	r2, r1
90004da0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004da8:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004daa:	78fb      	ldrb	r3, [r7, #3]
90004dac:	015a      	lsls	r2, r3, #5
90004dae:	693b      	ldr	r3, [r7, #16]
90004db0:	4413      	add	r3, r2
90004db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004db6:	68db      	ldr	r3, [r3, #12]
90004db8:	78fa      	ldrb	r2, [r7, #3]
90004dba:	0151      	lsls	r1, r2, #5
90004dbc:	693a      	ldr	r2, [r7, #16]
90004dbe:	440a      	add	r2, r1
90004dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004dc8:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004dca:	78fb      	ldrb	r3, [r7, #3]
90004dcc:	015a      	lsls	r2, r3, #5
90004dce:	693b      	ldr	r3, [r7, #16]
90004dd0:	4413      	add	r3, r2
90004dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004dd6:	68db      	ldr	r3, [r3, #12]
90004dd8:	78fa      	ldrb	r2, [r7, #3]
90004dda:	0151      	lsls	r1, r2, #5
90004ddc:	693a      	ldr	r2, [r7, #16]
90004dde:	440a      	add	r2, r1
90004de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004de4:	f023 0320 	bic.w	r3, r3, #32
90004de8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004dea:	78fa      	ldrb	r2, [r7, #3]
90004dec:	6879      	ldr	r1, [r7, #4]
90004dee:	4613      	mov	r3, r2
90004df0:	011b      	lsls	r3, r3, #4
90004df2:	1a9b      	subs	r3, r3, r2
90004df4:	009b      	lsls	r3, r3, #2
90004df6:	440b      	add	r3, r1
90004df8:	3326      	adds	r3, #38	@ 0x26
90004dfa:	781b      	ldrb	r3, [r3, #0]
90004dfc:	2b00      	cmp	r3, #0
90004dfe:	d00b      	beq.n	90004e18 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004e00:	78fa      	ldrb	r2, [r7, #3]
90004e02:	6879      	ldr	r1, [r7, #4]
90004e04:	4613      	mov	r3, r2
90004e06:	011b      	lsls	r3, r3, #4
90004e08:	1a9b      	subs	r3, r3, r2
90004e0a:	009b      	lsls	r3, r3, #2
90004e0c:	440b      	add	r3, r1
90004e0e:	3326      	adds	r3, #38	@ 0x26
90004e10:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e12:	2b02      	cmp	r3, #2
90004e14:	f040 80a9 	bne.w	90004f6a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004e18:	78fb      	ldrb	r3, [r7, #3]
90004e1a:	015a      	lsls	r2, r3, #5
90004e1c:	693b      	ldr	r3, [r7, #16]
90004e1e:	4413      	add	r3, r2
90004e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e24:	681b      	ldr	r3, [r3, #0]
90004e26:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004e28:	68fb      	ldr	r3, [r7, #12]
90004e2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004e2e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004e30:	68fb      	ldr	r3, [r7, #12]
90004e32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004e36:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004e38:	78fb      	ldrb	r3, [r7, #3]
90004e3a:	015a      	lsls	r2, r3, #5
90004e3c:	693b      	ldr	r3, [r7, #16]
90004e3e:	4413      	add	r3, r2
90004e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e44:	461a      	mov	r2, r3
90004e46:	68fb      	ldr	r3, [r7, #12]
90004e48:	6013      	str	r3, [r2, #0]
90004e4a:	e08e      	b.n	90004f6a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004e4c:	78fa      	ldrb	r2, [r7, #3]
90004e4e:	6879      	ldr	r1, [r7, #4]
90004e50:	4613      	mov	r3, r2
90004e52:	011b      	lsls	r3, r3, #4
90004e54:	1a9b      	subs	r3, r3, r2
90004e56:	009b      	lsls	r3, r3, #2
90004e58:	440b      	add	r3, r1
90004e5a:	334d      	adds	r3, #77	@ 0x4d
90004e5c:	781b      	ldrb	r3, [r3, #0]
90004e5e:	2b04      	cmp	r3, #4
90004e60:	d143      	bne.n	90004eea <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004e62:	78fa      	ldrb	r2, [r7, #3]
90004e64:	6879      	ldr	r1, [r7, #4]
90004e66:	4613      	mov	r3, r2
90004e68:	011b      	lsls	r3, r3, #4
90004e6a:	1a9b      	subs	r3, r3, r2
90004e6c:	009b      	lsls	r3, r3, #2
90004e6e:	440b      	add	r3, r1
90004e70:	334d      	adds	r3, #77	@ 0x4d
90004e72:	2202      	movs	r2, #2
90004e74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004e76:	78fa      	ldrb	r2, [r7, #3]
90004e78:	6879      	ldr	r1, [r7, #4]
90004e7a:	4613      	mov	r3, r2
90004e7c:	011b      	lsls	r3, r3, #4
90004e7e:	1a9b      	subs	r3, r3, r2
90004e80:	009b      	lsls	r3, r3, #2
90004e82:	440b      	add	r3, r1
90004e84:	334c      	adds	r3, #76	@ 0x4c
90004e86:	2202      	movs	r2, #2
90004e88:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e8a:	78fa      	ldrb	r2, [r7, #3]
90004e8c:	6879      	ldr	r1, [r7, #4]
90004e8e:	4613      	mov	r3, r2
90004e90:	011b      	lsls	r3, r3, #4
90004e92:	1a9b      	subs	r3, r3, r2
90004e94:	009b      	lsls	r3, r3, #2
90004e96:	440b      	add	r3, r1
90004e98:	3326      	adds	r3, #38	@ 0x26
90004e9a:	781b      	ldrb	r3, [r3, #0]
90004e9c:	2b00      	cmp	r3, #0
90004e9e:	d00a      	beq.n	90004eb6 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004ea0:	78fa      	ldrb	r2, [r7, #3]
90004ea2:	6879      	ldr	r1, [r7, #4]
90004ea4:	4613      	mov	r3, r2
90004ea6:	011b      	lsls	r3, r3, #4
90004ea8:	1a9b      	subs	r3, r3, r2
90004eaa:	009b      	lsls	r3, r3, #2
90004eac:	440b      	add	r3, r1
90004eae:	3326      	adds	r3, #38	@ 0x26
90004eb0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004eb2:	2b02      	cmp	r3, #2
90004eb4:	d159      	bne.n	90004f6a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004eb6:	78fb      	ldrb	r3, [r7, #3]
90004eb8:	015a      	lsls	r2, r3, #5
90004eba:	693b      	ldr	r3, [r7, #16]
90004ebc:	4413      	add	r3, r2
90004ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ec2:	681b      	ldr	r3, [r3, #0]
90004ec4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004ec6:	68fb      	ldr	r3, [r7, #12]
90004ec8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004ecc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004ece:	68fb      	ldr	r3, [r7, #12]
90004ed0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004ed4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004ed6:	78fb      	ldrb	r3, [r7, #3]
90004ed8:	015a      	lsls	r2, r3, #5
90004eda:	693b      	ldr	r3, [r7, #16]
90004edc:	4413      	add	r3, r2
90004ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ee2:	461a      	mov	r2, r3
90004ee4:	68fb      	ldr	r3, [r7, #12]
90004ee6:	6013      	str	r3, [r2, #0]
90004ee8:	e03f      	b.n	90004f6a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004eea:	78fa      	ldrb	r2, [r7, #3]
90004eec:	6879      	ldr	r1, [r7, #4]
90004eee:	4613      	mov	r3, r2
90004ef0:	011b      	lsls	r3, r3, #4
90004ef2:	1a9b      	subs	r3, r3, r2
90004ef4:	009b      	lsls	r3, r3, #2
90004ef6:	440b      	add	r3, r1
90004ef8:	334d      	adds	r3, #77	@ 0x4d
90004efa:	781b      	ldrb	r3, [r3, #0]
90004efc:	2b08      	cmp	r3, #8
90004efe:	d126      	bne.n	90004f4e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004f00:	78fa      	ldrb	r2, [r7, #3]
90004f02:	6879      	ldr	r1, [r7, #4]
90004f04:	4613      	mov	r3, r2
90004f06:	011b      	lsls	r3, r3, #4
90004f08:	1a9b      	subs	r3, r3, r2
90004f0a:	009b      	lsls	r3, r3, #2
90004f0c:	440b      	add	r3, r1
90004f0e:	334d      	adds	r3, #77	@ 0x4d
90004f10:	2202      	movs	r2, #2
90004f12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004f14:	78fa      	ldrb	r2, [r7, #3]
90004f16:	6879      	ldr	r1, [r7, #4]
90004f18:	4613      	mov	r3, r2
90004f1a:	011b      	lsls	r3, r3, #4
90004f1c:	1a9b      	subs	r3, r3, r2
90004f1e:	009b      	lsls	r3, r3, #2
90004f20:	440b      	add	r3, r1
90004f22:	3344      	adds	r3, #68	@ 0x44
90004f24:	681b      	ldr	r3, [r3, #0]
90004f26:	1c59      	adds	r1, r3, #1
90004f28:	6878      	ldr	r0, [r7, #4]
90004f2a:	4613      	mov	r3, r2
90004f2c:	011b      	lsls	r3, r3, #4
90004f2e:	1a9b      	subs	r3, r3, r2
90004f30:	009b      	lsls	r3, r3, #2
90004f32:	4403      	add	r3, r0
90004f34:	3344      	adds	r3, #68	@ 0x44
90004f36:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004f38:	78fa      	ldrb	r2, [r7, #3]
90004f3a:	6879      	ldr	r1, [r7, #4]
90004f3c:	4613      	mov	r3, r2
90004f3e:	011b      	lsls	r3, r3, #4
90004f40:	1a9b      	subs	r3, r3, r2
90004f42:	009b      	lsls	r3, r3, #2
90004f44:	440b      	add	r3, r1
90004f46:	334c      	adds	r3, #76	@ 0x4c
90004f48:	2204      	movs	r2, #4
90004f4a:	701a      	strb	r2, [r3, #0]
90004f4c:	e00d      	b.n	90004f6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004f4e:	78fa      	ldrb	r2, [r7, #3]
90004f50:	6879      	ldr	r1, [r7, #4]
90004f52:	4613      	mov	r3, r2
90004f54:	011b      	lsls	r3, r3, #4
90004f56:	1a9b      	subs	r3, r3, r2
90004f58:	009b      	lsls	r3, r3, #2
90004f5a:	440b      	add	r3, r1
90004f5c:	334d      	adds	r3, #77	@ 0x4d
90004f5e:	781b      	ldrb	r3, [r3, #0]
90004f60:	2b02      	cmp	r3, #2
90004f62:	f000 8100 	beq.w	90005166 <HCD_HC_IN_IRQHandler+0xcca>
90004f66:	e000      	b.n	90004f6a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004f68:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004f6a:	78fa      	ldrb	r2, [r7, #3]
90004f6c:	6879      	ldr	r1, [r7, #4]
90004f6e:	4613      	mov	r3, r2
90004f70:	011b      	lsls	r3, r3, #4
90004f72:	1a9b      	subs	r3, r3, r2
90004f74:	009b      	lsls	r3, r3, #2
90004f76:	440b      	add	r3, r1
90004f78:	334c      	adds	r3, #76	@ 0x4c
90004f7a:	781a      	ldrb	r2, [r3, #0]
90004f7c:	78fb      	ldrb	r3, [r7, #3]
90004f7e:	4619      	mov	r1, r3
90004f80:	6878      	ldr	r0, [r7, #4]
90004f82:	f7fc fa17 	bl	900013b4 <HAL_HCD_HC_NotifyURBChange_Callback>
90004f86:	e0ef      	b.n	90005168 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004f88:	687b      	ldr	r3, [r7, #4]
90004f8a:	681b      	ldr	r3, [r3, #0]
90004f8c:	78fa      	ldrb	r2, [r7, #3]
90004f8e:	4611      	mov	r1, r2
90004f90:	4618      	mov	r0, r3
90004f92:	f007 f89c 	bl	9000c0ce <USB_ReadChInterrupts>
90004f96:	4603      	mov	r3, r0
90004f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004f9c:	2b40      	cmp	r3, #64	@ 0x40
90004f9e:	d12f      	bne.n	90005000 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004fa0:	78fb      	ldrb	r3, [r7, #3]
90004fa2:	015a      	lsls	r2, r3, #5
90004fa4:	693b      	ldr	r3, [r7, #16]
90004fa6:	4413      	add	r3, r2
90004fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fac:	461a      	mov	r2, r3
90004fae:	2340      	movs	r3, #64	@ 0x40
90004fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004fb2:	78fa      	ldrb	r2, [r7, #3]
90004fb4:	6879      	ldr	r1, [r7, #4]
90004fb6:	4613      	mov	r3, r2
90004fb8:	011b      	lsls	r3, r3, #4
90004fba:	1a9b      	subs	r3, r3, r2
90004fbc:	009b      	lsls	r3, r3, #2
90004fbe:	440b      	add	r3, r1
90004fc0:	334d      	adds	r3, #77	@ 0x4d
90004fc2:	2205      	movs	r2, #5
90004fc4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004fc6:	78fa      	ldrb	r2, [r7, #3]
90004fc8:	6879      	ldr	r1, [r7, #4]
90004fca:	4613      	mov	r3, r2
90004fcc:	011b      	lsls	r3, r3, #4
90004fce:	1a9b      	subs	r3, r3, r2
90004fd0:	009b      	lsls	r3, r3, #2
90004fd2:	440b      	add	r3, r1
90004fd4:	331a      	adds	r3, #26
90004fd6:	781b      	ldrb	r3, [r3, #0]
90004fd8:	2b00      	cmp	r3, #0
90004fda:	d109      	bne.n	90004ff0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004fdc:	78fa      	ldrb	r2, [r7, #3]
90004fde:	6879      	ldr	r1, [r7, #4]
90004fe0:	4613      	mov	r3, r2
90004fe2:	011b      	lsls	r3, r3, #4
90004fe4:	1a9b      	subs	r3, r3, r2
90004fe6:	009b      	lsls	r3, r3, #2
90004fe8:	440b      	add	r3, r1
90004fea:	3344      	adds	r3, #68	@ 0x44
90004fec:	2200      	movs	r2, #0
90004fee:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ff0:	687b      	ldr	r3, [r7, #4]
90004ff2:	681b      	ldr	r3, [r3, #0]
90004ff4:	78fa      	ldrb	r2, [r7, #3]
90004ff6:	4611      	mov	r1, r2
90004ff8:	4618      	mov	r0, r3
90004ffa:	f007 f8e5 	bl	9000c1c8 <USB_HC_Halt>
90004ffe:	e0b3      	b.n	90005168 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90005000:	687b      	ldr	r3, [r7, #4]
90005002:	681b      	ldr	r3, [r3, #0]
90005004:	78fa      	ldrb	r2, [r7, #3]
90005006:	4611      	mov	r1, r2
90005008:	4618      	mov	r0, r3
9000500a:	f007 f860 	bl	9000c0ce <USB_ReadChInterrupts>
9000500e:	4603      	mov	r3, r0
90005010:	f003 0310 	and.w	r3, r3, #16
90005014:	2b10      	cmp	r3, #16
90005016:	f040 80a7 	bne.w	90005168 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
9000501a:	78fa      	ldrb	r2, [r7, #3]
9000501c:	6879      	ldr	r1, [r7, #4]
9000501e:	4613      	mov	r3, r2
90005020:	011b      	lsls	r3, r3, #4
90005022:	1a9b      	subs	r3, r3, r2
90005024:	009b      	lsls	r3, r3, #2
90005026:	440b      	add	r3, r1
90005028:	3326      	adds	r3, #38	@ 0x26
9000502a:	781b      	ldrb	r3, [r3, #0]
9000502c:	2b03      	cmp	r3, #3
9000502e:	d11b      	bne.n	90005068 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90005030:	78fa      	ldrb	r2, [r7, #3]
90005032:	6879      	ldr	r1, [r7, #4]
90005034:	4613      	mov	r3, r2
90005036:	011b      	lsls	r3, r3, #4
90005038:	1a9b      	subs	r3, r3, r2
9000503a:	009b      	lsls	r3, r3, #2
9000503c:	440b      	add	r3, r1
9000503e:	3344      	adds	r3, #68	@ 0x44
90005040:	2200      	movs	r2, #0
90005042:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90005044:	78fa      	ldrb	r2, [r7, #3]
90005046:	6879      	ldr	r1, [r7, #4]
90005048:	4613      	mov	r3, r2
9000504a:	011b      	lsls	r3, r3, #4
9000504c:	1a9b      	subs	r3, r3, r2
9000504e:	009b      	lsls	r3, r3, #2
90005050:	440b      	add	r3, r1
90005052:	334d      	adds	r3, #77	@ 0x4d
90005054:	2204      	movs	r2, #4
90005056:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005058:	687b      	ldr	r3, [r7, #4]
9000505a:	681b      	ldr	r3, [r3, #0]
9000505c:	78fa      	ldrb	r2, [r7, #3]
9000505e:	4611      	mov	r1, r2
90005060:	4618      	mov	r0, r3
90005062:	f007 f8b1 	bl	9000c1c8 <USB_HC_Halt>
90005066:	e03f      	b.n	900050e8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005068:	78fa      	ldrb	r2, [r7, #3]
9000506a:	6879      	ldr	r1, [r7, #4]
9000506c:	4613      	mov	r3, r2
9000506e:	011b      	lsls	r3, r3, #4
90005070:	1a9b      	subs	r3, r3, r2
90005072:	009b      	lsls	r3, r3, #2
90005074:	440b      	add	r3, r1
90005076:	3326      	adds	r3, #38	@ 0x26
90005078:	781b      	ldrb	r3, [r3, #0]
9000507a:	2b00      	cmp	r3, #0
9000507c:	d00a      	beq.n	90005094 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
9000507e:	78fa      	ldrb	r2, [r7, #3]
90005080:	6879      	ldr	r1, [r7, #4]
90005082:	4613      	mov	r3, r2
90005084:	011b      	lsls	r3, r3, #4
90005086:	1a9b      	subs	r3, r3, r2
90005088:	009b      	lsls	r3, r3, #2
9000508a:	440b      	add	r3, r1
9000508c:	3326      	adds	r3, #38	@ 0x26
9000508e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90005090:	2b02      	cmp	r3, #2
90005092:	d129      	bne.n	900050e8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90005094:	78fa      	ldrb	r2, [r7, #3]
90005096:	6879      	ldr	r1, [r7, #4]
90005098:	4613      	mov	r3, r2
9000509a:	011b      	lsls	r3, r3, #4
9000509c:	1a9b      	subs	r3, r3, r2
9000509e:	009b      	lsls	r3, r3, #2
900050a0:	440b      	add	r3, r1
900050a2:	3344      	adds	r3, #68	@ 0x44
900050a4:	2200      	movs	r2, #0
900050a6:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
900050a8:	687b      	ldr	r3, [r7, #4]
900050aa:	799b      	ldrb	r3, [r3, #6]
900050ac:	2b00      	cmp	r3, #0
900050ae:	d00a      	beq.n	900050c6 <HCD_HC_IN_IRQHandler+0xc2a>
900050b0:	78fa      	ldrb	r2, [r7, #3]
900050b2:	6879      	ldr	r1, [r7, #4]
900050b4:	4613      	mov	r3, r2
900050b6:	011b      	lsls	r3, r3, #4
900050b8:	1a9b      	subs	r3, r3, r2
900050ba:	009b      	lsls	r3, r3, #2
900050bc:	440b      	add	r3, r1
900050be:	331b      	adds	r3, #27
900050c0:	781b      	ldrb	r3, [r3, #0]
900050c2:	2b01      	cmp	r3, #1
900050c4:	d110      	bne.n	900050e8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
900050c6:	78fa      	ldrb	r2, [r7, #3]
900050c8:	6879      	ldr	r1, [r7, #4]
900050ca:	4613      	mov	r3, r2
900050cc:	011b      	lsls	r3, r3, #4
900050ce:	1a9b      	subs	r3, r3, r2
900050d0:	009b      	lsls	r3, r3, #2
900050d2:	440b      	add	r3, r1
900050d4:	334d      	adds	r3, #77	@ 0x4d
900050d6:	2204      	movs	r2, #4
900050d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
900050da:	687b      	ldr	r3, [r7, #4]
900050dc:	681b      	ldr	r3, [r3, #0]
900050de:	78fa      	ldrb	r2, [r7, #3]
900050e0:	4611      	mov	r1, r2
900050e2:	4618      	mov	r0, r3
900050e4:	f007 f870 	bl	9000c1c8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
900050e8:	78fa      	ldrb	r2, [r7, #3]
900050ea:	6879      	ldr	r1, [r7, #4]
900050ec:	4613      	mov	r3, r2
900050ee:	011b      	lsls	r3, r3, #4
900050f0:	1a9b      	subs	r3, r3, r2
900050f2:	009b      	lsls	r3, r3, #2
900050f4:	440b      	add	r3, r1
900050f6:	331b      	adds	r3, #27
900050f8:	781b      	ldrb	r3, [r3, #0]
900050fa:	2b01      	cmp	r3, #1
900050fc:	d129      	bne.n	90005152 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900050fe:	78fa      	ldrb	r2, [r7, #3]
90005100:	6879      	ldr	r1, [r7, #4]
90005102:	4613      	mov	r3, r2
90005104:	011b      	lsls	r3, r3, #4
90005106:	1a9b      	subs	r3, r3, r2
90005108:	009b      	lsls	r3, r3, #2
9000510a:	440b      	add	r3, r1
9000510c:	331b      	adds	r3, #27
9000510e:	2200      	movs	r2, #0
90005110:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005112:	78fb      	ldrb	r3, [r7, #3]
90005114:	015a      	lsls	r2, r3, #5
90005116:	693b      	ldr	r3, [r7, #16]
90005118:	4413      	add	r3, r2
9000511a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000511e:	685b      	ldr	r3, [r3, #4]
90005120:	78fa      	ldrb	r2, [r7, #3]
90005122:	0151      	lsls	r1, r2, #5
90005124:	693a      	ldr	r2, [r7, #16]
90005126:	440a      	add	r2, r1
90005128:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000512c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005130:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90005132:	78fb      	ldrb	r3, [r7, #3]
90005134:	015a      	lsls	r2, r3, #5
90005136:	693b      	ldr	r3, [r7, #16]
90005138:	4413      	add	r3, r2
9000513a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000513e:	68db      	ldr	r3, [r3, #12]
90005140:	78fa      	ldrb	r2, [r7, #3]
90005142:	0151      	lsls	r1, r2, #5
90005144:	693a      	ldr	r2, [r7, #16]
90005146:	440a      	add	r2, r1
90005148:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000514c:	f043 0320 	orr.w	r3, r3, #32
90005150:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90005152:	78fb      	ldrb	r3, [r7, #3]
90005154:	015a      	lsls	r2, r3, #5
90005156:	693b      	ldr	r3, [r7, #16]
90005158:	4413      	add	r3, r2
9000515a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000515e:	461a      	mov	r2, r3
90005160:	2310      	movs	r3, #16
90005162:	6093      	str	r3, [r2, #8]
90005164:	e000      	b.n	90005168 <HCD_HC_IN_IRQHandler+0xccc>
        return;
90005166:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90005168:	3718      	adds	r7, #24
9000516a:	46bd      	mov	sp, r7
9000516c:	bd80      	pop	{r7, pc}

9000516e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
9000516e:	b580      	push	{r7, lr}
90005170:	b086      	sub	sp, #24
90005172:	af00      	add	r7, sp, #0
90005174:	6078      	str	r0, [r7, #4]
90005176:	460b      	mov	r3, r1
90005178:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000517a:	687b      	ldr	r3, [r7, #4]
9000517c:	681b      	ldr	r3, [r3, #0]
9000517e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005180:	697b      	ldr	r3, [r7, #20]
90005182:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90005184:	687b      	ldr	r3, [r7, #4]
90005186:	681b      	ldr	r3, [r3, #0]
90005188:	78fa      	ldrb	r2, [r7, #3]
9000518a:	4611      	mov	r1, r2
9000518c:	4618      	mov	r0, r3
9000518e:	f006 ff9e 	bl	9000c0ce <USB_ReadChInterrupts>
90005192:	4603      	mov	r3, r0
90005194:	f003 0304 	and.w	r3, r3, #4
90005198:	2b04      	cmp	r3, #4
9000519a:	d11b      	bne.n	900051d4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
9000519c:	78fb      	ldrb	r3, [r7, #3]
9000519e:	015a      	lsls	r2, r3, #5
900051a0:	693b      	ldr	r3, [r7, #16]
900051a2:	4413      	add	r3, r2
900051a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051a8:	461a      	mov	r2, r3
900051aa:	2304      	movs	r3, #4
900051ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900051ae:	78fa      	ldrb	r2, [r7, #3]
900051b0:	6879      	ldr	r1, [r7, #4]
900051b2:	4613      	mov	r3, r2
900051b4:	011b      	lsls	r3, r3, #4
900051b6:	1a9b      	subs	r3, r3, r2
900051b8:	009b      	lsls	r3, r3, #2
900051ba:	440b      	add	r3, r1
900051bc:	334d      	adds	r3, #77	@ 0x4d
900051be:	2207      	movs	r2, #7
900051c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900051c2:	687b      	ldr	r3, [r7, #4]
900051c4:	681b      	ldr	r3, [r3, #0]
900051c6:	78fa      	ldrb	r2, [r7, #3]
900051c8:	4611      	mov	r1, r2
900051ca:	4618      	mov	r0, r3
900051cc:	f006 fffc 	bl	9000c1c8 <USB_HC_Halt>
900051d0:	f000 bc89 	b.w	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900051d4:	687b      	ldr	r3, [r7, #4]
900051d6:	681b      	ldr	r3, [r3, #0]
900051d8:	78fa      	ldrb	r2, [r7, #3]
900051da:	4611      	mov	r1, r2
900051dc:	4618      	mov	r0, r3
900051de:	f006 ff76 	bl	9000c0ce <USB_ReadChInterrupts>
900051e2:	4603      	mov	r3, r0
900051e4:	f003 0320 	and.w	r3, r3, #32
900051e8:	2b20      	cmp	r3, #32
900051ea:	f040 8082 	bne.w	900052f2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900051ee:	78fb      	ldrb	r3, [r7, #3]
900051f0:	015a      	lsls	r2, r3, #5
900051f2:	693b      	ldr	r3, [r7, #16]
900051f4:	4413      	add	r3, r2
900051f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051fa:	461a      	mov	r2, r3
900051fc:	2320      	movs	r3, #32
900051fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90005200:	78fa      	ldrb	r2, [r7, #3]
90005202:	6879      	ldr	r1, [r7, #4]
90005204:	4613      	mov	r3, r2
90005206:	011b      	lsls	r3, r3, #4
90005208:	1a9b      	subs	r3, r3, r2
9000520a:	009b      	lsls	r3, r3, #2
9000520c:	440b      	add	r3, r1
9000520e:	3319      	adds	r3, #25
90005210:	781b      	ldrb	r3, [r3, #0]
90005212:	2b01      	cmp	r3, #1
90005214:	d124      	bne.n	90005260 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90005216:	78fa      	ldrb	r2, [r7, #3]
90005218:	6879      	ldr	r1, [r7, #4]
9000521a:	4613      	mov	r3, r2
9000521c:	011b      	lsls	r3, r3, #4
9000521e:	1a9b      	subs	r3, r3, r2
90005220:	009b      	lsls	r3, r3, #2
90005222:	440b      	add	r3, r1
90005224:	3319      	adds	r3, #25
90005226:	2200      	movs	r2, #0
90005228:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000522a:	78fa      	ldrb	r2, [r7, #3]
9000522c:	6879      	ldr	r1, [r7, #4]
9000522e:	4613      	mov	r3, r2
90005230:	011b      	lsls	r3, r3, #4
90005232:	1a9b      	subs	r3, r3, r2
90005234:	009b      	lsls	r3, r3, #2
90005236:	440b      	add	r3, r1
90005238:	334c      	adds	r3, #76	@ 0x4c
9000523a:	2202      	movs	r2, #2
9000523c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
9000523e:	78fa      	ldrb	r2, [r7, #3]
90005240:	6879      	ldr	r1, [r7, #4]
90005242:	4613      	mov	r3, r2
90005244:	011b      	lsls	r3, r3, #4
90005246:	1a9b      	subs	r3, r3, r2
90005248:	009b      	lsls	r3, r3, #2
9000524a:	440b      	add	r3, r1
9000524c:	334d      	adds	r3, #77	@ 0x4d
9000524e:	2203      	movs	r2, #3
90005250:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005252:	687b      	ldr	r3, [r7, #4]
90005254:	681b      	ldr	r3, [r3, #0]
90005256:	78fa      	ldrb	r2, [r7, #3]
90005258:	4611      	mov	r1, r2
9000525a:	4618      	mov	r0, r3
9000525c:	f006 ffb4 	bl	9000c1c8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90005260:	78fa      	ldrb	r2, [r7, #3]
90005262:	6879      	ldr	r1, [r7, #4]
90005264:	4613      	mov	r3, r2
90005266:	011b      	lsls	r3, r3, #4
90005268:	1a9b      	subs	r3, r3, r2
9000526a:	009b      	lsls	r3, r3, #2
9000526c:	440b      	add	r3, r1
9000526e:	331a      	adds	r3, #26
90005270:	781b      	ldrb	r3, [r3, #0]
90005272:	2b01      	cmp	r3, #1
90005274:	f040 8437 	bne.w	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
90005278:	78fa      	ldrb	r2, [r7, #3]
9000527a:	6879      	ldr	r1, [r7, #4]
9000527c:	4613      	mov	r3, r2
9000527e:	011b      	lsls	r3, r3, #4
90005280:	1a9b      	subs	r3, r3, r2
90005282:	009b      	lsls	r3, r3, #2
90005284:	440b      	add	r3, r1
90005286:	331b      	adds	r3, #27
90005288:	781b      	ldrb	r3, [r3, #0]
9000528a:	2b00      	cmp	r3, #0
9000528c:	f040 842b 	bne.w	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90005290:	78fa      	ldrb	r2, [r7, #3]
90005292:	6879      	ldr	r1, [r7, #4]
90005294:	4613      	mov	r3, r2
90005296:	011b      	lsls	r3, r3, #4
90005298:	1a9b      	subs	r3, r3, r2
9000529a:	009b      	lsls	r3, r3, #2
9000529c:	440b      	add	r3, r1
9000529e:	3326      	adds	r3, #38	@ 0x26
900052a0:	781b      	ldrb	r3, [r3, #0]
900052a2:	2b01      	cmp	r3, #1
900052a4:	d009      	beq.n	900052ba <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
900052a6:	78fa      	ldrb	r2, [r7, #3]
900052a8:	6879      	ldr	r1, [r7, #4]
900052aa:	4613      	mov	r3, r2
900052ac:	011b      	lsls	r3, r3, #4
900052ae:	1a9b      	subs	r3, r3, r2
900052b0:	009b      	lsls	r3, r3, #2
900052b2:	440b      	add	r3, r1
900052b4:	331b      	adds	r3, #27
900052b6:	2201      	movs	r2, #1
900052b8:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
900052ba:	78fa      	ldrb	r2, [r7, #3]
900052bc:	6879      	ldr	r1, [r7, #4]
900052be:	4613      	mov	r3, r2
900052c0:	011b      	lsls	r3, r3, #4
900052c2:	1a9b      	subs	r3, r3, r2
900052c4:	009b      	lsls	r3, r3, #2
900052c6:	440b      	add	r3, r1
900052c8:	334d      	adds	r3, #77	@ 0x4d
900052ca:	2203      	movs	r2, #3
900052cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900052ce:	687b      	ldr	r3, [r7, #4]
900052d0:	681b      	ldr	r3, [r3, #0]
900052d2:	78fa      	ldrb	r2, [r7, #3]
900052d4:	4611      	mov	r1, r2
900052d6:	4618      	mov	r0, r3
900052d8:	f006 ff76 	bl	9000c1c8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
900052dc:	78fa      	ldrb	r2, [r7, #3]
900052de:	6879      	ldr	r1, [r7, #4]
900052e0:	4613      	mov	r3, r2
900052e2:	011b      	lsls	r3, r3, #4
900052e4:	1a9b      	subs	r3, r3, r2
900052e6:	009b      	lsls	r3, r3, #2
900052e8:	440b      	add	r3, r1
900052ea:	3344      	adds	r3, #68	@ 0x44
900052ec:	2200      	movs	r2, #0
900052ee:	601a      	str	r2, [r3, #0]
900052f0:	e3f9      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900052f2:	687b      	ldr	r3, [r7, #4]
900052f4:	681b      	ldr	r3, [r3, #0]
900052f6:	78fa      	ldrb	r2, [r7, #3]
900052f8:	4611      	mov	r1, r2
900052fa:	4618      	mov	r0, r3
900052fc:	f006 fee7 	bl	9000c0ce <USB_ReadChInterrupts>
90005300:	4603      	mov	r3, r0
90005302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90005306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000530a:	d111      	bne.n	90005330 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
9000530c:	78fb      	ldrb	r3, [r7, #3]
9000530e:	015a      	lsls	r2, r3, #5
90005310:	693b      	ldr	r3, [r7, #16]
90005312:	4413      	add	r3, r2
90005314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005318:	461a      	mov	r2, r3
9000531a:	f44f 7300 	mov.w	r3, #512	@ 0x200
9000531e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005320:	687b      	ldr	r3, [r7, #4]
90005322:	681b      	ldr	r3, [r3, #0]
90005324:	78fa      	ldrb	r2, [r7, #3]
90005326:	4611      	mov	r1, r2
90005328:	4618      	mov	r0, r3
9000532a:	f006 ff4d 	bl	9000c1c8 <USB_HC_Halt>
9000532e:	e3da      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90005330:	687b      	ldr	r3, [r7, #4]
90005332:	681b      	ldr	r3, [r3, #0]
90005334:	78fa      	ldrb	r2, [r7, #3]
90005336:	4611      	mov	r1, r2
90005338:	4618      	mov	r0, r3
9000533a:	f006 fec8 	bl	9000c0ce <USB_ReadChInterrupts>
9000533e:	4603      	mov	r3, r0
90005340:	f003 0301 	and.w	r3, r3, #1
90005344:	2b01      	cmp	r3, #1
90005346:	d168      	bne.n	9000541a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005348:	78fa      	ldrb	r2, [r7, #3]
9000534a:	6879      	ldr	r1, [r7, #4]
9000534c:	4613      	mov	r3, r2
9000534e:	011b      	lsls	r3, r3, #4
90005350:	1a9b      	subs	r3, r3, r2
90005352:	009b      	lsls	r3, r3, #2
90005354:	440b      	add	r3, r1
90005356:	3344      	adds	r3, #68	@ 0x44
90005358:	2200      	movs	r2, #0
9000535a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
9000535c:	687b      	ldr	r3, [r7, #4]
9000535e:	681b      	ldr	r3, [r3, #0]
90005360:	78fa      	ldrb	r2, [r7, #3]
90005362:	4611      	mov	r1, r2
90005364:	4618      	mov	r0, r3
90005366:	f006 feb2 	bl	9000c0ce <USB_ReadChInterrupts>
9000536a:	4603      	mov	r3, r0
9000536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005370:	2b40      	cmp	r3, #64	@ 0x40
90005372:	d112      	bne.n	9000539a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005374:	78fa      	ldrb	r2, [r7, #3]
90005376:	6879      	ldr	r1, [r7, #4]
90005378:	4613      	mov	r3, r2
9000537a:	011b      	lsls	r3, r3, #4
9000537c:	1a9b      	subs	r3, r3, r2
9000537e:	009b      	lsls	r3, r3, #2
90005380:	440b      	add	r3, r1
90005382:	3319      	adds	r3, #25
90005384:	2201      	movs	r2, #1
90005386:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005388:	78fb      	ldrb	r3, [r7, #3]
9000538a:	015a      	lsls	r2, r3, #5
9000538c:	693b      	ldr	r3, [r7, #16]
9000538e:	4413      	add	r3, r2
90005390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005394:	461a      	mov	r2, r3
90005396:	2340      	movs	r3, #64	@ 0x40
90005398:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
9000539a:	78fa      	ldrb	r2, [r7, #3]
9000539c:	6879      	ldr	r1, [r7, #4]
9000539e:	4613      	mov	r3, r2
900053a0:	011b      	lsls	r3, r3, #4
900053a2:	1a9b      	subs	r3, r3, r2
900053a4:	009b      	lsls	r3, r3, #2
900053a6:	440b      	add	r3, r1
900053a8:	331b      	adds	r3, #27
900053aa:	781b      	ldrb	r3, [r3, #0]
900053ac:	2b00      	cmp	r3, #0
900053ae:	d019      	beq.n	900053e4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
900053b0:	78fa      	ldrb	r2, [r7, #3]
900053b2:	6879      	ldr	r1, [r7, #4]
900053b4:	4613      	mov	r3, r2
900053b6:	011b      	lsls	r3, r3, #4
900053b8:	1a9b      	subs	r3, r3, r2
900053ba:	009b      	lsls	r3, r3, #2
900053bc:	440b      	add	r3, r1
900053be:	331b      	adds	r3, #27
900053c0:	2200      	movs	r2, #0
900053c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900053c4:	78fb      	ldrb	r3, [r7, #3]
900053c6:	015a      	lsls	r2, r3, #5
900053c8:	693b      	ldr	r3, [r7, #16]
900053ca:	4413      	add	r3, r2
900053cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053d0:	685b      	ldr	r3, [r3, #4]
900053d2:	78fa      	ldrb	r2, [r7, #3]
900053d4:	0151      	lsls	r1, r2, #5
900053d6:	693a      	ldr	r2, [r7, #16]
900053d8:	440a      	add	r2, r1
900053da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900053de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900053e2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900053e4:	78fb      	ldrb	r3, [r7, #3]
900053e6:	015a      	lsls	r2, r3, #5
900053e8:	693b      	ldr	r3, [r7, #16]
900053ea:	4413      	add	r3, r2
900053ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053f0:	461a      	mov	r2, r3
900053f2:	2301      	movs	r3, #1
900053f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
900053f6:	78fa      	ldrb	r2, [r7, #3]
900053f8:	6879      	ldr	r1, [r7, #4]
900053fa:	4613      	mov	r3, r2
900053fc:	011b      	lsls	r3, r3, #4
900053fe:	1a9b      	subs	r3, r3, r2
90005400:	009b      	lsls	r3, r3, #2
90005402:	440b      	add	r3, r1
90005404:	334d      	adds	r3, #77	@ 0x4d
90005406:	2201      	movs	r2, #1
90005408:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000540a:	687b      	ldr	r3, [r7, #4]
9000540c:	681b      	ldr	r3, [r3, #0]
9000540e:	78fa      	ldrb	r2, [r7, #3]
90005410:	4611      	mov	r1, r2
90005412:	4618      	mov	r0, r3
90005414:	f006 fed8 	bl	9000c1c8 <USB_HC_Halt>
90005418:	e365      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
9000541a:	687b      	ldr	r3, [r7, #4]
9000541c:	681b      	ldr	r3, [r3, #0]
9000541e:	78fa      	ldrb	r2, [r7, #3]
90005420:	4611      	mov	r1, r2
90005422:	4618      	mov	r0, r3
90005424:	f006 fe53 	bl	9000c0ce <USB_ReadChInterrupts>
90005428:	4603      	mov	r3, r0
9000542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000542e:	2b40      	cmp	r3, #64	@ 0x40
90005430:	d139      	bne.n	900054a6 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
90005432:	78fa      	ldrb	r2, [r7, #3]
90005434:	6879      	ldr	r1, [r7, #4]
90005436:	4613      	mov	r3, r2
90005438:	011b      	lsls	r3, r3, #4
9000543a:	1a9b      	subs	r3, r3, r2
9000543c:	009b      	lsls	r3, r3, #2
9000543e:	440b      	add	r3, r1
90005440:	334d      	adds	r3, #77	@ 0x4d
90005442:	2205      	movs	r2, #5
90005444:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90005446:	78fa      	ldrb	r2, [r7, #3]
90005448:	6879      	ldr	r1, [r7, #4]
9000544a:	4613      	mov	r3, r2
9000544c:	011b      	lsls	r3, r3, #4
9000544e:	1a9b      	subs	r3, r3, r2
90005450:	009b      	lsls	r3, r3, #2
90005452:	440b      	add	r3, r1
90005454:	331a      	adds	r3, #26
90005456:	781b      	ldrb	r3, [r3, #0]
90005458:	2b00      	cmp	r3, #0
9000545a:	d109      	bne.n	90005470 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
9000545c:	78fa      	ldrb	r2, [r7, #3]
9000545e:	6879      	ldr	r1, [r7, #4]
90005460:	4613      	mov	r3, r2
90005462:	011b      	lsls	r3, r3, #4
90005464:	1a9b      	subs	r3, r3, r2
90005466:	009b      	lsls	r3, r3, #2
90005468:	440b      	add	r3, r1
9000546a:	3319      	adds	r3, #25
9000546c:	2201      	movs	r2, #1
9000546e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005470:	78fa      	ldrb	r2, [r7, #3]
90005472:	6879      	ldr	r1, [r7, #4]
90005474:	4613      	mov	r3, r2
90005476:	011b      	lsls	r3, r3, #4
90005478:	1a9b      	subs	r3, r3, r2
9000547a:	009b      	lsls	r3, r3, #2
9000547c:	440b      	add	r3, r1
9000547e:	3344      	adds	r3, #68	@ 0x44
90005480:	2200      	movs	r2, #0
90005482:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005484:	687b      	ldr	r3, [r7, #4]
90005486:	681b      	ldr	r3, [r3, #0]
90005488:	78fa      	ldrb	r2, [r7, #3]
9000548a:	4611      	mov	r1, r2
9000548c:	4618      	mov	r0, r3
9000548e:	f006 fe9b 	bl	9000c1c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005492:	78fb      	ldrb	r3, [r7, #3]
90005494:	015a      	lsls	r2, r3, #5
90005496:	693b      	ldr	r3, [r7, #16]
90005498:	4413      	add	r3, r2
9000549a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000549e:	461a      	mov	r2, r3
900054a0:	2340      	movs	r3, #64	@ 0x40
900054a2:	6093      	str	r3, [r2, #8]
900054a4:	e31f      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
900054a6:	687b      	ldr	r3, [r7, #4]
900054a8:	681b      	ldr	r3, [r3, #0]
900054aa:	78fa      	ldrb	r2, [r7, #3]
900054ac:	4611      	mov	r1, r2
900054ae:	4618      	mov	r0, r3
900054b0:	f006 fe0d 	bl	9000c0ce <USB_ReadChInterrupts>
900054b4:	4603      	mov	r3, r0
900054b6:	f003 0308 	and.w	r3, r3, #8
900054ba:	2b08      	cmp	r3, #8
900054bc:	d11a      	bne.n	900054f4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900054be:	78fb      	ldrb	r3, [r7, #3]
900054c0:	015a      	lsls	r2, r3, #5
900054c2:	693b      	ldr	r3, [r7, #16]
900054c4:	4413      	add	r3, r2
900054c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054ca:	461a      	mov	r2, r3
900054cc:	2308      	movs	r3, #8
900054ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900054d0:	78fa      	ldrb	r2, [r7, #3]
900054d2:	6879      	ldr	r1, [r7, #4]
900054d4:	4613      	mov	r3, r2
900054d6:	011b      	lsls	r3, r3, #4
900054d8:	1a9b      	subs	r3, r3, r2
900054da:	009b      	lsls	r3, r3, #2
900054dc:	440b      	add	r3, r1
900054de:	334d      	adds	r3, #77	@ 0x4d
900054e0:	2206      	movs	r2, #6
900054e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900054e4:	687b      	ldr	r3, [r7, #4]
900054e6:	681b      	ldr	r3, [r3, #0]
900054e8:	78fa      	ldrb	r2, [r7, #3]
900054ea:	4611      	mov	r1, r2
900054ec:	4618      	mov	r0, r3
900054ee:	f006 fe6b 	bl	9000c1c8 <USB_HC_Halt>
900054f2:	e2f8      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
900054f4:	687b      	ldr	r3, [r7, #4]
900054f6:	681b      	ldr	r3, [r3, #0]
900054f8:	78fa      	ldrb	r2, [r7, #3]
900054fa:	4611      	mov	r1, r2
900054fc:	4618      	mov	r0, r3
900054fe:	f006 fde6 	bl	9000c0ce <USB_ReadChInterrupts>
90005502:	4603      	mov	r3, r0
90005504:	f003 0310 	and.w	r3, r3, #16
90005508:	2b10      	cmp	r3, #16
9000550a:	d144      	bne.n	90005596 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
9000550c:	78fa      	ldrb	r2, [r7, #3]
9000550e:	6879      	ldr	r1, [r7, #4]
90005510:	4613      	mov	r3, r2
90005512:	011b      	lsls	r3, r3, #4
90005514:	1a9b      	subs	r3, r3, r2
90005516:	009b      	lsls	r3, r3, #2
90005518:	440b      	add	r3, r1
9000551a:	3344      	adds	r3, #68	@ 0x44
9000551c:	2200      	movs	r2, #0
9000551e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90005520:	78fa      	ldrb	r2, [r7, #3]
90005522:	6879      	ldr	r1, [r7, #4]
90005524:	4613      	mov	r3, r2
90005526:	011b      	lsls	r3, r3, #4
90005528:	1a9b      	subs	r3, r3, r2
9000552a:	009b      	lsls	r3, r3, #2
9000552c:	440b      	add	r3, r1
9000552e:	334d      	adds	r3, #77	@ 0x4d
90005530:	2204      	movs	r2, #4
90005532:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90005534:	78fa      	ldrb	r2, [r7, #3]
90005536:	6879      	ldr	r1, [r7, #4]
90005538:	4613      	mov	r3, r2
9000553a:	011b      	lsls	r3, r3, #4
9000553c:	1a9b      	subs	r3, r3, r2
9000553e:	009b      	lsls	r3, r3, #2
90005540:	440b      	add	r3, r1
90005542:	3319      	adds	r3, #25
90005544:	781b      	ldrb	r3, [r3, #0]
90005546:	2b00      	cmp	r3, #0
90005548:	d114      	bne.n	90005574 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
9000554a:	78fa      	ldrb	r2, [r7, #3]
9000554c:	6879      	ldr	r1, [r7, #4]
9000554e:	4613      	mov	r3, r2
90005550:	011b      	lsls	r3, r3, #4
90005552:	1a9b      	subs	r3, r3, r2
90005554:	009b      	lsls	r3, r3, #2
90005556:	440b      	add	r3, r1
90005558:	3318      	adds	r3, #24
9000555a:	781b      	ldrb	r3, [r3, #0]
9000555c:	2b00      	cmp	r3, #0
9000555e:	d109      	bne.n	90005574 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
90005560:	78fa      	ldrb	r2, [r7, #3]
90005562:	6879      	ldr	r1, [r7, #4]
90005564:	4613      	mov	r3, r2
90005566:	011b      	lsls	r3, r3, #4
90005568:	1a9b      	subs	r3, r3, r2
9000556a:	009b      	lsls	r3, r3, #2
9000556c:	440b      	add	r3, r1
9000556e:	3319      	adds	r3, #25
90005570:	2201      	movs	r2, #1
90005572:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005574:	687b      	ldr	r3, [r7, #4]
90005576:	681b      	ldr	r3, [r3, #0]
90005578:	78fa      	ldrb	r2, [r7, #3]
9000557a:	4611      	mov	r1, r2
9000557c:	4618      	mov	r0, r3
9000557e:	f006 fe23 	bl	9000c1c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90005582:	78fb      	ldrb	r3, [r7, #3]
90005584:	015a      	lsls	r2, r3, #5
90005586:	693b      	ldr	r3, [r7, #16]
90005588:	4413      	add	r3, r2
9000558a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000558e:	461a      	mov	r2, r3
90005590:	2310      	movs	r3, #16
90005592:	6093      	str	r3, [r2, #8]
90005594:	e2a7      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005596:	687b      	ldr	r3, [r7, #4]
90005598:	681b      	ldr	r3, [r3, #0]
9000559a:	78fa      	ldrb	r2, [r7, #3]
9000559c:	4611      	mov	r1, r2
9000559e:	4618      	mov	r0, r3
900055a0:	f006 fd95 	bl	9000c0ce <USB_ReadChInterrupts>
900055a4:	4603      	mov	r3, r0
900055a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900055aa:	2b80      	cmp	r3, #128	@ 0x80
900055ac:	f040 8083 	bne.w	900056b6 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
900055b0:	687b      	ldr	r3, [r7, #4]
900055b2:	799b      	ldrb	r3, [r3, #6]
900055b4:	2b00      	cmp	r3, #0
900055b6:	d111      	bne.n	900055dc <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
900055b8:	78fa      	ldrb	r2, [r7, #3]
900055ba:	6879      	ldr	r1, [r7, #4]
900055bc:	4613      	mov	r3, r2
900055be:	011b      	lsls	r3, r3, #4
900055c0:	1a9b      	subs	r3, r3, r2
900055c2:	009b      	lsls	r3, r3, #2
900055c4:	440b      	add	r3, r1
900055c6:	334d      	adds	r3, #77	@ 0x4d
900055c8:	2207      	movs	r2, #7
900055ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
900055cc:	687b      	ldr	r3, [r7, #4]
900055ce:	681b      	ldr	r3, [r3, #0]
900055d0:	78fa      	ldrb	r2, [r7, #3]
900055d2:	4611      	mov	r1, r2
900055d4:	4618      	mov	r0, r3
900055d6:	f006 fdf7 	bl	9000c1c8 <USB_HC_Halt>
900055da:	e062      	b.n	900056a2 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
900055dc:	78fa      	ldrb	r2, [r7, #3]
900055de:	6879      	ldr	r1, [r7, #4]
900055e0:	4613      	mov	r3, r2
900055e2:	011b      	lsls	r3, r3, #4
900055e4:	1a9b      	subs	r3, r3, r2
900055e6:	009b      	lsls	r3, r3, #2
900055e8:	440b      	add	r3, r1
900055ea:	3344      	adds	r3, #68	@ 0x44
900055ec:	681b      	ldr	r3, [r3, #0]
900055ee:	1c59      	adds	r1, r3, #1
900055f0:	6878      	ldr	r0, [r7, #4]
900055f2:	4613      	mov	r3, r2
900055f4:	011b      	lsls	r3, r3, #4
900055f6:	1a9b      	subs	r3, r3, r2
900055f8:	009b      	lsls	r3, r3, #2
900055fa:	4403      	add	r3, r0
900055fc:	3344      	adds	r3, #68	@ 0x44
900055fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005600:	78fa      	ldrb	r2, [r7, #3]
90005602:	6879      	ldr	r1, [r7, #4]
90005604:	4613      	mov	r3, r2
90005606:	011b      	lsls	r3, r3, #4
90005608:	1a9b      	subs	r3, r3, r2
9000560a:	009b      	lsls	r3, r3, #2
9000560c:	440b      	add	r3, r1
9000560e:	3344      	adds	r3, #68	@ 0x44
90005610:	681b      	ldr	r3, [r3, #0]
90005612:	2b02      	cmp	r3, #2
90005614:	d922      	bls.n	9000565c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005616:	78fa      	ldrb	r2, [r7, #3]
90005618:	6879      	ldr	r1, [r7, #4]
9000561a:	4613      	mov	r3, r2
9000561c:	011b      	lsls	r3, r3, #4
9000561e:	1a9b      	subs	r3, r3, r2
90005620:	009b      	lsls	r3, r3, #2
90005622:	440b      	add	r3, r1
90005624:	3344      	adds	r3, #68	@ 0x44
90005626:	2200      	movs	r2, #0
90005628:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
9000562a:	78fa      	ldrb	r2, [r7, #3]
9000562c:	6879      	ldr	r1, [r7, #4]
9000562e:	4613      	mov	r3, r2
90005630:	011b      	lsls	r3, r3, #4
90005632:	1a9b      	subs	r3, r3, r2
90005634:	009b      	lsls	r3, r3, #2
90005636:	440b      	add	r3, r1
90005638:	334c      	adds	r3, #76	@ 0x4c
9000563a:	2204      	movs	r2, #4
9000563c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000563e:	78fa      	ldrb	r2, [r7, #3]
90005640:	6879      	ldr	r1, [r7, #4]
90005642:	4613      	mov	r3, r2
90005644:	011b      	lsls	r3, r3, #4
90005646:	1a9b      	subs	r3, r3, r2
90005648:	009b      	lsls	r3, r3, #2
9000564a:	440b      	add	r3, r1
9000564c:	334c      	adds	r3, #76	@ 0x4c
9000564e:	781a      	ldrb	r2, [r3, #0]
90005650:	78fb      	ldrb	r3, [r7, #3]
90005652:	4619      	mov	r1, r3
90005654:	6878      	ldr	r0, [r7, #4]
90005656:	f7fb fead 	bl	900013b4 <HAL_HCD_HC_NotifyURBChange_Callback>
9000565a:	e022      	b.n	900056a2 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000565c:	78fa      	ldrb	r2, [r7, #3]
9000565e:	6879      	ldr	r1, [r7, #4]
90005660:	4613      	mov	r3, r2
90005662:	011b      	lsls	r3, r3, #4
90005664:	1a9b      	subs	r3, r3, r2
90005666:	009b      	lsls	r3, r3, #2
90005668:	440b      	add	r3, r1
9000566a:	334c      	adds	r3, #76	@ 0x4c
9000566c:	2202      	movs	r2, #2
9000566e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005670:	78fb      	ldrb	r3, [r7, #3]
90005672:	015a      	lsls	r2, r3, #5
90005674:	693b      	ldr	r3, [r7, #16]
90005676:	4413      	add	r3, r2
90005678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000567c:	681b      	ldr	r3, [r3, #0]
9000567e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005680:	68fb      	ldr	r3, [r7, #12]
90005682:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005686:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005688:	68fb      	ldr	r3, [r7, #12]
9000568a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000568e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005690:	78fb      	ldrb	r3, [r7, #3]
90005692:	015a      	lsls	r2, r3, #5
90005694:	693b      	ldr	r3, [r7, #16]
90005696:	4413      	add	r3, r2
90005698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000569c:	461a      	mov	r2, r3
9000569e:	68fb      	ldr	r3, [r7, #12]
900056a0:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900056a2:	78fb      	ldrb	r3, [r7, #3]
900056a4:	015a      	lsls	r2, r3, #5
900056a6:	693b      	ldr	r3, [r7, #16]
900056a8:	4413      	add	r3, r2
900056aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900056ae:	461a      	mov	r2, r3
900056b0:	2380      	movs	r3, #128	@ 0x80
900056b2:	6093      	str	r3, [r2, #8]
900056b4:	e217      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900056b6:	687b      	ldr	r3, [r7, #4]
900056b8:	681b      	ldr	r3, [r3, #0]
900056ba:	78fa      	ldrb	r2, [r7, #3]
900056bc:	4611      	mov	r1, r2
900056be:	4618      	mov	r0, r3
900056c0:	f006 fd05 	bl	9000c0ce <USB_ReadChInterrupts>
900056c4:	4603      	mov	r3, r0
900056c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900056ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900056ce:	d11b      	bne.n	90005708 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
900056d0:	78fa      	ldrb	r2, [r7, #3]
900056d2:	6879      	ldr	r1, [r7, #4]
900056d4:	4613      	mov	r3, r2
900056d6:	011b      	lsls	r3, r3, #4
900056d8:	1a9b      	subs	r3, r3, r2
900056da:	009b      	lsls	r3, r3, #2
900056dc:	440b      	add	r3, r1
900056de:	334d      	adds	r3, #77	@ 0x4d
900056e0:	2209      	movs	r2, #9
900056e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900056e4:	687b      	ldr	r3, [r7, #4]
900056e6:	681b      	ldr	r3, [r3, #0]
900056e8:	78fa      	ldrb	r2, [r7, #3]
900056ea:	4611      	mov	r1, r2
900056ec:	4618      	mov	r0, r3
900056ee:	f006 fd6b 	bl	9000c1c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900056f2:	78fb      	ldrb	r3, [r7, #3]
900056f4:	015a      	lsls	r2, r3, #5
900056f6:	693b      	ldr	r3, [r7, #16]
900056f8:	4413      	add	r3, r2
900056fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900056fe:	461a      	mov	r2, r3
90005700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90005704:	6093      	str	r3, [r2, #8]
90005706:	e1ee      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90005708:	687b      	ldr	r3, [r7, #4]
9000570a:	681b      	ldr	r3, [r3, #0]
9000570c:	78fa      	ldrb	r2, [r7, #3]
9000570e:	4611      	mov	r1, r2
90005710:	4618      	mov	r0, r3
90005712:	f006 fcdc 	bl	9000c0ce <USB_ReadChInterrupts>
90005716:	4603      	mov	r3, r0
90005718:	f003 0302 	and.w	r3, r3, #2
9000571c:	2b02      	cmp	r3, #2
9000571e:	f040 81df 	bne.w	90005ae0 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005722:	78fb      	ldrb	r3, [r7, #3]
90005724:	015a      	lsls	r2, r3, #5
90005726:	693b      	ldr	r3, [r7, #16]
90005728:	4413      	add	r3, r2
9000572a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000572e:	461a      	mov	r2, r3
90005730:	2302      	movs	r3, #2
90005732:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005734:	78fa      	ldrb	r2, [r7, #3]
90005736:	6879      	ldr	r1, [r7, #4]
90005738:	4613      	mov	r3, r2
9000573a:	011b      	lsls	r3, r3, #4
9000573c:	1a9b      	subs	r3, r3, r2
9000573e:	009b      	lsls	r3, r3, #2
90005740:	440b      	add	r3, r1
90005742:	334d      	adds	r3, #77	@ 0x4d
90005744:	781b      	ldrb	r3, [r3, #0]
90005746:	2b01      	cmp	r3, #1
90005748:	f040 8093 	bne.w	90005872 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000574c:	78fa      	ldrb	r2, [r7, #3]
9000574e:	6879      	ldr	r1, [r7, #4]
90005750:	4613      	mov	r3, r2
90005752:	011b      	lsls	r3, r3, #4
90005754:	1a9b      	subs	r3, r3, r2
90005756:	009b      	lsls	r3, r3, #2
90005758:	440b      	add	r3, r1
9000575a:	334d      	adds	r3, #77	@ 0x4d
9000575c:	2202      	movs	r2, #2
9000575e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90005760:	78fa      	ldrb	r2, [r7, #3]
90005762:	6879      	ldr	r1, [r7, #4]
90005764:	4613      	mov	r3, r2
90005766:	011b      	lsls	r3, r3, #4
90005768:	1a9b      	subs	r3, r3, r2
9000576a:	009b      	lsls	r3, r3, #2
9000576c:	440b      	add	r3, r1
9000576e:	334c      	adds	r3, #76	@ 0x4c
90005770:	2201      	movs	r2, #1
90005772:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005774:	78fa      	ldrb	r2, [r7, #3]
90005776:	6879      	ldr	r1, [r7, #4]
90005778:	4613      	mov	r3, r2
9000577a:	011b      	lsls	r3, r3, #4
9000577c:	1a9b      	subs	r3, r3, r2
9000577e:	009b      	lsls	r3, r3, #2
90005780:	440b      	add	r3, r1
90005782:	3326      	adds	r3, #38	@ 0x26
90005784:	781b      	ldrb	r3, [r3, #0]
90005786:	2b02      	cmp	r3, #2
90005788:	d00b      	beq.n	900057a2 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
9000578a:	78fa      	ldrb	r2, [r7, #3]
9000578c:	6879      	ldr	r1, [r7, #4]
9000578e:	4613      	mov	r3, r2
90005790:	011b      	lsls	r3, r3, #4
90005792:	1a9b      	subs	r3, r3, r2
90005794:	009b      	lsls	r3, r3, #2
90005796:	440b      	add	r3, r1
90005798:	3326      	adds	r3, #38	@ 0x26
9000579a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
9000579c:	2b03      	cmp	r3, #3
9000579e:	f040 8190 	bne.w	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
900057a2:	687b      	ldr	r3, [r7, #4]
900057a4:	799b      	ldrb	r3, [r3, #6]
900057a6:	2b00      	cmp	r3, #0
900057a8:	d115      	bne.n	900057d6 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
900057aa:	78fa      	ldrb	r2, [r7, #3]
900057ac:	6879      	ldr	r1, [r7, #4]
900057ae:	4613      	mov	r3, r2
900057b0:	011b      	lsls	r3, r3, #4
900057b2:	1a9b      	subs	r3, r3, r2
900057b4:	009b      	lsls	r3, r3, #2
900057b6:	440b      	add	r3, r1
900057b8:	333d      	adds	r3, #61	@ 0x3d
900057ba:	781b      	ldrb	r3, [r3, #0]
900057bc:	78fa      	ldrb	r2, [r7, #3]
900057be:	f083 0301 	eor.w	r3, r3, #1
900057c2:	b2d8      	uxtb	r0, r3
900057c4:	6879      	ldr	r1, [r7, #4]
900057c6:	4613      	mov	r3, r2
900057c8:	011b      	lsls	r3, r3, #4
900057ca:	1a9b      	subs	r3, r3, r2
900057cc:	009b      	lsls	r3, r3, #2
900057ce:	440b      	add	r3, r1
900057d0:	333d      	adds	r3, #61	@ 0x3d
900057d2:	4602      	mov	r2, r0
900057d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
900057d6:	687b      	ldr	r3, [r7, #4]
900057d8:	799b      	ldrb	r3, [r3, #6]
900057da:	2b01      	cmp	r3, #1
900057dc:	f040 8171 	bne.w	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
900057e0:	78fa      	ldrb	r2, [r7, #3]
900057e2:	6879      	ldr	r1, [r7, #4]
900057e4:	4613      	mov	r3, r2
900057e6:	011b      	lsls	r3, r3, #4
900057e8:	1a9b      	subs	r3, r3, r2
900057ea:	009b      	lsls	r3, r3, #2
900057ec:	440b      	add	r3, r1
900057ee:	3334      	adds	r3, #52	@ 0x34
900057f0:	681b      	ldr	r3, [r3, #0]
900057f2:	2b00      	cmp	r3, #0
900057f4:	f000 8165 	beq.w	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
900057f8:	78fa      	ldrb	r2, [r7, #3]
900057fa:	6879      	ldr	r1, [r7, #4]
900057fc:	4613      	mov	r3, r2
900057fe:	011b      	lsls	r3, r3, #4
90005800:	1a9b      	subs	r3, r3, r2
90005802:	009b      	lsls	r3, r3, #2
90005804:	440b      	add	r3, r1
90005806:	3334      	adds	r3, #52	@ 0x34
90005808:	6819      	ldr	r1, [r3, #0]
9000580a:	78fa      	ldrb	r2, [r7, #3]
9000580c:	6878      	ldr	r0, [r7, #4]
9000580e:	4613      	mov	r3, r2
90005810:	011b      	lsls	r3, r3, #4
90005812:	1a9b      	subs	r3, r3, r2
90005814:	009b      	lsls	r3, r3, #2
90005816:	4403      	add	r3, r0
90005818:	3328      	adds	r3, #40	@ 0x28
9000581a:	881b      	ldrh	r3, [r3, #0]
9000581c:	440b      	add	r3, r1
9000581e:	1e59      	subs	r1, r3, #1
90005820:	78fa      	ldrb	r2, [r7, #3]
90005822:	6878      	ldr	r0, [r7, #4]
90005824:	4613      	mov	r3, r2
90005826:	011b      	lsls	r3, r3, #4
90005828:	1a9b      	subs	r3, r3, r2
9000582a:	009b      	lsls	r3, r3, #2
9000582c:	4403      	add	r3, r0
9000582e:	3328      	adds	r3, #40	@ 0x28
90005830:	881b      	ldrh	r3, [r3, #0]
90005832:	fbb1 f3f3 	udiv	r3, r1, r3
90005836:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
90005838:	68bb      	ldr	r3, [r7, #8]
9000583a:	f003 0301 	and.w	r3, r3, #1
9000583e:	2b00      	cmp	r3, #0
90005840:	f000 813f 	beq.w	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005844:	78fa      	ldrb	r2, [r7, #3]
90005846:	6879      	ldr	r1, [r7, #4]
90005848:	4613      	mov	r3, r2
9000584a:	011b      	lsls	r3, r3, #4
9000584c:	1a9b      	subs	r3, r3, r2
9000584e:	009b      	lsls	r3, r3, #2
90005850:	440b      	add	r3, r1
90005852:	333d      	adds	r3, #61	@ 0x3d
90005854:	781b      	ldrb	r3, [r3, #0]
90005856:	78fa      	ldrb	r2, [r7, #3]
90005858:	f083 0301 	eor.w	r3, r3, #1
9000585c:	b2d8      	uxtb	r0, r3
9000585e:	6879      	ldr	r1, [r7, #4]
90005860:	4613      	mov	r3, r2
90005862:	011b      	lsls	r3, r3, #4
90005864:	1a9b      	subs	r3, r3, r2
90005866:	009b      	lsls	r3, r3, #2
90005868:	440b      	add	r3, r1
9000586a:	333d      	adds	r3, #61	@ 0x3d
9000586c:	4602      	mov	r2, r0
9000586e:	701a      	strb	r2, [r3, #0]
90005870:	e127      	b.n	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005872:	78fa      	ldrb	r2, [r7, #3]
90005874:	6879      	ldr	r1, [r7, #4]
90005876:	4613      	mov	r3, r2
90005878:	011b      	lsls	r3, r3, #4
9000587a:	1a9b      	subs	r3, r3, r2
9000587c:	009b      	lsls	r3, r3, #2
9000587e:	440b      	add	r3, r1
90005880:	334d      	adds	r3, #77	@ 0x4d
90005882:	781b      	ldrb	r3, [r3, #0]
90005884:	2b03      	cmp	r3, #3
90005886:	d120      	bne.n	900058ca <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005888:	78fa      	ldrb	r2, [r7, #3]
9000588a:	6879      	ldr	r1, [r7, #4]
9000588c:	4613      	mov	r3, r2
9000588e:	011b      	lsls	r3, r3, #4
90005890:	1a9b      	subs	r3, r3, r2
90005892:	009b      	lsls	r3, r3, #2
90005894:	440b      	add	r3, r1
90005896:	334d      	adds	r3, #77	@ 0x4d
90005898:	2202      	movs	r2, #2
9000589a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000589c:	78fa      	ldrb	r2, [r7, #3]
9000589e:	6879      	ldr	r1, [r7, #4]
900058a0:	4613      	mov	r3, r2
900058a2:	011b      	lsls	r3, r3, #4
900058a4:	1a9b      	subs	r3, r3, r2
900058a6:	009b      	lsls	r3, r3, #2
900058a8:	440b      	add	r3, r1
900058aa:	331b      	adds	r3, #27
900058ac:	781b      	ldrb	r3, [r3, #0]
900058ae:	2b01      	cmp	r3, #1
900058b0:	f040 8107 	bne.w	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900058b4:	78fa      	ldrb	r2, [r7, #3]
900058b6:	6879      	ldr	r1, [r7, #4]
900058b8:	4613      	mov	r3, r2
900058ba:	011b      	lsls	r3, r3, #4
900058bc:	1a9b      	subs	r3, r3, r2
900058be:	009b      	lsls	r3, r3, #2
900058c0:	440b      	add	r3, r1
900058c2:	334c      	adds	r3, #76	@ 0x4c
900058c4:	2202      	movs	r2, #2
900058c6:	701a      	strb	r2, [r3, #0]
900058c8:	e0fb      	b.n	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
900058ca:	78fa      	ldrb	r2, [r7, #3]
900058cc:	6879      	ldr	r1, [r7, #4]
900058ce:	4613      	mov	r3, r2
900058d0:	011b      	lsls	r3, r3, #4
900058d2:	1a9b      	subs	r3, r3, r2
900058d4:	009b      	lsls	r3, r3, #2
900058d6:	440b      	add	r3, r1
900058d8:	334d      	adds	r3, #77	@ 0x4d
900058da:	781b      	ldrb	r3, [r3, #0]
900058dc:	2b04      	cmp	r3, #4
900058de:	d13a      	bne.n	90005956 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900058e0:	78fa      	ldrb	r2, [r7, #3]
900058e2:	6879      	ldr	r1, [r7, #4]
900058e4:	4613      	mov	r3, r2
900058e6:	011b      	lsls	r3, r3, #4
900058e8:	1a9b      	subs	r3, r3, r2
900058ea:	009b      	lsls	r3, r3, #2
900058ec:	440b      	add	r3, r1
900058ee:	334d      	adds	r3, #77	@ 0x4d
900058f0:	2202      	movs	r2, #2
900058f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900058f4:	78fa      	ldrb	r2, [r7, #3]
900058f6:	6879      	ldr	r1, [r7, #4]
900058f8:	4613      	mov	r3, r2
900058fa:	011b      	lsls	r3, r3, #4
900058fc:	1a9b      	subs	r3, r3, r2
900058fe:	009b      	lsls	r3, r3, #2
90005900:	440b      	add	r3, r1
90005902:	334c      	adds	r3, #76	@ 0x4c
90005904:	2202      	movs	r2, #2
90005906:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005908:	78fa      	ldrb	r2, [r7, #3]
9000590a:	6879      	ldr	r1, [r7, #4]
9000590c:	4613      	mov	r3, r2
9000590e:	011b      	lsls	r3, r3, #4
90005910:	1a9b      	subs	r3, r3, r2
90005912:	009b      	lsls	r3, r3, #2
90005914:	440b      	add	r3, r1
90005916:	331b      	adds	r3, #27
90005918:	781b      	ldrb	r3, [r3, #0]
9000591a:	2b01      	cmp	r3, #1
9000591c:	f040 80d1 	bne.w	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
90005920:	78fa      	ldrb	r2, [r7, #3]
90005922:	6879      	ldr	r1, [r7, #4]
90005924:	4613      	mov	r3, r2
90005926:	011b      	lsls	r3, r3, #4
90005928:	1a9b      	subs	r3, r3, r2
9000592a:	009b      	lsls	r3, r3, #2
9000592c:	440b      	add	r3, r1
9000592e:	331b      	adds	r3, #27
90005930:	2200      	movs	r2, #0
90005932:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005934:	78fb      	ldrb	r3, [r7, #3]
90005936:	015a      	lsls	r2, r3, #5
90005938:	693b      	ldr	r3, [r7, #16]
9000593a:	4413      	add	r3, r2
9000593c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005940:	685b      	ldr	r3, [r3, #4]
90005942:	78fa      	ldrb	r2, [r7, #3]
90005944:	0151      	lsls	r1, r2, #5
90005946:	693a      	ldr	r2, [r7, #16]
90005948:	440a      	add	r2, r1
9000594a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000594e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005952:	6053      	str	r3, [r2, #4]
90005954:	e0b5      	b.n	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90005956:	78fa      	ldrb	r2, [r7, #3]
90005958:	6879      	ldr	r1, [r7, #4]
9000595a:	4613      	mov	r3, r2
9000595c:	011b      	lsls	r3, r3, #4
9000595e:	1a9b      	subs	r3, r3, r2
90005960:	009b      	lsls	r3, r3, #2
90005962:	440b      	add	r3, r1
90005964:	334d      	adds	r3, #77	@ 0x4d
90005966:	781b      	ldrb	r3, [r3, #0]
90005968:	2b05      	cmp	r3, #5
9000596a:	d114      	bne.n	90005996 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000596c:	78fa      	ldrb	r2, [r7, #3]
9000596e:	6879      	ldr	r1, [r7, #4]
90005970:	4613      	mov	r3, r2
90005972:	011b      	lsls	r3, r3, #4
90005974:	1a9b      	subs	r3, r3, r2
90005976:	009b      	lsls	r3, r3, #2
90005978:	440b      	add	r3, r1
9000597a:	334d      	adds	r3, #77	@ 0x4d
9000597c:	2202      	movs	r2, #2
9000597e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005980:	78fa      	ldrb	r2, [r7, #3]
90005982:	6879      	ldr	r1, [r7, #4]
90005984:	4613      	mov	r3, r2
90005986:	011b      	lsls	r3, r3, #4
90005988:	1a9b      	subs	r3, r3, r2
9000598a:	009b      	lsls	r3, r3, #2
9000598c:	440b      	add	r3, r1
9000598e:	334c      	adds	r3, #76	@ 0x4c
90005990:	2202      	movs	r2, #2
90005992:	701a      	strb	r2, [r3, #0]
90005994:	e095      	b.n	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005996:	78fa      	ldrb	r2, [r7, #3]
90005998:	6879      	ldr	r1, [r7, #4]
9000599a:	4613      	mov	r3, r2
9000599c:	011b      	lsls	r3, r3, #4
9000599e:	1a9b      	subs	r3, r3, r2
900059a0:	009b      	lsls	r3, r3, #2
900059a2:	440b      	add	r3, r1
900059a4:	334d      	adds	r3, #77	@ 0x4d
900059a6:	781b      	ldrb	r3, [r3, #0]
900059a8:	2b06      	cmp	r3, #6
900059aa:	d114      	bne.n	900059d6 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900059ac:	78fa      	ldrb	r2, [r7, #3]
900059ae:	6879      	ldr	r1, [r7, #4]
900059b0:	4613      	mov	r3, r2
900059b2:	011b      	lsls	r3, r3, #4
900059b4:	1a9b      	subs	r3, r3, r2
900059b6:	009b      	lsls	r3, r3, #2
900059b8:	440b      	add	r3, r1
900059ba:	334d      	adds	r3, #77	@ 0x4d
900059bc:	2202      	movs	r2, #2
900059be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
900059c0:	78fa      	ldrb	r2, [r7, #3]
900059c2:	6879      	ldr	r1, [r7, #4]
900059c4:	4613      	mov	r3, r2
900059c6:	011b      	lsls	r3, r3, #4
900059c8:	1a9b      	subs	r3, r3, r2
900059ca:	009b      	lsls	r3, r3, #2
900059cc:	440b      	add	r3, r1
900059ce:	334c      	adds	r3, #76	@ 0x4c
900059d0:	2205      	movs	r2, #5
900059d2:	701a      	strb	r2, [r3, #0]
900059d4:	e075      	b.n	90005ac2 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900059d6:	78fa      	ldrb	r2, [r7, #3]
900059d8:	6879      	ldr	r1, [r7, #4]
900059da:	4613      	mov	r3, r2
900059dc:	011b      	lsls	r3, r3, #4
900059de:	1a9b      	subs	r3, r3, r2
900059e0:	009b      	lsls	r3, r3, #2
900059e2:	440b      	add	r3, r1
900059e4:	334d      	adds	r3, #77	@ 0x4d
900059e6:	781b      	ldrb	r3, [r3, #0]
900059e8:	2b07      	cmp	r3, #7
900059ea:	d00a      	beq.n	90005a02 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900059ec:	78fa      	ldrb	r2, [r7, #3]
900059ee:	6879      	ldr	r1, [r7, #4]
900059f0:	4613      	mov	r3, r2
900059f2:	011b      	lsls	r3, r3, #4
900059f4:	1a9b      	subs	r3, r3, r2
900059f6:	009b      	lsls	r3, r3, #2
900059f8:	440b      	add	r3, r1
900059fa:	334d      	adds	r3, #77	@ 0x4d
900059fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900059fe:	2b09      	cmp	r3, #9
90005a00:	d170      	bne.n	90005ae4 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005a02:	78fa      	ldrb	r2, [r7, #3]
90005a04:	6879      	ldr	r1, [r7, #4]
90005a06:	4613      	mov	r3, r2
90005a08:	011b      	lsls	r3, r3, #4
90005a0a:	1a9b      	subs	r3, r3, r2
90005a0c:	009b      	lsls	r3, r3, #2
90005a0e:	440b      	add	r3, r1
90005a10:	334d      	adds	r3, #77	@ 0x4d
90005a12:	2202      	movs	r2, #2
90005a14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90005a16:	78fa      	ldrb	r2, [r7, #3]
90005a18:	6879      	ldr	r1, [r7, #4]
90005a1a:	4613      	mov	r3, r2
90005a1c:	011b      	lsls	r3, r3, #4
90005a1e:	1a9b      	subs	r3, r3, r2
90005a20:	009b      	lsls	r3, r3, #2
90005a22:	440b      	add	r3, r1
90005a24:	3344      	adds	r3, #68	@ 0x44
90005a26:	681b      	ldr	r3, [r3, #0]
90005a28:	1c59      	adds	r1, r3, #1
90005a2a:	6878      	ldr	r0, [r7, #4]
90005a2c:	4613      	mov	r3, r2
90005a2e:	011b      	lsls	r3, r3, #4
90005a30:	1a9b      	subs	r3, r3, r2
90005a32:	009b      	lsls	r3, r3, #2
90005a34:	4403      	add	r3, r0
90005a36:	3344      	adds	r3, #68	@ 0x44
90005a38:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005a3a:	78fa      	ldrb	r2, [r7, #3]
90005a3c:	6879      	ldr	r1, [r7, #4]
90005a3e:	4613      	mov	r3, r2
90005a40:	011b      	lsls	r3, r3, #4
90005a42:	1a9b      	subs	r3, r3, r2
90005a44:	009b      	lsls	r3, r3, #2
90005a46:	440b      	add	r3, r1
90005a48:	3344      	adds	r3, #68	@ 0x44
90005a4a:	681b      	ldr	r3, [r3, #0]
90005a4c:	2b02      	cmp	r3, #2
90005a4e:	d914      	bls.n	90005a7a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005a50:	78fa      	ldrb	r2, [r7, #3]
90005a52:	6879      	ldr	r1, [r7, #4]
90005a54:	4613      	mov	r3, r2
90005a56:	011b      	lsls	r3, r3, #4
90005a58:	1a9b      	subs	r3, r3, r2
90005a5a:	009b      	lsls	r3, r3, #2
90005a5c:	440b      	add	r3, r1
90005a5e:	3344      	adds	r3, #68	@ 0x44
90005a60:	2200      	movs	r2, #0
90005a62:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005a64:	78fa      	ldrb	r2, [r7, #3]
90005a66:	6879      	ldr	r1, [r7, #4]
90005a68:	4613      	mov	r3, r2
90005a6a:	011b      	lsls	r3, r3, #4
90005a6c:	1a9b      	subs	r3, r3, r2
90005a6e:	009b      	lsls	r3, r3, #2
90005a70:	440b      	add	r3, r1
90005a72:	334c      	adds	r3, #76	@ 0x4c
90005a74:	2204      	movs	r2, #4
90005a76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005a78:	e022      	b.n	90005ac0 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005a7a:	78fa      	ldrb	r2, [r7, #3]
90005a7c:	6879      	ldr	r1, [r7, #4]
90005a7e:	4613      	mov	r3, r2
90005a80:	011b      	lsls	r3, r3, #4
90005a82:	1a9b      	subs	r3, r3, r2
90005a84:	009b      	lsls	r3, r3, #2
90005a86:	440b      	add	r3, r1
90005a88:	334c      	adds	r3, #76	@ 0x4c
90005a8a:	2202      	movs	r2, #2
90005a8c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005a8e:	78fb      	ldrb	r3, [r7, #3]
90005a90:	015a      	lsls	r2, r3, #5
90005a92:	693b      	ldr	r3, [r7, #16]
90005a94:	4413      	add	r3, r2
90005a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a9a:	681b      	ldr	r3, [r3, #0]
90005a9c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005a9e:	68fb      	ldr	r3, [r7, #12]
90005aa0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005aa4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005aa6:	68fb      	ldr	r3, [r7, #12]
90005aa8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005aac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005aae:	78fb      	ldrb	r3, [r7, #3]
90005ab0:	015a      	lsls	r2, r3, #5
90005ab2:	693b      	ldr	r3, [r7, #16]
90005ab4:	4413      	add	r3, r2
90005ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005aba:	461a      	mov	r2, r3
90005abc:	68fb      	ldr	r3, [r7, #12]
90005abe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005ac0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005ac2:	78fa      	ldrb	r2, [r7, #3]
90005ac4:	6879      	ldr	r1, [r7, #4]
90005ac6:	4613      	mov	r3, r2
90005ac8:	011b      	lsls	r3, r3, #4
90005aca:	1a9b      	subs	r3, r3, r2
90005acc:	009b      	lsls	r3, r3, #2
90005ace:	440b      	add	r3, r1
90005ad0:	334c      	adds	r3, #76	@ 0x4c
90005ad2:	781a      	ldrb	r2, [r3, #0]
90005ad4:	78fb      	ldrb	r3, [r7, #3]
90005ad6:	4619      	mov	r1, r3
90005ad8:	6878      	ldr	r0, [r7, #4]
90005ada:	f7fb fc6b 	bl	900013b4 <HAL_HCD_HC_NotifyURBChange_Callback>
90005ade:	e002      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90005ae0:	bf00      	nop
90005ae2:	e000      	b.n	90005ae6 <HCD_HC_OUT_IRQHandler+0x978>
      return;
90005ae4:	bf00      	nop
  }
}
90005ae6:	3718      	adds	r7, #24
90005ae8:	46bd      	mov	sp, r7
90005aea:	bd80      	pop	{r7, pc}

90005aec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005aec:	b580      	push	{r7, lr}
90005aee:	b08a      	sub	sp, #40	@ 0x28
90005af0:	af00      	add	r7, sp, #0
90005af2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005af4:	687b      	ldr	r3, [r7, #4]
90005af6:	681b      	ldr	r3, [r3, #0]
90005af8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
90005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90005afc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005afe:	687b      	ldr	r3, [r7, #4]
90005b00:	681b      	ldr	r3, [r3, #0]
90005b02:	6a1b      	ldr	r3, [r3, #32]
90005b04:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
90005b06:	69fb      	ldr	r3, [r7, #28]
90005b08:	f003 030f 	and.w	r3, r3, #15
90005b0c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90005b0e:	69fb      	ldr	r3, [r7, #28]
90005b10:	0c5b      	lsrs	r3, r3, #17
90005b12:	f003 030f 	and.w	r3, r3, #15
90005b16:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
90005b18:	69fb      	ldr	r3, [r7, #28]
90005b1a:	091b      	lsrs	r3, r3, #4
90005b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
90005b20:	613b      	str	r3, [r7, #16]

  switch (pktsts)
90005b22:	697b      	ldr	r3, [r7, #20]
90005b24:	2b02      	cmp	r3, #2
90005b26:	d004      	beq.n	90005b32 <HCD_RXQLVL_IRQHandler+0x46>
90005b28:	697b      	ldr	r3, [r7, #20]
90005b2a:	2b05      	cmp	r3, #5
90005b2c:	f000 80b6 	beq.w	90005c9c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
90005b30:	e0b7      	b.n	90005ca2 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
90005b32:	693b      	ldr	r3, [r7, #16]
90005b34:	2b00      	cmp	r3, #0
90005b36:	f000 80b3 	beq.w	90005ca0 <HCD_RXQLVL_IRQHandler+0x1b4>
90005b3a:	6879      	ldr	r1, [r7, #4]
90005b3c:	69ba      	ldr	r2, [r7, #24]
90005b3e:	4613      	mov	r3, r2
90005b40:	011b      	lsls	r3, r3, #4
90005b42:	1a9b      	subs	r3, r3, r2
90005b44:	009b      	lsls	r3, r3, #2
90005b46:	440b      	add	r3, r1
90005b48:	332c      	adds	r3, #44	@ 0x2c
90005b4a:	681b      	ldr	r3, [r3, #0]
90005b4c:	2b00      	cmp	r3, #0
90005b4e:	f000 80a7 	beq.w	90005ca0 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
90005b52:	6879      	ldr	r1, [r7, #4]
90005b54:	69ba      	ldr	r2, [r7, #24]
90005b56:	4613      	mov	r3, r2
90005b58:	011b      	lsls	r3, r3, #4
90005b5a:	1a9b      	subs	r3, r3, r2
90005b5c:	009b      	lsls	r3, r3, #2
90005b5e:	440b      	add	r3, r1
90005b60:	3338      	adds	r3, #56	@ 0x38
90005b62:	681a      	ldr	r2, [r3, #0]
90005b64:	693b      	ldr	r3, [r7, #16]
90005b66:	18d1      	adds	r1, r2, r3
90005b68:	6878      	ldr	r0, [r7, #4]
90005b6a:	69ba      	ldr	r2, [r7, #24]
90005b6c:	4613      	mov	r3, r2
90005b6e:	011b      	lsls	r3, r3, #4
90005b70:	1a9b      	subs	r3, r3, r2
90005b72:	009b      	lsls	r3, r3, #2
90005b74:	4403      	add	r3, r0
90005b76:	3334      	adds	r3, #52	@ 0x34
90005b78:	681b      	ldr	r3, [r3, #0]
90005b7a:	4299      	cmp	r1, r3
90005b7c:	f200 8083 	bhi.w	90005c86 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90005b80:	687b      	ldr	r3, [r7, #4]
90005b82:	6818      	ldr	r0, [r3, #0]
90005b84:	6879      	ldr	r1, [r7, #4]
90005b86:	69ba      	ldr	r2, [r7, #24]
90005b88:	4613      	mov	r3, r2
90005b8a:	011b      	lsls	r3, r3, #4
90005b8c:	1a9b      	subs	r3, r3, r2
90005b8e:	009b      	lsls	r3, r3, #2
90005b90:	440b      	add	r3, r1
90005b92:	332c      	adds	r3, #44	@ 0x2c
90005b94:	681b      	ldr	r3, [r3, #0]
90005b96:	693a      	ldr	r2, [r7, #16]
90005b98:	b292      	uxth	r2, r2
90005b9a:	4619      	mov	r1, r3
90005b9c:	f006 fa2c 	bl	9000bff8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90005ba0:	6879      	ldr	r1, [r7, #4]
90005ba2:	69ba      	ldr	r2, [r7, #24]
90005ba4:	4613      	mov	r3, r2
90005ba6:	011b      	lsls	r3, r3, #4
90005ba8:	1a9b      	subs	r3, r3, r2
90005baa:	009b      	lsls	r3, r3, #2
90005bac:	440b      	add	r3, r1
90005bae:	332c      	adds	r3, #44	@ 0x2c
90005bb0:	681a      	ldr	r2, [r3, #0]
90005bb2:	693b      	ldr	r3, [r7, #16]
90005bb4:	18d1      	adds	r1, r2, r3
90005bb6:	6878      	ldr	r0, [r7, #4]
90005bb8:	69ba      	ldr	r2, [r7, #24]
90005bba:	4613      	mov	r3, r2
90005bbc:	011b      	lsls	r3, r3, #4
90005bbe:	1a9b      	subs	r3, r3, r2
90005bc0:	009b      	lsls	r3, r3, #2
90005bc2:	4403      	add	r3, r0
90005bc4:	332c      	adds	r3, #44	@ 0x2c
90005bc6:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005bc8:	6879      	ldr	r1, [r7, #4]
90005bca:	69ba      	ldr	r2, [r7, #24]
90005bcc:	4613      	mov	r3, r2
90005bce:	011b      	lsls	r3, r3, #4
90005bd0:	1a9b      	subs	r3, r3, r2
90005bd2:	009b      	lsls	r3, r3, #2
90005bd4:	440b      	add	r3, r1
90005bd6:	3338      	adds	r3, #56	@ 0x38
90005bd8:	681a      	ldr	r2, [r3, #0]
90005bda:	693b      	ldr	r3, [r7, #16]
90005bdc:	18d1      	adds	r1, r2, r3
90005bde:	6878      	ldr	r0, [r7, #4]
90005be0:	69ba      	ldr	r2, [r7, #24]
90005be2:	4613      	mov	r3, r2
90005be4:	011b      	lsls	r3, r3, #4
90005be6:	1a9b      	subs	r3, r3, r2
90005be8:	009b      	lsls	r3, r3, #2
90005bea:	4403      	add	r3, r0
90005bec:	3338      	adds	r3, #56	@ 0x38
90005bee:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005bf0:	69bb      	ldr	r3, [r7, #24]
90005bf2:	015a      	lsls	r2, r3, #5
90005bf4:	6a3b      	ldr	r3, [r7, #32]
90005bf6:	4413      	add	r3, r2
90005bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005bfc:	691b      	ldr	r3, [r3, #16]
90005bfe:	0cdb      	lsrs	r3, r3, #19
90005c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005c04:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
90005c06:	6879      	ldr	r1, [r7, #4]
90005c08:	69ba      	ldr	r2, [r7, #24]
90005c0a:	4613      	mov	r3, r2
90005c0c:	011b      	lsls	r3, r3, #4
90005c0e:	1a9b      	subs	r3, r3, r2
90005c10:	009b      	lsls	r3, r3, #2
90005c12:	440b      	add	r3, r1
90005c14:	3328      	adds	r3, #40	@ 0x28
90005c16:	881b      	ldrh	r3, [r3, #0]
90005c18:	461a      	mov	r2, r3
90005c1a:	693b      	ldr	r3, [r7, #16]
90005c1c:	4293      	cmp	r3, r2
90005c1e:	d13f      	bne.n	90005ca0 <HCD_RXQLVL_IRQHandler+0x1b4>
90005c20:	68fb      	ldr	r3, [r7, #12]
90005c22:	2b00      	cmp	r3, #0
90005c24:	d03c      	beq.n	90005ca0 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
90005c26:	69bb      	ldr	r3, [r7, #24]
90005c28:	015a      	lsls	r2, r3, #5
90005c2a:	6a3b      	ldr	r3, [r7, #32]
90005c2c:	4413      	add	r3, r2
90005c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005c32:	681b      	ldr	r3, [r3, #0]
90005c34:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005c36:	68bb      	ldr	r3, [r7, #8]
90005c38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005c3c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90005c3e:	68bb      	ldr	r3, [r7, #8]
90005c40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005c44:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
90005c46:	69bb      	ldr	r3, [r7, #24]
90005c48:	015a      	lsls	r2, r3, #5
90005c4a:	6a3b      	ldr	r3, [r7, #32]
90005c4c:	4413      	add	r3, r2
90005c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005c52:	461a      	mov	r2, r3
90005c54:	68bb      	ldr	r3, [r7, #8]
90005c56:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90005c58:	6879      	ldr	r1, [r7, #4]
90005c5a:	69ba      	ldr	r2, [r7, #24]
90005c5c:	4613      	mov	r3, r2
90005c5e:	011b      	lsls	r3, r3, #4
90005c60:	1a9b      	subs	r3, r3, r2
90005c62:	009b      	lsls	r3, r3, #2
90005c64:	440b      	add	r3, r1
90005c66:	333c      	adds	r3, #60	@ 0x3c
90005c68:	781b      	ldrb	r3, [r3, #0]
90005c6a:	f083 0301 	eor.w	r3, r3, #1
90005c6e:	b2d8      	uxtb	r0, r3
90005c70:	6879      	ldr	r1, [r7, #4]
90005c72:	69ba      	ldr	r2, [r7, #24]
90005c74:	4613      	mov	r3, r2
90005c76:	011b      	lsls	r3, r3, #4
90005c78:	1a9b      	subs	r3, r3, r2
90005c7a:	009b      	lsls	r3, r3, #2
90005c7c:	440b      	add	r3, r1
90005c7e:	333c      	adds	r3, #60	@ 0x3c
90005c80:	4602      	mov	r2, r0
90005c82:	701a      	strb	r2, [r3, #0]
      break;
90005c84:	e00c      	b.n	90005ca0 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90005c86:	6879      	ldr	r1, [r7, #4]
90005c88:	69ba      	ldr	r2, [r7, #24]
90005c8a:	4613      	mov	r3, r2
90005c8c:	011b      	lsls	r3, r3, #4
90005c8e:	1a9b      	subs	r3, r3, r2
90005c90:	009b      	lsls	r3, r3, #2
90005c92:	440b      	add	r3, r1
90005c94:	334c      	adds	r3, #76	@ 0x4c
90005c96:	2204      	movs	r2, #4
90005c98:	701a      	strb	r2, [r3, #0]
      break;
90005c9a:	e001      	b.n	90005ca0 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90005c9c:	bf00      	nop
90005c9e:	e000      	b.n	90005ca2 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90005ca0:	bf00      	nop
  }
}
90005ca2:	bf00      	nop
90005ca4:	3728      	adds	r7, #40	@ 0x28
90005ca6:	46bd      	mov	sp, r7
90005ca8:	bd80      	pop	{r7, pc}

90005caa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005caa:	b580      	push	{r7, lr}
90005cac:	b086      	sub	sp, #24
90005cae:	af00      	add	r7, sp, #0
90005cb0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005cb2:	687b      	ldr	r3, [r7, #4]
90005cb4:	681b      	ldr	r3, [r3, #0]
90005cb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005cb8:	697b      	ldr	r3, [r7, #20]
90005cba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005cbc:	693b      	ldr	r3, [r7, #16]
90005cbe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005cc2:	681b      	ldr	r3, [r3, #0]
90005cc4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005cc6:	693b      	ldr	r3, [r7, #16]
90005cc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005ccc:	681b      	ldr	r3, [r3, #0]
90005cce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90005cd0:	68bb      	ldr	r3, [r7, #8]
90005cd2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90005cd6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005cd8:	68fb      	ldr	r3, [r7, #12]
90005cda:	f003 0302 	and.w	r3, r3, #2
90005cde:	2b02      	cmp	r3, #2
90005ce0:	d10b      	bne.n	90005cfa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005ce2:	68fb      	ldr	r3, [r7, #12]
90005ce4:	f003 0301 	and.w	r3, r3, #1
90005ce8:	2b01      	cmp	r3, #1
90005cea:	d102      	bne.n	90005cf2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005cec:	6878      	ldr	r0, [r7, #4]
90005cee:	f7fb fb29 	bl	90001344 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90005cf2:	68bb      	ldr	r3, [r7, #8]
90005cf4:	f043 0302 	orr.w	r3, r3, #2
90005cf8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005cfa:	68fb      	ldr	r3, [r7, #12]
90005cfc:	f003 0308 	and.w	r3, r3, #8
90005d00:	2b08      	cmp	r3, #8
90005d02:	d132      	bne.n	90005d6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005d04:	68bb      	ldr	r3, [r7, #8]
90005d06:	f043 0308 	orr.w	r3, r3, #8
90005d0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005d0c:	68fb      	ldr	r3, [r7, #12]
90005d0e:	f003 0304 	and.w	r3, r3, #4
90005d12:	2b04      	cmp	r3, #4
90005d14:	d126      	bne.n	90005d64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005d16:	687b      	ldr	r3, [r7, #4]
90005d18:	7a5b      	ldrb	r3, [r3, #9]
90005d1a:	2b02      	cmp	r3, #2
90005d1c:	d113      	bne.n	90005d46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005d1e:	68fb      	ldr	r3, [r7, #12]
90005d20:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90005d24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90005d28:	d106      	bne.n	90005d38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005d2a:	687b      	ldr	r3, [r7, #4]
90005d2c:	681b      	ldr	r3, [r3, #0]
90005d2e:	2102      	movs	r1, #2
90005d30:	4618      	mov	r0, r3
90005d32:	f006 f9fb 	bl	9000c12c <USB_InitFSLSPClkSel>
90005d36:	e011      	b.n	90005d5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90005d38:	687b      	ldr	r3, [r7, #4]
90005d3a:	681b      	ldr	r3, [r3, #0]
90005d3c:	2101      	movs	r1, #1
90005d3e:	4618      	mov	r0, r3
90005d40:	f006 f9f4 	bl	9000c12c <USB_InitFSLSPClkSel>
90005d44:	e00a      	b.n	90005d5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
90005d46:	687b      	ldr	r3, [r7, #4]
90005d48:	79db      	ldrb	r3, [r3, #7]
90005d4a:	2b01      	cmp	r3, #1
90005d4c:	d106      	bne.n	90005d5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90005d4e:	693b      	ldr	r3, [r7, #16]
90005d50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005d54:	461a      	mov	r2, r3
90005d56:	f64e 2360 	movw	r3, #60000	@ 0xea60
90005d5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005d5c:	6878      	ldr	r0, [r7, #4]
90005d5e:	f7fb fb0d 	bl	9000137c <HAL_HCD_PortEnabled_Callback>
90005d62:	e002      	b.n	90005d6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005d64:	6878      	ldr	r0, [r7, #4]
90005d66:	f7fb fb17 	bl	90001398 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90005d6a:	68fb      	ldr	r3, [r7, #12]
90005d6c:	f003 0320 	and.w	r3, r3, #32
90005d70:	2b20      	cmp	r3, #32
90005d72:	d103      	bne.n	90005d7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005d74:	68bb      	ldr	r3, [r7, #8]
90005d76:	f043 0320 	orr.w	r3, r3, #32
90005d7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005d7c:	693b      	ldr	r3, [r7, #16]
90005d7e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005d82:	461a      	mov	r2, r3
90005d84:	68bb      	ldr	r3, [r7, #8]
90005d86:	6013      	str	r3, [r2, #0]
}
90005d88:	bf00      	nop
90005d8a:	3718      	adds	r7, #24
90005d8c:	46bd      	mov	sp, r7
90005d8e:	bd80      	pop	{r7, pc}

90005d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005d90:	b580      	push	{r7, lr}
90005d92:	b082      	sub	sp, #8
90005d94:	af00      	add	r7, sp, #0
90005d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005d98:	687b      	ldr	r3, [r7, #4]
90005d9a:	2b00      	cmp	r3, #0
90005d9c:	d101      	bne.n	90005da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005d9e:	2301      	movs	r3, #1
90005da0:	e08b      	b.n	90005eba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005da2:	687b      	ldr	r3, [r7, #4]
90005da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005da8:	b2db      	uxtb	r3, r3
90005daa:	2b00      	cmp	r3, #0
90005dac:	d106      	bne.n	90005dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005dae:	687b      	ldr	r3, [r7, #4]
90005db0:	2200      	movs	r2, #0
90005db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005db6:	6878      	ldr	r0, [r7, #4]
90005db8:	f000 f886 	bl	90005ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005dbc:	687b      	ldr	r3, [r7, #4]
90005dbe:	2224      	movs	r2, #36	@ 0x24
90005dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005dc4:	687b      	ldr	r3, [r7, #4]
90005dc6:	681b      	ldr	r3, [r3, #0]
90005dc8:	681a      	ldr	r2, [r3, #0]
90005dca:	687b      	ldr	r3, [r7, #4]
90005dcc:	681b      	ldr	r3, [r3, #0]
90005dce:	f022 0201 	bic.w	r2, r2, #1
90005dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005dd4:	687b      	ldr	r3, [r7, #4]
90005dd6:	685a      	ldr	r2, [r3, #4]
90005dd8:	687b      	ldr	r3, [r7, #4]
90005dda:	681b      	ldr	r3, [r3, #0]
90005ddc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005de0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005de2:	687b      	ldr	r3, [r7, #4]
90005de4:	681b      	ldr	r3, [r3, #0]
90005de6:	689a      	ldr	r2, [r3, #8]
90005de8:	687b      	ldr	r3, [r7, #4]
90005dea:	681b      	ldr	r3, [r3, #0]
90005dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005df0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005df2:	687b      	ldr	r3, [r7, #4]
90005df4:	68db      	ldr	r3, [r3, #12]
90005df6:	2b01      	cmp	r3, #1
90005df8:	d107      	bne.n	90005e0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005dfa:	687b      	ldr	r3, [r7, #4]
90005dfc:	689a      	ldr	r2, [r3, #8]
90005dfe:	687b      	ldr	r3, [r7, #4]
90005e00:	681b      	ldr	r3, [r3, #0]
90005e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005e06:	609a      	str	r2, [r3, #8]
90005e08:	e006      	b.n	90005e18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005e0a:	687b      	ldr	r3, [r7, #4]
90005e0c:	689a      	ldr	r2, [r3, #8]
90005e0e:	687b      	ldr	r3, [r7, #4]
90005e10:	681b      	ldr	r3, [r3, #0]
90005e12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005e16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005e18:	687b      	ldr	r3, [r7, #4]
90005e1a:	68db      	ldr	r3, [r3, #12]
90005e1c:	2b02      	cmp	r3, #2
90005e1e:	d108      	bne.n	90005e32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005e20:	687b      	ldr	r3, [r7, #4]
90005e22:	681b      	ldr	r3, [r3, #0]
90005e24:	685a      	ldr	r2, [r3, #4]
90005e26:	687b      	ldr	r3, [r7, #4]
90005e28:	681b      	ldr	r3, [r3, #0]
90005e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005e2e:	605a      	str	r2, [r3, #4]
90005e30:	e007      	b.n	90005e42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005e32:	687b      	ldr	r3, [r7, #4]
90005e34:	681b      	ldr	r3, [r3, #0]
90005e36:	685a      	ldr	r2, [r3, #4]
90005e38:	687b      	ldr	r3, [r7, #4]
90005e3a:	681b      	ldr	r3, [r3, #0]
90005e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005e42:	687b      	ldr	r3, [r7, #4]
90005e44:	681b      	ldr	r3, [r3, #0]
90005e46:	6859      	ldr	r1, [r3, #4]
90005e48:	687b      	ldr	r3, [r7, #4]
90005e4a:	681a      	ldr	r2, [r3, #0]
90005e4c:	4b1d      	ldr	r3, [pc, #116]	@ (90005ec4 <HAL_I2C_Init+0x134>)
90005e4e:	430b      	orrs	r3, r1
90005e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005e52:	687b      	ldr	r3, [r7, #4]
90005e54:	681b      	ldr	r3, [r3, #0]
90005e56:	68da      	ldr	r2, [r3, #12]
90005e58:	687b      	ldr	r3, [r7, #4]
90005e5a:	681b      	ldr	r3, [r3, #0]
90005e5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005e62:	687b      	ldr	r3, [r7, #4]
90005e64:	691a      	ldr	r2, [r3, #16]
90005e66:	687b      	ldr	r3, [r7, #4]
90005e68:	695b      	ldr	r3, [r3, #20]
90005e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005e6e:	687b      	ldr	r3, [r7, #4]
90005e70:	699b      	ldr	r3, [r3, #24]
90005e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005e74:	687b      	ldr	r3, [r7, #4]
90005e76:	681b      	ldr	r3, [r3, #0]
90005e78:	430a      	orrs	r2, r1
90005e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005e7c:	687b      	ldr	r3, [r7, #4]
90005e7e:	69d9      	ldr	r1, [r3, #28]
90005e80:	687b      	ldr	r3, [r7, #4]
90005e82:	6a1a      	ldr	r2, [r3, #32]
90005e84:	687b      	ldr	r3, [r7, #4]
90005e86:	681b      	ldr	r3, [r3, #0]
90005e88:	430a      	orrs	r2, r1
90005e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005e8c:	687b      	ldr	r3, [r7, #4]
90005e8e:	681b      	ldr	r3, [r3, #0]
90005e90:	681a      	ldr	r2, [r3, #0]
90005e92:	687b      	ldr	r3, [r7, #4]
90005e94:	681b      	ldr	r3, [r3, #0]
90005e96:	f042 0201 	orr.w	r2, r2, #1
90005e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005e9c:	687b      	ldr	r3, [r7, #4]
90005e9e:	2200      	movs	r2, #0
90005ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005ea2:	687b      	ldr	r3, [r7, #4]
90005ea4:	2220      	movs	r2, #32
90005ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005eaa:	687b      	ldr	r3, [r7, #4]
90005eac:	2200      	movs	r2, #0
90005eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005eb0:	687b      	ldr	r3, [r7, #4]
90005eb2:	2200      	movs	r2, #0
90005eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005eb8:	2300      	movs	r3, #0
}
90005eba:	4618      	mov	r0, r3
90005ebc:	3708      	adds	r7, #8
90005ebe:	46bd      	mov	sp, r7
90005ec0:	bd80      	pop	{r7, pc}
90005ec2:	bf00      	nop
90005ec4:	02008000 	.word	0x02008000

90005ec8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005ec8:	b480      	push	{r7}
90005eca:	b083      	sub	sp, #12
90005ecc:	af00      	add	r7, sp, #0
90005ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005ed0:	bf00      	nop
90005ed2:	370c      	adds	r7, #12
90005ed4:	46bd      	mov	sp, r7
90005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
90005eda:	4770      	bx	lr

90005edc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005edc:	b580      	push	{r7, lr}
90005ede:	b088      	sub	sp, #32
90005ee0:	af02      	add	r7, sp, #8
90005ee2:	60f8      	str	r0, [r7, #12]
90005ee4:	4608      	mov	r0, r1
90005ee6:	4611      	mov	r1, r2
90005ee8:	461a      	mov	r2, r3
90005eea:	4603      	mov	r3, r0
90005eec:	817b      	strh	r3, [r7, #10]
90005eee:	460b      	mov	r3, r1
90005ef0:	813b      	strh	r3, [r7, #8]
90005ef2:	4613      	mov	r3, r2
90005ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005ef6:	68fb      	ldr	r3, [r7, #12]
90005ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005efc:	b2db      	uxtb	r3, r3
90005efe:	2b20      	cmp	r3, #32
90005f00:	f040 80fd 	bne.w	900060fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005f04:	6a3b      	ldr	r3, [r7, #32]
90005f06:	2b00      	cmp	r3, #0
90005f08:	d002      	beq.n	90005f10 <HAL_I2C_Mem_Read+0x34>
90005f0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005f0c:	2b00      	cmp	r3, #0
90005f0e:	d105      	bne.n	90005f1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005f10:	68fb      	ldr	r3, [r7, #12]
90005f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005f16:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005f18:	2301      	movs	r3, #1
90005f1a:	e0f1      	b.n	90006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005f1c:	68fb      	ldr	r3, [r7, #12]
90005f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005f22:	2b01      	cmp	r3, #1
90005f24:	d101      	bne.n	90005f2a <HAL_I2C_Mem_Read+0x4e>
90005f26:	2302      	movs	r3, #2
90005f28:	e0ea      	b.n	90006100 <HAL_I2C_Mem_Read+0x224>
90005f2a:	68fb      	ldr	r3, [r7, #12]
90005f2c:	2201      	movs	r2, #1
90005f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005f32:	f7fd fafb 	bl	9000352c <HAL_GetTick>
90005f36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005f38:	697b      	ldr	r3, [r7, #20]
90005f3a:	9300      	str	r3, [sp, #0]
90005f3c:	2319      	movs	r3, #25
90005f3e:	2201      	movs	r2, #1
90005f40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005f44:	68f8      	ldr	r0, [r7, #12]
90005f46:	f000 f975 	bl	90006234 <I2C_WaitOnFlagUntilTimeout>
90005f4a:	4603      	mov	r3, r0
90005f4c:	2b00      	cmp	r3, #0
90005f4e:	d001      	beq.n	90005f54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005f50:	2301      	movs	r3, #1
90005f52:	e0d5      	b.n	90006100 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005f54:	68fb      	ldr	r3, [r7, #12]
90005f56:	2222      	movs	r2, #34	@ 0x22
90005f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005f5c:	68fb      	ldr	r3, [r7, #12]
90005f5e:	2240      	movs	r2, #64	@ 0x40
90005f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005f64:	68fb      	ldr	r3, [r7, #12]
90005f66:	2200      	movs	r2, #0
90005f68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005f6a:	68fb      	ldr	r3, [r7, #12]
90005f6c:	6a3a      	ldr	r2, [r7, #32]
90005f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005f70:	68fb      	ldr	r3, [r7, #12]
90005f72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005f76:	68fb      	ldr	r3, [r7, #12]
90005f78:	2200      	movs	r2, #0
90005f7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005f7c:	88f8      	ldrh	r0, [r7, #6]
90005f7e:	893a      	ldrh	r2, [r7, #8]
90005f80:	8979      	ldrh	r1, [r7, #10]
90005f82:	697b      	ldr	r3, [r7, #20]
90005f84:	9301      	str	r3, [sp, #4]
90005f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005f88:	9300      	str	r3, [sp, #0]
90005f8a:	4603      	mov	r3, r0
90005f8c:	68f8      	ldr	r0, [r7, #12]
90005f8e:	f000 f8d9 	bl	90006144 <I2C_RequestMemoryRead>
90005f92:	4603      	mov	r3, r0
90005f94:	2b00      	cmp	r3, #0
90005f96:	d005      	beq.n	90005fa4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005f98:	68fb      	ldr	r3, [r7, #12]
90005f9a:	2200      	movs	r2, #0
90005f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005fa0:	2301      	movs	r3, #1
90005fa2:	e0ad      	b.n	90006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005fa4:	68fb      	ldr	r3, [r7, #12]
90005fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005fa8:	b29b      	uxth	r3, r3
90005faa:	2bff      	cmp	r3, #255	@ 0xff
90005fac:	d90e      	bls.n	90005fcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005fae:	68fb      	ldr	r3, [r7, #12]
90005fb0:	22ff      	movs	r2, #255	@ 0xff
90005fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005fb4:	68fb      	ldr	r3, [r7, #12]
90005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005fb8:	b2da      	uxtb	r2, r3
90005fba:	8979      	ldrh	r1, [r7, #10]
90005fbc:	4b52      	ldr	r3, [pc, #328]	@ (90006108 <HAL_I2C_Mem_Read+0x22c>)
90005fbe:	9300      	str	r3, [sp, #0]
90005fc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005fc4:	68f8      	ldr	r0, [r7, #12]
90005fc6:	f000 faf9 	bl	900065bc <I2C_TransferConfig>
90005fca:	e00f      	b.n	90005fec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005fcc:	68fb      	ldr	r3, [r7, #12]
90005fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005fd0:	b29a      	uxth	r2, r3
90005fd2:	68fb      	ldr	r3, [r7, #12]
90005fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005fd6:	68fb      	ldr	r3, [r7, #12]
90005fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005fda:	b2da      	uxtb	r2, r3
90005fdc:	8979      	ldrh	r1, [r7, #10]
90005fde:	4b4a      	ldr	r3, [pc, #296]	@ (90006108 <HAL_I2C_Mem_Read+0x22c>)
90005fe0:	9300      	str	r3, [sp, #0]
90005fe2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005fe6:	68f8      	ldr	r0, [r7, #12]
90005fe8:	f000 fae8 	bl	900065bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005fec:	697b      	ldr	r3, [r7, #20]
90005fee:	9300      	str	r3, [sp, #0]
90005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005ff2:	2200      	movs	r2, #0
90005ff4:	2104      	movs	r1, #4
90005ff6:	68f8      	ldr	r0, [r7, #12]
90005ff8:	f000 f91c 	bl	90006234 <I2C_WaitOnFlagUntilTimeout>
90005ffc:	4603      	mov	r3, r0
90005ffe:	2b00      	cmp	r3, #0
90006000:	d001      	beq.n	90006006 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90006002:	2301      	movs	r3, #1
90006004:	e07c      	b.n	90006100 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90006006:	68fb      	ldr	r3, [r7, #12]
90006008:	681b      	ldr	r3, [r3, #0]
9000600a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000600c:	68fb      	ldr	r3, [r7, #12]
9000600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006010:	b2d2      	uxtb	r2, r2
90006012:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90006014:	68fb      	ldr	r3, [r7, #12]
90006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006018:	1c5a      	adds	r2, r3, #1
9000601a:	68fb      	ldr	r3, [r7, #12]
9000601c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
9000601e:	68fb      	ldr	r3, [r7, #12]
90006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006022:	3b01      	subs	r3, #1
90006024:	b29a      	uxth	r2, r3
90006026:	68fb      	ldr	r3, [r7, #12]
90006028:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
9000602a:	68fb      	ldr	r3, [r7, #12]
9000602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000602e:	b29b      	uxth	r3, r3
90006030:	3b01      	subs	r3, #1
90006032:	b29a      	uxth	r2, r3
90006034:	68fb      	ldr	r3, [r7, #12]
90006036:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90006038:	68fb      	ldr	r3, [r7, #12]
9000603a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
9000603c:	b29b      	uxth	r3, r3
9000603e:	2b00      	cmp	r3, #0
90006040:	d034      	beq.n	900060ac <HAL_I2C_Mem_Read+0x1d0>
90006042:	68fb      	ldr	r3, [r7, #12]
90006044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006046:	2b00      	cmp	r3, #0
90006048:	d130      	bne.n	900060ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
9000604a:	697b      	ldr	r3, [r7, #20]
9000604c:	9300      	str	r3, [sp, #0]
9000604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006050:	2200      	movs	r2, #0
90006052:	2180      	movs	r1, #128	@ 0x80
90006054:	68f8      	ldr	r0, [r7, #12]
90006056:	f000 f8ed 	bl	90006234 <I2C_WaitOnFlagUntilTimeout>
9000605a:	4603      	mov	r3, r0
9000605c:	2b00      	cmp	r3, #0
9000605e:	d001      	beq.n	90006064 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90006060:	2301      	movs	r3, #1
90006062:	e04d      	b.n	90006100 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90006064:	68fb      	ldr	r3, [r7, #12]
90006066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006068:	b29b      	uxth	r3, r3
9000606a:	2bff      	cmp	r3, #255	@ 0xff
9000606c:	d90e      	bls.n	9000608c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000606e:	68fb      	ldr	r3, [r7, #12]
90006070:	22ff      	movs	r2, #255	@ 0xff
90006072:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90006074:	68fb      	ldr	r3, [r7, #12]
90006076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006078:	b2da      	uxtb	r2, r3
9000607a:	8979      	ldrh	r1, [r7, #10]
9000607c:	2300      	movs	r3, #0
9000607e:	9300      	str	r3, [sp, #0]
90006080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90006084:	68f8      	ldr	r0, [r7, #12]
90006086:	f000 fa99 	bl	900065bc <I2C_TransferConfig>
9000608a:	e00f      	b.n	900060ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
9000608c:	68fb      	ldr	r3, [r7, #12]
9000608e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006090:	b29a      	uxth	r2, r3
90006092:	68fb      	ldr	r3, [r7, #12]
90006094:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90006096:	68fb      	ldr	r3, [r7, #12]
90006098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000609a:	b2da      	uxtb	r2, r3
9000609c:	8979      	ldrh	r1, [r7, #10]
9000609e:	2300      	movs	r3, #0
900060a0:	9300      	str	r3, [sp, #0]
900060a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
900060a6:	68f8      	ldr	r0, [r7, #12]
900060a8:	f000 fa88 	bl	900065bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
900060ac:	68fb      	ldr	r3, [r7, #12]
900060ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900060b0:	b29b      	uxth	r3, r3
900060b2:	2b00      	cmp	r3, #0
900060b4:	d19a      	bne.n	90005fec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900060b6:	697a      	ldr	r2, [r7, #20]
900060b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
900060ba:	68f8      	ldr	r0, [r7, #12]
900060bc:	f000 f95a 	bl	90006374 <I2C_WaitOnSTOPFlagUntilTimeout>
900060c0:	4603      	mov	r3, r0
900060c2:	2b00      	cmp	r3, #0
900060c4:	d001      	beq.n	900060ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
900060c6:	2301      	movs	r3, #1
900060c8:	e01a      	b.n	90006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900060ca:	68fb      	ldr	r3, [r7, #12]
900060cc:	681b      	ldr	r3, [r3, #0]
900060ce:	2220      	movs	r2, #32
900060d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900060d2:	68fb      	ldr	r3, [r7, #12]
900060d4:	681b      	ldr	r3, [r3, #0]
900060d6:	6859      	ldr	r1, [r3, #4]
900060d8:	68fb      	ldr	r3, [r7, #12]
900060da:	681a      	ldr	r2, [r3, #0]
900060dc:	4b0b      	ldr	r3, [pc, #44]	@ (9000610c <HAL_I2C_Mem_Read+0x230>)
900060de:	400b      	ands	r3, r1
900060e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
900060e2:	68fb      	ldr	r3, [r7, #12]
900060e4:	2220      	movs	r2, #32
900060e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900060ea:	68fb      	ldr	r3, [r7, #12]
900060ec:	2200      	movs	r2, #0
900060ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900060f2:	68fb      	ldr	r3, [r7, #12]
900060f4:	2200      	movs	r2, #0
900060f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900060fa:	2300      	movs	r3, #0
900060fc:	e000      	b.n	90006100 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
900060fe:	2302      	movs	r3, #2
  }
}
90006100:	4618      	mov	r0, r3
90006102:	3718      	adds	r7, #24
90006104:	46bd      	mov	sp, r7
90006106:	bd80      	pop	{r7, pc}
90006108:	80002400 	.word	0x80002400
9000610c:	fe00e800 	.word	0xfe00e800

90006110 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90006110:	b480      	push	{r7}
90006112:	b083      	sub	sp, #12
90006114:	af00      	add	r7, sp, #0
90006116:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90006118:	687b      	ldr	r3, [r7, #4]
9000611a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
9000611e:	b2db      	uxtb	r3, r3
}
90006120:	4618      	mov	r0, r3
90006122:	370c      	adds	r7, #12
90006124:	46bd      	mov	sp, r7
90006126:	f85d 7b04 	ldr.w	r7, [sp], #4
9000612a:	4770      	bx	lr

9000612c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
9000612c:	b480      	push	{r7}
9000612e:	b083      	sub	sp, #12
90006130:	af00      	add	r7, sp, #0
90006132:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90006134:	687b      	ldr	r3, [r7, #4]
90006136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90006138:	4618      	mov	r0, r3
9000613a:	370c      	adds	r7, #12
9000613c:	46bd      	mov	sp, r7
9000613e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006142:	4770      	bx	lr

90006144 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90006144:	b580      	push	{r7, lr}
90006146:	b086      	sub	sp, #24
90006148:	af02      	add	r7, sp, #8
9000614a:	60f8      	str	r0, [r7, #12]
9000614c:	4608      	mov	r0, r1
9000614e:	4611      	mov	r1, r2
90006150:	461a      	mov	r2, r3
90006152:	4603      	mov	r3, r0
90006154:	817b      	strh	r3, [r7, #10]
90006156:	460b      	mov	r3, r1
90006158:	813b      	strh	r3, [r7, #8]
9000615a:	4613      	mov	r3, r2
9000615c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
9000615e:	88fb      	ldrh	r3, [r7, #6]
90006160:	b2da      	uxtb	r2, r3
90006162:	8979      	ldrh	r1, [r7, #10]
90006164:	4b20      	ldr	r3, [pc, #128]	@ (900061e8 <I2C_RequestMemoryRead+0xa4>)
90006166:	9300      	str	r3, [sp, #0]
90006168:	2300      	movs	r3, #0
9000616a:	68f8      	ldr	r0, [r7, #12]
9000616c:	f000 fa26 	bl	900065bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006170:	69fa      	ldr	r2, [r7, #28]
90006172:	69b9      	ldr	r1, [r7, #24]
90006174:	68f8      	ldr	r0, [r7, #12]
90006176:	f000 f8b6 	bl	900062e6 <I2C_WaitOnTXISFlagUntilTimeout>
9000617a:	4603      	mov	r3, r0
9000617c:	2b00      	cmp	r3, #0
9000617e:	d001      	beq.n	90006184 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90006180:	2301      	movs	r3, #1
90006182:	e02c      	b.n	900061de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90006184:	88fb      	ldrh	r3, [r7, #6]
90006186:	2b01      	cmp	r3, #1
90006188:	d105      	bne.n	90006196 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000618a:	893b      	ldrh	r3, [r7, #8]
9000618c:	b2da      	uxtb	r2, r3
9000618e:	68fb      	ldr	r3, [r7, #12]
90006190:	681b      	ldr	r3, [r3, #0]
90006192:	629a      	str	r2, [r3, #40]	@ 0x28
90006194:	e015      	b.n	900061c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90006196:	893b      	ldrh	r3, [r7, #8]
90006198:	0a1b      	lsrs	r3, r3, #8
9000619a:	b29b      	uxth	r3, r3
9000619c:	b2da      	uxtb	r2, r3
9000619e:	68fb      	ldr	r3, [r7, #12]
900061a0:	681b      	ldr	r3, [r3, #0]
900061a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900061a4:	69fa      	ldr	r2, [r7, #28]
900061a6:	69b9      	ldr	r1, [r7, #24]
900061a8:	68f8      	ldr	r0, [r7, #12]
900061aa:	f000 f89c 	bl	900062e6 <I2C_WaitOnTXISFlagUntilTimeout>
900061ae:	4603      	mov	r3, r0
900061b0:	2b00      	cmp	r3, #0
900061b2:	d001      	beq.n	900061b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
900061b4:	2301      	movs	r3, #1
900061b6:	e012      	b.n	900061de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900061b8:	893b      	ldrh	r3, [r7, #8]
900061ba:	b2da      	uxtb	r2, r3
900061bc:	68fb      	ldr	r3, [r7, #12]
900061be:	681b      	ldr	r3, [r3, #0]
900061c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
900061c2:	69fb      	ldr	r3, [r7, #28]
900061c4:	9300      	str	r3, [sp, #0]
900061c6:	69bb      	ldr	r3, [r7, #24]
900061c8:	2200      	movs	r2, #0
900061ca:	2140      	movs	r1, #64	@ 0x40
900061cc:	68f8      	ldr	r0, [r7, #12]
900061ce:	f000 f831 	bl	90006234 <I2C_WaitOnFlagUntilTimeout>
900061d2:	4603      	mov	r3, r0
900061d4:	2b00      	cmp	r3, #0
900061d6:	d001      	beq.n	900061dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
900061d8:	2301      	movs	r3, #1
900061da:	e000      	b.n	900061de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
900061dc:	2300      	movs	r3, #0
}
900061de:	4618      	mov	r0, r3
900061e0:	3710      	adds	r7, #16
900061e2:	46bd      	mov	sp, r7
900061e4:	bd80      	pop	{r7, pc}
900061e6:	bf00      	nop
900061e8:	80002000 	.word	0x80002000

900061ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
900061ec:	b480      	push	{r7}
900061ee:	b083      	sub	sp, #12
900061f0:	af00      	add	r7, sp, #0
900061f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900061f4:	687b      	ldr	r3, [r7, #4]
900061f6:	681b      	ldr	r3, [r3, #0]
900061f8:	699b      	ldr	r3, [r3, #24]
900061fa:	f003 0302 	and.w	r3, r3, #2
900061fe:	2b02      	cmp	r3, #2
90006200:	d103      	bne.n	9000620a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90006202:	687b      	ldr	r3, [r7, #4]
90006204:	681b      	ldr	r3, [r3, #0]
90006206:	2200      	movs	r2, #0
90006208:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000620a:	687b      	ldr	r3, [r7, #4]
9000620c:	681b      	ldr	r3, [r3, #0]
9000620e:	699b      	ldr	r3, [r3, #24]
90006210:	f003 0301 	and.w	r3, r3, #1
90006214:	2b01      	cmp	r3, #1
90006216:	d007      	beq.n	90006228 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90006218:	687b      	ldr	r3, [r7, #4]
9000621a:	681b      	ldr	r3, [r3, #0]
9000621c:	699a      	ldr	r2, [r3, #24]
9000621e:	687b      	ldr	r3, [r7, #4]
90006220:	681b      	ldr	r3, [r3, #0]
90006222:	f042 0201 	orr.w	r2, r2, #1
90006226:	619a      	str	r2, [r3, #24]
  }
}
90006228:	bf00      	nop
9000622a:	370c      	adds	r7, #12
9000622c:	46bd      	mov	sp, r7
9000622e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006232:	4770      	bx	lr

90006234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90006234:	b580      	push	{r7, lr}
90006236:	b084      	sub	sp, #16
90006238:	af00      	add	r7, sp, #0
9000623a:	60f8      	str	r0, [r7, #12]
9000623c:	60b9      	str	r1, [r7, #8]
9000623e:	603b      	str	r3, [r7, #0]
90006240:	4613      	mov	r3, r2
90006242:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006244:	e03b      	b.n	900062be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006246:	69ba      	ldr	r2, [r7, #24]
90006248:	6839      	ldr	r1, [r7, #0]
9000624a:	68f8      	ldr	r0, [r7, #12]
9000624c:	f000 f8d6 	bl	900063fc <I2C_IsErrorOccurred>
90006250:	4603      	mov	r3, r0
90006252:	2b00      	cmp	r3, #0
90006254:	d001      	beq.n	9000625a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90006256:	2301      	movs	r3, #1
90006258:	e041      	b.n	900062de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000625a:	683b      	ldr	r3, [r7, #0]
9000625c:	f1b3 3fff 	cmp.w	r3, #4294967295
90006260:	d02d      	beq.n	900062be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006262:	f7fd f963 	bl	9000352c <HAL_GetTick>
90006266:	4602      	mov	r2, r0
90006268:	69bb      	ldr	r3, [r7, #24]
9000626a:	1ad3      	subs	r3, r2, r3
9000626c:	683a      	ldr	r2, [r7, #0]
9000626e:	429a      	cmp	r2, r3
90006270:	d302      	bcc.n	90006278 <I2C_WaitOnFlagUntilTimeout+0x44>
90006272:	683b      	ldr	r3, [r7, #0]
90006274:	2b00      	cmp	r3, #0
90006276:	d122      	bne.n	900062be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90006278:	68fb      	ldr	r3, [r7, #12]
9000627a:	681b      	ldr	r3, [r3, #0]
9000627c:	699a      	ldr	r2, [r3, #24]
9000627e:	68bb      	ldr	r3, [r7, #8]
90006280:	4013      	ands	r3, r2
90006282:	68ba      	ldr	r2, [r7, #8]
90006284:	429a      	cmp	r2, r3
90006286:	bf0c      	ite	eq
90006288:	2301      	moveq	r3, #1
9000628a:	2300      	movne	r3, #0
9000628c:	b2db      	uxtb	r3, r3
9000628e:	461a      	mov	r2, r3
90006290:	79fb      	ldrb	r3, [r7, #7]
90006292:	429a      	cmp	r2, r3
90006294:	d113      	bne.n	900062be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006296:	68fb      	ldr	r3, [r7, #12]
90006298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000629a:	f043 0220 	orr.w	r2, r3, #32
9000629e:	68fb      	ldr	r3, [r7, #12]
900062a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900062a2:	68fb      	ldr	r3, [r7, #12]
900062a4:	2220      	movs	r2, #32
900062a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900062aa:	68fb      	ldr	r3, [r7, #12]
900062ac:	2200      	movs	r2, #0
900062ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
900062b2:	68fb      	ldr	r3, [r7, #12]
900062b4:	2200      	movs	r2, #0
900062b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
900062ba:	2301      	movs	r3, #1
900062bc:	e00f      	b.n	900062de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900062be:	68fb      	ldr	r3, [r7, #12]
900062c0:	681b      	ldr	r3, [r3, #0]
900062c2:	699a      	ldr	r2, [r3, #24]
900062c4:	68bb      	ldr	r3, [r7, #8]
900062c6:	4013      	ands	r3, r2
900062c8:	68ba      	ldr	r2, [r7, #8]
900062ca:	429a      	cmp	r2, r3
900062cc:	bf0c      	ite	eq
900062ce:	2301      	moveq	r3, #1
900062d0:	2300      	movne	r3, #0
900062d2:	b2db      	uxtb	r3, r3
900062d4:	461a      	mov	r2, r3
900062d6:	79fb      	ldrb	r3, [r7, #7]
900062d8:	429a      	cmp	r2, r3
900062da:	d0b4      	beq.n	90006246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
900062dc:	2300      	movs	r3, #0
}
900062de:	4618      	mov	r0, r3
900062e0:	3710      	adds	r7, #16
900062e2:	46bd      	mov	sp, r7
900062e4:	bd80      	pop	{r7, pc}

900062e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900062e6:	b580      	push	{r7, lr}
900062e8:	b084      	sub	sp, #16
900062ea:	af00      	add	r7, sp, #0
900062ec:	60f8      	str	r0, [r7, #12]
900062ee:	60b9      	str	r1, [r7, #8]
900062f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900062f2:	e033      	b.n	9000635c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
900062f4:	687a      	ldr	r2, [r7, #4]
900062f6:	68b9      	ldr	r1, [r7, #8]
900062f8:	68f8      	ldr	r0, [r7, #12]
900062fa:	f000 f87f 	bl	900063fc <I2C_IsErrorOccurred>
900062fe:	4603      	mov	r3, r0
90006300:	2b00      	cmp	r3, #0
90006302:	d001      	beq.n	90006308 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006304:	2301      	movs	r3, #1
90006306:	e031      	b.n	9000636c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90006308:	68bb      	ldr	r3, [r7, #8]
9000630a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000630e:	d025      	beq.n	9000635c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006310:	f7fd f90c 	bl	9000352c <HAL_GetTick>
90006314:	4602      	mov	r2, r0
90006316:	687b      	ldr	r3, [r7, #4]
90006318:	1ad3      	subs	r3, r2, r3
9000631a:	68ba      	ldr	r2, [r7, #8]
9000631c:	429a      	cmp	r2, r3
9000631e:	d302      	bcc.n	90006326 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90006320:	68bb      	ldr	r3, [r7, #8]
90006322:	2b00      	cmp	r3, #0
90006324:	d11a      	bne.n	9000635c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90006326:	68fb      	ldr	r3, [r7, #12]
90006328:	681b      	ldr	r3, [r3, #0]
9000632a:	699b      	ldr	r3, [r3, #24]
9000632c:	f003 0302 	and.w	r3, r3, #2
90006330:	2b02      	cmp	r3, #2
90006332:	d013      	beq.n	9000635c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006334:	68fb      	ldr	r3, [r7, #12]
90006336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006338:	f043 0220 	orr.w	r2, r3, #32
9000633c:	68fb      	ldr	r3, [r7, #12]
9000633e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006340:	68fb      	ldr	r3, [r7, #12]
90006342:	2220      	movs	r2, #32
90006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006348:	68fb      	ldr	r3, [r7, #12]
9000634a:	2200      	movs	r2, #0
9000634c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006350:	68fb      	ldr	r3, [r7, #12]
90006352:	2200      	movs	r2, #0
90006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90006358:	2301      	movs	r3, #1
9000635a:	e007      	b.n	9000636c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000635c:	68fb      	ldr	r3, [r7, #12]
9000635e:	681b      	ldr	r3, [r3, #0]
90006360:	699b      	ldr	r3, [r3, #24]
90006362:	f003 0302 	and.w	r3, r3, #2
90006366:	2b02      	cmp	r3, #2
90006368:	d1c4      	bne.n	900062f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
9000636a:	2300      	movs	r3, #0
}
9000636c:	4618      	mov	r0, r3
9000636e:	3710      	adds	r7, #16
90006370:	46bd      	mov	sp, r7
90006372:	bd80      	pop	{r7, pc}

90006374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006374:	b580      	push	{r7, lr}
90006376:	b084      	sub	sp, #16
90006378:	af00      	add	r7, sp, #0
9000637a:	60f8      	str	r0, [r7, #12]
9000637c:	60b9      	str	r1, [r7, #8]
9000637e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006380:	e02f      	b.n	900063e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006382:	687a      	ldr	r2, [r7, #4]
90006384:	68b9      	ldr	r1, [r7, #8]
90006386:	68f8      	ldr	r0, [r7, #12]
90006388:	f000 f838 	bl	900063fc <I2C_IsErrorOccurred>
9000638c:	4603      	mov	r3, r0
9000638e:	2b00      	cmp	r3, #0
90006390:	d001      	beq.n	90006396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006392:	2301      	movs	r3, #1
90006394:	e02d      	b.n	900063f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006396:	f7fd f8c9 	bl	9000352c <HAL_GetTick>
9000639a:	4602      	mov	r2, r0
9000639c:	687b      	ldr	r3, [r7, #4]
9000639e:	1ad3      	subs	r3, r2, r3
900063a0:	68ba      	ldr	r2, [r7, #8]
900063a2:	429a      	cmp	r2, r3
900063a4:	d302      	bcc.n	900063ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
900063a6:	68bb      	ldr	r3, [r7, #8]
900063a8:	2b00      	cmp	r3, #0
900063aa:	d11a      	bne.n	900063e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
900063ac:	68fb      	ldr	r3, [r7, #12]
900063ae:	681b      	ldr	r3, [r3, #0]
900063b0:	699b      	ldr	r3, [r3, #24]
900063b2:	f003 0320 	and.w	r3, r3, #32
900063b6:	2b20      	cmp	r3, #32
900063b8:	d013      	beq.n	900063e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900063ba:	68fb      	ldr	r3, [r7, #12]
900063bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900063be:	f043 0220 	orr.w	r2, r3, #32
900063c2:	68fb      	ldr	r3, [r7, #12]
900063c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
900063c6:	68fb      	ldr	r3, [r7, #12]
900063c8:	2220      	movs	r2, #32
900063ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
900063ce:	68fb      	ldr	r3, [r7, #12]
900063d0:	2200      	movs	r2, #0
900063d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
900063d6:	68fb      	ldr	r3, [r7, #12]
900063d8:	2200      	movs	r2, #0
900063da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
900063de:	2301      	movs	r3, #1
900063e0:	e007      	b.n	900063f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900063e2:	68fb      	ldr	r3, [r7, #12]
900063e4:	681b      	ldr	r3, [r3, #0]
900063e6:	699b      	ldr	r3, [r3, #24]
900063e8:	f003 0320 	and.w	r3, r3, #32
900063ec:	2b20      	cmp	r3, #32
900063ee:	d1c8      	bne.n	90006382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
900063f0:	2300      	movs	r3, #0
}
900063f2:	4618      	mov	r0, r3
900063f4:	3710      	adds	r7, #16
900063f6:	46bd      	mov	sp, r7
900063f8:	bd80      	pop	{r7, pc}
	...

900063fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
900063fc:	b580      	push	{r7, lr}
900063fe:	b08a      	sub	sp, #40	@ 0x28
90006400:	af00      	add	r7, sp, #0
90006402:	60f8      	str	r0, [r7, #12]
90006404:	60b9      	str	r1, [r7, #8]
90006406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90006408:	2300      	movs	r3, #0
9000640a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
9000640e:	68fb      	ldr	r3, [r7, #12]
90006410:	681b      	ldr	r3, [r3, #0]
90006412:	699b      	ldr	r3, [r3, #24]
90006414:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
90006416:	2300      	movs	r3, #0
90006418:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
9000641a:	687b      	ldr	r3, [r7, #4]
9000641c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000641e:	69bb      	ldr	r3, [r7, #24]
90006420:	f003 0310 	and.w	r3, r3, #16
90006424:	2b00      	cmp	r3, #0
90006426:	d068      	beq.n	900064fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90006428:	68fb      	ldr	r3, [r7, #12]
9000642a:	681b      	ldr	r3, [r3, #0]
9000642c:	2210      	movs	r2, #16
9000642e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006430:	e049      	b.n	900064c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90006432:	68bb      	ldr	r3, [r7, #8]
90006434:	f1b3 3fff 	cmp.w	r3, #4294967295
90006438:	d045      	beq.n	900064c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000643a:	f7fd f877 	bl	9000352c <HAL_GetTick>
9000643e:	4602      	mov	r2, r0
90006440:	69fb      	ldr	r3, [r7, #28]
90006442:	1ad3      	subs	r3, r2, r3
90006444:	68ba      	ldr	r2, [r7, #8]
90006446:	429a      	cmp	r2, r3
90006448:	d302      	bcc.n	90006450 <I2C_IsErrorOccurred+0x54>
9000644a:	68bb      	ldr	r3, [r7, #8]
9000644c:	2b00      	cmp	r3, #0
9000644e:	d13a      	bne.n	900064c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90006450:	68fb      	ldr	r3, [r7, #12]
90006452:	681b      	ldr	r3, [r3, #0]
90006454:	685b      	ldr	r3, [r3, #4]
90006456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
9000645a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
9000645c:	68fb      	ldr	r3, [r7, #12]
9000645e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90006462:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006464:	68fb      	ldr	r3, [r7, #12]
90006466:	681b      	ldr	r3, [r3, #0]
90006468:	699b      	ldr	r3, [r3, #24]
9000646a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
9000646e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006472:	d121      	bne.n	900064b8 <I2C_IsErrorOccurred+0xbc>
90006474:	697b      	ldr	r3, [r7, #20]
90006476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000647a:	d01d      	beq.n	900064b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
9000647c:	7cfb      	ldrb	r3, [r7, #19]
9000647e:	2b20      	cmp	r3, #32
90006480:	d01a      	beq.n	900064b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006482:	68fb      	ldr	r3, [r7, #12]
90006484:	681b      	ldr	r3, [r3, #0]
90006486:	685a      	ldr	r2, [r3, #4]
90006488:	68fb      	ldr	r3, [r7, #12]
9000648a:	681b      	ldr	r3, [r3, #0]
9000648c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006490:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006492:	f7fd f84b 	bl	9000352c <HAL_GetTick>
90006496:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006498:	e00e      	b.n	900064b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000649a:	f7fd f847 	bl	9000352c <HAL_GetTick>
9000649e:	4602      	mov	r2, r0
900064a0:	69fb      	ldr	r3, [r7, #28]
900064a2:	1ad3      	subs	r3, r2, r3
900064a4:	2b19      	cmp	r3, #25
900064a6:	d907      	bls.n	900064b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900064a8:	6a3b      	ldr	r3, [r7, #32]
900064aa:	f043 0320 	orr.w	r3, r3, #32
900064ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
900064b0:	2301      	movs	r3, #1
900064b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
900064b6:	e006      	b.n	900064c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900064b8:	68fb      	ldr	r3, [r7, #12]
900064ba:	681b      	ldr	r3, [r3, #0]
900064bc:	699b      	ldr	r3, [r3, #24]
900064be:	f003 0320 	and.w	r3, r3, #32
900064c2:	2b20      	cmp	r3, #32
900064c4:	d1e9      	bne.n	9000649a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900064c6:	68fb      	ldr	r3, [r7, #12]
900064c8:	681b      	ldr	r3, [r3, #0]
900064ca:	699b      	ldr	r3, [r3, #24]
900064cc:	f003 0320 	and.w	r3, r3, #32
900064d0:	2b20      	cmp	r3, #32
900064d2:	d003      	beq.n	900064dc <I2C_IsErrorOccurred+0xe0>
900064d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900064d8:	2b00      	cmp	r3, #0
900064da:	d0aa      	beq.n	90006432 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
900064dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900064e0:	2b00      	cmp	r3, #0
900064e2:	d103      	bne.n	900064ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900064e4:	68fb      	ldr	r3, [r7, #12]
900064e6:	681b      	ldr	r3, [r3, #0]
900064e8:	2220      	movs	r2, #32
900064ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900064ec:	6a3b      	ldr	r3, [r7, #32]
900064ee:	f043 0304 	orr.w	r3, r3, #4
900064f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
900064f4:	2301      	movs	r3, #1
900064f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900064fa:	68fb      	ldr	r3, [r7, #12]
900064fc:	681b      	ldr	r3, [r3, #0]
900064fe:	699b      	ldr	r3, [r3, #24]
90006500:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006502:	69bb      	ldr	r3, [r7, #24]
90006504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006508:	2b00      	cmp	r3, #0
9000650a:	d00b      	beq.n	90006524 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
9000650c:	6a3b      	ldr	r3, [r7, #32]
9000650e:	f043 0301 	orr.w	r3, r3, #1
90006512:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006514:	68fb      	ldr	r3, [r7, #12]
90006516:	681b      	ldr	r3, [r3, #0]
90006518:	f44f 7280 	mov.w	r2, #256	@ 0x100
9000651c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
9000651e:	2301      	movs	r3, #1
90006520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006524:	69bb      	ldr	r3, [r7, #24]
90006526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000652a:	2b00      	cmp	r3, #0
9000652c:	d00b      	beq.n	90006546 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
9000652e:	6a3b      	ldr	r3, [r7, #32]
90006530:	f043 0308 	orr.w	r3, r3, #8
90006534:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90006536:	68fb      	ldr	r3, [r7, #12]
90006538:	681b      	ldr	r3, [r3, #0]
9000653a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
9000653e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006540:	2301      	movs	r3, #1
90006542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90006546:	69bb      	ldr	r3, [r7, #24]
90006548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000654c:	2b00      	cmp	r3, #0
9000654e:	d00b      	beq.n	90006568 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90006550:	6a3b      	ldr	r3, [r7, #32]
90006552:	f043 0302 	orr.w	r3, r3, #2
90006556:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90006558:	68fb      	ldr	r3, [r7, #12]
9000655a:	681b      	ldr	r3, [r3, #0]
9000655c:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006562:	2301      	movs	r3, #1
90006564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90006568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000656c:	2b00      	cmp	r3, #0
9000656e:	d01c      	beq.n	900065aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006570:	68f8      	ldr	r0, [r7, #12]
90006572:	f7ff fe3b 	bl	900061ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006576:	68fb      	ldr	r3, [r7, #12]
90006578:	681b      	ldr	r3, [r3, #0]
9000657a:	6859      	ldr	r1, [r3, #4]
9000657c:	68fb      	ldr	r3, [r7, #12]
9000657e:	681a      	ldr	r2, [r3, #0]
90006580:	4b0d      	ldr	r3, [pc, #52]	@ (900065b8 <I2C_IsErrorOccurred+0x1bc>)
90006582:	400b      	ands	r3, r1
90006584:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90006586:	68fb      	ldr	r3, [r7, #12]
90006588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000658a:	6a3b      	ldr	r3, [r7, #32]
9000658c:	431a      	orrs	r2, r3
9000658e:	68fb      	ldr	r3, [r7, #12]
90006590:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006592:	68fb      	ldr	r3, [r7, #12]
90006594:	2220      	movs	r2, #32
90006596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000659a:	68fb      	ldr	r3, [r7, #12]
9000659c:	2200      	movs	r2, #0
9000659e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900065a2:	68fb      	ldr	r3, [r7, #12]
900065a4:	2200      	movs	r2, #0
900065a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
900065aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
900065ae:	4618      	mov	r0, r3
900065b0:	3728      	adds	r7, #40	@ 0x28
900065b2:	46bd      	mov	sp, r7
900065b4:	bd80      	pop	{r7, pc}
900065b6:	bf00      	nop
900065b8:	fe00e800 	.word	0xfe00e800

900065bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
900065bc:	b480      	push	{r7}
900065be:	b087      	sub	sp, #28
900065c0:	af00      	add	r7, sp, #0
900065c2:	60f8      	str	r0, [r7, #12]
900065c4:	607b      	str	r3, [r7, #4]
900065c6:	460b      	mov	r3, r1
900065c8:	817b      	strh	r3, [r7, #10]
900065ca:	4613      	mov	r3, r2
900065cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900065ce:	897b      	ldrh	r3, [r7, #10]
900065d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900065d4:	7a7b      	ldrb	r3, [r7, #9]
900065d6:	041b      	lsls	r3, r3, #16
900065d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900065dc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900065de:	687b      	ldr	r3, [r7, #4]
900065e0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900065e2:	6a3b      	ldr	r3, [r7, #32]
900065e4:	4313      	orrs	r3, r2
900065e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
900065ea:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900065ec:	68fb      	ldr	r3, [r7, #12]
900065ee:	681b      	ldr	r3, [r3, #0]
900065f0:	685a      	ldr	r2, [r3, #4]
900065f2:	6a3b      	ldr	r3, [r7, #32]
900065f4:	0d5b      	lsrs	r3, r3, #21
900065f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
900065fa:	4b08      	ldr	r3, [pc, #32]	@ (9000661c <I2C_TransferConfig+0x60>)
900065fc:	430b      	orrs	r3, r1
900065fe:	43db      	mvns	r3, r3
90006600:	ea02 0103 	and.w	r1, r2, r3
90006604:	68fb      	ldr	r3, [r7, #12]
90006606:	681b      	ldr	r3, [r3, #0]
90006608:	697a      	ldr	r2, [r7, #20]
9000660a:	430a      	orrs	r2, r1
9000660c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000660e:	bf00      	nop
90006610:	371c      	adds	r7, #28
90006612:	46bd      	mov	sp, r7
90006614:	f85d 7b04 	ldr.w	r7, [sp], #4
90006618:	4770      	bx	lr
9000661a:	bf00      	nop
9000661c:	03ff63ff 	.word	0x03ff63ff

90006620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90006620:	b480      	push	{r7}
90006622:	b083      	sub	sp, #12
90006624:	af00      	add	r7, sp, #0
90006626:	6078      	str	r0, [r7, #4]
90006628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000662a:	687b      	ldr	r3, [r7, #4]
9000662c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006630:	b2db      	uxtb	r3, r3
90006632:	2b20      	cmp	r3, #32
90006634:	d138      	bne.n	900066a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006636:	687b      	ldr	r3, [r7, #4]
90006638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
9000663c:	2b01      	cmp	r3, #1
9000663e:	d101      	bne.n	90006644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90006640:	2302      	movs	r3, #2
90006642:	e032      	b.n	900066aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90006644:	687b      	ldr	r3, [r7, #4]
90006646:	2201      	movs	r2, #1
90006648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
9000664c:	687b      	ldr	r3, [r7, #4]
9000664e:	2224      	movs	r2, #36	@ 0x24
90006650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006654:	687b      	ldr	r3, [r7, #4]
90006656:	681b      	ldr	r3, [r3, #0]
90006658:	681a      	ldr	r2, [r3, #0]
9000665a:	687b      	ldr	r3, [r7, #4]
9000665c:	681b      	ldr	r3, [r3, #0]
9000665e:	f022 0201 	bic.w	r2, r2, #1
90006662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90006664:	687b      	ldr	r3, [r7, #4]
90006666:	681b      	ldr	r3, [r3, #0]
90006668:	681a      	ldr	r2, [r3, #0]
9000666a:	687b      	ldr	r3, [r7, #4]
9000666c:	681b      	ldr	r3, [r3, #0]
9000666e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006674:	687b      	ldr	r3, [r7, #4]
90006676:	681b      	ldr	r3, [r3, #0]
90006678:	6819      	ldr	r1, [r3, #0]
9000667a:	687b      	ldr	r3, [r7, #4]
9000667c:	681b      	ldr	r3, [r3, #0]
9000667e:	683a      	ldr	r2, [r7, #0]
90006680:	430a      	orrs	r2, r1
90006682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006684:	687b      	ldr	r3, [r7, #4]
90006686:	681b      	ldr	r3, [r3, #0]
90006688:	681a      	ldr	r2, [r3, #0]
9000668a:	687b      	ldr	r3, [r7, #4]
9000668c:	681b      	ldr	r3, [r3, #0]
9000668e:	f042 0201 	orr.w	r2, r2, #1
90006692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006694:	687b      	ldr	r3, [r7, #4]
90006696:	2220      	movs	r2, #32
90006698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000669c:	687b      	ldr	r3, [r7, #4]
9000669e:	2200      	movs	r2, #0
900066a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900066a4:	2300      	movs	r3, #0
900066a6:	e000      	b.n	900066aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
900066a8:	2302      	movs	r3, #2
  }
}
900066aa:	4618      	mov	r0, r3
900066ac:	370c      	adds	r7, #12
900066ae:	46bd      	mov	sp, r7
900066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900066b4:	4770      	bx	lr

900066b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
900066b6:	b480      	push	{r7}
900066b8:	b085      	sub	sp, #20
900066ba:	af00      	add	r7, sp, #0
900066bc:	6078      	str	r0, [r7, #4]
900066be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900066c0:	687b      	ldr	r3, [r7, #4]
900066c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900066c6:	b2db      	uxtb	r3, r3
900066c8:	2b20      	cmp	r3, #32
900066ca:	d139      	bne.n	90006740 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900066cc:	687b      	ldr	r3, [r7, #4]
900066ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900066d2:	2b01      	cmp	r3, #1
900066d4:	d101      	bne.n	900066da <HAL_I2CEx_ConfigDigitalFilter+0x24>
900066d6:	2302      	movs	r3, #2
900066d8:	e033      	b.n	90006742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
900066da:	687b      	ldr	r3, [r7, #4]
900066dc:	2201      	movs	r2, #1
900066de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900066e2:	687b      	ldr	r3, [r7, #4]
900066e4:	2224      	movs	r2, #36	@ 0x24
900066e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900066ea:	687b      	ldr	r3, [r7, #4]
900066ec:	681b      	ldr	r3, [r3, #0]
900066ee:	681a      	ldr	r2, [r3, #0]
900066f0:	687b      	ldr	r3, [r7, #4]
900066f2:	681b      	ldr	r3, [r3, #0]
900066f4:	f022 0201 	bic.w	r2, r2, #1
900066f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900066fa:	687b      	ldr	r3, [r7, #4]
900066fc:	681b      	ldr	r3, [r3, #0]
900066fe:	681b      	ldr	r3, [r3, #0]
90006700:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006702:	68fb      	ldr	r3, [r7, #12]
90006704:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
90006708:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000670a:	683b      	ldr	r3, [r7, #0]
9000670c:	021b      	lsls	r3, r3, #8
9000670e:	68fa      	ldr	r2, [r7, #12]
90006710:	4313      	orrs	r3, r2
90006712:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006714:	687b      	ldr	r3, [r7, #4]
90006716:	681b      	ldr	r3, [r3, #0]
90006718:	68fa      	ldr	r2, [r7, #12]
9000671a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
9000671c:	687b      	ldr	r3, [r7, #4]
9000671e:	681b      	ldr	r3, [r3, #0]
90006720:	681a      	ldr	r2, [r3, #0]
90006722:	687b      	ldr	r3, [r7, #4]
90006724:	681b      	ldr	r3, [r3, #0]
90006726:	f042 0201 	orr.w	r2, r2, #1
9000672a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
9000672c:	687b      	ldr	r3, [r7, #4]
9000672e:	2220      	movs	r2, #32
90006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006734:	687b      	ldr	r3, [r7, #4]
90006736:	2200      	movs	r2, #0
90006738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
9000673c:	2300      	movs	r3, #0
9000673e:	e000      	b.n	90006742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90006740:	2302      	movs	r3, #2
  }
}
90006742:	4618      	mov	r0, r3
90006744:	3714      	adds	r7, #20
90006746:	46bd      	mov	sp, r7
90006748:	f85d 7b04 	ldr.w	r7, [sp], #4
9000674c:	4770      	bx	lr

9000674e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
9000674e:	b580      	push	{r7, lr}
90006750:	b084      	sub	sp, #16
90006752:	af00      	add	r7, sp, #0
90006754:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90006756:	687b      	ldr	r3, [r7, #4]
90006758:	2b00      	cmp	r3, #0
9000675a:	d101      	bne.n	90006760 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
9000675c:	2301      	movs	r3, #1
9000675e:	e08f      	b.n	90006880 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006760:	687b      	ldr	r3, [r7, #4]
90006762:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90006766:	b2db      	uxtb	r3, r3
90006768:	2b00      	cmp	r3, #0
9000676a:	d106      	bne.n	9000677a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
9000676c:	687b      	ldr	r3, [r7, #4]
9000676e:	2200      	movs	r2, #0
90006770:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006774:	6878      	ldr	r0, [r7, #4]
90006776:	f000 f887 	bl	90006888 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000677a:	687b      	ldr	r3, [r7, #4]
9000677c:	2202      	movs	r2, #2
9000677e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006782:	687b      	ldr	r3, [r7, #4]
90006784:	681b      	ldr	r3, [r3, #0]
90006786:	699a      	ldr	r2, [r3, #24]
90006788:	687b      	ldr	r3, [r7, #4]
9000678a:	681b      	ldr	r3, [r3, #0]
9000678c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006790:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006792:	687b      	ldr	r3, [r7, #4]
90006794:	681b      	ldr	r3, [r3, #0]
90006796:	6999      	ldr	r1, [r3, #24]
90006798:	687b      	ldr	r3, [r7, #4]
9000679a:	685a      	ldr	r2, [r3, #4]
9000679c:	687b      	ldr	r3, [r7, #4]
9000679e:	689b      	ldr	r3, [r3, #8]
900067a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900067a2:	687b      	ldr	r3, [r7, #4]
900067a4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900067a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900067a8:	687b      	ldr	r3, [r7, #4]
900067aa:	691b      	ldr	r3, [r3, #16]
900067ac:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900067ae:	687b      	ldr	r3, [r7, #4]
900067b0:	681b      	ldr	r3, [r3, #0]
900067b2:	430a      	orrs	r2, r1
900067b4:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
900067b6:	687b      	ldr	r3, [r7, #4]
900067b8:	695b      	ldr	r3, [r3, #20]
900067ba:	041b      	lsls	r3, r3, #16
900067bc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
900067be:	687b      	ldr	r3, [r7, #4]
900067c0:	6999      	ldr	r1, [r3, #24]
900067c2:	687b      	ldr	r3, [r7, #4]
900067c4:	681b      	ldr	r3, [r3, #0]
900067c6:	68fa      	ldr	r2, [r7, #12]
900067c8:	430a      	orrs	r2, r1
900067ca:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
900067cc:	687b      	ldr	r3, [r7, #4]
900067ce:	69db      	ldr	r3, [r3, #28]
900067d0:	041b      	lsls	r3, r3, #16
900067d2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
900067d4:	687b      	ldr	r3, [r7, #4]
900067d6:	6a19      	ldr	r1, [r3, #32]
900067d8:	687b      	ldr	r3, [r7, #4]
900067da:	681b      	ldr	r3, [r3, #0]
900067dc:	68fa      	ldr	r2, [r7, #12]
900067de:	430a      	orrs	r2, r1
900067e0:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900067e2:	687b      	ldr	r3, [r7, #4]
900067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900067e6:	041b      	lsls	r3, r3, #16
900067e8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
900067ea:	687b      	ldr	r3, [r7, #4]
900067ec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
900067ee:	687b      	ldr	r3, [r7, #4]
900067f0:	681b      	ldr	r3, [r3, #0]
900067f2:	68fa      	ldr	r2, [r7, #12]
900067f4:	430a      	orrs	r2, r1
900067f6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
900067f8:	687b      	ldr	r3, [r7, #4]
900067fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900067fc:	041b      	lsls	r3, r3, #16
900067fe:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006800:	687b      	ldr	r3, [r7, #4]
90006802:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006804:	687b      	ldr	r3, [r7, #4]
90006806:	681b      	ldr	r3, [r3, #0]
90006808:	68fa      	ldr	r2, [r7, #12]
9000680a:	430a      	orrs	r2, r1
9000680c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000680e:	687b      	ldr	r3, [r7, #4]
90006810:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90006814:	021b      	lsls	r3, r3, #8
90006816:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90006818:	687b      	ldr	r3, [r7, #4]
9000681a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
9000681e:	041b      	lsls	r3, r3, #16
90006820:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90006822:	687b      	ldr	r3, [r7, #4]
90006824:	681b      	ldr	r3, [r3, #0]
90006826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
90006828:	687b      	ldr	r3, [r7, #4]
9000682a:	681b      	ldr	r3, [r3, #0]
9000682c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90006830:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006832:	687b      	ldr	r3, [r7, #4]
90006834:	681b      	ldr	r3, [r3, #0]
90006836:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
90006838:	68ba      	ldr	r2, [r7, #8]
9000683a:	68fb      	ldr	r3, [r7, #12]
9000683c:	4313      	orrs	r3, r2
9000683e:	687a      	ldr	r2, [r7, #4]
90006840:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90006844:	431a      	orrs	r2, r3
90006846:	687b      	ldr	r3, [r7, #4]
90006848:	681b      	ldr	r3, [r3, #0]
9000684a:	430a      	orrs	r2, r1
9000684c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000684e:	687b      	ldr	r3, [r7, #4]
90006850:	681b      	ldr	r3, [r3, #0]
90006852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006854:	687b      	ldr	r3, [r7, #4]
90006856:	681b      	ldr	r3, [r3, #0]
90006858:	f042 0206 	orr.w	r2, r2, #6
9000685c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
9000685e:	687b      	ldr	r3, [r7, #4]
90006860:	681b      	ldr	r3, [r3, #0]
90006862:	699a      	ldr	r2, [r3, #24]
90006864:	687b      	ldr	r3, [r7, #4]
90006866:	681b      	ldr	r3, [r3, #0]
90006868:	f042 0201 	orr.w	r2, r2, #1
9000686c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000686e:	687b      	ldr	r3, [r7, #4]
90006870:	2200      	movs	r2, #0
90006872:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90006876:	687b      	ldr	r3, [r7, #4]
90006878:	2201      	movs	r2, #1
9000687a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
9000687e:	2300      	movs	r3, #0
}
90006880:	4618      	mov	r0, r3
90006882:	3710      	adds	r7, #16
90006884:	46bd      	mov	sp, r7
90006886:	bd80      	pop	{r7, pc}

90006888 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006888:	b480      	push	{r7}
9000688a:	b083      	sub	sp, #12
9000688c:	af00      	add	r7, sp, #0
9000688e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006890:	bf00      	nop
90006892:	370c      	adds	r7, #12
90006894:	46bd      	mov	sp, r7
90006896:	f85d 7b04 	ldr.w	r7, [sp], #4
9000689a:	4770      	bx	lr

9000689c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000689c:	b5b0      	push	{r4, r5, r7, lr}
9000689e:	b084      	sub	sp, #16
900068a0:	af00      	add	r7, sp, #0
900068a2:	60f8      	str	r0, [r7, #12]
900068a4:	60b9      	str	r1, [r7, #8]
900068a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
900068a8:	68fb      	ldr	r3, [r7, #12]
900068aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
900068ae:	2b01      	cmp	r3, #1
900068b0:	d101      	bne.n	900068b6 <HAL_LTDC_ConfigLayer+0x1a>
900068b2:	2302      	movs	r3, #2
900068b4:	e02c      	b.n	90006910 <HAL_LTDC_ConfigLayer+0x74>
900068b6:	68fb      	ldr	r3, [r7, #12]
900068b8:	2201      	movs	r2, #1
900068ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900068be:	68fb      	ldr	r3, [r7, #12]
900068c0:	2202      	movs	r2, #2
900068c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900068c6:	68fa      	ldr	r2, [r7, #12]
900068c8:	687b      	ldr	r3, [r7, #4]
900068ca:	2134      	movs	r1, #52	@ 0x34
900068cc:	fb01 f303 	mul.w	r3, r1, r3
900068d0:	4413      	add	r3, r2
900068d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
900068d6:	68bb      	ldr	r3, [r7, #8]
900068d8:	4614      	mov	r4, r2
900068da:	461d      	mov	r5, r3
900068dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900068de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900068e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900068e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900068e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900068e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900068e8:	682b      	ldr	r3, [r5, #0]
900068ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900068ec:	687a      	ldr	r2, [r7, #4]
900068ee:	68b9      	ldr	r1, [r7, #8]
900068f0:	68f8      	ldr	r0, [r7, #12]
900068f2:	f000 f811 	bl	90006918 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900068f6:	68fb      	ldr	r3, [r7, #12]
900068f8:	681b      	ldr	r3, [r3, #0]
900068fa:	2201      	movs	r2, #1
900068fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900068fe:	68fb      	ldr	r3, [r7, #12]
90006900:	2201      	movs	r2, #1
90006902:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90006906:	68fb      	ldr	r3, [r7, #12]
90006908:	2200      	movs	r2, #0
9000690a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
9000690e:	2300      	movs	r3, #0
}
90006910:	4618      	mov	r0, r3
90006912:	3710      	adds	r7, #16
90006914:	46bd      	mov	sp, r7
90006916:	bdb0      	pop	{r4, r5, r7, pc}

90006918 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006918:	b480      	push	{r7}
9000691a:	b089      	sub	sp, #36	@ 0x24
9000691c:	af00      	add	r7, sp, #0
9000691e:	60f8      	str	r0, [r7, #12]
90006920:	60b9      	str	r1, [r7, #8]
90006922:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90006924:	68bb      	ldr	r3, [r7, #8]
90006926:	685a      	ldr	r2, [r3, #4]
90006928:	68fb      	ldr	r3, [r7, #12]
9000692a:	681b      	ldr	r3, [r3, #0]
9000692c:	68db      	ldr	r3, [r3, #12]
9000692e:	0c1b      	lsrs	r3, r3, #16
90006930:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006934:	4413      	add	r3, r2
90006936:	041b      	lsls	r3, r3, #16
90006938:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000693a:	68fb      	ldr	r3, [r7, #12]
9000693c:	681b      	ldr	r3, [r3, #0]
9000693e:	461a      	mov	r2, r3
90006940:	687b      	ldr	r3, [r7, #4]
90006942:	01db      	lsls	r3, r3, #7
90006944:	4413      	add	r3, r2
90006946:	3384      	adds	r3, #132	@ 0x84
90006948:	685b      	ldr	r3, [r3, #4]
9000694a:	68fa      	ldr	r2, [r7, #12]
9000694c:	6812      	ldr	r2, [r2, #0]
9000694e:	4611      	mov	r1, r2
90006950:	687a      	ldr	r2, [r7, #4]
90006952:	01d2      	lsls	r2, r2, #7
90006954:	440a      	add	r2, r1
90006956:	3284      	adds	r2, #132	@ 0x84
90006958:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
9000695c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000695e:	68bb      	ldr	r3, [r7, #8]
90006960:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006962:	68fb      	ldr	r3, [r7, #12]
90006964:	681b      	ldr	r3, [r3, #0]
90006966:	68db      	ldr	r3, [r3, #12]
90006968:	0c1b      	lsrs	r3, r3, #16
9000696a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000696e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006970:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006972:	68fb      	ldr	r3, [r7, #12]
90006974:	681b      	ldr	r3, [r3, #0]
90006976:	4619      	mov	r1, r3
90006978:	687b      	ldr	r3, [r7, #4]
9000697a:	01db      	lsls	r3, r3, #7
9000697c:	440b      	add	r3, r1
9000697e:	3384      	adds	r3, #132	@ 0x84
90006980:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006982:	69fb      	ldr	r3, [r7, #28]
90006984:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006986:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006988:	68bb      	ldr	r3, [r7, #8]
9000698a:	68da      	ldr	r2, [r3, #12]
9000698c:	68fb      	ldr	r3, [r7, #12]
9000698e:	681b      	ldr	r3, [r3, #0]
90006990:	68db      	ldr	r3, [r3, #12]
90006992:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006996:	4413      	add	r3, r2
90006998:	041b      	lsls	r3, r3, #16
9000699a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000699c:	68fb      	ldr	r3, [r7, #12]
9000699e:	681b      	ldr	r3, [r3, #0]
900069a0:	461a      	mov	r2, r3
900069a2:	687b      	ldr	r3, [r7, #4]
900069a4:	01db      	lsls	r3, r3, #7
900069a6:	4413      	add	r3, r2
900069a8:	3384      	adds	r3, #132	@ 0x84
900069aa:	689b      	ldr	r3, [r3, #8]
900069ac:	68fa      	ldr	r2, [r7, #12]
900069ae:	6812      	ldr	r2, [r2, #0]
900069b0:	4611      	mov	r1, r2
900069b2:	687a      	ldr	r2, [r7, #4]
900069b4:	01d2      	lsls	r2, r2, #7
900069b6:	440a      	add	r2, r1
900069b8:	3284      	adds	r2, #132	@ 0x84
900069ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
900069be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900069c0:	68bb      	ldr	r3, [r7, #8]
900069c2:	689a      	ldr	r2, [r3, #8]
900069c4:	68fb      	ldr	r3, [r7, #12]
900069c6:	681b      	ldr	r3, [r3, #0]
900069c8:	68db      	ldr	r3, [r3, #12]
900069ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
900069ce:	4413      	add	r3, r2
900069d0:	1c5a      	adds	r2, r3, #1
900069d2:	68fb      	ldr	r3, [r7, #12]
900069d4:	681b      	ldr	r3, [r3, #0]
900069d6:	4619      	mov	r1, r3
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	01db      	lsls	r3, r3, #7
900069dc:	440b      	add	r3, r1
900069de:	3384      	adds	r3, #132	@ 0x84
900069e0:	4619      	mov	r1, r3
900069e2:	69fb      	ldr	r3, [r7, #28]
900069e4:	4313      	orrs	r3, r2
900069e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900069e8:	68fb      	ldr	r3, [r7, #12]
900069ea:	681b      	ldr	r3, [r3, #0]
900069ec:	461a      	mov	r2, r3
900069ee:	687b      	ldr	r3, [r7, #4]
900069f0:	01db      	lsls	r3, r3, #7
900069f2:	4413      	add	r3, r2
900069f4:	3384      	adds	r3, #132	@ 0x84
900069f6:	691b      	ldr	r3, [r3, #16]
900069f8:	68fa      	ldr	r2, [r7, #12]
900069fa:	6812      	ldr	r2, [r2, #0]
900069fc:	4611      	mov	r1, r2
900069fe:	687a      	ldr	r2, [r7, #4]
90006a00:	01d2      	lsls	r2, r2, #7
90006a02:	440a      	add	r2, r1
90006a04:	3284      	adds	r2, #132	@ 0x84
90006a06:	f023 0307 	bic.w	r3, r3, #7
90006a0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90006a0c:	68fb      	ldr	r3, [r7, #12]
90006a0e:	681b      	ldr	r3, [r3, #0]
90006a10:	461a      	mov	r2, r3
90006a12:	687b      	ldr	r3, [r7, #4]
90006a14:	01db      	lsls	r3, r3, #7
90006a16:	4413      	add	r3, r2
90006a18:	3384      	adds	r3, #132	@ 0x84
90006a1a:	461a      	mov	r2, r3
90006a1c:	68bb      	ldr	r3, [r7, #8]
90006a1e:	691b      	ldr	r3, [r3, #16]
90006a20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90006a22:	68bb      	ldr	r3, [r7, #8]
90006a24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
90006a28:	021b      	lsls	r3, r3, #8
90006a2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90006a2c:	68bb      	ldr	r3, [r7, #8]
90006a2e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
90006a32:	041b      	lsls	r3, r3, #16
90006a34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90006a36:	68bb      	ldr	r3, [r7, #8]
90006a38:	699b      	ldr	r3, [r3, #24]
90006a3a:	061b      	lsls	r3, r3, #24
90006a3c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
90006a3e:	68bb      	ldr	r3, [r7, #8]
90006a40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90006a44:	461a      	mov	r2, r3
90006a46:	69fb      	ldr	r3, [r7, #28]
90006a48:	431a      	orrs	r2, r3
90006a4a:	69bb      	ldr	r3, [r7, #24]
90006a4c:	431a      	orrs	r2, r3
90006a4e:	68fb      	ldr	r3, [r7, #12]
90006a50:	681b      	ldr	r3, [r3, #0]
90006a52:	4619      	mov	r1, r3
90006a54:	687b      	ldr	r3, [r7, #4]
90006a56:	01db      	lsls	r3, r3, #7
90006a58:	440b      	add	r3, r1
90006a5a:	3384      	adds	r3, #132	@ 0x84
90006a5c:	4619      	mov	r1, r3
90006a5e:	697b      	ldr	r3, [r7, #20]
90006a60:	4313      	orrs	r3, r2
90006a62:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006a64:	68fb      	ldr	r3, [r7, #12]
90006a66:	681b      	ldr	r3, [r3, #0]
90006a68:	461a      	mov	r2, r3
90006a6a:	687b      	ldr	r3, [r7, #4]
90006a6c:	01db      	lsls	r3, r3, #7
90006a6e:	4413      	add	r3, r2
90006a70:	3384      	adds	r3, #132	@ 0x84
90006a72:	695b      	ldr	r3, [r3, #20]
90006a74:	68fa      	ldr	r2, [r7, #12]
90006a76:	6812      	ldr	r2, [r2, #0]
90006a78:	4611      	mov	r1, r2
90006a7a:	687a      	ldr	r2, [r7, #4]
90006a7c:	01d2      	lsls	r2, r2, #7
90006a7e:	440a      	add	r2, r1
90006a80:	3284      	adds	r2, #132	@ 0x84
90006a82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90006a86:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006a88:	68fb      	ldr	r3, [r7, #12]
90006a8a:	681b      	ldr	r3, [r3, #0]
90006a8c:	461a      	mov	r2, r3
90006a8e:	687b      	ldr	r3, [r7, #4]
90006a90:	01db      	lsls	r3, r3, #7
90006a92:	4413      	add	r3, r2
90006a94:	3384      	adds	r3, #132	@ 0x84
90006a96:	461a      	mov	r2, r3
90006a98:	68bb      	ldr	r3, [r7, #8]
90006a9a:	695b      	ldr	r3, [r3, #20]
90006a9c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90006a9e:	68fb      	ldr	r3, [r7, #12]
90006aa0:	681b      	ldr	r3, [r3, #0]
90006aa2:	461a      	mov	r2, r3
90006aa4:	687b      	ldr	r3, [r7, #4]
90006aa6:	01db      	lsls	r3, r3, #7
90006aa8:	4413      	add	r3, r2
90006aaa:	3384      	adds	r3, #132	@ 0x84
90006aac:	69da      	ldr	r2, [r3, #28]
90006aae:	68fb      	ldr	r3, [r7, #12]
90006ab0:	681b      	ldr	r3, [r3, #0]
90006ab2:	4619      	mov	r1, r3
90006ab4:	687b      	ldr	r3, [r7, #4]
90006ab6:	01db      	lsls	r3, r3, #7
90006ab8:	440b      	add	r3, r1
90006aba:	3384      	adds	r3, #132	@ 0x84
90006abc:	4619      	mov	r1, r3
90006abe:	4b4f      	ldr	r3, [pc, #316]	@ (90006bfc <LTDC_SetConfig+0x2e4>)
90006ac0:	4013      	ands	r3, r2
90006ac2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90006ac4:	68bb      	ldr	r3, [r7, #8]
90006ac6:	69da      	ldr	r2, [r3, #28]
90006ac8:	68bb      	ldr	r3, [r7, #8]
90006aca:	6a1b      	ldr	r3, [r3, #32]
90006acc:	68f9      	ldr	r1, [r7, #12]
90006ace:	6809      	ldr	r1, [r1, #0]
90006ad0:	4608      	mov	r0, r1
90006ad2:	6879      	ldr	r1, [r7, #4]
90006ad4:	01c9      	lsls	r1, r1, #7
90006ad6:	4401      	add	r1, r0
90006ad8:	3184      	adds	r1, #132	@ 0x84
90006ada:	4313      	orrs	r3, r2
90006adc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90006ade:	68fb      	ldr	r3, [r7, #12]
90006ae0:	681b      	ldr	r3, [r3, #0]
90006ae2:	461a      	mov	r2, r3
90006ae4:	687b      	ldr	r3, [r7, #4]
90006ae6:	01db      	lsls	r3, r3, #7
90006ae8:	4413      	add	r3, r2
90006aea:	3384      	adds	r3, #132	@ 0x84
90006aec:	461a      	mov	r2, r3
90006aee:	68bb      	ldr	r3, [r7, #8]
90006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006af2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006af4:	68bb      	ldr	r3, [r7, #8]
90006af6:	691b      	ldr	r3, [r3, #16]
90006af8:	2b00      	cmp	r3, #0
90006afa:	d102      	bne.n	90006b02 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90006afc:	2304      	movs	r3, #4
90006afe:	61fb      	str	r3, [r7, #28]
90006b00:	e01b      	b.n	90006b3a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006b02:	68bb      	ldr	r3, [r7, #8]
90006b04:	691b      	ldr	r3, [r3, #16]
90006b06:	2b01      	cmp	r3, #1
90006b08:	d102      	bne.n	90006b10 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
90006b0a:	2303      	movs	r3, #3
90006b0c:	61fb      	str	r3, [r7, #28]
90006b0e:	e014      	b.n	90006b3a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006b10:	68bb      	ldr	r3, [r7, #8]
90006b12:	691b      	ldr	r3, [r3, #16]
90006b14:	2b04      	cmp	r3, #4
90006b16:	d00b      	beq.n	90006b30 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006b18:	68bb      	ldr	r3, [r7, #8]
90006b1a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006b1c:	2b02      	cmp	r3, #2
90006b1e:	d007      	beq.n	90006b30 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006b20:	68bb      	ldr	r3, [r7, #8]
90006b22:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006b24:	2b03      	cmp	r3, #3
90006b26:	d003      	beq.n	90006b30 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90006b28:	68bb      	ldr	r3, [r7, #8]
90006b2a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006b2c:	2b07      	cmp	r3, #7
90006b2e:	d102      	bne.n	90006b36 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90006b30:	2302      	movs	r3, #2
90006b32:	61fb      	str	r3, [r7, #28]
90006b34:	e001      	b.n	90006b3a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
90006b36:	2301      	movs	r3, #1
90006b38:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90006b3a:	68fb      	ldr	r3, [r7, #12]
90006b3c:	681b      	ldr	r3, [r3, #0]
90006b3e:	461a      	mov	r2, r3
90006b40:	687b      	ldr	r3, [r7, #4]
90006b42:	01db      	lsls	r3, r3, #7
90006b44:	4413      	add	r3, r2
90006b46:	3384      	adds	r3, #132	@ 0x84
90006b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006b4a:	68fa      	ldr	r2, [r7, #12]
90006b4c:	6812      	ldr	r2, [r2, #0]
90006b4e:	4611      	mov	r1, r2
90006b50:	687a      	ldr	r2, [r7, #4]
90006b52:	01d2      	lsls	r2, r2, #7
90006b54:	440a      	add	r2, r1
90006b56:	3284      	adds	r2, #132	@ 0x84
90006b58:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90006b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006b5e:	68bb      	ldr	r3, [r7, #8]
90006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006b62:	69fa      	ldr	r2, [r7, #28]
90006b64:	fb02 f303 	mul.w	r3, r2, r3
90006b68:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90006b6a:	68bb      	ldr	r3, [r7, #8]
90006b6c:	6859      	ldr	r1, [r3, #4]
90006b6e:	68bb      	ldr	r3, [r7, #8]
90006b70:	681b      	ldr	r3, [r3, #0]
90006b72:	1acb      	subs	r3, r1, r3
90006b74:	69f9      	ldr	r1, [r7, #28]
90006b76:	fb01 f303 	mul.w	r3, r1, r3
90006b7a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006b7c:	68f9      	ldr	r1, [r7, #12]
90006b7e:	6809      	ldr	r1, [r1, #0]
90006b80:	4608      	mov	r0, r1
90006b82:	6879      	ldr	r1, [r7, #4]
90006b84:	01c9      	lsls	r1, r1, #7
90006b86:	4401      	add	r1, r0
90006b88:	3184      	adds	r1, #132	@ 0x84
90006b8a:	4313      	orrs	r3, r2
90006b8c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90006b8e:	68fb      	ldr	r3, [r7, #12]
90006b90:	681b      	ldr	r3, [r3, #0]
90006b92:	461a      	mov	r2, r3
90006b94:	687b      	ldr	r3, [r7, #4]
90006b96:	01db      	lsls	r3, r3, #7
90006b98:	4413      	add	r3, r2
90006b9a:	3384      	adds	r3, #132	@ 0x84
90006b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90006b9e:	68fb      	ldr	r3, [r7, #12]
90006ba0:	681b      	ldr	r3, [r3, #0]
90006ba2:	4619      	mov	r1, r3
90006ba4:	687b      	ldr	r3, [r7, #4]
90006ba6:	01db      	lsls	r3, r3, #7
90006ba8:	440b      	add	r3, r1
90006baa:	3384      	adds	r3, #132	@ 0x84
90006bac:	4619      	mov	r1, r3
90006bae:	4b14      	ldr	r3, [pc, #80]	@ (90006c00 <LTDC_SetConfig+0x2e8>)
90006bb0:	4013      	ands	r3, r2
90006bb2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90006bb4:	68fb      	ldr	r3, [r7, #12]
90006bb6:	681b      	ldr	r3, [r3, #0]
90006bb8:	461a      	mov	r2, r3
90006bba:	687b      	ldr	r3, [r7, #4]
90006bbc:	01db      	lsls	r3, r3, #7
90006bbe:	4413      	add	r3, r2
90006bc0:	3384      	adds	r3, #132	@ 0x84
90006bc2:	461a      	mov	r2, r3
90006bc4:	68bb      	ldr	r3, [r7, #8]
90006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006bc8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90006bca:	68fb      	ldr	r3, [r7, #12]
90006bcc:	681b      	ldr	r3, [r3, #0]
90006bce:	461a      	mov	r2, r3
90006bd0:	687b      	ldr	r3, [r7, #4]
90006bd2:	01db      	lsls	r3, r3, #7
90006bd4:	4413      	add	r3, r2
90006bd6:	3384      	adds	r3, #132	@ 0x84
90006bd8:	681b      	ldr	r3, [r3, #0]
90006bda:	68fa      	ldr	r2, [r7, #12]
90006bdc:	6812      	ldr	r2, [r2, #0]
90006bde:	4611      	mov	r1, r2
90006be0:	687a      	ldr	r2, [r7, #4]
90006be2:	01d2      	lsls	r2, r2, #7
90006be4:	440a      	add	r2, r1
90006be6:	3284      	adds	r2, #132	@ 0x84
90006be8:	f043 0301 	orr.w	r3, r3, #1
90006bec:	6013      	str	r3, [r2, #0]
}
90006bee:	bf00      	nop
90006bf0:	3724      	adds	r7, #36	@ 0x24
90006bf2:	46bd      	mov	sp, r7
90006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
90006bf8:	4770      	bx	lr
90006bfa:	bf00      	nop
90006bfc:	fffff8f8 	.word	0xfffff8f8
90006c00:	fffff800 	.word	0xfffff800

90006c04 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006c04:	b580      	push	{r7, lr}
90006c06:	b084      	sub	sp, #16
90006c08:	af00      	add	r7, sp, #0
90006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006c0c:	f7fc fc8e 	bl	9000352c <HAL_GetTick>
90006c10:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006c12:	687b      	ldr	r3, [r7, #4]
90006c14:	2b00      	cmp	r3, #0
90006c16:	d101      	bne.n	90006c1c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
90006c18:	2301      	movs	r3, #1
90006c1a:	e03b      	b.n	90006c94 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006c1c:	687b      	ldr	r3, [r7, #4]
90006c1e:	2200      	movs	r2, #0
90006c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006c24:	687b      	ldr	r3, [r7, #4]
90006c26:	2202      	movs	r2, #2
90006c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006c2c:	687b      	ldr	r3, [r7, #4]
90006c2e:	681b      	ldr	r3, [r3, #0]
90006c30:	68da      	ldr	r2, [r3, #12]
90006c32:	687b      	ldr	r3, [r7, #4]
90006c34:	681b      	ldr	r3, [r3, #0]
90006c36:	f022 0201 	bic.w	r2, r2, #1
90006c3a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006c3c:	e00f      	b.n	90006c5e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006c3e:	f7fc fc75 	bl	9000352c <HAL_GetTick>
90006c42:	4602      	mov	r2, r0
90006c44:	68fb      	ldr	r3, [r7, #12]
90006c46:	1ad3      	subs	r3, r2, r3
90006c48:	2b05      	cmp	r3, #5
90006c4a:	d908      	bls.n	90006c5e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006c4c:	687b      	ldr	r3, [r7, #4]
90006c4e:	2240      	movs	r2, #64	@ 0x40
90006c50:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006c52:	687b      	ldr	r3, [r7, #4]
90006c54:	2203      	movs	r2, #3
90006c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
90006c5a:	2301      	movs	r3, #1
90006c5c:	e01a      	b.n	90006c94 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006c5e:	687b      	ldr	r3, [r7, #4]
90006c60:	681b      	ldr	r3, [r3, #0]
90006c62:	68db      	ldr	r3, [r3, #12]
90006c64:	f003 0301 	and.w	r3, r3, #1
90006c68:	2b00      	cmp	r3, #0
90006c6a:	d1e8      	bne.n	90006c3e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006c6c:	6878      	ldr	r0, [r7, #4]
90006c6e:	f000 f86d 	bl	90006d4c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006c72:	687b      	ldr	r3, [r7, #4]
90006c74:	2200      	movs	r2, #0
90006c76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006c78:	687b      	ldr	r3, [r7, #4]
90006c7a:	2200      	movs	r2, #0
90006c7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006c7e:	687b      	ldr	r3, [r7, #4]
90006c80:	2200      	movs	r2, #0
90006c82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006c84:	687b      	ldr	r3, [r7, #4]
90006c86:	2200      	movs	r2, #0
90006c88:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
90006c8a:	687b      	ldr	r3, [r7, #4]
90006c8c:	2201      	movs	r2, #1
90006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006c92:	2300      	movs	r3, #0
}
90006c94:	4618      	mov	r0, r3
90006c96:	3710      	adds	r7, #16
90006c98:	46bd      	mov	sp, r7
90006c9a:	bd80      	pop	{r7, pc}

90006c9c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
90006c9c:	b480      	push	{r7}
90006c9e:	b083      	sub	sp, #12
90006ca0:	af00      	add	r7, sp, #0
90006ca2:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006ca4:	687b      	ldr	r3, [r7, #4]
90006ca6:	2b00      	cmp	r3, #0
90006ca8:	d101      	bne.n	90006cae <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
90006caa:	2301      	movs	r3, #1
90006cac:	e048      	b.n	90006d40 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
90006cae:	687b      	ldr	r3, [r7, #4]
90006cb0:	681b      	ldr	r3, [r3, #0]
90006cb2:	68da      	ldr	r2, [r3, #12]
90006cb4:	687b      	ldr	r3, [r7, #4]
90006cb6:	681b      	ldr	r3, [r3, #0]
90006cb8:	f022 0201 	bic.w	r2, r2, #1
90006cbc:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
90006cbe:	687b      	ldr	r3, [r7, #4]
90006cc0:	681b      	ldr	r3, [r3, #0]
90006cc2:	2200      	movs	r2, #0
90006cc4:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90006cc6:	687b      	ldr	r3, [r7, #4]
90006cc8:	681b      	ldr	r3, [r3, #0]
90006cca:	2200      	movs	r2, #0
90006ccc:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90006cce:	687b      	ldr	r3, [r7, #4]
90006cd0:	681b      	ldr	r3, [r3, #0]
90006cd2:	2200      	movs	r2, #0
90006cd4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006cd6:	687b      	ldr	r3, [r7, #4]
90006cd8:	681b      	ldr	r3, [r3, #0]
90006cda:	2200      	movs	r2, #0
90006cdc:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006cde:	687b      	ldr	r3, [r7, #4]
90006ce0:	681b      	ldr	r3, [r3, #0]
90006ce2:	2200      	movs	r2, #0
90006ce4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006ce6:	687b      	ldr	r3, [r7, #4]
90006ce8:	681b      	ldr	r3, [r3, #0]
90006cea:	2200      	movs	r2, #0
90006cec:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006cee:	687b      	ldr	r3, [r7, #4]
90006cf0:	681b      	ldr	r3, [r3, #0]
90006cf2:	2200      	movs	r2, #0
90006cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90006cf6:	687b      	ldr	r3, [r7, #4]
90006cf8:	681b      	ldr	r3, [r3, #0]
90006cfa:	2200      	movs	r2, #0
90006cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006cfe:	687b      	ldr	r3, [r7, #4]
90006d00:	681b      	ldr	r3, [r3, #0]
90006d02:	2200      	movs	r2, #0
90006d04:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006d06:	687b      	ldr	r3, [r7, #4]
90006d08:	681b      	ldr	r3, [r3, #0]
90006d0a:	2200      	movs	r2, #0
90006d0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006d0e:	687b      	ldr	r3, [r7, #4]
90006d10:	681b      	ldr	r3, [r3, #0]
90006d12:	221f      	movs	r2, #31
90006d14:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006d16:	687b      	ldr	r3, [r7, #4]
90006d18:	2200      	movs	r2, #0
90006d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006d1c:	687b      	ldr	r3, [r7, #4]
90006d1e:	2200      	movs	r2, #0
90006d20:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006d22:	687b      	ldr	r3, [r7, #4]
90006d24:	2200      	movs	r2, #0
90006d26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006d28:	687b      	ldr	r3, [r7, #4]
90006d2a:	2200      	movs	r2, #0
90006d2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006d2e:	687b      	ldr	r3, [r7, #4]
90006d30:	2200      	movs	r2, #0
90006d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006d36:	687b      	ldr	r3, [r7, #4]
90006d38:	2200      	movs	r2, #0
90006d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006d3e:	2300      	movs	r3, #0
}
90006d40:	4618      	mov	r0, r3
90006d42:	370c      	adds	r7, #12
90006d44:	46bd      	mov	sp, r7
90006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
90006d4a:	4770      	bx	lr

90006d4c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006d4c:	b480      	push	{r7}
90006d4e:	b085      	sub	sp, #20
90006d50:	af00      	add	r7, sp, #0
90006d52:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006d54:	687b      	ldr	r3, [r7, #4]
90006d56:	68d9      	ldr	r1, [r3, #12]
90006d58:	687b      	ldr	r3, [r7, #4]
90006d5a:	691a      	ldr	r2, [r3, #16]
90006d5c:	687b      	ldr	r3, [r7, #4]
90006d5e:	681b      	ldr	r3, [r3, #0]
90006d60:	430a      	orrs	r2, r1
90006d62:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006d64:	687b      	ldr	r3, [r7, #4]
90006d66:	695a      	ldr	r2, [r3, #20]
90006d68:	687b      	ldr	r3, [r7, #4]
90006d6a:	699b      	ldr	r3, [r3, #24]
90006d6c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006d6e:	687b      	ldr	r3, [r7, #4]
90006d70:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006d72:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006d74:	687b      	ldr	r3, [r7, #4]
90006d76:	6a1b      	ldr	r3, [r3, #32]
90006d78:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006d7a:	687b      	ldr	r3, [r7, #4]
90006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006d7e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006d80:	687b      	ldr	r3, [r7, #4]
90006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006d84:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006d86:	687b      	ldr	r3, [r7, #4]
90006d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006d8a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006d8c:	687b      	ldr	r3, [r7, #4]
90006d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006d90:	3b01      	subs	r3, #1
90006d92:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006d94:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006d98:	687b      	ldr	r3, [r7, #4]
90006d9a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006d9c:	687b      	ldr	r3, [r7, #4]
90006d9e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006da0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006da2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006da4:	687b      	ldr	r3, [r7, #4]
90006da6:	685b      	ldr	r3, [r3, #4]
90006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006dac:	d107      	bne.n	90006dbe <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006dae:	687b      	ldr	r3, [r7, #4]
90006db0:	681b      	ldr	r3, [r3, #0]
90006db2:	691a      	ldr	r2, [r3, #16]
90006db4:	687b      	ldr	r3, [r7, #4]
90006db6:	681b      	ldr	r3, [r3, #0]
90006db8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006dbc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006dbe:	687b      	ldr	r3, [r7, #4]
90006dc0:	681b      	ldr	r3, [r3, #0]
90006dc2:	2200      	movs	r2, #0
90006dc4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006dc6:	687b      	ldr	r3, [r7, #4]
90006dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006dca:	2b00      	cmp	r3, #0
90006dcc:	da11      	bge.n	90006df2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006dce:	687b      	ldr	r3, [r7, #4]
90006dd0:	681b      	ldr	r3, [r3, #0]
90006dd2:	695a      	ldr	r2, [r3, #20]
90006dd4:	687b      	ldr	r3, [r7, #4]
90006dd6:	681b      	ldr	r3, [r3, #0]
90006dd8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006ddc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006dde:	687b      	ldr	r3, [r7, #4]
90006de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006de2:	425b      	negs	r3, r3
90006de4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006de6:	687b      	ldr	r3, [r7, #4]
90006de8:	681b      	ldr	r3, [r3, #0]
90006dea:	68fa      	ldr	r2, [r7, #12]
90006dec:	b292      	uxth	r2, r2
90006dee:	621a      	str	r2, [r3, #32]
90006df0:	e006      	b.n	90006e00 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006df2:	687b      	ldr	r3, [r7, #4]
90006df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006df6:	461a      	mov	r2, r3
90006df8:	687b      	ldr	r3, [r7, #4]
90006dfa:	681b      	ldr	r3, [r3, #0]
90006dfc:	b292      	uxth	r2, r2
90006dfe:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006e00:	687b      	ldr	r3, [r7, #4]
90006e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006e04:	2b00      	cmp	r3, #0
90006e06:	da15      	bge.n	90006e34 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006e08:	687b      	ldr	r3, [r7, #4]
90006e0a:	681b      	ldr	r3, [r3, #0]
90006e0c:	695a      	ldr	r2, [r3, #20]
90006e0e:	687b      	ldr	r3, [r7, #4]
90006e10:	681b      	ldr	r3, [r3, #0]
90006e12:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006e16:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006e18:	687b      	ldr	r3, [r7, #4]
90006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006e1c:	425b      	negs	r3, r3
90006e1e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006e20:	687b      	ldr	r3, [r7, #4]
90006e22:	681b      	ldr	r3, [r3, #0]
90006e24:	6a19      	ldr	r1, [r3, #32]
90006e26:	68fb      	ldr	r3, [r7, #12]
90006e28:	041a      	lsls	r2, r3, #16
90006e2a:	687b      	ldr	r3, [r7, #4]
90006e2c:	681b      	ldr	r3, [r3, #0]
90006e2e:	430a      	orrs	r2, r1
90006e30:	621a      	str	r2, [r3, #32]
90006e32:	e009      	b.n	90006e48 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006e34:	687b      	ldr	r3, [r7, #4]
90006e36:	681b      	ldr	r3, [r3, #0]
90006e38:	6a19      	ldr	r1, [r3, #32]
90006e3a:	687b      	ldr	r3, [r7, #4]
90006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006e3e:	041a      	lsls	r2, r3, #16
90006e40:	687b      	ldr	r3, [r7, #4]
90006e42:	681b      	ldr	r3, [r3, #0]
90006e44:	430a      	orrs	r2, r1
90006e46:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006e48:	687b      	ldr	r3, [r7, #4]
90006e4a:	685b      	ldr	r3, [r3, #4]
90006e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006e50:	d006      	beq.n	90006e60 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006e52:	687b      	ldr	r3, [r7, #4]
90006e54:	685a      	ldr	r2, [r3, #4]
90006e56:	687b      	ldr	r3, [r7, #4]
90006e58:	681b      	ldr	r3, [r3, #0]
90006e5a:	b2d2      	uxtb	r2, r2
90006e5c:	629a      	str	r2, [r3, #40]	@ 0x28
90006e5e:	e003      	b.n	90006e68 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006e60:	687b      	ldr	r3, [r7, #4]
90006e62:	681b      	ldr	r3, [r3, #0]
90006e64:	2200      	movs	r2, #0
90006e66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006e68:	687b      	ldr	r3, [r7, #4]
90006e6a:	681b      	ldr	r3, [r3, #0]
90006e6c:	2200      	movs	r2, #0
90006e6e:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006e70:	bf00      	nop
90006e72:	3714      	adds	r7, #20
90006e74:	46bd      	mov	sp, r7
90006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
90006e7a:	4770      	bx	lr

90006e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006e7c:	b580      	push	{r7, lr}
90006e7e:	b08c      	sub	sp, #48	@ 0x30
90006e80:	af00      	add	r7, sp, #0
90006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006e84:	687b      	ldr	r3, [r7, #4]
90006e86:	2b00      	cmp	r3, #0
90006e88:	d102      	bne.n	90006e90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006e8a:	2301      	movs	r3, #1
90006e8c:	f000 bc48 	b.w	90007720 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006e90:	687b      	ldr	r3, [r7, #4]
90006e92:	681b      	ldr	r3, [r3, #0]
90006e94:	f003 0301 	and.w	r3, r3, #1
90006e98:	2b00      	cmp	r3, #0
90006e9a:	f000 8088 	beq.w	90006fae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006e9e:	4b99      	ldr	r3, [pc, #612]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006ea0:	691b      	ldr	r3, [r3, #16]
90006ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006ea8:	4b96      	ldr	r3, [pc, #600]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006eb0:	2b10      	cmp	r3, #16
90006eb2:	d007      	beq.n	90006ec4 <HAL_RCC_OscConfig+0x48>
90006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006eb6:	2b18      	cmp	r3, #24
90006eb8:	d111      	bne.n	90006ede <HAL_RCC_OscConfig+0x62>
90006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006ebc:	f003 0303 	and.w	r3, r3, #3
90006ec0:	2b02      	cmp	r3, #2
90006ec2:	d10c      	bne.n	90006ede <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006ec4:	4b8f      	ldr	r3, [pc, #572]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006ec6:	681b      	ldr	r3, [r3, #0]
90006ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006ecc:	2b00      	cmp	r3, #0
90006ece:	d06d      	beq.n	90006fac <HAL_RCC_OscConfig+0x130>
90006ed0:	687b      	ldr	r3, [r7, #4]
90006ed2:	685b      	ldr	r3, [r3, #4]
90006ed4:	2b00      	cmp	r3, #0
90006ed6:	d169      	bne.n	90006fac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006ed8:	2301      	movs	r3, #1
90006eda:	f000 bc21 	b.w	90007720 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006ede:	687b      	ldr	r3, [r7, #4]
90006ee0:	685b      	ldr	r3, [r3, #4]
90006ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006ee6:	d106      	bne.n	90006ef6 <HAL_RCC_OscConfig+0x7a>
90006ee8:	4b86      	ldr	r3, [pc, #536]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006eea:	681b      	ldr	r3, [r3, #0]
90006eec:	4a85      	ldr	r2, [pc, #532]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006ef2:	6013      	str	r3, [r2, #0]
90006ef4:	e02e      	b.n	90006f54 <HAL_RCC_OscConfig+0xd8>
90006ef6:	687b      	ldr	r3, [r7, #4]
90006ef8:	685b      	ldr	r3, [r3, #4]
90006efa:	2b00      	cmp	r3, #0
90006efc:	d10c      	bne.n	90006f18 <HAL_RCC_OscConfig+0x9c>
90006efe:	4b81      	ldr	r3, [pc, #516]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f00:	681b      	ldr	r3, [r3, #0]
90006f02:	4a80      	ldr	r2, [pc, #512]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006f08:	6013      	str	r3, [r2, #0]
90006f0a:	4b7e      	ldr	r3, [pc, #504]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f0c:	681b      	ldr	r3, [r3, #0]
90006f0e:	4a7d      	ldr	r2, [pc, #500]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006f14:	6013      	str	r3, [r2, #0]
90006f16:	e01d      	b.n	90006f54 <HAL_RCC_OscConfig+0xd8>
90006f18:	687b      	ldr	r3, [r7, #4]
90006f1a:	685b      	ldr	r3, [r3, #4]
90006f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006f20:	d10c      	bne.n	90006f3c <HAL_RCC_OscConfig+0xc0>
90006f22:	4b78      	ldr	r3, [pc, #480]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f24:	681b      	ldr	r3, [r3, #0]
90006f26:	4a77      	ldr	r2, [pc, #476]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006f2c:	6013      	str	r3, [r2, #0]
90006f2e:	4b75      	ldr	r3, [pc, #468]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f30:	681b      	ldr	r3, [r3, #0]
90006f32:	4a74      	ldr	r2, [pc, #464]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006f38:	6013      	str	r3, [r2, #0]
90006f3a:	e00b      	b.n	90006f54 <HAL_RCC_OscConfig+0xd8>
90006f3c:	4b71      	ldr	r3, [pc, #452]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f3e:	681b      	ldr	r3, [r3, #0]
90006f40:	4a70      	ldr	r2, [pc, #448]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006f46:	6013      	str	r3, [r2, #0]
90006f48:	4b6e      	ldr	r3, [pc, #440]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f4a:	681b      	ldr	r3, [r3, #0]
90006f4c:	4a6d      	ldr	r2, [pc, #436]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006f54:	687b      	ldr	r3, [r7, #4]
90006f56:	685b      	ldr	r3, [r3, #4]
90006f58:	2b00      	cmp	r3, #0
90006f5a:	d013      	beq.n	90006f84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f5c:	f7fc fae6 	bl	9000352c <HAL_GetTick>
90006f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006f62:	e008      	b.n	90006f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006f64:	f7fc fae2 	bl	9000352c <HAL_GetTick>
90006f68:	4602      	mov	r2, r0
90006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f6c:	1ad3      	subs	r3, r2, r3
90006f6e:	2b64      	cmp	r3, #100	@ 0x64
90006f70:	d901      	bls.n	90006f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006f72:	2303      	movs	r3, #3
90006f74:	e3d4      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006f76:	4b63      	ldr	r3, [pc, #396]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006f78:	681b      	ldr	r3, [r3, #0]
90006f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006f7e:	2b00      	cmp	r3, #0
90006f80:	d0f0      	beq.n	90006f64 <HAL_RCC_OscConfig+0xe8>
90006f82:	e014      	b.n	90006fae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f84:	f7fc fad2 	bl	9000352c <HAL_GetTick>
90006f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006f8a:	e008      	b.n	90006f9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006f8c:	f7fc face 	bl	9000352c <HAL_GetTick>
90006f90:	4602      	mov	r2, r0
90006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f94:	1ad3      	subs	r3, r2, r3
90006f96:	2b64      	cmp	r3, #100	@ 0x64
90006f98:	d901      	bls.n	90006f9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006f9a:	2303      	movs	r3, #3
90006f9c:	e3c0      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006f9e:	4b59      	ldr	r3, [pc, #356]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006fa0:	681b      	ldr	r3, [r3, #0]
90006fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006fa6:	2b00      	cmp	r3, #0
90006fa8:	d1f0      	bne.n	90006f8c <HAL_RCC_OscConfig+0x110>
90006faa:	e000      	b.n	90006fae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006fae:	687b      	ldr	r3, [r7, #4]
90006fb0:	681b      	ldr	r3, [r3, #0]
90006fb2:	f003 0302 	and.w	r3, r3, #2
90006fb6:	2b00      	cmp	r3, #0
90006fb8:	f000 80ca 	beq.w	90007150 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006fbc:	4b51      	ldr	r3, [pc, #324]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006fbe:	691b      	ldr	r3, [r3, #16]
90006fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006fc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006fc6:	4b4f      	ldr	r3, [pc, #316]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006fca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006fcc:	6a3b      	ldr	r3, [r7, #32]
90006fce:	2b00      	cmp	r3, #0
90006fd0:	d007      	beq.n	90006fe2 <HAL_RCC_OscConfig+0x166>
90006fd2:	6a3b      	ldr	r3, [r7, #32]
90006fd4:	2b18      	cmp	r3, #24
90006fd6:	d156      	bne.n	90007086 <HAL_RCC_OscConfig+0x20a>
90006fd8:	69fb      	ldr	r3, [r7, #28]
90006fda:	f003 0303 	and.w	r3, r3, #3
90006fde:	2b00      	cmp	r3, #0
90006fe0:	d151      	bne.n	90007086 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006fe2:	4b48      	ldr	r3, [pc, #288]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006fe4:	681b      	ldr	r3, [r3, #0]
90006fe6:	f003 0304 	and.w	r3, r3, #4
90006fea:	2b00      	cmp	r3, #0
90006fec:	d005      	beq.n	90006ffa <HAL_RCC_OscConfig+0x17e>
90006fee:	687b      	ldr	r3, [r7, #4]
90006ff0:	68db      	ldr	r3, [r3, #12]
90006ff2:	2b00      	cmp	r3, #0
90006ff4:	d101      	bne.n	90006ffa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006ff6:	2301      	movs	r3, #1
90006ff8:	e392      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006ffa:	4b42      	ldr	r3, [pc, #264]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90006ffc:	681b      	ldr	r3, [r3, #0]
90006ffe:	f023 0219 	bic.w	r2, r3, #25
90007002:	687b      	ldr	r3, [r7, #4]
90007004:	68db      	ldr	r3, [r3, #12]
90007006:	493f      	ldr	r1, [pc, #252]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90007008:	4313      	orrs	r3, r2
9000700a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000700c:	f7fc fa8e 	bl	9000352c <HAL_GetTick>
90007010:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007012:	e008      	b.n	90007026 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007014:	f7fc fa8a 	bl	9000352c <HAL_GetTick>
90007018:	4602      	mov	r2, r0
9000701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000701c:	1ad3      	subs	r3, r2, r3
9000701e:	2b02      	cmp	r3, #2
90007020:	d901      	bls.n	90007026 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90007022:	2303      	movs	r3, #3
90007024:	e37c      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007026:	4b37      	ldr	r3, [pc, #220]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90007028:	681b      	ldr	r3, [r3, #0]
9000702a:	f003 0304 	and.w	r3, r3, #4
9000702e:	2b00      	cmp	r3, #0
90007030:	d0f0      	beq.n	90007014 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007032:	f7fc faab 	bl	9000358c <HAL_GetREVID>
90007036:	4603      	mov	r3, r0
90007038:	f241 0203 	movw	r2, #4099	@ 0x1003
9000703c:	4293      	cmp	r3, r2
9000703e:	d817      	bhi.n	90007070 <HAL_RCC_OscConfig+0x1f4>
90007040:	687b      	ldr	r3, [r7, #4]
90007042:	691b      	ldr	r3, [r3, #16]
90007044:	2b40      	cmp	r3, #64	@ 0x40
90007046:	d108      	bne.n	9000705a <HAL_RCC_OscConfig+0x1de>
90007048:	4b2e      	ldr	r3, [pc, #184]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
9000704a:	685b      	ldr	r3, [r3, #4]
9000704c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90007050:	4a2c      	ldr	r2, [pc, #176]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90007052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007056:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007058:	e07a      	b.n	90007150 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000705a:	4b2a      	ldr	r3, [pc, #168]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
9000705c:	685b      	ldr	r3, [r3, #4]
9000705e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90007062:	687b      	ldr	r3, [r7, #4]
90007064:	691b      	ldr	r3, [r3, #16]
90007066:	031b      	lsls	r3, r3, #12
90007068:	4926      	ldr	r1, [pc, #152]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
9000706a:	4313      	orrs	r3, r2
9000706c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000706e:	e06f      	b.n	90007150 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007070:	4b24      	ldr	r3, [pc, #144]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90007072:	685b      	ldr	r3, [r3, #4]
90007074:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90007078:	687b      	ldr	r3, [r7, #4]
9000707a:	691b      	ldr	r3, [r3, #16]
9000707c:	061b      	lsls	r3, r3, #24
9000707e:	4921      	ldr	r1, [pc, #132]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90007080:	4313      	orrs	r3, r2
90007082:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007084:	e064      	b.n	90007150 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90007086:	687b      	ldr	r3, [r7, #4]
90007088:	68db      	ldr	r3, [r3, #12]
9000708a:	2b00      	cmp	r3, #0
9000708c:	d047      	beq.n	9000711e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000708e:	4b1d      	ldr	r3, [pc, #116]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
90007090:	681b      	ldr	r3, [r3, #0]
90007092:	f023 0219 	bic.w	r2, r3, #25
90007096:	687b      	ldr	r3, [r7, #4]
90007098:	68db      	ldr	r3, [r3, #12]
9000709a:	491a      	ldr	r1, [pc, #104]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
9000709c:	4313      	orrs	r3, r2
9000709e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900070a0:	f7fc fa44 	bl	9000352c <HAL_GetTick>
900070a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900070a6:	e008      	b.n	900070ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900070a8:	f7fc fa40 	bl	9000352c <HAL_GetTick>
900070ac:	4602      	mov	r2, r0
900070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070b0:	1ad3      	subs	r3, r2, r3
900070b2:	2b02      	cmp	r3, #2
900070b4:	d901      	bls.n	900070ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
900070b6:	2303      	movs	r3, #3
900070b8:	e332      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900070ba:	4b12      	ldr	r3, [pc, #72]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
900070bc:	681b      	ldr	r3, [r3, #0]
900070be:	f003 0304 	and.w	r3, r3, #4
900070c2:	2b00      	cmp	r3, #0
900070c4:	d0f0      	beq.n	900070a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900070c6:	f7fc fa61 	bl	9000358c <HAL_GetREVID>
900070ca:	4603      	mov	r3, r0
900070cc:	f241 0203 	movw	r2, #4099	@ 0x1003
900070d0:	4293      	cmp	r3, r2
900070d2:	d819      	bhi.n	90007108 <HAL_RCC_OscConfig+0x28c>
900070d4:	687b      	ldr	r3, [r7, #4]
900070d6:	691b      	ldr	r3, [r3, #16]
900070d8:	2b40      	cmp	r3, #64	@ 0x40
900070da:	d108      	bne.n	900070ee <HAL_RCC_OscConfig+0x272>
900070dc:	4b09      	ldr	r3, [pc, #36]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
900070de:	685b      	ldr	r3, [r3, #4]
900070e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
900070e4:	4a07      	ldr	r2, [pc, #28]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
900070e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900070ea:	6053      	str	r3, [r2, #4]
900070ec:	e030      	b.n	90007150 <HAL_RCC_OscConfig+0x2d4>
900070ee:	4b05      	ldr	r3, [pc, #20]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
900070f0:	685b      	ldr	r3, [r3, #4]
900070f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900070f6:	687b      	ldr	r3, [r7, #4]
900070f8:	691b      	ldr	r3, [r3, #16]
900070fa:	031b      	lsls	r3, r3, #12
900070fc:	4901      	ldr	r1, [pc, #4]	@ (90007104 <HAL_RCC_OscConfig+0x288>)
900070fe:	4313      	orrs	r3, r2
90007100:	604b      	str	r3, [r1, #4]
90007102:	e025      	b.n	90007150 <HAL_RCC_OscConfig+0x2d4>
90007104:	58024400 	.word	0x58024400
90007108:	4b9a      	ldr	r3, [pc, #616]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
9000710a:	685b      	ldr	r3, [r3, #4]
9000710c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90007110:	687b      	ldr	r3, [r7, #4]
90007112:	691b      	ldr	r3, [r3, #16]
90007114:	061b      	lsls	r3, r3, #24
90007116:	4997      	ldr	r1, [pc, #604]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007118:	4313      	orrs	r3, r2
9000711a:	604b      	str	r3, [r1, #4]
9000711c:	e018      	b.n	90007150 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
9000711e:	4b95      	ldr	r3, [pc, #596]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007120:	681b      	ldr	r3, [r3, #0]
90007122:	4a94      	ldr	r2, [pc, #592]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007124:	f023 0301 	bic.w	r3, r3, #1
90007128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000712a:	f7fc f9ff 	bl	9000352c <HAL_GetTick>
9000712e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90007130:	e008      	b.n	90007144 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007132:	f7fc f9fb 	bl	9000352c <HAL_GetTick>
90007136:	4602      	mov	r2, r0
90007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000713a:	1ad3      	subs	r3, r2, r3
9000713c:	2b02      	cmp	r3, #2
9000713e:	d901      	bls.n	90007144 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90007140:	2303      	movs	r3, #3
90007142:	e2ed      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90007144:	4b8b      	ldr	r3, [pc, #556]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007146:	681b      	ldr	r3, [r3, #0]
90007148:	f003 0304 	and.w	r3, r3, #4
9000714c:	2b00      	cmp	r3, #0
9000714e:	d1f0      	bne.n	90007132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90007150:	687b      	ldr	r3, [r7, #4]
90007152:	681b      	ldr	r3, [r3, #0]
90007154:	f003 0310 	and.w	r3, r3, #16
90007158:	2b00      	cmp	r3, #0
9000715a:	f000 80a9 	beq.w	900072b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000715e:	4b85      	ldr	r3, [pc, #532]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007160:	691b      	ldr	r3, [r3, #16]
90007162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007166:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90007168:	4b82      	ldr	r3, [pc, #520]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
9000716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000716c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000716e:	69bb      	ldr	r3, [r7, #24]
90007170:	2b08      	cmp	r3, #8
90007172:	d007      	beq.n	90007184 <HAL_RCC_OscConfig+0x308>
90007174:	69bb      	ldr	r3, [r7, #24]
90007176:	2b18      	cmp	r3, #24
90007178:	d13a      	bne.n	900071f0 <HAL_RCC_OscConfig+0x374>
9000717a:	697b      	ldr	r3, [r7, #20]
9000717c:	f003 0303 	and.w	r3, r3, #3
90007180:	2b01      	cmp	r3, #1
90007182:	d135      	bne.n	900071f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007184:	4b7b      	ldr	r3, [pc, #492]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007186:	681b      	ldr	r3, [r3, #0]
90007188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000718c:	2b00      	cmp	r3, #0
9000718e:	d005      	beq.n	9000719c <HAL_RCC_OscConfig+0x320>
90007190:	687b      	ldr	r3, [r7, #4]
90007192:	69db      	ldr	r3, [r3, #28]
90007194:	2b80      	cmp	r3, #128	@ 0x80
90007196:	d001      	beq.n	9000719c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90007198:	2301      	movs	r3, #1
9000719a:	e2c1      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000719c:	f7fc f9f6 	bl	9000358c <HAL_GetREVID>
900071a0:	4603      	mov	r3, r0
900071a2:	f241 0203 	movw	r2, #4099	@ 0x1003
900071a6:	4293      	cmp	r3, r2
900071a8:	d817      	bhi.n	900071da <HAL_RCC_OscConfig+0x35e>
900071aa:	687b      	ldr	r3, [r7, #4]
900071ac:	6a1b      	ldr	r3, [r3, #32]
900071ae:	2b20      	cmp	r3, #32
900071b0:	d108      	bne.n	900071c4 <HAL_RCC_OscConfig+0x348>
900071b2:	4b70      	ldr	r3, [pc, #448]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900071b4:	685b      	ldr	r3, [r3, #4]
900071b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
900071ba:	4a6e      	ldr	r2, [pc, #440]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900071bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
900071c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900071c2:	e075      	b.n	900072b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900071c4:	4b6b      	ldr	r3, [pc, #428]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900071c6:	685b      	ldr	r3, [r3, #4]
900071c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
900071cc:	687b      	ldr	r3, [r7, #4]
900071ce:	6a1b      	ldr	r3, [r3, #32]
900071d0:	069b      	lsls	r3, r3, #26
900071d2:	4968      	ldr	r1, [pc, #416]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900071d4:	4313      	orrs	r3, r2
900071d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900071d8:	e06a      	b.n	900072b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900071da:	4b66      	ldr	r3, [pc, #408]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900071dc:	68db      	ldr	r3, [r3, #12]
900071de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
900071e2:	687b      	ldr	r3, [r7, #4]
900071e4:	6a1b      	ldr	r3, [r3, #32]
900071e6:	061b      	lsls	r3, r3, #24
900071e8:	4962      	ldr	r1, [pc, #392]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900071ea:	4313      	orrs	r3, r2
900071ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900071ee:	e05f      	b.n	900072b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
900071f0:	687b      	ldr	r3, [r7, #4]
900071f2:	69db      	ldr	r3, [r3, #28]
900071f4:	2b00      	cmp	r3, #0
900071f6:	d042      	beq.n	9000727e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
900071f8:	4b5e      	ldr	r3, [pc, #376]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900071fa:	681b      	ldr	r3, [r3, #0]
900071fc:	4a5d      	ldr	r2, [pc, #372]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900071fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90007202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007204:	f7fc f992 	bl	9000352c <HAL_GetTick>
90007208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000720a:	e008      	b.n	9000721e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000720c:	f7fc f98e 	bl	9000352c <HAL_GetTick>
90007210:	4602      	mov	r2, r0
90007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007214:	1ad3      	subs	r3, r2, r3
90007216:	2b02      	cmp	r3, #2
90007218:	d901      	bls.n	9000721e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
9000721a:	2303      	movs	r3, #3
9000721c:	e280      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000721e:	4b55      	ldr	r3, [pc, #340]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007220:	681b      	ldr	r3, [r3, #0]
90007222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007226:	2b00      	cmp	r3, #0
90007228:	d0f0      	beq.n	9000720c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000722a:	f7fc f9af 	bl	9000358c <HAL_GetREVID>
9000722e:	4603      	mov	r3, r0
90007230:	f241 0203 	movw	r2, #4099	@ 0x1003
90007234:	4293      	cmp	r3, r2
90007236:	d817      	bhi.n	90007268 <HAL_RCC_OscConfig+0x3ec>
90007238:	687b      	ldr	r3, [r7, #4]
9000723a:	6a1b      	ldr	r3, [r3, #32]
9000723c:	2b20      	cmp	r3, #32
9000723e:	d108      	bne.n	90007252 <HAL_RCC_OscConfig+0x3d6>
90007240:	4b4c      	ldr	r3, [pc, #304]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007242:	685b      	ldr	r3, [r3, #4]
90007244:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90007248:	4a4a      	ldr	r2, [pc, #296]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
9000724a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000724e:	6053      	str	r3, [r2, #4]
90007250:	e02e      	b.n	900072b0 <HAL_RCC_OscConfig+0x434>
90007252:	4b48      	ldr	r3, [pc, #288]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007254:	685b      	ldr	r3, [r3, #4]
90007256:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
9000725a:	687b      	ldr	r3, [r7, #4]
9000725c:	6a1b      	ldr	r3, [r3, #32]
9000725e:	069b      	lsls	r3, r3, #26
90007260:	4944      	ldr	r1, [pc, #272]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007262:	4313      	orrs	r3, r2
90007264:	604b      	str	r3, [r1, #4]
90007266:	e023      	b.n	900072b0 <HAL_RCC_OscConfig+0x434>
90007268:	4b42      	ldr	r3, [pc, #264]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
9000726a:	68db      	ldr	r3, [r3, #12]
9000726c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90007270:	687b      	ldr	r3, [r7, #4]
90007272:	6a1b      	ldr	r3, [r3, #32]
90007274:	061b      	lsls	r3, r3, #24
90007276:	493f      	ldr	r1, [pc, #252]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007278:	4313      	orrs	r3, r2
9000727a:	60cb      	str	r3, [r1, #12]
9000727c:	e018      	b.n	900072b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
9000727e:	4b3d      	ldr	r3, [pc, #244]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007280:	681b      	ldr	r3, [r3, #0]
90007282:	4a3c      	ldr	r2, [pc, #240]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007284:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90007288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000728a:	f7fc f94f 	bl	9000352c <HAL_GetTick>
9000728e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007290:	e008      	b.n	900072a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90007292:	f7fc f94b 	bl	9000352c <HAL_GetTick>
90007296:	4602      	mov	r2, r0
90007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000729a:	1ad3      	subs	r3, r2, r3
9000729c:	2b02      	cmp	r3, #2
9000729e:	d901      	bls.n	900072a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
900072a0:	2303      	movs	r3, #3
900072a2:	e23d      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900072a4:	4b33      	ldr	r3, [pc, #204]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900072a6:	681b      	ldr	r3, [r3, #0]
900072a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900072ac:	2b00      	cmp	r3, #0
900072ae:	d1f0      	bne.n	90007292 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900072b0:	687b      	ldr	r3, [r7, #4]
900072b2:	681b      	ldr	r3, [r3, #0]
900072b4:	f003 0308 	and.w	r3, r3, #8
900072b8:	2b00      	cmp	r3, #0
900072ba:	d036      	beq.n	9000732a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
900072bc:	687b      	ldr	r3, [r7, #4]
900072be:	695b      	ldr	r3, [r3, #20]
900072c0:	2b00      	cmp	r3, #0
900072c2:	d019      	beq.n	900072f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
900072c4:	4b2b      	ldr	r3, [pc, #172]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900072c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900072c8:	4a2a      	ldr	r2, [pc, #168]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900072ca:	f043 0301 	orr.w	r3, r3, #1
900072ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900072d0:	f7fc f92c 	bl	9000352c <HAL_GetTick>
900072d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900072d6:	e008      	b.n	900072ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900072d8:	f7fc f928 	bl	9000352c <HAL_GetTick>
900072dc:	4602      	mov	r2, r0
900072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900072e0:	1ad3      	subs	r3, r2, r3
900072e2:	2b02      	cmp	r3, #2
900072e4:	d901      	bls.n	900072ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
900072e6:	2303      	movs	r3, #3
900072e8:	e21a      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900072ea:	4b22      	ldr	r3, [pc, #136]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900072ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900072ee:	f003 0302 	and.w	r3, r3, #2
900072f2:	2b00      	cmp	r3, #0
900072f4:	d0f0      	beq.n	900072d8 <HAL_RCC_OscConfig+0x45c>
900072f6:	e018      	b.n	9000732a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900072f8:	4b1e      	ldr	r3, [pc, #120]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900072fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900072fc:	4a1d      	ldr	r2, [pc, #116]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
900072fe:	f023 0301 	bic.w	r3, r3, #1
90007302:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007304:	f7fc f912 	bl	9000352c <HAL_GetTick>
90007308:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000730a:	e008      	b.n	9000731e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000730c:	f7fc f90e 	bl	9000352c <HAL_GetTick>
90007310:	4602      	mov	r2, r0
90007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007314:	1ad3      	subs	r3, r2, r3
90007316:	2b02      	cmp	r3, #2
90007318:	d901      	bls.n	9000731e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
9000731a:	2303      	movs	r3, #3
9000731c:	e200      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000731e:	4b15      	ldr	r3, [pc, #84]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007322:	f003 0302 	and.w	r3, r3, #2
90007326:	2b00      	cmp	r3, #0
90007328:	d1f0      	bne.n	9000730c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000732a:	687b      	ldr	r3, [r7, #4]
9000732c:	681b      	ldr	r3, [r3, #0]
9000732e:	f003 0320 	and.w	r3, r3, #32
90007332:	2b00      	cmp	r3, #0
90007334:	d039      	beq.n	900073aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90007336:	687b      	ldr	r3, [r7, #4]
90007338:	699b      	ldr	r3, [r3, #24]
9000733a:	2b00      	cmp	r3, #0
9000733c:	d01c      	beq.n	90007378 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
9000733e:	4b0d      	ldr	r3, [pc, #52]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007340:	681b      	ldr	r3, [r3, #0]
90007342:	4a0c      	ldr	r2, [pc, #48]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90007348:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000734a:	f7fc f8ef 	bl	9000352c <HAL_GetTick>
9000734e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007350:	e008      	b.n	90007364 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007352:	f7fc f8eb 	bl	9000352c <HAL_GetTick>
90007356:	4602      	mov	r2, r0
90007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000735a:	1ad3      	subs	r3, r2, r3
9000735c:	2b02      	cmp	r3, #2
9000735e:	d901      	bls.n	90007364 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007360:	2303      	movs	r3, #3
90007362:	e1dd      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007364:	4b03      	ldr	r3, [pc, #12]	@ (90007374 <HAL_RCC_OscConfig+0x4f8>)
90007366:	681b      	ldr	r3, [r3, #0]
90007368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000736c:	2b00      	cmp	r3, #0
9000736e:	d0f0      	beq.n	90007352 <HAL_RCC_OscConfig+0x4d6>
90007370:	e01b      	b.n	900073aa <HAL_RCC_OscConfig+0x52e>
90007372:	bf00      	nop
90007374:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007378:	4b9b      	ldr	r3, [pc, #620]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000737a:	681b      	ldr	r3, [r3, #0]
9000737c:	4a9a      	ldr	r2, [pc, #616]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000737e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90007382:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007384:	f7fc f8d2 	bl	9000352c <HAL_GetTick>
90007388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000738a:	e008      	b.n	9000739e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000738c:	f7fc f8ce 	bl	9000352c <HAL_GetTick>
90007390:	4602      	mov	r2, r0
90007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007394:	1ad3      	subs	r3, r2, r3
90007396:	2b02      	cmp	r3, #2
90007398:	d901      	bls.n	9000739e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
9000739a:	2303      	movs	r3, #3
9000739c:	e1c0      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000739e:	4b92      	ldr	r3, [pc, #584]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900073a0:	681b      	ldr	r3, [r3, #0]
900073a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900073a6:	2b00      	cmp	r3, #0
900073a8:	d1f0      	bne.n	9000738c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900073aa:	687b      	ldr	r3, [r7, #4]
900073ac:	681b      	ldr	r3, [r3, #0]
900073ae:	f003 0304 	and.w	r3, r3, #4
900073b2:	2b00      	cmp	r3, #0
900073b4:	f000 8081 	beq.w	900074ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900073b8:	4b8c      	ldr	r3, [pc, #560]	@ (900075ec <HAL_RCC_OscConfig+0x770>)
900073ba:	681b      	ldr	r3, [r3, #0]
900073bc:	4a8b      	ldr	r2, [pc, #556]	@ (900075ec <HAL_RCC_OscConfig+0x770>)
900073be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900073c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900073c4:	f7fc f8b2 	bl	9000352c <HAL_GetTick>
900073c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900073ca:	e008      	b.n	900073de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900073cc:	f7fc f8ae 	bl	9000352c <HAL_GetTick>
900073d0:	4602      	mov	r2, r0
900073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073d4:	1ad3      	subs	r3, r2, r3
900073d6:	2b64      	cmp	r3, #100	@ 0x64
900073d8:	d901      	bls.n	900073de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
900073da:	2303      	movs	r3, #3
900073dc:	e1a0      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900073de:	4b83      	ldr	r3, [pc, #524]	@ (900075ec <HAL_RCC_OscConfig+0x770>)
900073e0:	681b      	ldr	r3, [r3, #0]
900073e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900073e6:	2b00      	cmp	r3, #0
900073e8:	d0f0      	beq.n	900073cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900073ea:	687b      	ldr	r3, [r7, #4]
900073ec:	689b      	ldr	r3, [r3, #8]
900073ee:	2b01      	cmp	r3, #1
900073f0:	d106      	bne.n	90007400 <HAL_RCC_OscConfig+0x584>
900073f2:	4b7d      	ldr	r3, [pc, #500]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900073f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900073f6:	4a7c      	ldr	r2, [pc, #496]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900073f8:	f043 0301 	orr.w	r3, r3, #1
900073fc:	6713      	str	r3, [r2, #112]	@ 0x70
900073fe:	e02d      	b.n	9000745c <HAL_RCC_OscConfig+0x5e0>
90007400:	687b      	ldr	r3, [r7, #4]
90007402:	689b      	ldr	r3, [r3, #8]
90007404:	2b00      	cmp	r3, #0
90007406:	d10c      	bne.n	90007422 <HAL_RCC_OscConfig+0x5a6>
90007408:	4b77      	ldr	r3, [pc, #476]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000740a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000740c:	4a76      	ldr	r2, [pc, #472]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000740e:	f023 0301 	bic.w	r3, r3, #1
90007412:	6713      	str	r3, [r2, #112]	@ 0x70
90007414:	4b74      	ldr	r3, [pc, #464]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007418:	4a73      	ldr	r2, [pc, #460]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000741a:	f023 0304 	bic.w	r3, r3, #4
9000741e:	6713      	str	r3, [r2, #112]	@ 0x70
90007420:	e01c      	b.n	9000745c <HAL_RCC_OscConfig+0x5e0>
90007422:	687b      	ldr	r3, [r7, #4]
90007424:	689b      	ldr	r3, [r3, #8]
90007426:	2b05      	cmp	r3, #5
90007428:	d10c      	bne.n	90007444 <HAL_RCC_OscConfig+0x5c8>
9000742a:	4b6f      	ldr	r3, [pc, #444]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000742c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000742e:	4a6e      	ldr	r2, [pc, #440]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007430:	f043 0304 	orr.w	r3, r3, #4
90007434:	6713      	str	r3, [r2, #112]	@ 0x70
90007436:	4b6c      	ldr	r3, [pc, #432]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000743a:	4a6b      	ldr	r2, [pc, #428]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000743c:	f043 0301 	orr.w	r3, r3, #1
90007440:	6713      	str	r3, [r2, #112]	@ 0x70
90007442:	e00b      	b.n	9000745c <HAL_RCC_OscConfig+0x5e0>
90007444:	4b68      	ldr	r3, [pc, #416]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007448:	4a67      	ldr	r2, [pc, #412]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000744a:	f023 0301 	bic.w	r3, r3, #1
9000744e:	6713      	str	r3, [r2, #112]	@ 0x70
90007450:	4b65      	ldr	r3, [pc, #404]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007454:	4a64      	ldr	r2, [pc, #400]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007456:	f023 0304 	bic.w	r3, r3, #4
9000745a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000745c:	687b      	ldr	r3, [r7, #4]
9000745e:	689b      	ldr	r3, [r3, #8]
90007460:	2b00      	cmp	r3, #0
90007462:	d015      	beq.n	90007490 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007464:	f7fc f862 	bl	9000352c <HAL_GetTick>
90007468:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000746a:	e00a      	b.n	90007482 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000746c:	f7fc f85e 	bl	9000352c <HAL_GetTick>
90007470:	4602      	mov	r2, r0
90007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007474:	1ad3      	subs	r3, r2, r3
90007476:	f241 3288 	movw	r2, #5000	@ 0x1388
9000747a:	4293      	cmp	r3, r2
9000747c:	d901      	bls.n	90007482 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
9000747e:	2303      	movs	r3, #3
90007480:	e14e      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007482:	4b59      	ldr	r3, [pc, #356]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007486:	f003 0302 	and.w	r3, r3, #2
9000748a:	2b00      	cmp	r3, #0
9000748c:	d0ee      	beq.n	9000746c <HAL_RCC_OscConfig+0x5f0>
9000748e:	e014      	b.n	900074ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007490:	f7fc f84c 	bl	9000352c <HAL_GetTick>
90007494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007496:	e00a      	b.n	900074ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007498:	f7fc f848 	bl	9000352c <HAL_GetTick>
9000749c:	4602      	mov	r2, r0
9000749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900074a0:	1ad3      	subs	r3, r2, r3
900074a2:	f241 3288 	movw	r2, #5000	@ 0x1388
900074a6:	4293      	cmp	r3, r2
900074a8:	d901      	bls.n	900074ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
900074aa:	2303      	movs	r3, #3
900074ac:	e138      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900074ae:	4b4e      	ldr	r3, [pc, #312]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900074b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900074b2:	f003 0302 	and.w	r3, r3, #2
900074b6:	2b00      	cmp	r3, #0
900074b8:	d1ee      	bne.n	90007498 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900074ba:	687b      	ldr	r3, [r7, #4]
900074bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900074be:	2b00      	cmp	r3, #0
900074c0:	f000 812d 	beq.w	9000771e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
900074c4:	4b48      	ldr	r3, [pc, #288]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900074c6:	691b      	ldr	r3, [r3, #16]
900074c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900074cc:	2b18      	cmp	r3, #24
900074ce:	f000 80bd 	beq.w	9000764c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900074d2:	687b      	ldr	r3, [r7, #4]
900074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900074d6:	2b02      	cmp	r3, #2
900074d8:	f040 809e 	bne.w	90007618 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900074dc:	4b42      	ldr	r3, [pc, #264]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900074de:	681b      	ldr	r3, [r3, #0]
900074e0:	4a41      	ldr	r2, [pc, #260]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900074e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900074e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900074e8:	f7fc f820 	bl	9000352c <HAL_GetTick>
900074ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900074ee:	e008      	b.n	90007502 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900074f0:	f7fc f81c 	bl	9000352c <HAL_GetTick>
900074f4:	4602      	mov	r2, r0
900074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900074f8:	1ad3      	subs	r3, r2, r3
900074fa:	2b02      	cmp	r3, #2
900074fc:	d901      	bls.n	90007502 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900074fe:	2303      	movs	r3, #3
90007500:	e10e      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007502:	4b39      	ldr	r3, [pc, #228]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007504:	681b      	ldr	r3, [r3, #0]
90007506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000750a:	2b00      	cmp	r3, #0
9000750c:	d1f0      	bne.n	900074f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000750e:	4b36      	ldr	r3, [pc, #216]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
90007512:	4b37      	ldr	r3, [pc, #220]	@ (900075f0 <HAL_RCC_OscConfig+0x774>)
90007514:	4013      	ands	r3, r2
90007516:	687a      	ldr	r2, [r7, #4]
90007518:	6a91      	ldr	r1, [r2, #40]	@ 0x28
9000751a:	687a      	ldr	r2, [r7, #4]
9000751c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
9000751e:	0112      	lsls	r2, r2, #4
90007520:	430a      	orrs	r2, r1
90007522:	4931      	ldr	r1, [pc, #196]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007524:	4313      	orrs	r3, r2
90007526:	628b      	str	r3, [r1, #40]	@ 0x28
90007528:	687b      	ldr	r3, [r7, #4]
9000752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000752c:	3b01      	subs	r3, #1
9000752e:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007532:	687b      	ldr	r3, [r7, #4]
90007534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007536:	3b01      	subs	r3, #1
90007538:	025b      	lsls	r3, r3, #9
9000753a:	b29b      	uxth	r3, r3
9000753c:	431a      	orrs	r2, r3
9000753e:	687b      	ldr	r3, [r7, #4]
90007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007542:	3b01      	subs	r3, #1
90007544:	041b      	lsls	r3, r3, #16
90007546:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000754a:	431a      	orrs	r2, r3
9000754c:	687b      	ldr	r3, [r7, #4]
9000754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007550:	3b01      	subs	r3, #1
90007552:	061b      	lsls	r3, r3, #24
90007554:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007558:	4923      	ldr	r1, [pc, #140]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000755a:	4313      	orrs	r3, r2
9000755c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
9000755e:	4b22      	ldr	r3, [pc, #136]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007562:	4a21      	ldr	r2, [pc, #132]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007564:	f023 0301 	bic.w	r3, r3, #1
90007568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000756a:	4b1f      	ldr	r3, [pc, #124]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000756c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000756e:	4b21      	ldr	r3, [pc, #132]	@ (900075f4 <HAL_RCC_OscConfig+0x778>)
90007570:	4013      	ands	r3, r2
90007572:	687a      	ldr	r2, [r7, #4]
90007574:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007576:	00d2      	lsls	r2, r2, #3
90007578:	491b      	ldr	r1, [pc, #108]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000757a:	4313      	orrs	r3, r2
9000757c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000757e:	4b1a      	ldr	r3, [pc, #104]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007582:	f023 020c 	bic.w	r2, r3, #12
90007586:	687b      	ldr	r3, [r7, #4]
90007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000758a:	4917      	ldr	r1, [pc, #92]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000758c:	4313      	orrs	r3, r2
9000758e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007590:	4b15      	ldr	r3, [pc, #84]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
90007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007594:	f023 0202 	bic.w	r2, r3, #2
90007598:	687b      	ldr	r3, [r7, #4]
9000759a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000759c:	4912      	ldr	r1, [pc, #72]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
9000759e:	4313      	orrs	r3, r2
900075a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
900075a2:	4b11      	ldr	r3, [pc, #68]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900075a6:	4a10      	ldr	r2, [pc, #64]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900075ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900075ae:	4b0e      	ldr	r3, [pc, #56]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900075b2:	4a0d      	ldr	r2, [pc, #52]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900075b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
900075ba:	4b0b      	ldr	r3, [pc, #44]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900075be:	4a0a      	ldr	r2, [pc, #40]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
900075c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
900075c6:	4b08      	ldr	r3, [pc, #32]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900075ca:	4a07      	ldr	r2, [pc, #28]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075cc:	f043 0301 	orr.w	r3, r3, #1
900075d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
900075d2:	4b05      	ldr	r3, [pc, #20]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075d4:	681b      	ldr	r3, [r3, #0]
900075d6:	4a04      	ldr	r2, [pc, #16]	@ (900075e8 <HAL_RCC_OscConfig+0x76c>)
900075d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
900075dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900075de:	f7fb ffa5 	bl	9000352c <HAL_GetTick>
900075e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900075e4:	e011      	b.n	9000760a <HAL_RCC_OscConfig+0x78e>
900075e6:	bf00      	nop
900075e8:	58024400 	.word	0x58024400
900075ec:	58024800 	.word	0x58024800
900075f0:	fffffc0c 	.word	0xfffffc0c
900075f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900075f8:	f7fb ff98 	bl	9000352c <HAL_GetTick>
900075fc:	4602      	mov	r2, r0
900075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007600:	1ad3      	subs	r3, r2, r3
90007602:	2b02      	cmp	r3, #2
90007604:	d901      	bls.n	9000760a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90007606:	2303      	movs	r3, #3
90007608:	e08a      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000760a:	4b47      	ldr	r3, [pc, #284]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
9000760c:	681b      	ldr	r3, [r3, #0]
9000760e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007612:	2b00      	cmp	r3, #0
90007614:	d0f0      	beq.n	900075f8 <HAL_RCC_OscConfig+0x77c>
90007616:	e082      	b.n	9000771e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007618:	4b43      	ldr	r3, [pc, #268]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
9000761a:	681b      	ldr	r3, [r3, #0]
9000761c:	4a42      	ldr	r2, [pc, #264]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
9000761e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007624:	f7fb ff82 	bl	9000352c <HAL_GetTick>
90007628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000762a:	e008      	b.n	9000763e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000762c:	f7fb ff7e 	bl	9000352c <HAL_GetTick>
90007630:	4602      	mov	r2, r0
90007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007634:	1ad3      	subs	r3, r2, r3
90007636:	2b02      	cmp	r3, #2
90007638:	d901      	bls.n	9000763e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
9000763a:	2303      	movs	r3, #3
9000763c:	e070      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000763e:	4b3a      	ldr	r3, [pc, #232]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
90007640:	681b      	ldr	r3, [r3, #0]
90007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007646:	2b00      	cmp	r3, #0
90007648:	d1f0      	bne.n	9000762c <HAL_RCC_OscConfig+0x7b0>
9000764a:	e068      	b.n	9000771e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
9000764c:	4b36      	ldr	r3, [pc, #216]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
9000764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007650:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90007652:	4b35      	ldr	r3, [pc, #212]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
90007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007656:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007658:	687b      	ldr	r3, [r7, #4]
9000765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000765c:	2b01      	cmp	r3, #1
9000765e:	d031      	beq.n	900076c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007660:	693b      	ldr	r3, [r7, #16]
90007662:	f003 0203 	and.w	r2, r3, #3
90007666:	687b      	ldr	r3, [r7, #4]
90007668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000766a:	429a      	cmp	r2, r3
9000766c:	d12a      	bne.n	900076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000766e:	693b      	ldr	r3, [r7, #16]
90007670:	091b      	lsrs	r3, r3, #4
90007672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90007676:	687b      	ldr	r3, [r7, #4]
90007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000767a:	429a      	cmp	r2, r3
9000767c:	d122      	bne.n	900076c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000767e:	68fb      	ldr	r3, [r7, #12]
90007680:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007684:	687b      	ldr	r3, [r7, #4]
90007686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007688:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000768a:	429a      	cmp	r2, r3
9000768c:	d11a      	bne.n	900076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000768e:	68fb      	ldr	r3, [r7, #12]
90007690:	0a5b      	lsrs	r3, r3, #9
90007692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007696:	687b      	ldr	r3, [r7, #4]
90007698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000769a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000769c:	429a      	cmp	r2, r3
9000769e:	d111      	bne.n	900076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900076a0:	68fb      	ldr	r3, [r7, #12]
900076a2:	0c1b      	lsrs	r3, r3, #16
900076a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900076a8:	687b      	ldr	r3, [r7, #4]
900076aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900076ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900076ae:	429a      	cmp	r2, r3
900076b0:	d108      	bne.n	900076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
900076b2:	68fb      	ldr	r3, [r7, #12]
900076b4:	0e1b      	lsrs	r3, r3, #24
900076b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900076ba:	687b      	ldr	r3, [r7, #4]
900076bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900076be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900076c0:	429a      	cmp	r2, r3
900076c2:	d001      	beq.n	900076c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
900076c4:	2301      	movs	r3, #1
900076c6:	e02b      	b.n	90007720 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
900076c8:	4b17      	ldr	r3, [pc, #92]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
900076ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900076cc:	08db      	lsrs	r3, r3, #3
900076ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
900076d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
900076d4:	687b      	ldr	r3, [r7, #4]
900076d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900076d8:	693a      	ldr	r2, [r7, #16]
900076da:	429a      	cmp	r2, r3
900076dc:	d01f      	beq.n	9000771e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
900076de:	4b12      	ldr	r3, [pc, #72]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
900076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076e2:	4a11      	ldr	r2, [pc, #68]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
900076e4:	f023 0301 	bic.w	r3, r3, #1
900076e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
900076ea:	f7fb ff1f 	bl	9000352c <HAL_GetTick>
900076ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
900076f0:	bf00      	nop
900076f2:	f7fb ff1b 	bl	9000352c <HAL_GetTick>
900076f6:	4602      	mov	r2, r0
900076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900076fa:	4293      	cmp	r3, r2
900076fc:	d0f9      	beq.n	900076f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900076fe:	4b0a      	ldr	r3, [pc, #40]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
90007700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007702:	4b0a      	ldr	r3, [pc, #40]	@ (9000772c <HAL_RCC_OscConfig+0x8b0>)
90007704:	4013      	ands	r3, r2
90007706:	687a      	ldr	r2, [r7, #4]
90007708:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000770a:	00d2      	lsls	r2, r2, #3
9000770c:	4906      	ldr	r1, [pc, #24]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
9000770e:	4313      	orrs	r3, r2
90007710:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90007712:	4b05      	ldr	r3, [pc, #20]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
90007714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007716:	4a04      	ldr	r2, [pc, #16]	@ (90007728 <HAL_RCC_OscConfig+0x8ac>)
90007718:	f043 0301 	orr.w	r3, r3, #1
9000771c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
9000771e:	2300      	movs	r3, #0
}
90007720:	4618      	mov	r0, r3
90007722:	3730      	adds	r7, #48	@ 0x30
90007724:	46bd      	mov	sp, r7
90007726:	bd80      	pop	{r7, pc}
90007728:	58024400 	.word	0x58024400
9000772c:	ffff0007 	.word	0xffff0007

90007730 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90007730:	b580      	push	{r7, lr}
90007732:	b086      	sub	sp, #24
90007734:	af00      	add	r7, sp, #0
90007736:	6078      	str	r0, [r7, #4]
90007738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
9000773a:	687b      	ldr	r3, [r7, #4]
9000773c:	2b00      	cmp	r3, #0
9000773e:	d101      	bne.n	90007744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90007740:	2301      	movs	r3, #1
90007742:	e19c      	b.n	90007a7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90007744:	4b8a      	ldr	r3, [pc, #552]	@ (90007970 <HAL_RCC_ClockConfig+0x240>)
90007746:	681b      	ldr	r3, [r3, #0]
90007748:	f003 030f 	and.w	r3, r3, #15
9000774c:	683a      	ldr	r2, [r7, #0]
9000774e:	429a      	cmp	r2, r3
90007750:	d910      	bls.n	90007774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007752:	4b87      	ldr	r3, [pc, #540]	@ (90007970 <HAL_RCC_ClockConfig+0x240>)
90007754:	681b      	ldr	r3, [r3, #0]
90007756:	f023 020f 	bic.w	r2, r3, #15
9000775a:	4985      	ldr	r1, [pc, #532]	@ (90007970 <HAL_RCC_ClockConfig+0x240>)
9000775c:	683b      	ldr	r3, [r7, #0]
9000775e:	4313      	orrs	r3, r2
90007760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007762:	4b83      	ldr	r3, [pc, #524]	@ (90007970 <HAL_RCC_ClockConfig+0x240>)
90007764:	681b      	ldr	r3, [r3, #0]
90007766:	f003 030f 	and.w	r3, r3, #15
9000776a:	683a      	ldr	r2, [r7, #0]
9000776c:	429a      	cmp	r2, r3
9000776e:	d001      	beq.n	90007774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007770:	2301      	movs	r3, #1
90007772:	e184      	b.n	90007a7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007774:	687b      	ldr	r3, [r7, #4]
90007776:	681b      	ldr	r3, [r3, #0]
90007778:	f003 0304 	and.w	r3, r3, #4
9000777c:	2b00      	cmp	r3, #0
9000777e:	d010      	beq.n	900077a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007780:	687b      	ldr	r3, [r7, #4]
90007782:	691a      	ldr	r2, [r3, #16]
90007784:	4b7b      	ldr	r3, [pc, #492]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007786:	699b      	ldr	r3, [r3, #24]
90007788:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000778c:	429a      	cmp	r2, r3
9000778e:	d908      	bls.n	900077a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007790:	4b78      	ldr	r3, [pc, #480]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007792:	699b      	ldr	r3, [r3, #24]
90007794:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007798:	687b      	ldr	r3, [r7, #4]
9000779a:	691b      	ldr	r3, [r3, #16]
9000779c:	4975      	ldr	r1, [pc, #468]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
9000779e:	4313      	orrs	r3, r2
900077a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900077a2:	687b      	ldr	r3, [r7, #4]
900077a4:	681b      	ldr	r3, [r3, #0]
900077a6:	f003 0308 	and.w	r3, r3, #8
900077aa:	2b00      	cmp	r3, #0
900077ac:	d010      	beq.n	900077d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900077ae:	687b      	ldr	r3, [r7, #4]
900077b0:	695a      	ldr	r2, [r3, #20]
900077b2:	4b70      	ldr	r3, [pc, #448]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900077b4:	69db      	ldr	r3, [r3, #28]
900077b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900077ba:	429a      	cmp	r2, r3
900077bc:	d908      	bls.n	900077d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900077be:	4b6d      	ldr	r3, [pc, #436]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900077c0:	69db      	ldr	r3, [r3, #28]
900077c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900077c6:	687b      	ldr	r3, [r7, #4]
900077c8:	695b      	ldr	r3, [r3, #20]
900077ca:	496a      	ldr	r1, [pc, #424]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900077cc:	4313      	orrs	r3, r2
900077ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900077d0:	687b      	ldr	r3, [r7, #4]
900077d2:	681b      	ldr	r3, [r3, #0]
900077d4:	f003 0310 	and.w	r3, r3, #16
900077d8:	2b00      	cmp	r3, #0
900077da:	d010      	beq.n	900077fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900077dc:	687b      	ldr	r3, [r7, #4]
900077de:	699a      	ldr	r2, [r3, #24]
900077e0:	4b64      	ldr	r3, [pc, #400]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900077e2:	69db      	ldr	r3, [r3, #28]
900077e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900077e8:	429a      	cmp	r2, r3
900077ea:	d908      	bls.n	900077fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900077ec:	4b61      	ldr	r3, [pc, #388]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900077ee:	69db      	ldr	r3, [r3, #28]
900077f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900077f4:	687b      	ldr	r3, [r7, #4]
900077f6:	699b      	ldr	r3, [r3, #24]
900077f8:	495e      	ldr	r1, [pc, #376]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900077fa:	4313      	orrs	r3, r2
900077fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900077fe:	687b      	ldr	r3, [r7, #4]
90007800:	681b      	ldr	r3, [r3, #0]
90007802:	f003 0320 	and.w	r3, r3, #32
90007806:	2b00      	cmp	r3, #0
90007808:	d010      	beq.n	9000782c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000780a:	687b      	ldr	r3, [r7, #4]
9000780c:	69da      	ldr	r2, [r3, #28]
9000780e:	4b59      	ldr	r3, [pc, #356]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007810:	6a1b      	ldr	r3, [r3, #32]
90007812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007816:	429a      	cmp	r2, r3
90007818:	d908      	bls.n	9000782c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000781a:	4b56      	ldr	r3, [pc, #344]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
9000781c:	6a1b      	ldr	r3, [r3, #32]
9000781e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007822:	687b      	ldr	r3, [r7, #4]
90007824:	69db      	ldr	r3, [r3, #28]
90007826:	4953      	ldr	r1, [pc, #332]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007828:	4313      	orrs	r3, r2
9000782a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000782c:	687b      	ldr	r3, [r7, #4]
9000782e:	681b      	ldr	r3, [r3, #0]
90007830:	f003 0302 	and.w	r3, r3, #2
90007834:	2b00      	cmp	r3, #0
90007836:	d010      	beq.n	9000785a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90007838:	687b      	ldr	r3, [r7, #4]
9000783a:	68da      	ldr	r2, [r3, #12]
9000783c:	4b4d      	ldr	r3, [pc, #308]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
9000783e:	699b      	ldr	r3, [r3, #24]
90007840:	f003 030f 	and.w	r3, r3, #15
90007844:	429a      	cmp	r2, r3
90007846:	d908      	bls.n	9000785a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007848:	4b4a      	ldr	r3, [pc, #296]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
9000784a:	699b      	ldr	r3, [r3, #24]
9000784c:	f023 020f 	bic.w	r2, r3, #15
90007850:	687b      	ldr	r3, [r7, #4]
90007852:	68db      	ldr	r3, [r3, #12]
90007854:	4947      	ldr	r1, [pc, #284]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007856:	4313      	orrs	r3, r2
90007858:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000785a:	687b      	ldr	r3, [r7, #4]
9000785c:	681b      	ldr	r3, [r3, #0]
9000785e:	f003 0301 	and.w	r3, r3, #1
90007862:	2b00      	cmp	r3, #0
90007864:	d055      	beq.n	90007912 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90007866:	4b43      	ldr	r3, [pc, #268]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007868:	699b      	ldr	r3, [r3, #24]
9000786a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
9000786e:	687b      	ldr	r3, [r7, #4]
90007870:	689b      	ldr	r3, [r3, #8]
90007872:	4940      	ldr	r1, [pc, #256]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007874:	4313      	orrs	r3, r2
90007876:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007878:	687b      	ldr	r3, [r7, #4]
9000787a:	685b      	ldr	r3, [r3, #4]
9000787c:	2b02      	cmp	r3, #2
9000787e:	d107      	bne.n	90007890 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007880:	4b3c      	ldr	r3, [pc, #240]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007882:	681b      	ldr	r3, [r3, #0]
90007884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90007888:	2b00      	cmp	r3, #0
9000788a:	d121      	bne.n	900078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000788c:	2301      	movs	r3, #1
9000788e:	e0f6      	b.n	90007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007890:	687b      	ldr	r3, [r7, #4]
90007892:	685b      	ldr	r3, [r3, #4]
90007894:	2b03      	cmp	r3, #3
90007896:	d107      	bne.n	900078a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007898:	4b36      	ldr	r3, [pc, #216]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
9000789a:	681b      	ldr	r3, [r3, #0]
9000789c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900078a0:	2b00      	cmp	r3, #0
900078a2:	d115      	bne.n	900078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900078a4:	2301      	movs	r3, #1
900078a6:	e0ea      	b.n	90007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
900078a8:	687b      	ldr	r3, [r7, #4]
900078aa:	685b      	ldr	r3, [r3, #4]
900078ac:	2b01      	cmp	r3, #1
900078ae:	d107      	bne.n	900078c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900078b0:	4b30      	ldr	r3, [pc, #192]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900078b2:	681b      	ldr	r3, [r3, #0]
900078b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900078b8:	2b00      	cmp	r3, #0
900078ba:	d109      	bne.n	900078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900078bc:	2301      	movs	r3, #1
900078be:	e0de      	b.n	90007a7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900078c0:	4b2c      	ldr	r3, [pc, #176]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900078c2:	681b      	ldr	r3, [r3, #0]
900078c4:	f003 0304 	and.w	r3, r3, #4
900078c8:	2b00      	cmp	r3, #0
900078ca:	d101      	bne.n	900078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900078cc:	2301      	movs	r3, #1
900078ce:	e0d6      	b.n	90007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
900078d0:	4b28      	ldr	r3, [pc, #160]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900078d2:	691b      	ldr	r3, [r3, #16]
900078d4:	f023 0207 	bic.w	r2, r3, #7
900078d8:	687b      	ldr	r3, [r7, #4]
900078da:	685b      	ldr	r3, [r3, #4]
900078dc:	4925      	ldr	r1, [pc, #148]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
900078de:	4313      	orrs	r3, r2
900078e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900078e2:	f7fb fe23 	bl	9000352c <HAL_GetTick>
900078e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900078e8:	e00a      	b.n	90007900 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900078ea:	f7fb fe1f 	bl	9000352c <HAL_GetTick>
900078ee:	4602      	mov	r2, r0
900078f0:	697b      	ldr	r3, [r7, #20]
900078f2:	1ad3      	subs	r3, r2, r3
900078f4:	f241 3288 	movw	r2, #5000	@ 0x1388
900078f8:	4293      	cmp	r3, r2
900078fa:	d901      	bls.n	90007900 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
900078fc:	2303      	movs	r3, #3
900078fe:	e0be      	b.n	90007a7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007900:	4b1c      	ldr	r3, [pc, #112]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007902:	691b      	ldr	r3, [r3, #16]
90007904:	f003 0238 	and.w	r2, r3, #56	@ 0x38
90007908:	687b      	ldr	r3, [r7, #4]
9000790a:	685b      	ldr	r3, [r3, #4]
9000790c:	00db      	lsls	r3, r3, #3
9000790e:	429a      	cmp	r2, r3
90007910:	d1eb      	bne.n	900078ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007912:	687b      	ldr	r3, [r7, #4]
90007914:	681b      	ldr	r3, [r3, #0]
90007916:	f003 0302 	and.w	r3, r3, #2
9000791a:	2b00      	cmp	r3, #0
9000791c:	d010      	beq.n	90007940 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000791e:	687b      	ldr	r3, [r7, #4]
90007920:	68da      	ldr	r2, [r3, #12]
90007922:	4b14      	ldr	r3, [pc, #80]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007924:	699b      	ldr	r3, [r3, #24]
90007926:	f003 030f 	and.w	r3, r3, #15
9000792a:	429a      	cmp	r2, r3
9000792c:	d208      	bcs.n	90007940 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000792e:	4b11      	ldr	r3, [pc, #68]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
90007930:	699b      	ldr	r3, [r3, #24]
90007932:	f023 020f 	bic.w	r2, r3, #15
90007936:	687b      	ldr	r3, [r7, #4]
90007938:	68db      	ldr	r3, [r3, #12]
9000793a:	490e      	ldr	r1, [pc, #56]	@ (90007974 <HAL_RCC_ClockConfig+0x244>)
9000793c:	4313      	orrs	r3, r2
9000793e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90007940:	4b0b      	ldr	r3, [pc, #44]	@ (90007970 <HAL_RCC_ClockConfig+0x240>)
90007942:	681b      	ldr	r3, [r3, #0]
90007944:	f003 030f 	and.w	r3, r3, #15
90007948:	683a      	ldr	r2, [r7, #0]
9000794a:	429a      	cmp	r2, r3
9000794c:	d214      	bcs.n	90007978 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000794e:	4b08      	ldr	r3, [pc, #32]	@ (90007970 <HAL_RCC_ClockConfig+0x240>)
90007950:	681b      	ldr	r3, [r3, #0]
90007952:	f023 020f 	bic.w	r2, r3, #15
90007956:	4906      	ldr	r1, [pc, #24]	@ (90007970 <HAL_RCC_ClockConfig+0x240>)
90007958:	683b      	ldr	r3, [r7, #0]
9000795a:	4313      	orrs	r3, r2
9000795c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000795e:	4b04      	ldr	r3, [pc, #16]	@ (90007970 <HAL_RCC_ClockConfig+0x240>)
90007960:	681b      	ldr	r3, [r3, #0]
90007962:	f003 030f 	and.w	r3, r3, #15
90007966:	683a      	ldr	r2, [r7, #0]
90007968:	429a      	cmp	r2, r3
9000796a:	d005      	beq.n	90007978 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
9000796c:	2301      	movs	r3, #1
9000796e:	e086      	b.n	90007a7e <HAL_RCC_ClockConfig+0x34e>
90007970:	52002000 	.word	0x52002000
90007974:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007978:	687b      	ldr	r3, [r7, #4]
9000797a:	681b      	ldr	r3, [r3, #0]
9000797c:	f003 0304 	and.w	r3, r3, #4
90007980:	2b00      	cmp	r3, #0
90007982:	d010      	beq.n	900079a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007984:	687b      	ldr	r3, [r7, #4]
90007986:	691a      	ldr	r2, [r3, #16]
90007988:	4b3f      	ldr	r3, [pc, #252]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
9000798a:	699b      	ldr	r3, [r3, #24]
9000798c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007990:	429a      	cmp	r2, r3
90007992:	d208      	bcs.n	900079a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007994:	4b3c      	ldr	r3, [pc, #240]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
90007996:	699b      	ldr	r3, [r3, #24]
90007998:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000799c:	687b      	ldr	r3, [r7, #4]
9000799e:	691b      	ldr	r3, [r3, #16]
900079a0:	4939      	ldr	r1, [pc, #228]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
900079a2:	4313      	orrs	r3, r2
900079a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900079a6:	687b      	ldr	r3, [r7, #4]
900079a8:	681b      	ldr	r3, [r3, #0]
900079aa:	f003 0308 	and.w	r3, r3, #8
900079ae:	2b00      	cmp	r3, #0
900079b0:	d010      	beq.n	900079d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900079b2:	687b      	ldr	r3, [r7, #4]
900079b4:	695a      	ldr	r2, [r3, #20]
900079b6:	4b34      	ldr	r3, [pc, #208]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
900079b8:	69db      	ldr	r3, [r3, #28]
900079ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900079be:	429a      	cmp	r2, r3
900079c0:	d208      	bcs.n	900079d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900079c2:	4b31      	ldr	r3, [pc, #196]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
900079c4:	69db      	ldr	r3, [r3, #28]
900079c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900079ca:	687b      	ldr	r3, [r7, #4]
900079cc:	695b      	ldr	r3, [r3, #20]
900079ce:	492e      	ldr	r1, [pc, #184]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
900079d0:	4313      	orrs	r3, r2
900079d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900079d4:	687b      	ldr	r3, [r7, #4]
900079d6:	681b      	ldr	r3, [r3, #0]
900079d8:	f003 0310 	and.w	r3, r3, #16
900079dc:	2b00      	cmp	r3, #0
900079de:	d010      	beq.n	90007a02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900079e0:	687b      	ldr	r3, [r7, #4]
900079e2:	699a      	ldr	r2, [r3, #24]
900079e4:	4b28      	ldr	r3, [pc, #160]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
900079e6:	69db      	ldr	r3, [r3, #28]
900079e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900079ec:	429a      	cmp	r2, r3
900079ee:	d208      	bcs.n	90007a02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900079f0:	4b25      	ldr	r3, [pc, #148]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
900079f2:	69db      	ldr	r3, [r3, #28]
900079f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900079f8:	687b      	ldr	r3, [r7, #4]
900079fa:	699b      	ldr	r3, [r3, #24]
900079fc:	4922      	ldr	r1, [pc, #136]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
900079fe:	4313      	orrs	r3, r2
90007a00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007a02:	687b      	ldr	r3, [r7, #4]
90007a04:	681b      	ldr	r3, [r3, #0]
90007a06:	f003 0320 	and.w	r3, r3, #32
90007a0a:	2b00      	cmp	r3, #0
90007a0c:	d010      	beq.n	90007a30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90007a0e:	687b      	ldr	r3, [r7, #4]
90007a10:	69da      	ldr	r2, [r3, #28]
90007a12:	4b1d      	ldr	r3, [pc, #116]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
90007a14:	6a1b      	ldr	r3, [r3, #32]
90007a16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007a1a:	429a      	cmp	r2, r3
90007a1c:	d208      	bcs.n	90007a30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90007a1e:	4b1a      	ldr	r3, [pc, #104]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
90007a20:	6a1b      	ldr	r3, [r3, #32]
90007a22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007a26:	687b      	ldr	r3, [r7, #4]
90007a28:	69db      	ldr	r3, [r3, #28]
90007a2a:	4917      	ldr	r1, [pc, #92]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
90007a2c:	4313      	orrs	r3, r2
90007a2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007a30:	f000 f834 	bl	90007a9c <HAL_RCC_GetSysClockFreq>
90007a34:	4602      	mov	r2, r0
90007a36:	4b14      	ldr	r3, [pc, #80]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
90007a38:	699b      	ldr	r3, [r3, #24]
90007a3a:	0a1b      	lsrs	r3, r3, #8
90007a3c:	f003 030f 	and.w	r3, r3, #15
90007a40:	4912      	ldr	r1, [pc, #72]	@ (90007a8c <HAL_RCC_ClockConfig+0x35c>)
90007a42:	5ccb      	ldrb	r3, [r1, r3]
90007a44:	f003 031f 	and.w	r3, r3, #31
90007a48:	fa22 f303 	lsr.w	r3, r2, r3
90007a4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007a4e:	4b0e      	ldr	r3, [pc, #56]	@ (90007a88 <HAL_RCC_ClockConfig+0x358>)
90007a50:	699b      	ldr	r3, [r3, #24]
90007a52:	f003 030f 	and.w	r3, r3, #15
90007a56:	4a0d      	ldr	r2, [pc, #52]	@ (90007a8c <HAL_RCC_ClockConfig+0x35c>)
90007a58:	5cd3      	ldrb	r3, [r2, r3]
90007a5a:	f003 031f 	and.w	r3, r3, #31
90007a5e:	693a      	ldr	r2, [r7, #16]
90007a60:	fa22 f303 	lsr.w	r3, r2, r3
90007a64:	4a0a      	ldr	r2, [pc, #40]	@ (90007a90 <HAL_RCC_ClockConfig+0x360>)
90007a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007a68:	4a0a      	ldr	r2, [pc, #40]	@ (90007a94 <HAL_RCC_ClockConfig+0x364>)
90007a6a:	693b      	ldr	r3, [r7, #16]
90007a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007a6e:	4b0a      	ldr	r3, [pc, #40]	@ (90007a98 <HAL_RCC_ClockConfig+0x368>)
90007a70:	681b      	ldr	r3, [r3, #0]
90007a72:	4618      	mov	r0, r3
90007a74:	f7fb fd10 	bl	90003498 <HAL_InitTick>
90007a78:	4603      	mov	r3, r0
90007a7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
90007a7e:	4618      	mov	r0, r3
90007a80:	3718      	adds	r7, #24
90007a82:	46bd      	mov	sp, r7
90007a84:	bd80      	pop	{r7, pc}
90007a86:	bf00      	nop
90007a88:	58024400 	.word	0x58024400
90007a8c:	9000e580 	.word	0x9000e580
90007a90:	20000004 	.word	0x20000004
90007a94:	20000000 	.word	0x20000000
90007a98:	20000008 	.word	0x20000008

90007a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007a9c:	b480      	push	{r7}
90007a9e:	b089      	sub	sp, #36	@ 0x24
90007aa0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90007aa2:	4bb3      	ldr	r3, [pc, #716]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007aa4:	691b      	ldr	r3, [r3, #16]
90007aa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007aaa:	2b18      	cmp	r3, #24
90007aac:	f200 8155 	bhi.w	90007d5a <HAL_RCC_GetSysClockFreq+0x2be>
90007ab0:	a201      	add	r2, pc, #4	@ (adr r2, 90007ab8 <HAL_RCC_GetSysClockFreq+0x1c>)
90007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007ab6:	bf00      	nop
90007ab8:	90007b1d 	.word	0x90007b1d
90007abc:	90007d5b 	.word	0x90007d5b
90007ac0:	90007d5b 	.word	0x90007d5b
90007ac4:	90007d5b 	.word	0x90007d5b
90007ac8:	90007d5b 	.word	0x90007d5b
90007acc:	90007d5b 	.word	0x90007d5b
90007ad0:	90007d5b 	.word	0x90007d5b
90007ad4:	90007d5b 	.word	0x90007d5b
90007ad8:	90007b43 	.word	0x90007b43
90007adc:	90007d5b 	.word	0x90007d5b
90007ae0:	90007d5b 	.word	0x90007d5b
90007ae4:	90007d5b 	.word	0x90007d5b
90007ae8:	90007d5b 	.word	0x90007d5b
90007aec:	90007d5b 	.word	0x90007d5b
90007af0:	90007d5b 	.word	0x90007d5b
90007af4:	90007d5b 	.word	0x90007d5b
90007af8:	90007b49 	.word	0x90007b49
90007afc:	90007d5b 	.word	0x90007d5b
90007b00:	90007d5b 	.word	0x90007d5b
90007b04:	90007d5b 	.word	0x90007d5b
90007b08:	90007d5b 	.word	0x90007d5b
90007b0c:	90007d5b 	.word	0x90007d5b
90007b10:	90007d5b 	.word	0x90007d5b
90007b14:	90007d5b 	.word	0x90007d5b
90007b18:	90007b4f 	.word	0x90007b4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007b1c:	4b94      	ldr	r3, [pc, #592]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b1e:	681b      	ldr	r3, [r3, #0]
90007b20:	f003 0320 	and.w	r3, r3, #32
90007b24:	2b00      	cmp	r3, #0
90007b26:	d009      	beq.n	90007b3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007b28:	4b91      	ldr	r3, [pc, #580]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b2a:	681b      	ldr	r3, [r3, #0]
90007b2c:	08db      	lsrs	r3, r3, #3
90007b2e:	f003 0303 	and.w	r3, r3, #3
90007b32:	4a90      	ldr	r2, [pc, #576]	@ (90007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007b34:	fa22 f303 	lsr.w	r3, r2, r3
90007b38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
90007b3a:	e111      	b.n	90007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90007b3c:	4b8d      	ldr	r3, [pc, #564]	@ (90007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007b3e:	61bb      	str	r3, [r7, #24]
      break;
90007b40:	e10e      	b.n	90007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
90007b42:	4b8d      	ldr	r3, [pc, #564]	@ (90007d78 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007b44:	61bb      	str	r3, [r7, #24]
      break;
90007b46:	e10b      	b.n	90007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
90007b48:	4b8c      	ldr	r3, [pc, #560]	@ (90007d7c <HAL_RCC_GetSysClockFreq+0x2e0>)
90007b4a:	61bb      	str	r3, [r7, #24]
      break;
90007b4c:	e108      	b.n	90007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90007b4e:	4b88      	ldr	r3, [pc, #544]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007b52:	f003 0303 	and.w	r3, r3, #3
90007b56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90007b58:	4b85      	ldr	r3, [pc, #532]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007b5c:	091b      	lsrs	r3, r3, #4
90007b5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90007b62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90007b64:	4b82      	ldr	r3, [pc, #520]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007b68:	f003 0301 	and.w	r3, r3, #1
90007b6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007b6e:	4b80      	ldr	r3, [pc, #512]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007b72:	08db      	lsrs	r3, r3, #3
90007b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007b78:	68fa      	ldr	r2, [r7, #12]
90007b7a:	fb02 f303 	mul.w	r3, r2, r3
90007b7e:	ee07 3a90 	vmov	s15, r3
90007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007b86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90007b8a:	693b      	ldr	r3, [r7, #16]
90007b8c:	2b00      	cmp	r3, #0
90007b8e:	f000 80e1 	beq.w	90007d54 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90007b92:	697b      	ldr	r3, [r7, #20]
90007b94:	2b02      	cmp	r3, #2
90007b96:	f000 8083 	beq.w	90007ca0 <HAL_RCC_GetSysClockFreq+0x204>
90007b9a:	697b      	ldr	r3, [r7, #20]
90007b9c:	2b02      	cmp	r3, #2
90007b9e:	f200 80a1 	bhi.w	90007ce4 <HAL_RCC_GetSysClockFreq+0x248>
90007ba2:	697b      	ldr	r3, [r7, #20]
90007ba4:	2b00      	cmp	r3, #0
90007ba6:	d003      	beq.n	90007bb0 <HAL_RCC_GetSysClockFreq+0x114>
90007ba8:	697b      	ldr	r3, [r7, #20]
90007baa:	2b01      	cmp	r3, #1
90007bac:	d056      	beq.n	90007c5c <HAL_RCC_GetSysClockFreq+0x1c0>
90007bae:	e099      	b.n	90007ce4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007bb0:	4b6f      	ldr	r3, [pc, #444]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007bb2:	681b      	ldr	r3, [r3, #0]
90007bb4:	f003 0320 	and.w	r3, r3, #32
90007bb8:	2b00      	cmp	r3, #0
90007bba:	d02d      	beq.n	90007c18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007bbc:	4b6c      	ldr	r3, [pc, #432]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007bbe:	681b      	ldr	r3, [r3, #0]
90007bc0:	08db      	lsrs	r3, r3, #3
90007bc2:	f003 0303 	and.w	r3, r3, #3
90007bc6:	4a6b      	ldr	r2, [pc, #428]	@ (90007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007bc8:	fa22 f303 	lsr.w	r3, r2, r3
90007bcc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007bce:	687b      	ldr	r3, [r7, #4]
90007bd0:	ee07 3a90 	vmov	s15, r3
90007bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007bd8:	693b      	ldr	r3, [r7, #16]
90007bda:	ee07 3a90 	vmov	s15, r3
90007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007be6:	4b62      	ldr	r3, [pc, #392]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007bee:	ee07 3a90 	vmov	s15, r3
90007bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007bf6:	ed97 6a02 	vldr	s12, [r7, #8]
90007bfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
90007bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007c12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
90007c16:	e087      	b.n	90007d28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007c18:	693b      	ldr	r3, [r7, #16]
90007c1a:	ee07 3a90 	vmov	s15, r3
90007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007c22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007d84 <HAL_RCC_GetSysClockFreq+0x2e8>
90007c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007c2a:	4b51      	ldr	r3, [pc, #324]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007c32:	ee07 3a90 	vmov	s15, r3
90007c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007c3a:	ed97 6a02 	vldr	s12, [r7, #8]
90007c3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
90007c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007c52:	ee67 7a27 	vmul.f32	s15, s14, s15
90007c56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007c5a:	e065      	b.n	90007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007c5c:	693b      	ldr	r3, [r7, #16]
90007c5e:	ee07 3a90 	vmov	s15, r3
90007c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007c66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007d88 <HAL_RCC_GetSysClockFreq+0x2ec>
90007c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007c6e:	4b40      	ldr	r3, [pc, #256]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007c76:	ee07 3a90 	vmov	s15, r3
90007c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007c7e:	ed97 6a02 	vldr	s12, [r7, #8]
90007c82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
90007c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007c96:	ee67 7a27 	vmul.f32	s15, s14, s15
90007c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007c9e:	e043      	b.n	90007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007ca0:	693b      	ldr	r3, [r7, #16]
90007ca2:	ee07 3a90 	vmov	s15, r3
90007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007caa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007d8c <HAL_RCC_GetSysClockFreq+0x2f0>
90007cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007cb2:	4b2f      	ldr	r3, [pc, #188]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007cba:	ee07 3a90 	vmov	s15, r3
90007cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007cc2:	ed97 6a02 	vldr	s12, [r7, #8]
90007cc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
90007cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007cda:	ee67 7a27 	vmul.f32	s15, s14, s15
90007cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007ce2:	e021      	b.n	90007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007ce4:	693b      	ldr	r3, [r7, #16]
90007ce6:	ee07 3a90 	vmov	s15, r3
90007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007cee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007d88 <HAL_RCC_GetSysClockFreq+0x2ec>
90007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007cf6:	4b1e      	ldr	r3, [pc, #120]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007cfe:	ee07 3a90 	vmov	s15, r3
90007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007d06:	ed97 6a02 	vldr	s12, [r7, #8]
90007d0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
90007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007d22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007d26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007d28:	4b11      	ldr	r3, [pc, #68]	@ (90007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007d2c:	0a5b      	lsrs	r3, r3, #9
90007d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007d32:	3301      	adds	r3, #1
90007d34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007d36:	683b      	ldr	r3, [r7, #0]
90007d38:	ee07 3a90 	vmov	s15, r3
90007d3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007d40:	edd7 6a07 	vldr	s13, [r7, #28]
90007d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007d4c:	ee17 3a90 	vmov	r3, s15
90007d50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007d52:	e005      	b.n	90007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007d54:	2300      	movs	r3, #0
90007d56:	61bb      	str	r3, [r7, #24]
      break;
90007d58:	e002      	b.n	90007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007d5a:	4b07      	ldr	r3, [pc, #28]	@ (90007d78 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007d5c:	61bb      	str	r3, [r7, #24]
      break;
90007d5e:	bf00      	nop
  }

  return sysclockfreq;
90007d60:	69bb      	ldr	r3, [r7, #24]
}
90007d62:	4618      	mov	r0, r3
90007d64:	3724      	adds	r7, #36	@ 0x24
90007d66:	46bd      	mov	sp, r7
90007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
90007d6c:	4770      	bx	lr
90007d6e:	bf00      	nop
90007d70:	58024400 	.word	0x58024400
90007d74:	03d09000 	.word	0x03d09000
90007d78:	003d0900 	.word	0x003d0900
90007d7c:	017d7840 	.word	0x017d7840
90007d80:	46000000 	.word	0x46000000
90007d84:	4c742400 	.word	0x4c742400
90007d88:	4a742400 	.word	0x4a742400
90007d8c:	4bbebc20 	.word	0x4bbebc20

90007d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007d90:	b580      	push	{r7, lr}
90007d92:	b082      	sub	sp, #8
90007d94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007d96:	f7ff fe81 	bl	90007a9c <HAL_RCC_GetSysClockFreq>
90007d9a:	4602      	mov	r2, r0
90007d9c:	4b10      	ldr	r3, [pc, #64]	@ (90007de0 <HAL_RCC_GetHCLKFreq+0x50>)
90007d9e:	699b      	ldr	r3, [r3, #24]
90007da0:	0a1b      	lsrs	r3, r3, #8
90007da2:	f003 030f 	and.w	r3, r3, #15
90007da6:	490f      	ldr	r1, [pc, #60]	@ (90007de4 <HAL_RCC_GetHCLKFreq+0x54>)
90007da8:	5ccb      	ldrb	r3, [r1, r3]
90007daa:	f003 031f 	and.w	r3, r3, #31
90007dae:	fa22 f303 	lsr.w	r3, r2, r3
90007db2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007db4:	4b0a      	ldr	r3, [pc, #40]	@ (90007de0 <HAL_RCC_GetHCLKFreq+0x50>)
90007db6:	699b      	ldr	r3, [r3, #24]
90007db8:	f003 030f 	and.w	r3, r3, #15
90007dbc:	4a09      	ldr	r2, [pc, #36]	@ (90007de4 <HAL_RCC_GetHCLKFreq+0x54>)
90007dbe:	5cd3      	ldrb	r3, [r2, r3]
90007dc0:	f003 031f 	and.w	r3, r3, #31
90007dc4:	687a      	ldr	r2, [r7, #4]
90007dc6:	fa22 f303 	lsr.w	r3, r2, r3
90007dca:	4a07      	ldr	r2, [pc, #28]	@ (90007de8 <HAL_RCC_GetHCLKFreq+0x58>)
90007dcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007dce:	4a07      	ldr	r2, [pc, #28]	@ (90007dec <HAL_RCC_GetHCLKFreq+0x5c>)
90007dd0:	687b      	ldr	r3, [r7, #4]
90007dd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007dd4:	4b04      	ldr	r3, [pc, #16]	@ (90007de8 <HAL_RCC_GetHCLKFreq+0x58>)
90007dd6:	681b      	ldr	r3, [r3, #0]
}
90007dd8:	4618      	mov	r0, r3
90007dda:	3708      	adds	r7, #8
90007ddc:	46bd      	mov	sp, r7
90007dde:	bd80      	pop	{r7, pc}
90007de0:	58024400 	.word	0x58024400
90007de4:	9000e580 	.word	0x9000e580
90007de8:	20000004 	.word	0x20000004
90007dec:	20000000 	.word	0x20000000

90007df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007df0:	b580      	push	{r7, lr}
90007df2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007df4:	f7ff ffcc 	bl	90007d90 <HAL_RCC_GetHCLKFreq>
90007df8:	4602      	mov	r2, r0
90007dfa:	4b06      	ldr	r3, [pc, #24]	@ (90007e14 <HAL_RCC_GetPCLK1Freq+0x24>)
90007dfc:	69db      	ldr	r3, [r3, #28]
90007dfe:	091b      	lsrs	r3, r3, #4
90007e00:	f003 0307 	and.w	r3, r3, #7
90007e04:	4904      	ldr	r1, [pc, #16]	@ (90007e18 <HAL_RCC_GetPCLK1Freq+0x28>)
90007e06:	5ccb      	ldrb	r3, [r1, r3]
90007e08:	f003 031f 	and.w	r3, r3, #31
90007e0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90007e10:	4618      	mov	r0, r3
90007e12:	bd80      	pop	{r7, pc}
90007e14:	58024400 	.word	0x58024400
90007e18:	9000e580 	.word	0x9000e580

90007e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007e1c:	b580      	push	{r7, lr}
90007e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007e20:	f7ff ffb6 	bl	90007d90 <HAL_RCC_GetHCLKFreq>
90007e24:	4602      	mov	r2, r0
90007e26:	4b06      	ldr	r3, [pc, #24]	@ (90007e40 <HAL_RCC_GetPCLK2Freq+0x24>)
90007e28:	69db      	ldr	r3, [r3, #28]
90007e2a:	0a1b      	lsrs	r3, r3, #8
90007e2c:	f003 0307 	and.w	r3, r3, #7
90007e30:	4904      	ldr	r1, [pc, #16]	@ (90007e44 <HAL_RCC_GetPCLK2Freq+0x28>)
90007e32:	5ccb      	ldrb	r3, [r1, r3]
90007e34:	f003 031f 	and.w	r3, r3, #31
90007e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007e3c:	4618      	mov	r0, r3
90007e3e:	bd80      	pop	{r7, pc}
90007e40:	58024400 	.word	0x58024400
90007e44:	9000e580 	.word	0x9000e580

90007e48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007e4c:	b0ca      	sub	sp, #296	@ 0x128
90007e4e:	af00      	add	r7, sp, #0
90007e50:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007e54:	2300      	movs	r3, #0
90007e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007e5a:	2300      	movs	r3, #0
90007e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007e6c:	2500      	movs	r5, #0
90007e6e:	ea54 0305 	orrs.w	r3, r4, r5
90007e72:	d049      	beq.n	90007f08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007e7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007e7e:	d02f      	beq.n	90007ee0 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007e80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007e84:	d828      	bhi.n	90007ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007e86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007e8a:	d01a      	beq.n	90007ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007e8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007e90:	d822      	bhi.n	90007ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007e92:	2b00      	cmp	r3, #0
90007e94:	d003      	beq.n	90007e9e <HAL_RCCEx_PeriphCLKConfig+0x56>
90007e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007e9a:	d007      	beq.n	90007eac <HAL_RCCEx_PeriphCLKConfig+0x64>
90007e9c:	e01c      	b.n	90007ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e9e:	4bb8      	ldr	r3, [pc, #736]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ea2:	4ab7      	ldr	r2, [pc, #732]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007eaa:	e01a      	b.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007eb0:	3308      	adds	r3, #8
90007eb2:	2102      	movs	r1, #2
90007eb4:	4618      	mov	r0, r3
90007eb6:	f001 fc8f 	bl	900097d8 <RCCEx_PLL2_Config>
90007eba:	4603      	mov	r3, r0
90007ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007ec0:	e00f      	b.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ec6:	3328      	adds	r3, #40	@ 0x28
90007ec8:	2102      	movs	r1, #2
90007eca:	4618      	mov	r0, r3
90007ecc:	f001 fd36 	bl	9000993c <RCCEx_PLL3_Config>
90007ed0:	4603      	mov	r3, r0
90007ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007ed6:	e004      	b.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007ed8:	2301      	movs	r3, #1
90007eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007ede:	e000      	b.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
90007ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ee6:	2b00      	cmp	r3, #0
90007ee8:	d10a      	bne.n	90007f00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007eea:	4ba5      	ldr	r3, [pc, #660]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007eee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007ef8:	4aa1      	ldr	r2, [pc, #644]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007efa:	430b      	orrs	r3, r1
90007efc:	6513      	str	r3, [r2, #80]	@ 0x50
90007efe:	e003      	b.n	90007f08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007f14:	f04f 0900 	mov.w	r9, #0
90007f18:	ea58 0309 	orrs.w	r3, r8, r9
90007f1c:	d047      	beq.n	90007fae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007f24:	2b04      	cmp	r3, #4
90007f26:	d82a      	bhi.n	90007f7e <HAL_RCCEx_PeriphCLKConfig+0x136>
90007f28:	a201      	add	r2, pc, #4	@ (adr r2, 90007f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007f2e:	bf00      	nop
90007f30:	90007f45 	.word	0x90007f45
90007f34:	90007f53 	.word	0x90007f53
90007f38:	90007f69 	.word	0x90007f69
90007f3c:	90007f87 	.word	0x90007f87
90007f40:	90007f87 	.word	0x90007f87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f44:	4b8e      	ldr	r3, [pc, #568]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f48:	4a8d      	ldr	r2, [pc, #564]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f50:	e01a      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f56:	3308      	adds	r3, #8
90007f58:	2100      	movs	r1, #0
90007f5a:	4618      	mov	r0, r3
90007f5c:	f001 fc3c 	bl	900097d8 <RCCEx_PLL2_Config>
90007f60:	4603      	mov	r3, r0
90007f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f66:	e00f      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f6c:	3328      	adds	r3, #40	@ 0x28
90007f6e:	2100      	movs	r1, #0
90007f70:	4618      	mov	r0, r3
90007f72:	f001 fce3 	bl	9000993c <RCCEx_PLL3_Config>
90007f76:	4603      	mov	r3, r0
90007f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f7c:	e004      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007f7e:	2301      	movs	r3, #1
90007f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f84:	e000      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007f86:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f8c:	2b00      	cmp	r3, #0
90007f8e:	d10a      	bne.n	90007fa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007f90:	4b7b      	ldr	r3, [pc, #492]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007f94:	f023 0107 	bic.w	r1, r3, #7
90007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007f9e:	4a78      	ldr	r2, [pc, #480]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007fa0:	430b      	orrs	r3, r1
90007fa2:	6513      	str	r3, [r2, #80]	@ 0x50
90007fa4:	e003      	b.n	90007fae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
90007fb6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007fba:	f04f 0b00 	mov.w	fp, #0
90007fbe:	ea5a 030b 	orrs.w	r3, sl, fp
90007fc2:	d04c      	beq.n	9000805e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007fce:	d030      	beq.n	90008032 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007fd4:	d829      	bhi.n	9000802a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007fd6:	2bc0      	cmp	r3, #192	@ 0xc0
90007fd8:	d02d      	beq.n	90008036 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007fda:	2bc0      	cmp	r3, #192	@ 0xc0
90007fdc:	d825      	bhi.n	9000802a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007fde:	2b80      	cmp	r3, #128	@ 0x80
90007fe0:	d018      	beq.n	90008014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007fe2:	2b80      	cmp	r3, #128	@ 0x80
90007fe4:	d821      	bhi.n	9000802a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007fe6:	2b00      	cmp	r3, #0
90007fe8:	d002      	beq.n	90007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007fea:	2b40      	cmp	r3, #64	@ 0x40
90007fec:	d007      	beq.n	90007ffe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007fee:	e01c      	b.n	9000802a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ff0:	4b63      	ldr	r3, [pc, #396]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ff4:	4a62      	ldr	r2, [pc, #392]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007ffc:	e01c      	b.n	90008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008002:	3308      	adds	r3, #8
90008004:	2100      	movs	r1, #0
90008006:	4618      	mov	r0, r3
90008008:	f001 fbe6 	bl	900097d8 <RCCEx_PLL2_Config>
9000800c:	4603      	mov	r3, r0
9000800e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90008012:	e011      	b.n	90008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008018:	3328      	adds	r3, #40	@ 0x28
9000801a:	2100      	movs	r1, #0
9000801c:	4618      	mov	r0, r3
9000801e:	f001 fc8d 	bl	9000993c <RCCEx_PLL3_Config>
90008022:	4603      	mov	r3, r0
90008024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90008028:	e006      	b.n	90008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000802a:	2301      	movs	r3, #1
9000802c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008030:	e002      	b.n	90008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90008032:	bf00      	nop
90008034:	e000      	b.n	90008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90008036:	bf00      	nop
    }

    if (ret == HAL_OK)
90008038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000803c:	2b00      	cmp	r3, #0
9000803e:	d10a      	bne.n	90008056 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90008040:	4b4f      	ldr	r3, [pc, #316]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008044:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000804c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
9000804e:	4a4c      	ldr	r2, [pc, #304]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008050:	430b      	orrs	r3, r1
90008052:	6513      	str	r3, [r2, #80]	@ 0x50
90008054:	e003      	b.n	9000805e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000805a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008062:	e9d3 2300 	ldrd	r2, r3, [r3]
90008066:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
9000806a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
9000806e:	2300      	movs	r3, #0
90008070:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90008074:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90008078:	460b      	mov	r3, r1
9000807a:	4313      	orrs	r3, r2
9000807c:	d053      	beq.n	90008126 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
9000807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90008086:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
9000808a:	d035      	beq.n	900080f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
9000808c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90008090:	d82e      	bhi.n	900080f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90008092:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90008096:	d031      	beq.n	900080fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90008098:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
9000809c:	d828      	bhi.n	900080f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000809e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
900080a2:	d01a      	beq.n	900080da <HAL_RCCEx_PeriphCLKConfig+0x292>
900080a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
900080a8:	d822      	bhi.n	900080f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
900080aa:	2b00      	cmp	r3, #0
900080ac:	d003      	beq.n	900080b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
900080ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
900080b2:	d007      	beq.n	900080c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
900080b4:	e01c      	b.n	900080f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900080b6:	4b32      	ldr	r3, [pc, #200]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900080b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900080ba:	4a31      	ldr	r2, [pc, #196]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900080bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900080c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900080c2:	e01c      	b.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900080c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080c8:	3308      	adds	r3, #8
900080ca:	2100      	movs	r1, #0
900080cc:	4618      	mov	r0, r3
900080ce:	f001 fb83 	bl	900097d8 <RCCEx_PLL2_Config>
900080d2:	4603      	mov	r3, r0
900080d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
900080d8:	e011      	b.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080de:	3328      	adds	r3, #40	@ 0x28
900080e0:	2100      	movs	r1, #0
900080e2:	4618      	mov	r0, r3
900080e4:	f001 fc2a 	bl	9000993c <RCCEx_PLL3_Config>
900080e8:	4603      	mov	r3, r0
900080ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900080ee:	e006      	b.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
900080f0:	2301      	movs	r3, #1
900080f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900080f6:	e002      	b.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900080f8:	bf00      	nop
900080fa:	e000      	b.n	900080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900080fc:	bf00      	nop
    }

    if (ret == HAL_OK)
900080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008102:	2b00      	cmp	r3, #0
90008104:	d10b      	bne.n	9000811e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90008106:	4b1e      	ldr	r3, [pc, #120]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000810a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
9000810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90008116:	4a1a      	ldr	r2, [pc, #104]	@ (90008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008118:	430b      	orrs	r3, r1
9000811a:	6593      	str	r3, [r2, #88]	@ 0x58
9000811c:	e003      	b.n	90008126 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000812a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000812e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90008132:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90008136:	2300      	movs	r3, #0
90008138:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
9000813c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90008140:	460b      	mov	r3, r1
90008142:	4313      	orrs	r3, r2
90008144:	d056      	beq.n	900081f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000814a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
9000814e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90008152:	d038      	beq.n	900081c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90008154:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90008158:	d831      	bhi.n	900081be <HAL_RCCEx_PeriphCLKConfig+0x376>
9000815a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
9000815e:	d034      	beq.n	900081ca <HAL_RCCEx_PeriphCLKConfig+0x382>
90008160:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90008164:	d82b      	bhi.n	900081be <HAL_RCCEx_PeriphCLKConfig+0x376>
90008166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000816a:	d01d      	beq.n	900081a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
9000816c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90008170:	d825      	bhi.n	900081be <HAL_RCCEx_PeriphCLKConfig+0x376>
90008172:	2b00      	cmp	r3, #0
90008174:	d006      	beq.n	90008184 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90008176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
9000817a:	d00a      	beq.n	90008192 <HAL_RCCEx_PeriphCLKConfig+0x34a>
9000817c:	e01f      	b.n	900081be <HAL_RCCEx_PeriphCLKConfig+0x376>
9000817e:	bf00      	nop
90008180:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008184:	4ba2      	ldr	r3, [pc, #648]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008188:	4aa1      	ldr	r2, [pc, #644]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000818a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000818e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008190:	e01c      	b.n	900081cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008196:	3308      	adds	r3, #8
90008198:	2100      	movs	r1, #0
9000819a:	4618      	mov	r0, r3
9000819c:	f001 fb1c 	bl	900097d8 <RCCEx_PLL2_Config>
900081a0:	4603      	mov	r3, r0
900081a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
900081a6:	e011      	b.n	900081cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081ac:	3328      	adds	r3, #40	@ 0x28
900081ae:	2100      	movs	r1, #0
900081b0:	4618      	mov	r0, r3
900081b2:	f001 fbc3 	bl	9000993c <RCCEx_PLL3_Config>
900081b6:	4603      	mov	r3, r0
900081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900081bc:	e006      	b.n	900081cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
900081be:	2301      	movs	r3, #1
900081c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900081c4:	e002      	b.n	900081cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
900081c6:	bf00      	nop
900081c8:	e000      	b.n	900081cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
900081ca:	bf00      	nop
    }

    if (ret == HAL_OK)
900081cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081d0:	2b00      	cmp	r3, #0
900081d2:	d10b      	bne.n	900081ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
900081d4:	4b8e      	ldr	r3, [pc, #568]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900081d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
900081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
900081e4:	4a8a      	ldr	r2, [pc, #552]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081e6:	430b      	orrs	r3, r1
900081e8:	6593      	str	r3, [r2, #88]	@ 0x58
900081ea:	e003      	b.n	900081f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
900081ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
900081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
900081fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90008200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90008204:	2300      	movs	r3, #0
90008206:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
9000820a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
9000820e:	460b      	mov	r3, r1
90008210:	4313      	orrs	r3, r2
90008212:	d03a      	beq.n	9000828a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000821a:	2b30      	cmp	r3, #48	@ 0x30
9000821c:	d01f      	beq.n	9000825e <HAL_RCCEx_PeriphCLKConfig+0x416>
9000821e:	2b30      	cmp	r3, #48	@ 0x30
90008220:	d819      	bhi.n	90008256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90008222:	2b20      	cmp	r3, #32
90008224:	d00c      	beq.n	90008240 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90008226:	2b20      	cmp	r3, #32
90008228:	d815      	bhi.n	90008256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
9000822a:	2b00      	cmp	r3, #0
9000822c:	d019      	beq.n	90008262 <HAL_RCCEx_PeriphCLKConfig+0x41a>
9000822e:	2b10      	cmp	r3, #16
90008230:	d111      	bne.n	90008256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008232:	4b77      	ldr	r3, [pc, #476]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008236:	4a76      	ldr	r2, [pc, #472]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000823c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
9000823e:	e011      	b.n	90008264 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008244:	3308      	adds	r3, #8
90008246:	2102      	movs	r1, #2
90008248:	4618      	mov	r0, r3
9000824a:	f001 fac5 	bl	900097d8 <RCCEx_PLL2_Config>
9000824e:	4603      	mov	r3, r0
90008250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90008254:	e006      	b.n	90008264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008256:	2301      	movs	r3, #1
90008258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000825c:	e002      	b.n	90008264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000825e:	bf00      	nop
90008260:	e000      	b.n	90008264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90008262:	bf00      	nop
    }

    if (ret == HAL_OK)
90008264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008268:	2b00      	cmp	r3, #0
9000826a:	d10a      	bne.n	90008282 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000826c:	4b68      	ldr	r3, [pc, #416]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000826e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008270:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000827a:	4a65      	ldr	r2, [pc, #404]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000827c:	430b      	orrs	r3, r1
9000827e:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008280:	e003      	b.n	9000828a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000828e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008292:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90008296:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
9000829a:	2300      	movs	r3, #0
9000829c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
900082a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
900082a4:	460b      	mov	r3, r1
900082a6:	4313      	orrs	r3, r2
900082a8:	d051      	beq.n	9000834e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
900082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
900082b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900082b4:	d035      	beq.n	90008322 <HAL_RCCEx_PeriphCLKConfig+0x4da>
900082b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
900082ba:	d82e      	bhi.n	9000831a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900082bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
900082c0:	d031      	beq.n	90008326 <HAL_RCCEx_PeriphCLKConfig+0x4de>
900082c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
900082c6:	d828      	bhi.n	9000831a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900082c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900082cc:	d01a      	beq.n	90008304 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
900082ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900082d2:	d822      	bhi.n	9000831a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900082d4:	2b00      	cmp	r3, #0
900082d6:	d003      	beq.n	900082e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
900082d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900082dc:	d007      	beq.n	900082ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
900082de:	e01c      	b.n	9000831a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900082e0:	4b4b      	ldr	r3, [pc, #300]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900082e4:	4a4a      	ldr	r2, [pc, #296]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900082e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900082ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900082ec:	e01c      	b.n	90008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082f2:	3308      	adds	r3, #8
900082f4:	2100      	movs	r1, #0
900082f6:	4618      	mov	r0, r3
900082f8:	f001 fa6e 	bl	900097d8 <RCCEx_PLL2_Config>
900082fc:	4603      	mov	r3, r0
900082fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008302:	e011      	b.n	90008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008308:	3328      	adds	r3, #40	@ 0x28
9000830a:	2100      	movs	r1, #0
9000830c:	4618      	mov	r0, r3
9000830e:	f001 fb15 	bl	9000993c <RCCEx_PLL3_Config>
90008312:	4603      	mov	r3, r0
90008314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008318:	e006      	b.n	90008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000831a:	2301      	movs	r3, #1
9000831c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008320:	e002      	b.n	90008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008322:	bf00      	nop
90008324:	e000      	b.n	90008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008326:	bf00      	nop
    }

    if (ret == HAL_OK)
90008328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000832c:	2b00      	cmp	r3, #0
9000832e:	d10a      	bne.n	90008346 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90008330:	4b37      	ldr	r3, [pc, #220]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008334:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
90008338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000833c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
9000833e:	4a34      	ldr	r2, [pc, #208]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008340:	430b      	orrs	r3, r1
90008342:	6513      	str	r3, [r2, #80]	@ 0x50
90008344:	e003      	b.n	9000834e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000834a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008352:	e9d3 2300 	ldrd	r2, r3, [r3]
90008356:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
9000835a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
9000835e:	2300      	movs	r3, #0
90008360:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90008364:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90008368:	460b      	mov	r3, r1
9000836a:	4313      	orrs	r3, r2
9000836c:	d056      	beq.n	9000841c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
9000836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008378:	d033      	beq.n	900083e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
9000837a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000837e:	d82c      	bhi.n	900083da <HAL_RCCEx_PeriphCLKConfig+0x592>
90008380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008384:	d02f      	beq.n	900083e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90008386:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000838a:	d826      	bhi.n	900083da <HAL_RCCEx_PeriphCLKConfig+0x592>
9000838c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008390:	d02b      	beq.n	900083ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90008392:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008396:	d820      	bhi.n	900083da <HAL_RCCEx_PeriphCLKConfig+0x592>
90008398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000839c:	d012      	beq.n	900083c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
9000839e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900083a2:	d81a      	bhi.n	900083da <HAL_RCCEx_PeriphCLKConfig+0x592>
900083a4:	2b00      	cmp	r3, #0
900083a6:	d022      	beq.n	900083ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
900083a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
900083ac:	d115      	bne.n	900083da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900083ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083b2:	3308      	adds	r3, #8
900083b4:	2101      	movs	r1, #1
900083b6:	4618      	mov	r0, r3
900083b8:	f001 fa0e 	bl	900097d8 <RCCEx_PLL2_Config>
900083bc:	4603      	mov	r3, r0
900083be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900083c2:	e015      	b.n	900083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083c8:	3328      	adds	r3, #40	@ 0x28
900083ca:	2101      	movs	r1, #1
900083cc:	4618      	mov	r0, r3
900083ce:	f001 fab5 	bl	9000993c <RCCEx_PLL3_Config>
900083d2:	4603      	mov	r3, r0
900083d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900083d8:	e00a      	b.n	900083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900083da:	2301      	movs	r3, #1
900083dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900083e0:	e006      	b.n	900083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900083e2:	bf00      	nop
900083e4:	e004      	b.n	900083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900083e6:	bf00      	nop
900083e8:	e002      	b.n	900083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900083ea:	bf00      	nop
900083ec:	e000      	b.n	900083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900083ee:	bf00      	nop
    }

    if (ret == HAL_OK)
900083f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083f4:	2b00      	cmp	r3, #0
900083f6:	d10d      	bne.n	90008414 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900083f8:	4b05      	ldr	r3, [pc, #20]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900083fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900083fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
90008400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008406:	4a02      	ldr	r2, [pc, #8]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008408:	430b      	orrs	r3, r1
9000840a:	6513      	str	r3, [r2, #80]	@ 0x50
9000840c:	e006      	b.n	9000841c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
9000840e:	bf00      	nop
90008410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008420:	e9d3 2300 	ldrd	r2, r3, [r3]
90008424:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
90008428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
9000842c:	2300      	movs	r3, #0
9000842e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90008432:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
90008436:	460b      	mov	r3, r1
90008438:	4313      	orrs	r3, r2
9000843a:	d055      	beq.n	900084e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
9000843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008448:	d033      	beq.n	900084b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
9000844a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000844e:	d82c      	bhi.n	900084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
90008450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008454:	d02f      	beq.n	900084b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
90008456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000845a:	d826      	bhi.n	900084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
9000845c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008460:	d02b      	beq.n	900084ba <HAL_RCCEx_PeriphCLKConfig+0x672>
90008462:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008466:	d820      	bhi.n	900084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
90008468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000846c:	d012      	beq.n	90008494 <HAL_RCCEx_PeriphCLKConfig+0x64c>
9000846e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008472:	d81a      	bhi.n	900084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
90008474:	2b00      	cmp	r3, #0
90008476:	d022      	beq.n	900084be <HAL_RCCEx_PeriphCLKConfig+0x676>
90008478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000847c:	d115      	bne.n	900084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008482:	3308      	adds	r3, #8
90008484:	2101      	movs	r1, #1
90008486:	4618      	mov	r0, r3
90008488:	f001 f9a6 	bl	900097d8 <RCCEx_PLL2_Config>
9000848c:	4603      	mov	r3, r0
9000848e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008492:	e015      	b.n	900084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008498:	3328      	adds	r3, #40	@ 0x28
9000849a:	2101      	movs	r1, #1
9000849c:	4618      	mov	r0, r3
9000849e:	f001 fa4d 	bl	9000993c <RCCEx_PLL3_Config>
900084a2:	4603      	mov	r3, r0
900084a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
900084a8:	e00a      	b.n	900084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
900084aa:	2301      	movs	r3, #1
900084ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900084b0:	e006      	b.n	900084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900084b2:	bf00      	nop
900084b4:	e004      	b.n	900084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900084b6:	bf00      	nop
900084b8:	e002      	b.n	900084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900084ba:	bf00      	nop
900084bc:	e000      	b.n	900084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900084be:	bf00      	nop
    }

    if (ret == HAL_OK)
900084c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084c4:	2b00      	cmp	r3, #0
900084c6:	d10b      	bne.n	900084e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
900084c8:	4ba3      	ldr	r3, [pc, #652]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900084cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900084d8:	4a9f      	ldr	r2, [pc, #636]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084da:	430b      	orrs	r3, r1
900084dc:	6593      	str	r3, [r2, #88]	@ 0x58
900084de:	e003      	b.n	900084e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
900084e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
900084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
900084f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
900084f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
900084f8:	2300      	movs	r3, #0
900084fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
900084fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
90008502:	460b      	mov	r3, r1
90008504:	4313      	orrs	r3, r2
90008506:	d037      	beq.n	90008578 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
90008508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000850c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000850e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008512:	d00e      	beq.n	90008532 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90008514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008518:	d816      	bhi.n	90008548 <HAL_RCCEx_PeriphCLKConfig+0x700>
9000851a:	2b00      	cmp	r3, #0
9000851c:	d018      	beq.n	90008550 <HAL_RCCEx_PeriphCLKConfig+0x708>
9000851e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008522:	d111      	bne.n	90008548 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008524:	4b8c      	ldr	r3, [pc, #560]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008528:	4a8b      	ldr	r2, [pc, #556]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000852a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000852e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008530:	e00f      	b.n	90008552 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008536:	3308      	adds	r3, #8
90008538:	2101      	movs	r1, #1
9000853a:	4618      	mov	r0, r3
9000853c:	f001 f94c 	bl	900097d8 <RCCEx_PLL2_Config>
90008540:	4603      	mov	r3, r0
90008542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008546:	e004      	b.n	90008552 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008548:	2301      	movs	r3, #1
9000854a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000854e:	e000      	b.n	90008552 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90008550:	bf00      	nop
    }

    if (ret == HAL_OK)
90008552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008556:	2b00      	cmp	r3, #0
90008558:	d10a      	bne.n	90008570 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000855a:	4b7f      	ldr	r3, [pc, #508]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000855c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000855e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008568:	4a7b      	ldr	r2, [pc, #492]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000856a:	430b      	orrs	r3, r1
9000856c:	6513      	str	r3, [r2, #80]	@ 0x50
9000856e:	e003      	b.n	90008578 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000857c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008580:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90008588:	2300      	movs	r3, #0
9000858a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
9000858e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008592:	460b      	mov	r3, r1
90008594:	4313      	orrs	r3, r2
90008596:	d039      	beq.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000859c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000859e:	2b03      	cmp	r3, #3
900085a0:	d81c      	bhi.n	900085dc <HAL_RCCEx_PeriphCLKConfig+0x794>
900085a2:	a201      	add	r2, pc, #4	@ (adr r2, 900085a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
900085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900085a8:	900085e5 	.word	0x900085e5
900085ac:	900085b9 	.word	0x900085b9
900085b0:	900085c7 	.word	0x900085c7
900085b4:	900085e5 	.word	0x900085e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900085b8:	4b67      	ldr	r3, [pc, #412]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900085bc:	4a66      	ldr	r2, [pc, #408]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900085be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900085c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
900085c4:	e00f      	b.n	900085e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085ca:	3308      	adds	r3, #8
900085cc:	2102      	movs	r1, #2
900085ce:	4618      	mov	r0, r3
900085d0:	f001 f902 	bl	900097d8 <RCCEx_PLL2_Config>
900085d4:	4603      	mov	r3, r0
900085d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
900085da:	e004      	b.n	900085e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
900085dc:	2301      	movs	r3, #1
900085de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900085e2:	e000      	b.n	900085e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
900085e4:	bf00      	nop
    }

    if (ret == HAL_OK)
900085e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085ea:	2b00      	cmp	r3, #0
900085ec:	d10a      	bne.n	90008604 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
900085ee:	4b5a      	ldr	r3, [pc, #360]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900085f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900085f2:	f023 0103 	bic.w	r1, r3, #3
900085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900085fc:	4a56      	ldr	r2, [pc, #344]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900085fe:	430b      	orrs	r3, r1
90008600:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008602:	e003      	b.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008610:	e9d3 2300 	ldrd	r2, r3, [r3]
90008614:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
90008618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
9000861c:	2300      	movs	r3, #0
9000861e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
90008622:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
90008626:	460b      	mov	r3, r1
90008628:	4313      	orrs	r3, r2
9000862a:	f000 809f 	beq.w	9000876c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000862e:	4b4b      	ldr	r3, [pc, #300]	@ (9000875c <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008630:	681b      	ldr	r3, [r3, #0]
90008632:	4a4a      	ldr	r2, [pc, #296]	@ (9000875c <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90008638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000863a:	f7fa ff77 	bl	9000352c <HAL_GetTick>
9000863e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008642:	e00b      	b.n	9000865c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90008644:	f7fa ff72 	bl	9000352c <HAL_GetTick>
90008648:	4602      	mov	r2, r0
9000864a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
9000864e:	1ad3      	subs	r3, r2, r3
90008650:	2b64      	cmp	r3, #100	@ 0x64
90008652:	d903      	bls.n	9000865c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90008654:	2303      	movs	r3, #3
90008656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000865a:	e005      	b.n	90008668 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000865c:	4b3f      	ldr	r3, [pc, #252]	@ (9000875c <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000865e:	681b      	ldr	r3, [r3, #0]
90008660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90008664:	2b00      	cmp	r3, #0
90008666:	d0ed      	beq.n	90008644 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90008668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000866c:	2b00      	cmp	r3, #0
9000866e:	d179      	bne.n	90008764 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008670:	4b39      	ldr	r3, [pc, #228]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008672:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000867c:	4053      	eors	r3, r2
9000867e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008682:	2b00      	cmp	r3, #0
90008684:	d015      	beq.n	900086b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90008686:	4b34      	ldr	r3, [pc, #208]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000868a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000868e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90008692:	4b31      	ldr	r3, [pc, #196]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008696:	4a30      	ldr	r2, [pc, #192]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000869c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000869e:	4b2e      	ldr	r3, [pc, #184]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900086a2:	4a2d      	ldr	r2, [pc, #180]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900086a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
900086aa:	4a2b      	ldr	r2, [pc, #172]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
900086b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
900086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900086ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900086be:	d118      	bne.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900086c0:	f7fa ff34 	bl	9000352c <HAL_GetTick>
900086c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900086c8:	e00d      	b.n	900086e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900086ca:	f7fa ff2f 	bl	9000352c <HAL_GetTick>
900086ce:	4602      	mov	r2, r0
900086d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900086d4:	1ad2      	subs	r2, r2, r3
900086d6:	f241 3388 	movw	r3, #5000	@ 0x1388
900086da:	429a      	cmp	r2, r3
900086dc:	d903      	bls.n	900086e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
900086de:	2303      	movs	r3, #3
900086e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
900086e4:	e005      	b.n	900086f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900086e6:	4b1c      	ldr	r3, [pc, #112]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900086ea:	f003 0302 	and.w	r3, r3, #2
900086ee:	2b00      	cmp	r3, #0
900086f0:	d0eb      	beq.n	900086ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
900086f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086f6:	2b00      	cmp	r3, #0
900086f8:	d129      	bne.n	9000874e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000870a:	d10e      	bne.n	9000872a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
9000870c:	4b12      	ldr	r3, [pc, #72]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000870e:	691b      	ldr	r3, [r3, #16]
90008710:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
90008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000871c:	091a      	lsrs	r2, r3, #4
9000871e:	4b10      	ldr	r3, [pc, #64]	@ (90008760 <HAL_RCCEx_PeriphCLKConfig+0x918>)
90008720:	4013      	ands	r3, r2
90008722:	4a0d      	ldr	r2, [pc, #52]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008724:	430b      	orrs	r3, r1
90008726:	6113      	str	r3, [r2, #16]
90008728:	e005      	b.n	90008736 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000872a:	4b0b      	ldr	r3, [pc, #44]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000872c:	691b      	ldr	r3, [r3, #16]
9000872e:	4a0a      	ldr	r2, [pc, #40]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008730:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90008734:	6113      	str	r3, [r2, #16]
90008736:	4b08      	ldr	r3, [pc, #32]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008738:	6f19      	ldr	r1, [r3, #112]	@ 0x70
9000873a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000873e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008742:	f3c3 030b 	ubfx	r3, r3, #0, #12
90008746:	4a04      	ldr	r2, [pc, #16]	@ (90008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008748:	430b      	orrs	r3, r1
9000874a:	6713      	str	r3, [r2, #112]	@ 0x70
9000874c:	e00e      	b.n	9000876c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
9000874e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
90008756:	e009      	b.n	9000876c <HAL_RCCEx_PeriphCLKConfig+0x924>
90008758:	58024400 	.word	0x58024400
9000875c:	58024800 	.word	0x58024800
90008760:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90008764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008770:	e9d3 2300 	ldrd	r2, r3, [r3]
90008774:	f002 0301 	and.w	r3, r2, #1
90008778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
9000877c:	2300      	movs	r3, #0
9000877e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008782:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
90008786:	460b      	mov	r3, r1
90008788:	4313      	orrs	r3, r2
9000878a:	f000 8089 	beq.w	900088a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
9000878e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008794:	2b28      	cmp	r3, #40	@ 0x28
90008796:	d86b      	bhi.n	90008870 <HAL_RCCEx_PeriphCLKConfig+0xa28>
90008798:	a201      	add	r2, pc, #4	@ (adr r2, 900087a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000879e:	bf00      	nop
900087a0:	90008879 	.word	0x90008879
900087a4:	90008871 	.word	0x90008871
900087a8:	90008871 	.word	0x90008871
900087ac:	90008871 	.word	0x90008871
900087b0:	90008871 	.word	0x90008871
900087b4:	90008871 	.word	0x90008871
900087b8:	90008871 	.word	0x90008871
900087bc:	90008871 	.word	0x90008871
900087c0:	90008845 	.word	0x90008845
900087c4:	90008871 	.word	0x90008871
900087c8:	90008871 	.word	0x90008871
900087cc:	90008871 	.word	0x90008871
900087d0:	90008871 	.word	0x90008871
900087d4:	90008871 	.word	0x90008871
900087d8:	90008871 	.word	0x90008871
900087dc:	90008871 	.word	0x90008871
900087e0:	9000885b 	.word	0x9000885b
900087e4:	90008871 	.word	0x90008871
900087e8:	90008871 	.word	0x90008871
900087ec:	90008871 	.word	0x90008871
900087f0:	90008871 	.word	0x90008871
900087f4:	90008871 	.word	0x90008871
900087f8:	90008871 	.word	0x90008871
900087fc:	90008871 	.word	0x90008871
90008800:	90008879 	.word	0x90008879
90008804:	90008871 	.word	0x90008871
90008808:	90008871 	.word	0x90008871
9000880c:	90008871 	.word	0x90008871
90008810:	90008871 	.word	0x90008871
90008814:	90008871 	.word	0x90008871
90008818:	90008871 	.word	0x90008871
9000881c:	90008871 	.word	0x90008871
90008820:	90008879 	.word	0x90008879
90008824:	90008871 	.word	0x90008871
90008828:	90008871 	.word	0x90008871
9000882c:	90008871 	.word	0x90008871
90008830:	90008871 	.word	0x90008871
90008834:	90008871 	.word	0x90008871
90008838:	90008871 	.word	0x90008871
9000883c:	90008871 	.word	0x90008871
90008840:	90008879 	.word	0x90008879
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008848:	3308      	adds	r3, #8
9000884a:	2101      	movs	r1, #1
9000884c:	4618      	mov	r0, r3
9000884e:	f000 ffc3 	bl	900097d8 <RCCEx_PLL2_Config>
90008852:	4603      	mov	r3, r0
90008854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008858:	e00f      	b.n	9000887a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000885a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000885e:	3328      	adds	r3, #40	@ 0x28
90008860:	2101      	movs	r1, #1
90008862:	4618      	mov	r0, r3
90008864:	f001 f86a 	bl	9000993c <RCCEx_PLL3_Config>
90008868:	4603      	mov	r3, r0
9000886a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000886e:	e004      	b.n	9000887a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008870:	2301      	movs	r3, #1
90008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008876:	e000      	b.n	9000887a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
90008878:	bf00      	nop
    }

    if (ret == HAL_OK)
9000887a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000887e:	2b00      	cmp	r3, #0
90008880:	d10a      	bne.n	90008898 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008882:	4bbf      	ldr	r3, [pc, #764]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008886:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000888e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008890:	4abb      	ldr	r2, [pc, #748]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008892:	430b      	orrs	r3, r1
90008894:	6553      	str	r3, [r2, #84]	@ 0x54
90008896:	e003      	b.n	900088a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000889c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
900088a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
900088a8:	f002 0302 	and.w	r3, r2, #2
900088ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
900088b0:	2300      	movs	r3, #0
900088b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
900088b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
900088ba:	460b      	mov	r3, r1
900088bc:	4313      	orrs	r3, r2
900088be:	d041      	beq.n	90008944 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
900088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900088c6:	2b05      	cmp	r3, #5
900088c8:	d824      	bhi.n	90008914 <HAL_RCCEx_PeriphCLKConfig+0xacc>
900088ca:	a201      	add	r2, pc, #4	@ (adr r2, 900088d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
900088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900088d0:	9000891d 	.word	0x9000891d
900088d4:	900088e9 	.word	0x900088e9
900088d8:	900088ff 	.word	0x900088ff
900088dc:	9000891d 	.word	0x9000891d
900088e0:	9000891d 	.word	0x9000891d
900088e4:	9000891d 	.word	0x9000891d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088ec:	3308      	adds	r3, #8
900088ee:	2101      	movs	r1, #1
900088f0:	4618      	mov	r0, r3
900088f2:	f000 ff71 	bl	900097d8 <RCCEx_PLL2_Config>
900088f6:	4603      	mov	r3, r0
900088f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900088fc:	e00f      	b.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900088fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008902:	3328      	adds	r3, #40	@ 0x28
90008904:	2101      	movs	r1, #1
90008906:	4618      	mov	r0, r3
90008908:	f001 f818 	bl	9000993c <RCCEx_PLL3_Config>
9000890c:	4603      	mov	r3, r0
9000890e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008912:	e004      	b.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008914:	2301      	movs	r3, #1
90008916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000891a:	e000      	b.n	9000891e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
9000891c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000891e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008922:	2b00      	cmp	r3, #0
90008924:	d10a      	bne.n	9000893c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90008926:	4b96      	ldr	r3, [pc, #600]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000892a:	f023 0107 	bic.w	r1, r3, #7
9000892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008934:	4a92      	ldr	r2, [pc, #584]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008936:	430b      	orrs	r3, r1
90008938:	6553      	str	r3, [r2, #84]	@ 0x54
9000893a:	e003      	b.n	90008944 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000893c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008948:	e9d3 2300 	ldrd	r2, r3, [r3]
9000894c:	f002 0304 	and.w	r3, r2, #4
90008950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90008954:	2300      	movs	r3, #0
90008956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
9000895a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
9000895e:	460b      	mov	r3, r1
90008960:	4313      	orrs	r3, r2
90008962:	d044      	beq.n	900089ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90008964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000896c:	2b05      	cmp	r3, #5
9000896e:	d825      	bhi.n	900089bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008970:	a201      	add	r2, pc, #4	@ (adr r2, 90008978 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008976:	bf00      	nop
90008978:	900089c5 	.word	0x900089c5
9000897c:	90008991 	.word	0x90008991
90008980:	900089a7 	.word	0x900089a7
90008984:	900089c5 	.word	0x900089c5
90008988:	900089c5 	.word	0x900089c5
9000898c:	900089c5 	.word	0x900089c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008994:	3308      	adds	r3, #8
90008996:	2101      	movs	r1, #1
90008998:	4618      	mov	r0, r3
9000899a:	f000 ff1d 	bl	900097d8 <RCCEx_PLL2_Config>
9000899e:	4603      	mov	r3, r0
900089a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900089a4:	e00f      	b.n	900089c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900089a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089aa:	3328      	adds	r3, #40	@ 0x28
900089ac:	2101      	movs	r1, #1
900089ae:	4618      	mov	r0, r3
900089b0:	f000 ffc4 	bl	9000993c <RCCEx_PLL3_Config>
900089b4:	4603      	mov	r3, r0
900089b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
900089ba:	e004      	b.n	900089c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900089bc:	2301      	movs	r3, #1
900089be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900089c2:	e000      	b.n	900089c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
900089c4:	bf00      	nop
    }

    if (ret == HAL_OK)
900089c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089ca:	2b00      	cmp	r3, #0
900089cc:	d10b      	bne.n	900089e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
900089ce:	4b6c      	ldr	r3, [pc, #432]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900089d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900089d2:	f023 0107 	bic.w	r1, r3, #7
900089d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
900089de:	4a68      	ldr	r2, [pc, #416]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900089e0:	430b      	orrs	r3, r1
900089e2:	6593      	str	r3, [r2, #88]	@ 0x58
900089e4:	e003      	b.n	900089ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
900089e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900089ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
900089f6:	f002 0320 	and.w	r3, r2, #32
900089fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
900089fe:	2300      	movs	r3, #0
90008a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008a04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
90008a08:	460b      	mov	r3, r1
90008a0a:	4313      	orrs	r3, r2
90008a0c:	d055      	beq.n	90008aba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
90008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90008a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008a1a:	d033      	beq.n	90008a84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90008a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008a20:	d82c      	bhi.n	90008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008a26:	d02f      	beq.n	90008a88 <HAL_RCCEx_PeriphCLKConfig+0xc40>
90008a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008a2c:	d826      	bhi.n	90008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008a2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008a32:	d02b      	beq.n	90008a8c <HAL_RCCEx_PeriphCLKConfig+0xc44>
90008a34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008a38:	d820      	bhi.n	90008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008a3e:	d012      	beq.n	90008a66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
90008a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008a44:	d81a      	bhi.n	90008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008a46:	2b00      	cmp	r3, #0
90008a48:	d022      	beq.n	90008a90 <HAL_RCCEx_PeriphCLKConfig+0xc48>
90008a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008a4e:	d115      	bne.n	90008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a54:	3308      	adds	r3, #8
90008a56:	2100      	movs	r1, #0
90008a58:	4618      	mov	r0, r3
90008a5a:	f000 febd 	bl	900097d8 <RCCEx_PLL2_Config>
90008a5e:	4603      	mov	r3, r0
90008a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008a64:	e015      	b.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a6a:	3328      	adds	r3, #40	@ 0x28
90008a6c:	2102      	movs	r1, #2
90008a6e:	4618      	mov	r0, r3
90008a70:	f000 ff64 	bl	9000993c <RCCEx_PLL3_Config>
90008a74:	4603      	mov	r3, r0
90008a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008a7a:	e00a      	b.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008a7c:	2301      	movs	r3, #1
90008a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a82:	e006      	b.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008a84:	bf00      	nop
90008a86:	e004      	b.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008a88:	bf00      	nop
90008a8a:	e002      	b.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008a8c:	bf00      	nop
90008a8e:	e000      	b.n	90008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008a90:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a96:	2b00      	cmp	r3, #0
90008a98:	d10b      	bne.n	90008ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90008a9a:	4b39      	ldr	r3, [pc, #228]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008a9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90008aaa:	4a35      	ldr	r2, [pc, #212]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008aac:	430b      	orrs	r3, r1
90008aae:	6553      	str	r3, [r2, #84]	@ 0x54
90008ab0:	e003      	b.n	90008aba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ac2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
90008ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
90008aca:	2300      	movs	r3, #0
90008acc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90008ad0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90008ad4:	460b      	mov	r3, r1
90008ad6:	4313      	orrs	r3, r2
90008ad8:	d058      	beq.n	90008b8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008ae2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008ae6:	d033      	beq.n	90008b50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
90008ae8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008aec:	d82c      	bhi.n	90008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008af2:	d02f      	beq.n	90008b54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008af8:	d826      	bhi.n	90008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008afa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008afe:	d02b      	beq.n	90008b58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008b00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008b04:	d820      	bhi.n	90008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008b0a:	d012      	beq.n	90008b32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008b10:	d81a      	bhi.n	90008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008b12:	2b00      	cmp	r3, #0
90008b14:	d022      	beq.n	90008b5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
90008b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90008b1a:	d115      	bne.n	90008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b20:	3308      	adds	r3, #8
90008b22:	2100      	movs	r1, #0
90008b24:	4618      	mov	r0, r3
90008b26:	f000 fe57 	bl	900097d8 <RCCEx_PLL2_Config>
90008b2a:	4603      	mov	r3, r0
90008b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008b30:	e015      	b.n	90008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b36:	3328      	adds	r3, #40	@ 0x28
90008b38:	2102      	movs	r1, #2
90008b3a:	4618      	mov	r0, r3
90008b3c:	f000 fefe 	bl	9000993c <RCCEx_PLL3_Config>
90008b40:	4603      	mov	r3, r0
90008b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008b46:	e00a      	b.n	90008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b48:	2301      	movs	r3, #1
90008b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b4e:	e006      	b.n	90008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008b50:	bf00      	nop
90008b52:	e004      	b.n	90008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008b54:	bf00      	nop
90008b56:	e002      	b.n	90008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008b58:	bf00      	nop
90008b5a:	e000      	b.n	90008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b62:	2b00      	cmp	r3, #0
90008b64:	d10e      	bne.n	90008b84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90008b66:	4b06      	ldr	r3, [pc, #24]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008b6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90008b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008b76:	4a02      	ldr	r2, [pc, #8]	@ (90008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008b78:	430b      	orrs	r3, r1
90008b7a:	6593      	str	r3, [r2, #88]	@ 0x58
90008b7c:	e006      	b.n	90008b8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
90008b7e:	bf00      	nop
90008b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
90008b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
90008b9c:	2300      	movs	r3, #0
90008b9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
90008ba2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
90008ba6:	460b      	mov	r3, r1
90008ba8:	4313      	orrs	r3, r2
90008baa:	d055      	beq.n	90008c58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008bb4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008bb8:	d033      	beq.n	90008c22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
90008bba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008bbe:	d82c      	bhi.n	90008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008bc4:	d02f      	beq.n	90008c26 <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008bca:	d826      	bhi.n	90008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008bcc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008bd0:	d02b      	beq.n	90008c2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
90008bd2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008bd6:	d820      	bhi.n	90008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008bdc:	d012      	beq.n	90008c04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90008bde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008be2:	d81a      	bhi.n	90008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008be4:	2b00      	cmp	r3, #0
90008be6:	d022      	beq.n	90008c2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008bec:	d115      	bne.n	90008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bf2:	3308      	adds	r3, #8
90008bf4:	2100      	movs	r1, #0
90008bf6:	4618      	mov	r0, r3
90008bf8:	f000 fdee 	bl	900097d8 <RCCEx_PLL2_Config>
90008bfc:	4603      	mov	r3, r0
90008bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008c02:	e015      	b.n	90008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c08:	3328      	adds	r3, #40	@ 0x28
90008c0a:	2102      	movs	r1, #2
90008c0c:	4618      	mov	r0, r3
90008c0e:	f000 fe95 	bl	9000993c <RCCEx_PLL3_Config>
90008c12:	4603      	mov	r3, r0
90008c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008c18:	e00a      	b.n	90008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008c1a:	2301      	movs	r3, #1
90008c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c20:	e006      	b.n	90008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008c22:	bf00      	nop
90008c24:	e004      	b.n	90008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008c26:	bf00      	nop
90008c28:	e002      	b.n	90008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008c2a:	bf00      	nop
90008c2c:	e000      	b.n	90008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c34:	2b00      	cmp	r3, #0
90008c36:	d10b      	bne.n	90008c50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90008c38:	4ba1      	ldr	r3, [pc, #644]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008c3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
90008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008c48:	4a9d      	ldr	r2, [pc, #628]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c4a:	430b      	orrs	r3, r1
90008c4c:	6593      	str	r3, [r2, #88]	@ 0x58
90008c4e:	e003      	b.n	90008c58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90008c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c60:	f002 0308 	and.w	r3, r2, #8
90008c64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90008c68:	2300      	movs	r3, #0
90008c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008c6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008c72:	460b      	mov	r3, r1
90008c74:	4313      	orrs	r3, r2
90008c76:	d01e      	beq.n	90008cb6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90008c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008c84:	d10c      	bne.n	90008ca0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c8a:	3328      	adds	r3, #40	@ 0x28
90008c8c:	2102      	movs	r1, #2
90008c8e:	4618      	mov	r0, r3
90008c90:	f000 fe54 	bl	9000993c <RCCEx_PLL3_Config>
90008c94:	4603      	mov	r3, r0
90008c96:	2b00      	cmp	r3, #0
90008c98:	d002      	beq.n	90008ca0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90008c9a:	2301      	movs	r3, #1
90008c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008ca0:	4b87      	ldr	r3, [pc, #540]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008ca4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008cb0:	4a83      	ldr	r2, [pc, #524]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008cb2:	430b      	orrs	r3, r1
90008cb4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cbe:	f002 0310 	and.w	r3, r2, #16
90008cc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90008cc6:	2300      	movs	r3, #0
90008cc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
90008ccc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008cd0:	460b      	mov	r3, r1
90008cd2:	4313      	orrs	r3, r2
90008cd4:	d01e      	beq.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008ce2:	d10c      	bne.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ce8:	3328      	adds	r3, #40	@ 0x28
90008cea:	2102      	movs	r1, #2
90008cec:	4618      	mov	r0, r3
90008cee:	f000 fe25 	bl	9000993c <RCCEx_PLL3_Config>
90008cf2:	4603      	mov	r3, r0
90008cf4:	2b00      	cmp	r3, #0
90008cf6:	d002      	beq.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008cf8:	2301      	movs	r3, #1
90008cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008cfe:	4b70      	ldr	r3, [pc, #448]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008d02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008d0e:	4a6c      	ldr	r2, [pc, #432]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d10:	430b      	orrs	r3, r1
90008d12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008d20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008d24:	2300      	movs	r3, #0
90008d26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90008d2a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008d2e:	460b      	mov	r3, r1
90008d30:	4313      	orrs	r3, r2
90008d32:	d03e      	beq.n	90008db2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008d40:	d022      	beq.n	90008d88 <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008d46:	d81b      	bhi.n	90008d80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008d48:	2b00      	cmp	r3, #0
90008d4a:	d003      	beq.n	90008d54 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008d50:	d00b      	beq.n	90008d6a <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008d52:	e015      	b.n	90008d80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d58:	3308      	adds	r3, #8
90008d5a:	2100      	movs	r1, #0
90008d5c:	4618      	mov	r0, r3
90008d5e:	f000 fd3b 	bl	900097d8 <RCCEx_PLL2_Config>
90008d62:	4603      	mov	r3, r0
90008d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008d68:	e00f      	b.n	90008d8a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d6e:	3328      	adds	r3, #40	@ 0x28
90008d70:	2102      	movs	r1, #2
90008d72:	4618      	mov	r0, r3
90008d74:	f000 fde2 	bl	9000993c <RCCEx_PLL3_Config>
90008d78:	4603      	mov	r3, r0
90008d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008d7e:	e004      	b.n	90008d8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008d80:	2301      	movs	r3, #1
90008d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d86:	e000      	b.n	90008d8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008d88:	bf00      	nop
    }

    if (ret == HAL_OK)
90008d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d8e:	2b00      	cmp	r3, #0
90008d90:	d10b      	bne.n	90008daa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008d92:	4b4b      	ldr	r3, [pc, #300]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008d96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008da2:	4a47      	ldr	r2, [pc, #284]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008da4:	430b      	orrs	r3, r1
90008da6:	6593      	str	r3, [r2, #88]	@ 0x58
90008da8:	e003      	b.n	90008db2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008dba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008dbe:	67bb      	str	r3, [r7, #120]	@ 0x78
90008dc0:	2300      	movs	r3, #0
90008dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008dc4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008dc8:	460b      	mov	r3, r1
90008dca:	4313      	orrs	r3, r2
90008dcc:	d03b      	beq.n	90008e46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008dd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008dda:	d01f      	beq.n	90008e1c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008ddc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008de0:	d818      	bhi.n	90008e14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008de6:	d003      	beq.n	90008df0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008de8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008dec:	d007      	beq.n	90008dfe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008dee:	e011      	b.n	90008e14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008df0:	4b33      	ldr	r3, [pc, #204]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008df4:	4a32      	ldr	r2, [pc, #200]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008dfc:	e00f      	b.n	90008e1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e02:	3328      	adds	r3, #40	@ 0x28
90008e04:	2101      	movs	r1, #1
90008e06:	4618      	mov	r0, r3
90008e08:	f000 fd98 	bl	9000993c <RCCEx_PLL3_Config>
90008e0c:	4603      	mov	r3, r0
90008e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008e12:	e004      	b.n	90008e1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008e14:	2301      	movs	r3, #1
90008e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008e1a:	e000      	b.n	90008e1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
90008e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e22:	2b00      	cmp	r3, #0
90008e24:	d10b      	bne.n	90008e3e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008e26:	4b26      	ldr	r3, [pc, #152]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008e2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008e36:	4a22      	ldr	r2, [pc, #136]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e38:	430b      	orrs	r3, r1
90008e3a:	6553      	str	r3, [r2, #84]	@ 0x54
90008e3c:	e003      	b.n	90008e46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e4e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008e52:	673b      	str	r3, [r7, #112]	@ 0x70
90008e54:	2300      	movs	r3, #0
90008e56:	677b      	str	r3, [r7, #116]	@ 0x74
90008e58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008e5c:	460b      	mov	r3, r1
90008e5e:	4313      	orrs	r3, r2
90008e60:	d034      	beq.n	90008ecc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008e68:	2b00      	cmp	r3, #0
90008e6a:	d003      	beq.n	90008e74 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008e70:	d007      	beq.n	90008e82 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008e72:	e011      	b.n	90008e98 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008e74:	4b12      	ldr	r3, [pc, #72]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008e78:	4a11      	ldr	r2, [pc, #68]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008e80:	e00e      	b.n	90008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e86:	3308      	adds	r3, #8
90008e88:	2102      	movs	r1, #2
90008e8a:	4618      	mov	r0, r3
90008e8c:	f000 fca4 	bl	900097d8 <RCCEx_PLL2_Config>
90008e90:	4603      	mov	r3, r0
90008e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008e96:	e003      	b.n	90008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008e98:	2301      	movs	r3, #1
90008e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ea4:	2b00      	cmp	r3, #0
90008ea6:	d10d      	bne.n	90008ec4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008ea8:	4b05      	ldr	r3, [pc, #20]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008eac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008eb6:	4a02      	ldr	r2, [pc, #8]	@ (90008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008eb8:	430b      	orrs	r3, r1
90008eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008ebc:	e006      	b.n	90008ecc <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008ebe:	bf00      	nop
90008ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ed4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
90008eda:	2300      	movs	r3, #0
90008edc:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008ede:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008ee2:	460b      	mov	r3, r1
90008ee4:	4313      	orrs	r3, r2
90008ee6:	d00c      	beq.n	90008f02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eec:	3328      	adds	r3, #40	@ 0x28
90008eee:	2102      	movs	r1, #2
90008ef0:	4618      	mov	r0, r3
90008ef2:	f000 fd23 	bl	9000993c <RCCEx_PLL3_Config>
90008ef6:	4603      	mov	r3, r0
90008ef8:	2b00      	cmp	r3, #0
90008efa:	d002      	beq.n	90008f02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008efc:	2301      	movs	r3, #1
90008efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f0a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008f0e:	663b      	str	r3, [r7, #96]	@ 0x60
90008f10:	2300      	movs	r3, #0
90008f12:	667b      	str	r3, [r7, #100]	@ 0x64
90008f14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008f18:	460b      	mov	r3, r1
90008f1a:	4313      	orrs	r3, r2
90008f1c:	d038      	beq.n	90008f90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008f2a:	d018      	beq.n	90008f5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008f30:	d811      	bhi.n	90008f56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008f32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008f36:	d014      	beq.n	90008f62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008f3c:	d80b      	bhi.n	90008f56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008f3e:	2b00      	cmp	r3, #0
90008f40:	d011      	beq.n	90008f66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008f46:	d106      	bne.n	90008f56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008f48:	4bc3      	ldr	r3, [pc, #780]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008f4c:	4ac2      	ldr	r2, [pc, #776]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008f54:	e008      	b.n	90008f68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008f56:	2301      	movs	r3, #1
90008f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008f5c:	e004      	b.n	90008f68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008f5e:	bf00      	nop
90008f60:	e002      	b.n	90008f68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008f62:	bf00      	nop
90008f64:	e000      	b.n	90008f68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008f66:	bf00      	nop
    }

    if (ret == HAL_OK)
90008f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f6c:	2b00      	cmp	r3, #0
90008f6e:	d10b      	bne.n	90008f88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008f70:	4bb9      	ldr	r3, [pc, #740]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008f74:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008f80:	4ab5      	ldr	r2, [pc, #724]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008f82:	430b      	orrs	r3, r1
90008f84:	6553      	str	r3, [r2, #84]	@ 0x54
90008f86:	e003      	b.n	90008f90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
90008f9e:	2300      	movs	r3, #0
90008fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008fa2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008fa6:	460b      	mov	r3, r1
90008fa8:	4313      	orrs	r3, r2
90008faa:	d009      	beq.n	90008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008fac:	4baa      	ldr	r3, [pc, #680]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008fb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008fba:	4aa7      	ldr	r2, [pc, #668]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fbc:	430b      	orrs	r3, r1
90008fbe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fc8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008fcc:	653b      	str	r3, [r7, #80]	@ 0x50
90008fce:	2300      	movs	r3, #0
90008fd0:	657b      	str	r3, [r7, #84]	@ 0x54
90008fd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008fd6:	460b      	mov	r3, r1
90008fd8:	4313      	orrs	r3, r2
90008fda:	d00a      	beq.n	90008ff2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008fdc:	4b9e      	ldr	r3, [pc, #632]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fde:	691b      	ldr	r3, [r3, #16]
90008fe0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fe8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008fec:	4a9a      	ldr	r2, [pc, #616]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008fee:	430b      	orrs	r3, r1
90008ff0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ffa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
90009000:	2300      	movs	r3, #0
90009002:	64fb      	str	r3, [r7, #76]	@ 0x4c
90009004:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90009008:	460b      	mov	r3, r1
9000900a:	4313      	orrs	r3, r2
9000900c:	d009      	beq.n	90009022 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000900e:	4b92      	ldr	r3, [pc, #584]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90009012:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90009016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000901a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000901c:	4a8e      	ldr	r2, [pc, #568]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000901e:	430b      	orrs	r3, r1
90009020:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009026:	e9d3 2300 	ldrd	r2, r3, [r3]
9000902a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
9000902e:	643b      	str	r3, [r7, #64]	@ 0x40
90009030:	2300      	movs	r3, #0
90009032:	647b      	str	r3, [r7, #68]	@ 0x44
90009034:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90009038:	460b      	mov	r3, r1
9000903a:	4313      	orrs	r3, r2
9000903c:	d00e      	beq.n	9000905c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000903e:	4b86      	ldr	r3, [pc, #536]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009040:	691b      	ldr	r3, [r3, #16]
90009042:	4a85      	ldr	r2, [pc, #532]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009044:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90009048:	6113      	str	r3, [r2, #16]
9000904a:	4b83      	ldr	r3, [pc, #524]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000904c:	6919      	ldr	r1, [r3, #16]
9000904e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009052:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90009056:	4a80      	ldr	r2, [pc, #512]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009058:	430b      	orrs	r3, r1
9000905a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000905c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009060:	e9d3 2300 	ldrd	r2, r3, [r3]
90009064:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90009068:	63bb      	str	r3, [r7, #56]	@ 0x38
9000906a:	2300      	movs	r3, #0
9000906c:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000906e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90009072:	460b      	mov	r3, r1
90009074:	4313      	orrs	r3, r2
90009076:	d009      	beq.n	9000908c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90009078:	4b77      	ldr	r3, [pc, #476]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000907a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000907c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90009080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009086:	4a74      	ldr	r2, [pc, #464]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009088:	430b      	orrs	r3, r1
9000908a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000908c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009090:	e9d3 2300 	ldrd	r2, r3, [r3]
90009094:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90009098:	633b      	str	r3, [r7, #48]	@ 0x30
9000909a:	2300      	movs	r3, #0
9000909c:	637b      	str	r3, [r7, #52]	@ 0x34
9000909e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
900090a2:	460b      	mov	r3, r1
900090a4:	4313      	orrs	r3, r2
900090a6:	d00a      	beq.n	900090be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
900090a8:	4b6b      	ldr	r3, [pc, #428]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900090aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900090ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
900090b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
900090b8:	4a67      	ldr	r2, [pc, #412]	@ (90009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900090ba:	430b      	orrs	r3, r1
900090bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
900090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
900090c6:	2100      	movs	r1, #0
900090c8:	62b9      	str	r1, [r7, #40]	@ 0x28
900090ca:	f003 0301 	and.w	r3, r3, #1
900090ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
900090d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
900090d4:	460b      	mov	r3, r1
900090d6:	4313      	orrs	r3, r2
900090d8:	d011      	beq.n	900090fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090de:	3308      	adds	r3, #8
900090e0:	2100      	movs	r1, #0
900090e2:	4618      	mov	r0, r3
900090e4:	f000 fb78 	bl	900097d8 <RCCEx_PLL2_Config>
900090e8:	4603      	mov	r3, r0
900090ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900090ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900090f2:	2b00      	cmp	r3, #0
900090f4:	d003      	beq.n	900090fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900090f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900090fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
900090fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009102:	e9d3 2300 	ldrd	r2, r3, [r3]
90009106:	2100      	movs	r1, #0
90009108:	6239      	str	r1, [r7, #32]
9000910a:	f003 0302 	and.w	r3, r3, #2
9000910e:	627b      	str	r3, [r7, #36]	@ 0x24
90009110:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90009114:	460b      	mov	r3, r1
90009116:	4313      	orrs	r3, r2
90009118:	d011      	beq.n	9000913e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000911e:	3308      	adds	r3, #8
90009120:	2101      	movs	r1, #1
90009122:	4618      	mov	r0, r3
90009124:	f000 fb58 	bl	900097d8 <RCCEx_PLL2_Config>
90009128:	4603      	mov	r3, r0
9000912a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000912e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009132:	2b00      	cmp	r3, #0
90009134:	d003      	beq.n	9000913e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000913a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009142:	e9d3 2300 	ldrd	r2, r3, [r3]
90009146:	2100      	movs	r1, #0
90009148:	61b9      	str	r1, [r7, #24]
9000914a:	f003 0304 	and.w	r3, r3, #4
9000914e:	61fb      	str	r3, [r7, #28]
90009150:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90009154:	460b      	mov	r3, r1
90009156:	4313      	orrs	r3, r2
90009158:	d011      	beq.n	9000917e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000915a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000915e:	3308      	adds	r3, #8
90009160:	2102      	movs	r1, #2
90009162:	4618      	mov	r0, r3
90009164:	f000 fb38 	bl	900097d8 <RCCEx_PLL2_Config>
90009168:	4603      	mov	r3, r0
9000916a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000916e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009172:	2b00      	cmp	r3, #0
90009174:	d003      	beq.n	9000917e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000917a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009182:	e9d3 2300 	ldrd	r2, r3, [r3]
90009186:	2100      	movs	r1, #0
90009188:	6139      	str	r1, [r7, #16]
9000918a:	f003 0308 	and.w	r3, r3, #8
9000918e:	617b      	str	r3, [r7, #20]
90009190:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90009194:	460b      	mov	r3, r1
90009196:	4313      	orrs	r3, r2
90009198:	d011      	beq.n	900091be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000919e:	3328      	adds	r3, #40	@ 0x28
900091a0:	2100      	movs	r1, #0
900091a2:	4618      	mov	r0, r3
900091a4:	f000 fbca 	bl	9000993c <RCCEx_PLL3_Config>
900091a8:	4603      	mov	r3, r0
900091aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
900091ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091b2:	2b00      	cmp	r3, #0
900091b4:	d003      	beq.n	900091be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900091b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
900091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
900091c6:	2100      	movs	r1, #0
900091c8:	60b9      	str	r1, [r7, #8]
900091ca:	f003 0310 	and.w	r3, r3, #16
900091ce:	60fb      	str	r3, [r7, #12]
900091d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
900091d4:	460b      	mov	r3, r1
900091d6:	4313      	orrs	r3, r2
900091d8:	d011      	beq.n	900091fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091de:	3328      	adds	r3, #40	@ 0x28
900091e0:	2101      	movs	r1, #1
900091e2:	4618      	mov	r0, r3
900091e4:	f000 fbaa 	bl	9000993c <RCCEx_PLL3_Config>
900091e8:	4603      	mov	r3, r0
900091ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900091ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091f2:	2b00      	cmp	r3, #0
900091f4:	d003      	beq.n	900091fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900091f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
900091fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009202:	e9d3 2300 	ldrd	r2, r3, [r3]
90009206:	2100      	movs	r1, #0
90009208:	6039      	str	r1, [r7, #0]
9000920a:	f003 0320 	and.w	r3, r3, #32
9000920e:	607b      	str	r3, [r7, #4]
90009210:	e9d7 1200 	ldrd	r1, r2, [r7]
90009214:	460b      	mov	r3, r1
90009216:	4313      	orrs	r3, r2
90009218:	d011      	beq.n	9000923e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000921e:	3328      	adds	r3, #40	@ 0x28
90009220:	2102      	movs	r1, #2
90009222:	4618      	mov	r0, r3
90009224:	f000 fb8a 	bl	9000993c <RCCEx_PLL3_Config>
90009228:	4603      	mov	r3, r0
9000922a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
9000922e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009232:	2b00      	cmp	r3, #0
90009234:	d003      	beq.n	9000923e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90009236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000923a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
9000923e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90009242:	2b00      	cmp	r3, #0
90009244:	d101      	bne.n	9000924a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90009246:	2300      	movs	r3, #0
90009248:	e000      	b.n	9000924c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
9000924a:	2301      	movs	r3, #1
}
9000924c:	4618      	mov	r0, r3
9000924e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90009252:	46bd      	mov	sp, r7
90009254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90009258:	58024400 	.word	0x58024400

9000925c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
9000925c:	b580      	push	{r7, lr}
9000925e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90009260:	f7fe fd96 	bl	90007d90 <HAL_RCC_GetHCLKFreq>
90009264:	4602      	mov	r2, r0
90009266:	4b06      	ldr	r3, [pc, #24]	@ (90009280 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90009268:	6a1b      	ldr	r3, [r3, #32]
9000926a:	091b      	lsrs	r3, r3, #4
9000926c:	f003 0307 	and.w	r3, r3, #7
90009270:	4904      	ldr	r1, [pc, #16]	@ (90009284 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90009272:	5ccb      	ldrb	r3, [r1, r3]
90009274:	f003 031f 	and.w	r3, r3, #31
90009278:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
9000927c:	4618      	mov	r0, r3
9000927e:	bd80      	pop	{r7, pc}
90009280:	58024400 	.word	0x58024400
90009284:	9000e580 	.word	0x9000e580

90009288 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90009288:	b480      	push	{r7}
9000928a:	b089      	sub	sp, #36	@ 0x24
9000928c:	af00      	add	r7, sp, #0
9000928e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009290:	4ba1      	ldr	r3, [pc, #644]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009294:	f003 0303 	and.w	r3, r3, #3
90009298:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000929a:	4b9f      	ldr	r3, [pc, #636]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000929e:	0b1b      	lsrs	r3, r3, #12
900092a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900092a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
900092a6:	4b9c      	ldr	r3, [pc, #624]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900092a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900092aa:	091b      	lsrs	r3, r3, #4
900092ac:	f003 0301 	and.w	r3, r3, #1
900092b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
900092b2:	4b99      	ldr	r3, [pc, #612]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900092b6:	08db      	lsrs	r3, r3, #3
900092b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
900092bc:	693a      	ldr	r2, [r7, #16]
900092be:	fb02 f303 	mul.w	r3, r2, r3
900092c2:	ee07 3a90 	vmov	s15, r3
900092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
900092ce:	697b      	ldr	r3, [r7, #20]
900092d0:	2b00      	cmp	r3, #0
900092d2:	f000 8111 	beq.w	900094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
900092d6:	69bb      	ldr	r3, [r7, #24]
900092d8:	2b02      	cmp	r3, #2
900092da:	f000 8083 	beq.w	900093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
900092de:	69bb      	ldr	r3, [r7, #24]
900092e0:	2b02      	cmp	r3, #2
900092e2:	f200 80a1 	bhi.w	90009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
900092e6:	69bb      	ldr	r3, [r7, #24]
900092e8:	2b00      	cmp	r3, #0
900092ea:	d003      	beq.n	900092f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
900092ec:	69bb      	ldr	r3, [r7, #24]
900092ee:	2b01      	cmp	r3, #1
900092f0:	d056      	beq.n	900093a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
900092f2:	e099      	b.n	90009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900092f4:	4b88      	ldr	r3, [pc, #544]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900092f6:	681b      	ldr	r3, [r3, #0]
900092f8:	f003 0320 	and.w	r3, r3, #32
900092fc:	2b00      	cmp	r3, #0
900092fe:	d02d      	beq.n	9000935c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009300:	4b85      	ldr	r3, [pc, #532]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009302:	681b      	ldr	r3, [r3, #0]
90009304:	08db      	lsrs	r3, r3, #3
90009306:	f003 0303 	and.w	r3, r3, #3
9000930a:	4a84      	ldr	r2, [pc, #528]	@ (9000951c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
9000930c:	fa22 f303 	lsr.w	r3, r2, r3
90009310:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009312:	68bb      	ldr	r3, [r7, #8]
90009314:	ee07 3a90 	vmov	s15, r3
90009318:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000931c:	697b      	ldr	r3, [r7, #20]
9000931e:	ee07 3a90 	vmov	s15, r3
90009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000932a:	4b7b      	ldr	r3, [pc, #492]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009332:	ee07 3a90 	vmov	s15, r3
90009336:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000933a:	ed97 6a03 	vldr	s12, [r7, #12]
9000933e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009342:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009346:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000934a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000934e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009352:	ee67 7a27 	vmul.f32	s15, s14, s15
90009356:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
9000935a:	e087      	b.n	9000946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000935c:	697b      	ldr	r3, [r7, #20]
9000935e:	ee07 3a90 	vmov	s15, r3
90009362:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009366:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009524 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
9000936a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000936e:	4b6a      	ldr	r3, [pc, #424]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009376:	ee07 3a90 	vmov	s15, r3
9000937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000937e:	ed97 6a03 	vldr	s12, [r7, #12]
90009382:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009386:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000938a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000938e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009392:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009396:	ee67 7a27 	vmul.f32	s15, s14, s15
9000939a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000939e:	e065      	b.n	9000946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900093a0:	697b      	ldr	r3, [r7, #20]
900093a2:	ee07 3a90 	vmov	s15, r3
900093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
900093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900093b2:	4b59      	ldr	r3, [pc, #356]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900093b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900093ba:	ee07 3a90 	vmov	s15, r3
900093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
900093c2:	ed97 6a03 	vldr	s12, [r7, #12]
900093c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
900093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
900093d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093da:	ee67 7a27 	vmul.f32	s15, s14, s15
900093de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900093e2:	e043      	b.n	9000946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900093e4:	697b      	ldr	r3, [r7, #20]
900093e6:	ee07 3a90 	vmov	s15, r3
900093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 9000952c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
900093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900093f6:	4b48      	ldr	r3, [pc, #288]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
900093fe:	ee07 3a90 	vmov	s15, r3
90009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009406:	ed97 6a03 	vldr	s12, [r7, #12]
9000940a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000941e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009426:	e021      	b.n	9000946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009428:	697b      	ldr	r3, [r7, #20]
9000942a:	ee07 3a90 	vmov	s15, r3
9000942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009432:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90009436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000943a:	4b37      	ldr	r3, [pc, #220]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000943c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000943e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009442:	ee07 3a90 	vmov	s15, r3
90009446:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000944a:	ed97 6a03 	vldr	s12, [r7, #12]
9000944e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009452:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009456:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000945a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000945e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009462:	ee67 7a27 	vmul.f32	s15, s14, s15
90009466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000946a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000946c:	4b2a      	ldr	r3, [pc, #168]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009470:	0a5b      	lsrs	r3, r3, #9
90009472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009476:	ee07 3a90 	vmov	s15, r3
9000947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000947e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009482:	ee37 7a87 	vadd.f32	s14, s15, s14
90009486:	edd7 6a07 	vldr	s13, [r7, #28]
9000948a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000948e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009492:	ee17 2a90 	vmov	r2, s15
90009496:	687b      	ldr	r3, [r7, #4]
90009498:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000949a:	4b1f      	ldr	r3, [pc, #124]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000949c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000949e:	0c1b      	lsrs	r3, r3, #16
900094a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900094a4:	ee07 3a90 	vmov	s15, r3
900094a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
900094ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900094b0:	ee37 7a87 	vadd.f32	s14, s15, s14
900094b4:	edd7 6a07 	vldr	s13, [r7, #28]
900094b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
900094bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900094c0:	ee17 2a90 	vmov	r2, s15
900094c4:	687b      	ldr	r3, [r7, #4]
900094c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
900094c8:	4b13      	ldr	r3, [pc, #76]	@ (90009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900094ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900094cc:	0e1b      	lsrs	r3, r3, #24
900094ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900094d2:	ee07 3a90 	vmov	s15, r3
900094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900094da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900094de:	ee37 7a87 	vadd.f32	s14, s15, s14
900094e2:	edd7 6a07 	vldr	s13, [r7, #28]
900094e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
900094ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900094ee:	ee17 2a90 	vmov	r2, s15
900094f2:	687b      	ldr	r3, [r7, #4]
900094f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
900094f6:	e008      	b.n	9000950a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900094f8:	687b      	ldr	r3, [r7, #4]
900094fa:	2200      	movs	r2, #0
900094fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
900094fe:	687b      	ldr	r3, [r7, #4]
90009500:	2200      	movs	r2, #0
90009502:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
90009504:	687b      	ldr	r3, [r7, #4]
90009506:	2200      	movs	r2, #0
90009508:	609a      	str	r2, [r3, #8]
}
9000950a:	bf00      	nop
9000950c:	3724      	adds	r7, #36	@ 0x24
9000950e:	46bd      	mov	sp, r7
90009510:	f85d 7b04 	ldr.w	r7, [sp], #4
90009514:	4770      	bx	lr
90009516:	bf00      	nop
90009518:	58024400 	.word	0x58024400
9000951c:	03d09000 	.word	0x03d09000
90009520:	46000000 	.word	0x46000000
90009524:	4c742400 	.word	0x4c742400
90009528:	4a742400 	.word	0x4a742400
9000952c:	4bbebc20 	.word	0x4bbebc20

90009530 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
90009530:	b480      	push	{r7}
90009532:	b089      	sub	sp, #36	@ 0x24
90009534:	af00      	add	r7, sp, #0
90009536:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009538:	4ba1      	ldr	r3, [pc, #644]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000953a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000953c:	f003 0303 	and.w	r3, r3, #3
90009540:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
90009542:	4b9f      	ldr	r3, [pc, #636]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009546:	0d1b      	lsrs	r3, r3, #20
90009548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000954c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000954e:	4b9c      	ldr	r3, [pc, #624]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009552:	0a1b      	lsrs	r3, r3, #8
90009554:	f003 0301 	and.w	r3, r3, #1
90009558:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000955a:	4b99      	ldr	r3, [pc, #612]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000955c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000955e:	08db      	lsrs	r3, r3, #3
90009560:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009564:	693a      	ldr	r2, [r7, #16]
90009566:	fb02 f303 	mul.w	r3, r2, r3
9000956a:	ee07 3a90 	vmov	s15, r3
9000956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009572:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90009576:	697b      	ldr	r3, [r7, #20]
90009578:	2b00      	cmp	r3, #0
9000957a:	f000 8111 	beq.w	900097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
9000957e:	69bb      	ldr	r3, [r7, #24]
90009580:	2b02      	cmp	r3, #2
90009582:	f000 8083 	beq.w	9000968c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90009586:	69bb      	ldr	r3, [r7, #24]
90009588:	2b02      	cmp	r3, #2
9000958a:	f200 80a1 	bhi.w	900096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
9000958e:	69bb      	ldr	r3, [r7, #24]
90009590:	2b00      	cmp	r3, #0
90009592:	d003      	beq.n	9000959c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90009594:	69bb      	ldr	r3, [r7, #24]
90009596:	2b01      	cmp	r3, #1
90009598:	d056      	beq.n	90009648 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
9000959a:	e099      	b.n	900096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000959c:	4b88      	ldr	r3, [pc, #544]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000959e:	681b      	ldr	r3, [r3, #0]
900095a0:	f003 0320 	and.w	r3, r3, #32
900095a4:	2b00      	cmp	r3, #0
900095a6:	d02d      	beq.n	90009604 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900095a8:	4b85      	ldr	r3, [pc, #532]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900095aa:	681b      	ldr	r3, [r3, #0]
900095ac:	08db      	lsrs	r3, r3, #3
900095ae:	f003 0303 	and.w	r3, r3, #3
900095b2:	4a84      	ldr	r2, [pc, #528]	@ (900097c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
900095b4:	fa22 f303 	lsr.w	r3, r2, r3
900095b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900095ba:	68bb      	ldr	r3, [r7, #8]
900095bc:	ee07 3a90 	vmov	s15, r3
900095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
900095c4:	697b      	ldr	r3, [r7, #20]
900095c6:	ee07 3a90 	vmov	s15, r3
900095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
900095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900095d2:	4b7b      	ldr	r3, [pc, #492]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900095d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900095da:	ee07 3a90 	vmov	s15, r3
900095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
900095e2:	ed97 6a03 	vldr	s12, [r7, #12]
900095e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
900095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
900095f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
900095fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009602:	e087      	b.n	90009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009604:	697b      	ldr	r3, [r7, #20]
90009606:	ee07 3a90 	vmov	s15, r3
9000960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000960e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900097cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
90009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009616:	4b6a      	ldr	r3, [pc, #424]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000961e:	ee07 3a90 	vmov	s15, r3
90009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009626:	ed97 6a03 	vldr	s12, [r7, #12]
9000962a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000963e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009646:	e065      	b.n	90009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009648:	697b      	ldr	r3, [r7, #20]
9000964a:	ee07 3a90 	vmov	s15, r3
9000964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009652:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000965a:	4b59      	ldr	r3, [pc, #356]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000965c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009662:	ee07 3a90 	vmov	s15, r3
90009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000966a:	ed97 6a03 	vldr	s12, [r7, #12]
9000966e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000967a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009682:	ee67 7a27 	vmul.f32	s15, s14, s15
90009686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000968a:	e043      	b.n	90009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000968c:	697b      	ldr	r3, [r7, #20]
9000968e:	ee07 3a90 	vmov	s15, r3
90009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009696:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900097d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
9000969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000969e:	4b48      	ldr	r3, [pc, #288]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900096a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900096a6:	ee07 3a90 	vmov	s15, r3
900096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
900096ae:	ed97 6a03 	vldr	s12, [r7, #12]
900096b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
900096be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
900096ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900096ce:	e021      	b.n	90009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900096d0:	697b      	ldr	r3, [r7, #20]
900096d2:	ee07 3a90 	vmov	s15, r3
900096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900096da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
900096de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900096e2:	4b37      	ldr	r3, [pc, #220]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900096e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900096ea:	ee07 3a90 	vmov	s15, r3
900096ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
900096f2:	ed97 6a03 	vldr	s12, [r7, #12]
900096f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900096fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
900096fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009706:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000970a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000970e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009712:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
90009714:	4b2a      	ldr	r3, [pc, #168]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009718:	0a5b      	lsrs	r3, r3, #9
9000971a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000971e:	ee07 3a90 	vmov	s15, r3
90009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000972a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000972e:	edd7 6a07 	vldr	s13, [r7, #28]
90009732:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000973a:	ee17 2a90 	vmov	r2, s15
9000973e:	687b      	ldr	r3, [r7, #4]
90009740:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
90009742:	4b1f      	ldr	r3, [pc, #124]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009746:	0c1b      	lsrs	r3, r3, #16
90009748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000974c:	ee07 3a90 	vmov	s15, r3
90009750:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009758:	ee37 7a87 	vadd.f32	s14, s15, s14
9000975c:	edd7 6a07 	vldr	s13, [r7, #28]
90009760:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009768:	ee17 2a90 	vmov	r2, s15
9000976c:	687b      	ldr	r3, [r7, #4]
9000976e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009770:	4b13      	ldr	r3, [pc, #76]	@ (900097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009774:	0e1b      	lsrs	r3, r3, #24
90009776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000977a:	ee07 3a90 	vmov	s15, r3
9000977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009786:	ee37 7a87 	vadd.f32	s14, s15, s14
9000978a:	edd7 6a07 	vldr	s13, [r7, #28]
9000978e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009796:	ee17 2a90 	vmov	r2, s15
9000979a:	687b      	ldr	r3, [r7, #4]
9000979c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
9000979e:	e008      	b.n	900097b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
900097a0:	687b      	ldr	r3, [r7, #4]
900097a2:	2200      	movs	r2, #0
900097a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
900097a6:	687b      	ldr	r3, [r7, #4]
900097a8:	2200      	movs	r2, #0
900097aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
900097ac:	687b      	ldr	r3, [r7, #4]
900097ae:	2200      	movs	r2, #0
900097b0:	609a      	str	r2, [r3, #8]
}
900097b2:	bf00      	nop
900097b4:	3724      	adds	r7, #36	@ 0x24
900097b6:	46bd      	mov	sp, r7
900097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900097bc:	4770      	bx	lr
900097be:	bf00      	nop
900097c0:	58024400 	.word	0x58024400
900097c4:	03d09000 	.word	0x03d09000
900097c8:	46000000 	.word	0x46000000
900097cc:	4c742400 	.word	0x4c742400
900097d0:	4a742400 	.word	0x4a742400
900097d4:	4bbebc20 	.word	0x4bbebc20

900097d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
900097d8:	b580      	push	{r7, lr}
900097da:	b084      	sub	sp, #16
900097dc:	af00      	add	r7, sp, #0
900097de:	6078      	str	r0, [r7, #4]
900097e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900097e2:	2300      	movs	r3, #0
900097e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900097e6:	4b53      	ldr	r3, [pc, #332]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900097e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900097ea:	f003 0303 	and.w	r3, r3, #3
900097ee:	2b03      	cmp	r3, #3
900097f0:	d101      	bne.n	900097f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
900097f2:	2301      	movs	r3, #1
900097f4:	e099      	b.n	9000992a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
900097f6:	4b4f      	ldr	r3, [pc, #316]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900097f8:	681b      	ldr	r3, [r3, #0]
900097fa:	4a4e      	ldr	r2, [pc, #312]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900097fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009802:	f7f9 fe93 	bl	9000352c <HAL_GetTick>
90009806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009808:	e008      	b.n	9000981c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000980a:	f7f9 fe8f 	bl	9000352c <HAL_GetTick>
9000980e:	4602      	mov	r2, r0
90009810:	68bb      	ldr	r3, [r7, #8]
90009812:	1ad3      	subs	r3, r2, r3
90009814:	2b02      	cmp	r3, #2
90009816:	d901      	bls.n	9000981c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90009818:	2303      	movs	r3, #3
9000981a:	e086      	b.n	9000992a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000981c:	4b45      	ldr	r3, [pc, #276]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
9000981e:	681b      	ldr	r3, [r3, #0]
90009820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009824:	2b00      	cmp	r3, #0
90009826:	d1f0      	bne.n	9000980a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90009828:	4b42      	ldr	r3, [pc, #264]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
9000982a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000982c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009830:	687b      	ldr	r3, [r7, #4]
90009832:	681b      	ldr	r3, [r3, #0]
90009834:	031b      	lsls	r3, r3, #12
90009836:	493f      	ldr	r1, [pc, #252]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
90009838:	4313      	orrs	r3, r2
9000983a:	628b      	str	r3, [r1, #40]	@ 0x28
9000983c:	687b      	ldr	r3, [r7, #4]
9000983e:	685b      	ldr	r3, [r3, #4]
90009840:	3b01      	subs	r3, #1
90009842:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009846:	687b      	ldr	r3, [r7, #4]
90009848:	689b      	ldr	r3, [r3, #8]
9000984a:	3b01      	subs	r3, #1
9000984c:	025b      	lsls	r3, r3, #9
9000984e:	b29b      	uxth	r3, r3
90009850:	431a      	orrs	r2, r3
90009852:	687b      	ldr	r3, [r7, #4]
90009854:	68db      	ldr	r3, [r3, #12]
90009856:	3b01      	subs	r3, #1
90009858:	041b      	lsls	r3, r3, #16
9000985a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000985e:	431a      	orrs	r2, r3
90009860:	687b      	ldr	r3, [r7, #4]
90009862:	691b      	ldr	r3, [r3, #16]
90009864:	3b01      	subs	r3, #1
90009866:	061b      	lsls	r3, r3, #24
90009868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000986c:	4931      	ldr	r1, [pc, #196]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
9000986e:	4313      	orrs	r3, r2
90009870:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009872:	4b30      	ldr	r3, [pc, #192]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
90009874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009876:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000987a:	687b      	ldr	r3, [r7, #4]
9000987c:	695b      	ldr	r3, [r3, #20]
9000987e:	492d      	ldr	r1, [pc, #180]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
90009880:	4313      	orrs	r3, r2
90009882:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009884:	4b2b      	ldr	r3, [pc, #172]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
90009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009888:	f023 0220 	bic.w	r2, r3, #32
9000988c:	687b      	ldr	r3, [r7, #4]
9000988e:	699b      	ldr	r3, [r3, #24]
90009890:	4928      	ldr	r1, [pc, #160]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
90009892:	4313      	orrs	r3, r2
90009894:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90009896:	4b27      	ldr	r3, [pc, #156]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
90009898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000989a:	4a26      	ldr	r2, [pc, #152]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
9000989c:	f023 0310 	bic.w	r3, r3, #16
900098a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
900098a2:	4b24      	ldr	r3, [pc, #144]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
900098a6:	4b24      	ldr	r3, [pc, #144]	@ (90009938 <RCCEx_PLL2_Config+0x160>)
900098a8:	4013      	ands	r3, r2
900098aa:	687a      	ldr	r2, [r7, #4]
900098ac:	69d2      	ldr	r2, [r2, #28]
900098ae:	00d2      	lsls	r2, r2, #3
900098b0:	4920      	ldr	r1, [pc, #128]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098b2:	4313      	orrs	r3, r2
900098b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
900098b6:	4b1f      	ldr	r3, [pc, #124]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900098ba:	4a1e      	ldr	r2, [pc, #120]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098bc:	f043 0310 	orr.w	r3, r3, #16
900098c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900098c2:	683b      	ldr	r3, [r7, #0]
900098c4:	2b00      	cmp	r3, #0
900098c6:	d106      	bne.n	900098d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
900098c8:	4b1a      	ldr	r3, [pc, #104]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900098cc:	4a19      	ldr	r2, [pc, #100]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
900098d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
900098d4:	e00f      	b.n	900098f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900098d6:	683b      	ldr	r3, [r7, #0]
900098d8:	2b01      	cmp	r3, #1
900098da:	d106      	bne.n	900098ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
900098dc:	4b15      	ldr	r3, [pc, #84]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900098e0:	4a14      	ldr	r2, [pc, #80]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
900098e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
900098e8:	e005      	b.n	900098f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
900098ea:	4b12      	ldr	r3, [pc, #72]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900098ee:	4a11      	ldr	r2, [pc, #68]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
900098f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
900098f6:	4b0f      	ldr	r3, [pc, #60]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098f8:	681b      	ldr	r3, [r3, #0]
900098fa:	4a0e      	ldr	r2, [pc, #56]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
900098fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009902:	f7f9 fe13 	bl	9000352c <HAL_GetTick>
90009906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009908:	e008      	b.n	9000991c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000990a:	f7f9 fe0f 	bl	9000352c <HAL_GetTick>
9000990e:	4602      	mov	r2, r0
90009910:	68bb      	ldr	r3, [r7, #8]
90009912:	1ad3      	subs	r3, r2, r3
90009914:	2b02      	cmp	r3, #2
90009916:	d901      	bls.n	9000991c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90009918:	2303      	movs	r3, #3
9000991a:	e006      	b.n	9000992a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000991c:	4b05      	ldr	r3, [pc, #20]	@ (90009934 <RCCEx_PLL2_Config+0x15c>)
9000991e:	681b      	ldr	r3, [r3, #0]
90009920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
90009924:	2b00      	cmp	r3, #0
90009926:	d0f0      	beq.n	9000990a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90009928:	7bfb      	ldrb	r3, [r7, #15]
}
9000992a:	4618      	mov	r0, r3
9000992c:	3710      	adds	r7, #16
9000992e:	46bd      	mov	sp, r7
90009930:	bd80      	pop	{r7, pc}
90009932:	bf00      	nop
90009934:	58024400 	.word	0x58024400
90009938:	ffff0007 	.word	0xffff0007

9000993c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000993c:	b580      	push	{r7, lr}
9000993e:	b084      	sub	sp, #16
90009940:	af00      	add	r7, sp, #0
90009942:	6078      	str	r0, [r7, #4]
90009944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009946:	2300      	movs	r3, #0
90009948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000994a:	4b53      	ldr	r3, [pc, #332]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
9000994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000994e:	f003 0303 	and.w	r3, r3, #3
90009952:	2b03      	cmp	r3, #3
90009954:	d101      	bne.n	9000995a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90009956:	2301      	movs	r3, #1
90009958:	e099      	b.n	90009a8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000995a:	4b4f      	ldr	r3, [pc, #316]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
9000995c:	681b      	ldr	r3, [r3, #0]
9000995e:	4a4e      	ldr	r2, [pc, #312]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
90009964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009966:	f7f9 fde1 	bl	9000352c <HAL_GetTick>
9000996a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000996c:	e008      	b.n	90009980 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000996e:	f7f9 fddd 	bl	9000352c <HAL_GetTick>
90009972:	4602      	mov	r2, r0
90009974:	68bb      	ldr	r3, [r7, #8]
90009976:	1ad3      	subs	r3, r2, r3
90009978:	2b02      	cmp	r3, #2
9000997a:	d901      	bls.n	90009980 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000997c:	2303      	movs	r3, #3
9000997e:	e086      	b.n	90009a8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009980:	4b45      	ldr	r3, [pc, #276]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009982:	681b      	ldr	r3, [r3, #0]
90009984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009988:	2b00      	cmp	r3, #0
9000998a:	d1f0      	bne.n	9000996e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000998c:	4b42      	ldr	r3, [pc, #264]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
9000998e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009990:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
90009994:	687b      	ldr	r3, [r7, #4]
90009996:	681b      	ldr	r3, [r3, #0]
90009998:	051b      	lsls	r3, r3, #20
9000999a:	493f      	ldr	r1, [pc, #252]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
9000999c:	4313      	orrs	r3, r2
9000999e:	628b      	str	r3, [r1, #40]	@ 0x28
900099a0:	687b      	ldr	r3, [r7, #4]
900099a2:	685b      	ldr	r3, [r3, #4]
900099a4:	3b01      	subs	r3, #1
900099a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
900099aa:	687b      	ldr	r3, [r7, #4]
900099ac:	689b      	ldr	r3, [r3, #8]
900099ae:	3b01      	subs	r3, #1
900099b0:	025b      	lsls	r3, r3, #9
900099b2:	b29b      	uxth	r3, r3
900099b4:	431a      	orrs	r2, r3
900099b6:	687b      	ldr	r3, [r7, #4]
900099b8:	68db      	ldr	r3, [r3, #12]
900099ba:	3b01      	subs	r3, #1
900099bc:	041b      	lsls	r3, r3, #16
900099be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900099c2:	431a      	orrs	r2, r3
900099c4:	687b      	ldr	r3, [r7, #4]
900099c6:	691b      	ldr	r3, [r3, #16]
900099c8:	3b01      	subs	r3, #1
900099ca:	061b      	lsls	r3, r3, #24
900099cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900099d0:	4931      	ldr	r1, [pc, #196]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
900099d2:	4313      	orrs	r3, r2
900099d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
900099d6:	4b30      	ldr	r3, [pc, #192]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
900099d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900099da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
900099de:	687b      	ldr	r3, [r7, #4]
900099e0:	695b      	ldr	r3, [r3, #20]
900099e2:	492d      	ldr	r1, [pc, #180]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
900099e4:	4313      	orrs	r3, r2
900099e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
900099e8:	4b2b      	ldr	r3, [pc, #172]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
900099ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900099ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
900099f0:	687b      	ldr	r3, [r7, #4]
900099f2:	699b      	ldr	r3, [r3, #24]
900099f4:	4928      	ldr	r1, [pc, #160]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
900099f6:	4313      	orrs	r3, r2
900099f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
900099fa:	4b27      	ldr	r3, [pc, #156]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
900099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900099fe:	4a26      	ldr	r2, [pc, #152]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
90009a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
90009a06:	4b24      	ldr	r3, [pc, #144]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90009a0a:	4b24      	ldr	r3, [pc, #144]	@ (90009a9c <RCCEx_PLL3_Config+0x160>)
90009a0c:	4013      	ands	r3, r2
90009a0e:	687a      	ldr	r2, [r7, #4]
90009a10:	69d2      	ldr	r2, [r2, #28]
90009a12:	00d2      	lsls	r2, r2, #3
90009a14:	4920      	ldr	r1, [pc, #128]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a16:	4313      	orrs	r3, r2
90009a18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
90009a1a:	4b1f      	ldr	r3, [pc, #124]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a1e:	4a1e      	ldr	r2, [pc, #120]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90009a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90009a26:	683b      	ldr	r3, [r7, #0]
90009a28:	2b00      	cmp	r3, #0
90009a2a:	d106      	bne.n	90009a3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90009a2c:	4b1a      	ldr	r3, [pc, #104]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a30:	4a19      	ldr	r2, [pc, #100]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
90009a36:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009a38:	e00f      	b.n	90009a5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90009a3a:	683b      	ldr	r3, [r7, #0]
90009a3c:	2b01      	cmp	r3, #1
90009a3e:	d106      	bne.n	90009a4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90009a40:	4b15      	ldr	r3, [pc, #84]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a44:	4a14      	ldr	r2, [pc, #80]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
90009a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009a4c:	e005      	b.n	90009a5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90009a4e:	4b12      	ldr	r3, [pc, #72]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009a52:	4a11      	ldr	r2, [pc, #68]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90009a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90009a5a:	4b0f      	ldr	r3, [pc, #60]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a5c:	681b      	ldr	r3, [r3, #0]
90009a5e:	4a0e      	ldr	r2, [pc, #56]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
90009a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009a66:	f7f9 fd61 	bl	9000352c <HAL_GetTick>
90009a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009a6c:	e008      	b.n	90009a80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90009a6e:	f7f9 fd5d 	bl	9000352c <HAL_GetTick>
90009a72:	4602      	mov	r2, r0
90009a74:	68bb      	ldr	r3, [r7, #8]
90009a76:	1ad3      	subs	r3, r2, r3
90009a78:	2b02      	cmp	r3, #2
90009a7a:	d901      	bls.n	90009a80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90009a7c:	2303      	movs	r3, #3
90009a7e:	e006      	b.n	90009a8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009a80:	4b05      	ldr	r3, [pc, #20]	@ (90009a98 <RCCEx_PLL3_Config+0x15c>)
90009a82:	681b      	ldr	r3, [r3, #0]
90009a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009a88:	2b00      	cmp	r3, #0
90009a8a:	d0f0      	beq.n	90009a6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
90009a8e:	4618      	mov	r0, r3
90009a90:	3710      	adds	r7, #16
90009a92:	46bd      	mov	sp, r7
90009a94:	bd80      	pop	{r7, pc}
90009a96:	bf00      	nop
90009a98:	58024400 	.word	0x58024400
90009a9c:	ffff0007 	.word	0xffff0007

90009aa0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90009aa0:	b580      	push	{r7, lr}
90009aa2:	b082      	sub	sp, #8
90009aa4:	af00      	add	r7, sp, #0
90009aa6:	6078      	str	r0, [r7, #4]
90009aa8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
90009aaa:	687b      	ldr	r3, [r7, #4]
90009aac:	2b00      	cmp	r3, #0
90009aae:	d101      	bne.n	90009ab4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90009ab0:	2301      	movs	r3, #1
90009ab2:	e02b      	b.n	90009b0c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
90009ab4:	687b      	ldr	r3, [r7, #4]
90009ab6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009aba:	b2db      	uxtb	r3, r3
90009abc:	2b00      	cmp	r3, #0
90009abe:	d106      	bne.n	90009ace <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90009ac0:	687b      	ldr	r3, [r7, #4]
90009ac2:	2200      	movs	r2, #0
90009ac4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90009ac8:	6878      	ldr	r0, [r7, #4]
90009aca:	f000 f825 	bl	90009b18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90009ace:	687b      	ldr	r3, [r7, #4]
90009ad0:	2202      	movs	r2, #2
90009ad2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90009ad6:	687b      	ldr	r3, [r7, #4]
90009ad8:	681a      	ldr	r2, [r3, #0]
90009ada:	687b      	ldr	r3, [r7, #4]
90009adc:	3304      	adds	r3, #4
90009ade:	4619      	mov	r1, r3
90009ae0:	4610      	mov	r0, r2
90009ae2:	f002 f905 	bl	9000bcf0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
90009ae6:	687b      	ldr	r3, [r7, #4]
90009ae8:	6818      	ldr	r0, [r3, #0]
90009aea:	687b      	ldr	r3, [r7, #4]
90009aec:	685b      	ldr	r3, [r3, #4]
90009aee:	461a      	mov	r2, r3
90009af0:	6839      	ldr	r1, [r7, #0]
90009af2:	f002 f959 	bl	9000bda8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
90009af6:	4b07      	ldr	r3, [pc, #28]	@ (90009b14 <HAL_SDRAM_Init+0x74>)
90009af8:	681b      	ldr	r3, [r3, #0]
90009afa:	4a06      	ldr	r2, [pc, #24]	@ (90009b14 <HAL_SDRAM_Init+0x74>)
90009afc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009b00:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90009b02:	687b      	ldr	r3, [r7, #4]
90009b04:	2201      	movs	r2, #1
90009b06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
90009b0a:	2300      	movs	r3, #0
}
90009b0c:	4618      	mov	r0, r3
90009b0e:	3708      	adds	r7, #8
90009b10:	46bd      	mov	sp, r7
90009b12:	bd80      	pop	{r7, pc}
90009b14:	52004000 	.word	0x52004000

90009b18 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
90009b18:	b480      	push	{r7}
90009b1a:	b083      	sub	sp, #12
90009b1c:	af00      	add	r7, sp, #0
90009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009b20:	bf00      	nop
90009b22:	370c      	adds	r7, #12
90009b24:	46bd      	mov	sp, r7
90009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b2a:	4770      	bx	lr

90009b2c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
90009b2c:	b580      	push	{r7, lr}
90009b2e:	b086      	sub	sp, #24
90009b30:	af00      	add	r7, sp, #0
90009b32:	60f8      	str	r0, [r7, #12]
90009b34:	60b9      	str	r1, [r7, #8]
90009b36:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
90009b38:	68fb      	ldr	r3, [r7, #12]
90009b3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009b3e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
90009b40:	7dfb      	ldrb	r3, [r7, #23]
90009b42:	2b02      	cmp	r3, #2
90009b44:	d101      	bne.n	90009b4a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
90009b46:	2302      	movs	r3, #2
90009b48:	e021      	b.n	90009b8e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
90009b4a:	7dfb      	ldrb	r3, [r7, #23]
90009b4c:	2b01      	cmp	r3, #1
90009b4e:	d002      	beq.n	90009b56 <HAL_SDRAM_SendCommand+0x2a>
90009b50:	7dfb      	ldrb	r3, [r7, #23]
90009b52:	2b05      	cmp	r3, #5
90009b54:	d118      	bne.n	90009b88 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009b56:	68fb      	ldr	r3, [r7, #12]
90009b58:	2202      	movs	r2, #2
90009b5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90009b5e:	68fb      	ldr	r3, [r7, #12]
90009b60:	681b      	ldr	r3, [r3, #0]
90009b62:	687a      	ldr	r2, [r7, #4]
90009b64:	68b9      	ldr	r1, [r7, #8]
90009b66:	4618      	mov	r0, r3
90009b68:	f002 f988 	bl	9000be7c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009b6c:	68bb      	ldr	r3, [r7, #8]
90009b6e:	681b      	ldr	r3, [r3, #0]
90009b70:	2b02      	cmp	r3, #2
90009b72:	d104      	bne.n	90009b7e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009b74:	68fb      	ldr	r3, [r7, #12]
90009b76:	2205      	movs	r2, #5
90009b78:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009b7c:	e006      	b.n	90009b8c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
90009b7e:	68fb      	ldr	r3, [r7, #12]
90009b80:	2201      	movs	r2, #1
90009b82:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009b86:	e001      	b.n	90009b8c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
90009b88:	2301      	movs	r3, #1
90009b8a:	e000      	b.n	90009b8e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
90009b8c:	2300      	movs	r3, #0
}
90009b8e:	4618      	mov	r0, r3
90009b90:	3718      	adds	r7, #24
90009b92:	46bd      	mov	sp, r7
90009b94:	bd80      	pop	{r7, pc}

90009b96 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90009b96:	b580      	push	{r7, lr}
90009b98:	b082      	sub	sp, #8
90009b9a:	af00      	add	r7, sp, #0
90009b9c:	6078      	str	r0, [r7, #4]
90009b9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90009ba0:	687b      	ldr	r3, [r7, #4]
90009ba2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009ba6:	b2db      	uxtb	r3, r3
90009ba8:	2b02      	cmp	r3, #2
90009baa:	d101      	bne.n	90009bb0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90009bac:	2302      	movs	r3, #2
90009bae:	e016      	b.n	90009bde <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90009bb0:	687b      	ldr	r3, [r7, #4]
90009bb2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009bb6:	b2db      	uxtb	r3, r3
90009bb8:	2b01      	cmp	r3, #1
90009bba:	d10f      	bne.n	90009bdc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009bbc:	687b      	ldr	r3, [r7, #4]
90009bbe:	2202      	movs	r2, #2
90009bc0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
90009bc4:	687b      	ldr	r3, [r7, #4]
90009bc6:	681b      	ldr	r3, [r3, #0]
90009bc8:	6839      	ldr	r1, [r7, #0]
90009bca:	4618      	mov	r0, r3
90009bcc:	f002 f97a 	bl	9000bec4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90009bd0:	687b      	ldr	r3, [r7, #4]
90009bd2:	2201      	movs	r2, #1
90009bd4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
90009bd8:	2300      	movs	r3, #0
90009bda:	e000      	b.n	90009bde <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90009bdc:	2301      	movs	r3, #1
}
90009bde:	4618      	mov	r0, r3
90009be0:	3708      	adds	r7, #8
90009be2:	46bd      	mov	sp, r7
90009be4:	bd80      	pop	{r7, pc}

90009be6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
90009be6:	b580      	push	{r7, lr}
90009be8:	b082      	sub	sp, #8
90009bea:	af00      	add	r7, sp, #0
90009bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90009bee:	687b      	ldr	r3, [r7, #4]
90009bf0:	2b00      	cmp	r3, #0
90009bf2:	d101      	bne.n	90009bf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
90009bf4:	2301      	movs	r3, #1
90009bf6:	e049      	b.n	90009c8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90009bf8:	687b      	ldr	r3, [r7, #4]
90009bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90009bfe:	b2db      	uxtb	r3, r3
90009c00:	2b00      	cmp	r3, #0
90009c02:	d106      	bne.n	90009c12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90009c04:	687b      	ldr	r3, [r7, #4]
90009c06:	2200      	movs	r2, #0
90009c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
90009c0c:	6878      	ldr	r0, [r7, #4]
90009c0e:	f000 f89d 	bl	90009d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90009c12:	687b      	ldr	r3, [r7, #4]
90009c14:	2202      	movs	r2, #2
90009c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90009c1a:	687b      	ldr	r3, [r7, #4]
90009c1c:	681a      	ldr	r2, [r3, #0]
90009c1e:	687b      	ldr	r3, [r7, #4]
90009c20:	3304      	adds	r3, #4
90009c22:	4619      	mov	r1, r3
90009c24:	4610      	mov	r0, r2
90009c26:	f000 fb5d 	bl	9000a2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90009c2a:	687b      	ldr	r3, [r7, #4]
90009c2c:	2201      	movs	r2, #1
90009c2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009c32:	687b      	ldr	r3, [r7, #4]
90009c34:	2201      	movs	r2, #1
90009c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009c3a:	687b      	ldr	r3, [r7, #4]
90009c3c:	2201      	movs	r2, #1
90009c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009c42:	687b      	ldr	r3, [r7, #4]
90009c44:	2201      	movs	r2, #1
90009c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009c4a:	687b      	ldr	r3, [r7, #4]
90009c4c:	2201      	movs	r2, #1
90009c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009c52:	687b      	ldr	r3, [r7, #4]
90009c54:	2201      	movs	r2, #1
90009c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009c5a:	687b      	ldr	r3, [r7, #4]
90009c5c:	2201      	movs	r2, #1
90009c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009c62:	687b      	ldr	r3, [r7, #4]
90009c64:	2201      	movs	r2, #1
90009c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009c6a:	687b      	ldr	r3, [r7, #4]
90009c6c:	2201      	movs	r2, #1
90009c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009c72:	687b      	ldr	r3, [r7, #4]
90009c74:	2201      	movs	r2, #1
90009c76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009c7a:	687b      	ldr	r3, [r7, #4]
90009c7c:	2201      	movs	r2, #1
90009c7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009c82:	687b      	ldr	r3, [r7, #4]
90009c84:	2201      	movs	r2, #1
90009c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90009c8a:	2300      	movs	r3, #0
}
90009c8c:	4618      	mov	r0, r3
90009c8e:	3708      	adds	r7, #8
90009c90:	46bd      	mov	sp, r7
90009c92:	bd80      	pop	{r7, pc}

90009c94 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009c94:	b580      	push	{r7, lr}
90009c96:	b082      	sub	sp, #8
90009c98:	af00      	add	r7, sp, #0
90009c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
90009c9c:	687b      	ldr	r3, [r7, #4]
90009c9e:	2202      	movs	r2, #2
90009ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90009ca4:	687b      	ldr	r3, [r7, #4]
90009ca6:	681b      	ldr	r3, [r3, #0]
90009ca8:	6a1a      	ldr	r2, [r3, #32]
90009caa:	f241 1311 	movw	r3, #4369	@ 0x1111
90009cae:	4013      	ands	r3, r2
90009cb0:	2b00      	cmp	r3, #0
90009cb2:	d10f      	bne.n	90009cd4 <HAL_TIM_PWM_DeInit+0x40>
90009cb4:	687b      	ldr	r3, [r7, #4]
90009cb6:	681b      	ldr	r3, [r3, #0]
90009cb8:	6a1a      	ldr	r2, [r3, #32]
90009cba:	f240 4344 	movw	r3, #1092	@ 0x444
90009cbe:	4013      	ands	r3, r2
90009cc0:	2b00      	cmp	r3, #0
90009cc2:	d107      	bne.n	90009cd4 <HAL_TIM_PWM_DeInit+0x40>
90009cc4:	687b      	ldr	r3, [r7, #4]
90009cc6:	681b      	ldr	r3, [r3, #0]
90009cc8:	681a      	ldr	r2, [r3, #0]
90009cca:	687b      	ldr	r3, [r7, #4]
90009ccc:	681b      	ldr	r3, [r3, #0]
90009cce:	f022 0201 	bic.w	r2, r2, #1
90009cd2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
90009cd4:	6878      	ldr	r0, [r7, #4]
90009cd6:	f000 f843 	bl	90009d60 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
90009cda:	687b      	ldr	r3, [r7, #4]
90009cdc:	2200      	movs	r2, #0
90009cde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009ce2:	687b      	ldr	r3, [r7, #4]
90009ce4:	2200      	movs	r2, #0
90009ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009cea:	687b      	ldr	r3, [r7, #4]
90009cec:	2200      	movs	r2, #0
90009cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009cf2:	687b      	ldr	r3, [r7, #4]
90009cf4:	2200      	movs	r2, #0
90009cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009cfa:	687b      	ldr	r3, [r7, #4]
90009cfc:	2200      	movs	r2, #0
90009cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009d02:	687b      	ldr	r3, [r7, #4]
90009d04:	2200      	movs	r2, #0
90009d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009d0a:	687b      	ldr	r3, [r7, #4]
90009d0c:	2200      	movs	r2, #0
90009d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009d12:	687b      	ldr	r3, [r7, #4]
90009d14:	2200      	movs	r2, #0
90009d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009d1a:	687b      	ldr	r3, [r7, #4]
90009d1c:	2200      	movs	r2, #0
90009d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009d22:	687b      	ldr	r3, [r7, #4]
90009d24:	2200      	movs	r2, #0
90009d26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009d2a:	687b      	ldr	r3, [r7, #4]
90009d2c:	2200      	movs	r2, #0
90009d2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009d32:	687b      	ldr	r3, [r7, #4]
90009d34:	2200      	movs	r2, #0
90009d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
90009d3a:	687b      	ldr	r3, [r7, #4]
90009d3c:	2200      	movs	r2, #0
90009d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90009d42:	2300      	movs	r3, #0
}
90009d44:	4618      	mov	r0, r3
90009d46:	3708      	adds	r7, #8
90009d48:	46bd      	mov	sp, r7
90009d4a:	bd80      	pop	{r7, pc}

90009d4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90009d4c:	b480      	push	{r7}
90009d4e:	b083      	sub	sp, #12
90009d50:	af00      	add	r7, sp, #0
90009d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009d54:	bf00      	nop
90009d56:	370c      	adds	r7, #12
90009d58:	46bd      	mov	sp, r7
90009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90009d5e:	4770      	bx	lr

90009d60 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009d60:	b480      	push	{r7}
90009d62:	b083      	sub	sp, #12
90009d64:	af00      	add	r7, sp, #0
90009d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009d68:	bf00      	nop
90009d6a:	370c      	adds	r7, #12
90009d6c:	46bd      	mov	sp, r7
90009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009d72:	4770      	bx	lr

90009d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
90009d74:	b580      	push	{r7, lr}
90009d76:	b084      	sub	sp, #16
90009d78:	af00      	add	r7, sp, #0
90009d7a:	6078      	str	r0, [r7, #4]
90009d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
90009d7e:	683b      	ldr	r3, [r7, #0]
90009d80:	2b00      	cmp	r3, #0
90009d82:	d109      	bne.n	90009d98 <HAL_TIM_PWM_Start+0x24>
90009d84:	687b      	ldr	r3, [r7, #4]
90009d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
90009d8a:	b2db      	uxtb	r3, r3
90009d8c:	2b01      	cmp	r3, #1
90009d8e:	bf14      	ite	ne
90009d90:	2301      	movne	r3, #1
90009d92:	2300      	moveq	r3, #0
90009d94:	b2db      	uxtb	r3, r3
90009d96:	e03c      	b.n	90009e12 <HAL_TIM_PWM_Start+0x9e>
90009d98:	683b      	ldr	r3, [r7, #0]
90009d9a:	2b04      	cmp	r3, #4
90009d9c:	d109      	bne.n	90009db2 <HAL_TIM_PWM_Start+0x3e>
90009d9e:	687b      	ldr	r3, [r7, #4]
90009da0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
90009da4:	b2db      	uxtb	r3, r3
90009da6:	2b01      	cmp	r3, #1
90009da8:	bf14      	ite	ne
90009daa:	2301      	movne	r3, #1
90009dac:	2300      	moveq	r3, #0
90009dae:	b2db      	uxtb	r3, r3
90009db0:	e02f      	b.n	90009e12 <HAL_TIM_PWM_Start+0x9e>
90009db2:	683b      	ldr	r3, [r7, #0]
90009db4:	2b08      	cmp	r3, #8
90009db6:	d109      	bne.n	90009dcc <HAL_TIM_PWM_Start+0x58>
90009db8:	687b      	ldr	r3, [r7, #4]
90009dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90009dbe:	b2db      	uxtb	r3, r3
90009dc0:	2b01      	cmp	r3, #1
90009dc2:	bf14      	ite	ne
90009dc4:	2301      	movne	r3, #1
90009dc6:	2300      	moveq	r3, #0
90009dc8:	b2db      	uxtb	r3, r3
90009dca:	e022      	b.n	90009e12 <HAL_TIM_PWM_Start+0x9e>
90009dcc:	683b      	ldr	r3, [r7, #0]
90009dce:	2b0c      	cmp	r3, #12
90009dd0:	d109      	bne.n	90009de6 <HAL_TIM_PWM_Start+0x72>
90009dd2:	687b      	ldr	r3, [r7, #4]
90009dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90009dd8:	b2db      	uxtb	r3, r3
90009dda:	2b01      	cmp	r3, #1
90009ddc:	bf14      	ite	ne
90009dde:	2301      	movne	r3, #1
90009de0:	2300      	moveq	r3, #0
90009de2:	b2db      	uxtb	r3, r3
90009de4:	e015      	b.n	90009e12 <HAL_TIM_PWM_Start+0x9e>
90009de6:	683b      	ldr	r3, [r7, #0]
90009de8:	2b10      	cmp	r3, #16
90009dea:	d109      	bne.n	90009e00 <HAL_TIM_PWM_Start+0x8c>
90009dec:	687b      	ldr	r3, [r7, #4]
90009dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90009df2:	b2db      	uxtb	r3, r3
90009df4:	2b01      	cmp	r3, #1
90009df6:	bf14      	ite	ne
90009df8:	2301      	movne	r3, #1
90009dfa:	2300      	moveq	r3, #0
90009dfc:	b2db      	uxtb	r3, r3
90009dfe:	e008      	b.n	90009e12 <HAL_TIM_PWM_Start+0x9e>
90009e00:	687b      	ldr	r3, [r7, #4]
90009e02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
90009e06:	b2db      	uxtb	r3, r3
90009e08:	2b01      	cmp	r3, #1
90009e0a:	bf14      	ite	ne
90009e0c:	2301      	movne	r3, #1
90009e0e:	2300      	moveq	r3, #0
90009e10:	b2db      	uxtb	r3, r3
90009e12:	2b00      	cmp	r3, #0
90009e14:	d001      	beq.n	90009e1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
90009e16:	2301      	movs	r3, #1
90009e18:	e0a1      	b.n	90009f5e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
90009e1a:	683b      	ldr	r3, [r7, #0]
90009e1c:	2b00      	cmp	r3, #0
90009e1e:	d104      	bne.n	90009e2a <HAL_TIM_PWM_Start+0xb6>
90009e20:	687b      	ldr	r3, [r7, #4]
90009e22:	2202      	movs	r2, #2
90009e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009e28:	e023      	b.n	90009e72 <HAL_TIM_PWM_Start+0xfe>
90009e2a:	683b      	ldr	r3, [r7, #0]
90009e2c:	2b04      	cmp	r3, #4
90009e2e:	d104      	bne.n	90009e3a <HAL_TIM_PWM_Start+0xc6>
90009e30:	687b      	ldr	r3, [r7, #4]
90009e32:	2202      	movs	r2, #2
90009e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009e38:	e01b      	b.n	90009e72 <HAL_TIM_PWM_Start+0xfe>
90009e3a:	683b      	ldr	r3, [r7, #0]
90009e3c:	2b08      	cmp	r3, #8
90009e3e:	d104      	bne.n	90009e4a <HAL_TIM_PWM_Start+0xd6>
90009e40:	687b      	ldr	r3, [r7, #4]
90009e42:	2202      	movs	r2, #2
90009e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009e48:	e013      	b.n	90009e72 <HAL_TIM_PWM_Start+0xfe>
90009e4a:	683b      	ldr	r3, [r7, #0]
90009e4c:	2b0c      	cmp	r3, #12
90009e4e:	d104      	bne.n	90009e5a <HAL_TIM_PWM_Start+0xe6>
90009e50:	687b      	ldr	r3, [r7, #4]
90009e52:	2202      	movs	r2, #2
90009e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009e58:	e00b      	b.n	90009e72 <HAL_TIM_PWM_Start+0xfe>
90009e5a:	683b      	ldr	r3, [r7, #0]
90009e5c:	2b10      	cmp	r3, #16
90009e5e:	d104      	bne.n	90009e6a <HAL_TIM_PWM_Start+0xf6>
90009e60:	687b      	ldr	r3, [r7, #4]
90009e62:	2202      	movs	r2, #2
90009e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009e68:	e003      	b.n	90009e72 <HAL_TIM_PWM_Start+0xfe>
90009e6a:	687b      	ldr	r3, [r7, #4]
90009e6c:	2202      	movs	r2, #2
90009e6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
90009e72:	687b      	ldr	r3, [r7, #4]
90009e74:	681b      	ldr	r3, [r3, #0]
90009e76:	2201      	movs	r2, #1
90009e78:	6839      	ldr	r1, [r7, #0]
90009e7a:	4618      	mov	r0, r3
90009e7c:	f000 fda8 	bl	9000a9d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
90009e80:	687b      	ldr	r3, [r7, #4]
90009e82:	681b      	ldr	r3, [r3, #0]
90009e84:	4a38      	ldr	r2, [pc, #224]	@ (90009f68 <HAL_TIM_PWM_Start+0x1f4>)
90009e86:	4293      	cmp	r3, r2
90009e88:	d013      	beq.n	90009eb2 <HAL_TIM_PWM_Start+0x13e>
90009e8a:	687b      	ldr	r3, [r7, #4]
90009e8c:	681b      	ldr	r3, [r3, #0]
90009e8e:	4a37      	ldr	r2, [pc, #220]	@ (90009f6c <HAL_TIM_PWM_Start+0x1f8>)
90009e90:	4293      	cmp	r3, r2
90009e92:	d00e      	beq.n	90009eb2 <HAL_TIM_PWM_Start+0x13e>
90009e94:	687b      	ldr	r3, [r7, #4]
90009e96:	681b      	ldr	r3, [r3, #0]
90009e98:	4a35      	ldr	r2, [pc, #212]	@ (90009f70 <HAL_TIM_PWM_Start+0x1fc>)
90009e9a:	4293      	cmp	r3, r2
90009e9c:	d009      	beq.n	90009eb2 <HAL_TIM_PWM_Start+0x13e>
90009e9e:	687b      	ldr	r3, [r7, #4]
90009ea0:	681b      	ldr	r3, [r3, #0]
90009ea2:	4a34      	ldr	r2, [pc, #208]	@ (90009f74 <HAL_TIM_PWM_Start+0x200>)
90009ea4:	4293      	cmp	r3, r2
90009ea6:	d004      	beq.n	90009eb2 <HAL_TIM_PWM_Start+0x13e>
90009ea8:	687b      	ldr	r3, [r7, #4]
90009eaa:	681b      	ldr	r3, [r3, #0]
90009eac:	4a32      	ldr	r2, [pc, #200]	@ (90009f78 <HAL_TIM_PWM_Start+0x204>)
90009eae:	4293      	cmp	r3, r2
90009eb0:	d101      	bne.n	90009eb6 <HAL_TIM_PWM_Start+0x142>
90009eb2:	2301      	movs	r3, #1
90009eb4:	e000      	b.n	90009eb8 <HAL_TIM_PWM_Start+0x144>
90009eb6:	2300      	movs	r3, #0
90009eb8:	2b00      	cmp	r3, #0
90009eba:	d007      	beq.n	90009ecc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
90009ebc:	687b      	ldr	r3, [r7, #4]
90009ebe:	681b      	ldr	r3, [r3, #0]
90009ec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90009ec2:	687b      	ldr	r3, [r7, #4]
90009ec4:	681b      	ldr	r3, [r3, #0]
90009ec6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90009eca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
90009ecc:	687b      	ldr	r3, [r7, #4]
90009ece:	681b      	ldr	r3, [r3, #0]
90009ed0:	4a25      	ldr	r2, [pc, #148]	@ (90009f68 <HAL_TIM_PWM_Start+0x1f4>)
90009ed2:	4293      	cmp	r3, r2
90009ed4:	d022      	beq.n	90009f1c <HAL_TIM_PWM_Start+0x1a8>
90009ed6:	687b      	ldr	r3, [r7, #4]
90009ed8:	681b      	ldr	r3, [r3, #0]
90009eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009ede:	d01d      	beq.n	90009f1c <HAL_TIM_PWM_Start+0x1a8>
90009ee0:	687b      	ldr	r3, [r7, #4]
90009ee2:	681b      	ldr	r3, [r3, #0]
90009ee4:	4a25      	ldr	r2, [pc, #148]	@ (90009f7c <HAL_TIM_PWM_Start+0x208>)
90009ee6:	4293      	cmp	r3, r2
90009ee8:	d018      	beq.n	90009f1c <HAL_TIM_PWM_Start+0x1a8>
90009eea:	687b      	ldr	r3, [r7, #4]
90009eec:	681b      	ldr	r3, [r3, #0]
90009eee:	4a24      	ldr	r2, [pc, #144]	@ (90009f80 <HAL_TIM_PWM_Start+0x20c>)
90009ef0:	4293      	cmp	r3, r2
90009ef2:	d013      	beq.n	90009f1c <HAL_TIM_PWM_Start+0x1a8>
90009ef4:	687b      	ldr	r3, [r7, #4]
90009ef6:	681b      	ldr	r3, [r3, #0]
90009ef8:	4a22      	ldr	r2, [pc, #136]	@ (90009f84 <HAL_TIM_PWM_Start+0x210>)
90009efa:	4293      	cmp	r3, r2
90009efc:	d00e      	beq.n	90009f1c <HAL_TIM_PWM_Start+0x1a8>
90009efe:	687b      	ldr	r3, [r7, #4]
90009f00:	681b      	ldr	r3, [r3, #0]
90009f02:	4a1a      	ldr	r2, [pc, #104]	@ (90009f6c <HAL_TIM_PWM_Start+0x1f8>)
90009f04:	4293      	cmp	r3, r2
90009f06:	d009      	beq.n	90009f1c <HAL_TIM_PWM_Start+0x1a8>
90009f08:	687b      	ldr	r3, [r7, #4]
90009f0a:	681b      	ldr	r3, [r3, #0]
90009f0c:	4a1e      	ldr	r2, [pc, #120]	@ (90009f88 <HAL_TIM_PWM_Start+0x214>)
90009f0e:	4293      	cmp	r3, r2
90009f10:	d004      	beq.n	90009f1c <HAL_TIM_PWM_Start+0x1a8>
90009f12:	687b      	ldr	r3, [r7, #4]
90009f14:	681b      	ldr	r3, [r3, #0]
90009f16:	4a16      	ldr	r2, [pc, #88]	@ (90009f70 <HAL_TIM_PWM_Start+0x1fc>)
90009f18:	4293      	cmp	r3, r2
90009f1a:	d115      	bne.n	90009f48 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
90009f1c:	687b      	ldr	r3, [r7, #4]
90009f1e:	681b      	ldr	r3, [r3, #0]
90009f20:	689a      	ldr	r2, [r3, #8]
90009f22:	4b1a      	ldr	r3, [pc, #104]	@ (90009f8c <HAL_TIM_PWM_Start+0x218>)
90009f24:	4013      	ands	r3, r2
90009f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90009f28:	68fb      	ldr	r3, [r7, #12]
90009f2a:	2b06      	cmp	r3, #6
90009f2c:	d015      	beq.n	90009f5a <HAL_TIM_PWM_Start+0x1e6>
90009f2e:	68fb      	ldr	r3, [r7, #12]
90009f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90009f34:	d011      	beq.n	90009f5a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
90009f36:	687b      	ldr	r3, [r7, #4]
90009f38:	681b      	ldr	r3, [r3, #0]
90009f3a:	681a      	ldr	r2, [r3, #0]
90009f3c:	687b      	ldr	r3, [r7, #4]
90009f3e:	681b      	ldr	r3, [r3, #0]
90009f40:	f042 0201 	orr.w	r2, r2, #1
90009f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90009f46:	e008      	b.n	90009f5a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
90009f48:	687b      	ldr	r3, [r7, #4]
90009f4a:	681b      	ldr	r3, [r3, #0]
90009f4c:	681a      	ldr	r2, [r3, #0]
90009f4e:	687b      	ldr	r3, [r7, #4]
90009f50:	681b      	ldr	r3, [r3, #0]
90009f52:	f042 0201 	orr.w	r2, r2, #1
90009f56:	601a      	str	r2, [r3, #0]
90009f58:	e000      	b.n	90009f5c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90009f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
90009f5c:	2300      	movs	r3, #0
}
90009f5e:	4618      	mov	r0, r3
90009f60:	3710      	adds	r7, #16
90009f62:	46bd      	mov	sp, r7
90009f64:	bd80      	pop	{r7, pc}
90009f66:	bf00      	nop
90009f68:	40010000 	.word	0x40010000
90009f6c:	40010400 	.word	0x40010400
90009f70:	40014000 	.word	0x40014000
90009f74:	40014400 	.word	0x40014400
90009f78:	40014800 	.word	0x40014800
90009f7c:	40000400 	.word	0x40000400
90009f80:	40000800 	.word	0x40000800
90009f84:	40000c00 	.word	0x40000c00
90009f88:	40001800 	.word	0x40001800
90009f8c:	00010007 	.word	0x00010007

90009f90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
90009f90:	b580      	push	{r7, lr}
90009f92:	b082      	sub	sp, #8
90009f94:	af00      	add	r7, sp, #0
90009f96:	6078      	str	r0, [r7, #4]
90009f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
90009f9a:	687b      	ldr	r3, [r7, #4]
90009f9c:	681b      	ldr	r3, [r3, #0]
90009f9e:	2200      	movs	r2, #0
90009fa0:	6839      	ldr	r1, [r7, #0]
90009fa2:	4618      	mov	r0, r3
90009fa4:	f000 fd14 	bl	9000a9d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
90009fa8:	687b      	ldr	r3, [r7, #4]
90009faa:	681b      	ldr	r3, [r3, #0]
90009fac:	4a3e      	ldr	r2, [pc, #248]	@ (9000a0a8 <HAL_TIM_PWM_Stop+0x118>)
90009fae:	4293      	cmp	r3, r2
90009fb0:	d013      	beq.n	90009fda <HAL_TIM_PWM_Stop+0x4a>
90009fb2:	687b      	ldr	r3, [r7, #4]
90009fb4:	681b      	ldr	r3, [r3, #0]
90009fb6:	4a3d      	ldr	r2, [pc, #244]	@ (9000a0ac <HAL_TIM_PWM_Stop+0x11c>)
90009fb8:	4293      	cmp	r3, r2
90009fba:	d00e      	beq.n	90009fda <HAL_TIM_PWM_Stop+0x4a>
90009fbc:	687b      	ldr	r3, [r7, #4]
90009fbe:	681b      	ldr	r3, [r3, #0]
90009fc0:	4a3b      	ldr	r2, [pc, #236]	@ (9000a0b0 <HAL_TIM_PWM_Stop+0x120>)
90009fc2:	4293      	cmp	r3, r2
90009fc4:	d009      	beq.n	90009fda <HAL_TIM_PWM_Stop+0x4a>
90009fc6:	687b      	ldr	r3, [r7, #4]
90009fc8:	681b      	ldr	r3, [r3, #0]
90009fca:	4a3a      	ldr	r2, [pc, #232]	@ (9000a0b4 <HAL_TIM_PWM_Stop+0x124>)
90009fcc:	4293      	cmp	r3, r2
90009fce:	d004      	beq.n	90009fda <HAL_TIM_PWM_Stop+0x4a>
90009fd0:	687b      	ldr	r3, [r7, #4]
90009fd2:	681b      	ldr	r3, [r3, #0]
90009fd4:	4a38      	ldr	r2, [pc, #224]	@ (9000a0b8 <HAL_TIM_PWM_Stop+0x128>)
90009fd6:	4293      	cmp	r3, r2
90009fd8:	d101      	bne.n	90009fde <HAL_TIM_PWM_Stop+0x4e>
90009fda:	2301      	movs	r3, #1
90009fdc:	e000      	b.n	90009fe0 <HAL_TIM_PWM_Stop+0x50>
90009fde:	2300      	movs	r3, #0
90009fe0:	2b00      	cmp	r3, #0
90009fe2:	d017      	beq.n	9000a014 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
90009fe4:	687b      	ldr	r3, [r7, #4]
90009fe6:	681b      	ldr	r3, [r3, #0]
90009fe8:	6a1a      	ldr	r2, [r3, #32]
90009fea:	f241 1311 	movw	r3, #4369	@ 0x1111
90009fee:	4013      	ands	r3, r2
90009ff0:	2b00      	cmp	r3, #0
90009ff2:	d10f      	bne.n	9000a014 <HAL_TIM_PWM_Stop+0x84>
90009ff4:	687b      	ldr	r3, [r7, #4]
90009ff6:	681b      	ldr	r3, [r3, #0]
90009ff8:	6a1a      	ldr	r2, [r3, #32]
90009ffa:	f240 4344 	movw	r3, #1092	@ 0x444
90009ffe:	4013      	ands	r3, r2
9000a000:	2b00      	cmp	r3, #0
9000a002:	d107      	bne.n	9000a014 <HAL_TIM_PWM_Stop+0x84>
9000a004:	687b      	ldr	r3, [r7, #4]
9000a006:	681b      	ldr	r3, [r3, #0]
9000a008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a00a:	687b      	ldr	r3, [r7, #4]
9000a00c:	681b      	ldr	r3, [r3, #0]
9000a00e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
9000a012:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
9000a014:	687b      	ldr	r3, [r7, #4]
9000a016:	681b      	ldr	r3, [r3, #0]
9000a018:	6a1a      	ldr	r2, [r3, #32]
9000a01a:	f241 1311 	movw	r3, #4369	@ 0x1111
9000a01e:	4013      	ands	r3, r2
9000a020:	2b00      	cmp	r3, #0
9000a022:	d10f      	bne.n	9000a044 <HAL_TIM_PWM_Stop+0xb4>
9000a024:	687b      	ldr	r3, [r7, #4]
9000a026:	681b      	ldr	r3, [r3, #0]
9000a028:	6a1a      	ldr	r2, [r3, #32]
9000a02a:	f240 4344 	movw	r3, #1092	@ 0x444
9000a02e:	4013      	ands	r3, r2
9000a030:	2b00      	cmp	r3, #0
9000a032:	d107      	bne.n	9000a044 <HAL_TIM_PWM_Stop+0xb4>
9000a034:	687b      	ldr	r3, [r7, #4]
9000a036:	681b      	ldr	r3, [r3, #0]
9000a038:	681a      	ldr	r2, [r3, #0]
9000a03a:	687b      	ldr	r3, [r7, #4]
9000a03c:	681b      	ldr	r3, [r3, #0]
9000a03e:	f022 0201 	bic.w	r2, r2, #1
9000a042:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
9000a044:	683b      	ldr	r3, [r7, #0]
9000a046:	2b00      	cmp	r3, #0
9000a048:	d104      	bne.n	9000a054 <HAL_TIM_PWM_Stop+0xc4>
9000a04a:	687b      	ldr	r3, [r7, #4]
9000a04c:	2201      	movs	r2, #1
9000a04e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000a052:	e023      	b.n	9000a09c <HAL_TIM_PWM_Stop+0x10c>
9000a054:	683b      	ldr	r3, [r7, #0]
9000a056:	2b04      	cmp	r3, #4
9000a058:	d104      	bne.n	9000a064 <HAL_TIM_PWM_Stop+0xd4>
9000a05a:	687b      	ldr	r3, [r7, #4]
9000a05c:	2201      	movs	r2, #1
9000a05e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000a062:	e01b      	b.n	9000a09c <HAL_TIM_PWM_Stop+0x10c>
9000a064:	683b      	ldr	r3, [r7, #0]
9000a066:	2b08      	cmp	r3, #8
9000a068:	d104      	bne.n	9000a074 <HAL_TIM_PWM_Stop+0xe4>
9000a06a:	687b      	ldr	r3, [r7, #4]
9000a06c:	2201      	movs	r2, #1
9000a06e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
9000a072:	e013      	b.n	9000a09c <HAL_TIM_PWM_Stop+0x10c>
9000a074:	683b      	ldr	r3, [r7, #0]
9000a076:	2b0c      	cmp	r3, #12
9000a078:	d104      	bne.n	9000a084 <HAL_TIM_PWM_Stop+0xf4>
9000a07a:	687b      	ldr	r3, [r7, #4]
9000a07c:	2201      	movs	r2, #1
9000a07e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000a082:	e00b      	b.n	9000a09c <HAL_TIM_PWM_Stop+0x10c>
9000a084:	683b      	ldr	r3, [r7, #0]
9000a086:	2b10      	cmp	r3, #16
9000a088:	d104      	bne.n	9000a094 <HAL_TIM_PWM_Stop+0x104>
9000a08a:	687b      	ldr	r3, [r7, #4]
9000a08c:	2201      	movs	r2, #1
9000a08e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000a092:	e003      	b.n	9000a09c <HAL_TIM_PWM_Stop+0x10c>
9000a094:	687b      	ldr	r3, [r7, #4]
9000a096:	2201      	movs	r2, #1
9000a098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
9000a09c:	2300      	movs	r3, #0
}
9000a09e:	4618      	mov	r0, r3
9000a0a0:	3708      	adds	r7, #8
9000a0a2:	46bd      	mov	sp, r7
9000a0a4:	bd80      	pop	{r7, pc}
9000a0a6:	bf00      	nop
9000a0a8:	40010000 	.word	0x40010000
9000a0ac:	40010400 	.word	0x40010400
9000a0b0:	40014000 	.word	0x40014000
9000a0b4:	40014400 	.word	0x40014400
9000a0b8:	40014800 	.word	0x40014800

9000a0bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
9000a0bc:	b580      	push	{r7, lr}
9000a0be:	b086      	sub	sp, #24
9000a0c0:	af00      	add	r7, sp, #0
9000a0c2:	60f8      	str	r0, [r7, #12]
9000a0c4:	60b9      	str	r1, [r7, #8]
9000a0c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
9000a0c8:	2300      	movs	r3, #0
9000a0ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
9000a0cc:	68fb      	ldr	r3, [r7, #12]
9000a0ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
9000a0d2:	2b01      	cmp	r3, #1
9000a0d4:	d101      	bne.n	9000a0da <HAL_TIM_PWM_ConfigChannel+0x1e>
9000a0d6:	2302      	movs	r3, #2
9000a0d8:	e0ff      	b.n	9000a2da <HAL_TIM_PWM_ConfigChannel+0x21e>
9000a0da:	68fb      	ldr	r3, [r7, #12]
9000a0dc:	2201      	movs	r2, #1
9000a0de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
9000a0e2:	687b      	ldr	r3, [r7, #4]
9000a0e4:	2b14      	cmp	r3, #20
9000a0e6:	f200 80f0 	bhi.w	9000a2ca <HAL_TIM_PWM_ConfigChannel+0x20e>
9000a0ea:	a201      	add	r2, pc, #4	@ (adr r2, 9000a0f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
9000a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a0f0:	9000a145 	.word	0x9000a145
9000a0f4:	9000a2cb 	.word	0x9000a2cb
9000a0f8:	9000a2cb 	.word	0x9000a2cb
9000a0fc:	9000a2cb 	.word	0x9000a2cb
9000a100:	9000a185 	.word	0x9000a185
9000a104:	9000a2cb 	.word	0x9000a2cb
9000a108:	9000a2cb 	.word	0x9000a2cb
9000a10c:	9000a2cb 	.word	0x9000a2cb
9000a110:	9000a1c7 	.word	0x9000a1c7
9000a114:	9000a2cb 	.word	0x9000a2cb
9000a118:	9000a2cb 	.word	0x9000a2cb
9000a11c:	9000a2cb 	.word	0x9000a2cb
9000a120:	9000a207 	.word	0x9000a207
9000a124:	9000a2cb 	.word	0x9000a2cb
9000a128:	9000a2cb 	.word	0x9000a2cb
9000a12c:	9000a2cb 	.word	0x9000a2cb
9000a130:	9000a249 	.word	0x9000a249
9000a134:	9000a2cb 	.word	0x9000a2cb
9000a138:	9000a2cb 	.word	0x9000a2cb
9000a13c:	9000a2cb 	.word	0x9000a2cb
9000a140:	9000a289 	.word	0x9000a289
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
9000a144:	68fb      	ldr	r3, [r7, #12]
9000a146:	681b      	ldr	r3, [r3, #0]
9000a148:	68b9      	ldr	r1, [r7, #8]
9000a14a:	4618      	mov	r0, r3
9000a14c:	f000 f96a 	bl	9000a424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
9000a150:	68fb      	ldr	r3, [r7, #12]
9000a152:	681b      	ldr	r3, [r3, #0]
9000a154:	699a      	ldr	r2, [r3, #24]
9000a156:	68fb      	ldr	r3, [r7, #12]
9000a158:	681b      	ldr	r3, [r3, #0]
9000a15a:	f042 0208 	orr.w	r2, r2, #8
9000a15e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
9000a160:	68fb      	ldr	r3, [r7, #12]
9000a162:	681b      	ldr	r3, [r3, #0]
9000a164:	699a      	ldr	r2, [r3, #24]
9000a166:	68fb      	ldr	r3, [r7, #12]
9000a168:	681b      	ldr	r3, [r3, #0]
9000a16a:	f022 0204 	bic.w	r2, r2, #4
9000a16e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
9000a170:	68fb      	ldr	r3, [r7, #12]
9000a172:	681b      	ldr	r3, [r3, #0]
9000a174:	6999      	ldr	r1, [r3, #24]
9000a176:	68bb      	ldr	r3, [r7, #8]
9000a178:	691a      	ldr	r2, [r3, #16]
9000a17a:	68fb      	ldr	r3, [r7, #12]
9000a17c:	681b      	ldr	r3, [r3, #0]
9000a17e:	430a      	orrs	r2, r1
9000a180:	619a      	str	r2, [r3, #24]
      break;
9000a182:	e0a5      	b.n	9000a2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
9000a184:	68fb      	ldr	r3, [r7, #12]
9000a186:	681b      	ldr	r3, [r3, #0]
9000a188:	68b9      	ldr	r1, [r7, #8]
9000a18a:	4618      	mov	r0, r3
9000a18c:	f000 f9da 	bl	9000a544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
9000a190:	68fb      	ldr	r3, [r7, #12]
9000a192:	681b      	ldr	r3, [r3, #0]
9000a194:	699a      	ldr	r2, [r3, #24]
9000a196:	68fb      	ldr	r3, [r7, #12]
9000a198:	681b      	ldr	r3, [r3, #0]
9000a19a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
9000a19e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
9000a1a0:	68fb      	ldr	r3, [r7, #12]
9000a1a2:	681b      	ldr	r3, [r3, #0]
9000a1a4:	699a      	ldr	r2, [r3, #24]
9000a1a6:	68fb      	ldr	r3, [r7, #12]
9000a1a8:	681b      	ldr	r3, [r3, #0]
9000a1aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
9000a1ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
9000a1b0:	68fb      	ldr	r3, [r7, #12]
9000a1b2:	681b      	ldr	r3, [r3, #0]
9000a1b4:	6999      	ldr	r1, [r3, #24]
9000a1b6:	68bb      	ldr	r3, [r7, #8]
9000a1b8:	691b      	ldr	r3, [r3, #16]
9000a1ba:	021a      	lsls	r2, r3, #8
9000a1bc:	68fb      	ldr	r3, [r7, #12]
9000a1be:	681b      	ldr	r3, [r3, #0]
9000a1c0:	430a      	orrs	r2, r1
9000a1c2:	619a      	str	r2, [r3, #24]
      break;
9000a1c4:	e084      	b.n	9000a2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
9000a1c6:	68fb      	ldr	r3, [r7, #12]
9000a1c8:	681b      	ldr	r3, [r3, #0]
9000a1ca:	68b9      	ldr	r1, [r7, #8]
9000a1cc:	4618      	mov	r0, r3
9000a1ce:	f000 fa43 	bl	9000a658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
9000a1d2:	68fb      	ldr	r3, [r7, #12]
9000a1d4:	681b      	ldr	r3, [r3, #0]
9000a1d6:	69da      	ldr	r2, [r3, #28]
9000a1d8:	68fb      	ldr	r3, [r7, #12]
9000a1da:	681b      	ldr	r3, [r3, #0]
9000a1dc:	f042 0208 	orr.w	r2, r2, #8
9000a1e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
9000a1e2:	68fb      	ldr	r3, [r7, #12]
9000a1e4:	681b      	ldr	r3, [r3, #0]
9000a1e6:	69da      	ldr	r2, [r3, #28]
9000a1e8:	68fb      	ldr	r3, [r7, #12]
9000a1ea:	681b      	ldr	r3, [r3, #0]
9000a1ec:	f022 0204 	bic.w	r2, r2, #4
9000a1f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
9000a1f2:	68fb      	ldr	r3, [r7, #12]
9000a1f4:	681b      	ldr	r3, [r3, #0]
9000a1f6:	69d9      	ldr	r1, [r3, #28]
9000a1f8:	68bb      	ldr	r3, [r7, #8]
9000a1fa:	691a      	ldr	r2, [r3, #16]
9000a1fc:	68fb      	ldr	r3, [r7, #12]
9000a1fe:	681b      	ldr	r3, [r3, #0]
9000a200:	430a      	orrs	r2, r1
9000a202:	61da      	str	r2, [r3, #28]
      break;
9000a204:	e064      	b.n	9000a2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
9000a206:	68fb      	ldr	r3, [r7, #12]
9000a208:	681b      	ldr	r3, [r3, #0]
9000a20a:	68b9      	ldr	r1, [r7, #8]
9000a20c:	4618      	mov	r0, r3
9000a20e:	f000 faab 	bl	9000a768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
9000a212:	68fb      	ldr	r3, [r7, #12]
9000a214:	681b      	ldr	r3, [r3, #0]
9000a216:	69da      	ldr	r2, [r3, #28]
9000a218:	68fb      	ldr	r3, [r7, #12]
9000a21a:	681b      	ldr	r3, [r3, #0]
9000a21c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
9000a220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
9000a222:	68fb      	ldr	r3, [r7, #12]
9000a224:	681b      	ldr	r3, [r3, #0]
9000a226:	69da      	ldr	r2, [r3, #28]
9000a228:	68fb      	ldr	r3, [r7, #12]
9000a22a:	681b      	ldr	r3, [r3, #0]
9000a22c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
9000a230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
9000a232:	68fb      	ldr	r3, [r7, #12]
9000a234:	681b      	ldr	r3, [r3, #0]
9000a236:	69d9      	ldr	r1, [r3, #28]
9000a238:	68bb      	ldr	r3, [r7, #8]
9000a23a:	691b      	ldr	r3, [r3, #16]
9000a23c:	021a      	lsls	r2, r3, #8
9000a23e:	68fb      	ldr	r3, [r7, #12]
9000a240:	681b      	ldr	r3, [r3, #0]
9000a242:	430a      	orrs	r2, r1
9000a244:	61da      	str	r2, [r3, #28]
      break;
9000a246:	e043      	b.n	9000a2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
9000a248:	68fb      	ldr	r3, [r7, #12]
9000a24a:	681b      	ldr	r3, [r3, #0]
9000a24c:	68b9      	ldr	r1, [r7, #8]
9000a24e:	4618      	mov	r0, r3
9000a250:	f000 faf4 	bl	9000a83c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
9000a254:	68fb      	ldr	r3, [r7, #12]
9000a256:	681b      	ldr	r3, [r3, #0]
9000a258:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
9000a25a:	68fb      	ldr	r3, [r7, #12]
9000a25c:	681b      	ldr	r3, [r3, #0]
9000a25e:	f042 0208 	orr.w	r2, r2, #8
9000a262:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
9000a264:	68fb      	ldr	r3, [r7, #12]
9000a266:	681b      	ldr	r3, [r3, #0]
9000a268:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
9000a26a:	68fb      	ldr	r3, [r7, #12]
9000a26c:	681b      	ldr	r3, [r3, #0]
9000a26e:	f022 0204 	bic.w	r2, r2, #4
9000a272:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
9000a274:	68fb      	ldr	r3, [r7, #12]
9000a276:	681b      	ldr	r3, [r3, #0]
9000a278:	6d59      	ldr	r1, [r3, #84]	@ 0x54
9000a27a:	68bb      	ldr	r3, [r7, #8]
9000a27c:	691a      	ldr	r2, [r3, #16]
9000a27e:	68fb      	ldr	r3, [r7, #12]
9000a280:	681b      	ldr	r3, [r3, #0]
9000a282:	430a      	orrs	r2, r1
9000a284:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
9000a286:	e023      	b.n	9000a2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
9000a288:	68fb      	ldr	r3, [r7, #12]
9000a28a:	681b      	ldr	r3, [r3, #0]
9000a28c:	68b9      	ldr	r1, [r7, #8]
9000a28e:	4618      	mov	r0, r3
9000a290:	f000 fb38 	bl	9000a904 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
9000a294:	68fb      	ldr	r3, [r7, #12]
9000a296:	681b      	ldr	r3, [r3, #0]
9000a298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
9000a29a:	68fb      	ldr	r3, [r7, #12]
9000a29c:	681b      	ldr	r3, [r3, #0]
9000a29e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
9000a2a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
9000a2a4:	68fb      	ldr	r3, [r7, #12]
9000a2a6:	681b      	ldr	r3, [r3, #0]
9000a2a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
9000a2aa:	68fb      	ldr	r3, [r7, #12]
9000a2ac:	681b      	ldr	r3, [r3, #0]
9000a2ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
9000a2b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
9000a2b4:	68fb      	ldr	r3, [r7, #12]
9000a2b6:	681b      	ldr	r3, [r3, #0]
9000a2b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
9000a2ba:	68bb      	ldr	r3, [r7, #8]
9000a2bc:	691b      	ldr	r3, [r3, #16]
9000a2be:	021a      	lsls	r2, r3, #8
9000a2c0:	68fb      	ldr	r3, [r7, #12]
9000a2c2:	681b      	ldr	r3, [r3, #0]
9000a2c4:	430a      	orrs	r2, r1
9000a2c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
9000a2c8:	e002      	b.n	9000a2d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
9000a2ca:	2301      	movs	r3, #1
9000a2cc:	75fb      	strb	r3, [r7, #23]
      break;
9000a2ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
9000a2d0:	68fb      	ldr	r3, [r7, #12]
9000a2d2:	2200      	movs	r2, #0
9000a2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
9000a2d8:	7dfb      	ldrb	r3, [r7, #23]
}
9000a2da:	4618      	mov	r0, r3
9000a2dc:	3718      	adds	r7, #24
9000a2de:	46bd      	mov	sp, r7
9000a2e0:	bd80      	pop	{r7, pc}
9000a2e2:	bf00      	nop

9000a2e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
9000a2e4:	b480      	push	{r7}
9000a2e6:	b085      	sub	sp, #20
9000a2e8:	af00      	add	r7, sp, #0
9000a2ea:	6078      	str	r0, [r7, #4]
9000a2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
9000a2ee:	687b      	ldr	r3, [r7, #4]
9000a2f0:	681b      	ldr	r3, [r3, #0]
9000a2f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000a2f4:	687b      	ldr	r3, [r7, #4]
9000a2f6:	4a43      	ldr	r2, [pc, #268]	@ (9000a404 <TIM_Base_SetConfig+0x120>)
9000a2f8:	4293      	cmp	r3, r2
9000a2fa:	d013      	beq.n	9000a324 <TIM_Base_SetConfig+0x40>
9000a2fc:	687b      	ldr	r3, [r7, #4]
9000a2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000a302:	d00f      	beq.n	9000a324 <TIM_Base_SetConfig+0x40>
9000a304:	687b      	ldr	r3, [r7, #4]
9000a306:	4a40      	ldr	r2, [pc, #256]	@ (9000a408 <TIM_Base_SetConfig+0x124>)
9000a308:	4293      	cmp	r3, r2
9000a30a:	d00b      	beq.n	9000a324 <TIM_Base_SetConfig+0x40>
9000a30c:	687b      	ldr	r3, [r7, #4]
9000a30e:	4a3f      	ldr	r2, [pc, #252]	@ (9000a40c <TIM_Base_SetConfig+0x128>)
9000a310:	4293      	cmp	r3, r2
9000a312:	d007      	beq.n	9000a324 <TIM_Base_SetConfig+0x40>
9000a314:	687b      	ldr	r3, [r7, #4]
9000a316:	4a3e      	ldr	r2, [pc, #248]	@ (9000a410 <TIM_Base_SetConfig+0x12c>)
9000a318:	4293      	cmp	r3, r2
9000a31a:	d003      	beq.n	9000a324 <TIM_Base_SetConfig+0x40>
9000a31c:	687b      	ldr	r3, [r7, #4]
9000a31e:	4a3d      	ldr	r2, [pc, #244]	@ (9000a414 <TIM_Base_SetConfig+0x130>)
9000a320:	4293      	cmp	r3, r2
9000a322:	d108      	bne.n	9000a336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000a324:	68fb      	ldr	r3, [r7, #12]
9000a326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
9000a32a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
9000a32c:	683b      	ldr	r3, [r7, #0]
9000a32e:	685b      	ldr	r3, [r3, #4]
9000a330:	68fa      	ldr	r2, [r7, #12]
9000a332:	4313      	orrs	r3, r2
9000a334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000a336:	687b      	ldr	r3, [r7, #4]
9000a338:	4a32      	ldr	r2, [pc, #200]	@ (9000a404 <TIM_Base_SetConfig+0x120>)
9000a33a:	4293      	cmp	r3, r2
9000a33c:	d01f      	beq.n	9000a37e <TIM_Base_SetConfig+0x9a>
9000a33e:	687b      	ldr	r3, [r7, #4]
9000a340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000a344:	d01b      	beq.n	9000a37e <TIM_Base_SetConfig+0x9a>
9000a346:	687b      	ldr	r3, [r7, #4]
9000a348:	4a2f      	ldr	r2, [pc, #188]	@ (9000a408 <TIM_Base_SetConfig+0x124>)
9000a34a:	4293      	cmp	r3, r2
9000a34c:	d017      	beq.n	9000a37e <TIM_Base_SetConfig+0x9a>
9000a34e:	687b      	ldr	r3, [r7, #4]
9000a350:	4a2e      	ldr	r2, [pc, #184]	@ (9000a40c <TIM_Base_SetConfig+0x128>)
9000a352:	4293      	cmp	r3, r2
9000a354:	d013      	beq.n	9000a37e <TIM_Base_SetConfig+0x9a>
9000a356:	687b      	ldr	r3, [r7, #4]
9000a358:	4a2d      	ldr	r2, [pc, #180]	@ (9000a410 <TIM_Base_SetConfig+0x12c>)
9000a35a:	4293      	cmp	r3, r2
9000a35c:	d00f      	beq.n	9000a37e <TIM_Base_SetConfig+0x9a>
9000a35e:	687b      	ldr	r3, [r7, #4]
9000a360:	4a2c      	ldr	r2, [pc, #176]	@ (9000a414 <TIM_Base_SetConfig+0x130>)
9000a362:	4293      	cmp	r3, r2
9000a364:	d00b      	beq.n	9000a37e <TIM_Base_SetConfig+0x9a>
9000a366:	687b      	ldr	r3, [r7, #4]
9000a368:	4a2b      	ldr	r2, [pc, #172]	@ (9000a418 <TIM_Base_SetConfig+0x134>)
9000a36a:	4293      	cmp	r3, r2
9000a36c:	d007      	beq.n	9000a37e <TIM_Base_SetConfig+0x9a>
9000a36e:	687b      	ldr	r3, [r7, #4]
9000a370:	4a2a      	ldr	r2, [pc, #168]	@ (9000a41c <TIM_Base_SetConfig+0x138>)
9000a372:	4293      	cmp	r3, r2
9000a374:	d003      	beq.n	9000a37e <TIM_Base_SetConfig+0x9a>
9000a376:	687b      	ldr	r3, [r7, #4]
9000a378:	4a29      	ldr	r2, [pc, #164]	@ (9000a420 <TIM_Base_SetConfig+0x13c>)
9000a37a:	4293      	cmp	r3, r2
9000a37c:	d108      	bne.n	9000a390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
9000a37e:	68fb      	ldr	r3, [r7, #12]
9000a380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000a384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000a386:	683b      	ldr	r3, [r7, #0]
9000a388:	68db      	ldr	r3, [r3, #12]
9000a38a:	68fa      	ldr	r2, [r7, #12]
9000a38c:	4313      	orrs	r3, r2
9000a38e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000a390:	68fb      	ldr	r3, [r7, #12]
9000a392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
9000a396:	683b      	ldr	r3, [r7, #0]
9000a398:	695b      	ldr	r3, [r3, #20]
9000a39a:	4313      	orrs	r3, r2
9000a39c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000a39e:	683b      	ldr	r3, [r7, #0]
9000a3a0:	689a      	ldr	r2, [r3, #8]
9000a3a2:	687b      	ldr	r3, [r7, #4]
9000a3a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000a3a6:	683b      	ldr	r3, [r7, #0]
9000a3a8:	681a      	ldr	r2, [r3, #0]
9000a3aa:	687b      	ldr	r3, [r7, #4]
9000a3ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000a3ae:	687b      	ldr	r3, [r7, #4]
9000a3b0:	4a14      	ldr	r2, [pc, #80]	@ (9000a404 <TIM_Base_SetConfig+0x120>)
9000a3b2:	4293      	cmp	r3, r2
9000a3b4:	d00f      	beq.n	9000a3d6 <TIM_Base_SetConfig+0xf2>
9000a3b6:	687b      	ldr	r3, [r7, #4]
9000a3b8:	4a16      	ldr	r2, [pc, #88]	@ (9000a414 <TIM_Base_SetConfig+0x130>)
9000a3ba:	4293      	cmp	r3, r2
9000a3bc:	d00b      	beq.n	9000a3d6 <TIM_Base_SetConfig+0xf2>
9000a3be:	687b      	ldr	r3, [r7, #4]
9000a3c0:	4a15      	ldr	r2, [pc, #84]	@ (9000a418 <TIM_Base_SetConfig+0x134>)
9000a3c2:	4293      	cmp	r3, r2
9000a3c4:	d007      	beq.n	9000a3d6 <TIM_Base_SetConfig+0xf2>
9000a3c6:	687b      	ldr	r3, [r7, #4]
9000a3c8:	4a14      	ldr	r2, [pc, #80]	@ (9000a41c <TIM_Base_SetConfig+0x138>)
9000a3ca:	4293      	cmp	r3, r2
9000a3cc:	d003      	beq.n	9000a3d6 <TIM_Base_SetConfig+0xf2>
9000a3ce:	687b      	ldr	r3, [r7, #4]
9000a3d0:	4a13      	ldr	r2, [pc, #76]	@ (9000a420 <TIM_Base_SetConfig+0x13c>)
9000a3d2:	4293      	cmp	r3, r2
9000a3d4:	d103      	bne.n	9000a3de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000a3d6:	683b      	ldr	r3, [r7, #0]
9000a3d8:	691a      	ldr	r2, [r3, #16]
9000a3da:	687b      	ldr	r3, [r7, #4]
9000a3dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
9000a3de:	687b      	ldr	r3, [r7, #4]
9000a3e0:	681b      	ldr	r3, [r3, #0]
9000a3e2:	f043 0204 	orr.w	r2, r3, #4
9000a3e6:	687b      	ldr	r3, [r7, #4]
9000a3e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000a3ea:	687b      	ldr	r3, [r7, #4]
9000a3ec:	2201      	movs	r2, #1
9000a3ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
9000a3f0:	687b      	ldr	r3, [r7, #4]
9000a3f2:	68fa      	ldr	r2, [r7, #12]
9000a3f4:	601a      	str	r2, [r3, #0]
}
9000a3f6:	bf00      	nop
9000a3f8:	3714      	adds	r7, #20
9000a3fa:	46bd      	mov	sp, r7
9000a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a400:	4770      	bx	lr
9000a402:	bf00      	nop
9000a404:	40010000 	.word	0x40010000
9000a408:	40000400 	.word	0x40000400
9000a40c:	40000800 	.word	0x40000800
9000a410:	40000c00 	.word	0x40000c00
9000a414:	40010400 	.word	0x40010400
9000a418:	40014000 	.word	0x40014000
9000a41c:	40014400 	.word	0x40014400
9000a420:	40014800 	.word	0x40014800

9000a424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
9000a424:	b480      	push	{r7}
9000a426:	b087      	sub	sp, #28
9000a428:	af00      	add	r7, sp, #0
9000a42a:	6078      	str	r0, [r7, #4]
9000a42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
9000a42e:	687b      	ldr	r3, [r7, #4]
9000a430:	6a1b      	ldr	r3, [r3, #32]
9000a432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
9000a434:	687b      	ldr	r3, [r7, #4]
9000a436:	6a1b      	ldr	r3, [r3, #32]
9000a438:	f023 0201 	bic.w	r2, r3, #1
9000a43c:	687b      	ldr	r3, [r7, #4]
9000a43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
9000a440:	687b      	ldr	r3, [r7, #4]
9000a442:	685b      	ldr	r3, [r3, #4]
9000a444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
9000a446:	687b      	ldr	r3, [r7, #4]
9000a448:	699b      	ldr	r3, [r3, #24]
9000a44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
9000a44c:	68fa      	ldr	r2, [r7, #12]
9000a44e:	4b37      	ldr	r3, [pc, #220]	@ (9000a52c <TIM_OC1_SetConfig+0x108>)
9000a450:	4013      	ands	r3, r2
9000a452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
9000a454:	68fb      	ldr	r3, [r7, #12]
9000a456:	f023 0303 	bic.w	r3, r3, #3
9000a45a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
9000a45c:	683b      	ldr	r3, [r7, #0]
9000a45e:	681b      	ldr	r3, [r3, #0]
9000a460:	68fa      	ldr	r2, [r7, #12]
9000a462:	4313      	orrs	r3, r2
9000a464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
9000a466:	697b      	ldr	r3, [r7, #20]
9000a468:	f023 0302 	bic.w	r3, r3, #2
9000a46c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
9000a46e:	683b      	ldr	r3, [r7, #0]
9000a470:	689b      	ldr	r3, [r3, #8]
9000a472:	697a      	ldr	r2, [r7, #20]
9000a474:	4313      	orrs	r3, r2
9000a476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
9000a478:	687b      	ldr	r3, [r7, #4]
9000a47a:	4a2d      	ldr	r2, [pc, #180]	@ (9000a530 <TIM_OC1_SetConfig+0x10c>)
9000a47c:	4293      	cmp	r3, r2
9000a47e:	d00f      	beq.n	9000a4a0 <TIM_OC1_SetConfig+0x7c>
9000a480:	687b      	ldr	r3, [r7, #4]
9000a482:	4a2c      	ldr	r2, [pc, #176]	@ (9000a534 <TIM_OC1_SetConfig+0x110>)
9000a484:	4293      	cmp	r3, r2
9000a486:	d00b      	beq.n	9000a4a0 <TIM_OC1_SetConfig+0x7c>
9000a488:	687b      	ldr	r3, [r7, #4]
9000a48a:	4a2b      	ldr	r2, [pc, #172]	@ (9000a538 <TIM_OC1_SetConfig+0x114>)
9000a48c:	4293      	cmp	r3, r2
9000a48e:	d007      	beq.n	9000a4a0 <TIM_OC1_SetConfig+0x7c>
9000a490:	687b      	ldr	r3, [r7, #4]
9000a492:	4a2a      	ldr	r2, [pc, #168]	@ (9000a53c <TIM_OC1_SetConfig+0x118>)
9000a494:	4293      	cmp	r3, r2
9000a496:	d003      	beq.n	9000a4a0 <TIM_OC1_SetConfig+0x7c>
9000a498:	687b      	ldr	r3, [r7, #4]
9000a49a:	4a29      	ldr	r2, [pc, #164]	@ (9000a540 <TIM_OC1_SetConfig+0x11c>)
9000a49c:	4293      	cmp	r3, r2
9000a49e:	d10c      	bne.n	9000a4ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
9000a4a0:	697b      	ldr	r3, [r7, #20]
9000a4a2:	f023 0308 	bic.w	r3, r3, #8
9000a4a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
9000a4a8:	683b      	ldr	r3, [r7, #0]
9000a4aa:	68db      	ldr	r3, [r3, #12]
9000a4ac:	697a      	ldr	r2, [r7, #20]
9000a4ae:	4313      	orrs	r3, r2
9000a4b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
9000a4b2:	697b      	ldr	r3, [r7, #20]
9000a4b4:	f023 0304 	bic.w	r3, r3, #4
9000a4b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000a4ba:	687b      	ldr	r3, [r7, #4]
9000a4bc:	4a1c      	ldr	r2, [pc, #112]	@ (9000a530 <TIM_OC1_SetConfig+0x10c>)
9000a4be:	4293      	cmp	r3, r2
9000a4c0:	d00f      	beq.n	9000a4e2 <TIM_OC1_SetConfig+0xbe>
9000a4c2:	687b      	ldr	r3, [r7, #4]
9000a4c4:	4a1b      	ldr	r2, [pc, #108]	@ (9000a534 <TIM_OC1_SetConfig+0x110>)
9000a4c6:	4293      	cmp	r3, r2
9000a4c8:	d00b      	beq.n	9000a4e2 <TIM_OC1_SetConfig+0xbe>
9000a4ca:	687b      	ldr	r3, [r7, #4]
9000a4cc:	4a1a      	ldr	r2, [pc, #104]	@ (9000a538 <TIM_OC1_SetConfig+0x114>)
9000a4ce:	4293      	cmp	r3, r2
9000a4d0:	d007      	beq.n	9000a4e2 <TIM_OC1_SetConfig+0xbe>
9000a4d2:	687b      	ldr	r3, [r7, #4]
9000a4d4:	4a19      	ldr	r2, [pc, #100]	@ (9000a53c <TIM_OC1_SetConfig+0x118>)
9000a4d6:	4293      	cmp	r3, r2
9000a4d8:	d003      	beq.n	9000a4e2 <TIM_OC1_SetConfig+0xbe>
9000a4da:	687b      	ldr	r3, [r7, #4]
9000a4dc:	4a18      	ldr	r2, [pc, #96]	@ (9000a540 <TIM_OC1_SetConfig+0x11c>)
9000a4de:	4293      	cmp	r3, r2
9000a4e0:	d111      	bne.n	9000a506 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
9000a4e2:	693b      	ldr	r3, [r7, #16]
9000a4e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
9000a4e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
9000a4ea:	693b      	ldr	r3, [r7, #16]
9000a4ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
9000a4f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
9000a4f2:	683b      	ldr	r3, [r7, #0]
9000a4f4:	695b      	ldr	r3, [r3, #20]
9000a4f6:	693a      	ldr	r2, [r7, #16]
9000a4f8:	4313      	orrs	r3, r2
9000a4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
9000a4fc:	683b      	ldr	r3, [r7, #0]
9000a4fe:	699b      	ldr	r3, [r3, #24]
9000a500:	693a      	ldr	r2, [r7, #16]
9000a502:	4313      	orrs	r3, r2
9000a504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
9000a506:	687b      	ldr	r3, [r7, #4]
9000a508:	693a      	ldr	r2, [r7, #16]
9000a50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
9000a50c:	687b      	ldr	r3, [r7, #4]
9000a50e:	68fa      	ldr	r2, [r7, #12]
9000a510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
9000a512:	683b      	ldr	r3, [r7, #0]
9000a514:	685a      	ldr	r2, [r3, #4]
9000a516:	687b      	ldr	r3, [r7, #4]
9000a518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
9000a51a:	687b      	ldr	r3, [r7, #4]
9000a51c:	697a      	ldr	r2, [r7, #20]
9000a51e:	621a      	str	r2, [r3, #32]
}
9000a520:	bf00      	nop
9000a522:	371c      	adds	r7, #28
9000a524:	46bd      	mov	sp, r7
9000a526:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a52a:	4770      	bx	lr
9000a52c:	fffeff8f 	.word	0xfffeff8f
9000a530:	40010000 	.word	0x40010000
9000a534:	40010400 	.word	0x40010400
9000a538:	40014000 	.word	0x40014000
9000a53c:	40014400 	.word	0x40014400
9000a540:	40014800 	.word	0x40014800

9000a544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
9000a544:	b480      	push	{r7}
9000a546:	b087      	sub	sp, #28
9000a548:	af00      	add	r7, sp, #0
9000a54a:	6078      	str	r0, [r7, #4]
9000a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
9000a54e:	687b      	ldr	r3, [r7, #4]
9000a550:	6a1b      	ldr	r3, [r3, #32]
9000a552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
9000a554:	687b      	ldr	r3, [r7, #4]
9000a556:	6a1b      	ldr	r3, [r3, #32]
9000a558:	f023 0210 	bic.w	r2, r3, #16
9000a55c:	687b      	ldr	r3, [r7, #4]
9000a55e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
9000a560:	687b      	ldr	r3, [r7, #4]
9000a562:	685b      	ldr	r3, [r3, #4]
9000a564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
9000a566:	687b      	ldr	r3, [r7, #4]
9000a568:	699b      	ldr	r3, [r3, #24]
9000a56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
9000a56c:	68fa      	ldr	r2, [r7, #12]
9000a56e:	4b34      	ldr	r3, [pc, #208]	@ (9000a640 <TIM_OC2_SetConfig+0xfc>)
9000a570:	4013      	ands	r3, r2
9000a572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
9000a574:	68fb      	ldr	r3, [r7, #12]
9000a576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000a57a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
9000a57c:	683b      	ldr	r3, [r7, #0]
9000a57e:	681b      	ldr	r3, [r3, #0]
9000a580:	021b      	lsls	r3, r3, #8
9000a582:	68fa      	ldr	r2, [r7, #12]
9000a584:	4313      	orrs	r3, r2
9000a586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
9000a588:	697b      	ldr	r3, [r7, #20]
9000a58a:	f023 0320 	bic.w	r3, r3, #32
9000a58e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
9000a590:	683b      	ldr	r3, [r7, #0]
9000a592:	689b      	ldr	r3, [r3, #8]
9000a594:	011b      	lsls	r3, r3, #4
9000a596:	697a      	ldr	r2, [r7, #20]
9000a598:	4313      	orrs	r3, r2
9000a59a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
9000a59c:	687b      	ldr	r3, [r7, #4]
9000a59e:	4a29      	ldr	r2, [pc, #164]	@ (9000a644 <TIM_OC2_SetConfig+0x100>)
9000a5a0:	4293      	cmp	r3, r2
9000a5a2:	d003      	beq.n	9000a5ac <TIM_OC2_SetConfig+0x68>
9000a5a4:	687b      	ldr	r3, [r7, #4]
9000a5a6:	4a28      	ldr	r2, [pc, #160]	@ (9000a648 <TIM_OC2_SetConfig+0x104>)
9000a5a8:	4293      	cmp	r3, r2
9000a5aa:	d10d      	bne.n	9000a5c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
9000a5ac:	697b      	ldr	r3, [r7, #20]
9000a5ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000a5b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
9000a5b4:	683b      	ldr	r3, [r7, #0]
9000a5b6:	68db      	ldr	r3, [r3, #12]
9000a5b8:	011b      	lsls	r3, r3, #4
9000a5ba:	697a      	ldr	r2, [r7, #20]
9000a5bc:	4313      	orrs	r3, r2
9000a5be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
9000a5c0:	697b      	ldr	r3, [r7, #20]
9000a5c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
9000a5c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000a5c8:	687b      	ldr	r3, [r7, #4]
9000a5ca:	4a1e      	ldr	r2, [pc, #120]	@ (9000a644 <TIM_OC2_SetConfig+0x100>)
9000a5cc:	4293      	cmp	r3, r2
9000a5ce:	d00f      	beq.n	9000a5f0 <TIM_OC2_SetConfig+0xac>
9000a5d0:	687b      	ldr	r3, [r7, #4]
9000a5d2:	4a1d      	ldr	r2, [pc, #116]	@ (9000a648 <TIM_OC2_SetConfig+0x104>)
9000a5d4:	4293      	cmp	r3, r2
9000a5d6:	d00b      	beq.n	9000a5f0 <TIM_OC2_SetConfig+0xac>
9000a5d8:	687b      	ldr	r3, [r7, #4]
9000a5da:	4a1c      	ldr	r2, [pc, #112]	@ (9000a64c <TIM_OC2_SetConfig+0x108>)
9000a5dc:	4293      	cmp	r3, r2
9000a5de:	d007      	beq.n	9000a5f0 <TIM_OC2_SetConfig+0xac>
9000a5e0:	687b      	ldr	r3, [r7, #4]
9000a5e2:	4a1b      	ldr	r2, [pc, #108]	@ (9000a650 <TIM_OC2_SetConfig+0x10c>)
9000a5e4:	4293      	cmp	r3, r2
9000a5e6:	d003      	beq.n	9000a5f0 <TIM_OC2_SetConfig+0xac>
9000a5e8:	687b      	ldr	r3, [r7, #4]
9000a5ea:	4a1a      	ldr	r2, [pc, #104]	@ (9000a654 <TIM_OC2_SetConfig+0x110>)
9000a5ec:	4293      	cmp	r3, r2
9000a5ee:	d113      	bne.n	9000a618 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
9000a5f0:	693b      	ldr	r3, [r7, #16]
9000a5f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
9000a5f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
9000a5f8:	693b      	ldr	r3, [r7, #16]
9000a5fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
9000a5fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
9000a600:	683b      	ldr	r3, [r7, #0]
9000a602:	695b      	ldr	r3, [r3, #20]
9000a604:	009b      	lsls	r3, r3, #2
9000a606:	693a      	ldr	r2, [r7, #16]
9000a608:	4313      	orrs	r3, r2
9000a60a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
9000a60c:	683b      	ldr	r3, [r7, #0]
9000a60e:	699b      	ldr	r3, [r3, #24]
9000a610:	009b      	lsls	r3, r3, #2
9000a612:	693a      	ldr	r2, [r7, #16]
9000a614:	4313      	orrs	r3, r2
9000a616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
9000a618:	687b      	ldr	r3, [r7, #4]
9000a61a:	693a      	ldr	r2, [r7, #16]
9000a61c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
9000a61e:	687b      	ldr	r3, [r7, #4]
9000a620:	68fa      	ldr	r2, [r7, #12]
9000a622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
9000a624:	683b      	ldr	r3, [r7, #0]
9000a626:	685a      	ldr	r2, [r3, #4]
9000a628:	687b      	ldr	r3, [r7, #4]
9000a62a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
9000a62c:	687b      	ldr	r3, [r7, #4]
9000a62e:	697a      	ldr	r2, [r7, #20]
9000a630:	621a      	str	r2, [r3, #32]
}
9000a632:	bf00      	nop
9000a634:	371c      	adds	r7, #28
9000a636:	46bd      	mov	sp, r7
9000a638:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a63c:	4770      	bx	lr
9000a63e:	bf00      	nop
9000a640:	feff8fff 	.word	0xfeff8fff
9000a644:	40010000 	.word	0x40010000
9000a648:	40010400 	.word	0x40010400
9000a64c:	40014000 	.word	0x40014000
9000a650:	40014400 	.word	0x40014400
9000a654:	40014800 	.word	0x40014800

9000a658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
9000a658:	b480      	push	{r7}
9000a65a:	b087      	sub	sp, #28
9000a65c:	af00      	add	r7, sp, #0
9000a65e:	6078      	str	r0, [r7, #4]
9000a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
9000a662:	687b      	ldr	r3, [r7, #4]
9000a664:	6a1b      	ldr	r3, [r3, #32]
9000a666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
9000a668:	687b      	ldr	r3, [r7, #4]
9000a66a:	6a1b      	ldr	r3, [r3, #32]
9000a66c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
9000a670:	687b      	ldr	r3, [r7, #4]
9000a672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
9000a674:	687b      	ldr	r3, [r7, #4]
9000a676:	685b      	ldr	r3, [r3, #4]
9000a678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
9000a67a:	687b      	ldr	r3, [r7, #4]
9000a67c:	69db      	ldr	r3, [r3, #28]
9000a67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
9000a680:	68fa      	ldr	r2, [r7, #12]
9000a682:	4b33      	ldr	r3, [pc, #204]	@ (9000a750 <TIM_OC3_SetConfig+0xf8>)
9000a684:	4013      	ands	r3, r2
9000a686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
9000a688:	68fb      	ldr	r3, [r7, #12]
9000a68a:	f023 0303 	bic.w	r3, r3, #3
9000a68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
9000a690:	683b      	ldr	r3, [r7, #0]
9000a692:	681b      	ldr	r3, [r3, #0]
9000a694:	68fa      	ldr	r2, [r7, #12]
9000a696:	4313      	orrs	r3, r2
9000a698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
9000a69a:	697b      	ldr	r3, [r7, #20]
9000a69c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
9000a6a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
9000a6a2:	683b      	ldr	r3, [r7, #0]
9000a6a4:	689b      	ldr	r3, [r3, #8]
9000a6a6:	021b      	lsls	r3, r3, #8
9000a6a8:	697a      	ldr	r2, [r7, #20]
9000a6aa:	4313      	orrs	r3, r2
9000a6ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
9000a6ae:	687b      	ldr	r3, [r7, #4]
9000a6b0:	4a28      	ldr	r2, [pc, #160]	@ (9000a754 <TIM_OC3_SetConfig+0xfc>)
9000a6b2:	4293      	cmp	r3, r2
9000a6b4:	d003      	beq.n	9000a6be <TIM_OC3_SetConfig+0x66>
9000a6b6:	687b      	ldr	r3, [r7, #4]
9000a6b8:	4a27      	ldr	r2, [pc, #156]	@ (9000a758 <TIM_OC3_SetConfig+0x100>)
9000a6ba:	4293      	cmp	r3, r2
9000a6bc:	d10d      	bne.n	9000a6da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
9000a6be:	697b      	ldr	r3, [r7, #20]
9000a6c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
9000a6c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
9000a6c6:	683b      	ldr	r3, [r7, #0]
9000a6c8:	68db      	ldr	r3, [r3, #12]
9000a6ca:	021b      	lsls	r3, r3, #8
9000a6cc:	697a      	ldr	r2, [r7, #20]
9000a6ce:	4313      	orrs	r3, r2
9000a6d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
9000a6d2:	697b      	ldr	r3, [r7, #20]
9000a6d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
9000a6d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000a6da:	687b      	ldr	r3, [r7, #4]
9000a6dc:	4a1d      	ldr	r2, [pc, #116]	@ (9000a754 <TIM_OC3_SetConfig+0xfc>)
9000a6de:	4293      	cmp	r3, r2
9000a6e0:	d00f      	beq.n	9000a702 <TIM_OC3_SetConfig+0xaa>
9000a6e2:	687b      	ldr	r3, [r7, #4]
9000a6e4:	4a1c      	ldr	r2, [pc, #112]	@ (9000a758 <TIM_OC3_SetConfig+0x100>)
9000a6e6:	4293      	cmp	r3, r2
9000a6e8:	d00b      	beq.n	9000a702 <TIM_OC3_SetConfig+0xaa>
9000a6ea:	687b      	ldr	r3, [r7, #4]
9000a6ec:	4a1b      	ldr	r2, [pc, #108]	@ (9000a75c <TIM_OC3_SetConfig+0x104>)
9000a6ee:	4293      	cmp	r3, r2
9000a6f0:	d007      	beq.n	9000a702 <TIM_OC3_SetConfig+0xaa>
9000a6f2:	687b      	ldr	r3, [r7, #4]
9000a6f4:	4a1a      	ldr	r2, [pc, #104]	@ (9000a760 <TIM_OC3_SetConfig+0x108>)
9000a6f6:	4293      	cmp	r3, r2
9000a6f8:	d003      	beq.n	9000a702 <TIM_OC3_SetConfig+0xaa>
9000a6fa:	687b      	ldr	r3, [r7, #4]
9000a6fc:	4a19      	ldr	r2, [pc, #100]	@ (9000a764 <TIM_OC3_SetConfig+0x10c>)
9000a6fe:	4293      	cmp	r3, r2
9000a700:	d113      	bne.n	9000a72a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
9000a702:	693b      	ldr	r3, [r7, #16]
9000a704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000a708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
9000a70a:	693b      	ldr	r3, [r7, #16]
9000a70c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
9000a710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
9000a712:	683b      	ldr	r3, [r7, #0]
9000a714:	695b      	ldr	r3, [r3, #20]
9000a716:	011b      	lsls	r3, r3, #4
9000a718:	693a      	ldr	r2, [r7, #16]
9000a71a:	4313      	orrs	r3, r2
9000a71c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
9000a71e:	683b      	ldr	r3, [r7, #0]
9000a720:	699b      	ldr	r3, [r3, #24]
9000a722:	011b      	lsls	r3, r3, #4
9000a724:	693a      	ldr	r2, [r7, #16]
9000a726:	4313      	orrs	r3, r2
9000a728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
9000a72a:	687b      	ldr	r3, [r7, #4]
9000a72c:	693a      	ldr	r2, [r7, #16]
9000a72e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
9000a730:	687b      	ldr	r3, [r7, #4]
9000a732:	68fa      	ldr	r2, [r7, #12]
9000a734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
9000a736:	683b      	ldr	r3, [r7, #0]
9000a738:	685a      	ldr	r2, [r3, #4]
9000a73a:	687b      	ldr	r3, [r7, #4]
9000a73c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
9000a73e:	687b      	ldr	r3, [r7, #4]
9000a740:	697a      	ldr	r2, [r7, #20]
9000a742:	621a      	str	r2, [r3, #32]
}
9000a744:	bf00      	nop
9000a746:	371c      	adds	r7, #28
9000a748:	46bd      	mov	sp, r7
9000a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a74e:	4770      	bx	lr
9000a750:	fffeff8f 	.word	0xfffeff8f
9000a754:	40010000 	.word	0x40010000
9000a758:	40010400 	.word	0x40010400
9000a75c:	40014000 	.word	0x40014000
9000a760:	40014400 	.word	0x40014400
9000a764:	40014800 	.word	0x40014800

9000a768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
9000a768:	b480      	push	{r7}
9000a76a:	b087      	sub	sp, #28
9000a76c:	af00      	add	r7, sp, #0
9000a76e:	6078      	str	r0, [r7, #4]
9000a770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
9000a772:	687b      	ldr	r3, [r7, #4]
9000a774:	6a1b      	ldr	r3, [r3, #32]
9000a776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
9000a778:	687b      	ldr	r3, [r7, #4]
9000a77a:	6a1b      	ldr	r3, [r3, #32]
9000a77c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
9000a780:	687b      	ldr	r3, [r7, #4]
9000a782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
9000a784:	687b      	ldr	r3, [r7, #4]
9000a786:	685b      	ldr	r3, [r3, #4]
9000a788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
9000a78a:	687b      	ldr	r3, [r7, #4]
9000a78c:	69db      	ldr	r3, [r3, #28]
9000a78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
9000a790:	68fa      	ldr	r2, [r7, #12]
9000a792:	4b24      	ldr	r3, [pc, #144]	@ (9000a824 <TIM_OC4_SetConfig+0xbc>)
9000a794:	4013      	ands	r3, r2
9000a796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
9000a798:	68fb      	ldr	r3, [r7, #12]
9000a79a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000a79e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
9000a7a0:	683b      	ldr	r3, [r7, #0]
9000a7a2:	681b      	ldr	r3, [r3, #0]
9000a7a4:	021b      	lsls	r3, r3, #8
9000a7a6:	68fa      	ldr	r2, [r7, #12]
9000a7a8:	4313      	orrs	r3, r2
9000a7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
9000a7ac:	693b      	ldr	r3, [r7, #16]
9000a7ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
9000a7b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
9000a7b4:	683b      	ldr	r3, [r7, #0]
9000a7b6:	689b      	ldr	r3, [r3, #8]
9000a7b8:	031b      	lsls	r3, r3, #12
9000a7ba:	693a      	ldr	r2, [r7, #16]
9000a7bc:	4313      	orrs	r3, r2
9000a7be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000a7c0:	687b      	ldr	r3, [r7, #4]
9000a7c2:	4a19      	ldr	r2, [pc, #100]	@ (9000a828 <TIM_OC4_SetConfig+0xc0>)
9000a7c4:	4293      	cmp	r3, r2
9000a7c6:	d00f      	beq.n	9000a7e8 <TIM_OC4_SetConfig+0x80>
9000a7c8:	687b      	ldr	r3, [r7, #4]
9000a7ca:	4a18      	ldr	r2, [pc, #96]	@ (9000a82c <TIM_OC4_SetConfig+0xc4>)
9000a7cc:	4293      	cmp	r3, r2
9000a7ce:	d00b      	beq.n	9000a7e8 <TIM_OC4_SetConfig+0x80>
9000a7d0:	687b      	ldr	r3, [r7, #4]
9000a7d2:	4a17      	ldr	r2, [pc, #92]	@ (9000a830 <TIM_OC4_SetConfig+0xc8>)
9000a7d4:	4293      	cmp	r3, r2
9000a7d6:	d007      	beq.n	9000a7e8 <TIM_OC4_SetConfig+0x80>
9000a7d8:	687b      	ldr	r3, [r7, #4]
9000a7da:	4a16      	ldr	r2, [pc, #88]	@ (9000a834 <TIM_OC4_SetConfig+0xcc>)
9000a7dc:	4293      	cmp	r3, r2
9000a7de:	d003      	beq.n	9000a7e8 <TIM_OC4_SetConfig+0x80>
9000a7e0:	687b      	ldr	r3, [r7, #4]
9000a7e2:	4a15      	ldr	r2, [pc, #84]	@ (9000a838 <TIM_OC4_SetConfig+0xd0>)
9000a7e4:	4293      	cmp	r3, r2
9000a7e6:	d109      	bne.n	9000a7fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
9000a7e8:	697b      	ldr	r3, [r7, #20]
9000a7ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
9000a7ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
9000a7f0:	683b      	ldr	r3, [r7, #0]
9000a7f2:	695b      	ldr	r3, [r3, #20]
9000a7f4:	019b      	lsls	r3, r3, #6
9000a7f6:	697a      	ldr	r2, [r7, #20]
9000a7f8:	4313      	orrs	r3, r2
9000a7fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
9000a7fc:	687b      	ldr	r3, [r7, #4]
9000a7fe:	697a      	ldr	r2, [r7, #20]
9000a800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
9000a802:	687b      	ldr	r3, [r7, #4]
9000a804:	68fa      	ldr	r2, [r7, #12]
9000a806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
9000a808:	683b      	ldr	r3, [r7, #0]
9000a80a:	685a      	ldr	r2, [r3, #4]
9000a80c:	687b      	ldr	r3, [r7, #4]
9000a80e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
9000a810:	687b      	ldr	r3, [r7, #4]
9000a812:	693a      	ldr	r2, [r7, #16]
9000a814:	621a      	str	r2, [r3, #32]
}
9000a816:	bf00      	nop
9000a818:	371c      	adds	r7, #28
9000a81a:	46bd      	mov	sp, r7
9000a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a820:	4770      	bx	lr
9000a822:	bf00      	nop
9000a824:	feff8fff 	.word	0xfeff8fff
9000a828:	40010000 	.word	0x40010000
9000a82c:	40010400 	.word	0x40010400
9000a830:	40014000 	.word	0x40014000
9000a834:	40014400 	.word	0x40014400
9000a838:	40014800 	.word	0x40014800

9000a83c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
9000a83c:	b480      	push	{r7}
9000a83e:	b087      	sub	sp, #28
9000a840:	af00      	add	r7, sp, #0
9000a842:	6078      	str	r0, [r7, #4]
9000a844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
9000a846:	687b      	ldr	r3, [r7, #4]
9000a848:	6a1b      	ldr	r3, [r3, #32]
9000a84a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
9000a84c:	687b      	ldr	r3, [r7, #4]
9000a84e:	6a1b      	ldr	r3, [r3, #32]
9000a850:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
9000a854:	687b      	ldr	r3, [r7, #4]
9000a856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
9000a858:	687b      	ldr	r3, [r7, #4]
9000a85a:	685b      	ldr	r3, [r3, #4]
9000a85c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
9000a85e:	687b      	ldr	r3, [r7, #4]
9000a860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
9000a864:	68fa      	ldr	r2, [r7, #12]
9000a866:	4b21      	ldr	r3, [pc, #132]	@ (9000a8ec <TIM_OC5_SetConfig+0xb0>)
9000a868:	4013      	ands	r3, r2
9000a86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
9000a86c:	683b      	ldr	r3, [r7, #0]
9000a86e:	681b      	ldr	r3, [r3, #0]
9000a870:	68fa      	ldr	r2, [r7, #12]
9000a872:	4313      	orrs	r3, r2
9000a874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
9000a876:	693b      	ldr	r3, [r7, #16]
9000a878:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
9000a87c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
9000a87e:	683b      	ldr	r3, [r7, #0]
9000a880:	689b      	ldr	r3, [r3, #8]
9000a882:	041b      	lsls	r3, r3, #16
9000a884:	693a      	ldr	r2, [r7, #16]
9000a886:	4313      	orrs	r3, r2
9000a888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000a88a:	687b      	ldr	r3, [r7, #4]
9000a88c:	4a18      	ldr	r2, [pc, #96]	@ (9000a8f0 <TIM_OC5_SetConfig+0xb4>)
9000a88e:	4293      	cmp	r3, r2
9000a890:	d00f      	beq.n	9000a8b2 <TIM_OC5_SetConfig+0x76>
9000a892:	687b      	ldr	r3, [r7, #4]
9000a894:	4a17      	ldr	r2, [pc, #92]	@ (9000a8f4 <TIM_OC5_SetConfig+0xb8>)
9000a896:	4293      	cmp	r3, r2
9000a898:	d00b      	beq.n	9000a8b2 <TIM_OC5_SetConfig+0x76>
9000a89a:	687b      	ldr	r3, [r7, #4]
9000a89c:	4a16      	ldr	r2, [pc, #88]	@ (9000a8f8 <TIM_OC5_SetConfig+0xbc>)
9000a89e:	4293      	cmp	r3, r2
9000a8a0:	d007      	beq.n	9000a8b2 <TIM_OC5_SetConfig+0x76>
9000a8a2:	687b      	ldr	r3, [r7, #4]
9000a8a4:	4a15      	ldr	r2, [pc, #84]	@ (9000a8fc <TIM_OC5_SetConfig+0xc0>)
9000a8a6:	4293      	cmp	r3, r2
9000a8a8:	d003      	beq.n	9000a8b2 <TIM_OC5_SetConfig+0x76>
9000a8aa:	687b      	ldr	r3, [r7, #4]
9000a8ac:	4a14      	ldr	r2, [pc, #80]	@ (9000a900 <TIM_OC5_SetConfig+0xc4>)
9000a8ae:	4293      	cmp	r3, r2
9000a8b0:	d109      	bne.n	9000a8c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
9000a8b2:	697b      	ldr	r3, [r7, #20]
9000a8b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000a8b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
9000a8ba:	683b      	ldr	r3, [r7, #0]
9000a8bc:	695b      	ldr	r3, [r3, #20]
9000a8be:	021b      	lsls	r3, r3, #8
9000a8c0:	697a      	ldr	r2, [r7, #20]
9000a8c2:	4313      	orrs	r3, r2
9000a8c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
9000a8c6:	687b      	ldr	r3, [r7, #4]
9000a8c8:	697a      	ldr	r2, [r7, #20]
9000a8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
9000a8cc:	687b      	ldr	r3, [r7, #4]
9000a8ce:	68fa      	ldr	r2, [r7, #12]
9000a8d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
9000a8d2:	683b      	ldr	r3, [r7, #0]
9000a8d4:	685a      	ldr	r2, [r3, #4]
9000a8d6:	687b      	ldr	r3, [r7, #4]
9000a8d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
9000a8da:	687b      	ldr	r3, [r7, #4]
9000a8dc:	693a      	ldr	r2, [r7, #16]
9000a8de:	621a      	str	r2, [r3, #32]
}
9000a8e0:	bf00      	nop
9000a8e2:	371c      	adds	r7, #28
9000a8e4:	46bd      	mov	sp, r7
9000a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a8ea:	4770      	bx	lr
9000a8ec:	fffeff8f 	.word	0xfffeff8f
9000a8f0:	40010000 	.word	0x40010000
9000a8f4:	40010400 	.word	0x40010400
9000a8f8:	40014000 	.word	0x40014000
9000a8fc:	40014400 	.word	0x40014400
9000a900:	40014800 	.word	0x40014800

9000a904 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
9000a904:	b480      	push	{r7}
9000a906:	b087      	sub	sp, #28
9000a908:	af00      	add	r7, sp, #0
9000a90a:	6078      	str	r0, [r7, #4]
9000a90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
9000a90e:	687b      	ldr	r3, [r7, #4]
9000a910:	6a1b      	ldr	r3, [r3, #32]
9000a912:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
9000a914:	687b      	ldr	r3, [r7, #4]
9000a916:	6a1b      	ldr	r3, [r3, #32]
9000a918:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
9000a91c:	687b      	ldr	r3, [r7, #4]
9000a91e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
9000a920:	687b      	ldr	r3, [r7, #4]
9000a922:	685b      	ldr	r3, [r3, #4]
9000a924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
9000a926:	687b      	ldr	r3, [r7, #4]
9000a928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
9000a92c:	68fa      	ldr	r2, [r7, #12]
9000a92e:	4b22      	ldr	r3, [pc, #136]	@ (9000a9b8 <TIM_OC6_SetConfig+0xb4>)
9000a930:	4013      	ands	r3, r2
9000a932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
9000a934:	683b      	ldr	r3, [r7, #0]
9000a936:	681b      	ldr	r3, [r3, #0]
9000a938:	021b      	lsls	r3, r3, #8
9000a93a:	68fa      	ldr	r2, [r7, #12]
9000a93c:	4313      	orrs	r3, r2
9000a93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
9000a940:	693b      	ldr	r3, [r7, #16]
9000a942:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
9000a946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
9000a948:	683b      	ldr	r3, [r7, #0]
9000a94a:	689b      	ldr	r3, [r3, #8]
9000a94c:	051b      	lsls	r3, r3, #20
9000a94e:	693a      	ldr	r2, [r7, #16]
9000a950:	4313      	orrs	r3, r2
9000a952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000a954:	687b      	ldr	r3, [r7, #4]
9000a956:	4a19      	ldr	r2, [pc, #100]	@ (9000a9bc <TIM_OC6_SetConfig+0xb8>)
9000a958:	4293      	cmp	r3, r2
9000a95a:	d00f      	beq.n	9000a97c <TIM_OC6_SetConfig+0x78>
9000a95c:	687b      	ldr	r3, [r7, #4]
9000a95e:	4a18      	ldr	r2, [pc, #96]	@ (9000a9c0 <TIM_OC6_SetConfig+0xbc>)
9000a960:	4293      	cmp	r3, r2
9000a962:	d00b      	beq.n	9000a97c <TIM_OC6_SetConfig+0x78>
9000a964:	687b      	ldr	r3, [r7, #4]
9000a966:	4a17      	ldr	r2, [pc, #92]	@ (9000a9c4 <TIM_OC6_SetConfig+0xc0>)
9000a968:	4293      	cmp	r3, r2
9000a96a:	d007      	beq.n	9000a97c <TIM_OC6_SetConfig+0x78>
9000a96c:	687b      	ldr	r3, [r7, #4]
9000a96e:	4a16      	ldr	r2, [pc, #88]	@ (9000a9c8 <TIM_OC6_SetConfig+0xc4>)
9000a970:	4293      	cmp	r3, r2
9000a972:	d003      	beq.n	9000a97c <TIM_OC6_SetConfig+0x78>
9000a974:	687b      	ldr	r3, [r7, #4]
9000a976:	4a15      	ldr	r2, [pc, #84]	@ (9000a9cc <TIM_OC6_SetConfig+0xc8>)
9000a978:	4293      	cmp	r3, r2
9000a97a:	d109      	bne.n	9000a990 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
9000a97c:	697b      	ldr	r3, [r7, #20]
9000a97e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
9000a982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
9000a984:	683b      	ldr	r3, [r7, #0]
9000a986:	695b      	ldr	r3, [r3, #20]
9000a988:	029b      	lsls	r3, r3, #10
9000a98a:	697a      	ldr	r2, [r7, #20]
9000a98c:	4313      	orrs	r3, r2
9000a98e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
9000a990:	687b      	ldr	r3, [r7, #4]
9000a992:	697a      	ldr	r2, [r7, #20]
9000a994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
9000a996:	687b      	ldr	r3, [r7, #4]
9000a998:	68fa      	ldr	r2, [r7, #12]
9000a99a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
9000a99c:	683b      	ldr	r3, [r7, #0]
9000a99e:	685a      	ldr	r2, [r3, #4]
9000a9a0:	687b      	ldr	r3, [r7, #4]
9000a9a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
9000a9a4:	687b      	ldr	r3, [r7, #4]
9000a9a6:	693a      	ldr	r2, [r7, #16]
9000a9a8:	621a      	str	r2, [r3, #32]
}
9000a9aa:	bf00      	nop
9000a9ac:	371c      	adds	r7, #28
9000a9ae:	46bd      	mov	sp, r7
9000a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a9b4:	4770      	bx	lr
9000a9b6:	bf00      	nop
9000a9b8:	feff8fff 	.word	0xfeff8fff
9000a9bc:	40010000 	.word	0x40010000
9000a9c0:	40010400 	.word	0x40010400
9000a9c4:	40014000 	.word	0x40014000
9000a9c8:	40014400 	.word	0x40014400
9000a9cc:	40014800 	.word	0x40014800

9000a9d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
9000a9d0:	b480      	push	{r7}
9000a9d2:	b087      	sub	sp, #28
9000a9d4:	af00      	add	r7, sp, #0
9000a9d6:	60f8      	str	r0, [r7, #12]
9000a9d8:	60b9      	str	r1, [r7, #8]
9000a9da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
9000a9dc:	68bb      	ldr	r3, [r7, #8]
9000a9de:	f003 031f 	and.w	r3, r3, #31
9000a9e2:	2201      	movs	r2, #1
9000a9e4:	fa02 f303 	lsl.w	r3, r2, r3
9000a9e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
9000a9ea:	68fb      	ldr	r3, [r7, #12]
9000a9ec:	6a1a      	ldr	r2, [r3, #32]
9000a9ee:	697b      	ldr	r3, [r7, #20]
9000a9f0:	43db      	mvns	r3, r3
9000a9f2:	401a      	ands	r2, r3
9000a9f4:	68fb      	ldr	r3, [r7, #12]
9000a9f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
9000a9f8:	68fb      	ldr	r3, [r7, #12]
9000a9fa:	6a1a      	ldr	r2, [r3, #32]
9000a9fc:	68bb      	ldr	r3, [r7, #8]
9000a9fe:	f003 031f 	and.w	r3, r3, #31
9000aa02:	6879      	ldr	r1, [r7, #4]
9000aa04:	fa01 f303 	lsl.w	r3, r1, r3
9000aa08:	431a      	orrs	r2, r3
9000aa0a:	68fb      	ldr	r3, [r7, #12]
9000aa0c:	621a      	str	r2, [r3, #32]
}
9000aa0e:	bf00      	nop
9000aa10:	371c      	adds	r7, #28
9000aa12:	46bd      	mov	sp, r7
9000aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aa18:	4770      	bx	lr

9000aa1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
9000aa1a:	b580      	push	{r7, lr}
9000aa1c:	b082      	sub	sp, #8
9000aa1e:	af00      	add	r7, sp, #0
9000aa20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
9000aa22:	687b      	ldr	r3, [r7, #4]
9000aa24:	2b00      	cmp	r3, #0
9000aa26:	d101      	bne.n	9000aa2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
9000aa28:	2301      	movs	r3, #1
9000aa2a:	e042      	b.n	9000aab2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
9000aa2c:	687b      	ldr	r3, [r7, #4]
9000aa2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000aa32:	2b00      	cmp	r3, #0
9000aa34:	d106      	bne.n	9000aa44 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
9000aa36:	687b      	ldr	r3, [r7, #4]
9000aa38:	2200      	movs	r2, #0
9000aa3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
9000aa3e:	6878      	ldr	r0, [r7, #4]
9000aa40:	f7f6 f966 	bl	90000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
9000aa44:	687b      	ldr	r3, [r7, #4]
9000aa46:	2224      	movs	r2, #36	@ 0x24
9000aa48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
9000aa4c:	687b      	ldr	r3, [r7, #4]
9000aa4e:	681b      	ldr	r3, [r3, #0]
9000aa50:	681a      	ldr	r2, [r3, #0]
9000aa52:	687b      	ldr	r3, [r7, #4]
9000aa54:	681b      	ldr	r3, [r3, #0]
9000aa56:	f022 0201 	bic.w	r2, r2, #1
9000aa5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
9000aa5c:	687b      	ldr	r3, [r7, #4]
9000aa5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000aa60:	2b00      	cmp	r3, #0
9000aa62:	d002      	beq.n	9000aa6a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
9000aa64:	6878      	ldr	r0, [r7, #4]
9000aa66:	f000 fe1f 	bl	9000b6a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
9000aa6a:	6878      	ldr	r0, [r7, #4]
9000aa6c:	f000 f8b4 	bl	9000abd8 <UART_SetConfig>
9000aa70:	4603      	mov	r3, r0
9000aa72:	2b01      	cmp	r3, #1
9000aa74:	d101      	bne.n	9000aa7a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
9000aa76:	2301      	movs	r3, #1
9000aa78:	e01b      	b.n	9000aab2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000aa7a:	687b      	ldr	r3, [r7, #4]
9000aa7c:	681b      	ldr	r3, [r3, #0]
9000aa7e:	685a      	ldr	r2, [r3, #4]
9000aa80:	687b      	ldr	r3, [r7, #4]
9000aa82:	681b      	ldr	r3, [r3, #0]
9000aa84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
9000aa88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
9000aa8a:	687b      	ldr	r3, [r7, #4]
9000aa8c:	681b      	ldr	r3, [r3, #0]
9000aa8e:	689a      	ldr	r2, [r3, #8]
9000aa90:	687b      	ldr	r3, [r7, #4]
9000aa92:	681b      	ldr	r3, [r3, #0]
9000aa94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
9000aa98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
9000aa9a:	687b      	ldr	r3, [r7, #4]
9000aa9c:	681b      	ldr	r3, [r3, #0]
9000aa9e:	681a      	ldr	r2, [r3, #0]
9000aaa0:	687b      	ldr	r3, [r7, #4]
9000aaa2:	681b      	ldr	r3, [r3, #0]
9000aaa4:	f042 0201 	orr.w	r2, r2, #1
9000aaa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
9000aaaa:	6878      	ldr	r0, [r7, #4]
9000aaac:	f000 fe9e 	bl	9000b7ec <UART_CheckIdleState>
9000aab0:	4603      	mov	r3, r0
}
9000aab2:	4618      	mov	r0, r3
9000aab4:	3708      	adds	r7, #8
9000aab6:	46bd      	mov	sp, r7
9000aab8:	bd80      	pop	{r7, pc}

9000aaba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
9000aaba:	b580      	push	{r7, lr}
9000aabc:	b08a      	sub	sp, #40	@ 0x28
9000aabe:	af02      	add	r7, sp, #8
9000aac0:	60f8      	str	r0, [r7, #12]
9000aac2:	60b9      	str	r1, [r7, #8]
9000aac4:	603b      	str	r3, [r7, #0]
9000aac6:	4613      	mov	r3, r2
9000aac8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
9000aaca:	68fb      	ldr	r3, [r7, #12]
9000aacc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
9000aad0:	2b20      	cmp	r3, #32
9000aad2:	d17b      	bne.n	9000abcc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
9000aad4:	68bb      	ldr	r3, [r7, #8]
9000aad6:	2b00      	cmp	r3, #0
9000aad8:	d002      	beq.n	9000aae0 <HAL_UART_Transmit+0x26>
9000aada:	88fb      	ldrh	r3, [r7, #6]
9000aadc:	2b00      	cmp	r3, #0
9000aade:	d101      	bne.n	9000aae4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
9000aae0:	2301      	movs	r3, #1
9000aae2:	e074      	b.n	9000abce <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
9000aae4:	68fb      	ldr	r3, [r7, #12]
9000aae6:	2200      	movs	r2, #0
9000aae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000aaec:	68fb      	ldr	r3, [r7, #12]
9000aaee:	2221      	movs	r2, #33	@ 0x21
9000aaf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
9000aaf4:	f7f8 fd1a 	bl	9000352c <HAL_GetTick>
9000aaf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
9000aafa:	68fb      	ldr	r3, [r7, #12]
9000aafc:	88fa      	ldrh	r2, [r7, #6]
9000aafe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
9000ab02:	68fb      	ldr	r3, [r7, #12]
9000ab04:	88fa      	ldrh	r2, [r7, #6]
9000ab06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000ab0a:	68fb      	ldr	r3, [r7, #12]
9000ab0c:	689b      	ldr	r3, [r3, #8]
9000ab0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
9000ab12:	d108      	bne.n	9000ab26 <HAL_UART_Transmit+0x6c>
9000ab14:	68fb      	ldr	r3, [r7, #12]
9000ab16:	691b      	ldr	r3, [r3, #16]
9000ab18:	2b00      	cmp	r3, #0
9000ab1a:	d104      	bne.n	9000ab26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
9000ab1c:	2300      	movs	r3, #0
9000ab1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
9000ab20:	68bb      	ldr	r3, [r7, #8]
9000ab22:	61bb      	str	r3, [r7, #24]
9000ab24:	e003      	b.n	9000ab2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
9000ab26:	68bb      	ldr	r3, [r7, #8]
9000ab28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
9000ab2a:	2300      	movs	r3, #0
9000ab2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
9000ab2e:	e030      	b.n	9000ab92 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
9000ab30:	683b      	ldr	r3, [r7, #0]
9000ab32:	9300      	str	r3, [sp, #0]
9000ab34:	697b      	ldr	r3, [r7, #20]
9000ab36:	2200      	movs	r2, #0
9000ab38:	2180      	movs	r1, #128	@ 0x80
9000ab3a:	68f8      	ldr	r0, [r7, #12]
9000ab3c:	f000 ff00 	bl	9000b940 <UART_WaitOnFlagUntilTimeout>
9000ab40:	4603      	mov	r3, r0
9000ab42:	2b00      	cmp	r3, #0
9000ab44:	d005      	beq.n	9000ab52 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
9000ab46:	68fb      	ldr	r3, [r7, #12]
9000ab48:	2220      	movs	r2, #32
9000ab4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
9000ab4e:	2303      	movs	r3, #3
9000ab50:	e03d      	b.n	9000abce <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
9000ab52:	69fb      	ldr	r3, [r7, #28]
9000ab54:	2b00      	cmp	r3, #0
9000ab56:	d10b      	bne.n	9000ab70 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
9000ab58:	69bb      	ldr	r3, [r7, #24]
9000ab5a:	881b      	ldrh	r3, [r3, #0]
9000ab5c:	461a      	mov	r2, r3
9000ab5e:	68fb      	ldr	r3, [r7, #12]
9000ab60:	681b      	ldr	r3, [r3, #0]
9000ab62:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000ab66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
9000ab68:	69bb      	ldr	r3, [r7, #24]
9000ab6a:	3302      	adds	r3, #2
9000ab6c:	61bb      	str	r3, [r7, #24]
9000ab6e:	e007      	b.n	9000ab80 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000ab70:	69fb      	ldr	r3, [r7, #28]
9000ab72:	781a      	ldrb	r2, [r3, #0]
9000ab74:	68fb      	ldr	r3, [r7, #12]
9000ab76:	681b      	ldr	r3, [r3, #0]
9000ab78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
9000ab7a:	69fb      	ldr	r3, [r7, #28]
9000ab7c:	3301      	adds	r3, #1
9000ab7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
9000ab80:	68fb      	ldr	r3, [r7, #12]
9000ab82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
9000ab86:	b29b      	uxth	r3, r3
9000ab88:	3b01      	subs	r3, #1
9000ab8a:	b29a      	uxth	r2, r3
9000ab8c:	68fb      	ldr	r3, [r7, #12]
9000ab8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
9000ab92:	68fb      	ldr	r3, [r7, #12]
9000ab94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
9000ab98:	b29b      	uxth	r3, r3
9000ab9a:	2b00      	cmp	r3, #0
9000ab9c:	d1c8      	bne.n	9000ab30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
9000ab9e:	683b      	ldr	r3, [r7, #0]
9000aba0:	9300      	str	r3, [sp, #0]
9000aba2:	697b      	ldr	r3, [r7, #20]
9000aba4:	2200      	movs	r2, #0
9000aba6:	2140      	movs	r1, #64	@ 0x40
9000aba8:	68f8      	ldr	r0, [r7, #12]
9000abaa:	f000 fec9 	bl	9000b940 <UART_WaitOnFlagUntilTimeout>
9000abae:	4603      	mov	r3, r0
9000abb0:	2b00      	cmp	r3, #0
9000abb2:	d005      	beq.n	9000abc0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
9000abb4:	68fb      	ldr	r3, [r7, #12]
9000abb6:	2220      	movs	r2, #32
9000abb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
9000abbc:	2303      	movs	r3, #3
9000abbe:	e006      	b.n	9000abce <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
9000abc0:	68fb      	ldr	r3, [r7, #12]
9000abc2:	2220      	movs	r2, #32
9000abc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
9000abc8:	2300      	movs	r3, #0
9000abca:	e000      	b.n	9000abce <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
9000abcc:	2302      	movs	r3, #2
  }
}
9000abce:	4618      	mov	r0, r3
9000abd0:	3720      	adds	r7, #32
9000abd2:	46bd      	mov	sp, r7
9000abd4:	bd80      	pop	{r7, pc}
	...

9000abd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
9000abd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
9000abdc:	b092      	sub	sp, #72	@ 0x48
9000abde:	af00      	add	r7, sp, #0
9000abe0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
9000abe2:	2300      	movs	r3, #0
9000abe4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000abe8:	697b      	ldr	r3, [r7, #20]
9000abea:	689a      	ldr	r2, [r3, #8]
9000abec:	697b      	ldr	r3, [r7, #20]
9000abee:	691b      	ldr	r3, [r3, #16]
9000abf0:	431a      	orrs	r2, r3
9000abf2:	697b      	ldr	r3, [r7, #20]
9000abf4:	695b      	ldr	r3, [r3, #20]
9000abf6:	431a      	orrs	r2, r3
9000abf8:	697b      	ldr	r3, [r7, #20]
9000abfa:	69db      	ldr	r3, [r3, #28]
9000abfc:	4313      	orrs	r3, r2
9000abfe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000ac00:	697b      	ldr	r3, [r7, #20]
9000ac02:	681b      	ldr	r3, [r3, #0]
9000ac04:	681a      	ldr	r2, [r3, #0]
9000ac06:	4bbe      	ldr	r3, [pc, #760]	@ (9000af00 <UART_SetConfig+0x328>)
9000ac08:	4013      	ands	r3, r2
9000ac0a:	697a      	ldr	r2, [r7, #20]
9000ac0c:	6812      	ldr	r2, [r2, #0]
9000ac0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
9000ac10:	430b      	orrs	r3, r1
9000ac12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000ac14:	697b      	ldr	r3, [r7, #20]
9000ac16:	681b      	ldr	r3, [r3, #0]
9000ac18:	685b      	ldr	r3, [r3, #4]
9000ac1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
9000ac1e:	697b      	ldr	r3, [r7, #20]
9000ac20:	68da      	ldr	r2, [r3, #12]
9000ac22:	697b      	ldr	r3, [r7, #20]
9000ac24:	681b      	ldr	r3, [r3, #0]
9000ac26:	430a      	orrs	r2, r1
9000ac28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000ac2a:	697b      	ldr	r3, [r7, #20]
9000ac2c:	699b      	ldr	r3, [r3, #24]
9000ac2e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000ac30:	697b      	ldr	r3, [r7, #20]
9000ac32:	681b      	ldr	r3, [r3, #0]
9000ac34:	4ab3      	ldr	r2, [pc, #716]	@ (9000af04 <UART_SetConfig+0x32c>)
9000ac36:	4293      	cmp	r3, r2
9000ac38:	d004      	beq.n	9000ac44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
9000ac3a:	697b      	ldr	r3, [r7, #20]
9000ac3c:	6a1b      	ldr	r3, [r3, #32]
9000ac3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000ac40:	4313      	orrs	r3, r2
9000ac42:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000ac44:	697b      	ldr	r3, [r7, #20]
9000ac46:	681b      	ldr	r3, [r3, #0]
9000ac48:	689a      	ldr	r2, [r3, #8]
9000ac4a:	4baf      	ldr	r3, [pc, #700]	@ (9000af08 <UART_SetConfig+0x330>)
9000ac4c:	4013      	ands	r3, r2
9000ac4e:	697a      	ldr	r2, [r7, #20]
9000ac50:	6812      	ldr	r2, [r2, #0]
9000ac52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
9000ac54:	430b      	orrs	r3, r1
9000ac56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000ac58:	697b      	ldr	r3, [r7, #20]
9000ac5a:	681b      	ldr	r3, [r3, #0]
9000ac5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000ac5e:	f023 010f 	bic.w	r1, r3, #15
9000ac62:	697b      	ldr	r3, [r7, #20]
9000ac64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
9000ac66:	697b      	ldr	r3, [r7, #20]
9000ac68:	681b      	ldr	r3, [r3, #0]
9000ac6a:	430a      	orrs	r2, r1
9000ac6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000ac6e:	697b      	ldr	r3, [r7, #20]
9000ac70:	681b      	ldr	r3, [r3, #0]
9000ac72:	4aa6      	ldr	r2, [pc, #664]	@ (9000af0c <UART_SetConfig+0x334>)
9000ac74:	4293      	cmp	r3, r2
9000ac76:	d177      	bne.n	9000ad68 <UART_SetConfig+0x190>
9000ac78:	4ba5      	ldr	r3, [pc, #660]	@ (9000af10 <UART_SetConfig+0x338>)
9000ac7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ac7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000ac80:	2b28      	cmp	r3, #40	@ 0x28
9000ac82:	d86d      	bhi.n	9000ad60 <UART_SetConfig+0x188>
9000ac84:	a201      	add	r2, pc, #4	@ (adr r2, 9000ac8c <UART_SetConfig+0xb4>)
9000ac86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ac8a:	bf00      	nop
9000ac8c:	9000ad31 	.word	0x9000ad31
9000ac90:	9000ad61 	.word	0x9000ad61
9000ac94:	9000ad61 	.word	0x9000ad61
9000ac98:	9000ad61 	.word	0x9000ad61
9000ac9c:	9000ad61 	.word	0x9000ad61
9000aca0:	9000ad61 	.word	0x9000ad61
9000aca4:	9000ad61 	.word	0x9000ad61
9000aca8:	9000ad61 	.word	0x9000ad61
9000acac:	9000ad39 	.word	0x9000ad39
9000acb0:	9000ad61 	.word	0x9000ad61
9000acb4:	9000ad61 	.word	0x9000ad61
9000acb8:	9000ad61 	.word	0x9000ad61
9000acbc:	9000ad61 	.word	0x9000ad61
9000acc0:	9000ad61 	.word	0x9000ad61
9000acc4:	9000ad61 	.word	0x9000ad61
9000acc8:	9000ad61 	.word	0x9000ad61
9000accc:	9000ad41 	.word	0x9000ad41
9000acd0:	9000ad61 	.word	0x9000ad61
9000acd4:	9000ad61 	.word	0x9000ad61
9000acd8:	9000ad61 	.word	0x9000ad61
9000acdc:	9000ad61 	.word	0x9000ad61
9000ace0:	9000ad61 	.word	0x9000ad61
9000ace4:	9000ad61 	.word	0x9000ad61
9000ace8:	9000ad61 	.word	0x9000ad61
9000acec:	9000ad49 	.word	0x9000ad49
9000acf0:	9000ad61 	.word	0x9000ad61
9000acf4:	9000ad61 	.word	0x9000ad61
9000acf8:	9000ad61 	.word	0x9000ad61
9000acfc:	9000ad61 	.word	0x9000ad61
9000ad00:	9000ad61 	.word	0x9000ad61
9000ad04:	9000ad61 	.word	0x9000ad61
9000ad08:	9000ad61 	.word	0x9000ad61
9000ad0c:	9000ad51 	.word	0x9000ad51
9000ad10:	9000ad61 	.word	0x9000ad61
9000ad14:	9000ad61 	.word	0x9000ad61
9000ad18:	9000ad61 	.word	0x9000ad61
9000ad1c:	9000ad61 	.word	0x9000ad61
9000ad20:	9000ad61 	.word	0x9000ad61
9000ad24:	9000ad61 	.word	0x9000ad61
9000ad28:	9000ad61 	.word	0x9000ad61
9000ad2c:	9000ad59 	.word	0x9000ad59
9000ad30:	2301      	movs	r3, #1
9000ad32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad36:	e222      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ad38:	2304      	movs	r3, #4
9000ad3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad3e:	e21e      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ad40:	2308      	movs	r3, #8
9000ad42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad46:	e21a      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ad48:	2310      	movs	r3, #16
9000ad4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad4e:	e216      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ad50:	2320      	movs	r3, #32
9000ad52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad56:	e212      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ad58:	2340      	movs	r3, #64	@ 0x40
9000ad5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad5e:	e20e      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ad60:	2380      	movs	r3, #128	@ 0x80
9000ad62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ad66:	e20a      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ad68:	697b      	ldr	r3, [r7, #20]
9000ad6a:	681b      	ldr	r3, [r3, #0]
9000ad6c:	4a69      	ldr	r2, [pc, #420]	@ (9000af14 <UART_SetConfig+0x33c>)
9000ad6e:	4293      	cmp	r3, r2
9000ad70:	d130      	bne.n	9000add4 <UART_SetConfig+0x1fc>
9000ad72:	4b67      	ldr	r3, [pc, #412]	@ (9000af10 <UART_SetConfig+0x338>)
9000ad74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ad76:	f003 0307 	and.w	r3, r3, #7
9000ad7a:	2b05      	cmp	r3, #5
9000ad7c:	d826      	bhi.n	9000adcc <UART_SetConfig+0x1f4>
9000ad7e:	a201      	add	r2, pc, #4	@ (adr r2, 9000ad84 <UART_SetConfig+0x1ac>)
9000ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ad84:	9000ad9d 	.word	0x9000ad9d
9000ad88:	9000ada5 	.word	0x9000ada5
9000ad8c:	9000adad 	.word	0x9000adad
9000ad90:	9000adb5 	.word	0x9000adb5
9000ad94:	9000adbd 	.word	0x9000adbd
9000ad98:	9000adc5 	.word	0x9000adc5
9000ad9c:	2300      	movs	r3, #0
9000ad9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ada2:	e1ec      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ada4:	2304      	movs	r3, #4
9000ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adaa:	e1e8      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000adac:	2308      	movs	r3, #8
9000adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adb2:	e1e4      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000adb4:	2310      	movs	r3, #16
9000adb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adba:	e1e0      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000adbc:	2320      	movs	r3, #32
9000adbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adc2:	e1dc      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000adc4:	2340      	movs	r3, #64	@ 0x40
9000adc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000adca:	e1d8      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000adcc:	2380      	movs	r3, #128	@ 0x80
9000adce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000add2:	e1d4      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000add4:	697b      	ldr	r3, [r7, #20]
9000add6:	681b      	ldr	r3, [r3, #0]
9000add8:	4a4f      	ldr	r2, [pc, #316]	@ (9000af18 <UART_SetConfig+0x340>)
9000adda:	4293      	cmp	r3, r2
9000addc:	d130      	bne.n	9000ae40 <UART_SetConfig+0x268>
9000adde:	4b4c      	ldr	r3, [pc, #304]	@ (9000af10 <UART_SetConfig+0x338>)
9000ade0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ade2:	f003 0307 	and.w	r3, r3, #7
9000ade6:	2b05      	cmp	r3, #5
9000ade8:	d826      	bhi.n	9000ae38 <UART_SetConfig+0x260>
9000adea:	a201      	add	r2, pc, #4	@ (adr r2, 9000adf0 <UART_SetConfig+0x218>)
9000adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000adf0:	9000ae09 	.word	0x9000ae09
9000adf4:	9000ae11 	.word	0x9000ae11
9000adf8:	9000ae19 	.word	0x9000ae19
9000adfc:	9000ae21 	.word	0x9000ae21
9000ae00:	9000ae29 	.word	0x9000ae29
9000ae04:	9000ae31 	.word	0x9000ae31
9000ae08:	2300      	movs	r3, #0
9000ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae0e:	e1b6      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae10:	2304      	movs	r3, #4
9000ae12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae16:	e1b2      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae18:	2308      	movs	r3, #8
9000ae1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae1e:	e1ae      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae20:	2310      	movs	r3, #16
9000ae22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae26:	e1aa      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae28:	2320      	movs	r3, #32
9000ae2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae2e:	e1a6      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae30:	2340      	movs	r3, #64	@ 0x40
9000ae32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae36:	e1a2      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae38:	2380      	movs	r3, #128	@ 0x80
9000ae3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae3e:	e19e      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae40:	697b      	ldr	r3, [r7, #20]
9000ae42:	681b      	ldr	r3, [r3, #0]
9000ae44:	4a35      	ldr	r2, [pc, #212]	@ (9000af1c <UART_SetConfig+0x344>)
9000ae46:	4293      	cmp	r3, r2
9000ae48:	d130      	bne.n	9000aeac <UART_SetConfig+0x2d4>
9000ae4a:	4b31      	ldr	r3, [pc, #196]	@ (9000af10 <UART_SetConfig+0x338>)
9000ae4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000ae4e:	f003 0307 	and.w	r3, r3, #7
9000ae52:	2b05      	cmp	r3, #5
9000ae54:	d826      	bhi.n	9000aea4 <UART_SetConfig+0x2cc>
9000ae56:	a201      	add	r2, pc, #4	@ (adr r2, 9000ae5c <UART_SetConfig+0x284>)
9000ae58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ae5c:	9000ae75 	.word	0x9000ae75
9000ae60:	9000ae7d 	.word	0x9000ae7d
9000ae64:	9000ae85 	.word	0x9000ae85
9000ae68:	9000ae8d 	.word	0x9000ae8d
9000ae6c:	9000ae95 	.word	0x9000ae95
9000ae70:	9000ae9d 	.word	0x9000ae9d
9000ae74:	2300      	movs	r3, #0
9000ae76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae7a:	e180      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae7c:	2304      	movs	r3, #4
9000ae7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae82:	e17c      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae84:	2308      	movs	r3, #8
9000ae86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae8a:	e178      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae8c:	2310      	movs	r3, #16
9000ae8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae92:	e174      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae94:	2320      	movs	r3, #32
9000ae96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000ae9a:	e170      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000ae9c:	2340      	movs	r3, #64	@ 0x40
9000ae9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aea2:	e16c      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000aea4:	2380      	movs	r3, #128	@ 0x80
9000aea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aeaa:	e168      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000aeac:	697b      	ldr	r3, [r7, #20]
9000aeae:	681b      	ldr	r3, [r3, #0]
9000aeb0:	4a1b      	ldr	r2, [pc, #108]	@ (9000af20 <UART_SetConfig+0x348>)
9000aeb2:	4293      	cmp	r3, r2
9000aeb4:	d142      	bne.n	9000af3c <UART_SetConfig+0x364>
9000aeb6:	4b16      	ldr	r3, [pc, #88]	@ (9000af10 <UART_SetConfig+0x338>)
9000aeb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000aeba:	f003 0307 	and.w	r3, r3, #7
9000aebe:	2b05      	cmp	r3, #5
9000aec0:	d838      	bhi.n	9000af34 <UART_SetConfig+0x35c>
9000aec2:	a201      	add	r2, pc, #4	@ (adr r2, 9000aec8 <UART_SetConfig+0x2f0>)
9000aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000aec8:	9000aee1 	.word	0x9000aee1
9000aecc:	9000aee9 	.word	0x9000aee9
9000aed0:	9000aef1 	.word	0x9000aef1
9000aed4:	9000aef9 	.word	0x9000aef9
9000aed8:	9000af25 	.word	0x9000af25
9000aedc:	9000af2d 	.word	0x9000af2d
9000aee0:	2300      	movs	r3, #0
9000aee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aee6:	e14a      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000aee8:	2304      	movs	r3, #4
9000aeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aeee:	e146      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000aef0:	2308      	movs	r3, #8
9000aef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aef6:	e142      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000aef8:	2310      	movs	r3, #16
9000aefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000aefe:	e13e      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000af00:	cfff69f3 	.word	0xcfff69f3
9000af04:	58000c00 	.word	0x58000c00
9000af08:	11fff4ff 	.word	0x11fff4ff
9000af0c:	40011000 	.word	0x40011000
9000af10:	58024400 	.word	0x58024400
9000af14:	40004400 	.word	0x40004400
9000af18:	40004800 	.word	0x40004800
9000af1c:	40004c00 	.word	0x40004c00
9000af20:	40005000 	.word	0x40005000
9000af24:	2320      	movs	r3, #32
9000af26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af2a:	e128      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000af2c:	2340      	movs	r3, #64	@ 0x40
9000af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af32:	e124      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000af34:	2380      	movs	r3, #128	@ 0x80
9000af36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000af3a:	e120      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000af3c:	697b      	ldr	r3, [r7, #20]
9000af3e:	681b      	ldr	r3, [r3, #0]
9000af40:	4acb      	ldr	r2, [pc, #812]	@ (9000b270 <UART_SetConfig+0x698>)
9000af42:	4293      	cmp	r3, r2
9000af44:	d176      	bne.n	9000b034 <UART_SetConfig+0x45c>
9000af46:	4bcb      	ldr	r3, [pc, #812]	@ (9000b274 <UART_SetConfig+0x69c>)
9000af48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000af4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000af4e:	2b28      	cmp	r3, #40	@ 0x28
9000af50:	d86c      	bhi.n	9000b02c <UART_SetConfig+0x454>
9000af52:	a201      	add	r2, pc, #4	@ (adr r2, 9000af58 <UART_SetConfig+0x380>)
9000af54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000af58:	9000affd 	.word	0x9000affd
9000af5c:	9000b02d 	.word	0x9000b02d
9000af60:	9000b02d 	.word	0x9000b02d
9000af64:	9000b02d 	.word	0x9000b02d
9000af68:	9000b02d 	.word	0x9000b02d
9000af6c:	9000b02d 	.word	0x9000b02d
9000af70:	9000b02d 	.word	0x9000b02d
9000af74:	9000b02d 	.word	0x9000b02d
9000af78:	9000b005 	.word	0x9000b005
9000af7c:	9000b02d 	.word	0x9000b02d
9000af80:	9000b02d 	.word	0x9000b02d
9000af84:	9000b02d 	.word	0x9000b02d
9000af88:	9000b02d 	.word	0x9000b02d
9000af8c:	9000b02d 	.word	0x9000b02d
9000af90:	9000b02d 	.word	0x9000b02d
9000af94:	9000b02d 	.word	0x9000b02d
9000af98:	9000b00d 	.word	0x9000b00d
9000af9c:	9000b02d 	.word	0x9000b02d
9000afa0:	9000b02d 	.word	0x9000b02d
9000afa4:	9000b02d 	.word	0x9000b02d
9000afa8:	9000b02d 	.word	0x9000b02d
9000afac:	9000b02d 	.word	0x9000b02d
9000afb0:	9000b02d 	.word	0x9000b02d
9000afb4:	9000b02d 	.word	0x9000b02d
9000afb8:	9000b015 	.word	0x9000b015
9000afbc:	9000b02d 	.word	0x9000b02d
9000afc0:	9000b02d 	.word	0x9000b02d
9000afc4:	9000b02d 	.word	0x9000b02d
9000afc8:	9000b02d 	.word	0x9000b02d
9000afcc:	9000b02d 	.word	0x9000b02d
9000afd0:	9000b02d 	.word	0x9000b02d
9000afd4:	9000b02d 	.word	0x9000b02d
9000afd8:	9000b01d 	.word	0x9000b01d
9000afdc:	9000b02d 	.word	0x9000b02d
9000afe0:	9000b02d 	.word	0x9000b02d
9000afe4:	9000b02d 	.word	0x9000b02d
9000afe8:	9000b02d 	.word	0x9000b02d
9000afec:	9000b02d 	.word	0x9000b02d
9000aff0:	9000b02d 	.word	0x9000b02d
9000aff4:	9000b02d 	.word	0x9000b02d
9000aff8:	9000b025 	.word	0x9000b025
9000affc:	2301      	movs	r3, #1
9000affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b002:	e0bc      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b004:	2304      	movs	r3, #4
9000b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b00a:	e0b8      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b00c:	2308      	movs	r3, #8
9000b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b012:	e0b4      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b014:	2310      	movs	r3, #16
9000b016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b01a:	e0b0      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b01c:	2320      	movs	r3, #32
9000b01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b022:	e0ac      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b024:	2340      	movs	r3, #64	@ 0x40
9000b026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b02a:	e0a8      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b02c:	2380      	movs	r3, #128	@ 0x80
9000b02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b032:	e0a4      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b034:	697b      	ldr	r3, [r7, #20]
9000b036:	681b      	ldr	r3, [r3, #0]
9000b038:	4a8f      	ldr	r2, [pc, #572]	@ (9000b278 <UART_SetConfig+0x6a0>)
9000b03a:	4293      	cmp	r3, r2
9000b03c:	d130      	bne.n	9000b0a0 <UART_SetConfig+0x4c8>
9000b03e:	4b8d      	ldr	r3, [pc, #564]	@ (9000b274 <UART_SetConfig+0x69c>)
9000b040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000b042:	f003 0307 	and.w	r3, r3, #7
9000b046:	2b05      	cmp	r3, #5
9000b048:	d826      	bhi.n	9000b098 <UART_SetConfig+0x4c0>
9000b04a:	a201      	add	r2, pc, #4	@ (adr r2, 9000b050 <UART_SetConfig+0x478>)
9000b04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b050:	9000b069 	.word	0x9000b069
9000b054:	9000b071 	.word	0x9000b071
9000b058:	9000b079 	.word	0x9000b079
9000b05c:	9000b081 	.word	0x9000b081
9000b060:	9000b089 	.word	0x9000b089
9000b064:	9000b091 	.word	0x9000b091
9000b068:	2300      	movs	r3, #0
9000b06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b06e:	e086      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b070:	2304      	movs	r3, #4
9000b072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b076:	e082      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b078:	2308      	movs	r3, #8
9000b07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b07e:	e07e      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b080:	2310      	movs	r3, #16
9000b082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b086:	e07a      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b088:	2320      	movs	r3, #32
9000b08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b08e:	e076      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b090:	2340      	movs	r3, #64	@ 0x40
9000b092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b096:	e072      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b098:	2380      	movs	r3, #128	@ 0x80
9000b09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b09e:	e06e      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b0a0:	697b      	ldr	r3, [r7, #20]
9000b0a2:	681b      	ldr	r3, [r3, #0]
9000b0a4:	4a75      	ldr	r2, [pc, #468]	@ (9000b27c <UART_SetConfig+0x6a4>)
9000b0a6:	4293      	cmp	r3, r2
9000b0a8:	d130      	bne.n	9000b10c <UART_SetConfig+0x534>
9000b0aa:	4b72      	ldr	r3, [pc, #456]	@ (9000b274 <UART_SetConfig+0x69c>)
9000b0ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000b0ae:	f003 0307 	and.w	r3, r3, #7
9000b0b2:	2b05      	cmp	r3, #5
9000b0b4:	d826      	bhi.n	9000b104 <UART_SetConfig+0x52c>
9000b0b6:	a201      	add	r2, pc, #4	@ (adr r2, 9000b0bc <UART_SetConfig+0x4e4>)
9000b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b0bc:	9000b0d5 	.word	0x9000b0d5
9000b0c0:	9000b0dd 	.word	0x9000b0dd
9000b0c4:	9000b0e5 	.word	0x9000b0e5
9000b0c8:	9000b0ed 	.word	0x9000b0ed
9000b0cc:	9000b0f5 	.word	0x9000b0f5
9000b0d0:	9000b0fd 	.word	0x9000b0fd
9000b0d4:	2300      	movs	r3, #0
9000b0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b0da:	e050      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b0dc:	2304      	movs	r3, #4
9000b0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b0e2:	e04c      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b0e4:	2308      	movs	r3, #8
9000b0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b0ea:	e048      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b0ec:	2310      	movs	r3, #16
9000b0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b0f2:	e044      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b0f4:	2320      	movs	r3, #32
9000b0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b0fa:	e040      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b0fc:	2340      	movs	r3, #64	@ 0x40
9000b0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b102:	e03c      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b104:	2380      	movs	r3, #128	@ 0x80
9000b106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b10a:	e038      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b10c:	697b      	ldr	r3, [r7, #20]
9000b10e:	681b      	ldr	r3, [r3, #0]
9000b110:	4a5b      	ldr	r2, [pc, #364]	@ (9000b280 <UART_SetConfig+0x6a8>)
9000b112:	4293      	cmp	r3, r2
9000b114:	d130      	bne.n	9000b178 <UART_SetConfig+0x5a0>
9000b116:	4b57      	ldr	r3, [pc, #348]	@ (9000b274 <UART_SetConfig+0x69c>)
9000b118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000b11a:	f003 0307 	and.w	r3, r3, #7
9000b11e:	2b05      	cmp	r3, #5
9000b120:	d826      	bhi.n	9000b170 <UART_SetConfig+0x598>
9000b122:	a201      	add	r2, pc, #4	@ (adr r2, 9000b128 <UART_SetConfig+0x550>)
9000b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b128:	9000b141 	.word	0x9000b141
9000b12c:	9000b149 	.word	0x9000b149
9000b130:	9000b151 	.word	0x9000b151
9000b134:	9000b159 	.word	0x9000b159
9000b138:	9000b161 	.word	0x9000b161
9000b13c:	9000b169 	.word	0x9000b169
9000b140:	2302      	movs	r3, #2
9000b142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b146:	e01a      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b148:	2304      	movs	r3, #4
9000b14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b14e:	e016      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b150:	2308      	movs	r3, #8
9000b152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b156:	e012      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b158:	2310      	movs	r3, #16
9000b15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b15e:	e00e      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b160:	2320      	movs	r3, #32
9000b162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b166:	e00a      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b168:	2340      	movs	r3, #64	@ 0x40
9000b16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b16e:	e006      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b170:	2380      	movs	r3, #128	@ 0x80
9000b172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000b176:	e002      	b.n	9000b17e <UART_SetConfig+0x5a6>
9000b178:	2380      	movs	r3, #128	@ 0x80
9000b17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000b17e:	697b      	ldr	r3, [r7, #20]
9000b180:	681b      	ldr	r3, [r3, #0]
9000b182:	4a3f      	ldr	r2, [pc, #252]	@ (9000b280 <UART_SetConfig+0x6a8>)
9000b184:	4293      	cmp	r3, r2
9000b186:	f040 80f8 	bne.w	9000b37a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000b18a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000b18e:	2b20      	cmp	r3, #32
9000b190:	dc46      	bgt.n	9000b220 <UART_SetConfig+0x648>
9000b192:	2b02      	cmp	r3, #2
9000b194:	f2c0 8082 	blt.w	9000b29c <UART_SetConfig+0x6c4>
9000b198:	3b02      	subs	r3, #2
9000b19a:	2b1e      	cmp	r3, #30
9000b19c:	d87e      	bhi.n	9000b29c <UART_SetConfig+0x6c4>
9000b19e:	a201      	add	r2, pc, #4	@ (adr r2, 9000b1a4 <UART_SetConfig+0x5cc>)
9000b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b1a4:	9000b227 	.word	0x9000b227
9000b1a8:	9000b29d 	.word	0x9000b29d
9000b1ac:	9000b22f 	.word	0x9000b22f
9000b1b0:	9000b29d 	.word	0x9000b29d
9000b1b4:	9000b29d 	.word	0x9000b29d
9000b1b8:	9000b29d 	.word	0x9000b29d
9000b1bc:	9000b23f 	.word	0x9000b23f
9000b1c0:	9000b29d 	.word	0x9000b29d
9000b1c4:	9000b29d 	.word	0x9000b29d
9000b1c8:	9000b29d 	.word	0x9000b29d
9000b1cc:	9000b29d 	.word	0x9000b29d
9000b1d0:	9000b29d 	.word	0x9000b29d
9000b1d4:	9000b29d 	.word	0x9000b29d
9000b1d8:	9000b29d 	.word	0x9000b29d
9000b1dc:	9000b24f 	.word	0x9000b24f
9000b1e0:	9000b29d 	.word	0x9000b29d
9000b1e4:	9000b29d 	.word	0x9000b29d
9000b1e8:	9000b29d 	.word	0x9000b29d
9000b1ec:	9000b29d 	.word	0x9000b29d
9000b1f0:	9000b29d 	.word	0x9000b29d
9000b1f4:	9000b29d 	.word	0x9000b29d
9000b1f8:	9000b29d 	.word	0x9000b29d
9000b1fc:	9000b29d 	.word	0x9000b29d
9000b200:	9000b29d 	.word	0x9000b29d
9000b204:	9000b29d 	.word	0x9000b29d
9000b208:	9000b29d 	.word	0x9000b29d
9000b20c:	9000b29d 	.word	0x9000b29d
9000b210:	9000b29d 	.word	0x9000b29d
9000b214:	9000b29d 	.word	0x9000b29d
9000b218:	9000b29d 	.word	0x9000b29d
9000b21c:	9000b28f 	.word	0x9000b28f
9000b220:	2b40      	cmp	r3, #64	@ 0x40
9000b222:	d037      	beq.n	9000b294 <UART_SetConfig+0x6bc>
9000b224:	e03a      	b.n	9000b29c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000b226:	f7fe f819 	bl	9000925c <HAL_RCCEx_GetD3PCLK1Freq>
9000b22a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b22c:	e03c      	b.n	9000b2a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000b22e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b232:	4618      	mov	r0, r3
9000b234:	f7fe f828 	bl	90009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000b238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b23c:	e034      	b.n	9000b2a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000b23e:	f107 0318 	add.w	r3, r7, #24
9000b242:	4618      	mov	r0, r3
9000b244:	f7fe f974 	bl	90009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000b248:	69fb      	ldr	r3, [r7, #28]
9000b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b24c:	e02c      	b.n	9000b2a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b24e:	4b09      	ldr	r3, [pc, #36]	@ (9000b274 <UART_SetConfig+0x69c>)
9000b250:	681b      	ldr	r3, [r3, #0]
9000b252:	f003 0320 	and.w	r3, r3, #32
9000b256:	2b00      	cmp	r3, #0
9000b258:	d016      	beq.n	9000b288 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000b25a:	4b06      	ldr	r3, [pc, #24]	@ (9000b274 <UART_SetConfig+0x69c>)
9000b25c:	681b      	ldr	r3, [r3, #0]
9000b25e:	08db      	lsrs	r3, r3, #3
9000b260:	f003 0303 	and.w	r3, r3, #3
9000b264:	4a07      	ldr	r2, [pc, #28]	@ (9000b284 <UART_SetConfig+0x6ac>)
9000b266:	fa22 f303 	lsr.w	r3, r2, r3
9000b26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000b26c:	e01c      	b.n	9000b2a8 <UART_SetConfig+0x6d0>
9000b26e:	bf00      	nop
9000b270:	40011400 	.word	0x40011400
9000b274:	58024400 	.word	0x58024400
9000b278:	40007800 	.word	0x40007800
9000b27c:	40007c00 	.word	0x40007c00
9000b280:	58000c00 	.word	0x58000c00
9000b284:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000b288:	4b9d      	ldr	r3, [pc, #628]	@ (9000b500 <UART_SetConfig+0x928>)
9000b28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b28c:	e00c      	b.n	9000b2a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000b28e:	4b9d      	ldr	r3, [pc, #628]	@ (9000b504 <UART_SetConfig+0x92c>)
9000b290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b292:	e009      	b.n	9000b2a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000b294:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000b298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b29a:	e005      	b.n	9000b2a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000b29c:	2300      	movs	r3, #0
9000b29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000b2a0:	2301      	movs	r3, #1
9000b2a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000b2a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000b2a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b2aa:	2b00      	cmp	r3, #0
9000b2ac:	f000 81de 	beq.w	9000b66c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000b2b0:	697b      	ldr	r3, [r7, #20]
9000b2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b2b4:	4a94      	ldr	r2, [pc, #592]	@ (9000b508 <UART_SetConfig+0x930>)
9000b2b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b2ba:	461a      	mov	r2, r3
9000b2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b2be:	fbb3 f3f2 	udiv	r3, r3, r2
9000b2c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000b2c4:	697b      	ldr	r3, [r7, #20]
9000b2c6:	685a      	ldr	r2, [r3, #4]
9000b2c8:	4613      	mov	r3, r2
9000b2ca:	005b      	lsls	r3, r3, #1
9000b2cc:	4413      	add	r3, r2
9000b2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000b2d0:	429a      	cmp	r2, r3
9000b2d2:	d305      	bcc.n	9000b2e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000b2d4:	697b      	ldr	r3, [r7, #20]
9000b2d6:	685b      	ldr	r3, [r3, #4]
9000b2d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000b2da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000b2dc:	429a      	cmp	r2, r3
9000b2de:	d903      	bls.n	9000b2e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000b2e0:	2301      	movs	r3, #1
9000b2e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000b2e6:	e1c1      	b.n	9000b66c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000b2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b2ea:	2200      	movs	r2, #0
9000b2ec:	60bb      	str	r3, [r7, #8]
9000b2ee:	60fa      	str	r2, [r7, #12]
9000b2f0:	697b      	ldr	r3, [r7, #20]
9000b2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b2f4:	4a84      	ldr	r2, [pc, #528]	@ (9000b508 <UART_SetConfig+0x930>)
9000b2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b2fa:	b29b      	uxth	r3, r3
9000b2fc:	2200      	movs	r2, #0
9000b2fe:	603b      	str	r3, [r7, #0]
9000b300:	607a      	str	r2, [r7, #4]
9000b302:	e9d7 2300 	ldrd	r2, r3, [r7]
9000b306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000b30a:	f7f5 f841 	bl	90000390 <__aeabi_uldivmod>
9000b30e:	4602      	mov	r2, r0
9000b310:	460b      	mov	r3, r1
9000b312:	4610      	mov	r0, r2
9000b314:	4619      	mov	r1, r3
9000b316:	f04f 0200 	mov.w	r2, #0
9000b31a:	f04f 0300 	mov.w	r3, #0
9000b31e:	020b      	lsls	r3, r1, #8
9000b320:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000b324:	0202      	lsls	r2, r0, #8
9000b326:	6979      	ldr	r1, [r7, #20]
9000b328:	6849      	ldr	r1, [r1, #4]
9000b32a:	0849      	lsrs	r1, r1, #1
9000b32c:	2000      	movs	r0, #0
9000b32e:	460c      	mov	r4, r1
9000b330:	4605      	mov	r5, r0
9000b332:	eb12 0804 	adds.w	r8, r2, r4
9000b336:	eb43 0905 	adc.w	r9, r3, r5
9000b33a:	697b      	ldr	r3, [r7, #20]
9000b33c:	685b      	ldr	r3, [r3, #4]
9000b33e:	2200      	movs	r2, #0
9000b340:	469a      	mov	sl, r3
9000b342:	4693      	mov	fp, r2
9000b344:	4652      	mov	r2, sl
9000b346:	465b      	mov	r3, fp
9000b348:	4640      	mov	r0, r8
9000b34a:	4649      	mov	r1, r9
9000b34c:	f7f5 f820 	bl	90000390 <__aeabi_uldivmod>
9000b350:	4602      	mov	r2, r0
9000b352:	460b      	mov	r3, r1
9000b354:	4613      	mov	r3, r2
9000b356:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b35a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000b35e:	d308      	bcc.n	9000b372 <UART_SetConfig+0x79a>
9000b360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000b366:	d204      	bcs.n	9000b372 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000b368:	697b      	ldr	r3, [r7, #20]
9000b36a:	681b      	ldr	r3, [r3, #0]
9000b36c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000b36e:	60da      	str	r2, [r3, #12]
9000b370:	e17c      	b.n	9000b66c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000b372:	2301      	movs	r3, #1
9000b374:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000b378:	e178      	b.n	9000b66c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000b37a:	697b      	ldr	r3, [r7, #20]
9000b37c:	69db      	ldr	r3, [r3, #28]
9000b37e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000b382:	f040 80c5 	bne.w	9000b510 <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000b386:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000b38a:	2b20      	cmp	r3, #32
9000b38c:	dc48      	bgt.n	9000b420 <UART_SetConfig+0x848>
9000b38e:	2b00      	cmp	r3, #0
9000b390:	db7b      	blt.n	9000b48a <UART_SetConfig+0x8b2>
9000b392:	2b20      	cmp	r3, #32
9000b394:	d879      	bhi.n	9000b48a <UART_SetConfig+0x8b2>
9000b396:	a201      	add	r2, pc, #4	@ (adr r2, 9000b39c <UART_SetConfig+0x7c4>)
9000b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b39c:	9000b427 	.word	0x9000b427
9000b3a0:	9000b42f 	.word	0x9000b42f
9000b3a4:	9000b48b 	.word	0x9000b48b
9000b3a8:	9000b48b 	.word	0x9000b48b
9000b3ac:	9000b437 	.word	0x9000b437
9000b3b0:	9000b48b 	.word	0x9000b48b
9000b3b4:	9000b48b 	.word	0x9000b48b
9000b3b8:	9000b48b 	.word	0x9000b48b
9000b3bc:	9000b447 	.word	0x9000b447
9000b3c0:	9000b48b 	.word	0x9000b48b
9000b3c4:	9000b48b 	.word	0x9000b48b
9000b3c8:	9000b48b 	.word	0x9000b48b
9000b3cc:	9000b48b 	.word	0x9000b48b
9000b3d0:	9000b48b 	.word	0x9000b48b
9000b3d4:	9000b48b 	.word	0x9000b48b
9000b3d8:	9000b48b 	.word	0x9000b48b
9000b3dc:	9000b457 	.word	0x9000b457
9000b3e0:	9000b48b 	.word	0x9000b48b
9000b3e4:	9000b48b 	.word	0x9000b48b
9000b3e8:	9000b48b 	.word	0x9000b48b
9000b3ec:	9000b48b 	.word	0x9000b48b
9000b3f0:	9000b48b 	.word	0x9000b48b
9000b3f4:	9000b48b 	.word	0x9000b48b
9000b3f8:	9000b48b 	.word	0x9000b48b
9000b3fc:	9000b48b 	.word	0x9000b48b
9000b400:	9000b48b 	.word	0x9000b48b
9000b404:	9000b48b 	.word	0x9000b48b
9000b408:	9000b48b 	.word	0x9000b48b
9000b40c:	9000b48b 	.word	0x9000b48b
9000b410:	9000b48b 	.word	0x9000b48b
9000b414:	9000b48b 	.word	0x9000b48b
9000b418:	9000b48b 	.word	0x9000b48b
9000b41c:	9000b47d 	.word	0x9000b47d
9000b420:	2b40      	cmp	r3, #64	@ 0x40
9000b422:	d02e      	beq.n	9000b482 <UART_SetConfig+0x8aa>
9000b424:	e031      	b.n	9000b48a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000b426:	f7fc fce3 	bl	90007df0 <HAL_RCC_GetPCLK1Freq>
9000b42a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b42c:	e033      	b.n	9000b496 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000b42e:	f7fc fcf5 	bl	90007e1c <HAL_RCC_GetPCLK2Freq>
9000b432:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b434:	e02f      	b.n	9000b496 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000b436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b43a:	4618      	mov	r0, r3
9000b43c:	f7fd ff24 	bl	90009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000b440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b444:	e027      	b.n	9000b496 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000b446:	f107 0318 	add.w	r3, r7, #24
9000b44a:	4618      	mov	r0, r3
9000b44c:	f7fe f870 	bl	90009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000b450:	69fb      	ldr	r3, [r7, #28]
9000b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b454:	e01f      	b.n	9000b496 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b456:	4b2d      	ldr	r3, [pc, #180]	@ (9000b50c <UART_SetConfig+0x934>)
9000b458:	681b      	ldr	r3, [r3, #0]
9000b45a:	f003 0320 	and.w	r3, r3, #32
9000b45e:	2b00      	cmp	r3, #0
9000b460:	d009      	beq.n	9000b476 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000b462:	4b2a      	ldr	r3, [pc, #168]	@ (9000b50c <UART_SetConfig+0x934>)
9000b464:	681b      	ldr	r3, [r3, #0]
9000b466:	08db      	lsrs	r3, r3, #3
9000b468:	f003 0303 	and.w	r3, r3, #3
9000b46c:	4a24      	ldr	r2, [pc, #144]	@ (9000b500 <UART_SetConfig+0x928>)
9000b46e:	fa22 f303 	lsr.w	r3, r2, r3
9000b472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000b474:	e00f      	b.n	9000b496 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000b476:	4b22      	ldr	r3, [pc, #136]	@ (9000b500 <UART_SetConfig+0x928>)
9000b478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b47a:	e00c      	b.n	9000b496 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000b47c:	4b21      	ldr	r3, [pc, #132]	@ (9000b504 <UART_SetConfig+0x92c>)
9000b47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b480:	e009      	b.n	9000b496 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000b482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000b486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b488:	e005      	b.n	9000b496 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000b48a:	2300      	movs	r3, #0
9000b48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000b48e:	2301      	movs	r3, #1
9000b490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000b494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000b496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b498:	2b00      	cmp	r3, #0
9000b49a:	f000 80e7 	beq.w	9000b66c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000b49e:	697b      	ldr	r3, [r7, #20]
9000b4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b4a2:	4a19      	ldr	r2, [pc, #100]	@ (9000b508 <UART_SetConfig+0x930>)
9000b4a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b4a8:	461a      	mov	r2, r3
9000b4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b4ac:	fbb3 f3f2 	udiv	r3, r3, r2
9000b4b0:	005a      	lsls	r2, r3, #1
9000b4b2:	697b      	ldr	r3, [r7, #20]
9000b4b4:	685b      	ldr	r3, [r3, #4]
9000b4b6:	085b      	lsrs	r3, r3, #1
9000b4b8:	441a      	add	r2, r3
9000b4ba:	697b      	ldr	r3, [r7, #20]
9000b4bc:	685b      	ldr	r3, [r3, #4]
9000b4be:	fbb2 f3f3 	udiv	r3, r2, r3
9000b4c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000b4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b4c6:	2b0f      	cmp	r3, #15
9000b4c8:	d916      	bls.n	9000b4f8 <UART_SetConfig+0x920>
9000b4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b4cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000b4d0:	d212      	bcs.n	9000b4f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000b4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b4d4:	b29b      	uxth	r3, r3
9000b4d6:	f023 030f 	bic.w	r3, r3, #15
9000b4da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000b4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b4de:	085b      	lsrs	r3, r3, #1
9000b4e0:	b29b      	uxth	r3, r3
9000b4e2:	f003 0307 	and.w	r3, r3, #7
9000b4e6:	b29a      	uxth	r2, r3
9000b4e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000b4ea:	4313      	orrs	r3, r2
9000b4ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000b4ee:	697b      	ldr	r3, [r7, #20]
9000b4f0:	681b      	ldr	r3, [r3, #0]
9000b4f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000b4f4:	60da      	str	r2, [r3, #12]
9000b4f6:	e0b9      	b.n	9000b66c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000b4f8:	2301      	movs	r3, #1
9000b4fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000b4fe:	e0b5      	b.n	9000b66c <UART_SetConfig+0xa94>
9000b500:	03d09000 	.word	0x03d09000
9000b504:	003d0900 	.word	0x003d0900
9000b508:	9000e590 	.word	0x9000e590
9000b50c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000b510:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000b514:	2b20      	cmp	r3, #32
9000b516:	dc49      	bgt.n	9000b5ac <UART_SetConfig+0x9d4>
9000b518:	2b00      	cmp	r3, #0
9000b51a:	db7c      	blt.n	9000b616 <UART_SetConfig+0xa3e>
9000b51c:	2b20      	cmp	r3, #32
9000b51e:	d87a      	bhi.n	9000b616 <UART_SetConfig+0xa3e>
9000b520:	a201      	add	r2, pc, #4	@ (adr r2, 9000b528 <UART_SetConfig+0x950>)
9000b522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b526:	bf00      	nop
9000b528:	9000b5b3 	.word	0x9000b5b3
9000b52c:	9000b5bb 	.word	0x9000b5bb
9000b530:	9000b617 	.word	0x9000b617
9000b534:	9000b617 	.word	0x9000b617
9000b538:	9000b5c3 	.word	0x9000b5c3
9000b53c:	9000b617 	.word	0x9000b617
9000b540:	9000b617 	.word	0x9000b617
9000b544:	9000b617 	.word	0x9000b617
9000b548:	9000b5d3 	.word	0x9000b5d3
9000b54c:	9000b617 	.word	0x9000b617
9000b550:	9000b617 	.word	0x9000b617
9000b554:	9000b617 	.word	0x9000b617
9000b558:	9000b617 	.word	0x9000b617
9000b55c:	9000b617 	.word	0x9000b617
9000b560:	9000b617 	.word	0x9000b617
9000b564:	9000b617 	.word	0x9000b617
9000b568:	9000b5e3 	.word	0x9000b5e3
9000b56c:	9000b617 	.word	0x9000b617
9000b570:	9000b617 	.word	0x9000b617
9000b574:	9000b617 	.word	0x9000b617
9000b578:	9000b617 	.word	0x9000b617
9000b57c:	9000b617 	.word	0x9000b617
9000b580:	9000b617 	.word	0x9000b617
9000b584:	9000b617 	.word	0x9000b617
9000b588:	9000b617 	.word	0x9000b617
9000b58c:	9000b617 	.word	0x9000b617
9000b590:	9000b617 	.word	0x9000b617
9000b594:	9000b617 	.word	0x9000b617
9000b598:	9000b617 	.word	0x9000b617
9000b59c:	9000b617 	.word	0x9000b617
9000b5a0:	9000b617 	.word	0x9000b617
9000b5a4:	9000b617 	.word	0x9000b617
9000b5a8:	9000b609 	.word	0x9000b609
9000b5ac:	2b40      	cmp	r3, #64	@ 0x40
9000b5ae:	d02e      	beq.n	9000b60e <UART_SetConfig+0xa36>
9000b5b0:	e031      	b.n	9000b616 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000b5b2:	f7fc fc1d 	bl	90007df0 <HAL_RCC_GetPCLK1Freq>
9000b5b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b5b8:	e033      	b.n	9000b622 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000b5ba:	f7fc fc2f 	bl	90007e1c <HAL_RCC_GetPCLK2Freq>
9000b5be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000b5c0:	e02f      	b.n	9000b622 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000b5c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b5c6:	4618      	mov	r0, r3
9000b5c8:	f7fd fe5e 	bl	90009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000b5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b5d0:	e027      	b.n	9000b622 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000b5d2:	f107 0318 	add.w	r3, r7, #24
9000b5d6:	4618      	mov	r0, r3
9000b5d8:	f7fd ffaa 	bl	90009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000b5dc:	69fb      	ldr	r3, [r7, #28]
9000b5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b5e0:	e01f      	b.n	9000b622 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b5e2:	4b2d      	ldr	r3, [pc, #180]	@ (9000b698 <UART_SetConfig+0xac0>)
9000b5e4:	681b      	ldr	r3, [r3, #0]
9000b5e6:	f003 0320 	and.w	r3, r3, #32
9000b5ea:	2b00      	cmp	r3, #0
9000b5ec:	d009      	beq.n	9000b602 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000b5ee:	4b2a      	ldr	r3, [pc, #168]	@ (9000b698 <UART_SetConfig+0xac0>)
9000b5f0:	681b      	ldr	r3, [r3, #0]
9000b5f2:	08db      	lsrs	r3, r3, #3
9000b5f4:	f003 0303 	and.w	r3, r3, #3
9000b5f8:	4a28      	ldr	r2, [pc, #160]	@ (9000b69c <UART_SetConfig+0xac4>)
9000b5fa:	fa22 f303 	lsr.w	r3, r2, r3
9000b5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000b600:	e00f      	b.n	9000b622 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000b602:	4b26      	ldr	r3, [pc, #152]	@ (9000b69c <UART_SetConfig+0xac4>)
9000b604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b606:	e00c      	b.n	9000b622 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000b608:	4b25      	ldr	r3, [pc, #148]	@ (9000b6a0 <UART_SetConfig+0xac8>)
9000b60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b60c:	e009      	b.n	9000b622 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000b60e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000b612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000b614:	e005      	b.n	9000b622 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000b616:	2300      	movs	r3, #0
9000b618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000b61a:	2301      	movs	r3, #1
9000b61c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000b620:	bf00      	nop
    }

    if (pclk != 0U)
9000b622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b624:	2b00      	cmp	r3, #0
9000b626:	d021      	beq.n	9000b66c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000b628:	697b      	ldr	r3, [r7, #20]
9000b62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000b62c:	4a1d      	ldr	r2, [pc, #116]	@ (9000b6a4 <UART_SetConfig+0xacc>)
9000b62e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000b632:	461a      	mov	r2, r3
9000b634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b636:	fbb3 f2f2 	udiv	r2, r3, r2
9000b63a:	697b      	ldr	r3, [r7, #20]
9000b63c:	685b      	ldr	r3, [r3, #4]
9000b63e:	085b      	lsrs	r3, r3, #1
9000b640:	441a      	add	r2, r3
9000b642:	697b      	ldr	r3, [r7, #20]
9000b644:	685b      	ldr	r3, [r3, #4]
9000b646:	fbb2 f3f3 	udiv	r3, r2, r3
9000b64a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000b64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b64e:	2b0f      	cmp	r3, #15
9000b650:	d909      	bls.n	9000b666 <UART_SetConfig+0xa8e>
9000b652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000b658:	d205      	bcs.n	9000b666 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000b65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b65c:	b29a      	uxth	r2, r3
9000b65e:	697b      	ldr	r3, [r7, #20]
9000b660:	681b      	ldr	r3, [r3, #0]
9000b662:	60da      	str	r2, [r3, #12]
9000b664:	e002      	b.n	9000b66c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000b666:	2301      	movs	r3, #1
9000b668:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000b66c:	697b      	ldr	r3, [r7, #20]
9000b66e:	2201      	movs	r2, #1
9000b670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000b674:	697b      	ldr	r3, [r7, #20]
9000b676:	2201      	movs	r2, #1
9000b678:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000b67c:	697b      	ldr	r3, [r7, #20]
9000b67e:	2200      	movs	r2, #0
9000b680:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000b682:	697b      	ldr	r3, [r7, #20]
9000b684:	2200      	movs	r2, #0
9000b686:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000b688:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000b68c:	4618      	mov	r0, r3
9000b68e:	3748      	adds	r7, #72	@ 0x48
9000b690:	46bd      	mov	sp, r7
9000b692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000b696:	bf00      	nop
9000b698:	58024400 	.word	0x58024400
9000b69c:	03d09000 	.word	0x03d09000
9000b6a0:	003d0900 	.word	0x003d0900
9000b6a4:	9000e590 	.word	0x9000e590

9000b6a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000b6a8:	b480      	push	{r7}
9000b6aa:	b083      	sub	sp, #12
9000b6ac:	af00      	add	r7, sp, #0
9000b6ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000b6b0:	687b      	ldr	r3, [r7, #4]
9000b6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b6b4:	f003 0308 	and.w	r3, r3, #8
9000b6b8:	2b00      	cmp	r3, #0
9000b6ba:	d00a      	beq.n	9000b6d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000b6bc:	687b      	ldr	r3, [r7, #4]
9000b6be:	681b      	ldr	r3, [r3, #0]
9000b6c0:	685b      	ldr	r3, [r3, #4]
9000b6c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000b6c6:	687b      	ldr	r3, [r7, #4]
9000b6c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000b6ca:	687b      	ldr	r3, [r7, #4]
9000b6cc:	681b      	ldr	r3, [r3, #0]
9000b6ce:	430a      	orrs	r2, r1
9000b6d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000b6d2:	687b      	ldr	r3, [r7, #4]
9000b6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b6d6:	f003 0301 	and.w	r3, r3, #1
9000b6da:	2b00      	cmp	r3, #0
9000b6dc:	d00a      	beq.n	9000b6f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000b6de:	687b      	ldr	r3, [r7, #4]
9000b6e0:	681b      	ldr	r3, [r3, #0]
9000b6e2:	685b      	ldr	r3, [r3, #4]
9000b6e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000b6e8:	687b      	ldr	r3, [r7, #4]
9000b6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000b6ec:	687b      	ldr	r3, [r7, #4]
9000b6ee:	681b      	ldr	r3, [r3, #0]
9000b6f0:	430a      	orrs	r2, r1
9000b6f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000b6f4:	687b      	ldr	r3, [r7, #4]
9000b6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b6f8:	f003 0302 	and.w	r3, r3, #2
9000b6fc:	2b00      	cmp	r3, #0
9000b6fe:	d00a      	beq.n	9000b716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000b700:	687b      	ldr	r3, [r7, #4]
9000b702:	681b      	ldr	r3, [r3, #0]
9000b704:	685b      	ldr	r3, [r3, #4]
9000b706:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000b70a:	687b      	ldr	r3, [r7, #4]
9000b70c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000b70e:	687b      	ldr	r3, [r7, #4]
9000b710:	681b      	ldr	r3, [r3, #0]
9000b712:	430a      	orrs	r2, r1
9000b714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000b716:	687b      	ldr	r3, [r7, #4]
9000b718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b71a:	f003 0304 	and.w	r3, r3, #4
9000b71e:	2b00      	cmp	r3, #0
9000b720:	d00a      	beq.n	9000b738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000b722:	687b      	ldr	r3, [r7, #4]
9000b724:	681b      	ldr	r3, [r3, #0]
9000b726:	685b      	ldr	r3, [r3, #4]
9000b728:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000b72c:	687b      	ldr	r3, [r7, #4]
9000b72e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000b730:	687b      	ldr	r3, [r7, #4]
9000b732:	681b      	ldr	r3, [r3, #0]
9000b734:	430a      	orrs	r2, r1
9000b736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000b738:	687b      	ldr	r3, [r7, #4]
9000b73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b73c:	f003 0310 	and.w	r3, r3, #16
9000b740:	2b00      	cmp	r3, #0
9000b742:	d00a      	beq.n	9000b75a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000b744:	687b      	ldr	r3, [r7, #4]
9000b746:	681b      	ldr	r3, [r3, #0]
9000b748:	689b      	ldr	r3, [r3, #8]
9000b74a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000b74e:	687b      	ldr	r3, [r7, #4]
9000b750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000b752:	687b      	ldr	r3, [r7, #4]
9000b754:	681b      	ldr	r3, [r3, #0]
9000b756:	430a      	orrs	r2, r1
9000b758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000b75a:	687b      	ldr	r3, [r7, #4]
9000b75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b75e:	f003 0320 	and.w	r3, r3, #32
9000b762:	2b00      	cmp	r3, #0
9000b764:	d00a      	beq.n	9000b77c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000b766:	687b      	ldr	r3, [r7, #4]
9000b768:	681b      	ldr	r3, [r3, #0]
9000b76a:	689b      	ldr	r3, [r3, #8]
9000b76c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000b770:	687b      	ldr	r3, [r7, #4]
9000b772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000b774:	687b      	ldr	r3, [r7, #4]
9000b776:	681b      	ldr	r3, [r3, #0]
9000b778:	430a      	orrs	r2, r1
9000b77a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000b77c:	687b      	ldr	r3, [r7, #4]
9000b77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b784:	2b00      	cmp	r3, #0
9000b786:	d01a      	beq.n	9000b7be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000b788:	687b      	ldr	r3, [r7, #4]
9000b78a:	681b      	ldr	r3, [r3, #0]
9000b78c:	685b      	ldr	r3, [r3, #4]
9000b78e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000b792:	687b      	ldr	r3, [r7, #4]
9000b794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000b796:	687b      	ldr	r3, [r7, #4]
9000b798:	681b      	ldr	r3, [r3, #0]
9000b79a:	430a      	orrs	r2, r1
9000b79c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000b79e:	687b      	ldr	r3, [r7, #4]
9000b7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000b7a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000b7a6:	d10a      	bne.n	9000b7be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000b7a8:	687b      	ldr	r3, [r7, #4]
9000b7aa:	681b      	ldr	r3, [r3, #0]
9000b7ac:	685b      	ldr	r3, [r3, #4]
9000b7ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000b7b2:	687b      	ldr	r3, [r7, #4]
9000b7b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000b7b6:	687b      	ldr	r3, [r7, #4]
9000b7b8:	681b      	ldr	r3, [r3, #0]
9000b7ba:	430a      	orrs	r2, r1
9000b7bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000b7be:	687b      	ldr	r3, [r7, #4]
9000b7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000b7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b7c6:	2b00      	cmp	r3, #0
9000b7c8:	d00a      	beq.n	9000b7e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000b7ca:	687b      	ldr	r3, [r7, #4]
9000b7cc:	681b      	ldr	r3, [r3, #0]
9000b7ce:	685b      	ldr	r3, [r3, #4]
9000b7d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000b7d4:	687b      	ldr	r3, [r7, #4]
9000b7d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000b7d8:	687b      	ldr	r3, [r7, #4]
9000b7da:	681b      	ldr	r3, [r3, #0]
9000b7dc:	430a      	orrs	r2, r1
9000b7de:	605a      	str	r2, [r3, #4]
  }
}
9000b7e0:	bf00      	nop
9000b7e2:	370c      	adds	r7, #12
9000b7e4:	46bd      	mov	sp, r7
9000b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7ea:	4770      	bx	lr

9000b7ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000b7ec:	b580      	push	{r7, lr}
9000b7ee:	b098      	sub	sp, #96	@ 0x60
9000b7f0:	af02      	add	r7, sp, #8
9000b7f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000b7f4:	687b      	ldr	r3, [r7, #4]
9000b7f6:	2200      	movs	r2, #0
9000b7f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000b7fc:	f7f7 fe96 	bl	9000352c <HAL_GetTick>
9000b800:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000b802:	687b      	ldr	r3, [r7, #4]
9000b804:	681b      	ldr	r3, [r3, #0]
9000b806:	681b      	ldr	r3, [r3, #0]
9000b808:	f003 0308 	and.w	r3, r3, #8
9000b80c:	2b08      	cmp	r3, #8
9000b80e:	d12f      	bne.n	9000b870 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000b810:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000b814:	9300      	str	r3, [sp, #0]
9000b816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000b818:	2200      	movs	r2, #0
9000b81a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000b81e:	6878      	ldr	r0, [r7, #4]
9000b820:	f000 f88e 	bl	9000b940 <UART_WaitOnFlagUntilTimeout>
9000b824:	4603      	mov	r3, r0
9000b826:	2b00      	cmp	r3, #0
9000b828:	d022      	beq.n	9000b870 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000b82a:	687b      	ldr	r3, [r7, #4]
9000b82c:	681b      	ldr	r3, [r3, #0]
9000b82e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b832:	e853 3f00 	ldrex	r3, [r3]
9000b836:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000b838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000b83a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000b83e:	653b      	str	r3, [r7, #80]	@ 0x50
9000b840:	687b      	ldr	r3, [r7, #4]
9000b842:	681b      	ldr	r3, [r3, #0]
9000b844:	461a      	mov	r2, r3
9000b846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000b848:	647b      	str	r3, [r7, #68]	@ 0x44
9000b84a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b84c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000b84e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000b850:	e841 2300 	strex	r3, r2, [r1]
9000b854:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000b856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b858:	2b00      	cmp	r3, #0
9000b85a:	d1e6      	bne.n	9000b82a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000b85c:	687b      	ldr	r3, [r7, #4]
9000b85e:	2220      	movs	r2, #32
9000b860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000b864:	687b      	ldr	r3, [r7, #4]
9000b866:	2200      	movs	r2, #0
9000b868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000b86c:	2303      	movs	r3, #3
9000b86e:	e063      	b.n	9000b938 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000b870:	687b      	ldr	r3, [r7, #4]
9000b872:	681b      	ldr	r3, [r3, #0]
9000b874:	681b      	ldr	r3, [r3, #0]
9000b876:	f003 0304 	and.w	r3, r3, #4
9000b87a:	2b04      	cmp	r3, #4
9000b87c:	d149      	bne.n	9000b912 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000b87e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000b882:	9300      	str	r3, [sp, #0]
9000b884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000b886:	2200      	movs	r2, #0
9000b888:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000b88c:	6878      	ldr	r0, [r7, #4]
9000b88e:	f000 f857 	bl	9000b940 <UART_WaitOnFlagUntilTimeout>
9000b892:	4603      	mov	r3, r0
9000b894:	2b00      	cmp	r3, #0
9000b896:	d03c      	beq.n	9000b912 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000b898:	687b      	ldr	r3, [r7, #4]
9000b89a:	681b      	ldr	r3, [r3, #0]
9000b89c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b8a0:	e853 3f00 	ldrex	r3, [r3]
9000b8a4:	623b      	str	r3, [r7, #32]
   return(result);
9000b8a6:	6a3b      	ldr	r3, [r7, #32]
9000b8a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000b8ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000b8ae:	687b      	ldr	r3, [r7, #4]
9000b8b0:	681b      	ldr	r3, [r3, #0]
9000b8b2:	461a      	mov	r2, r3
9000b8b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000b8b6:	633b      	str	r3, [r7, #48]	@ 0x30
9000b8b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b8ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000b8bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000b8be:	e841 2300 	strex	r3, r2, [r1]
9000b8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000b8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000b8c6:	2b00      	cmp	r3, #0
9000b8c8:	d1e6      	bne.n	9000b898 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000b8ca:	687b      	ldr	r3, [r7, #4]
9000b8cc:	681b      	ldr	r3, [r3, #0]
9000b8ce:	3308      	adds	r3, #8
9000b8d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000b8d2:	693b      	ldr	r3, [r7, #16]
9000b8d4:	e853 3f00 	ldrex	r3, [r3]
9000b8d8:	60fb      	str	r3, [r7, #12]
   return(result);
9000b8da:	68fb      	ldr	r3, [r7, #12]
9000b8dc:	f023 0301 	bic.w	r3, r3, #1
9000b8e0:	64bb      	str	r3, [r7, #72]	@ 0x48
9000b8e2:	687b      	ldr	r3, [r7, #4]
9000b8e4:	681b      	ldr	r3, [r3, #0]
9000b8e6:	3308      	adds	r3, #8
9000b8e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000b8ea:	61fa      	str	r2, [r7, #28]
9000b8ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000b8ee:	69b9      	ldr	r1, [r7, #24]
9000b8f0:	69fa      	ldr	r2, [r7, #28]
9000b8f2:	e841 2300 	strex	r3, r2, [r1]
9000b8f6:	617b      	str	r3, [r7, #20]
   return(result);
9000b8f8:	697b      	ldr	r3, [r7, #20]
9000b8fa:	2b00      	cmp	r3, #0
9000b8fc:	d1e5      	bne.n	9000b8ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000b8fe:	687b      	ldr	r3, [r7, #4]
9000b900:	2220      	movs	r2, #32
9000b902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000b906:	687b      	ldr	r3, [r7, #4]
9000b908:	2200      	movs	r2, #0
9000b90a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000b90e:	2303      	movs	r3, #3
9000b910:	e012      	b.n	9000b938 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000b912:	687b      	ldr	r3, [r7, #4]
9000b914:	2220      	movs	r2, #32
9000b916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000b91a:	687b      	ldr	r3, [r7, #4]
9000b91c:	2220      	movs	r2, #32
9000b91e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000b922:	687b      	ldr	r3, [r7, #4]
9000b924:	2200      	movs	r2, #0
9000b926:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000b928:	687b      	ldr	r3, [r7, #4]
9000b92a:	2200      	movs	r2, #0
9000b92c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000b92e:	687b      	ldr	r3, [r7, #4]
9000b930:	2200      	movs	r2, #0
9000b932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000b936:	2300      	movs	r3, #0
}
9000b938:	4618      	mov	r0, r3
9000b93a:	3758      	adds	r7, #88	@ 0x58
9000b93c:	46bd      	mov	sp, r7
9000b93e:	bd80      	pop	{r7, pc}

9000b940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000b940:	b580      	push	{r7, lr}
9000b942:	b084      	sub	sp, #16
9000b944:	af00      	add	r7, sp, #0
9000b946:	60f8      	str	r0, [r7, #12]
9000b948:	60b9      	str	r1, [r7, #8]
9000b94a:	603b      	str	r3, [r7, #0]
9000b94c:	4613      	mov	r3, r2
9000b94e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000b950:	e04f      	b.n	9000b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000b952:	69bb      	ldr	r3, [r7, #24]
9000b954:	f1b3 3fff 	cmp.w	r3, #4294967295
9000b958:	d04b      	beq.n	9000b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000b95a:	f7f7 fde7 	bl	9000352c <HAL_GetTick>
9000b95e:	4602      	mov	r2, r0
9000b960:	683b      	ldr	r3, [r7, #0]
9000b962:	1ad3      	subs	r3, r2, r3
9000b964:	69ba      	ldr	r2, [r7, #24]
9000b966:	429a      	cmp	r2, r3
9000b968:	d302      	bcc.n	9000b970 <UART_WaitOnFlagUntilTimeout+0x30>
9000b96a:	69bb      	ldr	r3, [r7, #24]
9000b96c:	2b00      	cmp	r3, #0
9000b96e:	d101      	bne.n	9000b974 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000b970:	2303      	movs	r3, #3
9000b972:	e04e      	b.n	9000ba12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000b974:	68fb      	ldr	r3, [r7, #12]
9000b976:	681b      	ldr	r3, [r3, #0]
9000b978:	681b      	ldr	r3, [r3, #0]
9000b97a:	f003 0304 	and.w	r3, r3, #4
9000b97e:	2b00      	cmp	r3, #0
9000b980:	d037      	beq.n	9000b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
9000b982:	68bb      	ldr	r3, [r7, #8]
9000b984:	2b80      	cmp	r3, #128	@ 0x80
9000b986:	d034      	beq.n	9000b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
9000b988:	68bb      	ldr	r3, [r7, #8]
9000b98a:	2b40      	cmp	r3, #64	@ 0x40
9000b98c:	d031      	beq.n	9000b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000b98e:	68fb      	ldr	r3, [r7, #12]
9000b990:	681b      	ldr	r3, [r3, #0]
9000b992:	69db      	ldr	r3, [r3, #28]
9000b994:	f003 0308 	and.w	r3, r3, #8
9000b998:	2b08      	cmp	r3, #8
9000b99a:	d110      	bne.n	9000b9be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000b99c:	68fb      	ldr	r3, [r7, #12]
9000b99e:	681b      	ldr	r3, [r3, #0]
9000b9a0:	2208      	movs	r2, #8
9000b9a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000b9a4:	68f8      	ldr	r0, [r7, #12]
9000b9a6:	f000 f839 	bl	9000ba1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000b9aa:	68fb      	ldr	r3, [r7, #12]
9000b9ac:	2208      	movs	r2, #8
9000b9ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000b9b2:	68fb      	ldr	r3, [r7, #12]
9000b9b4:	2200      	movs	r2, #0
9000b9b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000b9ba:	2301      	movs	r3, #1
9000b9bc:	e029      	b.n	9000ba12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000b9be:	68fb      	ldr	r3, [r7, #12]
9000b9c0:	681b      	ldr	r3, [r3, #0]
9000b9c2:	69db      	ldr	r3, [r3, #28]
9000b9c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000b9c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000b9cc:	d111      	bne.n	9000b9f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000b9ce:	68fb      	ldr	r3, [r7, #12]
9000b9d0:	681b      	ldr	r3, [r3, #0]
9000b9d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000b9d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000b9d8:	68f8      	ldr	r0, [r7, #12]
9000b9da:	f000 f81f 	bl	9000ba1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000b9de:	68fb      	ldr	r3, [r7, #12]
9000b9e0:	2220      	movs	r2, #32
9000b9e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000b9e6:	68fb      	ldr	r3, [r7, #12]
9000b9e8:	2200      	movs	r2, #0
9000b9ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000b9ee:	2303      	movs	r3, #3
9000b9f0:	e00f      	b.n	9000ba12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000b9f2:	68fb      	ldr	r3, [r7, #12]
9000b9f4:	681b      	ldr	r3, [r3, #0]
9000b9f6:	69da      	ldr	r2, [r3, #28]
9000b9f8:	68bb      	ldr	r3, [r7, #8]
9000b9fa:	4013      	ands	r3, r2
9000b9fc:	68ba      	ldr	r2, [r7, #8]
9000b9fe:	429a      	cmp	r2, r3
9000ba00:	bf0c      	ite	eq
9000ba02:	2301      	moveq	r3, #1
9000ba04:	2300      	movne	r3, #0
9000ba06:	b2db      	uxtb	r3, r3
9000ba08:	461a      	mov	r2, r3
9000ba0a:	79fb      	ldrb	r3, [r7, #7]
9000ba0c:	429a      	cmp	r2, r3
9000ba0e:	d0a0      	beq.n	9000b952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000ba10:	2300      	movs	r3, #0
}
9000ba12:	4618      	mov	r0, r3
9000ba14:	3710      	adds	r7, #16
9000ba16:	46bd      	mov	sp, r7
9000ba18:	bd80      	pop	{r7, pc}
	...

9000ba1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000ba1c:	b480      	push	{r7}
9000ba1e:	b095      	sub	sp, #84	@ 0x54
9000ba20:	af00      	add	r7, sp, #0
9000ba22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000ba24:	687b      	ldr	r3, [r7, #4]
9000ba26:	681b      	ldr	r3, [r3, #0]
9000ba28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ba2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000ba2c:	e853 3f00 	ldrex	r3, [r3]
9000ba30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000ba32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000ba34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000ba38:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000ba3a:	687b      	ldr	r3, [r7, #4]
9000ba3c:	681b      	ldr	r3, [r3, #0]
9000ba3e:	461a      	mov	r2, r3
9000ba40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000ba42:	643b      	str	r3, [r7, #64]	@ 0x40
9000ba44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ba46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000ba48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000ba4a:	e841 2300 	strex	r3, r2, [r1]
9000ba4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000ba50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba52:	2b00      	cmp	r3, #0
9000ba54:	d1e6      	bne.n	9000ba24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000ba56:	687b      	ldr	r3, [r7, #4]
9000ba58:	681b      	ldr	r3, [r3, #0]
9000ba5a:	3308      	adds	r3, #8
9000ba5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ba5e:	6a3b      	ldr	r3, [r7, #32]
9000ba60:	e853 3f00 	ldrex	r3, [r3]
9000ba64:	61fb      	str	r3, [r7, #28]
   return(result);
9000ba66:	69fa      	ldr	r2, [r7, #28]
9000ba68:	4b1e      	ldr	r3, [pc, #120]	@ (9000bae4 <UART_EndRxTransfer+0xc8>)
9000ba6a:	4013      	ands	r3, r2
9000ba6c:	64bb      	str	r3, [r7, #72]	@ 0x48
9000ba6e:	687b      	ldr	r3, [r7, #4]
9000ba70:	681b      	ldr	r3, [r3, #0]
9000ba72:	3308      	adds	r3, #8
9000ba74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000ba76:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000ba78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ba7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000ba7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000ba7e:	e841 2300 	strex	r3, r2, [r1]
9000ba82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000ba86:	2b00      	cmp	r3, #0
9000ba88:	d1e5      	bne.n	9000ba56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000ba8a:	687b      	ldr	r3, [r7, #4]
9000ba8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000ba8e:	2b01      	cmp	r3, #1
9000ba90:	d118      	bne.n	9000bac4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000ba92:	687b      	ldr	r3, [r7, #4]
9000ba94:	681b      	ldr	r3, [r3, #0]
9000ba96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ba98:	68fb      	ldr	r3, [r7, #12]
9000ba9a:	e853 3f00 	ldrex	r3, [r3]
9000ba9e:	60bb      	str	r3, [r7, #8]
   return(result);
9000baa0:	68bb      	ldr	r3, [r7, #8]
9000baa2:	f023 0310 	bic.w	r3, r3, #16
9000baa6:	647b      	str	r3, [r7, #68]	@ 0x44
9000baa8:	687b      	ldr	r3, [r7, #4]
9000baaa:	681b      	ldr	r3, [r3, #0]
9000baac:	461a      	mov	r2, r3
9000baae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000bab0:	61bb      	str	r3, [r7, #24]
9000bab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000bab4:	6979      	ldr	r1, [r7, #20]
9000bab6:	69ba      	ldr	r2, [r7, #24]
9000bab8:	e841 2300 	strex	r3, r2, [r1]
9000babc:	613b      	str	r3, [r7, #16]
   return(result);
9000babe:	693b      	ldr	r3, [r7, #16]
9000bac0:	2b00      	cmp	r3, #0
9000bac2:	d1e6      	bne.n	9000ba92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000bac4:	687b      	ldr	r3, [r7, #4]
9000bac6:	2220      	movs	r2, #32
9000bac8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000bacc:	687b      	ldr	r3, [r7, #4]
9000bace:	2200      	movs	r2, #0
9000bad0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000bad2:	687b      	ldr	r3, [r7, #4]
9000bad4:	2200      	movs	r2, #0
9000bad6:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000bad8:	bf00      	nop
9000bada:	3754      	adds	r7, #84	@ 0x54
9000badc:	46bd      	mov	sp, r7
9000bade:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bae2:	4770      	bx	lr
9000bae4:	effffffe 	.word	0xeffffffe

9000bae8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000bae8:	b480      	push	{r7}
9000baea:	b085      	sub	sp, #20
9000baec:	af00      	add	r7, sp, #0
9000baee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000baf0:	687b      	ldr	r3, [r7, #4]
9000baf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000baf6:	2b01      	cmp	r3, #1
9000baf8:	d101      	bne.n	9000bafe <HAL_UARTEx_DisableFifoMode+0x16>
9000bafa:	2302      	movs	r3, #2
9000bafc:	e027      	b.n	9000bb4e <HAL_UARTEx_DisableFifoMode+0x66>
9000bafe:	687b      	ldr	r3, [r7, #4]
9000bb00:	2201      	movs	r2, #1
9000bb02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000bb06:	687b      	ldr	r3, [r7, #4]
9000bb08:	2224      	movs	r2, #36	@ 0x24
9000bb0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000bb0e:	687b      	ldr	r3, [r7, #4]
9000bb10:	681b      	ldr	r3, [r3, #0]
9000bb12:	681b      	ldr	r3, [r3, #0]
9000bb14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000bb16:	687b      	ldr	r3, [r7, #4]
9000bb18:	681b      	ldr	r3, [r3, #0]
9000bb1a:	681a      	ldr	r2, [r3, #0]
9000bb1c:	687b      	ldr	r3, [r7, #4]
9000bb1e:	681b      	ldr	r3, [r3, #0]
9000bb20:	f022 0201 	bic.w	r2, r2, #1
9000bb24:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000bb26:	68fb      	ldr	r3, [r7, #12]
9000bb28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000bb2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000bb2e:	687b      	ldr	r3, [r7, #4]
9000bb30:	2200      	movs	r2, #0
9000bb32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000bb34:	687b      	ldr	r3, [r7, #4]
9000bb36:	681b      	ldr	r3, [r3, #0]
9000bb38:	68fa      	ldr	r2, [r7, #12]
9000bb3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000bb3c:	687b      	ldr	r3, [r7, #4]
9000bb3e:	2220      	movs	r2, #32
9000bb40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000bb44:	687b      	ldr	r3, [r7, #4]
9000bb46:	2200      	movs	r2, #0
9000bb48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000bb4c:	2300      	movs	r3, #0
}
9000bb4e:	4618      	mov	r0, r3
9000bb50:	3714      	adds	r7, #20
9000bb52:	46bd      	mov	sp, r7
9000bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb58:	4770      	bx	lr

9000bb5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000bb5a:	b580      	push	{r7, lr}
9000bb5c:	b084      	sub	sp, #16
9000bb5e:	af00      	add	r7, sp, #0
9000bb60:	6078      	str	r0, [r7, #4]
9000bb62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000bb64:	687b      	ldr	r3, [r7, #4]
9000bb66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000bb6a:	2b01      	cmp	r3, #1
9000bb6c:	d101      	bne.n	9000bb72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000bb6e:	2302      	movs	r3, #2
9000bb70:	e02d      	b.n	9000bbce <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000bb72:	687b      	ldr	r3, [r7, #4]
9000bb74:	2201      	movs	r2, #1
9000bb76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000bb7a:	687b      	ldr	r3, [r7, #4]
9000bb7c:	2224      	movs	r2, #36	@ 0x24
9000bb7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000bb82:	687b      	ldr	r3, [r7, #4]
9000bb84:	681b      	ldr	r3, [r3, #0]
9000bb86:	681b      	ldr	r3, [r3, #0]
9000bb88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000bb8a:	687b      	ldr	r3, [r7, #4]
9000bb8c:	681b      	ldr	r3, [r3, #0]
9000bb8e:	681a      	ldr	r2, [r3, #0]
9000bb90:	687b      	ldr	r3, [r7, #4]
9000bb92:	681b      	ldr	r3, [r3, #0]
9000bb94:	f022 0201 	bic.w	r2, r2, #1
9000bb98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000bb9a:	687b      	ldr	r3, [r7, #4]
9000bb9c:	681b      	ldr	r3, [r3, #0]
9000bb9e:	689b      	ldr	r3, [r3, #8]
9000bba0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000bba4:	687b      	ldr	r3, [r7, #4]
9000bba6:	681b      	ldr	r3, [r3, #0]
9000bba8:	683a      	ldr	r2, [r7, #0]
9000bbaa:	430a      	orrs	r2, r1
9000bbac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000bbae:	6878      	ldr	r0, [r7, #4]
9000bbb0:	f000 f850 	bl	9000bc54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000bbb4:	687b      	ldr	r3, [r7, #4]
9000bbb6:	681b      	ldr	r3, [r3, #0]
9000bbb8:	68fa      	ldr	r2, [r7, #12]
9000bbba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000bbbc:	687b      	ldr	r3, [r7, #4]
9000bbbe:	2220      	movs	r2, #32
9000bbc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000bbc4:	687b      	ldr	r3, [r7, #4]
9000bbc6:	2200      	movs	r2, #0
9000bbc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000bbcc:	2300      	movs	r3, #0
}
9000bbce:	4618      	mov	r0, r3
9000bbd0:	3710      	adds	r7, #16
9000bbd2:	46bd      	mov	sp, r7
9000bbd4:	bd80      	pop	{r7, pc}

9000bbd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000bbd6:	b580      	push	{r7, lr}
9000bbd8:	b084      	sub	sp, #16
9000bbda:	af00      	add	r7, sp, #0
9000bbdc:	6078      	str	r0, [r7, #4]
9000bbde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000bbe0:	687b      	ldr	r3, [r7, #4]
9000bbe2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000bbe6:	2b01      	cmp	r3, #1
9000bbe8:	d101      	bne.n	9000bbee <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000bbea:	2302      	movs	r3, #2
9000bbec:	e02d      	b.n	9000bc4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000bbee:	687b      	ldr	r3, [r7, #4]
9000bbf0:	2201      	movs	r2, #1
9000bbf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000bbf6:	687b      	ldr	r3, [r7, #4]
9000bbf8:	2224      	movs	r2, #36	@ 0x24
9000bbfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000bbfe:	687b      	ldr	r3, [r7, #4]
9000bc00:	681b      	ldr	r3, [r3, #0]
9000bc02:	681b      	ldr	r3, [r3, #0]
9000bc04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000bc06:	687b      	ldr	r3, [r7, #4]
9000bc08:	681b      	ldr	r3, [r3, #0]
9000bc0a:	681a      	ldr	r2, [r3, #0]
9000bc0c:	687b      	ldr	r3, [r7, #4]
9000bc0e:	681b      	ldr	r3, [r3, #0]
9000bc10:	f022 0201 	bic.w	r2, r2, #1
9000bc14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000bc16:	687b      	ldr	r3, [r7, #4]
9000bc18:	681b      	ldr	r3, [r3, #0]
9000bc1a:	689b      	ldr	r3, [r3, #8]
9000bc1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000bc20:	687b      	ldr	r3, [r7, #4]
9000bc22:	681b      	ldr	r3, [r3, #0]
9000bc24:	683a      	ldr	r2, [r7, #0]
9000bc26:	430a      	orrs	r2, r1
9000bc28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000bc2a:	6878      	ldr	r0, [r7, #4]
9000bc2c:	f000 f812 	bl	9000bc54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000bc30:	687b      	ldr	r3, [r7, #4]
9000bc32:	681b      	ldr	r3, [r3, #0]
9000bc34:	68fa      	ldr	r2, [r7, #12]
9000bc36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000bc38:	687b      	ldr	r3, [r7, #4]
9000bc3a:	2220      	movs	r2, #32
9000bc3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000bc40:	687b      	ldr	r3, [r7, #4]
9000bc42:	2200      	movs	r2, #0
9000bc44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000bc48:	2300      	movs	r3, #0
}
9000bc4a:	4618      	mov	r0, r3
9000bc4c:	3710      	adds	r7, #16
9000bc4e:	46bd      	mov	sp, r7
9000bc50:	bd80      	pop	{r7, pc}
	...

9000bc54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000bc54:	b480      	push	{r7}
9000bc56:	b085      	sub	sp, #20
9000bc58:	af00      	add	r7, sp, #0
9000bc5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000bc5c:	687b      	ldr	r3, [r7, #4]
9000bc5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000bc60:	2b00      	cmp	r3, #0
9000bc62:	d108      	bne.n	9000bc76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000bc64:	687b      	ldr	r3, [r7, #4]
9000bc66:	2201      	movs	r2, #1
9000bc68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000bc6c:	687b      	ldr	r3, [r7, #4]
9000bc6e:	2201      	movs	r2, #1
9000bc70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000bc74:	e031      	b.n	9000bcda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000bc76:	2310      	movs	r3, #16
9000bc78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000bc7a:	2310      	movs	r3, #16
9000bc7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000bc7e:	687b      	ldr	r3, [r7, #4]
9000bc80:	681b      	ldr	r3, [r3, #0]
9000bc82:	689b      	ldr	r3, [r3, #8]
9000bc84:	0e5b      	lsrs	r3, r3, #25
9000bc86:	b2db      	uxtb	r3, r3
9000bc88:	f003 0307 	and.w	r3, r3, #7
9000bc8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000bc8e:	687b      	ldr	r3, [r7, #4]
9000bc90:	681b      	ldr	r3, [r3, #0]
9000bc92:	689b      	ldr	r3, [r3, #8]
9000bc94:	0f5b      	lsrs	r3, r3, #29
9000bc96:	b2db      	uxtb	r3, r3
9000bc98:	f003 0307 	and.w	r3, r3, #7
9000bc9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000bc9e:	7bbb      	ldrb	r3, [r7, #14]
9000bca0:	7b3a      	ldrb	r2, [r7, #12]
9000bca2:	4911      	ldr	r1, [pc, #68]	@ (9000bce8 <UARTEx_SetNbDataToProcess+0x94>)
9000bca4:	5c8a      	ldrb	r2, [r1, r2]
9000bca6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000bcaa:	7b3a      	ldrb	r2, [r7, #12]
9000bcac:	490f      	ldr	r1, [pc, #60]	@ (9000bcec <UARTEx_SetNbDataToProcess+0x98>)
9000bcae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000bcb0:	fb93 f3f2 	sdiv	r3, r3, r2
9000bcb4:	b29a      	uxth	r2, r3
9000bcb6:	687b      	ldr	r3, [r7, #4]
9000bcb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000bcbc:	7bfb      	ldrb	r3, [r7, #15]
9000bcbe:	7b7a      	ldrb	r2, [r7, #13]
9000bcc0:	4909      	ldr	r1, [pc, #36]	@ (9000bce8 <UARTEx_SetNbDataToProcess+0x94>)
9000bcc2:	5c8a      	ldrb	r2, [r1, r2]
9000bcc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000bcc8:	7b7a      	ldrb	r2, [r7, #13]
9000bcca:	4908      	ldr	r1, [pc, #32]	@ (9000bcec <UARTEx_SetNbDataToProcess+0x98>)
9000bccc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000bcce:	fb93 f3f2 	sdiv	r3, r3, r2
9000bcd2:	b29a      	uxth	r2, r3
9000bcd4:	687b      	ldr	r3, [r7, #4]
9000bcd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000bcda:	bf00      	nop
9000bcdc:	3714      	adds	r7, #20
9000bcde:	46bd      	mov	sp, r7
9000bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bce4:	4770      	bx	lr
9000bce6:	bf00      	nop
9000bce8:	9000e5a8 	.word	0x9000e5a8
9000bcec:	9000e5b0 	.word	0x9000e5b0

9000bcf0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000bcf0:	b480      	push	{r7}
9000bcf2:	b083      	sub	sp, #12
9000bcf4:	af00      	add	r7, sp, #0
9000bcf6:	6078      	str	r0, [r7, #4]
9000bcf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000bcfa:	683b      	ldr	r3, [r7, #0]
9000bcfc:	681b      	ldr	r3, [r3, #0]
9000bcfe:	2b00      	cmp	r3, #0
9000bd00:	d121      	bne.n	9000bd46 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bd02:	687b      	ldr	r3, [r7, #4]
9000bd04:	681a      	ldr	r2, [r3, #0]
9000bd06:	4b27      	ldr	r3, [pc, #156]	@ (9000bda4 <FMC_SDRAM_Init+0xb4>)
9000bd08:	4013      	ands	r3, r2
9000bd0a:	683a      	ldr	r2, [r7, #0]
9000bd0c:	6851      	ldr	r1, [r2, #4]
9000bd0e:	683a      	ldr	r2, [r7, #0]
9000bd10:	6892      	ldr	r2, [r2, #8]
9000bd12:	4311      	orrs	r1, r2
9000bd14:	683a      	ldr	r2, [r7, #0]
9000bd16:	68d2      	ldr	r2, [r2, #12]
9000bd18:	4311      	orrs	r1, r2
9000bd1a:	683a      	ldr	r2, [r7, #0]
9000bd1c:	6912      	ldr	r2, [r2, #16]
9000bd1e:	4311      	orrs	r1, r2
9000bd20:	683a      	ldr	r2, [r7, #0]
9000bd22:	6952      	ldr	r2, [r2, #20]
9000bd24:	4311      	orrs	r1, r2
9000bd26:	683a      	ldr	r2, [r7, #0]
9000bd28:	6992      	ldr	r2, [r2, #24]
9000bd2a:	4311      	orrs	r1, r2
9000bd2c:	683a      	ldr	r2, [r7, #0]
9000bd2e:	69d2      	ldr	r2, [r2, #28]
9000bd30:	4311      	orrs	r1, r2
9000bd32:	683a      	ldr	r2, [r7, #0]
9000bd34:	6a12      	ldr	r2, [r2, #32]
9000bd36:	4311      	orrs	r1, r2
9000bd38:	683a      	ldr	r2, [r7, #0]
9000bd3a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000bd3c:	430a      	orrs	r2, r1
9000bd3e:	431a      	orrs	r2, r3
9000bd40:	687b      	ldr	r3, [r7, #4]
9000bd42:	601a      	str	r2, [r3, #0]
9000bd44:	e026      	b.n	9000bd94 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000bd46:	687b      	ldr	r3, [r7, #4]
9000bd48:	681b      	ldr	r3, [r3, #0]
9000bd4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000bd4e:	683b      	ldr	r3, [r7, #0]
9000bd50:	69d9      	ldr	r1, [r3, #28]
9000bd52:	683b      	ldr	r3, [r7, #0]
9000bd54:	6a1b      	ldr	r3, [r3, #32]
9000bd56:	4319      	orrs	r1, r3
9000bd58:	683b      	ldr	r3, [r7, #0]
9000bd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bd5c:	430b      	orrs	r3, r1
9000bd5e:	431a      	orrs	r2, r3
9000bd60:	687b      	ldr	r3, [r7, #4]
9000bd62:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000bd64:	687b      	ldr	r3, [r7, #4]
9000bd66:	685a      	ldr	r2, [r3, #4]
9000bd68:	4b0e      	ldr	r3, [pc, #56]	@ (9000bda4 <FMC_SDRAM_Init+0xb4>)
9000bd6a:	4013      	ands	r3, r2
9000bd6c:	683a      	ldr	r2, [r7, #0]
9000bd6e:	6851      	ldr	r1, [r2, #4]
9000bd70:	683a      	ldr	r2, [r7, #0]
9000bd72:	6892      	ldr	r2, [r2, #8]
9000bd74:	4311      	orrs	r1, r2
9000bd76:	683a      	ldr	r2, [r7, #0]
9000bd78:	68d2      	ldr	r2, [r2, #12]
9000bd7a:	4311      	orrs	r1, r2
9000bd7c:	683a      	ldr	r2, [r7, #0]
9000bd7e:	6912      	ldr	r2, [r2, #16]
9000bd80:	4311      	orrs	r1, r2
9000bd82:	683a      	ldr	r2, [r7, #0]
9000bd84:	6952      	ldr	r2, [r2, #20]
9000bd86:	4311      	orrs	r1, r2
9000bd88:	683a      	ldr	r2, [r7, #0]
9000bd8a:	6992      	ldr	r2, [r2, #24]
9000bd8c:	430a      	orrs	r2, r1
9000bd8e:	431a      	orrs	r2, r3
9000bd90:	687b      	ldr	r3, [r7, #4]
9000bd92:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000bd94:	2300      	movs	r3, #0
}
9000bd96:	4618      	mov	r0, r3
9000bd98:	370c      	adds	r7, #12
9000bd9a:	46bd      	mov	sp, r7
9000bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bda0:	4770      	bx	lr
9000bda2:	bf00      	nop
9000bda4:	ffff8000 	.word	0xffff8000

9000bda8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000bda8:	b480      	push	{r7}
9000bdaa:	b085      	sub	sp, #20
9000bdac:	af00      	add	r7, sp, #0
9000bdae:	60f8      	str	r0, [r7, #12]
9000bdb0:	60b9      	str	r1, [r7, #8]
9000bdb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000bdb4:	687b      	ldr	r3, [r7, #4]
9000bdb6:	2b00      	cmp	r3, #0
9000bdb8:	d128      	bne.n	9000be0c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000bdba:	68fb      	ldr	r3, [r7, #12]
9000bdbc:	689b      	ldr	r3, [r3, #8]
9000bdbe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000bdc2:	68bb      	ldr	r3, [r7, #8]
9000bdc4:	681b      	ldr	r3, [r3, #0]
9000bdc6:	1e59      	subs	r1, r3, #1
9000bdc8:	68bb      	ldr	r3, [r7, #8]
9000bdca:	685b      	ldr	r3, [r3, #4]
9000bdcc:	3b01      	subs	r3, #1
9000bdce:	011b      	lsls	r3, r3, #4
9000bdd0:	4319      	orrs	r1, r3
9000bdd2:	68bb      	ldr	r3, [r7, #8]
9000bdd4:	689b      	ldr	r3, [r3, #8]
9000bdd6:	3b01      	subs	r3, #1
9000bdd8:	021b      	lsls	r3, r3, #8
9000bdda:	4319      	orrs	r1, r3
9000bddc:	68bb      	ldr	r3, [r7, #8]
9000bdde:	68db      	ldr	r3, [r3, #12]
9000bde0:	3b01      	subs	r3, #1
9000bde2:	031b      	lsls	r3, r3, #12
9000bde4:	4319      	orrs	r1, r3
9000bde6:	68bb      	ldr	r3, [r7, #8]
9000bde8:	691b      	ldr	r3, [r3, #16]
9000bdea:	3b01      	subs	r3, #1
9000bdec:	041b      	lsls	r3, r3, #16
9000bdee:	4319      	orrs	r1, r3
9000bdf0:	68bb      	ldr	r3, [r7, #8]
9000bdf2:	695b      	ldr	r3, [r3, #20]
9000bdf4:	3b01      	subs	r3, #1
9000bdf6:	051b      	lsls	r3, r3, #20
9000bdf8:	4319      	orrs	r1, r3
9000bdfa:	68bb      	ldr	r3, [r7, #8]
9000bdfc:	699b      	ldr	r3, [r3, #24]
9000bdfe:	3b01      	subs	r3, #1
9000be00:	061b      	lsls	r3, r3, #24
9000be02:	430b      	orrs	r3, r1
9000be04:	431a      	orrs	r2, r3
9000be06:	68fb      	ldr	r3, [r7, #12]
9000be08:	609a      	str	r2, [r3, #8]
9000be0a:	e02d      	b.n	9000be68 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000be0c:	68fb      	ldr	r3, [r7, #12]
9000be0e:	689a      	ldr	r2, [r3, #8]
9000be10:	4b19      	ldr	r3, [pc, #100]	@ (9000be78 <FMC_SDRAM_Timing_Init+0xd0>)
9000be12:	4013      	ands	r3, r2
9000be14:	68ba      	ldr	r2, [r7, #8]
9000be16:	68d2      	ldr	r2, [r2, #12]
9000be18:	3a01      	subs	r2, #1
9000be1a:	0311      	lsls	r1, r2, #12
9000be1c:	68ba      	ldr	r2, [r7, #8]
9000be1e:	6952      	ldr	r2, [r2, #20]
9000be20:	3a01      	subs	r2, #1
9000be22:	0512      	lsls	r2, r2, #20
9000be24:	430a      	orrs	r2, r1
9000be26:	431a      	orrs	r2, r3
9000be28:	68fb      	ldr	r3, [r7, #12]
9000be2a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000be2c:	68fb      	ldr	r3, [r7, #12]
9000be2e:	68db      	ldr	r3, [r3, #12]
9000be30:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000be34:	68bb      	ldr	r3, [r7, #8]
9000be36:	681b      	ldr	r3, [r3, #0]
9000be38:	1e59      	subs	r1, r3, #1
9000be3a:	68bb      	ldr	r3, [r7, #8]
9000be3c:	685b      	ldr	r3, [r3, #4]
9000be3e:	3b01      	subs	r3, #1
9000be40:	011b      	lsls	r3, r3, #4
9000be42:	4319      	orrs	r1, r3
9000be44:	68bb      	ldr	r3, [r7, #8]
9000be46:	689b      	ldr	r3, [r3, #8]
9000be48:	3b01      	subs	r3, #1
9000be4a:	021b      	lsls	r3, r3, #8
9000be4c:	4319      	orrs	r1, r3
9000be4e:	68bb      	ldr	r3, [r7, #8]
9000be50:	691b      	ldr	r3, [r3, #16]
9000be52:	3b01      	subs	r3, #1
9000be54:	041b      	lsls	r3, r3, #16
9000be56:	4319      	orrs	r1, r3
9000be58:	68bb      	ldr	r3, [r7, #8]
9000be5a:	699b      	ldr	r3, [r3, #24]
9000be5c:	3b01      	subs	r3, #1
9000be5e:	061b      	lsls	r3, r3, #24
9000be60:	430b      	orrs	r3, r1
9000be62:	431a      	orrs	r2, r3
9000be64:	68fb      	ldr	r3, [r7, #12]
9000be66:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000be68:	2300      	movs	r3, #0
}
9000be6a:	4618      	mov	r0, r3
9000be6c:	3714      	adds	r7, #20
9000be6e:	46bd      	mov	sp, r7
9000be70:	f85d 7b04 	ldr.w	r7, [sp], #4
9000be74:	4770      	bx	lr
9000be76:	bf00      	nop
9000be78:	ff0f0fff 	.word	0xff0f0fff

9000be7c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000be7c:	b480      	push	{r7}
9000be7e:	b085      	sub	sp, #20
9000be80:	af00      	add	r7, sp, #0
9000be82:	60f8      	str	r0, [r7, #12]
9000be84:	60b9      	str	r1, [r7, #8]
9000be86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000be88:	68fb      	ldr	r3, [r7, #12]
9000be8a:	691a      	ldr	r2, [r3, #16]
9000be8c:	4b0c      	ldr	r3, [pc, #48]	@ (9000bec0 <FMC_SDRAM_SendCommand+0x44>)
9000be8e:	4013      	ands	r3, r2
9000be90:	68ba      	ldr	r2, [r7, #8]
9000be92:	6811      	ldr	r1, [r2, #0]
9000be94:	68ba      	ldr	r2, [r7, #8]
9000be96:	6852      	ldr	r2, [r2, #4]
9000be98:	4311      	orrs	r1, r2
9000be9a:	68ba      	ldr	r2, [r7, #8]
9000be9c:	6892      	ldr	r2, [r2, #8]
9000be9e:	3a01      	subs	r2, #1
9000bea0:	0152      	lsls	r2, r2, #5
9000bea2:	4311      	orrs	r1, r2
9000bea4:	68ba      	ldr	r2, [r7, #8]
9000bea6:	68d2      	ldr	r2, [r2, #12]
9000bea8:	0252      	lsls	r2, r2, #9
9000beaa:	430a      	orrs	r2, r1
9000beac:	431a      	orrs	r2, r3
9000beae:	68fb      	ldr	r3, [r7, #12]
9000beb0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000beb2:	2300      	movs	r3, #0
}
9000beb4:	4618      	mov	r0, r3
9000beb6:	3714      	adds	r7, #20
9000beb8:	46bd      	mov	sp, r7
9000beba:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bebe:	4770      	bx	lr
9000bec0:	ffc00000 	.word	0xffc00000

9000bec4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000bec4:	b480      	push	{r7}
9000bec6:	b083      	sub	sp, #12
9000bec8:	af00      	add	r7, sp, #0
9000beca:	6078      	str	r0, [r7, #4]
9000becc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000bece:	687b      	ldr	r3, [r7, #4]
9000bed0:	695a      	ldr	r2, [r3, #20]
9000bed2:	4b07      	ldr	r3, [pc, #28]	@ (9000bef0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000bed4:	4013      	ands	r3, r2
9000bed6:	683a      	ldr	r2, [r7, #0]
9000bed8:	0052      	lsls	r2, r2, #1
9000beda:	431a      	orrs	r2, r3
9000bedc:	687b      	ldr	r3, [r7, #4]
9000bede:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000bee0:	2300      	movs	r3, #0
}
9000bee2:	4618      	mov	r0, r3
9000bee4:	370c      	adds	r7, #12
9000bee6:	46bd      	mov	sp, r7
9000bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000beec:	4770      	bx	lr
9000beee:	bf00      	nop
9000bef0:	ffffc001 	.word	0xffffc001

9000bef4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000bef4:	b480      	push	{r7}
9000bef6:	b083      	sub	sp, #12
9000bef8:	af00      	add	r7, sp, #0
9000befa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000befc:	687b      	ldr	r3, [r7, #4]
9000befe:	689b      	ldr	r3, [r3, #8]
9000bf00:	f043 0201 	orr.w	r2, r3, #1
9000bf04:	687b      	ldr	r3, [r7, #4]
9000bf06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000bf08:	2300      	movs	r3, #0
}
9000bf0a:	4618      	mov	r0, r3
9000bf0c:	370c      	adds	r7, #12
9000bf0e:	46bd      	mov	sp, r7
9000bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf14:	4770      	bx	lr

9000bf16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000bf16:	b480      	push	{r7}
9000bf18:	b083      	sub	sp, #12
9000bf1a:	af00      	add	r7, sp, #0
9000bf1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000bf1e:	687b      	ldr	r3, [r7, #4]
9000bf20:	689b      	ldr	r3, [r3, #8]
9000bf22:	f023 0201 	bic.w	r2, r3, #1
9000bf26:	687b      	ldr	r3, [r7, #4]
9000bf28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000bf2a:	2300      	movs	r3, #0
}
9000bf2c:	4618      	mov	r0, r3
9000bf2e:	370c      	adds	r7, #12
9000bf30:	46bd      	mov	sp, r7
9000bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf36:	4770      	bx	lr

9000bf38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000bf38:	b480      	push	{r7}
9000bf3a:	b085      	sub	sp, #20
9000bf3c:	af00      	add	r7, sp, #0
9000bf3e:	6078      	str	r0, [r7, #4]
9000bf40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000bf42:	2300      	movs	r3, #0
9000bf44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000bf46:	68fb      	ldr	r3, [r7, #12]
9000bf48:	3301      	adds	r3, #1
9000bf4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000bf4c:	68fb      	ldr	r3, [r7, #12]
9000bf4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000bf52:	d901      	bls.n	9000bf58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000bf54:	2303      	movs	r3, #3
9000bf56:	e01b      	b.n	9000bf90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000bf58:	687b      	ldr	r3, [r7, #4]
9000bf5a:	691b      	ldr	r3, [r3, #16]
9000bf5c:	2b00      	cmp	r3, #0
9000bf5e:	daf2      	bge.n	9000bf46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000bf60:	2300      	movs	r3, #0
9000bf62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000bf64:	683b      	ldr	r3, [r7, #0]
9000bf66:	019b      	lsls	r3, r3, #6
9000bf68:	f043 0220 	orr.w	r2, r3, #32
9000bf6c:	687b      	ldr	r3, [r7, #4]
9000bf6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000bf70:	68fb      	ldr	r3, [r7, #12]
9000bf72:	3301      	adds	r3, #1
9000bf74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000bf76:	68fb      	ldr	r3, [r7, #12]
9000bf78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000bf7c:	d901      	bls.n	9000bf82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000bf7e:	2303      	movs	r3, #3
9000bf80:	e006      	b.n	9000bf90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000bf82:	687b      	ldr	r3, [r7, #4]
9000bf84:	691b      	ldr	r3, [r3, #16]
9000bf86:	f003 0320 	and.w	r3, r3, #32
9000bf8a:	2b20      	cmp	r3, #32
9000bf8c:	d0f0      	beq.n	9000bf70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000bf8e:	2300      	movs	r3, #0
}
9000bf90:	4618      	mov	r0, r3
9000bf92:	3714      	adds	r7, #20
9000bf94:	46bd      	mov	sp, r7
9000bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf9a:	4770      	bx	lr

9000bf9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000bf9c:	b480      	push	{r7}
9000bf9e:	b085      	sub	sp, #20
9000bfa0:	af00      	add	r7, sp, #0
9000bfa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000bfa4:	2300      	movs	r3, #0
9000bfa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000bfa8:	68fb      	ldr	r3, [r7, #12]
9000bfaa:	3301      	adds	r3, #1
9000bfac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000bfae:	68fb      	ldr	r3, [r7, #12]
9000bfb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000bfb4:	d901      	bls.n	9000bfba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000bfb6:	2303      	movs	r3, #3
9000bfb8:	e018      	b.n	9000bfec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000bfba:	687b      	ldr	r3, [r7, #4]
9000bfbc:	691b      	ldr	r3, [r3, #16]
9000bfbe:	2b00      	cmp	r3, #0
9000bfc0:	daf2      	bge.n	9000bfa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000bfc2:	2300      	movs	r3, #0
9000bfc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000bfc6:	687b      	ldr	r3, [r7, #4]
9000bfc8:	2210      	movs	r2, #16
9000bfca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000bfcc:	68fb      	ldr	r3, [r7, #12]
9000bfce:	3301      	adds	r3, #1
9000bfd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000bfd2:	68fb      	ldr	r3, [r7, #12]
9000bfd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000bfd8:	d901      	bls.n	9000bfde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000bfda:	2303      	movs	r3, #3
9000bfdc:	e006      	b.n	9000bfec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000bfde:	687b      	ldr	r3, [r7, #4]
9000bfe0:	691b      	ldr	r3, [r3, #16]
9000bfe2:	f003 0310 	and.w	r3, r3, #16
9000bfe6:	2b10      	cmp	r3, #16
9000bfe8:	d0f0      	beq.n	9000bfcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000bfea:	2300      	movs	r3, #0
}
9000bfec:	4618      	mov	r0, r3
9000bfee:	3714      	adds	r7, #20
9000bff0:	46bd      	mov	sp, r7
9000bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bff6:	4770      	bx	lr

9000bff8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000bff8:	b480      	push	{r7}
9000bffa:	b08b      	sub	sp, #44	@ 0x2c
9000bffc:	af00      	add	r7, sp, #0
9000bffe:	60f8      	str	r0, [r7, #12]
9000c000:	60b9      	str	r1, [r7, #8]
9000c002:	4613      	mov	r3, r2
9000c004:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c006:	68fb      	ldr	r3, [r7, #12]
9000c008:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000c00a:	68bb      	ldr	r3, [r7, #8]
9000c00c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000c00e:	88fb      	ldrh	r3, [r7, #6]
9000c010:	089b      	lsrs	r3, r3, #2
9000c012:	b29b      	uxth	r3, r3
9000c014:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000c016:	88fb      	ldrh	r3, [r7, #6]
9000c018:	f003 0303 	and.w	r3, r3, #3
9000c01c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000c01e:	2300      	movs	r3, #0
9000c020:	623b      	str	r3, [r7, #32]
9000c022:	e014      	b.n	9000c04e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000c024:	69bb      	ldr	r3, [r7, #24]
9000c026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000c02a:	681a      	ldr	r2, [r3, #0]
9000c02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c02e:	601a      	str	r2, [r3, #0]
    pDest++;
9000c030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c032:	3301      	adds	r3, #1
9000c034:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000c036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c038:	3301      	adds	r3, #1
9000c03a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000c03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c03e:	3301      	adds	r3, #1
9000c040:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000c042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c044:	3301      	adds	r3, #1
9000c046:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000c048:	6a3b      	ldr	r3, [r7, #32]
9000c04a:	3301      	adds	r3, #1
9000c04c:	623b      	str	r3, [r7, #32]
9000c04e:	6a3a      	ldr	r2, [r7, #32]
9000c050:	697b      	ldr	r3, [r7, #20]
9000c052:	429a      	cmp	r2, r3
9000c054:	d3e6      	bcc.n	9000c024 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000c056:	8bfb      	ldrh	r3, [r7, #30]
9000c058:	2b00      	cmp	r3, #0
9000c05a:	d01e      	beq.n	9000c09a <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000c05c:	2300      	movs	r3, #0
9000c05e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000c060:	69bb      	ldr	r3, [r7, #24]
9000c062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000c066:	461a      	mov	r2, r3
9000c068:	f107 0310 	add.w	r3, r7, #16
9000c06c:	6812      	ldr	r2, [r2, #0]
9000c06e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000c070:	693a      	ldr	r2, [r7, #16]
9000c072:	6a3b      	ldr	r3, [r7, #32]
9000c074:	b2db      	uxtb	r3, r3
9000c076:	00db      	lsls	r3, r3, #3
9000c078:	fa22 f303 	lsr.w	r3, r2, r3
9000c07c:	b2da      	uxtb	r2, r3
9000c07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c080:	701a      	strb	r2, [r3, #0]
      i++;
9000c082:	6a3b      	ldr	r3, [r7, #32]
9000c084:	3301      	adds	r3, #1
9000c086:	623b      	str	r3, [r7, #32]
      pDest++;
9000c088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000c08a:	3301      	adds	r3, #1
9000c08c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000c08e:	8bfb      	ldrh	r3, [r7, #30]
9000c090:	3b01      	subs	r3, #1
9000c092:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000c094:	8bfb      	ldrh	r3, [r7, #30]
9000c096:	2b00      	cmp	r3, #0
9000c098:	d1ea      	bne.n	9000c070 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000c09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000c09c:	4618      	mov	r0, r3
9000c09e:	372c      	adds	r7, #44	@ 0x2c
9000c0a0:	46bd      	mov	sp, r7
9000c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c0a6:	4770      	bx	lr

9000c0a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000c0a8:	b480      	push	{r7}
9000c0aa:	b085      	sub	sp, #20
9000c0ac:	af00      	add	r7, sp, #0
9000c0ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000c0b0:	687b      	ldr	r3, [r7, #4]
9000c0b2:	695b      	ldr	r3, [r3, #20]
9000c0b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000c0b6:	687b      	ldr	r3, [r7, #4]
9000c0b8:	699b      	ldr	r3, [r3, #24]
9000c0ba:	68fa      	ldr	r2, [r7, #12]
9000c0bc:	4013      	ands	r3, r2
9000c0be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000c0c0:	68fb      	ldr	r3, [r7, #12]
}
9000c0c2:	4618      	mov	r0, r3
9000c0c4:	3714      	adds	r7, #20
9000c0c6:	46bd      	mov	sp, r7
9000c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c0cc:	4770      	bx	lr

9000c0ce <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000c0ce:	b480      	push	{r7}
9000c0d0:	b085      	sub	sp, #20
9000c0d2:	af00      	add	r7, sp, #0
9000c0d4:	6078      	str	r0, [r7, #4]
9000c0d6:	460b      	mov	r3, r1
9000c0d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c0da:	687b      	ldr	r3, [r7, #4]
9000c0dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000c0de:	78fb      	ldrb	r3, [r7, #3]
9000c0e0:	015a      	lsls	r2, r3, #5
9000c0e2:	68fb      	ldr	r3, [r7, #12]
9000c0e4:	4413      	add	r3, r2
9000c0e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c0ea:	689b      	ldr	r3, [r3, #8]
9000c0ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000c0ee:	78fb      	ldrb	r3, [r7, #3]
9000c0f0:	015a      	lsls	r2, r3, #5
9000c0f2:	68fb      	ldr	r3, [r7, #12]
9000c0f4:	4413      	add	r3, r2
9000c0f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c0fa:	68db      	ldr	r3, [r3, #12]
9000c0fc:	68ba      	ldr	r2, [r7, #8]
9000c0fe:	4013      	ands	r3, r2
9000c100:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000c102:	68bb      	ldr	r3, [r7, #8]
}
9000c104:	4618      	mov	r0, r3
9000c106:	3714      	adds	r7, #20
9000c108:	46bd      	mov	sp, r7
9000c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c10e:	4770      	bx	lr

9000c110 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000c110:	b480      	push	{r7}
9000c112:	b083      	sub	sp, #12
9000c114:	af00      	add	r7, sp, #0
9000c116:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000c118:	687b      	ldr	r3, [r7, #4]
9000c11a:	695b      	ldr	r3, [r3, #20]
9000c11c:	f003 0301 	and.w	r3, r3, #1
}
9000c120:	4618      	mov	r0, r3
9000c122:	370c      	adds	r7, #12
9000c124:	46bd      	mov	sp, r7
9000c126:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c12a:	4770      	bx	lr

9000c12c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000c12c:	b480      	push	{r7}
9000c12e:	b085      	sub	sp, #20
9000c130:	af00      	add	r7, sp, #0
9000c132:	6078      	str	r0, [r7, #4]
9000c134:	460b      	mov	r3, r1
9000c136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c138:	687b      	ldr	r3, [r7, #4]
9000c13a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000c13c:	68fb      	ldr	r3, [r7, #12]
9000c13e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c142:	681b      	ldr	r3, [r3, #0]
9000c144:	68fa      	ldr	r2, [r7, #12]
9000c146:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000c14a:	f023 0303 	bic.w	r3, r3, #3
9000c14e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000c150:	68fb      	ldr	r3, [r7, #12]
9000c152:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c156:	681a      	ldr	r2, [r3, #0]
9000c158:	78fb      	ldrb	r3, [r7, #3]
9000c15a:	f003 0303 	and.w	r3, r3, #3
9000c15e:	68f9      	ldr	r1, [r7, #12]
9000c160:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000c164:	4313      	orrs	r3, r2
9000c166:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000c168:	78fb      	ldrb	r3, [r7, #3]
9000c16a:	2b01      	cmp	r3, #1
9000c16c:	d107      	bne.n	9000c17e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000c16e:	68fb      	ldr	r3, [r7, #12]
9000c170:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c174:	461a      	mov	r2, r3
9000c176:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000c17a:	6053      	str	r3, [r2, #4]
9000c17c:	e00c      	b.n	9000c198 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000c17e:	78fb      	ldrb	r3, [r7, #3]
9000c180:	2b02      	cmp	r3, #2
9000c182:	d107      	bne.n	9000c194 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000c184:	68fb      	ldr	r3, [r7, #12]
9000c186:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c18a:	461a      	mov	r2, r3
9000c18c:	f241 7370 	movw	r3, #6000	@ 0x1770
9000c190:	6053      	str	r3, [r2, #4]
9000c192:	e001      	b.n	9000c198 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000c194:	2301      	movs	r3, #1
9000c196:	e000      	b.n	9000c19a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000c198:	2300      	movs	r3, #0
}
9000c19a:	4618      	mov	r0, r3
9000c19c:	3714      	adds	r7, #20
9000c19e:	46bd      	mov	sp, r7
9000c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c1a4:	4770      	bx	lr

9000c1a6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000c1a6:	b480      	push	{r7}
9000c1a8:	b085      	sub	sp, #20
9000c1aa:	af00      	add	r7, sp, #0
9000c1ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c1ae:	687b      	ldr	r3, [r7, #4]
9000c1b0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000c1b2:	68fb      	ldr	r3, [r7, #12]
9000c1b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c1b8:	695b      	ldr	r3, [r3, #20]
9000c1ba:	b29b      	uxth	r3, r3
}
9000c1bc:	4618      	mov	r0, r3
9000c1be:	3714      	adds	r7, #20
9000c1c0:	46bd      	mov	sp, r7
9000c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c1c6:	4770      	bx	lr

9000c1c8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000c1c8:	b480      	push	{r7}
9000c1ca:	b089      	sub	sp, #36	@ 0x24
9000c1cc:	af00      	add	r7, sp, #0
9000c1ce:	6078      	str	r0, [r7, #4]
9000c1d0:	460b      	mov	r3, r1
9000c1d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c1d4:	687b      	ldr	r3, [r7, #4]
9000c1d6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000c1d8:	78fb      	ldrb	r3, [r7, #3]
9000c1da:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000c1dc:	2300      	movs	r3, #0
9000c1de:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000c1e0:	69bb      	ldr	r3, [r7, #24]
9000c1e2:	015a      	lsls	r2, r3, #5
9000c1e4:	69fb      	ldr	r3, [r7, #28]
9000c1e6:	4413      	add	r3, r2
9000c1e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c1ec:	681b      	ldr	r3, [r3, #0]
9000c1ee:	0c9b      	lsrs	r3, r3, #18
9000c1f0:	f003 0303 	and.w	r3, r3, #3
9000c1f4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000c1f6:	69bb      	ldr	r3, [r7, #24]
9000c1f8:	015a      	lsls	r2, r3, #5
9000c1fa:	69fb      	ldr	r3, [r7, #28]
9000c1fc:	4413      	add	r3, r2
9000c1fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c202:	681b      	ldr	r3, [r3, #0]
9000c204:	0fdb      	lsrs	r3, r3, #31
9000c206:	f003 0301 	and.w	r3, r3, #1
9000c20a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000c20c:	69bb      	ldr	r3, [r7, #24]
9000c20e:	015a      	lsls	r2, r3, #5
9000c210:	69fb      	ldr	r3, [r7, #28]
9000c212:	4413      	add	r3, r2
9000c214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c218:	685b      	ldr	r3, [r3, #4]
9000c21a:	0fdb      	lsrs	r3, r3, #31
9000c21c:	f003 0301 	and.w	r3, r3, #1
9000c220:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000c222:	687b      	ldr	r3, [r7, #4]
9000c224:	689b      	ldr	r3, [r3, #8]
9000c226:	f003 0320 	and.w	r3, r3, #32
9000c22a:	2b20      	cmp	r3, #32
9000c22c:	d10d      	bne.n	9000c24a <USB_HC_Halt+0x82>
9000c22e:	68fb      	ldr	r3, [r7, #12]
9000c230:	2b00      	cmp	r3, #0
9000c232:	d10a      	bne.n	9000c24a <USB_HC_Halt+0x82>
9000c234:	693b      	ldr	r3, [r7, #16]
9000c236:	2b00      	cmp	r3, #0
9000c238:	d005      	beq.n	9000c246 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000c23a:	697b      	ldr	r3, [r7, #20]
9000c23c:	2b01      	cmp	r3, #1
9000c23e:	d002      	beq.n	9000c246 <USB_HC_Halt+0x7e>
9000c240:	697b      	ldr	r3, [r7, #20]
9000c242:	2b03      	cmp	r3, #3
9000c244:	d101      	bne.n	9000c24a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000c246:	2300      	movs	r3, #0
9000c248:	e0d8      	b.n	9000c3fc <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000c24a:	697b      	ldr	r3, [r7, #20]
9000c24c:	2b00      	cmp	r3, #0
9000c24e:	d002      	beq.n	9000c256 <USB_HC_Halt+0x8e>
9000c250:	697b      	ldr	r3, [r7, #20]
9000c252:	2b02      	cmp	r3, #2
9000c254:	d173      	bne.n	9000c33e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000c256:	69bb      	ldr	r3, [r7, #24]
9000c258:	015a      	lsls	r2, r3, #5
9000c25a:	69fb      	ldr	r3, [r7, #28]
9000c25c:	4413      	add	r3, r2
9000c25e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c262:	681b      	ldr	r3, [r3, #0]
9000c264:	69ba      	ldr	r2, [r7, #24]
9000c266:	0151      	lsls	r1, r2, #5
9000c268:	69fa      	ldr	r2, [r7, #28]
9000c26a:	440a      	add	r2, r1
9000c26c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c270:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c274:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c276:	687b      	ldr	r3, [r7, #4]
9000c278:	689b      	ldr	r3, [r3, #8]
9000c27a:	f003 0320 	and.w	r3, r3, #32
9000c27e:	2b00      	cmp	r3, #0
9000c280:	d14a      	bne.n	9000c318 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000c282:	687b      	ldr	r3, [r7, #4]
9000c284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000c286:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000c28a:	2b00      	cmp	r3, #0
9000c28c:	d133      	bne.n	9000c2f6 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000c28e:	69bb      	ldr	r3, [r7, #24]
9000c290:	015a      	lsls	r2, r3, #5
9000c292:	69fb      	ldr	r3, [r7, #28]
9000c294:	4413      	add	r3, r2
9000c296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c29a:	681b      	ldr	r3, [r3, #0]
9000c29c:	69ba      	ldr	r2, [r7, #24]
9000c29e:	0151      	lsls	r1, r2, #5
9000c2a0:	69fa      	ldr	r2, [r7, #28]
9000c2a2:	440a      	add	r2, r1
9000c2a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c2a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000c2ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c2ae:	69bb      	ldr	r3, [r7, #24]
9000c2b0:	015a      	lsls	r2, r3, #5
9000c2b2:	69fb      	ldr	r3, [r7, #28]
9000c2b4:	4413      	add	r3, r2
9000c2b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c2ba:	681b      	ldr	r3, [r3, #0]
9000c2bc:	69ba      	ldr	r2, [r7, #24]
9000c2be:	0151      	lsls	r1, r2, #5
9000c2c0:	69fa      	ldr	r2, [r7, #28]
9000c2c2:	440a      	add	r2, r1
9000c2c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c2c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c2cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000c2ce:	68bb      	ldr	r3, [r7, #8]
9000c2d0:	3301      	adds	r3, #1
9000c2d2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000c2d4:	68bb      	ldr	r3, [r7, #8]
9000c2d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000c2da:	d82e      	bhi.n	9000c33a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000c2dc:	69bb      	ldr	r3, [r7, #24]
9000c2de:	015a      	lsls	r2, r3, #5
9000c2e0:	69fb      	ldr	r3, [r7, #28]
9000c2e2:	4413      	add	r3, r2
9000c2e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c2e8:	681b      	ldr	r3, [r3, #0]
9000c2ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000c2ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000c2f2:	d0ec      	beq.n	9000c2ce <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c2f4:	e081      	b.n	9000c3fa <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c2f6:	69bb      	ldr	r3, [r7, #24]
9000c2f8:	015a      	lsls	r2, r3, #5
9000c2fa:	69fb      	ldr	r3, [r7, #28]
9000c2fc:	4413      	add	r3, r2
9000c2fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c302:	681b      	ldr	r3, [r3, #0]
9000c304:	69ba      	ldr	r2, [r7, #24]
9000c306:	0151      	lsls	r1, r2, #5
9000c308:	69fa      	ldr	r2, [r7, #28]
9000c30a:	440a      	add	r2, r1
9000c30c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c310:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c314:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c316:	e070      	b.n	9000c3fa <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c318:	69bb      	ldr	r3, [r7, #24]
9000c31a:	015a      	lsls	r2, r3, #5
9000c31c:	69fb      	ldr	r3, [r7, #28]
9000c31e:	4413      	add	r3, r2
9000c320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c324:	681b      	ldr	r3, [r3, #0]
9000c326:	69ba      	ldr	r2, [r7, #24]
9000c328:	0151      	lsls	r1, r2, #5
9000c32a:	69fa      	ldr	r2, [r7, #28]
9000c32c:	440a      	add	r2, r1
9000c32e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c332:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c336:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c338:	e05f      	b.n	9000c3fa <USB_HC_Halt+0x232>
            break;
9000c33a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000c33c:	e05d      	b.n	9000c3fa <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000c33e:	69bb      	ldr	r3, [r7, #24]
9000c340:	015a      	lsls	r2, r3, #5
9000c342:	69fb      	ldr	r3, [r7, #28]
9000c344:	4413      	add	r3, r2
9000c346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c34a:	681b      	ldr	r3, [r3, #0]
9000c34c:	69ba      	ldr	r2, [r7, #24]
9000c34e:	0151      	lsls	r1, r2, #5
9000c350:	69fa      	ldr	r2, [r7, #28]
9000c352:	440a      	add	r2, r1
9000c354:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c358:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c35c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000c35e:	69fb      	ldr	r3, [r7, #28]
9000c360:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c364:	691b      	ldr	r3, [r3, #16]
9000c366:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000c36a:	2b00      	cmp	r3, #0
9000c36c:	d133      	bne.n	9000c3d6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000c36e:	69bb      	ldr	r3, [r7, #24]
9000c370:	015a      	lsls	r2, r3, #5
9000c372:	69fb      	ldr	r3, [r7, #28]
9000c374:	4413      	add	r3, r2
9000c376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c37a:	681b      	ldr	r3, [r3, #0]
9000c37c:	69ba      	ldr	r2, [r7, #24]
9000c37e:	0151      	lsls	r1, r2, #5
9000c380:	69fa      	ldr	r2, [r7, #28]
9000c382:	440a      	add	r2, r1
9000c384:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000c38c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c38e:	69bb      	ldr	r3, [r7, #24]
9000c390:	015a      	lsls	r2, r3, #5
9000c392:	69fb      	ldr	r3, [r7, #28]
9000c394:	4413      	add	r3, r2
9000c396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c39a:	681b      	ldr	r3, [r3, #0]
9000c39c:	69ba      	ldr	r2, [r7, #24]
9000c39e:	0151      	lsls	r1, r2, #5
9000c3a0:	69fa      	ldr	r2, [r7, #28]
9000c3a2:	440a      	add	r2, r1
9000c3a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c3a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c3ac:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000c3ae:	68bb      	ldr	r3, [r7, #8]
9000c3b0:	3301      	adds	r3, #1
9000c3b2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000c3b4:	68bb      	ldr	r3, [r7, #8]
9000c3b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000c3ba:	d81d      	bhi.n	9000c3f8 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000c3bc:	69bb      	ldr	r3, [r7, #24]
9000c3be:	015a      	lsls	r2, r3, #5
9000c3c0:	69fb      	ldr	r3, [r7, #28]
9000c3c2:	4413      	add	r3, r2
9000c3c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c3c8:	681b      	ldr	r3, [r3, #0]
9000c3ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000c3ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000c3d2:	d0ec      	beq.n	9000c3ae <USB_HC_Halt+0x1e6>
9000c3d4:	e011      	b.n	9000c3fa <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000c3d6:	69bb      	ldr	r3, [r7, #24]
9000c3d8:	015a      	lsls	r2, r3, #5
9000c3da:	69fb      	ldr	r3, [r7, #28]
9000c3dc:	4413      	add	r3, r2
9000c3de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c3e2:	681b      	ldr	r3, [r3, #0]
9000c3e4:	69ba      	ldr	r2, [r7, #24]
9000c3e6:	0151      	lsls	r1, r2, #5
9000c3e8:	69fa      	ldr	r2, [r7, #28]
9000c3ea:	440a      	add	r2, r1
9000c3ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000c3f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c3f4:	6013      	str	r3, [r2, #0]
9000c3f6:	e000      	b.n	9000c3fa <USB_HC_Halt+0x232>
          break;
9000c3f8:	bf00      	nop
    }
  }

  return HAL_OK;
9000c3fa:	2300      	movs	r3, #0
}
9000c3fc:	4618      	mov	r0, r3
9000c3fe:	3724      	adds	r7, #36	@ 0x24
9000c400:	46bd      	mov	sp, r7
9000c402:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c406:	4770      	bx	lr

9000c408 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000c408:	b580      	push	{r7, lr}
9000c40a:	b088      	sub	sp, #32
9000c40c:	af00      	add	r7, sp, #0
9000c40e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000c410:	2300      	movs	r3, #0
9000c412:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000c414:	687b      	ldr	r3, [r7, #4]
9000c416:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000c418:	2300      	movs	r3, #0
9000c41a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000c41c:	6878      	ldr	r0, [r7, #4]
9000c41e:	f7ff fd7a 	bl	9000bf16 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000c422:	2110      	movs	r1, #16
9000c424:	6878      	ldr	r0, [r7, #4]
9000c426:	f7ff fd87 	bl	9000bf38 <USB_FlushTxFifo>
9000c42a:	4603      	mov	r3, r0
9000c42c:	2b00      	cmp	r3, #0
9000c42e:	d001      	beq.n	9000c434 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000c430:	2301      	movs	r3, #1
9000c432:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000c434:	6878      	ldr	r0, [r7, #4]
9000c436:	f7ff fdb1 	bl	9000bf9c <USB_FlushRxFifo>
9000c43a:	4603      	mov	r3, r0
9000c43c:	2b00      	cmp	r3, #0
9000c43e:	d001      	beq.n	9000c444 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000c440:	2301      	movs	r3, #1
9000c442:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000c444:	2300      	movs	r3, #0
9000c446:	61bb      	str	r3, [r7, #24]
9000c448:	e01f      	b.n	9000c48a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000c44a:	69bb      	ldr	r3, [r7, #24]
9000c44c:	015a      	lsls	r2, r3, #5
9000c44e:	697b      	ldr	r3, [r7, #20]
9000c450:	4413      	add	r3, r2
9000c452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c456:	681b      	ldr	r3, [r3, #0]
9000c458:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000c45a:	693b      	ldr	r3, [r7, #16]
9000c45c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c460:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000c462:	693b      	ldr	r3, [r7, #16]
9000c464:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000c468:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000c46a:	693b      	ldr	r3, [r7, #16]
9000c46c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000c470:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000c472:	69bb      	ldr	r3, [r7, #24]
9000c474:	015a      	lsls	r2, r3, #5
9000c476:	697b      	ldr	r3, [r7, #20]
9000c478:	4413      	add	r3, r2
9000c47a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c47e:	461a      	mov	r2, r3
9000c480:	693b      	ldr	r3, [r7, #16]
9000c482:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000c484:	69bb      	ldr	r3, [r7, #24]
9000c486:	3301      	adds	r3, #1
9000c488:	61bb      	str	r3, [r7, #24]
9000c48a:	69bb      	ldr	r3, [r7, #24]
9000c48c:	2b0f      	cmp	r3, #15
9000c48e:	d9dc      	bls.n	9000c44a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000c490:	2300      	movs	r3, #0
9000c492:	61bb      	str	r3, [r7, #24]
9000c494:	e034      	b.n	9000c500 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000c496:	69bb      	ldr	r3, [r7, #24]
9000c498:	015a      	lsls	r2, r3, #5
9000c49a:	697b      	ldr	r3, [r7, #20]
9000c49c:	4413      	add	r3, r2
9000c49e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c4a2:	681b      	ldr	r3, [r3, #0]
9000c4a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000c4a6:	693b      	ldr	r3, [r7, #16]
9000c4a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000c4ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000c4ae:	693b      	ldr	r3, [r7, #16]
9000c4b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000c4b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000c4b6:	693b      	ldr	r3, [r7, #16]
9000c4b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000c4bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000c4be:	69bb      	ldr	r3, [r7, #24]
9000c4c0:	015a      	lsls	r2, r3, #5
9000c4c2:	697b      	ldr	r3, [r7, #20]
9000c4c4:	4413      	add	r3, r2
9000c4c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c4ca:	461a      	mov	r2, r3
9000c4cc:	693b      	ldr	r3, [r7, #16]
9000c4ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000c4d0:	68fb      	ldr	r3, [r7, #12]
9000c4d2:	3301      	adds	r3, #1
9000c4d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000c4d6:	68fb      	ldr	r3, [r7, #12]
9000c4d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000c4dc:	d80c      	bhi.n	9000c4f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000c4de:	69bb      	ldr	r3, [r7, #24]
9000c4e0:	015a      	lsls	r2, r3, #5
9000c4e2:	697b      	ldr	r3, [r7, #20]
9000c4e4:	4413      	add	r3, r2
9000c4e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000c4ea:	681b      	ldr	r3, [r3, #0]
9000c4ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000c4f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000c4f4:	d0ec      	beq.n	9000c4d0 <USB_StopHost+0xc8>
9000c4f6:	e000      	b.n	9000c4fa <USB_StopHost+0xf2>
        break;
9000c4f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000c4fa:	69bb      	ldr	r3, [r7, #24]
9000c4fc:	3301      	adds	r3, #1
9000c4fe:	61bb      	str	r3, [r7, #24]
9000c500:	69bb      	ldr	r3, [r7, #24]
9000c502:	2b0f      	cmp	r3, #15
9000c504:	d9c7      	bls.n	9000c496 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000c506:	697b      	ldr	r3, [r7, #20]
9000c508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000c50c:	461a      	mov	r2, r3
9000c50e:	f04f 33ff 	mov.w	r3, #4294967295
9000c512:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000c514:	687b      	ldr	r3, [r7, #4]
9000c516:	f04f 32ff 	mov.w	r2, #4294967295
9000c51a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000c51c:	6878      	ldr	r0, [r7, #4]
9000c51e:	f7ff fce9 	bl	9000bef4 <USB_EnableGlobalInt>

  return ret;
9000c522:	7ffb      	ldrb	r3, [r7, #31]
}
9000c524:	4618      	mov	r0, r3
9000c526:	3720      	adds	r7, #32
9000c528:	46bd      	mov	sp, r7
9000c52a:	bd80      	pop	{r7, pc}

9000c52c <setAllRowsInactive>:
volatile int lastRow = -1;
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;

void setAllRowsInactive(void)
{
9000c52c:	b580      	push	{r7, lr}
9000c52e:	b082      	sub	sp, #8
9000c530:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000c532:	2300      	movs	r3, #0
9000c534:	607b      	str	r3, [r7, #4]
9000c536:	e00f      	b.n	9000c558 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000c538:	4a0b      	ldr	r2, [pc, #44]	@ (9000c568 <setAllRowsInactive+0x3c>)
9000c53a:	687b      	ldr	r3, [r7, #4]
9000c53c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000c540:	4a09      	ldr	r2, [pc, #36]	@ (9000c568 <setAllRowsInactive+0x3c>)
9000c542:	687b      	ldr	r3, [r7, #4]
9000c544:	00db      	lsls	r3, r3, #3
9000c546:	4413      	add	r3, r2
9000c548:	889b      	ldrh	r3, [r3, #4]
9000c54a:	2200      	movs	r2, #0
9000c54c:	4619      	mov	r1, r3
9000c54e:	f7f7 fe5f 	bl	90004210 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000c552:	687b      	ldr	r3, [r7, #4]
9000c554:	3301      	adds	r3, #1
9000c556:	607b      	str	r3, [r7, #4]
9000c558:	687b      	ldr	r3, [r7, #4]
9000c55a:	2b04      	cmp	r3, #4
9000c55c:	ddec      	ble.n	9000c538 <setAllRowsInactive+0xc>
    }
}
9000c55e:	bf00      	nop
9000c560:	bf00      	nop
9000c562:	3708      	adds	r7, #8
9000c564:	46bd      	mov	sp, r7
9000c566:	bd80      	pop	{r7, pc}
9000c568:	20000010 	.word	0x20000010

9000c56c <setRowActive>:

void setRowActive(int row)
{
9000c56c:	b580      	push	{r7, lr}
9000c56e:	b082      	sub	sp, #8
9000c570:	af00      	add	r7, sp, #0
9000c572:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000c574:	687b      	ldr	r3, [r7, #4]
9000c576:	2b00      	cmp	r3, #0
9000c578:	db12      	blt.n	9000c5a0 <setRowActive+0x34>
9000c57a:	687b      	ldr	r3, [r7, #4]
9000c57c:	2b04      	cmp	r3, #4
9000c57e:	dc0f      	bgt.n	9000c5a0 <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000c580:	f7ff ffd4 	bl	9000c52c <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000c584:	4a08      	ldr	r2, [pc, #32]	@ (9000c5a8 <setRowActive+0x3c>)
9000c586:	687b      	ldr	r3, [r7, #4]
9000c588:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000c58c:	4a06      	ldr	r2, [pc, #24]	@ (9000c5a8 <setRowActive+0x3c>)
9000c58e:	687b      	ldr	r3, [r7, #4]
9000c590:	00db      	lsls	r3, r3, #3
9000c592:	4413      	add	r3, r2
9000c594:	889b      	ldrh	r3, [r3, #4]
9000c596:	2201      	movs	r2, #1
9000c598:	4619      	mov	r1, r3
9000c59a:	f7f7 fe39 	bl	90004210 <HAL_GPIO_WritePin>
9000c59e:	e000      	b.n	9000c5a2 <setRowActive+0x36>
        return;
9000c5a0:	bf00      	nop
}
9000c5a2:	3708      	adds	r7, #8
9000c5a4:	46bd      	mov	sp, r7
9000c5a6:	bd80      	pop	{r7, pc}
9000c5a8:	20000010 	.word	0x20000010

9000c5ac <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
9000c5ac:	b580      	push	{r7, lr}
9000c5ae:	b084      	sub	sp, #16
9000c5b0:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000c5b2:	2300      	movs	r3, #0
9000c5b4:	60fb      	str	r3, [r7, #12]
9000c5b6:	e04c      	b.n	9000c652 <ReadFlexiKeyboard+0xa6>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000c5b8:	68f8      	ldr	r0, [r7, #12]
9000c5ba:	f7ff ffd7 	bl	9000c56c <setRowActive>
        HAL_Delay(1);         // Small delay for settling
9000c5be:	2001      	movs	r0, #1
9000c5c0:	f7f6 ffc0 	bl	90003544 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000c5c4:	2300      	movs	r3, #0
9000c5c6:	60bb      	str	r3, [r7, #8]
9000c5c8:	e03d      	b.n	9000c646 <ReadFlexiKeyboard+0x9a>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000c5ca:	4a26      	ldr	r2, [pc, #152]	@ (9000c664 <ReadFlexiKeyboard+0xb8>)
9000c5cc:	68bb      	ldr	r3, [r7, #8]
9000c5ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000c5d2:	4924      	ldr	r1, [pc, #144]	@ (9000c664 <ReadFlexiKeyboard+0xb8>)
9000c5d4:	68bb      	ldr	r3, [r7, #8]
9000c5d6:	00db      	lsls	r3, r3, #3
9000c5d8:	440b      	add	r3, r1
9000c5da:	889b      	ldrh	r3, [r3, #4]
9000c5dc:	4619      	mov	r1, r3
9000c5de:	4610      	mov	r0, r2
9000c5e0:	f7f7 fdfe 	bl	900041e0 <HAL_GPIO_ReadPin>
9000c5e4:	4603      	mov	r3, r0
9000c5e6:	2b01      	cmp	r3, #1
9000c5e8:	d12a      	bne.n	9000c640 <ReadFlexiKeyboard+0x94>
            {
                uint32_t now = HAL_GetTick();
9000c5ea:	f7f6 ff9f 	bl	9000352c <HAL_GetTick>
9000c5ee:	6078      	str	r0, [r7, #4]

                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) { // Debounce/repeat suppression
9000c5f0:	4b1d      	ldr	r3, [pc, #116]	@ (9000c668 <ReadFlexiKeyboard+0xbc>)
9000c5f2:	681b      	ldr	r3, [r3, #0]
9000c5f4:	68fa      	ldr	r2, [r7, #12]
9000c5f6:	429a      	cmp	r2, r3
9000c5f8:	d10d      	bne.n	9000c616 <ReadFlexiKeyboard+0x6a>
9000c5fa:	4b1c      	ldr	r3, [pc, #112]	@ (9000c66c <ReadFlexiKeyboard+0xc0>)
9000c5fc:	681b      	ldr	r3, [r3, #0]
9000c5fe:	68ba      	ldr	r2, [r7, #8]
9000c600:	429a      	cmp	r2, r3
9000c602:	d108      	bne.n	9000c616 <ReadFlexiKeyboard+0x6a>
9000c604:	4b1a      	ldr	r3, [pc, #104]	@ (9000c670 <ReadFlexiKeyboard+0xc4>)
9000c606:	681b      	ldr	r3, [r3, #0]
9000c608:	687a      	ldr	r2, [r7, #4]
9000c60a:	1ad3      	subs	r3, r2, r3
9000c60c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
9000c610:	d201      	bcs.n	9000c616 <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
9000c612:	234e      	movs	r3, #78	@ 0x4e
9000c614:	e021      	b.n	9000c65a <ReadFlexiKeyboard+0xae>
                }

                lastRow = row;
9000c616:	4a14      	ldr	r2, [pc, #80]	@ (9000c668 <ReadFlexiKeyboard+0xbc>)
9000c618:	68fb      	ldr	r3, [r7, #12]
9000c61a:	6013      	str	r3, [r2, #0]
                lastCol = col;
9000c61c:	4a13      	ldr	r2, [pc, #76]	@ (9000c66c <ReadFlexiKeyboard+0xc0>)
9000c61e:	68bb      	ldr	r3, [r7, #8]
9000c620:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
9000c622:	4a13      	ldr	r2, [pc, #76]	@ (9000c670 <ReadFlexiKeyboard+0xc4>)
9000c624:	687b      	ldr	r3, [r7, #4]
9000c626:	6013      	str	r3, [r2, #0]

                KeyboardButton receivedChar = keymap[row][col];
9000c628:	4912      	ldr	r1, [pc, #72]	@ (9000c674 <ReadFlexiKeyboard+0xc8>)
9000c62a:	68fa      	ldr	r2, [r7, #12]
9000c62c:	4613      	mov	r3, r2
9000c62e:	009b      	lsls	r3, r3, #2
9000c630:	4413      	add	r3, r2
9000c632:	18ca      	adds	r2, r1, r3
9000c634:	68bb      	ldr	r3, [r7, #8]
9000c636:	4413      	add	r3, r2
9000c638:	781b      	ldrb	r3, [r3, #0]
9000c63a:	70fb      	strb	r3, [r7, #3]
                //printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
                return receivedChar;
9000c63c:	78fb      	ldrb	r3, [r7, #3]
9000c63e:	e00c      	b.n	9000c65a <ReadFlexiKeyboard+0xae>
        for (int col = 0; col < NUM_COLS; col++)
9000c640:	68bb      	ldr	r3, [r7, #8]
9000c642:	3301      	adds	r3, #1
9000c644:	60bb      	str	r3, [r7, #8]
9000c646:	68bb      	ldr	r3, [r7, #8]
9000c648:	2b04      	cmp	r3, #4
9000c64a:	ddbe      	ble.n	9000c5ca <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000c64c:	68fb      	ldr	r3, [r7, #12]
9000c64e:	3301      	adds	r3, #1
9000c650:	60fb      	str	r3, [r7, #12]
9000c652:	68fb      	ldr	r3, [r7, #12]
9000c654:	2b04      	cmp	r3, #4
9000c656:	ddaf      	ble.n	9000c5b8 <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
9000c658:	234e      	movs	r3, #78	@ 0x4e
}
9000c65a:	4618      	mov	r0, r3
9000c65c:	3710      	adds	r7, #16
9000c65e:	46bd      	mov	sp, r7
9000c660:	bd80      	pop	{r7, pc}
9000c662:	bf00      	nop
9000c664:	20000038 	.word	0x20000038
9000c668:	20000060 	.word	0x20000060
9000c66c:	20000064 	.word	0x20000064
9000c670:	20001328 	.word	0x20001328
9000c674:	9000e5b8 	.word	0x9000e5b8

9000c678 <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000c678:	b580      	push	{r7, lr}
9000c67a:	b090      	sub	sp, #64	@ 0x40
9000c67c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000c67e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000c682:	2200      	movs	r2, #0
9000c684:	601a      	str	r2, [r3, #0]
9000c686:	605a      	str	r2, [r3, #4]
9000c688:	609a      	str	r2, [r3, #8]
9000c68a:	60da      	str	r2, [r3, #12]
9000c68c:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000c68e:	4b5c      	ldr	r3, [pc, #368]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c694:	4a5a      	ldr	r2, [pc, #360]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c696:	f043 0301 	orr.w	r3, r3, #1
9000c69a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000c69e:	4b58      	ldr	r3, [pc, #352]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c6a4:	f003 0301 	and.w	r3, r3, #1
9000c6a8:	623b      	str	r3, [r7, #32]
9000c6aa:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000c6ac:	4b54      	ldr	r3, [pc, #336]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c6b2:	4a53      	ldr	r2, [pc, #332]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6b4:	f043 0302 	orr.w	r3, r3, #2
9000c6b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000c6bc:	4b50      	ldr	r3, [pc, #320]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c6c2:	f003 0302 	and.w	r3, r3, #2
9000c6c6:	61fb      	str	r3, [r7, #28]
9000c6c8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000c6ca:	4b4d      	ldr	r3, [pc, #308]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c6d0:	4a4b      	ldr	r2, [pc, #300]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6d2:	f043 0308 	orr.w	r3, r3, #8
9000c6d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000c6da:	4b49      	ldr	r3, [pc, #292]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c6e0:	f003 0308 	and.w	r3, r3, #8
9000c6e4:	61bb      	str	r3, [r7, #24]
9000c6e6:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000c6e8:	4b45      	ldr	r3, [pc, #276]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c6ee:	4a44      	ldr	r2, [pc, #272]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6f0:	f043 0310 	orr.w	r3, r3, #16
9000c6f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000c6f8:	4b41      	ldr	r3, [pc, #260]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c6fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c6fe:	f003 0310 	and.w	r3, r3, #16
9000c702:	617b      	str	r3, [r7, #20]
9000c704:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000c706:	4b3e      	ldr	r3, [pc, #248]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c70c:	4a3c      	ldr	r2, [pc, #240]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c70e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000c716:	4b3a      	ldr	r3, [pc, #232]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000c720:	613b      	str	r3, [r7, #16]
9000c722:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000c724:	4b36      	ldr	r3, [pc, #216]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c72a:	4a35      	ldr	r2, [pc, #212]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c72c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000c730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000c734:	4b32      	ldr	r3, [pc, #200]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000c73e:	60fb      	str	r3, [r7, #12]
9000c740:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000c742:	4b2f      	ldr	r3, [pc, #188]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c748:	4a2d      	ldr	r2, [pc, #180]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c74a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000c74e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000c752:	4b2b      	ldr	r3, [pc, #172]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000c75c:	60bb      	str	r3, [r7, #8]
9000c75e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000c760:	4b27      	ldr	r3, [pc, #156]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c766:	4a26      	ldr	r2, [pc, #152]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c768:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000c76c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000c770:	4b23      	ldr	r3, [pc, #140]	@ (9000c800 <InitFlexiKeyboard+0x188>)
9000c772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000c776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000c77a:	607b      	str	r3, [r7, #4]
9000c77c:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000c77e:	2301      	movs	r3, #1
9000c780:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000c782:	2300      	movs	r3, #0
9000c784:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000c786:	2300      	movs	r3, #0
9000c788:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000c78a:	2300      	movs	r3, #0
9000c78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000c78e:	e012      	b.n	9000c7b6 <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000c790:	4a1c      	ldr	r2, [pc, #112]	@ (9000c804 <InitFlexiKeyboard+0x18c>)
9000c792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000c794:	00db      	lsls	r3, r3, #3
9000c796:	4413      	add	r3, r2
9000c798:	889b      	ldrh	r3, [r3, #4]
9000c79a:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000c79c:	4a19      	ldr	r2, [pc, #100]	@ (9000c804 <InitFlexiKeyboard+0x18c>)
9000c79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000c7a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000c7a4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000c7a8:	4611      	mov	r1, r2
9000c7aa:	4618      	mov	r0, r3
9000c7ac:	f7f7 fb68 	bl	90003e80 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000c7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000c7b2:	3301      	adds	r3, #1
9000c7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000c7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000c7b8:	2b04      	cmp	r3, #4
9000c7ba:	dde9      	ble.n	9000c790 <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000c7bc:	2300      	movs	r3, #0
9000c7be:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000c7c0:	2302      	movs	r3, #2
9000c7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000c7c4:	2300      	movs	r3, #0
9000c7c6:	63bb      	str	r3, [r7, #56]	@ 0x38
9000c7c8:	e012      	b.n	9000c7f0 <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000c7ca:	4a0f      	ldr	r2, [pc, #60]	@ (9000c808 <InitFlexiKeyboard+0x190>)
9000c7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000c7ce:	00db      	lsls	r3, r3, #3
9000c7d0:	4413      	add	r3, r2
9000c7d2:	889b      	ldrh	r3, [r3, #4]
9000c7d4:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000c7d6:	4a0c      	ldr	r2, [pc, #48]	@ (9000c808 <InitFlexiKeyboard+0x190>)
9000c7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000c7da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000c7de:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000c7e2:	4611      	mov	r1, r2
9000c7e4:	4618      	mov	r0, r3
9000c7e6:	f7f7 fb4b 	bl	90003e80 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000c7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000c7ec:	3301      	adds	r3, #1
9000c7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
9000c7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000c7f2:	2b04      	cmp	r3, #4
9000c7f4:	dde9      	ble.n	9000c7ca <InitFlexiKeyboard+0x152>
	}
}
9000c7f6:	bf00      	nop
9000c7f8:	bf00      	nop
9000c7fa:	3740      	adds	r7, #64	@ 0x40
9000c7fc:	46bd      	mov	sp, r7
9000c7fe:	bd80      	pop	{r7, pc}
9000c800:	58024400 	.word	0x58024400
9000c804:	20000010 	.word	0x20000010
9000c808:	20000038 	.word	0x20000038

9000c80c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000c80c:	b580      	push	{r7, lr}
9000c80e:	b082      	sub	sp, #8
9000c810:	af00      	add	r7, sp, #0
9000c812:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000c814:	687b      	ldr	r3, [r7, #4]
9000c816:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000c81a:	1c5a      	adds	r2, r3, #1
9000c81c:	687b      	ldr	r3, [r7, #4]
9000c81e:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000c822:	6878      	ldr	r0, [r7, #4]
9000c824:	f000 f804 	bl	9000c830 <USBH_HandleSof>
}
9000c828:	bf00      	nop
9000c82a:	3708      	adds	r7, #8
9000c82c:	46bd      	mov	sp, r7
9000c82e:	bd80      	pop	{r7, pc}

9000c830 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000c830:	b580      	push	{r7, lr}
9000c832:	b082      	sub	sp, #8
9000c834:	af00      	add	r7, sp, #0
9000c836:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000c838:	687b      	ldr	r3, [r7, #4]
9000c83a:	781b      	ldrb	r3, [r3, #0]
9000c83c:	b2db      	uxtb	r3, r3
9000c83e:	2b0b      	cmp	r3, #11
9000c840:	d10a      	bne.n	9000c858 <USBH_HandleSof+0x28>
9000c842:	687b      	ldr	r3, [r7, #4]
9000c844:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000c848:	2b00      	cmp	r3, #0
9000c84a:	d005      	beq.n	9000c858 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000c84c:	687b      	ldr	r3, [r7, #4]
9000c84e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000c852:	699b      	ldr	r3, [r3, #24]
9000c854:	6878      	ldr	r0, [r7, #4]
9000c856:	4798      	blx	r3
  }
}
9000c858:	bf00      	nop
9000c85a:	3708      	adds	r7, #8
9000c85c:	46bd      	mov	sp, r7
9000c85e:	bd80      	pop	{r7, pc}

9000c860 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000c860:	b480      	push	{r7}
9000c862:	b083      	sub	sp, #12
9000c864:	af00      	add	r7, sp, #0
9000c866:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000c868:	687b      	ldr	r3, [r7, #4]
9000c86a:	2201      	movs	r2, #1
9000c86c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000c870:	bf00      	nop
}
9000c872:	370c      	adds	r7, #12
9000c874:	46bd      	mov	sp, r7
9000c876:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c87a:	4770      	bx	lr

9000c87c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000c87c:	b480      	push	{r7}
9000c87e:	b083      	sub	sp, #12
9000c880:	af00      	add	r7, sp, #0
9000c882:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000c884:	687b      	ldr	r3, [r7, #4]
9000c886:	2200      	movs	r2, #0
9000c888:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000c88c:	687b      	ldr	r3, [r7, #4]
9000c88e:	2201      	movs	r2, #1
9000c890:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000c894:	bf00      	nop
}
9000c896:	370c      	adds	r7, #12
9000c898:	46bd      	mov	sp, r7
9000c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c89e:	4770      	bx	lr

9000c8a0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000c8a0:	b480      	push	{r7}
9000c8a2:	b083      	sub	sp, #12
9000c8a4:	af00      	add	r7, sp, #0
9000c8a6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000c8a8:	687b      	ldr	r3, [r7, #4]
9000c8aa:	2201      	movs	r2, #1
9000c8ac:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000c8b0:	687b      	ldr	r3, [r7, #4]
9000c8b2:	2200      	movs	r2, #0
9000c8b4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000c8b8:	687b      	ldr	r3, [r7, #4]
9000c8ba:	2200      	movs	r2, #0
9000c8bc:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000c8c0:	2300      	movs	r3, #0
}
9000c8c2:	4618      	mov	r0, r3
9000c8c4:	370c      	adds	r7, #12
9000c8c6:	46bd      	mov	sp, r7
9000c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c8cc:	4770      	bx	lr

9000c8ce <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000c8ce:	b580      	push	{r7, lr}
9000c8d0:	b082      	sub	sp, #8
9000c8d2:	af00      	add	r7, sp, #0
9000c8d4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000c8d6:	687b      	ldr	r3, [r7, #4]
9000c8d8:	2201      	movs	r2, #1
9000c8da:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000c8de:	687b      	ldr	r3, [r7, #4]
9000c8e0:	2200      	movs	r2, #0
9000c8e2:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000c8e6:	687b      	ldr	r3, [r7, #4]
9000c8e8:	2200      	movs	r2, #0
9000c8ea:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000c8ee:	6878      	ldr	r0, [r7, #4]
9000c8f0:	f7f4 fd6e 	bl	900013d0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000c8f4:	687b      	ldr	r3, [r7, #4]
9000c8f6:	791b      	ldrb	r3, [r3, #4]
9000c8f8:	4619      	mov	r1, r3
9000c8fa:	6878      	ldr	r0, [r7, #4]
9000c8fc:	f000 f80b 	bl	9000c916 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000c900:	687b      	ldr	r3, [r7, #4]
9000c902:	795b      	ldrb	r3, [r3, #5]
9000c904:	4619      	mov	r1, r3
9000c906:	6878      	ldr	r0, [r7, #4]
9000c908:	f000 f805 	bl	9000c916 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000c90c:	2300      	movs	r3, #0
}
9000c90e:	4618      	mov	r0, r3
9000c910:	3708      	adds	r7, #8
9000c912:	46bd      	mov	sp, r7
9000c914:	bd80      	pop	{r7, pc}

9000c916 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000c916:	b480      	push	{r7}
9000c918:	b083      	sub	sp, #12
9000c91a:	af00      	add	r7, sp, #0
9000c91c:	6078      	str	r0, [r7, #4]
9000c91e:	460b      	mov	r3, r1
9000c920:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000c922:	78fb      	ldrb	r3, [r7, #3]
9000c924:	2b0f      	cmp	r3, #15
9000c926:	d80f      	bhi.n	9000c948 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000c928:	78fb      	ldrb	r3, [r7, #3]
9000c92a:	687a      	ldr	r2, [r7, #4]
9000c92c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000c930:	009b      	lsls	r3, r3, #2
9000c932:	4413      	add	r3, r2
9000c934:	685a      	ldr	r2, [r3, #4]
9000c936:	78fb      	ldrb	r3, [r7, #3]
9000c938:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000c93c:	6879      	ldr	r1, [r7, #4]
9000c93e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000c942:	009b      	lsls	r3, r3, #2
9000c944:	440b      	add	r3, r1
9000c946:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000c948:	2300      	movs	r3, #0
}
9000c94a:	4618      	mov	r0, r3
9000c94c:	370c      	adds	r7, #12
9000c94e:	46bd      	mov	sp, r7
9000c950:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c954:	4770      	bx	lr
	...

9000c958 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000c958:	b580      	push	{r7, lr}
9000c95a:	b082      	sub	sp, #8
9000c95c:	af00      	add	r7, sp, #0
9000c95e:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000c960:	687b      	ldr	r3, [r7, #4]
9000c962:	681b      	ldr	r3, [r3, #0]
9000c964:	4a22      	ldr	r2, [pc, #136]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c966:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000c968:	687b      	ldr	r3, [r7, #4]
9000c96a:	685b      	ldr	r3, [r3, #4]
9000c96c:	4a20      	ldr	r2, [pc, #128]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c96e:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000c970:	687b      	ldr	r3, [r7, #4]
9000c972:	689b      	ldr	r3, [r3, #8]
9000c974:	4a1e      	ldr	r2, [pc, #120]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c976:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000c978:	687b      	ldr	r3, [r7, #4]
9000c97a:	68db      	ldr	r3, [r3, #12]
9000c97c:	4a1c      	ldr	r2, [pc, #112]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c97e:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000c980:	687b      	ldr	r3, [r7, #4]
9000c982:	691b      	ldr	r3, [r3, #16]
9000c984:	4a1a      	ldr	r2, [pc, #104]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c986:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000c988:	687b      	ldr	r3, [r7, #4]
9000c98a:	695b      	ldr	r3, [r3, #20]
9000c98c:	4a18      	ldr	r2, [pc, #96]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c98e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000c990:	687b      	ldr	r3, [r7, #4]
9000c992:	699b      	ldr	r3, [r3, #24]
9000c994:	4a16      	ldr	r2, [pc, #88]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c996:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000c998:	687b      	ldr	r3, [r7, #4]
9000c99a:	69db      	ldr	r3, [r3, #28]
9000c99c:	4a14      	ldr	r2, [pc, #80]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c99e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000c9a0:	687b      	ldr	r3, [r7, #4]
9000c9a2:	6a1b      	ldr	r3, [r3, #32]
9000c9a4:	4a12      	ldr	r2, [pc, #72]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c9a6:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000c9a8:	687b      	ldr	r3, [r7, #4]
9000c9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000c9ac:	4a10      	ldr	r2, [pc, #64]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c9ae:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000c9b0:	687b      	ldr	r3, [r7, #4]
9000c9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000c9b4:	4a0e      	ldr	r2, [pc, #56]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c9b6:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000c9b8:	4b0e      	ldr	r3, [pc, #56]	@ (9000c9f4 <UTIL_LCD_SetFuncDriver+0x9c>)
9000c9ba:	2200      	movs	r2, #0
9000c9bc:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000c9be:	4b0d      	ldr	r3, [pc, #52]	@ (9000c9f4 <UTIL_LCD_SetFuncDriver+0x9c>)
9000c9c0:	2200      	movs	r2, #0
9000c9c2:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000c9c4:	4b0a      	ldr	r3, [pc, #40]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c9c6:	69db      	ldr	r3, [r3, #28]
9000c9c8:	4a0b      	ldr	r2, [pc, #44]	@ (9000c9f8 <UTIL_LCD_SetFuncDriver+0xa0>)
9000c9ca:	4611      	mov	r1, r2
9000c9cc:	2000      	movs	r0, #0
9000c9ce:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000c9d0:	4b07      	ldr	r3, [pc, #28]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c9d2:	6a1b      	ldr	r3, [r3, #32]
9000c9d4:	4a09      	ldr	r2, [pc, #36]	@ (9000c9fc <UTIL_LCD_SetFuncDriver+0xa4>)
9000c9d6:	4611      	mov	r1, r2
9000c9d8:	2000      	movs	r0, #0
9000c9da:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000c9dc:	4b04      	ldr	r3, [pc, #16]	@ (9000c9f0 <UTIL_LCD_SetFuncDriver+0x98>)
9000c9de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000c9e0:	4a07      	ldr	r2, [pc, #28]	@ (9000ca00 <UTIL_LCD_SetFuncDriver+0xa8>)
9000c9e2:	4611      	mov	r1, r2
9000c9e4:	2000      	movs	r0, #0
9000c9e6:	4798      	blx	r3
}
9000c9e8:	bf00      	nop
9000c9ea:	3708      	adds	r7, #8
9000c9ec:	46bd      	mov	sp, r7
9000c9ee:	bd80      	pop	{r7, pc}
9000c9f0:	2000136c 	.word	0x2000136c
9000c9f4:	2000132c 	.word	0x2000132c
9000c9f8:	20001340 	.word	0x20001340
9000c9fc:	20001344 	.word	0x20001344
9000ca00:	20001348 	.word	0x20001348

9000ca04 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000ca04:	b580      	push	{r7, lr}
9000ca06:	b082      	sub	sp, #8
9000ca08:	af00      	add	r7, sp, #0
9000ca0a:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000ca0c:	4b0a      	ldr	r3, [pc, #40]	@ (9000ca38 <UTIL_LCD_SetLayer+0x34>)
9000ca0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000ca10:	2b00      	cmp	r3, #0
9000ca12:	d00c      	beq.n	9000ca2e <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000ca14:	4b08      	ldr	r3, [pc, #32]	@ (9000ca38 <UTIL_LCD_SetLayer+0x34>)
9000ca16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000ca18:	4a08      	ldr	r2, [pc, #32]	@ (9000ca3c <UTIL_LCD_SetLayer+0x38>)
9000ca1a:	6912      	ldr	r2, [r2, #16]
9000ca1c:	6879      	ldr	r1, [r7, #4]
9000ca1e:	4610      	mov	r0, r2
9000ca20:	4798      	blx	r3
9000ca22:	4603      	mov	r3, r0
9000ca24:	2b00      	cmp	r3, #0
9000ca26:	d102      	bne.n	9000ca2e <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000ca28:	4a04      	ldr	r2, [pc, #16]	@ (9000ca3c <UTIL_LCD_SetLayer+0x38>)
9000ca2a:	687b      	ldr	r3, [r7, #4]
9000ca2c:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000ca2e:	bf00      	nop
9000ca30:	3708      	adds	r7, #8
9000ca32:	46bd      	mov	sp, r7
9000ca34:	bd80      	pop	{r7, pc}
9000ca36:	bf00      	nop
9000ca38:	2000136c 	.word	0x2000136c
9000ca3c:	2000132c 	.word	0x2000132c

9000ca40 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000ca40:	b480      	push	{r7}
9000ca42:	b083      	sub	sp, #12
9000ca44:	af00      	add	r7, sp, #0
9000ca46:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000ca48:	4b06      	ldr	r3, [pc, #24]	@ (9000ca64 <UTIL_LCD_SetTextColor+0x24>)
9000ca4a:	68db      	ldr	r3, [r3, #12]
9000ca4c:	4a05      	ldr	r2, [pc, #20]	@ (9000ca64 <UTIL_LCD_SetTextColor+0x24>)
9000ca4e:	015b      	lsls	r3, r3, #5
9000ca50:	4413      	add	r3, r2
9000ca52:	687a      	ldr	r2, [r7, #4]
9000ca54:	601a      	str	r2, [r3, #0]
}
9000ca56:	bf00      	nop
9000ca58:	370c      	adds	r7, #12
9000ca5a:	46bd      	mov	sp, r7
9000ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ca60:	4770      	bx	lr
9000ca62:	bf00      	nop
9000ca64:	2000132c 	.word	0x2000132c

9000ca68 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000ca68:	b480      	push	{r7}
9000ca6a:	b083      	sub	sp, #12
9000ca6c:	af00      	add	r7, sp, #0
9000ca6e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000ca70:	4b06      	ldr	r3, [pc, #24]	@ (9000ca8c <UTIL_LCD_SetBackColor+0x24>)
9000ca72:	68db      	ldr	r3, [r3, #12]
9000ca74:	4a05      	ldr	r2, [pc, #20]	@ (9000ca8c <UTIL_LCD_SetBackColor+0x24>)
9000ca76:	015b      	lsls	r3, r3, #5
9000ca78:	4413      	add	r3, r2
9000ca7a:	3304      	adds	r3, #4
9000ca7c:	687a      	ldr	r2, [r7, #4]
9000ca7e:	601a      	str	r2, [r3, #0]
}
9000ca80:	bf00      	nop
9000ca82:	370c      	adds	r7, #12
9000ca84:	46bd      	mov	sp, r7
9000ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ca8a:	4770      	bx	lr
9000ca8c:	2000132c 	.word	0x2000132c

9000ca90 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000ca90:	b480      	push	{r7}
9000ca92:	b083      	sub	sp, #12
9000ca94:	af00      	add	r7, sp, #0
9000ca96:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000ca98:	4b06      	ldr	r3, [pc, #24]	@ (9000cab4 <UTIL_LCD_SetFont+0x24>)
9000ca9a:	68db      	ldr	r3, [r3, #12]
9000ca9c:	4a05      	ldr	r2, [pc, #20]	@ (9000cab4 <UTIL_LCD_SetFont+0x24>)
9000ca9e:	015b      	lsls	r3, r3, #5
9000caa0:	4413      	add	r3, r2
9000caa2:	3308      	adds	r3, #8
9000caa4:	687a      	ldr	r2, [r7, #4]
9000caa6:	601a      	str	r2, [r3, #0]
}
9000caa8:	bf00      	nop
9000caaa:	370c      	adds	r7, #12
9000caac:	46bd      	mov	sp, r7
9000caae:	f85d 7b04 	ldr.w	r7, [sp], #4
9000cab2:	4770      	bx	lr
9000cab4:	2000132c 	.word	0x2000132c

9000cab8 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000cab8:	b590      	push	{r4, r7, lr}
9000caba:	b087      	sub	sp, #28
9000cabc:	af02      	add	r7, sp, #8
9000cabe:	60f8      	str	r0, [r7, #12]
9000cac0:	60b9      	str	r1, [r7, #8]
9000cac2:	607a      	str	r2, [r7, #4]
9000cac4:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000cac6:	4b08      	ldr	r3, [pc, #32]	@ (9000cae8 <UTIL_LCD_FillRGBRect+0x30>)
9000cac8:	685c      	ldr	r4, [r3, #4]
9000caca:	4b08      	ldr	r3, [pc, #32]	@ (9000caec <UTIL_LCD_FillRGBRect+0x34>)
9000cacc:	6918      	ldr	r0, [r3, #16]
9000cace:	6a3b      	ldr	r3, [r7, #32]
9000cad0:	9301      	str	r3, [sp, #4]
9000cad2:	683b      	ldr	r3, [r7, #0]
9000cad4:	9300      	str	r3, [sp, #0]
9000cad6:	687b      	ldr	r3, [r7, #4]
9000cad8:	68ba      	ldr	r2, [r7, #8]
9000cada:	68f9      	ldr	r1, [r7, #12]
9000cadc:	47a0      	blx	r4
}
9000cade:	bf00      	nop
9000cae0:	3714      	adds	r7, #20
9000cae2:	46bd      	mov	sp, r7
9000cae4:	bd90      	pop	{r4, r7, pc}
9000cae6:	bf00      	nop
9000cae8:	2000136c 	.word	0x2000136c
9000caec:	2000132c 	.word	0x2000132c

9000caf0 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000caf0:	b580      	push	{r7, lr}
9000caf2:	b084      	sub	sp, #16
9000caf4:	af02      	add	r7, sp, #8
9000caf6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000caf8:	4b07      	ldr	r3, [pc, #28]	@ (9000cb18 <UTIL_LCD_Clear+0x28>)
9000cafa:	695a      	ldr	r2, [r3, #20]
9000cafc:	4b06      	ldr	r3, [pc, #24]	@ (9000cb18 <UTIL_LCD_Clear+0x28>)
9000cafe:	6999      	ldr	r1, [r3, #24]
9000cb00:	687b      	ldr	r3, [r7, #4]
9000cb02:	9300      	str	r3, [sp, #0]
9000cb04:	460b      	mov	r3, r1
9000cb06:	2100      	movs	r1, #0
9000cb08:	2000      	movs	r0, #0
9000cb0a:	f000 f8eb 	bl	9000cce4 <UTIL_LCD_FillRect>
}
9000cb0e:	bf00      	nop
9000cb10:	3708      	adds	r7, #8
9000cb12:	46bd      	mov	sp, r7
9000cb14:	bd80      	pop	{r7, pc}
9000cb16:	bf00      	nop
9000cb18:	2000132c 	.word	0x2000132c

9000cb1c <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000cb1c:	b580      	push	{r7, lr}
9000cb1e:	b084      	sub	sp, #16
9000cb20:	af00      	add	r7, sp, #0
9000cb22:	60f8      	str	r0, [r7, #12]
9000cb24:	60b9      	str	r1, [r7, #8]
9000cb26:	4613      	mov	r3, r2
9000cb28:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000cb2a:	4b16      	ldr	r3, [pc, #88]	@ (9000cb84 <UTIL_LCD_DisplayChar+0x68>)
9000cb2c:	68db      	ldr	r3, [r3, #12]
9000cb2e:	4a15      	ldr	r2, [pc, #84]	@ (9000cb84 <UTIL_LCD_DisplayChar+0x68>)
9000cb30:	015b      	lsls	r3, r3, #5
9000cb32:	4413      	add	r3, r2
9000cb34:	3308      	adds	r3, #8
9000cb36:	681b      	ldr	r3, [r3, #0]
9000cb38:	681a      	ldr	r2, [r3, #0]
9000cb3a:	79fb      	ldrb	r3, [r7, #7]
9000cb3c:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000cb3e:	4911      	ldr	r1, [pc, #68]	@ (9000cb84 <UTIL_LCD_DisplayChar+0x68>)
9000cb40:	68c9      	ldr	r1, [r1, #12]
9000cb42:	4810      	ldr	r0, [pc, #64]	@ (9000cb84 <UTIL_LCD_DisplayChar+0x68>)
9000cb44:	0149      	lsls	r1, r1, #5
9000cb46:	4401      	add	r1, r0
9000cb48:	3108      	adds	r1, #8
9000cb4a:	6809      	ldr	r1, [r1, #0]
9000cb4c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000cb4e:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000cb52:	4b0c      	ldr	r3, [pc, #48]	@ (9000cb84 <UTIL_LCD_DisplayChar+0x68>)
9000cb54:	68db      	ldr	r3, [r3, #12]
9000cb56:	480b      	ldr	r0, [pc, #44]	@ (9000cb84 <UTIL_LCD_DisplayChar+0x68>)
9000cb58:	015b      	lsls	r3, r3, #5
9000cb5a:	4403      	add	r3, r0
9000cb5c:	3308      	adds	r3, #8
9000cb5e:	681b      	ldr	r3, [r3, #0]
9000cb60:	889b      	ldrh	r3, [r3, #4]
9000cb62:	3307      	adds	r3, #7
9000cb64:	2b00      	cmp	r3, #0
9000cb66:	da00      	bge.n	9000cb6a <UTIL_LCD_DisplayChar+0x4e>
9000cb68:	3307      	adds	r3, #7
9000cb6a:	10db      	asrs	r3, r3, #3
9000cb6c:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000cb70:	4413      	add	r3, r2
9000cb72:	461a      	mov	r2, r3
9000cb74:	68b9      	ldr	r1, [r7, #8]
9000cb76:	68f8      	ldr	r0, [r7, #12]
9000cb78:	f000 f8ee 	bl	9000cd58 <DrawChar>
}
9000cb7c:	bf00      	nop
9000cb7e:	3710      	adds	r7, #16
9000cb80:	46bd      	mov	sp, r7
9000cb82:	bd80      	pop	{r7, pc}
9000cb84:	2000132c 	.word	0x2000132c

9000cb88 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000cb88:	b580      	push	{r7, lr}
9000cb8a:	b08a      	sub	sp, #40	@ 0x28
9000cb8c:	af00      	add	r7, sp, #0
9000cb8e:	60f8      	str	r0, [r7, #12]
9000cb90:	60b9      	str	r1, [r7, #8]
9000cb92:	607a      	str	r2, [r7, #4]
9000cb94:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000cb96:	2301      	movs	r3, #1
9000cb98:	627b      	str	r3, [r7, #36]	@ 0x24
9000cb9a:	2300      	movs	r3, #0
9000cb9c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000cb9e:	2300      	movs	r3, #0
9000cba0:	61fb      	str	r3, [r7, #28]
9000cba2:	2300      	movs	r3, #0
9000cba4:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000cba6:	687b      	ldr	r3, [r7, #4]
9000cba8:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000cbaa:	e002      	b.n	9000cbb2 <UTIL_LCD_DisplayStringAt+0x2a>
9000cbac:	69fb      	ldr	r3, [r7, #28]
9000cbae:	3301      	adds	r3, #1
9000cbb0:	61fb      	str	r3, [r7, #28]
9000cbb2:	69bb      	ldr	r3, [r7, #24]
9000cbb4:	1c5a      	adds	r2, r3, #1
9000cbb6:	61ba      	str	r2, [r7, #24]
9000cbb8:	781b      	ldrb	r3, [r3, #0]
9000cbba:	2b00      	cmp	r3, #0
9000cbbc:	d1f6      	bne.n	9000cbac <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000cbbe:	4b48      	ldr	r3, [pc, #288]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cbc0:	695b      	ldr	r3, [r3, #20]
9000cbc2:	4a47      	ldr	r2, [pc, #284]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cbc4:	68d2      	ldr	r2, [r2, #12]
9000cbc6:	4946      	ldr	r1, [pc, #280]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cbc8:	0152      	lsls	r2, r2, #5
9000cbca:	440a      	add	r2, r1
9000cbcc:	3208      	adds	r2, #8
9000cbce:	6812      	ldr	r2, [r2, #0]
9000cbd0:	8892      	ldrh	r2, [r2, #4]
9000cbd2:	fbb3 f3f2 	udiv	r3, r3, r2
9000cbd6:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000cbd8:	78fb      	ldrb	r3, [r7, #3]
9000cbda:	2b03      	cmp	r3, #3
9000cbdc:	d018      	beq.n	9000cc10 <UTIL_LCD_DisplayStringAt+0x88>
9000cbde:	2b03      	cmp	r3, #3
9000cbe0:	dc2a      	bgt.n	9000cc38 <UTIL_LCD_DisplayStringAt+0xb0>
9000cbe2:	2b01      	cmp	r3, #1
9000cbe4:	d002      	beq.n	9000cbec <UTIL_LCD_DisplayStringAt+0x64>
9000cbe6:	2b02      	cmp	r3, #2
9000cbe8:	d015      	beq.n	9000cc16 <UTIL_LCD_DisplayStringAt+0x8e>
9000cbea:	e025      	b.n	9000cc38 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000cbec:	697a      	ldr	r2, [r7, #20]
9000cbee:	69fb      	ldr	r3, [r7, #28]
9000cbf0:	1ad3      	subs	r3, r2, r3
9000cbf2:	4a3b      	ldr	r2, [pc, #236]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cbf4:	68d2      	ldr	r2, [r2, #12]
9000cbf6:	493a      	ldr	r1, [pc, #232]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cbf8:	0152      	lsls	r2, r2, #5
9000cbfa:	440a      	add	r2, r1
9000cbfc:	3208      	adds	r2, #8
9000cbfe:	6812      	ldr	r2, [r2, #0]
9000cc00:	8892      	ldrh	r2, [r2, #4]
9000cc02:	fb02 f303 	mul.w	r3, r2, r3
9000cc06:	085b      	lsrs	r3, r3, #1
9000cc08:	68fa      	ldr	r2, [r7, #12]
9000cc0a:	4413      	add	r3, r2
9000cc0c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000cc0e:	e016      	b.n	9000cc3e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000cc10:	68fb      	ldr	r3, [r7, #12]
9000cc12:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000cc14:	e013      	b.n	9000cc3e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000cc16:	697a      	ldr	r2, [r7, #20]
9000cc18:	69fb      	ldr	r3, [r7, #28]
9000cc1a:	1ad3      	subs	r3, r2, r3
9000cc1c:	4a30      	ldr	r2, [pc, #192]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cc1e:	68d2      	ldr	r2, [r2, #12]
9000cc20:	492f      	ldr	r1, [pc, #188]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cc22:	0152      	lsls	r2, r2, #5
9000cc24:	440a      	add	r2, r1
9000cc26:	3208      	adds	r2, #8
9000cc28:	6812      	ldr	r2, [r2, #0]
9000cc2a:	8892      	ldrh	r2, [r2, #4]
9000cc2c:	fb03 f202 	mul.w	r2, r3, r2
9000cc30:	68fb      	ldr	r3, [r7, #12]
9000cc32:	1ad3      	subs	r3, r2, r3
9000cc34:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000cc36:	e002      	b.n	9000cc3e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000cc38:	68fb      	ldr	r3, [r7, #12]
9000cc3a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000cc3c:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000cc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000cc40:	2b00      	cmp	r3, #0
9000cc42:	d003      	beq.n	9000cc4c <UTIL_LCD_DisplayStringAt+0xc4>
9000cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000cc46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000cc4a:	d31b      	bcc.n	9000cc84 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000cc4c:	2301      	movs	r3, #1
9000cc4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000cc50:	e018      	b.n	9000cc84 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000cc52:	687b      	ldr	r3, [r7, #4]
9000cc54:	781b      	ldrb	r3, [r3, #0]
9000cc56:	461a      	mov	r2, r3
9000cc58:	68b9      	ldr	r1, [r7, #8]
9000cc5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000cc5c:	f7ff ff5e 	bl	9000cb1c <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000cc60:	4b1f      	ldr	r3, [pc, #124]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cc62:	68db      	ldr	r3, [r3, #12]
9000cc64:	4a1e      	ldr	r2, [pc, #120]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cc66:	015b      	lsls	r3, r3, #5
9000cc68:	4413      	add	r3, r2
9000cc6a:	3308      	adds	r3, #8
9000cc6c:	681b      	ldr	r3, [r3, #0]
9000cc6e:	889b      	ldrh	r3, [r3, #4]
9000cc70:	461a      	mov	r2, r3
9000cc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000cc74:	4413      	add	r3, r2
9000cc76:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000cc78:	687b      	ldr	r3, [r7, #4]
9000cc7a:	3301      	adds	r3, #1
9000cc7c:	607b      	str	r3, [r7, #4]
    i++;
9000cc7e:	6a3b      	ldr	r3, [r7, #32]
9000cc80:	3301      	adds	r3, #1
9000cc82:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000cc84:	687b      	ldr	r3, [r7, #4]
9000cc86:	781b      	ldrb	r3, [r3, #0]
9000cc88:	2b00      	cmp	r3, #0
9000cc8a:	bf14      	ite	ne
9000cc8c:	2301      	movne	r3, #1
9000cc8e:	2300      	moveq	r3, #0
9000cc90:	b2da      	uxtb	r2, r3
9000cc92:	4b13      	ldr	r3, [pc, #76]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cc94:	6959      	ldr	r1, [r3, #20]
9000cc96:	4b12      	ldr	r3, [pc, #72]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cc98:	68db      	ldr	r3, [r3, #12]
9000cc9a:	4811      	ldr	r0, [pc, #68]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000cc9c:	015b      	lsls	r3, r3, #5
9000cc9e:	4403      	add	r3, r0
9000cca0:	3308      	adds	r3, #8
9000cca2:	681b      	ldr	r3, [r3, #0]
9000cca4:	889b      	ldrh	r3, [r3, #4]
9000cca6:	4618      	mov	r0, r3
9000cca8:	6a3b      	ldr	r3, [r7, #32]
9000ccaa:	fb00 f303 	mul.w	r3, r0, r3
9000ccae:	1acb      	subs	r3, r1, r3
9000ccb0:	b29b      	uxth	r3, r3
9000ccb2:	490b      	ldr	r1, [pc, #44]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000ccb4:	68c9      	ldr	r1, [r1, #12]
9000ccb6:	480a      	ldr	r0, [pc, #40]	@ (9000cce0 <UTIL_LCD_DisplayStringAt+0x158>)
9000ccb8:	0149      	lsls	r1, r1, #5
9000ccba:	4401      	add	r1, r0
9000ccbc:	3108      	adds	r1, #8
9000ccbe:	6809      	ldr	r1, [r1, #0]
9000ccc0:	8889      	ldrh	r1, [r1, #4]
9000ccc2:	428b      	cmp	r3, r1
9000ccc4:	bf2c      	ite	cs
9000ccc6:	2301      	movcs	r3, #1
9000ccc8:	2300      	movcc	r3, #0
9000ccca:	b2db      	uxtb	r3, r3
9000cccc:	4013      	ands	r3, r2
9000ccce:	b2db      	uxtb	r3, r3
9000ccd0:	2b00      	cmp	r3, #0
9000ccd2:	d1be      	bne.n	9000cc52 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000ccd4:	bf00      	nop
9000ccd6:	bf00      	nop
9000ccd8:	3728      	adds	r7, #40	@ 0x28
9000ccda:	46bd      	mov	sp, r7
9000ccdc:	bd80      	pop	{r7, pc}
9000ccde:	bf00      	nop
9000cce0:	2000132c 	.word	0x2000132c

9000cce4 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000cce4:	b590      	push	{r4, r7, lr}
9000cce6:	b087      	sub	sp, #28
9000cce8:	af02      	add	r7, sp, #8
9000ccea:	60f8      	str	r0, [r7, #12]
9000ccec:	60b9      	str	r1, [r7, #8]
9000ccee:	607a      	str	r2, [r7, #4]
9000ccf0:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000ccf2:	4b17      	ldr	r3, [pc, #92]	@ (9000cd50 <UTIL_LCD_FillRect+0x6c>)
9000ccf4:	69db      	ldr	r3, [r3, #28]
9000ccf6:	2b02      	cmp	r3, #2
9000ccf8:	d11a      	bne.n	9000cd30 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000ccfa:	4b16      	ldr	r3, [pc, #88]	@ (9000cd54 <UTIL_LCD_FillRect+0x70>)
9000ccfc:	691c      	ldr	r4, [r3, #16]
9000ccfe:	4b14      	ldr	r3, [pc, #80]	@ (9000cd50 <UTIL_LCD_FillRect+0x6c>)
9000cd00:	6918      	ldr	r0, [r3, #16]
9000cd02:	6a3b      	ldr	r3, [r7, #32]
9000cd04:	08db      	lsrs	r3, r3, #3
9000cd06:	f003 021f 	and.w	r2, r3, #31
9000cd0a:	6a3b      	ldr	r3, [r7, #32]
9000cd0c:	0a9b      	lsrs	r3, r3, #10
9000cd0e:	015b      	lsls	r3, r3, #5
9000cd10:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000cd14:	431a      	orrs	r2, r3
9000cd16:	6a3b      	ldr	r3, [r7, #32]
9000cd18:	0cdb      	lsrs	r3, r3, #19
9000cd1a:	02db      	lsls	r3, r3, #11
9000cd1c:	b29b      	uxth	r3, r3
9000cd1e:	4313      	orrs	r3, r2
9000cd20:	9301      	str	r3, [sp, #4]
9000cd22:	683b      	ldr	r3, [r7, #0]
9000cd24:	9300      	str	r3, [sp, #0]
9000cd26:	687b      	ldr	r3, [r7, #4]
9000cd28:	68ba      	ldr	r2, [r7, #8]
9000cd2a:	68f9      	ldr	r1, [r7, #12]
9000cd2c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000cd2e:	e00b      	b.n	9000cd48 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000cd30:	4b08      	ldr	r3, [pc, #32]	@ (9000cd54 <UTIL_LCD_FillRect+0x70>)
9000cd32:	691c      	ldr	r4, [r3, #16]
9000cd34:	4b06      	ldr	r3, [pc, #24]	@ (9000cd50 <UTIL_LCD_FillRect+0x6c>)
9000cd36:	6918      	ldr	r0, [r3, #16]
9000cd38:	6a3b      	ldr	r3, [r7, #32]
9000cd3a:	9301      	str	r3, [sp, #4]
9000cd3c:	683b      	ldr	r3, [r7, #0]
9000cd3e:	9300      	str	r3, [sp, #0]
9000cd40:	687b      	ldr	r3, [r7, #4]
9000cd42:	68ba      	ldr	r2, [r7, #8]
9000cd44:	68f9      	ldr	r1, [r7, #12]
9000cd46:	47a0      	blx	r4
}
9000cd48:	bf00      	nop
9000cd4a:	3714      	adds	r7, #20
9000cd4c:	46bd      	mov	sp, r7
9000cd4e:	bd90      	pop	{r4, r7, pc}
9000cd50:	2000132c 	.word	0x2000132c
9000cd54:	2000136c 	.word	0x2000136c

9000cd58 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000cd58:	b580      	push	{r7, lr}
9000cd5a:	b0b2      	sub	sp, #200	@ 0xc8
9000cd5c:	af02      	add	r7, sp, #8
9000cd5e:	60f8      	str	r0, [r7, #12]
9000cd60:	60b9      	str	r1, [r7, #8]
9000cd62:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000cd64:	2300      	movs	r3, #0
9000cd66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000cd6a:	2300      	movs	r3, #0
9000cd6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000cd70:	4ba5      	ldr	r3, [pc, #660]	@ (9000d008 <DrawChar+0x2b0>)
9000cd72:	68db      	ldr	r3, [r3, #12]
9000cd74:	4aa4      	ldr	r2, [pc, #656]	@ (9000d008 <DrawChar+0x2b0>)
9000cd76:	015b      	lsls	r3, r3, #5
9000cd78:	4413      	add	r3, r2
9000cd7a:	3308      	adds	r3, #8
9000cd7c:	681b      	ldr	r3, [r3, #0]
9000cd7e:	88db      	ldrh	r3, [r3, #6]
9000cd80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000cd84:	4ba0      	ldr	r3, [pc, #640]	@ (9000d008 <DrawChar+0x2b0>)
9000cd86:	68db      	ldr	r3, [r3, #12]
9000cd88:	4a9f      	ldr	r2, [pc, #636]	@ (9000d008 <DrawChar+0x2b0>)
9000cd8a:	015b      	lsls	r3, r3, #5
9000cd8c:	4413      	add	r3, r2
9000cd8e:	3308      	adds	r3, #8
9000cd90:	681b      	ldr	r3, [r3, #0]
9000cd92:	889b      	ldrh	r3, [r3, #4]
9000cd94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000cd98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cd9c:	3307      	adds	r3, #7
9000cd9e:	f023 0207 	bic.w	r2, r3, #7
9000cda2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cda6:	1ad3      	subs	r3, r2, r3
9000cda8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000cdac:	2300      	movs	r3, #0
9000cdae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000cdb2:	e11c      	b.n	9000cfee <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000cdb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cdb8:	3307      	adds	r3, #7
9000cdba:	08db      	lsrs	r3, r3, #3
9000cdbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000cdc0:	fb02 f303 	mul.w	r3, r2, r3
9000cdc4:	687a      	ldr	r2, [r7, #4]
9000cdc6:	4413      	add	r3, r2
9000cdc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000cdcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cdd0:	3307      	adds	r3, #7
9000cdd2:	08db      	lsrs	r3, r3, #3
9000cdd4:	2b01      	cmp	r3, #1
9000cdd6:	d002      	beq.n	9000cdde <DrawChar+0x86>
9000cdd8:	2b02      	cmp	r3, #2
9000cdda:	d006      	beq.n	9000cdea <DrawChar+0x92>
9000cddc:	e011      	b.n	9000ce02 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000cdde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000cde2:	781b      	ldrb	r3, [r3, #0]
9000cde4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000cde8:	e01d      	b.n	9000ce26 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000cdea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000cdee:	781b      	ldrb	r3, [r3, #0]
9000cdf0:	021b      	lsls	r3, r3, #8
9000cdf2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000cdf6:	3201      	adds	r2, #1
9000cdf8:	7812      	ldrb	r2, [r2, #0]
9000cdfa:	4313      	orrs	r3, r2
9000cdfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000ce00:	e011      	b.n	9000ce26 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000ce02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000ce06:	781b      	ldrb	r3, [r3, #0]
9000ce08:	041a      	lsls	r2, r3, #16
9000ce0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000ce0e:	3301      	adds	r3, #1
9000ce10:	781b      	ldrb	r3, [r3, #0]
9000ce12:	021b      	lsls	r3, r3, #8
9000ce14:	4313      	orrs	r3, r2
9000ce16:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000ce1a:	3202      	adds	r2, #2
9000ce1c:	7812      	ldrb	r2, [r2, #0]
9000ce1e:	4313      	orrs	r3, r2
9000ce20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000ce24:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000ce26:	4b78      	ldr	r3, [pc, #480]	@ (9000d008 <DrawChar+0x2b0>)
9000ce28:	68db      	ldr	r3, [r3, #12]
9000ce2a:	4a77      	ldr	r2, [pc, #476]	@ (9000d008 <DrawChar+0x2b0>)
9000ce2c:	015b      	lsls	r3, r3, #5
9000ce2e:	4413      	add	r3, r2
9000ce30:	331c      	adds	r3, #28
9000ce32:	681b      	ldr	r3, [r3, #0]
9000ce34:	2b02      	cmp	r3, #2
9000ce36:	f040 808c 	bne.w	9000cf52 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000ce3a:	2300      	movs	r3, #0
9000ce3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000ce40:	e074      	b.n	9000cf2c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000ce42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000ce46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000ce4a:	1ad2      	subs	r2, r2, r3
9000ce4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000ce50:	4413      	add	r3, r2
9000ce52:	3b01      	subs	r3, #1
9000ce54:	2201      	movs	r2, #1
9000ce56:	fa02 f303 	lsl.w	r3, r2, r3
9000ce5a:	461a      	mov	r2, r3
9000ce5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000ce60:	4013      	ands	r3, r2
9000ce62:	2b00      	cmp	r3, #0
9000ce64:	d02d      	beq.n	9000cec2 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000ce66:	4b68      	ldr	r3, [pc, #416]	@ (9000d008 <DrawChar+0x2b0>)
9000ce68:	68db      	ldr	r3, [r3, #12]
9000ce6a:	4a67      	ldr	r2, [pc, #412]	@ (9000d008 <DrawChar+0x2b0>)
9000ce6c:	015b      	lsls	r3, r3, #5
9000ce6e:	4413      	add	r3, r2
9000ce70:	681b      	ldr	r3, [r3, #0]
9000ce72:	08db      	lsrs	r3, r3, #3
9000ce74:	b29b      	uxth	r3, r3
9000ce76:	f003 031f 	and.w	r3, r3, #31
9000ce7a:	b29a      	uxth	r2, r3
9000ce7c:	4b62      	ldr	r3, [pc, #392]	@ (9000d008 <DrawChar+0x2b0>)
9000ce7e:	68db      	ldr	r3, [r3, #12]
9000ce80:	4961      	ldr	r1, [pc, #388]	@ (9000d008 <DrawChar+0x2b0>)
9000ce82:	015b      	lsls	r3, r3, #5
9000ce84:	440b      	add	r3, r1
9000ce86:	681b      	ldr	r3, [r3, #0]
9000ce88:	0a9b      	lsrs	r3, r3, #10
9000ce8a:	b29b      	uxth	r3, r3
9000ce8c:	015b      	lsls	r3, r3, #5
9000ce8e:	b29b      	uxth	r3, r3
9000ce90:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000ce94:	b29b      	uxth	r3, r3
9000ce96:	4313      	orrs	r3, r2
9000ce98:	b29a      	uxth	r2, r3
9000ce9a:	4b5b      	ldr	r3, [pc, #364]	@ (9000d008 <DrawChar+0x2b0>)
9000ce9c:	68db      	ldr	r3, [r3, #12]
9000ce9e:	495a      	ldr	r1, [pc, #360]	@ (9000d008 <DrawChar+0x2b0>)
9000cea0:	015b      	lsls	r3, r3, #5
9000cea2:	440b      	add	r3, r1
9000cea4:	681b      	ldr	r3, [r3, #0]
9000cea6:	0cdb      	lsrs	r3, r3, #19
9000cea8:	b29b      	uxth	r3, r3
9000ceaa:	02db      	lsls	r3, r3, #11
9000ceac:	b29b      	uxth	r3, r3
9000ceae:	4313      	orrs	r3, r2
9000ceb0:	b29a      	uxth	r2, r3
9000ceb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000ceb6:	005b      	lsls	r3, r3, #1
9000ceb8:	33c0      	adds	r3, #192	@ 0xc0
9000ceba:	443b      	add	r3, r7
9000cebc:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000cec0:	e02f      	b.n	9000cf22 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000cec2:	4b51      	ldr	r3, [pc, #324]	@ (9000d008 <DrawChar+0x2b0>)
9000cec4:	68db      	ldr	r3, [r3, #12]
9000cec6:	4a50      	ldr	r2, [pc, #320]	@ (9000d008 <DrawChar+0x2b0>)
9000cec8:	015b      	lsls	r3, r3, #5
9000ceca:	4413      	add	r3, r2
9000cecc:	3304      	adds	r3, #4
9000cece:	681b      	ldr	r3, [r3, #0]
9000ced0:	08db      	lsrs	r3, r3, #3
9000ced2:	b29b      	uxth	r3, r3
9000ced4:	f003 031f 	and.w	r3, r3, #31
9000ced8:	b29a      	uxth	r2, r3
9000ceda:	4b4b      	ldr	r3, [pc, #300]	@ (9000d008 <DrawChar+0x2b0>)
9000cedc:	68db      	ldr	r3, [r3, #12]
9000cede:	494a      	ldr	r1, [pc, #296]	@ (9000d008 <DrawChar+0x2b0>)
9000cee0:	015b      	lsls	r3, r3, #5
9000cee2:	440b      	add	r3, r1
9000cee4:	3304      	adds	r3, #4
9000cee6:	681b      	ldr	r3, [r3, #0]
9000cee8:	0a9b      	lsrs	r3, r3, #10
9000ceea:	b29b      	uxth	r3, r3
9000ceec:	015b      	lsls	r3, r3, #5
9000ceee:	b29b      	uxth	r3, r3
9000cef0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000cef4:	b29b      	uxth	r3, r3
9000cef6:	4313      	orrs	r3, r2
9000cef8:	b29a      	uxth	r2, r3
9000cefa:	4b43      	ldr	r3, [pc, #268]	@ (9000d008 <DrawChar+0x2b0>)
9000cefc:	68db      	ldr	r3, [r3, #12]
9000cefe:	4942      	ldr	r1, [pc, #264]	@ (9000d008 <DrawChar+0x2b0>)
9000cf00:	015b      	lsls	r3, r3, #5
9000cf02:	440b      	add	r3, r1
9000cf04:	3304      	adds	r3, #4
9000cf06:	681b      	ldr	r3, [r3, #0]
9000cf08:	0cdb      	lsrs	r3, r3, #19
9000cf0a:	b29b      	uxth	r3, r3
9000cf0c:	02db      	lsls	r3, r3, #11
9000cf0e:	b29b      	uxth	r3, r3
9000cf10:	4313      	orrs	r3, r2
9000cf12:	b29a      	uxth	r2, r3
9000cf14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cf18:	005b      	lsls	r3, r3, #1
9000cf1a:	33c0      	adds	r3, #192	@ 0xc0
9000cf1c:	443b      	add	r3, r7
9000cf1e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000cf22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cf26:	3301      	adds	r3, #1
9000cf28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000cf2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000cf30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cf34:	429a      	cmp	r2, r3
9000cf36:	d384      	bcc.n	9000ce42 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000cf38:	68b9      	ldr	r1, [r7, #8]
9000cf3a:	1c4b      	adds	r3, r1, #1
9000cf3c:	60bb      	str	r3, [r7, #8]
9000cf3e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000cf42:	2301      	movs	r3, #1
9000cf44:	9300      	str	r3, [sp, #0]
9000cf46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cf4a:	68f8      	ldr	r0, [r7, #12]
9000cf4c:	f7ff fdb4 	bl	9000cab8 <UTIL_LCD_FillRGBRect>
9000cf50:	e048      	b.n	9000cfe4 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000cf52:	2300      	movs	r3, #0
9000cf54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000cf58:	e032      	b.n	9000cfc0 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000cf5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000cf5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cf62:	1ad2      	subs	r2, r2, r3
9000cf64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000cf68:	4413      	add	r3, r2
9000cf6a:	3b01      	subs	r3, #1
9000cf6c:	2201      	movs	r2, #1
9000cf6e:	fa02 f303 	lsl.w	r3, r2, r3
9000cf72:	461a      	mov	r2, r3
9000cf74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000cf78:	4013      	ands	r3, r2
9000cf7a:	2b00      	cmp	r3, #0
9000cf7c:	d00d      	beq.n	9000cf9a <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000cf7e:	4b22      	ldr	r3, [pc, #136]	@ (9000d008 <DrawChar+0x2b0>)
9000cf80:	68db      	ldr	r3, [r3, #12]
9000cf82:	4a21      	ldr	r2, [pc, #132]	@ (9000d008 <DrawChar+0x2b0>)
9000cf84:	015b      	lsls	r3, r3, #5
9000cf86:	4413      	add	r3, r2
9000cf88:	681a      	ldr	r2, [r3, #0]
9000cf8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cf8e:	009b      	lsls	r3, r3, #2
9000cf90:	33c0      	adds	r3, #192	@ 0xc0
9000cf92:	443b      	add	r3, r7
9000cf94:	f843 2cac 	str.w	r2, [r3, #-172]
9000cf98:	e00d      	b.n	9000cfb6 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000cf9a:	4b1b      	ldr	r3, [pc, #108]	@ (9000d008 <DrawChar+0x2b0>)
9000cf9c:	68db      	ldr	r3, [r3, #12]
9000cf9e:	4a1a      	ldr	r2, [pc, #104]	@ (9000d008 <DrawChar+0x2b0>)
9000cfa0:	015b      	lsls	r3, r3, #5
9000cfa2:	4413      	add	r3, r2
9000cfa4:	3304      	adds	r3, #4
9000cfa6:	681a      	ldr	r2, [r3, #0]
9000cfa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cfac:	009b      	lsls	r3, r3, #2
9000cfae:	33c0      	adds	r3, #192	@ 0xc0
9000cfb0:	443b      	add	r3, r7
9000cfb2:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000cfb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000cfba:	3301      	adds	r3, #1
9000cfbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000cfc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000cfc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cfc8:	429a      	cmp	r2, r3
9000cfca:	d3c6      	bcc.n	9000cf5a <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000cfcc:	68b9      	ldr	r1, [r7, #8]
9000cfce:	1c4b      	adds	r3, r1, #1
9000cfd0:	60bb      	str	r3, [r7, #8]
9000cfd2:	f107 0214 	add.w	r2, r7, #20
9000cfd6:	2301      	movs	r3, #1
9000cfd8:	9300      	str	r3, [sp, #0]
9000cfda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000cfde:	68f8      	ldr	r0, [r7, #12]
9000cfe0:	f7ff fd6a 	bl	9000cab8 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000cfe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000cfe8:	3301      	adds	r3, #1
9000cfea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000cfee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000cff2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000cff6:	429a      	cmp	r2, r3
9000cff8:	f4ff aedc 	bcc.w	9000cdb4 <DrawChar+0x5c>
    }
  }
}
9000cffc:	bf00      	nop
9000cffe:	bf00      	nop
9000d000:	37c0      	adds	r7, #192	@ 0xc0
9000d002:	46bd      	mov	sp, r7
9000d004:	bd80      	pop	{r7, pc}
9000d006:	bf00      	nop
9000d008:	2000132c 	.word	0x2000132c

9000d00c <sbrk_aligned>:
9000d00c:	b570      	push	{r4, r5, r6, lr}
9000d00e:	4e0f      	ldr	r6, [pc, #60]	@ (9000d04c <sbrk_aligned+0x40>)
9000d010:	460c      	mov	r4, r1
9000d012:	6831      	ldr	r1, [r6, #0]
9000d014:	4605      	mov	r5, r0
9000d016:	b911      	cbnz	r1, 9000d01e <sbrk_aligned+0x12>
9000d018:	f000 fb0e 	bl	9000d638 <_sbrk_r>
9000d01c:	6030      	str	r0, [r6, #0]
9000d01e:	4621      	mov	r1, r4
9000d020:	4628      	mov	r0, r5
9000d022:	f000 fb09 	bl	9000d638 <_sbrk_r>
9000d026:	1c43      	adds	r3, r0, #1
9000d028:	d103      	bne.n	9000d032 <sbrk_aligned+0x26>
9000d02a:	f04f 34ff 	mov.w	r4, #4294967295
9000d02e:	4620      	mov	r0, r4
9000d030:	bd70      	pop	{r4, r5, r6, pc}
9000d032:	1cc4      	adds	r4, r0, #3
9000d034:	f024 0403 	bic.w	r4, r4, #3
9000d038:	42a0      	cmp	r0, r4
9000d03a:	d0f8      	beq.n	9000d02e <sbrk_aligned+0x22>
9000d03c:	1a21      	subs	r1, r4, r0
9000d03e:	4628      	mov	r0, r5
9000d040:	f000 fafa 	bl	9000d638 <_sbrk_r>
9000d044:	3001      	adds	r0, #1
9000d046:	d1f2      	bne.n	9000d02e <sbrk_aligned+0x22>
9000d048:	e7ef      	b.n	9000d02a <sbrk_aligned+0x1e>
9000d04a:	bf00      	nop
9000d04c:	20001398 	.word	0x20001398

9000d050 <_malloc_r>:
9000d050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000d054:	1ccd      	adds	r5, r1, #3
9000d056:	f025 0503 	bic.w	r5, r5, #3
9000d05a:	3508      	adds	r5, #8
9000d05c:	2d0c      	cmp	r5, #12
9000d05e:	bf38      	it	cc
9000d060:	250c      	movcc	r5, #12
9000d062:	2d00      	cmp	r5, #0
9000d064:	4606      	mov	r6, r0
9000d066:	db01      	blt.n	9000d06c <_malloc_r+0x1c>
9000d068:	42a9      	cmp	r1, r5
9000d06a:	d904      	bls.n	9000d076 <_malloc_r+0x26>
9000d06c:	230c      	movs	r3, #12
9000d06e:	6033      	str	r3, [r6, #0]
9000d070:	2000      	movs	r0, #0
9000d072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000d076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000d14c <_malloc_r+0xfc>
9000d07a:	f000 f869 	bl	9000d150 <__malloc_lock>
9000d07e:	f8d8 3000 	ldr.w	r3, [r8]
9000d082:	461c      	mov	r4, r3
9000d084:	bb44      	cbnz	r4, 9000d0d8 <_malloc_r+0x88>
9000d086:	4629      	mov	r1, r5
9000d088:	4630      	mov	r0, r6
9000d08a:	f7ff ffbf 	bl	9000d00c <sbrk_aligned>
9000d08e:	1c43      	adds	r3, r0, #1
9000d090:	4604      	mov	r4, r0
9000d092:	d158      	bne.n	9000d146 <_malloc_r+0xf6>
9000d094:	f8d8 4000 	ldr.w	r4, [r8]
9000d098:	4627      	mov	r7, r4
9000d09a:	2f00      	cmp	r7, #0
9000d09c:	d143      	bne.n	9000d126 <_malloc_r+0xd6>
9000d09e:	2c00      	cmp	r4, #0
9000d0a0:	d04b      	beq.n	9000d13a <_malloc_r+0xea>
9000d0a2:	6823      	ldr	r3, [r4, #0]
9000d0a4:	4639      	mov	r1, r7
9000d0a6:	4630      	mov	r0, r6
9000d0a8:	eb04 0903 	add.w	r9, r4, r3
9000d0ac:	f000 fac4 	bl	9000d638 <_sbrk_r>
9000d0b0:	4581      	cmp	r9, r0
9000d0b2:	d142      	bne.n	9000d13a <_malloc_r+0xea>
9000d0b4:	6821      	ldr	r1, [r4, #0]
9000d0b6:	1a6d      	subs	r5, r5, r1
9000d0b8:	4629      	mov	r1, r5
9000d0ba:	4630      	mov	r0, r6
9000d0bc:	f7ff ffa6 	bl	9000d00c <sbrk_aligned>
9000d0c0:	3001      	adds	r0, #1
9000d0c2:	d03a      	beq.n	9000d13a <_malloc_r+0xea>
9000d0c4:	6823      	ldr	r3, [r4, #0]
9000d0c6:	442b      	add	r3, r5
9000d0c8:	6023      	str	r3, [r4, #0]
9000d0ca:	f8d8 3000 	ldr.w	r3, [r8]
9000d0ce:	685a      	ldr	r2, [r3, #4]
9000d0d0:	bb62      	cbnz	r2, 9000d12c <_malloc_r+0xdc>
9000d0d2:	f8c8 7000 	str.w	r7, [r8]
9000d0d6:	e00f      	b.n	9000d0f8 <_malloc_r+0xa8>
9000d0d8:	6822      	ldr	r2, [r4, #0]
9000d0da:	1b52      	subs	r2, r2, r5
9000d0dc:	d420      	bmi.n	9000d120 <_malloc_r+0xd0>
9000d0de:	2a0b      	cmp	r2, #11
9000d0e0:	d917      	bls.n	9000d112 <_malloc_r+0xc2>
9000d0e2:	1961      	adds	r1, r4, r5
9000d0e4:	42a3      	cmp	r3, r4
9000d0e6:	6025      	str	r5, [r4, #0]
9000d0e8:	bf18      	it	ne
9000d0ea:	6059      	strne	r1, [r3, #4]
9000d0ec:	6863      	ldr	r3, [r4, #4]
9000d0ee:	bf08      	it	eq
9000d0f0:	f8c8 1000 	streq.w	r1, [r8]
9000d0f4:	5162      	str	r2, [r4, r5]
9000d0f6:	604b      	str	r3, [r1, #4]
9000d0f8:	4630      	mov	r0, r6
9000d0fa:	f000 f82f 	bl	9000d15c <__malloc_unlock>
9000d0fe:	f104 000b 	add.w	r0, r4, #11
9000d102:	1d23      	adds	r3, r4, #4
9000d104:	f020 0007 	bic.w	r0, r0, #7
9000d108:	1ac2      	subs	r2, r0, r3
9000d10a:	bf1c      	itt	ne
9000d10c:	1a1b      	subne	r3, r3, r0
9000d10e:	50a3      	strne	r3, [r4, r2]
9000d110:	e7af      	b.n	9000d072 <_malloc_r+0x22>
9000d112:	6862      	ldr	r2, [r4, #4]
9000d114:	42a3      	cmp	r3, r4
9000d116:	bf0c      	ite	eq
9000d118:	f8c8 2000 	streq.w	r2, [r8]
9000d11c:	605a      	strne	r2, [r3, #4]
9000d11e:	e7eb      	b.n	9000d0f8 <_malloc_r+0xa8>
9000d120:	4623      	mov	r3, r4
9000d122:	6864      	ldr	r4, [r4, #4]
9000d124:	e7ae      	b.n	9000d084 <_malloc_r+0x34>
9000d126:	463c      	mov	r4, r7
9000d128:	687f      	ldr	r7, [r7, #4]
9000d12a:	e7b6      	b.n	9000d09a <_malloc_r+0x4a>
9000d12c:	461a      	mov	r2, r3
9000d12e:	685b      	ldr	r3, [r3, #4]
9000d130:	42a3      	cmp	r3, r4
9000d132:	d1fb      	bne.n	9000d12c <_malloc_r+0xdc>
9000d134:	2300      	movs	r3, #0
9000d136:	6053      	str	r3, [r2, #4]
9000d138:	e7de      	b.n	9000d0f8 <_malloc_r+0xa8>
9000d13a:	230c      	movs	r3, #12
9000d13c:	6033      	str	r3, [r6, #0]
9000d13e:	4630      	mov	r0, r6
9000d140:	f000 f80c 	bl	9000d15c <__malloc_unlock>
9000d144:	e794      	b.n	9000d070 <_malloc_r+0x20>
9000d146:	6005      	str	r5, [r0, #0]
9000d148:	e7d6      	b.n	9000d0f8 <_malloc_r+0xa8>
9000d14a:	bf00      	nop
9000d14c:	2000139c 	.word	0x2000139c

9000d150 <__malloc_lock>:
9000d150:	4801      	ldr	r0, [pc, #4]	@ (9000d158 <__malloc_lock+0x8>)
9000d152:	f000 babe 	b.w	9000d6d2 <__retarget_lock_acquire_recursive>
9000d156:	bf00      	nop
9000d158:	200014e0 	.word	0x200014e0

9000d15c <__malloc_unlock>:
9000d15c:	4801      	ldr	r0, [pc, #4]	@ (9000d164 <__malloc_unlock+0x8>)
9000d15e:	f000 bab9 	b.w	9000d6d4 <__retarget_lock_release_recursive>
9000d162:	bf00      	nop
9000d164:	200014e0 	.word	0x200014e0

9000d168 <std>:
9000d168:	2300      	movs	r3, #0
9000d16a:	b510      	push	{r4, lr}
9000d16c:	4604      	mov	r4, r0
9000d16e:	e9c0 3300 	strd	r3, r3, [r0]
9000d172:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000d176:	6083      	str	r3, [r0, #8]
9000d178:	8181      	strh	r1, [r0, #12]
9000d17a:	6643      	str	r3, [r0, #100]	@ 0x64
9000d17c:	81c2      	strh	r2, [r0, #14]
9000d17e:	6183      	str	r3, [r0, #24]
9000d180:	4619      	mov	r1, r3
9000d182:	2208      	movs	r2, #8
9000d184:	305c      	adds	r0, #92	@ 0x5c
9000d186:	f000 fa1b 	bl	9000d5c0 <memset>
9000d18a:	4b0d      	ldr	r3, [pc, #52]	@ (9000d1c0 <std+0x58>)
9000d18c:	6263      	str	r3, [r4, #36]	@ 0x24
9000d18e:	4b0d      	ldr	r3, [pc, #52]	@ (9000d1c4 <std+0x5c>)
9000d190:	62a3      	str	r3, [r4, #40]	@ 0x28
9000d192:	4b0d      	ldr	r3, [pc, #52]	@ (9000d1c8 <std+0x60>)
9000d194:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000d196:	4b0d      	ldr	r3, [pc, #52]	@ (9000d1cc <std+0x64>)
9000d198:	6323      	str	r3, [r4, #48]	@ 0x30
9000d19a:	4b0d      	ldr	r3, [pc, #52]	@ (9000d1d0 <std+0x68>)
9000d19c:	6224      	str	r4, [r4, #32]
9000d19e:	429c      	cmp	r4, r3
9000d1a0:	d006      	beq.n	9000d1b0 <std+0x48>
9000d1a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000d1a6:	4294      	cmp	r4, r2
9000d1a8:	d002      	beq.n	9000d1b0 <std+0x48>
9000d1aa:	33d0      	adds	r3, #208	@ 0xd0
9000d1ac:	429c      	cmp	r4, r3
9000d1ae:	d105      	bne.n	9000d1bc <std+0x54>
9000d1b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000d1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000d1b8:	f000 ba8a 	b.w	9000d6d0 <__retarget_lock_init_recursive>
9000d1bc:	bd10      	pop	{r4, pc}
9000d1be:	bf00      	nop
9000d1c0:	9000d411 	.word	0x9000d411
9000d1c4:	9000d433 	.word	0x9000d433
9000d1c8:	9000d46b 	.word	0x9000d46b
9000d1cc:	9000d48f 	.word	0x9000d48f
9000d1d0:	200013a0 	.word	0x200013a0

9000d1d4 <stdio_exit_handler>:
9000d1d4:	4a02      	ldr	r2, [pc, #8]	@ (9000d1e0 <stdio_exit_handler+0xc>)
9000d1d6:	4903      	ldr	r1, [pc, #12]	@ (9000d1e4 <stdio_exit_handler+0x10>)
9000d1d8:	4803      	ldr	r0, [pc, #12]	@ (9000d1e8 <stdio_exit_handler+0x14>)
9000d1da:	f000 b869 	b.w	9000d2b0 <_fwalk_sglue>
9000d1de:	bf00      	nop
9000d1e0:	20000070 	.word	0x20000070
9000d1e4:	9000e0dd 	.word	0x9000e0dd
9000d1e8:	20000080 	.word	0x20000080

9000d1ec <cleanup_stdio>:
9000d1ec:	6841      	ldr	r1, [r0, #4]
9000d1ee:	4b0c      	ldr	r3, [pc, #48]	@ (9000d220 <cleanup_stdio+0x34>)
9000d1f0:	4299      	cmp	r1, r3
9000d1f2:	b510      	push	{r4, lr}
9000d1f4:	4604      	mov	r4, r0
9000d1f6:	d001      	beq.n	9000d1fc <cleanup_stdio+0x10>
9000d1f8:	f000 ff70 	bl	9000e0dc <_fflush_r>
9000d1fc:	68a1      	ldr	r1, [r4, #8]
9000d1fe:	4b09      	ldr	r3, [pc, #36]	@ (9000d224 <cleanup_stdio+0x38>)
9000d200:	4299      	cmp	r1, r3
9000d202:	d002      	beq.n	9000d20a <cleanup_stdio+0x1e>
9000d204:	4620      	mov	r0, r4
9000d206:	f000 ff69 	bl	9000e0dc <_fflush_r>
9000d20a:	68e1      	ldr	r1, [r4, #12]
9000d20c:	4b06      	ldr	r3, [pc, #24]	@ (9000d228 <cleanup_stdio+0x3c>)
9000d20e:	4299      	cmp	r1, r3
9000d210:	d004      	beq.n	9000d21c <cleanup_stdio+0x30>
9000d212:	4620      	mov	r0, r4
9000d214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000d218:	f000 bf60 	b.w	9000e0dc <_fflush_r>
9000d21c:	bd10      	pop	{r4, pc}
9000d21e:	bf00      	nop
9000d220:	200013a0 	.word	0x200013a0
9000d224:	20001408 	.word	0x20001408
9000d228:	20001470 	.word	0x20001470

9000d22c <global_stdio_init.part.0>:
9000d22c:	b510      	push	{r4, lr}
9000d22e:	4b0b      	ldr	r3, [pc, #44]	@ (9000d25c <global_stdio_init.part.0+0x30>)
9000d230:	4c0b      	ldr	r4, [pc, #44]	@ (9000d260 <global_stdio_init.part.0+0x34>)
9000d232:	4a0c      	ldr	r2, [pc, #48]	@ (9000d264 <global_stdio_init.part.0+0x38>)
9000d234:	601a      	str	r2, [r3, #0]
9000d236:	4620      	mov	r0, r4
9000d238:	2200      	movs	r2, #0
9000d23a:	2104      	movs	r1, #4
9000d23c:	f7ff ff94 	bl	9000d168 <std>
9000d240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000d244:	2201      	movs	r2, #1
9000d246:	2109      	movs	r1, #9
9000d248:	f7ff ff8e 	bl	9000d168 <std>
9000d24c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000d250:	2202      	movs	r2, #2
9000d252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000d256:	2112      	movs	r1, #18
9000d258:	f7ff bf86 	b.w	9000d168 <std>
9000d25c:	200014d8 	.word	0x200014d8
9000d260:	200013a0 	.word	0x200013a0
9000d264:	9000d1d5 	.word	0x9000d1d5

9000d268 <__sfp_lock_acquire>:
9000d268:	4801      	ldr	r0, [pc, #4]	@ (9000d270 <__sfp_lock_acquire+0x8>)
9000d26a:	f000 ba32 	b.w	9000d6d2 <__retarget_lock_acquire_recursive>
9000d26e:	bf00      	nop
9000d270:	200014e1 	.word	0x200014e1

9000d274 <__sfp_lock_release>:
9000d274:	4801      	ldr	r0, [pc, #4]	@ (9000d27c <__sfp_lock_release+0x8>)
9000d276:	f000 ba2d 	b.w	9000d6d4 <__retarget_lock_release_recursive>
9000d27a:	bf00      	nop
9000d27c:	200014e1 	.word	0x200014e1

9000d280 <__sinit>:
9000d280:	b510      	push	{r4, lr}
9000d282:	4604      	mov	r4, r0
9000d284:	f7ff fff0 	bl	9000d268 <__sfp_lock_acquire>
9000d288:	6a23      	ldr	r3, [r4, #32]
9000d28a:	b11b      	cbz	r3, 9000d294 <__sinit+0x14>
9000d28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000d290:	f7ff bff0 	b.w	9000d274 <__sfp_lock_release>
9000d294:	4b04      	ldr	r3, [pc, #16]	@ (9000d2a8 <__sinit+0x28>)
9000d296:	6223      	str	r3, [r4, #32]
9000d298:	4b04      	ldr	r3, [pc, #16]	@ (9000d2ac <__sinit+0x2c>)
9000d29a:	681b      	ldr	r3, [r3, #0]
9000d29c:	2b00      	cmp	r3, #0
9000d29e:	d1f5      	bne.n	9000d28c <__sinit+0xc>
9000d2a0:	f7ff ffc4 	bl	9000d22c <global_stdio_init.part.0>
9000d2a4:	e7f2      	b.n	9000d28c <__sinit+0xc>
9000d2a6:	bf00      	nop
9000d2a8:	9000d1ed 	.word	0x9000d1ed
9000d2ac:	200014d8 	.word	0x200014d8

9000d2b0 <_fwalk_sglue>:
9000d2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000d2b4:	4607      	mov	r7, r0
9000d2b6:	4688      	mov	r8, r1
9000d2b8:	4614      	mov	r4, r2
9000d2ba:	2600      	movs	r6, #0
9000d2bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000d2c0:	f1b9 0901 	subs.w	r9, r9, #1
9000d2c4:	d505      	bpl.n	9000d2d2 <_fwalk_sglue+0x22>
9000d2c6:	6824      	ldr	r4, [r4, #0]
9000d2c8:	2c00      	cmp	r4, #0
9000d2ca:	d1f7      	bne.n	9000d2bc <_fwalk_sglue+0xc>
9000d2cc:	4630      	mov	r0, r6
9000d2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000d2d2:	89ab      	ldrh	r3, [r5, #12]
9000d2d4:	2b01      	cmp	r3, #1
9000d2d6:	d907      	bls.n	9000d2e8 <_fwalk_sglue+0x38>
9000d2d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000d2dc:	3301      	adds	r3, #1
9000d2de:	d003      	beq.n	9000d2e8 <_fwalk_sglue+0x38>
9000d2e0:	4629      	mov	r1, r5
9000d2e2:	4638      	mov	r0, r7
9000d2e4:	47c0      	blx	r8
9000d2e6:	4306      	orrs	r6, r0
9000d2e8:	3568      	adds	r5, #104	@ 0x68
9000d2ea:	e7e9      	b.n	9000d2c0 <_fwalk_sglue+0x10>

9000d2ec <iprintf>:
9000d2ec:	b40f      	push	{r0, r1, r2, r3}
9000d2ee:	b507      	push	{r0, r1, r2, lr}
9000d2f0:	4906      	ldr	r1, [pc, #24]	@ (9000d30c <iprintf+0x20>)
9000d2f2:	ab04      	add	r3, sp, #16
9000d2f4:	6808      	ldr	r0, [r1, #0]
9000d2f6:	f853 2b04 	ldr.w	r2, [r3], #4
9000d2fa:	6881      	ldr	r1, [r0, #8]
9000d2fc:	9301      	str	r3, [sp, #4]
9000d2fe:	f000 fbc5 	bl	9000da8c <_vfiprintf_r>
9000d302:	b003      	add	sp, #12
9000d304:	f85d eb04 	ldr.w	lr, [sp], #4
9000d308:	b004      	add	sp, #16
9000d30a:	4770      	bx	lr
9000d30c:	2000007c 	.word	0x2000007c

9000d310 <_puts_r>:
9000d310:	6a03      	ldr	r3, [r0, #32]
9000d312:	b570      	push	{r4, r5, r6, lr}
9000d314:	6884      	ldr	r4, [r0, #8]
9000d316:	4605      	mov	r5, r0
9000d318:	460e      	mov	r6, r1
9000d31a:	b90b      	cbnz	r3, 9000d320 <_puts_r+0x10>
9000d31c:	f7ff ffb0 	bl	9000d280 <__sinit>
9000d320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d322:	07db      	lsls	r3, r3, #31
9000d324:	d405      	bmi.n	9000d332 <_puts_r+0x22>
9000d326:	89a3      	ldrh	r3, [r4, #12]
9000d328:	0598      	lsls	r0, r3, #22
9000d32a:	d402      	bmi.n	9000d332 <_puts_r+0x22>
9000d32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d32e:	f000 f9d0 	bl	9000d6d2 <__retarget_lock_acquire_recursive>
9000d332:	89a3      	ldrh	r3, [r4, #12]
9000d334:	0719      	lsls	r1, r3, #28
9000d336:	d502      	bpl.n	9000d33e <_puts_r+0x2e>
9000d338:	6923      	ldr	r3, [r4, #16]
9000d33a:	2b00      	cmp	r3, #0
9000d33c:	d135      	bne.n	9000d3aa <_puts_r+0x9a>
9000d33e:	4621      	mov	r1, r4
9000d340:	4628      	mov	r0, r5
9000d342:	f000 f8e7 	bl	9000d514 <__swsetup_r>
9000d346:	b380      	cbz	r0, 9000d3aa <_puts_r+0x9a>
9000d348:	f04f 35ff 	mov.w	r5, #4294967295
9000d34c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d34e:	07da      	lsls	r2, r3, #31
9000d350:	d405      	bmi.n	9000d35e <_puts_r+0x4e>
9000d352:	89a3      	ldrh	r3, [r4, #12]
9000d354:	059b      	lsls	r3, r3, #22
9000d356:	d402      	bmi.n	9000d35e <_puts_r+0x4e>
9000d358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d35a:	f000 f9bb 	bl	9000d6d4 <__retarget_lock_release_recursive>
9000d35e:	4628      	mov	r0, r5
9000d360:	bd70      	pop	{r4, r5, r6, pc}
9000d362:	2b00      	cmp	r3, #0
9000d364:	da04      	bge.n	9000d370 <_puts_r+0x60>
9000d366:	69a2      	ldr	r2, [r4, #24]
9000d368:	429a      	cmp	r2, r3
9000d36a:	dc17      	bgt.n	9000d39c <_puts_r+0x8c>
9000d36c:	290a      	cmp	r1, #10
9000d36e:	d015      	beq.n	9000d39c <_puts_r+0x8c>
9000d370:	6823      	ldr	r3, [r4, #0]
9000d372:	1c5a      	adds	r2, r3, #1
9000d374:	6022      	str	r2, [r4, #0]
9000d376:	7019      	strb	r1, [r3, #0]
9000d378:	68a3      	ldr	r3, [r4, #8]
9000d37a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000d37e:	3b01      	subs	r3, #1
9000d380:	60a3      	str	r3, [r4, #8]
9000d382:	2900      	cmp	r1, #0
9000d384:	d1ed      	bne.n	9000d362 <_puts_r+0x52>
9000d386:	2b00      	cmp	r3, #0
9000d388:	da11      	bge.n	9000d3ae <_puts_r+0x9e>
9000d38a:	4622      	mov	r2, r4
9000d38c:	210a      	movs	r1, #10
9000d38e:	4628      	mov	r0, r5
9000d390:	f000 f881 	bl	9000d496 <__swbuf_r>
9000d394:	3001      	adds	r0, #1
9000d396:	d0d7      	beq.n	9000d348 <_puts_r+0x38>
9000d398:	250a      	movs	r5, #10
9000d39a:	e7d7      	b.n	9000d34c <_puts_r+0x3c>
9000d39c:	4622      	mov	r2, r4
9000d39e:	4628      	mov	r0, r5
9000d3a0:	f000 f879 	bl	9000d496 <__swbuf_r>
9000d3a4:	3001      	adds	r0, #1
9000d3a6:	d1e7      	bne.n	9000d378 <_puts_r+0x68>
9000d3a8:	e7ce      	b.n	9000d348 <_puts_r+0x38>
9000d3aa:	3e01      	subs	r6, #1
9000d3ac:	e7e4      	b.n	9000d378 <_puts_r+0x68>
9000d3ae:	6823      	ldr	r3, [r4, #0]
9000d3b0:	1c5a      	adds	r2, r3, #1
9000d3b2:	6022      	str	r2, [r4, #0]
9000d3b4:	220a      	movs	r2, #10
9000d3b6:	701a      	strb	r2, [r3, #0]
9000d3b8:	e7ee      	b.n	9000d398 <_puts_r+0x88>
	...

9000d3bc <puts>:
9000d3bc:	4b02      	ldr	r3, [pc, #8]	@ (9000d3c8 <puts+0xc>)
9000d3be:	4601      	mov	r1, r0
9000d3c0:	6818      	ldr	r0, [r3, #0]
9000d3c2:	f7ff bfa5 	b.w	9000d310 <_puts_r>
9000d3c6:	bf00      	nop
9000d3c8:	2000007c 	.word	0x2000007c

9000d3cc <siprintf>:
9000d3cc:	b40e      	push	{r1, r2, r3}
9000d3ce:	b510      	push	{r4, lr}
9000d3d0:	b09d      	sub	sp, #116	@ 0x74
9000d3d2:	ab1f      	add	r3, sp, #124	@ 0x7c
9000d3d4:	9002      	str	r0, [sp, #8]
9000d3d6:	9006      	str	r0, [sp, #24]
9000d3d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
9000d3dc:	480a      	ldr	r0, [pc, #40]	@ (9000d408 <siprintf+0x3c>)
9000d3de:	9107      	str	r1, [sp, #28]
9000d3e0:	9104      	str	r1, [sp, #16]
9000d3e2:	490a      	ldr	r1, [pc, #40]	@ (9000d40c <siprintf+0x40>)
9000d3e4:	f853 2b04 	ldr.w	r2, [r3], #4
9000d3e8:	9105      	str	r1, [sp, #20]
9000d3ea:	2400      	movs	r4, #0
9000d3ec:	a902      	add	r1, sp, #8
9000d3ee:	6800      	ldr	r0, [r0, #0]
9000d3f0:	9301      	str	r3, [sp, #4]
9000d3f2:	941b      	str	r4, [sp, #108]	@ 0x6c
9000d3f4:	f000 fa24 	bl	9000d840 <_svfiprintf_r>
9000d3f8:	9b02      	ldr	r3, [sp, #8]
9000d3fa:	701c      	strb	r4, [r3, #0]
9000d3fc:	b01d      	add	sp, #116	@ 0x74
9000d3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000d402:	b003      	add	sp, #12
9000d404:	4770      	bx	lr
9000d406:	bf00      	nop
9000d408:	2000007c 	.word	0x2000007c
9000d40c:	ffff0208 	.word	0xffff0208

9000d410 <__sread>:
9000d410:	b510      	push	{r4, lr}
9000d412:	460c      	mov	r4, r1
9000d414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d418:	f000 f8fc 	bl	9000d614 <_read_r>
9000d41c:	2800      	cmp	r0, #0
9000d41e:	bfab      	itete	ge
9000d420:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000d422:	89a3      	ldrhlt	r3, [r4, #12]
9000d424:	181b      	addge	r3, r3, r0
9000d426:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000d42a:	bfac      	ite	ge
9000d42c:	6563      	strge	r3, [r4, #84]	@ 0x54
9000d42e:	81a3      	strhlt	r3, [r4, #12]
9000d430:	bd10      	pop	{r4, pc}

9000d432 <__swrite>:
9000d432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d436:	461f      	mov	r7, r3
9000d438:	898b      	ldrh	r3, [r1, #12]
9000d43a:	05db      	lsls	r3, r3, #23
9000d43c:	4605      	mov	r5, r0
9000d43e:	460c      	mov	r4, r1
9000d440:	4616      	mov	r6, r2
9000d442:	d505      	bpl.n	9000d450 <__swrite+0x1e>
9000d444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d448:	2302      	movs	r3, #2
9000d44a:	2200      	movs	r2, #0
9000d44c:	f000 f8d0 	bl	9000d5f0 <_lseek_r>
9000d450:	89a3      	ldrh	r3, [r4, #12]
9000d452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000d456:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000d45a:	81a3      	strh	r3, [r4, #12]
9000d45c:	4632      	mov	r2, r6
9000d45e:	463b      	mov	r3, r7
9000d460:	4628      	mov	r0, r5
9000d462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000d466:	f000 b8f7 	b.w	9000d658 <_write_r>

9000d46a <__sseek>:
9000d46a:	b510      	push	{r4, lr}
9000d46c:	460c      	mov	r4, r1
9000d46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d472:	f000 f8bd 	bl	9000d5f0 <_lseek_r>
9000d476:	1c43      	adds	r3, r0, #1
9000d478:	89a3      	ldrh	r3, [r4, #12]
9000d47a:	bf15      	itete	ne
9000d47c:	6560      	strne	r0, [r4, #84]	@ 0x54
9000d47e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000d482:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000d486:	81a3      	strheq	r3, [r4, #12]
9000d488:	bf18      	it	ne
9000d48a:	81a3      	strhne	r3, [r4, #12]
9000d48c:	bd10      	pop	{r4, pc}

9000d48e <__sclose>:
9000d48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d492:	f000 b89d 	b.w	9000d5d0 <_close_r>

9000d496 <__swbuf_r>:
9000d496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d498:	460e      	mov	r6, r1
9000d49a:	4614      	mov	r4, r2
9000d49c:	4605      	mov	r5, r0
9000d49e:	b118      	cbz	r0, 9000d4a8 <__swbuf_r+0x12>
9000d4a0:	6a03      	ldr	r3, [r0, #32]
9000d4a2:	b90b      	cbnz	r3, 9000d4a8 <__swbuf_r+0x12>
9000d4a4:	f7ff feec 	bl	9000d280 <__sinit>
9000d4a8:	69a3      	ldr	r3, [r4, #24]
9000d4aa:	60a3      	str	r3, [r4, #8]
9000d4ac:	89a3      	ldrh	r3, [r4, #12]
9000d4ae:	071a      	lsls	r2, r3, #28
9000d4b0:	d501      	bpl.n	9000d4b6 <__swbuf_r+0x20>
9000d4b2:	6923      	ldr	r3, [r4, #16]
9000d4b4:	b943      	cbnz	r3, 9000d4c8 <__swbuf_r+0x32>
9000d4b6:	4621      	mov	r1, r4
9000d4b8:	4628      	mov	r0, r5
9000d4ba:	f000 f82b 	bl	9000d514 <__swsetup_r>
9000d4be:	b118      	cbz	r0, 9000d4c8 <__swbuf_r+0x32>
9000d4c0:	f04f 37ff 	mov.w	r7, #4294967295
9000d4c4:	4638      	mov	r0, r7
9000d4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000d4c8:	6823      	ldr	r3, [r4, #0]
9000d4ca:	6922      	ldr	r2, [r4, #16]
9000d4cc:	1a98      	subs	r0, r3, r2
9000d4ce:	6963      	ldr	r3, [r4, #20]
9000d4d0:	b2f6      	uxtb	r6, r6
9000d4d2:	4283      	cmp	r3, r0
9000d4d4:	4637      	mov	r7, r6
9000d4d6:	dc05      	bgt.n	9000d4e4 <__swbuf_r+0x4e>
9000d4d8:	4621      	mov	r1, r4
9000d4da:	4628      	mov	r0, r5
9000d4dc:	f000 fdfe 	bl	9000e0dc <_fflush_r>
9000d4e0:	2800      	cmp	r0, #0
9000d4e2:	d1ed      	bne.n	9000d4c0 <__swbuf_r+0x2a>
9000d4e4:	68a3      	ldr	r3, [r4, #8]
9000d4e6:	3b01      	subs	r3, #1
9000d4e8:	60a3      	str	r3, [r4, #8]
9000d4ea:	6823      	ldr	r3, [r4, #0]
9000d4ec:	1c5a      	adds	r2, r3, #1
9000d4ee:	6022      	str	r2, [r4, #0]
9000d4f0:	701e      	strb	r6, [r3, #0]
9000d4f2:	6962      	ldr	r2, [r4, #20]
9000d4f4:	1c43      	adds	r3, r0, #1
9000d4f6:	429a      	cmp	r2, r3
9000d4f8:	d004      	beq.n	9000d504 <__swbuf_r+0x6e>
9000d4fa:	89a3      	ldrh	r3, [r4, #12]
9000d4fc:	07db      	lsls	r3, r3, #31
9000d4fe:	d5e1      	bpl.n	9000d4c4 <__swbuf_r+0x2e>
9000d500:	2e0a      	cmp	r6, #10
9000d502:	d1df      	bne.n	9000d4c4 <__swbuf_r+0x2e>
9000d504:	4621      	mov	r1, r4
9000d506:	4628      	mov	r0, r5
9000d508:	f000 fde8 	bl	9000e0dc <_fflush_r>
9000d50c:	2800      	cmp	r0, #0
9000d50e:	d0d9      	beq.n	9000d4c4 <__swbuf_r+0x2e>
9000d510:	e7d6      	b.n	9000d4c0 <__swbuf_r+0x2a>
	...

9000d514 <__swsetup_r>:
9000d514:	b538      	push	{r3, r4, r5, lr}
9000d516:	4b29      	ldr	r3, [pc, #164]	@ (9000d5bc <__swsetup_r+0xa8>)
9000d518:	4605      	mov	r5, r0
9000d51a:	6818      	ldr	r0, [r3, #0]
9000d51c:	460c      	mov	r4, r1
9000d51e:	b118      	cbz	r0, 9000d528 <__swsetup_r+0x14>
9000d520:	6a03      	ldr	r3, [r0, #32]
9000d522:	b90b      	cbnz	r3, 9000d528 <__swsetup_r+0x14>
9000d524:	f7ff feac 	bl	9000d280 <__sinit>
9000d528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d52c:	0719      	lsls	r1, r3, #28
9000d52e:	d422      	bmi.n	9000d576 <__swsetup_r+0x62>
9000d530:	06da      	lsls	r2, r3, #27
9000d532:	d407      	bmi.n	9000d544 <__swsetup_r+0x30>
9000d534:	2209      	movs	r2, #9
9000d536:	602a      	str	r2, [r5, #0]
9000d538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d53c:	81a3      	strh	r3, [r4, #12]
9000d53e:	f04f 30ff 	mov.w	r0, #4294967295
9000d542:	e033      	b.n	9000d5ac <__swsetup_r+0x98>
9000d544:	0758      	lsls	r0, r3, #29
9000d546:	d512      	bpl.n	9000d56e <__swsetup_r+0x5a>
9000d548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d54a:	b141      	cbz	r1, 9000d55e <__swsetup_r+0x4a>
9000d54c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d550:	4299      	cmp	r1, r3
9000d552:	d002      	beq.n	9000d55a <__swsetup_r+0x46>
9000d554:	4628      	mov	r0, r5
9000d556:	f000 f8cd 	bl	9000d6f4 <_free_r>
9000d55a:	2300      	movs	r3, #0
9000d55c:	6363      	str	r3, [r4, #52]	@ 0x34
9000d55e:	89a3      	ldrh	r3, [r4, #12]
9000d560:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000d564:	81a3      	strh	r3, [r4, #12]
9000d566:	2300      	movs	r3, #0
9000d568:	6063      	str	r3, [r4, #4]
9000d56a:	6923      	ldr	r3, [r4, #16]
9000d56c:	6023      	str	r3, [r4, #0]
9000d56e:	89a3      	ldrh	r3, [r4, #12]
9000d570:	f043 0308 	orr.w	r3, r3, #8
9000d574:	81a3      	strh	r3, [r4, #12]
9000d576:	6923      	ldr	r3, [r4, #16]
9000d578:	b94b      	cbnz	r3, 9000d58e <__swsetup_r+0x7a>
9000d57a:	89a3      	ldrh	r3, [r4, #12]
9000d57c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000d580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000d584:	d003      	beq.n	9000d58e <__swsetup_r+0x7a>
9000d586:	4621      	mov	r1, r4
9000d588:	4628      	mov	r0, r5
9000d58a:	f000 fdf5 	bl	9000e178 <__smakebuf_r>
9000d58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d592:	f013 0201 	ands.w	r2, r3, #1
9000d596:	d00a      	beq.n	9000d5ae <__swsetup_r+0x9a>
9000d598:	2200      	movs	r2, #0
9000d59a:	60a2      	str	r2, [r4, #8]
9000d59c:	6962      	ldr	r2, [r4, #20]
9000d59e:	4252      	negs	r2, r2
9000d5a0:	61a2      	str	r2, [r4, #24]
9000d5a2:	6922      	ldr	r2, [r4, #16]
9000d5a4:	b942      	cbnz	r2, 9000d5b8 <__swsetup_r+0xa4>
9000d5a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000d5aa:	d1c5      	bne.n	9000d538 <__swsetup_r+0x24>
9000d5ac:	bd38      	pop	{r3, r4, r5, pc}
9000d5ae:	0799      	lsls	r1, r3, #30
9000d5b0:	bf58      	it	pl
9000d5b2:	6962      	ldrpl	r2, [r4, #20]
9000d5b4:	60a2      	str	r2, [r4, #8]
9000d5b6:	e7f4      	b.n	9000d5a2 <__swsetup_r+0x8e>
9000d5b8:	2000      	movs	r0, #0
9000d5ba:	e7f7      	b.n	9000d5ac <__swsetup_r+0x98>
9000d5bc:	2000007c 	.word	0x2000007c

9000d5c0 <memset>:
9000d5c0:	4402      	add	r2, r0
9000d5c2:	4603      	mov	r3, r0
9000d5c4:	4293      	cmp	r3, r2
9000d5c6:	d100      	bne.n	9000d5ca <memset+0xa>
9000d5c8:	4770      	bx	lr
9000d5ca:	f803 1b01 	strb.w	r1, [r3], #1
9000d5ce:	e7f9      	b.n	9000d5c4 <memset+0x4>

9000d5d0 <_close_r>:
9000d5d0:	b538      	push	{r3, r4, r5, lr}
9000d5d2:	4d06      	ldr	r5, [pc, #24]	@ (9000d5ec <_close_r+0x1c>)
9000d5d4:	2300      	movs	r3, #0
9000d5d6:	4604      	mov	r4, r0
9000d5d8:	4608      	mov	r0, r1
9000d5da:	602b      	str	r3, [r5, #0]
9000d5dc:	f7f3 fe39 	bl	90001252 <_close>
9000d5e0:	1c43      	adds	r3, r0, #1
9000d5e2:	d102      	bne.n	9000d5ea <_close_r+0x1a>
9000d5e4:	682b      	ldr	r3, [r5, #0]
9000d5e6:	b103      	cbz	r3, 9000d5ea <_close_r+0x1a>
9000d5e8:	6023      	str	r3, [r4, #0]
9000d5ea:	bd38      	pop	{r3, r4, r5, pc}
9000d5ec:	200014dc 	.word	0x200014dc

9000d5f0 <_lseek_r>:
9000d5f0:	b538      	push	{r3, r4, r5, lr}
9000d5f2:	4d07      	ldr	r5, [pc, #28]	@ (9000d610 <_lseek_r+0x20>)
9000d5f4:	4604      	mov	r4, r0
9000d5f6:	4608      	mov	r0, r1
9000d5f8:	4611      	mov	r1, r2
9000d5fa:	2200      	movs	r2, #0
9000d5fc:	602a      	str	r2, [r5, #0]
9000d5fe:	461a      	mov	r2, r3
9000d600:	f7f3 fe4e 	bl	900012a0 <_lseek>
9000d604:	1c43      	adds	r3, r0, #1
9000d606:	d102      	bne.n	9000d60e <_lseek_r+0x1e>
9000d608:	682b      	ldr	r3, [r5, #0]
9000d60a:	b103      	cbz	r3, 9000d60e <_lseek_r+0x1e>
9000d60c:	6023      	str	r3, [r4, #0]
9000d60e:	bd38      	pop	{r3, r4, r5, pc}
9000d610:	200014dc 	.word	0x200014dc

9000d614 <_read_r>:
9000d614:	b538      	push	{r3, r4, r5, lr}
9000d616:	4d07      	ldr	r5, [pc, #28]	@ (9000d634 <_read_r+0x20>)
9000d618:	4604      	mov	r4, r0
9000d61a:	4608      	mov	r0, r1
9000d61c:	4611      	mov	r1, r2
9000d61e:	2200      	movs	r2, #0
9000d620:	602a      	str	r2, [r5, #0]
9000d622:	461a      	mov	r2, r3
9000d624:	f7f3 fddc 	bl	900011e0 <_read>
9000d628:	1c43      	adds	r3, r0, #1
9000d62a:	d102      	bne.n	9000d632 <_read_r+0x1e>
9000d62c:	682b      	ldr	r3, [r5, #0]
9000d62e:	b103      	cbz	r3, 9000d632 <_read_r+0x1e>
9000d630:	6023      	str	r3, [r4, #0]
9000d632:	bd38      	pop	{r3, r4, r5, pc}
9000d634:	200014dc 	.word	0x200014dc

9000d638 <_sbrk_r>:
9000d638:	b538      	push	{r3, r4, r5, lr}
9000d63a:	4d06      	ldr	r5, [pc, #24]	@ (9000d654 <_sbrk_r+0x1c>)
9000d63c:	2300      	movs	r3, #0
9000d63e:	4604      	mov	r4, r0
9000d640:	4608      	mov	r0, r1
9000d642:	602b      	str	r3, [r5, #0]
9000d644:	f7f3 fe3a 	bl	900012bc <_sbrk>
9000d648:	1c43      	adds	r3, r0, #1
9000d64a:	d102      	bne.n	9000d652 <_sbrk_r+0x1a>
9000d64c:	682b      	ldr	r3, [r5, #0]
9000d64e:	b103      	cbz	r3, 9000d652 <_sbrk_r+0x1a>
9000d650:	6023      	str	r3, [r4, #0]
9000d652:	bd38      	pop	{r3, r4, r5, pc}
9000d654:	200014dc 	.word	0x200014dc

9000d658 <_write_r>:
9000d658:	b538      	push	{r3, r4, r5, lr}
9000d65a:	4d07      	ldr	r5, [pc, #28]	@ (9000d678 <_write_r+0x20>)
9000d65c:	4604      	mov	r4, r0
9000d65e:	4608      	mov	r0, r1
9000d660:	4611      	mov	r1, r2
9000d662:	2200      	movs	r2, #0
9000d664:	602a      	str	r2, [r5, #0]
9000d666:	461a      	mov	r2, r3
9000d668:	f7f3 fdd7 	bl	9000121a <_write>
9000d66c:	1c43      	adds	r3, r0, #1
9000d66e:	d102      	bne.n	9000d676 <_write_r+0x1e>
9000d670:	682b      	ldr	r3, [r5, #0]
9000d672:	b103      	cbz	r3, 9000d676 <_write_r+0x1e>
9000d674:	6023      	str	r3, [r4, #0]
9000d676:	bd38      	pop	{r3, r4, r5, pc}
9000d678:	200014dc 	.word	0x200014dc

9000d67c <__errno>:
9000d67c:	4b01      	ldr	r3, [pc, #4]	@ (9000d684 <__errno+0x8>)
9000d67e:	6818      	ldr	r0, [r3, #0]
9000d680:	4770      	bx	lr
9000d682:	bf00      	nop
9000d684:	2000007c 	.word	0x2000007c

9000d688 <__libc_init_array>:
9000d688:	b570      	push	{r4, r5, r6, lr}
9000d68a:	4d0d      	ldr	r5, [pc, #52]	@ (9000d6c0 <__libc_init_array+0x38>)
9000d68c:	4c0d      	ldr	r4, [pc, #52]	@ (9000d6c4 <__libc_init_array+0x3c>)
9000d68e:	1b64      	subs	r4, r4, r5
9000d690:	10a4      	asrs	r4, r4, #2
9000d692:	2600      	movs	r6, #0
9000d694:	42a6      	cmp	r6, r4
9000d696:	d109      	bne.n	9000d6ac <__libc_init_array+0x24>
9000d698:	4d0b      	ldr	r5, [pc, #44]	@ (9000d6c8 <__libc_init_array+0x40>)
9000d69a:	4c0c      	ldr	r4, [pc, #48]	@ (9000d6cc <__libc_init_array+0x44>)
9000d69c:	f000 fe1a 	bl	9000e2d4 <_init>
9000d6a0:	1b64      	subs	r4, r4, r5
9000d6a2:	10a4      	asrs	r4, r4, #2
9000d6a4:	2600      	movs	r6, #0
9000d6a6:	42a6      	cmp	r6, r4
9000d6a8:	d105      	bne.n	9000d6b6 <__libc_init_array+0x2e>
9000d6aa:	bd70      	pop	{r4, r5, r6, pc}
9000d6ac:	f855 3b04 	ldr.w	r3, [r5], #4
9000d6b0:	4798      	blx	r3
9000d6b2:	3601      	adds	r6, #1
9000d6b4:	e7ee      	b.n	9000d694 <__libc_init_array+0xc>
9000d6b6:	f855 3b04 	ldr.w	r3, [r5], #4
9000d6ba:	4798      	blx	r3
9000d6bc:	3601      	adds	r6, #1
9000d6be:	e7f2      	b.n	9000d6a6 <__libc_init_array+0x1e>
9000d6c0:	900109b0 	.word	0x900109b0
9000d6c4:	900109b0 	.word	0x900109b0
9000d6c8:	900109b0 	.word	0x900109b0
9000d6cc:	900109b4 	.word	0x900109b4

9000d6d0 <__retarget_lock_init_recursive>:
9000d6d0:	4770      	bx	lr

9000d6d2 <__retarget_lock_acquire_recursive>:
9000d6d2:	4770      	bx	lr

9000d6d4 <__retarget_lock_release_recursive>:
9000d6d4:	4770      	bx	lr

9000d6d6 <memcpy>:
9000d6d6:	440a      	add	r2, r1
9000d6d8:	4291      	cmp	r1, r2
9000d6da:	f100 33ff 	add.w	r3, r0, #4294967295
9000d6de:	d100      	bne.n	9000d6e2 <memcpy+0xc>
9000d6e0:	4770      	bx	lr
9000d6e2:	b510      	push	{r4, lr}
9000d6e4:	f811 4b01 	ldrb.w	r4, [r1], #1
9000d6e8:	f803 4f01 	strb.w	r4, [r3, #1]!
9000d6ec:	4291      	cmp	r1, r2
9000d6ee:	d1f9      	bne.n	9000d6e4 <memcpy+0xe>
9000d6f0:	bd10      	pop	{r4, pc}
	...

9000d6f4 <_free_r>:
9000d6f4:	b538      	push	{r3, r4, r5, lr}
9000d6f6:	4605      	mov	r5, r0
9000d6f8:	2900      	cmp	r1, #0
9000d6fa:	d041      	beq.n	9000d780 <_free_r+0x8c>
9000d6fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000d700:	1f0c      	subs	r4, r1, #4
9000d702:	2b00      	cmp	r3, #0
9000d704:	bfb8      	it	lt
9000d706:	18e4      	addlt	r4, r4, r3
9000d708:	f7ff fd22 	bl	9000d150 <__malloc_lock>
9000d70c:	4a1d      	ldr	r2, [pc, #116]	@ (9000d784 <_free_r+0x90>)
9000d70e:	6813      	ldr	r3, [r2, #0]
9000d710:	b933      	cbnz	r3, 9000d720 <_free_r+0x2c>
9000d712:	6063      	str	r3, [r4, #4]
9000d714:	6014      	str	r4, [r2, #0]
9000d716:	4628      	mov	r0, r5
9000d718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000d71c:	f7ff bd1e 	b.w	9000d15c <__malloc_unlock>
9000d720:	42a3      	cmp	r3, r4
9000d722:	d908      	bls.n	9000d736 <_free_r+0x42>
9000d724:	6820      	ldr	r0, [r4, #0]
9000d726:	1821      	adds	r1, r4, r0
9000d728:	428b      	cmp	r3, r1
9000d72a:	bf01      	itttt	eq
9000d72c:	6819      	ldreq	r1, [r3, #0]
9000d72e:	685b      	ldreq	r3, [r3, #4]
9000d730:	1809      	addeq	r1, r1, r0
9000d732:	6021      	streq	r1, [r4, #0]
9000d734:	e7ed      	b.n	9000d712 <_free_r+0x1e>
9000d736:	461a      	mov	r2, r3
9000d738:	685b      	ldr	r3, [r3, #4]
9000d73a:	b10b      	cbz	r3, 9000d740 <_free_r+0x4c>
9000d73c:	42a3      	cmp	r3, r4
9000d73e:	d9fa      	bls.n	9000d736 <_free_r+0x42>
9000d740:	6811      	ldr	r1, [r2, #0]
9000d742:	1850      	adds	r0, r2, r1
9000d744:	42a0      	cmp	r0, r4
9000d746:	d10b      	bne.n	9000d760 <_free_r+0x6c>
9000d748:	6820      	ldr	r0, [r4, #0]
9000d74a:	4401      	add	r1, r0
9000d74c:	1850      	adds	r0, r2, r1
9000d74e:	4283      	cmp	r3, r0
9000d750:	6011      	str	r1, [r2, #0]
9000d752:	d1e0      	bne.n	9000d716 <_free_r+0x22>
9000d754:	6818      	ldr	r0, [r3, #0]
9000d756:	685b      	ldr	r3, [r3, #4]
9000d758:	6053      	str	r3, [r2, #4]
9000d75a:	4408      	add	r0, r1
9000d75c:	6010      	str	r0, [r2, #0]
9000d75e:	e7da      	b.n	9000d716 <_free_r+0x22>
9000d760:	d902      	bls.n	9000d768 <_free_r+0x74>
9000d762:	230c      	movs	r3, #12
9000d764:	602b      	str	r3, [r5, #0]
9000d766:	e7d6      	b.n	9000d716 <_free_r+0x22>
9000d768:	6820      	ldr	r0, [r4, #0]
9000d76a:	1821      	adds	r1, r4, r0
9000d76c:	428b      	cmp	r3, r1
9000d76e:	bf04      	itt	eq
9000d770:	6819      	ldreq	r1, [r3, #0]
9000d772:	685b      	ldreq	r3, [r3, #4]
9000d774:	6063      	str	r3, [r4, #4]
9000d776:	bf04      	itt	eq
9000d778:	1809      	addeq	r1, r1, r0
9000d77a:	6021      	streq	r1, [r4, #0]
9000d77c:	6054      	str	r4, [r2, #4]
9000d77e:	e7ca      	b.n	9000d716 <_free_r+0x22>
9000d780:	bd38      	pop	{r3, r4, r5, pc}
9000d782:	bf00      	nop
9000d784:	2000139c 	.word	0x2000139c

9000d788 <__ssputs_r>:
9000d788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000d78c:	688e      	ldr	r6, [r1, #8]
9000d78e:	461f      	mov	r7, r3
9000d790:	42be      	cmp	r6, r7
9000d792:	680b      	ldr	r3, [r1, #0]
9000d794:	4682      	mov	sl, r0
9000d796:	460c      	mov	r4, r1
9000d798:	4690      	mov	r8, r2
9000d79a:	d82d      	bhi.n	9000d7f8 <__ssputs_r+0x70>
9000d79c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000d7a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
9000d7a4:	d026      	beq.n	9000d7f4 <__ssputs_r+0x6c>
9000d7a6:	6965      	ldr	r5, [r4, #20]
9000d7a8:	6909      	ldr	r1, [r1, #16]
9000d7aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000d7ae:	eba3 0901 	sub.w	r9, r3, r1
9000d7b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000d7b6:	1c7b      	adds	r3, r7, #1
9000d7b8:	444b      	add	r3, r9
9000d7ba:	106d      	asrs	r5, r5, #1
9000d7bc:	429d      	cmp	r5, r3
9000d7be:	bf38      	it	cc
9000d7c0:	461d      	movcc	r5, r3
9000d7c2:	0553      	lsls	r3, r2, #21
9000d7c4:	d527      	bpl.n	9000d816 <__ssputs_r+0x8e>
9000d7c6:	4629      	mov	r1, r5
9000d7c8:	f7ff fc42 	bl	9000d050 <_malloc_r>
9000d7cc:	4606      	mov	r6, r0
9000d7ce:	b360      	cbz	r0, 9000d82a <__ssputs_r+0xa2>
9000d7d0:	6921      	ldr	r1, [r4, #16]
9000d7d2:	464a      	mov	r2, r9
9000d7d4:	f7ff ff7f 	bl	9000d6d6 <memcpy>
9000d7d8:	89a3      	ldrh	r3, [r4, #12]
9000d7da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
9000d7de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000d7e2:	81a3      	strh	r3, [r4, #12]
9000d7e4:	6126      	str	r6, [r4, #16]
9000d7e6:	6165      	str	r5, [r4, #20]
9000d7e8:	444e      	add	r6, r9
9000d7ea:	eba5 0509 	sub.w	r5, r5, r9
9000d7ee:	6026      	str	r6, [r4, #0]
9000d7f0:	60a5      	str	r5, [r4, #8]
9000d7f2:	463e      	mov	r6, r7
9000d7f4:	42be      	cmp	r6, r7
9000d7f6:	d900      	bls.n	9000d7fa <__ssputs_r+0x72>
9000d7f8:	463e      	mov	r6, r7
9000d7fa:	6820      	ldr	r0, [r4, #0]
9000d7fc:	4632      	mov	r2, r6
9000d7fe:	4641      	mov	r1, r8
9000d800:	f000 fcf6 	bl	9000e1f0 <memmove>
9000d804:	68a3      	ldr	r3, [r4, #8]
9000d806:	1b9b      	subs	r3, r3, r6
9000d808:	60a3      	str	r3, [r4, #8]
9000d80a:	6823      	ldr	r3, [r4, #0]
9000d80c:	4433      	add	r3, r6
9000d80e:	6023      	str	r3, [r4, #0]
9000d810:	2000      	movs	r0, #0
9000d812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d816:	462a      	mov	r2, r5
9000d818:	f000 fd26 	bl	9000e268 <_realloc_r>
9000d81c:	4606      	mov	r6, r0
9000d81e:	2800      	cmp	r0, #0
9000d820:	d1e0      	bne.n	9000d7e4 <__ssputs_r+0x5c>
9000d822:	6921      	ldr	r1, [r4, #16]
9000d824:	4650      	mov	r0, sl
9000d826:	f7ff ff65 	bl	9000d6f4 <_free_r>
9000d82a:	230c      	movs	r3, #12
9000d82c:	f8ca 3000 	str.w	r3, [sl]
9000d830:	89a3      	ldrh	r3, [r4, #12]
9000d832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d836:	81a3      	strh	r3, [r4, #12]
9000d838:	f04f 30ff 	mov.w	r0, #4294967295
9000d83c:	e7e9      	b.n	9000d812 <__ssputs_r+0x8a>
	...

9000d840 <_svfiprintf_r>:
9000d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000d844:	4698      	mov	r8, r3
9000d846:	898b      	ldrh	r3, [r1, #12]
9000d848:	061b      	lsls	r3, r3, #24
9000d84a:	b09d      	sub	sp, #116	@ 0x74
9000d84c:	4607      	mov	r7, r0
9000d84e:	460d      	mov	r5, r1
9000d850:	4614      	mov	r4, r2
9000d852:	d510      	bpl.n	9000d876 <_svfiprintf_r+0x36>
9000d854:	690b      	ldr	r3, [r1, #16]
9000d856:	b973      	cbnz	r3, 9000d876 <_svfiprintf_r+0x36>
9000d858:	2140      	movs	r1, #64	@ 0x40
9000d85a:	f7ff fbf9 	bl	9000d050 <_malloc_r>
9000d85e:	6028      	str	r0, [r5, #0]
9000d860:	6128      	str	r0, [r5, #16]
9000d862:	b930      	cbnz	r0, 9000d872 <_svfiprintf_r+0x32>
9000d864:	230c      	movs	r3, #12
9000d866:	603b      	str	r3, [r7, #0]
9000d868:	f04f 30ff 	mov.w	r0, #4294967295
9000d86c:	b01d      	add	sp, #116	@ 0x74
9000d86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000d872:	2340      	movs	r3, #64	@ 0x40
9000d874:	616b      	str	r3, [r5, #20]
9000d876:	2300      	movs	r3, #0
9000d878:	9309      	str	r3, [sp, #36]	@ 0x24
9000d87a:	2320      	movs	r3, #32
9000d87c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000d880:	f8cd 800c 	str.w	r8, [sp, #12]
9000d884:	2330      	movs	r3, #48	@ 0x30
9000d886:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 9000da24 <_svfiprintf_r+0x1e4>
9000d88a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000d88e:	f04f 0901 	mov.w	r9, #1
9000d892:	4623      	mov	r3, r4
9000d894:	469a      	mov	sl, r3
9000d896:	f813 2b01 	ldrb.w	r2, [r3], #1
9000d89a:	b10a      	cbz	r2, 9000d8a0 <_svfiprintf_r+0x60>
9000d89c:	2a25      	cmp	r2, #37	@ 0x25
9000d89e:	d1f9      	bne.n	9000d894 <_svfiprintf_r+0x54>
9000d8a0:	ebba 0b04 	subs.w	fp, sl, r4
9000d8a4:	d00b      	beq.n	9000d8be <_svfiprintf_r+0x7e>
9000d8a6:	465b      	mov	r3, fp
9000d8a8:	4622      	mov	r2, r4
9000d8aa:	4629      	mov	r1, r5
9000d8ac:	4638      	mov	r0, r7
9000d8ae:	f7ff ff6b 	bl	9000d788 <__ssputs_r>
9000d8b2:	3001      	adds	r0, #1
9000d8b4:	f000 80a7 	beq.w	9000da06 <_svfiprintf_r+0x1c6>
9000d8b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000d8ba:	445a      	add	r2, fp
9000d8bc:	9209      	str	r2, [sp, #36]	@ 0x24
9000d8be:	f89a 3000 	ldrb.w	r3, [sl]
9000d8c2:	2b00      	cmp	r3, #0
9000d8c4:	f000 809f 	beq.w	9000da06 <_svfiprintf_r+0x1c6>
9000d8c8:	2300      	movs	r3, #0
9000d8ca:	f04f 32ff 	mov.w	r2, #4294967295
9000d8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000d8d2:	f10a 0a01 	add.w	sl, sl, #1
9000d8d6:	9304      	str	r3, [sp, #16]
9000d8d8:	9307      	str	r3, [sp, #28]
9000d8da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000d8de:	931a      	str	r3, [sp, #104]	@ 0x68
9000d8e0:	4654      	mov	r4, sl
9000d8e2:	2205      	movs	r2, #5
9000d8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d8e8:	484e      	ldr	r0, [pc, #312]	@ (9000da24 <_svfiprintf_r+0x1e4>)
9000d8ea:	f7f2 fd01 	bl	900002f0 <memchr>
9000d8ee:	9a04      	ldr	r2, [sp, #16]
9000d8f0:	b9d8      	cbnz	r0, 9000d92a <_svfiprintf_r+0xea>
9000d8f2:	06d0      	lsls	r0, r2, #27
9000d8f4:	bf44      	itt	mi
9000d8f6:	2320      	movmi	r3, #32
9000d8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000d8fc:	0711      	lsls	r1, r2, #28
9000d8fe:	bf44      	itt	mi
9000d900:	232b      	movmi	r3, #43	@ 0x2b
9000d902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000d906:	f89a 3000 	ldrb.w	r3, [sl]
9000d90a:	2b2a      	cmp	r3, #42	@ 0x2a
9000d90c:	d015      	beq.n	9000d93a <_svfiprintf_r+0xfa>
9000d90e:	9a07      	ldr	r2, [sp, #28]
9000d910:	4654      	mov	r4, sl
9000d912:	2000      	movs	r0, #0
9000d914:	f04f 0c0a 	mov.w	ip, #10
9000d918:	4621      	mov	r1, r4
9000d91a:	f811 3b01 	ldrb.w	r3, [r1], #1
9000d91e:	3b30      	subs	r3, #48	@ 0x30
9000d920:	2b09      	cmp	r3, #9
9000d922:	d94b      	bls.n	9000d9bc <_svfiprintf_r+0x17c>
9000d924:	b1b0      	cbz	r0, 9000d954 <_svfiprintf_r+0x114>
9000d926:	9207      	str	r2, [sp, #28]
9000d928:	e014      	b.n	9000d954 <_svfiprintf_r+0x114>
9000d92a:	eba0 0308 	sub.w	r3, r0, r8
9000d92e:	fa09 f303 	lsl.w	r3, r9, r3
9000d932:	4313      	orrs	r3, r2
9000d934:	9304      	str	r3, [sp, #16]
9000d936:	46a2      	mov	sl, r4
9000d938:	e7d2      	b.n	9000d8e0 <_svfiprintf_r+0xa0>
9000d93a:	9b03      	ldr	r3, [sp, #12]
9000d93c:	1d19      	adds	r1, r3, #4
9000d93e:	681b      	ldr	r3, [r3, #0]
9000d940:	9103      	str	r1, [sp, #12]
9000d942:	2b00      	cmp	r3, #0
9000d944:	bfbb      	ittet	lt
9000d946:	425b      	neglt	r3, r3
9000d948:	f042 0202 	orrlt.w	r2, r2, #2
9000d94c:	9307      	strge	r3, [sp, #28]
9000d94e:	9307      	strlt	r3, [sp, #28]
9000d950:	bfb8      	it	lt
9000d952:	9204      	strlt	r2, [sp, #16]
9000d954:	7823      	ldrb	r3, [r4, #0]
9000d956:	2b2e      	cmp	r3, #46	@ 0x2e
9000d958:	d10a      	bne.n	9000d970 <_svfiprintf_r+0x130>
9000d95a:	7863      	ldrb	r3, [r4, #1]
9000d95c:	2b2a      	cmp	r3, #42	@ 0x2a
9000d95e:	d132      	bne.n	9000d9c6 <_svfiprintf_r+0x186>
9000d960:	9b03      	ldr	r3, [sp, #12]
9000d962:	1d1a      	adds	r2, r3, #4
9000d964:	681b      	ldr	r3, [r3, #0]
9000d966:	9203      	str	r2, [sp, #12]
9000d968:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000d96c:	3402      	adds	r4, #2
9000d96e:	9305      	str	r3, [sp, #20]
9000d970:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 9000da34 <_svfiprintf_r+0x1f4>
9000d974:	7821      	ldrb	r1, [r4, #0]
9000d976:	2203      	movs	r2, #3
9000d978:	4650      	mov	r0, sl
9000d97a:	f7f2 fcb9 	bl	900002f0 <memchr>
9000d97e:	b138      	cbz	r0, 9000d990 <_svfiprintf_r+0x150>
9000d980:	9b04      	ldr	r3, [sp, #16]
9000d982:	eba0 000a 	sub.w	r0, r0, sl
9000d986:	2240      	movs	r2, #64	@ 0x40
9000d988:	4082      	lsls	r2, r0
9000d98a:	4313      	orrs	r3, r2
9000d98c:	3401      	adds	r4, #1
9000d98e:	9304      	str	r3, [sp, #16]
9000d990:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d994:	4824      	ldr	r0, [pc, #144]	@ (9000da28 <_svfiprintf_r+0x1e8>)
9000d996:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000d99a:	2206      	movs	r2, #6
9000d99c:	f7f2 fca8 	bl	900002f0 <memchr>
9000d9a0:	2800      	cmp	r0, #0
9000d9a2:	d036      	beq.n	9000da12 <_svfiprintf_r+0x1d2>
9000d9a4:	4b21      	ldr	r3, [pc, #132]	@ (9000da2c <_svfiprintf_r+0x1ec>)
9000d9a6:	bb1b      	cbnz	r3, 9000d9f0 <_svfiprintf_r+0x1b0>
9000d9a8:	9b03      	ldr	r3, [sp, #12]
9000d9aa:	3307      	adds	r3, #7
9000d9ac:	f023 0307 	bic.w	r3, r3, #7
9000d9b0:	3308      	adds	r3, #8
9000d9b2:	9303      	str	r3, [sp, #12]
9000d9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000d9b6:	4433      	add	r3, r6
9000d9b8:	9309      	str	r3, [sp, #36]	@ 0x24
9000d9ba:	e76a      	b.n	9000d892 <_svfiprintf_r+0x52>
9000d9bc:	fb0c 3202 	mla	r2, ip, r2, r3
9000d9c0:	460c      	mov	r4, r1
9000d9c2:	2001      	movs	r0, #1
9000d9c4:	e7a8      	b.n	9000d918 <_svfiprintf_r+0xd8>
9000d9c6:	2300      	movs	r3, #0
9000d9c8:	3401      	adds	r4, #1
9000d9ca:	9305      	str	r3, [sp, #20]
9000d9cc:	4619      	mov	r1, r3
9000d9ce:	f04f 0c0a 	mov.w	ip, #10
9000d9d2:	4620      	mov	r0, r4
9000d9d4:	f810 2b01 	ldrb.w	r2, [r0], #1
9000d9d8:	3a30      	subs	r2, #48	@ 0x30
9000d9da:	2a09      	cmp	r2, #9
9000d9dc:	d903      	bls.n	9000d9e6 <_svfiprintf_r+0x1a6>
9000d9de:	2b00      	cmp	r3, #0
9000d9e0:	d0c6      	beq.n	9000d970 <_svfiprintf_r+0x130>
9000d9e2:	9105      	str	r1, [sp, #20]
9000d9e4:	e7c4      	b.n	9000d970 <_svfiprintf_r+0x130>
9000d9e6:	fb0c 2101 	mla	r1, ip, r1, r2
9000d9ea:	4604      	mov	r4, r0
9000d9ec:	2301      	movs	r3, #1
9000d9ee:	e7f0      	b.n	9000d9d2 <_svfiprintf_r+0x192>
9000d9f0:	ab03      	add	r3, sp, #12
9000d9f2:	9300      	str	r3, [sp, #0]
9000d9f4:	462a      	mov	r2, r5
9000d9f6:	4b0e      	ldr	r3, [pc, #56]	@ (9000da30 <_svfiprintf_r+0x1f0>)
9000d9f8:	a904      	add	r1, sp, #16
9000d9fa:	4638      	mov	r0, r7
9000d9fc:	f3af 8000 	nop.w
9000da00:	1c42      	adds	r2, r0, #1
9000da02:	4606      	mov	r6, r0
9000da04:	d1d6      	bne.n	9000d9b4 <_svfiprintf_r+0x174>
9000da06:	89ab      	ldrh	r3, [r5, #12]
9000da08:	065b      	lsls	r3, r3, #25
9000da0a:	f53f af2d 	bmi.w	9000d868 <_svfiprintf_r+0x28>
9000da0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000da10:	e72c      	b.n	9000d86c <_svfiprintf_r+0x2c>
9000da12:	ab03      	add	r3, sp, #12
9000da14:	9300      	str	r3, [sp, #0]
9000da16:	462a      	mov	r2, r5
9000da18:	4b05      	ldr	r3, [pc, #20]	@ (9000da30 <_svfiprintf_r+0x1f0>)
9000da1a:	a904      	add	r1, sp, #16
9000da1c:	4638      	mov	r0, r7
9000da1e:	f000 f9bb 	bl	9000dd98 <_printf_i>
9000da22:	e7ed      	b.n	9000da00 <_svfiprintf_r+0x1c0>
9000da24:	90010974 	.word	0x90010974
9000da28:	9001097e 	.word	0x9001097e
9000da2c:	00000000 	.word	0x00000000
9000da30:	9000d789 	.word	0x9000d789
9000da34:	9001097a 	.word	0x9001097a

9000da38 <__sfputc_r>:
9000da38:	6893      	ldr	r3, [r2, #8]
9000da3a:	3b01      	subs	r3, #1
9000da3c:	2b00      	cmp	r3, #0
9000da3e:	b410      	push	{r4}
9000da40:	6093      	str	r3, [r2, #8]
9000da42:	da08      	bge.n	9000da56 <__sfputc_r+0x1e>
9000da44:	6994      	ldr	r4, [r2, #24]
9000da46:	42a3      	cmp	r3, r4
9000da48:	db01      	blt.n	9000da4e <__sfputc_r+0x16>
9000da4a:	290a      	cmp	r1, #10
9000da4c:	d103      	bne.n	9000da56 <__sfputc_r+0x1e>
9000da4e:	f85d 4b04 	ldr.w	r4, [sp], #4
9000da52:	f7ff bd20 	b.w	9000d496 <__swbuf_r>
9000da56:	6813      	ldr	r3, [r2, #0]
9000da58:	1c58      	adds	r0, r3, #1
9000da5a:	6010      	str	r0, [r2, #0]
9000da5c:	7019      	strb	r1, [r3, #0]
9000da5e:	4608      	mov	r0, r1
9000da60:	f85d 4b04 	ldr.w	r4, [sp], #4
9000da64:	4770      	bx	lr

9000da66 <__sfputs_r>:
9000da66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000da68:	4606      	mov	r6, r0
9000da6a:	460f      	mov	r7, r1
9000da6c:	4614      	mov	r4, r2
9000da6e:	18d5      	adds	r5, r2, r3
9000da70:	42ac      	cmp	r4, r5
9000da72:	d101      	bne.n	9000da78 <__sfputs_r+0x12>
9000da74:	2000      	movs	r0, #0
9000da76:	e007      	b.n	9000da88 <__sfputs_r+0x22>
9000da78:	f814 1b01 	ldrb.w	r1, [r4], #1
9000da7c:	463a      	mov	r2, r7
9000da7e:	4630      	mov	r0, r6
9000da80:	f7ff ffda 	bl	9000da38 <__sfputc_r>
9000da84:	1c43      	adds	r3, r0, #1
9000da86:	d1f3      	bne.n	9000da70 <__sfputs_r+0xa>
9000da88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000da8c <_vfiprintf_r>:
9000da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000da90:	460d      	mov	r5, r1
9000da92:	b09d      	sub	sp, #116	@ 0x74
9000da94:	4614      	mov	r4, r2
9000da96:	4698      	mov	r8, r3
9000da98:	4606      	mov	r6, r0
9000da9a:	b118      	cbz	r0, 9000daa4 <_vfiprintf_r+0x18>
9000da9c:	6a03      	ldr	r3, [r0, #32]
9000da9e:	b90b      	cbnz	r3, 9000daa4 <_vfiprintf_r+0x18>
9000daa0:	f7ff fbee 	bl	9000d280 <__sinit>
9000daa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000daa6:	07d9      	lsls	r1, r3, #31
9000daa8:	d405      	bmi.n	9000dab6 <_vfiprintf_r+0x2a>
9000daaa:	89ab      	ldrh	r3, [r5, #12]
9000daac:	059a      	lsls	r2, r3, #22
9000daae:	d402      	bmi.n	9000dab6 <_vfiprintf_r+0x2a>
9000dab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000dab2:	f7ff fe0e 	bl	9000d6d2 <__retarget_lock_acquire_recursive>
9000dab6:	89ab      	ldrh	r3, [r5, #12]
9000dab8:	071b      	lsls	r3, r3, #28
9000daba:	d501      	bpl.n	9000dac0 <_vfiprintf_r+0x34>
9000dabc:	692b      	ldr	r3, [r5, #16]
9000dabe:	b99b      	cbnz	r3, 9000dae8 <_vfiprintf_r+0x5c>
9000dac0:	4629      	mov	r1, r5
9000dac2:	4630      	mov	r0, r6
9000dac4:	f7ff fd26 	bl	9000d514 <__swsetup_r>
9000dac8:	b170      	cbz	r0, 9000dae8 <_vfiprintf_r+0x5c>
9000daca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000dacc:	07dc      	lsls	r4, r3, #31
9000dace:	d504      	bpl.n	9000dada <_vfiprintf_r+0x4e>
9000dad0:	f04f 30ff 	mov.w	r0, #4294967295
9000dad4:	b01d      	add	sp, #116	@ 0x74
9000dad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000dada:	89ab      	ldrh	r3, [r5, #12]
9000dadc:	0598      	lsls	r0, r3, #22
9000dade:	d4f7      	bmi.n	9000dad0 <_vfiprintf_r+0x44>
9000dae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000dae2:	f7ff fdf7 	bl	9000d6d4 <__retarget_lock_release_recursive>
9000dae6:	e7f3      	b.n	9000dad0 <_vfiprintf_r+0x44>
9000dae8:	2300      	movs	r3, #0
9000daea:	9309      	str	r3, [sp, #36]	@ 0x24
9000daec:	2320      	movs	r3, #32
9000daee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000daf2:	f8cd 800c 	str.w	r8, [sp, #12]
9000daf6:	2330      	movs	r3, #48	@ 0x30
9000daf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000dca8 <_vfiprintf_r+0x21c>
9000dafc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000db00:	f04f 0901 	mov.w	r9, #1
9000db04:	4623      	mov	r3, r4
9000db06:	469a      	mov	sl, r3
9000db08:	f813 2b01 	ldrb.w	r2, [r3], #1
9000db0c:	b10a      	cbz	r2, 9000db12 <_vfiprintf_r+0x86>
9000db0e:	2a25      	cmp	r2, #37	@ 0x25
9000db10:	d1f9      	bne.n	9000db06 <_vfiprintf_r+0x7a>
9000db12:	ebba 0b04 	subs.w	fp, sl, r4
9000db16:	d00b      	beq.n	9000db30 <_vfiprintf_r+0xa4>
9000db18:	465b      	mov	r3, fp
9000db1a:	4622      	mov	r2, r4
9000db1c:	4629      	mov	r1, r5
9000db1e:	4630      	mov	r0, r6
9000db20:	f7ff ffa1 	bl	9000da66 <__sfputs_r>
9000db24:	3001      	adds	r0, #1
9000db26:	f000 80a7 	beq.w	9000dc78 <_vfiprintf_r+0x1ec>
9000db2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000db2c:	445a      	add	r2, fp
9000db2e:	9209      	str	r2, [sp, #36]	@ 0x24
9000db30:	f89a 3000 	ldrb.w	r3, [sl]
9000db34:	2b00      	cmp	r3, #0
9000db36:	f000 809f 	beq.w	9000dc78 <_vfiprintf_r+0x1ec>
9000db3a:	2300      	movs	r3, #0
9000db3c:	f04f 32ff 	mov.w	r2, #4294967295
9000db40:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000db44:	f10a 0a01 	add.w	sl, sl, #1
9000db48:	9304      	str	r3, [sp, #16]
9000db4a:	9307      	str	r3, [sp, #28]
9000db4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000db50:	931a      	str	r3, [sp, #104]	@ 0x68
9000db52:	4654      	mov	r4, sl
9000db54:	2205      	movs	r2, #5
9000db56:	f814 1b01 	ldrb.w	r1, [r4], #1
9000db5a:	4853      	ldr	r0, [pc, #332]	@ (9000dca8 <_vfiprintf_r+0x21c>)
9000db5c:	f7f2 fbc8 	bl	900002f0 <memchr>
9000db60:	9a04      	ldr	r2, [sp, #16]
9000db62:	b9d8      	cbnz	r0, 9000db9c <_vfiprintf_r+0x110>
9000db64:	06d1      	lsls	r1, r2, #27
9000db66:	bf44      	itt	mi
9000db68:	2320      	movmi	r3, #32
9000db6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000db6e:	0713      	lsls	r3, r2, #28
9000db70:	bf44      	itt	mi
9000db72:	232b      	movmi	r3, #43	@ 0x2b
9000db74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000db78:	f89a 3000 	ldrb.w	r3, [sl]
9000db7c:	2b2a      	cmp	r3, #42	@ 0x2a
9000db7e:	d015      	beq.n	9000dbac <_vfiprintf_r+0x120>
9000db80:	9a07      	ldr	r2, [sp, #28]
9000db82:	4654      	mov	r4, sl
9000db84:	2000      	movs	r0, #0
9000db86:	f04f 0c0a 	mov.w	ip, #10
9000db8a:	4621      	mov	r1, r4
9000db8c:	f811 3b01 	ldrb.w	r3, [r1], #1
9000db90:	3b30      	subs	r3, #48	@ 0x30
9000db92:	2b09      	cmp	r3, #9
9000db94:	d94b      	bls.n	9000dc2e <_vfiprintf_r+0x1a2>
9000db96:	b1b0      	cbz	r0, 9000dbc6 <_vfiprintf_r+0x13a>
9000db98:	9207      	str	r2, [sp, #28]
9000db9a:	e014      	b.n	9000dbc6 <_vfiprintf_r+0x13a>
9000db9c:	eba0 0308 	sub.w	r3, r0, r8
9000dba0:	fa09 f303 	lsl.w	r3, r9, r3
9000dba4:	4313      	orrs	r3, r2
9000dba6:	9304      	str	r3, [sp, #16]
9000dba8:	46a2      	mov	sl, r4
9000dbaa:	e7d2      	b.n	9000db52 <_vfiprintf_r+0xc6>
9000dbac:	9b03      	ldr	r3, [sp, #12]
9000dbae:	1d19      	adds	r1, r3, #4
9000dbb0:	681b      	ldr	r3, [r3, #0]
9000dbb2:	9103      	str	r1, [sp, #12]
9000dbb4:	2b00      	cmp	r3, #0
9000dbb6:	bfbb      	ittet	lt
9000dbb8:	425b      	neglt	r3, r3
9000dbba:	f042 0202 	orrlt.w	r2, r2, #2
9000dbbe:	9307      	strge	r3, [sp, #28]
9000dbc0:	9307      	strlt	r3, [sp, #28]
9000dbc2:	bfb8      	it	lt
9000dbc4:	9204      	strlt	r2, [sp, #16]
9000dbc6:	7823      	ldrb	r3, [r4, #0]
9000dbc8:	2b2e      	cmp	r3, #46	@ 0x2e
9000dbca:	d10a      	bne.n	9000dbe2 <_vfiprintf_r+0x156>
9000dbcc:	7863      	ldrb	r3, [r4, #1]
9000dbce:	2b2a      	cmp	r3, #42	@ 0x2a
9000dbd0:	d132      	bne.n	9000dc38 <_vfiprintf_r+0x1ac>
9000dbd2:	9b03      	ldr	r3, [sp, #12]
9000dbd4:	1d1a      	adds	r2, r3, #4
9000dbd6:	681b      	ldr	r3, [r3, #0]
9000dbd8:	9203      	str	r2, [sp, #12]
9000dbda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000dbde:	3402      	adds	r4, #2
9000dbe0:	9305      	str	r3, [sp, #20]
9000dbe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000dcb8 <_vfiprintf_r+0x22c>
9000dbe6:	7821      	ldrb	r1, [r4, #0]
9000dbe8:	2203      	movs	r2, #3
9000dbea:	4650      	mov	r0, sl
9000dbec:	f7f2 fb80 	bl	900002f0 <memchr>
9000dbf0:	b138      	cbz	r0, 9000dc02 <_vfiprintf_r+0x176>
9000dbf2:	9b04      	ldr	r3, [sp, #16]
9000dbf4:	eba0 000a 	sub.w	r0, r0, sl
9000dbf8:	2240      	movs	r2, #64	@ 0x40
9000dbfa:	4082      	lsls	r2, r0
9000dbfc:	4313      	orrs	r3, r2
9000dbfe:	3401      	adds	r4, #1
9000dc00:	9304      	str	r3, [sp, #16]
9000dc02:	f814 1b01 	ldrb.w	r1, [r4], #1
9000dc06:	4829      	ldr	r0, [pc, #164]	@ (9000dcac <_vfiprintf_r+0x220>)
9000dc08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000dc0c:	2206      	movs	r2, #6
9000dc0e:	f7f2 fb6f 	bl	900002f0 <memchr>
9000dc12:	2800      	cmp	r0, #0
9000dc14:	d03f      	beq.n	9000dc96 <_vfiprintf_r+0x20a>
9000dc16:	4b26      	ldr	r3, [pc, #152]	@ (9000dcb0 <_vfiprintf_r+0x224>)
9000dc18:	bb1b      	cbnz	r3, 9000dc62 <_vfiprintf_r+0x1d6>
9000dc1a:	9b03      	ldr	r3, [sp, #12]
9000dc1c:	3307      	adds	r3, #7
9000dc1e:	f023 0307 	bic.w	r3, r3, #7
9000dc22:	3308      	adds	r3, #8
9000dc24:	9303      	str	r3, [sp, #12]
9000dc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000dc28:	443b      	add	r3, r7
9000dc2a:	9309      	str	r3, [sp, #36]	@ 0x24
9000dc2c:	e76a      	b.n	9000db04 <_vfiprintf_r+0x78>
9000dc2e:	fb0c 3202 	mla	r2, ip, r2, r3
9000dc32:	460c      	mov	r4, r1
9000dc34:	2001      	movs	r0, #1
9000dc36:	e7a8      	b.n	9000db8a <_vfiprintf_r+0xfe>
9000dc38:	2300      	movs	r3, #0
9000dc3a:	3401      	adds	r4, #1
9000dc3c:	9305      	str	r3, [sp, #20]
9000dc3e:	4619      	mov	r1, r3
9000dc40:	f04f 0c0a 	mov.w	ip, #10
9000dc44:	4620      	mov	r0, r4
9000dc46:	f810 2b01 	ldrb.w	r2, [r0], #1
9000dc4a:	3a30      	subs	r2, #48	@ 0x30
9000dc4c:	2a09      	cmp	r2, #9
9000dc4e:	d903      	bls.n	9000dc58 <_vfiprintf_r+0x1cc>
9000dc50:	2b00      	cmp	r3, #0
9000dc52:	d0c6      	beq.n	9000dbe2 <_vfiprintf_r+0x156>
9000dc54:	9105      	str	r1, [sp, #20]
9000dc56:	e7c4      	b.n	9000dbe2 <_vfiprintf_r+0x156>
9000dc58:	fb0c 2101 	mla	r1, ip, r1, r2
9000dc5c:	4604      	mov	r4, r0
9000dc5e:	2301      	movs	r3, #1
9000dc60:	e7f0      	b.n	9000dc44 <_vfiprintf_r+0x1b8>
9000dc62:	ab03      	add	r3, sp, #12
9000dc64:	9300      	str	r3, [sp, #0]
9000dc66:	462a      	mov	r2, r5
9000dc68:	4b12      	ldr	r3, [pc, #72]	@ (9000dcb4 <_vfiprintf_r+0x228>)
9000dc6a:	a904      	add	r1, sp, #16
9000dc6c:	4630      	mov	r0, r6
9000dc6e:	f3af 8000 	nop.w
9000dc72:	4607      	mov	r7, r0
9000dc74:	1c78      	adds	r0, r7, #1
9000dc76:	d1d6      	bne.n	9000dc26 <_vfiprintf_r+0x19a>
9000dc78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000dc7a:	07d9      	lsls	r1, r3, #31
9000dc7c:	d405      	bmi.n	9000dc8a <_vfiprintf_r+0x1fe>
9000dc7e:	89ab      	ldrh	r3, [r5, #12]
9000dc80:	059a      	lsls	r2, r3, #22
9000dc82:	d402      	bmi.n	9000dc8a <_vfiprintf_r+0x1fe>
9000dc84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000dc86:	f7ff fd25 	bl	9000d6d4 <__retarget_lock_release_recursive>
9000dc8a:	89ab      	ldrh	r3, [r5, #12]
9000dc8c:	065b      	lsls	r3, r3, #25
9000dc8e:	f53f af1f 	bmi.w	9000dad0 <_vfiprintf_r+0x44>
9000dc92:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000dc94:	e71e      	b.n	9000dad4 <_vfiprintf_r+0x48>
9000dc96:	ab03      	add	r3, sp, #12
9000dc98:	9300      	str	r3, [sp, #0]
9000dc9a:	462a      	mov	r2, r5
9000dc9c:	4b05      	ldr	r3, [pc, #20]	@ (9000dcb4 <_vfiprintf_r+0x228>)
9000dc9e:	a904      	add	r1, sp, #16
9000dca0:	4630      	mov	r0, r6
9000dca2:	f000 f879 	bl	9000dd98 <_printf_i>
9000dca6:	e7e4      	b.n	9000dc72 <_vfiprintf_r+0x1e6>
9000dca8:	90010974 	.word	0x90010974
9000dcac:	9001097e 	.word	0x9001097e
9000dcb0:	00000000 	.word	0x00000000
9000dcb4:	9000da67 	.word	0x9000da67
9000dcb8:	9001097a 	.word	0x9001097a

9000dcbc <_printf_common>:
9000dcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000dcc0:	4616      	mov	r6, r2
9000dcc2:	4698      	mov	r8, r3
9000dcc4:	688a      	ldr	r2, [r1, #8]
9000dcc6:	690b      	ldr	r3, [r1, #16]
9000dcc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000dccc:	4293      	cmp	r3, r2
9000dcce:	bfb8      	it	lt
9000dcd0:	4613      	movlt	r3, r2
9000dcd2:	6033      	str	r3, [r6, #0]
9000dcd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000dcd8:	4607      	mov	r7, r0
9000dcda:	460c      	mov	r4, r1
9000dcdc:	b10a      	cbz	r2, 9000dce2 <_printf_common+0x26>
9000dcde:	3301      	adds	r3, #1
9000dce0:	6033      	str	r3, [r6, #0]
9000dce2:	6823      	ldr	r3, [r4, #0]
9000dce4:	0699      	lsls	r1, r3, #26
9000dce6:	bf42      	ittt	mi
9000dce8:	6833      	ldrmi	r3, [r6, #0]
9000dcea:	3302      	addmi	r3, #2
9000dcec:	6033      	strmi	r3, [r6, #0]
9000dcee:	6825      	ldr	r5, [r4, #0]
9000dcf0:	f015 0506 	ands.w	r5, r5, #6
9000dcf4:	d106      	bne.n	9000dd04 <_printf_common+0x48>
9000dcf6:	f104 0a19 	add.w	sl, r4, #25
9000dcfa:	68e3      	ldr	r3, [r4, #12]
9000dcfc:	6832      	ldr	r2, [r6, #0]
9000dcfe:	1a9b      	subs	r3, r3, r2
9000dd00:	42ab      	cmp	r3, r5
9000dd02:	dc26      	bgt.n	9000dd52 <_printf_common+0x96>
9000dd04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000dd08:	6822      	ldr	r2, [r4, #0]
9000dd0a:	3b00      	subs	r3, #0
9000dd0c:	bf18      	it	ne
9000dd0e:	2301      	movne	r3, #1
9000dd10:	0692      	lsls	r2, r2, #26
9000dd12:	d42b      	bmi.n	9000dd6c <_printf_common+0xb0>
9000dd14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000dd18:	4641      	mov	r1, r8
9000dd1a:	4638      	mov	r0, r7
9000dd1c:	47c8      	blx	r9
9000dd1e:	3001      	adds	r0, #1
9000dd20:	d01e      	beq.n	9000dd60 <_printf_common+0xa4>
9000dd22:	6823      	ldr	r3, [r4, #0]
9000dd24:	6922      	ldr	r2, [r4, #16]
9000dd26:	f003 0306 	and.w	r3, r3, #6
9000dd2a:	2b04      	cmp	r3, #4
9000dd2c:	bf02      	ittt	eq
9000dd2e:	68e5      	ldreq	r5, [r4, #12]
9000dd30:	6833      	ldreq	r3, [r6, #0]
9000dd32:	1aed      	subeq	r5, r5, r3
9000dd34:	68a3      	ldr	r3, [r4, #8]
9000dd36:	bf0c      	ite	eq
9000dd38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000dd3c:	2500      	movne	r5, #0
9000dd3e:	4293      	cmp	r3, r2
9000dd40:	bfc4      	itt	gt
9000dd42:	1a9b      	subgt	r3, r3, r2
9000dd44:	18ed      	addgt	r5, r5, r3
9000dd46:	2600      	movs	r6, #0
9000dd48:	341a      	adds	r4, #26
9000dd4a:	42b5      	cmp	r5, r6
9000dd4c:	d11a      	bne.n	9000dd84 <_printf_common+0xc8>
9000dd4e:	2000      	movs	r0, #0
9000dd50:	e008      	b.n	9000dd64 <_printf_common+0xa8>
9000dd52:	2301      	movs	r3, #1
9000dd54:	4652      	mov	r2, sl
9000dd56:	4641      	mov	r1, r8
9000dd58:	4638      	mov	r0, r7
9000dd5a:	47c8      	blx	r9
9000dd5c:	3001      	adds	r0, #1
9000dd5e:	d103      	bne.n	9000dd68 <_printf_common+0xac>
9000dd60:	f04f 30ff 	mov.w	r0, #4294967295
9000dd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000dd68:	3501      	adds	r5, #1
9000dd6a:	e7c6      	b.n	9000dcfa <_printf_common+0x3e>
9000dd6c:	18e1      	adds	r1, r4, r3
9000dd6e:	1c5a      	adds	r2, r3, #1
9000dd70:	2030      	movs	r0, #48	@ 0x30
9000dd72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000dd76:	4422      	add	r2, r4
9000dd78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000dd7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000dd80:	3302      	adds	r3, #2
9000dd82:	e7c7      	b.n	9000dd14 <_printf_common+0x58>
9000dd84:	2301      	movs	r3, #1
9000dd86:	4622      	mov	r2, r4
9000dd88:	4641      	mov	r1, r8
9000dd8a:	4638      	mov	r0, r7
9000dd8c:	47c8      	blx	r9
9000dd8e:	3001      	adds	r0, #1
9000dd90:	d0e6      	beq.n	9000dd60 <_printf_common+0xa4>
9000dd92:	3601      	adds	r6, #1
9000dd94:	e7d9      	b.n	9000dd4a <_printf_common+0x8e>
	...

9000dd98 <_printf_i>:
9000dd98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000dd9c:	7e0f      	ldrb	r7, [r1, #24]
9000dd9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000dda0:	2f78      	cmp	r7, #120	@ 0x78
9000dda2:	4691      	mov	r9, r2
9000dda4:	4680      	mov	r8, r0
9000dda6:	460c      	mov	r4, r1
9000dda8:	469a      	mov	sl, r3
9000ddaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000ddae:	d807      	bhi.n	9000ddc0 <_printf_i+0x28>
9000ddb0:	2f62      	cmp	r7, #98	@ 0x62
9000ddb2:	d80a      	bhi.n	9000ddca <_printf_i+0x32>
9000ddb4:	2f00      	cmp	r7, #0
9000ddb6:	f000 80d1 	beq.w	9000df5c <_printf_i+0x1c4>
9000ddba:	2f58      	cmp	r7, #88	@ 0x58
9000ddbc:	f000 80b8 	beq.w	9000df30 <_printf_i+0x198>
9000ddc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000ddc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000ddc8:	e03a      	b.n	9000de40 <_printf_i+0xa8>
9000ddca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000ddce:	2b15      	cmp	r3, #21
9000ddd0:	d8f6      	bhi.n	9000ddc0 <_printf_i+0x28>
9000ddd2:	a101      	add	r1, pc, #4	@ (adr r1, 9000ddd8 <_printf_i+0x40>)
9000ddd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000ddd8:	9000de31 	.word	0x9000de31
9000dddc:	9000de45 	.word	0x9000de45
9000dde0:	9000ddc1 	.word	0x9000ddc1
9000dde4:	9000ddc1 	.word	0x9000ddc1
9000dde8:	9000ddc1 	.word	0x9000ddc1
9000ddec:	9000ddc1 	.word	0x9000ddc1
9000ddf0:	9000de45 	.word	0x9000de45
9000ddf4:	9000ddc1 	.word	0x9000ddc1
9000ddf8:	9000ddc1 	.word	0x9000ddc1
9000ddfc:	9000ddc1 	.word	0x9000ddc1
9000de00:	9000ddc1 	.word	0x9000ddc1
9000de04:	9000df43 	.word	0x9000df43
9000de08:	9000de6f 	.word	0x9000de6f
9000de0c:	9000defd 	.word	0x9000defd
9000de10:	9000ddc1 	.word	0x9000ddc1
9000de14:	9000ddc1 	.word	0x9000ddc1
9000de18:	9000df65 	.word	0x9000df65
9000de1c:	9000ddc1 	.word	0x9000ddc1
9000de20:	9000de6f 	.word	0x9000de6f
9000de24:	9000ddc1 	.word	0x9000ddc1
9000de28:	9000ddc1 	.word	0x9000ddc1
9000de2c:	9000df05 	.word	0x9000df05
9000de30:	6833      	ldr	r3, [r6, #0]
9000de32:	1d1a      	adds	r2, r3, #4
9000de34:	681b      	ldr	r3, [r3, #0]
9000de36:	6032      	str	r2, [r6, #0]
9000de38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000de3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000de40:	2301      	movs	r3, #1
9000de42:	e09c      	b.n	9000df7e <_printf_i+0x1e6>
9000de44:	6833      	ldr	r3, [r6, #0]
9000de46:	6820      	ldr	r0, [r4, #0]
9000de48:	1d19      	adds	r1, r3, #4
9000de4a:	6031      	str	r1, [r6, #0]
9000de4c:	0606      	lsls	r6, r0, #24
9000de4e:	d501      	bpl.n	9000de54 <_printf_i+0xbc>
9000de50:	681d      	ldr	r5, [r3, #0]
9000de52:	e003      	b.n	9000de5c <_printf_i+0xc4>
9000de54:	0645      	lsls	r5, r0, #25
9000de56:	d5fb      	bpl.n	9000de50 <_printf_i+0xb8>
9000de58:	f9b3 5000 	ldrsh.w	r5, [r3]
9000de5c:	2d00      	cmp	r5, #0
9000de5e:	da03      	bge.n	9000de68 <_printf_i+0xd0>
9000de60:	232d      	movs	r3, #45	@ 0x2d
9000de62:	426d      	negs	r5, r5
9000de64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000de68:	4858      	ldr	r0, [pc, #352]	@ (9000dfcc <_printf_i+0x234>)
9000de6a:	230a      	movs	r3, #10
9000de6c:	e011      	b.n	9000de92 <_printf_i+0xfa>
9000de6e:	6821      	ldr	r1, [r4, #0]
9000de70:	6833      	ldr	r3, [r6, #0]
9000de72:	0608      	lsls	r0, r1, #24
9000de74:	f853 5b04 	ldr.w	r5, [r3], #4
9000de78:	d402      	bmi.n	9000de80 <_printf_i+0xe8>
9000de7a:	0649      	lsls	r1, r1, #25
9000de7c:	bf48      	it	mi
9000de7e:	b2ad      	uxthmi	r5, r5
9000de80:	2f6f      	cmp	r7, #111	@ 0x6f
9000de82:	4852      	ldr	r0, [pc, #328]	@ (9000dfcc <_printf_i+0x234>)
9000de84:	6033      	str	r3, [r6, #0]
9000de86:	bf14      	ite	ne
9000de88:	230a      	movne	r3, #10
9000de8a:	2308      	moveq	r3, #8
9000de8c:	2100      	movs	r1, #0
9000de8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000de92:	6866      	ldr	r6, [r4, #4]
9000de94:	60a6      	str	r6, [r4, #8]
9000de96:	2e00      	cmp	r6, #0
9000de98:	db05      	blt.n	9000dea6 <_printf_i+0x10e>
9000de9a:	6821      	ldr	r1, [r4, #0]
9000de9c:	432e      	orrs	r6, r5
9000de9e:	f021 0104 	bic.w	r1, r1, #4
9000dea2:	6021      	str	r1, [r4, #0]
9000dea4:	d04b      	beq.n	9000df3e <_printf_i+0x1a6>
9000dea6:	4616      	mov	r6, r2
9000dea8:	fbb5 f1f3 	udiv	r1, r5, r3
9000deac:	fb03 5711 	mls	r7, r3, r1, r5
9000deb0:	5dc7      	ldrb	r7, [r0, r7]
9000deb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000deb6:	462f      	mov	r7, r5
9000deb8:	42bb      	cmp	r3, r7
9000deba:	460d      	mov	r5, r1
9000debc:	d9f4      	bls.n	9000dea8 <_printf_i+0x110>
9000debe:	2b08      	cmp	r3, #8
9000dec0:	d10b      	bne.n	9000deda <_printf_i+0x142>
9000dec2:	6823      	ldr	r3, [r4, #0]
9000dec4:	07df      	lsls	r7, r3, #31
9000dec6:	d508      	bpl.n	9000deda <_printf_i+0x142>
9000dec8:	6923      	ldr	r3, [r4, #16]
9000deca:	6861      	ldr	r1, [r4, #4]
9000decc:	4299      	cmp	r1, r3
9000dece:	bfde      	ittt	le
9000ded0:	2330      	movle	r3, #48	@ 0x30
9000ded2:	f806 3c01 	strble.w	r3, [r6, #-1]
9000ded6:	f106 36ff 	addle.w	r6, r6, #4294967295
9000deda:	1b92      	subs	r2, r2, r6
9000dedc:	6122      	str	r2, [r4, #16]
9000dede:	f8cd a000 	str.w	sl, [sp]
9000dee2:	464b      	mov	r3, r9
9000dee4:	aa03      	add	r2, sp, #12
9000dee6:	4621      	mov	r1, r4
9000dee8:	4640      	mov	r0, r8
9000deea:	f7ff fee7 	bl	9000dcbc <_printf_common>
9000deee:	3001      	adds	r0, #1
9000def0:	d14a      	bne.n	9000df88 <_printf_i+0x1f0>
9000def2:	f04f 30ff 	mov.w	r0, #4294967295
9000def6:	b004      	add	sp, #16
9000def8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000defc:	6823      	ldr	r3, [r4, #0]
9000defe:	f043 0320 	orr.w	r3, r3, #32
9000df02:	6023      	str	r3, [r4, #0]
9000df04:	4832      	ldr	r0, [pc, #200]	@ (9000dfd0 <_printf_i+0x238>)
9000df06:	2778      	movs	r7, #120	@ 0x78
9000df08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000df0c:	6823      	ldr	r3, [r4, #0]
9000df0e:	6831      	ldr	r1, [r6, #0]
9000df10:	061f      	lsls	r7, r3, #24
9000df12:	f851 5b04 	ldr.w	r5, [r1], #4
9000df16:	d402      	bmi.n	9000df1e <_printf_i+0x186>
9000df18:	065f      	lsls	r7, r3, #25
9000df1a:	bf48      	it	mi
9000df1c:	b2ad      	uxthmi	r5, r5
9000df1e:	6031      	str	r1, [r6, #0]
9000df20:	07d9      	lsls	r1, r3, #31
9000df22:	bf44      	itt	mi
9000df24:	f043 0320 	orrmi.w	r3, r3, #32
9000df28:	6023      	strmi	r3, [r4, #0]
9000df2a:	b11d      	cbz	r5, 9000df34 <_printf_i+0x19c>
9000df2c:	2310      	movs	r3, #16
9000df2e:	e7ad      	b.n	9000de8c <_printf_i+0xf4>
9000df30:	4826      	ldr	r0, [pc, #152]	@ (9000dfcc <_printf_i+0x234>)
9000df32:	e7e9      	b.n	9000df08 <_printf_i+0x170>
9000df34:	6823      	ldr	r3, [r4, #0]
9000df36:	f023 0320 	bic.w	r3, r3, #32
9000df3a:	6023      	str	r3, [r4, #0]
9000df3c:	e7f6      	b.n	9000df2c <_printf_i+0x194>
9000df3e:	4616      	mov	r6, r2
9000df40:	e7bd      	b.n	9000debe <_printf_i+0x126>
9000df42:	6833      	ldr	r3, [r6, #0]
9000df44:	6825      	ldr	r5, [r4, #0]
9000df46:	6961      	ldr	r1, [r4, #20]
9000df48:	1d18      	adds	r0, r3, #4
9000df4a:	6030      	str	r0, [r6, #0]
9000df4c:	062e      	lsls	r6, r5, #24
9000df4e:	681b      	ldr	r3, [r3, #0]
9000df50:	d501      	bpl.n	9000df56 <_printf_i+0x1be>
9000df52:	6019      	str	r1, [r3, #0]
9000df54:	e002      	b.n	9000df5c <_printf_i+0x1c4>
9000df56:	0668      	lsls	r0, r5, #25
9000df58:	d5fb      	bpl.n	9000df52 <_printf_i+0x1ba>
9000df5a:	8019      	strh	r1, [r3, #0]
9000df5c:	2300      	movs	r3, #0
9000df5e:	6123      	str	r3, [r4, #16]
9000df60:	4616      	mov	r6, r2
9000df62:	e7bc      	b.n	9000dede <_printf_i+0x146>
9000df64:	6833      	ldr	r3, [r6, #0]
9000df66:	1d1a      	adds	r2, r3, #4
9000df68:	6032      	str	r2, [r6, #0]
9000df6a:	681e      	ldr	r6, [r3, #0]
9000df6c:	6862      	ldr	r2, [r4, #4]
9000df6e:	2100      	movs	r1, #0
9000df70:	4630      	mov	r0, r6
9000df72:	f7f2 f9bd 	bl	900002f0 <memchr>
9000df76:	b108      	cbz	r0, 9000df7c <_printf_i+0x1e4>
9000df78:	1b80      	subs	r0, r0, r6
9000df7a:	6060      	str	r0, [r4, #4]
9000df7c:	6863      	ldr	r3, [r4, #4]
9000df7e:	6123      	str	r3, [r4, #16]
9000df80:	2300      	movs	r3, #0
9000df82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000df86:	e7aa      	b.n	9000dede <_printf_i+0x146>
9000df88:	6923      	ldr	r3, [r4, #16]
9000df8a:	4632      	mov	r2, r6
9000df8c:	4649      	mov	r1, r9
9000df8e:	4640      	mov	r0, r8
9000df90:	47d0      	blx	sl
9000df92:	3001      	adds	r0, #1
9000df94:	d0ad      	beq.n	9000def2 <_printf_i+0x15a>
9000df96:	6823      	ldr	r3, [r4, #0]
9000df98:	079b      	lsls	r3, r3, #30
9000df9a:	d413      	bmi.n	9000dfc4 <_printf_i+0x22c>
9000df9c:	68e0      	ldr	r0, [r4, #12]
9000df9e:	9b03      	ldr	r3, [sp, #12]
9000dfa0:	4298      	cmp	r0, r3
9000dfa2:	bfb8      	it	lt
9000dfa4:	4618      	movlt	r0, r3
9000dfa6:	e7a6      	b.n	9000def6 <_printf_i+0x15e>
9000dfa8:	2301      	movs	r3, #1
9000dfaa:	4632      	mov	r2, r6
9000dfac:	4649      	mov	r1, r9
9000dfae:	4640      	mov	r0, r8
9000dfb0:	47d0      	blx	sl
9000dfb2:	3001      	adds	r0, #1
9000dfb4:	d09d      	beq.n	9000def2 <_printf_i+0x15a>
9000dfb6:	3501      	adds	r5, #1
9000dfb8:	68e3      	ldr	r3, [r4, #12]
9000dfba:	9903      	ldr	r1, [sp, #12]
9000dfbc:	1a5b      	subs	r3, r3, r1
9000dfbe:	42ab      	cmp	r3, r5
9000dfc0:	dcf2      	bgt.n	9000dfa8 <_printf_i+0x210>
9000dfc2:	e7eb      	b.n	9000df9c <_printf_i+0x204>
9000dfc4:	2500      	movs	r5, #0
9000dfc6:	f104 0619 	add.w	r6, r4, #25
9000dfca:	e7f5      	b.n	9000dfb8 <_printf_i+0x220>
9000dfcc:	90010985 	.word	0x90010985
9000dfd0:	90010996 	.word	0x90010996

9000dfd4 <__sflush_r>:
9000dfd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000dfdc:	0716      	lsls	r6, r2, #28
9000dfde:	4605      	mov	r5, r0
9000dfe0:	460c      	mov	r4, r1
9000dfe2:	d454      	bmi.n	9000e08e <__sflush_r+0xba>
9000dfe4:	684b      	ldr	r3, [r1, #4]
9000dfe6:	2b00      	cmp	r3, #0
9000dfe8:	dc02      	bgt.n	9000dff0 <__sflush_r+0x1c>
9000dfea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000dfec:	2b00      	cmp	r3, #0
9000dfee:	dd48      	ble.n	9000e082 <__sflush_r+0xae>
9000dff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000dff2:	2e00      	cmp	r6, #0
9000dff4:	d045      	beq.n	9000e082 <__sflush_r+0xae>
9000dff6:	2300      	movs	r3, #0
9000dff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000dffc:	682f      	ldr	r7, [r5, #0]
9000dffe:	6a21      	ldr	r1, [r4, #32]
9000e000:	602b      	str	r3, [r5, #0]
9000e002:	d030      	beq.n	9000e066 <__sflush_r+0x92>
9000e004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000e006:	89a3      	ldrh	r3, [r4, #12]
9000e008:	0759      	lsls	r1, r3, #29
9000e00a:	d505      	bpl.n	9000e018 <__sflush_r+0x44>
9000e00c:	6863      	ldr	r3, [r4, #4]
9000e00e:	1ad2      	subs	r2, r2, r3
9000e010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000e012:	b10b      	cbz	r3, 9000e018 <__sflush_r+0x44>
9000e014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000e016:	1ad2      	subs	r2, r2, r3
9000e018:	2300      	movs	r3, #0
9000e01a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000e01c:	6a21      	ldr	r1, [r4, #32]
9000e01e:	4628      	mov	r0, r5
9000e020:	47b0      	blx	r6
9000e022:	1c43      	adds	r3, r0, #1
9000e024:	89a3      	ldrh	r3, [r4, #12]
9000e026:	d106      	bne.n	9000e036 <__sflush_r+0x62>
9000e028:	6829      	ldr	r1, [r5, #0]
9000e02a:	291d      	cmp	r1, #29
9000e02c:	d82b      	bhi.n	9000e086 <__sflush_r+0xb2>
9000e02e:	4a2a      	ldr	r2, [pc, #168]	@ (9000e0d8 <__sflush_r+0x104>)
9000e030:	40ca      	lsrs	r2, r1
9000e032:	07d6      	lsls	r6, r2, #31
9000e034:	d527      	bpl.n	9000e086 <__sflush_r+0xb2>
9000e036:	2200      	movs	r2, #0
9000e038:	6062      	str	r2, [r4, #4]
9000e03a:	04d9      	lsls	r1, r3, #19
9000e03c:	6922      	ldr	r2, [r4, #16]
9000e03e:	6022      	str	r2, [r4, #0]
9000e040:	d504      	bpl.n	9000e04c <__sflush_r+0x78>
9000e042:	1c42      	adds	r2, r0, #1
9000e044:	d101      	bne.n	9000e04a <__sflush_r+0x76>
9000e046:	682b      	ldr	r3, [r5, #0]
9000e048:	b903      	cbnz	r3, 9000e04c <__sflush_r+0x78>
9000e04a:	6560      	str	r0, [r4, #84]	@ 0x54
9000e04c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000e04e:	602f      	str	r7, [r5, #0]
9000e050:	b1b9      	cbz	r1, 9000e082 <__sflush_r+0xae>
9000e052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000e056:	4299      	cmp	r1, r3
9000e058:	d002      	beq.n	9000e060 <__sflush_r+0x8c>
9000e05a:	4628      	mov	r0, r5
9000e05c:	f7ff fb4a 	bl	9000d6f4 <_free_r>
9000e060:	2300      	movs	r3, #0
9000e062:	6363      	str	r3, [r4, #52]	@ 0x34
9000e064:	e00d      	b.n	9000e082 <__sflush_r+0xae>
9000e066:	2301      	movs	r3, #1
9000e068:	4628      	mov	r0, r5
9000e06a:	47b0      	blx	r6
9000e06c:	4602      	mov	r2, r0
9000e06e:	1c50      	adds	r0, r2, #1
9000e070:	d1c9      	bne.n	9000e006 <__sflush_r+0x32>
9000e072:	682b      	ldr	r3, [r5, #0]
9000e074:	2b00      	cmp	r3, #0
9000e076:	d0c6      	beq.n	9000e006 <__sflush_r+0x32>
9000e078:	2b1d      	cmp	r3, #29
9000e07a:	d001      	beq.n	9000e080 <__sflush_r+0xac>
9000e07c:	2b16      	cmp	r3, #22
9000e07e:	d11e      	bne.n	9000e0be <__sflush_r+0xea>
9000e080:	602f      	str	r7, [r5, #0]
9000e082:	2000      	movs	r0, #0
9000e084:	e022      	b.n	9000e0cc <__sflush_r+0xf8>
9000e086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000e08a:	b21b      	sxth	r3, r3
9000e08c:	e01b      	b.n	9000e0c6 <__sflush_r+0xf2>
9000e08e:	690f      	ldr	r7, [r1, #16]
9000e090:	2f00      	cmp	r7, #0
9000e092:	d0f6      	beq.n	9000e082 <__sflush_r+0xae>
9000e094:	0793      	lsls	r3, r2, #30
9000e096:	680e      	ldr	r6, [r1, #0]
9000e098:	bf08      	it	eq
9000e09a:	694b      	ldreq	r3, [r1, #20]
9000e09c:	600f      	str	r7, [r1, #0]
9000e09e:	bf18      	it	ne
9000e0a0:	2300      	movne	r3, #0
9000e0a2:	eba6 0807 	sub.w	r8, r6, r7
9000e0a6:	608b      	str	r3, [r1, #8]
9000e0a8:	f1b8 0f00 	cmp.w	r8, #0
9000e0ac:	dde9      	ble.n	9000e082 <__sflush_r+0xae>
9000e0ae:	6a21      	ldr	r1, [r4, #32]
9000e0b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000e0b2:	4643      	mov	r3, r8
9000e0b4:	463a      	mov	r2, r7
9000e0b6:	4628      	mov	r0, r5
9000e0b8:	47b0      	blx	r6
9000e0ba:	2800      	cmp	r0, #0
9000e0bc:	dc08      	bgt.n	9000e0d0 <__sflush_r+0xfc>
9000e0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000e0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000e0c6:	81a3      	strh	r3, [r4, #12]
9000e0c8:	f04f 30ff 	mov.w	r0, #4294967295
9000e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000e0d0:	4407      	add	r7, r0
9000e0d2:	eba8 0800 	sub.w	r8, r8, r0
9000e0d6:	e7e7      	b.n	9000e0a8 <__sflush_r+0xd4>
9000e0d8:	20400001 	.word	0x20400001

9000e0dc <_fflush_r>:
9000e0dc:	b538      	push	{r3, r4, r5, lr}
9000e0de:	690b      	ldr	r3, [r1, #16]
9000e0e0:	4605      	mov	r5, r0
9000e0e2:	460c      	mov	r4, r1
9000e0e4:	b913      	cbnz	r3, 9000e0ec <_fflush_r+0x10>
9000e0e6:	2500      	movs	r5, #0
9000e0e8:	4628      	mov	r0, r5
9000e0ea:	bd38      	pop	{r3, r4, r5, pc}
9000e0ec:	b118      	cbz	r0, 9000e0f6 <_fflush_r+0x1a>
9000e0ee:	6a03      	ldr	r3, [r0, #32]
9000e0f0:	b90b      	cbnz	r3, 9000e0f6 <_fflush_r+0x1a>
9000e0f2:	f7ff f8c5 	bl	9000d280 <__sinit>
9000e0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000e0fa:	2b00      	cmp	r3, #0
9000e0fc:	d0f3      	beq.n	9000e0e6 <_fflush_r+0xa>
9000e0fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000e100:	07d0      	lsls	r0, r2, #31
9000e102:	d404      	bmi.n	9000e10e <_fflush_r+0x32>
9000e104:	0599      	lsls	r1, r3, #22
9000e106:	d402      	bmi.n	9000e10e <_fflush_r+0x32>
9000e108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000e10a:	f7ff fae2 	bl	9000d6d2 <__retarget_lock_acquire_recursive>
9000e10e:	4628      	mov	r0, r5
9000e110:	4621      	mov	r1, r4
9000e112:	f7ff ff5f 	bl	9000dfd4 <__sflush_r>
9000e116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000e118:	07da      	lsls	r2, r3, #31
9000e11a:	4605      	mov	r5, r0
9000e11c:	d4e4      	bmi.n	9000e0e8 <_fflush_r+0xc>
9000e11e:	89a3      	ldrh	r3, [r4, #12]
9000e120:	059b      	lsls	r3, r3, #22
9000e122:	d4e1      	bmi.n	9000e0e8 <_fflush_r+0xc>
9000e124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000e126:	f7ff fad5 	bl	9000d6d4 <__retarget_lock_release_recursive>
9000e12a:	e7dd      	b.n	9000e0e8 <_fflush_r+0xc>

9000e12c <__swhatbuf_r>:
9000e12c:	b570      	push	{r4, r5, r6, lr}
9000e12e:	460c      	mov	r4, r1
9000e130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000e134:	2900      	cmp	r1, #0
9000e136:	b096      	sub	sp, #88	@ 0x58
9000e138:	4615      	mov	r5, r2
9000e13a:	461e      	mov	r6, r3
9000e13c:	da0d      	bge.n	9000e15a <__swhatbuf_r+0x2e>
9000e13e:	89a3      	ldrh	r3, [r4, #12]
9000e140:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000e144:	f04f 0100 	mov.w	r1, #0
9000e148:	bf14      	ite	ne
9000e14a:	2340      	movne	r3, #64	@ 0x40
9000e14c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000e150:	2000      	movs	r0, #0
9000e152:	6031      	str	r1, [r6, #0]
9000e154:	602b      	str	r3, [r5, #0]
9000e156:	b016      	add	sp, #88	@ 0x58
9000e158:	bd70      	pop	{r4, r5, r6, pc}
9000e15a:	466a      	mov	r2, sp
9000e15c:	f000 f862 	bl	9000e224 <_fstat_r>
9000e160:	2800      	cmp	r0, #0
9000e162:	dbec      	blt.n	9000e13e <__swhatbuf_r+0x12>
9000e164:	9901      	ldr	r1, [sp, #4]
9000e166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000e16a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000e16e:	4259      	negs	r1, r3
9000e170:	4159      	adcs	r1, r3
9000e172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000e176:	e7eb      	b.n	9000e150 <__swhatbuf_r+0x24>

9000e178 <__smakebuf_r>:
9000e178:	898b      	ldrh	r3, [r1, #12]
9000e17a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000e17c:	079d      	lsls	r5, r3, #30
9000e17e:	4606      	mov	r6, r0
9000e180:	460c      	mov	r4, r1
9000e182:	d507      	bpl.n	9000e194 <__smakebuf_r+0x1c>
9000e184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000e188:	6023      	str	r3, [r4, #0]
9000e18a:	6123      	str	r3, [r4, #16]
9000e18c:	2301      	movs	r3, #1
9000e18e:	6163      	str	r3, [r4, #20]
9000e190:	b003      	add	sp, #12
9000e192:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000e194:	ab01      	add	r3, sp, #4
9000e196:	466a      	mov	r2, sp
9000e198:	f7ff ffc8 	bl	9000e12c <__swhatbuf_r>
9000e19c:	9f00      	ldr	r7, [sp, #0]
9000e19e:	4605      	mov	r5, r0
9000e1a0:	4639      	mov	r1, r7
9000e1a2:	4630      	mov	r0, r6
9000e1a4:	f7fe ff54 	bl	9000d050 <_malloc_r>
9000e1a8:	b948      	cbnz	r0, 9000e1be <__smakebuf_r+0x46>
9000e1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000e1ae:	059a      	lsls	r2, r3, #22
9000e1b0:	d4ee      	bmi.n	9000e190 <__smakebuf_r+0x18>
9000e1b2:	f023 0303 	bic.w	r3, r3, #3
9000e1b6:	f043 0302 	orr.w	r3, r3, #2
9000e1ba:	81a3      	strh	r3, [r4, #12]
9000e1bc:	e7e2      	b.n	9000e184 <__smakebuf_r+0xc>
9000e1be:	89a3      	ldrh	r3, [r4, #12]
9000e1c0:	6020      	str	r0, [r4, #0]
9000e1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000e1c6:	81a3      	strh	r3, [r4, #12]
9000e1c8:	9b01      	ldr	r3, [sp, #4]
9000e1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000e1ce:	b15b      	cbz	r3, 9000e1e8 <__smakebuf_r+0x70>
9000e1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000e1d4:	4630      	mov	r0, r6
9000e1d6:	f000 f837 	bl	9000e248 <_isatty_r>
9000e1da:	b128      	cbz	r0, 9000e1e8 <__smakebuf_r+0x70>
9000e1dc:	89a3      	ldrh	r3, [r4, #12]
9000e1de:	f023 0303 	bic.w	r3, r3, #3
9000e1e2:	f043 0301 	orr.w	r3, r3, #1
9000e1e6:	81a3      	strh	r3, [r4, #12]
9000e1e8:	89a3      	ldrh	r3, [r4, #12]
9000e1ea:	431d      	orrs	r5, r3
9000e1ec:	81a5      	strh	r5, [r4, #12]
9000e1ee:	e7cf      	b.n	9000e190 <__smakebuf_r+0x18>

9000e1f0 <memmove>:
9000e1f0:	4288      	cmp	r0, r1
9000e1f2:	b510      	push	{r4, lr}
9000e1f4:	eb01 0402 	add.w	r4, r1, r2
9000e1f8:	d902      	bls.n	9000e200 <memmove+0x10>
9000e1fa:	4284      	cmp	r4, r0
9000e1fc:	4623      	mov	r3, r4
9000e1fe:	d807      	bhi.n	9000e210 <memmove+0x20>
9000e200:	1e43      	subs	r3, r0, #1
9000e202:	42a1      	cmp	r1, r4
9000e204:	d008      	beq.n	9000e218 <memmove+0x28>
9000e206:	f811 2b01 	ldrb.w	r2, [r1], #1
9000e20a:	f803 2f01 	strb.w	r2, [r3, #1]!
9000e20e:	e7f8      	b.n	9000e202 <memmove+0x12>
9000e210:	4402      	add	r2, r0
9000e212:	4601      	mov	r1, r0
9000e214:	428a      	cmp	r2, r1
9000e216:	d100      	bne.n	9000e21a <memmove+0x2a>
9000e218:	bd10      	pop	{r4, pc}
9000e21a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000e21e:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000e222:	e7f7      	b.n	9000e214 <memmove+0x24>

9000e224 <_fstat_r>:
9000e224:	b538      	push	{r3, r4, r5, lr}
9000e226:	4d07      	ldr	r5, [pc, #28]	@ (9000e244 <_fstat_r+0x20>)
9000e228:	2300      	movs	r3, #0
9000e22a:	4604      	mov	r4, r0
9000e22c:	4608      	mov	r0, r1
9000e22e:	4611      	mov	r1, r2
9000e230:	602b      	str	r3, [r5, #0]
9000e232:	f7f3 f81a 	bl	9000126a <_fstat>
9000e236:	1c43      	adds	r3, r0, #1
9000e238:	d102      	bne.n	9000e240 <_fstat_r+0x1c>
9000e23a:	682b      	ldr	r3, [r5, #0]
9000e23c:	b103      	cbz	r3, 9000e240 <_fstat_r+0x1c>
9000e23e:	6023      	str	r3, [r4, #0]
9000e240:	bd38      	pop	{r3, r4, r5, pc}
9000e242:	bf00      	nop
9000e244:	200014dc 	.word	0x200014dc

9000e248 <_isatty_r>:
9000e248:	b538      	push	{r3, r4, r5, lr}
9000e24a:	4d06      	ldr	r5, [pc, #24]	@ (9000e264 <_isatty_r+0x1c>)
9000e24c:	2300      	movs	r3, #0
9000e24e:	4604      	mov	r4, r0
9000e250:	4608      	mov	r0, r1
9000e252:	602b      	str	r3, [r5, #0]
9000e254:	f7f3 f819 	bl	9000128a <_isatty>
9000e258:	1c43      	adds	r3, r0, #1
9000e25a:	d102      	bne.n	9000e262 <_isatty_r+0x1a>
9000e25c:	682b      	ldr	r3, [r5, #0]
9000e25e:	b103      	cbz	r3, 9000e262 <_isatty_r+0x1a>
9000e260:	6023      	str	r3, [r4, #0]
9000e262:	bd38      	pop	{r3, r4, r5, pc}
9000e264:	200014dc 	.word	0x200014dc

9000e268 <_realloc_r>:
9000e268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e26c:	4607      	mov	r7, r0
9000e26e:	4614      	mov	r4, r2
9000e270:	460d      	mov	r5, r1
9000e272:	b921      	cbnz	r1, 9000e27e <_realloc_r+0x16>
9000e274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000e278:	4611      	mov	r1, r2
9000e27a:	f7fe bee9 	b.w	9000d050 <_malloc_r>
9000e27e:	b92a      	cbnz	r2, 9000e28c <_realloc_r+0x24>
9000e280:	f7ff fa38 	bl	9000d6f4 <_free_r>
9000e284:	4625      	mov	r5, r4
9000e286:	4628      	mov	r0, r5
9000e288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000e28c:	f000 f81a 	bl	9000e2c4 <_malloc_usable_size_r>
9000e290:	4284      	cmp	r4, r0
9000e292:	4606      	mov	r6, r0
9000e294:	d802      	bhi.n	9000e29c <_realloc_r+0x34>
9000e296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000e29a:	d8f4      	bhi.n	9000e286 <_realloc_r+0x1e>
9000e29c:	4621      	mov	r1, r4
9000e29e:	4638      	mov	r0, r7
9000e2a0:	f7fe fed6 	bl	9000d050 <_malloc_r>
9000e2a4:	4680      	mov	r8, r0
9000e2a6:	b908      	cbnz	r0, 9000e2ac <_realloc_r+0x44>
9000e2a8:	4645      	mov	r5, r8
9000e2aa:	e7ec      	b.n	9000e286 <_realloc_r+0x1e>
9000e2ac:	42b4      	cmp	r4, r6
9000e2ae:	4622      	mov	r2, r4
9000e2b0:	4629      	mov	r1, r5
9000e2b2:	bf28      	it	cs
9000e2b4:	4632      	movcs	r2, r6
9000e2b6:	f7ff fa0e 	bl	9000d6d6 <memcpy>
9000e2ba:	4629      	mov	r1, r5
9000e2bc:	4638      	mov	r0, r7
9000e2be:	f7ff fa19 	bl	9000d6f4 <_free_r>
9000e2c2:	e7f1      	b.n	9000e2a8 <_realloc_r+0x40>

9000e2c4 <_malloc_usable_size_r>:
9000e2c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000e2c8:	1f18      	subs	r0, r3, #4
9000e2ca:	2b00      	cmp	r3, #0
9000e2cc:	bfbc      	itt	lt
9000e2ce:	580b      	ldrlt	r3, [r1, r0]
9000e2d0:	18c0      	addlt	r0, r0, r3
9000e2d2:	4770      	bx	lr

9000e2d4 <_init>:
9000e2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000e2d6:	bf00      	nop
9000e2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000e2da:	bc08      	pop	{r3}
9000e2dc:	469e      	mov	lr, r3
9000e2de:	4770      	bx	lr

9000e2e0 <_fini>:
9000e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000e2e2:	bf00      	nop
9000e2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000e2e6:	bc08      	pop	{r3}
9000e2e8:	469e      	mov	lr, r3
9000e2ea:	4770      	bx	lr
