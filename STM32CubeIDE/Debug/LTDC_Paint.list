
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a820  90000298  90000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002484  9000aab8  9000aab8  0000bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000cf3c  9000cf3c  0000e050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  9000cf3c  9000cf3c  0000e050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  9000cf3c  9000cf3c  0000e050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000cf3c  9000cf3c  0000df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000cf40  9000cf40  0000df40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  9000cf44  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  20000050  9000cf94  0000e050  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200012a0  9000cf94  0000e2a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e050  2**0
                  CONTENTS, READONLY
 12 .debug_line   00025ded  00000000  00000000  0000e07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000068  00000000  00000000  00033e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00024c49  00000000  00000000  00033ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a0f  00000000  00000000  00058b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d78  00000000  00000000  0005d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018ac32  00000000  00000000  0005f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000016c9  00000000  00000000  001e9eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003f16e  00000000  00000000  001eb5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0022a711  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e58  00000000  00000000  0022a754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

90000298 <__do_global_dtors_aux>:
90000298:	b510      	push	{r4, lr}
9000029a:	4c05      	ldr	r4, [pc, #20]	@ (900002b0 <__do_global_dtors_aux+0x18>)
9000029c:	7823      	ldrb	r3, [r4, #0]
9000029e:	b933      	cbnz	r3, 900002ae <__do_global_dtors_aux+0x16>
900002a0:	4b04      	ldr	r3, [pc, #16]	@ (900002b4 <__do_global_dtors_aux+0x1c>)
900002a2:	b113      	cbz	r3, 900002aa <__do_global_dtors_aux+0x12>
900002a4:	4804      	ldr	r0, [pc, #16]	@ (900002b8 <__do_global_dtors_aux+0x20>)
900002a6:	f3af 8000 	nop.w
900002aa:	2301      	movs	r3, #1
900002ac:	7023      	strb	r3, [r4, #0]
900002ae:	bd10      	pop	{r4, pc}
900002b0:	20000050 	.word	0x20000050
900002b4:	00000000 	.word	0x00000000
900002b8:	9000aaa0 	.word	0x9000aaa0

900002bc <frame_dummy>:
900002bc:	b508      	push	{r3, lr}
900002be:	4b03      	ldr	r3, [pc, #12]	@ (900002cc <frame_dummy+0x10>)
900002c0:	b11b      	cbz	r3, 900002ca <frame_dummy+0xe>
900002c2:	4903      	ldr	r1, [pc, #12]	@ (900002d0 <frame_dummy+0x14>)
900002c4:	4803      	ldr	r0, [pc, #12]	@ (900002d4 <frame_dummy+0x18>)
900002c6:	f3af 8000 	nop.w
900002ca:	bd08      	pop	{r3, pc}
900002cc:	00000000 	.word	0x00000000
900002d0:	20000054 	.word	0x20000054
900002d4:	9000aaa0 	.word	0x9000aaa0

900002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
900002d8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000314 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
900002dc:	f002 fe98 	bl	90003010 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
900002e0:	f002 fe34 	bl	90002f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
900002e4:	480c      	ldr	r0, [pc, #48]	@ (90000318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
900002e6:	490d      	ldr	r1, [pc, #52]	@ (9000031c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
900002e8:	4a0d      	ldr	r2, [pc, #52]	@ (90000320 <LoopFillZerobss+0x1a>)
  movs r3, #0
900002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
900002ec:	e002      	b.n	900002f4 <LoopCopyDataInit>

900002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900002f2:	3304      	adds	r3, #4

900002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
900002f8:	d3f9      	bcc.n	900002ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900002fa:	4a0a      	ldr	r2, [pc, #40]	@ (90000324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900002fc:	4c0a      	ldr	r4, [pc, #40]	@ (90000328 <LoopFillZerobss+0x22>)
  movs r3, #0
900002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
90000300:	e001      	b.n	90000306 <LoopFillZerobss>

90000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000304:	3204      	adds	r2, #4

90000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000308:	d3fb      	bcc.n	90000302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
9000030a:	f00a fba5 	bl	9000aa58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
9000030e:	f000 f80f 	bl	90000330 <main>
  bx  lr
90000312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
9000031c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
90000320:	9000cf44 	.word	0x9000cf44
  ldr r2, =_sbss
90000324:	20000050 	.word	0x20000050
  ldr r4, =_ebss
90000328:	200012a0 	.word	0x200012a0

9000032c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
9000032c:	e7fe      	b.n	9000032c <ADC3_IRQHandler>
	...

90000330 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
90000330:	b580      	push	{r7, lr}
90000332:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
90000334:	f000 fab8 	bl	900008a8 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
90000338:	f000 fa24 	bl	90000784 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
9000033c:	f002 fe80 	bl	90003040 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
90000340:	f000 f91c 	bl	9000057c <SystemClock_Config>

  GPIO_Init();
90000344:	f000 f870 	bl	90000428 <GPIO_Init>
    
  /* Configure LED1 */
  BSP_LED_Init(LED1);
90000348:	2000      	movs	r0, #0
9000034a:	f000 ffe1 	bl	90001310 <BSP_LED_Init>
  
  /*##-1- LCD Initialization #################################################*/ 
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);  
9000034e:	2101      	movs	r1, #1
90000350:	2000      	movs	r0, #0
90000352:	f001 fc91 	bl	90001c78 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90000356:	4818      	ldr	r0, [pc, #96]	@ (900003b8 <main+0x88>)
90000358:	f00a f824 	bl	9000a3a4 <UTIL_LCD_SetFuncDriver>
 
  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
9000035c:	2000      	movs	r0, #0
9000035e:	f00a f877 	bl	9000a450 <UTIL_LCD_SetLayer>
  
  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90000362:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90000366:	f00a f8e9 	bl	9000a53c <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
9000036a:	4914      	ldr	r1, [pc, #80]	@ (900003bc <main+0x8c>)
9000036c:	2000      	movs	r0, #0
9000036e:	f001 fe3d 	bl	90001fec <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90000372:	4913      	ldr	r1, [pc, #76]	@ (900003c0 <main+0x90>)
90000374:	2000      	movs	r0, #0
90000376:	f001 fe57 	bl	90002028 <BSP_LCD_GetYSize>
  
  hTS->Width = x_size;
9000037a:	4b12      	ldr	r3, [pc, #72]	@ (900003c4 <main+0x94>)
9000037c:	681b      	ldr	r3, [r3, #0]
9000037e:	4a0f      	ldr	r2, [pc, #60]	@ (900003bc <main+0x8c>)
90000380:	6812      	ldr	r2, [r2, #0]
90000382:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
90000384:	4b0f      	ldr	r3, [pc, #60]	@ (900003c4 <main+0x94>)
90000386:	681b      	ldr	r3, [r3, #0]
90000388:	4a0d      	ldr	r2, [pc, #52]	@ (900003c0 <main+0x90>)
9000038a:	6812      	ldr	r2, [r2, #0]
9000038c:	605a      	str	r2, [r3, #4]
  hTS->Orientation =TS_SWAP_XY ;
9000038e:	4b0d      	ldr	r3, [pc, #52]	@ (900003c4 <main+0x94>)
90000390:	681b      	ldr	r3, [r3, #0]
90000392:	2208      	movs	r2, #8
90000394:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 5;
90000396:	4b0b      	ldr	r3, [pc, #44]	@ (900003c4 <main+0x94>)
90000398:	681b      	ldr	r3, [r3, #0]
9000039a:	2205      	movs	r2, #5
9000039c:	60da      	str	r2, [r3, #12]
  /* Touchscreen initialization */
  BSP_TS_Init(0, hTS);
9000039e:	4b09      	ldr	r3, [pc, #36]	@ (900003c4 <main+0x94>)
900003a0:	681b      	ldr	r3, [r3, #0]
900003a2:	4619      	mov	r1, r3
900003a4:	2000      	movs	r0, #0
900003a6:	f002 fcc7 	bl	90002d38 <BSP_TS_Init>
  
  
  /*##-6- Draw the menu ######################################################*/
  //CPU_CACHE_Disable();
  Draw_Menu();  
900003aa:	f000 f80d 	bl	900003c8 <Draw_Menu>
  CPU_CACHE_Enable();
900003ae:	f000 f9e9 	bl	90000784 <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
900003b2:	bf00      	nop
900003b4:	e7fd      	b.n	900003b2 <main+0x82>
900003b6:	bf00      	nop
900003b8:	9000ab60 	.word	0x9000ab60
900003bc:	2000006c 	.word	0x2000006c
900003c0:	20000070 	.word	0x20000070
900003c4:	20000074 	.word	0x20000074

900003c8 <Draw_Menu>:
  * @brief  Draws the menu.
  * @param  None
  * @retval None
  */
static void Draw_Menu(void)
{ 
900003c8:	b580      	push	{r7, lr}
900003ca:	b082      	sub	sp, #8
900003cc:	af00      	add	r7, sp, #0
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
900003ce:	2000      	movs	r0, #0
900003d0:	f00a f83e 	bl	9000a450 <UTIL_LCD_SetLayer>
  
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
900003d4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900003d8:	f00a f8b0 	bl	9000a53c <UTIL_LCD_Clear>
//  UTIL_LCD_FillCircle(145, (y_size - 24), 15,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(195, (y_size - 24), 10,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(245, (y_size - 24), 5,UTIL_LCD_COLOR_WHITE);
//  UTIL_LCD_FillCircle(295, (y_size - 24), 2,UTIL_LCD_COLOR_WHITE);

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
900003dc:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
900003e0:	f00a f854 	bl	9000a48c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
900003e4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900003e8:	f00a f864 	bl	9000a4b4 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
900003ec:	480c      	ldr	r0, [pc, #48]	@ (90000420 <Draw_Menu+0x58>)
900003ee:	f00a f875 	bl	9000a4dc <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
900003f2:	2300      	movs	r3, #0
900003f4:	607b      	str	r3, [r7, #4]
900003f6:	e00a      	b.n	9000040e <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Hello world! Hello world!", LEFT_MODE);
900003f8:	687b      	ldr	r3, [r7, #4]
900003fa:	015b      	lsls	r3, r3, #5
900003fc:	4619      	mov	r1, r3
900003fe:	2303      	movs	r3, #3
90000400:	4a08      	ldr	r2, [pc, #32]	@ (90000424 <Draw_Menu+0x5c>)
90000402:	2000      	movs	r0, #0
90000404:	f00a f8e6 	bl	9000a5d4 <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90000408:	687b      	ldr	r3, [r7, #4]
9000040a:	3301      	adds	r3, #1
9000040c:	607b      	str	r3, [r7, #4]
9000040e:	687b      	ldr	r3, [r7, #4]
90000410:	2b07      	cmp	r3, #7
90000412:	ddf1      	ble.n	900003f8 <Draw_Menu+0x30>
  }
//  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
//  UTIL_LCD_FillRect(380, (y_size - 40), 30, 30, UTIL_LCD_COLOR_BLACK);
//  UTIL_LCD_FillCircle(450, (y_size- 24), Radius, UTIL_LCD_COLOR_BLACK);
}
90000414:	bf00      	nop
90000416:	bf00      	nop
90000418:	3708      	adds	r7, #8
9000041a:	46bd      	mov	sp, r7
9000041c:	bd80      	pop	{r7, pc}
9000041e:	bf00      	nop
90000420:	20000048 	.word	0x20000048
90000424:	9000aab8 	.word	0x9000aab8

90000428 <GPIO_Init>:

static void GPIO_Init(void)
{
90000428:	b580      	push	{r7, lr}
9000042a:	b086      	sub	sp, #24
9000042c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000042e:	1d3b      	adds	r3, r7, #4
90000430:	2200      	movs	r2, #0
90000432:	601a      	str	r2, [r3, #0]
90000434:	605a      	str	r2, [r3, #4]
90000436:	609a      	str	r2, [r3, #8]
90000438:	60da      	str	r2, [r3, #12]
9000043a:	611a      	str	r2, [r3, #16]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
9000043c:	2200      	movs	r2, #0
9000043e:	2108      	movs	r1, #8
90000440:	4845      	ldr	r0, [pc, #276]	@ (90000558 <GPIO_Init+0x130>)
90000442:	f003 fdcb 	bl	90003fdc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
90000446:	2200      	movs	r2, #0
90000448:	2140      	movs	r1, #64	@ 0x40
9000044a:	4844      	ldr	r0, [pc, #272]	@ (9000055c <GPIO_Init+0x134>)
9000044c:	f003 fdc6 	bl	90003fdc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
90000450:	2200      	movs	r2, #0
90000452:	2102      	movs	r1, #2
90000454:	4842      	ldr	r0, [pc, #264]	@ (90000560 <GPIO_Init+0x138>)
90000456:	f003 fdc1 	bl	90003fdc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
9000045a:	2200      	movs	r2, #0
9000045c:	f44f 7180 	mov.w	r1, #256	@ 0x100
90000460:	483e      	ldr	r0, [pc, #248]	@ (9000055c <GPIO_Init+0x134>)
90000462:	f003 fdbb 	bl	90003fdc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90000466:	2200      	movs	r2, #0
90000468:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
9000046c:	483d      	ldr	r0, [pc, #244]	@ (90000564 <GPIO_Init+0x13c>)
9000046e:	f003 fdb5 	bl	90003fdc <HAL_GPIO_WritePin>



	  /*Configure GPIO pin : PE6 */
	  GPIO_InitStruct.Pin = GPIO_PIN_6;
90000472:	2340      	movs	r3, #64	@ 0x40
90000474:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000476:	2300      	movs	r3, #0
90000478:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
9000047a:	2301      	movs	r3, #1
9000047c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
9000047e:	1d3b      	adds	r3, r7, #4
90000480:	4619      	mov	r1, r3
90000482:	4839      	ldr	r0, [pc, #228]	@ (90000568 <GPIO_Init+0x140>)
90000484:	f003 faf0 	bl	90003a68 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PI8 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8;
90000488:	f44f 7380 	mov.w	r3, #256	@ 0x100
9000048c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000048e:	2300      	movs	r3, #0
90000490:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000492:	2301      	movs	r3, #1
90000494:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000496:	1d3b      	adds	r3, r7, #4
90000498:	4619      	mov	r1, r3
9000049a:	4834      	ldr	r0, [pc, #208]	@ (9000056c <GPIO_Init+0x144>)
9000049c:	f003 fae4 	bl	90003a68 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PE3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
900004a0:	2308      	movs	r3, #8
900004a2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900004a4:	2300      	movs	r3, #0
900004a6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
900004a8:	2301      	movs	r3, #1
900004aa:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900004ac:	1d3b      	adds	r3, r7, #4
900004ae:	4619      	mov	r1, r3
900004b0:	482d      	ldr	r0, [pc, #180]	@ (90000568 <GPIO_Init+0x140>)
900004b2:	f003 fad9 	bl	90003a68 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PH15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
900004b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
900004ba:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900004bc:	2300      	movs	r3, #0
900004be:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
900004c0:	2301      	movs	r3, #1
900004c2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900004c4:	1d3b      	adds	r3, r7, #4
900004c6:	4619      	mov	r1, r3
900004c8:	4829      	ldr	r0, [pc, #164]	@ (90000570 <GPIO_Init+0x148>)
900004ca:	f003 facd 	bl	90003a68 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PB4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
900004ce:	2310      	movs	r3, #16
900004d0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900004d2:	2300      	movs	r3, #0
900004d4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
900004d6:	2301      	movs	r3, #1
900004d8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900004da:	1d3b      	adds	r3, r7, #4
900004dc:	4619      	mov	r1, r3
900004de:	4821      	ldr	r0, [pc, #132]	@ (90000564 <GPIO_Init+0x13c>)
900004e0:	f003 fac2 	bl	90003a68 <HAL_GPIO_Init>


	  /*Configure GPIO pin : PG3 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
900004e4:	2308      	movs	r3, #8
900004e6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900004e8:	2301      	movs	r3, #1
900004ea:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
900004ec:	2300      	movs	r3, #0
900004ee:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900004f0:	2300      	movs	r3, #0
900004f2:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900004f4:	1d3b      	adds	r3, r7, #4
900004f6:	4619      	mov	r1, r3
900004f8:	4817      	ldr	r0, [pc, #92]	@ (90000558 <GPIO_Init+0x130>)
900004fa:	f003 fab5 	bl	90003a68 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA6 */
	  GPIO_InitStruct.Pin = GPIO_PIN_6;
900004fe:	2340      	movs	r3, #64	@ 0x40
90000500:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000502:	2301      	movs	r3, #1
90000504:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000506:	2300      	movs	r3, #0
90000508:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000050a:	2300      	movs	r3, #0
9000050c:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000050e:	1d3b      	adds	r3, r7, #4
90000510:	4619      	mov	r1, r3
90000512:	4812      	ldr	r0, [pc, #72]	@ (9000055c <GPIO_Init+0x134>)
90000514:	f003 faa8 	bl	90003a68 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PK1 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
90000518:	2302      	movs	r3, #2
9000051a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000051c:	2301      	movs	r3, #1
9000051e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000520:	2300      	movs	r3, #0
90000522:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000524:	2300      	movs	r3, #0
90000526:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90000528:	1d3b      	adds	r3, r7, #4
9000052a:	4619      	mov	r1, r3
9000052c:	480c      	ldr	r0, [pc, #48]	@ (90000560 <GPIO_Init+0x138>)
9000052e:	f003 fa9b 	bl	90003a68 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PB15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
90000532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
90000536:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000538:	2301      	movs	r3, #1
9000053a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000053c:	2300      	movs	r3, #0
9000053e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000540:	2300      	movs	r3, #0
90000542:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000544:	1d3b      	adds	r3, r7, #4
90000546:	4619      	mov	r1, r3
90000548:	4806      	ldr	r0, [pc, #24]	@ (90000564 <GPIO_Init+0x13c>)
9000054a:	f003 fa8d 	bl	90003a68 <HAL_GPIO_Init>

}
9000054e:	bf00      	nop
90000550:	3718      	adds	r7, #24
90000552:	46bd      	mov	sp, r7
90000554:	bd80      	pop	{r7, pc}
90000556:	bf00      	nop
90000558:	58021800 	.word	0x58021800
9000055c:	58020000 	.word	0x58020000
90000560:	58022800 	.word	0x58022800
90000564:	58020400 	.word	0x58020400
90000568:	58021000 	.word	0x58021000
9000056c:	58022000 	.word	0x58022000
90000570:	58021c00 	.word	0x58021c00

90000574 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000574:	b480      	push	{r7}
90000576:	af00      	add	r7, sp, #0
  while(1)
90000578:	bf00      	nop
9000057a:	e7fd      	b.n	90000578 <Error_Handler+0x4>

9000057c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
9000057c:	b580      	push	{r7, lr}
9000057e:	b0ce      	sub	sp, #312	@ 0x138
90000580:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000582:	2300      	movs	r3, #0
90000584:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000588:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000058c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000590:	2200      	movs	r2, #0
90000592:	601a      	str	r2, [r3, #0]
90000594:	4b78      	ldr	r3, [pc, #480]	@ (90000778 <SystemClock_Config+0x1fc>)
90000596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000598:	4a77      	ldr	r2, [pc, #476]	@ (90000778 <SystemClock_Config+0x1fc>)
9000059a:	f023 0301 	bic.w	r3, r3, #1
9000059e:	62d3      	str	r3, [r2, #44]	@ 0x2c
900005a0:	4b75      	ldr	r3, [pc, #468]	@ (90000778 <SystemClock_Config+0x1fc>)
900005a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900005a4:	f003 0201 	and.w	r2, r3, #1
900005a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900005ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
900005b0:	601a      	str	r2, [r3, #0]
900005b2:	4b72      	ldr	r3, [pc, #456]	@ (9000077c <SystemClock_Config+0x200>)
900005b4:	699b      	ldr	r3, [r3, #24]
900005b6:	4a71      	ldr	r2, [pc, #452]	@ (9000077c <SystemClock_Config+0x200>)
900005b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
900005bc:	6193      	str	r3, [r2, #24]
900005be:	4b6f      	ldr	r3, [pc, #444]	@ (9000077c <SystemClock_Config+0x200>)
900005c0:	699b      	ldr	r3, [r3, #24]
900005c2:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
900005c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900005ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
900005ce:	601a      	str	r2, [r3, #0]
900005d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900005d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
900005d8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
900005da:	bf00      	nop
900005dc:	4b67      	ldr	r3, [pc, #412]	@ (9000077c <SystemClock_Config+0x200>)
900005de:	699b      	ldr	r3, [r3, #24]
900005e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900005e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900005e8:	d1f8      	bne.n	900005dc <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900005ea:	2301      	movs	r3, #1
900005ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900005f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
900005f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
900005f8:	2300      	movs	r3, #0
900005fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
900005fe:	2300      	movs	r3, #0
90000600:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000604:	2302      	movs	r3, #2
90000606:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000060a:	2302      	movs	r3, #2
9000060c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000610:	2305      	movs	r3, #5
90000612:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000616:	23a0      	movs	r3, #160	@ 0xa0
90000618:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000061c:	2300      	movs	r3, #0
9000061e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000622:	2302      	movs	r3, #2
90000624:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000628:	2302      	movs	r3, #2
9000062a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000062e:	2304      	movs	r3, #4
90000630:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000634:	2300      	movs	r3, #0
90000636:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000063a:	2308      	movs	r3, #8
9000063c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000640:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000644:	4618      	mov	r0, r3
90000646:	f006 fca1 	bl	90006f8c <HAL_RCC_OscConfig>
9000064a:	4603      	mov	r3, r0
9000064c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000650:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000654:	2b00      	cmp	r3, #0
90000656:	d001      	beq.n	9000065c <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000658:	f7ff ff8c 	bl	90000574 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
9000065c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000660:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000664:	2205      	movs	r2, #5
90000666:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000668:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000066c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000670:	2260      	movs	r2, #96	@ 0x60
90000672:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000674:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000678:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
9000067c:	2202      	movs	r2, #2
9000067e:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000680:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000684:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000688:	220a      	movs	r2, #10
9000068a:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
9000068c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000690:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000694:	2212      	movs	r2, #18
90000696:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000698:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000069c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
900006a0:	2200      	movs	r2, #0
900006a2:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
900006a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900006a8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
900006ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
900006b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
900006b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900006b6:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
900006ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
900006be:	f04f 0300 	mov.w	r3, #0
900006c2:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
900006c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
900006ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
900006ce:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
900006d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
900006d6:	f107 0308 	add.w	r3, r7, #8
900006da:	4618      	mov	r0, r3
900006dc:	f007 fc26 	bl	90007f2c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
900006e0:	233f      	movs	r3, #63	@ 0x3f
900006e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900006e6:	2303      	movs	r3, #3
900006e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
900006ec:	2300      	movs	r3, #0
900006ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
900006f2:	2308      	movs	r3, #8
900006f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900006f8:	2340      	movs	r3, #64	@ 0x40
900006fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
900006fe:	2340      	movs	r3, #64	@ 0x40
90000700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000708:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
9000070c:	2340      	movs	r3, #64	@ 0x40
9000070e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000712:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000716:	2104      	movs	r1, #4
90000718:	4618      	mov	r0, r3
9000071a:	f007 f891 	bl	90007840 <HAL_RCC_ClockConfig>
9000071e:	4603      	mov	r3, r0
90000720:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000724:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000728:	2b00      	cmp	r3, #0
9000072a:	d001      	beq.n	90000730 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
9000072c:	f7ff ff22 	bl	90000574 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000730:	4b13      	ldr	r3, [pc, #76]	@ (90000780 <SystemClock_Config+0x204>)
90000732:	681b      	ldr	r3, [r3, #0]
90000734:	4a12      	ldr	r2, [pc, #72]	@ (90000780 <SystemClock_Config+0x204>)
90000736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000073a:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
9000073c:	4b10      	ldr	r3, [pc, #64]	@ (90000780 <SystemClock_Config+0x204>)
9000073e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000742:	4a0f      	ldr	r2, [pc, #60]	@ (90000780 <SystemClock_Config+0x204>)
90000744:	f043 0302 	orr.w	r3, r3, #2
90000748:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
9000074c:	4b0c      	ldr	r3, [pc, #48]	@ (90000780 <SystemClock_Config+0x204>)
9000074e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000752:	f003 0202 	and.w	r2, r3, #2
90000756:	f507 739c 	add.w	r3, r7, #312	@ 0x138
9000075a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
9000075e:	601a      	str	r2, [r3, #0]
90000760:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000764:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000768:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
9000076a:	f002 fd0f 	bl	9000318c <HAL_EnableCompensationCell>
}
9000076e:	bf00      	nop
90000770:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000774:	46bd      	mov	sp, r7
90000776:	bd80      	pop	{r7, pc}
90000778:	58000400 	.word	0x58000400
9000077c:	58024800 	.word	0x58024800
90000780:	58024400 	.word	0x58024400

90000784 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000784:	b480      	push	{r7}
90000786:	b085      	sub	sp, #20
90000788:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000078a:	4b34      	ldr	r3, [pc, #208]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
9000078c:	695b      	ldr	r3, [r3, #20]
9000078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000792:	2b00      	cmp	r3, #0
90000794:	d11b      	bne.n	900007ce <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000796:	f3bf 8f4f 	dsb	sy
}
9000079a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000079c:	f3bf 8f6f 	isb	sy
}
900007a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900007a2:	4b2e      	ldr	r3, [pc, #184]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
900007a4:	2200      	movs	r2, #0
900007a6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900007aa:	f3bf 8f4f 	dsb	sy
}
900007ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900007b0:	f3bf 8f6f 	isb	sy
}
900007b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900007b6:	4b29      	ldr	r3, [pc, #164]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
900007b8:	695b      	ldr	r3, [r3, #20]
900007ba:	4a28      	ldr	r2, [pc, #160]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
900007bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900007c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900007c2:	f3bf 8f4f 	dsb	sy
}
900007c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900007c8:	f3bf 8f6f 	isb	sy
}
900007cc:	e000      	b.n	900007d0 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900007ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900007d0:	4b22      	ldr	r3, [pc, #136]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
900007d2:	695b      	ldr	r3, [r3, #20]
900007d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
900007d8:	2b00      	cmp	r3, #0
900007da:	d138      	bne.n	9000084e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900007dc:	4b1f      	ldr	r3, [pc, #124]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
900007de:	2200      	movs	r2, #0
900007e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900007e4:	f3bf 8f4f 	dsb	sy
}
900007e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
900007ea:	4b1c      	ldr	r3, [pc, #112]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
900007ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
900007f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900007f2:	68fb      	ldr	r3, [r7, #12]
900007f4:	0b5b      	lsrs	r3, r3, #13
900007f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
900007fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900007fc:	68fb      	ldr	r3, [r7, #12]
900007fe:	08db      	lsrs	r3, r3, #3
90000800:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000804:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000806:	68bb      	ldr	r3, [r7, #8]
90000808:	015a      	lsls	r2, r3, #5
9000080a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
9000080e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000810:	687a      	ldr	r2, [r7, #4]
90000812:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000814:	4911      	ldr	r1, [pc, #68]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
90000816:	4313      	orrs	r3, r2
90000818:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
9000081c:	687b      	ldr	r3, [r7, #4]
9000081e:	1e5a      	subs	r2, r3, #1
90000820:	607a      	str	r2, [r7, #4]
90000822:	2b00      	cmp	r3, #0
90000824:	d1ef      	bne.n	90000806 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000826:	68bb      	ldr	r3, [r7, #8]
90000828:	1e5a      	subs	r2, r3, #1
9000082a:	60ba      	str	r2, [r7, #8]
9000082c:	2b00      	cmp	r3, #0
9000082e:	d1e5      	bne.n	900007fc <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000830:	f3bf 8f4f 	dsb	sy
}
90000834:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000836:	4b09      	ldr	r3, [pc, #36]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
90000838:	695b      	ldr	r3, [r3, #20]
9000083a:	4a08      	ldr	r2, [pc, #32]	@ (9000085c <CPU_CACHE_Enable+0xd8>)
9000083c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000840:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000842:	f3bf 8f4f 	dsb	sy
}
90000846:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000848:	f3bf 8f6f 	isb	sy
}
9000084c:	e000      	b.n	90000850 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000084e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000850:	bf00      	nop
90000852:	3714      	adds	r7, #20
90000854:	46bd      	mov	sp, r7
90000856:	f85d 7b04 	ldr.w	r7, [sp], #4
9000085a:	4770      	bx	lr
9000085c:	e000ed00 	.word	0xe000ed00

90000860 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000860:	b580      	push	{r7, lr}
90000862:	b082      	sub	sp, #8
90000864:	af00      	add	r7, sp, #0
90000866:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000868:	490e      	ldr	r1, [pc, #56]	@ (900008a4 <MX_LTDC_ClockConfig+0x44>)
9000086a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
9000086e:	f04f 0300 	mov.w	r3, #0
90000872:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000876:	4b0b      	ldr	r3, [pc, #44]	@ (900008a4 <MX_LTDC_ClockConfig+0x44>)
90000878:	2205      	movs	r2, #5
9000087a:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
9000087c:	4b09      	ldr	r3, [pc, #36]	@ (900008a4 <MX_LTDC_ClockConfig+0x44>)
9000087e:	22c0      	movs	r2, #192	@ 0xc0
90000880:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000882:	4b08      	ldr	r3, [pc, #32]	@ (900008a4 <MX_LTDC_ClockConfig+0x44>)
90000884:	2202      	movs	r2, #2
90000886:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000888:	4b06      	ldr	r3, [pc, #24]	@ (900008a4 <MX_LTDC_ClockConfig+0x44>)
9000088a:	2214      	movs	r2, #20
9000088c:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
9000088e:	4b05      	ldr	r3, [pc, #20]	@ (900008a4 <MX_LTDC_ClockConfig+0x44>)
90000890:	2263      	movs	r2, #99	@ 0x63
90000892:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000894:	4803      	ldr	r0, [pc, #12]	@ (900008a4 <MX_LTDC_ClockConfig+0x44>)
90000896:	f007 fb49 	bl	90007f2c <HAL_RCCEx_PeriphCLKConfig>
9000089a:	4603      	mov	r3, r0
}
9000089c:	4618      	mov	r0, r3
9000089e:	3708      	adds	r7, #8
900008a0:	46bd      	mov	sp, r7
900008a2:	bd80      	pop	{r7, pc}
900008a4:	20000078 	.word	0x20000078

900008a8 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
900008a8:	b580      	push	{r7, lr}
900008aa:	b084      	sub	sp, #16
900008ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
900008ae:	f002 fd8d 	bl	900033cc <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900008b2:	2301      	movs	r3, #1
900008b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
900008b6:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
900008ba:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900008bc:	2318      	movs	r3, #24
900008be:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900008c0:	2303      	movs	r3, #3
900008c2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
900008c4:	2300      	movs	r3, #0
900008c6:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900008c8:	2301      	movs	r3, #1
900008ca:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
900008cc:	2300      	movs	r3, #0
900008ce:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900008d0:	2301      	movs	r3, #1
900008d2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
900008d4:	2300      	movs	r3, #0
900008d6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
900008d8:	2300      	movs	r3, #0
900008da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
900008dc:	2300      	movs	r3, #0
900008de:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900008e0:	463b      	mov	r3, r7
900008e2:	4618      	mov	r0, r3
900008e4:	f002 fdaa 	bl	9000343c <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900008e8:	2004      	movs	r0, #4
900008ea:	f002 fd87 	bl	900033fc <HAL_MPU_Enable>
}
900008ee:	bf00      	nop
900008f0:	3710      	adds	r7, #16
900008f2:	46bd      	mov	sp, r7
900008f4:	bd80      	pop	{r7, pc}

900008f6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
900008f6:	b480      	push	{r7}
900008f8:	af00      	add	r7, sp, #0
}
900008fa:	bf00      	nop
900008fc:	46bd      	mov	sp, r7
900008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90000902:	4770      	bx	lr

90000904 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000904:	b480      	push	{r7}
90000906:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000908:	bf00      	nop
9000090a:	e7fd      	b.n	90000908 <HardFault_Handler+0x4>

9000090c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
9000090c:	b480      	push	{r7}
9000090e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000910:	bf00      	nop
90000912:	e7fd      	b.n	90000910 <MemManage_Handler+0x4>

90000914 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000914:	b480      	push	{r7}
90000916:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000918:	bf00      	nop
9000091a:	e7fd      	b.n	90000918 <BusFault_Handler+0x4>

9000091c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
9000091c:	b480      	push	{r7}
9000091e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000920:	bf00      	nop
90000922:	e7fd      	b.n	90000920 <UsageFault_Handler+0x4>

90000924 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000924:	b480      	push	{r7}
90000926:	af00      	add	r7, sp, #0
}
90000928:	bf00      	nop
9000092a:	46bd      	mov	sp, r7
9000092c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000930:	4770      	bx	lr

90000932 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000932:	b480      	push	{r7}
90000934:	af00      	add	r7, sp, #0
}
90000936:	bf00      	nop
90000938:	46bd      	mov	sp, r7
9000093a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000093e:	4770      	bx	lr

90000940 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000940:	b480      	push	{r7}
90000942:	af00      	add	r7, sp, #0
}
90000944:	bf00      	nop
90000946:	46bd      	mov	sp, r7
90000948:	f85d 7b04 	ldr.w	r7, [sp], #4
9000094c:	4770      	bx	lr

9000094e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
9000094e:	b580      	push	{r7, lr}
90000950:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000952:	f002 fbef 	bl	90003134 <HAL_IncTick>
}
90000956:	bf00      	nop
90000958:	bd80      	pop	{r7, pc}
	...

9000095c <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
9000095c:	b580      	push	{r7, lr}
9000095e:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000960:	4802      	ldr	r0, [pc, #8]	@ (9000096c <OTG_FS_IRQHandler+0x10>)
90000962:	f003 fb54 	bl	9000400e <HAL_HCD_IRQHandler>
}
90000966:	bf00      	nop
90000968:	bd80      	pop	{r7, pc}
9000096a:	bf00      	nop
9000096c:	20000138 	.word	0x20000138

90000970 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90000970:	b580      	push	{r7, lr}
90000972:	b082      	sub	sp, #8
90000974:	af00      	add	r7, sp, #0
90000976:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90000978:	687b      	ldr	r3, [r7, #4]
9000097a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000097e:	4618      	mov	r0, r3
90000980:	f009 fc6a 	bl	9000a258 <USBH_LL_IncTimer>
}
90000984:	bf00      	nop
90000986:	3708      	adds	r7, #8
90000988:	46bd      	mov	sp, r7
9000098a:	bd80      	pop	{r7, pc}

9000098c <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
9000098c:	b580      	push	{r7, lr}
9000098e:	b082      	sub	sp, #8
90000990:	af00      	add	r7, sp, #0
90000992:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90000994:	687b      	ldr	r3, [r7, #4]
90000996:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000099a:	4618      	mov	r0, r3
9000099c:	f009 fca6 	bl	9000a2ec <USBH_LL_Connect>
}
900009a0:	bf00      	nop
900009a2:	3708      	adds	r7, #8
900009a4:	46bd      	mov	sp, r7
900009a6:	bd80      	pop	{r7, pc}

900009a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
900009a8:	b580      	push	{r7, lr}
900009aa:	b082      	sub	sp, #8
900009ac:	af00      	add	r7, sp, #0
900009ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
900009b0:	687b      	ldr	r3, [r7, #4]
900009b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900009b6:	4618      	mov	r0, r3
900009b8:	f009 fcaf 	bl	9000a31a <USBH_LL_Disconnect>
}
900009bc:	bf00      	nop
900009be:	3708      	adds	r7, #8
900009c0:	46bd      	mov	sp, r7
900009c2:	bd80      	pop	{r7, pc}

900009c4 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
900009c4:	b580      	push	{r7, lr}
900009c6:	b082      	sub	sp, #8
900009c8:	af00      	add	r7, sp, #0
900009ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
900009cc:	687b      	ldr	r3, [r7, #4]
900009ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900009d2:	4618      	mov	r0, r3
900009d4:	f009 fc6a 	bl	9000a2ac <USBH_LL_PortEnabled>
}
900009d8:	bf00      	nop
900009da:	3708      	adds	r7, #8
900009dc:	46bd      	mov	sp, r7
900009de:	bd80      	pop	{r7, pc}

900009e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
900009e0:	b580      	push	{r7, lr}
900009e2:	b082      	sub	sp, #8
900009e4:	af00      	add	r7, sp, #0
900009e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
900009e8:	687b      	ldr	r3, [r7, #4]
900009ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
900009ee:	4618      	mov	r0, r3
900009f0:	f009 fc6a 	bl	9000a2c8 <USBH_LL_PortDisabled>
}
900009f4:	bf00      	nop
900009f6:	3708      	adds	r7, #8
900009f8:	46bd      	mov	sp, r7
900009fa:	bd80      	pop	{r7, pc}

900009fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
900009fc:	b480      	push	{r7}
900009fe:	b083      	sub	sp, #12
90000a00:	af00      	add	r7, sp, #0
90000a02:	6078      	str	r0, [r7, #4]
90000a04:	460b      	mov	r3, r1
90000a06:	70fb      	strb	r3, [r7, #3]
90000a08:	4613      	mov	r3, r2
90000a0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90000a0c:	bf00      	nop
90000a0e:	370c      	adds	r7, #12
90000a10:	46bd      	mov	sp, r7
90000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
90000a16:	4770      	bx	lr

90000a18 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90000a18:	b580      	push	{r7, lr}
90000a1a:	b082      	sub	sp, #8
90000a1c:	af00      	add	r7, sp, #0
90000a1e:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
90000a20:	687b      	ldr	r3, [r7, #4]
90000a22:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
90000a26:	4618      	mov	r0, r3
90000a28:	f003 fc01 	bl	9000422e <HAL_HCD_Stop>
  return USBH_OK;
90000a2c:	2300      	movs	r3, #0
}
90000a2e:	4618      	mov	r0, r3
90000a30:	3708      	adds	r7, #8
90000a32:	46bd      	mov	sp, r7
90000a34:	bd80      	pop	{r7, pc}
	...

90000a38 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90000a38:	b580      	push	{r7, lr}
90000a3a:	b084      	sub	sp, #16
90000a3c:	af00      	add	r7, sp, #0
90000a3e:	6078      	str	r0, [r7, #4]
90000a40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
90000a42:	687b      	ldr	r3, [r7, #4]
90000a44:	2b00      	cmp	r3, #0
90000a46:	d103      	bne.n	90000a50 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90000a48:	f04f 33ff 	mov.w	r3, #4294967295
90000a4c:	60fb      	str	r3, [r7, #12]
90000a4e:	e02c      	b.n	90000aaa <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90000a50:	683b      	ldr	r3, [r7, #0]
90000a52:	681a      	ldr	r2, [r3, #0]
90000a54:	687b      	ldr	r3, [r7, #4]
90000a56:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90000a58:	683b      	ldr	r3, [r7, #0]
90000a5a:	685a      	ldr	r2, [r3, #4]
90000a5c:	687b      	ldr	r3, [r7, #4]
90000a5e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90000a60:	683b      	ldr	r3, [r7, #0]
90000a62:	891a      	ldrh	r2, [r3, #8]
90000a64:	687b      	ldr	r3, [r7, #4]
90000a66:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90000a68:	683b      	ldr	r3, [r7, #0]
90000a6a:	68da      	ldr	r2, [r3, #12]
90000a6c:	687b      	ldr	r3, [r7, #4]
90000a6e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
90000a70:	683b      	ldr	r3, [r7, #0]
90000a72:	691a      	ldr	r2, [r3, #16]
90000a74:	687b      	ldr	r3, [r7, #4]
90000a76:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90000a78:	683b      	ldr	r3, [r7, #0]
90000a7a:	695a      	ldr	r2, [r3, #20]
90000a7c:	687b      	ldr	r3, [r7, #4]
90000a7e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
90000a80:	687b      	ldr	r3, [r7, #4]
90000a82:	4a0c      	ldr	r2, [pc, #48]	@ (90000ab4 <FT5336_RegisterBusIO+0x7c>)
90000a84:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90000a86:	687b      	ldr	r3, [r7, #4]
90000a88:	4a0b      	ldr	r2, [pc, #44]	@ (90000ab8 <FT5336_RegisterBusIO+0x80>)
90000a8a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
90000a8c:	687b      	ldr	r3, [r7, #4]
90000a8e:	687a      	ldr	r2, [r7, #4]
90000a90:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
90000a92:	687b      	ldr	r3, [r7, #4]
90000a94:	681b      	ldr	r3, [r3, #0]
90000a96:	2b00      	cmp	r3, #0
90000a98:	d004      	beq.n	90000aa4 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
90000a9a:	687b      	ldr	r3, [r7, #4]
90000a9c:	681b      	ldr	r3, [r3, #0]
90000a9e:	4798      	blx	r3
90000aa0:	60f8      	str	r0, [r7, #12]
90000aa2:	e002      	b.n	90000aaa <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90000aa4:	f04f 33ff 	mov.w	r3, #4294967295
90000aa8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
90000aaa:	68fb      	ldr	r3, [r7, #12]
}
90000aac:	4618      	mov	r0, r3
90000aae:	3710      	adds	r7, #16
90000ab0:	46bd      	mov	sp, r7
90000ab2:	bd80      	pop	{r7, pc}
90000ab4:	90000eb1 	.word	0x90000eb1
90000ab8:	90000ee5 	.word	0x90000ee5

90000abc <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
90000abc:	b480      	push	{r7}
90000abe:	b083      	sub	sp, #12
90000ac0:	af00      	add	r7, sp, #0
90000ac2:	6078      	str	r0, [r7, #4]
90000ac4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90000ac6:	683b      	ldr	r3, [r7, #0]
90000ac8:	2201      	movs	r2, #1
90000aca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
90000acc:	683b      	ldr	r3, [r7, #0]
90000ace:	2201      	movs	r2, #1
90000ad0:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90000ad2:	683b      	ldr	r3, [r7, #0]
90000ad4:	2205      	movs	r2, #5
90000ad6:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90000ad8:	683b      	ldr	r3, [r7, #0]
90000ada:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
90000ade:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90000ae0:	683b      	ldr	r3, [r7, #0]
90000ae2:	f44f 7288 	mov.w	r2, #272	@ 0x110
90000ae6:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
90000ae8:	2300      	movs	r3, #0
}
90000aea:	4618      	mov	r0, r3
90000aec:	370c      	adds	r7, #12
90000aee:	46bd      	mov	sp, r7
90000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
90000af4:	4770      	bx	lr

90000af6 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
90000af6:	b580      	push	{r7, lr}
90000af8:	b084      	sub	sp, #16
90000afa:	af00      	add	r7, sp, #0
90000afc:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
90000afe:	2300      	movs	r3, #0
90000b00:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
90000b02:	687b      	ldr	r3, [r7, #4]
90000b04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
90000b08:	2b00      	cmp	r3, #0
90000b0a:	d10d      	bne.n	90000b28 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
90000b0c:	687b      	ldr	r3, [r7, #4]
90000b0e:	681b      	ldr	r3, [r3, #0]
90000b10:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
90000b12:	6878      	ldr	r0, [r7, #4]
90000b14:	f000 f987 	bl	90000e26 <FT5336_DisableIT>
90000b18:	4602      	mov	r2, r0
90000b1a:	68fb      	ldr	r3, [r7, #12]
90000b1c:	4413      	add	r3, r2
90000b1e:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
90000b20:	687b      	ldr	r3, [r7, #4]
90000b22:	2201      	movs	r2, #1
90000b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
90000b28:	68fb      	ldr	r3, [r7, #12]
90000b2a:	2b00      	cmp	r3, #0
90000b2c:	d002      	beq.n	90000b34 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
90000b2e:	f04f 33ff 	mov.w	r3, #4294967295
90000b32:	60fb      	str	r3, [r7, #12]
  }

  return ret;
90000b34:	68fb      	ldr	r3, [r7, #12]
}
90000b36:	4618      	mov	r0, r3
90000b38:	3710      	adds	r7, #16
90000b3a:	46bd      	mov	sp, r7
90000b3c:	bd80      	pop	{r7, pc}

90000b3e <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
90000b3e:	b480      	push	{r7}
90000b40:	b085      	sub	sp, #20
90000b42:	af00      	add	r7, sp, #0
90000b44:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
90000b46:	2300      	movs	r3, #0
90000b48:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
90000b4a:	687b      	ldr	r3, [r7, #4]
90000b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
90000b50:	2b01      	cmp	r3, #1
90000b52:	d103      	bne.n	90000b5c <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
90000b54:	687b      	ldr	r3, [r7, #4]
90000b56:	2200      	movs	r2, #0
90000b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
90000b5c:	68fb      	ldr	r3, [r7, #12]
}
90000b5e:	4618      	mov	r0, r3
90000b60:	3714      	adds	r7, #20
90000b62:	46bd      	mov	sp, r7
90000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b68:	4770      	bx	lr

90000b6a <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
90000b6a:	b580      	push	{r7, lr}
90000b6c:	b084      	sub	sp, #16
90000b6e:	af00      	add	r7, sp, #0
90000b70:	6078      	str	r0, [r7, #4]
90000b72:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90000b74:	687b      	ldr	r3, [r7, #4]
90000b76:	f103 0218 	add.w	r2, r3, #24
90000b7a:	683b      	ldr	r3, [r7, #0]
90000b7c:	681b      	ldr	r3, [r3, #0]
90000b7e:	b2db      	uxtb	r3, r3
90000b80:	4619      	mov	r1, r3
90000b82:	4610      	mov	r0, r2
90000b84:	f000 fa25 	bl	90000fd2 <ft5336_radian_value>
90000b88:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90000b8a:	687b      	ldr	r3, [r7, #4]
90000b8c:	f103 0218 	add.w	r2, r3, #24
90000b90:	683b      	ldr	r3, [r7, #0]
90000b92:	685b      	ldr	r3, [r3, #4]
90000b94:	b2db      	uxtb	r3, r3
90000b96:	4619      	mov	r1, r3
90000b98:	4610      	mov	r0, r2
90000b9a:	f000 fa2b 	bl	90000ff4 <ft5336_offset_left_right>
90000b9e:	4602      	mov	r2, r0
90000ba0:	68fb      	ldr	r3, [r7, #12]
90000ba2:	4413      	add	r3, r2
90000ba4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90000ba6:	687b      	ldr	r3, [r7, #4]
90000ba8:	f103 0218 	add.w	r2, r3, #24
90000bac:	683b      	ldr	r3, [r7, #0]
90000bae:	689b      	ldr	r3, [r3, #8]
90000bb0:	b2db      	uxtb	r3, r3
90000bb2:	4619      	mov	r1, r3
90000bb4:	4610      	mov	r0, r2
90000bb6:	f000 fa2e 	bl	90001016 <ft5336_offset_up_down>
90000bba:	4602      	mov	r2, r0
90000bbc:	68fb      	ldr	r3, [r7, #12]
90000bbe:	4413      	add	r3, r2
90000bc0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90000bc2:	687b      	ldr	r3, [r7, #4]
90000bc4:	f103 0218 	add.w	r2, r3, #24
90000bc8:	683b      	ldr	r3, [r7, #0]
90000bca:	68db      	ldr	r3, [r3, #12]
90000bcc:	b2db      	uxtb	r3, r3
90000bce:	4619      	mov	r1, r3
90000bd0:	4610      	mov	r0, r2
90000bd2:	f000 fa31 	bl	90001038 <ft5336_disatnce_left_right>
90000bd6:	4602      	mov	r2, r0
90000bd8:	68fb      	ldr	r3, [r7, #12]
90000bda:	4413      	add	r3, r2
90000bdc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90000bde:	687b      	ldr	r3, [r7, #4]
90000be0:	f103 0218 	add.w	r2, r3, #24
90000be4:	683b      	ldr	r3, [r7, #0]
90000be6:	691b      	ldr	r3, [r3, #16]
90000be8:	b2db      	uxtb	r3, r3
90000bea:	4619      	mov	r1, r3
90000bec:	4610      	mov	r0, r2
90000bee:	f000 fa34 	bl	9000105a <ft5336_distance_up_down>
90000bf2:	4602      	mov	r2, r0
90000bf4:	68fb      	ldr	r3, [r7, #12]
90000bf6:	4413      	add	r3, r2
90000bf8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90000bfa:	687b      	ldr	r3, [r7, #4]
90000bfc:	f103 0218 	add.w	r2, r3, #24
90000c00:	683b      	ldr	r3, [r7, #0]
90000c02:	695b      	ldr	r3, [r3, #20]
90000c04:	b2db      	uxtb	r3, r3
90000c06:	4619      	mov	r1, r3
90000c08:	4610      	mov	r0, r2
90000c0a:	f000 fa37 	bl	9000107c <ft5336_distance_zoom>
90000c0e:	4602      	mov	r2, r0
90000c10:	68fb      	ldr	r3, [r7, #12]
90000c12:	4413      	add	r3, r2
90000c14:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
90000c16:	68fb      	ldr	r3, [r7, #12]
90000c18:	2b00      	cmp	r3, #0
90000c1a:	d002      	beq.n	90000c22 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
90000c1c:	f04f 33ff 	mov.w	r3, #4294967295
90000c20:	60fb      	str	r3, [r7, #12]
  }

  return ret;
90000c22:	68fb      	ldr	r3, [r7, #12]
}
90000c24:	4618      	mov	r0, r3
90000c26:	3710      	adds	r7, #16
90000c28:	46bd      	mov	sp, r7
90000c2a:	bd80      	pop	{r7, pc}

90000c2c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90000c2c:	b580      	push	{r7, lr}
90000c2e:	b082      	sub	sp, #8
90000c30:	af00      	add	r7, sp, #0
90000c32:	6078      	str	r0, [r7, #4]
90000c34:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90000c36:	687b      	ldr	r3, [r7, #4]
90000c38:	3318      	adds	r3, #24
90000c3a:	6839      	ldr	r1, [r7, #0]
90000c3c:	4618      	mov	r0, r3
90000c3e:	f000 fa3f 	bl	900010c0 <ft5336_chip_id>
90000c42:	4603      	mov	r3, r0
}
90000c44:	4618      	mov	r0, r3
90000c46:	3708      	adds	r7, #8
90000c48:	46bd      	mov	sp, r7
90000c4a:	bd80      	pop	{r7, pc}

90000c4c <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
90000c4c:	b580      	push	{r7, lr}
90000c4e:	b084      	sub	sp, #16
90000c50:	af00      	add	r7, sp, #0
90000c52:	6078      	str	r0, [r7, #4]
90000c54:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90000c56:	2300      	movs	r3, #0
90000c58:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90000c5a:	6878      	ldr	r0, [r7, #4]
90000c5c:	f000 f908 	bl	90000e70 <FT5336_DetectTouch>
90000c60:	4603      	mov	r3, r0
90000c62:	461a      	mov	r2, r3
90000c64:	683b      	ldr	r3, [r7, #0]
90000c66:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90000c68:	687b      	ldr	r3, [r7, #4]
90000c6a:	f103 0018 	add.w	r0, r3, #24
90000c6e:	f107 0208 	add.w	r2, r7, #8
90000c72:	2304      	movs	r3, #4
90000c74:	2103      	movs	r1, #3
90000c76:	f000 f94f 	bl	90000f18 <ft5336_read_reg>
90000c7a:	4603      	mov	r3, r0
90000c7c:	2b00      	cmp	r3, #0
90000c7e:	d003      	beq.n	90000c88 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
90000c80:	f04f 33ff 	mov.w	r3, #4294967295
90000c84:	60fb      	str	r3, [r7, #12]
90000c86:	e00f      	b.n	90000ca8 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90000c88:	7a3b      	ldrb	r3, [r7, #8]
90000c8a:	021b      	lsls	r3, r3, #8
90000c8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
90000c90:	7a7a      	ldrb	r2, [r7, #9]
90000c92:	431a      	orrs	r2, r3
90000c94:	683b      	ldr	r3, [r7, #0]
90000c96:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90000c98:	7abb      	ldrb	r3, [r7, #10]
90000c9a:	021b      	lsls	r3, r3, #8
90000c9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
90000ca0:	7afa      	ldrb	r2, [r7, #11]
90000ca2:	431a      	orrs	r2, r3
90000ca4:	683b      	ldr	r3, [r7, #0]
90000ca6:	609a      	str	r2, [r3, #8]
  }

  return ret;
90000ca8:	68fb      	ldr	r3, [r7, #12]
}
90000caa:	4618      	mov	r0, r3
90000cac:	3710      	adds	r7, #16
90000cae:	46bd      	mov	sp, r7
90000cb0:	bd80      	pop	{r7, pc}

90000cb2 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
90000cb2:	b580      	push	{r7, lr}
90000cb4:	b08c      	sub	sp, #48	@ 0x30
90000cb6:	af00      	add	r7, sp, #0
90000cb8:	6078      	str	r0, [r7, #4]
90000cba:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90000cbc:	2300      	movs	r3, #0
90000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90000cc0:	6878      	ldr	r0, [r7, #4]
90000cc2:	f000 f8d5 	bl	90000e70 <FT5336_DetectTouch>
90000cc6:	4603      	mov	r3, r0
90000cc8:	461a      	mov	r2, r3
90000cca:	683b      	ldr	r3, [r7, #0]
90000ccc:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90000cce:	687b      	ldr	r3, [r7, #4]
90000cd0:	f103 0018 	add.w	r0, r3, #24
90000cd4:	f107 0208 	add.w	r2, r7, #8
90000cd8:	231e      	movs	r3, #30
90000cda:	2103      	movs	r1, #3
90000cdc:	f000 f91c 	bl	90000f18 <ft5336_read_reg>
90000ce0:	4603      	mov	r3, r0
90000ce2:	2b00      	cmp	r3, #0
90000ce4:	d003      	beq.n	90000cee <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
90000ce6:	f04f 33ff 	mov.w	r3, #4294967295
90000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
90000cec:	e077      	b.n	90000dde <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90000cee:	2300      	movs	r3, #0
90000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
90000cf2:	e071      	b.n	90000dd8 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90000cf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000cf6:	4613      	mov	r3, r2
90000cf8:	005b      	lsls	r3, r3, #1
90000cfa:	4413      	add	r3, r2
90000cfc:	005b      	lsls	r3, r3, #1
90000cfe:	3330      	adds	r3, #48	@ 0x30
90000d00:	443b      	add	r3, r7
90000d02:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d06:	021b      	lsls	r3, r3, #8
90000d08:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
90000d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000d0e:	4613      	mov	r3, r2
90000d10:	005b      	lsls	r3, r3, #1
90000d12:	4413      	add	r3, r2
90000d14:	005b      	lsls	r3, r3, #1
90000d16:	3301      	adds	r3, #1
90000d18:	3330      	adds	r3, #48	@ 0x30
90000d1a:	443b      	add	r3, r7
90000d1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d20:	ea41 0203 	orr.w	r2, r1, r3
90000d24:	6839      	ldr	r1, [r7, #0]
90000d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000d28:	009b      	lsls	r3, r3, #2
90000d2a:	440b      	add	r3, r1
90000d2c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90000d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000d30:	4613      	mov	r3, r2
90000d32:	005b      	lsls	r3, r3, #1
90000d34:	4413      	add	r3, r2
90000d36:	005b      	lsls	r3, r3, #1
90000d38:	3302      	adds	r3, #2
90000d3a:	3330      	adds	r3, #48	@ 0x30
90000d3c:	443b      	add	r3, r7
90000d3e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d42:	021b      	lsls	r3, r3, #8
90000d44:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
90000d48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000d4a:	4613      	mov	r3, r2
90000d4c:	005b      	lsls	r3, r3, #1
90000d4e:	4413      	add	r3, r2
90000d50:	005b      	lsls	r3, r3, #1
90000d52:	3303      	adds	r3, #3
90000d54:	3330      	adds	r3, #48	@ 0x30
90000d56:	443b      	add	r3, r7
90000d58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d5c:	4319      	orrs	r1, r3
90000d5e:	683b      	ldr	r3, [r7, #0]
90000d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000d62:	3206      	adds	r2, #6
90000d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90000d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000d6a:	4613      	mov	r3, r2
90000d6c:	005b      	lsls	r3, r3, #1
90000d6e:	4413      	add	r3, r2
90000d70:	005b      	lsls	r3, r3, #1
90000d72:	3330      	adds	r3, #48	@ 0x30
90000d74:	443b      	add	r3, r7
90000d76:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d7a:	099b      	lsrs	r3, r3, #6
90000d7c:	b2db      	uxtb	r3, r3
90000d7e:	4619      	mov	r1, r3
90000d80:	683b      	ldr	r3, [r7, #0]
90000d82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000d84:	3210      	adds	r2, #16
90000d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90000d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000d8c:	4613      	mov	r3, r2
90000d8e:	005b      	lsls	r3, r3, #1
90000d90:	4413      	add	r3, r2
90000d92:	005b      	lsls	r3, r3, #1
90000d94:	3304      	adds	r3, #4
90000d96:	3330      	adds	r3, #48	@ 0x30
90000d98:	443b      	add	r3, r7
90000d9a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d9e:	4619      	mov	r1, r3
90000da0:	683a      	ldr	r2, [r7, #0]
90000da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000da4:	330a      	adds	r3, #10
90000da6:	009b      	lsls	r3, r3, #2
90000da8:	4413      	add	r3, r2
90000daa:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90000dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90000dae:	4613      	mov	r3, r2
90000db0:	005b      	lsls	r3, r3, #1
90000db2:	4413      	add	r3, r2
90000db4:	005b      	lsls	r3, r3, #1
90000db6:	3305      	adds	r3, #5
90000db8:	3330      	adds	r3, #48	@ 0x30
90000dba:	443b      	add	r3, r7
90000dbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000dc0:	091b      	lsrs	r3, r3, #4
90000dc2:	b2db      	uxtb	r3, r3
90000dc4:	4619      	mov	r1, r3
90000dc6:	683a      	ldr	r2, [r7, #0]
90000dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000dca:	3314      	adds	r3, #20
90000dcc:	009b      	lsls	r3, r3, #2
90000dce:	4413      	add	r3, r2
90000dd0:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90000dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000dd4:	3301      	adds	r3, #1
90000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
90000dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90000dda:	2b04      	cmp	r3, #4
90000ddc:	d98a      	bls.n	90000cf4 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
90000dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
90000de0:	4618      	mov	r0, r3
90000de2:	3730      	adds	r7, #48	@ 0x30
90000de4:	46bd      	mov	sp, r7
90000de6:	bd80      	pop	{r7, pc}

90000de8 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
90000de8:	b580      	push	{r7, lr}
90000dea:	b082      	sub	sp, #8
90000dec:	af00      	add	r7, sp, #0
90000dee:	6078      	str	r0, [r7, #4]
90000df0:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90000df2:	687b      	ldr	r3, [r7, #4]
90000df4:	3318      	adds	r3, #24
90000df6:	6839      	ldr	r1, [r7, #0]
90000df8:	4618      	mov	r0, r3
90000dfa:	f000 f8bb 	bl	90000f74 <ft5336_gest_id>
90000dfe:	4603      	mov	r3, r0
}
90000e00:	4618      	mov	r0, r3
90000e02:	3708      	adds	r7, #8
90000e04:	46bd      	mov	sp, r7
90000e06:	bd80      	pop	{r7, pc}

90000e08 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
90000e08:	b580      	push	{r7, lr}
90000e0a:	b082      	sub	sp, #8
90000e0c:	af00      	add	r7, sp, #0
90000e0e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90000e10:	687b      	ldr	r3, [r7, #4]
90000e12:	3318      	adds	r3, #24
90000e14:	2101      	movs	r1, #1
90000e16:	4618      	mov	r0, r3
90000e18:	f000 f941 	bl	9000109e <ft5336_g_mode>
90000e1c:	4603      	mov	r3, r0
}
90000e1e:	4618      	mov	r0, r3
90000e20:	3708      	adds	r7, #8
90000e22:	46bd      	mov	sp, r7
90000e24:	bd80      	pop	{r7, pc}

90000e26 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
90000e26:	b580      	push	{r7, lr}
90000e28:	b082      	sub	sp, #8
90000e2a:	af00      	add	r7, sp, #0
90000e2c:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90000e2e:	687b      	ldr	r3, [r7, #4]
90000e30:	3318      	adds	r3, #24
90000e32:	2100      	movs	r1, #0
90000e34:	4618      	mov	r0, r3
90000e36:	f000 f932 	bl	9000109e <ft5336_g_mode>
90000e3a:	4603      	mov	r3, r0
}
90000e3c:	4618      	mov	r0, r3
90000e3e:	3708      	adds	r7, #8
90000e40:	46bd      	mov	sp, r7
90000e42:	bd80      	pop	{r7, pc}

90000e44 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
90000e44:	b480      	push	{r7}
90000e46:	b083      	sub	sp, #12
90000e48:	af00      	add	r7, sp, #0
90000e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90000e4c:	2300      	movs	r3, #0
}
90000e4e:	4618      	mov	r0, r3
90000e50:	370c      	adds	r7, #12
90000e52:	46bd      	mov	sp, r7
90000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e58:	4770      	bx	lr

90000e5a <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
90000e5a:	b480      	push	{r7}
90000e5c:	b083      	sub	sp, #12
90000e5e:	af00      	add	r7, sp, #0
90000e60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90000e62:	2300      	movs	r3, #0
}
90000e64:	4618      	mov	r0, r3
90000e66:	370c      	adds	r7, #12
90000e68:	46bd      	mov	sp, r7
90000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e6e:	4770      	bx	lr

90000e70 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
90000e70:	b580      	push	{r7, lr}
90000e72:	b084      	sub	sp, #16
90000e74:	af00      	add	r7, sp, #0
90000e76:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90000e78:	687b      	ldr	r3, [r7, #4]
90000e7a:	3318      	adds	r3, #24
90000e7c:	f107 020b 	add.w	r2, r7, #11
90000e80:	4611      	mov	r1, r2
90000e82:	4618      	mov	r0, r3
90000e84:	f000 f886 	bl	90000f94 <ft5336_td_status>
90000e88:	4603      	mov	r3, r0
90000e8a:	2b00      	cmp	r3, #0
90000e8c:	d003      	beq.n	90000e96 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
90000e8e:	f04f 33ff 	mov.w	r3, #4294967295
90000e92:	60fb      	str	r3, [r7, #12]
90000e94:	e007      	b.n	90000ea6 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90000e96:	7afb      	ldrb	r3, [r7, #11]
90000e98:	2b05      	cmp	r3, #5
90000e9a:	d902      	bls.n	90000ea2 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
90000e9c:	2300      	movs	r3, #0
90000e9e:	60fb      	str	r3, [r7, #12]
90000ea0:	e001      	b.n	90000ea6 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
90000ea2:	7afb      	ldrb	r3, [r7, #11]
90000ea4:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
90000ea6:	68fb      	ldr	r3, [r7, #12]
}
90000ea8:	4618      	mov	r0, r3
90000eaa:	3710      	adds	r7, #16
90000eac:	46bd      	mov	sp, r7
90000eae:	bd80      	pop	{r7, pc}

90000eb0 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90000eb0:	b590      	push	{r4, r7, lr}
90000eb2:	b087      	sub	sp, #28
90000eb4:	af00      	add	r7, sp, #0
90000eb6:	60f8      	str	r0, [r7, #12]
90000eb8:	607a      	str	r2, [r7, #4]
90000eba:	461a      	mov	r2, r3
90000ebc:	460b      	mov	r3, r1
90000ebe:	72fb      	strb	r3, [r7, #11]
90000ec0:	4613      	mov	r3, r2
90000ec2:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90000ec4:	68fb      	ldr	r3, [r7, #12]
90000ec6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90000ec8:	697b      	ldr	r3, [r7, #20]
90000eca:	691c      	ldr	r4, [r3, #16]
90000ecc:	697b      	ldr	r3, [r7, #20]
90000ece:	8918      	ldrh	r0, [r3, #8]
90000ed0:	7afb      	ldrb	r3, [r7, #11]
90000ed2:	b299      	uxth	r1, r3
90000ed4:	893b      	ldrh	r3, [r7, #8]
90000ed6:	687a      	ldr	r2, [r7, #4]
90000ed8:	47a0      	blx	r4
90000eda:	4603      	mov	r3, r0
}
90000edc:	4618      	mov	r0, r3
90000ede:	371c      	adds	r7, #28
90000ee0:	46bd      	mov	sp, r7
90000ee2:	bd90      	pop	{r4, r7, pc}

90000ee4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90000ee4:	b590      	push	{r4, r7, lr}
90000ee6:	b087      	sub	sp, #28
90000ee8:	af00      	add	r7, sp, #0
90000eea:	60f8      	str	r0, [r7, #12]
90000eec:	607a      	str	r2, [r7, #4]
90000eee:	461a      	mov	r2, r3
90000ef0:	460b      	mov	r3, r1
90000ef2:	72fb      	strb	r3, [r7, #11]
90000ef4:	4613      	mov	r3, r2
90000ef6:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90000ef8:	68fb      	ldr	r3, [r7, #12]
90000efa:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90000efc:	697b      	ldr	r3, [r7, #20]
90000efe:	68dc      	ldr	r4, [r3, #12]
90000f00:	697b      	ldr	r3, [r7, #20]
90000f02:	8918      	ldrh	r0, [r3, #8]
90000f04:	7afb      	ldrb	r3, [r7, #11]
90000f06:	b299      	uxth	r1, r3
90000f08:	893b      	ldrh	r3, [r7, #8]
90000f0a:	687a      	ldr	r2, [r7, #4]
90000f0c:	47a0      	blx	r4
90000f0e:	4603      	mov	r3, r0
}
90000f10:	4618      	mov	r0, r3
90000f12:	371c      	adds	r7, #28
90000f14:	46bd      	mov	sp, r7
90000f16:	bd90      	pop	{r4, r7, pc}

90000f18 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90000f18:	b590      	push	{r4, r7, lr}
90000f1a:	b085      	sub	sp, #20
90000f1c:	af00      	add	r7, sp, #0
90000f1e:	60f8      	str	r0, [r7, #12]
90000f20:	607a      	str	r2, [r7, #4]
90000f22:	461a      	mov	r2, r3
90000f24:	460b      	mov	r3, r1
90000f26:	72fb      	strb	r3, [r7, #11]
90000f28:	4613      	mov	r3, r2
90000f2a:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90000f2c:	68fb      	ldr	r3, [r7, #12]
90000f2e:	685c      	ldr	r4, [r3, #4]
90000f30:	68fb      	ldr	r3, [r7, #12]
90000f32:	6898      	ldr	r0, [r3, #8]
90000f34:	893b      	ldrh	r3, [r7, #8]
90000f36:	7af9      	ldrb	r1, [r7, #11]
90000f38:	687a      	ldr	r2, [r7, #4]
90000f3a:	47a0      	blx	r4
90000f3c:	4603      	mov	r3, r0
}
90000f3e:	4618      	mov	r0, r3
90000f40:	3714      	adds	r7, #20
90000f42:	46bd      	mov	sp, r7
90000f44:	bd90      	pop	{r4, r7, pc}

90000f46 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
90000f46:	b590      	push	{r4, r7, lr}
90000f48:	b085      	sub	sp, #20
90000f4a:	af00      	add	r7, sp, #0
90000f4c:	60f8      	str	r0, [r7, #12]
90000f4e:	607a      	str	r2, [r7, #4]
90000f50:	461a      	mov	r2, r3
90000f52:	460b      	mov	r3, r1
90000f54:	72fb      	strb	r3, [r7, #11]
90000f56:	4613      	mov	r3, r2
90000f58:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90000f5a:	68fb      	ldr	r3, [r7, #12]
90000f5c:	681c      	ldr	r4, [r3, #0]
90000f5e:	68fb      	ldr	r3, [r7, #12]
90000f60:	6898      	ldr	r0, [r3, #8]
90000f62:	893b      	ldrh	r3, [r7, #8]
90000f64:	7af9      	ldrb	r1, [r7, #11]
90000f66:	687a      	ldr	r2, [r7, #4]
90000f68:	47a0      	blx	r4
90000f6a:	4603      	mov	r3, r0
}
90000f6c:	4618      	mov	r0, r3
90000f6e:	3714      	adds	r7, #20
90000f70:	46bd      	mov	sp, r7
90000f72:	bd90      	pop	{r4, r7, pc}

90000f74 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90000f74:	b580      	push	{r7, lr}
90000f76:	b082      	sub	sp, #8
90000f78:	af00      	add	r7, sp, #0
90000f7a:	6078      	str	r0, [r7, #4]
90000f7c:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
90000f7e:	2301      	movs	r3, #1
90000f80:	683a      	ldr	r2, [r7, #0]
90000f82:	2101      	movs	r1, #1
90000f84:	6878      	ldr	r0, [r7, #4]
90000f86:	f7ff ffc7 	bl	90000f18 <ft5336_read_reg>
90000f8a:	4603      	mov	r3, r0
}
90000f8c:	4618      	mov	r0, r3
90000f8e:	3708      	adds	r7, #8
90000f90:	46bd      	mov	sp, r7
90000f92:	bd80      	pop	{r7, pc}

90000f94 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90000f94:	b580      	push	{r7, lr}
90000f96:	b084      	sub	sp, #16
90000f98:	af00      	add	r7, sp, #0
90000f9a:	6078      	str	r0, [r7, #4]
90000f9c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
90000f9e:	2301      	movs	r3, #1
90000fa0:	683a      	ldr	r2, [r7, #0]
90000fa2:	2102      	movs	r1, #2
90000fa4:	6878      	ldr	r0, [r7, #4]
90000fa6:	f7ff ffb7 	bl	90000f18 <ft5336_read_reg>
90000faa:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90000fac:	68fb      	ldr	r3, [r7, #12]
90000fae:	2b00      	cmp	r3, #0
90000fb0:	d10a      	bne.n	90000fc8 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90000fb2:	683b      	ldr	r3, [r7, #0]
90000fb4:	781b      	ldrb	r3, [r3, #0]
90000fb6:	f003 030f 	and.w	r3, r3, #15
90000fba:	b2da      	uxtb	r2, r3
90000fbc:	683b      	ldr	r3, [r7, #0]
90000fbe:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
90000fc0:	683b      	ldr	r3, [r7, #0]
90000fc2:	781a      	ldrb	r2, [r3, #0]
90000fc4:	683b      	ldr	r3, [r7, #0]
90000fc6:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90000fc8:	68fb      	ldr	r3, [r7, #12]
}
90000fca:	4618      	mov	r0, r3
90000fcc:	3710      	adds	r7, #16
90000fce:	46bd      	mov	sp, r7
90000fd0:	bd80      	pop	{r7, pc}

90000fd2 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90000fd2:	b580      	push	{r7, lr}
90000fd4:	b082      	sub	sp, #8
90000fd6:	af00      	add	r7, sp, #0
90000fd8:	6078      	str	r0, [r7, #4]
90000fda:	460b      	mov	r3, r1
90000fdc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
90000fde:	1cfa      	adds	r2, r7, #3
90000fe0:	2301      	movs	r3, #1
90000fe2:	2191      	movs	r1, #145	@ 0x91
90000fe4:	6878      	ldr	r0, [r7, #4]
90000fe6:	f7ff ffae 	bl	90000f46 <ft5336_write_reg>
90000fea:	4603      	mov	r3, r0
}
90000fec:	4618      	mov	r0, r3
90000fee:	3708      	adds	r7, #8
90000ff0:	46bd      	mov	sp, r7
90000ff2:	bd80      	pop	{r7, pc}

90000ff4 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90000ff4:	b580      	push	{r7, lr}
90000ff6:	b082      	sub	sp, #8
90000ff8:	af00      	add	r7, sp, #0
90000ffa:	6078      	str	r0, [r7, #4]
90000ffc:	460b      	mov	r3, r1
90000ffe:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
90001000:	1cfa      	adds	r2, r7, #3
90001002:	2301      	movs	r3, #1
90001004:	2192      	movs	r1, #146	@ 0x92
90001006:	6878      	ldr	r0, [r7, #4]
90001008:	f7ff ff9d 	bl	90000f46 <ft5336_write_reg>
9000100c:	4603      	mov	r3, r0
}
9000100e:	4618      	mov	r0, r3
90001010:	3708      	adds	r7, #8
90001012:	46bd      	mov	sp, r7
90001014:	bd80      	pop	{r7, pc}

90001016 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90001016:	b580      	push	{r7, lr}
90001018:	b082      	sub	sp, #8
9000101a:	af00      	add	r7, sp, #0
9000101c:	6078      	str	r0, [r7, #4]
9000101e:	460b      	mov	r3, r1
90001020:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
90001022:	1cfa      	adds	r2, r7, #3
90001024:	2301      	movs	r3, #1
90001026:	2193      	movs	r1, #147	@ 0x93
90001028:	6878      	ldr	r0, [r7, #4]
9000102a:	f7ff ff8c 	bl	90000f46 <ft5336_write_reg>
9000102e:	4603      	mov	r3, r0
}
90001030:	4618      	mov	r0, r3
90001032:	3708      	adds	r7, #8
90001034:	46bd      	mov	sp, r7
90001036:	bd80      	pop	{r7, pc}

90001038 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90001038:	b580      	push	{r7, lr}
9000103a:	b082      	sub	sp, #8
9000103c:	af00      	add	r7, sp, #0
9000103e:	6078      	str	r0, [r7, #4]
90001040:	460b      	mov	r3, r1
90001042:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
90001044:	1cfa      	adds	r2, r7, #3
90001046:	2301      	movs	r3, #1
90001048:	2194      	movs	r1, #148	@ 0x94
9000104a:	6878      	ldr	r0, [r7, #4]
9000104c:	f7ff ff7b 	bl	90000f46 <ft5336_write_reg>
90001050:	4603      	mov	r3, r0
}
90001052:	4618      	mov	r0, r3
90001054:	3708      	adds	r7, #8
90001056:	46bd      	mov	sp, r7
90001058:	bd80      	pop	{r7, pc}

9000105a <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
9000105a:	b580      	push	{r7, lr}
9000105c:	b082      	sub	sp, #8
9000105e:	af00      	add	r7, sp, #0
90001060:	6078      	str	r0, [r7, #4]
90001062:	460b      	mov	r3, r1
90001064:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
90001066:	1cfa      	adds	r2, r7, #3
90001068:	2301      	movs	r3, #1
9000106a:	2195      	movs	r1, #149	@ 0x95
9000106c:	6878      	ldr	r0, [r7, #4]
9000106e:	f7ff ff6a 	bl	90000f46 <ft5336_write_reg>
90001072:	4603      	mov	r3, r0
}
90001074:	4618      	mov	r0, r3
90001076:	3708      	adds	r7, #8
90001078:	46bd      	mov	sp, r7
9000107a:	bd80      	pop	{r7, pc}

9000107c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
9000107c:	b580      	push	{r7, lr}
9000107e:	b082      	sub	sp, #8
90001080:	af00      	add	r7, sp, #0
90001082:	6078      	str	r0, [r7, #4]
90001084:	460b      	mov	r3, r1
90001086:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
90001088:	1cfa      	adds	r2, r7, #3
9000108a:	2301      	movs	r3, #1
9000108c:	2196      	movs	r1, #150	@ 0x96
9000108e:	6878      	ldr	r0, [r7, #4]
90001090:	f7ff ff59 	bl	90000f46 <ft5336_write_reg>
90001094:	4603      	mov	r3, r0
}
90001096:	4618      	mov	r0, r3
90001098:	3708      	adds	r7, #8
9000109a:	46bd      	mov	sp, r7
9000109c:	bd80      	pop	{r7, pc}

9000109e <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
9000109e:	b580      	push	{r7, lr}
900010a0:	b082      	sub	sp, #8
900010a2:	af00      	add	r7, sp, #0
900010a4:	6078      	str	r0, [r7, #4]
900010a6:	460b      	mov	r3, r1
900010a8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
900010aa:	1cfa      	adds	r2, r7, #3
900010ac:	2301      	movs	r3, #1
900010ae:	21a4      	movs	r1, #164	@ 0xa4
900010b0:	6878      	ldr	r0, [r7, #4]
900010b2:	f7ff ff48 	bl	90000f46 <ft5336_write_reg>
900010b6:	4603      	mov	r3, r0
}
900010b8:	4618      	mov	r0, r3
900010ba:	3708      	adds	r7, #8
900010bc:	46bd      	mov	sp, r7
900010be:	bd80      	pop	{r7, pc}

900010c0 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900010c0:	b580      	push	{r7, lr}
900010c2:	b084      	sub	sp, #16
900010c4:	af00      	add	r7, sp, #0
900010c6:	6078      	str	r0, [r7, #4]
900010c8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900010ca:	2301      	movs	r3, #1
900010cc:	683a      	ldr	r2, [r7, #0]
900010ce:	21a8      	movs	r1, #168	@ 0xa8
900010d0:	6878      	ldr	r0, [r7, #4]
900010d2:	f7ff ff21 	bl	90000f18 <ft5336_read_reg>
900010d6:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900010d8:	68fb      	ldr	r3, [r7, #12]
900010da:	2b00      	cmp	r3, #0
900010dc:	d107      	bne.n	900010ee <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900010de:	683b      	ldr	r3, [r7, #0]
900010e0:	781a      	ldrb	r2, [r3, #0]
900010e2:	683b      	ldr	r3, [r7, #0]
900010e4:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900010e6:	683b      	ldr	r3, [r7, #0]
900010e8:	781a      	ldrb	r2, [r3, #0]
900010ea:	683b      	ldr	r3, [r7, #0]
900010ec:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900010ee:	68fb      	ldr	r3, [r7, #12]
}
900010f0:	4618      	mov	r0, r3
900010f2:	3710      	adds	r7, #16
900010f4:	46bd      	mov	sp, r7
900010f6:	bd80      	pop	{r7, pc}

900010f8 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900010f8:	b580      	push	{r7, lr}
900010fa:	b084      	sub	sp, #16
900010fc:	af00      	add	r7, sp, #0
900010fe:	6078      	str	r0, [r7, #4]
90001100:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90001102:	f04f 33ff 	mov.w	r3, #4294967295
90001106:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90001108:	683b      	ldr	r3, [r7, #0]
9000110a:	681b      	ldr	r3, [r3, #0]
9000110c:	4619      	mov	r1, r3
9000110e:	6878      	ldr	r0, [r7, #4]
90001110:	f000 f832 	bl	90001178 <MT48LC4M32B2_ClockEnable>
90001114:	4603      	mov	r3, r0
90001116:	2b00      	cmp	r3, #0
90001118:	d128      	bne.n	9000116c <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
9000111a:	2001      	movs	r0, #1
9000111c:	f000 f8e2 	bl	900012e4 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90001120:	683b      	ldr	r3, [r7, #0]
90001122:	681b      	ldr	r3, [r3, #0]
90001124:	4619      	mov	r1, r3
90001126:	6878      	ldr	r0, [r7, #4]
90001128:	f000 f84a 	bl	900011c0 <MT48LC4M32B2_Precharge>
9000112c:	4603      	mov	r3, r0
9000112e:	2b00      	cmp	r3, #0
90001130:	d11c      	bne.n	9000116c <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
90001132:	683b      	ldr	r3, [r7, #0]
90001134:	6819      	ldr	r1, [r3, #0]
90001136:	683b      	ldr	r3, [r7, #0]
90001138:	685b      	ldr	r3, [r3, #4]
9000113a:	461a      	mov	r2, r3
9000113c:	6878      	ldr	r0, [r7, #4]
9000113e:	f000 f897 	bl	90001270 <MT48LC4M32B2_RefreshMode>
90001142:	4603      	mov	r3, r0
90001144:	2b00      	cmp	r3, #0
90001146:	d111      	bne.n	9000116c <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001148:	6839      	ldr	r1, [r7, #0]
9000114a:	6878      	ldr	r0, [r7, #4]
9000114c:	f000 f85c 	bl	90001208 <MT48LC4M32B2_ModeRegConfig>
90001150:	4603      	mov	r3, r0
90001152:	2b00      	cmp	r3, #0
90001154:	d10a      	bne.n	9000116c <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001156:	683b      	ldr	r3, [r7, #0]
90001158:	689b      	ldr	r3, [r3, #8]
9000115a:	4619      	mov	r1, r3
9000115c:	6878      	ldr	r0, [r7, #4]
9000115e:	f000 f8ad 	bl	900012bc <MT48LC4M32B2_RefreshRate>
90001162:	4603      	mov	r3, r0
90001164:	2b00      	cmp	r3, #0
90001166:	d101      	bne.n	9000116c <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001168:	2300      	movs	r3, #0
9000116a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
9000116c:	68fb      	ldr	r3, [r7, #12]
}
9000116e:	4618      	mov	r0, r3
90001170:	3710      	adds	r7, #16
90001172:	46bd      	mov	sp, r7
90001174:	bd80      	pop	{r7, pc}
	...

90001178 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001178:	b580      	push	{r7, lr}
9000117a:	b082      	sub	sp, #8
9000117c:	af00      	add	r7, sp, #0
9000117e:	6078      	str	r0, [r7, #4]
90001180:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90001182:	4b0e      	ldr	r3, [pc, #56]	@ (900011bc <MT48LC4M32B2_ClockEnable+0x44>)
90001184:	2201      	movs	r2, #1
90001186:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001188:	4a0c      	ldr	r2, [pc, #48]	@ (900011bc <MT48LC4M32B2_ClockEnable+0x44>)
9000118a:	683b      	ldr	r3, [r7, #0]
9000118c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000118e:	4b0b      	ldr	r3, [pc, #44]	@ (900011bc <MT48LC4M32B2_ClockEnable+0x44>)
90001190:	2201      	movs	r2, #1
90001192:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001194:	4b09      	ldr	r3, [pc, #36]	@ (900011bc <MT48LC4M32B2_ClockEnable+0x44>)
90001196:	2200      	movs	r2, #0
90001198:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000119a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000119e:	4907      	ldr	r1, [pc, #28]	@ (900011bc <MT48LC4M32B2_ClockEnable+0x44>)
900011a0:	6878      	ldr	r0, [r7, #4]
900011a2:	f008 fa77 	bl	90009694 <HAL_SDRAM_SendCommand>
900011a6:	4603      	mov	r3, r0
900011a8:	2b00      	cmp	r3, #0
900011aa:	d002      	beq.n	900011b2 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900011ac:	f04f 33ff 	mov.w	r3, #4294967295
900011b0:	e000      	b.n	900011b4 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900011b2:	2300      	movs	r3, #0
  }
}
900011b4:	4618      	mov	r0, r3
900011b6:	3708      	adds	r7, #8
900011b8:	46bd      	mov	sp, r7
900011ba:	bd80      	pop	{r7, pc}
900011bc:	20000518 	.word	0x20000518

900011c0 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900011c0:	b580      	push	{r7, lr}
900011c2:	b082      	sub	sp, #8
900011c4:	af00      	add	r7, sp, #0
900011c6:	6078      	str	r0, [r7, #4]
900011c8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900011ca:	4b0e      	ldr	r3, [pc, #56]	@ (90001204 <MT48LC4M32B2_Precharge+0x44>)
900011cc:	2202      	movs	r2, #2
900011ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900011d0:	4a0c      	ldr	r2, [pc, #48]	@ (90001204 <MT48LC4M32B2_Precharge+0x44>)
900011d2:	683b      	ldr	r3, [r7, #0]
900011d4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900011d6:	4b0b      	ldr	r3, [pc, #44]	@ (90001204 <MT48LC4M32B2_Precharge+0x44>)
900011d8:	2201      	movs	r2, #1
900011da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900011dc:	4b09      	ldr	r3, [pc, #36]	@ (90001204 <MT48LC4M32B2_Precharge+0x44>)
900011de:	2200      	movs	r2, #0
900011e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900011e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900011e6:	4907      	ldr	r1, [pc, #28]	@ (90001204 <MT48LC4M32B2_Precharge+0x44>)
900011e8:	6878      	ldr	r0, [r7, #4]
900011ea:	f008 fa53 	bl	90009694 <HAL_SDRAM_SendCommand>
900011ee:	4603      	mov	r3, r0
900011f0:	2b00      	cmp	r3, #0
900011f2:	d002      	beq.n	900011fa <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900011f4:	f04f 33ff 	mov.w	r3, #4294967295
900011f8:	e000      	b.n	900011fc <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900011fa:	2300      	movs	r3, #0
  }
}
900011fc:	4618      	mov	r0, r3
900011fe:	3708      	adds	r7, #8
90001200:	46bd      	mov	sp, r7
90001202:	bd80      	pop	{r7, pc}
90001204:	20000518 	.word	0x20000518

90001208 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90001208:	b580      	push	{r7, lr}
9000120a:	b084      	sub	sp, #16
9000120c:	af00      	add	r7, sp, #0
9000120e:	6078      	str	r0, [r7, #4]
90001210:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001212:	683b      	ldr	r3, [r7, #0]
90001214:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
90001216:	683b      	ldr	r3, [r7, #0]
90001218:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000121a:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
9000121c:	683b      	ldr	r3, [r7, #0]
9000121e:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
90001220:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
90001222:	683b      	ldr	r3, [r7, #0]
90001224:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001226:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001228:	683b      	ldr	r3, [r7, #0]
9000122a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000122c:	4313      	orrs	r3, r2
9000122e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90001230:	4b0e      	ldr	r3, [pc, #56]	@ (9000126c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001232:	2204      	movs	r2, #4
90001234:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001236:	683b      	ldr	r3, [r7, #0]
90001238:	681b      	ldr	r3, [r3, #0]
9000123a:	4a0c      	ldr	r2, [pc, #48]	@ (9000126c <MT48LC4M32B2_ModeRegConfig+0x64>)
9000123c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000123e:	4b0b      	ldr	r3, [pc, #44]	@ (9000126c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001240:	2201      	movs	r2, #1
90001242:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001244:	4a09      	ldr	r2, [pc, #36]	@ (9000126c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001246:	68fb      	ldr	r3, [r7, #12]
90001248:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000124a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000124e:	4907      	ldr	r1, [pc, #28]	@ (9000126c <MT48LC4M32B2_ModeRegConfig+0x64>)
90001250:	6878      	ldr	r0, [r7, #4]
90001252:	f008 fa1f 	bl	90009694 <HAL_SDRAM_SendCommand>
90001256:	4603      	mov	r3, r0
90001258:	2b00      	cmp	r3, #0
9000125a:	d002      	beq.n	90001262 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
9000125c:	f04f 33ff 	mov.w	r3, #4294967295
90001260:	e000      	b.n	90001264 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001262:	2300      	movs	r3, #0
  }
}
90001264:	4618      	mov	r0, r3
90001266:	3710      	adds	r7, #16
90001268:	46bd      	mov	sp, r7
9000126a:	bd80      	pop	{r7, pc}
9000126c:	20000518 	.word	0x20000518

90001270 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
90001270:	b580      	push	{r7, lr}
90001272:	b084      	sub	sp, #16
90001274:	af00      	add	r7, sp, #0
90001276:	60f8      	str	r0, [r7, #12]
90001278:	60b9      	str	r1, [r7, #8]
9000127a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
9000127c:	4a0e      	ldr	r2, [pc, #56]	@ (900012b8 <MT48LC4M32B2_RefreshMode+0x48>)
9000127e:	687b      	ldr	r3, [r7, #4]
90001280:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
90001282:	4a0d      	ldr	r2, [pc, #52]	@ (900012b8 <MT48LC4M32B2_RefreshMode+0x48>)
90001284:	68bb      	ldr	r3, [r7, #8]
90001286:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001288:	4b0b      	ldr	r3, [pc, #44]	@ (900012b8 <MT48LC4M32B2_RefreshMode+0x48>)
9000128a:	2208      	movs	r2, #8
9000128c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000128e:	4b0a      	ldr	r3, [pc, #40]	@ (900012b8 <MT48LC4M32B2_RefreshMode+0x48>)
90001290:	2200      	movs	r2, #0
90001292:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001294:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001298:	4907      	ldr	r1, [pc, #28]	@ (900012b8 <MT48LC4M32B2_RefreshMode+0x48>)
9000129a:	68f8      	ldr	r0, [r7, #12]
9000129c:	f008 f9fa 	bl	90009694 <HAL_SDRAM_SendCommand>
900012a0:	4603      	mov	r3, r0
900012a2:	2b00      	cmp	r3, #0
900012a4:	d002      	beq.n	900012ac <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
900012a6:	f04f 33ff 	mov.w	r3, #4294967295
900012aa:	e000      	b.n	900012ae <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
900012ac:	2300      	movs	r3, #0
  }
}
900012ae:	4618      	mov	r0, r3
900012b0:	3710      	adds	r7, #16
900012b2:	46bd      	mov	sp, r7
900012b4:	bd80      	pop	{r7, pc}
900012b6:	bf00      	nop
900012b8:	20000518 	.word	0x20000518

900012bc <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
900012bc:	b580      	push	{r7, lr}
900012be:	b082      	sub	sp, #8
900012c0:	af00      	add	r7, sp, #0
900012c2:	6078      	str	r0, [r7, #4]
900012c4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900012c6:	6839      	ldr	r1, [r7, #0]
900012c8:	6878      	ldr	r0, [r7, #4]
900012ca:	f008 fa18 	bl	900096fe <HAL_SDRAM_ProgramRefreshRate>
900012ce:	4603      	mov	r3, r0
900012d0:	2b00      	cmp	r3, #0
900012d2:	d002      	beq.n	900012da <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
900012d4:	f04f 33ff 	mov.w	r3, #4294967295
900012d8:	e000      	b.n	900012dc <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
900012da:	2300      	movs	r3, #0
  }
}
900012dc:	4618      	mov	r0, r3
900012de:	3708      	adds	r7, #8
900012e0:	46bd      	mov	sp, r7
900012e2:	bd80      	pop	{r7, pc}

900012e4 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
900012e4:	b580      	push	{r7, lr}
900012e6:	b084      	sub	sp, #16
900012e8:	af00      	add	r7, sp, #0
900012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900012ec:	f001 ff36 	bl	9000315c <HAL_GetTick>
900012f0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900012f2:	bf00      	nop
900012f4:	f001 ff32 	bl	9000315c <HAL_GetTick>
900012f8:	4602      	mov	r2, r0
900012fa:	68fb      	ldr	r3, [r7, #12]
900012fc:	1ad3      	subs	r3, r2, r3
900012fe:	687a      	ldr	r2, [r7, #4]
90001300:	429a      	cmp	r2, r3
90001302:	d8f7      	bhi.n	900012f4 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001304:	2300      	movs	r3, #0
}
90001306:	4618      	mov	r0, r3
90001308:	3710      	adds	r7, #16
9000130a:	46bd      	mov	sp, r7
9000130c:	bd80      	pop	{r7, pc}
	...

90001310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
90001310:	b580      	push	{r7, lr}
90001312:	b08a      	sub	sp, #40	@ 0x28
90001314:	af00      	add	r7, sp, #0
90001316:	4603      	mov	r3, r0
90001318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
9000131a:	2300      	movs	r3, #0
9000131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
9000131e:	79fb      	ldrb	r3, [r7, #7]
90001320:	2b00      	cmp	r3, #0
90001322:	d10f      	bne.n	90001344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
90001324:	4b26      	ldr	r3, [pc, #152]	@ (900013c0 <BSP_LED_Init+0xb0>)
90001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000132a:	4a25      	ldr	r2, [pc, #148]	@ (900013c0 <BSP_LED_Init+0xb0>)
9000132c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90001330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001334:	4b22      	ldr	r3, [pc, #136]	@ (900013c0 <BSP_LED_Init+0xb0>)
90001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000133a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000133e:	60fb      	str	r3, [r7, #12]
90001340:	68fb      	ldr	r3, [r7, #12]
90001342:	e015      	b.n	90001370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
90001344:	79fb      	ldrb	r3, [r7, #7]
90001346:	2b01      	cmp	r3, #1
90001348:	d10f      	bne.n	9000136a <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
9000134a:	4b1d      	ldr	r3, [pc, #116]	@ (900013c0 <BSP_LED_Init+0xb0>)
9000134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001350:	4a1b      	ldr	r2, [pc, #108]	@ (900013c0 <BSP_LED_Init+0xb0>)
90001352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90001356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000135a:	4b19      	ldr	r3, [pc, #100]	@ (900013c0 <BSP_LED_Init+0xb0>)
9000135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90001364:	60bb      	str	r3, [r7, #8]
90001366:	68bb      	ldr	r3, [r7, #8]
90001368:	e002      	b.n	90001370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000136a:	f06f 0301 	mvn.w	r3, #1
9000136e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
90001370:	79fb      	ldrb	r3, [r7, #7]
90001372:	4a14      	ldr	r2, [pc, #80]	@ (900013c4 <BSP_LED_Init+0xb4>)
90001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001378:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
9000137a:	2301      	movs	r3, #1
9000137c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
9000137e:	2301      	movs	r3, #1
90001380:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001382:	2303      	movs	r3, #3
90001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
90001386:	79fb      	ldrb	r3, [r7, #7]
90001388:	4a0f      	ldr	r2, [pc, #60]	@ (900013c8 <BSP_LED_Init+0xb8>)
9000138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000138e:	f107 0210 	add.w	r2, r7, #16
90001392:	4611      	mov	r1, r2
90001394:	4618      	mov	r0, r3
90001396:	f002 fb67 	bl	90003a68 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
9000139a:	79fb      	ldrb	r3, [r7, #7]
9000139c:	4a0a      	ldr	r2, [pc, #40]	@ (900013c8 <BSP_LED_Init+0xb8>)
9000139e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
900013a2:	79fb      	ldrb	r3, [r7, #7]
900013a4:	4a07      	ldr	r2, [pc, #28]	@ (900013c4 <BSP_LED_Init+0xb4>)
900013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900013aa:	b29b      	uxth	r3, r3
900013ac:	2201      	movs	r2, #1
900013ae:	4619      	mov	r1, r3
900013b0:	f002 fe14 	bl	90003fdc <HAL_GPIO_WritePin>
  return ret;
900013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
900013b6:	4618      	mov	r0, r3
900013b8:	3728      	adds	r7, #40	@ 0x28
900013ba:	46bd      	mov	sp, r7
900013bc:	bd80      	pop	{r7, pc}
900013be:	bf00      	nop
900013c0:	58024400 	.word	0x58024400
900013c4:	9000aad4 	.word	0x9000aad4
900013c8:	20000030 	.word	0x20000030

900013cc <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
900013cc:	b580      	push	{r7, lr}
900013ce:	b082      	sub	sp, #8
900013d0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
900013d2:	2300      	movs	r3, #0
900013d4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
900013d6:	4b16      	ldr	r3, [pc, #88]	@ (90001430 <BSP_I2C4_Init+0x64>)
900013d8:	4a16      	ldr	r2, [pc, #88]	@ (90001434 <BSP_I2C4_Init+0x68>)
900013da:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
900013dc:	4b16      	ldr	r3, [pc, #88]	@ (90001438 <BSP_I2C4_Init+0x6c>)
900013de:	681b      	ldr	r3, [r3, #0]
900013e0:	2b00      	cmp	r3, #0
900013e2:	d11f      	bne.n	90001424 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
900013e4:	4b14      	ldr	r3, [pc, #80]	@ (90001438 <BSP_I2C4_Init+0x6c>)
900013e6:	681b      	ldr	r3, [r3, #0]
900013e8:	3301      	adds	r3, #1
900013ea:	4a13      	ldr	r2, [pc, #76]	@ (90001438 <BSP_I2C4_Init+0x6c>)
900013ec:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
900013ee:	4810      	ldr	r0, [pc, #64]	@ (90001430 <BSP_I2C4_Init+0x64>)
900013f0:	f004 fec2 	bl	90006178 <HAL_I2C_GetState>
900013f4:	4603      	mov	r3, r0
900013f6:	2b00      	cmp	r3, #0
900013f8:	d114      	bne.n	90001424 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
900013fa:	480d      	ldr	r0, [pc, #52]	@ (90001430 <BSP_I2C4_Init+0x64>)
900013fc:	f000 fb60 	bl	90001ac0 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001400:	f006 fd7e 	bl	90007f00 <HAL_RCC_GetPCLK2Freq>
90001404:	4603      	mov	r3, r0
90001406:	490d      	ldr	r1, [pc, #52]	@ (9000143c <BSP_I2C4_Init+0x70>)
90001408:	4618      	mov	r0, r3
9000140a:	f000 f8e3 	bl	900015d4 <I2C_GetTiming>
9000140e:	4603      	mov	r3, r0
90001410:	4619      	mov	r1, r3
90001412:	4807      	ldr	r0, [pc, #28]	@ (90001430 <BSP_I2C4_Init+0x64>)
90001414:	f000 f838 	bl	90001488 <MX_I2C4_Init>
90001418:	4603      	mov	r3, r0
9000141a:	2b00      	cmp	r3, #0
9000141c:	d002      	beq.n	90001424 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
9000141e:	f06f 0307 	mvn.w	r3, #7
90001422:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001424:	687b      	ldr	r3, [r7, #4]
}
90001426:	4618      	mov	r0, r3
90001428:	3708      	adds	r7, #8
9000142a:	46bd      	mov	sp, r7
9000142c:	bd80      	pop	{r7, pc}
9000142e:	bf00      	nop
90001430:	20000f30 	.word	0x20000f30
90001434:	58001c00 	.word	0x58001c00
90001438:	20000528 	.word	0x20000528
9000143c:	000186a0 	.word	0x000186a0

90001440 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
90001440:	b580      	push	{r7, lr}
90001442:	b082      	sub	sp, #8
90001444:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
90001446:	2300      	movs	r3, #0
90001448:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
9000144a:	4b0d      	ldr	r3, [pc, #52]	@ (90001480 <BSP_I2C4_DeInit+0x40>)
9000144c:	681b      	ldr	r3, [r3, #0]
9000144e:	3b01      	subs	r3, #1
90001450:	4a0b      	ldr	r2, [pc, #44]	@ (90001480 <BSP_I2C4_DeInit+0x40>)
90001452:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90001454:	4b0a      	ldr	r3, [pc, #40]	@ (90001480 <BSP_I2C4_DeInit+0x40>)
90001456:	681b      	ldr	r3, [r3, #0]
90001458:	2b00      	cmp	r3, #0
9000145a:	d10b      	bne.n	90001474 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
9000145c:	4809      	ldr	r0, [pc, #36]	@ (90001484 <BSP_I2C4_DeInit+0x44>)
9000145e:	f000 fb9b 	bl	90001b98 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90001462:	4808      	ldr	r0, [pc, #32]	@ (90001484 <BSP_I2C4_DeInit+0x44>)
90001464:	f004 fc16 	bl	90005c94 <HAL_I2C_DeInit>
90001468:	4603      	mov	r3, r0
9000146a:	2b00      	cmp	r3, #0
9000146c:	d002      	beq.n	90001474 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
9000146e:	f06f 0307 	mvn.w	r3, #7
90001472:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
90001474:	687b      	ldr	r3, [r7, #4]
}
90001476:	4618      	mov	r0, r3
90001478:	3708      	adds	r7, #8
9000147a:	46bd      	mov	sp, r7
9000147c:	bd80      	pop	{r7, pc}
9000147e:	bf00      	nop
90001480:	20000528 	.word	0x20000528
90001484:	20000f30 	.word	0x20000f30

90001488 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001488:	b580      	push	{r7, lr}
9000148a:	b084      	sub	sp, #16
9000148c:	af00      	add	r7, sp, #0
9000148e:	6078      	str	r0, [r7, #4]
90001490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001492:	2300      	movs	r3, #0
90001494:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90001496:	687b      	ldr	r3, [r7, #4]
90001498:	683a      	ldr	r2, [r7, #0]
9000149a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
9000149c:	687b      	ldr	r3, [r7, #4]
9000149e:	2200      	movs	r2, #0
900014a0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
900014a2:	687b      	ldr	r3, [r7, #4]
900014a4:	2201      	movs	r2, #1
900014a6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
900014a8:	687b      	ldr	r3, [r7, #4]
900014aa:	2200      	movs	r2, #0
900014ac:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
900014ae:	687b      	ldr	r3, [r7, #4]
900014b0:	2200      	movs	r2, #0
900014b2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
900014b4:	687b      	ldr	r3, [r7, #4]
900014b6:	2200      	movs	r2, #0
900014b8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
900014ba:	687b      	ldr	r3, [r7, #4]
900014bc:	2200      	movs	r2, #0
900014be:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
900014c0:	687b      	ldr	r3, [r7, #4]
900014c2:	2200      	movs	r2, #0
900014c4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
900014c6:	6878      	ldr	r0, [r7, #4]
900014c8:	f004 fb48 	bl	90005b5c <HAL_I2C_Init>
900014cc:	4603      	mov	r3, r0
900014ce:	2b00      	cmp	r3, #0
900014d0:	d002      	beq.n	900014d8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
900014d2:	2301      	movs	r3, #1
900014d4:	73fb      	strb	r3, [r7, #15]
900014d6:	e014      	b.n	90001502 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
900014d8:	2300      	movs	r3, #0
900014da:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
900014dc:	68b9      	ldr	r1, [r7, #8]
900014de:	6878      	ldr	r0, [r7, #4]
900014e0:	f005 f926 	bl	90006730 <HAL_I2CEx_ConfigAnalogFilter>
900014e4:	4603      	mov	r3, r0
900014e6:	2b00      	cmp	r3, #0
900014e8:	d002      	beq.n	900014f0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
900014ea:	2301      	movs	r3, #1
900014ec:	73fb      	strb	r3, [r7, #15]
900014ee:	e008      	b.n	90001502 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
900014f0:	2100      	movs	r1, #0
900014f2:	6878      	ldr	r0, [r7, #4]
900014f4:	f005 f967 	bl	900067c6 <HAL_I2CEx_ConfigDigitalFilter>
900014f8:	4603      	mov	r3, r0
900014fa:	2b00      	cmp	r3, #0
900014fc:	d001      	beq.n	90001502 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
900014fe:	2301      	movs	r3, #1
90001500:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001502:	7bfb      	ldrb	r3, [r7, #15]
}
90001504:	4618      	mov	r0, r3
90001506:	3710      	adds	r7, #16
90001508:	46bd      	mov	sp, r7
9000150a:	bd80      	pop	{r7, pc}

9000150c <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
9000150c:	b580      	push	{r7, lr}
9000150e:	b088      	sub	sp, #32
90001510:	af02      	add	r7, sp, #8
90001512:	60ba      	str	r2, [r7, #8]
90001514:	461a      	mov	r2, r3
90001516:	4603      	mov	r3, r0
90001518:	81fb      	strh	r3, [r7, #14]
9000151a:	460b      	mov	r3, r1
9000151c:	81bb      	strh	r3, [r7, #12]
9000151e:	4613      	mov	r3, r2
90001520:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001522:	89b9      	ldrh	r1, [r7, #12]
90001524:	89f8      	ldrh	r0, [r7, #14]
90001526:	88fb      	ldrh	r3, [r7, #6]
90001528:	9300      	str	r3, [sp, #0]
9000152a:	68bb      	ldr	r3, [r7, #8]
9000152c:	2201      	movs	r2, #1
9000152e:	f000 fb57 	bl	90001be0 <I2C4_WriteReg>
90001532:	4603      	mov	r3, r0
90001534:	2b00      	cmp	r3, #0
90001536:	d102      	bne.n	9000153e <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001538:	2300      	movs	r3, #0
9000153a:	617b      	str	r3, [r7, #20]
9000153c:	e00c      	b.n	90001558 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000153e:	4809      	ldr	r0, [pc, #36]	@ (90001564 <BSP_I2C4_WriteReg+0x58>)
90001540:	f004 fe28 	bl	90006194 <HAL_I2C_GetError>
90001544:	4603      	mov	r3, r0
90001546:	2b04      	cmp	r3, #4
90001548:	d103      	bne.n	90001552 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
9000154a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
9000154e:	617b      	str	r3, [r7, #20]
90001550:	e002      	b.n	90001558 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001552:	f06f 0303 	mvn.w	r3, #3
90001556:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001558:	697b      	ldr	r3, [r7, #20]
}
9000155a:	4618      	mov	r0, r3
9000155c:	3718      	adds	r7, #24
9000155e:	46bd      	mov	sp, r7
90001560:	bd80      	pop	{r7, pc}
90001562:	bf00      	nop
90001564:	20000f30 	.word	0x20000f30

90001568 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001568:	b580      	push	{r7, lr}
9000156a:	b088      	sub	sp, #32
9000156c:	af02      	add	r7, sp, #8
9000156e:	60ba      	str	r2, [r7, #8]
90001570:	461a      	mov	r2, r3
90001572:	4603      	mov	r3, r0
90001574:	81fb      	strh	r3, [r7, #14]
90001576:	460b      	mov	r3, r1
90001578:	81bb      	strh	r3, [r7, #12]
9000157a:	4613      	mov	r3, r2
9000157c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
9000157e:	89b9      	ldrh	r1, [r7, #12]
90001580:	89f8      	ldrh	r0, [r7, #14]
90001582:	88fb      	ldrh	r3, [r7, #6]
90001584:	9300      	str	r3, [sp, #0]
90001586:	68bb      	ldr	r3, [r7, #8]
90001588:	2201      	movs	r2, #1
9000158a:	f000 fb4f 	bl	90001c2c <I2C4_ReadReg>
9000158e:	4603      	mov	r3, r0
90001590:	2b00      	cmp	r3, #0
90001592:	d102      	bne.n	9000159a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001594:	2300      	movs	r3, #0
90001596:	617b      	str	r3, [r7, #20]
90001598:	e00c      	b.n	900015b4 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000159a:	4809      	ldr	r0, [pc, #36]	@ (900015c0 <BSP_I2C4_ReadReg+0x58>)
9000159c:	f004 fdfa 	bl	90006194 <HAL_I2C_GetError>
900015a0:	4603      	mov	r3, r0
900015a2:	2b04      	cmp	r3, #4
900015a4:	d103      	bne.n	900015ae <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900015a6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
900015aa:	617b      	str	r3, [r7, #20]
900015ac:	e002      	b.n	900015b4 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
900015ae:	f06f 0303 	mvn.w	r3, #3
900015b2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
900015b4:	697b      	ldr	r3, [r7, #20]
}
900015b6:	4618      	mov	r0, r3
900015b8:	3718      	adds	r7, #24
900015ba:	46bd      	mov	sp, r7
900015bc:	bd80      	pop	{r7, pc}
900015be:	bf00      	nop
900015c0:	20000f30 	.word	0x20000f30

900015c4 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
900015c4:	b580      	push	{r7, lr}
900015c6:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
900015c8:	f001 fdc8 	bl	9000315c <HAL_GetTick>
900015cc:	4603      	mov	r3, r0
}
900015ce:	4618      	mov	r0, r3
900015d0:	bd80      	pop	{r7, pc}
	...

900015d4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
900015d4:	b580      	push	{r7, lr}
900015d6:	b086      	sub	sp, #24
900015d8:	af00      	add	r7, sp, #0
900015da:	6078      	str	r0, [r7, #4]
900015dc:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
900015de:	2300      	movs	r3, #0
900015e0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
900015e2:	687b      	ldr	r3, [r7, #4]
900015e4:	2b00      	cmp	r3, #0
900015e6:	d06b      	beq.n	900016c0 <I2C_GetTiming+0xec>
900015e8:	683b      	ldr	r3, [r7, #0]
900015ea:	2b00      	cmp	r3, #0
900015ec:	d068      	beq.n	900016c0 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
900015ee:	2300      	movs	r3, #0
900015f0:	613b      	str	r3, [r7, #16]
900015f2:	e060      	b.n	900016b6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
900015f4:	4a35      	ldr	r2, [pc, #212]	@ (900016cc <I2C_GetTiming+0xf8>)
900015f6:	693b      	ldr	r3, [r7, #16]
900015f8:	212c      	movs	r1, #44	@ 0x2c
900015fa:	fb01 f303 	mul.w	r3, r1, r3
900015fe:	4413      	add	r3, r2
90001600:	3304      	adds	r3, #4
90001602:	681b      	ldr	r3, [r3, #0]
90001604:	683a      	ldr	r2, [r7, #0]
90001606:	429a      	cmp	r2, r3
90001608:	d352      	bcc.n	900016b0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
9000160a:	4a30      	ldr	r2, [pc, #192]	@ (900016cc <I2C_GetTiming+0xf8>)
9000160c:	693b      	ldr	r3, [r7, #16]
9000160e:	212c      	movs	r1, #44	@ 0x2c
90001610:	fb01 f303 	mul.w	r3, r1, r3
90001614:	4413      	add	r3, r2
90001616:	3308      	adds	r3, #8
90001618:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
9000161a:	683a      	ldr	r2, [r7, #0]
9000161c:	429a      	cmp	r2, r3
9000161e:	d847      	bhi.n	900016b0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001620:	6939      	ldr	r1, [r7, #16]
90001622:	6878      	ldr	r0, [r7, #4]
90001624:	f000 f856 	bl	900016d4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001628:	6939      	ldr	r1, [r7, #16]
9000162a:	6878      	ldr	r0, [r7, #4]
9000162c:	f000 f940 	bl	900018b0 <I2C_Compute_SCLL_SCLH>
90001630:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90001632:	68fb      	ldr	r3, [r7, #12]
90001634:	2b7f      	cmp	r3, #127	@ 0x7f
90001636:	d842      	bhi.n	900016be <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001638:	4925      	ldr	r1, [pc, #148]	@ (900016d0 <I2C_GetTiming+0xfc>)
9000163a:	68fa      	ldr	r2, [r7, #12]
9000163c:	4613      	mov	r3, r2
9000163e:	009b      	lsls	r3, r3, #2
90001640:	4413      	add	r3, r2
90001642:	009b      	lsls	r3, r3, #2
90001644:	440b      	add	r3, r1
90001646:	681b      	ldr	r3, [r3, #0]
90001648:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
9000164a:	4821      	ldr	r0, [pc, #132]	@ (900016d0 <I2C_GetTiming+0xfc>)
9000164c:	68fa      	ldr	r2, [r7, #12]
9000164e:	4613      	mov	r3, r2
90001650:	009b      	lsls	r3, r3, #2
90001652:	4413      	add	r3, r2
90001654:	009b      	lsls	r3, r3, #2
90001656:	4403      	add	r3, r0
90001658:	3304      	adds	r3, #4
9000165a:	681b      	ldr	r3, [r3, #0]
9000165c:	051b      	lsls	r3, r3, #20
9000165e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001662:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001664:	481a      	ldr	r0, [pc, #104]	@ (900016d0 <I2C_GetTiming+0xfc>)
90001666:	68fa      	ldr	r2, [r7, #12]
90001668:	4613      	mov	r3, r2
9000166a:	009b      	lsls	r3, r3, #2
9000166c:	4413      	add	r3, r2
9000166e:	009b      	lsls	r3, r3, #2
90001670:	4403      	add	r3, r0
90001672:	3308      	adds	r3, #8
90001674:	681b      	ldr	r3, [r3, #0]
90001676:	041b      	lsls	r3, r3, #16
90001678:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
9000167c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
9000167e:	4814      	ldr	r0, [pc, #80]	@ (900016d0 <I2C_GetTiming+0xfc>)
90001680:	68fa      	ldr	r2, [r7, #12]
90001682:	4613      	mov	r3, r2
90001684:	009b      	lsls	r3, r3, #2
90001686:	4413      	add	r3, r2
90001688:	009b      	lsls	r3, r3, #2
9000168a:	4403      	add	r3, r0
9000168c:	330c      	adds	r3, #12
9000168e:	681b      	ldr	r3, [r3, #0]
90001690:	021b      	lsls	r3, r3, #8
90001692:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001694:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001696:	480e      	ldr	r0, [pc, #56]	@ (900016d0 <I2C_GetTiming+0xfc>)
90001698:	68fa      	ldr	r2, [r7, #12]
9000169a:	4613      	mov	r3, r2
9000169c:	009b      	lsls	r3, r3, #2
9000169e:	4413      	add	r3, r2
900016a0:	009b      	lsls	r3, r3, #2
900016a2:	4403      	add	r3, r0
900016a4:	3310      	adds	r3, #16
900016a6:	681b      	ldr	r3, [r3, #0]
900016a8:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900016aa:	430b      	orrs	r3, r1
900016ac:	617b      	str	r3, [r7, #20]
        }
        break;
900016ae:	e006      	b.n	900016be <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
900016b0:	693b      	ldr	r3, [r7, #16]
900016b2:	3301      	adds	r3, #1
900016b4:	613b      	str	r3, [r7, #16]
900016b6:	693b      	ldr	r3, [r7, #16]
900016b8:	2b02      	cmp	r3, #2
900016ba:	d99b      	bls.n	900015f4 <I2C_GetTiming+0x20>
900016bc:	e000      	b.n	900016c0 <I2C_GetTiming+0xec>
        break;
900016be:	bf00      	nop
      }
    }
  }

  return ret;
900016c0:	697b      	ldr	r3, [r7, #20]
}
900016c2:	4618      	mov	r0, r3
900016c4:	3718      	adds	r7, #24
900016c6:	46bd      	mov	sp, r7
900016c8:	bd80      	pop	{r7, pc}
900016ca:	bf00      	nop
900016cc:	9000aadc 	.word	0x9000aadc
900016d0:	2000052c 	.word	0x2000052c

900016d4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
900016d4:	b480      	push	{r7}
900016d6:	b08f      	sub	sp, #60	@ 0x3c
900016d8:	af00      	add	r7, sp, #0
900016da:	6078      	str	r0, [r7, #4]
900016dc:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
900016de:	2310      	movs	r3, #16
900016e0:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900016e2:	687b      	ldr	r3, [r7, #4]
900016e4:	085a      	lsrs	r2, r3, #1
900016e6:	4b6e      	ldr	r3, [pc, #440]	@ (900018a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
900016e8:	4413      	add	r3, r2
900016ea:	687a      	ldr	r2, [r7, #4]
900016ec:	fbb3 f3f2 	udiv	r3, r3, r2
900016f0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
900016f2:	2332      	movs	r3, #50	@ 0x32
900016f4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
900016f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
900016fa:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900016fc:	4a69      	ldr	r2, [pc, #420]	@ (900018a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900016fe:	683b      	ldr	r3, [r7, #0]
90001700:	212c      	movs	r1, #44	@ 0x2c
90001702:	fb01 f303 	mul.w	r3, r1, r3
90001706:	4413      	add	r3, r2
90001708:	3324      	adds	r3, #36	@ 0x24
9000170a:	681b      	ldr	r3, [r3, #0]
9000170c:	4618      	mov	r0, r3
9000170e:	4a65      	ldr	r2, [pc, #404]	@ (900018a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001710:	683b      	ldr	r3, [r7, #0]
90001712:	212c      	movs	r1, #44	@ 0x2c
90001714:	fb01 f303 	mul.w	r3, r1, r3
90001718:	4413      	add	r3, r2
9000171a:	330c      	adds	r3, #12
9000171c:	681b      	ldr	r3, [r3, #0]
9000171e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001720:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001722:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001724:	495f      	ldr	r1, [pc, #380]	@ (900018a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001726:	683b      	ldr	r3, [r7, #0]
90001728:	202c      	movs	r0, #44	@ 0x2c
9000172a:	fb00 f303 	mul.w	r3, r0, r3
9000172e:	440b      	add	r3, r1
90001730:	3328      	adds	r3, #40	@ 0x28
90001732:	681b      	ldr	r3, [r3, #0]
90001734:	3303      	adds	r3, #3
90001736:	69f9      	ldr	r1, [r7, #28]
90001738:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
9000173c:	1ad3      	subs	r3, r2, r3
9000173e:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001740:	4a58      	ldr	r2, [pc, #352]	@ (900018a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001742:	683b      	ldr	r3, [r7, #0]
90001744:	212c      	movs	r1, #44	@ 0x2c
90001746:	fb01 f303 	mul.w	r3, r1, r3
9000174a:	4413      	add	r3, r2
9000174c:	3310      	adds	r3, #16
9000174e:	681b      	ldr	r3, [r3, #0]
90001750:	4618      	mov	r0, r3
90001752:	4a54      	ldr	r2, [pc, #336]	@ (900018a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001754:	683b      	ldr	r3, [r7, #0]
90001756:	212c      	movs	r1, #44	@ 0x2c
90001758:	fb01 f303 	mul.w	r3, r1, r3
9000175c:	4413      	add	r3, r2
9000175e:	3320      	adds	r3, #32
90001760:	681b      	ldr	r3, [r3, #0]
90001762:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001764:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001766:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001768:	494e      	ldr	r1, [pc, #312]	@ (900018a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000176a:	683b      	ldr	r3, [r7, #0]
9000176c:	202c      	movs	r0, #44	@ 0x2c
9000176e:	fb00 f303 	mul.w	r3, r0, r3
90001772:	440b      	add	r3, r1
90001774:	3328      	adds	r3, #40	@ 0x28
90001776:	681b      	ldr	r3, [r3, #0]
90001778:	3304      	adds	r3, #4
9000177a:	69f9      	ldr	r1, [r7, #28]
9000177c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001780:	1ad3      	subs	r3, r2, r3
90001782:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001784:	4a47      	ldr	r2, [pc, #284]	@ (900018a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001786:	683b      	ldr	r3, [r7, #0]
90001788:	212c      	movs	r1, #44	@ 0x2c
9000178a:	fb01 f303 	mul.w	r3, r1, r3
9000178e:	4413      	add	r3, r2
90001790:	3320      	adds	r3, #32
90001792:	681b      	ldr	r3, [r3, #0]
90001794:	4618      	mov	r0, r3
90001796:	4a43      	ldr	r2, [pc, #268]	@ (900018a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001798:	683b      	ldr	r3, [r7, #0]
9000179a:	212c      	movs	r1, #44	@ 0x2c
9000179c:	fb01 f303 	mul.w	r3, r1, r3
900017a0:	4413      	add	r3, r2
900017a2:	3314      	adds	r3, #20
900017a4:	681b      	ldr	r3, [r3, #0]
900017a6:	4403      	add	r3, r0
900017a8:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
900017aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
900017ac:	2b00      	cmp	r3, #0
900017ae:	dc01      	bgt.n	900017b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
900017b0:	2300      	movs	r3, #0
900017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
900017b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900017b6:	2b00      	cmp	r3, #0
900017b8:	dc01      	bgt.n	900017be <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
900017ba:	2300      	movs	r3, #0
900017bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
900017be:	2300      	movs	r3, #0
900017c0:	62bb      	str	r3, [r7, #40]	@ 0x28
900017c2:	e062      	b.n	9000188a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900017c4:	2300      	movs	r3, #0
900017c6:	627b      	str	r3, [r7, #36]	@ 0x24
900017c8:	e059      	b.n	9000187e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
900017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900017cc:	3301      	adds	r3, #1
900017ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900017d0:	3201      	adds	r2, #1
900017d2:	fb03 f202 	mul.w	r2, r3, r2
900017d6:	69fb      	ldr	r3, [r7, #28]
900017d8:	fb02 f303 	mul.w	r3, r2, r3
900017dc:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
900017de:	693b      	ldr	r3, [r7, #16]
900017e0:	68fa      	ldr	r2, [r7, #12]
900017e2:	429a      	cmp	r2, r3
900017e4:	d348      	bcc.n	90001878 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900017e6:	2300      	movs	r3, #0
900017e8:	623b      	str	r3, [r7, #32]
900017ea:	e042      	b.n	90001872 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
900017ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900017ee:	3301      	adds	r3, #1
900017f0:	6a3a      	ldr	r2, [r7, #32]
900017f2:	fb03 f202 	mul.w	r2, r3, r2
900017f6:	69fb      	ldr	r3, [r7, #28]
900017f8:	fb02 f303 	mul.w	r3, r2, r3
900017fc:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900017fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001800:	68ba      	ldr	r2, [r7, #8]
90001802:	429a      	cmp	r2, r3
90001804:	d332      	bcc.n	9000186c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001808:	68ba      	ldr	r2, [r7, #8]
9000180a:	429a      	cmp	r2, r3
9000180c:	d82e      	bhi.n	9000186c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
9000180e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001812:	429a      	cmp	r2, r3
90001814:	d02a      	beq.n	9000186c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001816:	4b24      	ldr	r3, [pc, #144]	@ (900018a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001818:	681a      	ldr	r2, [r3, #0]
9000181a:	4924      	ldr	r1, [pc, #144]	@ (900018ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
9000181c:	4613      	mov	r3, r2
9000181e:	009b      	lsls	r3, r3, #2
90001820:	4413      	add	r3, r2
90001822:	009b      	lsls	r3, r3, #2
90001824:	440b      	add	r3, r1
90001826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001828:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000182a:	4b1f      	ldr	r3, [pc, #124]	@ (900018a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
9000182c:	681a      	ldr	r2, [r3, #0]
9000182e:	491f      	ldr	r1, [pc, #124]	@ (900018ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001830:	4613      	mov	r3, r2
90001832:	009b      	lsls	r3, r3, #2
90001834:	4413      	add	r3, r2
90001836:	009b      	lsls	r3, r3, #2
90001838:	440b      	add	r3, r1
9000183a:	3304      	adds	r3, #4
9000183c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
9000183e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001840:	4b19      	ldr	r3, [pc, #100]	@ (900018a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001842:	681a      	ldr	r2, [r3, #0]
90001844:	4919      	ldr	r1, [pc, #100]	@ (900018ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001846:	4613      	mov	r3, r2
90001848:	009b      	lsls	r3, r3, #2
9000184a:	4413      	add	r3, r2
9000184c:	009b      	lsls	r3, r3, #2
9000184e:	440b      	add	r3, r1
90001850:	3308      	adds	r3, #8
90001852:	6a3a      	ldr	r2, [r7, #32]
90001854:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001858:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
9000185a:	4b13      	ldr	r3, [pc, #76]	@ (900018a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
9000185c:	681b      	ldr	r3, [r3, #0]
9000185e:	3301      	adds	r3, #1
90001860:	4a11      	ldr	r2, [pc, #68]	@ (900018a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001862:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001864:	4b10      	ldr	r3, [pc, #64]	@ (900018a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001866:	681b      	ldr	r3, [r3, #0]
90001868:	2b7f      	cmp	r3, #127	@ 0x7f
9000186a:	d812      	bhi.n	90001892 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
9000186c:	6a3b      	ldr	r3, [r7, #32]
9000186e:	3301      	adds	r3, #1
90001870:	623b      	str	r3, [r7, #32]
90001872:	6a3b      	ldr	r3, [r7, #32]
90001874:	2b0f      	cmp	r3, #15
90001876:	d9b9      	bls.n	900017ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000187a:	3301      	adds	r3, #1
9000187c:	627b      	str	r3, [r7, #36]	@ 0x24
9000187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001880:	2b0f      	cmp	r3, #15
90001882:	d9a2      	bls.n	900017ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001886:	3301      	adds	r3, #1
90001888:	62bb      	str	r3, [r7, #40]	@ 0x28
9000188a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000188c:	2b0f      	cmp	r3, #15
9000188e:	d999      	bls.n	900017c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001890:	e000      	b.n	90001894 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001892:	bf00      	nop
          }
        }
      }
    }
  }
}
90001894:	373c      	adds	r7, #60	@ 0x3c
90001896:	46bd      	mov	sp, r7
90001898:	f85d 7b04 	ldr.w	r7, [sp], #4
9000189c:	4770      	bx	lr
9000189e:	bf00      	nop
900018a0:	3b9aca00 	.word	0x3b9aca00
900018a4:	9000aadc 	.word	0x9000aadc
900018a8:	20000f2c 	.word	0x20000f2c
900018ac:	2000052c 	.word	0x2000052c

900018b0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
900018b0:	b480      	push	{r7}
900018b2:	b093      	sub	sp, #76	@ 0x4c
900018b4:	af00      	add	r7, sp, #0
900018b6:	6078      	str	r0, [r7, #4]
900018b8:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
900018ba:	f04f 33ff 	mov.w	r3, #4294967295
900018be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900018c0:	687b      	ldr	r3, [r7, #4]
900018c2:	085a      	lsrs	r2, r3, #1
900018c4:	4b7a      	ldr	r3, [pc, #488]	@ (90001ab0 <I2C_Compute_SCLL_SCLH+0x200>)
900018c6:	4413      	add	r3, r2
900018c8:	687a      	ldr	r2, [r7, #4]
900018ca:	fbb3 f3f2 	udiv	r3, r3, r2
900018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
900018d0:	4a78      	ldr	r2, [pc, #480]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
900018d2:	683b      	ldr	r3, [r7, #0]
900018d4:	212c      	movs	r1, #44	@ 0x2c
900018d6:	fb01 f303 	mul.w	r3, r1, r3
900018da:	4413      	add	r3, r2
900018dc:	681b      	ldr	r3, [r3, #0]
900018de:	085a      	lsrs	r2, r3, #1
900018e0:	4b73      	ldr	r3, [pc, #460]	@ (90001ab0 <I2C_Compute_SCLL_SCLH+0x200>)
900018e2:	4413      	add	r3, r2
900018e4:	4973      	ldr	r1, [pc, #460]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
900018e6:	683a      	ldr	r2, [r7, #0]
900018e8:	202c      	movs	r0, #44	@ 0x2c
900018ea:	fb00 f202 	mul.w	r2, r0, r2
900018ee:	440a      	add	r2, r1
900018f0:	6812      	ldr	r2, [r2, #0]
900018f2:	fbb3 f3f2 	udiv	r3, r3, r2
900018f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
900018f8:	2332      	movs	r3, #50	@ 0x32
900018fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
900018fc:	4a6d      	ldr	r2, [pc, #436]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
900018fe:	683b      	ldr	r3, [r7, #0]
90001900:	212c      	movs	r1, #44	@ 0x2c
90001902:	fb01 f303 	mul.w	r3, r1, r3
90001906:	4413      	add	r3, r2
90001908:	3328      	adds	r3, #40	@ 0x28
9000190a:	681a      	ldr	r2, [r3, #0]
9000190c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000190e:	fb02 f303 	mul.w	r3, r2, r3
90001912:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001914:	4a67      	ldr	r2, [pc, #412]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
90001916:	683b      	ldr	r3, [r7, #0]
90001918:	212c      	movs	r1, #44	@ 0x2c
9000191a:	fb01 f303 	mul.w	r3, r1, r3
9000191e:	4413      	add	r3, r2
90001920:	3304      	adds	r3, #4
90001922:	681b      	ldr	r3, [r3, #0]
90001924:	4a62      	ldr	r2, [pc, #392]	@ (90001ab0 <I2C_Compute_SCLL_SCLH+0x200>)
90001926:	fbb2 f3f3 	udiv	r3, r2, r3
9000192a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
9000192c:	4a61      	ldr	r2, [pc, #388]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
9000192e:	683b      	ldr	r3, [r7, #0]
90001930:	212c      	movs	r1, #44	@ 0x2c
90001932:	fb01 f303 	mul.w	r3, r1, r3
90001936:	4413      	add	r3, r2
90001938:	3308      	adds	r3, #8
9000193a:	681b      	ldr	r3, [r3, #0]
9000193c:	4a5c      	ldr	r2, [pc, #368]	@ (90001ab0 <I2C_Compute_SCLL_SCLH+0x200>)
9000193e:	fbb2 f3f3 	udiv	r3, r2, r3
90001942:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001946:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001948:	2300      	movs	r3, #0
9000194a:	637b      	str	r3, [r7, #52]	@ 0x34
9000194c:	e0a3      	b.n	90001a96 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
9000194e:	495a      	ldr	r1, [pc, #360]	@ (90001ab8 <I2C_Compute_SCLL_SCLH+0x208>)
90001950:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001952:	4613      	mov	r3, r2
90001954:	009b      	lsls	r3, r3, #2
90001956:	4413      	add	r3, r2
90001958:	009b      	lsls	r3, r3, #2
9000195a:	440b      	add	r3, r1
9000195c:	681b      	ldr	r3, [r3, #0]
9000195e:	1c5a      	adds	r2, r3, #1
90001960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001962:	fb02 f303 	mul.w	r3, r2, r3
90001966:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001968:	2300      	movs	r3, #0
9000196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000196c:	e08c      	b.n	90001a88 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
9000196e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001970:	6a3b      	ldr	r3, [r7, #32]
90001972:	441a      	add	r2, r3
90001974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001976:	3301      	adds	r3, #1
90001978:	6979      	ldr	r1, [r7, #20]
9000197a:	fb03 f101 	mul.w	r1, r3, r1
9000197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001980:	005b      	lsls	r3, r3, #1
90001982:	440b      	add	r3, r1
90001984:	4413      	add	r3, r2
90001986:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001988:	4a4a      	ldr	r2, [pc, #296]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
9000198a:	683b      	ldr	r3, [r7, #0]
9000198c:	212c      	movs	r1, #44	@ 0x2c
9000198e:	fb01 f303 	mul.w	r3, r1, r3
90001992:	4413      	add	r3, r2
90001994:	3318      	adds	r3, #24
90001996:	681b      	ldr	r3, [r3, #0]
90001998:	693a      	ldr	r2, [r7, #16]
9000199a:	429a      	cmp	r2, r3
9000199c:	d971      	bls.n	90001a82 <I2C_Compute_SCLL_SCLH+0x1d2>
9000199e:	693a      	ldr	r2, [r7, #16]
900019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900019a2:	1ad2      	subs	r2, r2, r3
900019a4:	6a3b      	ldr	r3, [r7, #32]
900019a6:	1ad3      	subs	r3, r2, r3
900019a8:	089b      	lsrs	r3, r3, #2
900019aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900019ac:	429a      	cmp	r2, r3
900019ae:	d268      	bcs.n	90001a82 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900019b0:	2300      	movs	r3, #0
900019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
900019b4:	e062      	b.n	90001a7c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
900019b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900019b8:	6a3b      	ldr	r3, [r7, #32]
900019ba:	441a      	add	r2, r3
900019bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
900019be:	3301      	adds	r3, #1
900019c0:	6979      	ldr	r1, [r7, #20]
900019c2:	fb03 f101 	mul.w	r1, r3, r1
900019c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900019c8:	005b      	lsls	r3, r3, #1
900019ca:	440b      	add	r3, r1
900019cc:	4413      	add	r3, r2
900019ce:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
900019d0:	693a      	ldr	r2, [r7, #16]
900019d2:	68fb      	ldr	r3, [r7, #12]
900019d4:	441a      	add	r2, r3
900019d6:	4937      	ldr	r1, [pc, #220]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
900019d8:	683b      	ldr	r3, [r7, #0]
900019da:	202c      	movs	r0, #44	@ 0x2c
900019dc:	fb00 f303 	mul.w	r3, r0, r3
900019e0:	440b      	add	r3, r1
900019e2:	3320      	adds	r3, #32
900019e4:	681b      	ldr	r3, [r3, #0]
900019e6:	441a      	add	r2, r3
900019e8:	4932      	ldr	r1, [pc, #200]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
900019ea:	683b      	ldr	r3, [r7, #0]
900019ec:	202c      	movs	r0, #44	@ 0x2c
900019ee:	fb00 f303 	mul.w	r3, r0, r3
900019f2:	440b      	add	r3, r1
900019f4:	3324      	adds	r3, #36	@ 0x24
900019f6:	681b      	ldr	r3, [r3, #0]
900019f8:	4413      	add	r3, r2
900019fa:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900019fc:	68ba      	ldr	r2, [r7, #8]
900019fe:	69bb      	ldr	r3, [r7, #24]
90001a00:	429a      	cmp	r2, r3
90001a02:	d338      	bcc.n	90001a76 <I2C_Compute_SCLL_SCLH+0x1c6>
90001a04:	68ba      	ldr	r2, [r7, #8]
90001a06:	69fb      	ldr	r3, [r7, #28]
90001a08:	429a      	cmp	r2, r3
90001a0a:	d834      	bhi.n	90001a76 <I2C_Compute_SCLL_SCLH+0x1c6>
90001a0c:	4a29      	ldr	r2, [pc, #164]	@ (90001ab4 <I2C_Compute_SCLL_SCLH+0x204>)
90001a0e:	683b      	ldr	r3, [r7, #0]
90001a10:	212c      	movs	r1, #44	@ 0x2c
90001a12:	fb01 f303 	mul.w	r3, r1, r3
90001a16:	4413      	add	r3, r2
90001a18:	331c      	adds	r3, #28
90001a1a:	681b      	ldr	r3, [r3, #0]
90001a1c:	68fa      	ldr	r2, [r7, #12]
90001a1e:	429a      	cmp	r2, r3
90001a20:	d329      	bcc.n	90001a76 <I2C_Compute_SCLL_SCLH+0x1c6>
90001a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001a24:	68fb      	ldr	r3, [r7, #12]
90001a26:	429a      	cmp	r2, r3
90001a28:	d225      	bcs.n	90001a76 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001a2a:	68ba      	ldr	r2, [r7, #8]
90001a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001a2e:	1ad3      	subs	r3, r2, r3
90001a30:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001a34:	2b00      	cmp	r3, #0
90001a36:	da02      	bge.n	90001a3e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001a3a:	425b      	negs	r3, r3
90001a3c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001a40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001a42:	429a      	cmp	r2, r3
90001a44:	d917      	bls.n	90001a76 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001a48:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001a4a:	491b      	ldr	r1, [pc, #108]	@ (90001ab8 <I2C_Compute_SCLL_SCLH+0x208>)
90001a4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001a4e:	4613      	mov	r3, r2
90001a50:	009b      	lsls	r3, r3, #2
90001a52:	4413      	add	r3, r2
90001a54:	009b      	lsls	r3, r3, #2
90001a56:	440b      	add	r3, r1
90001a58:	3310      	adds	r3, #16
90001a5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001a5c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001a5e:	4916      	ldr	r1, [pc, #88]	@ (90001ab8 <I2C_Compute_SCLL_SCLH+0x208>)
90001a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001a62:	4613      	mov	r3, r2
90001a64:	009b      	lsls	r3, r3, #2
90001a66:	4413      	add	r3, r2
90001a68:	009b      	lsls	r3, r3, #2
90001a6a:	440b      	add	r3, r1
90001a6c:	330c      	adds	r3, #12
90001a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001a70:	601a      	str	r2, [r3, #0]
              ret = count;
90001a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001a74:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001a78:	3301      	adds	r3, #1
90001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
90001a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001a7e:	2bff      	cmp	r3, #255	@ 0xff
90001a80:	d999      	bls.n	900019b6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001a84:	3301      	adds	r3, #1
90001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001a8a:	2bff      	cmp	r3, #255	@ 0xff
90001a8c:	f67f af6f 	bls.w	9000196e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001a92:	3301      	adds	r3, #1
90001a94:	637b      	str	r3, [r7, #52]	@ 0x34
90001a96:	4b09      	ldr	r3, [pc, #36]	@ (90001abc <I2C_Compute_SCLL_SCLH+0x20c>)
90001a98:	681b      	ldr	r3, [r3, #0]
90001a9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001a9c:	429a      	cmp	r2, r3
90001a9e:	f4ff af56 	bcc.w	9000194e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001aa4:	4618      	mov	r0, r3
90001aa6:	374c      	adds	r7, #76	@ 0x4c
90001aa8:	46bd      	mov	sp, r7
90001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
90001aae:	4770      	bx	lr
90001ab0:	3b9aca00 	.word	0x3b9aca00
90001ab4:	9000aadc 	.word	0x9000aadc
90001ab8:	2000052c 	.word	0x2000052c
90001abc:	20000f2c 	.word	0x20000f2c

90001ac0 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001ac0:	b580      	push	{r7, lr}
90001ac2:	b08a      	sub	sp, #40	@ 0x28
90001ac4:	af00      	add	r7, sp, #0
90001ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001ac8:	4b31      	ldr	r3, [pc, #196]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001ace:	4a30      	ldr	r2, [pc, #192]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001ad0:	f043 0308 	orr.w	r3, r3, #8
90001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001ad8:	4b2d      	ldr	r3, [pc, #180]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001ade:	f003 0308 	and.w	r3, r3, #8
90001ae2:	613b      	str	r3, [r7, #16]
90001ae4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001aec:	4a28      	ldr	r2, [pc, #160]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001aee:	f043 0308 	orr.w	r3, r3, #8
90001af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001af6:	4b26      	ldr	r3, [pc, #152]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001afc:	f003 0308 	and.w	r3, r3, #8
90001b00:	60fb      	str	r3, [r7, #12]
90001b02:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001b08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001b0a:	2312      	movs	r3, #18
90001b0c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001b0e:	2300      	movs	r3, #0
90001b10:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001b12:	2302      	movs	r3, #2
90001b14:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001b16:	2304      	movs	r3, #4
90001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001b1a:	f107 0314 	add.w	r3, r7, #20
90001b1e:	4619      	mov	r1, r3
90001b20:	481c      	ldr	r0, [pc, #112]	@ (90001b94 <I2C4_MspInit+0xd4>)
90001b22:	f001 ffa1 	bl	90003a68 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001b26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001b2a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001b2c:	2312      	movs	r3, #18
90001b2e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001b30:	2300      	movs	r3, #0
90001b32:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001b34:	2302      	movs	r3, #2
90001b36:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001b38:	2304      	movs	r3, #4
90001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001b3c:	f107 0314 	add.w	r3, r7, #20
90001b40:	4619      	mov	r1, r3
90001b42:	4814      	ldr	r0, [pc, #80]	@ (90001b94 <I2C4_MspInit+0xd4>)
90001b44:	f001 ff90 	bl	90003a68 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001b48:	4b11      	ldr	r3, [pc, #68]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001b4e:	4a10      	ldr	r2, [pc, #64]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001b54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001b58:	4b0d      	ldr	r3, [pc, #52]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001b62:	60bb      	str	r3, [r7, #8]
90001b64:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001b66:	4b0a      	ldr	r3, [pc, #40]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001b6c:	4a08      	ldr	r2, [pc, #32]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001b72:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001b76:	4b06      	ldr	r3, [pc, #24]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001b7c:	4a04      	ldr	r2, [pc, #16]	@ (90001b90 <I2C4_MspInit+0xd0>)
90001b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001b82:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001b86:	bf00      	nop
90001b88:	3728      	adds	r7, #40	@ 0x28
90001b8a:	46bd      	mov	sp, r7
90001b8c:	bd80      	pop	{r7, pc}
90001b8e:	bf00      	nop
90001b90:	58024400 	.word	0x58024400
90001b94:	58020c00 	.word	0x58020c00

90001b98 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
90001b98:	b580      	push	{r7, lr}
90001b9a:	b088      	sub	sp, #32
90001b9c:	af00      	add	r7, sp, #0
90001b9e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
90001ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001ba4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90001ba6:	68fb      	ldr	r3, [r7, #12]
90001ba8:	4619      	mov	r1, r3
90001baa:	480b      	ldr	r0, [pc, #44]	@ (90001bd8 <I2C4_MspDeInit+0x40>)
90001bac:	f002 f90c 	bl	90003dc8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
90001bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001bb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90001bb6:	68fb      	ldr	r3, [r7, #12]
90001bb8:	4619      	mov	r1, r3
90001bba:	4807      	ldr	r0, [pc, #28]	@ (90001bd8 <I2C4_MspDeInit+0x40>)
90001bbc:	f002 f904 	bl	90003dc8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90001bc0:	4b06      	ldr	r3, [pc, #24]	@ (90001bdc <I2C4_MspDeInit+0x44>)
90001bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001bc6:	4a05      	ldr	r2, [pc, #20]	@ (90001bdc <I2C4_MspDeInit+0x44>)
90001bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001bcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
90001bd0:	bf00      	nop
90001bd2:	3720      	adds	r7, #32
90001bd4:	46bd      	mov	sp, r7
90001bd6:	bd80      	pop	{r7, pc}
90001bd8:	58020c00 	.word	0x58020c00
90001bdc:	58024400 	.word	0x58024400

90001be0 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001be0:	b580      	push	{r7, lr}
90001be2:	b088      	sub	sp, #32
90001be4:	af04      	add	r7, sp, #16
90001be6:	607b      	str	r3, [r7, #4]
90001be8:	4603      	mov	r3, r0
90001bea:	81fb      	strh	r3, [r7, #14]
90001bec:	460b      	mov	r3, r1
90001bee:	81bb      	strh	r3, [r7, #12]
90001bf0:	4613      	mov	r3, r2
90001bf2:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001bf4:	8978      	ldrh	r0, [r7, #10]
90001bf6:	89ba      	ldrh	r2, [r7, #12]
90001bf8:	89f9      	ldrh	r1, [r7, #14]
90001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001bfe:	9302      	str	r3, [sp, #8]
90001c00:	8b3b      	ldrh	r3, [r7, #24]
90001c02:	9301      	str	r3, [sp, #4]
90001c04:	687b      	ldr	r3, [r7, #4]
90001c06:	9300      	str	r3, [sp, #0]
90001c08:	4603      	mov	r3, r0
90001c0a:	4807      	ldr	r0, [pc, #28]	@ (90001c28 <I2C4_WriteReg+0x48>)
90001c0c:	f004 f886 	bl	90005d1c <HAL_I2C_Mem_Write>
90001c10:	4603      	mov	r3, r0
90001c12:	2b00      	cmp	r3, #0
90001c14:	d101      	bne.n	90001c1a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001c16:	2300      	movs	r3, #0
90001c18:	e001      	b.n	90001c1e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001c1a:	f06f 0307 	mvn.w	r3, #7
}
90001c1e:	4618      	mov	r0, r3
90001c20:	3710      	adds	r7, #16
90001c22:	46bd      	mov	sp, r7
90001c24:	bd80      	pop	{r7, pc}
90001c26:	bf00      	nop
90001c28:	20000f30 	.word	0x20000f30

90001c2c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001c2c:	b580      	push	{r7, lr}
90001c2e:	b088      	sub	sp, #32
90001c30:	af04      	add	r7, sp, #16
90001c32:	607b      	str	r3, [r7, #4]
90001c34:	4603      	mov	r3, r0
90001c36:	81fb      	strh	r3, [r7, #14]
90001c38:	460b      	mov	r3, r1
90001c3a:	81bb      	strh	r3, [r7, #12]
90001c3c:	4613      	mov	r3, r2
90001c3e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001c40:	8978      	ldrh	r0, [r7, #10]
90001c42:	89ba      	ldrh	r2, [r7, #12]
90001c44:	89f9      	ldrh	r1, [r7, #14]
90001c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001c4a:	9302      	str	r3, [sp, #8]
90001c4c:	8b3b      	ldrh	r3, [r7, #24]
90001c4e:	9301      	str	r3, [sp, #4]
90001c50:	687b      	ldr	r3, [r7, #4]
90001c52:	9300      	str	r3, [sp, #0]
90001c54:	4603      	mov	r3, r0
90001c56:	4807      	ldr	r0, [pc, #28]	@ (90001c74 <I2C4_ReadReg+0x48>)
90001c58:	f004 f974 	bl	90005f44 <HAL_I2C_Mem_Read>
90001c5c:	4603      	mov	r3, r0
90001c5e:	2b00      	cmp	r3, #0
90001c60:	d101      	bne.n	90001c66 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001c62:	2300      	movs	r3, #0
90001c64:	e001      	b.n	90001c6a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001c66:	f06f 0307 	mvn.w	r3, #7
}
90001c6a:	4618      	mov	r0, r3
90001c6c:	3710      	adds	r7, #16
90001c6e:	46bd      	mov	sp, r7
90001c70:	bd80      	pop	{r7, pc}
90001c72:	bf00      	nop
90001c74:	20000f30 	.word	0x20000f30

90001c78 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001c78:	b580      	push	{r7, lr}
90001c7a:	b084      	sub	sp, #16
90001c7c:	af02      	add	r7, sp, #8
90001c7e:	6078      	str	r0, [r7, #4]
90001c80:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001c82:	f44f 7388 	mov.w	r3, #272	@ 0x110
90001c86:	9300      	str	r3, [sp, #0]
90001c88:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90001c8c:	2200      	movs	r2, #0
90001c8e:	6839      	ldr	r1, [r7, #0]
90001c90:	6878      	ldr	r0, [r7, #4]
90001c92:	f000 f805 	bl	90001ca0 <BSP_LCD_InitEx>
90001c96:	4603      	mov	r3, r0
}
90001c98:	4618      	mov	r0, r3
90001c9a:	3708      	adds	r7, #8
90001c9c:	46bd      	mov	sp, r7
90001c9e:	bd80      	pop	{r7, pc}

90001ca0 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001ca0:	b580      	push	{r7, lr}
90001ca2:	b09e      	sub	sp, #120	@ 0x78
90001ca4:	af00      	add	r7, sp, #0
90001ca6:	60f8      	str	r0, [r7, #12]
90001ca8:	60b9      	str	r1, [r7, #8]
90001caa:	607a      	str	r2, [r7, #4]
90001cac:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001cae:	2300      	movs	r3, #0
90001cb0:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001cb2:	2300      	movs	r3, #0
90001cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001cb6:	68bb      	ldr	r3, [r7, #8]
90001cb8:	2b01      	cmp	r3, #1
90001cba:	d808      	bhi.n	90001cce <BSP_LCD_InitEx+0x2e>
90001cbc:	68fb      	ldr	r3, [r7, #12]
90001cbe:	2b00      	cmp	r3, #0
90001cc0:	d105      	bne.n	90001cce <BSP_LCD_InitEx+0x2e>
90001cc2:	687b      	ldr	r3, [r7, #4]
90001cc4:	2b02      	cmp	r3, #2
90001cc6:	d006      	beq.n	90001cd6 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001cc8:	687b      	ldr	r3, [r7, #4]
90001cca:	2b00      	cmp	r3, #0
90001ccc:	d003      	beq.n	90001cd6 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001cce:	f06f 0301 	mvn.w	r3, #1
90001cd2:	677b      	str	r3, [r7, #116]	@ 0x74
90001cd4:	e0a8      	b.n	90001e28 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001cd6:	687b      	ldr	r3, [r7, #4]
90001cd8:	2b02      	cmp	r3, #2
90001cda:	d109      	bne.n	90001cf0 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001cdc:	2302      	movs	r3, #2
90001cde:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001ce0:	4a54      	ldr	r2, [pc, #336]	@ (90001e34 <BSP_LCD_InitEx+0x194>)
90001ce2:	68fb      	ldr	r3, [r7, #12]
90001ce4:	015b      	lsls	r3, r3, #5
90001ce6:	4413      	add	r3, r2
90001ce8:	3310      	adds	r3, #16
90001cea:	2202      	movs	r2, #2
90001cec:	601a      	str	r2, [r3, #0]
90001cee:	e008      	b.n	90001d02 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001cf0:	2300      	movs	r3, #0
90001cf2:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001cf4:	4a4f      	ldr	r2, [pc, #316]	@ (90001e34 <BSP_LCD_InitEx+0x194>)
90001cf6:	68fb      	ldr	r3, [r7, #12]
90001cf8:	015b      	lsls	r3, r3, #5
90001cfa:	4413      	add	r3, r2
90001cfc:	3310      	adds	r3, #16
90001cfe:	2204      	movs	r2, #4
90001d00:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001d02:	4a4c      	ldr	r2, [pc, #304]	@ (90001e34 <BSP_LCD_InitEx+0x194>)
90001d04:	68fb      	ldr	r3, [r7, #12]
90001d06:	015b      	lsls	r3, r3, #5
90001d08:	4413      	add	r3, r2
90001d0a:	330c      	adds	r3, #12
90001d0c:	687a      	ldr	r2, [r7, #4]
90001d0e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001d10:	4a48      	ldr	r2, [pc, #288]	@ (90001e34 <BSP_LCD_InitEx+0x194>)
90001d12:	68fb      	ldr	r3, [r7, #12]
90001d14:	015b      	lsls	r3, r3, #5
90001d16:	4413      	add	r3, r2
90001d18:	683a      	ldr	r2, [r7, #0]
90001d1a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90001d1c:	4a45      	ldr	r2, [pc, #276]	@ (90001e34 <BSP_LCD_InitEx+0x194>)
90001d1e:	68fb      	ldr	r3, [r7, #12]
90001d20:	015b      	lsls	r3, r3, #5
90001d22:	4413      	add	r3, r2
90001d24:	3304      	adds	r3, #4
90001d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001d2a:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90001d2c:	4b42      	ldr	r3, [pc, #264]	@ (90001e38 <BSP_LCD_InitEx+0x198>)
90001d2e:	4a43      	ldr	r2, [pc, #268]	@ (90001e3c <BSP_LCD_InitEx+0x19c>)
90001d30:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90001d32:	4b43      	ldr	r3, [pc, #268]	@ (90001e40 <BSP_LCD_InitEx+0x1a0>)
90001d34:	4a43      	ldr	r2, [pc, #268]	@ (90001e44 <BSP_LCD_InitEx+0x1a4>)
90001d36:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90001d38:	483f      	ldr	r0, [pc, #252]	@ (90001e38 <BSP_LCD_InitEx+0x198>)
90001d3a:	f000 fcf9 	bl	90002730 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90001d3e:	4840      	ldr	r0, [pc, #256]	@ (90001e40 <BSP_LCD_InitEx+0x1a0>)
90001d40:	f000 fdc2 	bl	900028c8 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90001d44:	4b40      	ldr	r3, [pc, #256]	@ (90001e48 <BSP_LCD_InitEx+0x1a8>)
90001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90001d48:	4b40      	ldr	r3, [pc, #256]	@ (90001e4c <BSP_LCD_InitEx+0x1ac>)
90001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90001d4c:	2370      	movs	r3, #112	@ 0x70
90001d4e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90001d50:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90001d54:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001d58:	4611      	mov	r1, r2
90001d5a:	4618      	mov	r0, r3
90001d5c:	f7fe fe6c 	bl	90000a38 <FT5336_RegisterBusIO>
90001d60:	4603      	mov	r3, r0
90001d62:	2b00      	cmp	r3, #0
90001d64:	da03      	bge.n	90001d6e <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001d66:	f06f 0304 	mvn.w	r3, #4
90001d6a:	677b      	str	r3, [r7, #116]	@ 0x74
90001d6c:	e02b      	b.n	90001dc6 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90001d6e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90001d72:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001d76:	4611      	mov	r1, r2
90001d78:	4618      	mov	r0, r3
90001d7a:	f7fe ff57 	bl	90000c2c <FT5336_ReadID>
90001d7e:	4603      	mov	r3, r0
90001d80:	2b00      	cmp	r3, #0
90001d82:	da03      	bge.n	90001d8c <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001d84:	f06f 0304 	mvn.w	r3, #4
90001d88:	677b      	str	r3, [r7, #116]	@ 0x74
90001d8a:	e01c      	b.n	90001dc6 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90001d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90001d8e:	2b51      	cmp	r3, #81	@ 0x51
90001d90:	d003      	beq.n	90001d9a <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90001d92:	f06f 0306 	mvn.w	r3, #6
90001d96:	677b      	str	r3, [r7, #116]	@ 0x74
90001d98:	e015      	b.n	90001dc6 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90001d9a:	4827      	ldr	r0, [pc, #156]	@ (90001e38 <BSP_LCD_InitEx+0x198>)
90001d9c:	f7fe fd60 	bl	90000860 <MX_LTDC_ClockConfig>
90001da0:	4603      	mov	r3, r0
90001da2:	2b00      	cmp	r3, #0
90001da4:	d003      	beq.n	90001dae <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001da6:	f06f 0303 	mvn.w	r3, #3
90001daa:	677b      	str	r3, [r7, #116]	@ 0x74
90001dac:	e00b      	b.n	90001dc6 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90001dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001db2:	6839      	ldr	r1, [r7, #0]
90001db4:	4820      	ldr	r0, [pc, #128]	@ (90001e38 <BSP_LCD_InitEx+0x198>)
90001db6:	f000 f84d 	bl	90001e54 <MX_LTDC_Init>
90001dba:	4603      	mov	r3, r0
90001dbc:	2b00      	cmp	r3, #0
90001dbe:	d002      	beq.n	90001dc6 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001dc0:	f06f 0303 	mvn.w	r3, #3
90001dc4:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90001dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
90001dc8:	2b00      	cmp	r3, #0
90001dca:	d12d      	bne.n	90001e28 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90001dcc:	2000      	movs	r0, #0
90001dce:	f000 fe0d 	bl	900029ec <BSP_SDRAM_Init>
90001dd2:	4603      	mov	r3, r0
90001dd4:	2b00      	cmp	r3, #0
90001dd6:	d002      	beq.n	90001dde <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90001dd8:	f06f 0303 	mvn.w	r3, #3
90001ddc:	e025      	b.n	90001e2a <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90001dde:	2300      	movs	r3, #0
90001de0:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90001de2:	683b      	ldr	r3, [r7, #0]
90001de4:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90001de6:	2300      	movs	r3, #0
90001de8:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90001dea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
90001dee:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90001df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
90001df2:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90001df4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90001dfa:	f107 0314 	add.w	r3, r7, #20
90001dfe:	461a      	mov	r2, r3
90001e00:	2100      	movs	r1, #0
90001e02:	480d      	ldr	r0, [pc, #52]	@ (90001e38 <BSP_LCD_InitEx+0x198>)
90001e04:	f000 f872 	bl	90001eec <MX_LTDC_ConfigLayer>
90001e08:	4603      	mov	r3, r0
90001e0a:	2b00      	cmp	r3, #0
90001e0c:	d002      	beq.n	90001e14 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90001e0e:	f06f 0303 	mvn.w	r3, #3
90001e12:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90001e14:	480e      	ldr	r0, [pc, #56]	@ (90001e50 <BSP_LCD_InitEx+0x1b0>)
90001e16:	f000 fdbf 	bl	90002998 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90001e1a:	4a06      	ldr	r2, [pc, #24]	@ (90001e34 <BSP_LCD_InitEx+0x194>)
90001e1c:	68fb      	ldr	r3, [r7, #12]
90001e1e:	015b      	lsls	r3, r3, #5
90001e20:	4413      	add	r3, r2
90001e22:	3318      	adds	r3, #24
90001e24:	2201      	movs	r2, #1
90001e26:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90001e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
90001e2a:	4618      	mov	r0, r3
90001e2c:	3778      	adds	r7, #120	@ 0x78
90001e2e:	46bd      	mov	sp, r7
90001e30:	bd80      	pop	{r7, pc}
90001e32:	bf00      	nop
90001e34:	200010e0 	.word	0x200010e0
90001e38:	20001038 	.word	0x20001038
90001e3c:	50001000 	.word	0x50001000
90001e40:	20000fd0 	.word	0x20000fd0
90001e44:	52001000 	.word	0x52001000
90001e48:	900013cd 	.word	0x900013cd
90001e4c:	90001569 	.word	0x90001569
90001e50:	20000f84 	.word	0x20000f84

90001e54 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90001e54:	b580      	push	{r7, lr}
90001e56:	b084      	sub	sp, #16
90001e58:	af00      	add	r7, sp, #0
90001e5a:	60f8      	str	r0, [r7, #12]
90001e5c:	60b9      	str	r1, [r7, #8]
90001e5e:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90001e60:	68fb      	ldr	r3, [r7, #12]
90001e62:	4a21      	ldr	r2, [pc, #132]	@ (90001ee8 <MX_LTDC_Init+0x94>)
90001e64:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001e66:	68fb      	ldr	r3, [r7, #12]
90001e68:	2200      	movs	r2, #0
90001e6a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90001e6c:	68fb      	ldr	r3, [r7, #12]
90001e6e:	2200      	movs	r2, #0
90001e70:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001e72:	68fb      	ldr	r3, [r7, #12]
90001e74:	2200      	movs	r2, #0
90001e76:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001e78:	68fb      	ldr	r3, [r7, #12]
90001e7a:	2200      	movs	r2, #0
90001e7c:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90001e7e:	68fb      	ldr	r3, [r7, #12]
90001e80:	2228      	movs	r2, #40	@ 0x28
90001e82:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90001e84:	68fb      	ldr	r3, [r7, #12]
90001e86:	222a      	movs	r2, #42	@ 0x2a
90001e88:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90001e8a:	68bb      	ldr	r3, [r7, #8]
90001e8c:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90001e90:	68fb      	ldr	r3, [r7, #12]
90001e92:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90001e94:	68bb      	ldr	r3, [r7, #8]
90001e96:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
90001e9a:	68fb      	ldr	r3, [r7, #12]
90001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90001e9e:	68fb      	ldr	r3, [r7, #12]
90001ea0:	2209      	movs	r2, #9
90001ea2:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90001ea4:	68fb      	ldr	r3, [r7, #12]
90001ea6:	220b      	movs	r2, #11
90001ea8:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
90001eaa:	687b      	ldr	r3, [r7, #4]
90001eac:	f103 020b 	add.w	r2, r3, #11
90001eb0:	68fb      	ldr	r3, [r7, #12]
90001eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90001eb4:	687b      	ldr	r3, [r7, #4]
90001eb6:	f103 020d 	add.w	r2, r3, #13
90001eba:	68fb      	ldr	r3, [r7, #12]
90001ebc:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90001ebe:	68fb      	ldr	r3, [r7, #12]
90001ec0:	22ff      	movs	r2, #255	@ 0xff
90001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
90001ec6:	68fb      	ldr	r3, [r7, #12]
90001ec8:	22ff      	movs	r2, #255	@ 0xff
90001eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90001ece:	68fb      	ldr	r3, [r7, #12]
90001ed0:	22ff      	movs	r2, #255	@ 0xff
90001ed2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
90001ed6:	68f8      	ldr	r0, [r7, #12]
90001ed8:	f004 fcc1 	bl	9000685e <HAL_LTDC_Init>
90001edc:	4603      	mov	r3, r0
}
90001ede:	4618      	mov	r0, r3
90001ee0:	3710      	adds	r7, #16
90001ee2:	46bd      	mov	sp, r7
90001ee4:	bd80      	pop	{r7, pc}
90001ee6:	bf00      	nop
90001ee8:	50001000 	.word	0x50001000

90001eec <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90001eec:	b580      	push	{r7, lr}
90001eee:	b092      	sub	sp, #72	@ 0x48
90001ef0:	af00      	add	r7, sp, #0
90001ef2:	60f8      	str	r0, [r7, #12]
90001ef4:	60b9      	str	r1, [r7, #8]
90001ef6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90001ef8:	687b      	ldr	r3, [r7, #4]
90001efa:	681b      	ldr	r3, [r3, #0]
90001efc:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90001efe:	687b      	ldr	r3, [r7, #4]
90001f00:	685b      	ldr	r3, [r3, #4]
90001f02:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90001f04:	687b      	ldr	r3, [r7, #4]
90001f06:	689b      	ldr	r3, [r3, #8]
90001f08:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90001f0a:	687b      	ldr	r3, [r7, #4]
90001f0c:	68db      	ldr	r3, [r3, #12]
90001f0e:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90001f10:	687b      	ldr	r3, [r7, #4]
90001f12:	691b      	ldr	r3, [r3, #16]
90001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
90001f16:	23ff      	movs	r3, #255	@ 0xff
90001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
90001f1a:	2300      	movs	r3, #0
90001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90001f1e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
90001f22:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001f24:	2307      	movs	r3, #7
90001f26:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90001f28:	687b      	ldr	r3, [r7, #4]
90001f2a:	695b      	ldr	r3, [r3, #20]
90001f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90001f2e:	687b      	ldr	r3, [r7, #4]
90001f30:	685a      	ldr	r2, [r3, #4]
90001f32:	687b      	ldr	r3, [r7, #4]
90001f34:	681b      	ldr	r3, [r3, #0]
90001f36:	1ad3      	subs	r3, r2, r3
90001f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90001f3a:	687b      	ldr	r3, [r7, #4]
90001f3c:	68da      	ldr	r2, [r3, #12]
90001f3e:	687b      	ldr	r3, [r7, #4]
90001f40:	689b      	ldr	r3, [r3, #8]
90001f42:	1ad3      	subs	r3, r2, r3
90001f44:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
90001f46:	2300      	movs	r3, #0
90001f48:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
90001f4c:	2300      	movs	r3, #0
90001f4e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
90001f52:	2300      	movs	r3, #0
90001f54:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90001f58:	f107 0314 	add.w	r3, r7, #20
90001f5c:	68ba      	ldr	r2, [r7, #8]
90001f5e:	4619      	mov	r1, r3
90001f60:	68f8      	ldr	r0, [r7, #12]
90001f62:	f004 fd23 	bl	900069ac <HAL_LTDC_ConfigLayer>
90001f66:	4603      	mov	r3, r0
}
90001f68:	4618      	mov	r0, r3
90001f6a:	3748      	adds	r7, #72	@ 0x48
90001f6c:	46bd      	mov	sp, r7
90001f6e:	bd80      	pop	{r7, pc}

90001f70 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90001f70:	b480      	push	{r7}
90001f72:	b085      	sub	sp, #20
90001f74:	af00      	add	r7, sp, #0
90001f76:	6078      	str	r0, [r7, #4]
90001f78:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001f7a:	2300      	movs	r3, #0
90001f7c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001f7e:	687b      	ldr	r3, [r7, #4]
90001f80:	2b00      	cmp	r3, #0
90001f82:	d003      	beq.n	90001f8c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001f84:	f06f 0301 	mvn.w	r3, #1
90001f88:	60fb      	str	r3, [r7, #12]
90001f8a:	e007      	b.n	90001f9c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90001f8c:	4a07      	ldr	r2, [pc, #28]	@ (90001fac <BSP_LCD_GetPixelFormat+0x3c>)
90001f8e:	687b      	ldr	r3, [r7, #4]
90001f90:	015b      	lsls	r3, r3, #5
90001f92:	4413      	add	r3, r2
90001f94:	330c      	adds	r3, #12
90001f96:	681a      	ldr	r2, [r3, #0]
90001f98:	683b      	ldr	r3, [r7, #0]
90001f9a:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001f9c:	68fb      	ldr	r3, [r7, #12]
}
90001f9e:	4618      	mov	r0, r3
90001fa0:	3714      	adds	r7, #20
90001fa2:	46bd      	mov	sp, r7
90001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fa8:	4770      	bx	lr
90001faa:	bf00      	nop
90001fac:	200010e0 	.word	0x200010e0

90001fb0 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90001fb0:	b480      	push	{r7}
90001fb2:	b085      	sub	sp, #20
90001fb4:	af00      	add	r7, sp, #0
90001fb6:	6078      	str	r0, [r7, #4]
90001fb8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001fba:	2300      	movs	r3, #0
90001fbc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001fbe:	687b      	ldr	r3, [r7, #4]
90001fc0:	2b00      	cmp	r3, #0
90001fc2:	d003      	beq.n	90001fcc <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001fc4:	f06f 0301 	mvn.w	r3, #1
90001fc8:	60fb      	str	r3, [r7, #12]
90001fca:	e006      	b.n	90001fda <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90001fcc:	4a06      	ldr	r2, [pc, #24]	@ (90001fe8 <BSP_LCD_SetActiveLayer+0x38>)
90001fce:	687b      	ldr	r3, [r7, #4]
90001fd0:	015b      	lsls	r3, r3, #5
90001fd2:	4413      	add	r3, r2
90001fd4:	3308      	adds	r3, #8
90001fd6:	683a      	ldr	r2, [r7, #0]
90001fd8:	601a      	str	r2, [r3, #0]
  }

  return ret;
90001fda:	68fb      	ldr	r3, [r7, #12]
}
90001fdc:	4618      	mov	r0, r3
90001fde:	3714      	adds	r7, #20
90001fe0:	46bd      	mov	sp, r7
90001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fe6:	4770      	bx	lr
90001fe8:	200010e0 	.word	0x200010e0

90001fec <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90001fec:	b480      	push	{r7}
90001fee:	b085      	sub	sp, #20
90001ff0:	af00      	add	r7, sp, #0
90001ff2:	6078      	str	r0, [r7, #4]
90001ff4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001ff6:	2300      	movs	r3, #0
90001ff8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001ffa:	687b      	ldr	r3, [r7, #4]
90001ffc:	2b00      	cmp	r3, #0
90001ffe:	d003      	beq.n	90002008 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002000:	f06f 0301 	mvn.w	r3, #1
90002004:	60fb      	str	r3, [r7, #12]
90002006:	e006      	b.n	90002016 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
90002008:	4a06      	ldr	r2, [pc, #24]	@ (90002024 <BSP_LCD_GetXSize+0x38>)
9000200a:	687b      	ldr	r3, [r7, #4]
9000200c:	015b      	lsls	r3, r3, #5
9000200e:	4413      	add	r3, r2
90002010:	681a      	ldr	r2, [r3, #0]
90002012:	683b      	ldr	r3, [r7, #0]
90002014:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002016:	68fb      	ldr	r3, [r7, #12]
}
90002018:	4618      	mov	r0, r3
9000201a:	3714      	adds	r7, #20
9000201c:	46bd      	mov	sp, r7
9000201e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002022:	4770      	bx	lr
90002024:	200010e0 	.word	0x200010e0

90002028 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
90002028:	b480      	push	{r7}
9000202a:	b085      	sub	sp, #20
9000202c:	af00      	add	r7, sp, #0
9000202e:	6078      	str	r0, [r7, #4]
90002030:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002032:	2300      	movs	r3, #0
90002034:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002036:	687b      	ldr	r3, [r7, #4]
90002038:	2b00      	cmp	r3, #0
9000203a:	d003      	beq.n	90002044 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000203c:	f06f 0301 	mvn.w	r3, #1
90002040:	60fb      	str	r3, [r7, #12]
90002042:	e007      	b.n	90002054 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
90002044:	4a07      	ldr	r2, [pc, #28]	@ (90002064 <BSP_LCD_GetYSize+0x3c>)
90002046:	687b      	ldr	r3, [r7, #4]
90002048:	015b      	lsls	r3, r3, #5
9000204a:	4413      	add	r3, r2
9000204c:	3304      	adds	r3, #4
9000204e:	681a      	ldr	r2, [r3, #0]
90002050:	683b      	ldr	r3, [r7, #0]
90002052:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002054:	68fb      	ldr	r3, [r7, #12]
}
90002056:	4618      	mov	r0, r3
90002058:	3714      	adds	r7, #20
9000205a:	46bd      	mov	sp, r7
9000205c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002060:	4770      	bx	lr
90002062:	bf00      	nop
90002064:	200010e0 	.word	0x200010e0

90002068 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
90002068:	b580      	push	{r7, lr}
9000206a:	b08e      	sub	sp, #56	@ 0x38
9000206c:	af02      	add	r7, sp, #8
9000206e:	60f8      	str	r0, [r7, #12]
90002070:	60b9      	str	r1, [r7, #8]
90002072:	607a      	str	r2, [r7, #4]
90002074:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002076:	2300      	movs	r3, #0
90002078:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
9000207a:	683b      	ldr	r3, [r7, #0]
9000207c:	330a      	adds	r3, #10
9000207e:	781b      	ldrb	r3, [r3, #0]
90002080:	461a      	mov	r2, r3
90002082:	683b      	ldr	r3, [r7, #0]
90002084:	330b      	adds	r3, #11
90002086:	781b      	ldrb	r3, [r3, #0]
90002088:	021b      	lsls	r3, r3, #8
9000208a:	441a      	add	r2, r3
9000208c:	683b      	ldr	r3, [r7, #0]
9000208e:	330c      	adds	r3, #12
90002090:	781b      	ldrb	r3, [r3, #0]
90002092:	041b      	lsls	r3, r3, #16
90002094:	441a      	add	r2, r3
90002096:	683b      	ldr	r3, [r7, #0]
90002098:	330d      	adds	r3, #13
9000209a:	781b      	ldrb	r3, [r3, #0]
9000209c:	061b      	lsls	r3, r3, #24
9000209e:	4413      	add	r3, r2
900020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
900020a2:	683b      	ldr	r3, [r7, #0]
900020a4:	3312      	adds	r3, #18
900020a6:	781b      	ldrb	r3, [r3, #0]
900020a8:	461a      	mov	r2, r3
900020aa:	683b      	ldr	r3, [r7, #0]
900020ac:	3313      	adds	r3, #19
900020ae:	781b      	ldrb	r3, [r3, #0]
900020b0:	021b      	lsls	r3, r3, #8
900020b2:	441a      	add	r2, r3
900020b4:	683b      	ldr	r3, [r7, #0]
900020b6:	3314      	adds	r3, #20
900020b8:	781b      	ldrb	r3, [r3, #0]
900020ba:	041b      	lsls	r3, r3, #16
900020bc:	441a      	add	r2, r3
900020be:	683b      	ldr	r3, [r7, #0]
900020c0:	3315      	adds	r3, #21
900020c2:	781b      	ldrb	r3, [r3, #0]
900020c4:	061b      	lsls	r3, r3, #24
900020c6:	4413      	add	r3, r2
900020c8:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
900020ca:	683b      	ldr	r3, [r7, #0]
900020cc:	3316      	adds	r3, #22
900020ce:	781b      	ldrb	r3, [r3, #0]
900020d0:	461a      	mov	r2, r3
900020d2:	683b      	ldr	r3, [r7, #0]
900020d4:	3317      	adds	r3, #23
900020d6:	781b      	ldrb	r3, [r3, #0]
900020d8:	021b      	lsls	r3, r3, #8
900020da:	441a      	add	r2, r3
900020dc:	683b      	ldr	r3, [r7, #0]
900020de:	3318      	adds	r3, #24
900020e0:	781b      	ldrb	r3, [r3, #0]
900020e2:	041b      	lsls	r3, r3, #16
900020e4:	441a      	add	r2, r3
900020e6:	683b      	ldr	r3, [r7, #0]
900020e8:	3319      	adds	r3, #25
900020ea:	781b      	ldrb	r3, [r3, #0]
900020ec:	061b      	lsls	r3, r3, #24
900020ee:	4413      	add	r3, r2
900020f0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
900020f2:	683b      	ldr	r3, [r7, #0]
900020f4:	331c      	adds	r3, #28
900020f6:	781b      	ldrb	r3, [r3, #0]
900020f8:	461a      	mov	r2, r3
900020fa:	683b      	ldr	r3, [r7, #0]
900020fc:	331d      	adds	r3, #29
900020fe:	781b      	ldrb	r3, [r3, #0]
90002100:	021b      	lsls	r3, r3, #8
90002102:	4413      	add	r3, r2
90002104:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
90002106:	4a37      	ldr	r2, [pc, #220]	@ (900021e4 <BSP_LCD_DrawBitmap+0x17c>)
90002108:	68fb      	ldr	r3, [r7, #12]
9000210a:	015b      	lsls	r3, r3, #5
9000210c:	4413      	add	r3, r2
9000210e:	3308      	adds	r3, #8
90002110:	681b      	ldr	r3, [r3, #0]
90002112:	4a35      	ldr	r2, [pc, #212]	@ (900021e8 <BSP_LCD_DrawBitmap+0x180>)
90002114:	2134      	movs	r1, #52	@ 0x34
90002116:	fb01 f303 	mul.w	r3, r1, r3
9000211a:	4413      	add	r3, r2
9000211c:	335c      	adds	r3, #92	@ 0x5c
9000211e:	681a      	ldr	r2, [r3, #0]
90002120:	4930      	ldr	r1, [pc, #192]	@ (900021e4 <BSP_LCD_DrawBitmap+0x17c>)
90002122:	68fb      	ldr	r3, [r7, #12]
90002124:	015b      	lsls	r3, r3, #5
90002126:	440b      	add	r3, r1
90002128:	681b      	ldr	r3, [r3, #0]
9000212a:	6879      	ldr	r1, [r7, #4]
9000212c:	fb03 f101 	mul.w	r1, r3, r1
90002130:	68bb      	ldr	r3, [r7, #8]
90002132:	440b      	add	r3, r1
90002134:	482b      	ldr	r0, [pc, #172]	@ (900021e4 <BSP_LCD_DrawBitmap+0x17c>)
90002136:	68f9      	ldr	r1, [r7, #12]
90002138:	0149      	lsls	r1, r1, #5
9000213a:	4401      	add	r1, r0
9000213c:	3110      	adds	r1, #16
9000213e:	6809      	ldr	r1, [r1, #0]
90002140:	fb01 f303 	mul.w	r3, r1, r3
90002144:	4413      	add	r3, r2
90002146:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
90002148:	693b      	ldr	r3, [r7, #16]
9000214a:	3b20      	subs	r3, #32
9000214c:	2b07      	cmp	r3, #7
9000214e:	d802      	bhi.n	90002156 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
90002150:	2300      	movs	r3, #0
90002152:	627b      	str	r3, [r7, #36]	@ 0x24
90002154:	e008      	b.n	90002168 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
90002156:	693b      	ldr	r3, [r7, #16]
90002158:	3b10      	subs	r3, #16
9000215a:	2b07      	cmp	r3, #7
9000215c:	d802      	bhi.n	90002164 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
9000215e:	2302      	movs	r3, #2
90002160:	627b      	str	r3, [r7, #36]	@ 0x24
90002162:	e001      	b.n	90002168 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
90002164:	2301      	movs	r3, #1
90002166:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002168:	697b      	ldr	r3, [r7, #20]
9000216a:	3b01      	subs	r3, #1
9000216c:	69ba      	ldr	r2, [r7, #24]
9000216e:	fb02 f303 	mul.w	r3, r2, r3
90002172:	693a      	ldr	r2, [r7, #16]
90002174:	08d2      	lsrs	r2, r2, #3
90002176:	fb03 f202 	mul.w	r2, r3, r2
9000217a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000217c:	4413      	add	r3, r2
9000217e:	683a      	ldr	r2, [r7, #0]
90002180:	4413      	add	r3, r2
90002182:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002184:	2300      	movs	r3, #0
90002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002188:	e023      	b.n	900021d2 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
9000218a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000218e:	9300      	str	r3, [sp, #0]
90002190:	69bb      	ldr	r3, [r7, #24]
90002192:	6a39      	ldr	r1, [r7, #32]
90002194:	68f8      	ldr	r0, [r7, #12]
90002196:	f000 fa77 	bl	90002688 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000219a:	4a12      	ldr	r2, [pc, #72]	@ (900021e4 <BSP_LCD_DrawBitmap+0x17c>)
9000219c:	68fb      	ldr	r3, [r7, #12]
9000219e:	015b      	lsls	r3, r3, #5
900021a0:	4413      	add	r3, r2
900021a2:	681b      	ldr	r3, [r3, #0]
900021a4:	490f      	ldr	r1, [pc, #60]	@ (900021e4 <BSP_LCD_DrawBitmap+0x17c>)
900021a6:	68fa      	ldr	r2, [r7, #12]
900021a8:	0152      	lsls	r2, r2, #5
900021aa:	440a      	add	r2, r1
900021ac:	3210      	adds	r2, #16
900021ae:	6812      	ldr	r2, [r2, #0]
900021b0:	fb02 f303 	mul.w	r3, r2, r3
900021b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
900021b6:	4413      	add	r3, r2
900021b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
900021ba:	693b      	ldr	r3, [r7, #16]
900021bc:	08db      	lsrs	r3, r3, #3
900021be:	69ba      	ldr	r2, [r7, #24]
900021c0:	fb02 f303 	mul.w	r3, r2, r3
900021c4:	425b      	negs	r3, r3
900021c6:	6a3a      	ldr	r2, [r7, #32]
900021c8:	4413      	add	r3, r2
900021ca:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
900021cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
900021ce:	3301      	adds	r3, #1
900021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
900021d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
900021d4:	697b      	ldr	r3, [r7, #20]
900021d6:	429a      	cmp	r2, r3
900021d8:	d3d7      	bcc.n	9000218a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
900021da:	69fb      	ldr	r3, [r7, #28]
}
900021dc:	4618      	mov	r0, r3
900021de:	3730      	adds	r7, #48	@ 0x30
900021e0:	46bd      	mov	sp, r7
900021e2:	bd80      	pop	{r7, pc}
900021e4:	200010e0 	.word	0x200010e0
900021e8:	20001038 	.word	0x20001038

900021ec <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
900021ec:	b580      	push	{r7, lr}
900021ee:	b088      	sub	sp, #32
900021f0:	af00      	add	r7, sp, #0
900021f2:	60f8      	str	r0, [r7, #12]
900021f4:	60b9      	str	r1, [r7, #8]
900021f6:	607a      	str	r2, [r7, #4]
900021f8:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
900021fa:	683b      	ldr	r3, [r7, #0]
900021fc:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
900021fe:	2300      	movs	r3, #0
90002200:	61fb      	str	r3, [r7, #28]
90002202:	e032      	b.n	9000226a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002204:	2300      	movs	r3, #0
90002206:	617b      	str	r3, [r7, #20]
90002208:	e028      	b.n	9000225c <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
9000220a:	69bb      	ldr	r3, [r7, #24]
9000220c:	781b      	ldrb	r3, [r3, #0]
9000220e:	461a      	mov	r2, r3
90002210:	69bb      	ldr	r3, [r7, #24]
90002212:	3301      	adds	r3, #1
90002214:	781b      	ldrb	r3, [r3, #0]
90002216:	021b      	lsls	r3, r3, #8
90002218:	431a      	orrs	r2, r3
9000221a:	69bb      	ldr	r3, [r7, #24]
9000221c:	3302      	adds	r3, #2
9000221e:	781b      	ldrb	r3, [r3, #0]
90002220:	041b      	lsls	r3, r3, #16
90002222:	431a      	orrs	r2, r3
90002224:	69bb      	ldr	r3, [r7, #24]
90002226:	3303      	adds	r3, #3
90002228:	781b      	ldrb	r3, [r3, #0]
9000222a:	061b      	lsls	r3, r3, #24
9000222c:	4313      	orrs	r3, r2
9000222e:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
90002230:	68ba      	ldr	r2, [r7, #8]
90002232:	697b      	ldr	r3, [r7, #20]
90002234:	18d1      	adds	r1, r2, r3
90002236:	687a      	ldr	r2, [r7, #4]
90002238:	69fb      	ldr	r3, [r7, #28]
9000223a:	441a      	add	r2, r3
9000223c:	693b      	ldr	r3, [r7, #16]
9000223e:	68f8      	ldr	r0, [r7, #12]
90002240:	f000 f95e 	bl	90002500 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
90002244:	4a0d      	ldr	r2, [pc, #52]	@ (9000227c <BSP_LCD_FillRGBRect+0x90>)
90002246:	68fb      	ldr	r3, [r7, #12]
90002248:	015b      	lsls	r3, r3, #5
9000224a:	4413      	add	r3, r2
9000224c:	3310      	adds	r3, #16
9000224e:	681b      	ldr	r3, [r3, #0]
90002250:	69ba      	ldr	r2, [r7, #24]
90002252:	4413      	add	r3, r2
90002254:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
90002256:	697b      	ldr	r3, [r7, #20]
90002258:	3301      	adds	r3, #1
9000225a:	617b      	str	r3, [r7, #20]
9000225c:	697a      	ldr	r2, [r7, #20]
9000225e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002260:	429a      	cmp	r2, r3
90002262:	d3d2      	bcc.n	9000220a <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
90002264:	69fb      	ldr	r3, [r7, #28]
90002266:	3301      	adds	r3, #1
90002268:	61fb      	str	r3, [r7, #28]
9000226a:	69fa      	ldr	r2, [r7, #28]
9000226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000226e:	429a      	cmp	r2, r3
90002270:	d3c8      	bcc.n	90002204 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
90002272:	2300      	movs	r3, #0
}
90002274:	4618      	mov	r0, r3
90002276:	3720      	adds	r7, #32
90002278:	46bd      	mov	sp, r7
9000227a:	bd80      	pop	{r7, pc}
9000227c:	200010e0 	.word	0x200010e0

90002280 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002280:	b580      	push	{r7, lr}
90002282:	b088      	sub	sp, #32
90002284:	af02      	add	r7, sp, #8
90002286:	60f8      	str	r0, [r7, #12]
90002288:	60b9      	str	r1, [r7, #8]
9000228a:	607a      	str	r2, [r7, #4]
9000228c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000228e:	4a21      	ldr	r2, [pc, #132]	@ (90002314 <BSP_LCD_DrawHLine+0x94>)
90002290:	68fb      	ldr	r3, [r7, #12]
90002292:	015b      	lsls	r3, r3, #5
90002294:	4413      	add	r3, r2
90002296:	3308      	adds	r3, #8
90002298:	681b      	ldr	r3, [r3, #0]
9000229a:	4a1f      	ldr	r2, [pc, #124]	@ (90002318 <BSP_LCD_DrawHLine+0x98>)
9000229c:	2134      	movs	r1, #52	@ 0x34
9000229e:	fb01 f303 	mul.w	r3, r1, r3
900022a2:	4413      	add	r3, r2
900022a4:	335c      	adds	r3, #92	@ 0x5c
900022a6:	681a      	ldr	r2, [r3, #0]
900022a8:	491a      	ldr	r1, [pc, #104]	@ (90002314 <BSP_LCD_DrawHLine+0x94>)
900022aa:	68fb      	ldr	r3, [r7, #12]
900022ac:	015b      	lsls	r3, r3, #5
900022ae:	440b      	add	r3, r1
900022b0:	3310      	adds	r3, #16
900022b2:	681b      	ldr	r3, [r3, #0]
900022b4:	4817      	ldr	r0, [pc, #92]	@ (90002314 <BSP_LCD_DrawHLine+0x94>)
900022b6:	68f9      	ldr	r1, [r7, #12]
900022b8:	0149      	lsls	r1, r1, #5
900022ba:	4401      	add	r1, r0
900022bc:	6809      	ldr	r1, [r1, #0]
900022be:	6878      	ldr	r0, [r7, #4]
900022c0:	fb01 f000 	mul.w	r0, r1, r0
900022c4:	68b9      	ldr	r1, [r7, #8]
900022c6:	4401      	add	r1, r0
900022c8:	fb01 f303 	mul.w	r3, r1, r3
900022cc:	4413      	add	r3, r2
900022ce:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
900022d0:	68ba      	ldr	r2, [r7, #8]
900022d2:	683b      	ldr	r3, [r7, #0]
900022d4:	441a      	add	r2, r3
900022d6:	490f      	ldr	r1, [pc, #60]	@ (90002314 <BSP_LCD_DrawHLine+0x94>)
900022d8:	68fb      	ldr	r3, [r7, #12]
900022da:	015b      	lsls	r3, r3, #5
900022dc:	440b      	add	r3, r1
900022de:	681b      	ldr	r3, [r3, #0]
900022e0:	429a      	cmp	r2, r3
900022e2:	d907      	bls.n	900022f4 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
900022e4:	4a0b      	ldr	r2, [pc, #44]	@ (90002314 <BSP_LCD_DrawHLine+0x94>)
900022e6:	68fb      	ldr	r3, [r7, #12]
900022e8:	015b      	lsls	r3, r3, #5
900022ea:	4413      	add	r3, r2
900022ec:	681a      	ldr	r2, [r3, #0]
900022ee:	68bb      	ldr	r3, [r7, #8]
900022f0:	1ad3      	subs	r3, r2, r3
900022f2:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
900022f4:	6979      	ldr	r1, [r7, #20]
900022f6:	6a3b      	ldr	r3, [r7, #32]
900022f8:	9301      	str	r3, [sp, #4]
900022fa:	2300      	movs	r3, #0
900022fc:	9300      	str	r3, [sp, #0]
900022fe:	2301      	movs	r3, #1
90002300:	683a      	ldr	r2, [r7, #0]
90002302:	68f8      	ldr	r0, [r7, #12]
90002304:	f000 f956 	bl	900025b4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002308:	2300      	movs	r3, #0
}
9000230a:	4618      	mov	r0, r3
9000230c:	3718      	adds	r7, #24
9000230e:	46bd      	mov	sp, r7
90002310:	bd80      	pop	{r7, pc}
90002312:	bf00      	nop
90002314:	200010e0 	.word	0x200010e0
90002318:	20001038 	.word	0x20001038

9000231c <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
9000231c:	b580      	push	{r7, lr}
9000231e:	b088      	sub	sp, #32
90002320:	af02      	add	r7, sp, #8
90002322:	60f8      	str	r0, [r7, #12]
90002324:	60b9      	str	r1, [r7, #8]
90002326:	607a      	str	r2, [r7, #4]
90002328:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000232a:	4a24      	ldr	r2, [pc, #144]	@ (900023bc <BSP_LCD_DrawVLine+0xa0>)
9000232c:	68fb      	ldr	r3, [r7, #12]
9000232e:	015b      	lsls	r3, r3, #5
90002330:	4413      	add	r3, r2
90002332:	3308      	adds	r3, #8
90002334:	681b      	ldr	r3, [r3, #0]
90002336:	4a22      	ldr	r2, [pc, #136]	@ (900023c0 <BSP_LCD_DrawVLine+0xa4>)
90002338:	2134      	movs	r1, #52	@ 0x34
9000233a:	fb01 f303 	mul.w	r3, r1, r3
9000233e:	4413      	add	r3, r2
90002340:	335c      	adds	r3, #92	@ 0x5c
90002342:	681a      	ldr	r2, [r3, #0]
90002344:	491d      	ldr	r1, [pc, #116]	@ (900023bc <BSP_LCD_DrawVLine+0xa0>)
90002346:	68fb      	ldr	r3, [r7, #12]
90002348:	015b      	lsls	r3, r3, #5
9000234a:	440b      	add	r3, r1
9000234c:	3310      	adds	r3, #16
9000234e:	681b      	ldr	r3, [r3, #0]
90002350:	481a      	ldr	r0, [pc, #104]	@ (900023bc <BSP_LCD_DrawVLine+0xa0>)
90002352:	68f9      	ldr	r1, [r7, #12]
90002354:	0149      	lsls	r1, r1, #5
90002356:	4401      	add	r1, r0
90002358:	6809      	ldr	r1, [r1, #0]
9000235a:	6878      	ldr	r0, [r7, #4]
9000235c:	fb01 f000 	mul.w	r0, r1, r0
90002360:	68b9      	ldr	r1, [r7, #8]
90002362:	4401      	add	r1, r0
90002364:	fb01 f303 	mul.w	r3, r1, r3
90002368:	4413      	add	r3, r2
9000236a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
9000236c:	687a      	ldr	r2, [r7, #4]
9000236e:	683b      	ldr	r3, [r7, #0]
90002370:	441a      	add	r2, r3
90002372:	4912      	ldr	r1, [pc, #72]	@ (900023bc <BSP_LCD_DrawVLine+0xa0>)
90002374:	68fb      	ldr	r3, [r7, #12]
90002376:	015b      	lsls	r3, r3, #5
90002378:	440b      	add	r3, r1
9000237a:	3304      	adds	r3, #4
9000237c:	681b      	ldr	r3, [r3, #0]
9000237e:	429a      	cmp	r2, r3
90002380:	d908      	bls.n	90002394 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90002382:	4a0e      	ldr	r2, [pc, #56]	@ (900023bc <BSP_LCD_DrawVLine+0xa0>)
90002384:	68fb      	ldr	r3, [r7, #12]
90002386:	015b      	lsls	r3, r3, #5
90002388:	4413      	add	r3, r2
9000238a:	3304      	adds	r3, #4
9000238c:	681a      	ldr	r2, [r3, #0]
9000238e:	687b      	ldr	r3, [r7, #4]
90002390:	1ad3      	subs	r3, r2, r3
90002392:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002394:	6979      	ldr	r1, [r7, #20]
90002396:	4a09      	ldr	r2, [pc, #36]	@ (900023bc <BSP_LCD_DrawVLine+0xa0>)
90002398:	68fb      	ldr	r3, [r7, #12]
9000239a:	015b      	lsls	r3, r3, #5
9000239c:	4413      	add	r3, r2
9000239e:	681b      	ldr	r3, [r3, #0]
900023a0:	3b01      	subs	r3, #1
900023a2:	6a3a      	ldr	r2, [r7, #32]
900023a4:	9201      	str	r2, [sp, #4]
900023a6:	9300      	str	r3, [sp, #0]
900023a8:	683b      	ldr	r3, [r7, #0]
900023aa:	2201      	movs	r2, #1
900023ac:	68f8      	ldr	r0, [r7, #12]
900023ae:	f000 f901 	bl	900025b4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900023b2:	2300      	movs	r3, #0
}
900023b4:	4618      	mov	r0, r3
900023b6:	3718      	adds	r7, #24
900023b8:	46bd      	mov	sp, r7
900023ba:	bd80      	pop	{r7, pc}
900023bc:	200010e0 	.word	0x200010e0
900023c0:	20001038 	.word	0x20001038

900023c4 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
900023c4:	b580      	push	{r7, lr}
900023c6:	b088      	sub	sp, #32
900023c8:	af02      	add	r7, sp, #8
900023ca:	60f8      	str	r0, [r7, #12]
900023cc:	60b9      	str	r1, [r7, #8]
900023ce:	607a      	str	r2, [r7, #4]
900023d0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900023d2:	4a1b      	ldr	r2, [pc, #108]	@ (90002440 <BSP_LCD_FillRect+0x7c>)
900023d4:	68fb      	ldr	r3, [r7, #12]
900023d6:	015b      	lsls	r3, r3, #5
900023d8:	4413      	add	r3, r2
900023da:	3308      	adds	r3, #8
900023dc:	681b      	ldr	r3, [r3, #0]
900023de:	4a19      	ldr	r2, [pc, #100]	@ (90002444 <BSP_LCD_FillRect+0x80>)
900023e0:	2134      	movs	r1, #52	@ 0x34
900023e2:	fb01 f303 	mul.w	r3, r1, r3
900023e6:	4413      	add	r3, r2
900023e8:	335c      	adds	r3, #92	@ 0x5c
900023ea:	681a      	ldr	r2, [r3, #0]
900023ec:	4914      	ldr	r1, [pc, #80]	@ (90002440 <BSP_LCD_FillRect+0x7c>)
900023ee:	68fb      	ldr	r3, [r7, #12]
900023f0:	015b      	lsls	r3, r3, #5
900023f2:	440b      	add	r3, r1
900023f4:	3310      	adds	r3, #16
900023f6:	681b      	ldr	r3, [r3, #0]
900023f8:	4811      	ldr	r0, [pc, #68]	@ (90002440 <BSP_LCD_FillRect+0x7c>)
900023fa:	68f9      	ldr	r1, [r7, #12]
900023fc:	0149      	lsls	r1, r1, #5
900023fe:	4401      	add	r1, r0
90002400:	6809      	ldr	r1, [r1, #0]
90002402:	6878      	ldr	r0, [r7, #4]
90002404:	fb01 f000 	mul.w	r0, r1, r0
90002408:	68b9      	ldr	r1, [r7, #8]
9000240a:	4401      	add	r1, r0
9000240c:	fb01 f303 	mul.w	r3, r1, r3
90002410:	4413      	add	r3, r2
90002412:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
90002414:	6979      	ldr	r1, [r7, #20]
90002416:	4a0a      	ldr	r2, [pc, #40]	@ (90002440 <BSP_LCD_FillRect+0x7c>)
90002418:	68fb      	ldr	r3, [r7, #12]
9000241a:	015b      	lsls	r3, r3, #5
9000241c:	4413      	add	r3, r2
9000241e:	681a      	ldr	r2, [r3, #0]
90002420:	683b      	ldr	r3, [r7, #0]
90002422:	1ad3      	subs	r3, r2, r3
90002424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90002426:	9201      	str	r2, [sp, #4]
90002428:	9300      	str	r3, [sp, #0]
9000242a:	6a3b      	ldr	r3, [r7, #32]
9000242c:	683a      	ldr	r2, [r7, #0]
9000242e:	68f8      	ldr	r0, [r7, #12]
90002430:	f000 f8c0 	bl	900025b4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002434:	2300      	movs	r3, #0
}
90002436:	4618      	mov	r0, r3
90002438:	3718      	adds	r7, #24
9000243a:	46bd      	mov	sp, r7
9000243c:	bd80      	pop	{r7, pc}
9000243e:	bf00      	nop
90002440:	200010e0 	.word	0x200010e0
90002444:	20001038 	.word	0x20001038

90002448 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
90002448:	b480      	push	{r7}
9000244a:	b085      	sub	sp, #20
9000244c:	af00      	add	r7, sp, #0
9000244e:	60f8      	str	r0, [r7, #12]
90002450:	60b9      	str	r1, [r7, #8]
90002452:	607a      	str	r2, [r7, #4]
90002454:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002456:	4a28      	ldr	r2, [pc, #160]	@ (900024f8 <BSP_LCD_ReadPixel+0xb0>)
90002458:	68fb      	ldr	r3, [r7, #12]
9000245a:	015b      	lsls	r3, r3, #5
9000245c:	4413      	add	r3, r2
9000245e:	3308      	adds	r3, #8
90002460:	681b      	ldr	r3, [r3, #0]
90002462:	4a26      	ldr	r2, [pc, #152]	@ (900024fc <BSP_LCD_ReadPixel+0xb4>)
90002464:	2134      	movs	r1, #52	@ 0x34
90002466:	fb01 f303 	mul.w	r3, r1, r3
9000246a:	4413      	add	r3, r2
9000246c:	3348      	adds	r3, #72	@ 0x48
9000246e:	681b      	ldr	r3, [r3, #0]
90002470:	2b00      	cmp	r3, #0
90002472:	d11c      	bne.n	900024ae <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002474:	4a20      	ldr	r2, [pc, #128]	@ (900024f8 <BSP_LCD_ReadPixel+0xb0>)
90002476:	68fb      	ldr	r3, [r7, #12]
90002478:	015b      	lsls	r3, r3, #5
9000247a:	4413      	add	r3, r2
9000247c:	3308      	adds	r3, #8
9000247e:	681b      	ldr	r3, [r3, #0]
90002480:	4a1e      	ldr	r2, [pc, #120]	@ (900024fc <BSP_LCD_ReadPixel+0xb4>)
90002482:	2134      	movs	r1, #52	@ 0x34
90002484:	fb01 f303 	mul.w	r3, r1, r3
90002488:	4413      	add	r3, r2
9000248a:	335c      	adds	r3, #92	@ 0x5c
9000248c:	681a      	ldr	r2, [r3, #0]
9000248e:	491a      	ldr	r1, [pc, #104]	@ (900024f8 <BSP_LCD_ReadPixel+0xb0>)
90002490:	68fb      	ldr	r3, [r7, #12]
90002492:	015b      	lsls	r3, r3, #5
90002494:	440b      	add	r3, r1
90002496:	681b      	ldr	r3, [r3, #0]
90002498:	6879      	ldr	r1, [r7, #4]
9000249a:	fb03 f101 	mul.w	r1, r3, r1
9000249e:	68bb      	ldr	r3, [r7, #8]
900024a0:	440b      	add	r3, r1
900024a2:	009b      	lsls	r3, r3, #2
900024a4:	4413      	add	r3, r2
900024a6:	681a      	ldr	r2, [r3, #0]
900024a8:	683b      	ldr	r3, [r7, #0]
900024aa:	601a      	str	r2, [r3, #0]
900024ac:	e01d      	b.n	900024ea <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900024ae:	4a12      	ldr	r2, [pc, #72]	@ (900024f8 <BSP_LCD_ReadPixel+0xb0>)
900024b0:	68fb      	ldr	r3, [r7, #12]
900024b2:	015b      	lsls	r3, r3, #5
900024b4:	4413      	add	r3, r2
900024b6:	3308      	adds	r3, #8
900024b8:	681b      	ldr	r3, [r3, #0]
900024ba:	4a10      	ldr	r2, [pc, #64]	@ (900024fc <BSP_LCD_ReadPixel+0xb4>)
900024bc:	2134      	movs	r1, #52	@ 0x34
900024be:	fb01 f303 	mul.w	r3, r1, r3
900024c2:	4413      	add	r3, r2
900024c4:	335c      	adds	r3, #92	@ 0x5c
900024c6:	681a      	ldr	r2, [r3, #0]
900024c8:	490b      	ldr	r1, [pc, #44]	@ (900024f8 <BSP_LCD_ReadPixel+0xb0>)
900024ca:	68fb      	ldr	r3, [r7, #12]
900024cc:	015b      	lsls	r3, r3, #5
900024ce:	440b      	add	r3, r1
900024d0:	681b      	ldr	r3, [r3, #0]
900024d2:	6879      	ldr	r1, [r7, #4]
900024d4:	fb03 f101 	mul.w	r1, r3, r1
900024d8:	68bb      	ldr	r3, [r7, #8]
900024da:	440b      	add	r3, r1
900024dc:	005b      	lsls	r3, r3, #1
900024de:	4413      	add	r3, r2
900024e0:	881b      	ldrh	r3, [r3, #0]
900024e2:	b29b      	uxth	r3, r3
900024e4:	461a      	mov	r2, r3
900024e6:	683b      	ldr	r3, [r7, #0]
900024e8:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
900024ea:	2300      	movs	r3, #0
}
900024ec:	4618      	mov	r0, r3
900024ee:	3714      	adds	r7, #20
900024f0:	46bd      	mov	sp, r7
900024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900024f6:	4770      	bx	lr
900024f8:	200010e0 	.word	0x200010e0
900024fc:	20001038 	.word	0x20001038

90002500 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002500:	b480      	push	{r7}
90002502:	b085      	sub	sp, #20
90002504:	af00      	add	r7, sp, #0
90002506:	60f8      	str	r0, [r7, #12]
90002508:	60b9      	str	r1, [r7, #8]
9000250a:	607a      	str	r2, [r7, #4]
9000250c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000250e:	4a27      	ldr	r2, [pc, #156]	@ (900025ac <BSP_LCD_WritePixel+0xac>)
90002510:	68fb      	ldr	r3, [r7, #12]
90002512:	015b      	lsls	r3, r3, #5
90002514:	4413      	add	r3, r2
90002516:	3308      	adds	r3, #8
90002518:	681b      	ldr	r3, [r3, #0]
9000251a:	4a25      	ldr	r2, [pc, #148]	@ (900025b0 <BSP_LCD_WritePixel+0xb0>)
9000251c:	2134      	movs	r1, #52	@ 0x34
9000251e:	fb01 f303 	mul.w	r3, r1, r3
90002522:	4413      	add	r3, r2
90002524:	3348      	adds	r3, #72	@ 0x48
90002526:	681b      	ldr	r3, [r3, #0]
90002528:	2b00      	cmp	r3, #0
9000252a:	d11c      	bne.n	90002566 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
9000252c:	4a1f      	ldr	r2, [pc, #124]	@ (900025ac <BSP_LCD_WritePixel+0xac>)
9000252e:	68fb      	ldr	r3, [r7, #12]
90002530:	015b      	lsls	r3, r3, #5
90002532:	4413      	add	r3, r2
90002534:	3308      	adds	r3, #8
90002536:	681b      	ldr	r3, [r3, #0]
90002538:	4a1d      	ldr	r2, [pc, #116]	@ (900025b0 <BSP_LCD_WritePixel+0xb0>)
9000253a:	2134      	movs	r1, #52	@ 0x34
9000253c:	fb01 f303 	mul.w	r3, r1, r3
90002540:	4413      	add	r3, r2
90002542:	335c      	adds	r3, #92	@ 0x5c
90002544:	681a      	ldr	r2, [r3, #0]
90002546:	4919      	ldr	r1, [pc, #100]	@ (900025ac <BSP_LCD_WritePixel+0xac>)
90002548:	68fb      	ldr	r3, [r7, #12]
9000254a:	015b      	lsls	r3, r3, #5
9000254c:	440b      	add	r3, r1
9000254e:	681b      	ldr	r3, [r3, #0]
90002550:	6879      	ldr	r1, [r7, #4]
90002552:	fb03 f101 	mul.w	r1, r3, r1
90002556:	68bb      	ldr	r3, [r7, #8]
90002558:	440b      	add	r3, r1
9000255a:	009b      	lsls	r3, r3, #2
9000255c:	4413      	add	r3, r2
9000255e:	461a      	mov	r2, r3
90002560:	683b      	ldr	r3, [r7, #0]
90002562:	6013      	str	r3, [r2, #0]
90002564:	e01b      	b.n	9000259e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
90002566:	4a11      	ldr	r2, [pc, #68]	@ (900025ac <BSP_LCD_WritePixel+0xac>)
90002568:	68fb      	ldr	r3, [r7, #12]
9000256a:	015b      	lsls	r3, r3, #5
9000256c:	4413      	add	r3, r2
9000256e:	3308      	adds	r3, #8
90002570:	681b      	ldr	r3, [r3, #0]
90002572:	4a0f      	ldr	r2, [pc, #60]	@ (900025b0 <BSP_LCD_WritePixel+0xb0>)
90002574:	2134      	movs	r1, #52	@ 0x34
90002576:	fb01 f303 	mul.w	r3, r1, r3
9000257a:	4413      	add	r3, r2
9000257c:	335c      	adds	r3, #92	@ 0x5c
9000257e:	681a      	ldr	r2, [r3, #0]
90002580:	490a      	ldr	r1, [pc, #40]	@ (900025ac <BSP_LCD_WritePixel+0xac>)
90002582:	68fb      	ldr	r3, [r7, #12]
90002584:	015b      	lsls	r3, r3, #5
90002586:	440b      	add	r3, r1
90002588:	681b      	ldr	r3, [r3, #0]
9000258a:	6879      	ldr	r1, [r7, #4]
9000258c:	fb03 f101 	mul.w	r1, r3, r1
90002590:	68bb      	ldr	r3, [r7, #8]
90002592:	440b      	add	r3, r1
90002594:	005b      	lsls	r3, r3, #1
90002596:	4413      	add	r3, r2
90002598:	683a      	ldr	r2, [r7, #0]
9000259a:	b292      	uxth	r2, r2
9000259c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000259e:	2300      	movs	r3, #0
}
900025a0:	4618      	mov	r0, r3
900025a2:	3714      	adds	r7, #20
900025a4:	46bd      	mov	sp, r7
900025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900025aa:	4770      	bx	lr
900025ac:	200010e0 	.word	0x200010e0
900025b0:	20001038 	.word	0x20001038

900025b4 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
900025b4:	b580      	push	{r7, lr}
900025b6:	b088      	sub	sp, #32
900025b8:	af02      	add	r7, sp, #8
900025ba:	60f8      	str	r0, [r7, #12]
900025bc:	60b9      	str	r1, [r7, #8]
900025be:	607a      	str	r2, [r7, #4]
900025c0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
900025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900025c4:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
900025c6:	4a2d      	ldr	r2, [pc, #180]	@ (9000267c <LL_FillBuffer+0xc8>)
900025c8:	68fb      	ldr	r3, [r7, #12]
900025ca:	015b      	lsls	r3, r3, #5
900025cc:	4413      	add	r3, r2
900025ce:	330c      	adds	r3, #12
900025d0:	681b      	ldr	r3, [r3, #0]
900025d2:	2b02      	cmp	r3, #2
900025d4:	d129      	bne.n	9000262a <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
900025d6:	2302      	movs	r3, #2
900025d8:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
900025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900025dc:	0adb      	lsrs	r3, r3, #11
900025de:	f003 021f 	and.w	r2, r3, #31
900025e2:	4613      	mov	r3, r2
900025e4:	011b      	lsls	r3, r3, #4
900025e6:	4413      	add	r3, r2
900025e8:	015a      	lsls	r2, r3, #5
900025ea:	1ad3      	subs	r3, r2, r3
900025ec:	3317      	adds	r3, #23
900025ee:	099b      	lsrs	r3, r3, #6
900025f0:	0419      	lsls	r1, r3, #16
900025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900025f4:	095b      	lsrs	r3, r3, #5
900025f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
900025fa:	4613      	mov	r3, r2
900025fc:	01db      	lsls	r3, r3, #7
900025fe:	4413      	add	r3, r2
90002600:	005b      	lsls	r3, r3, #1
90002602:	4413      	add	r3, r2
90002604:	3321      	adds	r3, #33	@ 0x21
90002606:	099b      	lsrs	r3, r3, #6
90002608:	021b      	lsls	r3, r3, #8
9000260a:	4319      	orrs	r1, r3
9000260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000260e:	f003 021f 	and.w	r2, r3, #31
90002612:	4613      	mov	r3, r2
90002614:	011b      	lsls	r3, r3, #4
90002616:	4413      	add	r3, r2
90002618:	015a      	lsls	r2, r3, #5
9000261a:	1ad3      	subs	r3, r2, r3
9000261c:	3317      	adds	r3, #23
9000261e:	099b      	lsrs	r3, r3, #6
90002620:	430b      	orrs	r3, r1
90002622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
90002626:	613b      	str	r3, [r7, #16]
    break;
90002628:	e002      	b.n	90002630 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
9000262a:	2300      	movs	r3, #0
9000262c:	617b      	str	r3, [r7, #20]
    break;
9000262e:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
90002630:	4b13      	ldr	r3, [pc, #76]	@ (90002680 <LL_FillBuffer+0xcc>)
90002632:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
90002636:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002638:	4a11      	ldr	r2, [pc, #68]	@ (90002680 <LL_FillBuffer+0xcc>)
9000263a:	697b      	ldr	r3, [r7, #20]
9000263c:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
9000263e:	4a10      	ldr	r2, [pc, #64]	@ (90002680 <LL_FillBuffer+0xcc>)
90002640:	6a3b      	ldr	r3, [r7, #32]
90002642:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
90002644:	4b0e      	ldr	r3, [pc, #56]	@ (90002680 <LL_FillBuffer+0xcc>)
90002646:	4a0f      	ldr	r2, [pc, #60]	@ (90002684 <LL_FillBuffer+0xd0>)
90002648:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
9000264a:	480d      	ldr	r0, [pc, #52]	@ (90002680 <LL_FillBuffer+0xcc>)
9000264c:	f000 ff36 	bl	900034bc <HAL_DMA2D_Init>
90002650:	4603      	mov	r3, r0
90002652:	2b00      	cmp	r3, #0
90002654:	d10e      	bne.n	90002674 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90002656:	68ba      	ldr	r2, [r7, #8]
90002658:	683b      	ldr	r3, [r7, #0]
9000265a:	9300      	str	r3, [sp, #0]
9000265c:	687b      	ldr	r3, [r7, #4]
9000265e:	6939      	ldr	r1, [r7, #16]
90002660:	4807      	ldr	r0, [pc, #28]	@ (90002680 <LL_FillBuffer+0xcc>)
90002662:	f000 ff99 	bl	90003598 <HAL_DMA2D_Start>
90002666:	4603      	mov	r3, r0
90002668:	2b00      	cmp	r3, #0
9000266a:	d103      	bne.n	90002674 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
9000266c:	2132      	movs	r1, #50	@ 0x32
9000266e:	4804      	ldr	r0, [pc, #16]	@ (90002680 <LL_FillBuffer+0xcc>)
90002670:	f000 ffbd 	bl	900035ee <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002674:	bf00      	nop
90002676:	3718      	adds	r7, #24
90002678:	46bd      	mov	sp, r7
9000267a:	bd80      	pop	{r7, pc}
9000267c:	200010e0 	.word	0x200010e0
90002680:	20000fd0 	.word	0x20000fd0
90002684:	52001000 	.word	0x52001000

90002688 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002688:	b580      	push	{r7, lr}
9000268a:	b088      	sub	sp, #32
9000268c:	af02      	add	r7, sp, #8
9000268e:	60f8      	str	r0, [r7, #12]
90002690:	60b9      	str	r1, [r7, #8]
90002692:	607a      	str	r2, [r7, #4]
90002694:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002696:	4a23      	ldr	r2, [pc, #140]	@ (90002724 <LL_ConvertLineToRGB+0x9c>)
90002698:	68fb      	ldr	r3, [r7, #12]
9000269a:	015b      	lsls	r3, r3, #5
9000269c:	4413      	add	r3, r2
9000269e:	330c      	adds	r3, #12
900026a0:	681b      	ldr	r3, [r3, #0]
900026a2:	2b02      	cmp	r3, #2
900026a4:	d102      	bne.n	900026ac <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
900026a6:	2302      	movs	r3, #2
900026a8:	617b      	str	r3, [r7, #20]
    break;
900026aa:	e002      	b.n	900026b2 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
900026ac:	2300      	movs	r3, #0
900026ae:	617b      	str	r3, [r7, #20]
    break;
900026b0:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
900026b2:	4b1d      	ldr	r3, [pc, #116]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
900026b8:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900026ba:	4a1b      	ldr	r2, [pc, #108]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026bc:	697b      	ldr	r3, [r7, #20]
900026be:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
900026c0:	4b19      	ldr	r3, [pc, #100]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026c2:	2200      	movs	r2, #0
900026c4:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
900026c6:	4b18      	ldr	r3, [pc, #96]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026c8:	2200      	movs	r2, #0
900026ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
900026cc:	4b16      	ldr	r3, [pc, #88]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026ce:	22ff      	movs	r2, #255	@ 0xff
900026d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
900026d2:	4a15      	ldr	r2, [pc, #84]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026d4:	6a3b      	ldr	r3, [r7, #32]
900026d6:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
900026d8:	4b13      	ldr	r3, [pc, #76]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026da:	2200      	movs	r2, #0
900026dc:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
900026de:	4b12      	ldr	r3, [pc, #72]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026e0:	4a12      	ldr	r2, [pc, #72]	@ (9000272c <LL_ConvertLineToRGB+0xa4>)
900026e2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900026e4:	4810      	ldr	r0, [pc, #64]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026e6:	f000 fee9 	bl	900034bc <HAL_DMA2D_Init>
900026ea:	4603      	mov	r3, r0
900026ec:	2b00      	cmp	r3, #0
900026ee:	d115      	bne.n	9000271c <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
900026f0:	2101      	movs	r1, #1
900026f2:	480d      	ldr	r0, [pc, #52]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
900026f4:	f001 f864 	bl	900037c0 <HAL_DMA2D_ConfigLayer>
900026f8:	4603      	mov	r3, r0
900026fa:	2b00      	cmp	r3, #0
900026fc:	d10e      	bne.n	9000271c <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
900026fe:	68b9      	ldr	r1, [r7, #8]
90002700:	687a      	ldr	r2, [r7, #4]
90002702:	2301      	movs	r3, #1
90002704:	9300      	str	r3, [sp, #0]
90002706:	683b      	ldr	r3, [r7, #0]
90002708:	4807      	ldr	r0, [pc, #28]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
9000270a:	f000 ff45 	bl	90003598 <HAL_DMA2D_Start>
9000270e:	4603      	mov	r3, r0
90002710:	2b00      	cmp	r3, #0
90002712:	d103      	bne.n	9000271c <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002714:	2132      	movs	r1, #50	@ 0x32
90002716:	4804      	ldr	r0, [pc, #16]	@ (90002728 <LL_ConvertLineToRGB+0xa0>)
90002718:	f000 ff69 	bl	900035ee <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
9000271c:	bf00      	nop
9000271e:	3718      	adds	r7, #24
90002720:	46bd      	mov	sp, r7
90002722:	bd80      	pop	{r7, pc}
90002724:	200010e0 	.word	0x200010e0
90002728:	20000fd0 	.word	0x20000fd0
9000272c:	52001000 	.word	0x52001000

90002730 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002730:	b580      	push	{r7, lr}
90002732:	b08e      	sub	sp, #56	@ 0x38
90002734:	af00      	add	r7, sp, #0
90002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002738:	687b      	ldr	r3, [r7, #4]
9000273a:	681b      	ldr	r3, [r3, #0]
9000273c:	4a5b      	ldr	r2, [pc, #364]	@ (900028ac <LTDC_MspInit+0x17c>)
9000273e:	4293      	cmp	r3, r2
90002740:	f040 80b0 	bne.w	900028a4 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002744:	4b5a      	ldr	r3, [pc, #360]	@ (900028b0 <LTDC_MspInit+0x180>)
90002746:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
9000274a:	4a59      	ldr	r2, [pc, #356]	@ (900028b0 <LTDC_MspInit+0x180>)
9000274c:	f043 0308 	orr.w	r3, r3, #8
90002750:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002754:	4b56      	ldr	r3, [pc, #344]	@ (900028b0 <LTDC_MspInit+0x180>)
90002756:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
9000275a:	f003 0308 	and.w	r3, r3, #8
9000275e:	623b      	str	r3, [r7, #32]
90002760:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002762:	4b53      	ldr	r3, [pc, #332]	@ (900028b0 <LTDC_MspInit+0x180>)
90002764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002768:	4a51      	ldr	r2, [pc, #324]	@ (900028b0 <LTDC_MspInit+0x180>)
9000276a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000276e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002772:	4b4f      	ldr	r3, [pc, #316]	@ (900028b0 <LTDC_MspInit+0x180>)
90002774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000277c:	61fb      	str	r3, [r7, #28]
9000277e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002780:	4b4b      	ldr	r3, [pc, #300]	@ (900028b0 <LTDC_MspInit+0x180>)
90002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002786:	4a4a      	ldr	r2, [pc, #296]	@ (900028b0 <LTDC_MspInit+0x180>)
90002788:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
9000278c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002790:	4b47      	ldr	r3, [pc, #284]	@ (900028b0 <LTDC_MspInit+0x180>)
90002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000279a:	61bb      	str	r3, [r7, #24]
9000279c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000279e:	4b44      	ldr	r3, [pc, #272]	@ (900028b0 <LTDC_MspInit+0x180>)
900027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900027a4:	4a42      	ldr	r2, [pc, #264]	@ (900028b0 <LTDC_MspInit+0x180>)
900027a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
900027aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900027ae:	4b40      	ldr	r3, [pc, #256]	@ (900028b0 <LTDC_MspInit+0x180>)
900027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900027b8:	617b      	str	r3, [r7, #20]
900027ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900027bc:	4b3c      	ldr	r3, [pc, #240]	@ (900028b0 <LTDC_MspInit+0x180>)
900027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900027c2:	4a3b      	ldr	r2, [pc, #236]	@ (900028b0 <LTDC_MspInit+0x180>)
900027c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
900027c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900027cc:	4b38      	ldr	r3, [pc, #224]	@ (900028b0 <LTDC_MspInit+0x180>)
900027ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900027d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900027d6:	613b      	str	r3, [r7, #16]
900027d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
900027da:	4b35      	ldr	r3, [pc, #212]	@ (900028b0 <LTDC_MspInit+0x180>)
900027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900027e0:	4a33      	ldr	r2, [pc, #204]	@ (900028b0 <LTDC_MspInit+0x180>)
900027e2:	f043 0308 	orr.w	r3, r3, #8
900027e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
900027ea:	4b31      	ldr	r3, [pc, #196]	@ (900028b0 <LTDC_MspInit+0x180>)
900027ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900027f0:	f003 0308 	and.w	r3, r3, #8
900027f4:	60fb      	str	r3, [r7, #12]
900027f6:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
900027f8:	f24d 2303 	movw	r3, #53763	@ 0xd203
900027fc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900027fe:	2302      	movs	r3, #2
90002800:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002802:	2300      	movs	r3, #0
90002804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002806:	2302      	movs	r3, #2
90002808:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000280a:	230e      	movs	r3, #14
9000280c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
9000280e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002812:	4619      	mov	r1, r3
90002814:	4827      	ldr	r0, [pc, #156]	@ (900028b4 <LTDC_MspInit+0x184>)
90002816:	f001 f927 	bl	90003a68 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
9000281a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
9000281e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002820:	230e      	movs	r3, #14
90002822:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002828:	4619      	mov	r1, r3
9000282a:	4823      	ldr	r0, [pc, #140]	@ (900028b8 <LTDC_MspInit+0x188>)
9000282c:	f001 f91c 	bl	90003a68 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002830:	23ff      	movs	r3, #255	@ 0xff
90002832:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002834:	230e      	movs	r3, #14
90002836:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000283c:	4619      	mov	r1, r3
9000283e:	481f      	ldr	r0, [pc, #124]	@ (900028bc <LTDC_MspInit+0x18c>)
90002840:	f001 f912 	bl	90003a68 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002844:	f240 2302 	movw	r3, #514	@ 0x202
90002848:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
9000284a:	2302      	movs	r3, #2
9000284c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
9000284e:	2300      	movs	r3, #0
90002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002852:	2302      	movs	r3, #2
90002854:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002856:	230e      	movs	r3, #14
90002858:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
9000285a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000285e:	4619      	mov	r1, r3
90002860:	4817      	ldr	r0, [pc, #92]	@ (900028c0 <LTDC_MspInit+0x190>)
90002862:	f001 f901 	bl	90003a68 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002866:	2380      	movs	r3, #128	@ 0x80
90002868:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000286a:	2301      	movs	r3, #1
9000286c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
9000286e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002872:	4619      	mov	r1, r3
90002874:	4813      	ldr	r0, [pc, #76]	@ (900028c4 <LTDC_MspInit+0x194>)
90002876:	f001 f8f7 	bl	90003a68 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
9000287a:	2201      	movs	r2, #1
9000287c:	2180      	movs	r1, #128	@ 0x80
9000287e:	4811      	ldr	r0, [pc, #68]	@ (900028c4 <LTDC_MspInit+0x194>)
90002880:	f001 fbac 	bl	90003fdc <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002884:	4b0a      	ldr	r3, [pc, #40]	@ (900028b0 <LTDC_MspInit+0x180>)
90002886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000288a:	4a09      	ldr	r2, [pc, #36]	@ (900028b0 <LTDC_MspInit+0x180>)
9000288c:	f043 0308 	orr.w	r3, r3, #8
90002890:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002894:	4b06      	ldr	r3, [pc, #24]	@ (900028b0 <LTDC_MspInit+0x180>)
90002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000289a:	4a05      	ldr	r2, [pc, #20]	@ (900028b0 <LTDC_MspInit+0x180>)
9000289c:	f023 0308 	bic.w	r3, r3, #8
900028a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
900028a4:	bf00      	nop
900028a6:	3738      	adds	r7, #56	@ 0x38
900028a8:	46bd      	mov	sp, r7
900028aa:	bd80      	pop	{r7, pc}
900028ac:	50001000 	.word	0x50001000
900028b0:	58024400 	.word	0x58024400
900028b4:	58022000 	.word	0x58022000
900028b8:	58022400 	.word	0x58022400
900028bc:	58022800 	.word	0x58022800
900028c0:	58021c00 	.word	0x58021c00
900028c4:	58020c00 	.word	0x58020c00

900028c8 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
900028c8:	b480      	push	{r7}
900028ca:	b085      	sub	sp, #20
900028cc:	af00      	add	r7, sp, #0
900028ce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
900028d0:	687b      	ldr	r3, [r7, #4]
900028d2:	681b      	ldr	r3, [r3, #0]
900028d4:	4a11      	ldr	r2, [pc, #68]	@ (9000291c <DMA2D_MspInit+0x54>)
900028d6:	4293      	cmp	r3, r2
900028d8:	d11a      	bne.n	90002910 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
900028da:	4b11      	ldr	r3, [pc, #68]	@ (90002920 <DMA2D_MspInit+0x58>)
900028dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900028e0:	4a0f      	ldr	r2, [pc, #60]	@ (90002920 <DMA2D_MspInit+0x58>)
900028e2:	f043 0310 	orr.w	r3, r3, #16
900028e6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
900028ea:	4b0d      	ldr	r3, [pc, #52]	@ (90002920 <DMA2D_MspInit+0x58>)
900028ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
900028f0:	f003 0310 	and.w	r3, r3, #16
900028f4:	60fb      	str	r3, [r7, #12]
900028f6:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
900028f8:	4b09      	ldr	r3, [pc, #36]	@ (90002920 <DMA2D_MspInit+0x58>)
900028fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
900028fc:	4a08      	ldr	r2, [pc, #32]	@ (90002920 <DMA2D_MspInit+0x58>)
900028fe:	f043 0310 	orr.w	r3, r3, #16
90002902:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002904:	4b06      	ldr	r3, [pc, #24]	@ (90002920 <DMA2D_MspInit+0x58>)
90002906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002908:	4a05      	ldr	r2, [pc, #20]	@ (90002920 <DMA2D_MspInit+0x58>)
9000290a:	f023 0310 	bic.w	r3, r3, #16
9000290e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002910:	bf00      	nop
90002912:	3714      	adds	r7, #20
90002914:	46bd      	mov	sp, r7
90002916:	f85d 7b04 	ldr.w	r7, [sp], #4
9000291a:	4770      	bx	lr
9000291c:	52001000 	.word	0x52001000
90002920:	58024400 	.word	0x58024400

90002924 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002924:	b580      	push	{r7, lr}
90002926:	b08a      	sub	sp, #40	@ 0x28
90002928:	af00      	add	r7, sp, #0
9000292a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
9000292c:	4b18      	ldr	r3, [pc, #96]	@ (90002990 <TIMx_PWM_MspInit+0x6c>)
9000292e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002932:	4a17      	ldr	r2, [pc, #92]	@ (90002990 <TIMx_PWM_MspInit+0x6c>)
90002934:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002938:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000293c:	4b14      	ldr	r3, [pc, #80]	@ (90002990 <TIMx_PWM_MspInit+0x6c>)
9000293e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002946:	613b      	str	r3, [r7, #16]
90002948:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
9000294a:	4b11      	ldr	r3, [pc, #68]	@ (90002990 <TIMx_PWM_MspInit+0x6c>)
9000294c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002950:	4a0f      	ldr	r2, [pc, #60]	@ (90002990 <TIMx_PWM_MspInit+0x6c>)
90002952:	f043 0302 	orr.w	r3, r3, #2
90002956:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
9000295a:	4b0d      	ldr	r3, [pc, #52]	@ (90002990 <TIMx_PWM_MspInit+0x6c>)
9000295c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002960:	f003 0302 	and.w	r3, r3, #2
90002964:	60fb      	str	r3, [r7, #12]
90002966:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002968:	2302      	movs	r3, #2
9000296a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
9000296c:	2300      	movs	r3, #0
9000296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002970:	2301      	movs	r3, #1
90002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002974:	2303      	movs	r3, #3
90002976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002978:	2301      	movs	r3, #1
9000297a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
9000297c:	f107 0314 	add.w	r3, r7, #20
90002980:	4619      	mov	r1, r3
90002982:	4804      	ldr	r0, [pc, #16]	@ (90002994 <TIMx_PWM_MspInit+0x70>)
90002984:	f001 f870 	bl	90003a68 <HAL_GPIO_Init>
}
90002988:	bf00      	nop
9000298a:	3728      	adds	r7, #40	@ 0x28
9000298c:	46bd      	mov	sp, r7
9000298e:	bd80      	pop	{r7, pc}
90002990:	58024400 	.word	0x58024400
90002994:	58022800 	.word	0x58022800

90002998 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002998:	b580      	push	{r7, lr}
9000299a:	b082      	sub	sp, #8
9000299c:	af00      	add	r7, sp, #0
9000299e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
900029a0:	687b      	ldr	r3, [r7, #4]
900029a2:	4a11      	ldr	r2, [pc, #68]	@ (900029e8 <TIMx_PWM_Init+0x50>)
900029a4:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
900029a6:	6878      	ldr	r0, [r7, #4]
900029a8:	f006 ff28 	bl	900097fc <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
900029ac:	6878      	ldr	r0, [r7, #4]
900029ae:	f7ff ffb9 	bl	90002924 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
900029b2:	687b      	ldr	r3, [r7, #4]
900029b4:	2204      	movs	r2, #4
900029b6:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
900029b8:	687b      	ldr	r3, [r7, #4]
900029ba:	f24c 3250 	movw	r2, #50000	@ 0xc350
900029be:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
900029c0:	687b      	ldr	r3, [r7, #4]
900029c2:	2200      	movs	r2, #0
900029c4:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
900029c6:	687b      	ldr	r3, [r7, #4]
900029c8:	2200      	movs	r2, #0
900029ca:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
900029cc:	687b      	ldr	r3, [r7, #4]
900029ce:	2200      	movs	r2, #0
900029d0:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
900029d2:	687b      	ldr	r3, [r7, #4]
900029d4:	2200      	movs	r2, #0
900029d6:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
900029d8:	6878      	ldr	r0, [r7, #4]
900029da:	f006 feb8 	bl	9000974e <HAL_TIM_PWM_Init>
}
900029de:	bf00      	nop
900029e0:	3708      	adds	r7, #8
900029e2:	46bd      	mov	sp, r7
900029e4:	bd80      	pop	{r7, pc}
900029e6:	bf00      	nop
900029e8:	40010400 	.word	0x40010400

900029ec <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
900029ec:	b580      	push	{r7, lr}
900029ee:	b084      	sub	sp, #16
900029f0:	af00      	add	r7, sp, #0
900029f2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
900029f4:	2300      	movs	r3, #0
900029f6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
900029f8:	687b      	ldr	r3, [r7, #4]
900029fa:	2b00      	cmp	r3, #0
900029fc:	d003      	beq.n	90002a06 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
900029fe:	f06f 0301 	mvn.w	r3, #1
90002a02:	60fb      	str	r3, [r7, #12]
90002a04:	e044      	b.n	90002a90 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002a06:	687b      	ldr	r3, [r7, #4]
90002a08:	2234      	movs	r2, #52	@ 0x34
90002a0a:	fb02 f303 	mul.w	r3, r2, r3
90002a0e:	4a23      	ldr	r2, [pc, #140]	@ (90002a9c <BSP_SDRAM_Init+0xb0>)
90002a10:	4413      	add	r3, r2
90002a12:	4618      	mov	r0, r3
90002a14:	f000 f892 	bl	90002b3c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002a18:	687b      	ldr	r3, [r7, #4]
90002a1a:	2234      	movs	r2, #52	@ 0x34
90002a1c:	fb02 f303 	mul.w	r3, r2, r3
90002a20:	4a1e      	ldr	r2, [pc, #120]	@ (90002a9c <BSP_SDRAM_Init+0xb0>)
90002a22:	4413      	add	r3, r2
90002a24:	2210      	movs	r2, #16
90002a26:	2104      	movs	r1, #4
90002a28:	4618      	mov	r0, r3
90002a2a:	f000 f83b 	bl	90002aa4 <MX_SDRAM_BANK2_Init>
90002a2e:	4603      	mov	r3, r0
90002a30:	2b00      	cmp	r3, #0
90002a32:	d003      	beq.n	90002a3c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002a34:	f04f 33ff 	mov.w	r3, #4294967295
90002a38:	60fb      	str	r3, [r7, #12]
90002a3a:	e029      	b.n	90002a90 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002a3c:	4b18      	ldr	r3, [pc, #96]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a3e:	2208      	movs	r2, #8
90002a40:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002a42:	4b17      	ldr	r3, [pc, #92]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a44:	2203      	movs	r2, #3
90002a46:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002a48:	4b15      	ldr	r3, [pc, #84]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a4a:	f240 6203 	movw	r2, #1539	@ 0x603
90002a4e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002a50:	4b13      	ldr	r3, [pc, #76]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a52:	2200      	movs	r2, #0
90002a54:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002a56:	4b12      	ldr	r3, [pc, #72]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a58:	2200      	movs	r2, #0
90002a5a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002a5c:	4b10      	ldr	r3, [pc, #64]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a5e:	2230      	movs	r2, #48	@ 0x30
90002a60:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002a62:	4b0f      	ldr	r3, [pc, #60]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a64:	2200      	movs	r2, #0
90002a66:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002a68:	4b0d      	ldr	r3, [pc, #52]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002a6e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002a70:	687b      	ldr	r3, [r7, #4]
90002a72:	2234      	movs	r2, #52	@ 0x34
90002a74:	fb02 f303 	mul.w	r3, r2, r3
90002a78:	4a08      	ldr	r2, [pc, #32]	@ (90002a9c <BSP_SDRAM_Init+0xb0>)
90002a7a:	4413      	add	r3, r2
90002a7c:	4908      	ldr	r1, [pc, #32]	@ (90002aa0 <BSP_SDRAM_Init+0xb4>)
90002a7e:	4618      	mov	r0, r3
90002a80:	f7fe fb3a 	bl	900010f8 <MT48LC4M32B2_Init>
90002a84:	4603      	mov	r3, r0
90002a86:	2b00      	cmp	r3, #0
90002a88:	d002      	beq.n	90002a90 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002a8a:	f06f 0304 	mvn.w	r3, #4
90002a8e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002a90:	68fb      	ldr	r3, [r7, #12]
}
90002a92:	4618      	mov	r0, r3
90002a94:	3710      	adds	r7, #16
90002a96:	46bd      	mov	sp, r7
90002a98:	bd80      	pop	{r7, pc}
90002a9a:	bf00      	nop
90002a9c:	20001100 	.word	0x20001100
90002aa0:	20001134 	.word	0x20001134

90002aa4 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002aa4:	b580      	push	{r7, lr}
90002aa6:	b08c      	sub	sp, #48	@ 0x30
90002aa8:	af00      	add	r7, sp, #0
90002aaa:	60f8      	str	r0, [r7, #12]
90002aac:	60b9      	str	r1, [r7, #8]
90002aae:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002ab0:	4b20      	ldr	r3, [pc, #128]	@ (90002b34 <MX_SDRAM_BANK2_Init+0x90>)
90002ab2:	4a21      	ldr	r2, [pc, #132]	@ (90002b38 <MX_SDRAM_BANK2_Init+0x94>)
90002ab4:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002ab6:	68fb      	ldr	r3, [r7, #12]
90002ab8:	2201      	movs	r2, #1
90002aba:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002abc:	68fb      	ldr	r3, [r7, #12]
90002abe:	2200      	movs	r2, #0
90002ac0:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002ac2:	68fb      	ldr	r3, [r7, #12]
90002ac4:	68ba      	ldr	r2, [r7, #8]
90002ac6:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002ac8:	68fb      	ldr	r3, [r7, #12]
90002aca:	687a      	ldr	r2, [r7, #4]
90002acc:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002ace:	4b19      	ldr	r3, [pc, #100]	@ (90002b34 <MX_SDRAM_BANK2_Init+0x90>)
90002ad0:	2240      	movs	r2, #64	@ 0x40
90002ad2:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002ad4:	68fb      	ldr	r3, [r7, #12]
90002ad6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002ada:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002adc:	68fb      	ldr	r3, [r7, #12]
90002ade:	2200      	movs	r2, #0
90002ae0:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002ae2:	68fb      	ldr	r3, [r7, #12]
90002ae4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002ae8:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002aea:	68fb      	ldr	r3, [r7, #12]
90002aec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002af0:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002af2:	68fb      	ldr	r3, [r7, #12]
90002af4:	2200      	movs	r2, #0
90002af6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002af8:	2302      	movs	r3, #2
90002afa:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002afc:	2307      	movs	r3, #7
90002afe:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002b00:	2304      	movs	r3, #4
90002b02:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002b04:	2307      	movs	r3, #7
90002b06:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002b08:	2302      	movs	r3, #2
90002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002b0c:	2302      	movs	r3, #2
90002b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002b10:	2302      	movs	r3, #2
90002b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002b14:	f107 0314 	add.w	r3, r7, #20
90002b18:	4619      	mov	r1, r3
90002b1a:	68f8      	ldr	r0, [r7, #12]
90002b1c:	f006 fd74 	bl	90009608 <HAL_SDRAM_Init>
90002b20:	4603      	mov	r3, r0
90002b22:	2b00      	cmp	r3, #0
90002b24:	d001      	beq.n	90002b2a <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002b26:	2301      	movs	r3, #1
90002b28:	e000      	b.n	90002b2c <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002b2a:	2300      	movs	r3, #0
}
90002b2c:	4618      	mov	r0, r3
90002b2e:	3730      	adds	r7, #48	@ 0x30
90002b30:	46bd      	mov	sp, r7
90002b32:	bd80      	pop	{r7, pc}
90002b34:	20001100 	.word	0x20001100
90002b38:	52004140 	.word	0x52004140

90002b3c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002b3c:	b580      	push	{r7, lr}
90002b3e:	b08e      	sub	sp, #56	@ 0x38
90002b40:	af00      	add	r7, sp, #0
90002b42:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002b44:	4b73      	ldr	r3, [pc, #460]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002b4a:	4a72      	ldr	r2, [pc, #456]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002b50:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002b54:	4b6f      	ldr	r3, [pc, #444]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002b5e:	623b      	str	r3, [r7, #32]
90002b60:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002b62:	4b6c      	ldr	r3, [pc, #432]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002b68:	4a6a      	ldr	r2, [pc, #424]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b6a:	f043 0301 	orr.w	r3, r3, #1
90002b6e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002b72:	4b68      	ldr	r3, [pc, #416]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002b78:	f003 0301 	and.w	r3, r3, #1
90002b7c:	61fb      	str	r3, [r7, #28]
90002b7e:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002b80:	4b64      	ldr	r3, [pc, #400]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b86:	4a63      	ldr	r2, [pc, #396]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b88:	f043 0308 	orr.w	r3, r3, #8
90002b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b90:	4b60      	ldr	r3, [pc, #384]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b96:	f003 0308 	and.w	r3, r3, #8
90002b9a:	61bb      	str	r3, [r7, #24]
90002b9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002b9e:	4b5d      	ldr	r3, [pc, #372]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ba4:	4a5b      	ldr	r2, [pc, #364]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002ba6:	f043 0310 	orr.w	r3, r3, #16
90002baa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002bae:	4b59      	ldr	r3, [pc, #356]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bb4:	f003 0310 	and.w	r3, r3, #16
90002bb8:	617b      	str	r3, [r7, #20]
90002bba:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002bbc:	4b55      	ldr	r3, [pc, #340]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bc2:	4a54      	ldr	r2, [pc, #336]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002bc4:	f043 0320 	orr.w	r3, r3, #32
90002bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002bcc:	4b51      	ldr	r3, [pc, #324]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bd2:	f003 0320 	and.w	r3, r3, #32
90002bd6:	613b      	str	r3, [r7, #16]
90002bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002bda:	4b4e      	ldr	r3, [pc, #312]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002be0:	4a4c      	ldr	r2, [pc, #304]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002be6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002bea:	4b4a      	ldr	r3, [pc, #296]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002bf4:	60fb      	str	r3, [r7, #12]
90002bf6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002bf8:	4b46      	ldr	r3, [pc, #280]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bfe:	4a45      	ldr	r2, [pc, #276]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002c04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002c08:	4b42      	ldr	r3, [pc, #264]	@ (90002d14 <SDRAM_MspInit+0x1d8>)
90002c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002c12:	60bb      	str	r3, [r7, #8]
90002c14:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002c16:	2302      	movs	r3, #2
90002c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002c1a:	2301      	movs	r3, #1
90002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002c1e:	2303      	movs	r3, #3
90002c20:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002c22:	230c      	movs	r3, #12
90002c24:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002c26:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c30:	4619      	mov	r1, r3
90002c32:	4839      	ldr	r0, [pc, #228]	@ (90002d18 <SDRAM_MspInit+0x1dc>)
90002c34:	f000 ff18 	bl	90003a68 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002c38:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c42:	4619      	mov	r1, r3
90002c44:	4835      	ldr	r0, [pc, #212]	@ (90002d1c <SDRAM_MspInit+0x1e0>)
90002c46:	f000 ff0f 	bl	90003a68 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002c4a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c54:	4619      	mov	r1, r3
90002c56:	4832      	ldr	r0, [pc, #200]	@ (90002d20 <SDRAM_MspInit+0x1e4>)
90002c58:	f000 ff06 	bl	90003a68 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002c5c:	f248 1333 	movw	r3, #33075	@ 0x8133
90002c60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c66:	4619      	mov	r1, r3
90002c68:	482e      	ldr	r0, [pc, #184]	@ (90002d24 <SDRAM_MspInit+0x1e8>)
90002c6a:	f000 fefd 	bl	90003a68 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002c6e:	23e0      	movs	r3, #224	@ 0xe0
90002c70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c76:	4619      	mov	r1, r3
90002c78:	482b      	ldr	r0, [pc, #172]	@ (90002d28 <SDRAM_MspInit+0x1ec>)
90002c7a:	f000 fef5 	bl	90003a68 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002c7e:	4b2b      	ldr	r3, [pc, #172]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002c80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90002c84:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002c86:	4b29      	ldr	r3, [pc, #164]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90002c8c:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002c8e:	4b27      	ldr	r3, [pc, #156]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002c90:	2280      	movs	r2, #128	@ 0x80
90002c92:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002c94:	4b25      	ldr	r3, [pc, #148]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002c96:	2200      	movs	r2, #0
90002c98:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002c9a:	4b24      	ldr	r3, [pc, #144]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002c9c:	f240 2202 	movw	r2, #514	@ 0x202
90002ca0:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002ca2:	4b22      	ldr	r3, [pc, #136]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002ca4:	f640 0208 	movw	r2, #2056	@ 0x808
90002ca8:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002caa:	4b20      	ldr	r3, [pc, #128]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cac:	2220      	movs	r2, #32
90002cae:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002cb0:	4b1e      	ldr	r3, [pc, #120]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cb2:	2280      	movs	r2, #128	@ 0x80
90002cb4:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002cb6:	4b1d      	ldr	r3, [pc, #116]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90002cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002cbe:	4b1b      	ldr	r3, [pc, #108]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cc0:	2200      	movs	r2, #0
90002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002cc4:	4b19      	ldr	r3, [pc, #100]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cc6:	2200      	movs	r2, #0
90002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002cca:	4b18      	ldr	r3, [pc, #96]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002ccc:	2280      	movs	r2, #128	@ 0x80
90002cce:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002cd0:	4b16      	ldr	r3, [pc, #88]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cd2:	2200      	movs	r2, #0
90002cd4:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002cd6:	4b15      	ldr	r3, [pc, #84]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cd8:	2200      	movs	r2, #0
90002cda:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002cdc:	4b13      	ldr	r3, [pc, #76]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cde:	4a14      	ldr	r2, [pc, #80]	@ (90002d30 <SDRAM_MspInit+0x1f4>)
90002ce0:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002ce2:	4b14      	ldr	r3, [pc, #80]	@ (90002d34 <SDRAM_MspInit+0x1f8>)
90002ce4:	4a11      	ldr	r2, [pc, #68]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
90002ce8:	4b10      	ldr	r3, [pc, #64]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cea:	4a12      	ldr	r2, [pc, #72]	@ (90002d34 <SDRAM_MspInit+0x1f8>)
90002cec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002cee:	480f      	ldr	r0, [pc, #60]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cf0:	f004 f85c 	bl	90006dac <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002cf4:	480d      	ldr	r0, [pc, #52]	@ (90002d2c <SDRAM_MspInit+0x1f0>)
90002cf6:	f004 f80d 	bl	90006d14 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002cfa:	2200      	movs	r2, #0
90002cfc:	210f      	movs	r1, #15
90002cfe:	207a      	movs	r0, #122	@ 0x7a
90002d00:	f000 fb2f 	bl	90003362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002d04:	207a      	movs	r0, #122	@ 0x7a
90002d06:	f000 fb46 	bl	90003396 <HAL_NVIC_EnableIRQ>
}
90002d0a:	bf00      	nop
90002d0c:	3738      	adds	r7, #56	@ 0x38
90002d0e:	46bd      	mov	sp, r7
90002d10:	bd80      	pop	{r7, pc}
90002d12:	bf00      	nop
90002d14:	58024400 	.word	0x58024400
90002d18:	58020c00 	.word	0x58020c00
90002d1c:	58021000 	.word	0x58021000
90002d20:	58021400 	.word	0x58021400
90002d24:	58021800 	.word	0x58021800
90002d28:	58021c00 	.word	0x58021c00
90002d2c:	20001154 	.word	0x20001154
90002d30:	52000040 	.word	0x52000040
90002d34:	20001100 	.word	0x20001100

90002d38 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90002d38:	b580      	push	{r7, lr}
90002d3a:	b088      	sub	sp, #32
90002d3c:	af00      	add	r7, sp, #0
90002d3e:	6078      	str	r0, [r7, #4]
90002d40:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002d42:	2300      	movs	r3, #0
90002d44:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90002d46:	687b      	ldr	r3, [r7, #4]
90002d48:	2b00      	cmp	r3, #0
90002d4a:	d11c      	bne.n	90002d86 <BSP_TS_Init+0x4e>
90002d4c:	683b      	ldr	r3, [r7, #0]
90002d4e:	681b      	ldr	r3, [r3, #0]
90002d50:	2b00      	cmp	r3, #0
90002d52:	d018      	beq.n	90002d86 <BSP_TS_Init+0x4e>
90002d54:	683b      	ldr	r3, [r7, #0]
90002d56:	681b      	ldr	r3, [r3, #0]
90002d58:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
90002d5c:	d813      	bhi.n	90002d86 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002d5e:	683b      	ldr	r3, [r7, #0]
90002d60:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90002d62:	2b00      	cmp	r3, #0
90002d64:	d00f      	beq.n	90002d86 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002d66:	683b      	ldr	r3, [r7, #0]
90002d68:	685b      	ldr	r3, [r3, #4]
90002d6a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
90002d6e:	d80a      	bhi.n	90002d86 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90002d70:	683b      	ldr	r3, [r7, #0]
90002d72:	68da      	ldr	r2, [r3, #12]
90002d74:	683b      	ldr	r3, [r7, #0]
90002d76:	6819      	ldr	r1, [r3, #0]
90002d78:	683b      	ldr	r3, [r7, #0]
90002d7a:	685b      	ldr	r3, [r3, #4]
90002d7c:	428b      	cmp	r3, r1
90002d7e:	bf28      	it	cs
90002d80:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002d82:	429a      	cmp	r2, r3
90002d84:	d903      	bls.n	90002d8e <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002d86:	f06f 0301 	mvn.w	r3, #1
90002d8a:	61fb      	str	r3, [r7, #28]
90002d8c:	e06e      	b.n	90002e6c <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
90002d8e:	6878      	ldr	r0, [r7, #4]
90002d90:	f000 f878 	bl	90002e84 <FT5336_Probe>
90002d94:	4603      	mov	r3, r0
90002d96:	2b00      	cmp	r3, #0
90002d98:	d003      	beq.n	90002da2 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
90002d9a:	f04f 33ff 	mov.w	r3, #4294967295
90002d9e:	61fb      	str	r3, [r7, #28]
90002da0:	e064      	b.n	90002e6c <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90002da2:	683b      	ldr	r3, [r7, #0]
90002da4:	681a      	ldr	r2, [r3, #0]
90002da6:	4934      	ldr	r1, [pc, #208]	@ (90002e78 <BSP_TS_Init+0x140>)
90002da8:	687b      	ldr	r3, [r7, #4]
90002daa:	019b      	lsls	r3, r3, #6
90002dac:	440b      	add	r3, r1
90002dae:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
90002db0:	683b      	ldr	r3, [r7, #0]
90002db2:	685a      	ldr	r2, [r3, #4]
90002db4:	4930      	ldr	r1, [pc, #192]	@ (90002e78 <BSP_TS_Init+0x140>)
90002db6:	687b      	ldr	r3, [r7, #4]
90002db8:	019b      	lsls	r3, r3, #6
90002dba:	440b      	add	r3, r1
90002dbc:	3304      	adds	r3, #4
90002dbe:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
90002dc0:	683b      	ldr	r3, [r7, #0]
90002dc2:	689a      	ldr	r2, [r3, #8]
90002dc4:	492c      	ldr	r1, [pc, #176]	@ (90002e78 <BSP_TS_Init+0x140>)
90002dc6:	687b      	ldr	r3, [r7, #4]
90002dc8:	019b      	lsls	r3, r3, #6
90002dca:	440b      	add	r3, r1
90002dcc:	3308      	adds	r3, #8
90002dce:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
90002dd0:	683b      	ldr	r3, [r7, #0]
90002dd2:	68da      	ldr	r2, [r3, #12]
90002dd4:	4928      	ldr	r1, [pc, #160]	@ (90002e78 <BSP_TS_Init+0x140>)
90002dd6:	687b      	ldr	r3, [r7, #4]
90002dd8:	019b      	lsls	r3, r3, #6
90002dda:	440b      	add	r3, r1
90002ddc:	330c      	adds	r3, #12
90002dde:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90002de0:	4b26      	ldr	r3, [pc, #152]	@ (90002e7c <BSP_TS_Init+0x144>)
90002de2:	681b      	ldr	r3, [r3, #0]
90002de4:	69db      	ldr	r3, [r3, #28]
90002de6:	4926      	ldr	r1, [pc, #152]	@ (90002e80 <BSP_TS_Init+0x148>)
90002de8:	687a      	ldr	r2, [r7, #4]
90002dea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90002dee:	f107 010c 	add.w	r1, r7, #12
90002df2:	4610      	mov	r0, r2
90002df4:	4798      	blx	r3
90002df6:	4603      	mov	r3, r0
90002df8:	2b00      	cmp	r3, #0
90002dfa:	da03      	bge.n	90002e04 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002dfc:	f06f 0304 	mvn.w	r3, #4
90002e00:	61fb      	str	r3, [r7, #28]
90002e02:	e033      	b.n	90002e6c <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90002e04:	693a      	ldr	r2, [r7, #16]
90002e06:	491c      	ldr	r1, [pc, #112]	@ (90002e78 <BSP_TS_Init+0x140>)
90002e08:	687b      	ldr	r3, [r7, #4]
90002e0a:	019b      	lsls	r3, r3, #6
90002e0c:	440b      	add	r3, r1
90002e0e:	3310      	adds	r3, #16
90002e10:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
90002e12:	697a      	ldr	r2, [r7, #20]
90002e14:	4918      	ldr	r1, [pc, #96]	@ (90002e78 <BSP_TS_Init+0x140>)
90002e16:	687b      	ldr	r3, [r7, #4]
90002e18:	019b      	lsls	r3, r3, #6
90002e1a:	440b      	add	r3, r1
90002e1c:	3314      	adds	r3, #20
90002e1e:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
90002e20:	2300      	movs	r3, #0
90002e22:	61bb      	str	r3, [r7, #24]
90002e24:	e01f      	b.n	90002e66 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90002e26:	683b      	ldr	r3, [r7, #0]
90002e28:	681a      	ldr	r2, [r3, #0]
90002e2a:	683b      	ldr	r3, [r7, #0]
90002e2c:	68db      	ldr	r3, [r3, #12]
90002e2e:	4413      	add	r3, r2
90002e30:	1c5a      	adds	r2, r3, #1
90002e32:	4811      	ldr	r0, [pc, #68]	@ (90002e78 <BSP_TS_Init+0x140>)
90002e34:	687b      	ldr	r3, [r7, #4]
90002e36:	0119      	lsls	r1, r3, #4
90002e38:	69bb      	ldr	r3, [r7, #24]
90002e3a:	440b      	add	r3, r1
90002e3c:	3306      	adds	r3, #6
90002e3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90002e42:	683b      	ldr	r3, [r7, #0]
90002e44:	685a      	ldr	r2, [r3, #4]
90002e46:	683b      	ldr	r3, [r7, #0]
90002e48:	68db      	ldr	r3, [r3, #12]
90002e4a:	4413      	add	r3, r2
90002e4c:	1c5a      	adds	r2, r3, #1
90002e4e:	480a      	ldr	r0, [pc, #40]	@ (90002e78 <BSP_TS_Init+0x140>)
90002e50:	687b      	ldr	r3, [r7, #4]
90002e52:	0119      	lsls	r1, r3, #4
90002e54:	69bb      	ldr	r3, [r7, #24]
90002e56:	440b      	add	r3, r1
90002e58:	330a      	adds	r3, #10
90002e5a:	009b      	lsls	r3, r3, #2
90002e5c:	4403      	add	r3, r0
90002e5e:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
90002e60:	69bb      	ldr	r3, [r7, #24]
90002e62:	3301      	adds	r3, #1
90002e64:	61bb      	str	r3, [r7, #24]
90002e66:	69bb      	ldr	r3, [r7, #24]
90002e68:	2b04      	cmp	r3, #4
90002e6a:	d9dc      	bls.n	90002e26 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
90002e6c:	69fb      	ldr	r3, [r7, #28]
}
90002e6e:	4618      	mov	r0, r3
90002e70:	3720      	adds	r7, #32
90002e72:	46bd      	mov	sp, r7
90002e74:	bd80      	pop	{r7, pc}
90002e76:	bf00      	nop
90002e78:	200011c8 	.word	0x200011c8
90002e7c:	200011c0 	.word	0x200011c0
90002e80:	200011c4 	.word	0x200011c4

90002e84 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
90002e84:	b580      	push	{r7, lr}
90002e86:	b08a      	sub	sp, #40	@ 0x28
90002e88:	af00      	add	r7, sp, #0
90002e8a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002e8c:	2300      	movs	r3, #0
90002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
90002e90:	2300      	movs	r3, #0
90002e92:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90002e94:	2370      	movs	r3, #112	@ 0x70
90002e96:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
90002e98:	4b23      	ldr	r3, [pc, #140]	@ (90002f28 <FT5336_Probe+0xa4>)
90002e9a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90002e9c:	4b23      	ldr	r3, [pc, #140]	@ (90002f2c <FT5336_Probe+0xa8>)
90002e9e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90002ea0:	4b23      	ldr	r3, [pc, #140]	@ (90002f30 <FT5336_Probe+0xac>)
90002ea2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90002ea4:	4b23      	ldr	r3, [pc, #140]	@ (90002f34 <FT5336_Probe+0xb0>)
90002ea6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
90002ea8:	4b23      	ldr	r3, [pc, #140]	@ (90002f38 <FT5336_Probe+0xb4>)
90002eaa:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90002eac:	f107 030c 	add.w	r3, r7, #12
90002eb0:	4619      	mov	r1, r3
90002eb2:	4822      	ldr	r0, [pc, #136]	@ (90002f3c <FT5336_Probe+0xb8>)
90002eb4:	f7fd fdc0 	bl	90000a38 <FT5336_RegisterBusIO>
90002eb8:	4603      	mov	r3, r0
90002eba:	2b00      	cmp	r3, #0
90002ebc:	d003      	beq.n	90002ec6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
90002ebe:	f06f 0307 	mvn.w	r3, #7
90002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
90002ec4:	e02a      	b.n	90002f1c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90002ec6:	f107 0308 	add.w	r3, r7, #8
90002eca:	4619      	mov	r1, r3
90002ecc:	481b      	ldr	r0, [pc, #108]	@ (90002f3c <FT5336_Probe+0xb8>)
90002ece:	f7fd fead 	bl	90000c2c <FT5336_ReadID>
90002ed2:	4603      	mov	r3, r0
90002ed4:	2b00      	cmp	r3, #0
90002ed6:	d003      	beq.n	90002ee0 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
90002ed8:	f06f 0304 	mvn.w	r3, #4
90002edc:	627b      	str	r3, [r7, #36]	@ 0x24
90002ede:	e01d      	b.n	90002f1c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
90002ee0:	68bb      	ldr	r3, [r7, #8]
90002ee2:	2b51      	cmp	r3, #81	@ 0x51
90002ee4:	d003      	beq.n	90002eee <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
90002ee6:	f06f 0306 	mvn.w	r3, #6
90002eea:	627b      	str	r3, [r7, #36]	@ 0x24
90002eec:	e016      	b.n	90002f1c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
90002eee:	4a14      	ldr	r2, [pc, #80]	@ (90002f40 <FT5336_Probe+0xbc>)
90002ef0:	687b      	ldr	r3, [r7, #4]
90002ef2:	4912      	ldr	r1, [pc, #72]	@ (90002f3c <FT5336_Probe+0xb8>)
90002ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90002ef8:	4b12      	ldr	r3, [pc, #72]	@ (90002f44 <FT5336_Probe+0xc0>)
90002efa:	4a13      	ldr	r2, [pc, #76]	@ (90002f48 <FT5336_Probe+0xc4>)
90002efc:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90002efe:	4b11      	ldr	r3, [pc, #68]	@ (90002f44 <FT5336_Probe+0xc0>)
90002f00:	681b      	ldr	r3, [r3, #0]
90002f02:	681b      	ldr	r3, [r3, #0]
90002f04:	490e      	ldr	r1, [pc, #56]	@ (90002f40 <FT5336_Probe+0xbc>)
90002f06:	687a      	ldr	r2, [r7, #4]
90002f08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90002f0c:	4610      	mov	r0, r2
90002f0e:	4798      	blx	r3
90002f10:	4603      	mov	r3, r0
90002f12:	2b00      	cmp	r3, #0
90002f14:	d002      	beq.n	90002f1c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
90002f16:	f06f 0304 	mvn.w	r3, #4
90002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
90002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
90002f1e:	4618      	mov	r0, r3
90002f20:	3728      	adds	r7, #40	@ 0x28
90002f22:	46bd      	mov	sp, r7
90002f24:	bd80      	pop	{r7, pc}
90002f26:	bf00      	nop
90002f28:	900013cd 	.word	0x900013cd
90002f2c:	90001441 	.word	0x90001441
90002f30:	90001569 	.word	0x90001569
90002f34:	9000150d 	.word	0x9000150d
90002f38:	900015c5 	.word	0x900015c5
90002f3c:	20001208 	.word	0x20001208
90002f40:	200011c4 	.word	0x200011c4
90002f44:	200011c0 	.word	0x200011c0
90002f48:	20000000 	.word	0x20000000

90002f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90002f4c:	b480      	push	{r7}
90002f4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90002f50:	4b29      	ldr	r3, [pc, #164]	@ (90002ff8 <SystemInit+0xac>)
90002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90002f56:	4a28      	ldr	r2, [pc, #160]	@ (90002ff8 <SystemInit+0xac>)
90002f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90002f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90002f60:	4b26      	ldr	r3, [pc, #152]	@ (90002ffc <SystemInit+0xb0>)
90002f62:	681b      	ldr	r3, [r3, #0]
90002f64:	4a25      	ldr	r2, [pc, #148]	@ (90002ffc <SystemInit+0xb0>)
90002f66:	f043 0301 	orr.w	r3, r3, #1
90002f6a:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90002f6c:	4b23      	ldr	r3, [pc, #140]	@ (90002ffc <SystemInit+0xb0>)
90002f6e:	2200      	movs	r2, #0
90002f70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90002f72:	4b22      	ldr	r3, [pc, #136]	@ (90002ffc <SystemInit+0xb0>)
90002f74:	681a      	ldr	r2, [r3, #0]
90002f76:	4921      	ldr	r1, [pc, #132]	@ (90002ffc <SystemInit+0xb0>)
90002f78:	4b21      	ldr	r3, [pc, #132]	@ (90003000 <SystemInit+0xb4>)
90002f7a:	4013      	ands	r3, r2
90002f7c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90002f7e:	4b1f      	ldr	r3, [pc, #124]	@ (90002ffc <SystemInit+0xb0>)
90002f80:	2200      	movs	r2, #0
90002f82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90002f84:	4b1d      	ldr	r3, [pc, #116]	@ (90002ffc <SystemInit+0xb0>)
90002f86:	2200      	movs	r2, #0
90002f88:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90002f8a:	4b1c      	ldr	r3, [pc, #112]	@ (90002ffc <SystemInit+0xb0>)
90002f8c:	2200      	movs	r2, #0
90002f8e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90002f90:	4b1a      	ldr	r3, [pc, #104]	@ (90002ffc <SystemInit+0xb0>)
90002f92:	2200      	movs	r2, #0
90002f94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90002f96:	4b19      	ldr	r3, [pc, #100]	@ (90002ffc <SystemInit+0xb0>)
90002f98:	2200      	movs	r2, #0
90002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90002f9c:	4b17      	ldr	r3, [pc, #92]	@ (90002ffc <SystemInit+0xb0>)
90002f9e:	2200      	movs	r2, #0
90002fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90002fa2:	4b16      	ldr	r3, [pc, #88]	@ (90002ffc <SystemInit+0xb0>)
90002fa4:	2200      	movs	r2, #0
90002fa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90002fa8:	4b14      	ldr	r3, [pc, #80]	@ (90002ffc <SystemInit+0xb0>)
90002faa:	2200      	movs	r2, #0
90002fac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
90002fae:	4b13      	ldr	r3, [pc, #76]	@ (90002ffc <SystemInit+0xb0>)
90002fb0:	2200      	movs	r2, #0
90002fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90002fb4:	4b11      	ldr	r3, [pc, #68]	@ (90002ffc <SystemInit+0xb0>)
90002fb6:	2200      	movs	r2, #0
90002fb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90002fba:	4b10      	ldr	r3, [pc, #64]	@ (90002ffc <SystemInit+0xb0>)
90002fbc:	2200      	movs	r2, #0
90002fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90002fc0:	4b0e      	ldr	r3, [pc, #56]	@ (90002ffc <SystemInit+0xb0>)
90002fc2:	681b      	ldr	r3, [r3, #0]
90002fc4:	4a0d      	ldr	r2, [pc, #52]	@ (90002ffc <SystemInit+0xb0>)
90002fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90002fca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (90002ffc <SystemInit+0xb0>)
90002fce:	2200      	movs	r2, #0
90002fd0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90002fd2:	4b0c      	ldr	r3, [pc, #48]	@ (90003004 <SystemInit+0xb8>)
90002fd4:	681a      	ldr	r2, [r3, #0]
90002fd6:	4b0c      	ldr	r3, [pc, #48]	@ (90003008 <SystemInit+0xbc>)
90002fd8:	4013      	ands	r3, r2
90002fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90002fde:	d202      	bcs.n	90002fe6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90002fe0:	4b0a      	ldr	r3, [pc, #40]	@ (9000300c <SystemInit+0xc0>)
90002fe2:	2201      	movs	r2, #1
90002fe4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90002fe6:	4b04      	ldr	r3, [pc, #16]	@ (90002ff8 <SystemInit+0xac>)
90002fe8:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90002fec:	609a      	str	r2, [r3, #8]
#endif  


}
90002fee:	bf00      	nop
90002ff0:	46bd      	mov	sp, r7
90002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ff6:	4770      	bx	lr
90002ff8:	e000ed00 	.word	0xe000ed00
90002ffc:	58024400 	.word	0x58024400
90003000:	eaf6ed7f 	.word	0xeaf6ed7f
90003004:	5c001000 	.word	0x5c001000
90003008:	ffff0000 	.word	0xffff0000
9000300c:	51008108 	.word	0x51008108

90003010 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90003010:	b480      	push	{r7}
90003012:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90003014:	4b09      	ldr	r3, [pc, #36]	@ (9000303c <ExitRun0Mode+0x2c>)
90003016:	68db      	ldr	r3, [r3, #12]
90003018:	4a08      	ldr	r2, [pc, #32]	@ (9000303c <ExitRun0Mode+0x2c>)
9000301a:	f043 0302 	orr.w	r3, r3, #2
9000301e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
90003020:	bf00      	nop
90003022:	4b06      	ldr	r3, [pc, #24]	@ (9000303c <ExitRun0Mode+0x2c>)
90003024:	685b      	ldr	r3, [r3, #4]
90003026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000302a:	2b00      	cmp	r3, #0
9000302c:	d0f9      	beq.n	90003022 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
9000302e:	bf00      	nop
90003030:	bf00      	nop
90003032:	46bd      	mov	sp, r7
90003034:	f85d 7b04 	ldr.w	r7, [sp], #4
90003038:	4770      	bx	lr
9000303a:	bf00      	nop
9000303c:	58024800 	.word	0x58024800

90003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90003040:	b580      	push	{r7, lr}
90003042:	b082      	sub	sp, #8
90003044:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90003046:	2003      	movs	r0, #3
90003048:	f000 f980 	bl	9000334c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000304c:	f004 fdae 	bl	90007bac <HAL_RCC_GetSysClockFreq>
90003050:	4602      	mov	r2, r0
90003052:	4b15      	ldr	r3, [pc, #84]	@ (900030a8 <HAL_Init+0x68>)
90003054:	699b      	ldr	r3, [r3, #24]
90003056:	0a1b      	lsrs	r3, r3, #8
90003058:	f003 030f 	and.w	r3, r3, #15
9000305c:	4913      	ldr	r1, [pc, #76]	@ (900030ac <HAL_Init+0x6c>)
9000305e:	5ccb      	ldrb	r3, [r1, r3]
90003060:	f003 031f 	and.w	r3, r3, #31
90003064:	fa22 f303 	lsr.w	r3, r2, r3
90003068:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000306a:	4b0f      	ldr	r3, [pc, #60]	@ (900030a8 <HAL_Init+0x68>)
9000306c:	699b      	ldr	r3, [r3, #24]
9000306e:	f003 030f 	and.w	r3, r3, #15
90003072:	4a0e      	ldr	r2, [pc, #56]	@ (900030ac <HAL_Init+0x6c>)
90003074:	5cd3      	ldrb	r3, [r2, r3]
90003076:	f003 031f 	and.w	r3, r3, #31
9000307a:	687a      	ldr	r2, [r7, #4]
9000307c:	fa22 f303 	lsr.w	r3, r2, r3
90003080:	4a0b      	ldr	r2, [pc, #44]	@ (900030b0 <HAL_Init+0x70>)
90003082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003084:	4a0b      	ldr	r2, [pc, #44]	@ (900030b4 <HAL_Init+0x74>)
90003086:	687b      	ldr	r3, [r7, #4]
90003088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000308a:	200f      	movs	r0, #15
9000308c:	f000 f81c 	bl	900030c8 <HAL_InitTick>
90003090:	4603      	mov	r3, r0
90003092:	2b00      	cmp	r3, #0
90003094:	d001      	beq.n	9000309a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90003096:	2301      	movs	r3, #1
90003098:	e002      	b.n	900030a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
9000309a:	f000 f80d 	bl	900030b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000309e:	2300      	movs	r3, #0
}
900030a0:	4618      	mov	r0, r3
900030a2:	3708      	adds	r7, #8
900030a4:	46bd      	mov	sp, r7
900030a6:	bd80      	pop	{r7, pc}
900030a8:	58024400 	.word	0x58024400
900030ac:	9000ab8c 	.word	0x9000ab8c
900030b0:	2000003c 	.word	0x2000003c
900030b4:	20000038 	.word	0x20000038

900030b8 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
900030b8:	b480      	push	{r7}
900030ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
900030bc:	bf00      	nop
900030be:	46bd      	mov	sp, r7
900030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900030c4:	4770      	bx	lr
	...

900030c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900030c8:	b580      	push	{r7, lr}
900030ca:	b082      	sub	sp, #8
900030cc:	af00      	add	r7, sp, #0
900030ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
900030d0:	4b15      	ldr	r3, [pc, #84]	@ (90003128 <HAL_InitTick+0x60>)
900030d2:	781b      	ldrb	r3, [r3, #0]
900030d4:	2b00      	cmp	r3, #0
900030d6:	d101      	bne.n	900030dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
900030d8:	2301      	movs	r3, #1
900030da:	e021      	b.n	90003120 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
900030dc:	4b13      	ldr	r3, [pc, #76]	@ (9000312c <HAL_InitTick+0x64>)
900030de:	681a      	ldr	r2, [r3, #0]
900030e0:	4b11      	ldr	r3, [pc, #68]	@ (90003128 <HAL_InitTick+0x60>)
900030e2:	781b      	ldrb	r3, [r3, #0]
900030e4:	4619      	mov	r1, r3
900030e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
900030ea:	fbb3 f3f1 	udiv	r3, r3, r1
900030ee:	fbb2 f3f3 	udiv	r3, r2, r3
900030f2:	4618      	mov	r0, r3
900030f4:	f000 f95d 	bl	900033b2 <HAL_SYSTICK_Config>
900030f8:	4603      	mov	r3, r0
900030fa:	2b00      	cmp	r3, #0
900030fc:	d001      	beq.n	90003102 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
900030fe:	2301      	movs	r3, #1
90003100:	e00e      	b.n	90003120 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90003102:	687b      	ldr	r3, [r7, #4]
90003104:	2b0f      	cmp	r3, #15
90003106:	d80a      	bhi.n	9000311e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90003108:	2200      	movs	r2, #0
9000310a:	6879      	ldr	r1, [r7, #4]
9000310c:	f04f 30ff 	mov.w	r0, #4294967295
90003110:	f000 f927 	bl	90003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003114:	4a06      	ldr	r2, [pc, #24]	@ (90003130 <HAL_InitTick+0x68>)
90003116:	687b      	ldr	r3, [r7, #4]
90003118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000311a:	2300      	movs	r3, #0
9000311c:	e000      	b.n	90003120 <HAL_InitTick+0x58>
    return HAL_ERROR;
9000311e:	2301      	movs	r3, #1
}
90003120:	4618      	mov	r0, r3
90003122:	3708      	adds	r7, #8
90003124:	46bd      	mov	sp, r7
90003126:	bd80      	pop	{r7, pc}
90003128:	20000044 	.word	0x20000044
9000312c:	20000038 	.word	0x20000038
90003130:	20000040 	.word	0x20000040

90003134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003134:	b480      	push	{r7}
90003136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90003138:	4b06      	ldr	r3, [pc, #24]	@ (90003154 <HAL_IncTick+0x20>)
9000313a:	781b      	ldrb	r3, [r3, #0]
9000313c:	461a      	mov	r2, r3
9000313e:	4b06      	ldr	r3, [pc, #24]	@ (90003158 <HAL_IncTick+0x24>)
90003140:	681b      	ldr	r3, [r3, #0]
90003142:	4413      	add	r3, r2
90003144:	4a04      	ldr	r2, [pc, #16]	@ (90003158 <HAL_IncTick+0x24>)
90003146:	6013      	str	r3, [r2, #0]
}
90003148:	bf00      	nop
9000314a:	46bd      	mov	sp, r7
9000314c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003150:	4770      	bx	lr
90003152:	bf00      	nop
90003154:	20000044 	.word	0x20000044
90003158:	20001230 	.word	0x20001230

9000315c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
9000315c:	b480      	push	{r7}
9000315e:	af00      	add	r7, sp, #0
  return uwTick;
90003160:	4b03      	ldr	r3, [pc, #12]	@ (90003170 <HAL_GetTick+0x14>)
90003162:	681b      	ldr	r3, [r3, #0]
}
90003164:	4618      	mov	r0, r3
90003166:	46bd      	mov	sp, r7
90003168:	f85d 7b04 	ldr.w	r7, [sp], #4
9000316c:	4770      	bx	lr
9000316e:	bf00      	nop
90003170:	20001230 	.word	0x20001230

90003174 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003174:	b480      	push	{r7}
90003176:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003178:	4b03      	ldr	r3, [pc, #12]	@ (90003188 <HAL_GetREVID+0x14>)
9000317a:	681b      	ldr	r3, [r3, #0]
9000317c:	0c1b      	lsrs	r3, r3, #16
}
9000317e:	4618      	mov	r0, r3
90003180:	46bd      	mov	sp, r7
90003182:	f85d 7b04 	ldr.w	r7, [sp], #4
90003186:	4770      	bx	lr
90003188:	5c001000 	.word	0x5c001000

9000318c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
9000318c:	b480      	push	{r7}
9000318e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90003190:	4b05      	ldr	r3, [pc, #20]	@ (900031a8 <HAL_EnableCompensationCell+0x1c>)
90003192:	6a1b      	ldr	r3, [r3, #32]
90003194:	4a04      	ldr	r2, [pc, #16]	@ (900031a8 <HAL_EnableCompensationCell+0x1c>)
90003196:	f043 0301 	orr.w	r3, r3, #1
9000319a:	6213      	str	r3, [r2, #32]
}
9000319c:	bf00      	nop
9000319e:	46bd      	mov	sp, r7
900031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900031a4:	4770      	bx	lr
900031a6:	bf00      	nop
900031a8:	58000400 	.word	0x58000400

900031ac <__NVIC_SetPriorityGrouping>:
{
900031ac:	b480      	push	{r7}
900031ae:	b085      	sub	sp, #20
900031b0:	af00      	add	r7, sp, #0
900031b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900031b4:	687b      	ldr	r3, [r7, #4]
900031b6:	f003 0307 	and.w	r3, r3, #7
900031ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900031bc:	4b0b      	ldr	r3, [pc, #44]	@ (900031ec <__NVIC_SetPriorityGrouping+0x40>)
900031be:	68db      	ldr	r3, [r3, #12]
900031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900031c2:	68ba      	ldr	r2, [r7, #8]
900031c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
900031c8:	4013      	ands	r3, r2
900031ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900031cc:	68fb      	ldr	r3, [r7, #12]
900031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900031d0:	68bb      	ldr	r3, [r7, #8]
900031d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900031d4:	4b06      	ldr	r3, [pc, #24]	@ (900031f0 <__NVIC_SetPriorityGrouping+0x44>)
900031d6:	4313      	orrs	r3, r2
900031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900031da:	4a04      	ldr	r2, [pc, #16]	@ (900031ec <__NVIC_SetPriorityGrouping+0x40>)
900031dc:	68bb      	ldr	r3, [r7, #8]
900031de:	60d3      	str	r3, [r2, #12]
}
900031e0:	bf00      	nop
900031e2:	3714      	adds	r7, #20
900031e4:	46bd      	mov	sp, r7
900031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900031ea:	4770      	bx	lr
900031ec:	e000ed00 	.word	0xe000ed00
900031f0:	05fa0000 	.word	0x05fa0000

900031f4 <__NVIC_GetPriorityGrouping>:
{
900031f4:	b480      	push	{r7}
900031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900031f8:	4b04      	ldr	r3, [pc, #16]	@ (9000320c <__NVIC_GetPriorityGrouping+0x18>)
900031fa:	68db      	ldr	r3, [r3, #12]
900031fc:	0a1b      	lsrs	r3, r3, #8
900031fe:	f003 0307 	and.w	r3, r3, #7
}
90003202:	4618      	mov	r0, r3
90003204:	46bd      	mov	sp, r7
90003206:	f85d 7b04 	ldr.w	r7, [sp], #4
9000320a:	4770      	bx	lr
9000320c:	e000ed00 	.word	0xe000ed00

90003210 <__NVIC_EnableIRQ>:
{
90003210:	b480      	push	{r7}
90003212:	b083      	sub	sp, #12
90003214:	af00      	add	r7, sp, #0
90003216:	4603      	mov	r3, r0
90003218:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
9000321a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000321e:	2b00      	cmp	r3, #0
90003220:	db0b      	blt.n	9000323a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90003222:	88fb      	ldrh	r3, [r7, #6]
90003224:	f003 021f 	and.w	r2, r3, #31
90003228:	4907      	ldr	r1, [pc, #28]	@ (90003248 <__NVIC_EnableIRQ+0x38>)
9000322a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000322e:	095b      	lsrs	r3, r3, #5
90003230:	2001      	movs	r0, #1
90003232:	fa00 f202 	lsl.w	r2, r0, r2
90003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
9000323a:	bf00      	nop
9000323c:	370c      	adds	r7, #12
9000323e:	46bd      	mov	sp, r7
90003240:	f85d 7b04 	ldr.w	r7, [sp], #4
90003244:	4770      	bx	lr
90003246:	bf00      	nop
90003248:	e000e100 	.word	0xe000e100

9000324c <__NVIC_SetPriority>:
{
9000324c:	b480      	push	{r7}
9000324e:	b083      	sub	sp, #12
90003250:	af00      	add	r7, sp, #0
90003252:	4603      	mov	r3, r0
90003254:	6039      	str	r1, [r7, #0]
90003256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000325c:	2b00      	cmp	r3, #0
9000325e:	db0a      	blt.n	90003276 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003260:	683b      	ldr	r3, [r7, #0]
90003262:	b2da      	uxtb	r2, r3
90003264:	490c      	ldr	r1, [pc, #48]	@ (90003298 <__NVIC_SetPriority+0x4c>)
90003266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000326a:	0112      	lsls	r2, r2, #4
9000326c:	b2d2      	uxtb	r2, r2
9000326e:	440b      	add	r3, r1
90003270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90003274:	e00a      	b.n	9000328c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003276:	683b      	ldr	r3, [r7, #0]
90003278:	b2da      	uxtb	r2, r3
9000327a:	4908      	ldr	r1, [pc, #32]	@ (9000329c <__NVIC_SetPriority+0x50>)
9000327c:	88fb      	ldrh	r3, [r7, #6]
9000327e:	f003 030f 	and.w	r3, r3, #15
90003282:	3b04      	subs	r3, #4
90003284:	0112      	lsls	r2, r2, #4
90003286:	b2d2      	uxtb	r2, r2
90003288:	440b      	add	r3, r1
9000328a:	761a      	strb	r2, [r3, #24]
}
9000328c:	bf00      	nop
9000328e:	370c      	adds	r7, #12
90003290:	46bd      	mov	sp, r7
90003292:	f85d 7b04 	ldr.w	r7, [sp], #4
90003296:	4770      	bx	lr
90003298:	e000e100 	.word	0xe000e100
9000329c:	e000ed00 	.word	0xe000ed00

900032a0 <NVIC_EncodePriority>:
{
900032a0:	b480      	push	{r7}
900032a2:	b089      	sub	sp, #36	@ 0x24
900032a4:	af00      	add	r7, sp, #0
900032a6:	60f8      	str	r0, [r7, #12]
900032a8:	60b9      	str	r1, [r7, #8]
900032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900032ac:	68fb      	ldr	r3, [r7, #12]
900032ae:	f003 0307 	and.w	r3, r3, #7
900032b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900032b4:	69fb      	ldr	r3, [r7, #28]
900032b6:	f1c3 0307 	rsb	r3, r3, #7
900032ba:	2b04      	cmp	r3, #4
900032bc:	bf28      	it	cs
900032be:	2304      	movcs	r3, #4
900032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900032c2:	69fb      	ldr	r3, [r7, #28]
900032c4:	3304      	adds	r3, #4
900032c6:	2b06      	cmp	r3, #6
900032c8:	d902      	bls.n	900032d0 <NVIC_EncodePriority+0x30>
900032ca:	69fb      	ldr	r3, [r7, #28]
900032cc:	3b03      	subs	r3, #3
900032ce:	e000      	b.n	900032d2 <NVIC_EncodePriority+0x32>
900032d0:	2300      	movs	r3, #0
900032d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900032d4:	f04f 32ff 	mov.w	r2, #4294967295
900032d8:	69bb      	ldr	r3, [r7, #24]
900032da:	fa02 f303 	lsl.w	r3, r2, r3
900032de:	43da      	mvns	r2, r3
900032e0:	68bb      	ldr	r3, [r7, #8]
900032e2:	401a      	ands	r2, r3
900032e4:	697b      	ldr	r3, [r7, #20]
900032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900032e8:	f04f 31ff 	mov.w	r1, #4294967295
900032ec:	697b      	ldr	r3, [r7, #20]
900032ee:	fa01 f303 	lsl.w	r3, r1, r3
900032f2:	43d9      	mvns	r1, r3
900032f4:	687b      	ldr	r3, [r7, #4]
900032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900032f8:	4313      	orrs	r3, r2
}
900032fa:	4618      	mov	r0, r3
900032fc:	3724      	adds	r7, #36	@ 0x24
900032fe:	46bd      	mov	sp, r7
90003300:	f85d 7b04 	ldr.w	r7, [sp], #4
90003304:	4770      	bx	lr
	...

90003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003308:	b580      	push	{r7, lr}
9000330a:	b082      	sub	sp, #8
9000330c:	af00      	add	r7, sp, #0
9000330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90003310:	687b      	ldr	r3, [r7, #4]
90003312:	3b01      	subs	r3, #1
90003314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90003318:	d301      	bcc.n	9000331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
9000331a:	2301      	movs	r3, #1
9000331c:	e00f      	b.n	9000333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000331e:	4a0a      	ldr	r2, [pc, #40]	@ (90003348 <SysTick_Config+0x40>)
90003320:	687b      	ldr	r3, [r7, #4]
90003322:	3b01      	subs	r3, #1
90003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90003326:	210f      	movs	r1, #15
90003328:	f04f 30ff 	mov.w	r0, #4294967295
9000332c:	f7ff ff8e 	bl	9000324c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90003330:	4b05      	ldr	r3, [pc, #20]	@ (90003348 <SysTick_Config+0x40>)
90003332:	2200      	movs	r2, #0
90003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90003336:	4b04      	ldr	r3, [pc, #16]	@ (90003348 <SysTick_Config+0x40>)
90003338:	2207      	movs	r2, #7
9000333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
9000333c:	2300      	movs	r3, #0
}
9000333e:	4618      	mov	r0, r3
90003340:	3708      	adds	r7, #8
90003342:	46bd      	mov	sp, r7
90003344:	bd80      	pop	{r7, pc}
90003346:	bf00      	nop
90003348:	e000e010 	.word	0xe000e010

9000334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
9000334c:	b580      	push	{r7, lr}
9000334e:	b082      	sub	sp, #8
90003350:	af00      	add	r7, sp, #0
90003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003354:	6878      	ldr	r0, [r7, #4]
90003356:	f7ff ff29 	bl	900031ac <__NVIC_SetPriorityGrouping>
}
9000335a:	bf00      	nop
9000335c:	3708      	adds	r7, #8
9000335e:	46bd      	mov	sp, r7
90003360:	bd80      	pop	{r7, pc}

90003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90003362:	b580      	push	{r7, lr}
90003364:	b086      	sub	sp, #24
90003366:	af00      	add	r7, sp, #0
90003368:	4603      	mov	r3, r0
9000336a:	60b9      	str	r1, [r7, #8]
9000336c:	607a      	str	r2, [r7, #4]
9000336e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003370:	f7ff ff40 	bl	900031f4 <__NVIC_GetPriorityGrouping>
90003374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003376:	687a      	ldr	r2, [r7, #4]
90003378:	68b9      	ldr	r1, [r7, #8]
9000337a:	6978      	ldr	r0, [r7, #20]
9000337c:	f7ff ff90 	bl	900032a0 <NVIC_EncodePriority>
90003380:	4602      	mov	r2, r0
90003382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003386:	4611      	mov	r1, r2
90003388:	4618      	mov	r0, r3
9000338a:	f7ff ff5f 	bl	9000324c <__NVIC_SetPriority>
}
9000338e:	bf00      	nop
90003390:	3718      	adds	r7, #24
90003392:	46bd      	mov	sp, r7
90003394:	bd80      	pop	{r7, pc}

90003396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003396:	b580      	push	{r7, lr}
90003398:	b082      	sub	sp, #8
9000339a:	af00      	add	r7, sp, #0
9000339c:	4603      	mov	r3, r0
9000339e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900033a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900033a4:	4618      	mov	r0, r3
900033a6:	f7ff ff33 	bl	90003210 <__NVIC_EnableIRQ>
}
900033aa:	bf00      	nop
900033ac:	3708      	adds	r7, #8
900033ae:	46bd      	mov	sp, r7
900033b0:	bd80      	pop	{r7, pc}

900033b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
900033b2:	b580      	push	{r7, lr}
900033b4:	b082      	sub	sp, #8
900033b6:	af00      	add	r7, sp, #0
900033b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
900033ba:	6878      	ldr	r0, [r7, #4]
900033bc:	f7ff ffa4 	bl	90003308 <SysTick_Config>
900033c0:	4603      	mov	r3, r0
}
900033c2:	4618      	mov	r0, r3
900033c4:	3708      	adds	r7, #8
900033c6:	46bd      	mov	sp, r7
900033c8:	bd80      	pop	{r7, pc}
	...

900033cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
900033cc:	b480      	push	{r7}
900033ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900033d0:	f3bf 8f5f 	dmb	sy
}
900033d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900033d6:	4b07      	ldr	r3, [pc, #28]	@ (900033f4 <HAL_MPU_Disable+0x28>)
900033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900033da:	4a06      	ldr	r2, [pc, #24]	@ (900033f4 <HAL_MPU_Disable+0x28>)
900033dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900033e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900033e2:	4b05      	ldr	r3, [pc, #20]	@ (900033f8 <HAL_MPU_Disable+0x2c>)
900033e4:	2200      	movs	r2, #0
900033e6:	605a      	str	r2, [r3, #4]
}
900033e8:	bf00      	nop
900033ea:	46bd      	mov	sp, r7
900033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
900033f0:	4770      	bx	lr
900033f2:	bf00      	nop
900033f4:	e000ed00 	.word	0xe000ed00
900033f8:	e000ed90 	.word	0xe000ed90

900033fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900033fc:	b480      	push	{r7}
900033fe:	b083      	sub	sp, #12
90003400:	af00      	add	r7, sp, #0
90003402:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003404:	4a0b      	ldr	r2, [pc, #44]	@ (90003434 <HAL_MPU_Enable+0x38>)
90003406:	687b      	ldr	r3, [r7, #4]
90003408:	f043 0301 	orr.w	r3, r3, #1
9000340c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000340e:	4b0a      	ldr	r3, [pc, #40]	@ (90003438 <HAL_MPU_Enable+0x3c>)
90003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003412:	4a09      	ldr	r2, [pc, #36]	@ (90003438 <HAL_MPU_Enable+0x3c>)
90003414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90003418:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
9000341a:	f3bf 8f4f 	dsb	sy
}
9000341e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90003420:	f3bf 8f6f 	isb	sy
}
90003424:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90003426:	bf00      	nop
90003428:	370c      	adds	r7, #12
9000342a:	46bd      	mov	sp, r7
9000342c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003430:	4770      	bx	lr
90003432:	bf00      	nop
90003434:	e000ed90 	.word	0xe000ed90
90003438:	e000ed00 	.word	0xe000ed00

9000343c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
9000343c:	b480      	push	{r7}
9000343e:	b083      	sub	sp, #12
90003440:	af00      	add	r7, sp, #0
90003442:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003444:	687b      	ldr	r3, [r7, #4]
90003446:	785a      	ldrb	r2, [r3, #1]
90003448:	4b1b      	ldr	r3, [pc, #108]	@ (900034b8 <HAL_MPU_ConfigRegion+0x7c>)
9000344a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
9000344c:	4b1a      	ldr	r3, [pc, #104]	@ (900034b8 <HAL_MPU_ConfigRegion+0x7c>)
9000344e:	691b      	ldr	r3, [r3, #16]
90003450:	4a19      	ldr	r2, [pc, #100]	@ (900034b8 <HAL_MPU_ConfigRegion+0x7c>)
90003452:	f023 0301 	bic.w	r3, r3, #1
90003456:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003458:	4a17      	ldr	r2, [pc, #92]	@ (900034b8 <HAL_MPU_ConfigRegion+0x7c>)
9000345a:	687b      	ldr	r3, [r7, #4]
9000345c:	685b      	ldr	r3, [r3, #4]
9000345e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003460:	687b      	ldr	r3, [r7, #4]
90003462:	7b1b      	ldrb	r3, [r3, #12]
90003464:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003466:	687b      	ldr	r3, [r7, #4]
90003468:	7adb      	ldrb	r3, [r3, #11]
9000346a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000346c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000346e:	687b      	ldr	r3, [r7, #4]
90003470:	7a9b      	ldrb	r3, [r3, #10]
90003472:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003476:	687b      	ldr	r3, [r7, #4]
90003478:	7b5b      	ldrb	r3, [r3, #13]
9000347a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000347c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000347e:	687b      	ldr	r3, [r7, #4]
90003480:	7b9b      	ldrb	r3, [r3, #14]
90003482:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003486:	687b      	ldr	r3, [r7, #4]
90003488:	7bdb      	ldrb	r3, [r3, #15]
9000348a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000348c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000348e:	687b      	ldr	r3, [r7, #4]
90003490:	7a5b      	ldrb	r3, [r3, #9]
90003492:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003496:	687b      	ldr	r3, [r7, #4]
90003498:	7a1b      	ldrb	r3, [r3, #8]
9000349a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000349c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
9000349e:	687a      	ldr	r2, [r7, #4]
900034a0:	7812      	ldrb	r2, [r2, #0]
900034a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900034a4:	4a04      	ldr	r2, [pc, #16]	@ (900034b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900034a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900034a8:	6113      	str	r3, [r2, #16]
}
900034aa:	bf00      	nop
900034ac:	370c      	adds	r7, #12
900034ae:	46bd      	mov	sp, r7
900034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900034b4:	4770      	bx	lr
900034b6:	bf00      	nop
900034b8:	e000ed90 	.word	0xe000ed90

900034bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900034bc:	b580      	push	{r7, lr}
900034be:	b082      	sub	sp, #8
900034c0:	af00      	add	r7, sp, #0
900034c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900034c4:	687b      	ldr	r3, [r7, #4]
900034c6:	2b00      	cmp	r3, #0
900034c8:	d101      	bne.n	900034ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
900034ca:	2301      	movs	r3, #1
900034cc:	e04f      	b.n	9000356e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900034ce:	687b      	ldr	r3, [r7, #4]
900034d0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
900034d4:	b2db      	uxtb	r3, r3
900034d6:	2b00      	cmp	r3, #0
900034d8:	d106      	bne.n	900034e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
900034da:	687b      	ldr	r3, [r7, #4]
900034dc:	2200      	movs	r2, #0
900034de:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900034e2:	6878      	ldr	r0, [r7, #4]
900034e4:	f000 f84e 	bl	90003584 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900034e8:	687b      	ldr	r3, [r7, #4]
900034ea:	2202      	movs	r2, #2
900034ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900034f0:	687b      	ldr	r3, [r7, #4]
900034f2:	681b      	ldr	r3, [r3, #0]
900034f4:	681a      	ldr	r2, [r3, #0]
900034f6:	4b20      	ldr	r3, [pc, #128]	@ (90003578 <HAL_DMA2D_Init+0xbc>)
900034f8:	4013      	ands	r3, r2
900034fa:	687a      	ldr	r2, [r7, #4]
900034fc:	6851      	ldr	r1, [r2, #4]
900034fe:	687a      	ldr	r2, [r7, #4]
90003500:	69d2      	ldr	r2, [r2, #28]
90003502:	4311      	orrs	r1, r2
90003504:	687a      	ldr	r2, [r7, #4]
90003506:	6812      	ldr	r2, [r2, #0]
90003508:	430b      	orrs	r3, r1
9000350a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000350c:	687b      	ldr	r3, [r7, #4]
9000350e:	681b      	ldr	r3, [r3, #0]
90003510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90003512:	4b1a      	ldr	r3, [pc, #104]	@ (9000357c <HAL_DMA2D_Init+0xc0>)
90003514:	4013      	ands	r3, r2
90003516:	687a      	ldr	r2, [r7, #4]
90003518:	6891      	ldr	r1, [r2, #8]
9000351a:	687a      	ldr	r2, [r7, #4]
9000351c:	6992      	ldr	r2, [r2, #24]
9000351e:	4311      	orrs	r1, r2
90003520:	687a      	ldr	r2, [r7, #4]
90003522:	6812      	ldr	r2, [r2, #0]
90003524:	430b      	orrs	r3, r1
90003526:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003528:	687b      	ldr	r3, [r7, #4]
9000352a:	681b      	ldr	r3, [r3, #0]
9000352c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000352e:	4b14      	ldr	r3, [pc, #80]	@ (90003580 <HAL_DMA2D_Init+0xc4>)
90003530:	4013      	ands	r3, r2
90003532:	687a      	ldr	r2, [r7, #4]
90003534:	68d1      	ldr	r1, [r2, #12]
90003536:	687a      	ldr	r2, [r7, #4]
90003538:	6812      	ldr	r2, [r2, #0]
9000353a:	430b      	orrs	r3, r1
9000353c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000353e:	687b      	ldr	r3, [r7, #4]
90003540:	681b      	ldr	r3, [r3, #0]
90003542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003544:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003548:	687b      	ldr	r3, [r7, #4]
9000354a:	691b      	ldr	r3, [r3, #16]
9000354c:	051a      	lsls	r2, r3, #20
9000354e:	687b      	ldr	r3, [r7, #4]
90003550:	695b      	ldr	r3, [r3, #20]
90003552:	055b      	lsls	r3, r3, #21
90003554:	431a      	orrs	r2, r3
90003556:	687b      	ldr	r3, [r7, #4]
90003558:	681b      	ldr	r3, [r3, #0]
9000355a:	430a      	orrs	r2, r1
9000355c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000355e:	687b      	ldr	r3, [r7, #4]
90003560:	2200      	movs	r2, #0
90003562:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003564:	687b      	ldr	r3, [r7, #4]
90003566:	2201      	movs	r2, #1
90003568:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
9000356c:	2300      	movs	r3, #0
}
9000356e:	4618      	mov	r0, r3
90003570:	3708      	adds	r7, #8
90003572:	46bd      	mov	sp, r7
90003574:	bd80      	pop	{r7, pc}
90003576:	bf00      	nop
90003578:	fff8ffbf 	.word	0xfff8ffbf
9000357c:	fffffef8 	.word	0xfffffef8
90003580:	ffff0000 	.word	0xffff0000

90003584 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003584:	b480      	push	{r7}
90003586:	b083      	sub	sp, #12
90003588:	af00      	add	r7, sp, #0
9000358a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
9000358c:	bf00      	nop
9000358e:	370c      	adds	r7, #12
90003590:	46bd      	mov	sp, r7
90003592:	f85d 7b04 	ldr.w	r7, [sp], #4
90003596:	4770      	bx	lr

90003598 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003598:	b580      	push	{r7, lr}
9000359a:	b086      	sub	sp, #24
9000359c:	af02      	add	r7, sp, #8
9000359e:	60f8      	str	r0, [r7, #12]
900035a0:	60b9      	str	r1, [r7, #8]
900035a2:	607a      	str	r2, [r7, #4]
900035a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
900035a6:	68fb      	ldr	r3, [r7, #12]
900035a8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900035ac:	2b01      	cmp	r3, #1
900035ae:	d101      	bne.n	900035b4 <HAL_DMA2D_Start+0x1c>
900035b0:	2302      	movs	r3, #2
900035b2:	e018      	b.n	900035e6 <HAL_DMA2D_Start+0x4e>
900035b4:	68fb      	ldr	r3, [r7, #12]
900035b6:	2201      	movs	r2, #1
900035b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900035bc:	68fb      	ldr	r3, [r7, #12]
900035be:	2202      	movs	r2, #2
900035c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900035c4:	69bb      	ldr	r3, [r7, #24]
900035c6:	9300      	str	r3, [sp, #0]
900035c8:	683b      	ldr	r3, [r7, #0]
900035ca:	687a      	ldr	r2, [r7, #4]
900035cc:	68b9      	ldr	r1, [r7, #8]
900035ce:	68f8      	ldr	r0, [r7, #12]
900035d0:	f000 f9a4 	bl	9000391c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
900035d4:	68fb      	ldr	r3, [r7, #12]
900035d6:	681b      	ldr	r3, [r3, #0]
900035d8:	681a      	ldr	r2, [r3, #0]
900035da:	68fb      	ldr	r3, [r7, #12]
900035dc:	681b      	ldr	r3, [r3, #0]
900035de:	f042 0201 	orr.w	r2, r2, #1
900035e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900035e4:	2300      	movs	r3, #0
}
900035e6:	4618      	mov	r0, r3
900035e8:	3710      	adds	r7, #16
900035ea:	46bd      	mov	sp, r7
900035ec:	bd80      	pop	{r7, pc}

900035ee <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
900035ee:	b580      	push	{r7, lr}
900035f0:	b086      	sub	sp, #24
900035f2:	af00      	add	r7, sp, #0
900035f4:	6078      	str	r0, [r7, #4]
900035f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900035f8:	2300      	movs	r3, #0
900035fa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900035fc:	687b      	ldr	r3, [r7, #4]
900035fe:	681b      	ldr	r3, [r3, #0]
90003600:	681b      	ldr	r3, [r3, #0]
90003602:	f003 0301 	and.w	r3, r3, #1
90003606:	2b00      	cmp	r3, #0
90003608:	d056      	beq.n	900036b8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
9000360a:	f7ff fda7 	bl	9000315c <HAL_GetTick>
9000360e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003610:	e04b      	b.n	900036aa <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003612:	687b      	ldr	r3, [r7, #4]
90003614:	681b      	ldr	r3, [r3, #0]
90003616:	685b      	ldr	r3, [r3, #4]
90003618:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
9000361a:	68fb      	ldr	r3, [r7, #12]
9000361c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
90003620:	2b00      	cmp	r3, #0
90003622:	d023      	beq.n	9000366c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003624:	68fb      	ldr	r3, [r7, #12]
90003626:	f003 0320 	and.w	r3, r3, #32
9000362a:	2b00      	cmp	r3, #0
9000362c:	d005      	beq.n	9000363a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000362e:	687b      	ldr	r3, [r7, #4]
90003630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003632:	f043 0202 	orr.w	r2, r3, #2
90003636:	687b      	ldr	r3, [r7, #4]
90003638:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000363a:	68fb      	ldr	r3, [r7, #12]
9000363c:	f003 0301 	and.w	r3, r3, #1
90003640:	2b00      	cmp	r3, #0
90003642:	d005      	beq.n	90003650 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003644:	687b      	ldr	r3, [r7, #4]
90003646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003648:	f043 0201 	orr.w	r2, r3, #1
9000364c:	687b      	ldr	r3, [r7, #4]
9000364e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003650:	687b      	ldr	r3, [r7, #4]
90003652:	681b      	ldr	r3, [r3, #0]
90003654:	2221      	movs	r2, #33	@ 0x21
90003656:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003658:	687b      	ldr	r3, [r7, #4]
9000365a:	2204      	movs	r2, #4
9000365c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003660:	687b      	ldr	r3, [r7, #4]
90003662:	2200      	movs	r2, #0
90003664:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003668:	2301      	movs	r3, #1
9000366a:	e0a5      	b.n	900037b8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000366c:	683b      	ldr	r3, [r7, #0]
9000366e:	f1b3 3fff 	cmp.w	r3, #4294967295
90003672:	d01a      	beq.n	900036aa <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003674:	f7ff fd72 	bl	9000315c <HAL_GetTick>
90003678:	4602      	mov	r2, r0
9000367a:	697b      	ldr	r3, [r7, #20]
9000367c:	1ad3      	subs	r3, r2, r3
9000367e:	683a      	ldr	r2, [r7, #0]
90003680:	429a      	cmp	r2, r3
90003682:	d302      	bcc.n	9000368a <HAL_DMA2D_PollForTransfer+0x9c>
90003684:	683b      	ldr	r3, [r7, #0]
90003686:	2b00      	cmp	r3, #0
90003688:	d10f      	bne.n	900036aa <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000368a:	687b      	ldr	r3, [r7, #4]
9000368c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000368e:	f043 0220 	orr.w	r2, r3, #32
90003692:	687b      	ldr	r3, [r7, #4]
90003694:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003696:	687b      	ldr	r3, [r7, #4]
90003698:	2203      	movs	r2, #3
9000369a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000369e:	687b      	ldr	r3, [r7, #4]
900036a0:	2200      	movs	r2, #0
900036a2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
900036a6:	2303      	movs	r3, #3
900036a8:	e086      	b.n	900037b8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900036aa:	687b      	ldr	r3, [r7, #4]
900036ac:	681b      	ldr	r3, [r3, #0]
900036ae:	685b      	ldr	r3, [r3, #4]
900036b0:	f003 0302 	and.w	r3, r3, #2
900036b4:	2b00      	cmp	r3, #0
900036b6:	d0ac      	beq.n	90003612 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
900036b8:	687b      	ldr	r3, [r7, #4]
900036ba:	681b      	ldr	r3, [r3, #0]
900036bc:	69db      	ldr	r3, [r3, #28]
900036be:	f003 0320 	and.w	r3, r3, #32
900036c2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
900036c4:	687b      	ldr	r3, [r7, #4]
900036c6:	681b      	ldr	r3, [r3, #0]
900036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900036ca:	f003 0320 	and.w	r3, r3, #32
900036ce:	693a      	ldr	r2, [r7, #16]
900036d0:	4313      	orrs	r3, r2
900036d2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
900036d4:	693b      	ldr	r3, [r7, #16]
900036d6:	2b00      	cmp	r3, #0
900036d8:	d061      	beq.n	9000379e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900036da:	f7ff fd3f 	bl	9000315c <HAL_GetTick>
900036de:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900036e0:	e056      	b.n	90003790 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900036e2:	687b      	ldr	r3, [r7, #4]
900036e4:	681b      	ldr	r3, [r3, #0]
900036e6:	685b      	ldr	r3, [r3, #4]
900036e8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900036ea:	68fb      	ldr	r3, [r7, #12]
900036ec:	f003 0329 	and.w	r3, r3, #41	@ 0x29
900036f0:	2b00      	cmp	r3, #0
900036f2:	d02e      	beq.n	90003752 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900036f4:	68fb      	ldr	r3, [r7, #12]
900036f6:	f003 0308 	and.w	r3, r3, #8
900036fa:	2b00      	cmp	r3, #0
900036fc:	d005      	beq.n	9000370a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900036fe:	687b      	ldr	r3, [r7, #4]
90003700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003702:	f043 0204 	orr.w	r2, r3, #4
90003706:	687b      	ldr	r3, [r7, #4]
90003708:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
9000370a:	68fb      	ldr	r3, [r7, #12]
9000370c:	f003 0320 	and.w	r3, r3, #32
90003710:	2b00      	cmp	r3, #0
90003712:	d005      	beq.n	90003720 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003714:	687b      	ldr	r3, [r7, #4]
90003716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003718:	f043 0202 	orr.w	r2, r3, #2
9000371c:	687b      	ldr	r3, [r7, #4]
9000371e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003720:	68fb      	ldr	r3, [r7, #12]
90003722:	f003 0301 	and.w	r3, r3, #1
90003726:	2b00      	cmp	r3, #0
90003728:	d005      	beq.n	90003736 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000372a:	687b      	ldr	r3, [r7, #4]
9000372c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000372e:	f043 0201 	orr.w	r2, r3, #1
90003732:	687b      	ldr	r3, [r7, #4]
90003734:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003736:	687b      	ldr	r3, [r7, #4]
90003738:	681b      	ldr	r3, [r3, #0]
9000373a:	2229      	movs	r2, #41	@ 0x29
9000373c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000373e:	687b      	ldr	r3, [r7, #4]
90003740:	2204      	movs	r2, #4
90003742:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003746:	687b      	ldr	r3, [r7, #4]
90003748:	2200      	movs	r2, #0
9000374a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
9000374e:	2301      	movs	r3, #1
90003750:	e032      	b.n	900037b8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003752:	683b      	ldr	r3, [r7, #0]
90003754:	f1b3 3fff 	cmp.w	r3, #4294967295
90003758:	d01a      	beq.n	90003790 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000375a:	f7ff fcff 	bl	9000315c <HAL_GetTick>
9000375e:	4602      	mov	r2, r0
90003760:	697b      	ldr	r3, [r7, #20]
90003762:	1ad3      	subs	r3, r2, r3
90003764:	683a      	ldr	r2, [r7, #0]
90003766:	429a      	cmp	r2, r3
90003768:	d302      	bcc.n	90003770 <HAL_DMA2D_PollForTransfer+0x182>
9000376a:	683b      	ldr	r3, [r7, #0]
9000376c:	2b00      	cmp	r3, #0
9000376e:	d10f      	bne.n	90003790 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003770:	687b      	ldr	r3, [r7, #4]
90003772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003774:	f043 0220 	orr.w	r2, r3, #32
90003778:	687b      	ldr	r3, [r7, #4]
9000377a:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000377c:	687b      	ldr	r3, [r7, #4]
9000377e:	2203      	movs	r2, #3
90003780:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003784:	687b      	ldr	r3, [r7, #4]
90003786:	2200      	movs	r2, #0
90003788:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
9000378c:	2303      	movs	r3, #3
9000378e:	e013      	b.n	900037b8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003790:	687b      	ldr	r3, [r7, #4]
90003792:	681b      	ldr	r3, [r3, #0]
90003794:	685b      	ldr	r3, [r3, #4]
90003796:	f003 0310 	and.w	r3, r3, #16
9000379a:	2b00      	cmp	r3, #0
9000379c:	d0a1      	beq.n	900036e2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
9000379e:	687b      	ldr	r3, [r7, #4]
900037a0:	681b      	ldr	r3, [r3, #0]
900037a2:	2212      	movs	r2, #18
900037a4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
900037a6:	687b      	ldr	r3, [r7, #4]
900037a8:	2201      	movs	r2, #1
900037aa:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900037ae:	687b      	ldr	r3, [r7, #4]
900037b0:	2200      	movs	r2, #0
900037b2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900037b6:	2300      	movs	r3, #0
}
900037b8:	4618      	mov	r0, r3
900037ba:	3718      	adds	r7, #24
900037bc:	46bd      	mov	sp, r7
900037be:	bd80      	pop	{r7, pc}

900037c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
900037c0:	b480      	push	{r7}
900037c2:	b087      	sub	sp, #28
900037c4:	af00      	add	r7, sp, #0
900037c6:	6078      	str	r0, [r7, #4]
900037c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
900037ca:	687b      	ldr	r3, [r7, #4]
900037cc:	685b      	ldr	r3, [r3, #4]
900037ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
900037d2:	683b      	ldr	r3, [r7, #0]
900037d4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
900037d6:	687b      	ldr	r3, [r7, #4]
900037d8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900037dc:	2b01      	cmp	r3, #1
900037de:	d101      	bne.n	900037e4 <HAL_DMA2D_ConfigLayer+0x24>
900037e0:	2302      	movs	r3, #2
900037e2:	e092      	b.n	9000390a <HAL_DMA2D_ConfigLayer+0x14a>
900037e4:	687b      	ldr	r3, [r7, #4]
900037e6:	2201      	movs	r2, #1
900037e8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900037ec:	687b      	ldr	r3, [r7, #4]
900037ee:	2202      	movs	r2, #2
900037f0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900037f4:	683a      	ldr	r2, [r7, #0]
900037f6:	4613      	mov	r3, r2
900037f8:	00db      	lsls	r3, r3, #3
900037fa:	1a9b      	subs	r3, r3, r2
900037fc:	009b      	lsls	r3, r3, #2
900037fe:	3328      	adds	r3, #40	@ 0x28
90003800:	687a      	ldr	r2, [r7, #4]
90003802:	4413      	add	r3, r2
90003804:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003806:	68fb      	ldr	r3, [r7, #12]
90003808:	685a      	ldr	r2, [r3, #4]
9000380a:	68fb      	ldr	r3, [r7, #12]
9000380c:	689b      	ldr	r3, [r3, #8]
9000380e:	041b      	lsls	r3, r3, #16
90003810:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003812:	68fb      	ldr	r3, [r7, #12]
90003814:	691b      	ldr	r3, [r3, #16]
90003816:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003818:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
9000381a:	68fb      	ldr	r3, [r7, #12]
9000381c:	695b      	ldr	r3, [r3, #20]
9000381e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003820:	4313      	orrs	r3, r2
90003822:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003824:	4b3c      	ldr	r3, [pc, #240]	@ (90003918 <HAL_DMA2D_ConfigLayer+0x158>)
90003826:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003828:	68fb      	ldr	r3, [r7, #12]
9000382a:	685b      	ldr	r3, [r3, #4]
9000382c:	2b0a      	cmp	r3, #10
9000382e:	d003      	beq.n	90003838 <HAL_DMA2D_ConfigLayer+0x78>
90003830:	68fb      	ldr	r3, [r7, #12]
90003832:	685b      	ldr	r3, [r3, #4]
90003834:	2b09      	cmp	r3, #9
90003836:	d107      	bne.n	90003848 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003838:	68fb      	ldr	r3, [r7, #12]
9000383a:	68db      	ldr	r3, [r3, #12]
9000383c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003840:	693a      	ldr	r2, [r7, #16]
90003842:	4313      	orrs	r3, r2
90003844:	613b      	str	r3, [r7, #16]
90003846:	e005      	b.n	90003854 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003848:	68fb      	ldr	r3, [r7, #12]
9000384a:	68db      	ldr	r3, [r3, #12]
9000384c:	061b      	lsls	r3, r3, #24
9000384e:	693a      	ldr	r2, [r7, #16]
90003850:	4313      	orrs	r3, r2
90003852:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003854:	683b      	ldr	r3, [r7, #0]
90003856:	2b00      	cmp	r3, #0
90003858:	d120      	bne.n	9000389c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000385a:	687b      	ldr	r3, [r7, #4]
9000385c:	681b      	ldr	r3, [r3, #0]
9000385e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003860:	697b      	ldr	r3, [r7, #20]
90003862:	43db      	mvns	r3, r3
90003864:	ea02 0103 	and.w	r1, r2, r3
90003868:	687b      	ldr	r3, [r7, #4]
9000386a:	681b      	ldr	r3, [r3, #0]
9000386c:	693a      	ldr	r2, [r7, #16]
9000386e:	430a      	orrs	r2, r1
90003870:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003872:	687b      	ldr	r3, [r7, #4]
90003874:	681b      	ldr	r3, [r3, #0]
90003876:	68fa      	ldr	r2, [r7, #12]
90003878:	6812      	ldr	r2, [r2, #0]
9000387a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000387c:	68fb      	ldr	r3, [r7, #12]
9000387e:	685b      	ldr	r3, [r3, #4]
90003880:	2b0a      	cmp	r3, #10
90003882:	d003      	beq.n	9000388c <HAL_DMA2D_ConfigLayer+0xcc>
90003884:	68fb      	ldr	r3, [r7, #12]
90003886:	685b      	ldr	r3, [r3, #4]
90003888:	2b09      	cmp	r3, #9
9000388a:	d135      	bne.n	900038f8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000388c:	68fb      	ldr	r3, [r7, #12]
9000388e:	68da      	ldr	r2, [r3, #12]
90003890:	687b      	ldr	r3, [r7, #4]
90003892:	681b      	ldr	r3, [r3, #0]
90003894:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003898:	629a      	str	r2, [r3, #40]	@ 0x28
9000389a:	e02d      	b.n	900038f8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
9000389c:	68fb      	ldr	r3, [r7, #12]
9000389e:	685b      	ldr	r3, [r3, #4]
900038a0:	2b0b      	cmp	r3, #11
900038a2:	d109      	bne.n	900038b8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
900038a4:	68fb      	ldr	r3, [r7, #12]
900038a6:	699b      	ldr	r3, [r3, #24]
900038a8:	049b      	lsls	r3, r3, #18
900038aa:	693a      	ldr	r2, [r7, #16]
900038ac:	4313      	orrs	r3, r2
900038ae:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
900038b0:	697b      	ldr	r3, [r7, #20]
900038b2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
900038b6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900038b8:	687b      	ldr	r3, [r7, #4]
900038ba:	681b      	ldr	r3, [r3, #0]
900038bc:	69da      	ldr	r2, [r3, #28]
900038be:	697b      	ldr	r3, [r7, #20]
900038c0:	43db      	mvns	r3, r3
900038c2:	ea02 0103 	and.w	r1, r2, r3
900038c6:	687b      	ldr	r3, [r7, #4]
900038c8:	681b      	ldr	r3, [r3, #0]
900038ca:	693a      	ldr	r2, [r7, #16]
900038cc:	430a      	orrs	r2, r1
900038ce:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900038d0:	687b      	ldr	r3, [r7, #4]
900038d2:	681b      	ldr	r3, [r3, #0]
900038d4:	68fa      	ldr	r2, [r7, #12]
900038d6:	6812      	ldr	r2, [r2, #0]
900038d8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900038da:	68fb      	ldr	r3, [r7, #12]
900038dc:	685b      	ldr	r3, [r3, #4]
900038de:	2b0a      	cmp	r3, #10
900038e0:	d003      	beq.n	900038ea <HAL_DMA2D_ConfigLayer+0x12a>
900038e2:	68fb      	ldr	r3, [r7, #12]
900038e4:	685b      	ldr	r3, [r3, #4]
900038e6:	2b09      	cmp	r3, #9
900038e8:	d106      	bne.n	900038f8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
900038ea:	68fb      	ldr	r3, [r7, #12]
900038ec:	68da      	ldr	r2, [r3, #12]
900038ee:	687b      	ldr	r3, [r7, #4]
900038f0:	681b      	ldr	r3, [r3, #0]
900038f2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
900038f6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900038f8:	687b      	ldr	r3, [r7, #4]
900038fa:	2201      	movs	r2, #1
900038fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003900:	687b      	ldr	r3, [r7, #4]
90003902:	2200      	movs	r2, #0
90003904:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003908:	2300      	movs	r3, #0
}
9000390a:	4618      	mov	r0, r3
9000390c:	371c      	adds	r7, #28
9000390e:	46bd      	mov	sp, r7
90003910:	f85d 7b04 	ldr.w	r7, [sp], #4
90003914:	4770      	bx	lr
90003916:	bf00      	nop
90003918:	ff33000f 	.word	0xff33000f

9000391c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
9000391c:	b480      	push	{r7}
9000391e:	b08b      	sub	sp, #44	@ 0x2c
90003920:	af00      	add	r7, sp, #0
90003922:	60f8      	str	r0, [r7, #12]
90003924:	60b9      	str	r1, [r7, #8]
90003926:	607a      	str	r2, [r7, #4]
90003928:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
9000392a:	68fb      	ldr	r3, [r7, #12]
9000392c:	681b      	ldr	r3, [r3, #0]
9000392e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003930:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003934:	683b      	ldr	r3, [r7, #0]
90003936:	041a      	lsls	r2, r3, #16
90003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000393a:	431a      	orrs	r2, r3
9000393c:	68fb      	ldr	r3, [r7, #12]
9000393e:	681b      	ldr	r3, [r3, #0]
90003940:	430a      	orrs	r2, r1
90003942:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003944:	68fb      	ldr	r3, [r7, #12]
90003946:	681b      	ldr	r3, [r3, #0]
90003948:	687a      	ldr	r2, [r7, #4]
9000394a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
9000394c:	68fb      	ldr	r3, [r7, #12]
9000394e:	685b      	ldr	r3, [r3, #4]
90003950:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003954:	d174      	bne.n	90003a40 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003956:	68bb      	ldr	r3, [r7, #8]
90003958:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
9000395c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
9000395e:	68bb      	ldr	r3, [r7, #8]
90003960:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003964:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003966:	68bb      	ldr	r3, [r7, #8]
90003968:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
9000396c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
9000396e:	68bb      	ldr	r3, [r7, #8]
90003970:	b2db      	uxtb	r3, r3
90003972:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003974:	68fb      	ldr	r3, [r7, #12]
90003976:	689b      	ldr	r3, [r3, #8]
90003978:	2b00      	cmp	r3, #0
9000397a:	d108      	bne.n	9000398e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
9000397c:	69ba      	ldr	r2, [r7, #24]
9000397e:	69fb      	ldr	r3, [r7, #28]
90003980:	431a      	orrs	r2, r3
90003982:	6a3b      	ldr	r3, [r7, #32]
90003984:	4313      	orrs	r3, r2
90003986:	697a      	ldr	r2, [r7, #20]
90003988:	4313      	orrs	r3, r2
9000398a:	627b      	str	r3, [r7, #36]	@ 0x24
9000398c:	e053      	b.n	90003a36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
9000398e:	68fb      	ldr	r3, [r7, #12]
90003990:	689b      	ldr	r3, [r3, #8]
90003992:	2b01      	cmp	r3, #1
90003994:	d106      	bne.n	900039a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003996:	69ba      	ldr	r2, [r7, #24]
90003998:	69fb      	ldr	r3, [r7, #28]
9000399a:	4313      	orrs	r3, r2
9000399c:	697a      	ldr	r2, [r7, #20]
9000399e:	4313      	orrs	r3, r2
900039a0:	627b      	str	r3, [r7, #36]	@ 0x24
900039a2:	e048      	b.n	90003a36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
900039a4:	68fb      	ldr	r3, [r7, #12]
900039a6:	689b      	ldr	r3, [r3, #8]
900039a8:	2b02      	cmp	r3, #2
900039aa:	d111      	bne.n	900039d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
900039ac:	69fb      	ldr	r3, [r7, #28]
900039ae:	0cdb      	lsrs	r3, r3, #19
900039b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
900039b2:	69bb      	ldr	r3, [r7, #24]
900039b4:	0a9b      	lsrs	r3, r3, #10
900039b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
900039b8:	697b      	ldr	r3, [r7, #20]
900039ba:	08db      	lsrs	r3, r3, #3
900039bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
900039be:	69bb      	ldr	r3, [r7, #24]
900039c0:	015a      	lsls	r2, r3, #5
900039c2:	69fb      	ldr	r3, [r7, #28]
900039c4:	02db      	lsls	r3, r3, #11
900039c6:	4313      	orrs	r3, r2
900039c8:	697a      	ldr	r2, [r7, #20]
900039ca:	4313      	orrs	r3, r2
900039cc:	627b      	str	r3, [r7, #36]	@ 0x24
900039ce:	e032      	b.n	90003a36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900039d0:	68fb      	ldr	r3, [r7, #12]
900039d2:	689b      	ldr	r3, [r3, #8]
900039d4:	2b03      	cmp	r3, #3
900039d6:	d117      	bne.n	90003a08 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
900039d8:	6a3b      	ldr	r3, [r7, #32]
900039da:	0fdb      	lsrs	r3, r3, #31
900039dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
900039de:	69fb      	ldr	r3, [r7, #28]
900039e0:	0cdb      	lsrs	r3, r3, #19
900039e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
900039e4:	69bb      	ldr	r3, [r7, #24]
900039e6:	0adb      	lsrs	r3, r3, #11
900039e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
900039ea:	697b      	ldr	r3, [r7, #20]
900039ec:	08db      	lsrs	r3, r3, #3
900039ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900039f0:	69bb      	ldr	r3, [r7, #24]
900039f2:	015a      	lsls	r2, r3, #5
900039f4:	69fb      	ldr	r3, [r7, #28]
900039f6:	029b      	lsls	r3, r3, #10
900039f8:	431a      	orrs	r2, r3
900039fa:	6a3b      	ldr	r3, [r7, #32]
900039fc:	03db      	lsls	r3, r3, #15
900039fe:	4313      	orrs	r3, r2
90003a00:	697a      	ldr	r2, [r7, #20]
90003a02:	4313      	orrs	r3, r2
90003a04:	627b      	str	r3, [r7, #36]	@ 0x24
90003a06:	e016      	b.n	90003a36 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003a08:	6a3b      	ldr	r3, [r7, #32]
90003a0a:	0f1b      	lsrs	r3, r3, #28
90003a0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003a0e:	69fb      	ldr	r3, [r7, #28]
90003a10:	0d1b      	lsrs	r3, r3, #20
90003a12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003a14:	69bb      	ldr	r3, [r7, #24]
90003a16:	0b1b      	lsrs	r3, r3, #12
90003a18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003a1a:	697b      	ldr	r3, [r7, #20]
90003a1c:	091b      	lsrs	r3, r3, #4
90003a1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003a20:	69bb      	ldr	r3, [r7, #24]
90003a22:	011a      	lsls	r2, r3, #4
90003a24:	69fb      	ldr	r3, [r7, #28]
90003a26:	021b      	lsls	r3, r3, #8
90003a28:	431a      	orrs	r2, r3
90003a2a:	6a3b      	ldr	r3, [r7, #32]
90003a2c:	031b      	lsls	r3, r3, #12
90003a2e:	4313      	orrs	r3, r2
90003a30:	697a      	ldr	r2, [r7, #20]
90003a32:	4313      	orrs	r3, r2
90003a34:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003a36:	68fb      	ldr	r3, [r7, #12]
90003a38:	681b      	ldr	r3, [r3, #0]
90003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003a3e:	e00d      	b.n	90003a5c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003a40:	68fb      	ldr	r3, [r7, #12]
90003a42:	685b      	ldr	r3, [r3, #4]
90003a44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003a48:	d104      	bne.n	90003a54 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003a4a:	68fb      	ldr	r3, [r7, #12]
90003a4c:	681b      	ldr	r3, [r3, #0]
90003a4e:	68ba      	ldr	r2, [r7, #8]
90003a50:	615a      	str	r2, [r3, #20]
}
90003a52:	e003      	b.n	90003a5c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003a54:	68fb      	ldr	r3, [r7, #12]
90003a56:	681b      	ldr	r3, [r3, #0]
90003a58:	68ba      	ldr	r2, [r7, #8]
90003a5a:	60da      	str	r2, [r3, #12]
}
90003a5c:	bf00      	nop
90003a5e:	372c      	adds	r7, #44	@ 0x2c
90003a60:	46bd      	mov	sp, r7
90003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a66:	4770      	bx	lr

90003a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003a68:	b480      	push	{r7}
90003a6a:	b089      	sub	sp, #36	@ 0x24
90003a6c:	af00      	add	r7, sp, #0
90003a6e:	6078      	str	r0, [r7, #4]
90003a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003a72:	2300      	movs	r3, #0
90003a74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003a76:	4b89      	ldr	r3, [pc, #548]	@ (90003c9c <HAL_GPIO_Init+0x234>)
90003a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003a7a:	e194      	b.n	90003da6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003a7c:	683b      	ldr	r3, [r7, #0]
90003a7e:	681a      	ldr	r2, [r3, #0]
90003a80:	2101      	movs	r1, #1
90003a82:	69fb      	ldr	r3, [r7, #28]
90003a84:	fa01 f303 	lsl.w	r3, r1, r3
90003a88:	4013      	ands	r3, r2
90003a8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003a8c:	693b      	ldr	r3, [r7, #16]
90003a8e:	2b00      	cmp	r3, #0
90003a90:	f000 8186 	beq.w	90003da0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003a94:	683b      	ldr	r3, [r7, #0]
90003a96:	685b      	ldr	r3, [r3, #4]
90003a98:	f003 0303 	and.w	r3, r3, #3
90003a9c:	2b01      	cmp	r3, #1
90003a9e:	d005      	beq.n	90003aac <HAL_GPIO_Init+0x44>
90003aa0:	683b      	ldr	r3, [r7, #0]
90003aa2:	685b      	ldr	r3, [r3, #4]
90003aa4:	f003 0303 	and.w	r3, r3, #3
90003aa8:	2b02      	cmp	r3, #2
90003aaa:	d130      	bne.n	90003b0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003aac:	687b      	ldr	r3, [r7, #4]
90003aae:	689b      	ldr	r3, [r3, #8]
90003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003ab2:	69fb      	ldr	r3, [r7, #28]
90003ab4:	005b      	lsls	r3, r3, #1
90003ab6:	2203      	movs	r2, #3
90003ab8:	fa02 f303 	lsl.w	r3, r2, r3
90003abc:	43db      	mvns	r3, r3
90003abe:	69ba      	ldr	r2, [r7, #24]
90003ac0:	4013      	ands	r3, r2
90003ac2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003ac4:	683b      	ldr	r3, [r7, #0]
90003ac6:	68da      	ldr	r2, [r3, #12]
90003ac8:	69fb      	ldr	r3, [r7, #28]
90003aca:	005b      	lsls	r3, r3, #1
90003acc:	fa02 f303 	lsl.w	r3, r2, r3
90003ad0:	69ba      	ldr	r2, [r7, #24]
90003ad2:	4313      	orrs	r3, r2
90003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003ad6:	687b      	ldr	r3, [r7, #4]
90003ad8:	69ba      	ldr	r2, [r7, #24]
90003ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003adc:	687b      	ldr	r3, [r7, #4]
90003ade:	685b      	ldr	r3, [r3, #4]
90003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003ae2:	2201      	movs	r2, #1
90003ae4:	69fb      	ldr	r3, [r7, #28]
90003ae6:	fa02 f303 	lsl.w	r3, r2, r3
90003aea:	43db      	mvns	r3, r3
90003aec:	69ba      	ldr	r2, [r7, #24]
90003aee:	4013      	ands	r3, r2
90003af0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003af2:	683b      	ldr	r3, [r7, #0]
90003af4:	685b      	ldr	r3, [r3, #4]
90003af6:	091b      	lsrs	r3, r3, #4
90003af8:	f003 0201 	and.w	r2, r3, #1
90003afc:	69fb      	ldr	r3, [r7, #28]
90003afe:	fa02 f303 	lsl.w	r3, r2, r3
90003b02:	69ba      	ldr	r2, [r7, #24]
90003b04:	4313      	orrs	r3, r2
90003b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003b08:	687b      	ldr	r3, [r7, #4]
90003b0a:	69ba      	ldr	r2, [r7, #24]
90003b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003b0e:	683b      	ldr	r3, [r7, #0]
90003b10:	685b      	ldr	r3, [r3, #4]
90003b12:	f003 0303 	and.w	r3, r3, #3
90003b16:	2b03      	cmp	r3, #3
90003b18:	d017      	beq.n	90003b4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003b1a:	687b      	ldr	r3, [r7, #4]
90003b1c:	68db      	ldr	r3, [r3, #12]
90003b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003b20:	69fb      	ldr	r3, [r7, #28]
90003b22:	005b      	lsls	r3, r3, #1
90003b24:	2203      	movs	r2, #3
90003b26:	fa02 f303 	lsl.w	r3, r2, r3
90003b2a:	43db      	mvns	r3, r3
90003b2c:	69ba      	ldr	r2, [r7, #24]
90003b2e:	4013      	ands	r3, r2
90003b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003b32:	683b      	ldr	r3, [r7, #0]
90003b34:	689a      	ldr	r2, [r3, #8]
90003b36:	69fb      	ldr	r3, [r7, #28]
90003b38:	005b      	lsls	r3, r3, #1
90003b3a:	fa02 f303 	lsl.w	r3, r2, r3
90003b3e:	69ba      	ldr	r2, [r7, #24]
90003b40:	4313      	orrs	r3, r2
90003b42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003b44:	687b      	ldr	r3, [r7, #4]
90003b46:	69ba      	ldr	r2, [r7, #24]
90003b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003b4a:	683b      	ldr	r3, [r7, #0]
90003b4c:	685b      	ldr	r3, [r3, #4]
90003b4e:	f003 0303 	and.w	r3, r3, #3
90003b52:	2b02      	cmp	r3, #2
90003b54:	d123      	bne.n	90003b9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003b56:	69fb      	ldr	r3, [r7, #28]
90003b58:	08da      	lsrs	r2, r3, #3
90003b5a:	687b      	ldr	r3, [r7, #4]
90003b5c:	3208      	adds	r2, #8
90003b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003b64:	69fb      	ldr	r3, [r7, #28]
90003b66:	f003 0307 	and.w	r3, r3, #7
90003b6a:	009b      	lsls	r3, r3, #2
90003b6c:	220f      	movs	r2, #15
90003b6e:	fa02 f303 	lsl.w	r3, r2, r3
90003b72:	43db      	mvns	r3, r3
90003b74:	69ba      	ldr	r2, [r7, #24]
90003b76:	4013      	ands	r3, r2
90003b78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003b7a:	683b      	ldr	r3, [r7, #0]
90003b7c:	691a      	ldr	r2, [r3, #16]
90003b7e:	69fb      	ldr	r3, [r7, #28]
90003b80:	f003 0307 	and.w	r3, r3, #7
90003b84:	009b      	lsls	r3, r3, #2
90003b86:	fa02 f303 	lsl.w	r3, r2, r3
90003b8a:	69ba      	ldr	r2, [r7, #24]
90003b8c:	4313      	orrs	r3, r2
90003b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003b90:	69fb      	ldr	r3, [r7, #28]
90003b92:	08da      	lsrs	r2, r3, #3
90003b94:	687b      	ldr	r3, [r7, #4]
90003b96:	3208      	adds	r2, #8
90003b98:	69b9      	ldr	r1, [r7, #24]
90003b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003b9e:	687b      	ldr	r3, [r7, #4]
90003ba0:	681b      	ldr	r3, [r3, #0]
90003ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003ba4:	69fb      	ldr	r3, [r7, #28]
90003ba6:	005b      	lsls	r3, r3, #1
90003ba8:	2203      	movs	r2, #3
90003baa:	fa02 f303 	lsl.w	r3, r2, r3
90003bae:	43db      	mvns	r3, r3
90003bb0:	69ba      	ldr	r2, [r7, #24]
90003bb2:	4013      	ands	r3, r2
90003bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003bb6:	683b      	ldr	r3, [r7, #0]
90003bb8:	685b      	ldr	r3, [r3, #4]
90003bba:	f003 0203 	and.w	r2, r3, #3
90003bbe:	69fb      	ldr	r3, [r7, #28]
90003bc0:	005b      	lsls	r3, r3, #1
90003bc2:	fa02 f303 	lsl.w	r3, r2, r3
90003bc6:	69ba      	ldr	r2, [r7, #24]
90003bc8:	4313      	orrs	r3, r2
90003bca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003bcc:	687b      	ldr	r3, [r7, #4]
90003bce:	69ba      	ldr	r2, [r7, #24]
90003bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003bd2:	683b      	ldr	r3, [r7, #0]
90003bd4:	685b      	ldr	r3, [r3, #4]
90003bd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003bda:	2b00      	cmp	r3, #0
90003bdc:	f000 80e0 	beq.w	90003da0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003be0:	4b2f      	ldr	r3, [pc, #188]	@ (90003ca0 <HAL_GPIO_Init+0x238>)
90003be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003be6:	4a2e      	ldr	r2, [pc, #184]	@ (90003ca0 <HAL_GPIO_Init+0x238>)
90003be8:	f043 0302 	orr.w	r3, r3, #2
90003bec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003bf0:	4b2b      	ldr	r3, [pc, #172]	@ (90003ca0 <HAL_GPIO_Init+0x238>)
90003bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003bf6:	f003 0302 	and.w	r3, r3, #2
90003bfa:	60fb      	str	r3, [r7, #12]
90003bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003bfe:	4a29      	ldr	r2, [pc, #164]	@ (90003ca4 <HAL_GPIO_Init+0x23c>)
90003c00:	69fb      	ldr	r3, [r7, #28]
90003c02:	089b      	lsrs	r3, r3, #2
90003c04:	3302      	adds	r3, #2
90003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003c0c:	69fb      	ldr	r3, [r7, #28]
90003c0e:	f003 0303 	and.w	r3, r3, #3
90003c12:	009b      	lsls	r3, r3, #2
90003c14:	220f      	movs	r2, #15
90003c16:	fa02 f303 	lsl.w	r3, r2, r3
90003c1a:	43db      	mvns	r3, r3
90003c1c:	69ba      	ldr	r2, [r7, #24]
90003c1e:	4013      	ands	r3, r2
90003c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003c22:	687b      	ldr	r3, [r7, #4]
90003c24:	4a20      	ldr	r2, [pc, #128]	@ (90003ca8 <HAL_GPIO_Init+0x240>)
90003c26:	4293      	cmp	r3, r2
90003c28:	d052      	beq.n	90003cd0 <HAL_GPIO_Init+0x268>
90003c2a:	687b      	ldr	r3, [r7, #4]
90003c2c:	4a1f      	ldr	r2, [pc, #124]	@ (90003cac <HAL_GPIO_Init+0x244>)
90003c2e:	4293      	cmp	r3, r2
90003c30:	d031      	beq.n	90003c96 <HAL_GPIO_Init+0x22e>
90003c32:	687b      	ldr	r3, [r7, #4]
90003c34:	4a1e      	ldr	r2, [pc, #120]	@ (90003cb0 <HAL_GPIO_Init+0x248>)
90003c36:	4293      	cmp	r3, r2
90003c38:	d02b      	beq.n	90003c92 <HAL_GPIO_Init+0x22a>
90003c3a:	687b      	ldr	r3, [r7, #4]
90003c3c:	4a1d      	ldr	r2, [pc, #116]	@ (90003cb4 <HAL_GPIO_Init+0x24c>)
90003c3e:	4293      	cmp	r3, r2
90003c40:	d025      	beq.n	90003c8e <HAL_GPIO_Init+0x226>
90003c42:	687b      	ldr	r3, [r7, #4]
90003c44:	4a1c      	ldr	r2, [pc, #112]	@ (90003cb8 <HAL_GPIO_Init+0x250>)
90003c46:	4293      	cmp	r3, r2
90003c48:	d01f      	beq.n	90003c8a <HAL_GPIO_Init+0x222>
90003c4a:	687b      	ldr	r3, [r7, #4]
90003c4c:	4a1b      	ldr	r2, [pc, #108]	@ (90003cbc <HAL_GPIO_Init+0x254>)
90003c4e:	4293      	cmp	r3, r2
90003c50:	d019      	beq.n	90003c86 <HAL_GPIO_Init+0x21e>
90003c52:	687b      	ldr	r3, [r7, #4]
90003c54:	4a1a      	ldr	r2, [pc, #104]	@ (90003cc0 <HAL_GPIO_Init+0x258>)
90003c56:	4293      	cmp	r3, r2
90003c58:	d013      	beq.n	90003c82 <HAL_GPIO_Init+0x21a>
90003c5a:	687b      	ldr	r3, [r7, #4]
90003c5c:	4a19      	ldr	r2, [pc, #100]	@ (90003cc4 <HAL_GPIO_Init+0x25c>)
90003c5e:	4293      	cmp	r3, r2
90003c60:	d00d      	beq.n	90003c7e <HAL_GPIO_Init+0x216>
90003c62:	687b      	ldr	r3, [r7, #4]
90003c64:	4a18      	ldr	r2, [pc, #96]	@ (90003cc8 <HAL_GPIO_Init+0x260>)
90003c66:	4293      	cmp	r3, r2
90003c68:	d007      	beq.n	90003c7a <HAL_GPIO_Init+0x212>
90003c6a:	687b      	ldr	r3, [r7, #4]
90003c6c:	4a17      	ldr	r2, [pc, #92]	@ (90003ccc <HAL_GPIO_Init+0x264>)
90003c6e:	4293      	cmp	r3, r2
90003c70:	d101      	bne.n	90003c76 <HAL_GPIO_Init+0x20e>
90003c72:	2309      	movs	r3, #9
90003c74:	e02d      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c76:	230a      	movs	r3, #10
90003c78:	e02b      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c7a:	2308      	movs	r3, #8
90003c7c:	e029      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c7e:	2307      	movs	r3, #7
90003c80:	e027      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c82:	2306      	movs	r3, #6
90003c84:	e025      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c86:	2305      	movs	r3, #5
90003c88:	e023      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c8a:	2304      	movs	r3, #4
90003c8c:	e021      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c8e:	2303      	movs	r3, #3
90003c90:	e01f      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c92:	2302      	movs	r3, #2
90003c94:	e01d      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c96:	2301      	movs	r3, #1
90003c98:	e01b      	b.n	90003cd2 <HAL_GPIO_Init+0x26a>
90003c9a:	bf00      	nop
90003c9c:	58000080 	.word	0x58000080
90003ca0:	58024400 	.word	0x58024400
90003ca4:	58000400 	.word	0x58000400
90003ca8:	58020000 	.word	0x58020000
90003cac:	58020400 	.word	0x58020400
90003cb0:	58020800 	.word	0x58020800
90003cb4:	58020c00 	.word	0x58020c00
90003cb8:	58021000 	.word	0x58021000
90003cbc:	58021400 	.word	0x58021400
90003cc0:	58021800 	.word	0x58021800
90003cc4:	58021c00 	.word	0x58021c00
90003cc8:	58022000 	.word	0x58022000
90003ccc:	58022400 	.word	0x58022400
90003cd0:	2300      	movs	r3, #0
90003cd2:	69fa      	ldr	r2, [r7, #28]
90003cd4:	f002 0203 	and.w	r2, r2, #3
90003cd8:	0092      	lsls	r2, r2, #2
90003cda:	4093      	lsls	r3, r2
90003cdc:	69ba      	ldr	r2, [r7, #24]
90003cde:	4313      	orrs	r3, r2
90003ce0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003ce2:	4938      	ldr	r1, [pc, #224]	@ (90003dc4 <HAL_GPIO_Init+0x35c>)
90003ce4:	69fb      	ldr	r3, [r7, #28]
90003ce6:	089b      	lsrs	r3, r3, #2
90003ce8:	3302      	adds	r3, #2
90003cea:	69ba      	ldr	r2, [r7, #24]
90003cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003cf4:	681b      	ldr	r3, [r3, #0]
90003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003cf8:	693b      	ldr	r3, [r7, #16]
90003cfa:	43db      	mvns	r3, r3
90003cfc:	69ba      	ldr	r2, [r7, #24]
90003cfe:	4013      	ands	r3, r2
90003d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003d02:	683b      	ldr	r3, [r7, #0]
90003d04:	685b      	ldr	r3, [r3, #4]
90003d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003d0a:	2b00      	cmp	r3, #0
90003d0c:	d003      	beq.n	90003d16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003d0e:	69ba      	ldr	r2, [r7, #24]
90003d10:	693b      	ldr	r3, [r7, #16]
90003d12:	4313      	orrs	r3, r2
90003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003d1a:	69bb      	ldr	r3, [r7, #24]
90003d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003d22:	685b      	ldr	r3, [r3, #4]
90003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003d26:	693b      	ldr	r3, [r7, #16]
90003d28:	43db      	mvns	r3, r3
90003d2a:	69ba      	ldr	r2, [r7, #24]
90003d2c:	4013      	ands	r3, r2
90003d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003d30:	683b      	ldr	r3, [r7, #0]
90003d32:	685b      	ldr	r3, [r3, #4]
90003d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003d38:	2b00      	cmp	r3, #0
90003d3a:	d003      	beq.n	90003d44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003d3c:	69ba      	ldr	r2, [r7, #24]
90003d3e:	693b      	ldr	r3, [r7, #16]
90003d40:	4313      	orrs	r3, r2
90003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003d48:	69bb      	ldr	r3, [r7, #24]
90003d4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003d4c:	697b      	ldr	r3, [r7, #20]
90003d4e:	685b      	ldr	r3, [r3, #4]
90003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003d52:	693b      	ldr	r3, [r7, #16]
90003d54:	43db      	mvns	r3, r3
90003d56:	69ba      	ldr	r2, [r7, #24]
90003d58:	4013      	ands	r3, r2
90003d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003d5c:	683b      	ldr	r3, [r7, #0]
90003d5e:	685b      	ldr	r3, [r3, #4]
90003d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003d64:	2b00      	cmp	r3, #0
90003d66:	d003      	beq.n	90003d70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003d68:	69ba      	ldr	r2, [r7, #24]
90003d6a:	693b      	ldr	r3, [r7, #16]
90003d6c:	4313      	orrs	r3, r2
90003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003d70:	697b      	ldr	r3, [r7, #20]
90003d72:	69ba      	ldr	r2, [r7, #24]
90003d74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003d76:	697b      	ldr	r3, [r7, #20]
90003d78:	681b      	ldr	r3, [r3, #0]
90003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003d7c:	693b      	ldr	r3, [r7, #16]
90003d7e:	43db      	mvns	r3, r3
90003d80:	69ba      	ldr	r2, [r7, #24]
90003d82:	4013      	ands	r3, r2
90003d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003d86:	683b      	ldr	r3, [r7, #0]
90003d88:	685b      	ldr	r3, [r3, #4]
90003d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003d8e:	2b00      	cmp	r3, #0
90003d90:	d003      	beq.n	90003d9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003d92:	69ba      	ldr	r2, [r7, #24]
90003d94:	693b      	ldr	r3, [r7, #16]
90003d96:	4313      	orrs	r3, r2
90003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003d9a:	697b      	ldr	r3, [r7, #20]
90003d9c:	69ba      	ldr	r2, [r7, #24]
90003d9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003da0:	69fb      	ldr	r3, [r7, #28]
90003da2:	3301      	adds	r3, #1
90003da4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003da6:	683b      	ldr	r3, [r7, #0]
90003da8:	681a      	ldr	r2, [r3, #0]
90003daa:	69fb      	ldr	r3, [r7, #28]
90003dac:	fa22 f303 	lsr.w	r3, r2, r3
90003db0:	2b00      	cmp	r3, #0
90003db2:	f47f ae63 	bne.w	90003a7c <HAL_GPIO_Init+0x14>
  }
}
90003db6:	bf00      	nop
90003db8:	bf00      	nop
90003dba:	3724      	adds	r7, #36	@ 0x24
90003dbc:	46bd      	mov	sp, r7
90003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
90003dc2:	4770      	bx	lr
90003dc4:	58000400 	.word	0x58000400

90003dc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
90003dc8:	b480      	push	{r7}
90003dca:	b087      	sub	sp, #28
90003dcc:	af00      	add	r7, sp, #0
90003dce:	6078      	str	r0, [r7, #4]
90003dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003dd2:	2300      	movs	r3, #0
90003dd4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003dd6:	4b75      	ldr	r3, [pc, #468]	@ (90003fac <HAL_GPIO_DeInit+0x1e4>)
90003dd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90003dda:	e0d9      	b.n	90003f90 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
90003ddc:	2201      	movs	r2, #1
90003dde:	697b      	ldr	r3, [r7, #20]
90003de0:	fa02 f303 	lsl.w	r3, r2, r3
90003de4:	683a      	ldr	r2, [r7, #0]
90003de6:	4013      	ands	r3, r2
90003de8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
90003dea:	68fb      	ldr	r3, [r7, #12]
90003dec:	2b00      	cmp	r3, #0
90003dee:	f000 80cc 	beq.w	90003f8a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
90003df2:	4a6f      	ldr	r2, [pc, #444]	@ (90003fb0 <HAL_GPIO_DeInit+0x1e8>)
90003df4:	697b      	ldr	r3, [r7, #20]
90003df6:	089b      	lsrs	r3, r3, #2
90003df8:	3302      	adds	r3, #2
90003dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003dfe:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90003e00:	697b      	ldr	r3, [r7, #20]
90003e02:	f003 0303 	and.w	r3, r3, #3
90003e06:	009b      	lsls	r3, r3, #2
90003e08:	220f      	movs	r2, #15
90003e0a:	fa02 f303 	lsl.w	r3, r2, r3
90003e0e:	68ba      	ldr	r2, [r7, #8]
90003e10:	4013      	ands	r3, r2
90003e12:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90003e14:	687b      	ldr	r3, [r7, #4]
90003e16:	4a67      	ldr	r2, [pc, #412]	@ (90003fb4 <HAL_GPIO_DeInit+0x1ec>)
90003e18:	4293      	cmp	r3, r2
90003e1a:	d037      	beq.n	90003e8c <HAL_GPIO_DeInit+0xc4>
90003e1c:	687b      	ldr	r3, [r7, #4]
90003e1e:	4a66      	ldr	r2, [pc, #408]	@ (90003fb8 <HAL_GPIO_DeInit+0x1f0>)
90003e20:	4293      	cmp	r3, r2
90003e22:	d031      	beq.n	90003e88 <HAL_GPIO_DeInit+0xc0>
90003e24:	687b      	ldr	r3, [r7, #4]
90003e26:	4a65      	ldr	r2, [pc, #404]	@ (90003fbc <HAL_GPIO_DeInit+0x1f4>)
90003e28:	4293      	cmp	r3, r2
90003e2a:	d02b      	beq.n	90003e84 <HAL_GPIO_DeInit+0xbc>
90003e2c:	687b      	ldr	r3, [r7, #4]
90003e2e:	4a64      	ldr	r2, [pc, #400]	@ (90003fc0 <HAL_GPIO_DeInit+0x1f8>)
90003e30:	4293      	cmp	r3, r2
90003e32:	d025      	beq.n	90003e80 <HAL_GPIO_DeInit+0xb8>
90003e34:	687b      	ldr	r3, [r7, #4]
90003e36:	4a63      	ldr	r2, [pc, #396]	@ (90003fc4 <HAL_GPIO_DeInit+0x1fc>)
90003e38:	4293      	cmp	r3, r2
90003e3a:	d01f      	beq.n	90003e7c <HAL_GPIO_DeInit+0xb4>
90003e3c:	687b      	ldr	r3, [r7, #4]
90003e3e:	4a62      	ldr	r2, [pc, #392]	@ (90003fc8 <HAL_GPIO_DeInit+0x200>)
90003e40:	4293      	cmp	r3, r2
90003e42:	d019      	beq.n	90003e78 <HAL_GPIO_DeInit+0xb0>
90003e44:	687b      	ldr	r3, [r7, #4]
90003e46:	4a61      	ldr	r2, [pc, #388]	@ (90003fcc <HAL_GPIO_DeInit+0x204>)
90003e48:	4293      	cmp	r3, r2
90003e4a:	d013      	beq.n	90003e74 <HAL_GPIO_DeInit+0xac>
90003e4c:	687b      	ldr	r3, [r7, #4]
90003e4e:	4a60      	ldr	r2, [pc, #384]	@ (90003fd0 <HAL_GPIO_DeInit+0x208>)
90003e50:	4293      	cmp	r3, r2
90003e52:	d00d      	beq.n	90003e70 <HAL_GPIO_DeInit+0xa8>
90003e54:	687b      	ldr	r3, [r7, #4]
90003e56:	4a5f      	ldr	r2, [pc, #380]	@ (90003fd4 <HAL_GPIO_DeInit+0x20c>)
90003e58:	4293      	cmp	r3, r2
90003e5a:	d007      	beq.n	90003e6c <HAL_GPIO_DeInit+0xa4>
90003e5c:	687b      	ldr	r3, [r7, #4]
90003e5e:	4a5e      	ldr	r2, [pc, #376]	@ (90003fd8 <HAL_GPIO_DeInit+0x210>)
90003e60:	4293      	cmp	r3, r2
90003e62:	d101      	bne.n	90003e68 <HAL_GPIO_DeInit+0xa0>
90003e64:	2309      	movs	r3, #9
90003e66:	e012      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e68:	230a      	movs	r3, #10
90003e6a:	e010      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e6c:	2308      	movs	r3, #8
90003e6e:	e00e      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e70:	2307      	movs	r3, #7
90003e72:	e00c      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e74:	2306      	movs	r3, #6
90003e76:	e00a      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e78:	2305      	movs	r3, #5
90003e7a:	e008      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e7c:	2304      	movs	r3, #4
90003e7e:	e006      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e80:	2303      	movs	r3, #3
90003e82:	e004      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e84:	2302      	movs	r3, #2
90003e86:	e002      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e88:	2301      	movs	r3, #1
90003e8a:	e000      	b.n	90003e8e <HAL_GPIO_DeInit+0xc6>
90003e8c:	2300      	movs	r3, #0
90003e8e:	697a      	ldr	r2, [r7, #20]
90003e90:	f002 0203 	and.w	r2, r2, #3
90003e94:	0092      	lsls	r2, r2, #2
90003e96:	4093      	lsls	r3, r2
90003e98:	68ba      	ldr	r2, [r7, #8]
90003e9a:	429a      	cmp	r2, r3
90003e9c:	d136      	bne.n	90003f0c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90003e9e:	693b      	ldr	r3, [r7, #16]
90003ea0:	681a      	ldr	r2, [r3, #0]
90003ea2:	68fb      	ldr	r3, [r7, #12]
90003ea4:	43db      	mvns	r3, r3
90003ea6:	401a      	ands	r2, r3
90003ea8:	693b      	ldr	r3, [r7, #16]
90003eaa:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90003eac:	693b      	ldr	r3, [r7, #16]
90003eae:	685a      	ldr	r2, [r3, #4]
90003eb0:	68fb      	ldr	r3, [r7, #12]
90003eb2:	43db      	mvns	r3, r3
90003eb4:	401a      	ands	r2, r3
90003eb6:	693b      	ldr	r3, [r7, #16]
90003eb8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90003eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003ebe:	685a      	ldr	r2, [r3, #4]
90003ec0:	68fb      	ldr	r3, [r7, #12]
90003ec2:	43db      	mvns	r3, r3
90003ec4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
90003ec8:	4013      	ands	r3, r2
90003eca:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90003ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003ed0:	681a      	ldr	r2, [r3, #0]
90003ed2:	68fb      	ldr	r3, [r7, #12]
90003ed4:	43db      	mvns	r3, r3
90003ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
90003eda:	4013      	ands	r3, r2
90003edc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
90003ede:	697b      	ldr	r3, [r7, #20]
90003ee0:	f003 0303 	and.w	r3, r3, #3
90003ee4:	009b      	lsls	r3, r3, #2
90003ee6:	220f      	movs	r2, #15
90003ee8:	fa02 f303 	lsl.w	r3, r2, r3
90003eec:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90003eee:	4a30      	ldr	r2, [pc, #192]	@ (90003fb0 <HAL_GPIO_DeInit+0x1e8>)
90003ef0:	697b      	ldr	r3, [r7, #20]
90003ef2:	089b      	lsrs	r3, r3, #2
90003ef4:	3302      	adds	r3, #2
90003ef6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90003efa:	68bb      	ldr	r3, [r7, #8]
90003efc:	43da      	mvns	r2, r3
90003efe:	482c      	ldr	r0, [pc, #176]	@ (90003fb0 <HAL_GPIO_DeInit+0x1e8>)
90003f00:	697b      	ldr	r3, [r7, #20]
90003f02:	089b      	lsrs	r3, r3, #2
90003f04:	400a      	ands	r2, r1
90003f06:	3302      	adds	r3, #2
90003f08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90003f0c:	687b      	ldr	r3, [r7, #4]
90003f0e:	681a      	ldr	r2, [r3, #0]
90003f10:	697b      	ldr	r3, [r7, #20]
90003f12:	005b      	lsls	r3, r3, #1
90003f14:	2103      	movs	r1, #3
90003f16:	fa01 f303 	lsl.w	r3, r1, r3
90003f1a:	431a      	orrs	r2, r3
90003f1c:	687b      	ldr	r3, [r7, #4]
90003f1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90003f20:	697b      	ldr	r3, [r7, #20]
90003f22:	08da      	lsrs	r2, r3, #3
90003f24:	687b      	ldr	r3, [r7, #4]
90003f26:	3208      	adds	r2, #8
90003f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90003f2c:	697b      	ldr	r3, [r7, #20]
90003f2e:	f003 0307 	and.w	r3, r3, #7
90003f32:	009b      	lsls	r3, r3, #2
90003f34:	220f      	movs	r2, #15
90003f36:	fa02 f303 	lsl.w	r3, r2, r3
90003f3a:	43db      	mvns	r3, r3
90003f3c:	697a      	ldr	r2, [r7, #20]
90003f3e:	08d2      	lsrs	r2, r2, #3
90003f40:	4019      	ands	r1, r3
90003f42:	687b      	ldr	r3, [r7, #4]
90003f44:	3208      	adds	r2, #8
90003f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003f4a:	687b      	ldr	r3, [r7, #4]
90003f4c:	68da      	ldr	r2, [r3, #12]
90003f4e:	697b      	ldr	r3, [r7, #20]
90003f50:	005b      	lsls	r3, r3, #1
90003f52:	2103      	movs	r1, #3
90003f54:	fa01 f303 	lsl.w	r3, r1, r3
90003f58:	43db      	mvns	r3, r3
90003f5a:	401a      	ands	r2, r3
90003f5c:	687b      	ldr	r3, [r7, #4]
90003f5e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90003f60:	687b      	ldr	r3, [r7, #4]
90003f62:	685a      	ldr	r2, [r3, #4]
90003f64:	2101      	movs	r1, #1
90003f66:	697b      	ldr	r3, [r7, #20]
90003f68:	fa01 f303 	lsl.w	r3, r1, r3
90003f6c:	43db      	mvns	r3, r3
90003f6e:	401a      	ands	r2, r3
90003f70:	687b      	ldr	r3, [r7, #4]
90003f72:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003f74:	687b      	ldr	r3, [r7, #4]
90003f76:	689a      	ldr	r2, [r3, #8]
90003f78:	697b      	ldr	r3, [r7, #20]
90003f7a:	005b      	lsls	r3, r3, #1
90003f7c:	2103      	movs	r1, #3
90003f7e:	fa01 f303 	lsl.w	r3, r1, r3
90003f82:	43db      	mvns	r3, r3
90003f84:	401a      	ands	r2, r3
90003f86:	687b      	ldr	r3, [r7, #4]
90003f88:	609a      	str	r2, [r3, #8]
    }

    position++;
90003f8a:	697b      	ldr	r3, [r7, #20]
90003f8c:	3301      	adds	r3, #1
90003f8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
90003f90:	683a      	ldr	r2, [r7, #0]
90003f92:	697b      	ldr	r3, [r7, #20]
90003f94:	fa22 f303 	lsr.w	r3, r2, r3
90003f98:	2b00      	cmp	r3, #0
90003f9a:	f47f af1f 	bne.w	90003ddc <HAL_GPIO_DeInit+0x14>
  }
}
90003f9e:	bf00      	nop
90003fa0:	bf00      	nop
90003fa2:	371c      	adds	r7, #28
90003fa4:	46bd      	mov	sp, r7
90003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
90003faa:	4770      	bx	lr
90003fac:	58000080 	.word	0x58000080
90003fb0:	58000400 	.word	0x58000400
90003fb4:	58020000 	.word	0x58020000
90003fb8:	58020400 	.word	0x58020400
90003fbc:	58020800 	.word	0x58020800
90003fc0:	58020c00 	.word	0x58020c00
90003fc4:	58021000 	.word	0x58021000
90003fc8:	58021400 	.word	0x58021400
90003fcc:	58021800 	.word	0x58021800
90003fd0:	58021c00 	.word	0x58021c00
90003fd4:	58022000 	.word	0x58022000
90003fd8:	58022400 	.word	0x58022400

90003fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003fdc:	b480      	push	{r7}
90003fde:	b083      	sub	sp, #12
90003fe0:	af00      	add	r7, sp, #0
90003fe2:	6078      	str	r0, [r7, #4]
90003fe4:	460b      	mov	r3, r1
90003fe6:	807b      	strh	r3, [r7, #2]
90003fe8:	4613      	mov	r3, r2
90003fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003fec:	787b      	ldrb	r3, [r7, #1]
90003fee:	2b00      	cmp	r3, #0
90003ff0:	d003      	beq.n	90003ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003ff2:	887a      	ldrh	r2, [r7, #2]
90003ff4:	687b      	ldr	r3, [r7, #4]
90003ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003ff8:	e003      	b.n	90004002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003ffa:	887b      	ldrh	r3, [r7, #2]
90003ffc:	041a      	lsls	r2, r3, #16
90003ffe:	687b      	ldr	r3, [r7, #4]
90004000:	619a      	str	r2, [r3, #24]
}
90004002:	bf00      	nop
90004004:	370c      	adds	r7, #12
90004006:	46bd      	mov	sp, r7
90004008:	f85d 7b04 	ldr.w	r7, [sp], #4
9000400c:	4770      	bx	lr

9000400e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
9000400e:	b580      	push	{r7, lr}
90004010:	b086      	sub	sp, #24
90004012:	af00      	add	r7, sp, #0
90004014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004016:	687b      	ldr	r3, [r7, #4]
90004018:	681b      	ldr	r3, [r3, #0]
9000401a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000401c:	693b      	ldr	r3, [r7, #16]
9000401e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90004020:	687b      	ldr	r3, [r7, #4]
90004022:	681b      	ldr	r3, [r3, #0]
90004024:	4618      	mov	r0, r3
90004026:	f005 ff09 	bl	90009e3c <USB_GetMode>
9000402a:	4603      	mov	r3, r0
9000402c:	2b01      	cmp	r3, #1
9000402e:	f040 80fb 	bne.w	90004228 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90004032:	687b      	ldr	r3, [r7, #4]
90004034:	681b      	ldr	r3, [r3, #0]
90004036:	4618      	mov	r0, r3
90004038:	f005 fecc 	bl	90009dd4 <USB_ReadInterrupts>
9000403c:	4603      	mov	r3, r0
9000403e:	2b00      	cmp	r3, #0
90004040:	f000 80f1 	beq.w	90004226 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90004044:	687b      	ldr	r3, [r7, #4]
90004046:	681b      	ldr	r3, [r3, #0]
90004048:	4618      	mov	r0, r3
9000404a:	f005 fec3 	bl	90009dd4 <USB_ReadInterrupts>
9000404e:	4603      	mov	r3, r0
90004050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90004058:	d104      	bne.n	90004064 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
9000405a:	687b      	ldr	r3, [r7, #4]
9000405c:	681b      	ldr	r3, [r3, #0]
9000405e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90004062:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90004064:	687b      	ldr	r3, [r7, #4]
90004066:	681b      	ldr	r3, [r3, #0]
90004068:	4618      	mov	r0, r3
9000406a:	f005 feb3 	bl	90009dd4 <USB_ReadInterrupts>
9000406e:	4603      	mov	r3, r0
90004070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90004074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90004078:	d104      	bne.n	90004084 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
9000407a:	687b      	ldr	r3, [r7, #4]
9000407c:	681b      	ldr	r3, [r3, #0]
9000407e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90004082:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90004084:	687b      	ldr	r3, [r7, #4]
90004086:	681b      	ldr	r3, [r3, #0]
90004088:	4618      	mov	r0, r3
9000408a:	f005 fea3 	bl	90009dd4 <USB_ReadInterrupts>
9000408e:	4603      	mov	r3, r0
90004090:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90004094:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90004098:	d104      	bne.n	900040a4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
9000409a:	687b      	ldr	r3, [r7, #4]
9000409c:	681b      	ldr	r3, [r3, #0]
9000409e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
900040a2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
900040a4:	687b      	ldr	r3, [r7, #4]
900040a6:	681b      	ldr	r3, [r3, #0]
900040a8:	4618      	mov	r0, r3
900040aa:	f005 fe93 	bl	90009dd4 <USB_ReadInterrupts>
900040ae:	4603      	mov	r3, r0
900040b0:	f003 0302 	and.w	r3, r3, #2
900040b4:	2b02      	cmp	r3, #2
900040b6:	d103      	bne.n	900040c0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
900040b8:	687b      	ldr	r3, [r7, #4]
900040ba:	681b      	ldr	r3, [r3, #0]
900040bc:	2202      	movs	r2, #2
900040be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
900040c0:	687b      	ldr	r3, [r7, #4]
900040c2:	681b      	ldr	r3, [r3, #0]
900040c4:	4618      	mov	r0, r3
900040c6:	f005 fe85 	bl	90009dd4 <USB_ReadInterrupts>
900040ca:	4603      	mov	r3, r0
900040cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900040d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900040d4:	d120      	bne.n	90004118 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
900040d6:	687b      	ldr	r3, [r7, #4]
900040d8:	681b      	ldr	r3, [r3, #0]
900040da:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
900040de:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
900040e0:	68fb      	ldr	r3, [r7, #12]
900040e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900040e6:	681b      	ldr	r3, [r3, #0]
900040e8:	f003 0301 	and.w	r3, r3, #1
900040ec:	2b00      	cmp	r3, #0
900040ee:	d113      	bne.n	90004118 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
900040f0:	2110      	movs	r1, #16
900040f2:	6938      	ldr	r0, [r7, #16]
900040f4:	f005 fdb6 	bl	90009c64 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
900040f8:	6938      	ldr	r0, [r7, #16]
900040fa:	f005 fde5 	bl	90009cc8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
900040fe:	687b      	ldr	r3, [r7, #4]
90004100:	7a5b      	ldrb	r3, [r3, #9]
90004102:	2b02      	cmp	r3, #2
90004104:	d105      	bne.n	90004112 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90004106:	687b      	ldr	r3, [r7, #4]
90004108:	681b      	ldr	r3, [r3, #0]
9000410a:	2101      	movs	r1, #1
9000410c:	4618      	mov	r0, r3
9000410e:	f005 fea3 	bl	90009e58 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90004112:	6878      	ldr	r0, [r7, #4]
90004114:	f7fc fc48 	bl	900009a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90004118:	687b      	ldr	r3, [r7, #4]
9000411a:	681b      	ldr	r3, [r3, #0]
9000411c:	4618      	mov	r0, r3
9000411e:	f005 fe59 	bl	90009dd4 <USB_ReadInterrupts>
90004122:	4603      	mov	r3, r0
90004124:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90004128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
9000412c:	d102      	bne.n	90004134 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
9000412e:	6878      	ldr	r0, [r7, #4]
90004130:	f001 fca1 	bl	90005a76 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90004134:	687b      	ldr	r3, [r7, #4]
90004136:	681b      	ldr	r3, [r3, #0]
90004138:	4618      	mov	r0, r3
9000413a:	f005 fe4b 	bl	90009dd4 <USB_ReadInterrupts>
9000413e:	4603      	mov	r3, r0
90004140:	f003 0308 	and.w	r3, r3, #8
90004144:	2b08      	cmp	r3, #8
90004146:	d106      	bne.n	90004156 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90004148:	6878      	ldr	r0, [r7, #4]
9000414a:	f7fc fc11 	bl	90000970 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
9000414e:	687b      	ldr	r3, [r7, #4]
90004150:	681b      	ldr	r3, [r3, #0]
90004152:	2208      	movs	r2, #8
90004154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90004156:	687b      	ldr	r3, [r7, #4]
90004158:	681b      	ldr	r3, [r3, #0]
9000415a:	4618      	mov	r0, r3
9000415c:	f005 fe3a 	bl	90009dd4 <USB_ReadInterrupts>
90004160:	4603      	mov	r3, r0
90004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90004166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000416a:	d139      	bne.n	900041e0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
9000416c:	687b      	ldr	r3, [r7, #4]
9000416e:	681b      	ldr	r3, [r3, #0]
90004170:	4618      	mov	r0, r3
90004172:	f005 feae 	bl	90009ed2 <USB_HC_ReadInterrupt>
90004176:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004178:	2300      	movs	r3, #0
9000417a:	617b      	str	r3, [r7, #20]
9000417c:	e025      	b.n	900041ca <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
9000417e:	697b      	ldr	r3, [r7, #20]
90004180:	f003 030f 	and.w	r3, r3, #15
90004184:	68ba      	ldr	r2, [r7, #8]
90004186:	fa22 f303 	lsr.w	r3, r2, r3
9000418a:	f003 0301 	and.w	r3, r3, #1
9000418e:	2b00      	cmp	r3, #0
90004190:	d018      	beq.n	900041c4 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90004192:	697b      	ldr	r3, [r7, #20]
90004194:	015a      	lsls	r2, r3, #5
90004196:	68fb      	ldr	r3, [r7, #12]
90004198:	4413      	add	r3, r2
9000419a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000419e:	681b      	ldr	r3, [r3, #0]
900041a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
900041a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
900041a8:	d106      	bne.n	900041b8 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
900041aa:	697b      	ldr	r3, [r7, #20]
900041ac:	b2db      	uxtb	r3, r3
900041ae:	4619      	mov	r1, r3
900041b0:	6878      	ldr	r0, [r7, #4]
900041b2:	f000 f859 	bl	90004268 <HCD_HC_IN_IRQHandler>
900041b6:	e005      	b.n	900041c4 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
900041b8:	697b      	ldr	r3, [r7, #20]
900041ba:	b2db      	uxtb	r3, r3
900041bc:	4619      	mov	r1, r3
900041be:	6878      	ldr	r0, [r7, #4]
900041c0:	f000 febb 	bl	90004f3a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900041c4:	697b      	ldr	r3, [r7, #20]
900041c6:	3301      	adds	r3, #1
900041c8:	617b      	str	r3, [r7, #20]
900041ca:	687b      	ldr	r3, [r7, #4]
900041cc:	795b      	ldrb	r3, [r3, #5]
900041ce:	461a      	mov	r2, r3
900041d0:	697b      	ldr	r3, [r7, #20]
900041d2:	4293      	cmp	r3, r2
900041d4:	d3d3      	bcc.n	9000417e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
900041d6:	687b      	ldr	r3, [r7, #4]
900041d8:	681b      	ldr	r3, [r3, #0]
900041da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
900041e0:	687b      	ldr	r3, [r7, #4]
900041e2:	681b      	ldr	r3, [r3, #0]
900041e4:	4618      	mov	r0, r3
900041e6:	f005 fdf5 	bl	90009dd4 <USB_ReadInterrupts>
900041ea:	4603      	mov	r3, r0
900041ec:	f003 0310 	and.w	r3, r3, #16
900041f0:	2b10      	cmp	r3, #16
900041f2:	d101      	bne.n	900041f8 <HAL_HCD_IRQHandler+0x1ea>
900041f4:	2301      	movs	r3, #1
900041f6:	e000      	b.n	900041fa <HAL_HCD_IRQHandler+0x1ec>
900041f8:	2300      	movs	r3, #0
900041fa:	2b00      	cmp	r3, #0
900041fc:	d014      	beq.n	90004228 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900041fe:	687b      	ldr	r3, [r7, #4]
90004200:	681b      	ldr	r3, [r3, #0]
90004202:	699a      	ldr	r2, [r3, #24]
90004204:	687b      	ldr	r3, [r7, #4]
90004206:	681b      	ldr	r3, [r3, #0]
90004208:	f022 0210 	bic.w	r2, r2, #16
9000420c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
9000420e:	6878      	ldr	r0, [r7, #4]
90004210:	f001 fb52 	bl	900058b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004214:	687b      	ldr	r3, [r7, #4]
90004216:	681b      	ldr	r3, [r3, #0]
90004218:	699a      	ldr	r2, [r3, #24]
9000421a:	687b      	ldr	r3, [r7, #4]
9000421c:	681b      	ldr	r3, [r3, #0]
9000421e:	f042 0210 	orr.w	r2, r2, #16
90004222:	619a      	str	r2, [r3, #24]
90004224:	e000      	b.n	90004228 <HAL_HCD_IRQHandler+0x21a>
      return;
90004226:	bf00      	nop
    }
  }
}
90004228:	3718      	adds	r7, #24
9000422a:	46bd      	mov	sp, r7
9000422c:	bd80      	pop	{r7, pc}

9000422e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
9000422e:	b580      	push	{r7, lr}
90004230:	b082      	sub	sp, #8
90004232:	af00      	add	r7, sp, #0
90004234:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
90004236:	687b      	ldr	r3, [r7, #4]
90004238:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
9000423c:	2b01      	cmp	r3, #1
9000423e:	d101      	bne.n	90004244 <HAL_HCD_Stop+0x16>
90004240:	2302      	movs	r3, #2
90004242:	e00d      	b.n	90004260 <HAL_HCD_Stop+0x32>
90004244:	687b      	ldr	r3, [r7, #4]
90004246:	2201      	movs	r2, #1
90004248:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
9000424c:	687b      	ldr	r3, [r7, #4]
9000424e:	681b      	ldr	r3, [r3, #0]
90004250:	4618      	mov	r0, r3
90004252:	f005 ff6f 	bl	9000a134 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90004256:	687b      	ldr	r3, [r7, #4]
90004258:	2200      	movs	r2, #0
9000425a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
9000425e:	2300      	movs	r3, #0
}
90004260:	4618      	mov	r0, r3
90004262:	3708      	adds	r7, #8
90004264:	46bd      	mov	sp, r7
90004266:	bd80      	pop	{r7, pc}

90004268 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004268:	b580      	push	{r7, lr}
9000426a:	b086      	sub	sp, #24
9000426c:	af00      	add	r7, sp, #0
9000426e:	6078      	str	r0, [r7, #4]
90004270:	460b      	mov	r3, r1
90004272:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004274:	687b      	ldr	r3, [r7, #4]
90004276:	681b      	ldr	r3, [r3, #0]
90004278:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000427a:	697b      	ldr	r3, [r7, #20]
9000427c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
9000427e:	687b      	ldr	r3, [r7, #4]
90004280:	681b      	ldr	r3, [r3, #0]
90004282:	78fa      	ldrb	r2, [r7, #3]
90004284:	4611      	mov	r1, r2
90004286:	4618      	mov	r0, r3
90004288:	f005 fdb7 	bl	90009dfa <USB_ReadChInterrupts>
9000428c:	4603      	mov	r3, r0
9000428e:	f003 0304 	and.w	r3, r3, #4
90004292:	2b04      	cmp	r3, #4
90004294:	d11a      	bne.n	900042cc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004296:	78fb      	ldrb	r3, [r7, #3]
90004298:	015a      	lsls	r2, r3, #5
9000429a:	693b      	ldr	r3, [r7, #16]
9000429c:	4413      	add	r3, r2
9000429e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042a2:	461a      	mov	r2, r3
900042a4:	2304      	movs	r3, #4
900042a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900042a8:	78fa      	ldrb	r2, [r7, #3]
900042aa:	6879      	ldr	r1, [r7, #4]
900042ac:	4613      	mov	r3, r2
900042ae:	011b      	lsls	r3, r3, #4
900042b0:	1a9b      	subs	r3, r3, r2
900042b2:	009b      	lsls	r3, r3, #2
900042b4:	440b      	add	r3, r1
900042b6:	334d      	adds	r3, #77	@ 0x4d
900042b8:	2207      	movs	r2, #7
900042ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042bc:	687b      	ldr	r3, [r7, #4]
900042be:	681b      	ldr	r3, [r3, #0]
900042c0:	78fa      	ldrb	r2, [r7, #3]
900042c2:	4611      	mov	r1, r2
900042c4:	4618      	mov	r0, r3
900042c6:	f005 fe15 	bl	90009ef4 <USB_HC_Halt>
900042ca:	e09e      	b.n	9000440a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
900042cc:	687b      	ldr	r3, [r7, #4]
900042ce:	681b      	ldr	r3, [r3, #0]
900042d0:	78fa      	ldrb	r2, [r7, #3]
900042d2:	4611      	mov	r1, r2
900042d4:	4618      	mov	r0, r3
900042d6:	f005 fd90 	bl	90009dfa <USB_ReadChInterrupts>
900042da:	4603      	mov	r3, r0
900042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900042e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900042e4:	d11b      	bne.n	9000431e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
900042e6:	78fb      	ldrb	r3, [r7, #3]
900042e8:	015a      	lsls	r2, r3, #5
900042ea:	693b      	ldr	r3, [r7, #16]
900042ec:	4413      	add	r3, r2
900042ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042f2:	461a      	mov	r2, r3
900042f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
900042f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
900042fa:	78fa      	ldrb	r2, [r7, #3]
900042fc:	6879      	ldr	r1, [r7, #4]
900042fe:	4613      	mov	r3, r2
90004300:	011b      	lsls	r3, r3, #4
90004302:	1a9b      	subs	r3, r3, r2
90004304:	009b      	lsls	r3, r3, #2
90004306:	440b      	add	r3, r1
90004308:	334d      	adds	r3, #77	@ 0x4d
9000430a:	2208      	movs	r2, #8
9000430c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000430e:	687b      	ldr	r3, [r7, #4]
90004310:	681b      	ldr	r3, [r3, #0]
90004312:	78fa      	ldrb	r2, [r7, #3]
90004314:	4611      	mov	r1, r2
90004316:	4618      	mov	r0, r3
90004318:	f005 fdec 	bl	90009ef4 <USB_HC_Halt>
9000431c:	e075      	b.n	9000440a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000431e:	687b      	ldr	r3, [r7, #4]
90004320:	681b      	ldr	r3, [r3, #0]
90004322:	78fa      	ldrb	r2, [r7, #3]
90004324:	4611      	mov	r1, r2
90004326:	4618      	mov	r0, r3
90004328:	f005 fd67 	bl	90009dfa <USB_ReadChInterrupts>
9000432c:	4603      	mov	r3, r0
9000432e:	f003 0308 	and.w	r3, r3, #8
90004332:	2b08      	cmp	r3, #8
90004334:	d11a      	bne.n	9000436c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90004336:	78fb      	ldrb	r3, [r7, #3]
90004338:	015a      	lsls	r2, r3, #5
9000433a:	693b      	ldr	r3, [r7, #16]
9000433c:	4413      	add	r3, r2
9000433e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004342:	461a      	mov	r2, r3
90004344:	2308      	movs	r3, #8
90004346:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004348:	78fa      	ldrb	r2, [r7, #3]
9000434a:	6879      	ldr	r1, [r7, #4]
9000434c:	4613      	mov	r3, r2
9000434e:	011b      	lsls	r3, r3, #4
90004350:	1a9b      	subs	r3, r3, r2
90004352:	009b      	lsls	r3, r3, #2
90004354:	440b      	add	r3, r1
90004356:	334d      	adds	r3, #77	@ 0x4d
90004358:	2206      	movs	r2, #6
9000435a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000435c:	687b      	ldr	r3, [r7, #4]
9000435e:	681b      	ldr	r3, [r3, #0]
90004360:	78fa      	ldrb	r2, [r7, #3]
90004362:	4611      	mov	r1, r2
90004364:	4618      	mov	r0, r3
90004366:	f005 fdc5 	bl	90009ef4 <USB_HC_Halt>
9000436a:	e04e      	b.n	9000440a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
9000436c:	687b      	ldr	r3, [r7, #4]
9000436e:	681b      	ldr	r3, [r3, #0]
90004370:	78fa      	ldrb	r2, [r7, #3]
90004372:	4611      	mov	r1, r2
90004374:	4618      	mov	r0, r3
90004376:	f005 fd40 	bl	90009dfa <USB_ReadChInterrupts>
9000437a:	4603      	mov	r3, r0
9000437c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90004384:	d11b      	bne.n	900043be <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90004386:	78fb      	ldrb	r3, [r7, #3]
90004388:	015a      	lsls	r2, r3, #5
9000438a:	693b      	ldr	r3, [r7, #16]
9000438c:	4413      	add	r3, r2
9000438e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004392:	461a      	mov	r2, r3
90004394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90004398:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000439a:	78fa      	ldrb	r2, [r7, #3]
9000439c:	6879      	ldr	r1, [r7, #4]
9000439e:	4613      	mov	r3, r2
900043a0:	011b      	lsls	r3, r3, #4
900043a2:	1a9b      	subs	r3, r3, r2
900043a4:	009b      	lsls	r3, r3, #2
900043a6:	440b      	add	r3, r1
900043a8:	334d      	adds	r3, #77	@ 0x4d
900043aa:	2209      	movs	r2, #9
900043ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900043ae:	687b      	ldr	r3, [r7, #4]
900043b0:	681b      	ldr	r3, [r3, #0]
900043b2:	78fa      	ldrb	r2, [r7, #3]
900043b4:	4611      	mov	r1, r2
900043b6:	4618      	mov	r0, r3
900043b8:	f005 fd9c 	bl	90009ef4 <USB_HC_Halt>
900043bc:	e025      	b.n	9000440a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
900043be:	687b      	ldr	r3, [r7, #4]
900043c0:	681b      	ldr	r3, [r3, #0]
900043c2:	78fa      	ldrb	r2, [r7, #3]
900043c4:	4611      	mov	r1, r2
900043c6:	4618      	mov	r0, r3
900043c8:	f005 fd17 	bl	90009dfa <USB_ReadChInterrupts>
900043cc:	4603      	mov	r3, r0
900043ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900043d2:	2b80      	cmp	r3, #128	@ 0x80
900043d4:	d119      	bne.n	9000440a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900043d6:	78fb      	ldrb	r3, [r7, #3]
900043d8:	015a      	lsls	r2, r3, #5
900043da:	693b      	ldr	r3, [r7, #16]
900043dc:	4413      	add	r3, r2
900043de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043e2:	461a      	mov	r2, r3
900043e4:	2380      	movs	r3, #128	@ 0x80
900043e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900043e8:	78fa      	ldrb	r2, [r7, #3]
900043ea:	6879      	ldr	r1, [r7, #4]
900043ec:	4613      	mov	r3, r2
900043ee:	011b      	lsls	r3, r3, #4
900043f0:	1a9b      	subs	r3, r3, r2
900043f2:	009b      	lsls	r3, r3, #2
900043f4:	440b      	add	r3, r1
900043f6:	334d      	adds	r3, #77	@ 0x4d
900043f8:	2207      	movs	r2, #7
900043fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900043fc:	687b      	ldr	r3, [r7, #4]
900043fe:	681b      	ldr	r3, [r3, #0]
90004400:	78fa      	ldrb	r2, [r7, #3]
90004402:	4611      	mov	r1, r2
90004404:	4618      	mov	r0, r3
90004406:	f005 fd75 	bl	90009ef4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
9000440a:	687b      	ldr	r3, [r7, #4]
9000440c:	681b      	ldr	r3, [r3, #0]
9000440e:	78fa      	ldrb	r2, [r7, #3]
90004410:	4611      	mov	r1, r2
90004412:	4618      	mov	r0, r3
90004414:	f005 fcf1 	bl	90009dfa <USB_ReadChInterrupts>
90004418:	4603      	mov	r3, r0
9000441a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000441e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004422:	d112      	bne.n	9000444a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004424:	687b      	ldr	r3, [r7, #4]
90004426:	681b      	ldr	r3, [r3, #0]
90004428:	78fa      	ldrb	r2, [r7, #3]
9000442a:	4611      	mov	r1, r2
9000442c:	4618      	mov	r0, r3
9000442e:	f005 fd61 	bl	90009ef4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004432:	78fb      	ldrb	r3, [r7, #3]
90004434:	015a      	lsls	r2, r3, #5
90004436:	693b      	ldr	r3, [r7, #16]
90004438:	4413      	add	r3, r2
9000443a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000443e:	461a      	mov	r2, r3
90004440:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004444:	6093      	str	r3, [r2, #8]
90004446:	f000 bd75 	b.w	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
9000444a:	687b      	ldr	r3, [r7, #4]
9000444c:	681b      	ldr	r3, [r3, #0]
9000444e:	78fa      	ldrb	r2, [r7, #3]
90004450:	4611      	mov	r1, r2
90004452:	4618      	mov	r0, r3
90004454:	f005 fcd1 	bl	90009dfa <USB_ReadChInterrupts>
90004458:	4603      	mov	r3, r0
9000445a:	f003 0301 	and.w	r3, r3, #1
9000445e:	2b01      	cmp	r3, #1
90004460:	f040 8128 	bne.w	900046b4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004464:	78fb      	ldrb	r3, [r7, #3]
90004466:	015a      	lsls	r2, r3, #5
90004468:	693b      	ldr	r3, [r7, #16]
9000446a:	4413      	add	r3, r2
9000446c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004470:	461a      	mov	r2, r3
90004472:	2320      	movs	r3, #32
90004474:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
90004476:	78fa      	ldrb	r2, [r7, #3]
90004478:	6879      	ldr	r1, [r7, #4]
9000447a:	4613      	mov	r3, r2
9000447c:	011b      	lsls	r3, r3, #4
9000447e:	1a9b      	subs	r3, r3, r2
90004480:	009b      	lsls	r3, r3, #2
90004482:	440b      	add	r3, r1
90004484:	331b      	adds	r3, #27
90004486:	781b      	ldrb	r3, [r3, #0]
90004488:	2b01      	cmp	r3, #1
9000448a:	d119      	bne.n	900044c0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
9000448c:	78fa      	ldrb	r2, [r7, #3]
9000448e:	6879      	ldr	r1, [r7, #4]
90004490:	4613      	mov	r3, r2
90004492:	011b      	lsls	r3, r3, #4
90004494:	1a9b      	subs	r3, r3, r2
90004496:	009b      	lsls	r3, r3, #2
90004498:	440b      	add	r3, r1
9000449a:	331b      	adds	r3, #27
9000449c:	2200      	movs	r2, #0
9000449e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900044a0:	78fb      	ldrb	r3, [r7, #3]
900044a2:	015a      	lsls	r2, r3, #5
900044a4:	693b      	ldr	r3, [r7, #16]
900044a6:	4413      	add	r3, r2
900044a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044ac:	685b      	ldr	r3, [r3, #4]
900044ae:	78fa      	ldrb	r2, [r7, #3]
900044b0:	0151      	lsls	r1, r2, #5
900044b2:	693a      	ldr	r2, [r7, #16]
900044b4:	440a      	add	r2, r1
900044b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900044ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900044be:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
900044c0:	687b      	ldr	r3, [r7, #4]
900044c2:	799b      	ldrb	r3, [r3, #6]
900044c4:	2b00      	cmp	r3, #0
900044c6:	d01b      	beq.n	90004500 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900044c8:	78fa      	ldrb	r2, [r7, #3]
900044ca:	6879      	ldr	r1, [r7, #4]
900044cc:	4613      	mov	r3, r2
900044ce:	011b      	lsls	r3, r3, #4
900044d0:	1a9b      	subs	r3, r3, r2
900044d2:	009b      	lsls	r3, r3, #2
900044d4:	440b      	add	r3, r1
900044d6:	3330      	adds	r3, #48	@ 0x30
900044d8:	6819      	ldr	r1, [r3, #0]
900044da:	78fb      	ldrb	r3, [r7, #3]
900044dc:	015a      	lsls	r2, r3, #5
900044de:	693b      	ldr	r3, [r7, #16]
900044e0:	4413      	add	r3, r2
900044e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044e6:	691b      	ldr	r3, [r3, #16]
900044e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
900044ec:	78fa      	ldrb	r2, [r7, #3]
900044ee:	1ac9      	subs	r1, r1, r3
900044f0:	6878      	ldr	r0, [r7, #4]
900044f2:	4613      	mov	r3, r2
900044f4:	011b      	lsls	r3, r3, #4
900044f6:	1a9b      	subs	r3, r3, r2
900044f8:	009b      	lsls	r3, r3, #2
900044fa:	4403      	add	r3, r0
900044fc:	3338      	adds	r3, #56	@ 0x38
900044fe:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004500:	78fa      	ldrb	r2, [r7, #3]
90004502:	6879      	ldr	r1, [r7, #4]
90004504:	4613      	mov	r3, r2
90004506:	011b      	lsls	r3, r3, #4
90004508:	1a9b      	subs	r3, r3, r2
9000450a:	009b      	lsls	r3, r3, #2
9000450c:	440b      	add	r3, r1
9000450e:	334d      	adds	r3, #77	@ 0x4d
90004510:	2201      	movs	r2, #1
90004512:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004514:	78fa      	ldrb	r2, [r7, #3]
90004516:	6879      	ldr	r1, [r7, #4]
90004518:	4613      	mov	r3, r2
9000451a:	011b      	lsls	r3, r3, #4
9000451c:	1a9b      	subs	r3, r3, r2
9000451e:	009b      	lsls	r3, r3, #2
90004520:	440b      	add	r3, r1
90004522:	3344      	adds	r3, #68	@ 0x44
90004524:	2200      	movs	r2, #0
90004526:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004528:	78fb      	ldrb	r3, [r7, #3]
9000452a:	015a      	lsls	r2, r3, #5
9000452c:	693b      	ldr	r3, [r7, #16]
9000452e:	4413      	add	r3, r2
90004530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004534:	461a      	mov	r2, r3
90004536:	2301      	movs	r3, #1
90004538:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000453a:	78fa      	ldrb	r2, [r7, #3]
9000453c:	6879      	ldr	r1, [r7, #4]
9000453e:	4613      	mov	r3, r2
90004540:	011b      	lsls	r3, r3, #4
90004542:	1a9b      	subs	r3, r3, r2
90004544:	009b      	lsls	r3, r3, #2
90004546:	440b      	add	r3, r1
90004548:	3326      	adds	r3, #38	@ 0x26
9000454a:	781b      	ldrb	r3, [r3, #0]
9000454c:	2b00      	cmp	r3, #0
9000454e:	d00a      	beq.n	90004566 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004550:	78fa      	ldrb	r2, [r7, #3]
90004552:	6879      	ldr	r1, [r7, #4]
90004554:	4613      	mov	r3, r2
90004556:	011b      	lsls	r3, r3, #4
90004558:	1a9b      	subs	r3, r3, r2
9000455a:	009b      	lsls	r3, r3, #2
9000455c:	440b      	add	r3, r1
9000455e:	3326      	adds	r3, #38	@ 0x26
90004560:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004562:	2b02      	cmp	r3, #2
90004564:	d110      	bne.n	90004588 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004566:	687b      	ldr	r3, [r7, #4]
90004568:	681b      	ldr	r3, [r3, #0]
9000456a:	78fa      	ldrb	r2, [r7, #3]
9000456c:	4611      	mov	r1, r2
9000456e:	4618      	mov	r0, r3
90004570:	f005 fcc0 	bl	90009ef4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004574:	78fb      	ldrb	r3, [r7, #3]
90004576:	015a      	lsls	r2, r3, #5
90004578:	693b      	ldr	r3, [r7, #16]
9000457a:	4413      	add	r3, r2
9000457c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004580:	461a      	mov	r2, r3
90004582:	2310      	movs	r3, #16
90004584:	6093      	str	r3, [r2, #8]
90004586:	e03d      	b.n	90004604 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004588:	78fa      	ldrb	r2, [r7, #3]
9000458a:	6879      	ldr	r1, [r7, #4]
9000458c:	4613      	mov	r3, r2
9000458e:	011b      	lsls	r3, r3, #4
90004590:	1a9b      	subs	r3, r3, r2
90004592:	009b      	lsls	r3, r3, #2
90004594:	440b      	add	r3, r1
90004596:	3326      	adds	r3, #38	@ 0x26
90004598:	781b      	ldrb	r3, [r3, #0]
9000459a:	2b03      	cmp	r3, #3
9000459c:	d00a      	beq.n	900045b4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
9000459e:	78fa      	ldrb	r2, [r7, #3]
900045a0:	6879      	ldr	r1, [r7, #4]
900045a2:	4613      	mov	r3, r2
900045a4:	011b      	lsls	r3, r3, #4
900045a6:	1a9b      	subs	r3, r3, r2
900045a8:	009b      	lsls	r3, r3, #2
900045aa:	440b      	add	r3, r1
900045ac:	3326      	adds	r3, #38	@ 0x26
900045ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900045b0:	2b01      	cmp	r3, #1
900045b2:	d127      	bne.n	90004604 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900045b4:	78fb      	ldrb	r3, [r7, #3]
900045b6:	015a      	lsls	r2, r3, #5
900045b8:	693b      	ldr	r3, [r7, #16]
900045ba:	4413      	add	r3, r2
900045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900045c0:	681b      	ldr	r3, [r3, #0]
900045c2:	78fa      	ldrb	r2, [r7, #3]
900045c4:	0151      	lsls	r1, r2, #5
900045c6:	693a      	ldr	r2, [r7, #16]
900045c8:	440a      	add	r2, r1
900045ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900045ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
900045d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900045d4:	78fa      	ldrb	r2, [r7, #3]
900045d6:	6879      	ldr	r1, [r7, #4]
900045d8:	4613      	mov	r3, r2
900045da:	011b      	lsls	r3, r3, #4
900045dc:	1a9b      	subs	r3, r3, r2
900045de:	009b      	lsls	r3, r3, #2
900045e0:	440b      	add	r3, r1
900045e2:	334c      	adds	r3, #76	@ 0x4c
900045e4:	2201      	movs	r2, #1
900045e6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900045e8:	78fa      	ldrb	r2, [r7, #3]
900045ea:	6879      	ldr	r1, [r7, #4]
900045ec:	4613      	mov	r3, r2
900045ee:	011b      	lsls	r3, r3, #4
900045f0:	1a9b      	subs	r3, r3, r2
900045f2:	009b      	lsls	r3, r3, #2
900045f4:	440b      	add	r3, r1
900045f6:	334c      	adds	r3, #76	@ 0x4c
900045f8:	781a      	ldrb	r2, [r3, #0]
900045fa:	78fb      	ldrb	r3, [r7, #3]
900045fc:	4619      	mov	r1, r3
900045fe:	6878      	ldr	r0, [r7, #4]
90004600:	f7fc f9fc 	bl	900009fc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
90004604:	687b      	ldr	r3, [r7, #4]
90004606:	799b      	ldrb	r3, [r3, #6]
90004608:	2b01      	cmp	r3, #1
9000460a:	d13b      	bne.n	90004684 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
9000460c:	78fa      	ldrb	r2, [r7, #3]
9000460e:	6879      	ldr	r1, [r7, #4]
90004610:	4613      	mov	r3, r2
90004612:	011b      	lsls	r3, r3, #4
90004614:	1a9b      	subs	r3, r3, r2
90004616:	009b      	lsls	r3, r3, #2
90004618:	440b      	add	r3, r1
9000461a:	3338      	adds	r3, #56	@ 0x38
9000461c:	6819      	ldr	r1, [r3, #0]
9000461e:	78fa      	ldrb	r2, [r7, #3]
90004620:	6878      	ldr	r0, [r7, #4]
90004622:	4613      	mov	r3, r2
90004624:	011b      	lsls	r3, r3, #4
90004626:	1a9b      	subs	r3, r3, r2
90004628:	009b      	lsls	r3, r3, #2
9000462a:	4403      	add	r3, r0
9000462c:	3328      	adds	r3, #40	@ 0x28
9000462e:	881b      	ldrh	r3, [r3, #0]
90004630:	440b      	add	r3, r1
90004632:	1e59      	subs	r1, r3, #1
90004634:	78fa      	ldrb	r2, [r7, #3]
90004636:	6878      	ldr	r0, [r7, #4]
90004638:	4613      	mov	r3, r2
9000463a:	011b      	lsls	r3, r3, #4
9000463c:	1a9b      	subs	r3, r3, r2
9000463e:	009b      	lsls	r3, r3, #2
90004640:	4403      	add	r3, r0
90004642:	3328      	adds	r3, #40	@ 0x28
90004644:	881b      	ldrh	r3, [r3, #0]
90004646:	fbb1 f3f3 	udiv	r3, r1, r3
9000464a:	f003 0301 	and.w	r3, r3, #1
9000464e:	2b00      	cmp	r3, #0
90004650:	f000 8470 	beq.w	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004654:	78fa      	ldrb	r2, [r7, #3]
90004656:	6879      	ldr	r1, [r7, #4]
90004658:	4613      	mov	r3, r2
9000465a:	011b      	lsls	r3, r3, #4
9000465c:	1a9b      	subs	r3, r3, r2
9000465e:	009b      	lsls	r3, r3, #2
90004660:	440b      	add	r3, r1
90004662:	333c      	adds	r3, #60	@ 0x3c
90004664:	781b      	ldrb	r3, [r3, #0]
90004666:	78fa      	ldrb	r2, [r7, #3]
90004668:	f083 0301 	eor.w	r3, r3, #1
9000466c:	b2d8      	uxtb	r0, r3
9000466e:	6879      	ldr	r1, [r7, #4]
90004670:	4613      	mov	r3, r2
90004672:	011b      	lsls	r3, r3, #4
90004674:	1a9b      	subs	r3, r3, r2
90004676:	009b      	lsls	r3, r3, #2
90004678:	440b      	add	r3, r1
9000467a:	333c      	adds	r3, #60	@ 0x3c
9000467c:	4602      	mov	r2, r0
9000467e:	701a      	strb	r2, [r3, #0]
90004680:	f000 bc58 	b.w	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004684:	78fa      	ldrb	r2, [r7, #3]
90004686:	6879      	ldr	r1, [r7, #4]
90004688:	4613      	mov	r3, r2
9000468a:	011b      	lsls	r3, r3, #4
9000468c:	1a9b      	subs	r3, r3, r2
9000468e:	009b      	lsls	r3, r3, #2
90004690:	440b      	add	r3, r1
90004692:	333c      	adds	r3, #60	@ 0x3c
90004694:	781b      	ldrb	r3, [r3, #0]
90004696:	78fa      	ldrb	r2, [r7, #3]
90004698:	f083 0301 	eor.w	r3, r3, #1
9000469c:	b2d8      	uxtb	r0, r3
9000469e:	6879      	ldr	r1, [r7, #4]
900046a0:	4613      	mov	r3, r2
900046a2:	011b      	lsls	r3, r3, #4
900046a4:	1a9b      	subs	r3, r3, r2
900046a6:	009b      	lsls	r3, r3, #2
900046a8:	440b      	add	r3, r1
900046aa:	333c      	adds	r3, #60	@ 0x3c
900046ac:	4602      	mov	r2, r0
900046ae:	701a      	strb	r2, [r3, #0]
900046b0:	f000 bc40 	b.w	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900046b4:	687b      	ldr	r3, [r7, #4]
900046b6:	681b      	ldr	r3, [r3, #0]
900046b8:	78fa      	ldrb	r2, [r7, #3]
900046ba:	4611      	mov	r1, r2
900046bc:	4618      	mov	r0, r3
900046be:	f005 fb9c 	bl	90009dfa <USB_ReadChInterrupts>
900046c2:	4603      	mov	r3, r0
900046c4:	f003 0320 	and.w	r3, r3, #32
900046c8:	2b20      	cmp	r3, #32
900046ca:	d131      	bne.n	90004730 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900046cc:	78fb      	ldrb	r3, [r7, #3]
900046ce:	015a      	lsls	r2, r3, #5
900046d0:	693b      	ldr	r3, [r7, #16]
900046d2:	4413      	add	r3, r2
900046d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046d8:	461a      	mov	r2, r3
900046da:	2320      	movs	r3, #32
900046dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
900046de:	78fa      	ldrb	r2, [r7, #3]
900046e0:	6879      	ldr	r1, [r7, #4]
900046e2:	4613      	mov	r3, r2
900046e4:	011b      	lsls	r3, r3, #4
900046e6:	1a9b      	subs	r3, r3, r2
900046e8:	009b      	lsls	r3, r3, #2
900046ea:	440b      	add	r3, r1
900046ec:	331a      	adds	r3, #26
900046ee:	781b      	ldrb	r3, [r3, #0]
900046f0:	2b01      	cmp	r3, #1
900046f2:	f040 841f 	bne.w	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
900046f6:	78fa      	ldrb	r2, [r7, #3]
900046f8:	6879      	ldr	r1, [r7, #4]
900046fa:	4613      	mov	r3, r2
900046fc:	011b      	lsls	r3, r3, #4
900046fe:	1a9b      	subs	r3, r3, r2
90004700:	009b      	lsls	r3, r3, #2
90004702:	440b      	add	r3, r1
90004704:	331b      	adds	r3, #27
90004706:	2201      	movs	r2, #1
90004708:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
9000470a:	78fa      	ldrb	r2, [r7, #3]
9000470c:	6879      	ldr	r1, [r7, #4]
9000470e:	4613      	mov	r3, r2
90004710:	011b      	lsls	r3, r3, #4
90004712:	1a9b      	subs	r3, r3, r2
90004714:	009b      	lsls	r3, r3, #2
90004716:	440b      	add	r3, r1
90004718:	334d      	adds	r3, #77	@ 0x4d
9000471a:	2203      	movs	r2, #3
9000471c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000471e:	687b      	ldr	r3, [r7, #4]
90004720:	681b      	ldr	r3, [r3, #0]
90004722:	78fa      	ldrb	r2, [r7, #3]
90004724:	4611      	mov	r1, r2
90004726:	4618      	mov	r0, r3
90004728:	f005 fbe4 	bl	90009ef4 <USB_HC_Halt>
9000472c:	f000 bc02 	b.w	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90004730:	687b      	ldr	r3, [r7, #4]
90004732:	681b      	ldr	r3, [r3, #0]
90004734:	78fa      	ldrb	r2, [r7, #3]
90004736:	4611      	mov	r1, r2
90004738:	4618      	mov	r0, r3
9000473a:	f005 fb5e 	bl	90009dfa <USB_ReadChInterrupts>
9000473e:	4603      	mov	r3, r0
90004740:	f003 0302 	and.w	r3, r3, #2
90004744:	2b02      	cmp	r3, #2
90004746:	f040 8305 	bne.w	90004d54 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
9000474a:	78fb      	ldrb	r3, [r7, #3]
9000474c:	015a      	lsls	r2, r3, #5
9000474e:	693b      	ldr	r3, [r7, #16]
90004750:	4413      	add	r3, r2
90004752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004756:	461a      	mov	r2, r3
90004758:	2302      	movs	r3, #2
9000475a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
9000475c:	78fa      	ldrb	r2, [r7, #3]
9000475e:	6879      	ldr	r1, [r7, #4]
90004760:	4613      	mov	r3, r2
90004762:	011b      	lsls	r3, r3, #4
90004764:	1a9b      	subs	r3, r3, r2
90004766:	009b      	lsls	r3, r3, #2
90004768:	440b      	add	r3, r1
9000476a:	334d      	adds	r3, #77	@ 0x4d
9000476c:	781b      	ldrb	r3, [r3, #0]
9000476e:	2b01      	cmp	r3, #1
90004770:	d114      	bne.n	9000479c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004772:	78fa      	ldrb	r2, [r7, #3]
90004774:	6879      	ldr	r1, [r7, #4]
90004776:	4613      	mov	r3, r2
90004778:	011b      	lsls	r3, r3, #4
9000477a:	1a9b      	subs	r3, r3, r2
9000477c:	009b      	lsls	r3, r3, #2
9000477e:	440b      	add	r3, r1
90004780:	334d      	adds	r3, #77	@ 0x4d
90004782:	2202      	movs	r2, #2
90004784:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004786:	78fa      	ldrb	r2, [r7, #3]
90004788:	6879      	ldr	r1, [r7, #4]
9000478a:	4613      	mov	r3, r2
9000478c:	011b      	lsls	r3, r3, #4
9000478e:	1a9b      	subs	r3, r3, r2
90004790:	009b      	lsls	r3, r3, #2
90004792:	440b      	add	r3, r1
90004794:	334c      	adds	r3, #76	@ 0x4c
90004796:	2201      	movs	r2, #1
90004798:	701a      	strb	r2, [r3, #0]
9000479a:	e2cc      	b.n	90004d36 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000479c:	78fa      	ldrb	r2, [r7, #3]
9000479e:	6879      	ldr	r1, [r7, #4]
900047a0:	4613      	mov	r3, r2
900047a2:	011b      	lsls	r3, r3, #4
900047a4:	1a9b      	subs	r3, r3, r2
900047a6:	009b      	lsls	r3, r3, #2
900047a8:	440b      	add	r3, r1
900047aa:	334d      	adds	r3, #77	@ 0x4d
900047ac:	781b      	ldrb	r3, [r3, #0]
900047ae:	2b06      	cmp	r3, #6
900047b0:	d114      	bne.n	900047dc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900047b2:	78fa      	ldrb	r2, [r7, #3]
900047b4:	6879      	ldr	r1, [r7, #4]
900047b6:	4613      	mov	r3, r2
900047b8:	011b      	lsls	r3, r3, #4
900047ba:	1a9b      	subs	r3, r3, r2
900047bc:	009b      	lsls	r3, r3, #2
900047be:	440b      	add	r3, r1
900047c0:	334d      	adds	r3, #77	@ 0x4d
900047c2:	2202      	movs	r2, #2
900047c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
900047c6:	78fa      	ldrb	r2, [r7, #3]
900047c8:	6879      	ldr	r1, [r7, #4]
900047ca:	4613      	mov	r3, r2
900047cc:	011b      	lsls	r3, r3, #4
900047ce:	1a9b      	subs	r3, r3, r2
900047d0:	009b      	lsls	r3, r3, #2
900047d2:	440b      	add	r3, r1
900047d4:	334c      	adds	r3, #76	@ 0x4c
900047d6:	2205      	movs	r2, #5
900047d8:	701a      	strb	r2, [r3, #0]
900047da:	e2ac      	b.n	90004d36 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900047dc:	78fa      	ldrb	r2, [r7, #3]
900047de:	6879      	ldr	r1, [r7, #4]
900047e0:	4613      	mov	r3, r2
900047e2:	011b      	lsls	r3, r3, #4
900047e4:	1a9b      	subs	r3, r3, r2
900047e6:	009b      	lsls	r3, r3, #2
900047e8:	440b      	add	r3, r1
900047ea:	334d      	adds	r3, #77	@ 0x4d
900047ec:	781b      	ldrb	r3, [r3, #0]
900047ee:	2b07      	cmp	r3, #7
900047f0:	d00b      	beq.n	9000480a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900047f2:	78fa      	ldrb	r2, [r7, #3]
900047f4:	6879      	ldr	r1, [r7, #4]
900047f6:	4613      	mov	r3, r2
900047f8:	011b      	lsls	r3, r3, #4
900047fa:	1a9b      	subs	r3, r3, r2
900047fc:	009b      	lsls	r3, r3, #2
900047fe:	440b      	add	r3, r1
90004800:	334d      	adds	r3, #77	@ 0x4d
90004802:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004804:	2b09      	cmp	r3, #9
90004806:	f040 80a6 	bne.w	90004956 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000480a:	78fa      	ldrb	r2, [r7, #3]
9000480c:	6879      	ldr	r1, [r7, #4]
9000480e:	4613      	mov	r3, r2
90004810:	011b      	lsls	r3, r3, #4
90004812:	1a9b      	subs	r3, r3, r2
90004814:	009b      	lsls	r3, r3, #2
90004816:	440b      	add	r3, r1
90004818:	334d      	adds	r3, #77	@ 0x4d
9000481a:	2202      	movs	r2, #2
9000481c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
9000481e:	78fa      	ldrb	r2, [r7, #3]
90004820:	6879      	ldr	r1, [r7, #4]
90004822:	4613      	mov	r3, r2
90004824:	011b      	lsls	r3, r3, #4
90004826:	1a9b      	subs	r3, r3, r2
90004828:	009b      	lsls	r3, r3, #2
9000482a:	440b      	add	r3, r1
9000482c:	3344      	adds	r3, #68	@ 0x44
9000482e:	681b      	ldr	r3, [r3, #0]
90004830:	1c59      	adds	r1, r3, #1
90004832:	6878      	ldr	r0, [r7, #4]
90004834:	4613      	mov	r3, r2
90004836:	011b      	lsls	r3, r3, #4
90004838:	1a9b      	subs	r3, r3, r2
9000483a:	009b      	lsls	r3, r3, #2
9000483c:	4403      	add	r3, r0
9000483e:	3344      	adds	r3, #68	@ 0x44
90004840:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004842:	78fa      	ldrb	r2, [r7, #3]
90004844:	6879      	ldr	r1, [r7, #4]
90004846:	4613      	mov	r3, r2
90004848:	011b      	lsls	r3, r3, #4
9000484a:	1a9b      	subs	r3, r3, r2
9000484c:	009b      	lsls	r3, r3, #2
9000484e:	440b      	add	r3, r1
90004850:	3344      	adds	r3, #68	@ 0x44
90004852:	681b      	ldr	r3, [r3, #0]
90004854:	2b02      	cmp	r3, #2
90004856:	d943      	bls.n	900048e0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004858:	78fa      	ldrb	r2, [r7, #3]
9000485a:	6879      	ldr	r1, [r7, #4]
9000485c:	4613      	mov	r3, r2
9000485e:	011b      	lsls	r3, r3, #4
90004860:	1a9b      	subs	r3, r3, r2
90004862:	009b      	lsls	r3, r3, #2
90004864:	440b      	add	r3, r1
90004866:	3344      	adds	r3, #68	@ 0x44
90004868:	2200      	movs	r2, #0
9000486a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
9000486c:	78fa      	ldrb	r2, [r7, #3]
9000486e:	6879      	ldr	r1, [r7, #4]
90004870:	4613      	mov	r3, r2
90004872:	011b      	lsls	r3, r3, #4
90004874:	1a9b      	subs	r3, r3, r2
90004876:	009b      	lsls	r3, r3, #2
90004878:	440b      	add	r3, r1
9000487a:	331a      	adds	r3, #26
9000487c:	781b      	ldrb	r3, [r3, #0]
9000487e:	2b01      	cmp	r3, #1
90004880:	d123      	bne.n	900048ca <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
90004882:	78fa      	ldrb	r2, [r7, #3]
90004884:	6879      	ldr	r1, [r7, #4]
90004886:	4613      	mov	r3, r2
90004888:	011b      	lsls	r3, r3, #4
9000488a:	1a9b      	subs	r3, r3, r2
9000488c:	009b      	lsls	r3, r3, #2
9000488e:	440b      	add	r3, r1
90004890:	331b      	adds	r3, #27
90004892:	2200      	movs	r2, #0
90004894:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
90004896:	78fa      	ldrb	r2, [r7, #3]
90004898:	6879      	ldr	r1, [r7, #4]
9000489a:	4613      	mov	r3, r2
9000489c:	011b      	lsls	r3, r3, #4
9000489e:	1a9b      	subs	r3, r3, r2
900048a0:	009b      	lsls	r3, r3, #2
900048a2:	440b      	add	r3, r1
900048a4:	331c      	adds	r3, #28
900048a6:	2200      	movs	r2, #0
900048a8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900048aa:	78fb      	ldrb	r3, [r7, #3]
900048ac:	015a      	lsls	r2, r3, #5
900048ae:	693b      	ldr	r3, [r7, #16]
900048b0:	4413      	add	r3, r2
900048b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900048b6:	685b      	ldr	r3, [r3, #4]
900048b8:	78fa      	ldrb	r2, [r7, #3]
900048ba:	0151      	lsls	r1, r2, #5
900048bc:	693a      	ldr	r2, [r7, #16]
900048be:	440a      	add	r2, r1
900048c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900048c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900048c8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
900048ca:	78fa      	ldrb	r2, [r7, #3]
900048cc:	6879      	ldr	r1, [r7, #4]
900048ce:	4613      	mov	r3, r2
900048d0:	011b      	lsls	r3, r3, #4
900048d2:	1a9b      	subs	r3, r3, r2
900048d4:	009b      	lsls	r3, r3, #2
900048d6:	440b      	add	r3, r1
900048d8:	334c      	adds	r3, #76	@ 0x4c
900048da:	2204      	movs	r2, #4
900048dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900048de:	e229      	b.n	90004d34 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900048e0:	78fa      	ldrb	r2, [r7, #3]
900048e2:	6879      	ldr	r1, [r7, #4]
900048e4:	4613      	mov	r3, r2
900048e6:	011b      	lsls	r3, r3, #4
900048e8:	1a9b      	subs	r3, r3, r2
900048ea:	009b      	lsls	r3, r3, #2
900048ec:	440b      	add	r3, r1
900048ee:	334c      	adds	r3, #76	@ 0x4c
900048f0:	2202      	movs	r2, #2
900048f2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900048f4:	78fa      	ldrb	r2, [r7, #3]
900048f6:	6879      	ldr	r1, [r7, #4]
900048f8:	4613      	mov	r3, r2
900048fa:	011b      	lsls	r3, r3, #4
900048fc:	1a9b      	subs	r3, r3, r2
900048fe:	009b      	lsls	r3, r3, #2
90004900:	440b      	add	r3, r1
90004902:	3326      	adds	r3, #38	@ 0x26
90004904:	781b      	ldrb	r3, [r3, #0]
90004906:	2b00      	cmp	r3, #0
90004908:	d00b      	beq.n	90004922 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
9000490a:	78fa      	ldrb	r2, [r7, #3]
9000490c:	6879      	ldr	r1, [r7, #4]
9000490e:	4613      	mov	r3, r2
90004910:	011b      	lsls	r3, r3, #4
90004912:	1a9b      	subs	r3, r3, r2
90004914:	009b      	lsls	r3, r3, #2
90004916:	440b      	add	r3, r1
90004918:	3326      	adds	r3, #38	@ 0x26
9000491a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000491c:	2b02      	cmp	r3, #2
9000491e:	f040 8209 	bne.w	90004d34 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004922:	78fb      	ldrb	r3, [r7, #3]
90004924:	015a      	lsls	r2, r3, #5
90004926:	693b      	ldr	r3, [r7, #16]
90004928:	4413      	add	r3, r2
9000492a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000492e:	681b      	ldr	r3, [r3, #0]
90004930:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004932:	68fb      	ldr	r3, [r7, #12]
90004934:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004938:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
9000493a:	68fb      	ldr	r3, [r7, #12]
9000493c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004940:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004942:	78fb      	ldrb	r3, [r7, #3]
90004944:	015a      	lsls	r2, r3, #5
90004946:	693b      	ldr	r3, [r7, #16]
90004948:	4413      	add	r3, r2
9000494a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000494e:	461a      	mov	r2, r3
90004950:	68fb      	ldr	r3, [r7, #12]
90004952:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004954:	e1ee      	b.n	90004d34 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90004956:	78fa      	ldrb	r2, [r7, #3]
90004958:	6879      	ldr	r1, [r7, #4]
9000495a:	4613      	mov	r3, r2
9000495c:	011b      	lsls	r3, r3, #4
9000495e:	1a9b      	subs	r3, r3, r2
90004960:	009b      	lsls	r3, r3, #2
90004962:	440b      	add	r3, r1
90004964:	334d      	adds	r3, #77	@ 0x4d
90004966:	781b      	ldrb	r3, [r3, #0]
90004968:	2b05      	cmp	r3, #5
9000496a:	f040 80c8 	bne.w	90004afe <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000496e:	78fa      	ldrb	r2, [r7, #3]
90004970:	6879      	ldr	r1, [r7, #4]
90004972:	4613      	mov	r3, r2
90004974:	011b      	lsls	r3, r3, #4
90004976:	1a9b      	subs	r3, r3, r2
90004978:	009b      	lsls	r3, r3, #2
9000497a:	440b      	add	r3, r1
9000497c:	334d      	adds	r3, #77	@ 0x4d
9000497e:	2202      	movs	r2, #2
90004980:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004982:	78fa      	ldrb	r2, [r7, #3]
90004984:	6879      	ldr	r1, [r7, #4]
90004986:	4613      	mov	r3, r2
90004988:	011b      	lsls	r3, r3, #4
9000498a:	1a9b      	subs	r3, r3, r2
9000498c:	009b      	lsls	r3, r3, #2
9000498e:	440b      	add	r3, r1
90004990:	331b      	adds	r3, #27
90004992:	781b      	ldrb	r3, [r3, #0]
90004994:	2b01      	cmp	r3, #1
90004996:	f040 81ce 	bne.w	90004d36 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
9000499a:	78fa      	ldrb	r2, [r7, #3]
9000499c:	6879      	ldr	r1, [r7, #4]
9000499e:	4613      	mov	r3, r2
900049a0:	011b      	lsls	r3, r3, #4
900049a2:	1a9b      	subs	r3, r3, r2
900049a4:	009b      	lsls	r3, r3, #2
900049a6:	440b      	add	r3, r1
900049a8:	3326      	adds	r3, #38	@ 0x26
900049aa:	781b      	ldrb	r3, [r3, #0]
900049ac:	2b03      	cmp	r3, #3
900049ae:	d16b      	bne.n	90004a88 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
900049b0:	78fa      	ldrb	r2, [r7, #3]
900049b2:	6879      	ldr	r1, [r7, #4]
900049b4:	4613      	mov	r3, r2
900049b6:	011b      	lsls	r3, r3, #4
900049b8:	1a9b      	subs	r3, r3, r2
900049ba:	009b      	lsls	r3, r3, #2
900049bc:	440b      	add	r3, r1
900049be:	3348      	adds	r3, #72	@ 0x48
900049c0:	681b      	ldr	r3, [r3, #0]
900049c2:	1c59      	adds	r1, r3, #1
900049c4:	6878      	ldr	r0, [r7, #4]
900049c6:	4613      	mov	r3, r2
900049c8:	011b      	lsls	r3, r3, #4
900049ca:	1a9b      	subs	r3, r3, r2
900049cc:	009b      	lsls	r3, r3, #2
900049ce:	4403      	add	r3, r0
900049d0:	3348      	adds	r3, #72	@ 0x48
900049d2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
900049d4:	78fa      	ldrb	r2, [r7, #3]
900049d6:	6879      	ldr	r1, [r7, #4]
900049d8:	4613      	mov	r3, r2
900049da:	011b      	lsls	r3, r3, #4
900049dc:	1a9b      	subs	r3, r3, r2
900049de:	009b      	lsls	r3, r3, #2
900049e0:	440b      	add	r3, r1
900049e2:	3348      	adds	r3, #72	@ 0x48
900049e4:	681b      	ldr	r3, [r3, #0]
900049e6:	2b02      	cmp	r3, #2
900049e8:	d943      	bls.n	90004a72 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
900049ea:	78fa      	ldrb	r2, [r7, #3]
900049ec:	6879      	ldr	r1, [r7, #4]
900049ee:	4613      	mov	r3, r2
900049f0:	011b      	lsls	r3, r3, #4
900049f2:	1a9b      	subs	r3, r3, r2
900049f4:	009b      	lsls	r3, r3, #2
900049f6:	440b      	add	r3, r1
900049f8:	3348      	adds	r3, #72	@ 0x48
900049fa:	2200      	movs	r2, #0
900049fc:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
900049fe:	78fa      	ldrb	r2, [r7, #3]
90004a00:	6879      	ldr	r1, [r7, #4]
90004a02:	4613      	mov	r3, r2
90004a04:	011b      	lsls	r3, r3, #4
90004a06:	1a9b      	subs	r3, r3, r2
90004a08:	009b      	lsls	r3, r3, #2
90004a0a:	440b      	add	r3, r1
90004a0c:	331b      	adds	r3, #27
90004a0e:	2200      	movs	r2, #0
90004a10:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
90004a12:	78fa      	ldrb	r2, [r7, #3]
90004a14:	6879      	ldr	r1, [r7, #4]
90004a16:	4613      	mov	r3, r2
90004a18:	011b      	lsls	r3, r3, #4
90004a1a:	1a9b      	subs	r3, r3, r2
90004a1c:	009b      	lsls	r3, r3, #2
90004a1e:	440b      	add	r3, r1
90004a20:	3344      	adds	r3, #68	@ 0x44
90004a22:	681b      	ldr	r3, [r3, #0]
90004a24:	2b02      	cmp	r3, #2
90004a26:	d809      	bhi.n	90004a3c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90004a28:	78fa      	ldrb	r2, [r7, #3]
90004a2a:	6879      	ldr	r1, [r7, #4]
90004a2c:	4613      	mov	r3, r2
90004a2e:	011b      	lsls	r3, r3, #4
90004a30:	1a9b      	subs	r3, r3, r2
90004a32:	009b      	lsls	r3, r3, #2
90004a34:	440b      	add	r3, r1
90004a36:	331c      	adds	r3, #28
90004a38:	2201      	movs	r2, #1
90004a3a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004a3c:	78fb      	ldrb	r3, [r7, #3]
90004a3e:	015a      	lsls	r2, r3, #5
90004a40:	693b      	ldr	r3, [r7, #16]
90004a42:	4413      	add	r3, r2
90004a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a48:	685b      	ldr	r3, [r3, #4]
90004a4a:	78fa      	ldrb	r2, [r7, #3]
90004a4c:	0151      	lsls	r1, r2, #5
90004a4e:	693a      	ldr	r2, [r7, #16]
90004a50:	440a      	add	r2, r1
90004a52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004a5a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004a5c:	78fa      	ldrb	r2, [r7, #3]
90004a5e:	6879      	ldr	r1, [r7, #4]
90004a60:	4613      	mov	r3, r2
90004a62:	011b      	lsls	r3, r3, #4
90004a64:	1a9b      	subs	r3, r3, r2
90004a66:	009b      	lsls	r3, r3, #2
90004a68:	440b      	add	r3, r1
90004a6a:	334c      	adds	r3, #76	@ 0x4c
90004a6c:	2204      	movs	r2, #4
90004a6e:	701a      	strb	r2, [r3, #0]
90004a70:	e014      	b.n	90004a9c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a72:	78fa      	ldrb	r2, [r7, #3]
90004a74:	6879      	ldr	r1, [r7, #4]
90004a76:	4613      	mov	r3, r2
90004a78:	011b      	lsls	r3, r3, #4
90004a7a:	1a9b      	subs	r3, r3, r2
90004a7c:	009b      	lsls	r3, r3, #2
90004a7e:	440b      	add	r3, r1
90004a80:	334c      	adds	r3, #76	@ 0x4c
90004a82:	2202      	movs	r2, #2
90004a84:	701a      	strb	r2, [r3, #0]
90004a86:	e009      	b.n	90004a9c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a88:	78fa      	ldrb	r2, [r7, #3]
90004a8a:	6879      	ldr	r1, [r7, #4]
90004a8c:	4613      	mov	r3, r2
90004a8e:	011b      	lsls	r3, r3, #4
90004a90:	1a9b      	subs	r3, r3, r2
90004a92:	009b      	lsls	r3, r3, #2
90004a94:	440b      	add	r3, r1
90004a96:	334c      	adds	r3, #76	@ 0x4c
90004a98:	2202      	movs	r2, #2
90004a9a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a9c:	78fa      	ldrb	r2, [r7, #3]
90004a9e:	6879      	ldr	r1, [r7, #4]
90004aa0:	4613      	mov	r3, r2
90004aa2:	011b      	lsls	r3, r3, #4
90004aa4:	1a9b      	subs	r3, r3, r2
90004aa6:	009b      	lsls	r3, r3, #2
90004aa8:	440b      	add	r3, r1
90004aaa:	3326      	adds	r3, #38	@ 0x26
90004aac:	781b      	ldrb	r3, [r3, #0]
90004aae:	2b00      	cmp	r3, #0
90004ab0:	d00b      	beq.n	90004aca <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004ab2:	78fa      	ldrb	r2, [r7, #3]
90004ab4:	6879      	ldr	r1, [r7, #4]
90004ab6:	4613      	mov	r3, r2
90004ab8:	011b      	lsls	r3, r3, #4
90004aba:	1a9b      	subs	r3, r3, r2
90004abc:	009b      	lsls	r3, r3, #2
90004abe:	440b      	add	r3, r1
90004ac0:	3326      	adds	r3, #38	@ 0x26
90004ac2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ac4:	2b02      	cmp	r3, #2
90004ac6:	f040 8136 	bne.w	90004d36 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004aca:	78fb      	ldrb	r3, [r7, #3]
90004acc:	015a      	lsls	r2, r3, #5
90004ace:	693b      	ldr	r3, [r7, #16]
90004ad0:	4413      	add	r3, r2
90004ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ad6:	681b      	ldr	r3, [r3, #0]
90004ad8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004ada:	68fb      	ldr	r3, [r7, #12]
90004adc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004ae0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004ae2:	68fb      	ldr	r3, [r7, #12]
90004ae4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004ae8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004aea:	78fb      	ldrb	r3, [r7, #3]
90004aec:	015a      	lsls	r2, r3, #5
90004aee:	693b      	ldr	r3, [r7, #16]
90004af0:	4413      	add	r3, r2
90004af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004af6:	461a      	mov	r2, r3
90004af8:	68fb      	ldr	r3, [r7, #12]
90004afa:	6013      	str	r3, [r2, #0]
90004afc:	e11b      	b.n	90004d36 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004afe:	78fa      	ldrb	r2, [r7, #3]
90004b00:	6879      	ldr	r1, [r7, #4]
90004b02:	4613      	mov	r3, r2
90004b04:	011b      	lsls	r3, r3, #4
90004b06:	1a9b      	subs	r3, r3, r2
90004b08:	009b      	lsls	r3, r3, #2
90004b0a:	440b      	add	r3, r1
90004b0c:	334d      	adds	r3, #77	@ 0x4d
90004b0e:	781b      	ldrb	r3, [r3, #0]
90004b10:	2b03      	cmp	r3, #3
90004b12:	f040 8081 	bne.w	90004c18 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004b16:	78fa      	ldrb	r2, [r7, #3]
90004b18:	6879      	ldr	r1, [r7, #4]
90004b1a:	4613      	mov	r3, r2
90004b1c:	011b      	lsls	r3, r3, #4
90004b1e:	1a9b      	subs	r3, r3, r2
90004b20:	009b      	lsls	r3, r3, #2
90004b22:	440b      	add	r3, r1
90004b24:	334d      	adds	r3, #77	@ 0x4d
90004b26:	2202      	movs	r2, #2
90004b28:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004b2a:	78fa      	ldrb	r2, [r7, #3]
90004b2c:	6879      	ldr	r1, [r7, #4]
90004b2e:	4613      	mov	r3, r2
90004b30:	011b      	lsls	r3, r3, #4
90004b32:	1a9b      	subs	r3, r3, r2
90004b34:	009b      	lsls	r3, r3, #2
90004b36:	440b      	add	r3, r1
90004b38:	331b      	adds	r3, #27
90004b3a:	781b      	ldrb	r3, [r3, #0]
90004b3c:	2b01      	cmp	r3, #1
90004b3e:	f040 80fa 	bne.w	90004d36 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b42:	78fa      	ldrb	r2, [r7, #3]
90004b44:	6879      	ldr	r1, [r7, #4]
90004b46:	4613      	mov	r3, r2
90004b48:	011b      	lsls	r3, r3, #4
90004b4a:	1a9b      	subs	r3, r3, r2
90004b4c:	009b      	lsls	r3, r3, #2
90004b4e:	440b      	add	r3, r1
90004b50:	334c      	adds	r3, #76	@ 0x4c
90004b52:	2202      	movs	r2, #2
90004b54:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004b56:	78fb      	ldrb	r3, [r7, #3]
90004b58:	015a      	lsls	r2, r3, #5
90004b5a:	693b      	ldr	r3, [r7, #16]
90004b5c:	4413      	add	r3, r2
90004b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b62:	685b      	ldr	r3, [r3, #4]
90004b64:	78fa      	ldrb	r2, [r7, #3]
90004b66:	0151      	lsls	r1, r2, #5
90004b68:	693a      	ldr	r2, [r7, #16]
90004b6a:	440a      	add	r2, r1
90004b6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004b74:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004b76:	78fb      	ldrb	r3, [r7, #3]
90004b78:	015a      	lsls	r2, r3, #5
90004b7a:	693b      	ldr	r3, [r7, #16]
90004b7c:	4413      	add	r3, r2
90004b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b82:	68db      	ldr	r3, [r3, #12]
90004b84:	78fa      	ldrb	r2, [r7, #3]
90004b86:	0151      	lsls	r1, r2, #5
90004b88:	693a      	ldr	r2, [r7, #16]
90004b8a:	440a      	add	r2, r1
90004b8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004b94:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004b96:	78fb      	ldrb	r3, [r7, #3]
90004b98:	015a      	lsls	r2, r3, #5
90004b9a:	693b      	ldr	r3, [r7, #16]
90004b9c:	4413      	add	r3, r2
90004b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ba2:	68db      	ldr	r3, [r3, #12]
90004ba4:	78fa      	ldrb	r2, [r7, #3]
90004ba6:	0151      	lsls	r1, r2, #5
90004ba8:	693a      	ldr	r2, [r7, #16]
90004baa:	440a      	add	r2, r1
90004bac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004bb0:	f023 0320 	bic.w	r3, r3, #32
90004bb4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bb6:	78fa      	ldrb	r2, [r7, #3]
90004bb8:	6879      	ldr	r1, [r7, #4]
90004bba:	4613      	mov	r3, r2
90004bbc:	011b      	lsls	r3, r3, #4
90004bbe:	1a9b      	subs	r3, r3, r2
90004bc0:	009b      	lsls	r3, r3, #2
90004bc2:	440b      	add	r3, r1
90004bc4:	3326      	adds	r3, #38	@ 0x26
90004bc6:	781b      	ldrb	r3, [r3, #0]
90004bc8:	2b00      	cmp	r3, #0
90004bca:	d00b      	beq.n	90004be4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004bcc:	78fa      	ldrb	r2, [r7, #3]
90004bce:	6879      	ldr	r1, [r7, #4]
90004bd0:	4613      	mov	r3, r2
90004bd2:	011b      	lsls	r3, r3, #4
90004bd4:	1a9b      	subs	r3, r3, r2
90004bd6:	009b      	lsls	r3, r3, #2
90004bd8:	440b      	add	r3, r1
90004bda:	3326      	adds	r3, #38	@ 0x26
90004bdc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bde:	2b02      	cmp	r3, #2
90004be0:	f040 80a9 	bne.w	90004d36 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004be4:	78fb      	ldrb	r3, [r7, #3]
90004be6:	015a      	lsls	r2, r3, #5
90004be8:	693b      	ldr	r3, [r7, #16]
90004bea:	4413      	add	r3, r2
90004bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004bf0:	681b      	ldr	r3, [r3, #0]
90004bf2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004bf4:	68fb      	ldr	r3, [r7, #12]
90004bf6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004bfa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004bfc:	68fb      	ldr	r3, [r7, #12]
90004bfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004c02:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004c04:	78fb      	ldrb	r3, [r7, #3]
90004c06:	015a      	lsls	r2, r3, #5
90004c08:	693b      	ldr	r3, [r7, #16]
90004c0a:	4413      	add	r3, r2
90004c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c10:	461a      	mov	r2, r3
90004c12:	68fb      	ldr	r3, [r7, #12]
90004c14:	6013      	str	r3, [r2, #0]
90004c16:	e08e      	b.n	90004d36 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004c18:	78fa      	ldrb	r2, [r7, #3]
90004c1a:	6879      	ldr	r1, [r7, #4]
90004c1c:	4613      	mov	r3, r2
90004c1e:	011b      	lsls	r3, r3, #4
90004c20:	1a9b      	subs	r3, r3, r2
90004c22:	009b      	lsls	r3, r3, #2
90004c24:	440b      	add	r3, r1
90004c26:	334d      	adds	r3, #77	@ 0x4d
90004c28:	781b      	ldrb	r3, [r3, #0]
90004c2a:	2b04      	cmp	r3, #4
90004c2c:	d143      	bne.n	90004cb6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004c2e:	78fa      	ldrb	r2, [r7, #3]
90004c30:	6879      	ldr	r1, [r7, #4]
90004c32:	4613      	mov	r3, r2
90004c34:	011b      	lsls	r3, r3, #4
90004c36:	1a9b      	subs	r3, r3, r2
90004c38:	009b      	lsls	r3, r3, #2
90004c3a:	440b      	add	r3, r1
90004c3c:	334d      	adds	r3, #77	@ 0x4d
90004c3e:	2202      	movs	r2, #2
90004c40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004c42:	78fa      	ldrb	r2, [r7, #3]
90004c44:	6879      	ldr	r1, [r7, #4]
90004c46:	4613      	mov	r3, r2
90004c48:	011b      	lsls	r3, r3, #4
90004c4a:	1a9b      	subs	r3, r3, r2
90004c4c:	009b      	lsls	r3, r3, #2
90004c4e:	440b      	add	r3, r1
90004c50:	334c      	adds	r3, #76	@ 0x4c
90004c52:	2202      	movs	r2, #2
90004c54:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c56:	78fa      	ldrb	r2, [r7, #3]
90004c58:	6879      	ldr	r1, [r7, #4]
90004c5a:	4613      	mov	r3, r2
90004c5c:	011b      	lsls	r3, r3, #4
90004c5e:	1a9b      	subs	r3, r3, r2
90004c60:	009b      	lsls	r3, r3, #2
90004c62:	440b      	add	r3, r1
90004c64:	3326      	adds	r3, #38	@ 0x26
90004c66:	781b      	ldrb	r3, [r3, #0]
90004c68:	2b00      	cmp	r3, #0
90004c6a:	d00a      	beq.n	90004c82 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004c6c:	78fa      	ldrb	r2, [r7, #3]
90004c6e:	6879      	ldr	r1, [r7, #4]
90004c70:	4613      	mov	r3, r2
90004c72:	011b      	lsls	r3, r3, #4
90004c74:	1a9b      	subs	r3, r3, r2
90004c76:	009b      	lsls	r3, r3, #2
90004c78:	440b      	add	r3, r1
90004c7a:	3326      	adds	r3, #38	@ 0x26
90004c7c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c7e:	2b02      	cmp	r3, #2
90004c80:	d159      	bne.n	90004d36 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004c82:	78fb      	ldrb	r3, [r7, #3]
90004c84:	015a      	lsls	r2, r3, #5
90004c86:	693b      	ldr	r3, [r7, #16]
90004c88:	4413      	add	r3, r2
90004c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c8e:	681b      	ldr	r3, [r3, #0]
90004c90:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004c92:	68fb      	ldr	r3, [r7, #12]
90004c94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004c98:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004c9a:	68fb      	ldr	r3, [r7, #12]
90004c9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004ca0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004ca2:	78fb      	ldrb	r3, [r7, #3]
90004ca4:	015a      	lsls	r2, r3, #5
90004ca6:	693b      	ldr	r3, [r7, #16]
90004ca8:	4413      	add	r3, r2
90004caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004cae:	461a      	mov	r2, r3
90004cb0:	68fb      	ldr	r3, [r7, #12]
90004cb2:	6013      	str	r3, [r2, #0]
90004cb4:	e03f      	b.n	90004d36 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004cb6:	78fa      	ldrb	r2, [r7, #3]
90004cb8:	6879      	ldr	r1, [r7, #4]
90004cba:	4613      	mov	r3, r2
90004cbc:	011b      	lsls	r3, r3, #4
90004cbe:	1a9b      	subs	r3, r3, r2
90004cc0:	009b      	lsls	r3, r3, #2
90004cc2:	440b      	add	r3, r1
90004cc4:	334d      	adds	r3, #77	@ 0x4d
90004cc6:	781b      	ldrb	r3, [r3, #0]
90004cc8:	2b08      	cmp	r3, #8
90004cca:	d126      	bne.n	90004d1a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004ccc:	78fa      	ldrb	r2, [r7, #3]
90004cce:	6879      	ldr	r1, [r7, #4]
90004cd0:	4613      	mov	r3, r2
90004cd2:	011b      	lsls	r3, r3, #4
90004cd4:	1a9b      	subs	r3, r3, r2
90004cd6:	009b      	lsls	r3, r3, #2
90004cd8:	440b      	add	r3, r1
90004cda:	334d      	adds	r3, #77	@ 0x4d
90004cdc:	2202      	movs	r2, #2
90004cde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004ce0:	78fa      	ldrb	r2, [r7, #3]
90004ce2:	6879      	ldr	r1, [r7, #4]
90004ce4:	4613      	mov	r3, r2
90004ce6:	011b      	lsls	r3, r3, #4
90004ce8:	1a9b      	subs	r3, r3, r2
90004cea:	009b      	lsls	r3, r3, #2
90004cec:	440b      	add	r3, r1
90004cee:	3344      	adds	r3, #68	@ 0x44
90004cf0:	681b      	ldr	r3, [r3, #0]
90004cf2:	1c59      	adds	r1, r3, #1
90004cf4:	6878      	ldr	r0, [r7, #4]
90004cf6:	4613      	mov	r3, r2
90004cf8:	011b      	lsls	r3, r3, #4
90004cfa:	1a9b      	subs	r3, r3, r2
90004cfc:	009b      	lsls	r3, r3, #2
90004cfe:	4403      	add	r3, r0
90004d00:	3344      	adds	r3, #68	@ 0x44
90004d02:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004d04:	78fa      	ldrb	r2, [r7, #3]
90004d06:	6879      	ldr	r1, [r7, #4]
90004d08:	4613      	mov	r3, r2
90004d0a:	011b      	lsls	r3, r3, #4
90004d0c:	1a9b      	subs	r3, r3, r2
90004d0e:	009b      	lsls	r3, r3, #2
90004d10:	440b      	add	r3, r1
90004d12:	334c      	adds	r3, #76	@ 0x4c
90004d14:	2204      	movs	r2, #4
90004d16:	701a      	strb	r2, [r3, #0]
90004d18:	e00d      	b.n	90004d36 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004d1a:	78fa      	ldrb	r2, [r7, #3]
90004d1c:	6879      	ldr	r1, [r7, #4]
90004d1e:	4613      	mov	r3, r2
90004d20:	011b      	lsls	r3, r3, #4
90004d22:	1a9b      	subs	r3, r3, r2
90004d24:	009b      	lsls	r3, r3, #2
90004d26:	440b      	add	r3, r1
90004d28:	334d      	adds	r3, #77	@ 0x4d
90004d2a:	781b      	ldrb	r3, [r3, #0]
90004d2c:	2b02      	cmp	r3, #2
90004d2e:	f000 8100 	beq.w	90004f32 <HCD_HC_IN_IRQHandler+0xcca>
90004d32:	e000      	b.n	90004d36 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004d34:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004d36:	78fa      	ldrb	r2, [r7, #3]
90004d38:	6879      	ldr	r1, [r7, #4]
90004d3a:	4613      	mov	r3, r2
90004d3c:	011b      	lsls	r3, r3, #4
90004d3e:	1a9b      	subs	r3, r3, r2
90004d40:	009b      	lsls	r3, r3, #2
90004d42:	440b      	add	r3, r1
90004d44:	334c      	adds	r3, #76	@ 0x4c
90004d46:	781a      	ldrb	r2, [r3, #0]
90004d48:	78fb      	ldrb	r3, [r7, #3]
90004d4a:	4619      	mov	r1, r3
90004d4c:	6878      	ldr	r0, [r7, #4]
90004d4e:	f7fb fe55 	bl	900009fc <HAL_HCD_HC_NotifyURBChange_Callback>
90004d52:	e0ef      	b.n	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004d54:	687b      	ldr	r3, [r7, #4]
90004d56:	681b      	ldr	r3, [r3, #0]
90004d58:	78fa      	ldrb	r2, [r7, #3]
90004d5a:	4611      	mov	r1, r2
90004d5c:	4618      	mov	r0, r3
90004d5e:	f005 f84c 	bl	90009dfa <USB_ReadChInterrupts>
90004d62:	4603      	mov	r3, r0
90004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004d68:	2b40      	cmp	r3, #64	@ 0x40
90004d6a:	d12f      	bne.n	90004dcc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004d6c:	78fb      	ldrb	r3, [r7, #3]
90004d6e:	015a      	lsls	r2, r3, #5
90004d70:	693b      	ldr	r3, [r7, #16]
90004d72:	4413      	add	r3, r2
90004d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d78:	461a      	mov	r2, r3
90004d7a:	2340      	movs	r3, #64	@ 0x40
90004d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004d7e:	78fa      	ldrb	r2, [r7, #3]
90004d80:	6879      	ldr	r1, [r7, #4]
90004d82:	4613      	mov	r3, r2
90004d84:	011b      	lsls	r3, r3, #4
90004d86:	1a9b      	subs	r3, r3, r2
90004d88:	009b      	lsls	r3, r3, #2
90004d8a:	440b      	add	r3, r1
90004d8c:	334d      	adds	r3, #77	@ 0x4d
90004d8e:	2205      	movs	r2, #5
90004d90:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004d92:	78fa      	ldrb	r2, [r7, #3]
90004d94:	6879      	ldr	r1, [r7, #4]
90004d96:	4613      	mov	r3, r2
90004d98:	011b      	lsls	r3, r3, #4
90004d9a:	1a9b      	subs	r3, r3, r2
90004d9c:	009b      	lsls	r3, r3, #2
90004d9e:	440b      	add	r3, r1
90004da0:	331a      	adds	r3, #26
90004da2:	781b      	ldrb	r3, [r3, #0]
90004da4:	2b00      	cmp	r3, #0
90004da6:	d109      	bne.n	90004dbc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004da8:	78fa      	ldrb	r2, [r7, #3]
90004daa:	6879      	ldr	r1, [r7, #4]
90004dac:	4613      	mov	r3, r2
90004dae:	011b      	lsls	r3, r3, #4
90004db0:	1a9b      	subs	r3, r3, r2
90004db2:	009b      	lsls	r3, r3, #2
90004db4:	440b      	add	r3, r1
90004db6:	3344      	adds	r3, #68	@ 0x44
90004db8:	2200      	movs	r2, #0
90004dba:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004dbc:	687b      	ldr	r3, [r7, #4]
90004dbe:	681b      	ldr	r3, [r3, #0]
90004dc0:	78fa      	ldrb	r2, [r7, #3]
90004dc2:	4611      	mov	r1, r2
90004dc4:	4618      	mov	r0, r3
90004dc6:	f005 f895 	bl	90009ef4 <USB_HC_Halt>
90004dca:	e0b3      	b.n	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004dcc:	687b      	ldr	r3, [r7, #4]
90004dce:	681b      	ldr	r3, [r3, #0]
90004dd0:	78fa      	ldrb	r2, [r7, #3]
90004dd2:	4611      	mov	r1, r2
90004dd4:	4618      	mov	r0, r3
90004dd6:	f005 f810 	bl	90009dfa <USB_ReadChInterrupts>
90004dda:	4603      	mov	r3, r0
90004ddc:	f003 0310 	and.w	r3, r3, #16
90004de0:	2b10      	cmp	r3, #16
90004de2:	f040 80a7 	bne.w	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004de6:	78fa      	ldrb	r2, [r7, #3]
90004de8:	6879      	ldr	r1, [r7, #4]
90004dea:	4613      	mov	r3, r2
90004dec:	011b      	lsls	r3, r3, #4
90004dee:	1a9b      	subs	r3, r3, r2
90004df0:	009b      	lsls	r3, r3, #2
90004df2:	440b      	add	r3, r1
90004df4:	3326      	adds	r3, #38	@ 0x26
90004df6:	781b      	ldrb	r3, [r3, #0]
90004df8:	2b03      	cmp	r3, #3
90004dfa:	d11b      	bne.n	90004e34 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004dfc:	78fa      	ldrb	r2, [r7, #3]
90004dfe:	6879      	ldr	r1, [r7, #4]
90004e00:	4613      	mov	r3, r2
90004e02:	011b      	lsls	r3, r3, #4
90004e04:	1a9b      	subs	r3, r3, r2
90004e06:	009b      	lsls	r3, r3, #2
90004e08:	440b      	add	r3, r1
90004e0a:	3344      	adds	r3, #68	@ 0x44
90004e0c:	2200      	movs	r2, #0
90004e0e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004e10:	78fa      	ldrb	r2, [r7, #3]
90004e12:	6879      	ldr	r1, [r7, #4]
90004e14:	4613      	mov	r3, r2
90004e16:	011b      	lsls	r3, r3, #4
90004e18:	1a9b      	subs	r3, r3, r2
90004e1a:	009b      	lsls	r3, r3, #2
90004e1c:	440b      	add	r3, r1
90004e1e:	334d      	adds	r3, #77	@ 0x4d
90004e20:	2204      	movs	r2, #4
90004e22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e24:	687b      	ldr	r3, [r7, #4]
90004e26:	681b      	ldr	r3, [r3, #0]
90004e28:	78fa      	ldrb	r2, [r7, #3]
90004e2a:	4611      	mov	r1, r2
90004e2c:	4618      	mov	r0, r3
90004e2e:	f005 f861 	bl	90009ef4 <USB_HC_Halt>
90004e32:	e03f      	b.n	90004eb4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e34:	78fa      	ldrb	r2, [r7, #3]
90004e36:	6879      	ldr	r1, [r7, #4]
90004e38:	4613      	mov	r3, r2
90004e3a:	011b      	lsls	r3, r3, #4
90004e3c:	1a9b      	subs	r3, r3, r2
90004e3e:	009b      	lsls	r3, r3, #2
90004e40:	440b      	add	r3, r1
90004e42:	3326      	adds	r3, #38	@ 0x26
90004e44:	781b      	ldrb	r3, [r3, #0]
90004e46:	2b00      	cmp	r3, #0
90004e48:	d00a      	beq.n	90004e60 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004e4a:	78fa      	ldrb	r2, [r7, #3]
90004e4c:	6879      	ldr	r1, [r7, #4]
90004e4e:	4613      	mov	r3, r2
90004e50:	011b      	lsls	r3, r3, #4
90004e52:	1a9b      	subs	r3, r3, r2
90004e54:	009b      	lsls	r3, r3, #2
90004e56:	440b      	add	r3, r1
90004e58:	3326      	adds	r3, #38	@ 0x26
90004e5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e5c:	2b02      	cmp	r3, #2
90004e5e:	d129      	bne.n	90004eb4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004e60:	78fa      	ldrb	r2, [r7, #3]
90004e62:	6879      	ldr	r1, [r7, #4]
90004e64:	4613      	mov	r3, r2
90004e66:	011b      	lsls	r3, r3, #4
90004e68:	1a9b      	subs	r3, r3, r2
90004e6a:	009b      	lsls	r3, r3, #2
90004e6c:	440b      	add	r3, r1
90004e6e:	3344      	adds	r3, #68	@ 0x44
90004e70:	2200      	movs	r2, #0
90004e72:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004e74:	687b      	ldr	r3, [r7, #4]
90004e76:	799b      	ldrb	r3, [r3, #6]
90004e78:	2b00      	cmp	r3, #0
90004e7a:	d00a      	beq.n	90004e92 <HCD_HC_IN_IRQHandler+0xc2a>
90004e7c:	78fa      	ldrb	r2, [r7, #3]
90004e7e:	6879      	ldr	r1, [r7, #4]
90004e80:	4613      	mov	r3, r2
90004e82:	011b      	lsls	r3, r3, #4
90004e84:	1a9b      	subs	r3, r3, r2
90004e86:	009b      	lsls	r3, r3, #2
90004e88:	440b      	add	r3, r1
90004e8a:	331b      	adds	r3, #27
90004e8c:	781b      	ldrb	r3, [r3, #0]
90004e8e:	2b01      	cmp	r3, #1
90004e90:	d110      	bne.n	90004eb4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004e92:	78fa      	ldrb	r2, [r7, #3]
90004e94:	6879      	ldr	r1, [r7, #4]
90004e96:	4613      	mov	r3, r2
90004e98:	011b      	lsls	r3, r3, #4
90004e9a:	1a9b      	subs	r3, r3, r2
90004e9c:	009b      	lsls	r3, r3, #2
90004e9e:	440b      	add	r3, r1
90004ea0:	334d      	adds	r3, #77	@ 0x4d
90004ea2:	2204      	movs	r2, #4
90004ea4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ea6:	687b      	ldr	r3, [r7, #4]
90004ea8:	681b      	ldr	r3, [r3, #0]
90004eaa:	78fa      	ldrb	r2, [r7, #3]
90004eac:	4611      	mov	r1, r2
90004eae:	4618      	mov	r0, r3
90004eb0:	f005 f820 	bl	90009ef4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004eb4:	78fa      	ldrb	r2, [r7, #3]
90004eb6:	6879      	ldr	r1, [r7, #4]
90004eb8:	4613      	mov	r3, r2
90004eba:	011b      	lsls	r3, r3, #4
90004ebc:	1a9b      	subs	r3, r3, r2
90004ebe:	009b      	lsls	r3, r3, #2
90004ec0:	440b      	add	r3, r1
90004ec2:	331b      	adds	r3, #27
90004ec4:	781b      	ldrb	r3, [r3, #0]
90004ec6:	2b01      	cmp	r3, #1
90004ec8:	d129      	bne.n	90004f1e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004eca:	78fa      	ldrb	r2, [r7, #3]
90004ecc:	6879      	ldr	r1, [r7, #4]
90004ece:	4613      	mov	r3, r2
90004ed0:	011b      	lsls	r3, r3, #4
90004ed2:	1a9b      	subs	r3, r3, r2
90004ed4:	009b      	lsls	r3, r3, #2
90004ed6:	440b      	add	r3, r1
90004ed8:	331b      	adds	r3, #27
90004eda:	2200      	movs	r2, #0
90004edc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004ede:	78fb      	ldrb	r3, [r7, #3]
90004ee0:	015a      	lsls	r2, r3, #5
90004ee2:	693b      	ldr	r3, [r7, #16]
90004ee4:	4413      	add	r3, r2
90004ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004eea:	685b      	ldr	r3, [r3, #4]
90004eec:	78fa      	ldrb	r2, [r7, #3]
90004eee:	0151      	lsls	r1, r2, #5
90004ef0:	693a      	ldr	r2, [r7, #16]
90004ef2:	440a      	add	r2, r1
90004ef4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004efc:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004efe:	78fb      	ldrb	r3, [r7, #3]
90004f00:	015a      	lsls	r2, r3, #5
90004f02:	693b      	ldr	r3, [r7, #16]
90004f04:	4413      	add	r3, r2
90004f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f0a:	68db      	ldr	r3, [r3, #12]
90004f0c:	78fa      	ldrb	r2, [r7, #3]
90004f0e:	0151      	lsls	r1, r2, #5
90004f10:	693a      	ldr	r2, [r7, #16]
90004f12:	440a      	add	r2, r1
90004f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004f18:	f043 0320 	orr.w	r3, r3, #32
90004f1c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004f1e:	78fb      	ldrb	r3, [r7, #3]
90004f20:	015a      	lsls	r2, r3, #5
90004f22:	693b      	ldr	r3, [r7, #16]
90004f24:	4413      	add	r3, r2
90004f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f2a:	461a      	mov	r2, r3
90004f2c:	2310      	movs	r3, #16
90004f2e:	6093      	str	r3, [r2, #8]
90004f30:	e000      	b.n	90004f34 <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004f32:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004f34:	3718      	adds	r7, #24
90004f36:	46bd      	mov	sp, r7
90004f38:	bd80      	pop	{r7, pc}

90004f3a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004f3a:	b580      	push	{r7, lr}
90004f3c:	b086      	sub	sp, #24
90004f3e:	af00      	add	r7, sp, #0
90004f40:	6078      	str	r0, [r7, #4]
90004f42:	460b      	mov	r3, r1
90004f44:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004f46:	687b      	ldr	r3, [r7, #4]
90004f48:	681b      	ldr	r3, [r3, #0]
90004f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004f4c:	697b      	ldr	r3, [r7, #20]
90004f4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004f50:	687b      	ldr	r3, [r7, #4]
90004f52:	681b      	ldr	r3, [r3, #0]
90004f54:	78fa      	ldrb	r2, [r7, #3]
90004f56:	4611      	mov	r1, r2
90004f58:	4618      	mov	r0, r3
90004f5a:	f004 ff4e 	bl	90009dfa <USB_ReadChInterrupts>
90004f5e:	4603      	mov	r3, r0
90004f60:	f003 0304 	and.w	r3, r3, #4
90004f64:	2b04      	cmp	r3, #4
90004f66:	d11b      	bne.n	90004fa0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004f68:	78fb      	ldrb	r3, [r7, #3]
90004f6a:	015a      	lsls	r2, r3, #5
90004f6c:	693b      	ldr	r3, [r7, #16]
90004f6e:	4413      	add	r3, r2
90004f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f74:	461a      	mov	r2, r3
90004f76:	2304      	movs	r3, #4
90004f78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004f7a:	78fa      	ldrb	r2, [r7, #3]
90004f7c:	6879      	ldr	r1, [r7, #4]
90004f7e:	4613      	mov	r3, r2
90004f80:	011b      	lsls	r3, r3, #4
90004f82:	1a9b      	subs	r3, r3, r2
90004f84:	009b      	lsls	r3, r3, #2
90004f86:	440b      	add	r3, r1
90004f88:	334d      	adds	r3, #77	@ 0x4d
90004f8a:	2207      	movs	r2, #7
90004f8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f8e:	687b      	ldr	r3, [r7, #4]
90004f90:	681b      	ldr	r3, [r3, #0]
90004f92:	78fa      	ldrb	r2, [r7, #3]
90004f94:	4611      	mov	r1, r2
90004f96:	4618      	mov	r0, r3
90004f98:	f004 ffac 	bl	90009ef4 <USB_HC_Halt>
90004f9c:	f000 bc89 	b.w	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004fa0:	687b      	ldr	r3, [r7, #4]
90004fa2:	681b      	ldr	r3, [r3, #0]
90004fa4:	78fa      	ldrb	r2, [r7, #3]
90004fa6:	4611      	mov	r1, r2
90004fa8:	4618      	mov	r0, r3
90004faa:	f004 ff26 	bl	90009dfa <USB_ReadChInterrupts>
90004fae:	4603      	mov	r3, r0
90004fb0:	f003 0320 	and.w	r3, r3, #32
90004fb4:	2b20      	cmp	r3, #32
90004fb6:	f040 8082 	bne.w	900050be <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004fba:	78fb      	ldrb	r3, [r7, #3]
90004fbc:	015a      	lsls	r2, r3, #5
90004fbe:	693b      	ldr	r3, [r7, #16]
90004fc0:	4413      	add	r3, r2
90004fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fc6:	461a      	mov	r2, r3
90004fc8:	2320      	movs	r3, #32
90004fca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004fcc:	78fa      	ldrb	r2, [r7, #3]
90004fce:	6879      	ldr	r1, [r7, #4]
90004fd0:	4613      	mov	r3, r2
90004fd2:	011b      	lsls	r3, r3, #4
90004fd4:	1a9b      	subs	r3, r3, r2
90004fd6:	009b      	lsls	r3, r3, #2
90004fd8:	440b      	add	r3, r1
90004fda:	3319      	adds	r3, #25
90004fdc:	781b      	ldrb	r3, [r3, #0]
90004fde:	2b01      	cmp	r3, #1
90004fe0:	d124      	bne.n	9000502c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004fe2:	78fa      	ldrb	r2, [r7, #3]
90004fe4:	6879      	ldr	r1, [r7, #4]
90004fe6:	4613      	mov	r3, r2
90004fe8:	011b      	lsls	r3, r3, #4
90004fea:	1a9b      	subs	r3, r3, r2
90004fec:	009b      	lsls	r3, r3, #2
90004fee:	440b      	add	r3, r1
90004ff0:	3319      	adds	r3, #25
90004ff2:	2200      	movs	r2, #0
90004ff4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004ff6:	78fa      	ldrb	r2, [r7, #3]
90004ff8:	6879      	ldr	r1, [r7, #4]
90004ffa:	4613      	mov	r3, r2
90004ffc:	011b      	lsls	r3, r3, #4
90004ffe:	1a9b      	subs	r3, r3, r2
90005000:	009b      	lsls	r3, r3, #2
90005002:	440b      	add	r3, r1
90005004:	334c      	adds	r3, #76	@ 0x4c
90005006:	2202      	movs	r2, #2
90005008:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
9000500a:	78fa      	ldrb	r2, [r7, #3]
9000500c:	6879      	ldr	r1, [r7, #4]
9000500e:	4613      	mov	r3, r2
90005010:	011b      	lsls	r3, r3, #4
90005012:	1a9b      	subs	r3, r3, r2
90005014:	009b      	lsls	r3, r3, #2
90005016:	440b      	add	r3, r1
90005018:	334d      	adds	r3, #77	@ 0x4d
9000501a:	2203      	movs	r2, #3
9000501c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000501e:	687b      	ldr	r3, [r7, #4]
90005020:	681b      	ldr	r3, [r3, #0]
90005022:	78fa      	ldrb	r2, [r7, #3]
90005024:	4611      	mov	r1, r2
90005026:	4618      	mov	r0, r3
90005028:	f004 ff64 	bl	90009ef4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
9000502c:	78fa      	ldrb	r2, [r7, #3]
9000502e:	6879      	ldr	r1, [r7, #4]
90005030:	4613      	mov	r3, r2
90005032:	011b      	lsls	r3, r3, #4
90005034:	1a9b      	subs	r3, r3, r2
90005036:	009b      	lsls	r3, r3, #2
90005038:	440b      	add	r3, r1
9000503a:	331a      	adds	r3, #26
9000503c:	781b      	ldrb	r3, [r3, #0]
9000503e:	2b01      	cmp	r3, #1
90005040:	f040 8437 	bne.w	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
90005044:	78fa      	ldrb	r2, [r7, #3]
90005046:	6879      	ldr	r1, [r7, #4]
90005048:	4613      	mov	r3, r2
9000504a:	011b      	lsls	r3, r3, #4
9000504c:	1a9b      	subs	r3, r3, r2
9000504e:	009b      	lsls	r3, r3, #2
90005050:	440b      	add	r3, r1
90005052:	331b      	adds	r3, #27
90005054:	781b      	ldrb	r3, [r3, #0]
90005056:	2b00      	cmp	r3, #0
90005058:	f040 842b 	bne.w	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
9000505c:	78fa      	ldrb	r2, [r7, #3]
9000505e:	6879      	ldr	r1, [r7, #4]
90005060:	4613      	mov	r3, r2
90005062:	011b      	lsls	r3, r3, #4
90005064:	1a9b      	subs	r3, r3, r2
90005066:	009b      	lsls	r3, r3, #2
90005068:	440b      	add	r3, r1
9000506a:	3326      	adds	r3, #38	@ 0x26
9000506c:	781b      	ldrb	r3, [r3, #0]
9000506e:	2b01      	cmp	r3, #1
90005070:	d009      	beq.n	90005086 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90005072:	78fa      	ldrb	r2, [r7, #3]
90005074:	6879      	ldr	r1, [r7, #4]
90005076:	4613      	mov	r3, r2
90005078:	011b      	lsls	r3, r3, #4
9000507a:	1a9b      	subs	r3, r3, r2
9000507c:	009b      	lsls	r3, r3, #2
9000507e:	440b      	add	r3, r1
90005080:	331b      	adds	r3, #27
90005082:	2201      	movs	r2, #1
90005084:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90005086:	78fa      	ldrb	r2, [r7, #3]
90005088:	6879      	ldr	r1, [r7, #4]
9000508a:	4613      	mov	r3, r2
9000508c:	011b      	lsls	r3, r3, #4
9000508e:	1a9b      	subs	r3, r3, r2
90005090:	009b      	lsls	r3, r3, #2
90005092:	440b      	add	r3, r1
90005094:	334d      	adds	r3, #77	@ 0x4d
90005096:	2203      	movs	r2, #3
90005098:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000509a:	687b      	ldr	r3, [r7, #4]
9000509c:	681b      	ldr	r3, [r3, #0]
9000509e:	78fa      	ldrb	r2, [r7, #3]
900050a0:	4611      	mov	r1, r2
900050a2:	4618      	mov	r0, r3
900050a4:	f004 ff26 	bl	90009ef4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
900050a8:	78fa      	ldrb	r2, [r7, #3]
900050aa:	6879      	ldr	r1, [r7, #4]
900050ac:	4613      	mov	r3, r2
900050ae:	011b      	lsls	r3, r3, #4
900050b0:	1a9b      	subs	r3, r3, r2
900050b2:	009b      	lsls	r3, r3, #2
900050b4:	440b      	add	r3, r1
900050b6:	3344      	adds	r3, #68	@ 0x44
900050b8:	2200      	movs	r2, #0
900050ba:	601a      	str	r2, [r3, #0]
900050bc:	e3f9      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900050be:	687b      	ldr	r3, [r7, #4]
900050c0:	681b      	ldr	r3, [r3, #0]
900050c2:	78fa      	ldrb	r2, [r7, #3]
900050c4:	4611      	mov	r1, r2
900050c6:	4618      	mov	r0, r3
900050c8:	f004 fe97 	bl	90009dfa <USB_ReadChInterrupts>
900050cc:	4603      	mov	r3, r0
900050ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900050d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900050d6:	d111      	bne.n	900050fc <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900050d8:	78fb      	ldrb	r3, [r7, #3]
900050da:	015a      	lsls	r2, r3, #5
900050dc:	693b      	ldr	r3, [r7, #16]
900050de:	4413      	add	r3, r2
900050e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050e4:	461a      	mov	r2, r3
900050e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
900050ea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900050ec:	687b      	ldr	r3, [r7, #4]
900050ee:	681b      	ldr	r3, [r3, #0]
900050f0:	78fa      	ldrb	r2, [r7, #3]
900050f2:	4611      	mov	r1, r2
900050f4:	4618      	mov	r0, r3
900050f6:	f004 fefd 	bl	90009ef4 <USB_HC_Halt>
900050fa:	e3da      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900050fc:	687b      	ldr	r3, [r7, #4]
900050fe:	681b      	ldr	r3, [r3, #0]
90005100:	78fa      	ldrb	r2, [r7, #3]
90005102:	4611      	mov	r1, r2
90005104:	4618      	mov	r0, r3
90005106:	f004 fe78 	bl	90009dfa <USB_ReadChInterrupts>
9000510a:	4603      	mov	r3, r0
9000510c:	f003 0301 	and.w	r3, r3, #1
90005110:	2b01      	cmp	r3, #1
90005112:	d168      	bne.n	900051e6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005114:	78fa      	ldrb	r2, [r7, #3]
90005116:	6879      	ldr	r1, [r7, #4]
90005118:	4613      	mov	r3, r2
9000511a:	011b      	lsls	r3, r3, #4
9000511c:	1a9b      	subs	r3, r3, r2
9000511e:	009b      	lsls	r3, r3, #2
90005120:	440b      	add	r3, r1
90005122:	3344      	adds	r3, #68	@ 0x44
90005124:	2200      	movs	r2, #0
90005126:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005128:	687b      	ldr	r3, [r7, #4]
9000512a:	681b      	ldr	r3, [r3, #0]
9000512c:	78fa      	ldrb	r2, [r7, #3]
9000512e:	4611      	mov	r1, r2
90005130:	4618      	mov	r0, r3
90005132:	f004 fe62 	bl	90009dfa <USB_ReadChInterrupts>
90005136:	4603      	mov	r3, r0
90005138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000513c:	2b40      	cmp	r3, #64	@ 0x40
9000513e:	d112      	bne.n	90005166 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005140:	78fa      	ldrb	r2, [r7, #3]
90005142:	6879      	ldr	r1, [r7, #4]
90005144:	4613      	mov	r3, r2
90005146:	011b      	lsls	r3, r3, #4
90005148:	1a9b      	subs	r3, r3, r2
9000514a:	009b      	lsls	r3, r3, #2
9000514c:	440b      	add	r3, r1
9000514e:	3319      	adds	r3, #25
90005150:	2201      	movs	r2, #1
90005152:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005154:	78fb      	ldrb	r3, [r7, #3]
90005156:	015a      	lsls	r2, r3, #5
90005158:	693b      	ldr	r3, [r7, #16]
9000515a:	4413      	add	r3, r2
9000515c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005160:	461a      	mov	r2, r3
90005162:	2340      	movs	r3, #64	@ 0x40
90005164:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90005166:	78fa      	ldrb	r2, [r7, #3]
90005168:	6879      	ldr	r1, [r7, #4]
9000516a:	4613      	mov	r3, r2
9000516c:	011b      	lsls	r3, r3, #4
9000516e:	1a9b      	subs	r3, r3, r2
90005170:	009b      	lsls	r3, r3, #2
90005172:	440b      	add	r3, r1
90005174:	331b      	adds	r3, #27
90005176:	781b      	ldrb	r3, [r3, #0]
90005178:	2b00      	cmp	r3, #0
9000517a:	d019      	beq.n	900051b0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
9000517c:	78fa      	ldrb	r2, [r7, #3]
9000517e:	6879      	ldr	r1, [r7, #4]
90005180:	4613      	mov	r3, r2
90005182:	011b      	lsls	r3, r3, #4
90005184:	1a9b      	subs	r3, r3, r2
90005186:	009b      	lsls	r3, r3, #2
90005188:	440b      	add	r3, r1
9000518a:	331b      	adds	r3, #27
9000518c:	2200      	movs	r2, #0
9000518e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005190:	78fb      	ldrb	r3, [r7, #3]
90005192:	015a      	lsls	r2, r3, #5
90005194:	693b      	ldr	r3, [r7, #16]
90005196:	4413      	add	r3, r2
90005198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000519c:	685b      	ldr	r3, [r3, #4]
9000519e:	78fa      	ldrb	r2, [r7, #3]
900051a0:	0151      	lsls	r1, r2, #5
900051a2:	693a      	ldr	r2, [r7, #16]
900051a4:	440a      	add	r2, r1
900051a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900051aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900051ae:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900051b0:	78fb      	ldrb	r3, [r7, #3]
900051b2:	015a      	lsls	r2, r3, #5
900051b4:	693b      	ldr	r3, [r7, #16]
900051b6:	4413      	add	r3, r2
900051b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051bc:	461a      	mov	r2, r3
900051be:	2301      	movs	r3, #1
900051c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
900051c2:	78fa      	ldrb	r2, [r7, #3]
900051c4:	6879      	ldr	r1, [r7, #4]
900051c6:	4613      	mov	r3, r2
900051c8:	011b      	lsls	r3, r3, #4
900051ca:	1a9b      	subs	r3, r3, r2
900051cc:	009b      	lsls	r3, r3, #2
900051ce:	440b      	add	r3, r1
900051d0:	334d      	adds	r3, #77	@ 0x4d
900051d2:	2201      	movs	r2, #1
900051d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900051d6:	687b      	ldr	r3, [r7, #4]
900051d8:	681b      	ldr	r3, [r3, #0]
900051da:	78fa      	ldrb	r2, [r7, #3]
900051dc:	4611      	mov	r1, r2
900051de:	4618      	mov	r0, r3
900051e0:	f004 fe88 	bl	90009ef4 <USB_HC_Halt>
900051e4:	e365      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
900051e6:	687b      	ldr	r3, [r7, #4]
900051e8:	681b      	ldr	r3, [r3, #0]
900051ea:	78fa      	ldrb	r2, [r7, #3]
900051ec:	4611      	mov	r1, r2
900051ee:	4618      	mov	r0, r3
900051f0:	f004 fe03 	bl	90009dfa <USB_ReadChInterrupts>
900051f4:	4603      	mov	r3, r0
900051f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900051fa:	2b40      	cmp	r3, #64	@ 0x40
900051fc:	d139      	bne.n	90005272 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
900051fe:	78fa      	ldrb	r2, [r7, #3]
90005200:	6879      	ldr	r1, [r7, #4]
90005202:	4613      	mov	r3, r2
90005204:	011b      	lsls	r3, r3, #4
90005206:	1a9b      	subs	r3, r3, r2
90005208:	009b      	lsls	r3, r3, #2
9000520a:	440b      	add	r3, r1
9000520c:	334d      	adds	r3, #77	@ 0x4d
9000520e:	2205      	movs	r2, #5
90005210:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90005212:	78fa      	ldrb	r2, [r7, #3]
90005214:	6879      	ldr	r1, [r7, #4]
90005216:	4613      	mov	r3, r2
90005218:	011b      	lsls	r3, r3, #4
9000521a:	1a9b      	subs	r3, r3, r2
9000521c:	009b      	lsls	r3, r3, #2
9000521e:	440b      	add	r3, r1
90005220:	331a      	adds	r3, #26
90005222:	781b      	ldrb	r3, [r3, #0]
90005224:	2b00      	cmp	r3, #0
90005226:	d109      	bne.n	9000523c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005228:	78fa      	ldrb	r2, [r7, #3]
9000522a:	6879      	ldr	r1, [r7, #4]
9000522c:	4613      	mov	r3, r2
9000522e:	011b      	lsls	r3, r3, #4
90005230:	1a9b      	subs	r3, r3, r2
90005232:	009b      	lsls	r3, r3, #2
90005234:	440b      	add	r3, r1
90005236:	3319      	adds	r3, #25
90005238:	2201      	movs	r2, #1
9000523a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
9000523c:	78fa      	ldrb	r2, [r7, #3]
9000523e:	6879      	ldr	r1, [r7, #4]
90005240:	4613      	mov	r3, r2
90005242:	011b      	lsls	r3, r3, #4
90005244:	1a9b      	subs	r3, r3, r2
90005246:	009b      	lsls	r3, r3, #2
90005248:	440b      	add	r3, r1
9000524a:	3344      	adds	r3, #68	@ 0x44
9000524c:	2200      	movs	r2, #0
9000524e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005250:	687b      	ldr	r3, [r7, #4]
90005252:	681b      	ldr	r3, [r3, #0]
90005254:	78fa      	ldrb	r2, [r7, #3]
90005256:	4611      	mov	r1, r2
90005258:	4618      	mov	r0, r3
9000525a:	f004 fe4b 	bl	90009ef4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
9000525e:	78fb      	ldrb	r3, [r7, #3]
90005260:	015a      	lsls	r2, r3, #5
90005262:	693b      	ldr	r3, [r7, #16]
90005264:	4413      	add	r3, r2
90005266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000526a:	461a      	mov	r2, r3
9000526c:	2340      	movs	r3, #64	@ 0x40
9000526e:	6093      	str	r3, [r2, #8]
90005270:	e31f      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90005272:	687b      	ldr	r3, [r7, #4]
90005274:	681b      	ldr	r3, [r3, #0]
90005276:	78fa      	ldrb	r2, [r7, #3]
90005278:	4611      	mov	r1, r2
9000527a:	4618      	mov	r0, r3
9000527c:	f004 fdbd 	bl	90009dfa <USB_ReadChInterrupts>
90005280:	4603      	mov	r3, r0
90005282:	f003 0308 	and.w	r3, r3, #8
90005286:	2b08      	cmp	r3, #8
90005288:	d11a      	bne.n	900052c0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000528a:	78fb      	ldrb	r3, [r7, #3]
9000528c:	015a      	lsls	r2, r3, #5
9000528e:	693b      	ldr	r3, [r7, #16]
90005290:	4413      	add	r3, r2
90005292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005296:	461a      	mov	r2, r3
90005298:	2308      	movs	r3, #8
9000529a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
9000529c:	78fa      	ldrb	r2, [r7, #3]
9000529e:	6879      	ldr	r1, [r7, #4]
900052a0:	4613      	mov	r3, r2
900052a2:	011b      	lsls	r3, r3, #4
900052a4:	1a9b      	subs	r3, r3, r2
900052a6:	009b      	lsls	r3, r3, #2
900052a8:	440b      	add	r3, r1
900052aa:	334d      	adds	r3, #77	@ 0x4d
900052ac:	2206      	movs	r2, #6
900052ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900052b0:	687b      	ldr	r3, [r7, #4]
900052b2:	681b      	ldr	r3, [r3, #0]
900052b4:	78fa      	ldrb	r2, [r7, #3]
900052b6:	4611      	mov	r1, r2
900052b8:	4618      	mov	r0, r3
900052ba:	f004 fe1b 	bl	90009ef4 <USB_HC_Halt>
900052be:	e2f8      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
900052c0:	687b      	ldr	r3, [r7, #4]
900052c2:	681b      	ldr	r3, [r3, #0]
900052c4:	78fa      	ldrb	r2, [r7, #3]
900052c6:	4611      	mov	r1, r2
900052c8:	4618      	mov	r0, r3
900052ca:	f004 fd96 	bl	90009dfa <USB_ReadChInterrupts>
900052ce:	4603      	mov	r3, r0
900052d0:	f003 0310 	and.w	r3, r3, #16
900052d4:	2b10      	cmp	r3, #16
900052d6:	d144      	bne.n	90005362 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900052d8:	78fa      	ldrb	r2, [r7, #3]
900052da:	6879      	ldr	r1, [r7, #4]
900052dc:	4613      	mov	r3, r2
900052de:	011b      	lsls	r3, r3, #4
900052e0:	1a9b      	subs	r3, r3, r2
900052e2:	009b      	lsls	r3, r3, #2
900052e4:	440b      	add	r3, r1
900052e6:	3344      	adds	r3, #68	@ 0x44
900052e8:	2200      	movs	r2, #0
900052ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
900052ec:	78fa      	ldrb	r2, [r7, #3]
900052ee:	6879      	ldr	r1, [r7, #4]
900052f0:	4613      	mov	r3, r2
900052f2:	011b      	lsls	r3, r3, #4
900052f4:	1a9b      	subs	r3, r3, r2
900052f6:	009b      	lsls	r3, r3, #2
900052f8:	440b      	add	r3, r1
900052fa:	334d      	adds	r3, #77	@ 0x4d
900052fc:	2204      	movs	r2, #4
900052fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90005300:	78fa      	ldrb	r2, [r7, #3]
90005302:	6879      	ldr	r1, [r7, #4]
90005304:	4613      	mov	r3, r2
90005306:	011b      	lsls	r3, r3, #4
90005308:	1a9b      	subs	r3, r3, r2
9000530a:	009b      	lsls	r3, r3, #2
9000530c:	440b      	add	r3, r1
9000530e:	3319      	adds	r3, #25
90005310:	781b      	ldrb	r3, [r3, #0]
90005312:	2b00      	cmp	r3, #0
90005314:	d114      	bne.n	90005340 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
90005316:	78fa      	ldrb	r2, [r7, #3]
90005318:	6879      	ldr	r1, [r7, #4]
9000531a:	4613      	mov	r3, r2
9000531c:	011b      	lsls	r3, r3, #4
9000531e:	1a9b      	subs	r3, r3, r2
90005320:	009b      	lsls	r3, r3, #2
90005322:	440b      	add	r3, r1
90005324:	3318      	adds	r3, #24
90005326:	781b      	ldrb	r3, [r3, #0]
90005328:	2b00      	cmp	r3, #0
9000532a:	d109      	bne.n	90005340 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
9000532c:	78fa      	ldrb	r2, [r7, #3]
9000532e:	6879      	ldr	r1, [r7, #4]
90005330:	4613      	mov	r3, r2
90005332:	011b      	lsls	r3, r3, #4
90005334:	1a9b      	subs	r3, r3, r2
90005336:	009b      	lsls	r3, r3, #2
90005338:	440b      	add	r3, r1
9000533a:	3319      	adds	r3, #25
9000533c:	2201      	movs	r2, #1
9000533e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005340:	687b      	ldr	r3, [r7, #4]
90005342:	681b      	ldr	r3, [r3, #0]
90005344:	78fa      	ldrb	r2, [r7, #3]
90005346:	4611      	mov	r1, r2
90005348:	4618      	mov	r0, r3
9000534a:	f004 fdd3 	bl	90009ef4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000534e:	78fb      	ldrb	r3, [r7, #3]
90005350:	015a      	lsls	r2, r3, #5
90005352:	693b      	ldr	r3, [r7, #16]
90005354:	4413      	add	r3, r2
90005356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000535a:	461a      	mov	r2, r3
9000535c:	2310      	movs	r3, #16
9000535e:	6093      	str	r3, [r2, #8]
90005360:	e2a7      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005362:	687b      	ldr	r3, [r7, #4]
90005364:	681b      	ldr	r3, [r3, #0]
90005366:	78fa      	ldrb	r2, [r7, #3]
90005368:	4611      	mov	r1, r2
9000536a:	4618      	mov	r0, r3
9000536c:	f004 fd45 	bl	90009dfa <USB_ReadChInterrupts>
90005370:	4603      	mov	r3, r0
90005372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90005376:	2b80      	cmp	r3, #128	@ 0x80
90005378:	f040 8083 	bne.w	90005482 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
9000537c:	687b      	ldr	r3, [r7, #4]
9000537e:	799b      	ldrb	r3, [r3, #6]
90005380:	2b00      	cmp	r3, #0
90005382:	d111      	bne.n	900053a8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005384:	78fa      	ldrb	r2, [r7, #3]
90005386:	6879      	ldr	r1, [r7, #4]
90005388:	4613      	mov	r3, r2
9000538a:	011b      	lsls	r3, r3, #4
9000538c:	1a9b      	subs	r3, r3, r2
9000538e:	009b      	lsls	r3, r3, #2
90005390:	440b      	add	r3, r1
90005392:	334d      	adds	r3, #77	@ 0x4d
90005394:	2207      	movs	r2, #7
90005396:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005398:	687b      	ldr	r3, [r7, #4]
9000539a:	681b      	ldr	r3, [r3, #0]
9000539c:	78fa      	ldrb	r2, [r7, #3]
9000539e:	4611      	mov	r1, r2
900053a0:	4618      	mov	r0, r3
900053a2:	f004 fda7 	bl	90009ef4 <USB_HC_Halt>
900053a6:	e062      	b.n	9000546e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
900053a8:	78fa      	ldrb	r2, [r7, #3]
900053aa:	6879      	ldr	r1, [r7, #4]
900053ac:	4613      	mov	r3, r2
900053ae:	011b      	lsls	r3, r3, #4
900053b0:	1a9b      	subs	r3, r3, r2
900053b2:	009b      	lsls	r3, r3, #2
900053b4:	440b      	add	r3, r1
900053b6:	3344      	adds	r3, #68	@ 0x44
900053b8:	681b      	ldr	r3, [r3, #0]
900053ba:	1c59      	adds	r1, r3, #1
900053bc:	6878      	ldr	r0, [r7, #4]
900053be:	4613      	mov	r3, r2
900053c0:	011b      	lsls	r3, r3, #4
900053c2:	1a9b      	subs	r3, r3, r2
900053c4:	009b      	lsls	r3, r3, #2
900053c6:	4403      	add	r3, r0
900053c8:	3344      	adds	r3, #68	@ 0x44
900053ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900053cc:	78fa      	ldrb	r2, [r7, #3]
900053ce:	6879      	ldr	r1, [r7, #4]
900053d0:	4613      	mov	r3, r2
900053d2:	011b      	lsls	r3, r3, #4
900053d4:	1a9b      	subs	r3, r3, r2
900053d6:	009b      	lsls	r3, r3, #2
900053d8:	440b      	add	r3, r1
900053da:	3344      	adds	r3, #68	@ 0x44
900053dc:	681b      	ldr	r3, [r3, #0]
900053de:	2b02      	cmp	r3, #2
900053e0:	d922      	bls.n	90005428 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900053e2:	78fa      	ldrb	r2, [r7, #3]
900053e4:	6879      	ldr	r1, [r7, #4]
900053e6:	4613      	mov	r3, r2
900053e8:	011b      	lsls	r3, r3, #4
900053ea:	1a9b      	subs	r3, r3, r2
900053ec:	009b      	lsls	r3, r3, #2
900053ee:	440b      	add	r3, r1
900053f0:	3344      	adds	r3, #68	@ 0x44
900053f2:	2200      	movs	r2, #0
900053f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900053f6:	78fa      	ldrb	r2, [r7, #3]
900053f8:	6879      	ldr	r1, [r7, #4]
900053fa:	4613      	mov	r3, r2
900053fc:	011b      	lsls	r3, r3, #4
900053fe:	1a9b      	subs	r3, r3, r2
90005400:	009b      	lsls	r3, r3, #2
90005402:	440b      	add	r3, r1
90005404:	334c      	adds	r3, #76	@ 0x4c
90005406:	2204      	movs	r2, #4
90005408:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000540a:	78fa      	ldrb	r2, [r7, #3]
9000540c:	6879      	ldr	r1, [r7, #4]
9000540e:	4613      	mov	r3, r2
90005410:	011b      	lsls	r3, r3, #4
90005412:	1a9b      	subs	r3, r3, r2
90005414:	009b      	lsls	r3, r3, #2
90005416:	440b      	add	r3, r1
90005418:	334c      	adds	r3, #76	@ 0x4c
9000541a:	781a      	ldrb	r2, [r3, #0]
9000541c:	78fb      	ldrb	r3, [r7, #3]
9000541e:	4619      	mov	r1, r3
90005420:	6878      	ldr	r0, [r7, #4]
90005422:	f7fb faeb 	bl	900009fc <HAL_HCD_HC_NotifyURBChange_Callback>
90005426:	e022      	b.n	9000546e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005428:	78fa      	ldrb	r2, [r7, #3]
9000542a:	6879      	ldr	r1, [r7, #4]
9000542c:	4613      	mov	r3, r2
9000542e:	011b      	lsls	r3, r3, #4
90005430:	1a9b      	subs	r3, r3, r2
90005432:	009b      	lsls	r3, r3, #2
90005434:	440b      	add	r3, r1
90005436:	334c      	adds	r3, #76	@ 0x4c
90005438:	2202      	movs	r2, #2
9000543a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000543c:	78fb      	ldrb	r3, [r7, #3]
9000543e:	015a      	lsls	r2, r3, #5
90005440:	693b      	ldr	r3, [r7, #16]
90005442:	4413      	add	r3, r2
90005444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005448:	681b      	ldr	r3, [r3, #0]
9000544a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000544c:	68fb      	ldr	r3, [r7, #12]
9000544e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005452:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005454:	68fb      	ldr	r3, [r7, #12]
90005456:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000545a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000545c:	78fb      	ldrb	r3, [r7, #3]
9000545e:	015a      	lsls	r2, r3, #5
90005460:	693b      	ldr	r3, [r7, #16]
90005462:	4413      	add	r3, r2
90005464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005468:	461a      	mov	r2, r3
9000546a:	68fb      	ldr	r3, [r7, #12]
9000546c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000546e:	78fb      	ldrb	r3, [r7, #3]
90005470:	015a      	lsls	r2, r3, #5
90005472:	693b      	ldr	r3, [r7, #16]
90005474:	4413      	add	r3, r2
90005476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000547a:	461a      	mov	r2, r3
9000547c:	2380      	movs	r3, #128	@ 0x80
9000547e:	6093      	str	r3, [r2, #8]
90005480:	e217      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90005482:	687b      	ldr	r3, [r7, #4]
90005484:	681b      	ldr	r3, [r3, #0]
90005486:	78fa      	ldrb	r2, [r7, #3]
90005488:	4611      	mov	r1, r2
9000548a:	4618      	mov	r0, r3
9000548c:	f004 fcb5 	bl	90009dfa <USB_ReadChInterrupts>
90005490:	4603      	mov	r3, r0
90005492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90005496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000549a:	d11b      	bne.n	900054d4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000549c:	78fa      	ldrb	r2, [r7, #3]
9000549e:	6879      	ldr	r1, [r7, #4]
900054a0:	4613      	mov	r3, r2
900054a2:	011b      	lsls	r3, r3, #4
900054a4:	1a9b      	subs	r3, r3, r2
900054a6:	009b      	lsls	r3, r3, #2
900054a8:	440b      	add	r3, r1
900054aa:	334d      	adds	r3, #77	@ 0x4d
900054ac:	2209      	movs	r2, #9
900054ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900054b0:	687b      	ldr	r3, [r7, #4]
900054b2:	681b      	ldr	r3, [r3, #0]
900054b4:	78fa      	ldrb	r2, [r7, #3]
900054b6:	4611      	mov	r1, r2
900054b8:	4618      	mov	r0, r3
900054ba:	f004 fd1b 	bl	90009ef4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900054be:	78fb      	ldrb	r3, [r7, #3]
900054c0:	015a      	lsls	r2, r3, #5
900054c2:	693b      	ldr	r3, [r7, #16]
900054c4:	4413      	add	r3, r2
900054c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054ca:	461a      	mov	r2, r3
900054cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900054d0:	6093      	str	r3, [r2, #8]
900054d2:	e1ee      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900054d4:	687b      	ldr	r3, [r7, #4]
900054d6:	681b      	ldr	r3, [r3, #0]
900054d8:	78fa      	ldrb	r2, [r7, #3]
900054da:	4611      	mov	r1, r2
900054dc:	4618      	mov	r0, r3
900054de:	f004 fc8c 	bl	90009dfa <USB_ReadChInterrupts>
900054e2:	4603      	mov	r3, r0
900054e4:	f003 0302 	and.w	r3, r3, #2
900054e8:	2b02      	cmp	r3, #2
900054ea:	f040 81df 	bne.w	900058ac <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900054ee:	78fb      	ldrb	r3, [r7, #3]
900054f0:	015a      	lsls	r2, r3, #5
900054f2:	693b      	ldr	r3, [r7, #16]
900054f4:	4413      	add	r3, r2
900054f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054fa:	461a      	mov	r2, r3
900054fc:	2302      	movs	r3, #2
900054fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90005500:	78fa      	ldrb	r2, [r7, #3]
90005502:	6879      	ldr	r1, [r7, #4]
90005504:	4613      	mov	r3, r2
90005506:	011b      	lsls	r3, r3, #4
90005508:	1a9b      	subs	r3, r3, r2
9000550a:	009b      	lsls	r3, r3, #2
9000550c:	440b      	add	r3, r1
9000550e:	334d      	adds	r3, #77	@ 0x4d
90005510:	781b      	ldrb	r3, [r3, #0]
90005512:	2b01      	cmp	r3, #1
90005514:	f040 8093 	bne.w	9000563e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005518:	78fa      	ldrb	r2, [r7, #3]
9000551a:	6879      	ldr	r1, [r7, #4]
9000551c:	4613      	mov	r3, r2
9000551e:	011b      	lsls	r3, r3, #4
90005520:	1a9b      	subs	r3, r3, r2
90005522:	009b      	lsls	r3, r3, #2
90005524:	440b      	add	r3, r1
90005526:	334d      	adds	r3, #77	@ 0x4d
90005528:	2202      	movs	r2, #2
9000552a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000552c:	78fa      	ldrb	r2, [r7, #3]
9000552e:	6879      	ldr	r1, [r7, #4]
90005530:	4613      	mov	r3, r2
90005532:	011b      	lsls	r3, r3, #4
90005534:	1a9b      	subs	r3, r3, r2
90005536:	009b      	lsls	r3, r3, #2
90005538:	440b      	add	r3, r1
9000553a:	334c      	adds	r3, #76	@ 0x4c
9000553c:	2201      	movs	r2, #1
9000553e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005540:	78fa      	ldrb	r2, [r7, #3]
90005542:	6879      	ldr	r1, [r7, #4]
90005544:	4613      	mov	r3, r2
90005546:	011b      	lsls	r3, r3, #4
90005548:	1a9b      	subs	r3, r3, r2
9000554a:	009b      	lsls	r3, r3, #2
9000554c:	440b      	add	r3, r1
9000554e:	3326      	adds	r3, #38	@ 0x26
90005550:	781b      	ldrb	r3, [r3, #0]
90005552:	2b02      	cmp	r3, #2
90005554:	d00b      	beq.n	9000556e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
90005556:	78fa      	ldrb	r2, [r7, #3]
90005558:	6879      	ldr	r1, [r7, #4]
9000555a:	4613      	mov	r3, r2
9000555c:	011b      	lsls	r3, r3, #4
9000555e:	1a9b      	subs	r3, r3, r2
90005560:	009b      	lsls	r3, r3, #2
90005562:	440b      	add	r3, r1
90005564:	3326      	adds	r3, #38	@ 0x26
90005566:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005568:	2b03      	cmp	r3, #3
9000556a:	f040 8190 	bne.w	9000588e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
9000556e:	687b      	ldr	r3, [r7, #4]
90005570:	799b      	ldrb	r3, [r3, #6]
90005572:	2b00      	cmp	r3, #0
90005574:	d115      	bne.n	900055a2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
90005576:	78fa      	ldrb	r2, [r7, #3]
90005578:	6879      	ldr	r1, [r7, #4]
9000557a:	4613      	mov	r3, r2
9000557c:	011b      	lsls	r3, r3, #4
9000557e:	1a9b      	subs	r3, r3, r2
90005580:	009b      	lsls	r3, r3, #2
90005582:	440b      	add	r3, r1
90005584:	333d      	adds	r3, #61	@ 0x3d
90005586:	781b      	ldrb	r3, [r3, #0]
90005588:	78fa      	ldrb	r2, [r7, #3]
9000558a:	f083 0301 	eor.w	r3, r3, #1
9000558e:	b2d8      	uxtb	r0, r3
90005590:	6879      	ldr	r1, [r7, #4]
90005592:	4613      	mov	r3, r2
90005594:	011b      	lsls	r3, r3, #4
90005596:	1a9b      	subs	r3, r3, r2
90005598:	009b      	lsls	r3, r3, #2
9000559a:	440b      	add	r3, r1
9000559c:	333d      	adds	r3, #61	@ 0x3d
9000559e:	4602      	mov	r2, r0
900055a0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
900055a2:	687b      	ldr	r3, [r7, #4]
900055a4:	799b      	ldrb	r3, [r3, #6]
900055a6:	2b01      	cmp	r3, #1
900055a8:	f040 8171 	bne.w	9000588e <HCD_HC_OUT_IRQHandler+0x954>
900055ac:	78fa      	ldrb	r2, [r7, #3]
900055ae:	6879      	ldr	r1, [r7, #4]
900055b0:	4613      	mov	r3, r2
900055b2:	011b      	lsls	r3, r3, #4
900055b4:	1a9b      	subs	r3, r3, r2
900055b6:	009b      	lsls	r3, r3, #2
900055b8:	440b      	add	r3, r1
900055ba:	3334      	adds	r3, #52	@ 0x34
900055bc:	681b      	ldr	r3, [r3, #0]
900055be:	2b00      	cmp	r3, #0
900055c0:	f000 8165 	beq.w	9000588e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
900055c4:	78fa      	ldrb	r2, [r7, #3]
900055c6:	6879      	ldr	r1, [r7, #4]
900055c8:	4613      	mov	r3, r2
900055ca:	011b      	lsls	r3, r3, #4
900055cc:	1a9b      	subs	r3, r3, r2
900055ce:	009b      	lsls	r3, r3, #2
900055d0:	440b      	add	r3, r1
900055d2:	3334      	adds	r3, #52	@ 0x34
900055d4:	6819      	ldr	r1, [r3, #0]
900055d6:	78fa      	ldrb	r2, [r7, #3]
900055d8:	6878      	ldr	r0, [r7, #4]
900055da:	4613      	mov	r3, r2
900055dc:	011b      	lsls	r3, r3, #4
900055de:	1a9b      	subs	r3, r3, r2
900055e0:	009b      	lsls	r3, r3, #2
900055e2:	4403      	add	r3, r0
900055e4:	3328      	adds	r3, #40	@ 0x28
900055e6:	881b      	ldrh	r3, [r3, #0]
900055e8:	440b      	add	r3, r1
900055ea:	1e59      	subs	r1, r3, #1
900055ec:	78fa      	ldrb	r2, [r7, #3]
900055ee:	6878      	ldr	r0, [r7, #4]
900055f0:	4613      	mov	r3, r2
900055f2:	011b      	lsls	r3, r3, #4
900055f4:	1a9b      	subs	r3, r3, r2
900055f6:	009b      	lsls	r3, r3, #2
900055f8:	4403      	add	r3, r0
900055fa:	3328      	adds	r3, #40	@ 0x28
900055fc:	881b      	ldrh	r3, [r3, #0]
900055fe:	fbb1 f3f3 	udiv	r3, r1, r3
90005602:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
90005604:	68bb      	ldr	r3, [r7, #8]
90005606:	f003 0301 	and.w	r3, r3, #1
9000560a:	2b00      	cmp	r3, #0
9000560c:	f000 813f 	beq.w	9000588e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005610:	78fa      	ldrb	r2, [r7, #3]
90005612:	6879      	ldr	r1, [r7, #4]
90005614:	4613      	mov	r3, r2
90005616:	011b      	lsls	r3, r3, #4
90005618:	1a9b      	subs	r3, r3, r2
9000561a:	009b      	lsls	r3, r3, #2
9000561c:	440b      	add	r3, r1
9000561e:	333d      	adds	r3, #61	@ 0x3d
90005620:	781b      	ldrb	r3, [r3, #0]
90005622:	78fa      	ldrb	r2, [r7, #3]
90005624:	f083 0301 	eor.w	r3, r3, #1
90005628:	b2d8      	uxtb	r0, r3
9000562a:	6879      	ldr	r1, [r7, #4]
9000562c:	4613      	mov	r3, r2
9000562e:	011b      	lsls	r3, r3, #4
90005630:	1a9b      	subs	r3, r3, r2
90005632:	009b      	lsls	r3, r3, #2
90005634:	440b      	add	r3, r1
90005636:	333d      	adds	r3, #61	@ 0x3d
90005638:	4602      	mov	r2, r0
9000563a:	701a      	strb	r2, [r3, #0]
9000563c:	e127      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
9000563e:	78fa      	ldrb	r2, [r7, #3]
90005640:	6879      	ldr	r1, [r7, #4]
90005642:	4613      	mov	r3, r2
90005644:	011b      	lsls	r3, r3, #4
90005646:	1a9b      	subs	r3, r3, r2
90005648:	009b      	lsls	r3, r3, #2
9000564a:	440b      	add	r3, r1
9000564c:	334d      	adds	r3, #77	@ 0x4d
9000564e:	781b      	ldrb	r3, [r3, #0]
90005650:	2b03      	cmp	r3, #3
90005652:	d120      	bne.n	90005696 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005654:	78fa      	ldrb	r2, [r7, #3]
90005656:	6879      	ldr	r1, [r7, #4]
90005658:	4613      	mov	r3, r2
9000565a:	011b      	lsls	r3, r3, #4
9000565c:	1a9b      	subs	r3, r3, r2
9000565e:	009b      	lsls	r3, r3, #2
90005660:	440b      	add	r3, r1
90005662:	334d      	adds	r3, #77	@ 0x4d
90005664:	2202      	movs	r2, #2
90005666:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005668:	78fa      	ldrb	r2, [r7, #3]
9000566a:	6879      	ldr	r1, [r7, #4]
9000566c:	4613      	mov	r3, r2
9000566e:	011b      	lsls	r3, r3, #4
90005670:	1a9b      	subs	r3, r3, r2
90005672:	009b      	lsls	r3, r3, #2
90005674:	440b      	add	r3, r1
90005676:	331b      	adds	r3, #27
90005678:	781b      	ldrb	r3, [r3, #0]
9000567a:	2b01      	cmp	r3, #1
9000567c:	f040 8107 	bne.w	9000588e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005680:	78fa      	ldrb	r2, [r7, #3]
90005682:	6879      	ldr	r1, [r7, #4]
90005684:	4613      	mov	r3, r2
90005686:	011b      	lsls	r3, r3, #4
90005688:	1a9b      	subs	r3, r3, r2
9000568a:	009b      	lsls	r3, r3, #2
9000568c:	440b      	add	r3, r1
9000568e:	334c      	adds	r3, #76	@ 0x4c
90005690:	2202      	movs	r2, #2
90005692:	701a      	strb	r2, [r3, #0]
90005694:	e0fb      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90005696:	78fa      	ldrb	r2, [r7, #3]
90005698:	6879      	ldr	r1, [r7, #4]
9000569a:	4613      	mov	r3, r2
9000569c:	011b      	lsls	r3, r3, #4
9000569e:	1a9b      	subs	r3, r3, r2
900056a0:	009b      	lsls	r3, r3, #2
900056a2:	440b      	add	r3, r1
900056a4:	334d      	adds	r3, #77	@ 0x4d
900056a6:	781b      	ldrb	r3, [r3, #0]
900056a8:	2b04      	cmp	r3, #4
900056aa:	d13a      	bne.n	90005722 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900056ac:	78fa      	ldrb	r2, [r7, #3]
900056ae:	6879      	ldr	r1, [r7, #4]
900056b0:	4613      	mov	r3, r2
900056b2:	011b      	lsls	r3, r3, #4
900056b4:	1a9b      	subs	r3, r3, r2
900056b6:	009b      	lsls	r3, r3, #2
900056b8:	440b      	add	r3, r1
900056ba:	334d      	adds	r3, #77	@ 0x4d
900056bc:	2202      	movs	r2, #2
900056be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900056c0:	78fa      	ldrb	r2, [r7, #3]
900056c2:	6879      	ldr	r1, [r7, #4]
900056c4:	4613      	mov	r3, r2
900056c6:	011b      	lsls	r3, r3, #4
900056c8:	1a9b      	subs	r3, r3, r2
900056ca:	009b      	lsls	r3, r3, #2
900056cc:	440b      	add	r3, r1
900056ce:	334c      	adds	r3, #76	@ 0x4c
900056d0:	2202      	movs	r2, #2
900056d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900056d4:	78fa      	ldrb	r2, [r7, #3]
900056d6:	6879      	ldr	r1, [r7, #4]
900056d8:	4613      	mov	r3, r2
900056da:	011b      	lsls	r3, r3, #4
900056dc:	1a9b      	subs	r3, r3, r2
900056de:	009b      	lsls	r3, r3, #2
900056e0:	440b      	add	r3, r1
900056e2:	331b      	adds	r3, #27
900056e4:	781b      	ldrb	r3, [r3, #0]
900056e6:	2b01      	cmp	r3, #1
900056e8:	f040 80d1 	bne.w	9000588e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
900056ec:	78fa      	ldrb	r2, [r7, #3]
900056ee:	6879      	ldr	r1, [r7, #4]
900056f0:	4613      	mov	r3, r2
900056f2:	011b      	lsls	r3, r3, #4
900056f4:	1a9b      	subs	r3, r3, r2
900056f6:	009b      	lsls	r3, r3, #2
900056f8:	440b      	add	r3, r1
900056fa:	331b      	adds	r3, #27
900056fc:	2200      	movs	r2, #0
900056fe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005700:	78fb      	ldrb	r3, [r7, #3]
90005702:	015a      	lsls	r2, r3, #5
90005704:	693b      	ldr	r3, [r7, #16]
90005706:	4413      	add	r3, r2
90005708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000570c:	685b      	ldr	r3, [r3, #4]
9000570e:	78fa      	ldrb	r2, [r7, #3]
90005710:	0151      	lsls	r1, r2, #5
90005712:	693a      	ldr	r2, [r7, #16]
90005714:	440a      	add	r2, r1
90005716:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000571a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000571e:	6053      	str	r3, [r2, #4]
90005720:	e0b5      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90005722:	78fa      	ldrb	r2, [r7, #3]
90005724:	6879      	ldr	r1, [r7, #4]
90005726:	4613      	mov	r3, r2
90005728:	011b      	lsls	r3, r3, #4
9000572a:	1a9b      	subs	r3, r3, r2
9000572c:	009b      	lsls	r3, r3, #2
9000572e:	440b      	add	r3, r1
90005730:	334d      	adds	r3, #77	@ 0x4d
90005732:	781b      	ldrb	r3, [r3, #0]
90005734:	2b05      	cmp	r3, #5
90005736:	d114      	bne.n	90005762 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005738:	78fa      	ldrb	r2, [r7, #3]
9000573a:	6879      	ldr	r1, [r7, #4]
9000573c:	4613      	mov	r3, r2
9000573e:	011b      	lsls	r3, r3, #4
90005740:	1a9b      	subs	r3, r3, r2
90005742:	009b      	lsls	r3, r3, #2
90005744:	440b      	add	r3, r1
90005746:	334d      	adds	r3, #77	@ 0x4d
90005748:	2202      	movs	r2, #2
9000574a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
9000574c:	78fa      	ldrb	r2, [r7, #3]
9000574e:	6879      	ldr	r1, [r7, #4]
90005750:	4613      	mov	r3, r2
90005752:	011b      	lsls	r3, r3, #4
90005754:	1a9b      	subs	r3, r3, r2
90005756:	009b      	lsls	r3, r3, #2
90005758:	440b      	add	r3, r1
9000575a:	334c      	adds	r3, #76	@ 0x4c
9000575c:	2202      	movs	r2, #2
9000575e:	701a      	strb	r2, [r3, #0]
90005760:	e095      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005762:	78fa      	ldrb	r2, [r7, #3]
90005764:	6879      	ldr	r1, [r7, #4]
90005766:	4613      	mov	r3, r2
90005768:	011b      	lsls	r3, r3, #4
9000576a:	1a9b      	subs	r3, r3, r2
9000576c:	009b      	lsls	r3, r3, #2
9000576e:	440b      	add	r3, r1
90005770:	334d      	adds	r3, #77	@ 0x4d
90005772:	781b      	ldrb	r3, [r3, #0]
90005774:	2b06      	cmp	r3, #6
90005776:	d114      	bne.n	900057a2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005778:	78fa      	ldrb	r2, [r7, #3]
9000577a:	6879      	ldr	r1, [r7, #4]
9000577c:	4613      	mov	r3, r2
9000577e:	011b      	lsls	r3, r3, #4
90005780:	1a9b      	subs	r3, r3, r2
90005782:	009b      	lsls	r3, r3, #2
90005784:	440b      	add	r3, r1
90005786:	334d      	adds	r3, #77	@ 0x4d
90005788:	2202      	movs	r2, #2
9000578a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
9000578c:	78fa      	ldrb	r2, [r7, #3]
9000578e:	6879      	ldr	r1, [r7, #4]
90005790:	4613      	mov	r3, r2
90005792:	011b      	lsls	r3, r3, #4
90005794:	1a9b      	subs	r3, r3, r2
90005796:	009b      	lsls	r3, r3, #2
90005798:	440b      	add	r3, r1
9000579a:	334c      	adds	r3, #76	@ 0x4c
9000579c:	2205      	movs	r2, #5
9000579e:	701a      	strb	r2, [r3, #0]
900057a0:	e075      	b.n	9000588e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900057a2:	78fa      	ldrb	r2, [r7, #3]
900057a4:	6879      	ldr	r1, [r7, #4]
900057a6:	4613      	mov	r3, r2
900057a8:	011b      	lsls	r3, r3, #4
900057aa:	1a9b      	subs	r3, r3, r2
900057ac:	009b      	lsls	r3, r3, #2
900057ae:	440b      	add	r3, r1
900057b0:	334d      	adds	r3, #77	@ 0x4d
900057b2:	781b      	ldrb	r3, [r3, #0]
900057b4:	2b07      	cmp	r3, #7
900057b6:	d00a      	beq.n	900057ce <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900057b8:	78fa      	ldrb	r2, [r7, #3]
900057ba:	6879      	ldr	r1, [r7, #4]
900057bc:	4613      	mov	r3, r2
900057be:	011b      	lsls	r3, r3, #4
900057c0:	1a9b      	subs	r3, r3, r2
900057c2:	009b      	lsls	r3, r3, #2
900057c4:	440b      	add	r3, r1
900057c6:	334d      	adds	r3, #77	@ 0x4d
900057c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900057ca:	2b09      	cmp	r3, #9
900057cc:	d170      	bne.n	900058b0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900057ce:	78fa      	ldrb	r2, [r7, #3]
900057d0:	6879      	ldr	r1, [r7, #4]
900057d2:	4613      	mov	r3, r2
900057d4:	011b      	lsls	r3, r3, #4
900057d6:	1a9b      	subs	r3, r3, r2
900057d8:	009b      	lsls	r3, r3, #2
900057da:	440b      	add	r3, r1
900057dc:	334d      	adds	r3, #77	@ 0x4d
900057de:	2202      	movs	r2, #2
900057e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900057e2:	78fa      	ldrb	r2, [r7, #3]
900057e4:	6879      	ldr	r1, [r7, #4]
900057e6:	4613      	mov	r3, r2
900057e8:	011b      	lsls	r3, r3, #4
900057ea:	1a9b      	subs	r3, r3, r2
900057ec:	009b      	lsls	r3, r3, #2
900057ee:	440b      	add	r3, r1
900057f0:	3344      	adds	r3, #68	@ 0x44
900057f2:	681b      	ldr	r3, [r3, #0]
900057f4:	1c59      	adds	r1, r3, #1
900057f6:	6878      	ldr	r0, [r7, #4]
900057f8:	4613      	mov	r3, r2
900057fa:	011b      	lsls	r3, r3, #4
900057fc:	1a9b      	subs	r3, r3, r2
900057fe:	009b      	lsls	r3, r3, #2
90005800:	4403      	add	r3, r0
90005802:	3344      	adds	r3, #68	@ 0x44
90005804:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005806:	78fa      	ldrb	r2, [r7, #3]
90005808:	6879      	ldr	r1, [r7, #4]
9000580a:	4613      	mov	r3, r2
9000580c:	011b      	lsls	r3, r3, #4
9000580e:	1a9b      	subs	r3, r3, r2
90005810:	009b      	lsls	r3, r3, #2
90005812:	440b      	add	r3, r1
90005814:	3344      	adds	r3, #68	@ 0x44
90005816:	681b      	ldr	r3, [r3, #0]
90005818:	2b02      	cmp	r3, #2
9000581a:	d914      	bls.n	90005846 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
9000581c:	78fa      	ldrb	r2, [r7, #3]
9000581e:	6879      	ldr	r1, [r7, #4]
90005820:	4613      	mov	r3, r2
90005822:	011b      	lsls	r3, r3, #4
90005824:	1a9b      	subs	r3, r3, r2
90005826:	009b      	lsls	r3, r3, #2
90005828:	440b      	add	r3, r1
9000582a:	3344      	adds	r3, #68	@ 0x44
9000582c:	2200      	movs	r2, #0
9000582e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005830:	78fa      	ldrb	r2, [r7, #3]
90005832:	6879      	ldr	r1, [r7, #4]
90005834:	4613      	mov	r3, r2
90005836:	011b      	lsls	r3, r3, #4
90005838:	1a9b      	subs	r3, r3, r2
9000583a:	009b      	lsls	r3, r3, #2
9000583c:	440b      	add	r3, r1
9000583e:	334c      	adds	r3, #76	@ 0x4c
90005840:	2204      	movs	r2, #4
90005842:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005844:	e022      	b.n	9000588c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005846:	78fa      	ldrb	r2, [r7, #3]
90005848:	6879      	ldr	r1, [r7, #4]
9000584a:	4613      	mov	r3, r2
9000584c:	011b      	lsls	r3, r3, #4
9000584e:	1a9b      	subs	r3, r3, r2
90005850:	009b      	lsls	r3, r3, #2
90005852:	440b      	add	r3, r1
90005854:	334c      	adds	r3, #76	@ 0x4c
90005856:	2202      	movs	r2, #2
90005858:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000585a:	78fb      	ldrb	r3, [r7, #3]
9000585c:	015a      	lsls	r2, r3, #5
9000585e:	693b      	ldr	r3, [r7, #16]
90005860:	4413      	add	r3, r2
90005862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005866:	681b      	ldr	r3, [r3, #0]
90005868:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000586a:	68fb      	ldr	r3, [r7, #12]
9000586c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005870:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005872:	68fb      	ldr	r3, [r7, #12]
90005874:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005878:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000587a:	78fb      	ldrb	r3, [r7, #3]
9000587c:	015a      	lsls	r2, r3, #5
9000587e:	693b      	ldr	r3, [r7, #16]
90005880:	4413      	add	r3, r2
90005882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005886:	461a      	mov	r2, r3
90005888:	68fb      	ldr	r3, [r7, #12]
9000588a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000588c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000588e:	78fa      	ldrb	r2, [r7, #3]
90005890:	6879      	ldr	r1, [r7, #4]
90005892:	4613      	mov	r3, r2
90005894:	011b      	lsls	r3, r3, #4
90005896:	1a9b      	subs	r3, r3, r2
90005898:	009b      	lsls	r3, r3, #2
9000589a:	440b      	add	r3, r1
9000589c:	334c      	adds	r3, #76	@ 0x4c
9000589e:	781a      	ldrb	r2, [r3, #0]
900058a0:	78fb      	ldrb	r3, [r7, #3]
900058a2:	4619      	mov	r1, r3
900058a4:	6878      	ldr	r0, [r7, #4]
900058a6:	f7fb f8a9 	bl	900009fc <HAL_HCD_HC_NotifyURBChange_Callback>
900058aa:	e002      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
900058ac:	bf00      	nop
900058ae:	e000      	b.n	900058b2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
900058b0:	bf00      	nop
  }
}
900058b2:	3718      	adds	r7, #24
900058b4:	46bd      	mov	sp, r7
900058b6:	bd80      	pop	{r7, pc}

900058b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900058b8:	b580      	push	{r7, lr}
900058ba:	b08a      	sub	sp, #40	@ 0x28
900058bc:	af00      	add	r7, sp, #0
900058be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900058c0:	687b      	ldr	r3, [r7, #4]
900058c2:	681b      	ldr	r3, [r3, #0]
900058c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
900058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900058c8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
900058ca:	687b      	ldr	r3, [r7, #4]
900058cc:	681b      	ldr	r3, [r3, #0]
900058ce:	6a1b      	ldr	r3, [r3, #32]
900058d0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
900058d2:	69fb      	ldr	r3, [r7, #28]
900058d4:	f003 030f 	and.w	r3, r3, #15
900058d8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
900058da:	69fb      	ldr	r3, [r7, #28]
900058dc:	0c5b      	lsrs	r3, r3, #17
900058de:	f003 030f 	and.w	r3, r3, #15
900058e2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
900058e4:	69fb      	ldr	r3, [r7, #28]
900058e6:	091b      	lsrs	r3, r3, #4
900058e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
900058ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
900058ee:	697b      	ldr	r3, [r7, #20]
900058f0:	2b02      	cmp	r3, #2
900058f2:	d004      	beq.n	900058fe <HCD_RXQLVL_IRQHandler+0x46>
900058f4:	697b      	ldr	r3, [r7, #20]
900058f6:	2b05      	cmp	r3, #5
900058f8:	f000 80b6 	beq.w	90005a68 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900058fc:	e0b7      	b.n	90005a6e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900058fe:	693b      	ldr	r3, [r7, #16]
90005900:	2b00      	cmp	r3, #0
90005902:	f000 80b3 	beq.w	90005a6c <HCD_RXQLVL_IRQHandler+0x1b4>
90005906:	6879      	ldr	r1, [r7, #4]
90005908:	69ba      	ldr	r2, [r7, #24]
9000590a:	4613      	mov	r3, r2
9000590c:	011b      	lsls	r3, r3, #4
9000590e:	1a9b      	subs	r3, r3, r2
90005910:	009b      	lsls	r3, r3, #2
90005912:	440b      	add	r3, r1
90005914:	332c      	adds	r3, #44	@ 0x2c
90005916:	681b      	ldr	r3, [r3, #0]
90005918:	2b00      	cmp	r3, #0
9000591a:	f000 80a7 	beq.w	90005a6c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
9000591e:	6879      	ldr	r1, [r7, #4]
90005920:	69ba      	ldr	r2, [r7, #24]
90005922:	4613      	mov	r3, r2
90005924:	011b      	lsls	r3, r3, #4
90005926:	1a9b      	subs	r3, r3, r2
90005928:	009b      	lsls	r3, r3, #2
9000592a:	440b      	add	r3, r1
9000592c:	3338      	adds	r3, #56	@ 0x38
9000592e:	681a      	ldr	r2, [r3, #0]
90005930:	693b      	ldr	r3, [r7, #16]
90005932:	18d1      	adds	r1, r2, r3
90005934:	6878      	ldr	r0, [r7, #4]
90005936:	69ba      	ldr	r2, [r7, #24]
90005938:	4613      	mov	r3, r2
9000593a:	011b      	lsls	r3, r3, #4
9000593c:	1a9b      	subs	r3, r3, r2
9000593e:	009b      	lsls	r3, r3, #2
90005940:	4403      	add	r3, r0
90005942:	3334      	adds	r3, #52	@ 0x34
90005944:	681b      	ldr	r3, [r3, #0]
90005946:	4299      	cmp	r1, r3
90005948:	f200 8083 	bhi.w	90005a52 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
9000594c:	687b      	ldr	r3, [r7, #4]
9000594e:	6818      	ldr	r0, [r3, #0]
90005950:	6879      	ldr	r1, [r7, #4]
90005952:	69ba      	ldr	r2, [r7, #24]
90005954:	4613      	mov	r3, r2
90005956:	011b      	lsls	r3, r3, #4
90005958:	1a9b      	subs	r3, r3, r2
9000595a:	009b      	lsls	r3, r3, #2
9000595c:	440b      	add	r3, r1
9000595e:	332c      	adds	r3, #44	@ 0x2c
90005960:	681b      	ldr	r3, [r3, #0]
90005962:	693a      	ldr	r2, [r7, #16]
90005964:	b292      	uxth	r2, r2
90005966:	4619      	mov	r1, r3
90005968:	f004 f9dc 	bl	90009d24 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
9000596c:	6879      	ldr	r1, [r7, #4]
9000596e:	69ba      	ldr	r2, [r7, #24]
90005970:	4613      	mov	r3, r2
90005972:	011b      	lsls	r3, r3, #4
90005974:	1a9b      	subs	r3, r3, r2
90005976:	009b      	lsls	r3, r3, #2
90005978:	440b      	add	r3, r1
9000597a:	332c      	adds	r3, #44	@ 0x2c
9000597c:	681a      	ldr	r2, [r3, #0]
9000597e:	693b      	ldr	r3, [r7, #16]
90005980:	18d1      	adds	r1, r2, r3
90005982:	6878      	ldr	r0, [r7, #4]
90005984:	69ba      	ldr	r2, [r7, #24]
90005986:	4613      	mov	r3, r2
90005988:	011b      	lsls	r3, r3, #4
9000598a:	1a9b      	subs	r3, r3, r2
9000598c:	009b      	lsls	r3, r3, #2
9000598e:	4403      	add	r3, r0
90005990:	332c      	adds	r3, #44	@ 0x2c
90005992:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005994:	6879      	ldr	r1, [r7, #4]
90005996:	69ba      	ldr	r2, [r7, #24]
90005998:	4613      	mov	r3, r2
9000599a:	011b      	lsls	r3, r3, #4
9000599c:	1a9b      	subs	r3, r3, r2
9000599e:	009b      	lsls	r3, r3, #2
900059a0:	440b      	add	r3, r1
900059a2:	3338      	adds	r3, #56	@ 0x38
900059a4:	681a      	ldr	r2, [r3, #0]
900059a6:	693b      	ldr	r3, [r7, #16]
900059a8:	18d1      	adds	r1, r2, r3
900059aa:	6878      	ldr	r0, [r7, #4]
900059ac:	69ba      	ldr	r2, [r7, #24]
900059ae:	4613      	mov	r3, r2
900059b0:	011b      	lsls	r3, r3, #4
900059b2:	1a9b      	subs	r3, r3, r2
900059b4:	009b      	lsls	r3, r3, #2
900059b6:	4403      	add	r3, r0
900059b8:	3338      	adds	r3, #56	@ 0x38
900059ba:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
900059bc:	69bb      	ldr	r3, [r7, #24]
900059be:	015a      	lsls	r2, r3, #5
900059c0:	6a3b      	ldr	r3, [r7, #32]
900059c2:	4413      	add	r3, r2
900059c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900059c8:	691b      	ldr	r3, [r3, #16]
900059ca:	0cdb      	lsrs	r3, r3, #19
900059cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
900059d0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
900059d2:	6879      	ldr	r1, [r7, #4]
900059d4:	69ba      	ldr	r2, [r7, #24]
900059d6:	4613      	mov	r3, r2
900059d8:	011b      	lsls	r3, r3, #4
900059da:	1a9b      	subs	r3, r3, r2
900059dc:	009b      	lsls	r3, r3, #2
900059de:	440b      	add	r3, r1
900059e0:	3328      	adds	r3, #40	@ 0x28
900059e2:	881b      	ldrh	r3, [r3, #0]
900059e4:	461a      	mov	r2, r3
900059e6:	693b      	ldr	r3, [r7, #16]
900059e8:	4293      	cmp	r3, r2
900059ea:	d13f      	bne.n	90005a6c <HCD_RXQLVL_IRQHandler+0x1b4>
900059ec:	68fb      	ldr	r3, [r7, #12]
900059ee:	2b00      	cmp	r3, #0
900059f0:	d03c      	beq.n	90005a6c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
900059f2:	69bb      	ldr	r3, [r7, #24]
900059f4:	015a      	lsls	r2, r3, #5
900059f6:	6a3b      	ldr	r3, [r7, #32]
900059f8:	4413      	add	r3, r2
900059fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900059fe:	681b      	ldr	r3, [r3, #0]
90005a00:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005a02:	68bb      	ldr	r3, [r7, #8]
90005a04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005a08:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
90005a0a:	68bb      	ldr	r3, [r7, #8]
90005a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005a10:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
90005a12:	69bb      	ldr	r3, [r7, #24]
90005a14:	015a      	lsls	r2, r3, #5
90005a16:	6a3b      	ldr	r3, [r7, #32]
90005a18:	4413      	add	r3, r2
90005a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a1e:	461a      	mov	r2, r3
90005a20:	68bb      	ldr	r3, [r7, #8]
90005a22:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90005a24:	6879      	ldr	r1, [r7, #4]
90005a26:	69ba      	ldr	r2, [r7, #24]
90005a28:	4613      	mov	r3, r2
90005a2a:	011b      	lsls	r3, r3, #4
90005a2c:	1a9b      	subs	r3, r3, r2
90005a2e:	009b      	lsls	r3, r3, #2
90005a30:	440b      	add	r3, r1
90005a32:	333c      	adds	r3, #60	@ 0x3c
90005a34:	781b      	ldrb	r3, [r3, #0]
90005a36:	f083 0301 	eor.w	r3, r3, #1
90005a3a:	b2d8      	uxtb	r0, r3
90005a3c:	6879      	ldr	r1, [r7, #4]
90005a3e:	69ba      	ldr	r2, [r7, #24]
90005a40:	4613      	mov	r3, r2
90005a42:	011b      	lsls	r3, r3, #4
90005a44:	1a9b      	subs	r3, r3, r2
90005a46:	009b      	lsls	r3, r3, #2
90005a48:	440b      	add	r3, r1
90005a4a:	333c      	adds	r3, #60	@ 0x3c
90005a4c:	4602      	mov	r2, r0
90005a4e:	701a      	strb	r2, [r3, #0]
      break;
90005a50:	e00c      	b.n	90005a6c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90005a52:	6879      	ldr	r1, [r7, #4]
90005a54:	69ba      	ldr	r2, [r7, #24]
90005a56:	4613      	mov	r3, r2
90005a58:	011b      	lsls	r3, r3, #4
90005a5a:	1a9b      	subs	r3, r3, r2
90005a5c:	009b      	lsls	r3, r3, #2
90005a5e:	440b      	add	r3, r1
90005a60:	334c      	adds	r3, #76	@ 0x4c
90005a62:	2204      	movs	r2, #4
90005a64:	701a      	strb	r2, [r3, #0]
      break;
90005a66:	e001      	b.n	90005a6c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90005a68:	bf00      	nop
90005a6a:	e000      	b.n	90005a6e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90005a6c:	bf00      	nop
  }
}
90005a6e:	bf00      	nop
90005a70:	3728      	adds	r7, #40	@ 0x28
90005a72:	46bd      	mov	sp, r7
90005a74:	bd80      	pop	{r7, pc}

90005a76 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005a76:	b580      	push	{r7, lr}
90005a78:	b086      	sub	sp, #24
90005a7a:	af00      	add	r7, sp, #0
90005a7c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005a7e:	687b      	ldr	r3, [r7, #4]
90005a80:	681b      	ldr	r3, [r3, #0]
90005a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005a84:	697b      	ldr	r3, [r7, #20]
90005a86:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005a88:	693b      	ldr	r3, [r7, #16]
90005a8a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005a8e:	681b      	ldr	r3, [r3, #0]
90005a90:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005a92:	693b      	ldr	r3, [r7, #16]
90005a94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005a98:	681b      	ldr	r3, [r3, #0]
90005a9a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90005a9c:	68bb      	ldr	r3, [r7, #8]
90005a9e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90005aa2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005aa4:	68fb      	ldr	r3, [r7, #12]
90005aa6:	f003 0302 	and.w	r3, r3, #2
90005aaa:	2b02      	cmp	r3, #2
90005aac:	d10b      	bne.n	90005ac6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005aae:	68fb      	ldr	r3, [r7, #12]
90005ab0:	f003 0301 	and.w	r3, r3, #1
90005ab4:	2b01      	cmp	r3, #1
90005ab6:	d102      	bne.n	90005abe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005ab8:	6878      	ldr	r0, [r7, #4]
90005aba:	f7fa ff67 	bl	9000098c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90005abe:	68bb      	ldr	r3, [r7, #8]
90005ac0:	f043 0302 	orr.w	r3, r3, #2
90005ac4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005ac6:	68fb      	ldr	r3, [r7, #12]
90005ac8:	f003 0308 	and.w	r3, r3, #8
90005acc:	2b08      	cmp	r3, #8
90005ace:	d132      	bne.n	90005b36 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005ad0:	68bb      	ldr	r3, [r7, #8]
90005ad2:	f043 0308 	orr.w	r3, r3, #8
90005ad6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005ad8:	68fb      	ldr	r3, [r7, #12]
90005ada:	f003 0304 	and.w	r3, r3, #4
90005ade:	2b04      	cmp	r3, #4
90005ae0:	d126      	bne.n	90005b30 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005ae2:	687b      	ldr	r3, [r7, #4]
90005ae4:	7a5b      	ldrb	r3, [r3, #9]
90005ae6:	2b02      	cmp	r3, #2
90005ae8:	d113      	bne.n	90005b12 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005aea:	68fb      	ldr	r3, [r7, #12]
90005aec:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90005af0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90005af4:	d106      	bne.n	90005b04 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005af6:	687b      	ldr	r3, [r7, #4]
90005af8:	681b      	ldr	r3, [r3, #0]
90005afa:	2102      	movs	r1, #2
90005afc:	4618      	mov	r0, r3
90005afe:	f004 f9ab 	bl	90009e58 <USB_InitFSLSPClkSel>
90005b02:	e011      	b.n	90005b28 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90005b04:	687b      	ldr	r3, [r7, #4]
90005b06:	681b      	ldr	r3, [r3, #0]
90005b08:	2101      	movs	r1, #1
90005b0a:	4618      	mov	r0, r3
90005b0c:	f004 f9a4 	bl	90009e58 <USB_InitFSLSPClkSel>
90005b10:	e00a      	b.n	90005b28 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
90005b12:	687b      	ldr	r3, [r7, #4]
90005b14:	79db      	ldrb	r3, [r3, #7]
90005b16:	2b01      	cmp	r3, #1
90005b18:	d106      	bne.n	90005b28 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90005b1a:	693b      	ldr	r3, [r7, #16]
90005b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005b20:	461a      	mov	r2, r3
90005b22:	f64e 2360 	movw	r3, #60000	@ 0xea60
90005b26:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005b28:	6878      	ldr	r0, [r7, #4]
90005b2a:	f7fa ff4b 	bl	900009c4 <HAL_HCD_PortEnabled_Callback>
90005b2e:	e002      	b.n	90005b36 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005b30:	6878      	ldr	r0, [r7, #4]
90005b32:	f7fa ff55 	bl	900009e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90005b36:	68fb      	ldr	r3, [r7, #12]
90005b38:	f003 0320 	and.w	r3, r3, #32
90005b3c:	2b20      	cmp	r3, #32
90005b3e:	d103      	bne.n	90005b48 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005b40:	68bb      	ldr	r3, [r7, #8]
90005b42:	f043 0320 	orr.w	r3, r3, #32
90005b46:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005b48:	693b      	ldr	r3, [r7, #16]
90005b4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005b4e:	461a      	mov	r2, r3
90005b50:	68bb      	ldr	r3, [r7, #8]
90005b52:	6013      	str	r3, [r2, #0]
}
90005b54:	bf00      	nop
90005b56:	3718      	adds	r7, #24
90005b58:	46bd      	mov	sp, r7
90005b5a:	bd80      	pop	{r7, pc}

90005b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005b5c:	b580      	push	{r7, lr}
90005b5e:	b082      	sub	sp, #8
90005b60:	af00      	add	r7, sp, #0
90005b62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005b64:	687b      	ldr	r3, [r7, #4]
90005b66:	2b00      	cmp	r3, #0
90005b68:	d101      	bne.n	90005b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005b6a:	2301      	movs	r3, #1
90005b6c:	e08b      	b.n	90005c86 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005b6e:	687b      	ldr	r3, [r7, #4]
90005b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005b74:	b2db      	uxtb	r3, r3
90005b76:	2b00      	cmp	r3, #0
90005b78:	d106      	bne.n	90005b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005b7a:	687b      	ldr	r3, [r7, #4]
90005b7c:	2200      	movs	r2, #0
90005b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005b82:	6878      	ldr	r0, [r7, #4]
90005b84:	f000 f8b5 	bl	90005cf2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005b88:	687b      	ldr	r3, [r7, #4]
90005b8a:	2224      	movs	r2, #36	@ 0x24
90005b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005b90:	687b      	ldr	r3, [r7, #4]
90005b92:	681b      	ldr	r3, [r3, #0]
90005b94:	681a      	ldr	r2, [r3, #0]
90005b96:	687b      	ldr	r3, [r7, #4]
90005b98:	681b      	ldr	r3, [r3, #0]
90005b9a:	f022 0201 	bic.w	r2, r2, #1
90005b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005ba0:	687b      	ldr	r3, [r7, #4]
90005ba2:	685a      	ldr	r2, [r3, #4]
90005ba4:	687b      	ldr	r3, [r7, #4]
90005ba6:	681b      	ldr	r3, [r3, #0]
90005ba8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005bac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005bae:	687b      	ldr	r3, [r7, #4]
90005bb0:	681b      	ldr	r3, [r3, #0]
90005bb2:	689a      	ldr	r2, [r3, #8]
90005bb4:	687b      	ldr	r3, [r7, #4]
90005bb6:	681b      	ldr	r3, [r3, #0]
90005bb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005bbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005bbe:	687b      	ldr	r3, [r7, #4]
90005bc0:	68db      	ldr	r3, [r3, #12]
90005bc2:	2b01      	cmp	r3, #1
90005bc4:	d107      	bne.n	90005bd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005bc6:	687b      	ldr	r3, [r7, #4]
90005bc8:	689a      	ldr	r2, [r3, #8]
90005bca:	687b      	ldr	r3, [r7, #4]
90005bcc:	681b      	ldr	r3, [r3, #0]
90005bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005bd2:	609a      	str	r2, [r3, #8]
90005bd4:	e006      	b.n	90005be4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005bd6:	687b      	ldr	r3, [r7, #4]
90005bd8:	689a      	ldr	r2, [r3, #8]
90005bda:	687b      	ldr	r3, [r7, #4]
90005bdc:	681b      	ldr	r3, [r3, #0]
90005bde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005be2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005be4:	687b      	ldr	r3, [r7, #4]
90005be6:	68db      	ldr	r3, [r3, #12]
90005be8:	2b02      	cmp	r3, #2
90005bea:	d108      	bne.n	90005bfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005bec:	687b      	ldr	r3, [r7, #4]
90005bee:	681b      	ldr	r3, [r3, #0]
90005bf0:	685a      	ldr	r2, [r3, #4]
90005bf2:	687b      	ldr	r3, [r7, #4]
90005bf4:	681b      	ldr	r3, [r3, #0]
90005bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005bfa:	605a      	str	r2, [r3, #4]
90005bfc:	e007      	b.n	90005c0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005bfe:	687b      	ldr	r3, [r7, #4]
90005c00:	681b      	ldr	r3, [r3, #0]
90005c02:	685a      	ldr	r2, [r3, #4]
90005c04:	687b      	ldr	r3, [r7, #4]
90005c06:	681b      	ldr	r3, [r3, #0]
90005c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005c0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005c0e:	687b      	ldr	r3, [r7, #4]
90005c10:	681b      	ldr	r3, [r3, #0]
90005c12:	6859      	ldr	r1, [r3, #4]
90005c14:	687b      	ldr	r3, [r7, #4]
90005c16:	681a      	ldr	r2, [r3, #0]
90005c18:	4b1d      	ldr	r3, [pc, #116]	@ (90005c90 <HAL_I2C_Init+0x134>)
90005c1a:	430b      	orrs	r3, r1
90005c1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005c1e:	687b      	ldr	r3, [r7, #4]
90005c20:	681b      	ldr	r3, [r3, #0]
90005c22:	68da      	ldr	r2, [r3, #12]
90005c24:	687b      	ldr	r3, [r7, #4]
90005c26:	681b      	ldr	r3, [r3, #0]
90005c28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005c2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005c2e:	687b      	ldr	r3, [r7, #4]
90005c30:	691a      	ldr	r2, [r3, #16]
90005c32:	687b      	ldr	r3, [r7, #4]
90005c34:	695b      	ldr	r3, [r3, #20]
90005c36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005c3a:	687b      	ldr	r3, [r7, #4]
90005c3c:	699b      	ldr	r3, [r3, #24]
90005c3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005c40:	687b      	ldr	r3, [r7, #4]
90005c42:	681b      	ldr	r3, [r3, #0]
90005c44:	430a      	orrs	r2, r1
90005c46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005c48:	687b      	ldr	r3, [r7, #4]
90005c4a:	69d9      	ldr	r1, [r3, #28]
90005c4c:	687b      	ldr	r3, [r7, #4]
90005c4e:	6a1a      	ldr	r2, [r3, #32]
90005c50:	687b      	ldr	r3, [r7, #4]
90005c52:	681b      	ldr	r3, [r3, #0]
90005c54:	430a      	orrs	r2, r1
90005c56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005c58:	687b      	ldr	r3, [r7, #4]
90005c5a:	681b      	ldr	r3, [r3, #0]
90005c5c:	681a      	ldr	r2, [r3, #0]
90005c5e:	687b      	ldr	r3, [r7, #4]
90005c60:	681b      	ldr	r3, [r3, #0]
90005c62:	f042 0201 	orr.w	r2, r2, #1
90005c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005c68:	687b      	ldr	r3, [r7, #4]
90005c6a:	2200      	movs	r2, #0
90005c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005c6e:	687b      	ldr	r3, [r7, #4]
90005c70:	2220      	movs	r2, #32
90005c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005c76:	687b      	ldr	r3, [r7, #4]
90005c78:	2200      	movs	r2, #0
90005c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005c7c:	687b      	ldr	r3, [r7, #4]
90005c7e:	2200      	movs	r2, #0
90005c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005c84:	2300      	movs	r3, #0
}
90005c86:	4618      	mov	r0, r3
90005c88:	3708      	adds	r7, #8
90005c8a:	46bd      	mov	sp, r7
90005c8c:	bd80      	pop	{r7, pc}
90005c8e:	bf00      	nop
90005c90:	02008000 	.word	0x02008000

90005c94 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
90005c94:	b580      	push	{r7, lr}
90005c96:	b082      	sub	sp, #8
90005c98:	af00      	add	r7, sp, #0
90005c9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005c9c:	687b      	ldr	r3, [r7, #4]
90005c9e:	2b00      	cmp	r3, #0
90005ca0:	d101      	bne.n	90005ca6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
90005ca2:	2301      	movs	r3, #1
90005ca4:	e021      	b.n	90005cea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
90005ca6:	687b      	ldr	r3, [r7, #4]
90005ca8:	2224      	movs	r2, #36	@ 0x24
90005caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
90005cae:	687b      	ldr	r3, [r7, #4]
90005cb0:	681b      	ldr	r3, [r3, #0]
90005cb2:	681a      	ldr	r2, [r3, #0]
90005cb4:	687b      	ldr	r3, [r7, #4]
90005cb6:	681b      	ldr	r3, [r3, #0]
90005cb8:	f022 0201 	bic.w	r2, r2, #1
90005cbc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
90005cbe:	6878      	ldr	r0, [r7, #4]
90005cc0:	f000 f821 	bl	90005d06 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005cc4:	687b      	ldr	r3, [r7, #4]
90005cc6:	2200      	movs	r2, #0
90005cc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
90005cca:	687b      	ldr	r3, [r7, #4]
90005ccc:	2200      	movs	r2, #0
90005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005cd2:	687b      	ldr	r3, [r7, #4]
90005cd4:	2200      	movs	r2, #0
90005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005cd8:	687b      	ldr	r3, [r7, #4]
90005cda:	2200      	movs	r2, #0
90005cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
90005ce0:	687b      	ldr	r3, [r7, #4]
90005ce2:	2200      	movs	r2, #0
90005ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
90005ce8:	2300      	movs	r3, #0
}
90005cea:	4618      	mov	r0, r3
90005cec:	3708      	adds	r7, #8
90005cee:	46bd      	mov	sp, r7
90005cf0:	bd80      	pop	{r7, pc}

90005cf2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005cf2:	b480      	push	{r7}
90005cf4:	b083      	sub	sp, #12
90005cf6:	af00      	add	r7, sp, #0
90005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005cfa:	bf00      	nop
90005cfc:	370c      	adds	r7, #12
90005cfe:	46bd      	mov	sp, r7
90005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d04:	4770      	bx	lr

90005d06 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
90005d06:	b480      	push	{r7}
90005d08:	b083      	sub	sp, #12
90005d0a:	af00      	add	r7, sp, #0
90005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
90005d0e:	bf00      	nop
90005d10:	370c      	adds	r7, #12
90005d12:	46bd      	mov	sp, r7
90005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d18:	4770      	bx	lr
	...

90005d1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005d1c:	b580      	push	{r7, lr}
90005d1e:	b088      	sub	sp, #32
90005d20:	af02      	add	r7, sp, #8
90005d22:	60f8      	str	r0, [r7, #12]
90005d24:	4608      	mov	r0, r1
90005d26:	4611      	mov	r1, r2
90005d28:	461a      	mov	r2, r3
90005d2a:	4603      	mov	r3, r0
90005d2c:	817b      	strh	r3, [r7, #10]
90005d2e:	460b      	mov	r3, r1
90005d30:	813b      	strh	r3, [r7, #8]
90005d32:	4613      	mov	r3, r2
90005d34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005d36:	68fb      	ldr	r3, [r7, #12]
90005d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005d3c:	b2db      	uxtb	r3, r3
90005d3e:	2b20      	cmp	r3, #32
90005d40:	f040 80f9 	bne.w	90005f36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
90005d44:	6a3b      	ldr	r3, [r7, #32]
90005d46:	2b00      	cmp	r3, #0
90005d48:	d002      	beq.n	90005d50 <HAL_I2C_Mem_Write+0x34>
90005d4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005d4c:	2b00      	cmp	r3, #0
90005d4e:	d105      	bne.n	90005d5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005d50:	68fb      	ldr	r3, [r7, #12]
90005d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005d56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005d58:	2301      	movs	r3, #1
90005d5a:	e0ed      	b.n	90005f38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005d5c:	68fb      	ldr	r3, [r7, #12]
90005d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005d62:	2b01      	cmp	r3, #1
90005d64:	d101      	bne.n	90005d6a <HAL_I2C_Mem_Write+0x4e>
90005d66:	2302      	movs	r3, #2
90005d68:	e0e6      	b.n	90005f38 <HAL_I2C_Mem_Write+0x21c>
90005d6a:	68fb      	ldr	r3, [r7, #12]
90005d6c:	2201      	movs	r2, #1
90005d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005d72:	f7fd f9f3 	bl	9000315c <HAL_GetTick>
90005d76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005d78:	697b      	ldr	r3, [r7, #20]
90005d7a:	9300      	str	r3, [sp, #0]
90005d7c:	2319      	movs	r3, #25
90005d7e:	2201      	movs	r2, #1
90005d80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005d84:	68f8      	ldr	r0, [r7, #12]
90005d86:	f000 fadd 	bl	90006344 <I2C_WaitOnFlagUntilTimeout>
90005d8a:	4603      	mov	r3, r0
90005d8c:	2b00      	cmp	r3, #0
90005d8e:	d001      	beq.n	90005d94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
90005d90:	2301      	movs	r3, #1
90005d92:	e0d1      	b.n	90005f38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90005d94:	68fb      	ldr	r3, [r7, #12]
90005d96:	2221      	movs	r2, #33	@ 0x21
90005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005d9c:	68fb      	ldr	r3, [r7, #12]
90005d9e:	2240      	movs	r2, #64	@ 0x40
90005da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005da4:	68fb      	ldr	r3, [r7, #12]
90005da6:	2200      	movs	r2, #0
90005da8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005daa:	68fb      	ldr	r3, [r7, #12]
90005dac:	6a3a      	ldr	r2, [r7, #32]
90005dae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005db0:	68fb      	ldr	r3, [r7, #12]
90005db2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005db6:	68fb      	ldr	r3, [r7, #12]
90005db8:	2200      	movs	r2, #0
90005dba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005dbc:	88f8      	ldrh	r0, [r7, #6]
90005dbe:	893a      	ldrh	r2, [r7, #8]
90005dc0:	8979      	ldrh	r1, [r7, #10]
90005dc2:	697b      	ldr	r3, [r7, #20]
90005dc4:	9301      	str	r3, [sp, #4]
90005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005dc8:	9300      	str	r3, [sp, #0]
90005dca:	4603      	mov	r3, r0
90005dcc:	68f8      	ldr	r0, [r7, #12]
90005dce:	f000 f9ed 	bl	900061ac <I2C_RequestMemoryWrite>
90005dd2:	4603      	mov	r3, r0
90005dd4:	2b00      	cmp	r3, #0
90005dd6:	d005      	beq.n	90005de4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005dd8:	68fb      	ldr	r3, [r7, #12]
90005dda:	2200      	movs	r2, #0
90005ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005de0:	2301      	movs	r3, #1
90005de2:	e0a9      	b.n	90005f38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005de4:	68fb      	ldr	r3, [r7, #12]
90005de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005de8:	b29b      	uxth	r3, r3
90005dea:	2bff      	cmp	r3, #255	@ 0xff
90005dec:	d90e      	bls.n	90005e0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005dee:	68fb      	ldr	r3, [r7, #12]
90005df0:	22ff      	movs	r2, #255	@ 0xff
90005df2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90005df4:	68fb      	ldr	r3, [r7, #12]
90005df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005df8:	b2da      	uxtb	r2, r3
90005dfa:	8979      	ldrh	r1, [r7, #10]
90005dfc:	2300      	movs	r3, #0
90005dfe:	9300      	str	r3, [sp, #0]
90005e00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005e04:	68f8      	ldr	r0, [r7, #12]
90005e06:	f000 fc61 	bl	900066cc <I2C_TransferConfig>
90005e0a:	e00f      	b.n	90005e2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005e0c:	68fb      	ldr	r3, [r7, #12]
90005e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e10:	b29a      	uxth	r2, r3
90005e12:	68fb      	ldr	r3, [r7, #12]
90005e14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90005e16:	68fb      	ldr	r3, [r7, #12]
90005e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e1a:	b2da      	uxtb	r2, r3
90005e1c:	8979      	ldrh	r1, [r7, #10]
90005e1e:	2300      	movs	r3, #0
90005e20:	9300      	str	r3, [sp, #0]
90005e22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005e26:	68f8      	ldr	r0, [r7, #12]
90005e28:	f000 fc50 	bl	900066cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005e2c:	697a      	ldr	r2, [r7, #20]
90005e2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005e30:	68f8      	ldr	r0, [r7, #12]
90005e32:	f000 fae0 	bl	900063f6 <I2C_WaitOnTXISFlagUntilTimeout>
90005e36:	4603      	mov	r3, r0
90005e38:	2b00      	cmp	r3, #0
90005e3a:	d001      	beq.n	90005e40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
90005e3c:	2301      	movs	r3, #1
90005e3e:	e07b      	b.n	90005f38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90005e40:	68fb      	ldr	r3, [r7, #12]
90005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005e44:	781a      	ldrb	r2, [r3, #0]
90005e46:	68fb      	ldr	r3, [r7, #12]
90005e48:	681b      	ldr	r3, [r3, #0]
90005e4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005e4c:	68fb      	ldr	r3, [r7, #12]
90005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005e50:	1c5a      	adds	r2, r3, #1
90005e52:	68fb      	ldr	r3, [r7, #12]
90005e54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
90005e56:	68fb      	ldr	r3, [r7, #12]
90005e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e5a:	b29b      	uxth	r3, r3
90005e5c:	3b01      	subs	r3, #1
90005e5e:	b29a      	uxth	r2, r3
90005e60:	68fb      	ldr	r3, [r7, #12]
90005e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
90005e64:	68fb      	ldr	r3, [r7, #12]
90005e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e68:	3b01      	subs	r3, #1
90005e6a:	b29a      	uxth	r2, r3
90005e6c:	68fb      	ldr	r3, [r7, #12]
90005e6e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005e70:	68fb      	ldr	r3, [r7, #12]
90005e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e74:	b29b      	uxth	r3, r3
90005e76:	2b00      	cmp	r3, #0
90005e78:	d034      	beq.n	90005ee4 <HAL_I2C_Mem_Write+0x1c8>
90005e7a:	68fb      	ldr	r3, [r7, #12]
90005e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e7e:	2b00      	cmp	r3, #0
90005e80:	d130      	bne.n	90005ee4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005e82:	697b      	ldr	r3, [r7, #20]
90005e84:	9300      	str	r3, [sp, #0]
90005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005e88:	2200      	movs	r2, #0
90005e8a:	2180      	movs	r1, #128	@ 0x80
90005e8c:	68f8      	ldr	r0, [r7, #12]
90005e8e:	f000 fa59 	bl	90006344 <I2C_WaitOnFlagUntilTimeout>
90005e92:	4603      	mov	r3, r0
90005e94:	2b00      	cmp	r3, #0
90005e96:	d001      	beq.n	90005e9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
90005e98:	2301      	movs	r3, #1
90005e9a:	e04d      	b.n	90005f38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005e9c:	68fb      	ldr	r3, [r7, #12]
90005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ea0:	b29b      	uxth	r3, r3
90005ea2:	2bff      	cmp	r3, #255	@ 0xff
90005ea4:	d90e      	bls.n	90005ec4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005ea6:	68fb      	ldr	r3, [r7, #12]
90005ea8:	22ff      	movs	r2, #255	@ 0xff
90005eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005eac:	68fb      	ldr	r3, [r7, #12]
90005eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005eb0:	b2da      	uxtb	r2, r3
90005eb2:	8979      	ldrh	r1, [r7, #10]
90005eb4:	2300      	movs	r3, #0
90005eb6:	9300      	str	r3, [sp, #0]
90005eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005ebc:	68f8      	ldr	r0, [r7, #12]
90005ebe:	f000 fc05 	bl	900066cc <I2C_TransferConfig>
90005ec2:	e00f      	b.n	90005ee4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005ec4:	68fb      	ldr	r3, [r7, #12]
90005ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ec8:	b29a      	uxth	r2, r3
90005eca:	68fb      	ldr	r3, [r7, #12]
90005ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005ece:	68fb      	ldr	r3, [r7, #12]
90005ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005ed2:	b2da      	uxtb	r2, r3
90005ed4:	8979      	ldrh	r1, [r7, #10]
90005ed6:	2300      	movs	r3, #0
90005ed8:	9300      	str	r3, [sp, #0]
90005eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005ede:	68f8      	ldr	r0, [r7, #12]
90005ee0:	f000 fbf4 	bl	900066cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
90005ee4:	68fb      	ldr	r3, [r7, #12]
90005ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005ee8:	b29b      	uxth	r3, r3
90005eea:	2b00      	cmp	r3, #0
90005eec:	d19e      	bne.n	90005e2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005eee:	697a      	ldr	r2, [r7, #20]
90005ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005ef2:	68f8      	ldr	r0, [r7, #12]
90005ef4:	f000 fac6 	bl	90006484 <I2C_WaitOnSTOPFlagUntilTimeout>
90005ef8:	4603      	mov	r3, r0
90005efa:	2b00      	cmp	r3, #0
90005efc:	d001      	beq.n	90005f02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
90005efe:	2301      	movs	r3, #1
90005f00:	e01a      	b.n	90005f38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005f02:	68fb      	ldr	r3, [r7, #12]
90005f04:	681b      	ldr	r3, [r3, #0]
90005f06:	2220      	movs	r2, #32
90005f08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005f0a:	68fb      	ldr	r3, [r7, #12]
90005f0c:	681b      	ldr	r3, [r3, #0]
90005f0e:	6859      	ldr	r1, [r3, #4]
90005f10:	68fb      	ldr	r3, [r7, #12]
90005f12:	681a      	ldr	r2, [r3, #0]
90005f14:	4b0a      	ldr	r3, [pc, #40]	@ (90005f40 <HAL_I2C_Mem_Write+0x224>)
90005f16:	400b      	ands	r3, r1
90005f18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005f1a:	68fb      	ldr	r3, [r7, #12]
90005f1c:	2220      	movs	r2, #32
90005f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005f22:	68fb      	ldr	r3, [r7, #12]
90005f24:	2200      	movs	r2, #0
90005f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005f2a:	68fb      	ldr	r3, [r7, #12]
90005f2c:	2200      	movs	r2, #0
90005f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005f32:	2300      	movs	r3, #0
90005f34:	e000      	b.n	90005f38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
90005f36:	2302      	movs	r3, #2
  }
}
90005f38:	4618      	mov	r0, r3
90005f3a:	3718      	adds	r7, #24
90005f3c:	46bd      	mov	sp, r7
90005f3e:	bd80      	pop	{r7, pc}
90005f40:	fe00e800 	.word	0xfe00e800

90005f44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005f44:	b580      	push	{r7, lr}
90005f46:	b088      	sub	sp, #32
90005f48:	af02      	add	r7, sp, #8
90005f4a:	60f8      	str	r0, [r7, #12]
90005f4c:	4608      	mov	r0, r1
90005f4e:	4611      	mov	r1, r2
90005f50:	461a      	mov	r2, r3
90005f52:	4603      	mov	r3, r0
90005f54:	817b      	strh	r3, [r7, #10]
90005f56:	460b      	mov	r3, r1
90005f58:	813b      	strh	r3, [r7, #8]
90005f5a:	4613      	mov	r3, r2
90005f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005f5e:	68fb      	ldr	r3, [r7, #12]
90005f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005f64:	b2db      	uxtb	r3, r3
90005f66:	2b20      	cmp	r3, #32
90005f68:	f040 80fd 	bne.w	90006166 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005f6c:	6a3b      	ldr	r3, [r7, #32]
90005f6e:	2b00      	cmp	r3, #0
90005f70:	d002      	beq.n	90005f78 <HAL_I2C_Mem_Read+0x34>
90005f72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005f74:	2b00      	cmp	r3, #0
90005f76:	d105      	bne.n	90005f84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005f78:	68fb      	ldr	r3, [r7, #12]
90005f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005f7e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005f80:	2301      	movs	r3, #1
90005f82:	e0f1      	b.n	90006168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005f84:	68fb      	ldr	r3, [r7, #12]
90005f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005f8a:	2b01      	cmp	r3, #1
90005f8c:	d101      	bne.n	90005f92 <HAL_I2C_Mem_Read+0x4e>
90005f8e:	2302      	movs	r3, #2
90005f90:	e0ea      	b.n	90006168 <HAL_I2C_Mem_Read+0x224>
90005f92:	68fb      	ldr	r3, [r7, #12]
90005f94:	2201      	movs	r2, #1
90005f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005f9a:	f7fd f8df 	bl	9000315c <HAL_GetTick>
90005f9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005fa0:	697b      	ldr	r3, [r7, #20]
90005fa2:	9300      	str	r3, [sp, #0]
90005fa4:	2319      	movs	r3, #25
90005fa6:	2201      	movs	r2, #1
90005fa8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005fac:	68f8      	ldr	r0, [r7, #12]
90005fae:	f000 f9c9 	bl	90006344 <I2C_WaitOnFlagUntilTimeout>
90005fb2:	4603      	mov	r3, r0
90005fb4:	2b00      	cmp	r3, #0
90005fb6:	d001      	beq.n	90005fbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005fb8:	2301      	movs	r3, #1
90005fba:	e0d5      	b.n	90006168 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005fbc:	68fb      	ldr	r3, [r7, #12]
90005fbe:	2222      	movs	r2, #34	@ 0x22
90005fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005fc4:	68fb      	ldr	r3, [r7, #12]
90005fc6:	2240      	movs	r2, #64	@ 0x40
90005fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005fcc:	68fb      	ldr	r3, [r7, #12]
90005fce:	2200      	movs	r2, #0
90005fd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005fd2:	68fb      	ldr	r3, [r7, #12]
90005fd4:	6a3a      	ldr	r2, [r7, #32]
90005fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005fd8:	68fb      	ldr	r3, [r7, #12]
90005fda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005fde:	68fb      	ldr	r3, [r7, #12]
90005fe0:	2200      	movs	r2, #0
90005fe2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005fe4:	88f8      	ldrh	r0, [r7, #6]
90005fe6:	893a      	ldrh	r2, [r7, #8]
90005fe8:	8979      	ldrh	r1, [r7, #10]
90005fea:	697b      	ldr	r3, [r7, #20]
90005fec:	9301      	str	r3, [sp, #4]
90005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005ff0:	9300      	str	r3, [sp, #0]
90005ff2:	4603      	mov	r3, r0
90005ff4:	68f8      	ldr	r0, [r7, #12]
90005ff6:	f000 f92d 	bl	90006254 <I2C_RequestMemoryRead>
90005ffa:	4603      	mov	r3, r0
90005ffc:	2b00      	cmp	r3, #0
90005ffe:	d005      	beq.n	9000600c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90006000:	68fb      	ldr	r3, [r7, #12]
90006002:	2200      	movs	r2, #0
90006004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90006008:	2301      	movs	r3, #1
9000600a:	e0ad      	b.n	90006168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000600c:	68fb      	ldr	r3, [r7, #12]
9000600e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006010:	b29b      	uxth	r3, r3
90006012:	2bff      	cmp	r3, #255	@ 0xff
90006014:	d90e      	bls.n	90006034 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90006016:	68fb      	ldr	r3, [r7, #12]
90006018:	22ff      	movs	r2, #255	@ 0xff
9000601a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
9000601c:	68fb      	ldr	r3, [r7, #12]
9000601e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006020:	b2da      	uxtb	r2, r3
90006022:	8979      	ldrh	r1, [r7, #10]
90006024:	4b52      	ldr	r3, [pc, #328]	@ (90006170 <HAL_I2C_Mem_Read+0x22c>)
90006026:	9300      	str	r3, [sp, #0]
90006028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
9000602c:	68f8      	ldr	r0, [r7, #12]
9000602e:	f000 fb4d 	bl	900066cc <I2C_TransferConfig>
90006032:	e00f      	b.n	90006054 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90006034:	68fb      	ldr	r3, [r7, #12]
90006036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006038:	b29a      	uxth	r2, r3
9000603a:	68fb      	ldr	r3, [r7, #12]
9000603c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
9000603e:	68fb      	ldr	r3, [r7, #12]
90006040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006042:	b2da      	uxtb	r2, r3
90006044:	8979      	ldrh	r1, [r7, #10]
90006046:	4b4a      	ldr	r3, [pc, #296]	@ (90006170 <HAL_I2C_Mem_Read+0x22c>)
90006048:	9300      	str	r3, [sp, #0]
9000604a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
9000604e:	68f8      	ldr	r0, [r7, #12]
90006050:	f000 fb3c 	bl	900066cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90006054:	697b      	ldr	r3, [r7, #20]
90006056:	9300      	str	r3, [sp, #0]
90006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000605a:	2200      	movs	r2, #0
9000605c:	2104      	movs	r1, #4
9000605e:	68f8      	ldr	r0, [r7, #12]
90006060:	f000 f970 	bl	90006344 <I2C_WaitOnFlagUntilTimeout>
90006064:	4603      	mov	r3, r0
90006066:	2b00      	cmp	r3, #0
90006068:	d001      	beq.n	9000606e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
9000606a:	2301      	movs	r3, #1
9000606c:	e07c      	b.n	90006168 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000606e:	68fb      	ldr	r3, [r7, #12]
90006070:	681b      	ldr	r3, [r3, #0]
90006072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90006074:	68fb      	ldr	r3, [r7, #12]
90006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006078:	b2d2      	uxtb	r2, r2
9000607a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
9000607c:	68fb      	ldr	r3, [r7, #12]
9000607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006080:	1c5a      	adds	r2, r3, #1
90006082:	68fb      	ldr	r3, [r7, #12]
90006084:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90006086:	68fb      	ldr	r3, [r7, #12]
90006088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
9000608a:	3b01      	subs	r3, #1
9000608c:	b29a      	uxth	r2, r3
9000608e:	68fb      	ldr	r3, [r7, #12]
90006090:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90006092:	68fb      	ldr	r3, [r7, #12]
90006094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006096:	b29b      	uxth	r3, r3
90006098:	3b01      	subs	r3, #1
9000609a:	b29a      	uxth	r2, r3
9000609c:	68fb      	ldr	r3, [r7, #12]
9000609e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900060a0:	68fb      	ldr	r3, [r7, #12]
900060a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900060a4:	b29b      	uxth	r3, r3
900060a6:	2b00      	cmp	r3, #0
900060a8:	d034      	beq.n	90006114 <HAL_I2C_Mem_Read+0x1d0>
900060aa:	68fb      	ldr	r3, [r7, #12]
900060ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900060ae:	2b00      	cmp	r3, #0
900060b0:	d130      	bne.n	90006114 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
900060b2:	697b      	ldr	r3, [r7, #20]
900060b4:	9300      	str	r3, [sp, #0]
900060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900060b8:	2200      	movs	r2, #0
900060ba:	2180      	movs	r1, #128	@ 0x80
900060bc:	68f8      	ldr	r0, [r7, #12]
900060be:	f000 f941 	bl	90006344 <I2C_WaitOnFlagUntilTimeout>
900060c2:	4603      	mov	r3, r0
900060c4:	2b00      	cmp	r3, #0
900060c6:	d001      	beq.n	900060cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
900060c8:	2301      	movs	r3, #1
900060ca:	e04d      	b.n	90006168 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900060cc:	68fb      	ldr	r3, [r7, #12]
900060ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900060d0:	b29b      	uxth	r3, r3
900060d2:	2bff      	cmp	r3, #255	@ 0xff
900060d4:	d90e      	bls.n	900060f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
900060d6:	68fb      	ldr	r3, [r7, #12]
900060d8:	22ff      	movs	r2, #255	@ 0xff
900060da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
900060dc:	68fb      	ldr	r3, [r7, #12]
900060de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
900060e0:	b2da      	uxtb	r2, r3
900060e2:	8979      	ldrh	r1, [r7, #10]
900060e4:	2300      	movs	r3, #0
900060e6:	9300      	str	r3, [sp, #0]
900060e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
900060ec:	68f8      	ldr	r0, [r7, #12]
900060ee:	f000 faed 	bl	900066cc <I2C_TransferConfig>
900060f2:	e00f      	b.n	90006114 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
900060f4:	68fb      	ldr	r3, [r7, #12]
900060f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
900060f8:	b29a      	uxth	r2, r3
900060fa:	68fb      	ldr	r3, [r7, #12]
900060fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900060fe:	68fb      	ldr	r3, [r7, #12]
90006100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90006102:	b2da      	uxtb	r2, r3
90006104:	8979      	ldrh	r1, [r7, #10]
90006106:	2300      	movs	r3, #0
90006108:	9300      	str	r3, [sp, #0]
9000610a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
9000610e:	68f8      	ldr	r0, [r7, #12]
90006110:	f000 fadc 	bl	900066cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90006114:	68fb      	ldr	r3, [r7, #12]
90006116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90006118:	b29b      	uxth	r3, r3
9000611a:	2b00      	cmp	r3, #0
9000611c:	d19a      	bne.n	90006054 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000611e:	697a      	ldr	r2, [r7, #20]
90006120:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90006122:	68f8      	ldr	r0, [r7, #12]
90006124:	f000 f9ae 	bl	90006484 <I2C_WaitOnSTOPFlagUntilTimeout>
90006128:	4603      	mov	r3, r0
9000612a:	2b00      	cmp	r3, #0
9000612c:	d001      	beq.n	90006132 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
9000612e:	2301      	movs	r3, #1
90006130:	e01a      	b.n	90006168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006132:	68fb      	ldr	r3, [r7, #12]
90006134:	681b      	ldr	r3, [r3, #0]
90006136:	2220      	movs	r2, #32
90006138:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000613a:	68fb      	ldr	r3, [r7, #12]
9000613c:	681b      	ldr	r3, [r3, #0]
9000613e:	6859      	ldr	r1, [r3, #4]
90006140:	68fb      	ldr	r3, [r7, #12]
90006142:	681a      	ldr	r2, [r3, #0]
90006144:	4b0b      	ldr	r3, [pc, #44]	@ (90006174 <HAL_I2C_Mem_Read+0x230>)
90006146:	400b      	ands	r3, r1
90006148:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
9000614a:	68fb      	ldr	r3, [r7, #12]
9000614c:	2220      	movs	r2, #32
9000614e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90006152:	68fb      	ldr	r3, [r7, #12]
90006154:	2200      	movs	r2, #0
90006156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000615a:	68fb      	ldr	r3, [r7, #12]
9000615c:	2200      	movs	r2, #0
9000615e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006162:	2300      	movs	r3, #0
90006164:	e000      	b.n	90006168 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90006166:	2302      	movs	r3, #2
  }
}
90006168:	4618      	mov	r0, r3
9000616a:	3718      	adds	r7, #24
9000616c:	46bd      	mov	sp, r7
9000616e:	bd80      	pop	{r7, pc}
90006170:	80002400 	.word	0x80002400
90006174:	fe00e800 	.word	0xfe00e800

90006178 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90006178:	b480      	push	{r7}
9000617a:	b083      	sub	sp, #12
9000617c:	af00      	add	r7, sp, #0
9000617e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90006180:	687b      	ldr	r3, [r7, #4]
90006182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006186:	b2db      	uxtb	r3, r3
}
90006188:	4618      	mov	r0, r3
9000618a:	370c      	adds	r7, #12
9000618c:	46bd      	mov	sp, r7
9000618e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006192:	4770      	bx	lr

90006194 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90006194:	b480      	push	{r7}
90006196:	b083      	sub	sp, #12
90006198:	af00      	add	r7, sp, #0
9000619a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
9000619c:	687b      	ldr	r3, [r7, #4]
9000619e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
900061a0:	4618      	mov	r0, r3
900061a2:	370c      	adds	r7, #12
900061a4:	46bd      	mov	sp, r7
900061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900061aa:	4770      	bx	lr

900061ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
900061ac:	b580      	push	{r7, lr}
900061ae:	b086      	sub	sp, #24
900061b0:	af02      	add	r7, sp, #8
900061b2:	60f8      	str	r0, [r7, #12]
900061b4:	4608      	mov	r0, r1
900061b6:	4611      	mov	r1, r2
900061b8:	461a      	mov	r2, r3
900061ba:	4603      	mov	r3, r0
900061bc:	817b      	strh	r3, [r7, #10]
900061be:	460b      	mov	r3, r1
900061c0:	813b      	strh	r3, [r7, #8]
900061c2:	4613      	mov	r3, r2
900061c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
900061c6:	88fb      	ldrh	r3, [r7, #6]
900061c8:	b2da      	uxtb	r2, r3
900061ca:	8979      	ldrh	r1, [r7, #10]
900061cc:	4b20      	ldr	r3, [pc, #128]	@ (90006250 <I2C_RequestMemoryWrite+0xa4>)
900061ce:	9300      	str	r3, [sp, #0]
900061d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
900061d4:	68f8      	ldr	r0, [r7, #12]
900061d6:	f000 fa79 	bl	900066cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900061da:	69fa      	ldr	r2, [r7, #28]
900061dc:	69b9      	ldr	r1, [r7, #24]
900061de:	68f8      	ldr	r0, [r7, #12]
900061e0:	f000 f909 	bl	900063f6 <I2C_WaitOnTXISFlagUntilTimeout>
900061e4:	4603      	mov	r3, r0
900061e6:	2b00      	cmp	r3, #0
900061e8:	d001      	beq.n	900061ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
900061ea:	2301      	movs	r3, #1
900061ec:	e02c      	b.n	90006248 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
900061ee:	88fb      	ldrh	r3, [r7, #6]
900061f0:	2b01      	cmp	r3, #1
900061f2:	d105      	bne.n	90006200 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900061f4:	893b      	ldrh	r3, [r7, #8]
900061f6:	b2da      	uxtb	r2, r3
900061f8:	68fb      	ldr	r3, [r7, #12]
900061fa:	681b      	ldr	r3, [r3, #0]
900061fc:	629a      	str	r2, [r3, #40]	@ 0x28
900061fe:	e015      	b.n	9000622c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90006200:	893b      	ldrh	r3, [r7, #8]
90006202:	0a1b      	lsrs	r3, r3, #8
90006204:	b29b      	uxth	r3, r3
90006206:	b2da      	uxtb	r2, r3
90006208:	68fb      	ldr	r3, [r7, #12]
9000620a:	681b      	ldr	r3, [r3, #0]
9000620c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000620e:	69fa      	ldr	r2, [r7, #28]
90006210:	69b9      	ldr	r1, [r7, #24]
90006212:	68f8      	ldr	r0, [r7, #12]
90006214:	f000 f8ef 	bl	900063f6 <I2C_WaitOnTXISFlagUntilTimeout>
90006218:	4603      	mov	r3, r0
9000621a:	2b00      	cmp	r3, #0
9000621c:	d001      	beq.n	90006222 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
9000621e:	2301      	movs	r3, #1
90006220:	e012      	b.n	90006248 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90006222:	893b      	ldrh	r3, [r7, #8]
90006224:	b2da      	uxtb	r2, r3
90006226:	68fb      	ldr	r3, [r7, #12]
90006228:	681b      	ldr	r3, [r3, #0]
9000622a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
9000622c:	69fb      	ldr	r3, [r7, #28]
9000622e:	9300      	str	r3, [sp, #0]
90006230:	69bb      	ldr	r3, [r7, #24]
90006232:	2200      	movs	r2, #0
90006234:	2180      	movs	r1, #128	@ 0x80
90006236:	68f8      	ldr	r0, [r7, #12]
90006238:	f000 f884 	bl	90006344 <I2C_WaitOnFlagUntilTimeout>
9000623c:	4603      	mov	r3, r0
9000623e:	2b00      	cmp	r3, #0
90006240:	d001      	beq.n	90006246 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
90006242:	2301      	movs	r3, #1
90006244:	e000      	b.n	90006248 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
90006246:	2300      	movs	r3, #0
}
90006248:	4618      	mov	r0, r3
9000624a:	3710      	adds	r7, #16
9000624c:	46bd      	mov	sp, r7
9000624e:	bd80      	pop	{r7, pc}
90006250:	80002000 	.word	0x80002000

90006254 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90006254:	b580      	push	{r7, lr}
90006256:	b086      	sub	sp, #24
90006258:	af02      	add	r7, sp, #8
9000625a:	60f8      	str	r0, [r7, #12]
9000625c:	4608      	mov	r0, r1
9000625e:	4611      	mov	r1, r2
90006260:	461a      	mov	r2, r3
90006262:	4603      	mov	r3, r0
90006264:	817b      	strh	r3, [r7, #10]
90006266:	460b      	mov	r3, r1
90006268:	813b      	strh	r3, [r7, #8]
9000626a:	4613      	mov	r3, r2
9000626c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
9000626e:	88fb      	ldrh	r3, [r7, #6]
90006270:	b2da      	uxtb	r2, r3
90006272:	8979      	ldrh	r1, [r7, #10]
90006274:	4b20      	ldr	r3, [pc, #128]	@ (900062f8 <I2C_RequestMemoryRead+0xa4>)
90006276:	9300      	str	r3, [sp, #0]
90006278:	2300      	movs	r3, #0
9000627a:	68f8      	ldr	r0, [r7, #12]
9000627c:	f000 fa26 	bl	900066cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90006280:	69fa      	ldr	r2, [r7, #28]
90006282:	69b9      	ldr	r1, [r7, #24]
90006284:	68f8      	ldr	r0, [r7, #12]
90006286:	f000 f8b6 	bl	900063f6 <I2C_WaitOnTXISFlagUntilTimeout>
9000628a:	4603      	mov	r3, r0
9000628c:	2b00      	cmp	r3, #0
9000628e:	d001      	beq.n	90006294 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90006290:	2301      	movs	r3, #1
90006292:	e02c      	b.n	900062ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90006294:	88fb      	ldrh	r3, [r7, #6]
90006296:	2b01      	cmp	r3, #1
90006298:	d105      	bne.n	900062a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000629a:	893b      	ldrh	r3, [r7, #8]
9000629c:	b2da      	uxtb	r2, r3
9000629e:	68fb      	ldr	r3, [r7, #12]
900062a0:	681b      	ldr	r3, [r3, #0]
900062a2:	629a      	str	r2, [r3, #40]	@ 0x28
900062a4:	e015      	b.n	900062d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900062a6:	893b      	ldrh	r3, [r7, #8]
900062a8:	0a1b      	lsrs	r3, r3, #8
900062aa:	b29b      	uxth	r3, r3
900062ac:	b2da      	uxtb	r2, r3
900062ae:	68fb      	ldr	r3, [r7, #12]
900062b0:	681b      	ldr	r3, [r3, #0]
900062b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900062b4:	69fa      	ldr	r2, [r7, #28]
900062b6:	69b9      	ldr	r1, [r7, #24]
900062b8:	68f8      	ldr	r0, [r7, #12]
900062ba:	f000 f89c 	bl	900063f6 <I2C_WaitOnTXISFlagUntilTimeout>
900062be:	4603      	mov	r3, r0
900062c0:	2b00      	cmp	r3, #0
900062c2:	d001      	beq.n	900062c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
900062c4:	2301      	movs	r3, #1
900062c6:	e012      	b.n	900062ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900062c8:	893b      	ldrh	r3, [r7, #8]
900062ca:	b2da      	uxtb	r2, r3
900062cc:	68fb      	ldr	r3, [r7, #12]
900062ce:	681b      	ldr	r3, [r3, #0]
900062d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
900062d2:	69fb      	ldr	r3, [r7, #28]
900062d4:	9300      	str	r3, [sp, #0]
900062d6:	69bb      	ldr	r3, [r7, #24]
900062d8:	2200      	movs	r2, #0
900062da:	2140      	movs	r1, #64	@ 0x40
900062dc:	68f8      	ldr	r0, [r7, #12]
900062de:	f000 f831 	bl	90006344 <I2C_WaitOnFlagUntilTimeout>
900062e2:	4603      	mov	r3, r0
900062e4:	2b00      	cmp	r3, #0
900062e6:	d001      	beq.n	900062ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
900062e8:	2301      	movs	r3, #1
900062ea:	e000      	b.n	900062ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
900062ec:	2300      	movs	r3, #0
}
900062ee:	4618      	mov	r0, r3
900062f0:	3710      	adds	r7, #16
900062f2:	46bd      	mov	sp, r7
900062f4:	bd80      	pop	{r7, pc}
900062f6:	bf00      	nop
900062f8:	80002000 	.word	0x80002000

900062fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
900062fc:	b480      	push	{r7}
900062fe:	b083      	sub	sp, #12
90006300:	af00      	add	r7, sp, #0
90006302:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90006304:	687b      	ldr	r3, [r7, #4]
90006306:	681b      	ldr	r3, [r3, #0]
90006308:	699b      	ldr	r3, [r3, #24]
9000630a:	f003 0302 	and.w	r3, r3, #2
9000630e:	2b02      	cmp	r3, #2
90006310:	d103      	bne.n	9000631a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90006312:	687b      	ldr	r3, [r7, #4]
90006314:	681b      	ldr	r3, [r3, #0]
90006316:	2200      	movs	r2, #0
90006318:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000631a:	687b      	ldr	r3, [r7, #4]
9000631c:	681b      	ldr	r3, [r3, #0]
9000631e:	699b      	ldr	r3, [r3, #24]
90006320:	f003 0301 	and.w	r3, r3, #1
90006324:	2b01      	cmp	r3, #1
90006326:	d007      	beq.n	90006338 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90006328:	687b      	ldr	r3, [r7, #4]
9000632a:	681b      	ldr	r3, [r3, #0]
9000632c:	699a      	ldr	r2, [r3, #24]
9000632e:	687b      	ldr	r3, [r7, #4]
90006330:	681b      	ldr	r3, [r3, #0]
90006332:	f042 0201 	orr.w	r2, r2, #1
90006336:	619a      	str	r2, [r3, #24]
  }
}
90006338:	bf00      	nop
9000633a:	370c      	adds	r7, #12
9000633c:	46bd      	mov	sp, r7
9000633e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006342:	4770      	bx	lr

90006344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90006344:	b580      	push	{r7, lr}
90006346:	b084      	sub	sp, #16
90006348:	af00      	add	r7, sp, #0
9000634a:	60f8      	str	r0, [r7, #12]
9000634c:	60b9      	str	r1, [r7, #8]
9000634e:	603b      	str	r3, [r7, #0]
90006350:	4613      	mov	r3, r2
90006352:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006354:	e03b      	b.n	900063ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006356:	69ba      	ldr	r2, [r7, #24]
90006358:	6839      	ldr	r1, [r7, #0]
9000635a:	68f8      	ldr	r0, [r7, #12]
9000635c:	f000 f8d6 	bl	9000650c <I2C_IsErrorOccurred>
90006360:	4603      	mov	r3, r0
90006362:	2b00      	cmp	r3, #0
90006364:	d001      	beq.n	9000636a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90006366:	2301      	movs	r3, #1
90006368:	e041      	b.n	900063ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000636a:	683b      	ldr	r3, [r7, #0]
9000636c:	f1b3 3fff 	cmp.w	r3, #4294967295
90006370:	d02d      	beq.n	900063ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006372:	f7fc fef3 	bl	9000315c <HAL_GetTick>
90006376:	4602      	mov	r2, r0
90006378:	69bb      	ldr	r3, [r7, #24]
9000637a:	1ad3      	subs	r3, r2, r3
9000637c:	683a      	ldr	r2, [r7, #0]
9000637e:	429a      	cmp	r2, r3
90006380:	d302      	bcc.n	90006388 <I2C_WaitOnFlagUntilTimeout+0x44>
90006382:	683b      	ldr	r3, [r7, #0]
90006384:	2b00      	cmp	r3, #0
90006386:	d122      	bne.n	900063ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90006388:	68fb      	ldr	r3, [r7, #12]
9000638a:	681b      	ldr	r3, [r3, #0]
9000638c:	699a      	ldr	r2, [r3, #24]
9000638e:	68bb      	ldr	r3, [r7, #8]
90006390:	4013      	ands	r3, r2
90006392:	68ba      	ldr	r2, [r7, #8]
90006394:	429a      	cmp	r2, r3
90006396:	bf0c      	ite	eq
90006398:	2301      	moveq	r3, #1
9000639a:	2300      	movne	r3, #0
9000639c:	b2db      	uxtb	r3, r3
9000639e:	461a      	mov	r2, r3
900063a0:	79fb      	ldrb	r3, [r7, #7]
900063a2:	429a      	cmp	r2, r3
900063a4:	d113      	bne.n	900063ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900063a6:	68fb      	ldr	r3, [r7, #12]
900063a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900063aa:	f043 0220 	orr.w	r2, r3, #32
900063ae:	68fb      	ldr	r3, [r7, #12]
900063b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900063b2:	68fb      	ldr	r3, [r7, #12]
900063b4:	2220      	movs	r2, #32
900063b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900063ba:	68fb      	ldr	r3, [r7, #12]
900063bc:	2200      	movs	r2, #0
900063be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
900063c2:	68fb      	ldr	r3, [r7, #12]
900063c4:	2200      	movs	r2, #0
900063c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
900063ca:	2301      	movs	r3, #1
900063cc:	e00f      	b.n	900063ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900063ce:	68fb      	ldr	r3, [r7, #12]
900063d0:	681b      	ldr	r3, [r3, #0]
900063d2:	699a      	ldr	r2, [r3, #24]
900063d4:	68bb      	ldr	r3, [r7, #8]
900063d6:	4013      	ands	r3, r2
900063d8:	68ba      	ldr	r2, [r7, #8]
900063da:	429a      	cmp	r2, r3
900063dc:	bf0c      	ite	eq
900063de:	2301      	moveq	r3, #1
900063e0:	2300      	movne	r3, #0
900063e2:	b2db      	uxtb	r3, r3
900063e4:	461a      	mov	r2, r3
900063e6:	79fb      	ldrb	r3, [r7, #7]
900063e8:	429a      	cmp	r2, r3
900063ea:	d0b4      	beq.n	90006356 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
900063ec:	2300      	movs	r3, #0
}
900063ee:	4618      	mov	r0, r3
900063f0:	3710      	adds	r7, #16
900063f2:	46bd      	mov	sp, r7
900063f4:	bd80      	pop	{r7, pc}

900063f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900063f6:	b580      	push	{r7, lr}
900063f8:	b084      	sub	sp, #16
900063fa:	af00      	add	r7, sp, #0
900063fc:	60f8      	str	r0, [r7, #12]
900063fe:	60b9      	str	r1, [r7, #8]
90006400:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006402:	e033      	b.n	9000646c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006404:	687a      	ldr	r2, [r7, #4]
90006406:	68b9      	ldr	r1, [r7, #8]
90006408:	68f8      	ldr	r0, [r7, #12]
9000640a:	f000 f87f 	bl	9000650c <I2C_IsErrorOccurred>
9000640e:	4603      	mov	r3, r0
90006410:	2b00      	cmp	r3, #0
90006412:	d001      	beq.n	90006418 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006414:	2301      	movs	r3, #1
90006416:	e031      	b.n	9000647c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90006418:	68bb      	ldr	r3, [r7, #8]
9000641a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000641e:	d025      	beq.n	9000646c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006420:	f7fc fe9c 	bl	9000315c <HAL_GetTick>
90006424:	4602      	mov	r2, r0
90006426:	687b      	ldr	r3, [r7, #4]
90006428:	1ad3      	subs	r3, r2, r3
9000642a:	68ba      	ldr	r2, [r7, #8]
9000642c:	429a      	cmp	r2, r3
9000642e:	d302      	bcc.n	90006436 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90006430:	68bb      	ldr	r3, [r7, #8]
90006432:	2b00      	cmp	r3, #0
90006434:	d11a      	bne.n	9000646c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90006436:	68fb      	ldr	r3, [r7, #12]
90006438:	681b      	ldr	r3, [r3, #0]
9000643a:	699b      	ldr	r3, [r3, #24]
9000643c:	f003 0302 	and.w	r3, r3, #2
90006440:	2b02      	cmp	r3, #2
90006442:	d013      	beq.n	9000646c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006444:	68fb      	ldr	r3, [r7, #12]
90006446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006448:	f043 0220 	orr.w	r2, r3, #32
9000644c:	68fb      	ldr	r3, [r7, #12]
9000644e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90006450:	68fb      	ldr	r3, [r7, #12]
90006452:	2220      	movs	r2, #32
90006454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006458:	68fb      	ldr	r3, [r7, #12]
9000645a:	2200      	movs	r2, #0
9000645c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006460:	68fb      	ldr	r3, [r7, #12]
90006462:	2200      	movs	r2, #0
90006464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90006468:	2301      	movs	r3, #1
9000646a:	e007      	b.n	9000647c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000646c:	68fb      	ldr	r3, [r7, #12]
9000646e:	681b      	ldr	r3, [r3, #0]
90006470:	699b      	ldr	r3, [r3, #24]
90006472:	f003 0302 	and.w	r3, r3, #2
90006476:	2b02      	cmp	r3, #2
90006478:	d1c4      	bne.n	90006404 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
9000647a:	2300      	movs	r3, #0
}
9000647c:	4618      	mov	r0, r3
9000647e:	3710      	adds	r7, #16
90006480:	46bd      	mov	sp, r7
90006482:	bd80      	pop	{r7, pc}

90006484 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006484:	b580      	push	{r7, lr}
90006486:	b084      	sub	sp, #16
90006488:	af00      	add	r7, sp, #0
9000648a:	60f8      	str	r0, [r7, #12]
9000648c:	60b9      	str	r1, [r7, #8]
9000648e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006490:	e02f      	b.n	900064f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006492:	687a      	ldr	r2, [r7, #4]
90006494:	68b9      	ldr	r1, [r7, #8]
90006496:	68f8      	ldr	r0, [r7, #12]
90006498:	f000 f838 	bl	9000650c <I2C_IsErrorOccurred>
9000649c:	4603      	mov	r3, r0
9000649e:	2b00      	cmp	r3, #0
900064a0:	d001      	beq.n	900064a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
900064a2:	2301      	movs	r3, #1
900064a4:	e02d      	b.n	90006502 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900064a6:	f7fc fe59 	bl	9000315c <HAL_GetTick>
900064aa:	4602      	mov	r2, r0
900064ac:	687b      	ldr	r3, [r7, #4]
900064ae:	1ad3      	subs	r3, r2, r3
900064b0:	68ba      	ldr	r2, [r7, #8]
900064b2:	429a      	cmp	r2, r3
900064b4:	d302      	bcc.n	900064bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
900064b6:	68bb      	ldr	r3, [r7, #8]
900064b8:	2b00      	cmp	r3, #0
900064ba:	d11a      	bne.n	900064f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
900064bc:	68fb      	ldr	r3, [r7, #12]
900064be:	681b      	ldr	r3, [r3, #0]
900064c0:	699b      	ldr	r3, [r3, #24]
900064c2:	f003 0320 	and.w	r3, r3, #32
900064c6:	2b20      	cmp	r3, #32
900064c8:	d013      	beq.n	900064f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900064ca:	68fb      	ldr	r3, [r7, #12]
900064cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900064ce:	f043 0220 	orr.w	r2, r3, #32
900064d2:	68fb      	ldr	r3, [r7, #12]
900064d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
900064d6:	68fb      	ldr	r3, [r7, #12]
900064d8:	2220      	movs	r2, #32
900064da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
900064de:	68fb      	ldr	r3, [r7, #12]
900064e0:	2200      	movs	r2, #0
900064e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
900064e6:	68fb      	ldr	r3, [r7, #12]
900064e8:	2200      	movs	r2, #0
900064ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
900064ee:	2301      	movs	r3, #1
900064f0:	e007      	b.n	90006502 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900064f2:	68fb      	ldr	r3, [r7, #12]
900064f4:	681b      	ldr	r3, [r3, #0]
900064f6:	699b      	ldr	r3, [r3, #24]
900064f8:	f003 0320 	and.w	r3, r3, #32
900064fc:	2b20      	cmp	r3, #32
900064fe:	d1c8      	bne.n	90006492 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90006500:	2300      	movs	r3, #0
}
90006502:	4618      	mov	r0, r3
90006504:	3710      	adds	r7, #16
90006506:	46bd      	mov	sp, r7
90006508:	bd80      	pop	{r7, pc}
	...

9000650c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
9000650c:	b580      	push	{r7, lr}
9000650e:	b08a      	sub	sp, #40	@ 0x28
90006510:	af00      	add	r7, sp, #0
90006512:	60f8      	str	r0, [r7, #12]
90006514:	60b9      	str	r1, [r7, #8]
90006516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90006518:	2300      	movs	r3, #0
9000651a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
9000651e:	68fb      	ldr	r3, [r7, #12]
90006520:	681b      	ldr	r3, [r3, #0]
90006522:	699b      	ldr	r3, [r3, #24]
90006524:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
90006526:	2300      	movs	r3, #0
90006528:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
9000652a:	687b      	ldr	r3, [r7, #4]
9000652c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000652e:	69bb      	ldr	r3, [r7, #24]
90006530:	f003 0310 	and.w	r3, r3, #16
90006534:	2b00      	cmp	r3, #0
90006536:	d068      	beq.n	9000660a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90006538:	68fb      	ldr	r3, [r7, #12]
9000653a:	681b      	ldr	r3, [r3, #0]
9000653c:	2210      	movs	r2, #16
9000653e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006540:	e049      	b.n	900065d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90006542:	68bb      	ldr	r3, [r7, #8]
90006544:	f1b3 3fff 	cmp.w	r3, #4294967295
90006548:	d045      	beq.n	900065d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000654a:	f7fc fe07 	bl	9000315c <HAL_GetTick>
9000654e:	4602      	mov	r2, r0
90006550:	69fb      	ldr	r3, [r7, #28]
90006552:	1ad3      	subs	r3, r2, r3
90006554:	68ba      	ldr	r2, [r7, #8]
90006556:	429a      	cmp	r2, r3
90006558:	d302      	bcc.n	90006560 <I2C_IsErrorOccurred+0x54>
9000655a:	68bb      	ldr	r3, [r7, #8]
9000655c:	2b00      	cmp	r3, #0
9000655e:	d13a      	bne.n	900065d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90006560:	68fb      	ldr	r3, [r7, #12]
90006562:	681b      	ldr	r3, [r3, #0]
90006564:	685b      	ldr	r3, [r3, #4]
90006566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
9000656a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
9000656c:	68fb      	ldr	r3, [r7, #12]
9000656e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90006572:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006574:	68fb      	ldr	r3, [r7, #12]
90006576:	681b      	ldr	r3, [r3, #0]
90006578:	699b      	ldr	r3, [r3, #24]
9000657a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
9000657e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006582:	d121      	bne.n	900065c8 <I2C_IsErrorOccurred+0xbc>
90006584:	697b      	ldr	r3, [r7, #20]
90006586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000658a:	d01d      	beq.n	900065c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
9000658c:	7cfb      	ldrb	r3, [r7, #19]
9000658e:	2b20      	cmp	r3, #32
90006590:	d01a      	beq.n	900065c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006592:	68fb      	ldr	r3, [r7, #12]
90006594:	681b      	ldr	r3, [r3, #0]
90006596:	685a      	ldr	r2, [r3, #4]
90006598:	68fb      	ldr	r3, [r7, #12]
9000659a:	681b      	ldr	r3, [r3, #0]
9000659c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
900065a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
900065a2:	f7fc fddb 	bl	9000315c <HAL_GetTick>
900065a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900065a8:	e00e      	b.n	900065c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900065aa:	f7fc fdd7 	bl	9000315c <HAL_GetTick>
900065ae:	4602      	mov	r2, r0
900065b0:	69fb      	ldr	r3, [r7, #28]
900065b2:	1ad3      	subs	r3, r2, r3
900065b4:	2b19      	cmp	r3, #25
900065b6:	d907      	bls.n	900065c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900065b8:	6a3b      	ldr	r3, [r7, #32]
900065ba:	f043 0320 	orr.w	r3, r3, #32
900065be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
900065c0:	2301      	movs	r3, #1
900065c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
900065c6:	e006      	b.n	900065d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900065c8:	68fb      	ldr	r3, [r7, #12]
900065ca:	681b      	ldr	r3, [r3, #0]
900065cc:	699b      	ldr	r3, [r3, #24]
900065ce:	f003 0320 	and.w	r3, r3, #32
900065d2:	2b20      	cmp	r3, #32
900065d4:	d1e9      	bne.n	900065aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900065d6:	68fb      	ldr	r3, [r7, #12]
900065d8:	681b      	ldr	r3, [r3, #0]
900065da:	699b      	ldr	r3, [r3, #24]
900065dc:	f003 0320 	and.w	r3, r3, #32
900065e0:	2b20      	cmp	r3, #32
900065e2:	d003      	beq.n	900065ec <I2C_IsErrorOccurred+0xe0>
900065e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900065e8:	2b00      	cmp	r3, #0
900065ea:	d0aa      	beq.n	90006542 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
900065ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
900065f0:	2b00      	cmp	r3, #0
900065f2:	d103      	bne.n	900065fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900065f4:	68fb      	ldr	r3, [r7, #12]
900065f6:	681b      	ldr	r3, [r3, #0]
900065f8:	2220      	movs	r2, #32
900065fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900065fc:	6a3b      	ldr	r3, [r7, #32]
900065fe:	f043 0304 	orr.w	r3, r3, #4
90006602:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006604:	2301      	movs	r3, #1
90006606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000660a:	68fb      	ldr	r3, [r7, #12]
9000660c:	681b      	ldr	r3, [r3, #0]
9000660e:	699b      	ldr	r3, [r3, #24]
90006610:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006612:	69bb      	ldr	r3, [r7, #24]
90006614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006618:	2b00      	cmp	r3, #0
9000661a:	d00b      	beq.n	90006634 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
9000661c:	6a3b      	ldr	r3, [r7, #32]
9000661e:	f043 0301 	orr.w	r3, r3, #1
90006622:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006624:	68fb      	ldr	r3, [r7, #12]
90006626:	681b      	ldr	r3, [r3, #0]
90006628:	f44f 7280 	mov.w	r2, #256	@ 0x100
9000662c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
9000662e:	2301      	movs	r3, #1
90006630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006634:	69bb      	ldr	r3, [r7, #24]
90006636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000663a:	2b00      	cmp	r3, #0
9000663c:	d00b      	beq.n	90006656 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
9000663e:	6a3b      	ldr	r3, [r7, #32]
90006640:	f043 0308 	orr.w	r3, r3, #8
90006644:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90006646:	68fb      	ldr	r3, [r7, #12]
90006648:	681b      	ldr	r3, [r3, #0]
9000664a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
9000664e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006650:	2301      	movs	r3, #1
90006652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90006656:	69bb      	ldr	r3, [r7, #24]
90006658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000665c:	2b00      	cmp	r3, #0
9000665e:	d00b      	beq.n	90006678 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90006660:	6a3b      	ldr	r3, [r7, #32]
90006662:	f043 0302 	orr.w	r3, r3, #2
90006666:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90006668:	68fb      	ldr	r3, [r7, #12]
9000666a:	681b      	ldr	r3, [r3, #0]
9000666c:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006670:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006672:	2301      	movs	r3, #1
90006674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90006678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000667c:	2b00      	cmp	r3, #0
9000667e:	d01c      	beq.n	900066ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006680:	68f8      	ldr	r0, [r7, #12]
90006682:	f7ff fe3b 	bl	900062fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006686:	68fb      	ldr	r3, [r7, #12]
90006688:	681b      	ldr	r3, [r3, #0]
9000668a:	6859      	ldr	r1, [r3, #4]
9000668c:	68fb      	ldr	r3, [r7, #12]
9000668e:	681a      	ldr	r2, [r3, #0]
90006690:	4b0d      	ldr	r3, [pc, #52]	@ (900066c8 <I2C_IsErrorOccurred+0x1bc>)
90006692:	400b      	ands	r3, r1
90006694:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90006696:	68fb      	ldr	r3, [r7, #12]
90006698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000669a:	6a3b      	ldr	r3, [r7, #32]
9000669c:	431a      	orrs	r2, r3
9000669e:	68fb      	ldr	r3, [r7, #12]
900066a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
900066a2:	68fb      	ldr	r3, [r7, #12]
900066a4:	2220      	movs	r2, #32
900066a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
900066aa:	68fb      	ldr	r3, [r7, #12]
900066ac:	2200      	movs	r2, #0
900066ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900066b2:	68fb      	ldr	r3, [r7, #12]
900066b4:	2200      	movs	r2, #0
900066b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
900066ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
900066be:	4618      	mov	r0, r3
900066c0:	3728      	adds	r7, #40	@ 0x28
900066c2:	46bd      	mov	sp, r7
900066c4:	bd80      	pop	{r7, pc}
900066c6:	bf00      	nop
900066c8:	fe00e800 	.word	0xfe00e800

900066cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
900066cc:	b480      	push	{r7}
900066ce:	b087      	sub	sp, #28
900066d0:	af00      	add	r7, sp, #0
900066d2:	60f8      	str	r0, [r7, #12]
900066d4:	607b      	str	r3, [r7, #4]
900066d6:	460b      	mov	r3, r1
900066d8:	817b      	strh	r3, [r7, #10]
900066da:	4613      	mov	r3, r2
900066dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900066de:	897b      	ldrh	r3, [r7, #10]
900066e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900066e4:	7a7b      	ldrb	r3, [r7, #9]
900066e6:	041b      	lsls	r3, r3, #16
900066e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900066ec:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900066ee:	687b      	ldr	r3, [r7, #4]
900066f0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900066f2:	6a3b      	ldr	r3, [r7, #32]
900066f4:	4313      	orrs	r3, r2
900066f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
900066fa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900066fc:	68fb      	ldr	r3, [r7, #12]
900066fe:	681b      	ldr	r3, [r3, #0]
90006700:	685a      	ldr	r2, [r3, #4]
90006702:	6a3b      	ldr	r3, [r7, #32]
90006704:	0d5b      	lsrs	r3, r3, #21
90006706:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
9000670a:	4b08      	ldr	r3, [pc, #32]	@ (9000672c <I2C_TransferConfig+0x60>)
9000670c:	430b      	orrs	r3, r1
9000670e:	43db      	mvns	r3, r3
90006710:	ea02 0103 	and.w	r1, r2, r3
90006714:	68fb      	ldr	r3, [r7, #12]
90006716:	681b      	ldr	r3, [r3, #0]
90006718:	697a      	ldr	r2, [r7, #20]
9000671a:	430a      	orrs	r2, r1
9000671c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000671e:	bf00      	nop
90006720:	371c      	adds	r7, #28
90006722:	46bd      	mov	sp, r7
90006724:	f85d 7b04 	ldr.w	r7, [sp], #4
90006728:	4770      	bx	lr
9000672a:	bf00      	nop
9000672c:	03ff63ff 	.word	0x03ff63ff

90006730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90006730:	b480      	push	{r7}
90006732:	b083      	sub	sp, #12
90006734:	af00      	add	r7, sp, #0
90006736:	6078      	str	r0, [r7, #4]
90006738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000673a:	687b      	ldr	r3, [r7, #4]
9000673c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006740:	b2db      	uxtb	r3, r3
90006742:	2b20      	cmp	r3, #32
90006744:	d138      	bne.n	900067b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006746:	687b      	ldr	r3, [r7, #4]
90006748:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
9000674c:	2b01      	cmp	r3, #1
9000674e:	d101      	bne.n	90006754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90006750:	2302      	movs	r3, #2
90006752:	e032      	b.n	900067ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90006754:	687b      	ldr	r3, [r7, #4]
90006756:	2201      	movs	r2, #1
90006758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
9000675c:	687b      	ldr	r3, [r7, #4]
9000675e:	2224      	movs	r2, #36	@ 0x24
90006760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006764:	687b      	ldr	r3, [r7, #4]
90006766:	681b      	ldr	r3, [r3, #0]
90006768:	681a      	ldr	r2, [r3, #0]
9000676a:	687b      	ldr	r3, [r7, #4]
9000676c:	681b      	ldr	r3, [r3, #0]
9000676e:	f022 0201 	bic.w	r2, r2, #1
90006772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90006774:	687b      	ldr	r3, [r7, #4]
90006776:	681b      	ldr	r3, [r3, #0]
90006778:	681a      	ldr	r2, [r3, #0]
9000677a:	687b      	ldr	r3, [r7, #4]
9000677c:	681b      	ldr	r3, [r3, #0]
9000677e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006784:	687b      	ldr	r3, [r7, #4]
90006786:	681b      	ldr	r3, [r3, #0]
90006788:	6819      	ldr	r1, [r3, #0]
9000678a:	687b      	ldr	r3, [r7, #4]
9000678c:	681b      	ldr	r3, [r3, #0]
9000678e:	683a      	ldr	r2, [r7, #0]
90006790:	430a      	orrs	r2, r1
90006792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006794:	687b      	ldr	r3, [r7, #4]
90006796:	681b      	ldr	r3, [r3, #0]
90006798:	681a      	ldr	r2, [r3, #0]
9000679a:	687b      	ldr	r3, [r7, #4]
9000679c:	681b      	ldr	r3, [r3, #0]
9000679e:	f042 0201 	orr.w	r2, r2, #1
900067a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900067a4:	687b      	ldr	r3, [r7, #4]
900067a6:	2220      	movs	r2, #32
900067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900067ac:	687b      	ldr	r3, [r7, #4]
900067ae:	2200      	movs	r2, #0
900067b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900067b4:	2300      	movs	r3, #0
900067b6:	e000      	b.n	900067ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
900067b8:	2302      	movs	r3, #2
  }
}
900067ba:	4618      	mov	r0, r3
900067bc:	370c      	adds	r7, #12
900067be:	46bd      	mov	sp, r7
900067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900067c4:	4770      	bx	lr

900067c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
900067c6:	b480      	push	{r7}
900067c8:	b085      	sub	sp, #20
900067ca:	af00      	add	r7, sp, #0
900067cc:	6078      	str	r0, [r7, #4]
900067ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900067d0:	687b      	ldr	r3, [r7, #4]
900067d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900067d6:	b2db      	uxtb	r3, r3
900067d8:	2b20      	cmp	r3, #32
900067da:	d139      	bne.n	90006850 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900067dc:	687b      	ldr	r3, [r7, #4]
900067de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900067e2:	2b01      	cmp	r3, #1
900067e4:	d101      	bne.n	900067ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
900067e6:	2302      	movs	r3, #2
900067e8:	e033      	b.n	90006852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
900067ea:	687b      	ldr	r3, [r7, #4]
900067ec:	2201      	movs	r2, #1
900067ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900067f2:	687b      	ldr	r3, [r7, #4]
900067f4:	2224      	movs	r2, #36	@ 0x24
900067f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900067fa:	687b      	ldr	r3, [r7, #4]
900067fc:	681b      	ldr	r3, [r3, #0]
900067fe:	681a      	ldr	r2, [r3, #0]
90006800:	687b      	ldr	r3, [r7, #4]
90006802:	681b      	ldr	r3, [r3, #0]
90006804:	f022 0201 	bic.w	r2, r2, #1
90006808:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
9000680a:	687b      	ldr	r3, [r7, #4]
9000680c:	681b      	ldr	r3, [r3, #0]
9000680e:	681b      	ldr	r3, [r3, #0]
90006810:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006812:	68fb      	ldr	r3, [r7, #12]
90006814:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
90006818:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000681a:	683b      	ldr	r3, [r7, #0]
9000681c:	021b      	lsls	r3, r3, #8
9000681e:	68fa      	ldr	r2, [r7, #12]
90006820:	4313      	orrs	r3, r2
90006822:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006824:	687b      	ldr	r3, [r7, #4]
90006826:	681b      	ldr	r3, [r3, #0]
90006828:	68fa      	ldr	r2, [r7, #12]
9000682a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
9000682c:	687b      	ldr	r3, [r7, #4]
9000682e:	681b      	ldr	r3, [r3, #0]
90006830:	681a      	ldr	r2, [r3, #0]
90006832:	687b      	ldr	r3, [r7, #4]
90006834:	681b      	ldr	r3, [r3, #0]
90006836:	f042 0201 	orr.w	r2, r2, #1
9000683a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
9000683c:	687b      	ldr	r3, [r7, #4]
9000683e:	2220      	movs	r2, #32
90006840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006844:	687b      	ldr	r3, [r7, #4]
90006846:	2200      	movs	r2, #0
90006848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
9000684c:	2300      	movs	r3, #0
9000684e:	e000      	b.n	90006852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90006850:	2302      	movs	r3, #2
  }
}
90006852:	4618      	mov	r0, r3
90006854:	3714      	adds	r7, #20
90006856:	46bd      	mov	sp, r7
90006858:	f85d 7b04 	ldr.w	r7, [sp], #4
9000685c:	4770      	bx	lr

9000685e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
9000685e:	b580      	push	{r7, lr}
90006860:	b084      	sub	sp, #16
90006862:	af00      	add	r7, sp, #0
90006864:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90006866:	687b      	ldr	r3, [r7, #4]
90006868:	2b00      	cmp	r3, #0
9000686a:	d101      	bne.n	90006870 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
9000686c:	2301      	movs	r3, #1
9000686e:	e08f      	b.n	90006990 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006870:	687b      	ldr	r3, [r7, #4]
90006872:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90006876:	b2db      	uxtb	r3, r3
90006878:	2b00      	cmp	r3, #0
9000687a:	d106      	bne.n	9000688a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
9000687c:	687b      	ldr	r3, [r7, #4]
9000687e:	2200      	movs	r2, #0
90006880:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006884:	6878      	ldr	r0, [r7, #4]
90006886:	f000 f887 	bl	90006998 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000688a:	687b      	ldr	r3, [r7, #4]
9000688c:	2202      	movs	r2, #2
9000688e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006892:	687b      	ldr	r3, [r7, #4]
90006894:	681b      	ldr	r3, [r3, #0]
90006896:	699a      	ldr	r2, [r3, #24]
90006898:	687b      	ldr	r3, [r7, #4]
9000689a:	681b      	ldr	r3, [r3, #0]
9000689c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
900068a0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900068a2:	687b      	ldr	r3, [r7, #4]
900068a4:	681b      	ldr	r3, [r3, #0]
900068a6:	6999      	ldr	r1, [r3, #24]
900068a8:	687b      	ldr	r3, [r7, #4]
900068aa:	685a      	ldr	r2, [r3, #4]
900068ac:	687b      	ldr	r3, [r7, #4]
900068ae:	689b      	ldr	r3, [r3, #8]
900068b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900068b2:	687b      	ldr	r3, [r7, #4]
900068b4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900068b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
900068b8:	687b      	ldr	r3, [r7, #4]
900068ba:	691b      	ldr	r3, [r3, #16]
900068bc:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
900068be:	687b      	ldr	r3, [r7, #4]
900068c0:	681b      	ldr	r3, [r3, #0]
900068c2:	430a      	orrs	r2, r1
900068c4:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
900068c6:	687b      	ldr	r3, [r7, #4]
900068c8:	695b      	ldr	r3, [r3, #20]
900068ca:	041b      	lsls	r3, r3, #16
900068cc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
900068ce:	687b      	ldr	r3, [r7, #4]
900068d0:	6999      	ldr	r1, [r3, #24]
900068d2:	687b      	ldr	r3, [r7, #4]
900068d4:	681b      	ldr	r3, [r3, #0]
900068d6:	68fa      	ldr	r2, [r7, #12]
900068d8:	430a      	orrs	r2, r1
900068da:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
900068dc:	687b      	ldr	r3, [r7, #4]
900068de:	69db      	ldr	r3, [r3, #28]
900068e0:	041b      	lsls	r3, r3, #16
900068e2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
900068e4:	687b      	ldr	r3, [r7, #4]
900068e6:	6a19      	ldr	r1, [r3, #32]
900068e8:	687b      	ldr	r3, [r7, #4]
900068ea:	681b      	ldr	r3, [r3, #0]
900068ec:	68fa      	ldr	r2, [r7, #12]
900068ee:	430a      	orrs	r2, r1
900068f0:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900068f2:	687b      	ldr	r3, [r7, #4]
900068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900068f6:	041b      	lsls	r3, r3, #16
900068f8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
900068fa:	687b      	ldr	r3, [r7, #4]
900068fc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
900068fe:	687b      	ldr	r3, [r7, #4]
90006900:	681b      	ldr	r3, [r3, #0]
90006902:	68fa      	ldr	r2, [r7, #12]
90006904:	430a      	orrs	r2, r1
90006906:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
90006908:	687b      	ldr	r3, [r7, #4]
9000690a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000690c:	041b      	lsls	r3, r3, #16
9000690e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
90006910:	687b      	ldr	r3, [r7, #4]
90006912:	6b19      	ldr	r1, [r3, #48]	@ 0x30
90006914:	687b      	ldr	r3, [r7, #4]
90006916:	681b      	ldr	r3, [r3, #0]
90006918:	68fa      	ldr	r2, [r7, #12]
9000691a:	430a      	orrs	r2, r1
9000691c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000691e:	687b      	ldr	r3, [r7, #4]
90006920:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
90006924:	021b      	lsls	r3, r3, #8
90006926:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90006928:	687b      	ldr	r3, [r7, #4]
9000692a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
9000692e:	041b      	lsls	r3, r3, #16
90006930:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90006932:	687b      	ldr	r3, [r7, #4]
90006934:	681b      	ldr	r3, [r3, #0]
90006936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
90006938:	687b      	ldr	r3, [r7, #4]
9000693a:	681b      	ldr	r3, [r3, #0]
9000693c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
90006940:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006942:	687b      	ldr	r3, [r7, #4]
90006944:	681b      	ldr	r3, [r3, #0]
90006946:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
90006948:	68ba      	ldr	r2, [r7, #8]
9000694a:	68fb      	ldr	r3, [r7, #12]
9000694c:	4313      	orrs	r3, r2
9000694e:	687a      	ldr	r2, [r7, #4]
90006950:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90006954:	431a      	orrs	r2, r3
90006956:	687b      	ldr	r3, [r7, #4]
90006958:	681b      	ldr	r3, [r3, #0]
9000695a:	430a      	orrs	r2, r1
9000695c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000695e:	687b      	ldr	r3, [r7, #4]
90006960:	681b      	ldr	r3, [r3, #0]
90006962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006964:	687b      	ldr	r3, [r7, #4]
90006966:	681b      	ldr	r3, [r3, #0]
90006968:	f042 0206 	orr.w	r2, r2, #6
9000696c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
9000696e:	687b      	ldr	r3, [r7, #4]
90006970:	681b      	ldr	r3, [r3, #0]
90006972:	699a      	ldr	r2, [r3, #24]
90006974:	687b      	ldr	r3, [r7, #4]
90006976:	681b      	ldr	r3, [r3, #0]
90006978:	f042 0201 	orr.w	r2, r2, #1
9000697c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000697e:	687b      	ldr	r3, [r7, #4]
90006980:	2200      	movs	r2, #0
90006982:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90006986:	687b      	ldr	r3, [r7, #4]
90006988:	2201      	movs	r2, #1
9000698a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
9000698e:	2300      	movs	r3, #0
}
90006990:	4618      	mov	r0, r3
90006992:	3710      	adds	r7, #16
90006994:	46bd      	mov	sp, r7
90006996:	bd80      	pop	{r7, pc}

90006998 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006998:	b480      	push	{r7}
9000699a:	b083      	sub	sp, #12
9000699c:	af00      	add	r7, sp, #0
9000699e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
900069a0:	bf00      	nop
900069a2:	370c      	adds	r7, #12
900069a4:	46bd      	mov	sp, r7
900069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900069aa:	4770      	bx	lr

900069ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900069ac:	b5b0      	push	{r4, r5, r7, lr}
900069ae:	b084      	sub	sp, #16
900069b0:	af00      	add	r7, sp, #0
900069b2:	60f8      	str	r0, [r7, #12]
900069b4:	60b9      	str	r1, [r7, #8]
900069b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
900069b8:	68fb      	ldr	r3, [r7, #12]
900069ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
900069be:	2b01      	cmp	r3, #1
900069c0:	d101      	bne.n	900069c6 <HAL_LTDC_ConfigLayer+0x1a>
900069c2:	2302      	movs	r3, #2
900069c4:	e02c      	b.n	90006a20 <HAL_LTDC_ConfigLayer+0x74>
900069c6:	68fb      	ldr	r3, [r7, #12]
900069c8:	2201      	movs	r2, #1
900069ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900069ce:	68fb      	ldr	r3, [r7, #12]
900069d0:	2202      	movs	r2, #2
900069d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900069d6:	68fa      	ldr	r2, [r7, #12]
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	2134      	movs	r1, #52	@ 0x34
900069dc:	fb01 f303 	mul.w	r3, r1, r3
900069e0:	4413      	add	r3, r2
900069e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
900069e6:	68bb      	ldr	r3, [r7, #8]
900069e8:	4614      	mov	r4, r2
900069ea:	461d      	mov	r5, r3
900069ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900069ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900069f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900069f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900069f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900069f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900069f8:	682b      	ldr	r3, [r5, #0]
900069fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900069fc:	687a      	ldr	r2, [r7, #4]
900069fe:	68b9      	ldr	r1, [r7, #8]
90006a00:	68f8      	ldr	r0, [r7, #12]
90006a02:	f000 f811 	bl	90006a28 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90006a06:	68fb      	ldr	r3, [r7, #12]
90006a08:	681b      	ldr	r3, [r3, #0]
90006a0a:	2201      	movs	r2, #1
90006a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90006a0e:	68fb      	ldr	r3, [r7, #12]
90006a10:	2201      	movs	r2, #1
90006a12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90006a16:	68fb      	ldr	r3, [r7, #12]
90006a18:	2200      	movs	r2, #0
90006a1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
90006a1e:	2300      	movs	r3, #0
}
90006a20:	4618      	mov	r0, r3
90006a22:	3710      	adds	r7, #16
90006a24:	46bd      	mov	sp, r7
90006a26:	bdb0      	pop	{r4, r5, r7, pc}

90006a28 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006a28:	b480      	push	{r7}
90006a2a:	b089      	sub	sp, #36	@ 0x24
90006a2c:	af00      	add	r7, sp, #0
90006a2e:	60f8      	str	r0, [r7, #12]
90006a30:	60b9      	str	r1, [r7, #8]
90006a32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90006a34:	68bb      	ldr	r3, [r7, #8]
90006a36:	685a      	ldr	r2, [r3, #4]
90006a38:	68fb      	ldr	r3, [r7, #12]
90006a3a:	681b      	ldr	r3, [r3, #0]
90006a3c:	68db      	ldr	r3, [r3, #12]
90006a3e:	0c1b      	lsrs	r3, r3, #16
90006a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006a44:	4413      	add	r3, r2
90006a46:	041b      	lsls	r3, r3, #16
90006a48:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90006a4a:	68fb      	ldr	r3, [r7, #12]
90006a4c:	681b      	ldr	r3, [r3, #0]
90006a4e:	461a      	mov	r2, r3
90006a50:	687b      	ldr	r3, [r7, #4]
90006a52:	01db      	lsls	r3, r3, #7
90006a54:	4413      	add	r3, r2
90006a56:	3384      	adds	r3, #132	@ 0x84
90006a58:	685b      	ldr	r3, [r3, #4]
90006a5a:	68fa      	ldr	r2, [r7, #12]
90006a5c:	6812      	ldr	r2, [r2, #0]
90006a5e:	4611      	mov	r1, r2
90006a60:	687a      	ldr	r2, [r7, #4]
90006a62:	01d2      	lsls	r2, r2, #7
90006a64:	440a      	add	r2, r1
90006a66:	3284      	adds	r2, #132	@ 0x84
90006a68:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006a6c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006a6e:	68bb      	ldr	r3, [r7, #8]
90006a70:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006a72:	68fb      	ldr	r3, [r7, #12]
90006a74:	681b      	ldr	r3, [r3, #0]
90006a76:	68db      	ldr	r3, [r3, #12]
90006a78:	0c1b      	lsrs	r3, r3, #16
90006a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006a7e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006a80:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006a82:	68fb      	ldr	r3, [r7, #12]
90006a84:	681b      	ldr	r3, [r3, #0]
90006a86:	4619      	mov	r1, r3
90006a88:	687b      	ldr	r3, [r7, #4]
90006a8a:	01db      	lsls	r3, r3, #7
90006a8c:	440b      	add	r3, r1
90006a8e:	3384      	adds	r3, #132	@ 0x84
90006a90:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006a92:	69fb      	ldr	r3, [r7, #28]
90006a94:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006a96:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006a98:	68bb      	ldr	r3, [r7, #8]
90006a9a:	68da      	ldr	r2, [r3, #12]
90006a9c:	68fb      	ldr	r3, [r7, #12]
90006a9e:	681b      	ldr	r3, [r3, #0]
90006aa0:	68db      	ldr	r3, [r3, #12]
90006aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006aa6:	4413      	add	r3, r2
90006aa8:	041b      	lsls	r3, r3, #16
90006aaa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90006aac:	68fb      	ldr	r3, [r7, #12]
90006aae:	681b      	ldr	r3, [r3, #0]
90006ab0:	461a      	mov	r2, r3
90006ab2:	687b      	ldr	r3, [r7, #4]
90006ab4:	01db      	lsls	r3, r3, #7
90006ab6:	4413      	add	r3, r2
90006ab8:	3384      	adds	r3, #132	@ 0x84
90006aba:	689b      	ldr	r3, [r3, #8]
90006abc:	68fa      	ldr	r2, [r7, #12]
90006abe:	6812      	ldr	r2, [r2, #0]
90006ac0:	4611      	mov	r1, r2
90006ac2:	687a      	ldr	r2, [r7, #4]
90006ac4:	01d2      	lsls	r2, r2, #7
90006ac6:	440a      	add	r2, r1
90006ac8:	3284      	adds	r2, #132	@ 0x84
90006aca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006ace:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90006ad0:	68bb      	ldr	r3, [r7, #8]
90006ad2:	689a      	ldr	r2, [r3, #8]
90006ad4:	68fb      	ldr	r3, [r7, #12]
90006ad6:	681b      	ldr	r3, [r3, #0]
90006ad8:	68db      	ldr	r3, [r3, #12]
90006ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006ade:	4413      	add	r3, r2
90006ae0:	1c5a      	adds	r2, r3, #1
90006ae2:	68fb      	ldr	r3, [r7, #12]
90006ae4:	681b      	ldr	r3, [r3, #0]
90006ae6:	4619      	mov	r1, r3
90006ae8:	687b      	ldr	r3, [r7, #4]
90006aea:	01db      	lsls	r3, r3, #7
90006aec:	440b      	add	r3, r1
90006aee:	3384      	adds	r3, #132	@ 0x84
90006af0:	4619      	mov	r1, r3
90006af2:	69fb      	ldr	r3, [r7, #28]
90006af4:	4313      	orrs	r3, r2
90006af6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90006af8:	68fb      	ldr	r3, [r7, #12]
90006afa:	681b      	ldr	r3, [r3, #0]
90006afc:	461a      	mov	r2, r3
90006afe:	687b      	ldr	r3, [r7, #4]
90006b00:	01db      	lsls	r3, r3, #7
90006b02:	4413      	add	r3, r2
90006b04:	3384      	adds	r3, #132	@ 0x84
90006b06:	691b      	ldr	r3, [r3, #16]
90006b08:	68fa      	ldr	r2, [r7, #12]
90006b0a:	6812      	ldr	r2, [r2, #0]
90006b0c:	4611      	mov	r1, r2
90006b0e:	687a      	ldr	r2, [r7, #4]
90006b10:	01d2      	lsls	r2, r2, #7
90006b12:	440a      	add	r2, r1
90006b14:	3284      	adds	r2, #132	@ 0x84
90006b16:	f023 0307 	bic.w	r3, r3, #7
90006b1a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90006b1c:	68fb      	ldr	r3, [r7, #12]
90006b1e:	681b      	ldr	r3, [r3, #0]
90006b20:	461a      	mov	r2, r3
90006b22:	687b      	ldr	r3, [r7, #4]
90006b24:	01db      	lsls	r3, r3, #7
90006b26:	4413      	add	r3, r2
90006b28:	3384      	adds	r3, #132	@ 0x84
90006b2a:	461a      	mov	r2, r3
90006b2c:	68bb      	ldr	r3, [r7, #8]
90006b2e:	691b      	ldr	r3, [r3, #16]
90006b30:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90006b32:	68bb      	ldr	r3, [r7, #8]
90006b34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
90006b38:	021b      	lsls	r3, r3, #8
90006b3a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90006b3c:	68bb      	ldr	r3, [r7, #8]
90006b3e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
90006b42:	041b      	lsls	r3, r3, #16
90006b44:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90006b46:	68bb      	ldr	r3, [r7, #8]
90006b48:	699b      	ldr	r3, [r3, #24]
90006b4a:	061b      	lsls	r3, r3, #24
90006b4c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
90006b4e:	68bb      	ldr	r3, [r7, #8]
90006b50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90006b54:	461a      	mov	r2, r3
90006b56:	69fb      	ldr	r3, [r7, #28]
90006b58:	431a      	orrs	r2, r3
90006b5a:	69bb      	ldr	r3, [r7, #24]
90006b5c:	431a      	orrs	r2, r3
90006b5e:	68fb      	ldr	r3, [r7, #12]
90006b60:	681b      	ldr	r3, [r3, #0]
90006b62:	4619      	mov	r1, r3
90006b64:	687b      	ldr	r3, [r7, #4]
90006b66:	01db      	lsls	r3, r3, #7
90006b68:	440b      	add	r3, r1
90006b6a:	3384      	adds	r3, #132	@ 0x84
90006b6c:	4619      	mov	r1, r3
90006b6e:	697b      	ldr	r3, [r7, #20]
90006b70:	4313      	orrs	r3, r2
90006b72:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006b74:	68fb      	ldr	r3, [r7, #12]
90006b76:	681b      	ldr	r3, [r3, #0]
90006b78:	461a      	mov	r2, r3
90006b7a:	687b      	ldr	r3, [r7, #4]
90006b7c:	01db      	lsls	r3, r3, #7
90006b7e:	4413      	add	r3, r2
90006b80:	3384      	adds	r3, #132	@ 0x84
90006b82:	695b      	ldr	r3, [r3, #20]
90006b84:	68fa      	ldr	r2, [r7, #12]
90006b86:	6812      	ldr	r2, [r2, #0]
90006b88:	4611      	mov	r1, r2
90006b8a:	687a      	ldr	r2, [r7, #4]
90006b8c:	01d2      	lsls	r2, r2, #7
90006b8e:	440a      	add	r2, r1
90006b90:	3284      	adds	r2, #132	@ 0x84
90006b92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90006b96:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006b98:	68fb      	ldr	r3, [r7, #12]
90006b9a:	681b      	ldr	r3, [r3, #0]
90006b9c:	461a      	mov	r2, r3
90006b9e:	687b      	ldr	r3, [r7, #4]
90006ba0:	01db      	lsls	r3, r3, #7
90006ba2:	4413      	add	r3, r2
90006ba4:	3384      	adds	r3, #132	@ 0x84
90006ba6:	461a      	mov	r2, r3
90006ba8:	68bb      	ldr	r3, [r7, #8]
90006baa:	695b      	ldr	r3, [r3, #20]
90006bac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90006bae:	68fb      	ldr	r3, [r7, #12]
90006bb0:	681b      	ldr	r3, [r3, #0]
90006bb2:	461a      	mov	r2, r3
90006bb4:	687b      	ldr	r3, [r7, #4]
90006bb6:	01db      	lsls	r3, r3, #7
90006bb8:	4413      	add	r3, r2
90006bba:	3384      	adds	r3, #132	@ 0x84
90006bbc:	69da      	ldr	r2, [r3, #28]
90006bbe:	68fb      	ldr	r3, [r7, #12]
90006bc0:	681b      	ldr	r3, [r3, #0]
90006bc2:	4619      	mov	r1, r3
90006bc4:	687b      	ldr	r3, [r7, #4]
90006bc6:	01db      	lsls	r3, r3, #7
90006bc8:	440b      	add	r3, r1
90006bca:	3384      	adds	r3, #132	@ 0x84
90006bcc:	4619      	mov	r1, r3
90006bce:	4b4f      	ldr	r3, [pc, #316]	@ (90006d0c <LTDC_SetConfig+0x2e4>)
90006bd0:	4013      	ands	r3, r2
90006bd2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90006bd4:	68bb      	ldr	r3, [r7, #8]
90006bd6:	69da      	ldr	r2, [r3, #28]
90006bd8:	68bb      	ldr	r3, [r7, #8]
90006bda:	6a1b      	ldr	r3, [r3, #32]
90006bdc:	68f9      	ldr	r1, [r7, #12]
90006bde:	6809      	ldr	r1, [r1, #0]
90006be0:	4608      	mov	r0, r1
90006be2:	6879      	ldr	r1, [r7, #4]
90006be4:	01c9      	lsls	r1, r1, #7
90006be6:	4401      	add	r1, r0
90006be8:	3184      	adds	r1, #132	@ 0x84
90006bea:	4313      	orrs	r3, r2
90006bec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
90006bee:	68fb      	ldr	r3, [r7, #12]
90006bf0:	681b      	ldr	r3, [r3, #0]
90006bf2:	461a      	mov	r2, r3
90006bf4:	687b      	ldr	r3, [r7, #4]
90006bf6:	01db      	lsls	r3, r3, #7
90006bf8:	4413      	add	r3, r2
90006bfa:	3384      	adds	r3, #132	@ 0x84
90006bfc:	461a      	mov	r2, r3
90006bfe:	68bb      	ldr	r3, [r7, #8]
90006c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006c02:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006c04:	68bb      	ldr	r3, [r7, #8]
90006c06:	691b      	ldr	r3, [r3, #16]
90006c08:	2b00      	cmp	r3, #0
90006c0a:	d102      	bne.n	90006c12 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
90006c0c:	2304      	movs	r3, #4
90006c0e:	61fb      	str	r3, [r7, #28]
90006c10:	e01b      	b.n	90006c4a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006c12:	68bb      	ldr	r3, [r7, #8]
90006c14:	691b      	ldr	r3, [r3, #16]
90006c16:	2b01      	cmp	r3, #1
90006c18:	d102      	bne.n	90006c20 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
90006c1a:	2303      	movs	r3, #3
90006c1c:	61fb      	str	r3, [r7, #28]
90006c1e:	e014      	b.n	90006c4a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006c20:	68bb      	ldr	r3, [r7, #8]
90006c22:	691b      	ldr	r3, [r3, #16]
90006c24:	2b04      	cmp	r3, #4
90006c26:	d00b      	beq.n	90006c40 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006c28:	68bb      	ldr	r3, [r7, #8]
90006c2a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006c2c:	2b02      	cmp	r3, #2
90006c2e:	d007      	beq.n	90006c40 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006c30:	68bb      	ldr	r3, [r7, #8]
90006c32:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006c34:	2b03      	cmp	r3, #3
90006c36:	d003      	beq.n	90006c40 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90006c38:	68bb      	ldr	r3, [r7, #8]
90006c3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006c3c:	2b07      	cmp	r3, #7
90006c3e:	d102      	bne.n	90006c46 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
90006c40:	2302      	movs	r3, #2
90006c42:	61fb      	str	r3, [r7, #28]
90006c44:	e001      	b.n	90006c4a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
90006c46:	2301      	movs	r3, #1
90006c48:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90006c4a:	68fb      	ldr	r3, [r7, #12]
90006c4c:	681b      	ldr	r3, [r3, #0]
90006c4e:	461a      	mov	r2, r3
90006c50:	687b      	ldr	r3, [r7, #4]
90006c52:	01db      	lsls	r3, r3, #7
90006c54:	4413      	add	r3, r2
90006c56:	3384      	adds	r3, #132	@ 0x84
90006c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006c5a:	68fa      	ldr	r2, [r7, #12]
90006c5c:	6812      	ldr	r2, [r2, #0]
90006c5e:	4611      	mov	r1, r2
90006c60:	687a      	ldr	r2, [r7, #4]
90006c62:	01d2      	lsls	r2, r2, #7
90006c64:	440a      	add	r2, r1
90006c66:	3284      	adds	r2, #132	@ 0x84
90006c68:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90006c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006c6e:	68bb      	ldr	r3, [r7, #8]
90006c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006c72:	69fa      	ldr	r2, [r7, #28]
90006c74:	fb02 f303 	mul.w	r3, r2, r3
90006c78:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90006c7a:	68bb      	ldr	r3, [r7, #8]
90006c7c:	6859      	ldr	r1, [r3, #4]
90006c7e:	68bb      	ldr	r3, [r7, #8]
90006c80:	681b      	ldr	r3, [r3, #0]
90006c82:	1acb      	subs	r3, r1, r3
90006c84:	69f9      	ldr	r1, [r7, #28]
90006c86:	fb01 f303 	mul.w	r3, r1, r3
90006c8a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006c8c:	68f9      	ldr	r1, [r7, #12]
90006c8e:	6809      	ldr	r1, [r1, #0]
90006c90:	4608      	mov	r0, r1
90006c92:	6879      	ldr	r1, [r7, #4]
90006c94:	01c9      	lsls	r1, r1, #7
90006c96:	4401      	add	r1, r0
90006c98:	3184      	adds	r1, #132	@ 0x84
90006c9a:	4313      	orrs	r3, r2
90006c9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90006c9e:	68fb      	ldr	r3, [r7, #12]
90006ca0:	681b      	ldr	r3, [r3, #0]
90006ca2:	461a      	mov	r2, r3
90006ca4:	687b      	ldr	r3, [r7, #4]
90006ca6:	01db      	lsls	r3, r3, #7
90006ca8:	4413      	add	r3, r2
90006caa:	3384      	adds	r3, #132	@ 0x84
90006cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
90006cae:	68fb      	ldr	r3, [r7, #12]
90006cb0:	681b      	ldr	r3, [r3, #0]
90006cb2:	4619      	mov	r1, r3
90006cb4:	687b      	ldr	r3, [r7, #4]
90006cb6:	01db      	lsls	r3, r3, #7
90006cb8:	440b      	add	r3, r1
90006cba:	3384      	adds	r3, #132	@ 0x84
90006cbc:	4619      	mov	r1, r3
90006cbe:	4b14      	ldr	r3, [pc, #80]	@ (90006d10 <LTDC_SetConfig+0x2e8>)
90006cc0:	4013      	ands	r3, r2
90006cc2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90006cc4:	68fb      	ldr	r3, [r7, #12]
90006cc6:	681b      	ldr	r3, [r3, #0]
90006cc8:	461a      	mov	r2, r3
90006cca:	687b      	ldr	r3, [r7, #4]
90006ccc:	01db      	lsls	r3, r3, #7
90006cce:	4413      	add	r3, r2
90006cd0:	3384      	adds	r3, #132	@ 0x84
90006cd2:	461a      	mov	r2, r3
90006cd4:	68bb      	ldr	r3, [r7, #8]
90006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006cd8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90006cda:	68fb      	ldr	r3, [r7, #12]
90006cdc:	681b      	ldr	r3, [r3, #0]
90006cde:	461a      	mov	r2, r3
90006ce0:	687b      	ldr	r3, [r7, #4]
90006ce2:	01db      	lsls	r3, r3, #7
90006ce4:	4413      	add	r3, r2
90006ce6:	3384      	adds	r3, #132	@ 0x84
90006ce8:	681b      	ldr	r3, [r3, #0]
90006cea:	68fa      	ldr	r2, [r7, #12]
90006cec:	6812      	ldr	r2, [r2, #0]
90006cee:	4611      	mov	r1, r2
90006cf0:	687a      	ldr	r2, [r7, #4]
90006cf2:	01d2      	lsls	r2, r2, #7
90006cf4:	440a      	add	r2, r1
90006cf6:	3284      	adds	r2, #132	@ 0x84
90006cf8:	f043 0301 	orr.w	r3, r3, #1
90006cfc:	6013      	str	r3, [r2, #0]
}
90006cfe:	bf00      	nop
90006d00:	3724      	adds	r7, #36	@ 0x24
90006d02:	46bd      	mov	sp, r7
90006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
90006d08:	4770      	bx	lr
90006d0a:	bf00      	nop
90006d0c:	fffff8f8 	.word	0xfffff8f8
90006d10:	fffff800 	.word	0xfffff800

90006d14 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006d14:	b580      	push	{r7, lr}
90006d16:	b084      	sub	sp, #16
90006d18:	af00      	add	r7, sp, #0
90006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006d1c:	f7fc fa1e 	bl	9000315c <HAL_GetTick>
90006d20:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006d22:	687b      	ldr	r3, [r7, #4]
90006d24:	2b00      	cmp	r3, #0
90006d26:	d101      	bne.n	90006d2c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
90006d28:	2301      	movs	r3, #1
90006d2a:	e03b      	b.n	90006da4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006d2c:	687b      	ldr	r3, [r7, #4]
90006d2e:	2200      	movs	r2, #0
90006d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006d34:	687b      	ldr	r3, [r7, #4]
90006d36:	2202      	movs	r2, #2
90006d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006d3c:	687b      	ldr	r3, [r7, #4]
90006d3e:	681b      	ldr	r3, [r3, #0]
90006d40:	68da      	ldr	r2, [r3, #12]
90006d42:	687b      	ldr	r3, [r7, #4]
90006d44:	681b      	ldr	r3, [r3, #0]
90006d46:	f022 0201 	bic.w	r2, r2, #1
90006d4a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006d4c:	e00f      	b.n	90006d6e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006d4e:	f7fc fa05 	bl	9000315c <HAL_GetTick>
90006d52:	4602      	mov	r2, r0
90006d54:	68fb      	ldr	r3, [r7, #12]
90006d56:	1ad3      	subs	r3, r2, r3
90006d58:	2b05      	cmp	r3, #5
90006d5a:	d908      	bls.n	90006d6e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006d5c:	687b      	ldr	r3, [r7, #4]
90006d5e:	2240      	movs	r2, #64	@ 0x40
90006d60:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006d62:	687b      	ldr	r3, [r7, #4]
90006d64:	2203      	movs	r2, #3
90006d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
90006d6a:	2301      	movs	r3, #1
90006d6c:	e01a      	b.n	90006da4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006d6e:	687b      	ldr	r3, [r7, #4]
90006d70:	681b      	ldr	r3, [r3, #0]
90006d72:	68db      	ldr	r3, [r3, #12]
90006d74:	f003 0301 	and.w	r3, r3, #1
90006d78:	2b00      	cmp	r3, #0
90006d7a:	d1e8      	bne.n	90006d4e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006d7c:	6878      	ldr	r0, [r7, #4]
90006d7e:	f000 f86d 	bl	90006e5c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006d82:	687b      	ldr	r3, [r7, #4]
90006d84:	2200      	movs	r2, #0
90006d86:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006d88:	687b      	ldr	r3, [r7, #4]
90006d8a:	2200      	movs	r2, #0
90006d8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006d8e:	687b      	ldr	r3, [r7, #4]
90006d90:	2200      	movs	r2, #0
90006d92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006d94:	687b      	ldr	r3, [r7, #4]
90006d96:	2200      	movs	r2, #0
90006d98:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
90006d9a:	687b      	ldr	r3, [r7, #4]
90006d9c:	2201      	movs	r2, #1
90006d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006da2:	2300      	movs	r3, #0
}
90006da4:	4618      	mov	r0, r3
90006da6:	3710      	adds	r7, #16
90006da8:	46bd      	mov	sp, r7
90006daa:	bd80      	pop	{r7, pc}

90006dac <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
90006dac:	b480      	push	{r7}
90006dae:	b083      	sub	sp, #12
90006db0:	af00      	add	r7, sp, #0
90006db2:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006db4:	687b      	ldr	r3, [r7, #4]
90006db6:	2b00      	cmp	r3, #0
90006db8:	d101      	bne.n	90006dbe <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
90006dba:	2301      	movs	r3, #1
90006dbc:	e048      	b.n	90006e50 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
90006dbe:	687b      	ldr	r3, [r7, #4]
90006dc0:	681b      	ldr	r3, [r3, #0]
90006dc2:	68da      	ldr	r2, [r3, #12]
90006dc4:	687b      	ldr	r3, [r7, #4]
90006dc6:	681b      	ldr	r3, [r3, #0]
90006dc8:	f022 0201 	bic.w	r2, r2, #1
90006dcc:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
90006dce:	687b      	ldr	r3, [r7, #4]
90006dd0:	681b      	ldr	r3, [r3, #0]
90006dd2:	2200      	movs	r2, #0
90006dd4:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90006dd6:	687b      	ldr	r3, [r7, #4]
90006dd8:	681b      	ldr	r3, [r3, #0]
90006dda:	2200      	movs	r2, #0
90006ddc:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90006dde:	687b      	ldr	r3, [r7, #4]
90006de0:	681b      	ldr	r3, [r3, #0]
90006de2:	2200      	movs	r2, #0
90006de4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006de6:	687b      	ldr	r3, [r7, #4]
90006de8:	681b      	ldr	r3, [r3, #0]
90006dea:	2200      	movs	r2, #0
90006dec:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006dee:	687b      	ldr	r3, [r7, #4]
90006df0:	681b      	ldr	r3, [r3, #0]
90006df2:	2200      	movs	r2, #0
90006df4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006df6:	687b      	ldr	r3, [r7, #4]
90006df8:	681b      	ldr	r3, [r3, #0]
90006dfa:	2200      	movs	r2, #0
90006dfc:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006dfe:	687b      	ldr	r3, [r7, #4]
90006e00:	681b      	ldr	r3, [r3, #0]
90006e02:	2200      	movs	r2, #0
90006e04:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90006e06:	687b      	ldr	r3, [r7, #4]
90006e08:	681b      	ldr	r3, [r3, #0]
90006e0a:	2200      	movs	r2, #0
90006e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006e0e:	687b      	ldr	r3, [r7, #4]
90006e10:	681b      	ldr	r3, [r3, #0]
90006e12:	2200      	movs	r2, #0
90006e14:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006e16:	687b      	ldr	r3, [r7, #4]
90006e18:	681b      	ldr	r3, [r3, #0]
90006e1a:	2200      	movs	r2, #0
90006e1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006e1e:	687b      	ldr	r3, [r7, #4]
90006e20:	681b      	ldr	r3, [r3, #0]
90006e22:	221f      	movs	r2, #31
90006e24:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006e26:	687b      	ldr	r3, [r7, #4]
90006e28:	2200      	movs	r2, #0
90006e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006e2c:	687b      	ldr	r3, [r7, #4]
90006e2e:	2200      	movs	r2, #0
90006e30:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006e32:	687b      	ldr	r3, [r7, #4]
90006e34:	2200      	movs	r2, #0
90006e36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006e38:	687b      	ldr	r3, [r7, #4]
90006e3a:	2200      	movs	r2, #0
90006e3c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006e3e:	687b      	ldr	r3, [r7, #4]
90006e40:	2200      	movs	r2, #0
90006e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006e46:	687b      	ldr	r3, [r7, #4]
90006e48:	2200      	movs	r2, #0
90006e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006e4e:	2300      	movs	r3, #0
}
90006e50:	4618      	mov	r0, r3
90006e52:	370c      	adds	r7, #12
90006e54:	46bd      	mov	sp, r7
90006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
90006e5a:	4770      	bx	lr

90006e5c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006e5c:	b480      	push	{r7}
90006e5e:	b085      	sub	sp, #20
90006e60:	af00      	add	r7, sp, #0
90006e62:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006e64:	687b      	ldr	r3, [r7, #4]
90006e66:	68d9      	ldr	r1, [r3, #12]
90006e68:	687b      	ldr	r3, [r7, #4]
90006e6a:	691a      	ldr	r2, [r3, #16]
90006e6c:	687b      	ldr	r3, [r7, #4]
90006e6e:	681b      	ldr	r3, [r3, #0]
90006e70:	430a      	orrs	r2, r1
90006e72:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006e74:	687b      	ldr	r3, [r7, #4]
90006e76:	695a      	ldr	r2, [r3, #20]
90006e78:	687b      	ldr	r3, [r7, #4]
90006e7a:	699b      	ldr	r3, [r3, #24]
90006e7c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006e7e:	687b      	ldr	r3, [r7, #4]
90006e80:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006e82:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006e84:	687b      	ldr	r3, [r7, #4]
90006e86:	6a1b      	ldr	r3, [r3, #32]
90006e88:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006e8a:	687b      	ldr	r3, [r7, #4]
90006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006e8e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006e90:	687b      	ldr	r3, [r7, #4]
90006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006e94:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006e96:	687b      	ldr	r3, [r7, #4]
90006e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006e9a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006e9c:	687b      	ldr	r3, [r7, #4]
90006e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006ea0:	3b01      	subs	r3, #1
90006ea2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006ea4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006ea8:	687b      	ldr	r3, [r7, #4]
90006eaa:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006eac:	687b      	ldr	r3, [r7, #4]
90006eae:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006eb0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006eb2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006eb4:	687b      	ldr	r3, [r7, #4]
90006eb6:	685b      	ldr	r3, [r3, #4]
90006eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006ebc:	d107      	bne.n	90006ece <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006ebe:	687b      	ldr	r3, [r7, #4]
90006ec0:	681b      	ldr	r3, [r3, #0]
90006ec2:	691a      	ldr	r2, [r3, #16]
90006ec4:	687b      	ldr	r3, [r7, #4]
90006ec6:	681b      	ldr	r3, [r3, #0]
90006ec8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006ecc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006ece:	687b      	ldr	r3, [r7, #4]
90006ed0:	681b      	ldr	r3, [r3, #0]
90006ed2:	2200      	movs	r2, #0
90006ed4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006ed6:	687b      	ldr	r3, [r7, #4]
90006ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006eda:	2b00      	cmp	r3, #0
90006edc:	da11      	bge.n	90006f02 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006ede:	687b      	ldr	r3, [r7, #4]
90006ee0:	681b      	ldr	r3, [r3, #0]
90006ee2:	695a      	ldr	r2, [r3, #20]
90006ee4:	687b      	ldr	r3, [r7, #4]
90006ee6:	681b      	ldr	r3, [r3, #0]
90006ee8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006eec:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006eee:	687b      	ldr	r3, [r7, #4]
90006ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006ef2:	425b      	negs	r3, r3
90006ef4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006ef6:	687b      	ldr	r3, [r7, #4]
90006ef8:	681b      	ldr	r3, [r3, #0]
90006efa:	68fa      	ldr	r2, [r7, #12]
90006efc:	b292      	uxth	r2, r2
90006efe:	621a      	str	r2, [r3, #32]
90006f00:	e006      	b.n	90006f10 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006f02:	687b      	ldr	r3, [r7, #4]
90006f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006f06:	461a      	mov	r2, r3
90006f08:	687b      	ldr	r3, [r7, #4]
90006f0a:	681b      	ldr	r3, [r3, #0]
90006f0c:	b292      	uxth	r2, r2
90006f0e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006f10:	687b      	ldr	r3, [r7, #4]
90006f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006f14:	2b00      	cmp	r3, #0
90006f16:	da15      	bge.n	90006f44 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006f18:	687b      	ldr	r3, [r7, #4]
90006f1a:	681b      	ldr	r3, [r3, #0]
90006f1c:	695a      	ldr	r2, [r3, #20]
90006f1e:	687b      	ldr	r3, [r7, #4]
90006f20:	681b      	ldr	r3, [r3, #0]
90006f22:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006f26:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006f28:	687b      	ldr	r3, [r7, #4]
90006f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006f2c:	425b      	negs	r3, r3
90006f2e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006f30:	687b      	ldr	r3, [r7, #4]
90006f32:	681b      	ldr	r3, [r3, #0]
90006f34:	6a19      	ldr	r1, [r3, #32]
90006f36:	68fb      	ldr	r3, [r7, #12]
90006f38:	041a      	lsls	r2, r3, #16
90006f3a:	687b      	ldr	r3, [r7, #4]
90006f3c:	681b      	ldr	r3, [r3, #0]
90006f3e:	430a      	orrs	r2, r1
90006f40:	621a      	str	r2, [r3, #32]
90006f42:	e009      	b.n	90006f58 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006f44:	687b      	ldr	r3, [r7, #4]
90006f46:	681b      	ldr	r3, [r3, #0]
90006f48:	6a19      	ldr	r1, [r3, #32]
90006f4a:	687b      	ldr	r3, [r7, #4]
90006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006f4e:	041a      	lsls	r2, r3, #16
90006f50:	687b      	ldr	r3, [r7, #4]
90006f52:	681b      	ldr	r3, [r3, #0]
90006f54:	430a      	orrs	r2, r1
90006f56:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006f58:	687b      	ldr	r3, [r7, #4]
90006f5a:	685b      	ldr	r3, [r3, #4]
90006f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006f60:	d006      	beq.n	90006f70 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006f62:	687b      	ldr	r3, [r7, #4]
90006f64:	685a      	ldr	r2, [r3, #4]
90006f66:	687b      	ldr	r3, [r7, #4]
90006f68:	681b      	ldr	r3, [r3, #0]
90006f6a:	b2d2      	uxtb	r2, r2
90006f6c:	629a      	str	r2, [r3, #40]	@ 0x28
90006f6e:	e003      	b.n	90006f78 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006f70:	687b      	ldr	r3, [r7, #4]
90006f72:	681b      	ldr	r3, [r3, #0]
90006f74:	2200      	movs	r2, #0
90006f76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006f78:	687b      	ldr	r3, [r7, #4]
90006f7a:	681b      	ldr	r3, [r3, #0]
90006f7c:	2200      	movs	r2, #0
90006f7e:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006f80:	bf00      	nop
90006f82:	3714      	adds	r7, #20
90006f84:	46bd      	mov	sp, r7
90006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
90006f8a:	4770      	bx	lr

90006f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006f8c:	b580      	push	{r7, lr}
90006f8e:	b08c      	sub	sp, #48	@ 0x30
90006f90:	af00      	add	r7, sp, #0
90006f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006f94:	687b      	ldr	r3, [r7, #4]
90006f96:	2b00      	cmp	r3, #0
90006f98:	d102      	bne.n	90006fa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006f9a:	2301      	movs	r3, #1
90006f9c:	f000 bc48 	b.w	90007830 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006fa0:	687b      	ldr	r3, [r7, #4]
90006fa2:	681b      	ldr	r3, [r3, #0]
90006fa4:	f003 0301 	and.w	r3, r3, #1
90006fa8:	2b00      	cmp	r3, #0
90006faa:	f000 8088 	beq.w	900070be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006fae:	4b99      	ldr	r3, [pc, #612]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90006fb0:	691b      	ldr	r3, [r3, #16]
90006fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006fb8:	4b96      	ldr	r3, [pc, #600]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90006fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006fc0:	2b10      	cmp	r3, #16
90006fc2:	d007      	beq.n	90006fd4 <HAL_RCC_OscConfig+0x48>
90006fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006fc6:	2b18      	cmp	r3, #24
90006fc8:	d111      	bne.n	90006fee <HAL_RCC_OscConfig+0x62>
90006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006fcc:	f003 0303 	and.w	r3, r3, #3
90006fd0:	2b02      	cmp	r3, #2
90006fd2:	d10c      	bne.n	90006fee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006fd4:	4b8f      	ldr	r3, [pc, #572]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90006fd6:	681b      	ldr	r3, [r3, #0]
90006fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006fdc:	2b00      	cmp	r3, #0
90006fde:	d06d      	beq.n	900070bc <HAL_RCC_OscConfig+0x130>
90006fe0:	687b      	ldr	r3, [r7, #4]
90006fe2:	685b      	ldr	r3, [r3, #4]
90006fe4:	2b00      	cmp	r3, #0
90006fe6:	d169      	bne.n	900070bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006fe8:	2301      	movs	r3, #1
90006fea:	f000 bc21 	b.w	90007830 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006fee:	687b      	ldr	r3, [r7, #4]
90006ff0:	685b      	ldr	r3, [r3, #4]
90006ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006ff6:	d106      	bne.n	90007006 <HAL_RCC_OscConfig+0x7a>
90006ff8:	4b86      	ldr	r3, [pc, #536]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90006ffa:	681b      	ldr	r3, [r3, #0]
90006ffc:	4a85      	ldr	r2, [pc, #532]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90006ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007002:	6013      	str	r3, [r2, #0]
90007004:	e02e      	b.n	90007064 <HAL_RCC_OscConfig+0xd8>
90007006:	687b      	ldr	r3, [r7, #4]
90007008:	685b      	ldr	r3, [r3, #4]
9000700a:	2b00      	cmp	r3, #0
9000700c:	d10c      	bne.n	90007028 <HAL_RCC_OscConfig+0x9c>
9000700e:	4b81      	ldr	r3, [pc, #516]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007010:	681b      	ldr	r3, [r3, #0]
90007012:	4a80      	ldr	r2, [pc, #512]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90007018:	6013      	str	r3, [r2, #0]
9000701a:	4b7e      	ldr	r3, [pc, #504]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000701c:	681b      	ldr	r3, [r3, #0]
9000701e:	4a7d      	ldr	r2, [pc, #500]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90007024:	6013      	str	r3, [r2, #0]
90007026:	e01d      	b.n	90007064 <HAL_RCC_OscConfig+0xd8>
90007028:	687b      	ldr	r3, [r7, #4]
9000702a:	685b      	ldr	r3, [r3, #4]
9000702c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90007030:	d10c      	bne.n	9000704c <HAL_RCC_OscConfig+0xc0>
90007032:	4b78      	ldr	r3, [pc, #480]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007034:	681b      	ldr	r3, [r3, #0]
90007036:	4a77      	ldr	r2, [pc, #476]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
9000703c:	6013      	str	r3, [r2, #0]
9000703e:	4b75      	ldr	r3, [pc, #468]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007040:	681b      	ldr	r3, [r3, #0]
90007042:	4a74      	ldr	r2, [pc, #464]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007048:	6013      	str	r3, [r2, #0]
9000704a:	e00b      	b.n	90007064 <HAL_RCC_OscConfig+0xd8>
9000704c:	4b71      	ldr	r3, [pc, #452]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000704e:	681b      	ldr	r3, [r3, #0]
90007050:	4a70      	ldr	r2, [pc, #448]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90007056:	6013      	str	r3, [r2, #0]
90007058:	4b6e      	ldr	r3, [pc, #440]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000705a:	681b      	ldr	r3, [r3, #0]
9000705c:	4a6d      	ldr	r2, [pc, #436]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000705e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90007062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90007064:	687b      	ldr	r3, [r7, #4]
90007066:	685b      	ldr	r3, [r3, #4]
90007068:	2b00      	cmp	r3, #0
9000706a:	d013      	beq.n	90007094 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000706c:	f7fc f876 	bl	9000315c <HAL_GetTick>
90007070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007072:	e008      	b.n	90007086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90007074:	f7fc f872 	bl	9000315c <HAL_GetTick>
90007078:	4602      	mov	r2, r0
9000707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000707c:	1ad3      	subs	r3, r2, r3
9000707e:	2b64      	cmp	r3, #100	@ 0x64
90007080:	d901      	bls.n	90007086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90007082:	2303      	movs	r3, #3
90007084:	e3d4      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007086:	4b63      	ldr	r3, [pc, #396]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007088:	681b      	ldr	r3, [r3, #0]
9000708a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
9000708e:	2b00      	cmp	r3, #0
90007090:	d0f0      	beq.n	90007074 <HAL_RCC_OscConfig+0xe8>
90007092:	e014      	b.n	900070be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007094:	f7fc f862 	bl	9000315c <HAL_GetTick>
90007098:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000709a:	e008      	b.n	900070ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000709c:	f7fc f85e 	bl	9000315c <HAL_GetTick>
900070a0:	4602      	mov	r2, r0
900070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070a4:	1ad3      	subs	r3, r2, r3
900070a6:	2b64      	cmp	r3, #100	@ 0x64
900070a8:	d901      	bls.n	900070ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
900070aa:	2303      	movs	r3, #3
900070ac:	e3c0      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900070ae:	4b59      	ldr	r3, [pc, #356]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900070b0:	681b      	ldr	r3, [r3, #0]
900070b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
900070b6:	2b00      	cmp	r3, #0
900070b8:	d1f0      	bne.n	9000709c <HAL_RCC_OscConfig+0x110>
900070ba:	e000      	b.n	900070be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900070bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900070be:	687b      	ldr	r3, [r7, #4]
900070c0:	681b      	ldr	r3, [r3, #0]
900070c2:	f003 0302 	and.w	r3, r3, #2
900070c6:	2b00      	cmp	r3, #0
900070c8:	f000 80ca 	beq.w	90007260 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900070cc:	4b51      	ldr	r3, [pc, #324]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900070ce:	691b      	ldr	r3, [r3, #16]
900070d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900070d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900070d6:	4b4f      	ldr	r3, [pc, #316]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900070d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900070da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
900070dc:	6a3b      	ldr	r3, [r7, #32]
900070de:	2b00      	cmp	r3, #0
900070e0:	d007      	beq.n	900070f2 <HAL_RCC_OscConfig+0x166>
900070e2:	6a3b      	ldr	r3, [r7, #32]
900070e4:	2b18      	cmp	r3, #24
900070e6:	d156      	bne.n	90007196 <HAL_RCC_OscConfig+0x20a>
900070e8:	69fb      	ldr	r3, [r7, #28]
900070ea:	f003 0303 	and.w	r3, r3, #3
900070ee:	2b00      	cmp	r3, #0
900070f0:	d151      	bne.n	90007196 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900070f2:	4b48      	ldr	r3, [pc, #288]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900070f4:	681b      	ldr	r3, [r3, #0]
900070f6:	f003 0304 	and.w	r3, r3, #4
900070fa:	2b00      	cmp	r3, #0
900070fc:	d005      	beq.n	9000710a <HAL_RCC_OscConfig+0x17e>
900070fe:	687b      	ldr	r3, [r7, #4]
90007100:	68db      	ldr	r3, [r3, #12]
90007102:	2b00      	cmp	r3, #0
90007104:	d101      	bne.n	9000710a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90007106:	2301      	movs	r3, #1
90007108:	e392      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000710a:	4b42      	ldr	r3, [pc, #264]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000710c:	681b      	ldr	r3, [r3, #0]
9000710e:	f023 0219 	bic.w	r2, r3, #25
90007112:	687b      	ldr	r3, [r7, #4]
90007114:	68db      	ldr	r3, [r3, #12]
90007116:	493f      	ldr	r1, [pc, #252]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007118:	4313      	orrs	r3, r2
9000711a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000711c:	f7fc f81e 	bl	9000315c <HAL_GetTick>
90007120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007122:	e008      	b.n	90007136 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007124:	f7fc f81a 	bl	9000315c <HAL_GetTick>
90007128:	4602      	mov	r2, r0
9000712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000712c:	1ad3      	subs	r3, r2, r3
9000712e:	2b02      	cmp	r3, #2
90007130:	d901      	bls.n	90007136 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90007132:	2303      	movs	r3, #3
90007134:	e37c      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007136:	4b37      	ldr	r3, [pc, #220]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007138:	681b      	ldr	r3, [r3, #0]
9000713a:	f003 0304 	and.w	r3, r3, #4
9000713e:	2b00      	cmp	r3, #0
90007140:	d0f0      	beq.n	90007124 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007142:	f7fc f817 	bl	90003174 <HAL_GetREVID>
90007146:	4603      	mov	r3, r0
90007148:	f241 0203 	movw	r2, #4099	@ 0x1003
9000714c:	4293      	cmp	r3, r2
9000714e:	d817      	bhi.n	90007180 <HAL_RCC_OscConfig+0x1f4>
90007150:	687b      	ldr	r3, [r7, #4]
90007152:	691b      	ldr	r3, [r3, #16]
90007154:	2b40      	cmp	r3, #64	@ 0x40
90007156:	d108      	bne.n	9000716a <HAL_RCC_OscConfig+0x1de>
90007158:	4b2e      	ldr	r3, [pc, #184]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000715a:	685b      	ldr	r3, [r3, #4]
9000715c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90007160:	4a2c      	ldr	r2, [pc, #176]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007166:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007168:	e07a      	b.n	90007260 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000716a:	4b2a      	ldr	r3, [pc, #168]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000716c:	685b      	ldr	r3, [r3, #4]
9000716e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90007172:	687b      	ldr	r3, [r7, #4]
90007174:	691b      	ldr	r3, [r3, #16]
90007176:	031b      	lsls	r3, r3, #12
90007178:	4926      	ldr	r1, [pc, #152]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000717a:	4313      	orrs	r3, r2
9000717c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000717e:	e06f      	b.n	90007260 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90007180:	4b24      	ldr	r3, [pc, #144]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007182:	685b      	ldr	r3, [r3, #4]
90007184:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90007188:	687b      	ldr	r3, [r7, #4]
9000718a:	691b      	ldr	r3, [r3, #16]
9000718c:	061b      	lsls	r3, r3, #24
9000718e:	4921      	ldr	r1, [pc, #132]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007190:	4313      	orrs	r3, r2
90007192:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90007194:	e064      	b.n	90007260 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90007196:	687b      	ldr	r3, [r7, #4]
90007198:	68db      	ldr	r3, [r3, #12]
9000719a:	2b00      	cmp	r3, #0
9000719c:	d047      	beq.n	9000722e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000719e:	4b1d      	ldr	r3, [pc, #116]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900071a0:	681b      	ldr	r3, [r3, #0]
900071a2:	f023 0219 	bic.w	r2, r3, #25
900071a6:	687b      	ldr	r3, [r7, #4]
900071a8:	68db      	ldr	r3, [r3, #12]
900071aa:	491a      	ldr	r1, [pc, #104]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900071ac:	4313      	orrs	r3, r2
900071ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900071b0:	f7fb ffd4 	bl	9000315c <HAL_GetTick>
900071b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900071b6:	e008      	b.n	900071ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900071b8:	f7fb ffd0 	bl	9000315c <HAL_GetTick>
900071bc:	4602      	mov	r2, r0
900071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071c0:	1ad3      	subs	r3, r2, r3
900071c2:	2b02      	cmp	r3, #2
900071c4:	d901      	bls.n	900071ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
900071c6:	2303      	movs	r3, #3
900071c8:	e332      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900071ca:	4b12      	ldr	r3, [pc, #72]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900071cc:	681b      	ldr	r3, [r3, #0]
900071ce:	f003 0304 	and.w	r3, r3, #4
900071d2:	2b00      	cmp	r3, #0
900071d4:	d0f0      	beq.n	900071b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900071d6:	f7fb ffcd 	bl	90003174 <HAL_GetREVID>
900071da:	4603      	mov	r3, r0
900071dc:	f241 0203 	movw	r2, #4099	@ 0x1003
900071e0:	4293      	cmp	r3, r2
900071e2:	d819      	bhi.n	90007218 <HAL_RCC_OscConfig+0x28c>
900071e4:	687b      	ldr	r3, [r7, #4]
900071e6:	691b      	ldr	r3, [r3, #16]
900071e8:	2b40      	cmp	r3, #64	@ 0x40
900071ea:	d108      	bne.n	900071fe <HAL_RCC_OscConfig+0x272>
900071ec:	4b09      	ldr	r3, [pc, #36]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900071ee:	685b      	ldr	r3, [r3, #4]
900071f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
900071f4:	4a07      	ldr	r2, [pc, #28]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
900071f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900071fa:	6053      	str	r3, [r2, #4]
900071fc:	e030      	b.n	90007260 <HAL_RCC_OscConfig+0x2d4>
900071fe:	4b05      	ldr	r3, [pc, #20]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
90007200:	685b      	ldr	r3, [r3, #4]
90007202:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90007206:	687b      	ldr	r3, [r7, #4]
90007208:	691b      	ldr	r3, [r3, #16]
9000720a:	031b      	lsls	r3, r3, #12
9000720c:	4901      	ldr	r1, [pc, #4]	@ (90007214 <HAL_RCC_OscConfig+0x288>)
9000720e:	4313      	orrs	r3, r2
90007210:	604b      	str	r3, [r1, #4]
90007212:	e025      	b.n	90007260 <HAL_RCC_OscConfig+0x2d4>
90007214:	58024400 	.word	0x58024400
90007218:	4b9a      	ldr	r3, [pc, #616]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
9000721a:	685b      	ldr	r3, [r3, #4]
9000721c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90007220:	687b      	ldr	r3, [r7, #4]
90007222:	691b      	ldr	r3, [r3, #16]
90007224:	061b      	lsls	r3, r3, #24
90007226:	4997      	ldr	r1, [pc, #604]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007228:	4313      	orrs	r3, r2
9000722a:	604b      	str	r3, [r1, #4]
9000722c:	e018      	b.n	90007260 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
9000722e:	4b95      	ldr	r3, [pc, #596]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007230:	681b      	ldr	r3, [r3, #0]
90007232:	4a94      	ldr	r2, [pc, #592]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007234:	f023 0301 	bic.w	r3, r3, #1
90007238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000723a:	f7fb ff8f 	bl	9000315c <HAL_GetTick>
9000723e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90007240:	e008      	b.n	90007254 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90007242:	f7fb ff8b 	bl	9000315c <HAL_GetTick>
90007246:	4602      	mov	r2, r0
90007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000724a:	1ad3      	subs	r3, r2, r3
9000724c:	2b02      	cmp	r3, #2
9000724e:	d901      	bls.n	90007254 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90007250:	2303      	movs	r3, #3
90007252:	e2ed      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90007254:	4b8b      	ldr	r3, [pc, #556]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007256:	681b      	ldr	r3, [r3, #0]
90007258:	f003 0304 	and.w	r3, r3, #4
9000725c:	2b00      	cmp	r3, #0
9000725e:	d1f0      	bne.n	90007242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90007260:	687b      	ldr	r3, [r7, #4]
90007262:	681b      	ldr	r3, [r3, #0]
90007264:	f003 0310 	and.w	r3, r3, #16
90007268:	2b00      	cmp	r3, #0
9000726a:	f000 80a9 	beq.w	900073c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000726e:	4b85      	ldr	r3, [pc, #532]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007270:	691b      	ldr	r3, [r3, #16]
90007272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007276:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90007278:	4b82      	ldr	r3, [pc, #520]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
9000727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000727c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000727e:	69bb      	ldr	r3, [r7, #24]
90007280:	2b08      	cmp	r3, #8
90007282:	d007      	beq.n	90007294 <HAL_RCC_OscConfig+0x308>
90007284:	69bb      	ldr	r3, [r7, #24]
90007286:	2b18      	cmp	r3, #24
90007288:	d13a      	bne.n	90007300 <HAL_RCC_OscConfig+0x374>
9000728a:	697b      	ldr	r3, [r7, #20]
9000728c:	f003 0303 	and.w	r3, r3, #3
90007290:	2b01      	cmp	r3, #1
90007292:	d135      	bne.n	90007300 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90007294:	4b7b      	ldr	r3, [pc, #492]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007296:	681b      	ldr	r3, [r3, #0]
90007298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000729c:	2b00      	cmp	r3, #0
9000729e:	d005      	beq.n	900072ac <HAL_RCC_OscConfig+0x320>
900072a0:	687b      	ldr	r3, [r7, #4]
900072a2:	69db      	ldr	r3, [r3, #28]
900072a4:	2b80      	cmp	r3, #128	@ 0x80
900072a6:	d001      	beq.n	900072ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
900072a8:	2301      	movs	r3, #1
900072aa:	e2c1      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900072ac:	f7fb ff62 	bl	90003174 <HAL_GetREVID>
900072b0:	4603      	mov	r3, r0
900072b2:	f241 0203 	movw	r2, #4099	@ 0x1003
900072b6:	4293      	cmp	r3, r2
900072b8:	d817      	bhi.n	900072ea <HAL_RCC_OscConfig+0x35e>
900072ba:	687b      	ldr	r3, [r7, #4]
900072bc:	6a1b      	ldr	r3, [r3, #32]
900072be:	2b20      	cmp	r3, #32
900072c0:	d108      	bne.n	900072d4 <HAL_RCC_OscConfig+0x348>
900072c2:	4b70      	ldr	r3, [pc, #448]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900072c4:	685b      	ldr	r3, [r3, #4]
900072c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
900072ca:	4a6e      	ldr	r2, [pc, #440]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900072cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
900072d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900072d2:	e075      	b.n	900073c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900072d4:	4b6b      	ldr	r3, [pc, #428]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900072d6:	685b      	ldr	r3, [r3, #4]
900072d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
900072dc:	687b      	ldr	r3, [r7, #4]
900072de:	6a1b      	ldr	r3, [r3, #32]
900072e0:	069b      	lsls	r3, r3, #26
900072e2:	4968      	ldr	r1, [pc, #416]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900072e4:	4313      	orrs	r3, r2
900072e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900072e8:	e06a      	b.n	900073c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900072ea:	4b66      	ldr	r3, [pc, #408]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900072ec:	68db      	ldr	r3, [r3, #12]
900072ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
900072f2:	687b      	ldr	r3, [r7, #4]
900072f4:	6a1b      	ldr	r3, [r3, #32]
900072f6:	061b      	lsls	r3, r3, #24
900072f8:	4962      	ldr	r1, [pc, #392]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900072fa:	4313      	orrs	r3, r2
900072fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900072fe:	e05f      	b.n	900073c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90007300:	687b      	ldr	r3, [r7, #4]
90007302:	69db      	ldr	r3, [r3, #28]
90007304:	2b00      	cmp	r3, #0
90007306:	d042      	beq.n	9000738e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90007308:	4b5e      	ldr	r3, [pc, #376]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
9000730a:	681b      	ldr	r3, [r3, #0]
9000730c:	4a5d      	ldr	r2, [pc, #372]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
9000730e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90007312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007314:	f7fb ff22 	bl	9000315c <HAL_GetTick>
90007318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000731a:	e008      	b.n	9000732e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000731c:	f7fb ff1e 	bl	9000315c <HAL_GetTick>
90007320:	4602      	mov	r2, r0
90007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007324:	1ad3      	subs	r3, r2, r3
90007326:	2b02      	cmp	r3, #2
90007328:	d901      	bls.n	9000732e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
9000732a:	2303      	movs	r3, #3
9000732c:	e280      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000732e:	4b55      	ldr	r3, [pc, #340]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007330:	681b      	ldr	r3, [r3, #0]
90007332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007336:	2b00      	cmp	r3, #0
90007338:	d0f0      	beq.n	9000731c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000733a:	f7fb ff1b 	bl	90003174 <HAL_GetREVID>
9000733e:	4603      	mov	r3, r0
90007340:	f241 0203 	movw	r2, #4099	@ 0x1003
90007344:	4293      	cmp	r3, r2
90007346:	d817      	bhi.n	90007378 <HAL_RCC_OscConfig+0x3ec>
90007348:	687b      	ldr	r3, [r7, #4]
9000734a:	6a1b      	ldr	r3, [r3, #32]
9000734c:	2b20      	cmp	r3, #32
9000734e:	d108      	bne.n	90007362 <HAL_RCC_OscConfig+0x3d6>
90007350:	4b4c      	ldr	r3, [pc, #304]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007352:	685b      	ldr	r3, [r3, #4]
90007354:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90007358:	4a4a      	ldr	r2, [pc, #296]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
9000735a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000735e:	6053      	str	r3, [r2, #4]
90007360:	e02e      	b.n	900073c0 <HAL_RCC_OscConfig+0x434>
90007362:	4b48      	ldr	r3, [pc, #288]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007364:	685b      	ldr	r3, [r3, #4]
90007366:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
9000736a:	687b      	ldr	r3, [r7, #4]
9000736c:	6a1b      	ldr	r3, [r3, #32]
9000736e:	069b      	lsls	r3, r3, #26
90007370:	4944      	ldr	r1, [pc, #272]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007372:	4313      	orrs	r3, r2
90007374:	604b      	str	r3, [r1, #4]
90007376:	e023      	b.n	900073c0 <HAL_RCC_OscConfig+0x434>
90007378:	4b42      	ldr	r3, [pc, #264]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
9000737a:	68db      	ldr	r3, [r3, #12]
9000737c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90007380:	687b      	ldr	r3, [r7, #4]
90007382:	6a1b      	ldr	r3, [r3, #32]
90007384:	061b      	lsls	r3, r3, #24
90007386:	493f      	ldr	r1, [pc, #252]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007388:	4313      	orrs	r3, r2
9000738a:	60cb      	str	r3, [r1, #12]
9000738c:	e018      	b.n	900073c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
9000738e:	4b3d      	ldr	r3, [pc, #244]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007390:	681b      	ldr	r3, [r3, #0]
90007392:	4a3c      	ldr	r2, [pc, #240]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90007398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000739a:	f7fb fedf 	bl	9000315c <HAL_GetTick>
9000739e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900073a0:	e008      	b.n	900073b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
900073a2:	f7fb fedb 	bl	9000315c <HAL_GetTick>
900073a6:	4602      	mov	r2, r0
900073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073aa:	1ad3      	subs	r3, r2, r3
900073ac:	2b02      	cmp	r3, #2
900073ae:	d901      	bls.n	900073b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
900073b0:	2303      	movs	r3, #3
900073b2:	e23d      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900073b4:	4b33      	ldr	r3, [pc, #204]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900073b6:	681b      	ldr	r3, [r3, #0]
900073b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900073bc:	2b00      	cmp	r3, #0
900073be:	d1f0      	bne.n	900073a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900073c0:	687b      	ldr	r3, [r7, #4]
900073c2:	681b      	ldr	r3, [r3, #0]
900073c4:	f003 0308 	and.w	r3, r3, #8
900073c8:	2b00      	cmp	r3, #0
900073ca:	d036      	beq.n	9000743a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
900073cc:	687b      	ldr	r3, [r7, #4]
900073ce:	695b      	ldr	r3, [r3, #20]
900073d0:	2b00      	cmp	r3, #0
900073d2:	d019      	beq.n	90007408 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
900073d4:	4b2b      	ldr	r3, [pc, #172]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900073d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900073d8:	4a2a      	ldr	r2, [pc, #168]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900073da:	f043 0301 	orr.w	r3, r3, #1
900073de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900073e0:	f7fb febc 	bl	9000315c <HAL_GetTick>
900073e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900073e6:	e008      	b.n	900073fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900073e8:	f7fb feb8 	bl	9000315c <HAL_GetTick>
900073ec:	4602      	mov	r2, r0
900073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073f0:	1ad3      	subs	r3, r2, r3
900073f2:	2b02      	cmp	r3, #2
900073f4:	d901      	bls.n	900073fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
900073f6:	2303      	movs	r3, #3
900073f8:	e21a      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900073fa:	4b22      	ldr	r3, [pc, #136]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
900073fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900073fe:	f003 0302 	and.w	r3, r3, #2
90007402:	2b00      	cmp	r3, #0
90007404:	d0f0      	beq.n	900073e8 <HAL_RCC_OscConfig+0x45c>
90007406:	e018      	b.n	9000743a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90007408:	4b1e      	ldr	r3, [pc, #120]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
9000740a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
9000740c:	4a1d      	ldr	r2, [pc, #116]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
9000740e:	f023 0301 	bic.w	r3, r3, #1
90007412:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007414:	f7fb fea2 	bl	9000315c <HAL_GetTick>
90007418:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000741a:	e008      	b.n	9000742e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000741c:	f7fb fe9e 	bl	9000315c <HAL_GetTick>
90007420:	4602      	mov	r2, r0
90007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007424:	1ad3      	subs	r3, r2, r3
90007426:	2b02      	cmp	r3, #2
90007428:	d901      	bls.n	9000742e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
9000742a:	2303      	movs	r3, #3
9000742c:	e200      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000742e:	4b15      	ldr	r3, [pc, #84]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007432:	f003 0302 	and.w	r3, r3, #2
90007436:	2b00      	cmp	r3, #0
90007438:	d1f0      	bne.n	9000741c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000743a:	687b      	ldr	r3, [r7, #4]
9000743c:	681b      	ldr	r3, [r3, #0]
9000743e:	f003 0320 	and.w	r3, r3, #32
90007442:	2b00      	cmp	r3, #0
90007444:	d039      	beq.n	900074ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90007446:	687b      	ldr	r3, [r7, #4]
90007448:	699b      	ldr	r3, [r3, #24]
9000744a:	2b00      	cmp	r3, #0
9000744c:	d01c      	beq.n	90007488 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
9000744e:	4b0d      	ldr	r3, [pc, #52]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007450:	681b      	ldr	r3, [r3, #0]
90007452:	4a0c      	ldr	r2, [pc, #48]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007454:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90007458:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000745a:	f7fb fe7f 	bl	9000315c <HAL_GetTick>
9000745e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007460:	e008      	b.n	90007474 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007462:	f7fb fe7b 	bl	9000315c <HAL_GetTick>
90007466:	4602      	mov	r2, r0
90007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000746a:	1ad3      	subs	r3, r2, r3
9000746c:	2b02      	cmp	r3, #2
9000746e:	d901      	bls.n	90007474 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007470:	2303      	movs	r3, #3
90007472:	e1dd      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007474:	4b03      	ldr	r3, [pc, #12]	@ (90007484 <HAL_RCC_OscConfig+0x4f8>)
90007476:	681b      	ldr	r3, [r3, #0]
90007478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000747c:	2b00      	cmp	r3, #0
9000747e:	d0f0      	beq.n	90007462 <HAL_RCC_OscConfig+0x4d6>
90007480:	e01b      	b.n	900074ba <HAL_RCC_OscConfig+0x52e>
90007482:	bf00      	nop
90007484:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007488:	4b9b      	ldr	r3, [pc, #620]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000748a:	681b      	ldr	r3, [r3, #0]
9000748c:	4a9a      	ldr	r2, [pc, #616]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000748e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90007492:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007494:	f7fb fe62 	bl	9000315c <HAL_GetTick>
90007498:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000749a:	e008      	b.n	900074ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000749c:	f7fb fe5e 	bl	9000315c <HAL_GetTick>
900074a0:	4602      	mov	r2, r0
900074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900074a4:	1ad3      	subs	r3, r2, r3
900074a6:	2b02      	cmp	r3, #2
900074a8:	d901      	bls.n	900074ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
900074aa:	2303      	movs	r3, #3
900074ac:	e1c0      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900074ae:	4b92      	ldr	r3, [pc, #584]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900074b0:	681b      	ldr	r3, [r3, #0]
900074b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900074b6:	2b00      	cmp	r3, #0
900074b8:	d1f0      	bne.n	9000749c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900074ba:	687b      	ldr	r3, [r7, #4]
900074bc:	681b      	ldr	r3, [r3, #0]
900074be:	f003 0304 	and.w	r3, r3, #4
900074c2:	2b00      	cmp	r3, #0
900074c4:	f000 8081 	beq.w	900075ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900074c8:	4b8c      	ldr	r3, [pc, #560]	@ (900076fc <HAL_RCC_OscConfig+0x770>)
900074ca:	681b      	ldr	r3, [r3, #0]
900074cc:	4a8b      	ldr	r2, [pc, #556]	@ (900076fc <HAL_RCC_OscConfig+0x770>)
900074ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900074d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900074d4:	f7fb fe42 	bl	9000315c <HAL_GetTick>
900074d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900074da:	e008      	b.n	900074ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900074dc:	f7fb fe3e 	bl	9000315c <HAL_GetTick>
900074e0:	4602      	mov	r2, r0
900074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900074e4:	1ad3      	subs	r3, r2, r3
900074e6:	2b64      	cmp	r3, #100	@ 0x64
900074e8:	d901      	bls.n	900074ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
900074ea:	2303      	movs	r3, #3
900074ec:	e1a0      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900074ee:	4b83      	ldr	r3, [pc, #524]	@ (900076fc <HAL_RCC_OscConfig+0x770>)
900074f0:	681b      	ldr	r3, [r3, #0]
900074f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900074f6:	2b00      	cmp	r3, #0
900074f8:	d0f0      	beq.n	900074dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900074fa:	687b      	ldr	r3, [r7, #4]
900074fc:	689b      	ldr	r3, [r3, #8]
900074fe:	2b01      	cmp	r3, #1
90007500:	d106      	bne.n	90007510 <HAL_RCC_OscConfig+0x584>
90007502:	4b7d      	ldr	r3, [pc, #500]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007506:	4a7c      	ldr	r2, [pc, #496]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007508:	f043 0301 	orr.w	r3, r3, #1
9000750c:	6713      	str	r3, [r2, #112]	@ 0x70
9000750e:	e02d      	b.n	9000756c <HAL_RCC_OscConfig+0x5e0>
90007510:	687b      	ldr	r3, [r7, #4]
90007512:	689b      	ldr	r3, [r3, #8]
90007514:	2b00      	cmp	r3, #0
90007516:	d10c      	bne.n	90007532 <HAL_RCC_OscConfig+0x5a6>
90007518:	4b77      	ldr	r3, [pc, #476]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000751a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000751c:	4a76      	ldr	r2, [pc, #472]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000751e:	f023 0301 	bic.w	r3, r3, #1
90007522:	6713      	str	r3, [r2, #112]	@ 0x70
90007524:	4b74      	ldr	r3, [pc, #464]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007528:	4a73      	ldr	r2, [pc, #460]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000752a:	f023 0304 	bic.w	r3, r3, #4
9000752e:	6713      	str	r3, [r2, #112]	@ 0x70
90007530:	e01c      	b.n	9000756c <HAL_RCC_OscConfig+0x5e0>
90007532:	687b      	ldr	r3, [r7, #4]
90007534:	689b      	ldr	r3, [r3, #8]
90007536:	2b05      	cmp	r3, #5
90007538:	d10c      	bne.n	90007554 <HAL_RCC_OscConfig+0x5c8>
9000753a:	4b6f      	ldr	r3, [pc, #444]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000753c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000753e:	4a6e      	ldr	r2, [pc, #440]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007540:	f043 0304 	orr.w	r3, r3, #4
90007544:	6713      	str	r3, [r2, #112]	@ 0x70
90007546:	4b6c      	ldr	r3, [pc, #432]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000754a:	4a6b      	ldr	r2, [pc, #428]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000754c:	f043 0301 	orr.w	r3, r3, #1
90007550:	6713      	str	r3, [r2, #112]	@ 0x70
90007552:	e00b      	b.n	9000756c <HAL_RCC_OscConfig+0x5e0>
90007554:	4b68      	ldr	r3, [pc, #416]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007558:	4a67      	ldr	r2, [pc, #412]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000755a:	f023 0301 	bic.w	r3, r3, #1
9000755e:	6713      	str	r3, [r2, #112]	@ 0x70
90007560:	4b65      	ldr	r3, [pc, #404]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007564:	4a64      	ldr	r2, [pc, #400]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007566:	f023 0304 	bic.w	r3, r3, #4
9000756a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000756c:	687b      	ldr	r3, [r7, #4]
9000756e:	689b      	ldr	r3, [r3, #8]
90007570:	2b00      	cmp	r3, #0
90007572:	d015      	beq.n	900075a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007574:	f7fb fdf2 	bl	9000315c <HAL_GetTick>
90007578:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000757a:	e00a      	b.n	90007592 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000757c:	f7fb fdee 	bl	9000315c <HAL_GetTick>
90007580:	4602      	mov	r2, r0
90007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007584:	1ad3      	subs	r3, r2, r3
90007586:	f241 3288 	movw	r2, #5000	@ 0x1388
9000758a:	4293      	cmp	r3, r2
9000758c:	d901      	bls.n	90007592 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
9000758e:	2303      	movs	r3, #3
90007590:	e14e      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007592:	4b59      	ldr	r3, [pc, #356]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007596:	f003 0302 	and.w	r3, r3, #2
9000759a:	2b00      	cmp	r3, #0
9000759c:	d0ee      	beq.n	9000757c <HAL_RCC_OscConfig+0x5f0>
9000759e:	e014      	b.n	900075ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900075a0:	f7fb fddc 	bl	9000315c <HAL_GetTick>
900075a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900075a6:	e00a      	b.n	900075be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900075a8:	f7fb fdd8 	bl	9000315c <HAL_GetTick>
900075ac:	4602      	mov	r2, r0
900075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900075b0:	1ad3      	subs	r3, r2, r3
900075b2:	f241 3288 	movw	r2, #5000	@ 0x1388
900075b6:	4293      	cmp	r3, r2
900075b8:	d901      	bls.n	900075be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
900075ba:	2303      	movs	r3, #3
900075bc:	e138      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900075be:	4b4e      	ldr	r3, [pc, #312]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900075c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900075c2:	f003 0302 	and.w	r3, r3, #2
900075c6:	2b00      	cmp	r3, #0
900075c8:	d1ee      	bne.n	900075a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900075ca:	687b      	ldr	r3, [r7, #4]
900075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900075ce:	2b00      	cmp	r3, #0
900075d0:	f000 812d 	beq.w	9000782e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
900075d4:	4b48      	ldr	r3, [pc, #288]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900075d6:	691b      	ldr	r3, [r3, #16]
900075d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
900075dc:	2b18      	cmp	r3, #24
900075de:	f000 80bd 	beq.w	9000775c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900075e2:	687b      	ldr	r3, [r7, #4]
900075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900075e6:	2b02      	cmp	r3, #2
900075e8:	f040 809e 	bne.w	90007728 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900075ec:	4b42      	ldr	r3, [pc, #264]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900075ee:	681b      	ldr	r3, [r3, #0]
900075f0:	4a41      	ldr	r2, [pc, #260]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900075f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900075f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900075f8:	f7fb fdb0 	bl	9000315c <HAL_GetTick>
900075fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900075fe:	e008      	b.n	90007612 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007600:	f7fb fdac 	bl	9000315c <HAL_GetTick>
90007604:	4602      	mov	r2, r0
90007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007608:	1ad3      	subs	r3, r2, r3
9000760a:	2b02      	cmp	r3, #2
9000760c:	d901      	bls.n	90007612 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
9000760e:	2303      	movs	r3, #3
90007610:	e10e      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007612:	4b39      	ldr	r3, [pc, #228]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007614:	681b      	ldr	r3, [r3, #0]
90007616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000761a:	2b00      	cmp	r3, #0
9000761c:	d1f0      	bne.n	90007600 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000761e:	4b36      	ldr	r3, [pc, #216]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007620:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
90007622:	4b37      	ldr	r3, [pc, #220]	@ (90007700 <HAL_RCC_OscConfig+0x774>)
90007624:	4013      	ands	r3, r2
90007626:	687a      	ldr	r2, [r7, #4]
90007628:	6a91      	ldr	r1, [r2, #40]	@ 0x28
9000762a:	687a      	ldr	r2, [r7, #4]
9000762c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
9000762e:	0112      	lsls	r2, r2, #4
90007630:	430a      	orrs	r2, r1
90007632:	4931      	ldr	r1, [pc, #196]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007634:	4313      	orrs	r3, r2
90007636:	628b      	str	r3, [r1, #40]	@ 0x28
90007638:	687b      	ldr	r3, [r7, #4]
9000763a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000763c:	3b01      	subs	r3, #1
9000763e:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007642:	687b      	ldr	r3, [r7, #4]
90007644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007646:	3b01      	subs	r3, #1
90007648:	025b      	lsls	r3, r3, #9
9000764a:	b29b      	uxth	r3, r3
9000764c:	431a      	orrs	r2, r3
9000764e:	687b      	ldr	r3, [r7, #4]
90007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007652:	3b01      	subs	r3, #1
90007654:	041b      	lsls	r3, r3, #16
90007656:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000765a:	431a      	orrs	r2, r3
9000765c:	687b      	ldr	r3, [r7, #4]
9000765e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007660:	3b01      	subs	r3, #1
90007662:	061b      	lsls	r3, r3, #24
90007664:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007668:	4923      	ldr	r1, [pc, #140]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000766a:	4313      	orrs	r3, r2
9000766c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
9000766e:	4b22      	ldr	r3, [pc, #136]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007672:	4a21      	ldr	r2, [pc, #132]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007674:	f023 0301 	bic.w	r3, r3, #1
90007678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000767a:	4b1f      	ldr	r3, [pc, #124]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000767c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000767e:	4b21      	ldr	r3, [pc, #132]	@ (90007704 <HAL_RCC_OscConfig+0x778>)
90007680:	4013      	ands	r3, r2
90007682:	687a      	ldr	r2, [r7, #4]
90007684:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007686:	00d2      	lsls	r2, r2, #3
90007688:	491b      	ldr	r1, [pc, #108]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000768a:	4313      	orrs	r3, r2
9000768c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000768e:	4b1a      	ldr	r3, [pc, #104]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
90007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007692:	f023 020c 	bic.w	r2, r3, #12
90007696:	687b      	ldr	r3, [r7, #4]
90007698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000769a:	4917      	ldr	r1, [pc, #92]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
9000769c:	4313      	orrs	r3, r2
9000769e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
900076a0:	4b15      	ldr	r3, [pc, #84]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076a4:	f023 0202 	bic.w	r2, r3, #2
900076a8:	687b      	ldr	r3, [r7, #4]
900076aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900076ac:	4912      	ldr	r1, [pc, #72]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076ae:	4313      	orrs	r3, r2
900076b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
900076b2:	4b11      	ldr	r3, [pc, #68]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076b6:	4a10      	ldr	r2, [pc, #64]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900076bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900076be:	4b0e      	ldr	r3, [pc, #56]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076c2:	4a0d      	ldr	r2, [pc, #52]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900076c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
900076ca:	4b0b      	ldr	r3, [pc, #44]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076ce:	4a0a      	ldr	r2, [pc, #40]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
900076d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
900076d6:	4b08      	ldr	r3, [pc, #32]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900076da:	4a07      	ldr	r2, [pc, #28]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076dc:	f043 0301 	orr.w	r3, r3, #1
900076e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
900076e2:	4b05      	ldr	r3, [pc, #20]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076e4:	681b      	ldr	r3, [r3, #0]
900076e6:	4a04      	ldr	r2, [pc, #16]	@ (900076f8 <HAL_RCC_OscConfig+0x76c>)
900076e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
900076ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900076ee:	f7fb fd35 	bl	9000315c <HAL_GetTick>
900076f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900076f4:	e011      	b.n	9000771a <HAL_RCC_OscConfig+0x78e>
900076f6:	bf00      	nop
900076f8:	58024400 	.word	0x58024400
900076fc:	58024800 	.word	0x58024800
90007700:	fffffc0c 	.word	0xfffffc0c
90007704:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007708:	f7fb fd28 	bl	9000315c <HAL_GetTick>
9000770c:	4602      	mov	r2, r0
9000770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007710:	1ad3      	subs	r3, r2, r3
90007712:	2b02      	cmp	r3, #2
90007714:	d901      	bls.n	9000771a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90007716:	2303      	movs	r3, #3
90007718:	e08a      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000771a:	4b47      	ldr	r3, [pc, #284]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
9000771c:	681b      	ldr	r3, [r3, #0]
9000771e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007722:	2b00      	cmp	r3, #0
90007724:	d0f0      	beq.n	90007708 <HAL_RCC_OscConfig+0x77c>
90007726:	e082      	b.n	9000782e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007728:	4b43      	ldr	r3, [pc, #268]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
9000772a:	681b      	ldr	r3, [r3, #0]
9000772c:	4a42      	ldr	r2, [pc, #264]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
9000772e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007734:	f7fb fd12 	bl	9000315c <HAL_GetTick>
90007738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000773a:	e008      	b.n	9000774e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000773c:	f7fb fd0e 	bl	9000315c <HAL_GetTick>
90007740:	4602      	mov	r2, r0
90007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007744:	1ad3      	subs	r3, r2, r3
90007746:	2b02      	cmp	r3, #2
90007748:	d901      	bls.n	9000774e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
9000774a:	2303      	movs	r3, #3
9000774c:	e070      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000774e:	4b3a      	ldr	r3, [pc, #232]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
90007750:	681b      	ldr	r3, [r3, #0]
90007752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007756:	2b00      	cmp	r3, #0
90007758:	d1f0      	bne.n	9000773c <HAL_RCC_OscConfig+0x7b0>
9000775a:	e068      	b.n	9000782e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
9000775c:	4b36      	ldr	r3, [pc, #216]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
9000775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007760:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90007762:	4b35      	ldr	r3, [pc, #212]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
90007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007766:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007768:	687b      	ldr	r3, [r7, #4]
9000776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000776c:	2b01      	cmp	r3, #1
9000776e:	d031      	beq.n	900077d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007770:	693b      	ldr	r3, [r7, #16]
90007772:	f003 0203 	and.w	r2, r3, #3
90007776:	687b      	ldr	r3, [r7, #4]
90007778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000777a:	429a      	cmp	r2, r3
9000777c:	d12a      	bne.n	900077d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000777e:	693b      	ldr	r3, [r7, #16]
90007780:	091b      	lsrs	r3, r3, #4
90007782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90007786:	687b      	ldr	r3, [r7, #4]
90007788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000778a:	429a      	cmp	r2, r3
9000778c:	d122      	bne.n	900077d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000778e:	68fb      	ldr	r3, [r7, #12]
90007790:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007794:	687b      	ldr	r3, [r7, #4]
90007796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007798:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000779a:	429a      	cmp	r2, r3
9000779c:	d11a      	bne.n	900077d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000779e:	68fb      	ldr	r3, [r7, #12]
900077a0:	0a5b      	lsrs	r3, r3, #9
900077a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900077a6:	687b      	ldr	r3, [r7, #4]
900077a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900077aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900077ac:	429a      	cmp	r2, r3
900077ae:	d111      	bne.n	900077d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900077b0:	68fb      	ldr	r3, [r7, #12]
900077b2:	0c1b      	lsrs	r3, r3, #16
900077b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900077b8:	687b      	ldr	r3, [r7, #4]
900077ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900077bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900077be:	429a      	cmp	r2, r3
900077c0:	d108      	bne.n	900077d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
900077c2:	68fb      	ldr	r3, [r7, #12]
900077c4:	0e1b      	lsrs	r3, r3, #24
900077c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
900077ca:	687b      	ldr	r3, [r7, #4]
900077cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
900077ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900077d0:	429a      	cmp	r2, r3
900077d2:	d001      	beq.n	900077d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
900077d4:	2301      	movs	r3, #1
900077d6:	e02b      	b.n	90007830 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
900077d8:	4b17      	ldr	r3, [pc, #92]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
900077da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900077dc:	08db      	lsrs	r3, r3, #3
900077de:	f3c3 030c 	ubfx	r3, r3, #0, #13
900077e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
900077e4:	687b      	ldr	r3, [r7, #4]
900077e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900077e8:	693a      	ldr	r2, [r7, #16]
900077ea:	429a      	cmp	r2, r3
900077ec:	d01f      	beq.n	9000782e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
900077ee:	4b12      	ldr	r3, [pc, #72]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
900077f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900077f2:	4a11      	ldr	r2, [pc, #68]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
900077f4:	f023 0301 	bic.w	r3, r3, #1
900077f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
900077fa:	f7fb fcaf 	bl	9000315c <HAL_GetTick>
900077fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007800:	bf00      	nop
90007802:	f7fb fcab 	bl	9000315c <HAL_GetTick>
90007806:	4602      	mov	r2, r0
90007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000780a:	4293      	cmp	r3, r2
9000780c:	d0f9      	beq.n	90007802 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000780e:	4b0a      	ldr	r3, [pc, #40]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
90007810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90007812:	4b0a      	ldr	r3, [pc, #40]	@ (9000783c <HAL_RCC_OscConfig+0x8b0>)
90007814:	4013      	ands	r3, r2
90007816:	687a      	ldr	r2, [r7, #4]
90007818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
9000781a:	00d2      	lsls	r2, r2, #3
9000781c:	4906      	ldr	r1, [pc, #24]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
9000781e:	4313      	orrs	r3, r2
90007820:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90007822:	4b05      	ldr	r3, [pc, #20]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
90007824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007826:	4a04      	ldr	r2, [pc, #16]	@ (90007838 <HAL_RCC_OscConfig+0x8ac>)
90007828:	f043 0301 	orr.w	r3, r3, #1
9000782c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
9000782e:	2300      	movs	r3, #0
}
90007830:	4618      	mov	r0, r3
90007832:	3730      	adds	r7, #48	@ 0x30
90007834:	46bd      	mov	sp, r7
90007836:	bd80      	pop	{r7, pc}
90007838:	58024400 	.word	0x58024400
9000783c:	ffff0007 	.word	0xffff0007

90007840 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90007840:	b580      	push	{r7, lr}
90007842:	b086      	sub	sp, #24
90007844:	af00      	add	r7, sp, #0
90007846:	6078      	str	r0, [r7, #4]
90007848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
9000784a:	687b      	ldr	r3, [r7, #4]
9000784c:	2b00      	cmp	r3, #0
9000784e:	d101      	bne.n	90007854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90007850:	2301      	movs	r3, #1
90007852:	e19c      	b.n	90007b8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90007854:	4b8a      	ldr	r3, [pc, #552]	@ (90007a80 <HAL_RCC_ClockConfig+0x240>)
90007856:	681b      	ldr	r3, [r3, #0]
90007858:	f003 030f 	and.w	r3, r3, #15
9000785c:	683a      	ldr	r2, [r7, #0]
9000785e:	429a      	cmp	r2, r3
90007860:	d910      	bls.n	90007884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007862:	4b87      	ldr	r3, [pc, #540]	@ (90007a80 <HAL_RCC_ClockConfig+0x240>)
90007864:	681b      	ldr	r3, [r3, #0]
90007866:	f023 020f 	bic.w	r2, r3, #15
9000786a:	4985      	ldr	r1, [pc, #532]	@ (90007a80 <HAL_RCC_ClockConfig+0x240>)
9000786c:	683b      	ldr	r3, [r7, #0]
9000786e:	4313      	orrs	r3, r2
90007870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007872:	4b83      	ldr	r3, [pc, #524]	@ (90007a80 <HAL_RCC_ClockConfig+0x240>)
90007874:	681b      	ldr	r3, [r3, #0]
90007876:	f003 030f 	and.w	r3, r3, #15
9000787a:	683a      	ldr	r2, [r7, #0]
9000787c:	429a      	cmp	r2, r3
9000787e:	d001      	beq.n	90007884 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007880:	2301      	movs	r3, #1
90007882:	e184      	b.n	90007b8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007884:	687b      	ldr	r3, [r7, #4]
90007886:	681b      	ldr	r3, [r3, #0]
90007888:	f003 0304 	and.w	r3, r3, #4
9000788c:	2b00      	cmp	r3, #0
9000788e:	d010      	beq.n	900078b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007890:	687b      	ldr	r3, [r7, #4]
90007892:	691a      	ldr	r2, [r3, #16]
90007894:	4b7b      	ldr	r3, [pc, #492]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007896:	699b      	ldr	r3, [r3, #24]
90007898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000789c:	429a      	cmp	r2, r3
9000789e:	d908      	bls.n	900078b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
900078a0:	4b78      	ldr	r3, [pc, #480]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900078a2:	699b      	ldr	r3, [r3, #24]
900078a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900078a8:	687b      	ldr	r3, [r7, #4]
900078aa:	691b      	ldr	r3, [r3, #16]
900078ac:	4975      	ldr	r1, [pc, #468]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900078ae:	4313      	orrs	r3, r2
900078b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900078b2:	687b      	ldr	r3, [r7, #4]
900078b4:	681b      	ldr	r3, [r3, #0]
900078b6:	f003 0308 	and.w	r3, r3, #8
900078ba:	2b00      	cmp	r3, #0
900078bc:	d010      	beq.n	900078e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900078be:	687b      	ldr	r3, [r7, #4]
900078c0:	695a      	ldr	r2, [r3, #20]
900078c2:	4b70      	ldr	r3, [pc, #448]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900078c4:	69db      	ldr	r3, [r3, #28]
900078c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900078ca:	429a      	cmp	r2, r3
900078cc:	d908      	bls.n	900078e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900078ce:	4b6d      	ldr	r3, [pc, #436]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900078d0:	69db      	ldr	r3, [r3, #28]
900078d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900078d6:	687b      	ldr	r3, [r7, #4]
900078d8:	695b      	ldr	r3, [r3, #20]
900078da:	496a      	ldr	r1, [pc, #424]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900078dc:	4313      	orrs	r3, r2
900078de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900078e0:	687b      	ldr	r3, [r7, #4]
900078e2:	681b      	ldr	r3, [r3, #0]
900078e4:	f003 0310 	and.w	r3, r3, #16
900078e8:	2b00      	cmp	r3, #0
900078ea:	d010      	beq.n	9000790e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900078ec:	687b      	ldr	r3, [r7, #4]
900078ee:	699a      	ldr	r2, [r3, #24]
900078f0:	4b64      	ldr	r3, [pc, #400]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900078f2:	69db      	ldr	r3, [r3, #28]
900078f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900078f8:	429a      	cmp	r2, r3
900078fa:	d908      	bls.n	9000790e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900078fc:	4b61      	ldr	r3, [pc, #388]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900078fe:	69db      	ldr	r3, [r3, #28]
90007900:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90007904:	687b      	ldr	r3, [r7, #4]
90007906:	699b      	ldr	r3, [r3, #24]
90007908:	495e      	ldr	r1, [pc, #376]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
9000790a:	4313      	orrs	r3, r2
9000790c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000790e:	687b      	ldr	r3, [r7, #4]
90007910:	681b      	ldr	r3, [r3, #0]
90007912:	f003 0320 	and.w	r3, r3, #32
90007916:	2b00      	cmp	r3, #0
90007918:	d010      	beq.n	9000793c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000791a:	687b      	ldr	r3, [r7, #4]
9000791c:	69da      	ldr	r2, [r3, #28]
9000791e:	4b59      	ldr	r3, [pc, #356]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007920:	6a1b      	ldr	r3, [r3, #32]
90007922:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007926:	429a      	cmp	r2, r3
90007928:	d908      	bls.n	9000793c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000792a:	4b56      	ldr	r3, [pc, #344]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
9000792c:	6a1b      	ldr	r3, [r3, #32]
9000792e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007932:	687b      	ldr	r3, [r7, #4]
90007934:	69db      	ldr	r3, [r3, #28]
90007936:	4953      	ldr	r1, [pc, #332]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007938:	4313      	orrs	r3, r2
9000793a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000793c:	687b      	ldr	r3, [r7, #4]
9000793e:	681b      	ldr	r3, [r3, #0]
90007940:	f003 0302 	and.w	r3, r3, #2
90007944:	2b00      	cmp	r3, #0
90007946:	d010      	beq.n	9000796a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90007948:	687b      	ldr	r3, [r7, #4]
9000794a:	68da      	ldr	r2, [r3, #12]
9000794c:	4b4d      	ldr	r3, [pc, #308]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
9000794e:	699b      	ldr	r3, [r3, #24]
90007950:	f003 030f 	and.w	r3, r3, #15
90007954:	429a      	cmp	r2, r3
90007956:	d908      	bls.n	9000796a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007958:	4b4a      	ldr	r3, [pc, #296]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
9000795a:	699b      	ldr	r3, [r3, #24]
9000795c:	f023 020f 	bic.w	r2, r3, #15
90007960:	687b      	ldr	r3, [r7, #4]
90007962:	68db      	ldr	r3, [r3, #12]
90007964:	4947      	ldr	r1, [pc, #284]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007966:	4313      	orrs	r3, r2
90007968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000796a:	687b      	ldr	r3, [r7, #4]
9000796c:	681b      	ldr	r3, [r3, #0]
9000796e:	f003 0301 	and.w	r3, r3, #1
90007972:	2b00      	cmp	r3, #0
90007974:	d055      	beq.n	90007a22 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90007976:	4b43      	ldr	r3, [pc, #268]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007978:	699b      	ldr	r3, [r3, #24]
9000797a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
9000797e:	687b      	ldr	r3, [r7, #4]
90007980:	689b      	ldr	r3, [r3, #8]
90007982:	4940      	ldr	r1, [pc, #256]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007984:	4313      	orrs	r3, r2
90007986:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007988:	687b      	ldr	r3, [r7, #4]
9000798a:	685b      	ldr	r3, [r3, #4]
9000798c:	2b02      	cmp	r3, #2
9000798e:	d107      	bne.n	900079a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007990:	4b3c      	ldr	r3, [pc, #240]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007992:	681b      	ldr	r3, [r3, #0]
90007994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90007998:	2b00      	cmp	r3, #0
9000799a:	d121      	bne.n	900079e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000799c:	2301      	movs	r3, #1
9000799e:	e0f6      	b.n	90007b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
900079a0:	687b      	ldr	r3, [r7, #4]
900079a2:	685b      	ldr	r3, [r3, #4]
900079a4:	2b03      	cmp	r3, #3
900079a6:	d107      	bne.n	900079b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900079a8:	4b36      	ldr	r3, [pc, #216]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900079aa:	681b      	ldr	r3, [r3, #0]
900079ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900079b0:	2b00      	cmp	r3, #0
900079b2:	d115      	bne.n	900079e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900079b4:	2301      	movs	r3, #1
900079b6:	e0ea      	b.n	90007b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
900079b8:	687b      	ldr	r3, [r7, #4]
900079ba:	685b      	ldr	r3, [r3, #4]
900079bc:	2b01      	cmp	r3, #1
900079be:	d107      	bne.n	900079d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
900079c0:	4b30      	ldr	r3, [pc, #192]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900079c2:	681b      	ldr	r3, [r3, #0]
900079c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900079c8:	2b00      	cmp	r3, #0
900079ca:	d109      	bne.n	900079e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900079cc:	2301      	movs	r3, #1
900079ce:	e0de      	b.n	90007b8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900079d0:	4b2c      	ldr	r3, [pc, #176]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900079d2:	681b      	ldr	r3, [r3, #0]
900079d4:	f003 0304 	and.w	r3, r3, #4
900079d8:	2b00      	cmp	r3, #0
900079da:	d101      	bne.n	900079e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
900079dc:	2301      	movs	r3, #1
900079de:	e0d6      	b.n	90007b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
900079e0:	4b28      	ldr	r3, [pc, #160]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900079e2:	691b      	ldr	r3, [r3, #16]
900079e4:	f023 0207 	bic.w	r2, r3, #7
900079e8:	687b      	ldr	r3, [r7, #4]
900079ea:	685b      	ldr	r3, [r3, #4]
900079ec:	4925      	ldr	r1, [pc, #148]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
900079ee:	4313      	orrs	r3, r2
900079f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900079f2:	f7fb fbb3 	bl	9000315c <HAL_GetTick>
900079f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900079f8:	e00a      	b.n	90007a10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900079fa:	f7fb fbaf 	bl	9000315c <HAL_GetTick>
900079fe:	4602      	mov	r2, r0
90007a00:	697b      	ldr	r3, [r7, #20]
90007a02:	1ad3      	subs	r3, r2, r3
90007a04:	f241 3288 	movw	r2, #5000	@ 0x1388
90007a08:	4293      	cmp	r3, r2
90007a0a:	d901      	bls.n	90007a10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90007a0c:	2303      	movs	r3, #3
90007a0e:	e0be      	b.n	90007b8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007a10:	4b1c      	ldr	r3, [pc, #112]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007a12:	691b      	ldr	r3, [r3, #16]
90007a14:	f003 0238 	and.w	r2, r3, #56	@ 0x38
90007a18:	687b      	ldr	r3, [r7, #4]
90007a1a:	685b      	ldr	r3, [r3, #4]
90007a1c:	00db      	lsls	r3, r3, #3
90007a1e:	429a      	cmp	r2, r3
90007a20:	d1eb      	bne.n	900079fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90007a22:	687b      	ldr	r3, [r7, #4]
90007a24:	681b      	ldr	r3, [r3, #0]
90007a26:	f003 0302 	and.w	r3, r3, #2
90007a2a:	2b00      	cmp	r3, #0
90007a2c:	d010      	beq.n	90007a50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90007a2e:	687b      	ldr	r3, [r7, #4]
90007a30:	68da      	ldr	r2, [r3, #12]
90007a32:	4b14      	ldr	r3, [pc, #80]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007a34:	699b      	ldr	r3, [r3, #24]
90007a36:	f003 030f 	and.w	r3, r3, #15
90007a3a:	429a      	cmp	r2, r3
90007a3c:	d208      	bcs.n	90007a50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007a3e:	4b11      	ldr	r3, [pc, #68]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007a40:	699b      	ldr	r3, [r3, #24]
90007a42:	f023 020f 	bic.w	r2, r3, #15
90007a46:	687b      	ldr	r3, [r7, #4]
90007a48:	68db      	ldr	r3, [r3, #12]
90007a4a:	490e      	ldr	r1, [pc, #56]	@ (90007a84 <HAL_RCC_ClockConfig+0x244>)
90007a4c:	4313      	orrs	r3, r2
90007a4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90007a50:	4b0b      	ldr	r3, [pc, #44]	@ (90007a80 <HAL_RCC_ClockConfig+0x240>)
90007a52:	681b      	ldr	r3, [r3, #0]
90007a54:	f003 030f 	and.w	r3, r3, #15
90007a58:	683a      	ldr	r2, [r7, #0]
90007a5a:	429a      	cmp	r2, r3
90007a5c:	d214      	bcs.n	90007a88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007a5e:	4b08      	ldr	r3, [pc, #32]	@ (90007a80 <HAL_RCC_ClockConfig+0x240>)
90007a60:	681b      	ldr	r3, [r3, #0]
90007a62:	f023 020f 	bic.w	r2, r3, #15
90007a66:	4906      	ldr	r1, [pc, #24]	@ (90007a80 <HAL_RCC_ClockConfig+0x240>)
90007a68:	683b      	ldr	r3, [r7, #0]
90007a6a:	4313      	orrs	r3, r2
90007a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007a6e:	4b04      	ldr	r3, [pc, #16]	@ (90007a80 <HAL_RCC_ClockConfig+0x240>)
90007a70:	681b      	ldr	r3, [r3, #0]
90007a72:	f003 030f 	and.w	r3, r3, #15
90007a76:	683a      	ldr	r2, [r7, #0]
90007a78:	429a      	cmp	r2, r3
90007a7a:	d005      	beq.n	90007a88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007a7c:	2301      	movs	r3, #1
90007a7e:	e086      	b.n	90007b8e <HAL_RCC_ClockConfig+0x34e>
90007a80:	52002000 	.word	0x52002000
90007a84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007a88:	687b      	ldr	r3, [r7, #4]
90007a8a:	681b      	ldr	r3, [r3, #0]
90007a8c:	f003 0304 	and.w	r3, r3, #4
90007a90:	2b00      	cmp	r3, #0
90007a92:	d010      	beq.n	90007ab6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007a94:	687b      	ldr	r3, [r7, #4]
90007a96:	691a      	ldr	r2, [r3, #16]
90007a98:	4b3f      	ldr	r3, [pc, #252]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007a9a:	699b      	ldr	r3, [r3, #24]
90007a9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007aa0:	429a      	cmp	r2, r3
90007aa2:	d208      	bcs.n	90007ab6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007aa4:	4b3c      	ldr	r3, [pc, #240]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007aa6:	699b      	ldr	r3, [r3, #24]
90007aa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007aac:	687b      	ldr	r3, [r7, #4]
90007aae:	691b      	ldr	r3, [r3, #16]
90007ab0:	4939      	ldr	r1, [pc, #228]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007ab2:	4313      	orrs	r3, r2
90007ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007ab6:	687b      	ldr	r3, [r7, #4]
90007ab8:	681b      	ldr	r3, [r3, #0]
90007aba:	f003 0308 	and.w	r3, r3, #8
90007abe:	2b00      	cmp	r3, #0
90007ac0:	d010      	beq.n	90007ae4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007ac2:	687b      	ldr	r3, [r7, #4]
90007ac4:	695a      	ldr	r2, [r3, #20]
90007ac6:	4b34      	ldr	r3, [pc, #208]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007ac8:	69db      	ldr	r3, [r3, #28]
90007aca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007ace:	429a      	cmp	r2, r3
90007ad0:	d208      	bcs.n	90007ae4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007ad2:	4b31      	ldr	r3, [pc, #196]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007ad4:	69db      	ldr	r3, [r3, #28]
90007ad6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007ada:	687b      	ldr	r3, [r7, #4]
90007adc:	695b      	ldr	r3, [r3, #20]
90007ade:	492e      	ldr	r1, [pc, #184]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007ae0:	4313      	orrs	r3, r2
90007ae2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007ae4:	687b      	ldr	r3, [r7, #4]
90007ae6:	681b      	ldr	r3, [r3, #0]
90007ae8:	f003 0310 	and.w	r3, r3, #16
90007aec:	2b00      	cmp	r3, #0
90007aee:	d010      	beq.n	90007b12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007af0:	687b      	ldr	r3, [r7, #4]
90007af2:	699a      	ldr	r2, [r3, #24]
90007af4:	4b28      	ldr	r3, [pc, #160]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007af6:	69db      	ldr	r3, [r3, #28]
90007af8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007afc:	429a      	cmp	r2, r3
90007afe:	d208      	bcs.n	90007b12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007b00:	4b25      	ldr	r3, [pc, #148]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007b02:	69db      	ldr	r3, [r3, #28]
90007b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
90007b08:	687b      	ldr	r3, [r7, #4]
90007b0a:	699b      	ldr	r3, [r3, #24]
90007b0c:	4922      	ldr	r1, [pc, #136]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007b0e:	4313      	orrs	r3, r2
90007b10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007b12:	687b      	ldr	r3, [r7, #4]
90007b14:	681b      	ldr	r3, [r3, #0]
90007b16:	f003 0320 	and.w	r3, r3, #32
90007b1a:	2b00      	cmp	r3, #0
90007b1c:	d010      	beq.n	90007b40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90007b1e:	687b      	ldr	r3, [r7, #4]
90007b20:	69da      	ldr	r2, [r3, #28]
90007b22:	4b1d      	ldr	r3, [pc, #116]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007b24:	6a1b      	ldr	r3, [r3, #32]
90007b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007b2a:	429a      	cmp	r2, r3
90007b2c:	d208      	bcs.n	90007b40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90007b2e:	4b1a      	ldr	r3, [pc, #104]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007b30:	6a1b      	ldr	r3, [r3, #32]
90007b32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007b36:	687b      	ldr	r3, [r7, #4]
90007b38:	69db      	ldr	r3, [r3, #28]
90007b3a:	4917      	ldr	r1, [pc, #92]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007b3c:	4313      	orrs	r3, r2
90007b3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007b40:	f000 f834 	bl	90007bac <HAL_RCC_GetSysClockFreq>
90007b44:	4602      	mov	r2, r0
90007b46:	4b14      	ldr	r3, [pc, #80]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007b48:	699b      	ldr	r3, [r3, #24]
90007b4a:	0a1b      	lsrs	r3, r3, #8
90007b4c:	f003 030f 	and.w	r3, r3, #15
90007b50:	4912      	ldr	r1, [pc, #72]	@ (90007b9c <HAL_RCC_ClockConfig+0x35c>)
90007b52:	5ccb      	ldrb	r3, [r1, r3]
90007b54:	f003 031f 	and.w	r3, r3, #31
90007b58:	fa22 f303 	lsr.w	r3, r2, r3
90007b5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007b5e:	4b0e      	ldr	r3, [pc, #56]	@ (90007b98 <HAL_RCC_ClockConfig+0x358>)
90007b60:	699b      	ldr	r3, [r3, #24]
90007b62:	f003 030f 	and.w	r3, r3, #15
90007b66:	4a0d      	ldr	r2, [pc, #52]	@ (90007b9c <HAL_RCC_ClockConfig+0x35c>)
90007b68:	5cd3      	ldrb	r3, [r2, r3]
90007b6a:	f003 031f 	and.w	r3, r3, #31
90007b6e:	693a      	ldr	r2, [r7, #16]
90007b70:	fa22 f303 	lsr.w	r3, r2, r3
90007b74:	4a0a      	ldr	r2, [pc, #40]	@ (90007ba0 <HAL_RCC_ClockConfig+0x360>)
90007b76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007b78:	4a0a      	ldr	r2, [pc, #40]	@ (90007ba4 <HAL_RCC_ClockConfig+0x364>)
90007b7a:	693b      	ldr	r3, [r7, #16]
90007b7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007b7e:	4b0a      	ldr	r3, [pc, #40]	@ (90007ba8 <HAL_RCC_ClockConfig+0x368>)
90007b80:	681b      	ldr	r3, [r3, #0]
90007b82:	4618      	mov	r0, r3
90007b84:	f7fb faa0 	bl	900030c8 <HAL_InitTick>
90007b88:	4603      	mov	r3, r0
90007b8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007b8c:	7bfb      	ldrb	r3, [r7, #15]
}
90007b8e:	4618      	mov	r0, r3
90007b90:	3718      	adds	r7, #24
90007b92:	46bd      	mov	sp, r7
90007b94:	bd80      	pop	{r7, pc}
90007b96:	bf00      	nop
90007b98:	58024400 	.word	0x58024400
90007b9c:	9000ab8c 	.word	0x9000ab8c
90007ba0:	2000003c 	.word	0x2000003c
90007ba4:	20000038 	.word	0x20000038
90007ba8:	20000040 	.word	0x20000040

90007bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007bac:	b480      	push	{r7}
90007bae:	b089      	sub	sp, #36	@ 0x24
90007bb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90007bb2:	4bb3      	ldr	r3, [pc, #716]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007bb4:	691b      	ldr	r3, [r3, #16]
90007bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007bba:	2b18      	cmp	r3, #24
90007bbc:	f200 8155 	bhi.w	90007e6a <HAL_RCC_GetSysClockFreq+0x2be>
90007bc0:	a201      	add	r2, pc, #4	@ (adr r2, 90007bc8 <HAL_RCC_GetSysClockFreq+0x1c>)
90007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007bc6:	bf00      	nop
90007bc8:	90007c2d 	.word	0x90007c2d
90007bcc:	90007e6b 	.word	0x90007e6b
90007bd0:	90007e6b 	.word	0x90007e6b
90007bd4:	90007e6b 	.word	0x90007e6b
90007bd8:	90007e6b 	.word	0x90007e6b
90007bdc:	90007e6b 	.word	0x90007e6b
90007be0:	90007e6b 	.word	0x90007e6b
90007be4:	90007e6b 	.word	0x90007e6b
90007be8:	90007c53 	.word	0x90007c53
90007bec:	90007e6b 	.word	0x90007e6b
90007bf0:	90007e6b 	.word	0x90007e6b
90007bf4:	90007e6b 	.word	0x90007e6b
90007bf8:	90007e6b 	.word	0x90007e6b
90007bfc:	90007e6b 	.word	0x90007e6b
90007c00:	90007e6b 	.word	0x90007e6b
90007c04:	90007e6b 	.word	0x90007e6b
90007c08:	90007c59 	.word	0x90007c59
90007c0c:	90007e6b 	.word	0x90007e6b
90007c10:	90007e6b 	.word	0x90007e6b
90007c14:	90007e6b 	.word	0x90007e6b
90007c18:	90007e6b 	.word	0x90007e6b
90007c1c:	90007e6b 	.word	0x90007e6b
90007c20:	90007e6b 	.word	0x90007e6b
90007c24:	90007e6b 	.word	0x90007e6b
90007c28:	90007c5f 	.word	0x90007c5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007c2c:	4b94      	ldr	r3, [pc, #592]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c2e:	681b      	ldr	r3, [r3, #0]
90007c30:	f003 0320 	and.w	r3, r3, #32
90007c34:	2b00      	cmp	r3, #0
90007c36:	d009      	beq.n	90007c4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007c38:	4b91      	ldr	r3, [pc, #580]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c3a:	681b      	ldr	r3, [r3, #0]
90007c3c:	08db      	lsrs	r3, r3, #3
90007c3e:	f003 0303 	and.w	r3, r3, #3
90007c42:	4a90      	ldr	r2, [pc, #576]	@ (90007e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007c44:	fa22 f303 	lsr.w	r3, r2, r3
90007c48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
90007c4a:	e111      	b.n	90007e70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90007c4c:	4b8d      	ldr	r3, [pc, #564]	@ (90007e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007c4e:	61bb      	str	r3, [r7, #24]
      break;
90007c50:	e10e      	b.n	90007e70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
90007c52:	4b8d      	ldr	r3, [pc, #564]	@ (90007e88 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007c54:	61bb      	str	r3, [r7, #24]
      break;
90007c56:	e10b      	b.n	90007e70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
90007c58:	4b8c      	ldr	r3, [pc, #560]	@ (90007e8c <HAL_RCC_GetSysClockFreq+0x2e0>)
90007c5a:	61bb      	str	r3, [r7, #24]
      break;
90007c5c:	e108      	b.n	90007e70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90007c5e:	4b88      	ldr	r3, [pc, #544]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007c62:	f003 0303 	and.w	r3, r3, #3
90007c66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90007c68:	4b85      	ldr	r3, [pc, #532]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007c6c:	091b      	lsrs	r3, r3, #4
90007c6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90007c72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90007c74:	4b82      	ldr	r3, [pc, #520]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c78:	f003 0301 	and.w	r3, r3, #1
90007c7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007c7e:	4b80      	ldr	r3, [pc, #512]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007c82:	08db      	lsrs	r3, r3, #3
90007c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007c88:	68fa      	ldr	r2, [r7, #12]
90007c8a:	fb02 f303 	mul.w	r3, r2, r3
90007c8e:	ee07 3a90 	vmov	s15, r3
90007c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007c96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90007c9a:	693b      	ldr	r3, [r7, #16]
90007c9c:	2b00      	cmp	r3, #0
90007c9e:	f000 80e1 	beq.w	90007e64 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90007ca2:	697b      	ldr	r3, [r7, #20]
90007ca4:	2b02      	cmp	r3, #2
90007ca6:	f000 8083 	beq.w	90007db0 <HAL_RCC_GetSysClockFreq+0x204>
90007caa:	697b      	ldr	r3, [r7, #20]
90007cac:	2b02      	cmp	r3, #2
90007cae:	f200 80a1 	bhi.w	90007df4 <HAL_RCC_GetSysClockFreq+0x248>
90007cb2:	697b      	ldr	r3, [r7, #20]
90007cb4:	2b00      	cmp	r3, #0
90007cb6:	d003      	beq.n	90007cc0 <HAL_RCC_GetSysClockFreq+0x114>
90007cb8:	697b      	ldr	r3, [r7, #20]
90007cba:	2b01      	cmp	r3, #1
90007cbc:	d056      	beq.n	90007d6c <HAL_RCC_GetSysClockFreq+0x1c0>
90007cbe:	e099      	b.n	90007df4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007cc0:	4b6f      	ldr	r3, [pc, #444]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007cc2:	681b      	ldr	r3, [r3, #0]
90007cc4:	f003 0320 	and.w	r3, r3, #32
90007cc8:	2b00      	cmp	r3, #0
90007cca:	d02d      	beq.n	90007d28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007ccc:	4b6c      	ldr	r3, [pc, #432]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007cce:	681b      	ldr	r3, [r3, #0]
90007cd0:	08db      	lsrs	r3, r3, #3
90007cd2:	f003 0303 	and.w	r3, r3, #3
90007cd6:	4a6b      	ldr	r2, [pc, #428]	@ (90007e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007cd8:	fa22 f303 	lsr.w	r3, r2, r3
90007cdc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007cde:	687b      	ldr	r3, [r7, #4]
90007ce0:	ee07 3a90 	vmov	s15, r3
90007ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007ce8:	693b      	ldr	r3, [r7, #16]
90007cea:	ee07 3a90 	vmov	s15, r3
90007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007cf6:	4b62      	ldr	r3, [pc, #392]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007cfe:	ee07 3a90 	vmov	s15, r3
90007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007d06:	ed97 6a02 	vldr	s12, [r7, #8]
90007d0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
90007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007d22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
90007d26:	e087      	b.n	90007e38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007d28:	693b      	ldr	r3, [r7, #16]
90007d2a:	ee07 3a90 	vmov	s15, r3
90007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007d32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007e94 <HAL_RCC_GetSysClockFreq+0x2e8>
90007d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007d3a:	4b51      	ldr	r3, [pc, #324]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007d42:	ee07 3a90 	vmov	s15, r3
90007d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007d4a:	ed97 6a02 	vldr	s12, [r7, #8]
90007d4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
90007d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
90007d66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007d6a:	e065      	b.n	90007e38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007d6c:	693b      	ldr	r3, [r7, #16]
90007d6e:	ee07 3a90 	vmov	s15, r3
90007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007d76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007e98 <HAL_RCC_GetSysClockFreq+0x2ec>
90007d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007d7e:	4b40      	ldr	r3, [pc, #256]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007d86:	ee07 3a90 	vmov	s15, r3
90007d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007d8e:	ed97 6a02 	vldr	s12, [r7, #8]
90007d92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
90007d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007da6:	ee67 7a27 	vmul.f32	s15, s14, s15
90007daa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007dae:	e043      	b.n	90007e38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007db0:	693b      	ldr	r3, [r7, #16]
90007db2:	ee07 3a90 	vmov	s15, r3
90007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007dba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007e9c <HAL_RCC_GetSysClockFreq+0x2f0>
90007dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007dc2:	4b2f      	ldr	r3, [pc, #188]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007dca:	ee07 3a90 	vmov	s15, r3
90007dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007dd2:	ed97 6a02 	vldr	s12, [r7, #8]
90007dd6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
90007dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007dea:	ee67 7a27 	vmul.f32	s15, s14, s15
90007dee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007df2:	e021      	b.n	90007e38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007df4:	693b      	ldr	r3, [r7, #16]
90007df6:	ee07 3a90 	vmov	s15, r3
90007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007dfe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007e98 <HAL_RCC_GetSysClockFreq+0x2ec>
90007e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007e06:	4b1e      	ldr	r3, [pc, #120]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007e0e:	ee07 3a90 	vmov	s15, r3
90007e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007e16:	ed97 6a02 	vldr	s12, [r7, #8]
90007e1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
90007e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007e32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007e36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007e38:	4b11      	ldr	r3, [pc, #68]	@ (90007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007e3c:	0a5b      	lsrs	r3, r3, #9
90007e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007e42:	3301      	adds	r3, #1
90007e44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007e46:	683b      	ldr	r3, [r7, #0]
90007e48:	ee07 3a90 	vmov	s15, r3
90007e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007e50:	edd7 6a07 	vldr	s13, [r7, #28]
90007e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007e5c:	ee17 3a90 	vmov	r3, s15
90007e60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007e62:	e005      	b.n	90007e70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007e64:	2300      	movs	r3, #0
90007e66:	61bb      	str	r3, [r7, #24]
      break;
90007e68:	e002      	b.n	90007e70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007e6a:	4b07      	ldr	r3, [pc, #28]	@ (90007e88 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007e6c:	61bb      	str	r3, [r7, #24]
      break;
90007e6e:	bf00      	nop
  }

  return sysclockfreq;
90007e70:	69bb      	ldr	r3, [r7, #24]
}
90007e72:	4618      	mov	r0, r3
90007e74:	3724      	adds	r7, #36	@ 0x24
90007e76:	46bd      	mov	sp, r7
90007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
90007e7c:	4770      	bx	lr
90007e7e:	bf00      	nop
90007e80:	58024400 	.word	0x58024400
90007e84:	03d09000 	.word	0x03d09000
90007e88:	003d0900 	.word	0x003d0900
90007e8c:	017d7840 	.word	0x017d7840
90007e90:	46000000 	.word	0x46000000
90007e94:	4c742400 	.word	0x4c742400
90007e98:	4a742400 	.word	0x4a742400
90007e9c:	4bbebc20 	.word	0x4bbebc20

90007ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007ea0:	b580      	push	{r7, lr}
90007ea2:	b082      	sub	sp, #8
90007ea4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007ea6:	f7ff fe81 	bl	90007bac <HAL_RCC_GetSysClockFreq>
90007eaa:	4602      	mov	r2, r0
90007eac:	4b10      	ldr	r3, [pc, #64]	@ (90007ef0 <HAL_RCC_GetHCLKFreq+0x50>)
90007eae:	699b      	ldr	r3, [r3, #24]
90007eb0:	0a1b      	lsrs	r3, r3, #8
90007eb2:	f003 030f 	and.w	r3, r3, #15
90007eb6:	490f      	ldr	r1, [pc, #60]	@ (90007ef4 <HAL_RCC_GetHCLKFreq+0x54>)
90007eb8:	5ccb      	ldrb	r3, [r1, r3]
90007eba:	f003 031f 	and.w	r3, r3, #31
90007ebe:	fa22 f303 	lsr.w	r3, r2, r3
90007ec2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007ec4:	4b0a      	ldr	r3, [pc, #40]	@ (90007ef0 <HAL_RCC_GetHCLKFreq+0x50>)
90007ec6:	699b      	ldr	r3, [r3, #24]
90007ec8:	f003 030f 	and.w	r3, r3, #15
90007ecc:	4a09      	ldr	r2, [pc, #36]	@ (90007ef4 <HAL_RCC_GetHCLKFreq+0x54>)
90007ece:	5cd3      	ldrb	r3, [r2, r3]
90007ed0:	f003 031f 	and.w	r3, r3, #31
90007ed4:	687a      	ldr	r2, [r7, #4]
90007ed6:	fa22 f303 	lsr.w	r3, r2, r3
90007eda:	4a07      	ldr	r2, [pc, #28]	@ (90007ef8 <HAL_RCC_GetHCLKFreq+0x58>)
90007edc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007ede:	4a07      	ldr	r2, [pc, #28]	@ (90007efc <HAL_RCC_GetHCLKFreq+0x5c>)
90007ee0:	687b      	ldr	r3, [r7, #4]
90007ee2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007ee4:	4b04      	ldr	r3, [pc, #16]	@ (90007ef8 <HAL_RCC_GetHCLKFreq+0x58>)
90007ee6:	681b      	ldr	r3, [r3, #0]
}
90007ee8:	4618      	mov	r0, r3
90007eea:	3708      	adds	r7, #8
90007eec:	46bd      	mov	sp, r7
90007eee:	bd80      	pop	{r7, pc}
90007ef0:	58024400 	.word	0x58024400
90007ef4:	9000ab8c 	.word	0x9000ab8c
90007ef8:	2000003c 	.word	0x2000003c
90007efc:	20000038 	.word	0x20000038

90007f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007f00:	b580      	push	{r7, lr}
90007f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007f04:	f7ff ffcc 	bl	90007ea0 <HAL_RCC_GetHCLKFreq>
90007f08:	4602      	mov	r2, r0
90007f0a:	4b06      	ldr	r3, [pc, #24]	@ (90007f24 <HAL_RCC_GetPCLK2Freq+0x24>)
90007f0c:	69db      	ldr	r3, [r3, #28]
90007f0e:	0a1b      	lsrs	r3, r3, #8
90007f10:	f003 0307 	and.w	r3, r3, #7
90007f14:	4904      	ldr	r1, [pc, #16]	@ (90007f28 <HAL_RCC_GetPCLK2Freq+0x28>)
90007f16:	5ccb      	ldrb	r3, [r1, r3]
90007f18:	f003 031f 	and.w	r3, r3, #31
90007f1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007f20:	4618      	mov	r0, r3
90007f22:	bd80      	pop	{r7, pc}
90007f24:	58024400 	.word	0x58024400
90007f28:	9000ab8c 	.word	0x9000ab8c

90007f2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007f30:	b0ca      	sub	sp, #296	@ 0x128
90007f32:	af00      	add	r7, sp, #0
90007f34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007f38:	2300      	movs	r3, #0
90007f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007f3e:	2300      	movs	r3, #0
90007f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007f50:	2500      	movs	r5, #0
90007f52:	ea54 0305 	orrs.w	r3, r4, r5
90007f56:	d049      	beq.n	90007fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007f5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007f62:	d02f      	beq.n	90007fc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007f64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007f68:	d828      	bhi.n	90007fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
90007f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007f6e:	d01a      	beq.n	90007fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007f74:	d822      	bhi.n	90007fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
90007f76:	2b00      	cmp	r3, #0
90007f78:	d003      	beq.n	90007f82 <HAL_RCCEx_PeriphCLKConfig+0x56>
90007f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007f7e:	d007      	beq.n	90007f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007f80:	e01c      	b.n	90007fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f82:	4bb8      	ldr	r3, [pc, #736]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f86:	4ab7      	ldr	r2, [pc, #732]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007f8e:	e01a      	b.n	90007fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f94:	3308      	adds	r3, #8
90007f96:	2102      	movs	r1, #2
90007f98:	4618      	mov	r0, r3
90007f9a:	f001 f9d1 	bl	90009340 <RCCEx_PLL2_Config>
90007f9e:	4603      	mov	r3, r0
90007fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007fa4:	e00f      	b.n	90007fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007faa:	3328      	adds	r3, #40	@ 0x28
90007fac:	2102      	movs	r1, #2
90007fae:	4618      	mov	r0, r3
90007fb0:	f001 fa78 	bl	900094a4 <RCCEx_PLL3_Config>
90007fb4:	4603      	mov	r3, r0
90007fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007fba:	e004      	b.n	90007fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007fbc:	2301      	movs	r3, #1
90007fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007fc2:	e000      	b.n	90007fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
90007fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007fca:	2b00      	cmp	r3, #0
90007fcc:	d10a      	bne.n	90007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007fce:	4ba5      	ldr	r3, [pc, #660]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007fd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007fdc:	4aa1      	ldr	r2, [pc, #644]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007fde:	430b      	orrs	r3, r1
90007fe0:	6513      	str	r3, [r2, #80]	@ 0x50
90007fe2:	e003      	b.n	90007fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
90007ff4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007ff8:	f04f 0900 	mov.w	r9, #0
90007ffc:	ea58 0309 	orrs.w	r3, r8, r9
90008000:	d047      	beq.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008008:	2b04      	cmp	r3, #4
9000800a:	d82a      	bhi.n	90008062 <HAL_RCCEx_PeriphCLKConfig+0x136>
9000800c:	a201      	add	r2, pc, #4	@ (adr r2, 90008014 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
9000800e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008012:	bf00      	nop
90008014:	90008029 	.word	0x90008029
90008018:	90008037 	.word	0x90008037
9000801c:	9000804d 	.word	0x9000804d
90008020:	9000806b 	.word	0x9000806b
90008024:	9000806b 	.word	0x9000806b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008028:	4b8e      	ldr	r3, [pc, #568]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000802c:	4a8d      	ldr	r2, [pc, #564]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000802e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008034:	e01a      	b.n	9000806c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000803a:	3308      	adds	r3, #8
9000803c:	2100      	movs	r1, #0
9000803e:	4618      	mov	r0, r3
90008040:	f001 f97e 	bl	90009340 <RCCEx_PLL2_Config>
90008044:	4603      	mov	r3, r0
90008046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000804a:	e00f      	b.n	9000806c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008050:	3328      	adds	r3, #40	@ 0x28
90008052:	2100      	movs	r1, #0
90008054:	4618      	mov	r0, r3
90008056:	f001 fa25 	bl	900094a4 <RCCEx_PLL3_Config>
9000805a:	4603      	mov	r3, r0
9000805c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008060:	e004      	b.n	9000806c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008062:	2301      	movs	r3, #1
90008064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008068:	e000      	b.n	9000806c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
9000806a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000806c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008070:	2b00      	cmp	r3, #0
90008072:	d10a      	bne.n	9000808a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90008074:	4b7b      	ldr	r3, [pc, #492]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008078:	f023 0107 	bic.w	r1, r3, #7
9000807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008082:	4a78      	ldr	r2, [pc, #480]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008084:	430b      	orrs	r3, r1
90008086:	6513      	str	r3, [r2, #80]	@ 0x50
90008088:	e003      	b.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000808a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000808e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008096:	e9d3 2300 	ldrd	r2, r3, [r3]
9000809a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
9000809e:	f04f 0b00 	mov.w	fp, #0
900080a2:	ea5a 030b 	orrs.w	r3, sl, fp
900080a6:	d04c      	beq.n	90008142 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
900080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
900080ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900080b2:	d030      	beq.n	90008116 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
900080b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900080b8:	d829      	bhi.n	9000810e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900080ba:	2bc0      	cmp	r3, #192	@ 0xc0
900080bc:	d02d      	beq.n	9000811a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
900080be:	2bc0      	cmp	r3, #192	@ 0xc0
900080c0:	d825      	bhi.n	9000810e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900080c2:	2b80      	cmp	r3, #128	@ 0x80
900080c4:	d018      	beq.n	900080f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
900080c6:	2b80      	cmp	r3, #128	@ 0x80
900080c8:	d821      	bhi.n	9000810e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
900080ca:	2b00      	cmp	r3, #0
900080cc:	d002      	beq.n	900080d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
900080ce:	2b40      	cmp	r3, #64	@ 0x40
900080d0:	d007      	beq.n	900080e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
900080d2:	e01c      	b.n	9000810e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900080d4:	4b63      	ldr	r3, [pc, #396]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900080d8:	4a62      	ldr	r2, [pc, #392]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900080da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900080de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
900080e0:	e01c      	b.n	9000811c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080e6:	3308      	adds	r3, #8
900080e8:	2100      	movs	r1, #0
900080ea:	4618      	mov	r0, r3
900080ec:	f001 f928 	bl	90009340 <RCCEx_PLL2_Config>
900080f0:	4603      	mov	r3, r0
900080f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
900080f6:	e011      	b.n	9000811c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900080f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080fc:	3328      	adds	r3, #40	@ 0x28
900080fe:	2100      	movs	r1, #0
90008100:	4618      	mov	r0, r3
90008102:	f001 f9cf 	bl	900094a4 <RCCEx_PLL3_Config>
90008106:	4603      	mov	r3, r0
90008108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
9000810c:	e006      	b.n	9000811c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000810e:	2301      	movs	r3, #1
90008110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008114:	e002      	b.n	9000811c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90008116:	bf00      	nop
90008118:	e000      	b.n	9000811c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
9000811a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000811c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008120:	2b00      	cmp	r3, #0
90008122:	d10a      	bne.n	9000813a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90008124:	4b4f      	ldr	r3, [pc, #316]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008128:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
9000812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90008132:	4a4c      	ldr	r2, [pc, #304]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90008134:	430b      	orrs	r3, r1
90008136:	6513      	str	r3, [r2, #80]	@ 0x50
90008138:	e003      	b.n	90008142 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000813a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000813e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008146:	e9d3 2300 	ldrd	r2, r3, [r3]
9000814a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
9000814e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90008152:	2300      	movs	r3, #0
90008154:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90008158:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
9000815c:	460b      	mov	r3, r1
9000815e:	4313      	orrs	r3, r2
90008160:	d053      	beq.n	9000820a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008166:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
9000816a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
9000816e:	d035      	beq.n	900081dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90008170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90008174:	d82e      	bhi.n	900081d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90008176:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
9000817a:	d031      	beq.n	900081e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
9000817c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90008180:	d828      	bhi.n	900081d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90008182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90008186:	d01a      	beq.n	900081be <HAL_RCCEx_PeriphCLKConfig+0x292>
90008188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
9000818c:	d822      	bhi.n	900081d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000818e:	2b00      	cmp	r3, #0
90008190:	d003      	beq.n	9000819a <HAL_RCCEx_PeriphCLKConfig+0x26e>
90008192:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008196:	d007      	beq.n	900081a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90008198:	e01c      	b.n	900081d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000819a:	4b32      	ldr	r3, [pc, #200]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000819e:	4a31      	ldr	r2, [pc, #196]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900081a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900081a6:	e01c      	b.n	900081e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081ac:	3308      	adds	r3, #8
900081ae:	2100      	movs	r1, #0
900081b0:	4618      	mov	r0, r3
900081b2:	f001 f8c5 	bl	90009340 <RCCEx_PLL2_Config>
900081b6:	4603      	mov	r3, r0
900081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
900081bc:	e011      	b.n	900081e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900081be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081c2:	3328      	adds	r3, #40	@ 0x28
900081c4:	2100      	movs	r1, #0
900081c6:	4618      	mov	r0, r3
900081c8:	f001 f96c 	bl	900094a4 <RCCEx_PLL3_Config>
900081cc:	4603      	mov	r3, r0
900081ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900081d2:	e006      	b.n	900081e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
900081d4:	2301      	movs	r3, #1
900081d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900081da:	e002      	b.n	900081e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900081dc:	bf00      	nop
900081de:	e000      	b.n	900081e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900081e0:	bf00      	nop
    }

    if (ret == HAL_OK)
900081e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081e6:	2b00      	cmp	r3, #0
900081e8:	d10b      	bne.n	90008202 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
900081ea:	4b1e      	ldr	r3, [pc, #120]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900081ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900081ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
900081f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
900081fa:	4a1a      	ldr	r2, [pc, #104]	@ (90008264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
900081fc:	430b      	orrs	r3, r1
900081fe:	6593      	str	r3, [r2, #88]	@ 0x58
90008200:	e003      	b.n	9000820a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000820e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008212:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90008216:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
9000821a:	2300      	movs	r3, #0
9000821c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90008220:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90008224:	460b      	mov	r3, r1
90008226:	4313      	orrs	r3, r2
90008228:	d056      	beq.n	900082d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
9000822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000822e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90008232:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90008236:	d038      	beq.n	900082aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
90008238:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
9000823c:	d831      	bhi.n	900082a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
9000823e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90008242:	d034      	beq.n	900082ae <HAL_RCCEx_PeriphCLKConfig+0x382>
90008244:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90008248:	d82b      	bhi.n	900082a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
9000824a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000824e:	d01d      	beq.n	9000828c <HAL_RCCEx_PeriphCLKConfig+0x360>
90008250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90008254:	d825      	bhi.n	900082a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90008256:	2b00      	cmp	r3, #0
90008258:	d006      	beq.n	90008268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
9000825a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
9000825e:	d00a      	beq.n	90008276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90008260:	e01f      	b.n	900082a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
90008262:	bf00      	nop
90008264:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008268:	4ba2      	ldr	r3, [pc, #648]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000826c:	4aa1      	ldr	r2, [pc, #644]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000826e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90008274:	e01c      	b.n	900082b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000827a:	3308      	adds	r3, #8
9000827c:	2100      	movs	r1, #0
9000827e:	4618      	mov	r0, r3
90008280:	f001 f85e 	bl	90009340 <RCCEx_PLL2_Config>
90008284:	4603      	mov	r3, r0
90008286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
9000828a:	e011      	b.n	900082b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008290:	3328      	adds	r3, #40	@ 0x28
90008292:	2100      	movs	r1, #0
90008294:	4618      	mov	r0, r3
90008296:	f001 f905 	bl	900094a4 <RCCEx_PLL3_Config>
9000829a:	4603      	mov	r3, r0
9000829c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900082a0:	e006      	b.n	900082b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
900082a2:	2301      	movs	r3, #1
900082a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900082a8:	e002      	b.n	900082b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
900082aa:	bf00      	nop
900082ac:	e000      	b.n	900082b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
900082ae:	bf00      	nop
    }

    if (ret == HAL_OK)
900082b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082b4:	2b00      	cmp	r3, #0
900082b6:	d10b      	bne.n	900082d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
900082b8:	4b8e      	ldr	r3, [pc, #568]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900082ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900082bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
900082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
900082c8:	4a8a      	ldr	r2, [pc, #552]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900082ca:	430b      	orrs	r3, r1
900082cc:	6593      	str	r3, [r2, #88]	@ 0x58
900082ce:	e003      	b.n	900082d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
900082d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
900082d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
900082e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
900082e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
900082e8:	2300      	movs	r3, #0
900082ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
900082ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
900082f2:	460b      	mov	r3, r1
900082f4:	4313      	orrs	r3, r2
900082f6:	d03a      	beq.n	9000836e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
900082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900082fe:	2b30      	cmp	r3, #48	@ 0x30
90008300:	d01f      	beq.n	90008342 <HAL_RCCEx_PeriphCLKConfig+0x416>
90008302:	2b30      	cmp	r3, #48	@ 0x30
90008304:	d819      	bhi.n	9000833a <HAL_RCCEx_PeriphCLKConfig+0x40e>
90008306:	2b20      	cmp	r3, #32
90008308:	d00c      	beq.n	90008324 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000830a:	2b20      	cmp	r3, #32
9000830c:	d815      	bhi.n	9000833a <HAL_RCCEx_PeriphCLKConfig+0x40e>
9000830e:	2b00      	cmp	r3, #0
90008310:	d019      	beq.n	90008346 <HAL_RCCEx_PeriphCLKConfig+0x41a>
90008312:	2b10      	cmp	r3, #16
90008314:	d111      	bne.n	9000833a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008316:	4b77      	ldr	r3, [pc, #476]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000831a:	4a76      	ldr	r2, [pc, #472]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000831c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90008322:	e011      	b.n	90008348 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008328:	3308      	adds	r3, #8
9000832a:	2102      	movs	r1, #2
9000832c:	4618      	mov	r0, r3
9000832e:	f001 f807 	bl	90009340 <RCCEx_PLL2_Config>
90008332:	4603      	mov	r3, r0
90008334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90008338:	e006      	b.n	90008348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
9000833a:	2301      	movs	r3, #1
9000833c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008340:	e002      	b.n	90008348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90008342:	bf00      	nop
90008344:	e000      	b.n	90008348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90008346:	bf00      	nop
    }

    if (ret == HAL_OK)
90008348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000834c:	2b00      	cmp	r3, #0
9000834e:	d10a      	bne.n	90008366 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90008350:	4b68      	ldr	r3, [pc, #416]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008354:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000835c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000835e:	4a65      	ldr	r2, [pc, #404]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008360:	430b      	orrs	r3, r1
90008362:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008364:	e003      	b.n	9000836e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000836a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008372:	e9d3 2300 	ldrd	r2, r3, [r3]
90008376:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
9000837a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
9000837e:	2300      	movs	r3, #0
90008380:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90008384:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90008388:	460b      	mov	r3, r1
9000838a:	4313      	orrs	r3, r2
9000838c:	d051      	beq.n	90008432 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
9000838e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008398:	d035      	beq.n	90008406 <HAL_RCCEx_PeriphCLKConfig+0x4da>
9000839a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000839e:	d82e      	bhi.n	900083fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900083a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
900083a4:	d031      	beq.n	9000840a <HAL_RCCEx_PeriphCLKConfig+0x4de>
900083a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
900083aa:	d828      	bhi.n	900083fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900083ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900083b0:	d01a      	beq.n	900083e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
900083b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900083b6:	d822      	bhi.n	900083fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
900083b8:	2b00      	cmp	r3, #0
900083ba:	d003      	beq.n	900083c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
900083bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900083c0:	d007      	beq.n	900083d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
900083c2:	e01c      	b.n	900083fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900083c4:	4b4b      	ldr	r3, [pc, #300]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900083c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900083c8:	4a4a      	ldr	r2, [pc, #296]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900083ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900083ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900083d0:	e01c      	b.n	9000840c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083d6:	3308      	adds	r3, #8
900083d8:	2100      	movs	r1, #0
900083da:	4618      	mov	r0, r3
900083dc:	f000 ffb0 	bl	90009340 <RCCEx_PLL2_Config>
900083e0:	4603      	mov	r3, r0
900083e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900083e6:	e011      	b.n	9000840c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083ec:	3328      	adds	r3, #40	@ 0x28
900083ee:	2100      	movs	r1, #0
900083f0:	4618      	mov	r0, r3
900083f2:	f001 f857 	bl	900094a4 <RCCEx_PLL3_Config>
900083f6:	4603      	mov	r3, r0
900083f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900083fc:	e006      	b.n	9000840c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900083fe:	2301      	movs	r3, #1
90008400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008404:	e002      	b.n	9000840c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008406:	bf00      	nop
90008408:	e000      	b.n	9000840c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
9000840a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000840c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008410:	2b00      	cmp	r3, #0
90008412:	d10a      	bne.n	9000842a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90008414:	4b37      	ldr	r3, [pc, #220]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008418:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
9000841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90008422:	4a34      	ldr	r2, [pc, #208]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008424:	430b      	orrs	r3, r1
90008426:	6513      	str	r3, [r2, #80]	@ 0x50
90008428:	e003      	b.n	90008432 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000842a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000842e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008436:	e9d3 2300 	ldrd	r2, r3, [r3]
9000843a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
9000843e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
90008442:	2300      	movs	r3, #0
90008444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90008448:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
9000844c:	460b      	mov	r3, r1
9000844e:	4313      	orrs	r3, r2
90008450:	d056      	beq.n	90008500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
90008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000845c:	d033      	beq.n	900084c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
9000845e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008462:	d82c      	bhi.n	900084be <HAL_RCCEx_PeriphCLKConfig+0x592>
90008464:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008468:	d02f      	beq.n	900084ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
9000846a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000846e:	d826      	bhi.n	900084be <HAL_RCCEx_PeriphCLKConfig+0x592>
90008470:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008474:	d02b      	beq.n	900084ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90008476:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
9000847a:	d820      	bhi.n	900084be <HAL_RCCEx_PeriphCLKConfig+0x592>
9000847c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008480:	d012      	beq.n	900084a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
90008482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008486:	d81a      	bhi.n	900084be <HAL_RCCEx_PeriphCLKConfig+0x592>
90008488:	2b00      	cmp	r3, #0
9000848a:	d022      	beq.n	900084d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
9000848c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008490:	d115      	bne.n	900084be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008496:	3308      	adds	r3, #8
90008498:	2101      	movs	r1, #1
9000849a:	4618      	mov	r0, r3
9000849c:	f000 ff50 	bl	90009340 <RCCEx_PLL2_Config>
900084a0:	4603      	mov	r3, r0
900084a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900084a6:	e015      	b.n	900084d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084ac:	3328      	adds	r3, #40	@ 0x28
900084ae:	2101      	movs	r1, #1
900084b0:	4618      	mov	r0, r3
900084b2:	f000 fff7 	bl	900094a4 <RCCEx_PLL3_Config>
900084b6:	4603      	mov	r3, r0
900084b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
900084bc:	e00a      	b.n	900084d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900084be:	2301      	movs	r3, #1
900084c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900084c4:	e006      	b.n	900084d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900084c6:	bf00      	nop
900084c8:	e004      	b.n	900084d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900084ca:	bf00      	nop
900084cc:	e002      	b.n	900084d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900084ce:	bf00      	nop
900084d0:	e000      	b.n	900084d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900084d2:	bf00      	nop
    }

    if (ret == HAL_OK)
900084d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084d8:	2b00      	cmp	r3, #0
900084da:	d10d      	bne.n	900084f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900084dc:	4b05      	ldr	r3, [pc, #20]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900084de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900084e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
900084e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900084ea:	4a02      	ldr	r2, [pc, #8]	@ (900084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900084ec:	430b      	orrs	r3, r1
900084ee:	6513      	str	r3, [r2, #80]	@ 0x50
900084f0:	e006      	b.n	90008500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
900084f2:	bf00      	nop
900084f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900084f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008504:	e9d3 2300 	ldrd	r2, r3, [r3]
90008508:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
9000850c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
90008510:	2300      	movs	r3, #0
90008512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
90008516:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
9000851a:	460b      	mov	r3, r1
9000851c:	4313      	orrs	r3, r2
9000851e:	d055      	beq.n	900085cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
90008520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000852c:	d033      	beq.n	90008596 <HAL_RCCEx_PeriphCLKConfig+0x66a>
9000852e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008532:	d82c      	bhi.n	9000858e <HAL_RCCEx_PeriphCLKConfig+0x662>
90008534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008538:	d02f      	beq.n	9000859a <HAL_RCCEx_PeriphCLKConfig+0x66e>
9000853a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000853e:	d826      	bhi.n	9000858e <HAL_RCCEx_PeriphCLKConfig+0x662>
90008540:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008544:	d02b      	beq.n	9000859e <HAL_RCCEx_PeriphCLKConfig+0x672>
90008546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000854a:	d820      	bhi.n	9000858e <HAL_RCCEx_PeriphCLKConfig+0x662>
9000854c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008550:	d012      	beq.n	90008578 <HAL_RCCEx_PeriphCLKConfig+0x64c>
90008552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008556:	d81a      	bhi.n	9000858e <HAL_RCCEx_PeriphCLKConfig+0x662>
90008558:	2b00      	cmp	r3, #0
9000855a:	d022      	beq.n	900085a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
9000855c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008560:	d115      	bne.n	9000858e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008566:	3308      	adds	r3, #8
90008568:	2101      	movs	r1, #1
9000856a:	4618      	mov	r0, r3
9000856c:	f000 fee8 	bl	90009340 <RCCEx_PLL2_Config>
90008570:	4603      	mov	r3, r0
90008572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008576:	e015      	b.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000857c:	3328      	adds	r3, #40	@ 0x28
9000857e:	2101      	movs	r1, #1
90008580:	4618      	mov	r0, r3
90008582:	f000 ff8f 	bl	900094a4 <RCCEx_PLL3_Config>
90008586:	4603      	mov	r3, r0
90008588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000858c:	e00a      	b.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
9000858e:	2301      	movs	r3, #1
90008590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008594:	e006      	b.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008596:	bf00      	nop
90008598:	e004      	b.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000859a:	bf00      	nop
9000859c:	e002      	b.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000859e:	bf00      	nop
900085a0:	e000      	b.n	900085a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
900085a2:	bf00      	nop
    }

    if (ret == HAL_OK)
900085a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085a8:	2b00      	cmp	r3, #0
900085aa:	d10b      	bne.n	900085c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
900085ac:	4ba3      	ldr	r3, [pc, #652]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900085ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900085b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
900085b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900085bc:	4a9f      	ldr	r2, [pc, #636]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900085be:	430b      	orrs	r3, r1
900085c0:	6593      	str	r3, [r2, #88]	@ 0x58
900085c2:	e003      	b.n	900085cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
900085c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
900085cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
900085d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
900085d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
900085dc:	2300      	movs	r3, #0
900085de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
900085e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
900085e6:	460b      	mov	r3, r1
900085e8:	4313      	orrs	r3, r2
900085ea:	d037      	beq.n	9000865c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
900085ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900085f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900085f6:	d00e      	beq.n	90008616 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900085f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900085fc:	d816      	bhi.n	9000862c <HAL_RCCEx_PeriphCLKConfig+0x700>
900085fe:	2b00      	cmp	r3, #0
90008600:	d018      	beq.n	90008634 <HAL_RCCEx_PeriphCLKConfig+0x708>
90008602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008606:	d111      	bne.n	9000862c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008608:	4b8c      	ldr	r3, [pc, #560]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000860c:	4a8b      	ldr	r2, [pc, #556]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000860e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008614:	e00f      	b.n	90008636 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000861a:	3308      	adds	r3, #8
9000861c:	2101      	movs	r1, #1
9000861e:	4618      	mov	r0, r3
90008620:	f000 fe8e 	bl	90009340 <RCCEx_PLL2_Config>
90008624:	4603      	mov	r3, r0
90008626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
9000862a:	e004      	b.n	90008636 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000862c:	2301      	movs	r3, #1
9000862e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008632:	e000      	b.n	90008636 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90008634:	bf00      	nop
    }

    if (ret == HAL_OK)
90008636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000863a:	2b00      	cmp	r3, #0
9000863c:	d10a      	bne.n	90008654 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000863e:	4b7f      	ldr	r3, [pc, #508]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008642:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000864a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000864c:	4a7b      	ldr	r2, [pc, #492]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000864e:	430b      	orrs	r3, r1
90008650:	6513      	str	r3, [r2, #80]	@ 0x50
90008652:	e003      	b.n	9000865c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008660:	e9d3 2300 	ldrd	r2, r3, [r3]
90008664:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
9000866c:	2300      	movs	r3, #0
9000866e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
90008672:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008676:	460b      	mov	r3, r1
90008678:	4313      	orrs	r3, r2
9000867a:	d039      	beq.n	900086f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
9000867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90008682:	2b03      	cmp	r3, #3
90008684:	d81c      	bhi.n	900086c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
90008686:	a201      	add	r2, pc, #4	@ (adr r2, 9000868c <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000868c:	900086c9 	.word	0x900086c9
90008690:	9000869d 	.word	0x9000869d
90008694:	900086ab 	.word	0x900086ab
90008698:	900086c9 	.word	0x900086c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000869c:	4b67      	ldr	r3, [pc, #412]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900086a0:	4a66      	ldr	r2, [pc, #408]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900086a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
900086a8:	e00f      	b.n	900086ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086ae:	3308      	adds	r3, #8
900086b0:	2102      	movs	r1, #2
900086b2:	4618      	mov	r0, r3
900086b4:	f000 fe44 	bl	90009340 <RCCEx_PLL2_Config>
900086b8:	4603      	mov	r3, r0
900086ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
900086be:	e004      	b.n	900086ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
900086c0:	2301      	movs	r3, #1
900086c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086c6:	e000      	b.n	900086ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
900086c8:	bf00      	nop
    }

    if (ret == HAL_OK)
900086ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086ce:	2b00      	cmp	r3, #0
900086d0:	d10a      	bne.n	900086e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
900086d2:	4b5a      	ldr	r3, [pc, #360]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900086d6:	f023 0103 	bic.w	r1, r3, #3
900086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900086e0:	4a56      	ldr	r2, [pc, #344]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900086e2:	430b      	orrs	r3, r1
900086e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
900086e6:	e003      	b.n	900086f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900086f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
900086f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
900086fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
90008700:	2300      	movs	r3, #0
90008702:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
90008706:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
9000870a:	460b      	mov	r3, r1
9000870c:	4313      	orrs	r3, r2
9000870e:	f000 809f 	beq.w	90008850 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90008712:	4b4b      	ldr	r3, [pc, #300]	@ (90008840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008714:	681b      	ldr	r3, [r3, #0]
90008716:	4a4a      	ldr	r2, [pc, #296]	@ (90008840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000871c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000871e:	f7fa fd1d 	bl	9000315c <HAL_GetTick>
90008722:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008726:	e00b      	b.n	90008740 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90008728:	f7fa fd18 	bl	9000315c <HAL_GetTick>
9000872c:	4602      	mov	r2, r0
9000872e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008732:	1ad3      	subs	r3, r2, r3
90008734:	2b64      	cmp	r3, #100	@ 0x64
90008736:	d903      	bls.n	90008740 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90008738:	2303      	movs	r3, #3
9000873a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000873e:	e005      	b.n	9000874c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008740:	4b3f      	ldr	r3, [pc, #252]	@ (90008840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90008742:	681b      	ldr	r3, [r3, #0]
90008744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90008748:	2b00      	cmp	r3, #0
9000874a:	d0ed      	beq.n	90008728 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
9000874c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008750:	2b00      	cmp	r3, #0
90008752:	d179      	bne.n	90008848 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008754:	4b39      	ldr	r3, [pc, #228]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008756:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000875c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008760:	4053      	eors	r3, r2
90008762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008766:	2b00      	cmp	r3, #0
90008768:	d015      	beq.n	90008796 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000876a:	4b34      	ldr	r3, [pc, #208]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000876c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000876e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90008772:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90008776:	4b31      	ldr	r3, [pc, #196]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000877a:	4a30      	ldr	r2, [pc, #192]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000877c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90008780:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90008782:	4b2e      	ldr	r3, [pc, #184]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008786:	4a2d      	ldr	r2, [pc, #180]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000878c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
9000878e:	4a2b      	ldr	r2, [pc, #172]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90008794:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000879a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000879e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900087a2:	d118      	bne.n	900087d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900087a4:	f7fa fcda 	bl	9000315c <HAL_GetTick>
900087a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900087ac:	e00d      	b.n	900087ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900087ae:	f7fa fcd5 	bl	9000315c <HAL_GetTick>
900087b2:	4602      	mov	r2, r0
900087b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900087b8:	1ad2      	subs	r2, r2, r3
900087ba:	f241 3388 	movw	r3, #5000	@ 0x1388
900087be:	429a      	cmp	r2, r3
900087c0:	d903      	bls.n	900087ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
900087c2:	2303      	movs	r3, #3
900087c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
900087c8:	e005      	b.n	900087d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900087ca:	4b1c      	ldr	r3, [pc, #112]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900087cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900087ce:	f003 0302 	and.w	r3, r3, #2
900087d2:	2b00      	cmp	r3, #0
900087d4:	d0eb      	beq.n	900087ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
900087d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087da:	2b00      	cmp	r3, #0
900087dc:	d129      	bne.n	90008832 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900087e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
900087ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
900087ee:	d10e      	bne.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
900087f0:	4b12      	ldr	r3, [pc, #72]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
900087f2:	691b      	ldr	r3, [r3, #16]
900087f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
900087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008800:	091a      	lsrs	r2, r3, #4
90008802:	4b10      	ldr	r3, [pc, #64]	@ (90008844 <HAL_RCCEx_PeriphCLKConfig+0x918>)
90008804:	4013      	ands	r3, r2
90008806:	4a0d      	ldr	r2, [pc, #52]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008808:	430b      	orrs	r3, r1
9000880a:	6113      	str	r3, [r2, #16]
9000880c:	e005      	b.n	9000881a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000880e:	4b0b      	ldr	r3, [pc, #44]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008810:	691b      	ldr	r3, [r3, #16]
90008812:	4a0a      	ldr	r2, [pc, #40]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008814:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
90008818:	6113      	str	r3, [r2, #16]
9000881a:	4b08      	ldr	r3, [pc, #32]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000881c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
9000881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008826:	f3c3 030b 	ubfx	r3, r3, #0, #12
9000882a:	4a04      	ldr	r2, [pc, #16]	@ (9000883c <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000882c:	430b      	orrs	r3, r1
9000882e:	6713      	str	r3, [r2, #112]	@ 0x70
90008830:	e00e      	b.n	90008850 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
90008832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
9000883a:	e009      	b.n	90008850 <HAL_RCCEx_PeriphCLKConfig+0x924>
9000883c:	58024400 	.word	0x58024400
90008840:	58024800 	.word	0x58024800
90008844:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90008848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000884c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008854:	e9d3 2300 	ldrd	r2, r3, [r3]
90008858:	f002 0301 	and.w	r3, r2, #1
9000885c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90008860:	2300      	movs	r3, #0
90008862:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008866:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
9000886a:	460b      	mov	r3, r1
9000886c:	4313      	orrs	r3, r2
9000886e:	f000 8089 	beq.w	90008984 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008878:	2b28      	cmp	r3, #40	@ 0x28
9000887a:	d86b      	bhi.n	90008954 <HAL_RCCEx_PeriphCLKConfig+0xa28>
9000887c:	a201      	add	r2, pc, #4	@ (adr r2, 90008884 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008882:	bf00      	nop
90008884:	9000895d 	.word	0x9000895d
90008888:	90008955 	.word	0x90008955
9000888c:	90008955 	.word	0x90008955
90008890:	90008955 	.word	0x90008955
90008894:	90008955 	.word	0x90008955
90008898:	90008955 	.word	0x90008955
9000889c:	90008955 	.word	0x90008955
900088a0:	90008955 	.word	0x90008955
900088a4:	90008929 	.word	0x90008929
900088a8:	90008955 	.word	0x90008955
900088ac:	90008955 	.word	0x90008955
900088b0:	90008955 	.word	0x90008955
900088b4:	90008955 	.word	0x90008955
900088b8:	90008955 	.word	0x90008955
900088bc:	90008955 	.word	0x90008955
900088c0:	90008955 	.word	0x90008955
900088c4:	9000893f 	.word	0x9000893f
900088c8:	90008955 	.word	0x90008955
900088cc:	90008955 	.word	0x90008955
900088d0:	90008955 	.word	0x90008955
900088d4:	90008955 	.word	0x90008955
900088d8:	90008955 	.word	0x90008955
900088dc:	90008955 	.word	0x90008955
900088e0:	90008955 	.word	0x90008955
900088e4:	9000895d 	.word	0x9000895d
900088e8:	90008955 	.word	0x90008955
900088ec:	90008955 	.word	0x90008955
900088f0:	90008955 	.word	0x90008955
900088f4:	90008955 	.word	0x90008955
900088f8:	90008955 	.word	0x90008955
900088fc:	90008955 	.word	0x90008955
90008900:	90008955 	.word	0x90008955
90008904:	9000895d 	.word	0x9000895d
90008908:	90008955 	.word	0x90008955
9000890c:	90008955 	.word	0x90008955
90008910:	90008955 	.word	0x90008955
90008914:	90008955 	.word	0x90008955
90008918:	90008955 	.word	0x90008955
9000891c:	90008955 	.word	0x90008955
90008920:	90008955 	.word	0x90008955
90008924:	9000895d 	.word	0x9000895d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000892c:	3308      	adds	r3, #8
9000892e:	2101      	movs	r1, #1
90008930:	4618      	mov	r0, r3
90008932:	f000 fd05 	bl	90009340 <RCCEx_PLL2_Config>
90008936:	4603      	mov	r3, r0
90008938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000893c:	e00f      	b.n	9000895e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008942:	3328      	adds	r3, #40	@ 0x28
90008944:	2101      	movs	r1, #1
90008946:	4618      	mov	r0, r3
90008948:	f000 fdac 	bl	900094a4 <RCCEx_PLL3_Config>
9000894c:	4603      	mov	r3, r0
9000894e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008952:	e004      	b.n	9000895e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008954:	2301      	movs	r3, #1
90008956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000895a:	e000      	b.n	9000895e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
9000895c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000895e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008962:	2b00      	cmp	r3, #0
90008964:	d10a      	bne.n	9000897c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008966:	4bbf      	ldr	r3, [pc, #764]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000896a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008974:	4abb      	ldr	r2, [pc, #748]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008976:	430b      	orrs	r3, r1
90008978:	6553      	str	r3, [r2, #84]	@ 0x54
9000897a:	e003      	b.n	90008984 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000897c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008988:	e9d3 2300 	ldrd	r2, r3, [r3]
9000898c:	f002 0302 	and.w	r3, r2, #2
90008990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90008994:	2300      	movs	r3, #0
90008996:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000899a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
9000899e:	460b      	mov	r3, r1
900089a0:	4313      	orrs	r3, r2
900089a2:	d041      	beq.n	90008a28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
900089a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900089aa:	2b05      	cmp	r3, #5
900089ac:	d824      	bhi.n	900089f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
900089ae:	a201      	add	r2, pc, #4	@ (adr r2, 900089b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
900089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900089b4:	90008a01 	.word	0x90008a01
900089b8:	900089cd 	.word	0x900089cd
900089bc:	900089e3 	.word	0x900089e3
900089c0:	90008a01 	.word	0x90008a01
900089c4:	90008a01 	.word	0x90008a01
900089c8:	90008a01 	.word	0x90008a01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900089cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089d0:	3308      	adds	r3, #8
900089d2:	2101      	movs	r1, #1
900089d4:	4618      	mov	r0, r3
900089d6:	f000 fcb3 	bl	90009340 <RCCEx_PLL2_Config>
900089da:	4603      	mov	r3, r0
900089dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900089e0:	e00f      	b.n	90008a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089e6:	3328      	adds	r3, #40	@ 0x28
900089e8:	2101      	movs	r1, #1
900089ea:	4618      	mov	r0, r3
900089ec:	f000 fd5a 	bl	900094a4 <RCCEx_PLL3_Config>
900089f0:	4603      	mov	r3, r0
900089f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900089f6:	e004      	b.n	90008a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900089f8:	2301      	movs	r3, #1
900089fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900089fe:	e000      	b.n	90008a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90008a00:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a06:	2b00      	cmp	r3, #0
90008a08:	d10a      	bne.n	90008a20 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90008a0a:	4b96      	ldr	r3, [pc, #600]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008a0e:	f023 0107 	bic.w	r1, r3, #7
90008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008a18:	4a92      	ldr	r2, [pc, #584]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008a1a:	430b      	orrs	r3, r1
90008a1c:	6553      	str	r3, [r2, #84]	@ 0x54
90008a1e:	e003      	b.n	90008a28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a30:	f002 0304 	and.w	r3, r2, #4
90008a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90008a38:	2300      	movs	r3, #0
90008a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
90008a3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
90008a42:	460b      	mov	r3, r1
90008a44:	4313      	orrs	r3, r2
90008a46:	d044      	beq.n	90008ad2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008a50:	2b05      	cmp	r3, #5
90008a52:	d825      	bhi.n	90008aa0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008a54:	a201      	add	r2, pc, #4	@ (adr r2, 90008a5c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008a5a:	bf00      	nop
90008a5c:	90008aa9 	.word	0x90008aa9
90008a60:	90008a75 	.word	0x90008a75
90008a64:	90008a8b 	.word	0x90008a8b
90008a68:	90008aa9 	.word	0x90008aa9
90008a6c:	90008aa9 	.word	0x90008aa9
90008a70:	90008aa9 	.word	0x90008aa9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a78:	3308      	adds	r3, #8
90008a7a:	2101      	movs	r1, #1
90008a7c:	4618      	mov	r0, r3
90008a7e:	f000 fc5f 	bl	90009340 <RCCEx_PLL2_Config>
90008a82:	4603      	mov	r3, r0
90008a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008a88:	e00f      	b.n	90008aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a8e:	3328      	adds	r3, #40	@ 0x28
90008a90:	2101      	movs	r1, #1
90008a92:	4618      	mov	r0, r3
90008a94:	f000 fd06 	bl	900094a4 <RCCEx_PLL3_Config>
90008a98:	4603      	mov	r3, r0
90008a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008a9e:	e004      	b.n	90008aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008aa0:	2301      	movs	r3, #1
90008aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008aa6:	e000      	b.n	90008aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
90008aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008aae:	2b00      	cmp	r3, #0
90008ab0:	d10b      	bne.n	90008aca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90008ab2:	4b6c      	ldr	r3, [pc, #432]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008ab6:	f023 0107 	bic.w	r1, r3, #7
90008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008ac2:	4a68      	ldr	r2, [pc, #416]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008ac4:	430b      	orrs	r3, r1
90008ac6:	6593      	str	r3, [r2, #88]	@ 0x58
90008ac8:	e003      	b.n	90008ad2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90008ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ada:	f002 0320 	and.w	r3, r2, #32
90008ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
90008ae2:	2300      	movs	r3, #0
90008ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
90008ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
90008aec:	460b      	mov	r3, r1
90008aee:	4313      	orrs	r3, r2
90008af0:	d055      	beq.n	90008b9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
90008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90008afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008afe:	d033      	beq.n	90008b68 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90008b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008b04:	d82c      	bhi.n	90008b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008b0a:	d02f      	beq.n	90008b6c <HAL_RCCEx_PeriphCLKConfig+0xc40>
90008b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008b10:	d826      	bhi.n	90008b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008b16:	d02b      	beq.n	90008b70 <HAL_RCCEx_PeriphCLKConfig+0xc44>
90008b18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008b1c:	d820      	bhi.n	90008b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008b22:	d012      	beq.n	90008b4a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
90008b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008b28:	d81a      	bhi.n	90008b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008b2a:	2b00      	cmp	r3, #0
90008b2c:	d022      	beq.n	90008b74 <HAL_RCCEx_PeriphCLKConfig+0xc48>
90008b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008b32:	d115      	bne.n	90008b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b38:	3308      	adds	r3, #8
90008b3a:	2100      	movs	r1, #0
90008b3c:	4618      	mov	r0, r3
90008b3e:	f000 fbff 	bl	90009340 <RCCEx_PLL2_Config>
90008b42:	4603      	mov	r3, r0
90008b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008b48:	e015      	b.n	90008b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b4e:	3328      	adds	r3, #40	@ 0x28
90008b50:	2102      	movs	r1, #2
90008b52:	4618      	mov	r0, r3
90008b54:	f000 fca6 	bl	900094a4 <RCCEx_PLL3_Config>
90008b58:	4603      	mov	r3, r0
90008b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008b5e:	e00a      	b.n	90008b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b60:	2301      	movs	r3, #1
90008b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b66:	e006      	b.n	90008b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008b68:	bf00      	nop
90008b6a:	e004      	b.n	90008b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008b6c:	bf00      	nop
90008b6e:	e002      	b.n	90008b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008b70:	bf00      	nop
90008b72:	e000      	b.n	90008b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008b74:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b7a:	2b00      	cmp	r3, #0
90008b7c:	d10b      	bne.n	90008b96 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90008b7e:	4b39      	ldr	r3, [pc, #228]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008b82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90008b8e:	4a35      	ldr	r2, [pc, #212]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008b90:	430b      	orrs	r3, r1
90008b92:	6553      	str	r3, [r2, #84]	@ 0x54
90008b94:	e003      	b.n	90008b9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90008b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ba6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
90008baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
90008bae:	2300      	movs	r3, #0
90008bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90008bb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90008bb8:	460b      	mov	r3, r1
90008bba:	4313      	orrs	r3, r2
90008bbc:	d058      	beq.n	90008c70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90008bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008bc6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008bca:	d033      	beq.n	90008c34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
90008bcc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008bd0:	d82c      	bhi.n	90008c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008bd6:	d02f      	beq.n	90008c38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008bdc:	d826      	bhi.n	90008c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008bde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008be2:	d02b      	beq.n	90008c3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
90008be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
90008be8:	d820      	bhi.n	90008c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008bee:	d012      	beq.n	90008c16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
90008bf4:	d81a      	bhi.n	90008c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008bf6:	2b00      	cmp	r3, #0
90008bf8:	d022      	beq.n	90008c40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
90008bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90008bfe:	d115      	bne.n	90008c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c04:	3308      	adds	r3, #8
90008c06:	2100      	movs	r1, #0
90008c08:	4618      	mov	r0, r3
90008c0a:	f000 fb99 	bl	90009340 <RCCEx_PLL2_Config>
90008c0e:	4603      	mov	r3, r0
90008c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008c14:	e015      	b.n	90008c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c1a:	3328      	adds	r3, #40	@ 0x28
90008c1c:	2102      	movs	r1, #2
90008c1e:	4618      	mov	r0, r3
90008c20:	f000 fc40 	bl	900094a4 <RCCEx_PLL3_Config>
90008c24:	4603      	mov	r3, r0
90008c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008c2a:	e00a      	b.n	90008c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008c2c:	2301      	movs	r3, #1
90008c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c32:	e006      	b.n	90008c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008c34:	bf00      	nop
90008c36:	e004      	b.n	90008c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008c38:	bf00      	nop
90008c3a:	e002      	b.n	90008c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008c3c:	bf00      	nop
90008c3e:	e000      	b.n	90008c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008c40:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c46:	2b00      	cmp	r3, #0
90008c48:	d10e      	bne.n	90008c68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90008c4a:	4b06      	ldr	r3, [pc, #24]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008c4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
90008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008c5a:	4a02      	ldr	r2, [pc, #8]	@ (90008c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008c5c:	430b      	orrs	r3, r1
90008c5e:	6593      	str	r3, [r2, #88]	@ 0x58
90008c60:	e006      	b.n	90008c70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
90008c62:	bf00      	nop
90008c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
90008c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
90008c80:	2300      	movs	r3, #0
90008c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
90008c86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
90008c8a:	460b      	mov	r3, r1
90008c8c:	4313      	orrs	r3, r2
90008c8e:	d055      	beq.n	90008d3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008c98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008c9c:	d033      	beq.n	90008d06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
90008c9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008ca2:	d82c      	bhi.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008ca8:	d02f      	beq.n	90008d0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008cae:	d826      	bhi.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008cb0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008cb4:	d02b      	beq.n	90008d0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
90008cb6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008cba:	d820      	bhi.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008cc0:	d012      	beq.n	90008ce8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90008cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008cc6:	d81a      	bhi.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008cc8:	2b00      	cmp	r3, #0
90008cca:	d022      	beq.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008cd0:	d115      	bne.n	90008cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cd6:	3308      	adds	r3, #8
90008cd8:	2100      	movs	r1, #0
90008cda:	4618      	mov	r0, r3
90008cdc:	f000 fb30 	bl	90009340 <RCCEx_PLL2_Config>
90008ce0:	4603      	mov	r3, r0
90008ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008ce6:	e015      	b.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cec:	3328      	adds	r3, #40	@ 0x28
90008cee:	2102      	movs	r1, #2
90008cf0:	4618      	mov	r0, r3
90008cf2:	f000 fbd7 	bl	900094a4 <RCCEx_PLL3_Config>
90008cf6:	4603      	mov	r3, r0
90008cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008cfc:	e00a      	b.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008cfe:	2301      	movs	r3, #1
90008d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d04:	e006      	b.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008d06:	bf00      	nop
90008d08:	e004      	b.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008d0a:	bf00      	nop
90008d0c:	e002      	b.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008d0e:	bf00      	nop
90008d10:	e000      	b.n	90008d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008d12:	bf00      	nop
    }

    if (ret == HAL_OK)
90008d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d18:	2b00      	cmp	r3, #0
90008d1a:	d10b      	bne.n	90008d34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90008d1c:	4ba1      	ldr	r3, [pc, #644]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008d20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
90008d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008d2c:	4a9d      	ldr	r2, [pc, #628]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d2e:	430b      	orrs	r3, r1
90008d30:	6593      	str	r3, [r2, #88]	@ 0x58
90008d32:	e003      	b.n	90008d3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d44:	f002 0308 	and.w	r3, r2, #8
90008d48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90008d4c:	2300      	movs	r3, #0
90008d4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008d52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008d56:	460b      	mov	r3, r1
90008d58:	4313      	orrs	r3, r2
90008d5a:	d01e      	beq.n	90008d9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008d68:	d10c      	bne.n	90008d84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d6e:	3328      	adds	r3, #40	@ 0x28
90008d70:	2102      	movs	r1, #2
90008d72:	4618      	mov	r0, r3
90008d74:	f000 fb96 	bl	900094a4 <RCCEx_PLL3_Config>
90008d78:	4603      	mov	r3, r0
90008d7a:	2b00      	cmp	r3, #0
90008d7c:	d002      	beq.n	90008d84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90008d7e:	2301      	movs	r3, #1
90008d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008d84:	4b87      	ldr	r3, [pc, #540]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008d88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008d94:	4a83      	ldr	r2, [pc, #524]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008d96:	430b      	orrs	r3, r1
90008d98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008da2:	f002 0310 	and.w	r3, r2, #16
90008da6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90008daa:	2300      	movs	r3, #0
90008dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
90008db0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008db4:	460b      	mov	r3, r1
90008db6:	4313      	orrs	r3, r2
90008db8:	d01e      	beq.n	90008df8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008dc6:	d10c      	bne.n	90008de2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dcc:	3328      	adds	r3, #40	@ 0x28
90008dce:	2102      	movs	r1, #2
90008dd0:	4618      	mov	r0, r3
90008dd2:	f000 fb67 	bl	900094a4 <RCCEx_PLL3_Config>
90008dd6:	4603      	mov	r3, r0
90008dd8:	2b00      	cmp	r3, #0
90008dda:	d002      	beq.n	90008de2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008ddc:	2301      	movs	r3, #1
90008dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008de2:	4b70      	ldr	r3, [pc, #448]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008de6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008df2:	4a6c      	ldr	r2, [pc, #432]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008df4:	430b      	orrs	r3, r1
90008df6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008e08:	2300      	movs	r3, #0
90008e0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90008e0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008e12:	460b      	mov	r3, r1
90008e14:	4313      	orrs	r3, r2
90008e16:	d03e      	beq.n	90008e96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008e24:	d022      	beq.n	90008e6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008e2a:	d81b      	bhi.n	90008e64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008e2c:	2b00      	cmp	r3, #0
90008e2e:	d003      	beq.n	90008e38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008e34:	d00b      	beq.n	90008e4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008e36:	e015      	b.n	90008e64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e3c:	3308      	adds	r3, #8
90008e3e:	2100      	movs	r1, #0
90008e40:	4618      	mov	r0, r3
90008e42:	f000 fa7d 	bl	90009340 <RCCEx_PLL2_Config>
90008e46:	4603      	mov	r3, r0
90008e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008e4c:	e00f      	b.n	90008e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e52:	3328      	adds	r3, #40	@ 0x28
90008e54:	2102      	movs	r1, #2
90008e56:	4618      	mov	r0, r3
90008e58:	f000 fb24 	bl	900094a4 <RCCEx_PLL3_Config>
90008e5c:	4603      	mov	r3, r0
90008e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008e62:	e004      	b.n	90008e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008e64:	2301      	movs	r3, #1
90008e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008e6a:	e000      	b.n	90008e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
90008e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e72:	2b00      	cmp	r3, #0
90008e74:	d10b      	bne.n	90008e8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008e76:	4b4b      	ldr	r3, [pc, #300]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008e7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008e86:	4a47      	ldr	r2, [pc, #284]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008e88:	430b      	orrs	r3, r1
90008e8a:	6593      	str	r3, [r2, #88]	@ 0x58
90008e8c:	e003      	b.n	90008e96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
90008ea4:	2300      	movs	r3, #0
90008ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008ea8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008eac:	460b      	mov	r3, r1
90008eae:	4313      	orrs	r3, r2
90008eb0:	d03b      	beq.n	90008f2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008eba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008ebe:	d01f      	beq.n	90008f00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008ec0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008ec4:	d818      	bhi.n	90008ef8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008eca:	d003      	beq.n	90008ed4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008ed0:	d007      	beq.n	90008ee2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008ed2:	e011      	b.n	90008ef8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008ed4:	4b33      	ldr	r3, [pc, #204]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008ed8:	4a32      	ldr	r2, [pc, #200]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008ee0:	e00f      	b.n	90008f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ee6:	3328      	adds	r3, #40	@ 0x28
90008ee8:	2101      	movs	r1, #1
90008eea:	4618      	mov	r0, r3
90008eec:	f000 fada 	bl	900094a4 <RCCEx_PLL3_Config>
90008ef0:	4603      	mov	r3, r0
90008ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008ef6:	e004      	b.n	90008f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008ef8:	2301      	movs	r3, #1
90008efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008efe:	e000      	b.n	90008f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008f00:	bf00      	nop
    }

    if (ret == HAL_OK)
90008f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f06:	2b00      	cmp	r3, #0
90008f08:	d10b      	bne.n	90008f22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008f0a:	4b26      	ldr	r3, [pc, #152]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008f0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008f1a:	4a22      	ldr	r2, [pc, #136]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008f1c:	430b      	orrs	r3, r1
90008f1e:	6553      	str	r3, [r2, #84]	@ 0x54
90008f20:	e003      	b.n	90008f2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008f36:	673b      	str	r3, [r7, #112]	@ 0x70
90008f38:	2300      	movs	r3, #0
90008f3a:	677b      	str	r3, [r7, #116]	@ 0x74
90008f3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008f40:	460b      	mov	r3, r1
90008f42:	4313      	orrs	r3, r2
90008f44:	d034      	beq.n	90008fb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008f4c:	2b00      	cmp	r3, #0
90008f4e:	d003      	beq.n	90008f58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008f54:	d007      	beq.n	90008f66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008f56:	e011      	b.n	90008f7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008f58:	4b12      	ldr	r3, [pc, #72]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008f5c:	4a11      	ldr	r2, [pc, #68]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008f64:	e00e      	b.n	90008f84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f6a:	3308      	adds	r3, #8
90008f6c:	2102      	movs	r1, #2
90008f6e:	4618      	mov	r0, r3
90008f70:	f000 f9e6 	bl	90009340 <RCCEx_PLL2_Config>
90008f74:	4603      	mov	r3, r0
90008f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008f7a:	e003      	b.n	90008f84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008f7c:	2301      	movs	r3, #1
90008f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008f82:	bf00      	nop
    }

    if (ret == HAL_OK)
90008f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f88:	2b00      	cmp	r3, #0
90008f8a:	d10d      	bne.n	90008fa8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008f8c:	4b05      	ldr	r3, [pc, #20]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008f90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008f9a:	4a02      	ldr	r2, [pc, #8]	@ (90008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008f9c:	430b      	orrs	r3, r1
90008f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008fa0:	e006      	b.n	90008fb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008fa2:	bf00      	nop
90008fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
90008fbe:	2300      	movs	r3, #0
90008fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008fc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008fc6:	460b      	mov	r3, r1
90008fc8:	4313      	orrs	r3, r2
90008fca:	d00c      	beq.n	90008fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fd0:	3328      	adds	r3, #40	@ 0x28
90008fd2:	2102      	movs	r1, #2
90008fd4:	4618      	mov	r0, r3
90008fd6:	f000 fa65 	bl	900094a4 <RCCEx_PLL3_Config>
90008fda:	4603      	mov	r3, r0
90008fdc:	2b00      	cmp	r3, #0
90008fde:	d002      	beq.n	90008fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008fe0:	2301      	movs	r3, #1
90008fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008ff2:	663b      	str	r3, [r7, #96]	@ 0x60
90008ff4:	2300      	movs	r3, #0
90008ff6:	667b      	str	r3, [r7, #100]	@ 0x64
90008ff8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008ffc:	460b      	mov	r3, r1
90008ffe:	4313      	orrs	r3, r2
90009000:	d038      	beq.n	90009074 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90009002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
9000900a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000900e:	d018      	beq.n	90009042 <HAL_RCCEx_PeriphCLKConfig+0x1116>
90009010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90009014:	d811      	bhi.n	9000903a <HAL_RCCEx_PeriphCLKConfig+0x110e>
90009016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000901a:	d014      	beq.n	90009046 <HAL_RCCEx_PeriphCLKConfig+0x111a>
9000901c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90009020:	d80b      	bhi.n	9000903a <HAL_RCCEx_PeriphCLKConfig+0x110e>
90009022:	2b00      	cmp	r3, #0
90009024:	d011      	beq.n	9000904a <HAL_RCCEx_PeriphCLKConfig+0x111e>
90009026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000902a:	d106      	bne.n	9000903a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000902c:	4bc3      	ldr	r3, [pc, #780]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000902e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009030:	4ac2      	ldr	r2, [pc, #776]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90009036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90009038:	e008      	b.n	9000904c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000903a:	2301      	movs	r3, #1
9000903c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90009040:	e004      	b.n	9000904c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90009042:	bf00      	nop
90009044:	e002      	b.n	9000904c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90009046:	bf00      	nop
90009048:	e000      	b.n	9000904c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000904a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000904c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009050:	2b00      	cmp	r3, #0
90009052:	d10b      	bne.n	9000906c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90009054:	4bb9      	ldr	r3, [pc, #740]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009058:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
9000905c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90009064:	4ab5      	ldr	r2, [pc, #724]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009066:	430b      	orrs	r3, r1
90009068:	6553      	str	r3, [r2, #84]	@ 0x54
9000906a:	e003      	b.n	90009074 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000906c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009078:	e9d3 2300 	ldrd	r2, r3, [r3]
9000907c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90009080:	65bb      	str	r3, [r7, #88]	@ 0x58
90009082:	2300      	movs	r3, #0
90009084:	65fb      	str	r3, [r7, #92]	@ 0x5c
90009086:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
9000908a:	460b      	mov	r3, r1
9000908c:	4313      	orrs	r3, r2
9000908e:	d009      	beq.n	900090a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90009090:	4baa      	ldr	r3, [pc, #680]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90009094:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90009098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000909c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
9000909e:	4aa7      	ldr	r2, [pc, #668]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900090a0:	430b      	orrs	r3, r1
900090a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
900090a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
900090ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
900090b0:	653b      	str	r3, [r7, #80]	@ 0x50
900090b2:	2300      	movs	r3, #0
900090b4:	657b      	str	r3, [r7, #84]	@ 0x54
900090b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
900090ba:	460b      	mov	r3, r1
900090bc:	4313      	orrs	r3, r2
900090be:	d00a      	beq.n	900090d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
900090c0:	4b9e      	ldr	r3, [pc, #632]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900090c2:	691b      	ldr	r3, [r3, #16]
900090c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
900090c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
900090d0:	4a9a      	ldr	r2, [pc, #616]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900090d2:	430b      	orrs	r3, r1
900090d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
900090d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090da:	e9d3 2300 	ldrd	r2, r3, [r3]
900090de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
900090e2:	64bb      	str	r3, [r7, #72]	@ 0x48
900090e4:	2300      	movs	r3, #0
900090e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
900090e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
900090ec:	460b      	mov	r3, r1
900090ee:	4313      	orrs	r3, r2
900090f0:	d009      	beq.n	90009106 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
900090f2:	4b92      	ldr	r3, [pc, #584]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900090f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900090f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
900090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900090fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90009100:	4a8e      	ldr	r2, [pc, #568]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009102:	430b      	orrs	r3, r1
90009104:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000910a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000910e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90009112:	643b      	str	r3, [r7, #64]	@ 0x40
90009114:	2300      	movs	r3, #0
90009116:	647b      	str	r3, [r7, #68]	@ 0x44
90009118:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
9000911c:	460b      	mov	r3, r1
9000911e:	4313      	orrs	r3, r2
90009120:	d00e      	beq.n	90009140 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90009122:	4b86      	ldr	r3, [pc, #536]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009124:	691b      	ldr	r3, [r3, #16]
90009126:	4a85      	ldr	r2, [pc, #532]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009128:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000912c:	6113      	str	r3, [r2, #16]
9000912e:	4b83      	ldr	r3, [pc, #524]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90009130:	6919      	ldr	r1, [r3, #16]
90009132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009136:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
9000913a:	4a80      	ldr	r2, [pc, #512]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000913c:	430b      	orrs	r3, r1
9000913e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90009140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009144:	e9d3 2300 	ldrd	r2, r3, [r3]
90009148:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
9000914c:	63bb      	str	r3, [r7, #56]	@ 0x38
9000914e:	2300      	movs	r3, #0
90009150:	63fb      	str	r3, [r7, #60]	@ 0x3c
90009152:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90009156:	460b      	mov	r3, r1
90009158:	4313      	orrs	r3, r2
9000915a:	d009      	beq.n	90009170 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000915c:	4b77      	ldr	r3, [pc, #476]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000915e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90009160:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90009164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000916a:	4a74      	ldr	r2, [pc, #464]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000916c:	430b      	orrs	r3, r1
9000916e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90009170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009174:	e9d3 2300 	ldrd	r2, r3, [r3]
90009178:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
9000917c:	633b      	str	r3, [r7, #48]	@ 0x30
9000917e:	2300      	movs	r3, #0
90009180:	637b      	str	r3, [r7, #52]	@ 0x34
90009182:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90009186:	460b      	mov	r3, r1
90009188:	4313      	orrs	r3, r2
9000918a:	d00a      	beq.n	900091a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000918c:	4b6b      	ldr	r3, [pc, #428]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000918e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009190:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90009194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
9000919c:	4a67      	ldr	r2, [pc, #412]	@ (9000933c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000919e:	430b      	orrs	r3, r1
900091a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
900091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
900091aa:	2100      	movs	r1, #0
900091ac:	62b9      	str	r1, [r7, #40]	@ 0x28
900091ae:	f003 0301 	and.w	r3, r3, #1
900091b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
900091b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
900091b8:	460b      	mov	r3, r1
900091ba:	4313      	orrs	r3, r2
900091bc:	d011      	beq.n	900091e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091c2:	3308      	adds	r3, #8
900091c4:	2100      	movs	r1, #0
900091c6:	4618      	mov	r0, r3
900091c8:	f000 f8ba 	bl	90009340 <RCCEx_PLL2_Config>
900091cc:	4603      	mov	r3, r0
900091ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900091d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091d6:	2b00      	cmp	r3, #0
900091d8:	d003      	beq.n	900091e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900091da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900091de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
900091e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
900091ea:	2100      	movs	r1, #0
900091ec:	6239      	str	r1, [r7, #32]
900091ee:	f003 0302 	and.w	r3, r3, #2
900091f2:	627b      	str	r3, [r7, #36]	@ 0x24
900091f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
900091f8:	460b      	mov	r3, r1
900091fa:	4313      	orrs	r3, r2
900091fc:	d011      	beq.n	90009222 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900091fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009202:	3308      	adds	r3, #8
90009204:	2101      	movs	r1, #1
90009206:	4618      	mov	r0, r3
90009208:	f000 f89a 	bl	90009340 <RCCEx_PLL2_Config>
9000920c:	4603      	mov	r3, r0
9000920e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009216:	2b00      	cmp	r3, #0
90009218:	d003      	beq.n	90009222 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000921a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000921e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009226:	e9d3 2300 	ldrd	r2, r3, [r3]
9000922a:	2100      	movs	r1, #0
9000922c:	61b9      	str	r1, [r7, #24]
9000922e:	f003 0304 	and.w	r3, r3, #4
90009232:	61fb      	str	r3, [r7, #28]
90009234:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90009238:	460b      	mov	r3, r1
9000923a:	4313      	orrs	r3, r2
9000923c:	d011      	beq.n	90009262 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009242:	3308      	adds	r3, #8
90009244:	2102      	movs	r1, #2
90009246:	4618      	mov	r0, r3
90009248:	f000 f87a 	bl	90009340 <RCCEx_PLL2_Config>
9000924c:	4603      	mov	r3, r0
9000924e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009256:	2b00      	cmp	r3, #0
90009258:	d003      	beq.n	90009262 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000925a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000925e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90009262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009266:	e9d3 2300 	ldrd	r2, r3, [r3]
9000926a:	2100      	movs	r1, #0
9000926c:	6139      	str	r1, [r7, #16]
9000926e:	f003 0308 	and.w	r3, r3, #8
90009272:	617b      	str	r3, [r7, #20]
90009274:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90009278:	460b      	mov	r3, r1
9000927a:	4313      	orrs	r3, r2
9000927c:	d011      	beq.n	900092a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000927e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009282:	3328      	adds	r3, #40	@ 0x28
90009284:	2100      	movs	r1, #0
90009286:	4618      	mov	r0, r3
90009288:	f000 f90c 	bl	900094a4 <RCCEx_PLL3_Config>
9000928c:	4603      	mov	r3, r0
9000928e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90009292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009296:	2b00      	cmp	r3, #0
90009298:	d003      	beq.n	900092a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000929a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000929e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
900092a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
900092aa:	2100      	movs	r1, #0
900092ac:	60b9      	str	r1, [r7, #8]
900092ae:	f003 0310 	and.w	r3, r3, #16
900092b2:	60fb      	str	r3, [r7, #12]
900092b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
900092b8:	460b      	mov	r3, r1
900092ba:	4313      	orrs	r3, r2
900092bc:	d011      	beq.n	900092e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900092be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900092c2:	3328      	adds	r3, #40	@ 0x28
900092c4:	2101      	movs	r1, #1
900092c6:	4618      	mov	r0, r3
900092c8:	f000 f8ec 	bl	900094a4 <RCCEx_PLL3_Config>
900092cc:	4603      	mov	r3, r0
900092ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
900092d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900092d6:	2b00      	cmp	r3, #0
900092d8:	d003      	beq.n	900092e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900092da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900092de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
900092e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
900092ea:	2100      	movs	r1, #0
900092ec:	6039      	str	r1, [r7, #0]
900092ee:	f003 0320 	and.w	r3, r3, #32
900092f2:	607b      	str	r3, [r7, #4]
900092f4:	e9d7 1200 	ldrd	r1, r2, [r7]
900092f8:	460b      	mov	r3, r1
900092fa:	4313      	orrs	r3, r2
900092fc:	d011      	beq.n	90009322 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900092fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90009302:	3328      	adds	r3, #40	@ 0x28
90009304:	2102      	movs	r1, #2
90009306:	4618      	mov	r0, r3
90009308:	f000 f8cc 	bl	900094a4 <RCCEx_PLL3_Config>
9000930c:	4603      	mov	r3, r0
9000930e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90009312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90009316:	2b00      	cmp	r3, #0
90009318:	d003      	beq.n	90009322 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
9000931a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000931e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90009322:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90009326:	2b00      	cmp	r3, #0
90009328:	d101      	bne.n	9000932e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
9000932a:	2300      	movs	r3, #0
9000932c:	e000      	b.n	90009330 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
9000932e:	2301      	movs	r3, #1
}
90009330:	4618      	mov	r0, r3
90009332:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90009336:	46bd      	mov	sp, r7
90009338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000933c:	58024400 	.word	0x58024400

90009340 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90009340:	b580      	push	{r7, lr}
90009342:	b084      	sub	sp, #16
90009344:	af00      	add	r7, sp, #0
90009346:	6078      	str	r0, [r7, #4]
90009348:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000934a:	2300      	movs	r3, #0
9000934c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000934e:	4b53      	ldr	r3, [pc, #332]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009352:	f003 0303 	and.w	r3, r3, #3
90009356:	2b03      	cmp	r3, #3
90009358:	d101      	bne.n	9000935e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
9000935a:	2301      	movs	r3, #1
9000935c:	e099      	b.n	90009492 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000935e:	4b4f      	ldr	r3, [pc, #316]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009360:	681b      	ldr	r3, [r3, #0]
90009362:	4a4e      	ldr	r2, [pc, #312]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009364:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
90009368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000936a:	f7f9 fef7 	bl	9000315c <HAL_GetTick>
9000936e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009370:	e008      	b.n	90009384 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90009372:	f7f9 fef3 	bl	9000315c <HAL_GetTick>
90009376:	4602      	mov	r2, r0
90009378:	68bb      	ldr	r3, [r7, #8]
9000937a:	1ad3      	subs	r3, r2, r3
9000937c:	2b02      	cmp	r3, #2
9000937e:	d901      	bls.n	90009384 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90009380:	2303      	movs	r3, #3
90009382:	e086      	b.n	90009492 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009384:	4b45      	ldr	r3, [pc, #276]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009386:	681b      	ldr	r3, [r3, #0]
90009388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000938c:	2b00      	cmp	r3, #0
9000938e:	d1f0      	bne.n	90009372 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90009390:	4b42      	ldr	r3, [pc, #264]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009394:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90009398:	687b      	ldr	r3, [r7, #4]
9000939a:	681b      	ldr	r3, [r3, #0]
9000939c:	031b      	lsls	r3, r3, #12
9000939e:	493f      	ldr	r1, [pc, #252]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
900093a0:	4313      	orrs	r3, r2
900093a2:	628b      	str	r3, [r1, #40]	@ 0x28
900093a4:	687b      	ldr	r3, [r7, #4]
900093a6:	685b      	ldr	r3, [r3, #4]
900093a8:	3b01      	subs	r3, #1
900093aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
900093ae:	687b      	ldr	r3, [r7, #4]
900093b0:	689b      	ldr	r3, [r3, #8]
900093b2:	3b01      	subs	r3, #1
900093b4:	025b      	lsls	r3, r3, #9
900093b6:	b29b      	uxth	r3, r3
900093b8:	431a      	orrs	r2, r3
900093ba:	687b      	ldr	r3, [r7, #4]
900093bc:	68db      	ldr	r3, [r3, #12]
900093be:	3b01      	subs	r3, #1
900093c0:	041b      	lsls	r3, r3, #16
900093c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900093c6:	431a      	orrs	r2, r3
900093c8:	687b      	ldr	r3, [r7, #4]
900093ca:	691b      	ldr	r3, [r3, #16]
900093cc:	3b01      	subs	r3, #1
900093ce:	061b      	lsls	r3, r3, #24
900093d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
900093d4:	4931      	ldr	r1, [pc, #196]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
900093d6:	4313      	orrs	r3, r2
900093d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
900093da:	4b30      	ldr	r3, [pc, #192]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
900093dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900093de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
900093e2:	687b      	ldr	r3, [r7, #4]
900093e4:	695b      	ldr	r3, [r3, #20]
900093e6:	492d      	ldr	r1, [pc, #180]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
900093e8:	4313      	orrs	r3, r2
900093ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
900093ec:	4b2b      	ldr	r3, [pc, #172]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
900093ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900093f0:	f023 0220 	bic.w	r2, r3, #32
900093f4:	687b      	ldr	r3, [r7, #4]
900093f6:	699b      	ldr	r3, [r3, #24]
900093f8:	4928      	ldr	r1, [pc, #160]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
900093fa:	4313      	orrs	r3, r2
900093fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
900093fe:	4b27      	ldr	r3, [pc, #156]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009402:	4a26      	ldr	r2, [pc, #152]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009404:	f023 0310 	bic.w	r3, r3, #16
90009408:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000940a:	4b24      	ldr	r3, [pc, #144]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
9000940c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000940e:	4b24      	ldr	r3, [pc, #144]	@ (900094a0 <RCCEx_PLL2_Config+0x160>)
90009410:	4013      	ands	r3, r2
90009412:	687a      	ldr	r2, [r7, #4]
90009414:	69d2      	ldr	r2, [r2, #28]
90009416:	00d2      	lsls	r2, r2, #3
90009418:	4920      	ldr	r1, [pc, #128]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
9000941a:	4313      	orrs	r3, r2
9000941c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000941e:	4b1f      	ldr	r3, [pc, #124]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009422:	4a1e      	ldr	r2, [pc, #120]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009424:	f043 0310 	orr.w	r3, r3, #16
90009428:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000942a:	683b      	ldr	r3, [r7, #0]
9000942c:	2b00      	cmp	r3, #0
9000942e:	d106      	bne.n	9000943e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90009430:	4b1a      	ldr	r3, [pc, #104]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009434:	4a19      	ldr	r2, [pc, #100]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009436:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
9000943a:	62d3      	str	r3, [r2, #44]	@ 0x2c
9000943c:	e00f      	b.n	9000945e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000943e:	683b      	ldr	r3, [r7, #0]
90009440:	2b01      	cmp	r3, #1
90009442:	d106      	bne.n	90009452 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90009444:	4b15      	ldr	r3, [pc, #84]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009448:	4a14      	ldr	r2, [pc, #80]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
9000944a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
9000944e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009450:	e005      	b.n	9000945e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
90009452:	4b12      	ldr	r3, [pc, #72]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009456:	4a11      	ldr	r2, [pc, #68]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009458:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
9000945c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000945e:	4b0f      	ldr	r3, [pc, #60]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009460:	681b      	ldr	r3, [r3, #0]
90009462:	4a0e      	ldr	r2, [pc, #56]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009464:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
90009468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000946a:	f7f9 fe77 	bl	9000315c <HAL_GetTick>
9000946e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009470:	e008      	b.n	90009484 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90009472:	f7f9 fe73 	bl	9000315c <HAL_GetTick>
90009476:	4602      	mov	r2, r0
90009478:	68bb      	ldr	r3, [r7, #8]
9000947a:	1ad3      	subs	r3, r2, r3
9000947c:	2b02      	cmp	r3, #2
9000947e:	d901      	bls.n	90009484 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90009480:	2303      	movs	r3, #3
90009482:	e006      	b.n	90009492 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009484:	4b05      	ldr	r3, [pc, #20]	@ (9000949c <RCCEx_PLL2_Config+0x15c>)
90009486:	681b      	ldr	r3, [r3, #0]
90009488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
9000948c:	2b00      	cmp	r3, #0
9000948e:	d0f0      	beq.n	90009472 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90009490:	7bfb      	ldrb	r3, [r7, #15]
}
90009492:	4618      	mov	r0, r3
90009494:	3710      	adds	r7, #16
90009496:	46bd      	mov	sp, r7
90009498:	bd80      	pop	{r7, pc}
9000949a:	bf00      	nop
9000949c:	58024400 	.word	0x58024400
900094a0:	ffff0007 	.word	0xffff0007

900094a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
900094a4:	b580      	push	{r7, lr}
900094a6:	b084      	sub	sp, #16
900094a8:	af00      	add	r7, sp, #0
900094aa:	6078      	str	r0, [r7, #4]
900094ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900094ae:	2300      	movs	r3, #0
900094b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900094b2:	4b53      	ldr	r3, [pc, #332]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900094b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900094b6:	f003 0303 	and.w	r3, r3, #3
900094ba:	2b03      	cmp	r3, #3
900094bc:	d101      	bne.n	900094c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
900094be:	2301      	movs	r3, #1
900094c0:	e099      	b.n	900095f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
900094c2:	4b4f      	ldr	r3, [pc, #316]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900094c4:	681b      	ldr	r3, [r3, #0]
900094c6:	4a4e      	ldr	r2, [pc, #312]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900094c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
900094cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900094ce:	f7f9 fe45 	bl	9000315c <HAL_GetTick>
900094d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
900094d4:	e008      	b.n	900094e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
900094d6:	f7f9 fe41 	bl	9000315c <HAL_GetTick>
900094da:	4602      	mov	r2, r0
900094dc:	68bb      	ldr	r3, [r7, #8]
900094de:	1ad3      	subs	r3, r2, r3
900094e0:	2b02      	cmp	r3, #2
900094e2:	d901      	bls.n	900094e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
900094e4:	2303      	movs	r3, #3
900094e6:	e086      	b.n	900095f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
900094e8:	4b45      	ldr	r3, [pc, #276]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900094ea:	681b      	ldr	r3, [r3, #0]
900094ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900094f0:	2b00      	cmp	r3, #0
900094f2:	d1f0      	bne.n	900094d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
900094f4:	4b42      	ldr	r3, [pc, #264]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900094f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900094f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
900094fc:	687b      	ldr	r3, [r7, #4]
900094fe:	681b      	ldr	r3, [r3, #0]
90009500:	051b      	lsls	r3, r3, #20
90009502:	493f      	ldr	r1, [pc, #252]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009504:	4313      	orrs	r3, r2
90009506:	628b      	str	r3, [r1, #40]	@ 0x28
90009508:	687b      	ldr	r3, [r7, #4]
9000950a:	685b      	ldr	r3, [r3, #4]
9000950c:	3b01      	subs	r3, #1
9000950e:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009512:	687b      	ldr	r3, [r7, #4]
90009514:	689b      	ldr	r3, [r3, #8]
90009516:	3b01      	subs	r3, #1
90009518:	025b      	lsls	r3, r3, #9
9000951a:	b29b      	uxth	r3, r3
9000951c:	431a      	orrs	r2, r3
9000951e:	687b      	ldr	r3, [r7, #4]
90009520:	68db      	ldr	r3, [r3, #12]
90009522:	3b01      	subs	r3, #1
90009524:	041b      	lsls	r3, r3, #16
90009526:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000952a:	431a      	orrs	r2, r3
9000952c:	687b      	ldr	r3, [r7, #4]
9000952e:	691b      	ldr	r3, [r3, #16]
90009530:	3b01      	subs	r3, #1
90009532:	061b      	lsls	r3, r3, #24
90009534:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009538:	4931      	ldr	r1, [pc, #196]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
9000953a:	4313      	orrs	r3, r2
9000953c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000953e:	4b30      	ldr	r3, [pc, #192]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009542:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
90009546:	687b      	ldr	r3, [r7, #4]
90009548:	695b      	ldr	r3, [r3, #20]
9000954a:	492d      	ldr	r1, [pc, #180]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
9000954c:	4313      	orrs	r3, r2
9000954e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90009550:	4b2b      	ldr	r3, [pc, #172]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009554:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
90009558:	687b      	ldr	r3, [r7, #4]
9000955a:	699b      	ldr	r3, [r3, #24]
9000955c:	4928      	ldr	r1, [pc, #160]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
9000955e:	4313      	orrs	r3, r2
90009560:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
90009562:	4b27      	ldr	r3, [pc, #156]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009566:	4a26      	ldr	r2, [pc, #152]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
9000956c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000956e:	4b24      	ldr	r3, [pc, #144]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90009572:	4b24      	ldr	r3, [pc, #144]	@ (90009604 <RCCEx_PLL3_Config+0x160>)
90009574:	4013      	ands	r3, r2
90009576:	687a      	ldr	r2, [r7, #4]
90009578:	69d2      	ldr	r2, [r2, #28]
9000957a:	00d2      	lsls	r2, r2, #3
9000957c:	4920      	ldr	r1, [pc, #128]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
9000957e:	4313      	orrs	r3, r2
90009580:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
90009582:	4b1f      	ldr	r3, [pc, #124]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009586:	4a1e      	ldr	r2, [pc, #120]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000958c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000958e:	683b      	ldr	r3, [r7, #0]
90009590:	2b00      	cmp	r3, #0
90009592:	d106      	bne.n	900095a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90009594:	4b1a      	ldr	r3, [pc, #104]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
90009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009598:	4a19      	ldr	r2, [pc, #100]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
9000959a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
9000959e:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095a0:	e00f      	b.n	900095c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900095a2:	683b      	ldr	r3, [r7, #0]
900095a4:	2b01      	cmp	r3, #1
900095a6:	d106      	bne.n	900095b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
900095a8:	4b15      	ldr	r3, [pc, #84]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095ac:	4a14      	ldr	r2, [pc, #80]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900095ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
900095b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
900095b4:	e005      	b.n	900095c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
900095b6:	4b12      	ldr	r3, [pc, #72]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900095ba:	4a11      	ldr	r2, [pc, #68]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900095bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
900095c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
900095c2:	4b0f      	ldr	r3, [pc, #60]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900095c4:	681b      	ldr	r3, [r3, #0]
900095c6:	4a0e      	ldr	r2, [pc, #56]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900095c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
900095cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900095ce:	f7f9 fdc5 	bl	9000315c <HAL_GetTick>
900095d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
900095d4:	e008      	b.n	900095e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
900095d6:	f7f9 fdc1 	bl	9000315c <HAL_GetTick>
900095da:	4602      	mov	r2, r0
900095dc:	68bb      	ldr	r3, [r7, #8]
900095de:	1ad3      	subs	r3, r2, r3
900095e0:	2b02      	cmp	r3, #2
900095e2:	d901      	bls.n	900095e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
900095e4:	2303      	movs	r3, #3
900095e6:	e006      	b.n	900095f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
900095e8:	4b05      	ldr	r3, [pc, #20]	@ (90009600 <RCCEx_PLL3_Config+0x15c>)
900095ea:	681b      	ldr	r3, [r3, #0]
900095ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900095f0:	2b00      	cmp	r3, #0
900095f2:	d0f0      	beq.n	900095d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
900095f4:	7bfb      	ldrb	r3, [r7, #15]
}
900095f6:	4618      	mov	r0, r3
900095f8:	3710      	adds	r7, #16
900095fa:	46bd      	mov	sp, r7
900095fc:	bd80      	pop	{r7, pc}
900095fe:	bf00      	nop
90009600:	58024400 	.word	0x58024400
90009604:	ffff0007 	.word	0xffff0007

90009608 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90009608:	b580      	push	{r7, lr}
9000960a:	b082      	sub	sp, #8
9000960c:	af00      	add	r7, sp, #0
9000960e:	6078      	str	r0, [r7, #4]
90009610:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
90009612:	687b      	ldr	r3, [r7, #4]
90009614:	2b00      	cmp	r3, #0
90009616:	d101      	bne.n	9000961c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90009618:	2301      	movs	r3, #1
9000961a:	e02b      	b.n	90009674 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000961c:	687b      	ldr	r3, [r7, #4]
9000961e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009622:	b2db      	uxtb	r3, r3
90009624:	2b00      	cmp	r3, #0
90009626:	d106      	bne.n	90009636 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90009628:	687b      	ldr	r3, [r7, #4]
9000962a:	2200      	movs	r2, #0
9000962c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90009630:	6878      	ldr	r0, [r7, #4]
90009632:	f000 f825 	bl	90009680 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90009636:	687b      	ldr	r3, [r7, #4]
90009638:	2202      	movs	r2, #2
9000963a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000963e:	687b      	ldr	r3, [r7, #4]
90009640:	681a      	ldr	r2, [r3, #0]
90009642:	687b      	ldr	r3, [r7, #4]
90009644:	3304      	adds	r3, #4
90009646:	4619      	mov	r1, r3
90009648:	4610      	mov	r0, r2
9000964a:	f000 f9e7 	bl	90009a1c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000964e:	687b      	ldr	r3, [r7, #4]
90009650:	6818      	ldr	r0, [r3, #0]
90009652:	687b      	ldr	r3, [r7, #4]
90009654:	685b      	ldr	r3, [r3, #4]
90009656:	461a      	mov	r2, r3
90009658:	6839      	ldr	r1, [r7, #0]
9000965a:	f000 fa3b 	bl	90009ad4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000965e:	4b07      	ldr	r3, [pc, #28]	@ (9000967c <HAL_SDRAM_Init+0x74>)
90009660:	681b      	ldr	r3, [r3, #0]
90009662:	4a06      	ldr	r2, [pc, #24]	@ (9000967c <HAL_SDRAM_Init+0x74>)
90009664:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009668:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000966a:	687b      	ldr	r3, [r7, #4]
9000966c:	2201      	movs	r2, #1
9000966e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
90009672:	2300      	movs	r3, #0
}
90009674:	4618      	mov	r0, r3
90009676:	3708      	adds	r7, #8
90009678:	46bd      	mov	sp, r7
9000967a:	bd80      	pop	{r7, pc}
9000967c:	52004000 	.word	0x52004000

90009680 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
90009680:	b480      	push	{r7}
90009682:	b083      	sub	sp, #12
90009684:	af00      	add	r7, sp, #0
90009686:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009688:	bf00      	nop
9000968a:	370c      	adds	r7, #12
9000968c:	46bd      	mov	sp, r7
9000968e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009692:	4770      	bx	lr

90009694 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
90009694:	b580      	push	{r7, lr}
90009696:	b086      	sub	sp, #24
90009698:	af00      	add	r7, sp, #0
9000969a:	60f8      	str	r0, [r7, #12]
9000969c:	60b9      	str	r1, [r7, #8]
9000969e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
900096a0:	68fb      	ldr	r3, [r7, #12]
900096a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900096a6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
900096a8:	7dfb      	ldrb	r3, [r7, #23]
900096aa:	2b02      	cmp	r3, #2
900096ac:	d101      	bne.n	900096b2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
900096ae:	2302      	movs	r3, #2
900096b0:	e021      	b.n	900096f6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
900096b2:	7dfb      	ldrb	r3, [r7, #23]
900096b4:	2b01      	cmp	r3, #1
900096b6:	d002      	beq.n	900096be <HAL_SDRAM_SendCommand+0x2a>
900096b8:	7dfb      	ldrb	r3, [r7, #23]
900096ba:	2b05      	cmp	r3, #5
900096bc:	d118      	bne.n	900096f0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900096be:	68fb      	ldr	r3, [r7, #12]
900096c0:	2202      	movs	r2, #2
900096c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900096c6:	68fb      	ldr	r3, [r7, #12]
900096c8:	681b      	ldr	r3, [r3, #0]
900096ca:	687a      	ldr	r2, [r7, #4]
900096cc:	68b9      	ldr	r1, [r7, #8]
900096ce:	4618      	mov	r0, r3
900096d0:	f000 fa6a 	bl	90009ba8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900096d4:	68bb      	ldr	r3, [r7, #8]
900096d6:	681b      	ldr	r3, [r3, #0]
900096d8:	2b02      	cmp	r3, #2
900096da:	d104      	bne.n	900096e6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
900096dc:	68fb      	ldr	r3, [r7, #12]
900096de:	2205      	movs	r2, #5
900096e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900096e4:	e006      	b.n	900096f4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
900096e6:	68fb      	ldr	r3, [r7, #12]
900096e8:	2201      	movs	r2, #1
900096ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
900096ee:	e001      	b.n	900096f4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
900096f0:	2301      	movs	r3, #1
900096f2:	e000      	b.n	900096f6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
900096f4:	2300      	movs	r3, #0
}
900096f6:	4618      	mov	r0, r3
900096f8:	3718      	adds	r7, #24
900096fa:	46bd      	mov	sp, r7
900096fc:	bd80      	pop	{r7, pc}

900096fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
900096fe:	b580      	push	{r7, lr}
90009700:	b082      	sub	sp, #8
90009702:	af00      	add	r7, sp, #0
90009704:	6078      	str	r0, [r7, #4]
90009706:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90009708:	687b      	ldr	r3, [r7, #4]
9000970a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000970e:	b2db      	uxtb	r3, r3
90009710:	2b02      	cmp	r3, #2
90009712:	d101      	bne.n	90009718 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90009714:	2302      	movs	r3, #2
90009716:	e016      	b.n	90009746 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90009718:	687b      	ldr	r3, [r7, #4]
9000971a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000971e:	b2db      	uxtb	r3, r3
90009720:	2b01      	cmp	r3, #1
90009722:	d10f      	bne.n	90009744 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009724:	687b      	ldr	r3, [r7, #4]
90009726:	2202      	movs	r2, #2
90009728:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000972c:	687b      	ldr	r3, [r7, #4]
9000972e:	681b      	ldr	r3, [r3, #0]
90009730:	6839      	ldr	r1, [r7, #0]
90009732:	4618      	mov	r0, r3
90009734:	f000 fa5c 	bl	90009bf0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90009738:	687b      	ldr	r3, [r7, #4]
9000973a:	2201      	movs	r2, #1
9000973c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
90009740:	2300      	movs	r3, #0
90009742:	e000      	b.n	90009746 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90009744:	2301      	movs	r3, #1
}
90009746:	4618      	mov	r0, r3
90009748:	3708      	adds	r7, #8
9000974a:	46bd      	mov	sp, r7
9000974c:	bd80      	pop	{r7, pc}

9000974e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
9000974e:	b580      	push	{r7, lr}
90009750:	b082      	sub	sp, #8
90009752:	af00      	add	r7, sp, #0
90009754:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90009756:	687b      	ldr	r3, [r7, #4]
90009758:	2b00      	cmp	r3, #0
9000975a:	d101      	bne.n	90009760 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
9000975c:	2301      	movs	r3, #1
9000975e:	e049      	b.n	900097f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90009760:	687b      	ldr	r3, [r7, #4]
90009762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
90009766:	b2db      	uxtb	r3, r3
90009768:	2b00      	cmp	r3, #0
9000976a:	d106      	bne.n	9000977a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
9000976c:	687b      	ldr	r3, [r7, #4]
9000976e:	2200      	movs	r2, #0
90009770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
90009774:	6878      	ldr	r0, [r7, #4]
90009776:	f000 f89d 	bl	900098b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000977a:	687b      	ldr	r3, [r7, #4]
9000977c:	2202      	movs	r2, #2
9000977e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90009782:	687b      	ldr	r3, [r7, #4]
90009784:	681a      	ldr	r2, [r3, #0]
90009786:	687b      	ldr	r3, [r7, #4]
90009788:	3304      	adds	r3, #4
9000978a:	4619      	mov	r1, r3
9000978c:	4610      	mov	r0, r2
9000978e:	f000 f8a5 	bl	900098dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90009792:	687b      	ldr	r3, [r7, #4]
90009794:	2201      	movs	r2, #1
90009796:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000979a:	687b      	ldr	r3, [r7, #4]
9000979c:	2201      	movs	r2, #1
9000979e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900097a2:	687b      	ldr	r3, [r7, #4]
900097a4:	2201      	movs	r2, #1
900097a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900097aa:	687b      	ldr	r3, [r7, #4]
900097ac:	2201      	movs	r2, #1
900097ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900097b2:	687b      	ldr	r3, [r7, #4]
900097b4:	2201      	movs	r2, #1
900097b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
900097ba:	687b      	ldr	r3, [r7, #4]
900097bc:	2201      	movs	r2, #1
900097be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
900097c2:	687b      	ldr	r3, [r7, #4]
900097c4:	2201      	movs	r2, #1
900097c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900097ca:	687b      	ldr	r3, [r7, #4]
900097cc:	2201      	movs	r2, #1
900097ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
900097d2:	687b      	ldr	r3, [r7, #4]
900097d4:	2201      	movs	r2, #1
900097d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
900097da:	687b      	ldr	r3, [r7, #4]
900097dc:	2201      	movs	r2, #1
900097de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
900097e2:	687b      	ldr	r3, [r7, #4]
900097e4:	2201      	movs	r2, #1
900097e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
900097ea:	687b      	ldr	r3, [r7, #4]
900097ec:	2201      	movs	r2, #1
900097ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
900097f2:	2300      	movs	r3, #0
}
900097f4:	4618      	mov	r0, r3
900097f6:	3708      	adds	r7, #8
900097f8:	46bd      	mov	sp, r7
900097fa:	bd80      	pop	{r7, pc}

900097fc <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
900097fc:	b580      	push	{r7, lr}
900097fe:	b082      	sub	sp, #8
90009800:	af00      	add	r7, sp, #0
90009802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
90009804:	687b      	ldr	r3, [r7, #4]
90009806:	2202      	movs	r2, #2
90009808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
9000980c:	687b      	ldr	r3, [r7, #4]
9000980e:	681b      	ldr	r3, [r3, #0]
90009810:	6a1a      	ldr	r2, [r3, #32]
90009812:	f241 1311 	movw	r3, #4369	@ 0x1111
90009816:	4013      	ands	r3, r2
90009818:	2b00      	cmp	r3, #0
9000981a:	d10f      	bne.n	9000983c <HAL_TIM_PWM_DeInit+0x40>
9000981c:	687b      	ldr	r3, [r7, #4]
9000981e:	681b      	ldr	r3, [r3, #0]
90009820:	6a1a      	ldr	r2, [r3, #32]
90009822:	f240 4344 	movw	r3, #1092	@ 0x444
90009826:	4013      	ands	r3, r2
90009828:	2b00      	cmp	r3, #0
9000982a:	d107      	bne.n	9000983c <HAL_TIM_PWM_DeInit+0x40>
9000982c:	687b      	ldr	r3, [r7, #4]
9000982e:	681b      	ldr	r3, [r3, #0]
90009830:	681a      	ldr	r2, [r3, #0]
90009832:	687b      	ldr	r3, [r7, #4]
90009834:	681b      	ldr	r3, [r3, #0]
90009836:	f022 0201 	bic.w	r2, r2, #1
9000983a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
9000983c:	6878      	ldr	r0, [r7, #4]
9000983e:	f000 f843 	bl	900098c8 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
90009842:	687b      	ldr	r3, [r7, #4]
90009844:	2200      	movs	r2, #0
90009846:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000984a:	687b      	ldr	r3, [r7, #4]
9000984c:	2200      	movs	r2, #0
9000984e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009852:	687b      	ldr	r3, [r7, #4]
90009854:	2200      	movs	r2, #0
90009856:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
9000985a:	687b      	ldr	r3, [r7, #4]
9000985c:	2200      	movs	r2, #0
9000985e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009862:	687b      	ldr	r3, [r7, #4]
90009864:	2200      	movs	r2, #0
90009866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
9000986a:	687b      	ldr	r3, [r7, #4]
9000986c:	2200      	movs	r2, #0
9000986e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009872:	687b      	ldr	r3, [r7, #4]
90009874:	2200      	movs	r2, #0
90009876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
9000987a:	687b      	ldr	r3, [r7, #4]
9000987c:	2200      	movs	r2, #0
9000987e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009882:	687b      	ldr	r3, [r7, #4]
90009884:	2200      	movs	r2, #0
90009886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
9000988a:	687b      	ldr	r3, [r7, #4]
9000988c:	2200      	movs	r2, #0
9000988e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009892:	687b      	ldr	r3, [r7, #4]
90009894:	2200      	movs	r2, #0
90009896:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
9000989a:	687b      	ldr	r3, [r7, #4]
9000989c:	2200      	movs	r2, #0
9000989e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
900098a2:	687b      	ldr	r3, [r7, #4]
900098a4:	2200      	movs	r2, #0
900098a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
900098aa:	2300      	movs	r3, #0
}
900098ac:	4618      	mov	r0, r3
900098ae:	3708      	adds	r7, #8
900098b0:	46bd      	mov	sp, r7
900098b2:	bd80      	pop	{r7, pc}

900098b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
900098b4:	b480      	push	{r7}
900098b6:	b083      	sub	sp, #12
900098b8:	af00      	add	r7, sp, #0
900098ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
900098bc:	bf00      	nop
900098be:	370c      	adds	r7, #12
900098c0:	46bd      	mov	sp, r7
900098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900098c6:	4770      	bx	lr

900098c8 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
900098c8:	b480      	push	{r7}
900098ca:	b083      	sub	sp, #12
900098cc:	af00      	add	r7, sp, #0
900098ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
900098d0:	bf00      	nop
900098d2:	370c      	adds	r7, #12
900098d4:	46bd      	mov	sp, r7
900098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
900098da:	4770      	bx	lr

900098dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
900098dc:	b480      	push	{r7}
900098de:	b085      	sub	sp, #20
900098e0:	af00      	add	r7, sp, #0
900098e2:	6078      	str	r0, [r7, #4]
900098e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
900098e6:	687b      	ldr	r3, [r7, #4]
900098e8:	681b      	ldr	r3, [r3, #0]
900098ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
900098ec:	687b      	ldr	r3, [r7, #4]
900098ee:	4a43      	ldr	r2, [pc, #268]	@ (900099fc <TIM_Base_SetConfig+0x120>)
900098f0:	4293      	cmp	r3, r2
900098f2:	d013      	beq.n	9000991c <TIM_Base_SetConfig+0x40>
900098f4:	687b      	ldr	r3, [r7, #4]
900098f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900098fa:	d00f      	beq.n	9000991c <TIM_Base_SetConfig+0x40>
900098fc:	687b      	ldr	r3, [r7, #4]
900098fe:	4a40      	ldr	r2, [pc, #256]	@ (90009a00 <TIM_Base_SetConfig+0x124>)
90009900:	4293      	cmp	r3, r2
90009902:	d00b      	beq.n	9000991c <TIM_Base_SetConfig+0x40>
90009904:	687b      	ldr	r3, [r7, #4]
90009906:	4a3f      	ldr	r2, [pc, #252]	@ (90009a04 <TIM_Base_SetConfig+0x128>)
90009908:	4293      	cmp	r3, r2
9000990a:	d007      	beq.n	9000991c <TIM_Base_SetConfig+0x40>
9000990c:	687b      	ldr	r3, [r7, #4]
9000990e:	4a3e      	ldr	r2, [pc, #248]	@ (90009a08 <TIM_Base_SetConfig+0x12c>)
90009910:	4293      	cmp	r3, r2
90009912:	d003      	beq.n	9000991c <TIM_Base_SetConfig+0x40>
90009914:	687b      	ldr	r3, [r7, #4]
90009916:	4a3d      	ldr	r2, [pc, #244]	@ (90009a0c <TIM_Base_SetConfig+0x130>)
90009918:	4293      	cmp	r3, r2
9000991a:	d108      	bne.n	9000992e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000991c:	68fb      	ldr	r3, [r7, #12]
9000991e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
90009922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90009924:	683b      	ldr	r3, [r7, #0]
90009926:	685b      	ldr	r3, [r3, #4]
90009928:	68fa      	ldr	r2, [r7, #12]
9000992a:	4313      	orrs	r3, r2
9000992c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000992e:	687b      	ldr	r3, [r7, #4]
90009930:	4a32      	ldr	r2, [pc, #200]	@ (900099fc <TIM_Base_SetConfig+0x120>)
90009932:	4293      	cmp	r3, r2
90009934:	d01f      	beq.n	90009976 <TIM_Base_SetConfig+0x9a>
90009936:	687b      	ldr	r3, [r7, #4]
90009938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000993c:	d01b      	beq.n	90009976 <TIM_Base_SetConfig+0x9a>
9000993e:	687b      	ldr	r3, [r7, #4]
90009940:	4a2f      	ldr	r2, [pc, #188]	@ (90009a00 <TIM_Base_SetConfig+0x124>)
90009942:	4293      	cmp	r3, r2
90009944:	d017      	beq.n	90009976 <TIM_Base_SetConfig+0x9a>
90009946:	687b      	ldr	r3, [r7, #4]
90009948:	4a2e      	ldr	r2, [pc, #184]	@ (90009a04 <TIM_Base_SetConfig+0x128>)
9000994a:	4293      	cmp	r3, r2
9000994c:	d013      	beq.n	90009976 <TIM_Base_SetConfig+0x9a>
9000994e:	687b      	ldr	r3, [r7, #4]
90009950:	4a2d      	ldr	r2, [pc, #180]	@ (90009a08 <TIM_Base_SetConfig+0x12c>)
90009952:	4293      	cmp	r3, r2
90009954:	d00f      	beq.n	90009976 <TIM_Base_SetConfig+0x9a>
90009956:	687b      	ldr	r3, [r7, #4]
90009958:	4a2c      	ldr	r2, [pc, #176]	@ (90009a0c <TIM_Base_SetConfig+0x130>)
9000995a:	4293      	cmp	r3, r2
9000995c:	d00b      	beq.n	90009976 <TIM_Base_SetConfig+0x9a>
9000995e:	687b      	ldr	r3, [r7, #4]
90009960:	4a2b      	ldr	r2, [pc, #172]	@ (90009a10 <TIM_Base_SetConfig+0x134>)
90009962:	4293      	cmp	r3, r2
90009964:	d007      	beq.n	90009976 <TIM_Base_SetConfig+0x9a>
90009966:	687b      	ldr	r3, [r7, #4]
90009968:	4a2a      	ldr	r2, [pc, #168]	@ (90009a14 <TIM_Base_SetConfig+0x138>)
9000996a:	4293      	cmp	r3, r2
9000996c:	d003      	beq.n	90009976 <TIM_Base_SetConfig+0x9a>
9000996e:	687b      	ldr	r3, [r7, #4]
90009970:	4a29      	ldr	r2, [pc, #164]	@ (90009a18 <TIM_Base_SetConfig+0x13c>)
90009972:	4293      	cmp	r3, r2
90009974:	d108      	bne.n	90009988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009976:	68fb      	ldr	r3, [r7, #12]
90009978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000997c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000997e:	683b      	ldr	r3, [r7, #0]
90009980:	68db      	ldr	r3, [r3, #12]
90009982:	68fa      	ldr	r2, [r7, #12]
90009984:	4313      	orrs	r3, r2
90009986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009988:	68fb      	ldr	r3, [r7, #12]
9000998a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
9000998e:	683b      	ldr	r3, [r7, #0]
90009990:	695b      	ldr	r3, [r3, #20]
90009992:	4313      	orrs	r3, r2
90009994:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009996:	683b      	ldr	r3, [r7, #0]
90009998:	689a      	ldr	r2, [r3, #8]
9000999a:	687b      	ldr	r3, [r7, #4]
9000999c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000999e:	683b      	ldr	r3, [r7, #0]
900099a0:	681a      	ldr	r2, [r3, #0]
900099a2:	687b      	ldr	r3, [r7, #4]
900099a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
900099a6:	687b      	ldr	r3, [r7, #4]
900099a8:	4a14      	ldr	r2, [pc, #80]	@ (900099fc <TIM_Base_SetConfig+0x120>)
900099aa:	4293      	cmp	r3, r2
900099ac:	d00f      	beq.n	900099ce <TIM_Base_SetConfig+0xf2>
900099ae:	687b      	ldr	r3, [r7, #4]
900099b0:	4a16      	ldr	r2, [pc, #88]	@ (90009a0c <TIM_Base_SetConfig+0x130>)
900099b2:	4293      	cmp	r3, r2
900099b4:	d00b      	beq.n	900099ce <TIM_Base_SetConfig+0xf2>
900099b6:	687b      	ldr	r3, [r7, #4]
900099b8:	4a15      	ldr	r2, [pc, #84]	@ (90009a10 <TIM_Base_SetConfig+0x134>)
900099ba:	4293      	cmp	r3, r2
900099bc:	d007      	beq.n	900099ce <TIM_Base_SetConfig+0xf2>
900099be:	687b      	ldr	r3, [r7, #4]
900099c0:	4a14      	ldr	r2, [pc, #80]	@ (90009a14 <TIM_Base_SetConfig+0x138>)
900099c2:	4293      	cmp	r3, r2
900099c4:	d003      	beq.n	900099ce <TIM_Base_SetConfig+0xf2>
900099c6:	687b      	ldr	r3, [r7, #4]
900099c8:	4a13      	ldr	r2, [pc, #76]	@ (90009a18 <TIM_Base_SetConfig+0x13c>)
900099ca:	4293      	cmp	r3, r2
900099cc:	d103      	bne.n	900099d6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
900099ce:	683b      	ldr	r3, [r7, #0]
900099d0:	691a      	ldr	r2, [r3, #16]
900099d2:	687b      	ldr	r3, [r7, #4]
900099d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
900099d6:	687b      	ldr	r3, [r7, #4]
900099d8:	681b      	ldr	r3, [r3, #0]
900099da:	f043 0204 	orr.w	r2, r3, #4
900099de:	687b      	ldr	r3, [r7, #4]
900099e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
900099e2:	687b      	ldr	r3, [r7, #4]
900099e4:	2201      	movs	r2, #1
900099e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
900099e8:	687b      	ldr	r3, [r7, #4]
900099ea:	68fa      	ldr	r2, [r7, #12]
900099ec:	601a      	str	r2, [r3, #0]
}
900099ee:	bf00      	nop
900099f0:	3714      	adds	r7, #20
900099f2:	46bd      	mov	sp, r7
900099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
900099f8:	4770      	bx	lr
900099fa:	bf00      	nop
900099fc:	40010000 	.word	0x40010000
90009a00:	40000400 	.word	0x40000400
90009a04:	40000800 	.word	0x40000800
90009a08:	40000c00 	.word	0x40000c00
90009a0c:	40010400 	.word	0x40010400
90009a10:	40014000 	.word	0x40014000
90009a14:	40014400 	.word	0x40014400
90009a18:	40014800 	.word	0x40014800

90009a1c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
90009a1c:	b480      	push	{r7}
90009a1e:	b083      	sub	sp, #12
90009a20:	af00      	add	r7, sp, #0
90009a22:	6078      	str	r0, [r7, #4]
90009a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
90009a26:	683b      	ldr	r3, [r7, #0]
90009a28:	681b      	ldr	r3, [r3, #0]
90009a2a:	2b00      	cmp	r3, #0
90009a2c:	d121      	bne.n	90009a72 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
90009a2e:	687b      	ldr	r3, [r7, #4]
90009a30:	681a      	ldr	r2, [r3, #0]
90009a32:	4b27      	ldr	r3, [pc, #156]	@ (90009ad0 <FMC_SDRAM_Init+0xb4>)
90009a34:	4013      	ands	r3, r2
90009a36:	683a      	ldr	r2, [r7, #0]
90009a38:	6851      	ldr	r1, [r2, #4]
90009a3a:	683a      	ldr	r2, [r7, #0]
90009a3c:	6892      	ldr	r2, [r2, #8]
90009a3e:	4311      	orrs	r1, r2
90009a40:	683a      	ldr	r2, [r7, #0]
90009a42:	68d2      	ldr	r2, [r2, #12]
90009a44:	4311      	orrs	r1, r2
90009a46:	683a      	ldr	r2, [r7, #0]
90009a48:	6912      	ldr	r2, [r2, #16]
90009a4a:	4311      	orrs	r1, r2
90009a4c:	683a      	ldr	r2, [r7, #0]
90009a4e:	6952      	ldr	r2, [r2, #20]
90009a50:	4311      	orrs	r1, r2
90009a52:	683a      	ldr	r2, [r7, #0]
90009a54:	6992      	ldr	r2, [r2, #24]
90009a56:	4311      	orrs	r1, r2
90009a58:	683a      	ldr	r2, [r7, #0]
90009a5a:	69d2      	ldr	r2, [r2, #28]
90009a5c:	4311      	orrs	r1, r2
90009a5e:	683a      	ldr	r2, [r7, #0]
90009a60:	6a12      	ldr	r2, [r2, #32]
90009a62:	4311      	orrs	r1, r2
90009a64:	683a      	ldr	r2, [r7, #0]
90009a66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
90009a68:	430a      	orrs	r2, r1
90009a6a:	431a      	orrs	r2, r3
90009a6c:	687b      	ldr	r3, [r7, #4]
90009a6e:	601a      	str	r2, [r3, #0]
90009a70:	e026      	b.n	90009ac0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
90009a72:	687b      	ldr	r3, [r7, #4]
90009a74:	681b      	ldr	r3, [r3, #0]
90009a76:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
90009a7a:	683b      	ldr	r3, [r7, #0]
90009a7c:	69d9      	ldr	r1, [r3, #28]
90009a7e:	683b      	ldr	r3, [r7, #0]
90009a80:	6a1b      	ldr	r3, [r3, #32]
90009a82:	4319      	orrs	r1, r3
90009a84:	683b      	ldr	r3, [r7, #0]
90009a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90009a88:	430b      	orrs	r3, r1
90009a8a:	431a      	orrs	r2, r3
90009a8c:	687b      	ldr	r3, [r7, #4]
90009a8e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
90009a90:	687b      	ldr	r3, [r7, #4]
90009a92:	685a      	ldr	r2, [r3, #4]
90009a94:	4b0e      	ldr	r3, [pc, #56]	@ (90009ad0 <FMC_SDRAM_Init+0xb4>)
90009a96:	4013      	ands	r3, r2
90009a98:	683a      	ldr	r2, [r7, #0]
90009a9a:	6851      	ldr	r1, [r2, #4]
90009a9c:	683a      	ldr	r2, [r7, #0]
90009a9e:	6892      	ldr	r2, [r2, #8]
90009aa0:	4311      	orrs	r1, r2
90009aa2:	683a      	ldr	r2, [r7, #0]
90009aa4:	68d2      	ldr	r2, [r2, #12]
90009aa6:	4311      	orrs	r1, r2
90009aa8:	683a      	ldr	r2, [r7, #0]
90009aaa:	6912      	ldr	r2, [r2, #16]
90009aac:	4311      	orrs	r1, r2
90009aae:	683a      	ldr	r2, [r7, #0]
90009ab0:	6952      	ldr	r2, [r2, #20]
90009ab2:	4311      	orrs	r1, r2
90009ab4:	683a      	ldr	r2, [r7, #0]
90009ab6:	6992      	ldr	r2, [r2, #24]
90009ab8:	430a      	orrs	r2, r1
90009aba:	431a      	orrs	r2, r3
90009abc:	687b      	ldr	r3, [r7, #4]
90009abe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
90009ac0:	2300      	movs	r3, #0
}
90009ac2:	4618      	mov	r0, r3
90009ac4:	370c      	adds	r7, #12
90009ac6:	46bd      	mov	sp, r7
90009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
90009acc:	4770      	bx	lr
90009ace:	bf00      	nop
90009ad0:	ffff8000 	.word	0xffff8000

90009ad4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
90009ad4:	b480      	push	{r7}
90009ad6:	b085      	sub	sp, #20
90009ad8:	af00      	add	r7, sp, #0
90009ada:	60f8      	str	r0, [r7, #12]
90009adc:	60b9      	str	r1, [r7, #8]
90009ade:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
90009ae0:	687b      	ldr	r3, [r7, #4]
90009ae2:	2b00      	cmp	r3, #0
90009ae4:	d128      	bne.n	90009b38 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
90009ae6:	68fb      	ldr	r3, [r7, #12]
90009ae8:	689b      	ldr	r3, [r3, #8]
90009aea:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
90009aee:	68bb      	ldr	r3, [r7, #8]
90009af0:	681b      	ldr	r3, [r3, #0]
90009af2:	1e59      	subs	r1, r3, #1
90009af4:	68bb      	ldr	r3, [r7, #8]
90009af6:	685b      	ldr	r3, [r3, #4]
90009af8:	3b01      	subs	r3, #1
90009afa:	011b      	lsls	r3, r3, #4
90009afc:	4319      	orrs	r1, r3
90009afe:	68bb      	ldr	r3, [r7, #8]
90009b00:	689b      	ldr	r3, [r3, #8]
90009b02:	3b01      	subs	r3, #1
90009b04:	021b      	lsls	r3, r3, #8
90009b06:	4319      	orrs	r1, r3
90009b08:	68bb      	ldr	r3, [r7, #8]
90009b0a:	68db      	ldr	r3, [r3, #12]
90009b0c:	3b01      	subs	r3, #1
90009b0e:	031b      	lsls	r3, r3, #12
90009b10:	4319      	orrs	r1, r3
90009b12:	68bb      	ldr	r3, [r7, #8]
90009b14:	691b      	ldr	r3, [r3, #16]
90009b16:	3b01      	subs	r3, #1
90009b18:	041b      	lsls	r3, r3, #16
90009b1a:	4319      	orrs	r1, r3
90009b1c:	68bb      	ldr	r3, [r7, #8]
90009b1e:	695b      	ldr	r3, [r3, #20]
90009b20:	3b01      	subs	r3, #1
90009b22:	051b      	lsls	r3, r3, #20
90009b24:	4319      	orrs	r1, r3
90009b26:	68bb      	ldr	r3, [r7, #8]
90009b28:	699b      	ldr	r3, [r3, #24]
90009b2a:	3b01      	subs	r3, #1
90009b2c:	061b      	lsls	r3, r3, #24
90009b2e:	430b      	orrs	r3, r1
90009b30:	431a      	orrs	r2, r3
90009b32:	68fb      	ldr	r3, [r7, #12]
90009b34:	609a      	str	r2, [r3, #8]
90009b36:	e02d      	b.n	90009b94 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
90009b38:	68fb      	ldr	r3, [r7, #12]
90009b3a:	689a      	ldr	r2, [r3, #8]
90009b3c:	4b19      	ldr	r3, [pc, #100]	@ (90009ba4 <FMC_SDRAM_Timing_Init+0xd0>)
90009b3e:	4013      	ands	r3, r2
90009b40:	68ba      	ldr	r2, [r7, #8]
90009b42:	68d2      	ldr	r2, [r2, #12]
90009b44:	3a01      	subs	r2, #1
90009b46:	0311      	lsls	r1, r2, #12
90009b48:	68ba      	ldr	r2, [r7, #8]
90009b4a:	6952      	ldr	r2, [r2, #20]
90009b4c:	3a01      	subs	r2, #1
90009b4e:	0512      	lsls	r2, r2, #20
90009b50:	430a      	orrs	r2, r1
90009b52:	431a      	orrs	r2, r3
90009b54:	68fb      	ldr	r3, [r7, #12]
90009b56:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
90009b58:	68fb      	ldr	r3, [r7, #12]
90009b5a:	68db      	ldr	r3, [r3, #12]
90009b5c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
90009b60:	68bb      	ldr	r3, [r7, #8]
90009b62:	681b      	ldr	r3, [r3, #0]
90009b64:	1e59      	subs	r1, r3, #1
90009b66:	68bb      	ldr	r3, [r7, #8]
90009b68:	685b      	ldr	r3, [r3, #4]
90009b6a:	3b01      	subs	r3, #1
90009b6c:	011b      	lsls	r3, r3, #4
90009b6e:	4319      	orrs	r1, r3
90009b70:	68bb      	ldr	r3, [r7, #8]
90009b72:	689b      	ldr	r3, [r3, #8]
90009b74:	3b01      	subs	r3, #1
90009b76:	021b      	lsls	r3, r3, #8
90009b78:	4319      	orrs	r1, r3
90009b7a:	68bb      	ldr	r3, [r7, #8]
90009b7c:	691b      	ldr	r3, [r3, #16]
90009b7e:	3b01      	subs	r3, #1
90009b80:	041b      	lsls	r3, r3, #16
90009b82:	4319      	orrs	r1, r3
90009b84:	68bb      	ldr	r3, [r7, #8]
90009b86:	699b      	ldr	r3, [r3, #24]
90009b88:	3b01      	subs	r3, #1
90009b8a:	061b      	lsls	r3, r3, #24
90009b8c:	430b      	orrs	r3, r1
90009b8e:	431a      	orrs	r2, r3
90009b90:	68fb      	ldr	r3, [r7, #12]
90009b92:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
90009b94:	2300      	movs	r3, #0
}
90009b96:	4618      	mov	r0, r3
90009b98:	3714      	adds	r7, #20
90009b9a:	46bd      	mov	sp, r7
90009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009ba0:	4770      	bx	lr
90009ba2:	bf00      	nop
90009ba4:	ff0f0fff 	.word	0xff0f0fff

90009ba8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90009ba8:	b480      	push	{r7}
90009baa:	b085      	sub	sp, #20
90009bac:	af00      	add	r7, sp, #0
90009bae:	60f8      	str	r0, [r7, #12]
90009bb0:	60b9      	str	r1, [r7, #8]
90009bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
90009bb4:	68fb      	ldr	r3, [r7, #12]
90009bb6:	691a      	ldr	r2, [r3, #16]
90009bb8:	4b0c      	ldr	r3, [pc, #48]	@ (90009bec <FMC_SDRAM_SendCommand+0x44>)
90009bba:	4013      	ands	r3, r2
90009bbc:	68ba      	ldr	r2, [r7, #8]
90009bbe:	6811      	ldr	r1, [r2, #0]
90009bc0:	68ba      	ldr	r2, [r7, #8]
90009bc2:	6852      	ldr	r2, [r2, #4]
90009bc4:	4311      	orrs	r1, r2
90009bc6:	68ba      	ldr	r2, [r7, #8]
90009bc8:	6892      	ldr	r2, [r2, #8]
90009bca:	3a01      	subs	r2, #1
90009bcc:	0152      	lsls	r2, r2, #5
90009bce:	4311      	orrs	r1, r2
90009bd0:	68ba      	ldr	r2, [r7, #8]
90009bd2:	68d2      	ldr	r2, [r2, #12]
90009bd4:	0252      	lsls	r2, r2, #9
90009bd6:	430a      	orrs	r2, r1
90009bd8:	431a      	orrs	r2, r3
90009bda:	68fb      	ldr	r3, [r7, #12]
90009bdc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
90009bde:	2300      	movs	r3, #0
}
90009be0:	4618      	mov	r0, r3
90009be2:	3714      	adds	r7, #20
90009be4:	46bd      	mov	sp, r7
90009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
90009bea:	4770      	bx	lr
90009bec:	ffc00000 	.word	0xffc00000

90009bf0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
90009bf0:	b480      	push	{r7}
90009bf2:	b083      	sub	sp, #12
90009bf4:	af00      	add	r7, sp, #0
90009bf6:	6078      	str	r0, [r7, #4]
90009bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
90009bfa:	687b      	ldr	r3, [r7, #4]
90009bfc:	695a      	ldr	r2, [r3, #20]
90009bfe:	4b07      	ldr	r3, [pc, #28]	@ (90009c1c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
90009c00:	4013      	ands	r3, r2
90009c02:	683a      	ldr	r2, [r7, #0]
90009c04:	0052      	lsls	r2, r2, #1
90009c06:	431a      	orrs	r2, r3
90009c08:	687b      	ldr	r3, [r7, #4]
90009c0a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
90009c0c:	2300      	movs	r3, #0
}
90009c0e:	4618      	mov	r0, r3
90009c10:	370c      	adds	r7, #12
90009c12:	46bd      	mov	sp, r7
90009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
90009c18:	4770      	bx	lr
90009c1a:	bf00      	nop
90009c1c:	ffffc001 	.word	0xffffc001

90009c20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
90009c20:	b480      	push	{r7}
90009c22:	b083      	sub	sp, #12
90009c24:	af00      	add	r7, sp, #0
90009c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
90009c28:	687b      	ldr	r3, [r7, #4]
90009c2a:	689b      	ldr	r3, [r3, #8]
90009c2c:	f043 0201 	orr.w	r2, r3, #1
90009c30:	687b      	ldr	r3, [r7, #4]
90009c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
90009c34:	2300      	movs	r3, #0
}
90009c36:	4618      	mov	r0, r3
90009c38:	370c      	adds	r7, #12
90009c3a:	46bd      	mov	sp, r7
90009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009c40:	4770      	bx	lr

90009c42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
90009c42:	b480      	push	{r7}
90009c44:	b083      	sub	sp, #12
90009c46:	af00      	add	r7, sp, #0
90009c48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90009c4a:	687b      	ldr	r3, [r7, #4]
90009c4c:	689b      	ldr	r3, [r3, #8]
90009c4e:	f023 0201 	bic.w	r2, r3, #1
90009c52:	687b      	ldr	r3, [r7, #4]
90009c54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
90009c56:	2300      	movs	r3, #0
}
90009c58:	4618      	mov	r0, r3
90009c5a:	370c      	adds	r7, #12
90009c5c:	46bd      	mov	sp, r7
90009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009c62:	4770      	bx	lr

90009c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
90009c64:	b480      	push	{r7}
90009c66:	b085      	sub	sp, #20
90009c68:	af00      	add	r7, sp, #0
90009c6a:	6078      	str	r0, [r7, #4]
90009c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
90009c6e:	2300      	movs	r3, #0
90009c70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
90009c72:	68fb      	ldr	r3, [r7, #12]
90009c74:	3301      	adds	r3, #1
90009c76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
90009c78:	68fb      	ldr	r3, [r7, #12]
90009c7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
90009c7e:	d901      	bls.n	90009c84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
90009c80:	2303      	movs	r3, #3
90009c82:	e01b      	b.n	90009cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90009c84:	687b      	ldr	r3, [r7, #4]
90009c86:	691b      	ldr	r3, [r3, #16]
90009c88:	2b00      	cmp	r3, #0
90009c8a:	daf2      	bge.n	90009c72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
90009c8c:	2300      	movs	r3, #0
90009c8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
90009c90:	683b      	ldr	r3, [r7, #0]
90009c92:	019b      	lsls	r3, r3, #6
90009c94:	f043 0220 	orr.w	r2, r3, #32
90009c98:	687b      	ldr	r3, [r7, #4]
90009c9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
90009c9c:	68fb      	ldr	r3, [r7, #12]
90009c9e:	3301      	adds	r3, #1
90009ca0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
90009ca2:	68fb      	ldr	r3, [r7, #12]
90009ca4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
90009ca8:	d901      	bls.n	90009cae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
90009caa:	2303      	movs	r3, #3
90009cac:	e006      	b.n	90009cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
90009cae:	687b      	ldr	r3, [r7, #4]
90009cb0:	691b      	ldr	r3, [r3, #16]
90009cb2:	f003 0320 	and.w	r3, r3, #32
90009cb6:	2b20      	cmp	r3, #32
90009cb8:	d0f0      	beq.n	90009c9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
90009cba:	2300      	movs	r3, #0
}
90009cbc:	4618      	mov	r0, r3
90009cbe:	3714      	adds	r7, #20
90009cc0:	46bd      	mov	sp, r7
90009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
90009cc6:	4770      	bx	lr

90009cc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
90009cc8:	b480      	push	{r7}
90009cca:	b085      	sub	sp, #20
90009ccc:	af00      	add	r7, sp, #0
90009cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
90009cd0:	2300      	movs	r3, #0
90009cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
90009cd4:	68fb      	ldr	r3, [r7, #12]
90009cd6:	3301      	adds	r3, #1
90009cd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
90009cda:	68fb      	ldr	r3, [r7, #12]
90009cdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
90009ce0:	d901      	bls.n	90009ce6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
90009ce2:	2303      	movs	r3, #3
90009ce4:	e018      	b.n	90009d18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90009ce6:	687b      	ldr	r3, [r7, #4]
90009ce8:	691b      	ldr	r3, [r3, #16]
90009cea:	2b00      	cmp	r3, #0
90009cec:	daf2      	bge.n	90009cd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
90009cee:	2300      	movs	r3, #0
90009cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
90009cf2:	687b      	ldr	r3, [r7, #4]
90009cf4:	2210      	movs	r2, #16
90009cf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
90009cf8:	68fb      	ldr	r3, [r7, #12]
90009cfa:	3301      	adds	r3, #1
90009cfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
90009cfe:	68fb      	ldr	r3, [r7, #12]
90009d00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
90009d04:	d901      	bls.n	90009d0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
90009d06:	2303      	movs	r3, #3
90009d08:	e006      	b.n	90009d18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
90009d0a:	687b      	ldr	r3, [r7, #4]
90009d0c:	691b      	ldr	r3, [r3, #16]
90009d0e:	f003 0310 	and.w	r3, r3, #16
90009d12:	2b10      	cmp	r3, #16
90009d14:	d0f0      	beq.n	90009cf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
90009d16:	2300      	movs	r3, #0
}
90009d18:	4618      	mov	r0, r3
90009d1a:	3714      	adds	r7, #20
90009d1c:	46bd      	mov	sp, r7
90009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009d22:	4770      	bx	lr

90009d24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
90009d24:	b480      	push	{r7}
90009d26:	b08b      	sub	sp, #44	@ 0x2c
90009d28:	af00      	add	r7, sp, #0
90009d2a:	60f8      	str	r0, [r7, #12]
90009d2c:	60b9      	str	r1, [r7, #8]
90009d2e:	4613      	mov	r3, r2
90009d30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009d32:	68fb      	ldr	r3, [r7, #12]
90009d34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
90009d36:	68bb      	ldr	r3, [r7, #8]
90009d38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
90009d3a:	88fb      	ldrh	r3, [r7, #6]
90009d3c:	089b      	lsrs	r3, r3, #2
90009d3e:	b29b      	uxth	r3, r3
90009d40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
90009d42:	88fb      	ldrh	r3, [r7, #6]
90009d44:	f003 0303 	and.w	r3, r3, #3
90009d48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
90009d4a:	2300      	movs	r3, #0
90009d4c:	623b      	str	r3, [r7, #32]
90009d4e:	e014      	b.n	90009d7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90009d50:	69bb      	ldr	r3, [r7, #24]
90009d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
90009d56:	681a      	ldr	r2, [r3, #0]
90009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009d5a:	601a      	str	r2, [r3, #0]
    pDest++;
90009d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009d5e:	3301      	adds	r3, #1
90009d60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
90009d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009d64:	3301      	adds	r3, #1
90009d66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
90009d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009d6a:	3301      	adds	r3, #1
90009d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
90009d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009d70:	3301      	adds	r3, #1
90009d72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
90009d74:	6a3b      	ldr	r3, [r7, #32]
90009d76:	3301      	adds	r3, #1
90009d78:	623b      	str	r3, [r7, #32]
90009d7a:	6a3a      	ldr	r2, [r7, #32]
90009d7c:	697b      	ldr	r3, [r7, #20]
90009d7e:	429a      	cmp	r2, r3
90009d80:	d3e6      	bcc.n	90009d50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
90009d82:	8bfb      	ldrh	r3, [r7, #30]
90009d84:	2b00      	cmp	r3, #0
90009d86:	d01e      	beq.n	90009dc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
90009d88:	2300      	movs	r3, #0
90009d8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
90009d8c:	69bb      	ldr	r3, [r7, #24]
90009d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
90009d92:	461a      	mov	r2, r3
90009d94:	f107 0310 	add.w	r3, r7, #16
90009d98:	6812      	ldr	r2, [r2, #0]
90009d9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
90009d9c:	693a      	ldr	r2, [r7, #16]
90009d9e:	6a3b      	ldr	r3, [r7, #32]
90009da0:	b2db      	uxtb	r3, r3
90009da2:	00db      	lsls	r3, r3, #3
90009da4:	fa22 f303 	lsr.w	r3, r2, r3
90009da8:	b2da      	uxtb	r2, r3
90009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009dac:	701a      	strb	r2, [r3, #0]
      i++;
90009dae:	6a3b      	ldr	r3, [r7, #32]
90009db0:	3301      	adds	r3, #1
90009db2:	623b      	str	r3, [r7, #32]
      pDest++;
90009db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90009db6:	3301      	adds	r3, #1
90009db8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
90009dba:	8bfb      	ldrh	r3, [r7, #30]
90009dbc:	3b01      	subs	r3, #1
90009dbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
90009dc0:	8bfb      	ldrh	r3, [r7, #30]
90009dc2:	2b00      	cmp	r3, #0
90009dc4:	d1ea      	bne.n	90009d9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
90009dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
90009dc8:	4618      	mov	r0, r3
90009dca:	372c      	adds	r7, #44	@ 0x2c
90009dcc:	46bd      	mov	sp, r7
90009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
90009dd2:	4770      	bx	lr

90009dd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
90009dd4:	b480      	push	{r7}
90009dd6:	b085      	sub	sp, #20
90009dd8:	af00      	add	r7, sp, #0
90009dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
90009ddc:	687b      	ldr	r3, [r7, #4]
90009dde:	695b      	ldr	r3, [r3, #20]
90009de0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
90009de2:	687b      	ldr	r3, [r7, #4]
90009de4:	699b      	ldr	r3, [r3, #24]
90009de6:	68fa      	ldr	r2, [r7, #12]
90009de8:	4013      	ands	r3, r2
90009dea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
90009dec:	68fb      	ldr	r3, [r7, #12]
}
90009dee:	4618      	mov	r0, r3
90009df0:	3714      	adds	r7, #20
90009df2:	46bd      	mov	sp, r7
90009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
90009df8:	4770      	bx	lr

90009dfa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
90009dfa:	b480      	push	{r7}
90009dfc:	b085      	sub	sp, #20
90009dfe:	af00      	add	r7, sp, #0
90009e00:	6078      	str	r0, [r7, #4]
90009e02:	460b      	mov	r3, r1
90009e04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009e06:	687b      	ldr	r3, [r7, #4]
90009e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
90009e0a:	78fb      	ldrb	r3, [r7, #3]
90009e0c:	015a      	lsls	r2, r3, #5
90009e0e:	68fb      	ldr	r3, [r7, #12]
90009e10:	4413      	add	r3, r2
90009e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009e16:	689b      	ldr	r3, [r3, #8]
90009e18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
90009e1a:	78fb      	ldrb	r3, [r7, #3]
90009e1c:	015a      	lsls	r2, r3, #5
90009e1e:	68fb      	ldr	r3, [r7, #12]
90009e20:	4413      	add	r3, r2
90009e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009e26:	68db      	ldr	r3, [r3, #12]
90009e28:	68ba      	ldr	r2, [r7, #8]
90009e2a:	4013      	ands	r3, r2
90009e2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
90009e2e:	68bb      	ldr	r3, [r7, #8]
}
90009e30:	4618      	mov	r0, r3
90009e32:	3714      	adds	r7, #20
90009e34:	46bd      	mov	sp, r7
90009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
90009e3a:	4770      	bx	lr

90009e3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
90009e3c:	b480      	push	{r7}
90009e3e:	b083      	sub	sp, #12
90009e40:	af00      	add	r7, sp, #0
90009e42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
90009e44:	687b      	ldr	r3, [r7, #4]
90009e46:	695b      	ldr	r3, [r3, #20]
90009e48:	f003 0301 	and.w	r3, r3, #1
}
90009e4c:	4618      	mov	r0, r3
90009e4e:	370c      	adds	r7, #12
90009e50:	46bd      	mov	sp, r7
90009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
90009e56:	4770      	bx	lr

90009e58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
90009e58:	b480      	push	{r7}
90009e5a:	b085      	sub	sp, #20
90009e5c:	af00      	add	r7, sp, #0
90009e5e:	6078      	str	r0, [r7, #4]
90009e60:	460b      	mov	r3, r1
90009e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009e64:	687b      	ldr	r3, [r7, #4]
90009e66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90009e68:	68fb      	ldr	r3, [r7, #12]
90009e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009e6e:	681b      	ldr	r3, [r3, #0]
90009e70:	68fa      	ldr	r2, [r7, #12]
90009e72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
90009e76:	f023 0303 	bic.w	r3, r3, #3
90009e7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
90009e7c:	68fb      	ldr	r3, [r7, #12]
90009e7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009e82:	681a      	ldr	r2, [r3, #0]
90009e84:	78fb      	ldrb	r3, [r7, #3]
90009e86:	f003 0303 	and.w	r3, r3, #3
90009e8a:	68f9      	ldr	r1, [r7, #12]
90009e8c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
90009e90:	4313      	orrs	r3, r2
90009e92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
90009e94:	78fb      	ldrb	r3, [r7, #3]
90009e96:	2b01      	cmp	r3, #1
90009e98:	d107      	bne.n	90009eaa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
90009e9a:	68fb      	ldr	r3, [r7, #12]
90009e9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009ea0:	461a      	mov	r2, r3
90009ea2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
90009ea6:	6053      	str	r3, [r2, #4]
90009ea8:	e00c      	b.n	90009ec4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
90009eaa:	78fb      	ldrb	r3, [r7, #3]
90009eac:	2b02      	cmp	r3, #2
90009eae:	d107      	bne.n	90009ec0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
90009eb0:	68fb      	ldr	r3, [r7, #12]
90009eb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009eb6:	461a      	mov	r2, r3
90009eb8:	f241 7370 	movw	r3, #6000	@ 0x1770
90009ebc:	6053      	str	r3, [r2, #4]
90009ebe:	e001      	b.n	90009ec4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
90009ec0:	2301      	movs	r3, #1
90009ec2:	e000      	b.n	90009ec6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
90009ec4:	2300      	movs	r3, #0
}
90009ec6:	4618      	mov	r0, r3
90009ec8:	3714      	adds	r7, #20
90009eca:	46bd      	mov	sp, r7
90009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
90009ed0:	4770      	bx	lr

90009ed2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
90009ed2:	b480      	push	{r7}
90009ed4:	b085      	sub	sp, #20
90009ed6:	af00      	add	r7, sp, #0
90009ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009eda:	687b      	ldr	r3, [r7, #4]
90009edc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
90009ede:	68fb      	ldr	r3, [r7, #12]
90009ee0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90009ee4:	695b      	ldr	r3, [r3, #20]
90009ee6:	b29b      	uxth	r3, r3
}
90009ee8:	4618      	mov	r0, r3
90009eea:	3714      	adds	r7, #20
90009eec:	46bd      	mov	sp, r7
90009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
90009ef2:	4770      	bx	lr

90009ef4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
90009ef4:	b480      	push	{r7}
90009ef6:	b089      	sub	sp, #36	@ 0x24
90009ef8:	af00      	add	r7, sp, #0
90009efa:	6078      	str	r0, [r7, #4]
90009efc:	460b      	mov	r3, r1
90009efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009f00:	687b      	ldr	r3, [r7, #4]
90009f02:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
90009f04:	78fb      	ldrb	r3, [r7, #3]
90009f06:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
90009f08:	2300      	movs	r3, #0
90009f0a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
90009f0c:	69bb      	ldr	r3, [r7, #24]
90009f0e:	015a      	lsls	r2, r3, #5
90009f10:	69fb      	ldr	r3, [r7, #28]
90009f12:	4413      	add	r3, r2
90009f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009f18:	681b      	ldr	r3, [r3, #0]
90009f1a:	0c9b      	lsrs	r3, r3, #18
90009f1c:	f003 0303 	and.w	r3, r3, #3
90009f20:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
90009f22:	69bb      	ldr	r3, [r7, #24]
90009f24:	015a      	lsls	r2, r3, #5
90009f26:	69fb      	ldr	r3, [r7, #28]
90009f28:	4413      	add	r3, r2
90009f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009f2e:	681b      	ldr	r3, [r3, #0]
90009f30:	0fdb      	lsrs	r3, r3, #31
90009f32:	f003 0301 	and.w	r3, r3, #1
90009f36:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
90009f38:	69bb      	ldr	r3, [r7, #24]
90009f3a:	015a      	lsls	r2, r3, #5
90009f3c:	69fb      	ldr	r3, [r7, #28]
90009f3e:	4413      	add	r3, r2
90009f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009f44:	685b      	ldr	r3, [r3, #4]
90009f46:	0fdb      	lsrs	r3, r3, #31
90009f48:	f003 0301 	and.w	r3, r3, #1
90009f4c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
90009f4e:	687b      	ldr	r3, [r7, #4]
90009f50:	689b      	ldr	r3, [r3, #8]
90009f52:	f003 0320 	and.w	r3, r3, #32
90009f56:	2b20      	cmp	r3, #32
90009f58:	d10d      	bne.n	90009f76 <USB_HC_Halt+0x82>
90009f5a:	68fb      	ldr	r3, [r7, #12]
90009f5c:	2b00      	cmp	r3, #0
90009f5e:	d10a      	bne.n	90009f76 <USB_HC_Halt+0x82>
90009f60:	693b      	ldr	r3, [r7, #16]
90009f62:	2b00      	cmp	r3, #0
90009f64:	d005      	beq.n	90009f72 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
90009f66:	697b      	ldr	r3, [r7, #20]
90009f68:	2b01      	cmp	r3, #1
90009f6a:	d002      	beq.n	90009f72 <USB_HC_Halt+0x7e>
90009f6c:	697b      	ldr	r3, [r7, #20]
90009f6e:	2b03      	cmp	r3, #3
90009f70:	d101      	bne.n	90009f76 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
90009f72:	2300      	movs	r3, #0
90009f74:	e0d8      	b.n	9000a128 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90009f76:	697b      	ldr	r3, [r7, #20]
90009f78:	2b00      	cmp	r3, #0
90009f7a:	d002      	beq.n	90009f82 <USB_HC_Halt+0x8e>
90009f7c:	697b      	ldr	r3, [r7, #20]
90009f7e:	2b02      	cmp	r3, #2
90009f80:	d173      	bne.n	9000a06a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90009f82:	69bb      	ldr	r3, [r7, #24]
90009f84:	015a      	lsls	r2, r3, #5
90009f86:	69fb      	ldr	r3, [r7, #28]
90009f88:	4413      	add	r3, r2
90009f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009f8e:	681b      	ldr	r3, [r3, #0]
90009f90:	69ba      	ldr	r2, [r7, #24]
90009f92:	0151      	lsls	r1, r2, #5
90009f94:	69fa      	ldr	r2, [r7, #28]
90009f96:	440a      	add	r2, r1
90009f98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009f9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90009fa0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009fa2:	687b      	ldr	r3, [r7, #4]
90009fa4:	689b      	ldr	r3, [r3, #8]
90009fa6:	f003 0320 	and.w	r3, r3, #32
90009faa:	2b00      	cmp	r3, #0
90009fac:	d14a      	bne.n	9000a044 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90009fae:	687b      	ldr	r3, [r7, #4]
90009fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009fb2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90009fb6:	2b00      	cmp	r3, #0
90009fb8:	d133      	bne.n	9000a022 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90009fba:	69bb      	ldr	r3, [r7, #24]
90009fbc:	015a      	lsls	r2, r3, #5
90009fbe:	69fb      	ldr	r3, [r7, #28]
90009fc0:	4413      	add	r3, r2
90009fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009fc6:	681b      	ldr	r3, [r3, #0]
90009fc8:	69ba      	ldr	r2, [r7, #24]
90009fca:	0151      	lsls	r1, r2, #5
90009fcc:	69fa      	ldr	r2, [r7, #28]
90009fce:	440a      	add	r2, r1
90009fd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
90009fd8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009fda:	69bb      	ldr	r3, [r7, #24]
90009fdc:	015a      	lsls	r2, r3, #5
90009fde:	69fb      	ldr	r3, [r7, #28]
90009fe0:	4413      	add	r3, r2
90009fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90009fe6:	681b      	ldr	r3, [r3, #0]
90009fe8:	69ba      	ldr	r2, [r7, #24]
90009fea:	0151      	lsls	r1, r2, #5
90009fec:	69fa      	ldr	r2, [r7, #28]
90009fee:	440a      	add	r2, r1
90009ff0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90009ff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90009ff8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
90009ffa:	68bb      	ldr	r3, [r7, #8]
90009ffc:	3301      	adds	r3, #1
90009ffe:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000a000:	68bb      	ldr	r3, [r7, #8]
9000a002:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000a006:	d82e      	bhi.n	9000a066 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000a008:	69bb      	ldr	r3, [r7, #24]
9000a00a:	015a      	lsls	r2, r3, #5
9000a00c:	69fb      	ldr	r3, [r7, #28]
9000a00e:	4413      	add	r3, r2
9000a010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a014:	681b      	ldr	r3, [r3, #0]
9000a016:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000a01a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000a01e:	d0ec      	beq.n	90009ffa <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000a020:	e081      	b.n	9000a126 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000a022:	69bb      	ldr	r3, [r7, #24]
9000a024:	015a      	lsls	r2, r3, #5
9000a026:	69fb      	ldr	r3, [r7, #28]
9000a028:	4413      	add	r3, r2
9000a02a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a02e:	681b      	ldr	r3, [r3, #0]
9000a030:	69ba      	ldr	r2, [r7, #24]
9000a032:	0151      	lsls	r1, r2, #5
9000a034:	69fa      	ldr	r2, [r7, #28]
9000a036:	440a      	add	r2, r1
9000a038:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000a03c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000a040:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000a042:	e070      	b.n	9000a126 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000a044:	69bb      	ldr	r3, [r7, #24]
9000a046:	015a      	lsls	r2, r3, #5
9000a048:	69fb      	ldr	r3, [r7, #28]
9000a04a:	4413      	add	r3, r2
9000a04c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a050:	681b      	ldr	r3, [r3, #0]
9000a052:	69ba      	ldr	r2, [r7, #24]
9000a054:	0151      	lsls	r1, r2, #5
9000a056:	69fa      	ldr	r2, [r7, #28]
9000a058:	440a      	add	r2, r1
9000a05a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000a05e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000a062:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000a064:	e05f      	b.n	9000a126 <USB_HC_Halt+0x232>
            break;
9000a066:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000a068:	e05d      	b.n	9000a126 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000a06a:	69bb      	ldr	r3, [r7, #24]
9000a06c:	015a      	lsls	r2, r3, #5
9000a06e:	69fb      	ldr	r3, [r7, #28]
9000a070:	4413      	add	r3, r2
9000a072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a076:	681b      	ldr	r3, [r3, #0]
9000a078:	69ba      	ldr	r2, [r7, #24]
9000a07a:	0151      	lsls	r1, r2, #5
9000a07c:	69fa      	ldr	r2, [r7, #28]
9000a07e:	440a      	add	r2, r1
9000a080:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000a084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000a088:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000a08a:	69fb      	ldr	r3, [r7, #28]
9000a08c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000a090:	691b      	ldr	r3, [r3, #16]
9000a092:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000a096:	2b00      	cmp	r3, #0
9000a098:	d133      	bne.n	9000a102 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000a09a:	69bb      	ldr	r3, [r7, #24]
9000a09c:	015a      	lsls	r2, r3, #5
9000a09e:	69fb      	ldr	r3, [r7, #28]
9000a0a0:	4413      	add	r3, r2
9000a0a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a0a6:	681b      	ldr	r3, [r3, #0]
9000a0a8:	69ba      	ldr	r2, [r7, #24]
9000a0aa:	0151      	lsls	r1, r2, #5
9000a0ac:	69fa      	ldr	r2, [r7, #28]
9000a0ae:	440a      	add	r2, r1
9000a0b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000a0b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000a0b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000a0ba:	69bb      	ldr	r3, [r7, #24]
9000a0bc:	015a      	lsls	r2, r3, #5
9000a0be:	69fb      	ldr	r3, [r7, #28]
9000a0c0:	4413      	add	r3, r2
9000a0c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a0c6:	681b      	ldr	r3, [r3, #0]
9000a0c8:	69ba      	ldr	r2, [r7, #24]
9000a0ca:	0151      	lsls	r1, r2, #5
9000a0cc:	69fa      	ldr	r2, [r7, #28]
9000a0ce:	440a      	add	r2, r1
9000a0d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000a0d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000a0d8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000a0da:	68bb      	ldr	r3, [r7, #8]
9000a0dc:	3301      	adds	r3, #1
9000a0de:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000a0e0:	68bb      	ldr	r3, [r7, #8]
9000a0e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000a0e6:	d81d      	bhi.n	9000a124 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000a0e8:	69bb      	ldr	r3, [r7, #24]
9000a0ea:	015a      	lsls	r2, r3, #5
9000a0ec:	69fb      	ldr	r3, [r7, #28]
9000a0ee:	4413      	add	r3, r2
9000a0f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a0f4:	681b      	ldr	r3, [r3, #0]
9000a0f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000a0fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000a0fe:	d0ec      	beq.n	9000a0da <USB_HC_Halt+0x1e6>
9000a100:	e011      	b.n	9000a126 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000a102:	69bb      	ldr	r3, [r7, #24]
9000a104:	015a      	lsls	r2, r3, #5
9000a106:	69fb      	ldr	r3, [r7, #28]
9000a108:	4413      	add	r3, r2
9000a10a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a10e:	681b      	ldr	r3, [r3, #0]
9000a110:	69ba      	ldr	r2, [r7, #24]
9000a112:	0151      	lsls	r1, r2, #5
9000a114:	69fa      	ldr	r2, [r7, #28]
9000a116:	440a      	add	r2, r1
9000a118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000a11c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000a120:	6013      	str	r3, [r2, #0]
9000a122:	e000      	b.n	9000a126 <USB_HC_Halt+0x232>
          break;
9000a124:	bf00      	nop
    }
  }

  return HAL_OK;
9000a126:	2300      	movs	r3, #0
}
9000a128:	4618      	mov	r0, r3
9000a12a:	3724      	adds	r7, #36	@ 0x24
9000a12c:	46bd      	mov	sp, r7
9000a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a132:	4770      	bx	lr

9000a134 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000a134:	b580      	push	{r7, lr}
9000a136:	b088      	sub	sp, #32
9000a138:	af00      	add	r7, sp, #0
9000a13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000a13c:	2300      	movs	r3, #0
9000a13e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000a140:	687b      	ldr	r3, [r7, #4]
9000a142:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000a144:	2300      	movs	r3, #0
9000a146:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000a148:	6878      	ldr	r0, [r7, #4]
9000a14a:	f7ff fd7a 	bl	90009c42 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000a14e:	2110      	movs	r1, #16
9000a150:	6878      	ldr	r0, [r7, #4]
9000a152:	f7ff fd87 	bl	90009c64 <USB_FlushTxFifo>
9000a156:	4603      	mov	r3, r0
9000a158:	2b00      	cmp	r3, #0
9000a15a:	d001      	beq.n	9000a160 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000a15c:	2301      	movs	r3, #1
9000a15e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000a160:	6878      	ldr	r0, [r7, #4]
9000a162:	f7ff fdb1 	bl	90009cc8 <USB_FlushRxFifo>
9000a166:	4603      	mov	r3, r0
9000a168:	2b00      	cmp	r3, #0
9000a16a:	d001      	beq.n	9000a170 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000a16c:	2301      	movs	r3, #1
9000a16e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000a170:	2300      	movs	r3, #0
9000a172:	61bb      	str	r3, [r7, #24]
9000a174:	e01f      	b.n	9000a1b6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000a176:	69bb      	ldr	r3, [r7, #24]
9000a178:	015a      	lsls	r2, r3, #5
9000a17a:	697b      	ldr	r3, [r7, #20]
9000a17c:	4413      	add	r3, r2
9000a17e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a182:	681b      	ldr	r3, [r3, #0]
9000a184:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000a186:	693b      	ldr	r3, [r7, #16]
9000a188:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000a18c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000a18e:	693b      	ldr	r3, [r7, #16]
9000a190:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000a194:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000a196:	693b      	ldr	r3, [r7, #16]
9000a198:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000a19c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000a19e:	69bb      	ldr	r3, [r7, #24]
9000a1a0:	015a      	lsls	r2, r3, #5
9000a1a2:	697b      	ldr	r3, [r7, #20]
9000a1a4:	4413      	add	r3, r2
9000a1a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a1aa:	461a      	mov	r2, r3
9000a1ac:	693b      	ldr	r3, [r7, #16]
9000a1ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000a1b0:	69bb      	ldr	r3, [r7, #24]
9000a1b2:	3301      	adds	r3, #1
9000a1b4:	61bb      	str	r3, [r7, #24]
9000a1b6:	69bb      	ldr	r3, [r7, #24]
9000a1b8:	2b0f      	cmp	r3, #15
9000a1ba:	d9dc      	bls.n	9000a176 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000a1bc:	2300      	movs	r3, #0
9000a1be:	61bb      	str	r3, [r7, #24]
9000a1c0:	e034      	b.n	9000a22c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000a1c2:	69bb      	ldr	r3, [r7, #24]
9000a1c4:	015a      	lsls	r2, r3, #5
9000a1c6:	697b      	ldr	r3, [r7, #20]
9000a1c8:	4413      	add	r3, r2
9000a1ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a1ce:	681b      	ldr	r3, [r3, #0]
9000a1d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000a1d2:	693b      	ldr	r3, [r7, #16]
9000a1d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000a1d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000a1da:	693b      	ldr	r3, [r7, #16]
9000a1dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000a1e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000a1e2:	693b      	ldr	r3, [r7, #16]
9000a1e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000a1e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000a1ea:	69bb      	ldr	r3, [r7, #24]
9000a1ec:	015a      	lsls	r2, r3, #5
9000a1ee:	697b      	ldr	r3, [r7, #20]
9000a1f0:	4413      	add	r3, r2
9000a1f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a1f6:	461a      	mov	r2, r3
9000a1f8:	693b      	ldr	r3, [r7, #16]
9000a1fa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000a1fc:	68fb      	ldr	r3, [r7, #12]
9000a1fe:	3301      	adds	r3, #1
9000a200:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000a202:	68fb      	ldr	r3, [r7, #12]
9000a204:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000a208:	d80c      	bhi.n	9000a224 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000a20a:	69bb      	ldr	r3, [r7, #24]
9000a20c:	015a      	lsls	r2, r3, #5
9000a20e:	697b      	ldr	r3, [r7, #20]
9000a210:	4413      	add	r3, r2
9000a212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000a216:	681b      	ldr	r3, [r3, #0]
9000a218:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000a21c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000a220:	d0ec      	beq.n	9000a1fc <USB_StopHost+0xc8>
9000a222:	e000      	b.n	9000a226 <USB_StopHost+0xf2>
        break;
9000a224:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000a226:	69bb      	ldr	r3, [r7, #24]
9000a228:	3301      	adds	r3, #1
9000a22a:	61bb      	str	r3, [r7, #24]
9000a22c:	69bb      	ldr	r3, [r7, #24]
9000a22e:	2b0f      	cmp	r3, #15
9000a230:	d9c7      	bls.n	9000a1c2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000a232:	697b      	ldr	r3, [r7, #20]
9000a234:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000a238:	461a      	mov	r2, r3
9000a23a:	f04f 33ff 	mov.w	r3, #4294967295
9000a23e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000a240:	687b      	ldr	r3, [r7, #4]
9000a242:	f04f 32ff 	mov.w	r2, #4294967295
9000a246:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000a248:	6878      	ldr	r0, [r7, #4]
9000a24a:	f7ff fce9 	bl	90009c20 <USB_EnableGlobalInt>

  return ret;
9000a24e:	7ffb      	ldrb	r3, [r7, #31]
}
9000a250:	4618      	mov	r0, r3
9000a252:	3720      	adds	r7, #32
9000a254:	46bd      	mov	sp, r7
9000a256:	bd80      	pop	{r7, pc}

9000a258 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000a258:	b580      	push	{r7, lr}
9000a25a:	b082      	sub	sp, #8
9000a25c:	af00      	add	r7, sp, #0
9000a25e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000a260:	687b      	ldr	r3, [r7, #4]
9000a262:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000a266:	1c5a      	adds	r2, r3, #1
9000a268:	687b      	ldr	r3, [r7, #4]
9000a26a:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000a26e:	6878      	ldr	r0, [r7, #4]
9000a270:	f000 f804 	bl	9000a27c <USBH_HandleSof>
}
9000a274:	bf00      	nop
9000a276:	3708      	adds	r7, #8
9000a278:	46bd      	mov	sp, r7
9000a27a:	bd80      	pop	{r7, pc}

9000a27c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000a27c:	b580      	push	{r7, lr}
9000a27e:	b082      	sub	sp, #8
9000a280:	af00      	add	r7, sp, #0
9000a282:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000a284:	687b      	ldr	r3, [r7, #4]
9000a286:	781b      	ldrb	r3, [r3, #0]
9000a288:	b2db      	uxtb	r3, r3
9000a28a:	2b0b      	cmp	r3, #11
9000a28c:	d10a      	bne.n	9000a2a4 <USBH_HandleSof+0x28>
9000a28e:	687b      	ldr	r3, [r7, #4]
9000a290:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000a294:	2b00      	cmp	r3, #0
9000a296:	d005      	beq.n	9000a2a4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000a298:	687b      	ldr	r3, [r7, #4]
9000a29a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000a29e:	699b      	ldr	r3, [r3, #24]
9000a2a0:	6878      	ldr	r0, [r7, #4]
9000a2a2:	4798      	blx	r3
  }
}
9000a2a4:	bf00      	nop
9000a2a6:	3708      	adds	r7, #8
9000a2a8:	46bd      	mov	sp, r7
9000a2aa:	bd80      	pop	{r7, pc}

9000a2ac <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000a2ac:	b480      	push	{r7}
9000a2ae:	b083      	sub	sp, #12
9000a2b0:	af00      	add	r7, sp, #0
9000a2b2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000a2b4:	687b      	ldr	r3, [r7, #4]
9000a2b6:	2201      	movs	r2, #1
9000a2b8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000a2bc:	bf00      	nop
}
9000a2be:	370c      	adds	r7, #12
9000a2c0:	46bd      	mov	sp, r7
9000a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a2c6:	4770      	bx	lr

9000a2c8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000a2c8:	b480      	push	{r7}
9000a2ca:	b083      	sub	sp, #12
9000a2cc:	af00      	add	r7, sp, #0
9000a2ce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000a2d0:	687b      	ldr	r3, [r7, #4]
9000a2d2:	2200      	movs	r2, #0
9000a2d4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000a2d8:	687b      	ldr	r3, [r7, #4]
9000a2da:	2201      	movs	r2, #1
9000a2dc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000a2e0:	bf00      	nop
}
9000a2e2:	370c      	adds	r7, #12
9000a2e4:	46bd      	mov	sp, r7
9000a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a2ea:	4770      	bx	lr

9000a2ec <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000a2ec:	b480      	push	{r7}
9000a2ee:	b083      	sub	sp, #12
9000a2f0:	af00      	add	r7, sp, #0
9000a2f2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000a2f4:	687b      	ldr	r3, [r7, #4]
9000a2f6:	2201      	movs	r2, #1
9000a2f8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000a2fc:	687b      	ldr	r3, [r7, #4]
9000a2fe:	2200      	movs	r2, #0
9000a300:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000a304:	687b      	ldr	r3, [r7, #4]
9000a306:	2200      	movs	r2, #0
9000a308:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000a30c:	2300      	movs	r3, #0
}
9000a30e:	4618      	mov	r0, r3
9000a310:	370c      	adds	r7, #12
9000a312:	46bd      	mov	sp, r7
9000a314:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a318:	4770      	bx	lr

9000a31a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000a31a:	b580      	push	{r7, lr}
9000a31c:	b082      	sub	sp, #8
9000a31e:	af00      	add	r7, sp, #0
9000a320:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000a322:	687b      	ldr	r3, [r7, #4]
9000a324:	2201      	movs	r2, #1
9000a326:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000a32a:	687b      	ldr	r3, [r7, #4]
9000a32c:	2200      	movs	r2, #0
9000a32e:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000a332:	687b      	ldr	r3, [r7, #4]
9000a334:	2200      	movs	r2, #0
9000a336:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000a33a:	6878      	ldr	r0, [r7, #4]
9000a33c:	f7f6 fb6c 	bl	90000a18 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000a340:	687b      	ldr	r3, [r7, #4]
9000a342:	791b      	ldrb	r3, [r3, #4]
9000a344:	4619      	mov	r1, r3
9000a346:	6878      	ldr	r0, [r7, #4]
9000a348:	f000 f80b 	bl	9000a362 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000a34c:	687b      	ldr	r3, [r7, #4]
9000a34e:	795b      	ldrb	r3, [r3, #5]
9000a350:	4619      	mov	r1, r3
9000a352:	6878      	ldr	r0, [r7, #4]
9000a354:	f000 f805 	bl	9000a362 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000a358:	2300      	movs	r3, #0
}
9000a35a:	4618      	mov	r0, r3
9000a35c:	3708      	adds	r7, #8
9000a35e:	46bd      	mov	sp, r7
9000a360:	bd80      	pop	{r7, pc}

9000a362 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000a362:	b480      	push	{r7}
9000a364:	b083      	sub	sp, #12
9000a366:	af00      	add	r7, sp, #0
9000a368:	6078      	str	r0, [r7, #4]
9000a36a:	460b      	mov	r3, r1
9000a36c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000a36e:	78fb      	ldrb	r3, [r7, #3]
9000a370:	2b0f      	cmp	r3, #15
9000a372:	d80f      	bhi.n	9000a394 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000a374:	78fb      	ldrb	r3, [r7, #3]
9000a376:	687a      	ldr	r2, [r7, #4]
9000a378:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000a37c:	009b      	lsls	r3, r3, #2
9000a37e:	4413      	add	r3, r2
9000a380:	685a      	ldr	r2, [r3, #4]
9000a382:	78fb      	ldrb	r3, [r7, #3]
9000a384:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000a388:	6879      	ldr	r1, [r7, #4]
9000a38a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000a38e:	009b      	lsls	r3, r3, #2
9000a390:	440b      	add	r3, r1
9000a392:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000a394:	2300      	movs	r3, #0
}
9000a396:	4618      	mov	r0, r3
9000a398:	370c      	adds	r7, #12
9000a39a:	46bd      	mov	sp, r7
9000a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a3a0:	4770      	bx	lr
	...

9000a3a4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000a3a4:	b580      	push	{r7, lr}
9000a3a6:	b082      	sub	sp, #8
9000a3a8:	af00      	add	r7, sp, #0
9000a3aa:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000a3ac:	687b      	ldr	r3, [r7, #4]
9000a3ae:	681b      	ldr	r3, [r3, #0]
9000a3b0:	4a22      	ldr	r2, [pc, #136]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3b2:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000a3b4:	687b      	ldr	r3, [r7, #4]
9000a3b6:	685b      	ldr	r3, [r3, #4]
9000a3b8:	4a20      	ldr	r2, [pc, #128]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3ba:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000a3bc:	687b      	ldr	r3, [r7, #4]
9000a3be:	689b      	ldr	r3, [r3, #8]
9000a3c0:	4a1e      	ldr	r2, [pc, #120]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3c2:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000a3c4:	687b      	ldr	r3, [r7, #4]
9000a3c6:	68db      	ldr	r3, [r3, #12]
9000a3c8:	4a1c      	ldr	r2, [pc, #112]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3ca:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000a3cc:	687b      	ldr	r3, [r7, #4]
9000a3ce:	691b      	ldr	r3, [r3, #16]
9000a3d0:	4a1a      	ldr	r2, [pc, #104]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3d2:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000a3d4:	687b      	ldr	r3, [r7, #4]
9000a3d6:	695b      	ldr	r3, [r3, #20]
9000a3d8:	4a18      	ldr	r2, [pc, #96]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3da:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000a3dc:	687b      	ldr	r3, [r7, #4]
9000a3de:	699b      	ldr	r3, [r3, #24]
9000a3e0:	4a16      	ldr	r2, [pc, #88]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3e2:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000a3e4:	687b      	ldr	r3, [r7, #4]
9000a3e6:	69db      	ldr	r3, [r3, #28]
9000a3e8:	4a14      	ldr	r2, [pc, #80]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3ea:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000a3ec:	687b      	ldr	r3, [r7, #4]
9000a3ee:	6a1b      	ldr	r3, [r3, #32]
9000a3f0:	4a12      	ldr	r2, [pc, #72]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3f2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000a3f4:	687b      	ldr	r3, [r7, #4]
9000a3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a3f8:	4a10      	ldr	r2, [pc, #64]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a3fa:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000a3fc:	687b      	ldr	r3, [r7, #4]
9000a3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a400:	4a0e      	ldr	r2, [pc, #56]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a402:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000a404:	4b0e      	ldr	r3, [pc, #56]	@ (9000a440 <UTIL_LCD_SetFuncDriver+0x9c>)
9000a406:	2200      	movs	r2, #0
9000a408:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000a40a:	4b0d      	ldr	r3, [pc, #52]	@ (9000a440 <UTIL_LCD_SetFuncDriver+0x9c>)
9000a40c:	2200      	movs	r2, #0
9000a40e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000a410:	4b0a      	ldr	r3, [pc, #40]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a412:	69db      	ldr	r3, [r3, #28]
9000a414:	4a0b      	ldr	r2, [pc, #44]	@ (9000a444 <UTIL_LCD_SetFuncDriver+0xa0>)
9000a416:	4611      	mov	r1, r2
9000a418:	2000      	movs	r0, #0
9000a41a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000a41c:	4b07      	ldr	r3, [pc, #28]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a41e:	6a1b      	ldr	r3, [r3, #32]
9000a420:	4a09      	ldr	r2, [pc, #36]	@ (9000a448 <UTIL_LCD_SetFuncDriver+0xa4>)
9000a422:	4611      	mov	r1, r2
9000a424:	2000      	movs	r0, #0
9000a426:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000a428:	4b04      	ldr	r3, [pc, #16]	@ (9000a43c <UTIL_LCD_SetFuncDriver+0x98>)
9000a42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a42c:	4a07      	ldr	r2, [pc, #28]	@ (9000a44c <UTIL_LCD_SetFuncDriver+0xa8>)
9000a42e:	4611      	mov	r1, r2
9000a430:	2000      	movs	r0, #0
9000a432:	4798      	blx	r3
}
9000a434:	bf00      	nop
9000a436:	3708      	adds	r7, #8
9000a438:	46bd      	mov	sp, r7
9000a43a:	bd80      	pop	{r7, pc}
9000a43c:	20001274 	.word	0x20001274
9000a440:	20001234 	.word	0x20001234
9000a444:	20001248 	.word	0x20001248
9000a448:	2000124c 	.word	0x2000124c
9000a44c:	20001250 	.word	0x20001250

9000a450 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000a450:	b580      	push	{r7, lr}
9000a452:	b082      	sub	sp, #8
9000a454:	af00      	add	r7, sp, #0
9000a456:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000a458:	4b0a      	ldr	r3, [pc, #40]	@ (9000a484 <UTIL_LCD_SetLayer+0x34>)
9000a45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a45c:	2b00      	cmp	r3, #0
9000a45e:	d00c      	beq.n	9000a47a <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000a460:	4b08      	ldr	r3, [pc, #32]	@ (9000a484 <UTIL_LCD_SetLayer+0x34>)
9000a462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a464:	4a08      	ldr	r2, [pc, #32]	@ (9000a488 <UTIL_LCD_SetLayer+0x38>)
9000a466:	6912      	ldr	r2, [r2, #16]
9000a468:	6879      	ldr	r1, [r7, #4]
9000a46a:	4610      	mov	r0, r2
9000a46c:	4798      	blx	r3
9000a46e:	4603      	mov	r3, r0
9000a470:	2b00      	cmp	r3, #0
9000a472:	d102      	bne.n	9000a47a <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000a474:	4a04      	ldr	r2, [pc, #16]	@ (9000a488 <UTIL_LCD_SetLayer+0x38>)
9000a476:	687b      	ldr	r3, [r7, #4]
9000a478:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000a47a:	bf00      	nop
9000a47c:	3708      	adds	r7, #8
9000a47e:	46bd      	mov	sp, r7
9000a480:	bd80      	pop	{r7, pc}
9000a482:	bf00      	nop
9000a484:	20001274 	.word	0x20001274
9000a488:	20001234 	.word	0x20001234

9000a48c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000a48c:	b480      	push	{r7}
9000a48e:	b083      	sub	sp, #12
9000a490:	af00      	add	r7, sp, #0
9000a492:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000a494:	4b06      	ldr	r3, [pc, #24]	@ (9000a4b0 <UTIL_LCD_SetTextColor+0x24>)
9000a496:	68db      	ldr	r3, [r3, #12]
9000a498:	4a05      	ldr	r2, [pc, #20]	@ (9000a4b0 <UTIL_LCD_SetTextColor+0x24>)
9000a49a:	015b      	lsls	r3, r3, #5
9000a49c:	4413      	add	r3, r2
9000a49e:	687a      	ldr	r2, [r7, #4]
9000a4a0:	601a      	str	r2, [r3, #0]
}
9000a4a2:	bf00      	nop
9000a4a4:	370c      	adds	r7, #12
9000a4a6:	46bd      	mov	sp, r7
9000a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a4ac:	4770      	bx	lr
9000a4ae:	bf00      	nop
9000a4b0:	20001234 	.word	0x20001234

9000a4b4 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000a4b4:	b480      	push	{r7}
9000a4b6:	b083      	sub	sp, #12
9000a4b8:	af00      	add	r7, sp, #0
9000a4ba:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000a4bc:	4b06      	ldr	r3, [pc, #24]	@ (9000a4d8 <UTIL_LCD_SetBackColor+0x24>)
9000a4be:	68db      	ldr	r3, [r3, #12]
9000a4c0:	4a05      	ldr	r2, [pc, #20]	@ (9000a4d8 <UTIL_LCD_SetBackColor+0x24>)
9000a4c2:	015b      	lsls	r3, r3, #5
9000a4c4:	4413      	add	r3, r2
9000a4c6:	3304      	adds	r3, #4
9000a4c8:	687a      	ldr	r2, [r7, #4]
9000a4ca:	601a      	str	r2, [r3, #0]
}
9000a4cc:	bf00      	nop
9000a4ce:	370c      	adds	r7, #12
9000a4d0:	46bd      	mov	sp, r7
9000a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a4d6:	4770      	bx	lr
9000a4d8:	20001234 	.word	0x20001234

9000a4dc <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000a4dc:	b480      	push	{r7}
9000a4de:	b083      	sub	sp, #12
9000a4e0:	af00      	add	r7, sp, #0
9000a4e2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000a4e4:	4b06      	ldr	r3, [pc, #24]	@ (9000a500 <UTIL_LCD_SetFont+0x24>)
9000a4e6:	68db      	ldr	r3, [r3, #12]
9000a4e8:	4a05      	ldr	r2, [pc, #20]	@ (9000a500 <UTIL_LCD_SetFont+0x24>)
9000a4ea:	015b      	lsls	r3, r3, #5
9000a4ec:	4413      	add	r3, r2
9000a4ee:	3308      	adds	r3, #8
9000a4f0:	687a      	ldr	r2, [r7, #4]
9000a4f2:	601a      	str	r2, [r3, #0]
}
9000a4f4:	bf00      	nop
9000a4f6:	370c      	adds	r7, #12
9000a4f8:	46bd      	mov	sp, r7
9000a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a4fe:	4770      	bx	lr
9000a500:	20001234 	.word	0x20001234

9000a504 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000a504:	b590      	push	{r4, r7, lr}
9000a506:	b087      	sub	sp, #28
9000a508:	af02      	add	r7, sp, #8
9000a50a:	60f8      	str	r0, [r7, #12]
9000a50c:	60b9      	str	r1, [r7, #8]
9000a50e:	607a      	str	r2, [r7, #4]
9000a510:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000a512:	4b08      	ldr	r3, [pc, #32]	@ (9000a534 <UTIL_LCD_FillRGBRect+0x30>)
9000a514:	685c      	ldr	r4, [r3, #4]
9000a516:	4b08      	ldr	r3, [pc, #32]	@ (9000a538 <UTIL_LCD_FillRGBRect+0x34>)
9000a518:	6918      	ldr	r0, [r3, #16]
9000a51a:	6a3b      	ldr	r3, [r7, #32]
9000a51c:	9301      	str	r3, [sp, #4]
9000a51e:	683b      	ldr	r3, [r7, #0]
9000a520:	9300      	str	r3, [sp, #0]
9000a522:	687b      	ldr	r3, [r7, #4]
9000a524:	68ba      	ldr	r2, [r7, #8]
9000a526:	68f9      	ldr	r1, [r7, #12]
9000a528:	47a0      	blx	r4
}
9000a52a:	bf00      	nop
9000a52c:	3714      	adds	r7, #20
9000a52e:	46bd      	mov	sp, r7
9000a530:	bd90      	pop	{r4, r7, pc}
9000a532:	bf00      	nop
9000a534:	20001274 	.word	0x20001274
9000a538:	20001234 	.word	0x20001234

9000a53c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000a53c:	b580      	push	{r7, lr}
9000a53e:	b084      	sub	sp, #16
9000a540:	af02      	add	r7, sp, #8
9000a542:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000a544:	4b07      	ldr	r3, [pc, #28]	@ (9000a564 <UTIL_LCD_Clear+0x28>)
9000a546:	695a      	ldr	r2, [r3, #20]
9000a548:	4b06      	ldr	r3, [pc, #24]	@ (9000a564 <UTIL_LCD_Clear+0x28>)
9000a54a:	6999      	ldr	r1, [r3, #24]
9000a54c:	687b      	ldr	r3, [r7, #4]
9000a54e:	9300      	str	r3, [sp, #0]
9000a550:	460b      	mov	r3, r1
9000a552:	2100      	movs	r1, #0
9000a554:	2000      	movs	r0, #0
9000a556:	f000 f8eb 	bl	9000a730 <UTIL_LCD_FillRect>
}
9000a55a:	bf00      	nop
9000a55c:	3708      	adds	r7, #8
9000a55e:	46bd      	mov	sp, r7
9000a560:	bd80      	pop	{r7, pc}
9000a562:	bf00      	nop
9000a564:	20001234 	.word	0x20001234

9000a568 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000a568:	b580      	push	{r7, lr}
9000a56a:	b084      	sub	sp, #16
9000a56c:	af00      	add	r7, sp, #0
9000a56e:	60f8      	str	r0, [r7, #12]
9000a570:	60b9      	str	r1, [r7, #8]
9000a572:	4613      	mov	r3, r2
9000a574:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a576:	4b16      	ldr	r3, [pc, #88]	@ (9000a5d0 <UTIL_LCD_DisplayChar+0x68>)
9000a578:	68db      	ldr	r3, [r3, #12]
9000a57a:	4a15      	ldr	r2, [pc, #84]	@ (9000a5d0 <UTIL_LCD_DisplayChar+0x68>)
9000a57c:	015b      	lsls	r3, r3, #5
9000a57e:	4413      	add	r3, r2
9000a580:	3308      	adds	r3, #8
9000a582:	681b      	ldr	r3, [r3, #0]
9000a584:	681a      	ldr	r2, [r3, #0]
9000a586:	79fb      	ldrb	r3, [r7, #7]
9000a588:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000a58a:	4911      	ldr	r1, [pc, #68]	@ (9000a5d0 <UTIL_LCD_DisplayChar+0x68>)
9000a58c:	68c9      	ldr	r1, [r1, #12]
9000a58e:	4810      	ldr	r0, [pc, #64]	@ (9000a5d0 <UTIL_LCD_DisplayChar+0x68>)
9000a590:	0149      	lsls	r1, r1, #5
9000a592:	4401      	add	r1, r0
9000a594:	3108      	adds	r1, #8
9000a596:	6809      	ldr	r1, [r1, #0]
9000a598:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a59a:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000a59e:	4b0c      	ldr	r3, [pc, #48]	@ (9000a5d0 <UTIL_LCD_DisplayChar+0x68>)
9000a5a0:	68db      	ldr	r3, [r3, #12]
9000a5a2:	480b      	ldr	r0, [pc, #44]	@ (9000a5d0 <UTIL_LCD_DisplayChar+0x68>)
9000a5a4:	015b      	lsls	r3, r3, #5
9000a5a6:	4403      	add	r3, r0
9000a5a8:	3308      	adds	r3, #8
9000a5aa:	681b      	ldr	r3, [r3, #0]
9000a5ac:	889b      	ldrh	r3, [r3, #4]
9000a5ae:	3307      	adds	r3, #7
9000a5b0:	2b00      	cmp	r3, #0
9000a5b2:	da00      	bge.n	9000a5b6 <UTIL_LCD_DisplayChar+0x4e>
9000a5b4:	3307      	adds	r3, #7
9000a5b6:	10db      	asrs	r3, r3, #3
9000a5b8:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000a5bc:	4413      	add	r3, r2
9000a5be:	461a      	mov	r2, r3
9000a5c0:	68b9      	ldr	r1, [r7, #8]
9000a5c2:	68f8      	ldr	r0, [r7, #12]
9000a5c4:	f000 f8ee 	bl	9000a7a4 <DrawChar>
}
9000a5c8:	bf00      	nop
9000a5ca:	3710      	adds	r7, #16
9000a5cc:	46bd      	mov	sp, r7
9000a5ce:	bd80      	pop	{r7, pc}
9000a5d0:	20001234 	.word	0x20001234

9000a5d4 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000a5d4:	b580      	push	{r7, lr}
9000a5d6:	b08a      	sub	sp, #40	@ 0x28
9000a5d8:	af00      	add	r7, sp, #0
9000a5da:	60f8      	str	r0, [r7, #12]
9000a5dc:	60b9      	str	r1, [r7, #8]
9000a5de:	607a      	str	r2, [r7, #4]
9000a5e0:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000a5e2:	2301      	movs	r3, #1
9000a5e4:	627b      	str	r3, [r7, #36]	@ 0x24
9000a5e6:	2300      	movs	r3, #0
9000a5e8:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000a5ea:	2300      	movs	r3, #0
9000a5ec:	61fb      	str	r3, [r7, #28]
9000a5ee:	2300      	movs	r3, #0
9000a5f0:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000a5f2:	687b      	ldr	r3, [r7, #4]
9000a5f4:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000a5f6:	e002      	b.n	9000a5fe <UTIL_LCD_DisplayStringAt+0x2a>
9000a5f8:	69fb      	ldr	r3, [r7, #28]
9000a5fa:	3301      	adds	r3, #1
9000a5fc:	61fb      	str	r3, [r7, #28]
9000a5fe:	69bb      	ldr	r3, [r7, #24]
9000a600:	1c5a      	adds	r2, r3, #1
9000a602:	61ba      	str	r2, [r7, #24]
9000a604:	781b      	ldrb	r3, [r3, #0]
9000a606:	2b00      	cmp	r3, #0
9000a608:	d1f6      	bne.n	9000a5f8 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000a60a:	4b48      	ldr	r3, [pc, #288]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a60c:	695b      	ldr	r3, [r3, #20]
9000a60e:	4a47      	ldr	r2, [pc, #284]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a610:	68d2      	ldr	r2, [r2, #12]
9000a612:	4946      	ldr	r1, [pc, #280]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a614:	0152      	lsls	r2, r2, #5
9000a616:	440a      	add	r2, r1
9000a618:	3208      	adds	r2, #8
9000a61a:	6812      	ldr	r2, [r2, #0]
9000a61c:	8892      	ldrh	r2, [r2, #4]
9000a61e:	fbb3 f3f2 	udiv	r3, r3, r2
9000a622:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000a624:	78fb      	ldrb	r3, [r7, #3]
9000a626:	2b03      	cmp	r3, #3
9000a628:	d018      	beq.n	9000a65c <UTIL_LCD_DisplayStringAt+0x88>
9000a62a:	2b03      	cmp	r3, #3
9000a62c:	dc2a      	bgt.n	9000a684 <UTIL_LCD_DisplayStringAt+0xb0>
9000a62e:	2b01      	cmp	r3, #1
9000a630:	d002      	beq.n	9000a638 <UTIL_LCD_DisplayStringAt+0x64>
9000a632:	2b02      	cmp	r3, #2
9000a634:	d015      	beq.n	9000a662 <UTIL_LCD_DisplayStringAt+0x8e>
9000a636:	e025      	b.n	9000a684 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000a638:	697a      	ldr	r2, [r7, #20]
9000a63a:	69fb      	ldr	r3, [r7, #28]
9000a63c:	1ad3      	subs	r3, r2, r3
9000a63e:	4a3b      	ldr	r2, [pc, #236]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a640:	68d2      	ldr	r2, [r2, #12]
9000a642:	493a      	ldr	r1, [pc, #232]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a644:	0152      	lsls	r2, r2, #5
9000a646:	440a      	add	r2, r1
9000a648:	3208      	adds	r2, #8
9000a64a:	6812      	ldr	r2, [r2, #0]
9000a64c:	8892      	ldrh	r2, [r2, #4]
9000a64e:	fb02 f303 	mul.w	r3, r2, r3
9000a652:	085b      	lsrs	r3, r3, #1
9000a654:	68fa      	ldr	r2, [r7, #12]
9000a656:	4413      	add	r3, r2
9000a658:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a65a:	e016      	b.n	9000a68a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000a65c:	68fb      	ldr	r3, [r7, #12]
9000a65e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a660:	e013      	b.n	9000a68a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000a662:	697a      	ldr	r2, [r7, #20]
9000a664:	69fb      	ldr	r3, [r7, #28]
9000a666:	1ad3      	subs	r3, r2, r3
9000a668:	4a30      	ldr	r2, [pc, #192]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a66a:	68d2      	ldr	r2, [r2, #12]
9000a66c:	492f      	ldr	r1, [pc, #188]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a66e:	0152      	lsls	r2, r2, #5
9000a670:	440a      	add	r2, r1
9000a672:	3208      	adds	r2, #8
9000a674:	6812      	ldr	r2, [r2, #0]
9000a676:	8892      	ldrh	r2, [r2, #4]
9000a678:	fb03 f202 	mul.w	r2, r3, r2
9000a67c:	68fb      	ldr	r3, [r7, #12]
9000a67e:	1ad3      	subs	r3, r2, r3
9000a680:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a682:	e002      	b.n	9000a68a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000a684:	68fb      	ldr	r3, [r7, #12]
9000a686:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000a688:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a68c:	2b00      	cmp	r3, #0
9000a68e:	d003      	beq.n	9000a698 <UTIL_LCD_DisplayStringAt+0xc4>
9000a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a696:	d31b      	bcc.n	9000a6d0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000a698:	2301      	movs	r3, #1
9000a69a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000a69c:	e018      	b.n	9000a6d0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000a69e:	687b      	ldr	r3, [r7, #4]
9000a6a0:	781b      	ldrb	r3, [r3, #0]
9000a6a2:	461a      	mov	r2, r3
9000a6a4:	68b9      	ldr	r1, [r7, #8]
9000a6a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000a6a8:	f7ff ff5e 	bl	9000a568 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000a6ac:	4b1f      	ldr	r3, [pc, #124]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a6ae:	68db      	ldr	r3, [r3, #12]
9000a6b0:	4a1e      	ldr	r2, [pc, #120]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a6b2:	015b      	lsls	r3, r3, #5
9000a6b4:	4413      	add	r3, r2
9000a6b6:	3308      	adds	r3, #8
9000a6b8:	681b      	ldr	r3, [r3, #0]
9000a6ba:	889b      	ldrh	r3, [r3, #4]
9000a6bc:	461a      	mov	r2, r3
9000a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a6c0:	4413      	add	r3, r2
9000a6c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000a6c4:	687b      	ldr	r3, [r7, #4]
9000a6c6:	3301      	adds	r3, #1
9000a6c8:	607b      	str	r3, [r7, #4]
    i++;
9000a6ca:	6a3b      	ldr	r3, [r7, #32]
9000a6cc:	3301      	adds	r3, #1
9000a6ce:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000a6d0:	687b      	ldr	r3, [r7, #4]
9000a6d2:	781b      	ldrb	r3, [r3, #0]
9000a6d4:	2b00      	cmp	r3, #0
9000a6d6:	bf14      	ite	ne
9000a6d8:	2301      	movne	r3, #1
9000a6da:	2300      	moveq	r3, #0
9000a6dc:	b2da      	uxtb	r2, r3
9000a6de:	4b13      	ldr	r3, [pc, #76]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a6e0:	6959      	ldr	r1, [r3, #20]
9000a6e2:	4b12      	ldr	r3, [pc, #72]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a6e4:	68db      	ldr	r3, [r3, #12]
9000a6e6:	4811      	ldr	r0, [pc, #68]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a6e8:	015b      	lsls	r3, r3, #5
9000a6ea:	4403      	add	r3, r0
9000a6ec:	3308      	adds	r3, #8
9000a6ee:	681b      	ldr	r3, [r3, #0]
9000a6f0:	889b      	ldrh	r3, [r3, #4]
9000a6f2:	4618      	mov	r0, r3
9000a6f4:	6a3b      	ldr	r3, [r7, #32]
9000a6f6:	fb00 f303 	mul.w	r3, r0, r3
9000a6fa:	1acb      	subs	r3, r1, r3
9000a6fc:	b29b      	uxth	r3, r3
9000a6fe:	490b      	ldr	r1, [pc, #44]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a700:	68c9      	ldr	r1, [r1, #12]
9000a702:	480a      	ldr	r0, [pc, #40]	@ (9000a72c <UTIL_LCD_DisplayStringAt+0x158>)
9000a704:	0149      	lsls	r1, r1, #5
9000a706:	4401      	add	r1, r0
9000a708:	3108      	adds	r1, #8
9000a70a:	6809      	ldr	r1, [r1, #0]
9000a70c:	8889      	ldrh	r1, [r1, #4]
9000a70e:	428b      	cmp	r3, r1
9000a710:	bf2c      	ite	cs
9000a712:	2301      	movcs	r3, #1
9000a714:	2300      	movcc	r3, #0
9000a716:	b2db      	uxtb	r3, r3
9000a718:	4013      	ands	r3, r2
9000a71a:	b2db      	uxtb	r3, r3
9000a71c:	2b00      	cmp	r3, #0
9000a71e:	d1be      	bne.n	9000a69e <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000a720:	bf00      	nop
9000a722:	bf00      	nop
9000a724:	3728      	adds	r7, #40	@ 0x28
9000a726:	46bd      	mov	sp, r7
9000a728:	bd80      	pop	{r7, pc}
9000a72a:	bf00      	nop
9000a72c:	20001234 	.word	0x20001234

9000a730 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000a730:	b590      	push	{r4, r7, lr}
9000a732:	b087      	sub	sp, #28
9000a734:	af02      	add	r7, sp, #8
9000a736:	60f8      	str	r0, [r7, #12]
9000a738:	60b9      	str	r1, [r7, #8]
9000a73a:	607a      	str	r2, [r7, #4]
9000a73c:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000a73e:	4b17      	ldr	r3, [pc, #92]	@ (9000a79c <UTIL_LCD_FillRect+0x6c>)
9000a740:	69db      	ldr	r3, [r3, #28]
9000a742:	2b02      	cmp	r3, #2
9000a744:	d11a      	bne.n	9000a77c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000a746:	4b16      	ldr	r3, [pc, #88]	@ (9000a7a0 <UTIL_LCD_FillRect+0x70>)
9000a748:	691c      	ldr	r4, [r3, #16]
9000a74a:	4b14      	ldr	r3, [pc, #80]	@ (9000a79c <UTIL_LCD_FillRect+0x6c>)
9000a74c:	6918      	ldr	r0, [r3, #16]
9000a74e:	6a3b      	ldr	r3, [r7, #32]
9000a750:	08db      	lsrs	r3, r3, #3
9000a752:	f003 021f 	and.w	r2, r3, #31
9000a756:	6a3b      	ldr	r3, [r7, #32]
9000a758:	0a9b      	lsrs	r3, r3, #10
9000a75a:	015b      	lsls	r3, r3, #5
9000a75c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000a760:	431a      	orrs	r2, r3
9000a762:	6a3b      	ldr	r3, [r7, #32]
9000a764:	0cdb      	lsrs	r3, r3, #19
9000a766:	02db      	lsls	r3, r3, #11
9000a768:	b29b      	uxth	r3, r3
9000a76a:	4313      	orrs	r3, r2
9000a76c:	9301      	str	r3, [sp, #4]
9000a76e:	683b      	ldr	r3, [r7, #0]
9000a770:	9300      	str	r3, [sp, #0]
9000a772:	687b      	ldr	r3, [r7, #4]
9000a774:	68ba      	ldr	r2, [r7, #8]
9000a776:	68f9      	ldr	r1, [r7, #12]
9000a778:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000a77a:	e00b      	b.n	9000a794 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000a77c:	4b08      	ldr	r3, [pc, #32]	@ (9000a7a0 <UTIL_LCD_FillRect+0x70>)
9000a77e:	691c      	ldr	r4, [r3, #16]
9000a780:	4b06      	ldr	r3, [pc, #24]	@ (9000a79c <UTIL_LCD_FillRect+0x6c>)
9000a782:	6918      	ldr	r0, [r3, #16]
9000a784:	6a3b      	ldr	r3, [r7, #32]
9000a786:	9301      	str	r3, [sp, #4]
9000a788:	683b      	ldr	r3, [r7, #0]
9000a78a:	9300      	str	r3, [sp, #0]
9000a78c:	687b      	ldr	r3, [r7, #4]
9000a78e:	68ba      	ldr	r2, [r7, #8]
9000a790:	68f9      	ldr	r1, [r7, #12]
9000a792:	47a0      	blx	r4
}
9000a794:	bf00      	nop
9000a796:	3714      	adds	r7, #20
9000a798:	46bd      	mov	sp, r7
9000a79a:	bd90      	pop	{r4, r7, pc}
9000a79c:	20001234 	.word	0x20001234
9000a7a0:	20001274 	.word	0x20001274

9000a7a4 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000a7a4:	b580      	push	{r7, lr}
9000a7a6:	b0b2      	sub	sp, #200	@ 0xc8
9000a7a8:	af02      	add	r7, sp, #8
9000a7aa:	60f8      	str	r0, [r7, #12]
9000a7ac:	60b9      	str	r1, [r7, #8]
9000a7ae:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000a7b0:	2300      	movs	r3, #0
9000a7b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000a7b6:	2300      	movs	r3, #0
9000a7b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000a7bc:	4ba5      	ldr	r3, [pc, #660]	@ (9000aa54 <DrawChar+0x2b0>)
9000a7be:	68db      	ldr	r3, [r3, #12]
9000a7c0:	4aa4      	ldr	r2, [pc, #656]	@ (9000aa54 <DrawChar+0x2b0>)
9000a7c2:	015b      	lsls	r3, r3, #5
9000a7c4:	4413      	add	r3, r2
9000a7c6:	3308      	adds	r3, #8
9000a7c8:	681b      	ldr	r3, [r3, #0]
9000a7ca:	88db      	ldrh	r3, [r3, #6]
9000a7cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000a7d0:	4ba0      	ldr	r3, [pc, #640]	@ (9000aa54 <DrawChar+0x2b0>)
9000a7d2:	68db      	ldr	r3, [r3, #12]
9000a7d4:	4a9f      	ldr	r2, [pc, #636]	@ (9000aa54 <DrawChar+0x2b0>)
9000a7d6:	015b      	lsls	r3, r3, #5
9000a7d8:	4413      	add	r3, r2
9000a7da:	3308      	adds	r3, #8
9000a7dc:	681b      	ldr	r3, [r3, #0]
9000a7de:	889b      	ldrh	r3, [r3, #4]
9000a7e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000a7e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a7e8:	3307      	adds	r3, #7
9000a7ea:	f023 0207 	bic.w	r2, r3, #7
9000a7ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a7f2:	1ad3      	subs	r3, r2, r3
9000a7f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000a7f8:	2300      	movs	r3, #0
9000a7fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000a7fe:	e11c      	b.n	9000aa3a <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000a800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a804:	3307      	adds	r3, #7
9000a806:	08db      	lsrs	r3, r3, #3
9000a808:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000a80c:	fb02 f303 	mul.w	r3, r2, r3
9000a810:	687a      	ldr	r2, [r7, #4]
9000a812:	4413      	add	r3, r2
9000a814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000a818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a81c:	3307      	adds	r3, #7
9000a81e:	08db      	lsrs	r3, r3, #3
9000a820:	2b01      	cmp	r3, #1
9000a822:	d002      	beq.n	9000a82a <DrawChar+0x86>
9000a824:	2b02      	cmp	r3, #2
9000a826:	d006      	beq.n	9000a836 <DrawChar+0x92>
9000a828:	e011      	b.n	9000a84e <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000a82a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000a82e:	781b      	ldrb	r3, [r3, #0]
9000a830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000a834:	e01d      	b.n	9000a872 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000a836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000a83a:	781b      	ldrb	r3, [r3, #0]
9000a83c:	021b      	lsls	r3, r3, #8
9000a83e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000a842:	3201      	adds	r2, #1
9000a844:	7812      	ldrb	r2, [r2, #0]
9000a846:	4313      	orrs	r3, r2
9000a848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000a84c:	e011      	b.n	9000a872 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000a84e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000a852:	781b      	ldrb	r3, [r3, #0]
9000a854:	041a      	lsls	r2, r3, #16
9000a856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000a85a:	3301      	adds	r3, #1
9000a85c:	781b      	ldrb	r3, [r3, #0]
9000a85e:	021b      	lsls	r3, r3, #8
9000a860:	4313      	orrs	r3, r2
9000a862:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000a866:	3202      	adds	r2, #2
9000a868:	7812      	ldrb	r2, [r2, #0]
9000a86a:	4313      	orrs	r3, r2
9000a86c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000a870:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000a872:	4b78      	ldr	r3, [pc, #480]	@ (9000aa54 <DrawChar+0x2b0>)
9000a874:	68db      	ldr	r3, [r3, #12]
9000a876:	4a77      	ldr	r2, [pc, #476]	@ (9000aa54 <DrawChar+0x2b0>)
9000a878:	015b      	lsls	r3, r3, #5
9000a87a:	4413      	add	r3, r2
9000a87c:	331c      	adds	r3, #28
9000a87e:	681b      	ldr	r3, [r3, #0]
9000a880:	2b02      	cmp	r3, #2
9000a882:	f040 808c 	bne.w	9000a99e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000a886:	2300      	movs	r3, #0
9000a888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000a88c:	e074      	b.n	9000a978 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000a88e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000a892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a896:	1ad2      	subs	r2, r2, r3
9000a898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000a89c:	4413      	add	r3, r2
9000a89e:	3b01      	subs	r3, #1
9000a8a0:	2201      	movs	r2, #1
9000a8a2:	fa02 f303 	lsl.w	r3, r2, r3
9000a8a6:	461a      	mov	r2, r3
9000a8a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000a8ac:	4013      	ands	r3, r2
9000a8ae:	2b00      	cmp	r3, #0
9000a8b0:	d02d      	beq.n	9000a90e <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000a8b2:	4b68      	ldr	r3, [pc, #416]	@ (9000aa54 <DrawChar+0x2b0>)
9000a8b4:	68db      	ldr	r3, [r3, #12]
9000a8b6:	4a67      	ldr	r2, [pc, #412]	@ (9000aa54 <DrawChar+0x2b0>)
9000a8b8:	015b      	lsls	r3, r3, #5
9000a8ba:	4413      	add	r3, r2
9000a8bc:	681b      	ldr	r3, [r3, #0]
9000a8be:	08db      	lsrs	r3, r3, #3
9000a8c0:	b29b      	uxth	r3, r3
9000a8c2:	f003 031f 	and.w	r3, r3, #31
9000a8c6:	b29a      	uxth	r2, r3
9000a8c8:	4b62      	ldr	r3, [pc, #392]	@ (9000aa54 <DrawChar+0x2b0>)
9000a8ca:	68db      	ldr	r3, [r3, #12]
9000a8cc:	4961      	ldr	r1, [pc, #388]	@ (9000aa54 <DrawChar+0x2b0>)
9000a8ce:	015b      	lsls	r3, r3, #5
9000a8d0:	440b      	add	r3, r1
9000a8d2:	681b      	ldr	r3, [r3, #0]
9000a8d4:	0a9b      	lsrs	r3, r3, #10
9000a8d6:	b29b      	uxth	r3, r3
9000a8d8:	015b      	lsls	r3, r3, #5
9000a8da:	b29b      	uxth	r3, r3
9000a8dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000a8e0:	b29b      	uxth	r3, r3
9000a8e2:	4313      	orrs	r3, r2
9000a8e4:	b29a      	uxth	r2, r3
9000a8e6:	4b5b      	ldr	r3, [pc, #364]	@ (9000aa54 <DrawChar+0x2b0>)
9000a8e8:	68db      	ldr	r3, [r3, #12]
9000a8ea:	495a      	ldr	r1, [pc, #360]	@ (9000aa54 <DrawChar+0x2b0>)
9000a8ec:	015b      	lsls	r3, r3, #5
9000a8ee:	440b      	add	r3, r1
9000a8f0:	681b      	ldr	r3, [r3, #0]
9000a8f2:	0cdb      	lsrs	r3, r3, #19
9000a8f4:	b29b      	uxth	r3, r3
9000a8f6:	02db      	lsls	r3, r3, #11
9000a8f8:	b29b      	uxth	r3, r3
9000a8fa:	4313      	orrs	r3, r2
9000a8fc:	b29a      	uxth	r2, r3
9000a8fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a902:	005b      	lsls	r3, r3, #1
9000a904:	33c0      	adds	r3, #192	@ 0xc0
9000a906:	443b      	add	r3, r7
9000a908:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000a90c:	e02f      	b.n	9000a96e <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000a90e:	4b51      	ldr	r3, [pc, #324]	@ (9000aa54 <DrawChar+0x2b0>)
9000a910:	68db      	ldr	r3, [r3, #12]
9000a912:	4a50      	ldr	r2, [pc, #320]	@ (9000aa54 <DrawChar+0x2b0>)
9000a914:	015b      	lsls	r3, r3, #5
9000a916:	4413      	add	r3, r2
9000a918:	3304      	adds	r3, #4
9000a91a:	681b      	ldr	r3, [r3, #0]
9000a91c:	08db      	lsrs	r3, r3, #3
9000a91e:	b29b      	uxth	r3, r3
9000a920:	f003 031f 	and.w	r3, r3, #31
9000a924:	b29a      	uxth	r2, r3
9000a926:	4b4b      	ldr	r3, [pc, #300]	@ (9000aa54 <DrawChar+0x2b0>)
9000a928:	68db      	ldr	r3, [r3, #12]
9000a92a:	494a      	ldr	r1, [pc, #296]	@ (9000aa54 <DrawChar+0x2b0>)
9000a92c:	015b      	lsls	r3, r3, #5
9000a92e:	440b      	add	r3, r1
9000a930:	3304      	adds	r3, #4
9000a932:	681b      	ldr	r3, [r3, #0]
9000a934:	0a9b      	lsrs	r3, r3, #10
9000a936:	b29b      	uxth	r3, r3
9000a938:	015b      	lsls	r3, r3, #5
9000a93a:	b29b      	uxth	r3, r3
9000a93c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000a940:	b29b      	uxth	r3, r3
9000a942:	4313      	orrs	r3, r2
9000a944:	b29a      	uxth	r2, r3
9000a946:	4b43      	ldr	r3, [pc, #268]	@ (9000aa54 <DrawChar+0x2b0>)
9000a948:	68db      	ldr	r3, [r3, #12]
9000a94a:	4942      	ldr	r1, [pc, #264]	@ (9000aa54 <DrawChar+0x2b0>)
9000a94c:	015b      	lsls	r3, r3, #5
9000a94e:	440b      	add	r3, r1
9000a950:	3304      	adds	r3, #4
9000a952:	681b      	ldr	r3, [r3, #0]
9000a954:	0cdb      	lsrs	r3, r3, #19
9000a956:	b29b      	uxth	r3, r3
9000a958:	02db      	lsls	r3, r3, #11
9000a95a:	b29b      	uxth	r3, r3
9000a95c:	4313      	orrs	r3, r2
9000a95e:	b29a      	uxth	r2, r3
9000a960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a964:	005b      	lsls	r3, r3, #1
9000a966:	33c0      	adds	r3, #192	@ 0xc0
9000a968:	443b      	add	r3, r7
9000a96a:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000a96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a972:	3301      	adds	r3, #1
9000a974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000a978:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000a97c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a980:	429a      	cmp	r2, r3
9000a982:	d384      	bcc.n	9000a88e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000a984:	68b9      	ldr	r1, [r7, #8]
9000a986:	1c4b      	adds	r3, r1, #1
9000a988:	60bb      	str	r3, [r7, #8]
9000a98a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000a98e:	2301      	movs	r3, #1
9000a990:	9300      	str	r3, [sp, #0]
9000a992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000a996:	68f8      	ldr	r0, [r7, #12]
9000a998:	f7ff fdb4 	bl	9000a504 <UTIL_LCD_FillRGBRect>
9000a99c:	e048      	b.n	9000aa30 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000a99e:	2300      	movs	r3, #0
9000a9a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000a9a4:	e032      	b.n	9000aa0c <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000a9a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000a9aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a9ae:	1ad2      	subs	r2, r2, r3
9000a9b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000a9b4:	4413      	add	r3, r2
9000a9b6:	3b01      	subs	r3, #1
9000a9b8:	2201      	movs	r2, #1
9000a9ba:	fa02 f303 	lsl.w	r3, r2, r3
9000a9be:	461a      	mov	r2, r3
9000a9c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000a9c4:	4013      	ands	r3, r2
9000a9c6:	2b00      	cmp	r3, #0
9000a9c8:	d00d      	beq.n	9000a9e6 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000a9ca:	4b22      	ldr	r3, [pc, #136]	@ (9000aa54 <DrawChar+0x2b0>)
9000a9cc:	68db      	ldr	r3, [r3, #12]
9000a9ce:	4a21      	ldr	r2, [pc, #132]	@ (9000aa54 <DrawChar+0x2b0>)
9000a9d0:	015b      	lsls	r3, r3, #5
9000a9d2:	4413      	add	r3, r2
9000a9d4:	681a      	ldr	r2, [r3, #0]
9000a9d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a9da:	009b      	lsls	r3, r3, #2
9000a9dc:	33c0      	adds	r3, #192	@ 0xc0
9000a9de:	443b      	add	r3, r7
9000a9e0:	f843 2cac 	str.w	r2, [r3, #-172]
9000a9e4:	e00d      	b.n	9000aa02 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000a9e6:	4b1b      	ldr	r3, [pc, #108]	@ (9000aa54 <DrawChar+0x2b0>)
9000a9e8:	68db      	ldr	r3, [r3, #12]
9000a9ea:	4a1a      	ldr	r2, [pc, #104]	@ (9000aa54 <DrawChar+0x2b0>)
9000a9ec:	015b      	lsls	r3, r3, #5
9000a9ee:	4413      	add	r3, r2
9000a9f0:	3304      	adds	r3, #4
9000a9f2:	681a      	ldr	r2, [r3, #0]
9000a9f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000a9f8:	009b      	lsls	r3, r3, #2
9000a9fa:	33c0      	adds	r3, #192	@ 0xc0
9000a9fc:	443b      	add	r3, r7
9000a9fe:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000aa02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000aa06:	3301      	adds	r3, #1
9000aa08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000aa0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000aa10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000aa14:	429a      	cmp	r2, r3
9000aa16:	d3c6      	bcc.n	9000a9a6 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000aa18:	68b9      	ldr	r1, [r7, #8]
9000aa1a:	1c4b      	adds	r3, r1, #1
9000aa1c:	60bb      	str	r3, [r7, #8]
9000aa1e:	f107 0214 	add.w	r2, r7, #20
9000aa22:	2301      	movs	r3, #1
9000aa24:	9300      	str	r3, [sp, #0]
9000aa26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000aa2a:	68f8      	ldr	r0, [r7, #12]
9000aa2c:	f7ff fd6a 	bl	9000a504 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000aa30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000aa34:	3301      	adds	r3, #1
9000aa36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000aa3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000aa3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000aa42:	429a      	cmp	r2, r3
9000aa44:	f4ff aedc 	bcc.w	9000a800 <DrawChar+0x5c>
    }
  }
}
9000aa48:	bf00      	nop
9000aa4a:	bf00      	nop
9000aa4c:	37c0      	adds	r7, #192	@ 0xc0
9000aa4e:	46bd      	mov	sp, r7
9000aa50:	bd80      	pop	{r7, pc}
9000aa52:	bf00      	nop
9000aa54:	20001234 	.word	0x20001234

9000aa58 <__libc_init_array>:
9000aa58:	b570      	push	{r4, r5, r6, lr}
9000aa5a:	4d0d      	ldr	r5, [pc, #52]	@ (9000aa90 <__libc_init_array+0x38>)
9000aa5c:	4c0d      	ldr	r4, [pc, #52]	@ (9000aa94 <__libc_init_array+0x3c>)
9000aa5e:	1b64      	subs	r4, r4, r5
9000aa60:	10a4      	asrs	r4, r4, #2
9000aa62:	2600      	movs	r6, #0
9000aa64:	42a6      	cmp	r6, r4
9000aa66:	d109      	bne.n	9000aa7c <__libc_init_array+0x24>
9000aa68:	4d0b      	ldr	r5, [pc, #44]	@ (9000aa98 <__libc_init_array+0x40>)
9000aa6a:	4c0c      	ldr	r4, [pc, #48]	@ (9000aa9c <__libc_init_array+0x44>)
9000aa6c:	f000 f818 	bl	9000aaa0 <_init>
9000aa70:	1b64      	subs	r4, r4, r5
9000aa72:	10a4      	asrs	r4, r4, #2
9000aa74:	2600      	movs	r6, #0
9000aa76:	42a6      	cmp	r6, r4
9000aa78:	d105      	bne.n	9000aa86 <__libc_init_array+0x2e>
9000aa7a:	bd70      	pop	{r4, r5, r6, pc}
9000aa7c:	f855 3b04 	ldr.w	r3, [r5], #4
9000aa80:	4798      	blx	r3
9000aa82:	3601      	adds	r6, #1
9000aa84:	e7ee      	b.n	9000aa64 <__libc_init_array+0xc>
9000aa86:	f855 3b04 	ldr.w	r3, [r5], #4
9000aa8a:	4798      	blx	r3
9000aa8c:	3601      	adds	r6, #1
9000aa8e:	e7f2      	b.n	9000aa76 <__libc_init_array+0x1e>
9000aa90:	9000cf3c 	.word	0x9000cf3c
9000aa94:	9000cf3c 	.word	0x9000cf3c
9000aa98:	9000cf3c 	.word	0x9000cf3c
9000aa9c:	9000cf40 	.word	0x9000cf40

9000aaa0 <_init>:
9000aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000aaa2:	bf00      	nop
9000aaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000aaa6:	bc08      	pop	{r3}
9000aaa8:	469e      	mov	lr, r3
9000aaaa:	4770      	bx	lr

9000aaac <_fini>:
9000aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000aaae:	bf00      	nop
9000aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000aab2:	bc08      	pop	{r3}
9000aab4:	469e      	mov	lr, r3
9000aab6:	4770      	bx	lr
