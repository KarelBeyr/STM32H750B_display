
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2a8  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026e8  9000d548  9000d548  0000e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000fc30  9000fc30  000110d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000fc30  9000fc30  00010c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000fc38  9000fc38  000110d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000fc38  9000fc38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000fc3c  9000fc3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  9000fc40  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200000d8  9000fd14  000110d8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200014a0  9000fd14  000114a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b38c  00000000  00000000  00011102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005529  00000000  00000000  0003c48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  000419b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a12  00000000  00000000  00043b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000414a7  00000000  00000000  00045562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d505  00000000  00000000  00086a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018dcf4  00000000  00000000  000b3f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00241c02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099ac  00000000  00000000  00241c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0024b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d8 	.word	0x200000d8
900002bc:	00000000 	.word	0x00000000
900002c0:	9000d530 	.word	0x9000d530

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000dc 	.word	0x200000dc
900002dc:	9000d530 	.word	0x9000d530

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <__aeabi_uldivmod>:
90000380:	b953      	cbnz	r3, 90000398 <__aeabi_uldivmod+0x18>
90000382:	b94a      	cbnz	r2, 90000398 <__aeabi_uldivmod+0x18>
90000384:	2900      	cmp	r1, #0
90000386:	bf08      	it	eq
90000388:	2800      	cmpeq	r0, #0
9000038a:	bf1c      	itt	ne
9000038c:	f04f 31ff 	movne.w	r1, #4294967295
90000390:	f04f 30ff 	movne.w	r0, #4294967295
90000394:	f000 b988 	b.w	900006a8 <__aeabi_idiv0>
90000398:	f1ad 0c08 	sub.w	ip, sp, #8
9000039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003a0:	f000 f806 	bl	900003b0 <__udivmoddi4>
900003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ac:	b004      	add	sp, #16
900003ae:	4770      	bx	lr

900003b0 <__udivmoddi4>:
900003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003b4:	9d08      	ldr	r5, [sp, #32]
900003b6:	468e      	mov	lr, r1
900003b8:	4604      	mov	r4, r0
900003ba:	4688      	mov	r8, r1
900003bc:	2b00      	cmp	r3, #0
900003be:	d14a      	bne.n	90000456 <__udivmoddi4+0xa6>
900003c0:	428a      	cmp	r2, r1
900003c2:	4617      	mov	r7, r2
900003c4:	d962      	bls.n	9000048c <__udivmoddi4+0xdc>
900003c6:	fab2 f682 	clz	r6, r2
900003ca:	b14e      	cbz	r6, 900003e0 <__udivmoddi4+0x30>
900003cc:	f1c6 0320 	rsb	r3, r6, #32
900003d0:	fa01 f806 	lsl.w	r8, r1, r6
900003d4:	fa20 f303 	lsr.w	r3, r0, r3
900003d8:	40b7      	lsls	r7, r6
900003da:	ea43 0808 	orr.w	r8, r3, r8
900003de:	40b4      	lsls	r4, r6
900003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003e4:	fa1f fc87 	uxth.w	ip, r7
900003e8:	fbb8 f1fe 	udiv	r1, r8, lr
900003ec:	0c23      	lsrs	r3, r4, #16
900003ee:	fb0e 8811 	mls	r8, lr, r1, r8
900003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900003f6:	fb01 f20c 	mul.w	r2, r1, ip
900003fa:	429a      	cmp	r2, r3
900003fc:	d909      	bls.n	90000412 <__udivmoddi4+0x62>
900003fe:	18fb      	adds	r3, r7, r3
90000400:	f101 30ff 	add.w	r0, r1, #4294967295
90000404:	f080 80ea 	bcs.w	900005dc <__udivmoddi4+0x22c>
90000408:	429a      	cmp	r2, r3
9000040a:	f240 80e7 	bls.w	900005dc <__udivmoddi4+0x22c>
9000040e:	3902      	subs	r1, #2
90000410:	443b      	add	r3, r7
90000412:	1a9a      	subs	r2, r3, r2
90000414:	b2a3      	uxth	r3, r4
90000416:	fbb2 f0fe 	udiv	r0, r2, lr
9000041a:	fb0e 2210 	mls	r2, lr, r0, r2
9000041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000422:	fb00 fc0c 	mul.w	ip, r0, ip
90000426:	459c      	cmp	ip, r3
90000428:	d909      	bls.n	9000043e <__udivmoddi4+0x8e>
9000042a:	18fb      	adds	r3, r7, r3
9000042c:	f100 32ff 	add.w	r2, r0, #4294967295
90000430:	f080 80d6 	bcs.w	900005e0 <__udivmoddi4+0x230>
90000434:	459c      	cmp	ip, r3
90000436:	f240 80d3 	bls.w	900005e0 <__udivmoddi4+0x230>
9000043a:	443b      	add	r3, r7
9000043c:	3802      	subs	r0, #2
9000043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000442:	eba3 030c 	sub.w	r3, r3, ip
90000446:	2100      	movs	r1, #0
90000448:	b11d      	cbz	r5, 90000452 <__udivmoddi4+0xa2>
9000044a:	40f3      	lsrs	r3, r6
9000044c:	2200      	movs	r2, #0
9000044e:	e9c5 3200 	strd	r3, r2, [r5]
90000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000456:	428b      	cmp	r3, r1
90000458:	d905      	bls.n	90000466 <__udivmoddi4+0xb6>
9000045a:	b10d      	cbz	r5, 90000460 <__udivmoddi4+0xb0>
9000045c:	e9c5 0100 	strd	r0, r1, [r5]
90000460:	2100      	movs	r1, #0
90000462:	4608      	mov	r0, r1
90000464:	e7f5      	b.n	90000452 <__udivmoddi4+0xa2>
90000466:	fab3 f183 	clz	r1, r3
9000046a:	2900      	cmp	r1, #0
9000046c:	d146      	bne.n	900004fc <__udivmoddi4+0x14c>
9000046e:	4573      	cmp	r3, lr
90000470:	d302      	bcc.n	90000478 <__udivmoddi4+0xc8>
90000472:	4282      	cmp	r2, r0
90000474:	f200 8105 	bhi.w	90000682 <__udivmoddi4+0x2d2>
90000478:	1a84      	subs	r4, r0, r2
9000047a:	eb6e 0203 	sbc.w	r2, lr, r3
9000047e:	2001      	movs	r0, #1
90000480:	4690      	mov	r8, r2
90000482:	2d00      	cmp	r5, #0
90000484:	d0e5      	beq.n	90000452 <__udivmoddi4+0xa2>
90000486:	e9c5 4800 	strd	r4, r8, [r5]
9000048a:	e7e2      	b.n	90000452 <__udivmoddi4+0xa2>
9000048c:	2a00      	cmp	r2, #0
9000048e:	f000 8090 	beq.w	900005b2 <__udivmoddi4+0x202>
90000492:	fab2 f682 	clz	r6, r2
90000496:	2e00      	cmp	r6, #0
90000498:	f040 80a4 	bne.w	900005e4 <__udivmoddi4+0x234>
9000049c:	1a8a      	subs	r2, r1, r2
9000049e:	0c03      	lsrs	r3, r0, #16
900004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004a4:	b280      	uxth	r0, r0
900004a6:	b2bc      	uxth	r4, r7
900004a8:	2101      	movs	r1, #1
900004aa:	fbb2 fcfe 	udiv	ip, r2, lr
900004ae:	fb0e 221c 	mls	r2, lr, ip, r2
900004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004b6:	fb04 f20c 	mul.w	r2, r4, ip
900004ba:	429a      	cmp	r2, r3
900004bc:	d907      	bls.n	900004ce <__udivmoddi4+0x11e>
900004be:	18fb      	adds	r3, r7, r3
900004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004c4:	d202      	bcs.n	900004cc <__udivmoddi4+0x11c>
900004c6:	429a      	cmp	r2, r3
900004c8:	f200 80e0 	bhi.w	9000068c <__udivmoddi4+0x2dc>
900004cc:	46c4      	mov	ip, r8
900004ce:	1a9b      	subs	r3, r3, r2
900004d0:	fbb3 f2fe 	udiv	r2, r3, lr
900004d4:	fb0e 3312 	mls	r3, lr, r2, r3
900004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004dc:	fb02 f404 	mul.w	r4, r2, r4
900004e0:	429c      	cmp	r4, r3
900004e2:	d907      	bls.n	900004f4 <__udivmoddi4+0x144>
900004e4:	18fb      	adds	r3, r7, r3
900004e6:	f102 30ff 	add.w	r0, r2, #4294967295
900004ea:	d202      	bcs.n	900004f2 <__udivmoddi4+0x142>
900004ec:	429c      	cmp	r4, r3
900004ee:	f200 80ca 	bhi.w	90000686 <__udivmoddi4+0x2d6>
900004f2:	4602      	mov	r2, r0
900004f4:	1b1b      	subs	r3, r3, r4
900004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
900004fa:	e7a5      	b.n	90000448 <__udivmoddi4+0x98>
900004fc:	f1c1 0620 	rsb	r6, r1, #32
90000500:	408b      	lsls	r3, r1
90000502:	fa22 f706 	lsr.w	r7, r2, r6
90000506:	431f      	orrs	r7, r3
90000508:	fa0e f401 	lsl.w	r4, lr, r1
9000050c:	fa20 f306 	lsr.w	r3, r0, r6
90000510:	fa2e fe06 	lsr.w	lr, lr, r6
90000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000518:	4323      	orrs	r3, r4
9000051a:	fa00 f801 	lsl.w	r8, r0, r1
9000051e:	fa1f fc87 	uxth.w	ip, r7
90000522:	fbbe f0f9 	udiv	r0, lr, r9
90000526:	0c1c      	lsrs	r4, r3, #16
90000528:	fb09 ee10 	mls	lr, r9, r0, lr
9000052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000530:	fb00 fe0c 	mul.w	lr, r0, ip
90000534:	45a6      	cmp	lr, r4
90000536:	fa02 f201 	lsl.w	r2, r2, r1
9000053a:	d909      	bls.n	90000550 <__udivmoddi4+0x1a0>
9000053c:	193c      	adds	r4, r7, r4
9000053e:	f100 3aff 	add.w	sl, r0, #4294967295
90000542:	f080 809c 	bcs.w	9000067e <__udivmoddi4+0x2ce>
90000546:	45a6      	cmp	lr, r4
90000548:	f240 8099 	bls.w	9000067e <__udivmoddi4+0x2ce>
9000054c:	3802      	subs	r0, #2
9000054e:	443c      	add	r4, r7
90000550:	eba4 040e 	sub.w	r4, r4, lr
90000554:	fa1f fe83 	uxth.w	lr, r3
90000558:	fbb4 f3f9 	udiv	r3, r4, r9
9000055c:	fb09 4413 	mls	r4, r9, r3, r4
90000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000564:	fb03 fc0c 	mul.w	ip, r3, ip
90000568:	45a4      	cmp	ip, r4
9000056a:	d908      	bls.n	9000057e <__udivmoddi4+0x1ce>
9000056c:	193c      	adds	r4, r7, r4
9000056e:	f103 3eff 	add.w	lr, r3, #4294967295
90000572:	f080 8082 	bcs.w	9000067a <__udivmoddi4+0x2ca>
90000576:	45a4      	cmp	ip, r4
90000578:	d97f      	bls.n	9000067a <__udivmoddi4+0x2ca>
9000057a:	3b02      	subs	r3, #2
9000057c:	443c      	add	r4, r7
9000057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000582:	eba4 040c 	sub.w	r4, r4, ip
90000586:	fba0 ec02 	umull	lr, ip, r0, r2
9000058a:	4564      	cmp	r4, ip
9000058c:	4673      	mov	r3, lr
9000058e:	46e1      	mov	r9, ip
90000590:	d362      	bcc.n	90000658 <__udivmoddi4+0x2a8>
90000592:	d05f      	beq.n	90000654 <__udivmoddi4+0x2a4>
90000594:	b15d      	cbz	r5, 900005ae <__udivmoddi4+0x1fe>
90000596:	ebb8 0203 	subs.w	r2, r8, r3
9000059a:	eb64 0409 	sbc.w	r4, r4, r9
9000059e:	fa04 f606 	lsl.w	r6, r4, r6
900005a2:	fa22 f301 	lsr.w	r3, r2, r1
900005a6:	431e      	orrs	r6, r3
900005a8:	40cc      	lsrs	r4, r1
900005aa:	e9c5 6400 	strd	r6, r4, [r5]
900005ae:	2100      	movs	r1, #0
900005b0:	e74f      	b.n	90000452 <__udivmoddi4+0xa2>
900005b2:	fbb1 fcf2 	udiv	ip, r1, r2
900005b6:	0c01      	lsrs	r1, r0, #16
900005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005bc:	b280      	uxth	r0, r0
900005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005c2:	463b      	mov	r3, r7
900005c4:	4638      	mov	r0, r7
900005c6:	463c      	mov	r4, r7
900005c8:	46b8      	mov	r8, r7
900005ca:	46be      	mov	lr, r7
900005cc:	2620      	movs	r6, #32
900005ce:	fbb1 f1f7 	udiv	r1, r1, r7
900005d2:	eba2 0208 	sub.w	r2, r2, r8
900005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005da:	e766      	b.n	900004aa <__udivmoddi4+0xfa>
900005dc:	4601      	mov	r1, r0
900005de:	e718      	b.n	90000412 <__udivmoddi4+0x62>
900005e0:	4610      	mov	r0, r2
900005e2:	e72c      	b.n	9000043e <__udivmoddi4+0x8e>
900005e4:	f1c6 0220 	rsb	r2, r6, #32
900005e8:	fa2e f302 	lsr.w	r3, lr, r2
900005ec:	40b7      	lsls	r7, r6
900005ee:	40b1      	lsls	r1, r6
900005f0:	fa20 f202 	lsr.w	r2, r0, r2
900005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900005f8:	430a      	orrs	r2, r1
900005fa:	fbb3 f8fe 	udiv	r8, r3, lr
900005fe:	b2bc      	uxth	r4, r7
90000600:	fb0e 3318 	mls	r3, lr, r8, r3
90000604:	0c11      	lsrs	r1, r2, #16
90000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000060a:	fb08 f904 	mul.w	r9, r8, r4
9000060e:	40b0      	lsls	r0, r6
90000610:	4589      	cmp	r9, r1
90000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000616:	b280      	uxth	r0, r0
90000618:	d93e      	bls.n	90000698 <__udivmoddi4+0x2e8>
9000061a:	1879      	adds	r1, r7, r1
9000061c:	f108 3cff 	add.w	ip, r8, #4294967295
90000620:	d201      	bcs.n	90000626 <__udivmoddi4+0x276>
90000622:	4589      	cmp	r9, r1
90000624:	d81f      	bhi.n	90000666 <__udivmoddi4+0x2b6>
90000626:	eba1 0109 	sub.w	r1, r1, r9
9000062a:	fbb1 f9fe 	udiv	r9, r1, lr
9000062e:	fb09 f804 	mul.w	r8, r9, r4
90000632:	fb0e 1119 	mls	r1, lr, r9, r1
90000636:	b292      	uxth	r2, r2
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	4542      	cmp	r2, r8
9000063e:	d229      	bcs.n	90000694 <__udivmoddi4+0x2e4>
90000640:	18ba      	adds	r2, r7, r2
90000642:	f109 31ff 	add.w	r1, r9, #4294967295
90000646:	d2c4      	bcs.n	900005d2 <__udivmoddi4+0x222>
90000648:	4542      	cmp	r2, r8
9000064a:	d2c2      	bcs.n	900005d2 <__udivmoddi4+0x222>
9000064c:	f1a9 0102 	sub.w	r1, r9, #2
90000650:	443a      	add	r2, r7
90000652:	e7be      	b.n	900005d2 <__udivmoddi4+0x222>
90000654:	45f0      	cmp	r8, lr
90000656:	d29d      	bcs.n	90000594 <__udivmoddi4+0x1e4>
90000658:	ebbe 0302 	subs.w	r3, lr, r2
9000065c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000660:	3801      	subs	r0, #1
90000662:	46e1      	mov	r9, ip
90000664:	e796      	b.n	90000594 <__udivmoddi4+0x1e4>
90000666:	eba7 0909 	sub.w	r9, r7, r9
9000066a:	4449      	add	r1, r9
9000066c:	f1a8 0c02 	sub.w	ip, r8, #2
90000670:	fbb1 f9fe 	udiv	r9, r1, lr
90000674:	fb09 f804 	mul.w	r8, r9, r4
90000678:	e7db      	b.n	90000632 <__udivmoddi4+0x282>
9000067a:	4673      	mov	r3, lr
9000067c:	e77f      	b.n	9000057e <__udivmoddi4+0x1ce>
9000067e:	4650      	mov	r0, sl
90000680:	e766      	b.n	90000550 <__udivmoddi4+0x1a0>
90000682:	4608      	mov	r0, r1
90000684:	e6fd      	b.n	90000482 <__udivmoddi4+0xd2>
90000686:	443b      	add	r3, r7
90000688:	3a02      	subs	r2, #2
9000068a:	e733      	b.n	900004f4 <__udivmoddi4+0x144>
9000068c:	f1ac 0c02 	sub.w	ip, ip, #2
90000690:	443b      	add	r3, r7
90000692:	e71c      	b.n	900004ce <__udivmoddi4+0x11e>
90000694:	4649      	mov	r1, r9
90000696:	e79c      	b.n	900005d2 <__udivmoddi4+0x222>
90000698:	eba1 0109 	sub.w	r1, r1, r9
9000069c:	46c4      	mov	ip, r8
9000069e:	fbb1 f9fe 	udiv	r9, r1, lr
900006a2:	fb09 f804 	mul.w	r8, r9, r4
900006a6:	e7c4      	b.n	90000632 <__udivmoddi4+0x282>

900006a8 <__aeabi_idiv0>:
900006a8:	4770      	bx	lr
900006aa:	bf00      	nop

900006ac <clearInput>:
#include "appLogic.h"


void clearInput(AppContext *ctx) {
900006ac:	b480      	push	{r7}
900006ae:	b083      	sub	sp, #12
900006b0:	af00      	add	r7, sp, #0
900006b2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
900006b4:	687b      	ldr	r3, [r7, #4]
900006b6:	2200      	movs	r2, #0
900006b8:	809a      	strh	r2, [r3, #4]
}
900006ba:	bf00      	nop
900006bc:	370c      	adds	r7, #12
900006be:	46bd      	mov	sp, r7
900006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006c4:	4770      	bx	lr

900006c6 <clearVoltage>:

void clearVoltage(AppContext *ctx) {
900006c6:	b480      	push	{r7}
900006c8:	b083      	sub	sp, #12
900006ca:	af00      	add	r7, sp, #0
900006cc:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
900006ce:	687b      	ldr	r3, [r7, #4]
900006d0:	2200      	movs	r2, #0
900006d2:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
900006d4:	687b      	ldr	r3, [r7, #4]
900006d6:	2200      	movs	r2, #0
900006d8:	719a      	strb	r2, [r3, #6]
}
900006da:	bf00      	nop
900006dc:	370c      	adds	r7, #12
900006de:	46bd      	mov	sp, r7
900006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006e4:	4770      	bx	lr
	...

900006e8 <backspace>:

void backspace(AppContext *ctx) {
900006e8:	b480      	push	{r7}
900006ea:	b083      	sub	sp, #12
900006ec:	af00      	add	r7, sp, #0
900006ee:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
900006f0:	687b      	ldr	r3, [r7, #4]
900006f2:	889b      	ldrh	r3, [r3, #4]
900006f4:	4a06      	ldr	r2, [pc, #24]	@ (90000710 <backspace+0x28>)
900006f6:	fba2 2303 	umull	r2, r3, r2, r3
900006fa:	08db      	lsrs	r3, r3, #3
900006fc:	b29a      	uxth	r2, r3
900006fe:	687b      	ldr	r3, [r7, #4]
90000700:	809a      	strh	r2, [r3, #4]
}
90000702:	bf00      	nop
90000704:	370c      	adds	r7, #12
90000706:	46bd      	mov	sp, r7
90000708:	f85d 7b04 	ldr.w	r7, [sp], #4
9000070c:	4770      	bx	lr
9000070e:	bf00      	nop
90000710:	cccccccd 	.word	0xcccccccd

90000714 <stopPWM>:

void stopPWM(AppContext *ctx) {
90000714:	b480      	push	{r7}
90000716:	b083      	sub	sp, #12
90000718:	af00      	add	r7, sp, #0
9000071a:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = false;
9000071c:	687b      	ldr	r3, [r7, #4]
9000071e:	2200      	movs	r2, #0
90000720:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
  // TODO callbakc
}
90000722:	bf00      	nop
90000724:	370c      	adds	r7, #12
90000726:	46bd      	mov	sp, r7
90000728:	f85d 7b04 	ldr.w	r7, [sp], #4
9000072c:	4770      	bx	lr

9000072e <startPWM>:

void startPWM(AppContext *ctx) {
9000072e:	b480      	push	{r7}
90000730:	b083      	sub	sp, #12
90000732:	af00      	add	r7, sp, #0
90000734:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = true;
90000736:	687b      	ldr	r3, [r7, #4]
90000738:	2201      	movs	r2, #1
9000073a:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ctx->voltage / 4);
  // TODO callbakc
}
9000073c:	bf00      	nop
9000073e:	370c      	adds	r7, #12
90000740:	46bd      	mov	sp, r7
90000742:	f85d 7b04 	ldr.w	r7, [sp], #4
90000746:	4770      	bx	lr

90000748 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
90000748:	b480      	push	{r7}
9000074a:	b083      	sub	sp, #12
9000074c:	af00      	add	r7, sp, #0
9000074e:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
90000750:	687b      	ldr	r3, [r7, #4]
90000752:	2201      	movs	r2, #1
90000754:	701a      	strb	r2, [r3, #0]
}
90000756:	bf00      	nop
90000758:	370c      	adds	r7, #12
9000075a:	46bd      	mov	sp, r7
9000075c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000760:	4770      	bx	lr

90000762 <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
90000762:	b480      	push	{r7}
90000764:	b083      	sub	sp, #12
90000766:	af00      	add	r7, sp, #0
90000768:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F1;
9000076a:	687b      	ldr	r3, [r7, #4]
9000076c:	2200      	movs	r2, #0
9000076e:	701a      	strb	r2, [r3, #0]
}
90000770:	bf00      	nop
90000772:	370c      	adds	r7, #12
90000774:	46bd      	mov	sp, r7
90000776:	f85d 7b04 	ldr.w	r7, [sp], #4
9000077a:	4770      	bx	lr

9000077c <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
9000077c:	b580      	push	{r7, lr}
9000077e:	b082      	sub	sp, #8
90000780:	af00      	add	r7, sp, #0
90000782:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
90000784:	687b      	ldr	r3, [r7, #4]
90000786:	889b      	ldrh	r3, [r3, #4]
90000788:	2b4f      	cmp	r3, #79	@ 0x4f
9000078a:	d904      	bls.n	90000796 <validateAndSetVoltage+0x1a>
9000078c:	687b      	ldr	r3, [r7, #4]
9000078e:	889b      	ldrh	r3, [r3, #4]
90000790:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000794:	d90c      	bls.n	900007b0 <validateAndSetVoltage+0x34>
  {
    strcpy(ctx->message, "Input voltage has to be in range 80 - 400. Resetting, try again!");
90000796:	687b      	ldr	r3, [r7, #4]
90000798:	3308      	adds	r3, #8
9000079a:	4a10      	ldr	r2, [pc, #64]	@ (900007dc <validateAndSetVoltage+0x60>)
9000079c:	4618      	mov	r0, r3
9000079e:	4611      	mov	r1, r2
900007a0:	2341      	movs	r3, #65	@ 0x41
900007a2:	461a      	mov	r2, r3
900007a4:	f00c f8c5 	bl	9000c932 <memcpy>
    clearInput(ctx);
900007a8:	6878      	ldr	r0, [r7, #4]
900007aa:	f7ff ff7f 	bl	900006ac <clearInput>
    return;
900007ae:	e012      	b.n	900007d6 <validateAndSetVoltage+0x5a>
  }
  ctx->isVoltageEntered = true;
900007b0:	687b      	ldr	r3, [r7, #4]
900007b2:	2201      	movs	r2, #1
900007b4:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
900007b6:	687b      	ldr	r3, [r7, #4]
900007b8:	889a      	ldrh	r2, [r3, #4]
900007ba:	687b      	ldr	r3, [r7, #4]
900007bc:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
900007be:	687b      	ldr	r3, [r7, #4]
900007c0:	2200      	movs	r2, #0
900007c2:	809a      	strh	r2, [r3, #4]
  sprintf(ctx->message, "Voltage %d has been successfully entered", ctx->voltage);
900007c4:	687b      	ldr	r3, [r7, #4]
900007c6:	f103 0008 	add.w	r0, r3, #8
900007ca:	687b      	ldr	r3, [r7, #4]
900007cc:	885b      	ldrh	r3, [r3, #2]
900007ce:	461a      	mov	r2, r3
900007d0:	4903      	ldr	r1, [pc, #12]	@ (900007e0 <validateAndSetVoltage+0x64>)
900007d2:	f00b ff29 	bl	9000c628 <siprintf>

}
900007d6:	3708      	adds	r7, #8
900007d8:	46bd      	mov	sp, r7
900007da:	bd80      	pop	{r7, pc}
900007dc:	9000d548 	.word	0x9000d548
900007e0:	9000d58c 	.word	0x9000d58c

900007e4 <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key) {
900007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
900007e6:	b085      	sub	sp, #20
900007e8:	af00      	add	r7, sp, #0
900007ea:	6078      	str	r0, [r7, #4]
900007ec:	460b      	mov	r3, r1
900007ee:	70fb      	strb	r3, [r7, #3]
  uint8_t digit = key - '0';
900007f0:	78fb      	ldrb	r3, [r7, #3]
900007f2:	3b30      	subs	r3, #48	@ 0x30
900007f4:	73fb      	strb	r3, [r7, #15]
  ctx->inputValue = ctx->inputValue * 10 + digit;
900007f6:	687b      	ldr	r3, [r7, #4]
900007f8:	889b      	ldrh	r3, [r3, #4]
900007fa:	461a      	mov	r2, r3
900007fc:	0092      	lsls	r2, r2, #2
900007fe:	4413      	add	r3, r2
90000800:	005b      	lsls	r3, r3, #1
90000802:	b29a      	uxth	r2, r3
90000804:	7bfb      	ldrb	r3, [r7, #15]
90000806:	b29b      	uxth	r3, r3
90000808:	4413      	add	r3, r2
9000080a:	b29a      	uxth	r2, r3
9000080c:	687b      	ldr	r3, [r7, #4]
9000080e:	809a      	strh	r2, [r3, #4]
  if (ctx->inputValue > 400) {
90000810:	687b      	ldr	r3, [r7, #4]
90000812:	889b      	ldrh	r3, [r3, #4]
90000814:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000818:	d91c      	bls.n	90000854 <updateInput+0x70>
    strcpy(ctx->message, "Input set too high, resetting. Try again");
9000081a:	687b      	ldr	r3, [r7, #4]
9000081c:	3308      	adds	r3, #8
9000081e:	4a0f      	ldr	r2, [pc, #60]	@ (9000085c <updateInput+0x78>)
90000820:	4614      	mov	r4, r2
90000822:	469c      	mov	ip, r3
90000824:	f104 0e20 	add.w	lr, r4, #32
90000828:	4665      	mov	r5, ip
9000082a:	4626      	mov	r6, r4
9000082c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
9000082e:	6028      	str	r0, [r5, #0]
90000830:	6069      	str	r1, [r5, #4]
90000832:	60aa      	str	r2, [r5, #8]
90000834:	60eb      	str	r3, [r5, #12]
90000836:	3410      	adds	r4, #16
90000838:	f10c 0c10 	add.w	ip, ip, #16
9000083c:	4574      	cmp	r4, lr
9000083e:	d1f3      	bne.n	90000828 <updateInput+0x44>
90000840:	4662      	mov	r2, ip
90000842:	4623      	mov	r3, r4
90000844:	cb03      	ldmia	r3!, {r0, r1}
90000846:	6010      	str	r0, [r2, #0]
90000848:	6051      	str	r1, [r2, #4]
9000084a:	781b      	ldrb	r3, [r3, #0]
9000084c:	7213      	strb	r3, [r2, #8]
    clearInput(ctx);
9000084e:	6878      	ldr	r0, [r7, #4]
90000850:	f7ff ff2c 	bl	900006ac <clearInput>
  }
}
90000854:	bf00      	nop
90000856:	3714      	adds	r7, #20
90000858:	46bd      	mov	sp, r7
9000085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000085c:	9000d5b8 	.word	0x9000d5b8

90000860 <handle_event>:

void handle_event(AppContext *ctx, KeyboardButton key)
{
90000860:	b580      	push	{r7, lr}
90000862:	b082      	sub	sp, #8
90000864:	af00      	add	r7, sp, #0
90000866:	6078      	str	r0, [r7, #4]
90000868:	460b      	mov	r3, r1
9000086a:	70fb      	strb	r3, [r7, #3]
  //sprintf(ctx->message, " ");
  strcpy(ctx->message, "");
9000086c:	687b      	ldr	r3, [r7, #4]
9000086e:	3308      	adds	r3, #8
90000870:	2200      	movs	r2, #0
90000872:	701a      	strb	r2, [r3, #0]

  if (ctx->currentState == STATE_F1) {
90000874:	687b      	ldr	r3, [r7, #4]
90000876:	781b      	ldrb	r3, [r3, #0]
90000878:	2b00      	cmp	r3, #0
9000087a:	d13d      	bne.n	900008f8 <handle_event+0x98>
	if (ctx->isPwmRunning == true)
9000087c:	687b      	ldr	r3, [r7, #4]
9000087e:	79db      	ldrb	r3, [r3, #7]
90000880:	2b00      	cmp	r3, #0
90000882:	d006      	beq.n	90000892 <handle_event+0x32>
	{
	  if (key == KEY_Stop) stopPWM(ctx);
90000884:	78fb      	ldrb	r3, [r7, #3]
90000886:	2b73      	cmp	r3, #115	@ 0x73
90000888:	d141      	bne.n	9000090e <handle_event+0xae>
9000088a:	6878      	ldr	r0, [r7, #4]
9000088c:	f7ff ff42 	bl	90000714 <stopPWM>
	  return; // when PWM is running, we can only press the "STOP" button
90000890:	e03d      	b.n	9000090e <handle_event+0xae>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
90000892:	687b      	ldr	r3, [r7, #4]
90000894:	799b      	ldrb	r3, [r3, #6]
90000896:	2b00      	cmp	r3, #0
90000898:	d005      	beq.n	900008a6 <handle_event+0x46>
	{
	  if (key == KEY_Start) startPWM(ctx);
9000089a:	78fb      	ldrb	r3, [r7, #3]
9000089c:	2b53      	cmp	r3, #83	@ 0x53
9000089e:	d102      	bne.n	900008a6 <handle_event+0x46>
900008a0:	6878      	ldr	r0, [r7, #4]
900008a2:	f7ff ff44 	bl	9000072e <startPWM>
	}

	if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key);
900008a6:	78fb      	ldrb	r3, [r7, #3]
900008a8:	2b2f      	cmp	r3, #47	@ 0x2f
900008aa:	d907      	bls.n	900008bc <handle_event+0x5c>
900008ac:	78fb      	ldrb	r3, [r7, #3]
900008ae:	2b39      	cmp	r3, #57	@ 0x39
900008b0:	d804      	bhi.n	900008bc <handle_event+0x5c>
900008b2:	78fb      	ldrb	r3, [r7, #3]
900008b4:	4619      	mov	r1, r3
900008b6:	6878      	ldr	r0, [r7, #4]
900008b8:	f7ff ff94 	bl	900007e4 <updateInput>
	if (key == KEY_Clear) clearVoltage(ctx);
900008bc:	78fb      	ldrb	r3, [r7, #3]
900008be:	2b63      	cmp	r3, #99	@ 0x63
900008c0:	d102      	bne.n	900008c8 <handle_event+0x68>
900008c2:	6878      	ldr	r0, [r7, #4]
900008c4:	f7ff feff 	bl	900006c6 <clearVoltage>
	if (key == KEY_Enter) validateAndSetVoltage(ctx);
900008c8:	78fb      	ldrb	r3, [r7, #3]
900008ca:	2b65      	cmp	r3, #101	@ 0x65
900008cc:	d102      	bne.n	900008d4 <handle_event+0x74>
900008ce:	6878      	ldr	r0, [r7, #4]
900008d0:	f7ff ff54 	bl	9000077c <validateAndSetVoltage>
	if (key == KEY_BkSp) backspace(ctx);
900008d4:	78fb      	ldrb	r3, [r7, #3]
900008d6:	2b62      	cmp	r3, #98	@ 0x62
900008d8:	d102      	bne.n	900008e0 <handle_event+0x80>
900008da:	6878      	ldr	r0, [r7, #4]
900008dc:	f7ff ff04 	bl	900006e8 <backspace>
	if (key == KEY_F2) setSTATE_F2(ctx);
900008e0:	78fb      	ldrb	r3, [r7, #3]
900008e2:	2b40      	cmp	r3, #64	@ 0x40
900008e4:	d102      	bne.n	900008ec <handle_event+0x8c>
900008e6:	6878      	ldr	r0, [r7, #4]
900008e8:	f7ff ff2e 	bl	90000748 <setSTATE_F2>
	if (key == KEY_ESC) clearInput(ctx);
900008ec:	78fb      	ldrb	r3, [r7, #3]
900008ee:	2b60      	cmp	r3, #96	@ 0x60
900008f0:	d102      	bne.n	900008f8 <handle_event+0x98>
900008f2:	6878      	ldr	r0, [r7, #4]
900008f4:	f7ff feda 	bl	900006ac <clearInput>
  }

  if (ctx->currentState == STATE_F2) {
900008f8:	687b      	ldr	r3, [r7, #4]
900008fa:	781b      	ldrb	r3, [r3, #0]
900008fc:	2b01      	cmp	r3, #1
900008fe:	d109      	bne.n	90000914 <handle_event+0xb4>
	if (key == KEY_F1) setSTATE_F1(ctx);
90000900:	78fb      	ldrb	r3, [r7, #3]
90000902:	2b21      	cmp	r3, #33	@ 0x21
90000904:	d105      	bne.n	90000912 <handle_event+0xb2>
90000906:	6878      	ldr	r0, [r7, #4]
90000908:	f7ff ff2b 	bl	90000762 <setSTATE_F1>
	return;
9000090c:	e001      	b.n	90000912 <handle_event+0xb2>
	  return; // when PWM is running, we can only press the "STOP" button
9000090e:	bf00      	nop
90000910:	e000      	b.n	90000914 <handle_event+0xb4>
	return;
90000912:	bf00      	nop
  }
}
90000914:	3708      	adds	r7, #8
90000916:	46bd      	mov	sp, r7
90000918:	bd80      	pop	{r7, pc}

9000091a <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx) {
9000091a:	b480      	push	{r7}
9000091c:	b083      	sub	sp, #12
9000091e:	af00      	add	r7, sp, #0
90000920:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_F1;
90000922:	687b      	ldr	r3, [r7, #4]
90000924:	2200      	movs	r2, #0
90000926:	701a      	strb	r2, [r3, #0]
	ctx->isVoltageEntered = false;
90000928:	687b      	ldr	r3, [r7, #4]
9000092a:	2200      	movs	r2, #0
9000092c:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
9000092e:	687b      	ldr	r3, [r7, #4]
90000930:	2200      	movs	r2, #0
90000932:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
90000934:	687b      	ldr	r3, [r7, #4]
90000936:	2200      	movs	r2, #0
90000938:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
9000093a:	687b      	ldr	r3, [r7, #4]
9000093c:	2200      	movs	r2, #0
9000093e:	809a      	strh	r2, [r3, #4]
}
90000940:	bf00      	nop
90000942:	370c      	adds	r7, #12
90000944:	46bd      	mov	sp, r7
90000946:	f85d 7b04 	ldr.w	r7, [sp], #4
9000094a:	4770      	bx	lr

9000094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
9000094c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 90000988 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
90000950:	f002 fc24 	bl	9000319c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
90000954:	f002 fbc0 	bl	900030d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000958:	480c      	ldr	r0, [pc, #48]	@ (9000098c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
9000095a:	490d      	ldr	r1, [pc, #52]	@ (90000990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
9000095c:	4a0d      	ldr	r2, [pc, #52]	@ (90000994 <LoopFillZerobss+0x1a>)
  movs r3, #0
9000095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000960:	e002      	b.n	90000968 <LoopCopyDataInit>

90000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000966:	3304      	adds	r3, #4

90000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
9000096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
9000096c:	d3f9      	bcc.n	90000962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
9000096e:	4a0a      	ldr	r2, [pc, #40]	@ (90000998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000970:	4c0a      	ldr	r4, [pc, #40]	@ (9000099c <LoopFillZerobss+0x22>)
  movs r3, #0
90000972:	2300      	movs	r3, #0
  b LoopFillZerobss
90000974:	e001      	b.n	9000097a <LoopFillZerobss>

90000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000978:	3204      	adds	r2, #4

9000097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
9000097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
9000097c:	d3fb      	bcc.n	90000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
9000097e:	f00b ffb1 	bl	9000c8e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000982:	f000 f827 	bl	900009d4 <main>
  bx  lr
90000986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
9000098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000990:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
90000994:	9000fc40 	.word	0x9000fc40
  ldr r2, =_sbss
90000998:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
9000099c:	200014a0 	.word	0x200014a0

900009a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900009a0:	e7fe      	b.n	900009a0 <ADC3_IRQHandler>
	...

900009a4 <__io_putchar>:
static void CPU_CACHE_Enable(void);
static void CPU_CACHE_Disable(void);
static void MPU_Config(void);
static void MX_USART3_UART_Init(void);

int __io_putchar(int ch) {
900009a4:	b580      	push	{r7, lr}
900009a6:	b082      	sub	sp, #8
900009a8:	af00      	add	r7, sp, #0
900009aa:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
900009ac:	1d39      	adds	r1, r7, #4
900009ae:	f04f 33ff 	mov.w	r3, #4294967295
900009b2:	2201      	movs	r2, #1
900009b4:	4806      	ldr	r0, [pc, #24]	@ (900009d0 <__io_putchar+0x2c>)
900009b6:	f009 f9ab 	bl	90009d10 <HAL_UART_Transmit>
900009ba:	4603      	mov	r3, r0
900009bc:	2b00      	cmp	r3, #0
900009be:	d002      	beq.n	900009c6 <__io_putchar+0x22>
    return -1;
900009c0:	f04f 33ff 	mov.w	r3, #4294967295
900009c4:	e000      	b.n	900009c8 <__io_putchar+0x24>
  }
  return ch;
900009c6:	687b      	ldr	r3, [r7, #4]
}
900009c8:	4618      	mov	r0, r3
900009ca:	3708      	adds	r7, #8
900009cc:	46bd      	mov	sp, r7
900009ce:	bd80      	pop	{r7, pc}
900009d0:	200000f4 	.word	0x200000f4

900009d4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
900009d4:	b580      	push	{r7, lr}
900009d6:	b094      	sub	sp, #80	@ 0x50
900009d8:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
900009da:	f000 fa8f 	bl	90000efc <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
900009de:	f000 f9fb 	bl	90000dd8 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
900009e2:	f002 fbf3 	bl	900031cc <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
900009e6:	f000 f8f3 	bl	90000bd0 <SystemClock_Config>

  MX_USART3_UART_Init();
900009ea:	f000 f837 	bl	90000a5c <MX_USART3_UART_Init>

  printf("Hi there :)!\r\n");
900009ee:	481a      	ldr	r0, [pc, #104]	@ (90000a58 <main+0x84>)
900009f0:	f00b fe12 	bl	9000c618 <puts>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
900009f4:	2000      	movs	r0, #0
900009f6:	f000 feff 	bl	900017f8 <BSP_LED_Init>

  AppContext ctx;
  InitializeAppContext(&ctx);
900009fa:	463b      	mov	r3, r7
900009fc:	4618      	mov	r0, r3
900009fe:	f7ff ff8c 	bl	9000091a <InitializeAppContext>

  InitializeLcd();
90000a02:	f000 fc17 	bl	90001234 <InitializeLcd>
  //CPU_CACHE_Disable();
  Draw_Menu();
90000a06:	f000 fbe5 	bl	900011d4 <Draw_Menu>
  UartClearScreen();
90000a0a:	f000 fc43 	bl	90001294 <UartClearScreen>

  HAL_Delay(1000);
90000a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
90000a12:	f002 fc75 	bl	90003300 <HAL_Delay>
  InitFlexiKeyboard(); // has to be AFTER BSP_LCD_Init, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000a16:	f00a ff5d 	bl	9000b8d4 <InitFlexiKeyboard>

  CPU_CACHE_Enable();
90000a1a:	f000 f9dd 	bl	90000dd8 <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
  {
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
90000a1e:	f00a feef 	bl	9000b800 <ReadFlexiKeyboard>
90000a22:	4603      	mov	r3, r0
90000a24:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  if (key == KEY_NULL) continue;
90000a28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
90000a2c:	2b4e      	cmp	r3, #78	@ 0x4e
90000a2e:	d011      	beq.n	90000a54 <main+0x80>
	  handle_event(&ctx, key);
90000a30:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
90000a34:	463b      	mov	r3, r7
90000a36:	4611      	mov	r1, r2
90000a38:	4618      	mov	r0, r3
90000a3a:	f7ff ff11 	bl	90000860 <handle_event>
	  UartRenderState(&ctx);
90000a3e:	463b      	mov	r3, r7
90000a40:	4618      	mov	r0, r3
90000a42:	f000 fc35 	bl	900012b0 <UartRenderState>
	  //CPU_CACHE_Disable();
	  DisplayRenderState(&ctx);
90000a46:	463b      	mov	r3, r7
90000a48:	4618      	mov	r0, r3
90000a4a:	f000 fc8b 	bl	90001364 <DisplayRenderState>
	  CPU_CACHE_Enable();
90000a4e:	f000 f9c3 	bl	90000dd8 <CPU_CACHE_Enable>
90000a52:	e7e4      	b.n	90000a1e <main+0x4a>
	  if (key == KEY_NULL) continue;
90000a54:	bf00      	nop
  {
90000a56:	e7e2      	b.n	90000a1e <main+0x4a>
90000a58:	9000d5e4 	.word	0x9000d5e4

90000a5c <MX_USART3_UART_Init>:
  * @param  None
  * @retval None
  */

static void MX_USART3_UART_Init(void)
{
90000a5c:	b580      	push	{r7, lr}
90000a5e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000a60:	4b22      	ldr	r3, [pc, #136]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a62:	4a23      	ldr	r2, [pc, #140]	@ (90000af0 <MX_USART3_UART_Init+0x94>)
90000a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000a66:	4b21      	ldr	r3, [pc, #132]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a70:	2200      	movs	r2, #0
90000a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000a74:	4b1d      	ldr	r3, [pc, #116]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a76:	2200      	movs	r2, #0
90000a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a7c:	2200      	movs	r2, #0
90000a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000a80:	4b1a      	ldr	r3, [pc, #104]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a82:	220c      	movs	r2, #12
90000a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000a86:	4b19      	ldr	r3, [pc, #100]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a88:	2200      	movs	r2, #0
90000a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000a8c:	4b17      	ldr	r3, [pc, #92]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a8e:	2200      	movs	r2, #0
90000a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000a92:	4b16      	ldr	r3, [pc, #88]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a94:	2200      	movs	r2, #0
90000a96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000a98:	4b14      	ldr	r3, [pc, #80]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000a9a:	2200      	movs	r2, #0
90000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000a9e:	4b13      	ldr	r3, [pc, #76]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000aa0:	2200      	movs	r2, #0
90000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000aa4:	4811      	ldr	r0, [pc, #68]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000aa6:	f009 f8e3 	bl	90009c70 <HAL_UART_Init>
90000aaa:	4603      	mov	r3, r0
90000aac:	2b00      	cmp	r3, #0
90000aae:	d001      	beq.n	90000ab4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000ab0:	f000 f88a 	bl	90000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ab4:	2100      	movs	r1, #0
90000ab6:	480d      	ldr	r0, [pc, #52]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000ab8:	f00a f979 	bl	9000adae <HAL_UARTEx_SetTxFifoThreshold>
90000abc:	4603      	mov	r3, r0
90000abe:	2b00      	cmp	r3, #0
90000ac0:	d001      	beq.n	90000ac6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000ac2:	f000 f881 	bl	90000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ac6:	2100      	movs	r1, #0
90000ac8:	4808      	ldr	r0, [pc, #32]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000aca:	f00a f9ae 	bl	9000ae2a <HAL_UARTEx_SetRxFifoThreshold>
90000ace:	4603      	mov	r3, r0
90000ad0:	2b00      	cmp	r3, #0
90000ad2:	d001      	beq.n	90000ad8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000ad4:	f000 f878 	bl	90000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000ad8:	4804      	ldr	r0, [pc, #16]	@ (90000aec <MX_USART3_UART_Init+0x90>)
90000ada:	f00a f92f 	bl	9000ad3c <HAL_UARTEx_DisableFifoMode>
90000ade:	4603      	mov	r3, r0
90000ae0:	2b00      	cmp	r3, #0
90000ae2:	d001      	beq.n	90000ae8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000ae4:	f000 f870 	bl	90000bc8 <Error_Handler>
  }
}
90000ae8:	bf00      	nop
90000aea:	bd80      	pop	{r7, pc}
90000aec:	200000f4 	.word	0x200000f4
90000af0:	40004800 	.word	0x40004800

90000af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000af4:	b580      	push	{r7, lr}
90000af6:	b0ba      	sub	sp, #232	@ 0xe8
90000af8:	af00      	add	r7, sp, #0
90000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000afc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000b00:	2200      	movs	r2, #0
90000b02:	601a      	str	r2, [r3, #0]
90000b04:	605a      	str	r2, [r3, #4]
90000b06:	609a      	str	r2, [r3, #8]
90000b08:	60da      	str	r2, [r3, #12]
90000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000b0c:	f107 0310 	add.w	r3, r7, #16
90000b10:	22c0      	movs	r2, #192	@ 0xc0
90000b12:	2100      	movs	r1, #0
90000b14:	4618      	mov	r0, r3
90000b16:	f00b fe81 	bl	9000c81c <memset>
  if(huart->Instance==USART3)
90000b1a:	687b      	ldr	r3, [r7, #4]
90000b1c:	681b      	ldr	r3, [r3, #0]
90000b1e:	4a27      	ldr	r2, [pc, #156]	@ (90000bbc <HAL_UART_MspInit+0xc8>)
90000b20:	4293      	cmp	r3, r2
90000b22:	d146      	bne.n	90000bb2 <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000b24:	f04f 0202 	mov.w	r2, #2
90000b28:	f04f 0300 	mov.w	r3, #0
90000b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000b30:	2300      	movs	r3, #0
90000b32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000b36:	f107 0310 	add.w	r3, r7, #16
90000b3a:	4618      	mov	r0, r3
90000b3c:	f007 f862 	bl	90007c04 <HAL_RCCEx_PeriphCLKConfig>
90000b40:	4603      	mov	r3, r0
90000b42:	2b00      	cmp	r3, #0
90000b44:	d001      	beq.n	90000b4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000b46:	f000 f83f 	bl	90000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000b4a:	4b1d      	ldr	r3, [pc, #116]	@ (90000bc0 <HAL_UART_MspInit+0xcc>)
90000b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000b50:	4a1b      	ldr	r2, [pc, #108]	@ (90000bc0 <HAL_UART_MspInit+0xcc>)
90000b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000b56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000b5a:	4b19      	ldr	r3, [pc, #100]	@ (90000bc0 <HAL_UART_MspInit+0xcc>)
90000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000b60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000b64:	60fb      	str	r3, [r7, #12]
90000b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000b68:	4b15      	ldr	r3, [pc, #84]	@ (90000bc0 <HAL_UART_MspInit+0xcc>)
90000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b6e:	4a14      	ldr	r2, [pc, #80]	@ (90000bc0 <HAL_UART_MspInit+0xcc>)
90000b70:	f043 0302 	orr.w	r3, r3, #2
90000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000b78:	4b11      	ldr	r3, [pc, #68]	@ (90000bc0 <HAL_UART_MspInit+0xcc>)
90000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b7e:	f003 0302 	and.w	r3, r3, #2
90000b82:	60bb      	str	r3, [r7, #8]
90000b84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000b86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b8e:	2302      	movs	r3, #2
90000b90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b94:	2300      	movs	r3, #0
90000b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b9a:	2300      	movs	r3, #0
90000b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000ba0:	2307      	movs	r3, #7
90000ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000ba6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000baa:	4619      	mov	r1, r3
90000bac:	4805      	ldr	r0, [pc, #20]	@ (90000bc4 <HAL_UART_MspInit+0xd0>)
90000bae:	f003 f845 	bl	90003c3c <HAL_GPIO_Init>
  }
}
90000bb2:	bf00      	nop
90000bb4:	37e8      	adds	r7, #232	@ 0xe8
90000bb6:	46bd      	mov	sp, r7
90000bb8:	bd80      	pop	{r7, pc}
90000bba:	bf00      	nop
90000bbc:	40004800 	.word	0x40004800
90000bc0:	58024400 	.word	0x58024400
90000bc4:	58020400 	.word	0x58020400

90000bc8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000bc8:	b480      	push	{r7}
90000bca:	af00      	add	r7, sp, #0
  while(1)
90000bcc:	bf00      	nop
90000bce:	e7fd      	b.n	90000bcc <Error_Handler+0x4>

90000bd0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000bd0:	b580      	push	{r7, lr}
90000bd2:	b0ce      	sub	sp, #312	@ 0x138
90000bd4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000bd6:	2300      	movs	r3, #0
90000bd8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000bdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000be0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000be4:	2200      	movs	r2, #0
90000be6:	601a      	str	r2, [r3, #0]
90000be8:	4b78      	ldr	r3, [pc, #480]	@ (90000dcc <SystemClock_Config+0x1fc>)
90000bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000bec:	4a77      	ldr	r2, [pc, #476]	@ (90000dcc <SystemClock_Config+0x1fc>)
90000bee:	f023 0301 	bic.w	r3, r3, #1
90000bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000bf4:	4b75      	ldr	r3, [pc, #468]	@ (90000dcc <SystemClock_Config+0x1fc>)
90000bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000bf8:	f003 0201 	and.w	r2, r3, #1
90000bfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c04:	601a      	str	r2, [r3, #0]
90000c06:	4b72      	ldr	r3, [pc, #456]	@ (90000dd0 <SystemClock_Config+0x200>)
90000c08:	699b      	ldr	r3, [r3, #24]
90000c0a:	4a71      	ldr	r2, [pc, #452]	@ (90000dd0 <SystemClock_Config+0x200>)
90000c0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000c10:	6193      	str	r3, [r2, #24]
90000c12:	4b6f      	ldr	r3, [pc, #444]	@ (90000dd0 <SystemClock_Config+0x200>)
90000c14:	699b      	ldr	r3, [r3, #24]
90000c16:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000c1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c1e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c22:	601a      	str	r2, [r3, #0]
90000c24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c2c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000c2e:	bf00      	nop
90000c30:	4b67      	ldr	r3, [pc, #412]	@ (90000dd0 <SystemClock_Config+0x200>)
90000c32:	699b      	ldr	r3, [r3, #24]
90000c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000c3c:	d1f8      	bne.n	90000c30 <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000c3e:	2301      	movs	r3, #1
90000c40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000c44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000c48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000c4c:	2300      	movs	r3, #0
90000c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000c52:	2300      	movs	r3, #0
90000c54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000c58:	2302      	movs	r3, #2
90000c5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000c5e:	2302      	movs	r3, #2
90000c60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000c64:	2305      	movs	r3, #5
90000c66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000c6a:	23a0      	movs	r3, #160	@ 0xa0
90000c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000c70:	2300      	movs	r3, #0
90000c72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000c76:	2302      	movs	r3, #2
90000c78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000c7c:	2302      	movs	r3, #2
90000c7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000c82:	2304      	movs	r3, #4
90000c84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000c88:	2300      	movs	r3, #0
90000c8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000c8e:	2308      	movs	r3, #8
90000c90:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000c94:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000c98:	4618      	mov	r0, r3
90000c9a:	f005 ffcd 	bl	90006c38 <HAL_RCC_OscConfig>
90000c9e:	4603      	mov	r3, r0
90000ca0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000ca4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000ca8:	2b00      	cmp	r3, #0
90000caa:	d001      	beq.n	90000cb0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000cac:	f7ff ff8c 	bl	90000bc8 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000cb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cb4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cb8:	2205      	movs	r2, #5
90000cba:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000cbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cc4:	2260      	movs	r2, #96	@ 0x60
90000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000cc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ccc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cd0:	2202      	movs	r2, #2
90000cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000cd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cd8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cdc:	220a      	movs	r2, #10
90000cde:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000ce0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ce4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ce8:	2212      	movs	r2, #18
90000cea:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cf0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cf4:	2200      	movs	r2, #0
90000cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000cf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cfc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000d04:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d0a:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000d0e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000d12:	f04f 0300 	mov.w	r3, #0
90000d16:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d22:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000d2a:	f107 0308 	add.w	r3, r7, #8
90000d2e:	4618      	mov	r0, r3
90000d30:	f006 ff68 	bl	90007c04 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000d34:	233f      	movs	r3, #63	@ 0x3f
90000d36:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000d3a:	2303      	movs	r3, #3
90000d3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000d40:	2300      	movs	r3, #0
90000d42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000d46:	2308      	movs	r3, #8
90000d48:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000d4c:	2340      	movs	r3, #64	@ 0x40
90000d4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000d52:	2340      	movs	r3, #64	@ 0x40
90000d54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000d5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000d60:	2340      	movs	r3, #64	@ 0x40
90000d62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000d66:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000d6a:	2104      	movs	r1, #4
90000d6c:	4618      	mov	r0, r3
90000d6e:	f006 fbbd 	bl	900074ec <HAL_RCC_ClockConfig>
90000d72:	4603      	mov	r3, r0
90000d74:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000d78:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000d7c:	2b00      	cmp	r3, #0
90000d7e:	d001      	beq.n	90000d84 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000d80:	f7ff ff22 	bl	90000bc8 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000d84:	4b13      	ldr	r3, [pc, #76]	@ (90000dd4 <SystemClock_Config+0x204>)
90000d86:	681b      	ldr	r3, [r3, #0]
90000d88:	4a12      	ldr	r2, [pc, #72]	@ (90000dd4 <SystemClock_Config+0x204>)
90000d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000d8e:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000d90:	4b10      	ldr	r3, [pc, #64]	@ (90000dd4 <SystemClock_Config+0x204>)
90000d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000d96:	4a0f      	ldr	r2, [pc, #60]	@ (90000dd4 <SystemClock_Config+0x204>)
90000d98:	f043 0302 	orr.w	r3, r3, #2
90000d9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000da0:	4b0c      	ldr	r3, [pc, #48]	@ (90000dd4 <SystemClock_Config+0x204>)
90000da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000da6:	f003 0202 	and.w	r2, r3, #2
90000daa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000dae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000db2:	601a      	str	r2, [r3, #0]
90000db4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000db8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000dbc:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000dbe:	f002 facf 	bl	90003360 <HAL_EnableCompensationCell>
}
90000dc2:	bf00      	nop
90000dc4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000dc8:	46bd      	mov	sp, r7
90000dca:	bd80      	pop	{r7, pc}
90000dcc:	58000400 	.word	0x58000400
90000dd0:	58024800 	.word	0x58024800
90000dd4:	58024400 	.word	0x58024400

90000dd8 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000dd8:	b480      	push	{r7}
90000dda:	b085      	sub	sp, #20
90000ddc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000dde:	4b34      	ldr	r3, [pc, #208]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000de0:	695b      	ldr	r3, [r3, #20]
90000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000de6:	2b00      	cmp	r3, #0
90000de8:	d11b      	bne.n	90000e22 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000dea:	f3bf 8f4f 	dsb	sy
}
90000dee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000df0:	f3bf 8f6f 	isb	sy
}
90000df4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000df6:	4b2e      	ldr	r3, [pc, #184]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000df8:	2200      	movs	r2, #0
90000dfa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000dfe:	f3bf 8f4f 	dsb	sy
}
90000e02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e04:	f3bf 8f6f 	isb	sy
}
90000e08:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000e0a:	4b29      	ldr	r3, [pc, #164]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000e0c:	695b      	ldr	r3, [r3, #20]
90000e0e:	4a28      	ldr	r2, [pc, #160]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000e14:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e16:	f3bf 8f4f 	dsb	sy
}
90000e1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e1c:	f3bf 8f6f 	isb	sy
}
90000e20:	e000      	b.n	90000e24 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e22:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e24:	4b22      	ldr	r3, [pc, #136]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000e26:	695b      	ldr	r3, [r3, #20]
90000e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000e2c:	2b00      	cmp	r3, #0
90000e2e:	d138      	bne.n	90000ea2 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000e30:	4b1f      	ldr	r3, [pc, #124]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000e32:	2200      	movs	r2, #0
90000e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000e38:	f3bf 8f4f 	dsb	sy
}
90000e3c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000e44:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000e46:	68fb      	ldr	r3, [r7, #12]
90000e48:	0b5b      	lsrs	r3, r3, #13
90000e4a:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000e4e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000e50:	68fb      	ldr	r3, [r7, #12]
90000e52:	08db      	lsrs	r3, r3, #3
90000e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000e58:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000e5a:	68bb      	ldr	r3, [r7, #8]
90000e5c:	015a      	lsls	r2, r3, #5
90000e5e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000e62:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000e64:	687a      	ldr	r2, [r7, #4]
90000e66:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000e68:	4911      	ldr	r1, [pc, #68]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000e6a:	4313      	orrs	r3, r2
90000e6c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000e70:	687b      	ldr	r3, [r7, #4]
90000e72:	1e5a      	subs	r2, r3, #1
90000e74:	607a      	str	r2, [r7, #4]
90000e76:	2b00      	cmp	r3, #0
90000e78:	d1ef      	bne.n	90000e5a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000e7a:	68bb      	ldr	r3, [r7, #8]
90000e7c:	1e5a      	subs	r2, r3, #1
90000e7e:	60ba      	str	r2, [r7, #8]
90000e80:	2b00      	cmp	r3, #0
90000e82:	d1e5      	bne.n	90000e50 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000e84:	f3bf 8f4f 	dsb	sy
}
90000e88:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000e8a:	4b09      	ldr	r3, [pc, #36]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000e8c:	695b      	ldr	r3, [r3, #20]
90000e8e:	4a08      	ldr	r2, [pc, #32]	@ (90000eb0 <CPU_CACHE_Enable+0xd8>)
90000e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000e94:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e96:	f3bf 8f4f 	dsb	sy
}
90000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e9c:	f3bf 8f6f 	isb	sy
}
90000ea0:	e000      	b.n	90000ea4 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000ea2:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000ea4:	bf00      	nop
90000ea6:	3714      	adds	r7, #20
90000ea8:	46bd      	mov	sp, r7
90000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
90000eae:	4770      	bx	lr
90000eb0:	e000ed00 	.word	0xe000ed00

90000eb4 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000eb4:	b580      	push	{r7, lr}
90000eb6:	b082      	sub	sp, #8
90000eb8:	af00      	add	r7, sp, #0
90000eba:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000ebc:	490e      	ldr	r1, [pc, #56]	@ (90000ef8 <MX_LTDC_ClockConfig+0x44>)
90000ebe:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000ec2:	f04f 0300 	mov.w	r3, #0
90000ec6:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000eca:	4b0b      	ldr	r3, [pc, #44]	@ (90000ef8 <MX_LTDC_ClockConfig+0x44>)
90000ecc:	2205      	movs	r2, #5
90000ece:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000ed0:	4b09      	ldr	r3, [pc, #36]	@ (90000ef8 <MX_LTDC_ClockConfig+0x44>)
90000ed2:	22c0      	movs	r2, #192	@ 0xc0
90000ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000ed6:	4b08      	ldr	r3, [pc, #32]	@ (90000ef8 <MX_LTDC_ClockConfig+0x44>)
90000ed8:	2202      	movs	r2, #2
90000eda:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000edc:	4b06      	ldr	r3, [pc, #24]	@ (90000ef8 <MX_LTDC_ClockConfig+0x44>)
90000ede:	2214      	movs	r2, #20
90000ee0:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000ee2:	4b05      	ldr	r3, [pc, #20]	@ (90000ef8 <MX_LTDC_ClockConfig+0x44>)
90000ee4:	2263      	movs	r2, #99	@ 0x63
90000ee6:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000ee8:	4803      	ldr	r0, [pc, #12]	@ (90000ef8 <MX_LTDC_ClockConfig+0x44>)
90000eea:	f006 fe8b 	bl	90007c04 <HAL_RCCEx_PeriphCLKConfig>
90000eee:	4603      	mov	r3, r0
}
90000ef0:	4618      	mov	r0, r3
90000ef2:	3708      	adds	r7, #8
90000ef4:	46bd      	mov	sp, r7
90000ef6:	bd80      	pop	{r7, pc}
90000ef8:	20000188 	.word	0x20000188

90000efc <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000efc:	b580      	push	{r7, lr}
90000efe:	b084      	sub	sp, #16
90000f00:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000f02:	f002 fb4d 	bl	900035a0 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000f06:	2301      	movs	r3, #1
90000f08:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000f0a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000f0e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000f10:	2318      	movs	r3, #24
90000f12:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000f14:	2303      	movs	r3, #3
90000f16:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000f18:	2300      	movs	r3, #0
90000f1a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000f1c:	2301      	movs	r3, #1
90000f1e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000f20:	2300      	movs	r3, #0
90000f22:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000f24:	2301      	movs	r3, #1
90000f26:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000f28:	2300      	movs	r3, #0
90000f2a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000f2c:	2300      	movs	r3, #0
90000f2e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000f30:	2300      	movs	r3, #0
90000f32:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000f34:	463b      	mov	r3, r7
90000f36:	4618      	mov	r0, r3
90000f38:	f002 fb6a 	bl	90003610 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000f3c:	2004      	movs	r0, #4
90000f3e:	f002 fb47 	bl	900035d0 <HAL_MPU_Enable>
}
90000f42:	bf00      	nop
90000f44:	3710      	adds	r7, #16
90000f46:	46bd      	mov	sp, r7
90000f48:	bd80      	pop	{r7, pc}

90000f4a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000f4a:	b480      	push	{r7}
90000f4c:	af00      	add	r7, sp, #0
}
90000f4e:	bf00      	nop
90000f50:	46bd      	mov	sp, r7
90000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f56:	4770      	bx	lr

90000f58 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000f58:	b480      	push	{r7}
90000f5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000f5c:	bf00      	nop
90000f5e:	e7fd      	b.n	90000f5c <HardFault_Handler+0x4>

90000f60 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000f60:	b480      	push	{r7}
90000f62:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000f64:	bf00      	nop
90000f66:	e7fd      	b.n	90000f64 <MemManage_Handler+0x4>

90000f68 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000f68:	b480      	push	{r7}
90000f6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000f6c:	bf00      	nop
90000f6e:	e7fd      	b.n	90000f6c <BusFault_Handler+0x4>

90000f70 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000f70:	b480      	push	{r7}
90000f72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000f74:	bf00      	nop
90000f76:	e7fd      	b.n	90000f74 <UsageFault_Handler+0x4>

90000f78 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000f78:	b480      	push	{r7}
90000f7a:	af00      	add	r7, sp, #0
}
90000f7c:	bf00      	nop
90000f7e:	46bd      	mov	sp, r7
90000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f84:	4770      	bx	lr

90000f86 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000f86:	b480      	push	{r7}
90000f88:	af00      	add	r7, sp, #0
}
90000f8a:	bf00      	nop
90000f8c:	46bd      	mov	sp, r7
90000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f92:	4770      	bx	lr

90000f94 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000f94:	b480      	push	{r7}
90000f96:	af00      	add	r7, sp, #0
}
90000f98:	bf00      	nop
90000f9a:	46bd      	mov	sp, r7
90000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fa0:	4770      	bx	lr

90000fa2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000fa2:	b580      	push	{r7, lr}
90000fa4:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000fa6:	f002 f98b 	bl	900032c0 <HAL_IncTick>
}
90000faa:	bf00      	nop
90000fac:	bd80      	pop	{r7, pc}
	...

90000fb0 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90000fb0:	b580      	push	{r7, lr}
90000fb2:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000fb4:	4802      	ldr	r0, [pc, #8]	@ (90000fc0 <OTG_FS_IRQHandler+0x10>)
90000fb6:	f003 f822 	bl	90003ffe <HAL_HCD_IRQHandler>
}
90000fba:	bf00      	nop
90000fbc:	bd80      	pop	{r7, pc}
90000fbe:	bf00      	nop
90000fc0:	2000024c 	.word	0x2000024c

90000fc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000fc4:	b580      	push	{r7, lr}
90000fc6:	b086      	sub	sp, #24
90000fc8:	af00      	add	r7, sp, #0
90000fca:	60f8      	str	r0, [r7, #12]
90000fcc:	60b9      	str	r1, [r7, #8]
90000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fd0:	2300      	movs	r3, #0
90000fd2:	617b      	str	r3, [r7, #20]
90000fd4:	e00a      	b.n	90000fec <_read+0x28>
  {
    *ptr++ = __io_getchar();
90000fd6:	f3af 8000 	nop.w
90000fda:	4601      	mov	r1, r0
90000fdc:	68bb      	ldr	r3, [r7, #8]
90000fde:	1c5a      	adds	r2, r3, #1
90000fe0:	60ba      	str	r2, [r7, #8]
90000fe2:	b2ca      	uxtb	r2, r1
90000fe4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fe6:	697b      	ldr	r3, [r7, #20]
90000fe8:	3301      	adds	r3, #1
90000fea:	617b      	str	r3, [r7, #20]
90000fec:	697a      	ldr	r2, [r7, #20]
90000fee:	687b      	ldr	r3, [r7, #4]
90000ff0:	429a      	cmp	r2, r3
90000ff2:	dbf0      	blt.n	90000fd6 <_read+0x12>
  }

  return len;
90000ff4:	687b      	ldr	r3, [r7, #4]
}
90000ff6:	4618      	mov	r0, r3
90000ff8:	3718      	adds	r7, #24
90000ffa:	46bd      	mov	sp, r7
90000ffc:	bd80      	pop	{r7, pc}

90000ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90000ffe:	b580      	push	{r7, lr}
90001000:	b086      	sub	sp, #24
90001002:	af00      	add	r7, sp, #0
90001004:	60f8      	str	r0, [r7, #12]
90001006:	60b9      	str	r1, [r7, #8]
90001008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000100a:	2300      	movs	r3, #0
9000100c:	617b      	str	r3, [r7, #20]
9000100e:	e009      	b.n	90001024 <_write+0x26>
  {
    __io_putchar(*ptr++);
90001010:	68bb      	ldr	r3, [r7, #8]
90001012:	1c5a      	adds	r2, r3, #1
90001014:	60ba      	str	r2, [r7, #8]
90001016:	781b      	ldrb	r3, [r3, #0]
90001018:	4618      	mov	r0, r3
9000101a:	f7ff fcc3 	bl	900009a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000101e:	697b      	ldr	r3, [r7, #20]
90001020:	3301      	adds	r3, #1
90001022:	617b      	str	r3, [r7, #20]
90001024:	697a      	ldr	r2, [r7, #20]
90001026:	687b      	ldr	r3, [r7, #4]
90001028:	429a      	cmp	r2, r3
9000102a:	dbf1      	blt.n	90001010 <_write+0x12>
  }
  return len;
9000102c:	687b      	ldr	r3, [r7, #4]
}
9000102e:	4618      	mov	r0, r3
90001030:	3718      	adds	r7, #24
90001032:	46bd      	mov	sp, r7
90001034:	bd80      	pop	{r7, pc}

90001036 <_close>:

int _close(int file)
{
90001036:	b480      	push	{r7}
90001038:	b083      	sub	sp, #12
9000103a:	af00      	add	r7, sp, #0
9000103c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
9000103e:	f04f 33ff 	mov.w	r3, #4294967295
}
90001042:	4618      	mov	r0, r3
90001044:	370c      	adds	r7, #12
90001046:	46bd      	mov	sp, r7
90001048:	f85d 7b04 	ldr.w	r7, [sp], #4
9000104c:	4770      	bx	lr

9000104e <_fstat>:


int _fstat(int file, struct stat *st)
{
9000104e:	b480      	push	{r7}
90001050:	b083      	sub	sp, #12
90001052:	af00      	add	r7, sp, #0
90001054:	6078      	str	r0, [r7, #4]
90001056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90001058:	683b      	ldr	r3, [r7, #0]
9000105a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
9000105e:	605a      	str	r2, [r3, #4]
  return 0;
90001060:	2300      	movs	r3, #0
}
90001062:	4618      	mov	r0, r3
90001064:	370c      	adds	r7, #12
90001066:	46bd      	mov	sp, r7
90001068:	f85d 7b04 	ldr.w	r7, [sp], #4
9000106c:	4770      	bx	lr

9000106e <_isatty>:

int _isatty(int file)
{
9000106e:	b480      	push	{r7}
90001070:	b083      	sub	sp, #12
90001072:	af00      	add	r7, sp, #0
90001074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
90001076:	2301      	movs	r3, #1
}
90001078:	4618      	mov	r0, r3
9000107a:	370c      	adds	r7, #12
9000107c:	46bd      	mov	sp, r7
9000107e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001082:	4770      	bx	lr

90001084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001084:	b480      	push	{r7}
90001086:	b085      	sub	sp, #20
90001088:	af00      	add	r7, sp, #0
9000108a:	60f8      	str	r0, [r7, #12]
9000108c:	60b9      	str	r1, [r7, #8]
9000108e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90001090:	2300      	movs	r3, #0
}
90001092:	4618      	mov	r0, r3
90001094:	3714      	adds	r7, #20
90001096:	46bd      	mov	sp, r7
90001098:	f85d 7b04 	ldr.w	r7, [sp], #4
9000109c:	4770      	bx	lr
	...

900010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
900010a0:	b580      	push	{r7, lr}
900010a2:	b086      	sub	sp, #24
900010a4:	af00      	add	r7, sp, #0
900010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900010a8:	4a14      	ldr	r2, [pc, #80]	@ (900010fc <_sbrk+0x5c>)
900010aa:	4b15      	ldr	r3, [pc, #84]	@ (90001100 <_sbrk+0x60>)
900010ac:	1ad3      	subs	r3, r2, r3
900010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
900010b0:	697b      	ldr	r3, [r7, #20]
900010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
900010b4:	4b13      	ldr	r3, [pc, #76]	@ (90001104 <_sbrk+0x64>)
900010b6:	681b      	ldr	r3, [r3, #0]
900010b8:	2b00      	cmp	r3, #0
900010ba:	d102      	bne.n	900010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900010bc:	4b11      	ldr	r3, [pc, #68]	@ (90001104 <_sbrk+0x64>)
900010be:	4a12      	ldr	r2, [pc, #72]	@ (90001108 <_sbrk+0x68>)
900010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900010c2:	4b10      	ldr	r3, [pc, #64]	@ (90001104 <_sbrk+0x64>)
900010c4:	681a      	ldr	r2, [r3, #0]
900010c6:	687b      	ldr	r3, [r7, #4]
900010c8:	4413      	add	r3, r2
900010ca:	693a      	ldr	r2, [r7, #16]
900010cc:	429a      	cmp	r2, r3
900010ce:	d207      	bcs.n	900010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
900010d0:	f00b fc02 	bl	9000c8d8 <__errno>
900010d4:	4603      	mov	r3, r0
900010d6:	220c      	movs	r2, #12
900010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900010da:	f04f 33ff 	mov.w	r3, #4294967295
900010de:	e009      	b.n	900010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900010e0:	4b08      	ldr	r3, [pc, #32]	@ (90001104 <_sbrk+0x64>)
900010e2:	681b      	ldr	r3, [r3, #0]
900010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900010e6:	4b07      	ldr	r3, [pc, #28]	@ (90001104 <_sbrk+0x64>)
900010e8:	681a      	ldr	r2, [r3, #0]
900010ea:	687b      	ldr	r3, [r7, #4]
900010ec:	4413      	add	r3, r2
900010ee:	4a05      	ldr	r2, [pc, #20]	@ (90001104 <_sbrk+0x64>)
900010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
900010f2:	68fb      	ldr	r3, [r7, #12]
}
900010f4:	4618      	mov	r0, r3
900010f6:	3718      	adds	r7, #24
900010f8:	46bd      	mov	sp, r7
900010fa:	bd80      	pop	{r7, pc}
900010fc:	20020000 	.word	0x20020000
90001100:	00001000 	.word	0x00001000
90001104:	20000248 	.word	0x20000248
90001108:	200014a0 	.word	0x200014a0

9000110c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
9000110c:	b580      	push	{r7, lr}
9000110e:	b082      	sub	sp, #8
90001110:	af00      	add	r7, sp, #0
90001112:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90001114:	687b      	ldr	r3, [r7, #4]
90001116:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000111a:	4618      	mov	r0, r3
9000111c:	f00a fca4 	bl	9000ba68 <USBH_LL_IncTimer>
}
90001120:	bf00      	nop
90001122:	3708      	adds	r7, #8
90001124:	46bd      	mov	sp, r7
90001126:	bd80      	pop	{r7, pc}

90001128 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90001128:	b580      	push	{r7, lr}
9000112a:	b082      	sub	sp, #8
9000112c:	af00      	add	r7, sp, #0
9000112e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90001130:	687b      	ldr	r3, [r7, #4]
90001132:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001136:	4618      	mov	r0, r3
90001138:	f00a fce0 	bl	9000bafc <USBH_LL_Connect>
}
9000113c:	bf00      	nop
9000113e:	3708      	adds	r7, #8
90001140:	46bd      	mov	sp, r7
90001142:	bd80      	pop	{r7, pc}

90001144 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90001144:	b580      	push	{r7, lr}
90001146:	b082      	sub	sp, #8
90001148:	af00      	add	r7, sp, #0
9000114a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
9000114c:	687b      	ldr	r3, [r7, #4]
9000114e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001152:	4618      	mov	r0, r3
90001154:	f00a fce9 	bl	9000bb2a <USBH_LL_Disconnect>
}
90001158:	bf00      	nop
9000115a:	3708      	adds	r7, #8
9000115c:	46bd      	mov	sp, r7
9000115e:	bd80      	pop	{r7, pc}

90001160 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001160:	b580      	push	{r7, lr}
90001162:	b082      	sub	sp, #8
90001164:	af00      	add	r7, sp, #0
90001166:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90001168:	687b      	ldr	r3, [r7, #4]
9000116a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000116e:	4618      	mov	r0, r3
90001170:	f00a fca4 	bl	9000babc <USBH_LL_PortEnabled>
}
90001174:	bf00      	nop
90001176:	3708      	adds	r7, #8
90001178:	46bd      	mov	sp, r7
9000117a:	bd80      	pop	{r7, pc}

9000117c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
9000117c:	b580      	push	{r7, lr}
9000117e:	b082      	sub	sp, #8
90001180:	af00      	add	r7, sp, #0
90001182:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90001184:	687b      	ldr	r3, [r7, #4]
90001186:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000118a:	4618      	mov	r0, r3
9000118c:	f00a fca4 	bl	9000bad8 <USBH_LL_PortDisabled>
}
90001190:	bf00      	nop
90001192:	3708      	adds	r7, #8
90001194:	46bd      	mov	sp, r7
90001196:	bd80      	pop	{r7, pc}

90001198 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90001198:	b480      	push	{r7}
9000119a:	b083      	sub	sp, #12
9000119c:	af00      	add	r7, sp, #0
9000119e:	6078      	str	r0, [r7, #4]
900011a0:	460b      	mov	r3, r1
900011a2:	70fb      	strb	r3, [r7, #3]
900011a4:	4613      	mov	r3, r2
900011a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
900011a8:	bf00      	nop
900011aa:	370c      	adds	r7, #12
900011ac:	46bd      	mov	sp, r7
900011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900011b2:	4770      	bx	lr

900011b4 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
900011b4:	b580      	push	{r7, lr}
900011b6:	b082      	sub	sp, #8
900011b8:	af00      	add	r7, sp, #0
900011ba:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
900011bc:	687b      	ldr	r3, [r7, #4]
900011be:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
900011c2:	4618      	mov	r0, r3
900011c4:	f003 f82b 	bl	9000421e <HAL_HCD_Stop>
  return USBH_OK;
900011c8:	2300      	movs	r3, #0
}
900011ca:	4618      	mov	r0, r3
900011cc:	3708      	adds	r7, #8
900011ce:	46bd      	mov	sp, r7
900011d0:	bd80      	pop	{r7, pc}
	...

900011d4 <Draw_Menu>:
#include "display.h"

uint32_t x_size, y_size;

void Draw_Menu(void)
{
900011d4:	b580      	push	{r7, lr}
900011d6:	b082      	sub	sp, #8
900011d8:	af00      	add	r7, sp, #0
  UTIL_LCD_SetLayer(0);
900011da:	2000      	movs	r0, #0
900011dc:	f00a fd40 	bl	9000bc60 <UTIL_LCD_SetLayer>

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
900011e0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900011e4:	f00a fdb2 	bl	9000bd4c <UTIL_LCD_Clear>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
900011e8:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
900011ec:	f00a fd56 	bl	9000bc9c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
900011f0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900011f4:	f00a fd66 	bl	9000bcc4 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
900011f8:	480c      	ldr	r0, [pc, #48]	@ (9000122c <Draw_Menu+0x58>)
900011fa:	f00a fd77 	bl	9000bcec <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
900011fe:	2300      	movs	r3, #0
90001200:	607b      	str	r3, [r7, #4]
90001202:	e00a      	b.n	9000121a <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Bumbajs ubumbananej3", LEFT_MODE);
90001204:	687b      	ldr	r3, [r7, #4]
90001206:	015b      	lsls	r3, r3, #5
90001208:	4619      	mov	r1, r3
9000120a:	2303      	movs	r3, #3
9000120c:	4a08      	ldr	r2, [pc, #32]	@ (90001230 <Draw_Menu+0x5c>)
9000120e:	2000      	movs	r0, #0
90001210:	f00a fde8 	bl	9000bde4 <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90001214:	687b      	ldr	r3, [r7, #4]
90001216:	3301      	adds	r3, #1
90001218:	607b      	str	r3, [r7, #4]
9000121a:	687b      	ldr	r3, [r7, #4]
9000121c:	2b07      	cmp	r3, #7
9000121e:	ddf1      	ble.n	90001204 <Draw_Menu+0x30>
  }
}
90001220:	bf00      	nop
90001222:	bf00      	nop
90001224:	3708      	adds	r7, #8
90001226:	46bd      	mov	sp, r7
90001228:	bd80      	pop	{r7, pc}
9000122a:	bf00      	nop
9000122c:	20000070 	.word	0x20000070
90001230:	9000d5f4 	.word	0x9000d5f4

90001234 <InitializeLcd>:

void InitializeLcd(void)
{
90001234:	b580      	push	{r7, lr}
90001236:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
90001238:	2101      	movs	r1, #1
9000123a:	2000      	movs	r0, #0
9000123c:	f000 feec 	bl	90002018 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
90001240:	4809      	ldr	r0, [pc, #36]	@ (90001268 <InitializeLcd+0x34>)
90001242:	f00a fcb7 	bl	9000bbb4 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90001246:	2000      	movs	r0, #0
90001248:	f00a fd0a 	bl	9000bc60 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
9000124c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001250:	f00a fd7c 	bl	9000bd4c <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90001254:	4905      	ldr	r1, [pc, #20]	@ (9000126c <InitializeLcd+0x38>)
90001256:	2000      	movs	r0, #0
90001258:	f001 f898 	bl	9000238c <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
9000125c:	4904      	ldr	r1, [pc, #16]	@ (90001270 <InitializeLcd+0x3c>)
9000125e:	2000      	movs	r0, #0
90001260:	f001 f8b2 	bl	900023c8 <BSP_LCD_GetYSize>
}
90001264:	bf00      	nop
90001266:	bd80      	pop	{r7, pc}
90001268:	9000d7dc 	.word	0x9000d7dc
9000126c:	2000062c 	.word	0x2000062c
90001270:	20000630 	.word	0x20000630

90001274 <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
90001274:	b580      	push	{r7, lr}
90001276:	b082      	sub	sp, #8
90001278:	af00      	add	r7, sp, #0
9000127a:	6078      	str	r0, [r7, #4]
9000127c:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
9000127e:	683a      	ldr	r2, [r7, #0]
90001280:	6879      	ldr	r1, [r7, #4]
90001282:	4803      	ldr	r0, [pc, #12]	@ (90001290 <uartSetCursorPosition+0x1c>)
90001284:	f00b f960 	bl	9000c548 <iprintf>
}
90001288:	bf00      	nop
9000128a:	3708      	adds	r7, #8
9000128c:	46bd      	mov	sp, r7
9000128e:	bd80      	pop	{r7, pc}
90001290:	9000d60c 	.word	0x9000d60c

90001294 <UartClearScreen>:

void UartClearScreen() {
90001294:	b580      	push	{r7, lr}
90001296:	af00      	add	r7, sp, #0
  printf("\033[2J");
90001298:	4803      	ldr	r0, [pc, #12]	@ (900012a8 <UartClearScreen+0x14>)
9000129a:	f00b f955 	bl	9000c548 <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
9000129e:	4803      	ldr	r0, [pc, #12]	@ (900012ac <UartClearScreen+0x18>)
900012a0:	f00b f952 	bl	9000c548 <iprintf>
}
900012a4:	bf00      	nop
900012a6:	bd80      	pop	{r7, pc}
900012a8:	9000d618 	.word	0x9000d618
900012ac:	9000d620 	.word	0x9000d620

900012b0 <UartRenderState>:

void UartRenderState(AppContext *ctx) {
900012b0:	b580      	push	{r7, lr}
900012b2:	b082      	sub	sp, #8
900012b4:	af00      	add	r7, sp, #0
900012b6:	6078      	str	r0, [r7, #4]
  uartSetCursorPosition(1, 1);
900012b8:	2101      	movs	r1, #1
900012ba:	2001      	movs	r0, #1
900012bc:	f7ff ffda 	bl	90001274 <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
900012c0:	687b      	ldr	r3, [r7, #4]
900012c2:	781b      	ldrb	r3, [r3, #0]
900012c4:	2b00      	cmp	r3, #0
900012c6:	d13a      	bne.n	9000133e <UartRenderState+0x8e>
    printf("F1: Voltage control    ");
900012c8:	481f      	ldr	r0, [pc, #124]	@ (90001348 <UartRenderState+0x98>)
900012ca:	f00b f93d 	bl	9000c548 <iprintf>
    uartSetCursorPosition(2, 1);
900012ce:	2101      	movs	r1, #1
900012d0:	2002      	movs	r0, #2
900012d2:	f7ff ffcf 	bl	90001274 <uartSetCursorPosition>
    printf("Current input: %d     ", ctx->inputValue);
900012d6:	687b      	ldr	r3, [r7, #4]
900012d8:	889b      	ldrh	r3, [r3, #4]
900012da:	4619      	mov	r1, r3
900012dc:	481b      	ldr	r0, [pc, #108]	@ (9000134c <UartRenderState+0x9c>)
900012de:	f00b f933 	bl	9000c548 <iprintf>
    uartSetCursorPosition(3, 1);
900012e2:	2101      	movs	r1, #1
900012e4:	2003      	movs	r0, #3
900012e6:	f7ff ffc5 	bl	90001274 <uartSetCursorPosition>
    if (ctx->voltage > 0) {
900012ea:	687b      	ldr	r3, [r7, #4]
900012ec:	885b      	ldrh	r3, [r3, #2]
900012ee:	2b00      	cmp	r3, #0
900012f0:	d006      	beq.n	90001300 <UartRenderState+0x50>
      printf("Voltage: %dV     ", ctx->voltage);
900012f2:	687b      	ldr	r3, [r7, #4]
900012f4:	885b      	ldrh	r3, [r3, #2]
900012f6:	4619      	mov	r1, r3
900012f8:	4815      	ldr	r0, [pc, #84]	@ (90001350 <UartRenderState+0xa0>)
900012fa:	f00b f925 	bl	9000c548 <iprintf>
900012fe:	e002      	b.n	90001306 <UartRenderState+0x56>
    } else {
      printf("Voltage: N/A     ");
90001300:	4814      	ldr	r0, [pc, #80]	@ (90001354 <UartRenderState+0xa4>)
90001302:	f00b f921 	bl	9000c548 <iprintf>
    }
    uartSetCursorPosition(4, 1);
90001306:	2101      	movs	r1, #1
90001308:	2004      	movs	r0, #4
9000130a:	f7ff ffb3 	bl	90001274 <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
9000130e:	687b      	ldr	r3, [r7, #4]
90001310:	79db      	ldrb	r3, [r3, #7]
90001312:	2b00      	cmp	r3, #0
90001314:	d006      	beq.n	90001324 <UartRenderState+0x74>
      printf("PWM is running at %dV   ", ctx->voltage);
90001316:	687b      	ldr	r3, [r7, #4]
90001318:	885b      	ldrh	r3, [r3, #2]
9000131a:	4619      	mov	r1, r3
9000131c:	480e      	ldr	r0, [pc, #56]	@ (90001358 <UartRenderState+0xa8>)
9000131e:	f00b f913 	bl	9000c548 <iprintf>
90001322:	e002      	b.n	9000132a <UartRenderState+0x7a>
    } else {
      printf("PWM is OFF              ");
90001324:	480d      	ldr	r0, [pc, #52]	@ (9000135c <UartRenderState+0xac>)
90001326:	f00b f90f 	bl	9000c548 <iprintf>
    }
    uartSetCursorPosition(5, 1);
9000132a:	2101      	movs	r1, #1
9000132c:	2005      	movs	r0, #5
9000132e:	f7ff ffa1 	bl	90001274 <uartSetCursorPosition>
    printf("%s                                                               \r\n", ctx->message);
90001332:	687b      	ldr	r3, [r7, #4]
90001334:	3308      	adds	r3, #8
90001336:	4619      	mov	r1, r3
90001338:	4809      	ldr	r0, [pc, #36]	@ (90001360 <UartRenderState+0xb0>)
9000133a:	f00b f905 	bl	9000c548 <iprintf>
  }
}
9000133e:	bf00      	nop
90001340:	3708      	adds	r7, #8
90001342:	46bd      	mov	sp, r7
90001344:	bd80      	pop	{r7, pc}
90001346:	bf00      	nop
90001348:	9000d624 	.word	0x9000d624
9000134c:	9000d63c 	.word	0x9000d63c
90001350:	9000d654 	.word	0x9000d654
90001354:	9000d668 	.word	0x9000d668
90001358:	9000d67c 	.word	0x9000d67c
9000135c:	9000d698 	.word	0x9000d698
90001360:	9000d6b4 	.word	0x9000d6b4

90001364 <DisplayRenderState>:

void DisplayRenderState(AppContext *ctx)
{
90001364:	b590      	push	{r4, r7, lr}
90001366:	b08b      	sub	sp, #44	@ 0x2c
90001368:	af00      	add	r7, sp, #0
9000136a:	6078      	str	r0, [r7, #4]
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
9000136c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
90001370:	f00a fcec 	bl	9000bd4c <UTIL_LCD_Clear>

  if (ctx->currentState == STATE_F1) {
90001374:	687b      	ldr	r3, [r7, #4]
90001376:	781b      	ldrb	r3, [r3, #0]
90001378:	2b00      	cmp	r3, #0
9000137a:	d168      	bne.n	9000144e <DisplayRenderState+0xea>
	char buffer[32];  // Make sure it's large enough
    UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"F1: Voltage control    ", LEFT_MODE);
9000137c:	2303      	movs	r3, #3
9000137e:	4a36      	ldr	r2, [pc, #216]	@ (90001458 <DisplayRenderState+0xf4>)
90001380:	2100      	movs	r1, #0
90001382:	2000      	movs	r0, #0
90001384:	f00a fd2e 	bl	9000bde4 <UTIL_LCD_DisplayStringAt>
    sprintf(buffer, "Current input: %d", ctx->inputValue);
90001388:	687b      	ldr	r3, [r7, #4]
9000138a:	889b      	ldrh	r3, [r3, #4]
9000138c:	461a      	mov	r2, r3
9000138e:	f107 0308 	add.w	r3, r7, #8
90001392:	4932      	ldr	r1, [pc, #200]	@ (9000145c <DisplayRenderState+0xf8>)
90001394:	4618      	mov	r0, r3
90001396:	f00b f947 	bl	9000c628 <siprintf>
    UTIL_LCD_DisplayStringAt(0, 32, (uint8_t *)buffer, LEFT_MODE);
9000139a:	f107 0208 	add.w	r2, r7, #8
9000139e:	2303      	movs	r3, #3
900013a0:	2120      	movs	r1, #32
900013a2:	2000      	movs	r0, #0
900013a4:	f00a fd1e 	bl	9000bde4 <UTIL_LCD_DisplayStringAt>

    sprintf(buffer, "Current input: %d", ctx->inputValue);
900013a8:	687b      	ldr	r3, [r7, #4]
900013aa:	889b      	ldrh	r3, [r3, #4]
900013ac:	461a      	mov	r2, r3
900013ae:	f107 0308 	add.w	r3, r7, #8
900013b2:	492a      	ldr	r1, [pc, #168]	@ (9000145c <DisplayRenderState+0xf8>)
900013b4:	4618      	mov	r0, r3
900013b6:	f00b f937 	bl	9000c628 <siprintf>
    UTIL_LCD_DisplayStringAt(0, 32, (uint8_t *)buffer, LEFT_MODE);
900013ba:	f107 0208 	add.w	r2, r7, #8
900013be:	2303      	movs	r3, #3
900013c0:	2120      	movs	r1, #32
900013c2:	2000      	movs	r0, #0
900013c4:	f00a fd0e 	bl	9000bde4 <UTIL_LCD_DisplayStringAt>

    if (ctx->voltage > 0) {
900013c8:	687b      	ldr	r3, [r7, #4]
900013ca:	885b      	ldrh	r3, [r3, #2]
900013cc:	2b00      	cmp	r3, #0
900013ce:	d009      	beq.n	900013e4 <DisplayRenderState+0x80>
      sprintf(buffer, "Voltage: %dV", ctx->voltage);
900013d0:	687b      	ldr	r3, [r7, #4]
900013d2:	885b      	ldrh	r3, [r3, #2]
900013d4:	461a      	mov	r2, r3
900013d6:	f107 0308 	add.w	r3, r7, #8
900013da:	4921      	ldr	r1, [pc, #132]	@ (90001460 <DisplayRenderState+0xfc>)
900013dc:	4618      	mov	r0, r3
900013de:	f00b f923 	bl	9000c628 <siprintf>
900013e2:	e007      	b.n	900013f4 <DisplayRenderState+0x90>
    } else {
      strcpy(buffer, "Voltage: N/A");
900013e4:	f107 0308 	add.w	r3, r7, #8
900013e8:	4a1e      	ldr	r2, [pc, #120]	@ (90001464 <DisplayRenderState+0x100>)
900013ea:	461c      	mov	r4, r3
900013ec:	4613      	mov	r3, r2
900013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
900013f0:	c407      	stmia	r4!, {r0, r1, r2}
900013f2:	7023      	strb	r3, [r4, #0]
    }
    UTIL_LCD_DisplayStringAt(0, 64, (uint8_t *)buffer, LEFT_MODE);
900013f4:	f107 0208 	add.w	r2, r7, #8
900013f8:	2303      	movs	r3, #3
900013fa:	2140      	movs	r1, #64	@ 0x40
900013fc:	2000      	movs	r0, #0
900013fe:	f00a fcf1 	bl	9000bde4 <UTIL_LCD_DisplayStringAt>

    if (ctx->isPwmRunning == true) {
90001402:	687b      	ldr	r3, [r7, #4]
90001404:	79db      	ldrb	r3, [r3, #7]
90001406:	2b00      	cmp	r3, #0
90001408:	d009      	beq.n	9000141e <DisplayRenderState+0xba>
      sprintf(buffer, "PWM is running at %dV", ctx->voltage);
9000140a:	687b      	ldr	r3, [r7, #4]
9000140c:	885b      	ldrh	r3, [r3, #2]
9000140e:	461a      	mov	r2, r3
90001410:	f107 0308 	add.w	r3, r7, #8
90001414:	4914      	ldr	r1, [pc, #80]	@ (90001468 <DisplayRenderState+0x104>)
90001416:	4618      	mov	r0, r3
90001418:	f00b f906 	bl	9000c628 <siprintf>
9000141c:	e008      	b.n	90001430 <DisplayRenderState+0xcc>
    } else {
      strcpy(buffer, "PWM is OFF");
9000141e:	f107 0308 	add.w	r3, r7, #8
90001422:	4a12      	ldr	r2, [pc, #72]	@ (9000146c <DisplayRenderState+0x108>)
90001424:	ca07      	ldmia	r2, {r0, r1, r2}
90001426:	c303      	stmia	r3!, {r0, r1}
90001428:	801a      	strh	r2, [r3, #0]
9000142a:	3302      	adds	r3, #2
9000142c:	0c12      	lsrs	r2, r2, #16
9000142e:	701a      	strb	r2, [r3, #0]
    }
    UTIL_LCD_DisplayStringAt(0, 96, (uint8_t *)buffer, LEFT_MODE);
90001430:	f107 0208 	add.w	r2, r7, #8
90001434:	2303      	movs	r3, #3
90001436:	2160      	movs	r1, #96	@ 0x60
90001438:	2000      	movs	r0, #0
9000143a:	f00a fcd3 	bl	9000bde4 <UTIL_LCD_DisplayStringAt>

    UTIL_LCD_DisplayStringAt(0, 128, (uint8_t *)ctx->message, LEFT_MODE);
9000143e:	687b      	ldr	r3, [r7, #4]
90001440:	f103 0208 	add.w	r2, r3, #8
90001444:	2303      	movs	r3, #3
90001446:	2180      	movs	r1, #128	@ 0x80
90001448:	2000      	movs	r0, #0
9000144a:	f00a fccb 	bl	9000bde4 <UTIL_LCD_DisplayStringAt>

//    uartSetCursorPosition(5, 1);
//    printf("%s                                                               \r\n", ctx->message);
  }
}
9000144e:	bf00      	nop
90001450:	372c      	adds	r7, #44	@ 0x2c
90001452:	46bd      	mov	sp, r7
90001454:	bd90      	pop	{r4, r7, pc}
90001456:	bf00      	nop
90001458:	9000d624 	.word	0x9000d624
9000145c:	9000d6f8 	.word	0x9000d6f8
90001460:	9000d70c 	.word	0x9000d70c
90001464:	9000d71c 	.word	0x9000d71c
90001468:	9000d72c 	.word	0x9000d72c
9000146c:	9000d744 	.word	0x9000d744

90001470 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001470:	b580      	push	{r7, lr}
90001472:	b084      	sub	sp, #16
90001474:	af00      	add	r7, sp, #0
90001476:	6078      	str	r0, [r7, #4]
90001478:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
9000147a:	687b      	ldr	r3, [r7, #4]
9000147c:	2b00      	cmp	r3, #0
9000147e:	d103      	bne.n	90001488 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90001480:	f04f 33ff 	mov.w	r3, #4294967295
90001484:	60fb      	str	r3, [r7, #12]
90001486:	e02c      	b.n	900014e2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90001488:	683b      	ldr	r3, [r7, #0]
9000148a:	681a      	ldr	r2, [r3, #0]
9000148c:	687b      	ldr	r3, [r7, #4]
9000148e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90001490:	683b      	ldr	r3, [r7, #0]
90001492:	685a      	ldr	r2, [r3, #4]
90001494:	687b      	ldr	r3, [r7, #4]
90001496:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90001498:	683b      	ldr	r3, [r7, #0]
9000149a:	891a      	ldrh	r2, [r3, #8]
9000149c:	687b      	ldr	r3, [r7, #4]
9000149e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
900014a0:	683b      	ldr	r3, [r7, #0]
900014a2:	68da      	ldr	r2, [r3, #12]
900014a4:	687b      	ldr	r3, [r7, #4]
900014a6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
900014a8:	683b      	ldr	r3, [r7, #0]
900014aa:	691a      	ldr	r2, [r3, #16]
900014ac:	687b      	ldr	r3, [r7, #4]
900014ae:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
900014b0:	683b      	ldr	r3, [r7, #0]
900014b2:	695a      	ldr	r2, [r3, #20]
900014b4:	687b      	ldr	r3, [r7, #4]
900014b6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
900014b8:	687b      	ldr	r3, [r7, #4]
900014ba:	4a0c      	ldr	r2, [pc, #48]	@ (900014ec <FT5336_RegisterBusIO+0x7c>)
900014bc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900014be:	687b      	ldr	r3, [r7, #4]
900014c0:	4a0b      	ldr	r2, [pc, #44]	@ (900014f0 <FT5336_RegisterBusIO+0x80>)
900014c2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
900014c4:	687b      	ldr	r3, [r7, #4]
900014c6:	687a      	ldr	r2, [r7, #4]
900014c8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900014ca:	687b      	ldr	r3, [r7, #4]
900014cc:	681b      	ldr	r3, [r3, #0]
900014ce:	2b00      	cmp	r3, #0
900014d0:	d004      	beq.n	900014dc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900014d2:	687b      	ldr	r3, [r7, #4]
900014d4:	681b      	ldr	r3, [r3, #0]
900014d6:	4798      	blx	r3
900014d8:	60f8      	str	r0, [r7, #12]
900014da:	e002      	b.n	900014e2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
900014dc:	f04f 33ff 	mov.w	r3, #4294967295
900014e0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
900014e2:	68fb      	ldr	r3, [r7, #12]
}
900014e4:	4618      	mov	r0, r3
900014e6:	3710      	adds	r7, #16
900014e8:	46bd      	mov	sp, r7
900014ea:	bd80      	pop	{r7, pc}
900014ec:	90001515 	.word	0x90001515
900014f0:	90001549 	.word	0x90001549

900014f4 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
900014f4:	b580      	push	{r7, lr}
900014f6:	b082      	sub	sp, #8
900014f8:	af00      	add	r7, sp, #0
900014fa:	6078      	str	r0, [r7, #4]
900014fc:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900014fe:	687b      	ldr	r3, [r7, #4]
90001500:	3318      	adds	r3, #24
90001502:	6839      	ldr	r1, [r7, #0]
90001504:	4618      	mov	r0, r3
90001506:	f000 f850 	bl	900015aa <ft5336_chip_id>
9000150a:	4603      	mov	r3, r0
}
9000150c:	4618      	mov	r0, r3
9000150e:	3708      	adds	r7, #8
90001510:	46bd      	mov	sp, r7
90001512:	bd80      	pop	{r7, pc}

90001514 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001514:	b590      	push	{r4, r7, lr}
90001516:	b087      	sub	sp, #28
90001518:	af00      	add	r7, sp, #0
9000151a:	60f8      	str	r0, [r7, #12]
9000151c:	607a      	str	r2, [r7, #4]
9000151e:	461a      	mov	r2, r3
90001520:	460b      	mov	r3, r1
90001522:	72fb      	strb	r3, [r7, #11]
90001524:	4613      	mov	r3, r2
90001526:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001528:	68fb      	ldr	r3, [r7, #12]
9000152a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
9000152c:	697b      	ldr	r3, [r7, #20]
9000152e:	691c      	ldr	r4, [r3, #16]
90001530:	697b      	ldr	r3, [r7, #20]
90001532:	8918      	ldrh	r0, [r3, #8]
90001534:	7afb      	ldrb	r3, [r7, #11]
90001536:	b299      	uxth	r1, r3
90001538:	893b      	ldrh	r3, [r7, #8]
9000153a:	687a      	ldr	r2, [r7, #4]
9000153c:	47a0      	blx	r4
9000153e:	4603      	mov	r3, r0
}
90001540:	4618      	mov	r0, r3
90001542:	371c      	adds	r7, #28
90001544:	46bd      	mov	sp, r7
90001546:	bd90      	pop	{r4, r7, pc}

90001548 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001548:	b590      	push	{r4, r7, lr}
9000154a:	b087      	sub	sp, #28
9000154c:	af00      	add	r7, sp, #0
9000154e:	60f8      	str	r0, [r7, #12]
90001550:	607a      	str	r2, [r7, #4]
90001552:	461a      	mov	r2, r3
90001554:	460b      	mov	r3, r1
90001556:	72fb      	strb	r3, [r7, #11]
90001558:	4613      	mov	r3, r2
9000155a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
9000155c:	68fb      	ldr	r3, [r7, #12]
9000155e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001560:	697b      	ldr	r3, [r7, #20]
90001562:	68dc      	ldr	r4, [r3, #12]
90001564:	697b      	ldr	r3, [r7, #20]
90001566:	8918      	ldrh	r0, [r3, #8]
90001568:	7afb      	ldrb	r3, [r7, #11]
9000156a:	b299      	uxth	r1, r3
9000156c:	893b      	ldrh	r3, [r7, #8]
9000156e:	687a      	ldr	r2, [r7, #4]
90001570:	47a0      	blx	r4
90001572:	4603      	mov	r3, r0
}
90001574:	4618      	mov	r0, r3
90001576:	371c      	adds	r7, #28
90001578:	46bd      	mov	sp, r7
9000157a:	bd90      	pop	{r4, r7, pc}

9000157c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
9000157c:	b590      	push	{r4, r7, lr}
9000157e:	b085      	sub	sp, #20
90001580:	af00      	add	r7, sp, #0
90001582:	60f8      	str	r0, [r7, #12]
90001584:	607a      	str	r2, [r7, #4]
90001586:	461a      	mov	r2, r3
90001588:	460b      	mov	r3, r1
9000158a:	72fb      	strb	r3, [r7, #11]
9000158c:	4613      	mov	r3, r2
9000158e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90001590:	68fb      	ldr	r3, [r7, #12]
90001592:	685c      	ldr	r4, [r3, #4]
90001594:	68fb      	ldr	r3, [r7, #12]
90001596:	6898      	ldr	r0, [r3, #8]
90001598:	893b      	ldrh	r3, [r7, #8]
9000159a:	7af9      	ldrb	r1, [r7, #11]
9000159c:	687a      	ldr	r2, [r7, #4]
9000159e:	47a0      	blx	r4
900015a0:	4603      	mov	r3, r0
}
900015a2:	4618      	mov	r0, r3
900015a4:	3714      	adds	r7, #20
900015a6:	46bd      	mov	sp, r7
900015a8:	bd90      	pop	{r4, r7, pc}

900015aa <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900015aa:	b580      	push	{r7, lr}
900015ac:	b084      	sub	sp, #16
900015ae:	af00      	add	r7, sp, #0
900015b0:	6078      	str	r0, [r7, #4]
900015b2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900015b4:	2301      	movs	r3, #1
900015b6:	683a      	ldr	r2, [r7, #0]
900015b8:	21a8      	movs	r1, #168	@ 0xa8
900015ba:	6878      	ldr	r0, [r7, #4]
900015bc:	f7ff ffde 	bl	9000157c <ft5336_read_reg>
900015c0:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900015c2:	68fb      	ldr	r3, [r7, #12]
900015c4:	2b00      	cmp	r3, #0
900015c6:	d107      	bne.n	900015d8 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900015c8:	683b      	ldr	r3, [r7, #0]
900015ca:	781a      	ldrb	r2, [r3, #0]
900015cc:	683b      	ldr	r3, [r7, #0]
900015ce:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900015d0:	683b      	ldr	r3, [r7, #0]
900015d2:	781a      	ldrb	r2, [r3, #0]
900015d4:	683b      	ldr	r3, [r7, #0]
900015d6:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900015d8:	68fb      	ldr	r3, [r7, #12]
}
900015da:	4618      	mov	r0, r3
900015dc:	3710      	adds	r7, #16
900015de:	46bd      	mov	sp, r7
900015e0:	bd80      	pop	{r7, pc}

900015e2 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900015e2:	b580      	push	{r7, lr}
900015e4:	b084      	sub	sp, #16
900015e6:	af00      	add	r7, sp, #0
900015e8:	6078      	str	r0, [r7, #4]
900015ea:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
900015ec:	f04f 33ff 	mov.w	r3, #4294967295
900015f0:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900015f2:	683b      	ldr	r3, [r7, #0]
900015f4:	681b      	ldr	r3, [r3, #0]
900015f6:	4619      	mov	r1, r3
900015f8:	6878      	ldr	r0, [r7, #4]
900015fa:	f000 f831 	bl	90001660 <MT48LC4M32B2_ClockEnable>
900015fe:	4603      	mov	r3, r0
90001600:	2b00      	cmp	r3, #0
90001602:	d128      	bne.n	90001656 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
90001604:	2001      	movs	r0, #1
90001606:	f000 f8e1 	bl	900017cc <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000160a:	683b      	ldr	r3, [r7, #0]
9000160c:	681b      	ldr	r3, [r3, #0]
9000160e:	4619      	mov	r1, r3
90001610:	6878      	ldr	r0, [r7, #4]
90001612:	f000 f849 	bl	900016a8 <MT48LC4M32B2_Precharge>
90001616:	4603      	mov	r3, r0
90001618:	2b00      	cmp	r3, #0
9000161a:	d11c      	bne.n	90001656 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
9000161c:	683b      	ldr	r3, [r7, #0]
9000161e:	6819      	ldr	r1, [r3, #0]
90001620:	683b      	ldr	r3, [r7, #0]
90001622:	685b      	ldr	r3, [r3, #4]
90001624:	461a      	mov	r2, r3
90001626:	6878      	ldr	r0, [r7, #4]
90001628:	f000 f896 	bl	90001758 <MT48LC4M32B2_RefreshMode>
9000162c:	4603      	mov	r3, r0
9000162e:	2b00      	cmp	r3, #0
90001630:	d111      	bne.n	90001656 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001632:	6839      	ldr	r1, [r7, #0]
90001634:	6878      	ldr	r0, [r7, #4]
90001636:	f000 f85b 	bl	900016f0 <MT48LC4M32B2_ModeRegConfig>
9000163a:	4603      	mov	r3, r0
9000163c:	2b00      	cmp	r3, #0
9000163e:	d10a      	bne.n	90001656 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001640:	683b      	ldr	r3, [r7, #0]
90001642:	689b      	ldr	r3, [r3, #8]
90001644:	4619      	mov	r1, r3
90001646:	6878      	ldr	r0, [r7, #4]
90001648:	f000 f8ac 	bl	900017a4 <MT48LC4M32B2_RefreshRate>
9000164c:	4603      	mov	r3, r0
9000164e:	2b00      	cmp	r3, #0
90001650:	d101      	bne.n	90001656 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001652:	2300      	movs	r3, #0
90001654:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
90001656:	68fb      	ldr	r3, [r7, #12]
}
90001658:	4618      	mov	r0, r3
9000165a:	3710      	adds	r7, #16
9000165c:	46bd      	mov	sp, r7
9000165e:	bd80      	pop	{r7, pc}

90001660 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001660:	b580      	push	{r7, lr}
90001662:	b082      	sub	sp, #8
90001664:	af00      	add	r7, sp, #0
90001666:	6078      	str	r0, [r7, #4]
90001668:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000166a:	4b0e      	ldr	r3, [pc, #56]	@ (900016a4 <MT48LC4M32B2_ClockEnable+0x44>)
9000166c:	2201      	movs	r2, #1
9000166e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001670:	4a0c      	ldr	r2, [pc, #48]	@ (900016a4 <MT48LC4M32B2_ClockEnable+0x44>)
90001672:	683b      	ldr	r3, [r7, #0]
90001674:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001676:	4b0b      	ldr	r3, [pc, #44]	@ (900016a4 <MT48LC4M32B2_ClockEnable+0x44>)
90001678:	2201      	movs	r2, #1
9000167a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000167c:	4b09      	ldr	r3, [pc, #36]	@ (900016a4 <MT48LC4M32B2_ClockEnable+0x44>)
9000167e:	2200      	movs	r2, #0
90001680:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001686:	4907      	ldr	r1, [pc, #28]	@ (900016a4 <MT48LC4M32B2_ClockEnable+0x44>)
90001688:	6878      	ldr	r0, [r7, #4]
9000168a:	f008 f92d 	bl	900098e8 <HAL_SDRAM_SendCommand>
9000168e:	4603      	mov	r3, r0
90001690:	2b00      	cmp	r3, #0
90001692:	d002      	beq.n	9000169a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001694:	f04f 33ff 	mov.w	r3, #4294967295
90001698:	e000      	b.n	9000169c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000169a:	2300      	movs	r3, #0
  }
}
9000169c:	4618      	mov	r0, r3
9000169e:	3708      	adds	r7, #8
900016a0:	46bd      	mov	sp, r7
900016a2:	bd80      	pop	{r7, pc}
900016a4:	20000634 	.word	0x20000634

900016a8 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900016a8:	b580      	push	{r7, lr}
900016aa:	b082      	sub	sp, #8
900016ac:	af00      	add	r7, sp, #0
900016ae:	6078      	str	r0, [r7, #4]
900016b0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900016b2:	4b0e      	ldr	r3, [pc, #56]	@ (900016ec <MT48LC4M32B2_Precharge+0x44>)
900016b4:	2202      	movs	r2, #2
900016b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900016b8:	4a0c      	ldr	r2, [pc, #48]	@ (900016ec <MT48LC4M32B2_Precharge+0x44>)
900016ba:	683b      	ldr	r3, [r7, #0]
900016bc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900016be:	4b0b      	ldr	r3, [pc, #44]	@ (900016ec <MT48LC4M32B2_Precharge+0x44>)
900016c0:	2201      	movs	r2, #1
900016c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900016c4:	4b09      	ldr	r3, [pc, #36]	@ (900016ec <MT48LC4M32B2_Precharge+0x44>)
900016c6:	2200      	movs	r2, #0
900016c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900016ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900016ce:	4907      	ldr	r1, [pc, #28]	@ (900016ec <MT48LC4M32B2_Precharge+0x44>)
900016d0:	6878      	ldr	r0, [r7, #4]
900016d2:	f008 f909 	bl	900098e8 <HAL_SDRAM_SendCommand>
900016d6:	4603      	mov	r3, r0
900016d8:	2b00      	cmp	r3, #0
900016da:	d002      	beq.n	900016e2 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900016dc:	f04f 33ff 	mov.w	r3, #4294967295
900016e0:	e000      	b.n	900016e4 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900016e2:	2300      	movs	r3, #0
  }
}
900016e4:	4618      	mov	r0, r3
900016e6:	3708      	adds	r7, #8
900016e8:	46bd      	mov	sp, r7
900016ea:	bd80      	pop	{r7, pc}
900016ec:	20000634 	.word	0x20000634

900016f0 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900016f0:	b580      	push	{r7, lr}
900016f2:	b084      	sub	sp, #16
900016f4:	af00      	add	r7, sp, #0
900016f6:	6078      	str	r0, [r7, #4]
900016f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900016fa:	683b      	ldr	r3, [r7, #0]
900016fc:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
900016fe:	683b      	ldr	r3, [r7, #0]
90001700:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001702:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001704:	683b      	ldr	r3, [r7, #0]
90001706:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
90001708:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
9000170a:	683b      	ldr	r3, [r7, #0]
9000170c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
9000170e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001710:	683b      	ldr	r3, [r7, #0]
90001712:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001714:	4313      	orrs	r3, r2
90001716:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90001718:	4b0e      	ldr	r3, [pc, #56]	@ (90001754 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000171a:	2204      	movs	r2, #4
9000171c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
9000171e:	683b      	ldr	r3, [r7, #0]
90001720:	681b      	ldr	r3, [r3, #0]
90001722:	4a0c      	ldr	r2, [pc, #48]	@ (90001754 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001724:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001726:	4b0b      	ldr	r3, [pc, #44]	@ (90001754 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001728:	2201      	movs	r2, #1
9000172a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
9000172c:	4a09      	ldr	r2, [pc, #36]	@ (90001754 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000172e:	68fb      	ldr	r3, [r7, #12]
90001730:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001732:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001736:	4907      	ldr	r1, [pc, #28]	@ (90001754 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001738:	6878      	ldr	r0, [r7, #4]
9000173a:	f008 f8d5 	bl	900098e8 <HAL_SDRAM_SendCommand>
9000173e:	4603      	mov	r3, r0
90001740:	2b00      	cmp	r3, #0
90001742:	d002      	beq.n	9000174a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001744:	f04f 33ff 	mov.w	r3, #4294967295
90001748:	e000      	b.n	9000174c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000174a:	2300      	movs	r3, #0
  }
}
9000174c:	4618      	mov	r0, r3
9000174e:	3710      	adds	r7, #16
90001750:	46bd      	mov	sp, r7
90001752:	bd80      	pop	{r7, pc}
90001754:	20000634 	.word	0x20000634

90001758 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
90001758:	b580      	push	{r7, lr}
9000175a:	b084      	sub	sp, #16
9000175c:	af00      	add	r7, sp, #0
9000175e:	60f8      	str	r0, [r7, #12]
90001760:	60b9      	str	r1, [r7, #8]
90001762:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001764:	4a0e      	ldr	r2, [pc, #56]	@ (900017a0 <MT48LC4M32B2_RefreshMode+0x48>)
90001766:	687b      	ldr	r3, [r7, #4]
90001768:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
9000176a:	4a0d      	ldr	r2, [pc, #52]	@ (900017a0 <MT48LC4M32B2_RefreshMode+0x48>)
9000176c:	68bb      	ldr	r3, [r7, #8]
9000176e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001770:	4b0b      	ldr	r3, [pc, #44]	@ (900017a0 <MT48LC4M32B2_RefreshMode+0x48>)
90001772:	2208      	movs	r2, #8
90001774:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001776:	4b0a      	ldr	r3, [pc, #40]	@ (900017a0 <MT48LC4M32B2_RefreshMode+0x48>)
90001778:	2200      	movs	r2, #0
9000177a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000177c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001780:	4907      	ldr	r1, [pc, #28]	@ (900017a0 <MT48LC4M32B2_RefreshMode+0x48>)
90001782:	68f8      	ldr	r0, [r7, #12]
90001784:	f008 f8b0 	bl	900098e8 <HAL_SDRAM_SendCommand>
90001788:	4603      	mov	r3, r0
9000178a:	2b00      	cmp	r3, #0
9000178c:	d002      	beq.n	90001794 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
9000178e:	f04f 33ff 	mov.w	r3, #4294967295
90001792:	e000      	b.n	90001796 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001794:	2300      	movs	r3, #0
  }
}
90001796:	4618      	mov	r0, r3
90001798:	3710      	adds	r7, #16
9000179a:	46bd      	mov	sp, r7
9000179c:	bd80      	pop	{r7, pc}
9000179e:	bf00      	nop
900017a0:	20000634 	.word	0x20000634

900017a4 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
900017a4:	b580      	push	{r7, lr}
900017a6:	b082      	sub	sp, #8
900017a8:	af00      	add	r7, sp, #0
900017aa:	6078      	str	r0, [r7, #4]
900017ac:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900017ae:	6839      	ldr	r1, [r7, #0]
900017b0:	6878      	ldr	r0, [r7, #4]
900017b2:	f008 f8ce 	bl	90009952 <HAL_SDRAM_ProgramRefreshRate>
900017b6:	4603      	mov	r3, r0
900017b8:	2b00      	cmp	r3, #0
900017ba:	d002      	beq.n	900017c2 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
900017bc:	f04f 33ff 	mov.w	r3, #4294967295
900017c0:	e000      	b.n	900017c4 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
900017c2:	2300      	movs	r3, #0
  }
}
900017c4:	4618      	mov	r0, r3
900017c6:	3708      	adds	r7, #8
900017c8:	46bd      	mov	sp, r7
900017ca:	bd80      	pop	{r7, pc}

900017cc <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
900017cc:	b580      	push	{r7, lr}
900017ce:	b084      	sub	sp, #16
900017d0:	af00      	add	r7, sp, #0
900017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900017d4:	f001 fd88 	bl	900032e8 <HAL_GetTick>
900017d8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900017da:	bf00      	nop
900017dc:	f001 fd84 	bl	900032e8 <HAL_GetTick>
900017e0:	4602      	mov	r2, r0
900017e2:	68fb      	ldr	r3, [r7, #12]
900017e4:	1ad3      	subs	r3, r2, r3
900017e6:	687a      	ldr	r2, [r7, #4]
900017e8:	429a      	cmp	r2, r3
900017ea:	d8f7      	bhi.n	900017dc <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
900017ec:	2300      	movs	r3, #0
}
900017ee:	4618      	mov	r0, r3
900017f0:	3710      	adds	r7, #16
900017f2:	46bd      	mov	sp, r7
900017f4:	bd80      	pop	{r7, pc}
	...

900017f8 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
900017f8:	b580      	push	{r7, lr}
900017fa:	b08a      	sub	sp, #40	@ 0x28
900017fc:	af00      	add	r7, sp, #0
900017fe:	4603      	mov	r3, r0
90001800:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
90001802:	2300      	movs	r3, #0
90001804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
90001806:	79fb      	ldrb	r3, [r7, #7]
90001808:	2b00      	cmp	r3, #0
9000180a:	d10f      	bne.n	9000182c <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
9000180c:	4b26      	ldr	r3, [pc, #152]	@ (900018a8 <BSP_LED_Init+0xb0>)
9000180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001812:	4a25      	ldr	r2, [pc, #148]	@ (900018a8 <BSP_LED_Init+0xb0>)
90001814:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90001818:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000181c:	4b22      	ldr	r3, [pc, #136]	@ (900018a8 <BSP_LED_Init+0xb0>)
9000181e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90001826:	60fb      	str	r3, [r7, #12]
90001828:	68fb      	ldr	r3, [r7, #12]
9000182a:	e015      	b.n	90001858 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
9000182c:	79fb      	ldrb	r3, [r7, #7]
9000182e:	2b01      	cmp	r3, #1
90001830:	d10f      	bne.n	90001852 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
90001832:	4b1d      	ldr	r3, [pc, #116]	@ (900018a8 <BSP_LED_Init+0xb0>)
90001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001838:	4a1b      	ldr	r2, [pc, #108]	@ (900018a8 <BSP_LED_Init+0xb0>)
9000183a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000183e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001842:	4b19      	ldr	r3, [pc, #100]	@ (900018a8 <BSP_LED_Init+0xb0>)
90001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000184c:	60bb      	str	r3, [r7, #8]
9000184e:	68bb      	ldr	r3, [r7, #8]
90001850:	e002      	b.n	90001858 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001852:	f06f 0301 	mvn.w	r3, #1
90001856:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
90001858:	79fb      	ldrb	r3, [r7, #7]
9000185a:	4a14      	ldr	r2, [pc, #80]	@ (900018ac <BSP_LED_Init+0xb4>)
9000185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001860:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
90001862:	2301      	movs	r3, #1
90001864:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
90001866:	2301      	movs	r3, #1
90001868:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000186a:	2303      	movs	r3, #3
9000186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
9000186e:	79fb      	ldrb	r3, [r7, #7]
90001870:	4a0f      	ldr	r2, [pc, #60]	@ (900018b0 <BSP_LED_Init+0xb8>)
90001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001876:	f107 0210 	add.w	r2, r7, #16
9000187a:	4611      	mov	r1, r2
9000187c:	4618      	mov	r0, r3
9000187e:	f002 f9dd 	bl	90003c3c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
90001882:	79fb      	ldrb	r3, [r7, #7]
90001884:	4a0a      	ldr	r2, [pc, #40]	@ (900018b0 <BSP_LED_Init+0xb8>)
90001886:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9000188a:	79fb      	ldrb	r3, [r7, #7]
9000188c:	4a07      	ldr	r2, [pc, #28]	@ (900018ac <BSP_LED_Init+0xb4>)
9000188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001892:	b29b      	uxth	r3, r3
90001894:	2201      	movs	r2, #1
90001896:	4619      	mov	r1, r3
90001898:	f002 fb98 	bl	90003fcc <HAL_GPIO_WritePin>
  return ret;
9000189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
9000189e:	4618      	mov	r0, r3
900018a0:	3728      	adds	r7, #40	@ 0x28
900018a2:	46bd      	mov	sp, r7
900018a4:	bd80      	pop	{r7, pc}
900018a6:	bf00      	nop
900018a8:	58024400 	.word	0x58024400
900018ac:	9000d750 	.word	0x9000d750
900018b0:	20000000 	.word	0x20000000

900018b4 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
900018b4:	b580      	push	{r7, lr}
900018b6:	b082      	sub	sp, #8
900018b8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
900018ba:	2300      	movs	r3, #0
900018bc:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
900018be:	4b16      	ldr	r3, [pc, #88]	@ (90001918 <BSP_I2C4_Init+0x64>)
900018c0:	4a16      	ldr	r2, [pc, #88]	@ (9000191c <BSP_I2C4_Init+0x68>)
900018c2:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
900018c4:	4b16      	ldr	r3, [pc, #88]	@ (90001920 <BSP_I2C4_Init+0x6c>)
900018c6:	681b      	ldr	r3, [r3, #0]
900018c8:	2b00      	cmp	r3, #0
900018ca:	d11f      	bne.n	9000190c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
900018cc:	4b14      	ldr	r3, [pc, #80]	@ (90001920 <BSP_I2C4_Init+0x6c>)
900018ce:	681b      	ldr	r3, [r3, #0]
900018d0:	3301      	adds	r3, #1
900018d2:	4a13      	ldr	r2, [pc, #76]	@ (90001920 <BSP_I2C4_Init+0x6c>)
900018d4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
900018d6:	4810      	ldr	r0, [pc, #64]	@ (90001918 <BSP_I2C4_Init+0x64>)
900018d8:	f004 faf8 	bl	90005ecc <HAL_I2C_GetState>
900018dc:	4603      	mov	r3, r0
900018de:	2b00      	cmp	r3, #0
900018e0:	d114      	bne.n	9000190c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
900018e2:	480d      	ldr	r0, [pc, #52]	@ (90001918 <BSP_I2C4_Init+0x64>)
900018e4:	f000 fb06 	bl	90001ef4 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900018e8:	f006 f976 	bl	90007bd8 <HAL_RCC_GetPCLK2Freq>
900018ec:	4603      	mov	r3, r0
900018ee:	490d      	ldr	r1, [pc, #52]	@ (90001924 <BSP_I2C4_Init+0x70>)
900018f0:	4618      	mov	r0, r3
900018f2:	f000 f889 	bl	90001a08 <I2C_GetTiming>
900018f6:	4603      	mov	r3, r0
900018f8:	4619      	mov	r1, r3
900018fa:	4807      	ldr	r0, [pc, #28]	@ (90001918 <BSP_I2C4_Init+0x64>)
900018fc:	f000 f814 	bl	90001928 <MX_I2C4_Init>
90001900:	4603      	mov	r3, r0
90001902:	2b00      	cmp	r3, #0
90001904:	d002      	beq.n	9000190c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
90001906:	f06f 0307 	mvn.w	r3, #7
9000190a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
9000190c:	687b      	ldr	r3, [r7, #4]
}
9000190e:	4618      	mov	r0, r3
90001910:	3708      	adds	r7, #8
90001912:	46bd      	mov	sp, r7
90001914:	bd80      	pop	{r7, pc}
90001916:	bf00      	nop
90001918:	2000104c 	.word	0x2000104c
9000191c:	58001c00 	.word	0x58001c00
90001920:	20000644 	.word	0x20000644
90001924:	000186a0 	.word	0x000186a0

90001928 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
90001928:	b580      	push	{r7, lr}
9000192a:	b084      	sub	sp, #16
9000192c:	af00      	add	r7, sp, #0
9000192e:	6078      	str	r0, [r7, #4]
90001930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001932:	2300      	movs	r3, #0
90001934:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
90001936:	687b      	ldr	r3, [r7, #4]
90001938:	683a      	ldr	r2, [r7, #0]
9000193a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
9000193c:	687b      	ldr	r3, [r7, #4]
9000193e:	2200      	movs	r2, #0
90001940:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001942:	687b      	ldr	r3, [r7, #4]
90001944:	2201      	movs	r2, #1
90001946:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001948:	687b      	ldr	r3, [r7, #4]
9000194a:	2200      	movs	r2, #0
9000194c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
9000194e:	687b      	ldr	r3, [r7, #4]
90001950:	2200      	movs	r2, #0
90001952:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001954:	687b      	ldr	r3, [r7, #4]
90001956:	2200      	movs	r2, #0
90001958:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
9000195a:	687b      	ldr	r3, [r7, #4]
9000195c:	2200      	movs	r2, #0
9000195e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001960:	687b      	ldr	r3, [r7, #4]
90001962:	2200      	movs	r2, #0
90001964:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
90001966:	6878      	ldr	r0, [r7, #4]
90001968:	f004 f8f0 	bl	90005b4c <HAL_I2C_Init>
9000196c:	4603      	mov	r3, r0
9000196e:	2b00      	cmp	r3, #0
90001970:	d002      	beq.n	90001978 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001972:	2301      	movs	r3, #1
90001974:	73fb      	strb	r3, [r7, #15]
90001976:	e014      	b.n	900019a2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
90001978:	2300      	movs	r3, #0
9000197a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
9000197c:	68b9      	ldr	r1, [r7, #8]
9000197e:	6878      	ldr	r0, [r7, #4]
90001980:	f004 fd2c 	bl	900063dc <HAL_I2CEx_ConfigAnalogFilter>
90001984:	4603      	mov	r3, r0
90001986:	2b00      	cmp	r3, #0
90001988:	d002      	beq.n	90001990 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
9000198a:	2301      	movs	r3, #1
9000198c:	73fb      	strb	r3, [r7, #15]
9000198e:	e008      	b.n	900019a2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001990:	2100      	movs	r1, #0
90001992:	6878      	ldr	r0, [r7, #4]
90001994:	f004 fd6d 	bl	90006472 <HAL_I2CEx_ConfigDigitalFilter>
90001998:	4603      	mov	r3, r0
9000199a:	2b00      	cmp	r3, #0
9000199c:	d001      	beq.n	900019a2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
9000199e:	2301      	movs	r3, #1
900019a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
900019a2:	7bfb      	ldrb	r3, [r7, #15]
}
900019a4:	4618      	mov	r0, r3
900019a6:	3710      	adds	r7, #16
900019a8:	46bd      	mov	sp, r7
900019aa:	bd80      	pop	{r7, pc}

900019ac <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
900019ac:	b580      	push	{r7, lr}
900019ae:	b088      	sub	sp, #32
900019b0:	af02      	add	r7, sp, #8
900019b2:	60ba      	str	r2, [r7, #8]
900019b4:	461a      	mov	r2, r3
900019b6:	4603      	mov	r3, r0
900019b8:	81fb      	strh	r3, [r7, #14]
900019ba:	460b      	mov	r3, r1
900019bc:	81bb      	strh	r3, [r7, #12]
900019be:	4613      	mov	r3, r2
900019c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
900019c2:	89b9      	ldrh	r1, [r7, #12]
900019c4:	89f8      	ldrh	r0, [r7, #14]
900019c6:	88fb      	ldrh	r3, [r7, #6]
900019c8:	9300      	str	r3, [sp, #0]
900019ca:	68bb      	ldr	r3, [r7, #8]
900019cc:	2201      	movs	r2, #1
900019ce:	f000 fafd 	bl	90001fcc <I2C4_ReadReg>
900019d2:	4603      	mov	r3, r0
900019d4:	2b00      	cmp	r3, #0
900019d6:	d102      	bne.n	900019de <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
900019d8:	2300      	movs	r3, #0
900019da:	617b      	str	r3, [r7, #20]
900019dc:	e00c      	b.n	900019f8 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900019de:	4809      	ldr	r0, [pc, #36]	@ (90001a04 <BSP_I2C4_ReadReg+0x58>)
900019e0:	f004 fa82 	bl	90005ee8 <HAL_I2C_GetError>
900019e4:	4603      	mov	r3, r0
900019e6:	2b04      	cmp	r3, #4
900019e8:	d103      	bne.n	900019f2 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900019ea:	f06f 0365 	mvn.w	r3, #101	@ 0x65
900019ee:	617b      	str	r3, [r7, #20]
900019f0:	e002      	b.n	900019f8 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
900019f2:	f06f 0303 	mvn.w	r3, #3
900019f6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
900019f8:	697b      	ldr	r3, [r7, #20]
}
900019fa:	4618      	mov	r0, r3
900019fc:	3718      	adds	r7, #24
900019fe:	46bd      	mov	sp, r7
90001a00:	bd80      	pop	{r7, pc}
90001a02:	bf00      	nop
90001a04:	2000104c 	.word	0x2000104c

90001a08 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001a08:	b580      	push	{r7, lr}
90001a0a:	b086      	sub	sp, #24
90001a0c:	af00      	add	r7, sp, #0
90001a0e:	6078      	str	r0, [r7, #4]
90001a10:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001a12:	2300      	movs	r3, #0
90001a14:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001a16:	687b      	ldr	r3, [r7, #4]
90001a18:	2b00      	cmp	r3, #0
90001a1a:	d06b      	beq.n	90001af4 <I2C_GetTiming+0xec>
90001a1c:	683b      	ldr	r3, [r7, #0]
90001a1e:	2b00      	cmp	r3, #0
90001a20:	d068      	beq.n	90001af4 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001a22:	2300      	movs	r3, #0
90001a24:	613b      	str	r3, [r7, #16]
90001a26:	e060      	b.n	90001aea <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001a28:	4a35      	ldr	r2, [pc, #212]	@ (90001b00 <I2C_GetTiming+0xf8>)
90001a2a:	693b      	ldr	r3, [r7, #16]
90001a2c:	212c      	movs	r1, #44	@ 0x2c
90001a2e:	fb01 f303 	mul.w	r3, r1, r3
90001a32:	4413      	add	r3, r2
90001a34:	3304      	adds	r3, #4
90001a36:	681b      	ldr	r3, [r3, #0]
90001a38:	683a      	ldr	r2, [r7, #0]
90001a3a:	429a      	cmp	r2, r3
90001a3c:	d352      	bcc.n	90001ae4 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001a3e:	4a30      	ldr	r2, [pc, #192]	@ (90001b00 <I2C_GetTiming+0xf8>)
90001a40:	693b      	ldr	r3, [r7, #16]
90001a42:	212c      	movs	r1, #44	@ 0x2c
90001a44:	fb01 f303 	mul.w	r3, r1, r3
90001a48:	4413      	add	r3, r2
90001a4a:	3308      	adds	r3, #8
90001a4c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001a4e:	683a      	ldr	r2, [r7, #0]
90001a50:	429a      	cmp	r2, r3
90001a52:	d847      	bhi.n	90001ae4 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001a54:	6939      	ldr	r1, [r7, #16]
90001a56:	6878      	ldr	r0, [r7, #4]
90001a58:	f000 f856 	bl	90001b08 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001a5c:	6939      	ldr	r1, [r7, #16]
90001a5e:	6878      	ldr	r0, [r7, #4]
90001a60:	f000 f940 	bl	90001ce4 <I2C_Compute_SCLL_SCLH>
90001a64:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
90001a66:	68fb      	ldr	r3, [r7, #12]
90001a68:	2b7f      	cmp	r3, #127	@ 0x7f
90001a6a:	d842      	bhi.n	90001af2 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001a6c:	4925      	ldr	r1, [pc, #148]	@ (90001b04 <I2C_GetTiming+0xfc>)
90001a6e:	68fa      	ldr	r2, [r7, #12]
90001a70:	4613      	mov	r3, r2
90001a72:	009b      	lsls	r3, r3, #2
90001a74:	4413      	add	r3, r2
90001a76:	009b      	lsls	r3, r3, #2
90001a78:	440b      	add	r3, r1
90001a7a:	681b      	ldr	r3, [r3, #0]
90001a7c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001a7e:	4821      	ldr	r0, [pc, #132]	@ (90001b04 <I2C_GetTiming+0xfc>)
90001a80:	68fa      	ldr	r2, [r7, #12]
90001a82:	4613      	mov	r3, r2
90001a84:	009b      	lsls	r3, r3, #2
90001a86:	4413      	add	r3, r2
90001a88:	009b      	lsls	r3, r3, #2
90001a8a:	4403      	add	r3, r0
90001a8c:	3304      	adds	r3, #4
90001a8e:	681b      	ldr	r3, [r3, #0]
90001a90:	051b      	lsls	r3, r3, #20
90001a92:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001a96:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001a98:	481a      	ldr	r0, [pc, #104]	@ (90001b04 <I2C_GetTiming+0xfc>)
90001a9a:	68fa      	ldr	r2, [r7, #12]
90001a9c:	4613      	mov	r3, r2
90001a9e:	009b      	lsls	r3, r3, #2
90001aa0:	4413      	add	r3, r2
90001aa2:	009b      	lsls	r3, r3, #2
90001aa4:	4403      	add	r3, r0
90001aa6:	3308      	adds	r3, #8
90001aa8:	681b      	ldr	r3, [r3, #0]
90001aaa:	041b      	lsls	r3, r3, #16
90001aac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001ab0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001ab2:	4814      	ldr	r0, [pc, #80]	@ (90001b04 <I2C_GetTiming+0xfc>)
90001ab4:	68fa      	ldr	r2, [r7, #12]
90001ab6:	4613      	mov	r3, r2
90001ab8:	009b      	lsls	r3, r3, #2
90001aba:	4413      	add	r3, r2
90001abc:	009b      	lsls	r3, r3, #2
90001abe:	4403      	add	r3, r0
90001ac0:	330c      	adds	r3, #12
90001ac2:	681b      	ldr	r3, [r3, #0]
90001ac4:	021b      	lsls	r3, r3, #8
90001ac6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001ac8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90001aca:	480e      	ldr	r0, [pc, #56]	@ (90001b04 <I2C_GetTiming+0xfc>)
90001acc:	68fa      	ldr	r2, [r7, #12]
90001ace:	4613      	mov	r3, r2
90001ad0:	009b      	lsls	r3, r3, #2
90001ad2:	4413      	add	r3, r2
90001ad4:	009b      	lsls	r3, r3, #2
90001ad6:	4403      	add	r3, r0
90001ad8:	3310      	adds	r3, #16
90001ada:	681b      	ldr	r3, [r3, #0]
90001adc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001ade:	430b      	orrs	r3, r1
90001ae0:	617b      	str	r3, [r7, #20]
        }
        break;
90001ae2:	e006      	b.n	90001af2 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001ae4:	693b      	ldr	r3, [r7, #16]
90001ae6:	3301      	adds	r3, #1
90001ae8:	613b      	str	r3, [r7, #16]
90001aea:	693b      	ldr	r3, [r7, #16]
90001aec:	2b02      	cmp	r3, #2
90001aee:	d99b      	bls.n	90001a28 <I2C_GetTiming+0x20>
90001af0:	e000      	b.n	90001af4 <I2C_GetTiming+0xec>
        break;
90001af2:	bf00      	nop
      }
    }
  }

  return ret;
90001af4:	697b      	ldr	r3, [r7, #20]
}
90001af6:	4618      	mov	r0, r3
90001af8:	3718      	adds	r7, #24
90001afa:	46bd      	mov	sp, r7
90001afc:	bd80      	pop	{r7, pc}
90001afe:	bf00      	nop
90001b00:	9000d758 	.word	0x9000d758
90001b04:	20000648 	.word	0x20000648

90001b08 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001b08:	b480      	push	{r7}
90001b0a:	b08f      	sub	sp, #60	@ 0x3c
90001b0c:	af00      	add	r7, sp, #0
90001b0e:	6078      	str	r0, [r7, #4]
90001b10:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001b12:	2310      	movs	r3, #16
90001b14:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001b16:	687b      	ldr	r3, [r7, #4]
90001b18:	085a      	lsrs	r2, r3, #1
90001b1a:	4b6e      	ldr	r3, [pc, #440]	@ (90001cd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001b1c:	4413      	add	r3, r2
90001b1e:	687a      	ldr	r2, [r7, #4]
90001b20:	fbb3 f3f2 	udiv	r3, r3, r2
90001b24:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001b26:	2332      	movs	r3, #50	@ 0x32
90001b28:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001b2a:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001b2e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001b30:	4a69      	ldr	r2, [pc, #420]	@ (90001cd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b32:	683b      	ldr	r3, [r7, #0]
90001b34:	212c      	movs	r1, #44	@ 0x2c
90001b36:	fb01 f303 	mul.w	r3, r1, r3
90001b3a:	4413      	add	r3, r2
90001b3c:	3324      	adds	r3, #36	@ 0x24
90001b3e:	681b      	ldr	r3, [r3, #0]
90001b40:	4618      	mov	r0, r3
90001b42:	4a65      	ldr	r2, [pc, #404]	@ (90001cd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b44:	683b      	ldr	r3, [r7, #0]
90001b46:	212c      	movs	r1, #44	@ 0x2c
90001b48:	fb01 f303 	mul.w	r3, r1, r3
90001b4c:	4413      	add	r3, r2
90001b4e:	330c      	adds	r3, #12
90001b50:	681b      	ldr	r3, [r3, #0]
90001b52:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001b54:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001b56:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001b58:	495f      	ldr	r1, [pc, #380]	@ (90001cd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b5a:	683b      	ldr	r3, [r7, #0]
90001b5c:	202c      	movs	r0, #44	@ 0x2c
90001b5e:	fb00 f303 	mul.w	r3, r0, r3
90001b62:	440b      	add	r3, r1
90001b64:	3328      	adds	r3, #40	@ 0x28
90001b66:	681b      	ldr	r3, [r3, #0]
90001b68:	3303      	adds	r3, #3
90001b6a:	69f9      	ldr	r1, [r7, #28]
90001b6c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001b70:	1ad3      	subs	r3, r2, r3
90001b72:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001b74:	4a58      	ldr	r2, [pc, #352]	@ (90001cd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b76:	683b      	ldr	r3, [r7, #0]
90001b78:	212c      	movs	r1, #44	@ 0x2c
90001b7a:	fb01 f303 	mul.w	r3, r1, r3
90001b7e:	4413      	add	r3, r2
90001b80:	3310      	adds	r3, #16
90001b82:	681b      	ldr	r3, [r3, #0]
90001b84:	4618      	mov	r0, r3
90001b86:	4a54      	ldr	r2, [pc, #336]	@ (90001cd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b88:	683b      	ldr	r3, [r7, #0]
90001b8a:	212c      	movs	r1, #44	@ 0x2c
90001b8c:	fb01 f303 	mul.w	r3, r1, r3
90001b90:	4413      	add	r3, r2
90001b92:	3320      	adds	r3, #32
90001b94:	681b      	ldr	r3, [r3, #0]
90001b96:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001b98:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001b9a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001b9c:	494e      	ldr	r1, [pc, #312]	@ (90001cd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001b9e:	683b      	ldr	r3, [r7, #0]
90001ba0:	202c      	movs	r0, #44	@ 0x2c
90001ba2:	fb00 f303 	mul.w	r3, r0, r3
90001ba6:	440b      	add	r3, r1
90001ba8:	3328      	adds	r3, #40	@ 0x28
90001baa:	681b      	ldr	r3, [r3, #0]
90001bac:	3304      	adds	r3, #4
90001bae:	69f9      	ldr	r1, [r7, #28]
90001bb0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001bb4:	1ad3      	subs	r3, r2, r3
90001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001bb8:	4a47      	ldr	r2, [pc, #284]	@ (90001cd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001bba:	683b      	ldr	r3, [r7, #0]
90001bbc:	212c      	movs	r1, #44	@ 0x2c
90001bbe:	fb01 f303 	mul.w	r3, r1, r3
90001bc2:	4413      	add	r3, r2
90001bc4:	3320      	adds	r3, #32
90001bc6:	681b      	ldr	r3, [r3, #0]
90001bc8:	4618      	mov	r0, r3
90001bca:	4a43      	ldr	r2, [pc, #268]	@ (90001cd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001bcc:	683b      	ldr	r3, [r7, #0]
90001bce:	212c      	movs	r1, #44	@ 0x2c
90001bd0:	fb01 f303 	mul.w	r3, r1, r3
90001bd4:	4413      	add	r3, r2
90001bd6:	3314      	adds	r3, #20
90001bd8:	681b      	ldr	r3, [r3, #0]
90001bda:	4403      	add	r3, r0
90001bdc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001be0:	2b00      	cmp	r3, #0
90001be2:	dc01      	bgt.n	90001be8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001be4:	2300      	movs	r3, #0
90001be6:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001bea:	2b00      	cmp	r3, #0
90001bec:	dc01      	bgt.n	90001bf2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001bee:	2300      	movs	r3, #0
90001bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001bf2:	2300      	movs	r3, #0
90001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
90001bf6:	e062      	b.n	90001cbe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001bf8:	2300      	movs	r3, #0
90001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
90001bfc:	e059      	b.n	90001cb2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001c00:	3301      	adds	r3, #1
90001c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001c04:	3201      	adds	r2, #1
90001c06:	fb03 f202 	mul.w	r2, r3, r2
90001c0a:	69fb      	ldr	r3, [r7, #28]
90001c0c:	fb02 f303 	mul.w	r3, r2, r3
90001c10:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001c12:	693b      	ldr	r3, [r7, #16]
90001c14:	68fa      	ldr	r2, [r7, #12]
90001c16:	429a      	cmp	r2, r3
90001c18:	d348      	bcc.n	90001cac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001c1a:	2300      	movs	r3, #0
90001c1c:	623b      	str	r3, [r7, #32]
90001c1e:	e042      	b.n	90001ca6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c22:	3301      	adds	r3, #1
90001c24:	6a3a      	ldr	r2, [r7, #32]
90001c26:	fb03 f202 	mul.w	r2, r3, r2
90001c2a:	69fb      	ldr	r3, [r7, #28]
90001c2c:	fb02 f303 	mul.w	r3, r2, r3
90001c30:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001c34:	68ba      	ldr	r2, [r7, #8]
90001c36:	429a      	cmp	r2, r3
90001c38:	d332      	bcc.n	90001ca0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001c3c:	68ba      	ldr	r2, [r7, #8]
90001c3e:	429a      	cmp	r2, r3
90001c40:	d82e      	bhi.n	90001ca0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001c46:	429a      	cmp	r2, r3
90001c48:	d02a      	beq.n	90001ca0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001c4a:	4b24      	ldr	r3, [pc, #144]	@ (90001cdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c4c:	681a      	ldr	r2, [r3, #0]
90001c4e:	4924      	ldr	r1, [pc, #144]	@ (90001ce0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001c50:	4613      	mov	r3, r2
90001c52:	009b      	lsls	r3, r3, #2
90001c54:	4413      	add	r3, r2
90001c56:	009b      	lsls	r3, r3, #2
90001c58:	440b      	add	r3, r1
90001c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001c5c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (90001cdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c60:	681a      	ldr	r2, [r3, #0]
90001c62:	491f      	ldr	r1, [pc, #124]	@ (90001ce0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001c64:	4613      	mov	r3, r2
90001c66:	009b      	lsls	r3, r3, #2
90001c68:	4413      	add	r3, r2
90001c6a:	009b      	lsls	r3, r3, #2
90001c6c:	440b      	add	r3, r1
90001c6e:	3304      	adds	r3, #4
90001c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001c72:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001c74:	4b19      	ldr	r3, [pc, #100]	@ (90001cdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c76:	681a      	ldr	r2, [r3, #0]
90001c78:	4919      	ldr	r1, [pc, #100]	@ (90001ce0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001c7a:	4613      	mov	r3, r2
90001c7c:	009b      	lsls	r3, r3, #2
90001c7e:	4413      	add	r3, r2
90001c80:	009b      	lsls	r3, r3, #2
90001c82:	440b      	add	r3, r1
90001c84:	3308      	adds	r3, #8
90001c86:	6a3a      	ldr	r2, [r7, #32]
90001c88:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c8c:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001c8e:	4b13      	ldr	r3, [pc, #76]	@ (90001cdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c90:	681b      	ldr	r3, [r3, #0]
90001c92:	3301      	adds	r3, #1
90001c94:	4a11      	ldr	r2, [pc, #68]	@ (90001cdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c96:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001c98:	4b10      	ldr	r3, [pc, #64]	@ (90001cdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001c9a:	681b      	ldr	r3, [r3, #0]
90001c9c:	2b7f      	cmp	r3, #127	@ 0x7f
90001c9e:	d812      	bhi.n	90001cc6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001ca0:	6a3b      	ldr	r3, [r7, #32]
90001ca2:	3301      	adds	r3, #1
90001ca4:	623b      	str	r3, [r7, #32]
90001ca6:	6a3b      	ldr	r3, [r7, #32]
90001ca8:	2b0f      	cmp	r3, #15
90001caa:	d9b9      	bls.n	90001c20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001cae:	3301      	adds	r3, #1
90001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
90001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001cb4:	2b0f      	cmp	r3, #15
90001cb6:	d9a2      	bls.n	90001bfe <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001cba:	3301      	adds	r3, #1
90001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
90001cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001cc0:	2b0f      	cmp	r3, #15
90001cc2:	d999      	bls.n	90001bf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001cc4:	e000      	b.n	90001cc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001cc6:	bf00      	nop
          }
        }
      }
    }
  }
}
90001cc8:	373c      	adds	r7, #60	@ 0x3c
90001cca:	46bd      	mov	sp, r7
90001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
90001cd0:	4770      	bx	lr
90001cd2:	bf00      	nop
90001cd4:	3b9aca00 	.word	0x3b9aca00
90001cd8:	9000d758 	.word	0x9000d758
90001cdc:	20001048 	.word	0x20001048
90001ce0:	20000648 	.word	0x20000648

90001ce4 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001ce4:	b480      	push	{r7}
90001ce6:	b093      	sub	sp, #76	@ 0x4c
90001ce8:	af00      	add	r7, sp, #0
90001cea:	6078      	str	r0, [r7, #4]
90001cec:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001cee:	f04f 33ff 	mov.w	r3, #4294967295
90001cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001cf4:	687b      	ldr	r3, [r7, #4]
90001cf6:	085a      	lsrs	r2, r3, #1
90001cf8:	4b7a      	ldr	r3, [pc, #488]	@ (90001ee4 <I2C_Compute_SCLL_SCLH+0x200>)
90001cfa:	4413      	add	r3, r2
90001cfc:	687a      	ldr	r2, [r7, #4]
90001cfe:	fbb3 f3f2 	udiv	r3, r3, r2
90001d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001d04:	4a78      	ldr	r2, [pc, #480]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001d06:	683b      	ldr	r3, [r7, #0]
90001d08:	212c      	movs	r1, #44	@ 0x2c
90001d0a:	fb01 f303 	mul.w	r3, r1, r3
90001d0e:	4413      	add	r3, r2
90001d10:	681b      	ldr	r3, [r3, #0]
90001d12:	085a      	lsrs	r2, r3, #1
90001d14:	4b73      	ldr	r3, [pc, #460]	@ (90001ee4 <I2C_Compute_SCLL_SCLH+0x200>)
90001d16:	4413      	add	r3, r2
90001d18:	4973      	ldr	r1, [pc, #460]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001d1a:	683a      	ldr	r2, [r7, #0]
90001d1c:	202c      	movs	r0, #44	@ 0x2c
90001d1e:	fb00 f202 	mul.w	r2, r0, r2
90001d22:	440a      	add	r2, r1
90001d24:	6812      	ldr	r2, [r2, #0]
90001d26:	fbb3 f3f2 	udiv	r3, r3, r2
90001d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001d2c:	2332      	movs	r3, #50	@ 0x32
90001d2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001d30:	4a6d      	ldr	r2, [pc, #436]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001d32:	683b      	ldr	r3, [r7, #0]
90001d34:	212c      	movs	r1, #44	@ 0x2c
90001d36:	fb01 f303 	mul.w	r3, r1, r3
90001d3a:	4413      	add	r3, r2
90001d3c:	3328      	adds	r3, #40	@ 0x28
90001d3e:	681a      	ldr	r2, [r3, #0]
90001d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d42:	fb02 f303 	mul.w	r3, r2, r3
90001d46:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001d48:	4a67      	ldr	r2, [pc, #412]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001d4a:	683b      	ldr	r3, [r7, #0]
90001d4c:	212c      	movs	r1, #44	@ 0x2c
90001d4e:	fb01 f303 	mul.w	r3, r1, r3
90001d52:	4413      	add	r3, r2
90001d54:	3304      	adds	r3, #4
90001d56:	681b      	ldr	r3, [r3, #0]
90001d58:	4a62      	ldr	r2, [pc, #392]	@ (90001ee4 <I2C_Compute_SCLL_SCLH+0x200>)
90001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
90001d5e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001d60:	4a61      	ldr	r2, [pc, #388]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001d62:	683b      	ldr	r3, [r7, #0]
90001d64:	212c      	movs	r1, #44	@ 0x2c
90001d66:	fb01 f303 	mul.w	r3, r1, r3
90001d6a:	4413      	add	r3, r2
90001d6c:	3308      	adds	r3, #8
90001d6e:	681b      	ldr	r3, [r3, #0]
90001d70:	4a5c      	ldr	r2, [pc, #368]	@ (90001ee4 <I2C_Compute_SCLL_SCLH+0x200>)
90001d72:	fbb2 f3f3 	udiv	r3, r2, r3
90001d76:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001d7a:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001d7c:	2300      	movs	r3, #0
90001d7e:	637b      	str	r3, [r7, #52]	@ 0x34
90001d80:	e0a3      	b.n	90001eca <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001d82:	495a      	ldr	r1, [pc, #360]	@ (90001eec <I2C_Compute_SCLL_SCLH+0x208>)
90001d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001d86:	4613      	mov	r3, r2
90001d88:	009b      	lsls	r3, r3, #2
90001d8a:	4413      	add	r3, r2
90001d8c:	009b      	lsls	r3, r3, #2
90001d8e:	440b      	add	r3, r1
90001d90:	681b      	ldr	r3, [r3, #0]
90001d92:	1c5a      	adds	r2, r3, #1
90001d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001d96:	fb02 f303 	mul.w	r3, r2, r3
90001d9a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001d9c:	2300      	movs	r3, #0
90001d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001da0:	e08c      	b.n	90001ebc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001da4:	6a3b      	ldr	r3, [r7, #32]
90001da6:	441a      	add	r2, r3
90001da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001daa:	3301      	adds	r3, #1
90001dac:	6979      	ldr	r1, [r7, #20]
90001dae:	fb03 f101 	mul.w	r1, r3, r1
90001db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001db4:	005b      	lsls	r3, r3, #1
90001db6:	440b      	add	r3, r1
90001db8:	4413      	add	r3, r2
90001dba:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001dbc:	4a4a      	ldr	r2, [pc, #296]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001dbe:	683b      	ldr	r3, [r7, #0]
90001dc0:	212c      	movs	r1, #44	@ 0x2c
90001dc2:	fb01 f303 	mul.w	r3, r1, r3
90001dc6:	4413      	add	r3, r2
90001dc8:	3318      	adds	r3, #24
90001dca:	681b      	ldr	r3, [r3, #0]
90001dcc:	693a      	ldr	r2, [r7, #16]
90001dce:	429a      	cmp	r2, r3
90001dd0:	d971      	bls.n	90001eb6 <I2C_Compute_SCLL_SCLH+0x1d2>
90001dd2:	693a      	ldr	r2, [r7, #16]
90001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001dd6:	1ad2      	subs	r2, r2, r3
90001dd8:	6a3b      	ldr	r3, [r7, #32]
90001dda:	1ad3      	subs	r3, r2, r3
90001ddc:	089b      	lsrs	r3, r3, #2
90001dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001de0:	429a      	cmp	r2, r3
90001de2:	d268      	bcs.n	90001eb6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001de4:	2300      	movs	r3, #0
90001de6:	63bb      	str	r3, [r7, #56]	@ 0x38
90001de8:	e062      	b.n	90001eb0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001dec:	6a3b      	ldr	r3, [r7, #32]
90001dee:	441a      	add	r2, r3
90001df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001df2:	3301      	adds	r3, #1
90001df4:	6979      	ldr	r1, [r7, #20]
90001df6:	fb03 f101 	mul.w	r1, r3, r1
90001dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001dfc:	005b      	lsls	r3, r3, #1
90001dfe:	440b      	add	r3, r1
90001e00:	4413      	add	r3, r2
90001e02:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001e04:	693a      	ldr	r2, [r7, #16]
90001e06:	68fb      	ldr	r3, [r7, #12]
90001e08:	441a      	add	r2, r3
90001e0a:	4937      	ldr	r1, [pc, #220]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001e0c:	683b      	ldr	r3, [r7, #0]
90001e0e:	202c      	movs	r0, #44	@ 0x2c
90001e10:	fb00 f303 	mul.w	r3, r0, r3
90001e14:	440b      	add	r3, r1
90001e16:	3320      	adds	r3, #32
90001e18:	681b      	ldr	r3, [r3, #0]
90001e1a:	441a      	add	r2, r3
90001e1c:	4932      	ldr	r1, [pc, #200]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001e1e:	683b      	ldr	r3, [r7, #0]
90001e20:	202c      	movs	r0, #44	@ 0x2c
90001e22:	fb00 f303 	mul.w	r3, r0, r3
90001e26:	440b      	add	r3, r1
90001e28:	3324      	adds	r3, #36	@ 0x24
90001e2a:	681b      	ldr	r3, [r3, #0]
90001e2c:	4413      	add	r3, r2
90001e2e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001e30:	68ba      	ldr	r2, [r7, #8]
90001e32:	69bb      	ldr	r3, [r7, #24]
90001e34:	429a      	cmp	r2, r3
90001e36:	d338      	bcc.n	90001eaa <I2C_Compute_SCLL_SCLH+0x1c6>
90001e38:	68ba      	ldr	r2, [r7, #8]
90001e3a:	69fb      	ldr	r3, [r7, #28]
90001e3c:	429a      	cmp	r2, r3
90001e3e:	d834      	bhi.n	90001eaa <I2C_Compute_SCLL_SCLH+0x1c6>
90001e40:	4a29      	ldr	r2, [pc, #164]	@ (90001ee8 <I2C_Compute_SCLL_SCLH+0x204>)
90001e42:	683b      	ldr	r3, [r7, #0]
90001e44:	212c      	movs	r1, #44	@ 0x2c
90001e46:	fb01 f303 	mul.w	r3, r1, r3
90001e4a:	4413      	add	r3, r2
90001e4c:	331c      	adds	r3, #28
90001e4e:	681b      	ldr	r3, [r3, #0]
90001e50:	68fa      	ldr	r2, [r7, #12]
90001e52:	429a      	cmp	r2, r3
90001e54:	d329      	bcc.n	90001eaa <I2C_Compute_SCLL_SCLH+0x1c6>
90001e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001e58:	68fb      	ldr	r3, [r7, #12]
90001e5a:	429a      	cmp	r2, r3
90001e5c:	d225      	bcs.n	90001eaa <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001e5e:	68ba      	ldr	r2, [r7, #8]
90001e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001e62:	1ad3      	subs	r3, r2, r3
90001e64:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e68:	2b00      	cmp	r3, #0
90001e6a:	da02      	bge.n	90001e72 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e6e:	425b      	negs	r3, r3
90001e70:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001e76:	429a      	cmp	r2, r3
90001e78:	d917      	bls.n	90001eaa <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001e7c:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001e7e:	491b      	ldr	r1, [pc, #108]	@ (90001eec <I2C_Compute_SCLL_SCLH+0x208>)
90001e80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001e82:	4613      	mov	r3, r2
90001e84:	009b      	lsls	r3, r3, #2
90001e86:	4413      	add	r3, r2
90001e88:	009b      	lsls	r3, r3, #2
90001e8a:	440b      	add	r3, r1
90001e8c:	3310      	adds	r3, #16
90001e8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001e90:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001e92:	4916      	ldr	r1, [pc, #88]	@ (90001eec <I2C_Compute_SCLL_SCLH+0x208>)
90001e94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001e96:	4613      	mov	r3, r2
90001e98:	009b      	lsls	r3, r3, #2
90001e9a:	4413      	add	r3, r2
90001e9c:	009b      	lsls	r3, r3, #2
90001e9e:	440b      	add	r3, r1
90001ea0:	330c      	adds	r3, #12
90001ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001ea4:	601a      	str	r2, [r3, #0]
              ret = count;
90001ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001ea8:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001eac:	3301      	adds	r3, #1
90001eae:	63bb      	str	r3, [r7, #56]	@ 0x38
90001eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001eb2:	2bff      	cmp	r3, #255	@ 0xff
90001eb4:	d999      	bls.n	90001dea <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001eb8:	3301      	adds	r3, #1
90001eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001ebe:	2bff      	cmp	r3, #255	@ 0xff
90001ec0:	f67f af6f 	bls.w	90001da2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001ec6:	3301      	adds	r3, #1
90001ec8:	637b      	str	r3, [r7, #52]	@ 0x34
90001eca:	4b09      	ldr	r3, [pc, #36]	@ (90001ef0 <I2C_Compute_SCLL_SCLH+0x20c>)
90001ecc:	681b      	ldr	r3, [r3, #0]
90001ece:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001ed0:	429a      	cmp	r2, r3
90001ed2:	f4ff af56 	bcc.w	90001d82 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001ed8:	4618      	mov	r0, r3
90001eda:	374c      	adds	r7, #76	@ 0x4c
90001edc:	46bd      	mov	sp, r7
90001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ee2:	4770      	bx	lr
90001ee4:	3b9aca00 	.word	0x3b9aca00
90001ee8:	9000d758 	.word	0x9000d758
90001eec:	20000648 	.word	0x20000648
90001ef0:	20001048 	.word	0x20001048

90001ef4 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001ef4:	b580      	push	{r7, lr}
90001ef6:	b08a      	sub	sp, #40	@ 0x28
90001ef8:	af00      	add	r7, sp, #0
90001efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001efc:	4b31      	ldr	r3, [pc, #196]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001f02:	4a30      	ldr	r2, [pc, #192]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f04:	f043 0308 	orr.w	r3, r3, #8
90001f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001f0c:	4b2d      	ldr	r3, [pc, #180]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001f12:	f003 0308 	and.w	r3, r3, #8
90001f16:	613b      	str	r3, [r7, #16]
90001f18:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001f1a:	4b2a      	ldr	r3, [pc, #168]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001f20:	4a28      	ldr	r2, [pc, #160]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f22:	f043 0308 	orr.w	r3, r3, #8
90001f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001f2a:	4b26      	ldr	r3, [pc, #152]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001f30:	f003 0308 	and.w	r3, r3, #8
90001f34:	60fb      	str	r3, [r7, #12]
90001f36:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001f3c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001f3e:	2312      	movs	r3, #18
90001f40:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001f42:	2300      	movs	r3, #0
90001f44:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001f46:	2302      	movs	r3, #2
90001f48:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001f4a:	2304      	movs	r3, #4
90001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001f4e:	f107 0314 	add.w	r3, r7, #20
90001f52:	4619      	mov	r1, r3
90001f54:	481c      	ldr	r0, [pc, #112]	@ (90001fc8 <I2C4_MspInit+0xd4>)
90001f56:	f001 fe71 	bl	90003c3c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001f5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001f5e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001f60:	2312      	movs	r3, #18
90001f62:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001f64:	2300      	movs	r3, #0
90001f66:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001f68:	2302      	movs	r3, #2
90001f6a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001f6c:	2304      	movs	r3, #4
90001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001f70:	f107 0314 	add.w	r3, r7, #20
90001f74:	4619      	mov	r1, r3
90001f76:	4814      	ldr	r0, [pc, #80]	@ (90001fc8 <I2C4_MspInit+0xd4>)
90001f78:	f001 fe60 	bl	90003c3c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001f7c:	4b11      	ldr	r3, [pc, #68]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001f82:	4a10      	ldr	r2, [pc, #64]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001f88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001f96:	60bb      	str	r3, [r7, #8]
90001f98:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001f9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001fa0:	4a08      	ldr	r2, [pc, #32]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001fa6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001faa:	4b06      	ldr	r3, [pc, #24]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001fb0:	4a04      	ldr	r2, [pc, #16]	@ (90001fc4 <I2C4_MspInit+0xd0>)
90001fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001fb6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001fba:	bf00      	nop
90001fbc:	3728      	adds	r7, #40	@ 0x28
90001fbe:	46bd      	mov	sp, r7
90001fc0:	bd80      	pop	{r7, pc}
90001fc2:	bf00      	nop
90001fc4:	58024400 	.word	0x58024400
90001fc8:	58020c00 	.word	0x58020c00

90001fcc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001fcc:	b580      	push	{r7, lr}
90001fce:	b088      	sub	sp, #32
90001fd0:	af04      	add	r7, sp, #16
90001fd2:	607b      	str	r3, [r7, #4]
90001fd4:	4603      	mov	r3, r0
90001fd6:	81fb      	strh	r3, [r7, #14]
90001fd8:	460b      	mov	r3, r1
90001fda:	81bb      	strh	r3, [r7, #12]
90001fdc:	4613      	mov	r3, r2
90001fde:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001fe0:	8978      	ldrh	r0, [r7, #10]
90001fe2:	89ba      	ldrh	r2, [r7, #12]
90001fe4:	89f9      	ldrh	r1, [r7, #14]
90001fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001fea:	9302      	str	r3, [sp, #8]
90001fec:	8b3b      	ldrh	r3, [r7, #24]
90001fee:	9301      	str	r3, [sp, #4]
90001ff0:	687b      	ldr	r3, [r7, #4]
90001ff2:	9300      	str	r3, [sp, #0]
90001ff4:	4603      	mov	r3, r0
90001ff6:	4807      	ldr	r0, [pc, #28]	@ (90002014 <I2C4_ReadReg+0x48>)
90001ff8:	f003 fe4e 	bl	90005c98 <HAL_I2C_Mem_Read>
90001ffc:	4603      	mov	r3, r0
90001ffe:	2b00      	cmp	r3, #0
90002000:	d101      	bne.n	90002006 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90002002:	2300      	movs	r3, #0
90002004:	e001      	b.n	9000200a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90002006:	f06f 0307 	mvn.w	r3, #7
}
9000200a:	4618      	mov	r0, r3
9000200c:	3710      	adds	r7, #16
9000200e:	46bd      	mov	sp, r7
90002010:	bd80      	pop	{r7, pc}
90002012:	bf00      	nop
90002014:	2000104c 	.word	0x2000104c

90002018 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90002018:	b580      	push	{r7, lr}
9000201a:	b084      	sub	sp, #16
9000201c:	af02      	add	r7, sp, #8
9000201e:	6078      	str	r0, [r7, #4]
90002020:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90002022:	f44f 7388 	mov.w	r3, #272	@ 0x110
90002026:	9300      	str	r3, [sp, #0]
90002028:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
9000202c:	2200      	movs	r2, #0
9000202e:	6839      	ldr	r1, [r7, #0]
90002030:	6878      	ldr	r0, [r7, #4]
90002032:	f000 f805 	bl	90002040 <BSP_LCD_InitEx>
90002036:	4603      	mov	r3, r0
}
90002038:	4618      	mov	r0, r3
9000203a:	3708      	adds	r7, #8
9000203c:	46bd      	mov	sp, r7
9000203e:	bd80      	pop	{r7, pc}

90002040 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90002040:	b580      	push	{r7, lr}
90002042:	b09e      	sub	sp, #120	@ 0x78
90002044:	af00      	add	r7, sp, #0
90002046:	60f8      	str	r0, [r7, #12]
90002048:	60b9      	str	r1, [r7, #8]
9000204a:	607a      	str	r2, [r7, #4]
9000204c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000204e:	2300      	movs	r3, #0
90002050:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90002052:	2300      	movs	r3, #0
90002054:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90002056:	68bb      	ldr	r3, [r7, #8]
90002058:	2b01      	cmp	r3, #1
9000205a:	d808      	bhi.n	9000206e <BSP_LCD_InitEx+0x2e>
9000205c:	68fb      	ldr	r3, [r7, #12]
9000205e:	2b00      	cmp	r3, #0
90002060:	d105      	bne.n	9000206e <BSP_LCD_InitEx+0x2e>
90002062:	687b      	ldr	r3, [r7, #4]
90002064:	2b02      	cmp	r3, #2
90002066:	d006      	beq.n	90002076 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90002068:	687b      	ldr	r3, [r7, #4]
9000206a:	2b00      	cmp	r3, #0
9000206c:	d003      	beq.n	90002076 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
9000206e:	f06f 0301 	mvn.w	r3, #1
90002072:	677b      	str	r3, [r7, #116]	@ 0x74
90002074:	e0a8      	b.n	900021c8 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90002076:	687b      	ldr	r3, [r7, #4]
90002078:	2b02      	cmp	r3, #2
9000207a:	d109      	bne.n	90002090 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
9000207c:	2302      	movs	r3, #2
9000207e:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90002080:	4a54      	ldr	r2, [pc, #336]	@ (900021d4 <BSP_LCD_InitEx+0x194>)
90002082:	68fb      	ldr	r3, [r7, #12]
90002084:	015b      	lsls	r3, r3, #5
90002086:	4413      	add	r3, r2
90002088:	3310      	adds	r3, #16
9000208a:	2202      	movs	r2, #2
9000208c:	601a      	str	r2, [r3, #0]
9000208e:	e008      	b.n	900020a2 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90002090:	2300      	movs	r3, #0
90002092:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90002094:	4a4f      	ldr	r2, [pc, #316]	@ (900021d4 <BSP_LCD_InitEx+0x194>)
90002096:	68fb      	ldr	r3, [r7, #12]
90002098:	015b      	lsls	r3, r3, #5
9000209a:	4413      	add	r3, r2
9000209c:	3310      	adds	r3, #16
9000209e:	2204      	movs	r2, #4
900020a0:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
900020a2:	4a4c      	ldr	r2, [pc, #304]	@ (900021d4 <BSP_LCD_InitEx+0x194>)
900020a4:	68fb      	ldr	r3, [r7, #12]
900020a6:	015b      	lsls	r3, r3, #5
900020a8:	4413      	add	r3, r2
900020aa:	330c      	adds	r3, #12
900020ac:	687a      	ldr	r2, [r7, #4]
900020ae:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
900020b0:	4a48      	ldr	r2, [pc, #288]	@ (900021d4 <BSP_LCD_InitEx+0x194>)
900020b2:	68fb      	ldr	r3, [r7, #12]
900020b4:	015b      	lsls	r3, r3, #5
900020b6:	4413      	add	r3, r2
900020b8:	683a      	ldr	r2, [r7, #0]
900020ba:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
900020bc:	4a45      	ldr	r2, [pc, #276]	@ (900021d4 <BSP_LCD_InitEx+0x194>)
900020be:	68fb      	ldr	r3, [r7, #12]
900020c0:	015b      	lsls	r3, r3, #5
900020c2:	4413      	add	r3, r2
900020c4:	3304      	adds	r3, #4
900020c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
900020ca:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
900020cc:	4b42      	ldr	r3, [pc, #264]	@ (900021d8 <BSP_LCD_InitEx+0x198>)
900020ce:	4a43      	ldr	r2, [pc, #268]	@ (900021dc <BSP_LCD_InitEx+0x19c>)
900020d0:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
900020d2:	4b43      	ldr	r3, [pc, #268]	@ (900021e0 <BSP_LCD_InitEx+0x1a0>)
900020d4:	4a43      	ldr	r2, [pc, #268]	@ (900021e4 <BSP_LCD_InitEx+0x1a4>)
900020d6:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
900020d8:	483f      	ldr	r0, [pc, #252]	@ (900021d8 <BSP_LCD_InitEx+0x198>)
900020da:	f000 fcf9 	bl	90002ad0 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
900020de:	4840      	ldr	r0, [pc, #256]	@ (900021e0 <BSP_LCD_InitEx+0x1a0>)
900020e0:	f000 fdc2 	bl	90002c68 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
900020e4:	4b40      	ldr	r3, [pc, #256]	@ (900021e8 <BSP_LCD_InitEx+0x1a8>)
900020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
900020e8:	4b40      	ldr	r3, [pc, #256]	@ (900021ec <BSP_LCD_InitEx+0x1ac>)
900020ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
900020ec:	2370      	movs	r3, #112	@ 0x70
900020ee:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
900020f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
900020f4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
900020f8:	4611      	mov	r1, r2
900020fa:	4618      	mov	r0, r3
900020fc:	f7ff f9b8 	bl	90001470 <FT5336_RegisterBusIO>
90002100:	4603      	mov	r3, r0
90002102:	2b00      	cmp	r3, #0
90002104:	da03      	bge.n	9000210e <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002106:	f06f 0304 	mvn.w	r3, #4
9000210a:	677b      	str	r3, [r7, #116]	@ 0x74
9000210c:	e02b      	b.n	90002166 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
9000210e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90002112:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90002116:	4611      	mov	r1, r2
90002118:	4618      	mov	r0, r3
9000211a:	f7ff f9eb 	bl	900014f4 <FT5336_ReadID>
9000211e:	4603      	mov	r3, r0
90002120:	2b00      	cmp	r3, #0
90002122:	da03      	bge.n	9000212c <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002124:	f06f 0304 	mvn.w	r3, #4
90002128:	677b      	str	r3, [r7, #116]	@ 0x74
9000212a:	e01c      	b.n	90002166 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
9000212c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
9000212e:	2b51      	cmp	r3, #81	@ 0x51
90002130:	d003      	beq.n	9000213a <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90002132:	f06f 0306 	mvn.w	r3, #6
90002136:	677b      	str	r3, [r7, #116]	@ 0x74
90002138:	e015      	b.n	90002166 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
9000213a:	4827      	ldr	r0, [pc, #156]	@ (900021d8 <BSP_LCD_InitEx+0x198>)
9000213c:	f7fe feba 	bl	90000eb4 <MX_LTDC_ClockConfig>
90002140:	4603      	mov	r3, r0
90002142:	2b00      	cmp	r3, #0
90002144:	d003      	beq.n	9000214e <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90002146:	f06f 0303 	mvn.w	r3, #3
9000214a:	677b      	str	r3, [r7, #116]	@ 0x74
9000214c:	e00b      	b.n	90002166 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
9000214e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90002152:	6839      	ldr	r1, [r7, #0]
90002154:	4820      	ldr	r0, [pc, #128]	@ (900021d8 <BSP_LCD_InitEx+0x198>)
90002156:	f000 f84d 	bl	900021f4 <MX_LTDC_Init>
9000215a:	4603      	mov	r3, r0
9000215c:	2b00      	cmp	r3, #0
9000215e:	d002      	beq.n	90002166 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90002160:	f06f 0303 	mvn.w	r3, #3
90002164:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90002166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
90002168:	2b00      	cmp	r3, #0
9000216a:	d12d      	bne.n	900021c8 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
9000216c:	2000      	movs	r0, #0
9000216e:	f000 fe0d 	bl	90002d8c <BSP_SDRAM_Init>
90002172:	4603      	mov	r3, r0
90002174:	2b00      	cmp	r3, #0
90002176:	d002      	beq.n	9000217e <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90002178:	f06f 0303 	mvn.w	r3, #3
9000217c:	e025      	b.n	900021ca <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
9000217e:	2300      	movs	r3, #0
90002180:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90002182:	683b      	ldr	r3, [r7, #0]
90002184:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90002186:	2300      	movs	r3, #0
90002188:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
9000218a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
9000218e:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90002190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
90002192:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90002194:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90002198:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
9000219a:	f107 0314 	add.w	r3, r7, #20
9000219e:	461a      	mov	r2, r3
900021a0:	2100      	movs	r1, #0
900021a2:	480d      	ldr	r0, [pc, #52]	@ (900021d8 <BSP_LCD_InitEx+0x198>)
900021a4:	f000 f872 	bl	9000228c <MX_LTDC_ConfigLayer>
900021a8:	4603      	mov	r3, r0
900021aa:	2b00      	cmp	r3, #0
900021ac:	d002      	beq.n	900021b4 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
900021ae:	f06f 0303 	mvn.w	r3, #3
900021b2:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
900021b4:	480e      	ldr	r0, [pc, #56]	@ (900021f0 <BSP_LCD_InitEx+0x1b0>)
900021b6:	f000 fdbf 	bl	90002d38 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
900021ba:	4a06      	ldr	r2, [pc, #24]	@ (900021d4 <BSP_LCD_InitEx+0x194>)
900021bc:	68fb      	ldr	r3, [r7, #12]
900021be:	015b      	lsls	r3, r3, #5
900021c0:	4413      	add	r3, r2
900021c2:	3318      	adds	r3, #24
900021c4:	2201      	movs	r2, #1
900021c6:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
900021c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
900021ca:	4618      	mov	r0, r3
900021cc:	3778      	adds	r7, #120	@ 0x78
900021ce:	46bd      	mov	sp, r7
900021d0:	bd80      	pop	{r7, pc}
900021d2:	bf00      	nop
900021d4:	200011fc 	.word	0x200011fc
900021d8:	20001154 	.word	0x20001154
900021dc:	50001000 	.word	0x50001000
900021e0:	200010ec 	.word	0x200010ec
900021e4:	52001000 	.word	0x52001000
900021e8:	900018b5 	.word	0x900018b5
900021ec:	900019ad 	.word	0x900019ad
900021f0:	200010a0 	.word	0x200010a0

900021f4 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
900021f4:	b580      	push	{r7, lr}
900021f6:	b084      	sub	sp, #16
900021f8:	af00      	add	r7, sp, #0
900021fa:	60f8      	str	r0, [r7, #12]
900021fc:	60b9      	str	r1, [r7, #8]
900021fe:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90002200:	68fb      	ldr	r3, [r7, #12]
90002202:	4a21      	ldr	r2, [pc, #132]	@ (90002288 <MX_LTDC_Init+0x94>)
90002204:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90002206:	68fb      	ldr	r3, [r7, #12]
90002208:	2200      	movs	r2, #0
9000220a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
9000220c:	68fb      	ldr	r3, [r7, #12]
9000220e:	2200      	movs	r2, #0
90002210:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90002212:	68fb      	ldr	r3, [r7, #12]
90002214:	2200      	movs	r2, #0
90002216:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90002218:	68fb      	ldr	r3, [r7, #12]
9000221a:	2200      	movs	r2, #0
9000221c:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
9000221e:	68fb      	ldr	r3, [r7, #12]
90002220:	2228      	movs	r2, #40	@ 0x28
90002222:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90002224:	68fb      	ldr	r3, [r7, #12]
90002226:	222a      	movs	r2, #42	@ 0x2a
90002228:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
9000222a:	68bb      	ldr	r3, [r7, #8]
9000222c:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002230:	68fb      	ldr	r3, [r7, #12]
90002232:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90002234:	68bb      	ldr	r3, [r7, #8]
90002236:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
9000223a:	68fb      	ldr	r3, [r7, #12]
9000223c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
9000223e:	68fb      	ldr	r3, [r7, #12]
90002240:	2209      	movs	r2, #9
90002242:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90002244:	68fb      	ldr	r3, [r7, #12]
90002246:	220b      	movs	r2, #11
90002248:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
9000224a:	687b      	ldr	r3, [r7, #4]
9000224c:	f103 020b 	add.w	r2, r3, #11
90002250:	68fb      	ldr	r3, [r7, #12]
90002252:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90002254:	687b      	ldr	r3, [r7, #4]
90002256:	f103 020d 	add.w	r2, r3, #13
9000225a:	68fb      	ldr	r3, [r7, #12]
9000225c:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
9000225e:	68fb      	ldr	r3, [r7, #12]
90002260:	22ff      	movs	r2, #255	@ 0xff
90002262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
90002266:	68fb      	ldr	r3, [r7, #12]
90002268:	22ff      	movs	r2, #255	@ 0xff
9000226a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
9000226e:	68fb      	ldr	r3, [r7, #12]
90002270:	22ff      	movs	r2, #255	@ 0xff
90002272:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
90002276:	68f8      	ldr	r0, [r7, #12]
90002278:	f004 f947 	bl	9000650a <HAL_LTDC_Init>
9000227c:	4603      	mov	r3, r0
}
9000227e:	4618      	mov	r0, r3
90002280:	3710      	adds	r7, #16
90002282:	46bd      	mov	sp, r7
90002284:	bd80      	pop	{r7, pc}
90002286:	bf00      	nop
90002288:	50001000 	.word	0x50001000

9000228c <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
9000228c:	b580      	push	{r7, lr}
9000228e:	b092      	sub	sp, #72	@ 0x48
90002290:	af00      	add	r7, sp, #0
90002292:	60f8      	str	r0, [r7, #12]
90002294:	60b9      	str	r1, [r7, #8]
90002296:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90002298:	687b      	ldr	r3, [r7, #4]
9000229a:	681b      	ldr	r3, [r3, #0]
9000229c:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
9000229e:	687b      	ldr	r3, [r7, #4]
900022a0:	685b      	ldr	r3, [r3, #4]
900022a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
900022a4:	687b      	ldr	r3, [r7, #4]
900022a6:	689b      	ldr	r3, [r3, #8]
900022a8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
900022aa:	687b      	ldr	r3, [r7, #4]
900022ac:	68db      	ldr	r3, [r3, #12]
900022ae:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
900022b0:	687b      	ldr	r3, [r7, #4]
900022b2:	691b      	ldr	r3, [r3, #16]
900022b4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
900022b6:	23ff      	movs	r3, #255	@ 0xff
900022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
900022ba:	2300      	movs	r3, #0
900022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
900022be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
900022c2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900022c4:	2307      	movs	r3, #7
900022c6:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
900022c8:	687b      	ldr	r3, [r7, #4]
900022ca:	695b      	ldr	r3, [r3, #20]
900022cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
900022ce:	687b      	ldr	r3, [r7, #4]
900022d0:	685a      	ldr	r2, [r3, #4]
900022d2:	687b      	ldr	r3, [r7, #4]
900022d4:	681b      	ldr	r3, [r3, #0]
900022d6:	1ad3      	subs	r3, r2, r3
900022d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
900022da:	687b      	ldr	r3, [r7, #4]
900022dc:	68da      	ldr	r2, [r3, #12]
900022de:	687b      	ldr	r3, [r7, #4]
900022e0:	689b      	ldr	r3, [r3, #8]
900022e2:	1ad3      	subs	r3, r2, r3
900022e4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
900022e6:	2300      	movs	r3, #0
900022e8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
900022ec:	2300      	movs	r3, #0
900022ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
900022f2:	2300      	movs	r3, #0
900022f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
900022f8:	f107 0314 	add.w	r3, r7, #20
900022fc:	68ba      	ldr	r2, [r7, #8]
900022fe:	4619      	mov	r1, r3
90002300:	68f8      	ldr	r0, [r7, #12]
90002302:	f004 f9a9 	bl	90006658 <HAL_LTDC_ConfigLayer>
90002306:	4603      	mov	r3, r0
}
90002308:	4618      	mov	r0, r3
9000230a:	3748      	adds	r7, #72	@ 0x48
9000230c:	46bd      	mov	sp, r7
9000230e:	bd80      	pop	{r7, pc}

90002310 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90002310:	b480      	push	{r7}
90002312:	b085      	sub	sp, #20
90002314:	af00      	add	r7, sp, #0
90002316:	6078      	str	r0, [r7, #4]
90002318:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000231a:	2300      	movs	r3, #0
9000231c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000231e:	687b      	ldr	r3, [r7, #4]
90002320:	2b00      	cmp	r3, #0
90002322:	d003      	beq.n	9000232c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002324:	f06f 0301 	mvn.w	r3, #1
90002328:	60fb      	str	r3, [r7, #12]
9000232a:	e007      	b.n	9000233c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
9000232c:	4a07      	ldr	r2, [pc, #28]	@ (9000234c <BSP_LCD_GetPixelFormat+0x3c>)
9000232e:	687b      	ldr	r3, [r7, #4]
90002330:	015b      	lsls	r3, r3, #5
90002332:	4413      	add	r3, r2
90002334:	330c      	adds	r3, #12
90002336:	681a      	ldr	r2, [r3, #0]
90002338:	683b      	ldr	r3, [r7, #0]
9000233a:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000233c:	68fb      	ldr	r3, [r7, #12]
}
9000233e:	4618      	mov	r0, r3
90002340:	3714      	adds	r7, #20
90002342:	46bd      	mov	sp, r7
90002344:	f85d 7b04 	ldr.w	r7, [sp], #4
90002348:	4770      	bx	lr
9000234a:	bf00      	nop
9000234c:	200011fc 	.word	0x200011fc

90002350 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002350:	b480      	push	{r7}
90002352:	b085      	sub	sp, #20
90002354:	af00      	add	r7, sp, #0
90002356:	6078      	str	r0, [r7, #4]
90002358:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000235a:	2300      	movs	r3, #0
9000235c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000235e:	687b      	ldr	r3, [r7, #4]
90002360:	2b00      	cmp	r3, #0
90002362:	d003      	beq.n	9000236c <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002364:	f06f 0301 	mvn.w	r3, #1
90002368:	60fb      	str	r3, [r7, #12]
9000236a:	e006      	b.n	9000237a <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
9000236c:	4a06      	ldr	r2, [pc, #24]	@ (90002388 <BSP_LCD_SetActiveLayer+0x38>)
9000236e:	687b      	ldr	r3, [r7, #4]
90002370:	015b      	lsls	r3, r3, #5
90002372:	4413      	add	r3, r2
90002374:	3308      	adds	r3, #8
90002376:	683a      	ldr	r2, [r7, #0]
90002378:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000237a:	68fb      	ldr	r3, [r7, #12]
}
9000237c:	4618      	mov	r0, r3
9000237e:	3714      	adds	r7, #20
90002380:	46bd      	mov	sp, r7
90002382:	f85d 7b04 	ldr.w	r7, [sp], #4
90002386:	4770      	bx	lr
90002388:	200011fc 	.word	0x200011fc

9000238c <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
9000238c:	b480      	push	{r7}
9000238e:	b085      	sub	sp, #20
90002390:	af00      	add	r7, sp, #0
90002392:	6078      	str	r0, [r7, #4]
90002394:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002396:	2300      	movs	r3, #0
90002398:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000239a:	687b      	ldr	r3, [r7, #4]
9000239c:	2b00      	cmp	r3, #0
9000239e:	d003      	beq.n	900023a8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900023a0:	f06f 0301 	mvn.w	r3, #1
900023a4:	60fb      	str	r3, [r7, #12]
900023a6:	e006      	b.n	900023b6 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
900023a8:	4a06      	ldr	r2, [pc, #24]	@ (900023c4 <BSP_LCD_GetXSize+0x38>)
900023aa:	687b      	ldr	r3, [r7, #4]
900023ac:	015b      	lsls	r3, r3, #5
900023ae:	4413      	add	r3, r2
900023b0:	681a      	ldr	r2, [r3, #0]
900023b2:	683b      	ldr	r3, [r7, #0]
900023b4:	601a      	str	r2, [r3, #0]
  }

  return ret;
900023b6:	68fb      	ldr	r3, [r7, #12]
}
900023b8:	4618      	mov	r0, r3
900023ba:	3714      	adds	r7, #20
900023bc:	46bd      	mov	sp, r7
900023be:	f85d 7b04 	ldr.w	r7, [sp], #4
900023c2:	4770      	bx	lr
900023c4:	200011fc 	.word	0x200011fc

900023c8 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
900023c8:	b480      	push	{r7}
900023ca:	b085      	sub	sp, #20
900023cc:	af00      	add	r7, sp, #0
900023ce:	6078      	str	r0, [r7, #4]
900023d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900023d2:	2300      	movs	r3, #0
900023d4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900023d6:	687b      	ldr	r3, [r7, #4]
900023d8:	2b00      	cmp	r3, #0
900023da:	d003      	beq.n	900023e4 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900023dc:	f06f 0301 	mvn.w	r3, #1
900023e0:	60fb      	str	r3, [r7, #12]
900023e2:	e007      	b.n	900023f4 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
900023e4:	4a07      	ldr	r2, [pc, #28]	@ (90002404 <BSP_LCD_GetYSize+0x3c>)
900023e6:	687b      	ldr	r3, [r7, #4]
900023e8:	015b      	lsls	r3, r3, #5
900023ea:	4413      	add	r3, r2
900023ec:	3304      	adds	r3, #4
900023ee:	681a      	ldr	r2, [r3, #0]
900023f0:	683b      	ldr	r3, [r7, #0]
900023f2:	601a      	str	r2, [r3, #0]
  }

  return ret;
900023f4:	68fb      	ldr	r3, [r7, #12]
}
900023f6:	4618      	mov	r0, r3
900023f8:	3714      	adds	r7, #20
900023fa:	46bd      	mov	sp, r7
900023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
90002400:	4770      	bx	lr
90002402:	bf00      	nop
90002404:	200011fc 	.word	0x200011fc

90002408 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
90002408:	b580      	push	{r7, lr}
9000240a:	b08e      	sub	sp, #56	@ 0x38
9000240c:	af02      	add	r7, sp, #8
9000240e:	60f8      	str	r0, [r7, #12]
90002410:	60b9      	str	r1, [r7, #8]
90002412:	607a      	str	r2, [r7, #4]
90002414:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002416:	2300      	movs	r3, #0
90002418:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
9000241a:	683b      	ldr	r3, [r7, #0]
9000241c:	330a      	adds	r3, #10
9000241e:	781b      	ldrb	r3, [r3, #0]
90002420:	461a      	mov	r2, r3
90002422:	683b      	ldr	r3, [r7, #0]
90002424:	330b      	adds	r3, #11
90002426:	781b      	ldrb	r3, [r3, #0]
90002428:	021b      	lsls	r3, r3, #8
9000242a:	441a      	add	r2, r3
9000242c:	683b      	ldr	r3, [r7, #0]
9000242e:	330c      	adds	r3, #12
90002430:	781b      	ldrb	r3, [r3, #0]
90002432:	041b      	lsls	r3, r3, #16
90002434:	441a      	add	r2, r3
90002436:	683b      	ldr	r3, [r7, #0]
90002438:	330d      	adds	r3, #13
9000243a:	781b      	ldrb	r3, [r3, #0]
9000243c:	061b      	lsls	r3, r3, #24
9000243e:	4413      	add	r3, r2
90002440:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90002442:	683b      	ldr	r3, [r7, #0]
90002444:	3312      	adds	r3, #18
90002446:	781b      	ldrb	r3, [r3, #0]
90002448:	461a      	mov	r2, r3
9000244a:	683b      	ldr	r3, [r7, #0]
9000244c:	3313      	adds	r3, #19
9000244e:	781b      	ldrb	r3, [r3, #0]
90002450:	021b      	lsls	r3, r3, #8
90002452:	441a      	add	r2, r3
90002454:	683b      	ldr	r3, [r7, #0]
90002456:	3314      	adds	r3, #20
90002458:	781b      	ldrb	r3, [r3, #0]
9000245a:	041b      	lsls	r3, r3, #16
9000245c:	441a      	add	r2, r3
9000245e:	683b      	ldr	r3, [r7, #0]
90002460:	3315      	adds	r3, #21
90002462:	781b      	ldrb	r3, [r3, #0]
90002464:	061b      	lsls	r3, r3, #24
90002466:	4413      	add	r3, r2
90002468:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
9000246a:	683b      	ldr	r3, [r7, #0]
9000246c:	3316      	adds	r3, #22
9000246e:	781b      	ldrb	r3, [r3, #0]
90002470:	461a      	mov	r2, r3
90002472:	683b      	ldr	r3, [r7, #0]
90002474:	3317      	adds	r3, #23
90002476:	781b      	ldrb	r3, [r3, #0]
90002478:	021b      	lsls	r3, r3, #8
9000247a:	441a      	add	r2, r3
9000247c:	683b      	ldr	r3, [r7, #0]
9000247e:	3318      	adds	r3, #24
90002480:	781b      	ldrb	r3, [r3, #0]
90002482:	041b      	lsls	r3, r3, #16
90002484:	441a      	add	r2, r3
90002486:	683b      	ldr	r3, [r7, #0]
90002488:	3319      	adds	r3, #25
9000248a:	781b      	ldrb	r3, [r3, #0]
9000248c:	061b      	lsls	r3, r3, #24
9000248e:	4413      	add	r3, r2
90002490:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
90002492:	683b      	ldr	r3, [r7, #0]
90002494:	331c      	adds	r3, #28
90002496:	781b      	ldrb	r3, [r3, #0]
90002498:	461a      	mov	r2, r3
9000249a:	683b      	ldr	r3, [r7, #0]
9000249c:	331d      	adds	r3, #29
9000249e:	781b      	ldrb	r3, [r3, #0]
900024a0:	021b      	lsls	r3, r3, #8
900024a2:	4413      	add	r3, r2
900024a4:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
900024a6:	4a37      	ldr	r2, [pc, #220]	@ (90002584 <BSP_LCD_DrawBitmap+0x17c>)
900024a8:	68fb      	ldr	r3, [r7, #12]
900024aa:	015b      	lsls	r3, r3, #5
900024ac:	4413      	add	r3, r2
900024ae:	3308      	adds	r3, #8
900024b0:	681b      	ldr	r3, [r3, #0]
900024b2:	4a35      	ldr	r2, [pc, #212]	@ (90002588 <BSP_LCD_DrawBitmap+0x180>)
900024b4:	2134      	movs	r1, #52	@ 0x34
900024b6:	fb01 f303 	mul.w	r3, r1, r3
900024ba:	4413      	add	r3, r2
900024bc:	335c      	adds	r3, #92	@ 0x5c
900024be:	681a      	ldr	r2, [r3, #0]
900024c0:	4930      	ldr	r1, [pc, #192]	@ (90002584 <BSP_LCD_DrawBitmap+0x17c>)
900024c2:	68fb      	ldr	r3, [r7, #12]
900024c4:	015b      	lsls	r3, r3, #5
900024c6:	440b      	add	r3, r1
900024c8:	681b      	ldr	r3, [r3, #0]
900024ca:	6879      	ldr	r1, [r7, #4]
900024cc:	fb03 f101 	mul.w	r1, r3, r1
900024d0:	68bb      	ldr	r3, [r7, #8]
900024d2:	440b      	add	r3, r1
900024d4:	482b      	ldr	r0, [pc, #172]	@ (90002584 <BSP_LCD_DrawBitmap+0x17c>)
900024d6:	68f9      	ldr	r1, [r7, #12]
900024d8:	0149      	lsls	r1, r1, #5
900024da:	4401      	add	r1, r0
900024dc:	3110      	adds	r1, #16
900024de:	6809      	ldr	r1, [r1, #0]
900024e0:	fb01 f303 	mul.w	r3, r1, r3
900024e4:	4413      	add	r3, r2
900024e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
900024e8:	693b      	ldr	r3, [r7, #16]
900024ea:	3b20      	subs	r3, #32
900024ec:	2b07      	cmp	r3, #7
900024ee:	d802      	bhi.n	900024f6 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
900024f0:	2300      	movs	r3, #0
900024f2:	627b      	str	r3, [r7, #36]	@ 0x24
900024f4:	e008      	b.n	90002508 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
900024f6:	693b      	ldr	r3, [r7, #16]
900024f8:	3b10      	subs	r3, #16
900024fa:	2b07      	cmp	r3, #7
900024fc:	d802      	bhi.n	90002504 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
900024fe:	2302      	movs	r3, #2
90002500:	627b      	str	r3, [r7, #36]	@ 0x24
90002502:	e001      	b.n	90002508 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
90002504:	2301      	movs	r3, #1
90002506:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
90002508:	697b      	ldr	r3, [r7, #20]
9000250a:	3b01      	subs	r3, #1
9000250c:	69ba      	ldr	r2, [r7, #24]
9000250e:	fb02 f303 	mul.w	r3, r2, r3
90002512:	693a      	ldr	r2, [r7, #16]
90002514:	08d2      	lsrs	r2, r2, #3
90002516:	fb03 f202 	mul.w	r2, r3, r2
9000251a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000251c:	4413      	add	r3, r2
9000251e:	683a      	ldr	r2, [r7, #0]
90002520:	4413      	add	r3, r2
90002522:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002524:	2300      	movs	r3, #0
90002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002528:	e023      	b.n	90002572 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
9000252a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000252e:	9300      	str	r3, [sp, #0]
90002530:	69bb      	ldr	r3, [r7, #24]
90002532:	6a39      	ldr	r1, [r7, #32]
90002534:	68f8      	ldr	r0, [r7, #12]
90002536:	f000 fa77 	bl	90002a28 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000253a:	4a12      	ldr	r2, [pc, #72]	@ (90002584 <BSP_LCD_DrawBitmap+0x17c>)
9000253c:	68fb      	ldr	r3, [r7, #12]
9000253e:	015b      	lsls	r3, r3, #5
90002540:	4413      	add	r3, r2
90002542:	681b      	ldr	r3, [r3, #0]
90002544:	490f      	ldr	r1, [pc, #60]	@ (90002584 <BSP_LCD_DrawBitmap+0x17c>)
90002546:	68fa      	ldr	r2, [r7, #12]
90002548:	0152      	lsls	r2, r2, #5
9000254a:	440a      	add	r2, r1
9000254c:	3210      	adds	r2, #16
9000254e:	6812      	ldr	r2, [r2, #0]
90002550:	fb02 f303 	mul.w	r3, r2, r3
90002554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002556:	4413      	add	r3, r2
90002558:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
9000255a:	693b      	ldr	r3, [r7, #16]
9000255c:	08db      	lsrs	r3, r3, #3
9000255e:	69ba      	ldr	r2, [r7, #24]
90002560:	fb02 f303 	mul.w	r3, r2, r3
90002564:	425b      	negs	r3, r3
90002566:	6a3a      	ldr	r2, [r7, #32]
90002568:	4413      	add	r3, r2
9000256a:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
9000256c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000256e:	3301      	adds	r3, #1
90002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002574:	697b      	ldr	r3, [r7, #20]
90002576:	429a      	cmp	r2, r3
90002578:	d3d7      	bcc.n	9000252a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
9000257a:	69fb      	ldr	r3, [r7, #28]
}
9000257c:	4618      	mov	r0, r3
9000257e:	3730      	adds	r7, #48	@ 0x30
90002580:	46bd      	mov	sp, r7
90002582:	bd80      	pop	{r7, pc}
90002584:	200011fc 	.word	0x200011fc
90002588:	20001154 	.word	0x20001154

9000258c <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000258c:	b580      	push	{r7, lr}
9000258e:	b088      	sub	sp, #32
90002590:	af00      	add	r7, sp, #0
90002592:	60f8      	str	r0, [r7, #12]
90002594:	60b9      	str	r1, [r7, #8]
90002596:	607a      	str	r2, [r7, #4]
90002598:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
9000259a:	683b      	ldr	r3, [r7, #0]
9000259c:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
9000259e:	2300      	movs	r3, #0
900025a0:	61fb      	str	r3, [r7, #28]
900025a2:	e032      	b.n	9000260a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
900025a4:	2300      	movs	r3, #0
900025a6:	617b      	str	r3, [r7, #20]
900025a8:	e028      	b.n	900025fc <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
900025aa:	69bb      	ldr	r3, [r7, #24]
900025ac:	781b      	ldrb	r3, [r3, #0]
900025ae:	461a      	mov	r2, r3
900025b0:	69bb      	ldr	r3, [r7, #24]
900025b2:	3301      	adds	r3, #1
900025b4:	781b      	ldrb	r3, [r3, #0]
900025b6:	021b      	lsls	r3, r3, #8
900025b8:	431a      	orrs	r2, r3
900025ba:	69bb      	ldr	r3, [r7, #24]
900025bc:	3302      	adds	r3, #2
900025be:	781b      	ldrb	r3, [r3, #0]
900025c0:	041b      	lsls	r3, r3, #16
900025c2:	431a      	orrs	r2, r3
900025c4:	69bb      	ldr	r3, [r7, #24]
900025c6:	3303      	adds	r3, #3
900025c8:	781b      	ldrb	r3, [r3, #0]
900025ca:	061b      	lsls	r3, r3, #24
900025cc:	4313      	orrs	r3, r2
900025ce:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
900025d0:	68ba      	ldr	r2, [r7, #8]
900025d2:	697b      	ldr	r3, [r7, #20]
900025d4:	18d1      	adds	r1, r2, r3
900025d6:	687a      	ldr	r2, [r7, #4]
900025d8:	69fb      	ldr	r3, [r7, #28]
900025da:	441a      	add	r2, r3
900025dc:	693b      	ldr	r3, [r7, #16]
900025de:	68f8      	ldr	r0, [r7, #12]
900025e0:	f000 f95e 	bl	900028a0 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
900025e4:	4a0d      	ldr	r2, [pc, #52]	@ (9000261c <BSP_LCD_FillRGBRect+0x90>)
900025e6:	68fb      	ldr	r3, [r7, #12]
900025e8:	015b      	lsls	r3, r3, #5
900025ea:	4413      	add	r3, r2
900025ec:	3310      	adds	r3, #16
900025ee:	681b      	ldr	r3, [r3, #0]
900025f0:	69ba      	ldr	r2, [r7, #24]
900025f2:	4413      	add	r3, r2
900025f4:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
900025f6:	697b      	ldr	r3, [r7, #20]
900025f8:	3301      	adds	r3, #1
900025fa:	617b      	str	r3, [r7, #20]
900025fc:	697a      	ldr	r2, [r7, #20]
900025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90002600:	429a      	cmp	r2, r3
90002602:	d3d2      	bcc.n	900025aa <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
90002604:	69fb      	ldr	r3, [r7, #28]
90002606:	3301      	adds	r3, #1
90002608:	61fb      	str	r3, [r7, #28]
9000260a:	69fa      	ldr	r2, [r7, #28]
9000260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
9000260e:	429a      	cmp	r2, r3
90002610:	d3c8      	bcc.n	900025a4 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
90002612:	2300      	movs	r3, #0
}
90002614:	4618      	mov	r0, r3
90002616:	3720      	adds	r7, #32
90002618:	46bd      	mov	sp, r7
9000261a:	bd80      	pop	{r7, pc}
9000261c:	200011fc 	.word	0x200011fc

90002620 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002620:	b580      	push	{r7, lr}
90002622:	b088      	sub	sp, #32
90002624:	af02      	add	r7, sp, #8
90002626:	60f8      	str	r0, [r7, #12]
90002628:	60b9      	str	r1, [r7, #8]
9000262a:	607a      	str	r2, [r7, #4]
9000262c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000262e:	4a21      	ldr	r2, [pc, #132]	@ (900026b4 <BSP_LCD_DrawHLine+0x94>)
90002630:	68fb      	ldr	r3, [r7, #12]
90002632:	015b      	lsls	r3, r3, #5
90002634:	4413      	add	r3, r2
90002636:	3308      	adds	r3, #8
90002638:	681b      	ldr	r3, [r3, #0]
9000263a:	4a1f      	ldr	r2, [pc, #124]	@ (900026b8 <BSP_LCD_DrawHLine+0x98>)
9000263c:	2134      	movs	r1, #52	@ 0x34
9000263e:	fb01 f303 	mul.w	r3, r1, r3
90002642:	4413      	add	r3, r2
90002644:	335c      	adds	r3, #92	@ 0x5c
90002646:	681a      	ldr	r2, [r3, #0]
90002648:	491a      	ldr	r1, [pc, #104]	@ (900026b4 <BSP_LCD_DrawHLine+0x94>)
9000264a:	68fb      	ldr	r3, [r7, #12]
9000264c:	015b      	lsls	r3, r3, #5
9000264e:	440b      	add	r3, r1
90002650:	3310      	adds	r3, #16
90002652:	681b      	ldr	r3, [r3, #0]
90002654:	4817      	ldr	r0, [pc, #92]	@ (900026b4 <BSP_LCD_DrawHLine+0x94>)
90002656:	68f9      	ldr	r1, [r7, #12]
90002658:	0149      	lsls	r1, r1, #5
9000265a:	4401      	add	r1, r0
9000265c:	6809      	ldr	r1, [r1, #0]
9000265e:	6878      	ldr	r0, [r7, #4]
90002660:	fb01 f000 	mul.w	r0, r1, r0
90002664:	68b9      	ldr	r1, [r7, #8]
90002666:	4401      	add	r1, r0
90002668:	fb01 f303 	mul.w	r3, r1, r3
9000266c:	4413      	add	r3, r2
9000266e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002670:	68ba      	ldr	r2, [r7, #8]
90002672:	683b      	ldr	r3, [r7, #0]
90002674:	441a      	add	r2, r3
90002676:	490f      	ldr	r1, [pc, #60]	@ (900026b4 <BSP_LCD_DrawHLine+0x94>)
90002678:	68fb      	ldr	r3, [r7, #12]
9000267a:	015b      	lsls	r3, r3, #5
9000267c:	440b      	add	r3, r1
9000267e:	681b      	ldr	r3, [r3, #0]
90002680:	429a      	cmp	r2, r3
90002682:	d907      	bls.n	90002694 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002684:	4a0b      	ldr	r2, [pc, #44]	@ (900026b4 <BSP_LCD_DrawHLine+0x94>)
90002686:	68fb      	ldr	r3, [r7, #12]
90002688:	015b      	lsls	r3, r3, #5
9000268a:	4413      	add	r3, r2
9000268c:	681a      	ldr	r2, [r3, #0]
9000268e:	68bb      	ldr	r3, [r7, #8]
90002690:	1ad3      	subs	r3, r2, r3
90002692:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90002694:	6979      	ldr	r1, [r7, #20]
90002696:	6a3b      	ldr	r3, [r7, #32]
90002698:	9301      	str	r3, [sp, #4]
9000269a:	2300      	movs	r3, #0
9000269c:	9300      	str	r3, [sp, #0]
9000269e:	2301      	movs	r3, #1
900026a0:	683a      	ldr	r2, [r7, #0]
900026a2:	68f8      	ldr	r0, [r7, #12]
900026a4:	f000 f956 	bl	90002954 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900026a8:	2300      	movs	r3, #0
}
900026aa:	4618      	mov	r0, r3
900026ac:	3718      	adds	r7, #24
900026ae:	46bd      	mov	sp, r7
900026b0:	bd80      	pop	{r7, pc}
900026b2:	bf00      	nop
900026b4:	200011fc 	.word	0x200011fc
900026b8:	20001154 	.word	0x20001154

900026bc <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900026bc:	b580      	push	{r7, lr}
900026be:	b088      	sub	sp, #32
900026c0:	af02      	add	r7, sp, #8
900026c2:	60f8      	str	r0, [r7, #12]
900026c4:	60b9      	str	r1, [r7, #8]
900026c6:	607a      	str	r2, [r7, #4]
900026c8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900026ca:	4a24      	ldr	r2, [pc, #144]	@ (9000275c <BSP_LCD_DrawVLine+0xa0>)
900026cc:	68fb      	ldr	r3, [r7, #12]
900026ce:	015b      	lsls	r3, r3, #5
900026d0:	4413      	add	r3, r2
900026d2:	3308      	adds	r3, #8
900026d4:	681b      	ldr	r3, [r3, #0]
900026d6:	4a22      	ldr	r2, [pc, #136]	@ (90002760 <BSP_LCD_DrawVLine+0xa4>)
900026d8:	2134      	movs	r1, #52	@ 0x34
900026da:	fb01 f303 	mul.w	r3, r1, r3
900026de:	4413      	add	r3, r2
900026e0:	335c      	adds	r3, #92	@ 0x5c
900026e2:	681a      	ldr	r2, [r3, #0]
900026e4:	491d      	ldr	r1, [pc, #116]	@ (9000275c <BSP_LCD_DrawVLine+0xa0>)
900026e6:	68fb      	ldr	r3, [r7, #12]
900026e8:	015b      	lsls	r3, r3, #5
900026ea:	440b      	add	r3, r1
900026ec:	3310      	adds	r3, #16
900026ee:	681b      	ldr	r3, [r3, #0]
900026f0:	481a      	ldr	r0, [pc, #104]	@ (9000275c <BSP_LCD_DrawVLine+0xa0>)
900026f2:	68f9      	ldr	r1, [r7, #12]
900026f4:	0149      	lsls	r1, r1, #5
900026f6:	4401      	add	r1, r0
900026f8:	6809      	ldr	r1, [r1, #0]
900026fa:	6878      	ldr	r0, [r7, #4]
900026fc:	fb01 f000 	mul.w	r0, r1, r0
90002700:	68b9      	ldr	r1, [r7, #8]
90002702:	4401      	add	r1, r0
90002704:	fb01 f303 	mul.w	r3, r1, r3
90002708:	4413      	add	r3, r2
9000270a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
9000270c:	687a      	ldr	r2, [r7, #4]
9000270e:	683b      	ldr	r3, [r7, #0]
90002710:	441a      	add	r2, r3
90002712:	4912      	ldr	r1, [pc, #72]	@ (9000275c <BSP_LCD_DrawVLine+0xa0>)
90002714:	68fb      	ldr	r3, [r7, #12]
90002716:	015b      	lsls	r3, r3, #5
90002718:	440b      	add	r3, r1
9000271a:	3304      	adds	r3, #4
9000271c:	681b      	ldr	r3, [r3, #0]
9000271e:	429a      	cmp	r2, r3
90002720:	d908      	bls.n	90002734 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90002722:	4a0e      	ldr	r2, [pc, #56]	@ (9000275c <BSP_LCD_DrawVLine+0xa0>)
90002724:	68fb      	ldr	r3, [r7, #12]
90002726:	015b      	lsls	r3, r3, #5
90002728:	4413      	add	r3, r2
9000272a:	3304      	adds	r3, #4
9000272c:	681a      	ldr	r2, [r3, #0]
9000272e:	687b      	ldr	r3, [r7, #4]
90002730:	1ad3      	subs	r3, r2, r3
90002732:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002734:	6979      	ldr	r1, [r7, #20]
90002736:	4a09      	ldr	r2, [pc, #36]	@ (9000275c <BSP_LCD_DrawVLine+0xa0>)
90002738:	68fb      	ldr	r3, [r7, #12]
9000273a:	015b      	lsls	r3, r3, #5
9000273c:	4413      	add	r3, r2
9000273e:	681b      	ldr	r3, [r3, #0]
90002740:	3b01      	subs	r3, #1
90002742:	6a3a      	ldr	r2, [r7, #32]
90002744:	9201      	str	r2, [sp, #4]
90002746:	9300      	str	r3, [sp, #0]
90002748:	683b      	ldr	r3, [r7, #0]
9000274a:	2201      	movs	r2, #1
9000274c:	68f8      	ldr	r0, [r7, #12]
9000274e:	f000 f901 	bl	90002954 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002752:	2300      	movs	r3, #0
}
90002754:	4618      	mov	r0, r3
90002756:	3718      	adds	r7, #24
90002758:	46bd      	mov	sp, r7
9000275a:	bd80      	pop	{r7, pc}
9000275c:	200011fc 	.word	0x200011fc
90002760:	20001154 	.word	0x20001154

90002764 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90002764:	b580      	push	{r7, lr}
90002766:	b088      	sub	sp, #32
90002768:	af02      	add	r7, sp, #8
9000276a:	60f8      	str	r0, [r7, #12]
9000276c:	60b9      	str	r1, [r7, #8]
9000276e:	607a      	str	r2, [r7, #4]
90002770:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002772:	4a1b      	ldr	r2, [pc, #108]	@ (900027e0 <BSP_LCD_FillRect+0x7c>)
90002774:	68fb      	ldr	r3, [r7, #12]
90002776:	015b      	lsls	r3, r3, #5
90002778:	4413      	add	r3, r2
9000277a:	3308      	adds	r3, #8
9000277c:	681b      	ldr	r3, [r3, #0]
9000277e:	4a19      	ldr	r2, [pc, #100]	@ (900027e4 <BSP_LCD_FillRect+0x80>)
90002780:	2134      	movs	r1, #52	@ 0x34
90002782:	fb01 f303 	mul.w	r3, r1, r3
90002786:	4413      	add	r3, r2
90002788:	335c      	adds	r3, #92	@ 0x5c
9000278a:	681a      	ldr	r2, [r3, #0]
9000278c:	4914      	ldr	r1, [pc, #80]	@ (900027e0 <BSP_LCD_FillRect+0x7c>)
9000278e:	68fb      	ldr	r3, [r7, #12]
90002790:	015b      	lsls	r3, r3, #5
90002792:	440b      	add	r3, r1
90002794:	3310      	adds	r3, #16
90002796:	681b      	ldr	r3, [r3, #0]
90002798:	4811      	ldr	r0, [pc, #68]	@ (900027e0 <BSP_LCD_FillRect+0x7c>)
9000279a:	68f9      	ldr	r1, [r7, #12]
9000279c:	0149      	lsls	r1, r1, #5
9000279e:	4401      	add	r1, r0
900027a0:	6809      	ldr	r1, [r1, #0]
900027a2:	6878      	ldr	r0, [r7, #4]
900027a4:	fb01 f000 	mul.w	r0, r1, r0
900027a8:	68b9      	ldr	r1, [r7, #8]
900027aa:	4401      	add	r1, r0
900027ac:	fb01 f303 	mul.w	r3, r1, r3
900027b0:	4413      	add	r3, r2
900027b2:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
900027b4:	6979      	ldr	r1, [r7, #20]
900027b6:	4a0a      	ldr	r2, [pc, #40]	@ (900027e0 <BSP_LCD_FillRect+0x7c>)
900027b8:	68fb      	ldr	r3, [r7, #12]
900027ba:	015b      	lsls	r3, r3, #5
900027bc:	4413      	add	r3, r2
900027be:	681a      	ldr	r2, [r3, #0]
900027c0:	683b      	ldr	r3, [r7, #0]
900027c2:	1ad3      	subs	r3, r2, r3
900027c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900027c6:	9201      	str	r2, [sp, #4]
900027c8:	9300      	str	r3, [sp, #0]
900027ca:	6a3b      	ldr	r3, [r7, #32]
900027cc:	683a      	ldr	r2, [r7, #0]
900027ce:	68f8      	ldr	r0, [r7, #12]
900027d0:	f000 f8c0 	bl	90002954 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900027d4:	2300      	movs	r3, #0
}
900027d6:	4618      	mov	r0, r3
900027d8:	3718      	adds	r7, #24
900027da:	46bd      	mov	sp, r7
900027dc:	bd80      	pop	{r7, pc}
900027de:	bf00      	nop
900027e0:	200011fc 	.word	0x200011fc
900027e4:	20001154 	.word	0x20001154

900027e8 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
900027e8:	b480      	push	{r7}
900027ea:	b085      	sub	sp, #20
900027ec:	af00      	add	r7, sp, #0
900027ee:	60f8      	str	r0, [r7, #12]
900027f0:	60b9      	str	r1, [r7, #8]
900027f2:	607a      	str	r2, [r7, #4]
900027f4:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900027f6:	4a28      	ldr	r2, [pc, #160]	@ (90002898 <BSP_LCD_ReadPixel+0xb0>)
900027f8:	68fb      	ldr	r3, [r7, #12]
900027fa:	015b      	lsls	r3, r3, #5
900027fc:	4413      	add	r3, r2
900027fe:	3308      	adds	r3, #8
90002800:	681b      	ldr	r3, [r3, #0]
90002802:	4a26      	ldr	r2, [pc, #152]	@ (9000289c <BSP_LCD_ReadPixel+0xb4>)
90002804:	2134      	movs	r1, #52	@ 0x34
90002806:	fb01 f303 	mul.w	r3, r1, r3
9000280a:	4413      	add	r3, r2
9000280c:	3348      	adds	r3, #72	@ 0x48
9000280e:	681b      	ldr	r3, [r3, #0]
90002810:	2b00      	cmp	r3, #0
90002812:	d11c      	bne.n	9000284e <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002814:	4a20      	ldr	r2, [pc, #128]	@ (90002898 <BSP_LCD_ReadPixel+0xb0>)
90002816:	68fb      	ldr	r3, [r7, #12]
90002818:	015b      	lsls	r3, r3, #5
9000281a:	4413      	add	r3, r2
9000281c:	3308      	adds	r3, #8
9000281e:	681b      	ldr	r3, [r3, #0]
90002820:	4a1e      	ldr	r2, [pc, #120]	@ (9000289c <BSP_LCD_ReadPixel+0xb4>)
90002822:	2134      	movs	r1, #52	@ 0x34
90002824:	fb01 f303 	mul.w	r3, r1, r3
90002828:	4413      	add	r3, r2
9000282a:	335c      	adds	r3, #92	@ 0x5c
9000282c:	681a      	ldr	r2, [r3, #0]
9000282e:	491a      	ldr	r1, [pc, #104]	@ (90002898 <BSP_LCD_ReadPixel+0xb0>)
90002830:	68fb      	ldr	r3, [r7, #12]
90002832:	015b      	lsls	r3, r3, #5
90002834:	440b      	add	r3, r1
90002836:	681b      	ldr	r3, [r3, #0]
90002838:	6879      	ldr	r1, [r7, #4]
9000283a:	fb03 f101 	mul.w	r1, r3, r1
9000283e:	68bb      	ldr	r3, [r7, #8]
90002840:	440b      	add	r3, r1
90002842:	009b      	lsls	r3, r3, #2
90002844:	4413      	add	r3, r2
90002846:	681a      	ldr	r2, [r3, #0]
90002848:	683b      	ldr	r3, [r7, #0]
9000284a:	601a      	str	r2, [r3, #0]
9000284c:	e01d      	b.n	9000288a <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
9000284e:	4a12      	ldr	r2, [pc, #72]	@ (90002898 <BSP_LCD_ReadPixel+0xb0>)
90002850:	68fb      	ldr	r3, [r7, #12]
90002852:	015b      	lsls	r3, r3, #5
90002854:	4413      	add	r3, r2
90002856:	3308      	adds	r3, #8
90002858:	681b      	ldr	r3, [r3, #0]
9000285a:	4a10      	ldr	r2, [pc, #64]	@ (9000289c <BSP_LCD_ReadPixel+0xb4>)
9000285c:	2134      	movs	r1, #52	@ 0x34
9000285e:	fb01 f303 	mul.w	r3, r1, r3
90002862:	4413      	add	r3, r2
90002864:	335c      	adds	r3, #92	@ 0x5c
90002866:	681a      	ldr	r2, [r3, #0]
90002868:	490b      	ldr	r1, [pc, #44]	@ (90002898 <BSP_LCD_ReadPixel+0xb0>)
9000286a:	68fb      	ldr	r3, [r7, #12]
9000286c:	015b      	lsls	r3, r3, #5
9000286e:	440b      	add	r3, r1
90002870:	681b      	ldr	r3, [r3, #0]
90002872:	6879      	ldr	r1, [r7, #4]
90002874:	fb03 f101 	mul.w	r1, r3, r1
90002878:	68bb      	ldr	r3, [r7, #8]
9000287a:	440b      	add	r3, r1
9000287c:	005b      	lsls	r3, r3, #1
9000287e:	4413      	add	r3, r2
90002880:	881b      	ldrh	r3, [r3, #0]
90002882:	b29b      	uxth	r3, r3
90002884:	461a      	mov	r2, r3
90002886:	683b      	ldr	r3, [r7, #0]
90002888:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000288a:	2300      	movs	r3, #0
}
9000288c:	4618      	mov	r0, r3
9000288e:	3714      	adds	r7, #20
90002890:	46bd      	mov	sp, r7
90002892:	f85d 7b04 	ldr.w	r7, [sp], #4
90002896:	4770      	bx	lr
90002898:	200011fc 	.word	0x200011fc
9000289c:	20001154 	.word	0x20001154

900028a0 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
900028a0:	b480      	push	{r7}
900028a2:	b085      	sub	sp, #20
900028a4:	af00      	add	r7, sp, #0
900028a6:	60f8      	str	r0, [r7, #12]
900028a8:	60b9      	str	r1, [r7, #8]
900028aa:	607a      	str	r2, [r7, #4]
900028ac:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900028ae:	4a27      	ldr	r2, [pc, #156]	@ (9000294c <BSP_LCD_WritePixel+0xac>)
900028b0:	68fb      	ldr	r3, [r7, #12]
900028b2:	015b      	lsls	r3, r3, #5
900028b4:	4413      	add	r3, r2
900028b6:	3308      	adds	r3, #8
900028b8:	681b      	ldr	r3, [r3, #0]
900028ba:	4a25      	ldr	r2, [pc, #148]	@ (90002950 <BSP_LCD_WritePixel+0xb0>)
900028bc:	2134      	movs	r1, #52	@ 0x34
900028be:	fb01 f303 	mul.w	r3, r1, r3
900028c2:	4413      	add	r3, r2
900028c4:	3348      	adds	r3, #72	@ 0x48
900028c6:	681b      	ldr	r3, [r3, #0]
900028c8:	2b00      	cmp	r3, #0
900028ca:	d11c      	bne.n	90002906 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
900028cc:	4a1f      	ldr	r2, [pc, #124]	@ (9000294c <BSP_LCD_WritePixel+0xac>)
900028ce:	68fb      	ldr	r3, [r7, #12]
900028d0:	015b      	lsls	r3, r3, #5
900028d2:	4413      	add	r3, r2
900028d4:	3308      	adds	r3, #8
900028d6:	681b      	ldr	r3, [r3, #0]
900028d8:	4a1d      	ldr	r2, [pc, #116]	@ (90002950 <BSP_LCD_WritePixel+0xb0>)
900028da:	2134      	movs	r1, #52	@ 0x34
900028dc:	fb01 f303 	mul.w	r3, r1, r3
900028e0:	4413      	add	r3, r2
900028e2:	335c      	adds	r3, #92	@ 0x5c
900028e4:	681a      	ldr	r2, [r3, #0]
900028e6:	4919      	ldr	r1, [pc, #100]	@ (9000294c <BSP_LCD_WritePixel+0xac>)
900028e8:	68fb      	ldr	r3, [r7, #12]
900028ea:	015b      	lsls	r3, r3, #5
900028ec:	440b      	add	r3, r1
900028ee:	681b      	ldr	r3, [r3, #0]
900028f0:	6879      	ldr	r1, [r7, #4]
900028f2:	fb03 f101 	mul.w	r1, r3, r1
900028f6:	68bb      	ldr	r3, [r7, #8]
900028f8:	440b      	add	r3, r1
900028fa:	009b      	lsls	r3, r3, #2
900028fc:	4413      	add	r3, r2
900028fe:	461a      	mov	r2, r3
90002900:	683b      	ldr	r3, [r7, #0]
90002902:	6013      	str	r3, [r2, #0]
90002904:	e01b      	b.n	9000293e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
90002906:	4a11      	ldr	r2, [pc, #68]	@ (9000294c <BSP_LCD_WritePixel+0xac>)
90002908:	68fb      	ldr	r3, [r7, #12]
9000290a:	015b      	lsls	r3, r3, #5
9000290c:	4413      	add	r3, r2
9000290e:	3308      	adds	r3, #8
90002910:	681b      	ldr	r3, [r3, #0]
90002912:	4a0f      	ldr	r2, [pc, #60]	@ (90002950 <BSP_LCD_WritePixel+0xb0>)
90002914:	2134      	movs	r1, #52	@ 0x34
90002916:	fb01 f303 	mul.w	r3, r1, r3
9000291a:	4413      	add	r3, r2
9000291c:	335c      	adds	r3, #92	@ 0x5c
9000291e:	681a      	ldr	r2, [r3, #0]
90002920:	490a      	ldr	r1, [pc, #40]	@ (9000294c <BSP_LCD_WritePixel+0xac>)
90002922:	68fb      	ldr	r3, [r7, #12]
90002924:	015b      	lsls	r3, r3, #5
90002926:	440b      	add	r3, r1
90002928:	681b      	ldr	r3, [r3, #0]
9000292a:	6879      	ldr	r1, [r7, #4]
9000292c:	fb03 f101 	mul.w	r1, r3, r1
90002930:	68bb      	ldr	r3, [r7, #8]
90002932:	440b      	add	r3, r1
90002934:	005b      	lsls	r3, r3, #1
90002936:	4413      	add	r3, r2
90002938:	683a      	ldr	r2, [r7, #0]
9000293a:	b292      	uxth	r2, r2
9000293c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000293e:	2300      	movs	r3, #0
}
90002940:	4618      	mov	r0, r3
90002942:	3714      	adds	r7, #20
90002944:	46bd      	mov	sp, r7
90002946:	f85d 7b04 	ldr.w	r7, [sp], #4
9000294a:	4770      	bx	lr
9000294c:	200011fc 	.word	0x200011fc
90002950:	20001154 	.word	0x20001154

90002954 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002954:	b580      	push	{r7, lr}
90002956:	b088      	sub	sp, #32
90002958:	af02      	add	r7, sp, #8
9000295a:	60f8      	str	r0, [r7, #12]
9000295c:	60b9      	str	r1, [r7, #8]
9000295e:	607a      	str	r2, [r7, #4]
90002960:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002964:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
90002966:	4a2d      	ldr	r2, [pc, #180]	@ (90002a1c <LL_FillBuffer+0xc8>)
90002968:	68fb      	ldr	r3, [r7, #12]
9000296a:	015b      	lsls	r3, r3, #5
9000296c:	4413      	add	r3, r2
9000296e:	330c      	adds	r3, #12
90002970:	681b      	ldr	r3, [r3, #0]
90002972:	2b02      	cmp	r3, #2
90002974:	d129      	bne.n	900029ca <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002976:	2302      	movs	r3, #2
90002978:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
9000297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000297c:	0adb      	lsrs	r3, r3, #11
9000297e:	f003 021f 	and.w	r2, r3, #31
90002982:	4613      	mov	r3, r2
90002984:	011b      	lsls	r3, r3, #4
90002986:	4413      	add	r3, r2
90002988:	015a      	lsls	r2, r3, #5
9000298a:	1ad3      	subs	r3, r2, r3
9000298c:	3317      	adds	r3, #23
9000298e:	099b      	lsrs	r3, r3, #6
90002990:	0419      	lsls	r1, r3, #16
90002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002994:	095b      	lsrs	r3, r3, #5
90002996:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
9000299a:	4613      	mov	r3, r2
9000299c:	01db      	lsls	r3, r3, #7
9000299e:	4413      	add	r3, r2
900029a0:	005b      	lsls	r3, r3, #1
900029a2:	4413      	add	r3, r2
900029a4:	3321      	adds	r3, #33	@ 0x21
900029a6:	099b      	lsrs	r3, r3, #6
900029a8:	021b      	lsls	r3, r3, #8
900029aa:	4319      	orrs	r1, r3
900029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900029ae:	f003 021f 	and.w	r2, r3, #31
900029b2:	4613      	mov	r3, r2
900029b4:	011b      	lsls	r3, r3, #4
900029b6:	4413      	add	r3, r2
900029b8:	015a      	lsls	r2, r3, #5
900029ba:	1ad3      	subs	r3, r2, r3
900029bc:	3317      	adds	r3, #23
900029be:	099b      	lsrs	r3, r3, #6
900029c0:	430b      	orrs	r3, r1
900029c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
900029c6:	613b      	str	r3, [r7, #16]
    break;
900029c8:	e002      	b.n	900029d0 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
900029ca:	2300      	movs	r3, #0
900029cc:	617b      	str	r3, [r7, #20]
    break;
900029ce:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
900029d0:	4b13      	ldr	r3, [pc, #76]	@ (90002a20 <LL_FillBuffer+0xcc>)
900029d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
900029d6:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900029d8:	4a11      	ldr	r2, [pc, #68]	@ (90002a20 <LL_FillBuffer+0xcc>)
900029da:	697b      	ldr	r3, [r7, #20]
900029dc:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
900029de:	4a10      	ldr	r2, [pc, #64]	@ (90002a20 <LL_FillBuffer+0xcc>)
900029e0:	6a3b      	ldr	r3, [r7, #32]
900029e2:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
900029e4:	4b0e      	ldr	r3, [pc, #56]	@ (90002a20 <LL_FillBuffer+0xcc>)
900029e6:	4a0f      	ldr	r2, [pc, #60]	@ (90002a24 <LL_FillBuffer+0xd0>)
900029e8:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900029ea:	480d      	ldr	r0, [pc, #52]	@ (90002a20 <LL_FillBuffer+0xcc>)
900029ec:	f000 fe50 	bl	90003690 <HAL_DMA2D_Init>
900029f0:	4603      	mov	r3, r0
900029f2:	2b00      	cmp	r3, #0
900029f4:	d10e      	bne.n	90002a14 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900029f6:	68ba      	ldr	r2, [r7, #8]
900029f8:	683b      	ldr	r3, [r7, #0]
900029fa:	9300      	str	r3, [sp, #0]
900029fc:	687b      	ldr	r3, [r7, #4]
900029fe:	6939      	ldr	r1, [r7, #16]
90002a00:	4807      	ldr	r0, [pc, #28]	@ (90002a20 <LL_FillBuffer+0xcc>)
90002a02:	f000 feb3 	bl	9000376c <HAL_DMA2D_Start>
90002a06:	4603      	mov	r3, r0
90002a08:	2b00      	cmp	r3, #0
90002a0a:	d103      	bne.n	90002a14 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002a0c:	2132      	movs	r1, #50	@ 0x32
90002a0e:	4804      	ldr	r0, [pc, #16]	@ (90002a20 <LL_FillBuffer+0xcc>)
90002a10:	f000 fed7 	bl	900037c2 <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002a14:	bf00      	nop
90002a16:	3718      	adds	r7, #24
90002a18:	46bd      	mov	sp, r7
90002a1a:	bd80      	pop	{r7, pc}
90002a1c:	200011fc 	.word	0x200011fc
90002a20:	200010ec 	.word	0x200010ec
90002a24:	52001000 	.word	0x52001000

90002a28 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
90002a28:	b580      	push	{r7, lr}
90002a2a:	b088      	sub	sp, #32
90002a2c:	af02      	add	r7, sp, #8
90002a2e:	60f8      	str	r0, [r7, #12]
90002a30:	60b9      	str	r1, [r7, #8]
90002a32:	607a      	str	r2, [r7, #4]
90002a34:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
90002a36:	4a23      	ldr	r2, [pc, #140]	@ (90002ac4 <LL_ConvertLineToRGB+0x9c>)
90002a38:	68fb      	ldr	r3, [r7, #12]
90002a3a:	015b      	lsls	r3, r3, #5
90002a3c:	4413      	add	r3, r2
90002a3e:	330c      	adds	r3, #12
90002a40:	681b      	ldr	r3, [r3, #0]
90002a42:	2b02      	cmp	r3, #2
90002a44:	d102      	bne.n	90002a4c <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
90002a46:	2302      	movs	r3, #2
90002a48:	617b      	str	r3, [r7, #20]
    break;
90002a4a:	e002      	b.n	90002a52 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002a4c:	2300      	movs	r3, #0
90002a4e:	617b      	str	r3, [r7, #20]
    break;
90002a50:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002a52:	4b1d      	ldr	r3, [pc, #116]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a54:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
90002a58:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
90002a5a:	4a1b      	ldr	r2, [pc, #108]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a5c:	697b      	ldr	r3, [r7, #20]
90002a5e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002a60:	4b19      	ldr	r3, [pc, #100]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a62:	2200      	movs	r2, #0
90002a64:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
90002a66:	4b18      	ldr	r3, [pc, #96]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a68:	2200      	movs	r2, #0
90002a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002a6c:	4b16      	ldr	r3, [pc, #88]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a6e:	22ff      	movs	r2, #255	@ 0xff
90002a70:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002a72:	4a15      	ldr	r2, [pc, #84]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a74:	6a3b      	ldr	r3, [r7, #32]
90002a76:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
90002a78:	4b13      	ldr	r3, [pc, #76]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a7a:	2200      	movs	r2, #0
90002a7c:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002a7e:	4b12      	ldr	r3, [pc, #72]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a80:	4a12      	ldr	r2, [pc, #72]	@ (90002acc <LL_ConvertLineToRGB+0xa4>)
90002a82:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002a84:	4810      	ldr	r0, [pc, #64]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a86:	f000 fe03 	bl	90003690 <HAL_DMA2D_Init>
90002a8a:	4603      	mov	r3, r0
90002a8c:	2b00      	cmp	r3, #0
90002a8e:	d115      	bne.n	90002abc <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002a90:	2101      	movs	r1, #1
90002a92:	480d      	ldr	r0, [pc, #52]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002a94:	f000 ff7e 	bl	90003994 <HAL_DMA2D_ConfigLayer>
90002a98:	4603      	mov	r3, r0
90002a9a:	2b00      	cmp	r3, #0
90002a9c:	d10e      	bne.n	90002abc <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002a9e:	68b9      	ldr	r1, [r7, #8]
90002aa0:	687a      	ldr	r2, [r7, #4]
90002aa2:	2301      	movs	r3, #1
90002aa4:	9300      	str	r3, [sp, #0]
90002aa6:	683b      	ldr	r3, [r7, #0]
90002aa8:	4807      	ldr	r0, [pc, #28]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002aaa:	f000 fe5f 	bl	9000376c <HAL_DMA2D_Start>
90002aae:	4603      	mov	r3, r0
90002ab0:	2b00      	cmp	r3, #0
90002ab2:	d103      	bne.n	90002abc <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002ab4:	2132      	movs	r1, #50	@ 0x32
90002ab6:	4804      	ldr	r0, [pc, #16]	@ (90002ac8 <LL_ConvertLineToRGB+0xa0>)
90002ab8:	f000 fe83 	bl	900037c2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002abc:	bf00      	nop
90002abe:	3718      	adds	r7, #24
90002ac0:	46bd      	mov	sp, r7
90002ac2:	bd80      	pop	{r7, pc}
90002ac4:	200011fc 	.word	0x200011fc
90002ac8:	200010ec 	.word	0x200010ec
90002acc:	52001000 	.word	0x52001000

90002ad0 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002ad0:	b580      	push	{r7, lr}
90002ad2:	b08e      	sub	sp, #56	@ 0x38
90002ad4:	af00      	add	r7, sp, #0
90002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
90002ad8:	687b      	ldr	r3, [r7, #4]
90002ada:	681b      	ldr	r3, [r3, #0]
90002adc:	4a5b      	ldr	r2, [pc, #364]	@ (90002c4c <LTDC_MspInit+0x17c>)
90002ade:	4293      	cmp	r3, r2
90002ae0:	f040 80b0 	bne.w	90002c44 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002ae4:	4b5a      	ldr	r3, [pc, #360]	@ (90002c50 <LTDC_MspInit+0x180>)
90002ae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002aea:	4a59      	ldr	r2, [pc, #356]	@ (90002c50 <LTDC_MspInit+0x180>)
90002aec:	f043 0308 	orr.w	r3, r3, #8
90002af0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
90002af4:	4b56      	ldr	r3, [pc, #344]	@ (90002c50 <LTDC_MspInit+0x180>)
90002af6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
90002afa:	f003 0308 	and.w	r3, r3, #8
90002afe:	623b      	str	r3, [r7, #32]
90002b00:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002b02:	4b53      	ldr	r3, [pc, #332]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b08:	4a51      	ldr	r2, [pc, #324]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b12:	4b4f      	ldr	r3, [pc, #316]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002b1c:	61fb      	str	r3, [r7, #28]
90002b1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002b20:	4b4b      	ldr	r3, [pc, #300]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b26:	4a4a      	ldr	r2, [pc, #296]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b30:	4b47      	ldr	r3, [pc, #284]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002b3a:	61bb      	str	r3, [r7, #24]
90002b3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002b3e:	4b44      	ldr	r3, [pc, #272]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b44:	4a42      	ldr	r2, [pc, #264]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b4e:	4b40      	ldr	r3, [pc, #256]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002b58:	617b      	str	r3, [r7, #20]
90002b5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002b5c:	4b3c      	ldr	r3, [pc, #240]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b62:	4a3b      	ldr	r2, [pc, #236]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b6c:	4b38      	ldr	r3, [pc, #224]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002b76:	613b      	str	r3, [r7, #16]
90002b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002b7a:	4b35      	ldr	r3, [pc, #212]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b80:	4a33      	ldr	r2, [pc, #204]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b82:	f043 0308 	orr.w	r3, r3, #8
90002b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002b8a:	4b31      	ldr	r3, [pc, #196]	@ (90002c50 <LTDC_MspInit+0x180>)
90002b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002b90:	f003 0308 	and.w	r3, r3, #8
90002b94:	60fb      	str	r3, [r7, #12]
90002b96:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002b98:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002b9e:	2302      	movs	r3, #2
90002ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002ba2:	2300      	movs	r3, #0
90002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002ba6:	2302      	movs	r3, #2
90002ba8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002baa:	230e      	movs	r3, #14
90002bac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002bb2:	4619      	mov	r1, r3
90002bb4:	4827      	ldr	r0, [pc, #156]	@ (90002c54 <LTDC_MspInit+0x184>)
90002bb6:	f001 f841 	bl	90003c3c <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002bba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002bc0:	230e      	movs	r3, #14
90002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002bc8:	4619      	mov	r1, r3
90002bca:	4823      	ldr	r0, [pc, #140]	@ (90002c58 <LTDC_MspInit+0x188>)
90002bcc:	f001 f836 	bl	90003c3c <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002bd0:	23ff      	movs	r3, #255	@ 0xff
90002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002bd4:	230e      	movs	r3, #14
90002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002bdc:	4619      	mov	r1, r3
90002bde:	481f      	ldr	r0, [pc, #124]	@ (90002c5c <LTDC_MspInit+0x18c>)
90002be0:	f001 f82c 	bl	90003c3c <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002be4:	f240 2302 	movw	r3, #514	@ 0x202
90002be8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002bea:	2302      	movs	r3, #2
90002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002bee:	2300      	movs	r3, #0
90002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002bf2:	2302      	movs	r3, #2
90002bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002bf6:	230e      	movs	r3, #14
90002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002bfe:	4619      	mov	r1, r3
90002c00:	4817      	ldr	r0, [pc, #92]	@ (90002c60 <LTDC_MspInit+0x190>)
90002c02:	f001 f81b 	bl	90003c3c <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002c06:	2380      	movs	r3, #128	@ 0x80
90002c08:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002c0a:	2301      	movs	r3, #1
90002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002c12:	4619      	mov	r1, r3
90002c14:	4813      	ldr	r0, [pc, #76]	@ (90002c64 <LTDC_MspInit+0x194>)
90002c16:	f001 f811 	bl	90003c3c <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002c1a:	2201      	movs	r2, #1
90002c1c:	2180      	movs	r1, #128	@ 0x80
90002c1e:	4811      	ldr	r0, [pc, #68]	@ (90002c64 <LTDC_MspInit+0x194>)
90002c20:	f001 f9d4 	bl	90003fcc <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002c24:	4b0a      	ldr	r3, [pc, #40]	@ (90002c50 <LTDC_MspInit+0x180>)
90002c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002c2a:	4a09      	ldr	r2, [pc, #36]	@ (90002c50 <LTDC_MspInit+0x180>)
90002c2c:	f043 0308 	orr.w	r3, r3, #8
90002c30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002c34:	4b06      	ldr	r3, [pc, #24]	@ (90002c50 <LTDC_MspInit+0x180>)
90002c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002c3a:	4a05      	ldr	r2, [pc, #20]	@ (90002c50 <LTDC_MspInit+0x180>)
90002c3c:	f023 0308 	bic.w	r3, r3, #8
90002c40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002c44:	bf00      	nop
90002c46:	3738      	adds	r7, #56	@ 0x38
90002c48:	46bd      	mov	sp, r7
90002c4a:	bd80      	pop	{r7, pc}
90002c4c:	50001000 	.word	0x50001000
90002c50:	58024400 	.word	0x58024400
90002c54:	58022000 	.word	0x58022000
90002c58:	58022400 	.word	0x58022400
90002c5c:	58022800 	.word	0x58022800
90002c60:	58021c00 	.word	0x58021c00
90002c64:	58020c00 	.word	0x58020c00

90002c68 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002c68:	b480      	push	{r7}
90002c6a:	b085      	sub	sp, #20
90002c6c:	af00      	add	r7, sp, #0
90002c6e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002c70:	687b      	ldr	r3, [r7, #4]
90002c72:	681b      	ldr	r3, [r3, #0]
90002c74:	4a11      	ldr	r2, [pc, #68]	@ (90002cbc <DMA2D_MspInit+0x54>)
90002c76:	4293      	cmp	r3, r2
90002c78:	d11a      	bne.n	90002cb0 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002c7a:	4b11      	ldr	r3, [pc, #68]	@ (90002cc0 <DMA2D_MspInit+0x58>)
90002c7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002c80:	4a0f      	ldr	r2, [pc, #60]	@ (90002cc0 <DMA2D_MspInit+0x58>)
90002c82:	f043 0310 	orr.w	r3, r3, #16
90002c86:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (90002cc0 <DMA2D_MspInit+0x58>)
90002c8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002c90:	f003 0310 	and.w	r3, r3, #16
90002c94:	60fb      	str	r3, [r7, #12]
90002c96:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002c98:	4b09      	ldr	r3, [pc, #36]	@ (90002cc0 <DMA2D_MspInit+0x58>)
90002c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002c9c:	4a08      	ldr	r2, [pc, #32]	@ (90002cc0 <DMA2D_MspInit+0x58>)
90002c9e:	f043 0310 	orr.w	r3, r3, #16
90002ca2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002ca4:	4b06      	ldr	r3, [pc, #24]	@ (90002cc0 <DMA2D_MspInit+0x58>)
90002ca6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002ca8:	4a05      	ldr	r2, [pc, #20]	@ (90002cc0 <DMA2D_MspInit+0x58>)
90002caa:	f023 0310 	bic.w	r3, r3, #16
90002cae:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002cb0:	bf00      	nop
90002cb2:	3714      	adds	r7, #20
90002cb4:	46bd      	mov	sp, r7
90002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
90002cba:	4770      	bx	lr
90002cbc:	52001000 	.word	0x52001000
90002cc0:	58024400 	.word	0x58024400

90002cc4 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002cc4:	b580      	push	{r7, lr}
90002cc6:	b08a      	sub	sp, #40	@ 0x28
90002cc8:	af00      	add	r7, sp, #0
90002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002ccc:	4b18      	ldr	r3, [pc, #96]	@ (90002d30 <TIMx_PWM_MspInit+0x6c>)
90002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002cd2:	4a17      	ldr	r2, [pc, #92]	@ (90002d30 <TIMx_PWM_MspInit+0x6c>)
90002cd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002cdc:	4b14      	ldr	r3, [pc, #80]	@ (90002d30 <TIMx_PWM_MspInit+0x6c>)
90002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002ce6:	613b      	str	r3, [r7, #16]
90002ce8:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002cea:	4b11      	ldr	r3, [pc, #68]	@ (90002d30 <TIMx_PWM_MspInit+0x6c>)
90002cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002cf0:	4a0f      	ldr	r2, [pc, #60]	@ (90002d30 <TIMx_PWM_MspInit+0x6c>)
90002cf2:	f043 0302 	orr.w	r3, r3, #2
90002cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (90002d30 <TIMx_PWM_MspInit+0x6c>)
90002cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002d00:	f003 0302 	and.w	r3, r3, #2
90002d04:	60fb      	str	r3, [r7, #12]
90002d06:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002d08:	2302      	movs	r3, #2
90002d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002d0c:	2300      	movs	r3, #0
90002d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002d10:	2301      	movs	r3, #1
90002d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002d14:	2303      	movs	r3, #3
90002d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002d18:	2301      	movs	r3, #1
90002d1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002d1c:	f107 0314 	add.w	r3, r7, #20
90002d20:	4619      	mov	r1, r3
90002d22:	4804      	ldr	r0, [pc, #16]	@ (90002d34 <TIMx_PWM_MspInit+0x70>)
90002d24:	f000 ff8a 	bl	90003c3c <HAL_GPIO_Init>
}
90002d28:	bf00      	nop
90002d2a:	3728      	adds	r7, #40	@ 0x28
90002d2c:	46bd      	mov	sp, r7
90002d2e:	bd80      	pop	{r7, pc}
90002d30:	58024400 	.word	0x58024400
90002d34:	58022800 	.word	0x58022800

90002d38 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002d38:	b580      	push	{r7, lr}
90002d3a:	b082      	sub	sp, #8
90002d3c:	af00      	add	r7, sp, #0
90002d3e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002d40:	687b      	ldr	r3, [r7, #4]
90002d42:	4a11      	ldr	r2, [pc, #68]	@ (90002d88 <TIMx_PWM_Init+0x50>)
90002d44:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002d46:	6878      	ldr	r0, [r7, #4]
90002d48:	f006 fe82 	bl	90009a50 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002d4c:	6878      	ldr	r0, [r7, #4]
90002d4e:	f7ff ffb9 	bl	90002cc4 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002d52:	687b      	ldr	r3, [r7, #4]
90002d54:	2204      	movs	r2, #4
90002d56:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002d58:	687b      	ldr	r3, [r7, #4]
90002d5a:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002d5e:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002d60:	687b      	ldr	r3, [r7, #4]
90002d62:	2200      	movs	r2, #0
90002d64:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002d66:	687b      	ldr	r3, [r7, #4]
90002d68:	2200      	movs	r2, #0
90002d6a:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002d6c:	687b      	ldr	r3, [r7, #4]
90002d6e:	2200      	movs	r2, #0
90002d70:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002d72:	687b      	ldr	r3, [r7, #4]
90002d74:	2200      	movs	r2, #0
90002d76:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002d78:	6878      	ldr	r0, [r7, #4]
90002d7a:	f006 fe12 	bl	900099a2 <HAL_TIM_PWM_Init>
}
90002d7e:	bf00      	nop
90002d80:	3708      	adds	r7, #8
90002d82:	46bd      	mov	sp, r7
90002d84:	bd80      	pop	{r7, pc}
90002d86:	bf00      	nop
90002d88:	40010400 	.word	0x40010400

90002d8c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002d8c:	b580      	push	{r7, lr}
90002d8e:	b084      	sub	sp, #16
90002d90:	af00      	add	r7, sp, #0
90002d92:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002d94:	2300      	movs	r3, #0
90002d96:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002d98:	687b      	ldr	r3, [r7, #4]
90002d9a:	2b00      	cmp	r3, #0
90002d9c:	d003      	beq.n	90002da6 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002d9e:	f06f 0301 	mvn.w	r3, #1
90002da2:	60fb      	str	r3, [r7, #12]
90002da4:	e044      	b.n	90002e30 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002da6:	687b      	ldr	r3, [r7, #4]
90002da8:	2234      	movs	r2, #52	@ 0x34
90002daa:	fb02 f303 	mul.w	r3, r2, r3
90002dae:	4a23      	ldr	r2, [pc, #140]	@ (90002e3c <BSP_SDRAM_Init+0xb0>)
90002db0:	4413      	add	r3, r2
90002db2:	4618      	mov	r0, r3
90002db4:	f000 f892 	bl	90002edc <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002db8:	687b      	ldr	r3, [r7, #4]
90002dba:	2234      	movs	r2, #52	@ 0x34
90002dbc:	fb02 f303 	mul.w	r3, r2, r3
90002dc0:	4a1e      	ldr	r2, [pc, #120]	@ (90002e3c <BSP_SDRAM_Init+0xb0>)
90002dc2:	4413      	add	r3, r2
90002dc4:	2210      	movs	r2, #16
90002dc6:	2104      	movs	r1, #4
90002dc8:	4618      	mov	r0, r3
90002dca:	f000 f83b 	bl	90002e44 <MX_SDRAM_BANK2_Init>
90002dce:	4603      	mov	r3, r0
90002dd0:	2b00      	cmp	r3, #0
90002dd2:	d003      	beq.n	90002ddc <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002dd4:	f04f 33ff 	mov.w	r3, #4294967295
90002dd8:	60fb      	str	r3, [r7, #12]
90002dda:	e029      	b.n	90002e30 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002ddc:	4b18      	ldr	r3, [pc, #96]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002dde:	2208      	movs	r2, #8
90002de0:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002de2:	4b17      	ldr	r3, [pc, #92]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002de4:	2203      	movs	r2, #3
90002de6:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002de8:	4b15      	ldr	r3, [pc, #84]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002dea:	f240 6203 	movw	r2, #1539	@ 0x603
90002dee:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002df0:	4b13      	ldr	r3, [pc, #76]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002df2:	2200      	movs	r2, #0
90002df4:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002df6:	4b12      	ldr	r3, [pc, #72]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002df8:	2200      	movs	r2, #0
90002dfa:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002dfc:	4b10      	ldr	r3, [pc, #64]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002dfe:	2230      	movs	r2, #48	@ 0x30
90002e00:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002e02:	4b0f      	ldr	r3, [pc, #60]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002e04:	2200      	movs	r2, #0
90002e06:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002e08:	4b0d      	ldr	r3, [pc, #52]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002e0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002e0e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002e10:	687b      	ldr	r3, [r7, #4]
90002e12:	2234      	movs	r2, #52	@ 0x34
90002e14:	fb02 f303 	mul.w	r3, r2, r3
90002e18:	4a08      	ldr	r2, [pc, #32]	@ (90002e3c <BSP_SDRAM_Init+0xb0>)
90002e1a:	4413      	add	r3, r2
90002e1c:	4908      	ldr	r1, [pc, #32]	@ (90002e40 <BSP_SDRAM_Init+0xb4>)
90002e1e:	4618      	mov	r0, r3
90002e20:	f7fe fbdf 	bl	900015e2 <MT48LC4M32B2_Init>
90002e24:	4603      	mov	r3, r0
90002e26:	2b00      	cmp	r3, #0
90002e28:	d002      	beq.n	90002e30 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002e2a:	f06f 0304 	mvn.w	r3, #4
90002e2e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002e30:	68fb      	ldr	r3, [r7, #12]
}
90002e32:	4618      	mov	r0, r3
90002e34:	3710      	adds	r7, #16
90002e36:	46bd      	mov	sp, r7
90002e38:	bd80      	pop	{r7, pc}
90002e3a:	bf00      	nop
90002e3c:	2000121c 	.word	0x2000121c
90002e40:	20001250 	.word	0x20001250

90002e44 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002e44:	b580      	push	{r7, lr}
90002e46:	b08c      	sub	sp, #48	@ 0x30
90002e48:	af00      	add	r7, sp, #0
90002e4a:	60f8      	str	r0, [r7, #12]
90002e4c:	60b9      	str	r1, [r7, #8]
90002e4e:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002e50:	4b20      	ldr	r3, [pc, #128]	@ (90002ed4 <MX_SDRAM_BANK2_Init+0x90>)
90002e52:	4a21      	ldr	r2, [pc, #132]	@ (90002ed8 <MX_SDRAM_BANK2_Init+0x94>)
90002e54:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002e56:	68fb      	ldr	r3, [r7, #12]
90002e58:	2201      	movs	r2, #1
90002e5a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002e5c:	68fb      	ldr	r3, [r7, #12]
90002e5e:	2200      	movs	r2, #0
90002e60:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002e62:	68fb      	ldr	r3, [r7, #12]
90002e64:	68ba      	ldr	r2, [r7, #8]
90002e66:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002e68:	68fb      	ldr	r3, [r7, #12]
90002e6a:	687a      	ldr	r2, [r7, #4]
90002e6c:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002e6e:	4b19      	ldr	r3, [pc, #100]	@ (90002ed4 <MX_SDRAM_BANK2_Init+0x90>)
90002e70:	2240      	movs	r2, #64	@ 0x40
90002e72:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002e74:	68fb      	ldr	r3, [r7, #12]
90002e76:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002e7a:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002e7c:	68fb      	ldr	r3, [r7, #12]
90002e7e:	2200      	movs	r2, #0
90002e80:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002e82:	68fb      	ldr	r3, [r7, #12]
90002e84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002e88:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002e8a:	68fb      	ldr	r3, [r7, #12]
90002e8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002e90:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002e92:	68fb      	ldr	r3, [r7, #12]
90002e94:	2200      	movs	r2, #0
90002e96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002e98:	2302      	movs	r3, #2
90002e9a:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002e9c:	2307      	movs	r3, #7
90002e9e:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002ea0:	2304      	movs	r3, #4
90002ea2:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002ea4:	2307      	movs	r3, #7
90002ea6:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002ea8:	2302      	movs	r3, #2
90002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002eac:	2302      	movs	r3, #2
90002eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002eb0:	2302      	movs	r3, #2
90002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002eb4:	f107 0314 	add.w	r3, r7, #20
90002eb8:	4619      	mov	r1, r3
90002eba:	68f8      	ldr	r0, [r7, #12]
90002ebc:	f006 fcce 	bl	9000985c <HAL_SDRAM_Init>
90002ec0:	4603      	mov	r3, r0
90002ec2:	2b00      	cmp	r3, #0
90002ec4:	d001      	beq.n	90002eca <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002ec6:	2301      	movs	r3, #1
90002ec8:	e000      	b.n	90002ecc <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002eca:	2300      	movs	r3, #0
}
90002ecc:	4618      	mov	r0, r3
90002ece:	3730      	adds	r7, #48	@ 0x30
90002ed0:	46bd      	mov	sp, r7
90002ed2:	bd80      	pop	{r7, pc}
90002ed4:	2000121c 	.word	0x2000121c
90002ed8:	52004140 	.word	0x52004140

90002edc <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002edc:	b580      	push	{r7, lr}
90002ede:	b08e      	sub	sp, #56	@ 0x38
90002ee0:	af00      	add	r7, sp, #0
90002ee2:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002ee4:	4b73      	ldr	r3, [pc, #460]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002ee6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002eea:	4a72      	ldr	r2, [pc, #456]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002eec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002ef0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002ef4:	4b6f      	ldr	r3, [pc, #444]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002ef6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002efe:	623b      	str	r3, [r7, #32]
90002f00:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002f02:	4b6c      	ldr	r3, [pc, #432]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002f08:	4a6a      	ldr	r2, [pc, #424]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f0a:	f043 0301 	orr.w	r3, r3, #1
90002f0e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002f12:	4b68      	ldr	r3, [pc, #416]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002f18:	f003 0301 	and.w	r3, r3, #1
90002f1c:	61fb      	str	r3, [r7, #28]
90002f1e:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002f20:	4b64      	ldr	r3, [pc, #400]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f26:	4a63      	ldr	r2, [pc, #396]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f28:	f043 0308 	orr.w	r3, r3, #8
90002f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f30:	4b60      	ldr	r3, [pc, #384]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f36:	f003 0308 	and.w	r3, r3, #8
90002f3a:	61bb      	str	r3, [r7, #24]
90002f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002f3e:	4b5d      	ldr	r3, [pc, #372]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f44:	4a5b      	ldr	r2, [pc, #364]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f46:	f043 0310 	orr.w	r3, r3, #16
90002f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f4e:	4b59      	ldr	r3, [pc, #356]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f54:	f003 0310 	and.w	r3, r3, #16
90002f58:	617b      	str	r3, [r7, #20]
90002f5a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002f5c:	4b55      	ldr	r3, [pc, #340]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f62:	4a54      	ldr	r2, [pc, #336]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f64:	f043 0320 	orr.w	r3, r3, #32
90002f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f6c:	4b51      	ldr	r3, [pc, #324]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f72:	f003 0320 	and.w	r3, r3, #32
90002f76:	613b      	str	r3, [r7, #16]
90002f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002f7a:	4b4e      	ldr	r3, [pc, #312]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f80:	4a4c      	ldr	r2, [pc, #304]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002f8a:	4b4a      	ldr	r3, [pc, #296]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002f94:	60fb      	str	r3, [r7, #12]
90002f96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002f98:	4b46      	ldr	r3, [pc, #280]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002f9e:	4a45      	ldr	r2, [pc, #276]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002fa8:	4b42      	ldr	r3, [pc, #264]	@ (900030b4 <SDRAM_MspInit+0x1d8>)
90002faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002fb2:	60bb      	str	r3, [r7, #8]
90002fb4:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002fb6:	2302      	movs	r3, #2
90002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002fba:	2301      	movs	r3, #1
90002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002fbe:	2303      	movs	r3, #3
90002fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002fc2:	230c      	movs	r3, #12
90002fc4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002fc6:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002fca:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002fd0:	4619      	mov	r1, r3
90002fd2:	4839      	ldr	r0, [pc, #228]	@ (900030b8 <SDRAM_MspInit+0x1dc>)
90002fd4:	f000 fe32 	bl	90003c3c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002fd8:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002fe2:	4619      	mov	r1, r3
90002fe4:	4835      	ldr	r0, [pc, #212]	@ (900030bc <SDRAM_MspInit+0x1e0>)
90002fe6:	f000 fe29 	bl	90003c3c <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002fea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002fee:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002ff4:	4619      	mov	r1, r3
90002ff6:	4832      	ldr	r0, [pc, #200]	@ (900030c0 <SDRAM_MspInit+0x1e4>)
90002ff8:	f000 fe20 	bl	90003c3c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002ffc:	f248 1333 	movw	r3, #33075	@ 0x8133
90003000:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90003002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003006:	4619      	mov	r1, r3
90003008:	482e      	ldr	r0, [pc, #184]	@ (900030c4 <SDRAM_MspInit+0x1e8>)
9000300a:	f000 fe17 	bl	90003c3c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
9000300e:	23e0      	movs	r3, #224	@ 0xe0
90003010:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90003012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90003016:	4619      	mov	r1, r3
90003018:	482b      	ldr	r0, [pc, #172]	@ (900030c8 <SDRAM_MspInit+0x1ec>)
9000301a:	f000 fe0f 	bl	90003c3c <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000301e:	4b2b      	ldr	r3, [pc, #172]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003020:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90003024:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90003026:	4b29      	ldr	r3, [pc, #164]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
9000302c:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000302e:	4b27      	ldr	r3, [pc, #156]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003030:	2280      	movs	r2, #128	@ 0x80
90003032:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90003034:	4b25      	ldr	r3, [pc, #148]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003036:	2200      	movs	r2, #0
90003038:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
9000303a:	4b24      	ldr	r3, [pc, #144]	@ (900030cc <SDRAM_MspInit+0x1f0>)
9000303c:	f240 2202 	movw	r2, #514	@ 0x202
90003040:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90003042:	4b22      	ldr	r3, [pc, #136]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003044:	f640 0208 	movw	r2, #2056	@ 0x808
90003048:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000304a:	4b20      	ldr	r3, [pc, #128]	@ (900030cc <SDRAM_MspInit+0x1f0>)
9000304c:	2220      	movs	r2, #32
9000304e:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90003050:	4b1e      	ldr	r3, [pc, #120]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003052:	2280      	movs	r2, #128	@ 0x80
90003054:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90003056:	4b1d      	ldr	r3, [pc, #116]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003058:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
9000305c:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
9000305e:	4b1b      	ldr	r3, [pc, #108]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003060:	2200      	movs	r2, #0
90003062:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90003064:	4b19      	ldr	r3, [pc, #100]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003066:	2200      	movs	r2, #0
90003068:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
9000306a:	4b18      	ldr	r3, [pc, #96]	@ (900030cc <SDRAM_MspInit+0x1f0>)
9000306c:	2280      	movs	r2, #128	@ 0x80
9000306e:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90003070:	4b16      	ldr	r3, [pc, #88]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003072:	2200      	movs	r2, #0
90003074:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90003076:	4b15      	ldr	r3, [pc, #84]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003078:	2200      	movs	r2, #0
9000307a:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
9000307c:	4b13      	ldr	r3, [pc, #76]	@ (900030cc <SDRAM_MspInit+0x1f0>)
9000307e:	4a14      	ldr	r2, [pc, #80]	@ (900030d0 <SDRAM_MspInit+0x1f4>)
90003080:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90003082:	4b14      	ldr	r3, [pc, #80]	@ (900030d4 <SDRAM_MspInit+0x1f8>)
90003084:	4a11      	ldr	r2, [pc, #68]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003086:	631a      	str	r2, [r3, #48]	@ 0x30
90003088:	4b10      	ldr	r3, [pc, #64]	@ (900030cc <SDRAM_MspInit+0x1f0>)
9000308a:	4a12      	ldr	r2, [pc, #72]	@ (900030d4 <SDRAM_MspInit+0x1f8>)
9000308c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
9000308e:	480f      	ldr	r0, [pc, #60]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003090:	f003 fce2 	bl	90006a58 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90003094:	480d      	ldr	r0, [pc, #52]	@ (900030cc <SDRAM_MspInit+0x1f0>)
90003096:	f003 fc93 	bl	900069c0 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
9000309a:	2200      	movs	r2, #0
9000309c:	210f      	movs	r1, #15
9000309e:	207a      	movs	r0, #122	@ 0x7a
900030a0:	f000 fa49 	bl	90003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
900030a4:	207a      	movs	r0, #122	@ 0x7a
900030a6:	f000 fa60 	bl	9000356a <HAL_NVIC_EnableIRQ>
}
900030aa:	bf00      	nop
900030ac:	3738      	adds	r7, #56	@ 0x38
900030ae:	46bd      	mov	sp, r7
900030b0:	bd80      	pop	{r7, pc}
900030b2:	bf00      	nop
900030b4:	58024400 	.word	0x58024400
900030b8:	58020c00 	.word	0x58020c00
900030bc:	58021000 	.word	0x58021000
900030c0:	58021400 	.word	0x58021400
900030c4:	58021800 	.word	0x58021800
900030c8:	58021c00 	.word	0x58021c00
900030cc:	20001270 	.word	0x20001270
900030d0:	52000040 	.word	0x52000040
900030d4:	2000121c 	.word	0x2000121c

900030d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
900030d8:	b480      	push	{r7}
900030da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900030dc:	4b29      	ldr	r3, [pc, #164]	@ (90003184 <SystemInit+0xac>)
900030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
900030e2:	4a28      	ldr	r2, [pc, #160]	@ (90003184 <SystemInit+0xac>)
900030e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
900030e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
900030ec:	4b26      	ldr	r3, [pc, #152]	@ (90003188 <SystemInit+0xb0>)
900030ee:	681b      	ldr	r3, [r3, #0]
900030f0:	4a25      	ldr	r2, [pc, #148]	@ (90003188 <SystemInit+0xb0>)
900030f2:	f043 0301 	orr.w	r3, r3, #1
900030f6:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900030f8:	4b23      	ldr	r3, [pc, #140]	@ (90003188 <SystemInit+0xb0>)
900030fa:	2200      	movs	r2, #0
900030fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900030fe:	4b22      	ldr	r3, [pc, #136]	@ (90003188 <SystemInit+0xb0>)
90003100:	681a      	ldr	r2, [r3, #0]
90003102:	4921      	ldr	r1, [pc, #132]	@ (90003188 <SystemInit+0xb0>)
90003104:	4b21      	ldr	r3, [pc, #132]	@ (9000318c <SystemInit+0xb4>)
90003106:	4013      	ands	r3, r2
90003108:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
9000310a:	4b1f      	ldr	r3, [pc, #124]	@ (90003188 <SystemInit+0xb0>)
9000310c:	2200      	movs	r2, #0
9000310e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003110:	4b1d      	ldr	r3, [pc, #116]	@ (90003188 <SystemInit+0xb0>)
90003112:	2200      	movs	r2, #0
90003114:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90003116:	4b1c      	ldr	r3, [pc, #112]	@ (90003188 <SystemInit+0xb0>)
90003118:	2200      	movs	r2, #0
9000311a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
9000311c:	4b1a      	ldr	r3, [pc, #104]	@ (90003188 <SystemInit+0xb0>)
9000311e:	2200      	movs	r2, #0
90003120:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90003122:	4b19      	ldr	r3, [pc, #100]	@ (90003188 <SystemInit+0xb0>)
90003124:	2200      	movs	r2, #0
90003126:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90003128:	4b17      	ldr	r3, [pc, #92]	@ (90003188 <SystemInit+0xb0>)
9000312a:	2200      	movs	r2, #0
9000312c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
9000312e:	4b16      	ldr	r3, [pc, #88]	@ (90003188 <SystemInit+0xb0>)
90003130:	2200      	movs	r2, #0
90003132:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90003134:	4b14      	ldr	r3, [pc, #80]	@ (90003188 <SystemInit+0xb0>)
90003136:	2200      	movs	r2, #0
90003138:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
9000313a:	4b13      	ldr	r3, [pc, #76]	@ (90003188 <SystemInit+0xb0>)
9000313c:	2200      	movs	r2, #0
9000313e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90003140:	4b11      	ldr	r3, [pc, #68]	@ (90003188 <SystemInit+0xb0>)
90003142:	2200      	movs	r2, #0
90003144:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90003146:	4b10      	ldr	r3, [pc, #64]	@ (90003188 <SystemInit+0xb0>)
90003148:	2200      	movs	r2, #0
9000314a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
9000314c:	4b0e      	ldr	r3, [pc, #56]	@ (90003188 <SystemInit+0xb0>)
9000314e:	681b      	ldr	r3, [r3, #0]
90003150:	4a0d      	ldr	r2, [pc, #52]	@ (90003188 <SystemInit+0xb0>)
90003152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90003156:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90003158:	4b0b      	ldr	r3, [pc, #44]	@ (90003188 <SystemInit+0xb0>)
9000315a:	2200      	movs	r2, #0
9000315c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000315e:	4b0c      	ldr	r3, [pc, #48]	@ (90003190 <SystemInit+0xb8>)
90003160:	681a      	ldr	r2, [r3, #0]
90003162:	4b0c      	ldr	r3, [pc, #48]	@ (90003194 <SystemInit+0xbc>)
90003164:	4013      	ands	r3, r2
90003166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000316a:	d202      	bcs.n	90003172 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
9000316c:	4b0a      	ldr	r3, [pc, #40]	@ (90003198 <SystemInit+0xc0>)
9000316e:	2201      	movs	r2, #1
90003170:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90003172:	4b04      	ldr	r3, [pc, #16]	@ (90003184 <SystemInit+0xac>)
90003174:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
90003178:	609a      	str	r2, [r3, #8]
#endif  


}
9000317a:	bf00      	nop
9000317c:	46bd      	mov	sp, r7
9000317e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003182:	4770      	bx	lr
90003184:	e000ed00 	.word	0xe000ed00
90003188:	58024400 	.word	0x58024400
9000318c:	eaf6ed7f 	.word	0xeaf6ed7f
90003190:	5c001000 	.word	0x5c001000
90003194:	ffff0000 	.word	0xffff0000
90003198:	51008108 	.word	0x51008108

9000319c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
9000319c:	b480      	push	{r7}
9000319e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
900031a0:	4b09      	ldr	r3, [pc, #36]	@ (900031c8 <ExitRun0Mode+0x2c>)
900031a2:	68db      	ldr	r3, [r3, #12]
900031a4:	4a08      	ldr	r2, [pc, #32]	@ (900031c8 <ExitRun0Mode+0x2c>)
900031a6:	f043 0302 	orr.w	r3, r3, #2
900031aa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
900031ac:	bf00      	nop
900031ae:	4b06      	ldr	r3, [pc, #24]	@ (900031c8 <ExitRun0Mode+0x2c>)
900031b0:	685b      	ldr	r3, [r3, #4]
900031b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900031b6:	2b00      	cmp	r3, #0
900031b8:	d0f9      	beq.n	900031ae <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
900031ba:	bf00      	nop
900031bc:	bf00      	nop
900031be:	46bd      	mov	sp, r7
900031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900031c4:	4770      	bx	lr
900031c6:	bf00      	nop
900031c8:	58024800 	.word	0x58024800

900031cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900031cc:	b580      	push	{r7, lr}
900031ce:	b082      	sub	sp, #8
900031d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900031d2:	2003      	movs	r0, #3
900031d4:	f000 f9a4 	bl	90003520 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900031d8:	f004 fb3e 	bl	90007858 <HAL_RCC_GetSysClockFreq>
900031dc:	4602      	mov	r2, r0
900031de:	4b15      	ldr	r3, [pc, #84]	@ (90003234 <HAL_Init+0x68>)
900031e0:	699b      	ldr	r3, [r3, #24]
900031e2:	0a1b      	lsrs	r3, r3, #8
900031e4:	f003 030f 	and.w	r3, r3, #15
900031e8:	4913      	ldr	r1, [pc, #76]	@ (90003238 <HAL_Init+0x6c>)
900031ea:	5ccb      	ldrb	r3, [r1, r3]
900031ec:	f003 031f 	and.w	r3, r3, #31
900031f0:	fa22 f303 	lsr.w	r3, r2, r3
900031f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900031f6:	4b0f      	ldr	r3, [pc, #60]	@ (90003234 <HAL_Init+0x68>)
900031f8:	699b      	ldr	r3, [r3, #24]
900031fa:	f003 030f 	and.w	r3, r3, #15
900031fe:	4a0e      	ldr	r2, [pc, #56]	@ (90003238 <HAL_Init+0x6c>)
90003200:	5cd3      	ldrb	r3, [r2, r3]
90003202:	f003 031f 	and.w	r3, r3, #31
90003206:	687a      	ldr	r2, [r7, #4]
90003208:	fa22 f303 	lsr.w	r3, r2, r3
9000320c:	4a0b      	ldr	r2, [pc, #44]	@ (9000323c <HAL_Init+0x70>)
9000320e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003210:	4a0b      	ldr	r2, [pc, #44]	@ (90003240 <HAL_Init+0x74>)
90003212:	687b      	ldr	r3, [r7, #4]
90003214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90003216:	200f      	movs	r0, #15
90003218:	f000 f81c 	bl	90003254 <HAL_InitTick>
9000321c:	4603      	mov	r3, r0
9000321e:	2b00      	cmp	r3, #0
90003220:	d001      	beq.n	90003226 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90003222:	2301      	movs	r3, #1
90003224:	e002      	b.n	9000322c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90003226:	f000 f80d 	bl	90003244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000322a:	2300      	movs	r3, #0
}
9000322c:	4618      	mov	r0, r3
9000322e:	3708      	adds	r7, #8
90003230:	46bd      	mov	sp, r7
90003232:	bd80      	pop	{r7, pc}
90003234:	58024400 	.word	0x58024400
90003238:	9000d808 	.word	0x9000d808
9000323c:	2000000c 	.word	0x2000000c
90003240:	20000008 	.word	0x20000008

90003244 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90003244:	b480      	push	{r7}
90003246:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90003248:	bf00      	nop
9000324a:	46bd      	mov	sp, r7
9000324c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003250:	4770      	bx	lr
	...

90003254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90003254:	b580      	push	{r7, lr}
90003256:	b082      	sub	sp, #8
90003258:	af00      	add	r7, sp, #0
9000325a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
9000325c:	4b15      	ldr	r3, [pc, #84]	@ (900032b4 <HAL_InitTick+0x60>)
9000325e:	781b      	ldrb	r3, [r3, #0]
90003260:	2b00      	cmp	r3, #0
90003262:	d101      	bne.n	90003268 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90003264:	2301      	movs	r3, #1
90003266:	e021      	b.n	900032ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90003268:	4b13      	ldr	r3, [pc, #76]	@ (900032b8 <HAL_InitTick+0x64>)
9000326a:	681a      	ldr	r2, [r3, #0]
9000326c:	4b11      	ldr	r3, [pc, #68]	@ (900032b4 <HAL_InitTick+0x60>)
9000326e:	781b      	ldrb	r3, [r3, #0]
90003270:	4619      	mov	r1, r3
90003272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90003276:	fbb3 f3f1 	udiv	r3, r3, r1
9000327a:	fbb2 f3f3 	udiv	r3, r2, r3
9000327e:	4618      	mov	r0, r3
90003280:	f000 f981 	bl	90003586 <HAL_SYSTICK_Config>
90003284:	4603      	mov	r3, r0
90003286:	2b00      	cmp	r3, #0
90003288:	d001      	beq.n	9000328e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
9000328a:	2301      	movs	r3, #1
9000328c:	e00e      	b.n	900032ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
9000328e:	687b      	ldr	r3, [r7, #4]
90003290:	2b0f      	cmp	r3, #15
90003292:	d80a      	bhi.n	900032aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90003294:	2200      	movs	r2, #0
90003296:	6879      	ldr	r1, [r7, #4]
90003298:	f04f 30ff 	mov.w	r0, #4294967295
9000329c:	f000 f94b 	bl	90003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
900032a0:	4a06      	ldr	r2, [pc, #24]	@ (900032bc <HAL_InitTick+0x68>)
900032a2:	687b      	ldr	r3, [r7, #4]
900032a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
900032a6:	2300      	movs	r3, #0
900032a8:	e000      	b.n	900032ac <HAL_InitTick+0x58>
    return HAL_ERROR;
900032aa:	2301      	movs	r3, #1
}
900032ac:	4618      	mov	r0, r3
900032ae:	3708      	adds	r7, #8
900032b0:	46bd      	mov	sp, r7
900032b2:	bd80      	pop	{r7, pc}
900032b4:	20000014 	.word	0x20000014
900032b8:	20000008 	.word	0x20000008
900032bc:	20000010 	.word	0x20000010

900032c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
900032c0:	b480      	push	{r7}
900032c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
900032c4:	4b06      	ldr	r3, [pc, #24]	@ (900032e0 <HAL_IncTick+0x20>)
900032c6:	781b      	ldrb	r3, [r3, #0]
900032c8:	461a      	mov	r2, r3
900032ca:	4b06      	ldr	r3, [pc, #24]	@ (900032e4 <HAL_IncTick+0x24>)
900032cc:	681b      	ldr	r3, [r3, #0]
900032ce:	4413      	add	r3, r2
900032d0:	4a04      	ldr	r2, [pc, #16]	@ (900032e4 <HAL_IncTick+0x24>)
900032d2:	6013      	str	r3, [r2, #0]
}
900032d4:	bf00      	nop
900032d6:	46bd      	mov	sp, r7
900032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900032dc:	4770      	bx	lr
900032de:	bf00      	nop
900032e0:	20000014 	.word	0x20000014
900032e4:	200012dc 	.word	0x200012dc

900032e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900032e8:	b480      	push	{r7}
900032ea:	af00      	add	r7, sp, #0
  return uwTick;
900032ec:	4b03      	ldr	r3, [pc, #12]	@ (900032fc <HAL_GetTick+0x14>)
900032ee:	681b      	ldr	r3, [r3, #0]
}
900032f0:	4618      	mov	r0, r3
900032f2:	46bd      	mov	sp, r7
900032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
900032f8:	4770      	bx	lr
900032fa:	bf00      	nop
900032fc:	200012dc 	.word	0x200012dc

90003300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90003300:	b580      	push	{r7, lr}
90003302:	b084      	sub	sp, #16
90003304:	af00      	add	r7, sp, #0
90003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90003308:	f7ff ffee 	bl	900032e8 <HAL_GetTick>
9000330c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
9000330e:	687b      	ldr	r3, [r7, #4]
90003310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90003312:	68fb      	ldr	r3, [r7, #12]
90003314:	f1b3 3fff 	cmp.w	r3, #4294967295
90003318:	d005      	beq.n	90003326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
9000331a:	4b0a      	ldr	r3, [pc, #40]	@ (90003344 <HAL_Delay+0x44>)
9000331c:	781b      	ldrb	r3, [r3, #0]
9000331e:	461a      	mov	r2, r3
90003320:	68fb      	ldr	r3, [r7, #12]
90003322:	4413      	add	r3, r2
90003324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90003326:	bf00      	nop
90003328:	f7ff ffde 	bl	900032e8 <HAL_GetTick>
9000332c:	4602      	mov	r2, r0
9000332e:	68bb      	ldr	r3, [r7, #8]
90003330:	1ad3      	subs	r3, r2, r3
90003332:	68fa      	ldr	r2, [r7, #12]
90003334:	429a      	cmp	r2, r3
90003336:	d8f7      	bhi.n	90003328 <HAL_Delay+0x28>
  {
  }
}
90003338:	bf00      	nop
9000333a:	bf00      	nop
9000333c:	3710      	adds	r7, #16
9000333e:	46bd      	mov	sp, r7
90003340:	bd80      	pop	{r7, pc}
90003342:	bf00      	nop
90003344:	20000014 	.word	0x20000014

90003348 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003348:	b480      	push	{r7}
9000334a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
9000334c:	4b03      	ldr	r3, [pc, #12]	@ (9000335c <HAL_GetREVID+0x14>)
9000334e:	681b      	ldr	r3, [r3, #0]
90003350:	0c1b      	lsrs	r3, r3, #16
}
90003352:	4618      	mov	r0, r3
90003354:	46bd      	mov	sp, r7
90003356:	f85d 7b04 	ldr.w	r7, [sp], #4
9000335a:	4770      	bx	lr
9000335c:	5c001000 	.word	0x5c001000

90003360 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90003360:	b480      	push	{r7}
90003362:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90003364:	4b05      	ldr	r3, [pc, #20]	@ (9000337c <HAL_EnableCompensationCell+0x1c>)
90003366:	6a1b      	ldr	r3, [r3, #32]
90003368:	4a04      	ldr	r2, [pc, #16]	@ (9000337c <HAL_EnableCompensationCell+0x1c>)
9000336a:	f043 0301 	orr.w	r3, r3, #1
9000336e:	6213      	str	r3, [r2, #32]
}
90003370:	bf00      	nop
90003372:	46bd      	mov	sp, r7
90003374:	f85d 7b04 	ldr.w	r7, [sp], #4
90003378:	4770      	bx	lr
9000337a:	bf00      	nop
9000337c:	58000400 	.word	0x58000400

90003380 <__NVIC_SetPriorityGrouping>:
{
90003380:	b480      	push	{r7}
90003382:	b085      	sub	sp, #20
90003384:	af00      	add	r7, sp, #0
90003386:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003388:	687b      	ldr	r3, [r7, #4]
9000338a:	f003 0307 	and.w	r3, r3, #7
9000338e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003390:	4b0b      	ldr	r3, [pc, #44]	@ (900033c0 <__NVIC_SetPriorityGrouping+0x40>)
90003392:	68db      	ldr	r3, [r3, #12]
90003394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90003396:	68ba      	ldr	r2, [r7, #8]
90003398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
9000339c:	4013      	ands	r3, r2
9000339e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900033a0:	68fb      	ldr	r3, [r7, #12]
900033a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900033a4:	68bb      	ldr	r3, [r7, #8]
900033a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900033a8:	4b06      	ldr	r3, [pc, #24]	@ (900033c4 <__NVIC_SetPriorityGrouping+0x44>)
900033aa:	4313      	orrs	r3, r2
900033ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900033ae:	4a04      	ldr	r2, [pc, #16]	@ (900033c0 <__NVIC_SetPriorityGrouping+0x40>)
900033b0:	68bb      	ldr	r3, [r7, #8]
900033b2:	60d3      	str	r3, [r2, #12]
}
900033b4:	bf00      	nop
900033b6:	3714      	adds	r7, #20
900033b8:	46bd      	mov	sp, r7
900033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
900033be:	4770      	bx	lr
900033c0:	e000ed00 	.word	0xe000ed00
900033c4:	05fa0000 	.word	0x05fa0000

900033c8 <__NVIC_GetPriorityGrouping>:
{
900033c8:	b480      	push	{r7}
900033ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900033cc:	4b04      	ldr	r3, [pc, #16]	@ (900033e0 <__NVIC_GetPriorityGrouping+0x18>)
900033ce:	68db      	ldr	r3, [r3, #12]
900033d0:	0a1b      	lsrs	r3, r3, #8
900033d2:	f003 0307 	and.w	r3, r3, #7
}
900033d6:	4618      	mov	r0, r3
900033d8:	46bd      	mov	sp, r7
900033da:	f85d 7b04 	ldr.w	r7, [sp], #4
900033de:	4770      	bx	lr
900033e0:	e000ed00 	.word	0xe000ed00

900033e4 <__NVIC_EnableIRQ>:
{
900033e4:	b480      	push	{r7}
900033e6:	b083      	sub	sp, #12
900033e8:	af00      	add	r7, sp, #0
900033ea:	4603      	mov	r3, r0
900033ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900033ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900033f2:	2b00      	cmp	r3, #0
900033f4:	db0b      	blt.n	9000340e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900033f6:	88fb      	ldrh	r3, [r7, #6]
900033f8:	f003 021f 	and.w	r2, r3, #31
900033fc:	4907      	ldr	r1, [pc, #28]	@ (9000341c <__NVIC_EnableIRQ+0x38>)
900033fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003402:	095b      	lsrs	r3, r3, #5
90003404:	2001      	movs	r0, #1
90003406:	fa00 f202 	lsl.w	r2, r0, r2
9000340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
9000340e:	bf00      	nop
90003410:	370c      	adds	r7, #12
90003412:	46bd      	mov	sp, r7
90003414:	f85d 7b04 	ldr.w	r7, [sp], #4
90003418:	4770      	bx	lr
9000341a:	bf00      	nop
9000341c:	e000e100 	.word	0xe000e100

90003420 <__NVIC_SetPriority>:
{
90003420:	b480      	push	{r7}
90003422:	b083      	sub	sp, #12
90003424:	af00      	add	r7, sp, #0
90003426:	4603      	mov	r3, r0
90003428:	6039      	str	r1, [r7, #0]
9000342a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
9000342c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003430:	2b00      	cmp	r3, #0
90003432:	db0a      	blt.n	9000344a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003434:	683b      	ldr	r3, [r7, #0]
90003436:	b2da      	uxtb	r2, r3
90003438:	490c      	ldr	r1, [pc, #48]	@ (9000346c <__NVIC_SetPriority+0x4c>)
9000343a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000343e:	0112      	lsls	r2, r2, #4
90003440:	b2d2      	uxtb	r2, r2
90003442:	440b      	add	r3, r1
90003444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
90003448:	e00a      	b.n	90003460 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000344a:	683b      	ldr	r3, [r7, #0]
9000344c:	b2da      	uxtb	r2, r3
9000344e:	4908      	ldr	r1, [pc, #32]	@ (90003470 <__NVIC_SetPriority+0x50>)
90003450:	88fb      	ldrh	r3, [r7, #6]
90003452:	f003 030f 	and.w	r3, r3, #15
90003456:	3b04      	subs	r3, #4
90003458:	0112      	lsls	r2, r2, #4
9000345a:	b2d2      	uxtb	r2, r2
9000345c:	440b      	add	r3, r1
9000345e:	761a      	strb	r2, [r3, #24]
}
90003460:	bf00      	nop
90003462:	370c      	adds	r7, #12
90003464:	46bd      	mov	sp, r7
90003466:	f85d 7b04 	ldr.w	r7, [sp], #4
9000346a:	4770      	bx	lr
9000346c:	e000e100 	.word	0xe000e100
90003470:	e000ed00 	.word	0xe000ed00

90003474 <NVIC_EncodePriority>:
{
90003474:	b480      	push	{r7}
90003476:	b089      	sub	sp, #36	@ 0x24
90003478:	af00      	add	r7, sp, #0
9000347a:	60f8      	str	r0, [r7, #12]
9000347c:	60b9      	str	r1, [r7, #8]
9000347e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003480:	68fb      	ldr	r3, [r7, #12]
90003482:	f003 0307 	and.w	r3, r3, #7
90003486:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003488:	69fb      	ldr	r3, [r7, #28]
9000348a:	f1c3 0307 	rsb	r3, r3, #7
9000348e:	2b04      	cmp	r3, #4
90003490:	bf28      	it	cs
90003492:	2304      	movcs	r3, #4
90003494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90003496:	69fb      	ldr	r3, [r7, #28]
90003498:	3304      	adds	r3, #4
9000349a:	2b06      	cmp	r3, #6
9000349c:	d902      	bls.n	900034a4 <NVIC_EncodePriority+0x30>
9000349e:	69fb      	ldr	r3, [r7, #28]
900034a0:	3b03      	subs	r3, #3
900034a2:	e000      	b.n	900034a6 <NVIC_EncodePriority+0x32>
900034a4:	2300      	movs	r3, #0
900034a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900034a8:	f04f 32ff 	mov.w	r2, #4294967295
900034ac:	69bb      	ldr	r3, [r7, #24]
900034ae:	fa02 f303 	lsl.w	r3, r2, r3
900034b2:	43da      	mvns	r2, r3
900034b4:	68bb      	ldr	r3, [r7, #8]
900034b6:	401a      	ands	r2, r3
900034b8:	697b      	ldr	r3, [r7, #20]
900034ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900034bc:	f04f 31ff 	mov.w	r1, #4294967295
900034c0:	697b      	ldr	r3, [r7, #20]
900034c2:	fa01 f303 	lsl.w	r3, r1, r3
900034c6:	43d9      	mvns	r1, r3
900034c8:	687b      	ldr	r3, [r7, #4]
900034ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900034cc:	4313      	orrs	r3, r2
}
900034ce:	4618      	mov	r0, r3
900034d0:	3724      	adds	r7, #36	@ 0x24
900034d2:	46bd      	mov	sp, r7
900034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900034d8:	4770      	bx	lr
	...

900034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900034dc:	b580      	push	{r7, lr}
900034de:	b082      	sub	sp, #8
900034e0:	af00      	add	r7, sp, #0
900034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900034e4:	687b      	ldr	r3, [r7, #4]
900034e6:	3b01      	subs	r3, #1
900034e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
900034ec:	d301      	bcc.n	900034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900034ee:	2301      	movs	r3, #1
900034f0:	e00f      	b.n	90003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900034f2:	4a0a      	ldr	r2, [pc, #40]	@ (9000351c <SysTick_Config+0x40>)
900034f4:	687b      	ldr	r3, [r7, #4]
900034f6:	3b01      	subs	r3, #1
900034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900034fa:	210f      	movs	r1, #15
900034fc:	f04f 30ff 	mov.w	r0, #4294967295
90003500:	f7ff ff8e 	bl	90003420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90003504:	4b05      	ldr	r3, [pc, #20]	@ (9000351c <SysTick_Config+0x40>)
90003506:	2200      	movs	r2, #0
90003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
9000350a:	4b04      	ldr	r3, [pc, #16]	@ (9000351c <SysTick_Config+0x40>)
9000350c:	2207      	movs	r2, #7
9000350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003510:	2300      	movs	r3, #0
}
90003512:	4618      	mov	r0, r3
90003514:	3708      	adds	r7, #8
90003516:	46bd      	mov	sp, r7
90003518:	bd80      	pop	{r7, pc}
9000351a:	bf00      	nop
9000351c:	e000e010 	.word	0xe000e010

90003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003520:	b580      	push	{r7, lr}
90003522:	b082      	sub	sp, #8
90003524:	af00      	add	r7, sp, #0
90003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003528:	6878      	ldr	r0, [r7, #4]
9000352a:	f7ff ff29 	bl	90003380 <__NVIC_SetPriorityGrouping>
}
9000352e:	bf00      	nop
90003530:	3708      	adds	r7, #8
90003532:	46bd      	mov	sp, r7
90003534:	bd80      	pop	{r7, pc}

90003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90003536:	b580      	push	{r7, lr}
90003538:	b086      	sub	sp, #24
9000353a:	af00      	add	r7, sp, #0
9000353c:	4603      	mov	r3, r0
9000353e:	60b9      	str	r1, [r7, #8]
90003540:	607a      	str	r2, [r7, #4]
90003542:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003544:	f7ff ff40 	bl	900033c8 <__NVIC_GetPriorityGrouping>
90003548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
9000354a:	687a      	ldr	r2, [r7, #4]
9000354c:	68b9      	ldr	r1, [r7, #8]
9000354e:	6978      	ldr	r0, [r7, #20]
90003550:	f7ff ff90 	bl	90003474 <NVIC_EncodePriority>
90003554:	4602      	mov	r2, r0
90003556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
9000355a:	4611      	mov	r1, r2
9000355c:	4618      	mov	r0, r3
9000355e:	f7ff ff5f 	bl	90003420 <__NVIC_SetPriority>
}
90003562:	bf00      	nop
90003564:	3718      	adds	r7, #24
90003566:	46bd      	mov	sp, r7
90003568:	bd80      	pop	{r7, pc}

9000356a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
9000356a:	b580      	push	{r7, lr}
9000356c:	b082      	sub	sp, #8
9000356e:	af00      	add	r7, sp, #0
90003570:	4603      	mov	r3, r0
90003572:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90003574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003578:	4618      	mov	r0, r3
9000357a:	f7ff ff33 	bl	900033e4 <__NVIC_EnableIRQ>
}
9000357e:	bf00      	nop
90003580:	3708      	adds	r7, #8
90003582:	46bd      	mov	sp, r7
90003584:	bd80      	pop	{r7, pc}

90003586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90003586:	b580      	push	{r7, lr}
90003588:	b082      	sub	sp, #8
9000358a:	af00      	add	r7, sp, #0
9000358c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
9000358e:	6878      	ldr	r0, [r7, #4]
90003590:	f7ff ffa4 	bl	900034dc <SysTick_Config>
90003594:	4603      	mov	r3, r0
}
90003596:	4618      	mov	r0, r3
90003598:	3708      	adds	r7, #8
9000359a:	46bd      	mov	sp, r7
9000359c:	bd80      	pop	{r7, pc}
	...

900035a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
900035a0:	b480      	push	{r7}
900035a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900035a4:	f3bf 8f5f 	dmb	sy
}
900035a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900035aa:	4b07      	ldr	r3, [pc, #28]	@ (900035c8 <HAL_MPU_Disable+0x28>)
900035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900035ae:	4a06      	ldr	r2, [pc, #24]	@ (900035c8 <HAL_MPU_Disable+0x28>)
900035b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900035b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900035b6:	4b05      	ldr	r3, [pc, #20]	@ (900035cc <HAL_MPU_Disable+0x2c>)
900035b8:	2200      	movs	r2, #0
900035ba:	605a      	str	r2, [r3, #4]
}
900035bc:	bf00      	nop
900035be:	46bd      	mov	sp, r7
900035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900035c4:	4770      	bx	lr
900035c6:	bf00      	nop
900035c8:	e000ed00 	.word	0xe000ed00
900035cc:	e000ed90 	.word	0xe000ed90

900035d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900035d0:	b480      	push	{r7}
900035d2:	b083      	sub	sp, #12
900035d4:	af00      	add	r7, sp, #0
900035d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900035d8:	4a0b      	ldr	r2, [pc, #44]	@ (90003608 <HAL_MPU_Enable+0x38>)
900035da:	687b      	ldr	r3, [r7, #4]
900035dc:	f043 0301 	orr.w	r3, r3, #1
900035e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900035e2:	4b0a      	ldr	r3, [pc, #40]	@ (9000360c <HAL_MPU_Enable+0x3c>)
900035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900035e6:	4a09      	ldr	r2, [pc, #36]	@ (9000360c <HAL_MPU_Enable+0x3c>)
900035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900035ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900035ee:	f3bf 8f4f 	dsb	sy
}
900035f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900035f4:	f3bf 8f6f 	isb	sy
}
900035f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900035fa:	bf00      	nop
900035fc:	370c      	adds	r7, #12
900035fe:	46bd      	mov	sp, r7
90003600:	f85d 7b04 	ldr.w	r7, [sp], #4
90003604:	4770      	bx	lr
90003606:	bf00      	nop
90003608:	e000ed90 	.word	0xe000ed90
9000360c:	e000ed00 	.word	0xe000ed00

90003610 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003610:	b480      	push	{r7}
90003612:	b083      	sub	sp, #12
90003614:	af00      	add	r7, sp, #0
90003616:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003618:	687b      	ldr	r3, [r7, #4]
9000361a:	785a      	ldrb	r2, [r3, #1]
9000361c:	4b1b      	ldr	r3, [pc, #108]	@ (9000368c <HAL_MPU_ConfigRegion+0x7c>)
9000361e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003620:	4b1a      	ldr	r3, [pc, #104]	@ (9000368c <HAL_MPU_ConfigRegion+0x7c>)
90003622:	691b      	ldr	r3, [r3, #16]
90003624:	4a19      	ldr	r2, [pc, #100]	@ (9000368c <HAL_MPU_ConfigRegion+0x7c>)
90003626:	f023 0301 	bic.w	r3, r3, #1
9000362a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
9000362c:	4a17      	ldr	r2, [pc, #92]	@ (9000368c <HAL_MPU_ConfigRegion+0x7c>)
9000362e:	687b      	ldr	r3, [r7, #4]
90003630:	685b      	ldr	r3, [r3, #4]
90003632:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003634:	687b      	ldr	r3, [r7, #4]
90003636:	7b1b      	ldrb	r3, [r3, #12]
90003638:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000363a:	687b      	ldr	r3, [r7, #4]
9000363c:	7adb      	ldrb	r3, [r3, #11]
9000363e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003640:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003642:	687b      	ldr	r3, [r7, #4]
90003644:	7a9b      	ldrb	r3, [r3, #10]
90003646:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000364a:	687b      	ldr	r3, [r7, #4]
9000364c:	7b5b      	ldrb	r3, [r3, #13]
9000364e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003650:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003652:	687b      	ldr	r3, [r7, #4]
90003654:	7b9b      	ldrb	r3, [r3, #14]
90003656:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003658:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000365a:	687b      	ldr	r3, [r7, #4]
9000365c:	7bdb      	ldrb	r3, [r3, #15]
9000365e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003660:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003662:	687b      	ldr	r3, [r7, #4]
90003664:	7a5b      	ldrb	r3, [r3, #9]
90003666:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003668:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000366a:	687b      	ldr	r3, [r7, #4]
9000366c:	7a1b      	ldrb	r3, [r3, #8]
9000366e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003670:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90003672:	687a      	ldr	r2, [r7, #4]
90003674:	7812      	ldrb	r2, [r2, #0]
90003676:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003678:	4a04      	ldr	r2, [pc, #16]	@ (9000368c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000367a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000367c:	6113      	str	r3, [r2, #16]
}
9000367e:	bf00      	nop
90003680:	370c      	adds	r7, #12
90003682:	46bd      	mov	sp, r7
90003684:	f85d 7b04 	ldr.w	r7, [sp], #4
90003688:	4770      	bx	lr
9000368a:	bf00      	nop
9000368c:	e000ed90 	.word	0xe000ed90

90003690 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003690:	b580      	push	{r7, lr}
90003692:	b082      	sub	sp, #8
90003694:	af00      	add	r7, sp, #0
90003696:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003698:	687b      	ldr	r3, [r7, #4]
9000369a:	2b00      	cmp	r3, #0
9000369c:	d101      	bne.n	900036a2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
9000369e:	2301      	movs	r3, #1
900036a0:	e04f      	b.n	90003742 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900036a2:	687b      	ldr	r3, [r7, #4]
900036a4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
900036a8:	b2db      	uxtb	r3, r3
900036aa:	2b00      	cmp	r3, #0
900036ac:	d106      	bne.n	900036bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
900036ae:	687b      	ldr	r3, [r7, #4]
900036b0:	2200      	movs	r2, #0
900036b2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900036b6:	6878      	ldr	r0, [r7, #4]
900036b8:	f000 f84e 	bl	90003758 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900036bc:	687b      	ldr	r3, [r7, #4]
900036be:	2202      	movs	r2, #2
900036c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900036c4:	687b      	ldr	r3, [r7, #4]
900036c6:	681b      	ldr	r3, [r3, #0]
900036c8:	681a      	ldr	r2, [r3, #0]
900036ca:	4b20      	ldr	r3, [pc, #128]	@ (9000374c <HAL_DMA2D_Init+0xbc>)
900036cc:	4013      	ands	r3, r2
900036ce:	687a      	ldr	r2, [r7, #4]
900036d0:	6851      	ldr	r1, [r2, #4]
900036d2:	687a      	ldr	r2, [r7, #4]
900036d4:	69d2      	ldr	r2, [r2, #28]
900036d6:	4311      	orrs	r1, r2
900036d8:	687a      	ldr	r2, [r7, #4]
900036da:	6812      	ldr	r2, [r2, #0]
900036dc:	430b      	orrs	r3, r1
900036de:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900036e0:	687b      	ldr	r3, [r7, #4]
900036e2:	681b      	ldr	r3, [r3, #0]
900036e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900036e6:	4b1a      	ldr	r3, [pc, #104]	@ (90003750 <HAL_DMA2D_Init+0xc0>)
900036e8:	4013      	ands	r3, r2
900036ea:	687a      	ldr	r2, [r7, #4]
900036ec:	6891      	ldr	r1, [r2, #8]
900036ee:	687a      	ldr	r2, [r7, #4]
900036f0:	6992      	ldr	r2, [r2, #24]
900036f2:	4311      	orrs	r1, r2
900036f4:	687a      	ldr	r2, [r7, #4]
900036f6:	6812      	ldr	r2, [r2, #0]
900036f8:	430b      	orrs	r3, r1
900036fa:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900036fc:	687b      	ldr	r3, [r7, #4]
900036fe:	681b      	ldr	r3, [r3, #0]
90003700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
90003702:	4b14      	ldr	r3, [pc, #80]	@ (90003754 <HAL_DMA2D_Init+0xc4>)
90003704:	4013      	ands	r3, r2
90003706:	687a      	ldr	r2, [r7, #4]
90003708:	68d1      	ldr	r1, [r2, #12]
9000370a:	687a      	ldr	r2, [r7, #4]
9000370c:	6812      	ldr	r2, [r2, #0]
9000370e:	430b      	orrs	r3, r1
90003710:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90003712:	687b      	ldr	r3, [r7, #4]
90003714:	681b      	ldr	r3, [r3, #0]
90003716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90003718:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
9000371c:	687b      	ldr	r3, [r7, #4]
9000371e:	691b      	ldr	r3, [r3, #16]
90003720:	051a      	lsls	r2, r3, #20
90003722:	687b      	ldr	r3, [r7, #4]
90003724:	695b      	ldr	r3, [r3, #20]
90003726:	055b      	lsls	r3, r3, #21
90003728:	431a      	orrs	r2, r3
9000372a:	687b      	ldr	r3, [r7, #4]
9000372c:	681b      	ldr	r3, [r3, #0]
9000372e:	430a      	orrs	r2, r1
90003730:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003732:	687b      	ldr	r3, [r7, #4]
90003734:	2200      	movs	r2, #0
90003736:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003738:	687b      	ldr	r3, [r7, #4]
9000373a:	2201      	movs	r2, #1
9000373c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003740:	2300      	movs	r3, #0
}
90003742:	4618      	mov	r0, r3
90003744:	3708      	adds	r7, #8
90003746:	46bd      	mov	sp, r7
90003748:	bd80      	pop	{r7, pc}
9000374a:	bf00      	nop
9000374c:	fff8ffbf 	.word	0xfff8ffbf
90003750:	fffffef8 	.word	0xfffffef8
90003754:	ffff0000 	.word	0xffff0000

90003758 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003758:	b480      	push	{r7}
9000375a:	b083      	sub	sp, #12
9000375c:	af00      	add	r7, sp, #0
9000375e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003760:	bf00      	nop
90003762:	370c      	adds	r7, #12
90003764:	46bd      	mov	sp, r7
90003766:	f85d 7b04 	ldr.w	r7, [sp], #4
9000376a:	4770      	bx	lr

9000376c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
9000376c:	b580      	push	{r7, lr}
9000376e:	b086      	sub	sp, #24
90003770:	af02      	add	r7, sp, #8
90003772:	60f8      	str	r0, [r7, #12]
90003774:	60b9      	str	r1, [r7, #8]
90003776:	607a      	str	r2, [r7, #4]
90003778:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000377a:	68fb      	ldr	r3, [r7, #12]
9000377c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003780:	2b01      	cmp	r3, #1
90003782:	d101      	bne.n	90003788 <HAL_DMA2D_Start+0x1c>
90003784:	2302      	movs	r3, #2
90003786:	e018      	b.n	900037ba <HAL_DMA2D_Start+0x4e>
90003788:	68fb      	ldr	r3, [r7, #12]
9000378a:	2201      	movs	r2, #1
9000378c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003790:	68fb      	ldr	r3, [r7, #12]
90003792:	2202      	movs	r2, #2
90003794:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003798:	69bb      	ldr	r3, [r7, #24]
9000379a:	9300      	str	r3, [sp, #0]
9000379c:	683b      	ldr	r3, [r7, #0]
9000379e:	687a      	ldr	r2, [r7, #4]
900037a0:	68b9      	ldr	r1, [r7, #8]
900037a2:	68f8      	ldr	r0, [r7, #12]
900037a4:	f000 f9a4 	bl	90003af0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
900037a8:	68fb      	ldr	r3, [r7, #12]
900037aa:	681b      	ldr	r3, [r3, #0]
900037ac:	681a      	ldr	r2, [r3, #0]
900037ae:	68fb      	ldr	r3, [r7, #12]
900037b0:	681b      	ldr	r3, [r3, #0]
900037b2:	f042 0201 	orr.w	r2, r2, #1
900037b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900037b8:	2300      	movs	r3, #0
}
900037ba:	4618      	mov	r0, r3
900037bc:	3710      	adds	r7, #16
900037be:	46bd      	mov	sp, r7
900037c0:	bd80      	pop	{r7, pc}

900037c2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
900037c2:	b580      	push	{r7, lr}
900037c4:	b086      	sub	sp, #24
900037c6:	af00      	add	r7, sp, #0
900037c8:	6078      	str	r0, [r7, #4]
900037ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900037cc:	2300      	movs	r3, #0
900037ce:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900037d0:	687b      	ldr	r3, [r7, #4]
900037d2:	681b      	ldr	r3, [r3, #0]
900037d4:	681b      	ldr	r3, [r3, #0]
900037d6:	f003 0301 	and.w	r3, r3, #1
900037da:	2b00      	cmp	r3, #0
900037dc:	d056      	beq.n	9000388c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900037de:	f7ff fd83 	bl	900032e8 <HAL_GetTick>
900037e2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900037e4:	e04b      	b.n	9000387e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900037e6:	687b      	ldr	r3, [r7, #4]
900037e8:	681b      	ldr	r3, [r3, #0]
900037ea:	685b      	ldr	r3, [r3, #4]
900037ec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900037ee:	68fb      	ldr	r3, [r7, #12]
900037f0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
900037f4:	2b00      	cmp	r3, #0
900037f6:	d023      	beq.n	90003840 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900037f8:	68fb      	ldr	r3, [r7, #12]
900037fa:	f003 0320 	and.w	r3, r3, #32
900037fe:	2b00      	cmp	r3, #0
90003800:	d005      	beq.n	9000380e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003802:	687b      	ldr	r3, [r7, #4]
90003804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003806:	f043 0202 	orr.w	r2, r3, #2
9000380a:	687b      	ldr	r3, [r7, #4]
9000380c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000380e:	68fb      	ldr	r3, [r7, #12]
90003810:	f003 0301 	and.w	r3, r3, #1
90003814:	2b00      	cmp	r3, #0
90003816:	d005      	beq.n	90003824 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003818:	687b      	ldr	r3, [r7, #4]
9000381a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000381c:	f043 0201 	orr.w	r2, r3, #1
90003820:	687b      	ldr	r3, [r7, #4]
90003822:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003824:	687b      	ldr	r3, [r7, #4]
90003826:	681b      	ldr	r3, [r3, #0]
90003828:	2221      	movs	r2, #33	@ 0x21
9000382a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000382c:	687b      	ldr	r3, [r7, #4]
9000382e:	2204      	movs	r2, #4
90003830:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003834:	687b      	ldr	r3, [r7, #4]
90003836:	2200      	movs	r2, #0
90003838:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
9000383c:	2301      	movs	r3, #1
9000383e:	e0a5      	b.n	9000398c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003840:	683b      	ldr	r3, [r7, #0]
90003842:	f1b3 3fff 	cmp.w	r3, #4294967295
90003846:	d01a      	beq.n	9000387e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003848:	f7ff fd4e 	bl	900032e8 <HAL_GetTick>
9000384c:	4602      	mov	r2, r0
9000384e:	697b      	ldr	r3, [r7, #20]
90003850:	1ad3      	subs	r3, r2, r3
90003852:	683a      	ldr	r2, [r7, #0]
90003854:	429a      	cmp	r2, r3
90003856:	d302      	bcc.n	9000385e <HAL_DMA2D_PollForTransfer+0x9c>
90003858:	683b      	ldr	r3, [r7, #0]
9000385a:	2b00      	cmp	r3, #0
9000385c:	d10f      	bne.n	9000387e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000385e:	687b      	ldr	r3, [r7, #4]
90003860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003862:	f043 0220 	orr.w	r2, r3, #32
90003866:	687b      	ldr	r3, [r7, #4]
90003868:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000386a:	687b      	ldr	r3, [r7, #4]
9000386c:	2203      	movs	r2, #3
9000386e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003872:	687b      	ldr	r3, [r7, #4]
90003874:	2200      	movs	r2, #0
90003876:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
9000387a:	2303      	movs	r3, #3
9000387c:	e086      	b.n	9000398c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000387e:	687b      	ldr	r3, [r7, #4]
90003880:	681b      	ldr	r3, [r3, #0]
90003882:	685b      	ldr	r3, [r3, #4]
90003884:	f003 0302 	and.w	r3, r3, #2
90003888:	2b00      	cmp	r3, #0
9000388a:	d0ac      	beq.n	900037e6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
9000388c:	687b      	ldr	r3, [r7, #4]
9000388e:	681b      	ldr	r3, [r3, #0]
90003890:	69db      	ldr	r3, [r3, #28]
90003892:	f003 0320 	and.w	r3, r3, #32
90003896:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003898:	687b      	ldr	r3, [r7, #4]
9000389a:	681b      	ldr	r3, [r3, #0]
9000389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000389e:	f003 0320 	and.w	r3, r3, #32
900038a2:	693a      	ldr	r2, [r7, #16]
900038a4:	4313      	orrs	r3, r2
900038a6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
900038a8:	693b      	ldr	r3, [r7, #16]
900038aa:	2b00      	cmp	r3, #0
900038ac:	d061      	beq.n	90003972 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900038ae:	f7ff fd1b 	bl	900032e8 <HAL_GetTick>
900038b2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900038b4:	e056      	b.n	90003964 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900038b6:	687b      	ldr	r3, [r7, #4]
900038b8:	681b      	ldr	r3, [r3, #0]
900038ba:	685b      	ldr	r3, [r3, #4]
900038bc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900038be:	68fb      	ldr	r3, [r7, #12]
900038c0:	f003 0329 	and.w	r3, r3, #41	@ 0x29
900038c4:	2b00      	cmp	r3, #0
900038c6:	d02e      	beq.n	90003926 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900038c8:	68fb      	ldr	r3, [r7, #12]
900038ca:	f003 0308 	and.w	r3, r3, #8
900038ce:	2b00      	cmp	r3, #0
900038d0:	d005      	beq.n	900038de <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900038d2:	687b      	ldr	r3, [r7, #4]
900038d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900038d6:	f043 0204 	orr.w	r2, r3, #4
900038da:	687b      	ldr	r3, [r7, #4]
900038dc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900038de:	68fb      	ldr	r3, [r7, #12]
900038e0:	f003 0320 	and.w	r3, r3, #32
900038e4:	2b00      	cmp	r3, #0
900038e6:	d005      	beq.n	900038f4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900038e8:	687b      	ldr	r3, [r7, #4]
900038ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900038ec:	f043 0202 	orr.w	r2, r3, #2
900038f0:	687b      	ldr	r3, [r7, #4]
900038f2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900038f4:	68fb      	ldr	r3, [r7, #12]
900038f6:	f003 0301 	and.w	r3, r3, #1
900038fa:	2b00      	cmp	r3, #0
900038fc:	d005      	beq.n	9000390a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900038fe:	687b      	ldr	r3, [r7, #4]
90003900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003902:	f043 0201 	orr.w	r2, r3, #1
90003906:	687b      	ldr	r3, [r7, #4]
90003908:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
9000390a:	687b      	ldr	r3, [r7, #4]
9000390c:	681b      	ldr	r3, [r3, #0]
9000390e:	2229      	movs	r2, #41	@ 0x29
90003910:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003912:	687b      	ldr	r3, [r7, #4]
90003914:	2204      	movs	r2, #4
90003916:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
9000391a:	687b      	ldr	r3, [r7, #4]
9000391c:	2200      	movs	r2, #0
9000391e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003922:	2301      	movs	r3, #1
90003924:	e032      	b.n	9000398c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003926:	683b      	ldr	r3, [r7, #0]
90003928:	f1b3 3fff 	cmp.w	r3, #4294967295
9000392c:	d01a      	beq.n	90003964 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000392e:	f7ff fcdb 	bl	900032e8 <HAL_GetTick>
90003932:	4602      	mov	r2, r0
90003934:	697b      	ldr	r3, [r7, #20]
90003936:	1ad3      	subs	r3, r2, r3
90003938:	683a      	ldr	r2, [r7, #0]
9000393a:	429a      	cmp	r2, r3
9000393c:	d302      	bcc.n	90003944 <HAL_DMA2D_PollForTransfer+0x182>
9000393e:	683b      	ldr	r3, [r7, #0]
90003940:	2b00      	cmp	r3, #0
90003942:	d10f      	bne.n	90003964 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003944:	687b      	ldr	r3, [r7, #4]
90003946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003948:	f043 0220 	orr.w	r2, r3, #32
9000394c:	687b      	ldr	r3, [r7, #4]
9000394e:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003950:	687b      	ldr	r3, [r7, #4]
90003952:	2203      	movs	r2, #3
90003954:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003958:	687b      	ldr	r3, [r7, #4]
9000395a:	2200      	movs	r2, #0
9000395c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003960:	2303      	movs	r3, #3
90003962:	e013      	b.n	9000398c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003964:	687b      	ldr	r3, [r7, #4]
90003966:	681b      	ldr	r3, [r3, #0]
90003968:	685b      	ldr	r3, [r3, #4]
9000396a:	f003 0310 	and.w	r3, r3, #16
9000396e:	2b00      	cmp	r3, #0
90003970:	d0a1      	beq.n	900038b6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003972:	687b      	ldr	r3, [r7, #4]
90003974:	681b      	ldr	r3, [r3, #0]
90003976:	2212      	movs	r2, #18
90003978:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000397a:	687b      	ldr	r3, [r7, #4]
9000397c:	2201      	movs	r2, #1
9000397e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003982:	687b      	ldr	r3, [r7, #4]
90003984:	2200      	movs	r2, #0
90003986:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
9000398a:	2300      	movs	r3, #0
}
9000398c:	4618      	mov	r0, r3
9000398e:	3718      	adds	r7, #24
90003990:	46bd      	mov	sp, r7
90003992:	bd80      	pop	{r7, pc}

90003994 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003994:	b480      	push	{r7}
90003996:	b087      	sub	sp, #28
90003998:	af00      	add	r7, sp, #0
9000399a:	6078      	str	r0, [r7, #4]
9000399c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
9000399e:	687b      	ldr	r3, [r7, #4]
900039a0:	685b      	ldr	r3, [r3, #4]
900039a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
900039a6:	683b      	ldr	r3, [r7, #0]
900039a8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
900039aa:	687b      	ldr	r3, [r7, #4]
900039ac:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900039b0:	2b01      	cmp	r3, #1
900039b2:	d101      	bne.n	900039b8 <HAL_DMA2D_ConfigLayer+0x24>
900039b4:	2302      	movs	r3, #2
900039b6:	e092      	b.n	90003ade <HAL_DMA2D_ConfigLayer+0x14a>
900039b8:	687b      	ldr	r3, [r7, #4]
900039ba:	2201      	movs	r2, #1
900039bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900039c0:	687b      	ldr	r3, [r7, #4]
900039c2:	2202      	movs	r2, #2
900039c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900039c8:	683a      	ldr	r2, [r7, #0]
900039ca:	4613      	mov	r3, r2
900039cc:	00db      	lsls	r3, r3, #3
900039ce:	1a9b      	subs	r3, r3, r2
900039d0:	009b      	lsls	r3, r3, #2
900039d2:	3328      	adds	r3, #40	@ 0x28
900039d4:	687a      	ldr	r2, [r7, #4]
900039d6:	4413      	add	r3, r2
900039d8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900039da:	68fb      	ldr	r3, [r7, #12]
900039dc:	685a      	ldr	r2, [r3, #4]
900039de:	68fb      	ldr	r3, [r7, #12]
900039e0:	689b      	ldr	r3, [r3, #8]
900039e2:	041b      	lsls	r3, r3, #16
900039e4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900039e6:	68fb      	ldr	r3, [r7, #12]
900039e8:	691b      	ldr	r3, [r3, #16]
900039ea:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900039ec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900039ee:	68fb      	ldr	r3, [r7, #12]
900039f0:	695b      	ldr	r3, [r3, #20]
900039f2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900039f4:	4313      	orrs	r3, r2
900039f6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
900039f8:	4b3c      	ldr	r3, [pc, #240]	@ (90003aec <HAL_DMA2D_ConfigLayer+0x158>)
900039fa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900039fc:	68fb      	ldr	r3, [r7, #12]
900039fe:	685b      	ldr	r3, [r3, #4]
90003a00:	2b0a      	cmp	r3, #10
90003a02:	d003      	beq.n	90003a0c <HAL_DMA2D_ConfigLayer+0x78>
90003a04:	68fb      	ldr	r3, [r7, #12]
90003a06:	685b      	ldr	r3, [r3, #4]
90003a08:	2b09      	cmp	r3, #9
90003a0a:	d107      	bne.n	90003a1c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003a0c:	68fb      	ldr	r3, [r7, #12]
90003a0e:	68db      	ldr	r3, [r3, #12]
90003a10:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003a14:	693a      	ldr	r2, [r7, #16]
90003a16:	4313      	orrs	r3, r2
90003a18:	613b      	str	r3, [r7, #16]
90003a1a:	e005      	b.n	90003a28 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003a1c:	68fb      	ldr	r3, [r7, #12]
90003a1e:	68db      	ldr	r3, [r3, #12]
90003a20:	061b      	lsls	r3, r3, #24
90003a22:	693a      	ldr	r2, [r7, #16]
90003a24:	4313      	orrs	r3, r2
90003a26:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003a28:	683b      	ldr	r3, [r7, #0]
90003a2a:	2b00      	cmp	r3, #0
90003a2c:	d120      	bne.n	90003a70 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003a2e:	687b      	ldr	r3, [r7, #4]
90003a30:	681b      	ldr	r3, [r3, #0]
90003a32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003a34:	697b      	ldr	r3, [r7, #20]
90003a36:	43db      	mvns	r3, r3
90003a38:	ea02 0103 	and.w	r1, r2, r3
90003a3c:	687b      	ldr	r3, [r7, #4]
90003a3e:	681b      	ldr	r3, [r3, #0]
90003a40:	693a      	ldr	r2, [r7, #16]
90003a42:	430a      	orrs	r2, r1
90003a44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003a46:	687b      	ldr	r3, [r7, #4]
90003a48:	681b      	ldr	r3, [r3, #0]
90003a4a:	68fa      	ldr	r2, [r7, #12]
90003a4c:	6812      	ldr	r2, [r2, #0]
90003a4e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003a50:	68fb      	ldr	r3, [r7, #12]
90003a52:	685b      	ldr	r3, [r3, #4]
90003a54:	2b0a      	cmp	r3, #10
90003a56:	d003      	beq.n	90003a60 <HAL_DMA2D_ConfigLayer+0xcc>
90003a58:	68fb      	ldr	r3, [r7, #12]
90003a5a:	685b      	ldr	r3, [r3, #4]
90003a5c:	2b09      	cmp	r3, #9
90003a5e:	d135      	bne.n	90003acc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003a60:	68fb      	ldr	r3, [r7, #12]
90003a62:	68da      	ldr	r2, [r3, #12]
90003a64:	687b      	ldr	r3, [r7, #4]
90003a66:	681b      	ldr	r3, [r3, #0]
90003a68:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003a6c:	629a      	str	r2, [r3, #40]	@ 0x28
90003a6e:	e02d      	b.n	90003acc <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003a70:	68fb      	ldr	r3, [r7, #12]
90003a72:	685b      	ldr	r3, [r3, #4]
90003a74:	2b0b      	cmp	r3, #11
90003a76:	d109      	bne.n	90003a8c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003a78:	68fb      	ldr	r3, [r7, #12]
90003a7a:	699b      	ldr	r3, [r3, #24]
90003a7c:	049b      	lsls	r3, r3, #18
90003a7e:	693a      	ldr	r2, [r7, #16]
90003a80:	4313      	orrs	r3, r2
90003a82:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003a84:	697b      	ldr	r3, [r7, #20]
90003a86:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
90003a8a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003a8c:	687b      	ldr	r3, [r7, #4]
90003a8e:	681b      	ldr	r3, [r3, #0]
90003a90:	69da      	ldr	r2, [r3, #28]
90003a92:	697b      	ldr	r3, [r7, #20]
90003a94:	43db      	mvns	r3, r3
90003a96:	ea02 0103 	and.w	r1, r2, r3
90003a9a:	687b      	ldr	r3, [r7, #4]
90003a9c:	681b      	ldr	r3, [r3, #0]
90003a9e:	693a      	ldr	r2, [r7, #16]
90003aa0:	430a      	orrs	r2, r1
90003aa2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003aa4:	687b      	ldr	r3, [r7, #4]
90003aa6:	681b      	ldr	r3, [r3, #0]
90003aa8:	68fa      	ldr	r2, [r7, #12]
90003aaa:	6812      	ldr	r2, [r2, #0]
90003aac:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003aae:	68fb      	ldr	r3, [r7, #12]
90003ab0:	685b      	ldr	r3, [r3, #4]
90003ab2:	2b0a      	cmp	r3, #10
90003ab4:	d003      	beq.n	90003abe <HAL_DMA2D_ConfigLayer+0x12a>
90003ab6:	68fb      	ldr	r3, [r7, #12]
90003ab8:	685b      	ldr	r3, [r3, #4]
90003aba:	2b09      	cmp	r3, #9
90003abc:	d106      	bne.n	90003acc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003abe:	68fb      	ldr	r3, [r7, #12]
90003ac0:	68da      	ldr	r2, [r3, #12]
90003ac2:	687b      	ldr	r3, [r7, #4]
90003ac4:	681b      	ldr	r3, [r3, #0]
90003ac6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003aca:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003acc:	687b      	ldr	r3, [r7, #4]
90003ace:	2201      	movs	r2, #1
90003ad0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003ad4:	687b      	ldr	r3, [r7, #4]
90003ad6:	2200      	movs	r2, #0
90003ad8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
90003adc:	2300      	movs	r3, #0
}
90003ade:	4618      	mov	r0, r3
90003ae0:	371c      	adds	r7, #28
90003ae2:	46bd      	mov	sp, r7
90003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ae8:	4770      	bx	lr
90003aea:	bf00      	nop
90003aec:	ff33000f 	.word	0xff33000f

90003af0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003af0:	b480      	push	{r7}
90003af2:	b08b      	sub	sp, #44	@ 0x2c
90003af4:	af00      	add	r7, sp, #0
90003af6:	60f8      	str	r0, [r7, #12]
90003af8:	60b9      	str	r1, [r7, #8]
90003afa:	607a      	str	r2, [r7, #4]
90003afc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003afe:	68fb      	ldr	r3, [r7, #12]
90003b00:	681b      	ldr	r3, [r3, #0]
90003b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90003b04:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
90003b08:	683b      	ldr	r3, [r7, #0]
90003b0a:	041a      	lsls	r2, r3, #16
90003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003b0e:	431a      	orrs	r2, r3
90003b10:	68fb      	ldr	r3, [r7, #12]
90003b12:	681b      	ldr	r3, [r3, #0]
90003b14:	430a      	orrs	r2, r1
90003b16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003b18:	68fb      	ldr	r3, [r7, #12]
90003b1a:	681b      	ldr	r3, [r3, #0]
90003b1c:	687a      	ldr	r2, [r7, #4]
90003b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003b20:	68fb      	ldr	r3, [r7, #12]
90003b22:	685b      	ldr	r3, [r3, #4]
90003b24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003b28:	d174      	bne.n	90003c14 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003b2a:	68bb      	ldr	r3, [r7, #8]
90003b2c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003b30:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003b32:	68bb      	ldr	r3, [r7, #8]
90003b34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003b38:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003b3a:	68bb      	ldr	r3, [r7, #8]
90003b3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003b40:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003b42:	68bb      	ldr	r3, [r7, #8]
90003b44:	b2db      	uxtb	r3, r3
90003b46:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003b48:	68fb      	ldr	r3, [r7, #12]
90003b4a:	689b      	ldr	r3, [r3, #8]
90003b4c:	2b00      	cmp	r3, #0
90003b4e:	d108      	bne.n	90003b62 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003b50:	69ba      	ldr	r2, [r7, #24]
90003b52:	69fb      	ldr	r3, [r7, #28]
90003b54:	431a      	orrs	r2, r3
90003b56:	6a3b      	ldr	r3, [r7, #32]
90003b58:	4313      	orrs	r3, r2
90003b5a:	697a      	ldr	r2, [r7, #20]
90003b5c:	4313      	orrs	r3, r2
90003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
90003b60:	e053      	b.n	90003c0a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003b62:	68fb      	ldr	r3, [r7, #12]
90003b64:	689b      	ldr	r3, [r3, #8]
90003b66:	2b01      	cmp	r3, #1
90003b68:	d106      	bne.n	90003b78 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003b6a:	69ba      	ldr	r2, [r7, #24]
90003b6c:	69fb      	ldr	r3, [r7, #28]
90003b6e:	4313      	orrs	r3, r2
90003b70:	697a      	ldr	r2, [r7, #20]
90003b72:	4313      	orrs	r3, r2
90003b74:	627b      	str	r3, [r7, #36]	@ 0x24
90003b76:	e048      	b.n	90003c0a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003b78:	68fb      	ldr	r3, [r7, #12]
90003b7a:	689b      	ldr	r3, [r3, #8]
90003b7c:	2b02      	cmp	r3, #2
90003b7e:	d111      	bne.n	90003ba4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003b80:	69fb      	ldr	r3, [r7, #28]
90003b82:	0cdb      	lsrs	r3, r3, #19
90003b84:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003b86:	69bb      	ldr	r3, [r7, #24]
90003b88:	0a9b      	lsrs	r3, r3, #10
90003b8a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003b8c:	697b      	ldr	r3, [r7, #20]
90003b8e:	08db      	lsrs	r3, r3, #3
90003b90:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003b92:	69bb      	ldr	r3, [r7, #24]
90003b94:	015a      	lsls	r2, r3, #5
90003b96:	69fb      	ldr	r3, [r7, #28]
90003b98:	02db      	lsls	r3, r3, #11
90003b9a:	4313      	orrs	r3, r2
90003b9c:	697a      	ldr	r2, [r7, #20]
90003b9e:	4313      	orrs	r3, r2
90003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
90003ba2:	e032      	b.n	90003c0a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003ba4:	68fb      	ldr	r3, [r7, #12]
90003ba6:	689b      	ldr	r3, [r3, #8]
90003ba8:	2b03      	cmp	r3, #3
90003baa:	d117      	bne.n	90003bdc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003bac:	6a3b      	ldr	r3, [r7, #32]
90003bae:	0fdb      	lsrs	r3, r3, #31
90003bb0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003bb2:	69fb      	ldr	r3, [r7, #28]
90003bb4:	0cdb      	lsrs	r3, r3, #19
90003bb6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003bb8:	69bb      	ldr	r3, [r7, #24]
90003bba:	0adb      	lsrs	r3, r3, #11
90003bbc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003bbe:	697b      	ldr	r3, [r7, #20]
90003bc0:	08db      	lsrs	r3, r3, #3
90003bc2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003bc4:	69bb      	ldr	r3, [r7, #24]
90003bc6:	015a      	lsls	r2, r3, #5
90003bc8:	69fb      	ldr	r3, [r7, #28]
90003bca:	029b      	lsls	r3, r3, #10
90003bcc:	431a      	orrs	r2, r3
90003bce:	6a3b      	ldr	r3, [r7, #32]
90003bd0:	03db      	lsls	r3, r3, #15
90003bd2:	4313      	orrs	r3, r2
90003bd4:	697a      	ldr	r2, [r7, #20]
90003bd6:	4313      	orrs	r3, r2
90003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
90003bda:	e016      	b.n	90003c0a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003bdc:	6a3b      	ldr	r3, [r7, #32]
90003bde:	0f1b      	lsrs	r3, r3, #28
90003be0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003be2:	69fb      	ldr	r3, [r7, #28]
90003be4:	0d1b      	lsrs	r3, r3, #20
90003be6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003be8:	69bb      	ldr	r3, [r7, #24]
90003bea:	0b1b      	lsrs	r3, r3, #12
90003bec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003bee:	697b      	ldr	r3, [r7, #20]
90003bf0:	091b      	lsrs	r3, r3, #4
90003bf2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003bf4:	69bb      	ldr	r3, [r7, #24]
90003bf6:	011a      	lsls	r2, r3, #4
90003bf8:	69fb      	ldr	r3, [r7, #28]
90003bfa:	021b      	lsls	r3, r3, #8
90003bfc:	431a      	orrs	r2, r3
90003bfe:	6a3b      	ldr	r3, [r7, #32]
90003c00:	031b      	lsls	r3, r3, #12
90003c02:	4313      	orrs	r3, r2
90003c04:	697a      	ldr	r2, [r7, #20]
90003c06:	4313      	orrs	r3, r2
90003c08:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003c0a:	68fb      	ldr	r3, [r7, #12]
90003c0c:	681b      	ldr	r3, [r3, #0]
90003c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003c10:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003c12:	e00d      	b.n	90003c30 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003c14:	68fb      	ldr	r3, [r7, #12]
90003c16:	685b      	ldr	r3, [r3, #4]
90003c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003c1c:	d104      	bne.n	90003c28 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003c1e:	68fb      	ldr	r3, [r7, #12]
90003c20:	681b      	ldr	r3, [r3, #0]
90003c22:	68ba      	ldr	r2, [r7, #8]
90003c24:	615a      	str	r2, [r3, #20]
}
90003c26:	e003      	b.n	90003c30 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003c28:	68fb      	ldr	r3, [r7, #12]
90003c2a:	681b      	ldr	r3, [r3, #0]
90003c2c:	68ba      	ldr	r2, [r7, #8]
90003c2e:	60da      	str	r2, [r3, #12]
}
90003c30:	bf00      	nop
90003c32:	372c      	adds	r7, #44	@ 0x2c
90003c34:	46bd      	mov	sp, r7
90003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
90003c3a:	4770      	bx	lr

90003c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003c3c:	b480      	push	{r7}
90003c3e:	b089      	sub	sp, #36	@ 0x24
90003c40:	af00      	add	r7, sp, #0
90003c42:	6078      	str	r0, [r7, #4]
90003c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003c46:	2300      	movs	r3, #0
90003c48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003c4a:	4b89      	ldr	r3, [pc, #548]	@ (90003e70 <HAL_GPIO_Init+0x234>)
90003c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003c4e:	e194      	b.n	90003f7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003c50:	683b      	ldr	r3, [r7, #0]
90003c52:	681a      	ldr	r2, [r3, #0]
90003c54:	2101      	movs	r1, #1
90003c56:	69fb      	ldr	r3, [r7, #28]
90003c58:	fa01 f303 	lsl.w	r3, r1, r3
90003c5c:	4013      	ands	r3, r2
90003c5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003c60:	693b      	ldr	r3, [r7, #16]
90003c62:	2b00      	cmp	r3, #0
90003c64:	f000 8186 	beq.w	90003f74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003c68:	683b      	ldr	r3, [r7, #0]
90003c6a:	685b      	ldr	r3, [r3, #4]
90003c6c:	f003 0303 	and.w	r3, r3, #3
90003c70:	2b01      	cmp	r3, #1
90003c72:	d005      	beq.n	90003c80 <HAL_GPIO_Init+0x44>
90003c74:	683b      	ldr	r3, [r7, #0]
90003c76:	685b      	ldr	r3, [r3, #4]
90003c78:	f003 0303 	and.w	r3, r3, #3
90003c7c:	2b02      	cmp	r3, #2
90003c7e:	d130      	bne.n	90003ce2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003c80:	687b      	ldr	r3, [r7, #4]
90003c82:	689b      	ldr	r3, [r3, #8]
90003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003c86:	69fb      	ldr	r3, [r7, #28]
90003c88:	005b      	lsls	r3, r3, #1
90003c8a:	2203      	movs	r2, #3
90003c8c:	fa02 f303 	lsl.w	r3, r2, r3
90003c90:	43db      	mvns	r3, r3
90003c92:	69ba      	ldr	r2, [r7, #24]
90003c94:	4013      	ands	r3, r2
90003c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003c98:	683b      	ldr	r3, [r7, #0]
90003c9a:	68da      	ldr	r2, [r3, #12]
90003c9c:	69fb      	ldr	r3, [r7, #28]
90003c9e:	005b      	lsls	r3, r3, #1
90003ca0:	fa02 f303 	lsl.w	r3, r2, r3
90003ca4:	69ba      	ldr	r2, [r7, #24]
90003ca6:	4313      	orrs	r3, r2
90003ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003caa:	687b      	ldr	r3, [r7, #4]
90003cac:	69ba      	ldr	r2, [r7, #24]
90003cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003cb0:	687b      	ldr	r3, [r7, #4]
90003cb2:	685b      	ldr	r3, [r3, #4]
90003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003cb6:	2201      	movs	r2, #1
90003cb8:	69fb      	ldr	r3, [r7, #28]
90003cba:	fa02 f303 	lsl.w	r3, r2, r3
90003cbe:	43db      	mvns	r3, r3
90003cc0:	69ba      	ldr	r2, [r7, #24]
90003cc2:	4013      	ands	r3, r2
90003cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003cc6:	683b      	ldr	r3, [r7, #0]
90003cc8:	685b      	ldr	r3, [r3, #4]
90003cca:	091b      	lsrs	r3, r3, #4
90003ccc:	f003 0201 	and.w	r2, r3, #1
90003cd0:	69fb      	ldr	r3, [r7, #28]
90003cd2:	fa02 f303 	lsl.w	r3, r2, r3
90003cd6:	69ba      	ldr	r2, [r7, #24]
90003cd8:	4313      	orrs	r3, r2
90003cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003cdc:	687b      	ldr	r3, [r7, #4]
90003cde:	69ba      	ldr	r2, [r7, #24]
90003ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003ce2:	683b      	ldr	r3, [r7, #0]
90003ce4:	685b      	ldr	r3, [r3, #4]
90003ce6:	f003 0303 	and.w	r3, r3, #3
90003cea:	2b03      	cmp	r3, #3
90003cec:	d017      	beq.n	90003d1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003cee:	687b      	ldr	r3, [r7, #4]
90003cf0:	68db      	ldr	r3, [r3, #12]
90003cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003cf4:	69fb      	ldr	r3, [r7, #28]
90003cf6:	005b      	lsls	r3, r3, #1
90003cf8:	2203      	movs	r2, #3
90003cfa:	fa02 f303 	lsl.w	r3, r2, r3
90003cfe:	43db      	mvns	r3, r3
90003d00:	69ba      	ldr	r2, [r7, #24]
90003d02:	4013      	ands	r3, r2
90003d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003d06:	683b      	ldr	r3, [r7, #0]
90003d08:	689a      	ldr	r2, [r3, #8]
90003d0a:	69fb      	ldr	r3, [r7, #28]
90003d0c:	005b      	lsls	r3, r3, #1
90003d0e:	fa02 f303 	lsl.w	r3, r2, r3
90003d12:	69ba      	ldr	r2, [r7, #24]
90003d14:	4313      	orrs	r3, r2
90003d16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003d18:	687b      	ldr	r3, [r7, #4]
90003d1a:	69ba      	ldr	r2, [r7, #24]
90003d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003d1e:	683b      	ldr	r3, [r7, #0]
90003d20:	685b      	ldr	r3, [r3, #4]
90003d22:	f003 0303 	and.w	r3, r3, #3
90003d26:	2b02      	cmp	r3, #2
90003d28:	d123      	bne.n	90003d72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003d2a:	69fb      	ldr	r3, [r7, #28]
90003d2c:	08da      	lsrs	r2, r3, #3
90003d2e:	687b      	ldr	r3, [r7, #4]
90003d30:	3208      	adds	r2, #8
90003d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003d38:	69fb      	ldr	r3, [r7, #28]
90003d3a:	f003 0307 	and.w	r3, r3, #7
90003d3e:	009b      	lsls	r3, r3, #2
90003d40:	220f      	movs	r2, #15
90003d42:	fa02 f303 	lsl.w	r3, r2, r3
90003d46:	43db      	mvns	r3, r3
90003d48:	69ba      	ldr	r2, [r7, #24]
90003d4a:	4013      	ands	r3, r2
90003d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003d4e:	683b      	ldr	r3, [r7, #0]
90003d50:	691a      	ldr	r2, [r3, #16]
90003d52:	69fb      	ldr	r3, [r7, #28]
90003d54:	f003 0307 	and.w	r3, r3, #7
90003d58:	009b      	lsls	r3, r3, #2
90003d5a:	fa02 f303 	lsl.w	r3, r2, r3
90003d5e:	69ba      	ldr	r2, [r7, #24]
90003d60:	4313      	orrs	r3, r2
90003d62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003d64:	69fb      	ldr	r3, [r7, #28]
90003d66:	08da      	lsrs	r2, r3, #3
90003d68:	687b      	ldr	r3, [r7, #4]
90003d6a:	3208      	adds	r2, #8
90003d6c:	69b9      	ldr	r1, [r7, #24]
90003d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003d72:	687b      	ldr	r3, [r7, #4]
90003d74:	681b      	ldr	r3, [r3, #0]
90003d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003d78:	69fb      	ldr	r3, [r7, #28]
90003d7a:	005b      	lsls	r3, r3, #1
90003d7c:	2203      	movs	r2, #3
90003d7e:	fa02 f303 	lsl.w	r3, r2, r3
90003d82:	43db      	mvns	r3, r3
90003d84:	69ba      	ldr	r2, [r7, #24]
90003d86:	4013      	ands	r3, r2
90003d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003d8a:	683b      	ldr	r3, [r7, #0]
90003d8c:	685b      	ldr	r3, [r3, #4]
90003d8e:	f003 0203 	and.w	r2, r3, #3
90003d92:	69fb      	ldr	r3, [r7, #28]
90003d94:	005b      	lsls	r3, r3, #1
90003d96:	fa02 f303 	lsl.w	r3, r2, r3
90003d9a:	69ba      	ldr	r2, [r7, #24]
90003d9c:	4313      	orrs	r3, r2
90003d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003da0:	687b      	ldr	r3, [r7, #4]
90003da2:	69ba      	ldr	r2, [r7, #24]
90003da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003da6:	683b      	ldr	r3, [r7, #0]
90003da8:	685b      	ldr	r3, [r3, #4]
90003daa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003dae:	2b00      	cmp	r3, #0
90003db0:	f000 80e0 	beq.w	90003f74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003db4:	4b2f      	ldr	r3, [pc, #188]	@ (90003e74 <HAL_GPIO_Init+0x238>)
90003db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003dba:	4a2e      	ldr	r2, [pc, #184]	@ (90003e74 <HAL_GPIO_Init+0x238>)
90003dbc:	f043 0302 	orr.w	r3, r3, #2
90003dc0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003dc4:	4b2b      	ldr	r3, [pc, #172]	@ (90003e74 <HAL_GPIO_Init+0x238>)
90003dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003dca:	f003 0302 	and.w	r3, r3, #2
90003dce:	60fb      	str	r3, [r7, #12]
90003dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003dd2:	4a29      	ldr	r2, [pc, #164]	@ (90003e78 <HAL_GPIO_Init+0x23c>)
90003dd4:	69fb      	ldr	r3, [r7, #28]
90003dd6:	089b      	lsrs	r3, r3, #2
90003dd8:	3302      	adds	r3, #2
90003dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003de0:	69fb      	ldr	r3, [r7, #28]
90003de2:	f003 0303 	and.w	r3, r3, #3
90003de6:	009b      	lsls	r3, r3, #2
90003de8:	220f      	movs	r2, #15
90003dea:	fa02 f303 	lsl.w	r3, r2, r3
90003dee:	43db      	mvns	r3, r3
90003df0:	69ba      	ldr	r2, [r7, #24]
90003df2:	4013      	ands	r3, r2
90003df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003df6:	687b      	ldr	r3, [r7, #4]
90003df8:	4a20      	ldr	r2, [pc, #128]	@ (90003e7c <HAL_GPIO_Init+0x240>)
90003dfa:	4293      	cmp	r3, r2
90003dfc:	d052      	beq.n	90003ea4 <HAL_GPIO_Init+0x268>
90003dfe:	687b      	ldr	r3, [r7, #4]
90003e00:	4a1f      	ldr	r2, [pc, #124]	@ (90003e80 <HAL_GPIO_Init+0x244>)
90003e02:	4293      	cmp	r3, r2
90003e04:	d031      	beq.n	90003e6a <HAL_GPIO_Init+0x22e>
90003e06:	687b      	ldr	r3, [r7, #4]
90003e08:	4a1e      	ldr	r2, [pc, #120]	@ (90003e84 <HAL_GPIO_Init+0x248>)
90003e0a:	4293      	cmp	r3, r2
90003e0c:	d02b      	beq.n	90003e66 <HAL_GPIO_Init+0x22a>
90003e0e:	687b      	ldr	r3, [r7, #4]
90003e10:	4a1d      	ldr	r2, [pc, #116]	@ (90003e88 <HAL_GPIO_Init+0x24c>)
90003e12:	4293      	cmp	r3, r2
90003e14:	d025      	beq.n	90003e62 <HAL_GPIO_Init+0x226>
90003e16:	687b      	ldr	r3, [r7, #4]
90003e18:	4a1c      	ldr	r2, [pc, #112]	@ (90003e8c <HAL_GPIO_Init+0x250>)
90003e1a:	4293      	cmp	r3, r2
90003e1c:	d01f      	beq.n	90003e5e <HAL_GPIO_Init+0x222>
90003e1e:	687b      	ldr	r3, [r7, #4]
90003e20:	4a1b      	ldr	r2, [pc, #108]	@ (90003e90 <HAL_GPIO_Init+0x254>)
90003e22:	4293      	cmp	r3, r2
90003e24:	d019      	beq.n	90003e5a <HAL_GPIO_Init+0x21e>
90003e26:	687b      	ldr	r3, [r7, #4]
90003e28:	4a1a      	ldr	r2, [pc, #104]	@ (90003e94 <HAL_GPIO_Init+0x258>)
90003e2a:	4293      	cmp	r3, r2
90003e2c:	d013      	beq.n	90003e56 <HAL_GPIO_Init+0x21a>
90003e2e:	687b      	ldr	r3, [r7, #4]
90003e30:	4a19      	ldr	r2, [pc, #100]	@ (90003e98 <HAL_GPIO_Init+0x25c>)
90003e32:	4293      	cmp	r3, r2
90003e34:	d00d      	beq.n	90003e52 <HAL_GPIO_Init+0x216>
90003e36:	687b      	ldr	r3, [r7, #4]
90003e38:	4a18      	ldr	r2, [pc, #96]	@ (90003e9c <HAL_GPIO_Init+0x260>)
90003e3a:	4293      	cmp	r3, r2
90003e3c:	d007      	beq.n	90003e4e <HAL_GPIO_Init+0x212>
90003e3e:	687b      	ldr	r3, [r7, #4]
90003e40:	4a17      	ldr	r2, [pc, #92]	@ (90003ea0 <HAL_GPIO_Init+0x264>)
90003e42:	4293      	cmp	r3, r2
90003e44:	d101      	bne.n	90003e4a <HAL_GPIO_Init+0x20e>
90003e46:	2309      	movs	r3, #9
90003e48:	e02d      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e4a:	230a      	movs	r3, #10
90003e4c:	e02b      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e4e:	2308      	movs	r3, #8
90003e50:	e029      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e52:	2307      	movs	r3, #7
90003e54:	e027      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e56:	2306      	movs	r3, #6
90003e58:	e025      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e5a:	2305      	movs	r3, #5
90003e5c:	e023      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e5e:	2304      	movs	r3, #4
90003e60:	e021      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e62:	2303      	movs	r3, #3
90003e64:	e01f      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e66:	2302      	movs	r3, #2
90003e68:	e01d      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e6a:	2301      	movs	r3, #1
90003e6c:	e01b      	b.n	90003ea6 <HAL_GPIO_Init+0x26a>
90003e6e:	bf00      	nop
90003e70:	58000080 	.word	0x58000080
90003e74:	58024400 	.word	0x58024400
90003e78:	58000400 	.word	0x58000400
90003e7c:	58020000 	.word	0x58020000
90003e80:	58020400 	.word	0x58020400
90003e84:	58020800 	.word	0x58020800
90003e88:	58020c00 	.word	0x58020c00
90003e8c:	58021000 	.word	0x58021000
90003e90:	58021400 	.word	0x58021400
90003e94:	58021800 	.word	0x58021800
90003e98:	58021c00 	.word	0x58021c00
90003e9c:	58022000 	.word	0x58022000
90003ea0:	58022400 	.word	0x58022400
90003ea4:	2300      	movs	r3, #0
90003ea6:	69fa      	ldr	r2, [r7, #28]
90003ea8:	f002 0203 	and.w	r2, r2, #3
90003eac:	0092      	lsls	r2, r2, #2
90003eae:	4093      	lsls	r3, r2
90003eb0:	69ba      	ldr	r2, [r7, #24]
90003eb2:	4313      	orrs	r3, r2
90003eb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003eb6:	4938      	ldr	r1, [pc, #224]	@ (90003f98 <HAL_GPIO_Init+0x35c>)
90003eb8:	69fb      	ldr	r3, [r7, #28]
90003eba:	089b      	lsrs	r3, r3, #2
90003ebc:	3302      	adds	r3, #2
90003ebe:	69ba      	ldr	r2, [r7, #24]
90003ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003ec8:	681b      	ldr	r3, [r3, #0]
90003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003ecc:	693b      	ldr	r3, [r7, #16]
90003ece:	43db      	mvns	r3, r3
90003ed0:	69ba      	ldr	r2, [r7, #24]
90003ed2:	4013      	ands	r3, r2
90003ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003ed6:	683b      	ldr	r3, [r7, #0]
90003ed8:	685b      	ldr	r3, [r3, #4]
90003eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003ede:	2b00      	cmp	r3, #0
90003ee0:	d003      	beq.n	90003eea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003ee2:	69ba      	ldr	r2, [r7, #24]
90003ee4:	693b      	ldr	r3, [r7, #16]
90003ee6:	4313      	orrs	r3, r2
90003ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003eea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003eee:	69bb      	ldr	r3, [r7, #24]
90003ef0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003ef6:	685b      	ldr	r3, [r3, #4]
90003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003efa:	693b      	ldr	r3, [r7, #16]
90003efc:	43db      	mvns	r3, r3
90003efe:	69ba      	ldr	r2, [r7, #24]
90003f00:	4013      	ands	r3, r2
90003f02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003f04:	683b      	ldr	r3, [r7, #0]
90003f06:	685b      	ldr	r3, [r3, #4]
90003f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003f0c:	2b00      	cmp	r3, #0
90003f0e:	d003      	beq.n	90003f18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003f10:	69ba      	ldr	r2, [r7, #24]
90003f12:	693b      	ldr	r3, [r7, #16]
90003f14:	4313      	orrs	r3, r2
90003f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003f1c:	69bb      	ldr	r3, [r7, #24]
90003f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003f20:	697b      	ldr	r3, [r7, #20]
90003f22:	685b      	ldr	r3, [r3, #4]
90003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003f26:	693b      	ldr	r3, [r7, #16]
90003f28:	43db      	mvns	r3, r3
90003f2a:	69ba      	ldr	r2, [r7, #24]
90003f2c:	4013      	ands	r3, r2
90003f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003f30:	683b      	ldr	r3, [r7, #0]
90003f32:	685b      	ldr	r3, [r3, #4]
90003f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003f38:	2b00      	cmp	r3, #0
90003f3a:	d003      	beq.n	90003f44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003f3c:	69ba      	ldr	r2, [r7, #24]
90003f3e:	693b      	ldr	r3, [r7, #16]
90003f40:	4313      	orrs	r3, r2
90003f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003f44:	697b      	ldr	r3, [r7, #20]
90003f46:	69ba      	ldr	r2, [r7, #24]
90003f48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003f4a:	697b      	ldr	r3, [r7, #20]
90003f4c:	681b      	ldr	r3, [r3, #0]
90003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003f50:	693b      	ldr	r3, [r7, #16]
90003f52:	43db      	mvns	r3, r3
90003f54:	69ba      	ldr	r2, [r7, #24]
90003f56:	4013      	ands	r3, r2
90003f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003f5a:	683b      	ldr	r3, [r7, #0]
90003f5c:	685b      	ldr	r3, [r3, #4]
90003f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003f62:	2b00      	cmp	r3, #0
90003f64:	d003      	beq.n	90003f6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003f66:	69ba      	ldr	r2, [r7, #24]
90003f68:	693b      	ldr	r3, [r7, #16]
90003f6a:	4313      	orrs	r3, r2
90003f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003f6e:	697b      	ldr	r3, [r7, #20]
90003f70:	69ba      	ldr	r2, [r7, #24]
90003f72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003f74:	69fb      	ldr	r3, [r7, #28]
90003f76:	3301      	adds	r3, #1
90003f78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003f7a:	683b      	ldr	r3, [r7, #0]
90003f7c:	681a      	ldr	r2, [r3, #0]
90003f7e:	69fb      	ldr	r3, [r7, #28]
90003f80:	fa22 f303 	lsr.w	r3, r2, r3
90003f84:	2b00      	cmp	r3, #0
90003f86:	f47f ae63 	bne.w	90003c50 <HAL_GPIO_Init+0x14>
  }
}
90003f8a:	bf00      	nop
90003f8c:	bf00      	nop
90003f8e:	3724      	adds	r7, #36	@ 0x24
90003f90:	46bd      	mov	sp, r7
90003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f96:	4770      	bx	lr
90003f98:	58000400 	.word	0x58000400

90003f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90003f9c:	b480      	push	{r7}
90003f9e:	b085      	sub	sp, #20
90003fa0:	af00      	add	r7, sp, #0
90003fa2:	6078      	str	r0, [r7, #4]
90003fa4:	460b      	mov	r3, r1
90003fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90003fa8:	687b      	ldr	r3, [r7, #4]
90003faa:	691a      	ldr	r2, [r3, #16]
90003fac:	887b      	ldrh	r3, [r7, #2]
90003fae:	4013      	ands	r3, r2
90003fb0:	2b00      	cmp	r3, #0
90003fb2:	d002      	beq.n	90003fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90003fb4:	2301      	movs	r3, #1
90003fb6:	73fb      	strb	r3, [r7, #15]
90003fb8:	e001      	b.n	90003fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90003fba:	2300      	movs	r3, #0
90003fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
90003fc0:	4618      	mov	r0, r3
90003fc2:	3714      	adds	r7, #20
90003fc4:	46bd      	mov	sp, r7
90003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
90003fca:	4770      	bx	lr

90003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003fcc:	b480      	push	{r7}
90003fce:	b083      	sub	sp, #12
90003fd0:	af00      	add	r7, sp, #0
90003fd2:	6078      	str	r0, [r7, #4]
90003fd4:	460b      	mov	r3, r1
90003fd6:	807b      	strh	r3, [r7, #2]
90003fd8:	4613      	mov	r3, r2
90003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003fdc:	787b      	ldrb	r3, [r7, #1]
90003fde:	2b00      	cmp	r3, #0
90003fe0:	d003      	beq.n	90003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003fe2:	887a      	ldrh	r2, [r7, #2]
90003fe4:	687b      	ldr	r3, [r7, #4]
90003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003fe8:	e003      	b.n	90003ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003fea:	887b      	ldrh	r3, [r7, #2]
90003fec:	041a      	lsls	r2, r3, #16
90003fee:	687b      	ldr	r3, [r7, #4]
90003ff0:	619a      	str	r2, [r3, #24]
}
90003ff2:	bf00      	nop
90003ff4:	370c      	adds	r7, #12
90003ff6:	46bd      	mov	sp, r7
90003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ffc:	4770      	bx	lr

90003ffe <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003ffe:	b580      	push	{r7, lr}
90004000:	b086      	sub	sp, #24
90004002:	af00      	add	r7, sp, #0
90004004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004006:	687b      	ldr	r3, [r7, #4]
90004008:	681b      	ldr	r3, [r3, #0]
9000400a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000400c:	693b      	ldr	r3, [r7, #16]
9000400e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90004010:	687b      	ldr	r3, [r7, #4]
90004012:	681b      	ldr	r3, [r3, #0]
90004014:	4618      	mov	r0, r3
90004016:	f007 f9a5 	bl	9000b364 <USB_GetMode>
9000401a:	4603      	mov	r3, r0
9000401c:	2b01      	cmp	r3, #1
9000401e:	f040 80fb 	bne.w	90004218 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90004022:	687b      	ldr	r3, [r7, #4]
90004024:	681b      	ldr	r3, [r3, #0]
90004026:	4618      	mov	r0, r3
90004028:	f007 f968 	bl	9000b2fc <USB_ReadInterrupts>
9000402c:	4603      	mov	r3, r0
9000402e:	2b00      	cmp	r3, #0
90004030:	f000 80f1 	beq.w	90004216 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90004034:	687b      	ldr	r3, [r7, #4]
90004036:	681b      	ldr	r3, [r3, #0]
90004038:	4618      	mov	r0, r3
9000403a:	f007 f95f 	bl	9000b2fc <USB_ReadInterrupts>
9000403e:	4603      	mov	r3, r0
90004040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90004044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90004048:	d104      	bne.n	90004054 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
9000404a:	687b      	ldr	r3, [r7, #4]
9000404c:	681b      	ldr	r3, [r3, #0]
9000404e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90004052:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90004054:	687b      	ldr	r3, [r7, #4]
90004056:	681b      	ldr	r3, [r3, #0]
90004058:	4618      	mov	r0, r3
9000405a:	f007 f94f 	bl	9000b2fc <USB_ReadInterrupts>
9000405e:	4603      	mov	r3, r0
90004060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90004064:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90004068:	d104      	bne.n	90004074 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
9000406a:	687b      	ldr	r3, [r7, #4]
9000406c:	681b      	ldr	r3, [r3, #0]
9000406e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90004072:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90004074:	687b      	ldr	r3, [r7, #4]
90004076:	681b      	ldr	r3, [r3, #0]
90004078:	4618      	mov	r0, r3
9000407a:	f007 f93f 	bl	9000b2fc <USB_ReadInterrupts>
9000407e:	4603      	mov	r3, r0
90004080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90004084:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90004088:	d104      	bne.n	90004094 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
9000408a:	687b      	ldr	r3, [r7, #4]
9000408c:	681b      	ldr	r3, [r3, #0]
9000408e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90004092:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90004094:	687b      	ldr	r3, [r7, #4]
90004096:	681b      	ldr	r3, [r3, #0]
90004098:	4618      	mov	r0, r3
9000409a:	f007 f92f 	bl	9000b2fc <USB_ReadInterrupts>
9000409e:	4603      	mov	r3, r0
900040a0:	f003 0302 	and.w	r3, r3, #2
900040a4:	2b02      	cmp	r3, #2
900040a6:	d103      	bne.n	900040b0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
900040a8:	687b      	ldr	r3, [r7, #4]
900040aa:	681b      	ldr	r3, [r3, #0]
900040ac:	2202      	movs	r2, #2
900040ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
900040b0:	687b      	ldr	r3, [r7, #4]
900040b2:	681b      	ldr	r3, [r3, #0]
900040b4:	4618      	mov	r0, r3
900040b6:	f007 f921 	bl	9000b2fc <USB_ReadInterrupts>
900040ba:	4603      	mov	r3, r0
900040bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
900040c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900040c4:	d120      	bne.n	90004108 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
900040c6:	687b      	ldr	r3, [r7, #4]
900040c8:	681b      	ldr	r3, [r3, #0]
900040ca:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
900040ce:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
900040d0:	68fb      	ldr	r3, [r7, #12]
900040d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
900040d6:	681b      	ldr	r3, [r3, #0]
900040d8:	f003 0301 	and.w	r3, r3, #1
900040dc:	2b00      	cmp	r3, #0
900040de:	d113      	bne.n	90004108 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
900040e0:	2110      	movs	r1, #16
900040e2:	6938      	ldr	r0, [r7, #16]
900040e4:	f007 f852 	bl	9000b18c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
900040e8:	6938      	ldr	r0, [r7, #16]
900040ea:	f007 f881 	bl	9000b1f0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
900040ee:	687b      	ldr	r3, [r7, #4]
900040f0:	7a5b      	ldrb	r3, [r3, #9]
900040f2:	2b02      	cmp	r3, #2
900040f4:	d105      	bne.n	90004102 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900040f6:	687b      	ldr	r3, [r7, #4]
900040f8:	681b      	ldr	r3, [r3, #0]
900040fa:	2101      	movs	r1, #1
900040fc:	4618      	mov	r0, r3
900040fe:	f007 f93f 	bl	9000b380 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90004102:	6878      	ldr	r0, [r7, #4]
90004104:	f7fd f81e 	bl	90001144 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90004108:	687b      	ldr	r3, [r7, #4]
9000410a:	681b      	ldr	r3, [r3, #0]
9000410c:	4618      	mov	r0, r3
9000410e:	f007 f8f5 	bl	9000b2fc <USB_ReadInterrupts>
90004112:	4603      	mov	r3, r0
90004114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
90004118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
9000411c:	d102      	bne.n	90004124 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
9000411e:	6878      	ldr	r0, [r7, #4]
90004120:	f001 fca1 	bl	90005a66 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90004124:	687b      	ldr	r3, [r7, #4]
90004126:	681b      	ldr	r3, [r3, #0]
90004128:	4618      	mov	r0, r3
9000412a:	f007 f8e7 	bl	9000b2fc <USB_ReadInterrupts>
9000412e:	4603      	mov	r3, r0
90004130:	f003 0308 	and.w	r3, r3, #8
90004134:	2b08      	cmp	r3, #8
90004136:	d106      	bne.n	90004146 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
90004138:	6878      	ldr	r0, [r7, #4]
9000413a:	f7fc ffe7 	bl	9000110c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
9000413e:	687b      	ldr	r3, [r7, #4]
90004140:	681b      	ldr	r3, [r3, #0]
90004142:	2208      	movs	r2, #8
90004144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90004146:	687b      	ldr	r3, [r7, #4]
90004148:	681b      	ldr	r3, [r3, #0]
9000414a:	4618      	mov	r0, r3
9000414c:	f007 f8d6 	bl	9000b2fc <USB_ReadInterrupts>
90004150:	4603      	mov	r3, r0
90004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90004156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000415a:	d139      	bne.n	900041d0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
9000415c:	687b      	ldr	r3, [r7, #4]
9000415e:	681b      	ldr	r3, [r3, #0]
90004160:	4618      	mov	r0, r3
90004162:	f007 f94a 	bl	9000b3fa <USB_HC_ReadInterrupt>
90004166:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004168:	2300      	movs	r3, #0
9000416a:	617b      	str	r3, [r7, #20]
9000416c:	e025      	b.n	900041ba <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
9000416e:	697b      	ldr	r3, [r7, #20]
90004170:	f003 030f 	and.w	r3, r3, #15
90004174:	68ba      	ldr	r2, [r7, #8]
90004176:	fa22 f303 	lsr.w	r3, r2, r3
9000417a:	f003 0301 	and.w	r3, r3, #1
9000417e:	2b00      	cmp	r3, #0
90004180:	d018      	beq.n	900041b4 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90004182:	697b      	ldr	r3, [r7, #20]
90004184:	015a      	lsls	r2, r3, #5
90004186:	68fb      	ldr	r3, [r7, #12]
90004188:	4413      	add	r3, r2
9000418a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000418e:	681b      	ldr	r3, [r3, #0]
90004190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90004194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90004198:	d106      	bne.n	900041a8 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
9000419a:	697b      	ldr	r3, [r7, #20]
9000419c:	b2db      	uxtb	r3, r3
9000419e:	4619      	mov	r1, r3
900041a0:	6878      	ldr	r0, [r7, #4]
900041a2:	f000 f859 	bl	90004258 <HCD_HC_IN_IRQHandler>
900041a6:	e005      	b.n	900041b4 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
900041a8:	697b      	ldr	r3, [r7, #20]
900041aa:	b2db      	uxtb	r3, r3
900041ac:	4619      	mov	r1, r3
900041ae:	6878      	ldr	r0, [r7, #4]
900041b0:	f000 febb 	bl	90004f2a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900041b4:	697b      	ldr	r3, [r7, #20]
900041b6:	3301      	adds	r3, #1
900041b8:	617b      	str	r3, [r7, #20]
900041ba:	687b      	ldr	r3, [r7, #4]
900041bc:	795b      	ldrb	r3, [r3, #5]
900041be:	461a      	mov	r2, r3
900041c0:	697b      	ldr	r3, [r7, #20]
900041c2:	4293      	cmp	r3, r2
900041c4:	d3d3      	bcc.n	9000416e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
900041c6:	687b      	ldr	r3, [r7, #4]
900041c8:	681b      	ldr	r3, [r3, #0]
900041ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900041ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
900041d0:	687b      	ldr	r3, [r7, #4]
900041d2:	681b      	ldr	r3, [r3, #0]
900041d4:	4618      	mov	r0, r3
900041d6:	f007 f891 	bl	9000b2fc <USB_ReadInterrupts>
900041da:	4603      	mov	r3, r0
900041dc:	f003 0310 	and.w	r3, r3, #16
900041e0:	2b10      	cmp	r3, #16
900041e2:	d101      	bne.n	900041e8 <HAL_HCD_IRQHandler+0x1ea>
900041e4:	2301      	movs	r3, #1
900041e6:	e000      	b.n	900041ea <HAL_HCD_IRQHandler+0x1ec>
900041e8:	2300      	movs	r3, #0
900041ea:	2b00      	cmp	r3, #0
900041ec:	d014      	beq.n	90004218 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900041ee:	687b      	ldr	r3, [r7, #4]
900041f0:	681b      	ldr	r3, [r3, #0]
900041f2:	699a      	ldr	r2, [r3, #24]
900041f4:	687b      	ldr	r3, [r7, #4]
900041f6:	681b      	ldr	r3, [r3, #0]
900041f8:	f022 0210 	bic.w	r2, r2, #16
900041fc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
900041fe:	6878      	ldr	r0, [r7, #4]
90004200:	f001 fb52 	bl	900058a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90004204:	687b      	ldr	r3, [r7, #4]
90004206:	681b      	ldr	r3, [r3, #0]
90004208:	699a      	ldr	r2, [r3, #24]
9000420a:	687b      	ldr	r3, [r7, #4]
9000420c:	681b      	ldr	r3, [r3, #0]
9000420e:	f042 0210 	orr.w	r2, r2, #16
90004212:	619a      	str	r2, [r3, #24]
90004214:	e000      	b.n	90004218 <HAL_HCD_IRQHandler+0x21a>
      return;
90004216:	bf00      	nop
    }
  }
}
90004218:	3718      	adds	r7, #24
9000421a:	46bd      	mov	sp, r7
9000421c:	bd80      	pop	{r7, pc}

9000421e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
9000421e:	b580      	push	{r7, lr}
90004220:	b082      	sub	sp, #8
90004222:	af00      	add	r7, sp, #0
90004224:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
90004226:	687b      	ldr	r3, [r7, #4]
90004228:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
9000422c:	2b01      	cmp	r3, #1
9000422e:	d101      	bne.n	90004234 <HAL_HCD_Stop+0x16>
90004230:	2302      	movs	r3, #2
90004232:	e00d      	b.n	90004250 <HAL_HCD_Stop+0x32>
90004234:	687b      	ldr	r3, [r7, #4]
90004236:	2201      	movs	r2, #1
90004238:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
9000423c:	687b      	ldr	r3, [r7, #4]
9000423e:	681b      	ldr	r3, [r3, #0]
90004240:	4618      	mov	r0, r3
90004242:	f007 fa0b 	bl	9000b65c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90004246:	687b      	ldr	r3, [r7, #4]
90004248:	2200      	movs	r2, #0
9000424a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
9000424e:	2300      	movs	r3, #0
}
90004250:	4618      	mov	r0, r3
90004252:	3708      	adds	r7, #8
90004254:	46bd      	mov	sp, r7
90004256:	bd80      	pop	{r7, pc}

90004258 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004258:	b580      	push	{r7, lr}
9000425a:	b086      	sub	sp, #24
9000425c:	af00      	add	r7, sp, #0
9000425e:	6078      	str	r0, [r7, #4]
90004260:	460b      	mov	r3, r1
90004262:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004264:	687b      	ldr	r3, [r7, #4]
90004266:	681b      	ldr	r3, [r3, #0]
90004268:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000426a:	697b      	ldr	r3, [r7, #20]
9000426c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
9000426e:	687b      	ldr	r3, [r7, #4]
90004270:	681b      	ldr	r3, [r3, #0]
90004272:	78fa      	ldrb	r2, [r7, #3]
90004274:	4611      	mov	r1, r2
90004276:	4618      	mov	r0, r3
90004278:	f007 f853 	bl	9000b322 <USB_ReadChInterrupts>
9000427c:	4603      	mov	r3, r0
9000427e:	f003 0304 	and.w	r3, r3, #4
90004282:	2b04      	cmp	r3, #4
90004284:	d11a      	bne.n	900042bc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004286:	78fb      	ldrb	r3, [r7, #3]
90004288:	015a      	lsls	r2, r3, #5
9000428a:	693b      	ldr	r3, [r7, #16]
9000428c:	4413      	add	r3, r2
9000428e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004292:	461a      	mov	r2, r3
90004294:	2304      	movs	r3, #4
90004296:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004298:	78fa      	ldrb	r2, [r7, #3]
9000429a:	6879      	ldr	r1, [r7, #4]
9000429c:	4613      	mov	r3, r2
9000429e:	011b      	lsls	r3, r3, #4
900042a0:	1a9b      	subs	r3, r3, r2
900042a2:	009b      	lsls	r3, r3, #2
900042a4:	440b      	add	r3, r1
900042a6:	334d      	adds	r3, #77	@ 0x4d
900042a8:	2207      	movs	r2, #7
900042aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042ac:	687b      	ldr	r3, [r7, #4]
900042ae:	681b      	ldr	r3, [r3, #0]
900042b0:	78fa      	ldrb	r2, [r7, #3]
900042b2:	4611      	mov	r1, r2
900042b4:	4618      	mov	r0, r3
900042b6:	f007 f8b1 	bl	9000b41c <USB_HC_Halt>
900042ba:	e09e      	b.n	900043fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
900042bc:	687b      	ldr	r3, [r7, #4]
900042be:	681b      	ldr	r3, [r3, #0]
900042c0:	78fa      	ldrb	r2, [r7, #3]
900042c2:	4611      	mov	r1, r2
900042c4:	4618      	mov	r0, r3
900042c6:	f007 f82c 	bl	9000b322 <USB_ReadChInterrupts>
900042ca:	4603      	mov	r3, r0
900042cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900042d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900042d4:	d11b      	bne.n	9000430e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
900042d6:	78fb      	ldrb	r3, [r7, #3]
900042d8:	015a      	lsls	r2, r3, #5
900042da:	693b      	ldr	r3, [r7, #16]
900042dc:	4413      	add	r3, r2
900042de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042e2:	461a      	mov	r2, r3
900042e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
900042e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
900042ea:	78fa      	ldrb	r2, [r7, #3]
900042ec:	6879      	ldr	r1, [r7, #4]
900042ee:	4613      	mov	r3, r2
900042f0:	011b      	lsls	r3, r3, #4
900042f2:	1a9b      	subs	r3, r3, r2
900042f4:	009b      	lsls	r3, r3, #2
900042f6:	440b      	add	r3, r1
900042f8:	334d      	adds	r3, #77	@ 0x4d
900042fa:	2208      	movs	r2, #8
900042fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042fe:	687b      	ldr	r3, [r7, #4]
90004300:	681b      	ldr	r3, [r3, #0]
90004302:	78fa      	ldrb	r2, [r7, #3]
90004304:	4611      	mov	r1, r2
90004306:	4618      	mov	r0, r3
90004308:	f007 f888 	bl	9000b41c <USB_HC_Halt>
9000430c:	e075      	b.n	900043fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000430e:	687b      	ldr	r3, [r7, #4]
90004310:	681b      	ldr	r3, [r3, #0]
90004312:	78fa      	ldrb	r2, [r7, #3]
90004314:	4611      	mov	r1, r2
90004316:	4618      	mov	r0, r3
90004318:	f007 f803 	bl	9000b322 <USB_ReadChInterrupts>
9000431c:	4603      	mov	r3, r0
9000431e:	f003 0308 	and.w	r3, r3, #8
90004322:	2b08      	cmp	r3, #8
90004324:	d11a      	bne.n	9000435c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90004326:	78fb      	ldrb	r3, [r7, #3]
90004328:	015a      	lsls	r2, r3, #5
9000432a:	693b      	ldr	r3, [r7, #16]
9000432c:	4413      	add	r3, r2
9000432e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004332:	461a      	mov	r2, r3
90004334:	2308      	movs	r3, #8
90004336:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004338:	78fa      	ldrb	r2, [r7, #3]
9000433a:	6879      	ldr	r1, [r7, #4]
9000433c:	4613      	mov	r3, r2
9000433e:	011b      	lsls	r3, r3, #4
90004340:	1a9b      	subs	r3, r3, r2
90004342:	009b      	lsls	r3, r3, #2
90004344:	440b      	add	r3, r1
90004346:	334d      	adds	r3, #77	@ 0x4d
90004348:	2206      	movs	r2, #6
9000434a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000434c:	687b      	ldr	r3, [r7, #4]
9000434e:	681b      	ldr	r3, [r3, #0]
90004350:	78fa      	ldrb	r2, [r7, #3]
90004352:	4611      	mov	r1, r2
90004354:	4618      	mov	r0, r3
90004356:	f007 f861 	bl	9000b41c <USB_HC_Halt>
9000435a:	e04e      	b.n	900043fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
9000435c:	687b      	ldr	r3, [r7, #4]
9000435e:	681b      	ldr	r3, [r3, #0]
90004360:	78fa      	ldrb	r2, [r7, #3]
90004362:	4611      	mov	r1, r2
90004364:	4618      	mov	r0, r3
90004366:	f006 ffdc 	bl	9000b322 <USB_ReadChInterrupts>
9000436a:	4603      	mov	r3, r0
9000436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90004374:	d11b      	bne.n	900043ae <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90004376:	78fb      	ldrb	r3, [r7, #3]
90004378:	015a      	lsls	r2, r3, #5
9000437a:	693b      	ldr	r3, [r7, #16]
9000437c:	4413      	add	r3, r2
9000437e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004382:	461a      	mov	r2, r3
90004384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90004388:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000438a:	78fa      	ldrb	r2, [r7, #3]
9000438c:	6879      	ldr	r1, [r7, #4]
9000438e:	4613      	mov	r3, r2
90004390:	011b      	lsls	r3, r3, #4
90004392:	1a9b      	subs	r3, r3, r2
90004394:	009b      	lsls	r3, r3, #2
90004396:	440b      	add	r3, r1
90004398:	334d      	adds	r3, #77	@ 0x4d
9000439a:	2209      	movs	r2, #9
9000439c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000439e:	687b      	ldr	r3, [r7, #4]
900043a0:	681b      	ldr	r3, [r3, #0]
900043a2:	78fa      	ldrb	r2, [r7, #3]
900043a4:	4611      	mov	r1, r2
900043a6:	4618      	mov	r0, r3
900043a8:	f007 f838 	bl	9000b41c <USB_HC_Halt>
900043ac:	e025      	b.n	900043fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
900043ae:	687b      	ldr	r3, [r7, #4]
900043b0:	681b      	ldr	r3, [r3, #0]
900043b2:	78fa      	ldrb	r2, [r7, #3]
900043b4:	4611      	mov	r1, r2
900043b6:	4618      	mov	r0, r3
900043b8:	f006 ffb3 	bl	9000b322 <USB_ReadChInterrupts>
900043bc:	4603      	mov	r3, r0
900043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900043c2:	2b80      	cmp	r3, #128	@ 0x80
900043c4:	d119      	bne.n	900043fa <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900043c6:	78fb      	ldrb	r3, [r7, #3]
900043c8:	015a      	lsls	r2, r3, #5
900043ca:	693b      	ldr	r3, [r7, #16]
900043cc:	4413      	add	r3, r2
900043ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043d2:	461a      	mov	r2, r3
900043d4:	2380      	movs	r3, #128	@ 0x80
900043d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900043d8:	78fa      	ldrb	r2, [r7, #3]
900043da:	6879      	ldr	r1, [r7, #4]
900043dc:	4613      	mov	r3, r2
900043de:	011b      	lsls	r3, r3, #4
900043e0:	1a9b      	subs	r3, r3, r2
900043e2:	009b      	lsls	r3, r3, #2
900043e4:	440b      	add	r3, r1
900043e6:	334d      	adds	r3, #77	@ 0x4d
900043e8:	2207      	movs	r2, #7
900043ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900043ec:	687b      	ldr	r3, [r7, #4]
900043ee:	681b      	ldr	r3, [r3, #0]
900043f0:	78fa      	ldrb	r2, [r7, #3]
900043f2:	4611      	mov	r1, r2
900043f4:	4618      	mov	r0, r3
900043f6:	f007 f811 	bl	9000b41c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900043fa:	687b      	ldr	r3, [r7, #4]
900043fc:	681b      	ldr	r3, [r3, #0]
900043fe:	78fa      	ldrb	r2, [r7, #3]
90004400:	4611      	mov	r1, r2
90004402:	4618      	mov	r0, r3
90004404:	f006 ff8d 	bl	9000b322 <USB_ReadChInterrupts>
90004408:	4603      	mov	r3, r0
9000440a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000440e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004412:	d112      	bne.n	9000443a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004414:	687b      	ldr	r3, [r7, #4]
90004416:	681b      	ldr	r3, [r3, #0]
90004418:	78fa      	ldrb	r2, [r7, #3]
9000441a:	4611      	mov	r1, r2
9000441c:	4618      	mov	r0, r3
9000441e:	f006 fffd 	bl	9000b41c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004422:	78fb      	ldrb	r3, [r7, #3]
90004424:	015a      	lsls	r2, r3, #5
90004426:	693b      	ldr	r3, [r7, #16]
90004428:	4413      	add	r3, r2
9000442a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000442e:	461a      	mov	r2, r3
90004430:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004434:	6093      	str	r3, [r2, #8]
90004436:	f000 bd75 	b.w	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
9000443a:	687b      	ldr	r3, [r7, #4]
9000443c:	681b      	ldr	r3, [r3, #0]
9000443e:	78fa      	ldrb	r2, [r7, #3]
90004440:	4611      	mov	r1, r2
90004442:	4618      	mov	r0, r3
90004444:	f006 ff6d 	bl	9000b322 <USB_ReadChInterrupts>
90004448:	4603      	mov	r3, r0
9000444a:	f003 0301 	and.w	r3, r3, #1
9000444e:	2b01      	cmp	r3, #1
90004450:	f040 8128 	bne.w	900046a4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004454:	78fb      	ldrb	r3, [r7, #3]
90004456:	015a      	lsls	r2, r3, #5
90004458:	693b      	ldr	r3, [r7, #16]
9000445a:	4413      	add	r3, r2
9000445c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004460:	461a      	mov	r2, r3
90004462:	2320      	movs	r3, #32
90004464:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
90004466:	78fa      	ldrb	r2, [r7, #3]
90004468:	6879      	ldr	r1, [r7, #4]
9000446a:	4613      	mov	r3, r2
9000446c:	011b      	lsls	r3, r3, #4
9000446e:	1a9b      	subs	r3, r3, r2
90004470:	009b      	lsls	r3, r3, #2
90004472:	440b      	add	r3, r1
90004474:	331b      	adds	r3, #27
90004476:	781b      	ldrb	r3, [r3, #0]
90004478:	2b01      	cmp	r3, #1
9000447a:	d119      	bne.n	900044b0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
9000447c:	78fa      	ldrb	r2, [r7, #3]
9000447e:	6879      	ldr	r1, [r7, #4]
90004480:	4613      	mov	r3, r2
90004482:	011b      	lsls	r3, r3, #4
90004484:	1a9b      	subs	r3, r3, r2
90004486:	009b      	lsls	r3, r3, #2
90004488:	440b      	add	r3, r1
9000448a:	331b      	adds	r3, #27
9000448c:	2200      	movs	r2, #0
9000448e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004490:	78fb      	ldrb	r3, [r7, #3]
90004492:	015a      	lsls	r2, r3, #5
90004494:	693b      	ldr	r3, [r7, #16]
90004496:	4413      	add	r3, r2
90004498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000449c:	685b      	ldr	r3, [r3, #4]
9000449e:	78fa      	ldrb	r2, [r7, #3]
900044a0:	0151      	lsls	r1, r2, #5
900044a2:	693a      	ldr	r2, [r7, #16]
900044a4:	440a      	add	r2, r1
900044a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900044aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900044ae:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
900044b0:	687b      	ldr	r3, [r7, #4]
900044b2:	799b      	ldrb	r3, [r3, #6]
900044b4:	2b00      	cmp	r3, #0
900044b6:	d01b      	beq.n	900044f0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900044b8:	78fa      	ldrb	r2, [r7, #3]
900044ba:	6879      	ldr	r1, [r7, #4]
900044bc:	4613      	mov	r3, r2
900044be:	011b      	lsls	r3, r3, #4
900044c0:	1a9b      	subs	r3, r3, r2
900044c2:	009b      	lsls	r3, r3, #2
900044c4:	440b      	add	r3, r1
900044c6:	3330      	adds	r3, #48	@ 0x30
900044c8:	6819      	ldr	r1, [r3, #0]
900044ca:	78fb      	ldrb	r3, [r7, #3]
900044cc:	015a      	lsls	r2, r3, #5
900044ce:	693b      	ldr	r3, [r7, #16]
900044d0:	4413      	add	r3, r2
900044d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044d6:	691b      	ldr	r3, [r3, #16]
900044d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
900044dc:	78fa      	ldrb	r2, [r7, #3]
900044de:	1ac9      	subs	r1, r1, r3
900044e0:	6878      	ldr	r0, [r7, #4]
900044e2:	4613      	mov	r3, r2
900044e4:	011b      	lsls	r3, r3, #4
900044e6:	1a9b      	subs	r3, r3, r2
900044e8:	009b      	lsls	r3, r3, #2
900044ea:	4403      	add	r3, r0
900044ec:	3338      	adds	r3, #56	@ 0x38
900044ee:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
900044f0:	78fa      	ldrb	r2, [r7, #3]
900044f2:	6879      	ldr	r1, [r7, #4]
900044f4:	4613      	mov	r3, r2
900044f6:	011b      	lsls	r3, r3, #4
900044f8:	1a9b      	subs	r3, r3, r2
900044fa:	009b      	lsls	r3, r3, #2
900044fc:	440b      	add	r3, r1
900044fe:	334d      	adds	r3, #77	@ 0x4d
90004500:	2201      	movs	r2, #1
90004502:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004504:	78fa      	ldrb	r2, [r7, #3]
90004506:	6879      	ldr	r1, [r7, #4]
90004508:	4613      	mov	r3, r2
9000450a:	011b      	lsls	r3, r3, #4
9000450c:	1a9b      	subs	r3, r3, r2
9000450e:	009b      	lsls	r3, r3, #2
90004510:	440b      	add	r3, r1
90004512:	3344      	adds	r3, #68	@ 0x44
90004514:	2200      	movs	r2, #0
90004516:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004518:	78fb      	ldrb	r3, [r7, #3]
9000451a:	015a      	lsls	r2, r3, #5
9000451c:	693b      	ldr	r3, [r7, #16]
9000451e:	4413      	add	r3, r2
90004520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004524:	461a      	mov	r2, r3
90004526:	2301      	movs	r3, #1
90004528:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000452a:	78fa      	ldrb	r2, [r7, #3]
9000452c:	6879      	ldr	r1, [r7, #4]
9000452e:	4613      	mov	r3, r2
90004530:	011b      	lsls	r3, r3, #4
90004532:	1a9b      	subs	r3, r3, r2
90004534:	009b      	lsls	r3, r3, #2
90004536:	440b      	add	r3, r1
90004538:	3326      	adds	r3, #38	@ 0x26
9000453a:	781b      	ldrb	r3, [r3, #0]
9000453c:	2b00      	cmp	r3, #0
9000453e:	d00a      	beq.n	90004556 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004540:	78fa      	ldrb	r2, [r7, #3]
90004542:	6879      	ldr	r1, [r7, #4]
90004544:	4613      	mov	r3, r2
90004546:	011b      	lsls	r3, r3, #4
90004548:	1a9b      	subs	r3, r3, r2
9000454a:	009b      	lsls	r3, r3, #2
9000454c:	440b      	add	r3, r1
9000454e:	3326      	adds	r3, #38	@ 0x26
90004550:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004552:	2b02      	cmp	r3, #2
90004554:	d110      	bne.n	90004578 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004556:	687b      	ldr	r3, [r7, #4]
90004558:	681b      	ldr	r3, [r3, #0]
9000455a:	78fa      	ldrb	r2, [r7, #3]
9000455c:	4611      	mov	r1, r2
9000455e:	4618      	mov	r0, r3
90004560:	f006 ff5c 	bl	9000b41c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004564:	78fb      	ldrb	r3, [r7, #3]
90004566:	015a      	lsls	r2, r3, #5
90004568:	693b      	ldr	r3, [r7, #16]
9000456a:	4413      	add	r3, r2
9000456c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004570:	461a      	mov	r2, r3
90004572:	2310      	movs	r3, #16
90004574:	6093      	str	r3, [r2, #8]
90004576:	e03d      	b.n	900045f4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004578:	78fa      	ldrb	r2, [r7, #3]
9000457a:	6879      	ldr	r1, [r7, #4]
9000457c:	4613      	mov	r3, r2
9000457e:	011b      	lsls	r3, r3, #4
90004580:	1a9b      	subs	r3, r3, r2
90004582:	009b      	lsls	r3, r3, #2
90004584:	440b      	add	r3, r1
90004586:	3326      	adds	r3, #38	@ 0x26
90004588:	781b      	ldrb	r3, [r3, #0]
9000458a:	2b03      	cmp	r3, #3
9000458c:	d00a      	beq.n	900045a4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
9000458e:	78fa      	ldrb	r2, [r7, #3]
90004590:	6879      	ldr	r1, [r7, #4]
90004592:	4613      	mov	r3, r2
90004594:	011b      	lsls	r3, r3, #4
90004596:	1a9b      	subs	r3, r3, r2
90004598:	009b      	lsls	r3, r3, #2
9000459a:	440b      	add	r3, r1
9000459c:	3326      	adds	r3, #38	@ 0x26
9000459e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900045a0:	2b01      	cmp	r3, #1
900045a2:	d127      	bne.n	900045f4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900045a4:	78fb      	ldrb	r3, [r7, #3]
900045a6:	015a      	lsls	r2, r3, #5
900045a8:	693b      	ldr	r3, [r7, #16]
900045aa:	4413      	add	r3, r2
900045ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900045b0:	681b      	ldr	r3, [r3, #0]
900045b2:	78fa      	ldrb	r2, [r7, #3]
900045b4:	0151      	lsls	r1, r2, #5
900045b6:	693a      	ldr	r2, [r7, #16]
900045b8:	440a      	add	r2, r1
900045ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900045be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
900045c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900045c4:	78fa      	ldrb	r2, [r7, #3]
900045c6:	6879      	ldr	r1, [r7, #4]
900045c8:	4613      	mov	r3, r2
900045ca:	011b      	lsls	r3, r3, #4
900045cc:	1a9b      	subs	r3, r3, r2
900045ce:	009b      	lsls	r3, r3, #2
900045d0:	440b      	add	r3, r1
900045d2:	334c      	adds	r3, #76	@ 0x4c
900045d4:	2201      	movs	r2, #1
900045d6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900045d8:	78fa      	ldrb	r2, [r7, #3]
900045da:	6879      	ldr	r1, [r7, #4]
900045dc:	4613      	mov	r3, r2
900045de:	011b      	lsls	r3, r3, #4
900045e0:	1a9b      	subs	r3, r3, r2
900045e2:	009b      	lsls	r3, r3, #2
900045e4:	440b      	add	r3, r1
900045e6:	334c      	adds	r3, #76	@ 0x4c
900045e8:	781a      	ldrb	r2, [r3, #0]
900045ea:	78fb      	ldrb	r3, [r7, #3]
900045ec:	4619      	mov	r1, r3
900045ee:	6878      	ldr	r0, [r7, #4]
900045f0:	f7fc fdd2 	bl	90001198 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
900045f4:	687b      	ldr	r3, [r7, #4]
900045f6:	799b      	ldrb	r3, [r3, #6]
900045f8:	2b01      	cmp	r3, #1
900045fa:	d13b      	bne.n	90004674 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
900045fc:	78fa      	ldrb	r2, [r7, #3]
900045fe:	6879      	ldr	r1, [r7, #4]
90004600:	4613      	mov	r3, r2
90004602:	011b      	lsls	r3, r3, #4
90004604:	1a9b      	subs	r3, r3, r2
90004606:	009b      	lsls	r3, r3, #2
90004608:	440b      	add	r3, r1
9000460a:	3338      	adds	r3, #56	@ 0x38
9000460c:	6819      	ldr	r1, [r3, #0]
9000460e:	78fa      	ldrb	r2, [r7, #3]
90004610:	6878      	ldr	r0, [r7, #4]
90004612:	4613      	mov	r3, r2
90004614:	011b      	lsls	r3, r3, #4
90004616:	1a9b      	subs	r3, r3, r2
90004618:	009b      	lsls	r3, r3, #2
9000461a:	4403      	add	r3, r0
9000461c:	3328      	adds	r3, #40	@ 0x28
9000461e:	881b      	ldrh	r3, [r3, #0]
90004620:	440b      	add	r3, r1
90004622:	1e59      	subs	r1, r3, #1
90004624:	78fa      	ldrb	r2, [r7, #3]
90004626:	6878      	ldr	r0, [r7, #4]
90004628:	4613      	mov	r3, r2
9000462a:	011b      	lsls	r3, r3, #4
9000462c:	1a9b      	subs	r3, r3, r2
9000462e:	009b      	lsls	r3, r3, #2
90004630:	4403      	add	r3, r0
90004632:	3328      	adds	r3, #40	@ 0x28
90004634:	881b      	ldrh	r3, [r3, #0]
90004636:	fbb1 f3f3 	udiv	r3, r1, r3
9000463a:	f003 0301 	and.w	r3, r3, #1
9000463e:	2b00      	cmp	r3, #0
90004640:	f000 8470 	beq.w	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004644:	78fa      	ldrb	r2, [r7, #3]
90004646:	6879      	ldr	r1, [r7, #4]
90004648:	4613      	mov	r3, r2
9000464a:	011b      	lsls	r3, r3, #4
9000464c:	1a9b      	subs	r3, r3, r2
9000464e:	009b      	lsls	r3, r3, #2
90004650:	440b      	add	r3, r1
90004652:	333c      	adds	r3, #60	@ 0x3c
90004654:	781b      	ldrb	r3, [r3, #0]
90004656:	78fa      	ldrb	r2, [r7, #3]
90004658:	f083 0301 	eor.w	r3, r3, #1
9000465c:	b2d8      	uxtb	r0, r3
9000465e:	6879      	ldr	r1, [r7, #4]
90004660:	4613      	mov	r3, r2
90004662:	011b      	lsls	r3, r3, #4
90004664:	1a9b      	subs	r3, r3, r2
90004666:	009b      	lsls	r3, r3, #2
90004668:	440b      	add	r3, r1
9000466a:	333c      	adds	r3, #60	@ 0x3c
9000466c:	4602      	mov	r2, r0
9000466e:	701a      	strb	r2, [r3, #0]
90004670:	f000 bc58 	b.w	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004674:	78fa      	ldrb	r2, [r7, #3]
90004676:	6879      	ldr	r1, [r7, #4]
90004678:	4613      	mov	r3, r2
9000467a:	011b      	lsls	r3, r3, #4
9000467c:	1a9b      	subs	r3, r3, r2
9000467e:	009b      	lsls	r3, r3, #2
90004680:	440b      	add	r3, r1
90004682:	333c      	adds	r3, #60	@ 0x3c
90004684:	781b      	ldrb	r3, [r3, #0]
90004686:	78fa      	ldrb	r2, [r7, #3]
90004688:	f083 0301 	eor.w	r3, r3, #1
9000468c:	b2d8      	uxtb	r0, r3
9000468e:	6879      	ldr	r1, [r7, #4]
90004690:	4613      	mov	r3, r2
90004692:	011b      	lsls	r3, r3, #4
90004694:	1a9b      	subs	r3, r3, r2
90004696:	009b      	lsls	r3, r3, #2
90004698:	440b      	add	r3, r1
9000469a:	333c      	adds	r3, #60	@ 0x3c
9000469c:	4602      	mov	r2, r0
9000469e:	701a      	strb	r2, [r3, #0]
900046a0:	f000 bc40 	b.w	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900046a4:	687b      	ldr	r3, [r7, #4]
900046a6:	681b      	ldr	r3, [r3, #0]
900046a8:	78fa      	ldrb	r2, [r7, #3]
900046aa:	4611      	mov	r1, r2
900046ac:	4618      	mov	r0, r3
900046ae:	f006 fe38 	bl	9000b322 <USB_ReadChInterrupts>
900046b2:	4603      	mov	r3, r0
900046b4:	f003 0320 	and.w	r3, r3, #32
900046b8:	2b20      	cmp	r3, #32
900046ba:	d131      	bne.n	90004720 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900046bc:	78fb      	ldrb	r3, [r7, #3]
900046be:	015a      	lsls	r2, r3, #5
900046c0:	693b      	ldr	r3, [r7, #16]
900046c2:	4413      	add	r3, r2
900046c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900046c8:	461a      	mov	r2, r3
900046ca:	2320      	movs	r3, #32
900046cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
900046ce:	78fa      	ldrb	r2, [r7, #3]
900046d0:	6879      	ldr	r1, [r7, #4]
900046d2:	4613      	mov	r3, r2
900046d4:	011b      	lsls	r3, r3, #4
900046d6:	1a9b      	subs	r3, r3, r2
900046d8:	009b      	lsls	r3, r3, #2
900046da:	440b      	add	r3, r1
900046dc:	331a      	adds	r3, #26
900046de:	781b      	ldrb	r3, [r3, #0]
900046e0:	2b01      	cmp	r3, #1
900046e2:	f040 841f 	bne.w	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
900046e6:	78fa      	ldrb	r2, [r7, #3]
900046e8:	6879      	ldr	r1, [r7, #4]
900046ea:	4613      	mov	r3, r2
900046ec:	011b      	lsls	r3, r3, #4
900046ee:	1a9b      	subs	r3, r3, r2
900046f0:	009b      	lsls	r3, r3, #2
900046f2:	440b      	add	r3, r1
900046f4:	331b      	adds	r3, #27
900046f6:	2201      	movs	r2, #1
900046f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900046fa:	78fa      	ldrb	r2, [r7, #3]
900046fc:	6879      	ldr	r1, [r7, #4]
900046fe:	4613      	mov	r3, r2
90004700:	011b      	lsls	r3, r3, #4
90004702:	1a9b      	subs	r3, r3, r2
90004704:	009b      	lsls	r3, r3, #2
90004706:	440b      	add	r3, r1
90004708:	334d      	adds	r3, #77	@ 0x4d
9000470a:	2203      	movs	r2, #3
9000470c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000470e:	687b      	ldr	r3, [r7, #4]
90004710:	681b      	ldr	r3, [r3, #0]
90004712:	78fa      	ldrb	r2, [r7, #3]
90004714:	4611      	mov	r1, r2
90004716:	4618      	mov	r0, r3
90004718:	f006 fe80 	bl	9000b41c <USB_HC_Halt>
9000471c:	f000 bc02 	b.w	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90004720:	687b      	ldr	r3, [r7, #4]
90004722:	681b      	ldr	r3, [r3, #0]
90004724:	78fa      	ldrb	r2, [r7, #3]
90004726:	4611      	mov	r1, r2
90004728:	4618      	mov	r0, r3
9000472a:	f006 fdfa 	bl	9000b322 <USB_ReadChInterrupts>
9000472e:	4603      	mov	r3, r0
90004730:	f003 0302 	and.w	r3, r3, #2
90004734:	2b02      	cmp	r3, #2
90004736:	f040 8305 	bne.w	90004d44 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
9000473a:	78fb      	ldrb	r3, [r7, #3]
9000473c:	015a      	lsls	r2, r3, #5
9000473e:	693b      	ldr	r3, [r7, #16]
90004740:	4413      	add	r3, r2
90004742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004746:	461a      	mov	r2, r3
90004748:	2302      	movs	r3, #2
9000474a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
9000474c:	78fa      	ldrb	r2, [r7, #3]
9000474e:	6879      	ldr	r1, [r7, #4]
90004750:	4613      	mov	r3, r2
90004752:	011b      	lsls	r3, r3, #4
90004754:	1a9b      	subs	r3, r3, r2
90004756:	009b      	lsls	r3, r3, #2
90004758:	440b      	add	r3, r1
9000475a:	334d      	adds	r3, #77	@ 0x4d
9000475c:	781b      	ldrb	r3, [r3, #0]
9000475e:	2b01      	cmp	r3, #1
90004760:	d114      	bne.n	9000478c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004762:	78fa      	ldrb	r2, [r7, #3]
90004764:	6879      	ldr	r1, [r7, #4]
90004766:	4613      	mov	r3, r2
90004768:	011b      	lsls	r3, r3, #4
9000476a:	1a9b      	subs	r3, r3, r2
9000476c:	009b      	lsls	r3, r3, #2
9000476e:	440b      	add	r3, r1
90004770:	334d      	adds	r3, #77	@ 0x4d
90004772:	2202      	movs	r2, #2
90004774:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004776:	78fa      	ldrb	r2, [r7, #3]
90004778:	6879      	ldr	r1, [r7, #4]
9000477a:	4613      	mov	r3, r2
9000477c:	011b      	lsls	r3, r3, #4
9000477e:	1a9b      	subs	r3, r3, r2
90004780:	009b      	lsls	r3, r3, #2
90004782:	440b      	add	r3, r1
90004784:	334c      	adds	r3, #76	@ 0x4c
90004786:	2201      	movs	r2, #1
90004788:	701a      	strb	r2, [r3, #0]
9000478a:	e2cc      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000478c:	78fa      	ldrb	r2, [r7, #3]
9000478e:	6879      	ldr	r1, [r7, #4]
90004790:	4613      	mov	r3, r2
90004792:	011b      	lsls	r3, r3, #4
90004794:	1a9b      	subs	r3, r3, r2
90004796:	009b      	lsls	r3, r3, #2
90004798:	440b      	add	r3, r1
9000479a:	334d      	adds	r3, #77	@ 0x4d
9000479c:	781b      	ldrb	r3, [r3, #0]
9000479e:	2b06      	cmp	r3, #6
900047a0:	d114      	bne.n	900047cc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900047a2:	78fa      	ldrb	r2, [r7, #3]
900047a4:	6879      	ldr	r1, [r7, #4]
900047a6:	4613      	mov	r3, r2
900047a8:	011b      	lsls	r3, r3, #4
900047aa:	1a9b      	subs	r3, r3, r2
900047ac:	009b      	lsls	r3, r3, #2
900047ae:	440b      	add	r3, r1
900047b0:	334d      	adds	r3, #77	@ 0x4d
900047b2:	2202      	movs	r2, #2
900047b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
900047b6:	78fa      	ldrb	r2, [r7, #3]
900047b8:	6879      	ldr	r1, [r7, #4]
900047ba:	4613      	mov	r3, r2
900047bc:	011b      	lsls	r3, r3, #4
900047be:	1a9b      	subs	r3, r3, r2
900047c0:	009b      	lsls	r3, r3, #2
900047c2:	440b      	add	r3, r1
900047c4:	334c      	adds	r3, #76	@ 0x4c
900047c6:	2205      	movs	r2, #5
900047c8:	701a      	strb	r2, [r3, #0]
900047ca:	e2ac      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900047cc:	78fa      	ldrb	r2, [r7, #3]
900047ce:	6879      	ldr	r1, [r7, #4]
900047d0:	4613      	mov	r3, r2
900047d2:	011b      	lsls	r3, r3, #4
900047d4:	1a9b      	subs	r3, r3, r2
900047d6:	009b      	lsls	r3, r3, #2
900047d8:	440b      	add	r3, r1
900047da:	334d      	adds	r3, #77	@ 0x4d
900047dc:	781b      	ldrb	r3, [r3, #0]
900047de:	2b07      	cmp	r3, #7
900047e0:	d00b      	beq.n	900047fa <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900047e2:	78fa      	ldrb	r2, [r7, #3]
900047e4:	6879      	ldr	r1, [r7, #4]
900047e6:	4613      	mov	r3, r2
900047e8:	011b      	lsls	r3, r3, #4
900047ea:	1a9b      	subs	r3, r3, r2
900047ec:	009b      	lsls	r3, r3, #2
900047ee:	440b      	add	r3, r1
900047f0:	334d      	adds	r3, #77	@ 0x4d
900047f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900047f4:	2b09      	cmp	r3, #9
900047f6:	f040 80a6 	bne.w	90004946 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900047fa:	78fa      	ldrb	r2, [r7, #3]
900047fc:	6879      	ldr	r1, [r7, #4]
900047fe:	4613      	mov	r3, r2
90004800:	011b      	lsls	r3, r3, #4
90004802:	1a9b      	subs	r3, r3, r2
90004804:	009b      	lsls	r3, r3, #2
90004806:	440b      	add	r3, r1
90004808:	334d      	adds	r3, #77	@ 0x4d
9000480a:	2202      	movs	r2, #2
9000480c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
9000480e:	78fa      	ldrb	r2, [r7, #3]
90004810:	6879      	ldr	r1, [r7, #4]
90004812:	4613      	mov	r3, r2
90004814:	011b      	lsls	r3, r3, #4
90004816:	1a9b      	subs	r3, r3, r2
90004818:	009b      	lsls	r3, r3, #2
9000481a:	440b      	add	r3, r1
9000481c:	3344      	adds	r3, #68	@ 0x44
9000481e:	681b      	ldr	r3, [r3, #0]
90004820:	1c59      	adds	r1, r3, #1
90004822:	6878      	ldr	r0, [r7, #4]
90004824:	4613      	mov	r3, r2
90004826:	011b      	lsls	r3, r3, #4
90004828:	1a9b      	subs	r3, r3, r2
9000482a:	009b      	lsls	r3, r3, #2
9000482c:	4403      	add	r3, r0
9000482e:	3344      	adds	r3, #68	@ 0x44
90004830:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004832:	78fa      	ldrb	r2, [r7, #3]
90004834:	6879      	ldr	r1, [r7, #4]
90004836:	4613      	mov	r3, r2
90004838:	011b      	lsls	r3, r3, #4
9000483a:	1a9b      	subs	r3, r3, r2
9000483c:	009b      	lsls	r3, r3, #2
9000483e:	440b      	add	r3, r1
90004840:	3344      	adds	r3, #68	@ 0x44
90004842:	681b      	ldr	r3, [r3, #0]
90004844:	2b02      	cmp	r3, #2
90004846:	d943      	bls.n	900048d0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90004848:	78fa      	ldrb	r2, [r7, #3]
9000484a:	6879      	ldr	r1, [r7, #4]
9000484c:	4613      	mov	r3, r2
9000484e:	011b      	lsls	r3, r3, #4
90004850:	1a9b      	subs	r3, r3, r2
90004852:	009b      	lsls	r3, r3, #2
90004854:	440b      	add	r3, r1
90004856:	3344      	adds	r3, #68	@ 0x44
90004858:	2200      	movs	r2, #0
9000485a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
9000485c:	78fa      	ldrb	r2, [r7, #3]
9000485e:	6879      	ldr	r1, [r7, #4]
90004860:	4613      	mov	r3, r2
90004862:	011b      	lsls	r3, r3, #4
90004864:	1a9b      	subs	r3, r3, r2
90004866:	009b      	lsls	r3, r3, #2
90004868:	440b      	add	r3, r1
9000486a:	331a      	adds	r3, #26
9000486c:	781b      	ldrb	r3, [r3, #0]
9000486e:	2b01      	cmp	r3, #1
90004870:	d123      	bne.n	900048ba <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
90004872:	78fa      	ldrb	r2, [r7, #3]
90004874:	6879      	ldr	r1, [r7, #4]
90004876:	4613      	mov	r3, r2
90004878:	011b      	lsls	r3, r3, #4
9000487a:	1a9b      	subs	r3, r3, r2
9000487c:	009b      	lsls	r3, r3, #2
9000487e:	440b      	add	r3, r1
90004880:	331b      	adds	r3, #27
90004882:	2200      	movs	r2, #0
90004884:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
90004886:	78fa      	ldrb	r2, [r7, #3]
90004888:	6879      	ldr	r1, [r7, #4]
9000488a:	4613      	mov	r3, r2
9000488c:	011b      	lsls	r3, r3, #4
9000488e:	1a9b      	subs	r3, r3, r2
90004890:	009b      	lsls	r3, r3, #2
90004892:	440b      	add	r3, r1
90004894:	331c      	adds	r3, #28
90004896:	2200      	movs	r2, #0
90004898:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000489a:	78fb      	ldrb	r3, [r7, #3]
9000489c:	015a      	lsls	r2, r3, #5
9000489e:	693b      	ldr	r3, [r7, #16]
900048a0:	4413      	add	r3, r2
900048a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900048a6:	685b      	ldr	r3, [r3, #4]
900048a8:	78fa      	ldrb	r2, [r7, #3]
900048aa:	0151      	lsls	r1, r2, #5
900048ac:	693a      	ldr	r2, [r7, #16]
900048ae:	440a      	add	r2, r1
900048b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900048b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900048b8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
900048ba:	78fa      	ldrb	r2, [r7, #3]
900048bc:	6879      	ldr	r1, [r7, #4]
900048be:	4613      	mov	r3, r2
900048c0:	011b      	lsls	r3, r3, #4
900048c2:	1a9b      	subs	r3, r3, r2
900048c4:	009b      	lsls	r3, r3, #2
900048c6:	440b      	add	r3, r1
900048c8:	334c      	adds	r3, #76	@ 0x4c
900048ca:	2204      	movs	r2, #4
900048cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900048ce:	e229      	b.n	90004d24 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900048d0:	78fa      	ldrb	r2, [r7, #3]
900048d2:	6879      	ldr	r1, [r7, #4]
900048d4:	4613      	mov	r3, r2
900048d6:	011b      	lsls	r3, r3, #4
900048d8:	1a9b      	subs	r3, r3, r2
900048da:	009b      	lsls	r3, r3, #2
900048dc:	440b      	add	r3, r1
900048de:	334c      	adds	r3, #76	@ 0x4c
900048e0:	2202      	movs	r2, #2
900048e2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900048e4:	78fa      	ldrb	r2, [r7, #3]
900048e6:	6879      	ldr	r1, [r7, #4]
900048e8:	4613      	mov	r3, r2
900048ea:	011b      	lsls	r3, r3, #4
900048ec:	1a9b      	subs	r3, r3, r2
900048ee:	009b      	lsls	r3, r3, #2
900048f0:	440b      	add	r3, r1
900048f2:	3326      	adds	r3, #38	@ 0x26
900048f4:	781b      	ldrb	r3, [r3, #0]
900048f6:	2b00      	cmp	r3, #0
900048f8:	d00b      	beq.n	90004912 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900048fa:	78fa      	ldrb	r2, [r7, #3]
900048fc:	6879      	ldr	r1, [r7, #4]
900048fe:	4613      	mov	r3, r2
90004900:	011b      	lsls	r3, r3, #4
90004902:	1a9b      	subs	r3, r3, r2
90004904:	009b      	lsls	r3, r3, #2
90004906:	440b      	add	r3, r1
90004908:	3326      	adds	r3, #38	@ 0x26
9000490a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000490c:	2b02      	cmp	r3, #2
9000490e:	f040 8209 	bne.w	90004d24 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004912:	78fb      	ldrb	r3, [r7, #3]
90004914:	015a      	lsls	r2, r3, #5
90004916:	693b      	ldr	r3, [r7, #16]
90004918:	4413      	add	r3, r2
9000491a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000491e:	681b      	ldr	r3, [r3, #0]
90004920:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004922:	68fb      	ldr	r3, [r7, #12]
90004924:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004928:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
9000492a:	68fb      	ldr	r3, [r7, #12]
9000492c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004930:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004932:	78fb      	ldrb	r3, [r7, #3]
90004934:	015a      	lsls	r2, r3, #5
90004936:	693b      	ldr	r3, [r7, #16]
90004938:	4413      	add	r3, r2
9000493a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000493e:	461a      	mov	r2, r3
90004940:	68fb      	ldr	r3, [r7, #12]
90004942:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004944:	e1ee      	b.n	90004d24 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90004946:	78fa      	ldrb	r2, [r7, #3]
90004948:	6879      	ldr	r1, [r7, #4]
9000494a:	4613      	mov	r3, r2
9000494c:	011b      	lsls	r3, r3, #4
9000494e:	1a9b      	subs	r3, r3, r2
90004950:	009b      	lsls	r3, r3, #2
90004952:	440b      	add	r3, r1
90004954:	334d      	adds	r3, #77	@ 0x4d
90004956:	781b      	ldrb	r3, [r3, #0]
90004958:	2b05      	cmp	r3, #5
9000495a:	f040 80c8 	bne.w	90004aee <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000495e:	78fa      	ldrb	r2, [r7, #3]
90004960:	6879      	ldr	r1, [r7, #4]
90004962:	4613      	mov	r3, r2
90004964:	011b      	lsls	r3, r3, #4
90004966:	1a9b      	subs	r3, r3, r2
90004968:	009b      	lsls	r3, r3, #2
9000496a:	440b      	add	r3, r1
9000496c:	334d      	adds	r3, #77	@ 0x4d
9000496e:	2202      	movs	r2, #2
90004970:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004972:	78fa      	ldrb	r2, [r7, #3]
90004974:	6879      	ldr	r1, [r7, #4]
90004976:	4613      	mov	r3, r2
90004978:	011b      	lsls	r3, r3, #4
9000497a:	1a9b      	subs	r3, r3, r2
9000497c:	009b      	lsls	r3, r3, #2
9000497e:	440b      	add	r3, r1
90004980:	331b      	adds	r3, #27
90004982:	781b      	ldrb	r3, [r3, #0]
90004984:	2b01      	cmp	r3, #1
90004986:	f040 81ce 	bne.w	90004d26 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
9000498a:	78fa      	ldrb	r2, [r7, #3]
9000498c:	6879      	ldr	r1, [r7, #4]
9000498e:	4613      	mov	r3, r2
90004990:	011b      	lsls	r3, r3, #4
90004992:	1a9b      	subs	r3, r3, r2
90004994:	009b      	lsls	r3, r3, #2
90004996:	440b      	add	r3, r1
90004998:	3326      	adds	r3, #38	@ 0x26
9000499a:	781b      	ldrb	r3, [r3, #0]
9000499c:	2b03      	cmp	r3, #3
9000499e:	d16b      	bne.n	90004a78 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
900049a0:	78fa      	ldrb	r2, [r7, #3]
900049a2:	6879      	ldr	r1, [r7, #4]
900049a4:	4613      	mov	r3, r2
900049a6:	011b      	lsls	r3, r3, #4
900049a8:	1a9b      	subs	r3, r3, r2
900049aa:	009b      	lsls	r3, r3, #2
900049ac:	440b      	add	r3, r1
900049ae:	3348      	adds	r3, #72	@ 0x48
900049b0:	681b      	ldr	r3, [r3, #0]
900049b2:	1c59      	adds	r1, r3, #1
900049b4:	6878      	ldr	r0, [r7, #4]
900049b6:	4613      	mov	r3, r2
900049b8:	011b      	lsls	r3, r3, #4
900049ba:	1a9b      	subs	r3, r3, r2
900049bc:	009b      	lsls	r3, r3, #2
900049be:	4403      	add	r3, r0
900049c0:	3348      	adds	r3, #72	@ 0x48
900049c2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
900049c4:	78fa      	ldrb	r2, [r7, #3]
900049c6:	6879      	ldr	r1, [r7, #4]
900049c8:	4613      	mov	r3, r2
900049ca:	011b      	lsls	r3, r3, #4
900049cc:	1a9b      	subs	r3, r3, r2
900049ce:	009b      	lsls	r3, r3, #2
900049d0:	440b      	add	r3, r1
900049d2:	3348      	adds	r3, #72	@ 0x48
900049d4:	681b      	ldr	r3, [r3, #0]
900049d6:	2b02      	cmp	r3, #2
900049d8:	d943      	bls.n	90004a62 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
900049da:	78fa      	ldrb	r2, [r7, #3]
900049dc:	6879      	ldr	r1, [r7, #4]
900049de:	4613      	mov	r3, r2
900049e0:	011b      	lsls	r3, r3, #4
900049e2:	1a9b      	subs	r3, r3, r2
900049e4:	009b      	lsls	r3, r3, #2
900049e6:	440b      	add	r3, r1
900049e8:	3348      	adds	r3, #72	@ 0x48
900049ea:	2200      	movs	r2, #0
900049ec:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
900049ee:	78fa      	ldrb	r2, [r7, #3]
900049f0:	6879      	ldr	r1, [r7, #4]
900049f2:	4613      	mov	r3, r2
900049f4:	011b      	lsls	r3, r3, #4
900049f6:	1a9b      	subs	r3, r3, r2
900049f8:	009b      	lsls	r3, r3, #2
900049fa:	440b      	add	r3, r1
900049fc:	331b      	adds	r3, #27
900049fe:	2200      	movs	r2, #0
90004a00:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
90004a02:	78fa      	ldrb	r2, [r7, #3]
90004a04:	6879      	ldr	r1, [r7, #4]
90004a06:	4613      	mov	r3, r2
90004a08:	011b      	lsls	r3, r3, #4
90004a0a:	1a9b      	subs	r3, r3, r2
90004a0c:	009b      	lsls	r3, r3, #2
90004a0e:	440b      	add	r3, r1
90004a10:	3344      	adds	r3, #68	@ 0x44
90004a12:	681b      	ldr	r3, [r3, #0]
90004a14:	2b02      	cmp	r3, #2
90004a16:	d809      	bhi.n	90004a2c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
90004a18:	78fa      	ldrb	r2, [r7, #3]
90004a1a:	6879      	ldr	r1, [r7, #4]
90004a1c:	4613      	mov	r3, r2
90004a1e:	011b      	lsls	r3, r3, #4
90004a20:	1a9b      	subs	r3, r3, r2
90004a22:	009b      	lsls	r3, r3, #2
90004a24:	440b      	add	r3, r1
90004a26:	331c      	adds	r3, #28
90004a28:	2201      	movs	r2, #1
90004a2a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004a2c:	78fb      	ldrb	r3, [r7, #3]
90004a2e:	015a      	lsls	r2, r3, #5
90004a30:	693b      	ldr	r3, [r7, #16]
90004a32:	4413      	add	r3, r2
90004a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a38:	685b      	ldr	r3, [r3, #4]
90004a3a:	78fa      	ldrb	r2, [r7, #3]
90004a3c:	0151      	lsls	r1, r2, #5
90004a3e:	693a      	ldr	r2, [r7, #16]
90004a40:	440a      	add	r2, r1
90004a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004a4a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004a4c:	78fa      	ldrb	r2, [r7, #3]
90004a4e:	6879      	ldr	r1, [r7, #4]
90004a50:	4613      	mov	r3, r2
90004a52:	011b      	lsls	r3, r3, #4
90004a54:	1a9b      	subs	r3, r3, r2
90004a56:	009b      	lsls	r3, r3, #2
90004a58:	440b      	add	r3, r1
90004a5a:	334c      	adds	r3, #76	@ 0x4c
90004a5c:	2204      	movs	r2, #4
90004a5e:	701a      	strb	r2, [r3, #0]
90004a60:	e014      	b.n	90004a8c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a62:	78fa      	ldrb	r2, [r7, #3]
90004a64:	6879      	ldr	r1, [r7, #4]
90004a66:	4613      	mov	r3, r2
90004a68:	011b      	lsls	r3, r3, #4
90004a6a:	1a9b      	subs	r3, r3, r2
90004a6c:	009b      	lsls	r3, r3, #2
90004a6e:	440b      	add	r3, r1
90004a70:	334c      	adds	r3, #76	@ 0x4c
90004a72:	2202      	movs	r2, #2
90004a74:	701a      	strb	r2, [r3, #0]
90004a76:	e009      	b.n	90004a8c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a78:	78fa      	ldrb	r2, [r7, #3]
90004a7a:	6879      	ldr	r1, [r7, #4]
90004a7c:	4613      	mov	r3, r2
90004a7e:	011b      	lsls	r3, r3, #4
90004a80:	1a9b      	subs	r3, r3, r2
90004a82:	009b      	lsls	r3, r3, #2
90004a84:	440b      	add	r3, r1
90004a86:	334c      	adds	r3, #76	@ 0x4c
90004a88:	2202      	movs	r2, #2
90004a8a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a8c:	78fa      	ldrb	r2, [r7, #3]
90004a8e:	6879      	ldr	r1, [r7, #4]
90004a90:	4613      	mov	r3, r2
90004a92:	011b      	lsls	r3, r3, #4
90004a94:	1a9b      	subs	r3, r3, r2
90004a96:	009b      	lsls	r3, r3, #2
90004a98:	440b      	add	r3, r1
90004a9a:	3326      	adds	r3, #38	@ 0x26
90004a9c:	781b      	ldrb	r3, [r3, #0]
90004a9e:	2b00      	cmp	r3, #0
90004aa0:	d00b      	beq.n	90004aba <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004aa2:	78fa      	ldrb	r2, [r7, #3]
90004aa4:	6879      	ldr	r1, [r7, #4]
90004aa6:	4613      	mov	r3, r2
90004aa8:	011b      	lsls	r3, r3, #4
90004aaa:	1a9b      	subs	r3, r3, r2
90004aac:	009b      	lsls	r3, r3, #2
90004aae:	440b      	add	r3, r1
90004ab0:	3326      	adds	r3, #38	@ 0x26
90004ab2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ab4:	2b02      	cmp	r3, #2
90004ab6:	f040 8136 	bne.w	90004d26 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004aba:	78fb      	ldrb	r3, [r7, #3]
90004abc:	015a      	lsls	r2, r3, #5
90004abe:	693b      	ldr	r3, [r7, #16]
90004ac0:	4413      	add	r3, r2
90004ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ac6:	681b      	ldr	r3, [r3, #0]
90004ac8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004aca:	68fb      	ldr	r3, [r7, #12]
90004acc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004ad0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004ad2:	68fb      	ldr	r3, [r7, #12]
90004ad4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004ad8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004ada:	78fb      	ldrb	r3, [r7, #3]
90004adc:	015a      	lsls	r2, r3, #5
90004ade:	693b      	ldr	r3, [r7, #16]
90004ae0:	4413      	add	r3, r2
90004ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ae6:	461a      	mov	r2, r3
90004ae8:	68fb      	ldr	r3, [r7, #12]
90004aea:	6013      	str	r3, [r2, #0]
90004aec:	e11b      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004aee:	78fa      	ldrb	r2, [r7, #3]
90004af0:	6879      	ldr	r1, [r7, #4]
90004af2:	4613      	mov	r3, r2
90004af4:	011b      	lsls	r3, r3, #4
90004af6:	1a9b      	subs	r3, r3, r2
90004af8:	009b      	lsls	r3, r3, #2
90004afa:	440b      	add	r3, r1
90004afc:	334d      	adds	r3, #77	@ 0x4d
90004afe:	781b      	ldrb	r3, [r3, #0]
90004b00:	2b03      	cmp	r3, #3
90004b02:	f040 8081 	bne.w	90004c08 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004b06:	78fa      	ldrb	r2, [r7, #3]
90004b08:	6879      	ldr	r1, [r7, #4]
90004b0a:	4613      	mov	r3, r2
90004b0c:	011b      	lsls	r3, r3, #4
90004b0e:	1a9b      	subs	r3, r3, r2
90004b10:	009b      	lsls	r3, r3, #2
90004b12:	440b      	add	r3, r1
90004b14:	334d      	adds	r3, #77	@ 0x4d
90004b16:	2202      	movs	r2, #2
90004b18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004b1a:	78fa      	ldrb	r2, [r7, #3]
90004b1c:	6879      	ldr	r1, [r7, #4]
90004b1e:	4613      	mov	r3, r2
90004b20:	011b      	lsls	r3, r3, #4
90004b22:	1a9b      	subs	r3, r3, r2
90004b24:	009b      	lsls	r3, r3, #2
90004b26:	440b      	add	r3, r1
90004b28:	331b      	adds	r3, #27
90004b2a:	781b      	ldrb	r3, [r3, #0]
90004b2c:	2b01      	cmp	r3, #1
90004b2e:	f040 80fa 	bne.w	90004d26 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b32:	78fa      	ldrb	r2, [r7, #3]
90004b34:	6879      	ldr	r1, [r7, #4]
90004b36:	4613      	mov	r3, r2
90004b38:	011b      	lsls	r3, r3, #4
90004b3a:	1a9b      	subs	r3, r3, r2
90004b3c:	009b      	lsls	r3, r3, #2
90004b3e:	440b      	add	r3, r1
90004b40:	334c      	adds	r3, #76	@ 0x4c
90004b42:	2202      	movs	r2, #2
90004b44:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004b46:	78fb      	ldrb	r3, [r7, #3]
90004b48:	015a      	lsls	r2, r3, #5
90004b4a:	693b      	ldr	r3, [r7, #16]
90004b4c:	4413      	add	r3, r2
90004b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b52:	685b      	ldr	r3, [r3, #4]
90004b54:	78fa      	ldrb	r2, [r7, #3]
90004b56:	0151      	lsls	r1, r2, #5
90004b58:	693a      	ldr	r2, [r7, #16]
90004b5a:	440a      	add	r2, r1
90004b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004b64:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004b66:	78fb      	ldrb	r3, [r7, #3]
90004b68:	015a      	lsls	r2, r3, #5
90004b6a:	693b      	ldr	r3, [r7, #16]
90004b6c:	4413      	add	r3, r2
90004b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b72:	68db      	ldr	r3, [r3, #12]
90004b74:	78fa      	ldrb	r2, [r7, #3]
90004b76:	0151      	lsls	r1, r2, #5
90004b78:	693a      	ldr	r2, [r7, #16]
90004b7a:	440a      	add	r2, r1
90004b7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004b84:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004b86:	78fb      	ldrb	r3, [r7, #3]
90004b88:	015a      	lsls	r2, r3, #5
90004b8a:	693b      	ldr	r3, [r7, #16]
90004b8c:	4413      	add	r3, r2
90004b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b92:	68db      	ldr	r3, [r3, #12]
90004b94:	78fa      	ldrb	r2, [r7, #3]
90004b96:	0151      	lsls	r1, r2, #5
90004b98:	693a      	ldr	r2, [r7, #16]
90004b9a:	440a      	add	r2, r1
90004b9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ba0:	f023 0320 	bic.w	r3, r3, #32
90004ba4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ba6:	78fa      	ldrb	r2, [r7, #3]
90004ba8:	6879      	ldr	r1, [r7, #4]
90004baa:	4613      	mov	r3, r2
90004bac:	011b      	lsls	r3, r3, #4
90004bae:	1a9b      	subs	r3, r3, r2
90004bb0:	009b      	lsls	r3, r3, #2
90004bb2:	440b      	add	r3, r1
90004bb4:	3326      	adds	r3, #38	@ 0x26
90004bb6:	781b      	ldrb	r3, [r3, #0]
90004bb8:	2b00      	cmp	r3, #0
90004bba:	d00b      	beq.n	90004bd4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004bbc:	78fa      	ldrb	r2, [r7, #3]
90004bbe:	6879      	ldr	r1, [r7, #4]
90004bc0:	4613      	mov	r3, r2
90004bc2:	011b      	lsls	r3, r3, #4
90004bc4:	1a9b      	subs	r3, r3, r2
90004bc6:	009b      	lsls	r3, r3, #2
90004bc8:	440b      	add	r3, r1
90004bca:	3326      	adds	r3, #38	@ 0x26
90004bcc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004bce:	2b02      	cmp	r3, #2
90004bd0:	f040 80a9 	bne.w	90004d26 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004bd4:	78fb      	ldrb	r3, [r7, #3]
90004bd6:	015a      	lsls	r2, r3, #5
90004bd8:	693b      	ldr	r3, [r7, #16]
90004bda:	4413      	add	r3, r2
90004bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004be0:	681b      	ldr	r3, [r3, #0]
90004be2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004be4:	68fb      	ldr	r3, [r7, #12]
90004be6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004bea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004bec:	68fb      	ldr	r3, [r7, #12]
90004bee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004bf2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004bf4:	78fb      	ldrb	r3, [r7, #3]
90004bf6:	015a      	lsls	r2, r3, #5
90004bf8:	693b      	ldr	r3, [r7, #16]
90004bfa:	4413      	add	r3, r2
90004bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c00:	461a      	mov	r2, r3
90004c02:	68fb      	ldr	r3, [r7, #12]
90004c04:	6013      	str	r3, [r2, #0]
90004c06:	e08e      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004c08:	78fa      	ldrb	r2, [r7, #3]
90004c0a:	6879      	ldr	r1, [r7, #4]
90004c0c:	4613      	mov	r3, r2
90004c0e:	011b      	lsls	r3, r3, #4
90004c10:	1a9b      	subs	r3, r3, r2
90004c12:	009b      	lsls	r3, r3, #2
90004c14:	440b      	add	r3, r1
90004c16:	334d      	adds	r3, #77	@ 0x4d
90004c18:	781b      	ldrb	r3, [r3, #0]
90004c1a:	2b04      	cmp	r3, #4
90004c1c:	d143      	bne.n	90004ca6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004c1e:	78fa      	ldrb	r2, [r7, #3]
90004c20:	6879      	ldr	r1, [r7, #4]
90004c22:	4613      	mov	r3, r2
90004c24:	011b      	lsls	r3, r3, #4
90004c26:	1a9b      	subs	r3, r3, r2
90004c28:	009b      	lsls	r3, r3, #2
90004c2a:	440b      	add	r3, r1
90004c2c:	334d      	adds	r3, #77	@ 0x4d
90004c2e:	2202      	movs	r2, #2
90004c30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004c32:	78fa      	ldrb	r2, [r7, #3]
90004c34:	6879      	ldr	r1, [r7, #4]
90004c36:	4613      	mov	r3, r2
90004c38:	011b      	lsls	r3, r3, #4
90004c3a:	1a9b      	subs	r3, r3, r2
90004c3c:	009b      	lsls	r3, r3, #2
90004c3e:	440b      	add	r3, r1
90004c40:	334c      	adds	r3, #76	@ 0x4c
90004c42:	2202      	movs	r2, #2
90004c44:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c46:	78fa      	ldrb	r2, [r7, #3]
90004c48:	6879      	ldr	r1, [r7, #4]
90004c4a:	4613      	mov	r3, r2
90004c4c:	011b      	lsls	r3, r3, #4
90004c4e:	1a9b      	subs	r3, r3, r2
90004c50:	009b      	lsls	r3, r3, #2
90004c52:	440b      	add	r3, r1
90004c54:	3326      	adds	r3, #38	@ 0x26
90004c56:	781b      	ldrb	r3, [r3, #0]
90004c58:	2b00      	cmp	r3, #0
90004c5a:	d00a      	beq.n	90004c72 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004c5c:	78fa      	ldrb	r2, [r7, #3]
90004c5e:	6879      	ldr	r1, [r7, #4]
90004c60:	4613      	mov	r3, r2
90004c62:	011b      	lsls	r3, r3, #4
90004c64:	1a9b      	subs	r3, r3, r2
90004c66:	009b      	lsls	r3, r3, #2
90004c68:	440b      	add	r3, r1
90004c6a:	3326      	adds	r3, #38	@ 0x26
90004c6c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c6e:	2b02      	cmp	r3, #2
90004c70:	d159      	bne.n	90004d26 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004c72:	78fb      	ldrb	r3, [r7, #3]
90004c74:	015a      	lsls	r2, r3, #5
90004c76:	693b      	ldr	r3, [r7, #16]
90004c78:	4413      	add	r3, r2
90004c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c7e:	681b      	ldr	r3, [r3, #0]
90004c80:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004c82:	68fb      	ldr	r3, [r7, #12]
90004c84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004c88:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004c8a:	68fb      	ldr	r3, [r7, #12]
90004c8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004c90:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004c92:	78fb      	ldrb	r3, [r7, #3]
90004c94:	015a      	lsls	r2, r3, #5
90004c96:	693b      	ldr	r3, [r7, #16]
90004c98:	4413      	add	r3, r2
90004c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c9e:	461a      	mov	r2, r3
90004ca0:	68fb      	ldr	r3, [r7, #12]
90004ca2:	6013      	str	r3, [r2, #0]
90004ca4:	e03f      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004ca6:	78fa      	ldrb	r2, [r7, #3]
90004ca8:	6879      	ldr	r1, [r7, #4]
90004caa:	4613      	mov	r3, r2
90004cac:	011b      	lsls	r3, r3, #4
90004cae:	1a9b      	subs	r3, r3, r2
90004cb0:	009b      	lsls	r3, r3, #2
90004cb2:	440b      	add	r3, r1
90004cb4:	334d      	adds	r3, #77	@ 0x4d
90004cb6:	781b      	ldrb	r3, [r3, #0]
90004cb8:	2b08      	cmp	r3, #8
90004cba:	d126      	bne.n	90004d0a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004cbc:	78fa      	ldrb	r2, [r7, #3]
90004cbe:	6879      	ldr	r1, [r7, #4]
90004cc0:	4613      	mov	r3, r2
90004cc2:	011b      	lsls	r3, r3, #4
90004cc4:	1a9b      	subs	r3, r3, r2
90004cc6:	009b      	lsls	r3, r3, #2
90004cc8:	440b      	add	r3, r1
90004cca:	334d      	adds	r3, #77	@ 0x4d
90004ccc:	2202      	movs	r2, #2
90004cce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004cd0:	78fa      	ldrb	r2, [r7, #3]
90004cd2:	6879      	ldr	r1, [r7, #4]
90004cd4:	4613      	mov	r3, r2
90004cd6:	011b      	lsls	r3, r3, #4
90004cd8:	1a9b      	subs	r3, r3, r2
90004cda:	009b      	lsls	r3, r3, #2
90004cdc:	440b      	add	r3, r1
90004cde:	3344      	adds	r3, #68	@ 0x44
90004ce0:	681b      	ldr	r3, [r3, #0]
90004ce2:	1c59      	adds	r1, r3, #1
90004ce4:	6878      	ldr	r0, [r7, #4]
90004ce6:	4613      	mov	r3, r2
90004ce8:	011b      	lsls	r3, r3, #4
90004cea:	1a9b      	subs	r3, r3, r2
90004cec:	009b      	lsls	r3, r3, #2
90004cee:	4403      	add	r3, r0
90004cf0:	3344      	adds	r3, #68	@ 0x44
90004cf2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004cf4:	78fa      	ldrb	r2, [r7, #3]
90004cf6:	6879      	ldr	r1, [r7, #4]
90004cf8:	4613      	mov	r3, r2
90004cfa:	011b      	lsls	r3, r3, #4
90004cfc:	1a9b      	subs	r3, r3, r2
90004cfe:	009b      	lsls	r3, r3, #2
90004d00:	440b      	add	r3, r1
90004d02:	334c      	adds	r3, #76	@ 0x4c
90004d04:	2204      	movs	r2, #4
90004d06:	701a      	strb	r2, [r3, #0]
90004d08:	e00d      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004d0a:	78fa      	ldrb	r2, [r7, #3]
90004d0c:	6879      	ldr	r1, [r7, #4]
90004d0e:	4613      	mov	r3, r2
90004d10:	011b      	lsls	r3, r3, #4
90004d12:	1a9b      	subs	r3, r3, r2
90004d14:	009b      	lsls	r3, r3, #2
90004d16:	440b      	add	r3, r1
90004d18:	334d      	adds	r3, #77	@ 0x4d
90004d1a:	781b      	ldrb	r3, [r3, #0]
90004d1c:	2b02      	cmp	r3, #2
90004d1e:	f000 8100 	beq.w	90004f22 <HCD_HC_IN_IRQHandler+0xcca>
90004d22:	e000      	b.n	90004d26 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004d24:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004d26:	78fa      	ldrb	r2, [r7, #3]
90004d28:	6879      	ldr	r1, [r7, #4]
90004d2a:	4613      	mov	r3, r2
90004d2c:	011b      	lsls	r3, r3, #4
90004d2e:	1a9b      	subs	r3, r3, r2
90004d30:	009b      	lsls	r3, r3, #2
90004d32:	440b      	add	r3, r1
90004d34:	334c      	adds	r3, #76	@ 0x4c
90004d36:	781a      	ldrb	r2, [r3, #0]
90004d38:	78fb      	ldrb	r3, [r7, #3]
90004d3a:	4619      	mov	r1, r3
90004d3c:	6878      	ldr	r0, [r7, #4]
90004d3e:	f7fc fa2b 	bl	90001198 <HAL_HCD_HC_NotifyURBChange_Callback>
90004d42:	e0ef      	b.n	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004d44:	687b      	ldr	r3, [r7, #4]
90004d46:	681b      	ldr	r3, [r3, #0]
90004d48:	78fa      	ldrb	r2, [r7, #3]
90004d4a:	4611      	mov	r1, r2
90004d4c:	4618      	mov	r0, r3
90004d4e:	f006 fae8 	bl	9000b322 <USB_ReadChInterrupts>
90004d52:	4603      	mov	r3, r0
90004d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004d58:	2b40      	cmp	r3, #64	@ 0x40
90004d5a:	d12f      	bne.n	90004dbc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004d5c:	78fb      	ldrb	r3, [r7, #3]
90004d5e:	015a      	lsls	r2, r3, #5
90004d60:	693b      	ldr	r3, [r7, #16]
90004d62:	4413      	add	r3, r2
90004d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004d68:	461a      	mov	r2, r3
90004d6a:	2340      	movs	r3, #64	@ 0x40
90004d6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004d6e:	78fa      	ldrb	r2, [r7, #3]
90004d70:	6879      	ldr	r1, [r7, #4]
90004d72:	4613      	mov	r3, r2
90004d74:	011b      	lsls	r3, r3, #4
90004d76:	1a9b      	subs	r3, r3, r2
90004d78:	009b      	lsls	r3, r3, #2
90004d7a:	440b      	add	r3, r1
90004d7c:	334d      	adds	r3, #77	@ 0x4d
90004d7e:	2205      	movs	r2, #5
90004d80:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004d82:	78fa      	ldrb	r2, [r7, #3]
90004d84:	6879      	ldr	r1, [r7, #4]
90004d86:	4613      	mov	r3, r2
90004d88:	011b      	lsls	r3, r3, #4
90004d8a:	1a9b      	subs	r3, r3, r2
90004d8c:	009b      	lsls	r3, r3, #2
90004d8e:	440b      	add	r3, r1
90004d90:	331a      	adds	r3, #26
90004d92:	781b      	ldrb	r3, [r3, #0]
90004d94:	2b00      	cmp	r3, #0
90004d96:	d109      	bne.n	90004dac <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004d98:	78fa      	ldrb	r2, [r7, #3]
90004d9a:	6879      	ldr	r1, [r7, #4]
90004d9c:	4613      	mov	r3, r2
90004d9e:	011b      	lsls	r3, r3, #4
90004da0:	1a9b      	subs	r3, r3, r2
90004da2:	009b      	lsls	r3, r3, #2
90004da4:	440b      	add	r3, r1
90004da6:	3344      	adds	r3, #68	@ 0x44
90004da8:	2200      	movs	r2, #0
90004daa:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004dac:	687b      	ldr	r3, [r7, #4]
90004dae:	681b      	ldr	r3, [r3, #0]
90004db0:	78fa      	ldrb	r2, [r7, #3]
90004db2:	4611      	mov	r1, r2
90004db4:	4618      	mov	r0, r3
90004db6:	f006 fb31 	bl	9000b41c <USB_HC_Halt>
90004dba:	e0b3      	b.n	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004dbc:	687b      	ldr	r3, [r7, #4]
90004dbe:	681b      	ldr	r3, [r3, #0]
90004dc0:	78fa      	ldrb	r2, [r7, #3]
90004dc2:	4611      	mov	r1, r2
90004dc4:	4618      	mov	r0, r3
90004dc6:	f006 faac 	bl	9000b322 <USB_ReadChInterrupts>
90004dca:	4603      	mov	r3, r0
90004dcc:	f003 0310 	and.w	r3, r3, #16
90004dd0:	2b10      	cmp	r3, #16
90004dd2:	f040 80a7 	bne.w	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004dd6:	78fa      	ldrb	r2, [r7, #3]
90004dd8:	6879      	ldr	r1, [r7, #4]
90004dda:	4613      	mov	r3, r2
90004ddc:	011b      	lsls	r3, r3, #4
90004dde:	1a9b      	subs	r3, r3, r2
90004de0:	009b      	lsls	r3, r3, #2
90004de2:	440b      	add	r3, r1
90004de4:	3326      	adds	r3, #38	@ 0x26
90004de6:	781b      	ldrb	r3, [r3, #0]
90004de8:	2b03      	cmp	r3, #3
90004dea:	d11b      	bne.n	90004e24 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004dec:	78fa      	ldrb	r2, [r7, #3]
90004dee:	6879      	ldr	r1, [r7, #4]
90004df0:	4613      	mov	r3, r2
90004df2:	011b      	lsls	r3, r3, #4
90004df4:	1a9b      	subs	r3, r3, r2
90004df6:	009b      	lsls	r3, r3, #2
90004df8:	440b      	add	r3, r1
90004dfa:	3344      	adds	r3, #68	@ 0x44
90004dfc:	2200      	movs	r2, #0
90004dfe:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004e00:	78fa      	ldrb	r2, [r7, #3]
90004e02:	6879      	ldr	r1, [r7, #4]
90004e04:	4613      	mov	r3, r2
90004e06:	011b      	lsls	r3, r3, #4
90004e08:	1a9b      	subs	r3, r3, r2
90004e0a:	009b      	lsls	r3, r3, #2
90004e0c:	440b      	add	r3, r1
90004e0e:	334d      	adds	r3, #77	@ 0x4d
90004e10:	2204      	movs	r2, #4
90004e12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e14:	687b      	ldr	r3, [r7, #4]
90004e16:	681b      	ldr	r3, [r3, #0]
90004e18:	78fa      	ldrb	r2, [r7, #3]
90004e1a:	4611      	mov	r1, r2
90004e1c:	4618      	mov	r0, r3
90004e1e:	f006 fafd 	bl	9000b41c <USB_HC_Halt>
90004e22:	e03f      	b.n	90004ea4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e24:	78fa      	ldrb	r2, [r7, #3]
90004e26:	6879      	ldr	r1, [r7, #4]
90004e28:	4613      	mov	r3, r2
90004e2a:	011b      	lsls	r3, r3, #4
90004e2c:	1a9b      	subs	r3, r3, r2
90004e2e:	009b      	lsls	r3, r3, #2
90004e30:	440b      	add	r3, r1
90004e32:	3326      	adds	r3, #38	@ 0x26
90004e34:	781b      	ldrb	r3, [r3, #0]
90004e36:	2b00      	cmp	r3, #0
90004e38:	d00a      	beq.n	90004e50 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004e3a:	78fa      	ldrb	r2, [r7, #3]
90004e3c:	6879      	ldr	r1, [r7, #4]
90004e3e:	4613      	mov	r3, r2
90004e40:	011b      	lsls	r3, r3, #4
90004e42:	1a9b      	subs	r3, r3, r2
90004e44:	009b      	lsls	r3, r3, #2
90004e46:	440b      	add	r3, r1
90004e48:	3326      	adds	r3, #38	@ 0x26
90004e4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004e4c:	2b02      	cmp	r3, #2
90004e4e:	d129      	bne.n	90004ea4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004e50:	78fa      	ldrb	r2, [r7, #3]
90004e52:	6879      	ldr	r1, [r7, #4]
90004e54:	4613      	mov	r3, r2
90004e56:	011b      	lsls	r3, r3, #4
90004e58:	1a9b      	subs	r3, r3, r2
90004e5a:	009b      	lsls	r3, r3, #2
90004e5c:	440b      	add	r3, r1
90004e5e:	3344      	adds	r3, #68	@ 0x44
90004e60:	2200      	movs	r2, #0
90004e62:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004e64:	687b      	ldr	r3, [r7, #4]
90004e66:	799b      	ldrb	r3, [r3, #6]
90004e68:	2b00      	cmp	r3, #0
90004e6a:	d00a      	beq.n	90004e82 <HCD_HC_IN_IRQHandler+0xc2a>
90004e6c:	78fa      	ldrb	r2, [r7, #3]
90004e6e:	6879      	ldr	r1, [r7, #4]
90004e70:	4613      	mov	r3, r2
90004e72:	011b      	lsls	r3, r3, #4
90004e74:	1a9b      	subs	r3, r3, r2
90004e76:	009b      	lsls	r3, r3, #2
90004e78:	440b      	add	r3, r1
90004e7a:	331b      	adds	r3, #27
90004e7c:	781b      	ldrb	r3, [r3, #0]
90004e7e:	2b01      	cmp	r3, #1
90004e80:	d110      	bne.n	90004ea4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004e82:	78fa      	ldrb	r2, [r7, #3]
90004e84:	6879      	ldr	r1, [r7, #4]
90004e86:	4613      	mov	r3, r2
90004e88:	011b      	lsls	r3, r3, #4
90004e8a:	1a9b      	subs	r3, r3, r2
90004e8c:	009b      	lsls	r3, r3, #2
90004e8e:	440b      	add	r3, r1
90004e90:	334d      	adds	r3, #77	@ 0x4d
90004e92:	2204      	movs	r2, #4
90004e94:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e96:	687b      	ldr	r3, [r7, #4]
90004e98:	681b      	ldr	r3, [r3, #0]
90004e9a:	78fa      	ldrb	r2, [r7, #3]
90004e9c:	4611      	mov	r1, r2
90004e9e:	4618      	mov	r0, r3
90004ea0:	f006 fabc 	bl	9000b41c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004ea4:	78fa      	ldrb	r2, [r7, #3]
90004ea6:	6879      	ldr	r1, [r7, #4]
90004ea8:	4613      	mov	r3, r2
90004eaa:	011b      	lsls	r3, r3, #4
90004eac:	1a9b      	subs	r3, r3, r2
90004eae:	009b      	lsls	r3, r3, #2
90004eb0:	440b      	add	r3, r1
90004eb2:	331b      	adds	r3, #27
90004eb4:	781b      	ldrb	r3, [r3, #0]
90004eb6:	2b01      	cmp	r3, #1
90004eb8:	d129      	bne.n	90004f0e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004eba:	78fa      	ldrb	r2, [r7, #3]
90004ebc:	6879      	ldr	r1, [r7, #4]
90004ebe:	4613      	mov	r3, r2
90004ec0:	011b      	lsls	r3, r3, #4
90004ec2:	1a9b      	subs	r3, r3, r2
90004ec4:	009b      	lsls	r3, r3, #2
90004ec6:	440b      	add	r3, r1
90004ec8:	331b      	adds	r3, #27
90004eca:	2200      	movs	r2, #0
90004ecc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004ece:	78fb      	ldrb	r3, [r7, #3]
90004ed0:	015a      	lsls	r2, r3, #5
90004ed2:	693b      	ldr	r3, [r7, #16]
90004ed4:	4413      	add	r3, r2
90004ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004eda:	685b      	ldr	r3, [r3, #4]
90004edc:	78fa      	ldrb	r2, [r7, #3]
90004ede:	0151      	lsls	r1, r2, #5
90004ee0:	693a      	ldr	r2, [r7, #16]
90004ee2:	440a      	add	r2, r1
90004ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004eec:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004eee:	78fb      	ldrb	r3, [r7, #3]
90004ef0:	015a      	lsls	r2, r3, #5
90004ef2:	693b      	ldr	r3, [r7, #16]
90004ef4:	4413      	add	r3, r2
90004ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004efa:	68db      	ldr	r3, [r3, #12]
90004efc:	78fa      	ldrb	r2, [r7, #3]
90004efe:	0151      	lsls	r1, r2, #5
90004f00:	693a      	ldr	r2, [r7, #16]
90004f02:	440a      	add	r2, r1
90004f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004f08:	f043 0320 	orr.w	r3, r3, #32
90004f0c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004f0e:	78fb      	ldrb	r3, [r7, #3]
90004f10:	015a      	lsls	r2, r3, #5
90004f12:	693b      	ldr	r3, [r7, #16]
90004f14:	4413      	add	r3, r2
90004f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f1a:	461a      	mov	r2, r3
90004f1c:	2310      	movs	r3, #16
90004f1e:	6093      	str	r3, [r2, #8]
90004f20:	e000      	b.n	90004f24 <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004f22:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004f24:	3718      	adds	r7, #24
90004f26:	46bd      	mov	sp, r7
90004f28:	bd80      	pop	{r7, pc}

90004f2a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004f2a:	b580      	push	{r7, lr}
90004f2c:	b086      	sub	sp, #24
90004f2e:	af00      	add	r7, sp, #0
90004f30:	6078      	str	r0, [r7, #4]
90004f32:	460b      	mov	r3, r1
90004f34:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004f36:	687b      	ldr	r3, [r7, #4]
90004f38:	681b      	ldr	r3, [r3, #0]
90004f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004f3c:	697b      	ldr	r3, [r7, #20]
90004f3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004f40:	687b      	ldr	r3, [r7, #4]
90004f42:	681b      	ldr	r3, [r3, #0]
90004f44:	78fa      	ldrb	r2, [r7, #3]
90004f46:	4611      	mov	r1, r2
90004f48:	4618      	mov	r0, r3
90004f4a:	f006 f9ea 	bl	9000b322 <USB_ReadChInterrupts>
90004f4e:	4603      	mov	r3, r0
90004f50:	f003 0304 	and.w	r3, r3, #4
90004f54:	2b04      	cmp	r3, #4
90004f56:	d11b      	bne.n	90004f90 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004f58:	78fb      	ldrb	r3, [r7, #3]
90004f5a:	015a      	lsls	r2, r3, #5
90004f5c:	693b      	ldr	r3, [r7, #16]
90004f5e:	4413      	add	r3, r2
90004f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004f64:	461a      	mov	r2, r3
90004f66:	2304      	movs	r3, #4
90004f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004f6a:	78fa      	ldrb	r2, [r7, #3]
90004f6c:	6879      	ldr	r1, [r7, #4]
90004f6e:	4613      	mov	r3, r2
90004f70:	011b      	lsls	r3, r3, #4
90004f72:	1a9b      	subs	r3, r3, r2
90004f74:	009b      	lsls	r3, r3, #2
90004f76:	440b      	add	r3, r1
90004f78:	334d      	adds	r3, #77	@ 0x4d
90004f7a:	2207      	movs	r2, #7
90004f7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f7e:	687b      	ldr	r3, [r7, #4]
90004f80:	681b      	ldr	r3, [r3, #0]
90004f82:	78fa      	ldrb	r2, [r7, #3]
90004f84:	4611      	mov	r1, r2
90004f86:	4618      	mov	r0, r3
90004f88:	f006 fa48 	bl	9000b41c <USB_HC_Halt>
90004f8c:	f000 bc89 	b.w	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004f90:	687b      	ldr	r3, [r7, #4]
90004f92:	681b      	ldr	r3, [r3, #0]
90004f94:	78fa      	ldrb	r2, [r7, #3]
90004f96:	4611      	mov	r1, r2
90004f98:	4618      	mov	r0, r3
90004f9a:	f006 f9c2 	bl	9000b322 <USB_ReadChInterrupts>
90004f9e:	4603      	mov	r3, r0
90004fa0:	f003 0320 	and.w	r3, r3, #32
90004fa4:	2b20      	cmp	r3, #32
90004fa6:	f040 8082 	bne.w	900050ae <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004faa:	78fb      	ldrb	r3, [r7, #3]
90004fac:	015a      	lsls	r2, r3, #5
90004fae:	693b      	ldr	r3, [r7, #16]
90004fb0:	4413      	add	r3, r2
90004fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fb6:	461a      	mov	r2, r3
90004fb8:	2320      	movs	r3, #32
90004fba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004fbc:	78fa      	ldrb	r2, [r7, #3]
90004fbe:	6879      	ldr	r1, [r7, #4]
90004fc0:	4613      	mov	r3, r2
90004fc2:	011b      	lsls	r3, r3, #4
90004fc4:	1a9b      	subs	r3, r3, r2
90004fc6:	009b      	lsls	r3, r3, #2
90004fc8:	440b      	add	r3, r1
90004fca:	3319      	adds	r3, #25
90004fcc:	781b      	ldrb	r3, [r3, #0]
90004fce:	2b01      	cmp	r3, #1
90004fd0:	d124      	bne.n	9000501c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004fd2:	78fa      	ldrb	r2, [r7, #3]
90004fd4:	6879      	ldr	r1, [r7, #4]
90004fd6:	4613      	mov	r3, r2
90004fd8:	011b      	lsls	r3, r3, #4
90004fda:	1a9b      	subs	r3, r3, r2
90004fdc:	009b      	lsls	r3, r3, #2
90004fde:	440b      	add	r3, r1
90004fe0:	3319      	adds	r3, #25
90004fe2:	2200      	movs	r2, #0
90004fe4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004fe6:	78fa      	ldrb	r2, [r7, #3]
90004fe8:	6879      	ldr	r1, [r7, #4]
90004fea:	4613      	mov	r3, r2
90004fec:	011b      	lsls	r3, r3, #4
90004fee:	1a9b      	subs	r3, r3, r2
90004ff0:	009b      	lsls	r3, r3, #2
90004ff2:	440b      	add	r3, r1
90004ff4:	334c      	adds	r3, #76	@ 0x4c
90004ff6:	2202      	movs	r2, #2
90004ff8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004ffa:	78fa      	ldrb	r2, [r7, #3]
90004ffc:	6879      	ldr	r1, [r7, #4]
90004ffe:	4613      	mov	r3, r2
90005000:	011b      	lsls	r3, r3, #4
90005002:	1a9b      	subs	r3, r3, r2
90005004:	009b      	lsls	r3, r3, #2
90005006:	440b      	add	r3, r1
90005008:	334d      	adds	r3, #77	@ 0x4d
9000500a:	2203      	movs	r2, #3
9000500c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000500e:	687b      	ldr	r3, [r7, #4]
90005010:	681b      	ldr	r3, [r3, #0]
90005012:	78fa      	ldrb	r2, [r7, #3]
90005014:	4611      	mov	r1, r2
90005016:	4618      	mov	r0, r3
90005018:	f006 fa00 	bl	9000b41c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
9000501c:	78fa      	ldrb	r2, [r7, #3]
9000501e:	6879      	ldr	r1, [r7, #4]
90005020:	4613      	mov	r3, r2
90005022:	011b      	lsls	r3, r3, #4
90005024:	1a9b      	subs	r3, r3, r2
90005026:	009b      	lsls	r3, r3, #2
90005028:	440b      	add	r3, r1
9000502a:	331a      	adds	r3, #26
9000502c:	781b      	ldrb	r3, [r3, #0]
9000502e:	2b01      	cmp	r3, #1
90005030:	f040 8437 	bne.w	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
90005034:	78fa      	ldrb	r2, [r7, #3]
90005036:	6879      	ldr	r1, [r7, #4]
90005038:	4613      	mov	r3, r2
9000503a:	011b      	lsls	r3, r3, #4
9000503c:	1a9b      	subs	r3, r3, r2
9000503e:	009b      	lsls	r3, r3, #2
90005040:	440b      	add	r3, r1
90005042:	331b      	adds	r3, #27
90005044:	781b      	ldrb	r3, [r3, #0]
90005046:	2b00      	cmp	r3, #0
90005048:	f040 842b 	bne.w	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
9000504c:	78fa      	ldrb	r2, [r7, #3]
9000504e:	6879      	ldr	r1, [r7, #4]
90005050:	4613      	mov	r3, r2
90005052:	011b      	lsls	r3, r3, #4
90005054:	1a9b      	subs	r3, r3, r2
90005056:	009b      	lsls	r3, r3, #2
90005058:	440b      	add	r3, r1
9000505a:	3326      	adds	r3, #38	@ 0x26
9000505c:	781b      	ldrb	r3, [r3, #0]
9000505e:	2b01      	cmp	r3, #1
90005060:	d009      	beq.n	90005076 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90005062:	78fa      	ldrb	r2, [r7, #3]
90005064:	6879      	ldr	r1, [r7, #4]
90005066:	4613      	mov	r3, r2
90005068:	011b      	lsls	r3, r3, #4
9000506a:	1a9b      	subs	r3, r3, r2
9000506c:	009b      	lsls	r3, r3, #2
9000506e:	440b      	add	r3, r1
90005070:	331b      	adds	r3, #27
90005072:	2201      	movs	r2, #1
90005074:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90005076:	78fa      	ldrb	r2, [r7, #3]
90005078:	6879      	ldr	r1, [r7, #4]
9000507a:	4613      	mov	r3, r2
9000507c:	011b      	lsls	r3, r3, #4
9000507e:	1a9b      	subs	r3, r3, r2
90005080:	009b      	lsls	r3, r3, #2
90005082:	440b      	add	r3, r1
90005084:	334d      	adds	r3, #77	@ 0x4d
90005086:	2203      	movs	r2, #3
90005088:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000508a:	687b      	ldr	r3, [r7, #4]
9000508c:	681b      	ldr	r3, [r3, #0]
9000508e:	78fa      	ldrb	r2, [r7, #3]
90005090:	4611      	mov	r1, r2
90005092:	4618      	mov	r0, r3
90005094:	f006 f9c2 	bl	9000b41c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90005098:	78fa      	ldrb	r2, [r7, #3]
9000509a:	6879      	ldr	r1, [r7, #4]
9000509c:	4613      	mov	r3, r2
9000509e:	011b      	lsls	r3, r3, #4
900050a0:	1a9b      	subs	r3, r3, r2
900050a2:	009b      	lsls	r3, r3, #2
900050a4:	440b      	add	r3, r1
900050a6:	3344      	adds	r3, #68	@ 0x44
900050a8:	2200      	movs	r2, #0
900050aa:	601a      	str	r2, [r3, #0]
900050ac:	e3f9      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900050ae:	687b      	ldr	r3, [r7, #4]
900050b0:	681b      	ldr	r3, [r3, #0]
900050b2:	78fa      	ldrb	r2, [r7, #3]
900050b4:	4611      	mov	r1, r2
900050b6:	4618      	mov	r0, r3
900050b8:	f006 f933 	bl	9000b322 <USB_ReadChInterrupts>
900050bc:	4603      	mov	r3, r0
900050be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900050c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
900050c6:	d111      	bne.n	900050ec <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900050c8:	78fb      	ldrb	r3, [r7, #3]
900050ca:	015a      	lsls	r2, r3, #5
900050cc:	693b      	ldr	r3, [r7, #16]
900050ce:	4413      	add	r3, r2
900050d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050d4:	461a      	mov	r2, r3
900050d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
900050da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900050dc:	687b      	ldr	r3, [r7, #4]
900050de:	681b      	ldr	r3, [r3, #0]
900050e0:	78fa      	ldrb	r2, [r7, #3]
900050e2:	4611      	mov	r1, r2
900050e4:	4618      	mov	r0, r3
900050e6:	f006 f999 	bl	9000b41c <USB_HC_Halt>
900050ea:	e3da      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900050ec:	687b      	ldr	r3, [r7, #4]
900050ee:	681b      	ldr	r3, [r3, #0]
900050f0:	78fa      	ldrb	r2, [r7, #3]
900050f2:	4611      	mov	r1, r2
900050f4:	4618      	mov	r0, r3
900050f6:	f006 f914 	bl	9000b322 <USB_ReadChInterrupts>
900050fa:	4603      	mov	r3, r0
900050fc:	f003 0301 	and.w	r3, r3, #1
90005100:	2b01      	cmp	r3, #1
90005102:	d168      	bne.n	900051d6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90005104:	78fa      	ldrb	r2, [r7, #3]
90005106:	6879      	ldr	r1, [r7, #4]
90005108:	4613      	mov	r3, r2
9000510a:	011b      	lsls	r3, r3, #4
9000510c:	1a9b      	subs	r3, r3, r2
9000510e:	009b      	lsls	r3, r3, #2
90005110:	440b      	add	r3, r1
90005112:	3344      	adds	r3, #68	@ 0x44
90005114:	2200      	movs	r2, #0
90005116:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90005118:	687b      	ldr	r3, [r7, #4]
9000511a:	681b      	ldr	r3, [r3, #0]
9000511c:	78fa      	ldrb	r2, [r7, #3]
9000511e:	4611      	mov	r1, r2
90005120:	4618      	mov	r0, r3
90005122:	f006 f8fe 	bl	9000b322 <USB_ReadChInterrupts>
90005126:	4603      	mov	r3, r0
90005128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000512c:	2b40      	cmp	r3, #64	@ 0x40
9000512e:	d112      	bne.n	90005156 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005130:	78fa      	ldrb	r2, [r7, #3]
90005132:	6879      	ldr	r1, [r7, #4]
90005134:	4613      	mov	r3, r2
90005136:	011b      	lsls	r3, r3, #4
90005138:	1a9b      	subs	r3, r3, r2
9000513a:	009b      	lsls	r3, r3, #2
9000513c:	440b      	add	r3, r1
9000513e:	3319      	adds	r3, #25
90005140:	2201      	movs	r2, #1
90005142:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005144:	78fb      	ldrb	r3, [r7, #3]
90005146:	015a      	lsls	r2, r3, #5
90005148:	693b      	ldr	r3, [r7, #16]
9000514a:	4413      	add	r3, r2
9000514c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005150:	461a      	mov	r2, r3
90005152:	2340      	movs	r3, #64	@ 0x40
90005154:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
90005156:	78fa      	ldrb	r2, [r7, #3]
90005158:	6879      	ldr	r1, [r7, #4]
9000515a:	4613      	mov	r3, r2
9000515c:	011b      	lsls	r3, r3, #4
9000515e:	1a9b      	subs	r3, r3, r2
90005160:	009b      	lsls	r3, r3, #2
90005162:	440b      	add	r3, r1
90005164:	331b      	adds	r3, #27
90005166:	781b      	ldrb	r3, [r3, #0]
90005168:	2b00      	cmp	r3, #0
9000516a:	d019      	beq.n	900051a0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
9000516c:	78fa      	ldrb	r2, [r7, #3]
9000516e:	6879      	ldr	r1, [r7, #4]
90005170:	4613      	mov	r3, r2
90005172:	011b      	lsls	r3, r3, #4
90005174:	1a9b      	subs	r3, r3, r2
90005176:	009b      	lsls	r3, r3, #2
90005178:	440b      	add	r3, r1
9000517a:	331b      	adds	r3, #27
9000517c:	2200      	movs	r2, #0
9000517e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005180:	78fb      	ldrb	r3, [r7, #3]
90005182:	015a      	lsls	r2, r3, #5
90005184:	693b      	ldr	r3, [r7, #16]
90005186:	4413      	add	r3, r2
90005188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000518c:	685b      	ldr	r3, [r3, #4]
9000518e:	78fa      	ldrb	r2, [r7, #3]
90005190:	0151      	lsls	r1, r2, #5
90005192:	693a      	ldr	r2, [r7, #16]
90005194:	440a      	add	r2, r1
90005196:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000519a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000519e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
900051a0:	78fb      	ldrb	r3, [r7, #3]
900051a2:	015a      	lsls	r2, r3, #5
900051a4:	693b      	ldr	r3, [r7, #16]
900051a6:	4413      	add	r3, r2
900051a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900051ac:	461a      	mov	r2, r3
900051ae:	2301      	movs	r3, #1
900051b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
900051b2:	78fa      	ldrb	r2, [r7, #3]
900051b4:	6879      	ldr	r1, [r7, #4]
900051b6:	4613      	mov	r3, r2
900051b8:	011b      	lsls	r3, r3, #4
900051ba:	1a9b      	subs	r3, r3, r2
900051bc:	009b      	lsls	r3, r3, #2
900051be:	440b      	add	r3, r1
900051c0:	334d      	adds	r3, #77	@ 0x4d
900051c2:	2201      	movs	r2, #1
900051c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900051c6:	687b      	ldr	r3, [r7, #4]
900051c8:	681b      	ldr	r3, [r3, #0]
900051ca:	78fa      	ldrb	r2, [r7, #3]
900051cc:	4611      	mov	r1, r2
900051ce:	4618      	mov	r0, r3
900051d0:	f006 f924 	bl	9000b41c <USB_HC_Halt>
900051d4:	e365      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
900051d6:	687b      	ldr	r3, [r7, #4]
900051d8:	681b      	ldr	r3, [r3, #0]
900051da:	78fa      	ldrb	r2, [r7, #3]
900051dc:	4611      	mov	r1, r2
900051de:	4618      	mov	r0, r3
900051e0:	f006 f89f 	bl	9000b322 <USB_ReadChInterrupts>
900051e4:	4603      	mov	r3, r0
900051e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900051ea:	2b40      	cmp	r3, #64	@ 0x40
900051ec:	d139      	bne.n	90005262 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
900051ee:	78fa      	ldrb	r2, [r7, #3]
900051f0:	6879      	ldr	r1, [r7, #4]
900051f2:	4613      	mov	r3, r2
900051f4:	011b      	lsls	r3, r3, #4
900051f6:	1a9b      	subs	r3, r3, r2
900051f8:	009b      	lsls	r3, r3, #2
900051fa:	440b      	add	r3, r1
900051fc:	334d      	adds	r3, #77	@ 0x4d
900051fe:	2205      	movs	r2, #5
90005200:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90005202:	78fa      	ldrb	r2, [r7, #3]
90005204:	6879      	ldr	r1, [r7, #4]
90005206:	4613      	mov	r3, r2
90005208:	011b      	lsls	r3, r3, #4
9000520a:	1a9b      	subs	r3, r3, r2
9000520c:	009b      	lsls	r3, r3, #2
9000520e:	440b      	add	r3, r1
90005210:	331a      	adds	r3, #26
90005212:	781b      	ldrb	r3, [r3, #0]
90005214:	2b00      	cmp	r3, #0
90005216:	d109      	bne.n	9000522c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005218:	78fa      	ldrb	r2, [r7, #3]
9000521a:	6879      	ldr	r1, [r7, #4]
9000521c:	4613      	mov	r3, r2
9000521e:	011b      	lsls	r3, r3, #4
90005220:	1a9b      	subs	r3, r3, r2
90005222:	009b      	lsls	r3, r3, #2
90005224:	440b      	add	r3, r1
90005226:	3319      	adds	r3, #25
90005228:	2201      	movs	r2, #1
9000522a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
9000522c:	78fa      	ldrb	r2, [r7, #3]
9000522e:	6879      	ldr	r1, [r7, #4]
90005230:	4613      	mov	r3, r2
90005232:	011b      	lsls	r3, r3, #4
90005234:	1a9b      	subs	r3, r3, r2
90005236:	009b      	lsls	r3, r3, #2
90005238:	440b      	add	r3, r1
9000523a:	3344      	adds	r3, #68	@ 0x44
9000523c:	2200      	movs	r2, #0
9000523e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005240:	687b      	ldr	r3, [r7, #4]
90005242:	681b      	ldr	r3, [r3, #0]
90005244:	78fa      	ldrb	r2, [r7, #3]
90005246:	4611      	mov	r1, r2
90005248:	4618      	mov	r0, r3
9000524a:	f006 f8e7 	bl	9000b41c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
9000524e:	78fb      	ldrb	r3, [r7, #3]
90005250:	015a      	lsls	r2, r3, #5
90005252:	693b      	ldr	r3, [r7, #16]
90005254:	4413      	add	r3, r2
90005256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000525a:	461a      	mov	r2, r3
9000525c:	2340      	movs	r3, #64	@ 0x40
9000525e:	6093      	str	r3, [r2, #8]
90005260:	e31f      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90005262:	687b      	ldr	r3, [r7, #4]
90005264:	681b      	ldr	r3, [r3, #0]
90005266:	78fa      	ldrb	r2, [r7, #3]
90005268:	4611      	mov	r1, r2
9000526a:	4618      	mov	r0, r3
9000526c:	f006 f859 	bl	9000b322 <USB_ReadChInterrupts>
90005270:	4603      	mov	r3, r0
90005272:	f003 0308 	and.w	r3, r3, #8
90005276:	2b08      	cmp	r3, #8
90005278:	d11a      	bne.n	900052b0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000527a:	78fb      	ldrb	r3, [r7, #3]
9000527c:	015a      	lsls	r2, r3, #5
9000527e:	693b      	ldr	r3, [r7, #16]
90005280:	4413      	add	r3, r2
90005282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005286:	461a      	mov	r2, r3
90005288:	2308      	movs	r3, #8
9000528a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
9000528c:	78fa      	ldrb	r2, [r7, #3]
9000528e:	6879      	ldr	r1, [r7, #4]
90005290:	4613      	mov	r3, r2
90005292:	011b      	lsls	r3, r3, #4
90005294:	1a9b      	subs	r3, r3, r2
90005296:	009b      	lsls	r3, r3, #2
90005298:	440b      	add	r3, r1
9000529a:	334d      	adds	r3, #77	@ 0x4d
9000529c:	2206      	movs	r2, #6
9000529e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900052a0:	687b      	ldr	r3, [r7, #4]
900052a2:	681b      	ldr	r3, [r3, #0]
900052a4:	78fa      	ldrb	r2, [r7, #3]
900052a6:	4611      	mov	r1, r2
900052a8:	4618      	mov	r0, r3
900052aa:	f006 f8b7 	bl	9000b41c <USB_HC_Halt>
900052ae:	e2f8      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
900052b0:	687b      	ldr	r3, [r7, #4]
900052b2:	681b      	ldr	r3, [r3, #0]
900052b4:	78fa      	ldrb	r2, [r7, #3]
900052b6:	4611      	mov	r1, r2
900052b8:	4618      	mov	r0, r3
900052ba:	f006 f832 	bl	9000b322 <USB_ReadChInterrupts>
900052be:	4603      	mov	r3, r0
900052c0:	f003 0310 	and.w	r3, r3, #16
900052c4:	2b10      	cmp	r3, #16
900052c6:	d144      	bne.n	90005352 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900052c8:	78fa      	ldrb	r2, [r7, #3]
900052ca:	6879      	ldr	r1, [r7, #4]
900052cc:	4613      	mov	r3, r2
900052ce:	011b      	lsls	r3, r3, #4
900052d0:	1a9b      	subs	r3, r3, r2
900052d2:	009b      	lsls	r3, r3, #2
900052d4:	440b      	add	r3, r1
900052d6:	3344      	adds	r3, #68	@ 0x44
900052d8:	2200      	movs	r2, #0
900052da:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
900052dc:	78fa      	ldrb	r2, [r7, #3]
900052de:	6879      	ldr	r1, [r7, #4]
900052e0:	4613      	mov	r3, r2
900052e2:	011b      	lsls	r3, r3, #4
900052e4:	1a9b      	subs	r3, r3, r2
900052e6:	009b      	lsls	r3, r3, #2
900052e8:	440b      	add	r3, r1
900052ea:	334d      	adds	r3, #77	@ 0x4d
900052ec:	2204      	movs	r2, #4
900052ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
900052f0:	78fa      	ldrb	r2, [r7, #3]
900052f2:	6879      	ldr	r1, [r7, #4]
900052f4:	4613      	mov	r3, r2
900052f6:	011b      	lsls	r3, r3, #4
900052f8:	1a9b      	subs	r3, r3, r2
900052fa:	009b      	lsls	r3, r3, #2
900052fc:	440b      	add	r3, r1
900052fe:	3319      	adds	r3, #25
90005300:	781b      	ldrb	r3, [r3, #0]
90005302:	2b00      	cmp	r3, #0
90005304:	d114      	bne.n	90005330 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
90005306:	78fa      	ldrb	r2, [r7, #3]
90005308:	6879      	ldr	r1, [r7, #4]
9000530a:	4613      	mov	r3, r2
9000530c:	011b      	lsls	r3, r3, #4
9000530e:	1a9b      	subs	r3, r3, r2
90005310:	009b      	lsls	r3, r3, #2
90005312:	440b      	add	r3, r1
90005314:	3318      	adds	r3, #24
90005316:	781b      	ldrb	r3, [r3, #0]
90005318:	2b00      	cmp	r3, #0
9000531a:	d109      	bne.n	90005330 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
9000531c:	78fa      	ldrb	r2, [r7, #3]
9000531e:	6879      	ldr	r1, [r7, #4]
90005320:	4613      	mov	r3, r2
90005322:	011b      	lsls	r3, r3, #4
90005324:	1a9b      	subs	r3, r3, r2
90005326:	009b      	lsls	r3, r3, #2
90005328:	440b      	add	r3, r1
9000532a:	3319      	adds	r3, #25
9000532c:	2201      	movs	r2, #1
9000532e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005330:	687b      	ldr	r3, [r7, #4]
90005332:	681b      	ldr	r3, [r3, #0]
90005334:	78fa      	ldrb	r2, [r7, #3]
90005336:	4611      	mov	r1, r2
90005338:	4618      	mov	r0, r3
9000533a:	f006 f86f 	bl	9000b41c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000533e:	78fb      	ldrb	r3, [r7, #3]
90005340:	015a      	lsls	r2, r3, #5
90005342:	693b      	ldr	r3, [r7, #16]
90005344:	4413      	add	r3, r2
90005346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000534a:	461a      	mov	r2, r3
9000534c:	2310      	movs	r3, #16
9000534e:	6093      	str	r3, [r2, #8]
90005350:	e2a7      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005352:	687b      	ldr	r3, [r7, #4]
90005354:	681b      	ldr	r3, [r3, #0]
90005356:	78fa      	ldrb	r2, [r7, #3]
90005358:	4611      	mov	r1, r2
9000535a:	4618      	mov	r0, r3
9000535c:	f005 ffe1 	bl	9000b322 <USB_ReadChInterrupts>
90005360:	4603      	mov	r3, r0
90005362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90005366:	2b80      	cmp	r3, #128	@ 0x80
90005368:	f040 8083 	bne.w	90005472 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
9000536c:	687b      	ldr	r3, [r7, #4]
9000536e:	799b      	ldrb	r3, [r3, #6]
90005370:	2b00      	cmp	r3, #0
90005372:	d111      	bne.n	90005398 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005374:	78fa      	ldrb	r2, [r7, #3]
90005376:	6879      	ldr	r1, [r7, #4]
90005378:	4613      	mov	r3, r2
9000537a:	011b      	lsls	r3, r3, #4
9000537c:	1a9b      	subs	r3, r3, r2
9000537e:	009b      	lsls	r3, r3, #2
90005380:	440b      	add	r3, r1
90005382:	334d      	adds	r3, #77	@ 0x4d
90005384:	2207      	movs	r2, #7
90005386:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005388:	687b      	ldr	r3, [r7, #4]
9000538a:	681b      	ldr	r3, [r3, #0]
9000538c:	78fa      	ldrb	r2, [r7, #3]
9000538e:	4611      	mov	r1, r2
90005390:	4618      	mov	r0, r3
90005392:	f006 f843 	bl	9000b41c <USB_HC_Halt>
90005396:	e062      	b.n	9000545e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005398:	78fa      	ldrb	r2, [r7, #3]
9000539a:	6879      	ldr	r1, [r7, #4]
9000539c:	4613      	mov	r3, r2
9000539e:	011b      	lsls	r3, r3, #4
900053a0:	1a9b      	subs	r3, r3, r2
900053a2:	009b      	lsls	r3, r3, #2
900053a4:	440b      	add	r3, r1
900053a6:	3344      	adds	r3, #68	@ 0x44
900053a8:	681b      	ldr	r3, [r3, #0]
900053aa:	1c59      	adds	r1, r3, #1
900053ac:	6878      	ldr	r0, [r7, #4]
900053ae:	4613      	mov	r3, r2
900053b0:	011b      	lsls	r3, r3, #4
900053b2:	1a9b      	subs	r3, r3, r2
900053b4:	009b      	lsls	r3, r3, #2
900053b6:	4403      	add	r3, r0
900053b8:	3344      	adds	r3, #68	@ 0x44
900053ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900053bc:	78fa      	ldrb	r2, [r7, #3]
900053be:	6879      	ldr	r1, [r7, #4]
900053c0:	4613      	mov	r3, r2
900053c2:	011b      	lsls	r3, r3, #4
900053c4:	1a9b      	subs	r3, r3, r2
900053c6:	009b      	lsls	r3, r3, #2
900053c8:	440b      	add	r3, r1
900053ca:	3344      	adds	r3, #68	@ 0x44
900053cc:	681b      	ldr	r3, [r3, #0]
900053ce:	2b02      	cmp	r3, #2
900053d0:	d922      	bls.n	90005418 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900053d2:	78fa      	ldrb	r2, [r7, #3]
900053d4:	6879      	ldr	r1, [r7, #4]
900053d6:	4613      	mov	r3, r2
900053d8:	011b      	lsls	r3, r3, #4
900053da:	1a9b      	subs	r3, r3, r2
900053dc:	009b      	lsls	r3, r3, #2
900053de:	440b      	add	r3, r1
900053e0:	3344      	adds	r3, #68	@ 0x44
900053e2:	2200      	movs	r2, #0
900053e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900053e6:	78fa      	ldrb	r2, [r7, #3]
900053e8:	6879      	ldr	r1, [r7, #4]
900053ea:	4613      	mov	r3, r2
900053ec:	011b      	lsls	r3, r3, #4
900053ee:	1a9b      	subs	r3, r3, r2
900053f0:	009b      	lsls	r3, r3, #2
900053f2:	440b      	add	r3, r1
900053f4:	334c      	adds	r3, #76	@ 0x4c
900053f6:	2204      	movs	r2, #4
900053f8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900053fa:	78fa      	ldrb	r2, [r7, #3]
900053fc:	6879      	ldr	r1, [r7, #4]
900053fe:	4613      	mov	r3, r2
90005400:	011b      	lsls	r3, r3, #4
90005402:	1a9b      	subs	r3, r3, r2
90005404:	009b      	lsls	r3, r3, #2
90005406:	440b      	add	r3, r1
90005408:	334c      	adds	r3, #76	@ 0x4c
9000540a:	781a      	ldrb	r2, [r3, #0]
9000540c:	78fb      	ldrb	r3, [r7, #3]
9000540e:	4619      	mov	r1, r3
90005410:	6878      	ldr	r0, [r7, #4]
90005412:	f7fb fec1 	bl	90001198 <HAL_HCD_HC_NotifyURBChange_Callback>
90005416:	e022      	b.n	9000545e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005418:	78fa      	ldrb	r2, [r7, #3]
9000541a:	6879      	ldr	r1, [r7, #4]
9000541c:	4613      	mov	r3, r2
9000541e:	011b      	lsls	r3, r3, #4
90005420:	1a9b      	subs	r3, r3, r2
90005422:	009b      	lsls	r3, r3, #2
90005424:	440b      	add	r3, r1
90005426:	334c      	adds	r3, #76	@ 0x4c
90005428:	2202      	movs	r2, #2
9000542a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000542c:	78fb      	ldrb	r3, [r7, #3]
9000542e:	015a      	lsls	r2, r3, #5
90005430:	693b      	ldr	r3, [r7, #16]
90005432:	4413      	add	r3, r2
90005434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005438:	681b      	ldr	r3, [r3, #0]
9000543a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000543c:	68fb      	ldr	r3, [r7, #12]
9000543e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005442:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005444:	68fb      	ldr	r3, [r7, #12]
90005446:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000544a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000544c:	78fb      	ldrb	r3, [r7, #3]
9000544e:	015a      	lsls	r2, r3, #5
90005450:	693b      	ldr	r3, [r7, #16]
90005452:	4413      	add	r3, r2
90005454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005458:	461a      	mov	r2, r3
9000545a:	68fb      	ldr	r3, [r7, #12]
9000545c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
9000545e:	78fb      	ldrb	r3, [r7, #3]
90005460:	015a      	lsls	r2, r3, #5
90005462:	693b      	ldr	r3, [r7, #16]
90005464:	4413      	add	r3, r2
90005466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000546a:	461a      	mov	r2, r3
9000546c:	2380      	movs	r3, #128	@ 0x80
9000546e:	6093      	str	r3, [r2, #8]
90005470:	e217      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90005472:	687b      	ldr	r3, [r7, #4]
90005474:	681b      	ldr	r3, [r3, #0]
90005476:	78fa      	ldrb	r2, [r7, #3]
90005478:	4611      	mov	r1, r2
9000547a:	4618      	mov	r0, r3
9000547c:	f005 ff51 	bl	9000b322 <USB_ReadChInterrupts>
90005480:	4603      	mov	r3, r0
90005482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90005486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000548a:	d11b      	bne.n	900054c4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000548c:	78fa      	ldrb	r2, [r7, #3]
9000548e:	6879      	ldr	r1, [r7, #4]
90005490:	4613      	mov	r3, r2
90005492:	011b      	lsls	r3, r3, #4
90005494:	1a9b      	subs	r3, r3, r2
90005496:	009b      	lsls	r3, r3, #2
90005498:	440b      	add	r3, r1
9000549a:	334d      	adds	r3, #77	@ 0x4d
9000549c:	2209      	movs	r2, #9
9000549e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900054a0:	687b      	ldr	r3, [r7, #4]
900054a2:	681b      	ldr	r3, [r3, #0]
900054a4:	78fa      	ldrb	r2, [r7, #3]
900054a6:	4611      	mov	r1, r2
900054a8:	4618      	mov	r0, r3
900054aa:	f005 ffb7 	bl	9000b41c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900054ae:	78fb      	ldrb	r3, [r7, #3]
900054b0:	015a      	lsls	r2, r3, #5
900054b2:	693b      	ldr	r3, [r7, #16]
900054b4:	4413      	add	r3, r2
900054b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054ba:	461a      	mov	r2, r3
900054bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900054c0:	6093      	str	r3, [r2, #8]
900054c2:	e1ee      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900054c4:	687b      	ldr	r3, [r7, #4]
900054c6:	681b      	ldr	r3, [r3, #0]
900054c8:	78fa      	ldrb	r2, [r7, #3]
900054ca:	4611      	mov	r1, r2
900054cc:	4618      	mov	r0, r3
900054ce:	f005 ff28 	bl	9000b322 <USB_ReadChInterrupts>
900054d2:	4603      	mov	r3, r0
900054d4:	f003 0302 	and.w	r3, r3, #2
900054d8:	2b02      	cmp	r3, #2
900054da:	f040 81df 	bne.w	9000589c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900054de:	78fb      	ldrb	r3, [r7, #3]
900054e0:	015a      	lsls	r2, r3, #5
900054e2:	693b      	ldr	r3, [r7, #16]
900054e4:	4413      	add	r3, r2
900054e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900054ea:	461a      	mov	r2, r3
900054ec:	2302      	movs	r3, #2
900054ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900054f0:	78fa      	ldrb	r2, [r7, #3]
900054f2:	6879      	ldr	r1, [r7, #4]
900054f4:	4613      	mov	r3, r2
900054f6:	011b      	lsls	r3, r3, #4
900054f8:	1a9b      	subs	r3, r3, r2
900054fa:	009b      	lsls	r3, r3, #2
900054fc:	440b      	add	r3, r1
900054fe:	334d      	adds	r3, #77	@ 0x4d
90005500:	781b      	ldrb	r3, [r3, #0]
90005502:	2b01      	cmp	r3, #1
90005504:	f040 8093 	bne.w	9000562e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005508:	78fa      	ldrb	r2, [r7, #3]
9000550a:	6879      	ldr	r1, [r7, #4]
9000550c:	4613      	mov	r3, r2
9000550e:	011b      	lsls	r3, r3, #4
90005510:	1a9b      	subs	r3, r3, r2
90005512:	009b      	lsls	r3, r3, #2
90005514:	440b      	add	r3, r1
90005516:	334d      	adds	r3, #77	@ 0x4d
90005518:	2202      	movs	r2, #2
9000551a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000551c:	78fa      	ldrb	r2, [r7, #3]
9000551e:	6879      	ldr	r1, [r7, #4]
90005520:	4613      	mov	r3, r2
90005522:	011b      	lsls	r3, r3, #4
90005524:	1a9b      	subs	r3, r3, r2
90005526:	009b      	lsls	r3, r3, #2
90005528:	440b      	add	r3, r1
9000552a:	334c      	adds	r3, #76	@ 0x4c
9000552c:	2201      	movs	r2, #1
9000552e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005530:	78fa      	ldrb	r2, [r7, #3]
90005532:	6879      	ldr	r1, [r7, #4]
90005534:	4613      	mov	r3, r2
90005536:	011b      	lsls	r3, r3, #4
90005538:	1a9b      	subs	r3, r3, r2
9000553a:	009b      	lsls	r3, r3, #2
9000553c:	440b      	add	r3, r1
9000553e:	3326      	adds	r3, #38	@ 0x26
90005540:	781b      	ldrb	r3, [r3, #0]
90005542:	2b02      	cmp	r3, #2
90005544:	d00b      	beq.n	9000555e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
90005546:	78fa      	ldrb	r2, [r7, #3]
90005548:	6879      	ldr	r1, [r7, #4]
9000554a:	4613      	mov	r3, r2
9000554c:	011b      	lsls	r3, r3, #4
9000554e:	1a9b      	subs	r3, r3, r2
90005550:	009b      	lsls	r3, r3, #2
90005552:	440b      	add	r3, r1
90005554:	3326      	adds	r3, #38	@ 0x26
90005556:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005558:	2b03      	cmp	r3, #3
9000555a:	f040 8190 	bne.w	9000587e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
9000555e:	687b      	ldr	r3, [r7, #4]
90005560:	799b      	ldrb	r3, [r3, #6]
90005562:	2b00      	cmp	r3, #0
90005564:	d115      	bne.n	90005592 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
90005566:	78fa      	ldrb	r2, [r7, #3]
90005568:	6879      	ldr	r1, [r7, #4]
9000556a:	4613      	mov	r3, r2
9000556c:	011b      	lsls	r3, r3, #4
9000556e:	1a9b      	subs	r3, r3, r2
90005570:	009b      	lsls	r3, r3, #2
90005572:	440b      	add	r3, r1
90005574:	333d      	adds	r3, #61	@ 0x3d
90005576:	781b      	ldrb	r3, [r3, #0]
90005578:	78fa      	ldrb	r2, [r7, #3]
9000557a:	f083 0301 	eor.w	r3, r3, #1
9000557e:	b2d8      	uxtb	r0, r3
90005580:	6879      	ldr	r1, [r7, #4]
90005582:	4613      	mov	r3, r2
90005584:	011b      	lsls	r3, r3, #4
90005586:	1a9b      	subs	r3, r3, r2
90005588:	009b      	lsls	r3, r3, #2
9000558a:	440b      	add	r3, r1
9000558c:	333d      	adds	r3, #61	@ 0x3d
9000558e:	4602      	mov	r2, r0
90005590:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
90005592:	687b      	ldr	r3, [r7, #4]
90005594:	799b      	ldrb	r3, [r3, #6]
90005596:	2b01      	cmp	r3, #1
90005598:	f040 8171 	bne.w	9000587e <HCD_HC_OUT_IRQHandler+0x954>
9000559c:	78fa      	ldrb	r2, [r7, #3]
9000559e:	6879      	ldr	r1, [r7, #4]
900055a0:	4613      	mov	r3, r2
900055a2:	011b      	lsls	r3, r3, #4
900055a4:	1a9b      	subs	r3, r3, r2
900055a6:	009b      	lsls	r3, r3, #2
900055a8:	440b      	add	r3, r1
900055aa:	3334      	adds	r3, #52	@ 0x34
900055ac:	681b      	ldr	r3, [r3, #0]
900055ae:	2b00      	cmp	r3, #0
900055b0:	f000 8165 	beq.w	9000587e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
900055b4:	78fa      	ldrb	r2, [r7, #3]
900055b6:	6879      	ldr	r1, [r7, #4]
900055b8:	4613      	mov	r3, r2
900055ba:	011b      	lsls	r3, r3, #4
900055bc:	1a9b      	subs	r3, r3, r2
900055be:	009b      	lsls	r3, r3, #2
900055c0:	440b      	add	r3, r1
900055c2:	3334      	adds	r3, #52	@ 0x34
900055c4:	6819      	ldr	r1, [r3, #0]
900055c6:	78fa      	ldrb	r2, [r7, #3]
900055c8:	6878      	ldr	r0, [r7, #4]
900055ca:	4613      	mov	r3, r2
900055cc:	011b      	lsls	r3, r3, #4
900055ce:	1a9b      	subs	r3, r3, r2
900055d0:	009b      	lsls	r3, r3, #2
900055d2:	4403      	add	r3, r0
900055d4:	3328      	adds	r3, #40	@ 0x28
900055d6:	881b      	ldrh	r3, [r3, #0]
900055d8:	440b      	add	r3, r1
900055da:	1e59      	subs	r1, r3, #1
900055dc:	78fa      	ldrb	r2, [r7, #3]
900055de:	6878      	ldr	r0, [r7, #4]
900055e0:	4613      	mov	r3, r2
900055e2:	011b      	lsls	r3, r3, #4
900055e4:	1a9b      	subs	r3, r3, r2
900055e6:	009b      	lsls	r3, r3, #2
900055e8:	4403      	add	r3, r0
900055ea:	3328      	adds	r3, #40	@ 0x28
900055ec:	881b      	ldrh	r3, [r3, #0]
900055ee:	fbb1 f3f3 	udiv	r3, r1, r3
900055f2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
900055f4:	68bb      	ldr	r3, [r7, #8]
900055f6:	f003 0301 	and.w	r3, r3, #1
900055fa:	2b00      	cmp	r3, #0
900055fc:	f000 813f 	beq.w	9000587e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005600:	78fa      	ldrb	r2, [r7, #3]
90005602:	6879      	ldr	r1, [r7, #4]
90005604:	4613      	mov	r3, r2
90005606:	011b      	lsls	r3, r3, #4
90005608:	1a9b      	subs	r3, r3, r2
9000560a:	009b      	lsls	r3, r3, #2
9000560c:	440b      	add	r3, r1
9000560e:	333d      	adds	r3, #61	@ 0x3d
90005610:	781b      	ldrb	r3, [r3, #0]
90005612:	78fa      	ldrb	r2, [r7, #3]
90005614:	f083 0301 	eor.w	r3, r3, #1
90005618:	b2d8      	uxtb	r0, r3
9000561a:	6879      	ldr	r1, [r7, #4]
9000561c:	4613      	mov	r3, r2
9000561e:	011b      	lsls	r3, r3, #4
90005620:	1a9b      	subs	r3, r3, r2
90005622:	009b      	lsls	r3, r3, #2
90005624:	440b      	add	r3, r1
90005626:	333d      	adds	r3, #61	@ 0x3d
90005628:	4602      	mov	r2, r0
9000562a:	701a      	strb	r2, [r3, #0]
9000562c:	e127      	b.n	9000587e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
9000562e:	78fa      	ldrb	r2, [r7, #3]
90005630:	6879      	ldr	r1, [r7, #4]
90005632:	4613      	mov	r3, r2
90005634:	011b      	lsls	r3, r3, #4
90005636:	1a9b      	subs	r3, r3, r2
90005638:	009b      	lsls	r3, r3, #2
9000563a:	440b      	add	r3, r1
9000563c:	334d      	adds	r3, #77	@ 0x4d
9000563e:	781b      	ldrb	r3, [r3, #0]
90005640:	2b03      	cmp	r3, #3
90005642:	d120      	bne.n	90005686 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005644:	78fa      	ldrb	r2, [r7, #3]
90005646:	6879      	ldr	r1, [r7, #4]
90005648:	4613      	mov	r3, r2
9000564a:	011b      	lsls	r3, r3, #4
9000564c:	1a9b      	subs	r3, r3, r2
9000564e:	009b      	lsls	r3, r3, #2
90005650:	440b      	add	r3, r1
90005652:	334d      	adds	r3, #77	@ 0x4d
90005654:	2202      	movs	r2, #2
90005656:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90005658:	78fa      	ldrb	r2, [r7, #3]
9000565a:	6879      	ldr	r1, [r7, #4]
9000565c:	4613      	mov	r3, r2
9000565e:	011b      	lsls	r3, r3, #4
90005660:	1a9b      	subs	r3, r3, r2
90005662:	009b      	lsls	r3, r3, #2
90005664:	440b      	add	r3, r1
90005666:	331b      	adds	r3, #27
90005668:	781b      	ldrb	r3, [r3, #0]
9000566a:	2b01      	cmp	r3, #1
9000566c:	f040 8107 	bne.w	9000587e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005670:	78fa      	ldrb	r2, [r7, #3]
90005672:	6879      	ldr	r1, [r7, #4]
90005674:	4613      	mov	r3, r2
90005676:	011b      	lsls	r3, r3, #4
90005678:	1a9b      	subs	r3, r3, r2
9000567a:	009b      	lsls	r3, r3, #2
9000567c:	440b      	add	r3, r1
9000567e:	334c      	adds	r3, #76	@ 0x4c
90005680:	2202      	movs	r2, #2
90005682:	701a      	strb	r2, [r3, #0]
90005684:	e0fb      	b.n	9000587e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90005686:	78fa      	ldrb	r2, [r7, #3]
90005688:	6879      	ldr	r1, [r7, #4]
9000568a:	4613      	mov	r3, r2
9000568c:	011b      	lsls	r3, r3, #4
9000568e:	1a9b      	subs	r3, r3, r2
90005690:	009b      	lsls	r3, r3, #2
90005692:	440b      	add	r3, r1
90005694:	334d      	adds	r3, #77	@ 0x4d
90005696:	781b      	ldrb	r3, [r3, #0]
90005698:	2b04      	cmp	r3, #4
9000569a:	d13a      	bne.n	90005712 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000569c:	78fa      	ldrb	r2, [r7, #3]
9000569e:	6879      	ldr	r1, [r7, #4]
900056a0:	4613      	mov	r3, r2
900056a2:	011b      	lsls	r3, r3, #4
900056a4:	1a9b      	subs	r3, r3, r2
900056a6:	009b      	lsls	r3, r3, #2
900056a8:	440b      	add	r3, r1
900056aa:	334d      	adds	r3, #77	@ 0x4d
900056ac:	2202      	movs	r2, #2
900056ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900056b0:	78fa      	ldrb	r2, [r7, #3]
900056b2:	6879      	ldr	r1, [r7, #4]
900056b4:	4613      	mov	r3, r2
900056b6:	011b      	lsls	r3, r3, #4
900056b8:	1a9b      	subs	r3, r3, r2
900056ba:	009b      	lsls	r3, r3, #2
900056bc:	440b      	add	r3, r1
900056be:	334c      	adds	r3, #76	@ 0x4c
900056c0:	2202      	movs	r2, #2
900056c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900056c4:	78fa      	ldrb	r2, [r7, #3]
900056c6:	6879      	ldr	r1, [r7, #4]
900056c8:	4613      	mov	r3, r2
900056ca:	011b      	lsls	r3, r3, #4
900056cc:	1a9b      	subs	r3, r3, r2
900056ce:	009b      	lsls	r3, r3, #2
900056d0:	440b      	add	r3, r1
900056d2:	331b      	adds	r3, #27
900056d4:	781b      	ldrb	r3, [r3, #0]
900056d6:	2b01      	cmp	r3, #1
900056d8:	f040 80d1 	bne.w	9000587e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
900056dc:	78fa      	ldrb	r2, [r7, #3]
900056de:	6879      	ldr	r1, [r7, #4]
900056e0:	4613      	mov	r3, r2
900056e2:	011b      	lsls	r3, r3, #4
900056e4:	1a9b      	subs	r3, r3, r2
900056e6:	009b      	lsls	r3, r3, #2
900056e8:	440b      	add	r3, r1
900056ea:	331b      	adds	r3, #27
900056ec:	2200      	movs	r2, #0
900056ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900056f0:	78fb      	ldrb	r3, [r7, #3]
900056f2:	015a      	lsls	r2, r3, #5
900056f4:	693b      	ldr	r3, [r7, #16]
900056f6:	4413      	add	r3, r2
900056f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900056fc:	685b      	ldr	r3, [r3, #4]
900056fe:	78fa      	ldrb	r2, [r7, #3]
90005700:	0151      	lsls	r1, r2, #5
90005702:	693a      	ldr	r2, [r7, #16]
90005704:	440a      	add	r2, r1
90005706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000570a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000570e:	6053      	str	r3, [r2, #4]
90005710:	e0b5      	b.n	9000587e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90005712:	78fa      	ldrb	r2, [r7, #3]
90005714:	6879      	ldr	r1, [r7, #4]
90005716:	4613      	mov	r3, r2
90005718:	011b      	lsls	r3, r3, #4
9000571a:	1a9b      	subs	r3, r3, r2
9000571c:	009b      	lsls	r3, r3, #2
9000571e:	440b      	add	r3, r1
90005720:	334d      	adds	r3, #77	@ 0x4d
90005722:	781b      	ldrb	r3, [r3, #0]
90005724:	2b05      	cmp	r3, #5
90005726:	d114      	bne.n	90005752 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005728:	78fa      	ldrb	r2, [r7, #3]
9000572a:	6879      	ldr	r1, [r7, #4]
9000572c:	4613      	mov	r3, r2
9000572e:	011b      	lsls	r3, r3, #4
90005730:	1a9b      	subs	r3, r3, r2
90005732:	009b      	lsls	r3, r3, #2
90005734:	440b      	add	r3, r1
90005736:	334d      	adds	r3, #77	@ 0x4d
90005738:	2202      	movs	r2, #2
9000573a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
9000573c:	78fa      	ldrb	r2, [r7, #3]
9000573e:	6879      	ldr	r1, [r7, #4]
90005740:	4613      	mov	r3, r2
90005742:	011b      	lsls	r3, r3, #4
90005744:	1a9b      	subs	r3, r3, r2
90005746:	009b      	lsls	r3, r3, #2
90005748:	440b      	add	r3, r1
9000574a:	334c      	adds	r3, #76	@ 0x4c
9000574c:	2202      	movs	r2, #2
9000574e:	701a      	strb	r2, [r3, #0]
90005750:	e095      	b.n	9000587e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005752:	78fa      	ldrb	r2, [r7, #3]
90005754:	6879      	ldr	r1, [r7, #4]
90005756:	4613      	mov	r3, r2
90005758:	011b      	lsls	r3, r3, #4
9000575a:	1a9b      	subs	r3, r3, r2
9000575c:	009b      	lsls	r3, r3, #2
9000575e:	440b      	add	r3, r1
90005760:	334d      	adds	r3, #77	@ 0x4d
90005762:	781b      	ldrb	r3, [r3, #0]
90005764:	2b06      	cmp	r3, #6
90005766:	d114      	bne.n	90005792 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005768:	78fa      	ldrb	r2, [r7, #3]
9000576a:	6879      	ldr	r1, [r7, #4]
9000576c:	4613      	mov	r3, r2
9000576e:	011b      	lsls	r3, r3, #4
90005770:	1a9b      	subs	r3, r3, r2
90005772:	009b      	lsls	r3, r3, #2
90005774:	440b      	add	r3, r1
90005776:	334d      	adds	r3, #77	@ 0x4d
90005778:	2202      	movs	r2, #2
9000577a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
9000577c:	78fa      	ldrb	r2, [r7, #3]
9000577e:	6879      	ldr	r1, [r7, #4]
90005780:	4613      	mov	r3, r2
90005782:	011b      	lsls	r3, r3, #4
90005784:	1a9b      	subs	r3, r3, r2
90005786:	009b      	lsls	r3, r3, #2
90005788:	440b      	add	r3, r1
9000578a:	334c      	adds	r3, #76	@ 0x4c
9000578c:	2205      	movs	r2, #5
9000578e:	701a      	strb	r2, [r3, #0]
90005790:	e075      	b.n	9000587e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005792:	78fa      	ldrb	r2, [r7, #3]
90005794:	6879      	ldr	r1, [r7, #4]
90005796:	4613      	mov	r3, r2
90005798:	011b      	lsls	r3, r3, #4
9000579a:	1a9b      	subs	r3, r3, r2
9000579c:	009b      	lsls	r3, r3, #2
9000579e:	440b      	add	r3, r1
900057a0:	334d      	adds	r3, #77	@ 0x4d
900057a2:	781b      	ldrb	r3, [r3, #0]
900057a4:	2b07      	cmp	r3, #7
900057a6:	d00a      	beq.n	900057be <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900057a8:	78fa      	ldrb	r2, [r7, #3]
900057aa:	6879      	ldr	r1, [r7, #4]
900057ac:	4613      	mov	r3, r2
900057ae:	011b      	lsls	r3, r3, #4
900057b0:	1a9b      	subs	r3, r3, r2
900057b2:	009b      	lsls	r3, r3, #2
900057b4:	440b      	add	r3, r1
900057b6:	334d      	adds	r3, #77	@ 0x4d
900057b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900057ba:	2b09      	cmp	r3, #9
900057bc:	d170      	bne.n	900058a0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900057be:	78fa      	ldrb	r2, [r7, #3]
900057c0:	6879      	ldr	r1, [r7, #4]
900057c2:	4613      	mov	r3, r2
900057c4:	011b      	lsls	r3, r3, #4
900057c6:	1a9b      	subs	r3, r3, r2
900057c8:	009b      	lsls	r3, r3, #2
900057ca:	440b      	add	r3, r1
900057cc:	334d      	adds	r3, #77	@ 0x4d
900057ce:	2202      	movs	r2, #2
900057d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900057d2:	78fa      	ldrb	r2, [r7, #3]
900057d4:	6879      	ldr	r1, [r7, #4]
900057d6:	4613      	mov	r3, r2
900057d8:	011b      	lsls	r3, r3, #4
900057da:	1a9b      	subs	r3, r3, r2
900057dc:	009b      	lsls	r3, r3, #2
900057de:	440b      	add	r3, r1
900057e0:	3344      	adds	r3, #68	@ 0x44
900057e2:	681b      	ldr	r3, [r3, #0]
900057e4:	1c59      	adds	r1, r3, #1
900057e6:	6878      	ldr	r0, [r7, #4]
900057e8:	4613      	mov	r3, r2
900057ea:	011b      	lsls	r3, r3, #4
900057ec:	1a9b      	subs	r3, r3, r2
900057ee:	009b      	lsls	r3, r3, #2
900057f0:	4403      	add	r3, r0
900057f2:	3344      	adds	r3, #68	@ 0x44
900057f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900057f6:	78fa      	ldrb	r2, [r7, #3]
900057f8:	6879      	ldr	r1, [r7, #4]
900057fa:	4613      	mov	r3, r2
900057fc:	011b      	lsls	r3, r3, #4
900057fe:	1a9b      	subs	r3, r3, r2
90005800:	009b      	lsls	r3, r3, #2
90005802:	440b      	add	r3, r1
90005804:	3344      	adds	r3, #68	@ 0x44
90005806:	681b      	ldr	r3, [r3, #0]
90005808:	2b02      	cmp	r3, #2
9000580a:	d914      	bls.n	90005836 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
9000580c:	78fa      	ldrb	r2, [r7, #3]
9000580e:	6879      	ldr	r1, [r7, #4]
90005810:	4613      	mov	r3, r2
90005812:	011b      	lsls	r3, r3, #4
90005814:	1a9b      	subs	r3, r3, r2
90005816:	009b      	lsls	r3, r3, #2
90005818:	440b      	add	r3, r1
9000581a:	3344      	adds	r3, #68	@ 0x44
9000581c:	2200      	movs	r2, #0
9000581e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005820:	78fa      	ldrb	r2, [r7, #3]
90005822:	6879      	ldr	r1, [r7, #4]
90005824:	4613      	mov	r3, r2
90005826:	011b      	lsls	r3, r3, #4
90005828:	1a9b      	subs	r3, r3, r2
9000582a:	009b      	lsls	r3, r3, #2
9000582c:	440b      	add	r3, r1
9000582e:	334c      	adds	r3, #76	@ 0x4c
90005830:	2204      	movs	r2, #4
90005832:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005834:	e022      	b.n	9000587c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005836:	78fa      	ldrb	r2, [r7, #3]
90005838:	6879      	ldr	r1, [r7, #4]
9000583a:	4613      	mov	r3, r2
9000583c:	011b      	lsls	r3, r3, #4
9000583e:	1a9b      	subs	r3, r3, r2
90005840:	009b      	lsls	r3, r3, #2
90005842:	440b      	add	r3, r1
90005844:	334c      	adds	r3, #76	@ 0x4c
90005846:	2202      	movs	r2, #2
90005848:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000584a:	78fb      	ldrb	r3, [r7, #3]
9000584c:	015a      	lsls	r2, r3, #5
9000584e:	693b      	ldr	r3, [r7, #16]
90005850:	4413      	add	r3, r2
90005852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005856:	681b      	ldr	r3, [r3, #0]
90005858:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000585a:	68fb      	ldr	r3, [r7, #12]
9000585c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005860:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005862:	68fb      	ldr	r3, [r7, #12]
90005864:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005868:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000586a:	78fb      	ldrb	r3, [r7, #3]
9000586c:	015a      	lsls	r2, r3, #5
9000586e:	693b      	ldr	r3, [r7, #16]
90005870:	4413      	add	r3, r2
90005872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005876:	461a      	mov	r2, r3
90005878:	68fb      	ldr	r3, [r7, #12]
9000587a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000587c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000587e:	78fa      	ldrb	r2, [r7, #3]
90005880:	6879      	ldr	r1, [r7, #4]
90005882:	4613      	mov	r3, r2
90005884:	011b      	lsls	r3, r3, #4
90005886:	1a9b      	subs	r3, r3, r2
90005888:	009b      	lsls	r3, r3, #2
9000588a:	440b      	add	r3, r1
9000588c:	334c      	adds	r3, #76	@ 0x4c
9000588e:	781a      	ldrb	r2, [r3, #0]
90005890:	78fb      	ldrb	r3, [r7, #3]
90005892:	4619      	mov	r1, r3
90005894:	6878      	ldr	r0, [r7, #4]
90005896:	f7fb fc7f 	bl	90001198 <HAL_HCD_HC_NotifyURBChange_Callback>
9000589a:	e002      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
9000589c:	bf00      	nop
9000589e:	e000      	b.n	900058a2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
900058a0:	bf00      	nop
  }
}
900058a2:	3718      	adds	r7, #24
900058a4:	46bd      	mov	sp, r7
900058a6:	bd80      	pop	{r7, pc}

900058a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900058a8:	b580      	push	{r7, lr}
900058aa:	b08a      	sub	sp, #40	@ 0x28
900058ac:	af00      	add	r7, sp, #0
900058ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900058b0:	687b      	ldr	r3, [r7, #4]
900058b2:	681b      	ldr	r3, [r3, #0]
900058b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
900058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900058b8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
900058ba:	687b      	ldr	r3, [r7, #4]
900058bc:	681b      	ldr	r3, [r3, #0]
900058be:	6a1b      	ldr	r3, [r3, #32]
900058c0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
900058c2:	69fb      	ldr	r3, [r7, #28]
900058c4:	f003 030f 	and.w	r3, r3, #15
900058c8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
900058ca:	69fb      	ldr	r3, [r7, #28]
900058cc:	0c5b      	lsrs	r3, r3, #17
900058ce:	f003 030f 	and.w	r3, r3, #15
900058d2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
900058d4:	69fb      	ldr	r3, [r7, #28]
900058d6:	091b      	lsrs	r3, r3, #4
900058d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
900058dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
900058de:	697b      	ldr	r3, [r7, #20]
900058e0:	2b02      	cmp	r3, #2
900058e2:	d004      	beq.n	900058ee <HCD_RXQLVL_IRQHandler+0x46>
900058e4:	697b      	ldr	r3, [r7, #20]
900058e6:	2b05      	cmp	r3, #5
900058e8:	f000 80b6 	beq.w	90005a58 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900058ec:	e0b7      	b.n	90005a5e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900058ee:	693b      	ldr	r3, [r7, #16]
900058f0:	2b00      	cmp	r3, #0
900058f2:	f000 80b3 	beq.w	90005a5c <HCD_RXQLVL_IRQHandler+0x1b4>
900058f6:	6879      	ldr	r1, [r7, #4]
900058f8:	69ba      	ldr	r2, [r7, #24]
900058fa:	4613      	mov	r3, r2
900058fc:	011b      	lsls	r3, r3, #4
900058fe:	1a9b      	subs	r3, r3, r2
90005900:	009b      	lsls	r3, r3, #2
90005902:	440b      	add	r3, r1
90005904:	332c      	adds	r3, #44	@ 0x2c
90005906:	681b      	ldr	r3, [r3, #0]
90005908:	2b00      	cmp	r3, #0
9000590a:	f000 80a7 	beq.w	90005a5c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
9000590e:	6879      	ldr	r1, [r7, #4]
90005910:	69ba      	ldr	r2, [r7, #24]
90005912:	4613      	mov	r3, r2
90005914:	011b      	lsls	r3, r3, #4
90005916:	1a9b      	subs	r3, r3, r2
90005918:	009b      	lsls	r3, r3, #2
9000591a:	440b      	add	r3, r1
9000591c:	3338      	adds	r3, #56	@ 0x38
9000591e:	681a      	ldr	r2, [r3, #0]
90005920:	693b      	ldr	r3, [r7, #16]
90005922:	18d1      	adds	r1, r2, r3
90005924:	6878      	ldr	r0, [r7, #4]
90005926:	69ba      	ldr	r2, [r7, #24]
90005928:	4613      	mov	r3, r2
9000592a:	011b      	lsls	r3, r3, #4
9000592c:	1a9b      	subs	r3, r3, r2
9000592e:	009b      	lsls	r3, r3, #2
90005930:	4403      	add	r3, r0
90005932:	3334      	adds	r3, #52	@ 0x34
90005934:	681b      	ldr	r3, [r3, #0]
90005936:	4299      	cmp	r1, r3
90005938:	f200 8083 	bhi.w	90005a42 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
9000593c:	687b      	ldr	r3, [r7, #4]
9000593e:	6818      	ldr	r0, [r3, #0]
90005940:	6879      	ldr	r1, [r7, #4]
90005942:	69ba      	ldr	r2, [r7, #24]
90005944:	4613      	mov	r3, r2
90005946:	011b      	lsls	r3, r3, #4
90005948:	1a9b      	subs	r3, r3, r2
9000594a:	009b      	lsls	r3, r3, #2
9000594c:	440b      	add	r3, r1
9000594e:	332c      	adds	r3, #44	@ 0x2c
90005950:	681b      	ldr	r3, [r3, #0]
90005952:	693a      	ldr	r2, [r7, #16]
90005954:	b292      	uxth	r2, r2
90005956:	4619      	mov	r1, r3
90005958:	f005 fc78 	bl	9000b24c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
9000595c:	6879      	ldr	r1, [r7, #4]
9000595e:	69ba      	ldr	r2, [r7, #24]
90005960:	4613      	mov	r3, r2
90005962:	011b      	lsls	r3, r3, #4
90005964:	1a9b      	subs	r3, r3, r2
90005966:	009b      	lsls	r3, r3, #2
90005968:	440b      	add	r3, r1
9000596a:	332c      	adds	r3, #44	@ 0x2c
9000596c:	681a      	ldr	r2, [r3, #0]
9000596e:	693b      	ldr	r3, [r7, #16]
90005970:	18d1      	adds	r1, r2, r3
90005972:	6878      	ldr	r0, [r7, #4]
90005974:	69ba      	ldr	r2, [r7, #24]
90005976:	4613      	mov	r3, r2
90005978:	011b      	lsls	r3, r3, #4
9000597a:	1a9b      	subs	r3, r3, r2
9000597c:	009b      	lsls	r3, r3, #2
9000597e:	4403      	add	r3, r0
90005980:	332c      	adds	r3, #44	@ 0x2c
90005982:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005984:	6879      	ldr	r1, [r7, #4]
90005986:	69ba      	ldr	r2, [r7, #24]
90005988:	4613      	mov	r3, r2
9000598a:	011b      	lsls	r3, r3, #4
9000598c:	1a9b      	subs	r3, r3, r2
9000598e:	009b      	lsls	r3, r3, #2
90005990:	440b      	add	r3, r1
90005992:	3338      	adds	r3, #56	@ 0x38
90005994:	681a      	ldr	r2, [r3, #0]
90005996:	693b      	ldr	r3, [r7, #16]
90005998:	18d1      	adds	r1, r2, r3
9000599a:	6878      	ldr	r0, [r7, #4]
9000599c:	69ba      	ldr	r2, [r7, #24]
9000599e:	4613      	mov	r3, r2
900059a0:	011b      	lsls	r3, r3, #4
900059a2:	1a9b      	subs	r3, r3, r2
900059a4:	009b      	lsls	r3, r3, #2
900059a6:	4403      	add	r3, r0
900059a8:	3338      	adds	r3, #56	@ 0x38
900059aa:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
900059ac:	69bb      	ldr	r3, [r7, #24]
900059ae:	015a      	lsls	r2, r3, #5
900059b0:	6a3b      	ldr	r3, [r7, #32]
900059b2:	4413      	add	r3, r2
900059b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900059b8:	691b      	ldr	r3, [r3, #16]
900059ba:	0cdb      	lsrs	r3, r3, #19
900059bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
900059c0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
900059c2:	6879      	ldr	r1, [r7, #4]
900059c4:	69ba      	ldr	r2, [r7, #24]
900059c6:	4613      	mov	r3, r2
900059c8:	011b      	lsls	r3, r3, #4
900059ca:	1a9b      	subs	r3, r3, r2
900059cc:	009b      	lsls	r3, r3, #2
900059ce:	440b      	add	r3, r1
900059d0:	3328      	adds	r3, #40	@ 0x28
900059d2:	881b      	ldrh	r3, [r3, #0]
900059d4:	461a      	mov	r2, r3
900059d6:	693b      	ldr	r3, [r7, #16]
900059d8:	4293      	cmp	r3, r2
900059da:	d13f      	bne.n	90005a5c <HCD_RXQLVL_IRQHandler+0x1b4>
900059dc:	68fb      	ldr	r3, [r7, #12]
900059de:	2b00      	cmp	r3, #0
900059e0:	d03c      	beq.n	90005a5c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
900059e2:	69bb      	ldr	r3, [r7, #24]
900059e4:	015a      	lsls	r2, r3, #5
900059e6:	6a3b      	ldr	r3, [r7, #32]
900059e8:	4413      	add	r3, r2
900059ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900059ee:	681b      	ldr	r3, [r3, #0]
900059f0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900059f2:	68bb      	ldr	r3, [r7, #8]
900059f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900059f8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
900059fa:	68bb      	ldr	r3, [r7, #8]
900059fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90005a00:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
90005a02:	69bb      	ldr	r3, [r7, #24]
90005a04:	015a      	lsls	r2, r3, #5
90005a06:	6a3b      	ldr	r3, [r7, #32]
90005a08:	4413      	add	r3, r2
90005a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005a0e:	461a      	mov	r2, r3
90005a10:	68bb      	ldr	r3, [r7, #8]
90005a12:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90005a14:	6879      	ldr	r1, [r7, #4]
90005a16:	69ba      	ldr	r2, [r7, #24]
90005a18:	4613      	mov	r3, r2
90005a1a:	011b      	lsls	r3, r3, #4
90005a1c:	1a9b      	subs	r3, r3, r2
90005a1e:	009b      	lsls	r3, r3, #2
90005a20:	440b      	add	r3, r1
90005a22:	333c      	adds	r3, #60	@ 0x3c
90005a24:	781b      	ldrb	r3, [r3, #0]
90005a26:	f083 0301 	eor.w	r3, r3, #1
90005a2a:	b2d8      	uxtb	r0, r3
90005a2c:	6879      	ldr	r1, [r7, #4]
90005a2e:	69ba      	ldr	r2, [r7, #24]
90005a30:	4613      	mov	r3, r2
90005a32:	011b      	lsls	r3, r3, #4
90005a34:	1a9b      	subs	r3, r3, r2
90005a36:	009b      	lsls	r3, r3, #2
90005a38:	440b      	add	r3, r1
90005a3a:	333c      	adds	r3, #60	@ 0x3c
90005a3c:	4602      	mov	r2, r0
90005a3e:	701a      	strb	r2, [r3, #0]
      break;
90005a40:	e00c      	b.n	90005a5c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90005a42:	6879      	ldr	r1, [r7, #4]
90005a44:	69ba      	ldr	r2, [r7, #24]
90005a46:	4613      	mov	r3, r2
90005a48:	011b      	lsls	r3, r3, #4
90005a4a:	1a9b      	subs	r3, r3, r2
90005a4c:	009b      	lsls	r3, r3, #2
90005a4e:	440b      	add	r3, r1
90005a50:	334c      	adds	r3, #76	@ 0x4c
90005a52:	2204      	movs	r2, #4
90005a54:	701a      	strb	r2, [r3, #0]
      break;
90005a56:	e001      	b.n	90005a5c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
90005a58:	bf00      	nop
90005a5a:	e000      	b.n	90005a5e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90005a5c:	bf00      	nop
  }
}
90005a5e:	bf00      	nop
90005a60:	3728      	adds	r7, #40	@ 0x28
90005a62:	46bd      	mov	sp, r7
90005a64:	bd80      	pop	{r7, pc}

90005a66 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005a66:	b580      	push	{r7, lr}
90005a68:	b086      	sub	sp, #24
90005a6a:	af00      	add	r7, sp, #0
90005a6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005a6e:	687b      	ldr	r3, [r7, #4]
90005a70:	681b      	ldr	r3, [r3, #0]
90005a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005a74:	697b      	ldr	r3, [r7, #20]
90005a76:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005a78:	693b      	ldr	r3, [r7, #16]
90005a7a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005a7e:	681b      	ldr	r3, [r3, #0]
90005a80:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005a82:	693b      	ldr	r3, [r7, #16]
90005a84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005a88:	681b      	ldr	r3, [r3, #0]
90005a8a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90005a8c:	68bb      	ldr	r3, [r7, #8]
90005a8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90005a92:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005a94:	68fb      	ldr	r3, [r7, #12]
90005a96:	f003 0302 	and.w	r3, r3, #2
90005a9a:	2b02      	cmp	r3, #2
90005a9c:	d10b      	bne.n	90005ab6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005a9e:	68fb      	ldr	r3, [r7, #12]
90005aa0:	f003 0301 	and.w	r3, r3, #1
90005aa4:	2b01      	cmp	r3, #1
90005aa6:	d102      	bne.n	90005aae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005aa8:	6878      	ldr	r0, [r7, #4]
90005aaa:	f7fb fb3d 	bl	90001128 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
90005aae:	68bb      	ldr	r3, [r7, #8]
90005ab0:	f043 0302 	orr.w	r3, r3, #2
90005ab4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005ab6:	68fb      	ldr	r3, [r7, #12]
90005ab8:	f003 0308 	and.w	r3, r3, #8
90005abc:	2b08      	cmp	r3, #8
90005abe:	d132      	bne.n	90005b26 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90005ac0:	68bb      	ldr	r3, [r7, #8]
90005ac2:	f043 0308 	orr.w	r3, r3, #8
90005ac6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005ac8:	68fb      	ldr	r3, [r7, #12]
90005aca:	f003 0304 	and.w	r3, r3, #4
90005ace:	2b04      	cmp	r3, #4
90005ad0:	d126      	bne.n	90005b20 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005ad2:	687b      	ldr	r3, [r7, #4]
90005ad4:	7a5b      	ldrb	r3, [r3, #9]
90005ad6:	2b02      	cmp	r3, #2
90005ad8:	d113      	bne.n	90005b02 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005ada:	68fb      	ldr	r3, [r7, #12]
90005adc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
90005ae0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90005ae4:	d106      	bne.n	90005af4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005ae6:	687b      	ldr	r3, [r7, #4]
90005ae8:	681b      	ldr	r3, [r3, #0]
90005aea:	2102      	movs	r1, #2
90005aec:	4618      	mov	r0, r3
90005aee:	f005 fc47 	bl	9000b380 <USB_InitFSLSPClkSel>
90005af2:	e011      	b.n	90005b18 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90005af4:	687b      	ldr	r3, [r7, #4]
90005af6:	681b      	ldr	r3, [r3, #0]
90005af8:	2101      	movs	r1, #1
90005afa:	4618      	mov	r0, r3
90005afc:	f005 fc40 	bl	9000b380 <USB_InitFSLSPClkSel>
90005b00:	e00a      	b.n	90005b18 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
90005b02:	687b      	ldr	r3, [r7, #4]
90005b04:	79db      	ldrb	r3, [r3, #7]
90005b06:	2b01      	cmp	r3, #1
90005b08:	d106      	bne.n	90005b18 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
90005b0a:	693b      	ldr	r3, [r7, #16]
90005b0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005b10:	461a      	mov	r2, r3
90005b12:	f64e 2360 	movw	r3, #60000	@ 0xea60
90005b16:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005b18:	6878      	ldr	r0, [r7, #4]
90005b1a:	f7fb fb21 	bl	90001160 <HAL_HCD_PortEnabled_Callback>
90005b1e:	e002      	b.n	90005b26 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005b20:	6878      	ldr	r0, [r7, #4]
90005b22:	f7fb fb2b 	bl	9000117c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90005b26:	68fb      	ldr	r3, [r7, #12]
90005b28:	f003 0320 	and.w	r3, r3, #32
90005b2c:	2b20      	cmp	r3, #32
90005b2e:	d103      	bne.n	90005b38 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005b30:	68bb      	ldr	r3, [r7, #8]
90005b32:	f043 0320 	orr.w	r3, r3, #32
90005b36:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005b38:	693b      	ldr	r3, [r7, #16]
90005b3a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005b3e:	461a      	mov	r2, r3
90005b40:	68bb      	ldr	r3, [r7, #8]
90005b42:	6013      	str	r3, [r2, #0]
}
90005b44:	bf00      	nop
90005b46:	3718      	adds	r7, #24
90005b48:	46bd      	mov	sp, r7
90005b4a:	bd80      	pop	{r7, pc}

90005b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005b4c:	b580      	push	{r7, lr}
90005b4e:	b082      	sub	sp, #8
90005b50:	af00      	add	r7, sp, #0
90005b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005b54:	687b      	ldr	r3, [r7, #4]
90005b56:	2b00      	cmp	r3, #0
90005b58:	d101      	bne.n	90005b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005b5a:	2301      	movs	r3, #1
90005b5c:	e08b      	b.n	90005c76 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005b5e:	687b      	ldr	r3, [r7, #4]
90005b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005b64:	b2db      	uxtb	r3, r3
90005b66:	2b00      	cmp	r3, #0
90005b68:	d106      	bne.n	90005b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005b6a:	687b      	ldr	r3, [r7, #4]
90005b6c:	2200      	movs	r2, #0
90005b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005b72:	6878      	ldr	r0, [r7, #4]
90005b74:	f000 f886 	bl	90005c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005b78:	687b      	ldr	r3, [r7, #4]
90005b7a:	2224      	movs	r2, #36	@ 0x24
90005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005b80:	687b      	ldr	r3, [r7, #4]
90005b82:	681b      	ldr	r3, [r3, #0]
90005b84:	681a      	ldr	r2, [r3, #0]
90005b86:	687b      	ldr	r3, [r7, #4]
90005b88:	681b      	ldr	r3, [r3, #0]
90005b8a:	f022 0201 	bic.w	r2, r2, #1
90005b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005b90:	687b      	ldr	r3, [r7, #4]
90005b92:	685a      	ldr	r2, [r3, #4]
90005b94:	687b      	ldr	r3, [r7, #4]
90005b96:	681b      	ldr	r3, [r3, #0]
90005b98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005b9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005b9e:	687b      	ldr	r3, [r7, #4]
90005ba0:	681b      	ldr	r3, [r3, #0]
90005ba2:	689a      	ldr	r2, [r3, #8]
90005ba4:	687b      	ldr	r3, [r7, #4]
90005ba6:	681b      	ldr	r3, [r3, #0]
90005ba8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005bac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005bae:	687b      	ldr	r3, [r7, #4]
90005bb0:	68db      	ldr	r3, [r3, #12]
90005bb2:	2b01      	cmp	r3, #1
90005bb4:	d107      	bne.n	90005bc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005bb6:	687b      	ldr	r3, [r7, #4]
90005bb8:	689a      	ldr	r2, [r3, #8]
90005bba:	687b      	ldr	r3, [r7, #4]
90005bbc:	681b      	ldr	r3, [r3, #0]
90005bbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005bc2:	609a      	str	r2, [r3, #8]
90005bc4:	e006      	b.n	90005bd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005bc6:	687b      	ldr	r3, [r7, #4]
90005bc8:	689a      	ldr	r2, [r3, #8]
90005bca:	687b      	ldr	r3, [r7, #4]
90005bcc:	681b      	ldr	r3, [r3, #0]
90005bce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005bd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005bd4:	687b      	ldr	r3, [r7, #4]
90005bd6:	68db      	ldr	r3, [r3, #12]
90005bd8:	2b02      	cmp	r3, #2
90005bda:	d108      	bne.n	90005bee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005bdc:	687b      	ldr	r3, [r7, #4]
90005bde:	681b      	ldr	r3, [r3, #0]
90005be0:	685a      	ldr	r2, [r3, #4]
90005be2:	687b      	ldr	r3, [r7, #4]
90005be4:	681b      	ldr	r3, [r3, #0]
90005be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005bea:	605a      	str	r2, [r3, #4]
90005bec:	e007      	b.n	90005bfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005bee:	687b      	ldr	r3, [r7, #4]
90005bf0:	681b      	ldr	r3, [r3, #0]
90005bf2:	685a      	ldr	r2, [r3, #4]
90005bf4:	687b      	ldr	r3, [r7, #4]
90005bf6:	681b      	ldr	r3, [r3, #0]
90005bf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005bfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005bfe:	687b      	ldr	r3, [r7, #4]
90005c00:	681b      	ldr	r3, [r3, #0]
90005c02:	6859      	ldr	r1, [r3, #4]
90005c04:	687b      	ldr	r3, [r7, #4]
90005c06:	681a      	ldr	r2, [r3, #0]
90005c08:	4b1d      	ldr	r3, [pc, #116]	@ (90005c80 <HAL_I2C_Init+0x134>)
90005c0a:	430b      	orrs	r3, r1
90005c0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005c0e:	687b      	ldr	r3, [r7, #4]
90005c10:	681b      	ldr	r3, [r3, #0]
90005c12:	68da      	ldr	r2, [r3, #12]
90005c14:	687b      	ldr	r3, [r7, #4]
90005c16:	681b      	ldr	r3, [r3, #0]
90005c18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005c1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005c1e:	687b      	ldr	r3, [r7, #4]
90005c20:	691a      	ldr	r2, [r3, #16]
90005c22:	687b      	ldr	r3, [r7, #4]
90005c24:	695b      	ldr	r3, [r3, #20]
90005c26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005c2a:	687b      	ldr	r3, [r7, #4]
90005c2c:	699b      	ldr	r3, [r3, #24]
90005c2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005c30:	687b      	ldr	r3, [r7, #4]
90005c32:	681b      	ldr	r3, [r3, #0]
90005c34:	430a      	orrs	r2, r1
90005c36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005c38:	687b      	ldr	r3, [r7, #4]
90005c3a:	69d9      	ldr	r1, [r3, #28]
90005c3c:	687b      	ldr	r3, [r7, #4]
90005c3e:	6a1a      	ldr	r2, [r3, #32]
90005c40:	687b      	ldr	r3, [r7, #4]
90005c42:	681b      	ldr	r3, [r3, #0]
90005c44:	430a      	orrs	r2, r1
90005c46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005c48:	687b      	ldr	r3, [r7, #4]
90005c4a:	681b      	ldr	r3, [r3, #0]
90005c4c:	681a      	ldr	r2, [r3, #0]
90005c4e:	687b      	ldr	r3, [r7, #4]
90005c50:	681b      	ldr	r3, [r3, #0]
90005c52:	f042 0201 	orr.w	r2, r2, #1
90005c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005c58:	687b      	ldr	r3, [r7, #4]
90005c5a:	2200      	movs	r2, #0
90005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005c5e:	687b      	ldr	r3, [r7, #4]
90005c60:	2220      	movs	r2, #32
90005c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005c66:	687b      	ldr	r3, [r7, #4]
90005c68:	2200      	movs	r2, #0
90005c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005c6c:	687b      	ldr	r3, [r7, #4]
90005c6e:	2200      	movs	r2, #0
90005c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005c74:	2300      	movs	r3, #0
}
90005c76:	4618      	mov	r0, r3
90005c78:	3708      	adds	r7, #8
90005c7a:	46bd      	mov	sp, r7
90005c7c:	bd80      	pop	{r7, pc}
90005c7e:	bf00      	nop
90005c80:	02008000 	.word	0x02008000

90005c84 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005c84:	b480      	push	{r7}
90005c86:	b083      	sub	sp, #12
90005c88:	af00      	add	r7, sp, #0
90005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005c8c:	bf00      	nop
90005c8e:	370c      	adds	r7, #12
90005c90:	46bd      	mov	sp, r7
90005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
90005c96:	4770      	bx	lr

90005c98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005c98:	b580      	push	{r7, lr}
90005c9a:	b088      	sub	sp, #32
90005c9c:	af02      	add	r7, sp, #8
90005c9e:	60f8      	str	r0, [r7, #12]
90005ca0:	4608      	mov	r0, r1
90005ca2:	4611      	mov	r1, r2
90005ca4:	461a      	mov	r2, r3
90005ca6:	4603      	mov	r3, r0
90005ca8:	817b      	strh	r3, [r7, #10]
90005caa:	460b      	mov	r3, r1
90005cac:	813b      	strh	r3, [r7, #8]
90005cae:	4613      	mov	r3, r2
90005cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005cb2:	68fb      	ldr	r3, [r7, #12]
90005cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005cb8:	b2db      	uxtb	r3, r3
90005cba:	2b20      	cmp	r3, #32
90005cbc:	f040 80fd 	bne.w	90005eba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005cc0:	6a3b      	ldr	r3, [r7, #32]
90005cc2:	2b00      	cmp	r3, #0
90005cc4:	d002      	beq.n	90005ccc <HAL_I2C_Mem_Read+0x34>
90005cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005cc8:	2b00      	cmp	r3, #0
90005cca:	d105      	bne.n	90005cd8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005ccc:	68fb      	ldr	r3, [r7, #12]
90005cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005cd2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005cd4:	2301      	movs	r3, #1
90005cd6:	e0f1      	b.n	90005ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005cd8:	68fb      	ldr	r3, [r7, #12]
90005cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005cde:	2b01      	cmp	r3, #1
90005ce0:	d101      	bne.n	90005ce6 <HAL_I2C_Mem_Read+0x4e>
90005ce2:	2302      	movs	r3, #2
90005ce4:	e0ea      	b.n	90005ebc <HAL_I2C_Mem_Read+0x224>
90005ce6:	68fb      	ldr	r3, [r7, #12]
90005ce8:	2201      	movs	r2, #1
90005cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005cee:	f7fd fafb 	bl	900032e8 <HAL_GetTick>
90005cf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005cf4:	697b      	ldr	r3, [r7, #20]
90005cf6:	9300      	str	r3, [sp, #0]
90005cf8:	2319      	movs	r3, #25
90005cfa:	2201      	movs	r2, #1
90005cfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005d00:	68f8      	ldr	r0, [r7, #12]
90005d02:	f000 f975 	bl	90005ff0 <I2C_WaitOnFlagUntilTimeout>
90005d06:	4603      	mov	r3, r0
90005d08:	2b00      	cmp	r3, #0
90005d0a:	d001      	beq.n	90005d10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005d0c:	2301      	movs	r3, #1
90005d0e:	e0d5      	b.n	90005ebc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005d10:	68fb      	ldr	r3, [r7, #12]
90005d12:	2222      	movs	r2, #34	@ 0x22
90005d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005d18:	68fb      	ldr	r3, [r7, #12]
90005d1a:	2240      	movs	r2, #64	@ 0x40
90005d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005d20:	68fb      	ldr	r3, [r7, #12]
90005d22:	2200      	movs	r2, #0
90005d24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005d26:	68fb      	ldr	r3, [r7, #12]
90005d28:	6a3a      	ldr	r2, [r7, #32]
90005d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005d2c:	68fb      	ldr	r3, [r7, #12]
90005d2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005d32:	68fb      	ldr	r3, [r7, #12]
90005d34:	2200      	movs	r2, #0
90005d36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005d38:	88f8      	ldrh	r0, [r7, #6]
90005d3a:	893a      	ldrh	r2, [r7, #8]
90005d3c:	8979      	ldrh	r1, [r7, #10]
90005d3e:	697b      	ldr	r3, [r7, #20]
90005d40:	9301      	str	r3, [sp, #4]
90005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005d44:	9300      	str	r3, [sp, #0]
90005d46:	4603      	mov	r3, r0
90005d48:	68f8      	ldr	r0, [r7, #12]
90005d4a:	f000 f8d9 	bl	90005f00 <I2C_RequestMemoryRead>
90005d4e:	4603      	mov	r3, r0
90005d50:	2b00      	cmp	r3, #0
90005d52:	d005      	beq.n	90005d60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005d54:	68fb      	ldr	r3, [r7, #12]
90005d56:	2200      	movs	r2, #0
90005d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005d5c:	2301      	movs	r3, #1
90005d5e:	e0ad      	b.n	90005ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005d60:	68fb      	ldr	r3, [r7, #12]
90005d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d64:	b29b      	uxth	r3, r3
90005d66:	2bff      	cmp	r3, #255	@ 0xff
90005d68:	d90e      	bls.n	90005d88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005d6a:	68fb      	ldr	r3, [r7, #12]
90005d6c:	22ff      	movs	r2, #255	@ 0xff
90005d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005d70:	68fb      	ldr	r3, [r7, #12]
90005d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d74:	b2da      	uxtb	r2, r3
90005d76:	8979      	ldrh	r1, [r7, #10]
90005d78:	4b52      	ldr	r3, [pc, #328]	@ (90005ec4 <HAL_I2C_Mem_Read+0x22c>)
90005d7a:	9300      	str	r3, [sp, #0]
90005d7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005d80:	68f8      	ldr	r0, [r7, #12]
90005d82:	f000 faf9 	bl	90006378 <I2C_TransferConfig>
90005d86:	e00f      	b.n	90005da8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005d88:	68fb      	ldr	r3, [r7, #12]
90005d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d8c:	b29a      	uxth	r2, r3
90005d8e:	68fb      	ldr	r3, [r7, #12]
90005d90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005d92:	68fb      	ldr	r3, [r7, #12]
90005d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d96:	b2da      	uxtb	r2, r3
90005d98:	8979      	ldrh	r1, [r7, #10]
90005d9a:	4b4a      	ldr	r3, [pc, #296]	@ (90005ec4 <HAL_I2C_Mem_Read+0x22c>)
90005d9c:	9300      	str	r3, [sp, #0]
90005d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005da2:	68f8      	ldr	r0, [r7, #12]
90005da4:	f000 fae8 	bl	90006378 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005da8:	697b      	ldr	r3, [r7, #20]
90005daa:	9300      	str	r3, [sp, #0]
90005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005dae:	2200      	movs	r2, #0
90005db0:	2104      	movs	r1, #4
90005db2:	68f8      	ldr	r0, [r7, #12]
90005db4:	f000 f91c 	bl	90005ff0 <I2C_WaitOnFlagUntilTimeout>
90005db8:	4603      	mov	r3, r0
90005dba:	2b00      	cmp	r3, #0
90005dbc:	d001      	beq.n	90005dc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005dbe:	2301      	movs	r3, #1
90005dc0:	e07c      	b.n	90005ebc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005dc2:	68fb      	ldr	r3, [r7, #12]
90005dc4:	681b      	ldr	r3, [r3, #0]
90005dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005dc8:	68fb      	ldr	r3, [r7, #12]
90005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005dcc:	b2d2      	uxtb	r2, r2
90005dce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005dd0:	68fb      	ldr	r3, [r7, #12]
90005dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005dd4:	1c5a      	adds	r2, r3, #1
90005dd6:	68fb      	ldr	r3, [r7, #12]
90005dd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005dda:	68fb      	ldr	r3, [r7, #12]
90005ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005dde:	3b01      	subs	r3, #1
90005de0:	b29a      	uxth	r2, r3
90005de2:	68fb      	ldr	r3, [r7, #12]
90005de4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005de6:	68fb      	ldr	r3, [r7, #12]
90005de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005dea:	b29b      	uxth	r3, r3
90005dec:	3b01      	subs	r3, #1
90005dee:	b29a      	uxth	r2, r3
90005df0:	68fb      	ldr	r3, [r7, #12]
90005df2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005df4:	68fb      	ldr	r3, [r7, #12]
90005df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005df8:	b29b      	uxth	r3, r3
90005dfa:	2b00      	cmp	r3, #0
90005dfc:	d034      	beq.n	90005e68 <HAL_I2C_Mem_Read+0x1d0>
90005dfe:	68fb      	ldr	r3, [r7, #12]
90005e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e02:	2b00      	cmp	r3, #0
90005e04:	d130      	bne.n	90005e68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005e06:	697b      	ldr	r3, [r7, #20]
90005e08:	9300      	str	r3, [sp, #0]
90005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005e0c:	2200      	movs	r2, #0
90005e0e:	2180      	movs	r1, #128	@ 0x80
90005e10:	68f8      	ldr	r0, [r7, #12]
90005e12:	f000 f8ed 	bl	90005ff0 <I2C_WaitOnFlagUntilTimeout>
90005e16:	4603      	mov	r3, r0
90005e18:	2b00      	cmp	r3, #0
90005e1a:	d001      	beq.n	90005e20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005e1c:	2301      	movs	r3, #1
90005e1e:	e04d      	b.n	90005ebc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005e20:	68fb      	ldr	r3, [r7, #12]
90005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e24:	b29b      	uxth	r3, r3
90005e26:	2bff      	cmp	r3, #255	@ 0xff
90005e28:	d90e      	bls.n	90005e48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005e2a:	68fb      	ldr	r3, [r7, #12]
90005e2c:	22ff      	movs	r2, #255	@ 0xff
90005e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005e30:	68fb      	ldr	r3, [r7, #12]
90005e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e34:	b2da      	uxtb	r2, r3
90005e36:	8979      	ldrh	r1, [r7, #10]
90005e38:	2300      	movs	r3, #0
90005e3a:	9300      	str	r3, [sp, #0]
90005e3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005e40:	68f8      	ldr	r0, [r7, #12]
90005e42:	f000 fa99 	bl	90006378 <I2C_TransferConfig>
90005e46:	e00f      	b.n	90005e68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005e48:	68fb      	ldr	r3, [r7, #12]
90005e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e4c:	b29a      	uxth	r2, r3
90005e4e:	68fb      	ldr	r3, [r7, #12]
90005e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005e52:	68fb      	ldr	r3, [r7, #12]
90005e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005e56:	b2da      	uxtb	r2, r3
90005e58:	8979      	ldrh	r1, [r7, #10]
90005e5a:	2300      	movs	r3, #0
90005e5c:	9300      	str	r3, [sp, #0]
90005e5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005e62:	68f8      	ldr	r0, [r7, #12]
90005e64:	f000 fa88 	bl	90006378 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005e68:	68fb      	ldr	r3, [r7, #12]
90005e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005e6c:	b29b      	uxth	r3, r3
90005e6e:	2b00      	cmp	r3, #0
90005e70:	d19a      	bne.n	90005da8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005e72:	697a      	ldr	r2, [r7, #20]
90005e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005e76:	68f8      	ldr	r0, [r7, #12]
90005e78:	f000 f95a 	bl	90006130 <I2C_WaitOnSTOPFlagUntilTimeout>
90005e7c:	4603      	mov	r3, r0
90005e7e:	2b00      	cmp	r3, #0
90005e80:	d001      	beq.n	90005e86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005e82:	2301      	movs	r3, #1
90005e84:	e01a      	b.n	90005ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005e86:	68fb      	ldr	r3, [r7, #12]
90005e88:	681b      	ldr	r3, [r3, #0]
90005e8a:	2220      	movs	r2, #32
90005e8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005e8e:	68fb      	ldr	r3, [r7, #12]
90005e90:	681b      	ldr	r3, [r3, #0]
90005e92:	6859      	ldr	r1, [r3, #4]
90005e94:	68fb      	ldr	r3, [r7, #12]
90005e96:	681a      	ldr	r2, [r3, #0]
90005e98:	4b0b      	ldr	r3, [pc, #44]	@ (90005ec8 <HAL_I2C_Mem_Read+0x230>)
90005e9a:	400b      	ands	r3, r1
90005e9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005e9e:	68fb      	ldr	r3, [r7, #12]
90005ea0:	2220      	movs	r2, #32
90005ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005ea6:	68fb      	ldr	r3, [r7, #12]
90005ea8:	2200      	movs	r2, #0
90005eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005eae:	68fb      	ldr	r3, [r7, #12]
90005eb0:	2200      	movs	r2, #0
90005eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005eb6:	2300      	movs	r3, #0
90005eb8:	e000      	b.n	90005ebc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005eba:	2302      	movs	r3, #2
  }
}
90005ebc:	4618      	mov	r0, r3
90005ebe:	3718      	adds	r7, #24
90005ec0:	46bd      	mov	sp, r7
90005ec2:	bd80      	pop	{r7, pc}
90005ec4:	80002400 	.word	0x80002400
90005ec8:	fe00e800 	.word	0xfe00e800

90005ecc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005ecc:	b480      	push	{r7}
90005ece:	b083      	sub	sp, #12
90005ed0:	af00      	add	r7, sp, #0
90005ed2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005ed4:	687b      	ldr	r3, [r7, #4]
90005ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005eda:	b2db      	uxtb	r3, r3
}
90005edc:	4618      	mov	r0, r3
90005ede:	370c      	adds	r7, #12
90005ee0:	46bd      	mov	sp, r7
90005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
90005ee6:	4770      	bx	lr

90005ee8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005ee8:	b480      	push	{r7}
90005eea:	b083      	sub	sp, #12
90005eec:	af00      	add	r7, sp, #0
90005eee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005ef0:	687b      	ldr	r3, [r7, #4]
90005ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005ef4:	4618      	mov	r0, r3
90005ef6:	370c      	adds	r7, #12
90005ef8:	46bd      	mov	sp, r7
90005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
90005efe:	4770      	bx	lr

90005f00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005f00:	b580      	push	{r7, lr}
90005f02:	b086      	sub	sp, #24
90005f04:	af02      	add	r7, sp, #8
90005f06:	60f8      	str	r0, [r7, #12]
90005f08:	4608      	mov	r0, r1
90005f0a:	4611      	mov	r1, r2
90005f0c:	461a      	mov	r2, r3
90005f0e:	4603      	mov	r3, r0
90005f10:	817b      	strh	r3, [r7, #10]
90005f12:	460b      	mov	r3, r1
90005f14:	813b      	strh	r3, [r7, #8]
90005f16:	4613      	mov	r3, r2
90005f18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005f1a:	88fb      	ldrh	r3, [r7, #6]
90005f1c:	b2da      	uxtb	r2, r3
90005f1e:	8979      	ldrh	r1, [r7, #10]
90005f20:	4b20      	ldr	r3, [pc, #128]	@ (90005fa4 <I2C_RequestMemoryRead+0xa4>)
90005f22:	9300      	str	r3, [sp, #0]
90005f24:	2300      	movs	r3, #0
90005f26:	68f8      	ldr	r0, [r7, #12]
90005f28:	f000 fa26 	bl	90006378 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005f2c:	69fa      	ldr	r2, [r7, #28]
90005f2e:	69b9      	ldr	r1, [r7, #24]
90005f30:	68f8      	ldr	r0, [r7, #12]
90005f32:	f000 f8b6 	bl	900060a2 <I2C_WaitOnTXISFlagUntilTimeout>
90005f36:	4603      	mov	r3, r0
90005f38:	2b00      	cmp	r3, #0
90005f3a:	d001      	beq.n	90005f40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005f3c:	2301      	movs	r3, #1
90005f3e:	e02c      	b.n	90005f9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005f40:	88fb      	ldrh	r3, [r7, #6]
90005f42:	2b01      	cmp	r3, #1
90005f44:	d105      	bne.n	90005f52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005f46:	893b      	ldrh	r3, [r7, #8]
90005f48:	b2da      	uxtb	r2, r3
90005f4a:	68fb      	ldr	r3, [r7, #12]
90005f4c:	681b      	ldr	r3, [r3, #0]
90005f4e:	629a      	str	r2, [r3, #40]	@ 0x28
90005f50:	e015      	b.n	90005f7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005f52:	893b      	ldrh	r3, [r7, #8]
90005f54:	0a1b      	lsrs	r3, r3, #8
90005f56:	b29b      	uxth	r3, r3
90005f58:	b2da      	uxtb	r2, r3
90005f5a:	68fb      	ldr	r3, [r7, #12]
90005f5c:	681b      	ldr	r3, [r3, #0]
90005f5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005f60:	69fa      	ldr	r2, [r7, #28]
90005f62:	69b9      	ldr	r1, [r7, #24]
90005f64:	68f8      	ldr	r0, [r7, #12]
90005f66:	f000 f89c 	bl	900060a2 <I2C_WaitOnTXISFlagUntilTimeout>
90005f6a:	4603      	mov	r3, r0
90005f6c:	2b00      	cmp	r3, #0
90005f6e:	d001      	beq.n	90005f74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005f70:	2301      	movs	r3, #1
90005f72:	e012      	b.n	90005f9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005f74:	893b      	ldrh	r3, [r7, #8]
90005f76:	b2da      	uxtb	r2, r3
90005f78:	68fb      	ldr	r3, [r7, #12]
90005f7a:	681b      	ldr	r3, [r3, #0]
90005f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005f7e:	69fb      	ldr	r3, [r7, #28]
90005f80:	9300      	str	r3, [sp, #0]
90005f82:	69bb      	ldr	r3, [r7, #24]
90005f84:	2200      	movs	r2, #0
90005f86:	2140      	movs	r1, #64	@ 0x40
90005f88:	68f8      	ldr	r0, [r7, #12]
90005f8a:	f000 f831 	bl	90005ff0 <I2C_WaitOnFlagUntilTimeout>
90005f8e:	4603      	mov	r3, r0
90005f90:	2b00      	cmp	r3, #0
90005f92:	d001      	beq.n	90005f98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005f94:	2301      	movs	r3, #1
90005f96:	e000      	b.n	90005f9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005f98:	2300      	movs	r3, #0
}
90005f9a:	4618      	mov	r0, r3
90005f9c:	3710      	adds	r7, #16
90005f9e:	46bd      	mov	sp, r7
90005fa0:	bd80      	pop	{r7, pc}
90005fa2:	bf00      	nop
90005fa4:	80002000 	.word	0x80002000

90005fa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005fa8:	b480      	push	{r7}
90005faa:	b083      	sub	sp, #12
90005fac:	af00      	add	r7, sp, #0
90005fae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005fb0:	687b      	ldr	r3, [r7, #4]
90005fb2:	681b      	ldr	r3, [r3, #0]
90005fb4:	699b      	ldr	r3, [r3, #24]
90005fb6:	f003 0302 	and.w	r3, r3, #2
90005fba:	2b02      	cmp	r3, #2
90005fbc:	d103      	bne.n	90005fc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005fbe:	687b      	ldr	r3, [r7, #4]
90005fc0:	681b      	ldr	r3, [r3, #0]
90005fc2:	2200      	movs	r2, #0
90005fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005fc6:	687b      	ldr	r3, [r7, #4]
90005fc8:	681b      	ldr	r3, [r3, #0]
90005fca:	699b      	ldr	r3, [r3, #24]
90005fcc:	f003 0301 	and.w	r3, r3, #1
90005fd0:	2b01      	cmp	r3, #1
90005fd2:	d007      	beq.n	90005fe4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005fd4:	687b      	ldr	r3, [r7, #4]
90005fd6:	681b      	ldr	r3, [r3, #0]
90005fd8:	699a      	ldr	r2, [r3, #24]
90005fda:	687b      	ldr	r3, [r7, #4]
90005fdc:	681b      	ldr	r3, [r3, #0]
90005fde:	f042 0201 	orr.w	r2, r2, #1
90005fe2:	619a      	str	r2, [r3, #24]
  }
}
90005fe4:	bf00      	nop
90005fe6:	370c      	adds	r7, #12
90005fe8:	46bd      	mov	sp, r7
90005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
90005fee:	4770      	bx	lr

90005ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005ff0:	b580      	push	{r7, lr}
90005ff2:	b084      	sub	sp, #16
90005ff4:	af00      	add	r7, sp, #0
90005ff6:	60f8      	str	r0, [r7, #12]
90005ff8:	60b9      	str	r1, [r7, #8]
90005ffa:	603b      	str	r3, [r7, #0]
90005ffc:	4613      	mov	r3, r2
90005ffe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90006000:	e03b      	b.n	9000607a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006002:	69ba      	ldr	r2, [r7, #24]
90006004:	6839      	ldr	r1, [r7, #0]
90006006:	68f8      	ldr	r0, [r7, #12]
90006008:	f000 f8d6 	bl	900061b8 <I2C_IsErrorOccurred>
9000600c:	4603      	mov	r3, r0
9000600e:	2b00      	cmp	r3, #0
90006010:	d001      	beq.n	90006016 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90006012:	2301      	movs	r3, #1
90006014:	e041      	b.n	9000609a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90006016:	683b      	ldr	r3, [r7, #0]
90006018:	f1b3 3fff 	cmp.w	r3, #4294967295
9000601c:	d02d      	beq.n	9000607a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000601e:	f7fd f963 	bl	900032e8 <HAL_GetTick>
90006022:	4602      	mov	r2, r0
90006024:	69bb      	ldr	r3, [r7, #24]
90006026:	1ad3      	subs	r3, r2, r3
90006028:	683a      	ldr	r2, [r7, #0]
9000602a:	429a      	cmp	r2, r3
9000602c:	d302      	bcc.n	90006034 <I2C_WaitOnFlagUntilTimeout+0x44>
9000602e:	683b      	ldr	r3, [r7, #0]
90006030:	2b00      	cmp	r3, #0
90006032:	d122      	bne.n	9000607a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90006034:	68fb      	ldr	r3, [r7, #12]
90006036:	681b      	ldr	r3, [r3, #0]
90006038:	699a      	ldr	r2, [r3, #24]
9000603a:	68bb      	ldr	r3, [r7, #8]
9000603c:	4013      	ands	r3, r2
9000603e:	68ba      	ldr	r2, [r7, #8]
90006040:	429a      	cmp	r2, r3
90006042:	bf0c      	ite	eq
90006044:	2301      	moveq	r3, #1
90006046:	2300      	movne	r3, #0
90006048:	b2db      	uxtb	r3, r3
9000604a:	461a      	mov	r2, r3
9000604c:	79fb      	ldrb	r3, [r7, #7]
9000604e:	429a      	cmp	r2, r3
90006050:	d113      	bne.n	9000607a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006052:	68fb      	ldr	r3, [r7, #12]
90006054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90006056:	f043 0220 	orr.w	r2, r3, #32
9000605a:	68fb      	ldr	r3, [r7, #12]
9000605c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000605e:	68fb      	ldr	r3, [r7, #12]
90006060:	2220      	movs	r2, #32
90006062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006066:	68fb      	ldr	r3, [r7, #12]
90006068:	2200      	movs	r2, #0
9000606a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
9000606e:	68fb      	ldr	r3, [r7, #12]
90006070:	2200      	movs	r2, #0
90006072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90006076:	2301      	movs	r3, #1
90006078:	e00f      	b.n	9000609a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000607a:	68fb      	ldr	r3, [r7, #12]
9000607c:	681b      	ldr	r3, [r3, #0]
9000607e:	699a      	ldr	r2, [r3, #24]
90006080:	68bb      	ldr	r3, [r7, #8]
90006082:	4013      	ands	r3, r2
90006084:	68ba      	ldr	r2, [r7, #8]
90006086:	429a      	cmp	r2, r3
90006088:	bf0c      	ite	eq
9000608a:	2301      	moveq	r3, #1
9000608c:	2300      	movne	r3, #0
9000608e:	b2db      	uxtb	r3, r3
90006090:	461a      	mov	r2, r3
90006092:	79fb      	ldrb	r3, [r7, #7]
90006094:	429a      	cmp	r2, r3
90006096:	d0b4      	beq.n	90006002 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90006098:	2300      	movs	r3, #0
}
9000609a:	4618      	mov	r0, r3
9000609c:	3710      	adds	r7, #16
9000609e:	46bd      	mov	sp, r7
900060a0:	bd80      	pop	{r7, pc}

900060a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900060a2:	b580      	push	{r7, lr}
900060a4:	b084      	sub	sp, #16
900060a6:	af00      	add	r7, sp, #0
900060a8:	60f8      	str	r0, [r7, #12]
900060aa:	60b9      	str	r1, [r7, #8]
900060ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900060ae:	e033      	b.n	90006118 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
900060b0:	687a      	ldr	r2, [r7, #4]
900060b2:	68b9      	ldr	r1, [r7, #8]
900060b4:	68f8      	ldr	r0, [r7, #12]
900060b6:	f000 f87f 	bl	900061b8 <I2C_IsErrorOccurred>
900060ba:	4603      	mov	r3, r0
900060bc:	2b00      	cmp	r3, #0
900060be:	d001      	beq.n	900060c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
900060c0:	2301      	movs	r3, #1
900060c2:	e031      	b.n	90006128 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
900060c4:	68bb      	ldr	r3, [r7, #8]
900060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
900060ca:	d025      	beq.n	90006118 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900060cc:	f7fd f90c 	bl	900032e8 <HAL_GetTick>
900060d0:	4602      	mov	r2, r0
900060d2:	687b      	ldr	r3, [r7, #4]
900060d4:	1ad3      	subs	r3, r2, r3
900060d6:	68ba      	ldr	r2, [r7, #8]
900060d8:	429a      	cmp	r2, r3
900060da:	d302      	bcc.n	900060e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
900060dc:	68bb      	ldr	r3, [r7, #8]
900060de:	2b00      	cmp	r3, #0
900060e0:	d11a      	bne.n	90006118 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900060e2:	68fb      	ldr	r3, [r7, #12]
900060e4:	681b      	ldr	r3, [r3, #0]
900060e6:	699b      	ldr	r3, [r3, #24]
900060e8:	f003 0302 	and.w	r3, r3, #2
900060ec:	2b02      	cmp	r3, #2
900060ee:	d013      	beq.n	90006118 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900060f0:	68fb      	ldr	r3, [r7, #12]
900060f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900060f4:	f043 0220 	orr.w	r2, r3, #32
900060f8:	68fb      	ldr	r3, [r7, #12]
900060fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900060fc:	68fb      	ldr	r3, [r7, #12]
900060fe:	2220      	movs	r2, #32
90006100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90006104:	68fb      	ldr	r3, [r7, #12]
90006106:	2200      	movs	r2, #0
90006108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
9000610c:	68fb      	ldr	r3, [r7, #12]
9000610e:	2200      	movs	r2, #0
90006110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90006114:	2301      	movs	r3, #1
90006116:	e007      	b.n	90006128 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90006118:	68fb      	ldr	r3, [r7, #12]
9000611a:	681b      	ldr	r3, [r3, #0]
9000611c:	699b      	ldr	r3, [r3, #24]
9000611e:	f003 0302 	and.w	r3, r3, #2
90006122:	2b02      	cmp	r3, #2
90006124:	d1c4      	bne.n	900060b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90006126:	2300      	movs	r3, #0
}
90006128:	4618      	mov	r0, r3
9000612a:	3710      	adds	r7, #16
9000612c:	46bd      	mov	sp, r7
9000612e:	bd80      	pop	{r7, pc}

90006130 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006130:	b580      	push	{r7, lr}
90006132:	b084      	sub	sp, #16
90006134:	af00      	add	r7, sp, #0
90006136:	60f8      	str	r0, [r7, #12]
90006138:	60b9      	str	r1, [r7, #8]
9000613a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000613c:	e02f      	b.n	9000619e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
9000613e:	687a      	ldr	r2, [r7, #4]
90006140:	68b9      	ldr	r1, [r7, #8]
90006142:	68f8      	ldr	r0, [r7, #12]
90006144:	f000 f838 	bl	900061b8 <I2C_IsErrorOccurred>
90006148:	4603      	mov	r3, r0
9000614a:	2b00      	cmp	r3, #0
9000614c:	d001      	beq.n	90006152 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
9000614e:	2301      	movs	r3, #1
90006150:	e02d      	b.n	900061ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006152:	f7fd f8c9 	bl	900032e8 <HAL_GetTick>
90006156:	4602      	mov	r2, r0
90006158:	687b      	ldr	r3, [r7, #4]
9000615a:	1ad3      	subs	r3, r2, r3
9000615c:	68ba      	ldr	r2, [r7, #8]
9000615e:	429a      	cmp	r2, r3
90006160:	d302      	bcc.n	90006168 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90006162:	68bb      	ldr	r3, [r7, #8]
90006164:	2b00      	cmp	r3, #0
90006166:	d11a      	bne.n	9000619e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90006168:	68fb      	ldr	r3, [r7, #12]
9000616a:	681b      	ldr	r3, [r3, #0]
9000616c:	699b      	ldr	r3, [r3, #24]
9000616e:	f003 0320 	and.w	r3, r3, #32
90006172:	2b20      	cmp	r3, #32
90006174:	d013      	beq.n	9000619e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90006176:	68fb      	ldr	r3, [r7, #12]
90006178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000617a:	f043 0220 	orr.w	r2, r3, #32
9000617e:	68fb      	ldr	r3, [r7, #12]
90006180:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90006182:	68fb      	ldr	r3, [r7, #12]
90006184:	2220      	movs	r2, #32
90006186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
9000618a:	68fb      	ldr	r3, [r7, #12]
9000618c:	2200      	movs	r2, #0
9000618e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90006192:	68fb      	ldr	r3, [r7, #12]
90006194:	2200      	movs	r2, #0
90006196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
9000619a:	2301      	movs	r3, #1
9000619c:	e007      	b.n	900061ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000619e:	68fb      	ldr	r3, [r7, #12]
900061a0:	681b      	ldr	r3, [r3, #0]
900061a2:	699b      	ldr	r3, [r3, #24]
900061a4:	f003 0320 	and.w	r3, r3, #32
900061a8:	2b20      	cmp	r3, #32
900061aa:	d1c8      	bne.n	9000613e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
900061ac:	2300      	movs	r3, #0
}
900061ae:	4618      	mov	r0, r3
900061b0:	3710      	adds	r7, #16
900061b2:	46bd      	mov	sp, r7
900061b4:	bd80      	pop	{r7, pc}
	...

900061b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
900061b8:	b580      	push	{r7, lr}
900061ba:	b08a      	sub	sp, #40	@ 0x28
900061bc:	af00      	add	r7, sp, #0
900061be:	60f8      	str	r0, [r7, #12]
900061c0:	60b9      	str	r1, [r7, #8]
900061c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900061c4:	2300      	movs	r3, #0
900061c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
900061ca:	68fb      	ldr	r3, [r7, #12]
900061cc:	681b      	ldr	r3, [r3, #0]
900061ce:	699b      	ldr	r3, [r3, #24]
900061d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
900061d2:	2300      	movs	r3, #0
900061d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
900061d6:	687b      	ldr	r3, [r7, #4]
900061d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900061da:	69bb      	ldr	r3, [r7, #24]
900061dc:	f003 0310 	and.w	r3, r3, #16
900061e0:	2b00      	cmp	r3, #0
900061e2:	d068      	beq.n	900062b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900061e4:	68fb      	ldr	r3, [r7, #12]
900061e6:	681b      	ldr	r3, [r3, #0]
900061e8:	2210      	movs	r2, #16
900061ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900061ec:	e049      	b.n	90006282 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900061ee:	68bb      	ldr	r3, [r7, #8]
900061f0:	f1b3 3fff 	cmp.w	r3, #4294967295
900061f4:	d045      	beq.n	90006282 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900061f6:	f7fd f877 	bl	900032e8 <HAL_GetTick>
900061fa:	4602      	mov	r2, r0
900061fc:	69fb      	ldr	r3, [r7, #28]
900061fe:	1ad3      	subs	r3, r2, r3
90006200:	68ba      	ldr	r2, [r7, #8]
90006202:	429a      	cmp	r2, r3
90006204:	d302      	bcc.n	9000620c <I2C_IsErrorOccurred+0x54>
90006206:	68bb      	ldr	r3, [r7, #8]
90006208:	2b00      	cmp	r3, #0
9000620a:	d13a      	bne.n	90006282 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000620c:	68fb      	ldr	r3, [r7, #12]
9000620e:	681b      	ldr	r3, [r3, #0]
90006210:	685b      	ldr	r3, [r3, #4]
90006212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
90006216:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90006218:	68fb      	ldr	r3, [r7, #12]
9000621a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
9000621e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006220:	68fb      	ldr	r3, [r7, #12]
90006222:	681b      	ldr	r3, [r3, #0]
90006224:	699b      	ldr	r3, [r3, #24]
90006226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
9000622a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000622e:	d121      	bne.n	90006274 <I2C_IsErrorOccurred+0xbc>
90006230:	697b      	ldr	r3, [r7, #20]
90006232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90006236:	d01d      	beq.n	90006274 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
90006238:	7cfb      	ldrb	r3, [r7, #19]
9000623a:	2b20      	cmp	r3, #32
9000623c:	d01a      	beq.n	90006274 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000623e:	68fb      	ldr	r3, [r7, #12]
90006240:	681b      	ldr	r3, [r3, #0]
90006242:	685a      	ldr	r2, [r3, #4]
90006244:	68fb      	ldr	r3, [r7, #12]
90006246:	681b      	ldr	r3, [r3, #0]
90006248:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
9000624c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
9000624e:	f7fd f84b 	bl	900032e8 <HAL_GetTick>
90006252:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006254:	e00e      	b.n	90006274 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90006256:	f7fd f847 	bl	900032e8 <HAL_GetTick>
9000625a:	4602      	mov	r2, r0
9000625c:	69fb      	ldr	r3, [r7, #28]
9000625e:	1ad3      	subs	r3, r2, r3
90006260:	2b19      	cmp	r3, #25
90006262:	d907      	bls.n	90006274 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90006264:	6a3b      	ldr	r3, [r7, #32]
90006266:	f043 0320 	orr.w	r3, r3, #32
9000626a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
9000626c:	2301      	movs	r3, #1
9000626e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90006272:	e006      	b.n	90006282 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006274:	68fb      	ldr	r3, [r7, #12]
90006276:	681b      	ldr	r3, [r3, #0]
90006278:	699b      	ldr	r3, [r3, #24]
9000627a:	f003 0320 	and.w	r3, r3, #32
9000627e:	2b20      	cmp	r3, #32
90006280:	d1e9      	bne.n	90006256 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006282:	68fb      	ldr	r3, [r7, #12]
90006284:	681b      	ldr	r3, [r3, #0]
90006286:	699b      	ldr	r3, [r3, #24]
90006288:	f003 0320 	and.w	r3, r3, #32
9000628c:	2b20      	cmp	r3, #32
9000628e:	d003      	beq.n	90006298 <I2C_IsErrorOccurred+0xe0>
90006290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006294:	2b00      	cmp	r3, #0
90006296:	d0aa      	beq.n	900061ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000629c:	2b00      	cmp	r3, #0
9000629e:	d103      	bne.n	900062a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900062a0:	68fb      	ldr	r3, [r7, #12]
900062a2:	681b      	ldr	r3, [r3, #0]
900062a4:	2220      	movs	r2, #32
900062a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900062a8:	6a3b      	ldr	r3, [r7, #32]
900062aa:	f043 0304 	orr.w	r3, r3, #4
900062ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
900062b0:	2301      	movs	r3, #1
900062b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900062b6:	68fb      	ldr	r3, [r7, #12]
900062b8:	681b      	ldr	r3, [r3, #0]
900062ba:	699b      	ldr	r3, [r3, #24]
900062bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900062be:	69bb      	ldr	r3, [r7, #24]
900062c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900062c4:	2b00      	cmp	r3, #0
900062c6:	d00b      	beq.n	900062e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
900062c8:	6a3b      	ldr	r3, [r7, #32]
900062ca:	f043 0301 	orr.w	r3, r3, #1
900062ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900062d0:	68fb      	ldr	r3, [r7, #12]
900062d2:	681b      	ldr	r3, [r3, #0]
900062d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
900062d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900062da:	2301      	movs	r3, #1
900062dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900062e0:	69bb      	ldr	r3, [r7, #24]
900062e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900062e6:	2b00      	cmp	r3, #0
900062e8:	d00b      	beq.n	90006302 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900062ea:	6a3b      	ldr	r3, [r7, #32]
900062ec:	f043 0308 	orr.w	r3, r3, #8
900062f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900062f2:	68fb      	ldr	r3, [r7, #12]
900062f4:	681b      	ldr	r3, [r3, #0]
900062f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
900062fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900062fc:	2301      	movs	r3, #1
900062fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90006302:	69bb      	ldr	r3, [r7, #24]
90006304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90006308:	2b00      	cmp	r3, #0
9000630a:	d00b      	beq.n	90006324 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
9000630c:	6a3b      	ldr	r3, [r7, #32]
9000630e:	f043 0302 	orr.w	r3, r3, #2
90006312:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90006314:	68fb      	ldr	r3, [r7, #12]
90006316:	681b      	ldr	r3, [r3, #0]
90006318:	f44f 7200 	mov.w	r2, #512	@ 0x200
9000631c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
9000631e:	2301      	movs	r3, #1
90006320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90006324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006328:	2b00      	cmp	r3, #0
9000632a:	d01c      	beq.n	90006366 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
9000632c:	68f8      	ldr	r0, [r7, #12]
9000632e:	f7ff fe3b 	bl	90005fa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006332:	68fb      	ldr	r3, [r7, #12]
90006334:	681b      	ldr	r3, [r3, #0]
90006336:	6859      	ldr	r1, [r3, #4]
90006338:	68fb      	ldr	r3, [r7, #12]
9000633a:	681a      	ldr	r2, [r3, #0]
9000633c:	4b0d      	ldr	r3, [pc, #52]	@ (90006374 <I2C_IsErrorOccurred+0x1bc>)
9000633e:	400b      	ands	r3, r1
90006340:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90006342:	68fb      	ldr	r3, [r7, #12]
90006344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
90006346:	6a3b      	ldr	r3, [r7, #32]
90006348:	431a      	orrs	r2, r3
9000634a:	68fb      	ldr	r3, [r7, #12]
9000634c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000634e:	68fb      	ldr	r3, [r7, #12]
90006350:	2220      	movs	r2, #32
90006352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90006356:	68fb      	ldr	r3, [r7, #12]
90006358:	2200      	movs	r2, #0
9000635a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000635e:	68fb      	ldr	r3, [r7, #12]
90006360:	2200      	movs	r2, #0
90006362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
90006366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
9000636a:	4618      	mov	r0, r3
9000636c:	3728      	adds	r7, #40	@ 0x28
9000636e:	46bd      	mov	sp, r7
90006370:	bd80      	pop	{r7, pc}
90006372:	bf00      	nop
90006374:	fe00e800 	.word	0xfe00e800

90006378 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90006378:	b480      	push	{r7}
9000637a:	b087      	sub	sp, #28
9000637c:	af00      	add	r7, sp, #0
9000637e:	60f8      	str	r0, [r7, #12]
90006380:	607b      	str	r3, [r7, #4]
90006382:	460b      	mov	r3, r1
90006384:	817b      	strh	r3, [r7, #10]
90006386:	4613      	mov	r3, r2
90006388:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000638a:	897b      	ldrh	r3, [r7, #10]
9000638c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006390:	7a7b      	ldrb	r3, [r7, #9]
90006392:	041b      	lsls	r3, r3, #16
90006394:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006398:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000639a:	687b      	ldr	r3, [r7, #4]
9000639c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000639e:	6a3b      	ldr	r3, [r7, #32]
900063a0:	4313      	orrs	r3, r2
900063a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
900063a6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900063a8:	68fb      	ldr	r3, [r7, #12]
900063aa:	681b      	ldr	r3, [r3, #0]
900063ac:	685a      	ldr	r2, [r3, #4]
900063ae:	6a3b      	ldr	r3, [r7, #32]
900063b0:	0d5b      	lsrs	r3, r3, #21
900063b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
900063b6:	4b08      	ldr	r3, [pc, #32]	@ (900063d8 <I2C_TransferConfig+0x60>)
900063b8:	430b      	orrs	r3, r1
900063ba:	43db      	mvns	r3, r3
900063bc:	ea02 0103 	and.w	r1, r2, r3
900063c0:	68fb      	ldr	r3, [r7, #12]
900063c2:	681b      	ldr	r3, [r3, #0]
900063c4:	697a      	ldr	r2, [r7, #20]
900063c6:	430a      	orrs	r2, r1
900063c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900063ca:	bf00      	nop
900063cc:	371c      	adds	r7, #28
900063ce:	46bd      	mov	sp, r7
900063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900063d4:	4770      	bx	lr
900063d6:	bf00      	nop
900063d8:	03ff63ff 	.word	0x03ff63ff

900063dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900063dc:	b480      	push	{r7}
900063de:	b083      	sub	sp, #12
900063e0:	af00      	add	r7, sp, #0
900063e2:	6078      	str	r0, [r7, #4]
900063e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900063e6:	687b      	ldr	r3, [r7, #4]
900063e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900063ec:	b2db      	uxtb	r3, r3
900063ee:	2b20      	cmp	r3, #32
900063f0:	d138      	bne.n	90006464 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900063f2:	687b      	ldr	r3, [r7, #4]
900063f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900063f8:	2b01      	cmp	r3, #1
900063fa:	d101      	bne.n	90006400 <HAL_I2CEx_ConfigAnalogFilter+0x24>
900063fc:	2302      	movs	r3, #2
900063fe:	e032      	b.n	90006466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90006400:	687b      	ldr	r3, [r7, #4]
90006402:	2201      	movs	r2, #1
90006404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006408:	687b      	ldr	r3, [r7, #4]
9000640a:	2224      	movs	r2, #36	@ 0x24
9000640c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006410:	687b      	ldr	r3, [r7, #4]
90006412:	681b      	ldr	r3, [r3, #0]
90006414:	681a      	ldr	r2, [r3, #0]
90006416:	687b      	ldr	r3, [r7, #4]
90006418:	681b      	ldr	r3, [r3, #0]
9000641a:	f022 0201 	bic.w	r2, r2, #1
9000641e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90006420:	687b      	ldr	r3, [r7, #4]
90006422:	681b      	ldr	r3, [r3, #0]
90006424:	681a      	ldr	r2, [r3, #0]
90006426:	687b      	ldr	r3, [r7, #4]
90006428:	681b      	ldr	r3, [r3, #0]
9000642a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
9000642e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006430:	687b      	ldr	r3, [r7, #4]
90006432:	681b      	ldr	r3, [r3, #0]
90006434:	6819      	ldr	r1, [r3, #0]
90006436:	687b      	ldr	r3, [r7, #4]
90006438:	681b      	ldr	r3, [r3, #0]
9000643a:	683a      	ldr	r2, [r7, #0]
9000643c:	430a      	orrs	r2, r1
9000643e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006440:	687b      	ldr	r3, [r7, #4]
90006442:	681b      	ldr	r3, [r3, #0]
90006444:	681a      	ldr	r2, [r3, #0]
90006446:	687b      	ldr	r3, [r7, #4]
90006448:	681b      	ldr	r3, [r3, #0]
9000644a:	f042 0201 	orr.w	r2, r2, #1
9000644e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006450:	687b      	ldr	r3, [r7, #4]
90006452:	2220      	movs	r2, #32
90006454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006458:	687b      	ldr	r3, [r7, #4]
9000645a:	2200      	movs	r2, #0
9000645c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006460:	2300      	movs	r3, #0
90006462:	e000      	b.n	90006466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90006464:	2302      	movs	r3, #2
  }
}
90006466:	4618      	mov	r0, r3
90006468:	370c      	adds	r7, #12
9000646a:	46bd      	mov	sp, r7
9000646c:	f85d 7b04 	ldr.w	r7, [sp], #4
90006470:	4770      	bx	lr

90006472 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90006472:	b480      	push	{r7}
90006474:	b085      	sub	sp, #20
90006476:	af00      	add	r7, sp, #0
90006478:	6078      	str	r0, [r7, #4]
9000647a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000647c:	687b      	ldr	r3, [r7, #4]
9000647e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006482:	b2db      	uxtb	r3, r3
90006484:	2b20      	cmp	r3, #32
90006486:	d139      	bne.n	900064fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006488:	687b      	ldr	r3, [r7, #4]
9000648a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
9000648e:	2b01      	cmp	r3, #1
90006490:	d101      	bne.n	90006496 <HAL_I2CEx_ConfigDigitalFilter+0x24>
90006492:	2302      	movs	r3, #2
90006494:	e033      	b.n	900064fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
90006496:	687b      	ldr	r3, [r7, #4]
90006498:	2201      	movs	r2, #1
9000649a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
9000649e:	687b      	ldr	r3, [r7, #4]
900064a0:	2224      	movs	r2, #36	@ 0x24
900064a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900064a6:	687b      	ldr	r3, [r7, #4]
900064a8:	681b      	ldr	r3, [r3, #0]
900064aa:	681a      	ldr	r2, [r3, #0]
900064ac:	687b      	ldr	r3, [r7, #4]
900064ae:	681b      	ldr	r3, [r3, #0]
900064b0:	f022 0201 	bic.w	r2, r2, #1
900064b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900064b6:	687b      	ldr	r3, [r7, #4]
900064b8:	681b      	ldr	r3, [r3, #0]
900064ba:	681b      	ldr	r3, [r3, #0]
900064bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
900064be:	68fb      	ldr	r3, [r7, #12]
900064c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
900064c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
900064c6:	683b      	ldr	r3, [r7, #0]
900064c8:	021b      	lsls	r3, r3, #8
900064ca:	68fa      	ldr	r2, [r7, #12]
900064cc:	4313      	orrs	r3, r2
900064ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900064d0:	687b      	ldr	r3, [r7, #4]
900064d2:	681b      	ldr	r3, [r3, #0]
900064d4:	68fa      	ldr	r2, [r7, #12]
900064d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900064d8:	687b      	ldr	r3, [r7, #4]
900064da:	681b      	ldr	r3, [r3, #0]
900064dc:	681a      	ldr	r2, [r3, #0]
900064de:	687b      	ldr	r3, [r7, #4]
900064e0:	681b      	ldr	r3, [r3, #0]
900064e2:	f042 0201 	orr.w	r2, r2, #1
900064e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900064e8:	687b      	ldr	r3, [r7, #4]
900064ea:	2220      	movs	r2, #32
900064ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900064f0:	687b      	ldr	r3, [r7, #4]
900064f2:	2200      	movs	r2, #0
900064f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900064f8:	2300      	movs	r3, #0
900064fa:	e000      	b.n	900064fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900064fc:	2302      	movs	r3, #2
  }
}
900064fe:	4618      	mov	r0, r3
90006500:	3714      	adds	r7, #20
90006502:	46bd      	mov	sp, r7
90006504:	f85d 7b04 	ldr.w	r7, [sp], #4
90006508:	4770      	bx	lr

9000650a <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
9000650a:	b580      	push	{r7, lr}
9000650c:	b084      	sub	sp, #16
9000650e:	af00      	add	r7, sp, #0
90006510:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90006512:	687b      	ldr	r3, [r7, #4]
90006514:	2b00      	cmp	r3, #0
90006516:	d101      	bne.n	9000651c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90006518:	2301      	movs	r3, #1
9000651a:	e08f      	b.n	9000663c <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000651c:	687b      	ldr	r3, [r7, #4]
9000651e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90006522:	b2db      	uxtb	r3, r3
90006524:	2b00      	cmp	r3, #0
90006526:	d106      	bne.n	90006536 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90006528:	687b      	ldr	r3, [r7, #4]
9000652a:	2200      	movs	r2, #0
9000652c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006530:	6878      	ldr	r0, [r7, #4]
90006532:	f000 f887 	bl	90006644 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90006536:	687b      	ldr	r3, [r7, #4]
90006538:	2202      	movs	r2, #2
9000653a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000653e:	687b      	ldr	r3, [r7, #4]
90006540:	681b      	ldr	r3, [r3, #0]
90006542:	699a      	ldr	r2, [r3, #24]
90006544:	687b      	ldr	r3, [r7, #4]
90006546:	681b      	ldr	r3, [r3, #0]
90006548:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
9000654c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000654e:	687b      	ldr	r3, [r7, #4]
90006550:	681b      	ldr	r3, [r3, #0]
90006552:	6999      	ldr	r1, [r3, #24]
90006554:	687b      	ldr	r3, [r7, #4]
90006556:	685a      	ldr	r2, [r3, #4]
90006558:	687b      	ldr	r3, [r7, #4]
9000655a:	689b      	ldr	r3, [r3, #8]
9000655c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000655e:	687b      	ldr	r3, [r7, #4]
90006560:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006562:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006564:	687b      	ldr	r3, [r7, #4]
90006566:	691b      	ldr	r3, [r3, #16]
90006568:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000656a:	687b      	ldr	r3, [r7, #4]
9000656c:	681b      	ldr	r3, [r3, #0]
9000656e:	430a      	orrs	r2, r1
90006570:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
90006572:	687b      	ldr	r3, [r7, #4]
90006574:	695b      	ldr	r3, [r3, #20]
90006576:	041b      	lsls	r3, r3, #16
90006578:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
9000657a:	687b      	ldr	r3, [r7, #4]
9000657c:	6999      	ldr	r1, [r3, #24]
9000657e:	687b      	ldr	r3, [r7, #4]
90006580:	681b      	ldr	r3, [r3, #0]
90006582:	68fa      	ldr	r2, [r7, #12]
90006584:	430a      	orrs	r2, r1
90006586:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90006588:	687b      	ldr	r3, [r7, #4]
9000658a:	69db      	ldr	r3, [r3, #28]
9000658c:	041b      	lsls	r3, r3, #16
9000658e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90006590:	687b      	ldr	r3, [r7, #4]
90006592:	6a19      	ldr	r1, [r3, #32]
90006594:	687b      	ldr	r3, [r7, #4]
90006596:	681b      	ldr	r3, [r3, #0]
90006598:	68fa      	ldr	r2, [r7, #12]
9000659a:	430a      	orrs	r2, r1
9000659c:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000659e:	687b      	ldr	r3, [r7, #4]
900065a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900065a2:	041b      	lsls	r3, r3, #16
900065a4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
900065a6:	687b      	ldr	r3, [r7, #4]
900065a8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
900065aa:	687b      	ldr	r3, [r7, #4]
900065ac:	681b      	ldr	r3, [r3, #0]
900065ae:	68fa      	ldr	r2, [r7, #12]
900065b0:	430a      	orrs	r2, r1
900065b2:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
900065b4:	687b      	ldr	r3, [r7, #4]
900065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900065b8:	041b      	lsls	r3, r3, #16
900065ba:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
900065bc:	687b      	ldr	r3, [r7, #4]
900065be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
900065c0:	687b      	ldr	r3, [r7, #4]
900065c2:	681b      	ldr	r3, [r3, #0]
900065c4:	68fa      	ldr	r2, [r7, #12]
900065c6:	430a      	orrs	r2, r1
900065c8:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900065ca:	687b      	ldr	r3, [r7, #4]
900065cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
900065d0:	021b      	lsls	r3, r3, #8
900065d2:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900065d4:	687b      	ldr	r3, [r7, #4]
900065d6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
900065da:	041b      	lsls	r3, r3, #16
900065dc:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900065de:	687b      	ldr	r3, [r7, #4]
900065e0:	681b      	ldr	r3, [r3, #0]
900065e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
900065e4:	687b      	ldr	r3, [r7, #4]
900065e6:	681b      	ldr	r3, [r3, #0]
900065e8:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
900065ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900065ee:	687b      	ldr	r3, [r7, #4]
900065f0:	681b      	ldr	r3, [r3, #0]
900065f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
900065f4:	68ba      	ldr	r2, [r7, #8]
900065f6:	68fb      	ldr	r3, [r7, #12]
900065f8:	4313      	orrs	r3, r2
900065fa:	687a      	ldr	r2, [r7, #4]
900065fc:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
90006600:	431a      	orrs	r2, r3
90006602:	687b      	ldr	r3, [r7, #4]
90006604:	681b      	ldr	r3, [r3, #0]
90006606:	430a      	orrs	r2, r1
90006608:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000660a:	687b      	ldr	r3, [r7, #4]
9000660c:	681b      	ldr	r3, [r3, #0]
9000660e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006610:	687b      	ldr	r3, [r7, #4]
90006612:	681b      	ldr	r3, [r3, #0]
90006614:	f042 0206 	orr.w	r2, r2, #6
90006618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
9000661a:	687b      	ldr	r3, [r7, #4]
9000661c:	681b      	ldr	r3, [r3, #0]
9000661e:	699a      	ldr	r2, [r3, #24]
90006620:	687b      	ldr	r3, [r7, #4]
90006622:	681b      	ldr	r3, [r3, #0]
90006624:	f042 0201 	orr.w	r2, r2, #1
90006628:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000662a:	687b      	ldr	r3, [r7, #4]
9000662c:	2200      	movs	r2, #0
9000662e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90006632:	687b      	ldr	r3, [r7, #4]
90006634:	2201      	movs	r2, #1
90006636:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
9000663a:	2300      	movs	r3, #0
}
9000663c:	4618      	mov	r0, r3
9000663e:	3710      	adds	r7, #16
90006640:	46bd      	mov	sp, r7
90006642:	bd80      	pop	{r7, pc}

90006644 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006644:	b480      	push	{r7}
90006646:	b083      	sub	sp, #12
90006648:	af00      	add	r7, sp, #0
9000664a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
9000664c:	bf00      	nop
9000664e:	370c      	adds	r7, #12
90006650:	46bd      	mov	sp, r7
90006652:	f85d 7b04 	ldr.w	r7, [sp], #4
90006656:	4770      	bx	lr

90006658 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006658:	b5b0      	push	{r4, r5, r7, lr}
9000665a:	b084      	sub	sp, #16
9000665c:	af00      	add	r7, sp, #0
9000665e:	60f8      	str	r0, [r7, #12]
90006660:	60b9      	str	r1, [r7, #8]
90006662:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90006664:	68fb      	ldr	r3, [r7, #12]
90006666:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
9000666a:	2b01      	cmp	r3, #1
9000666c:	d101      	bne.n	90006672 <HAL_LTDC_ConfigLayer+0x1a>
9000666e:	2302      	movs	r3, #2
90006670:	e02c      	b.n	900066cc <HAL_LTDC_ConfigLayer+0x74>
90006672:	68fb      	ldr	r3, [r7, #12]
90006674:	2201      	movs	r2, #1
90006676:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000667a:	68fb      	ldr	r3, [r7, #12]
9000667c:	2202      	movs	r2, #2
9000667e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90006682:	68fa      	ldr	r2, [r7, #12]
90006684:	687b      	ldr	r3, [r7, #4]
90006686:	2134      	movs	r1, #52	@ 0x34
90006688:	fb01 f303 	mul.w	r3, r1, r3
9000668c:	4413      	add	r3, r2
9000668e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
90006692:	68bb      	ldr	r3, [r7, #8]
90006694:	4614      	mov	r4, r2
90006696:	461d      	mov	r5, r3
90006698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000669a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000669c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000669e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900066a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900066a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900066a4:	682b      	ldr	r3, [r5, #0]
900066a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900066a8:	687a      	ldr	r2, [r7, #4]
900066aa:	68b9      	ldr	r1, [r7, #8]
900066ac:	68f8      	ldr	r0, [r7, #12]
900066ae:	f000 f811 	bl	900066d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900066b2:	68fb      	ldr	r3, [r7, #12]
900066b4:	681b      	ldr	r3, [r3, #0]
900066b6:	2201      	movs	r2, #1
900066b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900066ba:	68fb      	ldr	r3, [r7, #12]
900066bc:	2201      	movs	r2, #1
900066be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
900066c2:	68fb      	ldr	r3, [r7, #12]
900066c4:	2200      	movs	r2, #0
900066c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
900066ca:	2300      	movs	r3, #0
}
900066cc:	4618      	mov	r0, r3
900066ce:	3710      	adds	r7, #16
900066d0:	46bd      	mov	sp, r7
900066d2:	bdb0      	pop	{r4, r5, r7, pc}

900066d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900066d4:	b480      	push	{r7}
900066d6:	b089      	sub	sp, #36	@ 0x24
900066d8:	af00      	add	r7, sp, #0
900066da:	60f8      	str	r0, [r7, #12]
900066dc:	60b9      	str	r1, [r7, #8]
900066de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900066e0:	68bb      	ldr	r3, [r7, #8]
900066e2:	685a      	ldr	r2, [r3, #4]
900066e4:	68fb      	ldr	r3, [r7, #12]
900066e6:	681b      	ldr	r3, [r3, #0]
900066e8:	68db      	ldr	r3, [r3, #12]
900066ea:	0c1b      	lsrs	r3, r3, #16
900066ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
900066f0:	4413      	add	r3, r2
900066f2:	041b      	lsls	r3, r3, #16
900066f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900066f6:	68fb      	ldr	r3, [r7, #12]
900066f8:	681b      	ldr	r3, [r3, #0]
900066fa:	461a      	mov	r2, r3
900066fc:	687b      	ldr	r3, [r7, #4]
900066fe:	01db      	lsls	r3, r3, #7
90006700:	4413      	add	r3, r2
90006702:	3384      	adds	r3, #132	@ 0x84
90006704:	685b      	ldr	r3, [r3, #4]
90006706:	68fa      	ldr	r2, [r7, #12]
90006708:	6812      	ldr	r2, [r2, #0]
9000670a:	4611      	mov	r1, r2
9000670c:	687a      	ldr	r2, [r7, #4]
9000670e:	01d2      	lsls	r2, r2, #7
90006710:	440a      	add	r2, r1
90006712:	3284      	adds	r2, #132	@ 0x84
90006714:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
90006718:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000671a:	68bb      	ldr	r3, [r7, #8]
9000671c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000671e:	68fb      	ldr	r3, [r7, #12]
90006720:	681b      	ldr	r3, [r3, #0]
90006722:	68db      	ldr	r3, [r3, #12]
90006724:	0c1b      	lsrs	r3, r3, #16
90006726:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000672a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000672c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000672e:	68fb      	ldr	r3, [r7, #12]
90006730:	681b      	ldr	r3, [r3, #0]
90006732:	4619      	mov	r1, r3
90006734:	687b      	ldr	r3, [r7, #4]
90006736:	01db      	lsls	r3, r3, #7
90006738:	440b      	add	r3, r1
9000673a:	3384      	adds	r3, #132	@ 0x84
9000673c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000673e:	69fb      	ldr	r3, [r7, #28]
90006740:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006742:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006744:	68bb      	ldr	r3, [r7, #8]
90006746:	68da      	ldr	r2, [r3, #12]
90006748:	68fb      	ldr	r3, [r7, #12]
9000674a:	681b      	ldr	r3, [r3, #0]
9000674c:	68db      	ldr	r3, [r3, #12]
9000674e:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006752:	4413      	add	r3, r2
90006754:	041b      	lsls	r3, r3, #16
90006756:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90006758:	68fb      	ldr	r3, [r7, #12]
9000675a:	681b      	ldr	r3, [r3, #0]
9000675c:	461a      	mov	r2, r3
9000675e:	687b      	ldr	r3, [r7, #4]
90006760:	01db      	lsls	r3, r3, #7
90006762:	4413      	add	r3, r2
90006764:	3384      	adds	r3, #132	@ 0x84
90006766:	689b      	ldr	r3, [r3, #8]
90006768:	68fa      	ldr	r2, [r7, #12]
9000676a:	6812      	ldr	r2, [r2, #0]
9000676c:	4611      	mov	r1, r2
9000676e:	687a      	ldr	r2, [r7, #4]
90006770:	01d2      	lsls	r2, r2, #7
90006772:	440a      	add	r2, r1
90006774:	3284      	adds	r2, #132	@ 0x84
90006776:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
9000677a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000677c:	68bb      	ldr	r3, [r7, #8]
9000677e:	689a      	ldr	r2, [r3, #8]
90006780:	68fb      	ldr	r3, [r7, #12]
90006782:	681b      	ldr	r3, [r3, #0]
90006784:	68db      	ldr	r3, [r3, #12]
90006786:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000678a:	4413      	add	r3, r2
9000678c:	1c5a      	adds	r2, r3, #1
9000678e:	68fb      	ldr	r3, [r7, #12]
90006790:	681b      	ldr	r3, [r3, #0]
90006792:	4619      	mov	r1, r3
90006794:	687b      	ldr	r3, [r7, #4]
90006796:	01db      	lsls	r3, r3, #7
90006798:	440b      	add	r3, r1
9000679a:	3384      	adds	r3, #132	@ 0x84
9000679c:	4619      	mov	r1, r3
9000679e:	69fb      	ldr	r3, [r7, #28]
900067a0:	4313      	orrs	r3, r2
900067a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900067a4:	68fb      	ldr	r3, [r7, #12]
900067a6:	681b      	ldr	r3, [r3, #0]
900067a8:	461a      	mov	r2, r3
900067aa:	687b      	ldr	r3, [r7, #4]
900067ac:	01db      	lsls	r3, r3, #7
900067ae:	4413      	add	r3, r2
900067b0:	3384      	adds	r3, #132	@ 0x84
900067b2:	691b      	ldr	r3, [r3, #16]
900067b4:	68fa      	ldr	r2, [r7, #12]
900067b6:	6812      	ldr	r2, [r2, #0]
900067b8:	4611      	mov	r1, r2
900067ba:	687a      	ldr	r2, [r7, #4]
900067bc:	01d2      	lsls	r2, r2, #7
900067be:	440a      	add	r2, r1
900067c0:	3284      	adds	r2, #132	@ 0x84
900067c2:	f023 0307 	bic.w	r3, r3, #7
900067c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900067c8:	68fb      	ldr	r3, [r7, #12]
900067ca:	681b      	ldr	r3, [r3, #0]
900067cc:	461a      	mov	r2, r3
900067ce:	687b      	ldr	r3, [r7, #4]
900067d0:	01db      	lsls	r3, r3, #7
900067d2:	4413      	add	r3, r2
900067d4:	3384      	adds	r3, #132	@ 0x84
900067d6:	461a      	mov	r2, r3
900067d8:	68bb      	ldr	r3, [r7, #8]
900067da:	691b      	ldr	r3, [r3, #16]
900067dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900067de:	68bb      	ldr	r3, [r7, #8]
900067e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
900067e4:	021b      	lsls	r3, r3, #8
900067e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900067e8:	68bb      	ldr	r3, [r7, #8]
900067ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
900067ee:	041b      	lsls	r3, r3, #16
900067f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
900067f2:	68bb      	ldr	r3, [r7, #8]
900067f4:	699b      	ldr	r3, [r3, #24]
900067f6:	061b      	lsls	r3, r3, #24
900067f8:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
900067fa:	68bb      	ldr	r3, [r7, #8]
900067fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
90006800:	461a      	mov	r2, r3
90006802:	69fb      	ldr	r3, [r7, #28]
90006804:	431a      	orrs	r2, r3
90006806:	69bb      	ldr	r3, [r7, #24]
90006808:	431a      	orrs	r2, r3
9000680a:	68fb      	ldr	r3, [r7, #12]
9000680c:	681b      	ldr	r3, [r3, #0]
9000680e:	4619      	mov	r1, r3
90006810:	687b      	ldr	r3, [r7, #4]
90006812:	01db      	lsls	r3, r3, #7
90006814:	440b      	add	r3, r1
90006816:	3384      	adds	r3, #132	@ 0x84
90006818:	4619      	mov	r1, r3
9000681a:	697b      	ldr	r3, [r7, #20]
9000681c:	4313      	orrs	r3, r2
9000681e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006820:	68fb      	ldr	r3, [r7, #12]
90006822:	681b      	ldr	r3, [r3, #0]
90006824:	461a      	mov	r2, r3
90006826:	687b      	ldr	r3, [r7, #4]
90006828:	01db      	lsls	r3, r3, #7
9000682a:	4413      	add	r3, r2
9000682c:	3384      	adds	r3, #132	@ 0x84
9000682e:	695b      	ldr	r3, [r3, #20]
90006830:	68fa      	ldr	r2, [r7, #12]
90006832:	6812      	ldr	r2, [r2, #0]
90006834:	4611      	mov	r1, r2
90006836:	687a      	ldr	r2, [r7, #4]
90006838:	01d2      	lsls	r2, r2, #7
9000683a:	440a      	add	r2, r1
9000683c:	3284      	adds	r2, #132	@ 0x84
9000683e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90006842:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006844:	68fb      	ldr	r3, [r7, #12]
90006846:	681b      	ldr	r3, [r3, #0]
90006848:	461a      	mov	r2, r3
9000684a:	687b      	ldr	r3, [r7, #4]
9000684c:	01db      	lsls	r3, r3, #7
9000684e:	4413      	add	r3, r2
90006850:	3384      	adds	r3, #132	@ 0x84
90006852:	461a      	mov	r2, r3
90006854:	68bb      	ldr	r3, [r7, #8]
90006856:	695b      	ldr	r3, [r3, #20]
90006858:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000685a:	68fb      	ldr	r3, [r7, #12]
9000685c:	681b      	ldr	r3, [r3, #0]
9000685e:	461a      	mov	r2, r3
90006860:	687b      	ldr	r3, [r7, #4]
90006862:	01db      	lsls	r3, r3, #7
90006864:	4413      	add	r3, r2
90006866:	3384      	adds	r3, #132	@ 0x84
90006868:	69da      	ldr	r2, [r3, #28]
9000686a:	68fb      	ldr	r3, [r7, #12]
9000686c:	681b      	ldr	r3, [r3, #0]
9000686e:	4619      	mov	r1, r3
90006870:	687b      	ldr	r3, [r7, #4]
90006872:	01db      	lsls	r3, r3, #7
90006874:	440b      	add	r3, r1
90006876:	3384      	adds	r3, #132	@ 0x84
90006878:	4619      	mov	r1, r3
9000687a:	4b4f      	ldr	r3, [pc, #316]	@ (900069b8 <LTDC_SetConfig+0x2e4>)
9000687c:	4013      	ands	r3, r2
9000687e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90006880:	68bb      	ldr	r3, [r7, #8]
90006882:	69da      	ldr	r2, [r3, #28]
90006884:	68bb      	ldr	r3, [r7, #8]
90006886:	6a1b      	ldr	r3, [r3, #32]
90006888:	68f9      	ldr	r1, [r7, #12]
9000688a:	6809      	ldr	r1, [r1, #0]
9000688c:	4608      	mov	r0, r1
9000688e:	6879      	ldr	r1, [r7, #4]
90006890:	01c9      	lsls	r1, r1, #7
90006892:	4401      	add	r1, r0
90006894:	3184      	adds	r1, #132	@ 0x84
90006896:	4313      	orrs	r3, r2
90006898:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
9000689a:	68fb      	ldr	r3, [r7, #12]
9000689c:	681b      	ldr	r3, [r3, #0]
9000689e:	461a      	mov	r2, r3
900068a0:	687b      	ldr	r3, [r7, #4]
900068a2:	01db      	lsls	r3, r3, #7
900068a4:	4413      	add	r3, r2
900068a6:	3384      	adds	r3, #132	@ 0x84
900068a8:	461a      	mov	r2, r3
900068aa:	68bb      	ldr	r3, [r7, #8]
900068ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900068ae:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900068b0:	68bb      	ldr	r3, [r7, #8]
900068b2:	691b      	ldr	r3, [r3, #16]
900068b4:	2b00      	cmp	r3, #0
900068b6:	d102      	bne.n	900068be <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
900068b8:	2304      	movs	r3, #4
900068ba:	61fb      	str	r3, [r7, #28]
900068bc:	e01b      	b.n	900068f6 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900068be:	68bb      	ldr	r3, [r7, #8]
900068c0:	691b      	ldr	r3, [r3, #16]
900068c2:	2b01      	cmp	r3, #1
900068c4:	d102      	bne.n	900068cc <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
900068c6:	2303      	movs	r3, #3
900068c8:	61fb      	str	r3, [r7, #28]
900068ca:	e014      	b.n	900068f6 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900068cc:	68bb      	ldr	r3, [r7, #8]
900068ce:	691b      	ldr	r3, [r3, #16]
900068d0:	2b04      	cmp	r3, #4
900068d2:	d00b      	beq.n	900068ec <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900068d4:	68bb      	ldr	r3, [r7, #8]
900068d6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900068d8:	2b02      	cmp	r3, #2
900068da:	d007      	beq.n	900068ec <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900068dc:	68bb      	ldr	r3, [r7, #8]
900068de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900068e0:	2b03      	cmp	r3, #3
900068e2:	d003      	beq.n	900068ec <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
900068e4:	68bb      	ldr	r3, [r7, #8]
900068e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900068e8:	2b07      	cmp	r3, #7
900068ea:	d102      	bne.n	900068f2 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
900068ec:	2302      	movs	r3, #2
900068ee:	61fb      	str	r3, [r7, #28]
900068f0:	e001      	b.n	900068f6 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
900068f2:	2301      	movs	r3, #1
900068f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900068f6:	68fb      	ldr	r3, [r7, #12]
900068f8:	681b      	ldr	r3, [r3, #0]
900068fa:	461a      	mov	r2, r3
900068fc:	687b      	ldr	r3, [r7, #4]
900068fe:	01db      	lsls	r3, r3, #7
90006900:	4413      	add	r3, r2
90006902:	3384      	adds	r3, #132	@ 0x84
90006904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006906:	68fa      	ldr	r2, [r7, #12]
90006908:	6812      	ldr	r2, [r2, #0]
9000690a:	4611      	mov	r1, r2
9000690c:	687a      	ldr	r2, [r7, #4]
9000690e:	01d2      	lsls	r2, r2, #7
90006910:	440a      	add	r2, r1
90006912:	3284      	adds	r2, #132	@ 0x84
90006914:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
90006918:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
9000691a:	68bb      	ldr	r3, [r7, #8]
9000691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000691e:	69fa      	ldr	r2, [r7, #28]
90006920:	fb02 f303 	mul.w	r3, r2, r3
90006924:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90006926:	68bb      	ldr	r3, [r7, #8]
90006928:	6859      	ldr	r1, [r3, #4]
9000692a:	68bb      	ldr	r3, [r7, #8]
9000692c:	681b      	ldr	r3, [r3, #0]
9000692e:	1acb      	subs	r3, r1, r3
90006930:	69f9      	ldr	r1, [r7, #28]
90006932:	fb01 f303 	mul.w	r3, r1, r3
90006936:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
90006938:	68f9      	ldr	r1, [r7, #12]
9000693a:	6809      	ldr	r1, [r1, #0]
9000693c:	4608      	mov	r0, r1
9000693e:	6879      	ldr	r1, [r7, #4]
90006940:	01c9      	lsls	r1, r1, #7
90006942:	4401      	add	r1, r0
90006944:	3184      	adds	r1, #132	@ 0x84
90006946:	4313      	orrs	r3, r2
90006948:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000694a:	68fb      	ldr	r3, [r7, #12]
9000694c:	681b      	ldr	r3, [r3, #0]
9000694e:	461a      	mov	r2, r3
90006950:	687b      	ldr	r3, [r7, #4]
90006952:	01db      	lsls	r3, r3, #7
90006954:	4413      	add	r3, r2
90006956:	3384      	adds	r3, #132	@ 0x84
90006958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000695a:	68fb      	ldr	r3, [r7, #12]
9000695c:	681b      	ldr	r3, [r3, #0]
9000695e:	4619      	mov	r1, r3
90006960:	687b      	ldr	r3, [r7, #4]
90006962:	01db      	lsls	r3, r3, #7
90006964:	440b      	add	r3, r1
90006966:	3384      	adds	r3, #132	@ 0x84
90006968:	4619      	mov	r1, r3
9000696a:	4b14      	ldr	r3, [pc, #80]	@ (900069bc <LTDC_SetConfig+0x2e8>)
9000696c:	4013      	ands	r3, r2
9000696e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90006970:	68fb      	ldr	r3, [r7, #12]
90006972:	681b      	ldr	r3, [r3, #0]
90006974:	461a      	mov	r2, r3
90006976:	687b      	ldr	r3, [r7, #4]
90006978:	01db      	lsls	r3, r3, #7
9000697a:	4413      	add	r3, r2
9000697c:	3384      	adds	r3, #132	@ 0x84
9000697e:	461a      	mov	r2, r3
90006980:	68bb      	ldr	r3, [r7, #8]
90006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006984:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90006986:	68fb      	ldr	r3, [r7, #12]
90006988:	681b      	ldr	r3, [r3, #0]
9000698a:	461a      	mov	r2, r3
9000698c:	687b      	ldr	r3, [r7, #4]
9000698e:	01db      	lsls	r3, r3, #7
90006990:	4413      	add	r3, r2
90006992:	3384      	adds	r3, #132	@ 0x84
90006994:	681b      	ldr	r3, [r3, #0]
90006996:	68fa      	ldr	r2, [r7, #12]
90006998:	6812      	ldr	r2, [r2, #0]
9000699a:	4611      	mov	r1, r2
9000699c:	687a      	ldr	r2, [r7, #4]
9000699e:	01d2      	lsls	r2, r2, #7
900069a0:	440a      	add	r2, r1
900069a2:	3284      	adds	r2, #132	@ 0x84
900069a4:	f043 0301 	orr.w	r3, r3, #1
900069a8:	6013      	str	r3, [r2, #0]
}
900069aa:	bf00      	nop
900069ac:	3724      	adds	r7, #36	@ 0x24
900069ae:	46bd      	mov	sp, r7
900069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900069b4:	4770      	bx	lr
900069b6:	bf00      	nop
900069b8:	fffff8f8 	.word	0xfffff8f8
900069bc:	fffff800 	.word	0xfffff800

900069c0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900069c0:	b580      	push	{r7, lr}
900069c2:	b084      	sub	sp, #16
900069c4:	af00      	add	r7, sp, #0
900069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900069c8:	f7fc fc8e 	bl	900032e8 <HAL_GetTick>
900069cc:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900069ce:	687b      	ldr	r3, [r7, #4]
900069d0:	2b00      	cmp	r3, #0
900069d2:	d101      	bne.n	900069d8 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
900069d4:	2301      	movs	r3, #1
900069d6:	e03b      	b.n	90006a50 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	2200      	movs	r2, #0
900069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
900069e0:	687b      	ldr	r3, [r7, #4]
900069e2:	2202      	movs	r2, #2
900069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
900069e8:	687b      	ldr	r3, [r7, #4]
900069ea:	681b      	ldr	r3, [r3, #0]
900069ec:	68da      	ldr	r2, [r3, #12]
900069ee:	687b      	ldr	r3, [r7, #4]
900069f0:	681b      	ldr	r3, [r3, #0]
900069f2:	f022 0201 	bic.w	r2, r2, #1
900069f6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900069f8:	e00f      	b.n	90006a1a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
900069fa:	f7fc fc75 	bl	900032e8 <HAL_GetTick>
900069fe:	4602      	mov	r2, r0
90006a00:	68fb      	ldr	r3, [r7, #12]
90006a02:	1ad3      	subs	r3, r2, r3
90006a04:	2b05      	cmp	r3, #5
90006a06:	d908      	bls.n	90006a1a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006a08:	687b      	ldr	r3, [r7, #4]
90006a0a:	2240      	movs	r2, #64	@ 0x40
90006a0c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006a0e:	687b      	ldr	r3, [r7, #4]
90006a10:	2203      	movs	r2, #3
90006a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
90006a16:	2301      	movs	r3, #1
90006a18:	e01a      	b.n	90006a50 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006a1a:	687b      	ldr	r3, [r7, #4]
90006a1c:	681b      	ldr	r3, [r3, #0]
90006a1e:	68db      	ldr	r3, [r3, #12]
90006a20:	f003 0301 	and.w	r3, r3, #1
90006a24:	2b00      	cmp	r3, #0
90006a26:	d1e8      	bne.n	900069fa <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006a28:	6878      	ldr	r0, [r7, #4]
90006a2a:	f000 f86d 	bl	90006b08 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006a2e:	687b      	ldr	r3, [r7, #4]
90006a30:	2200      	movs	r2, #0
90006a32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006a34:	687b      	ldr	r3, [r7, #4]
90006a36:	2200      	movs	r2, #0
90006a38:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006a3a:	687b      	ldr	r3, [r7, #4]
90006a3c:	2200      	movs	r2, #0
90006a3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006a40:	687b      	ldr	r3, [r7, #4]
90006a42:	2200      	movs	r2, #0
90006a44:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
90006a46:	687b      	ldr	r3, [r7, #4]
90006a48:	2201      	movs	r2, #1
90006a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006a4e:	2300      	movs	r3, #0
}
90006a50:	4618      	mov	r0, r3
90006a52:	3710      	adds	r7, #16
90006a54:	46bd      	mov	sp, r7
90006a56:	bd80      	pop	{r7, pc}

90006a58 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
90006a58:	b480      	push	{r7}
90006a5a:	b083      	sub	sp, #12
90006a5c:	af00      	add	r7, sp, #0
90006a5e:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006a60:	687b      	ldr	r3, [r7, #4]
90006a62:	2b00      	cmp	r3, #0
90006a64:	d101      	bne.n	90006a6a <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
90006a66:	2301      	movs	r3, #1
90006a68:	e048      	b.n	90006afc <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
90006a6a:	687b      	ldr	r3, [r7, #4]
90006a6c:	681b      	ldr	r3, [r3, #0]
90006a6e:	68da      	ldr	r2, [r3, #12]
90006a70:	687b      	ldr	r3, [r7, #4]
90006a72:	681b      	ldr	r3, [r3, #0]
90006a74:	f022 0201 	bic.w	r2, r2, #1
90006a78:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
90006a7a:	687b      	ldr	r3, [r7, #4]
90006a7c:	681b      	ldr	r3, [r3, #0]
90006a7e:	2200      	movs	r2, #0
90006a80:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90006a82:	687b      	ldr	r3, [r7, #4]
90006a84:	681b      	ldr	r3, [r3, #0]
90006a86:	2200      	movs	r2, #0
90006a88:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90006a8a:	687b      	ldr	r3, [r7, #4]
90006a8c:	681b      	ldr	r3, [r3, #0]
90006a8e:	2200      	movs	r2, #0
90006a90:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006a92:	687b      	ldr	r3, [r7, #4]
90006a94:	681b      	ldr	r3, [r3, #0]
90006a96:	2200      	movs	r2, #0
90006a98:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006a9a:	687b      	ldr	r3, [r7, #4]
90006a9c:	681b      	ldr	r3, [r3, #0]
90006a9e:	2200      	movs	r2, #0
90006aa0:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006aa2:	687b      	ldr	r3, [r7, #4]
90006aa4:	681b      	ldr	r3, [r3, #0]
90006aa6:	2200      	movs	r2, #0
90006aa8:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006aaa:	687b      	ldr	r3, [r7, #4]
90006aac:	681b      	ldr	r3, [r3, #0]
90006aae:	2200      	movs	r2, #0
90006ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
90006ab2:	687b      	ldr	r3, [r7, #4]
90006ab4:	681b      	ldr	r3, [r3, #0]
90006ab6:	2200      	movs	r2, #0
90006ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
90006aba:	687b      	ldr	r3, [r7, #4]
90006abc:	681b      	ldr	r3, [r3, #0]
90006abe:	2200      	movs	r2, #0
90006ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
90006ac2:	687b      	ldr	r3, [r7, #4]
90006ac4:	681b      	ldr	r3, [r3, #0]
90006ac6:	2200      	movs	r2, #0
90006ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006aca:	687b      	ldr	r3, [r7, #4]
90006acc:	681b      	ldr	r3, [r3, #0]
90006ace:	221f      	movs	r2, #31
90006ad0:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006ad2:	687b      	ldr	r3, [r7, #4]
90006ad4:	2200      	movs	r2, #0
90006ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006ad8:	687b      	ldr	r3, [r7, #4]
90006ada:	2200      	movs	r2, #0
90006adc:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006ade:	687b      	ldr	r3, [r7, #4]
90006ae0:	2200      	movs	r2, #0
90006ae2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006ae4:	687b      	ldr	r3, [r7, #4]
90006ae6:	2200      	movs	r2, #0
90006ae8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006aea:	687b      	ldr	r3, [r7, #4]
90006aec:	2200      	movs	r2, #0
90006aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006af2:	687b      	ldr	r3, [r7, #4]
90006af4:	2200      	movs	r2, #0
90006af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90006afa:	2300      	movs	r3, #0
}
90006afc:	4618      	mov	r0, r3
90006afe:	370c      	adds	r7, #12
90006b00:	46bd      	mov	sp, r7
90006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
90006b06:	4770      	bx	lr

90006b08 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006b08:	b480      	push	{r7}
90006b0a:	b085      	sub	sp, #20
90006b0c:	af00      	add	r7, sp, #0
90006b0e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006b10:	687b      	ldr	r3, [r7, #4]
90006b12:	68d9      	ldr	r1, [r3, #12]
90006b14:	687b      	ldr	r3, [r7, #4]
90006b16:	691a      	ldr	r2, [r3, #16]
90006b18:	687b      	ldr	r3, [r7, #4]
90006b1a:	681b      	ldr	r3, [r3, #0]
90006b1c:	430a      	orrs	r2, r1
90006b1e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006b20:	687b      	ldr	r3, [r7, #4]
90006b22:	695a      	ldr	r2, [r3, #20]
90006b24:	687b      	ldr	r3, [r7, #4]
90006b26:	699b      	ldr	r3, [r3, #24]
90006b28:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006b2a:	687b      	ldr	r3, [r7, #4]
90006b2c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006b2e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006b30:	687b      	ldr	r3, [r7, #4]
90006b32:	6a1b      	ldr	r3, [r3, #32]
90006b34:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006b36:	687b      	ldr	r3, [r7, #4]
90006b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006b3a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006b3c:	687b      	ldr	r3, [r7, #4]
90006b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006b40:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006b42:	687b      	ldr	r3, [r7, #4]
90006b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006b46:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006b48:	687b      	ldr	r3, [r7, #4]
90006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006b4c:	3b01      	subs	r3, #1
90006b4e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006b50:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006b54:	687b      	ldr	r3, [r7, #4]
90006b56:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006b58:	687b      	ldr	r3, [r7, #4]
90006b5a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006b5c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006b5e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006b60:	687b      	ldr	r3, [r7, #4]
90006b62:	685b      	ldr	r3, [r3, #4]
90006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006b68:	d107      	bne.n	90006b7a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006b6a:	687b      	ldr	r3, [r7, #4]
90006b6c:	681b      	ldr	r3, [r3, #0]
90006b6e:	691a      	ldr	r2, [r3, #16]
90006b70:	687b      	ldr	r3, [r7, #4]
90006b72:	681b      	ldr	r3, [r3, #0]
90006b74:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006b78:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006b7a:	687b      	ldr	r3, [r7, #4]
90006b7c:	681b      	ldr	r3, [r3, #0]
90006b7e:	2200      	movs	r2, #0
90006b80:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006b82:	687b      	ldr	r3, [r7, #4]
90006b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006b86:	2b00      	cmp	r3, #0
90006b88:	da11      	bge.n	90006bae <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006b8a:	687b      	ldr	r3, [r7, #4]
90006b8c:	681b      	ldr	r3, [r3, #0]
90006b8e:	695a      	ldr	r2, [r3, #20]
90006b90:	687b      	ldr	r3, [r7, #4]
90006b92:	681b      	ldr	r3, [r3, #0]
90006b94:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006b98:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006b9a:	687b      	ldr	r3, [r7, #4]
90006b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006b9e:	425b      	negs	r3, r3
90006ba0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006ba2:	687b      	ldr	r3, [r7, #4]
90006ba4:	681b      	ldr	r3, [r3, #0]
90006ba6:	68fa      	ldr	r2, [r7, #12]
90006ba8:	b292      	uxth	r2, r2
90006baa:	621a      	str	r2, [r3, #32]
90006bac:	e006      	b.n	90006bbc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006bae:	687b      	ldr	r3, [r7, #4]
90006bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006bb2:	461a      	mov	r2, r3
90006bb4:	687b      	ldr	r3, [r7, #4]
90006bb6:	681b      	ldr	r3, [r3, #0]
90006bb8:	b292      	uxth	r2, r2
90006bba:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006bbc:	687b      	ldr	r3, [r7, #4]
90006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006bc0:	2b00      	cmp	r3, #0
90006bc2:	da15      	bge.n	90006bf0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006bc4:	687b      	ldr	r3, [r7, #4]
90006bc6:	681b      	ldr	r3, [r3, #0]
90006bc8:	695a      	ldr	r2, [r3, #20]
90006bca:	687b      	ldr	r3, [r7, #4]
90006bcc:	681b      	ldr	r3, [r3, #0]
90006bce:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006bd2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006bd4:	687b      	ldr	r3, [r7, #4]
90006bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006bd8:	425b      	negs	r3, r3
90006bda:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006bdc:	687b      	ldr	r3, [r7, #4]
90006bde:	681b      	ldr	r3, [r3, #0]
90006be0:	6a19      	ldr	r1, [r3, #32]
90006be2:	68fb      	ldr	r3, [r7, #12]
90006be4:	041a      	lsls	r2, r3, #16
90006be6:	687b      	ldr	r3, [r7, #4]
90006be8:	681b      	ldr	r3, [r3, #0]
90006bea:	430a      	orrs	r2, r1
90006bec:	621a      	str	r2, [r3, #32]
90006bee:	e009      	b.n	90006c04 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006bf0:	687b      	ldr	r3, [r7, #4]
90006bf2:	681b      	ldr	r3, [r3, #0]
90006bf4:	6a19      	ldr	r1, [r3, #32]
90006bf6:	687b      	ldr	r3, [r7, #4]
90006bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006bfa:	041a      	lsls	r2, r3, #16
90006bfc:	687b      	ldr	r3, [r7, #4]
90006bfe:	681b      	ldr	r3, [r3, #0]
90006c00:	430a      	orrs	r2, r1
90006c02:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006c04:	687b      	ldr	r3, [r7, #4]
90006c06:	685b      	ldr	r3, [r3, #4]
90006c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006c0c:	d006      	beq.n	90006c1c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006c0e:	687b      	ldr	r3, [r7, #4]
90006c10:	685a      	ldr	r2, [r3, #4]
90006c12:	687b      	ldr	r3, [r7, #4]
90006c14:	681b      	ldr	r3, [r3, #0]
90006c16:	b2d2      	uxtb	r2, r2
90006c18:	629a      	str	r2, [r3, #40]	@ 0x28
90006c1a:	e003      	b.n	90006c24 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006c1c:	687b      	ldr	r3, [r7, #4]
90006c1e:	681b      	ldr	r3, [r3, #0]
90006c20:	2200      	movs	r2, #0
90006c22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006c24:	687b      	ldr	r3, [r7, #4]
90006c26:	681b      	ldr	r3, [r3, #0]
90006c28:	2200      	movs	r2, #0
90006c2a:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006c2c:	bf00      	nop
90006c2e:	3714      	adds	r7, #20
90006c30:	46bd      	mov	sp, r7
90006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
90006c36:	4770      	bx	lr

90006c38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006c38:	b580      	push	{r7, lr}
90006c3a:	b08c      	sub	sp, #48	@ 0x30
90006c3c:	af00      	add	r7, sp, #0
90006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006c40:	687b      	ldr	r3, [r7, #4]
90006c42:	2b00      	cmp	r3, #0
90006c44:	d102      	bne.n	90006c4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006c46:	2301      	movs	r3, #1
90006c48:	f000 bc48 	b.w	900074dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006c4c:	687b      	ldr	r3, [r7, #4]
90006c4e:	681b      	ldr	r3, [r3, #0]
90006c50:	f003 0301 	and.w	r3, r3, #1
90006c54:	2b00      	cmp	r3, #0
90006c56:	f000 8088 	beq.w	90006d6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006c5a:	4b99      	ldr	r3, [pc, #612]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006c5c:	691b      	ldr	r3, [r3, #16]
90006c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006c64:	4b96      	ldr	r3, [pc, #600]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006c6c:	2b10      	cmp	r3, #16
90006c6e:	d007      	beq.n	90006c80 <HAL_RCC_OscConfig+0x48>
90006c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006c72:	2b18      	cmp	r3, #24
90006c74:	d111      	bne.n	90006c9a <HAL_RCC_OscConfig+0x62>
90006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006c78:	f003 0303 	and.w	r3, r3, #3
90006c7c:	2b02      	cmp	r3, #2
90006c7e:	d10c      	bne.n	90006c9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006c80:	4b8f      	ldr	r3, [pc, #572]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006c82:	681b      	ldr	r3, [r3, #0]
90006c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006c88:	2b00      	cmp	r3, #0
90006c8a:	d06d      	beq.n	90006d68 <HAL_RCC_OscConfig+0x130>
90006c8c:	687b      	ldr	r3, [r7, #4]
90006c8e:	685b      	ldr	r3, [r3, #4]
90006c90:	2b00      	cmp	r3, #0
90006c92:	d169      	bne.n	90006d68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006c94:	2301      	movs	r3, #1
90006c96:	f000 bc21 	b.w	900074dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006c9a:	687b      	ldr	r3, [r7, #4]
90006c9c:	685b      	ldr	r3, [r3, #4]
90006c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006ca2:	d106      	bne.n	90006cb2 <HAL_RCC_OscConfig+0x7a>
90006ca4:	4b86      	ldr	r3, [pc, #536]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006ca6:	681b      	ldr	r3, [r3, #0]
90006ca8:	4a85      	ldr	r2, [pc, #532]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006cae:	6013      	str	r3, [r2, #0]
90006cb0:	e02e      	b.n	90006d10 <HAL_RCC_OscConfig+0xd8>
90006cb2:	687b      	ldr	r3, [r7, #4]
90006cb4:	685b      	ldr	r3, [r3, #4]
90006cb6:	2b00      	cmp	r3, #0
90006cb8:	d10c      	bne.n	90006cd4 <HAL_RCC_OscConfig+0x9c>
90006cba:	4b81      	ldr	r3, [pc, #516]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006cbc:	681b      	ldr	r3, [r3, #0]
90006cbe:	4a80      	ldr	r2, [pc, #512]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006cc4:	6013      	str	r3, [r2, #0]
90006cc6:	4b7e      	ldr	r3, [pc, #504]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006cc8:	681b      	ldr	r3, [r3, #0]
90006cca:	4a7d      	ldr	r2, [pc, #500]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006ccc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006cd0:	6013      	str	r3, [r2, #0]
90006cd2:	e01d      	b.n	90006d10 <HAL_RCC_OscConfig+0xd8>
90006cd4:	687b      	ldr	r3, [r7, #4]
90006cd6:	685b      	ldr	r3, [r3, #4]
90006cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006cdc:	d10c      	bne.n	90006cf8 <HAL_RCC_OscConfig+0xc0>
90006cde:	4b78      	ldr	r3, [pc, #480]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006ce0:	681b      	ldr	r3, [r3, #0]
90006ce2:	4a77      	ldr	r2, [pc, #476]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006ce8:	6013      	str	r3, [r2, #0]
90006cea:	4b75      	ldr	r3, [pc, #468]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006cec:	681b      	ldr	r3, [r3, #0]
90006cee:	4a74      	ldr	r2, [pc, #464]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006cf4:	6013      	str	r3, [r2, #0]
90006cf6:	e00b      	b.n	90006d10 <HAL_RCC_OscConfig+0xd8>
90006cf8:	4b71      	ldr	r3, [pc, #452]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006cfa:	681b      	ldr	r3, [r3, #0]
90006cfc:	4a70      	ldr	r2, [pc, #448]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006d02:	6013      	str	r3, [r2, #0]
90006d04:	4b6e      	ldr	r3, [pc, #440]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006d06:	681b      	ldr	r3, [r3, #0]
90006d08:	4a6d      	ldr	r2, [pc, #436]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006d10:	687b      	ldr	r3, [r7, #4]
90006d12:	685b      	ldr	r3, [r3, #4]
90006d14:	2b00      	cmp	r3, #0
90006d16:	d013      	beq.n	90006d40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d18:	f7fc fae6 	bl	900032e8 <HAL_GetTick>
90006d1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006d1e:	e008      	b.n	90006d32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006d20:	f7fc fae2 	bl	900032e8 <HAL_GetTick>
90006d24:	4602      	mov	r2, r0
90006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006d28:	1ad3      	subs	r3, r2, r3
90006d2a:	2b64      	cmp	r3, #100	@ 0x64
90006d2c:	d901      	bls.n	90006d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006d2e:	2303      	movs	r3, #3
90006d30:	e3d4      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006d32:	4b63      	ldr	r3, [pc, #396]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006d34:	681b      	ldr	r3, [r3, #0]
90006d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006d3a:	2b00      	cmp	r3, #0
90006d3c:	d0f0      	beq.n	90006d20 <HAL_RCC_OscConfig+0xe8>
90006d3e:	e014      	b.n	90006d6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d40:	f7fc fad2 	bl	900032e8 <HAL_GetTick>
90006d44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006d46:	e008      	b.n	90006d5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006d48:	f7fc face 	bl	900032e8 <HAL_GetTick>
90006d4c:	4602      	mov	r2, r0
90006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006d50:	1ad3      	subs	r3, r2, r3
90006d52:	2b64      	cmp	r3, #100	@ 0x64
90006d54:	d901      	bls.n	90006d5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006d56:	2303      	movs	r3, #3
90006d58:	e3c0      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006d5a:	4b59      	ldr	r3, [pc, #356]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006d5c:	681b      	ldr	r3, [r3, #0]
90006d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006d62:	2b00      	cmp	r3, #0
90006d64:	d1f0      	bne.n	90006d48 <HAL_RCC_OscConfig+0x110>
90006d66:	e000      	b.n	90006d6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006d6a:	687b      	ldr	r3, [r7, #4]
90006d6c:	681b      	ldr	r3, [r3, #0]
90006d6e:	f003 0302 	and.w	r3, r3, #2
90006d72:	2b00      	cmp	r3, #0
90006d74:	f000 80ca 	beq.w	90006f0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006d78:	4b51      	ldr	r3, [pc, #324]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006d7a:	691b      	ldr	r3, [r3, #16]
90006d7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006d80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006d82:	4b4f      	ldr	r3, [pc, #316]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006d86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006d88:	6a3b      	ldr	r3, [r7, #32]
90006d8a:	2b00      	cmp	r3, #0
90006d8c:	d007      	beq.n	90006d9e <HAL_RCC_OscConfig+0x166>
90006d8e:	6a3b      	ldr	r3, [r7, #32]
90006d90:	2b18      	cmp	r3, #24
90006d92:	d156      	bne.n	90006e42 <HAL_RCC_OscConfig+0x20a>
90006d94:	69fb      	ldr	r3, [r7, #28]
90006d96:	f003 0303 	and.w	r3, r3, #3
90006d9a:	2b00      	cmp	r3, #0
90006d9c:	d151      	bne.n	90006e42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d9e:	4b48      	ldr	r3, [pc, #288]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006da0:	681b      	ldr	r3, [r3, #0]
90006da2:	f003 0304 	and.w	r3, r3, #4
90006da6:	2b00      	cmp	r3, #0
90006da8:	d005      	beq.n	90006db6 <HAL_RCC_OscConfig+0x17e>
90006daa:	687b      	ldr	r3, [r7, #4]
90006dac:	68db      	ldr	r3, [r3, #12]
90006dae:	2b00      	cmp	r3, #0
90006db0:	d101      	bne.n	90006db6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006db2:	2301      	movs	r3, #1
90006db4:	e392      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006db6:	4b42      	ldr	r3, [pc, #264]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006db8:	681b      	ldr	r3, [r3, #0]
90006dba:	f023 0219 	bic.w	r2, r3, #25
90006dbe:	687b      	ldr	r3, [r7, #4]
90006dc0:	68db      	ldr	r3, [r3, #12]
90006dc2:	493f      	ldr	r1, [pc, #252]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006dc4:	4313      	orrs	r3, r2
90006dc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006dc8:	f7fc fa8e 	bl	900032e8 <HAL_GetTick>
90006dcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dce:	e008      	b.n	90006de2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006dd0:	f7fc fa8a 	bl	900032e8 <HAL_GetTick>
90006dd4:	4602      	mov	r2, r0
90006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006dd8:	1ad3      	subs	r3, r2, r3
90006dda:	2b02      	cmp	r3, #2
90006ddc:	d901      	bls.n	90006de2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006dde:	2303      	movs	r3, #3
90006de0:	e37c      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006de2:	4b37      	ldr	r3, [pc, #220]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006de4:	681b      	ldr	r3, [r3, #0]
90006de6:	f003 0304 	and.w	r3, r3, #4
90006dea:	2b00      	cmp	r3, #0
90006dec:	d0f0      	beq.n	90006dd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006dee:	f7fc faab 	bl	90003348 <HAL_GetREVID>
90006df2:	4603      	mov	r3, r0
90006df4:	f241 0203 	movw	r2, #4099	@ 0x1003
90006df8:	4293      	cmp	r3, r2
90006dfa:	d817      	bhi.n	90006e2c <HAL_RCC_OscConfig+0x1f4>
90006dfc:	687b      	ldr	r3, [r7, #4]
90006dfe:	691b      	ldr	r3, [r3, #16]
90006e00:	2b40      	cmp	r3, #64	@ 0x40
90006e02:	d108      	bne.n	90006e16 <HAL_RCC_OscConfig+0x1de>
90006e04:	4b2e      	ldr	r3, [pc, #184]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e06:	685b      	ldr	r3, [r3, #4]
90006e08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006e0c:	4a2c      	ldr	r2, [pc, #176]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006e12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e14:	e07a      	b.n	90006f0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e16:	4b2a      	ldr	r3, [pc, #168]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e18:	685b      	ldr	r3, [r3, #4]
90006e1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006e1e:	687b      	ldr	r3, [r7, #4]
90006e20:	691b      	ldr	r3, [r3, #16]
90006e22:	031b      	lsls	r3, r3, #12
90006e24:	4926      	ldr	r1, [pc, #152]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e26:	4313      	orrs	r3, r2
90006e28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e2a:	e06f      	b.n	90006f0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e2c:	4b24      	ldr	r3, [pc, #144]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e2e:	685b      	ldr	r3, [r3, #4]
90006e30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006e34:	687b      	ldr	r3, [r7, #4]
90006e36:	691b      	ldr	r3, [r3, #16]
90006e38:	061b      	lsls	r3, r3, #24
90006e3a:	4921      	ldr	r1, [pc, #132]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e3c:	4313      	orrs	r3, r2
90006e3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e40:	e064      	b.n	90006f0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006e42:	687b      	ldr	r3, [r7, #4]
90006e44:	68db      	ldr	r3, [r3, #12]
90006e46:	2b00      	cmp	r3, #0
90006e48:	d047      	beq.n	90006eda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006e4a:	4b1d      	ldr	r3, [pc, #116]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e4c:	681b      	ldr	r3, [r3, #0]
90006e4e:	f023 0219 	bic.w	r2, r3, #25
90006e52:	687b      	ldr	r3, [r7, #4]
90006e54:	68db      	ldr	r3, [r3, #12]
90006e56:	491a      	ldr	r1, [pc, #104]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e58:	4313      	orrs	r3, r2
90006e5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e5c:	f7fc fa44 	bl	900032e8 <HAL_GetTick>
90006e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e62:	e008      	b.n	90006e76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006e64:	f7fc fa40 	bl	900032e8 <HAL_GetTick>
90006e68:	4602      	mov	r2, r0
90006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006e6c:	1ad3      	subs	r3, r2, r3
90006e6e:	2b02      	cmp	r3, #2
90006e70:	d901      	bls.n	90006e76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006e72:	2303      	movs	r3, #3
90006e74:	e332      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e76:	4b12      	ldr	r3, [pc, #72]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e78:	681b      	ldr	r3, [r3, #0]
90006e7a:	f003 0304 	and.w	r3, r3, #4
90006e7e:	2b00      	cmp	r3, #0
90006e80:	d0f0      	beq.n	90006e64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e82:	f7fc fa61 	bl	90003348 <HAL_GetREVID>
90006e86:	4603      	mov	r3, r0
90006e88:	f241 0203 	movw	r2, #4099	@ 0x1003
90006e8c:	4293      	cmp	r3, r2
90006e8e:	d819      	bhi.n	90006ec4 <HAL_RCC_OscConfig+0x28c>
90006e90:	687b      	ldr	r3, [r7, #4]
90006e92:	691b      	ldr	r3, [r3, #16]
90006e94:	2b40      	cmp	r3, #64	@ 0x40
90006e96:	d108      	bne.n	90006eaa <HAL_RCC_OscConfig+0x272>
90006e98:	4b09      	ldr	r3, [pc, #36]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006e9a:	685b      	ldr	r3, [r3, #4]
90006e9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006ea0:	4a07      	ldr	r2, [pc, #28]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006ea6:	6053      	str	r3, [r2, #4]
90006ea8:	e030      	b.n	90006f0c <HAL_RCC_OscConfig+0x2d4>
90006eaa:	4b05      	ldr	r3, [pc, #20]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006eac:	685b      	ldr	r3, [r3, #4]
90006eae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006eb2:	687b      	ldr	r3, [r7, #4]
90006eb4:	691b      	ldr	r3, [r3, #16]
90006eb6:	031b      	lsls	r3, r3, #12
90006eb8:	4901      	ldr	r1, [pc, #4]	@ (90006ec0 <HAL_RCC_OscConfig+0x288>)
90006eba:	4313      	orrs	r3, r2
90006ebc:	604b      	str	r3, [r1, #4]
90006ebe:	e025      	b.n	90006f0c <HAL_RCC_OscConfig+0x2d4>
90006ec0:	58024400 	.word	0x58024400
90006ec4:	4b9a      	ldr	r3, [pc, #616]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006ec6:	685b      	ldr	r3, [r3, #4]
90006ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006ecc:	687b      	ldr	r3, [r7, #4]
90006ece:	691b      	ldr	r3, [r3, #16]
90006ed0:	061b      	lsls	r3, r3, #24
90006ed2:	4997      	ldr	r1, [pc, #604]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006ed4:	4313      	orrs	r3, r2
90006ed6:	604b      	str	r3, [r1, #4]
90006ed8:	e018      	b.n	90006f0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006eda:	4b95      	ldr	r3, [pc, #596]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006edc:	681b      	ldr	r3, [r3, #0]
90006ede:	4a94      	ldr	r2, [pc, #592]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006ee0:	f023 0301 	bic.w	r3, r3, #1
90006ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006ee6:	f7fc f9ff 	bl	900032e8 <HAL_GetTick>
90006eea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006eec:	e008      	b.n	90006f00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006eee:	f7fc f9fb 	bl	900032e8 <HAL_GetTick>
90006ef2:	4602      	mov	r2, r0
90006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006ef6:	1ad3      	subs	r3, r2, r3
90006ef8:	2b02      	cmp	r3, #2
90006efa:	d901      	bls.n	90006f00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006efc:	2303      	movs	r3, #3
90006efe:	e2ed      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006f00:	4b8b      	ldr	r3, [pc, #556]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f02:	681b      	ldr	r3, [r3, #0]
90006f04:	f003 0304 	and.w	r3, r3, #4
90006f08:	2b00      	cmp	r3, #0
90006f0a:	d1f0      	bne.n	90006eee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006f0c:	687b      	ldr	r3, [r7, #4]
90006f0e:	681b      	ldr	r3, [r3, #0]
90006f10:	f003 0310 	and.w	r3, r3, #16
90006f14:	2b00      	cmp	r3, #0
90006f16:	f000 80a9 	beq.w	9000706c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006f1a:	4b85      	ldr	r3, [pc, #532]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f1c:	691b      	ldr	r3, [r3, #16]
90006f1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006f22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006f24:	4b82      	ldr	r3, [pc, #520]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006f28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006f2a:	69bb      	ldr	r3, [r7, #24]
90006f2c:	2b08      	cmp	r3, #8
90006f2e:	d007      	beq.n	90006f40 <HAL_RCC_OscConfig+0x308>
90006f30:	69bb      	ldr	r3, [r7, #24]
90006f32:	2b18      	cmp	r3, #24
90006f34:	d13a      	bne.n	90006fac <HAL_RCC_OscConfig+0x374>
90006f36:	697b      	ldr	r3, [r7, #20]
90006f38:	f003 0303 	and.w	r3, r3, #3
90006f3c:	2b01      	cmp	r3, #1
90006f3e:	d135      	bne.n	90006fac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f40:	4b7b      	ldr	r3, [pc, #492]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f42:	681b      	ldr	r3, [r3, #0]
90006f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006f48:	2b00      	cmp	r3, #0
90006f4a:	d005      	beq.n	90006f58 <HAL_RCC_OscConfig+0x320>
90006f4c:	687b      	ldr	r3, [r7, #4]
90006f4e:	69db      	ldr	r3, [r3, #28]
90006f50:	2b80      	cmp	r3, #128	@ 0x80
90006f52:	d001      	beq.n	90006f58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006f54:	2301      	movs	r3, #1
90006f56:	e2c1      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f58:	f7fc f9f6 	bl	90003348 <HAL_GetREVID>
90006f5c:	4603      	mov	r3, r0
90006f5e:	f241 0203 	movw	r2, #4099	@ 0x1003
90006f62:	4293      	cmp	r3, r2
90006f64:	d817      	bhi.n	90006f96 <HAL_RCC_OscConfig+0x35e>
90006f66:	687b      	ldr	r3, [r7, #4]
90006f68:	6a1b      	ldr	r3, [r3, #32]
90006f6a:	2b20      	cmp	r3, #32
90006f6c:	d108      	bne.n	90006f80 <HAL_RCC_OscConfig+0x348>
90006f6e:	4b70      	ldr	r3, [pc, #448]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f70:	685b      	ldr	r3, [r3, #4]
90006f72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006f76:	4a6e      	ldr	r2, [pc, #440]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006f7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f7e:	e075      	b.n	9000706c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f80:	4b6b      	ldr	r3, [pc, #428]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f82:	685b      	ldr	r3, [r3, #4]
90006f84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006f88:	687b      	ldr	r3, [r7, #4]
90006f8a:	6a1b      	ldr	r3, [r3, #32]
90006f8c:	069b      	lsls	r3, r3, #26
90006f8e:	4968      	ldr	r1, [pc, #416]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f90:	4313      	orrs	r3, r2
90006f92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f94:	e06a      	b.n	9000706c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f96:	4b66      	ldr	r3, [pc, #408]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006f98:	68db      	ldr	r3, [r3, #12]
90006f9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006f9e:	687b      	ldr	r3, [r7, #4]
90006fa0:	6a1b      	ldr	r3, [r3, #32]
90006fa2:	061b      	lsls	r3, r3, #24
90006fa4:	4962      	ldr	r1, [pc, #392]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006fa6:	4313      	orrs	r3, r2
90006fa8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006faa:	e05f      	b.n	9000706c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006fac:	687b      	ldr	r3, [r7, #4]
90006fae:	69db      	ldr	r3, [r3, #28]
90006fb0:	2b00      	cmp	r3, #0
90006fb2:	d042      	beq.n	9000703a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006fb4:	4b5e      	ldr	r3, [pc, #376]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006fb6:	681b      	ldr	r3, [r3, #0]
90006fb8:	4a5d      	ldr	r2, [pc, #372]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90006fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006fc0:	f7fc f992 	bl	900032e8 <HAL_GetTick>
90006fc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006fc6:	e008      	b.n	90006fda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006fc8:	f7fc f98e 	bl	900032e8 <HAL_GetTick>
90006fcc:	4602      	mov	r2, r0
90006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006fd0:	1ad3      	subs	r3, r2, r3
90006fd2:	2b02      	cmp	r3, #2
90006fd4:	d901      	bls.n	90006fda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006fd6:	2303      	movs	r3, #3
90006fd8:	e280      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006fda:	4b55      	ldr	r3, [pc, #340]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006fdc:	681b      	ldr	r3, [r3, #0]
90006fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006fe2:	2b00      	cmp	r3, #0
90006fe4:	d0f0      	beq.n	90006fc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006fe6:	f7fc f9af 	bl	90003348 <HAL_GetREVID>
90006fea:	4603      	mov	r3, r0
90006fec:	f241 0203 	movw	r2, #4099	@ 0x1003
90006ff0:	4293      	cmp	r3, r2
90006ff2:	d817      	bhi.n	90007024 <HAL_RCC_OscConfig+0x3ec>
90006ff4:	687b      	ldr	r3, [r7, #4]
90006ff6:	6a1b      	ldr	r3, [r3, #32]
90006ff8:	2b20      	cmp	r3, #32
90006ffa:	d108      	bne.n	9000700e <HAL_RCC_OscConfig+0x3d6>
90006ffc:	4b4c      	ldr	r3, [pc, #304]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90006ffe:	685b      	ldr	r3, [r3, #4]
90007000:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90007004:	4a4a      	ldr	r2, [pc, #296]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007006:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000700a:	6053      	str	r3, [r2, #4]
9000700c:	e02e      	b.n	9000706c <HAL_RCC_OscConfig+0x434>
9000700e:	4b48      	ldr	r3, [pc, #288]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007010:	685b      	ldr	r3, [r3, #4]
90007012:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90007016:	687b      	ldr	r3, [r7, #4]
90007018:	6a1b      	ldr	r3, [r3, #32]
9000701a:	069b      	lsls	r3, r3, #26
9000701c:	4944      	ldr	r1, [pc, #272]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
9000701e:	4313      	orrs	r3, r2
90007020:	604b      	str	r3, [r1, #4]
90007022:	e023      	b.n	9000706c <HAL_RCC_OscConfig+0x434>
90007024:	4b42      	ldr	r3, [pc, #264]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007026:	68db      	ldr	r3, [r3, #12]
90007028:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
9000702c:	687b      	ldr	r3, [r7, #4]
9000702e:	6a1b      	ldr	r3, [r3, #32]
90007030:	061b      	lsls	r3, r3, #24
90007032:	493f      	ldr	r1, [pc, #252]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007034:	4313      	orrs	r3, r2
90007036:	60cb      	str	r3, [r1, #12]
90007038:	e018      	b.n	9000706c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
9000703a:	4b3d      	ldr	r3, [pc, #244]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
9000703c:	681b      	ldr	r3, [r3, #0]
9000703e:	4a3c      	ldr	r2, [pc, #240]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90007044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007046:	f7fc f94f 	bl	900032e8 <HAL_GetTick>
9000704a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000704c:	e008      	b.n	90007060 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000704e:	f7fc f94b 	bl	900032e8 <HAL_GetTick>
90007052:	4602      	mov	r2, r0
90007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007056:	1ad3      	subs	r3, r2, r3
90007058:	2b02      	cmp	r3, #2
9000705a:	d901      	bls.n	90007060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
9000705c:	2303      	movs	r3, #3
9000705e:	e23d      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007060:	4b33      	ldr	r3, [pc, #204]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007062:	681b      	ldr	r3, [r3, #0]
90007064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007068:	2b00      	cmp	r3, #0
9000706a:	d1f0      	bne.n	9000704e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000706c:	687b      	ldr	r3, [r7, #4]
9000706e:	681b      	ldr	r3, [r3, #0]
90007070:	f003 0308 	and.w	r3, r3, #8
90007074:	2b00      	cmp	r3, #0
90007076:	d036      	beq.n	900070e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90007078:	687b      	ldr	r3, [r7, #4]
9000707a:	695b      	ldr	r3, [r3, #20]
9000707c:	2b00      	cmp	r3, #0
9000707e:	d019      	beq.n	900070b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90007080:	4b2b      	ldr	r3, [pc, #172]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90007084:	4a2a      	ldr	r2, [pc, #168]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007086:	f043 0301 	orr.w	r3, r3, #1
9000708a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000708c:	f7fc f92c 	bl	900032e8 <HAL_GetTick>
90007090:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007092:	e008      	b.n	900070a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007094:	f7fc f928 	bl	900032e8 <HAL_GetTick>
90007098:	4602      	mov	r2, r0
9000709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000709c:	1ad3      	subs	r3, r2, r3
9000709e:	2b02      	cmp	r3, #2
900070a0:	d901      	bls.n	900070a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
900070a2:	2303      	movs	r3, #3
900070a4:	e21a      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900070a6:	4b22      	ldr	r3, [pc, #136]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
900070a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900070aa:	f003 0302 	and.w	r3, r3, #2
900070ae:	2b00      	cmp	r3, #0
900070b0:	d0f0      	beq.n	90007094 <HAL_RCC_OscConfig+0x45c>
900070b2:	e018      	b.n	900070e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900070b4:	4b1e      	ldr	r3, [pc, #120]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
900070b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900070b8:	4a1d      	ldr	r2, [pc, #116]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
900070ba:	f023 0301 	bic.w	r3, r3, #1
900070be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900070c0:	f7fc f912 	bl	900032e8 <HAL_GetTick>
900070c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900070c6:	e008      	b.n	900070da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900070c8:	f7fc f90e 	bl	900032e8 <HAL_GetTick>
900070cc:	4602      	mov	r2, r0
900070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900070d0:	1ad3      	subs	r3, r2, r3
900070d2:	2b02      	cmp	r3, #2
900070d4:	d901      	bls.n	900070da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
900070d6:	2303      	movs	r3, #3
900070d8:	e200      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900070da:	4b15      	ldr	r3, [pc, #84]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
900070dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
900070de:	f003 0302 	and.w	r3, r3, #2
900070e2:	2b00      	cmp	r3, #0
900070e4:	d1f0      	bne.n	900070c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
900070e6:	687b      	ldr	r3, [r7, #4]
900070e8:	681b      	ldr	r3, [r3, #0]
900070ea:	f003 0320 	and.w	r3, r3, #32
900070ee:	2b00      	cmp	r3, #0
900070f0:	d039      	beq.n	90007166 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
900070f2:	687b      	ldr	r3, [r7, #4]
900070f4:	699b      	ldr	r3, [r3, #24]
900070f6:	2b00      	cmp	r3, #0
900070f8:	d01c      	beq.n	90007134 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
900070fa:	4b0d      	ldr	r3, [pc, #52]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
900070fc:	681b      	ldr	r3, [r3, #0]
900070fe:	4a0c      	ldr	r2, [pc, #48]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007100:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90007104:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007106:	f7fc f8ef 	bl	900032e8 <HAL_GetTick>
9000710a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000710c:	e008      	b.n	90007120 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000710e:	f7fc f8eb 	bl	900032e8 <HAL_GetTick>
90007112:	4602      	mov	r2, r0
90007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007116:	1ad3      	subs	r3, r2, r3
90007118:	2b02      	cmp	r3, #2
9000711a:	d901      	bls.n	90007120 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
9000711c:	2303      	movs	r3, #3
9000711e:	e1dd      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007120:	4b03      	ldr	r3, [pc, #12]	@ (90007130 <HAL_RCC_OscConfig+0x4f8>)
90007122:	681b      	ldr	r3, [r3, #0]
90007124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007128:	2b00      	cmp	r3, #0
9000712a:	d0f0      	beq.n	9000710e <HAL_RCC_OscConfig+0x4d6>
9000712c:	e01b      	b.n	90007166 <HAL_RCC_OscConfig+0x52e>
9000712e:	bf00      	nop
90007130:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007134:	4b9b      	ldr	r3, [pc, #620]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007136:	681b      	ldr	r3, [r3, #0]
90007138:	4a9a      	ldr	r2, [pc, #616]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000713a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000713e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007140:	f7fc f8d2 	bl	900032e8 <HAL_GetTick>
90007144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007146:	e008      	b.n	9000715a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007148:	f7fc f8ce 	bl	900032e8 <HAL_GetTick>
9000714c:	4602      	mov	r2, r0
9000714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007150:	1ad3      	subs	r3, r2, r3
90007152:	2b02      	cmp	r3, #2
90007154:	d901      	bls.n	9000715a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90007156:	2303      	movs	r3, #3
90007158:	e1c0      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000715a:	4b92      	ldr	r3, [pc, #584]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000715c:	681b      	ldr	r3, [r3, #0]
9000715e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007162:	2b00      	cmp	r3, #0
90007164:	d1f0      	bne.n	90007148 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90007166:	687b      	ldr	r3, [r7, #4]
90007168:	681b      	ldr	r3, [r3, #0]
9000716a:	f003 0304 	and.w	r3, r3, #4
9000716e:	2b00      	cmp	r3, #0
90007170:	f000 8081 	beq.w	90007276 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90007174:	4b8c      	ldr	r3, [pc, #560]	@ (900073a8 <HAL_RCC_OscConfig+0x770>)
90007176:	681b      	ldr	r3, [r3, #0]
90007178:	4a8b      	ldr	r2, [pc, #556]	@ (900073a8 <HAL_RCC_OscConfig+0x770>)
9000717a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000717e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90007180:	f7fc f8b2 	bl	900032e8 <HAL_GetTick>
90007184:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007186:	e008      	b.n	9000719a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90007188:	f7fc f8ae 	bl	900032e8 <HAL_GetTick>
9000718c:	4602      	mov	r2, r0
9000718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007190:	1ad3      	subs	r3, r2, r3
90007192:	2b64      	cmp	r3, #100	@ 0x64
90007194:	d901      	bls.n	9000719a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90007196:	2303      	movs	r3, #3
90007198:	e1a0      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000719a:	4b83      	ldr	r3, [pc, #524]	@ (900073a8 <HAL_RCC_OscConfig+0x770>)
9000719c:	681b      	ldr	r3, [r3, #0]
9000719e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900071a2:	2b00      	cmp	r3, #0
900071a4:	d0f0      	beq.n	90007188 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900071a6:	687b      	ldr	r3, [r7, #4]
900071a8:	689b      	ldr	r3, [r3, #8]
900071aa:	2b01      	cmp	r3, #1
900071ac:	d106      	bne.n	900071bc <HAL_RCC_OscConfig+0x584>
900071ae:	4b7d      	ldr	r3, [pc, #500]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071b2:	4a7c      	ldr	r2, [pc, #496]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071b4:	f043 0301 	orr.w	r3, r3, #1
900071b8:	6713      	str	r3, [r2, #112]	@ 0x70
900071ba:	e02d      	b.n	90007218 <HAL_RCC_OscConfig+0x5e0>
900071bc:	687b      	ldr	r3, [r7, #4]
900071be:	689b      	ldr	r3, [r3, #8]
900071c0:	2b00      	cmp	r3, #0
900071c2:	d10c      	bne.n	900071de <HAL_RCC_OscConfig+0x5a6>
900071c4:	4b77      	ldr	r3, [pc, #476]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071c8:	4a76      	ldr	r2, [pc, #472]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071ca:	f023 0301 	bic.w	r3, r3, #1
900071ce:	6713      	str	r3, [r2, #112]	@ 0x70
900071d0:	4b74      	ldr	r3, [pc, #464]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071d4:	4a73      	ldr	r2, [pc, #460]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071d6:	f023 0304 	bic.w	r3, r3, #4
900071da:	6713      	str	r3, [r2, #112]	@ 0x70
900071dc:	e01c      	b.n	90007218 <HAL_RCC_OscConfig+0x5e0>
900071de:	687b      	ldr	r3, [r7, #4]
900071e0:	689b      	ldr	r3, [r3, #8]
900071e2:	2b05      	cmp	r3, #5
900071e4:	d10c      	bne.n	90007200 <HAL_RCC_OscConfig+0x5c8>
900071e6:	4b6f      	ldr	r3, [pc, #444]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071ea:	4a6e      	ldr	r2, [pc, #440]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071ec:	f043 0304 	orr.w	r3, r3, #4
900071f0:	6713      	str	r3, [r2, #112]	@ 0x70
900071f2:	4b6c      	ldr	r3, [pc, #432]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900071f6:	4a6b      	ldr	r2, [pc, #428]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900071f8:	f043 0301 	orr.w	r3, r3, #1
900071fc:	6713      	str	r3, [r2, #112]	@ 0x70
900071fe:	e00b      	b.n	90007218 <HAL_RCC_OscConfig+0x5e0>
90007200:	4b68      	ldr	r3, [pc, #416]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007204:	4a67      	ldr	r2, [pc, #412]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007206:	f023 0301 	bic.w	r3, r3, #1
9000720a:	6713      	str	r3, [r2, #112]	@ 0x70
9000720c:	4b65      	ldr	r3, [pc, #404]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000720e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007210:	4a64      	ldr	r2, [pc, #400]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007212:	f023 0304 	bic.w	r3, r3, #4
90007216:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90007218:	687b      	ldr	r3, [r7, #4]
9000721a:	689b      	ldr	r3, [r3, #8]
9000721c:	2b00      	cmp	r3, #0
9000721e:	d015      	beq.n	9000724c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007220:	f7fc f862 	bl	900032e8 <HAL_GetTick>
90007224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007226:	e00a      	b.n	9000723e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007228:	f7fc f85e 	bl	900032e8 <HAL_GetTick>
9000722c:	4602      	mov	r2, r0
9000722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007230:	1ad3      	subs	r3, r2, r3
90007232:	f241 3288 	movw	r2, #5000	@ 0x1388
90007236:	4293      	cmp	r3, r2
90007238:	d901      	bls.n	9000723e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
9000723a:	2303      	movs	r3, #3
9000723c:	e14e      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000723e:	4b59      	ldr	r3, [pc, #356]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007242:	f003 0302 	and.w	r3, r3, #2
90007246:	2b00      	cmp	r3, #0
90007248:	d0ee      	beq.n	90007228 <HAL_RCC_OscConfig+0x5f0>
9000724a:	e014      	b.n	90007276 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000724c:	f7fc f84c 	bl	900032e8 <HAL_GetTick>
90007250:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007252:	e00a      	b.n	9000726a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007254:	f7fc f848 	bl	900032e8 <HAL_GetTick>
90007258:	4602      	mov	r2, r0
9000725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000725c:	1ad3      	subs	r3, r2, r3
9000725e:	f241 3288 	movw	r2, #5000	@ 0x1388
90007262:	4293      	cmp	r3, r2
90007264:	d901      	bls.n	9000726a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90007266:	2303      	movs	r3, #3
90007268:	e138      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000726a:	4b4e      	ldr	r3, [pc, #312]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000726c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000726e:	f003 0302 	and.w	r3, r3, #2
90007272:	2b00      	cmp	r3, #0
90007274:	d1ee      	bne.n	90007254 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90007276:	687b      	ldr	r3, [r7, #4]
90007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000727a:	2b00      	cmp	r3, #0
9000727c:	f000 812d 	beq.w	900074da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90007280:	4b48      	ldr	r3, [pc, #288]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007282:	691b      	ldr	r3, [r3, #16]
90007284:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007288:	2b18      	cmp	r3, #24
9000728a:	f000 80bd 	beq.w	90007408 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000728e:	687b      	ldr	r3, [r7, #4]
90007290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007292:	2b02      	cmp	r3, #2
90007294:	f040 809e 	bne.w	900073d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007298:	4b42      	ldr	r3, [pc, #264]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000729a:	681b      	ldr	r3, [r3, #0]
9000729c:	4a41      	ldr	r2, [pc, #260]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000729e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900072a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900072a4:	f7fc f820 	bl	900032e8 <HAL_GetTick>
900072a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900072aa:	e008      	b.n	900072be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900072ac:	f7fc f81c 	bl	900032e8 <HAL_GetTick>
900072b0:	4602      	mov	r2, r0
900072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900072b4:	1ad3      	subs	r3, r2, r3
900072b6:	2b02      	cmp	r3, #2
900072b8:	d901      	bls.n	900072be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900072ba:	2303      	movs	r3, #3
900072bc:	e10e      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900072be:	4b39      	ldr	r3, [pc, #228]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900072c0:	681b      	ldr	r3, [r3, #0]
900072c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900072c6:	2b00      	cmp	r3, #0
900072c8:	d1f0      	bne.n	900072ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900072ca:	4b36      	ldr	r3, [pc, #216]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900072cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
900072ce:	4b37      	ldr	r3, [pc, #220]	@ (900073ac <HAL_RCC_OscConfig+0x774>)
900072d0:	4013      	ands	r3, r2
900072d2:	687a      	ldr	r2, [r7, #4]
900072d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
900072d6:	687a      	ldr	r2, [r7, #4]
900072d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900072da:	0112      	lsls	r2, r2, #4
900072dc:	430a      	orrs	r2, r1
900072de:	4931      	ldr	r1, [pc, #196]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
900072e0:	4313      	orrs	r3, r2
900072e2:	628b      	str	r3, [r1, #40]	@ 0x28
900072e4:	687b      	ldr	r3, [r7, #4]
900072e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900072e8:	3b01      	subs	r3, #1
900072ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
900072ee:	687b      	ldr	r3, [r7, #4]
900072f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900072f2:	3b01      	subs	r3, #1
900072f4:	025b      	lsls	r3, r3, #9
900072f6:	b29b      	uxth	r3, r3
900072f8:	431a      	orrs	r2, r3
900072fa:	687b      	ldr	r3, [r7, #4]
900072fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900072fe:	3b01      	subs	r3, #1
90007300:	041b      	lsls	r3, r3, #16
90007302:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90007306:	431a      	orrs	r2, r3
90007308:	687b      	ldr	r3, [r7, #4]
9000730a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
9000730c:	3b01      	subs	r3, #1
9000730e:	061b      	lsls	r3, r3, #24
90007310:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007314:	4923      	ldr	r1, [pc, #140]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007316:	4313      	orrs	r3, r2
90007318:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
9000731a:	4b22      	ldr	r3, [pc, #136]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000731c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000731e:	4a21      	ldr	r2, [pc, #132]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007320:	f023 0301 	bic.w	r3, r3, #1
90007324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007326:	4b1f      	ldr	r3, [pc, #124]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000732a:	4b21      	ldr	r3, [pc, #132]	@ (900073b0 <HAL_RCC_OscConfig+0x778>)
9000732c:	4013      	ands	r3, r2
9000732e:	687a      	ldr	r2, [r7, #4]
90007330:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007332:	00d2      	lsls	r2, r2, #3
90007334:	491b      	ldr	r1, [pc, #108]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007336:	4313      	orrs	r3, r2
90007338:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000733a:	4b1a      	ldr	r3, [pc, #104]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000733e:	f023 020c 	bic.w	r2, r3, #12
90007342:	687b      	ldr	r3, [r7, #4]
90007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90007346:	4917      	ldr	r1, [pc, #92]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007348:	4313      	orrs	r3, r2
9000734a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000734c:	4b15      	ldr	r3, [pc, #84]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007350:	f023 0202 	bic.w	r2, r3, #2
90007354:	687b      	ldr	r3, [r7, #4]
90007356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90007358:	4912      	ldr	r1, [pc, #72]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000735a:	4313      	orrs	r3, r2
9000735c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000735e:	4b11      	ldr	r3, [pc, #68]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007362:	4a10      	ldr	r2, [pc, #64]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90007368:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000736a:	4b0e      	ldr	r3, [pc, #56]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000736e:	4a0d      	ldr	r2, [pc, #52]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90007376:	4b0b      	ldr	r3, [pc, #44]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000737a:	4a0a      	ldr	r2, [pc, #40]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
9000737c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007380:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90007382:	4b08      	ldr	r3, [pc, #32]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007386:	4a07      	ldr	r2, [pc, #28]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007388:	f043 0301 	orr.w	r3, r3, #1
9000738c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
9000738e:	4b05      	ldr	r3, [pc, #20]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007390:	681b      	ldr	r3, [r3, #0]
90007392:	4a04      	ldr	r2, [pc, #16]	@ (900073a4 <HAL_RCC_OscConfig+0x76c>)
90007394:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90007398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000739a:	f7fb ffa5 	bl	900032e8 <HAL_GetTick>
9000739e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900073a0:	e011      	b.n	900073c6 <HAL_RCC_OscConfig+0x78e>
900073a2:	bf00      	nop
900073a4:	58024400 	.word	0x58024400
900073a8:	58024800 	.word	0x58024800
900073ac:	fffffc0c 	.word	0xfffffc0c
900073b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900073b4:	f7fb ff98 	bl	900032e8 <HAL_GetTick>
900073b8:	4602      	mov	r2, r0
900073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073bc:	1ad3      	subs	r3, r2, r3
900073be:	2b02      	cmp	r3, #2
900073c0:	d901      	bls.n	900073c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
900073c2:	2303      	movs	r3, #3
900073c4:	e08a      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900073c6:	4b47      	ldr	r3, [pc, #284]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900073c8:	681b      	ldr	r3, [r3, #0]
900073ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900073ce:	2b00      	cmp	r3, #0
900073d0:	d0f0      	beq.n	900073b4 <HAL_RCC_OscConfig+0x77c>
900073d2:	e082      	b.n	900074da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900073d4:	4b43      	ldr	r3, [pc, #268]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900073d6:	681b      	ldr	r3, [r3, #0]
900073d8:	4a42      	ldr	r2, [pc, #264]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900073da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900073de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900073e0:	f7fb ff82 	bl	900032e8 <HAL_GetTick>
900073e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900073e6:	e008      	b.n	900073fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900073e8:	f7fb ff7e 	bl	900032e8 <HAL_GetTick>
900073ec:	4602      	mov	r2, r0
900073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073f0:	1ad3      	subs	r3, r2, r3
900073f2:	2b02      	cmp	r3, #2
900073f4:	d901      	bls.n	900073fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
900073f6:	2303      	movs	r3, #3
900073f8:	e070      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900073fa:	4b3a      	ldr	r3, [pc, #232]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900073fc:	681b      	ldr	r3, [r3, #0]
900073fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007402:	2b00      	cmp	r3, #0
90007404:	d1f0      	bne.n	900073e8 <HAL_RCC_OscConfig+0x7b0>
90007406:	e068      	b.n	900074da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90007408:	4b36      	ldr	r3, [pc, #216]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
9000740a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000740c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
9000740e:	4b35      	ldr	r3, [pc, #212]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
90007410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007412:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007414:	687b      	ldr	r3, [r7, #4]
90007416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007418:	2b01      	cmp	r3, #1
9000741a:	d031      	beq.n	90007480 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000741c:	693b      	ldr	r3, [r7, #16]
9000741e:	f003 0203 	and.w	r2, r3, #3
90007422:	687b      	ldr	r3, [r7, #4]
90007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007426:	429a      	cmp	r2, r3
90007428:	d12a      	bne.n	90007480 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000742a:	693b      	ldr	r3, [r7, #16]
9000742c:	091b      	lsrs	r3, r3, #4
9000742e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90007432:	687b      	ldr	r3, [r7, #4]
90007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007436:	429a      	cmp	r2, r3
90007438:	d122      	bne.n	90007480 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000743a:	68fb      	ldr	r3, [r7, #12]
9000743c:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007440:	687b      	ldr	r3, [r7, #4]
90007442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007444:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007446:	429a      	cmp	r2, r3
90007448:	d11a      	bne.n	90007480 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000744a:	68fb      	ldr	r3, [r7, #12]
9000744c:	0a5b      	lsrs	r3, r3, #9
9000744e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007452:	687b      	ldr	r3, [r7, #4]
90007454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007456:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007458:	429a      	cmp	r2, r3
9000745a:	d111      	bne.n	90007480 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000745c:	68fb      	ldr	r3, [r7, #12]
9000745e:	0c1b      	lsrs	r3, r3, #16
90007460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007464:	687b      	ldr	r3, [r7, #4]
90007466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90007468:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000746a:	429a      	cmp	r2, r3
9000746c:	d108      	bne.n	90007480 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000746e:	68fb      	ldr	r3, [r7, #12]
90007470:	0e1b      	lsrs	r3, r3, #24
90007472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007476:	687b      	ldr	r3, [r7, #4]
90007478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
9000747a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000747c:	429a      	cmp	r2, r3
9000747e:	d001      	beq.n	90007484 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90007480:	2301      	movs	r3, #1
90007482:	e02b      	b.n	900074dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90007484:	4b17      	ldr	r3, [pc, #92]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
90007486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007488:	08db      	lsrs	r3, r3, #3
9000748a:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000748e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90007490:	687b      	ldr	r3, [r7, #4]
90007492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90007494:	693a      	ldr	r2, [r7, #16]
90007496:	429a      	cmp	r2, r3
90007498:	d01f      	beq.n	900074da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
9000749a:	4b12      	ldr	r3, [pc, #72]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
9000749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000749e:	4a11      	ldr	r2, [pc, #68]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900074a0:	f023 0301 	bic.w	r3, r3, #1
900074a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
900074a6:	f7fb ff1f 	bl	900032e8 <HAL_GetTick>
900074aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
900074ac:	bf00      	nop
900074ae:	f7fb ff1b 	bl	900032e8 <HAL_GetTick>
900074b2:	4602      	mov	r2, r0
900074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900074b6:	4293      	cmp	r3, r2
900074b8:	d0f9      	beq.n	900074ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900074ba:	4b0a      	ldr	r3, [pc, #40]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900074bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900074be:	4b0a      	ldr	r3, [pc, #40]	@ (900074e8 <HAL_RCC_OscConfig+0x8b0>)
900074c0:	4013      	ands	r3, r2
900074c2:	687a      	ldr	r2, [r7, #4]
900074c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
900074c6:	00d2      	lsls	r2, r2, #3
900074c8:	4906      	ldr	r1, [pc, #24]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900074ca:	4313      	orrs	r3, r2
900074cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
900074ce:	4b05      	ldr	r3, [pc, #20]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900074d2:	4a04      	ldr	r2, [pc, #16]	@ (900074e4 <HAL_RCC_OscConfig+0x8ac>)
900074d4:	f043 0301 	orr.w	r3, r3, #1
900074d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
900074da:	2300      	movs	r3, #0
}
900074dc:	4618      	mov	r0, r3
900074de:	3730      	adds	r7, #48	@ 0x30
900074e0:	46bd      	mov	sp, r7
900074e2:	bd80      	pop	{r7, pc}
900074e4:	58024400 	.word	0x58024400
900074e8:	ffff0007 	.word	0xffff0007

900074ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900074ec:	b580      	push	{r7, lr}
900074ee:	b086      	sub	sp, #24
900074f0:	af00      	add	r7, sp, #0
900074f2:	6078      	str	r0, [r7, #4]
900074f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900074f6:	687b      	ldr	r3, [r7, #4]
900074f8:	2b00      	cmp	r3, #0
900074fa:	d101      	bne.n	90007500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900074fc:	2301      	movs	r3, #1
900074fe:	e19c      	b.n	9000783a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90007500:	4b8a      	ldr	r3, [pc, #552]	@ (9000772c <HAL_RCC_ClockConfig+0x240>)
90007502:	681b      	ldr	r3, [r3, #0]
90007504:	f003 030f 	and.w	r3, r3, #15
90007508:	683a      	ldr	r2, [r7, #0]
9000750a:	429a      	cmp	r2, r3
9000750c:	d910      	bls.n	90007530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000750e:	4b87      	ldr	r3, [pc, #540]	@ (9000772c <HAL_RCC_ClockConfig+0x240>)
90007510:	681b      	ldr	r3, [r3, #0]
90007512:	f023 020f 	bic.w	r2, r3, #15
90007516:	4985      	ldr	r1, [pc, #532]	@ (9000772c <HAL_RCC_ClockConfig+0x240>)
90007518:	683b      	ldr	r3, [r7, #0]
9000751a:	4313      	orrs	r3, r2
9000751c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000751e:	4b83      	ldr	r3, [pc, #524]	@ (9000772c <HAL_RCC_ClockConfig+0x240>)
90007520:	681b      	ldr	r3, [r3, #0]
90007522:	f003 030f 	and.w	r3, r3, #15
90007526:	683a      	ldr	r2, [r7, #0]
90007528:	429a      	cmp	r2, r3
9000752a:	d001      	beq.n	90007530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
9000752c:	2301      	movs	r3, #1
9000752e:	e184      	b.n	9000783a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007530:	687b      	ldr	r3, [r7, #4]
90007532:	681b      	ldr	r3, [r3, #0]
90007534:	f003 0304 	and.w	r3, r3, #4
90007538:	2b00      	cmp	r3, #0
9000753a:	d010      	beq.n	9000755e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000753c:	687b      	ldr	r3, [r7, #4]
9000753e:	691a      	ldr	r2, [r3, #16]
90007540:	4b7b      	ldr	r3, [pc, #492]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
90007542:	699b      	ldr	r3, [r3, #24]
90007544:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007548:	429a      	cmp	r2, r3
9000754a:	d908      	bls.n	9000755e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000754c:	4b78      	ldr	r3, [pc, #480]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000754e:	699b      	ldr	r3, [r3, #24]
90007550:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007554:	687b      	ldr	r3, [r7, #4]
90007556:	691b      	ldr	r3, [r3, #16]
90007558:	4975      	ldr	r1, [pc, #468]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000755a:	4313      	orrs	r3, r2
9000755c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000755e:	687b      	ldr	r3, [r7, #4]
90007560:	681b      	ldr	r3, [r3, #0]
90007562:	f003 0308 	and.w	r3, r3, #8
90007566:	2b00      	cmp	r3, #0
90007568:	d010      	beq.n	9000758c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000756a:	687b      	ldr	r3, [r7, #4]
9000756c:	695a      	ldr	r2, [r3, #20]
9000756e:	4b70      	ldr	r3, [pc, #448]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
90007570:	69db      	ldr	r3, [r3, #28]
90007572:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007576:	429a      	cmp	r2, r3
90007578:	d908      	bls.n	9000758c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000757a:	4b6d      	ldr	r3, [pc, #436]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000757c:	69db      	ldr	r3, [r3, #28]
9000757e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007582:	687b      	ldr	r3, [r7, #4]
90007584:	695b      	ldr	r3, [r3, #20]
90007586:	496a      	ldr	r1, [pc, #424]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
90007588:	4313      	orrs	r3, r2
9000758a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000758c:	687b      	ldr	r3, [r7, #4]
9000758e:	681b      	ldr	r3, [r3, #0]
90007590:	f003 0310 	and.w	r3, r3, #16
90007594:	2b00      	cmp	r3, #0
90007596:	d010      	beq.n	900075ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007598:	687b      	ldr	r3, [r7, #4]
9000759a:	699a      	ldr	r2, [r3, #24]
9000759c:	4b64      	ldr	r3, [pc, #400]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000759e:	69db      	ldr	r3, [r3, #28]
900075a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900075a4:	429a      	cmp	r2, r3
900075a6:	d908      	bls.n	900075ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900075a8:	4b61      	ldr	r3, [pc, #388]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900075aa:	69db      	ldr	r3, [r3, #28]
900075ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900075b0:	687b      	ldr	r3, [r7, #4]
900075b2:	699b      	ldr	r3, [r3, #24]
900075b4:	495e      	ldr	r1, [pc, #376]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900075b6:	4313      	orrs	r3, r2
900075b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900075ba:	687b      	ldr	r3, [r7, #4]
900075bc:	681b      	ldr	r3, [r3, #0]
900075be:	f003 0320 	and.w	r3, r3, #32
900075c2:	2b00      	cmp	r3, #0
900075c4:	d010      	beq.n	900075e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900075c6:	687b      	ldr	r3, [r7, #4]
900075c8:	69da      	ldr	r2, [r3, #28]
900075ca:	4b59      	ldr	r3, [pc, #356]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900075cc:	6a1b      	ldr	r3, [r3, #32]
900075ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900075d2:	429a      	cmp	r2, r3
900075d4:	d908      	bls.n	900075e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900075d6:	4b56      	ldr	r3, [pc, #344]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900075d8:	6a1b      	ldr	r3, [r3, #32]
900075da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900075de:	687b      	ldr	r3, [r7, #4]
900075e0:	69db      	ldr	r3, [r3, #28]
900075e2:	4953      	ldr	r1, [pc, #332]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900075e4:	4313      	orrs	r3, r2
900075e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900075e8:	687b      	ldr	r3, [r7, #4]
900075ea:	681b      	ldr	r3, [r3, #0]
900075ec:	f003 0302 	and.w	r3, r3, #2
900075f0:	2b00      	cmp	r3, #0
900075f2:	d010      	beq.n	90007616 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900075f4:	687b      	ldr	r3, [r7, #4]
900075f6:	68da      	ldr	r2, [r3, #12]
900075f8:	4b4d      	ldr	r3, [pc, #308]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900075fa:	699b      	ldr	r3, [r3, #24]
900075fc:	f003 030f 	and.w	r3, r3, #15
90007600:	429a      	cmp	r2, r3
90007602:	d908      	bls.n	90007616 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90007604:	4b4a      	ldr	r3, [pc, #296]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
90007606:	699b      	ldr	r3, [r3, #24]
90007608:	f023 020f 	bic.w	r2, r3, #15
9000760c:	687b      	ldr	r3, [r7, #4]
9000760e:	68db      	ldr	r3, [r3, #12]
90007610:	4947      	ldr	r1, [pc, #284]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
90007612:	4313      	orrs	r3, r2
90007614:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90007616:	687b      	ldr	r3, [r7, #4]
90007618:	681b      	ldr	r3, [r3, #0]
9000761a:	f003 0301 	and.w	r3, r3, #1
9000761e:	2b00      	cmp	r3, #0
90007620:	d055      	beq.n	900076ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90007622:	4b43      	ldr	r3, [pc, #268]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
90007624:	699b      	ldr	r3, [r3, #24]
90007626:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
9000762a:	687b      	ldr	r3, [r7, #4]
9000762c:	689b      	ldr	r3, [r3, #8]
9000762e:	4940      	ldr	r1, [pc, #256]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
90007630:	4313      	orrs	r3, r2
90007632:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007634:	687b      	ldr	r3, [r7, #4]
90007636:	685b      	ldr	r3, [r3, #4]
90007638:	2b02      	cmp	r3, #2
9000763a:	d107      	bne.n	9000764c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000763c:	4b3c      	ldr	r3, [pc, #240]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000763e:	681b      	ldr	r3, [r3, #0]
90007640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90007644:	2b00      	cmp	r3, #0
90007646:	d121      	bne.n	9000768c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007648:	2301      	movs	r3, #1
9000764a:	e0f6      	b.n	9000783a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000764c:	687b      	ldr	r3, [r7, #4]
9000764e:	685b      	ldr	r3, [r3, #4]
90007650:	2b03      	cmp	r3, #3
90007652:	d107      	bne.n	90007664 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007654:	4b36      	ldr	r3, [pc, #216]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
90007656:	681b      	ldr	r3, [r3, #0]
90007658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000765c:	2b00      	cmp	r3, #0
9000765e:	d115      	bne.n	9000768c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007660:	2301      	movs	r3, #1
90007662:	e0ea      	b.n	9000783a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90007664:	687b      	ldr	r3, [r7, #4]
90007666:	685b      	ldr	r3, [r3, #4]
90007668:	2b01      	cmp	r3, #1
9000766a:	d107      	bne.n	9000767c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000766c:	4b30      	ldr	r3, [pc, #192]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000766e:	681b      	ldr	r3, [r3, #0]
90007670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007674:	2b00      	cmp	r3, #0
90007676:	d109      	bne.n	9000768c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007678:	2301      	movs	r3, #1
9000767a:	e0de      	b.n	9000783a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000767c:	4b2c      	ldr	r3, [pc, #176]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000767e:	681b      	ldr	r3, [r3, #0]
90007680:	f003 0304 	and.w	r3, r3, #4
90007684:	2b00      	cmp	r3, #0
90007686:	d101      	bne.n	9000768c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007688:	2301      	movs	r3, #1
9000768a:	e0d6      	b.n	9000783a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000768c:	4b28      	ldr	r3, [pc, #160]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000768e:	691b      	ldr	r3, [r3, #16]
90007690:	f023 0207 	bic.w	r2, r3, #7
90007694:	687b      	ldr	r3, [r7, #4]
90007696:	685b      	ldr	r3, [r3, #4]
90007698:	4925      	ldr	r1, [pc, #148]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
9000769a:	4313      	orrs	r3, r2
9000769c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000769e:	f7fb fe23 	bl	900032e8 <HAL_GetTick>
900076a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900076a4:	e00a      	b.n	900076bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900076a6:	f7fb fe1f 	bl	900032e8 <HAL_GetTick>
900076aa:	4602      	mov	r2, r0
900076ac:	697b      	ldr	r3, [r7, #20]
900076ae:	1ad3      	subs	r3, r2, r3
900076b0:	f241 3288 	movw	r2, #5000	@ 0x1388
900076b4:	4293      	cmp	r3, r2
900076b6:	d901      	bls.n	900076bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
900076b8:	2303      	movs	r3, #3
900076ba:	e0be      	b.n	9000783a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900076bc:	4b1c      	ldr	r3, [pc, #112]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900076be:	691b      	ldr	r3, [r3, #16]
900076c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
900076c4:	687b      	ldr	r3, [r7, #4]
900076c6:	685b      	ldr	r3, [r3, #4]
900076c8:	00db      	lsls	r3, r3, #3
900076ca:	429a      	cmp	r2, r3
900076cc:	d1eb      	bne.n	900076a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900076ce:	687b      	ldr	r3, [r7, #4]
900076d0:	681b      	ldr	r3, [r3, #0]
900076d2:	f003 0302 	and.w	r3, r3, #2
900076d6:	2b00      	cmp	r3, #0
900076d8:	d010      	beq.n	900076fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900076da:	687b      	ldr	r3, [r7, #4]
900076dc:	68da      	ldr	r2, [r3, #12]
900076de:	4b14      	ldr	r3, [pc, #80]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900076e0:	699b      	ldr	r3, [r3, #24]
900076e2:	f003 030f 	and.w	r3, r3, #15
900076e6:	429a      	cmp	r2, r3
900076e8:	d208      	bcs.n	900076fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900076ea:	4b11      	ldr	r3, [pc, #68]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900076ec:	699b      	ldr	r3, [r3, #24]
900076ee:	f023 020f 	bic.w	r2, r3, #15
900076f2:	687b      	ldr	r3, [r7, #4]
900076f4:	68db      	ldr	r3, [r3, #12]
900076f6:	490e      	ldr	r1, [pc, #56]	@ (90007730 <HAL_RCC_ClockConfig+0x244>)
900076f8:	4313      	orrs	r3, r2
900076fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900076fc:	4b0b      	ldr	r3, [pc, #44]	@ (9000772c <HAL_RCC_ClockConfig+0x240>)
900076fe:	681b      	ldr	r3, [r3, #0]
90007700:	f003 030f 	and.w	r3, r3, #15
90007704:	683a      	ldr	r2, [r7, #0]
90007706:	429a      	cmp	r2, r3
90007708:	d214      	bcs.n	90007734 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000770a:	4b08      	ldr	r3, [pc, #32]	@ (9000772c <HAL_RCC_ClockConfig+0x240>)
9000770c:	681b      	ldr	r3, [r3, #0]
9000770e:	f023 020f 	bic.w	r2, r3, #15
90007712:	4906      	ldr	r1, [pc, #24]	@ (9000772c <HAL_RCC_ClockConfig+0x240>)
90007714:	683b      	ldr	r3, [r7, #0]
90007716:	4313      	orrs	r3, r2
90007718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000771a:	4b04      	ldr	r3, [pc, #16]	@ (9000772c <HAL_RCC_ClockConfig+0x240>)
9000771c:	681b      	ldr	r3, [r3, #0]
9000771e:	f003 030f 	and.w	r3, r3, #15
90007722:	683a      	ldr	r2, [r7, #0]
90007724:	429a      	cmp	r2, r3
90007726:	d005      	beq.n	90007734 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007728:	2301      	movs	r3, #1
9000772a:	e086      	b.n	9000783a <HAL_RCC_ClockConfig+0x34e>
9000772c:	52002000 	.word	0x52002000
90007730:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007734:	687b      	ldr	r3, [r7, #4]
90007736:	681b      	ldr	r3, [r3, #0]
90007738:	f003 0304 	and.w	r3, r3, #4
9000773c:	2b00      	cmp	r3, #0
9000773e:	d010      	beq.n	90007762 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007740:	687b      	ldr	r3, [r7, #4]
90007742:	691a      	ldr	r2, [r3, #16]
90007744:	4b3f      	ldr	r3, [pc, #252]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
90007746:	699b      	ldr	r3, [r3, #24]
90007748:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000774c:	429a      	cmp	r2, r3
9000774e:	d208      	bcs.n	90007762 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007750:	4b3c      	ldr	r3, [pc, #240]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
90007752:	699b      	ldr	r3, [r3, #24]
90007754:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007758:	687b      	ldr	r3, [r7, #4]
9000775a:	691b      	ldr	r3, [r3, #16]
9000775c:	4939      	ldr	r1, [pc, #228]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
9000775e:	4313      	orrs	r3, r2
90007760:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007762:	687b      	ldr	r3, [r7, #4]
90007764:	681b      	ldr	r3, [r3, #0]
90007766:	f003 0308 	and.w	r3, r3, #8
9000776a:	2b00      	cmp	r3, #0
9000776c:	d010      	beq.n	90007790 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000776e:	687b      	ldr	r3, [r7, #4]
90007770:	695a      	ldr	r2, [r3, #20]
90007772:	4b34      	ldr	r3, [pc, #208]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
90007774:	69db      	ldr	r3, [r3, #28]
90007776:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000777a:	429a      	cmp	r2, r3
9000777c:	d208      	bcs.n	90007790 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000777e:	4b31      	ldr	r3, [pc, #196]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
90007780:	69db      	ldr	r3, [r3, #28]
90007782:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007786:	687b      	ldr	r3, [r7, #4]
90007788:	695b      	ldr	r3, [r3, #20]
9000778a:	492e      	ldr	r1, [pc, #184]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
9000778c:	4313      	orrs	r3, r2
9000778e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007790:	687b      	ldr	r3, [r7, #4]
90007792:	681b      	ldr	r3, [r3, #0]
90007794:	f003 0310 	and.w	r3, r3, #16
90007798:	2b00      	cmp	r3, #0
9000779a:	d010      	beq.n	900077be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000779c:	687b      	ldr	r3, [r7, #4]
9000779e:	699a      	ldr	r2, [r3, #24]
900077a0:	4b28      	ldr	r3, [pc, #160]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
900077a2:	69db      	ldr	r3, [r3, #28]
900077a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
900077a8:	429a      	cmp	r2, r3
900077aa:	d208      	bcs.n	900077be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900077ac:	4b25      	ldr	r3, [pc, #148]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
900077ae:	69db      	ldr	r3, [r3, #28]
900077b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900077b4:	687b      	ldr	r3, [r7, #4]
900077b6:	699b      	ldr	r3, [r3, #24]
900077b8:	4922      	ldr	r1, [pc, #136]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
900077ba:	4313      	orrs	r3, r2
900077bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900077be:	687b      	ldr	r3, [r7, #4]
900077c0:	681b      	ldr	r3, [r3, #0]
900077c2:	f003 0320 	and.w	r3, r3, #32
900077c6:	2b00      	cmp	r3, #0
900077c8:	d010      	beq.n	900077ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900077ca:	687b      	ldr	r3, [r7, #4]
900077cc:	69da      	ldr	r2, [r3, #28]
900077ce:	4b1d      	ldr	r3, [pc, #116]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
900077d0:	6a1b      	ldr	r3, [r3, #32]
900077d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900077d6:	429a      	cmp	r2, r3
900077d8:	d208      	bcs.n	900077ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900077da:	4b1a      	ldr	r3, [pc, #104]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
900077dc:	6a1b      	ldr	r3, [r3, #32]
900077de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900077e2:	687b      	ldr	r3, [r7, #4]
900077e4:	69db      	ldr	r3, [r3, #28]
900077e6:	4917      	ldr	r1, [pc, #92]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
900077e8:	4313      	orrs	r3, r2
900077ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900077ec:	f000 f834 	bl	90007858 <HAL_RCC_GetSysClockFreq>
900077f0:	4602      	mov	r2, r0
900077f2:	4b14      	ldr	r3, [pc, #80]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
900077f4:	699b      	ldr	r3, [r3, #24]
900077f6:	0a1b      	lsrs	r3, r3, #8
900077f8:	f003 030f 	and.w	r3, r3, #15
900077fc:	4912      	ldr	r1, [pc, #72]	@ (90007848 <HAL_RCC_ClockConfig+0x35c>)
900077fe:	5ccb      	ldrb	r3, [r1, r3]
90007800:	f003 031f 	and.w	r3, r3, #31
90007804:	fa22 f303 	lsr.w	r3, r2, r3
90007808:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000780a:	4b0e      	ldr	r3, [pc, #56]	@ (90007844 <HAL_RCC_ClockConfig+0x358>)
9000780c:	699b      	ldr	r3, [r3, #24]
9000780e:	f003 030f 	and.w	r3, r3, #15
90007812:	4a0d      	ldr	r2, [pc, #52]	@ (90007848 <HAL_RCC_ClockConfig+0x35c>)
90007814:	5cd3      	ldrb	r3, [r2, r3]
90007816:	f003 031f 	and.w	r3, r3, #31
9000781a:	693a      	ldr	r2, [r7, #16]
9000781c:	fa22 f303 	lsr.w	r3, r2, r3
90007820:	4a0a      	ldr	r2, [pc, #40]	@ (9000784c <HAL_RCC_ClockConfig+0x360>)
90007822:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007824:	4a0a      	ldr	r2, [pc, #40]	@ (90007850 <HAL_RCC_ClockConfig+0x364>)
90007826:	693b      	ldr	r3, [r7, #16]
90007828:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
9000782a:	4b0a      	ldr	r3, [pc, #40]	@ (90007854 <HAL_RCC_ClockConfig+0x368>)
9000782c:	681b      	ldr	r3, [r3, #0]
9000782e:	4618      	mov	r0, r3
90007830:	f7fb fd10 	bl	90003254 <HAL_InitTick>
90007834:	4603      	mov	r3, r0
90007836:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007838:	7bfb      	ldrb	r3, [r7, #15]
}
9000783a:	4618      	mov	r0, r3
9000783c:	3718      	adds	r7, #24
9000783e:	46bd      	mov	sp, r7
90007840:	bd80      	pop	{r7, pc}
90007842:	bf00      	nop
90007844:	58024400 	.word	0x58024400
90007848:	9000d808 	.word	0x9000d808
9000784c:	2000000c 	.word	0x2000000c
90007850:	20000008 	.word	0x20000008
90007854:	20000010 	.word	0x20000010

90007858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007858:	b480      	push	{r7}
9000785a:	b089      	sub	sp, #36	@ 0x24
9000785c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
9000785e:	4bb3      	ldr	r3, [pc, #716]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
90007860:	691b      	ldr	r3, [r3, #16]
90007862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90007866:	2b18      	cmp	r3, #24
90007868:	f200 8155 	bhi.w	90007b16 <HAL_RCC_GetSysClockFreq+0x2be>
9000786c:	a201      	add	r2, pc, #4	@ (adr r2, 90007874 <HAL_RCC_GetSysClockFreq+0x1c>)
9000786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007872:	bf00      	nop
90007874:	900078d9 	.word	0x900078d9
90007878:	90007b17 	.word	0x90007b17
9000787c:	90007b17 	.word	0x90007b17
90007880:	90007b17 	.word	0x90007b17
90007884:	90007b17 	.word	0x90007b17
90007888:	90007b17 	.word	0x90007b17
9000788c:	90007b17 	.word	0x90007b17
90007890:	90007b17 	.word	0x90007b17
90007894:	900078ff 	.word	0x900078ff
90007898:	90007b17 	.word	0x90007b17
9000789c:	90007b17 	.word	0x90007b17
900078a0:	90007b17 	.word	0x90007b17
900078a4:	90007b17 	.word	0x90007b17
900078a8:	90007b17 	.word	0x90007b17
900078ac:	90007b17 	.word	0x90007b17
900078b0:	90007b17 	.word	0x90007b17
900078b4:	90007905 	.word	0x90007905
900078b8:	90007b17 	.word	0x90007b17
900078bc:	90007b17 	.word	0x90007b17
900078c0:	90007b17 	.word	0x90007b17
900078c4:	90007b17 	.word	0x90007b17
900078c8:	90007b17 	.word	0x90007b17
900078cc:	90007b17 	.word	0x90007b17
900078d0:	90007b17 	.word	0x90007b17
900078d4:	9000790b 	.word	0x9000790b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900078d8:	4b94      	ldr	r3, [pc, #592]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
900078da:	681b      	ldr	r3, [r3, #0]
900078dc:	f003 0320 	and.w	r3, r3, #32
900078e0:	2b00      	cmp	r3, #0
900078e2:	d009      	beq.n	900078f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900078e4:	4b91      	ldr	r3, [pc, #580]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
900078e6:	681b      	ldr	r3, [r3, #0]
900078e8:	08db      	lsrs	r3, r3, #3
900078ea:	f003 0303 	and.w	r3, r3, #3
900078ee:	4a90      	ldr	r2, [pc, #576]	@ (90007b30 <HAL_RCC_GetSysClockFreq+0x2d8>)
900078f0:	fa22 f303 	lsr.w	r3, r2, r3
900078f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
900078f6:	e111      	b.n	90007b1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900078f8:	4b8d      	ldr	r3, [pc, #564]	@ (90007b30 <HAL_RCC_GetSysClockFreq+0x2d8>)
900078fa:	61bb      	str	r3, [r7, #24]
      break;
900078fc:	e10e      	b.n	90007b1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
900078fe:	4b8d      	ldr	r3, [pc, #564]	@ (90007b34 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007900:	61bb      	str	r3, [r7, #24]
      break;
90007902:	e10b      	b.n	90007b1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
90007904:	4b8c      	ldr	r3, [pc, #560]	@ (90007b38 <HAL_RCC_GetSysClockFreq+0x2e0>)
90007906:	61bb      	str	r3, [r7, #24]
      break;
90007908:	e108      	b.n	90007b1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000790a:	4b88      	ldr	r3, [pc, #544]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000790c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000790e:	f003 0303 	and.w	r3, r3, #3
90007912:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90007914:	4b85      	ldr	r3, [pc, #532]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
90007916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007918:	091b      	lsrs	r3, r3, #4
9000791a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
9000791e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90007920:	4b82      	ldr	r3, [pc, #520]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
90007922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007924:	f003 0301 	and.w	r3, r3, #1
90007928:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000792a:	4b80      	ldr	r3, [pc, #512]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000792c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000792e:	08db      	lsrs	r3, r3, #3
90007930:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007934:	68fa      	ldr	r2, [r7, #12]
90007936:	fb02 f303 	mul.w	r3, r2, r3
9000793a:	ee07 3a90 	vmov	s15, r3
9000793e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007942:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90007946:	693b      	ldr	r3, [r7, #16]
90007948:	2b00      	cmp	r3, #0
9000794a:	f000 80e1 	beq.w	90007b10 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
9000794e:	697b      	ldr	r3, [r7, #20]
90007950:	2b02      	cmp	r3, #2
90007952:	f000 8083 	beq.w	90007a5c <HAL_RCC_GetSysClockFreq+0x204>
90007956:	697b      	ldr	r3, [r7, #20]
90007958:	2b02      	cmp	r3, #2
9000795a:	f200 80a1 	bhi.w	90007aa0 <HAL_RCC_GetSysClockFreq+0x248>
9000795e:	697b      	ldr	r3, [r7, #20]
90007960:	2b00      	cmp	r3, #0
90007962:	d003      	beq.n	9000796c <HAL_RCC_GetSysClockFreq+0x114>
90007964:	697b      	ldr	r3, [r7, #20]
90007966:	2b01      	cmp	r3, #1
90007968:	d056      	beq.n	90007a18 <HAL_RCC_GetSysClockFreq+0x1c0>
9000796a:	e099      	b.n	90007aa0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000796c:	4b6f      	ldr	r3, [pc, #444]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000796e:	681b      	ldr	r3, [r3, #0]
90007970:	f003 0320 	and.w	r3, r3, #32
90007974:	2b00      	cmp	r3, #0
90007976:	d02d      	beq.n	900079d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007978:	4b6c      	ldr	r3, [pc, #432]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000797a:	681b      	ldr	r3, [r3, #0]
9000797c:	08db      	lsrs	r3, r3, #3
9000797e:	f003 0303 	and.w	r3, r3, #3
90007982:	4a6b      	ldr	r2, [pc, #428]	@ (90007b30 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007984:	fa22 f303 	lsr.w	r3, r2, r3
90007988:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000798a:	687b      	ldr	r3, [r7, #4]
9000798c:	ee07 3a90 	vmov	s15, r3
90007990:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007994:	693b      	ldr	r3, [r7, #16]
90007996:	ee07 3a90 	vmov	s15, r3
9000799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000799e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079a2:	4b62      	ldr	r3, [pc, #392]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
900079a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079aa:	ee07 3a90 	vmov	s15, r3
900079ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079b2:	ed97 6a02 	vldr	s12, [r7, #8]
900079b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007b3c <HAL_RCC_GetSysClockFreq+0x2e4>
900079ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079be:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900079c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
900079ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
900079d2:	e087      	b.n	90007ae4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900079d4:	693b      	ldr	r3, [r7, #16]
900079d6:	ee07 3a90 	vmov	s15, r3
900079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007b40 <HAL_RCC_GetSysClockFreq+0x2e8>
900079e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079e6:	4b51      	ldr	r3, [pc, #324]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
900079e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079ee:	ee07 3a90 	vmov	s15, r3
900079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079f6:	ed97 6a02 	vldr	s12, [r7, #8]
900079fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007b3c <HAL_RCC_GetSysClockFreq+0x2e4>
900079fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a16:	e065      	b.n	90007ae4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a18:	693b      	ldr	r3, [r7, #16]
90007a1a:	ee07 3a90 	vmov	s15, r3
90007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007b44 <HAL_RCC_GetSysClockFreq+0x2ec>
90007a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a2a:	4b40      	ldr	r3, [pc, #256]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a32:	ee07 3a90 	vmov	s15, r3
90007a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a3a:	ed97 6a02 	vldr	s12, [r7, #8]
90007a3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007b3c <HAL_RCC_GetSysClockFreq+0x2e4>
90007a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a5a:	e043      	b.n	90007ae4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a5c:	693b      	ldr	r3, [r7, #16]
90007a5e:	ee07 3a90 	vmov	s15, r3
90007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007b48 <HAL_RCC_GetSysClockFreq+0x2f0>
90007a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a6e:	4b2f      	ldr	r3, [pc, #188]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a76:	ee07 3a90 	vmov	s15, r3
90007a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a7e:	ed97 6a02 	vldr	s12, [r7, #8]
90007a82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007b3c <HAL_RCC_GetSysClockFreq+0x2e4>
90007a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a96:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a9e:	e021      	b.n	90007ae4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007aa0:	693b      	ldr	r3, [r7, #16]
90007aa2:	ee07 3a90 	vmov	s15, r3
90007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007aaa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007b44 <HAL_RCC_GetSysClockFreq+0x2ec>
90007aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007ab2:	4b1e      	ldr	r3, [pc, #120]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
90007ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007aba:	ee07 3a90 	vmov	s15, r3
90007abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007ac2:	ed97 6a02 	vldr	s12, [r7, #8]
90007ac6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007b3c <HAL_RCC_GetSysClockFreq+0x2e4>
90007aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007ada:	ee67 7a27 	vmul.f32	s15, s14, s15
90007ade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007ae2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007ae4:	4b11      	ldr	r3, [pc, #68]	@ (90007b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
90007ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007ae8:	0a5b      	lsrs	r3, r3, #9
90007aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90007aee:	3301      	adds	r3, #1
90007af0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007af2:	683b      	ldr	r3, [r7, #0]
90007af4:	ee07 3a90 	vmov	s15, r3
90007af8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007afc:	edd7 6a07 	vldr	s13, [r7, #28]
90007b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007b08:	ee17 3a90 	vmov	r3, s15
90007b0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007b0e:	e005      	b.n	90007b1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007b10:	2300      	movs	r3, #0
90007b12:	61bb      	str	r3, [r7, #24]
      break;
90007b14:	e002      	b.n	90007b1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007b16:	4b07      	ldr	r3, [pc, #28]	@ (90007b34 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007b18:	61bb      	str	r3, [r7, #24]
      break;
90007b1a:	bf00      	nop
  }

  return sysclockfreq;
90007b1c:	69bb      	ldr	r3, [r7, #24]
}
90007b1e:	4618      	mov	r0, r3
90007b20:	3724      	adds	r7, #36	@ 0x24
90007b22:	46bd      	mov	sp, r7
90007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
90007b28:	4770      	bx	lr
90007b2a:	bf00      	nop
90007b2c:	58024400 	.word	0x58024400
90007b30:	03d09000 	.word	0x03d09000
90007b34:	003d0900 	.word	0x003d0900
90007b38:	017d7840 	.word	0x017d7840
90007b3c:	46000000 	.word	0x46000000
90007b40:	4c742400 	.word	0x4c742400
90007b44:	4a742400 	.word	0x4a742400
90007b48:	4bbebc20 	.word	0x4bbebc20

90007b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007b4c:	b580      	push	{r7, lr}
90007b4e:	b082      	sub	sp, #8
90007b50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007b52:	f7ff fe81 	bl	90007858 <HAL_RCC_GetSysClockFreq>
90007b56:	4602      	mov	r2, r0
90007b58:	4b10      	ldr	r3, [pc, #64]	@ (90007b9c <HAL_RCC_GetHCLKFreq+0x50>)
90007b5a:	699b      	ldr	r3, [r3, #24]
90007b5c:	0a1b      	lsrs	r3, r3, #8
90007b5e:	f003 030f 	and.w	r3, r3, #15
90007b62:	490f      	ldr	r1, [pc, #60]	@ (90007ba0 <HAL_RCC_GetHCLKFreq+0x54>)
90007b64:	5ccb      	ldrb	r3, [r1, r3]
90007b66:	f003 031f 	and.w	r3, r3, #31
90007b6a:	fa22 f303 	lsr.w	r3, r2, r3
90007b6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007b70:	4b0a      	ldr	r3, [pc, #40]	@ (90007b9c <HAL_RCC_GetHCLKFreq+0x50>)
90007b72:	699b      	ldr	r3, [r3, #24]
90007b74:	f003 030f 	and.w	r3, r3, #15
90007b78:	4a09      	ldr	r2, [pc, #36]	@ (90007ba0 <HAL_RCC_GetHCLKFreq+0x54>)
90007b7a:	5cd3      	ldrb	r3, [r2, r3]
90007b7c:	f003 031f 	and.w	r3, r3, #31
90007b80:	687a      	ldr	r2, [r7, #4]
90007b82:	fa22 f303 	lsr.w	r3, r2, r3
90007b86:	4a07      	ldr	r2, [pc, #28]	@ (90007ba4 <HAL_RCC_GetHCLKFreq+0x58>)
90007b88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007b8a:	4a07      	ldr	r2, [pc, #28]	@ (90007ba8 <HAL_RCC_GetHCLKFreq+0x5c>)
90007b8c:	687b      	ldr	r3, [r7, #4]
90007b8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007b90:	4b04      	ldr	r3, [pc, #16]	@ (90007ba4 <HAL_RCC_GetHCLKFreq+0x58>)
90007b92:	681b      	ldr	r3, [r3, #0]
}
90007b94:	4618      	mov	r0, r3
90007b96:	3708      	adds	r7, #8
90007b98:	46bd      	mov	sp, r7
90007b9a:	bd80      	pop	{r7, pc}
90007b9c:	58024400 	.word	0x58024400
90007ba0:	9000d808 	.word	0x9000d808
90007ba4:	2000000c 	.word	0x2000000c
90007ba8:	20000008 	.word	0x20000008

90007bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007bac:	b580      	push	{r7, lr}
90007bae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007bb0:	f7ff ffcc 	bl	90007b4c <HAL_RCC_GetHCLKFreq>
90007bb4:	4602      	mov	r2, r0
90007bb6:	4b06      	ldr	r3, [pc, #24]	@ (90007bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
90007bb8:	69db      	ldr	r3, [r3, #28]
90007bba:	091b      	lsrs	r3, r3, #4
90007bbc:	f003 0307 	and.w	r3, r3, #7
90007bc0:	4904      	ldr	r1, [pc, #16]	@ (90007bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
90007bc2:	5ccb      	ldrb	r3, [r1, r3]
90007bc4:	f003 031f 	and.w	r3, r3, #31
90007bc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90007bcc:	4618      	mov	r0, r3
90007bce:	bd80      	pop	{r7, pc}
90007bd0:	58024400 	.word	0x58024400
90007bd4:	9000d808 	.word	0x9000d808

90007bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007bd8:	b580      	push	{r7, lr}
90007bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007bdc:	f7ff ffb6 	bl	90007b4c <HAL_RCC_GetHCLKFreq>
90007be0:	4602      	mov	r2, r0
90007be2:	4b06      	ldr	r3, [pc, #24]	@ (90007bfc <HAL_RCC_GetPCLK2Freq+0x24>)
90007be4:	69db      	ldr	r3, [r3, #28]
90007be6:	0a1b      	lsrs	r3, r3, #8
90007be8:	f003 0307 	and.w	r3, r3, #7
90007bec:	4904      	ldr	r1, [pc, #16]	@ (90007c00 <HAL_RCC_GetPCLK2Freq+0x28>)
90007bee:	5ccb      	ldrb	r3, [r1, r3]
90007bf0:	f003 031f 	and.w	r3, r3, #31
90007bf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007bf8:	4618      	mov	r0, r3
90007bfa:	bd80      	pop	{r7, pc}
90007bfc:	58024400 	.word	0x58024400
90007c00:	9000d808 	.word	0x9000d808

90007c04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007c08:	b0ca      	sub	sp, #296	@ 0x128
90007c0a:	af00      	add	r7, sp, #0
90007c0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007c10:	2300      	movs	r3, #0
90007c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007c16:	2300      	movs	r3, #0
90007c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
90007c24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007c28:	2500      	movs	r5, #0
90007c2a:	ea54 0305 	orrs.w	r3, r4, r5
90007c2e:	d049      	beq.n	90007cc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007c36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007c3a:	d02f      	beq.n	90007c9c <HAL_RCCEx_PeriphCLKConfig+0x98>
90007c3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007c40:	d828      	bhi.n	90007c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007c46:	d01a      	beq.n	90007c7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007c4c:	d822      	bhi.n	90007c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007c4e:	2b00      	cmp	r3, #0
90007c50:	d003      	beq.n	90007c5a <HAL_RCCEx_PeriphCLKConfig+0x56>
90007c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007c56:	d007      	beq.n	90007c68 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007c58:	e01c      	b.n	90007c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007c5a:	4bb8      	ldr	r3, [pc, #736]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007c5e:	4ab7      	ldr	r2, [pc, #732]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c66:	e01a      	b.n	90007c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c6c:	3308      	adds	r3, #8
90007c6e:	2102      	movs	r1, #2
90007c70:	4618      	mov	r0, r3
90007c72:	f001 fc8f 	bl	90009594 <RCCEx_PLL2_Config>
90007c76:	4603      	mov	r3, r0
90007c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c7c:	e00f      	b.n	90007c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c82:	3328      	adds	r3, #40	@ 0x28
90007c84:	2102      	movs	r1, #2
90007c86:	4618      	mov	r0, r3
90007c88:	f001 fd36 	bl	900096f8 <RCCEx_PLL3_Config>
90007c8c:	4603      	mov	r3, r0
90007c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c92:	e004      	b.n	90007c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007c94:	2301      	movs	r3, #1
90007c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007c9a:	e000      	b.n	90007c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ca2:	2b00      	cmp	r3, #0
90007ca4:	d10a      	bne.n	90007cbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007ca6:	4ba5      	ldr	r3, [pc, #660]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007caa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007cb4:	4aa1      	ldr	r2, [pc, #644]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cb6:	430b      	orrs	r3, r1
90007cb8:	6513      	str	r3, [r2, #80]	@ 0x50
90007cba:	e003      	b.n	90007cc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
90007ccc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007cd0:	f04f 0900 	mov.w	r9, #0
90007cd4:	ea58 0309 	orrs.w	r3, r8, r9
90007cd8:	d047      	beq.n	90007d6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007ce0:	2b04      	cmp	r3, #4
90007ce2:	d82a      	bhi.n	90007d3a <HAL_RCCEx_PeriphCLKConfig+0x136>
90007ce4:	a201      	add	r2, pc, #4	@ (adr r2, 90007cec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007cea:	bf00      	nop
90007cec:	90007d01 	.word	0x90007d01
90007cf0:	90007d0f 	.word	0x90007d0f
90007cf4:	90007d25 	.word	0x90007d25
90007cf8:	90007d43 	.word	0x90007d43
90007cfc:	90007d43 	.word	0x90007d43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d00:	4b8e      	ldr	r3, [pc, #568]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007d04:	4a8d      	ldr	r2, [pc, #564]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d0c:	e01a      	b.n	90007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d12:	3308      	adds	r3, #8
90007d14:	2100      	movs	r1, #0
90007d16:	4618      	mov	r0, r3
90007d18:	f001 fc3c 	bl	90009594 <RCCEx_PLL2_Config>
90007d1c:	4603      	mov	r3, r0
90007d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d22:	e00f      	b.n	90007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d28:	3328      	adds	r3, #40	@ 0x28
90007d2a:	2100      	movs	r1, #0
90007d2c:	4618      	mov	r0, r3
90007d2e:	f001 fce3 	bl	900096f8 <RCCEx_PLL3_Config>
90007d32:	4603      	mov	r3, r0
90007d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d38:	e004      	b.n	90007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007d3a:	2301      	movs	r3, #1
90007d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007d40:	e000      	b.n	90007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007d42:	bf00      	nop
    }

    if (ret == HAL_OK)
90007d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d48:	2b00      	cmp	r3, #0
90007d4a:	d10a      	bne.n	90007d62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007d4c:	4b7b      	ldr	r3, [pc, #492]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007d50:	f023 0107 	bic.w	r1, r3, #7
90007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007d5a:	4a78      	ldr	r2, [pc, #480]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d5c:	430b      	orrs	r3, r1
90007d5e:	6513      	str	r3, [r2, #80]	@ 0x50
90007d60:	e003      	b.n	90007d6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007d76:	f04f 0b00 	mov.w	fp, #0
90007d7a:	ea5a 030b 	orrs.w	r3, sl, fp
90007d7e:	d04c      	beq.n	90007e1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007d8a:	d030      	beq.n	90007dee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007d90:	d829      	bhi.n	90007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d92:	2bc0      	cmp	r3, #192	@ 0xc0
90007d94:	d02d      	beq.n	90007df2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007d96:	2bc0      	cmp	r3, #192	@ 0xc0
90007d98:	d825      	bhi.n	90007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d9a:	2b80      	cmp	r3, #128	@ 0x80
90007d9c:	d018      	beq.n	90007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007d9e:	2b80      	cmp	r3, #128	@ 0x80
90007da0:	d821      	bhi.n	90007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007da2:	2b00      	cmp	r3, #0
90007da4:	d002      	beq.n	90007dac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007da6:	2b40      	cmp	r3, #64	@ 0x40
90007da8:	d007      	beq.n	90007dba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007daa:	e01c      	b.n	90007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007dac:	4b63      	ldr	r3, [pc, #396]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007db0:	4a62      	ldr	r2, [pc, #392]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007db8:	e01c      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dbe:	3308      	adds	r3, #8
90007dc0:	2100      	movs	r1, #0
90007dc2:	4618      	mov	r0, r3
90007dc4:	f001 fbe6 	bl	90009594 <RCCEx_PLL2_Config>
90007dc8:	4603      	mov	r3, r0
90007dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007dce:	e011      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dd4:	3328      	adds	r3, #40	@ 0x28
90007dd6:	2100      	movs	r1, #0
90007dd8:	4618      	mov	r0, r3
90007dda:	f001 fc8d 	bl	900096f8 <RCCEx_PLL3_Config>
90007dde:	4603      	mov	r3, r0
90007de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007de4:	e006      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007de6:	2301      	movs	r3, #1
90007de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007dec:	e002      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007dee:	bf00      	nop
90007df0:	e000      	b.n	90007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007df2:	bf00      	nop
    }

    if (ret == HAL_OK)
90007df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007df8:	2b00      	cmp	r3, #0
90007dfa:	d10a      	bne.n	90007e12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007dfc:	4b4f      	ldr	r3, [pc, #316]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007e00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007e0a:	4a4c      	ldr	r2, [pc, #304]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e0c:	430b      	orrs	r3, r1
90007e0e:	6513      	str	r3, [r2, #80]	@ 0x50
90007e10:	e003      	b.n	90007e1a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e22:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007e26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007e2a:	2300      	movs	r3, #0
90007e2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007e30:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90007e34:	460b      	mov	r3, r1
90007e36:	4313      	orrs	r3, r2
90007e38:	d053      	beq.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007e42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007e46:	d035      	beq.n	90007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007e48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007e4c:	d82e      	bhi.n	90007eac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007e52:	d031      	beq.n	90007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007e54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007e58:	d828      	bhi.n	90007eac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007e5e:	d01a      	beq.n	90007e96 <HAL_RCCEx_PeriphCLKConfig+0x292>
90007e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007e64:	d822      	bhi.n	90007eac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e66:	2b00      	cmp	r3, #0
90007e68:	d003      	beq.n	90007e72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007e6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007e6e:	d007      	beq.n	90007e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007e70:	e01c      	b.n	90007eac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e72:	4b32      	ldr	r3, [pc, #200]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e76:	4a31      	ldr	r2, [pc, #196]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e7e:	e01c      	b.n	90007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e84:	3308      	adds	r3, #8
90007e86:	2100      	movs	r1, #0
90007e88:	4618      	mov	r0, r3
90007e8a:	f001 fb83 	bl	90009594 <RCCEx_PLL2_Config>
90007e8e:	4603      	mov	r3, r0
90007e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007e94:	e011      	b.n	90007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e9a:	3328      	adds	r3, #40	@ 0x28
90007e9c:	2100      	movs	r1, #0
90007e9e:	4618      	mov	r0, r3
90007ea0:	f001 fc2a 	bl	900096f8 <RCCEx_PLL3_Config>
90007ea4:	4603      	mov	r3, r0
90007ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007eaa:	e006      	b.n	90007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007eac:	2301      	movs	r3, #1
90007eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007eb2:	e002      	b.n	90007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007eb4:	bf00      	nop
90007eb6:	e000      	b.n	90007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
90007eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ebe:	2b00      	cmp	r3, #0
90007ec0:	d10b      	bne.n	90007eda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007ec2:	4b1e      	ldr	r3, [pc, #120]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007ec6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007ed2:	4a1a      	ldr	r2, [pc, #104]	@ (90007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ed4:	430b      	orrs	r3, r1
90007ed6:	6593      	str	r3, [r2, #88]	@ 0x58
90007ed8:	e003      	b.n	90007ee2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
90007eea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007eee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007ef2:	2300      	movs	r3, #0
90007ef4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007ef8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007efc:	460b      	mov	r3, r1
90007efe:	4313      	orrs	r3, r2
90007f00:	d056      	beq.n	90007fb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007f0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007f0e:	d038      	beq.n	90007f82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007f10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007f14:	d831      	bhi.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007f16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007f1a:	d034      	beq.n	90007f86 <HAL_RCCEx_PeriphCLKConfig+0x382>
90007f1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007f20:	d82b      	bhi.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007f22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007f26:	d01d      	beq.n	90007f64 <HAL_RCCEx_PeriphCLKConfig+0x360>
90007f28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007f2c:	d825      	bhi.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007f2e:	2b00      	cmp	r3, #0
90007f30:	d006      	beq.n	90007f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007f36:	d00a      	beq.n	90007f4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007f38:	e01f      	b.n	90007f7a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007f3a:	bf00      	nop
90007f3c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f40:	4ba2      	ldr	r3, [pc, #648]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f44:	4aa1      	ldr	r2, [pc, #644]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f4c:	e01c      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f52:	3308      	adds	r3, #8
90007f54:	2100      	movs	r1, #0
90007f56:	4618      	mov	r0, r3
90007f58:	f001 fb1c 	bl	90009594 <RCCEx_PLL2_Config>
90007f5c:	4603      	mov	r3, r0
90007f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007f62:	e011      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f68:	3328      	adds	r3, #40	@ 0x28
90007f6a:	2100      	movs	r1, #0
90007f6c:	4618      	mov	r0, r3
90007f6e:	f001 fbc3 	bl	900096f8 <RCCEx_PLL3_Config>
90007f72:	4603      	mov	r3, r0
90007f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f78:	e006      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007f7a:	2301      	movs	r3, #1
90007f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f80:	e002      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007f82:	bf00      	nop
90007f84:	e000      	b.n	90007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007f86:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f8c:	2b00      	cmp	r3, #0
90007f8e:	d10b      	bne.n	90007fa8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007f90:	4b8e      	ldr	r3, [pc, #568]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007f94:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007fa0:	4a8a      	ldr	r2, [pc, #552]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fa2:	430b      	orrs	r3, r1
90007fa4:	6593      	str	r3, [r2, #88]	@ 0x58
90007fa6:	e003      	b.n	90007fb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
90007fb8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90007fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90007fc0:	2300      	movs	r3, #0
90007fc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90007fc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90007fca:	460b      	mov	r3, r1
90007fcc:	4313      	orrs	r3, r2
90007fce:	d03a      	beq.n	90008046 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007fd6:	2b30      	cmp	r3, #48	@ 0x30
90007fd8:	d01f      	beq.n	9000801a <HAL_RCCEx_PeriphCLKConfig+0x416>
90007fda:	2b30      	cmp	r3, #48	@ 0x30
90007fdc:	d819      	bhi.n	90008012 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007fde:	2b20      	cmp	r3, #32
90007fe0:	d00c      	beq.n	90007ffc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007fe2:	2b20      	cmp	r3, #32
90007fe4:	d815      	bhi.n	90008012 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007fe6:	2b00      	cmp	r3, #0
90007fe8:	d019      	beq.n	9000801e <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007fea:	2b10      	cmp	r3, #16
90007fec:	d111      	bne.n	90008012 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007fee:	4b77      	ldr	r3, [pc, #476]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ff2:	4a76      	ldr	r2, [pc, #472]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007ffa:	e011      	b.n	90008020 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008000:	3308      	adds	r3, #8
90008002:	2102      	movs	r1, #2
90008004:	4618      	mov	r0, r3
90008006:	f001 fac5 	bl	90009594 <RCCEx_PLL2_Config>
9000800a:	4603      	mov	r3, r0
9000800c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90008010:	e006      	b.n	90008020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008012:	2301      	movs	r3, #1
90008014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008018:	e002      	b.n	90008020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000801a:	bf00      	nop
9000801c:	e000      	b.n	90008020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000801e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008024:	2b00      	cmp	r3, #0
90008026:	d10a      	bne.n	9000803e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90008028:	4b68      	ldr	r3, [pc, #416]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000802a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
9000802c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008036:	4a65      	ldr	r2, [pc, #404]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008038:	430b      	orrs	r3, r1
9000803a:	64d3      	str	r3, [r2, #76]	@ 0x4c
9000803c:	e003      	b.n	90008046 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000803e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000804a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000804e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90008052:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90008056:	2300      	movs	r3, #0
90008058:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
9000805c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90008060:	460b      	mov	r3, r1
90008062:	4313      	orrs	r3, r2
90008064:	d051      	beq.n	9000810a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000806a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
9000806c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008070:	d035      	beq.n	900080de <HAL_RCCEx_PeriphCLKConfig+0x4da>
90008072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008076:	d82e      	bhi.n	900080d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008078:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
9000807c:	d031      	beq.n	900080e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
9000807e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90008082:	d828      	bhi.n	900080d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90008088:	d01a      	beq.n	900080c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
9000808a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
9000808e:	d822      	bhi.n	900080d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008090:	2b00      	cmp	r3, #0
90008092:	d003      	beq.n	9000809c <HAL_RCCEx_PeriphCLKConfig+0x498>
90008094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008098:	d007      	beq.n	900080aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000809a:	e01c      	b.n	900080d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000809c:	4b4b      	ldr	r3, [pc, #300]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000809e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900080a0:	4a4a      	ldr	r2, [pc, #296]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900080a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900080a8:	e01c      	b.n	900080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080ae:	3308      	adds	r3, #8
900080b0:	2100      	movs	r1, #0
900080b2:	4618      	mov	r0, r3
900080b4:	f001 fa6e 	bl	90009594 <RCCEx_PLL2_Config>
900080b8:	4603      	mov	r3, r0
900080ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900080be:	e011      	b.n	900080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080c4:	3328      	adds	r3, #40	@ 0x28
900080c6:	2100      	movs	r1, #0
900080c8:	4618      	mov	r0, r3
900080ca:	f001 fb15 	bl	900096f8 <RCCEx_PLL3_Config>
900080ce:	4603      	mov	r3, r0
900080d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900080d4:	e006      	b.n	900080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900080d6:	2301      	movs	r3, #1
900080d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900080dc:	e002      	b.n	900080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900080de:	bf00      	nop
900080e0:	e000      	b.n	900080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900080e2:	bf00      	nop
    }

    if (ret == HAL_OK)
900080e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080e8:	2b00      	cmp	r3, #0
900080ea:	d10a      	bne.n	90008102 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
900080ec:	4b37      	ldr	r3, [pc, #220]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900080f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
900080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
900080fa:	4a34      	ldr	r2, [pc, #208]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080fc:	430b      	orrs	r3, r1
900080fe:	6513      	str	r3, [r2, #80]	@ 0x50
90008100:	e003      	b.n	9000810a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000810e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008112:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
90008116:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
9000811a:	2300      	movs	r3, #0
9000811c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90008120:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90008124:	460b      	mov	r3, r1
90008126:	4313      	orrs	r3, r2
90008128:	d056      	beq.n	900081d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
9000812a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000812e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008134:	d033      	beq.n	9000819e <HAL_RCCEx_PeriphCLKConfig+0x59a>
90008136:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000813a:	d82c      	bhi.n	90008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
9000813c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008140:	d02f      	beq.n	900081a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90008142:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008146:	d826      	bhi.n	90008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008148:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
9000814c:	d02b      	beq.n	900081a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
9000814e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008152:	d820      	bhi.n	90008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008158:	d012      	beq.n	90008180 <HAL_RCCEx_PeriphCLKConfig+0x57c>
9000815a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000815e:	d81a      	bhi.n	90008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008160:	2b00      	cmp	r3, #0
90008162:	d022      	beq.n	900081aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90008164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008168:	d115      	bne.n	90008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000816e:	3308      	adds	r3, #8
90008170:	2101      	movs	r1, #1
90008172:	4618      	mov	r0, r3
90008174:	f001 fa0e 	bl	90009594 <RCCEx_PLL2_Config>
90008178:	4603      	mov	r3, r0
9000817a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000817e:	e015      	b.n	900081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008184:	3328      	adds	r3, #40	@ 0x28
90008186:	2101      	movs	r1, #1
90008188:	4618      	mov	r0, r3
9000818a:	f001 fab5 	bl	900096f8 <RCCEx_PLL3_Config>
9000818e:	4603      	mov	r3, r0
90008190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008194:	e00a      	b.n	900081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008196:	2301      	movs	r3, #1
90008198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000819c:	e006      	b.n	900081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000819e:	bf00      	nop
900081a0:	e004      	b.n	900081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900081a2:	bf00      	nop
900081a4:	e002      	b.n	900081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900081a6:	bf00      	nop
900081a8:	e000      	b.n	900081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
900081aa:	bf00      	nop
    }

    if (ret == HAL_OK)
900081ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081b0:	2b00      	cmp	r3, #0
900081b2:	d10d      	bne.n	900081d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900081b4:	4b05      	ldr	r3, [pc, #20]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900081b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
900081bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900081c2:	4a02      	ldr	r2, [pc, #8]	@ (900081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900081c4:	430b      	orrs	r3, r1
900081c6:	6513      	str	r3, [r2, #80]	@ 0x50
900081c8:	e006      	b.n	900081d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
900081ca:	bf00      	nop
900081cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900081d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900081d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
900081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
900081e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
900081e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
900081e8:	2300      	movs	r3, #0
900081ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
900081ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
900081f2:	460b      	mov	r3, r1
900081f4:	4313      	orrs	r3, r2
900081f6:	d055      	beq.n	900082a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
900081f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
90008204:	d033      	beq.n	9000826e <HAL_RCCEx_PeriphCLKConfig+0x66a>
90008206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
9000820a:	d82c      	bhi.n	90008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000820c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008210:	d02f      	beq.n	90008272 <HAL_RCCEx_PeriphCLKConfig+0x66e>
90008212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008216:	d826      	bhi.n	90008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008218:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
9000821c:	d02b      	beq.n	90008276 <HAL_RCCEx_PeriphCLKConfig+0x672>
9000821e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008222:	d820      	bhi.n	90008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008228:	d012      	beq.n	90008250 <HAL_RCCEx_PeriphCLKConfig+0x64c>
9000822a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000822e:	d81a      	bhi.n	90008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
90008230:	2b00      	cmp	r3, #0
90008232:	d022      	beq.n	9000827a <HAL_RCCEx_PeriphCLKConfig+0x676>
90008234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
90008238:	d115      	bne.n	90008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000823e:	3308      	adds	r3, #8
90008240:	2101      	movs	r1, #1
90008242:	4618      	mov	r0, r3
90008244:	f001 f9a6 	bl	90009594 <RCCEx_PLL2_Config>
90008248:	4603      	mov	r3, r0
9000824a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000824e:	e015      	b.n	9000827c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008254:	3328      	adds	r3, #40	@ 0x28
90008256:	2101      	movs	r1, #1
90008258:	4618      	mov	r0, r3
9000825a:	f001 fa4d 	bl	900096f8 <RCCEx_PLL3_Config>
9000825e:	4603      	mov	r3, r0
90008260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008264:	e00a      	b.n	9000827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
90008266:	2301      	movs	r3, #1
90008268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000826c:	e006      	b.n	9000827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000826e:	bf00      	nop
90008270:	e004      	b.n	9000827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008272:	bf00      	nop
90008274:	e002      	b.n	9000827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008276:	bf00      	nop
90008278:	e000      	b.n	9000827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000827a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000827c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008280:	2b00      	cmp	r3, #0
90008282:	d10b      	bne.n	9000829c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90008284:	4ba3      	ldr	r3, [pc, #652]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008288:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
9000828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008290:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008294:	4a9f      	ldr	r2, [pc, #636]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008296:	430b      	orrs	r3, r1
90008298:	6593      	str	r3, [r2, #88]	@ 0x58
9000829a:	e003      	b.n	900082a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000829c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
900082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
900082ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
900082b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
900082b4:	2300      	movs	r3, #0
900082b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
900082ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
900082be:	460b      	mov	r3, r1
900082c0:	4313      	orrs	r3, r2
900082c2:	d037      	beq.n	90008334 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
900082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900082ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900082ce:	d00e      	beq.n	900082ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900082d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900082d4:	d816      	bhi.n	90008304 <HAL_RCCEx_PeriphCLKConfig+0x700>
900082d6:	2b00      	cmp	r3, #0
900082d8:	d018      	beq.n	9000830c <HAL_RCCEx_PeriphCLKConfig+0x708>
900082da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900082de:	d111      	bne.n	90008304 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900082e0:	4b8c      	ldr	r3, [pc, #560]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900082e4:	4a8b      	ldr	r2, [pc, #556]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900082ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900082ec:	e00f      	b.n	9000830e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082f2:	3308      	adds	r3, #8
900082f4:	2101      	movs	r1, #1
900082f6:	4618      	mov	r0, r3
900082f8:	f001 f94c 	bl	90009594 <RCCEx_PLL2_Config>
900082fc:	4603      	mov	r3, r0
900082fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
90008302:	e004      	b.n	9000830e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008304:	2301      	movs	r3, #1
90008306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000830a:	e000      	b.n	9000830e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
9000830c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000830e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008312:	2b00      	cmp	r3, #0
90008314:	d10a      	bne.n	9000832c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90008316:	4b7f      	ldr	r3, [pc, #508]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000831a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
9000831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008324:	4a7b      	ldr	r2, [pc, #492]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008326:	430b      	orrs	r3, r1
90008328:	6513      	str	r3, [r2, #80]	@ 0x50
9000832a:	e003      	b.n	90008334 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000832c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008338:	e9d3 2300 	ldrd	r2, r3, [r3]
9000833c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90008344:	2300      	movs	r3, #0
90008346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
9000834a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
9000834e:	460b      	mov	r3, r1
90008350:	4313      	orrs	r3, r2
90008352:	d039      	beq.n	900083c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000835a:	2b03      	cmp	r3, #3
9000835c:	d81c      	bhi.n	90008398 <HAL_RCCEx_PeriphCLKConfig+0x794>
9000835e:	a201      	add	r2, pc, #4	@ (adr r2, 90008364 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008364:	900083a1 	.word	0x900083a1
90008368:	90008375 	.word	0x90008375
9000836c:	90008383 	.word	0x90008383
90008370:	900083a1 	.word	0x900083a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008374:	4b67      	ldr	r3, [pc, #412]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008378:	4a66      	ldr	r2, [pc, #408]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000837a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
9000837e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008380:	e00f      	b.n	900083a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008386:	3308      	adds	r3, #8
90008388:	2102      	movs	r1, #2
9000838a:	4618      	mov	r0, r3
9000838c:	f001 f902 	bl	90009594 <RCCEx_PLL2_Config>
90008390:	4603      	mov	r3, r0
90008392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
90008396:	e004      	b.n	900083a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008398:	2301      	movs	r3, #1
9000839a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000839e:	e000      	b.n	900083a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
900083a0:	bf00      	nop
    }

    if (ret == HAL_OK)
900083a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083a6:	2b00      	cmp	r3, #0
900083a8:	d10a      	bne.n	900083c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
900083aa:	4b5a      	ldr	r3, [pc, #360]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900083ae:	f023 0103 	bic.w	r1, r3, #3
900083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900083b8:	4a56      	ldr	r2, [pc, #344]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083ba:	430b      	orrs	r3, r1
900083bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
900083be:	e003      	b.n	900083c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
900083c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
900083d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
900083d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
900083d8:	2300      	movs	r3, #0
900083da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
900083de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
900083e2:	460b      	mov	r3, r1
900083e4:	4313      	orrs	r3, r2
900083e6:	f000 809f 	beq.w	90008528 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900083ea:	4b4b      	ldr	r3, [pc, #300]	@ (90008518 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083ec:	681b      	ldr	r3, [r3, #0]
900083ee:	4a4a      	ldr	r2, [pc, #296]	@ (90008518 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900083f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900083f6:	f7fa ff77 	bl	900032e8 <HAL_GetTick>
900083fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900083fe:	e00b      	b.n	90008418 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90008400:	f7fa ff72 	bl	900032e8 <HAL_GetTick>
90008404:	4602      	mov	r2, r0
90008406:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
9000840a:	1ad3      	subs	r3, r2, r3
9000840c:	2b64      	cmp	r3, #100	@ 0x64
9000840e:	d903      	bls.n	90008418 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90008410:	2303      	movs	r3, #3
90008412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008416:	e005      	b.n	90008424 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90008418:	4b3f      	ldr	r3, [pc, #252]	@ (90008518 <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000841a:	681b      	ldr	r3, [r3, #0]
9000841c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90008420:	2b00      	cmp	r3, #0
90008422:	d0ed      	beq.n	90008400 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90008424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008428:	2b00      	cmp	r3, #0
9000842a:	d179      	bne.n	90008520 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000842c:	4b39      	ldr	r3, [pc, #228]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000842e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008434:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008438:	4053      	eors	r3, r2
9000843a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
9000843e:	2b00      	cmp	r3, #0
90008440:	d015      	beq.n	9000846e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90008442:	4b34      	ldr	r3, [pc, #208]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000844a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
9000844e:	4b31      	ldr	r3, [pc, #196]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008452:	4a30      	ldr	r2, [pc, #192]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90008458:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000845a:	4b2e      	ldr	r3, [pc, #184]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000845c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000845e:	4a2d      	ldr	r2, [pc, #180]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90008464:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90008466:	4a2b      	ldr	r2, [pc, #172]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
9000846c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
90008476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000847a:	d118      	bne.n	900084ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000847c:	f7fa ff34 	bl	900032e8 <HAL_GetTick>
90008480:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008484:	e00d      	b.n	900084a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90008486:	f7fa ff2f 	bl	900032e8 <HAL_GetTick>
9000848a:	4602      	mov	r2, r0
9000848c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008490:	1ad2      	subs	r2, r2, r3
90008492:	f241 3388 	movw	r3, #5000	@ 0x1388
90008496:	429a      	cmp	r2, r3
90008498:	d903      	bls.n	900084a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
9000849a:	2303      	movs	r3, #3
9000849c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
900084a0:	e005      	b.n	900084ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900084a2:	4b1c      	ldr	r3, [pc, #112]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900084a6:	f003 0302 	and.w	r3, r3, #2
900084aa:	2b00      	cmp	r3, #0
900084ac:	d0eb      	beq.n	90008486 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
900084ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900084b2:	2b00      	cmp	r3, #0
900084b4:	d129      	bne.n	9000850a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900084be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
900084c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
900084c6:	d10e      	bne.n	900084e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
900084c8:	4b12      	ldr	r3, [pc, #72]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084ca:	691b      	ldr	r3, [r3, #16]
900084cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
900084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900084d8:	091a      	lsrs	r2, r3, #4
900084da:	4b10      	ldr	r3, [pc, #64]	@ (9000851c <HAL_RCCEx_PeriphCLKConfig+0x918>)
900084dc:	4013      	ands	r3, r2
900084de:	4a0d      	ldr	r2, [pc, #52]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084e0:	430b      	orrs	r3, r1
900084e2:	6113      	str	r3, [r2, #16]
900084e4:	e005      	b.n	900084f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
900084e6:	4b0b      	ldr	r3, [pc, #44]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084e8:	691b      	ldr	r3, [r3, #16]
900084ea:	4a0a      	ldr	r2, [pc, #40]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
900084f0:	6113      	str	r3, [r2, #16]
900084f2:	4b08      	ldr	r3, [pc, #32]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
900084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900084fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
90008502:	4a04      	ldr	r2, [pc, #16]	@ (90008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008504:	430b      	orrs	r3, r1
90008506:	6713      	str	r3, [r2, #112]	@ 0x70
90008508:	e00e      	b.n	90008528 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
9000850a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000850e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
90008512:	e009      	b.n	90008528 <HAL_RCCEx_PeriphCLKConfig+0x924>
90008514:	58024400 	.word	0x58024400
90008518:	58024800 	.word	0x58024800
9000851c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90008520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90008528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000852c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008530:	f002 0301 	and.w	r3, r2, #1
90008534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
90008538:	2300      	movs	r3, #0
9000853a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
9000853e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
90008542:	460b      	mov	r3, r1
90008544:	4313      	orrs	r3, r2
90008546:	f000 8089 	beq.w	9000865c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
9000854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000854e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008550:	2b28      	cmp	r3, #40	@ 0x28
90008552:	d86b      	bhi.n	9000862c <HAL_RCCEx_PeriphCLKConfig+0xa28>
90008554:	a201      	add	r2, pc, #4	@ (adr r2, 9000855c <HAL_RCCEx_PeriphCLKConfig+0x958>)
90008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000855a:	bf00      	nop
9000855c:	90008635 	.word	0x90008635
90008560:	9000862d 	.word	0x9000862d
90008564:	9000862d 	.word	0x9000862d
90008568:	9000862d 	.word	0x9000862d
9000856c:	9000862d 	.word	0x9000862d
90008570:	9000862d 	.word	0x9000862d
90008574:	9000862d 	.word	0x9000862d
90008578:	9000862d 	.word	0x9000862d
9000857c:	90008601 	.word	0x90008601
90008580:	9000862d 	.word	0x9000862d
90008584:	9000862d 	.word	0x9000862d
90008588:	9000862d 	.word	0x9000862d
9000858c:	9000862d 	.word	0x9000862d
90008590:	9000862d 	.word	0x9000862d
90008594:	9000862d 	.word	0x9000862d
90008598:	9000862d 	.word	0x9000862d
9000859c:	90008617 	.word	0x90008617
900085a0:	9000862d 	.word	0x9000862d
900085a4:	9000862d 	.word	0x9000862d
900085a8:	9000862d 	.word	0x9000862d
900085ac:	9000862d 	.word	0x9000862d
900085b0:	9000862d 	.word	0x9000862d
900085b4:	9000862d 	.word	0x9000862d
900085b8:	9000862d 	.word	0x9000862d
900085bc:	90008635 	.word	0x90008635
900085c0:	9000862d 	.word	0x9000862d
900085c4:	9000862d 	.word	0x9000862d
900085c8:	9000862d 	.word	0x9000862d
900085cc:	9000862d 	.word	0x9000862d
900085d0:	9000862d 	.word	0x9000862d
900085d4:	9000862d 	.word	0x9000862d
900085d8:	9000862d 	.word	0x9000862d
900085dc:	90008635 	.word	0x90008635
900085e0:	9000862d 	.word	0x9000862d
900085e4:	9000862d 	.word	0x9000862d
900085e8:	9000862d 	.word	0x9000862d
900085ec:	9000862d 	.word	0x9000862d
900085f0:	9000862d 	.word	0x9000862d
900085f4:	9000862d 	.word	0x9000862d
900085f8:	9000862d 	.word	0x9000862d
900085fc:	90008635 	.word	0x90008635
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008604:	3308      	adds	r3, #8
90008606:	2101      	movs	r1, #1
90008608:	4618      	mov	r0, r3
9000860a:	f000 ffc3 	bl	90009594 <RCCEx_PLL2_Config>
9000860e:	4603      	mov	r3, r0
90008610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008614:	e00f      	b.n	90008636 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000861a:	3328      	adds	r3, #40	@ 0x28
9000861c:	2101      	movs	r1, #1
9000861e:	4618      	mov	r0, r3
90008620:	f001 f86a 	bl	900096f8 <RCCEx_PLL3_Config>
90008624:	4603      	mov	r3, r0
90008626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000862a:	e004      	b.n	90008636 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000862c:	2301      	movs	r3, #1
9000862e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008632:	e000      	b.n	90008636 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
90008634:	bf00      	nop
    }

    if (ret == HAL_OK)
90008636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000863a:	2b00      	cmp	r3, #0
9000863c:	d10a      	bne.n	90008654 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000863e:	4bbf      	ldr	r3, [pc, #764]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008642:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
90008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000864a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
9000864c:	4abb      	ldr	r2, [pc, #748]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000864e:	430b      	orrs	r3, r1
90008650:	6553      	str	r3, [r2, #84]	@ 0x54
90008652:	e003      	b.n	9000865c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008660:	e9d3 2300 	ldrd	r2, r3, [r3]
90008664:	f002 0302 	and.w	r3, r2, #2
90008668:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000866c:	2300      	movs	r3, #0
9000866e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
90008672:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
90008676:	460b      	mov	r3, r1
90008678:	4313      	orrs	r3, r2
9000867a:	d041      	beq.n	90008700 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
9000867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008682:	2b05      	cmp	r3, #5
90008684:	d824      	bhi.n	900086d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
90008686:	a201      	add	r2, pc, #4	@ (adr r2, 9000868c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000868c:	900086d9 	.word	0x900086d9
90008690:	900086a5 	.word	0x900086a5
90008694:	900086bb 	.word	0x900086bb
90008698:	900086d9 	.word	0x900086d9
9000869c:	900086d9 	.word	0x900086d9
900086a0:	900086d9 	.word	0x900086d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086a8:	3308      	adds	r3, #8
900086aa:	2101      	movs	r1, #1
900086ac:	4618      	mov	r0, r3
900086ae:	f000 ff71 	bl	90009594 <RCCEx_PLL2_Config>
900086b2:	4603      	mov	r3, r0
900086b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900086b8:	e00f      	b.n	900086da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086be:	3328      	adds	r3, #40	@ 0x28
900086c0:	2101      	movs	r1, #1
900086c2:	4618      	mov	r0, r3
900086c4:	f001 f818 	bl	900096f8 <RCCEx_PLL3_Config>
900086c8:	4603      	mov	r3, r0
900086ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900086ce:	e004      	b.n	900086da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900086d0:	2301      	movs	r3, #1
900086d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900086d6:	e000      	b.n	900086da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
900086d8:	bf00      	nop
    }

    if (ret == HAL_OK)
900086da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086de:	2b00      	cmp	r3, #0
900086e0:	d10a      	bne.n	900086f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
900086e2:	4b96      	ldr	r3, [pc, #600]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900086e6:	f023 0107 	bic.w	r1, r3, #7
900086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900086f0:	4a92      	ldr	r2, [pc, #584]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086f2:	430b      	orrs	r3, r1
900086f4:	6553      	str	r3, [r2, #84]	@ 0x54
900086f6:	e003      	b.n	90008700 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900086fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008704:	e9d3 2300 	ldrd	r2, r3, [r3]
90008708:	f002 0304 	and.w	r3, r2, #4
9000870c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90008710:	2300      	movs	r3, #0
90008712:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
90008716:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
9000871a:	460b      	mov	r3, r1
9000871c:	4313      	orrs	r3, r2
9000871e:	d044      	beq.n	900087aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90008720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
90008728:	2b05      	cmp	r3, #5
9000872a:	d825      	bhi.n	90008778 <HAL_RCCEx_PeriphCLKConfig+0xb74>
9000872c:	a201      	add	r2, pc, #4	@ (adr r2, 90008734 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
9000872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008732:	bf00      	nop
90008734:	90008781 	.word	0x90008781
90008738:	9000874d 	.word	0x9000874d
9000873c:	90008763 	.word	0x90008763
90008740:	90008781 	.word	0x90008781
90008744:	90008781 	.word	0x90008781
90008748:	90008781 	.word	0x90008781
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008750:	3308      	adds	r3, #8
90008752:	2101      	movs	r1, #1
90008754:	4618      	mov	r0, r3
90008756:	f000 ff1d 	bl	90009594 <RCCEx_PLL2_Config>
9000875a:	4603      	mov	r3, r0
9000875c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008760:	e00f      	b.n	90008782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008766:	3328      	adds	r3, #40	@ 0x28
90008768:	2101      	movs	r1, #1
9000876a:	4618      	mov	r0, r3
9000876c:	f000 ffc4 	bl	900096f8 <RCCEx_PLL3_Config>
90008770:	4603      	mov	r3, r0
90008772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008776:	e004      	b.n	90008782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008778:	2301      	movs	r3, #1
9000877a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000877e:	e000      	b.n	90008782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008780:	bf00      	nop
    }

    if (ret == HAL_OK)
90008782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008786:	2b00      	cmp	r3, #0
90008788:	d10b      	bne.n	900087a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000878a:	4b6c      	ldr	r3, [pc, #432]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000878c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000878e:	f023 0107 	bic.w	r1, r3, #7
90008792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000879a:	4a68      	ldr	r2, [pc, #416]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000879c:	430b      	orrs	r3, r1
9000879e:	6593      	str	r3, [r2, #88]	@ 0x58
900087a0:	e003      	b.n	900087aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
900087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900087a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
900087b2:	f002 0320 	and.w	r3, r2, #32
900087b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
900087ba:	2300      	movs	r3, #0
900087bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
900087c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
900087c4:	460b      	mov	r3, r1
900087c6:	4313      	orrs	r3, r2
900087c8:	d055      	beq.n	90008876 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
900087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900087d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900087d6:	d033      	beq.n	90008840 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
900087d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900087dc:	d82c      	bhi.n	90008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900087e2:	d02f      	beq.n	90008844 <HAL_RCCEx_PeriphCLKConfig+0xc40>
900087e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900087e8:	d826      	bhi.n	90008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900087ee:	d02b      	beq.n	90008848 <HAL_RCCEx_PeriphCLKConfig+0xc44>
900087f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900087f4:	d820      	bhi.n	90008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900087fa:	d012      	beq.n	90008822 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900087fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008800:	d81a      	bhi.n	90008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90008802:	2b00      	cmp	r3, #0
90008804:	d022      	beq.n	9000884c <HAL_RCCEx_PeriphCLKConfig+0xc48>
90008806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000880a:	d115      	bne.n	90008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008810:	3308      	adds	r3, #8
90008812:	2100      	movs	r1, #0
90008814:	4618      	mov	r0, r3
90008816:	f000 febd 	bl	90009594 <RCCEx_PLL2_Config>
9000881a:	4603      	mov	r3, r0
9000881c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008820:	e015      	b.n	9000884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008826:	3328      	adds	r3, #40	@ 0x28
90008828:	2102      	movs	r1, #2
9000882a:	4618      	mov	r0, r3
9000882c:	f000 ff64 	bl	900096f8 <RCCEx_PLL3_Config>
90008830:	4603      	mov	r3, r0
90008832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008836:	e00a      	b.n	9000884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008838:	2301      	movs	r3, #1
9000883a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000883e:	e006      	b.n	9000884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008840:	bf00      	nop
90008842:	e004      	b.n	9000884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008844:	bf00      	nop
90008846:	e002      	b.n	9000884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008848:	bf00      	nop
9000884a:	e000      	b.n	9000884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000884c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000884e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008852:	2b00      	cmp	r3, #0
90008854:	d10b      	bne.n	9000886e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90008856:	4b39      	ldr	r3, [pc, #228]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000885a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
9000885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
90008866:	4a35      	ldr	r2, [pc, #212]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008868:	430b      	orrs	r3, r1
9000886a:	6553      	str	r3, [r2, #84]	@ 0x54
9000886c:	e003      	b.n	90008876 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000886e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90008876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000887a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000887e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
90008882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
90008886:	2300      	movs	r3, #0
90008888:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
9000888c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90008890:	460b      	mov	r3, r1
90008892:	4313      	orrs	r3, r2
90008894:	d058      	beq.n	90008948 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90008896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000889a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
9000889e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
900088a2:	d033      	beq.n	9000890c <HAL_RCCEx_PeriphCLKConfig+0xd08>
900088a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
900088a8:	d82c      	bhi.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900088aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900088ae:	d02f      	beq.n	90008910 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
900088b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900088b4:	d826      	bhi.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900088b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
900088ba:	d02b      	beq.n	90008914 <HAL_RCCEx_PeriphCLKConfig+0xd10>
900088bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
900088c0:	d820      	bhi.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900088c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
900088c6:	d012      	beq.n	900088ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
900088c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
900088cc:	d81a      	bhi.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900088ce:	2b00      	cmp	r3, #0
900088d0:	d022      	beq.n	90008918 <HAL_RCCEx_PeriphCLKConfig+0xd14>
900088d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900088d6:	d115      	bne.n	90008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088dc:	3308      	adds	r3, #8
900088de:	2100      	movs	r1, #0
900088e0:	4618      	mov	r0, r3
900088e2:	f000 fe57 	bl	90009594 <RCCEx_PLL2_Config>
900088e6:	4603      	mov	r3, r0
900088e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900088ec:	e015      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088f2:	3328      	adds	r3, #40	@ 0x28
900088f4:	2102      	movs	r1, #2
900088f6:	4618      	mov	r0, r3
900088f8:	f000 fefe 	bl	900096f8 <RCCEx_PLL3_Config>
900088fc:	4603      	mov	r3, r0
900088fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90008902:	e00a      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008904:	2301      	movs	r3, #1
90008906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000890a:	e006      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000890c:	bf00      	nop
9000890e:	e004      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008910:	bf00      	nop
90008912:	e002      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008914:	bf00      	nop
90008916:	e000      	b.n	9000891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008918:	bf00      	nop
    }

    if (ret == HAL_OK)
9000891a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000891e:	2b00      	cmp	r3, #0
90008920:	d10e      	bne.n	90008940 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90008922:	4b06      	ldr	r3, [pc, #24]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008926:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
9000892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000892e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008932:	4a02      	ldr	r2, [pc, #8]	@ (9000893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008934:	430b      	orrs	r3, r1
90008936:	6593      	str	r3, [r2, #88]	@ 0x58
90008938:	e006      	b.n	90008948 <HAL_RCCEx_PeriphCLKConfig+0xd44>
9000893a:	bf00      	nop
9000893c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000894c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008950:	f002 0380 	and.w	r3, r2, #128	@ 0x80
90008954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
90008958:	2300      	movs	r3, #0
9000895a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
9000895e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
90008962:	460b      	mov	r3, r1
90008964:	4313      	orrs	r3, r2
90008966:	d055      	beq.n	90008a14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000896c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008970:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008974:	d033      	beq.n	900089de <HAL_RCCEx_PeriphCLKConfig+0xdda>
90008976:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
9000897a:	d82c      	bhi.n	900089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000897c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008980:	d02f      	beq.n	900089e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008986:	d826      	bhi.n	900089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008988:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
9000898c:	d02b      	beq.n	900089e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
9000898e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008992:	d820      	bhi.n	900089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008998:	d012      	beq.n	900089c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
9000899a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000899e:	d81a      	bhi.n	900089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
900089a0:	2b00      	cmp	r3, #0
900089a2:	d022      	beq.n	900089ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
900089a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
900089a8:	d115      	bne.n	900089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089ae:	3308      	adds	r3, #8
900089b0:	2100      	movs	r1, #0
900089b2:	4618      	mov	r0, r3
900089b4:	f000 fdee 	bl	90009594 <RCCEx_PLL2_Config>
900089b8:	4603      	mov	r3, r0
900089ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
900089be:	e015      	b.n	900089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900089c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089c4:	3328      	adds	r3, #40	@ 0x28
900089c6:	2102      	movs	r1, #2
900089c8:	4618      	mov	r0, r3
900089ca:	f000 fe95 	bl	900096f8 <RCCEx_PLL3_Config>
900089ce:	4603      	mov	r3, r0
900089d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
900089d4:	e00a      	b.n	900089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900089d6:	2301      	movs	r3, #1
900089d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900089dc:	e006      	b.n	900089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089de:	bf00      	nop
900089e0:	e004      	b.n	900089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089e2:	bf00      	nop
900089e4:	e002      	b.n	900089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089e6:	bf00      	nop
900089e8:	e000      	b.n	900089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089ea:	bf00      	nop
    }

    if (ret == HAL_OK)
900089ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900089f0:	2b00      	cmp	r3, #0
900089f2:	d10b      	bne.n	90008a0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
900089f4:	4ba1      	ldr	r3, [pc, #644]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900089f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
900089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008a04:	4a9d      	ldr	r2, [pc, #628]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a06:	430b      	orrs	r3, r1
90008a08:	6593      	str	r3, [r2, #88]	@ 0x58
90008a0a:	e003      	b.n	90008a14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a1c:	f002 0308 	and.w	r3, r2, #8
90008a20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90008a24:	2300      	movs	r3, #0
90008a26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
90008a2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008a2e:	460b      	mov	r3, r1
90008a30:	4313      	orrs	r3, r2
90008a32:	d01e      	beq.n	90008a72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90008a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008a40:	d10c      	bne.n	90008a5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a46:	3328      	adds	r3, #40	@ 0x28
90008a48:	2102      	movs	r1, #2
90008a4a:	4618      	mov	r0, r3
90008a4c:	f000 fe54 	bl	900096f8 <RCCEx_PLL3_Config>
90008a50:	4603      	mov	r3, r0
90008a52:	2b00      	cmp	r3, #0
90008a54:	d002      	beq.n	90008a5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90008a56:	2301      	movs	r3, #1
90008a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008a5c:	4b87      	ldr	r3, [pc, #540]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008a60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008a6c:	4a83      	ldr	r2, [pc, #524]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a6e:	430b      	orrs	r3, r1
90008a70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a7a:	f002 0310 	and.w	r3, r2, #16
90008a7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90008a82:	2300      	movs	r3, #0
90008a84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
90008a88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008a8c:	460b      	mov	r3, r1
90008a8e:	4313      	orrs	r3, r2
90008a90:	d01e      	beq.n	90008ad0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008a9e:	d10c      	bne.n	90008aba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008aa4:	3328      	adds	r3, #40	@ 0x28
90008aa6:	2102      	movs	r1, #2
90008aa8:	4618      	mov	r0, r3
90008aaa:	f000 fe25 	bl	900096f8 <RCCEx_PLL3_Config>
90008aae:	4603      	mov	r3, r0
90008ab0:	2b00      	cmp	r3, #0
90008ab2:	d002      	beq.n	90008aba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008ab4:	2301      	movs	r3, #1
90008ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008aba:	4b70      	ldr	r3, [pc, #448]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008abe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
90008aca:	4a6c      	ldr	r2, [pc, #432]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008acc:	430b      	orrs	r3, r1
90008ace:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ad8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
90008adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
90008ae0:	2300      	movs	r3, #0
90008ae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
90008ae6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
90008aea:	460b      	mov	r3, r1
90008aec:	4313      	orrs	r3, r2
90008aee:	d03e      	beq.n	90008b6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008af4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008afc:	d022      	beq.n	90008b44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008afe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008b02:	d81b      	bhi.n	90008b3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008b04:	2b00      	cmp	r3, #0
90008b06:	d003      	beq.n	90008b10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008b0c:	d00b      	beq.n	90008b26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008b0e:	e015      	b.n	90008b3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b14:	3308      	adds	r3, #8
90008b16:	2100      	movs	r1, #0
90008b18:	4618      	mov	r0, r3
90008b1a:	f000 fd3b 	bl	90009594 <RCCEx_PLL2_Config>
90008b1e:	4603      	mov	r3, r0
90008b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008b24:	e00f      	b.n	90008b46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b2a:	3328      	adds	r3, #40	@ 0x28
90008b2c:	2102      	movs	r1, #2
90008b2e:	4618      	mov	r0, r3
90008b30:	f000 fde2 	bl	900096f8 <RCCEx_PLL3_Config>
90008b34:	4603      	mov	r3, r0
90008b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008b3a:	e004      	b.n	90008b46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b3c:	2301      	movs	r3, #1
90008b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b42:	e000      	b.n	90008b46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008b44:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b4a:	2b00      	cmp	r3, #0
90008b4c:	d10b      	bne.n	90008b66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008b4e:	4b4b      	ldr	r3, [pc, #300]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008b52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008b5e:	4a47      	ldr	r2, [pc, #284]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b60:	430b      	orrs	r3, r1
90008b62:	6593      	str	r3, [r2, #88]	@ 0x58
90008b64:	e003      	b.n	90008b6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
90008b7c:	2300      	movs	r3, #0
90008b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008b80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008b84:	460b      	mov	r3, r1
90008b86:	4313      	orrs	r3, r2
90008b88:	d03b      	beq.n	90008c02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008b92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008b96:	d01f      	beq.n	90008bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008b98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008b9c:	d818      	bhi.n	90008bd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008ba2:	d003      	beq.n	90008bac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008ba4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008ba8:	d007      	beq.n	90008bba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008baa:	e011      	b.n	90008bd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008bac:	4b33      	ldr	r3, [pc, #204]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008bb0:	4a32      	ldr	r2, [pc, #200]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008bb8:	e00f      	b.n	90008bda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bbe:	3328      	adds	r3, #40	@ 0x28
90008bc0:	2101      	movs	r1, #1
90008bc2:	4618      	mov	r0, r3
90008bc4:	f000 fd98 	bl	900096f8 <RCCEx_PLL3_Config>
90008bc8:	4603      	mov	r3, r0
90008bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008bce:	e004      	b.n	90008bda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008bd0:	2301      	movs	r3, #1
90008bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008bd6:	e000      	b.n	90008bda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
90008bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bde:	2b00      	cmp	r3, #0
90008be0:	d10b      	bne.n	90008bfa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008be2:	4b26      	ldr	r3, [pc, #152]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008be6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008bf2:	4a22      	ldr	r2, [pc, #136]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bf4:	430b      	orrs	r3, r1
90008bf6:	6553      	str	r3, [r2, #84]	@ 0x54
90008bf8:	e003      	b.n	90008c02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008c0e:	673b      	str	r3, [r7, #112]	@ 0x70
90008c10:	2300      	movs	r3, #0
90008c12:	677b      	str	r3, [r7, #116]	@ 0x74
90008c14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008c18:	460b      	mov	r3, r1
90008c1a:	4313      	orrs	r3, r2
90008c1c:	d034      	beq.n	90008c88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008c24:	2b00      	cmp	r3, #0
90008c26:	d003      	beq.n	90008c30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008c2c:	d007      	beq.n	90008c3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008c2e:	e011      	b.n	90008c54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008c30:	4b12      	ldr	r3, [pc, #72]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008c34:	4a11      	ldr	r2, [pc, #68]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008c3c:	e00e      	b.n	90008c5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c42:	3308      	adds	r3, #8
90008c44:	2102      	movs	r1, #2
90008c46:	4618      	mov	r0, r3
90008c48:	f000 fca4 	bl	90009594 <RCCEx_PLL2_Config>
90008c4c:	4603      	mov	r3, r0
90008c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008c52:	e003      	b.n	90008c5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008c54:	2301      	movs	r3, #1
90008c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c60:	2b00      	cmp	r3, #0
90008c62:	d10d      	bne.n	90008c80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008c64:	4b05      	ldr	r3, [pc, #20]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008c68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008c72:	4a02      	ldr	r2, [pc, #8]	@ (90008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c74:	430b      	orrs	r3, r1
90008c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008c78:	e006      	b.n	90008c88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008c7a:	bf00      	nop
90008c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008c94:	66bb      	str	r3, [r7, #104]	@ 0x68
90008c96:	2300      	movs	r3, #0
90008c98:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008c9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008c9e:	460b      	mov	r3, r1
90008ca0:	4313      	orrs	r3, r2
90008ca2:	d00c      	beq.n	90008cbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ca8:	3328      	adds	r3, #40	@ 0x28
90008caa:	2102      	movs	r1, #2
90008cac:	4618      	mov	r0, r3
90008cae:	f000 fd23 	bl	900096f8 <RCCEx_PLL3_Config>
90008cb2:	4603      	mov	r3, r0
90008cb4:	2b00      	cmp	r3, #0
90008cb6:	d002      	beq.n	90008cbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008cb8:	2301      	movs	r3, #1
90008cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008cca:	663b      	str	r3, [r7, #96]	@ 0x60
90008ccc:	2300      	movs	r3, #0
90008cce:	667b      	str	r3, [r7, #100]	@ 0x64
90008cd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008cd4:	460b      	mov	r3, r1
90008cd6:	4313      	orrs	r3, r2
90008cd8:	d038      	beq.n	90008d4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008ce6:	d018      	beq.n	90008d1a <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008cec:	d811      	bhi.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008cf2:	d014      	beq.n	90008d1e <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008cf8:	d80b      	bhi.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008cfa:	2b00      	cmp	r3, #0
90008cfc:	d011      	beq.n	90008d22 <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008d02:	d106      	bne.n	90008d12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008d04:	4bc3      	ldr	r3, [pc, #780]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008d08:	4ac2      	ldr	r2, [pc, #776]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008d10:	e008      	b.n	90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008d12:	2301      	movs	r3, #1
90008d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008d18:	e004      	b.n	90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008d1a:	bf00      	nop
90008d1c:	e002      	b.n	90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008d1e:	bf00      	nop
90008d20:	e000      	b.n	90008d24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008d22:	bf00      	nop
    }

    if (ret == HAL_OK)
90008d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d28:	2b00      	cmp	r3, #0
90008d2a:	d10b      	bne.n	90008d44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008d2c:	4bb9      	ldr	r3, [pc, #740]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008d30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008d3c:	4ab5      	ldr	r2, [pc, #724]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d3e:	430b      	orrs	r3, r1
90008d40:	6553      	str	r3, [r2, #84]	@ 0x54
90008d42:	e003      	b.n	90008d4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008d58:	65bb      	str	r3, [r7, #88]	@ 0x58
90008d5a:	2300      	movs	r3, #0
90008d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008d5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008d62:	460b      	mov	r3, r1
90008d64:	4313      	orrs	r3, r2
90008d66:	d009      	beq.n	90008d7c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008d68:	4baa      	ldr	r3, [pc, #680]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008d6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008d76:	4aa7      	ldr	r2, [pc, #668]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d78:	430b      	orrs	r3, r1
90008d7a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d84:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008d88:	653b      	str	r3, [r7, #80]	@ 0x50
90008d8a:	2300      	movs	r3, #0
90008d8c:	657b      	str	r3, [r7, #84]	@ 0x54
90008d8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008d92:	460b      	mov	r3, r1
90008d94:	4313      	orrs	r3, r2
90008d96:	d00a      	beq.n	90008dae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008d98:	4b9e      	ldr	r3, [pc, #632]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d9a:	691b      	ldr	r3, [r3, #16]
90008d9c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008da4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008da8:	4a9a      	ldr	r2, [pc, #616]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008daa:	430b      	orrs	r3, r1
90008dac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008db6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008dba:	64bb      	str	r3, [r7, #72]	@ 0x48
90008dbc:	2300      	movs	r3, #0
90008dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008dc0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008dc4:	460b      	mov	r3, r1
90008dc6:	4313      	orrs	r3, r2
90008dc8:	d009      	beq.n	90008dde <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008dca:	4b92      	ldr	r3, [pc, #584]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008dce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008dd8:	4a8e      	ldr	r2, [pc, #568]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dda:	430b      	orrs	r3, r1
90008ddc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008de6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008dea:	643b      	str	r3, [r7, #64]	@ 0x40
90008dec:	2300      	movs	r3, #0
90008dee:	647b      	str	r3, [r7, #68]	@ 0x44
90008df0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008df4:	460b      	mov	r3, r1
90008df6:	4313      	orrs	r3, r2
90008df8:	d00e      	beq.n	90008e18 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008dfa:	4b86      	ldr	r3, [pc, #536]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dfc:	691b      	ldr	r3, [r3, #16]
90008dfe:	4a85      	ldr	r2, [pc, #532]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008e04:	6113      	str	r3, [r2, #16]
90008e06:	4b83      	ldr	r3, [pc, #524]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e08:	6919      	ldr	r1, [r3, #16]
90008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008e12:	4a80      	ldr	r2, [pc, #512]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e14:	430b      	orrs	r3, r1
90008e16:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e20:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008e24:	63bb      	str	r3, [r7, #56]	@ 0x38
90008e26:	2300      	movs	r3, #0
90008e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008e2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008e2e:	460b      	mov	r3, r1
90008e30:	4313      	orrs	r3, r2
90008e32:	d009      	beq.n	90008e48 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008e34:	4b77      	ldr	r3, [pc, #476]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008e38:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008e42:	4a74      	ldr	r2, [pc, #464]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e44:	430b      	orrs	r3, r1
90008e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e50:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90008e54:	633b      	str	r3, [r7, #48]	@ 0x30
90008e56:	2300      	movs	r3, #0
90008e58:	637b      	str	r3, [r7, #52]	@ 0x34
90008e5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90008e5e:	460b      	mov	r3, r1
90008e60:	4313      	orrs	r3, r2
90008e62:	d00a      	beq.n	90008e7a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008e64:	4b6b      	ldr	r3, [pc, #428]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008e68:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90008e74:	4a67      	ldr	r2, [pc, #412]	@ (90009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e76:	430b      	orrs	r3, r1
90008e78:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e82:	2100      	movs	r1, #0
90008e84:	62b9      	str	r1, [r7, #40]	@ 0x28
90008e86:	f003 0301 	and.w	r3, r3, #1
90008e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
90008e8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90008e90:	460b      	mov	r3, r1
90008e92:	4313      	orrs	r3, r2
90008e94:	d011      	beq.n	90008eba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e9a:	3308      	adds	r3, #8
90008e9c:	2100      	movs	r1, #0
90008e9e:	4618      	mov	r0, r3
90008ea0:	f000 fb78 	bl	90009594 <RCCEx_PLL2_Config>
90008ea4:	4603      	mov	r3, r0
90008ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008eae:	2b00      	cmp	r3, #0
90008eb0:	d003      	beq.n	90008eba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ec2:	2100      	movs	r1, #0
90008ec4:	6239      	str	r1, [r7, #32]
90008ec6:	f003 0302 	and.w	r3, r3, #2
90008eca:	627b      	str	r3, [r7, #36]	@ 0x24
90008ecc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008ed0:	460b      	mov	r3, r1
90008ed2:	4313      	orrs	r3, r2
90008ed4:	d011      	beq.n	90008efa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eda:	3308      	adds	r3, #8
90008edc:	2101      	movs	r1, #1
90008ede:	4618      	mov	r0, r3
90008ee0:	f000 fb58 	bl	90009594 <RCCEx_PLL2_Config>
90008ee4:	4603      	mov	r3, r0
90008ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008eee:	2b00      	cmp	r3, #0
90008ef0:	d003      	beq.n	90008efa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f02:	2100      	movs	r1, #0
90008f04:	61b9      	str	r1, [r7, #24]
90008f06:	f003 0304 	and.w	r3, r3, #4
90008f0a:	61fb      	str	r3, [r7, #28]
90008f0c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008f10:	460b      	mov	r3, r1
90008f12:	4313      	orrs	r3, r2
90008f14:	d011      	beq.n	90008f3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f1a:	3308      	adds	r3, #8
90008f1c:	2102      	movs	r1, #2
90008f1e:	4618      	mov	r0, r3
90008f20:	f000 fb38 	bl	90009594 <RCCEx_PLL2_Config>
90008f24:	4603      	mov	r3, r0
90008f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f2e:	2b00      	cmp	r3, #0
90008f30:	d003      	beq.n	90008f3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f42:	2100      	movs	r1, #0
90008f44:	6139      	str	r1, [r7, #16]
90008f46:	f003 0308 	and.w	r3, r3, #8
90008f4a:	617b      	str	r3, [r7, #20]
90008f4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008f50:	460b      	mov	r3, r1
90008f52:	4313      	orrs	r3, r2
90008f54:	d011      	beq.n	90008f7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f5a:	3328      	adds	r3, #40	@ 0x28
90008f5c:	2100      	movs	r1, #0
90008f5e:	4618      	mov	r0, r3
90008f60:	f000 fbca 	bl	900096f8 <RCCEx_PLL3_Config>
90008f64:	4603      	mov	r3, r0
90008f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90008f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f6e:	2b00      	cmp	r3, #0
90008f70:	d003      	beq.n	90008f7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f82:	2100      	movs	r1, #0
90008f84:	60b9      	str	r1, [r7, #8]
90008f86:	f003 0310 	and.w	r3, r3, #16
90008f8a:	60fb      	str	r3, [r7, #12]
90008f8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008f90:	460b      	mov	r3, r1
90008f92:	4313      	orrs	r3, r2
90008f94:	d011      	beq.n	90008fba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008f9a:	3328      	adds	r3, #40	@ 0x28
90008f9c:	2101      	movs	r1, #1
90008f9e:	4618      	mov	r0, r3
90008fa0:	f000 fbaa 	bl	900096f8 <RCCEx_PLL3_Config>
90008fa4:	4603      	mov	r3, r0
90008fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fae:	2b00      	cmp	r3, #0
90008fb0:	d003      	beq.n	90008fba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
90008fc2:	2100      	movs	r1, #0
90008fc4:	6039      	str	r1, [r7, #0]
90008fc6:	f003 0320 	and.w	r3, r3, #32
90008fca:	607b      	str	r3, [r7, #4]
90008fcc:	e9d7 1200 	ldrd	r1, r2, [r7]
90008fd0:	460b      	mov	r3, r1
90008fd2:	4313      	orrs	r3, r2
90008fd4:	d011      	beq.n	90008ffa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008fda:	3328      	adds	r3, #40	@ 0x28
90008fdc:	2102      	movs	r1, #2
90008fde:	4618      	mov	r0, r3
90008fe0:	f000 fb8a 	bl	900096f8 <RCCEx_PLL3_Config>
90008fe4:	4603      	mov	r3, r0
90008fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008fee:	2b00      	cmp	r3, #0
90008ff0:	d003      	beq.n	90008ffa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90008ffa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90008ffe:	2b00      	cmp	r3, #0
90009000:	d101      	bne.n	90009006 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90009002:	2300      	movs	r3, #0
90009004:	e000      	b.n	90009008 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90009006:	2301      	movs	r3, #1
}
90009008:	4618      	mov	r0, r3
9000900a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
9000900e:	46bd      	mov	sp, r7
90009010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90009014:	58024400 	.word	0x58024400

90009018 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90009018:	b580      	push	{r7, lr}
9000901a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000901c:	f7fe fd96 	bl	90007b4c <HAL_RCC_GetHCLKFreq>
90009020:	4602      	mov	r2, r0
90009022:	4b06      	ldr	r3, [pc, #24]	@ (9000903c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90009024:	6a1b      	ldr	r3, [r3, #32]
90009026:	091b      	lsrs	r3, r3, #4
90009028:	f003 0307 	and.w	r3, r3, #7
9000902c:	4904      	ldr	r1, [pc, #16]	@ (90009040 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
9000902e:	5ccb      	ldrb	r3, [r1, r3]
90009030:	f003 031f 	and.w	r3, r3, #31
90009034:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90009038:	4618      	mov	r0, r3
9000903a:	bd80      	pop	{r7, pc}
9000903c:	58024400 	.word	0x58024400
90009040:	9000d808 	.word	0x9000d808

90009044 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90009044:	b480      	push	{r7}
90009046:	b089      	sub	sp, #36	@ 0x24
90009048:	af00      	add	r7, sp, #0
9000904a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000904c:	4ba1      	ldr	r3, [pc, #644]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000904e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009050:	f003 0303 	and.w	r3, r3, #3
90009054:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90009056:	4b9f      	ldr	r3, [pc, #636]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000905a:	0b1b      	lsrs	r3, r3, #12
9000905c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90009060:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90009062:	4b9c      	ldr	r3, [pc, #624]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009066:	091b      	lsrs	r3, r3, #4
90009068:	f003 0301 	and.w	r3, r3, #1
9000906c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000906e:	4b99      	ldr	r3, [pc, #612]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90009072:	08db      	lsrs	r3, r3, #3
90009074:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009078:	693a      	ldr	r2, [r7, #16]
9000907a:	fb02 f303 	mul.w	r3, r2, r3
9000907e:	ee07 3a90 	vmov	s15, r3
90009082:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
9000908a:	697b      	ldr	r3, [r7, #20]
9000908c:	2b00      	cmp	r3, #0
9000908e:	f000 8111 	beq.w	900092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90009092:	69bb      	ldr	r3, [r7, #24]
90009094:	2b02      	cmp	r3, #2
90009096:	f000 8083 	beq.w	900091a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
9000909a:	69bb      	ldr	r3, [r7, #24]
9000909c:	2b02      	cmp	r3, #2
9000909e:	f200 80a1 	bhi.w	900091e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
900090a2:	69bb      	ldr	r3, [r7, #24]
900090a4:	2b00      	cmp	r3, #0
900090a6:	d003      	beq.n	900090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
900090a8:	69bb      	ldr	r3, [r7, #24]
900090aa:	2b01      	cmp	r3, #1
900090ac:	d056      	beq.n	9000915c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
900090ae:	e099      	b.n	900091e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900090b0:	4b88      	ldr	r3, [pc, #544]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090b2:	681b      	ldr	r3, [r3, #0]
900090b4:	f003 0320 	and.w	r3, r3, #32
900090b8:	2b00      	cmp	r3, #0
900090ba:	d02d      	beq.n	90009118 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900090bc:	4b85      	ldr	r3, [pc, #532]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090be:	681b      	ldr	r3, [r3, #0]
900090c0:	08db      	lsrs	r3, r3, #3
900090c2:	f003 0303 	and.w	r3, r3, #3
900090c6:	4a84      	ldr	r2, [pc, #528]	@ (900092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
900090c8:	fa22 f303 	lsr.w	r3, r2, r3
900090cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900090ce:	68bb      	ldr	r3, [r7, #8]
900090d0:	ee07 3a90 	vmov	s15, r3
900090d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090d8:	697b      	ldr	r3, [r7, #20]
900090da:	ee07 3a90 	vmov	s15, r3
900090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
900090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900090e6:	4b7b      	ldr	r3, [pc, #492]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
900090ee:	ee07 3a90 	vmov	s15, r3
900090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090f6:	ed97 6a03 	vldr	s12, [r7, #12]
900090fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900092dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009102:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000910e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009112:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
90009116:	e087      	b.n	90009228 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009118:	697b      	ldr	r3, [r7, #20]
9000911a:	ee07 3a90 	vmov	s15, r3
9000911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009122:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90009126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000912a:	4b6a      	ldr	r3, [pc, #424]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000912c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009132:	ee07 3a90 	vmov	s15, r3
90009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000913a:	ed97 6a03 	vldr	s12, [r7, #12]
9000913e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900092dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009142:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009146:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000914a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009152:	ee67 7a27 	vmul.f32	s15, s14, s15
90009156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000915a:	e065      	b.n	90009228 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000915c:	697b      	ldr	r3, [r7, #20]
9000915e:	ee07 3a90 	vmov	s15, r3
90009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009166:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900092e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000916a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000916e:	4b59      	ldr	r3, [pc, #356]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009176:	ee07 3a90 	vmov	s15, r3
9000917a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000917e:	ed97 6a03 	vldr	s12, [r7, #12]
90009182:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900092dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009186:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000918a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000918e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009192:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009196:	ee67 7a27 	vmul.f32	s15, s14, s15
9000919a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000919e:	e043      	b.n	90009228 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900091a0:	697b      	ldr	r3, [r7, #20]
900091a2:	ee07 3a90 	vmov	s15, r3
900091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900092e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
900091ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900091b2:	4b48      	ldr	r3, [pc, #288]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091ba:	ee07 3a90 	vmov	s15, r3
900091be:	eef8 6a67 	vcvt.f32.u32	s13, s15
900091c2:	ed97 6a03 	vldr	s12, [r7, #12]
900091c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900092dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900091ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
900091ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
900091d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900091d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900091da:	ee67 7a27 	vmul.f32	s15, s14, s15
900091de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900091e2:	e021      	b.n	90009228 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900091e4:	697b      	ldr	r3, [r7, #20]
900091e6:	ee07 3a90 	vmov	s15, r3
900091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
900091ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900092e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
900091f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900091f6:	4b37      	ldr	r3, [pc, #220]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900091f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900091fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
900091fe:	ee07 3a90 	vmov	s15, r3
90009202:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009206:	ed97 6a03 	vldr	s12, [r7, #12]
9000920a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900092dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000920e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009212:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000921a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000921e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009226:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90009228:	4b2a      	ldr	r3, [pc, #168]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000922a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000922c:	0a5b      	lsrs	r3, r3, #9
9000922e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009232:	ee07 3a90 	vmov	s15, r3
90009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000923a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000923e:	ee37 7a87 	vadd.f32	s14, s15, s14
90009242:	edd7 6a07 	vldr	s13, [r7, #28]
90009246:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000924a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000924e:	ee17 2a90 	vmov	r2, s15
90009252:	687b      	ldr	r3, [r7, #4]
90009254:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
90009256:	4b1f      	ldr	r3, [pc, #124]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000925a:	0c1b      	lsrs	r3, r3, #16
9000925c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009260:	ee07 3a90 	vmov	s15, r3
90009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009268:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000926c:	ee37 7a87 	vadd.f32	s14, s15, s14
90009270:	edd7 6a07 	vldr	s13, [r7, #28]
90009274:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000927c:	ee17 2a90 	vmov	r2, s15
90009280:	687b      	ldr	r3, [r7, #4]
90009282:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90009284:	4b13      	ldr	r3, [pc, #76]	@ (900092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009288:	0e1b      	lsrs	r3, r3, #24
9000928a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000928e:	ee07 3a90 	vmov	s15, r3
90009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000929a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000929e:	edd7 6a07 	vldr	s13, [r7, #28]
900092a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
900092a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900092aa:	ee17 2a90 	vmov	r2, s15
900092ae:	687b      	ldr	r3, [r7, #4]
900092b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
900092b2:	e008      	b.n	900092c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900092b4:	687b      	ldr	r3, [r7, #4]
900092b6:	2200      	movs	r2, #0
900092b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
900092ba:	687b      	ldr	r3, [r7, #4]
900092bc:	2200      	movs	r2, #0
900092be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
900092c0:	687b      	ldr	r3, [r7, #4]
900092c2:	2200      	movs	r2, #0
900092c4:	609a      	str	r2, [r3, #8]
}
900092c6:	bf00      	nop
900092c8:	3724      	adds	r7, #36	@ 0x24
900092ca:	46bd      	mov	sp, r7
900092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900092d0:	4770      	bx	lr
900092d2:	bf00      	nop
900092d4:	58024400 	.word	0x58024400
900092d8:	03d09000 	.word	0x03d09000
900092dc:	46000000 	.word	0x46000000
900092e0:	4c742400 	.word	0x4c742400
900092e4:	4a742400 	.word	0x4a742400
900092e8:	4bbebc20 	.word	0x4bbebc20

900092ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
900092ec:	b480      	push	{r7}
900092ee:	b089      	sub	sp, #36	@ 0x24
900092f0:	af00      	add	r7, sp, #0
900092f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900092f4:	4ba1      	ldr	r3, [pc, #644]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900092f8:	f003 0303 	and.w	r3, r3, #3
900092fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
900092fe:	4b9f      	ldr	r3, [pc, #636]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009302:	0d1b      	lsrs	r3, r3, #20
90009304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90009308:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000930a:	4b9c      	ldr	r3, [pc, #624]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000930c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000930e:	0a1b      	lsrs	r3, r3, #8
90009310:	f003 0301 	and.w	r3, r3, #1
90009314:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
90009316:	4b99      	ldr	r3, [pc, #612]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000931a:	08db      	lsrs	r3, r3, #3
9000931c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009320:	693a      	ldr	r2, [r7, #16]
90009322:	fb02 f303 	mul.w	r3, r2, r3
90009326:	ee07 3a90 	vmov	s15, r3
9000932a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000932e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90009332:	697b      	ldr	r3, [r7, #20]
90009334:	2b00      	cmp	r3, #0
90009336:	f000 8111 	beq.w	9000955c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
9000933a:	69bb      	ldr	r3, [r7, #24]
9000933c:	2b02      	cmp	r3, #2
9000933e:	f000 8083 	beq.w	90009448 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90009342:	69bb      	ldr	r3, [r7, #24]
90009344:	2b02      	cmp	r3, #2
90009346:	f200 80a1 	bhi.w	9000948c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
9000934a:	69bb      	ldr	r3, [r7, #24]
9000934c:	2b00      	cmp	r3, #0
9000934e:	d003      	beq.n	90009358 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90009350:	69bb      	ldr	r3, [r7, #24]
90009352:	2b01      	cmp	r3, #1
90009354:	d056      	beq.n	90009404 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90009356:	e099      	b.n	9000948c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009358:	4b88      	ldr	r3, [pc, #544]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000935a:	681b      	ldr	r3, [r3, #0]
9000935c:	f003 0320 	and.w	r3, r3, #32
90009360:	2b00      	cmp	r3, #0
90009362:	d02d      	beq.n	900093c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009364:	4b85      	ldr	r3, [pc, #532]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009366:	681b      	ldr	r3, [r3, #0]
90009368:	08db      	lsrs	r3, r3, #3
9000936a:	f003 0303 	and.w	r3, r3, #3
9000936e:	4a84      	ldr	r2, [pc, #528]	@ (90009580 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90009370:	fa22 f303 	lsr.w	r3, r2, r3
90009374:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009376:	68bb      	ldr	r3, [r7, #8]
90009378:	ee07 3a90 	vmov	s15, r3
9000937c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009380:	697b      	ldr	r3, [r7, #20]
90009382:	ee07 3a90 	vmov	s15, r3
90009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000938a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000938e:	4b7b      	ldr	r3, [pc, #492]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009392:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009396:	ee07 3a90 	vmov	s15, r3
9000939a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000939e:	ed97 6a03 	vldr	s12, [r7, #12]
900093a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900093a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900093aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
900093ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900093b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093b6:	ee67 7a27 	vmul.f32	s15, s14, s15
900093ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
900093be:	e087      	b.n	900094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900093c0:	697b      	ldr	r3, [r7, #20]
900093c2:	ee07 3a90 	vmov	s15, r3
900093c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 90009588 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
900093ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900093d2:	4b6a      	ldr	r3, [pc, #424]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900093d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900093da:	ee07 3a90 	vmov	s15, r3
900093de:	eef8 6a67 	vcvt.f32.u32	s13, s15
900093e2:	ed97 6a03 	vldr	s12, [r7, #12]
900093e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900093ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
900093ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
900093f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900093f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093fa:	ee67 7a27 	vmul.f32	s15, s14, s15
900093fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009402:	e065      	b.n	900094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009404:	697b      	ldr	r3, [r7, #20]
90009406:	ee07 3a90 	vmov	s15, r3
9000940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000940e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 9000958c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009416:	4b59      	ldr	r3, [pc, #356]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000941a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000941e:	ee07 3a90 	vmov	s15, r3
90009422:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009426:	ed97 6a03 	vldr	s12, [r7, #12]
9000942a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000942e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009432:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000943a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000943e:	ee67 7a27 	vmul.f32	s15, s14, s15
90009442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009446:	e043      	b.n	900094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009448:	697b      	ldr	r3, [r7, #20]
9000944a:	ee07 3a90 	vmov	s15, r3
9000944e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009452:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009590 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90009456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000945a:	4b48      	ldr	r3, [pc, #288]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000945c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000945e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009462:	ee07 3a90 	vmov	s15, r3
90009466:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000946a:	ed97 6a03 	vldr	s12, [r7, #12]
9000946e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009472:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009476:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000947a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000947e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009482:	ee67 7a27 	vmul.f32	s15, s14, s15
90009486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000948a:	e021      	b.n	900094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000948c:	697b      	ldr	r3, [r7, #20]
9000948e:	ee07 3a90 	vmov	s15, r3
90009492:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009496:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 9000958c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000949a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000949e:	4b37      	ldr	r3, [pc, #220]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900094a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900094a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900094a6:	ee07 3a90 	vmov	s15, r3
900094aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
900094ae:	ed97 6a03 	vldr	s12, [r7, #12]
900094b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009584 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900094b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900094ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
900094be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900094c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900094c6:	ee67 7a27 	vmul.f32	s15, s14, s15
900094ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900094ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
900094d0:	4b2a      	ldr	r3, [pc, #168]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900094d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900094d4:	0a5b      	lsrs	r3, r3, #9
900094d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900094da:	ee07 3a90 	vmov	s15, r3
900094de:	eef8 7a67 	vcvt.f32.u32	s15, s15
900094e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900094e6:	ee37 7a87 	vadd.f32	s14, s15, s14
900094ea:	edd7 6a07 	vldr	s13, [r7, #28]
900094ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
900094f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900094f6:	ee17 2a90 	vmov	r2, s15
900094fa:	687b      	ldr	r3, [r7, #4]
900094fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
900094fe:	4b1f      	ldr	r3, [pc, #124]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009502:	0c1b      	lsrs	r3, r3, #16
90009504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009508:	ee07 3a90 	vmov	s15, r3
9000950c:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009514:	ee37 7a87 	vadd.f32	s14, s15, s14
90009518:	edd7 6a07 	vldr	s13, [r7, #28]
9000951c:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009524:	ee17 2a90 	vmov	r2, s15
90009528:	687b      	ldr	r3, [r7, #4]
9000952a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000952c:	4b13      	ldr	r3, [pc, #76]	@ (9000957c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000952e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009530:	0e1b      	lsrs	r3, r3, #24
90009532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009536:	ee07 3a90 	vmov	s15, r3
9000953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000953e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009542:	ee37 7a87 	vadd.f32	s14, s15, s14
90009546:	edd7 6a07 	vldr	s13, [r7, #28]
9000954a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000954e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009552:	ee17 2a90 	vmov	r2, s15
90009556:	687b      	ldr	r3, [r7, #4]
90009558:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
9000955a:	e008      	b.n	9000956e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
9000955c:	687b      	ldr	r3, [r7, #4]
9000955e:	2200      	movs	r2, #0
90009560:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90009562:	687b      	ldr	r3, [r7, #4]
90009564:	2200      	movs	r2, #0
90009566:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90009568:	687b      	ldr	r3, [r7, #4]
9000956a:	2200      	movs	r2, #0
9000956c:	609a      	str	r2, [r3, #8]
}
9000956e:	bf00      	nop
90009570:	3724      	adds	r7, #36	@ 0x24
90009572:	46bd      	mov	sp, r7
90009574:	f85d 7b04 	ldr.w	r7, [sp], #4
90009578:	4770      	bx	lr
9000957a:	bf00      	nop
9000957c:	58024400 	.word	0x58024400
90009580:	03d09000 	.word	0x03d09000
90009584:	46000000 	.word	0x46000000
90009588:	4c742400 	.word	0x4c742400
9000958c:	4a742400 	.word	0x4a742400
90009590:	4bbebc20 	.word	0x4bbebc20

90009594 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90009594:	b580      	push	{r7, lr}
90009596:	b084      	sub	sp, #16
90009598:	af00      	add	r7, sp, #0
9000959a:	6078      	str	r0, [r7, #4]
9000959c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000959e:	2300      	movs	r3, #0
900095a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900095a2:	4b53      	ldr	r3, [pc, #332]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900095a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900095a6:	f003 0303 	and.w	r3, r3, #3
900095aa:	2b03      	cmp	r3, #3
900095ac:	d101      	bne.n	900095b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
900095ae:	2301      	movs	r3, #1
900095b0:	e099      	b.n	900096e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
900095b2:	4b4f      	ldr	r3, [pc, #316]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900095b4:	681b      	ldr	r3, [r3, #0]
900095b6:	4a4e      	ldr	r2, [pc, #312]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900095b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
900095bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900095be:	f7f9 fe93 	bl	900032e8 <HAL_GetTick>
900095c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
900095c4:	e008      	b.n	900095d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
900095c6:	f7f9 fe8f 	bl	900032e8 <HAL_GetTick>
900095ca:	4602      	mov	r2, r0
900095cc:	68bb      	ldr	r3, [r7, #8]
900095ce:	1ad3      	subs	r3, r2, r3
900095d0:	2b02      	cmp	r3, #2
900095d2:	d901      	bls.n	900095d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
900095d4:	2303      	movs	r3, #3
900095d6:	e086      	b.n	900096e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
900095d8:	4b45      	ldr	r3, [pc, #276]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900095da:	681b      	ldr	r3, [r3, #0]
900095dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900095e0:	2b00      	cmp	r3, #0
900095e2:	d1f0      	bne.n	900095c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
900095e4:	4b42      	ldr	r3, [pc, #264]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900095e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900095e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900095ec:	687b      	ldr	r3, [r7, #4]
900095ee:	681b      	ldr	r3, [r3, #0]
900095f0:	031b      	lsls	r3, r3, #12
900095f2:	493f      	ldr	r1, [pc, #252]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900095f4:	4313      	orrs	r3, r2
900095f6:	628b      	str	r3, [r1, #40]	@ 0x28
900095f8:	687b      	ldr	r3, [r7, #4]
900095fa:	685b      	ldr	r3, [r3, #4]
900095fc:	3b01      	subs	r3, #1
900095fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009602:	687b      	ldr	r3, [r7, #4]
90009604:	689b      	ldr	r3, [r3, #8]
90009606:	3b01      	subs	r3, #1
90009608:	025b      	lsls	r3, r3, #9
9000960a:	b29b      	uxth	r3, r3
9000960c:	431a      	orrs	r2, r3
9000960e:	687b      	ldr	r3, [r7, #4]
90009610:	68db      	ldr	r3, [r3, #12]
90009612:	3b01      	subs	r3, #1
90009614:	041b      	lsls	r3, r3, #16
90009616:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000961a:	431a      	orrs	r2, r3
9000961c:	687b      	ldr	r3, [r7, #4]
9000961e:	691b      	ldr	r3, [r3, #16]
90009620:	3b01      	subs	r3, #1
90009622:	061b      	lsls	r3, r3, #24
90009624:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009628:	4931      	ldr	r1, [pc, #196]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
9000962a:	4313      	orrs	r3, r2
9000962c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000962e:	4b30      	ldr	r3, [pc, #192]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
90009630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009632:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
90009636:	687b      	ldr	r3, [r7, #4]
90009638:	695b      	ldr	r3, [r3, #20]
9000963a:	492d      	ldr	r1, [pc, #180]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
9000963c:	4313      	orrs	r3, r2
9000963e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009640:	4b2b      	ldr	r3, [pc, #172]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
90009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009644:	f023 0220 	bic.w	r2, r3, #32
90009648:	687b      	ldr	r3, [r7, #4]
9000964a:	699b      	ldr	r3, [r3, #24]
9000964c:	4928      	ldr	r1, [pc, #160]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
9000964e:	4313      	orrs	r3, r2
90009650:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90009652:	4b27      	ldr	r3, [pc, #156]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
90009654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009656:	4a26      	ldr	r2, [pc, #152]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
90009658:	f023 0310 	bic.w	r3, r3, #16
9000965c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000965e:	4b24      	ldr	r3, [pc, #144]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
90009660:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
90009662:	4b24      	ldr	r3, [pc, #144]	@ (900096f4 <RCCEx_PLL2_Config+0x160>)
90009664:	4013      	ands	r3, r2
90009666:	687a      	ldr	r2, [r7, #4]
90009668:	69d2      	ldr	r2, [r2, #28]
9000966a:	00d2      	lsls	r2, r2, #3
9000966c:	4920      	ldr	r1, [pc, #128]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
9000966e:	4313      	orrs	r3, r2
90009670:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90009672:	4b1f      	ldr	r3, [pc, #124]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
90009674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009676:	4a1e      	ldr	r2, [pc, #120]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
90009678:	f043 0310 	orr.w	r3, r3, #16
9000967c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
9000967e:	683b      	ldr	r3, [r7, #0]
90009680:	2b00      	cmp	r3, #0
90009682:	d106      	bne.n	90009692 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90009684:	4b1a      	ldr	r3, [pc, #104]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
90009686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009688:	4a19      	ldr	r2, [pc, #100]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
9000968a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
9000968e:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009690:	e00f      	b.n	900096b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90009692:	683b      	ldr	r3, [r7, #0]
90009694:	2b01      	cmp	r3, #1
90009696:	d106      	bne.n	900096a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90009698:	4b15      	ldr	r3, [pc, #84]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
9000969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000969c:	4a14      	ldr	r2, [pc, #80]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
9000969e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
900096a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
900096a4:	e005      	b.n	900096b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
900096a6:	4b12      	ldr	r3, [pc, #72]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900096a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096aa:	4a11      	ldr	r2, [pc, #68]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900096ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
900096b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
900096b2:	4b0f      	ldr	r3, [pc, #60]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900096b4:	681b      	ldr	r3, [r3, #0]
900096b6:	4a0e      	ldr	r2, [pc, #56]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900096b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
900096bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900096be:	f7f9 fe13 	bl	900032e8 <HAL_GetTick>
900096c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900096c4:	e008      	b.n	900096d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
900096c6:	f7f9 fe0f 	bl	900032e8 <HAL_GetTick>
900096ca:	4602      	mov	r2, r0
900096cc:	68bb      	ldr	r3, [r7, #8]
900096ce:	1ad3      	subs	r3, r2, r3
900096d0:	2b02      	cmp	r3, #2
900096d2:	d901      	bls.n	900096d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
900096d4:	2303      	movs	r3, #3
900096d6:	e006      	b.n	900096e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900096d8:	4b05      	ldr	r3, [pc, #20]	@ (900096f0 <RCCEx_PLL2_Config+0x15c>)
900096da:	681b      	ldr	r3, [r3, #0]
900096dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900096e0:	2b00      	cmp	r3, #0
900096e2:	d0f0      	beq.n	900096c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
900096e4:	7bfb      	ldrb	r3, [r7, #15]
}
900096e6:	4618      	mov	r0, r3
900096e8:	3710      	adds	r7, #16
900096ea:	46bd      	mov	sp, r7
900096ec:	bd80      	pop	{r7, pc}
900096ee:	bf00      	nop
900096f0:	58024400 	.word	0x58024400
900096f4:	ffff0007 	.word	0xffff0007

900096f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
900096f8:	b580      	push	{r7, lr}
900096fa:	b084      	sub	sp, #16
900096fc:	af00      	add	r7, sp, #0
900096fe:	6078      	str	r0, [r7, #4]
90009700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009702:	2300      	movs	r3, #0
90009704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90009706:	4b53      	ldr	r3, [pc, #332]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
90009708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000970a:	f003 0303 	and.w	r3, r3, #3
9000970e:	2b03      	cmp	r3, #3
90009710:	d101      	bne.n	90009716 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90009712:	2301      	movs	r3, #1
90009714:	e099      	b.n	9000984a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
90009716:	4b4f      	ldr	r3, [pc, #316]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
90009718:	681b      	ldr	r3, [r3, #0]
9000971a:	4a4e      	ldr	r2, [pc, #312]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
9000971c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
90009720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009722:	f7f9 fde1 	bl	900032e8 <HAL_GetTick>
90009726:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009728:	e008      	b.n	9000973c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000972a:	f7f9 fddd 	bl	900032e8 <HAL_GetTick>
9000972e:	4602      	mov	r2, r0
90009730:	68bb      	ldr	r3, [r7, #8]
90009732:	1ad3      	subs	r3, r2, r3
90009734:	2b02      	cmp	r3, #2
90009736:	d901      	bls.n	9000973c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90009738:	2303      	movs	r3, #3
9000973a:	e086      	b.n	9000984a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000973c:	4b45      	ldr	r3, [pc, #276]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
9000973e:	681b      	ldr	r3, [r3, #0]
90009740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009744:	2b00      	cmp	r3, #0
90009746:	d1f0      	bne.n	9000972a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90009748:	4b42      	ldr	r3, [pc, #264]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
9000974a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000974c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
90009750:	687b      	ldr	r3, [r7, #4]
90009752:	681b      	ldr	r3, [r3, #0]
90009754:	051b      	lsls	r3, r3, #20
90009756:	493f      	ldr	r1, [pc, #252]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
90009758:	4313      	orrs	r3, r2
9000975a:	628b      	str	r3, [r1, #40]	@ 0x28
9000975c:	687b      	ldr	r3, [r7, #4]
9000975e:	685b      	ldr	r3, [r3, #4]
90009760:	3b01      	subs	r3, #1
90009762:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009766:	687b      	ldr	r3, [r7, #4]
90009768:	689b      	ldr	r3, [r3, #8]
9000976a:	3b01      	subs	r3, #1
9000976c:	025b      	lsls	r3, r3, #9
9000976e:	b29b      	uxth	r3, r3
90009770:	431a      	orrs	r2, r3
90009772:	687b      	ldr	r3, [r7, #4]
90009774:	68db      	ldr	r3, [r3, #12]
90009776:	3b01      	subs	r3, #1
90009778:	041b      	lsls	r3, r3, #16
9000977a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000977e:	431a      	orrs	r2, r3
90009780:	687b      	ldr	r3, [r7, #4]
90009782:	691b      	ldr	r3, [r3, #16]
90009784:	3b01      	subs	r3, #1
90009786:	061b      	lsls	r3, r3, #24
90009788:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000978c:	4931      	ldr	r1, [pc, #196]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
9000978e:	4313      	orrs	r3, r2
90009790:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
90009792:	4b30      	ldr	r3, [pc, #192]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
90009794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009796:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
9000979a:	687b      	ldr	r3, [r7, #4]
9000979c:	695b      	ldr	r3, [r3, #20]
9000979e:	492d      	ldr	r1, [pc, #180]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097a0:	4313      	orrs	r3, r2
900097a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
900097a4:	4b2b      	ldr	r3, [pc, #172]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
900097ac:	687b      	ldr	r3, [r7, #4]
900097ae:	699b      	ldr	r3, [r3, #24]
900097b0:	4928      	ldr	r1, [pc, #160]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097b2:	4313      	orrs	r3, r2
900097b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
900097b6:	4b27      	ldr	r3, [pc, #156]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097ba:	4a26      	ldr	r2, [pc, #152]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
900097c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
900097c2:	4b24      	ldr	r3, [pc, #144]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
900097c6:	4b24      	ldr	r3, [pc, #144]	@ (90009858 <RCCEx_PLL3_Config+0x160>)
900097c8:	4013      	ands	r3, r2
900097ca:	687a      	ldr	r2, [r7, #4]
900097cc:	69d2      	ldr	r2, [r2, #28]
900097ce:	00d2      	lsls	r2, r2, #3
900097d0:	4920      	ldr	r1, [pc, #128]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097d2:	4313      	orrs	r3, r2
900097d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
900097d6:	4b1f      	ldr	r3, [pc, #124]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097da:	4a1e      	ldr	r2, [pc, #120]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900097e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900097e2:	683b      	ldr	r3, [r7, #0]
900097e4:	2b00      	cmp	r3, #0
900097e6:	d106      	bne.n	900097f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
900097e8:	4b1a      	ldr	r3, [pc, #104]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900097ec:	4a19      	ldr	r2, [pc, #100]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
900097f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
900097f4:	e00f      	b.n	90009816 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900097f6:	683b      	ldr	r3, [r7, #0]
900097f8:	2b01      	cmp	r3, #1
900097fa:	d106      	bne.n	9000980a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
900097fc:	4b15      	ldr	r3, [pc, #84]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
900097fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009800:	4a14      	ldr	r2, [pc, #80]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
90009802:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
90009806:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009808:	e005      	b.n	90009816 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000980a:	4b12      	ldr	r3, [pc, #72]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
9000980c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000980e:	4a11      	ldr	r2, [pc, #68]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
90009810:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90009814:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90009816:	4b0f      	ldr	r3, [pc, #60]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
90009818:	681b      	ldr	r3, [r3, #0]
9000981a:	4a0e      	ldr	r2, [pc, #56]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
9000981c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
90009820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009822:	f7f9 fd61 	bl	900032e8 <HAL_GetTick>
90009826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009828:	e008      	b.n	9000983c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000982a:	f7f9 fd5d 	bl	900032e8 <HAL_GetTick>
9000982e:	4602      	mov	r2, r0
90009830:	68bb      	ldr	r3, [r7, #8]
90009832:	1ad3      	subs	r3, r2, r3
90009834:	2b02      	cmp	r3, #2
90009836:	d901      	bls.n	9000983c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90009838:	2303      	movs	r3, #3
9000983a:	e006      	b.n	9000984a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000983c:	4b05      	ldr	r3, [pc, #20]	@ (90009854 <RCCEx_PLL3_Config+0x15c>)
9000983e:	681b      	ldr	r3, [r3, #0]
90009840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009844:	2b00      	cmp	r3, #0
90009846:	d0f0      	beq.n	9000982a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90009848:	7bfb      	ldrb	r3, [r7, #15]
}
9000984a:	4618      	mov	r0, r3
9000984c:	3710      	adds	r7, #16
9000984e:	46bd      	mov	sp, r7
90009850:	bd80      	pop	{r7, pc}
90009852:	bf00      	nop
90009854:	58024400 	.word	0x58024400
90009858:	ffff0007 	.word	0xffff0007

9000985c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
9000985c:	b580      	push	{r7, lr}
9000985e:	b082      	sub	sp, #8
90009860:	af00      	add	r7, sp, #0
90009862:	6078      	str	r0, [r7, #4]
90009864:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
90009866:	687b      	ldr	r3, [r7, #4]
90009868:	2b00      	cmp	r3, #0
9000986a:	d101      	bne.n	90009870 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
9000986c:	2301      	movs	r3, #1
9000986e:	e02b      	b.n	900098c8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
90009870:	687b      	ldr	r3, [r7, #4]
90009872:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009876:	b2db      	uxtb	r3, r3
90009878:	2b00      	cmp	r3, #0
9000987a:	d106      	bne.n	9000988a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
9000987c:	687b      	ldr	r3, [r7, #4]
9000987e:	2200      	movs	r2, #0
90009880:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90009884:	6878      	ldr	r0, [r7, #4]
90009886:	f000 f825 	bl	900098d4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000988a:	687b      	ldr	r3, [r7, #4]
9000988c:	2202      	movs	r2, #2
9000988e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90009892:	687b      	ldr	r3, [r7, #4]
90009894:	681a      	ldr	r2, [r3, #0]
90009896:	687b      	ldr	r3, [r7, #4]
90009898:	3304      	adds	r3, #4
9000989a:	4619      	mov	r1, r3
9000989c:	4610      	mov	r0, r2
9000989e:	f001 fb51 	bl	9000af44 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
900098a2:	687b      	ldr	r3, [r7, #4]
900098a4:	6818      	ldr	r0, [r3, #0]
900098a6:	687b      	ldr	r3, [r7, #4]
900098a8:	685b      	ldr	r3, [r3, #4]
900098aa:	461a      	mov	r2, r3
900098ac:	6839      	ldr	r1, [r7, #0]
900098ae:	f001 fba5 	bl	9000affc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
900098b2:	4b07      	ldr	r3, [pc, #28]	@ (900098d0 <HAL_SDRAM_Init+0x74>)
900098b4:	681b      	ldr	r3, [r3, #0]
900098b6:	4a06      	ldr	r2, [pc, #24]	@ (900098d0 <HAL_SDRAM_Init+0x74>)
900098b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900098bc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900098be:	687b      	ldr	r3, [r7, #4]
900098c0:	2201      	movs	r2, #1
900098c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
900098c6:	2300      	movs	r3, #0
}
900098c8:	4618      	mov	r0, r3
900098ca:	3708      	adds	r7, #8
900098cc:	46bd      	mov	sp, r7
900098ce:	bd80      	pop	{r7, pc}
900098d0:	52004000 	.word	0x52004000

900098d4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
900098d4:	b480      	push	{r7}
900098d6:	b083      	sub	sp, #12
900098d8:	af00      	add	r7, sp, #0
900098da:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
900098dc:	bf00      	nop
900098de:	370c      	adds	r7, #12
900098e0:	46bd      	mov	sp, r7
900098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
900098e6:	4770      	bx	lr

900098e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
900098e8:	b580      	push	{r7, lr}
900098ea:	b086      	sub	sp, #24
900098ec:	af00      	add	r7, sp, #0
900098ee:	60f8      	str	r0, [r7, #12]
900098f0:	60b9      	str	r1, [r7, #8]
900098f2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
900098f4:	68fb      	ldr	r3, [r7, #12]
900098f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900098fa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
900098fc:	7dfb      	ldrb	r3, [r7, #23]
900098fe:	2b02      	cmp	r3, #2
90009900:	d101      	bne.n	90009906 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
90009902:	2302      	movs	r3, #2
90009904:	e021      	b.n	9000994a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
90009906:	7dfb      	ldrb	r3, [r7, #23]
90009908:	2b01      	cmp	r3, #1
9000990a:	d002      	beq.n	90009912 <HAL_SDRAM_SendCommand+0x2a>
9000990c:	7dfb      	ldrb	r3, [r7, #23]
9000990e:	2b05      	cmp	r3, #5
90009910:	d118      	bne.n	90009944 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009912:	68fb      	ldr	r3, [r7, #12]
90009914:	2202      	movs	r2, #2
90009916:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000991a:	68fb      	ldr	r3, [r7, #12]
9000991c:	681b      	ldr	r3, [r3, #0]
9000991e:	687a      	ldr	r2, [r7, #4]
90009920:	68b9      	ldr	r1, [r7, #8]
90009922:	4618      	mov	r0, r3
90009924:	f001 fbd4 	bl	9000b0d0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009928:	68bb      	ldr	r3, [r7, #8]
9000992a:	681b      	ldr	r3, [r3, #0]
9000992c:	2b02      	cmp	r3, #2
9000992e:	d104      	bne.n	9000993a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009930:	68fb      	ldr	r3, [r7, #12]
90009932:	2205      	movs	r2, #5
90009934:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009938:	e006      	b.n	90009948 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
9000993a:	68fb      	ldr	r3, [r7, #12]
9000993c:	2201      	movs	r2, #1
9000993e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009942:	e001      	b.n	90009948 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
90009944:	2301      	movs	r3, #1
90009946:	e000      	b.n	9000994a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
90009948:	2300      	movs	r3, #0
}
9000994a:	4618      	mov	r0, r3
9000994c:	3718      	adds	r7, #24
9000994e:	46bd      	mov	sp, r7
90009950:	bd80      	pop	{r7, pc}

90009952 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90009952:	b580      	push	{r7, lr}
90009954:	b082      	sub	sp, #8
90009956:	af00      	add	r7, sp, #0
90009958:	6078      	str	r0, [r7, #4]
9000995a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000995c:	687b      	ldr	r3, [r7, #4]
9000995e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009962:	b2db      	uxtb	r3, r3
90009964:	2b02      	cmp	r3, #2
90009966:	d101      	bne.n	9000996c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90009968:	2302      	movs	r3, #2
9000996a:	e016      	b.n	9000999a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000996c:	687b      	ldr	r3, [r7, #4]
9000996e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009972:	b2db      	uxtb	r3, r3
90009974:	2b01      	cmp	r3, #1
90009976:	d10f      	bne.n	90009998 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009978:	687b      	ldr	r3, [r7, #4]
9000997a:	2202      	movs	r2, #2
9000997c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
90009980:	687b      	ldr	r3, [r7, #4]
90009982:	681b      	ldr	r3, [r3, #0]
90009984:	6839      	ldr	r1, [r7, #0]
90009986:	4618      	mov	r0, r3
90009988:	f001 fbc6 	bl	9000b118 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
9000998c:	687b      	ldr	r3, [r7, #4]
9000998e:	2201      	movs	r2, #1
90009990:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
90009994:	2300      	movs	r3, #0
90009996:	e000      	b.n	9000999a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
90009998:	2301      	movs	r3, #1
}
9000999a:	4618      	mov	r0, r3
9000999c:	3708      	adds	r7, #8
9000999e:	46bd      	mov	sp, r7
900099a0:	bd80      	pop	{r7, pc}

900099a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
900099a2:	b580      	push	{r7, lr}
900099a4:	b082      	sub	sp, #8
900099a6:	af00      	add	r7, sp, #0
900099a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
900099aa:	687b      	ldr	r3, [r7, #4]
900099ac:	2b00      	cmp	r3, #0
900099ae:	d101      	bne.n	900099b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
900099b0:	2301      	movs	r3, #1
900099b2:	e049      	b.n	90009a48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900099b4:	687b      	ldr	r3, [r7, #4]
900099b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
900099ba:	b2db      	uxtb	r3, r3
900099bc:	2b00      	cmp	r3, #0
900099be:	d106      	bne.n	900099ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
900099c0:	687b      	ldr	r3, [r7, #4]
900099c2:	2200      	movs	r2, #0
900099c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
900099c8:	6878      	ldr	r0, [r7, #4]
900099ca:	f000 f89d 	bl	90009b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
900099ce:	687b      	ldr	r3, [r7, #4]
900099d0:	2202      	movs	r2, #2
900099d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
900099d6:	687b      	ldr	r3, [r7, #4]
900099d8:	681a      	ldr	r2, [r3, #0]
900099da:	687b      	ldr	r3, [r7, #4]
900099dc:	3304      	adds	r3, #4
900099de:	4619      	mov	r1, r3
900099e0:	4610      	mov	r0, r2
900099e2:	f000 f8a5 	bl	90009b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
900099e6:	687b      	ldr	r3, [r7, #4]
900099e8:	2201      	movs	r2, #1
900099ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900099ee:	687b      	ldr	r3, [r7, #4]
900099f0:	2201      	movs	r2, #1
900099f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900099f6:	687b      	ldr	r3, [r7, #4]
900099f8:	2201      	movs	r2, #1
900099fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900099fe:	687b      	ldr	r3, [r7, #4]
90009a00:	2201      	movs	r2, #1
90009a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009a06:	687b      	ldr	r3, [r7, #4]
90009a08:	2201      	movs	r2, #1
90009a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009a0e:	687b      	ldr	r3, [r7, #4]
90009a10:	2201      	movs	r2, #1
90009a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009a16:	687b      	ldr	r3, [r7, #4]
90009a18:	2201      	movs	r2, #1
90009a1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009a1e:	687b      	ldr	r3, [r7, #4]
90009a20:	2201      	movs	r2, #1
90009a22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009a26:	687b      	ldr	r3, [r7, #4]
90009a28:	2201      	movs	r2, #1
90009a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009a2e:	687b      	ldr	r3, [r7, #4]
90009a30:	2201      	movs	r2, #1
90009a32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009a36:	687b      	ldr	r3, [r7, #4]
90009a38:	2201      	movs	r2, #1
90009a3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009a3e:	687b      	ldr	r3, [r7, #4]
90009a40:	2201      	movs	r2, #1
90009a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90009a46:	2300      	movs	r3, #0
}
90009a48:	4618      	mov	r0, r3
90009a4a:	3708      	adds	r7, #8
90009a4c:	46bd      	mov	sp, r7
90009a4e:	bd80      	pop	{r7, pc}

90009a50 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009a50:	b580      	push	{r7, lr}
90009a52:	b082      	sub	sp, #8
90009a54:	af00      	add	r7, sp, #0
90009a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
90009a58:	687b      	ldr	r3, [r7, #4]
90009a5a:	2202      	movs	r2, #2
90009a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90009a60:	687b      	ldr	r3, [r7, #4]
90009a62:	681b      	ldr	r3, [r3, #0]
90009a64:	6a1a      	ldr	r2, [r3, #32]
90009a66:	f241 1311 	movw	r3, #4369	@ 0x1111
90009a6a:	4013      	ands	r3, r2
90009a6c:	2b00      	cmp	r3, #0
90009a6e:	d10f      	bne.n	90009a90 <HAL_TIM_PWM_DeInit+0x40>
90009a70:	687b      	ldr	r3, [r7, #4]
90009a72:	681b      	ldr	r3, [r3, #0]
90009a74:	6a1a      	ldr	r2, [r3, #32]
90009a76:	f240 4344 	movw	r3, #1092	@ 0x444
90009a7a:	4013      	ands	r3, r2
90009a7c:	2b00      	cmp	r3, #0
90009a7e:	d107      	bne.n	90009a90 <HAL_TIM_PWM_DeInit+0x40>
90009a80:	687b      	ldr	r3, [r7, #4]
90009a82:	681b      	ldr	r3, [r3, #0]
90009a84:	681a      	ldr	r2, [r3, #0]
90009a86:	687b      	ldr	r3, [r7, #4]
90009a88:	681b      	ldr	r3, [r3, #0]
90009a8a:	f022 0201 	bic.w	r2, r2, #1
90009a8e:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
90009a90:	6878      	ldr	r0, [r7, #4]
90009a92:	f000 f843 	bl	90009b1c <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
90009a96:	687b      	ldr	r3, [r7, #4]
90009a98:	2200      	movs	r2, #0
90009a9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009a9e:	687b      	ldr	r3, [r7, #4]
90009aa0:	2200      	movs	r2, #0
90009aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
90009aa6:	687b      	ldr	r3, [r7, #4]
90009aa8:	2200      	movs	r2, #0
90009aaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
90009aae:	687b      	ldr	r3, [r7, #4]
90009ab0:	2200      	movs	r2, #0
90009ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
90009ab6:	687b      	ldr	r3, [r7, #4]
90009ab8:	2200      	movs	r2, #0
90009aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009abe:	687b      	ldr	r3, [r7, #4]
90009ac0:	2200      	movs	r2, #0
90009ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
90009ac6:	687b      	ldr	r3, [r7, #4]
90009ac8:	2200      	movs	r2, #0
90009aca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009ace:	687b      	ldr	r3, [r7, #4]
90009ad0:	2200      	movs	r2, #0
90009ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
90009ad6:	687b      	ldr	r3, [r7, #4]
90009ad8:	2200      	movs	r2, #0
90009ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009ade:	687b      	ldr	r3, [r7, #4]
90009ae0:	2200      	movs	r2, #0
90009ae2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
90009ae6:	687b      	ldr	r3, [r7, #4]
90009ae8:	2200      	movs	r2, #0
90009aea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009aee:	687b      	ldr	r3, [r7, #4]
90009af0:	2200      	movs	r2, #0
90009af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
90009af6:	687b      	ldr	r3, [r7, #4]
90009af8:	2200      	movs	r2, #0
90009afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
90009afe:	2300      	movs	r3, #0
}
90009b00:	4618      	mov	r0, r3
90009b02:	3708      	adds	r7, #8
90009b04:	46bd      	mov	sp, r7
90009b06:	bd80      	pop	{r7, pc}

90009b08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90009b08:	b480      	push	{r7}
90009b0a:	b083      	sub	sp, #12
90009b0c:	af00      	add	r7, sp, #0
90009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009b10:	bf00      	nop
90009b12:	370c      	adds	r7, #12
90009b14:	46bd      	mov	sp, r7
90009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b1a:	4770      	bx	lr

90009b1c <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009b1c:	b480      	push	{r7}
90009b1e:	b083      	sub	sp, #12
90009b20:	af00      	add	r7, sp, #0
90009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009b24:	bf00      	nop
90009b26:	370c      	adds	r7, #12
90009b28:	46bd      	mov	sp, r7
90009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b2e:	4770      	bx	lr

90009b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009b30:	b480      	push	{r7}
90009b32:	b085      	sub	sp, #20
90009b34:	af00      	add	r7, sp, #0
90009b36:	6078      	str	r0, [r7, #4]
90009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009b3a:	687b      	ldr	r3, [r7, #4]
90009b3c:	681b      	ldr	r3, [r3, #0]
90009b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009b40:	687b      	ldr	r3, [r7, #4]
90009b42:	4a43      	ldr	r2, [pc, #268]	@ (90009c50 <TIM_Base_SetConfig+0x120>)
90009b44:	4293      	cmp	r3, r2
90009b46:	d013      	beq.n	90009b70 <TIM_Base_SetConfig+0x40>
90009b48:	687b      	ldr	r3, [r7, #4]
90009b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009b4e:	d00f      	beq.n	90009b70 <TIM_Base_SetConfig+0x40>
90009b50:	687b      	ldr	r3, [r7, #4]
90009b52:	4a40      	ldr	r2, [pc, #256]	@ (90009c54 <TIM_Base_SetConfig+0x124>)
90009b54:	4293      	cmp	r3, r2
90009b56:	d00b      	beq.n	90009b70 <TIM_Base_SetConfig+0x40>
90009b58:	687b      	ldr	r3, [r7, #4]
90009b5a:	4a3f      	ldr	r2, [pc, #252]	@ (90009c58 <TIM_Base_SetConfig+0x128>)
90009b5c:	4293      	cmp	r3, r2
90009b5e:	d007      	beq.n	90009b70 <TIM_Base_SetConfig+0x40>
90009b60:	687b      	ldr	r3, [r7, #4]
90009b62:	4a3e      	ldr	r2, [pc, #248]	@ (90009c5c <TIM_Base_SetConfig+0x12c>)
90009b64:	4293      	cmp	r3, r2
90009b66:	d003      	beq.n	90009b70 <TIM_Base_SetConfig+0x40>
90009b68:	687b      	ldr	r3, [r7, #4]
90009b6a:	4a3d      	ldr	r2, [pc, #244]	@ (90009c60 <TIM_Base_SetConfig+0x130>)
90009b6c:	4293      	cmp	r3, r2
90009b6e:	d108      	bne.n	90009b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90009b70:	68fb      	ldr	r3, [r7, #12]
90009b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
90009b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90009b78:	683b      	ldr	r3, [r7, #0]
90009b7a:	685b      	ldr	r3, [r3, #4]
90009b7c:	68fa      	ldr	r2, [r7, #12]
90009b7e:	4313      	orrs	r3, r2
90009b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90009b82:	687b      	ldr	r3, [r7, #4]
90009b84:	4a32      	ldr	r2, [pc, #200]	@ (90009c50 <TIM_Base_SetConfig+0x120>)
90009b86:	4293      	cmp	r3, r2
90009b88:	d01f      	beq.n	90009bca <TIM_Base_SetConfig+0x9a>
90009b8a:	687b      	ldr	r3, [r7, #4]
90009b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009b90:	d01b      	beq.n	90009bca <TIM_Base_SetConfig+0x9a>
90009b92:	687b      	ldr	r3, [r7, #4]
90009b94:	4a2f      	ldr	r2, [pc, #188]	@ (90009c54 <TIM_Base_SetConfig+0x124>)
90009b96:	4293      	cmp	r3, r2
90009b98:	d017      	beq.n	90009bca <TIM_Base_SetConfig+0x9a>
90009b9a:	687b      	ldr	r3, [r7, #4]
90009b9c:	4a2e      	ldr	r2, [pc, #184]	@ (90009c58 <TIM_Base_SetConfig+0x128>)
90009b9e:	4293      	cmp	r3, r2
90009ba0:	d013      	beq.n	90009bca <TIM_Base_SetConfig+0x9a>
90009ba2:	687b      	ldr	r3, [r7, #4]
90009ba4:	4a2d      	ldr	r2, [pc, #180]	@ (90009c5c <TIM_Base_SetConfig+0x12c>)
90009ba6:	4293      	cmp	r3, r2
90009ba8:	d00f      	beq.n	90009bca <TIM_Base_SetConfig+0x9a>
90009baa:	687b      	ldr	r3, [r7, #4]
90009bac:	4a2c      	ldr	r2, [pc, #176]	@ (90009c60 <TIM_Base_SetConfig+0x130>)
90009bae:	4293      	cmp	r3, r2
90009bb0:	d00b      	beq.n	90009bca <TIM_Base_SetConfig+0x9a>
90009bb2:	687b      	ldr	r3, [r7, #4]
90009bb4:	4a2b      	ldr	r2, [pc, #172]	@ (90009c64 <TIM_Base_SetConfig+0x134>)
90009bb6:	4293      	cmp	r3, r2
90009bb8:	d007      	beq.n	90009bca <TIM_Base_SetConfig+0x9a>
90009bba:	687b      	ldr	r3, [r7, #4]
90009bbc:	4a2a      	ldr	r2, [pc, #168]	@ (90009c68 <TIM_Base_SetConfig+0x138>)
90009bbe:	4293      	cmp	r3, r2
90009bc0:	d003      	beq.n	90009bca <TIM_Base_SetConfig+0x9a>
90009bc2:	687b      	ldr	r3, [r7, #4]
90009bc4:	4a29      	ldr	r2, [pc, #164]	@ (90009c6c <TIM_Base_SetConfig+0x13c>)
90009bc6:	4293      	cmp	r3, r2
90009bc8:	d108      	bne.n	90009bdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009bca:	68fb      	ldr	r3, [r7, #12]
90009bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90009bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90009bd2:	683b      	ldr	r3, [r7, #0]
90009bd4:	68db      	ldr	r3, [r3, #12]
90009bd6:	68fa      	ldr	r2, [r7, #12]
90009bd8:	4313      	orrs	r3, r2
90009bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009bdc:	68fb      	ldr	r3, [r7, #12]
90009bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
90009be2:	683b      	ldr	r3, [r7, #0]
90009be4:	695b      	ldr	r3, [r3, #20]
90009be6:	4313      	orrs	r3, r2
90009be8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009bea:	683b      	ldr	r3, [r7, #0]
90009bec:	689a      	ldr	r2, [r3, #8]
90009bee:	687b      	ldr	r3, [r7, #4]
90009bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90009bf2:	683b      	ldr	r3, [r7, #0]
90009bf4:	681a      	ldr	r2, [r3, #0]
90009bf6:	687b      	ldr	r3, [r7, #4]
90009bf8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009bfa:	687b      	ldr	r3, [r7, #4]
90009bfc:	4a14      	ldr	r2, [pc, #80]	@ (90009c50 <TIM_Base_SetConfig+0x120>)
90009bfe:	4293      	cmp	r3, r2
90009c00:	d00f      	beq.n	90009c22 <TIM_Base_SetConfig+0xf2>
90009c02:	687b      	ldr	r3, [r7, #4]
90009c04:	4a16      	ldr	r2, [pc, #88]	@ (90009c60 <TIM_Base_SetConfig+0x130>)
90009c06:	4293      	cmp	r3, r2
90009c08:	d00b      	beq.n	90009c22 <TIM_Base_SetConfig+0xf2>
90009c0a:	687b      	ldr	r3, [r7, #4]
90009c0c:	4a15      	ldr	r2, [pc, #84]	@ (90009c64 <TIM_Base_SetConfig+0x134>)
90009c0e:	4293      	cmp	r3, r2
90009c10:	d007      	beq.n	90009c22 <TIM_Base_SetConfig+0xf2>
90009c12:	687b      	ldr	r3, [r7, #4]
90009c14:	4a14      	ldr	r2, [pc, #80]	@ (90009c68 <TIM_Base_SetConfig+0x138>)
90009c16:	4293      	cmp	r3, r2
90009c18:	d003      	beq.n	90009c22 <TIM_Base_SetConfig+0xf2>
90009c1a:	687b      	ldr	r3, [r7, #4]
90009c1c:	4a13      	ldr	r2, [pc, #76]	@ (90009c6c <TIM_Base_SetConfig+0x13c>)
90009c1e:	4293      	cmp	r3, r2
90009c20:	d103      	bne.n	90009c2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90009c22:	683b      	ldr	r3, [r7, #0]
90009c24:	691a      	ldr	r2, [r3, #16]
90009c26:	687b      	ldr	r3, [r7, #4]
90009c28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009c2a:	687b      	ldr	r3, [r7, #4]
90009c2c:	681b      	ldr	r3, [r3, #0]
90009c2e:	f043 0204 	orr.w	r2, r3, #4
90009c32:	687b      	ldr	r3, [r7, #4]
90009c34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009c36:	687b      	ldr	r3, [r7, #4]
90009c38:	2201      	movs	r2, #1
90009c3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009c3c:	687b      	ldr	r3, [r7, #4]
90009c3e:	68fa      	ldr	r2, [r7, #12]
90009c40:	601a      	str	r2, [r3, #0]
}
90009c42:	bf00      	nop
90009c44:	3714      	adds	r7, #20
90009c46:	46bd      	mov	sp, r7
90009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
90009c4c:	4770      	bx	lr
90009c4e:	bf00      	nop
90009c50:	40010000 	.word	0x40010000
90009c54:	40000400 	.word	0x40000400
90009c58:	40000800 	.word	0x40000800
90009c5c:	40000c00 	.word	0x40000c00
90009c60:	40010400 	.word	0x40010400
90009c64:	40014000 	.word	0x40014000
90009c68:	40014400 	.word	0x40014400
90009c6c:	40014800 	.word	0x40014800

90009c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90009c70:	b580      	push	{r7, lr}
90009c72:	b082      	sub	sp, #8
90009c74:	af00      	add	r7, sp, #0
90009c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90009c78:	687b      	ldr	r3, [r7, #4]
90009c7a:	2b00      	cmp	r3, #0
90009c7c:	d101      	bne.n	90009c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90009c7e:	2301      	movs	r3, #1
90009c80:	e042      	b.n	90009d08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90009c82:	687b      	ldr	r3, [r7, #4]
90009c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009c88:	2b00      	cmp	r3, #0
90009c8a:	d106      	bne.n	90009c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90009c8c:	687b      	ldr	r3, [r7, #4]
90009c8e:	2200      	movs	r2, #0
90009c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90009c94:	6878      	ldr	r0, [r7, #4]
90009c96:	f7f6 ff2d 	bl	90000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90009c9a:	687b      	ldr	r3, [r7, #4]
90009c9c:	2224      	movs	r2, #36	@ 0x24
90009c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90009ca2:	687b      	ldr	r3, [r7, #4]
90009ca4:	681b      	ldr	r3, [r3, #0]
90009ca6:	681a      	ldr	r2, [r3, #0]
90009ca8:	687b      	ldr	r3, [r7, #4]
90009caa:	681b      	ldr	r3, [r3, #0]
90009cac:	f022 0201 	bic.w	r2, r2, #1
90009cb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90009cb2:	687b      	ldr	r3, [r7, #4]
90009cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009cb6:	2b00      	cmp	r3, #0
90009cb8:	d002      	beq.n	90009cc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009cba:	6878      	ldr	r0, [r7, #4]
90009cbc:	f000 fe1e 	bl	9000a8fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009cc0:	6878      	ldr	r0, [r7, #4]
90009cc2:	f000 f8b3 	bl	90009e2c <UART_SetConfig>
90009cc6:	4603      	mov	r3, r0
90009cc8:	2b01      	cmp	r3, #1
90009cca:	d101      	bne.n	90009cd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009ccc:	2301      	movs	r3, #1
90009cce:	e01b      	b.n	90009d08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009cd0:	687b      	ldr	r3, [r7, #4]
90009cd2:	681b      	ldr	r3, [r3, #0]
90009cd4:	685a      	ldr	r2, [r3, #4]
90009cd6:	687b      	ldr	r3, [r7, #4]
90009cd8:	681b      	ldr	r3, [r3, #0]
90009cda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009ce0:	687b      	ldr	r3, [r7, #4]
90009ce2:	681b      	ldr	r3, [r3, #0]
90009ce4:	689a      	ldr	r2, [r3, #8]
90009ce6:	687b      	ldr	r3, [r7, #4]
90009ce8:	681b      	ldr	r3, [r3, #0]
90009cea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009cf0:	687b      	ldr	r3, [r7, #4]
90009cf2:	681b      	ldr	r3, [r3, #0]
90009cf4:	681a      	ldr	r2, [r3, #0]
90009cf6:	687b      	ldr	r3, [r7, #4]
90009cf8:	681b      	ldr	r3, [r3, #0]
90009cfa:	f042 0201 	orr.w	r2, r2, #1
90009cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009d00:	6878      	ldr	r0, [r7, #4]
90009d02:	f000 fe9d 	bl	9000aa40 <UART_CheckIdleState>
90009d06:	4603      	mov	r3, r0
}
90009d08:	4618      	mov	r0, r3
90009d0a:	3708      	adds	r7, #8
90009d0c:	46bd      	mov	sp, r7
90009d0e:	bd80      	pop	{r7, pc}

90009d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009d10:	b580      	push	{r7, lr}
90009d12:	b08a      	sub	sp, #40	@ 0x28
90009d14:	af02      	add	r7, sp, #8
90009d16:	60f8      	str	r0, [r7, #12]
90009d18:	60b9      	str	r1, [r7, #8]
90009d1a:	603b      	str	r3, [r7, #0]
90009d1c:	4613      	mov	r3, r2
90009d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009d20:	68fb      	ldr	r3, [r7, #12]
90009d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009d26:	2b20      	cmp	r3, #32
90009d28:	d17b      	bne.n	90009e22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009d2a:	68bb      	ldr	r3, [r7, #8]
90009d2c:	2b00      	cmp	r3, #0
90009d2e:	d002      	beq.n	90009d36 <HAL_UART_Transmit+0x26>
90009d30:	88fb      	ldrh	r3, [r7, #6]
90009d32:	2b00      	cmp	r3, #0
90009d34:	d101      	bne.n	90009d3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90009d36:	2301      	movs	r3, #1
90009d38:	e074      	b.n	90009e24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009d3a:	68fb      	ldr	r3, [r7, #12]
90009d3c:	2200      	movs	r2, #0
90009d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90009d42:	68fb      	ldr	r3, [r7, #12]
90009d44:	2221      	movs	r2, #33	@ 0x21
90009d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009d4a:	f7f9 facd 	bl	900032e8 <HAL_GetTick>
90009d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009d50:	68fb      	ldr	r3, [r7, #12]
90009d52:	88fa      	ldrh	r2, [r7, #6]
90009d54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90009d58:	68fb      	ldr	r3, [r7, #12]
90009d5a:	88fa      	ldrh	r2, [r7, #6]
90009d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90009d60:	68fb      	ldr	r3, [r7, #12]
90009d62:	689b      	ldr	r3, [r3, #8]
90009d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009d68:	d108      	bne.n	90009d7c <HAL_UART_Transmit+0x6c>
90009d6a:	68fb      	ldr	r3, [r7, #12]
90009d6c:	691b      	ldr	r3, [r3, #16]
90009d6e:	2b00      	cmp	r3, #0
90009d70:	d104      	bne.n	90009d7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90009d72:	2300      	movs	r3, #0
90009d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90009d76:	68bb      	ldr	r3, [r7, #8]
90009d78:	61bb      	str	r3, [r7, #24]
90009d7a:	e003      	b.n	90009d84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90009d7c:	68bb      	ldr	r3, [r7, #8]
90009d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90009d80:	2300      	movs	r3, #0
90009d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90009d84:	e030      	b.n	90009de8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90009d86:	683b      	ldr	r3, [r7, #0]
90009d88:	9300      	str	r3, [sp, #0]
90009d8a:	697b      	ldr	r3, [r7, #20]
90009d8c:	2200      	movs	r2, #0
90009d8e:	2180      	movs	r1, #128	@ 0x80
90009d90:	68f8      	ldr	r0, [r7, #12]
90009d92:	f000 feff 	bl	9000ab94 <UART_WaitOnFlagUntilTimeout>
90009d96:	4603      	mov	r3, r0
90009d98:	2b00      	cmp	r3, #0
90009d9a:	d005      	beq.n	90009da8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90009d9c:	68fb      	ldr	r3, [r7, #12]
90009d9e:	2220      	movs	r2, #32
90009da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90009da4:	2303      	movs	r3, #3
90009da6:	e03d      	b.n	90009e24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90009da8:	69fb      	ldr	r3, [r7, #28]
90009daa:	2b00      	cmp	r3, #0
90009dac:	d10b      	bne.n	90009dc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90009dae:	69bb      	ldr	r3, [r7, #24]
90009db0:	881b      	ldrh	r3, [r3, #0]
90009db2:	461a      	mov	r2, r3
90009db4:	68fb      	ldr	r3, [r7, #12]
90009db6:	681b      	ldr	r3, [r3, #0]
90009db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009dbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009dbe:	69bb      	ldr	r3, [r7, #24]
90009dc0:	3302      	adds	r3, #2
90009dc2:	61bb      	str	r3, [r7, #24]
90009dc4:	e007      	b.n	90009dd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90009dc6:	69fb      	ldr	r3, [r7, #28]
90009dc8:	781a      	ldrb	r2, [r3, #0]
90009dca:	68fb      	ldr	r3, [r7, #12]
90009dcc:	681b      	ldr	r3, [r3, #0]
90009dce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009dd0:	69fb      	ldr	r3, [r7, #28]
90009dd2:	3301      	adds	r3, #1
90009dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90009dd6:	68fb      	ldr	r3, [r7, #12]
90009dd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009ddc:	b29b      	uxth	r3, r3
90009dde:	3b01      	subs	r3, #1
90009de0:	b29a      	uxth	r2, r3
90009de2:	68fb      	ldr	r3, [r7, #12]
90009de4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009de8:	68fb      	ldr	r3, [r7, #12]
90009dea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009dee:	b29b      	uxth	r3, r3
90009df0:	2b00      	cmp	r3, #0
90009df2:	d1c8      	bne.n	90009d86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90009df4:	683b      	ldr	r3, [r7, #0]
90009df6:	9300      	str	r3, [sp, #0]
90009df8:	697b      	ldr	r3, [r7, #20]
90009dfa:	2200      	movs	r2, #0
90009dfc:	2140      	movs	r1, #64	@ 0x40
90009dfe:	68f8      	ldr	r0, [r7, #12]
90009e00:	f000 fec8 	bl	9000ab94 <UART_WaitOnFlagUntilTimeout>
90009e04:	4603      	mov	r3, r0
90009e06:	2b00      	cmp	r3, #0
90009e08:	d005      	beq.n	90009e16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009e0a:	68fb      	ldr	r3, [r7, #12]
90009e0c:	2220      	movs	r2, #32
90009e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90009e12:	2303      	movs	r3, #3
90009e14:	e006      	b.n	90009e24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90009e16:	68fb      	ldr	r3, [r7, #12]
90009e18:	2220      	movs	r2, #32
90009e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009e1e:	2300      	movs	r3, #0
90009e20:	e000      	b.n	90009e24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90009e22:	2302      	movs	r3, #2
  }
}
90009e24:	4618      	mov	r0, r3
90009e26:	3720      	adds	r7, #32
90009e28:	46bd      	mov	sp, r7
90009e2a:	bd80      	pop	{r7, pc}

90009e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009e30:	b092      	sub	sp, #72	@ 0x48
90009e32:	af00      	add	r7, sp, #0
90009e34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90009e36:	2300      	movs	r3, #0
90009e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009e3c:	697b      	ldr	r3, [r7, #20]
90009e3e:	689a      	ldr	r2, [r3, #8]
90009e40:	697b      	ldr	r3, [r7, #20]
90009e42:	691b      	ldr	r3, [r3, #16]
90009e44:	431a      	orrs	r2, r3
90009e46:	697b      	ldr	r3, [r7, #20]
90009e48:	695b      	ldr	r3, [r3, #20]
90009e4a:	431a      	orrs	r2, r3
90009e4c:	697b      	ldr	r3, [r7, #20]
90009e4e:	69db      	ldr	r3, [r3, #28]
90009e50:	4313      	orrs	r3, r2
90009e52:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90009e54:	697b      	ldr	r3, [r7, #20]
90009e56:	681b      	ldr	r3, [r3, #0]
90009e58:	681a      	ldr	r2, [r3, #0]
90009e5a:	4bbe      	ldr	r3, [pc, #760]	@ (9000a154 <UART_SetConfig+0x328>)
90009e5c:	4013      	ands	r3, r2
90009e5e:	697a      	ldr	r2, [r7, #20]
90009e60:	6812      	ldr	r2, [r2, #0]
90009e62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009e64:	430b      	orrs	r3, r1
90009e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90009e68:	697b      	ldr	r3, [r7, #20]
90009e6a:	681b      	ldr	r3, [r3, #0]
90009e6c:	685b      	ldr	r3, [r3, #4]
90009e6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90009e72:	697b      	ldr	r3, [r7, #20]
90009e74:	68da      	ldr	r2, [r3, #12]
90009e76:	697b      	ldr	r3, [r7, #20]
90009e78:	681b      	ldr	r3, [r3, #0]
90009e7a:	430a      	orrs	r2, r1
90009e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009e7e:	697b      	ldr	r3, [r7, #20]
90009e80:	699b      	ldr	r3, [r3, #24]
90009e82:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009e84:	697b      	ldr	r3, [r7, #20]
90009e86:	681b      	ldr	r3, [r3, #0]
90009e88:	4ab3      	ldr	r2, [pc, #716]	@ (9000a158 <UART_SetConfig+0x32c>)
90009e8a:	4293      	cmp	r3, r2
90009e8c:	d004      	beq.n	90009e98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009e8e:	697b      	ldr	r3, [r7, #20]
90009e90:	6a1b      	ldr	r3, [r3, #32]
90009e92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009e94:	4313      	orrs	r3, r2
90009e96:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009e98:	697b      	ldr	r3, [r7, #20]
90009e9a:	681b      	ldr	r3, [r3, #0]
90009e9c:	689a      	ldr	r2, [r3, #8]
90009e9e:	4baf      	ldr	r3, [pc, #700]	@ (9000a15c <UART_SetConfig+0x330>)
90009ea0:	4013      	ands	r3, r2
90009ea2:	697a      	ldr	r2, [r7, #20]
90009ea4:	6812      	ldr	r2, [r2, #0]
90009ea6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009ea8:	430b      	orrs	r3, r1
90009eaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009eac:	697b      	ldr	r3, [r7, #20]
90009eae:	681b      	ldr	r3, [r3, #0]
90009eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009eb2:	f023 010f 	bic.w	r1, r3, #15
90009eb6:	697b      	ldr	r3, [r7, #20]
90009eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009eba:	697b      	ldr	r3, [r7, #20]
90009ebc:	681b      	ldr	r3, [r3, #0]
90009ebe:	430a      	orrs	r2, r1
90009ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009ec2:	697b      	ldr	r3, [r7, #20]
90009ec4:	681b      	ldr	r3, [r3, #0]
90009ec6:	4aa6      	ldr	r2, [pc, #664]	@ (9000a160 <UART_SetConfig+0x334>)
90009ec8:	4293      	cmp	r3, r2
90009eca:	d177      	bne.n	90009fbc <UART_SetConfig+0x190>
90009ecc:	4ba5      	ldr	r3, [pc, #660]	@ (9000a164 <UART_SetConfig+0x338>)
90009ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ed0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009ed4:	2b28      	cmp	r3, #40	@ 0x28
90009ed6:	d86d      	bhi.n	90009fb4 <UART_SetConfig+0x188>
90009ed8:	a201      	add	r2, pc, #4	@ (adr r2, 90009ee0 <UART_SetConfig+0xb4>)
90009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009ede:	bf00      	nop
90009ee0:	90009f85 	.word	0x90009f85
90009ee4:	90009fb5 	.word	0x90009fb5
90009ee8:	90009fb5 	.word	0x90009fb5
90009eec:	90009fb5 	.word	0x90009fb5
90009ef0:	90009fb5 	.word	0x90009fb5
90009ef4:	90009fb5 	.word	0x90009fb5
90009ef8:	90009fb5 	.word	0x90009fb5
90009efc:	90009fb5 	.word	0x90009fb5
90009f00:	90009f8d 	.word	0x90009f8d
90009f04:	90009fb5 	.word	0x90009fb5
90009f08:	90009fb5 	.word	0x90009fb5
90009f0c:	90009fb5 	.word	0x90009fb5
90009f10:	90009fb5 	.word	0x90009fb5
90009f14:	90009fb5 	.word	0x90009fb5
90009f18:	90009fb5 	.word	0x90009fb5
90009f1c:	90009fb5 	.word	0x90009fb5
90009f20:	90009f95 	.word	0x90009f95
90009f24:	90009fb5 	.word	0x90009fb5
90009f28:	90009fb5 	.word	0x90009fb5
90009f2c:	90009fb5 	.word	0x90009fb5
90009f30:	90009fb5 	.word	0x90009fb5
90009f34:	90009fb5 	.word	0x90009fb5
90009f38:	90009fb5 	.word	0x90009fb5
90009f3c:	90009fb5 	.word	0x90009fb5
90009f40:	90009f9d 	.word	0x90009f9d
90009f44:	90009fb5 	.word	0x90009fb5
90009f48:	90009fb5 	.word	0x90009fb5
90009f4c:	90009fb5 	.word	0x90009fb5
90009f50:	90009fb5 	.word	0x90009fb5
90009f54:	90009fb5 	.word	0x90009fb5
90009f58:	90009fb5 	.word	0x90009fb5
90009f5c:	90009fb5 	.word	0x90009fb5
90009f60:	90009fa5 	.word	0x90009fa5
90009f64:	90009fb5 	.word	0x90009fb5
90009f68:	90009fb5 	.word	0x90009fb5
90009f6c:	90009fb5 	.word	0x90009fb5
90009f70:	90009fb5 	.word	0x90009fb5
90009f74:	90009fb5 	.word	0x90009fb5
90009f78:	90009fb5 	.word	0x90009fb5
90009f7c:	90009fb5 	.word	0x90009fb5
90009f80:	90009fad 	.word	0x90009fad
90009f84:	2301      	movs	r3, #1
90009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f8a:	e222      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
90009f8c:	2304      	movs	r3, #4
90009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f92:	e21e      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
90009f94:	2308      	movs	r3, #8
90009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f9a:	e21a      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
90009f9c:	2310      	movs	r3, #16
90009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fa2:	e216      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
90009fa4:	2320      	movs	r3, #32
90009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009faa:	e212      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
90009fac:	2340      	movs	r3, #64	@ 0x40
90009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fb2:	e20e      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
90009fb4:	2380      	movs	r3, #128	@ 0x80
90009fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fba:	e20a      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
90009fbc:	697b      	ldr	r3, [r7, #20]
90009fbe:	681b      	ldr	r3, [r3, #0]
90009fc0:	4a69      	ldr	r2, [pc, #420]	@ (9000a168 <UART_SetConfig+0x33c>)
90009fc2:	4293      	cmp	r3, r2
90009fc4:	d130      	bne.n	9000a028 <UART_SetConfig+0x1fc>
90009fc6:	4b67      	ldr	r3, [pc, #412]	@ (9000a164 <UART_SetConfig+0x338>)
90009fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009fca:	f003 0307 	and.w	r3, r3, #7
90009fce:	2b05      	cmp	r3, #5
90009fd0:	d826      	bhi.n	9000a020 <UART_SetConfig+0x1f4>
90009fd2:	a201      	add	r2, pc, #4	@ (adr r2, 90009fd8 <UART_SetConfig+0x1ac>)
90009fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009fd8:	90009ff1 	.word	0x90009ff1
90009fdc:	90009ff9 	.word	0x90009ff9
90009fe0:	9000a001 	.word	0x9000a001
90009fe4:	9000a009 	.word	0x9000a009
90009fe8:	9000a011 	.word	0x9000a011
90009fec:	9000a019 	.word	0x9000a019
90009ff0:	2300      	movs	r3, #0
90009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ff6:	e1ec      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
90009ff8:	2304      	movs	r3, #4
90009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ffe:	e1e8      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a000:	2308      	movs	r3, #8
9000a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a006:	e1e4      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a008:	2310      	movs	r3, #16
9000a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a00e:	e1e0      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a010:	2320      	movs	r3, #32
9000a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a016:	e1dc      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a018:	2340      	movs	r3, #64	@ 0x40
9000a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a01e:	e1d8      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a020:	2380      	movs	r3, #128	@ 0x80
9000a022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a026:	e1d4      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a028:	697b      	ldr	r3, [r7, #20]
9000a02a:	681b      	ldr	r3, [r3, #0]
9000a02c:	4a4f      	ldr	r2, [pc, #316]	@ (9000a16c <UART_SetConfig+0x340>)
9000a02e:	4293      	cmp	r3, r2
9000a030:	d130      	bne.n	9000a094 <UART_SetConfig+0x268>
9000a032:	4b4c      	ldr	r3, [pc, #304]	@ (9000a164 <UART_SetConfig+0x338>)
9000a034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a036:	f003 0307 	and.w	r3, r3, #7
9000a03a:	2b05      	cmp	r3, #5
9000a03c:	d826      	bhi.n	9000a08c <UART_SetConfig+0x260>
9000a03e:	a201      	add	r2, pc, #4	@ (adr r2, 9000a044 <UART_SetConfig+0x218>)
9000a040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a044:	9000a05d 	.word	0x9000a05d
9000a048:	9000a065 	.word	0x9000a065
9000a04c:	9000a06d 	.word	0x9000a06d
9000a050:	9000a075 	.word	0x9000a075
9000a054:	9000a07d 	.word	0x9000a07d
9000a058:	9000a085 	.word	0x9000a085
9000a05c:	2300      	movs	r3, #0
9000a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a062:	e1b6      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a064:	2304      	movs	r3, #4
9000a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a06a:	e1b2      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a06c:	2308      	movs	r3, #8
9000a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a072:	e1ae      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a074:	2310      	movs	r3, #16
9000a076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a07a:	e1aa      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a07c:	2320      	movs	r3, #32
9000a07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a082:	e1a6      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a084:	2340      	movs	r3, #64	@ 0x40
9000a086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a08a:	e1a2      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a08c:	2380      	movs	r3, #128	@ 0x80
9000a08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a092:	e19e      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a094:	697b      	ldr	r3, [r7, #20]
9000a096:	681b      	ldr	r3, [r3, #0]
9000a098:	4a35      	ldr	r2, [pc, #212]	@ (9000a170 <UART_SetConfig+0x344>)
9000a09a:	4293      	cmp	r3, r2
9000a09c:	d130      	bne.n	9000a100 <UART_SetConfig+0x2d4>
9000a09e:	4b31      	ldr	r3, [pc, #196]	@ (9000a164 <UART_SetConfig+0x338>)
9000a0a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a0a2:	f003 0307 	and.w	r3, r3, #7
9000a0a6:	2b05      	cmp	r3, #5
9000a0a8:	d826      	bhi.n	9000a0f8 <UART_SetConfig+0x2cc>
9000a0aa:	a201      	add	r2, pc, #4	@ (adr r2, 9000a0b0 <UART_SetConfig+0x284>)
9000a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a0b0:	9000a0c9 	.word	0x9000a0c9
9000a0b4:	9000a0d1 	.word	0x9000a0d1
9000a0b8:	9000a0d9 	.word	0x9000a0d9
9000a0bc:	9000a0e1 	.word	0x9000a0e1
9000a0c0:	9000a0e9 	.word	0x9000a0e9
9000a0c4:	9000a0f1 	.word	0x9000a0f1
9000a0c8:	2300      	movs	r3, #0
9000a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ce:	e180      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a0d0:	2304      	movs	r3, #4
9000a0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0d6:	e17c      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a0d8:	2308      	movs	r3, #8
9000a0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0de:	e178      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a0e0:	2310      	movs	r3, #16
9000a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0e6:	e174      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a0e8:	2320      	movs	r3, #32
9000a0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0ee:	e170      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a0f0:	2340      	movs	r3, #64	@ 0x40
9000a0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0f6:	e16c      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a0f8:	2380      	movs	r3, #128	@ 0x80
9000a0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a0fe:	e168      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a100:	697b      	ldr	r3, [r7, #20]
9000a102:	681b      	ldr	r3, [r3, #0]
9000a104:	4a1b      	ldr	r2, [pc, #108]	@ (9000a174 <UART_SetConfig+0x348>)
9000a106:	4293      	cmp	r3, r2
9000a108:	d142      	bne.n	9000a190 <UART_SetConfig+0x364>
9000a10a:	4b16      	ldr	r3, [pc, #88]	@ (9000a164 <UART_SetConfig+0x338>)
9000a10c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a10e:	f003 0307 	and.w	r3, r3, #7
9000a112:	2b05      	cmp	r3, #5
9000a114:	d838      	bhi.n	9000a188 <UART_SetConfig+0x35c>
9000a116:	a201      	add	r2, pc, #4	@ (adr r2, 9000a11c <UART_SetConfig+0x2f0>)
9000a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a11c:	9000a135 	.word	0x9000a135
9000a120:	9000a13d 	.word	0x9000a13d
9000a124:	9000a145 	.word	0x9000a145
9000a128:	9000a14d 	.word	0x9000a14d
9000a12c:	9000a179 	.word	0x9000a179
9000a130:	9000a181 	.word	0x9000a181
9000a134:	2300      	movs	r3, #0
9000a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a13a:	e14a      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a13c:	2304      	movs	r3, #4
9000a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a142:	e146      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a144:	2308      	movs	r3, #8
9000a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a14a:	e142      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a14c:	2310      	movs	r3, #16
9000a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a152:	e13e      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a154:	cfff69f3 	.word	0xcfff69f3
9000a158:	58000c00 	.word	0x58000c00
9000a15c:	11fff4ff 	.word	0x11fff4ff
9000a160:	40011000 	.word	0x40011000
9000a164:	58024400 	.word	0x58024400
9000a168:	40004400 	.word	0x40004400
9000a16c:	40004800 	.word	0x40004800
9000a170:	40004c00 	.word	0x40004c00
9000a174:	40005000 	.word	0x40005000
9000a178:	2320      	movs	r3, #32
9000a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a17e:	e128      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a180:	2340      	movs	r3, #64	@ 0x40
9000a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a186:	e124      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a188:	2380      	movs	r3, #128	@ 0x80
9000a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a18e:	e120      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a190:	697b      	ldr	r3, [r7, #20]
9000a192:	681b      	ldr	r3, [r3, #0]
9000a194:	4acb      	ldr	r2, [pc, #812]	@ (9000a4c4 <UART_SetConfig+0x698>)
9000a196:	4293      	cmp	r3, r2
9000a198:	d176      	bne.n	9000a288 <UART_SetConfig+0x45c>
9000a19a:	4bcb      	ldr	r3, [pc, #812]	@ (9000a4c8 <UART_SetConfig+0x69c>)
9000a19c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a19e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000a1a2:	2b28      	cmp	r3, #40	@ 0x28
9000a1a4:	d86c      	bhi.n	9000a280 <UART_SetConfig+0x454>
9000a1a6:	a201      	add	r2, pc, #4	@ (adr r2, 9000a1ac <UART_SetConfig+0x380>)
9000a1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a1ac:	9000a251 	.word	0x9000a251
9000a1b0:	9000a281 	.word	0x9000a281
9000a1b4:	9000a281 	.word	0x9000a281
9000a1b8:	9000a281 	.word	0x9000a281
9000a1bc:	9000a281 	.word	0x9000a281
9000a1c0:	9000a281 	.word	0x9000a281
9000a1c4:	9000a281 	.word	0x9000a281
9000a1c8:	9000a281 	.word	0x9000a281
9000a1cc:	9000a259 	.word	0x9000a259
9000a1d0:	9000a281 	.word	0x9000a281
9000a1d4:	9000a281 	.word	0x9000a281
9000a1d8:	9000a281 	.word	0x9000a281
9000a1dc:	9000a281 	.word	0x9000a281
9000a1e0:	9000a281 	.word	0x9000a281
9000a1e4:	9000a281 	.word	0x9000a281
9000a1e8:	9000a281 	.word	0x9000a281
9000a1ec:	9000a261 	.word	0x9000a261
9000a1f0:	9000a281 	.word	0x9000a281
9000a1f4:	9000a281 	.word	0x9000a281
9000a1f8:	9000a281 	.word	0x9000a281
9000a1fc:	9000a281 	.word	0x9000a281
9000a200:	9000a281 	.word	0x9000a281
9000a204:	9000a281 	.word	0x9000a281
9000a208:	9000a281 	.word	0x9000a281
9000a20c:	9000a269 	.word	0x9000a269
9000a210:	9000a281 	.word	0x9000a281
9000a214:	9000a281 	.word	0x9000a281
9000a218:	9000a281 	.word	0x9000a281
9000a21c:	9000a281 	.word	0x9000a281
9000a220:	9000a281 	.word	0x9000a281
9000a224:	9000a281 	.word	0x9000a281
9000a228:	9000a281 	.word	0x9000a281
9000a22c:	9000a271 	.word	0x9000a271
9000a230:	9000a281 	.word	0x9000a281
9000a234:	9000a281 	.word	0x9000a281
9000a238:	9000a281 	.word	0x9000a281
9000a23c:	9000a281 	.word	0x9000a281
9000a240:	9000a281 	.word	0x9000a281
9000a244:	9000a281 	.word	0x9000a281
9000a248:	9000a281 	.word	0x9000a281
9000a24c:	9000a279 	.word	0x9000a279
9000a250:	2301      	movs	r3, #1
9000a252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a256:	e0bc      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a258:	2304      	movs	r3, #4
9000a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a25e:	e0b8      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a260:	2308      	movs	r3, #8
9000a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a266:	e0b4      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a268:	2310      	movs	r3, #16
9000a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a26e:	e0b0      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a270:	2320      	movs	r3, #32
9000a272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a276:	e0ac      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a278:	2340      	movs	r3, #64	@ 0x40
9000a27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a27e:	e0a8      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a280:	2380      	movs	r3, #128	@ 0x80
9000a282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a286:	e0a4      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a288:	697b      	ldr	r3, [r7, #20]
9000a28a:	681b      	ldr	r3, [r3, #0]
9000a28c:	4a8f      	ldr	r2, [pc, #572]	@ (9000a4cc <UART_SetConfig+0x6a0>)
9000a28e:	4293      	cmp	r3, r2
9000a290:	d130      	bne.n	9000a2f4 <UART_SetConfig+0x4c8>
9000a292:	4b8d      	ldr	r3, [pc, #564]	@ (9000a4c8 <UART_SetConfig+0x69c>)
9000a294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a296:	f003 0307 	and.w	r3, r3, #7
9000a29a:	2b05      	cmp	r3, #5
9000a29c:	d826      	bhi.n	9000a2ec <UART_SetConfig+0x4c0>
9000a29e:	a201      	add	r2, pc, #4	@ (adr r2, 9000a2a4 <UART_SetConfig+0x478>)
9000a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a2a4:	9000a2bd 	.word	0x9000a2bd
9000a2a8:	9000a2c5 	.word	0x9000a2c5
9000a2ac:	9000a2cd 	.word	0x9000a2cd
9000a2b0:	9000a2d5 	.word	0x9000a2d5
9000a2b4:	9000a2dd 	.word	0x9000a2dd
9000a2b8:	9000a2e5 	.word	0x9000a2e5
9000a2bc:	2300      	movs	r3, #0
9000a2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2c2:	e086      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a2c4:	2304      	movs	r3, #4
9000a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2ca:	e082      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a2cc:	2308      	movs	r3, #8
9000a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2d2:	e07e      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a2d4:	2310      	movs	r3, #16
9000a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2da:	e07a      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a2dc:	2320      	movs	r3, #32
9000a2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2e2:	e076      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a2e4:	2340      	movs	r3, #64	@ 0x40
9000a2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2ea:	e072      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a2ec:	2380      	movs	r3, #128	@ 0x80
9000a2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2f2:	e06e      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a2f4:	697b      	ldr	r3, [r7, #20]
9000a2f6:	681b      	ldr	r3, [r3, #0]
9000a2f8:	4a75      	ldr	r2, [pc, #468]	@ (9000a4d0 <UART_SetConfig+0x6a4>)
9000a2fa:	4293      	cmp	r3, r2
9000a2fc:	d130      	bne.n	9000a360 <UART_SetConfig+0x534>
9000a2fe:	4b72      	ldr	r3, [pc, #456]	@ (9000a4c8 <UART_SetConfig+0x69c>)
9000a300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a302:	f003 0307 	and.w	r3, r3, #7
9000a306:	2b05      	cmp	r3, #5
9000a308:	d826      	bhi.n	9000a358 <UART_SetConfig+0x52c>
9000a30a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a310 <UART_SetConfig+0x4e4>)
9000a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a310:	9000a329 	.word	0x9000a329
9000a314:	9000a331 	.word	0x9000a331
9000a318:	9000a339 	.word	0x9000a339
9000a31c:	9000a341 	.word	0x9000a341
9000a320:	9000a349 	.word	0x9000a349
9000a324:	9000a351 	.word	0x9000a351
9000a328:	2300      	movs	r3, #0
9000a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a32e:	e050      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a330:	2304      	movs	r3, #4
9000a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a336:	e04c      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a338:	2308      	movs	r3, #8
9000a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a33e:	e048      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a340:	2310      	movs	r3, #16
9000a342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a346:	e044      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a348:	2320      	movs	r3, #32
9000a34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a34e:	e040      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a350:	2340      	movs	r3, #64	@ 0x40
9000a352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a356:	e03c      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a358:	2380      	movs	r3, #128	@ 0x80
9000a35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a35e:	e038      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a360:	697b      	ldr	r3, [r7, #20]
9000a362:	681b      	ldr	r3, [r3, #0]
9000a364:	4a5b      	ldr	r2, [pc, #364]	@ (9000a4d4 <UART_SetConfig+0x6a8>)
9000a366:	4293      	cmp	r3, r2
9000a368:	d130      	bne.n	9000a3cc <UART_SetConfig+0x5a0>
9000a36a:	4b57      	ldr	r3, [pc, #348]	@ (9000a4c8 <UART_SetConfig+0x69c>)
9000a36c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a36e:	f003 0307 	and.w	r3, r3, #7
9000a372:	2b05      	cmp	r3, #5
9000a374:	d826      	bhi.n	9000a3c4 <UART_SetConfig+0x598>
9000a376:	a201      	add	r2, pc, #4	@ (adr r2, 9000a37c <UART_SetConfig+0x550>)
9000a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a37c:	9000a395 	.word	0x9000a395
9000a380:	9000a39d 	.word	0x9000a39d
9000a384:	9000a3a5 	.word	0x9000a3a5
9000a388:	9000a3ad 	.word	0x9000a3ad
9000a38c:	9000a3b5 	.word	0x9000a3b5
9000a390:	9000a3bd 	.word	0x9000a3bd
9000a394:	2302      	movs	r3, #2
9000a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a39a:	e01a      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a39c:	2304      	movs	r3, #4
9000a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3a2:	e016      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a3a4:	2308      	movs	r3, #8
9000a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3aa:	e012      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a3ac:	2310      	movs	r3, #16
9000a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3b2:	e00e      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a3b4:	2320      	movs	r3, #32
9000a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3ba:	e00a      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a3bc:	2340      	movs	r3, #64	@ 0x40
9000a3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3c2:	e006      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a3c4:	2380      	movs	r3, #128	@ 0x80
9000a3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a3ca:	e002      	b.n	9000a3d2 <UART_SetConfig+0x5a6>
9000a3cc:	2380      	movs	r3, #128	@ 0x80
9000a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000a3d2:	697b      	ldr	r3, [r7, #20]
9000a3d4:	681b      	ldr	r3, [r3, #0]
9000a3d6:	4a3f      	ldr	r2, [pc, #252]	@ (9000a4d4 <UART_SetConfig+0x6a8>)
9000a3d8:	4293      	cmp	r3, r2
9000a3da:	f040 80f8 	bne.w	9000a5ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000a3de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a3e2:	2b20      	cmp	r3, #32
9000a3e4:	dc46      	bgt.n	9000a474 <UART_SetConfig+0x648>
9000a3e6:	2b02      	cmp	r3, #2
9000a3e8:	f2c0 8082 	blt.w	9000a4f0 <UART_SetConfig+0x6c4>
9000a3ec:	3b02      	subs	r3, #2
9000a3ee:	2b1e      	cmp	r3, #30
9000a3f0:	d87e      	bhi.n	9000a4f0 <UART_SetConfig+0x6c4>
9000a3f2:	a201      	add	r2, pc, #4	@ (adr r2, 9000a3f8 <UART_SetConfig+0x5cc>)
9000a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a3f8:	9000a47b 	.word	0x9000a47b
9000a3fc:	9000a4f1 	.word	0x9000a4f1
9000a400:	9000a483 	.word	0x9000a483
9000a404:	9000a4f1 	.word	0x9000a4f1
9000a408:	9000a4f1 	.word	0x9000a4f1
9000a40c:	9000a4f1 	.word	0x9000a4f1
9000a410:	9000a493 	.word	0x9000a493
9000a414:	9000a4f1 	.word	0x9000a4f1
9000a418:	9000a4f1 	.word	0x9000a4f1
9000a41c:	9000a4f1 	.word	0x9000a4f1
9000a420:	9000a4f1 	.word	0x9000a4f1
9000a424:	9000a4f1 	.word	0x9000a4f1
9000a428:	9000a4f1 	.word	0x9000a4f1
9000a42c:	9000a4f1 	.word	0x9000a4f1
9000a430:	9000a4a3 	.word	0x9000a4a3
9000a434:	9000a4f1 	.word	0x9000a4f1
9000a438:	9000a4f1 	.word	0x9000a4f1
9000a43c:	9000a4f1 	.word	0x9000a4f1
9000a440:	9000a4f1 	.word	0x9000a4f1
9000a444:	9000a4f1 	.word	0x9000a4f1
9000a448:	9000a4f1 	.word	0x9000a4f1
9000a44c:	9000a4f1 	.word	0x9000a4f1
9000a450:	9000a4f1 	.word	0x9000a4f1
9000a454:	9000a4f1 	.word	0x9000a4f1
9000a458:	9000a4f1 	.word	0x9000a4f1
9000a45c:	9000a4f1 	.word	0x9000a4f1
9000a460:	9000a4f1 	.word	0x9000a4f1
9000a464:	9000a4f1 	.word	0x9000a4f1
9000a468:	9000a4f1 	.word	0x9000a4f1
9000a46c:	9000a4f1 	.word	0x9000a4f1
9000a470:	9000a4e3 	.word	0x9000a4e3
9000a474:	2b40      	cmp	r3, #64	@ 0x40
9000a476:	d037      	beq.n	9000a4e8 <UART_SetConfig+0x6bc>
9000a478:	e03a      	b.n	9000a4f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000a47a:	f7fe fdcd 	bl	90009018 <HAL_RCCEx_GetD3PCLK1Freq>
9000a47e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a480:	e03c      	b.n	9000a4fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a486:	4618      	mov	r0, r3
9000a488:	f7fe fddc 	bl	90009044 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a490:	e034      	b.n	9000a4fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a492:	f107 0318 	add.w	r3, r7, #24
9000a496:	4618      	mov	r0, r3
9000a498:	f7fe ff28 	bl	900092ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a49c:	69fb      	ldr	r3, [r7, #28]
9000a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4a0:	e02c      	b.n	9000a4fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a4a2:	4b09      	ldr	r3, [pc, #36]	@ (9000a4c8 <UART_SetConfig+0x69c>)
9000a4a4:	681b      	ldr	r3, [r3, #0]
9000a4a6:	f003 0320 	and.w	r3, r3, #32
9000a4aa:	2b00      	cmp	r3, #0
9000a4ac:	d016      	beq.n	9000a4dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a4ae:	4b06      	ldr	r3, [pc, #24]	@ (9000a4c8 <UART_SetConfig+0x69c>)
9000a4b0:	681b      	ldr	r3, [r3, #0]
9000a4b2:	08db      	lsrs	r3, r3, #3
9000a4b4:	f003 0303 	and.w	r3, r3, #3
9000a4b8:	4a07      	ldr	r2, [pc, #28]	@ (9000a4d8 <UART_SetConfig+0x6ac>)
9000a4ba:	fa22 f303 	lsr.w	r3, r2, r3
9000a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a4c0:	e01c      	b.n	9000a4fc <UART_SetConfig+0x6d0>
9000a4c2:	bf00      	nop
9000a4c4:	40011400 	.word	0x40011400
9000a4c8:	58024400 	.word	0x58024400
9000a4cc:	40007800 	.word	0x40007800
9000a4d0:	40007c00 	.word	0x40007c00
9000a4d4:	58000c00 	.word	0x58000c00
9000a4d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a4dc:	4b9d      	ldr	r3, [pc, #628]	@ (9000a754 <UART_SetConfig+0x928>)
9000a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4e0:	e00c      	b.n	9000a4fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a4e2:	4b9d      	ldr	r3, [pc, #628]	@ (9000a758 <UART_SetConfig+0x92c>)
9000a4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4e6:	e009      	b.n	9000a4fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a4e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a4ee:	e005      	b.n	9000a4fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a4f0:	2300      	movs	r3, #0
9000a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a4f4:	2301      	movs	r3, #1
9000a4f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a4fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a4fe:	2b00      	cmp	r3, #0
9000a500:	f000 81de 	beq.w	9000a8c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a504:	697b      	ldr	r3, [r7, #20]
9000a506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a508:	4a94      	ldr	r2, [pc, #592]	@ (9000a75c <UART_SetConfig+0x930>)
9000a50a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a50e:	461a      	mov	r2, r3
9000a510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a512:	fbb3 f3f2 	udiv	r3, r3, r2
9000a516:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a518:	697b      	ldr	r3, [r7, #20]
9000a51a:	685a      	ldr	r2, [r3, #4]
9000a51c:	4613      	mov	r3, r2
9000a51e:	005b      	lsls	r3, r3, #1
9000a520:	4413      	add	r3, r2
9000a522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a524:	429a      	cmp	r2, r3
9000a526:	d305      	bcc.n	9000a534 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a528:	697b      	ldr	r3, [r7, #20]
9000a52a:	685b      	ldr	r3, [r3, #4]
9000a52c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a52e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a530:	429a      	cmp	r2, r3
9000a532:	d903      	bls.n	9000a53c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a534:	2301      	movs	r3, #1
9000a536:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a53a:	e1c1      	b.n	9000a8c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a53e:	2200      	movs	r2, #0
9000a540:	60bb      	str	r3, [r7, #8]
9000a542:	60fa      	str	r2, [r7, #12]
9000a544:	697b      	ldr	r3, [r7, #20]
9000a546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a548:	4a84      	ldr	r2, [pc, #528]	@ (9000a75c <UART_SetConfig+0x930>)
9000a54a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a54e:	b29b      	uxth	r3, r3
9000a550:	2200      	movs	r2, #0
9000a552:	603b      	str	r3, [r7, #0]
9000a554:	607a      	str	r2, [r7, #4]
9000a556:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a55a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a55e:	f7f5 ff0f 	bl	90000380 <__aeabi_uldivmod>
9000a562:	4602      	mov	r2, r0
9000a564:	460b      	mov	r3, r1
9000a566:	4610      	mov	r0, r2
9000a568:	4619      	mov	r1, r3
9000a56a:	f04f 0200 	mov.w	r2, #0
9000a56e:	f04f 0300 	mov.w	r3, #0
9000a572:	020b      	lsls	r3, r1, #8
9000a574:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a578:	0202      	lsls	r2, r0, #8
9000a57a:	6979      	ldr	r1, [r7, #20]
9000a57c:	6849      	ldr	r1, [r1, #4]
9000a57e:	0849      	lsrs	r1, r1, #1
9000a580:	2000      	movs	r0, #0
9000a582:	460c      	mov	r4, r1
9000a584:	4605      	mov	r5, r0
9000a586:	eb12 0804 	adds.w	r8, r2, r4
9000a58a:	eb43 0905 	adc.w	r9, r3, r5
9000a58e:	697b      	ldr	r3, [r7, #20]
9000a590:	685b      	ldr	r3, [r3, #4]
9000a592:	2200      	movs	r2, #0
9000a594:	469a      	mov	sl, r3
9000a596:	4693      	mov	fp, r2
9000a598:	4652      	mov	r2, sl
9000a59a:	465b      	mov	r3, fp
9000a59c:	4640      	mov	r0, r8
9000a59e:	4649      	mov	r1, r9
9000a5a0:	f7f5 feee 	bl	90000380 <__aeabi_uldivmod>
9000a5a4:	4602      	mov	r2, r0
9000a5a6:	460b      	mov	r3, r1
9000a5a8:	4613      	mov	r3, r2
9000a5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a5ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a5b2:	d308      	bcc.n	9000a5c6 <UART_SetConfig+0x79a>
9000a5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a5b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a5ba:	d204      	bcs.n	9000a5c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a5bc:	697b      	ldr	r3, [r7, #20]
9000a5be:	681b      	ldr	r3, [r3, #0]
9000a5c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a5c2:	60da      	str	r2, [r3, #12]
9000a5c4:	e17c      	b.n	9000a8c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a5c6:	2301      	movs	r3, #1
9000a5c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a5cc:	e178      	b.n	9000a8c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a5ce:	697b      	ldr	r3, [r7, #20]
9000a5d0:	69db      	ldr	r3, [r3, #28]
9000a5d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a5d6:	f040 80c5 	bne.w	9000a764 <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a5da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a5de:	2b20      	cmp	r3, #32
9000a5e0:	dc48      	bgt.n	9000a674 <UART_SetConfig+0x848>
9000a5e2:	2b00      	cmp	r3, #0
9000a5e4:	db7b      	blt.n	9000a6de <UART_SetConfig+0x8b2>
9000a5e6:	2b20      	cmp	r3, #32
9000a5e8:	d879      	bhi.n	9000a6de <UART_SetConfig+0x8b2>
9000a5ea:	a201      	add	r2, pc, #4	@ (adr r2, 9000a5f0 <UART_SetConfig+0x7c4>)
9000a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a5f0:	9000a67b 	.word	0x9000a67b
9000a5f4:	9000a683 	.word	0x9000a683
9000a5f8:	9000a6df 	.word	0x9000a6df
9000a5fc:	9000a6df 	.word	0x9000a6df
9000a600:	9000a68b 	.word	0x9000a68b
9000a604:	9000a6df 	.word	0x9000a6df
9000a608:	9000a6df 	.word	0x9000a6df
9000a60c:	9000a6df 	.word	0x9000a6df
9000a610:	9000a69b 	.word	0x9000a69b
9000a614:	9000a6df 	.word	0x9000a6df
9000a618:	9000a6df 	.word	0x9000a6df
9000a61c:	9000a6df 	.word	0x9000a6df
9000a620:	9000a6df 	.word	0x9000a6df
9000a624:	9000a6df 	.word	0x9000a6df
9000a628:	9000a6df 	.word	0x9000a6df
9000a62c:	9000a6df 	.word	0x9000a6df
9000a630:	9000a6ab 	.word	0x9000a6ab
9000a634:	9000a6df 	.word	0x9000a6df
9000a638:	9000a6df 	.word	0x9000a6df
9000a63c:	9000a6df 	.word	0x9000a6df
9000a640:	9000a6df 	.word	0x9000a6df
9000a644:	9000a6df 	.word	0x9000a6df
9000a648:	9000a6df 	.word	0x9000a6df
9000a64c:	9000a6df 	.word	0x9000a6df
9000a650:	9000a6df 	.word	0x9000a6df
9000a654:	9000a6df 	.word	0x9000a6df
9000a658:	9000a6df 	.word	0x9000a6df
9000a65c:	9000a6df 	.word	0x9000a6df
9000a660:	9000a6df 	.word	0x9000a6df
9000a664:	9000a6df 	.word	0x9000a6df
9000a668:	9000a6df 	.word	0x9000a6df
9000a66c:	9000a6df 	.word	0x9000a6df
9000a670:	9000a6d1 	.word	0x9000a6d1
9000a674:	2b40      	cmp	r3, #64	@ 0x40
9000a676:	d02e      	beq.n	9000a6d6 <UART_SetConfig+0x8aa>
9000a678:	e031      	b.n	9000a6de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a67a:	f7fd fa97 	bl	90007bac <HAL_RCC_GetPCLK1Freq>
9000a67e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a680:	e033      	b.n	9000a6ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a682:	f7fd faa9 	bl	90007bd8 <HAL_RCC_GetPCLK2Freq>
9000a686:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a688:	e02f      	b.n	9000a6ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a68a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a68e:	4618      	mov	r0, r3
9000a690:	f7fe fcd8 	bl	90009044 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a698:	e027      	b.n	9000a6ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a69a:	f107 0318 	add.w	r3, r7, #24
9000a69e:	4618      	mov	r0, r3
9000a6a0:	f7fe fe24 	bl	900092ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a6a4:	69fb      	ldr	r3, [r7, #28]
9000a6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a6a8:	e01f      	b.n	9000a6ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a6aa:	4b2d      	ldr	r3, [pc, #180]	@ (9000a760 <UART_SetConfig+0x934>)
9000a6ac:	681b      	ldr	r3, [r3, #0]
9000a6ae:	f003 0320 	and.w	r3, r3, #32
9000a6b2:	2b00      	cmp	r3, #0
9000a6b4:	d009      	beq.n	9000a6ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a6b6:	4b2a      	ldr	r3, [pc, #168]	@ (9000a760 <UART_SetConfig+0x934>)
9000a6b8:	681b      	ldr	r3, [r3, #0]
9000a6ba:	08db      	lsrs	r3, r3, #3
9000a6bc:	f003 0303 	and.w	r3, r3, #3
9000a6c0:	4a24      	ldr	r2, [pc, #144]	@ (9000a754 <UART_SetConfig+0x928>)
9000a6c2:	fa22 f303 	lsr.w	r3, r2, r3
9000a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a6c8:	e00f      	b.n	9000a6ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a6ca:	4b22      	ldr	r3, [pc, #136]	@ (9000a754 <UART_SetConfig+0x928>)
9000a6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a6ce:	e00c      	b.n	9000a6ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a6d0:	4b21      	ldr	r3, [pc, #132]	@ (9000a758 <UART_SetConfig+0x92c>)
9000a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a6d4:	e009      	b.n	9000a6ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a6d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a6dc:	e005      	b.n	9000a6ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a6de:	2300      	movs	r3, #0
9000a6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a6e2:	2301      	movs	r3, #1
9000a6e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a6e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a6ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a6ec:	2b00      	cmp	r3, #0
9000a6ee:	f000 80e7 	beq.w	9000a8c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a6f2:	697b      	ldr	r3, [r7, #20]
9000a6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a6f6:	4a19      	ldr	r2, [pc, #100]	@ (9000a75c <UART_SetConfig+0x930>)
9000a6f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a6fc:	461a      	mov	r2, r3
9000a6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a700:	fbb3 f3f2 	udiv	r3, r3, r2
9000a704:	005a      	lsls	r2, r3, #1
9000a706:	697b      	ldr	r3, [r7, #20]
9000a708:	685b      	ldr	r3, [r3, #4]
9000a70a:	085b      	lsrs	r3, r3, #1
9000a70c:	441a      	add	r2, r3
9000a70e:	697b      	ldr	r3, [r7, #20]
9000a710:	685b      	ldr	r3, [r3, #4]
9000a712:	fbb2 f3f3 	udiv	r3, r2, r3
9000a716:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a71a:	2b0f      	cmp	r3, #15
9000a71c:	d916      	bls.n	9000a74c <UART_SetConfig+0x920>
9000a71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a724:	d212      	bcs.n	9000a74c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a728:	b29b      	uxth	r3, r3
9000a72a:	f023 030f 	bic.w	r3, r3, #15
9000a72e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a732:	085b      	lsrs	r3, r3, #1
9000a734:	b29b      	uxth	r3, r3
9000a736:	f003 0307 	and.w	r3, r3, #7
9000a73a:	b29a      	uxth	r2, r3
9000a73c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a73e:	4313      	orrs	r3, r2
9000a740:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a742:	697b      	ldr	r3, [r7, #20]
9000a744:	681b      	ldr	r3, [r3, #0]
9000a746:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a748:	60da      	str	r2, [r3, #12]
9000a74a:	e0b9      	b.n	9000a8c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a74c:	2301      	movs	r3, #1
9000a74e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a752:	e0b5      	b.n	9000a8c0 <UART_SetConfig+0xa94>
9000a754:	03d09000 	.word	0x03d09000
9000a758:	003d0900 	.word	0x003d0900
9000a75c:	9000d818 	.word	0x9000d818
9000a760:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a764:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a768:	2b20      	cmp	r3, #32
9000a76a:	dc49      	bgt.n	9000a800 <UART_SetConfig+0x9d4>
9000a76c:	2b00      	cmp	r3, #0
9000a76e:	db7c      	blt.n	9000a86a <UART_SetConfig+0xa3e>
9000a770:	2b20      	cmp	r3, #32
9000a772:	d87a      	bhi.n	9000a86a <UART_SetConfig+0xa3e>
9000a774:	a201      	add	r2, pc, #4	@ (adr r2, 9000a77c <UART_SetConfig+0x950>)
9000a776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a77a:	bf00      	nop
9000a77c:	9000a807 	.word	0x9000a807
9000a780:	9000a80f 	.word	0x9000a80f
9000a784:	9000a86b 	.word	0x9000a86b
9000a788:	9000a86b 	.word	0x9000a86b
9000a78c:	9000a817 	.word	0x9000a817
9000a790:	9000a86b 	.word	0x9000a86b
9000a794:	9000a86b 	.word	0x9000a86b
9000a798:	9000a86b 	.word	0x9000a86b
9000a79c:	9000a827 	.word	0x9000a827
9000a7a0:	9000a86b 	.word	0x9000a86b
9000a7a4:	9000a86b 	.word	0x9000a86b
9000a7a8:	9000a86b 	.word	0x9000a86b
9000a7ac:	9000a86b 	.word	0x9000a86b
9000a7b0:	9000a86b 	.word	0x9000a86b
9000a7b4:	9000a86b 	.word	0x9000a86b
9000a7b8:	9000a86b 	.word	0x9000a86b
9000a7bc:	9000a837 	.word	0x9000a837
9000a7c0:	9000a86b 	.word	0x9000a86b
9000a7c4:	9000a86b 	.word	0x9000a86b
9000a7c8:	9000a86b 	.word	0x9000a86b
9000a7cc:	9000a86b 	.word	0x9000a86b
9000a7d0:	9000a86b 	.word	0x9000a86b
9000a7d4:	9000a86b 	.word	0x9000a86b
9000a7d8:	9000a86b 	.word	0x9000a86b
9000a7dc:	9000a86b 	.word	0x9000a86b
9000a7e0:	9000a86b 	.word	0x9000a86b
9000a7e4:	9000a86b 	.word	0x9000a86b
9000a7e8:	9000a86b 	.word	0x9000a86b
9000a7ec:	9000a86b 	.word	0x9000a86b
9000a7f0:	9000a86b 	.word	0x9000a86b
9000a7f4:	9000a86b 	.word	0x9000a86b
9000a7f8:	9000a86b 	.word	0x9000a86b
9000a7fc:	9000a85d 	.word	0x9000a85d
9000a800:	2b40      	cmp	r3, #64	@ 0x40
9000a802:	d02e      	beq.n	9000a862 <UART_SetConfig+0xa36>
9000a804:	e031      	b.n	9000a86a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a806:	f7fd f9d1 	bl	90007bac <HAL_RCC_GetPCLK1Freq>
9000a80a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a80c:	e033      	b.n	9000a876 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a80e:	f7fd f9e3 	bl	90007bd8 <HAL_RCC_GetPCLK2Freq>
9000a812:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a814:	e02f      	b.n	9000a876 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a81a:	4618      	mov	r0, r3
9000a81c:	f7fe fc12 	bl	90009044 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a824:	e027      	b.n	9000a876 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a826:	f107 0318 	add.w	r3, r7, #24
9000a82a:	4618      	mov	r0, r3
9000a82c:	f7fe fd5e 	bl	900092ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a830:	69fb      	ldr	r3, [r7, #28]
9000a832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a834:	e01f      	b.n	9000a876 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a836:	4b2d      	ldr	r3, [pc, #180]	@ (9000a8ec <UART_SetConfig+0xac0>)
9000a838:	681b      	ldr	r3, [r3, #0]
9000a83a:	f003 0320 	and.w	r3, r3, #32
9000a83e:	2b00      	cmp	r3, #0
9000a840:	d009      	beq.n	9000a856 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a842:	4b2a      	ldr	r3, [pc, #168]	@ (9000a8ec <UART_SetConfig+0xac0>)
9000a844:	681b      	ldr	r3, [r3, #0]
9000a846:	08db      	lsrs	r3, r3, #3
9000a848:	f003 0303 	and.w	r3, r3, #3
9000a84c:	4a28      	ldr	r2, [pc, #160]	@ (9000a8f0 <UART_SetConfig+0xac4>)
9000a84e:	fa22 f303 	lsr.w	r3, r2, r3
9000a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a854:	e00f      	b.n	9000a876 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a856:	4b26      	ldr	r3, [pc, #152]	@ (9000a8f0 <UART_SetConfig+0xac4>)
9000a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a85a:	e00c      	b.n	9000a876 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a85c:	4b25      	ldr	r3, [pc, #148]	@ (9000a8f4 <UART_SetConfig+0xac8>)
9000a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a860:	e009      	b.n	9000a876 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a868:	e005      	b.n	9000a876 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a86a:	2300      	movs	r3, #0
9000a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a86e:	2301      	movs	r3, #1
9000a870:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a874:	bf00      	nop
    }

    if (pclk != 0U)
9000a876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a878:	2b00      	cmp	r3, #0
9000a87a:	d021      	beq.n	9000a8c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a87c:	697b      	ldr	r3, [r7, #20]
9000a87e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a880:	4a1d      	ldr	r2, [pc, #116]	@ (9000a8f8 <UART_SetConfig+0xacc>)
9000a882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a886:	461a      	mov	r2, r3
9000a888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a88a:	fbb3 f2f2 	udiv	r2, r3, r2
9000a88e:	697b      	ldr	r3, [r7, #20]
9000a890:	685b      	ldr	r3, [r3, #4]
9000a892:	085b      	lsrs	r3, r3, #1
9000a894:	441a      	add	r2, r3
9000a896:	697b      	ldr	r3, [r7, #20]
9000a898:	685b      	ldr	r3, [r3, #4]
9000a89a:	fbb2 f3f3 	udiv	r3, r2, r3
9000a89e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a8a2:	2b0f      	cmp	r3, #15
9000a8a4:	d909      	bls.n	9000a8ba <UART_SetConfig+0xa8e>
9000a8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a8a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a8ac:	d205      	bcs.n	9000a8ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a8b0:	b29a      	uxth	r2, r3
9000a8b2:	697b      	ldr	r3, [r7, #20]
9000a8b4:	681b      	ldr	r3, [r3, #0]
9000a8b6:	60da      	str	r2, [r3, #12]
9000a8b8:	e002      	b.n	9000a8c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a8ba:	2301      	movs	r3, #1
9000a8bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a8c0:	697b      	ldr	r3, [r7, #20]
9000a8c2:	2201      	movs	r2, #1
9000a8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a8c8:	697b      	ldr	r3, [r7, #20]
9000a8ca:	2201      	movs	r2, #1
9000a8cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a8d0:	697b      	ldr	r3, [r7, #20]
9000a8d2:	2200      	movs	r2, #0
9000a8d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a8d6:	697b      	ldr	r3, [r7, #20]
9000a8d8:	2200      	movs	r2, #0
9000a8da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a8dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a8e0:	4618      	mov	r0, r3
9000a8e2:	3748      	adds	r7, #72	@ 0x48
9000a8e4:	46bd      	mov	sp, r7
9000a8e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a8ea:	bf00      	nop
9000a8ec:	58024400 	.word	0x58024400
9000a8f0:	03d09000 	.word	0x03d09000
9000a8f4:	003d0900 	.word	0x003d0900
9000a8f8:	9000d818 	.word	0x9000d818

9000a8fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a8fc:	b480      	push	{r7}
9000a8fe:	b083      	sub	sp, #12
9000a900:	af00      	add	r7, sp, #0
9000a902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a904:	687b      	ldr	r3, [r7, #4]
9000a906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a908:	f003 0308 	and.w	r3, r3, #8
9000a90c:	2b00      	cmp	r3, #0
9000a90e:	d00a      	beq.n	9000a926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a910:	687b      	ldr	r3, [r7, #4]
9000a912:	681b      	ldr	r3, [r3, #0]
9000a914:	685b      	ldr	r3, [r3, #4]
9000a916:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a91a:	687b      	ldr	r3, [r7, #4]
9000a91c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a91e:	687b      	ldr	r3, [r7, #4]
9000a920:	681b      	ldr	r3, [r3, #0]
9000a922:	430a      	orrs	r2, r1
9000a924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a926:	687b      	ldr	r3, [r7, #4]
9000a928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a92a:	f003 0301 	and.w	r3, r3, #1
9000a92e:	2b00      	cmp	r3, #0
9000a930:	d00a      	beq.n	9000a948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a932:	687b      	ldr	r3, [r7, #4]
9000a934:	681b      	ldr	r3, [r3, #0]
9000a936:	685b      	ldr	r3, [r3, #4]
9000a938:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a93c:	687b      	ldr	r3, [r7, #4]
9000a93e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a940:	687b      	ldr	r3, [r7, #4]
9000a942:	681b      	ldr	r3, [r3, #0]
9000a944:	430a      	orrs	r2, r1
9000a946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a948:	687b      	ldr	r3, [r7, #4]
9000a94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a94c:	f003 0302 	and.w	r3, r3, #2
9000a950:	2b00      	cmp	r3, #0
9000a952:	d00a      	beq.n	9000a96a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a954:	687b      	ldr	r3, [r7, #4]
9000a956:	681b      	ldr	r3, [r3, #0]
9000a958:	685b      	ldr	r3, [r3, #4]
9000a95a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000a95e:	687b      	ldr	r3, [r7, #4]
9000a960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000a962:	687b      	ldr	r3, [r7, #4]
9000a964:	681b      	ldr	r3, [r3, #0]
9000a966:	430a      	orrs	r2, r1
9000a968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000a96a:	687b      	ldr	r3, [r7, #4]
9000a96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a96e:	f003 0304 	and.w	r3, r3, #4
9000a972:	2b00      	cmp	r3, #0
9000a974:	d00a      	beq.n	9000a98c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000a976:	687b      	ldr	r3, [r7, #4]
9000a978:	681b      	ldr	r3, [r3, #0]
9000a97a:	685b      	ldr	r3, [r3, #4]
9000a97c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000a980:	687b      	ldr	r3, [r7, #4]
9000a982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000a984:	687b      	ldr	r3, [r7, #4]
9000a986:	681b      	ldr	r3, [r3, #0]
9000a988:	430a      	orrs	r2, r1
9000a98a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000a98c:	687b      	ldr	r3, [r7, #4]
9000a98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a990:	f003 0310 	and.w	r3, r3, #16
9000a994:	2b00      	cmp	r3, #0
9000a996:	d00a      	beq.n	9000a9ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000a998:	687b      	ldr	r3, [r7, #4]
9000a99a:	681b      	ldr	r3, [r3, #0]
9000a99c:	689b      	ldr	r3, [r3, #8]
9000a99e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000a9a2:	687b      	ldr	r3, [r7, #4]
9000a9a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a9a6:	687b      	ldr	r3, [r7, #4]
9000a9a8:	681b      	ldr	r3, [r3, #0]
9000a9aa:	430a      	orrs	r2, r1
9000a9ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000a9ae:	687b      	ldr	r3, [r7, #4]
9000a9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a9b2:	f003 0320 	and.w	r3, r3, #32
9000a9b6:	2b00      	cmp	r3, #0
9000a9b8:	d00a      	beq.n	9000a9d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000a9ba:	687b      	ldr	r3, [r7, #4]
9000a9bc:	681b      	ldr	r3, [r3, #0]
9000a9be:	689b      	ldr	r3, [r3, #8]
9000a9c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000a9c4:	687b      	ldr	r3, [r7, #4]
9000a9c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000a9c8:	687b      	ldr	r3, [r7, #4]
9000a9ca:	681b      	ldr	r3, [r3, #0]
9000a9cc:	430a      	orrs	r2, r1
9000a9ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000a9d0:	687b      	ldr	r3, [r7, #4]
9000a9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a9d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a9d8:	2b00      	cmp	r3, #0
9000a9da:	d01a      	beq.n	9000aa12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000a9dc:	687b      	ldr	r3, [r7, #4]
9000a9de:	681b      	ldr	r3, [r3, #0]
9000a9e0:	685b      	ldr	r3, [r3, #4]
9000a9e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000a9e6:	687b      	ldr	r3, [r7, #4]
9000a9e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a9ea:	687b      	ldr	r3, [r7, #4]
9000a9ec:	681b      	ldr	r3, [r3, #0]
9000a9ee:	430a      	orrs	r2, r1
9000a9f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000a9f2:	687b      	ldr	r3, [r7, #4]
9000a9f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000a9f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a9fa:	d10a      	bne.n	9000aa12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000a9fc:	687b      	ldr	r3, [r7, #4]
9000a9fe:	681b      	ldr	r3, [r3, #0]
9000aa00:	685b      	ldr	r3, [r3, #4]
9000aa02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000aa06:	687b      	ldr	r3, [r7, #4]
9000aa08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000aa0a:	687b      	ldr	r3, [r7, #4]
9000aa0c:	681b      	ldr	r3, [r3, #0]
9000aa0e:	430a      	orrs	r2, r1
9000aa10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000aa12:	687b      	ldr	r3, [r7, #4]
9000aa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000aa16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000aa1a:	2b00      	cmp	r3, #0
9000aa1c:	d00a      	beq.n	9000aa34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000aa1e:	687b      	ldr	r3, [r7, #4]
9000aa20:	681b      	ldr	r3, [r3, #0]
9000aa22:	685b      	ldr	r3, [r3, #4]
9000aa24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000aa28:	687b      	ldr	r3, [r7, #4]
9000aa2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000aa2c:	687b      	ldr	r3, [r7, #4]
9000aa2e:	681b      	ldr	r3, [r3, #0]
9000aa30:	430a      	orrs	r2, r1
9000aa32:	605a      	str	r2, [r3, #4]
  }
}
9000aa34:	bf00      	nop
9000aa36:	370c      	adds	r7, #12
9000aa38:	46bd      	mov	sp, r7
9000aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aa3e:	4770      	bx	lr

9000aa40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000aa40:	b580      	push	{r7, lr}
9000aa42:	b098      	sub	sp, #96	@ 0x60
9000aa44:	af02      	add	r7, sp, #8
9000aa46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000aa48:	687b      	ldr	r3, [r7, #4]
9000aa4a:	2200      	movs	r2, #0
9000aa4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000aa50:	f7f8 fc4a 	bl	900032e8 <HAL_GetTick>
9000aa54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000aa56:	687b      	ldr	r3, [r7, #4]
9000aa58:	681b      	ldr	r3, [r3, #0]
9000aa5a:	681b      	ldr	r3, [r3, #0]
9000aa5c:	f003 0308 	and.w	r3, r3, #8
9000aa60:	2b08      	cmp	r3, #8
9000aa62:	d12f      	bne.n	9000aac4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000aa64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000aa68:	9300      	str	r3, [sp, #0]
9000aa6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000aa6c:	2200      	movs	r2, #0
9000aa6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000aa72:	6878      	ldr	r0, [r7, #4]
9000aa74:	f000 f88e 	bl	9000ab94 <UART_WaitOnFlagUntilTimeout>
9000aa78:	4603      	mov	r3, r0
9000aa7a:	2b00      	cmp	r3, #0
9000aa7c:	d022      	beq.n	9000aac4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000aa7e:	687b      	ldr	r3, [r7, #4]
9000aa80:	681b      	ldr	r3, [r3, #0]
9000aa82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000aa86:	e853 3f00 	ldrex	r3, [r3]
9000aa8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000aa8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000aa8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000aa92:	653b      	str	r3, [r7, #80]	@ 0x50
9000aa94:	687b      	ldr	r3, [r7, #4]
9000aa96:	681b      	ldr	r3, [r3, #0]
9000aa98:	461a      	mov	r2, r3
9000aa9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000aa9c:	647b      	str	r3, [r7, #68]	@ 0x44
9000aa9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aaa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000aaa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000aaa4:	e841 2300 	strex	r3, r2, [r1]
9000aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000aaaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000aaac:	2b00      	cmp	r3, #0
9000aaae:	d1e6      	bne.n	9000aa7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000aab0:	687b      	ldr	r3, [r7, #4]
9000aab2:	2220      	movs	r2, #32
9000aab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000aab8:	687b      	ldr	r3, [r7, #4]
9000aaba:	2200      	movs	r2, #0
9000aabc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000aac0:	2303      	movs	r3, #3
9000aac2:	e063      	b.n	9000ab8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000aac4:	687b      	ldr	r3, [r7, #4]
9000aac6:	681b      	ldr	r3, [r3, #0]
9000aac8:	681b      	ldr	r3, [r3, #0]
9000aaca:	f003 0304 	and.w	r3, r3, #4
9000aace:	2b04      	cmp	r3, #4
9000aad0:	d149      	bne.n	9000ab66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000aad2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000aad6:	9300      	str	r3, [sp, #0]
9000aad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000aada:	2200      	movs	r2, #0
9000aadc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000aae0:	6878      	ldr	r0, [r7, #4]
9000aae2:	f000 f857 	bl	9000ab94 <UART_WaitOnFlagUntilTimeout>
9000aae6:	4603      	mov	r3, r0
9000aae8:	2b00      	cmp	r3, #0
9000aaea:	d03c      	beq.n	9000ab66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000aaec:	687b      	ldr	r3, [r7, #4]
9000aaee:	681b      	ldr	r3, [r3, #0]
9000aaf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000aaf4:	e853 3f00 	ldrex	r3, [r3]
9000aaf8:	623b      	str	r3, [r7, #32]
   return(result);
9000aafa:	6a3b      	ldr	r3, [r7, #32]
9000aafc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000ab00:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000ab02:	687b      	ldr	r3, [r7, #4]
9000ab04:	681b      	ldr	r3, [r3, #0]
9000ab06:	461a      	mov	r2, r3
9000ab08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000ab0a:	633b      	str	r3, [r7, #48]	@ 0x30
9000ab0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ab0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000ab10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000ab12:	e841 2300 	strex	r3, r2, [r1]
9000ab16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000ab18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000ab1a:	2b00      	cmp	r3, #0
9000ab1c:	d1e6      	bne.n	9000aaec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000ab1e:	687b      	ldr	r3, [r7, #4]
9000ab20:	681b      	ldr	r3, [r3, #0]
9000ab22:	3308      	adds	r3, #8
9000ab24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ab26:	693b      	ldr	r3, [r7, #16]
9000ab28:	e853 3f00 	ldrex	r3, [r3]
9000ab2c:	60fb      	str	r3, [r7, #12]
   return(result);
9000ab2e:	68fb      	ldr	r3, [r7, #12]
9000ab30:	f023 0301 	bic.w	r3, r3, #1
9000ab34:	64bb      	str	r3, [r7, #72]	@ 0x48
9000ab36:	687b      	ldr	r3, [r7, #4]
9000ab38:	681b      	ldr	r3, [r3, #0]
9000ab3a:	3308      	adds	r3, #8
9000ab3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000ab3e:	61fa      	str	r2, [r7, #28]
9000ab40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ab42:	69b9      	ldr	r1, [r7, #24]
9000ab44:	69fa      	ldr	r2, [r7, #28]
9000ab46:	e841 2300 	strex	r3, r2, [r1]
9000ab4a:	617b      	str	r3, [r7, #20]
   return(result);
9000ab4c:	697b      	ldr	r3, [r7, #20]
9000ab4e:	2b00      	cmp	r3, #0
9000ab50:	d1e5      	bne.n	9000ab1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000ab52:	687b      	ldr	r3, [r7, #4]
9000ab54:	2220      	movs	r2, #32
9000ab56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000ab5a:	687b      	ldr	r3, [r7, #4]
9000ab5c:	2200      	movs	r2, #0
9000ab5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000ab62:	2303      	movs	r3, #3
9000ab64:	e012      	b.n	9000ab8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000ab66:	687b      	ldr	r3, [r7, #4]
9000ab68:	2220      	movs	r2, #32
9000ab6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000ab6e:	687b      	ldr	r3, [r7, #4]
9000ab70:	2220      	movs	r2, #32
9000ab72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ab76:	687b      	ldr	r3, [r7, #4]
9000ab78:	2200      	movs	r2, #0
9000ab7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000ab7c:	687b      	ldr	r3, [r7, #4]
9000ab7e:	2200      	movs	r2, #0
9000ab80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000ab82:	687b      	ldr	r3, [r7, #4]
9000ab84:	2200      	movs	r2, #0
9000ab86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ab8a:	2300      	movs	r3, #0
}
9000ab8c:	4618      	mov	r0, r3
9000ab8e:	3758      	adds	r7, #88	@ 0x58
9000ab90:	46bd      	mov	sp, r7
9000ab92:	bd80      	pop	{r7, pc}

9000ab94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000ab94:	b580      	push	{r7, lr}
9000ab96:	b084      	sub	sp, #16
9000ab98:	af00      	add	r7, sp, #0
9000ab9a:	60f8      	str	r0, [r7, #12]
9000ab9c:	60b9      	str	r1, [r7, #8]
9000ab9e:	603b      	str	r3, [r7, #0]
9000aba0:	4613      	mov	r3, r2
9000aba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000aba4:	e04f      	b.n	9000ac46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000aba6:	69bb      	ldr	r3, [r7, #24]
9000aba8:	f1b3 3fff 	cmp.w	r3, #4294967295
9000abac:	d04b      	beq.n	9000ac46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000abae:	f7f8 fb9b 	bl	900032e8 <HAL_GetTick>
9000abb2:	4602      	mov	r2, r0
9000abb4:	683b      	ldr	r3, [r7, #0]
9000abb6:	1ad3      	subs	r3, r2, r3
9000abb8:	69ba      	ldr	r2, [r7, #24]
9000abba:	429a      	cmp	r2, r3
9000abbc:	d302      	bcc.n	9000abc4 <UART_WaitOnFlagUntilTimeout+0x30>
9000abbe:	69bb      	ldr	r3, [r7, #24]
9000abc0:	2b00      	cmp	r3, #0
9000abc2:	d101      	bne.n	9000abc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000abc4:	2303      	movs	r3, #3
9000abc6:	e04e      	b.n	9000ac66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000abc8:	68fb      	ldr	r3, [r7, #12]
9000abca:	681b      	ldr	r3, [r3, #0]
9000abcc:	681b      	ldr	r3, [r3, #0]
9000abce:	f003 0304 	and.w	r3, r3, #4
9000abd2:	2b00      	cmp	r3, #0
9000abd4:	d037      	beq.n	9000ac46 <UART_WaitOnFlagUntilTimeout+0xb2>
9000abd6:	68bb      	ldr	r3, [r7, #8]
9000abd8:	2b80      	cmp	r3, #128	@ 0x80
9000abda:	d034      	beq.n	9000ac46 <UART_WaitOnFlagUntilTimeout+0xb2>
9000abdc:	68bb      	ldr	r3, [r7, #8]
9000abde:	2b40      	cmp	r3, #64	@ 0x40
9000abe0:	d031      	beq.n	9000ac46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000abe2:	68fb      	ldr	r3, [r7, #12]
9000abe4:	681b      	ldr	r3, [r3, #0]
9000abe6:	69db      	ldr	r3, [r3, #28]
9000abe8:	f003 0308 	and.w	r3, r3, #8
9000abec:	2b08      	cmp	r3, #8
9000abee:	d110      	bne.n	9000ac12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000abf0:	68fb      	ldr	r3, [r7, #12]
9000abf2:	681b      	ldr	r3, [r3, #0]
9000abf4:	2208      	movs	r2, #8
9000abf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000abf8:	68f8      	ldr	r0, [r7, #12]
9000abfa:	f000 f839 	bl	9000ac70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000abfe:	68fb      	ldr	r3, [r7, #12]
9000ac00:	2208      	movs	r2, #8
9000ac02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000ac06:	68fb      	ldr	r3, [r7, #12]
9000ac08:	2200      	movs	r2, #0
9000ac0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000ac0e:	2301      	movs	r3, #1
9000ac10:	e029      	b.n	9000ac66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000ac12:	68fb      	ldr	r3, [r7, #12]
9000ac14:	681b      	ldr	r3, [r3, #0]
9000ac16:	69db      	ldr	r3, [r3, #28]
9000ac18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000ac1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000ac20:	d111      	bne.n	9000ac46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000ac22:	68fb      	ldr	r3, [r7, #12]
9000ac24:	681b      	ldr	r3, [r3, #0]
9000ac26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000ac2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000ac2c:	68f8      	ldr	r0, [r7, #12]
9000ac2e:	f000 f81f 	bl	9000ac70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000ac32:	68fb      	ldr	r3, [r7, #12]
9000ac34:	2220      	movs	r2, #32
9000ac36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000ac3a:	68fb      	ldr	r3, [r7, #12]
9000ac3c:	2200      	movs	r2, #0
9000ac3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000ac42:	2303      	movs	r3, #3
9000ac44:	e00f      	b.n	9000ac66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000ac46:	68fb      	ldr	r3, [r7, #12]
9000ac48:	681b      	ldr	r3, [r3, #0]
9000ac4a:	69da      	ldr	r2, [r3, #28]
9000ac4c:	68bb      	ldr	r3, [r7, #8]
9000ac4e:	4013      	ands	r3, r2
9000ac50:	68ba      	ldr	r2, [r7, #8]
9000ac52:	429a      	cmp	r2, r3
9000ac54:	bf0c      	ite	eq
9000ac56:	2301      	moveq	r3, #1
9000ac58:	2300      	movne	r3, #0
9000ac5a:	b2db      	uxtb	r3, r3
9000ac5c:	461a      	mov	r2, r3
9000ac5e:	79fb      	ldrb	r3, [r7, #7]
9000ac60:	429a      	cmp	r2, r3
9000ac62:	d0a0      	beq.n	9000aba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000ac64:	2300      	movs	r3, #0
}
9000ac66:	4618      	mov	r0, r3
9000ac68:	3710      	adds	r7, #16
9000ac6a:	46bd      	mov	sp, r7
9000ac6c:	bd80      	pop	{r7, pc}
	...

9000ac70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000ac70:	b480      	push	{r7}
9000ac72:	b095      	sub	sp, #84	@ 0x54
9000ac74:	af00      	add	r7, sp, #0
9000ac76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000ac78:	687b      	ldr	r3, [r7, #4]
9000ac7a:	681b      	ldr	r3, [r3, #0]
9000ac7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ac7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000ac80:	e853 3f00 	ldrex	r3, [r3]
9000ac84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000ac86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000ac88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000ac8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000ac8e:	687b      	ldr	r3, [r7, #4]
9000ac90:	681b      	ldr	r3, [r3, #0]
9000ac92:	461a      	mov	r2, r3
9000ac94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000ac96:	643b      	str	r3, [r7, #64]	@ 0x40
9000ac98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ac9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000ac9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000ac9e:	e841 2300 	strex	r3, r2, [r1]
9000aca2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000aca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000aca6:	2b00      	cmp	r3, #0
9000aca8:	d1e6      	bne.n	9000ac78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000acaa:	687b      	ldr	r3, [r7, #4]
9000acac:	681b      	ldr	r3, [r3, #0]
9000acae:	3308      	adds	r3, #8
9000acb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000acb2:	6a3b      	ldr	r3, [r7, #32]
9000acb4:	e853 3f00 	ldrex	r3, [r3]
9000acb8:	61fb      	str	r3, [r7, #28]
   return(result);
9000acba:	69fa      	ldr	r2, [r7, #28]
9000acbc:	4b1e      	ldr	r3, [pc, #120]	@ (9000ad38 <UART_EndRxTransfer+0xc8>)
9000acbe:	4013      	ands	r3, r2
9000acc0:	64bb      	str	r3, [r7, #72]	@ 0x48
9000acc2:	687b      	ldr	r3, [r7, #4]
9000acc4:	681b      	ldr	r3, [r3, #0]
9000acc6:	3308      	adds	r3, #8
9000acc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000acca:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000accc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000acce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000acd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000acd2:	e841 2300 	strex	r3, r2, [r1]
9000acd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000acda:	2b00      	cmp	r3, #0
9000acdc:	d1e5      	bne.n	9000acaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000acde:	687b      	ldr	r3, [r7, #4]
9000ace0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000ace2:	2b01      	cmp	r3, #1
9000ace4:	d118      	bne.n	9000ad18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000ace6:	687b      	ldr	r3, [r7, #4]
9000ace8:	681b      	ldr	r3, [r3, #0]
9000acea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000acec:	68fb      	ldr	r3, [r7, #12]
9000acee:	e853 3f00 	ldrex	r3, [r3]
9000acf2:	60bb      	str	r3, [r7, #8]
   return(result);
9000acf4:	68bb      	ldr	r3, [r7, #8]
9000acf6:	f023 0310 	bic.w	r3, r3, #16
9000acfa:	647b      	str	r3, [r7, #68]	@ 0x44
9000acfc:	687b      	ldr	r3, [r7, #4]
9000acfe:	681b      	ldr	r3, [r3, #0]
9000ad00:	461a      	mov	r2, r3
9000ad02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000ad04:	61bb      	str	r3, [r7, #24]
9000ad06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ad08:	6979      	ldr	r1, [r7, #20]
9000ad0a:	69ba      	ldr	r2, [r7, #24]
9000ad0c:	e841 2300 	strex	r3, r2, [r1]
9000ad10:	613b      	str	r3, [r7, #16]
   return(result);
9000ad12:	693b      	ldr	r3, [r7, #16]
9000ad14:	2b00      	cmp	r3, #0
9000ad16:	d1e6      	bne.n	9000ace6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000ad18:	687b      	ldr	r3, [r7, #4]
9000ad1a:	2220      	movs	r2, #32
9000ad1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ad20:	687b      	ldr	r3, [r7, #4]
9000ad22:	2200      	movs	r2, #0
9000ad24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000ad26:	687b      	ldr	r3, [r7, #4]
9000ad28:	2200      	movs	r2, #0
9000ad2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000ad2c:	bf00      	nop
9000ad2e:	3754      	adds	r7, #84	@ 0x54
9000ad30:	46bd      	mov	sp, r7
9000ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ad36:	4770      	bx	lr
9000ad38:	effffffe 	.word	0xeffffffe

9000ad3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000ad3c:	b480      	push	{r7}
9000ad3e:	b085      	sub	sp, #20
9000ad40:	af00      	add	r7, sp, #0
9000ad42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ad44:	687b      	ldr	r3, [r7, #4]
9000ad46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ad4a:	2b01      	cmp	r3, #1
9000ad4c:	d101      	bne.n	9000ad52 <HAL_UARTEx_DisableFifoMode+0x16>
9000ad4e:	2302      	movs	r3, #2
9000ad50:	e027      	b.n	9000ada2 <HAL_UARTEx_DisableFifoMode+0x66>
9000ad52:	687b      	ldr	r3, [r7, #4]
9000ad54:	2201      	movs	r2, #1
9000ad56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ad5a:	687b      	ldr	r3, [r7, #4]
9000ad5c:	2224      	movs	r2, #36	@ 0x24
9000ad5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ad62:	687b      	ldr	r3, [r7, #4]
9000ad64:	681b      	ldr	r3, [r3, #0]
9000ad66:	681b      	ldr	r3, [r3, #0]
9000ad68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ad6a:	687b      	ldr	r3, [r7, #4]
9000ad6c:	681b      	ldr	r3, [r3, #0]
9000ad6e:	681a      	ldr	r2, [r3, #0]
9000ad70:	687b      	ldr	r3, [r7, #4]
9000ad72:	681b      	ldr	r3, [r3, #0]
9000ad74:	f022 0201 	bic.w	r2, r2, #1
9000ad78:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000ad7a:	68fb      	ldr	r3, [r7, #12]
9000ad7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000ad80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000ad82:	687b      	ldr	r3, [r7, #4]
9000ad84:	2200      	movs	r2, #0
9000ad86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ad88:	687b      	ldr	r3, [r7, #4]
9000ad8a:	681b      	ldr	r3, [r3, #0]
9000ad8c:	68fa      	ldr	r2, [r7, #12]
9000ad8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ad90:	687b      	ldr	r3, [r7, #4]
9000ad92:	2220      	movs	r2, #32
9000ad94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ad98:	687b      	ldr	r3, [r7, #4]
9000ad9a:	2200      	movs	r2, #0
9000ad9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ada0:	2300      	movs	r3, #0
}
9000ada2:	4618      	mov	r0, r3
9000ada4:	3714      	adds	r7, #20
9000ada6:	46bd      	mov	sp, r7
9000ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000adac:	4770      	bx	lr

9000adae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000adae:	b580      	push	{r7, lr}
9000adb0:	b084      	sub	sp, #16
9000adb2:	af00      	add	r7, sp, #0
9000adb4:	6078      	str	r0, [r7, #4]
9000adb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000adb8:	687b      	ldr	r3, [r7, #4]
9000adba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000adbe:	2b01      	cmp	r3, #1
9000adc0:	d101      	bne.n	9000adc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000adc2:	2302      	movs	r3, #2
9000adc4:	e02d      	b.n	9000ae22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000adc6:	687b      	ldr	r3, [r7, #4]
9000adc8:	2201      	movs	r2, #1
9000adca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000adce:	687b      	ldr	r3, [r7, #4]
9000add0:	2224      	movs	r2, #36	@ 0x24
9000add2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000add6:	687b      	ldr	r3, [r7, #4]
9000add8:	681b      	ldr	r3, [r3, #0]
9000adda:	681b      	ldr	r3, [r3, #0]
9000addc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000adde:	687b      	ldr	r3, [r7, #4]
9000ade0:	681b      	ldr	r3, [r3, #0]
9000ade2:	681a      	ldr	r2, [r3, #0]
9000ade4:	687b      	ldr	r3, [r7, #4]
9000ade6:	681b      	ldr	r3, [r3, #0]
9000ade8:	f022 0201 	bic.w	r2, r2, #1
9000adec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000adee:	687b      	ldr	r3, [r7, #4]
9000adf0:	681b      	ldr	r3, [r3, #0]
9000adf2:	689b      	ldr	r3, [r3, #8]
9000adf4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000adf8:	687b      	ldr	r3, [r7, #4]
9000adfa:	681b      	ldr	r3, [r3, #0]
9000adfc:	683a      	ldr	r2, [r7, #0]
9000adfe:	430a      	orrs	r2, r1
9000ae00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ae02:	6878      	ldr	r0, [r7, #4]
9000ae04:	f000 f850 	bl	9000aea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ae08:	687b      	ldr	r3, [r7, #4]
9000ae0a:	681b      	ldr	r3, [r3, #0]
9000ae0c:	68fa      	ldr	r2, [r7, #12]
9000ae0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ae10:	687b      	ldr	r3, [r7, #4]
9000ae12:	2220      	movs	r2, #32
9000ae14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ae18:	687b      	ldr	r3, [r7, #4]
9000ae1a:	2200      	movs	r2, #0
9000ae1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ae20:	2300      	movs	r3, #0
}
9000ae22:	4618      	mov	r0, r3
9000ae24:	3710      	adds	r7, #16
9000ae26:	46bd      	mov	sp, r7
9000ae28:	bd80      	pop	{r7, pc}

9000ae2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ae2a:	b580      	push	{r7, lr}
9000ae2c:	b084      	sub	sp, #16
9000ae2e:	af00      	add	r7, sp, #0
9000ae30:	6078      	str	r0, [r7, #4]
9000ae32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ae34:	687b      	ldr	r3, [r7, #4]
9000ae36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ae3a:	2b01      	cmp	r3, #1
9000ae3c:	d101      	bne.n	9000ae42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000ae3e:	2302      	movs	r3, #2
9000ae40:	e02d      	b.n	9000ae9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000ae42:	687b      	ldr	r3, [r7, #4]
9000ae44:	2201      	movs	r2, #1
9000ae46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ae4a:	687b      	ldr	r3, [r7, #4]
9000ae4c:	2224      	movs	r2, #36	@ 0x24
9000ae4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ae52:	687b      	ldr	r3, [r7, #4]
9000ae54:	681b      	ldr	r3, [r3, #0]
9000ae56:	681b      	ldr	r3, [r3, #0]
9000ae58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ae5a:	687b      	ldr	r3, [r7, #4]
9000ae5c:	681b      	ldr	r3, [r3, #0]
9000ae5e:	681a      	ldr	r2, [r3, #0]
9000ae60:	687b      	ldr	r3, [r7, #4]
9000ae62:	681b      	ldr	r3, [r3, #0]
9000ae64:	f022 0201 	bic.w	r2, r2, #1
9000ae68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000ae6a:	687b      	ldr	r3, [r7, #4]
9000ae6c:	681b      	ldr	r3, [r3, #0]
9000ae6e:	689b      	ldr	r3, [r3, #8]
9000ae70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000ae74:	687b      	ldr	r3, [r7, #4]
9000ae76:	681b      	ldr	r3, [r3, #0]
9000ae78:	683a      	ldr	r2, [r7, #0]
9000ae7a:	430a      	orrs	r2, r1
9000ae7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ae7e:	6878      	ldr	r0, [r7, #4]
9000ae80:	f000 f812 	bl	9000aea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ae84:	687b      	ldr	r3, [r7, #4]
9000ae86:	681b      	ldr	r3, [r3, #0]
9000ae88:	68fa      	ldr	r2, [r7, #12]
9000ae8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ae8c:	687b      	ldr	r3, [r7, #4]
9000ae8e:	2220      	movs	r2, #32
9000ae90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ae94:	687b      	ldr	r3, [r7, #4]
9000ae96:	2200      	movs	r2, #0
9000ae98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ae9c:	2300      	movs	r3, #0
}
9000ae9e:	4618      	mov	r0, r3
9000aea0:	3710      	adds	r7, #16
9000aea2:	46bd      	mov	sp, r7
9000aea4:	bd80      	pop	{r7, pc}
	...

9000aea8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000aea8:	b480      	push	{r7}
9000aeaa:	b085      	sub	sp, #20
9000aeac:	af00      	add	r7, sp, #0
9000aeae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000aeb0:	687b      	ldr	r3, [r7, #4]
9000aeb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000aeb4:	2b00      	cmp	r3, #0
9000aeb6:	d108      	bne.n	9000aeca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000aeb8:	687b      	ldr	r3, [r7, #4]
9000aeba:	2201      	movs	r2, #1
9000aebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000aec0:	687b      	ldr	r3, [r7, #4]
9000aec2:	2201      	movs	r2, #1
9000aec4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000aec8:	e031      	b.n	9000af2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000aeca:	2310      	movs	r3, #16
9000aecc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000aece:	2310      	movs	r3, #16
9000aed0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000aed2:	687b      	ldr	r3, [r7, #4]
9000aed4:	681b      	ldr	r3, [r3, #0]
9000aed6:	689b      	ldr	r3, [r3, #8]
9000aed8:	0e5b      	lsrs	r3, r3, #25
9000aeda:	b2db      	uxtb	r3, r3
9000aedc:	f003 0307 	and.w	r3, r3, #7
9000aee0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000aee2:	687b      	ldr	r3, [r7, #4]
9000aee4:	681b      	ldr	r3, [r3, #0]
9000aee6:	689b      	ldr	r3, [r3, #8]
9000aee8:	0f5b      	lsrs	r3, r3, #29
9000aeea:	b2db      	uxtb	r3, r3
9000aeec:	f003 0307 	and.w	r3, r3, #7
9000aef0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000aef2:	7bbb      	ldrb	r3, [r7, #14]
9000aef4:	7b3a      	ldrb	r2, [r7, #12]
9000aef6:	4911      	ldr	r1, [pc, #68]	@ (9000af3c <UARTEx_SetNbDataToProcess+0x94>)
9000aef8:	5c8a      	ldrb	r2, [r1, r2]
9000aefa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000aefe:	7b3a      	ldrb	r2, [r7, #12]
9000af00:	490f      	ldr	r1, [pc, #60]	@ (9000af40 <UARTEx_SetNbDataToProcess+0x98>)
9000af02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000af04:	fb93 f3f2 	sdiv	r3, r3, r2
9000af08:	b29a      	uxth	r2, r3
9000af0a:	687b      	ldr	r3, [r7, #4]
9000af0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000af10:	7bfb      	ldrb	r3, [r7, #15]
9000af12:	7b7a      	ldrb	r2, [r7, #13]
9000af14:	4909      	ldr	r1, [pc, #36]	@ (9000af3c <UARTEx_SetNbDataToProcess+0x94>)
9000af16:	5c8a      	ldrb	r2, [r1, r2]
9000af18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000af1c:	7b7a      	ldrb	r2, [r7, #13]
9000af1e:	4908      	ldr	r1, [pc, #32]	@ (9000af40 <UARTEx_SetNbDataToProcess+0x98>)
9000af20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000af22:	fb93 f3f2 	sdiv	r3, r3, r2
9000af26:	b29a      	uxth	r2, r3
9000af28:	687b      	ldr	r3, [r7, #4]
9000af2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000af2e:	bf00      	nop
9000af30:	3714      	adds	r7, #20
9000af32:	46bd      	mov	sp, r7
9000af34:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af38:	4770      	bx	lr
9000af3a:	bf00      	nop
9000af3c:	9000d830 	.word	0x9000d830
9000af40:	9000d838 	.word	0x9000d838

9000af44 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000af44:	b480      	push	{r7}
9000af46:	b083      	sub	sp, #12
9000af48:	af00      	add	r7, sp, #0
9000af4a:	6078      	str	r0, [r7, #4]
9000af4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000af4e:	683b      	ldr	r3, [r7, #0]
9000af50:	681b      	ldr	r3, [r3, #0]
9000af52:	2b00      	cmp	r3, #0
9000af54:	d121      	bne.n	9000af9a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000af56:	687b      	ldr	r3, [r7, #4]
9000af58:	681a      	ldr	r2, [r3, #0]
9000af5a:	4b27      	ldr	r3, [pc, #156]	@ (9000aff8 <FMC_SDRAM_Init+0xb4>)
9000af5c:	4013      	ands	r3, r2
9000af5e:	683a      	ldr	r2, [r7, #0]
9000af60:	6851      	ldr	r1, [r2, #4]
9000af62:	683a      	ldr	r2, [r7, #0]
9000af64:	6892      	ldr	r2, [r2, #8]
9000af66:	4311      	orrs	r1, r2
9000af68:	683a      	ldr	r2, [r7, #0]
9000af6a:	68d2      	ldr	r2, [r2, #12]
9000af6c:	4311      	orrs	r1, r2
9000af6e:	683a      	ldr	r2, [r7, #0]
9000af70:	6912      	ldr	r2, [r2, #16]
9000af72:	4311      	orrs	r1, r2
9000af74:	683a      	ldr	r2, [r7, #0]
9000af76:	6952      	ldr	r2, [r2, #20]
9000af78:	4311      	orrs	r1, r2
9000af7a:	683a      	ldr	r2, [r7, #0]
9000af7c:	6992      	ldr	r2, [r2, #24]
9000af7e:	4311      	orrs	r1, r2
9000af80:	683a      	ldr	r2, [r7, #0]
9000af82:	69d2      	ldr	r2, [r2, #28]
9000af84:	4311      	orrs	r1, r2
9000af86:	683a      	ldr	r2, [r7, #0]
9000af88:	6a12      	ldr	r2, [r2, #32]
9000af8a:	4311      	orrs	r1, r2
9000af8c:	683a      	ldr	r2, [r7, #0]
9000af8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000af90:	430a      	orrs	r2, r1
9000af92:	431a      	orrs	r2, r3
9000af94:	687b      	ldr	r3, [r7, #4]
9000af96:	601a      	str	r2, [r3, #0]
9000af98:	e026      	b.n	9000afe8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000af9a:	687b      	ldr	r3, [r7, #4]
9000af9c:	681b      	ldr	r3, [r3, #0]
9000af9e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000afa2:	683b      	ldr	r3, [r7, #0]
9000afa4:	69d9      	ldr	r1, [r3, #28]
9000afa6:	683b      	ldr	r3, [r7, #0]
9000afa8:	6a1b      	ldr	r3, [r3, #32]
9000afaa:	4319      	orrs	r1, r3
9000afac:	683b      	ldr	r3, [r7, #0]
9000afae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000afb0:	430b      	orrs	r3, r1
9000afb2:	431a      	orrs	r2, r3
9000afb4:	687b      	ldr	r3, [r7, #4]
9000afb6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000afb8:	687b      	ldr	r3, [r7, #4]
9000afba:	685a      	ldr	r2, [r3, #4]
9000afbc:	4b0e      	ldr	r3, [pc, #56]	@ (9000aff8 <FMC_SDRAM_Init+0xb4>)
9000afbe:	4013      	ands	r3, r2
9000afc0:	683a      	ldr	r2, [r7, #0]
9000afc2:	6851      	ldr	r1, [r2, #4]
9000afc4:	683a      	ldr	r2, [r7, #0]
9000afc6:	6892      	ldr	r2, [r2, #8]
9000afc8:	4311      	orrs	r1, r2
9000afca:	683a      	ldr	r2, [r7, #0]
9000afcc:	68d2      	ldr	r2, [r2, #12]
9000afce:	4311      	orrs	r1, r2
9000afd0:	683a      	ldr	r2, [r7, #0]
9000afd2:	6912      	ldr	r2, [r2, #16]
9000afd4:	4311      	orrs	r1, r2
9000afd6:	683a      	ldr	r2, [r7, #0]
9000afd8:	6952      	ldr	r2, [r2, #20]
9000afda:	4311      	orrs	r1, r2
9000afdc:	683a      	ldr	r2, [r7, #0]
9000afde:	6992      	ldr	r2, [r2, #24]
9000afe0:	430a      	orrs	r2, r1
9000afe2:	431a      	orrs	r2, r3
9000afe4:	687b      	ldr	r3, [r7, #4]
9000afe6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000afe8:	2300      	movs	r3, #0
}
9000afea:	4618      	mov	r0, r3
9000afec:	370c      	adds	r7, #12
9000afee:	46bd      	mov	sp, r7
9000aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aff4:	4770      	bx	lr
9000aff6:	bf00      	nop
9000aff8:	ffff8000 	.word	0xffff8000

9000affc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000affc:	b480      	push	{r7}
9000affe:	b085      	sub	sp, #20
9000b000:	af00      	add	r7, sp, #0
9000b002:	60f8      	str	r0, [r7, #12]
9000b004:	60b9      	str	r1, [r7, #8]
9000b006:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000b008:	687b      	ldr	r3, [r7, #4]
9000b00a:	2b00      	cmp	r3, #0
9000b00c:	d128      	bne.n	9000b060 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b00e:	68fb      	ldr	r3, [r7, #12]
9000b010:	689b      	ldr	r3, [r3, #8]
9000b012:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000b016:	68bb      	ldr	r3, [r7, #8]
9000b018:	681b      	ldr	r3, [r3, #0]
9000b01a:	1e59      	subs	r1, r3, #1
9000b01c:	68bb      	ldr	r3, [r7, #8]
9000b01e:	685b      	ldr	r3, [r3, #4]
9000b020:	3b01      	subs	r3, #1
9000b022:	011b      	lsls	r3, r3, #4
9000b024:	4319      	orrs	r1, r3
9000b026:	68bb      	ldr	r3, [r7, #8]
9000b028:	689b      	ldr	r3, [r3, #8]
9000b02a:	3b01      	subs	r3, #1
9000b02c:	021b      	lsls	r3, r3, #8
9000b02e:	4319      	orrs	r1, r3
9000b030:	68bb      	ldr	r3, [r7, #8]
9000b032:	68db      	ldr	r3, [r3, #12]
9000b034:	3b01      	subs	r3, #1
9000b036:	031b      	lsls	r3, r3, #12
9000b038:	4319      	orrs	r1, r3
9000b03a:	68bb      	ldr	r3, [r7, #8]
9000b03c:	691b      	ldr	r3, [r3, #16]
9000b03e:	3b01      	subs	r3, #1
9000b040:	041b      	lsls	r3, r3, #16
9000b042:	4319      	orrs	r1, r3
9000b044:	68bb      	ldr	r3, [r7, #8]
9000b046:	695b      	ldr	r3, [r3, #20]
9000b048:	3b01      	subs	r3, #1
9000b04a:	051b      	lsls	r3, r3, #20
9000b04c:	4319      	orrs	r1, r3
9000b04e:	68bb      	ldr	r3, [r7, #8]
9000b050:	699b      	ldr	r3, [r3, #24]
9000b052:	3b01      	subs	r3, #1
9000b054:	061b      	lsls	r3, r3, #24
9000b056:	430b      	orrs	r3, r1
9000b058:	431a      	orrs	r2, r3
9000b05a:	68fb      	ldr	r3, [r7, #12]
9000b05c:	609a      	str	r2, [r3, #8]
9000b05e:	e02d      	b.n	9000b0bc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b060:	68fb      	ldr	r3, [r7, #12]
9000b062:	689a      	ldr	r2, [r3, #8]
9000b064:	4b19      	ldr	r3, [pc, #100]	@ (9000b0cc <FMC_SDRAM_Timing_Init+0xd0>)
9000b066:	4013      	ands	r3, r2
9000b068:	68ba      	ldr	r2, [r7, #8]
9000b06a:	68d2      	ldr	r2, [r2, #12]
9000b06c:	3a01      	subs	r2, #1
9000b06e:	0311      	lsls	r1, r2, #12
9000b070:	68ba      	ldr	r2, [r7, #8]
9000b072:	6952      	ldr	r2, [r2, #20]
9000b074:	3a01      	subs	r2, #1
9000b076:	0512      	lsls	r2, r2, #20
9000b078:	430a      	orrs	r2, r1
9000b07a:	431a      	orrs	r2, r3
9000b07c:	68fb      	ldr	r3, [r7, #12]
9000b07e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000b080:	68fb      	ldr	r3, [r7, #12]
9000b082:	68db      	ldr	r3, [r3, #12]
9000b084:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000b088:	68bb      	ldr	r3, [r7, #8]
9000b08a:	681b      	ldr	r3, [r3, #0]
9000b08c:	1e59      	subs	r1, r3, #1
9000b08e:	68bb      	ldr	r3, [r7, #8]
9000b090:	685b      	ldr	r3, [r3, #4]
9000b092:	3b01      	subs	r3, #1
9000b094:	011b      	lsls	r3, r3, #4
9000b096:	4319      	orrs	r1, r3
9000b098:	68bb      	ldr	r3, [r7, #8]
9000b09a:	689b      	ldr	r3, [r3, #8]
9000b09c:	3b01      	subs	r3, #1
9000b09e:	021b      	lsls	r3, r3, #8
9000b0a0:	4319      	orrs	r1, r3
9000b0a2:	68bb      	ldr	r3, [r7, #8]
9000b0a4:	691b      	ldr	r3, [r3, #16]
9000b0a6:	3b01      	subs	r3, #1
9000b0a8:	041b      	lsls	r3, r3, #16
9000b0aa:	4319      	orrs	r1, r3
9000b0ac:	68bb      	ldr	r3, [r7, #8]
9000b0ae:	699b      	ldr	r3, [r3, #24]
9000b0b0:	3b01      	subs	r3, #1
9000b0b2:	061b      	lsls	r3, r3, #24
9000b0b4:	430b      	orrs	r3, r1
9000b0b6:	431a      	orrs	r2, r3
9000b0b8:	68fb      	ldr	r3, [r7, #12]
9000b0ba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000b0bc:	2300      	movs	r3, #0
}
9000b0be:	4618      	mov	r0, r3
9000b0c0:	3714      	adds	r7, #20
9000b0c2:	46bd      	mov	sp, r7
9000b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0c8:	4770      	bx	lr
9000b0ca:	bf00      	nop
9000b0cc:	ff0f0fff 	.word	0xff0f0fff

9000b0d0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000b0d0:	b480      	push	{r7}
9000b0d2:	b085      	sub	sp, #20
9000b0d4:	af00      	add	r7, sp, #0
9000b0d6:	60f8      	str	r0, [r7, #12]
9000b0d8:	60b9      	str	r1, [r7, #8]
9000b0da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000b0dc:	68fb      	ldr	r3, [r7, #12]
9000b0de:	691a      	ldr	r2, [r3, #16]
9000b0e0:	4b0c      	ldr	r3, [pc, #48]	@ (9000b114 <FMC_SDRAM_SendCommand+0x44>)
9000b0e2:	4013      	ands	r3, r2
9000b0e4:	68ba      	ldr	r2, [r7, #8]
9000b0e6:	6811      	ldr	r1, [r2, #0]
9000b0e8:	68ba      	ldr	r2, [r7, #8]
9000b0ea:	6852      	ldr	r2, [r2, #4]
9000b0ec:	4311      	orrs	r1, r2
9000b0ee:	68ba      	ldr	r2, [r7, #8]
9000b0f0:	6892      	ldr	r2, [r2, #8]
9000b0f2:	3a01      	subs	r2, #1
9000b0f4:	0152      	lsls	r2, r2, #5
9000b0f6:	4311      	orrs	r1, r2
9000b0f8:	68ba      	ldr	r2, [r7, #8]
9000b0fa:	68d2      	ldr	r2, [r2, #12]
9000b0fc:	0252      	lsls	r2, r2, #9
9000b0fe:	430a      	orrs	r2, r1
9000b100:	431a      	orrs	r2, r3
9000b102:	68fb      	ldr	r3, [r7, #12]
9000b104:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000b106:	2300      	movs	r3, #0
}
9000b108:	4618      	mov	r0, r3
9000b10a:	3714      	adds	r7, #20
9000b10c:	46bd      	mov	sp, r7
9000b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b112:	4770      	bx	lr
9000b114:	ffc00000 	.word	0xffc00000

9000b118 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000b118:	b480      	push	{r7}
9000b11a:	b083      	sub	sp, #12
9000b11c:	af00      	add	r7, sp, #0
9000b11e:	6078      	str	r0, [r7, #4]
9000b120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000b122:	687b      	ldr	r3, [r7, #4]
9000b124:	695a      	ldr	r2, [r3, #20]
9000b126:	4b07      	ldr	r3, [pc, #28]	@ (9000b144 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000b128:	4013      	ands	r3, r2
9000b12a:	683a      	ldr	r2, [r7, #0]
9000b12c:	0052      	lsls	r2, r2, #1
9000b12e:	431a      	orrs	r2, r3
9000b130:	687b      	ldr	r3, [r7, #4]
9000b132:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000b134:	2300      	movs	r3, #0
}
9000b136:	4618      	mov	r0, r3
9000b138:	370c      	adds	r7, #12
9000b13a:	46bd      	mov	sp, r7
9000b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b140:	4770      	bx	lr
9000b142:	bf00      	nop
9000b144:	ffffc001 	.word	0xffffc001

9000b148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b148:	b480      	push	{r7}
9000b14a:	b083      	sub	sp, #12
9000b14c:	af00      	add	r7, sp, #0
9000b14e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000b150:	687b      	ldr	r3, [r7, #4]
9000b152:	689b      	ldr	r3, [r3, #8]
9000b154:	f043 0201 	orr.w	r2, r3, #1
9000b158:	687b      	ldr	r3, [r7, #4]
9000b15a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b15c:	2300      	movs	r3, #0
}
9000b15e:	4618      	mov	r0, r3
9000b160:	370c      	adds	r7, #12
9000b162:	46bd      	mov	sp, r7
9000b164:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b168:	4770      	bx	lr

9000b16a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b16a:	b480      	push	{r7}
9000b16c:	b083      	sub	sp, #12
9000b16e:	af00      	add	r7, sp, #0
9000b170:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000b172:	687b      	ldr	r3, [r7, #4]
9000b174:	689b      	ldr	r3, [r3, #8]
9000b176:	f023 0201 	bic.w	r2, r3, #1
9000b17a:	687b      	ldr	r3, [r7, #4]
9000b17c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b17e:	2300      	movs	r3, #0
}
9000b180:	4618      	mov	r0, r3
9000b182:	370c      	adds	r7, #12
9000b184:	46bd      	mov	sp, r7
9000b186:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b18a:	4770      	bx	lr

9000b18c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000b18c:	b480      	push	{r7}
9000b18e:	b085      	sub	sp, #20
9000b190:	af00      	add	r7, sp, #0
9000b192:	6078      	str	r0, [r7, #4]
9000b194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000b196:	2300      	movs	r3, #0
9000b198:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b19a:	68fb      	ldr	r3, [r7, #12]
9000b19c:	3301      	adds	r3, #1
9000b19e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b1a0:	68fb      	ldr	r3, [r7, #12]
9000b1a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b1a6:	d901      	bls.n	9000b1ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000b1a8:	2303      	movs	r3, #3
9000b1aa:	e01b      	b.n	9000b1e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b1ac:	687b      	ldr	r3, [r7, #4]
9000b1ae:	691b      	ldr	r3, [r3, #16]
9000b1b0:	2b00      	cmp	r3, #0
9000b1b2:	daf2      	bge.n	9000b19a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000b1b4:	2300      	movs	r3, #0
9000b1b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000b1b8:	683b      	ldr	r3, [r7, #0]
9000b1ba:	019b      	lsls	r3, r3, #6
9000b1bc:	f043 0220 	orr.w	r2, r3, #32
9000b1c0:	687b      	ldr	r3, [r7, #4]
9000b1c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b1c4:	68fb      	ldr	r3, [r7, #12]
9000b1c6:	3301      	adds	r3, #1
9000b1c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b1ca:	68fb      	ldr	r3, [r7, #12]
9000b1cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b1d0:	d901      	bls.n	9000b1d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000b1d2:	2303      	movs	r3, #3
9000b1d4:	e006      	b.n	9000b1e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000b1d6:	687b      	ldr	r3, [r7, #4]
9000b1d8:	691b      	ldr	r3, [r3, #16]
9000b1da:	f003 0320 	and.w	r3, r3, #32
9000b1de:	2b20      	cmp	r3, #32
9000b1e0:	d0f0      	beq.n	9000b1c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000b1e2:	2300      	movs	r3, #0
}
9000b1e4:	4618      	mov	r0, r3
9000b1e6:	3714      	adds	r7, #20
9000b1e8:	46bd      	mov	sp, r7
9000b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1ee:	4770      	bx	lr

9000b1f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000b1f0:	b480      	push	{r7}
9000b1f2:	b085      	sub	sp, #20
9000b1f4:	af00      	add	r7, sp, #0
9000b1f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000b1f8:	2300      	movs	r3, #0
9000b1fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b1fc:	68fb      	ldr	r3, [r7, #12]
9000b1fe:	3301      	adds	r3, #1
9000b200:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b202:	68fb      	ldr	r3, [r7, #12]
9000b204:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b208:	d901      	bls.n	9000b20e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000b20a:	2303      	movs	r3, #3
9000b20c:	e018      	b.n	9000b240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b20e:	687b      	ldr	r3, [r7, #4]
9000b210:	691b      	ldr	r3, [r3, #16]
9000b212:	2b00      	cmp	r3, #0
9000b214:	daf2      	bge.n	9000b1fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000b216:	2300      	movs	r3, #0
9000b218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000b21a:	687b      	ldr	r3, [r7, #4]
9000b21c:	2210      	movs	r2, #16
9000b21e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b220:	68fb      	ldr	r3, [r7, #12]
9000b222:	3301      	adds	r3, #1
9000b224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b226:	68fb      	ldr	r3, [r7, #12]
9000b228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b22c:	d901      	bls.n	9000b232 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000b22e:	2303      	movs	r3, #3
9000b230:	e006      	b.n	9000b240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b232:	687b      	ldr	r3, [r7, #4]
9000b234:	691b      	ldr	r3, [r3, #16]
9000b236:	f003 0310 	and.w	r3, r3, #16
9000b23a:	2b10      	cmp	r3, #16
9000b23c:	d0f0      	beq.n	9000b220 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000b23e:	2300      	movs	r3, #0
}
9000b240:	4618      	mov	r0, r3
9000b242:	3714      	adds	r7, #20
9000b244:	46bd      	mov	sp, r7
9000b246:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b24a:	4770      	bx	lr

9000b24c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000b24c:	b480      	push	{r7}
9000b24e:	b08b      	sub	sp, #44	@ 0x2c
9000b250:	af00      	add	r7, sp, #0
9000b252:	60f8      	str	r0, [r7, #12]
9000b254:	60b9      	str	r1, [r7, #8]
9000b256:	4613      	mov	r3, r2
9000b258:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b25a:	68fb      	ldr	r3, [r7, #12]
9000b25c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000b25e:	68bb      	ldr	r3, [r7, #8]
9000b260:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000b262:	88fb      	ldrh	r3, [r7, #6]
9000b264:	089b      	lsrs	r3, r3, #2
9000b266:	b29b      	uxth	r3, r3
9000b268:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000b26a:	88fb      	ldrh	r3, [r7, #6]
9000b26c:	f003 0303 	and.w	r3, r3, #3
9000b270:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000b272:	2300      	movs	r3, #0
9000b274:	623b      	str	r3, [r7, #32]
9000b276:	e014      	b.n	9000b2a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000b278:	69bb      	ldr	r3, [r7, #24]
9000b27a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b27e:	681a      	ldr	r2, [r3, #0]
9000b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b282:	601a      	str	r2, [r3, #0]
    pDest++;
9000b284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b286:	3301      	adds	r3, #1
9000b288:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b28c:	3301      	adds	r3, #1
9000b28e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b292:	3301      	adds	r3, #1
9000b294:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b298:	3301      	adds	r3, #1
9000b29a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000b29c:	6a3b      	ldr	r3, [r7, #32]
9000b29e:	3301      	adds	r3, #1
9000b2a0:	623b      	str	r3, [r7, #32]
9000b2a2:	6a3a      	ldr	r2, [r7, #32]
9000b2a4:	697b      	ldr	r3, [r7, #20]
9000b2a6:	429a      	cmp	r2, r3
9000b2a8:	d3e6      	bcc.n	9000b278 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000b2aa:	8bfb      	ldrh	r3, [r7, #30]
9000b2ac:	2b00      	cmp	r3, #0
9000b2ae:	d01e      	beq.n	9000b2ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000b2b0:	2300      	movs	r3, #0
9000b2b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000b2b4:	69bb      	ldr	r3, [r7, #24]
9000b2b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b2ba:	461a      	mov	r2, r3
9000b2bc:	f107 0310 	add.w	r3, r7, #16
9000b2c0:	6812      	ldr	r2, [r2, #0]
9000b2c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000b2c4:	693a      	ldr	r2, [r7, #16]
9000b2c6:	6a3b      	ldr	r3, [r7, #32]
9000b2c8:	b2db      	uxtb	r3, r3
9000b2ca:	00db      	lsls	r3, r3, #3
9000b2cc:	fa22 f303 	lsr.w	r3, r2, r3
9000b2d0:	b2da      	uxtb	r2, r3
9000b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b2d4:	701a      	strb	r2, [r3, #0]
      i++;
9000b2d6:	6a3b      	ldr	r3, [r7, #32]
9000b2d8:	3301      	adds	r3, #1
9000b2da:	623b      	str	r3, [r7, #32]
      pDest++;
9000b2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b2de:	3301      	adds	r3, #1
9000b2e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000b2e2:	8bfb      	ldrh	r3, [r7, #30]
9000b2e4:	3b01      	subs	r3, #1
9000b2e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000b2e8:	8bfb      	ldrh	r3, [r7, #30]
9000b2ea:	2b00      	cmp	r3, #0
9000b2ec:	d1ea      	bne.n	9000b2c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000b2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000b2f0:	4618      	mov	r0, r3
9000b2f2:	372c      	adds	r7, #44	@ 0x2c
9000b2f4:	46bd      	mov	sp, r7
9000b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2fa:	4770      	bx	lr

9000b2fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000b2fc:	b480      	push	{r7}
9000b2fe:	b085      	sub	sp, #20
9000b300:	af00      	add	r7, sp, #0
9000b302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000b304:	687b      	ldr	r3, [r7, #4]
9000b306:	695b      	ldr	r3, [r3, #20]
9000b308:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000b30a:	687b      	ldr	r3, [r7, #4]
9000b30c:	699b      	ldr	r3, [r3, #24]
9000b30e:	68fa      	ldr	r2, [r7, #12]
9000b310:	4013      	ands	r3, r2
9000b312:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000b314:	68fb      	ldr	r3, [r7, #12]
}
9000b316:	4618      	mov	r0, r3
9000b318:	3714      	adds	r7, #20
9000b31a:	46bd      	mov	sp, r7
9000b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b320:	4770      	bx	lr

9000b322 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000b322:	b480      	push	{r7}
9000b324:	b085      	sub	sp, #20
9000b326:	af00      	add	r7, sp, #0
9000b328:	6078      	str	r0, [r7, #4]
9000b32a:	460b      	mov	r3, r1
9000b32c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b32e:	687b      	ldr	r3, [r7, #4]
9000b330:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000b332:	78fb      	ldrb	r3, [r7, #3]
9000b334:	015a      	lsls	r2, r3, #5
9000b336:	68fb      	ldr	r3, [r7, #12]
9000b338:	4413      	add	r3, r2
9000b33a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b33e:	689b      	ldr	r3, [r3, #8]
9000b340:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000b342:	78fb      	ldrb	r3, [r7, #3]
9000b344:	015a      	lsls	r2, r3, #5
9000b346:	68fb      	ldr	r3, [r7, #12]
9000b348:	4413      	add	r3, r2
9000b34a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b34e:	68db      	ldr	r3, [r3, #12]
9000b350:	68ba      	ldr	r2, [r7, #8]
9000b352:	4013      	ands	r3, r2
9000b354:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000b356:	68bb      	ldr	r3, [r7, #8]
}
9000b358:	4618      	mov	r0, r3
9000b35a:	3714      	adds	r7, #20
9000b35c:	46bd      	mov	sp, r7
9000b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b362:	4770      	bx	lr

9000b364 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000b364:	b480      	push	{r7}
9000b366:	b083      	sub	sp, #12
9000b368:	af00      	add	r7, sp, #0
9000b36a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000b36c:	687b      	ldr	r3, [r7, #4]
9000b36e:	695b      	ldr	r3, [r3, #20]
9000b370:	f003 0301 	and.w	r3, r3, #1
}
9000b374:	4618      	mov	r0, r3
9000b376:	370c      	adds	r7, #12
9000b378:	46bd      	mov	sp, r7
9000b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b37e:	4770      	bx	lr

9000b380 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000b380:	b480      	push	{r7}
9000b382:	b085      	sub	sp, #20
9000b384:	af00      	add	r7, sp, #0
9000b386:	6078      	str	r0, [r7, #4]
9000b388:	460b      	mov	r3, r1
9000b38a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b38c:	687b      	ldr	r3, [r7, #4]
9000b38e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000b390:	68fb      	ldr	r3, [r7, #12]
9000b392:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b396:	681b      	ldr	r3, [r3, #0]
9000b398:	68fa      	ldr	r2, [r7, #12]
9000b39a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000b39e:	f023 0303 	bic.w	r3, r3, #3
9000b3a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000b3a4:	68fb      	ldr	r3, [r7, #12]
9000b3a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b3aa:	681a      	ldr	r2, [r3, #0]
9000b3ac:	78fb      	ldrb	r3, [r7, #3]
9000b3ae:	f003 0303 	and.w	r3, r3, #3
9000b3b2:	68f9      	ldr	r1, [r7, #12]
9000b3b4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000b3b8:	4313      	orrs	r3, r2
9000b3ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000b3bc:	78fb      	ldrb	r3, [r7, #3]
9000b3be:	2b01      	cmp	r3, #1
9000b3c0:	d107      	bne.n	9000b3d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000b3c2:	68fb      	ldr	r3, [r7, #12]
9000b3c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b3c8:	461a      	mov	r2, r3
9000b3ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000b3ce:	6053      	str	r3, [r2, #4]
9000b3d0:	e00c      	b.n	9000b3ec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000b3d2:	78fb      	ldrb	r3, [r7, #3]
9000b3d4:	2b02      	cmp	r3, #2
9000b3d6:	d107      	bne.n	9000b3e8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000b3d8:	68fb      	ldr	r3, [r7, #12]
9000b3da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b3de:	461a      	mov	r2, r3
9000b3e0:	f241 7370 	movw	r3, #6000	@ 0x1770
9000b3e4:	6053      	str	r3, [r2, #4]
9000b3e6:	e001      	b.n	9000b3ec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000b3e8:	2301      	movs	r3, #1
9000b3ea:	e000      	b.n	9000b3ee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000b3ec:	2300      	movs	r3, #0
}
9000b3ee:	4618      	mov	r0, r3
9000b3f0:	3714      	adds	r7, #20
9000b3f2:	46bd      	mov	sp, r7
9000b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b3f8:	4770      	bx	lr

9000b3fa <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000b3fa:	b480      	push	{r7}
9000b3fc:	b085      	sub	sp, #20
9000b3fe:	af00      	add	r7, sp, #0
9000b400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b402:	687b      	ldr	r3, [r7, #4]
9000b404:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000b406:	68fb      	ldr	r3, [r7, #12]
9000b408:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b40c:	695b      	ldr	r3, [r3, #20]
9000b40e:	b29b      	uxth	r3, r3
}
9000b410:	4618      	mov	r0, r3
9000b412:	3714      	adds	r7, #20
9000b414:	46bd      	mov	sp, r7
9000b416:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b41a:	4770      	bx	lr

9000b41c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000b41c:	b480      	push	{r7}
9000b41e:	b089      	sub	sp, #36	@ 0x24
9000b420:	af00      	add	r7, sp, #0
9000b422:	6078      	str	r0, [r7, #4]
9000b424:	460b      	mov	r3, r1
9000b426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b428:	687b      	ldr	r3, [r7, #4]
9000b42a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000b42c:	78fb      	ldrb	r3, [r7, #3]
9000b42e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000b430:	2300      	movs	r3, #0
9000b432:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000b434:	69bb      	ldr	r3, [r7, #24]
9000b436:	015a      	lsls	r2, r3, #5
9000b438:	69fb      	ldr	r3, [r7, #28]
9000b43a:	4413      	add	r3, r2
9000b43c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b440:	681b      	ldr	r3, [r3, #0]
9000b442:	0c9b      	lsrs	r3, r3, #18
9000b444:	f003 0303 	and.w	r3, r3, #3
9000b448:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000b44a:	69bb      	ldr	r3, [r7, #24]
9000b44c:	015a      	lsls	r2, r3, #5
9000b44e:	69fb      	ldr	r3, [r7, #28]
9000b450:	4413      	add	r3, r2
9000b452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b456:	681b      	ldr	r3, [r3, #0]
9000b458:	0fdb      	lsrs	r3, r3, #31
9000b45a:	f003 0301 	and.w	r3, r3, #1
9000b45e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000b460:	69bb      	ldr	r3, [r7, #24]
9000b462:	015a      	lsls	r2, r3, #5
9000b464:	69fb      	ldr	r3, [r7, #28]
9000b466:	4413      	add	r3, r2
9000b468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b46c:	685b      	ldr	r3, [r3, #4]
9000b46e:	0fdb      	lsrs	r3, r3, #31
9000b470:	f003 0301 	and.w	r3, r3, #1
9000b474:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000b476:	687b      	ldr	r3, [r7, #4]
9000b478:	689b      	ldr	r3, [r3, #8]
9000b47a:	f003 0320 	and.w	r3, r3, #32
9000b47e:	2b20      	cmp	r3, #32
9000b480:	d10d      	bne.n	9000b49e <USB_HC_Halt+0x82>
9000b482:	68fb      	ldr	r3, [r7, #12]
9000b484:	2b00      	cmp	r3, #0
9000b486:	d10a      	bne.n	9000b49e <USB_HC_Halt+0x82>
9000b488:	693b      	ldr	r3, [r7, #16]
9000b48a:	2b00      	cmp	r3, #0
9000b48c:	d005      	beq.n	9000b49a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000b48e:	697b      	ldr	r3, [r7, #20]
9000b490:	2b01      	cmp	r3, #1
9000b492:	d002      	beq.n	9000b49a <USB_HC_Halt+0x7e>
9000b494:	697b      	ldr	r3, [r7, #20]
9000b496:	2b03      	cmp	r3, #3
9000b498:	d101      	bne.n	9000b49e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000b49a:	2300      	movs	r3, #0
9000b49c:	e0d8      	b.n	9000b650 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000b49e:	697b      	ldr	r3, [r7, #20]
9000b4a0:	2b00      	cmp	r3, #0
9000b4a2:	d002      	beq.n	9000b4aa <USB_HC_Halt+0x8e>
9000b4a4:	697b      	ldr	r3, [r7, #20]
9000b4a6:	2b02      	cmp	r3, #2
9000b4a8:	d173      	bne.n	9000b592 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b4aa:	69bb      	ldr	r3, [r7, #24]
9000b4ac:	015a      	lsls	r2, r3, #5
9000b4ae:	69fb      	ldr	r3, [r7, #28]
9000b4b0:	4413      	add	r3, r2
9000b4b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4b6:	681b      	ldr	r3, [r3, #0]
9000b4b8:	69ba      	ldr	r2, [r7, #24]
9000b4ba:	0151      	lsls	r1, r2, #5
9000b4bc:	69fa      	ldr	r2, [r7, #28]
9000b4be:	440a      	add	r2, r1
9000b4c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b4c8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b4ca:	687b      	ldr	r3, [r7, #4]
9000b4cc:	689b      	ldr	r3, [r3, #8]
9000b4ce:	f003 0320 	and.w	r3, r3, #32
9000b4d2:	2b00      	cmp	r3, #0
9000b4d4:	d14a      	bne.n	9000b56c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b4d6:	687b      	ldr	r3, [r7, #4]
9000b4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b4da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b4de:	2b00      	cmp	r3, #0
9000b4e0:	d133      	bne.n	9000b54a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b4e2:	69bb      	ldr	r3, [r7, #24]
9000b4e4:	015a      	lsls	r2, r3, #5
9000b4e6:	69fb      	ldr	r3, [r7, #28]
9000b4e8:	4413      	add	r3, r2
9000b4ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4ee:	681b      	ldr	r3, [r3, #0]
9000b4f0:	69ba      	ldr	r2, [r7, #24]
9000b4f2:	0151      	lsls	r1, r2, #5
9000b4f4:	69fa      	ldr	r2, [r7, #28]
9000b4f6:	440a      	add	r2, r1
9000b4f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b500:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b502:	69bb      	ldr	r3, [r7, #24]
9000b504:	015a      	lsls	r2, r3, #5
9000b506:	69fb      	ldr	r3, [r7, #28]
9000b508:	4413      	add	r3, r2
9000b50a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b50e:	681b      	ldr	r3, [r3, #0]
9000b510:	69ba      	ldr	r2, [r7, #24]
9000b512:	0151      	lsls	r1, r2, #5
9000b514:	69fa      	ldr	r2, [r7, #28]
9000b516:	440a      	add	r2, r1
9000b518:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b51c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b520:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b522:	68bb      	ldr	r3, [r7, #8]
9000b524:	3301      	adds	r3, #1
9000b526:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b528:	68bb      	ldr	r3, [r7, #8]
9000b52a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b52e:	d82e      	bhi.n	9000b58e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b530:	69bb      	ldr	r3, [r7, #24]
9000b532:	015a      	lsls	r2, r3, #5
9000b534:	69fb      	ldr	r3, [r7, #28]
9000b536:	4413      	add	r3, r2
9000b538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b53c:	681b      	ldr	r3, [r3, #0]
9000b53e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b542:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b546:	d0ec      	beq.n	9000b522 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b548:	e081      	b.n	9000b64e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b54a:	69bb      	ldr	r3, [r7, #24]
9000b54c:	015a      	lsls	r2, r3, #5
9000b54e:	69fb      	ldr	r3, [r7, #28]
9000b550:	4413      	add	r3, r2
9000b552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b556:	681b      	ldr	r3, [r3, #0]
9000b558:	69ba      	ldr	r2, [r7, #24]
9000b55a:	0151      	lsls	r1, r2, #5
9000b55c:	69fa      	ldr	r2, [r7, #28]
9000b55e:	440a      	add	r2, r1
9000b560:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b564:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b568:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b56a:	e070      	b.n	9000b64e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b56c:	69bb      	ldr	r3, [r7, #24]
9000b56e:	015a      	lsls	r2, r3, #5
9000b570:	69fb      	ldr	r3, [r7, #28]
9000b572:	4413      	add	r3, r2
9000b574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b578:	681b      	ldr	r3, [r3, #0]
9000b57a:	69ba      	ldr	r2, [r7, #24]
9000b57c:	0151      	lsls	r1, r2, #5
9000b57e:	69fa      	ldr	r2, [r7, #28]
9000b580:	440a      	add	r2, r1
9000b582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b586:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b58a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b58c:	e05f      	b.n	9000b64e <USB_HC_Halt+0x232>
            break;
9000b58e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b590:	e05d      	b.n	9000b64e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b592:	69bb      	ldr	r3, [r7, #24]
9000b594:	015a      	lsls	r2, r3, #5
9000b596:	69fb      	ldr	r3, [r7, #28]
9000b598:	4413      	add	r3, r2
9000b59a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b59e:	681b      	ldr	r3, [r3, #0]
9000b5a0:	69ba      	ldr	r2, [r7, #24]
9000b5a2:	0151      	lsls	r1, r2, #5
9000b5a4:	69fa      	ldr	r2, [r7, #28]
9000b5a6:	440a      	add	r2, r1
9000b5a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b5ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b5b0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b5b2:	69fb      	ldr	r3, [r7, #28]
9000b5b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b5b8:	691b      	ldr	r3, [r3, #16]
9000b5ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b5be:	2b00      	cmp	r3, #0
9000b5c0:	d133      	bne.n	9000b62a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b5c2:	69bb      	ldr	r3, [r7, #24]
9000b5c4:	015a      	lsls	r2, r3, #5
9000b5c6:	69fb      	ldr	r3, [r7, #28]
9000b5c8:	4413      	add	r3, r2
9000b5ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5ce:	681b      	ldr	r3, [r3, #0]
9000b5d0:	69ba      	ldr	r2, [r7, #24]
9000b5d2:	0151      	lsls	r1, r2, #5
9000b5d4:	69fa      	ldr	r2, [r7, #28]
9000b5d6:	440a      	add	r2, r1
9000b5d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b5dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b5e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b5e2:	69bb      	ldr	r3, [r7, #24]
9000b5e4:	015a      	lsls	r2, r3, #5
9000b5e6:	69fb      	ldr	r3, [r7, #28]
9000b5e8:	4413      	add	r3, r2
9000b5ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5ee:	681b      	ldr	r3, [r3, #0]
9000b5f0:	69ba      	ldr	r2, [r7, #24]
9000b5f2:	0151      	lsls	r1, r2, #5
9000b5f4:	69fa      	ldr	r2, [r7, #28]
9000b5f6:	440a      	add	r2, r1
9000b5f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b5fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b600:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b602:	68bb      	ldr	r3, [r7, #8]
9000b604:	3301      	adds	r3, #1
9000b606:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b608:	68bb      	ldr	r3, [r7, #8]
9000b60a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b60e:	d81d      	bhi.n	9000b64c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b610:	69bb      	ldr	r3, [r7, #24]
9000b612:	015a      	lsls	r2, r3, #5
9000b614:	69fb      	ldr	r3, [r7, #28]
9000b616:	4413      	add	r3, r2
9000b618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b61c:	681b      	ldr	r3, [r3, #0]
9000b61e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b622:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b626:	d0ec      	beq.n	9000b602 <USB_HC_Halt+0x1e6>
9000b628:	e011      	b.n	9000b64e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b62a:	69bb      	ldr	r3, [r7, #24]
9000b62c:	015a      	lsls	r2, r3, #5
9000b62e:	69fb      	ldr	r3, [r7, #28]
9000b630:	4413      	add	r3, r2
9000b632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b636:	681b      	ldr	r3, [r3, #0]
9000b638:	69ba      	ldr	r2, [r7, #24]
9000b63a:	0151      	lsls	r1, r2, #5
9000b63c:	69fa      	ldr	r2, [r7, #28]
9000b63e:	440a      	add	r2, r1
9000b640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b648:	6013      	str	r3, [r2, #0]
9000b64a:	e000      	b.n	9000b64e <USB_HC_Halt+0x232>
          break;
9000b64c:	bf00      	nop
    }
  }

  return HAL_OK;
9000b64e:	2300      	movs	r3, #0
}
9000b650:	4618      	mov	r0, r3
9000b652:	3724      	adds	r7, #36	@ 0x24
9000b654:	46bd      	mov	sp, r7
9000b656:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b65a:	4770      	bx	lr

9000b65c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b65c:	b580      	push	{r7, lr}
9000b65e:	b088      	sub	sp, #32
9000b660:	af00      	add	r7, sp, #0
9000b662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b664:	2300      	movs	r3, #0
9000b666:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b668:	687b      	ldr	r3, [r7, #4]
9000b66a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b66c:	2300      	movs	r3, #0
9000b66e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b670:	6878      	ldr	r0, [r7, #4]
9000b672:	f7ff fd7a 	bl	9000b16a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b676:	2110      	movs	r1, #16
9000b678:	6878      	ldr	r0, [r7, #4]
9000b67a:	f7ff fd87 	bl	9000b18c <USB_FlushTxFifo>
9000b67e:	4603      	mov	r3, r0
9000b680:	2b00      	cmp	r3, #0
9000b682:	d001      	beq.n	9000b688 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b684:	2301      	movs	r3, #1
9000b686:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b688:	6878      	ldr	r0, [r7, #4]
9000b68a:	f7ff fdb1 	bl	9000b1f0 <USB_FlushRxFifo>
9000b68e:	4603      	mov	r3, r0
9000b690:	2b00      	cmp	r3, #0
9000b692:	d001      	beq.n	9000b698 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b694:	2301      	movs	r3, #1
9000b696:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b698:	2300      	movs	r3, #0
9000b69a:	61bb      	str	r3, [r7, #24]
9000b69c:	e01f      	b.n	9000b6de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b69e:	69bb      	ldr	r3, [r7, #24]
9000b6a0:	015a      	lsls	r2, r3, #5
9000b6a2:	697b      	ldr	r3, [r7, #20]
9000b6a4:	4413      	add	r3, r2
9000b6a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b6aa:	681b      	ldr	r3, [r3, #0]
9000b6ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b6ae:	693b      	ldr	r3, [r7, #16]
9000b6b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b6b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b6b6:	693b      	ldr	r3, [r7, #16]
9000b6b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b6bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b6be:	693b      	ldr	r3, [r7, #16]
9000b6c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b6c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b6c6:	69bb      	ldr	r3, [r7, #24]
9000b6c8:	015a      	lsls	r2, r3, #5
9000b6ca:	697b      	ldr	r3, [r7, #20]
9000b6cc:	4413      	add	r3, r2
9000b6ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b6d2:	461a      	mov	r2, r3
9000b6d4:	693b      	ldr	r3, [r7, #16]
9000b6d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b6d8:	69bb      	ldr	r3, [r7, #24]
9000b6da:	3301      	adds	r3, #1
9000b6dc:	61bb      	str	r3, [r7, #24]
9000b6de:	69bb      	ldr	r3, [r7, #24]
9000b6e0:	2b0f      	cmp	r3, #15
9000b6e2:	d9dc      	bls.n	9000b69e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b6e4:	2300      	movs	r3, #0
9000b6e6:	61bb      	str	r3, [r7, #24]
9000b6e8:	e034      	b.n	9000b754 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b6ea:	69bb      	ldr	r3, [r7, #24]
9000b6ec:	015a      	lsls	r2, r3, #5
9000b6ee:	697b      	ldr	r3, [r7, #20]
9000b6f0:	4413      	add	r3, r2
9000b6f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b6f6:	681b      	ldr	r3, [r3, #0]
9000b6f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b6fa:	693b      	ldr	r3, [r7, #16]
9000b6fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b700:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b702:	693b      	ldr	r3, [r7, #16]
9000b704:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b708:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b70a:	693b      	ldr	r3, [r7, #16]
9000b70c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b710:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b712:	69bb      	ldr	r3, [r7, #24]
9000b714:	015a      	lsls	r2, r3, #5
9000b716:	697b      	ldr	r3, [r7, #20]
9000b718:	4413      	add	r3, r2
9000b71a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b71e:	461a      	mov	r2, r3
9000b720:	693b      	ldr	r3, [r7, #16]
9000b722:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b724:	68fb      	ldr	r3, [r7, #12]
9000b726:	3301      	adds	r3, #1
9000b728:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b72a:	68fb      	ldr	r3, [r7, #12]
9000b72c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b730:	d80c      	bhi.n	9000b74c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b732:	69bb      	ldr	r3, [r7, #24]
9000b734:	015a      	lsls	r2, r3, #5
9000b736:	697b      	ldr	r3, [r7, #20]
9000b738:	4413      	add	r3, r2
9000b73a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b73e:	681b      	ldr	r3, [r3, #0]
9000b740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b748:	d0ec      	beq.n	9000b724 <USB_StopHost+0xc8>
9000b74a:	e000      	b.n	9000b74e <USB_StopHost+0xf2>
        break;
9000b74c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b74e:	69bb      	ldr	r3, [r7, #24]
9000b750:	3301      	adds	r3, #1
9000b752:	61bb      	str	r3, [r7, #24]
9000b754:	69bb      	ldr	r3, [r7, #24]
9000b756:	2b0f      	cmp	r3, #15
9000b758:	d9c7      	bls.n	9000b6ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b75a:	697b      	ldr	r3, [r7, #20]
9000b75c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b760:	461a      	mov	r2, r3
9000b762:	f04f 33ff 	mov.w	r3, #4294967295
9000b766:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b768:	687b      	ldr	r3, [r7, #4]
9000b76a:	f04f 32ff 	mov.w	r2, #4294967295
9000b76e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b770:	6878      	ldr	r0, [r7, #4]
9000b772:	f7ff fce9 	bl	9000b148 <USB_EnableGlobalInt>

  return ret;
9000b776:	7ffb      	ldrb	r3, [r7, #31]
}
9000b778:	4618      	mov	r0, r3
9000b77a:	3720      	adds	r7, #32
9000b77c:	46bd      	mov	sp, r7
9000b77e:	bd80      	pop	{r7, pc}

9000b780 <setAllRowsInactive>:
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;
KeyboardButton receivedChar;

void setAllRowsInactive(void)
{
9000b780:	b580      	push	{r7, lr}
9000b782:	b082      	sub	sp, #8
9000b784:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000b786:	2300      	movs	r3, #0
9000b788:	607b      	str	r3, [r7, #4]
9000b78a:	e00f      	b.n	9000b7ac <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000b78c:	4a0b      	ldr	r2, [pc, #44]	@ (9000b7bc <setAllRowsInactive+0x3c>)
9000b78e:	687b      	ldr	r3, [r7, #4]
9000b790:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b794:	4a09      	ldr	r2, [pc, #36]	@ (9000b7bc <setAllRowsInactive+0x3c>)
9000b796:	687b      	ldr	r3, [r7, #4]
9000b798:	00db      	lsls	r3, r3, #3
9000b79a:	4413      	add	r3, r2
9000b79c:	889b      	ldrh	r3, [r3, #4]
9000b79e:	2200      	movs	r2, #0
9000b7a0:	4619      	mov	r1, r3
9000b7a2:	f7f8 fc13 	bl	90003fcc <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000b7a6:	687b      	ldr	r3, [r7, #4]
9000b7a8:	3301      	adds	r3, #1
9000b7aa:	607b      	str	r3, [r7, #4]
9000b7ac:	687b      	ldr	r3, [r7, #4]
9000b7ae:	2b04      	cmp	r3, #4
9000b7b0:	ddec      	ble.n	9000b78c <setAllRowsInactive+0xc>
    }
}
9000b7b2:	bf00      	nop
9000b7b4:	bf00      	nop
9000b7b6:	3708      	adds	r7, #8
9000b7b8:	46bd      	mov	sp, r7
9000b7ba:	bd80      	pop	{r7, pc}
9000b7bc:	20000018 	.word	0x20000018

9000b7c0 <setRowActive>:

void setRowActive(int row)
{
9000b7c0:	b580      	push	{r7, lr}
9000b7c2:	b082      	sub	sp, #8
9000b7c4:	af00      	add	r7, sp, #0
9000b7c6:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000b7c8:	687b      	ldr	r3, [r7, #4]
9000b7ca:	2b00      	cmp	r3, #0
9000b7cc:	db12      	blt.n	9000b7f4 <setRowActive+0x34>
9000b7ce:	687b      	ldr	r3, [r7, #4]
9000b7d0:	2b04      	cmp	r3, #4
9000b7d2:	dc0f      	bgt.n	9000b7f4 <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000b7d4:	f7ff ffd4 	bl	9000b780 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000b7d8:	4a08      	ldr	r2, [pc, #32]	@ (9000b7fc <setRowActive+0x3c>)
9000b7da:	687b      	ldr	r3, [r7, #4]
9000b7dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b7e0:	4a06      	ldr	r2, [pc, #24]	@ (9000b7fc <setRowActive+0x3c>)
9000b7e2:	687b      	ldr	r3, [r7, #4]
9000b7e4:	00db      	lsls	r3, r3, #3
9000b7e6:	4413      	add	r3, r2
9000b7e8:	889b      	ldrh	r3, [r3, #4]
9000b7ea:	2201      	movs	r2, #1
9000b7ec:	4619      	mov	r1, r3
9000b7ee:	f7f8 fbed 	bl	90003fcc <HAL_GPIO_WritePin>
9000b7f2:	e000      	b.n	9000b7f6 <setRowActive+0x36>
        return;
9000b7f4:	bf00      	nop
}
9000b7f6:	3708      	adds	r7, #8
9000b7f8:	46bd      	mov	sp, r7
9000b7fa:	bd80      	pop	{r7, pc}
9000b7fc:	20000018 	.word	0x20000018

9000b800 <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
9000b800:	b580      	push	{r7, lr}
9000b802:	b084      	sub	sp, #16
9000b804:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000b806:	2300      	movs	r3, #0
9000b808:	60fb      	str	r3, [r7, #12]
9000b80a:	e04e      	b.n	9000b8aa <ReadFlexiKeyboard+0xaa>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000b80c:	68f8      	ldr	r0, [r7, #12]
9000b80e:	f7ff ffd7 	bl	9000b7c0 <setRowActive>
        HAL_Delay(10);         // Small delay for settling
9000b812:	200a      	movs	r0, #10
9000b814:	f7f7 fd74 	bl	90003300 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000b818:	2300      	movs	r3, #0
9000b81a:	60bb      	str	r3, [r7, #8]
9000b81c:	e03f      	b.n	9000b89e <ReadFlexiKeyboard+0x9e>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000b81e:	4a27      	ldr	r2, [pc, #156]	@ (9000b8bc <ReadFlexiKeyboard+0xbc>)
9000b820:	68bb      	ldr	r3, [r7, #8]
9000b822:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000b826:	4925      	ldr	r1, [pc, #148]	@ (9000b8bc <ReadFlexiKeyboard+0xbc>)
9000b828:	68bb      	ldr	r3, [r7, #8]
9000b82a:	00db      	lsls	r3, r3, #3
9000b82c:	440b      	add	r3, r1
9000b82e:	889b      	ldrh	r3, [r3, #4]
9000b830:	4619      	mov	r1, r3
9000b832:	4610      	mov	r0, r2
9000b834:	f7f8 fbb2 	bl	90003f9c <HAL_GPIO_ReadPin>
9000b838:	4603      	mov	r3, r0
9000b83a:	2b01      	cmp	r3, #1
9000b83c:	d12c      	bne.n	9000b898 <ReadFlexiKeyboard+0x98>
            {
                uint32_t now = HAL_GetTick();
9000b83e:	f7f7 fd53 	bl	900032e8 <HAL_GetTick>
9000b842:	6078      	str	r0, [r7, #4]

                // Debounce/repeat suppression
                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) {
9000b844:	4b1e      	ldr	r3, [pc, #120]	@ (9000b8c0 <ReadFlexiKeyboard+0xc0>)
9000b846:	681b      	ldr	r3, [r3, #0]
9000b848:	68fa      	ldr	r2, [r7, #12]
9000b84a:	429a      	cmp	r2, r3
9000b84c:	d10d      	bne.n	9000b86a <ReadFlexiKeyboard+0x6a>
9000b84e:	4b1d      	ldr	r3, [pc, #116]	@ (9000b8c4 <ReadFlexiKeyboard+0xc4>)
9000b850:	681b      	ldr	r3, [r3, #0]
9000b852:	68ba      	ldr	r2, [r7, #8]
9000b854:	429a      	cmp	r2, r3
9000b856:	d108      	bne.n	9000b86a <ReadFlexiKeyboard+0x6a>
9000b858:	4b1b      	ldr	r3, [pc, #108]	@ (9000b8c8 <ReadFlexiKeyboard+0xc8>)
9000b85a:	681b      	ldr	r3, [r3, #0]
9000b85c:	687a      	ldr	r2, [r7, #4]
9000b85e:	1ad3      	subs	r3, r2, r3
9000b860:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
9000b864:	d201      	bcs.n	9000b86a <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
9000b866:	234e      	movs	r3, #78	@ 0x4e
9000b868:	e023      	b.n	9000b8b2 <ReadFlexiKeyboard+0xb2>
                }

                lastRow = row;
9000b86a:	4a15      	ldr	r2, [pc, #84]	@ (9000b8c0 <ReadFlexiKeyboard+0xc0>)
9000b86c:	68fb      	ldr	r3, [r7, #12]
9000b86e:	6013      	str	r3, [r2, #0]
                lastCol = col;
9000b870:	4a14      	ldr	r2, [pc, #80]	@ (9000b8c4 <ReadFlexiKeyboard+0xc4>)
9000b872:	68bb      	ldr	r3, [r7, #8]
9000b874:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
9000b876:	4a14      	ldr	r2, [pc, #80]	@ (9000b8c8 <ReadFlexiKeyboard+0xc8>)
9000b878:	687b      	ldr	r3, [r7, #4]
9000b87a:	6013      	str	r3, [r2, #0]

                receivedChar = keymap[row][col];
9000b87c:	4913      	ldr	r1, [pc, #76]	@ (9000b8cc <ReadFlexiKeyboard+0xcc>)
9000b87e:	68fa      	ldr	r2, [r7, #12]
9000b880:	4613      	mov	r3, r2
9000b882:	009b      	lsls	r3, r3, #2
9000b884:	4413      	add	r3, r2
9000b886:	18ca      	adds	r2, r1, r3
9000b888:	68bb      	ldr	r3, [r7, #8]
9000b88a:	4413      	add	r3, r2
9000b88c:	781a      	ldrb	r2, [r3, #0]
9000b88e:	4b10      	ldr	r3, [pc, #64]	@ (9000b8d0 <ReadFlexiKeyboard+0xd0>)
9000b890:	701a      	strb	r2, [r3, #0]
                //printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
                return receivedChar;
9000b892:	4b0f      	ldr	r3, [pc, #60]	@ (9000b8d0 <ReadFlexiKeyboard+0xd0>)
9000b894:	781b      	ldrb	r3, [r3, #0]
9000b896:	e00c      	b.n	9000b8b2 <ReadFlexiKeyboard+0xb2>
        for (int col = 0; col < NUM_COLS; col++)
9000b898:	68bb      	ldr	r3, [r7, #8]
9000b89a:	3301      	adds	r3, #1
9000b89c:	60bb      	str	r3, [r7, #8]
9000b89e:	68bb      	ldr	r3, [r7, #8]
9000b8a0:	2b04      	cmp	r3, #4
9000b8a2:	ddbc      	ble.n	9000b81e <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000b8a4:	68fb      	ldr	r3, [r7, #12]
9000b8a6:	3301      	adds	r3, #1
9000b8a8:	60fb      	str	r3, [r7, #12]
9000b8aa:	68fb      	ldr	r3, [r7, #12]
9000b8ac:	2b04      	cmp	r3, #4
9000b8ae:	ddad      	ble.n	9000b80c <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
9000b8b0:	234e      	movs	r3, #78	@ 0x4e
}
9000b8b2:	4618      	mov	r0, r3
9000b8b4:	3710      	adds	r7, #16
9000b8b6:	46bd      	mov	sp, r7
9000b8b8:	bd80      	pop	{r7, pc}
9000b8ba:	bf00      	nop
9000b8bc:	20000040 	.word	0x20000040
9000b8c0:	20000068 	.word	0x20000068
9000b8c4:	2000006c 	.word	0x2000006c
9000b8c8:	200012e0 	.word	0x200012e0
9000b8cc:	9000d840 	.word	0x9000d840
9000b8d0:	200012e4 	.word	0x200012e4

9000b8d4 <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000b8d4:	b580      	push	{r7, lr}
9000b8d6:	b090      	sub	sp, #64	@ 0x40
9000b8d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000b8da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b8de:	2200      	movs	r2, #0
9000b8e0:	601a      	str	r2, [r3, #0]
9000b8e2:	605a      	str	r2, [r3, #4]
9000b8e4:	609a      	str	r2, [r3, #8]
9000b8e6:	60da      	str	r2, [r3, #12]
9000b8e8:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000b8ea:	4b5c      	ldr	r3, [pc, #368]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b8ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8f0:	4a5a      	ldr	r2, [pc, #360]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b8f2:	f043 0301 	orr.w	r3, r3, #1
9000b8f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8fa:	4b58      	ldr	r3, [pc, #352]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b8fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b900:	f003 0301 	and.w	r3, r3, #1
9000b904:	623b      	str	r3, [r7, #32]
9000b906:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000b908:	4b54      	ldr	r3, [pc, #336]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b90a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b90e:	4a53      	ldr	r2, [pc, #332]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b910:	f043 0302 	orr.w	r3, r3, #2
9000b914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b918:	4b50      	ldr	r3, [pc, #320]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b91a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b91e:	f003 0302 	and.w	r3, r3, #2
9000b922:	61fb      	str	r3, [r7, #28]
9000b924:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000b926:	4b4d      	ldr	r3, [pc, #308]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b92c:	4a4b      	ldr	r2, [pc, #300]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b92e:	f043 0308 	orr.w	r3, r3, #8
9000b932:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b936:	4b49      	ldr	r3, [pc, #292]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b93c:	f003 0308 	and.w	r3, r3, #8
9000b940:	61bb      	str	r3, [r7, #24]
9000b942:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000b944:	4b45      	ldr	r3, [pc, #276]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b94a:	4a44      	ldr	r2, [pc, #272]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b94c:	f043 0310 	orr.w	r3, r3, #16
9000b950:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b954:	4b41      	ldr	r3, [pc, #260]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b95a:	f003 0310 	and.w	r3, r3, #16
9000b95e:	617b      	str	r3, [r7, #20]
9000b960:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000b962:	4b3e      	ldr	r3, [pc, #248]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b968:	4a3c      	ldr	r2, [pc, #240]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b96a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000b96e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b972:	4b3a      	ldr	r3, [pc, #232]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b97c:	613b      	str	r3, [r7, #16]
9000b97e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000b980:	4b36      	ldr	r3, [pc, #216]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b986:	4a35      	ldr	r2, [pc, #212]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000b98c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b990:	4b32      	ldr	r3, [pc, #200]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b99a:	60fb      	str	r3, [r7, #12]
9000b99c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000b99e:	4b2f      	ldr	r3, [pc, #188]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b9a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9a4:	4a2d      	ldr	r2, [pc, #180]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b9a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000b9aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b9ae:	4b2b      	ldr	r3, [pc, #172]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b9b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000b9b8:	60bb      	str	r3, [r7, #8]
9000b9ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000b9bc:	4b27      	ldr	r3, [pc, #156]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b9be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9c2:	4a26      	ldr	r2, [pc, #152]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b9c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000b9c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b9cc:	4b23      	ldr	r3, [pc, #140]	@ (9000ba5c <InitFlexiKeyboard+0x188>)
9000b9ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b9d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000b9d6:	607b      	str	r3, [r7, #4]
9000b9d8:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000b9da:	2301      	movs	r3, #1
9000b9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000b9de:	2300      	movs	r3, #0
9000b9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000b9e2:	2300      	movs	r3, #0
9000b9e4:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000b9e6:	2300      	movs	r3, #0
9000b9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b9ea:	e012      	b.n	9000ba12 <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000b9ec:	4a1c      	ldr	r2, [pc, #112]	@ (9000ba60 <InitFlexiKeyboard+0x18c>)
9000b9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b9f0:	00db      	lsls	r3, r3, #3
9000b9f2:	4413      	add	r3, r2
9000b9f4:	889b      	ldrh	r3, [r3, #4]
9000b9f6:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000b9f8:	4a19      	ldr	r2, [pc, #100]	@ (9000ba60 <InitFlexiKeyboard+0x18c>)
9000b9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b9fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000ba00:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000ba04:	4611      	mov	r1, r2
9000ba06:	4618      	mov	r0, r3
9000ba08:	f7f8 f918 	bl	90003c3c <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000ba0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000ba0e:	3301      	adds	r3, #1
9000ba10:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000ba12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000ba14:	2b04      	cmp	r3, #4
9000ba16:	dde9      	ble.n	9000b9ec <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000ba18:	2300      	movs	r3, #0
9000ba1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000ba1c:	2302      	movs	r3, #2
9000ba1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000ba20:	2300      	movs	r3, #0
9000ba22:	63bb      	str	r3, [r7, #56]	@ 0x38
9000ba24:	e012      	b.n	9000ba4c <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000ba26:	4a0f      	ldr	r2, [pc, #60]	@ (9000ba64 <InitFlexiKeyboard+0x190>)
9000ba28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba2a:	00db      	lsls	r3, r3, #3
9000ba2c:	4413      	add	r3, r2
9000ba2e:	889b      	ldrh	r3, [r3, #4]
9000ba30:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000ba32:	4a0c      	ldr	r2, [pc, #48]	@ (9000ba64 <InitFlexiKeyboard+0x190>)
9000ba34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000ba3a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000ba3e:	4611      	mov	r1, r2
9000ba40:	4618      	mov	r0, r3
9000ba42:	f7f8 f8fb 	bl	90003c3c <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba48:	3301      	adds	r3, #1
9000ba4a:	63bb      	str	r3, [r7, #56]	@ 0x38
9000ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ba4e:	2b04      	cmp	r3, #4
9000ba50:	dde9      	ble.n	9000ba26 <InitFlexiKeyboard+0x152>
	}
}
9000ba52:	bf00      	nop
9000ba54:	bf00      	nop
9000ba56:	3740      	adds	r7, #64	@ 0x40
9000ba58:	46bd      	mov	sp, r7
9000ba5a:	bd80      	pop	{r7, pc}
9000ba5c:	58024400 	.word	0x58024400
9000ba60:	20000018 	.word	0x20000018
9000ba64:	20000040 	.word	0x20000040

9000ba68 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000ba68:	b580      	push	{r7, lr}
9000ba6a:	b082      	sub	sp, #8
9000ba6c:	af00      	add	r7, sp, #0
9000ba6e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000ba70:	687b      	ldr	r3, [r7, #4]
9000ba72:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000ba76:	1c5a      	adds	r2, r3, #1
9000ba78:	687b      	ldr	r3, [r7, #4]
9000ba7a:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000ba7e:	6878      	ldr	r0, [r7, #4]
9000ba80:	f000 f804 	bl	9000ba8c <USBH_HandleSof>
}
9000ba84:	bf00      	nop
9000ba86:	3708      	adds	r7, #8
9000ba88:	46bd      	mov	sp, r7
9000ba8a:	bd80      	pop	{r7, pc}

9000ba8c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000ba8c:	b580      	push	{r7, lr}
9000ba8e:	b082      	sub	sp, #8
9000ba90:	af00      	add	r7, sp, #0
9000ba92:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000ba94:	687b      	ldr	r3, [r7, #4]
9000ba96:	781b      	ldrb	r3, [r3, #0]
9000ba98:	b2db      	uxtb	r3, r3
9000ba9a:	2b0b      	cmp	r3, #11
9000ba9c:	d10a      	bne.n	9000bab4 <USBH_HandleSof+0x28>
9000ba9e:	687b      	ldr	r3, [r7, #4]
9000baa0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000baa4:	2b00      	cmp	r3, #0
9000baa6:	d005      	beq.n	9000bab4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000baa8:	687b      	ldr	r3, [r7, #4]
9000baaa:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000baae:	699b      	ldr	r3, [r3, #24]
9000bab0:	6878      	ldr	r0, [r7, #4]
9000bab2:	4798      	blx	r3
  }
}
9000bab4:	bf00      	nop
9000bab6:	3708      	adds	r7, #8
9000bab8:	46bd      	mov	sp, r7
9000baba:	bd80      	pop	{r7, pc}

9000babc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000babc:	b480      	push	{r7}
9000babe:	b083      	sub	sp, #12
9000bac0:	af00      	add	r7, sp, #0
9000bac2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000bac4:	687b      	ldr	r3, [r7, #4]
9000bac6:	2201      	movs	r2, #1
9000bac8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000bacc:	bf00      	nop
}
9000bace:	370c      	adds	r7, #12
9000bad0:	46bd      	mov	sp, r7
9000bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bad6:	4770      	bx	lr

9000bad8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000bad8:	b480      	push	{r7}
9000bada:	b083      	sub	sp, #12
9000badc:	af00      	add	r7, sp, #0
9000bade:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000bae0:	687b      	ldr	r3, [r7, #4]
9000bae2:	2200      	movs	r2, #0
9000bae4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000bae8:	687b      	ldr	r3, [r7, #4]
9000baea:	2201      	movs	r2, #1
9000baec:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000baf0:	bf00      	nop
}
9000baf2:	370c      	adds	r7, #12
9000baf4:	46bd      	mov	sp, r7
9000baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bafa:	4770      	bx	lr

9000bafc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000bafc:	b480      	push	{r7}
9000bafe:	b083      	sub	sp, #12
9000bb00:	af00      	add	r7, sp, #0
9000bb02:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000bb04:	687b      	ldr	r3, [r7, #4]
9000bb06:	2201      	movs	r2, #1
9000bb08:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000bb0c:	687b      	ldr	r3, [r7, #4]
9000bb0e:	2200      	movs	r2, #0
9000bb10:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000bb14:	687b      	ldr	r3, [r7, #4]
9000bb16:	2200      	movs	r2, #0
9000bb18:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000bb1c:	2300      	movs	r3, #0
}
9000bb1e:	4618      	mov	r0, r3
9000bb20:	370c      	adds	r7, #12
9000bb22:	46bd      	mov	sp, r7
9000bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb28:	4770      	bx	lr

9000bb2a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000bb2a:	b580      	push	{r7, lr}
9000bb2c:	b082      	sub	sp, #8
9000bb2e:	af00      	add	r7, sp, #0
9000bb30:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000bb32:	687b      	ldr	r3, [r7, #4]
9000bb34:	2201      	movs	r2, #1
9000bb36:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000bb3a:	687b      	ldr	r3, [r7, #4]
9000bb3c:	2200      	movs	r2, #0
9000bb3e:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000bb42:	687b      	ldr	r3, [r7, #4]
9000bb44:	2200      	movs	r2, #0
9000bb46:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000bb4a:	6878      	ldr	r0, [r7, #4]
9000bb4c:	f7f5 fb32 	bl	900011b4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000bb50:	687b      	ldr	r3, [r7, #4]
9000bb52:	791b      	ldrb	r3, [r3, #4]
9000bb54:	4619      	mov	r1, r3
9000bb56:	6878      	ldr	r0, [r7, #4]
9000bb58:	f000 f80b 	bl	9000bb72 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000bb5c:	687b      	ldr	r3, [r7, #4]
9000bb5e:	795b      	ldrb	r3, [r3, #5]
9000bb60:	4619      	mov	r1, r3
9000bb62:	6878      	ldr	r0, [r7, #4]
9000bb64:	f000 f805 	bl	9000bb72 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000bb68:	2300      	movs	r3, #0
}
9000bb6a:	4618      	mov	r0, r3
9000bb6c:	3708      	adds	r7, #8
9000bb6e:	46bd      	mov	sp, r7
9000bb70:	bd80      	pop	{r7, pc}

9000bb72 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000bb72:	b480      	push	{r7}
9000bb74:	b083      	sub	sp, #12
9000bb76:	af00      	add	r7, sp, #0
9000bb78:	6078      	str	r0, [r7, #4]
9000bb7a:	460b      	mov	r3, r1
9000bb7c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000bb7e:	78fb      	ldrb	r3, [r7, #3]
9000bb80:	2b0f      	cmp	r3, #15
9000bb82:	d80f      	bhi.n	9000bba4 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000bb84:	78fb      	ldrb	r3, [r7, #3]
9000bb86:	687a      	ldr	r2, [r7, #4]
9000bb88:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bb8c:	009b      	lsls	r3, r3, #2
9000bb8e:	4413      	add	r3, r2
9000bb90:	685a      	ldr	r2, [r3, #4]
9000bb92:	78fb      	ldrb	r3, [r7, #3]
9000bb94:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000bb98:	6879      	ldr	r1, [r7, #4]
9000bb9a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000bb9e:	009b      	lsls	r3, r3, #2
9000bba0:	440b      	add	r3, r1
9000bba2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000bba4:	2300      	movs	r3, #0
}
9000bba6:	4618      	mov	r0, r3
9000bba8:	370c      	adds	r7, #12
9000bbaa:	46bd      	mov	sp, r7
9000bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bbb0:	4770      	bx	lr
	...

9000bbb4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000bbb4:	b580      	push	{r7, lr}
9000bbb6:	b082      	sub	sp, #8
9000bbb8:	af00      	add	r7, sp, #0
9000bbba:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000bbbc:	687b      	ldr	r3, [r7, #4]
9000bbbe:	681b      	ldr	r3, [r3, #0]
9000bbc0:	4a22      	ldr	r2, [pc, #136]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bbc2:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000bbc4:	687b      	ldr	r3, [r7, #4]
9000bbc6:	685b      	ldr	r3, [r3, #4]
9000bbc8:	4a20      	ldr	r2, [pc, #128]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bbca:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000bbcc:	687b      	ldr	r3, [r7, #4]
9000bbce:	689b      	ldr	r3, [r3, #8]
9000bbd0:	4a1e      	ldr	r2, [pc, #120]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bbd2:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000bbd4:	687b      	ldr	r3, [r7, #4]
9000bbd6:	68db      	ldr	r3, [r3, #12]
9000bbd8:	4a1c      	ldr	r2, [pc, #112]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bbda:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000bbdc:	687b      	ldr	r3, [r7, #4]
9000bbde:	691b      	ldr	r3, [r3, #16]
9000bbe0:	4a1a      	ldr	r2, [pc, #104]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bbe2:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000bbe4:	687b      	ldr	r3, [r7, #4]
9000bbe6:	695b      	ldr	r3, [r3, #20]
9000bbe8:	4a18      	ldr	r2, [pc, #96]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bbea:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000bbec:	687b      	ldr	r3, [r7, #4]
9000bbee:	699b      	ldr	r3, [r3, #24]
9000bbf0:	4a16      	ldr	r2, [pc, #88]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bbf2:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000bbf4:	687b      	ldr	r3, [r7, #4]
9000bbf6:	69db      	ldr	r3, [r3, #28]
9000bbf8:	4a14      	ldr	r2, [pc, #80]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bbfa:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000bbfc:	687b      	ldr	r3, [r7, #4]
9000bbfe:	6a1b      	ldr	r3, [r3, #32]
9000bc00:	4a12      	ldr	r2, [pc, #72]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bc02:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000bc04:	687b      	ldr	r3, [r7, #4]
9000bc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bc08:	4a10      	ldr	r2, [pc, #64]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bc0a:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000bc0c:	687b      	ldr	r3, [r7, #4]
9000bc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bc10:	4a0e      	ldr	r2, [pc, #56]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bc12:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000bc14:	4b0e      	ldr	r3, [pc, #56]	@ (9000bc50 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bc16:	2200      	movs	r2, #0
9000bc18:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000bc1a:	4b0d      	ldr	r3, [pc, #52]	@ (9000bc50 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bc1c:	2200      	movs	r2, #0
9000bc1e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000bc20:	4b0a      	ldr	r3, [pc, #40]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bc22:	69db      	ldr	r3, [r3, #28]
9000bc24:	4a0b      	ldr	r2, [pc, #44]	@ (9000bc54 <UTIL_LCD_SetFuncDriver+0xa0>)
9000bc26:	4611      	mov	r1, r2
9000bc28:	2000      	movs	r0, #0
9000bc2a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000bc2c:	4b07      	ldr	r3, [pc, #28]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bc2e:	6a1b      	ldr	r3, [r3, #32]
9000bc30:	4a09      	ldr	r2, [pc, #36]	@ (9000bc58 <UTIL_LCD_SetFuncDriver+0xa4>)
9000bc32:	4611      	mov	r1, r2
9000bc34:	2000      	movs	r0, #0
9000bc36:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000bc38:	4b04      	ldr	r3, [pc, #16]	@ (9000bc4c <UTIL_LCD_SetFuncDriver+0x98>)
9000bc3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bc3c:	4a07      	ldr	r2, [pc, #28]	@ (9000bc5c <UTIL_LCD_SetFuncDriver+0xa8>)
9000bc3e:	4611      	mov	r1, r2
9000bc40:	2000      	movs	r0, #0
9000bc42:	4798      	blx	r3
}
9000bc44:	bf00      	nop
9000bc46:	3708      	adds	r7, #8
9000bc48:	46bd      	mov	sp, r7
9000bc4a:	bd80      	pop	{r7, pc}
9000bc4c:	20001328 	.word	0x20001328
9000bc50:	200012e8 	.word	0x200012e8
9000bc54:	200012fc 	.word	0x200012fc
9000bc58:	20001300 	.word	0x20001300
9000bc5c:	20001304 	.word	0x20001304

9000bc60 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000bc60:	b580      	push	{r7, lr}
9000bc62:	b082      	sub	sp, #8
9000bc64:	af00      	add	r7, sp, #0
9000bc66:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000bc68:	4b0a      	ldr	r3, [pc, #40]	@ (9000bc94 <UTIL_LCD_SetLayer+0x34>)
9000bc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bc6c:	2b00      	cmp	r3, #0
9000bc6e:	d00c      	beq.n	9000bc8a <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000bc70:	4b08      	ldr	r3, [pc, #32]	@ (9000bc94 <UTIL_LCD_SetLayer+0x34>)
9000bc72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bc74:	4a08      	ldr	r2, [pc, #32]	@ (9000bc98 <UTIL_LCD_SetLayer+0x38>)
9000bc76:	6912      	ldr	r2, [r2, #16]
9000bc78:	6879      	ldr	r1, [r7, #4]
9000bc7a:	4610      	mov	r0, r2
9000bc7c:	4798      	blx	r3
9000bc7e:	4603      	mov	r3, r0
9000bc80:	2b00      	cmp	r3, #0
9000bc82:	d102      	bne.n	9000bc8a <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000bc84:	4a04      	ldr	r2, [pc, #16]	@ (9000bc98 <UTIL_LCD_SetLayer+0x38>)
9000bc86:	687b      	ldr	r3, [r7, #4]
9000bc88:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000bc8a:	bf00      	nop
9000bc8c:	3708      	adds	r7, #8
9000bc8e:	46bd      	mov	sp, r7
9000bc90:	bd80      	pop	{r7, pc}
9000bc92:	bf00      	nop
9000bc94:	20001328 	.word	0x20001328
9000bc98:	200012e8 	.word	0x200012e8

9000bc9c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000bc9c:	b480      	push	{r7}
9000bc9e:	b083      	sub	sp, #12
9000bca0:	af00      	add	r7, sp, #0
9000bca2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000bca4:	4b06      	ldr	r3, [pc, #24]	@ (9000bcc0 <UTIL_LCD_SetTextColor+0x24>)
9000bca6:	68db      	ldr	r3, [r3, #12]
9000bca8:	4a05      	ldr	r2, [pc, #20]	@ (9000bcc0 <UTIL_LCD_SetTextColor+0x24>)
9000bcaa:	015b      	lsls	r3, r3, #5
9000bcac:	4413      	add	r3, r2
9000bcae:	687a      	ldr	r2, [r7, #4]
9000bcb0:	601a      	str	r2, [r3, #0]
}
9000bcb2:	bf00      	nop
9000bcb4:	370c      	adds	r7, #12
9000bcb6:	46bd      	mov	sp, r7
9000bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcbc:	4770      	bx	lr
9000bcbe:	bf00      	nop
9000bcc0:	200012e8 	.word	0x200012e8

9000bcc4 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000bcc4:	b480      	push	{r7}
9000bcc6:	b083      	sub	sp, #12
9000bcc8:	af00      	add	r7, sp, #0
9000bcca:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000bccc:	4b06      	ldr	r3, [pc, #24]	@ (9000bce8 <UTIL_LCD_SetBackColor+0x24>)
9000bcce:	68db      	ldr	r3, [r3, #12]
9000bcd0:	4a05      	ldr	r2, [pc, #20]	@ (9000bce8 <UTIL_LCD_SetBackColor+0x24>)
9000bcd2:	015b      	lsls	r3, r3, #5
9000bcd4:	4413      	add	r3, r2
9000bcd6:	3304      	adds	r3, #4
9000bcd8:	687a      	ldr	r2, [r7, #4]
9000bcda:	601a      	str	r2, [r3, #0]
}
9000bcdc:	bf00      	nop
9000bcde:	370c      	adds	r7, #12
9000bce0:	46bd      	mov	sp, r7
9000bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bce6:	4770      	bx	lr
9000bce8:	200012e8 	.word	0x200012e8

9000bcec <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000bcec:	b480      	push	{r7}
9000bcee:	b083      	sub	sp, #12
9000bcf0:	af00      	add	r7, sp, #0
9000bcf2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000bcf4:	4b06      	ldr	r3, [pc, #24]	@ (9000bd10 <UTIL_LCD_SetFont+0x24>)
9000bcf6:	68db      	ldr	r3, [r3, #12]
9000bcf8:	4a05      	ldr	r2, [pc, #20]	@ (9000bd10 <UTIL_LCD_SetFont+0x24>)
9000bcfa:	015b      	lsls	r3, r3, #5
9000bcfc:	4413      	add	r3, r2
9000bcfe:	3308      	adds	r3, #8
9000bd00:	687a      	ldr	r2, [r7, #4]
9000bd02:	601a      	str	r2, [r3, #0]
}
9000bd04:	bf00      	nop
9000bd06:	370c      	adds	r7, #12
9000bd08:	46bd      	mov	sp, r7
9000bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bd0e:	4770      	bx	lr
9000bd10:	200012e8 	.word	0x200012e8

9000bd14 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000bd14:	b590      	push	{r4, r7, lr}
9000bd16:	b087      	sub	sp, #28
9000bd18:	af02      	add	r7, sp, #8
9000bd1a:	60f8      	str	r0, [r7, #12]
9000bd1c:	60b9      	str	r1, [r7, #8]
9000bd1e:	607a      	str	r2, [r7, #4]
9000bd20:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000bd22:	4b08      	ldr	r3, [pc, #32]	@ (9000bd44 <UTIL_LCD_FillRGBRect+0x30>)
9000bd24:	685c      	ldr	r4, [r3, #4]
9000bd26:	4b08      	ldr	r3, [pc, #32]	@ (9000bd48 <UTIL_LCD_FillRGBRect+0x34>)
9000bd28:	6918      	ldr	r0, [r3, #16]
9000bd2a:	6a3b      	ldr	r3, [r7, #32]
9000bd2c:	9301      	str	r3, [sp, #4]
9000bd2e:	683b      	ldr	r3, [r7, #0]
9000bd30:	9300      	str	r3, [sp, #0]
9000bd32:	687b      	ldr	r3, [r7, #4]
9000bd34:	68ba      	ldr	r2, [r7, #8]
9000bd36:	68f9      	ldr	r1, [r7, #12]
9000bd38:	47a0      	blx	r4
}
9000bd3a:	bf00      	nop
9000bd3c:	3714      	adds	r7, #20
9000bd3e:	46bd      	mov	sp, r7
9000bd40:	bd90      	pop	{r4, r7, pc}
9000bd42:	bf00      	nop
9000bd44:	20001328 	.word	0x20001328
9000bd48:	200012e8 	.word	0x200012e8

9000bd4c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000bd4c:	b580      	push	{r7, lr}
9000bd4e:	b084      	sub	sp, #16
9000bd50:	af02      	add	r7, sp, #8
9000bd52:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000bd54:	4b07      	ldr	r3, [pc, #28]	@ (9000bd74 <UTIL_LCD_Clear+0x28>)
9000bd56:	695a      	ldr	r2, [r3, #20]
9000bd58:	4b06      	ldr	r3, [pc, #24]	@ (9000bd74 <UTIL_LCD_Clear+0x28>)
9000bd5a:	6999      	ldr	r1, [r3, #24]
9000bd5c:	687b      	ldr	r3, [r7, #4]
9000bd5e:	9300      	str	r3, [sp, #0]
9000bd60:	460b      	mov	r3, r1
9000bd62:	2100      	movs	r1, #0
9000bd64:	2000      	movs	r0, #0
9000bd66:	f000 f8eb 	bl	9000bf40 <UTIL_LCD_FillRect>
}
9000bd6a:	bf00      	nop
9000bd6c:	3708      	adds	r7, #8
9000bd6e:	46bd      	mov	sp, r7
9000bd70:	bd80      	pop	{r7, pc}
9000bd72:	bf00      	nop
9000bd74:	200012e8 	.word	0x200012e8

9000bd78 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000bd78:	b580      	push	{r7, lr}
9000bd7a:	b084      	sub	sp, #16
9000bd7c:	af00      	add	r7, sp, #0
9000bd7e:	60f8      	str	r0, [r7, #12]
9000bd80:	60b9      	str	r1, [r7, #8]
9000bd82:	4613      	mov	r3, r2
9000bd84:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bd86:	4b16      	ldr	r3, [pc, #88]	@ (9000bde0 <UTIL_LCD_DisplayChar+0x68>)
9000bd88:	68db      	ldr	r3, [r3, #12]
9000bd8a:	4a15      	ldr	r2, [pc, #84]	@ (9000bde0 <UTIL_LCD_DisplayChar+0x68>)
9000bd8c:	015b      	lsls	r3, r3, #5
9000bd8e:	4413      	add	r3, r2
9000bd90:	3308      	adds	r3, #8
9000bd92:	681b      	ldr	r3, [r3, #0]
9000bd94:	681a      	ldr	r2, [r3, #0]
9000bd96:	79fb      	ldrb	r3, [r7, #7]
9000bd98:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bd9a:	4911      	ldr	r1, [pc, #68]	@ (9000bde0 <UTIL_LCD_DisplayChar+0x68>)
9000bd9c:	68c9      	ldr	r1, [r1, #12]
9000bd9e:	4810      	ldr	r0, [pc, #64]	@ (9000bde0 <UTIL_LCD_DisplayChar+0x68>)
9000bda0:	0149      	lsls	r1, r1, #5
9000bda2:	4401      	add	r1, r0
9000bda4:	3108      	adds	r1, #8
9000bda6:	6809      	ldr	r1, [r1, #0]
9000bda8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bdaa:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bdae:	4b0c      	ldr	r3, [pc, #48]	@ (9000bde0 <UTIL_LCD_DisplayChar+0x68>)
9000bdb0:	68db      	ldr	r3, [r3, #12]
9000bdb2:	480b      	ldr	r0, [pc, #44]	@ (9000bde0 <UTIL_LCD_DisplayChar+0x68>)
9000bdb4:	015b      	lsls	r3, r3, #5
9000bdb6:	4403      	add	r3, r0
9000bdb8:	3308      	adds	r3, #8
9000bdba:	681b      	ldr	r3, [r3, #0]
9000bdbc:	889b      	ldrh	r3, [r3, #4]
9000bdbe:	3307      	adds	r3, #7
9000bdc0:	2b00      	cmp	r3, #0
9000bdc2:	da00      	bge.n	9000bdc6 <UTIL_LCD_DisplayChar+0x4e>
9000bdc4:	3307      	adds	r3, #7
9000bdc6:	10db      	asrs	r3, r3, #3
9000bdc8:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bdcc:	4413      	add	r3, r2
9000bdce:	461a      	mov	r2, r3
9000bdd0:	68b9      	ldr	r1, [r7, #8]
9000bdd2:	68f8      	ldr	r0, [r7, #12]
9000bdd4:	f000 f8ee 	bl	9000bfb4 <DrawChar>
}
9000bdd8:	bf00      	nop
9000bdda:	3710      	adds	r7, #16
9000bddc:	46bd      	mov	sp, r7
9000bdde:	bd80      	pop	{r7, pc}
9000bde0:	200012e8 	.word	0x200012e8

9000bde4 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000bde4:	b580      	push	{r7, lr}
9000bde6:	b08a      	sub	sp, #40	@ 0x28
9000bde8:	af00      	add	r7, sp, #0
9000bdea:	60f8      	str	r0, [r7, #12]
9000bdec:	60b9      	str	r1, [r7, #8]
9000bdee:	607a      	str	r2, [r7, #4]
9000bdf0:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000bdf2:	2301      	movs	r3, #1
9000bdf4:	627b      	str	r3, [r7, #36]	@ 0x24
9000bdf6:	2300      	movs	r3, #0
9000bdf8:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000bdfa:	2300      	movs	r3, #0
9000bdfc:	61fb      	str	r3, [r7, #28]
9000bdfe:	2300      	movs	r3, #0
9000be00:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000be02:	687b      	ldr	r3, [r7, #4]
9000be04:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000be06:	e002      	b.n	9000be0e <UTIL_LCD_DisplayStringAt+0x2a>
9000be08:	69fb      	ldr	r3, [r7, #28]
9000be0a:	3301      	adds	r3, #1
9000be0c:	61fb      	str	r3, [r7, #28]
9000be0e:	69bb      	ldr	r3, [r7, #24]
9000be10:	1c5a      	adds	r2, r3, #1
9000be12:	61ba      	str	r2, [r7, #24]
9000be14:	781b      	ldrb	r3, [r3, #0]
9000be16:	2b00      	cmp	r3, #0
9000be18:	d1f6      	bne.n	9000be08 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000be1a:	4b48      	ldr	r3, [pc, #288]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000be1c:	695b      	ldr	r3, [r3, #20]
9000be1e:	4a47      	ldr	r2, [pc, #284]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000be20:	68d2      	ldr	r2, [r2, #12]
9000be22:	4946      	ldr	r1, [pc, #280]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000be24:	0152      	lsls	r2, r2, #5
9000be26:	440a      	add	r2, r1
9000be28:	3208      	adds	r2, #8
9000be2a:	6812      	ldr	r2, [r2, #0]
9000be2c:	8892      	ldrh	r2, [r2, #4]
9000be2e:	fbb3 f3f2 	udiv	r3, r3, r2
9000be32:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000be34:	78fb      	ldrb	r3, [r7, #3]
9000be36:	2b03      	cmp	r3, #3
9000be38:	d018      	beq.n	9000be6c <UTIL_LCD_DisplayStringAt+0x88>
9000be3a:	2b03      	cmp	r3, #3
9000be3c:	dc2a      	bgt.n	9000be94 <UTIL_LCD_DisplayStringAt+0xb0>
9000be3e:	2b01      	cmp	r3, #1
9000be40:	d002      	beq.n	9000be48 <UTIL_LCD_DisplayStringAt+0x64>
9000be42:	2b02      	cmp	r3, #2
9000be44:	d015      	beq.n	9000be72 <UTIL_LCD_DisplayStringAt+0x8e>
9000be46:	e025      	b.n	9000be94 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000be48:	697a      	ldr	r2, [r7, #20]
9000be4a:	69fb      	ldr	r3, [r7, #28]
9000be4c:	1ad3      	subs	r3, r2, r3
9000be4e:	4a3b      	ldr	r2, [pc, #236]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000be50:	68d2      	ldr	r2, [r2, #12]
9000be52:	493a      	ldr	r1, [pc, #232]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000be54:	0152      	lsls	r2, r2, #5
9000be56:	440a      	add	r2, r1
9000be58:	3208      	adds	r2, #8
9000be5a:	6812      	ldr	r2, [r2, #0]
9000be5c:	8892      	ldrh	r2, [r2, #4]
9000be5e:	fb02 f303 	mul.w	r3, r2, r3
9000be62:	085b      	lsrs	r3, r3, #1
9000be64:	68fa      	ldr	r2, [r7, #12]
9000be66:	4413      	add	r3, r2
9000be68:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be6a:	e016      	b.n	9000be9a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000be6c:	68fb      	ldr	r3, [r7, #12]
9000be6e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be70:	e013      	b.n	9000be9a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000be72:	697a      	ldr	r2, [r7, #20]
9000be74:	69fb      	ldr	r3, [r7, #28]
9000be76:	1ad3      	subs	r3, r2, r3
9000be78:	4a30      	ldr	r2, [pc, #192]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000be7a:	68d2      	ldr	r2, [r2, #12]
9000be7c:	492f      	ldr	r1, [pc, #188]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000be7e:	0152      	lsls	r2, r2, #5
9000be80:	440a      	add	r2, r1
9000be82:	3208      	adds	r2, #8
9000be84:	6812      	ldr	r2, [r2, #0]
9000be86:	8892      	ldrh	r2, [r2, #4]
9000be88:	fb03 f202 	mul.w	r2, r3, r2
9000be8c:	68fb      	ldr	r3, [r7, #12]
9000be8e:	1ad3      	subs	r3, r2, r3
9000be90:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be92:	e002      	b.n	9000be9a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000be94:	68fb      	ldr	r3, [r7, #12]
9000be96:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000be98:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000be9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000be9c:	2b00      	cmp	r3, #0
9000be9e:	d003      	beq.n	9000bea8 <UTIL_LCD_DisplayStringAt+0xc4>
9000bea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000bea6:	d31b      	bcc.n	9000bee0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000bea8:	2301      	movs	r3, #1
9000beaa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000beac:	e018      	b.n	9000bee0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000beae:	687b      	ldr	r3, [r7, #4]
9000beb0:	781b      	ldrb	r3, [r3, #0]
9000beb2:	461a      	mov	r2, r3
9000beb4:	68b9      	ldr	r1, [r7, #8]
9000beb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000beb8:	f7ff ff5e 	bl	9000bd78 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bebc:	4b1f      	ldr	r3, [pc, #124]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000bebe:	68db      	ldr	r3, [r3, #12]
9000bec0:	4a1e      	ldr	r2, [pc, #120]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000bec2:	015b      	lsls	r3, r3, #5
9000bec4:	4413      	add	r3, r2
9000bec6:	3308      	adds	r3, #8
9000bec8:	681b      	ldr	r3, [r3, #0]
9000beca:	889b      	ldrh	r3, [r3, #4]
9000becc:	461a      	mov	r2, r3
9000bece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bed0:	4413      	add	r3, r2
9000bed2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000bed4:	687b      	ldr	r3, [r7, #4]
9000bed6:	3301      	adds	r3, #1
9000bed8:	607b      	str	r3, [r7, #4]
    i++;
9000beda:	6a3b      	ldr	r3, [r7, #32]
9000bedc:	3301      	adds	r3, #1
9000bede:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000bee0:	687b      	ldr	r3, [r7, #4]
9000bee2:	781b      	ldrb	r3, [r3, #0]
9000bee4:	2b00      	cmp	r3, #0
9000bee6:	bf14      	ite	ne
9000bee8:	2301      	movne	r3, #1
9000beea:	2300      	moveq	r3, #0
9000beec:	b2da      	uxtb	r2, r3
9000beee:	4b13      	ldr	r3, [pc, #76]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000bef0:	6959      	ldr	r1, [r3, #20]
9000bef2:	4b12      	ldr	r3, [pc, #72]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000bef4:	68db      	ldr	r3, [r3, #12]
9000bef6:	4811      	ldr	r0, [pc, #68]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000bef8:	015b      	lsls	r3, r3, #5
9000befa:	4403      	add	r3, r0
9000befc:	3308      	adds	r3, #8
9000befe:	681b      	ldr	r3, [r3, #0]
9000bf00:	889b      	ldrh	r3, [r3, #4]
9000bf02:	4618      	mov	r0, r3
9000bf04:	6a3b      	ldr	r3, [r7, #32]
9000bf06:	fb00 f303 	mul.w	r3, r0, r3
9000bf0a:	1acb      	subs	r3, r1, r3
9000bf0c:	b29b      	uxth	r3, r3
9000bf0e:	490b      	ldr	r1, [pc, #44]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000bf10:	68c9      	ldr	r1, [r1, #12]
9000bf12:	480a      	ldr	r0, [pc, #40]	@ (9000bf3c <UTIL_LCD_DisplayStringAt+0x158>)
9000bf14:	0149      	lsls	r1, r1, #5
9000bf16:	4401      	add	r1, r0
9000bf18:	3108      	adds	r1, #8
9000bf1a:	6809      	ldr	r1, [r1, #0]
9000bf1c:	8889      	ldrh	r1, [r1, #4]
9000bf1e:	428b      	cmp	r3, r1
9000bf20:	bf2c      	ite	cs
9000bf22:	2301      	movcs	r3, #1
9000bf24:	2300      	movcc	r3, #0
9000bf26:	b2db      	uxtb	r3, r3
9000bf28:	4013      	ands	r3, r2
9000bf2a:	b2db      	uxtb	r3, r3
9000bf2c:	2b00      	cmp	r3, #0
9000bf2e:	d1be      	bne.n	9000beae <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000bf30:	bf00      	nop
9000bf32:	bf00      	nop
9000bf34:	3728      	adds	r7, #40	@ 0x28
9000bf36:	46bd      	mov	sp, r7
9000bf38:	bd80      	pop	{r7, pc}
9000bf3a:	bf00      	nop
9000bf3c:	200012e8 	.word	0x200012e8

9000bf40 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000bf40:	b590      	push	{r4, r7, lr}
9000bf42:	b087      	sub	sp, #28
9000bf44:	af02      	add	r7, sp, #8
9000bf46:	60f8      	str	r0, [r7, #12]
9000bf48:	60b9      	str	r1, [r7, #8]
9000bf4a:	607a      	str	r2, [r7, #4]
9000bf4c:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bf4e:	4b17      	ldr	r3, [pc, #92]	@ (9000bfac <UTIL_LCD_FillRect+0x6c>)
9000bf50:	69db      	ldr	r3, [r3, #28]
9000bf52:	2b02      	cmp	r3, #2
9000bf54:	d11a      	bne.n	9000bf8c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000bf56:	4b16      	ldr	r3, [pc, #88]	@ (9000bfb0 <UTIL_LCD_FillRect+0x70>)
9000bf58:	691c      	ldr	r4, [r3, #16]
9000bf5a:	4b14      	ldr	r3, [pc, #80]	@ (9000bfac <UTIL_LCD_FillRect+0x6c>)
9000bf5c:	6918      	ldr	r0, [r3, #16]
9000bf5e:	6a3b      	ldr	r3, [r7, #32]
9000bf60:	08db      	lsrs	r3, r3, #3
9000bf62:	f003 021f 	and.w	r2, r3, #31
9000bf66:	6a3b      	ldr	r3, [r7, #32]
9000bf68:	0a9b      	lsrs	r3, r3, #10
9000bf6a:	015b      	lsls	r3, r3, #5
9000bf6c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bf70:	431a      	orrs	r2, r3
9000bf72:	6a3b      	ldr	r3, [r7, #32]
9000bf74:	0cdb      	lsrs	r3, r3, #19
9000bf76:	02db      	lsls	r3, r3, #11
9000bf78:	b29b      	uxth	r3, r3
9000bf7a:	4313      	orrs	r3, r2
9000bf7c:	9301      	str	r3, [sp, #4]
9000bf7e:	683b      	ldr	r3, [r7, #0]
9000bf80:	9300      	str	r3, [sp, #0]
9000bf82:	687b      	ldr	r3, [r7, #4]
9000bf84:	68ba      	ldr	r2, [r7, #8]
9000bf86:	68f9      	ldr	r1, [r7, #12]
9000bf88:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000bf8a:	e00b      	b.n	9000bfa4 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000bf8c:	4b08      	ldr	r3, [pc, #32]	@ (9000bfb0 <UTIL_LCD_FillRect+0x70>)
9000bf8e:	691c      	ldr	r4, [r3, #16]
9000bf90:	4b06      	ldr	r3, [pc, #24]	@ (9000bfac <UTIL_LCD_FillRect+0x6c>)
9000bf92:	6918      	ldr	r0, [r3, #16]
9000bf94:	6a3b      	ldr	r3, [r7, #32]
9000bf96:	9301      	str	r3, [sp, #4]
9000bf98:	683b      	ldr	r3, [r7, #0]
9000bf9a:	9300      	str	r3, [sp, #0]
9000bf9c:	687b      	ldr	r3, [r7, #4]
9000bf9e:	68ba      	ldr	r2, [r7, #8]
9000bfa0:	68f9      	ldr	r1, [r7, #12]
9000bfa2:	47a0      	blx	r4
}
9000bfa4:	bf00      	nop
9000bfa6:	3714      	adds	r7, #20
9000bfa8:	46bd      	mov	sp, r7
9000bfaa:	bd90      	pop	{r4, r7, pc}
9000bfac:	200012e8 	.word	0x200012e8
9000bfb0:	20001328 	.word	0x20001328

9000bfb4 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000bfb4:	b580      	push	{r7, lr}
9000bfb6:	b0b2      	sub	sp, #200	@ 0xc8
9000bfb8:	af02      	add	r7, sp, #8
9000bfba:	60f8      	str	r0, [r7, #12]
9000bfbc:	60b9      	str	r1, [r7, #8]
9000bfbe:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000bfc0:	2300      	movs	r3, #0
9000bfc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bfc6:	2300      	movs	r3, #0
9000bfc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000bfcc:	4ba5      	ldr	r3, [pc, #660]	@ (9000c264 <DrawChar+0x2b0>)
9000bfce:	68db      	ldr	r3, [r3, #12]
9000bfd0:	4aa4      	ldr	r2, [pc, #656]	@ (9000c264 <DrawChar+0x2b0>)
9000bfd2:	015b      	lsls	r3, r3, #5
9000bfd4:	4413      	add	r3, r2
9000bfd6:	3308      	adds	r3, #8
9000bfd8:	681b      	ldr	r3, [r3, #0]
9000bfda:	88db      	ldrh	r3, [r3, #6]
9000bfdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bfe0:	4ba0      	ldr	r3, [pc, #640]	@ (9000c264 <DrawChar+0x2b0>)
9000bfe2:	68db      	ldr	r3, [r3, #12]
9000bfe4:	4a9f      	ldr	r2, [pc, #636]	@ (9000c264 <DrawChar+0x2b0>)
9000bfe6:	015b      	lsls	r3, r3, #5
9000bfe8:	4413      	add	r3, r2
9000bfea:	3308      	adds	r3, #8
9000bfec:	681b      	ldr	r3, [r3, #0]
9000bfee:	889b      	ldrh	r3, [r3, #4]
9000bff0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000bff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bff8:	3307      	adds	r3, #7
9000bffa:	f023 0207 	bic.w	r2, r3, #7
9000bffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c002:	1ad3      	subs	r3, r2, r3
9000c004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000c008:	2300      	movs	r3, #0
9000c00a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c00e:	e11c      	b.n	9000c24a <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000c010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c014:	3307      	adds	r3, #7
9000c016:	08db      	lsrs	r3, r3, #3
9000c018:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c01c:	fb02 f303 	mul.w	r3, r2, r3
9000c020:	687a      	ldr	r2, [r7, #4]
9000c022:	4413      	add	r3, r2
9000c024:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000c028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c02c:	3307      	adds	r3, #7
9000c02e:	08db      	lsrs	r3, r3, #3
9000c030:	2b01      	cmp	r3, #1
9000c032:	d002      	beq.n	9000c03a <DrawChar+0x86>
9000c034:	2b02      	cmp	r3, #2
9000c036:	d006      	beq.n	9000c046 <DrawChar+0x92>
9000c038:	e011      	b.n	9000c05e <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000c03a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c03e:	781b      	ldrb	r3, [r3, #0]
9000c040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c044:	e01d      	b.n	9000c082 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000c046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c04a:	781b      	ldrb	r3, [r3, #0]
9000c04c:	021b      	lsls	r3, r3, #8
9000c04e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c052:	3201      	adds	r2, #1
9000c054:	7812      	ldrb	r2, [r2, #0]
9000c056:	4313      	orrs	r3, r2
9000c058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c05c:	e011      	b.n	9000c082 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000c05e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c062:	781b      	ldrb	r3, [r3, #0]
9000c064:	041a      	lsls	r2, r3, #16
9000c066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000c06a:	3301      	adds	r3, #1
9000c06c:	781b      	ldrb	r3, [r3, #0]
9000c06e:	021b      	lsls	r3, r3, #8
9000c070:	4313      	orrs	r3, r2
9000c072:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000c076:	3202      	adds	r2, #2
9000c078:	7812      	ldrb	r2, [r2, #0]
9000c07a:	4313      	orrs	r3, r2
9000c07c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000c080:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c082:	4b78      	ldr	r3, [pc, #480]	@ (9000c264 <DrawChar+0x2b0>)
9000c084:	68db      	ldr	r3, [r3, #12]
9000c086:	4a77      	ldr	r2, [pc, #476]	@ (9000c264 <DrawChar+0x2b0>)
9000c088:	015b      	lsls	r3, r3, #5
9000c08a:	4413      	add	r3, r2
9000c08c:	331c      	adds	r3, #28
9000c08e:	681b      	ldr	r3, [r3, #0]
9000c090:	2b02      	cmp	r3, #2
9000c092:	f040 808c 	bne.w	9000c1ae <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000c096:	2300      	movs	r3, #0
9000c098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c09c:	e074      	b.n	9000c188 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c09e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c0a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c0a6:	1ad2      	subs	r2, r2, r3
9000c0a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c0ac:	4413      	add	r3, r2
9000c0ae:	3b01      	subs	r3, #1
9000c0b0:	2201      	movs	r2, #1
9000c0b2:	fa02 f303 	lsl.w	r3, r2, r3
9000c0b6:	461a      	mov	r2, r3
9000c0b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c0bc:	4013      	ands	r3, r2
9000c0be:	2b00      	cmp	r3, #0
9000c0c0:	d02d      	beq.n	9000c11e <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000c0c2:	4b68      	ldr	r3, [pc, #416]	@ (9000c264 <DrawChar+0x2b0>)
9000c0c4:	68db      	ldr	r3, [r3, #12]
9000c0c6:	4a67      	ldr	r2, [pc, #412]	@ (9000c264 <DrawChar+0x2b0>)
9000c0c8:	015b      	lsls	r3, r3, #5
9000c0ca:	4413      	add	r3, r2
9000c0cc:	681b      	ldr	r3, [r3, #0]
9000c0ce:	08db      	lsrs	r3, r3, #3
9000c0d0:	b29b      	uxth	r3, r3
9000c0d2:	f003 031f 	and.w	r3, r3, #31
9000c0d6:	b29a      	uxth	r2, r3
9000c0d8:	4b62      	ldr	r3, [pc, #392]	@ (9000c264 <DrawChar+0x2b0>)
9000c0da:	68db      	ldr	r3, [r3, #12]
9000c0dc:	4961      	ldr	r1, [pc, #388]	@ (9000c264 <DrawChar+0x2b0>)
9000c0de:	015b      	lsls	r3, r3, #5
9000c0e0:	440b      	add	r3, r1
9000c0e2:	681b      	ldr	r3, [r3, #0]
9000c0e4:	0a9b      	lsrs	r3, r3, #10
9000c0e6:	b29b      	uxth	r3, r3
9000c0e8:	015b      	lsls	r3, r3, #5
9000c0ea:	b29b      	uxth	r3, r3
9000c0ec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c0f0:	b29b      	uxth	r3, r3
9000c0f2:	4313      	orrs	r3, r2
9000c0f4:	b29a      	uxth	r2, r3
9000c0f6:	4b5b      	ldr	r3, [pc, #364]	@ (9000c264 <DrawChar+0x2b0>)
9000c0f8:	68db      	ldr	r3, [r3, #12]
9000c0fa:	495a      	ldr	r1, [pc, #360]	@ (9000c264 <DrawChar+0x2b0>)
9000c0fc:	015b      	lsls	r3, r3, #5
9000c0fe:	440b      	add	r3, r1
9000c100:	681b      	ldr	r3, [r3, #0]
9000c102:	0cdb      	lsrs	r3, r3, #19
9000c104:	b29b      	uxth	r3, r3
9000c106:	02db      	lsls	r3, r3, #11
9000c108:	b29b      	uxth	r3, r3
9000c10a:	4313      	orrs	r3, r2
9000c10c:	b29a      	uxth	r2, r3
9000c10e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c112:	005b      	lsls	r3, r3, #1
9000c114:	33c0      	adds	r3, #192	@ 0xc0
9000c116:	443b      	add	r3, r7
9000c118:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000c11c:	e02f      	b.n	9000c17e <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000c11e:	4b51      	ldr	r3, [pc, #324]	@ (9000c264 <DrawChar+0x2b0>)
9000c120:	68db      	ldr	r3, [r3, #12]
9000c122:	4a50      	ldr	r2, [pc, #320]	@ (9000c264 <DrawChar+0x2b0>)
9000c124:	015b      	lsls	r3, r3, #5
9000c126:	4413      	add	r3, r2
9000c128:	3304      	adds	r3, #4
9000c12a:	681b      	ldr	r3, [r3, #0]
9000c12c:	08db      	lsrs	r3, r3, #3
9000c12e:	b29b      	uxth	r3, r3
9000c130:	f003 031f 	and.w	r3, r3, #31
9000c134:	b29a      	uxth	r2, r3
9000c136:	4b4b      	ldr	r3, [pc, #300]	@ (9000c264 <DrawChar+0x2b0>)
9000c138:	68db      	ldr	r3, [r3, #12]
9000c13a:	494a      	ldr	r1, [pc, #296]	@ (9000c264 <DrawChar+0x2b0>)
9000c13c:	015b      	lsls	r3, r3, #5
9000c13e:	440b      	add	r3, r1
9000c140:	3304      	adds	r3, #4
9000c142:	681b      	ldr	r3, [r3, #0]
9000c144:	0a9b      	lsrs	r3, r3, #10
9000c146:	b29b      	uxth	r3, r3
9000c148:	015b      	lsls	r3, r3, #5
9000c14a:	b29b      	uxth	r3, r3
9000c14c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c150:	b29b      	uxth	r3, r3
9000c152:	4313      	orrs	r3, r2
9000c154:	b29a      	uxth	r2, r3
9000c156:	4b43      	ldr	r3, [pc, #268]	@ (9000c264 <DrawChar+0x2b0>)
9000c158:	68db      	ldr	r3, [r3, #12]
9000c15a:	4942      	ldr	r1, [pc, #264]	@ (9000c264 <DrawChar+0x2b0>)
9000c15c:	015b      	lsls	r3, r3, #5
9000c15e:	440b      	add	r3, r1
9000c160:	3304      	adds	r3, #4
9000c162:	681b      	ldr	r3, [r3, #0]
9000c164:	0cdb      	lsrs	r3, r3, #19
9000c166:	b29b      	uxth	r3, r3
9000c168:	02db      	lsls	r3, r3, #11
9000c16a:	b29b      	uxth	r3, r3
9000c16c:	4313      	orrs	r3, r2
9000c16e:	b29a      	uxth	r2, r3
9000c170:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c174:	005b      	lsls	r3, r3, #1
9000c176:	33c0      	adds	r3, #192	@ 0xc0
9000c178:	443b      	add	r3, r7
9000c17a:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000c17e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c182:	3301      	adds	r3, #1
9000c184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c188:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c18c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c190:	429a      	cmp	r2, r3
9000c192:	d384      	bcc.n	9000c09e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000c194:	68b9      	ldr	r1, [r7, #8]
9000c196:	1c4b      	adds	r3, r1, #1
9000c198:	60bb      	str	r3, [r7, #8]
9000c19a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000c19e:	2301      	movs	r3, #1
9000c1a0:	9300      	str	r3, [sp, #0]
9000c1a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c1a6:	68f8      	ldr	r0, [r7, #12]
9000c1a8:	f7ff fdb4 	bl	9000bd14 <UTIL_LCD_FillRGBRect>
9000c1ac:	e048      	b.n	9000c240 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000c1ae:	2300      	movs	r3, #0
9000c1b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c1b4:	e032      	b.n	9000c21c <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c1b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c1ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c1be:	1ad2      	subs	r2, r2, r3
9000c1c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c1c4:	4413      	add	r3, r2
9000c1c6:	3b01      	subs	r3, #1
9000c1c8:	2201      	movs	r2, #1
9000c1ca:	fa02 f303 	lsl.w	r3, r2, r3
9000c1ce:	461a      	mov	r2, r3
9000c1d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c1d4:	4013      	ands	r3, r2
9000c1d6:	2b00      	cmp	r3, #0
9000c1d8:	d00d      	beq.n	9000c1f6 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000c1da:	4b22      	ldr	r3, [pc, #136]	@ (9000c264 <DrawChar+0x2b0>)
9000c1dc:	68db      	ldr	r3, [r3, #12]
9000c1de:	4a21      	ldr	r2, [pc, #132]	@ (9000c264 <DrawChar+0x2b0>)
9000c1e0:	015b      	lsls	r3, r3, #5
9000c1e2:	4413      	add	r3, r2
9000c1e4:	681a      	ldr	r2, [r3, #0]
9000c1e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c1ea:	009b      	lsls	r3, r3, #2
9000c1ec:	33c0      	adds	r3, #192	@ 0xc0
9000c1ee:	443b      	add	r3, r7
9000c1f0:	f843 2cac 	str.w	r2, [r3, #-172]
9000c1f4:	e00d      	b.n	9000c212 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000c1f6:	4b1b      	ldr	r3, [pc, #108]	@ (9000c264 <DrawChar+0x2b0>)
9000c1f8:	68db      	ldr	r3, [r3, #12]
9000c1fa:	4a1a      	ldr	r2, [pc, #104]	@ (9000c264 <DrawChar+0x2b0>)
9000c1fc:	015b      	lsls	r3, r3, #5
9000c1fe:	4413      	add	r3, r2
9000c200:	3304      	adds	r3, #4
9000c202:	681a      	ldr	r2, [r3, #0]
9000c204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c208:	009b      	lsls	r3, r3, #2
9000c20a:	33c0      	adds	r3, #192	@ 0xc0
9000c20c:	443b      	add	r3, r7
9000c20e:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000c212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c216:	3301      	adds	r3, #1
9000c218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c21c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c224:	429a      	cmp	r2, r3
9000c226:	d3c6      	bcc.n	9000c1b6 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000c228:	68b9      	ldr	r1, [r7, #8]
9000c22a:	1c4b      	adds	r3, r1, #1
9000c22c:	60bb      	str	r3, [r7, #8]
9000c22e:	f107 0214 	add.w	r2, r7, #20
9000c232:	2301      	movs	r3, #1
9000c234:	9300      	str	r3, [sp, #0]
9000c236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c23a:	68f8      	ldr	r0, [r7, #12]
9000c23c:	f7ff fd6a 	bl	9000bd14 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000c240:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000c244:	3301      	adds	r3, #1
9000c246:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c24a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c24e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000c252:	429a      	cmp	r2, r3
9000c254:	f4ff aedc 	bcc.w	9000c010 <DrawChar+0x5c>
    }
  }
}
9000c258:	bf00      	nop
9000c25a:	bf00      	nop
9000c25c:	37c0      	adds	r7, #192	@ 0xc0
9000c25e:	46bd      	mov	sp, r7
9000c260:	bd80      	pop	{r7, pc}
9000c262:	bf00      	nop
9000c264:	200012e8 	.word	0x200012e8

9000c268 <sbrk_aligned>:
9000c268:	b570      	push	{r4, r5, r6, lr}
9000c26a:	4e0f      	ldr	r6, [pc, #60]	@ (9000c2a8 <sbrk_aligned+0x40>)
9000c26c:	460c      	mov	r4, r1
9000c26e:	6831      	ldr	r1, [r6, #0]
9000c270:	4605      	mov	r5, r0
9000c272:	b911      	cbnz	r1, 9000c27a <sbrk_aligned+0x12>
9000c274:	f000 fb0e 	bl	9000c894 <_sbrk_r>
9000c278:	6030      	str	r0, [r6, #0]
9000c27a:	4621      	mov	r1, r4
9000c27c:	4628      	mov	r0, r5
9000c27e:	f000 fb09 	bl	9000c894 <_sbrk_r>
9000c282:	1c43      	adds	r3, r0, #1
9000c284:	d103      	bne.n	9000c28e <sbrk_aligned+0x26>
9000c286:	f04f 34ff 	mov.w	r4, #4294967295
9000c28a:	4620      	mov	r0, r4
9000c28c:	bd70      	pop	{r4, r5, r6, pc}
9000c28e:	1cc4      	adds	r4, r0, #3
9000c290:	f024 0403 	bic.w	r4, r4, #3
9000c294:	42a0      	cmp	r0, r4
9000c296:	d0f8      	beq.n	9000c28a <sbrk_aligned+0x22>
9000c298:	1a21      	subs	r1, r4, r0
9000c29a:	4628      	mov	r0, r5
9000c29c:	f000 fafa 	bl	9000c894 <_sbrk_r>
9000c2a0:	3001      	adds	r0, #1
9000c2a2:	d1f2      	bne.n	9000c28a <sbrk_aligned+0x22>
9000c2a4:	e7ef      	b.n	9000c286 <sbrk_aligned+0x1e>
9000c2a6:	bf00      	nop
9000c2a8:	20001354 	.word	0x20001354

9000c2ac <_malloc_r>:
9000c2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c2b0:	1ccd      	adds	r5, r1, #3
9000c2b2:	f025 0503 	bic.w	r5, r5, #3
9000c2b6:	3508      	adds	r5, #8
9000c2b8:	2d0c      	cmp	r5, #12
9000c2ba:	bf38      	it	cc
9000c2bc:	250c      	movcc	r5, #12
9000c2be:	2d00      	cmp	r5, #0
9000c2c0:	4606      	mov	r6, r0
9000c2c2:	db01      	blt.n	9000c2c8 <_malloc_r+0x1c>
9000c2c4:	42a9      	cmp	r1, r5
9000c2c6:	d904      	bls.n	9000c2d2 <_malloc_r+0x26>
9000c2c8:	230c      	movs	r3, #12
9000c2ca:	6033      	str	r3, [r6, #0]
9000c2cc:	2000      	movs	r0, #0
9000c2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c2d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000c3a8 <_malloc_r+0xfc>
9000c2d6:	f000 f869 	bl	9000c3ac <__malloc_lock>
9000c2da:	f8d8 3000 	ldr.w	r3, [r8]
9000c2de:	461c      	mov	r4, r3
9000c2e0:	bb44      	cbnz	r4, 9000c334 <_malloc_r+0x88>
9000c2e2:	4629      	mov	r1, r5
9000c2e4:	4630      	mov	r0, r6
9000c2e6:	f7ff ffbf 	bl	9000c268 <sbrk_aligned>
9000c2ea:	1c43      	adds	r3, r0, #1
9000c2ec:	4604      	mov	r4, r0
9000c2ee:	d158      	bne.n	9000c3a2 <_malloc_r+0xf6>
9000c2f0:	f8d8 4000 	ldr.w	r4, [r8]
9000c2f4:	4627      	mov	r7, r4
9000c2f6:	2f00      	cmp	r7, #0
9000c2f8:	d143      	bne.n	9000c382 <_malloc_r+0xd6>
9000c2fa:	2c00      	cmp	r4, #0
9000c2fc:	d04b      	beq.n	9000c396 <_malloc_r+0xea>
9000c2fe:	6823      	ldr	r3, [r4, #0]
9000c300:	4639      	mov	r1, r7
9000c302:	4630      	mov	r0, r6
9000c304:	eb04 0903 	add.w	r9, r4, r3
9000c308:	f000 fac4 	bl	9000c894 <_sbrk_r>
9000c30c:	4581      	cmp	r9, r0
9000c30e:	d142      	bne.n	9000c396 <_malloc_r+0xea>
9000c310:	6821      	ldr	r1, [r4, #0]
9000c312:	1a6d      	subs	r5, r5, r1
9000c314:	4629      	mov	r1, r5
9000c316:	4630      	mov	r0, r6
9000c318:	f7ff ffa6 	bl	9000c268 <sbrk_aligned>
9000c31c:	3001      	adds	r0, #1
9000c31e:	d03a      	beq.n	9000c396 <_malloc_r+0xea>
9000c320:	6823      	ldr	r3, [r4, #0]
9000c322:	442b      	add	r3, r5
9000c324:	6023      	str	r3, [r4, #0]
9000c326:	f8d8 3000 	ldr.w	r3, [r8]
9000c32a:	685a      	ldr	r2, [r3, #4]
9000c32c:	bb62      	cbnz	r2, 9000c388 <_malloc_r+0xdc>
9000c32e:	f8c8 7000 	str.w	r7, [r8]
9000c332:	e00f      	b.n	9000c354 <_malloc_r+0xa8>
9000c334:	6822      	ldr	r2, [r4, #0]
9000c336:	1b52      	subs	r2, r2, r5
9000c338:	d420      	bmi.n	9000c37c <_malloc_r+0xd0>
9000c33a:	2a0b      	cmp	r2, #11
9000c33c:	d917      	bls.n	9000c36e <_malloc_r+0xc2>
9000c33e:	1961      	adds	r1, r4, r5
9000c340:	42a3      	cmp	r3, r4
9000c342:	6025      	str	r5, [r4, #0]
9000c344:	bf18      	it	ne
9000c346:	6059      	strne	r1, [r3, #4]
9000c348:	6863      	ldr	r3, [r4, #4]
9000c34a:	bf08      	it	eq
9000c34c:	f8c8 1000 	streq.w	r1, [r8]
9000c350:	5162      	str	r2, [r4, r5]
9000c352:	604b      	str	r3, [r1, #4]
9000c354:	4630      	mov	r0, r6
9000c356:	f000 f82f 	bl	9000c3b8 <__malloc_unlock>
9000c35a:	f104 000b 	add.w	r0, r4, #11
9000c35e:	1d23      	adds	r3, r4, #4
9000c360:	f020 0007 	bic.w	r0, r0, #7
9000c364:	1ac2      	subs	r2, r0, r3
9000c366:	bf1c      	itt	ne
9000c368:	1a1b      	subne	r3, r3, r0
9000c36a:	50a3      	strne	r3, [r4, r2]
9000c36c:	e7af      	b.n	9000c2ce <_malloc_r+0x22>
9000c36e:	6862      	ldr	r2, [r4, #4]
9000c370:	42a3      	cmp	r3, r4
9000c372:	bf0c      	ite	eq
9000c374:	f8c8 2000 	streq.w	r2, [r8]
9000c378:	605a      	strne	r2, [r3, #4]
9000c37a:	e7eb      	b.n	9000c354 <_malloc_r+0xa8>
9000c37c:	4623      	mov	r3, r4
9000c37e:	6864      	ldr	r4, [r4, #4]
9000c380:	e7ae      	b.n	9000c2e0 <_malloc_r+0x34>
9000c382:	463c      	mov	r4, r7
9000c384:	687f      	ldr	r7, [r7, #4]
9000c386:	e7b6      	b.n	9000c2f6 <_malloc_r+0x4a>
9000c388:	461a      	mov	r2, r3
9000c38a:	685b      	ldr	r3, [r3, #4]
9000c38c:	42a3      	cmp	r3, r4
9000c38e:	d1fb      	bne.n	9000c388 <_malloc_r+0xdc>
9000c390:	2300      	movs	r3, #0
9000c392:	6053      	str	r3, [r2, #4]
9000c394:	e7de      	b.n	9000c354 <_malloc_r+0xa8>
9000c396:	230c      	movs	r3, #12
9000c398:	6033      	str	r3, [r6, #0]
9000c39a:	4630      	mov	r0, r6
9000c39c:	f000 f80c 	bl	9000c3b8 <__malloc_unlock>
9000c3a0:	e794      	b.n	9000c2cc <_malloc_r+0x20>
9000c3a2:	6005      	str	r5, [r0, #0]
9000c3a4:	e7d6      	b.n	9000c354 <_malloc_r+0xa8>
9000c3a6:	bf00      	nop
9000c3a8:	20001358 	.word	0x20001358

9000c3ac <__malloc_lock>:
9000c3ac:	4801      	ldr	r0, [pc, #4]	@ (9000c3b4 <__malloc_lock+0x8>)
9000c3ae:	f000 babe 	b.w	9000c92e <__retarget_lock_acquire_recursive>
9000c3b2:	bf00      	nop
9000c3b4:	2000149c 	.word	0x2000149c

9000c3b8 <__malloc_unlock>:
9000c3b8:	4801      	ldr	r0, [pc, #4]	@ (9000c3c0 <__malloc_unlock+0x8>)
9000c3ba:	f000 bab9 	b.w	9000c930 <__retarget_lock_release_recursive>
9000c3be:	bf00      	nop
9000c3c0:	2000149c 	.word	0x2000149c

9000c3c4 <std>:
9000c3c4:	2300      	movs	r3, #0
9000c3c6:	b510      	push	{r4, lr}
9000c3c8:	4604      	mov	r4, r0
9000c3ca:	e9c0 3300 	strd	r3, r3, [r0]
9000c3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000c3d2:	6083      	str	r3, [r0, #8]
9000c3d4:	8181      	strh	r1, [r0, #12]
9000c3d6:	6643      	str	r3, [r0, #100]	@ 0x64
9000c3d8:	81c2      	strh	r2, [r0, #14]
9000c3da:	6183      	str	r3, [r0, #24]
9000c3dc:	4619      	mov	r1, r3
9000c3de:	2208      	movs	r2, #8
9000c3e0:	305c      	adds	r0, #92	@ 0x5c
9000c3e2:	f000 fa1b 	bl	9000c81c <memset>
9000c3e6:	4b0d      	ldr	r3, [pc, #52]	@ (9000c41c <std+0x58>)
9000c3e8:	6263      	str	r3, [r4, #36]	@ 0x24
9000c3ea:	4b0d      	ldr	r3, [pc, #52]	@ (9000c420 <std+0x5c>)
9000c3ec:	62a3      	str	r3, [r4, #40]	@ 0x28
9000c3ee:	4b0d      	ldr	r3, [pc, #52]	@ (9000c424 <std+0x60>)
9000c3f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000c3f2:	4b0d      	ldr	r3, [pc, #52]	@ (9000c428 <std+0x64>)
9000c3f4:	6323      	str	r3, [r4, #48]	@ 0x30
9000c3f6:	4b0d      	ldr	r3, [pc, #52]	@ (9000c42c <std+0x68>)
9000c3f8:	6224      	str	r4, [r4, #32]
9000c3fa:	429c      	cmp	r4, r3
9000c3fc:	d006      	beq.n	9000c40c <std+0x48>
9000c3fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000c402:	4294      	cmp	r4, r2
9000c404:	d002      	beq.n	9000c40c <std+0x48>
9000c406:	33d0      	adds	r3, #208	@ 0xd0
9000c408:	429c      	cmp	r4, r3
9000c40a:	d105      	bne.n	9000c418 <std+0x54>
9000c40c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000c410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c414:	f000 ba8a 	b.w	9000c92c <__retarget_lock_init_recursive>
9000c418:	bd10      	pop	{r4, pc}
9000c41a:	bf00      	nop
9000c41c:	9000c66d 	.word	0x9000c66d
9000c420:	9000c68f 	.word	0x9000c68f
9000c424:	9000c6c7 	.word	0x9000c6c7
9000c428:	9000c6eb 	.word	0x9000c6eb
9000c42c:	2000135c 	.word	0x2000135c

9000c430 <stdio_exit_handler>:
9000c430:	4a02      	ldr	r2, [pc, #8]	@ (9000c43c <stdio_exit_handler+0xc>)
9000c432:	4903      	ldr	r1, [pc, #12]	@ (9000c440 <stdio_exit_handler+0x10>)
9000c434:	4803      	ldr	r0, [pc, #12]	@ (9000c444 <stdio_exit_handler+0x14>)
9000c436:	f000 b869 	b.w	9000c50c <_fwalk_sglue>
9000c43a:	bf00      	nop
9000c43c:	20000078 	.word	0x20000078
9000c440:	9000d339 	.word	0x9000d339
9000c444:	20000088 	.word	0x20000088

9000c448 <cleanup_stdio>:
9000c448:	6841      	ldr	r1, [r0, #4]
9000c44a:	4b0c      	ldr	r3, [pc, #48]	@ (9000c47c <cleanup_stdio+0x34>)
9000c44c:	4299      	cmp	r1, r3
9000c44e:	b510      	push	{r4, lr}
9000c450:	4604      	mov	r4, r0
9000c452:	d001      	beq.n	9000c458 <cleanup_stdio+0x10>
9000c454:	f000 ff70 	bl	9000d338 <_fflush_r>
9000c458:	68a1      	ldr	r1, [r4, #8]
9000c45a:	4b09      	ldr	r3, [pc, #36]	@ (9000c480 <cleanup_stdio+0x38>)
9000c45c:	4299      	cmp	r1, r3
9000c45e:	d002      	beq.n	9000c466 <cleanup_stdio+0x1e>
9000c460:	4620      	mov	r0, r4
9000c462:	f000 ff69 	bl	9000d338 <_fflush_r>
9000c466:	68e1      	ldr	r1, [r4, #12]
9000c468:	4b06      	ldr	r3, [pc, #24]	@ (9000c484 <cleanup_stdio+0x3c>)
9000c46a:	4299      	cmp	r1, r3
9000c46c:	d004      	beq.n	9000c478 <cleanup_stdio+0x30>
9000c46e:	4620      	mov	r0, r4
9000c470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c474:	f000 bf60 	b.w	9000d338 <_fflush_r>
9000c478:	bd10      	pop	{r4, pc}
9000c47a:	bf00      	nop
9000c47c:	2000135c 	.word	0x2000135c
9000c480:	200013c4 	.word	0x200013c4
9000c484:	2000142c 	.word	0x2000142c

9000c488 <global_stdio_init.part.0>:
9000c488:	b510      	push	{r4, lr}
9000c48a:	4b0b      	ldr	r3, [pc, #44]	@ (9000c4b8 <global_stdio_init.part.0+0x30>)
9000c48c:	4c0b      	ldr	r4, [pc, #44]	@ (9000c4bc <global_stdio_init.part.0+0x34>)
9000c48e:	4a0c      	ldr	r2, [pc, #48]	@ (9000c4c0 <global_stdio_init.part.0+0x38>)
9000c490:	601a      	str	r2, [r3, #0]
9000c492:	4620      	mov	r0, r4
9000c494:	2200      	movs	r2, #0
9000c496:	2104      	movs	r1, #4
9000c498:	f7ff ff94 	bl	9000c3c4 <std>
9000c49c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000c4a0:	2201      	movs	r2, #1
9000c4a2:	2109      	movs	r1, #9
9000c4a4:	f7ff ff8e 	bl	9000c3c4 <std>
9000c4a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000c4ac:	2202      	movs	r2, #2
9000c4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c4b2:	2112      	movs	r1, #18
9000c4b4:	f7ff bf86 	b.w	9000c3c4 <std>
9000c4b8:	20001494 	.word	0x20001494
9000c4bc:	2000135c 	.word	0x2000135c
9000c4c0:	9000c431 	.word	0x9000c431

9000c4c4 <__sfp_lock_acquire>:
9000c4c4:	4801      	ldr	r0, [pc, #4]	@ (9000c4cc <__sfp_lock_acquire+0x8>)
9000c4c6:	f000 ba32 	b.w	9000c92e <__retarget_lock_acquire_recursive>
9000c4ca:	bf00      	nop
9000c4cc:	2000149d 	.word	0x2000149d

9000c4d0 <__sfp_lock_release>:
9000c4d0:	4801      	ldr	r0, [pc, #4]	@ (9000c4d8 <__sfp_lock_release+0x8>)
9000c4d2:	f000 ba2d 	b.w	9000c930 <__retarget_lock_release_recursive>
9000c4d6:	bf00      	nop
9000c4d8:	2000149d 	.word	0x2000149d

9000c4dc <__sinit>:
9000c4dc:	b510      	push	{r4, lr}
9000c4de:	4604      	mov	r4, r0
9000c4e0:	f7ff fff0 	bl	9000c4c4 <__sfp_lock_acquire>
9000c4e4:	6a23      	ldr	r3, [r4, #32]
9000c4e6:	b11b      	cbz	r3, 9000c4f0 <__sinit+0x14>
9000c4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c4ec:	f7ff bff0 	b.w	9000c4d0 <__sfp_lock_release>
9000c4f0:	4b04      	ldr	r3, [pc, #16]	@ (9000c504 <__sinit+0x28>)
9000c4f2:	6223      	str	r3, [r4, #32]
9000c4f4:	4b04      	ldr	r3, [pc, #16]	@ (9000c508 <__sinit+0x2c>)
9000c4f6:	681b      	ldr	r3, [r3, #0]
9000c4f8:	2b00      	cmp	r3, #0
9000c4fa:	d1f5      	bne.n	9000c4e8 <__sinit+0xc>
9000c4fc:	f7ff ffc4 	bl	9000c488 <global_stdio_init.part.0>
9000c500:	e7f2      	b.n	9000c4e8 <__sinit+0xc>
9000c502:	bf00      	nop
9000c504:	9000c449 	.word	0x9000c449
9000c508:	20001494 	.word	0x20001494

9000c50c <_fwalk_sglue>:
9000c50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c510:	4607      	mov	r7, r0
9000c512:	4688      	mov	r8, r1
9000c514:	4614      	mov	r4, r2
9000c516:	2600      	movs	r6, #0
9000c518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c51c:	f1b9 0901 	subs.w	r9, r9, #1
9000c520:	d505      	bpl.n	9000c52e <_fwalk_sglue+0x22>
9000c522:	6824      	ldr	r4, [r4, #0]
9000c524:	2c00      	cmp	r4, #0
9000c526:	d1f7      	bne.n	9000c518 <_fwalk_sglue+0xc>
9000c528:	4630      	mov	r0, r6
9000c52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c52e:	89ab      	ldrh	r3, [r5, #12]
9000c530:	2b01      	cmp	r3, #1
9000c532:	d907      	bls.n	9000c544 <_fwalk_sglue+0x38>
9000c534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c538:	3301      	adds	r3, #1
9000c53a:	d003      	beq.n	9000c544 <_fwalk_sglue+0x38>
9000c53c:	4629      	mov	r1, r5
9000c53e:	4638      	mov	r0, r7
9000c540:	47c0      	blx	r8
9000c542:	4306      	orrs	r6, r0
9000c544:	3568      	adds	r5, #104	@ 0x68
9000c546:	e7e9      	b.n	9000c51c <_fwalk_sglue+0x10>

9000c548 <iprintf>:
9000c548:	b40f      	push	{r0, r1, r2, r3}
9000c54a:	b507      	push	{r0, r1, r2, lr}
9000c54c:	4906      	ldr	r1, [pc, #24]	@ (9000c568 <iprintf+0x20>)
9000c54e:	ab04      	add	r3, sp, #16
9000c550:	6808      	ldr	r0, [r1, #0]
9000c552:	f853 2b04 	ldr.w	r2, [r3], #4
9000c556:	6881      	ldr	r1, [r0, #8]
9000c558:	9301      	str	r3, [sp, #4]
9000c55a:	f000 fbc5 	bl	9000cce8 <_vfiprintf_r>
9000c55e:	b003      	add	sp, #12
9000c560:	f85d eb04 	ldr.w	lr, [sp], #4
9000c564:	b004      	add	sp, #16
9000c566:	4770      	bx	lr
9000c568:	20000084 	.word	0x20000084

9000c56c <_puts_r>:
9000c56c:	6a03      	ldr	r3, [r0, #32]
9000c56e:	b570      	push	{r4, r5, r6, lr}
9000c570:	6884      	ldr	r4, [r0, #8]
9000c572:	4605      	mov	r5, r0
9000c574:	460e      	mov	r6, r1
9000c576:	b90b      	cbnz	r3, 9000c57c <_puts_r+0x10>
9000c578:	f7ff ffb0 	bl	9000c4dc <__sinit>
9000c57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c57e:	07db      	lsls	r3, r3, #31
9000c580:	d405      	bmi.n	9000c58e <_puts_r+0x22>
9000c582:	89a3      	ldrh	r3, [r4, #12]
9000c584:	0598      	lsls	r0, r3, #22
9000c586:	d402      	bmi.n	9000c58e <_puts_r+0x22>
9000c588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c58a:	f000 f9d0 	bl	9000c92e <__retarget_lock_acquire_recursive>
9000c58e:	89a3      	ldrh	r3, [r4, #12]
9000c590:	0719      	lsls	r1, r3, #28
9000c592:	d502      	bpl.n	9000c59a <_puts_r+0x2e>
9000c594:	6923      	ldr	r3, [r4, #16]
9000c596:	2b00      	cmp	r3, #0
9000c598:	d135      	bne.n	9000c606 <_puts_r+0x9a>
9000c59a:	4621      	mov	r1, r4
9000c59c:	4628      	mov	r0, r5
9000c59e:	f000 f8e7 	bl	9000c770 <__swsetup_r>
9000c5a2:	b380      	cbz	r0, 9000c606 <_puts_r+0x9a>
9000c5a4:	f04f 35ff 	mov.w	r5, #4294967295
9000c5a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c5aa:	07da      	lsls	r2, r3, #31
9000c5ac:	d405      	bmi.n	9000c5ba <_puts_r+0x4e>
9000c5ae:	89a3      	ldrh	r3, [r4, #12]
9000c5b0:	059b      	lsls	r3, r3, #22
9000c5b2:	d402      	bmi.n	9000c5ba <_puts_r+0x4e>
9000c5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c5b6:	f000 f9bb 	bl	9000c930 <__retarget_lock_release_recursive>
9000c5ba:	4628      	mov	r0, r5
9000c5bc:	bd70      	pop	{r4, r5, r6, pc}
9000c5be:	2b00      	cmp	r3, #0
9000c5c0:	da04      	bge.n	9000c5cc <_puts_r+0x60>
9000c5c2:	69a2      	ldr	r2, [r4, #24]
9000c5c4:	429a      	cmp	r2, r3
9000c5c6:	dc17      	bgt.n	9000c5f8 <_puts_r+0x8c>
9000c5c8:	290a      	cmp	r1, #10
9000c5ca:	d015      	beq.n	9000c5f8 <_puts_r+0x8c>
9000c5cc:	6823      	ldr	r3, [r4, #0]
9000c5ce:	1c5a      	adds	r2, r3, #1
9000c5d0:	6022      	str	r2, [r4, #0]
9000c5d2:	7019      	strb	r1, [r3, #0]
9000c5d4:	68a3      	ldr	r3, [r4, #8]
9000c5d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c5da:	3b01      	subs	r3, #1
9000c5dc:	60a3      	str	r3, [r4, #8]
9000c5de:	2900      	cmp	r1, #0
9000c5e0:	d1ed      	bne.n	9000c5be <_puts_r+0x52>
9000c5e2:	2b00      	cmp	r3, #0
9000c5e4:	da11      	bge.n	9000c60a <_puts_r+0x9e>
9000c5e6:	4622      	mov	r2, r4
9000c5e8:	210a      	movs	r1, #10
9000c5ea:	4628      	mov	r0, r5
9000c5ec:	f000 f881 	bl	9000c6f2 <__swbuf_r>
9000c5f0:	3001      	adds	r0, #1
9000c5f2:	d0d7      	beq.n	9000c5a4 <_puts_r+0x38>
9000c5f4:	250a      	movs	r5, #10
9000c5f6:	e7d7      	b.n	9000c5a8 <_puts_r+0x3c>
9000c5f8:	4622      	mov	r2, r4
9000c5fa:	4628      	mov	r0, r5
9000c5fc:	f000 f879 	bl	9000c6f2 <__swbuf_r>
9000c600:	3001      	adds	r0, #1
9000c602:	d1e7      	bne.n	9000c5d4 <_puts_r+0x68>
9000c604:	e7ce      	b.n	9000c5a4 <_puts_r+0x38>
9000c606:	3e01      	subs	r6, #1
9000c608:	e7e4      	b.n	9000c5d4 <_puts_r+0x68>
9000c60a:	6823      	ldr	r3, [r4, #0]
9000c60c:	1c5a      	adds	r2, r3, #1
9000c60e:	6022      	str	r2, [r4, #0]
9000c610:	220a      	movs	r2, #10
9000c612:	701a      	strb	r2, [r3, #0]
9000c614:	e7ee      	b.n	9000c5f4 <_puts_r+0x88>
	...

9000c618 <puts>:
9000c618:	4b02      	ldr	r3, [pc, #8]	@ (9000c624 <puts+0xc>)
9000c61a:	4601      	mov	r1, r0
9000c61c:	6818      	ldr	r0, [r3, #0]
9000c61e:	f7ff bfa5 	b.w	9000c56c <_puts_r>
9000c622:	bf00      	nop
9000c624:	20000084 	.word	0x20000084

9000c628 <siprintf>:
9000c628:	b40e      	push	{r1, r2, r3}
9000c62a:	b510      	push	{r4, lr}
9000c62c:	b09d      	sub	sp, #116	@ 0x74
9000c62e:	ab1f      	add	r3, sp, #124	@ 0x7c
9000c630:	9002      	str	r0, [sp, #8]
9000c632:	9006      	str	r0, [sp, #24]
9000c634:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
9000c638:	480a      	ldr	r0, [pc, #40]	@ (9000c664 <siprintf+0x3c>)
9000c63a:	9107      	str	r1, [sp, #28]
9000c63c:	9104      	str	r1, [sp, #16]
9000c63e:	490a      	ldr	r1, [pc, #40]	@ (9000c668 <siprintf+0x40>)
9000c640:	f853 2b04 	ldr.w	r2, [r3], #4
9000c644:	9105      	str	r1, [sp, #20]
9000c646:	2400      	movs	r4, #0
9000c648:	a902      	add	r1, sp, #8
9000c64a:	6800      	ldr	r0, [r0, #0]
9000c64c:	9301      	str	r3, [sp, #4]
9000c64e:	941b      	str	r4, [sp, #108]	@ 0x6c
9000c650:	f000 fa24 	bl	9000ca9c <_svfiprintf_r>
9000c654:	9b02      	ldr	r3, [sp, #8]
9000c656:	701c      	strb	r4, [r3, #0]
9000c658:	b01d      	add	sp, #116	@ 0x74
9000c65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c65e:	b003      	add	sp, #12
9000c660:	4770      	bx	lr
9000c662:	bf00      	nop
9000c664:	20000084 	.word	0x20000084
9000c668:	ffff0208 	.word	0xffff0208

9000c66c <__sread>:
9000c66c:	b510      	push	{r4, lr}
9000c66e:	460c      	mov	r4, r1
9000c670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c674:	f000 f8fc 	bl	9000c870 <_read_r>
9000c678:	2800      	cmp	r0, #0
9000c67a:	bfab      	itete	ge
9000c67c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c67e:	89a3      	ldrhlt	r3, [r4, #12]
9000c680:	181b      	addge	r3, r3, r0
9000c682:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c686:	bfac      	ite	ge
9000c688:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c68a:	81a3      	strhlt	r3, [r4, #12]
9000c68c:	bd10      	pop	{r4, pc}

9000c68e <__swrite>:
9000c68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c692:	461f      	mov	r7, r3
9000c694:	898b      	ldrh	r3, [r1, #12]
9000c696:	05db      	lsls	r3, r3, #23
9000c698:	4605      	mov	r5, r0
9000c69a:	460c      	mov	r4, r1
9000c69c:	4616      	mov	r6, r2
9000c69e:	d505      	bpl.n	9000c6ac <__swrite+0x1e>
9000c6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c6a4:	2302      	movs	r3, #2
9000c6a6:	2200      	movs	r2, #0
9000c6a8:	f000 f8d0 	bl	9000c84c <_lseek_r>
9000c6ac:	89a3      	ldrh	r3, [r4, #12]
9000c6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c6b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c6b6:	81a3      	strh	r3, [r4, #12]
9000c6b8:	4632      	mov	r2, r6
9000c6ba:	463b      	mov	r3, r7
9000c6bc:	4628      	mov	r0, r5
9000c6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c6c2:	f000 b8f7 	b.w	9000c8b4 <_write_r>

9000c6c6 <__sseek>:
9000c6c6:	b510      	push	{r4, lr}
9000c6c8:	460c      	mov	r4, r1
9000c6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c6ce:	f000 f8bd 	bl	9000c84c <_lseek_r>
9000c6d2:	1c43      	adds	r3, r0, #1
9000c6d4:	89a3      	ldrh	r3, [r4, #12]
9000c6d6:	bf15      	itete	ne
9000c6d8:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c6da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c6de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c6e2:	81a3      	strheq	r3, [r4, #12]
9000c6e4:	bf18      	it	ne
9000c6e6:	81a3      	strhne	r3, [r4, #12]
9000c6e8:	bd10      	pop	{r4, pc}

9000c6ea <__sclose>:
9000c6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c6ee:	f000 b89d 	b.w	9000c82c <_close_r>

9000c6f2 <__swbuf_r>:
9000c6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c6f4:	460e      	mov	r6, r1
9000c6f6:	4614      	mov	r4, r2
9000c6f8:	4605      	mov	r5, r0
9000c6fa:	b118      	cbz	r0, 9000c704 <__swbuf_r+0x12>
9000c6fc:	6a03      	ldr	r3, [r0, #32]
9000c6fe:	b90b      	cbnz	r3, 9000c704 <__swbuf_r+0x12>
9000c700:	f7ff feec 	bl	9000c4dc <__sinit>
9000c704:	69a3      	ldr	r3, [r4, #24]
9000c706:	60a3      	str	r3, [r4, #8]
9000c708:	89a3      	ldrh	r3, [r4, #12]
9000c70a:	071a      	lsls	r2, r3, #28
9000c70c:	d501      	bpl.n	9000c712 <__swbuf_r+0x20>
9000c70e:	6923      	ldr	r3, [r4, #16]
9000c710:	b943      	cbnz	r3, 9000c724 <__swbuf_r+0x32>
9000c712:	4621      	mov	r1, r4
9000c714:	4628      	mov	r0, r5
9000c716:	f000 f82b 	bl	9000c770 <__swsetup_r>
9000c71a:	b118      	cbz	r0, 9000c724 <__swbuf_r+0x32>
9000c71c:	f04f 37ff 	mov.w	r7, #4294967295
9000c720:	4638      	mov	r0, r7
9000c722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c724:	6823      	ldr	r3, [r4, #0]
9000c726:	6922      	ldr	r2, [r4, #16]
9000c728:	1a98      	subs	r0, r3, r2
9000c72a:	6963      	ldr	r3, [r4, #20]
9000c72c:	b2f6      	uxtb	r6, r6
9000c72e:	4283      	cmp	r3, r0
9000c730:	4637      	mov	r7, r6
9000c732:	dc05      	bgt.n	9000c740 <__swbuf_r+0x4e>
9000c734:	4621      	mov	r1, r4
9000c736:	4628      	mov	r0, r5
9000c738:	f000 fdfe 	bl	9000d338 <_fflush_r>
9000c73c:	2800      	cmp	r0, #0
9000c73e:	d1ed      	bne.n	9000c71c <__swbuf_r+0x2a>
9000c740:	68a3      	ldr	r3, [r4, #8]
9000c742:	3b01      	subs	r3, #1
9000c744:	60a3      	str	r3, [r4, #8]
9000c746:	6823      	ldr	r3, [r4, #0]
9000c748:	1c5a      	adds	r2, r3, #1
9000c74a:	6022      	str	r2, [r4, #0]
9000c74c:	701e      	strb	r6, [r3, #0]
9000c74e:	6962      	ldr	r2, [r4, #20]
9000c750:	1c43      	adds	r3, r0, #1
9000c752:	429a      	cmp	r2, r3
9000c754:	d004      	beq.n	9000c760 <__swbuf_r+0x6e>
9000c756:	89a3      	ldrh	r3, [r4, #12]
9000c758:	07db      	lsls	r3, r3, #31
9000c75a:	d5e1      	bpl.n	9000c720 <__swbuf_r+0x2e>
9000c75c:	2e0a      	cmp	r6, #10
9000c75e:	d1df      	bne.n	9000c720 <__swbuf_r+0x2e>
9000c760:	4621      	mov	r1, r4
9000c762:	4628      	mov	r0, r5
9000c764:	f000 fde8 	bl	9000d338 <_fflush_r>
9000c768:	2800      	cmp	r0, #0
9000c76a:	d0d9      	beq.n	9000c720 <__swbuf_r+0x2e>
9000c76c:	e7d6      	b.n	9000c71c <__swbuf_r+0x2a>
	...

9000c770 <__swsetup_r>:
9000c770:	b538      	push	{r3, r4, r5, lr}
9000c772:	4b29      	ldr	r3, [pc, #164]	@ (9000c818 <__swsetup_r+0xa8>)
9000c774:	4605      	mov	r5, r0
9000c776:	6818      	ldr	r0, [r3, #0]
9000c778:	460c      	mov	r4, r1
9000c77a:	b118      	cbz	r0, 9000c784 <__swsetup_r+0x14>
9000c77c:	6a03      	ldr	r3, [r0, #32]
9000c77e:	b90b      	cbnz	r3, 9000c784 <__swsetup_r+0x14>
9000c780:	f7ff feac 	bl	9000c4dc <__sinit>
9000c784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c788:	0719      	lsls	r1, r3, #28
9000c78a:	d422      	bmi.n	9000c7d2 <__swsetup_r+0x62>
9000c78c:	06da      	lsls	r2, r3, #27
9000c78e:	d407      	bmi.n	9000c7a0 <__swsetup_r+0x30>
9000c790:	2209      	movs	r2, #9
9000c792:	602a      	str	r2, [r5, #0]
9000c794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c798:	81a3      	strh	r3, [r4, #12]
9000c79a:	f04f 30ff 	mov.w	r0, #4294967295
9000c79e:	e033      	b.n	9000c808 <__swsetup_r+0x98>
9000c7a0:	0758      	lsls	r0, r3, #29
9000c7a2:	d512      	bpl.n	9000c7ca <__swsetup_r+0x5a>
9000c7a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c7a6:	b141      	cbz	r1, 9000c7ba <__swsetup_r+0x4a>
9000c7a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c7ac:	4299      	cmp	r1, r3
9000c7ae:	d002      	beq.n	9000c7b6 <__swsetup_r+0x46>
9000c7b0:	4628      	mov	r0, r5
9000c7b2:	f000 f8cd 	bl	9000c950 <_free_r>
9000c7b6:	2300      	movs	r3, #0
9000c7b8:	6363      	str	r3, [r4, #52]	@ 0x34
9000c7ba:	89a3      	ldrh	r3, [r4, #12]
9000c7bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c7c0:	81a3      	strh	r3, [r4, #12]
9000c7c2:	2300      	movs	r3, #0
9000c7c4:	6063      	str	r3, [r4, #4]
9000c7c6:	6923      	ldr	r3, [r4, #16]
9000c7c8:	6023      	str	r3, [r4, #0]
9000c7ca:	89a3      	ldrh	r3, [r4, #12]
9000c7cc:	f043 0308 	orr.w	r3, r3, #8
9000c7d0:	81a3      	strh	r3, [r4, #12]
9000c7d2:	6923      	ldr	r3, [r4, #16]
9000c7d4:	b94b      	cbnz	r3, 9000c7ea <__swsetup_r+0x7a>
9000c7d6:	89a3      	ldrh	r3, [r4, #12]
9000c7d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c7e0:	d003      	beq.n	9000c7ea <__swsetup_r+0x7a>
9000c7e2:	4621      	mov	r1, r4
9000c7e4:	4628      	mov	r0, r5
9000c7e6:	f000 fdf5 	bl	9000d3d4 <__smakebuf_r>
9000c7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c7ee:	f013 0201 	ands.w	r2, r3, #1
9000c7f2:	d00a      	beq.n	9000c80a <__swsetup_r+0x9a>
9000c7f4:	2200      	movs	r2, #0
9000c7f6:	60a2      	str	r2, [r4, #8]
9000c7f8:	6962      	ldr	r2, [r4, #20]
9000c7fa:	4252      	negs	r2, r2
9000c7fc:	61a2      	str	r2, [r4, #24]
9000c7fe:	6922      	ldr	r2, [r4, #16]
9000c800:	b942      	cbnz	r2, 9000c814 <__swsetup_r+0xa4>
9000c802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c806:	d1c5      	bne.n	9000c794 <__swsetup_r+0x24>
9000c808:	bd38      	pop	{r3, r4, r5, pc}
9000c80a:	0799      	lsls	r1, r3, #30
9000c80c:	bf58      	it	pl
9000c80e:	6962      	ldrpl	r2, [r4, #20]
9000c810:	60a2      	str	r2, [r4, #8]
9000c812:	e7f4      	b.n	9000c7fe <__swsetup_r+0x8e>
9000c814:	2000      	movs	r0, #0
9000c816:	e7f7      	b.n	9000c808 <__swsetup_r+0x98>
9000c818:	20000084 	.word	0x20000084

9000c81c <memset>:
9000c81c:	4402      	add	r2, r0
9000c81e:	4603      	mov	r3, r0
9000c820:	4293      	cmp	r3, r2
9000c822:	d100      	bne.n	9000c826 <memset+0xa>
9000c824:	4770      	bx	lr
9000c826:	f803 1b01 	strb.w	r1, [r3], #1
9000c82a:	e7f9      	b.n	9000c820 <memset+0x4>

9000c82c <_close_r>:
9000c82c:	b538      	push	{r3, r4, r5, lr}
9000c82e:	4d06      	ldr	r5, [pc, #24]	@ (9000c848 <_close_r+0x1c>)
9000c830:	2300      	movs	r3, #0
9000c832:	4604      	mov	r4, r0
9000c834:	4608      	mov	r0, r1
9000c836:	602b      	str	r3, [r5, #0]
9000c838:	f7f4 fbfd 	bl	90001036 <_close>
9000c83c:	1c43      	adds	r3, r0, #1
9000c83e:	d102      	bne.n	9000c846 <_close_r+0x1a>
9000c840:	682b      	ldr	r3, [r5, #0]
9000c842:	b103      	cbz	r3, 9000c846 <_close_r+0x1a>
9000c844:	6023      	str	r3, [r4, #0]
9000c846:	bd38      	pop	{r3, r4, r5, pc}
9000c848:	20001498 	.word	0x20001498

9000c84c <_lseek_r>:
9000c84c:	b538      	push	{r3, r4, r5, lr}
9000c84e:	4d07      	ldr	r5, [pc, #28]	@ (9000c86c <_lseek_r+0x20>)
9000c850:	4604      	mov	r4, r0
9000c852:	4608      	mov	r0, r1
9000c854:	4611      	mov	r1, r2
9000c856:	2200      	movs	r2, #0
9000c858:	602a      	str	r2, [r5, #0]
9000c85a:	461a      	mov	r2, r3
9000c85c:	f7f4 fc12 	bl	90001084 <_lseek>
9000c860:	1c43      	adds	r3, r0, #1
9000c862:	d102      	bne.n	9000c86a <_lseek_r+0x1e>
9000c864:	682b      	ldr	r3, [r5, #0]
9000c866:	b103      	cbz	r3, 9000c86a <_lseek_r+0x1e>
9000c868:	6023      	str	r3, [r4, #0]
9000c86a:	bd38      	pop	{r3, r4, r5, pc}
9000c86c:	20001498 	.word	0x20001498

9000c870 <_read_r>:
9000c870:	b538      	push	{r3, r4, r5, lr}
9000c872:	4d07      	ldr	r5, [pc, #28]	@ (9000c890 <_read_r+0x20>)
9000c874:	4604      	mov	r4, r0
9000c876:	4608      	mov	r0, r1
9000c878:	4611      	mov	r1, r2
9000c87a:	2200      	movs	r2, #0
9000c87c:	602a      	str	r2, [r5, #0]
9000c87e:	461a      	mov	r2, r3
9000c880:	f7f4 fba0 	bl	90000fc4 <_read>
9000c884:	1c43      	adds	r3, r0, #1
9000c886:	d102      	bne.n	9000c88e <_read_r+0x1e>
9000c888:	682b      	ldr	r3, [r5, #0]
9000c88a:	b103      	cbz	r3, 9000c88e <_read_r+0x1e>
9000c88c:	6023      	str	r3, [r4, #0]
9000c88e:	bd38      	pop	{r3, r4, r5, pc}
9000c890:	20001498 	.word	0x20001498

9000c894 <_sbrk_r>:
9000c894:	b538      	push	{r3, r4, r5, lr}
9000c896:	4d06      	ldr	r5, [pc, #24]	@ (9000c8b0 <_sbrk_r+0x1c>)
9000c898:	2300      	movs	r3, #0
9000c89a:	4604      	mov	r4, r0
9000c89c:	4608      	mov	r0, r1
9000c89e:	602b      	str	r3, [r5, #0]
9000c8a0:	f7f4 fbfe 	bl	900010a0 <_sbrk>
9000c8a4:	1c43      	adds	r3, r0, #1
9000c8a6:	d102      	bne.n	9000c8ae <_sbrk_r+0x1a>
9000c8a8:	682b      	ldr	r3, [r5, #0]
9000c8aa:	b103      	cbz	r3, 9000c8ae <_sbrk_r+0x1a>
9000c8ac:	6023      	str	r3, [r4, #0]
9000c8ae:	bd38      	pop	{r3, r4, r5, pc}
9000c8b0:	20001498 	.word	0x20001498

9000c8b4 <_write_r>:
9000c8b4:	b538      	push	{r3, r4, r5, lr}
9000c8b6:	4d07      	ldr	r5, [pc, #28]	@ (9000c8d4 <_write_r+0x20>)
9000c8b8:	4604      	mov	r4, r0
9000c8ba:	4608      	mov	r0, r1
9000c8bc:	4611      	mov	r1, r2
9000c8be:	2200      	movs	r2, #0
9000c8c0:	602a      	str	r2, [r5, #0]
9000c8c2:	461a      	mov	r2, r3
9000c8c4:	f7f4 fb9b 	bl	90000ffe <_write>
9000c8c8:	1c43      	adds	r3, r0, #1
9000c8ca:	d102      	bne.n	9000c8d2 <_write_r+0x1e>
9000c8cc:	682b      	ldr	r3, [r5, #0]
9000c8ce:	b103      	cbz	r3, 9000c8d2 <_write_r+0x1e>
9000c8d0:	6023      	str	r3, [r4, #0]
9000c8d2:	bd38      	pop	{r3, r4, r5, pc}
9000c8d4:	20001498 	.word	0x20001498

9000c8d8 <__errno>:
9000c8d8:	4b01      	ldr	r3, [pc, #4]	@ (9000c8e0 <__errno+0x8>)
9000c8da:	6818      	ldr	r0, [r3, #0]
9000c8dc:	4770      	bx	lr
9000c8de:	bf00      	nop
9000c8e0:	20000084 	.word	0x20000084

9000c8e4 <__libc_init_array>:
9000c8e4:	b570      	push	{r4, r5, r6, lr}
9000c8e6:	4d0d      	ldr	r5, [pc, #52]	@ (9000c91c <__libc_init_array+0x38>)
9000c8e8:	4c0d      	ldr	r4, [pc, #52]	@ (9000c920 <__libc_init_array+0x3c>)
9000c8ea:	1b64      	subs	r4, r4, r5
9000c8ec:	10a4      	asrs	r4, r4, #2
9000c8ee:	2600      	movs	r6, #0
9000c8f0:	42a6      	cmp	r6, r4
9000c8f2:	d109      	bne.n	9000c908 <__libc_init_array+0x24>
9000c8f4:	4d0b      	ldr	r5, [pc, #44]	@ (9000c924 <__libc_init_array+0x40>)
9000c8f6:	4c0c      	ldr	r4, [pc, #48]	@ (9000c928 <__libc_init_array+0x44>)
9000c8f8:	f000 fe1a 	bl	9000d530 <_init>
9000c8fc:	1b64      	subs	r4, r4, r5
9000c8fe:	10a4      	asrs	r4, r4, #2
9000c900:	2600      	movs	r6, #0
9000c902:	42a6      	cmp	r6, r4
9000c904:	d105      	bne.n	9000c912 <__libc_init_array+0x2e>
9000c906:	bd70      	pop	{r4, r5, r6, pc}
9000c908:	f855 3b04 	ldr.w	r3, [r5], #4
9000c90c:	4798      	blx	r3
9000c90e:	3601      	adds	r6, #1
9000c910:	e7ee      	b.n	9000c8f0 <__libc_init_array+0xc>
9000c912:	f855 3b04 	ldr.w	r3, [r5], #4
9000c916:	4798      	blx	r3
9000c918:	3601      	adds	r6, #1
9000c91a:	e7f2      	b.n	9000c902 <__libc_init_array+0x1e>
9000c91c:	9000fc38 	.word	0x9000fc38
9000c920:	9000fc38 	.word	0x9000fc38
9000c924:	9000fc38 	.word	0x9000fc38
9000c928:	9000fc3c 	.word	0x9000fc3c

9000c92c <__retarget_lock_init_recursive>:
9000c92c:	4770      	bx	lr

9000c92e <__retarget_lock_acquire_recursive>:
9000c92e:	4770      	bx	lr

9000c930 <__retarget_lock_release_recursive>:
9000c930:	4770      	bx	lr

9000c932 <memcpy>:
9000c932:	440a      	add	r2, r1
9000c934:	4291      	cmp	r1, r2
9000c936:	f100 33ff 	add.w	r3, r0, #4294967295
9000c93a:	d100      	bne.n	9000c93e <memcpy+0xc>
9000c93c:	4770      	bx	lr
9000c93e:	b510      	push	{r4, lr}
9000c940:	f811 4b01 	ldrb.w	r4, [r1], #1
9000c944:	f803 4f01 	strb.w	r4, [r3, #1]!
9000c948:	4291      	cmp	r1, r2
9000c94a:	d1f9      	bne.n	9000c940 <memcpy+0xe>
9000c94c:	bd10      	pop	{r4, pc}
	...

9000c950 <_free_r>:
9000c950:	b538      	push	{r3, r4, r5, lr}
9000c952:	4605      	mov	r5, r0
9000c954:	2900      	cmp	r1, #0
9000c956:	d041      	beq.n	9000c9dc <_free_r+0x8c>
9000c958:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c95c:	1f0c      	subs	r4, r1, #4
9000c95e:	2b00      	cmp	r3, #0
9000c960:	bfb8      	it	lt
9000c962:	18e4      	addlt	r4, r4, r3
9000c964:	f7ff fd22 	bl	9000c3ac <__malloc_lock>
9000c968:	4a1d      	ldr	r2, [pc, #116]	@ (9000c9e0 <_free_r+0x90>)
9000c96a:	6813      	ldr	r3, [r2, #0]
9000c96c:	b933      	cbnz	r3, 9000c97c <_free_r+0x2c>
9000c96e:	6063      	str	r3, [r4, #4]
9000c970:	6014      	str	r4, [r2, #0]
9000c972:	4628      	mov	r0, r5
9000c974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000c978:	f7ff bd1e 	b.w	9000c3b8 <__malloc_unlock>
9000c97c:	42a3      	cmp	r3, r4
9000c97e:	d908      	bls.n	9000c992 <_free_r+0x42>
9000c980:	6820      	ldr	r0, [r4, #0]
9000c982:	1821      	adds	r1, r4, r0
9000c984:	428b      	cmp	r3, r1
9000c986:	bf01      	itttt	eq
9000c988:	6819      	ldreq	r1, [r3, #0]
9000c98a:	685b      	ldreq	r3, [r3, #4]
9000c98c:	1809      	addeq	r1, r1, r0
9000c98e:	6021      	streq	r1, [r4, #0]
9000c990:	e7ed      	b.n	9000c96e <_free_r+0x1e>
9000c992:	461a      	mov	r2, r3
9000c994:	685b      	ldr	r3, [r3, #4]
9000c996:	b10b      	cbz	r3, 9000c99c <_free_r+0x4c>
9000c998:	42a3      	cmp	r3, r4
9000c99a:	d9fa      	bls.n	9000c992 <_free_r+0x42>
9000c99c:	6811      	ldr	r1, [r2, #0]
9000c99e:	1850      	adds	r0, r2, r1
9000c9a0:	42a0      	cmp	r0, r4
9000c9a2:	d10b      	bne.n	9000c9bc <_free_r+0x6c>
9000c9a4:	6820      	ldr	r0, [r4, #0]
9000c9a6:	4401      	add	r1, r0
9000c9a8:	1850      	adds	r0, r2, r1
9000c9aa:	4283      	cmp	r3, r0
9000c9ac:	6011      	str	r1, [r2, #0]
9000c9ae:	d1e0      	bne.n	9000c972 <_free_r+0x22>
9000c9b0:	6818      	ldr	r0, [r3, #0]
9000c9b2:	685b      	ldr	r3, [r3, #4]
9000c9b4:	6053      	str	r3, [r2, #4]
9000c9b6:	4408      	add	r0, r1
9000c9b8:	6010      	str	r0, [r2, #0]
9000c9ba:	e7da      	b.n	9000c972 <_free_r+0x22>
9000c9bc:	d902      	bls.n	9000c9c4 <_free_r+0x74>
9000c9be:	230c      	movs	r3, #12
9000c9c0:	602b      	str	r3, [r5, #0]
9000c9c2:	e7d6      	b.n	9000c972 <_free_r+0x22>
9000c9c4:	6820      	ldr	r0, [r4, #0]
9000c9c6:	1821      	adds	r1, r4, r0
9000c9c8:	428b      	cmp	r3, r1
9000c9ca:	bf04      	itt	eq
9000c9cc:	6819      	ldreq	r1, [r3, #0]
9000c9ce:	685b      	ldreq	r3, [r3, #4]
9000c9d0:	6063      	str	r3, [r4, #4]
9000c9d2:	bf04      	itt	eq
9000c9d4:	1809      	addeq	r1, r1, r0
9000c9d6:	6021      	streq	r1, [r4, #0]
9000c9d8:	6054      	str	r4, [r2, #4]
9000c9da:	e7ca      	b.n	9000c972 <_free_r+0x22>
9000c9dc:	bd38      	pop	{r3, r4, r5, pc}
9000c9de:	bf00      	nop
9000c9e0:	20001358 	.word	0x20001358

9000c9e4 <__ssputs_r>:
9000c9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c9e8:	688e      	ldr	r6, [r1, #8]
9000c9ea:	461f      	mov	r7, r3
9000c9ec:	42be      	cmp	r6, r7
9000c9ee:	680b      	ldr	r3, [r1, #0]
9000c9f0:	4682      	mov	sl, r0
9000c9f2:	460c      	mov	r4, r1
9000c9f4:	4690      	mov	r8, r2
9000c9f6:	d82d      	bhi.n	9000ca54 <__ssputs_r+0x70>
9000c9f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000c9fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
9000ca00:	d026      	beq.n	9000ca50 <__ssputs_r+0x6c>
9000ca02:	6965      	ldr	r5, [r4, #20]
9000ca04:	6909      	ldr	r1, [r1, #16]
9000ca06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000ca0a:	eba3 0901 	sub.w	r9, r3, r1
9000ca0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000ca12:	1c7b      	adds	r3, r7, #1
9000ca14:	444b      	add	r3, r9
9000ca16:	106d      	asrs	r5, r5, #1
9000ca18:	429d      	cmp	r5, r3
9000ca1a:	bf38      	it	cc
9000ca1c:	461d      	movcc	r5, r3
9000ca1e:	0553      	lsls	r3, r2, #21
9000ca20:	d527      	bpl.n	9000ca72 <__ssputs_r+0x8e>
9000ca22:	4629      	mov	r1, r5
9000ca24:	f7ff fc42 	bl	9000c2ac <_malloc_r>
9000ca28:	4606      	mov	r6, r0
9000ca2a:	b360      	cbz	r0, 9000ca86 <__ssputs_r+0xa2>
9000ca2c:	6921      	ldr	r1, [r4, #16]
9000ca2e:	464a      	mov	r2, r9
9000ca30:	f7ff ff7f 	bl	9000c932 <memcpy>
9000ca34:	89a3      	ldrh	r3, [r4, #12]
9000ca36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
9000ca3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000ca3e:	81a3      	strh	r3, [r4, #12]
9000ca40:	6126      	str	r6, [r4, #16]
9000ca42:	6165      	str	r5, [r4, #20]
9000ca44:	444e      	add	r6, r9
9000ca46:	eba5 0509 	sub.w	r5, r5, r9
9000ca4a:	6026      	str	r6, [r4, #0]
9000ca4c:	60a5      	str	r5, [r4, #8]
9000ca4e:	463e      	mov	r6, r7
9000ca50:	42be      	cmp	r6, r7
9000ca52:	d900      	bls.n	9000ca56 <__ssputs_r+0x72>
9000ca54:	463e      	mov	r6, r7
9000ca56:	6820      	ldr	r0, [r4, #0]
9000ca58:	4632      	mov	r2, r6
9000ca5a:	4641      	mov	r1, r8
9000ca5c:	f000 fcf6 	bl	9000d44c <memmove>
9000ca60:	68a3      	ldr	r3, [r4, #8]
9000ca62:	1b9b      	subs	r3, r3, r6
9000ca64:	60a3      	str	r3, [r4, #8]
9000ca66:	6823      	ldr	r3, [r4, #0]
9000ca68:	4433      	add	r3, r6
9000ca6a:	6023      	str	r3, [r4, #0]
9000ca6c:	2000      	movs	r0, #0
9000ca6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000ca72:	462a      	mov	r2, r5
9000ca74:	f000 fd26 	bl	9000d4c4 <_realloc_r>
9000ca78:	4606      	mov	r6, r0
9000ca7a:	2800      	cmp	r0, #0
9000ca7c:	d1e0      	bne.n	9000ca40 <__ssputs_r+0x5c>
9000ca7e:	6921      	ldr	r1, [r4, #16]
9000ca80:	4650      	mov	r0, sl
9000ca82:	f7ff ff65 	bl	9000c950 <_free_r>
9000ca86:	230c      	movs	r3, #12
9000ca88:	f8ca 3000 	str.w	r3, [sl]
9000ca8c:	89a3      	ldrh	r3, [r4, #12]
9000ca8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000ca92:	81a3      	strh	r3, [r4, #12]
9000ca94:	f04f 30ff 	mov.w	r0, #4294967295
9000ca98:	e7e9      	b.n	9000ca6e <__ssputs_r+0x8a>
	...

9000ca9c <_svfiprintf_r>:
9000ca9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000caa0:	4698      	mov	r8, r3
9000caa2:	898b      	ldrh	r3, [r1, #12]
9000caa4:	061b      	lsls	r3, r3, #24
9000caa6:	b09d      	sub	sp, #116	@ 0x74
9000caa8:	4607      	mov	r7, r0
9000caaa:	460d      	mov	r5, r1
9000caac:	4614      	mov	r4, r2
9000caae:	d510      	bpl.n	9000cad2 <_svfiprintf_r+0x36>
9000cab0:	690b      	ldr	r3, [r1, #16]
9000cab2:	b973      	cbnz	r3, 9000cad2 <_svfiprintf_r+0x36>
9000cab4:	2140      	movs	r1, #64	@ 0x40
9000cab6:	f7ff fbf9 	bl	9000c2ac <_malloc_r>
9000caba:	6028      	str	r0, [r5, #0]
9000cabc:	6128      	str	r0, [r5, #16]
9000cabe:	b930      	cbnz	r0, 9000cace <_svfiprintf_r+0x32>
9000cac0:	230c      	movs	r3, #12
9000cac2:	603b      	str	r3, [r7, #0]
9000cac4:	f04f 30ff 	mov.w	r0, #4294967295
9000cac8:	b01d      	add	sp, #116	@ 0x74
9000caca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000cace:	2340      	movs	r3, #64	@ 0x40
9000cad0:	616b      	str	r3, [r5, #20]
9000cad2:	2300      	movs	r3, #0
9000cad4:	9309      	str	r3, [sp, #36]	@ 0x24
9000cad6:	2320      	movs	r3, #32
9000cad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000cadc:	f8cd 800c 	str.w	r8, [sp, #12]
9000cae0:	2330      	movs	r3, #48	@ 0x30
9000cae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 9000cc80 <_svfiprintf_r+0x1e4>
9000cae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000caea:	f04f 0901 	mov.w	r9, #1
9000caee:	4623      	mov	r3, r4
9000caf0:	469a      	mov	sl, r3
9000caf2:	f813 2b01 	ldrb.w	r2, [r3], #1
9000caf6:	b10a      	cbz	r2, 9000cafc <_svfiprintf_r+0x60>
9000caf8:	2a25      	cmp	r2, #37	@ 0x25
9000cafa:	d1f9      	bne.n	9000caf0 <_svfiprintf_r+0x54>
9000cafc:	ebba 0b04 	subs.w	fp, sl, r4
9000cb00:	d00b      	beq.n	9000cb1a <_svfiprintf_r+0x7e>
9000cb02:	465b      	mov	r3, fp
9000cb04:	4622      	mov	r2, r4
9000cb06:	4629      	mov	r1, r5
9000cb08:	4638      	mov	r0, r7
9000cb0a:	f7ff ff6b 	bl	9000c9e4 <__ssputs_r>
9000cb0e:	3001      	adds	r0, #1
9000cb10:	f000 80a7 	beq.w	9000cc62 <_svfiprintf_r+0x1c6>
9000cb14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000cb16:	445a      	add	r2, fp
9000cb18:	9209      	str	r2, [sp, #36]	@ 0x24
9000cb1a:	f89a 3000 	ldrb.w	r3, [sl]
9000cb1e:	2b00      	cmp	r3, #0
9000cb20:	f000 809f 	beq.w	9000cc62 <_svfiprintf_r+0x1c6>
9000cb24:	2300      	movs	r3, #0
9000cb26:	f04f 32ff 	mov.w	r2, #4294967295
9000cb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000cb2e:	f10a 0a01 	add.w	sl, sl, #1
9000cb32:	9304      	str	r3, [sp, #16]
9000cb34:	9307      	str	r3, [sp, #28]
9000cb36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000cb3a:	931a      	str	r3, [sp, #104]	@ 0x68
9000cb3c:	4654      	mov	r4, sl
9000cb3e:	2205      	movs	r2, #5
9000cb40:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cb44:	484e      	ldr	r0, [pc, #312]	@ (9000cc80 <_svfiprintf_r+0x1e4>)
9000cb46:	f7f3 fbcb 	bl	900002e0 <memchr>
9000cb4a:	9a04      	ldr	r2, [sp, #16]
9000cb4c:	b9d8      	cbnz	r0, 9000cb86 <_svfiprintf_r+0xea>
9000cb4e:	06d0      	lsls	r0, r2, #27
9000cb50:	bf44      	itt	mi
9000cb52:	2320      	movmi	r3, #32
9000cb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cb58:	0711      	lsls	r1, r2, #28
9000cb5a:	bf44      	itt	mi
9000cb5c:	232b      	movmi	r3, #43	@ 0x2b
9000cb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cb62:	f89a 3000 	ldrb.w	r3, [sl]
9000cb66:	2b2a      	cmp	r3, #42	@ 0x2a
9000cb68:	d015      	beq.n	9000cb96 <_svfiprintf_r+0xfa>
9000cb6a:	9a07      	ldr	r2, [sp, #28]
9000cb6c:	4654      	mov	r4, sl
9000cb6e:	2000      	movs	r0, #0
9000cb70:	f04f 0c0a 	mov.w	ip, #10
9000cb74:	4621      	mov	r1, r4
9000cb76:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cb7a:	3b30      	subs	r3, #48	@ 0x30
9000cb7c:	2b09      	cmp	r3, #9
9000cb7e:	d94b      	bls.n	9000cc18 <_svfiprintf_r+0x17c>
9000cb80:	b1b0      	cbz	r0, 9000cbb0 <_svfiprintf_r+0x114>
9000cb82:	9207      	str	r2, [sp, #28]
9000cb84:	e014      	b.n	9000cbb0 <_svfiprintf_r+0x114>
9000cb86:	eba0 0308 	sub.w	r3, r0, r8
9000cb8a:	fa09 f303 	lsl.w	r3, r9, r3
9000cb8e:	4313      	orrs	r3, r2
9000cb90:	9304      	str	r3, [sp, #16]
9000cb92:	46a2      	mov	sl, r4
9000cb94:	e7d2      	b.n	9000cb3c <_svfiprintf_r+0xa0>
9000cb96:	9b03      	ldr	r3, [sp, #12]
9000cb98:	1d19      	adds	r1, r3, #4
9000cb9a:	681b      	ldr	r3, [r3, #0]
9000cb9c:	9103      	str	r1, [sp, #12]
9000cb9e:	2b00      	cmp	r3, #0
9000cba0:	bfbb      	ittet	lt
9000cba2:	425b      	neglt	r3, r3
9000cba4:	f042 0202 	orrlt.w	r2, r2, #2
9000cba8:	9307      	strge	r3, [sp, #28]
9000cbaa:	9307      	strlt	r3, [sp, #28]
9000cbac:	bfb8      	it	lt
9000cbae:	9204      	strlt	r2, [sp, #16]
9000cbb0:	7823      	ldrb	r3, [r4, #0]
9000cbb2:	2b2e      	cmp	r3, #46	@ 0x2e
9000cbb4:	d10a      	bne.n	9000cbcc <_svfiprintf_r+0x130>
9000cbb6:	7863      	ldrb	r3, [r4, #1]
9000cbb8:	2b2a      	cmp	r3, #42	@ 0x2a
9000cbba:	d132      	bne.n	9000cc22 <_svfiprintf_r+0x186>
9000cbbc:	9b03      	ldr	r3, [sp, #12]
9000cbbe:	1d1a      	adds	r2, r3, #4
9000cbc0:	681b      	ldr	r3, [r3, #0]
9000cbc2:	9203      	str	r2, [sp, #12]
9000cbc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cbc8:	3402      	adds	r4, #2
9000cbca:	9305      	str	r3, [sp, #20]
9000cbcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 9000cc90 <_svfiprintf_r+0x1f4>
9000cbd0:	7821      	ldrb	r1, [r4, #0]
9000cbd2:	2203      	movs	r2, #3
9000cbd4:	4650      	mov	r0, sl
9000cbd6:	f7f3 fb83 	bl	900002e0 <memchr>
9000cbda:	b138      	cbz	r0, 9000cbec <_svfiprintf_r+0x150>
9000cbdc:	9b04      	ldr	r3, [sp, #16]
9000cbde:	eba0 000a 	sub.w	r0, r0, sl
9000cbe2:	2240      	movs	r2, #64	@ 0x40
9000cbe4:	4082      	lsls	r2, r0
9000cbe6:	4313      	orrs	r3, r2
9000cbe8:	3401      	adds	r4, #1
9000cbea:	9304      	str	r3, [sp, #16]
9000cbec:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cbf0:	4824      	ldr	r0, [pc, #144]	@ (9000cc84 <_svfiprintf_r+0x1e8>)
9000cbf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cbf6:	2206      	movs	r2, #6
9000cbf8:	f7f3 fb72 	bl	900002e0 <memchr>
9000cbfc:	2800      	cmp	r0, #0
9000cbfe:	d036      	beq.n	9000cc6e <_svfiprintf_r+0x1d2>
9000cc00:	4b21      	ldr	r3, [pc, #132]	@ (9000cc88 <_svfiprintf_r+0x1ec>)
9000cc02:	bb1b      	cbnz	r3, 9000cc4c <_svfiprintf_r+0x1b0>
9000cc04:	9b03      	ldr	r3, [sp, #12]
9000cc06:	3307      	adds	r3, #7
9000cc08:	f023 0307 	bic.w	r3, r3, #7
9000cc0c:	3308      	adds	r3, #8
9000cc0e:	9303      	str	r3, [sp, #12]
9000cc10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cc12:	4433      	add	r3, r6
9000cc14:	9309      	str	r3, [sp, #36]	@ 0x24
9000cc16:	e76a      	b.n	9000caee <_svfiprintf_r+0x52>
9000cc18:	fb0c 3202 	mla	r2, ip, r2, r3
9000cc1c:	460c      	mov	r4, r1
9000cc1e:	2001      	movs	r0, #1
9000cc20:	e7a8      	b.n	9000cb74 <_svfiprintf_r+0xd8>
9000cc22:	2300      	movs	r3, #0
9000cc24:	3401      	adds	r4, #1
9000cc26:	9305      	str	r3, [sp, #20]
9000cc28:	4619      	mov	r1, r3
9000cc2a:	f04f 0c0a 	mov.w	ip, #10
9000cc2e:	4620      	mov	r0, r4
9000cc30:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cc34:	3a30      	subs	r2, #48	@ 0x30
9000cc36:	2a09      	cmp	r2, #9
9000cc38:	d903      	bls.n	9000cc42 <_svfiprintf_r+0x1a6>
9000cc3a:	2b00      	cmp	r3, #0
9000cc3c:	d0c6      	beq.n	9000cbcc <_svfiprintf_r+0x130>
9000cc3e:	9105      	str	r1, [sp, #20]
9000cc40:	e7c4      	b.n	9000cbcc <_svfiprintf_r+0x130>
9000cc42:	fb0c 2101 	mla	r1, ip, r1, r2
9000cc46:	4604      	mov	r4, r0
9000cc48:	2301      	movs	r3, #1
9000cc4a:	e7f0      	b.n	9000cc2e <_svfiprintf_r+0x192>
9000cc4c:	ab03      	add	r3, sp, #12
9000cc4e:	9300      	str	r3, [sp, #0]
9000cc50:	462a      	mov	r2, r5
9000cc52:	4b0e      	ldr	r3, [pc, #56]	@ (9000cc8c <_svfiprintf_r+0x1f0>)
9000cc54:	a904      	add	r1, sp, #16
9000cc56:	4638      	mov	r0, r7
9000cc58:	f3af 8000 	nop.w
9000cc5c:	1c42      	adds	r2, r0, #1
9000cc5e:	4606      	mov	r6, r0
9000cc60:	d1d6      	bne.n	9000cc10 <_svfiprintf_r+0x174>
9000cc62:	89ab      	ldrh	r3, [r5, #12]
9000cc64:	065b      	lsls	r3, r3, #25
9000cc66:	f53f af2d 	bmi.w	9000cac4 <_svfiprintf_r+0x28>
9000cc6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cc6c:	e72c      	b.n	9000cac8 <_svfiprintf_r+0x2c>
9000cc6e:	ab03      	add	r3, sp, #12
9000cc70:	9300      	str	r3, [sp, #0]
9000cc72:	462a      	mov	r2, r5
9000cc74:	4b05      	ldr	r3, [pc, #20]	@ (9000cc8c <_svfiprintf_r+0x1f0>)
9000cc76:	a904      	add	r1, sp, #16
9000cc78:	4638      	mov	r0, r7
9000cc7a:	f000 f9bb 	bl	9000cff4 <_printf_i>
9000cc7e:	e7ed      	b.n	9000cc5c <_svfiprintf_r+0x1c0>
9000cc80:	9000fbfc 	.word	0x9000fbfc
9000cc84:	9000fc06 	.word	0x9000fc06
9000cc88:	00000000 	.word	0x00000000
9000cc8c:	9000c9e5 	.word	0x9000c9e5
9000cc90:	9000fc02 	.word	0x9000fc02

9000cc94 <__sfputc_r>:
9000cc94:	6893      	ldr	r3, [r2, #8]
9000cc96:	3b01      	subs	r3, #1
9000cc98:	2b00      	cmp	r3, #0
9000cc9a:	b410      	push	{r4}
9000cc9c:	6093      	str	r3, [r2, #8]
9000cc9e:	da08      	bge.n	9000ccb2 <__sfputc_r+0x1e>
9000cca0:	6994      	ldr	r4, [r2, #24]
9000cca2:	42a3      	cmp	r3, r4
9000cca4:	db01      	blt.n	9000ccaa <__sfputc_r+0x16>
9000cca6:	290a      	cmp	r1, #10
9000cca8:	d103      	bne.n	9000ccb2 <__sfputc_r+0x1e>
9000ccaa:	f85d 4b04 	ldr.w	r4, [sp], #4
9000ccae:	f7ff bd20 	b.w	9000c6f2 <__swbuf_r>
9000ccb2:	6813      	ldr	r3, [r2, #0]
9000ccb4:	1c58      	adds	r0, r3, #1
9000ccb6:	6010      	str	r0, [r2, #0]
9000ccb8:	7019      	strb	r1, [r3, #0]
9000ccba:	4608      	mov	r0, r1
9000ccbc:	f85d 4b04 	ldr.w	r4, [sp], #4
9000ccc0:	4770      	bx	lr

9000ccc2 <__sfputs_r>:
9000ccc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000ccc4:	4606      	mov	r6, r0
9000ccc6:	460f      	mov	r7, r1
9000ccc8:	4614      	mov	r4, r2
9000ccca:	18d5      	adds	r5, r2, r3
9000cccc:	42ac      	cmp	r4, r5
9000ccce:	d101      	bne.n	9000ccd4 <__sfputs_r+0x12>
9000ccd0:	2000      	movs	r0, #0
9000ccd2:	e007      	b.n	9000cce4 <__sfputs_r+0x22>
9000ccd4:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ccd8:	463a      	mov	r2, r7
9000ccda:	4630      	mov	r0, r6
9000ccdc:	f7ff ffda 	bl	9000cc94 <__sfputc_r>
9000cce0:	1c43      	adds	r3, r0, #1
9000cce2:	d1f3      	bne.n	9000cccc <__sfputs_r+0xa>
9000cce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000cce8 <_vfiprintf_r>:
9000cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ccec:	460d      	mov	r5, r1
9000ccee:	b09d      	sub	sp, #116	@ 0x74
9000ccf0:	4614      	mov	r4, r2
9000ccf2:	4698      	mov	r8, r3
9000ccf4:	4606      	mov	r6, r0
9000ccf6:	b118      	cbz	r0, 9000cd00 <_vfiprintf_r+0x18>
9000ccf8:	6a03      	ldr	r3, [r0, #32]
9000ccfa:	b90b      	cbnz	r3, 9000cd00 <_vfiprintf_r+0x18>
9000ccfc:	f7ff fbee 	bl	9000c4dc <__sinit>
9000cd00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cd02:	07d9      	lsls	r1, r3, #31
9000cd04:	d405      	bmi.n	9000cd12 <_vfiprintf_r+0x2a>
9000cd06:	89ab      	ldrh	r3, [r5, #12]
9000cd08:	059a      	lsls	r2, r3, #22
9000cd0a:	d402      	bmi.n	9000cd12 <_vfiprintf_r+0x2a>
9000cd0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cd0e:	f7ff fe0e 	bl	9000c92e <__retarget_lock_acquire_recursive>
9000cd12:	89ab      	ldrh	r3, [r5, #12]
9000cd14:	071b      	lsls	r3, r3, #28
9000cd16:	d501      	bpl.n	9000cd1c <_vfiprintf_r+0x34>
9000cd18:	692b      	ldr	r3, [r5, #16]
9000cd1a:	b99b      	cbnz	r3, 9000cd44 <_vfiprintf_r+0x5c>
9000cd1c:	4629      	mov	r1, r5
9000cd1e:	4630      	mov	r0, r6
9000cd20:	f7ff fd26 	bl	9000c770 <__swsetup_r>
9000cd24:	b170      	cbz	r0, 9000cd44 <_vfiprintf_r+0x5c>
9000cd26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cd28:	07dc      	lsls	r4, r3, #31
9000cd2a:	d504      	bpl.n	9000cd36 <_vfiprintf_r+0x4e>
9000cd2c:	f04f 30ff 	mov.w	r0, #4294967295
9000cd30:	b01d      	add	sp, #116	@ 0x74
9000cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000cd36:	89ab      	ldrh	r3, [r5, #12]
9000cd38:	0598      	lsls	r0, r3, #22
9000cd3a:	d4f7      	bmi.n	9000cd2c <_vfiprintf_r+0x44>
9000cd3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cd3e:	f7ff fdf7 	bl	9000c930 <__retarget_lock_release_recursive>
9000cd42:	e7f3      	b.n	9000cd2c <_vfiprintf_r+0x44>
9000cd44:	2300      	movs	r3, #0
9000cd46:	9309      	str	r3, [sp, #36]	@ 0x24
9000cd48:	2320      	movs	r3, #32
9000cd4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000cd4e:	f8cd 800c 	str.w	r8, [sp, #12]
9000cd52:	2330      	movs	r3, #48	@ 0x30
9000cd54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000cf04 <_vfiprintf_r+0x21c>
9000cd58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000cd5c:	f04f 0901 	mov.w	r9, #1
9000cd60:	4623      	mov	r3, r4
9000cd62:	469a      	mov	sl, r3
9000cd64:	f813 2b01 	ldrb.w	r2, [r3], #1
9000cd68:	b10a      	cbz	r2, 9000cd6e <_vfiprintf_r+0x86>
9000cd6a:	2a25      	cmp	r2, #37	@ 0x25
9000cd6c:	d1f9      	bne.n	9000cd62 <_vfiprintf_r+0x7a>
9000cd6e:	ebba 0b04 	subs.w	fp, sl, r4
9000cd72:	d00b      	beq.n	9000cd8c <_vfiprintf_r+0xa4>
9000cd74:	465b      	mov	r3, fp
9000cd76:	4622      	mov	r2, r4
9000cd78:	4629      	mov	r1, r5
9000cd7a:	4630      	mov	r0, r6
9000cd7c:	f7ff ffa1 	bl	9000ccc2 <__sfputs_r>
9000cd80:	3001      	adds	r0, #1
9000cd82:	f000 80a7 	beq.w	9000ced4 <_vfiprintf_r+0x1ec>
9000cd86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000cd88:	445a      	add	r2, fp
9000cd8a:	9209      	str	r2, [sp, #36]	@ 0x24
9000cd8c:	f89a 3000 	ldrb.w	r3, [sl]
9000cd90:	2b00      	cmp	r3, #0
9000cd92:	f000 809f 	beq.w	9000ced4 <_vfiprintf_r+0x1ec>
9000cd96:	2300      	movs	r3, #0
9000cd98:	f04f 32ff 	mov.w	r2, #4294967295
9000cd9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000cda0:	f10a 0a01 	add.w	sl, sl, #1
9000cda4:	9304      	str	r3, [sp, #16]
9000cda6:	9307      	str	r3, [sp, #28]
9000cda8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000cdac:	931a      	str	r3, [sp, #104]	@ 0x68
9000cdae:	4654      	mov	r4, sl
9000cdb0:	2205      	movs	r2, #5
9000cdb2:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cdb6:	4853      	ldr	r0, [pc, #332]	@ (9000cf04 <_vfiprintf_r+0x21c>)
9000cdb8:	f7f3 fa92 	bl	900002e0 <memchr>
9000cdbc:	9a04      	ldr	r2, [sp, #16]
9000cdbe:	b9d8      	cbnz	r0, 9000cdf8 <_vfiprintf_r+0x110>
9000cdc0:	06d1      	lsls	r1, r2, #27
9000cdc2:	bf44      	itt	mi
9000cdc4:	2320      	movmi	r3, #32
9000cdc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cdca:	0713      	lsls	r3, r2, #28
9000cdcc:	bf44      	itt	mi
9000cdce:	232b      	movmi	r3, #43	@ 0x2b
9000cdd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000cdd4:	f89a 3000 	ldrb.w	r3, [sl]
9000cdd8:	2b2a      	cmp	r3, #42	@ 0x2a
9000cdda:	d015      	beq.n	9000ce08 <_vfiprintf_r+0x120>
9000cddc:	9a07      	ldr	r2, [sp, #28]
9000cdde:	4654      	mov	r4, sl
9000cde0:	2000      	movs	r0, #0
9000cde2:	f04f 0c0a 	mov.w	ip, #10
9000cde6:	4621      	mov	r1, r4
9000cde8:	f811 3b01 	ldrb.w	r3, [r1], #1
9000cdec:	3b30      	subs	r3, #48	@ 0x30
9000cdee:	2b09      	cmp	r3, #9
9000cdf0:	d94b      	bls.n	9000ce8a <_vfiprintf_r+0x1a2>
9000cdf2:	b1b0      	cbz	r0, 9000ce22 <_vfiprintf_r+0x13a>
9000cdf4:	9207      	str	r2, [sp, #28]
9000cdf6:	e014      	b.n	9000ce22 <_vfiprintf_r+0x13a>
9000cdf8:	eba0 0308 	sub.w	r3, r0, r8
9000cdfc:	fa09 f303 	lsl.w	r3, r9, r3
9000ce00:	4313      	orrs	r3, r2
9000ce02:	9304      	str	r3, [sp, #16]
9000ce04:	46a2      	mov	sl, r4
9000ce06:	e7d2      	b.n	9000cdae <_vfiprintf_r+0xc6>
9000ce08:	9b03      	ldr	r3, [sp, #12]
9000ce0a:	1d19      	adds	r1, r3, #4
9000ce0c:	681b      	ldr	r3, [r3, #0]
9000ce0e:	9103      	str	r1, [sp, #12]
9000ce10:	2b00      	cmp	r3, #0
9000ce12:	bfbb      	ittet	lt
9000ce14:	425b      	neglt	r3, r3
9000ce16:	f042 0202 	orrlt.w	r2, r2, #2
9000ce1a:	9307      	strge	r3, [sp, #28]
9000ce1c:	9307      	strlt	r3, [sp, #28]
9000ce1e:	bfb8      	it	lt
9000ce20:	9204      	strlt	r2, [sp, #16]
9000ce22:	7823      	ldrb	r3, [r4, #0]
9000ce24:	2b2e      	cmp	r3, #46	@ 0x2e
9000ce26:	d10a      	bne.n	9000ce3e <_vfiprintf_r+0x156>
9000ce28:	7863      	ldrb	r3, [r4, #1]
9000ce2a:	2b2a      	cmp	r3, #42	@ 0x2a
9000ce2c:	d132      	bne.n	9000ce94 <_vfiprintf_r+0x1ac>
9000ce2e:	9b03      	ldr	r3, [sp, #12]
9000ce30:	1d1a      	adds	r2, r3, #4
9000ce32:	681b      	ldr	r3, [r3, #0]
9000ce34:	9203      	str	r2, [sp, #12]
9000ce36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000ce3a:	3402      	adds	r4, #2
9000ce3c:	9305      	str	r3, [sp, #20]
9000ce3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000cf14 <_vfiprintf_r+0x22c>
9000ce42:	7821      	ldrb	r1, [r4, #0]
9000ce44:	2203      	movs	r2, #3
9000ce46:	4650      	mov	r0, sl
9000ce48:	f7f3 fa4a 	bl	900002e0 <memchr>
9000ce4c:	b138      	cbz	r0, 9000ce5e <_vfiprintf_r+0x176>
9000ce4e:	9b04      	ldr	r3, [sp, #16]
9000ce50:	eba0 000a 	sub.w	r0, r0, sl
9000ce54:	2240      	movs	r2, #64	@ 0x40
9000ce56:	4082      	lsls	r2, r0
9000ce58:	4313      	orrs	r3, r2
9000ce5a:	3401      	adds	r4, #1
9000ce5c:	9304      	str	r3, [sp, #16]
9000ce5e:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ce62:	4829      	ldr	r0, [pc, #164]	@ (9000cf08 <_vfiprintf_r+0x220>)
9000ce64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000ce68:	2206      	movs	r2, #6
9000ce6a:	f7f3 fa39 	bl	900002e0 <memchr>
9000ce6e:	2800      	cmp	r0, #0
9000ce70:	d03f      	beq.n	9000cef2 <_vfiprintf_r+0x20a>
9000ce72:	4b26      	ldr	r3, [pc, #152]	@ (9000cf0c <_vfiprintf_r+0x224>)
9000ce74:	bb1b      	cbnz	r3, 9000cebe <_vfiprintf_r+0x1d6>
9000ce76:	9b03      	ldr	r3, [sp, #12]
9000ce78:	3307      	adds	r3, #7
9000ce7a:	f023 0307 	bic.w	r3, r3, #7
9000ce7e:	3308      	adds	r3, #8
9000ce80:	9303      	str	r3, [sp, #12]
9000ce82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000ce84:	443b      	add	r3, r7
9000ce86:	9309      	str	r3, [sp, #36]	@ 0x24
9000ce88:	e76a      	b.n	9000cd60 <_vfiprintf_r+0x78>
9000ce8a:	fb0c 3202 	mla	r2, ip, r2, r3
9000ce8e:	460c      	mov	r4, r1
9000ce90:	2001      	movs	r0, #1
9000ce92:	e7a8      	b.n	9000cde6 <_vfiprintf_r+0xfe>
9000ce94:	2300      	movs	r3, #0
9000ce96:	3401      	adds	r4, #1
9000ce98:	9305      	str	r3, [sp, #20]
9000ce9a:	4619      	mov	r1, r3
9000ce9c:	f04f 0c0a 	mov.w	ip, #10
9000cea0:	4620      	mov	r0, r4
9000cea2:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cea6:	3a30      	subs	r2, #48	@ 0x30
9000cea8:	2a09      	cmp	r2, #9
9000ceaa:	d903      	bls.n	9000ceb4 <_vfiprintf_r+0x1cc>
9000ceac:	2b00      	cmp	r3, #0
9000ceae:	d0c6      	beq.n	9000ce3e <_vfiprintf_r+0x156>
9000ceb0:	9105      	str	r1, [sp, #20]
9000ceb2:	e7c4      	b.n	9000ce3e <_vfiprintf_r+0x156>
9000ceb4:	fb0c 2101 	mla	r1, ip, r1, r2
9000ceb8:	4604      	mov	r4, r0
9000ceba:	2301      	movs	r3, #1
9000cebc:	e7f0      	b.n	9000cea0 <_vfiprintf_r+0x1b8>
9000cebe:	ab03      	add	r3, sp, #12
9000cec0:	9300      	str	r3, [sp, #0]
9000cec2:	462a      	mov	r2, r5
9000cec4:	4b12      	ldr	r3, [pc, #72]	@ (9000cf10 <_vfiprintf_r+0x228>)
9000cec6:	a904      	add	r1, sp, #16
9000cec8:	4630      	mov	r0, r6
9000ceca:	f3af 8000 	nop.w
9000cece:	4607      	mov	r7, r0
9000ced0:	1c78      	adds	r0, r7, #1
9000ced2:	d1d6      	bne.n	9000ce82 <_vfiprintf_r+0x19a>
9000ced4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000ced6:	07d9      	lsls	r1, r3, #31
9000ced8:	d405      	bmi.n	9000cee6 <_vfiprintf_r+0x1fe>
9000ceda:	89ab      	ldrh	r3, [r5, #12]
9000cedc:	059a      	lsls	r2, r3, #22
9000cede:	d402      	bmi.n	9000cee6 <_vfiprintf_r+0x1fe>
9000cee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cee2:	f7ff fd25 	bl	9000c930 <__retarget_lock_release_recursive>
9000cee6:	89ab      	ldrh	r3, [r5, #12]
9000cee8:	065b      	lsls	r3, r3, #25
9000ceea:	f53f af1f 	bmi.w	9000cd2c <_vfiprintf_r+0x44>
9000ceee:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cef0:	e71e      	b.n	9000cd30 <_vfiprintf_r+0x48>
9000cef2:	ab03      	add	r3, sp, #12
9000cef4:	9300      	str	r3, [sp, #0]
9000cef6:	462a      	mov	r2, r5
9000cef8:	4b05      	ldr	r3, [pc, #20]	@ (9000cf10 <_vfiprintf_r+0x228>)
9000cefa:	a904      	add	r1, sp, #16
9000cefc:	4630      	mov	r0, r6
9000cefe:	f000 f879 	bl	9000cff4 <_printf_i>
9000cf02:	e7e4      	b.n	9000cece <_vfiprintf_r+0x1e6>
9000cf04:	9000fbfc 	.word	0x9000fbfc
9000cf08:	9000fc06 	.word	0x9000fc06
9000cf0c:	00000000 	.word	0x00000000
9000cf10:	9000ccc3 	.word	0x9000ccc3
9000cf14:	9000fc02 	.word	0x9000fc02

9000cf18 <_printf_common>:
9000cf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000cf1c:	4616      	mov	r6, r2
9000cf1e:	4698      	mov	r8, r3
9000cf20:	688a      	ldr	r2, [r1, #8]
9000cf22:	690b      	ldr	r3, [r1, #16]
9000cf24:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000cf28:	4293      	cmp	r3, r2
9000cf2a:	bfb8      	it	lt
9000cf2c:	4613      	movlt	r3, r2
9000cf2e:	6033      	str	r3, [r6, #0]
9000cf30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000cf34:	4607      	mov	r7, r0
9000cf36:	460c      	mov	r4, r1
9000cf38:	b10a      	cbz	r2, 9000cf3e <_printf_common+0x26>
9000cf3a:	3301      	adds	r3, #1
9000cf3c:	6033      	str	r3, [r6, #0]
9000cf3e:	6823      	ldr	r3, [r4, #0]
9000cf40:	0699      	lsls	r1, r3, #26
9000cf42:	bf42      	ittt	mi
9000cf44:	6833      	ldrmi	r3, [r6, #0]
9000cf46:	3302      	addmi	r3, #2
9000cf48:	6033      	strmi	r3, [r6, #0]
9000cf4a:	6825      	ldr	r5, [r4, #0]
9000cf4c:	f015 0506 	ands.w	r5, r5, #6
9000cf50:	d106      	bne.n	9000cf60 <_printf_common+0x48>
9000cf52:	f104 0a19 	add.w	sl, r4, #25
9000cf56:	68e3      	ldr	r3, [r4, #12]
9000cf58:	6832      	ldr	r2, [r6, #0]
9000cf5a:	1a9b      	subs	r3, r3, r2
9000cf5c:	42ab      	cmp	r3, r5
9000cf5e:	dc26      	bgt.n	9000cfae <_printf_common+0x96>
9000cf60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000cf64:	6822      	ldr	r2, [r4, #0]
9000cf66:	3b00      	subs	r3, #0
9000cf68:	bf18      	it	ne
9000cf6a:	2301      	movne	r3, #1
9000cf6c:	0692      	lsls	r2, r2, #26
9000cf6e:	d42b      	bmi.n	9000cfc8 <_printf_common+0xb0>
9000cf70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000cf74:	4641      	mov	r1, r8
9000cf76:	4638      	mov	r0, r7
9000cf78:	47c8      	blx	r9
9000cf7a:	3001      	adds	r0, #1
9000cf7c:	d01e      	beq.n	9000cfbc <_printf_common+0xa4>
9000cf7e:	6823      	ldr	r3, [r4, #0]
9000cf80:	6922      	ldr	r2, [r4, #16]
9000cf82:	f003 0306 	and.w	r3, r3, #6
9000cf86:	2b04      	cmp	r3, #4
9000cf88:	bf02      	ittt	eq
9000cf8a:	68e5      	ldreq	r5, [r4, #12]
9000cf8c:	6833      	ldreq	r3, [r6, #0]
9000cf8e:	1aed      	subeq	r5, r5, r3
9000cf90:	68a3      	ldr	r3, [r4, #8]
9000cf92:	bf0c      	ite	eq
9000cf94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000cf98:	2500      	movne	r5, #0
9000cf9a:	4293      	cmp	r3, r2
9000cf9c:	bfc4      	itt	gt
9000cf9e:	1a9b      	subgt	r3, r3, r2
9000cfa0:	18ed      	addgt	r5, r5, r3
9000cfa2:	2600      	movs	r6, #0
9000cfa4:	341a      	adds	r4, #26
9000cfa6:	42b5      	cmp	r5, r6
9000cfa8:	d11a      	bne.n	9000cfe0 <_printf_common+0xc8>
9000cfaa:	2000      	movs	r0, #0
9000cfac:	e008      	b.n	9000cfc0 <_printf_common+0xa8>
9000cfae:	2301      	movs	r3, #1
9000cfb0:	4652      	mov	r2, sl
9000cfb2:	4641      	mov	r1, r8
9000cfb4:	4638      	mov	r0, r7
9000cfb6:	47c8      	blx	r9
9000cfb8:	3001      	adds	r0, #1
9000cfba:	d103      	bne.n	9000cfc4 <_printf_common+0xac>
9000cfbc:	f04f 30ff 	mov.w	r0, #4294967295
9000cfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000cfc4:	3501      	adds	r5, #1
9000cfc6:	e7c6      	b.n	9000cf56 <_printf_common+0x3e>
9000cfc8:	18e1      	adds	r1, r4, r3
9000cfca:	1c5a      	adds	r2, r3, #1
9000cfcc:	2030      	movs	r0, #48	@ 0x30
9000cfce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000cfd2:	4422      	add	r2, r4
9000cfd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000cfd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000cfdc:	3302      	adds	r3, #2
9000cfde:	e7c7      	b.n	9000cf70 <_printf_common+0x58>
9000cfe0:	2301      	movs	r3, #1
9000cfe2:	4622      	mov	r2, r4
9000cfe4:	4641      	mov	r1, r8
9000cfe6:	4638      	mov	r0, r7
9000cfe8:	47c8      	blx	r9
9000cfea:	3001      	adds	r0, #1
9000cfec:	d0e6      	beq.n	9000cfbc <_printf_common+0xa4>
9000cfee:	3601      	adds	r6, #1
9000cff0:	e7d9      	b.n	9000cfa6 <_printf_common+0x8e>
	...

9000cff4 <_printf_i>:
9000cff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000cff8:	7e0f      	ldrb	r7, [r1, #24]
9000cffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000cffc:	2f78      	cmp	r7, #120	@ 0x78
9000cffe:	4691      	mov	r9, r2
9000d000:	4680      	mov	r8, r0
9000d002:	460c      	mov	r4, r1
9000d004:	469a      	mov	sl, r3
9000d006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000d00a:	d807      	bhi.n	9000d01c <_printf_i+0x28>
9000d00c:	2f62      	cmp	r7, #98	@ 0x62
9000d00e:	d80a      	bhi.n	9000d026 <_printf_i+0x32>
9000d010:	2f00      	cmp	r7, #0
9000d012:	f000 80d1 	beq.w	9000d1b8 <_printf_i+0x1c4>
9000d016:	2f58      	cmp	r7, #88	@ 0x58
9000d018:	f000 80b8 	beq.w	9000d18c <_printf_i+0x198>
9000d01c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000d024:	e03a      	b.n	9000d09c <_printf_i+0xa8>
9000d026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000d02a:	2b15      	cmp	r3, #21
9000d02c:	d8f6      	bhi.n	9000d01c <_printf_i+0x28>
9000d02e:	a101      	add	r1, pc, #4	@ (adr r1, 9000d034 <_printf_i+0x40>)
9000d030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000d034:	9000d08d 	.word	0x9000d08d
9000d038:	9000d0a1 	.word	0x9000d0a1
9000d03c:	9000d01d 	.word	0x9000d01d
9000d040:	9000d01d 	.word	0x9000d01d
9000d044:	9000d01d 	.word	0x9000d01d
9000d048:	9000d01d 	.word	0x9000d01d
9000d04c:	9000d0a1 	.word	0x9000d0a1
9000d050:	9000d01d 	.word	0x9000d01d
9000d054:	9000d01d 	.word	0x9000d01d
9000d058:	9000d01d 	.word	0x9000d01d
9000d05c:	9000d01d 	.word	0x9000d01d
9000d060:	9000d19f 	.word	0x9000d19f
9000d064:	9000d0cb 	.word	0x9000d0cb
9000d068:	9000d159 	.word	0x9000d159
9000d06c:	9000d01d 	.word	0x9000d01d
9000d070:	9000d01d 	.word	0x9000d01d
9000d074:	9000d1c1 	.word	0x9000d1c1
9000d078:	9000d01d 	.word	0x9000d01d
9000d07c:	9000d0cb 	.word	0x9000d0cb
9000d080:	9000d01d 	.word	0x9000d01d
9000d084:	9000d01d 	.word	0x9000d01d
9000d088:	9000d161 	.word	0x9000d161
9000d08c:	6833      	ldr	r3, [r6, #0]
9000d08e:	1d1a      	adds	r2, r3, #4
9000d090:	681b      	ldr	r3, [r3, #0]
9000d092:	6032      	str	r2, [r6, #0]
9000d094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000d098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000d09c:	2301      	movs	r3, #1
9000d09e:	e09c      	b.n	9000d1da <_printf_i+0x1e6>
9000d0a0:	6833      	ldr	r3, [r6, #0]
9000d0a2:	6820      	ldr	r0, [r4, #0]
9000d0a4:	1d19      	adds	r1, r3, #4
9000d0a6:	6031      	str	r1, [r6, #0]
9000d0a8:	0606      	lsls	r6, r0, #24
9000d0aa:	d501      	bpl.n	9000d0b0 <_printf_i+0xbc>
9000d0ac:	681d      	ldr	r5, [r3, #0]
9000d0ae:	e003      	b.n	9000d0b8 <_printf_i+0xc4>
9000d0b0:	0645      	lsls	r5, r0, #25
9000d0b2:	d5fb      	bpl.n	9000d0ac <_printf_i+0xb8>
9000d0b4:	f9b3 5000 	ldrsh.w	r5, [r3]
9000d0b8:	2d00      	cmp	r5, #0
9000d0ba:	da03      	bge.n	9000d0c4 <_printf_i+0xd0>
9000d0bc:	232d      	movs	r3, #45	@ 0x2d
9000d0be:	426d      	negs	r5, r5
9000d0c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d0c4:	4858      	ldr	r0, [pc, #352]	@ (9000d228 <_printf_i+0x234>)
9000d0c6:	230a      	movs	r3, #10
9000d0c8:	e011      	b.n	9000d0ee <_printf_i+0xfa>
9000d0ca:	6821      	ldr	r1, [r4, #0]
9000d0cc:	6833      	ldr	r3, [r6, #0]
9000d0ce:	0608      	lsls	r0, r1, #24
9000d0d0:	f853 5b04 	ldr.w	r5, [r3], #4
9000d0d4:	d402      	bmi.n	9000d0dc <_printf_i+0xe8>
9000d0d6:	0649      	lsls	r1, r1, #25
9000d0d8:	bf48      	it	mi
9000d0da:	b2ad      	uxthmi	r5, r5
9000d0dc:	2f6f      	cmp	r7, #111	@ 0x6f
9000d0de:	4852      	ldr	r0, [pc, #328]	@ (9000d228 <_printf_i+0x234>)
9000d0e0:	6033      	str	r3, [r6, #0]
9000d0e2:	bf14      	ite	ne
9000d0e4:	230a      	movne	r3, #10
9000d0e6:	2308      	moveq	r3, #8
9000d0e8:	2100      	movs	r1, #0
9000d0ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000d0ee:	6866      	ldr	r6, [r4, #4]
9000d0f0:	60a6      	str	r6, [r4, #8]
9000d0f2:	2e00      	cmp	r6, #0
9000d0f4:	db05      	blt.n	9000d102 <_printf_i+0x10e>
9000d0f6:	6821      	ldr	r1, [r4, #0]
9000d0f8:	432e      	orrs	r6, r5
9000d0fa:	f021 0104 	bic.w	r1, r1, #4
9000d0fe:	6021      	str	r1, [r4, #0]
9000d100:	d04b      	beq.n	9000d19a <_printf_i+0x1a6>
9000d102:	4616      	mov	r6, r2
9000d104:	fbb5 f1f3 	udiv	r1, r5, r3
9000d108:	fb03 5711 	mls	r7, r3, r1, r5
9000d10c:	5dc7      	ldrb	r7, [r0, r7]
9000d10e:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000d112:	462f      	mov	r7, r5
9000d114:	42bb      	cmp	r3, r7
9000d116:	460d      	mov	r5, r1
9000d118:	d9f4      	bls.n	9000d104 <_printf_i+0x110>
9000d11a:	2b08      	cmp	r3, #8
9000d11c:	d10b      	bne.n	9000d136 <_printf_i+0x142>
9000d11e:	6823      	ldr	r3, [r4, #0]
9000d120:	07df      	lsls	r7, r3, #31
9000d122:	d508      	bpl.n	9000d136 <_printf_i+0x142>
9000d124:	6923      	ldr	r3, [r4, #16]
9000d126:	6861      	ldr	r1, [r4, #4]
9000d128:	4299      	cmp	r1, r3
9000d12a:	bfde      	ittt	le
9000d12c:	2330      	movle	r3, #48	@ 0x30
9000d12e:	f806 3c01 	strble.w	r3, [r6, #-1]
9000d132:	f106 36ff 	addle.w	r6, r6, #4294967295
9000d136:	1b92      	subs	r2, r2, r6
9000d138:	6122      	str	r2, [r4, #16]
9000d13a:	f8cd a000 	str.w	sl, [sp]
9000d13e:	464b      	mov	r3, r9
9000d140:	aa03      	add	r2, sp, #12
9000d142:	4621      	mov	r1, r4
9000d144:	4640      	mov	r0, r8
9000d146:	f7ff fee7 	bl	9000cf18 <_printf_common>
9000d14a:	3001      	adds	r0, #1
9000d14c:	d14a      	bne.n	9000d1e4 <_printf_i+0x1f0>
9000d14e:	f04f 30ff 	mov.w	r0, #4294967295
9000d152:	b004      	add	sp, #16
9000d154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d158:	6823      	ldr	r3, [r4, #0]
9000d15a:	f043 0320 	orr.w	r3, r3, #32
9000d15e:	6023      	str	r3, [r4, #0]
9000d160:	4832      	ldr	r0, [pc, #200]	@ (9000d22c <_printf_i+0x238>)
9000d162:	2778      	movs	r7, #120	@ 0x78
9000d164:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000d168:	6823      	ldr	r3, [r4, #0]
9000d16a:	6831      	ldr	r1, [r6, #0]
9000d16c:	061f      	lsls	r7, r3, #24
9000d16e:	f851 5b04 	ldr.w	r5, [r1], #4
9000d172:	d402      	bmi.n	9000d17a <_printf_i+0x186>
9000d174:	065f      	lsls	r7, r3, #25
9000d176:	bf48      	it	mi
9000d178:	b2ad      	uxthmi	r5, r5
9000d17a:	6031      	str	r1, [r6, #0]
9000d17c:	07d9      	lsls	r1, r3, #31
9000d17e:	bf44      	itt	mi
9000d180:	f043 0320 	orrmi.w	r3, r3, #32
9000d184:	6023      	strmi	r3, [r4, #0]
9000d186:	b11d      	cbz	r5, 9000d190 <_printf_i+0x19c>
9000d188:	2310      	movs	r3, #16
9000d18a:	e7ad      	b.n	9000d0e8 <_printf_i+0xf4>
9000d18c:	4826      	ldr	r0, [pc, #152]	@ (9000d228 <_printf_i+0x234>)
9000d18e:	e7e9      	b.n	9000d164 <_printf_i+0x170>
9000d190:	6823      	ldr	r3, [r4, #0]
9000d192:	f023 0320 	bic.w	r3, r3, #32
9000d196:	6023      	str	r3, [r4, #0]
9000d198:	e7f6      	b.n	9000d188 <_printf_i+0x194>
9000d19a:	4616      	mov	r6, r2
9000d19c:	e7bd      	b.n	9000d11a <_printf_i+0x126>
9000d19e:	6833      	ldr	r3, [r6, #0]
9000d1a0:	6825      	ldr	r5, [r4, #0]
9000d1a2:	6961      	ldr	r1, [r4, #20]
9000d1a4:	1d18      	adds	r0, r3, #4
9000d1a6:	6030      	str	r0, [r6, #0]
9000d1a8:	062e      	lsls	r6, r5, #24
9000d1aa:	681b      	ldr	r3, [r3, #0]
9000d1ac:	d501      	bpl.n	9000d1b2 <_printf_i+0x1be>
9000d1ae:	6019      	str	r1, [r3, #0]
9000d1b0:	e002      	b.n	9000d1b8 <_printf_i+0x1c4>
9000d1b2:	0668      	lsls	r0, r5, #25
9000d1b4:	d5fb      	bpl.n	9000d1ae <_printf_i+0x1ba>
9000d1b6:	8019      	strh	r1, [r3, #0]
9000d1b8:	2300      	movs	r3, #0
9000d1ba:	6123      	str	r3, [r4, #16]
9000d1bc:	4616      	mov	r6, r2
9000d1be:	e7bc      	b.n	9000d13a <_printf_i+0x146>
9000d1c0:	6833      	ldr	r3, [r6, #0]
9000d1c2:	1d1a      	adds	r2, r3, #4
9000d1c4:	6032      	str	r2, [r6, #0]
9000d1c6:	681e      	ldr	r6, [r3, #0]
9000d1c8:	6862      	ldr	r2, [r4, #4]
9000d1ca:	2100      	movs	r1, #0
9000d1cc:	4630      	mov	r0, r6
9000d1ce:	f7f3 f887 	bl	900002e0 <memchr>
9000d1d2:	b108      	cbz	r0, 9000d1d8 <_printf_i+0x1e4>
9000d1d4:	1b80      	subs	r0, r0, r6
9000d1d6:	6060      	str	r0, [r4, #4]
9000d1d8:	6863      	ldr	r3, [r4, #4]
9000d1da:	6123      	str	r3, [r4, #16]
9000d1dc:	2300      	movs	r3, #0
9000d1de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d1e2:	e7aa      	b.n	9000d13a <_printf_i+0x146>
9000d1e4:	6923      	ldr	r3, [r4, #16]
9000d1e6:	4632      	mov	r2, r6
9000d1e8:	4649      	mov	r1, r9
9000d1ea:	4640      	mov	r0, r8
9000d1ec:	47d0      	blx	sl
9000d1ee:	3001      	adds	r0, #1
9000d1f0:	d0ad      	beq.n	9000d14e <_printf_i+0x15a>
9000d1f2:	6823      	ldr	r3, [r4, #0]
9000d1f4:	079b      	lsls	r3, r3, #30
9000d1f6:	d413      	bmi.n	9000d220 <_printf_i+0x22c>
9000d1f8:	68e0      	ldr	r0, [r4, #12]
9000d1fa:	9b03      	ldr	r3, [sp, #12]
9000d1fc:	4298      	cmp	r0, r3
9000d1fe:	bfb8      	it	lt
9000d200:	4618      	movlt	r0, r3
9000d202:	e7a6      	b.n	9000d152 <_printf_i+0x15e>
9000d204:	2301      	movs	r3, #1
9000d206:	4632      	mov	r2, r6
9000d208:	4649      	mov	r1, r9
9000d20a:	4640      	mov	r0, r8
9000d20c:	47d0      	blx	sl
9000d20e:	3001      	adds	r0, #1
9000d210:	d09d      	beq.n	9000d14e <_printf_i+0x15a>
9000d212:	3501      	adds	r5, #1
9000d214:	68e3      	ldr	r3, [r4, #12]
9000d216:	9903      	ldr	r1, [sp, #12]
9000d218:	1a5b      	subs	r3, r3, r1
9000d21a:	42ab      	cmp	r3, r5
9000d21c:	dcf2      	bgt.n	9000d204 <_printf_i+0x210>
9000d21e:	e7eb      	b.n	9000d1f8 <_printf_i+0x204>
9000d220:	2500      	movs	r5, #0
9000d222:	f104 0619 	add.w	r6, r4, #25
9000d226:	e7f5      	b.n	9000d214 <_printf_i+0x220>
9000d228:	9000fc0d 	.word	0x9000fc0d
9000d22c:	9000fc1e 	.word	0x9000fc1e

9000d230 <__sflush_r>:
9000d230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000d234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d238:	0716      	lsls	r6, r2, #28
9000d23a:	4605      	mov	r5, r0
9000d23c:	460c      	mov	r4, r1
9000d23e:	d454      	bmi.n	9000d2ea <__sflush_r+0xba>
9000d240:	684b      	ldr	r3, [r1, #4]
9000d242:	2b00      	cmp	r3, #0
9000d244:	dc02      	bgt.n	9000d24c <__sflush_r+0x1c>
9000d246:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000d248:	2b00      	cmp	r3, #0
9000d24a:	dd48      	ble.n	9000d2de <__sflush_r+0xae>
9000d24c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d24e:	2e00      	cmp	r6, #0
9000d250:	d045      	beq.n	9000d2de <__sflush_r+0xae>
9000d252:	2300      	movs	r3, #0
9000d254:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000d258:	682f      	ldr	r7, [r5, #0]
9000d25a:	6a21      	ldr	r1, [r4, #32]
9000d25c:	602b      	str	r3, [r5, #0]
9000d25e:	d030      	beq.n	9000d2c2 <__sflush_r+0x92>
9000d260:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000d262:	89a3      	ldrh	r3, [r4, #12]
9000d264:	0759      	lsls	r1, r3, #29
9000d266:	d505      	bpl.n	9000d274 <__sflush_r+0x44>
9000d268:	6863      	ldr	r3, [r4, #4]
9000d26a:	1ad2      	subs	r2, r2, r3
9000d26c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000d26e:	b10b      	cbz	r3, 9000d274 <__sflush_r+0x44>
9000d270:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000d272:	1ad2      	subs	r2, r2, r3
9000d274:	2300      	movs	r3, #0
9000d276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d278:	6a21      	ldr	r1, [r4, #32]
9000d27a:	4628      	mov	r0, r5
9000d27c:	47b0      	blx	r6
9000d27e:	1c43      	adds	r3, r0, #1
9000d280:	89a3      	ldrh	r3, [r4, #12]
9000d282:	d106      	bne.n	9000d292 <__sflush_r+0x62>
9000d284:	6829      	ldr	r1, [r5, #0]
9000d286:	291d      	cmp	r1, #29
9000d288:	d82b      	bhi.n	9000d2e2 <__sflush_r+0xb2>
9000d28a:	4a2a      	ldr	r2, [pc, #168]	@ (9000d334 <__sflush_r+0x104>)
9000d28c:	40ca      	lsrs	r2, r1
9000d28e:	07d6      	lsls	r6, r2, #31
9000d290:	d527      	bpl.n	9000d2e2 <__sflush_r+0xb2>
9000d292:	2200      	movs	r2, #0
9000d294:	6062      	str	r2, [r4, #4]
9000d296:	04d9      	lsls	r1, r3, #19
9000d298:	6922      	ldr	r2, [r4, #16]
9000d29a:	6022      	str	r2, [r4, #0]
9000d29c:	d504      	bpl.n	9000d2a8 <__sflush_r+0x78>
9000d29e:	1c42      	adds	r2, r0, #1
9000d2a0:	d101      	bne.n	9000d2a6 <__sflush_r+0x76>
9000d2a2:	682b      	ldr	r3, [r5, #0]
9000d2a4:	b903      	cbnz	r3, 9000d2a8 <__sflush_r+0x78>
9000d2a6:	6560      	str	r0, [r4, #84]	@ 0x54
9000d2a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d2aa:	602f      	str	r7, [r5, #0]
9000d2ac:	b1b9      	cbz	r1, 9000d2de <__sflush_r+0xae>
9000d2ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d2b2:	4299      	cmp	r1, r3
9000d2b4:	d002      	beq.n	9000d2bc <__sflush_r+0x8c>
9000d2b6:	4628      	mov	r0, r5
9000d2b8:	f7ff fb4a 	bl	9000c950 <_free_r>
9000d2bc:	2300      	movs	r3, #0
9000d2be:	6363      	str	r3, [r4, #52]	@ 0x34
9000d2c0:	e00d      	b.n	9000d2de <__sflush_r+0xae>
9000d2c2:	2301      	movs	r3, #1
9000d2c4:	4628      	mov	r0, r5
9000d2c6:	47b0      	blx	r6
9000d2c8:	4602      	mov	r2, r0
9000d2ca:	1c50      	adds	r0, r2, #1
9000d2cc:	d1c9      	bne.n	9000d262 <__sflush_r+0x32>
9000d2ce:	682b      	ldr	r3, [r5, #0]
9000d2d0:	2b00      	cmp	r3, #0
9000d2d2:	d0c6      	beq.n	9000d262 <__sflush_r+0x32>
9000d2d4:	2b1d      	cmp	r3, #29
9000d2d6:	d001      	beq.n	9000d2dc <__sflush_r+0xac>
9000d2d8:	2b16      	cmp	r3, #22
9000d2da:	d11e      	bne.n	9000d31a <__sflush_r+0xea>
9000d2dc:	602f      	str	r7, [r5, #0]
9000d2de:	2000      	movs	r0, #0
9000d2e0:	e022      	b.n	9000d328 <__sflush_r+0xf8>
9000d2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d2e6:	b21b      	sxth	r3, r3
9000d2e8:	e01b      	b.n	9000d322 <__sflush_r+0xf2>
9000d2ea:	690f      	ldr	r7, [r1, #16]
9000d2ec:	2f00      	cmp	r7, #0
9000d2ee:	d0f6      	beq.n	9000d2de <__sflush_r+0xae>
9000d2f0:	0793      	lsls	r3, r2, #30
9000d2f2:	680e      	ldr	r6, [r1, #0]
9000d2f4:	bf08      	it	eq
9000d2f6:	694b      	ldreq	r3, [r1, #20]
9000d2f8:	600f      	str	r7, [r1, #0]
9000d2fa:	bf18      	it	ne
9000d2fc:	2300      	movne	r3, #0
9000d2fe:	eba6 0807 	sub.w	r8, r6, r7
9000d302:	608b      	str	r3, [r1, #8]
9000d304:	f1b8 0f00 	cmp.w	r8, #0
9000d308:	dde9      	ble.n	9000d2de <__sflush_r+0xae>
9000d30a:	6a21      	ldr	r1, [r4, #32]
9000d30c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000d30e:	4643      	mov	r3, r8
9000d310:	463a      	mov	r2, r7
9000d312:	4628      	mov	r0, r5
9000d314:	47b0      	blx	r6
9000d316:	2800      	cmp	r0, #0
9000d318:	dc08      	bgt.n	9000d32c <__sflush_r+0xfc>
9000d31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d322:	81a3      	strh	r3, [r4, #12]
9000d324:	f04f 30ff 	mov.w	r0, #4294967295
9000d328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d32c:	4407      	add	r7, r0
9000d32e:	eba8 0800 	sub.w	r8, r8, r0
9000d332:	e7e7      	b.n	9000d304 <__sflush_r+0xd4>
9000d334:	20400001 	.word	0x20400001

9000d338 <_fflush_r>:
9000d338:	b538      	push	{r3, r4, r5, lr}
9000d33a:	690b      	ldr	r3, [r1, #16]
9000d33c:	4605      	mov	r5, r0
9000d33e:	460c      	mov	r4, r1
9000d340:	b913      	cbnz	r3, 9000d348 <_fflush_r+0x10>
9000d342:	2500      	movs	r5, #0
9000d344:	4628      	mov	r0, r5
9000d346:	bd38      	pop	{r3, r4, r5, pc}
9000d348:	b118      	cbz	r0, 9000d352 <_fflush_r+0x1a>
9000d34a:	6a03      	ldr	r3, [r0, #32]
9000d34c:	b90b      	cbnz	r3, 9000d352 <_fflush_r+0x1a>
9000d34e:	f7ff f8c5 	bl	9000c4dc <__sinit>
9000d352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d356:	2b00      	cmp	r3, #0
9000d358:	d0f3      	beq.n	9000d342 <_fflush_r+0xa>
9000d35a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000d35c:	07d0      	lsls	r0, r2, #31
9000d35e:	d404      	bmi.n	9000d36a <_fflush_r+0x32>
9000d360:	0599      	lsls	r1, r3, #22
9000d362:	d402      	bmi.n	9000d36a <_fflush_r+0x32>
9000d364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d366:	f7ff fae2 	bl	9000c92e <__retarget_lock_acquire_recursive>
9000d36a:	4628      	mov	r0, r5
9000d36c:	4621      	mov	r1, r4
9000d36e:	f7ff ff5f 	bl	9000d230 <__sflush_r>
9000d372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d374:	07da      	lsls	r2, r3, #31
9000d376:	4605      	mov	r5, r0
9000d378:	d4e4      	bmi.n	9000d344 <_fflush_r+0xc>
9000d37a:	89a3      	ldrh	r3, [r4, #12]
9000d37c:	059b      	lsls	r3, r3, #22
9000d37e:	d4e1      	bmi.n	9000d344 <_fflush_r+0xc>
9000d380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d382:	f7ff fad5 	bl	9000c930 <__retarget_lock_release_recursive>
9000d386:	e7dd      	b.n	9000d344 <_fflush_r+0xc>

9000d388 <__swhatbuf_r>:
9000d388:	b570      	push	{r4, r5, r6, lr}
9000d38a:	460c      	mov	r4, r1
9000d38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d390:	2900      	cmp	r1, #0
9000d392:	b096      	sub	sp, #88	@ 0x58
9000d394:	4615      	mov	r5, r2
9000d396:	461e      	mov	r6, r3
9000d398:	da0d      	bge.n	9000d3b6 <__swhatbuf_r+0x2e>
9000d39a:	89a3      	ldrh	r3, [r4, #12]
9000d39c:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000d3a0:	f04f 0100 	mov.w	r1, #0
9000d3a4:	bf14      	ite	ne
9000d3a6:	2340      	movne	r3, #64	@ 0x40
9000d3a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000d3ac:	2000      	movs	r0, #0
9000d3ae:	6031      	str	r1, [r6, #0]
9000d3b0:	602b      	str	r3, [r5, #0]
9000d3b2:	b016      	add	sp, #88	@ 0x58
9000d3b4:	bd70      	pop	{r4, r5, r6, pc}
9000d3b6:	466a      	mov	r2, sp
9000d3b8:	f000 f862 	bl	9000d480 <_fstat_r>
9000d3bc:	2800      	cmp	r0, #0
9000d3be:	dbec      	blt.n	9000d39a <__swhatbuf_r+0x12>
9000d3c0:	9901      	ldr	r1, [sp, #4]
9000d3c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000d3c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000d3ca:	4259      	negs	r1, r3
9000d3cc:	4159      	adcs	r1, r3
9000d3ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000d3d2:	e7eb      	b.n	9000d3ac <__swhatbuf_r+0x24>

9000d3d4 <__smakebuf_r>:
9000d3d4:	898b      	ldrh	r3, [r1, #12]
9000d3d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000d3d8:	079d      	lsls	r5, r3, #30
9000d3da:	4606      	mov	r6, r0
9000d3dc:	460c      	mov	r4, r1
9000d3de:	d507      	bpl.n	9000d3f0 <__smakebuf_r+0x1c>
9000d3e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000d3e4:	6023      	str	r3, [r4, #0]
9000d3e6:	6123      	str	r3, [r4, #16]
9000d3e8:	2301      	movs	r3, #1
9000d3ea:	6163      	str	r3, [r4, #20]
9000d3ec:	b003      	add	sp, #12
9000d3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000d3f0:	ab01      	add	r3, sp, #4
9000d3f2:	466a      	mov	r2, sp
9000d3f4:	f7ff ffc8 	bl	9000d388 <__swhatbuf_r>
9000d3f8:	9f00      	ldr	r7, [sp, #0]
9000d3fa:	4605      	mov	r5, r0
9000d3fc:	4639      	mov	r1, r7
9000d3fe:	4630      	mov	r0, r6
9000d400:	f7fe ff54 	bl	9000c2ac <_malloc_r>
9000d404:	b948      	cbnz	r0, 9000d41a <__smakebuf_r+0x46>
9000d406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d40a:	059a      	lsls	r2, r3, #22
9000d40c:	d4ee      	bmi.n	9000d3ec <__smakebuf_r+0x18>
9000d40e:	f023 0303 	bic.w	r3, r3, #3
9000d412:	f043 0302 	orr.w	r3, r3, #2
9000d416:	81a3      	strh	r3, [r4, #12]
9000d418:	e7e2      	b.n	9000d3e0 <__smakebuf_r+0xc>
9000d41a:	89a3      	ldrh	r3, [r4, #12]
9000d41c:	6020      	str	r0, [r4, #0]
9000d41e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000d422:	81a3      	strh	r3, [r4, #12]
9000d424:	9b01      	ldr	r3, [sp, #4]
9000d426:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000d42a:	b15b      	cbz	r3, 9000d444 <__smakebuf_r+0x70>
9000d42c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000d430:	4630      	mov	r0, r6
9000d432:	f000 f837 	bl	9000d4a4 <_isatty_r>
9000d436:	b128      	cbz	r0, 9000d444 <__smakebuf_r+0x70>
9000d438:	89a3      	ldrh	r3, [r4, #12]
9000d43a:	f023 0303 	bic.w	r3, r3, #3
9000d43e:	f043 0301 	orr.w	r3, r3, #1
9000d442:	81a3      	strh	r3, [r4, #12]
9000d444:	89a3      	ldrh	r3, [r4, #12]
9000d446:	431d      	orrs	r5, r3
9000d448:	81a5      	strh	r5, [r4, #12]
9000d44a:	e7cf      	b.n	9000d3ec <__smakebuf_r+0x18>

9000d44c <memmove>:
9000d44c:	4288      	cmp	r0, r1
9000d44e:	b510      	push	{r4, lr}
9000d450:	eb01 0402 	add.w	r4, r1, r2
9000d454:	d902      	bls.n	9000d45c <memmove+0x10>
9000d456:	4284      	cmp	r4, r0
9000d458:	4623      	mov	r3, r4
9000d45a:	d807      	bhi.n	9000d46c <memmove+0x20>
9000d45c:	1e43      	subs	r3, r0, #1
9000d45e:	42a1      	cmp	r1, r4
9000d460:	d008      	beq.n	9000d474 <memmove+0x28>
9000d462:	f811 2b01 	ldrb.w	r2, [r1], #1
9000d466:	f803 2f01 	strb.w	r2, [r3, #1]!
9000d46a:	e7f8      	b.n	9000d45e <memmove+0x12>
9000d46c:	4402      	add	r2, r0
9000d46e:	4601      	mov	r1, r0
9000d470:	428a      	cmp	r2, r1
9000d472:	d100      	bne.n	9000d476 <memmove+0x2a>
9000d474:	bd10      	pop	{r4, pc}
9000d476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000d47a:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000d47e:	e7f7      	b.n	9000d470 <memmove+0x24>

9000d480 <_fstat_r>:
9000d480:	b538      	push	{r3, r4, r5, lr}
9000d482:	4d07      	ldr	r5, [pc, #28]	@ (9000d4a0 <_fstat_r+0x20>)
9000d484:	2300      	movs	r3, #0
9000d486:	4604      	mov	r4, r0
9000d488:	4608      	mov	r0, r1
9000d48a:	4611      	mov	r1, r2
9000d48c:	602b      	str	r3, [r5, #0]
9000d48e:	f7f3 fdde 	bl	9000104e <_fstat>
9000d492:	1c43      	adds	r3, r0, #1
9000d494:	d102      	bne.n	9000d49c <_fstat_r+0x1c>
9000d496:	682b      	ldr	r3, [r5, #0]
9000d498:	b103      	cbz	r3, 9000d49c <_fstat_r+0x1c>
9000d49a:	6023      	str	r3, [r4, #0]
9000d49c:	bd38      	pop	{r3, r4, r5, pc}
9000d49e:	bf00      	nop
9000d4a0:	20001498 	.word	0x20001498

9000d4a4 <_isatty_r>:
9000d4a4:	b538      	push	{r3, r4, r5, lr}
9000d4a6:	4d06      	ldr	r5, [pc, #24]	@ (9000d4c0 <_isatty_r+0x1c>)
9000d4a8:	2300      	movs	r3, #0
9000d4aa:	4604      	mov	r4, r0
9000d4ac:	4608      	mov	r0, r1
9000d4ae:	602b      	str	r3, [r5, #0]
9000d4b0:	f7f3 fddd 	bl	9000106e <_isatty>
9000d4b4:	1c43      	adds	r3, r0, #1
9000d4b6:	d102      	bne.n	9000d4be <_isatty_r+0x1a>
9000d4b8:	682b      	ldr	r3, [r5, #0]
9000d4ba:	b103      	cbz	r3, 9000d4be <_isatty_r+0x1a>
9000d4bc:	6023      	str	r3, [r4, #0]
9000d4be:	bd38      	pop	{r3, r4, r5, pc}
9000d4c0:	20001498 	.word	0x20001498

9000d4c4 <_realloc_r>:
9000d4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d4c8:	4607      	mov	r7, r0
9000d4ca:	4614      	mov	r4, r2
9000d4cc:	460d      	mov	r5, r1
9000d4ce:	b921      	cbnz	r1, 9000d4da <_realloc_r+0x16>
9000d4d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000d4d4:	4611      	mov	r1, r2
9000d4d6:	f7fe bee9 	b.w	9000c2ac <_malloc_r>
9000d4da:	b92a      	cbnz	r2, 9000d4e8 <_realloc_r+0x24>
9000d4dc:	f7ff fa38 	bl	9000c950 <_free_r>
9000d4e0:	4625      	mov	r5, r4
9000d4e2:	4628      	mov	r0, r5
9000d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d4e8:	f000 f81a 	bl	9000d520 <_malloc_usable_size_r>
9000d4ec:	4284      	cmp	r4, r0
9000d4ee:	4606      	mov	r6, r0
9000d4f0:	d802      	bhi.n	9000d4f8 <_realloc_r+0x34>
9000d4f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000d4f6:	d8f4      	bhi.n	9000d4e2 <_realloc_r+0x1e>
9000d4f8:	4621      	mov	r1, r4
9000d4fa:	4638      	mov	r0, r7
9000d4fc:	f7fe fed6 	bl	9000c2ac <_malloc_r>
9000d500:	4680      	mov	r8, r0
9000d502:	b908      	cbnz	r0, 9000d508 <_realloc_r+0x44>
9000d504:	4645      	mov	r5, r8
9000d506:	e7ec      	b.n	9000d4e2 <_realloc_r+0x1e>
9000d508:	42b4      	cmp	r4, r6
9000d50a:	4622      	mov	r2, r4
9000d50c:	4629      	mov	r1, r5
9000d50e:	bf28      	it	cs
9000d510:	4632      	movcs	r2, r6
9000d512:	f7ff fa0e 	bl	9000c932 <memcpy>
9000d516:	4629      	mov	r1, r5
9000d518:	4638      	mov	r0, r7
9000d51a:	f7ff fa19 	bl	9000c950 <_free_r>
9000d51e:	e7f1      	b.n	9000d504 <_realloc_r+0x40>

9000d520 <_malloc_usable_size_r>:
9000d520:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000d524:	1f18      	subs	r0, r3, #4
9000d526:	2b00      	cmp	r3, #0
9000d528:	bfbc      	itt	lt
9000d52a:	580b      	ldrlt	r3, [r1, r0]
9000d52c:	18c0      	addlt	r0, r0, r3
9000d52e:	4770      	bx	lr

9000d530 <_init>:
9000d530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d532:	bf00      	nop
9000d534:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d536:	bc08      	pop	{r3}
9000d538:	469e      	mov	lr, r3
9000d53a:	4770      	bx	lr

9000d53c <_fini>:
9000d53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d53e:	bf00      	nop
9000d540:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d542:	bc08      	pop	{r3}
9000d544:	469e      	mov	lr, r3
9000d546:	4770      	bx	lr
