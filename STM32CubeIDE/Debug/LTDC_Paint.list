
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1ac  900002a0  900002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002654  9000d44c  9000d44c  0000e44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000faa0  9000faa0  000110d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  9000faa0  9000faa0  00010aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  9000faa8  9000faa8  000110d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000faa8  9000faa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  9000faac  9000faac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  9000fab0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200000d8  9000fb84  000110d8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200014a0  9000fb84  000114a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000110d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b320  00000000  00000000  00011102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000551c  00000000  00000000  0003c422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002190  00000000  00000000  00041940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a0c  00000000  00000000  00043ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000414a7  00000000  00000000  000454dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d4b6  00000000  00000000  00086983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018dcda  00000000  00000000  000b3e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00241b13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009984  00000000  00000000  00241b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0024b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	@ (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	@ (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	@ (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000d8 	.word	0x200000d8
900002bc:	00000000 	.word	0x00000000
900002c0:	9000d434 	.word	0x9000d434

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	@ (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	@ (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	@ (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000dc 	.word	0x200000dc
900002dc:	9000d434 	.word	0x9000d434

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <__aeabi_uldivmod>:
90000380:	b953      	cbnz	r3, 90000398 <__aeabi_uldivmod+0x18>
90000382:	b94a      	cbnz	r2, 90000398 <__aeabi_uldivmod+0x18>
90000384:	2900      	cmp	r1, #0
90000386:	bf08      	it	eq
90000388:	2800      	cmpeq	r0, #0
9000038a:	bf1c      	itt	ne
9000038c:	f04f 31ff 	movne.w	r1, #4294967295
90000390:	f04f 30ff 	movne.w	r0, #4294967295
90000394:	f000 b988 	b.w	900006a8 <__aeabi_idiv0>
90000398:	f1ad 0c08 	sub.w	ip, sp, #8
9000039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003a0:	f000 f806 	bl	900003b0 <__udivmoddi4>
900003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ac:	b004      	add	sp, #16
900003ae:	4770      	bx	lr

900003b0 <__udivmoddi4>:
900003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003b4:	9d08      	ldr	r5, [sp, #32]
900003b6:	468e      	mov	lr, r1
900003b8:	4604      	mov	r4, r0
900003ba:	4688      	mov	r8, r1
900003bc:	2b00      	cmp	r3, #0
900003be:	d14a      	bne.n	90000456 <__udivmoddi4+0xa6>
900003c0:	428a      	cmp	r2, r1
900003c2:	4617      	mov	r7, r2
900003c4:	d962      	bls.n	9000048c <__udivmoddi4+0xdc>
900003c6:	fab2 f682 	clz	r6, r2
900003ca:	b14e      	cbz	r6, 900003e0 <__udivmoddi4+0x30>
900003cc:	f1c6 0320 	rsb	r3, r6, #32
900003d0:	fa01 f806 	lsl.w	r8, r1, r6
900003d4:	fa20 f303 	lsr.w	r3, r0, r3
900003d8:	40b7      	lsls	r7, r6
900003da:	ea43 0808 	orr.w	r8, r3, r8
900003de:	40b4      	lsls	r4, r6
900003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900003e4:	fa1f fc87 	uxth.w	ip, r7
900003e8:	fbb8 f1fe 	udiv	r1, r8, lr
900003ec:	0c23      	lsrs	r3, r4, #16
900003ee:	fb0e 8811 	mls	r8, lr, r1, r8
900003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900003f6:	fb01 f20c 	mul.w	r2, r1, ip
900003fa:	429a      	cmp	r2, r3
900003fc:	d909      	bls.n	90000412 <__udivmoddi4+0x62>
900003fe:	18fb      	adds	r3, r7, r3
90000400:	f101 30ff 	add.w	r0, r1, #4294967295
90000404:	f080 80ea 	bcs.w	900005dc <__udivmoddi4+0x22c>
90000408:	429a      	cmp	r2, r3
9000040a:	f240 80e7 	bls.w	900005dc <__udivmoddi4+0x22c>
9000040e:	3902      	subs	r1, #2
90000410:	443b      	add	r3, r7
90000412:	1a9a      	subs	r2, r3, r2
90000414:	b2a3      	uxth	r3, r4
90000416:	fbb2 f0fe 	udiv	r0, r2, lr
9000041a:	fb0e 2210 	mls	r2, lr, r0, r2
9000041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90000422:	fb00 fc0c 	mul.w	ip, r0, ip
90000426:	459c      	cmp	ip, r3
90000428:	d909      	bls.n	9000043e <__udivmoddi4+0x8e>
9000042a:	18fb      	adds	r3, r7, r3
9000042c:	f100 32ff 	add.w	r2, r0, #4294967295
90000430:	f080 80d6 	bcs.w	900005e0 <__udivmoddi4+0x230>
90000434:	459c      	cmp	ip, r3
90000436:	f240 80d3 	bls.w	900005e0 <__udivmoddi4+0x230>
9000043a:	443b      	add	r3, r7
9000043c:	3802      	subs	r0, #2
9000043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000442:	eba3 030c 	sub.w	r3, r3, ip
90000446:	2100      	movs	r1, #0
90000448:	b11d      	cbz	r5, 90000452 <__udivmoddi4+0xa2>
9000044a:	40f3      	lsrs	r3, r6
9000044c:	2200      	movs	r2, #0
9000044e:	e9c5 3200 	strd	r3, r2, [r5]
90000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000456:	428b      	cmp	r3, r1
90000458:	d905      	bls.n	90000466 <__udivmoddi4+0xb6>
9000045a:	b10d      	cbz	r5, 90000460 <__udivmoddi4+0xb0>
9000045c:	e9c5 0100 	strd	r0, r1, [r5]
90000460:	2100      	movs	r1, #0
90000462:	4608      	mov	r0, r1
90000464:	e7f5      	b.n	90000452 <__udivmoddi4+0xa2>
90000466:	fab3 f183 	clz	r1, r3
9000046a:	2900      	cmp	r1, #0
9000046c:	d146      	bne.n	900004fc <__udivmoddi4+0x14c>
9000046e:	4573      	cmp	r3, lr
90000470:	d302      	bcc.n	90000478 <__udivmoddi4+0xc8>
90000472:	4282      	cmp	r2, r0
90000474:	f200 8105 	bhi.w	90000682 <__udivmoddi4+0x2d2>
90000478:	1a84      	subs	r4, r0, r2
9000047a:	eb6e 0203 	sbc.w	r2, lr, r3
9000047e:	2001      	movs	r0, #1
90000480:	4690      	mov	r8, r2
90000482:	2d00      	cmp	r5, #0
90000484:	d0e5      	beq.n	90000452 <__udivmoddi4+0xa2>
90000486:	e9c5 4800 	strd	r4, r8, [r5]
9000048a:	e7e2      	b.n	90000452 <__udivmoddi4+0xa2>
9000048c:	2a00      	cmp	r2, #0
9000048e:	f000 8090 	beq.w	900005b2 <__udivmoddi4+0x202>
90000492:	fab2 f682 	clz	r6, r2
90000496:	2e00      	cmp	r6, #0
90000498:	f040 80a4 	bne.w	900005e4 <__udivmoddi4+0x234>
9000049c:	1a8a      	subs	r2, r1, r2
9000049e:	0c03      	lsrs	r3, r0, #16
900004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900004a4:	b280      	uxth	r0, r0
900004a6:	b2bc      	uxth	r4, r7
900004a8:	2101      	movs	r1, #1
900004aa:	fbb2 fcfe 	udiv	ip, r2, lr
900004ae:	fb0e 221c 	mls	r2, lr, ip, r2
900004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900004b6:	fb04 f20c 	mul.w	r2, r4, ip
900004ba:	429a      	cmp	r2, r3
900004bc:	d907      	bls.n	900004ce <__udivmoddi4+0x11e>
900004be:	18fb      	adds	r3, r7, r3
900004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
900004c4:	d202      	bcs.n	900004cc <__udivmoddi4+0x11c>
900004c6:	429a      	cmp	r2, r3
900004c8:	f200 80e0 	bhi.w	9000068c <__udivmoddi4+0x2dc>
900004cc:	46c4      	mov	ip, r8
900004ce:	1a9b      	subs	r3, r3, r2
900004d0:	fbb3 f2fe 	udiv	r2, r3, lr
900004d4:	fb0e 3312 	mls	r3, lr, r2, r3
900004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
900004dc:	fb02 f404 	mul.w	r4, r2, r4
900004e0:	429c      	cmp	r4, r3
900004e2:	d907      	bls.n	900004f4 <__udivmoddi4+0x144>
900004e4:	18fb      	adds	r3, r7, r3
900004e6:	f102 30ff 	add.w	r0, r2, #4294967295
900004ea:	d202      	bcs.n	900004f2 <__udivmoddi4+0x142>
900004ec:	429c      	cmp	r4, r3
900004ee:	f200 80ca 	bhi.w	90000686 <__udivmoddi4+0x2d6>
900004f2:	4602      	mov	r2, r0
900004f4:	1b1b      	subs	r3, r3, r4
900004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
900004fa:	e7a5      	b.n	90000448 <__udivmoddi4+0x98>
900004fc:	f1c1 0620 	rsb	r6, r1, #32
90000500:	408b      	lsls	r3, r1
90000502:	fa22 f706 	lsr.w	r7, r2, r6
90000506:	431f      	orrs	r7, r3
90000508:	fa0e f401 	lsl.w	r4, lr, r1
9000050c:	fa20 f306 	lsr.w	r3, r0, r6
90000510:	fa2e fe06 	lsr.w	lr, lr, r6
90000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
90000518:	4323      	orrs	r3, r4
9000051a:	fa00 f801 	lsl.w	r8, r0, r1
9000051e:	fa1f fc87 	uxth.w	ip, r7
90000522:	fbbe f0f9 	udiv	r0, lr, r9
90000526:	0c1c      	lsrs	r4, r3, #16
90000528:	fb09 ee10 	mls	lr, r9, r0, lr
9000052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
90000530:	fb00 fe0c 	mul.w	lr, r0, ip
90000534:	45a6      	cmp	lr, r4
90000536:	fa02 f201 	lsl.w	r2, r2, r1
9000053a:	d909      	bls.n	90000550 <__udivmoddi4+0x1a0>
9000053c:	193c      	adds	r4, r7, r4
9000053e:	f100 3aff 	add.w	sl, r0, #4294967295
90000542:	f080 809c 	bcs.w	9000067e <__udivmoddi4+0x2ce>
90000546:	45a6      	cmp	lr, r4
90000548:	f240 8099 	bls.w	9000067e <__udivmoddi4+0x2ce>
9000054c:	3802      	subs	r0, #2
9000054e:	443c      	add	r4, r7
90000550:	eba4 040e 	sub.w	r4, r4, lr
90000554:	fa1f fe83 	uxth.w	lr, r3
90000558:	fbb4 f3f9 	udiv	r3, r4, r9
9000055c:	fb09 4413 	mls	r4, r9, r3, r4
90000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
90000564:	fb03 fc0c 	mul.w	ip, r3, ip
90000568:	45a4      	cmp	ip, r4
9000056a:	d908      	bls.n	9000057e <__udivmoddi4+0x1ce>
9000056c:	193c      	adds	r4, r7, r4
9000056e:	f103 3eff 	add.w	lr, r3, #4294967295
90000572:	f080 8082 	bcs.w	9000067a <__udivmoddi4+0x2ca>
90000576:	45a4      	cmp	ip, r4
90000578:	d97f      	bls.n	9000067a <__udivmoddi4+0x2ca>
9000057a:	3b02      	subs	r3, #2
9000057c:	443c      	add	r4, r7
9000057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
90000582:	eba4 040c 	sub.w	r4, r4, ip
90000586:	fba0 ec02 	umull	lr, ip, r0, r2
9000058a:	4564      	cmp	r4, ip
9000058c:	4673      	mov	r3, lr
9000058e:	46e1      	mov	r9, ip
90000590:	d362      	bcc.n	90000658 <__udivmoddi4+0x2a8>
90000592:	d05f      	beq.n	90000654 <__udivmoddi4+0x2a4>
90000594:	b15d      	cbz	r5, 900005ae <__udivmoddi4+0x1fe>
90000596:	ebb8 0203 	subs.w	r2, r8, r3
9000059a:	eb64 0409 	sbc.w	r4, r4, r9
9000059e:	fa04 f606 	lsl.w	r6, r4, r6
900005a2:	fa22 f301 	lsr.w	r3, r2, r1
900005a6:	431e      	orrs	r6, r3
900005a8:	40cc      	lsrs	r4, r1
900005aa:	e9c5 6400 	strd	r6, r4, [r5]
900005ae:	2100      	movs	r1, #0
900005b0:	e74f      	b.n	90000452 <__udivmoddi4+0xa2>
900005b2:	fbb1 fcf2 	udiv	ip, r1, r2
900005b6:	0c01      	lsrs	r1, r0, #16
900005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
900005bc:	b280      	uxth	r0, r0
900005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
900005c2:	463b      	mov	r3, r7
900005c4:	4638      	mov	r0, r7
900005c6:	463c      	mov	r4, r7
900005c8:	46b8      	mov	r8, r7
900005ca:	46be      	mov	lr, r7
900005cc:	2620      	movs	r6, #32
900005ce:	fbb1 f1f7 	udiv	r1, r1, r7
900005d2:	eba2 0208 	sub.w	r2, r2, r8
900005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
900005da:	e766      	b.n	900004aa <__udivmoddi4+0xfa>
900005dc:	4601      	mov	r1, r0
900005de:	e718      	b.n	90000412 <__udivmoddi4+0x62>
900005e0:	4610      	mov	r0, r2
900005e2:	e72c      	b.n	9000043e <__udivmoddi4+0x8e>
900005e4:	f1c6 0220 	rsb	r2, r6, #32
900005e8:	fa2e f302 	lsr.w	r3, lr, r2
900005ec:	40b7      	lsls	r7, r6
900005ee:	40b1      	lsls	r1, r6
900005f0:	fa20 f202 	lsr.w	r2, r0, r2
900005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900005f8:	430a      	orrs	r2, r1
900005fa:	fbb3 f8fe 	udiv	r8, r3, lr
900005fe:	b2bc      	uxth	r4, r7
90000600:	fb0e 3318 	mls	r3, lr, r8, r3
90000604:	0c11      	lsrs	r1, r2, #16
90000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000060a:	fb08 f904 	mul.w	r9, r8, r4
9000060e:	40b0      	lsls	r0, r6
90000610:	4589      	cmp	r9, r1
90000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
90000616:	b280      	uxth	r0, r0
90000618:	d93e      	bls.n	90000698 <__udivmoddi4+0x2e8>
9000061a:	1879      	adds	r1, r7, r1
9000061c:	f108 3cff 	add.w	ip, r8, #4294967295
90000620:	d201      	bcs.n	90000626 <__udivmoddi4+0x276>
90000622:	4589      	cmp	r9, r1
90000624:	d81f      	bhi.n	90000666 <__udivmoddi4+0x2b6>
90000626:	eba1 0109 	sub.w	r1, r1, r9
9000062a:	fbb1 f9fe 	udiv	r9, r1, lr
9000062e:	fb09 f804 	mul.w	r8, r9, r4
90000632:	fb0e 1119 	mls	r1, lr, r9, r1
90000636:	b292      	uxth	r2, r2
90000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000063c:	4542      	cmp	r2, r8
9000063e:	d229      	bcs.n	90000694 <__udivmoddi4+0x2e4>
90000640:	18ba      	adds	r2, r7, r2
90000642:	f109 31ff 	add.w	r1, r9, #4294967295
90000646:	d2c4      	bcs.n	900005d2 <__udivmoddi4+0x222>
90000648:	4542      	cmp	r2, r8
9000064a:	d2c2      	bcs.n	900005d2 <__udivmoddi4+0x222>
9000064c:	f1a9 0102 	sub.w	r1, r9, #2
90000650:	443a      	add	r2, r7
90000652:	e7be      	b.n	900005d2 <__udivmoddi4+0x222>
90000654:	45f0      	cmp	r8, lr
90000656:	d29d      	bcs.n	90000594 <__udivmoddi4+0x1e4>
90000658:	ebbe 0302 	subs.w	r3, lr, r2
9000065c:	eb6c 0c07 	sbc.w	ip, ip, r7
90000660:	3801      	subs	r0, #1
90000662:	46e1      	mov	r9, ip
90000664:	e796      	b.n	90000594 <__udivmoddi4+0x1e4>
90000666:	eba7 0909 	sub.w	r9, r7, r9
9000066a:	4449      	add	r1, r9
9000066c:	f1a8 0c02 	sub.w	ip, r8, #2
90000670:	fbb1 f9fe 	udiv	r9, r1, lr
90000674:	fb09 f804 	mul.w	r8, r9, r4
90000678:	e7db      	b.n	90000632 <__udivmoddi4+0x282>
9000067a:	4673      	mov	r3, lr
9000067c:	e77f      	b.n	9000057e <__udivmoddi4+0x1ce>
9000067e:	4650      	mov	r0, sl
90000680:	e766      	b.n	90000550 <__udivmoddi4+0x1a0>
90000682:	4608      	mov	r0, r1
90000684:	e6fd      	b.n	90000482 <__udivmoddi4+0xd2>
90000686:	443b      	add	r3, r7
90000688:	3a02      	subs	r2, #2
9000068a:	e733      	b.n	900004f4 <__udivmoddi4+0x144>
9000068c:	f1ac 0c02 	sub.w	ip, ip, #2
90000690:	443b      	add	r3, r7
90000692:	e71c      	b.n	900004ce <__udivmoddi4+0x11e>
90000694:	4649      	mov	r1, r9
90000696:	e79c      	b.n	900005d2 <__udivmoddi4+0x222>
90000698:	eba1 0109 	sub.w	r1, r1, r9
9000069c:	46c4      	mov	ip, r8
9000069e:	fbb1 f9fe 	udiv	r9, r1, lr
900006a2:	fb09 f804 	mul.w	r8, r9, r4
900006a6:	e7c4      	b.n	90000632 <__udivmoddi4+0x282>

900006a8 <__aeabi_idiv0>:
900006a8:	4770      	bx	lr
900006aa:	bf00      	nop

900006ac <clearInput>:
#include "appLogic.h"


void clearInput(AppContext *ctx) {
900006ac:	b480      	push	{r7}
900006ae:	b083      	sub	sp, #12
900006b0:	af00      	add	r7, sp, #0
900006b2:	6078      	str	r0, [r7, #4]
  ctx->inputValue = 0;
900006b4:	687b      	ldr	r3, [r7, #4]
900006b6:	2200      	movs	r2, #0
900006b8:	809a      	strh	r2, [r3, #4]
}
900006ba:	bf00      	nop
900006bc:	370c      	adds	r7, #12
900006be:	46bd      	mov	sp, r7
900006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006c4:	4770      	bx	lr

900006c6 <clearVoltage>:

void clearVoltage(AppContext *ctx) {
900006c6:	b480      	push	{r7}
900006c8:	b083      	sub	sp, #12
900006ca:	af00      	add	r7, sp, #0
900006cc:	6078      	str	r0, [r7, #4]
  ctx->voltage = 0;
900006ce:	687b      	ldr	r3, [r7, #4]
900006d0:	2200      	movs	r2, #0
900006d2:	805a      	strh	r2, [r3, #2]
  ctx->isVoltageEntered = false;
900006d4:	687b      	ldr	r3, [r7, #4]
900006d6:	2200      	movs	r2, #0
900006d8:	719a      	strb	r2, [r3, #6]
}
900006da:	bf00      	nop
900006dc:	370c      	adds	r7, #12
900006de:	46bd      	mov	sp, r7
900006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900006e4:	4770      	bx	lr
	...

900006e8 <backspace>:

void backspace(AppContext *ctx) {
900006e8:	b480      	push	{r7}
900006ea:	b083      	sub	sp, #12
900006ec:	af00      	add	r7, sp, #0
900006ee:	6078      	str	r0, [r7, #4]
  ctx->inputValue = ctx->inputValue / 10;
900006f0:	687b      	ldr	r3, [r7, #4]
900006f2:	889b      	ldrh	r3, [r3, #4]
900006f4:	4a06      	ldr	r2, [pc, #24]	@ (90000710 <backspace+0x28>)
900006f6:	fba2 2303 	umull	r2, r3, r2, r3
900006fa:	08db      	lsrs	r3, r3, #3
900006fc:	b29a      	uxth	r2, r3
900006fe:	687b      	ldr	r3, [r7, #4]
90000700:	809a      	strh	r2, [r3, #4]
}
90000702:	bf00      	nop
90000704:	370c      	adds	r7, #12
90000706:	46bd      	mov	sp, r7
90000708:	f85d 7b04 	ldr.w	r7, [sp], #4
9000070c:	4770      	bx	lr
9000070e:	bf00      	nop
90000710:	cccccccd 	.word	0xcccccccd

90000714 <stopPWM>:

void stopPWM(AppContext *ctx) {
90000714:	b480      	push	{r7}
90000716:	b083      	sub	sp, #12
90000718:	af00      	add	r7, sp, #0
9000071a:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = false;
9000071c:	687b      	ldr	r3, [r7, #4]
9000071e:	2200      	movs	r2, #0
90000720:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
  // TODO callbakc
}
90000722:	bf00      	nop
90000724:	370c      	adds	r7, #12
90000726:	46bd      	mov	sp, r7
90000728:	f85d 7b04 	ldr.w	r7, [sp], #4
9000072c:	4770      	bx	lr

9000072e <startPWM>:

void startPWM(AppContext *ctx) {
9000072e:	b480      	push	{r7}
90000730:	b083      	sub	sp, #12
90000732:	af00      	add	r7, sp, #0
90000734:	6078      	str	r0, [r7, #4]
  ctx->isPwmRunning = true;
90000736:	687b      	ldr	r3, [r7, #4]
90000738:	2201      	movs	r2, #1
9000073a:	71da      	strb	r2, [r3, #7]
  //__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ctx->voltage / 4);
  // TODO callbakc
}
9000073c:	bf00      	nop
9000073e:	370c      	adds	r7, #12
90000740:	46bd      	mov	sp, r7
90000742:	f85d 7b04 	ldr.w	r7, [sp], #4
90000746:	4770      	bx	lr

90000748 <setSTATE_F2>:

void setSTATE_F2(AppContext *ctx) {
90000748:	b480      	push	{r7}
9000074a:	b083      	sub	sp, #12
9000074c:	af00      	add	r7, sp, #0
9000074e:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F2;
90000750:	687b      	ldr	r3, [r7, #4]
90000752:	2201      	movs	r2, #1
90000754:	701a      	strb	r2, [r3, #0]
}
90000756:	bf00      	nop
90000758:	370c      	adds	r7, #12
9000075a:	46bd      	mov	sp, r7
9000075c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000760:	4770      	bx	lr

90000762 <setSTATE_F1>:

void setSTATE_F1(AppContext *ctx) {
90000762:	b480      	push	{r7}
90000764:	b083      	sub	sp, #12
90000766:	af00      	add	r7, sp, #0
90000768:	6078      	str	r0, [r7, #4]
  ctx->currentState = STATE_F1;
9000076a:	687b      	ldr	r3, [r7, #4]
9000076c:	2200      	movs	r2, #0
9000076e:	701a      	strb	r2, [r3, #0]
}
90000770:	bf00      	nop
90000772:	370c      	adds	r7, #12
90000774:	46bd      	mov	sp, r7
90000776:	f85d 7b04 	ldr.w	r7, [sp], #4
9000077a:	4770      	bx	lr

9000077c <validateAndSetVoltage>:

void validateAndSetVoltage(AppContext *ctx) {
9000077c:	b580      	push	{r7, lr}
9000077e:	b082      	sub	sp, #8
90000780:	af00      	add	r7, sp, #0
90000782:	6078      	str	r0, [r7, #4]
  if (ctx->inputValue < 80 || ctx->inputValue > 400)
90000784:	687b      	ldr	r3, [r7, #4]
90000786:	889b      	ldrh	r3, [r3, #4]
90000788:	2b4f      	cmp	r3, #79	@ 0x4f
9000078a:	d904      	bls.n	90000796 <validateAndSetVoltage+0x1a>
9000078c:	687b      	ldr	r3, [r7, #4]
9000078e:	889b      	ldrh	r3, [r3, #4]
90000790:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000794:	d90c      	bls.n	900007b0 <validateAndSetVoltage+0x34>
  {
    strcpy(ctx->message, "Input voltage has to be in range 80 - 400. Resetting, try again!\r\n");
90000796:	687b      	ldr	r3, [r7, #4]
90000798:	3308      	adds	r3, #8
9000079a:	4a10      	ldr	r2, [pc, #64]	@ (900007dc <validateAndSetVoltage+0x60>)
9000079c:	4618      	mov	r0, r3
9000079e:	4611      	mov	r1, r2
900007a0:	2343      	movs	r3, #67	@ 0x43
900007a2:	461a      	mov	r2, r3
900007a4:	f00c f847 	bl	9000c836 <memcpy>
    clearInput(ctx);
900007a8:	6878      	ldr	r0, [r7, #4]
900007aa:	f7ff ff7f 	bl	900006ac <clearInput>
    return;
900007ae:	e012      	b.n	900007d6 <validateAndSetVoltage+0x5a>
  }
  ctx->isVoltageEntered = true;
900007b0:	687b      	ldr	r3, [r7, #4]
900007b2:	2201      	movs	r2, #1
900007b4:	719a      	strb	r2, [r3, #6]
  ctx->voltage = ctx->inputValue;
900007b6:	687b      	ldr	r3, [r7, #4]
900007b8:	889a      	ldrh	r2, [r3, #4]
900007ba:	687b      	ldr	r3, [r7, #4]
900007bc:	805a      	strh	r2, [r3, #2]
  ctx->inputValue = 0;
900007be:	687b      	ldr	r3, [r7, #4]
900007c0:	2200      	movs	r2, #0
900007c2:	809a      	strh	r2, [r3, #4]
  sprintf(ctx->message, "Voltage %d has been successfully entered\r\n", ctx->voltage);
900007c4:	687b      	ldr	r3, [r7, #4]
900007c6:	f103 0008 	add.w	r0, r3, #8
900007ca:	687b      	ldr	r3, [r7, #4]
900007cc:	885b      	ldrh	r3, [r3, #2]
900007ce:	461a      	mov	r2, r3
900007d0:	4903      	ldr	r1, [pc, #12]	@ (900007e0 <validateAndSetVoltage+0x64>)
900007d2:	f00b feab 	bl	9000c52c <siprintf>

}
900007d6:	3708      	adds	r7, #8
900007d8:	46bd      	mov	sp, r7
900007da:	bd80      	pop	{r7, pc}
900007dc:	9000d44c 	.word	0x9000d44c
900007e0:	9000d490 	.word	0x9000d490

900007e4 <updateInput>:

void updateInput(AppContext *ctx, KeyboardButton key) {
900007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
900007e6:	b085      	sub	sp, #20
900007e8:	af00      	add	r7, sp, #0
900007ea:	6078      	str	r0, [r7, #4]
900007ec:	460b      	mov	r3, r1
900007ee:	70fb      	strb	r3, [r7, #3]
  uint8_t digit = key - '0';
900007f0:	78fb      	ldrb	r3, [r7, #3]
900007f2:	3b30      	subs	r3, #48	@ 0x30
900007f4:	73fb      	strb	r3, [r7, #15]
  ctx->inputValue = ctx->inputValue * 10 + digit;
900007f6:	687b      	ldr	r3, [r7, #4]
900007f8:	889b      	ldrh	r3, [r3, #4]
900007fa:	461a      	mov	r2, r3
900007fc:	0092      	lsls	r2, r2, #2
900007fe:	4413      	add	r3, r2
90000800:	005b      	lsls	r3, r3, #1
90000802:	b29a      	uxth	r2, r3
90000804:	7bfb      	ldrb	r3, [r7, #15]
90000806:	b29b      	uxth	r3, r3
90000808:	4413      	add	r3, r2
9000080a:	b29a      	uxth	r2, r3
9000080c:	687b      	ldr	r3, [r7, #4]
9000080e:	809a      	strh	r2, [r3, #4]
  if (ctx->inputValue > 400) {
90000810:	687b      	ldr	r3, [r7, #4]
90000812:	889b      	ldrh	r3, [r3, #4]
90000814:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
90000818:	d91e      	bls.n	90000858 <updateInput+0x74>
    strcpy(ctx->message, "Input set too high, resetting. Try again\r\n");
9000081a:	687b      	ldr	r3, [r7, #4]
9000081c:	3308      	adds	r3, #8
9000081e:	4a10      	ldr	r2, [pc, #64]	@ (90000860 <updateInput+0x7c>)
90000820:	4614      	mov	r4, r2
90000822:	469c      	mov	ip, r3
90000824:	f104 0e20 	add.w	lr, r4, #32
90000828:	4665      	mov	r5, ip
9000082a:	4626      	mov	r6, r4
9000082c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
9000082e:	6028      	str	r0, [r5, #0]
90000830:	6069      	str	r1, [r5, #4]
90000832:	60aa      	str	r2, [r5, #8]
90000834:	60eb      	str	r3, [r5, #12]
90000836:	3410      	adds	r4, #16
90000838:	f10c 0c10 	add.w	ip, ip, #16
9000083c:	4574      	cmp	r4, lr
9000083e:	d1f3      	bne.n	90000828 <updateInput+0x44>
90000840:	4662      	mov	r2, ip
90000842:	4623      	mov	r3, r4
90000844:	cb03      	ldmia	r3!, {r0, r1}
90000846:	6010      	str	r0, [r2, #0]
90000848:	6051      	str	r1, [r2, #4]
9000084a:	8819      	ldrh	r1, [r3, #0]
9000084c:	789b      	ldrb	r3, [r3, #2]
9000084e:	8111      	strh	r1, [r2, #8]
90000850:	7293      	strb	r3, [r2, #10]
    clearInput(ctx);
90000852:	6878      	ldr	r0, [r7, #4]
90000854:	f7ff ff2a 	bl	900006ac <clearInput>
  }
}
90000858:	bf00      	nop
9000085a:	3714      	adds	r7, #20
9000085c:	46bd      	mov	sp, r7
9000085e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000860:	9000d4bc 	.word	0x9000d4bc

90000864 <handle_event>:

void handle_event(AppContext *ctx, KeyboardButton key)
{
90000864:	b580      	push	{r7, lr}
90000866:	b082      	sub	sp, #8
90000868:	af00      	add	r7, sp, #0
9000086a:	6078      	str	r0, [r7, #4]
9000086c:	460b      	mov	r3, r1
9000086e:	70fb      	strb	r3, [r7, #3]
  ctx->message[0] = '\0';
90000870:	687b      	ldr	r3, [r7, #4]
90000872:	2200      	movs	r2, #0
90000874:	721a      	strb	r2, [r3, #8]
  if (ctx->currentState == STATE_F1) {
90000876:	687b      	ldr	r3, [r7, #4]
90000878:	781b      	ldrb	r3, [r3, #0]
9000087a:	2b00      	cmp	r3, #0
9000087c:	d13d      	bne.n	900008fa <handle_event+0x96>
	if (ctx->isPwmRunning == true)
9000087e:	687b      	ldr	r3, [r7, #4]
90000880:	79db      	ldrb	r3, [r3, #7]
90000882:	2b00      	cmp	r3, #0
90000884:	d006      	beq.n	90000894 <handle_event+0x30>
	{
	  if (key == KEY_Stop) stopPWM(ctx);
90000886:	78fb      	ldrb	r3, [r7, #3]
90000888:	2b73      	cmp	r3, #115	@ 0x73
9000088a:	d141      	bne.n	90000910 <handle_event+0xac>
9000088c:	6878      	ldr	r0, [r7, #4]
9000088e:	f7ff ff41 	bl	90000714 <stopPWM>
	  return; // when PWM is running, we can only press the "STOP" button
90000892:	e03d      	b.n	90000910 <handle_event+0xac>
	}

	if (ctx->isVoltageEntered == true) // valid voltage has been entered
90000894:	687b      	ldr	r3, [r7, #4]
90000896:	799b      	ldrb	r3, [r3, #6]
90000898:	2b00      	cmp	r3, #0
9000089a:	d005      	beq.n	900008a8 <handle_event+0x44>
	{
	  if (key == KEY_Start) startPWM(ctx);
9000089c:	78fb      	ldrb	r3, [r7, #3]
9000089e:	2b53      	cmp	r3, #83	@ 0x53
900008a0:	d102      	bne.n	900008a8 <handle_event+0x44>
900008a2:	6878      	ldr	r0, [r7, #4]
900008a4:	f7ff ff43 	bl	9000072e <startPWM>
	}

	if (key >= KEY_0 && key <= KEY_9) updateInput(ctx, key);
900008a8:	78fb      	ldrb	r3, [r7, #3]
900008aa:	2b2f      	cmp	r3, #47	@ 0x2f
900008ac:	d907      	bls.n	900008be <handle_event+0x5a>
900008ae:	78fb      	ldrb	r3, [r7, #3]
900008b0:	2b39      	cmp	r3, #57	@ 0x39
900008b2:	d804      	bhi.n	900008be <handle_event+0x5a>
900008b4:	78fb      	ldrb	r3, [r7, #3]
900008b6:	4619      	mov	r1, r3
900008b8:	6878      	ldr	r0, [r7, #4]
900008ba:	f7ff ff93 	bl	900007e4 <updateInput>
	if (key == KEY_Clear) clearVoltage(ctx);
900008be:	78fb      	ldrb	r3, [r7, #3]
900008c0:	2b63      	cmp	r3, #99	@ 0x63
900008c2:	d102      	bne.n	900008ca <handle_event+0x66>
900008c4:	6878      	ldr	r0, [r7, #4]
900008c6:	f7ff fefe 	bl	900006c6 <clearVoltage>
	if (key == KEY_Enter) validateAndSetVoltage(ctx);
900008ca:	78fb      	ldrb	r3, [r7, #3]
900008cc:	2b65      	cmp	r3, #101	@ 0x65
900008ce:	d102      	bne.n	900008d6 <handle_event+0x72>
900008d0:	6878      	ldr	r0, [r7, #4]
900008d2:	f7ff ff53 	bl	9000077c <validateAndSetVoltage>
	if (key == KEY_BkSp) backspace(ctx);
900008d6:	78fb      	ldrb	r3, [r7, #3]
900008d8:	2b62      	cmp	r3, #98	@ 0x62
900008da:	d102      	bne.n	900008e2 <handle_event+0x7e>
900008dc:	6878      	ldr	r0, [r7, #4]
900008de:	f7ff ff03 	bl	900006e8 <backspace>
	if (key == KEY_F2) setSTATE_F2(ctx);
900008e2:	78fb      	ldrb	r3, [r7, #3]
900008e4:	2b40      	cmp	r3, #64	@ 0x40
900008e6:	d102      	bne.n	900008ee <handle_event+0x8a>
900008e8:	6878      	ldr	r0, [r7, #4]
900008ea:	f7ff ff2d 	bl	90000748 <setSTATE_F2>
	if (key == KEY_ESC) clearInput(ctx);
900008ee:	78fb      	ldrb	r3, [r7, #3]
900008f0:	2b60      	cmp	r3, #96	@ 0x60
900008f2:	d102      	bne.n	900008fa <handle_event+0x96>
900008f4:	6878      	ldr	r0, [r7, #4]
900008f6:	f7ff fed9 	bl	900006ac <clearInput>
  }

  if (ctx->currentState == STATE_F2) {
900008fa:	687b      	ldr	r3, [r7, #4]
900008fc:	781b      	ldrb	r3, [r3, #0]
900008fe:	2b01      	cmp	r3, #1
90000900:	d109      	bne.n	90000916 <handle_event+0xb2>
	if (key == KEY_F1) setSTATE_F1(ctx);
90000902:	78fb      	ldrb	r3, [r7, #3]
90000904:	2b21      	cmp	r3, #33	@ 0x21
90000906:	d105      	bne.n	90000914 <handle_event+0xb0>
90000908:	6878      	ldr	r0, [r7, #4]
9000090a:	f7ff ff2a 	bl	90000762 <setSTATE_F1>
	return;
9000090e:	e001      	b.n	90000914 <handle_event+0xb0>
	  return; // when PWM is running, we can only press the "STOP" button
90000910:	bf00      	nop
90000912:	e000      	b.n	90000916 <handle_event+0xb2>
	return;
90000914:	bf00      	nop
  }
}
90000916:	3708      	adds	r7, #8
90000918:	46bd      	mov	sp, r7
9000091a:	bd80      	pop	{r7, pc}

9000091c <InitializeAppContext>:

void InitializeAppContext(AppContext* ctx) {
9000091c:	b480      	push	{r7}
9000091e:	b083      	sub	sp, #12
90000920:	af00      	add	r7, sp, #0
90000922:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_F1;
90000924:	687b      	ldr	r3, [r7, #4]
90000926:	2200      	movs	r2, #0
90000928:	701a      	strb	r2, [r3, #0]
	ctx->isVoltageEntered = false;
9000092a:	687b      	ldr	r3, [r7, #4]
9000092c:	2200      	movs	r2, #0
9000092e:	719a      	strb	r2, [r3, #6]
	ctx->isPwmRunning = false;
90000930:	687b      	ldr	r3, [r7, #4]
90000932:	2200      	movs	r2, #0
90000934:	71da      	strb	r2, [r3, #7]
	ctx->voltage = 0;
90000936:	687b      	ldr	r3, [r7, #4]
90000938:	2200      	movs	r2, #0
9000093a:	805a      	strh	r2, [r3, #2]
	ctx->inputValue = 0;
9000093c:	687b      	ldr	r3, [r7, #4]
9000093e:	2200      	movs	r2, #0
90000940:	809a      	strh	r2, [r3, #4]
}
90000942:	bf00      	nop
90000944:	370c      	adds	r7, #12
90000946:	46bd      	mov	sp, r7
90000948:	f85d 7b04 	ldr.w	r7, [sp], #4
9000094c:	4770      	bx	lr
	...

90000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90000950:	f8df d038 	ldr.w	sp, [pc, #56]	@ 9000098c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
90000954:	f002 fb9c 	bl	90003090 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
90000958:	f002 fb38 	bl	90002fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
9000095c:	480c      	ldr	r0, [pc, #48]	@ (90000990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
9000095e:	490d      	ldr	r1, [pc, #52]	@ (90000994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90000960:	4a0d      	ldr	r2, [pc, #52]	@ (90000998 <LoopFillZerobss+0x1a>)
  movs r3, #0
90000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000964:	e002      	b.n	9000096c <LoopCopyDataInit>

90000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
9000096a:	3304      	adds	r3, #4

9000096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
9000096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
9000096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000970:	d3f9      	bcc.n	90000966 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000972:	4a0a      	ldr	r2, [pc, #40]	@ (9000099c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000974:	4c0a      	ldr	r4, [pc, #40]	@ (900009a0 <LoopFillZerobss+0x22>)
  movs r3, #0
90000976:	2300      	movs	r3, #0
  b LoopFillZerobss
90000978:	e001      	b.n	9000097e <LoopFillZerobss>

9000097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
9000097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
9000097c:	3204      	adds	r2, #4

9000097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
9000097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000980:	d3fb      	bcc.n	9000097a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000982:	f00b ff31 	bl	9000c7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000986:	f000 f827 	bl	900009d8 <main>
  bx  lr
9000098a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
9000098c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
90000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000994:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
90000998:	9000fab0 	.word	0x9000fab0
  ldr r2, =_sbss
9000099c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
900009a0:	200014a0 	.word	0x200014a0

900009a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900009a4:	e7fe      	b.n	900009a4 <ADC3_IRQHandler>
	...

900009a8 <__io_putchar>:
static void CPU_CACHE_Enable(void);
static void CPU_CACHE_Disable(void);
static void MPU_Config(void);
static void MX_USART3_UART_Init(void);

int __io_putchar(int ch) {
900009a8:	b580      	push	{r7, lr}
900009aa:	b082      	sub	sp, #8
900009ac:	af00      	add	r7, sp, #0
900009ae:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY) != HAL_OK) {
900009b0:	1d39      	adds	r1, r7, #4
900009b2:	f04f 33ff 	mov.w	r3, #4294967295
900009b6:	2201      	movs	r2, #1
900009b8:	4806      	ldr	r0, [pc, #24]	@ (900009d4 <__io_putchar+0x2c>)
900009ba:	f009 f923 	bl	90009c04 <HAL_UART_Transmit>
900009be:	4603      	mov	r3, r0
900009c0:	2b00      	cmp	r3, #0
900009c2:	d002      	beq.n	900009ca <__io_putchar+0x22>
    return -1;
900009c4:	f04f 33ff 	mov.w	r3, #4294967295
900009c8:	e000      	b.n	900009cc <__io_putchar+0x24>
  }
  return ch;
900009ca:	687b      	ldr	r3, [r7, #4]
}
900009cc:	4618      	mov	r0, r3
900009ce:	3708      	adds	r7, #8
900009d0:	46bd      	mov	sp, r7
900009d2:	bd80      	pop	{r7, pc}
900009d4:	200000f4 	.word	0x200000f4

900009d8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
900009d8:	b580      	push	{r7, lr}
900009da:	b094      	sub	sp, #80	@ 0x50
900009dc:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
900009de:	f000 fa8b 	bl	90000ef8 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
900009e2:	f000 f9f7 	bl	90000dd4 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
900009e6:	f002 fb6b 	bl	900030c0 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
900009ea:	f000 f8ef 	bl	90000bcc <SystemClock_Config>

  MX_USART3_UART_Init();
900009ee:	f000 f833 	bl	90000a58 <MX_USART3_UART_Init>

  printf("Hi there :)!\r\n");
900009f2:	4818      	ldr	r0, [pc, #96]	@ (90000a54 <main+0x7c>)
900009f4:	f00b fd92 	bl	9000c51c <puts>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
900009f8:	2000      	movs	r0, #0
900009fa:	f000 fe77 	bl	900016ec <BSP_LED_Init>

  AppContext ctx;
  InitializeAppContext(&ctx);
900009fe:	463b      	mov	r3, r7
90000a00:	4618      	mov	r0, r3
90000a02:	f7ff ff8b 	bl	9000091c <InitializeAppContext>

  InitializeLcd();
90000a06:	f000 fc13 	bl	90001230 <InitializeLcd>
  //CPU_CACHE_Disable();
  Draw_Menu();
90000a0a:	f000 fbe1 	bl	900011d0 <Draw_Menu>

  HAL_Delay(1000);
90000a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
90000a12:	f002 fbef 	bl	900031f4 <HAL_Delay>
  InitFlexiKeyboard(); // has to be AFTER BSP_LCD_Init, which initializes PK1 as LTDC_G6 pin. We override it, so we might lose some precision on green channel.
90000a16:	f00a fedf 	bl	9000b7d8 <InitFlexiKeyboard>

  CPU_CACHE_Enable();
90000a1a:	f000 f9db 	bl	90000dd4 <CPU_CACHE_Enable>
  /* Infinite loop */  
  while (1)
  {
	  UartRenderState(&ctx);
90000a1e:	463b      	mov	r3, r7
90000a20:	4618      	mov	r0, r3
90000a22:	f000 fc43 	bl	900012ac <UartRenderState>
	  HAL_Delay(10);
90000a26:	200a      	movs	r0, #10
90000a28:	f002 fbe4 	bl	900031f4 <HAL_Delay>
	  KeyboardButton key = ReadFlexiKeyboard(); // approx 25ms blocking code to scan the keyboard
90000a2c:	f00a fe62 	bl	9000b6f4 <ReadFlexiKeyboard>
90000a30:	4603      	mov	r3, r0
90000a32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  if (key == KEY_NULL) continue;
90000a36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
90000a3a:	2b4e      	cmp	r3, #78	@ 0x4e
90000a3c:	d007      	beq.n	90000a4e <main+0x76>
	  handle_event(&ctx, key);
90000a3e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
90000a42:	463b      	mov	r3, r7
90000a44:	4611      	mov	r1, r2
90000a46:	4618      	mov	r0, r3
90000a48:	f7ff ff0c 	bl	90000864 <handle_event>
90000a4c:	e7e7      	b.n	90000a1e <main+0x46>
	  if (key == KEY_NULL) continue;
90000a4e:	bf00      	nop
  {
90000a50:	e7e5      	b.n	90000a1e <main+0x46>
90000a52:	bf00      	nop
90000a54:	9000d4e8 	.word	0x9000d4e8

90000a58 <MX_USART3_UART_Init>:
  * @param  None
  * @retval None
  */

static void MX_USART3_UART_Init(void)
{
90000a58:	b580      	push	{r7, lr}
90000a5a:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
90000a5c:	4b22      	ldr	r3, [pc, #136]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a5e:	4a23      	ldr	r2, [pc, #140]	@ (90000aec <MX_USART3_UART_Init+0x94>)
90000a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
90000a62:	4b21      	ldr	r3, [pc, #132]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
90000a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90000a6a:	4b1f      	ldr	r3, [pc, #124]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a6c:	2200      	movs	r2, #0
90000a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
90000a70:	4b1d      	ldr	r3, [pc, #116]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a72:	2200      	movs	r2, #0
90000a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90000a76:	4b1c      	ldr	r3, [pc, #112]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a78:	2200      	movs	r2, #0
90000a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a7e:	220c      	movs	r2, #12
90000a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000a82:	4b19      	ldr	r3, [pc, #100]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a84:	2200      	movs	r2, #0
90000a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90000a88:	4b17      	ldr	r3, [pc, #92]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a8a:	2200      	movs	r2, #0
90000a8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000a8e:	4b16      	ldr	r3, [pc, #88]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a90:	2200      	movs	r2, #0
90000a92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000a94:	4b14      	ldr	r3, [pc, #80]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a96:	2200      	movs	r2, #0
90000a98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000a9a:	4b13      	ldr	r3, [pc, #76]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000a9c:	2200      	movs	r2, #0
90000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
90000aa0:	4811      	ldr	r0, [pc, #68]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000aa2:	f009 f85f 	bl	90009b64 <HAL_UART_Init>
90000aa6:	4603      	mov	r3, r0
90000aa8:	2b00      	cmp	r3, #0
90000aaa:	d001      	beq.n	90000ab0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
90000aac:	f000 f88a 	bl	90000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ab0:	2100      	movs	r1, #0
90000ab2:	480d      	ldr	r0, [pc, #52]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000ab4:	f00a f8f5 	bl	9000aca2 <HAL_UARTEx_SetTxFifoThreshold>
90000ab8:	4603      	mov	r3, r0
90000aba:	2b00      	cmp	r3, #0
90000abc:	d001      	beq.n	90000ac2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
90000abe:	f000 f881 	bl	90000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000ac2:	2100      	movs	r1, #0
90000ac4:	4808      	ldr	r0, [pc, #32]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000ac6:	f00a f92a 	bl	9000ad1e <HAL_UARTEx_SetRxFifoThreshold>
90000aca:	4603      	mov	r3, r0
90000acc:	2b00      	cmp	r3, #0
90000ace:	d001      	beq.n	90000ad4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
90000ad0:	f000 f878 	bl	90000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
90000ad4:	4804      	ldr	r0, [pc, #16]	@ (90000ae8 <MX_USART3_UART_Init+0x90>)
90000ad6:	f00a f8ab 	bl	9000ac30 <HAL_UARTEx_DisableFifoMode>
90000ada:	4603      	mov	r3, r0
90000adc:	2b00      	cmp	r3, #0
90000ade:	d001      	beq.n	90000ae4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
90000ae0:	f000 f870 	bl	90000bc4 <Error_Handler>
  }
}
90000ae4:	bf00      	nop
90000ae6:	bd80      	pop	{r7, pc}
90000ae8:	200000f4 	.word	0x200000f4
90000aec:	40004800 	.word	0x40004800

90000af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) // I had to explicitly define this method here, probably I am missing some uart library?
{
90000af0:	b580      	push	{r7, lr}
90000af2:	b0ba      	sub	sp, #232	@ 0xe8
90000af4:	af00      	add	r7, sp, #0
90000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000af8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000afc:	2200      	movs	r2, #0
90000afe:	601a      	str	r2, [r3, #0]
90000b00:	605a      	str	r2, [r3, #4]
90000b02:	609a      	str	r2, [r3, #8]
90000b04:	60da      	str	r2, [r3, #12]
90000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000b08:	f107 0310 	add.w	r3, r7, #16
90000b0c:	22c0      	movs	r2, #192	@ 0xc0
90000b0e:	2100      	movs	r1, #0
90000b10:	4618      	mov	r0, r3
90000b12:	f00b fe05 	bl	9000c720 <memset>
  if(huart->Instance==USART3)
90000b16:	687b      	ldr	r3, [r7, #4]
90000b18:	681b      	ldr	r3, [r3, #0]
90000b1a:	4a27      	ldr	r2, [pc, #156]	@ (90000bb8 <HAL_UART_MspInit+0xc8>)
90000b1c:	4293      	cmp	r3, r2
90000b1e:	d146      	bne.n	90000bae <HAL_UART_MspInit+0xbe>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90000b20:	f04f 0202 	mov.w	r2, #2
90000b24:	f04f 0300 	mov.w	r3, #0
90000b28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90000b2c:	2300      	movs	r3, #0
90000b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000b32:	f107 0310 	add.w	r3, r7, #16
90000b36:	4618      	mov	r0, r3
90000b38:	f006 ffde 	bl	90007af8 <HAL_RCCEx_PeriphCLKConfig>
90000b3c:	4603      	mov	r3, r0
90000b3e:	2b00      	cmp	r3, #0
90000b40:	d001      	beq.n	90000b46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
90000b42:	f000 f83f 	bl	90000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
90000b46:	4b1d      	ldr	r3, [pc, #116]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000b4c:	4a1b      	ldr	r2, [pc, #108]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90000b52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
90000b56:	4b19      	ldr	r3, [pc, #100]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
90000b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
90000b60:	60fb      	str	r3, [r7, #12]
90000b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000b64:	4b15      	ldr	r3, [pc, #84]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b6a:	4a14      	ldr	r2, [pc, #80]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b6c:	f043 0302 	orr.w	r3, r3, #2
90000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90000b74:	4b11      	ldr	r3, [pc, #68]	@ (90000bbc <HAL_UART_MspInit+0xcc>)
90000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90000b7a:	f003 0302 	and.w	r3, r3, #2
90000b7e:	60bb      	str	r3, [r7, #8]
90000b80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000b82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
90000b86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b8a:	2302      	movs	r3, #2
90000b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b90:	2300      	movs	r3, #0
90000b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b96:	2300      	movs	r3, #0
90000b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90000b9c:	2307      	movs	r3, #7
90000b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000ba2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
90000ba6:	4619      	mov	r1, r3
90000ba8:	4805      	ldr	r0, [pc, #20]	@ (90000bc0 <HAL_UART_MspInit+0xd0>)
90000baa:	f002 ffc1 	bl	90003b30 <HAL_GPIO_Init>
  }
}
90000bae:	bf00      	nop
90000bb0:	37e8      	adds	r7, #232	@ 0xe8
90000bb2:	46bd      	mov	sp, r7
90000bb4:	bd80      	pop	{r7, pc}
90000bb6:	bf00      	nop
90000bb8:	40004800 	.word	0x40004800
90000bbc:	58024400 	.word	0x58024400
90000bc0:	58020400 	.word	0x58020400

90000bc4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
90000bc4:	b480      	push	{r7}
90000bc6:	af00      	add	r7, sp, #0
  while(1)
90000bc8:	bf00      	nop
90000bca:	e7fd      	b.n	90000bc8 <Error_Handler+0x4>

90000bcc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
90000bcc:	b580      	push	{r7, lr}
90000bce:	b0ce      	sub	sp, #312	@ 0x138
90000bd0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
90000bd2:	2300      	movs	r3, #0
90000bd4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000bd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000bdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000be0:	2200      	movs	r2, #0
90000be2:	601a      	str	r2, [r3, #0]
90000be4:	4b78      	ldr	r3, [pc, #480]	@ (90000dc8 <SystemClock_Config+0x1fc>)
90000be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000be8:	4a77      	ldr	r2, [pc, #476]	@ (90000dc8 <SystemClock_Config+0x1fc>)
90000bea:	f023 0301 	bic.w	r3, r3, #1
90000bee:	62d3      	str	r3, [r2, #44]	@ 0x2c
90000bf0:	4b75      	ldr	r3, [pc, #468]	@ (90000dc8 <SystemClock_Config+0x1fc>)
90000bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90000bf4:	f003 0201 	and.w	r2, r3, #1
90000bf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000bfc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c00:	601a      	str	r2, [r3, #0]
90000c02:	4b72      	ldr	r3, [pc, #456]	@ (90000dcc <SystemClock_Config+0x200>)
90000c04:	699b      	ldr	r3, [r3, #24]
90000c06:	4a71      	ldr	r2, [pc, #452]	@ (90000dcc <SystemClock_Config+0x200>)
90000c08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
90000c0c:	6193      	str	r3, [r2, #24]
90000c0e:	4b6f      	ldr	r3, [pc, #444]	@ (90000dcc <SystemClock_Config+0x200>)
90000c10:	699b      	ldr	r3, [r3, #24]
90000c12:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
90000c16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c1a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c1e:	601a      	str	r2, [r3, #0]
90000c20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000c24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
90000c28:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000c2a:	bf00      	nop
90000c2c:	4b67      	ldr	r3, [pc, #412]	@ (90000dcc <SystemClock_Config+0x200>)
90000c2e:	699b      	ldr	r3, [r3, #24]
90000c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90000c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90000c38:	d1f8      	bne.n	90000c2c <SystemClock_Config+0x60>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000c3a:	2301      	movs	r3, #1
90000c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000c40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
90000c44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
90000c48:	2300      	movs	r3, #0
90000c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
90000c4e:	2300      	movs	r3, #0
90000c50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000c54:	2302      	movs	r3, #2
90000c56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000c5a:	2302      	movs	r3, #2
90000c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
90000c60:	2305      	movs	r3, #5
90000c62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000c66:	23a0      	movs	r3, #160	@ 0xa0
90000c68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000c6c:	2300      	movs	r3, #0
90000c6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000c72:	2302      	movs	r3, #2
90000c74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000c78:	2302      	movs	r3, #2
90000c7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
90000c7e:	2304      	movs	r3, #4
90000c80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000c84:	2300      	movs	r3, #0
90000c86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000c8a:	2308      	movs	r3, #8
90000c8c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90000c90:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
90000c94:	4618      	mov	r0, r3
90000c96:	f005 ff49 	bl	90006b2c <HAL_RCC_OscConfig>
90000c9a:	4603      	mov	r3, r0
90000c9c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000ca0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000ca4:	2b00      	cmp	r3, #0
90000ca6:	d001      	beq.n	90000cac <SystemClock_Config+0xe0>
  {
    Error_Handler();
90000ca8:	f7ff ff8c 	bl	90000bc4 <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
90000cac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cb0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cb4:	2205      	movs	r2, #5
90000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000cb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cbc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cc0:	2260      	movs	r2, #96	@ 0x60
90000cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000cc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ccc:	2202      	movs	r2, #2
90000cce:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
90000cd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cd4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cd8:	220a      	movs	r2, #10
90000cda:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
90000cdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000ce0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000ce4:	2212      	movs	r2, #18
90000ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000ce8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cf0:	2200      	movs	r2, #0
90000cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000cf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000cf8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000cfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90000d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
90000d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d06:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
90000d0a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
90000d0e:	f04f 0300 	mov.w	r3, #0
90000d12:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
90000d16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000d1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
90000d1e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90000d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90000d26:	f107 0308 	add.w	r3, r7, #8
90000d2a:	4618      	mov	r0, r3
90000d2c:	f006 fee4 	bl	90007af8 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
90000d30:	233f      	movs	r3, #63	@ 0x3f
90000d32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000d36:	2303      	movs	r3, #3
90000d38:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000d3c:	2300      	movs	r3, #0
90000d3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000d42:	2308      	movs	r3, #8
90000d44:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000d48:	2340      	movs	r3, #64	@ 0x40
90000d4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000d4e:	2340      	movs	r3, #64	@ 0x40
90000d50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
90000d58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000d5c:	2340      	movs	r3, #64	@ 0x40
90000d5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000d62:	f507 738a 	add.w	r3, r7, #276	@ 0x114
90000d66:	2104      	movs	r1, #4
90000d68:	4618      	mov	r0, r3
90000d6a:	f006 fb39 	bl	900073e0 <HAL_RCC_ClockConfig>
90000d6e:	4603      	mov	r3, r0
90000d70:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if(ret != HAL_OK)
90000d74:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
90000d78:	2b00      	cmp	r3, #0
90000d7a:	d001      	beq.n	90000d80 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
90000d7c:	f7ff ff22 	bl	90000bc4 <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
90000d80:	4b13      	ldr	r3, [pc, #76]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d82:	681b      	ldr	r3, [r3, #0]
90000d84:	4a12      	ldr	r2, [pc, #72]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90000d8a:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
90000d8c:	4b10      	ldr	r3, [pc, #64]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000d92:	4a0f      	ldr	r2, [pc, #60]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d94:	f043 0302 	orr.w	r3, r3, #2
90000d98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (90000dd0 <SystemClock_Config+0x204>)
90000d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90000da2:	f003 0202 	and.w	r2, r3, #2
90000da6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000daa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000dae:	601a      	str	r2, [r3, #0]
90000db0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
90000db4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
90000db8:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000dba:	f002 fa4b 	bl	90003254 <HAL_EnableCompensationCell>
}
90000dbe:	bf00      	nop
90000dc0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
90000dc4:	46bd      	mov	sp, r7
90000dc6:	bd80      	pop	{r7, pc}
90000dc8:	58000400 	.word	0x58000400
90000dcc:	58024800 	.word	0x58024800
90000dd0:	58024400 	.word	0x58024400

90000dd4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
90000dd4:	b480      	push	{r7}
90000dd6:	b085      	sub	sp, #20
90000dd8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000dda:	4b34      	ldr	r3, [pc, #208]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000ddc:	695b      	ldr	r3, [r3, #20]
90000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90000de2:	2b00      	cmp	r3, #0
90000de4:	d11b      	bne.n	90000e1e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000de6:	f3bf 8f4f 	dsb	sy
}
90000dea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000dec:	f3bf 8f6f 	isb	sy
}
90000df0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000df2:	4b2e      	ldr	r3, [pc, #184]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000df4:	2200      	movs	r2, #0
90000df6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000dfa:	f3bf 8f4f 	dsb	sy
}
90000dfe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e00:	f3bf 8f6f 	isb	sy
}
90000e04:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000e06:	4b29      	ldr	r3, [pc, #164]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e08:	695b      	ldr	r3, [r3, #20]
90000e0a:	4a28      	ldr	r2, [pc, #160]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90000e10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e12:	f3bf 8f4f 	dsb	sy
}
90000e16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e18:	f3bf 8f6f 	isb	sy
}
90000e1c:	e000      	b.n	90000e20 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000e1e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e20:	4b22      	ldr	r3, [pc, #136]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e22:	695b      	ldr	r3, [r3, #20]
90000e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90000e28:	2b00      	cmp	r3, #0
90000e2a:	d138      	bne.n	90000e9e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e2e:	2200      	movs	r2, #0
90000e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000e34:	f3bf 8f4f 	dsb	sy
}
90000e38:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90000e40:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000e42:	68fb      	ldr	r3, [r7, #12]
90000e44:	0b5b      	lsrs	r3, r3, #13
90000e46:	f3c3 030e 	ubfx	r3, r3, #0, #15
90000e4a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000e4c:	68fb      	ldr	r3, [r7, #12]
90000e4e:	08db      	lsrs	r3, r3, #3
90000e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000e54:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000e56:	68bb      	ldr	r3, [r7, #8]
90000e58:	015a      	lsls	r2, r3, #5
90000e5a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
90000e5e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000e60:	687a      	ldr	r2, [r7, #4]
90000e62:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000e64:	4911      	ldr	r1, [pc, #68]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e66:	4313      	orrs	r3, r2
90000e68:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000e6c:	687b      	ldr	r3, [r7, #4]
90000e6e:	1e5a      	subs	r2, r3, #1
90000e70:	607a      	str	r2, [r7, #4]
90000e72:	2b00      	cmp	r3, #0
90000e74:	d1ef      	bne.n	90000e56 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000e76:	68bb      	ldr	r3, [r7, #8]
90000e78:	1e5a      	subs	r2, r3, #1
90000e7a:	60ba      	str	r2, [r7, #8]
90000e7c:	2b00      	cmp	r3, #0
90000e7e:	d1e5      	bne.n	90000e4c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000e80:	f3bf 8f4f 	dsb	sy
}
90000e84:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000e86:	4b09      	ldr	r3, [pc, #36]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e88:	695b      	ldr	r3, [r3, #20]
90000e8a:	4a08      	ldr	r2, [pc, #32]	@ (90000eac <CPU_CACHE_Enable+0xd8>)
90000e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90000e90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000e92:	f3bf 8f4f 	dsb	sy
}
90000e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000e98:	f3bf 8f6f 	isb	sy
}
90000e9c:	e000      	b.n	90000ea0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000e9e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000ea0:	bf00      	nop
90000ea2:	3714      	adds	r7, #20
90000ea4:	46bd      	mov	sp, r7
90000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000eaa:	4770      	bx	lr
90000eac:	e000ed00 	.word	0xe000ed00

90000eb0 <MX_LTDC_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000eb0:	b580      	push	{r7, lr}
90000eb2:	b082      	sub	sp, #8
90000eb4:	af00      	add	r7, sp, #0
90000eb6:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000eb8:	490e      	ldr	r1, [pc, #56]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000eba:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90000ebe:	f04f 0300 	mov.w	r3, #0
90000ec2:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ec8:	2205      	movs	r2, #5
90000eca:	629a      	str	r2, [r3, #40]	@ 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
90000ecc:	4b09      	ldr	r3, [pc, #36]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ece:	22c0      	movs	r2, #192	@ 0xc0
90000ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000ed2:	4b08      	ldr	r3, [pc, #32]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ed4:	2202      	movs	r2, #2
90000ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000ed8:	4b06      	ldr	r3, [pc, #24]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000eda:	2214      	movs	r2, #20
90000edc:	635a      	str	r2, [r3, #52]	@ 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
90000ede:	4b05      	ldr	r3, [pc, #20]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ee0:	2263      	movs	r2, #99	@ 0x63
90000ee2:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000ee4:	4803      	ldr	r0, [pc, #12]	@ (90000ef4 <MX_LTDC_ClockConfig+0x44>)
90000ee6:	f006 fe07 	bl	90007af8 <HAL_RCCEx_PeriphCLKConfig>
90000eea:	4603      	mov	r3, r0
}
90000eec:	4618      	mov	r0, r3
90000eee:	3708      	adds	r7, #8
90000ef0:	46bd      	mov	sp, r7
90000ef2:	bd80      	pop	{r7, pc}
90000ef4:	20000188 	.word	0x20000188

90000ef8 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
90000ef8:	b580      	push	{r7, lr}
90000efa:	b084      	sub	sp, #16
90000efc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
90000efe:	f002 fac9 	bl	90003494 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000f02:	2301      	movs	r3, #1
90000f04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
90000f06:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
90000f0a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90000f0c:	2318      	movs	r3, #24
90000f0e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000f10:	2303      	movs	r3, #3
90000f12:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90000f14:	2300      	movs	r3, #0
90000f16:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000f18:	2301      	movs	r3, #1
90000f1a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000f1c:	2300      	movs	r3, #0
90000f1e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000f20:	2301      	movs	r3, #1
90000f22:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000f24:	2300      	movs	r3, #0
90000f26:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
90000f28:	2300      	movs	r3, #0
90000f2a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000f2c:	2300      	movs	r3, #0
90000f2e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000f30:	463b      	mov	r3, r7
90000f32:	4618      	mov	r0, r3
90000f34:	f002 fae6 	bl	90003504 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000f38:	2004      	movs	r0, #4
90000f3a:	f002 fac3 	bl	900034c4 <HAL_MPU_Enable>
}
90000f3e:	bf00      	nop
90000f40:	3710      	adds	r7, #16
90000f42:	46bd      	mov	sp, r7
90000f44:	bd80      	pop	{r7, pc}

90000f46 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
90000f46:	b480      	push	{r7}
90000f48:	af00      	add	r7, sp, #0
}
90000f4a:	bf00      	nop
90000f4c:	46bd      	mov	sp, r7
90000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f52:	4770      	bx	lr

90000f54 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000f54:	b480      	push	{r7}
90000f56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000f58:	bf00      	nop
90000f5a:	e7fd      	b.n	90000f58 <HardFault_Handler+0x4>

90000f5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
90000f5c:	b480      	push	{r7}
90000f5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90000f60:	bf00      	nop
90000f62:	e7fd      	b.n	90000f60 <MemManage_Handler+0x4>

90000f64 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000f64:	b480      	push	{r7}
90000f66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000f68:	bf00      	nop
90000f6a:	e7fd      	b.n	90000f68 <BusFault_Handler+0x4>

90000f6c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000f6c:	b480      	push	{r7}
90000f6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90000f70:	bf00      	nop
90000f72:	e7fd      	b.n	90000f70 <UsageFault_Handler+0x4>

90000f74 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
90000f74:	b480      	push	{r7}
90000f76:	af00      	add	r7, sp, #0
}
90000f78:	bf00      	nop
90000f7a:	46bd      	mov	sp, r7
90000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f80:	4770      	bx	lr

90000f82 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
90000f82:	b480      	push	{r7}
90000f84:	af00      	add	r7, sp, #0
}
90000f86:	bf00      	nop
90000f88:	46bd      	mov	sp, r7
90000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f8e:	4770      	bx	lr

90000f90 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000f90:	b480      	push	{r7}
90000f92:	af00      	add	r7, sp, #0
}
90000f94:	bf00      	nop
90000f96:	46bd      	mov	sp, r7
90000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f9c:	4770      	bx	lr

90000f9e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000f9e:	b580      	push	{r7, lr}
90000fa0:	af00      	add	r7, sp, #0
  HAL_IncTick();
90000fa2:	f002 f907 	bl	900031b4 <HAL_IncTick>
}
90000fa6:	bf00      	nop
90000fa8:	bd80      	pop	{r7, pc}
	...

90000fac <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90000fac:	b580      	push	{r7, lr}
90000fae:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000fb0:	4802      	ldr	r0, [pc, #8]	@ (90000fbc <OTG_FS_IRQHandler+0x10>)
90000fb2:	f002 ff9e 	bl	90003ef2 <HAL_HCD_IRQHandler>
}
90000fb6:	bf00      	nop
90000fb8:	bd80      	pop	{r7, pc}
90000fba:	bf00      	nop
90000fbc:	2000024c 	.word	0x2000024c

90000fc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000fc0:	b580      	push	{r7, lr}
90000fc2:	b086      	sub	sp, #24
90000fc4:	af00      	add	r7, sp, #0
90000fc6:	60f8      	str	r0, [r7, #12]
90000fc8:	60b9      	str	r1, [r7, #8]
90000fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fcc:	2300      	movs	r3, #0
90000fce:	617b      	str	r3, [r7, #20]
90000fd0:	e00a      	b.n	90000fe8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
90000fd2:	f3af 8000 	nop.w
90000fd6:	4601      	mov	r1, r0
90000fd8:	68bb      	ldr	r3, [r7, #8]
90000fda:	1c5a      	adds	r2, r3, #1
90000fdc:	60ba      	str	r2, [r7, #8]
90000fde:	b2ca      	uxtb	r2, r1
90000fe0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000fe2:	697b      	ldr	r3, [r7, #20]
90000fe4:	3301      	adds	r3, #1
90000fe6:	617b      	str	r3, [r7, #20]
90000fe8:	697a      	ldr	r2, [r7, #20]
90000fea:	687b      	ldr	r3, [r7, #4]
90000fec:	429a      	cmp	r2, r3
90000fee:	dbf0      	blt.n	90000fd2 <_read+0x12>
  }

  return len;
90000ff0:	687b      	ldr	r3, [r7, #4]
}
90000ff2:	4618      	mov	r0, r3
90000ff4:	3718      	adds	r7, #24
90000ff6:	46bd      	mov	sp, r7
90000ff8:	bd80      	pop	{r7, pc}

90000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90000ffa:	b580      	push	{r7, lr}
90000ffc:	b086      	sub	sp, #24
90000ffe:	af00      	add	r7, sp, #0
90001000:	60f8      	str	r0, [r7, #12]
90001002:	60b9      	str	r1, [r7, #8]
90001004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
90001006:	2300      	movs	r3, #0
90001008:	617b      	str	r3, [r7, #20]
9000100a:	e009      	b.n	90001020 <_write+0x26>
  {
    __io_putchar(*ptr++);
9000100c:	68bb      	ldr	r3, [r7, #8]
9000100e:	1c5a      	adds	r2, r3, #1
90001010:	60ba      	str	r2, [r7, #8]
90001012:	781b      	ldrb	r3, [r3, #0]
90001014:	4618      	mov	r0, r3
90001016:	f7ff fcc7 	bl	900009a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
9000101a:	697b      	ldr	r3, [r7, #20]
9000101c:	3301      	adds	r3, #1
9000101e:	617b      	str	r3, [r7, #20]
90001020:	697a      	ldr	r2, [r7, #20]
90001022:	687b      	ldr	r3, [r7, #4]
90001024:	429a      	cmp	r2, r3
90001026:	dbf1      	blt.n	9000100c <_write+0x12>
  }
  return len;
90001028:	687b      	ldr	r3, [r7, #4]
}
9000102a:	4618      	mov	r0, r3
9000102c:	3718      	adds	r7, #24
9000102e:	46bd      	mov	sp, r7
90001030:	bd80      	pop	{r7, pc}

90001032 <_close>:

int _close(int file)
{
90001032:	b480      	push	{r7}
90001034:	b083      	sub	sp, #12
90001036:	af00      	add	r7, sp, #0
90001038:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
9000103a:	f04f 33ff 	mov.w	r3, #4294967295
}
9000103e:	4618      	mov	r0, r3
90001040:	370c      	adds	r7, #12
90001042:	46bd      	mov	sp, r7
90001044:	f85d 7b04 	ldr.w	r7, [sp], #4
90001048:	4770      	bx	lr

9000104a <_fstat>:


int _fstat(int file, struct stat *st)
{
9000104a:	b480      	push	{r7}
9000104c:	b083      	sub	sp, #12
9000104e:	af00      	add	r7, sp, #0
90001050:	6078      	str	r0, [r7, #4]
90001052:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90001054:	683b      	ldr	r3, [r7, #0]
90001056:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
9000105a:	605a      	str	r2, [r3, #4]
  return 0;
9000105c:	2300      	movs	r3, #0
}
9000105e:	4618      	mov	r0, r3
90001060:	370c      	adds	r7, #12
90001062:	46bd      	mov	sp, r7
90001064:	f85d 7b04 	ldr.w	r7, [sp], #4
90001068:	4770      	bx	lr

9000106a <_isatty>:

int _isatty(int file)
{
9000106a:	b480      	push	{r7}
9000106c:	b083      	sub	sp, #12
9000106e:	af00      	add	r7, sp, #0
90001070:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
90001072:	2301      	movs	r3, #1
}
90001074:	4618      	mov	r0, r3
90001076:	370c      	adds	r7, #12
90001078:	46bd      	mov	sp, r7
9000107a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000107e:	4770      	bx	lr

90001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001080:	b480      	push	{r7}
90001082:	b085      	sub	sp, #20
90001084:	af00      	add	r7, sp, #0
90001086:	60f8      	str	r0, [r7, #12]
90001088:	60b9      	str	r1, [r7, #8]
9000108a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
9000108c:	2300      	movs	r3, #0
}
9000108e:	4618      	mov	r0, r3
90001090:	3714      	adds	r7, #20
90001092:	46bd      	mov	sp, r7
90001094:	f85d 7b04 	ldr.w	r7, [sp], #4
90001098:	4770      	bx	lr
	...

9000109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
9000109c:	b580      	push	{r7, lr}
9000109e:	b086      	sub	sp, #24
900010a0:	af00      	add	r7, sp, #0
900010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900010a4:	4a14      	ldr	r2, [pc, #80]	@ (900010f8 <_sbrk+0x5c>)
900010a6:	4b15      	ldr	r3, [pc, #84]	@ (900010fc <_sbrk+0x60>)
900010a8:	1ad3      	subs	r3, r2, r3
900010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
900010ac:	697b      	ldr	r3, [r7, #20]
900010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
900010b0:	4b13      	ldr	r3, [pc, #76]	@ (90001100 <_sbrk+0x64>)
900010b2:	681b      	ldr	r3, [r3, #0]
900010b4:	2b00      	cmp	r3, #0
900010b6:	d102      	bne.n	900010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900010b8:	4b11      	ldr	r3, [pc, #68]	@ (90001100 <_sbrk+0x64>)
900010ba:	4a12      	ldr	r2, [pc, #72]	@ (90001104 <_sbrk+0x68>)
900010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900010be:	4b10      	ldr	r3, [pc, #64]	@ (90001100 <_sbrk+0x64>)
900010c0:	681a      	ldr	r2, [r3, #0]
900010c2:	687b      	ldr	r3, [r7, #4]
900010c4:	4413      	add	r3, r2
900010c6:	693a      	ldr	r2, [r7, #16]
900010c8:	429a      	cmp	r2, r3
900010ca:	d207      	bcs.n	900010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
900010cc:	f00b fb86 	bl	9000c7dc <__errno>
900010d0:	4603      	mov	r3, r0
900010d2:	220c      	movs	r2, #12
900010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900010d6:	f04f 33ff 	mov.w	r3, #4294967295
900010da:	e009      	b.n	900010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900010dc:	4b08      	ldr	r3, [pc, #32]	@ (90001100 <_sbrk+0x64>)
900010de:	681b      	ldr	r3, [r3, #0]
900010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900010e2:	4b07      	ldr	r3, [pc, #28]	@ (90001100 <_sbrk+0x64>)
900010e4:	681a      	ldr	r2, [r3, #0]
900010e6:	687b      	ldr	r3, [r7, #4]
900010e8:	4413      	add	r3, r2
900010ea:	4a05      	ldr	r2, [pc, #20]	@ (90001100 <_sbrk+0x64>)
900010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
900010ee:	68fb      	ldr	r3, [r7, #12]
}
900010f0:	4618      	mov	r0, r3
900010f2:	3718      	adds	r7, #24
900010f4:	46bd      	mov	sp, r7
900010f6:	bd80      	pop	{r7, pc}
900010f8:	20020000 	.word	0x20020000
900010fc:	00001000 	.word	0x00001000
90001100:	20000248 	.word	0x20000248
90001104:	200014a0 	.word	0x200014a0

90001108 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
90001108:	b580      	push	{r7, lr}
9000110a:	b082      	sub	sp, #8
9000110c:	af00      	add	r7, sp, #0
9000110e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
90001110:	687b      	ldr	r3, [r7, #4]
90001112:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001116:	4618      	mov	r0, r3
90001118:	f00a fc28 	bl	9000b96c <USBH_LL_IncTimer>
}
9000111c:	bf00      	nop
9000111e:	3708      	adds	r7, #8
90001120:	46bd      	mov	sp, r7
90001122:	bd80      	pop	{r7, pc}

90001124 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90001124:	b580      	push	{r7, lr}
90001126:	b082      	sub	sp, #8
90001128:	af00      	add	r7, sp, #0
9000112a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
9000112c:	687b      	ldr	r3, [r7, #4]
9000112e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001132:	4618      	mov	r0, r3
90001134:	f00a fc64 	bl	9000ba00 <USBH_LL_Connect>
}
90001138:	bf00      	nop
9000113a:	3708      	adds	r7, #8
9000113c:	46bd      	mov	sp, r7
9000113e:	bd80      	pop	{r7, pc}

90001140 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90001140:	b580      	push	{r7, lr}
90001142:	b082      	sub	sp, #8
90001144:	af00      	add	r7, sp, #0
90001146:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90001148:	687b      	ldr	r3, [r7, #4]
9000114a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000114e:	4618      	mov	r0, r3
90001150:	f00a fc6d 	bl	9000ba2e <USBH_LL_Disconnect>
}
90001154:	bf00      	nop
90001156:	3708      	adds	r7, #8
90001158:	46bd      	mov	sp, r7
9000115a:	bd80      	pop	{r7, pc}

9000115c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
9000115c:	b580      	push	{r7, lr}
9000115e:	b082      	sub	sp, #8
90001160:	af00      	add	r7, sp, #0
90001162:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90001164:	687b      	ldr	r3, [r7, #4]
90001166:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
9000116a:	4618      	mov	r0, r3
9000116c:	f00a fc28 	bl	9000b9c0 <USBH_LL_PortEnabled>
}
90001170:	bf00      	nop
90001172:	3708      	adds	r7, #8
90001174:	46bd      	mov	sp, r7
90001176:	bd80      	pop	{r7, pc}

90001178 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90001178:	b580      	push	{r7, lr}
9000117a:	b082      	sub	sp, #8
9000117c:	af00      	add	r7, sp, #0
9000117e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90001180:	687b      	ldr	r3, [r7, #4]
90001182:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
90001186:	4618      	mov	r0, r3
90001188:	f00a fc28 	bl	9000b9dc <USBH_LL_PortDisabled>
}
9000118c:	bf00      	nop
9000118e:	3708      	adds	r7, #8
90001190:	46bd      	mov	sp, r7
90001192:	bd80      	pop	{r7, pc}

90001194 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90001194:	b480      	push	{r7}
90001196:	b083      	sub	sp, #12
90001198:	af00      	add	r7, sp, #0
9000119a:	6078      	str	r0, [r7, #4]
9000119c:	460b      	mov	r3, r1
9000119e:	70fb      	strb	r3, [r7, #3]
900011a0:	4613      	mov	r3, r2
900011a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
900011a4:	bf00      	nop
900011a6:	370c      	adds	r7, #12
900011a8:	46bd      	mov	sp, r7
900011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900011ae:	4770      	bx	lr

900011b0 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
900011b0:	b580      	push	{r7, lr}
900011b2:	b082      	sub	sp, #8
900011b4:	af00      	add	r7, sp, #0
900011b6:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
900011b8:	687b      	ldr	r3, [r7, #4]
900011ba:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
900011be:	4618      	mov	r0, r3
900011c0:	f002 ffa7 	bl	90004112 <HAL_HCD_Stop>
  return USBH_OK;
900011c4:	2300      	movs	r3, #0
}
900011c6:	4618      	mov	r0, r3
900011c8:	3708      	adds	r7, #8
900011ca:	46bd      	mov	sp, r7
900011cc:	bd80      	pop	{r7, pc}
	...

900011d0 <Draw_Menu>:
#include "display.h"

uint32_t x_size, y_size;

void Draw_Menu(void)
{
900011d0:	b580      	push	{r7, lr}
900011d2:	b082      	sub	sp, #8
900011d4:	af00      	add	r7, sp, #0
  UTIL_LCD_SetLayer(0);
900011d6:	2000      	movs	r0, #0
900011d8:	f00a fcc4 	bl	9000bb64 <UTIL_LCD_SetLayer>

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
900011dc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900011e0:	f00a fd36 	bl	9000bc50 <UTIL_LCD_Clear>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
900011e4:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
900011e8:	f00a fcda 	bl	9000bba0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
900011ec:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
900011f0:	f00a fcea 	bl	9000bbc8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font32);
900011f4:	480c      	ldr	r0, [pc, #48]	@ (90001228 <Draw_Menu+0x58>)
900011f6:	f00a fcfb 	bl	9000bbf0 <UTIL_LCD_SetFont>
  for (int i = 0; i < 8; i++) {
900011fa:	2300      	movs	r3, #0
900011fc:	607b      	str	r3, [r7, #4]
900011fe:	e00a      	b.n	90001216 <Draw_Menu+0x46>
	  UTIL_LCD_DisplayStringAt(0, i * 32, (uint8_t *)"Bumbajs ubumbananej3", LEFT_MODE);
90001200:	687b      	ldr	r3, [r7, #4]
90001202:	015b      	lsls	r3, r3, #5
90001204:	4619      	mov	r1, r3
90001206:	2303      	movs	r3, #3
90001208:	4a08      	ldr	r2, [pc, #32]	@ (9000122c <Draw_Menu+0x5c>)
9000120a:	2000      	movs	r0, #0
9000120c:	f00a fd6c 	bl	9000bce8 <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 8; i++) {
90001210:	687b      	ldr	r3, [r7, #4]
90001212:	3301      	adds	r3, #1
90001214:	607b      	str	r3, [r7, #4]
90001216:	687b      	ldr	r3, [r7, #4]
90001218:	2b07      	cmp	r3, #7
9000121a:	ddf1      	ble.n	90001200 <Draw_Menu+0x30>
  }
}
9000121c:	bf00      	nop
9000121e:	bf00      	nop
90001220:	3708      	adds	r7, #8
90001222:	46bd      	mov	sp, r7
90001224:	bd80      	pop	{r7, pc}
90001226:	bf00      	nop
90001228:	20000070 	.word	0x20000070
9000122c:	9000d4f8 	.word	0x9000d4f8

90001230 <InitializeLcd>:

void InitializeLcd(void)
{
90001230:	b580      	push	{r7, lr}
90001232:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
90001234:	2101      	movs	r1, #1
90001236:	2000      	movs	r0, #0
90001238:	f000 fe68 	bl	90001f0c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
9000123c:	4809      	ldr	r0, [pc, #36]	@ (90001264 <InitializeLcd+0x34>)
9000123e:	f00a fc3b 	bl	9000bab8 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
90001242:	2000      	movs	r0, #0
90001244:	f00a fc8e 	bl	9000bb64 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
90001248:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
9000124c:	f00a fd00 	bl	9000bc50 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
90001250:	4905      	ldr	r1, [pc, #20]	@ (90001268 <InitializeLcd+0x38>)
90001252:	2000      	movs	r0, #0
90001254:	f001 f814 	bl	90002280 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90001258:	4904      	ldr	r1, [pc, #16]	@ (9000126c <InitializeLcd+0x3c>)
9000125a:	2000      	movs	r0, #0
9000125c:	f001 f82e 	bl	900022bc <BSP_LCD_GetYSize>
}
90001260:	bf00      	nop
90001262:	bd80      	pop	{r7, pc}
90001264:	9000d64c 	.word	0x9000d64c
90001268:	2000062c 	.word	0x2000062c
9000126c:	20000630 	.word	0x20000630

90001270 <uartSetCursorPosition>:

void uartSetCursorPosition(int row, int col) {
90001270:	b580      	push	{r7, lr}
90001272:	b082      	sub	sp, #8
90001274:	af00      	add	r7, sp, #0
90001276:	6078      	str	r0, [r7, #4]
90001278:	6039      	str	r1, [r7, #0]
  printf("\033[%d;%dH", row, col);
9000127a:	683a      	ldr	r2, [r7, #0]
9000127c:	6879      	ldr	r1, [r7, #4]
9000127e:	4803      	ldr	r0, [pc, #12]	@ (9000128c <uartSetCursorPosition+0x1c>)
90001280:	f00b f8e4 	bl	9000c44c <iprintf>
}
90001284:	bf00      	nop
90001286:	3708      	adds	r7, #8
90001288:	46bd      	mov	sp, r7
9000128a:	bd80      	pop	{r7, pc}
9000128c:	9000d510 	.word	0x9000d510

90001290 <uartClearScreen>:

void uartClearScreen() {
90001290:	b580      	push	{r7, lr}
90001292:	af00      	add	r7, sp, #0
  printf("\033[2J");
90001294:	4803      	ldr	r0, [pc, #12]	@ (900012a4 <uartClearScreen+0x14>)
90001296:	f00b f8d9 	bl	9000c44c <iprintf>
  printf("\033[H"); // Move cursor to top-left corner
9000129a:	4803      	ldr	r0, [pc, #12]	@ (900012a8 <uartClearScreen+0x18>)
9000129c:	f00b f8d6 	bl	9000c44c <iprintf>
}
900012a0:	bf00      	nop
900012a2:	bd80      	pop	{r7, pc}
900012a4:	9000d51c 	.word	0x9000d51c
900012a8:	9000d524 	.word	0x9000d524

900012ac <UartRenderState>:

void UartRenderState(AppContext *ctx) {
900012ac:	b580      	push	{r7, lr}
900012ae:	b082      	sub	sp, #8
900012b0:	af00      	add	r7, sp, #0
900012b2:	6078      	str	r0, [r7, #4]
  uartClearScreen();
900012b4:	f7ff ffec 	bl	90001290 <uartClearScreen>
  uartSetCursorPosition(1, 1);
900012b8:	2101      	movs	r1, #1
900012ba:	2001      	movs	r0, #1
900012bc:	f7ff ffd8 	bl	90001270 <uartSetCursorPosition>
  if (ctx->currentState == STATE_F1) {
900012c0:	687b      	ldr	r3, [r7, #4]
900012c2:	781b      	ldrb	r3, [r3, #0]
900012c4:	2b00      	cmp	r3, #0
900012c6:	d139      	bne.n	9000133c <UartRenderState+0x90>
    printf("Voltage control");
900012c8:	4820      	ldr	r0, [pc, #128]	@ (9000134c <UartRenderState+0xa0>)
900012ca:	f00b f8bf 	bl	9000c44c <iprintf>
    uartSetCursorPosition(2, 1);
900012ce:	2101      	movs	r1, #1
900012d0:	2002      	movs	r0, #2
900012d2:	f7ff ffcd 	bl	90001270 <uartSetCursorPosition>
    printf("Current input: %d", ctx->inputValue);
900012d6:	687b      	ldr	r3, [r7, #4]
900012d8:	889b      	ldrh	r3, [r3, #4]
900012da:	4619      	mov	r1, r3
900012dc:	481c      	ldr	r0, [pc, #112]	@ (90001350 <UartRenderState+0xa4>)
900012de:	f00b f8b5 	bl	9000c44c <iprintf>
    uartSetCursorPosition(3, 1);
900012e2:	2101      	movs	r1, #1
900012e4:	2003      	movs	r0, #3
900012e6:	f7ff ffc3 	bl	90001270 <uartSetCursorPosition>
    if (ctx->voltage > 0) {
900012ea:	687b      	ldr	r3, [r7, #4]
900012ec:	885b      	ldrh	r3, [r3, #2]
900012ee:	2b00      	cmp	r3, #0
900012f0:	d006      	beq.n	90001300 <UartRenderState+0x54>
      printf("Voltage: %dV", ctx->voltage);
900012f2:	687b      	ldr	r3, [r7, #4]
900012f4:	885b      	ldrh	r3, [r3, #2]
900012f6:	4619      	mov	r1, r3
900012f8:	4816      	ldr	r0, [pc, #88]	@ (90001354 <UartRenderState+0xa8>)
900012fa:	f00b f8a7 	bl	9000c44c <iprintf>
900012fe:	e002      	b.n	90001306 <UartRenderState+0x5a>
    } else {
      printf("Voltage: N/A");
90001300:	4815      	ldr	r0, [pc, #84]	@ (90001358 <UartRenderState+0xac>)
90001302:	f00b f8a3 	bl	9000c44c <iprintf>
    }
    uartSetCursorPosition(4, 1);
90001306:	2101      	movs	r1, #1
90001308:	2004      	movs	r0, #4
9000130a:	f7ff ffb1 	bl	90001270 <uartSetCursorPosition>
    if (ctx->isPwmRunning == true) {
9000130e:	687b      	ldr	r3, [r7, #4]
90001310:	79db      	ldrb	r3, [r3, #7]
90001312:	2b00      	cmp	r3, #0
90001314:	d006      	beq.n	90001324 <UartRenderState+0x78>
      printf("PWM is running at %dV", ctx->voltage);
90001316:	687b      	ldr	r3, [r7, #4]
90001318:	885b      	ldrh	r3, [r3, #2]
9000131a:	4619      	mov	r1, r3
9000131c:	480f      	ldr	r0, [pc, #60]	@ (9000135c <UartRenderState+0xb0>)
9000131e:	f00b f895 	bl	9000c44c <iprintf>
90001322:	e002      	b.n	9000132a <UartRenderState+0x7e>
    } else {
      printf("PWM is OFF");
90001324:	480e      	ldr	r0, [pc, #56]	@ (90001360 <UartRenderState+0xb4>)
90001326:	f00b f891 	bl	9000c44c <iprintf>
    }
    uartSetCursorPosition(5, 1);
9000132a:	2101      	movs	r1, #1
9000132c:	2005      	movs	r0, #5
9000132e:	f7ff ff9f 	bl	90001270 <uartSetCursorPosition>
    printf(ctx->message);
90001332:	687b      	ldr	r3, [r7, #4]
90001334:	3308      	adds	r3, #8
90001336:	4618      	mov	r0, r3
90001338:	f00b f888 	bl	9000c44c <iprintf>
  }

  uartSetCursorPosition(7, 1);
9000133c:	2101      	movs	r1, #1
9000133e:	2007      	movs	r0, #7
90001340:	f7ff ff96 	bl	90001270 <uartSetCursorPosition>
}
90001344:	bf00      	nop
90001346:	3708      	adds	r7, #8
90001348:	46bd      	mov	sp, r7
9000134a:	bd80      	pop	{r7, pc}
9000134c:	9000d528 	.word	0x9000d528
90001350:	9000d538 	.word	0x9000d538
90001354:	9000d54c 	.word	0x9000d54c
90001358:	9000d55c 	.word	0x9000d55c
9000135c:	9000d56c 	.word	0x9000d56c
90001360:	9000d584 	.word	0x9000d584

90001364 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90001364:	b580      	push	{r7, lr}
90001366:	b084      	sub	sp, #16
90001368:	af00      	add	r7, sp, #0
9000136a:	6078      	str	r0, [r7, #4]
9000136c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
9000136e:	687b      	ldr	r3, [r7, #4]
90001370:	2b00      	cmp	r3, #0
90001372:	d103      	bne.n	9000137c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90001374:	f04f 33ff 	mov.w	r3, #4294967295
90001378:	60fb      	str	r3, [r7, #12]
9000137a:	e02c      	b.n	900013d6 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
9000137c:	683b      	ldr	r3, [r7, #0]
9000137e:	681a      	ldr	r2, [r3, #0]
90001380:	687b      	ldr	r3, [r7, #4]
90001382:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90001384:	683b      	ldr	r3, [r7, #0]
90001386:	685a      	ldr	r2, [r3, #4]
90001388:	687b      	ldr	r3, [r7, #4]
9000138a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
9000138c:	683b      	ldr	r3, [r7, #0]
9000138e:	891a      	ldrh	r2, [r3, #8]
90001390:	687b      	ldr	r3, [r7, #4]
90001392:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90001394:	683b      	ldr	r3, [r7, #0]
90001396:	68da      	ldr	r2, [r3, #12]
90001398:	687b      	ldr	r3, [r7, #4]
9000139a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
9000139c:	683b      	ldr	r3, [r7, #0]
9000139e:	691a      	ldr	r2, [r3, #16]
900013a0:	687b      	ldr	r3, [r7, #4]
900013a2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
900013a4:	683b      	ldr	r3, [r7, #0]
900013a6:	695a      	ldr	r2, [r3, #20]
900013a8:	687b      	ldr	r3, [r7, #4]
900013aa:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
900013ac:	687b      	ldr	r3, [r7, #4]
900013ae:	4a0c      	ldr	r2, [pc, #48]	@ (900013e0 <FT5336_RegisterBusIO+0x7c>)
900013b0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900013b2:	687b      	ldr	r3, [r7, #4]
900013b4:	4a0b      	ldr	r2, [pc, #44]	@ (900013e4 <FT5336_RegisterBusIO+0x80>)
900013b6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
900013b8:	687b      	ldr	r3, [r7, #4]
900013ba:	687a      	ldr	r2, [r7, #4]
900013bc:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
900013be:	687b      	ldr	r3, [r7, #4]
900013c0:	681b      	ldr	r3, [r3, #0]
900013c2:	2b00      	cmp	r3, #0
900013c4:	d004      	beq.n	900013d0 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
900013c6:	687b      	ldr	r3, [r7, #4]
900013c8:	681b      	ldr	r3, [r3, #0]
900013ca:	4798      	blx	r3
900013cc:	60f8      	str	r0, [r7, #12]
900013ce:	e002      	b.n	900013d6 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
900013d0:	f04f 33ff 	mov.w	r3, #4294967295
900013d4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
900013d6:	68fb      	ldr	r3, [r7, #12]
}
900013d8:	4618      	mov	r0, r3
900013da:	3710      	adds	r7, #16
900013dc:	46bd      	mov	sp, r7
900013de:	bd80      	pop	{r7, pc}
900013e0:	90001409 	.word	0x90001409
900013e4:	9000143d 	.word	0x9000143d

900013e8 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
900013e8:	b580      	push	{r7, lr}
900013ea:	b082      	sub	sp, #8
900013ec:	af00      	add	r7, sp, #0
900013ee:	6078      	str	r0, [r7, #4]
900013f0:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900013f2:	687b      	ldr	r3, [r7, #4]
900013f4:	3318      	adds	r3, #24
900013f6:	6839      	ldr	r1, [r7, #0]
900013f8:	4618      	mov	r0, r3
900013fa:	f000 f850 	bl	9000149e <ft5336_chip_id>
900013fe:	4603      	mov	r3, r0
}
90001400:	4618      	mov	r0, r3
90001402:	3708      	adds	r7, #8
90001404:	46bd      	mov	sp, r7
90001406:	bd80      	pop	{r7, pc}

90001408 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90001408:	b590      	push	{r4, r7, lr}
9000140a:	b087      	sub	sp, #28
9000140c:	af00      	add	r7, sp, #0
9000140e:	60f8      	str	r0, [r7, #12]
90001410:	607a      	str	r2, [r7, #4]
90001412:	461a      	mov	r2, r3
90001414:	460b      	mov	r3, r1
90001416:	72fb      	strb	r3, [r7, #11]
90001418:	4613      	mov	r3, r2
9000141a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
9000141c:	68fb      	ldr	r3, [r7, #12]
9000141e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90001420:	697b      	ldr	r3, [r7, #20]
90001422:	691c      	ldr	r4, [r3, #16]
90001424:	697b      	ldr	r3, [r7, #20]
90001426:	8918      	ldrh	r0, [r3, #8]
90001428:	7afb      	ldrb	r3, [r7, #11]
9000142a:	b299      	uxth	r1, r3
9000142c:	893b      	ldrh	r3, [r7, #8]
9000142e:	687a      	ldr	r2, [r7, #4]
90001430:	47a0      	blx	r4
90001432:	4603      	mov	r3, r0
}
90001434:	4618      	mov	r0, r3
90001436:	371c      	adds	r7, #28
90001438:	46bd      	mov	sp, r7
9000143a:	bd90      	pop	{r4, r7, pc}

9000143c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000143c:	b590      	push	{r4, r7, lr}
9000143e:	b087      	sub	sp, #28
90001440:	af00      	add	r7, sp, #0
90001442:	60f8      	str	r0, [r7, #12]
90001444:	607a      	str	r2, [r7, #4]
90001446:	461a      	mov	r2, r3
90001448:	460b      	mov	r3, r1
9000144a:	72fb      	strb	r3, [r7, #11]
9000144c:	4613      	mov	r3, r2
9000144e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90001450:	68fb      	ldr	r3, [r7, #12]
90001452:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90001454:	697b      	ldr	r3, [r7, #20]
90001456:	68dc      	ldr	r4, [r3, #12]
90001458:	697b      	ldr	r3, [r7, #20]
9000145a:	8918      	ldrh	r0, [r3, #8]
9000145c:	7afb      	ldrb	r3, [r7, #11]
9000145e:	b299      	uxth	r1, r3
90001460:	893b      	ldrh	r3, [r7, #8]
90001462:	687a      	ldr	r2, [r7, #4]
90001464:	47a0      	blx	r4
90001466:	4603      	mov	r3, r0
}
90001468:	4618      	mov	r0, r3
9000146a:	371c      	adds	r7, #28
9000146c:	46bd      	mov	sp, r7
9000146e:	bd90      	pop	{r4, r7, pc}

90001470 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90001470:	b590      	push	{r4, r7, lr}
90001472:	b085      	sub	sp, #20
90001474:	af00      	add	r7, sp, #0
90001476:	60f8      	str	r0, [r7, #12]
90001478:	607a      	str	r2, [r7, #4]
9000147a:	461a      	mov	r2, r3
9000147c:	460b      	mov	r3, r1
9000147e:	72fb      	strb	r3, [r7, #11]
90001480:	4613      	mov	r3, r2
90001482:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90001484:	68fb      	ldr	r3, [r7, #12]
90001486:	685c      	ldr	r4, [r3, #4]
90001488:	68fb      	ldr	r3, [r7, #12]
9000148a:	6898      	ldr	r0, [r3, #8]
9000148c:	893b      	ldrh	r3, [r7, #8]
9000148e:	7af9      	ldrb	r1, [r7, #11]
90001490:	687a      	ldr	r2, [r7, #4]
90001492:	47a0      	blx	r4
90001494:	4603      	mov	r3, r0
}
90001496:	4618      	mov	r0, r3
90001498:	3714      	adds	r7, #20
9000149a:	46bd      	mov	sp, r7
9000149c:	bd90      	pop	{r4, r7, pc}

9000149e <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
9000149e:	b580      	push	{r7, lr}
900014a0:	b084      	sub	sp, #16
900014a2:	af00      	add	r7, sp, #0
900014a4:	6078      	str	r0, [r7, #4]
900014a6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
900014a8:	2301      	movs	r3, #1
900014aa:	683a      	ldr	r2, [r7, #0]
900014ac:	21a8      	movs	r1, #168	@ 0xa8
900014ae:	6878      	ldr	r0, [r7, #4]
900014b0:	f7ff ffde 	bl	90001470 <ft5336_read_reg>
900014b4:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
900014b6:	68fb      	ldr	r3, [r7, #12]
900014b8:	2b00      	cmp	r3, #0
900014ba:	d107      	bne.n	900014cc <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
900014bc:	683b      	ldr	r3, [r7, #0]
900014be:	781a      	ldrb	r2, [r3, #0]
900014c0:	683b      	ldr	r3, [r7, #0]
900014c2:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
900014c4:	683b      	ldr	r3, [r7, #0]
900014c6:	781a      	ldrb	r2, [r3, #0]
900014c8:	683b      	ldr	r3, [r7, #0]
900014ca:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
900014cc:	68fb      	ldr	r3, [r7, #12]
}
900014ce:	4618      	mov	r0, r3
900014d0:	3710      	adds	r7, #16
900014d2:	46bd      	mov	sp, r7
900014d4:	bd80      	pop	{r7, pc}

900014d6 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900014d6:	b580      	push	{r7, lr}
900014d8:	b084      	sub	sp, #16
900014da:	af00      	add	r7, sp, #0
900014dc:	6078      	str	r0, [r7, #4]
900014de:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
900014e0:	f04f 33ff 	mov.w	r3, #4294967295
900014e4:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900014e6:	683b      	ldr	r3, [r7, #0]
900014e8:	681b      	ldr	r3, [r3, #0]
900014ea:	4619      	mov	r1, r3
900014ec:	6878      	ldr	r0, [r7, #4]
900014ee:	f000 f831 	bl	90001554 <MT48LC4M32B2_ClockEnable>
900014f2:	4603      	mov	r3, r0
900014f4:	2b00      	cmp	r3, #0
900014f6:	d128      	bne.n	9000154a <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
900014f8:	2001      	movs	r0, #1
900014fa:	f000 f8e1 	bl	900016c0 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900014fe:	683b      	ldr	r3, [r7, #0]
90001500:	681b      	ldr	r3, [r3, #0]
90001502:	4619      	mov	r1, r3
90001504:	6878      	ldr	r0, [r7, #4]
90001506:	f000 f849 	bl	9000159c <MT48LC4M32B2_Precharge>
9000150a:	4603      	mov	r3, r0
9000150c:	2b00      	cmp	r3, #0
9000150e:	d11c      	bne.n	9000154a <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
90001510:	683b      	ldr	r3, [r7, #0]
90001512:	6819      	ldr	r1, [r3, #0]
90001514:	683b      	ldr	r3, [r7, #0]
90001516:	685b      	ldr	r3, [r3, #4]
90001518:	461a      	mov	r2, r3
9000151a:	6878      	ldr	r0, [r7, #4]
9000151c:	f000 f896 	bl	9000164c <MT48LC4M32B2_RefreshMode>
90001520:	4603      	mov	r3, r0
90001522:	2b00      	cmp	r3, #0
90001524:	d111      	bne.n	9000154a <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
90001526:	6839      	ldr	r1, [r7, #0]
90001528:	6878      	ldr	r0, [r7, #4]
9000152a:	f000 f85b 	bl	900015e4 <MT48LC4M32B2_ModeRegConfig>
9000152e:	4603      	mov	r3, r0
90001530:	2b00      	cmp	r3, #0
90001532:	d10a      	bne.n	9000154a <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
90001534:	683b      	ldr	r3, [r7, #0]
90001536:	689b      	ldr	r3, [r3, #8]
90001538:	4619      	mov	r1, r3
9000153a:	6878      	ldr	r0, [r7, #4]
9000153c:	f000 f8ac 	bl	90001698 <MT48LC4M32B2_RefreshRate>
90001540:	4603      	mov	r3, r0
90001542:	2b00      	cmp	r3, #0
90001544:	d101      	bne.n	9000154a <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
90001546:	2300      	movs	r3, #0
90001548:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
9000154a:	68fb      	ldr	r3, [r7, #12]
}
9000154c:	4618      	mov	r0, r3
9000154e:	3710      	adds	r7, #16
90001550:	46bd      	mov	sp, r7
90001552:	bd80      	pop	{r7, pc}

90001554 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001554:	b580      	push	{r7, lr}
90001556:	b082      	sub	sp, #8
90001558:	af00      	add	r7, sp, #0
9000155a:	6078      	str	r0, [r7, #4]
9000155c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
9000155e:	4b0e      	ldr	r3, [pc, #56]	@ (90001598 <MT48LC4M32B2_ClockEnable+0x44>)
90001560:	2201      	movs	r2, #1
90001562:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001564:	4a0c      	ldr	r2, [pc, #48]	@ (90001598 <MT48LC4M32B2_ClockEnable+0x44>)
90001566:	683b      	ldr	r3, [r7, #0]
90001568:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000156a:	4b0b      	ldr	r3, [pc, #44]	@ (90001598 <MT48LC4M32B2_ClockEnable+0x44>)
9000156c:	2201      	movs	r2, #1
9000156e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001570:	4b09      	ldr	r3, [pc, #36]	@ (90001598 <MT48LC4M32B2_ClockEnable+0x44>)
90001572:	2200      	movs	r2, #0
90001574:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000157a:	4907      	ldr	r1, [pc, #28]	@ (90001598 <MT48LC4M32B2_ClockEnable+0x44>)
9000157c:	6878      	ldr	r0, [r7, #4]
9000157e:	f008 f92d 	bl	900097dc <HAL_SDRAM_SendCommand>
90001582:	4603      	mov	r3, r0
90001584:	2b00      	cmp	r3, #0
90001586:	d002      	beq.n	9000158e <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001588:	f04f 33ff 	mov.w	r3, #4294967295
9000158c:	e000      	b.n	90001590 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000158e:	2300      	movs	r3, #0
  }
}
90001590:	4618      	mov	r0, r3
90001592:	3708      	adds	r7, #8
90001594:	46bd      	mov	sp, r7
90001596:	bd80      	pop	{r7, pc}
90001598:	20000634 	.word	0x20000634

9000159c <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
9000159c:	b580      	push	{r7, lr}
9000159e:	b082      	sub	sp, #8
900015a0:	af00      	add	r7, sp, #0
900015a2:	6078      	str	r0, [r7, #4]
900015a4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900015a6:	4b0e      	ldr	r3, [pc, #56]	@ (900015e0 <MT48LC4M32B2_Precharge+0x44>)
900015a8:	2202      	movs	r2, #2
900015aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900015ac:	4a0c      	ldr	r2, [pc, #48]	@ (900015e0 <MT48LC4M32B2_Precharge+0x44>)
900015ae:	683b      	ldr	r3, [r7, #0]
900015b0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900015b2:	4b0b      	ldr	r3, [pc, #44]	@ (900015e0 <MT48LC4M32B2_Precharge+0x44>)
900015b4:	2201      	movs	r2, #1
900015b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
900015b8:	4b09      	ldr	r3, [pc, #36]	@ (900015e0 <MT48LC4M32B2_Precharge+0x44>)
900015ba:	2200      	movs	r2, #0
900015bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900015be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
900015c2:	4907      	ldr	r1, [pc, #28]	@ (900015e0 <MT48LC4M32B2_Precharge+0x44>)
900015c4:	6878      	ldr	r0, [r7, #4]
900015c6:	f008 f909 	bl	900097dc <HAL_SDRAM_SendCommand>
900015ca:	4603      	mov	r3, r0
900015cc:	2b00      	cmp	r3, #0
900015ce:	d002      	beq.n	900015d6 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
900015d0:	f04f 33ff 	mov.w	r3, #4294967295
900015d4:	e000      	b.n	900015d8 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900015d6:	2300      	movs	r3, #0
  }
}
900015d8:	4618      	mov	r0, r3
900015da:	3708      	adds	r7, #8
900015dc:	46bd      	mov	sp, r7
900015de:	bd80      	pop	{r7, pc}
900015e0:	20000634 	.word	0x20000634

900015e4 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900015e4:	b580      	push	{r7, lr}
900015e6:	b084      	sub	sp, #16
900015e8:	af00      	add	r7, sp, #0
900015ea:	6078      	str	r0, [r7, #4]
900015ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900015ee:	683b      	ldr	r3, [r7, #0]
900015f0:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
900015f2:	683b      	ldr	r3, [r7, #0]
900015f4:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900015f6:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
900015f8:	683b      	ldr	r3, [r7, #0]
900015fa:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
900015fc:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
900015fe:	683b      	ldr	r3, [r7, #0]
90001600:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
90001602:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
90001604:	683b      	ldr	r3, [r7, #0]
90001606:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001608:	4313      	orrs	r3, r2
9000160a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000160c:	4b0e      	ldr	r3, [pc, #56]	@ (90001648 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000160e:	2204      	movs	r2, #4
90001610:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
90001612:	683b      	ldr	r3, [r7, #0]
90001614:	681b      	ldr	r3, [r3, #0]
90001616:	4a0c      	ldr	r2, [pc, #48]	@ (90001648 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001618:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000161a:	4b0b      	ldr	r3, [pc, #44]	@ (90001648 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000161c:	2201      	movs	r2, #1
9000161e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001620:	4a09      	ldr	r2, [pc, #36]	@ (90001648 <MT48LC4M32B2_ModeRegConfig+0x64>)
90001622:	68fb      	ldr	r3, [r7, #12]
90001624:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
9000162a:	4907      	ldr	r1, [pc, #28]	@ (90001648 <MT48LC4M32B2_ModeRegConfig+0x64>)
9000162c:	6878      	ldr	r0, [r7, #4]
9000162e:	f008 f8d5 	bl	900097dc <HAL_SDRAM_SendCommand>
90001632:	4603      	mov	r3, r0
90001634:	2b00      	cmp	r3, #0
90001636:	d002      	beq.n	9000163e <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
90001638:	f04f 33ff 	mov.w	r3, #4294967295
9000163c:	e000      	b.n	90001640 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000163e:	2300      	movs	r3, #0
  }
}
90001640:	4618      	mov	r0, r3
90001642:	3710      	adds	r7, #16
90001644:	46bd      	mov	sp, r7
90001646:	bd80      	pop	{r7, pc}
90001648:	20000634 	.word	0x20000634

9000164c <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
9000164c:	b580      	push	{r7, lr}
9000164e:	b084      	sub	sp, #16
90001650:	af00      	add	r7, sp, #0
90001652:	60f8      	str	r0, [r7, #12]
90001654:	60b9      	str	r1, [r7, #8]
90001656:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001658:	4a0e      	ldr	r2, [pc, #56]	@ (90001694 <MT48LC4M32B2_RefreshMode+0x48>)
9000165a:	687b      	ldr	r3, [r7, #4]
9000165c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
9000165e:	4a0d      	ldr	r2, [pc, #52]	@ (90001694 <MT48LC4M32B2_RefreshMode+0x48>)
90001660:	68bb      	ldr	r3, [r7, #8]
90001662:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
90001664:	4b0b      	ldr	r3, [pc, #44]	@ (90001694 <MT48LC4M32B2_RefreshMode+0x48>)
90001666:	2208      	movs	r2, #8
90001668:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000166a:	4b0a      	ldr	r3, [pc, #40]	@ (90001694 <MT48LC4M32B2_RefreshMode+0x48>)
9000166c:	2200      	movs	r2, #0
9000166e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001670:	f64f 72ff 	movw	r2, #65535	@ 0xffff
90001674:	4907      	ldr	r1, [pc, #28]	@ (90001694 <MT48LC4M32B2_RefreshMode+0x48>)
90001676:	68f8      	ldr	r0, [r7, #12]
90001678:	f008 f8b0 	bl	900097dc <HAL_SDRAM_SendCommand>
9000167c:	4603      	mov	r3, r0
9000167e:	2b00      	cmp	r3, #0
90001680:	d002      	beq.n	90001688 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
90001682:	f04f 33ff 	mov.w	r3, #4294967295
90001686:	e000      	b.n	9000168a <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001688:	2300      	movs	r3, #0
  }
}
9000168a:	4618      	mov	r0, r3
9000168c:	3710      	adds	r7, #16
9000168e:	46bd      	mov	sp, r7
90001690:	bd80      	pop	{r7, pc}
90001692:	bf00      	nop
90001694:	20000634 	.word	0x20000634

90001698 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
90001698:	b580      	push	{r7, lr}
9000169a:	b082      	sub	sp, #8
9000169c:	af00      	add	r7, sp, #0
9000169e:	6078      	str	r0, [r7, #4]
900016a0:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
900016a2:	6839      	ldr	r1, [r7, #0]
900016a4:	6878      	ldr	r0, [r7, #4]
900016a6:	f008 f8ce 	bl	90009846 <HAL_SDRAM_ProgramRefreshRate>
900016aa:	4603      	mov	r3, r0
900016ac:	2b00      	cmp	r3, #0
900016ae:	d002      	beq.n	900016b6 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
900016b0:	f04f 33ff 	mov.w	r3, #4294967295
900016b4:	e000      	b.n	900016b8 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
900016b6:	2300      	movs	r3, #0
  }
}
900016b8:	4618      	mov	r0, r3
900016ba:	3708      	adds	r7, #8
900016bc:	46bd      	mov	sp, r7
900016be:	bd80      	pop	{r7, pc}

900016c0 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
900016c0:	b580      	push	{r7, lr}
900016c2:	b084      	sub	sp, #16
900016c4:	af00      	add	r7, sp, #0
900016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900016c8:	f001 fd88 	bl	900031dc <HAL_GetTick>
900016cc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
900016ce:	bf00      	nop
900016d0:	f001 fd84 	bl	900031dc <HAL_GetTick>
900016d4:	4602      	mov	r2, r0
900016d6:	68fb      	ldr	r3, [r7, #12]
900016d8:	1ad3      	subs	r3, r2, r3
900016da:	687a      	ldr	r2, [r7, #4]
900016dc:	429a      	cmp	r2, r3
900016de:	d8f7      	bhi.n	900016d0 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
900016e0:	2300      	movs	r3, #0
}
900016e2:	4618      	mov	r0, r3
900016e4:	3710      	adds	r7, #16
900016e6:	46bd      	mov	sp, r7
900016e8:	bd80      	pop	{r7, pc}
	...

900016ec <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
900016ec:	b580      	push	{r7, lr}
900016ee:	b08a      	sub	sp, #40	@ 0x28
900016f0:	af00      	add	r7, sp, #0
900016f2:	4603      	mov	r3, r0
900016f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
900016f6:	2300      	movs	r3, #0
900016f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
900016fa:	79fb      	ldrb	r3, [r7, #7]
900016fc:	2b00      	cmp	r3, #0
900016fe:	d10f      	bne.n	90001720 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
90001700:	4b26      	ldr	r3, [pc, #152]	@ (9000179c <BSP_LED_Init+0xb0>)
90001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001706:	4a25      	ldr	r2, [pc, #148]	@ (9000179c <BSP_LED_Init+0xb0>)
90001708:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
9000170c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001710:	4b22      	ldr	r3, [pc, #136]	@ (9000179c <BSP_LED_Init+0xb0>)
90001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
9000171a:	60fb      	str	r3, [r7, #12]
9000171c:	68fb      	ldr	r3, [r7, #12]
9000171e:	e015      	b.n	9000174c <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
90001720:	79fb      	ldrb	r3, [r7, #7]
90001722:	2b01      	cmp	r3, #1
90001724:	d10f      	bne.n	90001746 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
90001726:	4b1d      	ldr	r3, [pc, #116]	@ (9000179c <BSP_LED_Init+0xb0>)
90001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000172c:	4a1b      	ldr	r2, [pc, #108]	@ (9000179c <BSP_LED_Init+0xb0>)
9000172e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90001732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001736:	4b19      	ldr	r3, [pc, #100]	@ (9000179c <BSP_LED_Init+0xb0>)
90001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90001740:	60bb      	str	r3, [r7, #8]
90001742:	68bb      	ldr	r3, [r7, #8]
90001744:	e002      	b.n	9000174c <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001746:	f06f 0301 	mvn.w	r3, #1
9000174a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
9000174c:	79fb      	ldrb	r3, [r7, #7]
9000174e:	4a14      	ldr	r2, [pc, #80]	@ (900017a0 <BSP_LED_Init+0xb4>)
90001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001754:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
90001756:	2301      	movs	r3, #1
90001758:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
9000175a:	2301      	movs	r3, #1
9000175c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000175e:	2303      	movs	r3, #3
90001760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
90001762:	79fb      	ldrb	r3, [r7, #7]
90001764:	4a0f      	ldr	r2, [pc, #60]	@ (900017a4 <BSP_LED_Init+0xb8>)
90001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000176a:	f107 0210 	add.w	r2, r7, #16
9000176e:	4611      	mov	r1, r2
90001770:	4618      	mov	r0, r3
90001772:	f002 f9dd 	bl	90003b30 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
90001776:	79fb      	ldrb	r3, [r7, #7]
90001778:	4a0a      	ldr	r2, [pc, #40]	@ (900017a4 <BSP_LED_Init+0xb8>)
9000177a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9000177e:	79fb      	ldrb	r3, [r7, #7]
90001780:	4a07      	ldr	r2, [pc, #28]	@ (900017a0 <BSP_LED_Init+0xb4>)
90001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001786:	b29b      	uxth	r3, r3
90001788:	2201      	movs	r2, #1
9000178a:	4619      	mov	r1, r3
9000178c:	f002 fb98 	bl	90003ec0 <HAL_GPIO_WritePin>
  return ret;
90001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
90001792:	4618      	mov	r0, r3
90001794:	3728      	adds	r7, #40	@ 0x28
90001796:	46bd      	mov	sp, r7
90001798:	bd80      	pop	{r7, pc}
9000179a:	bf00      	nop
9000179c:	58024400 	.word	0x58024400
900017a0:	9000d5c0 	.word	0x9000d5c0
900017a4:	20000000 	.word	0x20000000

900017a8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
900017a8:	b580      	push	{r7, lr}
900017aa:	b082      	sub	sp, #8
900017ac:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
900017ae:	2300      	movs	r3, #0
900017b0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
900017b2:	4b16      	ldr	r3, [pc, #88]	@ (9000180c <BSP_I2C4_Init+0x64>)
900017b4:	4a16      	ldr	r2, [pc, #88]	@ (90001810 <BSP_I2C4_Init+0x68>)
900017b6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
900017b8:	4b16      	ldr	r3, [pc, #88]	@ (90001814 <BSP_I2C4_Init+0x6c>)
900017ba:	681b      	ldr	r3, [r3, #0]
900017bc:	2b00      	cmp	r3, #0
900017be:	d11f      	bne.n	90001800 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
900017c0:	4b14      	ldr	r3, [pc, #80]	@ (90001814 <BSP_I2C4_Init+0x6c>)
900017c2:	681b      	ldr	r3, [r3, #0]
900017c4:	3301      	adds	r3, #1
900017c6:	4a13      	ldr	r2, [pc, #76]	@ (90001814 <BSP_I2C4_Init+0x6c>)
900017c8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
900017ca:	4810      	ldr	r0, [pc, #64]	@ (9000180c <BSP_I2C4_Init+0x64>)
900017cc:	f004 faf8 	bl	90005dc0 <HAL_I2C_GetState>
900017d0:	4603      	mov	r3, r0
900017d2:	2b00      	cmp	r3, #0
900017d4:	d114      	bne.n	90001800 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
900017d6:	480d      	ldr	r0, [pc, #52]	@ (9000180c <BSP_I2C4_Init+0x64>)
900017d8:	f000 fb06 	bl	90001de8 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900017dc:	f006 f976 	bl	90007acc <HAL_RCC_GetPCLK2Freq>
900017e0:	4603      	mov	r3, r0
900017e2:	490d      	ldr	r1, [pc, #52]	@ (90001818 <BSP_I2C4_Init+0x70>)
900017e4:	4618      	mov	r0, r3
900017e6:	f000 f889 	bl	900018fc <I2C_GetTiming>
900017ea:	4603      	mov	r3, r0
900017ec:	4619      	mov	r1, r3
900017ee:	4807      	ldr	r0, [pc, #28]	@ (9000180c <BSP_I2C4_Init+0x64>)
900017f0:	f000 f814 	bl	9000181c <MX_I2C4_Init>
900017f4:	4603      	mov	r3, r0
900017f6:	2b00      	cmp	r3, #0
900017f8:	d002      	beq.n	90001800 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
900017fa:	f06f 0307 	mvn.w	r3, #7
900017fe:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001800:	687b      	ldr	r3, [r7, #4]
}
90001802:	4618      	mov	r0, r3
90001804:	3708      	adds	r7, #8
90001806:	46bd      	mov	sp, r7
90001808:	bd80      	pop	{r7, pc}
9000180a:	bf00      	nop
9000180c:	2000104c 	.word	0x2000104c
90001810:	58001c00 	.word	0x58001c00
90001814:	20000644 	.word	0x20000644
90001818:	000186a0 	.word	0x000186a0

9000181c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
9000181c:	b580      	push	{r7, lr}
9000181e:	b084      	sub	sp, #16
90001820:	af00      	add	r7, sp, #0
90001822:	6078      	str	r0, [r7, #4]
90001824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001826:	2300      	movs	r3, #0
90001828:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
9000182a:	687b      	ldr	r3, [r7, #4]
9000182c:	683a      	ldr	r2, [r7, #0]
9000182e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001830:	687b      	ldr	r3, [r7, #4]
90001832:	2200      	movs	r2, #0
90001834:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001836:	687b      	ldr	r3, [r7, #4]
90001838:	2201      	movs	r2, #1
9000183a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
9000183c:	687b      	ldr	r3, [r7, #4]
9000183e:	2200      	movs	r2, #0
90001840:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001842:	687b      	ldr	r3, [r7, #4]
90001844:	2200      	movs	r2, #0
90001846:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001848:	687b      	ldr	r3, [r7, #4]
9000184a:	2200      	movs	r2, #0
9000184c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
9000184e:	687b      	ldr	r3, [r7, #4]
90001850:	2200      	movs	r2, #0
90001852:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001854:	687b      	ldr	r3, [r7, #4]
90001856:	2200      	movs	r2, #0
90001858:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
9000185a:	6878      	ldr	r0, [r7, #4]
9000185c:	f004 f8f0 	bl	90005a40 <HAL_I2C_Init>
90001860:	4603      	mov	r3, r0
90001862:	2b00      	cmp	r3, #0
90001864:	d002      	beq.n	9000186c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001866:	2301      	movs	r3, #1
90001868:	73fb      	strb	r3, [r7, #15]
9000186a:	e014      	b.n	90001896 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
9000186c:	2300      	movs	r3, #0
9000186e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001870:	68b9      	ldr	r1, [r7, #8]
90001872:	6878      	ldr	r0, [r7, #4]
90001874:	f004 fd2c 	bl	900062d0 <HAL_I2CEx_ConfigAnalogFilter>
90001878:	4603      	mov	r3, r0
9000187a:	2b00      	cmp	r3, #0
9000187c:	d002      	beq.n	90001884 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
9000187e:	2301      	movs	r3, #1
90001880:	73fb      	strb	r3, [r7, #15]
90001882:	e008      	b.n	90001896 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001884:	2100      	movs	r1, #0
90001886:	6878      	ldr	r0, [r7, #4]
90001888:	f004 fd6d 	bl	90006366 <HAL_I2CEx_ConfigDigitalFilter>
9000188c:	4603      	mov	r3, r0
9000188e:	2b00      	cmp	r3, #0
90001890:	d001      	beq.n	90001896 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001892:	2301      	movs	r3, #1
90001894:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001896:	7bfb      	ldrb	r3, [r7, #15]
}
90001898:	4618      	mov	r0, r3
9000189a:	3710      	adds	r7, #16
9000189c:	46bd      	mov	sp, r7
9000189e:	bd80      	pop	{r7, pc}

900018a0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
900018a0:	b580      	push	{r7, lr}
900018a2:	b088      	sub	sp, #32
900018a4:	af02      	add	r7, sp, #8
900018a6:	60ba      	str	r2, [r7, #8]
900018a8:	461a      	mov	r2, r3
900018aa:	4603      	mov	r3, r0
900018ac:	81fb      	strh	r3, [r7, #14]
900018ae:	460b      	mov	r3, r1
900018b0:	81bb      	strh	r3, [r7, #12]
900018b2:	4613      	mov	r3, r2
900018b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
900018b6:	89b9      	ldrh	r1, [r7, #12]
900018b8:	89f8      	ldrh	r0, [r7, #14]
900018ba:	88fb      	ldrh	r3, [r7, #6]
900018bc:	9300      	str	r3, [sp, #0]
900018be:	68bb      	ldr	r3, [r7, #8]
900018c0:	2201      	movs	r2, #1
900018c2:	f000 fafd 	bl	90001ec0 <I2C4_ReadReg>
900018c6:	4603      	mov	r3, r0
900018c8:	2b00      	cmp	r3, #0
900018ca:	d102      	bne.n	900018d2 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
900018cc:	2300      	movs	r3, #0
900018ce:	617b      	str	r3, [r7, #20]
900018d0:	e00c      	b.n	900018ec <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900018d2:	4809      	ldr	r0, [pc, #36]	@ (900018f8 <BSP_I2C4_ReadReg+0x58>)
900018d4:	f004 fa82 	bl	90005ddc <HAL_I2C_GetError>
900018d8:	4603      	mov	r3, r0
900018da:	2b04      	cmp	r3, #4
900018dc:	d103      	bne.n	900018e6 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900018de:	f06f 0365 	mvn.w	r3, #101	@ 0x65
900018e2:	617b      	str	r3, [r7, #20]
900018e4:	e002      	b.n	900018ec <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
900018e6:	f06f 0303 	mvn.w	r3, #3
900018ea:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
900018ec:	697b      	ldr	r3, [r7, #20]
}
900018ee:	4618      	mov	r0, r3
900018f0:	3718      	adds	r7, #24
900018f2:	46bd      	mov	sp, r7
900018f4:	bd80      	pop	{r7, pc}
900018f6:	bf00      	nop
900018f8:	2000104c 	.word	0x2000104c

900018fc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
900018fc:	b580      	push	{r7, lr}
900018fe:	b086      	sub	sp, #24
90001900:	af00      	add	r7, sp, #0
90001902:	6078      	str	r0, [r7, #4]
90001904:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001906:	2300      	movs	r3, #0
90001908:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
9000190a:	687b      	ldr	r3, [r7, #4]
9000190c:	2b00      	cmp	r3, #0
9000190e:	d06b      	beq.n	900019e8 <I2C_GetTiming+0xec>
90001910:	683b      	ldr	r3, [r7, #0]
90001912:	2b00      	cmp	r3, #0
90001914:	d068      	beq.n	900019e8 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001916:	2300      	movs	r3, #0
90001918:	613b      	str	r3, [r7, #16]
9000191a:	e060      	b.n	900019de <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
9000191c:	4a35      	ldr	r2, [pc, #212]	@ (900019f4 <I2C_GetTiming+0xf8>)
9000191e:	693b      	ldr	r3, [r7, #16]
90001920:	212c      	movs	r1, #44	@ 0x2c
90001922:	fb01 f303 	mul.w	r3, r1, r3
90001926:	4413      	add	r3, r2
90001928:	3304      	adds	r3, #4
9000192a:	681b      	ldr	r3, [r3, #0]
9000192c:	683a      	ldr	r2, [r7, #0]
9000192e:	429a      	cmp	r2, r3
90001930:	d352      	bcc.n	900019d8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
90001932:	4a30      	ldr	r2, [pc, #192]	@ (900019f4 <I2C_GetTiming+0xf8>)
90001934:	693b      	ldr	r3, [r7, #16]
90001936:	212c      	movs	r1, #44	@ 0x2c
90001938:	fb01 f303 	mul.w	r3, r1, r3
9000193c:	4413      	add	r3, r2
9000193e:	3308      	adds	r3, #8
90001940:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001942:	683a      	ldr	r2, [r7, #0]
90001944:	429a      	cmp	r2, r3
90001946:	d847      	bhi.n	900019d8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001948:	6939      	ldr	r1, [r7, #16]
9000194a:	6878      	ldr	r0, [r7, #4]
9000194c:	f000 f856 	bl	900019fc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
90001950:	6939      	ldr	r1, [r7, #16]
90001952:	6878      	ldr	r0, [r7, #4]
90001954:	f000 f940 	bl	90001bd8 <I2C_Compute_SCLL_SCLH>
90001958:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
9000195a:	68fb      	ldr	r3, [r7, #12]
9000195c:	2b7f      	cmp	r3, #127	@ 0x7f
9000195e:	d842      	bhi.n	900019e6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90001960:	4925      	ldr	r1, [pc, #148]	@ (900019f8 <I2C_GetTiming+0xfc>)
90001962:	68fa      	ldr	r2, [r7, #12]
90001964:	4613      	mov	r3, r2
90001966:	009b      	lsls	r3, r3, #2
90001968:	4413      	add	r3, r2
9000196a:	009b      	lsls	r3, r3, #2
9000196c:	440b      	add	r3, r1
9000196e:	681b      	ldr	r3, [r3, #0]
90001970:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001972:	4821      	ldr	r0, [pc, #132]	@ (900019f8 <I2C_GetTiming+0xfc>)
90001974:	68fa      	ldr	r2, [r7, #12]
90001976:	4613      	mov	r3, r2
90001978:	009b      	lsls	r3, r3, #2
9000197a:	4413      	add	r3, r2
9000197c:	009b      	lsls	r3, r3, #2
9000197e:	4403      	add	r3, r0
90001980:	3304      	adds	r3, #4
90001982:	681b      	ldr	r3, [r3, #0]
90001984:	051b      	lsls	r3, r3, #20
90001986:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000198a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
9000198c:	481a      	ldr	r0, [pc, #104]	@ (900019f8 <I2C_GetTiming+0xfc>)
9000198e:	68fa      	ldr	r2, [r7, #12]
90001990:	4613      	mov	r3, r2
90001992:	009b      	lsls	r3, r3, #2
90001994:	4413      	add	r3, r2
90001996:	009b      	lsls	r3, r3, #2
90001998:	4403      	add	r3, r0
9000199a:	3308      	adds	r3, #8
9000199c:	681b      	ldr	r3, [r3, #0]
9000199e:	041b      	lsls	r3, r3, #16
900019a0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900019a4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900019a6:	4814      	ldr	r0, [pc, #80]	@ (900019f8 <I2C_GetTiming+0xfc>)
900019a8:	68fa      	ldr	r2, [r7, #12]
900019aa:	4613      	mov	r3, r2
900019ac:	009b      	lsls	r3, r3, #2
900019ae:	4413      	add	r3, r2
900019b0:	009b      	lsls	r3, r3, #2
900019b2:	4403      	add	r3, r0
900019b4:	330c      	adds	r3, #12
900019b6:	681b      	ldr	r3, [r3, #0]
900019b8:	021b      	lsls	r3, r3, #8
900019ba:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900019bc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
900019be:	480e      	ldr	r0, [pc, #56]	@ (900019f8 <I2C_GetTiming+0xfc>)
900019c0:	68fa      	ldr	r2, [r7, #12]
900019c2:	4613      	mov	r3, r2
900019c4:	009b      	lsls	r3, r3, #2
900019c6:	4413      	add	r3, r2
900019c8:	009b      	lsls	r3, r3, #2
900019ca:	4403      	add	r3, r0
900019cc:	3310      	adds	r3, #16
900019ce:	681b      	ldr	r3, [r3, #0]
900019d0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900019d2:	430b      	orrs	r3, r1
900019d4:	617b      	str	r3, [r7, #20]
        }
        break;
900019d6:	e006      	b.n	900019e6 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
900019d8:	693b      	ldr	r3, [r7, #16]
900019da:	3301      	adds	r3, #1
900019dc:	613b      	str	r3, [r7, #16]
900019de:	693b      	ldr	r3, [r7, #16]
900019e0:	2b02      	cmp	r3, #2
900019e2:	d99b      	bls.n	9000191c <I2C_GetTiming+0x20>
900019e4:	e000      	b.n	900019e8 <I2C_GetTiming+0xec>
        break;
900019e6:	bf00      	nop
      }
    }
  }

  return ret;
900019e8:	697b      	ldr	r3, [r7, #20]
}
900019ea:	4618      	mov	r0, r3
900019ec:	3718      	adds	r7, #24
900019ee:	46bd      	mov	sp, r7
900019f0:	bd80      	pop	{r7, pc}
900019f2:	bf00      	nop
900019f4:	9000d5c8 	.word	0x9000d5c8
900019f8:	20000648 	.word	0x20000648

900019fc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
900019fc:	b480      	push	{r7}
900019fe:	b08f      	sub	sp, #60	@ 0x3c
90001a00:	af00      	add	r7, sp, #0
90001a02:	6078      	str	r0, [r7, #4]
90001a04:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001a06:	2310      	movs	r3, #16
90001a08:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001a0a:	687b      	ldr	r3, [r7, #4]
90001a0c:	085a      	lsrs	r2, r3, #1
90001a0e:	4b6e      	ldr	r3, [pc, #440]	@ (90001bc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
90001a10:	4413      	add	r3, r2
90001a12:	687a      	ldr	r2, [r7, #4]
90001a14:	fbb3 f3f2 	udiv	r3, r3, r2
90001a18:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001a1a:	2332      	movs	r3, #50	@ 0x32
90001a1c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
90001a1e:	f44f 7382 	mov.w	r3, #260	@ 0x104
90001a22:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001a24:	4a69      	ldr	r2, [pc, #420]	@ (90001bcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a26:	683b      	ldr	r3, [r7, #0]
90001a28:	212c      	movs	r1, #44	@ 0x2c
90001a2a:	fb01 f303 	mul.w	r3, r1, r3
90001a2e:	4413      	add	r3, r2
90001a30:	3324      	adds	r3, #36	@ 0x24
90001a32:	681b      	ldr	r3, [r3, #0]
90001a34:	4618      	mov	r0, r3
90001a36:	4a65      	ldr	r2, [pc, #404]	@ (90001bcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a38:	683b      	ldr	r3, [r7, #0]
90001a3a:	212c      	movs	r1, #44	@ 0x2c
90001a3c:	fb01 f303 	mul.w	r3, r1, r3
90001a40:	4413      	add	r3, r2
90001a42:	330c      	adds	r3, #12
90001a44:	681b      	ldr	r3, [r3, #0]
90001a46:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001a48:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001a4a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001a4c:	495f      	ldr	r1, [pc, #380]	@ (90001bcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a4e:	683b      	ldr	r3, [r7, #0]
90001a50:	202c      	movs	r0, #44	@ 0x2c
90001a52:	fb00 f303 	mul.w	r3, r0, r3
90001a56:	440b      	add	r3, r1
90001a58:	3328      	adds	r3, #40	@ 0x28
90001a5a:	681b      	ldr	r3, [r3, #0]
90001a5c:	3303      	adds	r3, #3
90001a5e:	69f9      	ldr	r1, [r7, #28]
90001a60:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001a64:	1ad3      	subs	r3, r2, r3
90001a66:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001a68:	4a58      	ldr	r2, [pc, #352]	@ (90001bcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a6a:	683b      	ldr	r3, [r7, #0]
90001a6c:	212c      	movs	r1, #44	@ 0x2c
90001a6e:	fb01 f303 	mul.w	r3, r1, r3
90001a72:	4413      	add	r3, r2
90001a74:	3310      	adds	r3, #16
90001a76:	681b      	ldr	r3, [r3, #0]
90001a78:	4618      	mov	r0, r3
90001a7a:	4a54      	ldr	r2, [pc, #336]	@ (90001bcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a7c:	683b      	ldr	r3, [r7, #0]
90001a7e:	212c      	movs	r1, #44	@ 0x2c
90001a80:	fb01 f303 	mul.w	r3, r1, r3
90001a84:	4413      	add	r3, r2
90001a86:	3320      	adds	r3, #32
90001a88:	681b      	ldr	r3, [r3, #0]
90001a8a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001a8c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001a8e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90001a90:	494e      	ldr	r1, [pc, #312]	@ (90001bcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001a92:	683b      	ldr	r3, [r7, #0]
90001a94:	202c      	movs	r0, #44	@ 0x2c
90001a96:	fb00 f303 	mul.w	r3, r0, r3
90001a9a:	440b      	add	r3, r1
90001a9c:	3328      	adds	r3, #40	@ 0x28
90001a9e:	681b      	ldr	r3, [r3, #0]
90001aa0:	3304      	adds	r3, #4
90001aa2:	69f9      	ldr	r1, [r7, #28]
90001aa4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001aa8:	1ad3      	subs	r3, r2, r3
90001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001aac:	4a47      	ldr	r2, [pc, #284]	@ (90001bcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001aae:	683b      	ldr	r3, [r7, #0]
90001ab0:	212c      	movs	r1, #44	@ 0x2c
90001ab2:	fb01 f303 	mul.w	r3, r1, r3
90001ab6:	4413      	add	r3, r2
90001ab8:	3320      	adds	r3, #32
90001aba:	681b      	ldr	r3, [r3, #0]
90001abc:	4618      	mov	r0, r3
90001abe:	4a43      	ldr	r2, [pc, #268]	@ (90001bcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001ac0:	683b      	ldr	r3, [r7, #0]
90001ac2:	212c      	movs	r1, #44	@ 0x2c
90001ac4:	fb01 f303 	mul.w	r3, r1, r3
90001ac8:	4413      	add	r3, r2
90001aca:	3314      	adds	r3, #20
90001acc:	681b      	ldr	r3, [r3, #0]
90001ace:	4403      	add	r3, r0
90001ad0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
90001ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001ad4:	2b00      	cmp	r3, #0
90001ad6:	dc01      	bgt.n	90001adc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001ad8:	2300      	movs	r3, #0
90001ada:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
90001adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001ade:	2b00      	cmp	r3, #0
90001ae0:	dc01      	bgt.n	90001ae6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
90001ae2:	2300      	movs	r3, #0
90001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001ae6:	2300      	movs	r3, #0
90001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
90001aea:	e062      	b.n	90001bb2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001aec:	2300      	movs	r3, #0
90001aee:	627b      	str	r3, [r7, #36]	@ 0x24
90001af0:	e059      	b.n	90001ba6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001af4:	3301      	adds	r3, #1
90001af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001af8:	3201      	adds	r2, #1
90001afa:	fb03 f202 	mul.w	r2, r3, r2
90001afe:	69fb      	ldr	r3, [r7, #28]
90001b00:	fb02 f303 	mul.w	r3, r2, r3
90001b04:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001b06:	693b      	ldr	r3, [r7, #16]
90001b08:	68fa      	ldr	r2, [r7, #12]
90001b0a:	429a      	cmp	r2, r3
90001b0c:	d348      	bcc.n	90001ba0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001b0e:	2300      	movs	r3, #0
90001b10:	623b      	str	r3, [r7, #32]
90001b12:	e042      	b.n	90001b9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001b16:	3301      	adds	r3, #1
90001b18:	6a3a      	ldr	r2, [r7, #32]
90001b1a:	fb03 f202 	mul.w	r2, r3, r2
90001b1e:	69fb      	ldr	r3, [r7, #28]
90001b20:	fb02 f303 	mul.w	r3, r2, r3
90001b24:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001b28:	68ba      	ldr	r2, [r7, #8]
90001b2a:	429a      	cmp	r2, r3
90001b2c:	d332      	bcc.n	90001b94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
90001b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001b30:	68ba      	ldr	r2, [r7, #8]
90001b32:	429a      	cmp	r2, r3
90001b34:	d82e      	bhi.n	90001b94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001b3a:	429a      	cmp	r2, r3
90001b3c:	d02a      	beq.n	90001b94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90001b3e:	4b24      	ldr	r3, [pc, #144]	@ (90001bd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001b40:	681a      	ldr	r2, [r3, #0]
90001b42:	4924      	ldr	r1, [pc, #144]	@ (90001bd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001b44:	4613      	mov	r3, r2
90001b46:	009b      	lsls	r3, r3, #2
90001b48:	4413      	add	r3, r2
90001b4a:	009b      	lsls	r3, r3, #2
90001b4c:	440b      	add	r3, r1
90001b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90001b50:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90001b52:	4b1f      	ldr	r3, [pc, #124]	@ (90001bd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001b54:	681a      	ldr	r2, [r3, #0]
90001b56:	491f      	ldr	r1, [pc, #124]	@ (90001bd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001b58:	4613      	mov	r3, r2
90001b5a:	009b      	lsls	r3, r3, #2
90001b5c:	4413      	add	r3, r2
90001b5e:	009b      	lsls	r3, r3, #2
90001b60:	440b      	add	r3, r1
90001b62:	3304      	adds	r3, #4
90001b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001b66:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90001b68:	4b19      	ldr	r3, [pc, #100]	@ (90001bd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001b6a:	681a      	ldr	r2, [r3, #0]
90001b6c:	4919      	ldr	r1, [pc, #100]	@ (90001bd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001b6e:	4613      	mov	r3, r2
90001b70:	009b      	lsls	r3, r3, #2
90001b72:	4413      	add	r3, r2
90001b74:	009b      	lsls	r3, r3, #2
90001b76:	440b      	add	r3, r1
90001b78:	3308      	adds	r3, #8
90001b7a:	6a3a      	ldr	r2, [r7, #32]
90001b7c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
90001b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001b80:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
90001b82:	4b13      	ldr	r3, [pc, #76]	@ (90001bd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001b84:	681b      	ldr	r3, [r3, #0]
90001b86:	3301      	adds	r3, #1
90001b88:	4a11      	ldr	r2, [pc, #68]	@ (90001bd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001b8a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90001b8c:	4b10      	ldr	r3, [pc, #64]	@ (90001bd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
90001b8e:	681b      	ldr	r3, [r3, #0]
90001b90:	2b7f      	cmp	r3, #127	@ 0x7f
90001b92:	d812      	bhi.n	90001bba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90001b94:	6a3b      	ldr	r3, [r7, #32]
90001b96:	3301      	adds	r3, #1
90001b98:	623b      	str	r3, [r7, #32]
90001b9a:	6a3b      	ldr	r3, [r7, #32]
90001b9c:	2b0f      	cmp	r3, #15
90001b9e:	d9b9      	bls.n	90001b14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001ba2:	3301      	adds	r3, #1
90001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
90001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001ba8:	2b0f      	cmp	r3, #15
90001baa:	d9a2      	bls.n	90001af2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001bae:	3301      	adds	r3, #1
90001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
90001bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001bb4:	2b0f      	cmp	r3, #15
90001bb6:	d999      	bls.n	90001aec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001bb8:	e000      	b.n	90001bbc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001bba:	bf00      	nop
          }
        }
      }
    }
  }
}
90001bbc:	373c      	adds	r7, #60	@ 0x3c
90001bbe:	46bd      	mov	sp, r7
90001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
90001bc4:	4770      	bx	lr
90001bc6:	bf00      	nop
90001bc8:	3b9aca00 	.word	0x3b9aca00
90001bcc:	9000d5c8 	.word	0x9000d5c8
90001bd0:	20001048 	.word	0x20001048
90001bd4:	20000648 	.word	0x20000648

90001bd8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001bd8:	b480      	push	{r7}
90001bda:	b093      	sub	sp, #76	@ 0x4c
90001bdc:	af00      	add	r7, sp, #0
90001bde:	6078      	str	r0, [r7, #4]
90001be0:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
90001be2:	f04f 33ff 	mov.w	r3, #4294967295
90001be6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001be8:	687b      	ldr	r3, [r7, #4]
90001bea:	085a      	lsrs	r2, r3, #1
90001bec:	4b7a      	ldr	r3, [pc, #488]	@ (90001dd8 <I2C_Compute_SCLL_SCLH+0x200>)
90001bee:	4413      	add	r3, r2
90001bf0:	687a      	ldr	r2, [r7, #4]
90001bf2:	fbb3 f3f2 	udiv	r3, r3, r2
90001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001bf8:	4a78      	ldr	r2, [pc, #480]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001bfa:	683b      	ldr	r3, [r7, #0]
90001bfc:	212c      	movs	r1, #44	@ 0x2c
90001bfe:	fb01 f303 	mul.w	r3, r1, r3
90001c02:	4413      	add	r3, r2
90001c04:	681b      	ldr	r3, [r3, #0]
90001c06:	085a      	lsrs	r2, r3, #1
90001c08:	4b73      	ldr	r3, [pc, #460]	@ (90001dd8 <I2C_Compute_SCLL_SCLH+0x200>)
90001c0a:	4413      	add	r3, r2
90001c0c:	4973      	ldr	r1, [pc, #460]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001c0e:	683a      	ldr	r2, [r7, #0]
90001c10:	202c      	movs	r0, #44	@ 0x2c
90001c12:	fb00 f202 	mul.w	r2, r0, r2
90001c16:	440a      	add	r2, r1
90001c18:	6812      	ldr	r2, [r2, #0]
90001c1a:	fbb3 f3f2 	udiv	r3, r3, r2
90001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001c20:	2332      	movs	r3, #50	@ 0x32
90001c22:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001c24:	4a6d      	ldr	r2, [pc, #436]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001c26:	683b      	ldr	r3, [r7, #0]
90001c28:	212c      	movs	r1, #44	@ 0x2c
90001c2a:	fb01 f303 	mul.w	r3, r1, r3
90001c2e:	4413      	add	r3, r2
90001c30:	3328      	adds	r3, #40	@ 0x28
90001c32:	681a      	ldr	r2, [r3, #0]
90001c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001c36:	fb02 f303 	mul.w	r3, r2, r3
90001c3a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001c3c:	4a67      	ldr	r2, [pc, #412]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001c3e:	683b      	ldr	r3, [r7, #0]
90001c40:	212c      	movs	r1, #44	@ 0x2c
90001c42:	fb01 f303 	mul.w	r3, r1, r3
90001c46:	4413      	add	r3, r2
90001c48:	3304      	adds	r3, #4
90001c4a:	681b      	ldr	r3, [r3, #0]
90001c4c:	4a62      	ldr	r2, [pc, #392]	@ (90001dd8 <I2C_Compute_SCLL_SCLH+0x200>)
90001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
90001c52:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
90001c54:	4a61      	ldr	r2, [pc, #388]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001c56:	683b      	ldr	r3, [r7, #0]
90001c58:	212c      	movs	r1, #44	@ 0x2c
90001c5a:	fb01 f303 	mul.w	r3, r1, r3
90001c5e:	4413      	add	r3, r2
90001c60:	3308      	adds	r3, #8
90001c62:	681b      	ldr	r3, [r3, #0]
90001c64:	4a5c      	ldr	r2, [pc, #368]	@ (90001dd8 <I2C_Compute_SCLL_SCLH+0x200>)
90001c66:	fbb2 f3f3 	udiv	r3, r2, r3
90001c6a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
90001c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001c6e:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001c70:	2300      	movs	r3, #0
90001c72:	637b      	str	r3, [r7, #52]	@ 0x34
90001c74:	e0a3      	b.n	90001dbe <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90001c76:	495a      	ldr	r1, [pc, #360]	@ (90001de0 <I2C_Compute_SCLL_SCLH+0x208>)
90001c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001c7a:	4613      	mov	r3, r2
90001c7c:	009b      	lsls	r3, r3, #2
90001c7e:	4413      	add	r3, r2
90001c80:	009b      	lsls	r3, r3, #2
90001c82:	440b      	add	r3, r1
90001c84:	681b      	ldr	r3, [r3, #0]
90001c86:	1c5a      	adds	r2, r3, #1
90001c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001c8a:	fb02 f303 	mul.w	r3, r2, r3
90001c8e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001c90:	2300      	movs	r3, #0
90001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001c94:	e08c      	b.n	90001db0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90001c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001c98:	6a3b      	ldr	r3, [r7, #32]
90001c9a:	441a      	add	r2, r3
90001c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001c9e:	3301      	adds	r3, #1
90001ca0:	6979      	ldr	r1, [r7, #20]
90001ca2:	fb03 f101 	mul.w	r1, r3, r1
90001ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001ca8:	005b      	lsls	r3, r3, #1
90001caa:	440b      	add	r3, r1
90001cac:	4413      	add	r3, r2
90001cae:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001cb0:	4a4a      	ldr	r2, [pc, #296]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001cb2:	683b      	ldr	r3, [r7, #0]
90001cb4:	212c      	movs	r1, #44	@ 0x2c
90001cb6:	fb01 f303 	mul.w	r3, r1, r3
90001cba:	4413      	add	r3, r2
90001cbc:	3318      	adds	r3, #24
90001cbe:	681b      	ldr	r3, [r3, #0]
90001cc0:	693a      	ldr	r2, [r7, #16]
90001cc2:	429a      	cmp	r2, r3
90001cc4:	d971      	bls.n	90001daa <I2C_Compute_SCLL_SCLH+0x1d2>
90001cc6:	693a      	ldr	r2, [r7, #16]
90001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90001cca:	1ad2      	subs	r2, r2, r3
90001ccc:	6a3b      	ldr	r3, [r7, #32]
90001cce:	1ad3      	subs	r3, r2, r3
90001cd0:	089b      	lsrs	r3, r3, #2
90001cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001cd4:	429a      	cmp	r2, r3
90001cd6:	d268      	bcs.n	90001daa <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001cd8:	2300      	movs	r3, #0
90001cda:	63bb      	str	r3, [r7, #56]	@ 0x38
90001cdc:	e062      	b.n	90001da4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90001ce0:	6a3b      	ldr	r3, [r7, #32]
90001ce2:	441a      	add	r2, r3
90001ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001ce6:	3301      	adds	r3, #1
90001ce8:	6979      	ldr	r1, [r7, #20]
90001cea:	fb03 f101 	mul.w	r1, r3, r1
90001cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90001cf0:	005b      	lsls	r3, r3, #1
90001cf2:	440b      	add	r3, r1
90001cf4:	4413      	add	r3, r2
90001cf6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001cf8:	693a      	ldr	r2, [r7, #16]
90001cfa:	68fb      	ldr	r3, [r7, #12]
90001cfc:	441a      	add	r2, r3
90001cfe:	4937      	ldr	r1, [pc, #220]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001d00:	683b      	ldr	r3, [r7, #0]
90001d02:	202c      	movs	r0, #44	@ 0x2c
90001d04:	fb00 f303 	mul.w	r3, r0, r3
90001d08:	440b      	add	r3, r1
90001d0a:	3320      	adds	r3, #32
90001d0c:	681b      	ldr	r3, [r3, #0]
90001d0e:	441a      	add	r2, r3
90001d10:	4932      	ldr	r1, [pc, #200]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001d12:	683b      	ldr	r3, [r7, #0]
90001d14:	202c      	movs	r0, #44	@ 0x2c
90001d16:	fb00 f303 	mul.w	r3, r0, r3
90001d1a:	440b      	add	r3, r1
90001d1c:	3324      	adds	r3, #36	@ 0x24
90001d1e:	681b      	ldr	r3, [r3, #0]
90001d20:	4413      	add	r3, r2
90001d22:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001d24:	68ba      	ldr	r2, [r7, #8]
90001d26:	69bb      	ldr	r3, [r7, #24]
90001d28:	429a      	cmp	r2, r3
90001d2a:	d338      	bcc.n	90001d9e <I2C_Compute_SCLL_SCLH+0x1c6>
90001d2c:	68ba      	ldr	r2, [r7, #8]
90001d2e:	69fb      	ldr	r3, [r7, #28]
90001d30:	429a      	cmp	r2, r3
90001d32:	d834      	bhi.n	90001d9e <I2C_Compute_SCLL_SCLH+0x1c6>
90001d34:	4a29      	ldr	r2, [pc, #164]	@ (90001ddc <I2C_Compute_SCLL_SCLH+0x204>)
90001d36:	683b      	ldr	r3, [r7, #0]
90001d38:	212c      	movs	r1, #44	@ 0x2c
90001d3a:	fb01 f303 	mul.w	r3, r1, r3
90001d3e:	4413      	add	r3, r2
90001d40:	331c      	adds	r3, #28
90001d42:	681b      	ldr	r3, [r3, #0]
90001d44:	68fa      	ldr	r2, [r7, #12]
90001d46:	429a      	cmp	r2, r3
90001d48:	d329      	bcc.n	90001d9e <I2C_Compute_SCLL_SCLH+0x1c6>
90001d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90001d4c:	68fb      	ldr	r3, [r7, #12]
90001d4e:	429a      	cmp	r2, r3
90001d50:	d225      	bcs.n	90001d9e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001d52:	68ba      	ldr	r2, [r7, #8]
90001d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90001d56:	1ad3      	subs	r3, r2, r3
90001d58:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
90001d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001d5c:	2b00      	cmp	r3, #0
90001d5e:	da02      	bge.n	90001d66 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001d62:	425b      	negs	r3, r3
90001d64:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
90001d6a:	429a      	cmp	r2, r3
90001d6c:	d917      	bls.n	90001d9e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90001d70:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
90001d72:	491b      	ldr	r1, [pc, #108]	@ (90001de0 <I2C_Compute_SCLL_SCLH+0x208>)
90001d74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001d76:	4613      	mov	r3, r2
90001d78:	009b      	lsls	r3, r3, #2
90001d7a:	4413      	add	r3, r2
90001d7c:	009b      	lsls	r3, r3, #2
90001d7e:	440b      	add	r3, r1
90001d80:	3310      	adds	r3, #16
90001d82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
90001d84:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001d86:	4916      	ldr	r1, [pc, #88]	@ (90001de0 <I2C_Compute_SCLL_SCLH+0x208>)
90001d88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001d8a:	4613      	mov	r3, r2
90001d8c:	009b      	lsls	r3, r3, #2
90001d8e:	4413      	add	r3, r2
90001d90:	009b      	lsls	r3, r3, #2
90001d92:	440b      	add	r3, r1
90001d94:	330c      	adds	r3, #12
90001d96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
90001d98:	601a      	str	r2, [r3, #0]
              ret = count;
90001d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001d9c:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001da0:	3301      	adds	r3, #1
90001da2:	63bb      	str	r3, [r7, #56]	@ 0x38
90001da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
90001da6:	2bff      	cmp	r3, #255	@ 0xff
90001da8:	d999      	bls.n	90001cde <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001dac:	3301      	adds	r3, #1
90001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
90001db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
90001db2:	2bff      	cmp	r3, #255	@ 0xff
90001db4:	f67f af6f 	bls.w	90001c96 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
90001dba:	3301      	adds	r3, #1
90001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
90001dbe:	4b09      	ldr	r3, [pc, #36]	@ (90001de4 <I2C_Compute_SCLL_SCLH+0x20c>)
90001dc0:	681b      	ldr	r3, [r3, #0]
90001dc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
90001dc4:	429a      	cmp	r2, r3
90001dc6:	f4ff af56 	bcc.w	90001c76 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
90001dcc:	4618      	mov	r0, r3
90001dce:	374c      	adds	r7, #76	@ 0x4c
90001dd0:	46bd      	mov	sp, r7
90001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
90001dd6:	4770      	bx	lr
90001dd8:	3b9aca00 	.word	0x3b9aca00
90001ddc:	9000d5c8 	.word	0x9000d5c8
90001de0:	20000648 	.word	0x20000648
90001de4:	20001048 	.word	0x20001048

90001de8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001de8:	b580      	push	{r7, lr}
90001dea:	b08a      	sub	sp, #40	@ 0x28
90001dec:	af00      	add	r7, sp, #0
90001dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001df0:	4b31      	ldr	r3, [pc, #196]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001df6:	4a30      	ldr	r2, [pc, #192]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001df8:	f043 0308 	orr.w	r3, r3, #8
90001dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001e00:	4b2d      	ldr	r3, [pc, #180]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e06:	f003 0308 	and.w	r3, r3, #8
90001e0a:	613b      	str	r3, [r7, #16]
90001e0c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001e0e:	4b2a      	ldr	r3, [pc, #168]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e14:	4a28      	ldr	r2, [pc, #160]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e16:	f043 0308 	orr.w	r3, r3, #8
90001e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90001e1e:	4b26      	ldr	r3, [pc, #152]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90001e24:	f003 0308 	and.w	r3, r3, #8
90001e28:	60fb      	str	r3, [r7, #12]
90001e2a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
90001e30:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001e32:	2312      	movs	r3, #18
90001e34:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001e36:	2300      	movs	r3, #0
90001e38:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001e3a:	2302      	movs	r3, #2
90001e3c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001e3e:	2304      	movs	r3, #4
90001e40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001e42:	f107 0314 	add.w	r3, r7, #20
90001e46:	4619      	mov	r1, r3
90001e48:	481c      	ldr	r0, [pc, #112]	@ (90001ebc <I2C4_MspInit+0xd4>)
90001e4a:	f001 fe71 	bl	90003b30 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001e4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
90001e52:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001e54:	2312      	movs	r3, #18
90001e56:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001e58:	2300      	movs	r3, #0
90001e5a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001e5c:	2302      	movs	r3, #2
90001e5e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001e60:	2304      	movs	r3, #4
90001e62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001e64:	f107 0314 	add.w	r3, r7, #20
90001e68:	4619      	mov	r1, r3
90001e6a:	4814      	ldr	r0, [pc, #80]	@ (90001ebc <I2C4_MspInit+0xd4>)
90001e6c:	f001 fe60 	bl	90003b30 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001e70:	4b11      	ldr	r3, [pc, #68]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001e76:	4a10      	ldr	r2, [pc, #64]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001e7c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90001e80:	4b0d      	ldr	r3, [pc, #52]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90001e8a:	60bb      	str	r3, [r7, #8]
90001e8c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001e94:	4a08      	ldr	r2, [pc, #32]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90001e9a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001e9e:	4b06      	ldr	r3, [pc, #24]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90001ea4:	4a04      	ldr	r2, [pc, #16]	@ (90001eb8 <I2C4_MspInit+0xd0>)
90001ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90001eaa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
90001eae:	bf00      	nop
90001eb0:	3728      	adds	r7, #40	@ 0x28
90001eb2:	46bd      	mov	sp, r7
90001eb4:	bd80      	pop	{r7, pc}
90001eb6:	bf00      	nop
90001eb8:	58024400 	.word	0x58024400
90001ebc:	58020c00 	.word	0x58020c00

90001ec0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001ec0:	b580      	push	{r7, lr}
90001ec2:	b088      	sub	sp, #32
90001ec4:	af04      	add	r7, sp, #16
90001ec6:	607b      	str	r3, [r7, #4]
90001ec8:	4603      	mov	r3, r0
90001eca:	81fb      	strh	r3, [r7, #14]
90001ecc:	460b      	mov	r3, r1
90001ece:	81bb      	strh	r3, [r7, #12]
90001ed0:	4613      	mov	r3, r2
90001ed2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001ed4:	8978      	ldrh	r0, [r7, #10]
90001ed6:	89ba      	ldrh	r2, [r7, #12]
90001ed8:	89f9      	ldrh	r1, [r7, #14]
90001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
90001ede:	9302      	str	r3, [sp, #8]
90001ee0:	8b3b      	ldrh	r3, [r7, #24]
90001ee2:	9301      	str	r3, [sp, #4]
90001ee4:	687b      	ldr	r3, [r7, #4]
90001ee6:	9300      	str	r3, [sp, #0]
90001ee8:	4603      	mov	r3, r0
90001eea:	4807      	ldr	r0, [pc, #28]	@ (90001f08 <I2C4_ReadReg+0x48>)
90001eec:	f003 fe4e 	bl	90005b8c <HAL_I2C_Mem_Read>
90001ef0:	4603      	mov	r3, r0
90001ef2:	2b00      	cmp	r3, #0
90001ef4:	d101      	bne.n	90001efa <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001ef6:	2300      	movs	r3, #0
90001ef8:	e001      	b.n	90001efe <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001efa:	f06f 0307 	mvn.w	r3, #7
}
90001efe:	4618      	mov	r0, r3
90001f00:	3710      	adds	r7, #16
90001f02:	46bd      	mov	sp, r7
90001f04:	bd80      	pop	{r7, pc}
90001f06:	bf00      	nop
90001f08:	2000104c 	.word	0x2000104c

90001f0c <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001f0c:	b580      	push	{r7, lr}
90001f0e:	b084      	sub	sp, #16
90001f10:	af02      	add	r7, sp, #8
90001f12:	6078      	str	r0, [r7, #4]
90001f14:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001f16:	f44f 7388 	mov.w	r3, #272	@ 0x110
90001f1a:	9300      	str	r3, [sp, #0]
90001f1c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
90001f20:	2200      	movs	r2, #0
90001f22:	6839      	ldr	r1, [r7, #0]
90001f24:	6878      	ldr	r0, [r7, #4]
90001f26:	f000 f805 	bl	90001f34 <BSP_LCD_InitEx>
90001f2a:	4603      	mov	r3, r0
}
90001f2c:	4618      	mov	r0, r3
90001f2e:	3708      	adds	r7, #8
90001f30:	46bd      	mov	sp, r7
90001f32:	bd80      	pop	{r7, pc}

90001f34 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001f34:	b580      	push	{r7, lr}
90001f36:	b09e      	sub	sp, #120	@ 0x78
90001f38:	af00      	add	r7, sp, #0
90001f3a:	60f8      	str	r0, [r7, #12]
90001f3c:	60b9      	str	r1, [r7, #8]
90001f3e:	607a      	str	r2, [r7, #4]
90001f40:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001f42:	2300      	movs	r3, #0
90001f44:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001f46:	2300      	movs	r3, #0
90001f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001f4a:	68bb      	ldr	r3, [r7, #8]
90001f4c:	2b01      	cmp	r3, #1
90001f4e:	d808      	bhi.n	90001f62 <BSP_LCD_InitEx+0x2e>
90001f50:	68fb      	ldr	r3, [r7, #12]
90001f52:	2b00      	cmp	r3, #0
90001f54:	d105      	bne.n	90001f62 <BSP_LCD_InitEx+0x2e>
90001f56:	687b      	ldr	r3, [r7, #4]
90001f58:	2b02      	cmp	r3, #2
90001f5a:	d006      	beq.n	90001f6a <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001f5c:	687b      	ldr	r3, [r7, #4]
90001f5e:	2b00      	cmp	r3, #0
90001f60:	d003      	beq.n	90001f6a <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001f62:	f06f 0301 	mvn.w	r3, #1
90001f66:	677b      	str	r3, [r7, #116]	@ 0x74
90001f68:	e0a8      	b.n	900020bc <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001f6a:	687b      	ldr	r3, [r7, #4]
90001f6c:	2b02      	cmp	r3, #2
90001f6e:	d109      	bne.n	90001f84 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001f70:	2302      	movs	r3, #2
90001f72:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001f74:	4a54      	ldr	r2, [pc, #336]	@ (900020c8 <BSP_LCD_InitEx+0x194>)
90001f76:	68fb      	ldr	r3, [r7, #12]
90001f78:	015b      	lsls	r3, r3, #5
90001f7a:	4413      	add	r3, r2
90001f7c:	3310      	adds	r3, #16
90001f7e:	2202      	movs	r2, #2
90001f80:	601a      	str	r2, [r3, #0]
90001f82:	e008      	b.n	90001f96 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001f84:	2300      	movs	r3, #0
90001f86:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001f88:	4a4f      	ldr	r2, [pc, #316]	@ (900020c8 <BSP_LCD_InitEx+0x194>)
90001f8a:	68fb      	ldr	r3, [r7, #12]
90001f8c:	015b      	lsls	r3, r3, #5
90001f8e:	4413      	add	r3, r2
90001f90:	3310      	adds	r3, #16
90001f92:	2204      	movs	r2, #4
90001f94:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001f96:	4a4c      	ldr	r2, [pc, #304]	@ (900020c8 <BSP_LCD_InitEx+0x194>)
90001f98:	68fb      	ldr	r3, [r7, #12]
90001f9a:	015b      	lsls	r3, r3, #5
90001f9c:	4413      	add	r3, r2
90001f9e:	330c      	adds	r3, #12
90001fa0:	687a      	ldr	r2, [r7, #4]
90001fa2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001fa4:	4a48      	ldr	r2, [pc, #288]	@ (900020c8 <BSP_LCD_InitEx+0x194>)
90001fa6:	68fb      	ldr	r3, [r7, #12]
90001fa8:	015b      	lsls	r3, r3, #5
90001faa:	4413      	add	r3, r2
90001fac:	683a      	ldr	r2, [r7, #0]
90001fae:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90001fb0:	4a45      	ldr	r2, [pc, #276]	@ (900020c8 <BSP_LCD_InitEx+0x194>)
90001fb2:	68fb      	ldr	r3, [r7, #12]
90001fb4:	015b      	lsls	r3, r3, #5
90001fb6:	4413      	add	r3, r2
90001fb8:	3304      	adds	r3, #4
90001fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90001fbe:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90001fc0:	4b42      	ldr	r3, [pc, #264]	@ (900020cc <BSP_LCD_InitEx+0x198>)
90001fc2:	4a43      	ldr	r2, [pc, #268]	@ (900020d0 <BSP_LCD_InitEx+0x19c>)
90001fc4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90001fc6:	4b43      	ldr	r3, [pc, #268]	@ (900020d4 <BSP_LCD_InitEx+0x1a0>)
90001fc8:	4a43      	ldr	r2, [pc, #268]	@ (900020d8 <BSP_LCD_InitEx+0x1a4>)
90001fca:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90001fcc:	483f      	ldr	r0, [pc, #252]	@ (900020cc <BSP_LCD_InitEx+0x198>)
90001fce:	f000 fcf9 	bl	900029c4 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90001fd2:	4840      	ldr	r0, [pc, #256]	@ (900020d4 <BSP_LCD_InitEx+0x1a0>)
90001fd4:	f000 fdc2 	bl	90002b5c <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90001fd8:	4b40      	ldr	r3, [pc, #256]	@ (900020dc <BSP_LCD_InitEx+0x1a8>)
90001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90001fdc:	4b40      	ldr	r3, [pc, #256]	@ (900020e0 <BSP_LCD_InitEx+0x1ac>)
90001fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90001fe0:	2370      	movs	r3, #112	@ 0x70
90001fe2:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90001fe4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
90001fe8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
90001fec:	4611      	mov	r1, r2
90001fee:	4618      	mov	r0, r3
90001ff0:	f7ff f9b8 	bl	90001364 <FT5336_RegisterBusIO>
90001ff4:	4603      	mov	r3, r0
90001ff6:	2b00      	cmp	r3, #0
90001ff8:	da03      	bge.n	90002002 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001ffa:	f06f 0304 	mvn.w	r3, #4
90001ffe:	677b      	str	r3, [r7, #116]	@ 0x74
90002000:	e02b      	b.n	9000205a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90002002:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
90002006:	f107 0344 	add.w	r3, r7, #68	@ 0x44
9000200a:	4611      	mov	r1, r2
9000200c:	4618      	mov	r0, r3
9000200e:	f7ff f9eb 	bl	900013e8 <FT5336_ReadID>
90002012:	4603      	mov	r3, r0
90002014:	2b00      	cmp	r3, #0
90002016:	da03      	bge.n	90002020 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002018:	f06f 0304 	mvn.w	r3, #4
9000201c:	677b      	str	r3, [r7, #116]	@ 0x74
9000201e:	e01c      	b.n	9000205a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90002020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
90002022:	2b51      	cmp	r3, #81	@ 0x51
90002024:	d003      	beq.n	9000202e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90002026:	f06f 0306 	mvn.w	r3, #6
9000202a:	677b      	str	r3, [r7, #116]	@ 0x74
9000202c:	e015      	b.n	9000205a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
9000202e:	4827      	ldr	r0, [pc, #156]	@ (900020cc <BSP_LCD_InitEx+0x198>)
90002030:	f7fe ff3e 	bl	90000eb0 <MX_LTDC_ClockConfig>
90002034:	4603      	mov	r3, r0
90002036:	2b00      	cmp	r3, #0
90002038:	d003      	beq.n	90002042 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
9000203a:	f06f 0303 	mvn.w	r3, #3
9000203e:	677b      	str	r3, [r7, #116]	@ 0x74
90002040:	e00b      	b.n	9000205a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90002042:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
90002046:	6839      	ldr	r1, [r7, #0]
90002048:	4820      	ldr	r0, [pc, #128]	@ (900020cc <BSP_LCD_InitEx+0x198>)
9000204a:	f000 f84d 	bl	900020e8 <MX_LTDC_Init>
9000204e:	4603      	mov	r3, r0
90002050:	2b00      	cmp	r3, #0
90002052:	d002      	beq.n	9000205a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90002054:	f06f 0303 	mvn.w	r3, #3
90002058:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
9000205a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
9000205c:	2b00      	cmp	r3, #0
9000205e:	d12d      	bne.n	900020bc <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90002060:	2000      	movs	r0, #0
90002062:	f000 fe0d 	bl	90002c80 <BSP_SDRAM_Init>
90002066:	4603      	mov	r3, r0
90002068:	2b00      	cmp	r3, #0
9000206a:	d002      	beq.n	90002072 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
9000206c:	f06f 0303 	mvn.w	r3, #3
90002070:	e025      	b.n	900020be <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90002072:	2300      	movs	r3, #0
90002074:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90002076:	683b      	ldr	r3, [r7, #0]
90002078:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
9000207a:	2300      	movs	r3, #0
9000207c:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
9000207e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
90002082:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90002084:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
90002086:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90002088:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
9000208c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
9000208e:	f107 0314 	add.w	r3, r7, #20
90002092:	461a      	mov	r2, r3
90002094:	2100      	movs	r1, #0
90002096:	480d      	ldr	r0, [pc, #52]	@ (900020cc <BSP_LCD_InitEx+0x198>)
90002098:	f000 f872 	bl	90002180 <MX_LTDC_ConfigLayer>
9000209c:	4603      	mov	r3, r0
9000209e:	2b00      	cmp	r3, #0
900020a0:	d002      	beq.n	900020a8 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
900020a2:	f06f 0303 	mvn.w	r3, #3
900020a6:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
900020a8:	480e      	ldr	r0, [pc, #56]	@ (900020e4 <BSP_LCD_InitEx+0x1b0>)
900020aa:	f000 fdbf 	bl	90002c2c <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
900020ae:	4a06      	ldr	r2, [pc, #24]	@ (900020c8 <BSP_LCD_InitEx+0x194>)
900020b0:	68fb      	ldr	r3, [r7, #12]
900020b2:	015b      	lsls	r3, r3, #5
900020b4:	4413      	add	r3, r2
900020b6:	3318      	adds	r3, #24
900020b8:	2201      	movs	r2, #1
900020ba:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
900020bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
900020be:	4618      	mov	r0, r3
900020c0:	3778      	adds	r7, #120	@ 0x78
900020c2:	46bd      	mov	sp, r7
900020c4:	bd80      	pop	{r7, pc}
900020c6:	bf00      	nop
900020c8:	200011fc 	.word	0x200011fc
900020cc:	20001154 	.word	0x20001154
900020d0:	50001000 	.word	0x50001000
900020d4:	200010ec 	.word	0x200010ec
900020d8:	52001000 	.word	0x52001000
900020dc:	900017a9 	.word	0x900017a9
900020e0:	900018a1 	.word	0x900018a1
900020e4:	200010a0 	.word	0x200010a0

900020e8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
900020e8:	b580      	push	{r7, lr}
900020ea:	b084      	sub	sp, #16
900020ec:	af00      	add	r7, sp, #0
900020ee:	60f8      	str	r0, [r7, #12]
900020f0:	60b9      	str	r1, [r7, #8]
900020f2:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
900020f4:	68fb      	ldr	r3, [r7, #12]
900020f6:	4a21      	ldr	r2, [pc, #132]	@ (9000217c <MX_LTDC_Init+0x94>)
900020f8:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
900020fa:	68fb      	ldr	r3, [r7, #12]
900020fc:	2200      	movs	r2, #0
900020fe:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90002100:	68fb      	ldr	r3, [r7, #12]
90002102:	2200      	movs	r2, #0
90002104:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90002106:	68fb      	ldr	r3, [r7, #12]
90002108:	2200      	movs	r2, #0
9000210a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000210c:	68fb      	ldr	r3, [r7, #12]
9000210e:	2200      	movs	r2, #0
90002110:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90002112:	68fb      	ldr	r3, [r7, #12]
90002114:	2228      	movs	r2, #40	@ 0x28
90002116:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90002118:	68fb      	ldr	r3, [r7, #12]
9000211a:	222a      	movs	r2, #42	@ 0x2a
9000211c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
9000211e:	68bb      	ldr	r3, [r7, #8]
90002120:	f103 0235 	add.w	r2, r3, #53	@ 0x35
90002124:	68fb      	ldr	r3, [r7, #12]
90002126:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90002128:	68bb      	ldr	r3, [r7, #8]
9000212a:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
9000212e:	68fb      	ldr	r3, [r7, #12]
90002130:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90002132:	68fb      	ldr	r3, [r7, #12]
90002134:	2209      	movs	r2, #9
90002136:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90002138:	68fb      	ldr	r3, [r7, #12]
9000213a:	220b      	movs	r2, #11
9000213c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
9000213e:	687b      	ldr	r3, [r7, #4]
90002140:	f103 020b 	add.w	r2, r3, #11
90002144:	68fb      	ldr	r3, [r7, #12]
90002146:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90002148:	687b      	ldr	r3, [r7, #4]
9000214a:	f103 020d 	add.w	r2, r3, #13
9000214e:	68fb      	ldr	r3, [r7, #12]
90002150:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90002152:	68fb      	ldr	r3, [r7, #12]
90002154:	22ff      	movs	r2, #255	@ 0xff
90002156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
9000215a:	68fb      	ldr	r3, [r7, #12]
9000215c:	22ff      	movs	r2, #255	@ 0xff
9000215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90002162:	68fb      	ldr	r3, [r7, #12]
90002164:	22ff      	movs	r2, #255	@ 0xff
90002166:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
9000216a:	68f8      	ldr	r0, [r7, #12]
9000216c:	f004 f947 	bl	900063fe <HAL_LTDC_Init>
90002170:	4603      	mov	r3, r0
}
90002172:	4618      	mov	r0, r3
90002174:	3710      	adds	r7, #16
90002176:	46bd      	mov	sp, r7
90002178:	bd80      	pop	{r7, pc}
9000217a:	bf00      	nop
9000217c:	50001000 	.word	0x50001000

90002180 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90002180:	b580      	push	{r7, lr}
90002182:	b092      	sub	sp, #72	@ 0x48
90002184:	af00      	add	r7, sp, #0
90002186:	60f8      	str	r0, [r7, #12]
90002188:	60b9      	str	r1, [r7, #8]
9000218a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
9000218c:	687b      	ldr	r3, [r7, #4]
9000218e:	681b      	ldr	r3, [r3, #0]
90002190:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90002192:	687b      	ldr	r3, [r7, #4]
90002194:	685b      	ldr	r3, [r3, #4]
90002196:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90002198:	687b      	ldr	r3, [r7, #4]
9000219a:	689b      	ldr	r3, [r3, #8]
9000219c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
9000219e:	687b      	ldr	r3, [r7, #4]
900021a0:	68db      	ldr	r3, [r3, #12]
900021a2:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
900021a4:	687b      	ldr	r3, [r7, #4]
900021a6:	691b      	ldr	r3, [r3, #16]
900021a8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
900021aa:	23ff      	movs	r3, #255	@ 0xff
900021ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
900021ae:	2300      	movs	r3, #0
900021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
900021b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
900021b6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900021b8:	2307      	movs	r3, #7
900021ba:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
900021bc:	687b      	ldr	r3, [r7, #4]
900021be:	695b      	ldr	r3, [r3, #20]
900021c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
900021c2:	687b      	ldr	r3, [r7, #4]
900021c4:	685a      	ldr	r2, [r3, #4]
900021c6:	687b      	ldr	r3, [r7, #4]
900021c8:	681b      	ldr	r3, [r3, #0]
900021ca:	1ad3      	subs	r3, r2, r3
900021cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
900021ce:	687b      	ldr	r3, [r7, #4]
900021d0:	68da      	ldr	r2, [r3, #12]
900021d2:	687b      	ldr	r3, [r7, #4]
900021d4:	689b      	ldr	r3, [r3, #8]
900021d6:	1ad3      	subs	r3, r2, r3
900021d8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
900021da:	2300      	movs	r3, #0
900021dc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
900021e0:	2300      	movs	r3, #0
900021e2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
900021e6:	2300      	movs	r3, #0
900021e8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
900021ec:	f107 0314 	add.w	r3, r7, #20
900021f0:	68ba      	ldr	r2, [r7, #8]
900021f2:	4619      	mov	r1, r3
900021f4:	68f8      	ldr	r0, [r7, #12]
900021f6:	f004 f9a9 	bl	9000654c <HAL_LTDC_ConfigLayer>
900021fa:	4603      	mov	r3, r0
}
900021fc:	4618      	mov	r0, r3
900021fe:	3748      	adds	r7, #72	@ 0x48
90002200:	46bd      	mov	sp, r7
90002202:	bd80      	pop	{r7, pc}

90002204 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90002204:	b480      	push	{r7}
90002206:	b085      	sub	sp, #20
90002208:	af00      	add	r7, sp, #0
9000220a:	6078      	str	r0, [r7, #4]
9000220c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000220e:	2300      	movs	r3, #0
90002210:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002212:	687b      	ldr	r3, [r7, #4]
90002214:	2b00      	cmp	r3, #0
90002216:	d003      	beq.n	90002220 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002218:	f06f 0301 	mvn.w	r3, #1
9000221c:	60fb      	str	r3, [r7, #12]
9000221e:	e007      	b.n	90002230 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002220:	4a07      	ldr	r2, [pc, #28]	@ (90002240 <BSP_LCD_GetPixelFormat+0x3c>)
90002222:	687b      	ldr	r3, [r7, #4]
90002224:	015b      	lsls	r3, r3, #5
90002226:	4413      	add	r3, r2
90002228:	330c      	adds	r3, #12
9000222a:	681a      	ldr	r2, [r3, #0]
9000222c:	683b      	ldr	r3, [r7, #0]
9000222e:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002230:	68fb      	ldr	r3, [r7, #12]
}
90002232:	4618      	mov	r0, r3
90002234:	3714      	adds	r7, #20
90002236:	46bd      	mov	sp, r7
90002238:	f85d 7b04 	ldr.w	r7, [sp], #4
9000223c:	4770      	bx	lr
9000223e:	bf00      	nop
90002240:	200011fc 	.word	0x200011fc

90002244 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002244:	b480      	push	{r7}
90002246:	b085      	sub	sp, #20
90002248:	af00      	add	r7, sp, #0
9000224a:	6078      	str	r0, [r7, #4]
9000224c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000224e:	2300      	movs	r3, #0
90002250:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002252:	687b      	ldr	r3, [r7, #4]
90002254:	2b00      	cmp	r3, #0
90002256:	d003      	beq.n	90002260 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002258:	f06f 0301 	mvn.w	r3, #1
9000225c:	60fb      	str	r3, [r7, #12]
9000225e:	e006      	b.n	9000226e <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90002260:	4a06      	ldr	r2, [pc, #24]	@ (9000227c <BSP_LCD_SetActiveLayer+0x38>)
90002262:	687b      	ldr	r3, [r7, #4]
90002264:	015b      	lsls	r3, r3, #5
90002266:	4413      	add	r3, r2
90002268:	3308      	adds	r3, #8
9000226a:	683a      	ldr	r2, [r7, #0]
9000226c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000226e:	68fb      	ldr	r3, [r7, #12]
}
90002270:	4618      	mov	r0, r3
90002272:	3714      	adds	r7, #20
90002274:	46bd      	mov	sp, r7
90002276:	f85d 7b04 	ldr.w	r7, [sp], #4
9000227a:	4770      	bx	lr
9000227c:	200011fc 	.word	0x200011fc

90002280 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002280:	b480      	push	{r7}
90002282:	b085      	sub	sp, #20
90002284:	af00      	add	r7, sp, #0
90002286:	6078      	str	r0, [r7, #4]
90002288:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000228a:	2300      	movs	r3, #0
9000228c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000228e:	687b      	ldr	r3, [r7, #4]
90002290:	2b00      	cmp	r3, #0
90002292:	d003      	beq.n	9000229c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002294:	f06f 0301 	mvn.w	r3, #1
90002298:	60fb      	str	r3, [r7, #12]
9000229a:	e006      	b.n	900022aa <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
9000229c:	4a06      	ldr	r2, [pc, #24]	@ (900022b8 <BSP_LCD_GetXSize+0x38>)
9000229e:	687b      	ldr	r3, [r7, #4]
900022a0:	015b      	lsls	r3, r3, #5
900022a2:	4413      	add	r3, r2
900022a4:	681a      	ldr	r2, [r3, #0]
900022a6:	683b      	ldr	r3, [r7, #0]
900022a8:	601a      	str	r2, [r3, #0]
  }

  return ret;
900022aa:	68fb      	ldr	r3, [r7, #12]
}
900022ac:	4618      	mov	r0, r3
900022ae:	3714      	adds	r7, #20
900022b0:	46bd      	mov	sp, r7
900022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
900022b6:	4770      	bx	lr
900022b8:	200011fc 	.word	0x200011fc

900022bc <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
900022bc:	b480      	push	{r7}
900022be:	b085      	sub	sp, #20
900022c0:	af00      	add	r7, sp, #0
900022c2:	6078      	str	r0, [r7, #4]
900022c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900022c6:	2300      	movs	r3, #0
900022c8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900022ca:	687b      	ldr	r3, [r7, #4]
900022cc:	2b00      	cmp	r3, #0
900022ce:	d003      	beq.n	900022d8 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900022d0:	f06f 0301 	mvn.w	r3, #1
900022d4:	60fb      	str	r3, [r7, #12]
900022d6:	e007      	b.n	900022e8 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
900022d8:	4a07      	ldr	r2, [pc, #28]	@ (900022f8 <BSP_LCD_GetYSize+0x3c>)
900022da:	687b      	ldr	r3, [r7, #4]
900022dc:	015b      	lsls	r3, r3, #5
900022de:	4413      	add	r3, r2
900022e0:	3304      	adds	r3, #4
900022e2:	681a      	ldr	r2, [r3, #0]
900022e4:	683b      	ldr	r3, [r7, #0]
900022e6:	601a      	str	r2, [r3, #0]
  }

  return ret;
900022e8:	68fb      	ldr	r3, [r7, #12]
}
900022ea:	4618      	mov	r0, r3
900022ec:	3714      	adds	r7, #20
900022ee:	46bd      	mov	sp, r7
900022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900022f4:	4770      	bx	lr
900022f6:	bf00      	nop
900022f8:	200011fc 	.word	0x200011fc

900022fc <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
900022fc:	b580      	push	{r7, lr}
900022fe:	b08e      	sub	sp, #56	@ 0x38
90002300:	af02      	add	r7, sp, #8
90002302:	60f8      	str	r0, [r7, #12]
90002304:	60b9      	str	r1, [r7, #8]
90002306:	607a      	str	r2, [r7, #4]
90002308:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000230a:	2300      	movs	r3, #0
9000230c:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
9000230e:	683b      	ldr	r3, [r7, #0]
90002310:	330a      	adds	r3, #10
90002312:	781b      	ldrb	r3, [r3, #0]
90002314:	461a      	mov	r2, r3
90002316:	683b      	ldr	r3, [r7, #0]
90002318:	330b      	adds	r3, #11
9000231a:	781b      	ldrb	r3, [r3, #0]
9000231c:	021b      	lsls	r3, r3, #8
9000231e:	441a      	add	r2, r3
90002320:	683b      	ldr	r3, [r7, #0]
90002322:	330c      	adds	r3, #12
90002324:	781b      	ldrb	r3, [r3, #0]
90002326:	041b      	lsls	r3, r3, #16
90002328:	441a      	add	r2, r3
9000232a:	683b      	ldr	r3, [r7, #0]
9000232c:	330d      	adds	r3, #13
9000232e:	781b      	ldrb	r3, [r3, #0]
90002330:	061b      	lsls	r3, r3, #24
90002332:	4413      	add	r3, r2
90002334:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90002336:	683b      	ldr	r3, [r7, #0]
90002338:	3312      	adds	r3, #18
9000233a:	781b      	ldrb	r3, [r3, #0]
9000233c:	461a      	mov	r2, r3
9000233e:	683b      	ldr	r3, [r7, #0]
90002340:	3313      	adds	r3, #19
90002342:	781b      	ldrb	r3, [r3, #0]
90002344:	021b      	lsls	r3, r3, #8
90002346:	441a      	add	r2, r3
90002348:	683b      	ldr	r3, [r7, #0]
9000234a:	3314      	adds	r3, #20
9000234c:	781b      	ldrb	r3, [r3, #0]
9000234e:	041b      	lsls	r3, r3, #16
90002350:	441a      	add	r2, r3
90002352:	683b      	ldr	r3, [r7, #0]
90002354:	3315      	adds	r3, #21
90002356:	781b      	ldrb	r3, [r3, #0]
90002358:	061b      	lsls	r3, r3, #24
9000235a:	4413      	add	r3, r2
9000235c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
9000235e:	683b      	ldr	r3, [r7, #0]
90002360:	3316      	adds	r3, #22
90002362:	781b      	ldrb	r3, [r3, #0]
90002364:	461a      	mov	r2, r3
90002366:	683b      	ldr	r3, [r7, #0]
90002368:	3317      	adds	r3, #23
9000236a:	781b      	ldrb	r3, [r3, #0]
9000236c:	021b      	lsls	r3, r3, #8
9000236e:	441a      	add	r2, r3
90002370:	683b      	ldr	r3, [r7, #0]
90002372:	3318      	adds	r3, #24
90002374:	781b      	ldrb	r3, [r3, #0]
90002376:	041b      	lsls	r3, r3, #16
90002378:	441a      	add	r2, r3
9000237a:	683b      	ldr	r3, [r7, #0]
9000237c:	3319      	adds	r3, #25
9000237e:	781b      	ldrb	r3, [r3, #0]
90002380:	061b      	lsls	r3, r3, #24
90002382:	4413      	add	r3, r2
90002384:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
90002386:	683b      	ldr	r3, [r7, #0]
90002388:	331c      	adds	r3, #28
9000238a:	781b      	ldrb	r3, [r3, #0]
9000238c:	461a      	mov	r2, r3
9000238e:	683b      	ldr	r3, [r7, #0]
90002390:	331d      	adds	r3, #29
90002392:	781b      	ldrb	r3, [r3, #0]
90002394:	021b      	lsls	r3, r3, #8
90002396:	4413      	add	r3, r2
90002398:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
9000239a:	4a37      	ldr	r2, [pc, #220]	@ (90002478 <BSP_LCD_DrawBitmap+0x17c>)
9000239c:	68fb      	ldr	r3, [r7, #12]
9000239e:	015b      	lsls	r3, r3, #5
900023a0:	4413      	add	r3, r2
900023a2:	3308      	adds	r3, #8
900023a4:	681b      	ldr	r3, [r3, #0]
900023a6:	4a35      	ldr	r2, [pc, #212]	@ (9000247c <BSP_LCD_DrawBitmap+0x180>)
900023a8:	2134      	movs	r1, #52	@ 0x34
900023aa:	fb01 f303 	mul.w	r3, r1, r3
900023ae:	4413      	add	r3, r2
900023b0:	335c      	adds	r3, #92	@ 0x5c
900023b2:	681a      	ldr	r2, [r3, #0]
900023b4:	4930      	ldr	r1, [pc, #192]	@ (90002478 <BSP_LCD_DrawBitmap+0x17c>)
900023b6:	68fb      	ldr	r3, [r7, #12]
900023b8:	015b      	lsls	r3, r3, #5
900023ba:	440b      	add	r3, r1
900023bc:	681b      	ldr	r3, [r3, #0]
900023be:	6879      	ldr	r1, [r7, #4]
900023c0:	fb03 f101 	mul.w	r1, r3, r1
900023c4:	68bb      	ldr	r3, [r7, #8]
900023c6:	440b      	add	r3, r1
900023c8:	482b      	ldr	r0, [pc, #172]	@ (90002478 <BSP_LCD_DrawBitmap+0x17c>)
900023ca:	68f9      	ldr	r1, [r7, #12]
900023cc:	0149      	lsls	r1, r1, #5
900023ce:	4401      	add	r1, r0
900023d0:	3110      	adds	r1, #16
900023d2:	6809      	ldr	r1, [r1, #0]
900023d4:	fb01 f303 	mul.w	r3, r1, r3
900023d8:	4413      	add	r3, r2
900023da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
900023dc:	693b      	ldr	r3, [r7, #16]
900023de:	3b20      	subs	r3, #32
900023e0:	2b07      	cmp	r3, #7
900023e2:	d802      	bhi.n	900023ea <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
900023e4:	2300      	movs	r3, #0
900023e6:	627b      	str	r3, [r7, #36]	@ 0x24
900023e8:	e008      	b.n	900023fc <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
900023ea:	693b      	ldr	r3, [r7, #16]
900023ec:	3b10      	subs	r3, #16
900023ee:	2b07      	cmp	r3, #7
900023f0:	d802      	bhi.n	900023f8 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
900023f2:	2302      	movs	r3, #2
900023f4:	627b      	str	r3, [r7, #36]	@ 0x24
900023f6:	e001      	b.n	900023fc <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
900023f8:	2301      	movs	r3, #1
900023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
900023fc:	697b      	ldr	r3, [r7, #20]
900023fe:	3b01      	subs	r3, #1
90002400:	69ba      	ldr	r2, [r7, #24]
90002402:	fb02 f303 	mul.w	r3, r2, r3
90002406:	693a      	ldr	r2, [r7, #16]
90002408:	08d2      	lsrs	r2, r2, #3
9000240a:	fb03 f202 	mul.w	r2, r3, r2
9000240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002410:	4413      	add	r3, r2
90002412:	683a      	ldr	r2, [r7, #0]
90002414:	4413      	add	r3, r2
90002416:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002418:	2300      	movs	r3, #0
9000241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
9000241c:	e023      	b.n	90002466 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
9000241e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
90002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002422:	9300      	str	r3, [sp, #0]
90002424:	69bb      	ldr	r3, [r7, #24]
90002426:	6a39      	ldr	r1, [r7, #32]
90002428:	68f8      	ldr	r0, [r7, #12]
9000242a:	f000 fa77 	bl	9000291c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000242e:	4a12      	ldr	r2, [pc, #72]	@ (90002478 <BSP_LCD_DrawBitmap+0x17c>)
90002430:	68fb      	ldr	r3, [r7, #12]
90002432:	015b      	lsls	r3, r3, #5
90002434:	4413      	add	r3, r2
90002436:	681b      	ldr	r3, [r3, #0]
90002438:	490f      	ldr	r1, [pc, #60]	@ (90002478 <BSP_LCD_DrawBitmap+0x17c>)
9000243a:	68fa      	ldr	r2, [r7, #12]
9000243c:	0152      	lsls	r2, r2, #5
9000243e:	440a      	add	r2, r1
90002440:	3210      	adds	r2, #16
90002442:	6812      	ldr	r2, [r2, #0]
90002444:	fb02 f303 	mul.w	r3, r2, r3
90002448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
9000244a:	4413      	add	r3, r2
9000244c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
9000244e:	693b      	ldr	r3, [r7, #16]
90002450:	08db      	lsrs	r3, r3, #3
90002452:	69ba      	ldr	r2, [r7, #24]
90002454:	fb02 f303 	mul.w	r3, r2, r3
90002458:	425b      	negs	r3, r3
9000245a:	6a3a      	ldr	r2, [r7, #32]
9000245c:	4413      	add	r3, r2
9000245e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90002460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002462:	3301      	adds	r3, #1
90002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
90002466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
90002468:	697b      	ldr	r3, [r7, #20]
9000246a:	429a      	cmp	r2, r3
9000246c:	d3d7      	bcc.n	9000241e <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
9000246e:	69fb      	ldr	r3, [r7, #28]
}
90002470:	4618      	mov	r0, r3
90002472:	3730      	adds	r7, #48	@ 0x30
90002474:	46bd      	mov	sp, r7
90002476:	bd80      	pop	{r7, pc}
90002478:	200011fc 	.word	0x200011fc
9000247c:	20001154 	.word	0x20001154

90002480 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002480:	b580      	push	{r7, lr}
90002482:	b088      	sub	sp, #32
90002484:	af00      	add	r7, sp, #0
90002486:	60f8      	str	r0, [r7, #12]
90002488:	60b9      	str	r1, [r7, #8]
9000248a:	607a      	str	r2, [r7, #4]
9000248c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
9000248e:	683b      	ldr	r3, [r7, #0]
90002490:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90002492:	2300      	movs	r3, #0
90002494:	61fb      	str	r3, [r7, #28]
90002496:	e032      	b.n	900024fe <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002498:	2300      	movs	r3, #0
9000249a:	617b      	str	r3, [r7, #20]
9000249c:	e028      	b.n	900024f0 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
9000249e:	69bb      	ldr	r3, [r7, #24]
900024a0:	781b      	ldrb	r3, [r3, #0]
900024a2:	461a      	mov	r2, r3
900024a4:	69bb      	ldr	r3, [r7, #24]
900024a6:	3301      	adds	r3, #1
900024a8:	781b      	ldrb	r3, [r3, #0]
900024aa:	021b      	lsls	r3, r3, #8
900024ac:	431a      	orrs	r2, r3
900024ae:	69bb      	ldr	r3, [r7, #24]
900024b0:	3302      	adds	r3, #2
900024b2:	781b      	ldrb	r3, [r3, #0]
900024b4:	041b      	lsls	r3, r3, #16
900024b6:	431a      	orrs	r2, r3
900024b8:	69bb      	ldr	r3, [r7, #24]
900024ba:	3303      	adds	r3, #3
900024bc:	781b      	ldrb	r3, [r3, #0]
900024be:	061b      	lsls	r3, r3, #24
900024c0:	4313      	orrs	r3, r2
900024c2:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
900024c4:	68ba      	ldr	r2, [r7, #8]
900024c6:	697b      	ldr	r3, [r7, #20]
900024c8:	18d1      	adds	r1, r2, r3
900024ca:	687a      	ldr	r2, [r7, #4]
900024cc:	69fb      	ldr	r3, [r7, #28]
900024ce:	441a      	add	r2, r3
900024d0:	693b      	ldr	r3, [r7, #16]
900024d2:	68f8      	ldr	r0, [r7, #12]
900024d4:	f000 f95e 	bl	90002794 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
900024d8:	4a0d      	ldr	r2, [pc, #52]	@ (90002510 <BSP_LCD_FillRGBRect+0x90>)
900024da:	68fb      	ldr	r3, [r7, #12]
900024dc:	015b      	lsls	r3, r3, #5
900024de:	4413      	add	r3, r2
900024e0:	3310      	adds	r3, #16
900024e2:	681b      	ldr	r3, [r3, #0]
900024e4:	69ba      	ldr	r2, [r7, #24]
900024e6:	4413      	add	r3, r2
900024e8:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
900024ea:	697b      	ldr	r3, [r7, #20]
900024ec:	3301      	adds	r3, #1
900024ee:	617b      	str	r3, [r7, #20]
900024f0:	697a      	ldr	r2, [r7, #20]
900024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
900024f4:	429a      	cmp	r2, r3
900024f6:	d3d2      	bcc.n	9000249e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
900024f8:	69fb      	ldr	r3, [r7, #28]
900024fa:	3301      	adds	r3, #1
900024fc:	61fb      	str	r3, [r7, #28]
900024fe:	69fa      	ldr	r2, [r7, #28]
90002500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90002502:	429a      	cmp	r2, r3
90002504:	d3c8      	bcc.n	90002498 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
90002506:	2300      	movs	r3, #0
}
90002508:	4618      	mov	r0, r3
9000250a:	3720      	adds	r7, #32
9000250c:	46bd      	mov	sp, r7
9000250e:	bd80      	pop	{r7, pc}
90002510:	200011fc 	.word	0x200011fc

90002514 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002514:	b580      	push	{r7, lr}
90002516:	b088      	sub	sp, #32
90002518:	af02      	add	r7, sp, #8
9000251a:	60f8      	str	r0, [r7, #12]
9000251c:	60b9      	str	r1, [r7, #8]
9000251e:	607a      	str	r2, [r7, #4]
90002520:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002522:	4a21      	ldr	r2, [pc, #132]	@ (900025a8 <BSP_LCD_DrawHLine+0x94>)
90002524:	68fb      	ldr	r3, [r7, #12]
90002526:	015b      	lsls	r3, r3, #5
90002528:	4413      	add	r3, r2
9000252a:	3308      	adds	r3, #8
9000252c:	681b      	ldr	r3, [r3, #0]
9000252e:	4a1f      	ldr	r2, [pc, #124]	@ (900025ac <BSP_LCD_DrawHLine+0x98>)
90002530:	2134      	movs	r1, #52	@ 0x34
90002532:	fb01 f303 	mul.w	r3, r1, r3
90002536:	4413      	add	r3, r2
90002538:	335c      	adds	r3, #92	@ 0x5c
9000253a:	681a      	ldr	r2, [r3, #0]
9000253c:	491a      	ldr	r1, [pc, #104]	@ (900025a8 <BSP_LCD_DrawHLine+0x94>)
9000253e:	68fb      	ldr	r3, [r7, #12]
90002540:	015b      	lsls	r3, r3, #5
90002542:	440b      	add	r3, r1
90002544:	3310      	adds	r3, #16
90002546:	681b      	ldr	r3, [r3, #0]
90002548:	4817      	ldr	r0, [pc, #92]	@ (900025a8 <BSP_LCD_DrawHLine+0x94>)
9000254a:	68f9      	ldr	r1, [r7, #12]
9000254c:	0149      	lsls	r1, r1, #5
9000254e:	4401      	add	r1, r0
90002550:	6809      	ldr	r1, [r1, #0]
90002552:	6878      	ldr	r0, [r7, #4]
90002554:	fb01 f000 	mul.w	r0, r1, r0
90002558:	68b9      	ldr	r1, [r7, #8]
9000255a:	4401      	add	r1, r0
9000255c:	fb01 f303 	mul.w	r3, r1, r3
90002560:	4413      	add	r3, r2
90002562:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002564:	68ba      	ldr	r2, [r7, #8]
90002566:	683b      	ldr	r3, [r7, #0]
90002568:	441a      	add	r2, r3
9000256a:	490f      	ldr	r1, [pc, #60]	@ (900025a8 <BSP_LCD_DrawHLine+0x94>)
9000256c:	68fb      	ldr	r3, [r7, #12]
9000256e:	015b      	lsls	r3, r3, #5
90002570:	440b      	add	r3, r1
90002572:	681b      	ldr	r3, [r3, #0]
90002574:	429a      	cmp	r2, r3
90002576:	d907      	bls.n	90002588 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002578:	4a0b      	ldr	r2, [pc, #44]	@ (900025a8 <BSP_LCD_DrawHLine+0x94>)
9000257a:	68fb      	ldr	r3, [r7, #12]
9000257c:	015b      	lsls	r3, r3, #5
9000257e:	4413      	add	r3, r2
90002580:	681a      	ldr	r2, [r3, #0]
90002582:	68bb      	ldr	r3, [r7, #8]
90002584:	1ad3      	subs	r3, r2, r3
90002586:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90002588:	6979      	ldr	r1, [r7, #20]
9000258a:	6a3b      	ldr	r3, [r7, #32]
9000258c:	9301      	str	r3, [sp, #4]
9000258e:	2300      	movs	r3, #0
90002590:	9300      	str	r3, [sp, #0]
90002592:	2301      	movs	r3, #1
90002594:	683a      	ldr	r2, [r7, #0]
90002596:	68f8      	ldr	r0, [r7, #12]
90002598:	f000 f956 	bl	90002848 <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000259c:	2300      	movs	r3, #0
}
9000259e:	4618      	mov	r0, r3
900025a0:	3718      	adds	r7, #24
900025a2:	46bd      	mov	sp, r7
900025a4:	bd80      	pop	{r7, pc}
900025a6:	bf00      	nop
900025a8:	200011fc 	.word	0x200011fc
900025ac:	20001154 	.word	0x20001154

900025b0 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900025b0:	b580      	push	{r7, lr}
900025b2:	b088      	sub	sp, #32
900025b4:	af02      	add	r7, sp, #8
900025b6:	60f8      	str	r0, [r7, #12]
900025b8:	60b9      	str	r1, [r7, #8]
900025ba:	607a      	str	r2, [r7, #4]
900025bc:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900025be:	4a24      	ldr	r2, [pc, #144]	@ (90002650 <BSP_LCD_DrawVLine+0xa0>)
900025c0:	68fb      	ldr	r3, [r7, #12]
900025c2:	015b      	lsls	r3, r3, #5
900025c4:	4413      	add	r3, r2
900025c6:	3308      	adds	r3, #8
900025c8:	681b      	ldr	r3, [r3, #0]
900025ca:	4a22      	ldr	r2, [pc, #136]	@ (90002654 <BSP_LCD_DrawVLine+0xa4>)
900025cc:	2134      	movs	r1, #52	@ 0x34
900025ce:	fb01 f303 	mul.w	r3, r1, r3
900025d2:	4413      	add	r3, r2
900025d4:	335c      	adds	r3, #92	@ 0x5c
900025d6:	681a      	ldr	r2, [r3, #0]
900025d8:	491d      	ldr	r1, [pc, #116]	@ (90002650 <BSP_LCD_DrawVLine+0xa0>)
900025da:	68fb      	ldr	r3, [r7, #12]
900025dc:	015b      	lsls	r3, r3, #5
900025de:	440b      	add	r3, r1
900025e0:	3310      	adds	r3, #16
900025e2:	681b      	ldr	r3, [r3, #0]
900025e4:	481a      	ldr	r0, [pc, #104]	@ (90002650 <BSP_LCD_DrawVLine+0xa0>)
900025e6:	68f9      	ldr	r1, [r7, #12]
900025e8:	0149      	lsls	r1, r1, #5
900025ea:	4401      	add	r1, r0
900025ec:	6809      	ldr	r1, [r1, #0]
900025ee:	6878      	ldr	r0, [r7, #4]
900025f0:	fb01 f000 	mul.w	r0, r1, r0
900025f4:	68b9      	ldr	r1, [r7, #8]
900025f6:	4401      	add	r1, r0
900025f8:	fb01 f303 	mul.w	r3, r1, r3
900025fc:	4413      	add	r3, r2
900025fe:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
90002600:	687a      	ldr	r2, [r7, #4]
90002602:	683b      	ldr	r3, [r7, #0]
90002604:	441a      	add	r2, r3
90002606:	4912      	ldr	r1, [pc, #72]	@ (90002650 <BSP_LCD_DrawVLine+0xa0>)
90002608:	68fb      	ldr	r3, [r7, #12]
9000260a:	015b      	lsls	r3, r3, #5
9000260c:	440b      	add	r3, r1
9000260e:	3304      	adds	r3, #4
90002610:	681b      	ldr	r3, [r3, #0]
90002612:	429a      	cmp	r2, r3
90002614:	d908      	bls.n	90002628 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90002616:	4a0e      	ldr	r2, [pc, #56]	@ (90002650 <BSP_LCD_DrawVLine+0xa0>)
90002618:	68fb      	ldr	r3, [r7, #12]
9000261a:	015b      	lsls	r3, r3, #5
9000261c:	4413      	add	r3, r2
9000261e:	3304      	adds	r3, #4
90002620:	681a      	ldr	r2, [r3, #0]
90002622:	687b      	ldr	r3, [r7, #4]
90002624:	1ad3      	subs	r3, r2, r3
90002626:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002628:	6979      	ldr	r1, [r7, #20]
9000262a:	4a09      	ldr	r2, [pc, #36]	@ (90002650 <BSP_LCD_DrawVLine+0xa0>)
9000262c:	68fb      	ldr	r3, [r7, #12]
9000262e:	015b      	lsls	r3, r3, #5
90002630:	4413      	add	r3, r2
90002632:	681b      	ldr	r3, [r3, #0]
90002634:	3b01      	subs	r3, #1
90002636:	6a3a      	ldr	r2, [r7, #32]
90002638:	9201      	str	r2, [sp, #4]
9000263a:	9300      	str	r3, [sp, #0]
9000263c:	683b      	ldr	r3, [r7, #0]
9000263e:	2201      	movs	r2, #1
90002640:	68f8      	ldr	r0, [r7, #12]
90002642:	f000 f901 	bl	90002848 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002646:	2300      	movs	r3, #0
}
90002648:	4618      	mov	r0, r3
9000264a:	3718      	adds	r7, #24
9000264c:	46bd      	mov	sp, r7
9000264e:	bd80      	pop	{r7, pc}
90002650:	200011fc 	.word	0x200011fc
90002654:	20001154 	.word	0x20001154

90002658 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90002658:	b580      	push	{r7, lr}
9000265a:	b088      	sub	sp, #32
9000265c:	af02      	add	r7, sp, #8
9000265e:	60f8      	str	r0, [r7, #12]
90002660:	60b9      	str	r1, [r7, #8]
90002662:	607a      	str	r2, [r7, #4]
90002664:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002666:	4a1b      	ldr	r2, [pc, #108]	@ (900026d4 <BSP_LCD_FillRect+0x7c>)
90002668:	68fb      	ldr	r3, [r7, #12]
9000266a:	015b      	lsls	r3, r3, #5
9000266c:	4413      	add	r3, r2
9000266e:	3308      	adds	r3, #8
90002670:	681b      	ldr	r3, [r3, #0]
90002672:	4a19      	ldr	r2, [pc, #100]	@ (900026d8 <BSP_LCD_FillRect+0x80>)
90002674:	2134      	movs	r1, #52	@ 0x34
90002676:	fb01 f303 	mul.w	r3, r1, r3
9000267a:	4413      	add	r3, r2
9000267c:	335c      	adds	r3, #92	@ 0x5c
9000267e:	681a      	ldr	r2, [r3, #0]
90002680:	4914      	ldr	r1, [pc, #80]	@ (900026d4 <BSP_LCD_FillRect+0x7c>)
90002682:	68fb      	ldr	r3, [r7, #12]
90002684:	015b      	lsls	r3, r3, #5
90002686:	440b      	add	r3, r1
90002688:	3310      	adds	r3, #16
9000268a:	681b      	ldr	r3, [r3, #0]
9000268c:	4811      	ldr	r0, [pc, #68]	@ (900026d4 <BSP_LCD_FillRect+0x7c>)
9000268e:	68f9      	ldr	r1, [r7, #12]
90002690:	0149      	lsls	r1, r1, #5
90002692:	4401      	add	r1, r0
90002694:	6809      	ldr	r1, [r1, #0]
90002696:	6878      	ldr	r0, [r7, #4]
90002698:	fb01 f000 	mul.w	r0, r1, r0
9000269c:	68b9      	ldr	r1, [r7, #8]
9000269e:	4401      	add	r1, r0
900026a0:	fb01 f303 	mul.w	r3, r1, r3
900026a4:	4413      	add	r3, r2
900026a6:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
900026a8:	6979      	ldr	r1, [r7, #20]
900026aa:	4a0a      	ldr	r2, [pc, #40]	@ (900026d4 <BSP_LCD_FillRect+0x7c>)
900026ac:	68fb      	ldr	r3, [r7, #12]
900026ae:	015b      	lsls	r3, r3, #5
900026b0:	4413      	add	r3, r2
900026b2:	681a      	ldr	r2, [r3, #0]
900026b4:	683b      	ldr	r3, [r7, #0]
900026b6:	1ad3      	subs	r3, r2, r3
900026b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
900026ba:	9201      	str	r2, [sp, #4]
900026bc:	9300      	str	r3, [sp, #0]
900026be:	6a3b      	ldr	r3, [r7, #32]
900026c0:	683a      	ldr	r2, [r7, #0]
900026c2:	68f8      	ldr	r0, [r7, #12]
900026c4:	f000 f8c0 	bl	90002848 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900026c8:	2300      	movs	r3, #0
}
900026ca:	4618      	mov	r0, r3
900026cc:	3718      	adds	r7, #24
900026ce:	46bd      	mov	sp, r7
900026d0:	bd80      	pop	{r7, pc}
900026d2:	bf00      	nop
900026d4:	200011fc 	.word	0x200011fc
900026d8:	20001154 	.word	0x20001154

900026dc <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
900026dc:	b480      	push	{r7}
900026de:	b085      	sub	sp, #20
900026e0:	af00      	add	r7, sp, #0
900026e2:	60f8      	str	r0, [r7, #12]
900026e4:	60b9      	str	r1, [r7, #8]
900026e6:	607a      	str	r2, [r7, #4]
900026e8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900026ea:	4a28      	ldr	r2, [pc, #160]	@ (9000278c <BSP_LCD_ReadPixel+0xb0>)
900026ec:	68fb      	ldr	r3, [r7, #12]
900026ee:	015b      	lsls	r3, r3, #5
900026f0:	4413      	add	r3, r2
900026f2:	3308      	adds	r3, #8
900026f4:	681b      	ldr	r3, [r3, #0]
900026f6:	4a26      	ldr	r2, [pc, #152]	@ (90002790 <BSP_LCD_ReadPixel+0xb4>)
900026f8:	2134      	movs	r1, #52	@ 0x34
900026fa:	fb01 f303 	mul.w	r3, r1, r3
900026fe:	4413      	add	r3, r2
90002700:	3348      	adds	r3, #72	@ 0x48
90002702:	681b      	ldr	r3, [r3, #0]
90002704:	2b00      	cmp	r3, #0
90002706:	d11c      	bne.n	90002742 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002708:	4a20      	ldr	r2, [pc, #128]	@ (9000278c <BSP_LCD_ReadPixel+0xb0>)
9000270a:	68fb      	ldr	r3, [r7, #12]
9000270c:	015b      	lsls	r3, r3, #5
9000270e:	4413      	add	r3, r2
90002710:	3308      	adds	r3, #8
90002712:	681b      	ldr	r3, [r3, #0]
90002714:	4a1e      	ldr	r2, [pc, #120]	@ (90002790 <BSP_LCD_ReadPixel+0xb4>)
90002716:	2134      	movs	r1, #52	@ 0x34
90002718:	fb01 f303 	mul.w	r3, r1, r3
9000271c:	4413      	add	r3, r2
9000271e:	335c      	adds	r3, #92	@ 0x5c
90002720:	681a      	ldr	r2, [r3, #0]
90002722:	491a      	ldr	r1, [pc, #104]	@ (9000278c <BSP_LCD_ReadPixel+0xb0>)
90002724:	68fb      	ldr	r3, [r7, #12]
90002726:	015b      	lsls	r3, r3, #5
90002728:	440b      	add	r3, r1
9000272a:	681b      	ldr	r3, [r3, #0]
9000272c:	6879      	ldr	r1, [r7, #4]
9000272e:	fb03 f101 	mul.w	r1, r3, r1
90002732:	68bb      	ldr	r3, [r7, #8]
90002734:	440b      	add	r3, r1
90002736:	009b      	lsls	r3, r3, #2
90002738:	4413      	add	r3, r2
9000273a:	681a      	ldr	r2, [r3, #0]
9000273c:	683b      	ldr	r3, [r7, #0]
9000273e:	601a      	str	r2, [r3, #0]
90002740:	e01d      	b.n	9000277e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002742:	4a12      	ldr	r2, [pc, #72]	@ (9000278c <BSP_LCD_ReadPixel+0xb0>)
90002744:	68fb      	ldr	r3, [r7, #12]
90002746:	015b      	lsls	r3, r3, #5
90002748:	4413      	add	r3, r2
9000274a:	3308      	adds	r3, #8
9000274c:	681b      	ldr	r3, [r3, #0]
9000274e:	4a10      	ldr	r2, [pc, #64]	@ (90002790 <BSP_LCD_ReadPixel+0xb4>)
90002750:	2134      	movs	r1, #52	@ 0x34
90002752:	fb01 f303 	mul.w	r3, r1, r3
90002756:	4413      	add	r3, r2
90002758:	335c      	adds	r3, #92	@ 0x5c
9000275a:	681a      	ldr	r2, [r3, #0]
9000275c:	490b      	ldr	r1, [pc, #44]	@ (9000278c <BSP_LCD_ReadPixel+0xb0>)
9000275e:	68fb      	ldr	r3, [r7, #12]
90002760:	015b      	lsls	r3, r3, #5
90002762:	440b      	add	r3, r1
90002764:	681b      	ldr	r3, [r3, #0]
90002766:	6879      	ldr	r1, [r7, #4]
90002768:	fb03 f101 	mul.w	r1, r3, r1
9000276c:	68bb      	ldr	r3, [r7, #8]
9000276e:	440b      	add	r3, r1
90002770:	005b      	lsls	r3, r3, #1
90002772:	4413      	add	r3, r2
90002774:	881b      	ldrh	r3, [r3, #0]
90002776:	b29b      	uxth	r3, r3
90002778:	461a      	mov	r2, r3
9000277a:	683b      	ldr	r3, [r7, #0]
9000277c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000277e:	2300      	movs	r3, #0
}
90002780:	4618      	mov	r0, r3
90002782:	3714      	adds	r7, #20
90002784:	46bd      	mov	sp, r7
90002786:	f85d 7b04 	ldr.w	r7, [sp], #4
9000278a:	4770      	bx	lr
9000278c:	200011fc 	.word	0x200011fc
90002790:	20001154 	.word	0x20001154

90002794 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002794:	b480      	push	{r7}
90002796:	b085      	sub	sp, #20
90002798:	af00      	add	r7, sp, #0
9000279a:	60f8      	str	r0, [r7, #12]
9000279c:	60b9      	str	r1, [r7, #8]
9000279e:	607a      	str	r2, [r7, #4]
900027a0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900027a2:	4a27      	ldr	r2, [pc, #156]	@ (90002840 <BSP_LCD_WritePixel+0xac>)
900027a4:	68fb      	ldr	r3, [r7, #12]
900027a6:	015b      	lsls	r3, r3, #5
900027a8:	4413      	add	r3, r2
900027aa:	3308      	adds	r3, #8
900027ac:	681b      	ldr	r3, [r3, #0]
900027ae:	4a25      	ldr	r2, [pc, #148]	@ (90002844 <BSP_LCD_WritePixel+0xb0>)
900027b0:	2134      	movs	r1, #52	@ 0x34
900027b2:	fb01 f303 	mul.w	r3, r1, r3
900027b6:	4413      	add	r3, r2
900027b8:	3348      	adds	r3, #72	@ 0x48
900027ba:	681b      	ldr	r3, [r3, #0]
900027bc:	2b00      	cmp	r3, #0
900027be:	d11c      	bne.n	900027fa <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
900027c0:	4a1f      	ldr	r2, [pc, #124]	@ (90002840 <BSP_LCD_WritePixel+0xac>)
900027c2:	68fb      	ldr	r3, [r7, #12]
900027c4:	015b      	lsls	r3, r3, #5
900027c6:	4413      	add	r3, r2
900027c8:	3308      	adds	r3, #8
900027ca:	681b      	ldr	r3, [r3, #0]
900027cc:	4a1d      	ldr	r2, [pc, #116]	@ (90002844 <BSP_LCD_WritePixel+0xb0>)
900027ce:	2134      	movs	r1, #52	@ 0x34
900027d0:	fb01 f303 	mul.w	r3, r1, r3
900027d4:	4413      	add	r3, r2
900027d6:	335c      	adds	r3, #92	@ 0x5c
900027d8:	681a      	ldr	r2, [r3, #0]
900027da:	4919      	ldr	r1, [pc, #100]	@ (90002840 <BSP_LCD_WritePixel+0xac>)
900027dc:	68fb      	ldr	r3, [r7, #12]
900027de:	015b      	lsls	r3, r3, #5
900027e0:	440b      	add	r3, r1
900027e2:	681b      	ldr	r3, [r3, #0]
900027e4:	6879      	ldr	r1, [r7, #4]
900027e6:	fb03 f101 	mul.w	r1, r3, r1
900027ea:	68bb      	ldr	r3, [r7, #8]
900027ec:	440b      	add	r3, r1
900027ee:	009b      	lsls	r3, r3, #2
900027f0:	4413      	add	r3, r2
900027f2:	461a      	mov	r2, r3
900027f4:	683b      	ldr	r3, [r7, #0]
900027f6:	6013      	str	r3, [r2, #0]
900027f8:	e01b      	b.n	90002832 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
900027fa:	4a11      	ldr	r2, [pc, #68]	@ (90002840 <BSP_LCD_WritePixel+0xac>)
900027fc:	68fb      	ldr	r3, [r7, #12]
900027fe:	015b      	lsls	r3, r3, #5
90002800:	4413      	add	r3, r2
90002802:	3308      	adds	r3, #8
90002804:	681b      	ldr	r3, [r3, #0]
90002806:	4a0f      	ldr	r2, [pc, #60]	@ (90002844 <BSP_LCD_WritePixel+0xb0>)
90002808:	2134      	movs	r1, #52	@ 0x34
9000280a:	fb01 f303 	mul.w	r3, r1, r3
9000280e:	4413      	add	r3, r2
90002810:	335c      	adds	r3, #92	@ 0x5c
90002812:	681a      	ldr	r2, [r3, #0]
90002814:	490a      	ldr	r1, [pc, #40]	@ (90002840 <BSP_LCD_WritePixel+0xac>)
90002816:	68fb      	ldr	r3, [r7, #12]
90002818:	015b      	lsls	r3, r3, #5
9000281a:	440b      	add	r3, r1
9000281c:	681b      	ldr	r3, [r3, #0]
9000281e:	6879      	ldr	r1, [r7, #4]
90002820:	fb03 f101 	mul.w	r1, r3, r1
90002824:	68bb      	ldr	r3, [r7, #8]
90002826:	440b      	add	r3, r1
90002828:	005b      	lsls	r3, r3, #1
9000282a:	4413      	add	r3, r2
9000282c:	683a      	ldr	r2, [r7, #0]
9000282e:	b292      	uxth	r2, r2
90002830:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002832:	2300      	movs	r3, #0
}
90002834:	4618      	mov	r0, r3
90002836:	3714      	adds	r7, #20
90002838:	46bd      	mov	sp, r7
9000283a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000283e:	4770      	bx	lr
90002840:	200011fc 	.word	0x200011fc
90002844:	20001154 	.word	0x20001154

90002848 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002848:	b580      	push	{r7, lr}
9000284a:	b088      	sub	sp, #32
9000284c:	af02      	add	r7, sp, #8
9000284e:	60f8      	str	r0, [r7, #12]
90002850:	60b9      	str	r1, [r7, #8]
90002852:	607a      	str	r2, [r7, #4]
90002854:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002858:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
9000285a:	4a2d      	ldr	r2, [pc, #180]	@ (90002910 <LL_FillBuffer+0xc8>)
9000285c:	68fb      	ldr	r3, [r7, #12]
9000285e:	015b      	lsls	r3, r3, #5
90002860:	4413      	add	r3, r2
90002862:	330c      	adds	r3, #12
90002864:	681b      	ldr	r3, [r3, #0]
90002866:	2b02      	cmp	r3, #2
90002868:	d129      	bne.n	900028be <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000286a:	2302      	movs	r3, #2
9000286c:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
9000286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002870:	0adb      	lsrs	r3, r3, #11
90002872:	f003 021f 	and.w	r2, r3, #31
90002876:	4613      	mov	r3, r2
90002878:	011b      	lsls	r3, r3, #4
9000287a:	4413      	add	r3, r2
9000287c:	015a      	lsls	r2, r3, #5
9000287e:	1ad3      	subs	r3, r2, r3
90002880:	3317      	adds	r3, #23
90002882:	099b      	lsrs	r3, r3, #6
90002884:	0419      	lsls	r1, r3, #16
90002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90002888:	095b      	lsrs	r3, r3, #5
9000288a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
9000288e:	4613      	mov	r3, r2
90002890:	01db      	lsls	r3, r3, #7
90002892:	4413      	add	r3, r2
90002894:	005b      	lsls	r3, r3, #1
90002896:	4413      	add	r3, r2
90002898:	3321      	adds	r3, #33	@ 0x21
9000289a:	099b      	lsrs	r3, r3, #6
9000289c:	021b      	lsls	r3, r3, #8
9000289e:	4319      	orrs	r1, r3
900028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900028a2:	f003 021f 	and.w	r2, r3, #31
900028a6:	4613      	mov	r3, r2
900028a8:	011b      	lsls	r3, r3, #4
900028aa:	4413      	add	r3, r2
900028ac:	015a      	lsls	r2, r3, #5
900028ae:	1ad3      	subs	r3, r2, r3
900028b0:	3317      	adds	r3, #23
900028b2:	099b      	lsrs	r3, r3, #6
900028b4:	430b      	orrs	r3, r1
900028b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
900028ba:	613b      	str	r3, [r7, #16]
    break;
900028bc:	e002      	b.n	900028c4 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
900028be:	2300      	movs	r3, #0
900028c0:	617b      	str	r3, [r7, #20]
    break;
900028c2:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
900028c4:	4b13      	ldr	r3, [pc, #76]	@ (90002914 <LL_FillBuffer+0xcc>)
900028c6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
900028ca:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900028cc:	4a11      	ldr	r2, [pc, #68]	@ (90002914 <LL_FillBuffer+0xcc>)
900028ce:	697b      	ldr	r3, [r7, #20]
900028d0:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
900028d2:	4a10      	ldr	r2, [pc, #64]	@ (90002914 <LL_FillBuffer+0xcc>)
900028d4:	6a3b      	ldr	r3, [r7, #32]
900028d6:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
900028d8:	4b0e      	ldr	r3, [pc, #56]	@ (90002914 <LL_FillBuffer+0xcc>)
900028da:	4a0f      	ldr	r2, [pc, #60]	@ (90002918 <LL_FillBuffer+0xd0>)
900028dc:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900028de:	480d      	ldr	r0, [pc, #52]	@ (90002914 <LL_FillBuffer+0xcc>)
900028e0:	f000 fe50 	bl	90003584 <HAL_DMA2D_Init>
900028e4:	4603      	mov	r3, r0
900028e6:	2b00      	cmp	r3, #0
900028e8:	d10e      	bne.n	90002908 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900028ea:	68ba      	ldr	r2, [r7, #8]
900028ec:	683b      	ldr	r3, [r7, #0]
900028ee:	9300      	str	r3, [sp, #0]
900028f0:	687b      	ldr	r3, [r7, #4]
900028f2:	6939      	ldr	r1, [r7, #16]
900028f4:	4807      	ldr	r0, [pc, #28]	@ (90002914 <LL_FillBuffer+0xcc>)
900028f6:	f000 feb3 	bl	90003660 <HAL_DMA2D_Start>
900028fa:	4603      	mov	r3, r0
900028fc:	2b00      	cmp	r3, #0
900028fe:	d103      	bne.n	90002908 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002900:	2132      	movs	r1, #50	@ 0x32
90002902:	4804      	ldr	r0, [pc, #16]	@ (90002914 <LL_FillBuffer+0xcc>)
90002904:	f000 fed7 	bl	900036b6 <HAL_DMA2D_PollForTransfer>
    }
  }
}
90002908:	bf00      	nop
9000290a:	3718      	adds	r7, #24
9000290c:	46bd      	mov	sp, r7
9000290e:	bd80      	pop	{r7, pc}
90002910:	200011fc 	.word	0x200011fc
90002914:	200010ec 	.word	0x200010ec
90002918:	52001000 	.word	0x52001000

9000291c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
9000291c:	b580      	push	{r7, lr}
9000291e:	b088      	sub	sp, #32
90002920:	af02      	add	r7, sp, #8
90002922:	60f8      	str	r0, [r7, #12]
90002924:	60b9      	str	r1, [r7, #8]
90002926:	607a      	str	r2, [r7, #4]
90002928:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
9000292a:	4a23      	ldr	r2, [pc, #140]	@ (900029b8 <LL_ConvertLineToRGB+0x9c>)
9000292c:	68fb      	ldr	r3, [r7, #12]
9000292e:	015b      	lsls	r3, r3, #5
90002930:	4413      	add	r3, r2
90002932:	330c      	adds	r3, #12
90002934:	681b      	ldr	r3, [r3, #0]
90002936:	2b02      	cmp	r3, #2
90002938:	d102      	bne.n	90002940 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000293a:	2302      	movs	r3, #2
9000293c:	617b      	str	r3, [r7, #20]
    break;
9000293e:	e002      	b.n	90002946 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002940:	2300      	movs	r3, #0
90002942:	617b      	str	r3, [r7, #20]
    break;
90002944:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002946:	4b1d      	ldr	r3, [pc, #116]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
90002948:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
9000294c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
9000294e:	4a1b      	ldr	r2, [pc, #108]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
90002950:	697b      	ldr	r3, [r7, #20]
90002952:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002954:	4b19      	ldr	r3, [pc, #100]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
90002956:	2200      	movs	r2, #0
90002958:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
9000295a:	4b18      	ldr	r3, [pc, #96]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
9000295c:	2200      	movs	r2, #0
9000295e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002960:	4b16      	ldr	r3, [pc, #88]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
90002962:	22ff      	movs	r2, #255	@ 0xff
90002964:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002966:	4a15      	ldr	r2, [pc, #84]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
90002968:	6a3b      	ldr	r3, [r7, #32]
9000296a:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
9000296c:	4b13      	ldr	r3, [pc, #76]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
9000296e:	2200      	movs	r2, #0
90002970:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
90002972:	4b12      	ldr	r3, [pc, #72]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
90002974:	4a12      	ldr	r2, [pc, #72]	@ (900029c0 <LL_ConvertLineToRGB+0xa4>)
90002976:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002978:	4810      	ldr	r0, [pc, #64]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
9000297a:	f000 fe03 	bl	90003584 <HAL_DMA2D_Init>
9000297e:	4603      	mov	r3, r0
90002980:	2b00      	cmp	r3, #0
90002982:	d115      	bne.n	900029b0 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002984:	2101      	movs	r1, #1
90002986:	480d      	ldr	r0, [pc, #52]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
90002988:	f000 ff7e 	bl	90003888 <HAL_DMA2D_ConfigLayer>
9000298c:	4603      	mov	r3, r0
9000298e:	2b00      	cmp	r3, #0
90002990:	d10e      	bne.n	900029b0 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002992:	68b9      	ldr	r1, [r7, #8]
90002994:	687a      	ldr	r2, [r7, #4]
90002996:	2301      	movs	r3, #1
90002998:	9300      	str	r3, [sp, #0]
9000299a:	683b      	ldr	r3, [r7, #0]
9000299c:	4807      	ldr	r0, [pc, #28]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
9000299e:	f000 fe5f 	bl	90003660 <HAL_DMA2D_Start>
900029a2:	4603      	mov	r3, r0
900029a4:	2b00      	cmp	r3, #0
900029a6:	d103      	bne.n	900029b0 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900029a8:	2132      	movs	r1, #50	@ 0x32
900029aa:	4804      	ldr	r0, [pc, #16]	@ (900029bc <LL_ConvertLineToRGB+0xa0>)
900029ac:	f000 fe83 	bl	900036b6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
900029b0:	bf00      	nop
900029b2:	3718      	adds	r7, #24
900029b4:	46bd      	mov	sp, r7
900029b6:	bd80      	pop	{r7, pc}
900029b8:	200011fc 	.word	0x200011fc
900029bc:	200010ec 	.word	0x200010ec
900029c0:	52001000 	.word	0x52001000

900029c4 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900029c4:	b580      	push	{r7, lr}
900029c6:	b08e      	sub	sp, #56	@ 0x38
900029c8:	af00      	add	r7, sp, #0
900029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
900029cc:	687b      	ldr	r3, [r7, #4]
900029ce:	681b      	ldr	r3, [r3, #0]
900029d0:	4a5b      	ldr	r2, [pc, #364]	@ (90002b40 <LTDC_MspInit+0x17c>)
900029d2:	4293      	cmp	r3, r2
900029d4:	f040 80b0 	bne.w	90002b38 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
900029d8:	4b5a      	ldr	r3, [pc, #360]	@ (90002b44 <LTDC_MspInit+0x180>)
900029da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
900029de:	4a59      	ldr	r2, [pc, #356]	@ (90002b44 <LTDC_MspInit+0x180>)
900029e0:	f043 0308 	orr.w	r3, r3, #8
900029e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
900029e8:	4b56      	ldr	r3, [pc, #344]	@ (90002b44 <LTDC_MspInit+0x180>)
900029ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
900029ee:	f003 0308 	and.w	r3, r3, #8
900029f2:	623b      	str	r3, [r7, #32]
900029f4:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
900029f6:	4b53      	ldr	r3, [pc, #332]	@ (90002b44 <LTDC_MspInit+0x180>)
900029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
900029fc:	4a51      	ldr	r2, [pc, #324]	@ (90002b44 <LTDC_MspInit+0x180>)
900029fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a06:	4b4f      	ldr	r3, [pc, #316]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90002a10:	61fb      	str	r3, [r7, #28]
90002a12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002a14:	4b4b      	ldr	r3, [pc, #300]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a1a:	4a4a      	ldr	r2, [pc, #296]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
90002a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a24:	4b47      	ldr	r3, [pc, #284]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90002a2e:	61bb      	str	r3, [r7, #24]
90002a30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002a32:	4b44      	ldr	r3, [pc, #272]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a38:	4a42      	ldr	r2, [pc, #264]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a42:	4b40      	ldr	r3, [pc, #256]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002a4c:	617b      	str	r3, [r7, #20]
90002a4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002a50:	4b3c      	ldr	r3, [pc, #240]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a56:	4a3b      	ldr	r2, [pc, #236]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a60:	4b38      	ldr	r3, [pc, #224]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002a6a:	613b      	str	r3, [r7, #16]
90002a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90002a6e:	4b35      	ldr	r3, [pc, #212]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a74:	4a33      	ldr	r2, [pc, #204]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a76:	f043 0308 	orr.w	r3, r3, #8
90002a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002a7e:	4b31      	ldr	r3, [pc, #196]	@ (90002b44 <LTDC_MspInit+0x180>)
90002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002a84:	f003 0308 	and.w	r3, r3, #8
90002a88:	60fb      	str	r3, [r7, #12]
90002a8a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
90002a8c:	f24d 2303 	movw	r3, #53763	@ 0xd203
90002a90:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002a92:	2302      	movs	r3, #2
90002a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002a96:	2300      	movs	r3, #0
90002a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002a9a:	2302      	movs	r3, #2
90002a9c:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002a9e:	230e      	movs	r3, #14
90002aa0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002aa6:	4619      	mov	r1, r3
90002aa8:	4827      	ldr	r0, [pc, #156]	@ (90002b48 <LTDC_MspInit+0x184>)
90002aaa:	f001 f841 	bl	90003b30 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
90002aae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
90002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002ab4:	230e      	movs	r3, #14
90002ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002abc:	4619      	mov	r1, r3
90002abe:	4823      	ldr	r0, [pc, #140]	@ (90002b4c <LTDC_MspInit+0x188>)
90002ac0:	f001 f836 	bl	90003b30 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90002ac4:	23ff      	movs	r3, #255	@ 0xff
90002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002ac8:	230e      	movs	r3, #14
90002aca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002ad0:	4619      	mov	r1, r3
90002ad2:	481f      	ldr	r0, [pc, #124]	@ (90002b50 <LTDC_MspInit+0x18c>)
90002ad4:	f001 f82c 	bl	90003b30 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
90002ad8:	f240 2302 	movw	r3, #514	@ 0x202
90002adc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002ade:	2302      	movs	r3, #2
90002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002ae2:	2300      	movs	r3, #0
90002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90002ae6:	2302      	movs	r3, #2
90002ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002aea:	230e      	movs	r3, #14
90002aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002af2:	4619      	mov	r1, r3
90002af4:	4817      	ldr	r0, [pc, #92]	@ (90002b54 <LTDC_MspInit+0x190>)
90002af6:	f001 f81b 	bl	90003b30 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
90002afa:	2380      	movs	r3, #128	@ 0x80
90002afc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002afe:	2301      	movs	r3, #1
90002b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002b06:	4619      	mov	r1, r3
90002b08:	4813      	ldr	r0, [pc, #76]	@ (90002b58 <LTDC_MspInit+0x194>)
90002b0a:	f001 f811 	bl	90003b30 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
90002b0e:	2201      	movs	r2, #1
90002b10:	2180      	movs	r1, #128	@ 0x80
90002b12:	4811      	ldr	r0, [pc, #68]	@ (90002b58 <LTDC_MspInit+0x194>)
90002b14:	f001 f9d4 	bl	90003ec0 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002b18:	4b0a      	ldr	r3, [pc, #40]	@ (90002b44 <LTDC_MspInit+0x180>)
90002b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002b1e:	4a09      	ldr	r2, [pc, #36]	@ (90002b44 <LTDC_MspInit+0x180>)
90002b20:	f043 0308 	orr.w	r3, r3, #8
90002b24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002b28:	4b06      	ldr	r3, [pc, #24]	@ (90002b44 <LTDC_MspInit+0x180>)
90002b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90002b2e:	4a05      	ldr	r2, [pc, #20]	@ (90002b44 <LTDC_MspInit+0x180>)
90002b30:	f023 0308 	bic.w	r3, r3, #8
90002b34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
90002b38:	bf00      	nop
90002b3a:	3738      	adds	r7, #56	@ 0x38
90002b3c:	46bd      	mov	sp, r7
90002b3e:	bd80      	pop	{r7, pc}
90002b40:	50001000 	.word	0x50001000
90002b44:	58024400 	.word	0x58024400
90002b48:	58022000 	.word	0x58022000
90002b4c:	58022400 	.word	0x58022400
90002b50:	58022800 	.word	0x58022800
90002b54:	58021c00 	.word	0x58021c00
90002b58:	58020c00 	.word	0x58020c00

90002b5c <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002b5c:	b480      	push	{r7}
90002b5e:	b085      	sub	sp, #20
90002b60:	af00      	add	r7, sp, #0
90002b62:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002b64:	687b      	ldr	r3, [r7, #4]
90002b66:	681b      	ldr	r3, [r3, #0]
90002b68:	4a11      	ldr	r2, [pc, #68]	@ (90002bb0 <DMA2D_MspInit+0x54>)
90002b6a:	4293      	cmp	r3, r2
90002b6c:	d11a      	bne.n	90002ba4 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90002b6e:	4b11      	ldr	r3, [pc, #68]	@ (90002bb4 <DMA2D_MspInit+0x58>)
90002b70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002b74:	4a0f      	ldr	r2, [pc, #60]	@ (90002bb4 <DMA2D_MspInit+0x58>)
90002b76:	f043 0310 	orr.w	r3, r3, #16
90002b7a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (90002bb4 <DMA2D_MspInit+0x58>)
90002b80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002b84:	f003 0310 	and.w	r3, r3, #16
90002b88:	60fb      	str	r3, [r7, #12]
90002b8a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
90002b8c:	4b09      	ldr	r3, [pc, #36]	@ (90002bb4 <DMA2D_MspInit+0x58>)
90002b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002b90:	4a08      	ldr	r2, [pc, #32]	@ (90002bb4 <DMA2D_MspInit+0x58>)
90002b92:	f043 0310 	orr.w	r3, r3, #16
90002b96:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002b98:	4b06      	ldr	r3, [pc, #24]	@ (90002bb4 <DMA2D_MspInit+0x58>)
90002b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90002b9c:	4a05      	ldr	r2, [pc, #20]	@ (90002bb4 <DMA2D_MspInit+0x58>)
90002b9e:	f023 0310 	bic.w	r3, r3, #16
90002ba2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
90002ba4:	bf00      	nop
90002ba6:	3714      	adds	r7, #20
90002ba8:	46bd      	mov	sp, r7
90002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
90002bae:	4770      	bx	lr
90002bb0:	52001000 	.word	0x52001000
90002bb4:	58024400 	.word	0x58024400

90002bb8 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002bb8:	b580      	push	{r7, lr}
90002bba:	b08a      	sub	sp, #40	@ 0x28
90002bbc:	af00      	add	r7, sp, #0
90002bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90002bc0:	4b18      	ldr	r3, [pc, #96]	@ (90002c24 <TIMx_PWM_MspInit+0x6c>)
90002bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bc6:	4a17      	ldr	r2, [pc, #92]	@ (90002c24 <TIMx_PWM_MspInit+0x6c>)
90002bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
90002bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002bd0:	4b14      	ldr	r3, [pc, #80]	@ (90002c24 <TIMx_PWM_MspInit+0x6c>)
90002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90002bda:	613b      	str	r3, [r7, #16]
90002bdc:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
90002bde:	4b11      	ldr	r3, [pc, #68]	@ (90002c24 <TIMx_PWM_MspInit+0x6c>)
90002be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002be4:	4a0f      	ldr	r2, [pc, #60]	@ (90002c24 <TIMx_PWM_MspInit+0x6c>)
90002be6:	f043 0302 	orr.w	r3, r3, #2
90002bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
90002bee:	4b0d      	ldr	r3, [pc, #52]	@ (90002c24 <TIMx_PWM_MspInit+0x6c>)
90002bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
90002bf4:	f003 0302 	and.w	r3, r3, #2
90002bf8:	60fb      	str	r3, [r7, #12]
90002bfa:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
90002bfc:	2302      	movs	r3, #2
90002bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
90002c00:	2300      	movs	r3, #0
90002c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
90002c04:	2301      	movs	r3, #1
90002c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
90002c08:	2303      	movs	r3, #3
90002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
90002c0c:	2301      	movs	r3, #1
90002c0e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002c10:	f107 0314 	add.w	r3, r7, #20
90002c14:	4619      	mov	r1, r3
90002c16:	4804      	ldr	r0, [pc, #16]	@ (90002c28 <TIMx_PWM_MspInit+0x70>)
90002c18:	f000 ff8a 	bl	90003b30 <HAL_GPIO_Init>
}
90002c1c:	bf00      	nop
90002c1e:	3728      	adds	r7, #40	@ 0x28
90002c20:	46bd      	mov	sp, r7
90002c22:	bd80      	pop	{r7, pc}
90002c24:	58024400 	.word	0x58024400
90002c28:	58022800 	.word	0x58022800

90002c2c <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002c2c:	b580      	push	{r7, lr}
90002c2e:	b082      	sub	sp, #8
90002c30:	af00      	add	r7, sp, #0
90002c32:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002c34:	687b      	ldr	r3, [r7, #4]
90002c36:	4a11      	ldr	r2, [pc, #68]	@ (90002c7c <TIMx_PWM_Init+0x50>)
90002c38:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002c3a:	6878      	ldr	r0, [r7, #4]
90002c3c:	f006 fe82 	bl	90009944 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002c40:	6878      	ldr	r0, [r7, #4]
90002c42:	f7ff ffb9 	bl	90002bb8 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002c46:	687b      	ldr	r3, [r7, #4]
90002c48:	2204      	movs	r2, #4
90002c4a:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002c4c:	687b      	ldr	r3, [r7, #4]
90002c4e:	f24c 3250 	movw	r2, #50000	@ 0xc350
90002c52:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002c54:	687b      	ldr	r3, [r7, #4]
90002c56:	2200      	movs	r2, #0
90002c58:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002c5a:	687b      	ldr	r3, [r7, #4]
90002c5c:	2200      	movs	r2, #0
90002c5e:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002c60:	687b      	ldr	r3, [r7, #4]
90002c62:	2200      	movs	r2, #0
90002c64:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002c66:	687b      	ldr	r3, [r7, #4]
90002c68:	2200      	movs	r2, #0
90002c6a:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002c6c:	6878      	ldr	r0, [r7, #4]
90002c6e:	f006 fe12 	bl	90009896 <HAL_TIM_PWM_Init>
}
90002c72:	bf00      	nop
90002c74:	3708      	adds	r7, #8
90002c76:	46bd      	mov	sp, r7
90002c78:	bd80      	pop	{r7, pc}
90002c7a:	bf00      	nop
90002c7c:	40010400 	.word	0x40010400

90002c80 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002c80:	b580      	push	{r7, lr}
90002c82:	b084      	sub	sp, #16
90002c84:	af00      	add	r7, sp, #0
90002c86:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002c88:	2300      	movs	r3, #0
90002c8a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002c8c:	687b      	ldr	r3, [r7, #4]
90002c8e:	2b00      	cmp	r3, #0
90002c90:	d003      	beq.n	90002c9a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002c92:	f06f 0301 	mvn.w	r3, #1
90002c96:	60fb      	str	r3, [r7, #12]
90002c98:	e044      	b.n	90002d24 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002c9a:	687b      	ldr	r3, [r7, #4]
90002c9c:	2234      	movs	r2, #52	@ 0x34
90002c9e:	fb02 f303 	mul.w	r3, r2, r3
90002ca2:	4a23      	ldr	r2, [pc, #140]	@ (90002d30 <BSP_SDRAM_Init+0xb0>)
90002ca4:	4413      	add	r3, r2
90002ca6:	4618      	mov	r0, r3
90002ca8:	f000 f892 	bl	90002dd0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002cac:	687b      	ldr	r3, [r7, #4]
90002cae:	2234      	movs	r2, #52	@ 0x34
90002cb0:	fb02 f303 	mul.w	r3, r2, r3
90002cb4:	4a1e      	ldr	r2, [pc, #120]	@ (90002d30 <BSP_SDRAM_Init+0xb0>)
90002cb6:	4413      	add	r3, r2
90002cb8:	2210      	movs	r2, #16
90002cba:	2104      	movs	r1, #4
90002cbc:	4618      	mov	r0, r3
90002cbe:	f000 f83b 	bl	90002d38 <MX_SDRAM_BANK2_Init>
90002cc2:	4603      	mov	r3, r0
90002cc4:	2b00      	cmp	r3, #0
90002cc6:	d003      	beq.n	90002cd0 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002cc8:	f04f 33ff 	mov.w	r3, #4294967295
90002ccc:	60fb      	str	r3, [r7, #12]
90002cce:	e029      	b.n	90002d24 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002cd0:	4b18      	ldr	r3, [pc, #96]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002cd2:	2208      	movs	r2, #8
90002cd4:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002cd6:	4b17      	ldr	r3, [pc, #92]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002cd8:	2203      	movs	r2, #3
90002cda:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002cdc:	4b15      	ldr	r3, [pc, #84]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002cde:	f240 6203 	movw	r2, #1539	@ 0x603
90002ce2:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002ce4:	4b13      	ldr	r3, [pc, #76]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002ce6:	2200      	movs	r2, #0
90002ce8:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002cea:	4b12      	ldr	r3, [pc, #72]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002cec:	2200      	movs	r2, #0
90002cee:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002cf0:	4b10      	ldr	r3, [pc, #64]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002cf2:	2230      	movs	r2, #48	@ 0x30
90002cf4:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002cf8:	2200      	movs	r2, #0
90002cfa:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002cfc:	4b0d      	ldr	r3, [pc, #52]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002cfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
90002d02:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002d04:	687b      	ldr	r3, [r7, #4]
90002d06:	2234      	movs	r2, #52	@ 0x34
90002d08:	fb02 f303 	mul.w	r3, r2, r3
90002d0c:	4a08      	ldr	r2, [pc, #32]	@ (90002d30 <BSP_SDRAM_Init+0xb0>)
90002d0e:	4413      	add	r3, r2
90002d10:	4908      	ldr	r1, [pc, #32]	@ (90002d34 <BSP_SDRAM_Init+0xb4>)
90002d12:	4618      	mov	r0, r3
90002d14:	f7fe fbdf 	bl	900014d6 <MT48LC4M32B2_Init>
90002d18:	4603      	mov	r3, r0
90002d1a:	2b00      	cmp	r3, #0
90002d1c:	d002      	beq.n	90002d24 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002d1e:	f06f 0304 	mvn.w	r3, #4
90002d22:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002d24:	68fb      	ldr	r3, [r7, #12]
}
90002d26:	4618      	mov	r0, r3
90002d28:	3710      	adds	r7, #16
90002d2a:	46bd      	mov	sp, r7
90002d2c:	bd80      	pop	{r7, pc}
90002d2e:	bf00      	nop
90002d30:	2000121c 	.word	0x2000121c
90002d34:	20001250 	.word	0x20001250

90002d38 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002d38:	b580      	push	{r7, lr}
90002d3a:	b08c      	sub	sp, #48	@ 0x30
90002d3c:	af00      	add	r7, sp, #0
90002d3e:	60f8      	str	r0, [r7, #12]
90002d40:	60b9      	str	r1, [r7, #8]
90002d42:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002d44:	4b20      	ldr	r3, [pc, #128]	@ (90002dc8 <MX_SDRAM_BANK2_Init+0x90>)
90002d46:	4a21      	ldr	r2, [pc, #132]	@ (90002dcc <MX_SDRAM_BANK2_Init+0x94>)
90002d48:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002d4a:	68fb      	ldr	r3, [r7, #12]
90002d4c:	2201      	movs	r2, #1
90002d4e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002d50:	68fb      	ldr	r3, [r7, #12]
90002d52:	2200      	movs	r2, #0
90002d54:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002d56:	68fb      	ldr	r3, [r7, #12]
90002d58:	68ba      	ldr	r2, [r7, #8]
90002d5a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002d5c:	68fb      	ldr	r3, [r7, #12]
90002d5e:	687a      	ldr	r2, [r7, #4]
90002d60:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002d62:	4b19      	ldr	r3, [pc, #100]	@ (90002dc8 <MX_SDRAM_BANK2_Init+0x90>)
90002d64:	2240      	movs	r2, #64	@ 0x40
90002d66:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002d68:	68fb      	ldr	r3, [r7, #12]
90002d6a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
90002d6e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002d70:	68fb      	ldr	r3, [r7, #12]
90002d72:	2200      	movs	r2, #0
90002d74:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002d76:	68fb      	ldr	r3, [r7, #12]
90002d78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
90002d7c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002d7e:	68fb      	ldr	r3, [r7, #12]
90002d80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
90002d84:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002d86:	68fb      	ldr	r3, [r7, #12]
90002d88:	2200      	movs	r2, #0
90002d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002d8c:	2302      	movs	r3, #2
90002d8e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002d90:	2307      	movs	r3, #7
90002d92:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002d94:	2304      	movs	r3, #4
90002d96:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002d98:	2307      	movs	r3, #7
90002d9a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002d9c:	2302      	movs	r3, #2
90002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
90002da0:	2302      	movs	r3, #2
90002da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
90002da4:	2302      	movs	r3, #2
90002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002da8:	f107 0314 	add.w	r3, r7, #20
90002dac:	4619      	mov	r1, r3
90002dae:	68f8      	ldr	r0, [r7, #12]
90002db0:	f006 fcce 	bl	90009750 <HAL_SDRAM_Init>
90002db4:	4603      	mov	r3, r0
90002db6:	2b00      	cmp	r3, #0
90002db8:	d001      	beq.n	90002dbe <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002dba:	2301      	movs	r3, #1
90002dbc:	e000      	b.n	90002dc0 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002dbe:	2300      	movs	r3, #0
}
90002dc0:	4618      	mov	r0, r3
90002dc2:	3730      	adds	r7, #48	@ 0x30
90002dc4:	46bd      	mov	sp, r7
90002dc6:	bd80      	pop	{r7, pc}
90002dc8:	2000121c 	.word	0x2000121c
90002dcc:	52004140 	.word	0x52004140

90002dd0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002dd0:	b580      	push	{r7, lr}
90002dd2:	b08e      	sub	sp, #56	@ 0x38
90002dd4:	af00      	add	r7, sp, #0
90002dd6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002dd8:	4b73      	ldr	r3, [pc, #460]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002dda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002dde:	4a72      	ldr	r2, [pc, #456]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002de0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90002de4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002de8:	4b6f      	ldr	r3, [pc, #444]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002dea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002dee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
90002df2:	623b      	str	r3, [r7, #32]
90002df4:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002df6:	4b6c      	ldr	r3, [pc, #432]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002df8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002dfc:	4a6a      	ldr	r2, [pc, #424]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002dfe:	f043 0301 	orr.w	r3, r3, #1
90002e02:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
90002e06:	4b68      	ldr	r3, [pc, #416]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
90002e0c:	f003 0301 	and.w	r3, r3, #1
90002e10:	61fb      	str	r3, [r7, #28]
90002e12:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002e14:	4b64      	ldr	r3, [pc, #400]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e1a:	4a63      	ldr	r2, [pc, #396]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e1c:	f043 0308 	orr.w	r3, r3, #8
90002e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e24:	4b60      	ldr	r3, [pc, #384]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e2a:	f003 0308 	and.w	r3, r3, #8
90002e2e:	61bb      	str	r3, [r7, #24]
90002e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002e32:	4b5d      	ldr	r3, [pc, #372]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e38:	4a5b      	ldr	r2, [pc, #364]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e3a:	f043 0310 	orr.w	r3, r3, #16
90002e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e42:	4b59      	ldr	r3, [pc, #356]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e48:	f003 0310 	and.w	r3, r3, #16
90002e4c:	617b      	str	r3, [r7, #20]
90002e4e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002e50:	4b55      	ldr	r3, [pc, #340]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e56:	4a54      	ldr	r2, [pc, #336]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e58:	f043 0320 	orr.w	r3, r3, #32
90002e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e60:	4b51      	ldr	r3, [pc, #324]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e66:	f003 0320 	and.w	r3, r3, #32
90002e6a:	613b      	str	r3, [r7, #16]
90002e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002e6e:	4b4e      	ldr	r3, [pc, #312]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e74:	4a4c      	ldr	r2, [pc, #304]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90002e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e7e:	4b4a      	ldr	r3, [pc, #296]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90002e88:	60fb      	str	r3, [r7, #12]
90002e8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002e8c:	4b46      	ldr	r3, [pc, #280]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002e92:	4a45      	ldr	r2, [pc, #276]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90002e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
90002e9c:	4b42      	ldr	r3, [pc, #264]	@ (90002fa8 <SDRAM_MspInit+0x1d8>)
90002e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
90002ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
90002ea6:	60bb      	str	r3, [r7, #8]
90002ea8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002eaa:	2302      	movs	r3, #2
90002eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002eae:	2301      	movs	r3, #1
90002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002eb2:	2303      	movs	r3, #3
90002eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002eb6:	230c      	movs	r3, #12
90002eb8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002eba:	f24c 7303 	movw	r3, #50947	@ 0xc703
90002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002ec4:	4619      	mov	r1, r3
90002ec6:	4839      	ldr	r0, [pc, #228]	@ (90002fac <SDRAM_MspInit+0x1dc>)
90002ec8:	f000 fe32 	bl	90003b30 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002ecc:	f64f 7383 	movw	r3, #65411	@ 0xff83
90002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002ed6:	4619      	mov	r1, r3
90002ed8:	4835      	ldr	r0, [pc, #212]	@ (90002fb0 <SDRAM_MspInit+0x1e0>)
90002eda:	f000 fe29 	bl	90003b30 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002ede:	f64f 033f 	movw	r3, #63551	@ 0xf83f
90002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002ee8:	4619      	mov	r1, r3
90002eea:	4832      	ldr	r0, [pc, #200]	@ (90002fb4 <SDRAM_MspInit+0x1e4>)
90002eec:	f000 fe20 	bl	90003b30 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002ef0:	f248 1333 	movw	r3, #33075	@ 0x8133
90002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002efa:	4619      	mov	r1, r3
90002efc:	482e      	ldr	r0, [pc, #184]	@ (90002fb8 <SDRAM_MspInit+0x1e8>)
90002efe:	f000 fe17 	bl	90003b30 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002f02:	23e0      	movs	r3, #224	@ 0xe0
90002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
90002f0a:	4619      	mov	r1, r3
90002f0c:	482b      	ldr	r0, [pc, #172]	@ (90002fbc <SDRAM_MspInit+0x1ec>)
90002f0e:	f000 fe0f 	bl	90003b30 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002f12:	4b2b      	ldr	r3, [pc, #172]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
90002f18:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002f1a:	4b29      	ldr	r3, [pc, #164]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
90002f20:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002f22:	4b27      	ldr	r3, [pc, #156]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f24:	2280      	movs	r2, #128	@ 0x80
90002f26:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002f28:	4b25      	ldr	r3, [pc, #148]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f2a:	2200      	movs	r2, #0
90002f2c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002f2e:	4b24      	ldr	r3, [pc, #144]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f30:	f240 2202 	movw	r2, #514	@ 0x202
90002f34:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002f36:	4b22      	ldr	r3, [pc, #136]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f38:	f640 0208 	movw	r2, #2056	@ 0x808
90002f3c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002f3e:	4b20      	ldr	r3, [pc, #128]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f40:	2220      	movs	r2, #32
90002f42:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002f44:	4b1e      	ldr	r3, [pc, #120]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f46:	2280      	movs	r2, #128	@ 0x80
90002f48:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002f4a:	4b1d      	ldr	r3, [pc, #116]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
90002f50:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002f52:	4b1b      	ldr	r3, [pc, #108]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f54:	2200      	movs	r2, #0
90002f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002f58:	4b19      	ldr	r3, [pc, #100]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f5a:	2200      	movs	r2, #0
90002f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002f5e:	4b18      	ldr	r3, [pc, #96]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f60:	2280      	movs	r2, #128	@ 0x80
90002f62:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002f64:	4b16      	ldr	r3, [pc, #88]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f66:	2200      	movs	r2, #0
90002f68:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002f6a:	4b15      	ldr	r3, [pc, #84]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f6c:	2200      	movs	r2, #0
90002f6e:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002f70:	4b13      	ldr	r3, [pc, #76]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f72:	4a14      	ldr	r2, [pc, #80]	@ (90002fc4 <SDRAM_MspInit+0x1f4>)
90002f74:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002f76:	4b14      	ldr	r3, [pc, #80]	@ (90002fc8 <SDRAM_MspInit+0x1f8>)
90002f78:	4a11      	ldr	r2, [pc, #68]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f7a:	631a      	str	r2, [r3, #48]	@ 0x30
90002f7c:	4b10      	ldr	r3, [pc, #64]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f7e:	4a12      	ldr	r2, [pc, #72]	@ (90002fc8 <SDRAM_MspInit+0x1f8>)
90002f80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002f82:	480f      	ldr	r0, [pc, #60]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f84:	f003 fce2 	bl	9000694c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002f88:	480d      	ldr	r0, [pc, #52]	@ (90002fc0 <SDRAM_MspInit+0x1f0>)
90002f8a:	f003 fc93 	bl	900068b4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002f8e:	2200      	movs	r2, #0
90002f90:	210f      	movs	r1, #15
90002f92:	207a      	movs	r0, #122	@ 0x7a
90002f94:	f000 fa49 	bl	9000342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002f98:	207a      	movs	r0, #122	@ 0x7a
90002f9a:	f000 fa60 	bl	9000345e <HAL_NVIC_EnableIRQ>
}
90002f9e:	bf00      	nop
90002fa0:	3738      	adds	r7, #56	@ 0x38
90002fa2:	46bd      	mov	sp, r7
90002fa4:	bd80      	pop	{r7, pc}
90002fa6:	bf00      	nop
90002fa8:	58024400 	.word	0x58024400
90002fac:	58020c00 	.word	0x58020c00
90002fb0:	58021000 	.word	0x58021000
90002fb4:	58021400 	.word	0x58021400
90002fb8:	58021800 	.word	0x58021800
90002fbc:	58021c00 	.word	0x58021c00
90002fc0:	20001270 	.word	0x20001270
90002fc4:	52000040 	.word	0x52000040
90002fc8:	2000121c 	.word	0x2000121c

90002fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90002fcc:	b480      	push	{r7}
90002fce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90002fd0:	4b29      	ldr	r3, [pc, #164]	@ (90003078 <SystemInit+0xac>)
90002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90002fd6:	4a28      	ldr	r2, [pc, #160]	@ (90003078 <SystemInit+0xac>)
90002fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
90002fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90002fe0:	4b26      	ldr	r3, [pc, #152]	@ (9000307c <SystemInit+0xb0>)
90002fe2:	681b      	ldr	r3, [r3, #0]
90002fe4:	4a25      	ldr	r2, [pc, #148]	@ (9000307c <SystemInit+0xb0>)
90002fe6:	f043 0301 	orr.w	r3, r3, #1
90002fea:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90002fec:	4b23      	ldr	r3, [pc, #140]	@ (9000307c <SystemInit+0xb0>)
90002fee:	2200      	movs	r2, #0
90002ff0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90002ff2:	4b22      	ldr	r3, [pc, #136]	@ (9000307c <SystemInit+0xb0>)
90002ff4:	681a      	ldr	r2, [r3, #0]
90002ff6:	4921      	ldr	r1, [pc, #132]	@ (9000307c <SystemInit+0xb0>)
90002ff8:	4b21      	ldr	r3, [pc, #132]	@ (90003080 <SystemInit+0xb4>)
90002ffa:	4013      	ands	r3, r2
90002ffc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90002ffe:	4b1f      	ldr	r3, [pc, #124]	@ (9000307c <SystemInit+0xb0>)
90003000:	2200      	movs	r2, #0
90003002:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003004:	4b1d      	ldr	r3, [pc, #116]	@ (9000307c <SystemInit+0xb0>)
90003006:	2200      	movs	r2, #0
90003008:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
9000300a:	4b1c      	ldr	r3, [pc, #112]	@ (9000307c <SystemInit+0xb0>)
9000300c:	2200      	movs	r2, #0
9000300e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
90003010:	4b1a      	ldr	r3, [pc, #104]	@ (9000307c <SystemInit+0xb0>)
90003012:	2200      	movs	r2, #0
90003014:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90003016:	4b19      	ldr	r3, [pc, #100]	@ (9000307c <SystemInit+0xb0>)
90003018:	2200      	movs	r2, #0
9000301a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
9000301c:	4b17      	ldr	r3, [pc, #92]	@ (9000307c <SystemInit+0xb0>)
9000301e:	2200      	movs	r2, #0
90003020:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90003022:	4b16      	ldr	r3, [pc, #88]	@ (9000307c <SystemInit+0xb0>)
90003024:	2200      	movs	r2, #0
90003026:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90003028:	4b14      	ldr	r3, [pc, #80]	@ (9000307c <SystemInit+0xb0>)
9000302a:	2200      	movs	r2, #0
9000302c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
9000302e:	4b13      	ldr	r3, [pc, #76]	@ (9000307c <SystemInit+0xb0>)
90003030:	2200      	movs	r2, #0
90003032:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90003034:	4b11      	ldr	r3, [pc, #68]	@ (9000307c <SystemInit+0xb0>)
90003036:	2200      	movs	r2, #0
90003038:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
9000303a:	4b10      	ldr	r3, [pc, #64]	@ (9000307c <SystemInit+0xb0>)
9000303c:	2200      	movs	r2, #0
9000303e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90003040:	4b0e      	ldr	r3, [pc, #56]	@ (9000307c <SystemInit+0xb0>)
90003042:	681b      	ldr	r3, [r3, #0]
90003044:	4a0d      	ldr	r2, [pc, #52]	@ (9000307c <SystemInit+0xb0>)
90003046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
9000304a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
9000304c:	4b0b      	ldr	r3, [pc, #44]	@ (9000307c <SystemInit+0xb0>)
9000304e:	2200      	movs	r2, #0
90003050:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90003052:	4b0c      	ldr	r3, [pc, #48]	@ (90003084 <SystemInit+0xb8>)
90003054:	681a      	ldr	r2, [r3, #0]
90003056:	4b0c      	ldr	r3, [pc, #48]	@ (90003088 <SystemInit+0xbc>)
90003058:	4013      	ands	r3, r2
9000305a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000305e:	d202      	bcs.n	90003066 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
90003060:	4b0a      	ldr	r3, [pc, #40]	@ (9000308c <SystemInit+0xc0>)
90003062:	2201      	movs	r2, #1
90003064:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90003066:	4b04      	ldr	r3, [pc, #16]	@ (90003078 <SystemInit+0xac>)
90003068:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
9000306c:	609a      	str	r2, [r3, #8]
#endif  


}
9000306e:	bf00      	nop
90003070:	46bd      	mov	sp, r7
90003072:	f85d 7b04 	ldr.w	r7, [sp], #4
90003076:	4770      	bx	lr
90003078:	e000ed00 	.word	0xe000ed00
9000307c:	58024400 	.word	0x58024400
90003080:	eaf6ed7f 	.word	0xeaf6ed7f
90003084:	5c001000 	.word	0x5c001000
90003088:	ffff0000 	.word	0xffff0000
9000308c:	51008108 	.word	0x51008108

90003090 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
90003090:	b480      	push	{r7}
90003092:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
90003094:	4b09      	ldr	r3, [pc, #36]	@ (900030bc <ExitRun0Mode+0x2c>)
90003096:	68db      	ldr	r3, [r3, #12]
90003098:	4a08      	ldr	r2, [pc, #32]	@ (900030bc <ExitRun0Mode+0x2c>)
9000309a:	f043 0302 	orr.w	r3, r3, #2
9000309e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
900030a0:	bf00      	nop
900030a2:	4b06      	ldr	r3, [pc, #24]	@ (900030bc <ExitRun0Mode+0x2c>)
900030a4:	685b      	ldr	r3, [r3, #4]
900030a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
900030aa:	2b00      	cmp	r3, #0
900030ac:	d0f9      	beq.n	900030a2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
900030ae:	bf00      	nop
900030b0:	bf00      	nop
900030b2:	46bd      	mov	sp, r7
900030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900030b8:	4770      	bx	lr
900030ba:	bf00      	nop
900030bc:	58024800 	.word	0x58024800

900030c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900030c0:	b580      	push	{r7, lr}
900030c2:	b082      	sub	sp, #8
900030c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900030c6:	2003      	movs	r0, #3
900030c8:	f000 f9a4 	bl	90003414 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900030cc:	f004 fb3e 	bl	9000774c <HAL_RCC_GetSysClockFreq>
900030d0:	4602      	mov	r2, r0
900030d2:	4b15      	ldr	r3, [pc, #84]	@ (90003128 <HAL_Init+0x68>)
900030d4:	699b      	ldr	r3, [r3, #24]
900030d6:	0a1b      	lsrs	r3, r3, #8
900030d8:	f003 030f 	and.w	r3, r3, #15
900030dc:	4913      	ldr	r1, [pc, #76]	@ (9000312c <HAL_Init+0x6c>)
900030de:	5ccb      	ldrb	r3, [r1, r3]
900030e0:	f003 031f 	and.w	r3, r3, #31
900030e4:	fa22 f303 	lsr.w	r3, r2, r3
900030e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900030ea:	4b0f      	ldr	r3, [pc, #60]	@ (90003128 <HAL_Init+0x68>)
900030ec:	699b      	ldr	r3, [r3, #24]
900030ee:	f003 030f 	and.w	r3, r3, #15
900030f2:	4a0e      	ldr	r2, [pc, #56]	@ (9000312c <HAL_Init+0x6c>)
900030f4:	5cd3      	ldrb	r3, [r2, r3]
900030f6:	f003 031f 	and.w	r3, r3, #31
900030fa:	687a      	ldr	r2, [r7, #4]
900030fc:	fa22 f303 	lsr.w	r3, r2, r3
90003100:	4a0b      	ldr	r2, [pc, #44]	@ (90003130 <HAL_Init+0x70>)
90003102:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003104:	4a0b      	ldr	r2, [pc, #44]	@ (90003134 <HAL_Init+0x74>)
90003106:	687b      	ldr	r3, [r7, #4]
90003108:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000310a:	200f      	movs	r0, #15
9000310c:	f000 f81c 	bl	90003148 <HAL_InitTick>
90003110:	4603      	mov	r3, r0
90003112:	2b00      	cmp	r3, #0
90003114:	d001      	beq.n	9000311a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90003116:	2301      	movs	r3, #1
90003118:	e002      	b.n	90003120 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
9000311a:	f000 f80d 	bl	90003138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000311e:	2300      	movs	r3, #0
}
90003120:	4618      	mov	r0, r3
90003122:	3708      	adds	r7, #8
90003124:	46bd      	mov	sp, r7
90003126:	bd80      	pop	{r7, pc}
90003128:	58024400 	.word	0x58024400
9000312c:	9000d678 	.word	0x9000d678
90003130:	2000000c 	.word	0x2000000c
90003134:	20000008 	.word	0x20000008

90003138 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90003138:	b480      	push	{r7}
9000313a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
9000313c:	bf00      	nop
9000313e:	46bd      	mov	sp, r7
90003140:	f85d 7b04 	ldr.w	r7, [sp], #4
90003144:	4770      	bx	lr
	...

90003148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90003148:	b580      	push	{r7, lr}
9000314a:	b082      	sub	sp, #8
9000314c:	af00      	add	r7, sp, #0
9000314e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90003150:	4b15      	ldr	r3, [pc, #84]	@ (900031a8 <HAL_InitTick+0x60>)
90003152:	781b      	ldrb	r3, [r3, #0]
90003154:	2b00      	cmp	r3, #0
90003156:	d101      	bne.n	9000315c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90003158:	2301      	movs	r3, #1
9000315a:	e021      	b.n	900031a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
9000315c:	4b13      	ldr	r3, [pc, #76]	@ (900031ac <HAL_InitTick+0x64>)
9000315e:	681a      	ldr	r2, [r3, #0]
90003160:	4b11      	ldr	r3, [pc, #68]	@ (900031a8 <HAL_InitTick+0x60>)
90003162:	781b      	ldrb	r3, [r3, #0]
90003164:	4619      	mov	r1, r3
90003166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
9000316a:	fbb3 f3f1 	udiv	r3, r3, r1
9000316e:	fbb2 f3f3 	udiv	r3, r2, r3
90003172:	4618      	mov	r0, r3
90003174:	f000 f981 	bl	9000347a <HAL_SYSTICK_Config>
90003178:	4603      	mov	r3, r0
9000317a:	2b00      	cmp	r3, #0
9000317c:	d001      	beq.n	90003182 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
9000317e:	2301      	movs	r3, #1
90003180:	e00e      	b.n	900031a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90003182:	687b      	ldr	r3, [r7, #4]
90003184:	2b0f      	cmp	r3, #15
90003186:	d80a      	bhi.n	9000319e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90003188:	2200      	movs	r2, #0
9000318a:	6879      	ldr	r1, [r7, #4]
9000318c:	f04f 30ff 	mov.w	r0, #4294967295
90003190:	f000 f94b 	bl	9000342a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003194:	4a06      	ldr	r2, [pc, #24]	@ (900031b0 <HAL_InitTick+0x68>)
90003196:	687b      	ldr	r3, [r7, #4]
90003198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000319a:	2300      	movs	r3, #0
9000319c:	e000      	b.n	900031a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
9000319e:	2301      	movs	r3, #1
}
900031a0:	4618      	mov	r0, r3
900031a2:	3708      	adds	r7, #8
900031a4:	46bd      	mov	sp, r7
900031a6:	bd80      	pop	{r7, pc}
900031a8:	20000014 	.word	0x20000014
900031ac:	20000008 	.word	0x20000008
900031b0:	20000010 	.word	0x20000010

900031b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
900031b4:	b480      	push	{r7}
900031b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
900031b8:	4b06      	ldr	r3, [pc, #24]	@ (900031d4 <HAL_IncTick+0x20>)
900031ba:	781b      	ldrb	r3, [r3, #0]
900031bc:	461a      	mov	r2, r3
900031be:	4b06      	ldr	r3, [pc, #24]	@ (900031d8 <HAL_IncTick+0x24>)
900031c0:	681b      	ldr	r3, [r3, #0]
900031c2:	4413      	add	r3, r2
900031c4:	4a04      	ldr	r2, [pc, #16]	@ (900031d8 <HAL_IncTick+0x24>)
900031c6:	6013      	str	r3, [r2, #0]
}
900031c8:	bf00      	nop
900031ca:	46bd      	mov	sp, r7
900031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900031d0:	4770      	bx	lr
900031d2:	bf00      	nop
900031d4:	20000014 	.word	0x20000014
900031d8:	200012dc 	.word	0x200012dc

900031dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900031dc:	b480      	push	{r7}
900031de:	af00      	add	r7, sp, #0
  return uwTick;
900031e0:	4b03      	ldr	r3, [pc, #12]	@ (900031f0 <HAL_GetTick+0x14>)
900031e2:	681b      	ldr	r3, [r3, #0]
}
900031e4:	4618      	mov	r0, r3
900031e6:	46bd      	mov	sp, r7
900031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
900031ec:	4770      	bx	lr
900031ee:	bf00      	nop
900031f0:	200012dc 	.word	0x200012dc

900031f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900031f4:	b580      	push	{r7, lr}
900031f6:	b084      	sub	sp, #16
900031f8:	af00      	add	r7, sp, #0
900031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900031fc:	f7ff ffee 	bl	900031dc <HAL_GetTick>
90003200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90003202:	687b      	ldr	r3, [r7, #4]
90003204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90003206:	68fb      	ldr	r3, [r7, #12]
90003208:	f1b3 3fff 	cmp.w	r3, #4294967295
9000320c:	d005      	beq.n	9000321a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
9000320e:	4b0a      	ldr	r3, [pc, #40]	@ (90003238 <HAL_Delay+0x44>)
90003210:	781b      	ldrb	r3, [r3, #0]
90003212:	461a      	mov	r2, r3
90003214:	68fb      	ldr	r3, [r7, #12]
90003216:	4413      	add	r3, r2
90003218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
9000321a:	bf00      	nop
9000321c:	f7ff ffde 	bl	900031dc <HAL_GetTick>
90003220:	4602      	mov	r2, r0
90003222:	68bb      	ldr	r3, [r7, #8]
90003224:	1ad3      	subs	r3, r2, r3
90003226:	68fa      	ldr	r2, [r7, #12]
90003228:	429a      	cmp	r2, r3
9000322a:	d8f7      	bhi.n	9000321c <HAL_Delay+0x28>
  {
  }
}
9000322c:	bf00      	nop
9000322e:	bf00      	nop
90003230:	3710      	adds	r7, #16
90003232:	46bd      	mov	sp, r7
90003234:	bd80      	pop	{r7, pc}
90003236:	bf00      	nop
90003238:	20000014 	.word	0x20000014

9000323c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
9000323c:	b480      	push	{r7}
9000323e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003240:	4b03      	ldr	r3, [pc, #12]	@ (90003250 <HAL_GetREVID+0x14>)
90003242:	681b      	ldr	r3, [r3, #0]
90003244:	0c1b      	lsrs	r3, r3, #16
}
90003246:	4618      	mov	r0, r3
90003248:	46bd      	mov	sp, r7
9000324a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000324e:	4770      	bx	lr
90003250:	5c001000 	.word	0x5c001000

90003254 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90003254:	b480      	push	{r7}
90003256:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
90003258:	4b05      	ldr	r3, [pc, #20]	@ (90003270 <HAL_EnableCompensationCell+0x1c>)
9000325a:	6a1b      	ldr	r3, [r3, #32]
9000325c:	4a04      	ldr	r2, [pc, #16]	@ (90003270 <HAL_EnableCompensationCell+0x1c>)
9000325e:	f043 0301 	orr.w	r3, r3, #1
90003262:	6213      	str	r3, [r2, #32]
}
90003264:	bf00      	nop
90003266:	46bd      	mov	sp, r7
90003268:	f85d 7b04 	ldr.w	r7, [sp], #4
9000326c:	4770      	bx	lr
9000326e:	bf00      	nop
90003270:	58000400 	.word	0x58000400

90003274 <__NVIC_SetPriorityGrouping>:
{
90003274:	b480      	push	{r7}
90003276:	b085      	sub	sp, #20
90003278:	af00      	add	r7, sp, #0
9000327a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
9000327c:	687b      	ldr	r3, [r7, #4]
9000327e:	f003 0307 	and.w	r3, r3, #7
90003282:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003284:	4b0b      	ldr	r3, [pc, #44]	@ (900032b4 <__NVIC_SetPriorityGrouping+0x40>)
90003286:	68db      	ldr	r3, [r3, #12]
90003288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000328a:	68ba      	ldr	r2, [r7, #8]
9000328c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
90003290:	4013      	ands	r3, r2
90003292:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003294:	68fb      	ldr	r3, [r7, #12]
90003296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90003298:	68bb      	ldr	r3, [r7, #8]
9000329a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
9000329c:	4b06      	ldr	r3, [pc, #24]	@ (900032b8 <__NVIC_SetPriorityGrouping+0x44>)
9000329e:	4313      	orrs	r3, r2
900032a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900032a2:	4a04      	ldr	r2, [pc, #16]	@ (900032b4 <__NVIC_SetPriorityGrouping+0x40>)
900032a4:	68bb      	ldr	r3, [r7, #8]
900032a6:	60d3      	str	r3, [r2, #12]
}
900032a8:	bf00      	nop
900032aa:	3714      	adds	r7, #20
900032ac:	46bd      	mov	sp, r7
900032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900032b2:	4770      	bx	lr
900032b4:	e000ed00 	.word	0xe000ed00
900032b8:	05fa0000 	.word	0x05fa0000

900032bc <__NVIC_GetPriorityGrouping>:
{
900032bc:	b480      	push	{r7}
900032be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900032c0:	4b04      	ldr	r3, [pc, #16]	@ (900032d4 <__NVIC_GetPriorityGrouping+0x18>)
900032c2:	68db      	ldr	r3, [r3, #12]
900032c4:	0a1b      	lsrs	r3, r3, #8
900032c6:	f003 0307 	and.w	r3, r3, #7
}
900032ca:	4618      	mov	r0, r3
900032cc:	46bd      	mov	sp, r7
900032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
900032d2:	4770      	bx	lr
900032d4:	e000ed00 	.word	0xe000ed00

900032d8 <__NVIC_EnableIRQ>:
{
900032d8:	b480      	push	{r7}
900032da:	b083      	sub	sp, #12
900032dc:	af00      	add	r7, sp, #0
900032de:	4603      	mov	r3, r0
900032e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900032e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900032e6:	2b00      	cmp	r3, #0
900032e8:	db0b      	blt.n	90003302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900032ea:	88fb      	ldrh	r3, [r7, #6]
900032ec:	f003 021f 	and.w	r2, r3, #31
900032f0:	4907      	ldr	r1, [pc, #28]	@ (90003310 <__NVIC_EnableIRQ+0x38>)
900032f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900032f6:	095b      	lsrs	r3, r3, #5
900032f8:	2001      	movs	r0, #1
900032fa:	fa00 f202 	lsl.w	r2, r0, r2
900032fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90003302:	bf00      	nop
90003304:	370c      	adds	r7, #12
90003306:	46bd      	mov	sp, r7
90003308:	f85d 7b04 	ldr.w	r7, [sp], #4
9000330c:	4770      	bx	lr
9000330e:	bf00      	nop
90003310:	e000e100 	.word	0xe000e100

90003314 <__NVIC_SetPriority>:
{
90003314:	b480      	push	{r7}
90003316:	b083      	sub	sp, #12
90003318:	af00      	add	r7, sp, #0
9000331a:	4603      	mov	r3, r0
9000331c:	6039      	str	r1, [r7, #0]
9000331e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003324:	2b00      	cmp	r3, #0
90003326:	db0a      	blt.n	9000333e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003328:	683b      	ldr	r3, [r7, #0]
9000332a:	b2da      	uxtb	r2, r3
9000332c:	490c      	ldr	r1, [pc, #48]	@ (90003360 <__NVIC_SetPriority+0x4c>)
9000332e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003332:	0112      	lsls	r2, r2, #4
90003334:	b2d2      	uxtb	r2, r2
90003336:	440b      	add	r3, r1
90003338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
9000333c:	e00a      	b.n	90003354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000333e:	683b      	ldr	r3, [r7, #0]
90003340:	b2da      	uxtb	r2, r3
90003342:	4908      	ldr	r1, [pc, #32]	@ (90003364 <__NVIC_SetPriority+0x50>)
90003344:	88fb      	ldrh	r3, [r7, #6]
90003346:	f003 030f 	and.w	r3, r3, #15
9000334a:	3b04      	subs	r3, #4
9000334c:	0112      	lsls	r2, r2, #4
9000334e:	b2d2      	uxtb	r2, r2
90003350:	440b      	add	r3, r1
90003352:	761a      	strb	r2, [r3, #24]
}
90003354:	bf00      	nop
90003356:	370c      	adds	r7, #12
90003358:	46bd      	mov	sp, r7
9000335a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000335e:	4770      	bx	lr
90003360:	e000e100 	.word	0xe000e100
90003364:	e000ed00 	.word	0xe000ed00

90003368 <NVIC_EncodePriority>:
{
90003368:	b480      	push	{r7}
9000336a:	b089      	sub	sp, #36	@ 0x24
9000336c:	af00      	add	r7, sp, #0
9000336e:	60f8      	str	r0, [r7, #12]
90003370:	60b9      	str	r1, [r7, #8]
90003372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003374:	68fb      	ldr	r3, [r7, #12]
90003376:	f003 0307 	and.w	r3, r3, #7
9000337a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000337c:	69fb      	ldr	r3, [r7, #28]
9000337e:	f1c3 0307 	rsb	r3, r3, #7
90003382:	2b04      	cmp	r3, #4
90003384:	bf28      	it	cs
90003386:	2304      	movcs	r3, #4
90003388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000338a:	69fb      	ldr	r3, [r7, #28]
9000338c:	3304      	adds	r3, #4
9000338e:	2b06      	cmp	r3, #6
90003390:	d902      	bls.n	90003398 <NVIC_EncodePriority+0x30>
90003392:	69fb      	ldr	r3, [r7, #28]
90003394:	3b03      	subs	r3, #3
90003396:	e000      	b.n	9000339a <NVIC_EncodePriority+0x32>
90003398:	2300      	movs	r3, #0
9000339a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000339c:	f04f 32ff 	mov.w	r2, #4294967295
900033a0:	69bb      	ldr	r3, [r7, #24]
900033a2:	fa02 f303 	lsl.w	r3, r2, r3
900033a6:	43da      	mvns	r2, r3
900033a8:	68bb      	ldr	r3, [r7, #8]
900033aa:	401a      	ands	r2, r3
900033ac:	697b      	ldr	r3, [r7, #20]
900033ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900033b0:	f04f 31ff 	mov.w	r1, #4294967295
900033b4:	697b      	ldr	r3, [r7, #20]
900033b6:	fa01 f303 	lsl.w	r3, r1, r3
900033ba:	43d9      	mvns	r1, r3
900033bc:	687b      	ldr	r3, [r7, #4]
900033be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900033c0:	4313      	orrs	r3, r2
}
900033c2:	4618      	mov	r0, r3
900033c4:	3724      	adds	r7, #36	@ 0x24
900033c6:	46bd      	mov	sp, r7
900033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900033cc:	4770      	bx	lr
	...

900033d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900033d0:	b580      	push	{r7, lr}
900033d2:	b082      	sub	sp, #8
900033d4:	af00      	add	r7, sp, #0
900033d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900033d8:	687b      	ldr	r3, [r7, #4]
900033da:	3b01      	subs	r3, #1
900033dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
900033e0:	d301      	bcc.n	900033e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900033e2:	2301      	movs	r3, #1
900033e4:	e00f      	b.n	90003406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900033e6:	4a0a      	ldr	r2, [pc, #40]	@ (90003410 <SysTick_Config+0x40>)
900033e8:	687b      	ldr	r3, [r7, #4]
900033ea:	3b01      	subs	r3, #1
900033ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900033ee:	210f      	movs	r1, #15
900033f0:	f04f 30ff 	mov.w	r0, #4294967295
900033f4:	f7ff ff8e 	bl	90003314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900033f8:	4b05      	ldr	r3, [pc, #20]	@ (90003410 <SysTick_Config+0x40>)
900033fa:	2200      	movs	r2, #0
900033fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900033fe:	4b04      	ldr	r3, [pc, #16]	@ (90003410 <SysTick_Config+0x40>)
90003400:	2207      	movs	r2, #7
90003402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90003404:	2300      	movs	r3, #0
}
90003406:	4618      	mov	r0, r3
90003408:	3708      	adds	r7, #8
9000340a:	46bd      	mov	sp, r7
9000340c:	bd80      	pop	{r7, pc}
9000340e:	bf00      	nop
90003410:	e000e010 	.word	0xe000e010

90003414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003414:	b580      	push	{r7, lr}
90003416:	b082      	sub	sp, #8
90003418:	af00      	add	r7, sp, #0
9000341a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
9000341c:	6878      	ldr	r0, [r7, #4]
9000341e:	f7ff ff29 	bl	90003274 <__NVIC_SetPriorityGrouping>
}
90003422:	bf00      	nop
90003424:	3708      	adds	r7, #8
90003426:	46bd      	mov	sp, r7
90003428:	bd80      	pop	{r7, pc}

9000342a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000342a:	b580      	push	{r7, lr}
9000342c:	b086      	sub	sp, #24
9000342e:	af00      	add	r7, sp, #0
90003430:	4603      	mov	r3, r0
90003432:	60b9      	str	r1, [r7, #8]
90003434:	607a      	str	r2, [r7, #4]
90003436:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003438:	f7ff ff40 	bl	900032bc <__NVIC_GetPriorityGrouping>
9000343c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
9000343e:	687a      	ldr	r2, [r7, #4]
90003440:	68b9      	ldr	r1, [r7, #8]
90003442:	6978      	ldr	r0, [r7, #20]
90003444:	f7ff ff90 	bl	90003368 <NVIC_EncodePriority>
90003448:	4602      	mov	r2, r0
9000344a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
9000344e:	4611      	mov	r1, r2
90003450:	4618      	mov	r0, r3
90003452:	f7ff ff5f 	bl	90003314 <__NVIC_SetPriority>
}
90003456:	bf00      	nop
90003458:	3718      	adds	r7, #24
9000345a:	46bd      	mov	sp, r7
9000345c:	bd80      	pop	{r7, pc}

9000345e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
9000345e:	b580      	push	{r7, lr}
90003460:	b082      	sub	sp, #8
90003462:	af00      	add	r7, sp, #0
90003464:	4603      	mov	r3, r0
90003466:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90003468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000346c:	4618      	mov	r0, r3
9000346e:	f7ff ff33 	bl	900032d8 <__NVIC_EnableIRQ>
}
90003472:	bf00      	nop
90003474:	3708      	adds	r7, #8
90003476:	46bd      	mov	sp, r7
90003478:	bd80      	pop	{r7, pc}

9000347a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000347a:	b580      	push	{r7, lr}
9000347c:	b082      	sub	sp, #8
9000347e:	af00      	add	r7, sp, #0
90003480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90003482:	6878      	ldr	r0, [r7, #4]
90003484:	f7ff ffa4 	bl	900033d0 <SysTick_Config>
90003488:	4603      	mov	r3, r0
}
9000348a:	4618      	mov	r0, r3
9000348c:	3708      	adds	r7, #8
9000348e:	46bd      	mov	sp, r7
90003490:	bd80      	pop	{r7, pc}
	...

90003494 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003494:	b480      	push	{r7}
90003496:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90003498:	f3bf 8f5f 	dmb	sy
}
9000349c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
9000349e:	4b07      	ldr	r3, [pc, #28]	@ (900034bc <HAL_MPU_Disable+0x28>)
900034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900034a2:	4a06      	ldr	r2, [pc, #24]	@ (900034bc <HAL_MPU_Disable+0x28>)
900034a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900034a8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900034aa:	4b05      	ldr	r3, [pc, #20]	@ (900034c0 <HAL_MPU_Disable+0x2c>)
900034ac:	2200      	movs	r2, #0
900034ae:	605a      	str	r2, [r3, #4]
}
900034b0:	bf00      	nop
900034b2:	46bd      	mov	sp, r7
900034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900034b8:	4770      	bx	lr
900034ba:	bf00      	nop
900034bc:	e000ed00 	.word	0xe000ed00
900034c0:	e000ed90 	.word	0xe000ed90

900034c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900034c4:	b480      	push	{r7}
900034c6:	b083      	sub	sp, #12
900034c8:	af00      	add	r7, sp, #0
900034ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900034cc:	4a0b      	ldr	r2, [pc, #44]	@ (900034fc <HAL_MPU_Enable+0x38>)
900034ce:	687b      	ldr	r3, [r7, #4]
900034d0:	f043 0301 	orr.w	r3, r3, #1
900034d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900034d6:	4b0a      	ldr	r3, [pc, #40]	@ (90003500 <HAL_MPU_Enable+0x3c>)
900034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900034da:	4a09      	ldr	r2, [pc, #36]	@ (90003500 <HAL_MPU_Enable+0x3c>)
900034dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
900034e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900034e2:	f3bf 8f4f 	dsb	sy
}
900034e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900034e8:	f3bf 8f6f 	isb	sy
}
900034ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900034ee:	bf00      	nop
900034f0:	370c      	adds	r7, #12
900034f2:	46bd      	mov	sp, r7
900034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
900034f8:	4770      	bx	lr
900034fa:	bf00      	nop
900034fc:	e000ed90 	.word	0xe000ed90
90003500:	e000ed00 	.word	0xe000ed00

90003504 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
90003504:	b480      	push	{r7}
90003506:	b083      	sub	sp, #12
90003508:	af00      	add	r7, sp, #0
9000350a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
9000350c:	687b      	ldr	r3, [r7, #4]
9000350e:	785a      	ldrb	r2, [r3, #1]
90003510:	4b1b      	ldr	r3, [pc, #108]	@ (90003580 <HAL_MPU_ConfigRegion+0x7c>)
90003512:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
90003514:	4b1a      	ldr	r3, [pc, #104]	@ (90003580 <HAL_MPU_ConfigRegion+0x7c>)
90003516:	691b      	ldr	r3, [r3, #16]
90003518:	4a19      	ldr	r2, [pc, #100]	@ (90003580 <HAL_MPU_ConfigRegion+0x7c>)
9000351a:	f023 0301 	bic.w	r3, r3, #1
9000351e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
90003520:	4a17      	ldr	r2, [pc, #92]	@ (90003580 <HAL_MPU_ConfigRegion+0x7c>)
90003522:	687b      	ldr	r3, [r7, #4]
90003524:	685b      	ldr	r3, [r3, #4]
90003526:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003528:	687b      	ldr	r3, [r7, #4]
9000352a:	7b1b      	ldrb	r3, [r3, #12]
9000352c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000352e:	687b      	ldr	r3, [r7, #4]
90003530:	7adb      	ldrb	r3, [r3, #11]
90003532:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003534:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003536:	687b      	ldr	r3, [r7, #4]
90003538:	7a9b      	ldrb	r3, [r3, #10]
9000353a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000353c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000353e:	687b      	ldr	r3, [r7, #4]
90003540:	7b5b      	ldrb	r3, [r3, #13]
90003542:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003544:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003546:	687b      	ldr	r3, [r7, #4]
90003548:	7b9b      	ldrb	r3, [r3, #14]
9000354a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000354c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000354e:	687b      	ldr	r3, [r7, #4]
90003550:	7bdb      	ldrb	r3, [r3, #15]
90003552:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003554:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003556:	687b      	ldr	r3, [r7, #4]
90003558:	7a5b      	ldrb	r3, [r3, #9]
9000355a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000355c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000355e:	687b      	ldr	r3, [r7, #4]
90003560:	7a1b      	ldrb	r3, [r3, #8]
90003562:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003564:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90003566:	687a      	ldr	r2, [r7, #4]
90003568:	7812      	ldrb	r2, [r2, #0]
9000356a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000356c:	4a04      	ldr	r2, [pc, #16]	@ (90003580 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000356e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003570:	6113      	str	r3, [r2, #16]
}
90003572:	bf00      	nop
90003574:	370c      	adds	r7, #12
90003576:	46bd      	mov	sp, r7
90003578:	f85d 7b04 	ldr.w	r7, [sp], #4
9000357c:	4770      	bx	lr
9000357e:	bf00      	nop
90003580:	e000ed90 	.word	0xe000ed90

90003584 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003584:	b580      	push	{r7, lr}
90003586:	b082      	sub	sp, #8
90003588:	af00      	add	r7, sp, #0
9000358a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
9000358c:	687b      	ldr	r3, [r7, #4]
9000358e:	2b00      	cmp	r3, #0
90003590:	d101      	bne.n	90003596 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90003592:	2301      	movs	r3, #1
90003594:	e04f      	b.n	90003636 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90003596:	687b      	ldr	r3, [r7, #4]
90003598:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
9000359c:	b2db      	uxtb	r3, r3
9000359e:	2b00      	cmp	r3, #0
900035a0:	d106      	bne.n	900035b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
900035a2:	687b      	ldr	r3, [r7, #4]
900035a4:	2200      	movs	r2, #0
900035a6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900035aa:	6878      	ldr	r0, [r7, #4]
900035ac:	f000 f84e 	bl	9000364c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900035b0:	687b      	ldr	r3, [r7, #4]
900035b2:	2202      	movs	r2, #2
900035b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900035b8:	687b      	ldr	r3, [r7, #4]
900035ba:	681b      	ldr	r3, [r3, #0]
900035bc:	681a      	ldr	r2, [r3, #0]
900035be:	4b20      	ldr	r3, [pc, #128]	@ (90003640 <HAL_DMA2D_Init+0xbc>)
900035c0:	4013      	ands	r3, r2
900035c2:	687a      	ldr	r2, [r7, #4]
900035c4:	6851      	ldr	r1, [r2, #4]
900035c6:	687a      	ldr	r2, [r7, #4]
900035c8:	69d2      	ldr	r2, [r2, #28]
900035ca:	4311      	orrs	r1, r2
900035cc:	687a      	ldr	r2, [r7, #4]
900035ce:	6812      	ldr	r2, [r2, #0]
900035d0:	430b      	orrs	r3, r1
900035d2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
900035d4:	687b      	ldr	r3, [r7, #4]
900035d6:	681b      	ldr	r3, [r3, #0]
900035d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900035da:	4b1a      	ldr	r3, [pc, #104]	@ (90003644 <HAL_DMA2D_Init+0xc0>)
900035dc:	4013      	ands	r3, r2
900035de:	687a      	ldr	r2, [r7, #4]
900035e0:	6891      	ldr	r1, [r2, #8]
900035e2:	687a      	ldr	r2, [r7, #4]
900035e4:	6992      	ldr	r2, [r2, #24]
900035e6:	4311      	orrs	r1, r2
900035e8:	687a      	ldr	r2, [r7, #4]
900035ea:	6812      	ldr	r2, [r2, #0]
900035ec:	430b      	orrs	r3, r1
900035ee:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900035f0:	687b      	ldr	r3, [r7, #4]
900035f2:	681b      	ldr	r3, [r3, #0]
900035f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
900035f6:	4b14      	ldr	r3, [pc, #80]	@ (90003648 <HAL_DMA2D_Init+0xc4>)
900035f8:	4013      	ands	r3, r2
900035fa:	687a      	ldr	r2, [r7, #4]
900035fc:	68d1      	ldr	r1, [r2, #12]
900035fe:	687a      	ldr	r2, [r7, #4]
90003600:	6812      	ldr	r2, [r2, #0]
90003602:	430b      	orrs	r3, r1
90003604:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90003606:	687b      	ldr	r3, [r7, #4]
90003608:	681b      	ldr	r3, [r3, #0]
9000360a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000360c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90003610:	687b      	ldr	r3, [r7, #4]
90003612:	691b      	ldr	r3, [r3, #16]
90003614:	051a      	lsls	r2, r3, #20
90003616:	687b      	ldr	r3, [r7, #4]
90003618:	695b      	ldr	r3, [r3, #20]
9000361a:	055b      	lsls	r3, r3, #21
9000361c:	431a      	orrs	r2, r3
9000361e:	687b      	ldr	r3, [r7, #4]
90003620:	681b      	ldr	r3, [r3, #0]
90003622:	430a      	orrs	r2, r1
90003624:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003626:	687b      	ldr	r3, [r7, #4]
90003628:	2200      	movs	r2, #0
9000362a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000362c:	687b      	ldr	r3, [r7, #4]
9000362e:	2201      	movs	r2, #1
90003630:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
90003634:	2300      	movs	r3, #0
}
90003636:	4618      	mov	r0, r3
90003638:	3708      	adds	r7, #8
9000363a:	46bd      	mov	sp, r7
9000363c:	bd80      	pop	{r7, pc}
9000363e:	bf00      	nop
90003640:	fff8ffbf 	.word	0xfff8ffbf
90003644:	fffffef8 	.word	0xfffffef8
90003648:	ffff0000 	.word	0xffff0000

9000364c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
9000364c:	b480      	push	{r7}
9000364e:	b083      	sub	sp, #12
90003650:	af00      	add	r7, sp, #0
90003652:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003654:	bf00      	nop
90003656:	370c      	adds	r7, #12
90003658:	46bd      	mov	sp, r7
9000365a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000365e:	4770      	bx	lr

90003660 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90003660:	b580      	push	{r7, lr}
90003662:	b086      	sub	sp, #24
90003664:	af02      	add	r7, sp, #8
90003666:	60f8      	str	r0, [r7, #12]
90003668:	60b9      	str	r1, [r7, #8]
9000366a:	607a      	str	r2, [r7, #4]
9000366c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000366e:	68fb      	ldr	r3, [r7, #12]
90003670:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
90003674:	2b01      	cmp	r3, #1
90003676:	d101      	bne.n	9000367c <HAL_DMA2D_Start+0x1c>
90003678:	2302      	movs	r3, #2
9000367a:	e018      	b.n	900036ae <HAL_DMA2D_Start+0x4e>
9000367c:	68fb      	ldr	r3, [r7, #12]
9000367e:	2201      	movs	r2, #1
90003680:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003684:	68fb      	ldr	r3, [r7, #12]
90003686:	2202      	movs	r2, #2
90003688:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
9000368c:	69bb      	ldr	r3, [r7, #24]
9000368e:	9300      	str	r3, [sp, #0]
90003690:	683b      	ldr	r3, [r7, #0]
90003692:	687a      	ldr	r2, [r7, #4]
90003694:	68b9      	ldr	r1, [r7, #8]
90003696:	68f8      	ldr	r0, [r7, #12]
90003698:	f000 f9a4 	bl	900039e4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
9000369c:	68fb      	ldr	r3, [r7, #12]
9000369e:	681b      	ldr	r3, [r3, #0]
900036a0:	681a      	ldr	r2, [r3, #0]
900036a2:	68fb      	ldr	r3, [r7, #12]
900036a4:	681b      	ldr	r3, [r3, #0]
900036a6:	f042 0201 	orr.w	r2, r2, #1
900036aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900036ac:	2300      	movs	r3, #0
}
900036ae:	4618      	mov	r0, r3
900036b0:	3710      	adds	r7, #16
900036b2:	46bd      	mov	sp, r7
900036b4:	bd80      	pop	{r7, pc}

900036b6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
900036b6:	b580      	push	{r7, lr}
900036b8:	b086      	sub	sp, #24
900036ba:	af00      	add	r7, sp, #0
900036bc:	6078      	str	r0, [r7, #4]
900036be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900036c0:	2300      	movs	r3, #0
900036c2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900036c4:	687b      	ldr	r3, [r7, #4]
900036c6:	681b      	ldr	r3, [r3, #0]
900036c8:	681b      	ldr	r3, [r3, #0]
900036ca:	f003 0301 	and.w	r3, r3, #1
900036ce:	2b00      	cmp	r3, #0
900036d0:	d056      	beq.n	90003780 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900036d2:	f7ff fd83 	bl	900031dc <HAL_GetTick>
900036d6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900036d8:	e04b      	b.n	90003772 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900036da:	687b      	ldr	r3, [r7, #4]
900036dc:	681b      	ldr	r3, [r3, #0]
900036de:	685b      	ldr	r3, [r3, #4]
900036e0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900036e2:	68fb      	ldr	r3, [r7, #12]
900036e4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
900036e8:	2b00      	cmp	r3, #0
900036ea:	d023      	beq.n	90003734 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900036ec:	68fb      	ldr	r3, [r7, #12]
900036ee:	f003 0320 	and.w	r3, r3, #32
900036f2:	2b00      	cmp	r3, #0
900036f4:	d005      	beq.n	90003702 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900036f6:	687b      	ldr	r3, [r7, #4]
900036f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900036fa:	f043 0202 	orr.w	r2, r3, #2
900036fe:	687b      	ldr	r3, [r7, #4]
90003700:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003702:	68fb      	ldr	r3, [r7, #12]
90003704:	f003 0301 	and.w	r3, r3, #1
90003708:	2b00      	cmp	r3, #0
9000370a:	d005      	beq.n	90003718 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000370c:	687b      	ldr	r3, [r7, #4]
9000370e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003710:	f043 0201 	orr.w	r2, r3, #1
90003714:	687b      	ldr	r3, [r7, #4]
90003716:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003718:	687b      	ldr	r3, [r7, #4]
9000371a:	681b      	ldr	r3, [r3, #0]
9000371c:	2221      	movs	r2, #33	@ 0x21
9000371e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003720:	687b      	ldr	r3, [r7, #4]
90003722:	2204      	movs	r2, #4
90003724:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003728:	687b      	ldr	r3, [r7, #4]
9000372a:	2200      	movs	r2, #0
9000372c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003730:	2301      	movs	r3, #1
90003732:	e0a5      	b.n	90003880 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003734:	683b      	ldr	r3, [r7, #0]
90003736:	f1b3 3fff 	cmp.w	r3, #4294967295
9000373a:	d01a      	beq.n	90003772 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000373c:	f7ff fd4e 	bl	900031dc <HAL_GetTick>
90003740:	4602      	mov	r2, r0
90003742:	697b      	ldr	r3, [r7, #20]
90003744:	1ad3      	subs	r3, r2, r3
90003746:	683a      	ldr	r2, [r7, #0]
90003748:	429a      	cmp	r2, r3
9000374a:	d302      	bcc.n	90003752 <HAL_DMA2D_PollForTransfer+0x9c>
9000374c:	683b      	ldr	r3, [r7, #0]
9000374e:	2b00      	cmp	r3, #0
90003750:	d10f      	bne.n	90003772 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003752:	687b      	ldr	r3, [r7, #4]
90003754:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90003756:	f043 0220 	orr.w	r2, r3, #32
9000375a:	687b      	ldr	r3, [r7, #4]
9000375c:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000375e:	687b      	ldr	r3, [r7, #4]
90003760:	2203      	movs	r2, #3
90003762:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003766:	687b      	ldr	r3, [r7, #4]
90003768:	2200      	movs	r2, #0
9000376a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
9000376e:	2303      	movs	r3, #3
90003770:	e086      	b.n	90003880 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003772:	687b      	ldr	r3, [r7, #4]
90003774:	681b      	ldr	r3, [r3, #0]
90003776:	685b      	ldr	r3, [r3, #4]
90003778:	f003 0302 	and.w	r3, r3, #2
9000377c:	2b00      	cmp	r3, #0
9000377e:	d0ac      	beq.n	900036da <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003780:	687b      	ldr	r3, [r7, #4]
90003782:	681b      	ldr	r3, [r3, #0]
90003784:	69db      	ldr	r3, [r3, #28]
90003786:	f003 0320 	and.w	r3, r3, #32
9000378a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
9000378c:	687b      	ldr	r3, [r7, #4]
9000378e:	681b      	ldr	r3, [r3, #0]
90003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90003792:	f003 0320 	and.w	r3, r3, #32
90003796:	693a      	ldr	r2, [r7, #16]
90003798:	4313      	orrs	r3, r2
9000379a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
9000379c:	693b      	ldr	r3, [r7, #16]
9000379e:	2b00      	cmp	r3, #0
900037a0:	d061      	beq.n	90003866 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900037a2:	f7ff fd1b 	bl	900031dc <HAL_GetTick>
900037a6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900037a8:	e056      	b.n	90003858 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900037aa:	687b      	ldr	r3, [r7, #4]
900037ac:	681b      	ldr	r3, [r3, #0]
900037ae:	685b      	ldr	r3, [r3, #4]
900037b0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900037b2:	68fb      	ldr	r3, [r7, #12]
900037b4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
900037b8:	2b00      	cmp	r3, #0
900037ba:	d02e      	beq.n	9000381a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900037bc:	68fb      	ldr	r3, [r7, #12]
900037be:	f003 0308 	and.w	r3, r3, #8
900037c2:	2b00      	cmp	r3, #0
900037c4:	d005      	beq.n	900037d2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900037c6:	687b      	ldr	r3, [r7, #4]
900037c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900037ca:	f043 0204 	orr.w	r2, r3, #4
900037ce:	687b      	ldr	r3, [r7, #4]
900037d0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900037d2:	68fb      	ldr	r3, [r7, #12]
900037d4:	f003 0320 	and.w	r3, r3, #32
900037d8:	2b00      	cmp	r3, #0
900037da:	d005      	beq.n	900037e8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900037dc:	687b      	ldr	r3, [r7, #4]
900037de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900037e0:	f043 0202 	orr.w	r2, r3, #2
900037e4:	687b      	ldr	r3, [r7, #4]
900037e6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900037e8:	68fb      	ldr	r3, [r7, #12]
900037ea:	f003 0301 	and.w	r3, r3, #1
900037ee:	2b00      	cmp	r3, #0
900037f0:	d005      	beq.n	900037fe <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900037f2:	687b      	ldr	r3, [r7, #4]
900037f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900037f6:	f043 0201 	orr.w	r2, r3, #1
900037fa:	687b      	ldr	r3, [r7, #4]
900037fc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900037fe:	687b      	ldr	r3, [r7, #4]
90003800:	681b      	ldr	r3, [r3, #0]
90003802:	2229      	movs	r2, #41	@ 0x29
90003804:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003806:	687b      	ldr	r3, [r7, #4]
90003808:	2204      	movs	r2, #4
9000380a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
9000380e:	687b      	ldr	r3, [r7, #4]
90003810:	2200      	movs	r2, #0
90003812:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
90003816:	2301      	movs	r3, #1
90003818:	e032      	b.n	90003880 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000381a:	683b      	ldr	r3, [r7, #0]
9000381c:	f1b3 3fff 	cmp.w	r3, #4294967295
90003820:	d01a      	beq.n	90003858 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003822:	f7ff fcdb 	bl	900031dc <HAL_GetTick>
90003826:	4602      	mov	r2, r0
90003828:	697b      	ldr	r3, [r7, #20]
9000382a:	1ad3      	subs	r3, r2, r3
9000382c:	683a      	ldr	r2, [r7, #0]
9000382e:	429a      	cmp	r2, r3
90003830:	d302      	bcc.n	90003838 <HAL_DMA2D_PollForTransfer+0x182>
90003832:	683b      	ldr	r3, [r7, #0]
90003834:	2b00      	cmp	r3, #0
90003836:	d10f      	bne.n	90003858 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003838:	687b      	ldr	r3, [r7, #4]
9000383a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000383c:	f043 0220 	orr.w	r2, r3, #32
90003840:	687b      	ldr	r3, [r7, #4]
90003842:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003844:	687b      	ldr	r3, [r7, #4]
90003846:	2203      	movs	r2, #3
90003848:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000384c:	687b      	ldr	r3, [r7, #4]
9000384e:	2200      	movs	r2, #0
90003850:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
90003854:	2303      	movs	r3, #3
90003856:	e013      	b.n	90003880 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003858:	687b      	ldr	r3, [r7, #4]
9000385a:	681b      	ldr	r3, [r3, #0]
9000385c:	685b      	ldr	r3, [r3, #4]
9000385e:	f003 0310 	and.w	r3, r3, #16
90003862:	2b00      	cmp	r3, #0
90003864:	d0a1      	beq.n	900037aa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003866:	687b      	ldr	r3, [r7, #4]
90003868:	681b      	ldr	r3, [r3, #0]
9000386a:	2212      	movs	r2, #18
9000386c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000386e:	687b      	ldr	r3, [r7, #4]
90003870:	2201      	movs	r2, #1
90003872:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003876:	687b      	ldr	r3, [r7, #4]
90003878:	2200      	movs	r2, #0
9000387a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
9000387e:	2300      	movs	r3, #0
}
90003880:	4618      	mov	r0, r3
90003882:	3718      	adds	r7, #24
90003884:	46bd      	mov	sp, r7
90003886:	bd80      	pop	{r7, pc}

90003888 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003888:	b480      	push	{r7}
9000388a:	b087      	sub	sp, #28
9000388c:	af00      	add	r7, sp, #0
9000388e:	6078      	str	r0, [r7, #4]
90003890:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003892:	687b      	ldr	r3, [r7, #4]
90003894:	685b      	ldr	r3, [r3, #4]
90003896:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
9000389a:	683b      	ldr	r3, [r7, #0]
9000389c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000389e:	687b      	ldr	r3, [r7, #4]
900038a0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
900038a4:	2b01      	cmp	r3, #1
900038a6:	d101      	bne.n	900038ac <HAL_DMA2D_ConfigLayer+0x24>
900038a8:	2302      	movs	r3, #2
900038aa:	e092      	b.n	900039d2 <HAL_DMA2D_ConfigLayer+0x14a>
900038ac:	687b      	ldr	r3, [r7, #4]
900038ae:	2201      	movs	r2, #1
900038b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900038b4:	687b      	ldr	r3, [r7, #4]
900038b6:	2202      	movs	r2, #2
900038b8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900038bc:	683a      	ldr	r2, [r7, #0]
900038be:	4613      	mov	r3, r2
900038c0:	00db      	lsls	r3, r3, #3
900038c2:	1a9b      	subs	r3, r3, r2
900038c4:	009b      	lsls	r3, r3, #2
900038c6:	3328      	adds	r3, #40	@ 0x28
900038c8:	687a      	ldr	r2, [r7, #4]
900038ca:	4413      	add	r3, r2
900038cc:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900038ce:	68fb      	ldr	r3, [r7, #12]
900038d0:	685a      	ldr	r2, [r3, #4]
900038d2:	68fb      	ldr	r3, [r7, #12]
900038d4:	689b      	ldr	r3, [r3, #8]
900038d6:	041b      	lsls	r3, r3, #16
900038d8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900038da:	68fb      	ldr	r3, [r7, #12]
900038dc:	691b      	ldr	r3, [r3, #16]
900038de:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900038e0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900038e2:	68fb      	ldr	r3, [r7, #12]
900038e4:	695b      	ldr	r3, [r3, #20]
900038e6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900038e8:	4313      	orrs	r3, r2
900038ea:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
900038ec:	4b3c      	ldr	r3, [pc, #240]	@ (900039e0 <HAL_DMA2D_ConfigLayer+0x158>)
900038ee:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900038f0:	68fb      	ldr	r3, [r7, #12]
900038f2:	685b      	ldr	r3, [r3, #4]
900038f4:	2b0a      	cmp	r3, #10
900038f6:	d003      	beq.n	90003900 <HAL_DMA2D_ConfigLayer+0x78>
900038f8:	68fb      	ldr	r3, [r7, #12]
900038fa:	685b      	ldr	r3, [r3, #4]
900038fc:	2b09      	cmp	r3, #9
900038fe:	d107      	bne.n	90003910 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003900:	68fb      	ldr	r3, [r7, #12]
90003902:	68db      	ldr	r3, [r3, #12]
90003904:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003908:	693a      	ldr	r2, [r7, #16]
9000390a:	4313      	orrs	r3, r2
9000390c:	613b      	str	r3, [r7, #16]
9000390e:	e005      	b.n	9000391c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003910:	68fb      	ldr	r3, [r7, #12]
90003912:	68db      	ldr	r3, [r3, #12]
90003914:	061b      	lsls	r3, r3, #24
90003916:	693a      	ldr	r2, [r7, #16]
90003918:	4313      	orrs	r3, r2
9000391a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000391c:	683b      	ldr	r3, [r7, #0]
9000391e:	2b00      	cmp	r3, #0
90003920:	d120      	bne.n	90003964 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003922:	687b      	ldr	r3, [r7, #4]
90003924:	681b      	ldr	r3, [r3, #0]
90003926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90003928:	697b      	ldr	r3, [r7, #20]
9000392a:	43db      	mvns	r3, r3
9000392c:	ea02 0103 	and.w	r1, r2, r3
90003930:	687b      	ldr	r3, [r7, #4]
90003932:	681b      	ldr	r3, [r3, #0]
90003934:	693a      	ldr	r2, [r7, #16]
90003936:	430a      	orrs	r2, r1
90003938:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000393a:	687b      	ldr	r3, [r7, #4]
9000393c:	681b      	ldr	r3, [r3, #0]
9000393e:	68fa      	ldr	r2, [r7, #12]
90003940:	6812      	ldr	r2, [r2, #0]
90003942:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003944:	68fb      	ldr	r3, [r7, #12]
90003946:	685b      	ldr	r3, [r3, #4]
90003948:	2b0a      	cmp	r3, #10
9000394a:	d003      	beq.n	90003954 <HAL_DMA2D_ConfigLayer+0xcc>
9000394c:	68fb      	ldr	r3, [r7, #12]
9000394e:	685b      	ldr	r3, [r3, #4]
90003950:	2b09      	cmp	r3, #9
90003952:	d135      	bne.n	900039c0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003954:	68fb      	ldr	r3, [r7, #12]
90003956:	68da      	ldr	r2, [r3, #12]
90003958:	687b      	ldr	r3, [r7, #4]
9000395a:	681b      	ldr	r3, [r3, #0]
9000395c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
90003960:	629a      	str	r2, [r3, #40]	@ 0x28
90003962:	e02d      	b.n	900039c0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003964:	68fb      	ldr	r3, [r7, #12]
90003966:	685b      	ldr	r3, [r3, #4]
90003968:	2b0b      	cmp	r3, #11
9000396a:	d109      	bne.n	90003980 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
9000396c:	68fb      	ldr	r3, [r7, #12]
9000396e:	699b      	ldr	r3, [r3, #24]
90003970:	049b      	lsls	r3, r3, #18
90003972:	693a      	ldr	r2, [r7, #16]
90003974:	4313      	orrs	r3, r2
90003976:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003978:	697b      	ldr	r3, [r7, #20]
9000397a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
9000397e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003980:	687b      	ldr	r3, [r7, #4]
90003982:	681b      	ldr	r3, [r3, #0]
90003984:	69da      	ldr	r2, [r3, #28]
90003986:	697b      	ldr	r3, [r7, #20]
90003988:	43db      	mvns	r3, r3
9000398a:	ea02 0103 	and.w	r1, r2, r3
9000398e:	687b      	ldr	r3, [r7, #4]
90003990:	681b      	ldr	r3, [r3, #0]
90003992:	693a      	ldr	r2, [r7, #16]
90003994:	430a      	orrs	r2, r1
90003996:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003998:	687b      	ldr	r3, [r7, #4]
9000399a:	681b      	ldr	r3, [r3, #0]
9000399c:	68fa      	ldr	r2, [r7, #12]
9000399e:	6812      	ldr	r2, [r2, #0]
900039a0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900039a2:	68fb      	ldr	r3, [r7, #12]
900039a4:	685b      	ldr	r3, [r3, #4]
900039a6:	2b0a      	cmp	r3, #10
900039a8:	d003      	beq.n	900039b2 <HAL_DMA2D_ConfigLayer+0x12a>
900039aa:	68fb      	ldr	r3, [r7, #12]
900039ac:	685b      	ldr	r3, [r3, #4]
900039ae:	2b09      	cmp	r3, #9
900039b0:	d106      	bne.n	900039c0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
900039b2:	68fb      	ldr	r3, [r7, #12]
900039b4:	68da      	ldr	r2, [r3, #12]
900039b6:	687b      	ldr	r3, [r7, #4]
900039b8:	681b      	ldr	r3, [r3, #0]
900039ba:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
900039be:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900039c0:	687b      	ldr	r3, [r7, #4]
900039c2:	2201      	movs	r2, #1
900039c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900039c8:	687b      	ldr	r3, [r7, #4]
900039ca:	2200      	movs	r2, #0
900039cc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
900039d0:	2300      	movs	r3, #0
}
900039d2:	4618      	mov	r0, r3
900039d4:	371c      	adds	r7, #28
900039d6:	46bd      	mov	sp, r7
900039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900039dc:	4770      	bx	lr
900039de:	bf00      	nop
900039e0:	ff33000f 	.word	0xff33000f

900039e4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
900039e4:	b480      	push	{r7}
900039e6:	b08b      	sub	sp, #44	@ 0x2c
900039e8:	af00      	add	r7, sp, #0
900039ea:	60f8      	str	r0, [r7, #12]
900039ec:	60b9      	str	r1, [r7, #8]
900039ee:	607a      	str	r2, [r7, #4]
900039f0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
900039f2:	68fb      	ldr	r3, [r7, #12]
900039f4:	681b      	ldr	r3, [r3, #0]
900039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
900039f8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
900039fc:	683b      	ldr	r3, [r7, #0]
900039fe:	041a      	lsls	r2, r3, #16
90003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
90003a02:	431a      	orrs	r2, r3
90003a04:	68fb      	ldr	r3, [r7, #12]
90003a06:	681b      	ldr	r3, [r3, #0]
90003a08:	430a      	orrs	r2, r1
90003a0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003a0c:	68fb      	ldr	r3, [r7, #12]
90003a0e:	681b      	ldr	r3, [r3, #0]
90003a10:	687a      	ldr	r2, [r7, #4]
90003a12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003a14:	68fb      	ldr	r3, [r7, #12]
90003a16:	685b      	ldr	r3, [r3, #4]
90003a18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90003a1c:	d174      	bne.n	90003b08 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003a1e:	68bb      	ldr	r3, [r7, #8]
90003a20:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
90003a24:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003a26:	68bb      	ldr	r3, [r7, #8]
90003a28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
90003a2c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003a2e:	68bb      	ldr	r3, [r7, #8]
90003a30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
90003a34:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003a36:	68bb      	ldr	r3, [r7, #8]
90003a38:	b2db      	uxtb	r3, r3
90003a3a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003a3c:	68fb      	ldr	r3, [r7, #12]
90003a3e:	689b      	ldr	r3, [r3, #8]
90003a40:	2b00      	cmp	r3, #0
90003a42:	d108      	bne.n	90003a56 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003a44:	69ba      	ldr	r2, [r7, #24]
90003a46:	69fb      	ldr	r3, [r7, #28]
90003a48:	431a      	orrs	r2, r3
90003a4a:	6a3b      	ldr	r3, [r7, #32]
90003a4c:	4313      	orrs	r3, r2
90003a4e:	697a      	ldr	r2, [r7, #20]
90003a50:	4313      	orrs	r3, r2
90003a52:	627b      	str	r3, [r7, #36]	@ 0x24
90003a54:	e053      	b.n	90003afe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003a56:	68fb      	ldr	r3, [r7, #12]
90003a58:	689b      	ldr	r3, [r3, #8]
90003a5a:	2b01      	cmp	r3, #1
90003a5c:	d106      	bne.n	90003a6c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003a5e:	69ba      	ldr	r2, [r7, #24]
90003a60:	69fb      	ldr	r3, [r7, #28]
90003a62:	4313      	orrs	r3, r2
90003a64:	697a      	ldr	r2, [r7, #20]
90003a66:	4313      	orrs	r3, r2
90003a68:	627b      	str	r3, [r7, #36]	@ 0x24
90003a6a:	e048      	b.n	90003afe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003a6c:	68fb      	ldr	r3, [r7, #12]
90003a6e:	689b      	ldr	r3, [r3, #8]
90003a70:	2b02      	cmp	r3, #2
90003a72:	d111      	bne.n	90003a98 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003a74:	69fb      	ldr	r3, [r7, #28]
90003a76:	0cdb      	lsrs	r3, r3, #19
90003a78:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003a7a:	69bb      	ldr	r3, [r7, #24]
90003a7c:	0a9b      	lsrs	r3, r3, #10
90003a7e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003a80:	697b      	ldr	r3, [r7, #20]
90003a82:	08db      	lsrs	r3, r3, #3
90003a84:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003a86:	69bb      	ldr	r3, [r7, #24]
90003a88:	015a      	lsls	r2, r3, #5
90003a8a:	69fb      	ldr	r3, [r7, #28]
90003a8c:	02db      	lsls	r3, r3, #11
90003a8e:	4313      	orrs	r3, r2
90003a90:	697a      	ldr	r2, [r7, #20]
90003a92:	4313      	orrs	r3, r2
90003a94:	627b      	str	r3, [r7, #36]	@ 0x24
90003a96:	e032      	b.n	90003afe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003a98:	68fb      	ldr	r3, [r7, #12]
90003a9a:	689b      	ldr	r3, [r3, #8]
90003a9c:	2b03      	cmp	r3, #3
90003a9e:	d117      	bne.n	90003ad0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003aa0:	6a3b      	ldr	r3, [r7, #32]
90003aa2:	0fdb      	lsrs	r3, r3, #31
90003aa4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003aa6:	69fb      	ldr	r3, [r7, #28]
90003aa8:	0cdb      	lsrs	r3, r3, #19
90003aaa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003aac:	69bb      	ldr	r3, [r7, #24]
90003aae:	0adb      	lsrs	r3, r3, #11
90003ab0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003ab2:	697b      	ldr	r3, [r7, #20]
90003ab4:	08db      	lsrs	r3, r3, #3
90003ab6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003ab8:	69bb      	ldr	r3, [r7, #24]
90003aba:	015a      	lsls	r2, r3, #5
90003abc:	69fb      	ldr	r3, [r7, #28]
90003abe:	029b      	lsls	r3, r3, #10
90003ac0:	431a      	orrs	r2, r3
90003ac2:	6a3b      	ldr	r3, [r7, #32]
90003ac4:	03db      	lsls	r3, r3, #15
90003ac6:	4313      	orrs	r3, r2
90003ac8:	697a      	ldr	r2, [r7, #20]
90003aca:	4313      	orrs	r3, r2
90003acc:	627b      	str	r3, [r7, #36]	@ 0x24
90003ace:	e016      	b.n	90003afe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003ad0:	6a3b      	ldr	r3, [r7, #32]
90003ad2:	0f1b      	lsrs	r3, r3, #28
90003ad4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003ad6:	69fb      	ldr	r3, [r7, #28]
90003ad8:	0d1b      	lsrs	r3, r3, #20
90003ada:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003adc:	69bb      	ldr	r3, [r7, #24]
90003ade:	0b1b      	lsrs	r3, r3, #12
90003ae0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003ae2:	697b      	ldr	r3, [r7, #20]
90003ae4:	091b      	lsrs	r3, r3, #4
90003ae6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003ae8:	69bb      	ldr	r3, [r7, #24]
90003aea:	011a      	lsls	r2, r3, #4
90003aec:	69fb      	ldr	r3, [r7, #28]
90003aee:	021b      	lsls	r3, r3, #8
90003af0:	431a      	orrs	r2, r3
90003af2:	6a3b      	ldr	r3, [r7, #32]
90003af4:	031b      	lsls	r3, r3, #12
90003af6:	4313      	orrs	r3, r2
90003af8:	697a      	ldr	r2, [r7, #20]
90003afa:	4313      	orrs	r3, r2
90003afc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003afe:	68fb      	ldr	r3, [r7, #12]
90003b00:	681b      	ldr	r3, [r3, #0]
90003b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
90003b04:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003b06:	e00d      	b.n	90003b24 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003b08:	68fb      	ldr	r3, [r7, #12]
90003b0a:	685b      	ldr	r3, [r3, #4]
90003b0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90003b10:	d104      	bne.n	90003b1c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003b12:	68fb      	ldr	r3, [r7, #12]
90003b14:	681b      	ldr	r3, [r3, #0]
90003b16:	68ba      	ldr	r2, [r7, #8]
90003b18:	615a      	str	r2, [r3, #20]
}
90003b1a:	e003      	b.n	90003b24 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003b1c:	68fb      	ldr	r3, [r7, #12]
90003b1e:	681b      	ldr	r3, [r3, #0]
90003b20:	68ba      	ldr	r2, [r7, #8]
90003b22:	60da      	str	r2, [r3, #12]
}
90003b24:	bf00      	nop
90003b26:	372c      	adds	r7, #44	@ 0x2c
90003b28:	46bd      	mov	sp, r7
90003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b2e:	4770      	bx	lr

90003b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
90003b30:	b480      	push	{r7}
90003b32:	b089      	sub	sp, #36	@ 0x24
90003b34:	af00      	add	r7, sp, #0
90003b36:	6078      	str	r0, [r7, #4]
90003b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003b3a:	2300      	movs	r3, #0
90003b3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003b3e:	4b89      	ldr	r3, [pc, #548]	@ (90003d64 <HAL_GPIO_Init+0x234>)
90003b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003b42:	e194      	b.n	90003e6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003b44:	683b      	ldr	r3, [r7, #0]
90003b46:	681a      	ldr	r2, [r3, #0]
90003b48:	2101      	movs	r1, #1
90003b4a:	69fb      	ldr	r3, [r7, #28]
90003b4c:	fa01 f303 	lsl.w	r3, r1, r3
90003b50:	4013      	ands	r3, r2
90003b52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003b54:	693b      	ldr	r3, [r7, #16]
90003b56:	2b00      	cmp	r3, #0
90003b58:	f000 8186 	beq.w	90003e68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003b5c:	683b      	ldr	r3, [r7, #0]
90003b5e:	685b      	ldr	r3, [r3, #4]
90003b60:	f003 0303 	and.w	r3, r3, #3
90003b64:	2b01      	cmp	r3, #1
90003b66:	d005      	beq.n	90003b74 <HAL_GPIO_Init+0x44>
90003b68:	683b      	ldr	r3, [r7, #0]
90003b6a:	685b      	ldr	r3, [r3, #4]
90003b6c:	f003 0303 	and.w	r3, r3, #3
90003b70:	2b02      	cmp	r3, #2
90003b72:	d130      	bne.n	90003bd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003b74:	687b      	ldr	r3, [r7, #4]
90003b76:	689b      	ldr	r3, [r3, #8]
90003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003b7a:	69fb      	ldr	r3, [r7, #28]
90003b7c:	005b      	lsls	r3, r3, #1
90003b7e:	2203      	movs	r2, #3
90003b80:	fa02 f303 	lsl.w	r3, r2, r3
90003b84:	43db      	mvns	r3, r3
90003b86:	69ba      	ldr	r2, [r7, #24]
90003b88:	4013      	ands	r3, r2
90003b8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003b8c:	683b      	ldr	r3, [r7, #0]
90003b8e:	68da      	ldr	r2, [r3, #12]
90003b90:	69fb      	ldr	r3, [r7, #28]
90003b92:	005b      	lsls	r3, r3, #1
90003b94:	fa02 f303 	lsl.w	r3, r2, r3
90003b98:	69ba      	ldr	r2, [r7, #24]
90003b9a:	4313      	orrs	r3, r2
90003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003b9e:	687b      	ldr	r3, [r7, #4]
90003ba0:	69ba      	ldr	r2, [r7, #24]
90003ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003ba4:	687b      	ldr	r3, [r7, #4]
90003ba6:	685b      	ldr	r3, [r3, #4]
90003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003baa:	2201      	movs	r2, #1
90003bac:	69fb      	ldr	r3, [r7, #28]
90003bae:	fa02 f303 	lsl.w	r3, r2, r3
90003bb2:	43db      	mvns	r3, r3
90003bb4:	69ba      	ldr	r2, [r7, #24]
90003bb6:	4013      	ands	r3, r2
90003bb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003bba:	683b      	ldr	r3, [r7, #0]
90003bbc:	685b      	ldr	r3, [r3, #4]
90003bbe:	091b      	lsrs	r3, r3, #4
90003bc0:	f003 0201 	and.w	r2, r3, #1
90003bc4:	69fb      	ldr	r3, [r7, #28]
90003bc6:	fa02 f303 	lsl.w	r3, r2, r3
90003bca:	69ba      	ldr	r2, [r7, #24]
90003bcc:	4313      	orrs	r3, r2
90003bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003bd0:	687b      	ldr	r3, [r7, #4]
90003bd2:	69ba      	ldr	r2, [r7, #24]
90003bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003bd6:	683b      	ldr	r3, [r7, #0]
90003bd8:	685b      	ldr	r3, [r3, #4]
90003bda:	f003 0303 	and.w	r3, r3, #3
90003bde:	2b03      	cmp	r3, #3
90003be0:	d017      	beq.n	90003c12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003be2:	687b      	ldr	r3, [r7, #4]
90003be4:	68db      	ldr	r3, [r3, #12]
90003be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003be8:	69fb      	ldr	r3, [r7, #28]
90003bea:	005b      	lsls	r3, r3, #1
90003bec:	2203      	movs	r2, #3
90003bee:	fa02 f303 	lsl.w	r3, r2, r3
90003bf2:	43db      	mvns	r3, r3
90003bf4:	69ba      	ldr	r2, [r7, #24]
90003bf6:	4013      	ands	r3, r2
90003bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003bfa:	683b      	ldr	r3, [r7, #0]
90003bfc:	689a      	ldr	r2, [r3, #8]
90003bfe:	69fb      	ldr	r3, [r7, #28]
90003c00:	005b      	lsls	r3, r3, #1
90003c02:	fa02 f303 	lsl.w	r3, r2, r3
90003c06:	69ba      	ldr	r2, [r7, #24]
90003c08:	4313      	orrs	r3, r2
90003c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003c0c:	687b      	ldr	r3, [r7, #4]
90003c0e:	69ba      	ldr	r2, [r7, #24]
90003c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003c12:	683b      	ldr	r3, [r7, #0]
90003c14:	685b      	ldr	r3, [r3, #4]
90003c16:	f003 0303 	and.w	r3, r3, #3
90003c1a:	2b02      	cmp	r3, #2
90003c1c:	d123      	bne.n	90003c66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003c1e:	69fb      	ldr	r3, [r7, #28]
90003c20:	08da      	lsrs	r2, r3, #3
90003c22:	687b      	ldr	r3, [r7, #4]
90003c24:	3208      	adds	r2, #8
90003c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003c2c:	69fb      	ldr	r3, [r7, #28]
90003c2e:	f003 0307 	and.w	r3, r3, #7
90003c32:	009b      	lsls	r3, r3, #2
90003c34:	220f      	movs	r2, #15
90003c36:	fa02 f303 	lsl.w	r3, r2, r3
90003c3a:	43db      	mvns	r3, r3
90003c3c:	69ba      	ldr	r2, [r7, #24]
90003c3e:	4013      	ands	r3, r2
90003c40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003c42:	683b      	ldr	r3, [r7, #0]
90003c44:	691a      	ldr	r2, [r3, #16]
90003c46:	69fb      	ldr	r3, [r7, #28]
90003c48:	f003 0307 	and.w	r3, r3, #7
90003c4c:	009b      	lsls	r3, r3, #2
90003c4e:	fa02 f303 	lsl.w	r3, r2, r3
90003c52:	69ba      	ldr	r2, [r7, #24]
90003c54:	4313      	orrs	r3, r2
90003c56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003c58:	69fb      	ldr	r3, [r7, #28]
90003c5a:	08da      	lsrs	r2, r3, #3
90003c5c:	687b      	ldr	r3, [r7, #4]
90003c5e:	3208      	adds	r2, #8
90003c60:	69b9      	ldr	r1, [r7, #24]
90003c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003c66:	687b      	ldr	r3, [r7, #4]
90003c68:	681b      	ldr	r3, [r3, #0]
90003c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003c6c:	69fb      	ldr	r3, [r7, #28]
90003c6e:	005b      	lsls	r3, r3, #1
90003c70:	2203      	movs	r2, #3
90003c72:	fa02 f303 	lsl.w	r3, r2, r3
90003c76:	43db      	mvns	r3, r3
90003c78:	69ba      	ldr	r2, [r7, #24]
90003c7a:	4013      	ands	r3, r2
90003c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003c7e:	683b      	ldr	r3, [r7, #0]
90003c80:	685b      	ldr	r3, [r3, #4]
90003c82:	f003 0203 	and.w	r2, r3, #3
90003c86:	69fb      	ldr	r3, [r7, #28]
90003c88:	005b      	lsls	r3, r3, #1
90003c8a:	fa02 f303 	lsl.w	r3, r2, r3
90003c8e:	69ba      	ldr	r2, [r7, #24]
90003c90:	4313      	orrs	r3, r2
90003c92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003c94:	687b      	ldr	r3, [r7, #4]
90003c96:	69ba      	ldr	r2, [r7, #24]
90003c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003c9a:	683b      	ldr	r3, [r7, #0]
90003c9c:	685b      	ldr	r3, [r3, #4]
90003c9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
90003ca2:	2b00      	cmp	r3, #0
90003ca4:	f000 80e0 	beq.w	90003e68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003ca8:	4b2f      	ldr	r3, [pc, #188]	@ (90003d68 <HAL_GPIO_Init+0x238>)
90003caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003cae:	4a2e      	ldr	r2, [pc, #184]	@ (90003d68 <HAL_GPIO_Init+0x238>)
90003cb0:	f043 0302 	orr.w	r3, r3, #2
90003cb4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
90003cb8:	4b2b      	ldr	r3, [pc, #172]	@ (90003d68 <HAL_GPIO_Init+0x238>)
90003cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
90003cbe:	f003 0302 	and.w	r3, r3, #2
90003cc2:	60fb      	str	r3, [r7, #12]
90003cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003cc6:	4a29      	ldr	r2, [pc, #164]	@ (90003d6c <HAL_GPIO_Init+0x23c>)
90003cc8:	69fb      	ldr	r3, [r7, #28]
90003cca:	089b      	lsrs	r3, r3, #2
90003ccc:	3302      	adds	r3, #2
90003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003cd4:	69fb      	ldr	r3, [r7, #28]
90003cd6:	f003 0303 	and.w	r3, r3, #3
90003cda:	009b      	lsls	r3, r3, #2
90003cdc:	220f      	movs	r2, #15
90003cde:	fa02 f303 	lsl.w	r3, r2, r3
90003ce2:	43db      	mvns	r3, r3
90003ce4:	69ba      	ldr	r2, [r7, #24]
90003ce6:	4013      	ands	r3, r2
90003ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003cea:	687b      	ldr	r3, [r7, #4]
90003cec:	4a20      	ldr	r2, [pc, #128]	@ (90003d70 <HAL_GPIO_Init+0x240>)
90003cee:	4293      	cmp	r3, r2
90003cf0:	d052      	beq.n	90003d98 <HAL_GPIO_Init+0x268>
90003cf2:	687b      	ldr	r3, [r7, #4]
90003cf4:	4a1f      	ldr	r2, [pc, #124]	@ (90003d74 <HAL_GPIO_Init+0x244>)
90003cf6:	4293      	cmp	r3, r2
90003cf8:	d031      	beq.n	90003d5e <HAL_GPIO_Init+0x22e>
90003cfa:	687b      	ldr	r3, [r7, #4]
90003cfc:	4a1e      	ldr	r2, [pc, #120]	@ (90003d78 <HAL_GPIO_Init+0x248>)
90003cfe:	4293      	cmp	r3, r2
90003d00:	d02b      	beq.n	90003d5a <HAL_GPIO_Init+0x22a>
90003d02:	687b      	ldr	r3, [r7, #4]
90003d04:	4a1d      	ldr	r2, [pc, #116]	@ (90003d7c <HAL_GPIO_Init+0x24c>)
90003d06:	4293      	cmp	r3, r2
90003d08:	d025      	beq.n	90003d56 <HAL_GPIO_Init+0x226>
90003d0a:	687b      	ldr	r3, [r7, #4]
90003d0c:	4a1c      	ldr	r2, [pc, #112]	@ (90003d80 <HAL_GPIO_Init+0x250>)
90003d0e:	4293      	cmp	r3, r2
90003d10:	d01f      	beq.n	90003d52 <HAL_GPIO_Init+0x222>
90003d12:	687b      	ldr	r3, [r7, #4]
90003d14:	4a1b      	ldr	r2, [pc, #108]	@ (90003d84 <HAL_GPIO_Init+0x254>)
90003d16:	4293      	cmp	r3, r2
90003d18:	d019      	beq.n	90003d4e <HAL_GPIO_Init+0x21e>
90003d1a:	687b      	ldr	r3, [r7, #4]
90003d1c:	4a1a      	ldr	r2, [pc, #104]	@ (90003d88 <HAL_GPIO_Init+0x258>)
90003d1e:	4293      	cmp	r3, r2
90003d20:	d013      	beq.n	90003d4a <HAL_GPIO_Init+0x21a>
90003d22:	687b      	ldr	r3, [r7, #4]
90003d24:	4a19      	ldr	r2, [pc, #100]	@ (90003d8c <HAL_GPIO_Init+0x25c>)
90003d26:	4293      	cmp	r3, r2
90003d28:	d00d      	beq.n	90003d46 <HAL_GPIO_Init+0x216>
90003d2a:	687b      	ldr	r3, [r7, #4]
90003d2c:	4a18      	ldr	r2, [pc, #96]	@ (90003d90 <HAL_GPIO_Init+0x260>)
90003d2e:	4293      	cmp	r3, r2
90003d30:	d007      	beq.n	90003d42 <HAL_GPIO_Init+0x212>
90003d32:	687b      	ldr	r3, [r7, #4]
90003d34:	4a17      	ldr	r2, [pc, #92]	@ (90003d94 <HAL_GPIO_Init+0x264>)
90003d36:	4293      	cmp	r3, r2
90003d38:	d101      	bne.n	90003d3e <HAL_GPIO_Init+0x20e>
90003d3a:	2309      	movs	r3, #9
90003d3c:	e02d      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d3e:	230a      	movs	r3, #10
90003d40:	e02b      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d42:	2308      	movs	r3, #8
90003d44:	e029      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d46:	2307      	movs	r3, #7
90003d48:	e027      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d4a:	2306      	movs	r3, #6
90003d4c:	e025      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d4e:	2305      	movs	r3, #5
90003d50:	e023      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d52:	2304      	movs	r3, #4
90003d54:	e021      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d56:	2303      	movs	r3, #3
90003d58:	e01f      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d5a:	2302      	movs	r3, #2
90003d5c:	e01d      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d5e:	2301      	movs	r3, #1
90003d60:	e01b      	b.n	90003d9a <HAL_GPIO_Init+0x26a>
90003d62:	bf00      	nop
90003d64:	58000080 	.word	0x58000080
90003d68:	58024400 	.word	0x58024400
90003d6c:	58000400 	.word	0x58000400
90003d70:	58020000 	.word	0x58020000
90003d74:	58020400 	.word	0x58020400
90003d78:	58020800 	.word	0x58020800
90003d7c:	58020c00 	.word	0x58020c00
90003d80:	58021000 	.word	0x58021000
90003d84:	58021400 	.word	0x58021400
90003d88:	58021800 	.word	0x58021800
90003d8c:	58021c00 	.word	0x58021c00
90003d90:	58022000 	.word	0x58022000
90003d94:	58022400 	.word	0x58022400
90003d98:	2300      	movs	r3, #0
90003d9a:	69fa      	ldr	r2, [r7, #28]
90003d9c:	f002 0203 	and.w	r2, r2, #3
90003da0:	0092      	lsls	r2, r2, #2
90003da2:	4093      	lsls	r3, r2
90003da4:	69ba      	ldr	r2, [r7, #24]
90003da6:	4313      	orrs	r3, r2
90003da8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003daa:	4938      	ldr	r1, [pc, #224]	@ (90003e8c <HAL_GPIO_Init+0x35c>)
90003dac:	69fb      	ldr	r3, [r7, #28]
90003dae:	089b      	lsrs	r3, r3, #2
90003db0:	3302      	adds	r3, #2
90003db2:	69ba      	ldr	r2, [r7, #24]
90003db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003dbc:	681b      	ldr	r3, [r3, #0]
90003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003dc0:	693b      	ldr	r3, [r7, #16]
90003dc2:	43db      	mvns	r3, r3
90003dc4:	69ba      	ldr	r2, [r7, #24]
90003dc6:	4013      	ands	r3, r2
90003dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003dca:	683b      	ldr	r3, [r7, #0]
90003dcc:	685b      	ldr	r3, [r3, #4]
90003dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003dd2:	2b00      	cmp	r3, #0
90003dd4:	d003      	beq.n	90003dde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003dd6:	69ba      	ldr	r2, [r7, #24]
90003dd8:	693b      	ldr	r3, [r7, #16]
90003dda:	4313      	orrs	r3, r2
90003ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003de2:	69bb      	ldr	r3, [r7, #24]
90003de4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
90003dea:	685b      	ldr	r3, [r3, #4]
90003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003dee:	693b      	ldr	r3, [r7, #16]
90003df0:	43db      	mvns	r3, r3
90003df2:	69ba      	ldr	r2, [r7, #24]
90003df4:	4013      	ands	r3, r2
90003df6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003df8:	683b      	ldr	r3, [r7, #0]
90003dfa:	685b      	ldr	r3, [r3, #4]
90003dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003e00:	2b00      	cmp	r3, #0
90003e02:	d003      	beq.n	90003e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003e04:	69ba      	ldr	r2, [r7, #24]
90003e06:	693b      	ldr	r3, [r7, #16]
90003e08:	4313      	orrs	r3, r2
90003e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
90003e10:	69bb      	ldr	r3, [r7, #24]
90003e12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003e14:	697b      	ldr	r3, [r7, #20]
90003e16:	685b      	ldr	r3, [r3, #4]
90003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e1a:	693b      	ldr	r3, [r7, #16]
90003e1c:	43db      	mvns	r3, r3
90003e1e:	69ba      	ldr	r2, [r7, #24]
90003e20:	4013      	ands	r3, r2
90003e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003e24:	683b      	ldr	r3, [r7, #0]
90003e26:	685b      	ldr	r3, [r3, #4]
90003e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90003e2c:	2b00      	cmp	r3, #0
90003e2e:	d003      	beq.n	90003e38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003e30:	69ba      	ldr	r2, [r7, #24]
90003e32:	693b      	ldr	r3, [r7, #16]
90003e34:	4313      	orrs	r3, r2
90003e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003e38:	697b      	ldr	r3, [r7, #20]
90003e3a:	69ba      	ldr	r2, [r7, #24]
90003e3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003e3e:	697b      	ldr	r3, [r7, #20]
90003e40:	681b      	ldr	r3, [r3, #0]
90003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003e44:	693b      	ldr	r3, [r7, #16]
90003e46:	43db      	mvns	r3, r3
90003e48:	69ba      	ldr	r2, [r7, #24]
90003e4a:	4013      	ands	r3, r2
90003e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003e4e:	683b      	ldr	r3, [r7, #0]
90003e50:	685b      	ldr	r3, [r3, #4]
90003e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
90003e56:	2b00      	cmp	r3, #0
90003e58:	d003      	beq.n	90003e62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003e5a:	69ba      	ldr	r2, [r7, #24]
90003e5c:	693b      	ldr	r3, [r7, #16]
90003e5e:	4313      	orrs	r3, r2
90003e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90003e62:	697b      	ldr	r3, [r7, #20]
90003e64:	69ba      	ldr	r2, [r7, #24]
90003e66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003e68:	69fb      	ldr	r3, [r7, #28]
90003e6a:	3301      	adds	r3, #1
90003e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003e6e:	683b      	ldr	r3, [r7, #0]
90003e70:	681a      	ldr	r2, [r3, #0]
90003e72:	69fb      	ldr	r3, [r7, #28]
90003e74:	fa22 f303 	lsr.w	r3, r2, r3
90003e78:	2b00      	cmp	r3, #0
90003e7a:	f47f ae63 	bne.w	90003b44 <HAL_GPIO_Init+0x14>
  }
}
90003e7e:	bf00      	nop
90003e80:	bf00      	nop
90003e82:	3724      	adds	r7, #36	@ 0x24
90003e84:	46bd      	mov	sp, r7
90003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
90003e8a:	4770      	bx	lr
90003e8c:	58000400 	.word	0x58000400

90003e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90003e90:	b480      	push	{r7}
90003e92:	b085      	sub	sp, #20
90003e94:	af00      	add	r7, sp, #0
90003e96:	6078      	str	r0, [r7, #4]
90003e98:	460b      	mov	r3, r1
90003e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90003e9c:	687b      	ldr	r3, [r7, #4]
90003e9e:	691a      	ldr	r2, [r3, #16]
90003ea0:	887b      	ldrh	r3, [r7, #2]
90003ea2:	4013      	ands	r3, r2
90003ea4:	2b00      	cmp	r3, #0
90003ea6:	d002      	beq.n	90003eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
90003ea8:	2301      	movs	r3, #1
90003eaa:	73fb      	strb	r3, [r7, #15]
90003eac:	e001      	b.n	90003eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
90003eae:	2300      	movs	r3, #0
90003eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
90003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
90003eb4:	4618      	mov	r0, r3
90003eb6:	3714      	adds	r7, #20
90003eb8:	46bd      	mov	sp, r7
90003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ebe:	4770      	bx	lr

90003ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003ec0:	b480      	push	{r7}
90003ec2:	b083      	sub	sp, #12
90003ec4:	af00      	add	r7, sp, #0
90003ec6:	6078      	str	r0, [r7, #4]
90003ec8:	460b      	mov	r3, r1
90003eca:	807b      	strh	r3, [r7, #2]
90003ecc:	4613      	mov	r3, r2
90003ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003ed0:	787b      	ldrb	r3, [r7, #1]
90003ed2:	2b00      	cmp	r3, #0
90003ed4:	d003      	beq.n	90003ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003ed6:	887a      	ldrh	r2, [r7, #2]
90003ed8:	687b      	ldr	r3, [r7, #4]
90003eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003edc:	e003      	b.n	90003ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003ede:	887b      	ldrh	r3, [r7, #2]
90003ee0:	041a      	lsls	r2, r3, #16
90003ee2:	687b      	ldr	r3, [r7, #4]
90003ee4:	619a      	str	r2, [r3, #24]
}
90003ee6:	bf00      	nop
90003ee8:	370c      	adds	r7, #12
90003eea:	46bd      	mov	sp, r7
90003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ef0:	4770      	bx	lr

90003ef2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003ef2:	b580      	push	{r7, lr}
90003ef4:	b086      	sub	sp, #24
90003ef6:	af00      	add	r7, sp, #0
90003ef8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003efa:	687b      	ldr	r3, [r7, #4]
90003efc:	681b      	ldr	r3, [r3, #0]
90003efe:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90003f00:	693b      	ldr	r3, [r7, #16]
90003f02:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003f04:	687b      	ldr	r3, [r7, #4]
90003f06:	681b      	ldr	r3, [r3, #0]
90003f08:	4618      	mov	r0, r3
90003f0a:	f007 f9a5 	bl	9000b258 <USB_GetMode>
90003f0e:	4603      	mov	r3, r0
90003f10:	2b01      	cmp	r3, #1
90003f12:	f040 80fb 	bne.w	9000410c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90003f16:	687b      	ldr	r3, [r7, #4]
90003f18:	681b      	ldr	r3, [r3, #0]
90003f1a:	4618      	mov	r0, r3
90003f1c:	f007 f968 	bl	9000b1f0 <USB_ReadInterrupts>
90003f20:	4603      	mov	r3, r0
90003f22:	2b00      	cmp	r3, #0
90003f24:	f000 80f1 	beq.w	9000410a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003f28:	687b      	ldr	r3, [r7, #4]
90003f2a:	681b      	ldr	r3, [r3, #0]
90003f2c:	4618      	mov	r0, r3
90003f2e:	f007 f95f 	bl	9000b1f0 <USB_ReadInterrupts>
90003f32:	4603      	mov	r3, r0
90003f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
90003f38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90003f3c:	d104      	bne.n	90003f48 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003f3e:	687b      	ldr	r3, [r7, #4]
90003f40:	681b      	ldr	r3, [r3, #0]
90003f42:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
90003f46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003f48:	687b      	ldr	r3, [r7, #4]
90003f4a:	681b      	ldr	r3, [r3, #0]
90003f4c:	4618      	mov	r0, r3
90003f4e:	f007 f94f 	bl	9000b1f0 <USB_ReadInterrupts>
90003f52:	4603      	mov	r3, r0
90003f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
90003f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90003f5c:	d104      	bne.n	90003f68 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003f5e:	687b      	ldr	r3, [r7, #4]
90003f60:	681b      	ldr	r3, [r3, #0]
90003f62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
90003f66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90003f68:	687b      	ldr	r3, [r7, #4]
90003f6a:	681b      	ldr	r3, [r3, #0]
90003f6c:	4618      	mov	r0, r3
90003f6e:	f007 f93f 	bl	9000b1f0 <USB_ReadInterrupts>
90003f72:	4603      	mov	r3, r0
90003f74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
90003f78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90003f7c:	d104      	bne.n	90003f88 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003f7e:	687b      	ldr	r3, [r7, #4]
90003f80:	681b      	ldr	r3, [r3, #0]
90003f82:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
90003f86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003f88:	687b      	ldr	r3, [r7, #4]
90003f8a:	681b      	ldr	r3, [r3, #0]
90003f8c:	4618      	mov	r0, r3
90003f8e:	f007 f92f 	bl	9000b1f0 <USB_ReadInterrupts>
90003f92:	4603      	mov	r3, r0
90003f94:	f003 0302 	and.w	r3, r3, #2
90003f98:	2b02      	cmp	r3, #2
90003f9a:	d103      	bne.n	90003fa4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90003f9c:	687b      	ldr	r3, [r7, #4]
90003f9e:	681b      	ldr	r3, [r3, #0]
90003fa0:	2202      	movs	r2, #2
90003fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90003fa4:	687b      	ldr	r3, [r7, #4]
90003fa6:	681b      	ldr	r3, [r3, #0]
90003fa8:	4618      	mov	r0, r3
90003faa:	f007 f921 	bl	9000b1f0 <USB_ReadInterrupts>
90003fae:	4603      	mov	r3, r0
90003fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90003fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90003fb8:	d120      	bne.n	90003ffc <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
90003fba:	687b      	ldr	r3, [r7, #4]
90003fbc:	681b      	ldr	r3, [r3, #0]
90003fbe:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
90003fc2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90003fc4:	68fb      	ldr	r3, [r7, #12]
90003fc6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90003fca:	681b      	ldr	r3, [r3, #0]
90003fcc:	f003 0301 	and.w	r3, r3, #1
90003fd0:	2b00      	cmp	r3, #0
90003fd2:	d113      	bne.n	90003ffc <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90003fd4:	2110      	movs	r1, #16
90003fd6:	6938      	ldr	r0, [r7, #16]
90003fd8:	f007 f852 	bl	9000b080 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
90003fdc:	6938      	ldr	r0, [r7, #16]
90003fde:	f007 f881 	bl	9000b0e4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90003fe2:	687b      	ldr	r3, [r7, #4]
90003fe4:	7a5b      	ldrb	r3, [r3, #9]
90003fe6:	2b02      	cmp	r3, #2
90003fe8:	d105      	bne.n	90003ff6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90003fea:	687b      	ldr	r3, [r7, #4]
90003fec:	681b      	ldr	r3, [r3, #0]
90003fee:	2101      	movs	r1, #1
90003ff0:	4618      	mov	r0, r3
90003ff2:	f007 f93f 	bl	9000b274 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90003ff6:	6878      	ldr	r0, [r7, #4]
90003ff8:	f7fd f8a2 	bl	90001140 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90003ffc:	687b      	ldr	r3, [r7, #4]
90003ffe:	681b      	ldr	r3, [r3, #0]
90004000:	4618      	mov	r0, r3
90004002:	f007 f8f5 	bl	9000b1f0 <USB_ReadInterrupts>
90004006:	4603      	mov	r3, r0
90004008:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
9000400c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90004010:	d102      	bne.n	90004018 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
90004012:	6878      	ldr	r0, [r7, #4]
90004014:	f001 fca1 	bl	9000595a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90004018:	687b      	ldr	r3, [r7, #4]
9000401a:	681b      	ldr	r3, [r3, #0]
9000401c:	4618      	mov	r0, r3
9000401e:	f007 f8e7 	bl	9000b1f0 <USB_ReadInterrupts>
90004022:	4603      	mov	r3, r0
90004024:	f003 0308 	and.w	r3, r3, #8
90004028:	2b08      	cmp	r3, #8
9000402a:	d106      	bne.n	9000403a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
9000402c:	6878      	ldr	r0, [r7, #4]
9000402e:	f7fd f86b 	bl	90001108 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90004032:	687b      	ldr	r3, [r7, #4]
90004034:	681b      	ldr	r3, [r3, #0]
90004036:	2208      	movs	r2, #8
90004038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
9000403a:	687b      	ldr	r3, [r7, #4]
9000403c:	681b      	ldr	r3, [r3, #0]
9000403e:	4618      	mov	r0, r3
90004040:	f007 f8d6 	bl	9000b1f0 <USB_ReadInterrupts>
90004044:	4603      	mov	r3, r0
90004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
9000404a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
9000404e:	d139      	bne.n	900040c4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90004050:	687b      	ldr	r3, [r7, #4]
90004052:	681b      	ldr	r3, [r3, #0]
90004054:	4618      	mov	r0, r3
90004056:	f007 f94a 	bl	9000b2ee <USB_HC_ReadInterrupt>
9000405a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000405c:	2300      	movs	r3, #0
9000405e:	617b      	str	r3, [r7, #20]
90004060:	e025      	b.n	900040ae <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90004062:	697b      	ldr	r3, [r7, #20]
90004064:	f003 030f 	and.w	r3, r3, #15
90004068:	68ba      	ldr	r2, [r7, #8]
9000406a:	fa22 f303 	lsr.w	r3, r2, r3
9000406e:	f003 0301 	and.w	r3, r3, #1
90004072:	2b00      	cmp	r3, #0
90004074:	d018      	beq.n	900040a8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90004076:	697b      	ldr	r3, [r7, #20]
90004078:	015a      	lsls	r2, r3, #5
9000407a:	68fb      	ldr	r3, [r7, #12]
9000407c:	4413      	add	r3, r2
9000407e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004082:	681b      	ldr	r3, [r3, #0]
90004084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
90004088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000408c:	d106      	bne.n	9000409c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
9000408e:	697b      	ldr	r3, [r7, #20]
90004090:	b2db      	uxtb	r3, r3
90004092:	4619      	mov	r1, r3
90004094:	6878      	ldr	r0, [r7, #4]
90004096:	f000 f859 	bl	9000414c <HCD_HC_IN_IRQHandler>
9000409a:	e005      	b.n	900040a8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
9000409c:	697b      	ldr	r3, [r7, #20]
9000409e:	b2db      	uxtb	r3, r3
900040a0:	4619      	mov	r1, r3
900040a2:	6878      	ldr	r0, [r7, #4]
900040a4:	f000 febb 	bl	90004e1e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900040a8:	697b      	ldr	r3, [r7, #20]
900040aa:	3301      	adds	r3, #1
900040ac:	617b      	str	r3, [r7, #20]
900040ae:	687b      	ldr	r3, [r7, #4]
900040b0:	795b      	ldrb	r3, [r3, #5]
900040b2:	461a      	mov	r2, r3
900040b4:	697b      	ldr	r3, [r7, #20]
900040b6:	4293      	cmp	r3, r2
900040b8:	d3d3      	bcc.n	90004062 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
900040ba:	687b      	ldr	r3, [r7, #4]
900040bc:	681b      	ldr	r3, [r3, #0]
900040be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
900040c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
900040c4:	687b      	ldr	r3, [r7, #4]
900040c6:	681b      	ldr	r3, [r3, #0]
900040c8:	4618      	mov	r0, r3
900040ca:	f007 f891 	bl	9000b1f0 <USB_ReadInterrupts>
900040ce:	4603      	mov	r3, r0
900040d0:	f003 0310 	and.w	r3, r3, #16
900040d4:	2b10      	cmp	r3, #16
900040d6:	d101      	bne.n	900040dc <HAL_HCD_IRQHandler+0x1ea>
900040d8:	2301      	movs	r3, #1
900040da:	e000      	b.n	900040de <HAL_HCD_IRQHandler+0x1ec>
900040dc:	2300      	movs	r3, #0
900040de:	2b00      	cmp	r3, #0
900040e0:	d014      	beq.n	9000410c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900040e2:	687b      	ldr	r3, [r7, #4]
900040e4:	681b      	ldr	r3, [r3, #0]
900040e6:	699a      	ldr	r2, [r3, #24]
900040e8:	687b      	ldr	r3, [r7, #4]
900040ea:	681b      	ldr	r3, [r3, #0]
900040ec:	f022 0210 	bic.w	r2, r2, #16
900040f0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
900040f2:	6878      	ldr	r0, [r7, #4]
900040f4:	f001 fb52 	bl	9000579c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900040f8:	687b      	ldr	r3, [r7, #4]
900040fa:	681b      	ldr	r3, [r3, #0]
900040fc:	699a      	ldr	r2, [r3, #24]
900040fe:	687b      	ldr	r3, [r7, #4]
90004100:	681b      	ldr	r3, [r3, #0]
90004102:	f042 0210 	orr.w	r2, r2, #16
90004106:	619a      	str	r2, [r3, #24]
90004108:	e000      	b.n	9000410c <HAL_HCD_IRQHandler+0x21a>
      return;
9000410a:	bf00      	nop
    }
  }
}
9000410c:	3718      	adds	r7, #24
9000410e:	46bd      	mov	sp, r7
90004110:	bd80      	pop	{r7, pc}

90004112 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
90004112:	b580      	push	{r7, lr}
90004114:	b082      	sub	sp, #8
90004116:	af00      	add	r7, sp, #0
90004118:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
9000411a:	687b      	ldr	r3, [r7, #4]
9000411c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
90004120:	2b01      	cmp	r3, #1
90004122:	d101      	bne.n	90004128 <HAL_HCD_Stop+0x16>
90004124:	2302      	movs	r3, #2
90004126:	e00d      	b.n	90004144 <HAL_HCD_Stop+0x32>
90004128:	687b      	ldr	r3, [r7, #4]
9000412a:	2201      	movs	r2, #1
9000412c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
90004130:	687b      	ldr	r3, [r7, #4]
90004132:	681b      	ldr	r3, [r3, #0]
90004134:	4618      	mov	r0, r3
90004136:	f007 fa0b 	bl	9000b550 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
9000413a:	687b      	ldr	r3, [r7, #4]
9000413c:	2200      	movs	r2, #0
9000413e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
90004142:	2300      	movs	r3, #0
}
90004144:	4618      	mov	r0, r3
90004146:	3708      	adds	r7, #8
90004148:	46bd      	mov	sp, r7
9000414a:	bd80      	pop	{r7, pc}

9000414c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
9000414c:	b580      	push	{r7, lr}
9000414e:	b086      	sub	sp, #24
90004150:	af00      	add	r7, sp, #0
90004152:	6078      	str	r0, [r7, #4]
90004154:	460b      	mov	r3, r1
90004156:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004158:	687b      	ldr	r3, [r7, #4]
9000415a:	681b      	ldr	r3, [r3, #0]
9000415c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000415e:	697b      	ldr	r3, [r7, #20]
90004160:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004162:	687b      	ldr	r3, [r7, #4]
90004164:	681b      	ldr	r3, [r3, #0]
90004166:	78fa      	ldrb	r2, [r7, #3]
90004168:	4611      	mov	r1, r2
9000416a:	4618      	mov	r0, r3
9000416c:	f007 f853 	bl	9000b216 <USB_ReadChInterrupts>
90004170:	4603      	mov	r3, r0
90004172:	f003 0304 	and.w	r3, r3, #4
90004176:	2b04      	cmp	r3, #4
90004178:	d11a      	bne.n	900041b0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
9000417a:	78fb      	ldrb	r3, [r7, #3]
9000417c:	015a      	lsls	r2, r3, #5
9000417e:	693b      	ldr	r3, [r7, #16]
90004180:	4413      	add	r3, r2
90004182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004186:	461a      	mov	r2, r3
90004188:	2304      	movs	r3, #4
9000418a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
9000418c:	78fa      	ldrb	r2, [r7, #3]
9000418e:	6879      	ldr	r1, [r7, #4]
90004190:	4613      	mov	r3, r2
90004192:	011b      	lsls	r3, r3, #4
90004194:	1a9b      	subs	r3, r3, r2
90004196:	009b      	lsls	r3, r3, #2
90004198:	440b      	add	r3, r1
9000419a:	334d      	adds	r3, #77	@ 0x4d
9000419c:	2207      	movs	r2, #7
9000419e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900041a0:	687b      	ldr	r3, [r7, #4]
900041a2:	681b      	ldr	r3, [r3, #0]
900041a4:	78fa      	ldrb	r2, [r7, #3]
900041a6:	4611      	mov	r1, r2
900041a8:	4618      	mov	r0, r3
900041aa:	f007 f8b1 	bl	9000b310 <USB_HC_Halt>
900041ae:	e09e      	b.n	900042ee <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
900041b0:	687b      	ldr	r3, [r7, #4]
900041b2:	681b      	ldr	r3, [r3, #0]
900041b4:	78fa      	ldrb	r2, [r7, #3]
900041b6:	4611      	mov	r1, r2
900041b8:	4618      	mov	r0, r3
900041ba:	f007 f82c 	bl	9000b216 <USB_ReadChInterrupts>
900041be:	4603      	mov	r3, r0
900041c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900041c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
900041c8:	d11b      	bne.n	90004202 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
900041ca:	78fb      	ldrb	r3, [r7, #3]
900041cc:	015a      	lsls	r2, r3, #5
900041ce:	693b      	ldr	r3, [r7, #16]
900041d0:	4413      	add	r3, r2
900041d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900041d6:	461a      	mov	r2, r3
900041d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
900041dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
900041de:	78fa      	ldrb	r2, [r7, #3]
900041e0:	6879      	ldr	r1, [r7, #4]
900041e2:	4613      	mov	r3, r2
900041e4:	011b      	lsls	r3, r3, #4
900041e6:	1a9b      	subs	r3, r3, r2
900041e8:	009b      	lsls	r3, r3, #2
900041ea:	440b      	add	r3, r1
900041ec:	334d      	adds	r3, #77	@ 0x4d
900041ee:	2208      	movs	r2, #8
900041f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900041f2:	687b      	ldr	r3, [r7, #4]
900041f4:	681b      	ldr	r3, [r3, #0]
900041f6:	78fa      	ldrb	r2, [r7, #3]
900041f8:	4611      	mov	r1, r2
900041fa:	4618      	mov	r0, r3
900041fc:	f007 f888 	bl	9000b310 <USB_HC_Halt>
90004200:	e075      	b.n	900042ee <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90004202:	687b      	ldr	r3, [r7, #4]
90004204:	681b      	ldr	r3, [r3, #0]
90004206:	78fa      	ldrb	r2, [r7, #3]
90004208:	4611      	mov	r1, r2
9000420a:	4618      	mov	r0, r3
9000420c:	f007 f803 	bl	9000b216 <USB_ReadChInterrupts>
90004210:	4603      	mov	r3, r0
90004212:	f003 0308 	and.w	r3, r3, #8
90004216:	2b08      	cmp	r3, #8
90004218:	d11a      	bne.n	90004250 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000421a:	78fb      	ldrb	r3, [r7, #3]
9000421c:	015a      	lsls	r2, r3, #5
9000421e:	693b      	ldr	r3, [r7, #16]
90004220:	4413      	add	r3, r2
90004222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004226:	461a      	mov	r2, r3
90004228:	2308      	movs	r3, #8
9000422a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
9000422c:	78fa      	ldrb	r2, [r7, #3]
9000422e:	6879      	ldr	r1, [r7, #4]
90004230:	4613      	mov	r3, r2
90004232:	011b      	lsls	r3, r3, #4
90004234:	1a9b      	subs	r3, r3, r2
90004236:	009b      	lsls	r3, r3, #2
90004238:	440b      	add	r3, r1
9000423a:	334d      	adds	r3, #77	@ 0x4d
9000423c:	2206      	movs	r2, #6
9000423e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004240:	687b      	ldr	r3, [r7, #4]
90004242:	681b      	ldr	r3, [r3, #0]
90004244:	78fa      	ldrb	r2, [r7, #3]
90004246:	4611      	mov	r1, r2
90004248:	4618      	mov	r0, r3
9000424a:	f007 f861 	bl	9000b310 <USB_HC_Halt>
9000424e:	e04e      	b.n	900042ee <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90004250:	687b      	ldr	r3, [r7, #4]
90004252:	681b      	ldr	r3, [r3, #0]
90004254:	78fa      	ldrb	r2, [r7, #3]
90004256:	4611      	mov	r1, r2
90004258:	4618      	mov	r0, r3
9000425a:	f006 ffdc 	bl	9000b216 <USB_ReadChInterrupts>
9000425e:	4603      	mov	r3, r0
90004260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
90004264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
90004268:	d11b      	bne.n	900042a2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
9000426a:	78fb      	ldrb	r3, [r7, #3]
9000426c:	015a      	lsls	r2, r3, #5
9000426e:	693b      	ldr	r3, [r7, #16]
90004270:	4413      	add	r3, r2
90004272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004276:	461a      	mov	r2, r3
90004278:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000427c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
9000427e:	78fa      	ldrb	r2, [r7, #3]
90004280:	6879      	ldr	r1, [r7, #4]
90004282:	4613      	mov	r3, r2
90004284:	011b      	lsls	r3, r3, #4
90004286:	1a9b      	subs	r3, r3, r2
90004288:	009b      	lsls	r3, r3, #2
9000428a:	440b      	add	r3, r1
9000428c:	334d      	adds	r3, #77	@ 0x4d
9000428e:	2209      	movs	r2, #9
90004290:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004292:	687b      	ldr	r3, [r7, #4]
90004294:	681b      	ldr	r3, [r3, #0]
90004296:	78fa      	ldrb	r2, [r7, #3]
90004298:	4611      	mov	r1, r2
9000429a:	4618      	mov	r0, r3
9000429c:	f007 f838 	bl	9000b310 <USB_HC_Halt>
900042a0:	e025      	b.n	900042ee <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
900042a2:	687b      	ldr	r3, [r7, #4]
900042a4:	681b      	ldr	r3, [r3, #0]
900042a6:	78fa      	ldrb	r2, [r7, #3]
900042a8:	4611      	mov	r1, r2
900042aa:	4618      	mov	r0, r3
900042ac:	f006 ffb3 	bl	9000b216 <USB_ReadChInterrupts>
900042b0:	4603      	mov	r3, r0
900042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
900042b6:	2b80      	cmp	r3, #128	@ 0x80
900042b8:	d119      	bne.n	900042ee <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900042ba:	78fb      	ldrb	r3, [r7, #3]
900042bc:	015a      	lsls	r2, r3, #5
900042be:	693b      	ldr	r3, [r7, #16]
900042c0:	4413      	add	r3, r2
900042c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900042c6:	461a      	mov	r2, r3
900042c8:	2380      	movs	r3, #128	@ 0x80
900042ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
900042cc:	78fa      	ldrb	r2, [r7, #3]
900042ce:	6879      	ldr	r1, [r7, #4]
900042d0:	4613      	mov	r3, r2
900042d2:	011b      	lsls	r3, r3, #4
900042d4:	1a9b      	subs	r3, r3, r2
900042d6:	009b      	lsls	r3, r3, #2
900042d8:	440b      	add	r3, r1
900042da:	334d      	adds	r3, #77	@ 0x4d
900042dc:	2207      	movs	r2, #7
900042de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900042e0:	687b      	ldr	r3, [r7, #4]
900042e2:	681b      	ldr	r3, [r3, #0]
900042e4:	78fa      	ldrb	r2, [r7, #3]
900042e6:	4611      	mov	r1, r2
900042e8:	4618      	mov	r0, r3
900042ea:	f007 f811 	bl	9000b310 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
900042ee:	687b      	ldr	r3, [r7, #4]
900042f0:	681b      	ldr	r3, [r3, #0]
900042f2:	78fa      	ldrb	r2, [r7, #3]
900042f4:	4611      	mov	r1, r2
900042f6:	4618      	mov	r0, r3
900042f8:	f006 ff8d 	bl	9000b216 <USB_ReadChInterrupts>
900042fc:	4603      	mov	r3, r0
900042fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004306:	d112      	bne.n	9000432e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004308:	687b      	ldr	r3, [r7, #4]
9000430a:	681b      	ldr	r3, [r3, #0]
9000430c:	78fa      	ldrb	r2, [r7, #3]
9000430e:	4611      	mov	r1, r2
90004310:	4618      	mov	r0, r3
90004312:	f006 fffd 	bl	9000b310 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004316:	78fb      	ldrb	r3, [r7, #3]
90004318:	015a      	lsls	r2, r3, #5
9000431a:	693b      	ldr	r3, [r7, #16]
9000431c:	4413      	add	r3, r2
9000431e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004322:	461a      	mov	r2, r3
90004324:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004328:	6093      	str	r3, [r2, #8]
9000432a:	f000 bd75 	b.w	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
9000432e:	687b      	ldr	r3, [r7, #4]
90004330:	681b      	ldr	r3, [r3, #0]
90004332:	78fa      	ldrb	r2, [r7, #3]
90004334:	4611      	mov	r1, r2
90004336:	4618      	mov	r0, r3
90004338:	f006 ff6d 	bl	9000b216 <USB_ReadChInterrupts>
9000433c:	4603      	mov	r3, r0
9000433e:	f003 0301 	and.w	r3, r3, #1
90004342:	2b01      	cmp	r3, #1
90004344:	f040 8128 	bne.w	90004598 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004348:	78fb      	ldrb	r3, [r7, #3]
9000434a:	015a      	lsls	r2, r3, #5
9000434c:	693b      	ldr	r3, [r7, #16]
9000434e:	4413      	add	r3, r2
90004350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004354:	461a      	mov	r2, r3
90004356:	2320      	movs	r3, #32
90004358:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
9000435a:	78fa      	ldrb	r2, [r7, #3]
9000435c:	6879      	ldr	r1, [r7, #4]
9000435e:	4613      	mov	r3, r2
90004360:	011b      	lsls	r3, r3, #4
90004362:	1a9b      	subs	r3, r3, r2
90004364:	009b      	lsls	r3, r3, #2
90004366:	440b      	add	r3, r1
90004368:	331b      	adds	r3, #27
9000436a:	781b      	ldrb	r3, [r3, #0]
9000436c:	2b01      	cmp	r3, #1
9000436e:	d119      	bne.n	900043a4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004370:	78fa      	ldrb	r2, [r7, #3]
90004372:	6879      	ldr	r1, [r7, #4]
90004374:	4613      	mov	r3, r2
90004376:	011b      	lsls	r3, r3, #4
90004378:	1a9b      	subs	r3, r3, r2
9000437a:	009b      	lsls	r3, r3, #2
9000437c:	440b      	add	r3, r1
9000437e:	331b      	adds	r3, #27
90004380:	2200      	movs	r2, #0
90004382:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004384:	78fb      	ldrb	r3, [r7, #3]
90004386:	015a      	lsls	r2, r3, #5
90004388:	693b      	ldr	r3, [r7, #16]
9000438a:	4413      	add	r3, r2
9000438c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004390:	685b      	ldr	r3, [r3, #4]
90004392:	78fa      	ldrb	r2, [r7, #3]
90004394:	0151      	lsls	r1, r2, #5
90004396:	693a      	ldr	r2, [r7, #16]
90004398:	440a      	add	r2, r1
9000439a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000439e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900043a2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
900043a4:	687b      	ldr	r3, [r7, #4]
900043a6:	799b      	ldrb	r3, [r3, #6]
900043a8:	2b00      	cmp	r3, #0
900043aa:	d01b      	beq.n	900043e4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900043ac:	78fa      	ldrb	r2, [r7, #3]
900043ae:	6879      	ldr	r1, [r7, #4]
900043b0:	4613      	mov	r3, r2
900043b2:	011b      	lsls	r3, r3, #4
900043b4:	1a9b      	subs	r3, r3, r2
900043b6:	009b      	lsls	r3, r3, #2
900043b8:	440b      	add	r3, r1
900043ba:	3330      	adds	r3, #48	@ 0x30
900043bc:	6819      	ldr	r1, [r3, #0]
900043be:	78fb      	ldrb	r3, [r7, #3]
900043c0:	015a      	lsls	r2, r3, #5
900043c2:	693b      	ldr	r3, [r7, #16]
900043c4:	4413      	add	r3, r2
900043c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900043ca:	691b      	ldr	r3, [r3, #16]
900043cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
900043d0:	78fa      	ldrb	r2, [r7, #3]
900043d2:	1ac9      	subs	r1, r1, r3
900043d4:	6878      	ldr	r0, [r7, #4]
900043d6:	4613      	mov	r3, r2
900043d8:	011b      	lsls	r3, r3, #4
900043da:	1a9b      	subs	r3, r3, r2
900043dc:	009b      	lsls	r3, r3, #2
900043de:	4403      	add	r3, r0
900043e0:	3338      	adds	r3, #56	@ 0x38
900043e2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
900043e4:	78fa      	ldrb	r2, [r7, #3]
900043e6:	6879      	ldr	r1, [r7, #4]
900043e8:	4613      	mov	r3, r2
900043ea:	011b      	lsls	r3, r3, #4
900043ec:	1a9b      	subs	r3, r3, r2
900043ee:	009b      	lsls	r3, r3, #2
900043f0:	440b      	add	r3, r1
900043f2:	334d      	adds	r3, #77	@ 0x4d
900043f4:	2201      	movs	r2, #1
900043f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
900043f8:	78fa      	ldrb	r2, [r7, #3]
900043fa:	6879      	ldr	r1, [r7, #4]
900043fc:	4613      	mov	r3, r2
900043fe:	011b      	lsls	r3, r3, #4
90004400:	1a9b      	subs	r3, r3, r2
90004402:	009b      	lsls	r3, r3, #2
90004404:	440b      	add	r3, r1
90004406:	3344      	adds	r3, #68	@ 0x44
90004408:	2200      	movs	r2, #0
9000440a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
9000440c:	78fb      	ldrb	r3, [r7, #3]
9000440e:	015a      	lsls	r2, r3, #5
90004410:	693b      	ldr	r3, [r7, #16]
90004412:	4413      	add	r3, r2
90004414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004418:	461a      	mov	r2, r3
9000441a:	2301      	movs	r3, #1
9000441c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000441e:	78fa      	ldrb	r2, [r7, #3]
90004420:	6879      	ldr	r1, [r7, #4]
90004422:	4613      	mov	r3, r2
90004424:	011b      	lsls	r3, r3, #4
90004426:	1a9b      	subs	r3, r3, r2
90004428:	009b      	lsls	r3, r3, #2
9000442a:	440b      	add	r3, r1
9000442c:	3326      	adds	r3, #38	@ 0x26
9000442e:	781b      	ldrb	r3, [r3, #0]
90004430:	2b00      	cmp	r3, #0
90004432:	d00a      	beq.n	9000444a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004434:	78fa      	ldrb	r2, [r7, #3]
90004436:	6879      	ldr	r1, [r7, #4]
90004438:	4613      	mov	r3, r2
9000443a:	011b      	lsls	r3, r3, #4
9000443c:	1a9b      	subs	r3, r3, r2
9000443e:	009b      	lsls	r3, r3, #2
90004440:	440b      	add	r3, r1
90004442:	3326      	adds	r3, #38	@ 0x26
90004444:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004446:	2b02      	cmp	r3, #2
90004448:	d110      	bne.n	9000446c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000444a:	687b      	ldr	r3, [r7, #4]
9000444c:	681b      	ldr	r3, [r3, #0]
9000444e:	78fa      	ldrb	r2, [r7, #3]
90004450:	4611      	mov	r1, r2
90004452:	4618      	mov	r0, r3
90004454:	f006 ff5c 	bl	9000b310 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004458:	78fb      	ldrb	r3, [r7, #3]
9000445a:	015a      	lsls	r2, r3, #5
9000445c:	693b      	ldr	r3, [r7, #16]
9000445e:	4413      	add	r3, r2
90004460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004464:	461a      	mov	r2, r3
90004466:	2310      	movs	r3, #16
90004468:	6093      	str	r3, [r2, #8]
9000446a:	e03d      	b.n	900044e8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
9000446c:	78fa      	ldrb	r2, [r7, #3]
9000446e:	6879      	ldr	r1, [r7, #4]
90004470:	4613      	mov	r3, r2
90004472:	011b      	lsls	r3, r3, #4
90004474:	1a9b      	subs	r3, r3, r2
90004476:	009b      	lsls	r3, r3, #2
90004478:	440b      	add	r3, r1
9000447a:	3326      	adds	r3, #38	@ 0x26
9000447c:	781b      	ldrb	r3, [r3, #0]
9000447e:	2b03      	cmp	r3, #3
90004480:	d00a      	beq.n	90004498 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
90004482:	78fa      	ldrb	r2, [r7, #3]
90004484:	6879      	ldr	r1, [r7, #4]
90004486:	4613      	mov	r3, r2
90004488:	011b      	lsls	r3, r3, #4
9000448a:	1a9b      	subs	r3, r3, r2
9000448c:	009b      	lsls	r3, r3, #2
9000448e:	440b      	add	r3, r1
90004490:	3326      	adds	r3, #38	@ 0x26
90004492:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004494:	2b01      	cmp	r3, #1
90004496:	d127      	bne.n	900044e8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90004498:	78fb      	ldrb	r3, [r7, #3]
9000449a:	015a      	lsls	r2, r3, #5
9000449c:	693b      	ldr	r3, [r7, #16]
9000449e:	4413      	add	r3, r2
900044a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900044a4:	681b      	ldr	r3, [r3, #0]
900044a6:	78fa      	ldrb	r2, [r7, #3]
900044a8:	0151      	lsls	r1, r2, #5
900044aa:	693a      	ldr	r2, [r7, #16]
900044ac:	440a      	add	r2, r1
900044ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900044b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
900044b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900044b8:	78fa      	ldrb	r2, [r7, #3]
900044ba:	6879      	ldr	r1, [r7, #4]
900044bc:	4613      	mov	r3, r2
900044be:	011b      	lsls	r3, r3, #4
900044c0:	1a9b      	subs	r3, r3, r2
900044c2:	009b      	lsls	r3, r3, #2
900044c4:	440b      	add	r3, r1
900044c6:	334c      	adds	r3, #76	@ 0x4c
900044c8:	2201      	movs	r2, #1
900044ca:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900044cc:	78fa      	ldrb	r2, [r7, #3]
900044ce:	6879      	ldr	r1, [r7, #4]
900044d0:	4613      	mov	r3, r2
900044d2:	011b      	lsls	r3, r3, #4
900044d4:	1a9b      	subs	r3, r3, r2
900044d6:	009b      	lsls	r3, r3, #2
900044d8:	440b      	add	r3, r1
900044da:	334c      	adds	r3, #76	@ 0x4c
900044dc:	781a      	ldrb	r2, [r3, #0]
900044de:	78fb      	ldrb	r3, [r7, #3]
900044e0:	4619      	mov	r1, r3
900044e2:	6878      	ldr	r0, [r7, #4]
900044e4:	f7fc fe56 	bl	90001194 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
900044e8:	687b      	ldr	r3, [r7, #4]
900044ea:	799b      	ldrb	r3, [r3, #6]
900044ec:	2b01      	cmp	r3, #1
900044ee:	d13b      	bne.n	90004568 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
900044f0:	78fa      	ldrb	r2, [r7, #3]
900044f2:	6879      	ldr	r1, [r7, #4]
900044f4:	4613      	mov	r3, r2
900044f6:	011b      	lsls	r3, r3, #4
900044f8:	1a9b      	subs	r3, r3, r2
900044fa:	009b      	lsls	r3, r3, #2
900044fc:	440b      	add	r3, r1
900044fe:	3338      	adds	r3, #56	@ 0x38
90004500:	6819      	ldr	r1, [r3, #0]
90004502:	78fa      	ldrb	r2, [r7, #3]
90004504:	6878      	ldr	r0, [r7, #4]
90004506:	4613      	mov	r3, r2
90004508:	011b      	lsls	r3, r3, #4
9000450a:	1a9b      	subs	r3, r3, r2
9000450c:	009b      	lsls	r3, r3, #2
9000450e:	4403      	add	r3, r0
90004510:	3328      	adds	r3, #40	@ 0x28
90004512:	881b      	ldrh	r3, [r3, #0]
90004514:	440b      	add	r3, r1
90004516:	1e59      	subs	r1, r3, #1
90004518:	78fa      	ldrb	r2, [r7, #3]
9000451a:	6878      	ldr	r0, [r7, #4]
9000451c:	4613      	mov	r3, r2
9000451e:	011b      	lsls	r3, r3, #4
90004520:	1a9b      	subs	r3, r3, r2
90004522:	009b      	lsls	r3, r3, #2
90004524:	4403      	add	r3, r0
90004526:	3328      	adds	r3, #40	@ 0x28
90004528:	881b      	ldrh	r3, [r3, #0]
9000452a:	fbb1 f3f3 	udiv	r3, r1, r3
9000452e:	f003 0301 	and.w	r3, r3, #1
90004532:	2b00      	cmp	r3, #0
90004534:	f000 8470 	beq.w	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004538:	78fa      	ldrb	r2, [r7, #3]
9000453a:	6879      	ldr	r1, [r7, #4]
9000453c:	4613      	mov	r3, r2
9000453e:	011b      	lsls	r3, r3, #4
90004540:	1a9b      	subs	r3, r3, r2
90004542:	009b      	lsls	r3, r3, #2
90004544:	440b      	add	r3, r1
90004546:	333c      	adds	r3, #60	@ 0x3c
90004548:	781b      	ldrb	r3, [r3, #0]
9000454a:	78fa      	ldrb	r2, [r7, #3]
9000454c:	f083 0301 	eor.w	r3, r3, #1
90004550:	b2d8      	uxtb	r0, r3
90004552:	6879      	ldr	r1, [r7, #4]
90004554:	4613      	mov	r3, r2
90004556:	011b      	lsls	r3, r3, #4
90004558:	1a9b      	subs	r3, r3, r2
9000455a:	009b      	lsls	r3, r3, #2
9000455c:	440b      	add	r3, r1
9000455e:	333c      	adds	r3, #60	@ 0x3c
90004560:	4602      	mov	r2, r0
90004562:	701a      	strb	r2, [r3, #0]
90004564:	f000 bc58 	b.w	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004568:	78fa      	ldrb	r2, [r7, #3]
9000456a:	6879      	ldr	r1, [r7, #4]
9000456c:	4613      	mov	r3, r2
9000456e:	011b      	lsls	r3, r3, #4
90004570:	1a9b      	subs	r3, r3, r2
90004572:	009b      	lsls	r3, r3, #2
90004574:	440b      	add	r3, r1
90004576:	333c      	adds	r3, #60	@ 0x3c
90004578:	781b      	ldrb	r3, [r3, #0]
9000457a:	78fa      	ldrb	r2, [r7, #3]
9000457c:	f083 0301 	eor.w	r3, r3, #1
90004580:	b2d8      	uxtb	r0, r3
90004582:	6879      	ldr	r1, [r7, #4]
90004584:	4613      	mov	r3, r2
90004586:	011b      	lsls	r3, r3, #4
90004588:	1a9b      	subs	r3, r3, r2
9000458a:	009b      	lsls	r3, r3, #2
9000458c:	440b      	add	r3, r1
9000458e:	333c      	adds	r3, #60	@ 0x3c
90004590:	4602      	mov	r2, r0
90004592:	701a      	strb	r2, [r3, #0]
90004594:	f000 bc40 	b.w	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004598:	687b      	ldr	r3, [r7, #4]
9000459a:	681b      	ldr	r3, [r3, #0]
9000459c:	78fa      	ldrb	r2, [r7, #3]
9000459e:	4611      	mov	r1, r2
900045a0:	4618      	mov	r0, r3
900045a2:	f006 fe38 	bl	9000b216 <USB_ReadChInterrupts>
900045a6:	4603      	mov	r3, r0
900045a8:	f003 0320 	and.w	r3, r3, #32
900045ac:	2b20      	cmp	r3, #32
900045ae:	d131      	bne.n	90004614 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900045b0:	78fb      	ldrb	r3, [r7, #3]
900045b2:	015a      	lsls	r2, r3, #5
900045b4:	693b      	ldr	r3, [r7, #16]
900045b6:	4413      	add	r3, r2
900045b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900045bc:	461a      	mov	r2, r3
900045be:	2320      	movs	r3, #32
900045c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
900045c2:	78fa      	ldrb	r2, [r7, #3]
900045c4:	6879      	ldr	r1, [r7, #4]
900045c6:	4613      	mov	r3, r2
900045c8:	011b      	lsls	r3, r3, #4
900045ca:	1a9b      	subs	r3, r3, r2
900045cc:	009b      	lsls	r3, r3, #2
900045ce:	440b      	add	r3, r1
900045d0:	331a      	adds	r3, #26
900045d2:	781b      	ldrb	r3, [r3, #0]
900045d4:	2b01      	cmp	r3, #1
900045d6:	f040 841f 	bne.w	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
900045da:	78fa      	ldrb	r2, [r7, #3]
900045dc:	6879      	ldr	r1, [r7, #4]
900045de:	4613      	mov	r3, r2
900045e0:	011b      	lsls	r3, r3, #4
900045e2:	1a9b      	subs	r3, r3, r2
900045e4:	009b      	lsls	r3, r3, #2
900045e6:	440b      	add	r3, r1
900045e8:	331b      	adds	r3, #27
900045ea:	2201      	movs	r2, #1
900045ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
900045ee:	78fa      	ldrb	r2, [r7, #3]
900045f0:	6879      	ldr	r1, [r7, #4]
900045f2:	4613      	mov	r3, r2
900045f4:	011b      	lsls	r3, r3, #4
900045f6:	1a9b      	subs	r3, r3, r2
900045f8:	009b      	lsls	r3, r3, #2
900045fa:	440b      	add	r3, r1
900045fc:	334d      	adds	r3, #77	@ 0x4d
900045fe:	2203      	movs	r2, #3
90004600:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004602:	687b      	ldr	r3, [r7, #4]
90004604:	681b      	ldr	r3, [r3, #0]
90004606:	78fa      	ldrb	r2, [r7, #3]
90004608:	4611      	mov	r1, r2
9000460a:	4618      	mov	r0, r3
9000460c:	f006 fe80 	bl	9000b310 <USB_HC_Halt>
90004610:	f000 bc02 	b.w	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
90004614:	687b      	ldr	r3, [r7, #4]
90004616:	681b      	ldr	r3, [r3, #0]
90004618:	78fa      	ldrb	r2, [r7, #3]
9000461a:	4611      	mov	r1, r2
9000461c:	4618      	mov	r0, r3
9000461e:	f006 fdfa 	bl	9000b216 <USB_ReadChInterrupts>
90004622:	4603      	mov	r3, r0
90004624:	f003 0302 	and.w	r3, r3, #2
90004628:	2b02      	cmp	r3, #2
9000462a:	f040 8305 	bne.w	90004c38 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
9000462e:	78fb      	ldrb	r3, [r7, #3]
90004630:	015a      	lsls	r2, r3, #5
90004632:	693b      	ldr	r3, [r7, #16]
90004634:	4413      	add	r3, r2
90004636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000463a:	461a      	mov	r2, r3
9000463c:	2302      	movs	r3, #2
9000463e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
90004640:	78fa      	ldrb	r2, [r7, #3]
90004642:	6879      	ldr	r1, [r7, #4]
90004644:	4613      	mov	r3, r2
90004646:	011b      	lsls	r3, r3, #4
90004648:	1a9b      	subs	r3, r3, r2
9000464a:	009b      	lsls	r3, r3, #2
9000464c:	440b      	add	r3, r1
9000464e:	334d      	adds	r3, #77	@ 0x4d
90004650:	781b      	ldrb	r3, [r3, #0]
90004652:	2b01      	cmp	r3, #1
90004654:	d114      	bne.n	90004680 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004656:	78fa      	ldrb	r2, [r7, #3]
90004658:	6879      	ldr	r1, [r7, #4]
9000465a:	4613      	mov	r3, r2
9000465c:	011b      	lsls	r3, r3, #4
9000465e:	1a9b      	subs	r3, r3, r2
90004660:	009b      	lsls	r3, r3, #2
90004662:	440b      	add	r3, r1
90004664:	334d      	adds	r3, #77	@ 0x4d
90004666:	2202      	movs	r2, #2
90004668:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
9000466a:	78fa      	ldrb	r2, [r7, #3]
9000466c:	6879      	ldr	r1, [r7, #4]
9000466e:	4613      	mov	r3, r2
90004670:	011b      	lsls	r3, r3, #4
90004672:	1a9b      	subs	r3, r3, r2
90004674:	009b      	lsls	r3, r3, #2
90004676:	440b      	add	r3, r1
90004678:	334c      	adds	r3, #76	@ 0x4c
9000467a:	2201      	movs	r2, #1
9000467c:	701a      	strb	r2, [r3, #0]
9000467e:	e2cc      	b.n	90004c1a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90004680:	78fa      	ldrb	r2, [r7, #3]
90004682:	6879      	ldr	r1, [r7, #4]
90004684:	4613      	mov	r3, r2
90004686:	011b      	lsls	r3, r3, #4
90004688:	1a9b      	subs	r3, r3, r2
9000468a:	009b      	lsls	r3, r3, #2
9000468c:	440b      	add	r3, r1
9000468e:	334d      	adds	r3, #77	@ 0x4d
90004690:	781b      	ldrb	r3, [r3, #0]
90004692:	2b06      	cmp	r3, #6
90004694:	d114      	bne.n	900046c0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004696:	78fa      	ldrb	r2, [r7, #3]
90004698:	6879      	ldr	r1, [r7, #4]
9000469a:	4613      	mov	r3, r2
9000469c:	011b      	lsls	r3, r3, #4
9000469e:	1a9b      	subs	r3, r3, r2
900046a0:	009b      	lsls	r3, r3, #2
900046a2:	440b      	add	r3, r1
900046a4:	334d      	adds	r3, #77	@ 0x4d
900046a6:	2202      	movs	r2, #2
900046a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
900046aa:	78fa      	ldrb	r2, [r7, #3]
900046ac:	6879      	ldr	r1, [r7, #4]
900046ae:	4613      	mov	r3, r2
900046b0:	011b      	lsls	r3, r3, #4
900046b2:	1a9b      	subs	r3, r3, r2
900046b4:	009b      	lsls	r3, r3, #2
900046b6:	440b      	add	r3, r1
900046b8:	334c      	adds	r3, #76	@ 0x4c
900046ba:	2205      	movs	r2, #5
900046bc:	701a      	strb	r2, [r3, #0]
900046be:	e2ac      	b.n	90004c1a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900046c0:	78fa      	ldrb	r2, [r7, #3]
900046c2:	6879      	ldr	r1, [r7, #4]
900046c4:	4613      	mov	r3, r2
900046c6:	011b      	lsls	r3, r3, #4
900046c8:	1a9b      	subs	r3, r3, r2
900046ca:	009b      	lsls	r3, r3, #2
900046cc:	440b      	add	r3, r1
900046ce:	334d      	adds	r3, #77	@ 0x4d
900046d0:	781b      	ldrb	r3, [r3, #0]
900046d2:	2b07      	cmp	r3, #7
900046d4:	d00b      	beq.n	900046ee <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
900046d6:	78fa      	ldrb	r2, [r7, #3]
900046d8:	6879      	ldr	r1, [r7, #4]
900046da:	4613      	mov	r3, r2
900046dc:	011b      	lsls	r3, r3, #4
900046de:	1a9b      	subs	r3, r3, r2
900046e0:	009b      	lsls	r3, r3, #2
900046e2:	440b      	add	r3, r1
900046e4:	334d      	adds	r3, #77	@ 0x4d
900046e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900046e8:	2b09      	cmp	r3, #9
900046ea:	f040 80a6 	bne.w	9000483a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900046ee:	78fa      	ldrb	r2, [r7, #3]
900046f0:	6879      	ldr	r1, [r7, #4]
900046f2:	4613      	mov	r3, r2
900046f4:	011b      	lsls	r3, r3, #4
900046f6:	1a9b      	subs	r3, r3, r2
900046f8:	009b      	lsls	r3, r3, #2
900046fa:	440b      	add	r3, r1
900046fc:	334d      	adds	r3, #77	@ 0x4d
900046fe:	2202      	movs	r2, #2
90004700:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004702:	78fa      	ldrb	r2, [r7, #3]
90004704:	6879      	ldr	r1, [r7, #4]
90004706:	4613      	mov	r3, r2
90004708:	011b      	lsls	r3, r3, #4
9000470a:	1a9b      	subs	r3, r3, r2
9000470c:	009b      	lsls	r3, r3, #2
9000470e:	440b      	add	r3, r1
90004710:	3344      	adds	r3, #68	@ 0x44
90004712:	681b      	ldr	r3, [r3, #0]
90004714:	1c59      	adds	r1, r3, #1
90004716:	6878      	ldr	r0, [r7, #4]
90004718:	4613      	mov	r3, r2
9000471a:	011b      	lsls	r3, r3, #4
9000471c:	1a9b      	subs	r3, r3, r2
9000471e:	009b      	lsls	r3, r3, #2
90004720:	4403      	add	r3, r0
90004722:	3344      	adds	r3, #68	@ 0x44
90004724:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004726:	78fa      	ldrb	r2, [r7, #3]
90004728:	6879      	ldr	r1, [r7, #4]
9000472a:	4613      	mov	r3, r2
9000472c:	011b      	lsls	r3, r3, #4
9000472e:	1a9b      	subs	r3, r3, r2
90004730:	009b      	lsls	r3, r3, #2
90004732:	440b      	add	r3, r1
90004734:	3344      	adds	r3, #68	@ 0x44
90004736:	681b      	ldr	r3, [r3, #0]
90004738:	2b02      	cmp	r3, #2
9000473a:	d943      	bls.n	900047c4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
9000473c:	78fa      	ldrb	r2, [r7, #3]
9000473e:	6879      	ldr	r1, [r7, #4]
90004740:	4613      	mov	r3, r2
90004742:	011b      	lsls	r3, r3, #4
90004744:	1a9b      	subs	r3, r3, r2
90004746:	009b      	lsls	r3, r3, #2
90004748:	440b      	add	r3, r1
9000474a:	3344      	adds	r3, #68	@ 0x44
9000474c:	2200      	movs	r2, #0
9000474e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
90004750:	78fa      	ldrb	r2, [r7, #3]
90004752:	6879      	ldr	r1, [r7, #4]
90004754:	4613      	mov	r3, r2
90004756:	011b      	lsls	r3, r3, #4
90004758:	1a9b      	subs	r3, r3, r2
9000475a:	009b      	lsls	r3, r3, #2
9000475c:	440b      	add	r3, r1
9000475e:	331a      	adds	r3, #26
90004760:	781b      	ldrb	r3, [r3, #0]
90004762:	2b01      	cmp	r3, #1
90004764:	d123      	bne.n	900047ae <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
90004766:	78fa      	ldrb	r2, [r7, #3]
90004768:	6879      	ldr	r1, [r7, #4]
9000476a:	4613      	mov	r3, r2
9000476c:	011b      	lsls	r3, r3, #4
9000476e:	1a9b      	subs	r3, r3, r2
90004770:	009b      	lsls	r3, r3, #2
90004772:	440b      	add	r3, r1
90004774:	331b      	adds	r3, #27
90004776:	2200      	movs	r2, #0
90004778:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
9000477a:	78fa      	ldrb	r2, [r7, #3]
9000477c:	6879      	ldr	r1, [r7, #4]
9000477e:	4613      	mov	r3, r2
90004780:	011b      	lsls	r3, r3, #4
90004782:	1a9b      	subs	r3, r3, r2
90004784:	009b      	lsls	r3, r3, #2
90004786:	440b      	add	r3, r1
90004788:	331c      	adds	r3, #28
9000478a:	2200      	movs	r2, #0
9000478c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
9000478e:	78fb      	ldrb	r3, [r7, #3]
90004790:	015a      	lsls	r2, r3, #5
90004792:	693b      	ldr	r3, [r7, #16]
90004794:	4413      	add	r3, r2
90004796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000479a:	685b      	ldr	r3, [r3, #4]
9000479c:	78fa      	ldrb	r2, [r7, #3]
9000479e:	0151      	lsls	r1, r2, #5
900047a0:	693a      	ldr	r2, [r7, #16]
900047a2:	440a      	add	r2, r1
900047a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900047a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
900047ac:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
900047ae:	78fa      	ldrb	r2, [r7, #3]
900047b0:	6879      	ldr	r1, [r7, #4]
900047b2:	4613      	mov	r3, r2
900047b4:	011b      	lsls	r3, r3, #4
900047b6:	1a9b      	subs	r3, r3, r2
900047b8:	009b      	lsls	r3, r3, #2
900047ba:	440b      	add	r3, r1
900047bc:	334c      	adds	r3, #76	@ 0x4c
900047be:	2204      	movs	r2, #4
900047c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900047c2:	e229      	b.n	90004c18 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900047c4:	78fa      	ldrb	r2, [r7, #3]
900047c6:	6879      	ldr	r1, [r7, #4]
900047c8:	4613      	mov	r3, r2
900047ca:	011b      	lsls	r3, r3, #4
900047cc:	1a9b      	subs	r3, r3, r2
900047ce:	009b      	lsls	r3, r3, #2
900047d0:	440b      	add	r3, r1
900047d2:	334c      	adds	r3, #76	@ 0x4c
900047d4:	2202      	movs	r2, #2
900047d6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900047d8:	78fa      	ldrb	r2, [r7, #3]
900047da:	6879      	ldr	r1, [r7, #4]
900047dc:	4613      	mov	r3, r2
900047de:	011b      	lsls	r3, r3, #4
900047e0:	1a9b      	subs	r3, r3, r2
900047e2:	009b      	lsls	r3, r3, #2
900047e4:	440b      	add	r3, r1
900047e6:	3326      	adds	r3, #38	@ 0x26
900047e8:	781b      	ldrb	r3, [r3, #0]
900047ea:	2b00      	cmp	r3, #0
900047ec:	d00b      	beq.n	90004806 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
900047ee:	78fa      	ldrb	r2, [r7, #3]
900047f0:	6879      	ldr	r1, [r7, #4]
900047f2:	4613      	mov	r3, r2
900047f4:	011b      	lsls	r3, r3, #4
900047f6:	1a9b      	subs	r3, r3, r2
900047f8:	009b      	lsls	r3, r3, #2
900047fa:	440b      	add	r3, r1
900047fc:	3326      	adds	r3, #38	@ 0x26
900047fe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004800:	2b02      	cmp	r3, #2
90004802:	f040 8209 	bne.w	90004c18 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004806:	78fb      	ldrb	r3, [r7, #3]
90004808:	015a      	lsls	r2, r3, #5
9000480a:	693b      	ldr	r3, [r7, #16]
9000480c:	4413      	add	r3, r2
9000480e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004812:	681b      	ldr	r3, [r3, #0]
90004814:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004816:	68fb      	ldr	r3, [r7, #12]
90004818:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
9000481c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
9000481e:	68fb      	ldr	r3, [r7, #12]
90004820:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004824:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004826:	78fb      	ldrb	r3, [r7, #3]
90004828:	015a      	lsls	r2, r3, #5
9000482a:	693b      	ldr	r3, [r7, #16]
9000482c:	4413      	add	r3, r2
9000482e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004832:	461a      	mov	r2, r3
90004834:	68fb      	ldr	r3, [r7, #12]
90004836:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004838:	e1ee      	b.n	90004c18 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
9000483a:	78fa      	ldrb	r2, [r7, #3]
9000483c:	6879      	ldr	r1, [r7, #4]
9000483e:	4613      	mov	r3, r2
90004840:	011b      	lsls	r3, r3, #4
90004842:	1a9b      	subs	r3, r3, r2
90004844:	009b      	lsls	r3, r3, #2
90004846:	440b      	add	r3, r1
90004848:	334d      	adds	r3, #77	@ 0x4d
9000484a:	781b      	ldrb	r3, [r3, #0]
9000484c:	2b05      	cmp	r3, #5
9000484e:	f040 80c8 	bne.w	900049e2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004852:	78fa      	ldrb	r2, [r7, #3]
90004854:	6879      	ldr	r1, [r7, #4]
90004856:	4613      	mov	r3, r2
90004858:	011b      	lsls	r3, r3, #4
9000485a:	1a9b      	subs	r3, r3, r2
9000485c:	009b      	lsls	r3, r3, #2
9000485e:	440b      	add	r3, r1
90004860:	334d      	adds	r3, #77	@ 0x4d
90004862:	2202      	movs	r2, #2
90004864:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004866:	78fa      	ldrb	r2, [r7, #3]
90004868:	6879      	ldr	r1, [r7, #4]
9000486a:	4613      	mov	r3, r2
9000486c:	011b      	lsls	r3, r3, #4
9000486e:	1a9b      	subs	r3, r3, r2
90004870:	009b      	lsls	r3, r3, #2
90004872:	440b      	add	r3, r1
90004874:	331b      	adds	r3, #27
90004876:	781b      	ldrb	r3, [r3, #0]
90004878:	2b01      	cmp	r3, #1
9000487a:	f040 81ce 	bne.w	90004c1a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
9000487e:	78fa      	ldrb	r2, [r7, #3]
90004880:	6879      	ldr	r1, [r7, #4]
90004882:	4613      	mov	r3, r2
90004884:	011b      	lsls	r3, r3, #4
90004886:	1a9b      	subs	r3, r3, r2
90004888:	009b      	lsls	r3, r3, #2
9000488a:	440b      	add	r3, r1
9000488c:	3326      	adds	r3, #38	@ 0x26
9000488e:	781b      	ldrb	r3, [r3, #0]
90004890:	2b03      	cmp	r3, #3
90004892:	d16b      	bne.n	9000496c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
90004894:	78fa      	ldrb	r2, [r7, #3]
90004896:	6879      	ldr	r1, [r7, #4]
90004898:	4613      	mov	r3, r2
9000489a:	011b      	lsls	r3, r3, #4
9000489c:	1a9b      	subs	r3, r3, r2
9000489e:	009b      	lsls	r3, r3, #2
900048a0:	440b      	add	r3, r1
900048a2:	3348      	adds	r3, #72	@ 0x48
900048a4:	681b      	ldr	r3, [r3, #0]
900048a6:	1c59      	adds	r1, r3, #1
900048a8:	6878      	ldr	r0, [r7, #4]
900048aa:	4613      	mov	r3, r2
900048ac:	011b      	lsls	r3, r3, #4
900048ae:	1a9b      	subs	r3, r3, r2
900048b0:	009b      	lsls	r3, r3, #2
900048b2:	4403      	add	r3, r0
900048b4:	3348      	adds	r3, #72	@ 0x48
900048b6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
900048b8:	78fa      	ldrb	r2, [r7, #3]
900048ba:	6879      	ldr	r1, [r7, #4]
900048bc:	4613      	mov	r3, r2
900048be:	011b      	lsls	r3, r3, #4
900048c0:	1a9b      	subs	r3, r3, r2
900048c2:	009b      	lsls	r3, r3, #2
900048c4:	440b      	add	r3, r1
900048c6:	3348      	adds	r3, #72	@ 0x48
900048c8:	681b      	ldr	r3, [r3, #0]
900048ca:	2b02      	cmp	r3, #2
900048cc:	d943      	bls.n	90004956 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
900048ce:	78fa      	ldrb	r2, [r7, #3]
900048d0:	6879      	ldr	r1, [r7, #4]
900048d2:	4613      	mov	r3, r2
900048d4:	011b      	lsls	r3, r3, #4
900048d6:	1a9b      	subs	r3, r3, r2
900048d8:	009b      	lsls	r3, r3, #2
900048da:	440b      	add	r3, r1
900048dc:	3348      	adds	r3, #72	@ 0x48
900048de:	2200      	movs	r2, #0
900048e0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
900048e2:	78fa      	ldrb	r2, [r7, #3]
900048e4:	6879      	ldr	r1, [r7, #4]
900048e6:	4613      	mov	r3, r2
900048e8:	011b      	lsls	r3, r3, #4
900048ea:	1a9b      	subs	r3, r3, r2
900048ec:	009b      	lsls	r3, r3, #2
900048ee:	440b      	add	r3, r1
900048f0:	331b      	adds	r3, #27
900048f2:	2200      	movs	r2, #0
900048f4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
900048f6:	78fa      	ldrb	r2, [r7, #3]
900048f8:	6879      	ldr	r1, [r7, #4]
900048fa:	4613      	mov	r3, r2
900048fc:	011b      	lsls	r3, r3, #4
900048fe:	1a9b      	subs	r3, r3, r2
90004900:	009b      	lsls	r3, r3, #2
90004902:	440b      	add	r3, r1
90004904:	3344      	adds	r3, #68	@ 0x44
90004906:	681b      	ldr	r3, [r3, #0]
90004908:	2b02      	cmp	r3, #2
9000490a:	d809      	bhi.n	90004920 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
9000490c:	78fa      	ldrb	r2, [r7, #3]
9000490e:	6879      	ldr	r1, [r7, #4]
90004910:	4613      	mov	r3, r2
90004912:	011b      	lsls	r3, r3, #4
90004914:	1a9b      	subs	r3, r3, r2
90004916:	009b      	lsls	r3, r3, #2
90004918:	440b      	add	r3, r1
9000491a:	331c      	adds	r3, #28
9000491c:	2201      	movs	r2, #1
9000491e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004920:	78fb      	ldrb	r3, [r7, #3]
90004922:	015a      	lsls	r2, r3, #5
90004924:	693b      	ldr	r3, [r7, #16]
90004926:	4413      	add	r3, r2
90004928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000492c:	685b      	ldr	r3, [r3, #4]
9000492e:	78fa      	ldrb	r2, [r7, #3]
90004930:	0151      	lsls	r1, r2, #5
90004932:	693a      	ldr	r2, [r7, #16]
90004934:	440a      	add	r2, r1
90004936:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000493a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
9000493e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
90004940:	78fa      	ldrb	r2, [r7, #3]
90004942:	6879      	ldr	r1, [r7, #4]
90004944:	4613      	mov	r3, r2
90004946:	011b      	lsls	r3, r3, #4
90004948:	1a9b      	subs	r3, r3, r2
9000494a:	009b      	lsls	r3, r3, #2
9000494c:	440b      	add	r3, r1
9000494e:	334c      	adds	r3, #76	@ 0x4c
90004950:	2204      	movs	r2, #4
90004952:	701a      	strb	r2, [r3, #0]
90004954:	e014      	b.n	90004980 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004956:	78fa      	ldrb	r2, [r7, #3]
90004958:	6879      	ldr	r1, [r7, #4]
9000495a:	4613      	mov	r3, r2
9000495c:	011b      	lsls	r3, r3, #4
9000495e:	1a9b      	subs	r3, r3, r2
90004960:	009b      	lsls	r3, r3, #2
90004962:	440b      	add	r3, r1
90004964:	334c      	adds	r3, #76	@ 0x4c
90004966:	2202      	movs	r2, #2
90004968:	701a      	strb	r2, [r3, #0]
9000496a:	e009      	b.n	90004980 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000496c:	78fa      	ldrb	r2, [r7, #3]
9000496e:	6879      	ldr	r1, [r7, #4]
90004970:	4613      	mov	r3, r2
90004972:	011b      	lsls	r3, r3, #4
90004974:	1a9b      	subs	r3, r3, r2
90004976:	009b      	lsls	r3, r3, #2
90004978:	440b      	add	r3, r1
9000497a:	334c      	adds	r3, #76	@ 0x4c
9000497c:	2202      	movs	r2, #2
9000497e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004980:	78fa      	ldrb	r2, [r7, #3]
90004982:	6879      	ldr	r1, [r7, #4]
90004984:	4613      	mov	r3, r2
90004986:	011b      	lsls	r3, r3, #4
90004988:	1a9b      	subs	r3, r3, r2
9000498a:	009b      	lsls	r3, r3, #2
9000498c:	440b      	add	r3, r1
9000498e:	3326      	adds	r3, #38	@ 0x26
90004990:	781b      	ldrb	r3, [r3, #0]
90004992:	2b00      	cmp	r3, #0
90004994:	d00b      	beq.n	900049ae <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004996:	78fa      	ldrb	r2, [r7, #3]
90004998:	6879      	ldr	r1, [r7, #4]
9000499a:	4613      	mov	r3, r2
9000499c:	011b      	lsls	r3, r3, #4
9000499e:	1a9b      	subs	r3, r3, r2
900049a0:	009b      	lsls	r3, r3, #2
900049a2:	440b      	add	r3, r1
900049a4:	3326      	adds	r3, #38	@ 0x26
900049a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
900049a8:	2b02      	cmp	r3, #2
900049aa:	f040 8136 	bne.w	90004c1a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
900049ae:	78fb      	ldrb	r3, [r7, #3]
900049b0:	015a      	lsls	r2, r3, #5
900049b2:	693b      	ldr	r3, [r7, #16]
900049b4:	4413      	add	r3, r2
900049b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049ba:	681b      	ldr	r3, [r3, #0]
900049bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900049be:	68fb      	ldr	r3, [r7, #12]
900049c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900049c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900049c6:	68fb      	ldr	r3, [r7, #12]
900049c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900049cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
900049ce:	78fb      	ldrb	r3, [r7, #3]
900049d0:	015a      	lsls	r2, r3, #5
900049d2:	693b      	ldr	r3, [r7, #16]
900049d4:	4413      	add	r3, r2
900049d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900049da:	461a      	mov	r2, r3
900049dc:	68fb      	ldr	r3, [r7, #12]
900049de:	6013      	str	r3, [r2, #0]
900049e0:	e11b      	b.n	90004c1a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
900049e2:	78fa      	ldrb	r2, [r7, #3]
900049e4:	6879      	ldr	r1, [r7, #4]
900049e6:	4613      	mov	r3, r2
900049e8:	011b      	lsls	r3, r3, #4
900049ea:	1a9b      	subs	r3, r3, r2
900049ec:	009b      	lsls	r3, r3, #2
900049ee:	440b      	add	r3, r1
900049f0:	334d      	adds	r3, #77	@ 0x4d
900049f2:	781b      	ldrb	r3, [r3, #0]
900049f4:	2b03      	cmp	r3, #3
900049f6:	f040 8081 	bne.w	90004afc <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900049fa:	78fa      	ldrb	r2, [r7, #3]
900049fc:	6879      	ldr	r1, [r7, #4]
900049fe:	4613      	mov	r3, r2
90004a00:	011b      	lsls	r3, r3, #4
90004a02:	1a9b      	subs	r3, r3, r2
90004a04:	009b      	lsls	r3, r3, #2
90004a06:	440b      	add	r3, r1
90004a08:	334d      	adds	r3, #77	@ 0x4d
90004a0a:	2202      	movs	r2, #2
90004a0c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
90004a0e:	78fa      	ldrb	r2, [r7, #3]
90004a10:	6879      	ldr	r1, [r7, #4]
90004a12:	4613      	mov	r3, r2
90004a14:	011b      	lsls	r3, r3, #4
90004a16:	1a9b      	subs	r3, r3, r2
90004a18:	009b      	lsls	r3, r3, #2
90004a1a:	440b      	add	r3, r1
90004a1c:	331b      	adds	r3, #27
90004a1e:	781b      	ldrb	r3, [r3, #0]
90004a20:	2b01      	cmp	r3, #1
90004a22:	f040 80fa 	bne.w	90004c1a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a26:	78fa      	ldrb	r2, [r7, #3]
90004a28:	6879      	ldr	r1, [r7, #4]
90004a2a:	4613      	mov	r3, r2
90004a2c:	011b      	lsls	r3, r3, #4
90004a2e:	1a9b      	subs	r3, r3, r2
90004a30:	009b      	lsls	r3, r3, #2
90004a32:	440b      	add	r3, r1
90004a34:	334c      	adds	r3, #76	@ 0x4c
90004a36:	2202      	movs	r2, #2
90004a38:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
90004a3a:	78fb      	ldrb	r3, [r7, #3]
90004a3c:	015a      	lsls	r2, r3, #5
90004a3e:	693b      	ldr	r3, [r7, #16]
90004a40:	4413      	add	r3, r2
90004a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a46:	685b      	ldr	r3, [r3, #4]
90004a48:	78fa      	ldrb	r2, [r7, #3]
90004a4a:	0151      	lsls	r1, r2, #5
90004a4c:	693a      	ldr	r2, [r7, #16]
90004a4e:	440a      	add	r2, r1
90004a50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90004a58:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
90004a5a:	78fb      	ldrb	r3, [r7, #3]
90004a5c:	015a      	lsls	r2, r3, #5
90004a5e:	693b      	ldr	r3, [r7, #16]
90004a60:	4413      	add	r3, r2
90004a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a66:	68db      	ldr	r3, [r3, #12]
90004a68:	78fa      	ldrb	r2, [r7, #3]
90004a6a:	0151      	lsls	r1, r2, #5
90004a6c:	693a      	ldr	r2, [r7, #16]
90004a6e:	440a      	add	r2, r1
90004a70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
90004a78:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
90004a7a:	78fb      	ldrb	r3, [r7, #3]
90004a7c:	015a      	lsls	r2, r3, #5
90004a7e:	693b      	ldr	r3, [r7, #16]
90004a80:	4413      	add	r3, r2
90004a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004a86:	68db      	ldr	r3, [r3, #12]
90004a88:	78fa      	ldrb	r2, [r7, #3]
90004a8a:	0151      	lsls	r1, r2, #5
90004a8c:	693a      	ldr	r2, [r7, #16]
90004a8e:	440a      	add	r2, r1
90004a90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004a94:	f023 0320 	bic.w	r3, r3, #32
90004a98:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004a9a:	78fa      	ldrb	r2, [r7, #3]
90004a9c:	6879      	ldr	r1, [r7, #4]
90004a9e:	4613      	mov	r3, r2
90004aa0:	011b      	lsls	r3, r3, #4
90004aa2:	1a9b      	subs	r3, r3, r2
90004aa4:	009b      	lsls	r3, r3, #2
90004aa6:	440b      	add	r3, r1
90004aa8:	3326      	adds	r3, #38	@ 0x26
90004aaa:	781b      	ldrb	r3, [r3, #0]
90004aac:	2b00      	cmp	r3, #0
90004aae:	d00b      	beq.n	90004ac8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004ab0:	78fa      	ldrb	r2, [r7, #3]
90004ab2:	6879      	ldr	r1, [r7, #4]
90004ab4:	4613      	mov	r3, r2
90004ab6:	011b      	lsls	r3, r3, #4
90004ab8:	1a9b      	subs	r3, r3, r2
90004aba:	009b      	lsls	r3, r3, #2
90004abc:	440b      	add	r3, r1
90004abe:	3326      	adds	r3, #38	@ 0x26
90004ac0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ac2:	2b02      	cmp	r3, #2
90004ac4:	f040 80a9 	bne.w	90004c1a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
90004ac8:	78fb      	ldrb	r3, [r7, #3]
90004aca:	015a      	lsls	r2, r3, #5
90004acc:	693b      	ldr	r3, [r7, #16]
90004ace:	4413      	add	r3, r2
90004ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004ad4:	681b      	ldr	r3, [r3, #0]
90004ad6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004ad8:	68fb      	ldr	r3, [r7, #12]
90004ada:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004ade:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
90004ae0:	68fb      	ldr	r3, [r7, #12]
90004ae2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004ae6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
90004ae8:	78fb      	ldrb	r3, [r7, #3]
90004aea:	015a      	lsls	r2, r3, #5
90004aec:	693b      	ldr	r3, [r7, #16]
90004aee:	4413      	add	r3, r2
90004af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004af4:	461a      	mov	r2, r3
90004af6:	68fb      	ldr	r3, [r7, #12]
90004af8:	6013      	str	r3, [r2, #0]
90004afa:	e08e      	b.n	90004c1a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004afc:	78fa      	ldrb	r2, [r7, #3]
90004afe:	6879      	ldr	r1, [r7, #4]
90004b00:	4613      	mov	r3, r2
90004b02:	011b      	lsls	r3, r3, #4
90004b04:	1a9b      	subs	r3, r3, r2
90004b06:	009b      	lsls	r3, r3, #2
90004b08:	440b      	add	r3, r1
90004b0a:	334d      	adds	r3, #77	@ 0x4d
90004b0c:	781b      	ldrb	r3, [r3, #0]
90004b0e:	2b04      	cmp	r3, #4
90004b10:	d143      	bne.n	90004b9a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004b12:	78fa      	ldrb	r2, [r7, #3]
90004b14:	6879      	ldr	r1, [r7, #4]
90004b16:	4613      	mov	r3, r2
90004b18:	011b      	lsls	r3, r3, #4
90004b1a:	1a9b      	subs	r3, r3, r2
90004b1c:	009b      	lsls	r3, r3, #2
90004b1e:	440b      	add	r3, r1
90004b20:	334d      	adds	r3, #77	@ 0x4d
90004b22:	2202      	movs	r2, #2
90004b24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004b26:	78fa      	ldrb	r2, [r7, #3]
90004b28:	6879      	ldr	r1, [r7, #4]
90004b2a:	4613      	mov	r3, r2
90004b2c:	011b      	lsls	r3, r3, #4
90004b2e:	1a9b      	subs	r3, r3, r2
90004b30:	009b      	lsls	r3, r3, #2
90004b32:	440b      	add	r3, r1
90004b34:	334c      	adds	r3, #76	@ 0x4c
90004b36:	2202      	movs	r2, #2
90004b38:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b3a:	78fa      	ldrb	r2, [r7, #3]
90004b3c:	6879      	ldr	r1, [r7, #4]
90004b3e:	4613      	mov	r3, r2
90004b40:	011b      	lsls	r3, r3, #4
90004b42:	1a9b      	subs	r3, r3, r2
90004b44:	009b      	lsls	r3, r3, #2
90004b46:	440b      	add	r3, r1
90004b48:	3326      	adds	r3, #38	@ 0x26
90004b4a:	781b      	ldrb	r3, [r3, #0]
90004b4c:	2b00      	cmp	r3, #0
90004b4e:	d00a      	beq.n	90004b66 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004b50:	78fa      	ldrb	r2, [r7, #3]
90004b52:	6879      	ldr	r1, [r7, #4]
90004b54:	4613      	mov	r3, r2
90004b56:	011b      	lsls	r3, r3, #4
90004b58:	1a9b      	subs	r3, r3, r2
90004b5a:	009b      	lsls	r3, r3, #2
90004b5c:	440b      	add	r3, r1
90004b5e:	3326      	adds	r3, #38	@ 0x26
90004b60:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b62:	2b02      	cmp	r3, #2
90004b64:	d159      	bne.n	90004c1a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004b66:	78fb      	ldrb	r3, [r7, #3]
90004b68:	015a      	lsls	r2, r3, #5
90004b6a:	693b      	ldr	r3, [r7, #16]
90004b6c:	4413      	add	r3, r2
90004b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b72:	681b      	ldr	r3, [r3, #0]
90004b74:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004b76:	68fb      	ldr	r3, [r7, #12]
90004b78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90004b7c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004b7e:	68fb      	ldr	r3, [r7, #12]
90004b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
90004b84:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004b86:	78fb      	ldrb	r3, [r7, #3]
90004b88:	015a      	lsls	r2, r3, #5
90004b8a:	693b      	ldr	r3, [r7, #16]
90004b8c:	4413      	add	r3, r2
90004b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004b92:	461a      	mov	r2, r3
90004b94:	68fb      	ldr	r3, [r7, #12]
90004b96:	6013      	str	r3, [r2, #0]
90004b98:	e03f      	b.n	90004c1a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004b9a:	78fa      	ldrb	r2, [r7, #3]
90004b9c:	6879      	ldr	r1, [r7, #4]
90004b9e:	4613      	mov	r3, r2
90004ba0:	011b      	lsls	r3, r3, #4
90004ba2:	1a9b      	subs	r3, r3, r2
90004ba4:	009b      	lsls	r3, r3, #2
90004ba6:	440b      	add	r3, r1
90004ba8:	334d      	adds	r3, #77	@ 0x4d
90004baa:	781b      	ldrb	r3, [r3, #0]
90004bac:	2b08      	cmp	r3, #8
90004bae:	d126      	bne.n	90004bfe <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004bb0:	78fa      	ldrb	r2, [r7, #3]
90004bb2:	6879      	ldr	r1, [r7, #4]
90004bb4:	4613      	mov	r3, r2
90004bb6:	011b      	lsls	r3, r3, #4
90004bb8:	1a9b      	subs	r3, r3, r2
90004bba:	009b      	lsls	r3, r3, #2
90004bbc:	440b      	add	r3, r1
90004bbe:	334d      	adds	r3, #77	@ 0x4d
90004bc0:	2202      	movs	r2, #2
90004bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004bc4:	78fa      	ldrb	r2, [r7, #3]
90004bc6:	6879      	ldr	r1, [r7, #4]
90004bc8:	4613      	mov	r3, r2
90004bca:	011b      	lsls	r3, r3, #4
90004bcc:	1a9b      	subs	r3, r3, r2
90004bce:	009b      	lsls	r3, r3, #2
90004bd0:	440b      	add	r3, r1
90004bd2:	3344      	adds	r3, #68	@ 0x44
90004bd4:	681b      	ldr	r3, [r3, #0]
90004bd6:	1c59      	adds	r1, r3, #1
90004bd8:	6878      	ldr	r0, [r7, #4]
90004bda:	4613      	mov	r3, r2
90004bdc:	011b      	lsls	r3, r3, #4
90004bde:	1a9b      	subs	r3, r3, r2
90004be0:	009b      	lsls	r3, r3, #2
90004be2:	4403      	add	r3, r0
90004be4:	3344      	adds	r3, #68	@ 0x44
90004be6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004be8:	78fa      	ldrb	r2, [r7, #3]
90004bea:	6879      	ldr	r1, [r7, #4]
90004bec:	4613      	mov	r3, r2
90004bee:	011b      	lsls	r3, r3, #4
90004bf0:	1a9b      	subs	r3, r3, r2
90004bf2:	009b      	lsls	r3, r3, #2
90004bf4:	440b      	add	r3, r1
90004bf6:	334c      	adds	r3, #76	@ 0x4c
90004bf8:	2204      	movs	r2, #4
90004bfa:	701a      	strb	r2, [r3, #0]
90004bfc:	e00d      	b.n	90004c1a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004bfe:	78fa      	ldrb	r2, [r7, #3]
90004c00:	6879      	ldr	r1, [r7, #4]
90004c02:	4613      	mov	r3, r2
90004c04:	011b      	lsls	r3, r3, #4
90004c06:	1a9b      	subs	r3, r3, r2
90004c08:	009b      	lsls	r3, r3, #2
90004c0a:	440b      	add	r3, r1
90004c0c:	334d      	adds	r3, #77	@ 0x4d
90004c0e:	781b      	ldrb	r3, [r3, #0]
90004c10:	2b02      	cmp	r3, #2
90004c12:	f000 8100 	beq.w	90004e16 <HCD_HC_IN_IRQHandler+0xcca>
90004c16:	e000      	b.n	90004c1a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004c18:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004c1a:	78fa      	ldrb	r2, [r7, #3]
90004c1c:	6879      	ldr	r1, [r7, #4]
90004c1e:	4613      	mov	r3, r2
90004c20:	011b      	lsls	r3, r3, #4
90004c22:	1a9b      	subs	r3, r3, r2
90004c24:	009b      	lsls	r3, r3, #2
90004c26:	440b      	add	r3, r1
90004c28:	334c      	adds	r3, #76	@ 0x4c
90004c2a:	781a      	ldrb	r2, [r3, #0]
90004c2c:	78fb      	ldrb	r3, [r7, #3]
90004c2e:	4619      	mov	r1, r3
90004c30:	6878      	ldr	r0, [r7, #4]
90004c32:	f7fc faaf 	bl	90001194 <HAL_HCD_HC_NotifyURBChange_Callback>
90004c36:	e0ef      	b.n	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004c38:	687b      	ldr	r3, [r7, #4]
90004c3a:	681b      	ldr	r3, [r3, #0]
90004c3c:	78fa      	ldrb	r2, [r7, #3]
90004c3e:	4611      	mov	r1, r2
90004c40:	4618      	mov	r0, r3
90004c42:	f006 fae8 	bl	9000b216 <USB_ReadChInterrupts>
90004c46:	4603      	mov	r3, r0
90004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90004c4c:	2b40      	cmp	r3, #64	@ 0x40
90004c4e:	d12f      	bne.n	90004cb0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004c50:	78fb      	ldrb	r3, [r7, #3]
90004c52:	015a      	lsls	r2, r3, #5
90004c54:	693b      	ldr	r3, [r7, #16]
90004c56:	4413      	add	r3, r2
90004c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004c5c:	461a      	mov	r2, r3
90004c5e:	2340      	movs	r3, #64	@ 0x40
90004c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004c62:	78fa      	ldrb	r2, [r7, #3]
90004c64:	6879      	ldr	r1, [r7, #4]
90004c66:	4613      	mov	r3, r2
90004c68:	011b      	lsls	r3, r3, #4
90004c6a:	1a9b      	subs	r3, r3, r2
90004c6c:	009b      	lsls	r3, r3, #2
90004c6e:	440b      	add	r3, r1
90004c70:	334d      	adds	r3, #77	@ 0x4d
90004c72:	2205      	movs	r2, #5
90004c74:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
90004c76:	78fa      	ldrb	r2, [r7, #3]
90004c78:	6879      	ldr	r1, [r7, #4]
90004c7a:	4613      	mov	r3, r2
90004c7c:	011b      	lsls	r3, r3, #4
90004c7e:	1a9b      	subs	r3, r3, r2
90004c80:	009b      	lsls	r3, r3, #2
90004c82:	440b      	add	r3, r1
90004c84:	331a      	adds	r3, #26
90004c86:	781b      	ldrb	r3, [r3, #0]
90004c88:	2b00      	cmp	r3, #0
90004c8a:	d109      	bne.n	90004ca0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004c8c:	78fa      	ldrb	r2, [r7, #3]
90004c8e:	6879      	ldr	r1, [r7, #4]
90004c90:	4613      	mov	r3, r2
90004c92:	011b      	lsls	r3, r3, #4
90004c94:	1a9b      	subs	r3, r3, r2
90004c96:	009b      	lsls	r3, r3, #2
90004c98:	440b      	add	r3, r1
90004c9a:	3344      	adds	r3, #68	@ 0x44
90004c9c:	2200      	movs	r2, #0
90004c9e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ca0:	687b      	ldr	r3, [r7, #4]
90004ca2:	681b      	ldr	r3, [r3, #0]
90004ca4:	78fa      	ldrb	r2, [r7, #3]
90004ca6:	4611      	mov	r1, r2
90004ca8:	4618      	mov	r0, r3
90004caa:	f006 fb31 	bl	9000b310 <USB_HC_Halt>
90004cae:	e0b3      	b.n	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004cb0:	687b      	ldr	r3, [r7, #4]
90004cb2:	681b      	ldr	r3, [r3, #0]
90004cb4:	78fa      	ldrb	r2, [r7, #3]
90004cb6:	4611      	mov	r1, r2
90004cb8:	4618      	mov	r0, r3
90004cba:	f006 faac 	bl	9000b216 <USB_ReadChInterrupts>
90004cbe:	4603      	mov	r3, r0
90004cc0:	f003 0310 	and.w	r3, r3, #16
90004cc4:	2b10      	cmp	r3, #16
90004cc6:	f040 80a7 	bne.w	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004cca:	78fa      	ldrb	r2, [r7, #3]
90004ccc:	6879      	ldr	r1, [r7, #4]
90004cce:	4613      	mov	r3, r2
90004cd0:	011b      	lsls	r3, r3, #4
90004cd2:	1a9b      	subs	r3, r3, r2
90004cd4:	009b      	lsls	r3, r3, #2
90004cd6:	440b      	add	r3, r1
90004cd8:	3326      	adds	r3, #38	@ 0x26
90004cda:	781b      	ldrb	r3, [r3, #0]
90004cdc:	2b03      	cmp	r3, #3
90004cde:	d11b      	bne.n	90004d18 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004ce0:	78fa      	ldrb	r2, [r7, #3]
90004ce2:	6879      	ldr	r1, [r7, #4]
90004ce4:	4613      	mov	r3, r2
90004ce6:	011b      	lsls	r3, r3, #4
90004ce8:	1a9b      	subs	r3, r3, r2
90004cea:	009b      	lsls	r3, r3, #2
90004cec:	440b      	add	r3, r1
90004cee:	3344      	adds	r3, #68	@ 0x44
90004cf0:	2200      	movs	r2, #0
90004cf2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004cf4:	78fa      	ldrb	r2, [r7, #3]
90004cf6:	6879      	ldr	r1, [r7, #4]
90004cf8:	4613      	mov	r3, r2
90004cfa:	011b      	lsls	r3, r3, #4
90004cfc:	1a9b      	subs	r3, r3, r2
90004cfe:	009b      	lsls	r3, r3, #2
90004d00:	440b      	add	r3, r1
90004d02:	334d      	adds	r3, #77	@ 0x4d
90004d04:	2204      	movs	r2, #4
90004d06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d08:	687b      	ldr	r3, [r7, #4]
90004d0a:	681b      	ldr	r3, [r3, #0]
90004d0c:	78fa      	ldrb	r2, [r7, #3]
90004d0e:	4611      	mov	r1, r2
90004d10:	4618      	mov	r0, r3
90004d12:	f006 fafd 	bl	9000b310 <USB_HC_Halt>
90004d16:	e03f      	b.n	90004d98 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004d18:	78fa      	ldrb	r2, [r7, #3]
90004d1a:	6879      	ldr	r1, [r7, #4]
90004d1c:	4613      	mov	r3, r2
90004d1e:	011b      	lsls	r3, r3, #4
90004d20:	1a9b      	subs	r3, r3, r2
90004d22:	009b      	lsls	r3, r3, #2
90004d24:	440b      	add	r3, r1
90004d26:	3326      	adds	r3, #38	@ 0x26
90004d28:	781b      	ldrb	r3, [r3, #0]
90004d2a:	2b00      	cmp	r3, #0
90004d2c:	d00a      	beq.n	90004d44 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004d2e:	78fa      	ldrb	r2, [r7, #3]
90004d30:	6879      	ldr	r1, [r7, #4]
90004d32:	4613      	mov	r3, r2
90004d34:	011b      	lsls	r3, r3, #4
90004d36:	1a9b      	subs	r3, r3, r2
90004d38:	009b      	lsls	r3, r3, #2
90004d3a:	440b      	add	r3, r1
90004d3c:	3326      	adds	r3, #38	@ 0x26
90004d3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004d40:	2b02      	cmp	r3, #2
90004d42:	d129      	bne.n	90004d98 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004d44:	78fa      	ldrb	r2, [r7, #3]
90004d46:	6879      	ldr	r1, [r7, #4]
90004d48:	4613      	mov	r3, r2
90004d4a:	011b      	lsls	r3, r3, #4
90004d4c:	1a9b      	subs	r3, r3, r2
90004d4e:	009b      	lsls	r3, r3, #2
90004d50:	440b      	add	r3, r1
90004d52:	3344      	adds	r3, #68	@ 0x44
90004d54:	2200      	movs	r2, #0
90004d56:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
90004d58:	687b      	ldr	r3, [r7, #4]
90004d5a:	799b      	ldrb	r3, [r3, #6]
90004d5c:	2b00      	cmp	r3, #0
90004d5e:	d00a      	beq.n	90004d76 <HCD_HC_IN_IRQHandler+0xc2a>
90004d60:	78fa      	ldrb	r2, [r7, #3]
90004d62:	6879      	ldr	r1, [r7, #4]
90004d64:	4613      	mov	r3, r2
90004d66:	011b      	lsls	r3, r3, #4
90004d68:	1a9b      	subs	r3, r3, r2
90004d6a:	009b      	lsls	r3, r3, #2
90004d6c:	440b      	add	r3, r1
90004d6e:	331b      	adds	r3, #27
90004d70:	781b      	ldrb	r3, [r3, #0]
90004d72:	2b01      	cmp	r3, #1
90004d74:	d110      	bne.n	90004d98 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004d76:	78fa      	ldrb	r2, [r7, #3]
90004d78:	6879      	ldr	r1, [r7, #4]
90004d7a:	4613      	mov	r3, r2
90004d7c:	011b      	lsls	r3, r3, #4
90004d7e:	1a9b      	subs	r3, r3, r2
90004d80:	009b      	lsls	r3, r3, #2
90004d82:	440b      	add	r3, r1
90004d84:	334d      	adds	r3, #77	@ 0x4d
90004d86:	2204      	movs	r2, #4
90004d88:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d8a:	687b      	ldr	r3, [r7, #4]
90004d8c:	681b      	ldr	r3, [r3, #0]
90004d8e:	78fa      	ldrb	r2, [r7, #3]
90004d90:	4611      	mov	r1, r2
90004d92:	4618      	mov	r0, r3
90004d94:	f006 fabc 	bl	9000b310 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
90004d98:	78fa      	ldrb	r2, [r7, #3]
90004d9a:	6879      	ldr	r1, [r7, #4]
90004d9c:	4613      	mov	r3, r2
90004d9e:	011b      	lsls	r3, r3, #4
90004da0:	1a9b      	subs	r3, r3, r2
90004da2:	009b      	lsls	r3, r3, #2
90004da4:	440b      	add	r3, r1
90004da6:	331b      	adds	r3, #27
90004da8:	781b      	ldrb	r3, [r3, #0]
90004daa:	2b01      	cmp	r3, #1
90004dac:	d129      	bne.n	90004e02 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90004dae:	78fa      	ldrb	r2, [r7, #3]
90004db0:	6879      	ldr	r1, [r7, #4]
90004db2:	4613      	mov	r3, r2
90004db4:	011b      	lsls	r3, r3, #4
90004db6:	1a9b      	subs	r3, r3, r2
90004db8:	009b      	lsls	r3, r3, #2
90004dba:	440b      	add	r3, r1
90004dbc:	331b      	adds	r3, #27
90004dbe:	2200      	movs	r2, #0
90004dc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90004dc2:	78fb      	ldrb	r3, [r7, #3]
90004dc4:	015a      	lsls	r2, r3, #5
90004dc6:	693b      	ldr	r3, [r7, #16]
90004dc8:	4413      	add	r3, r2
90004dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004dce:	685b      	ldr	r3, [r3, #4]
90004dd0:	78fa      	ldrb	r2, [r7, #3]
90004dd2:	0151      	lsls	r1, r2, #5
90004dd4:	693a      	ldr	r2, [r7, #16]
90004dd6:	440a      	add	r2, r1
90004dd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90004de0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
90004de2:	78fb      	ldrb	r3, [r7, #3]
90004de4:	015a      	lsls	r2, r3, #5
90004de6:	693b      	ldr	r3, [r7, #16]
90004de8:	4413      	add	r3, r2
90004dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004dee:	68db      	ldr	r3, [r3, #12]
90004df0:	78fa      	ldrb	r2, [r7, #3]
90004df2:	0151      	lsls	r1, r2, #5
90004df4:	693a      	ldr	r2, [r7, #16]
90004df6:	440a      	add	r2, r1
90004df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
90004dfc:	f043 0320 	orr.w	r3, r3, #32
90004e00:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004e02:	78fb      	ldrb	r3, [r7, #3]
90004e04:	015a      	lsls	r2, r3, #5
90004e06:	693b      	ldr	r3, [r7, #16]
90004e08:	4413      	add	r3, r2
90004e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e0e:	461a      	mov	r2, r3
90004e10:	2310      	movs	r3, #16
90004e12:	6093      	str	r3, [r2, #8]
90004e14:	e000      	b.n	90004e18 <HCD_HC_IN_IRQHandler+0xccc>
        return;
90004e16:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004e18:	3718      	adds	r7, #24
90004e1a:	46bd      	mov	sp, r7
90004e1c:	bd80      	pop	{r7, pc}

90004e1e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004e1e:	b580      	push	{r7, lr}
90004e20:	b086      	sub	sp, #24
90004e22:	af00      	add	r7, sp, #0
90004e24:	6078      	str	r0, [r7, #4]
90004e26:	460b      	mov	r3, r1
90004e28:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004e2a:	687b      	ldr	r3, [r7, #4]
90004e2c:	681b      	ldr	r3, [r3, #0]
90004e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004e30:	697b      	ldr	r3, [r7, #20]
90004e32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004e34:	687b      	ldr	r3, [r7, #4]
90004e36:	681b      	ldr	r3, [r3, #0]
90004e38:	78fa      	ldrb	r2, [r7, #3]
90004e3a:	4611      	mov	r1, r2
90004e3c:	4618      	mov	r0, r3
90004e3e:	f006 f9ea 	bl	9000b216 <USB_ReadChInterrupts>
90004e42:	4603      	mov	r3, r0
90004e44:	f003 0304 	and.w	r3, r3, #4
90004e48:	2b04      	cmp	r3, #4
90004e4a:	d11b      	bne.n	90004e84 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004e4c:	78fb      	ldrb	r3, [r7, #3]
90004e4e:	015a      	lsls	r2, r3, #5
90004e50:	693b      	ldr	r3, [r7, #16]
90004e52:	4413      	add	r3, r2
90004e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004e58:	461a      	mov	r2, r3
90004e5a:	2304      	movs	r3, #4
90004e5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004e5e:	78fa      	ldrb	r2, [r7, #3]
90004e60:	6879      	ldr	r1, [r7, #4]
90004e62:	4613      	mov	r3, r2
90004e64:	011b      	lsls	r3, r3, #4
90004e66:	1a9b      	subs	r3, r3, r2
90004e68:	009b      	lsls	r3, r3, #2
90004e6a:	440b      	add	r3, r1
90004e6c:	334d      	adds	r3, #77	@ 0x4d
90004e6e:	2207      	movs	r2, #7
90004e70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e72:	687b      	ldr	r3, [r7, #4]
90004e74:	681b      	ldr	r3, [r3, #0]
90004e76:	78fa      	ldrb	r2, [r7, #3]
90004e78:	4611      	mov	r1, r2
90004e7a:	4618      	mov	r0, r3
90004e7c:	f006 fa48 	bl	9000b310 <USB_HC_Halt>
90004e80:	f000 bc89 	b.w	90005796 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004e84:	687b      	ldr	r3, [r7, #4]
90004e86:	681b      	ldr	r3, [r3, #0]
90004e88:	78fa      	ldrb	r2, [r7, #3]
90004e8a:	4611      	mov	r1, r2
90004e8c:	4618      	mov	r0, r3
90004e8e:	f006 f9c2 	bl	9000b216 <USB_ReadChInterrupts>
90004e92:	4603      	mov	r3, r0
90004e94:	f003 0320 	and.w	r3, r3, #32
90004e98:	2b20      	cmp	r3, #32
90004e9a:	f040 8082 	bne.w	90004fa2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004e9e:	78fb      	ldrb	r3, [r7, #3]
90004ea0:	015a      	lsls	r2, r3, #5
90004ea2:	693b      	ldr	r3, [r7, #16]
90004ea4:	4413      	add	r3, r2
90004ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004eaa:	461a      	mov	r2, r3
90004eac:	2320      	movs	r3, #32
90004eae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004eb0:	78fa      	ldrb	r2, [r7, #3]
90004eb2:	6879      	ldr	r1, [r7, #4]
90004eb4:	4613      	mov	r3, r2
90004eb6:	011b      	lsls	r3, r3, #4
90004eb8:	1a9b      	subs	r3, r3, r2
90004eba:	009b      	lsls	r3, r3, #2
90004ebc:	440b      	add	r3, r1
90004ebe:	3319      	adds	r3, #25
90004ec0:	781b      	ldrb	r3, [r3, #0]
90004ec2:	2b01      	cmp	r3, #1
90004ec4:	d124      	bne.n	90004f10 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004ec6:	78fa      	ldrb	r2, [r7, #3]
90004ec8:	6879      	ldr	r1, [r7, #4]
90004eca:	4613      	mov	r3, r2
90004ecc:	011b      	lsls	r3, r3, #4
90004ece:	1a9b      	subs	r3, r3, r2
90004ed0:	009b      	lsls	r3, r3, #2
90004ed2:	440b      	add	r3, r1
90004ed4:	3319      	adds	r3, #25
90004ed6:	2200      	movs	r2, #0
90004ed8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004eda:	78fa      	ldrb	r2, [r7, #3]
90004edc:	6879      	ldr	r1, [r7, #4]
90004ede:	4613      	mov	r3, r2
90004ee0:	011b      	lsls	r3, r3, #4
90004ee2:	1a9b      	subs	r3, r3, r2
90004ee4:	009b      	lsls	r3, r3, #2
90004ee6:	440b      	add	r3, r1
90004ee8:	334c      	adds	r3, #76	@ 0x4c
90004eea:	2202      	movs	r2, #2
90004eec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004eee:	78fa      	ldrb	r2, [r7, #3]
90004ef0:	6879      	ldr	r1, [r7, #4]
90004ef2:	4613      	mov	r3, r2
90004ef4:	011b      	lsls	r3, r3, #4
90004ef6:	1a9b      	subs	r3, r3, r2
90004ef8:	009b      	lsls	r3, r3, #2
90004efa:	440b      	add	r3, r1
90004efc:	334d      	adds	r3, #77	@ 0x4d
90004efe:	2203      	movs	r2, #3
90004f00:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f02:	687b      	ldr	r3, [r7, #4]
90004f04:	681b      	ldr	r3, [r3, #0]
90004f06:	78fa      	ldrb	r2, [r7, #3]
90004f08:	4611      	mov	r1, r2
90004f0a:	4618      	mov	r0, r3
90004f0c:	f006 fa00 	bl	9000b310 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
90004f10:	78fa      	ldrb	r2, [r7, #3]
90004f12:	6879      	ldr	r1, [r7, #4]
90004f14:	4613      	mov	r3, r2
90004f16:	011b      	lsls	r3, r3, #4
90004f18:	1a9b      	subs	r3, r3, r2
90004f1a:	009b      	lsls	r3, r3, #2
90004f1c:	440b      	add	r3, r1
90004f1e:	331a      	adds	r3, #26
90004f20:	781b      	ldrb	r3, [r3, #0]
90004f22:	2b01      	cmp	r3, #1
90004f24:	f040 8437 	bne.w	90005796 <HCD_HC_OUT_IRQHandler+0x978>
90004f28:	78fa      	ldrb	r2, [r7, #3]
90004f2a:	6879      	ldr	r1, [r7, #4]
90004f2c:	4613      	mov	r3, r2
90004f2e:	011b      	lsls	r3, r3, #4
90004f30:	1a9b      	subs	r3, r3, r2
90004f32:	009b      	lsls	r3, r3, #2
90004f34:	440b      	add	r3, r1
90004f36:	331b      	adds	r3, #27
90004f38:	781b      	ldrb	r3, [r3, #0]
90004f3a:	2b00      	cmp	r3, #0
90004f3c:	f040 842b 	bne.w	90005796 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
90004f40:	78fa      	ldrb	r2, [r7, #3]
90004f42:	6879      	ldr	r1, [r7, #4]
90004f44:	4613      	mov	r3, r2
90004f46:	011b      	lsls	r3, r3, #4
90004f48:	1a9b      	subs	r3, r3, r2
90004f4a:	009b      	lsls	r3, r3, #2
90004f4c:	440b      	add	r3, r1
90004f4e:	3326      	adds	r3, #38	@ 0x26
90004f50:	781b      	ldrb	r3, [r3, #0]
90004f52:	2b01      	cmp	r3, #1
90004f54:	d009      	beq.n	90004f6a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
90004f56:	78fa      	ldrb	r2, [r7, #3]
90004f58:	6879      	ldr	r1, [r7, #4]
90004f5a:	4613      	mov	r3, r2
90004f5c:	011b      	lsls	r3, r3, #4
90004f5e:	1a9b      	subs	r3, r3, r2
90004f60:	009b      	lsls	r3, r3, #2
90004f62:	440b      	add	r3, r1
90004f64:	331b      	adds	r3, #27
90004f66:	2201      	movs	r2, #1
90004f68:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
90004f6a:	78fa      	ldrb	r2, [r7, #3]
90004f6c:	6879      	ldr	r1, [r7, #4]
90004f6e:	4613      	mov	r3, r2
90004f70:	011b      	lsls	r3, r3, #4
90004f72:	1a9b      	subs	r3, r3, r2
90004f74:	009b      	lsls	r3, r3, #2
90004f76:	440b      	add	r3, r1
90004f78:	334d      	adds	r3, #77	@ 0x4d
90004f7a:	2203      	movs	r2, #3
90004f7c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f7e:	687b      	ldr	r3, [r7, #4]
90004f80:	681b      	ldr	r3, [r3, #0]
90004f82:	78fa      	ldrb	r2, [r7, #3]
90004f84:	4611      	mov	r1, r2
90004f86:	4618      	mov	r0, r3
90004f88:	f006 f9c2 	bl	9000b310 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
90004f8c:	78fa      	ldrb	r2, [r7, #3]
90004f8e:	6879      	ldr	r1, [r7, #4]
90004f90:	4613      	mov	r3, r2
90004f92:	011b      	lsls	r3, r3, #4
90004f94:	1a9b      	subs	r3, r3, r2
90004f96:	009b      	lsls	r3, r3, #2
90004f98:	440b      	add	r3, r1
90004f9a:	3344      	adds	r3, #68	@ 0x44
90004f9c:	2200      	movs	r2, #0
90004f9e:	601a      	str	r2, [r3, #0]
90004fa0:	e3f9      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004fa2:	687b      	ldr	r3, [r7, #4]
90004fa4:	681b      	ldr	r3, [r3, #0]
90004fa6:	78fa      	ldrb	r2, [r7, #3]
90004fa8:	4611      	mov	r1, r2
90004faa:	4618      	mov	r0, r3
90004fac:	f006 f933 	bl	9000b216 <USB_ReadChInterrupts>
90004fb0:	4603      	mov	r3, r0
90004fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
90004fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90004fba:	d111      	bne.n	90004fe0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004fbc:	78fb      	ldrb	r3, [r7, #3]
90004fbe:	015a      	lsls	r2, r3, #5
90004fc0:	693b      	ldr	r3, [r7, #16]
90004fc2:	4413      	add	r3, r2
90004fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90004fc8:	461a      	mov	r2, r3
90004fca:	f44f 7300 	mov.w	r3, #512	@ 0x200
90004fce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004fd0:	687b      	ldr	r3, [r7, #4]
90004fd2:	681b      	ldr	r3, [r3, #0]
90004fd4:	78fa      	ldrb	r2, [r7, #3]
90004fd6:	4611      	mov	r1, r2
90004fd8:	4618      	mov	r0, r3
90004fda:	f006 f999 	bl	9000b310 <USB_HC_Halt>
90004fde:	e3da      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004fe0:	687b      	ldr	r3, [r7, #4]
90004fe2:	681b      	ldr	r3, [r3, #0]
90004fe4:	78fa      	ldrb	r2, [r7, #3]
90004fe6:	4611      	mov	r1, r2
90004fe8:	4618      	mov	r0, r3
90004fea:	f006 f914 	bl	9000b216 <USB_ReadChInterrupts>
90004fee:	4603      	mov	r3, r0
90004ff0:	f003 0301 	and.w	r3, r3, #1
90004ff4:	2b01      	cmp	r3, #1
90004ff6:	d168      	bne.n	900050ca <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004ff8:	78fa      	ldrb	r2, [r7, #3]
90004ffa:	6879      	ldr	r1, [r7, #4]
90004ffc:	4613      	mov	r3, r2
90004ffe:	011b      	lsls	r3, r3, #4
90005000:	1a9b      	subs	r3, r3, r2
90005002:	009b      	lsls	r3, r3, #2
90005004:	440b      	add	r3, r1
90005006:	3344      	adds	r3, #68	@ 0x44
90005008:	2200      	movs	r2, #0
9000500a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
9000500c:	687b      	ldr	r3, [r7, #4]
9000500e:	681b      	ldr	r3, [r3, #0]
90005010:	78fa      	ldrb	r2, [r7, #3]
90005012:	4611      	mov	r1, r2
90005014:	4618      	mov	r0, r3
90005016:	f006 f8fe 	bl	9000b216 <USB_ReadChInterrupts>
9000501a:	4603      	mov	r3, r0
9000501c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
90005020:	2b40      	cmp	r3, #64	@ 0x40
90005022:	d112      	bne.n	9000504a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90005024:	78fa      	ldrb	r2, [r7, #3]
90005026:	6879      	ldr	r1, [r7, #4]
90005028:	4613      	mov	r3, r2
9000502a:	011b      	lsls	r3, r3, #4
9000502c:	1a9b      	subs	r3, r3, r2
9000502e:	009b      	lsls	r3, r3, #2
90005030:	440b      	add	r3, r1
90005032:	3319      	adds	r3, #25
90005034:	2201      	movs	r2, #1
90005036:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005038:	78fb      	ldrb	r3, [r7, #3]
9000503a:	015a      	lsls	r2, r3, #5
9000503c:	693b      	ldr	r3, [r7, #16]
9000503e:	4413      	add	r3, r2
90005040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005044:	461a      	mov	r2, r3
90005046:	2340      	movs	r3, #64	@ 0x40
90005048:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
9000504a:	78fa      	ldrb	r2, [r7, #3]
9000504c:	6879      	ldr	r1, [r7, #4]
9000504e:	4613      	mov	r3, r2
90005050:	011b      	lsls	r3, r3, #4
90005052:	1a9b      	subs	r3, r3, r2
90005054:	009b      	lsls	r3, r3, #2
90005056:	440b      	add	r3, r1
90005058:	331b      	adds	r3, #27
9000505a:	781b      	ldrb	r3, [r3, #0]
9000505c:	2b00      	cmp	r3, #0
9000505e:	d019      	beq.n	90005094 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
90005060:	78fa      	ldrb	r2, [r7, #3]
90005062:	6879      	ldr	r1, [r7, #4]
90005064:	4613      	mov	r3, r2
90005066:	011b      	lsls	r3, r3, #4
90005068:	1a9b      	subs	r3, r3, r2
9000506a:	009b      	lsls	r3, r3, #2
9000506c:	440b      	add	r3, r1
9000506e:	331b      	adds	r3, #27
90005070:	2200      	movs	r2, #0
90005072:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
90005074:	78fb      	ldrb	r3, [r7, #3]
90005076:	015a      	lsls	r2, r3, #5
90005078:	693b      	ldr	r3, [r7, #16]
9000507a:	4413      	add	r3, r2
9000507c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005080:	685b      	ldr	r3, [r3, #4]
90005082:	78fa      	ldrb	r2, [r7, #3]
90005084:	0151      	lsls	r1, r2, #5
90005086:	693a      	ldr	r2, [r7, #16]
90005088:	440a      	add	r2, r1
9000508a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000508e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005092:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90005094:	78fb      	ldrb	r3, [r7, #3]
90005096:	015a      	lsls	r2, r3, #5
90005098:	693b      	ldr	r3, [r7, #16]
9000509a:	4413      	add	r3, r2
9000509c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900050a0:	461a      	mov	r2, r3
900050a2:	2301      	movs	r3, #1
900050a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
900050a6:	78fa      	ldrb	r2, [r7, #3]
900050a8:	6879      	ldr	r1, [r7, #4]
900050aa:	4613      	mov	r3, r2
900050ac:	011b      	lsls	r3, r3, #4
900050ae:	1a9b      	subs	r3, r3, r2
900050b0:	009b      	lsls	r3, r3, #2
900050b2:	440b      	add	r3, r1
900050b4:	334d      	adds	r3, #77	@ 0x4d
900050b6:	2201      	movs	r2, #1
900050b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900050ba:	687b      	ldr	r3, [r7, #4]
900050bc:	681b      	ldr	r3, [r3, #0]
900050be:	78fa      	ldrb	r2, [r7, #3]
900050c0:	4611      	mov	r1, r2
900050c2:	4618      	mov	r0, r3
900050c4:	f006 f924 	bl	9000b310 <USB_HC_Halt>
900050c8:	e365      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
900050ca:	687b      	ldr	r3, [r7, #4]
900050cc:	681b      	ldr	r3, [r3, #0]
900050ce:	78fa      	ldrb	r2, [r7, #3]
900050d0:	4611      	mov	r1, r2
900050d2:	4618      	mov	r0, r3
900050d4:	f006 f89f 	bl	9000b216 <USB_ReadChInterrupts>
900050d8:	4603      	mov	r3, r0
900050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
900050de:	2b40      	cmp	r3, #64	@ 0x40
900050e0:	d139      	bne.n	90005156 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
900050e2:	78fa      	ldrb	r2, [r7, #3]
900050e4:	6879      	ldr	r1, [r7, #4]
900050e6:	4613      	mov	r3, r2
900050e8:	011b      	lsls	r3, r3, #4
900050ea:	1a9b      	subs	r3, r3, r2
900050ec:	009b      	lsls	r3, r3, #2
900050ee:	440b      	add	r3, r1
900050f0:	334d      	adds	r3, #77	@ 0x4d
900050f2:	2205      	movs	r2, #5
900050f4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
900050f6:	78fa      	ldrb	r2, [r7, #3]
900050f8:	6879      	ldr	r1, [r7, #4]
900050fa:	4613      	mov	r3, r2
900050fc:	011b      	lsls	r3, r3, #4
900050fe:	1a9b      	subs	r3, r3, r2
90005100:	009b      	lsls	r3, r3, #2
90005102:	440b      	add	r3, r1
90005104:	331a      	adds	r3, #26
90005106:	781b      	ldrb	r3, [r3, #0]
90005108:	2b00      	cmp	r3, #0
9000510a:	d109      	bne.n	90005120 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
9000510c:	78fa      	ldrb	r2, [r7, #3]
9000510e:	6879      	ldr	r1, [r7, #4]
90005110:	4613      	mov	r3, r2
90005112:	011b      	lsls	r3, r3, #4
90005114:	1a9b      	subs	r3, r3, r2
90005116:	009b      	lsls	r3, r3, #2
90005118:	440b      	add	r3, r1
9000511a:	3319      	adds	r3, #25
9000511c:	2201      	movs	r2, #1
9000511e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
90005120:	78fa      	ldrb	r2, [r7, #3]
90005122:	6879      	ldr	r1, [r7, #4]
90005124:	4613      	mov	r3, r2
90005126:	011b      	lsls	r3, r3, #4
90005128:	1a9b      	subs	r3, r3, r2
9000512a:	009b      	lsls	r3, r3, #2
9000512c:	440b      	add	r3, r1
9000512e:	3344      	adds	r3, #68	@ 0x44
90005130:	2200      	movs	r2, #0
90005132:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005134:	687b      	ldr	r3, [r7, #4]
90005136:	681b      	ldr	r3, [r3, #0]
90005138:	78fa      	ldrb	r2, [r7, #3]
9000513a:	4611      	mov	r1, r2
9000513c:	4618      	mov	r0, r3
9000513e:	f006 f8e7 	bl	9000b310 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90005142:	78fb      	ldrb	r3, [r7, #3]
90005144:	015a      	lsls	r2, r3, #5
90005146:	693b      	ldr	r3, [r7, #16]
90005148:	4413      	add	r3, r2
9000514a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000514e:	461a      	mov	r2, r3
90005150:	2340      	movs	r3, #64	@ 0x40
90005152:	6093      	str	r3, [r2, #8]
90005154:	e31f      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90005156:	687b      	ldr	r3, [r7, #4]
90005158:	681b      	ldr	r3, [r3, #0]
9000515a:	78fa      	ldrb	r2, [r7, #3]
9000515c:	4611      	mov	r1, r2
9000515e:	4618      	mov	r0, r3
90005160:	f006 f859 	bl	9000b216 <USB_ReadChInterrupts>
90005164:	4603      	mov	r3, r0
90005166:	f003 0308 	and.w	r3, r3, #8
9000516a:	2b08      	cmp	r3, #8
9000516c:	d11a      	bne.n	900051a4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
9000516e:	78fb      	ldrb	r3, [r7, #3]
90005170:	015a      	lsls	r2, r3, #5
90005172:	693b      	ldr	r3, [r7, #16]
90005174:	4413      	add	r3, r2
90005176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000517a:	461a      	mov	r2, r3
9000517c:	2308      	movs	r3, #8
9000517e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90005180:	78fa      	ldrb	r2, [r7, #3]
90005182:	6879      	ldr	r1, [r7, #4]
90005184:	4613      	mov	r3, r2
90005186:	011b      	lsls	r3, r3, #4
90005188:	1a9b      	subs	r3, r3, r2
9000518a:	009b      	lsls	r3, r3, #2
9000518c:	440b      	add	r3, r1
9000518e:	334d      	adds	r3, #77	@ 0x4d
90005190:	2206      	movs	r2, #6
90005192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005194:	687b      	ldr	r3, [r7, #4]
90005196:	681b      	ldr	r3, [r3, #0]
90005198:	78fa      	ldrb	r2, [r7, #3]
9000519a:	4611      	mov	r1, r2
9000519c:	4618      	mov	r0, r3
9000519e:	f006 f8b7 	bl	9000b310 <USB_HC_Halt>
900051a2:	e2f8      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
900051a4:	687b      	ldr	r3, [r7, #4]
900051a6:	681b      	ldr	r3, [r3, #0]
900051a8:	78fa      	ldrb	r2, [r7, #3]
900051aa:	4611      	mov	r1, r2
900051ac:	4618      	mov	r0, r3
900051ae:	f006 f832 	bl	9000b216 <USB_ReadChInterrupts>
900051b2:	4603      	mov	r3, r0
900051b4:	f003 0310 	and.w	r3, r3, #16
900051b8:	2b10      	cmp	r3, #16
900051ba:	d144      	bne.n	90005246 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
900051bc:	78fa      	ldrb	r2, [r7, #3]
900051be:	6879      	ldr	r1, [r7, #4]
900051c0:	4613      	mov	r3, r2
900051c2:	011b      	lsls	r3, r3, #4
900051c4:	1a9b      	subs	r3, r3, r2
900051c6:	009b      	lsls	r3, r3, #2
900051c8:	440b      	add	r3, r1
900051ca:	3344      	adds	r3, #68	@ 0x44
900051cc:	2200      	movs	r2, #0
900051ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
900051d0:	78fa      	ldrb	r2, [r7, #3]
900051d2:	6879      	ldr	r1, [r7, #4]
900051d4:	4613      	mov	r3, r2
900051d6:	011b      	lsls	r3, r3, #4
900051d8:	1a9b      	subs	r3, r3, r2
900051da:	009b      	lsls	r3, r3, #2
900051dc:	440b      	add	r3, r1
900051de:	334d      	adds	r3, #77	@ 0x4d
900051e0:	2204      	movs	r2, #4
900051e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
900051e4:	78fa      	ldrb	r2, [r7, #3]
900051e6:	6879      	ldr	r1, [r7, #4]
900051e8:	4613      	mov	r3, r2
900051ea:	011b      	lsls	r3, r3, #4
900051ec:	1a9b      	subs	r3, r3, r2
900051ee:	009b      	lsls	r3, r3, #2
900051f0:	440b      	add	r3, r1
900051f2:	3319      	adds	r3, #25
900051f4:	781b      	ldrb	r3, [r3, #0]
900051f6:	2b00      	cmp	r3, #0
900051f8:	d114      	bne.n	90005224 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
900051fa:	78fa      	ldrb	r2, [r7, #3]
900051fc:	6879      	ldr	r1, [r7, #4]
900051fe:	4613      	mov	r3, r2
90005200:	011b      	lsls	r3, r3, #4
90005202:	1a9b      	subs	r3, r3, r2
90005204:	009b      	lsls	r3, r3, #2
90005206:	440b      	add	r3, r1
90005208:	3318      	adds	r3, #24
9000520a:	781b      	ldrb	r3, [r3, #0]
9000520c:	2b00      	cmp	r3, #0
9000520e:	d109      	bne.n	90005224 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
90005210:	78fa      	ldrb	r2, [r7, #3]
90005212:	6879      	ldr	r1, [r7, #4]
90005214:	4613      	mov	r3, r2
90005216:	011b      	lsls	r3, r3, #4
90005218:	1a9b      	subs	r3, r3, r2
9000521a:	009b      	lsls	r3, r3, #2
9000521c:	440b      	add	r3, r1
9000521e:	3319      	adds	r3, #25
90005220:	2201      	movs	r2, #1
90005222:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005224:	687b      	ldr	r3, [r7, #4]
90005226:	681b      	ldr	r3, [r3, #0]
90005228:	78fa      	ldrb	r2, [r7, #3]
9000522a:	4611      	mov	r1, r2
9000522c:	4618      	mov	r0, r3
9000522e:	f006 f86f 	bl	9000b310 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90005232:	78fb      	ldrb	r3, [r7, #3]
90005234:	015a      	lsls	r2, r3, #5
90005236:	693b      	ldr	r3, [r7, #16]
90005238:	4413      	add	r3, r2
9000523a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000523e:	461a      	mov	r2, r3
90005240:	2310      	movs	r3, #16
90005242:	6093      	str	r3, [r2, #8]
90005244:	e2a7      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005246:	687b      	ldr	r3, [r7, #4]
90005248:	681b      	ldr	r3, [r3, #0]
9000524a:	78fa      	ldrb	r2, [r7, #3]
9000524c:	4611      	mov	r1, r2
9000524e:	4618      	mov	r0, r3
90005250:	f005 ffe1 	bl	9000b216 <USB_ReadChInterrupts>
90005254:	4603      	mov	r3, r0
90005256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000525a:	2b80      	cmp	r3, #128	@ 0x80
9000525c:	f040 8083 	bne.w	90005366 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
90005260:	687b      	ldr	r3, [r7, #4]
90005262:	799b      	ldrb	r3, [r3, #6]
90005264:	2b00      	cmp	r3, #0
90005266:	d111      	bne.n	9000528c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005268:	78fa      	ldrb	r2, [r7, #3]
9000526a:	6879      	ldr	r1, [r7, #4]
9000526c:	4613      	mov	r3, r2
9000526e:	011b      	lsls	r3, r3, #4
90005270:	1a9b      	subs	r3, r3, r2
90005272:	009b      	lsls	r3, r3, #2
90005274:	440b      	add	r3, r1
90005276:	334d      	adds	r3, #77	@ 0x4d
90005278:	2207      	movs	r2, #7
9000527a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
9000527c:	687b      	ldr	r3, [r7, #4]
9000527e:	681b      	ldr	r3, [r3, #0]
90005280:	78fa      	ldrb	r2, [r7, #3]
90005282:	4611      	mov	r1, r2
90005284:	4618      	mov	r0, r3
90005286:	f006 f843 	bl	9000b310 <USB_HC_Halt>
9000528a:	e062      	b.n	90005352 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
9000528c:	78fa      	ldrb	r2, [r7, #3]
9000528e:	6879      	ldr	r1, [r7, #4]
90005290:	4613      	mov	r3, r2
90005292:	011b      	lsls	r3, r3, #4
90005294:	1a9b      	subs	r3, r3, r2
90005296:	009b      	lsls	r3, r3, #2
90005298:	440b      	add	r3, r1
9000529a:	3344      	adds	r3, #68	@ 0x44
9000529c:	681b      	ldr	r3, [r3, #0]
9000529e:	1c59      	adds	r1, r3, #1
900052a0:	6878      	ldr	r0, [r7, #4]
900052a2:	4613      	mov	r3, r2
900052a4:	011b      	lsls	r3, r3, #4
900052a6:	1a9b      	subs	r3, r3, r2
900052a8:	009b      	lsls	r3, r3, #2
900052aa:	4403      	add	r3, r0
900052ac:	3344      	adds	r3, #68	@ 0x44
900052ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900052b0:	78fa      	ldrb	r2, [r7, #3]
900052b2:	6879      	ldr	r1, [r7, #4]
900052b4:	4613      	mov	r3, r2
900052b6:	011b      	lsls	r3, r3, #4
900052b8:	1a9b      	subs	r3, r3, r2
900052ba:	009b      	lsls	r3, r3, #2
900052bc:	440b      	add	r3, r1
900052be:	3344      	adds	r3, #68	@ 0x44
900052c0:	681b      	ldr	r3, [r3, #0]
900052c2:	2b02      	cmp	r3, #2
900052c4:	d922      	bls.n	9000530c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900052c6:	78fa      	ldrb	r2, [r7, #3]
900052c8:	6879      	ldr	r1, [r7, #4]
900052ca:	4613      	mov	r3, r2
900052cc:	011b      	lsls	r3, r3, #4
900052ce:	1a9b      	subs	r3, r3, r2
900052d0:	009b      	lsls	r3, r3, #2
900052d2:	440b      	add	r3, r1
900052d4:	3344      	adds	r3, #68	@ 0x44
900052d6:	2200      	movs	r2, #0
900052d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900052da:	78fa      	ldrb	r2, [r7, #3]
900052dc:	6879      	ldr	r1, [r7, #4]
900052de:	4613      	mov	r3, r2
900052e0:	011b      	lsls	r3, r3, #4
900052e2:	1a9b      	subs	r3, r3, r2
900052e4:	009b      	lsls	r3, r3, #2
900052e6:	440b      	add	r3, r1
900052e8:	334c      	adds	r3, #76	@ 0x4c
900052ea:	2204      	movs	r2, #4
900052ec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900052ee:	78fa      	ldrb	r2, [r7, #3]
900052f0:	6879      	ldr	r1, [r7, #4]
900052f2:	4613      	mov	r3, r2
900052f4:	011b      	lsls	r3, r3, #4
900052f6:	1a9b      	subs	r3, r3, r2
900052f8:	009b      	lsls	r3, r3, #2
900052fa:	440b      	add	r3, r1
900052fc:	334c      	adds	r3, #76	@ 0x4c
900052fe:	781a      	ldrb	r2, [r3, #0]
90005300:	78fb      	ldrb	r3, [r7, #3]
90005302:	4619      	mov	r1, r3
90005304:	6878      	ldr	r0, [r7, #4]
90005306:	f7fb ff45 	bl	90001194 <HAL_HCD_HC_NotifyURBChange_Callback>
9000530a:	e022      	b.n	90005352 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000530c:	78fa      	ldrb	r2, [r7, #3]
9000530e:	6879      	ldr	r1, [r7, #4]
90005310:	4613      	mov	r3, r2
90005312:	011b      	lsls	r3, r3, #4
90005314:	1a9b      	subs	r3, r3, r2
90005316:	009b      	lsls	r3, r3, #2
90005318:	440b      	add	r3, r1
9000531a:	334c      	adds	r3, #76	@ 0x4c
9000531c:	2202      	movs	r2, #2
9000531e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005320:	78fb      	ldrb	r3, [r7, #3]
90005322:	015a      	lsls	r2, r3, #5
90005324:	693b      	ldr	r3, [r7, #16]
90005326:	4413      	add	r3, r2
90005328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000532c:	681b      	ldr	r3, [r3, #0]
9000532e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005330:	68fb      	ldr	r3, [r7, #12]
90005332:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005336:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005338:	68fb      	ldr	r3, [r7, #12]
9000533a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000533e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005340:	78fb      	ldrb	r3, [r7, #3]
90005342:	015a      	lsls	r2, r3, #5
90005344:	693b      	ldr	r3, [r7, #16]
90005346:	4413      	add	r3, r2
90005348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000534c:	461a      	mov	r2, r3
9000534e:	68fb      	ldr	r3, [r7, #12]
90005350:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90005352:	78fb      	ldrb	r3, [r7, #3]
90005354:	015a      	lsls	r2, r3, #5
90005356:	693b      	ldr	r3, [r7, #16]
90005358:	4413      	add	r3, r2
9000535a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000535e:	461a      	mov	r2, r3
90005360:	2380      	movs	r3, #128	@ 0x80
90005362:	6093      	str	r3, [r2, #8]
90005364:	e217      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
90005366:	687b      	ldr	r3, [r7, #4]
90005368:	681b      	ldr	r3, [r3, #0]
9000536a:	78fa      	ldrb	r2, [r7, #3]
9000536c:	4611      	mov	r1, r2
9000536e:	4618      	mov	r0, r3
90005370:	f005 ff51 	bl	9000b216 <USB_ReadChInterrupts>
90005374:	4603      	mov	r3, r0
90005376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000537a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
9000537e:	d11b      	bne.n	900053b8 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005380:	78fa      	ldrb	r2, [r7, #3]
90005382:	6879      	ldr	r1, [r7, #4]
90005384:	4613      	mov	r3, r2
90005386:	011b      	lsls	r3, r3, #4
90005388:	1a9b      	subs	r3, r3, r2
9000538a:	009b      	lsls	r3, r3, #2
9000538c:	440b      	add	r3, r1
9000538e:	334d      	adds	r3, #77	@ 0x4d
90005390:	2209      	movs	r2, #9
90005392:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005394:	687b      	ldr	r3, [r7, #4]
90005396:	681b      	ldr	r3, [r3, #0]
90005398:	78fa      	ldrb	r2, [r7, #3]
9000539a:	4611      	mov	r1, r2
9000539c:	4618      	mov	r0, r3
9000539e:	f005 ffb7 	bl	9000b310 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900053a2:	78fb      	ldrb	r3, [r7, #3]
900053a4:	015a      	lsls	r2, r3, #5
900053a6:	693b      	ldr	r3, [r7, #16]
900053a8:	4413      	add	r3, r2
900053aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053ae:	461a      	mov	r2, r3
900053b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
900053b4:	6093      	str	r3, [r2, #8]
900053b6:	e1ee      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900053b8:	687b      	ldr	r3, [r7, #4]
900053ba:	681b      	ldr	r3, [r3, #0]
900053bc:	78fa      	ldrb	r2, [r7, #3]
900053be:	4611      	mov	r1, r2
900053c0:	4618      	mov	r0, r3
900053c2:	f005 ff28 	bl	9000b216 <USB_ReadChInterrupts>
900053c6:	4603      	mov	r3, r0
900053c8:	f003 0302 	and.w	r3, r3, #2
900053cc:	2b02      	cmp	r3, #2
900053ce:	f040 81df 	bne.w	90005790 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900053d2:	78fb      	ldrb	r3, [r7, #3]
900053d4:	015a      	lsls	r2, r3, #5
900053d6:	693b      	ldr	r3, [r7, #16]
900053d8:	4413      	add	r3, r2
900053da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900053de:	461a      	mov	r2, r3
900053e0:	2302      	movs	r3, #2
900053e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
900053e4:	78fa      	ldrb	r2, [r7, #3]
900053e6:	6879      	ldr	r1, [r7, #4]
900053e8:	4613      	mov	r3, r2
900053ea:	011b      	lsls	r3, r3, #4
900053ec:	1a9b      	subs	r3, r3, r2
900053ee:	009b      	lsls	r3, r3, #2
900053f0:	440b      	add	r3, r1
900053f2:	334d      	adds	r3, #77	@ 0x4d
900053f4:	781b      	ldrb	r3, [r3, #0]
900053f6:	2b01      	cmp	r3, #1
900053f8:	f040 8093 	bne.w	90005522 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900053fc:	78fa      	ldrb	r2, [r7, #3]
900053fe:	6879      	ldr	r1, [r7, #4]
90005400:	4613      	mov	r3, r2
90005402:	011b      	lsls	r3, r3, #4
90005404:	1a9b      	subs	r3, r3, r2
90005406:	009b      	lsls	r3, r3, #2
90005408:	440b      	add	r3, r1
9000540a:	334d      	adds	r3, #77	@ 0x4d
9000540c:	2202      	movs	r2, #2
9000540e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90005410:	78fa      	ldrb	r2, [r7, #3]
90005412:	6879      	ldr	r1, [r7, #4]
90005414:	4613      	mov	r3, r2
90005416:	011b      	lsls	r3, r3, #4
90005418:	1a9b      	subs	r3, r3, r2
9000541a:	009b      	lsls	r3, r3, #2
9000541c:	440b      	add	r3, r1
9000541e:	334c      	adds	r3, #76	@ 0x4c
90005420:	2201      	movs	r2, #1
90005422:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
90005424:	78fa      	ldrb	r2, [r7, #3]
90005426:	6879      	ldr	r1, [r7, #4]
90005428:	4613      	mov	r3, r2
9000542a:	011b      	lsls	r3, r3, #4
9000542c:	1a9b      	subs	r3, r3, r2
9000542e:	009b      	lsls	r3, r3, #2
90005430:	440b      	add	r3, r1
90005432:	3326      	adds	r3, #38	@ 0x26
90005434:	781b      	ldrb	r3, [r3, #0]
90005436:	2b02      	cmp	r3, #2
90005438:	d00b      	beq.n	90005452 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
9000543a:	78fa      	ldrb	r2, [r7, #3]
9000543c:	6879      	ldr	r1, [r7, #4]
9000543e:	4613      	mov	r3, r2
90005440:	011b      	lsls	r3, r3, #4
90005442:	1a9b      	subs	r3, r3, r2
90005444:	009b      	lsls	r3, r3, #2
90005446:	440b      	add	r3, r1
90005448:	3326      	adds	r3, #38	@ 0x26
9000544a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
9000544c:	2b03      	cmp	r3, #3
9000544e:	f040 8190 	bne.w	90005772 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
90005452:	687b      	ldr	r3, [r7, #4]
90005454:	799b      	ldrb	r3, [r3, #6]
90005456:	2b00      	cmp	r3, #0
90005458:	d115      	bne.n	90005486 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
9000545a:	78fa      	ldrb	r2, [r7, #3]
9000545c:	6879      	ldr	r1, [r7, #4]
9000545e:	4613      	mov	r3, r2
90005460:	011b      	lsls	r3, r3, #4
90005462:	1a9b      	subs	r3, r3, r2
90005464:	009b      	lsls	r3, r3, #2
90005466:	440b      	add	r3, r1
90005468:	333d      	adds	r3, #61	@ 0x3d
9000546a:	781b      	ldrb	r3, [r3, #0]
9000546c:	78fa      	ldrb	r2, [r7, #3]
9000546e:	f083 0301 	eor.w	r3, r3, #1
90005472:	b2d8      	uxtb	r0, r3
90005474:	6879      	ldr	r1, [r7, #4]
90005476:	4613      	mov	r3, r2
90005478:	011b      	lsls	r3, r3, #4
9000547a:	1a9b      	subs	r3, r3, r2
9000547c:	009b      	lsls	r3, r3, #2
9000547e:	440b      	add	r3, r1
90005480:	333d      	adds	r3, #61	@ 0x3d
90005482:	4602      	mov	r2, r0
90005484:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
90005486:	687b      	ldr	r3, [r7, #4]
90005488:	799b      	ldrb	r3, [r3, #6]
9000548a:	2b01      	cmp	r3, #1
9000548c:	f040 8171 	bne.w	90005772 <HCD_HC_OUT_IRQHandler+0x954>
90005490:	78fa      	ldrb	r2, [r7, #3]
90005492:	6879      	ldr	r1, [r7, #4]
90005494:	4613      	mov	r3, r2
90005496:	011b      	lsls	r3, r3, #4
90005498:	1a9b      	subs	r3, r3, r2
9000549a:	009b      	lsls	r3, r3, #2
9000549c:	440b      	add	r3, r1
9000549e:	3334      	adds	r3, #52	@ 0x34
900054a0:	681b      	ldr	r3, [r3, #0]
900054a2:	2b00      	cmp	r3, #0
900054a4:	f000 8165 	beq.w	90005772 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
900054a8:	78fa      	ldrb	r2, [r7, #3]
900054aa:	6879      	ldr	r1, [r7, #4]
900054ac:	4613      	mov	r3, r2
900054ae:	011b      	lsls	r3, r3, #4
900054b0:	1a9b      	subs	r3, r3, r2
900054b2:	009b      	lsls	r3, r3, #2
900054b4:	440b      	add	r3, r1
900054b6:	3334      	adds	r3, #52	@ 0x34
900054b8:	6819      	ldr	r1, [r3, #0]
900054ba:	78fa      	ldrb	r2, [r7, #3]
900054bc:	6878      	ldr	r0, [r7, #4]
900054be:	4613      	mov	r3, r2
900054c0:	011b      	lsls	r3, r3, #4
900054c2:	1a9b      	subs	r3, r3, r2
900054c4:	009b      	lsls	r3, r3, #2
900054c6:	4403      	add	r3, r0
900054c8:	3328      	adds	r3, #40	@ 0x28
900054ca:	881b      	ldrh	r3, [r3, #0]
900054cc:	440b      	add	r3, r1
900054ce:	1e59      	subs	r1, r3, #1
900054d0:	78fa      	ldrb	r2, [r7, #3]
900054d2:	6878      	ldr	r0, [r7, #4]
900054d4:	4613      	mov	r3, r2
900054d6:	011b      	lsls	r3, r3, #4
900054d8:	1a9b      	subs	r3, r3, r2
900054da:	009b      	lsls	r3, r3, #2
900054dc:	4403      	add	r3, r0
900054de:	3328      	adds	r3, #40	@ 0x28
900054e0:	881b      	ldrh	r3, [r3, #0]
900054e2:	fbb1 f3f3 	udiv	r3, r1, r3
900054e6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
900054e8:	68bb      	ldr	r3, [r7, #8]
900054ea:	f003 0301 	and.w	r3, r3, #1
900054ee:	2b00      	cmp	r3, #0
900054f0:	f000 813f 	beq.w	90005772 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
900054f4:	78fa      	ldrb	r2, [r7, #3]
900054f6:	6879      	ldr	r1, [r7, #4]
900054f8:	4613      	mov	r3, r2
900054fa:	011b      	lsls	r3, r3, #4
900054fc:	1a9b      	subs	r3, r3, r2
900054fe:	009b      	lsls	r3, r3, #2
90005500:	440b      	add	r3, r1
90005502:	333d      	adds	r3, #61	@ 0x3d
90005504:	781b      	ldrb	r3, [r3, #0]
90005506:	78fa      	ldrb	r2, [r7, #3]
90005508:	f083 0301 	eor.w	r3, r3, #1
9000550c:	b2d8      	uxtb	r0, r3
9000550e:	6879      	ldr	r1, [r7, #4]
90005510:	4613      	mov	r3, r2
90005512:	011b      	lsls	r3, r3, #4
90005514:	1a9b      	subs	r3, r3, r2
90005516:	009b      	lsls	r3, r3, #2
90005518:	440b      	add	r3, r1
9000551a:	333d      	adds	r3, #61	@ 0x3d
9000551c:	4602      	mov	r2, r0
9000551e:	701a      	strb	r2, [r3, #0]
90005520:	e127      	b.n	90005772 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90005522:	78fa      	ldrb	r2, [r7, #3]
90005524:	6879      	ldr	r1, [r7, #4]
90005526:	4613      	mov	r3, r2
90005528:	011b      	lsls	r3, r3, #4
9000552a:	1a9b      	subs	r3, r3, r2
9000552c:	009b      	lsls	r3, r3, #2
9000552e:	440b      	add	r3, r1
90005530:	334d      	adds	r3, #77	@ 0x4d
90005532:	781b      	ldrb	r3, [r3, #0]
90005534:	2b03      	cmp	r3, #3
90005536:	d120      	bne.n	9000557a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005538:	78fa      	ldrb	r2, [r7, #3]
9000553a:	6879      	ldr	r1, [r7, #4]
9000553c:	4613      	mov	r3, r2
9000553e:	011b      	lsls	r3, r3, #4
90005540:	1a9b      	subs	r3, r3, r2
90005542:	009b      	lsls	r3, r3, #2
90005544:	440b      	add	r3, r1
90005546:	334d      	adds	r3, #77	@ 0x4d
90005548:	2202      	movs	r2, #2
9000554a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
9000554c:	78fa      	ldrb	r2, [r7, #3]
9000554e:	6879      	ldr	r1, [r7, #4]
90005550:	4613      	mov	r3, r2
90005552:	011b      	lsls	r3, r3, #4
90005554:	1a9b      	subs	r3, r3, r2
90005556:	009b      	lsls	r3, r3, #2
90005558:	440b      	add	r3, r1
9000555a:	331b      	adds	r3, #27
9000555c:	781b      	ldrb	r3, [r3, #0]
9000555e:	2b01      	cmp	r3, #1
90005560:	f040 8107 	bne.w	90005772 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005564:	78fa      	ldrb	r2, [r7, #3]
90005566:	6879      	ldr	r1, [r7, #4]
90005568:	4613      	mov	r3, r2
9000556a:	011b      	lsls	r3, r3, #4
9000556c:	1a9b      	subs	r3, r3, r2
9000556e:	009b      	lsls	r3, r3, #2
90005570:	440b      	add	r3, r1
90005572:	334c      	adds	r3, #76	@ 0x4c
90005574:	2202      	movs	r2, #2
90005576:	701a      	strb	r2, [r3, #0]
90005578:	e0fb      	b.n	90005772 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
9000557a:	78fa      	ldrb	r2, [r7, #3]
9000557c:	6879      	ldr	r1, [r7, #4]
9000557e:	4613      	mov	r3, r2
90005580:	011b      	lsls	r3, r3, #4
90005582:	1a9b      	subs	r3, r3, r2
90005584:	009b      	lsls	r3, r3, #2
90005586:	440b      	add	r3, r1
90005588:	334d      	adds	r3, #77	@ 0x4d
9000558a:	781b      	ldrb	r3, [r3, #0]
9000558c:	2b04      	cmp	r3, #4
9000558e:	d13a      	bne.n	90005606 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005590:	78fa      	ldrb	r2, [r7, #3]
90005592:	6879      	ldr	r1, [r7, #4]
90005594:	4613      	mov	r3, r2
90005596:	011b      	lsls	r3, r3, #4
90005598:	1a9b      	subs	r3, r3, r2
9000559a:	009b      	lsls	r3, r3, #2
9000559c:	440b      	add	r3, r1
9000559e:	334d      	adds	r3, #77	@ 0x4d
900055a0:	2202      	movs	r2, #2
900055a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900055a4:	78fa      	ldrb	r2, [r7, #3]
900055a6:	6879      	ldr	r1, [r7, #4]
900055a8:	4613      	mov	r3, r2
900055aa:	011b      	lsls	r3, r3, #4
900055ac:	1a9b      	subs	r3, r3, r2
900055ae:	009b      	lsls	r3, r3, #2
900055b0:	440b      	add	r3, r1
900055b2:	334c      	adds	r3, #76	@ 0x4c
900055b4:	2202      	movs	r2, #2
900055b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
900055b8:	78fa      	ldrb	r2, [r7, #3]
900055ba:	6879      	ldr	r1, [r7, #4]
900055bc:	4613      	mov	r3, r2
900055be:	011b      	lsls	r3, r3, #4
900055c0:	1a9b      	subs	r3, r3, r2
900055c2:	009b      	lsls	r3, r3, #2
900055c4:	440b      	add	r3, r1
900055c6:	331b      	adds	r3, #27
900055c8:	781b      	ldrb	r3, [r3, #0]
900055ca:	2b01      	cmp	r3, #1
900055cc:	f040 80d1 	bne.w	90005772 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
900055d0:	78fa      	ldrb	r2, [r7, #3]
900055d2:	6879      	ldr	r1, [r7, #4]
900055d4:	4613      	mov	r3, r2
900055d6:	011b      	lsls	r3, r3, #4
900055d8:	1a9b      	subs	r3, r3, r2
900055da:	009b      	lsls	r3, r3, #2
900055dc:	440b      	add	r3, r1
900055de:	331b      	adds	r3, #27
900055e0:	2200      	movs	r2, #0
900055e2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
900055e4:	78fb      	ldrb	r3, [r7, #3]
900055e6:	015a      	lsls	r2, r3, #5
900055e8:	693b      	ldr	r3, [r7, #16]
900055ea:	4413      	add	r3, r2
900055ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900055f0:	685b      	ldr	r3, [r3, #4]
900055f2:	78fa      	ldrb	r2, [r7, #3]
900055f4:	0151      	lsls	r1, r2, #5
900055f6:	693a      	ldr	r2, [r7, #16]
900055f8:	440a      	add	r2, r1
900055fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
900055fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90005602:	6053      	str	r3, [r2, #4]
90005604:	e0b5      	b.n	90005772 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90005606:	78fa      	ldrb	r2, [r7, #3]
90005608:	6879      	ldr	r1, [r7, #4]
9000560a:	4613      	mov	r3, r2
9000560c:	011b      	lsls	r3, r3, #4
9000560e:	1a9b      	subs	r3, r3, r2
90005610:	009b      	lsls	r3, r3, #2
90005612:	440b      	add	r3, r1
90005614:	334d      	adds	r3, #77	@ 0x4d
90005616:	781b      	ldrb	r3, [r3, #0]
90005618:	2b05      	cmp	r3, #5
9000561a:	d114      	bne.n	90005646 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000561c:	78fa      	ldrb	r2, [r7, #3]
9000561e:	6879      	ldr	r1, [r7, #4]
90005620:	4613      	mov	r3, r2
90005622:	011b      	lsls	r3, r3, #4
90005624:	1a9b      	subs	r3, r3, r2
90005626:	009b      	lsls	r3, r3, #2
90005628:	440b      	add	r3, r1
9000562a:	334d      	adds	r3, #77	@ 0x4d
9000562c:	2202      	movs	r2, #2
9000562e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005630:	78fa      	ldrb	r2, [r7, #3]
90005632:	6879      	ldr	r1, [r7, #4]
90005634:	4613      	mov	r3, r2
90005636:	011b      	lsls	r3, r3, #4
90005638:	1a9b      	subs	r3, r3, r2
9000563a:	009b      	lsls	r3, r3, #2
9000563c:	440b      	add	r3, r1
9000563e:	334c      	adds	r3, #76	@ 0x4c
90005640:	2202      	movs	r2, #2
90005642:	701a      	strb	r2, [r3, #0]
90005644:	e095      	b.n	90005772 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005646:	78fa      	ldrb	r2, [r7, #3]
90005648:	6879      	ldr	r1, [r7, #4]
9000564a:	4613      	mov	r3, r2
9000564c:	011b      	lsls	r3, r3, #4
9000564e:	1a9b      	subs	r3, r3, r2
90005650:	009b      	lsls	r3, r3, #2
90005652:	440b      	add	r3, r1
90005654:	334d      	adds	r3, #77	@ 0x4d
90005656:	781b      	ldrb	r3, [r3, #0]
90005658:	2b06      	cmp	r3, #6
9000565a:	d114      	bne.n	90005686 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000565c:	78fa      	ldrb	r2, [r7, #3]
9000565e:	6879      	ldr	r1, [r7, #4]
90005660:	4613      	mov	r3, r2
90005662:	011b      	lsls	r3, r3, #4
90005664:	1a9b      	subs	r3, r3, r2
90005666:	009b      	lsls	r3, r3, #2
90005668:	440b      	add	r3, r1
9000566a:	334d      	adds	r3, #77	@ 0x4d
9000566c:	2202      	movs	r2, #2
9000566e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
90005670:	78fa      	ldrb	r2, [r7, #3]
90005672:	6879      	ldr	r1, [r7, #4]
90005674:	4613      	mov	r3, r2
90005676:	011b      	lsls	r3, r3, #4
90005678:	1a9b      	subs	r3, r3, r2
9000567a:	009b      	lsls	r3, r3, #2
9000567c:	440b      	add	r3, r1
9000567e:	334c      	adds	r3, #76	@ 0x4c
90005680:	2205      	movs	r2, #5
90005682:	701a      	strb	r2, [r3, #0]
90005684:	e075      	b.n	90005772 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005686:	78fa      	ldrb	r2, [r7, #3]
90005688:	6879      	ldr	r1, [r7, #4]
9000568a:	4613      	mov	r3, r2
9000568c:	011b      	lsls	r3, r3, #4
9000568e:	1a9b      	subs	r3, r3, r2
90005690:	009b      	lsls	r3, r3, #2
90005692:	440b      	add	r3, r1
90005694:	334d      	adds	r3, #77	@ 0x4d
90005696:	781b      	ldrb	r3, [r3, #0]
90005698:	2b07      	cmp	r3, #7
9000569a:	d00a      	beq.n	900056b2 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000569c:	78fa      	ldrb	r2, [r7, #3]
9000569e:	6879      	ldr	r1, [r7, #4]
900056a0:	4613      	mov	r3, r2
900056a2:	011b      	lsls	r3, r3, #4
900056a4:	1a9b      	subs	r3, r3, r2
900056a6:	009b      	lsls	r3, r3, #2
900056a8:	440b      	add	r3, r1
900056aa:	334d      	adds	r3, #77	@ 0x4d
900056ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900056ae:	2b09      	cmp	r3, #9
900056b0:	d170      	bne.n	90005794 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900056b2:	78fa      	ldrb	r2, [r7, #3]
900056b4:	6879      	ldr	r1, [r7, #4]
900056b6:	4613      	mov	r3, r2
900056b8:	011b      	lsls	r3, r3, #4
900056ba:	1a9b      	subs	r3, r3, r2
900056bc:	009b      	lsls	r3, r3, #2
900056be:	440b      	add	r3, r1
900056c0:	334d      	adds	r3, #77	@ 0x4d
900056c2:	2202      	movs	r2, #2
900056c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900056c6:	78fa      	ldrb	r2, [r7, #3]
900056c8:	6879      	ldr	r1, [r7, #4]
900056ca:	4613      	mov	r3, r2
900056cc:	011b      	lsls	r3, r3, #4
900056ce:	1a9b      	subs	r3, r3, r2
900056d0:	009b      	lsls	r3, r3, #2
900056d2:	440b      	add	r3, r1
900056d4:	3344      	adds	r3, #68	@ 0x44
900056d6:	681b      	ldr	r3, [r3, #0]
900056d8:	1c59      	adds	r1, r3, #1
900056da:	6878      	ldr	r0, [r7, #4]
900056dc:	4613      	mov	r3, r2
900056de:	011b      	lsls	r3, r3, #4
900056e0:	1a9b      	subs	r3, r3, r2
900056e2:	009b      	lsls	r3, r3, #2
900056e4:	4403      	add	r3, r0
900056e6:	3344      	adds	r3, #68	@ 0x44
900056e8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900056ea:	78fa      	ldrb	r2, [r7, #3]
900056ec:	6879      	ldr	r1, [r7, #4]
900056ee:	4613      	mov	r3, r2
900056f0:	011b      	lsls	r3, r3, #4
900056f2:	1a9b      	subs	r3, r3, r2
900056f4:	009b      	lsls	r3, r3, #2
900056f6:	440b      	add	r3, r1
900056f8:	3344      	adds	r3, #68	@ 0x44
900056fa:	681b      	ldr	r3, [r3, #0]
900056fc:	2b02      	cmp	r3, #2
900056fe:	d914      	bls.n	9000572a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005700:	78fa      	ldrb	r2, [r7, #3]
90005702:	6879      	ldr	r1, [r7, #4]
90005704:	4613      	mov	r3, r2
90005706:	011b      	lsls	r3, r3, #4
90005708:	1a9b      	subs	r3, r3, r2
9000570a:	009b      	lsls	r3, r3, #2
9000570c:	440b      	add	r3, r1
9000570e:	3344      	adds	r3, #68	@ 0x44
90005710:	2200      	movs	r2, #0
90005712:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005714:	78fa      	ldrb	r2, [r7, #3]
90005716:	6879      	ldr	r1, [r7, #4]
90005718:	4613      	mov	r3, r2
9000571a:	011b      	lsls	r3, r3, #4
9000571c:	1a9b      	subs	r3, r3, r2
9000571e:	009b      	lsls	r3, r3, #2
90005720:	440b      	add	r3, r1
90005722:	334c      	adds	r3, #76	@ 0x4c
90005724:	2204      	movs	r2, #4
90005726:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005728:	e022      	b.n	90005770 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
9000572a:	78fa      	ldrb	r2, [r7, #3]
9000572c:	6879      	ldr	r1, [r7, #4]
9000572e:	4613      	mov	r3, r2
90005730:	011b      	lsls	r3, r3, #4
90005732:	1a9b      	subs	r3, r3, r2
90005734:	009b      	lsls	r3, r3, #2
90005736:	440b      	add	r3, r1
90005738:	334c      	adds	r3, #76	@ 0x4c
9000573a:	2202      	movs	r2, #2
9000573c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
9000573e:	78fb      	ldrb	r3, [r7, #3]
90005740:	015a      	lsls	r2, r3, #5
90005742:	693b      	ldr	r3, [r7, #16]
90005744:	4413      	add	r3, r2
90005746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000574a:	681b      	ldr	r3, [r3, #0]
9000574c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
9000574e:	68fb      	ldr	r3, [r7, #12]
90005750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
90005754:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005756:	68fb      	ldr	r3, [r7, #12]
90005758:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000575c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
9000575e:	78fb      	ldrb	r3, [r7, #3]
90005760:	015a      	lsls	r2, r3, #5
90005762:	693b      	ldr	r3, [r7, #16]
90005764:	4413      	add	r3, r2
90005766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000576a:	461a      	mov	r2, r3
9000576c:	68fb      	ldr	r3, [r7, #12]
9000576e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005770:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90005772:	78fa      	ldrb	r2, [r7, #3]
90005774:	6879      	ldr	r1, [r7, #4]
90005776:	4613      	mov	r3, r2
90005778:	011b      	lsls	r3, r3, #4
9000577a:	1a9b      	subs	r3, r3, r2
9000577c:	009b      	lsls	r3, r3, #2
9000577e:	440b      	add	r3, r1
90005780:	334c      	adds	r3, #76	@ 0x4c
90005782:	781a      	ldrb	r2, [r3, #0]
90005784:	78fb      	ldrb	r3, [r7, #3]
90005786:	4619      	mov	r1, r3
90005788:	6878      	ldr	r0, [r7, #4]
9000578a:	f7fb fd03 	bl	90001194 <HAL_HCD_HC_NotifyURBChange_Callback>
9000578e:	e002      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
90005790:	bf00      	nop
90005792:	e000      	b.n	90005796 <HCD_HC_OUT_IRQHandler+0x978>
      return;
90005794:	bf00      	nop
  }
}
90005796:	3718      	adds	r7, #24
90005798:	46bd      	mov	sp, r7
9000579a:	bd80      	pop	{r7, pc}

9000579c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
9000579c:	b580      	push	{r7, lr}
9000579e:	b08a      	sub	sp, #40	@ 0x28
900057a0:	af00      	add	r7, sp, #0
900057a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900057a4:	687b      	ldr	r3, [r7, #4]
900057a6:	681b      	ldr	r3, [r3, #0]
900057a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
900057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900057ac:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
900057ae:	687b      	ldr	r3, [r7, #4]
900057b0:	681b      	ldr	r3, [r3, #0]
900057b2:	6a1b      	ldr	r3, [r3, #32]
900057b4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
900057b6:	69fb      	ldr	r3, [r7, #28]
900057b8:	f003 030f 	and.w	r3, r3, #15
900057bc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
900057be:	69fb      	ldr	r3, [r7, #28]
900057c0:	0c5b      	lsrs	r3, r3, #17
900057c2:	f003 030f 	and.w	r3, r3, #15
900057c6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
900057c8:	69fb      	ldr	r3, [r7, #28]
900057ca:	091b      	lsrs	r3, r3, #4
900057cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
900057d0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
900057d2:	697b      	ldr	r3, [r7, #20]
900057d4:	2b02      	cmp	r3, #2
900057d6:	d004      	beq.n	900057e2 <HCD_RXQLVL_IRQHandler+0x46>
900057d8:	697b      	ldr	r3, [r7, #20]
900057da:	2b05      	cmp	r3, #5
900057dc:	f000 80b6 	beq.w	9000594c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900057e0:	e0b7      	b.n	90005952 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900057e2:	693b      	ldr	r3, [r7, #16]
900057e4:	2b00      	cmp	r3, #0
900057e6:	f000 80b3 	beq.w	90005950 <HCD_RXQLVL_IRQHandler+0x1b4>
900057ea:	6879      	ldr	r1, [r7, #4]
900057ec:	69ba      	ldr	r2, [r7, #24]
900057ee:	4613      	mov	r3, r2
900057f0:	011b      	lsls	r3, r3, #4
900057f2:	1a9b      	subs	r3, r3, r2
900057f4:	009b      	lsls	r3, r3, #2
900057f6:	440b      	add	r3, r1
900057f8:	332c      	adds	r3, #44	@ 0x2c
900057fa:	681b      	ldr	r3, [r3, #0]
900057fc:	2b00      	cmp	r3, #0
900057fe:	f000 80a7 	beq.w	90005950 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
90005802:	6879      	ldr	r1, [r7, #4]
90005804:	69ba      	ldr	r2, [r7, #24]
90005806:	4613      	mov	r3, r2
90005808:	011b      	lsls	r3, r3, #4
9000580a:	1a9b      	subs	r3, r3, r2
9000580c:	009b      	lsls	r3, r3, #2
9000580e:	440b      	add	r3, r1
90005810:	3338      	adds	r3, #56	@ 0x38
90005812:	681a      	ldr	r2, [r3, #0]
90005814:	693b      	ldr	r3, [r7, #16]
90005816:	18d1      	adds	r1, r2, r3
90005818:	6878      	ldr	r0, [r7, #4]
9000581a:	69ba      	ldr	r2, [r7, #24]
9000581c:	4613      	mov	r3, r2
9000581e:	011b      	lsls	r3, r3, #4
90005820:	1a9b      	subs	r3, r3, r2
90005822:	009b      	lsls	r3, r3, #2
90005824:	4403      	add	r3, r0
90005826:	3334      	adds	r3, #52	@ 0x34
90005828:	681b      	ldr	r3, [r3, #0]
9000582a:	4299      	cmp	r1, r3
9000582c:	f200 8083 	bhi.w	90005936 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
90005830:	687b      	ldr	r3, [r7, #4]
90005832:	6818      	ldr	r0, [r3, #0]
90005834:	6879      	ldr	r1, [r7, #4]
90005836:	69ba      	ldr	r2, [r7, #24]
90005838:	4613      	mov	r3, r2
9000583a:	011b      	lsls	r3, r3, #4
9000583c:	1a9b      	subs	r3, r3, r2
9000583e:	009b      	lsls	r3, r3, #2
90005840:	440b      	add	r3, r1
90005842:	332c      	adds	r3, #44	@ 0x2c
90005844:	681b      	ldr	r3, [r3, #0]
90005846:	693a      	ldr	r2, [r7, #16]
90005848:	b292      	uxth	r2, r2
9000584a:	4619      	mov	r1, r3
9000584c:	f005 fc78 	bl	9000b140 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
90005850:	6879      	ldr	r1, [r7, #4]
90005852:	69ba      	ldr	r2, [r7, #24]
90005854:	4613      	mov	r3, r2
90005856:	011b      	lsls	r3, r3, #4
90005858:	1a9b      	subs	r3, r3, r2
9000585a:	009b      	lsls	r3, r3, #2
9000585c:	440b      	add	r3, r1
9000585e:	332c      	adds	r3, #44	@ 0x2c
90005860:	681a      	ldr	r2, [r3, #0]
90005862:	693b      	ldr	r3, [r7, #16]
90005864:	18d1      	adds	r1, r2, r3
90005866:	6878      	ldr	r0, [r7, #4]
90005868:	69ba      	ldr	r2, [r7, #24]
9000586a:	4613      	mov	r3, r2
9000586c:	011b      	lsls	r3, r3, #4
9000586e:	1a9b      	subs	r3, r3, r2
90005870:	009b      	lsls	r3, r3, #2
90005872:	4403      	add	r3, r0
90005874:	332c      	adds	r3, #44	@ 0x2c
90005876:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
90005878:	6879      	ldr	r1, [r7, #4]
9000587a:	69ba      	ldr	r2, [r7, #24]
9000587c:	4613      	mov	r3, r2
9000587e:	011b      	lsls	r3, r3, #4
90005880:	1a9b      	subs	r3, r3, r2
90005882:	009b      	lsls	r3, r3, #2
90005884:	440b      	add	r3, r1
90005886:	3338      	adds	r3, #56	@ 0x38
90005888:	681a      	ldr	r2, [r3, #0]
9000588a:	693b      	ldr	r3, [r7, #16]
9000588c:	18d1      	adds	r1, r2, r3
9000588e:	6878      	ldr	r0, [r7, #4]
90005890:	69ba      	ldr	r2, [r7, #24]
90005892:	4613      	mov	r3, r2
90005894:	011b      	lsls	r3, r3, #4
90005896:	1a9b      	subs	r3, r3, r2
90005898:	009b      	lsls	r3, r3, #2
9000589a:	4403      	add	r3, r0
9000589c:	3338      	adds	r3, #56	@ 0x38
9000589e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
900058a0:	69bb      	ldr	r3, [r7, #24]
900058a2:	015a      	lsls	r2, r3, #5
900058a4:	6a3b      	ldr	r3, [r7, #32]
900058a6:	4413      	add	r3, r2
900058a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900058ac:	691b      	ldr	r3, [r3, #16]
900058ae:	0cdb      	lsrs	r3, r3, #19
900058b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
900058b4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
900058b6:	6879      	ldr	r1, [r7, #4]
900058b8:	69ba      	ldr	r2, [r7, #24]
900058ba:	4613      	mov	r3, r2
900058bc:	011b      	lsls	r3, r3, #4
900058be:	1a9b      	subs	r3, r3, r2
900058c0:	009b      	lsls	r3, r3, #2
900058c2:	440b      	add	r3, r1
900058c4:	3328      	adds	r3, #40	@ 0x28
900058c6:	881b      	ldrh	r3, [r3, #0]
900058c8:	461a      	mov	r2, r3
900058ca:	693b      	ldr	r3, [r7, #16]
900058cc:	4293      	cmp	r3, r2
900058ce:	d13f      	bne.n	90005950 <HCD_RXQLVL_IRQHandler+0x1b4>
900058d0:	68fb      	ldr	r3, [r7, #12]
900058d2:	2b00      	cmp	r3, #0
900058d4:	d03c      	beq.n	90005950 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
900058d6:	69bb      	ldr	r3, [r7, #24]
900058d8:	015a      	lsls	r2, r3, #5
900058da:	6a3b      	ldr	r3, [r7, #32]
900058dc:	4413      	add	r3, r2
900058de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
900058e2:	681b      	ldr	r3, [r3, #0]
900058e4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900058e6:	68bb      	ldr	r3, [r7, #8]
900058e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
900058ec:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
900058ee:	68bb      	ldr	r3, [r7, #8]
900058f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900058f4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
900058f6:	69bb      	ldr	r3, [r7, #24]
900058f8:	015a      	lsls	r2, r3, #5
900058fa:	6a3b      	ldr	r3, [r7, #32]
900058fc:	4413      	add	r3, r2
900058fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
90005902:	461a      	mov	r2, r3
90005904:	68bb      	ldr	r3, [r7, #8]
90005906:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
90005908:	6879      	ldr	r1, [r7, #4]
9000590a:	69ba      	ldr	r2, [r7, #24]
9000590c:	4613      	mov	r3, r2
9000590e:	011b      	lsls	r3, r3, #4
90005910:	1a9b      	subs	r3, r3, r2
90005912:	009b      	lsls	r3, r3, #2
90005914:	440b      	add	r3, r1
90005916:	333c      	adds	r3, #60	@ 0x3c
90005918:	781b      	ldrb	r3, [r3, #0]
9000591a:	f083 0301 	eor.w	r3, r3, #1
9000591e:	b2d8      	uxtb	r0, r3
90005920:	6879      	ldr	r1, [r7, #4]
90005922:	69ba      	ldr	r2, [r7, #24]
90005924:	4613      	mov	r3, r2
90005926:	011b      	lsls	r3, r3, #4
90005928:	1a9b      	subs	r3, r3, r2
9000592a:	009b      	lsls	r3, r3, #2
9000592c:	440b      	add	r3, r1
9000592e:	333c      	adds	r3, #60	@ 0x3c
90005930:	4602      	mov	r2, r0
90005932:	701a      	strb	r2, [r3, #0]
      break;
90005934:	e00c      	b.n	90005950 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
90005936:	6879      	ldr	r1, [r7, #4]
90005938:	69ba      	ldr	r2, [r7, #24]
9000593a:	4613      	mov	r3, r2
9000593c:	011b      	lsls	r3, r3, #4
9000593e:	1a9b      	subs	r3, r3, r2
90005940:	009b      	lsls	r3, r3, #2
90005942:	440b      	add	r3, r1
90005944:	334c      	adds	r3, #76	@ 0x4c
90005946:	2204      	movs	r2, #4
90005948:	701a      	strb	r2, [r3, #0]
      break;
9000594a:	e001      	b.n	90005950 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
9000594c:	bf00      	nop
9000594e:	e000      	b.n	90005952 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
90005950:	bf00      	nop
  }
}
90005952:	bf00      	nop
90005954:	3728      	adds	r7, #40	@ 0x28
90005956:	46bd      	mov	sp, r7
90005958:	bd80      	pop	{r7, pc}

9000595a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
9000595a:	b580      	push	{r7, lr}
9000595c:	b086      	sub	sp, #24
9000595e:	af00      	add	r7, sp, #0
90005960:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005962:	687b      	ldr	r3, [r7, #4]
90005964:	681b      	ldr	r3, [r3, #0]
90005966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005968:	697b      	ldr	r3, [r7, #20]
9000596a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
9000596c:	693b      	ldr	r3, [r7, #16]
9000596e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005972:	681b      	ldr	r3, [r3, #0]
90005974:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005976:	693b      	ldr	r3, [r7, #16]
90005978:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
9000597c:	681b      	ldr	r3, [r3, #0]
9000597e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90005980:	68bb      	ldr	r3, [r7, #8]
90005982:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
90005986:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005988:	68fb      	ldr	r3, [r7, #12]
9000598a:	f003 0302 	and.w	r3, r3, #2
9000598e:	2b02      	cmp	r3, #2
90005990:	d10b      	bne.n	900059aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90005992:	68fb      	ldr	r3, [r7, #12]
90005994:	f003 0301 	and.w	r3, r3, #1
90005998:	2b01      	cmp	r3, #1
9000599a:	d102      	bne.n	900059a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
9000599c:	6878      	ldr	r0, [r7, #4]
9000599e:	f7fb fbc1 	bl	90001124 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
900059a2:	68bb      	ldr	r3, [r7, #8]
900059a4:	f043 0302 	orr.w	r3, r3, #2
900059a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
900059aa:	68fb      	ldr	r3, [r7, #12]
900059ac:	f003 0308 	and.w	r3, r3, #8
900059b0:	2b08      	cmp	r3, #8
900059b2:	d132      	bne.n	90005a1a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
900059b4:	68bb      	ldr	r3, [r7, #8]
900059b6:	f043 0308 	orr.w	r3, r3, #8
900059ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
900059bc:	68fb      	ldr	r3, [r7, #12]
900059be:	f003 0304 	and.w	r3, r3, #4
900059c2:	2b04      	cmp	r3, #4
900059c4:	d126      	bne.n	90005a14 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
900059c6:	687b      	ldr	r3, [r7, #4]
900059c8:	7a5b      	ldrb	r3, [r3, #9]
900059ca:	2b02      	cmp	r3, #2
900059cc:	d113      	bne.n	900059f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
900059ce:	68fb      	ldr	r3, [r7, #12]
900059d0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
900059d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
900059d8:	d106      	bne.n	900059e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
900059da:	687b      	ldr	r3, [r7, #4]
900059dc:	681b      	ldr	r3, [r3, #0]
900059de:	2102      	movs	r1, #2
900059e0:	4618      	mov	r0, r3
900059e2:	f005 fc47 	bl	9000b274 <USB_InitFSLSPClkSel>
900059e6:	e011      	b.n	90005a0c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900059e8:	687b      	ldr	r3, [r7, #4]
900059ea:	681b      	ldr	r3, [r3, #0]
900059ec:	2101      	movs	r1, #1
900059ee:	4618      	mov	r0, r3
900059f0:	f005 fc40 	bl	9000b274 <USB_InitFSLSPClkSel>
900059f4:	e00a      	b.n	90005a0c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900059f6:	687b      	ldr	r3, [r7, #4]
900059f8:	79db      	ldrb	r3, [r3, #7]
900059fa:	2b01      	cmp	r3, #1
900059fc:	d106      	bne.n	90005a0c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
900059fe:	693b      	ldr	r3, [r7, #16]
90005a00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
90005a04:	461a      	mov	r2, r3
90005a06:	f64e 2360 	movw	r3, #60000	@ 0xea60
90005a0a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90005a0c:	6878      	ldr	r0, [r7, #4]
90005a0e:	f7fb fba5 	bl	9000115c <HAL_HCD_PortEnabled_Callback>
90005a12:	e002      	b.n	90005a1a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
90005a14:	6878      	ldr	r0, [r7, #4]
90005a16:	f7fb fbaf 	bl	90001178 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90005a1a:	68fb      	ldr	r3, [r7, #12]
90005a1c:	f003 0320 	and.w	r3, r3, #32
90005a20:	2b20      	cmp	r3, #32
90005a22:	d103      	bne.n	90005a2c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90005a24:	68bb      	ldr	r3, [r7, #8]
90005a26:	f043 0320 	orr.w	r3, r3, #32
90005a2a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90005a2c:	693b      	ldr	r3, [r7, #16]
90005a2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
90005a32:	461a      	mov	r2, r3
90005a34:	68bb      	ldr	r3, [r7, #8]
90005a36:	6013      	str	r3, [r2, #0]
}
90005a38:	bf00      	nop
90005a3a:	3718      	adds	r7, #24
90005a3c:	46bd      	mov	sp, r7
90005a3e:	bd80      	pop	{r7, pc}

90005a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90005a40:	b580      	push	{r7, lr}
90005a42:	b082      	sub	sp, #8
90005a44:	af00      	add	r7, sp, #0
90005a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005a48:	687b      	ldr	r3, [r7, #4]
90005a4a:	2b00      	cmp	r3, #0
90005a4c:	d101      	bne.n	90005a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90005a4e:	2301      	movs	r3, #1
90005a50:	e08b      	b.n	90005b6a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90005a52:	687b      	ldr	r3, [r7, #4]
90005a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005a58:	b2db      	uxtb	r3, r3
90005a5a:	2b00      	cmp	r3, #0
90005a5c:	d106      	bne.n	90005a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90005a5e:	687b      	ldr	r3, [r7, #4]
90005a60:	2200      	movs	r2, #0
90005a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005a66:	6878      	ldr	r0, [r7, #4]
90005a68:	f000 f886 	bl	90005b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005a6c:	687b      	ldr	r3, [r7, #4]
90005a6e:	2224      	movs	r2, #36	@ 0x24
90005a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005a74:	687b      	ldr	r3, [r7, #4]
90005a76:	681b      	ldr	r3, [r3, #0]
90005a78:	681a      	ldr	r2, [r3, #0]
90005a7a:	687b      	ldr	r3, [r7, #4]
90005a7c:	681b      	ldr	r3, [r3, #0]
90005a7e:	f022 0201 	bic.w	r2, r2, #1
90005a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005a84:	687b      	ldr	r3, [r7, #4]
90005a86:	685a      	ldr	r2, [r3, #4]
90005a88:	687b      	ldr	r3, [r7, #4]
90005a8a:	681b      	ldr	r3, [r3, #0]
90005a8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
90005a90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90005a92:	687b      	ldr	r3, [r7, #4]
90005a94:	681b      	ldr	r3, [r3, #0]
90005a96:	689a      	ldr	r2, [r3, #8]
90005a98:	687b      	ldr	r3, [r7, #4]
90005a9a:	681b      	ldr	r3, [r3, #0]
90005a9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005aa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90005aa2:	687b      	ldr	r3, [r7, #4]
90005aa4:	68db      	ldr	r3, [r3, #12]
90005aa6:	2b01      	cmp	r3, #1
90005aa8:	d107      	bne.n	90005aba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005aaa:	687b      	ldr	r3, [r7, #4]
90005aac:	689a      	ldr	r2, [r3, #8]
90005aae:	687b      	ldr	r3, [r7, #4]
90005ab0:	681b      	ldr	r3, [r3, #0]
90005ab2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
90005ab6:	609a      	str	r2, [r3, #8]
90005ab8:	e006      	b.n	90005ac8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005aba:	687b      	ldr	r3, [r7, #4]
90005abc:	689a      	ldr	r2, [r3, #8]
90005abe:	687b      	ldr	r3, [r7, #4]
90005ac0:	681b      	ldr	r3, [r3, #0]
90005ac2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
90005ac6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005ac8:	687b      	ldr	r3, [r7, #4]
90005aca:	68db      	ldr	r3, [r3, #12]
90005acc:	2b02      	cmp	r3, #2
90005ace:	d108      	bne.n	90005ae2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005ad0:	687b      	ldr	r3, [r7, #4]
90005ad2:	681b      	ldr	r3, [r3, #0]
90005ad4:	685a      	ldr	r2, [r3, #4]
90005ad6:	687b      	ldr	r3, [r7, #4]
90005ad8:	681b      	ldr	r3, [r3, #0]
90005ada:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
90005ade:	605a      	str	r2, [r3, #4]
90005ae0:	e007      	b.n	90005af2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
90005ae2:	687b      	ldr	r3, [r7, #4]
90005ae4:	681b      	ldr	r3, [r3, #0]
90005ae6:	685a      	ldr	r2, [r3, #4]
90005ae8:	687b      	ldr	r3, [r7, #4]
90005aea:	681b      	ldr	r3, [r3, #0]
90005aec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
90005af0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005af2:	687b      	ldr	r3, [r7, #4]
90005af4:	681b      	ldr	r3, [r3, #0]
90005af6:	6859      	ldr	r1, [r3, #4]
90005af8:	687b      	ldr	r3, [r7, #4]
90005afa:	681a      	ldr	r2, [r3, #0]
90005afc:	4b1d      	ldr	r3, [pc, #116]	@ (90005b74 <HAL_I2C_Init+0x134>)
90005afe:	430b      	orrs	r3, r1
90005b00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005b02:	687b      	ldr	r3, [r7, #4]
90005b04:	681b      	ldr	r3, [r3, #0]
90005b06:	68da      	ldr	r2, [r3, #12]
90005b08:	687b      	ldr	r3, [r7, #4]
90005b0a:	681b      	ldr	r3, [r3, #0]
90005b0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
90005b10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005b12:	687b      	ldr	r3, [r7, #4]
90005b14:	691a      	ldr	r2, [r3, #16]
90005b16:	687b      	ldr	r3, [r7, #4]
90005b18:	695b      	ldr	r3, [r3, #20]
90005b1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90005b1e:	687b      	ldr	r3, [r7, #4]
90005b20:	699b      	ldr	r3, [r3, #24]
90005b22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90005b24:	687b      	ldr	r3, [r7, #4]
90005b26:	681b      	ldr	r3, [r3, #0]
90005b28:	430a      	orrs	r2, r1
90005b2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90005b2c:	687b      	ldr	r3, [r7, #4]
90005b2e:	69d9      	ldr	r1, [r3, #28]
90005b30:	687b      	ldr	r3, [r7, #4]
90005b32:	6a1a      	ldr	r2, [r3, #32]
90005b34:	687b      	ldr	r3, [r7, #4]
90005b36:	681b      	ldr	r3, [r3, #0]
90005b38:	430a      	orrs	r2, r1
90005b3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90005b3c:	687b      	ldr	r3, [r7, #4]
90005b3e:	681b      	ldr	r3, [r3, #0]
90005b40:	681a      	ldr	r2, [r3, #0]
90005b42:	687b      	ldr	r3, [r7, #4]
90005b44:	681b      	ldr	r3, [r3, #0]
90005b46:	f042 0201 	orr.w	r2, r2, #1
90005b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005b4c:	687b      	ldr	r3, [r7, #4]
90005b4e:	2200      	movs	r2, #0
90005b50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90005b52:	687b      	ldr	r3, [r7, #4]
90005b54:	2220      	movs	r2, #32
90005b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005b5a:	687b      	ldr	r3, [r7, #4]
90005b5c:	2200      	movs	r2, #0
90005b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005b60:	687b      	ldr	r3, [r7, #4]
90005b62:	2200      	movs	r2, #0
90005b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
90005b68:	2300      	movs	r3, #0
}
90005b6a:	4618      	mov	r0, r3
90005b6c:	3708      	adds	r7, #8
90005b6e:	46bd      	mov	sp, r7
90005b70:	bd80      	pop	{r7, pc}
90005b72:	bf00      	nop
90005b74:	02008000 	.word	0x02008000

90005b78 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
90005b78:	b480      	push	{r7}
90005b7a:	b083      	sub	sp, #12
90005b7c:	af00      	add	r7, sp, #0
90005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005b80:	bf00      	nop
90005b82:	370c      	adds	r7, #12
90005b84:	46bd      	mov	sp, r7
90005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
90005b8a:	4770      	bx	lr

90005b8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005b8c:	b580      	push	{r7, lr}
90005b8e:	b088      	sub	sp, #32
90005b90:	af02      	add	r7, sp, #8
90005b92:	60f8      	str	r0, [r7, #12]
90005b94:	4608      	mov	r0, r1
90005b96:	4611      	mov	r1, r2
90005b98:	461a      	mov	r2, r3
90005b9a:	4603      	mov	r3, r0
90005b9c:	817b      	strh	r3, [r7, #10]
90005b9e:	460b      	mov	r3, r1
90005ba0:	813b      	strh	r3, [r7, #8]
90005ba2:	4613      	mov	r3, r2
90005ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005ba6:	68fb      	ldr	r3, [r7, #12]
90005ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005bac:	b2db      	uxtb	r3, r3
90005bae:	2b20      	cmp	r3, #32
90005bb0:	f040 80fd 	bne.w	90005dae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005bb4:	6a3b      	ldr	r3, [r7, #32]
90005bb6:	2b00      	cmp	r3, #0
90005bb8:	d002      	beq.n	90005bc0 <HAL_I2C_Mem_Read+0x34>
90005bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
90005bbc:	2b00      	cmp	r3, #0
90005bbe:	d105      	bne.n	90005bcc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005bc0:	68fb      	ldr	r3, [r7, #12]
90005bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
90005bc6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
90005bc8:	2301      	movs	r3, #1
90005bca:	e0f1      	b.n	90005db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005bcc:	68fb      	ldr	r3, [r7, #12]
90005bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90005bd2:	2b01      	cmp	r3, #1
90005bd4:	d101      	bne.n	90005bda <HAL_I2C_Mem_Read+0x4e>
90005bd6:	2302      	movs	r3, #2
90005bd8:	e0ea      	b.n	90005db0 <HAL_I2C_Mem_Read+0x224>
90005bda:	68fb      	ldr	r3, [r7, #12]
90005bdc:	2201      	movs	r2, #1
90005bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005be2:	f7fd fafb 	bl	900031dc <HAL_GetTick>
90005be6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005be8:	697b      	ldr	r3, [r7, #20]
90005bea:	9300      	str	r3, [sp, #0]
90005bec:	2319      	movs	r3, #25
90005bee:	2201      	movs	r2, #1
90005bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
90005bf4:	68f8      	ldr	r0, [r7, #12]
90005bf6:	f000 f975 	bl	90005ee4 <I2C_WaitOnFlagUntilTimeout>
90005bfa:	4603      	mov	r3, r0
90005bfc:	2b00      	cmp	r3, #0
90005bfe:	d001      	beq.n	90005c04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005c00:	2301      	movs	r3, #1
90005c02:	e0d5      	b.n	90005db0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005c04:	68fb      	ldr	r3, [r7, #12]
90005c06:	2222      	movs	r2, #34	@ 0x22
90005c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005c0c:	68fb      	ldr	r3, [r7, #12]
90005c0e:	2240      	movs	r2, #64	@ 0x40
90005c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005c14:	68fb      	ldr	r3, [r7, #12]
90005c16:	2200      	movs	r2, #0
90005c18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005c1a:	68fb      	ldr	r3, [r7, #12]
90005c1c:	6a3a      	ldr	r2, [r7, #32]
90005c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
90005c20:	68fb      	ldr	r3, [r7, #12]
90005c22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
90005c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
90005c26:	68fb      	ldr	r3, [r7, #12]
90005c28:	2200      	movs	r2, #0
90005c2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005c2c:	88f8      	ldrh	r0, [r7, #6]
90005c2e:	893a      	ldrh	r2, [r7, #8]
90005c30:	8979      	ldrh	r1, [r7, #10]
90005c32:	697b      	ldr	r3, [r7, #20]
90005c34:	9301      	str	r3, [sp, #4]
90005c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005c38:	9300      	str	r3, [sp, #0]
90005c3a:	4603      	mov	r3, r0
90005c3c:	68f8      	ldr	r0, [r7, #12]
90005c3e:	f000 f8d9 	bl	90005df4 <I2C_RequestMemoryRead>
90005c42:	4603      	mov	r3, r0
90005c44:	2b00      	cmp	r3, #0
90005c46:	d005      	beq.n	90005c54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005c48:	68fb      	ldr	r3, [r7, #12]
90005c4a:	2200      	movs	r2, #0
90005c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
90005c50:	2301      	movs	r3, #1
90005c52:	e0ad      	b.n	90005db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005c54:	68fb      	ldr	r3, [r7, #12]
90005c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005c58:	b29b      	uxth	r3, r3
90005c5a:	2bff      	cmp	r3, #255	@ 0xff
90005c5c:	d90e      	bls.n	90005c7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005c5e:	68fb      	ldr	r3, [r7, #12]
90005c60:	22ff      	movs	r2, #255	@ 0xff
90005c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005c64:	68fb      	ldr	r3, [r7, #12]
90005c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005c68:	b2da      	uxtb	r2, r3
90005c6a:	8979      	ldrh	r1, [r7, #10]
90005c6c:	4b52      	ldr	r3, [pc, #328]	@ (90005db8 <HAL_I2C_Mem_Read+0x22c>)
90005c6e:	9300      	str	r3, [sp, #0]
90005c70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005c74:	68f8      	ldr	r0, [r7, #12]
90005c76:	f000 faf9 	bl	9000626c <I2C_TransferConfig>
90005c7a:	e00f      	b.n	90005c9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005c7c:	68fb      	ldr	r3, [r7, #12]
90005c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005c80:	b29a      	uxth	r2, r3
90005c82:	68fb      	ldr	r3, [r7, #12]
90005c84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005c86:	68fb      	ldr	r3, [r7, #12]
90005c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005c8a:	b2da      	uxtb	r2, r3
90005c8c:	8979      	ldrh	r1, [r7, #10]
90005c8e:	4b4a      	ldr	r3, [pc, #296]	@ (90005db8 <HAL_I2C_Mem_Read+0x22c>)
90005c90:	9300      	str	r3, [sp, #0]
90005c92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005c96:	68f8      	ldr	r0, [r7, #12]
90005c98:	f000 fae8 	bl	9000626c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005c9c:	697b      	ldr	r3, [r7, #20]
90005c9e:	9300      	str	r3, [sp, #0]
90005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005ca2:	2200      	movs	r2, #0
90005ca4:	2104      	movs	r1, #4
90005ca6:	68f8      	ldr	r0, [r7, #12]
90005ca8:	f000 f91c 	bl	90005ee4 <I2C_WaitOnFlagUntilTimeout>
90005cac:	4603      	mov	r3, r0
90005cae:	2b00      	cmp	r3, #0
90005cb0:	d001      	beq.n	90005cb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005cb2:	2301      	movs	r3, #1
90005cb4:	e07c      	b.n	90005db0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005cb6:	68fb      	ldr	r3, [r7, #12]
90005cb8:	681b      	ldr	r3, [r3, #0]
90005cba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90005cbc:	68fb      	ldr	r3, [r7, #12]
90005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005cc0:	b2d2      	uxtb	r2, r2
90005cc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005cc4:	68fb      	ldr	r3, [r7, #12]
90005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90005cc8:	1c5a      	adds	r2, r3, #1
90005cca:	68fb      	ldr	r3, [r7, #12]
90005ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
90005cce:	68fb      	ldr	r3, [r7, #12]
90005cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005cd2:	3b01      	subs	r3, #1
90005cd4:	b29a      	uxth	r2, r3
90005cd6:	68fb      	ldr	r3, [r7, #12]
90005cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
90005cda:	68fb      	ldr	r3, [r7, #12]
90005cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005cde:	b29b      	uxth	r3, r3
90005ce0:	3b01      	subs	r3, #1
90005ce2:	b29a      	uxth	r2, r3
90005ce4:	68fb      	ldr	r3, [r7, #12]
90005ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005ce8:	68fb      	ldr	r3, [r7, #12]
90005cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005cec:	b29b      	uxth	r3, r3
90005cee:	2b00      	cmp	r3, #0
90005cf0:	d034      	beq.n	90005d5c <HAL_I2C_Mem_Read+0x1d0>
90005cf2:	68fb      	ldr	r3, [r7, #12]
90005cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005cf6:	2b00      	cmp	r3, #0
90005cf8:	d130      	bne.n	90005d5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005cfa:	697b      	ldr	r3, [r7, #20]
90005cfc:	9300      	str	r3, [sp, #0]
90005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90005d00:	2200      	movs	r2, #0
90005d02:	2180      	movs	r1, #128	@ 0x80
90005d04:	68f8      	ldr	r0, [r7, #12]
90005d06:	f000 f8ed 	bl	90005ee4 <I2C_WaitOnFlagUntilTimeout>
90005d0a:	4603      	mov	r3, r0
90005d0c:	2b00      	cmp	r3, #0
90005d0e:	d001      	beq.n	90005d14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005d10:	2301      	movs	r3, #1
90005d12:	e04d      	b.n	90005db0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005d14:	68fb      	ldr	r3, [r7, #12]
90005d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d18:	b29b      	uxth	r3, r3
90005d1a:	2bff      	cmp	r3, #255	@ 0xff
90005d1c:	d90e      	bls.n	90005d3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005d1e:	68fb      	ldr	r3, [r7, #12]
90005d20:	22ff      	movs	r2, #255	@ 0xff
90005d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005d24:	68fb      	ldr	r3, [r7, #12]
90005d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d28:	b2da      	uxtb	r2, r3
90005d2a:	8979      	ldrh	r1, [r7, #10]
90005d2c:	2300      	movs	r3, #0
90005d2e:	9300      	str	r3, [sp, #0]
90005d30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
90005d34:	68f8      	ldr	r0, [r7, #12]
90005d36:	f000 fa99 	bl	9000626c <I2C_TransferConfig>
90005d3a:	e00f      	b.n	90005d5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005d3c:	68fb      	ldr	r3, [r7, #12]
90005d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d40:	b29a      	uxth	r2, r3
90005d42:	68fb      	ldr	r3, [r7, #12]
90005d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005d46:	68fb      	ldr	r3, [r7, #12]
90005d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
90005d4a:	b2da      	uxtb	r2, r3
90005d4c:	8979      	ldrh	r1, [r7, #10]
90005d4e:	2300      	movs	r3, #0
90005d50:	9300      	str	r3, [sp, #0]
90005d52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
90005d56:	68f8      	ldr	r0, [r7, #12]
90005d58:	f000 fa88 	bl	9000626c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005d5c:	68fb      	ldr	r3, [r7, #12]
90005d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
90005d60:	b29b      	uxth	r3, r3
90005d62:	2b00      	cmp	r3, #0
90005d64:	d19a      	bne.n	90005c9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005d66:	697a      	ldr	r2, [r7, #20]
90005d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
90005d6a:	68f8      	ldr	r0, [r7, #12]
90005d6c:	f000 f95a 	bl	90006024 <I2C_WaitOnSTOPFlagUntilTimeout>
90005d70:	4603      	mov	r3, r0
90005d72:	2b00      	cmp	r3, #0
90005d74:	d001      	beq.n	90005d7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005d76:	2301      	movs	r3, #1
90005d78:	e01a      	b.n	90005db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005d7a:	68fb      	ldr	r3, [r7, #12]
90005d7c:	681b      	ldr	r3, [r3, #0]
90005d7e:	2220      	movs	r2, #32
90005d80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005d82:	68fb      	ldr	r3, [r7, #12]
90005d84:	681b      	ldr	r3, [r3, #0]
90005d86:	6859      	ldr	r1, [r3, #4]
90005d88:	68fb      	ldr	r3, [r7, #12]
90005d8a:	681a      	ldr	r2, [r3, #0]
90005d8c:	4b0b      	ldr	r3, [pc, #44]	@ (90005dbc <HAL_I2C_Mem_Read+0x230>)
90005d8e:	400b      	ands	r3, r1
90005d90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005d92:	68fb      	ldr	r3, [r7, #12]
90005d94:	2220      	movs	r2, #32
90005d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005d9a:	68fb      	ldr	r3, [r7, #12]
90005d9c:	2200      	movs	r2, #0
90005d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005da2:	68fb      	ldr	r3, [r7, #12]
90005da4:	2200      	movs	r2, #0
90005da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90005daa:	2300      	movs	r3, #0
90005dac:	e000      	b.n	90005db0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005dae:	2302      	movs	r3, #2
  }
}
90005db0:	4618      	mov	r0, r3
90005db2:	3718      	adds	r7, #24
90005db4:	46bd      	mov	sp, r7
90005db6:	bd80      	pop	{r7, pc}
90005db8:	80002400 	.word	0x80002400
90005dbc:	fe00e800 	.word	0xfe00e800

90005dc0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
90005dc0:	b480      	push	{r7}
90005dc2:	b083      	sub	sp, #12
90005dc4:	af00      	add	r7, sp, #0
90005dc6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005dc8:	687b      	ldr	r3, [r7, #4]
90005dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90005dce:	b2db      	uxtb	r3, r3
}
90005dd0:	4618      	mov	r0, r3
90005dd2:	370c      	adds	r7, #12
90005dd4:	46bd      	mov	sp, r7
90005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
90005dda:	4770      	bx	lr

90005ddc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
90005ddc:	b480      	push	{r7}
90005dde:	b083      	sub	sp, #12
90005de0:	af00      	add	r7, sp, #0
90005de2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005de4:	687b      	ldr	r3, [r7, #4]
90005de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
90005de8:	4618      	mov	r0, r3
90005dea:	370c      	adds	r7, #12
90005dec:	46bd      	mov	sp, r7
90005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
90005df2:	4770      	bx	lr

90005df4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005df4:	b580      	push	{r7, lr}
90005df6:	b086      	sub	sp, #24
90005df8:	af02      	add	r7, sp, #8
90005dfa:	60f8      	str	r0, [r7, #12]
90005dfc:	4608      	mov	r0, r1
90005dfe:	4611      	mov	r1, r2
90005e00:	461a      	mov	r2, r3
90005e02:	4603      	mov	r3, r0
90005e04:	817b      	strh	r3, [r7, #10]
90005e06:	460b      	mov	r3, r1
90005e08:	813b      	strh	r3, [r7, #8]
90005e0a:	4613      	mov	r3, r2
90005e0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005e0e:	88fb      	ldrh	r3, [r7, #6]
90005e10:	b2da      	uxtb	r2, r3
90005e12:	8979      	ldrh	r1, [r7, #10]
90005e14:	4b20      	ldr	r3, [pc, #128]	@ (90005e98 <I2C_RequestMemoryRead+0xa4>)
90005e16:	9300      	str	r3, [sp, #0]
90005e18:	2300      	movs	r3, #0
90005e1a:	68f8      	ldr	r0, [r7, #12]
90005e1c:	f000 fa26 	bl	9000626c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005e20:	69fa      	ldr	r2, [r7, #28]
90005e22:	69b9      	ldr	r1, [r7, #24]
90005e24:	68f8      	ldr	r0, [r7, #12]
90005e26:	f000 f8b6 	bl	90005f96 <I2C_WaitOnTXISFlagUntilTimeout>
90005e2a:	4603      	mov	r3, r0
90005e2c:	2b00      	cmp	r3, #0
90005e2e:	d001      	beq.n	90005e34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005e30:	2301      	movs	r3, #1
90005e32:	e02c      	b.n	90005e8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005e34:	88fb      	ldrh	r3, [r7, #6]
90005e36:	2b01      	cmp	r3, #1
90005e38:	d105      	bne.n	90005e46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005e3a:	893b      	ldrh	r3, [r7, #8]
90005e3c:	b2da      	uxtb	r2, r3
90005e3e:	68fb      	ldr	r3, [r7, #12]
90005e40:	681b      	ldr	r3, [r3, #0]
90005e42:	629a      	str	r2, [r3, #40]	@ 0x28
90005e44:	e015      	b.n	90005e72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005e46:	893b      	ldrh	r3, [r7, #8]
90005e48:	0a1b      	lsrs	r3, r3, #8
90005e4a:	b29b      	uxth	r3, r3
90005e4c:	b2da      	uxtb	r2, r3
90005e4e:	68fb      	ldr	r3, [r7, #12]
90005e50:	681b      	ldr	r3, [r3, #0]
90005e52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005e54:	69fa      	ldr	r2, [r7, #28]
90005e56:	69b9      	ldr	r1, [r7, #24]
90005e58:	68f8      	ldr	r0, [r7, #12]
90005e5a:	f000 f89c 	bl	90005f96 <I2C_WaitOnTXISFlagUntilTimeout>
90005e5e:	4603      	mov	r3, r0
90005e60:	2b00      	cmp	r3, #0
90005e62:	d001      	beq.n	90005e68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005e64:	2301      	movs	r3, #1
90005e66:	e012      	b.n	90005e8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005e68:	893b      	ldrh	r3, [r7, #8]
90005e6a:	b2da      	uxtb	r2, r3
90005e6c:	68fb      	ldr	r3, [r7, #12]
90005e6e:	681b      	ldr	r3, [r3, #0]
90005e70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005e72:	69fb      	ldr	r3, [r7, #28]
90005e74:	9300      	str	r3, [sp, #0]
90005e76:	69bb      	ldr	r3, [r7, #24]
90005e78:	2200      	movs	r2, #0
90005e7a:	2140      	movs	r1, #64	@ 0x40
90005e7c:	68f8      	ldr	r0, [r7, #12]
90005e7e:	f000 f831 	bl	90005ee4 <I2C_WaitOnFlagUntilTimeout>
90005e82:	4603      	mov	r3, r0
90005e84:	2b00      	cmp	r3, #0
90005e86:	d001      	beq.n	90005e8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005e88:	2301      	movs	r3, #1
90005e8a:	e000      	b.n	90005e8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005e8c:	2300      	movs	r3, #0
}
90005e8e:	4618      	mov	r0, r3
90005e90:	3710      	adds	r7, #16
90005e92:	46bd      	mov	sp, r7
90005e94:	bd80      	pop	{r7, pc}
90005e96:	bf00      	nop
90005e98:	80002000 	.word	0x80002000

90005e9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005e9c:	b480      	push	{r7}
90005e9e:	b083      	sub	sp, #12
90005ea0:	af00      	add	r7, sp, #0
90005ea2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005ea4:	687b      	ldr	r3, [r7, #4]
90005ea6:	681b      	ldr	r3, [r3, #0]
90005ea8:	699b      	ldr	r3, [r3, #24]
90005eaa:	f003 0302 	and.w	r3, r3, #2
90005eae:	2b02      	cmp	r3, #2
90005eb0:	d103      	bne.n	90005eba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005eb2:	687b      	ldr	r3, [r7, #4]
90005eb4:	681b      	ldr	r3, [r3, #0]
90005eb6:	2200      	movs	r2, #0
90005eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005eba:	687b      	ldr	r3, [r7, #4]
90005ebc:	681b      	ldr	r3, [r3, #0]
90005ebe:	699b      	ldr	r3, [r3, #24]
90005ec0:	f003 0301 	and.w	r3, r3, #1
90005ec4:	2b01      	cmp	r3, #1
90005ec6:	d007      	beq.n	90005ed8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005ec8:	687b      	ldr	r3, [r7, #4]
90005eca:	681b      	ldr	r3, [r3, #0]
90005ecc:	699a      	ldr	r2, [r3, #24]
90005ece:	687b      	ldr	r3, [r7, #4]
90005ed0:	681b      	ldr	r3, [r3, #0]
90005ed2:	f042 0201 	orr.w	r2, r2, #1
90005ed6:	619a      	str	r2, [r3, #24]
  }
}
90005ed8:	bf00      	nop
90005eda:	370c      	adds	r7, #12
90005edc:	46bd      	mov	sp, r7
90005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
90005ee2:	4770      	bx	lr

90005ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005ee4:	b580      	push	{r7, lr}
90005ee6:	b084      	sub	sp, #16
90005ee8:	af00      	add	r7, sp, #0
90005eea:	60f8      	str	r0, [r7, #12]
90005eec:	60b9      	str	r1, [r7, #8]
90005eee:	603b      	str	r3, [r7, #0]
90005ef0:	4613      	mov	r3, r2
90005ef2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005ef4:	e03b      	b.n	90005f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005ef6:	69ba      	ldr	r2, [r7, #24]
90005ef8:	6839      	ldr	r1, [r7, #0]
90005efa:	68f8      	ldr	r0, [r7, #12]
90005efc:	f000 f8d6 	bl	900060ac <I2C_IsErrorOccurred>
90005f00:	4603      	mov	r3, r0
90005f02:	2b00      	cmp	r3, #0
90005f04:	d001      	beq.n	90005f0a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
90005f06:	2301      	movs	r3, #1
90005f08:	e041      	b.n	90005f8e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005f0a:	683b      	ldr	r3, [r7, #0]
90005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
90005f10:	d02d      	beq.n	90005f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005f12:	f7fd f963 	bl	900031dc <HAL_GetTick>
90005f16:	4602      	mov	r2, r0
90005f18:	69bb      	ldr	r3, [r7, #24]
90005f1a:	1ad3      	subs	r3, r2, r3
90005f1c:	683a      	ldr	r2, [r7, #0]
90005f1e:	429a      	cmp	r2, r3
90005f20:	d302      	bcc.n	90005f28 <I2C_WaitOnFlagUntilTimeout+0x44>
90005f22:	683b      	ldr	r3, [r7, #0]
90005f24:	2b00      	cmp	r3, #0
90005f26:	d122      	bne.n	90005f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90005f28:	68fb      	ldr	r3, [r7, #12]
90005f2a:	681b      	ldr	r3, [r3, #0]
90005f2c:	699a      	ldr	r2, [r3, #24]
90005f2e:	68bb      	ldr	r3, [r7, #8]
90005f30:	4013      	ands	r3, r2
90005f32:	68ba      	ldr	r2, [r7, #8]
90005f34:	429a      	cmp	r2, r3
90005f36:	bf0c      	ite	eq
90005f38:	2301      	moveq	r3, #1
90005f3a:	2300      	movne	r3, #0
90005f3c:	b2db      	uxtb	r3, r3
90005f3e:	461a      	mov	r2, r3
90005f40:	79fb      	ldrb	r3, [r7, #7]
90005f42:	429a      	cmp	r2, r3
90005f44:	d113      	bne.n	90005f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005f46:	68fb      	ldr	r3, [r7, #12]
90005f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005f4a:	f043 0220 	orr.w	r2, r3, #32
90005f4e:	68fb      	ldr	r3, [r7, #12]
90005f50:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005f52:	68fb      	ldr	r3, [r7, #12]
90005f54:	2220      	movs	r2, #32
90005f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005f5a:	68fb      	ldr	r3, [r7, #12]
90005f5c:	2200      	movs	r2, #0
90005f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005f62:	68fb      	ldr	r3, [r7, #12]
90005f64:	2200      	movs	r2, #0
90005f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
90005f6a:	2301      	movs	r3, #1
90005f6c:	e00f      	b.n	90005f8e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005f6e:	68fb      	ldr	r3, [r7, #12]
90005f70:	681b      	ldr	r3, [r3, #0]
90005f72:	699a      	ldr	r2, [r3, #24]
90005f74:	68bb      	ldr	r3, [r7, #8]
90005f76:	4013      	ands	r3, r2
90005f78:	68ba      	ldr	r2, [r7, #8]
90005f7a:	429a      	cmp	r2, r3
90005f7c:	bf0c      	ite	eq
90005f7e:	2301      	moveq	r3, #1
90005f80:	2300      	movne	r3, #0
90005f82:	b2db      	uxtb	r3, r3
90005f84:	461a      	mov	r2, r3
90005f86:	79fb      	ldrb	r3, [r7, #7]
90005f88:	429a      	cmp	r2, r3
90005f8a:	d0b4      	beq.n	90005ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90005f8c:	2300      	movs	r3, #0
}
90005f8e:	4618      	mov	r0, r3
90005f90:	3710      	adds	r7, #16
90005f92:	46bd      	mov	sp, r7
90005f94:	bd80      	pop	{r7, pc}

90005f96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005f96:	b580      	push	{r7, lr}
90005f98:	b084      	sub	sp, #16
90005f9a:	af00      	add	r7, sp, #0
90005f9c:	60f8      	str	r0, [r7, #12]
90005f9e:	60b9      	str	r1, [r7, #8]
90005fa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005fa2:	e033      	b.n	9000600c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005fa4:	687a      	ldr	r2, [r7, #4]
90005fa6:	68b9      	ldr	r1, [r7, #8]
90005fa8:	68f8      	ldr	r0, [r7, #12]
90005faa:	f000 f87f 	bl	900060ac <I2C_IsErrorOccurred>
90005fae:	4603      	mov	r3, r0
90005fb0:	2b00      	cmp	r3, #0
90005fb2:	d001      	beq.n	90005fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005fb4:	2301      	movs	r3, #1
90005fb6:	e031      	b.n	9000601c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005fb8:	68bb      	ldr	r3, [r7, #8]
90005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
90005fbe:	d025      	beq.n	9000600c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005fc0:	f7fd f90c 	bl	900031dc <HAL_GetTick>
90005fc4:	4602      	mov	r2, r0
90005fc6:	687b      	ldr	r3, [r7, #4]
90005fc8:	1ad3      	subs	r3, r2, r3
90005fca:	68ba      	ldr	r2, [r7, #8]
90005fcc:	429a      	cmp	r2, r3
90005fce:	d302      	bcc.n	90005fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90005fd0:	68bb      	ldr	r3, [r7, #8]
90005fd2:	2b00      	cmp	r3, #0
90005fd4:	d11a      	bne.n	9000600c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90005fd6:	68fb      	ldr	r3, [r7, #12]
90005fd8:	681b      	ldr	r3, [r3, #0]
90005fda:	699b      	ldr	r3, [r3, #24]
90005fdc:	f003 0302 	and.w	r3, r3, #2
90005fe0:	2b02      	cmp	r3, #2
90005fe2:	d013      	beq.n	9000600c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005fe4:	68fb      	ldr	r3, [r7, #12]
90005fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
90005fe8:	f043 0220 	orr.w	r2, r3, #32
90005fec:	68fb      	ldr	r3, [r7, #12]
90005fee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005ff0:	68fb      	ldr	r3, [r7, #12]
90005ff2:	2220      	movs	r2, #32
90005ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005ff8:	68fb      	ldr	r3, [r7, #12]
90005ffa:	2200      	movs	r2, #0
90005ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90006000:	68fb      	ldr	r3, [r7, #12]
90006002:	2200      	movs	r2, #0
90006004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
90006008:	2301      	movs	r3, #1
9000600a:	e007      	b.n	9000601c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000600c:	68fb      	ldr	r3, [r7, #12]
9000600e:	681b      	ldr	r3, [r3, #0]
90006010:	699b      	ldr	r3, [r3, #24]
90006012:	f003 0302 	and.w	r3, r3, #2
90006016:	2b02      	cmp	r3, #2
90006018:	d1c4      	bne.n	90005fa4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
9000601a:	2300      	movs	r3, #0
}
9000601c:	4618      	mov	r0, r3
9000601e:	3710      	adds	r7, #16
90006020:	46bd      	mov	sp, r7
90006022:	bd80      	pop	{r7, pc}

90006024 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90006024:	b580      	push	{r7, lr}
90006026:	b084      	sub	sp, #16
90006028:	af00      	add	r7, sp, #0
9000602a:	60f8      	str	r0, [r7, #12]
9000602c:	60b9      	str	r1, [r7, #8]
9000602e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006030:	e02f      	b.n	90006092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006032:	687a      	ldr	r2, [r7, #4]
90006034:	68b9      	ldr	r1, [r7, #8]
90006036:	68f8      	ldr	r0, [r7, #12]
90006038:	f000 f838 	bl	900060ac <I2C_IsErrorOccurred>
9000603c:	4603      	mov	r3, r0
9000603e:	2b00      	cmp	r3, #0
90006040:	d001      	beq.n	90006046 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006042:	2301      	movs	r3, #1
90006044:	e02d      	b.n	900060a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90006046:	f7fd f8c9 	bl	900031dc <HAL_GetTick>
9000604a:	4602      	mov	r2, r0
9000604c:	687b      	ldr	r3, [r7, #4]
9000604e:	1ad3      	subs	r3, r2, r3
90006050:	68ba      	ldr	r2, [r7, #8]
90006052:	429a      	cmp	r2, r3
90006054:	d302      	bcc.n	9000605c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90006056:	68bb      	ldr	r3, [r7, #8]
90006058:	2b00      	cmp	r3, #0
9000605a:	d11a      	bne.n	90006092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000605c:	68fb      	ldr	r3, [r7, #12]
9000605e:	681b      	ldr	r3, [r3, #0]
90006060:	699b      	ldr	r3, [r3, #24]
90006062:	f003 0320 	and.w	r3, r3, #32
90006066:	2b20      	cmp	r3, #32
90006068:	d013      	beq.n	90006092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000606a:	68fb      	ldr	r3, [r7, #12]
9000606c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000606e:	f043 0220 	orr.w	r2, r3, #32
90006072:	68fb      	ldr	r3, [r7, #12]
90006074:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90006076:	68fb      	ldr	r3, [r7, #12]
90006078:	2220      	movs	r2, #32
9000607a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
9000607e:	68fb      	ldr	r3, [r7, #12]
90006080:	2200      	movs	r2, #0
90006082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90006086:	68fb      	ldr	r3, [r7, #12]
90006088:	2200      	movs	r2, #0
9000608a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
9000608e:	2301      	movs	r3, #1
90006090:	e007      	b.n	900060a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006092:	68fb      	ldr	r3, [r7, #12]
90006094:	681b      	ldr	r3, [r3, #0]
90006096:	699b      	ldr	r3, [r3, #24]
90006098:	f003 0320 	and.w	r3, r3, #32
9000609c:	2b20      	cmp	r3, #32
9000609e:	d1c8      	bne.n	90006032 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
900060a0:	2300      	movs	r3, #0
}
900060a2:	4618      	mov	r0, r3
900060a4:	3710      	adds	r7, #16
900060a6:	46bd      	mov	sp, r7
900060a8:	bd80      	pop	{r7, pc}
	...

900060ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
900060ac:	b580      	push	{r7, lr}
900060ae:	b08a      	sub	sp, #40	@ 0x28
900060b0:	af00      	add	r7, sp, #0
900060b2:	60f8      	str	r0, [r7, #12]
900060b4:	60b9      	str	r1, [r7, #8]
900060b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900060b8:	2300      	movs	r3, #0
900060ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
900060be:	68fb      	ldr	r3, [r7, #12]
900060c0:	681b      	ldr	r3, [r3, #0]
900060c2:	699b      	ldr	r3, [r3, #24]
900060c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
900060c6:	2300      	movs	r3, #0
900060c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
900060ca:	687b      	ldr	r3, [r7, #4]
900060cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900060ce:	69bb      	ldr	r3, [r7, #24]
900060d0:	f003 0310 	and.w	r3, r3, #16
900060d4:	2b00      	cmp	r3, #0
900060d6:	d068      	beq.n	900061aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900060d8:	68fb      	ldr	r3, [r7, #12]
900060da:	681b      	ldr	r3, [r3, #0]
900060dc:	2210      	movs	r2, #16
900060de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900060e0:	e049      	b.n	90006176 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900060e2:	68bb      	ldr	r3, [r7, #8]
900060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
900060e8:	d045      	beq.n	90006176 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900060ea:	f7fd f877 	bl	900031dc <HAL_GetTick>
900060ee:	4602      	mov	r2, r0
900060f0:	69fb      	ldr	r3, [r7, #28]
900060f2:	1ad3      	subs	r3, r2, r3
900060f4:	68ba      	ldr	r2, [r7, #8]
900060f6:	429a      	cmp	r2, r3
900060f8:	d302      	bcc.n	90006100 <I2C_IsErrorOccurred+0x54>
900060fa:	68bb      	ldr	r3, [r7, #8]
900060fc:	2b00      	cmp	r3, #0
900060fe:	d13a      	bne.n	90006176 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90006100:	68fb      	ldr	r3, [r7, #12]
90006102:	681b      	ldr	r3, [r3, #0]
90006104:	685b      	ldr	r3, [r3, #4]
90006106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
9000610a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
9000610c:	68fb      	ldr	r3, [r7, #12]
9000610e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
90006112:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90006114:	68fb      	ldr	r3, [r7, #12]
90006116:	681b      	ldr	r3, [r3, #0]
90006118:	699b      	ldr	r3, [r3, #24]
9000611a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
9000611e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90006122:	d121      	bne.n	90006168 <I2C_IsErrorOccurred+0xbc>
90006124:	697b      	ldr	r3, [r7, #20]
90006126:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000612a:	d01d      	beq.n	90006168 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
9000612c:	7cfb      	ldrb	r3, [r7, #19]
9000612e:	2b20      	cmp	r3, #32
90006130:	d01a      	beq.n	90006168 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006132:	68fb      	ldr	r3, [r7, #12]
90006134:	681b      	ldr	r3, [r3, #0]
90006136:	685a      	ldr	r2, [r3, #4]
90006138:	68fb      	ldr	r3, [r7, #12]
9000613a:	681b      	ldr	r3, [r3, #0]
9000613c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
90006140:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006142:	f7fd f84b 	bl	900031dc <HAL_GetTick>
90006146:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006148:	e00e      	b.n	90006168 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000614a:	f7fd f847 	bl	900031dc <HAL_GetTick>
9000614e:	4602      	mov	r2, r0
90006150:	69fb      	ldr	r3, [r7, #28]
90006152:	1ad3      	subs	r3, r2, r3
90006154:	2b19      	cmp	r3, #25
90006156:	d907      	bls.n	90006168 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90006158:	6a3b      	ldr	r3, [r7, #32]
9000615a:	f043 0320 	orr.w	r3, r3, #32
9000615e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006160:	2301      	movs	r3, #1
90006162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
90006166:	e006      	b.n	90006176 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006168:	68fb      	ldr	r3, [r7, #12]
9000616a:	681b      	ldr	r3, [r3, #0]
9000616c:	699b      	ldr	r3, [r3, #24]
9000616e:	f003 0320 	and.w	r3, r3, #32
90006172:	2b20      	cmp	r3, #32
90006174:	d1e9      	bne.n	9000614a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90006176:	68fb      	ldr	r3, [r7, #12]
90006178:	681b      	ldr	r3, [r3, #0]
9000617a:	699b      	ldr	r3, [r3, #24]
9000617c:	f003 0320 	and.w	r3, r3, #32
90006180:	2b20      	cmp	r3, #32
90006182:	d003      	beq.n	9000618c <I2C_IsErrorOccurred+0xe0>
90006184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006188:	2b00      	cmp	r3, #0
9000618a:	d0aa      	beq.n	900060e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
9000618c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
90006190:	2b00      	cmp	r3, #0
90006192:	d103      	bne.n	9000619c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006194:	68fb      	ldr	r3, [r7, #12]
90006196:	681b      	ldr	r3, [r3, #0]
90006198:	2220      	movs	r2, #32
9000619a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
9000619c:	6a3b      	ldr	r3, [r7, #32]
9000619e:	f043 0304 	orr.w	r3, r3, #4
900061a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
900061a4:	2301      	movs	r3, #1
900061a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900061aa:	68fb      	ldr	r3, [r7, #12]
900061ac:	681b      	ldr	r3, [r3, #0]
900061ae:	699b      	ldr	r3, [r3, #24]
900061b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900061b2:	69bb      	ldr	r3, [r7, #24]
900061b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
900061b8:	2b00      	cmp	r3, #0
900061ba:	d00b      	beq.n	900061d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
900061bc:	6a3b      	ldr	r3, [r7, #32]
900061be:	f043 0301 	orr.w	r3, r3, #1
900061c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900061c4:	68fb      	ldr	r3, [r7, #12]
900061c6:	681b      	ldr	r3, [r3, #0]
900061c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
900061cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900061ce:	2301      	movs	r3, #1
900061d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900061d4:	69bb      	ldr	r3, [r7, #24]
900061d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
900061da:	2b00      	cmp	r3, #0
900061dc:	d00b      	beq.n	900061f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900061de:	6a3b      	ldr	r3, [r7, #32]
900061e0:	f043 0308 	orr.w	r3, r3, #8
900061e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900061e6:	68fb      	ldr	r3, [r7, #12]
900061e8:	681b      	ldr	r3, [r3, #0]
900061ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
900061ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900061f0:	2301      	movs	r3, #1
900061f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900061f6:	69bb      	ldr	r3, [r7, #24]
900061f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
900061fc:	2b00      	cmp	r3, #0
900061fe:	d00b      	beq.n	90006218 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90006200:	6a3b      	ldr	r3, [r7, #32]
90006202:	f043 0302 	orr.w	r3, r3, #2
90006206:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90006208:	68fb      	ldr	r3, [r7, #12]
9000620a:	681b      	ldr	r3, [r3, #0]
9000620c:	f44f 7200 	mov.w	r2, #512	@ 0x200
90006210:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006212:	2301      	movs	r3, #1
90006214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
90006218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
9000621c:	2b00      	cmp	r3, #0
9000621e:	d01c      	beq.n	9000625a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90006220:	68f8      	ldr	r0, [r7, #12]
90006222:	f7ff fe3b 	bl	90005e9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90006226:	68fb      	ldr	r3, [r7, #12]
90006228:	681b      	ldr	r3, [r3, #0]
9000622a:	6859      	ldr	r1, [r3, #4]
9000622c:	68fb      	ldr	r3, [r7, #12]
9000622e:	681a      	ldr	r2, [r3, #0]
90006230:	4b0d      	ldr	r3, [pc, #52]	@ (90006268 <I2C_IsErrorOccurred+0x1bc>)
90006232:	400b      	ands	r3, r1
90006234:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90006236:	68fb      	ldr	r3, [r7, #12]
90006238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000623a:	6a3b      	ldr	r3, [r7, #32]
9000623c:	431a      	orrs	r2, r3
9000623e:	68fb      	ldr	r3, [r7, #12]
90006240:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006242:	68fb      	ldr	r3, [r7, #12]
90006244:	2220      	movs	r2, #32
90006246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000624a:	68fb      	ldr	r3, [r7, #12]
9000624c:	2200      	movs	r2, #0
9000624e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006252:	68fb      	ldr	r3, [r7, #12]
90006254:	2200      	movs	r2, #0
90006256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
9000625a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
9000625e:	4618      	mov	r0, r3
90006260:	3728      	adds	r7, #40	@ 0x28
90006262:	46bd      	mov	sp, r7
90006264:	bd80      	pop	{r7, pc}
90006266:	bf00      	nop
90006268:	fe00e800 	.word	0xfe00e800

9000626c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
9000626c:	b480      	push	{r7}
9000626e:	b087      	sub	sp, #28
90006270:	af00      	add	r7, sp, #0
90006272:	60f8      	str	r0, [r7, #12]
90006274:	607b      	str	r3, [r7, #4]
90006276:	460b      	mov	r3, r1
90006278:	817b      	strh	r3, [r7, #10]
9000627a:	4613      	mov	r3, r2
9000627c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000627e:	897b      	ldrh	r3, [r7, #10]
90006280:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006284:	7a7b      	ldrb	r3, [r7, #9]
90006286:	041b      	lsls	r3, r3, #16
90006288:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000628c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000628e:	687b      	ldr	r3, [r7, #4]
90006290:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006292:	6a3b      	ldr	r3, [r7, #32]
90006294:	4313      	orrs	r3, r2
90006296:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000629a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
9000629c:	68fb      	ldr	r3, [r7, #12]
9000629e:	681b      	ldr	r3, [r3, #0]
900062a0:	685a      	ldr	r2, [r3, #4]
900062a2:	6a3b      	ldr	r3, [r7, #32]
900062a4:	0d5b      	lsrs	r3, r3, #21
900062a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
900062aa:	4b08      	ldr	r3, [pc, #32]	@ (900062cc <I2C_TransferConfig+0x60>)
900062ac:	430b      	orrs	r3, r1
900062ae:	43db      	mvns	r3, r3
900062b0:	ea02 0103 	and.w	r1, r2, r3
900062b4:	68fb      	ldr	r3, [r7, #12]
900062b6:	681b      	ldr	r3, [r3, #0]
900062b8:	697a      	ldr	r2, [r7, #20]
900062ba:	430a      	orrs	r2, r1
900062bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900062be:	bf00      	nop
900062c0:	371c      	adds	r7, #28
900062c2:	46bd      	mov	sp, r7
900062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900062c8:	4770      	bx	lr
900062ca:	bf00      	nop
900062cc:	03ff63ff 	.word	0x03ff63ff

900062d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900062d0:	b480      	push	{r7}
900062d2:	b083      	sub	sp, #12
900062d4:	af00      	add	r7, sp, #0
900062d6:	6078      	str	r0, [r7, #4]
900062d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900062da:	687b      	ldr	r3, [r7, #4]
900062dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
900062e0:	b2db      	uxtb	r3, r3
900062e2:	2b20      	cmp	r3, #32
900062e4:	d138      	bne.n	90006358 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900062e6:	687b      	ldr	r3, [r7, #4]
900062e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
900062ec:	2b01      	cmp	r3, #1
900062ee:	d101      	bne.n	900062f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
900062f0:	2302      	movs	r3, #2
900062f2:	e032      	b.n	9000635a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
900062f4:	687b      	ldr	r3, [r7, #4]
900062f6:	2201      	movs	r2, #1
900062f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900062fc:	687b      	ldr	r3, [r7, #4]
900062fe:	2224      	movs	r2, #36	@ 0x24
90006300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90006304:	687b      	ldr	r3, [r7, #4]
90006306:	681b      	ldr	r3, [r3, #0]
90006308:	681a      	ldr	r2, [r3, #0]
9000630a:	687b      	ldr	r3, [r7, #4]
9000630c:	681b      	ldr	r3, [r3, #0]
9000630e:	f022 0201 	bic.w	r2, r2, #1
90006312:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90006314:	687b      	ldr	r3, [r7, #4]
90006316:	681b      	ldr	r3, [r3, #0]
90006318:	681a      	ldr	r2, [r3, #0]
9000631a:	687b      	ldr	r3, [r7, #4]
9000631c:	681b      	ldr	r3, [r3, #0]
9000631e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
90006322:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90006324:	687b      	ldr	r3, [r7, #4]
90006326:	681b      	ldr	r3, [r3, #0]
90006328:	6819      	ldr	r1, [r3, #0]
9000632a:	687b      	ldr	r3, [r7, #4]
9000632c:	681b      	ldr	r3, [r3, #0]
9000632e:	683a      	ldr	r2, [r7, #0]
90006330:	430a      	orrs	r2, r1
90006332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006334:	687b      	ldr	r3, [r7, #4]
90006336:	681b      	ldr	r3, [r3, #0]
90006338:	681a      	ldr	r2, [r3, #0]
9000633a:	687b      	ldr	r3, [r7, #4]
9000633c:	681b      	ldr	r3, [r3, #0]
9000633e:	f042 0201 	orr.w	r2, r2, #1
90006342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006344:	687b      	ldr	r3, [r7, #4]
90006346:	2220      	movs	r2, #32
90006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000634c:	687b      	ldr	r3, [r7, #4]
9000634e:	2200      	movs	r2, #0
90006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
90006354:	2300      	movs	r3, #0
90006356:	e000      	b.n	9000635a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90006358:	2302      	movs	r3, #2
  }
}
9000635a:	4618      	mov	r0, r3
9000635c:	370c      	adds	r7, #12
9000635e:	46bd      	mov	sp, r7
90006360:	f85d 7b04 	ldr.w	r7, [sp], #4
90006364:	4770      	bx	lr

90006366 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90006366:	b480      	push	{r7}
90006368:	b085      	sub	sp, #20
9000636a:	af00      	add	r7, sp, #0
9000636c:	6078      	str	r0, [r7, #4]
9000636e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006370:	687b      	ldr	r3, [r7, #4]
90006372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
90006376:	b2db      	uxtb	r3, r3
90006378:	2b20      	cmp	r3, #32
9000637a:	d139      	bne.n	900063f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000637c:	687b      	ldr	r3, [r7, #4]
9000637e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
90006382:	2b01      	cmp	r3, #1
90006384:	d101      	bne.n	9000638a <HAL_I2CEx_ConfigDigitalFilter+0x24>
90006386:	2302      	movs	r3, #2
90006388:	e033      	b.n	900063f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000638a:	687b      	ldr	r3, [r7, #4]
9000638c:	2201      	movs	r2, #1
9000638e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006392:	687b      	ldr	r3, [r7, #4]
90006394:	2224      	movs	r2, #36	@ 0x24
90006396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000639a:	687b      	ldr	r3, [r7, #4]
9000639c:	681b      	ldr	r3, [r3, #0]
9000639e:	681a      	ldr	r2, [r3, #0]
900063a0:	687b      	ldr	r3, [r7, #4]
900063a2:	681b      	ldr	r3, [r3, #0]
900063a4:	f022 0201 	bic.w	r2, r2, #1
900063a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900063aa:	687b      	ldr	r3, [r7, #4]
900063ac:	681b      	ldr	r3, [r3, #0]
900063ae:	681b      	ldr	r3, [r3, #0]
900063b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
900063b2:	68fb      	ldr	r3, [r7, #12]
900063b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
900063b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
900063ba:	683b      	ldr	r3, [r7, #0]
900063bc:	021b      	lsls	r3, r3, #8
900063be:	68fa      	ldr	r2, [r7, #12]
900063c0:	4313      	orrs	r3, r2
900063c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900063c4:	687b      	ldr	r3, [r7, #4]
900063c6:	681b      	ldr	r3, [r3, #0]
900063c8:	68fa      	ldr	r2, [r7, #12]
900063ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900063cc:	687b      	ldr	r3, [r7, #4]
900063ce:	681b      	ldr	r3, [r3, #0]
900063d0:	681a      	ldr	r2, [r3, #0]
900063d2:	687b      	ldr	r3, [r7, #4]
900063d4:	681b      	ldr	r3, [r3, #0]
900063d6:	f042 0201 	orr.w	r2, r2, #1
900063da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900063dc:	687b      	ldr	r3, [r7, #4]
900063de:	2220      	movs	r2, #32
900063e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900063e4:	687b      	ldr	r3, [r7, #4]
900063e6:	2200      	movs	r2, #0
900063e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
900063ec:	2300      	movs	r3, #0
900063ee:	e000      	b.n	900063f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900063f0:	2302      	movs	r3, #2
  }
}
900063f2:	4618      	mov	r0, r3
900063f4:	3714      	adds	r7, #20
900063f6:	46bd      	mov	sp, r7
900063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900063fc:	4770      	bx	lr

900063fe <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
900063fe:	b580      	push	{r7, lr}
90006400:	b084      	sub	sp, #16
90006402:	af00      	add	r7, sp, #0
90006404:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90006406:	687b      	ldr	r3, [r7, #4]
90006408:	2b00      	cmp	r3, #0
9000640a:	d101      	bne.n	90006410 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
9000640c:	2301      	movs	r3, #1
9000640e:	e08f      	b.n	90006530 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90006410:	687b      	ldr	r3, [r7, #4]
90006412:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
90006416:	b2db      	uxtb	r3, r3
90006418:	2b00      	cmp	r3, #0
9000641a:	d106      	bne.n	9000642a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
9000641c:	687b      	ldr	r3, [r7, #4]
9000641e:	2200      	movs	r2, #0
90006420:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90006424:	6878      	ldr	r0, [r7, #4]
90006426:	f000 f887 	bl	90006538 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000642a:	687b      	ldr	r3, [r7, #4]
9000642c:	2202      	movs	r2, #2
9000642e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006432:	687b      	ldr	r3, [r7, #4]
90006434:	681b      	ldr	r3, [r3, #0]
90006436:	699a      	ldr	r2, [r3, #24]
90006438:	687b      	ldr	r3, [r7, #4]
9000643a:	681b      	ldr	r3, [r3, #0]
9000643c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
90006440:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006442:	687b      	ldr	r3, [r7, #4]
90006444:	681b      	ldr	r3, [r3, #0]
90006446:	6999      	ldr	r1, [r3, #24]
90006448:	687b      	ldr	r3, [r7, #4]
9000644a:	685a      	ldr	r2, [r3, #4]
9000644c:	687b      	ldr	r3, [r7, #4]
9000644e:	689b      	ldr	r3, [r3, #8]
90006450:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006452:	687b      	ldr	r3, [r7, #4]
90006454:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006456:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006458:	687b      	ldr	r3, [r7, #4]
9000645a:	691b      	ldr	r3, [r3, #16]
9000645c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000645e:	687b      	ldr	r3, [r7, #4]
90006460:	681b      	ldr	r3, [r3, #0]
90006462:	430a      	orrs	r2, r1
90006464:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
90006466:	687b      	ldr	r3, [r7, #4]
90006468:	695b      	ldr	r3, [r3, #20]
9000646a:	041b      	lsls	r3, r3, #16
9000646c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
9000646e:	687b      	ldr	r3, [r7, #4]
90006470:	6999      	ldr	r1, [r3, #24]
90006472:	687b      	ldr	r3, [r7, #4]
90006474:	681b      	ldr	r3, [r3, #0]
90006476:	68fa      	ldr	r2, [r7, #12]
90006478:	430a      	orrs	r2, r1
9000647a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000647c:	687b      	ldr	r3, [r7, #4]
9000647e:	69db      	ldr	r3, [r3, #28]
90006480:	041b      	lsls	r3, r3, #16
90006482:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
90006484:	687b      	ldr	r3, [r7, #4]
90006486:	6a19      	ldr	r1, [r3, #32]
90006488:	687b      	ldr	r3, [r7, #4]
9000648a:	681b      	ldr	r3, [r3, #0]
9000648c:	68fa      	ldr	r2, [r7, #12]
9000648e:	430a      	orrs	r2, r1
90006490:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90006492:	687b      	ldr	r3, [r7, #4]
90006494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90006496:	041b      	lsls	r3, r3, #16
90006498:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
9000649a:	687b      	ldr	r3, [r7, #4]
9000649c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
9000649e:	687b      	ldr	r3, [r7, #4]
900064a0:	681b      	ldr	r3, [r3, #0]
900064a2:	68fa      	ldr	r2, [r7, #12]
900064a4:	430a      	orrs	r2, r1
900064a6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
900064a8:	687b      	ldr	r3, [r7, #4]
900064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900064ac:	041b      	lsls	r3, r3, #16
900064ae:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
900064b0:	687b      	ldr	r3, [r7, #4]
900064b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
900064b4:	687b      	ldr	r3, [r7, #4]
900064b6:	681b      	ldr	r3, [r3, #0]
900064b8:	68fa      	ldr	r2, [r7, #12]
900064ba:	430a      	orrs	r2, r1
900064bc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900064be:	687b      	ldr	r3, [r7, #4]
900064c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
900064c4:	021b      	lsls	r3, r3, #8
900064c6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900064c8:	687b      	ldr	r3, [r7, #4]
900064ca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
900064ce:	041b      	lsls	r3, r3, #16
900064d0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900064d2:	687b      	ldr	r3, [r7, #4]
900064d4:	681b      	ldr	r3, [r3, #0]
900064d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
900064d8:	687b      	ldr	r3, [r7, #4]
900064da:	681b      	ldr	r3, [r3, #0]
900064dc:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
900064e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900064e2:	687b      	ldr	r3, [r7, #4]
900064e4:	681b      	ldr	r3, [r3, #0]
900064e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
900064e8:	68ba      	ldr	r2, [r7, #8]
900064ea:	68fb      	ldr	r3, [r7, #12]
900064ec:	4313      	orrs	r3, r2
900064ee:	687a      	ldr	r2, [r7, #4]
900064f0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
900064f4:	431a      	orrs	r2, r3
900064f6:	687b      	ldr	r3, [r7, #4]
900064f8:	681b      	ldr	r3, [r3, #0]
900064fa:	430a      	orrs	r2, r1
900064fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900064fe:	687b      	ldr	r3, [r7, #4]
90006500:	681b      	ldr	r3, [r3, #0]
90006502:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
90006504:	687b      	ldr	r3, [r7, #4]
90006506:	681b      	ldr	r3, [r3, #0]
90006508:	f042 0206 	orr.w	r2, r2, #6
9000650c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
9000650e:	687b      	ldr	r3, [r7, #4]
90006510:	681b      	ldr	r3, [r3, #0]
90006512:	699a      	ldr	r2, [r3, #24]
90006514:	687b      	ldr	r3, [r7, #4]
90006516:	681b      	ldr	r3, [r3, #0]
90006518:	f042 0201 	orr.w	r2, r2, #1
9000651c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000651e:	687b      	ldr	r3, [r7, #4]
90006520:	2200      	movs	r2, #0
90006522:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90006526:	687b      	ldr	r3, [r7, #4]
90006528:	2201      	movs	r2, #1
9000652a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
9000652e:	2300      	movs	r3, #0
}
90006530:	4618      	mov	r0, r3
90006532:	3710      	adds	r7, #16
90006534:	46bd      	mov	sp, r7
90006536:	bd80      	pop	{r7, pc}

90006538 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006538:	b480      	push	{r7}
9000653a:	b083      	sub	sp, #12
9000653c:	af00      	add	r7, sp, #0
9000653e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90006540:	bf00      	nop
90006542:	370c      	adds	r7, #12
90006544:	46bd      	mov	sp, r7
90006546:	f85d 7b04 	ldr.w	r7, [sp], #4
9000654a:	4770      	bx	lr

9000654c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000654c:	b5b0      	push	{r4, r5, r7, lr}
9000654e:	b084      	sub	sp, #16
90006550:	af00      	add	r7, sp, #0
90006552:	60f8      	str	r0, [r7, #12]
90006554:	60b9      	str	r1, [r7, #8]
90006556:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90006558:	68fb      	ldr	r3, [r7, #12]
9000655a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
9000655e:	2b01      	cmp	r3, #1
90006560:	d101      	bne.n	90006566 <HAL_LTDC_ConfigLayer+0x1a>
90006562:	2302      	movs	r3, #2
90006564:	e02c      	b.n	900065c0 <HAL_LTDC_ConfigLayer+0x74>
90006566:	68fb      	ldr	r3, [r7, #12]
90006568:	2201      	movs	r2, #1
9000656a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000656e:	68fb      	ldr	r3, [r7, #12]
90006570:	2202      	movs	r2, #2
90006572:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90006576:	68fa      	ldr	r2, [r7, #12]
90006578:	687b      	ldr	r3, [r7, #4]
9000657a:	2134      	movs	r1, #52	@ 0x34
9000657c:	fb01 f303 	mul.w	r3, r1, r3
90006580:	4413      	add	r3, r2
90006582:	f103 0238 	add.w	r2, r3, #56	@ 0x38
90006586:	68bb      	ldr	r3, [r7, #8]
90006588:	4614      	mov	r4, r2
9000658a:	461d      	mov	r5, r3
9000658c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000658e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90006596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90006598:	682b      	ldr	r3, [r5, #0]
9000659a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
9000659c:	687a      	ldr	r2, [r7, #4]
9000659e:	68b9      	ldr	r1, [r7, #8]
900065a0:	68f8      	ldr	r0, [r7, #12]
900065a2:	f000 f811 	bl	900065c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900065a6:	68fb      	ldr	r3, [r7, #12]
900065a8:	681b      	ldr	r3, [r3, #0]
900065aa:	2201      	movs	r2, #1
900065ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900065ae:	68fb      	ldr	r3, [r7, #12]
900065b0:	2201      	movs	r2, #1
900065b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
900065b6:	68fb      	ldr	r3, [r7, #12]
900065b8:	2200      	movs	r2, #0
900065ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
900065be:	2300      	movs	r3, #0
}
900065c0:	4618      	mov	r0, r3
900065c2:	3710      	adds	r7, #16
900065c4:	46bd      	mov	sp, r7
900065c6:	bdb0      	pop	{r4, r5, r7, pc}

900065c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900065c8:	b480      	push	{r7}
900065ca:	b089      	sub	sp, #36	@ 0x24
900065cc:	af00      	add	r7, sp, #0
900065ce:	60f8      	str	r0, [r7, #12]
900065d0:	60b9      	str	r1, [r7, #8]
900065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900065d4:	68bb      	ldr	r3, [r7, #8]
900065d6:	685a      	ldr	r2, [r3, #4]
900065d8:	68fb      	ldr	r3, [r7, #12]
900065da:	681b      	ldr	r3, [r3, #0]
900065dc:	68db      	ldr	r3, [r3, #12]
900065de:	0c1b      	lsrs	r3, r3, #16
900065e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
900065e4:	4413      	add	r3, r2
900065e6:	041b      	lsls	r3, r3, #16
900065e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900065ea:	68fb      	ldr	r3, [r7, #12]
900065ec:	681b      	ldr	r3, [r3, #0]
900065ee:	461a      	mov	r2, r3
900065f0:	687b      	ldr	r3, [r7, #4]
900065f2:	01db      	lsls	r3, r3, #7
900065f4:	4413      	add	r3, r2
900065f6:	3384      	adds	r3, #132	@ 0x84
900065f8:	685b      	ldr	r3, [r3, #4]
900065fa:	68fa      	ldr	r2, [r7, #12]
900065fc:	6812      	ldr	r2, [r2, #0]
900065fe:	4611      	mov	r1, r2
90006600:	687a      	ldr	r2, [r7, #4]
90006602:	01d2      	lsls	r2, r2, #7
90006604:	440a      	add	r2, r1
90006606:	3284      	adds	r2, #132	@ 0x84
90006608:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
9000660c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000660e:	68bb      	ldr	r3, [r7, #8]
90006610:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006612:	68fb      	ldr	r3, [r7, #12]
90006614:	681b      	ldr	r3, [r3, #0]
90006616:	68db      	ldr	r3, [r3, #12]
90006618:	0c1b      	lsrs	r3, r3, #16
9000661a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000661e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006620:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006622:	68fb      	ldr	r3, [r7, #12]
90006624:	681b      	ldr	r3, [r3, #0]
90006626:	4619      	mov	r1, r3
90006628:	687b      	ldr	r3, [r7, #4]
9000662a:	01db      	lsls	r3, r3, #7
9000662c:	440b      	add	r3, r1
9000662e:	3384      	adds	r3, #132	@ 0x84
90006630:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90006632:	69fb      	ldr	r3, [r7, #28]
90006634:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006636:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006638:	68bb      	ldr	r3, [r7, #8]
9000663a:	68da      	ldr	r2, [r3, #12]
9000663c:	68fb      	ldr	r3, [r7, #12]
9000663e:	681b      	ldr	r3, [r3, #0]
90006640:	68db      	ldr	r3, [r3, #12]
90006642:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006646:	4413      	add	r3, r2
90006648:	041b      	lsls	r3, r3, #16
9000664a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000664c:	68fb      	ldr	r3, [r7, #12]
9000664e:	681b      	ldr	r3, [r3, #0]
90006650:	461a      	mov	r2, r3
90006652:	687b      	ldr	r3, [r7, #4]
90006654:	01db      	lsls	r3, r3, #7
90006656:	4413      	add	r3, r2
90006658:	3384      	adds	r3, #132	@ 0x84
9000665a:	689b      	ldr	r3, [r3, #8]
9000665c:	68fa      	ldr	r2, [r7, #12]
9000665e:	6812      	ldr	r2, [r2, #0]
90006660:	4611      	mov	r1, r2
90006662:	687a      	ldr	r2, [r7, #4]
90006664:	01d2      	lsls	r2, r2, #7
90006666:	440a      	add	r2, r1
90006668:	3284      	adds	r2, #132	@ 0x84
9000666a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
9000666e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90006670:	68bb      	ldr	r3, [r7, #8]
90006672:	689a      	ldr	r2, [r3, #8]
90006674:	68fb      	ldr	r3, [r7, #12]
90006676:	681b      	ldr	r3, [r3, #0]
90006678:	68db      	ldr	r3, [r3, #12]
9000667a:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000667e:	4413      	add	r3, r2
90006680:	1c5a      	adds	r2, r3, #1
90006682:	68fb      	ldr	r3, [r7, #12]
90006684:	681b      	ldr	r3, [r3, #0]
90006686:	4619      	mov	r1, r3
90006688:	687b      	ldr	r3, [r7, #4]
9000668a:	01db      	lsls	r3, r3, #7
9000668c:	440b      	add	r3, r1
9000668e:	3384      	adds	r3, #132	@ 0x84
90006690:	4619      	mov	r1, r3
90006692:	69fb      	ldr	r3, [r7, #28]
90006694:	4313      	orrs	r3, r2
90006696:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90006698:	68fb      	ldr	r3, [r7, #12]
9000669a:	681b      	ldr	r3, [r3, #0]
9000669c:	461a      	mov	r2, r3
9000669e:	687b      	ldr	r3, [r7, #4]
900066a0:	01db      	lsls	r3, r3, #7
900066a2:	4413      	add	r3, r2
900066a4:	3384      	adds	r3, #132	@ 0x84
900066a6:	691b      	ldr	r3, [r3, #16]
900066a8:	68fa      	ldr	r2, [r7, #12]
900066aa:	6812      	ldr	r2, [r2, #0]
900066ac:	4611      	mov	r1, r2
900066ae:	687a      	ldr	r2, [r7, #4]
900066b0:	01d2      	lsls	r2, r2, #7
900066b2:	440a      	add	r2, r1
900066b4:	3284      	adds	r2, #132	@ 0x84
900066b6:	f023 0307 	bic.w	r3, r3, #7
900066ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900066bc:	68fb      	ldr	r3, [r7, #12]
900066be:	681b      	ldr	r3, [r3, #0]
900066c0:	461a      	mov	r2, r3
900066c2:	687b      	ldr	r3, [r7, #4]
900066c4:	01db      	lsls	r3, r3, #7
900066c6:	4413      	add	r3, r2
900066c8:	3384      	adds	r3, #132	@ 0x84
900066ca:	461a      	mov	r2, r3
900066cc:	68bb      	ldr	r3, [r7, #8]
900066ce:	691b      	ldr	r3, [r3, #16]
900066d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900066d2:	68bb      	ldr	r3, [r7, #8]
900066d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
900066d8:	021b      	lsls	r3, r3, #8
900066da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900066dc:	68bb      	ldr	r3, [r7, #8]
900066de:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
900066e2:	041b      	lsls	r3, r3, #16
900066e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
900066e6:	68bb      	ldr	r3, [r7, #8]
900066e8:	699b      	ldr	r3, [r3, #24]
900066ea:	061b      	lsls	r3, r3, #24
900066ec:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
900066ee:	68bb      	ldr	r3, [r7, #8]
900066f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
900066f4:	461a      	mov	r2, r3
900066f6:	69fb      	ldr	r3, [r7, #28]
900066f8:	431a      	orrs	r2, r3
900066fa:	69bb      	ldr	r3, [r7, #24]
900066fc:	431a      	orrs	r2, r3
900066fe:	68fb      	ldr	r3, [r7, #12]
90006700:	681b      	ldr	r3, [r3, #0]
90006702:	4619      	mov	r1, r3
90006704:	687b      	ldr	r3, [r7, #4]
90006706:	01db      	lsls	r3, r3, #7
90006708:	440b      	add	r3, r1
9000670a:	3384      	adds	r3, #132	@ 0x84
9000670c:	4619      	mov	r1, r3
9000670e:	697b      	ldr	r3, [r7, #20]
90006710:	4313      	orrs	r3, r2
90006712:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006714:	68fb      	ldr	r3, [r7, #12]
90006716:	681b      	ldr	r3, [r3, #0]
90006718:	461a      	mov	r2, r3
9000671a:	687b      	ldr	r3, [r7, #4]
9000671c:	01db      	lsls	r3, r3, #7
9000671e:	4413      	add	r3, r2
90006720:	3384      	adds	r3, #132	@ 0x84
90006722:	695b      	ldr	r3, [r3, #20]
90006724:	68fa      	ldr	r2, [r7, #12]
90006726:	6812      	ldr	r2, [r2, #0]
90006728:	4611      	mov	r1, r2
9000672a:	687a      	ldr	r2, [r7, #4]
9000672c:	01d2      	lsls	r2, r2, #7
9000672e:	440a      	add	r2, r1
90006730:	3284      	adds	r2, #132	@ 0x84
90006732:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
90006736:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006738:	68fb      	ldr	r3, [r7, #12]
9000673a:	681b      	ldr	r3, [r3, #0]
9000673c:	461a      	mov	r2, r3
9000673e:	687b      	ldr	r3, [r7, #4]
90006740:	01db      	lsls	r3, r3, #7
90006742:	4413      	add	r3, r2
90006744:	3384      	adds	r3, #132	@ 0x84
90006746:	461a      	mov	r2, r3
90006748:	68bb      	ldr	r3, [r7, #8]
9000674a:	695b      	ldr	r3, [r3, #20]
9000674c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000674e:	68fb      	ldr	r3, [r7, #12]
90006750:	681b      	ldr	r3, [r3, #0]
90006752:	461a      	mov	r2, r3
90006754:	687b      	ldr	r3, [r7, #4]
90006756:	01db      	lsls	r3, r3, #7
90006758:	4413      	add	r3, r2
9000675a:	3384      	adds	r3, #132	@ 0x84
9000675c:	69da      	ldr	r2, [r3, #28]
9000675e:	68fb      	ldr	r3, [r7, #12]
90006760:	681b      	ldr	r3, [r3, #0]
90006762:	4619      	mov	r1, r3
90006764:	687b      	ldr	r3, [r7, #4]
90006766:	01db      	lsls	r3, r3, #7
90006768:	440b      	add	r3, r1
9000676a:	3384      	adds	r3, #132	@ 0x84
9000676c:	4619      	mov	r1, r3
9000676e:	4b4f      	ldr	r3, [pc, #316]	@ (900068ac <LTDC_SetConfig+0x2e4>)
90006770:	4013      	ands	r3, r2
90006772:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90006774:	68bb      	ldr	r3, [r7, #8]
90006776:	69da      	ldr	r2, [r3, #28]
90006778:	68bb      	ldr	r3, [r7, #8]
9000677a:	6a1b      	ldr	r3, [r3, #32]
9000677c:	68f9      	ldr	r1, [r7, #12]
9000677e:	6809      	ldr	r1, [r1, #0]
90006780:	4608      	mov	r0, r1
90006782:	6879      	ldr	r1, [r7, #4]
90006784:	01c9      	lsls	r1, r1, #7
90006786:	4401      	add	r1, r0
90006788:	3184      	adds	r1, #132	@ 0x84
9000678a:	4313      	orrs	r3, r2
9000678c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
9000678e:	68fb      	ldr	r3, [r7, #12]
90006790:	681b      	ldr	r3, [r3, #0]
90006792:	461a      	mov	r2, r3
90006794:	687b      	ldr	r3, [r7, #4]
90006796:	01db      	lsls	r3, r3, #7
90006798:	4413      	add	r3, r2
9000679a:	3384      	adds	r3, #132	@ 0x84
9000679c:	461a      	mov	r2, r3
9000679e:	68bb      	ldr	r3, [r7, #8]
900067a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
900067a2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900067a4:	68bb      	ldr	r3, [r7, #8]
900067a6:	691b      	ldr	r3, [r3, #16]
900067a8:	2b00      	cmp	r3, #0
900067aa:	d102      	bne.n	900067b2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
900067ac:	2304      	movs	r3, #4
900067ae:	61fb      	str	r3, [r7, #28]
900067b0:	e01b      	b.n	900067ea <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900067b2:	68bb      	ldr	r3, [r7, #8]
900067b4:	691b      	ldr	r3, [r3, #16]
900067b6:	2b01      	cmp	r3, #1
900067b8:	d102      	bne.n	900067c0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
900067ba:	2303      	movs	r3, #3
900067bc:	61fb      	str	r3, [r7, #28]
900067be:	e014      	b.n	900067ea <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900067c0:	68bb      	ldr	r3, [r7, #8]
900067c2:	691b      	ldr	r3, [r3, #16]
900067c4:	2b04      	cmp	r3, #4
900067c6:	d00b      	beq.n	900067e0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900067c8:	68bb      	ldr	r3, [r7, #8]
900067ca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900067cc:	2b02      	cmp	r3, #2
900067ce:	d007      	beq.n	900067e0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900067d0:	68bb      	ldr	r3, [r7, #8]
900067d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900067d4:	2b03      	cmp	r3, #3
900067d6:	d003      	beq.n	900067e0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
900067d8:	68bb      	ldr	r3, [r7, #8]
900067da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900067dc:	2b07      	cmp	r3, #7
900067de:	d102      	bne.n	900067e6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
900067e0:	2302      	movs	r3, #2
900067e2:	61fb      	str	r3, [r7, #28]
900067e4:	e001      	b.n	900067ea <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
900067e6:	2301      	movs	r3, #1
900067e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900067ea:	68fb      	ldr	r3, [r7, #12]
900067ec:	681b      	ldr	r3, [r3, #0]
900067ee:	461a      	mov	r2, r3
900067f0:	687b      	ldr	r3, [r7, #4]
900067f2:	01db      	lsls	r3, r3, #7
900067f4:	4413      	add	r3, r2
900067f6:	3384      	adds	r3, #132	@ 0x84
900067f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900067fa:	68fa      	ldr	r2, [r7, #12]
900067fc:	6812      	ldr	r2, [r2, #0]
900067fe:	4611      	mov	r1, r2
90006800:	687a      	ldr	r2, [r7, #4]
90006802:	01d2      	lsls	r2, r2, #7
90006804:	440a      	add	r2, r1
90006806:	3284      	adds	r2, #132	@ 0x84
90006808:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
9000680c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
9000680e:	68bb      	ldr	r3, [r7, #8]
90006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006812:	69fa      	ldr	r2, [r7, #28]
90006814:	fb02 f303 	mul.w	r3, r2, r3
90006818:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000681a:	68bb      	ldr	r3, [r7, #8]
9000681c:	6859      	ldr	r1, [r3, #4]
9000681e:	68bb      	ldr	r3, [r7, #8]
90006820:	681b      	ldr	r3, [r3, #0]
90006822:	1acb      	subs	r3, r1, r3
90006824:	69f9      	ldr	r1, [r7, #28]
90006826:	fb01 f303 	mul.w	r3, r1, r3
9000682a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
9000682c:	68f9      	ldr	r1, [r7, #12]
9000682e:	6809      	ldr	r1, [r1, #0]
90006830:	4608      	mov	r0, r1
90006832:	6879      	ldr	r1, [r7, #4]
90006834:	01c9      	lsls	r1, r1, #7
90006836:	4401      	add	r1, r0
90006838:	3184      	adds	r1, #132	@ 0x84
9000683a:	4313      	orrs	r3, r2
9000683c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000683e:	68fb      	ldr	r3, [r7, #12]
90006840:	681b      	ldr	r3, [r3, #0]
90006842:	461a      	mov	r2, r3
90006844:	687b      	ldr	r3, [r7, #4]
90006846:	01db      	lsls	r3, r3, #7
90006848:	4413      	add	r3, r2
9000684a:	3384      	adds	r3, #132	@ 0x84
9000684c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000684e:	68fb      	ldr	r3, [r7, #12]
90006850:	681b      	ldr	r3, [r3, #0]
90006852:	4619      	mov	r1, r3
90006854:	687b      	ldr	r3, [r7, #4]
90006856:	01db      	lsls	r3, r3, #7
90006858:	440b      	add	r3, r1
9000685a:	3384      	adds	r3, #132	@ 0x84
9000685c:	4619      	mov	r1, r3
9000685e:	4b14      	ldr	r3, [pc, #80]	@ (900068b0 <LTDC_SetConfig+0x2e8>)
90006860:	4013      	ands	r3, r2
90006862:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90006864:	68fb      	ldr	r3, [r7, #12]
90006866:	681b      	ldr	r3, [r3, #0]
90006868:	461a      	mov	r2, r3
9000686a:	687b      	ldr	r3, [r7, #4]
9000686c:	01db      	lsls	r3, r3, #7
9000686e:	4413      	add	r3, r2
90006870:	3384      	adds	r3, #132	@ 0x84
90006872:	461a      	mov	r2, r3
90006874:	68bb      	ldr	r3, [r7, #8]
90006876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006878:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000687a:	68fb      	ldr	r3, [r7, #12]
9000687c:	681b      	ldr	r3, [r3, #0]
9000687e:	461a      	mov	r2, r3
90006880:	687b      	ldr	r3, [r7, #4]
90006882:	01db      	lsls	r3, r3, #7
90006884:	4413      	add	r3, r2
90006886:	3384      	adds	r3, #132	@ 0x84
90006888:	681b      	ldr	r3, [r3, #0]
9000688a:	68fa      	ldr	r2, [r7, #12]
9000688c:	6812      	ldr	r2, [r2, #0]
9000688e:	4611      	mov	r1, r2
90006890:	687a      	ldr	r2, [r7, #4]
90006892:	01d2      	lsls	r2, r2, #7
90006894:	440a      	add	r2, r1
90006896:	3284      	adds	r2, #132	@ 0x84
90006898:	f043 0301 	orr.w	r3, r3, #1
9000689c:	6013      	str	r3, [r2, #0]
}
9000689e:	bf00      	nop
900068a0:	3724      	adds	r7, #36	@ 0x24
900068a2:	46bd      	mov	sp, r7
900068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900068a8:	4770      	bx	lr
900068aa:	bf00      	nop
900068ac:	fffff8f8 	.word	0xfffff8f8
900068b0:	fffff800 	.word	0xfffff800

900068b4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900068b4:	b580      	push	{r7, lr}
900068b6:	b084      	sub	sp, #16
900068b8:	af00      	add	r7, sp, #0
900068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900068bc:	f7fc fc8e 	bl	900031dc <HAL_GetTick>
900068c0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900068c2:	687b      	ldr	r3, [r7, #4]
900068c4:	2b00      	cmp	r3, #0
900068c6:	d101      	bne.n	900068cc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
900068c8:	2301      	movs	r3, #1
900068ca:	e03b      	b.n	90006944 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
900068cc:	687b      	ldr	r3, [r7, #4]
900068ce:	2200      	movs	r2, #0
900068d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
900068d4:	687b      	ldr	r3, [r7, #4]
900068d6:	2202      	movs	r2, #2
900068d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
900068dc:	687b      	ldr	r3, [r7, #4]
900068de:	681b      	ldr	r3, [r3, #0]
900068e0:	68da      	ldr	r2, [r3, #12]
900068e2:	687b      	ldr	r3, [r7, #4]
900068e4:	681b      	ldr	r3, [r3, #0]
900068e6:	f022 0201 	bic.w	r2, r2, #1
900068ea:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900068ec:	e00f      	b.n	9000690e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
900068ee:	f7fc fc75 	bl	900031dc <HAL_GetTick>
900068f2:	4602      	mov	r2, r0
900068f4:	68fb      	ldr	r3, [r7, #12]
900068f6:	1ad3      	subs	r3, r2, r3
900068f8:	2b05      	cmp	r3, #5
900068fa:	d908      	bls.n	9000690e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
900068fc:	687b      	ldr	r3, [r7, #4]
900068fe:	2240      	movs	r2, #64	@ 0x40
90006900:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006902:	687b      	ldr	r3, [r7, #4]
90006904:	2203      	movs	r2, #3
90006906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
9000690a:	2301      	movs	r3, #1
9000690c:	e01a      	b.n	90006944 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000690e:	687b      	ldr	r3, [r7, #4]
90006910:	681b      	ldr	r3, [r3, #0]
90006912:	68db      	ldr	r3, [r3, #12]
90006914:	f003 0301 	and.w	r3, r3, #1
90006918:	2b00      	cmp	r3, #0
9000691a:	d1e8      	bne.n	900068ee <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
9000691c:	6878      	ldr	r0, [r7, #4]
9000691e:	f000 f86d 	bl	900069fc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006922:	687b      	ldr	r3, [r7, #4]
90006924:	2200      	movs	r2, #0
90006926:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006928:	687b      	ldr	r3, [r7, #4]
9000692a:	2200      	movs	r2, #0
9000692c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
9000692e:	687b      	ldr	r3, [r7, #4]
90006930:	2200      	movs	r2, #0
90006932:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006934:	687b      	ldr	r3, [r7, #4]
90006936:	2200      	movs	r2, #0
90006938:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
9000693a:	687b      	ldr	r3, [r7, #4]
9000693c:	2201      	movs	r2, #1
9000693e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
90006942:	2300      	movs	r3, #0
}
90006944:	4618      	mov	r0, r3
90006946:	3710      	adds	r7, #16
90006948:	46bd      	mov	sp, r7
9000694a:	bd80      	pop	{r7, pc}

9000694c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
9000694c:	b480      	push	{r7}
9000694e:	b083      	sub	sp, #12
90006950:	af00      	add	r7, sp, #0
90006952:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006954:	687b      	ldr	r3, [r7, #4]
90006956:	2b00      	cmp	r3, #0
90006958:	d101      	bne.n	9000695e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
9000695a:	2301      	movs	r3, #1
9000695c:	e048      	b.n	900069f0 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
9000695e:	687b      	ldr	r3, [r7, #4]
90006960:	681b      	ldr	r3, [r3, #0]
90006962:	68da      	ldr	r2, [r3, #12]
90006964:	687b      	ldr	r3, [r7, #4]
90006966:	681b      	ldr	r3, [r3, #0]
90006968:	f022 0201 	bic.w	r2, r2, #1
9000696c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
9000696e:	687b      	ldr	r3, [r7, #4]
90006970:	681b      	ldr	r3, [r3, #0]
90006972:	2200      	movs	r2, #0
90006974:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
90006976:	687b      	ldr	r3, [r7, #4]
90006978:	681b      	ldr	r3, [r3, #0]
9000697a:	2200      	movs	r2, #0
9000697c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
9000697e:	687b      	ldr	r3, [r7, #4]
90006980:	681b      	ldr	r3, [r3, #0]
90006982:	2200      	movs	r2, #0
90006984:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006986:	687b      	ldr	r3, [r7, #4]
90006988:	681b      	ldr	r3, [r3, #0]
9000698a:	2200      	movs	r2, #0
9000698c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
9000698e:	687b      	ldr	r3, [r7, #4]
90006990:	681b      	ldr	r3, [r3, #0]
90006992:	2200      	movs	r2, #0
90006994:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006996:	687b      	ldr	r3, [r7, #4]
90006998:	681b      	ldr	r3, [r3, #0]
9000699a:	2200      	movs	r2, #0
9000699c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
9000699e:	687b      	ldr	r3, [r7, #4]
900069a0:	681b      	ldr	r3, [r3, #0]
900069a2:	2200      	movs	r2, #0
900069a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
900069a6:	687b      	ldr	r3, [r7, #4]
900069a8:	681b      	ldr	r3, [r3, #0]
900069aa:	2200      	movs	r2, #0
900069ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
900069ae:	687b      	ldr	r3, [r7, #4]
900069b0:	681b      	ldr	r3, [r3, #0]
900069b2:	2200      	movs	r2, #0
900069b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
900069b6:	687b      	ldr	r3, [r7, #4]
900069b8:	681b      	ldr	r3, [r3, #0]
900069ba:	2200      	movs	r2, #0
900069bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
900069be:	687b      	ldr	r3, [r7, #4]
900069c0:	681b      	ldr	r3, [r3, #0]
900069c2:	221f      	movs	r2, #31
900069c4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
900069c6:	687b      	ldr	r3, [r7, #4]
900069c8:	2200      	movs	r2, #0
900069ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
900069cc:	687b      	ldr	r3, [r7, #4]
900069ce:	2200      	movs	r2, #0
900069d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
900069d2:	687b      	ldr	r3, [r7, #4]
900069d4:	2200      	movs	r2, #0
900069d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	2200      	movs	r2, #0
900069dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
900069de:	687b      	ldr	r3, [r7, #4]
900069e0:	2200      	movs	r2, #0
900069e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
900069e6:	687b      	ldr	r3, [r7, #4]
900069e8:	2200      	movs	r2, #0
900069ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
900069ee:	2300      	movs	r3, #0
}
900069f0:	4618      	mov	r0, r3
900069f2:	370c      	adds	r7, #12
900069f4:	46bd      	mov	sp, r7
900069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
900069fa:	4770      	bx	lr

900069fc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900069fc:	b480      	push	{r7}
900069fe:	b085      	sub	sp, #20
90006a00:	af00      	add	r7, sp, #0
90006a02:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006a04:	687b      	ldr	r3, [r7, #4]
90006a06:	68d9      	ldr	r1, [r3, #12]
90006a08:	687b      	ldr	r3, [r7, #4]
90006a0a:	691a      	ldr	r2, [r3, #16]
90006a0c:	687b      	ldr	r3, [r7, #4]
90006a0e:	681b      	ldr	r3, [r3, #0]
90006a10:	430a      	orrs	r2, r1
90006a12:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a14:	687b      	ldr	r3, [r7, #4]
90006a16:	695a      	ldr	r2, [r3, #20]
90006a18:	687b      	ldr	r3, [r7, #4]
90006a1a:	699b      	ldr	r3, [r3, #24]
90006a1c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a1e:	687b      	ldr	r3, [r7, #4]
90006a20:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a22:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a24:	687b      	ldr	r3, [r7, #4]
90006a26:	6a1b      	ldr	r3, [r3, #32]
90006a28:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006a2a:	687b      	ldr	r3, [r7, #4]
90006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a2e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006a30:	687b      	ldr	r3, [r7, #4]
90006a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90006a34:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006a36:	687b      	ldr	r3, [r7, #4]
90006a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006a3a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006a3c:	687b      	ldr	r3, [r7, #4]
90006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006a40:	3b01      	subs	r3, #1
90006a42:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006a44:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006a48:	687b      	ldr	r3, [r7, #4]
90006a4a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a4c:	687b      	ldr	r3, [r7, #4]
90006a4e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006a50:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a52:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006a54:	687b      	ldr	r3, [r7, #4]
90006a56:	685b      	ldr	r3, [r3, #4]
90006a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006a5c:	d107      	bne.n	90006a6e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006a5e:	687b      	ldr	r3, [r7, #4]
90006a60:	681b      	ldr	r3, [r3, #0]
90006a62:	691a      	ldr	r2, [r3, #16]
90006a64:	687b      	ldr	r3, [r7, #4]
90006a66:	681b      	ldr	r3, [r3, #0]
90006a68:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
90006a6c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006a6e:	687b      	ldr	r3, [r7, #4]
90006a70:	681b      	ldr	r3, [r3, #0]
90006a72:	2200      	movs	r2, #0
90006a74:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006a76:	687b      	ldr	r3, [r7, #4]
90006a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006a7a:	2b00      	cmp	r3, #0
90006a7c:	da11      	bge.n	90006aa2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006a7e:	687b      	ldr	r3, [r7, #4]
90006a80:	681b      	ldr	r3, [r3, #0]
90006a82:	695a      	ldr	r2, [r3, #20]
90006a84:	687b      	ldr	r3, [r7, #4]
90006a86:	681b      	ldr	r3, [r3, #0]
90006a88:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
90006a8c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006a8e:	687b      	ldr	r3, [r7, #4]
90006a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006a92:	425b      	negs	r3, r3
90006a94:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006a96:	687b      	ldr	r3, [r7, #4]
90006a98:	681b      	ldr	r3, [r3, #0]
90006a9a:	68fa      	ldr	r2, [r7, #12]
90006a9c:	b292      	uxth	r2, r2
90006a9e:	621a      	str	r2, [r3, #32]
90006aa0:	e006      	b.n	90006ab0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006aa2:	687b      	ldr	r3, [r7, #4]
90006aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90006aa6:	461a      	mov	r2, r3
90006aa8:	687b      	ldr	r3, [r7, #4]
90006aaa:	681b      	ldr	r3, [r3, #0]
90006aac:	b292      	uxth	r2, r2
90006aae:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006ab0:	687b      	ldr	r3, [r7, #4]
90006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006ab4:	2b00      	cmp	r3, #0
90006ab6:	da15      	bge.n	90006ae4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006ab8:	687b      	ldr	r3, [r7, #4]
90006aba:	681b      	ldr	r3, [r3, #0]
90006abc:	695a      	ldr	r2, [r3, #20]
90006abe:	687b      	ldr	r3, [r7, #4]
90006ac0:	681b      	ldr	r3, [r3, #0]
90006ac2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
90006ac6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006ac8:	687b      	ldr	r3, [r7, #4]
90006aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006acc:	425b      	negs	r3, r3
90006ace:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006ad0:	687b      	ldr	r3, [r7, #4]
90006ad2:	681b      	ldr	r3, [r3, #0]
90006ad4:	6a19      	ldr	r1, [r3, #32]
90006ad6:	68fb      	ldr	r3, [r7, #12]
90006ad8:	041a      	lsls	r2, r3, #16
90006ada:	687b      	ldr	r3, [r7, #4]
90006adc:	681b      	ldr	r3, [r3, #0]
90006ade:	430a      	orrs	r2, r1
90006ae0:	621a      	str	r2, [r3, #32]
90006ae2:	e009      	b.n	90006af8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006ae4:	687b      	ldr	r3, [r7, #4]
90006ae6:	681b      	ldr	r3, [r3, #0]
90006ae8:	6a19      	ldr	r1, [r3, #32]
90006aea:	687b      	ldr	r3, [r7, #4]
90006aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90006aee:	041a      	lsls	r2, r3, #16
90006af0:	687b      	ldr	r3, [r7, #4]
90006af2:	681b      	ldr	r3, [r3, #0]
90006af4:	430a      	orrs	r2, r1
90006af6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006af8:	687b      	ldr	r3, [r7, #4]
90006afa:	685b      	ldr	r3, [r3, #4]
90006afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90006b00:	d006      	beq.n	90006b10 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006b02:	687b      	ldr	r3, [r7, #4]
90006b04:	685a      	ldr	r2, [r3, #4]
90006b06:	687b      	ldr	r3, [r7, #4]
90006b08:	681b      	ldr	r3, [r3, #0]
90006b0a:	b2d2      	uxtb	r2, r2
90006b0c:	629a      	str	r2, [r3, #40]	@ 0x28
90006b0e:	e003      	b.n	90006b18 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006b10:	687b      	ldr	r3, [r7, #4]
90006b12:	681b      	ldr	r3, [r3, #0]
90006b14:	2200      	movs	r2, #0
90006b16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006b18:	687b      	ldr	r3, [r7, #4]
90006b1a:	681b      	ldr	r3, [r3, #0]
90006b1c:	2200      	movs	r2, #0
90006b1e:	625a      	str	r2, [r3, #36]	@ 0x24
}
90006b20:	bf00      	nop
90006b22:	3714      	adds	r7, #20
90006b24:	46bd      	mov	sp, r7
90006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
90006b2a:	4770      	bx	lr

90006b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006b2c:	b580      	push	{r7, lr}
90006b2e:	b08c      	sub	sp, #48	@ 0x30
90006b30:	af00      	add	r7, sp, #0
90006b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006b34:	687b      	ldr	r3, [r7, #4]
90006b36:	2b00      	cmp	r3, #0
90006b38:	d102      	bne.n	90006b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006b3a:	2301      	movs	r3, #1
90006b3c:	f000 bc48 	b.w	900073d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006b40:	687b      	ldr	r3, [r7, #4]
90006b42:	681b      	ldr	r3, [r3, #0]
90006b44:	f003 0301 	and.w	r3, r3, #1
90006b48:	2b00      	cmp	r3, #0
90006b4a:	f000 8088 	beq.w	90006c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006b4e:	4b99      	ldr	r3, [pc, #612]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006b50:	691b      	ldr	r3, [r3, #16]
90006b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006b58:	4b96      	ldr	r3, [pc, #600]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006b60:	2b10      	cmp	r3, #16
90006b62:	d007      	beq.n	90006b74 <HAL_RCC_OscConfig+0x48>
90006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
90006b66:	2b18      	cmp	r3, #24
90006b68:	d111      	bne.n	90006b8e <HAL_RCC_OscConfig+0x62>
90006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
90006b6c:	f003 0303 	and.w	r3, r3, #3
90006b70:	2b02      	cmp	r3, #2
90006b72:	d10c      	bne.n	90006b8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006b74:	4b8f      	ldr	r3, [pc, #572]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006b76:	681b      	ldr	r3, [r3, #0]
90006b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006b7c:	2b00      	cmp	r3, #0
90006b7e:	d06d      	beq.n	90006c5c <HAL_RCC_OscConfig+0x130>
90006b80:	687b      	ldr	r3, [r7, #4]
90006b82:	685b      	ldr	r3, [r3, #4]
90006b84:	2b00      	cmp	r3, #0
90006b86:	d169      	bne.n	90006c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006b88:	2301      	movs	r3, #1
90006b8a:	f000 bc21 	b.w	900073d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006b8e:	687b      	ldr	r3, [r7, #4]
90006b90:	685b      	ldr	r3, [r3, #4]
90006b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90006b96:	d106      	bne.n	90006ba6 <HAL_RCC_OscConfig+0x7a>
90006b98:	4b86      	ldr	r3, [pc, #536]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006b9a:	681b      	ldr	r3, [r3, #0]
90006b9c:	4a85      	ldr	r2, [pc, #532]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006ba2:	6013      	str	r3, [r2, #0]
90006ba4:	e02e      	b.n	90006c04 <HAL_RCC_OscConfig+0xd8>
90006ba6:	687b      	ldr	r3, [r7, #4]
90006ba8:	685b      	ldr	r3, [r3, #4]
90006baa:	2b00      	cmp	r3, #0
90006bac:	d10c      	bne.n	90006bc8 <HAL_RCC_OscConfig+0x9c>
90006bae:	4b81      	ldr	r3, [pc, #516]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bb0:	681b      	ldr	r3, [r3, #0]
90006bb2:	4a80      	ldr	r2, [pc, #512]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006bb8:	6013      	str	r3, [r2, #0]
90006bba:	4b7e      	ldr	r3, [pc, #504]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bbc:	681b      	ldr	r3, [r3, #0]
90006bbe:	4a7d      	ldr	r2, [pc, #500]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006bc4:	6013      	str	r3, [r2, #0]
90006bc6:	e01d      	b.n	90006c04 <HAL_RCC_OscConfig+0xd8>
90006bc8:	687b      	ldr	r3, [r7, #4]
90006bca:	685b      	ldr	r3, [r3, #4]
90006bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90006bd0:	d10c      	bne.n	90006bec <HAL_RCC_OscConfig+0xc0>
90006bd2:	4b78      	ldr	r3, [pc, #480]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bd4:	681b      	ldr	r3, [r3, #0]
90006bd6:	4a77      	ldr	r2, [pc, #476]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90006bdc:	6013      	str	r3, [r2, #0]
90006bde:	4b75      	ldr	r3, [pc, #468]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006be0:	681b      	ldr	r3, [r3, #0]
90006be2:	4a74      	ldr	r2, [pc, #464]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
90006be8:	6013      	str	r3, [r2, #0]
90006bea:	e00b      	b.n	90006c04 <HAL_RCC_OscConfig+0xd8>
90006bec:	4b71      	ldr	r3, [pc, #452]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bee:	681b      	ldr	r3, [r3, #0]
90006bf0:	4a70      	ldr	r2, [pc, #448]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90006bf6:	6013      	str	r3, [r2, #0]
90006bf8:	4b6e      	ldr	r3, [pc, #440]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bfa:	681b      	ldr	r3, [r3, #0]
90006bfc:	4a6d      	ldr	r2, [pc, #436]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
90006c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006c04:	687b      	ldr	r3, [r7, #4]
90006c06:	685b      	ldr	r3, [r3, #4]
90006c08:	2b00      	cmp	r3, #0
90006c0a:	d013      	beq.n	90006c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006c0c:	f7fc fae6 	bl	900031dc <HAL_GetTick>
90006c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006c12:	e008      	b.n	90006c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006c14:	f7fc fae2 	bl	900031dc <HAL_GetTick>
90006c18:	4602      	mov	r2, r0
90006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c1c:	1ad3      	subs	r3, r2, r3
90006c1e:	2b64      	cmp	r3, #100	@ 0x64
90006c20:	d901      	bls.n	90006c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006c22:	2303      	movs	r3, #3
90006c24:	e3d4      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006c26:	4b63      	ldr	r3, [pc, #396]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006c28:	681b      	ldr	r3, [r3, #0]
90006c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006c2e:	2b00      	cmp	r3, #0
90006c30:	d0f0      	beq.n	90006c14 <HAL_RCC_OscConfig+0xe8>
90006c32:	e014      	b.n	90006c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006c34:	f7fc fad2 	bl	900031dc <HAL_GetTick>
90006c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006c3a:	e008      	b.n	90006c4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006c3c:	f7fc face 	bl	900031dc <HAL_GetTick>
90006c40:	4602      	mov	r2, r0
90006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006c44:	1ad3      	subs	r3, r2, r3
90006c46:	2b64      	cmp	r3, #100	@ 0x64
90006c48:	d901      	bls.n	90006c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006c4a:	2303      	movs	r3, #3
90006c4c:	e3c0      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006c4e:	4b59      	ldr	r3, [pc, #356]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006c50:	681b      	ldr	r3, [r3, #0]
90006c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90006c56:	2b00      	cmp	r3, #0
90006c58:	d1f0      	bne.n	90006c3c <HAL_RCC_OscConfig+0x110>
90006c5a:	e000      	b.n	90006c5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006c5e:	687b      	ldr	r3, [r7, #4]
90006c60:	681b      	ldr	r3, [r3, #0]
90006c62:	f003 0302 	and.w	r3, r3, #2
90006c66:	2b00      	cmp	r3, #0
90006c68:	f000 80ca 	beq.w	90006e00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006c6c:	4b51      	ldr	r3, [pc, #324]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006c6e:	691b      	ldr	r3, [r3, #16]
90006c70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006c74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006c76:	4b4f      	ldr	r3, [pc, #316]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006c7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006c7c:	6a3b      	ldr	r3, [r7, #32]
90006c7e:	2b00      	cmp	r3, #0
90006c80:	d007      	beq.n	90006c92 <HAL_RCC_OscConfig+0x166>
90006c82:	6a3b      	ldr	r3, [r7, #32]
90006c84:	2b18      	cmp	r3, #24
90006c86:	d156      	bne.n	90006d36 <HAL_RCC_OscConfig+0x20a>
90006c88:	69fb      	ldr	r3, [r7, #28]
90006c8a:	f003 0303 	and.w	r3, r3, #3
90006c8e:	2b00      	cmp	r3, #0
90006c90:	d151      	bne.n	90006d36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006c92:	4b48      	ldr	r3, [pc, #288]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006c94:	681b      	ldr	r3, [r3, #0]
90006c96:	f003 0304 	and.w	r3, r3, #4
90006c9a:	2b00      	cmp	r3, #0
90006c9c:	d005      	beq.n	90006caa <HAL_RCC_OscConfig+0x17e>
90006c9e:	687b      	ldr	r3, [r7, #4]
90006ca0:	68db      	ldr	r3, [r3, #12]
90006ca2:	2b00      	cmp	r3, #0
90006ca4:	d101      	bne.n	90006caa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006ca6:	2301      	movs	r3, #1
90006ca8:	e392      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006caa:	4b42      	ldr	r3, [pc, #264]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006cac:	681b      	ldr	r3, [r3, #0]
90006cae:	f023 0219 	bic.w	r2, r3, #25
90006cb2:	687b      	ldr	r3, [r7, #4]
90006cb4:	68db      	ldr	r3, [r3, #12]
90006cb6:	493f      	ldr	r1, [pc, #252]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006cb8:	4313      	orrs	r3, r2
90006cba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006cbc:	f7fc fa8e 	bl	900031dc <HAL_GetTick>
90006cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006cc2:	e008      	b.n	90006cd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006cc4:	f7fc fa8a 	bl	900031dc <HAL_GetTick>
90006cc8:	4602      	mov	r2, r0
90006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006ccc:	1ad3      	subs	r3, r2, r3
90006cce:	2b02      	cmp	r3, #2
90006cd0:	d901      	bls.n	90006cd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006cd2:	2303      	movs	r3, #3
90006cd4:	e37c      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006cd6:	4b37      	ldr	r3, [pc, #220]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006cd8:	681b      	ldr	r3, [r3, #0]
90006cda:	f003 0304 	and.w	r3, r3, #4
90006cde:	2b00      	cmp	r3, #0
90006ce0:	d0f0      	beq.n	90006cc4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006ce2:	f7fc faab 	bl	9000323c <HAL_GetREVID>
90006ce6:	4603      	mov	r3, r0
90006ce8:	f241 0203 	movw	r2, #4099	@ 0x1003
90006cec:	4293      	cmp	r3, r2
90006cee:	d817      	bhi.n	90006d20 <HAL_RCC_OscConfig+0x1f4>
90006cf0:	687b      	ldr	r3, [r7, #4]
90006cf2:	691b      	ldr	r3, [r3, #16]
90006cf4:	2b40      	cmp	r3, #64	@ 0x40
90006cf6:	d108      	bne.n	90006d0a <HAL_RCC_OscConfig+0x1de>
90006cf8:	4b2e      	ldr	r3, [pc, #184]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006cfa:	685b      	ldr	r3, [r3, #4]
90006cfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006d00:	4a2c      	ldr	r2, [pc, #176]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006d06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d08:	e07a      	b.n	90006e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d0a:	4b2a      	ldr	r3, [pc, #168]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d0c:	685b      	ldr	r3, [r3, #4]
90006d0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006d12:	687b      	ldr	r3, [r7, #4]
90006d14:	691b      	ldr	r3, [r3, #16]
90006d16:	031b      	lsls	r3, r3, #12
90006d18:	4926      	ldr	r1, [pc, #152]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d1a:	4313      	orrs	r3, r2
90006d1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d1e:	e06f      	b.n	90006e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d20:	4b24      	ldr	r3, [pc, #144]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d22:	685b      	ldr	r3, [r3, #4]
90006d24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006d28:	687b      	ldr	r3, [r7, #4]
90006d2a:	691b      	ldr	r3, [r3, #16]
90006d2c:	061b      	lsls	r3, r3, #24
90006d2e:	4921      	ldr	r1, [pc, #132]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d30:	4313      	orrs	r3, r2
90006d32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d34:	e064      	b.n	90006e00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006d36:	687b      	ldr	r3, [r7, #4]
90006d38:	68db      	ldr	r3, [r3, #12]
90006d3a:	2b00      	cmp	r3, #0
90006d3c:	d047      	beq.n	90006dce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006d3e:	4b1d      	ldr	r3, [pc, #116]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d40:	681b      	ldr	r3, [r3, #0]
90006d42:	f023 0219 	bic.w	r2, r3, #25
90006d46:	687b      	ldr	r3, [r7, #4]
90006d48:	68db      	ldr	r3, [r3, #12]
90006d4a:	491a      	ldr	r1, [pc, #104]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d4c:	4313      	orrs	r3, r2
90006d4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d50:	f7fc fa44 	bl	900031dc <HAL_GetTick>
90006d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006d56:	e008      	b.n	90006d6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006d58:	f7fc fa40 	bl	900031dc <HAL_GetTick>
90006d5c:	4602      	mov	r2, r0
90006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006d60:	1ad3      	subs	r3, r2, r3
90006d62:	2b02      	cmp	r3, #2
90006d64:	d901      	bls.n	90006d6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006d66:	2303      	movs	r3, #3
90006d68:	e332      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006d6a:	4b12      	ldr	r3, [pc, #72]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d6c:	681b      	ldr	r3, [r3, #0]
90006d6e:	f003 0304 	and.w	r3, r3, #4
90006d72:	2b00      	cmp	r3, #0
90006d74:	d0f0      	beq.n	90006d58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006d76:	f7fc fa61 	bl	9000323c <HAL_GetREVID>
90006d7a:	4603      	mov	r3, r0
90006d7c:	f241 0203 	movw	r2, #4099	@ 0x1003
90006d80:	4293      	cmp	r3, r2
90006d82:	d819      	bhi.n	90006db8 <HAL_RCC_OscConfig+0x28c>
90006d84:	687b      	ldr	r3, [r7, #4]
90006d86:	691b      	ldr	r3, [r3, #16]
90006d88:	2b40      	cmp	r3, #64	@ 0x40
90006d8a:	d108      	bne.n	90006d9e <HAL_RCC_OscConfig+0x272>
90006d8c:	4b09      	ldr	r3, [pc, #36]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d8e:	685b      	ldr	r3, [r3, #4]
90006d90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
90006d94:	4a07      	ldr	r2, [pc, #28]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90006d9a:	6053      	str	r3, [r2, #4]
90006d9c:	e030      	b.n	90006e00 <HAL_RCC_OscConfig+0x2d4>
90006d9e:	4b05      	ldr	r3, [pc, #20]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006da0:	685b      	ldr	r3, [r3, #4]
90006da2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
90006da6:	687b      	ldr	r3, [r7, #4]
90006da8:	691b      	ldr	r3, [r3, #16]
90006daa:	031b      	lsls	r3, r3, #12
90006dac:	4901      	ldr	r1, [pc, #4]	@ (90006db4 <HAL_RCC_OscConfig+0x288>)
90006dae:	4313      	orrs	r3, r2
90006db0:	604b      	str	r3, [r1, #4]
90006db2:	e025      	b.n	90006e00 <HAL_RCC_OscConfig+0x2d4>
90006db4:	58024400 	.word	0x58024400
90006db8:	4b9a      	ldr	r3, [pc, #616]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006dba:	685b      	ldr	r3, [r3, #4]
90006dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
90006dc0:	687b      	ldr	r3, [r7, #4]
90006dc2:	691b      	ldr	r3, [r3, #16]
90006dc4:	061b      	lsls	r3, r3, #24
90006dc6:	4997      	ldr	r1, [pc, #604]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006dc8:	4313      	orrs	r3, r2
90006dca:	604b      	str	r3, [r1, #4]
90006dcc:	e018      	b.n	90006e00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006dce:	4b95      	ldr	r3, [pc, #596]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006dd0:	681b      	ldr	r3, [r3, #0]
90006dd2:	4a94      	ldr	r2, [pc, #592]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006dd4:	f023 0301 	bic.w	r3, r3, #1
90006dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006dda:	f7fc f9ff 	bl	900031dc <HAL_GetTick>
90006dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006de0:	e008      	b.n	90006df4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006de2:	f7fc f9fb 	bl	900031dc <HAL_GetTick>
90006de6:	4602      	mov	r2, r0
90006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006dea:	1ad3      	subs	r3, r2, r3
90006dec:	2b02      	cmp	r3, #2
90006dee:	d901      	bls.n	90006df4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006df0:	2303      	movs	r3, #3
90006df2:	e2ed      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006df4:	4b8b      	ldr	r3, [pc, #556]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006df6:	681b      	ldr	r3, [r3, #0]
90006df8:	f003 0304 	and.w	r3, r3, #4
90006dfc:	2b00      	cmp	r3, #0
90006dfe:	d1f0      	bne.n	90006de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006e00:	687b      	ldr	r3, [r7, #4]
90006e02:	681b      	ldr	r3, [r3, #0]
90006e04:	f003 0310 	and.w	r3, r3, #16
90006e08:	2b00      	cmp	r3, #0
90006e0a:	f000 80a9 	beq.w	90006f60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006e0e:	4b85      	ldr	r3, [pc, #532]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e10:	691b      	ldr	r3, [r3, #16]
90006e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90006e16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006e18:	4b82      	ldr	r3, [pc, #520]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90006e1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006e1e:	69bb      	ldr	r3, [r7, #24]
90006e20:	2b08      	cmp	r3, #8
90006e22:	d007      	beq.n	90006e34 <HAL_RCC_OscConfig+0x308>
90006e24:	69bb      	ldr	r3, [r7, #24]
90006e26:	2b18      	cmp	r3, #24
90006e28:	d13a      	bne.n	90006ea0 <HAL_RCC_OscConfig+0x374>
90006e2a:	697b      	ldr	r3, [r7, #20]
90006e2c:	f003 0303 	and.w	r3, r3, #3
90006e30:	2b01      	cmp	r3, #1
90006e32:	d135      	bne.n	90006ea0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006e34:	4b7b      	ldr	r3, [pc, #492]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e36:	681b      	ldr	r3, [r3, #0]
90006e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006e3c:	2b00      	cmp	r3, #0
90006e3e:	d005      	beq.n	90006e4c <HAL_RCC_OscConfig+0x320>
90006e40:	687b      	ldr	r3, [r7, #4]
90006e42:	69db      	ldr	r3, [r3, #28]
90006e44:	2b80      	cmp	r3, #128	@ 0x80
90006e46:	d001      	beq.n	90006e4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006e48:	2301      	movs	r3, #1
90006e4a:	e2c1      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006e4c:	f7fc f9f6 	bl	9000323c <HAL_GetREVID>
90006e50:	4603      	mov	r3, r0
90006e52:	f241 0203 	movw	r2, #4099	@ 0x1003
90006e56:	4293      	cmp	r3, r2
90006e58:	d817      	bhi.n	90006e8a <HAL_RCC_OscConfig+0x35e>
90006e5a:	687b      	ldr	r3, [r7, #4]
90006e5c:	6a1b      	ldr	r3, [r3, #32]
90006e5e:	2b20      	cmp	r3, #32
90006e60:	d108      	bne.n	90006e74 <HAL_RCC_OscConfig+0x348>
90006e62:	4b70      	ldr	r3, [pc, #448]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e64:	685b      	ldr	r3, [r3, #4]
90006e66:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006e6a:	4a6e      	ldr	r2, [pc, #440]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006e70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006e72:	e075      	b.n	90006f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006e74:	4b6b      	ldr	r3, [pc, #428]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e76:	685b      	ldr	r3, [r3, #4]
90006e78:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006e7c:	687b      	ldr	r3, [r7, #4]
90006e7e:	6a1b      	ldr	r3, [r3, #32]
90006e80:	069b      	lsls	r3, r3, #26
90006e82:	4968      	ldr	r1, [pc, #416]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e84:	4313      	orrs	r3, r2
90006e86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006e88:	e06a      	b.n	90006f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006e8a:	4b66      	ldr	r3, [pc, #408]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e8c:	68db      	ldr	r3, [r3, #12]
90006e8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006e92:	687b      	ldr	r3, [r7, #4]
90006e94:	6a1b      	ldr	r3, [r3, #32]
90006e96:	061b      	lsls	r3, r3, #24
90006e98:	4962      	ldr	r1, [pc, #392]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006e9a:	4313      	orrs	r3, r2
90006e9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006e9e:	e05f      	b.n	90006f60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006ea0:	687b      	ldr	r3, [r7, #4]
90006ea2:	69db      	ldr	r3, [r3, #28]
90006ea4:	2b00      	cmp	r3, #0
90006ea6:	d042      	beq.n	90006f2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006ea8:	4b5e      	ldr	r3, [pc, #376]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006eaa:	681b      	ldr	r3, [r3, #0]
90006eac:	4a5d      	ldr	r2, [pc, #372]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
90006eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006eb4:	f7fc f992 	bl	900031dc <HAL_GetTick>
90006eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006eba:	e008      	b.n	90006ece <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006ebc:	f7fc f98e 	bl	900031dc <HAL_GetTick>
90006ec0:	4602      	mov	r2, r0
90006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006ec4:	1ad3      	subs	r3, r2, r3
90006ec6:	2b02      	cmp	r3, #2
90006ec8:	d901      	bls.n	90006ece <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006eca:	2303      	movs	r3, #3
90006ecc:	e280      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006ece:	4b55      	ldr	r3, [pc, #340]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006ed0:	681b      	ldr	r3, [r3, #0]
90006ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006ed6:	2b00      	cmp	r3, #0
90006ed8:	d0f0      	beq.n	90006ebc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006eda:	f7fc f9af 	bl	9000323c <HAL_GetREVID>
90006ede:	4603      	mov	r3, r0
90006ee0:	f241 0203 	movw	r2, #4099	@ 0x1003
90006ee4:	4293      	cmp	r3, r2
90006ee6:	d817      	bhi.n	90006f18 <HAL_RCC_OscConfig+0x3ec>
90006ee8:	687b      	ldr	r3, [r7, #4]
90006eea:	6a1b      	ldr	r3, [r3, #32]
90006eec:	2b20      	cmp	r3, #32
90006eee:	d108      	bne.n	90006f02 <HAL_RCC_OscConfig+0x3d6>
90006ef0:	4b4c      	ldr	r3, [pc, #304]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006ef2:	685b      	ldr	r3, [r3, #4]
90006ef4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
90006ef8:	4a4a      	ldr	r2, [pc, #296]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006efa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
90006efe:	6053      	str	r3, [r2, #4]
90006f00:	e02e      	b.n	90006f60 <HAL_RCC_OscConfig+0x434>
90006f02:	4b48      	ldr	r3, [pc, #288]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f04:	685b      	ldr	r3, [r3, #4]
90006f06:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
90006f0a:	687b      	ldr	r3, [r7, #4]
90006f0c:	6a1b      	ldr	r3, [r3, #32]
90006f0e:	069b      	lsls	r3, r3, #26
90006f10:	4944      	ldr	r1, [pc, #272]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f12:	4313      	orrs	r3, r2
90006f14:	604b      	str	r3, [r1, #4]
90006f16:	e023      	b.n	90006f60 <HAL_RCC_OscConfig+0x434>
90006f18:	4b42      	ldr	r3, [pc, #264]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f1a:	68db      	ldr	r3, [r3, #12]
90006f1c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
90006f20:	687b      	ldr	r3, [r7, #4]
90006f22:	6a1b      	ldr	r3, [r3, #32]
90006f24:	061b      	lsls	r3, r3, #24
90006f26:	493f      	ldr	r1, [pc, #252]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f28:	4313      	orrs	r3, r2
90006f2a:	60cb      	str	r3, [r1, #12]
90006f2c:	e018      	b.n	90006f60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90006f2e:	4b3d      	ldr	r3, [pc, #244]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f30:	681b      	ldr	r3, [r3, #0]
90006f32:	4a3c      	ldr	r2, [pc, #240]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
90006f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f3a:	f7fc f94f 	bl	900031dc <HAL_GetTick>
90006f3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006f40:	e008      	b.n	90006f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006f42:	f7fc f94b 	bl	900031dc <HAL_GetTick>
90006f46:	4602      	mov	r2, r0
90006f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f4a:	1ad3      	subs	r3, r2, r3
90006f4c:	2b02      	cmp	r3, #2
90006f4e:	d901      	bls.n	90006f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90006f50:	2303      	movs	r3, #3
90006f52:	e23d      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90006f54:	4b33      	ldr	r3, [pc, #204]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f56:	681b      	ldr	r3, [r3, #0]
90006f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90006f5c:	2b00      	cmp	r3, #0
90006f5e:	d1f0      	bne.n	90006f42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90006f60:	687b      	ldr	r3, [r7, #4]
90006f62:	681b      	ldr	r3, [r3, #0]
90006f64:	f003 0308 	and.w	r3, r3, #8
90006f68:	2b00      	cmp	r3, #0
90006f6a:	d036      	beq.n	90006fda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90006f6c:	687b      	ldr	r3, [r7, #4]
90006f6e:	695b      	ldr	r3, [r3, #20]
90006f70:	2b00      	cmp	r3, #0
90006f72:	d019      	beq.n	90006fa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90006f74:	4b2b      	ldr	r3, [pc, #172]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006f78:	4a2a      	ldr	r2, [pc, #168]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f7a:	f043 0301 	orr.w	r3, r3, #1
90006f7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006f80:	f7fc f92c 	bl	900031dc <HAL_GetTick>
90006f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006f86:	e008      	b.n	90006f9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006f88:	f7fc f928 	bl	900031dc <HAL_GetTick>
90006f8c:	4602      	mov	r2, r0
90006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006f90:	1ad3      	subs	r3, r2, r3
90006f92:	2b02      	cmp	r3, #2
90006f94:	d901      	bls.n	90006f9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90006f96:	2303      	movs	r3, #3
90006f98:	e21a      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90006f9a:	4b22      	ldr	r3, [pc, #136]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006f9e:	f003 0302 	and.w	r3, r3, #2
90006fa2:	2b00      	cmp	r3, #0
90006fa4:	d0f0      	beq.n	90006f88 <HAL_RCC_OscConfig+0x45c>
90006fa6:	e018      	b.n	90006fda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90006fa8:	4b1e      	ldr	r3, [pc, #120]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006fac:	4a1d      	ldr	r2, [pc, #116]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006fae:	f023 0301 	bic.w	r3, r3, #1
90006fb2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90006fb4:	f7fc f912 	bl	900031dc <HAL_GetTick>
90006fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90006fba:	e008      	b.n	90006fce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90006fbc:	f7fc f90e 	bl	900031dc <HAL_GetTick>
90006fc0:	4602      	mov	r2, r0
90006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90006fc4:	1ad3      	subs	r3, r2, r3
90006fc6:	2b02      	cmp	r3, #2
90006fc8:	d901      	bls.n	90006fce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90006fca:	2303      	movs	r3, #3
90006fcc:	e200      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90006fce:	4b15      	ldr	r3, [pc, #84]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90006fd2:	f003 0302 	and.w	r3, r3, #2
90006fd6:	2b00      	cmp	r3, #0
90006fd8:	d1f0      	bne.n	90006fbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90006fda:	687b      	ldr	r3, [r7, #4]
90006fdc:	681b      	ldr	r3, [r3, #0]
90006fde:	f003 0320 	and.w	r3, r3, #32
90006fe2:	2b00      	cmp	r3, #0
90006fe4:	d039      	beq.n	9000705a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90006fe6:	687b      	ldr	r3, [r7, #4]
90006fe8:	699b      	ldr	r3, [r3, #24]
90006fea:	2b00      	cmp	r3, #0
90006fec:	d01c      	beq.n	90007028 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90006fee:	4b0d      	ldr	r3, [pc, #52]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006ff0:	681b      	ldr	r3, [r3, #0]
90006ff2:	4a0c      	ldr	r2, [pc, #48]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90006ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
90006ff8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90006ffa:	f7fc f8ef 	bl	900031dc <HAL_GetTick>
90006ffe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007000:	e008      	b.n	90007014 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007002:	f7fc f8eb 	bl	900031dc <HAL_GetTick>
90007006:	4602      	mov	r2, r0
90007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000700a:	1ad3      	subs	r3, r2, r3
9000700c:	2b02      	cmp	r3, #2
9000700e:	d901      	bls.n	90007014 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007010:	2303      	movs	r3, #3
90007012:	e1dd      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90007014:	4b03      	ldr	r3, [pc, #12]	@ (90007024 <HAL_RCC_OscConfig+0x4f8>)
90007016:	681b      	ldr	r3, [r3, #0]
90007018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
9000701c:	2b00      	cmp	r3, #0
9000701e:	d0f0      	beq.n	90007002 <HAL_RCC_OscConfig+0x4d6>
90007020:	e01b      	b.n	9000705a <HAL_RCC_OscConfig+0x52e>
90007022:	bf00      	nop
90007024:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007028:	4b9b      	ldr	r3, [pc, #620]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000702a:	681b      	ldr	r3, [r3, #0]
9000702c:	4a9a      	ldr	r2, [pc, #616]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000702e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
90007032:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90007034:	f7fc f8d2 	bl	900031dc <HAL_GetTick>
90007038:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000703a:	e008      	b.n	9000704e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000703c:	f7fc f8ce 	bl	900031dc <HAL_GetTick>
90007040:	4602      	mov	r2, r0
90007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007044:	1ad3      	subs	r3, r2, r3
90007046:	2b02      	cmp	r3, #2
90007048:	d901      	bls.n	9000704e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
9000704a:	2303      	movs	r3, #3
9000704c:	e1c0      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000704e:	4b92      	ldr	r3, [pc, #584]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007050:	681b      	ldr	r3, [r3, #0]
90007052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
90007056:	2b00      	cmp	r3, #0
90007058:	d1f0      	bne.n	9000703c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000705a:	687b      	ldr	r3, [r7, #4]
9000705c:	681b      	ldr	r3, [r3, #0]
9000705e:	f003 0304 	and.w	r3, r3, #4
90007062:	2b00      	cmp	r3, #0
90007064:	f000 8081 	beq.w	9000716a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90007068:	4b8c      	ldr	r3, [pc, #560]	@ (9000729c <HAL_RCC_OscConfig+0x770>)
9000706a:	681b      	ldr	r3, [r3, #0]
9000706c:	4a8b      	ldr	r2, [pc, #556]	@ (9000729c <HAL_RCC_OscConfig+0x770>)
9000706e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
90007072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90007074:	f7fc f8b2 	bl	900031dc <HAL_GetTick>
90007078:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000707a:	e008      	b.n	9000708e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000707c:	f7fc f8ae 	bl	900031dc <HAL_GetTick>
90007080:	4602      	mov	r2, r0
90007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007084:	1ad3      	subs	r3, r2, r3
90007086:	2b64      	cmp	r3, #100	@ 0x64
90007088:	d901      	bls.n	9000708e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
9000708a:	2303      	movs	r3, #3
9000708c:	e1a0      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000708e:	4b83      	ldr	r3, [pc, #524]	@ (9000729c <HAL_RCC_OscConfig+0x770>)
90007090:	681b      	ldr	r3, [r3, #0]
90007092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007096:	2b00      	cmp	r3, #0
90007098:	d0f0      	beq.n	9000707c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000709a:	687b      	ldr	r3, [r7, #4]
9000709c:	689b      	ldr	r3, [r3, #8]
9000709e:	2b01      	cmp	r3, #1
900070a0:	d106      	bne.n	900070b0 <HAL_RCC_OscConfig+0x584>
900070a2:	4b7d      	ldr	r3, [pc, #500]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900070a6:	4a7c      	ldr	r2, [pc, #496]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070a8:	f043 0301 	orr.w	r3, r3, #1
900070ac:	6713      	str	r3, [r2, #112]	@ 0x70
900070ae:	e02d      	b.n	9000710c <HAL_RCC_OscConfig+0x5e0>
900070b0:	687b      	ldr	r3, [r7, #4]
900070b2:	689b      	ldr	r3, [r3, #8]
900070b4:	2b00      	cmp	r3, #0
900070b6:	d10c      	bne.n	900070d2 <HAL_RCC_OscConfig+0x5a6>
900070b8:	4b77      	ldr	r3, [pc, #476]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900070bc:	4a76      	ldr	r2, [pc, #472]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070be:	f023 0301 	bic.w	r3, r3, #1
900070c2:	6713      	str	r3, [r2, #112]	@ 0x70
900070c4:	4b74      	ldr	r3, [pc, #464]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900070c8:	4a73      	ldr	r2, [pc, #460]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070ca:	f023 0304 	bic.w	r3, r3, #4
900070ce:	6713      	str	r3, [r2, #112]	@ 0x70
900070d0:	e01c      	b.n	9000710c <HAL_RCC_OscConfig+0x5e0>
900070d2:	687b      	ldr	r3, [r7, #4]
900070d4:	689b      	ldr	r3, [r3, #8]
900070d6:	2b05      	cmp	r3, #5
900070d8:	d10c      	bne.n	900070f4 <HAL_RCC_OscConfig+0x5c8>
900070da:	4b6f      	ldr	r3, [pc, #444]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900070de:	4a6e      	ldr	r2, [pc, #440]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070e0:	f043 0304 	orr.w	r3, r3, #4
900070e4:	6713      	str	r3, [r2, #112]	@ 0x70
900070e6:	4b6c      	ldr	r3, [pc, #432]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900070ea:	4a6b      	ldr	r2, [pc, #428]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070ec:	f043 0301 	orr.w	r3, r3, #1
900070f0:	6713      	str	r3, [r2, #112]	@ 0x70
900070f2:	e00b      	b.n	9000710c <HAL_RCC_OscConfig+0x5e0>
900070f4:	4b68      	ldr	r3, [pc, #416]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900070f8:	4a67      	ldr	r2, [pc, #412]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900070fa:	f023 0301 	bic.w	r3, r3, #1
900070fe:	6713      	str	r3, [r2, #112]	@ 0x70
90007100:	4b65      	ldr	r3, [pc, #404]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007104:	4a64      	ldr	r2, [pc, #400]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007106:	f023 0304 	bic.w	r3, r3, #4
9000710a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000710c:	687b      	ldr	r3, [r7, #4]
9000710e:	689b      	ldr	r3, [r3, #8]
90007110:	2b00      	cmp	r3, #0
90007112:	d015      	beq.n	90007140 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007114:	f7fc f862 	bl	900031dc <HAL_GetTick>
90007118:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000711a:	e00a      	b.n	90007132 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000711c:	f7fc f85e 	bl	900031dc <HAL_GetTick>
90007120:	4602      	mov	r2, r0
90007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007124:	1ad3      	subs	r3, r2, r3
90007126:	f241 3288 	movw	r2, #5000	@ 0x1388
9000712a:	4293      	cmp	r3, r2
9000712c:	d901      	bls.n	90007132 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
9000712e:	2303      	movs	r3, #3
90007130:	e14e      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007132:	4b59      	ldr	r3, [pc, #356]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007136:	f003 0302 	and.w	r3, r3, #2
9000713a:	2b00      	cmp	r3, #0
9000713c:	d0ee      	beq.n	9000711c <HAL_RCC_OscConfig+0x5f0>
9000713e:	e014      	b.n	9000716a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007140:	f7fc f84c 	bl	900031dc <HAL_GetTick>
90007144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007146:	e00a      	b.n	9000715e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007148:	f7fc f848 	bl	900031dc <HAL_GetTick>
9000714c:	4602      	mov	r2, r0
9000714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
90007150:	1ad3      	subs	r3, r2, r3
90007152:	f241 3288 	movw	r2, #5000	@ 0x1388
90007156:	4293      	cmp	r3, r2
90007158:	d901      	bls.n	9000715e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
9000715a:	2303      	movs	r3, #3
9000715c:	e138      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000715e:	4b4e      	ldr	r3, [pc, #312]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90007162:	f003 0302 	and.w	r3, r3, #2
90007166:	2b00      	cmp	r3, #0
90007168:	d1ee      	bne.n	90007148 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000716a:	687b      	ldr	r3, [r7, #4]
9000716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000716e:	2b00      	cmp	r3, #0
90007170:	f000 812d 	beq.w	900073ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90007174:	4b48      	ldr	r3, [pc, #288]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007176:	691b      	ldr	r3, [r3, #16]
90007178:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000717c:	2b18      	cmp	r3, #24
9000717e:	f000 80bd 	beq.w	900072fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90007182:	687b      	ldr	r3, [r7, #4]
90007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
90007186:	2b02      	cmp	r3, #2
90007188:	f040 809e 	bne.w	900072c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000718c:	4b42      	ldr	r3, [pc, #264]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000718e:	681b      	ldr	r3, [r3, #0]
90007190:	4a41      	ldr	r2, [pc, #260]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
90007196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007198:	f7fc f820 	bl	900031dc <HAL_GetTick>
9000719c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000719e:	e008      	b.n	900071b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900071a0:	f7fc f81c 	bl	900031dc <HAL_GetTick>
900071a4:	4602      	mov	r2, r0
900071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900071a8:	1ad3      	subs	r3, r2, r3
900071aa:	2b02      	cmp	r3, #2
900071ac:	d901      	bls.n	900071b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900071ae:	2303      	movs	r3, #3
900071b0:	e10e      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900071b2:	4b39      	ldr	r3, [pc, #228]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900071b4:	681b      	ldr	r3, [r3, #0]
900071b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900071ba:	2b00      	cmp	r3, #0
900071bc:	d1f0      	bne.n	900071a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900071be:	4b36      	ldr	r3, [pc, #216]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900071c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
900071c2:	4b37      	ldr	r3, [pc, #220]	@ (900072a0 <HAL_RCC_OscConfig+0x774>)
900071c4:	4013      	ands	r3, r2
900071c6:	687a      	ldr	r2, [r7, #4]
900071c8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
900071ca:	687a      	ldr	r2, [r7, #4]
900071cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
900071ce:	0112      	lsls	r2, r2, #4
900071d0:	430a      	orrs	r2, r1
900071d2:	4931      	ldr	r1, [pc, #196]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
900071d4:	4313      	orrs	r3, r2
900071d6:	628b      	str	r3, [r1, #40]	@ 0x28
900071d8:	687b      	ldr	r3, [r7, #4]
900071da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900071dc:	3b01      	subs	r3, #1
900071de:	f3c3 0208 	ubfx	r2, r3, #0, #9
900071e2:	687b      	ldr	r3, [r7, #4]
900071e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
900071e6:	3b01      	subs	r3, #1
900071e8:	025b      	lsls	r3, r3, #9
900071ea:	b29b      	uxth	r3, r3
900071ec:	431a      	orrs	r2, r3
900071ee:	687b      	ldr	r3, [r7, #4]
900071f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900071f2:	3b01      	subs	r3, #1
900071f4:	041b      	lsls	r3, r3, #16
900071f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
900071fa:	431a      	orrs	r2, r3
900071fc:	687b      	ldr	r3, [r7, #4]
900071fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90007200:	3b01      	subs	r3, #1
90007202:	061b      	lsls	r3, r3, #24
90007204:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90007208:	4923      	ldr	r1, [pc, #140]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000720a:	4313      	orrs	r3, r2
9000720c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
9000720e:	4b22      	ldr	r3, [pc, #136]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007212:	4a21      	ldr	r2, [pc, #132]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007214:	f023 0301 	bic.w	r3, r3, #1
90007218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000721a:	4b1f      	ldr	r3, [pc, #124]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000721c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000721e:	4b21      	ldr	r3, [pc, #132]	@ (900072a4 <HAL_RCC_OscConfig+0x778>)
90007220:	4013      	ands	r3, r2
90007222:	687a      	ldr	r2, [r7, #4]
90007224:	6c92      	ldr	r2, [r2, #72]	@ 0x48
90007226:	00d2      	lsls	r2, r2, #3
90007228:	491b      	ldr	r1, [pc, #108]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000722a:	4313      	orrs	r3, r2
9000722c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000722e:	4b1a      	ldr	r3, [pc, #104]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007232:	f023 020c 	bic.w	r2, r3, #12
90007236:	687b      	ldr	r3, [r7, #4]
90007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000723a:	4917      	ldr	r1, [pc, #92]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000723c:	4313      	orrs	r3, r2
9000723e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007240:	4b15      	ldr	r3, [pc, #84]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007244:	f023 0202 	bic.w	r2, r3, #2
90007248:	687b      	ldr	r3, [r7, #4]
9000724a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000724c:	4912      	ldr	r1, [pc, #72]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000724e:	4313      	orrs	r3, r2
90007250:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90007252:	4b11      	ldr	r3, [pc, #68]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007256:	4a10      	ldr	r2, [pc, #64]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000725c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000725e:	4b0e      	ldr	r3, [pc, #56]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007262:	4a0d      	ldr	r2, [pc, #52]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000726a:	4b0b      	ldr	r3, [pc, #44]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000726c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000726e:	4a0a      	ldr	r2, [pc, #40]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
90007274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
90007276:	4b08      	ldr	r3, [pc, #32]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000727a:	4a07      	ldr	r2, [pc, #28]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
9000727c:	f043 0301 	orr.w	r3, r3, #1
90007280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90007282:	4b05      	ldr	r3, [pc, #20]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007284:	681b      	ldr	r3, [r3, #0]
90007286:	4a04      	ldr	r2, [pc, #16]	@ (90007298 <HAL_RCC_OscConfig+0x76c>)
90007288:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
9000728c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000728e:	f7fb ffa5 	bl	900031dc <HAL_GetTick>
90007292:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007294:	e011      	b.n	900072ba <HAL_RCC_OscConfig+0x78e>
90007296:	bf00      	nop
90007298:	58024400 	.word	0x58024400
9000729c:	58024800 	.word	0x58024800
900072a0:	fffffc0c 	.word	0xfffffc0c
900072a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900072a8:	f7fb ff98 	bl	900031dc <HAL_GetTick>
900072ac:	4602      	mov	r2, r0
900072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900072b0:	1ad3      	subs	r3, r2, r3
900072b2:	2b02      	cmp	r3, #2
900072b4:	d901      	bls.n	900072ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
900072b6:	2303      	movs	r3, #3
900072b8:	e08a      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900072ba:	4b47      	ldr	r3, [pc, #284]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900072bc:	681b      	ldr	r3, [r3, #0]
900072be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900072c2:	2b00      	cmp	r3, #0
900072c4:	d0f0      	beq.n	900072a8 <HAL_RCC_OscConfig+0x77c>
900072c6:	e082      	b.n	900073ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900072c8:	4b43      	ldr	r3, [pc, #268]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900072ca:	681b      	ldr	r3, [r3, #0]
900072cc:	4a42      	ldr	r2, [pc, #264]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900072ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
900072d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900072d4:	f7fb ff82 	bl	900031dc <HAL_GetTick>
900072d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900072da:	e008      	b.n	900072ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900072dc:	f7fb ff7e 	bl	900031dc <HAL_GetTick>
900072e0:	4602      	mov	r2, r0
900072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900072e4:	1ad3      	subs	r3, r2, r3
900072e6:	2b02      	cmp	r3, #2
900072e8:	d901      	bls.n	900072ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
900072ea:	2303      	movs	r3, #3
900072ec:	e070      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900072ee:	4b3a      	ldr	r3, [pc, #232]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900072f0:	681b      	ldr	r3, [r3, #0]
900072f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
900072f6:	2b00      	cmp	r3, #0
900072f8:	d1f0      	bne.n	900072dc <HAL_RCC_OscConfig+0x7b0>
900072fa:	e068      	b.n	900073ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
900072fc:	4b36      	ldr	r3, [pc, #216]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900072fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007300:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90007302:	4b35      	ldr	r3, [pc, #212]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
90007304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007306:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007308:	687b      	ldr	r3, [r7, #4]
9000730a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000730c:	2b01      	cmp	r3, #1
9000730e:	d031      	beq.n	90007374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007310:	693b      	ldr	r3, [r7, #16]
90007312:	f003 0203 	and.w	r2, r3, #3
90007316:	687b      	ldr	r3, [r7, #4]
90007318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000731a:	429a      	cmp	r2, r3
9000731c:	d12a      	bne.n	90007374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000731e:	693b      	ldr	r3, [r7, #16]
90007320:	091b      	lsrs	r3, r3, #4
90007322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
90007326:	687b      	ldr	r3, [r7, #4]
90007328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000732a:	429a      	cmp	r2, r3
9000732c:	d122      	bne.n	90007374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000732e:	68fb      	ldr	r3, [r7, #12]
90007330:	f3c3 0208 	ubfx	r2, r3, #0, #9
90007334:	687b      	ldr	r3, [r7, #4]
90007336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007338:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000733a:	429a      	cmp	r2, r3
9000733c:	d11a      	bne.n	90007374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000733e:	68fb      	ldr	r3, [r7, #12]
90007340:	0a5b      	lsrs	r3, r3, #9
90007342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007346:	687b      	ldr	r3, [r7, #4]
90007348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000734a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000734c:	429a      	cmp	r2, r3
9000734e:	d111      	bne.n	90007374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007350:	68fb      	ldr	r3, [r7, #12]
90007352:	0c1b      	lsrs	r3, r3, #16
90007354:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
90007358:	687b      	ldr	r3, [r7, #4]
9000735a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000735c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000735e:	429a      	cmp	r2, r3
90007360:	d108      	bne.n	90007374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90007362:	68fb      	ldr	r3, [r7, #12]
90007364:	0e1b      	lsrs	r3, r3, #24
90007366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
9000736a:	687b      	ldr	r3, [r7, #4]
9000736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
9000736e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007370:	429a      	cmp	r2, r3
90007372:	d001      	beq.n	90007378 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90007374:	2301      	movs	r3, #1
90007376:	e02b      	b.n	900073d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90007378:	4b17      	ldr	r3, [pc, #92]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
9000737a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
9000737c:	08db      	lsrs	r3, r3, #3
9000737e:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007382:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
90007384:	687b      	ldr	r3, [r7, #4]
90007386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
90007388:	693a      	ldr	r2, [r7, #16]
9000738a:	429a      	cmp	r2, r3
9000738c:	d01f      	beq.n	900073ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
9000738e:	4b12      	ldr	r3, [pc, #72]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
90007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007392:	4a11      	ldr	r2, [pc, #68]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
90007394:	f023 0301 	bic.w	r3, r3, #1
90007398:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
9000739a:	f7fb ff1f 	bl	900031dc <HAL_GetTick>
9000739e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
900073a0:	bf00      	nop
900073a2:	f7fb ff1b 	bl	900031dc <HAL_GetTick>
900073a6:	4602      	mov	r2, r0
900073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
900073aa:	4293      	cmp	r3, r2
900073ac:	d0f9      	beq.n	900073a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900073ae:	4b0a      	ldr	r3, [pc, #40]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900073b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
900073b2:	4b0a      	ldr	r3, [pc, #40]	@ (900073dc <HAL_RCC_OscConfig+0x8b0>)
900073b4:	4013      	ands	r3, r2
900073b6:	687a      	ldr	r2, [r7, #4]
900073b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
900073ba:	00d2      	lsls	r2, r2, #3
900073bc:	4906      	ldr	r1, [pc, #24]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900073be:	4313      	orrs	r3, r2
900073c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
900073c2:	4b05      	ldr	r3, [pc, #20]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900073c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900073c6:	4a04      	ldr	r2, [pc, #16]	@ (900073d8 <HAL_RCC_OscConfig+0x8ac>)
900073c8:	f043 0301 	orr.w	r3, r3, #1
900073cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
900073ce:	2300      	movs	r3, #0
}
900073d0:	4618      	mov	r0, r3
900073d2:	3730      	adds	r7, #48	@ 0x30
900073d4:	46bd      	mov	sp, r7
900073d6:	bd80      	pop	{r7, pc}
900073d8:	58024400 	.word	0x58024400
900073dc:	ffff0007 	.word	0xffff0007

900073e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900073e0:	b580      	push	{r7, lr}
900073e2:	b086      	sub	sp, #24
900073e4:	af00      	add	r7, sp, #0
900073e6:	6078      	str	r0, [r7, #4]
900073e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900073ea:	687b      	ldr	r3, [r7, #4]
900073ec:	2b00      	cmp	r3, #0
900073ee:	d101      	bne.n	900073f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900073f0:	2301      	movs	r3, #1
900073f2:	e19c      	b.n	9000772e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900073f4:	4b8a      	ldr	r3, [pc, #552]	@ (90007620 <HAL_RCC_ClockConfig+0x240>)
900073f6:	681b      	ldr	r3, [r3, #0]
900073f8:	f003 030f 	and.w	r3, r3, #15
900073fc:	683a      	ldr	r2, [r7, #0]
900073fe:	429a      	cmp	r2, r3
90007400:	d910      	bls.n	90007424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90007402:	4b87      	ldr	r3, [pc, #540]	@ (90007620 <HAL_RCC_ClockConfig+0x240>)
90007404:	681b      	ldr	r3, [r3, #0]
90007406:	f023 020f 	bic.w	r2, r3, #15
9000740a:	4985      	ldr	r1, [pc, #532]	@ (90007620 <HAL_RCC_ClockConfig+0x240>)
9000740c:	683b      	ldr	r3, [r7, #0]
9000740e:	4313      	orrs	r3, r2
90007410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007412:	4b83      	ldr	r3, [pc, #524]	@ (90007620 <HAL_RCC_ClockConfig+0x240>)
90007414:	681b      	ldr	r3, [r3, #0]
90007416:	f003 030f 	and.w	r3, r3, #15
9000741a:	683a      	ldr	r2, [r7, #0]
9000741c:	429a      	cmp	r2, r3
9000741e:	d001      	beq.n	90007424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007420:	2301      	movs	r3, #1
90007422:	e184      	b.n	9000772e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007424:	687b      	ldr	r3, [r7, #4]
90007426:	681b      	ldr	r3, [r3, #0]
90007428:	f003 0304 	and.w	r3, r3, #4
9000742c:	2b00      	cmp	r3, #0
9000742e:	d010      	beq.n	90007452 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007430:	687b      	ldr	r3, [r7, #4]
90007432:	691a      	ldr	r2, [r3, #16]
90007434:	4b7b      	ldr	r3, [pc, #492]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007436:	699b      	ldr	r3, [r3, #24]
90007438:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000743c:	429a      	cmp	r2, r3
9000743e:	d908      	bls.n	90007452 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007440:	4b78      	ldr	r3, [pc, #480]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007442:	699b      	ldr	r3, [r3, #24]
90007444:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007448:	687b      	ldr	r3, [r7, #4]
9000744a:	691b      	ldr	r3, [r3, #16]
9000744c:	4975      	ldr	r1, [pc, #468]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
9000744e:	4313      	orrs	r3, r2
90007450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007452:	687b      	ldr	r3, [r7, #4]
90007454:	681b      	ldr	r3, [r3, #0]
90007456:	f003 0308 	and.w	r3, r3, #8
9000745a:	2b00      	cmp	r3, #0
9000745c:	d010      	beq.n	90007480 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000745e:	687b      	ldr	r3, [r7, #4]
90007460:	695a      	ldr	r2, [r3, #20]
90007462:	4b70      	ldr	r3, [pc, #448]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007464:	69db      	ldr	r3, [r3, #28]
90007466:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000746a:	429a      	cmp	r2, r3
9000746c:	d908      	bls.n	90007480 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000746e:	4b6d      	ldr	r3, [pc, #436]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007470:	69db      	ldr	r3, [r3, #28]
90007472:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
90007476:	687b      	ldr	r3, [r7, #4]
90007478:	695b      	ldr	r3, [r3, #20]
9000747a:	496a      	ldr	r1, [pc, #424]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
9000747c:	4313      	orrs	r3, r2
9000747e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007480:	687b      	ldr	r3, [r7, #4]
90007482:	681b      	ldr	r3, [r3, #0]
90007484:	f003 0310 	and.w	r3, r3, #16
90007488:	2b00      	cmp	r3, #0
9000748a:	d010      	beq.n	900074ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000748c:	687b      	ldr	r3, [r7, #4]
9000748e:	699a      	ldr	r2, [r3, #24]
90007490:	4b64      	ldr	r3, [pc, #400]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007492:	69db      	ldr	r3, [r3, #28]
90007494:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
90007498:	429a      	cmp	r2, r3
9000749a:	d908      	bls.n	900074ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000749c:	4b61      	ldr	r3, [pc, #388]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
9000749e:	69db      	ldr	r3, [r3, #28]
900074a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900074a4:	687b      	ldr	r3, [r7, #4]
900074a6:	699b      	ldr	r3, [r3, #24]
900074a8:	495e      	ldr	r1, [pc, #376]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900074aa:	4313      	orrs	r3, r2
900074ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900074ae:	687b      	ldr	r3, [r7, #4]
900074b0:	681b      	ldr	r3, [r3, #0]
900074b2:	f003 0320 	and.w	r3, r3, #32
900074b6:	2b00      	cmp	r3, #0
900074b8:	d010      	beq.n	900074dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900074ba:	687b      	ldr	r3, [r7, #4]
900074bc:	69da      	ldr	r2, [r3, #28]
900074be:	4b59      	ldr	r3, [pc, #356]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900074c0:	6a1b      	ldr	r3, [r3, #32]
900074c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900074c6:	429a      	cmp	r2, r3
900074c8:	d908      	bls.n	900074dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900074ca:	4b56      	ldr	r3, [pc, #344]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900074cc:	6a1b      	ldr	r3, [r3, #32]
900074ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900074d2:	687b      	ldr	r3, [r7, #4]
900074d4:	69db      	ldr	r3, [r3, #28]
900074d6:	4953      	ldr	r1, [pc, #332]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900074d8:	4313      	orrs	r3, r2
900074da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900074dc:	687b      	ldr	r3, [r7, #4]
900074de:	681b      	ldr	r3, [r3, #0]
900074e0:	f003 0302 	and.w	r3, r3, #2
900074e4:	2b00      	cmp	r3, #0
900074e6:	d010      	beq.n	9000750a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900074e8:	687b      	ldr	r3, [r7, #4]
900074ea:	68da      	ldr	r2, [r3, #12]
900074ec:	4b4d      	ldr	r3, [pc, #308]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900074ee:	699b      	ldr	r3, [r3, #24]
900074f0:	f003 030f 	and.w	r3, r3, #15
900074f4:	429a      	cmp	r2, r3
900074f6:	d908      	bls.n	9000750a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900074f8:	4b4a      	ldr	r3, [pc, #296]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900074fa:	699b      	ldr	r3, [r3, #24]
900074fc:	f023 020f 	bic.w	r2, r3, #15
90007500:	687b      	ldr	r3, [r7, #4]
90007502:	68db      	ldr	r3, [r3, #12]
90007504:	4947      	ldr	r1, [pc, #284]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007506:	4313      	orrs	r3, r2
90007508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000750a:	687b      	ldr	r3, [r7, #4]
9000750c:	681b      	ldr	r3, [r3, #0]
9000750e:	f003 0301 	and.w	r3, r3, #1
90007512:	2b00      	cmp	r3, #0
90007514:	d055      	beq.n	900075c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90007516:	4b43      	ldr	r3, [pc, #268]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007518:	699b      	ldr	r3, [r3, #24]
9000751a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
9000751e:	687b      	ldr	r3, [r7, #4]
90007520:	689b      	ldr	r3, [r3, #8]
90007522:	4940      	ldr	r1, [pc, #256]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007524:	4313      	orrs	r3, r2
90007526:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007528:	687b      	ldr	r3, [r7, #4]
9000752a:	685b      	ldr	r3, [r3, #4]
9000752c:	2b02      	cmp	r3, #2
9000752e:	d107      	bne.n	90007540 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007530:	4b3c      	ldr	r3, [pc, #240]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007532:	681b      	ldr	r3, [r3, #0]
90007534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
90007538:	2b00      	cmp	r3, #0
9000753a:	d121      	bne.n	90007580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000753c:	2301      	movs	r3, #1
9000753e:	e0f6      	b.n	9000772e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007540:	687b      	ldr	r3, [r7, #4]
90007542:	685b      	ldr	r3, [r3, #4]
90007544:	2b03      	cmp	r3, #3
90007546:	d107      	bne.n	90007558 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007548:	4b36      	ldr	r3, [pc, #216]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
9000754a:	681b      	ldr	r3, [r3, #0]
9000754c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
90007550:	2b00      	cmp	r3, #0
90007552:	d115      	bne.n	90007580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007554:	2301      	movs	r3, #1
90007556:	e0ea      	b.n	9000772e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90007558:	687b      	ldr	r3, [r7, #4]
9000755a:	685b      	ldr	r3, [r3, #4]
9000755c:	2b01      	cmp	r3, #1
9000755e:	d107      	bne.n	90007570 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007560:	4b30      	ldr	r3, [pc, #192]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007562:	681b      	ldr	r3, [r3, #0]
90007564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90007568:	2b00      	cmp	r3, #0
9000756a:	d109      	bne.n	90007580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000756c:	2301      	movs	r3, #1
9000756e:	e0de      	b.n	9000772e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007570:	4b2c      	ldr	r3, [pc, #176]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007572:	681b      	ldr	r3, [r3, #0]
90007574:	f003 0304 	and.w	r3, r3, #4
90007578:	2b00      	cmp	r3, #0
9000757a:	d101      	bne.n	90007580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000757c:	2301      	movs	r3, #1
9000757e:	e0d6      	b.n	9000772e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007580:	4b28      	ldr	r3, [pc, #160]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
90007582:	691b      	ldr	r3, [r3, #16]
90007584:	f023 0207 	bic.w	r2, r3, #7
90007588:	687b      	ldr	r3, [r7, #4]
9000758a:	685b      	ldr	r3, [r3, #4]
9000758c:	4925      	ldr	r1, [pc, #148]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
9000758e:	4313      	orrs	r3, r2
90007590:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90007592:	f7fb fe23 	bl	900031dc <HAL_GetTick>
90007596:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007598:	e00a      	b.n	900075b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000759a:	f7fb fe1f 	bl	900031dc <HAL_GetTick>
9000759e:	4602      	mov	r2, r0
900075a0:	697b      	ldr	r3, [r7, #20]
900075a2:	1ad3      	subs	r3, r2, r3
900075a4:	f241 3288 	movw	r2, #5000	@ 0x1388
900075a8:	4293      	cmp	r3, r2
900075aa:	d901      	bls.n	900075b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
900075ac:	2303      	movs	r3, #3
900075ae:	e0be      	b.n	9000772e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900075b0:	4b1c      	ldr	r3, [pc, #112]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900075b2:	691b      	ldr	r3, [r3, #16]
900075b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
900075b8:	687b      	ldr	r3, [r7, #4]
900075ba:	685b      	ldr	r3, [r3, #4]
900075bc:	00db      	lsls	r3, r3, #3
900075be:	429a      	cmp	r2, r3
900075c0:	d1eb      	bne.n	9000759a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900075c2:	687b      	ldr	r3, [r7, #4]
900075c4:	681b      	ldr	r3, [r3, #0]
900075c6:	f003 0302 	and.w	r3, r3, #2
900075ca:	2b00      	cmp	r3, #0
900075cc:	d010      	beq.n	900075f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900075ce:	687b      	ldr	r3, [r7, #4]
900075d0:	68da      	ldr	r2, [r3, #12]
900075d2:	4b14      	ldr	r3, [pc, #80]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900075d4:	699b      	ldr	r3, [r3, #24]
900075d6:	f003 030f 	and.w	r3, r3, #15
900075da:	429a      	cmp	r2, r3
900075dc:	d208      	bcs.n	900075f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900075de:	4b11      	ldr	r3, [pc, #68]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900075e0:	699b      	ldr	r3, [r3, #24]
900075e2:	f023 020f 	bic.w	r2, r3, #15
900075e6:	687b      	ldr	r3, [r7, #4]
900075e8:	68db      	ldr	r3, [r3, #12]
900075ea:	490e      	ldr	r1, [pc, #56]	@ (90007624 <HAL_RCC_ClockConfig+0x244>)
900075ec:	4313      	orrs	r3, r2
900075ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900075f0:	4b0b      	ldr	r3, [pc, #44]	@ (90007620 <HAL_RCC_ClockConfig+0x240>)
900075f2:	681b      	ldr	r3, [r3, #0]
900075f4:	f003 030f 	and.w	r3, r3, #15
900075f8:	683a      	ldr	r2, [r7, #0]
900075fa:	429a      	cmp	r2, r3
900075fc:	d214      	bcs.n	90007628 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900075fe:	4b08      	ldr	r3, [pc, #32]	@ (90007620 <HAL_RCC_ClockConfig+0x240>)
90007600:	681b      	ldr	r3, [r3, #0]
90007602:	f023 020f 	bic.w	r2, r3, #15
90007606:	4906      	ldr	r1, [pc, #24]	@ (90007620 <HAL_RCC_ClockConfig+0x240>)
90007608:	683b      	ldr	r3, [r7, #0]
9000760a:	4313      	orrs	r3, r2
9000760c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000760e:	4b04      	ldr	r3, [pc, #16]	@ (90007620 <HAL_RCC_ClockConfig+0x240>)
90007610:	681b      	ldr	r3, [r3, #0]
90007612:	f003 030f 	and.w	r3, r3, #15
90007616:	683a      	ldr	r2, [r7, #0]
90007618:	429a      	cmp	r2, r3
9000761a:	d005      	beq.n	90007628 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
9000761c:	2301      	movs	r3, #1
9000761e:	e086      	b.n	9000772e <HAL_RCC_ClockConfig+0x34e>
90007620:	52002000 	.word	0x52002000
90007624:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007628:	687b      	ldr	r3, [r7, #4]
9000762a:	681b      	ldr	r3, [r3, #0]
9000762c:	f003 0304 	and.w	r3, r3, #4
90007630:	2b00      	cmp	r3, #0
90007632:	d010      	beq.n	90007656 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007634:	687b      	ldr	r3, [r7, #4]
90007636:	691a      	ldr	r2, [r3, #16]
90007638:	4b3f      	ldr	r3, [pc, #252]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
9000763a:	699b      	ldr	r3, [r3, #24]
9000763c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
90007640:	429a      	cmp	r2, r3
90007642:	d208      	bcs.n	90007656 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007644:	4b3c      	ldr	r3, [pc, #240]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
90007646:	699b      	ldr	r3, [r3, #24]
90007648:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000764c:	687b      	ldr	r3, [r7, #4]
9000764e:	691b      	ldr	r3, [r3, #16]
90007650:	4939      	ldr	r1, [pc, #228]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
90007652:	4313      	orrs	r3, r2
90007654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90007656:	687b      	ldr	r3, [r7, #4]
90007658:	681b      	ldr	r3, [r3, #0]
9000765a:	f003 0308 	and.w	r3, r3, #8
9000765e:	2b00      	cmp	r3, #0
90007660:	d010      	beq.n	90007684 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007662:	687b      	ldr	r3, [r7, #4]
90007664:	695a      	ldr	r2, [r3, #20]
90007666:	4b34      	ldr	r3, [pc, #208]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
90007668:	69db      	ldr	r3, [r3, #28]
9000766a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
9000766e:	429a      	cmp	r2, r3
90007670:	d208      	bcs.n	90007684 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007672:	4b31      	ldr	r3, [pc, #196]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
90007674:	69db      	ldr	r3, [r3, #28]
90007676:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
9000767a:	687b      	ldr	r3, [r7, #4]
9000767c:	695b      	ldr	r3, [r3, #20]
9000767e:	492e      	ldr	r1, [pc, #184]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
90007680:	4313      	orrs	r3, r2
90007682:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007684:	687b      	ldr	r3, [r7, #4]
90007686:	681b      	ldr	r3, [r3, #0]
90007688:	f003 0310 	and.w	r3, r3, #16
9000768c:	2b00      	cmp	r3, #0
9000768e:	d010      	beq.n	900076b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007690:	687b      	ldr	r3, [r7, #4]
90007692:	699a      	ldr	r2, [r3, #24]
90007694:	4b28      	ldr	r3, [pc, #160]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
90007696:	69db      	ldr	r3, [r3, #28]
90007698:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
9000769c:	429a      	cmp	r2, r3
9000769e:	d208      	bcs.n	900076b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900076a0:	4b25      	ldr	r3, [pc, #148]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
900076a2:	69db      	ldr	r3, [r3, #28]
900076a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
900076a8:	687b      	ldr	r3, [r7, #4]
900076aa:	699b      	ldr	r3, [r3, #24]
900076ac:	4922      	ldr	r1, [pc, #136]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
900076ae:	4313      	orrs	r3, r2
900076b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900076b2:	687b      	ldr	r3, [r7, #4]
900076b4:	681b      	ldr	r3, [r3, #0]
900076b6:	f003 0320 	and.w	r3, r3, #32
900076ba:	2b00      	cmp	r3, #0
900076bc:	d010      	beq.n	900076e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900076be:	687b      	ldr	r3, [r7, #4]
900076c0:	69da      	ldr	r2, [r3, #28]
900076c2:	4b1d      	ldr	r3, [pc, #116]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
900076c4:	6a1b      	ldr	r3, [r3, #32]
900076c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
900076ca:	429a      	cmp	r2, r3
900076cc:	d208      	bcs.n	900076e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900076ce:	4b1a      	ldr	r3, [pc, #104]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
900076d0:	6a1b      	ldr	r3, [r3, #32]
900076d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
900076d6:	687b      	ldr	r3, [r7, #4]
900076d8:	69db      	ldr	r3, [r3, #28]
900076da:	4917      	ldr	r1, [pc, #92]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
900076dc:	4313      	orrs	r3, r2
900076de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900076e0:	f000 f834 	bl	9000774c <HAL_RCC_GetSysClockFreq>
900076e4:	4602      	mov	r2, r0
900076e6:	4b14      	ldr	r3, [pc, #80]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
900076e8:	699b      	ldr	r3, [r3, #24]
900076ea:	0a1b      	lsrs	r3, r3, #8
900076ec:	f003 030f 	and.w	r3, r3, #15
900076f0:	4912      	ldr	r1, [pc, #72]	@ (9000773c <HAL_RCC_ClockConfig+0x35c>)
900076f2:	5ccb      	ldrb	r3, [r1, r3]
900076f4:	f003 031f 	and.w	r3, r3, #31
900076f8:	fa22 f303 	lsr.w	r3, r2, r3
900076fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900076fe:	4b0e      	ldr	r3, [pc, #56]	@ (90007738 <HAL_RCC_ClockConfig+0x358>)
90007700:	699b      	ldr	r3, [r3, #24]
90007702:	f003 030f 	and.w	r3, r3, #15
90007706:	4a0d      	ldr	r2, [pc, #52]	@ (9000773c <HAL_RCC_ClockConfig+0x35c>)
90007708:	5cd3      	ldrb	r3, [r2, r3]
9000770a:	f003 031f 	and.w	r3, r3, #31
9000770e:	693a      	ldr	r2, [r7, #16]
90007710:	fa22 f303 	lsr.w	r3, r2, r3
90007714:	4a0a      	ldr	r2, [pc, #40]	@ (90007740 <HAL_RCC_ClockConfig+0x360>)
90007716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007718:	4a0a      	ldr	r2, [pc, #40]	@ (90007744 <HAL_RCC_ClockConfig+0x364>)
9000771a:	693b      	ldr	r3, [r7, #16]
9000771c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
9000771e:	4b0a      	ldr	r3, [pc, #40]	@ (90007748 <HAL_RCC_ClockConfig+0x368>)
90007720:	681b      	ldr	r3, [r3, #0]
90007722:	4618      	mov	r0, r3
90007724:	f7fb fd10 	bl	90003148 <HAL_InitTick>
90007728:	4603      	mov	r3, r0
9000772a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
9000772c:	7bfb      	ldrb	r3, [r7, #15]
}
9000772e:	4618      	mov	r0, r3
90007730:	3718      	adds	r7, #24
90007732:	46bd      	mov	sp, r7
90007734:	bd80      	pop	{r7, pc}
90007736:	bf00      	nop
90007738:	58024400 	.word	0x58024400
9000773c:	9000d678 	.word	0x9000d678
90007740:	2000000c 	.word	0x2000000c
90007744:	20000008 	.word	0x20000008
90007748:	20000010 	.word	0x20000010

9000774c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
9000774c:	b480      	push	{r7}
9000774e:	b089      	sub	sp, #36	@ 0x24
90007750:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90007752:	4bb3      	ldr	r3, [pc, #716]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007754:	691b      	ldr	r3, [r3, #16]
90007756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000775a:	2b18      	cmp	r3, #24
9000775c:	f200 8155 	bhi.w	90007a0a <HAL_RCC_GetSysClockFreq+0x2be>
90007760:	a201      	add	r2, pc, #4	@ (adr r2, 90007768 <HAL_RCC_GetSysClockFreq+0x1c>)
90007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007766:	bf00      	nop
90007768:	900077cd 	.word	0x900077cd
9000776c:	90007a0b 	.word	0x90007a0b
90007770:	90007a0b 	.word	0x90007a0b
90007774:	90007a0b 	.word	0x90007a0b
90007778:	90007a0b 	.word	0x90007a0b
9000777c:	90007a0b 	.word	0x90007a0b
90007780:	90007a0b 	.word	0x90007a0b
90007784:	90007a0b 	.word	0x90007a0b
90007788:	900077f3 	.word	0x900077f3
9000778c:	90007a0b 	.word	0x90007a0b
90007790:	90007a0b 	.word	0x90007a0b
90007794:	90007a0b 	.word	0x90007a0b
90007798:	90007a0b 	.word	0x90007a0b
9000779c:	90007a0b 	.word	0x90007a0b
900077a0:	90007a0b 	.word	0x90007a0b
900077a4:	90007a0b 	.word	0x90007a0b
900077a8:	900077f9 	.word	0x900077f9
900077ac:	90007a0b 	.word	0x90007a0b
900077b0:	90007a0b 	.word	0x90007a0b
900077b4:	90007a0b 	.word	0x90007a0b
900077b8:	90007a0b 	.word	0x90007a0b
900077bc:	90007a0b 	.word	0x90007a0b
900077c0:	90007a0b 	.word	0x90007a0b
900077c4:	90007a0b 	.word	0x90007a0b
900077c8:	900077ff 	.word	0x900077ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900077cc:	4b94      	ldr	r3, [pc, #592]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
900077ce:	681b      	ldr	r3, [r3, #0]
900077d0:	f003 0320 	and.w	r3, r3, #32
900077d4:	2b00      	cmp	r3, #0
900077d6:	d009      	beq.n	900077ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900077d8:	4b91      	ldr	r3, [pc, #580]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
900077da:	681b      	ldr	r3, [r3, #0]
900077dc:	08db      	lsrs	r3, r3, #3
900077de:	f003 0303 	and.w	r3, r3, #3
900077e2:	4a90      	ldr	r2, [pc, #576]	@ (90007a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
900077e4:	fa22 f303 	lsr.w	r3, r2, r3
900077e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
900077ea:	e111      	b.n	90007a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900077ec:	4b8d      	ldr	r3, [pc, #564]	@ (90007a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
900077ee:	61bb      	str	r3, [r7, #24]
      break;
900077f0:	e10e      	b.n	90007a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
900077f2:	4b8d      	ldr	r3, [pc, #564]	@ (90007a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
900077f4:	61bb      	str	r3, [r7, #24]
      break;
900077f6:	e10b      	b.n	90007a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
900077f8:	4b8c      	ldr	r3, [pc, #560]	@ (90007a2c <HAL_RCC_GetSysClockFreq+0x2e0>)
900077fa:	61bb      	str	r3, [r7, #24]
      break;
900077fc:	e108      	b.n	90007a10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900077fe:	4b88      	ldr	r3, [pc, #544]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90007802:	f003 0303 	and.w	r3, r3, #3
90007806:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90007808:	4b85      	ldr	r3, [pc, #532]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000780a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000780c:	091b      	lsrs	r3, r3, #4
9000780e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90007812:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90007814:	4b82      	ldr	r3, [pc, #520]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007818:	f003 0301 	and.w	r3, r3, #1
9000781c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000781e:	4b80      	ldr	r3, [pc, #512]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
90007822:	08db      	lsrs	r3, r3, #3
90007824:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007828:	68fa      	ldr	r2, [r7, #12]
9000782a:	fb02 f303 	mul.w	r3, r2, r3
9000782e:	ee07 3a90 	vmov	s15, r3
90007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007836:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
9000783a:	693b      	ldr	r3, [r7, #16]
9000783c:	2b00      	cmp	r3, #0
9000783e:	f000 80e1 	beq.w	90007a04 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
90007842:	697b      	ldr	r3, [r7, #20]
90007844:	2b02      	cmp	r3, #2
90007846:	f000 8083 	beq.w	90007950 <HAL_RCC_GetSysClockFreq+0x204>
9000784a:	697b      	ldr	r3, [r7, #20]
9000784c:	2b02      	cmp	r3, #2
9000784e:	f200 80a1 	bhi.w	90007994 <HAL_RCC_GetSysClockFreq+0x248>
90007852:	697b      	ldr	r3, [r7, #20]
90007854:	2b00      	cmp	r3, #0
90007856:	d003      	beq.n	90007860 <HAL_RCC_GetSysClockFreq+0x114>
90007858:	697b      	ldr	r3, [r7, #20]
9000785a:	2b01      	cmp	r3, #1
9000785c:	d056      	beq.n	9000790c <HAL_RCC_GetSysClockFreq+0x1c0>
9000785e:	e099      	b.n	90007994 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007860:	4b6f      	ldr	r3, [pc, #444]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007862:	681b      	ldr	r3, [r3, #0]
90007864:	f003 0320 	and.w	r3, r3, #32
90007868:	2b00      	cmp	r3, #0
9000786a:	d02d      	beq.n	900078c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000786c:	4b6c      	ldr	r3, [pc, #432]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000786e:	681b      	ldr	r3, [r3, #0]
90007870:	08db      	lsrs	r3, r3, #3
90007872:	f003 0303 	and.w	r3, r3, #3
90007876:	4a6b      	ldr	r2, [pc, #428]	@ (90007a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
90007878:	fa22 f303 	lsr.w	r3, r2, r3
9000787c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000787e:	687b      	ldr	r3, [r7, #4]
90007880:	ee07 3a90 	vmov	s15, r3
90007884:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007888:	693b      	ldr	r3, [r7, #16]
9000788a:	ee07 3a90 	vmov	s15, r3
9000788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007896:	4b62      	ldr	r3, [pc, #392]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
9000789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000789e:	ee07 3a90 	vmov	s15, r3
900078a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900078a6:	ed97 6a02 	vldr	s12, [r7, #8]
900078aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 90007a30 <HAL_RCC_GetSysClockFreq+0x2e4>
900078ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
900078b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900078b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900078ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
900078be:	ee67 7a27 	vmul.f32	s15, s14, s15
900078c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
900078c6:	e087      	b.n	900079d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900078c8:	693b      	ldr	r3, [r7, #16]
900078ca:	ee07 3a90 	vmov	s15, r3
900078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
900078d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 90007a34 <HAL_RCC_GetSysClockFreq+0x2e8>
900078d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900078da:	4b51      	ldr	r3, [pc, #324]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900078de:	f3c3 0308 	ubfx	r3, r3, #0, #9
900078e2:	ee07 3a90 	vmov	s15, r3
900078e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900078ea:	ed97 6a02 	vldr	s12, [r7, #8]
900078ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 90007a30 <HAL_RCC_GetSysClockFreq+0x2e4>
900078f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900078f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900078fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900078fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007902:	ee67 7a27 	vmul.f32	s15, s14, s15
90007906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000790a:	e065      	b.n	900079d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000790c:	693b      	ldr	r3, [r7, #16]
9000790e:	ee07 3a90 	vmov	s15, r3
90007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007916:	eddf 6a48 	vldr	s13, [pc, #288]	@ 90007a38 <HAL_RCC_GetSysClockFreq+0x2ec>
9000791a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000791e:	4b40      	ldr	r3, [pc, #256]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007922:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007926:	ee07 3a90 	vmov	s15, r3
9000792a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000792e:	ed97 6a02 	vldr	s12, [r7, #8]
90007932:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 90007a30 <HAL_RCC_GetSysClockFreq+0x2e4>
90007936:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000793a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000793e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007942:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007946:	ee67 7a27 	vmul.f32	s15, s14, s15
9000794a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000794e:	e043      	b.n	900079d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007950:	693b      	ldr	r3, [r7, #16]
90007952:	ee07 3a90 	vmov	s15, r3
90007956:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000795a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 90007a3c <HAL_RCC_GetSysClockFreq+0x2f0>
9000795e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007962:	4b2f      	ldr	r3, [pc, #188]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
90007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000796a:	ee07 3a90 	vmov	s15, r3
9000796e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007972:	ed97 6a02 	vldr	s12, [r7, #8]
90007976:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 90007a30 <HAL_RCC_GetSysClockFreq+0x2e4>
9000797a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000797e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90007986:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000798a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000798e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007992:	e021      	b.n	900079d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007994:	693b      	ldr	r3, [r7, #16]
90007996:	ee07 3a90 	vmov	s15, r3
9000799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000799e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 90007a38 <HAL_RCC_GetSysClockFreq+0x2ec>
900079a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079a6:	4b1e      	ldr	r3, [pc, #120]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900079aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079ae:	ee07 3a90 	vmov	s15, r3
900079b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079b6:	ed97 6a02 	vldr	s12, [r7, #8]
900079ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 90007a30 <HAL_RCC_GetSysClockFreq+0x2e4>
900079be:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
900079d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900079d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
900079d8:	4b11      	ldr	r3, [pc, #68]	@ (90007a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
900079dc:	0a5b      	lsrs	r3, r3, #9
900079de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900079e2:	3301      	adds	r3, #1
900079e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
900079e6:	683b      	ldr	r3, [r7, #0]
900079e8:	ee07 3a90 	vmov	s15, r3
900079ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
900079f0:	edd7 6a07 	vldr	s13, [r7, #28]
900079f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
900079f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900079fc:	ee17 3a90 	vmov	r3, s15
90007a00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007a02:	e005      	b.n	90007a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007a04:	2300      	movs	r3, #0
90007a06:	61bb      	str	r3, [r7, #24]
      break;
90007a08:	e002      	b.n	90007a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007a0a:	4b07      	ldr	r3, [pc, #28]	@ (90007a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007a0c:	61bb      	str	r3, [r7, #24]
      break;
90007a0e:	bf00      	nop
  }

  return sysclockfreq;
90007a10:	69bb      	ldr	r3, [r7, #24]
}
90007a12:	4618      	mov	r0, r3
90007a14:	3724      	adds	r7, #36	@ 0x24
90007a16:	46bd      	mov	sp, r7
90007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
90007a1c:	4770      	bx	lr
90007a1e:	bf00      	nop
90007a20:	58024400 	.word	0x58024400
90007a24:	03d09000 	.word	0x03d09000
90007a28:	003d0900 	.word	0x003d0900
90007a2c:	017d7840 	.word	0x017d7840
90007a30:	46000000 	.word	0x46000000
90007a34:	4c742400 	.word	0x4c742400
90007a38:	4a742400 	.word	0x4a742400
90007a3c:	4bbebc20 	.word	0x4bbebc20

90007a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007a40:	b580      	push	{r7, lr}
90007a42:	b082      	sub	sp, #8
90007a44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007a46:	f7ff fe81 	bl	9000774c <HAL_RCC_GetSysClockFreq>
90007a4a:	4602      	mov	r2, r0
90007a4c:	4b10      	ldr	r3, [pc, #64]	@ (90007a90 <HAL_RCC_GetHCLKFreq+0x50>)
90007a4e:	699b      	ldr	r3, [r3, #24]
90007a50:	0a1b      	lsrs	r3, r3, #8
90007a52:	f003 030f 	and.w	r3, r3, #15
90007a56:	490f      	ldr	r1, [pc, #60]	@ (90007a94 <HAL_RCC_GetHCLKFreq+0x54>)
90007a58:	5ccb      	ldrb	r3, [r1, r3]
90007a5a:	f003 031f 	and.w	r3, r3, #31
90007a5e:	fa22 f303 	lsr.w	r3, r2, r3
90007a62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007a64:	4b0a      	ldr	r3, [pc, #40]	@ (90007a90 <HAL_RCC_GetHCLKFreq+0x50>)
90007a66:	699b      	ldr	r3, [r3, #24]
90007a68:	f003 030f 	and.w	r3, r3, #15
90007a6c:	4a09      	ldr	r2, [pc, #36]	@ (90007a94 <HAL_RCC_GetHCLKFreq+0x54>)
90007a6e:	5cd3      	ldrb	r3, [r2, r3]
90007a70:	f003 031f 	and.w	r3, r3, #31
90007a74:	687a      	ldr	r2, [r7, #4]
90007a76:	fa22 f303 	lsr.w	r3, r2, r3
90007a7a:	4a07      	ldr	r2, [pc, #28]	@ (90007a98 <HAL_RCC_GetHCLKFreq+0x58>)
90007a7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007a7e:	4a07      	ldr	r2, [pc, #28]	@ (90007a9c <HAL_RCC_GetHCLKFreq+0x5c>)
90007a80:	687b      	ldr	r3, [r7, #4]
90007a82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007a84:	4b04      	ldr	r3, [pc, #16]	@ (90007a98 <HAL_RCC_GetHCLKFreq+0x58>)
90007a86:	681b      	ldr	r3, [r3, #0]
}
90007a88:	4618      	mov	r0, r3
90007a8a:	3708      	adds	r7, #8
90007a8c:	46bd      	mov	sp, r7
90007a8e:	bd80      	pop	{r7, pc}
90007a90:	58024400 	.word	0x58024400
90007a94:	9000d678 	.word	0x9000d678
90007a98:	2000000c 	.word	0x2000000c
90007a9c:	20000008 	.word	0x20000008

90007aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90007aa0:	b580      	push	{r7, lr}
90007aa2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
90007aa4:	f7ff ffcc 	bl	90007a40 <HAL_RCC_GetHCLKFreq>
90007aa8:	4602      	mov	r2, r0
90007aaa:	4b06      	ldr	r3, [pc, #24]	@ (90007ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
90007aac:	69db      	ldr	r3, [r3, #28]
90007aae:	091b      	lsrs	r3, r3, #4
90007ab0:	f003 0307 	and.w	r3, r3, #7
90007ab4:	4904      	ldr	r1, [pc, #16]	@ (90007ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
90007ab6:	5ccb      	ldrb	r3, [r1, r3]
90007ab8:	f003 031f 	and.w	r3, r3, #31
90007abc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90007ac0:	4618      	mov	r0, r3
90007ac2:	bd80      	pop	{r7, pc}
90007ac4:	58024400 	.word	0x58024400
90007ac8:	9000d678 	.word	0x9000d678

90007acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007acc:	b580      	push	{r7, lr}
90007ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007ad0:	f7ff ffb6 	bl	90007a40 <HAL_RCC_GetHCLKFreq>
90007ad4:	4602      	mov	r2, r0
90007ad6:	4b06      	ldr	r3, [pc, #24]	@ (90007af0 <HAL_RCC_GetPCLK2Freq+0x24>)
90007ad8:	69db      	ldr	r3, [r3, #28]
90007ada:	0a1b      	lsrs	r3, r3, #8
90007adc:	f003 0307 	and.w	r3, r3, #7
90007ae0:	4904      	ldr	r1, [pc, #16]	@ (90007af4 <HAL_RCC_GetPCLK2Freq+0x28>)
90007ae2:	5ccb      	ldrb	r3, [r1, r3]
90007ae4:	f003 031f 	and.w	r3, r3, #31
90007ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007aec:	4618      	mov	r0, r3
90007aee:	bd80      	pop	{r7, pc}
90007af0:	58024400 	.word	0x58024400
90007af4:	9000d678 	.word	0x9000d678

90007af8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007afc:	b0ca      	sub	sp, #296	@ 0x128
90007afe:	af00      	add	r7, sp, #0
90007b00:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007b04:	2300      	movs	r3, #0
90007b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007b0a:	2300      	movs	r3, #0
90007b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
90007b18:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
90007b1c:	2500      	movs	r5, #0
90007b1e:	ea54 0305 	orrs.w	r3, r4, r5
90007b22:	d049      	beq.n	90007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007b2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007b2e:	d02f      	beq.n	90007b90 <HAL_RCCEx_PeriphCLKConfig+0x98>
90007b30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90007b34:	d828      	bhi.n	90007b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007b36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007b3a:	d01a      	beq.n	90007b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007b3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007b40:	d822      	bhi.n	90007b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007b42:	2b00      	cmp	r3, #0
90007b44:	d003      	beq.n	90007b4e <HAL_RCCEx_PeriphCLKConfig+0x56>
90007b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90007b4a:	d007      	beq.n	90007b5c <HAL_RCCEx_PeriphCLKConfig+0x64>
90007b4c:	e01c      	b.n	90007b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007b4e:	4bb8      	ldr	r3, [pc, #736]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007b52:	4ab7      	ldr	r2, [pc, #732]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007b5a:	e01a      	b.n	90007b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b60:	3308      	adds	r3, #8
90007b62:	2102      	movs	r1, #2
90007b64:	4618      	mov	r0, r3
90007b66:	f001 fc8f 	bl	90009488 <RCCEx_PLL2_Config>
90007b6a:	4603      	mov	r3, r0
90007b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007b70:	e00f      	b.n	90007b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007b76:	3328      	adds	r3, #40	@ 0x28
90007b78:	2102      	movs	r1, #2
90007b7a:	4618      	mov	r0, r3
90007b7c:	f001 fd36 	bl	900095ec <RCCEx_PLL3_Config>
90007b80:	4603      	mov	r3, r0
90007b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007b86:	e004      	b.n	90007b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007b88:	2301      	movs	r3, #1
90007b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007b8e:	e000      	b.n	90007b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007b90:	bf00      	nop
    }

    if (ret == HAL_OK)
90007b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007b96:	2b00      	cmp	r3, #0
90007b98:	d10a      	bne.n	90007bb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007b9a:	4ba5      	ldr	r3, [pc, #660]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007b9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
90007ba8:	4aa1      	ldr	r2, [pc, #644]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007baa:	430b      	orrs	r3, r1
90007bac:	6513      	str	r3, [r2, #80]	@ 0x50
90007bae:	e003      	b.n	90007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
90007bc0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
90007bc4:	f04f 0900 	mov.w	r9, #0
90007bc8:	ea58 0309 	orrs.w	r3, r8, r9
90007bcc:	d047      	beq.n	90007c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007bd4:	2b04      	cmp	r3, #4
90007bd6:	d82a      	bhi.n	90007c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
90007bd8:	a201      	add	r2, pc, #4	@ (adr r2, 90007be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007bde:	bf00      	nop
90007be0:	90007bf5 	.word	0x90007bf5
90007be4:	90007c03 	.word	0x90007c03
90007be8:	90007c19 	.word	0x90007c19
90007bec:	90007c37 	.word	0x90007c37
90007bf0:	90007c37 	.word	0x90007c37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007bf4:	4b8e      	ldr	r3, [pc, #568]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007bf8:	4a8d      	ldr	r2, [pc, #564]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c00:	e01a      	b.n	90007c38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c06:	3308      	adds	r3, #8
90007c08:	2100      	movs	r1, #0
90007c0a:	4618      	mov	r0, r3
90007c0c:	f001 fc3c 	bl	90009488 <RCCEx_PLL2_Config>
90007c10:	4603      	mov	r3, r0
90007c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c16:	e00f      	b.n	90007c38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c1c:	3328      	adds	r3, #40	@ 0x28
90007c1e:	2100      	movs	r1, #0
90007c20:	4618      	mov	r0, r3
90007c22:	f001 fce3 	bl	900095ec <RCCEx_PLL3_Config>
90007c26:	4603      	mov	r3, r0
90007c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007c2c:	e004      	b.n	90007c38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007c2e:	2301      	movs	r3, #1
90007c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007c34:	e000      	b.n	90007c38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007c36:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c3c:	2b00      	cmp	r3, #0
90007c3e:	d10a      	bne.n	90007c56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007c40:	4b7b      	ldr	r3, [pc, #492]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007c44:	f023 0107 	bic.w	r1, r3, #7
90007c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007c4e:	4a78      	ldr	r2, [pc, #480]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c50:	430b      	orrs	r3, r1
90007c52:	6513      	str	r3, [r2, #80]	@ 0x50
90007c54:	e003      	b.n	90007c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
90007c66:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
90007c6a:	f04f 0b00 	mov.w	fp, #0
90007c6e:	ea5a 030b 	orrs.w	r3, sl, fp
90007c72:	d04c      	beq.n	90007d0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007c7e:	d030      	beq.n	90007ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90007c84:	d829      	bhi.n	90007cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007c86:	2bc0      	cmp	r3, #192	@ 0xc0
90007c88:	d02d      	beq.n	90007ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007c8a:	2bc0      	cmp	r3, #192	@ 0xc0
90007c8c:	d825      	bhi.n	90007cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007c8e:	2b80      	cmp	r3, #128	@ 0x80
90007c90:	d018      	beq.n	90007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007c92:	2b80      	cmp	r3, #128	@ 0x80
90007c94:	d821      	bhi.n	90007cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007c96:	2b00      	cmp	r3, #0
90007c98:	d002      	beq.n	90007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007c9a:	2b40      	cmp	r3, #64	@ 0x40
90007c9c:	d007      	beq.n	90007cae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007c9e:	e01c      	b.n	90007cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ca0:	4b63      	ldr	r3, [pc, #396]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ca4:	4a62      	ldr	r2, [pc, #392]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007cac:	e01c      	b.n	90007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cb2:	3308      	adds	r3, #8
90007cb4:	2100      	movs	r1, #0
90007cb6:	4618      	mov	r0, r3
90007cb8:	f001 fbe6 	bl	90009488 <RCCEx_PLL2_Config>
90007cbc:	4603      	mov	r3, r0
90007cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007cc2:	e011      	b.n	90007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cc8:	3328      	adds	r3, #40	@ 0x28
90007cca:	2100      	movs	r1, #0
90007ccc:	4618      	mov	r0, r3
90007cce:	f001 fc8d 	bl	900095ec <RCCEx_PLL3_Config>
90007cd2:	4603      	mov	r3, r0
90007cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007cd8:	e006      	b.n	90007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007cda:	2301      	movs	r3, #1
90007cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007ce0:	e002      	b.n	90007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007ce2:	bf00      	nop
90007ce4:	e000      	b.n	90007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
90007ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007cec:	2b00      	cmp	r3, #0
90007cee:	d10a      	bne.n	90007d06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007cf0:	4b4f      	ldr	r3, [pc, #316]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007cf4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
90007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
90007cfe:	4a4c      	ldr	r2, [pc, #304]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d00:	430b      	orrs	r3, r1
90007d02:	6513      	str	r3, [r2, #80]	@ 0x50
90007d04:	e003      	b.n	90007d0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
90007d1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
90007d1e:	2300      	movs	r3, #0
90007d20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
90007d24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
90007d28:	460b      	mov	r3, r1
90007d2a:	4313      	orrs	r3, r2
90007d2c:	d053      	beq.n	90007dd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007d3a:	d035      	beq.n	90007da8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007d3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
90007d40:	d82e      	bhi.n	90007da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007d42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007d46:	d031      	beq.n	90007dac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007d48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
90007d4c:	d828      	bhi.n	90007da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007d52:	d01a      	beq.n	90007d8a <HAL_RCCEx_PeriphCLKConfig+0x292>
90007d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
90007d58:	d822      	bhi.n	90007da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007d5a:	2b00      	cmp	r3, #0
90007d5c:	d003      	beq.n	90007d66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007d5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90007d62:	d007      	beq.n	90007d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007d64:	e01c      	b.n	90007da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d66:	4b32      	ldr	r3, [pc, #200]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007d6a:	4a31      	ldr	r2, [pc, #196]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007d70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d72:	e01c      	b.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d78:	3308      	adds	r3, #8
90007d7a:	2100      	movs	r1, #0
90007d7c:	4618      	mov	r0, r3
90007d7e:	f001 fb83 	bl	90009488 <RCCEx_PLL2_Config>
90007d82:	4603      	mov	r3, r0
90007d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007d88:	e011      	b.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007d8e:	3328      	adds	r3, #40	@ 0x28
90007d90:	2100      	movs	r1, #0
90007d92:	4618      	mov	r0, r3
90007d94:	f001 fc2a 	bl	900095ec <RCCEx_PLL3_Config>
90007d98:	4603      	mov	r3, r0
90007d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007d9e:	e006      	b.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007da0:	2301      	movs	r3, #1
90007da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007da6:	e002      	b.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007da8:	bf00      	nop
90007daa:	e000      	b.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007dac:	bf00      	nop
    }

    if (ret == HAL_OK)
90007dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007db2:	2b00      	cmp	r3, #0
90007db4:	d10b      	bne.n	90007dce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007db6:	4b1e      	ldr	r3, [pc, #120]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007dba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
90007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
90007dc6:	4a1a      	ldr	r2, [pc, #104]	@ (90007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dc8:	430b      	orrs	r3, r1
90007dca:	6593      	str	r3, [r2, #88]	@ 0x58
90007dcc:	e003      	b.n	90007dd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
90007dde:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
90007de2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
90007de6:	2300      	movs	r3, #0
90007de8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
90007dec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
90007df0:	460b      	mov	r3, r1
90007df2:	4313      	orrs	r3, r2
90007df4:	d056      	beq.n	90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007dfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007dfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007e02:	d038      	beq.n	90007e76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007e04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
90007e08:	d831      	bhi.n	90007e6e <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007e0e:	d034      	beq.n	90007e7a <HAL_RCCEx_PeriphCLKConfig+0x382>
90007e10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
90007e14:	d82b      	bhi.n	90007e6e <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007e1a:	d01d      	beq.n	90007e58 <HAL_RCCEx_PeriphCLKConfig+0x360>
90007e1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
90007e20:	d825      	bhi.n	90007e6e <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e22:	2b00      	cmp	r3, #0
90007e24:	d006      	beq.n	90007e34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007e26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
90007e2a:	d00a      	beq.n	90007e42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007e2c:	e01f      	b.n	90007e6e <HAL_RCCEx_PeriphCLKConfig+0x376>
90007e2e:	bf00      	nop
90007e30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e34:	4ba2      	ldr	r3, [pc, #648]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007e38:	4aa1      	ldr	r2, [pc, #644]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e40:	e01c      	b.n	90007e7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e46:	3308      	adds	r3, #8
90007e48:	2100      	movs	r1, #0
90007e4a:	4618      	mov	r0, r3
90007e4c:	f001 fb1c 	bl	90009488 <RCCEx_PLL2_Config>
90007e50:	4603      	mov	r3, r0
90007e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007e56:	e011      	b.n	90007e7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e5c:	3328      	adds	r3, #40	@ 0x28
90007e5e:	2100      	movs	r1, #0
90007e60:	4618      	mov	r0, r3
90007e62:	f001 fbc3 	bl	900095ec <RCCEx_PLL3_Config>
90007e66:	4603      	mov	r3, r0
90007e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e6c:	e006      	b.n	90007e7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007e6e:	2301      	movs	r3, #1
90007e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007e74:	e002      	b.n	90007e7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007e76:	bf00      	nop
90007e78:	e000      	b.n	90007e7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
90007e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007e80:	2b00      	cmp	r3, #0
90007e82:	d10b      	bne.n	90007e9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007e84:	4b8e      	ldr	r3, [pc, #568]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90007e88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
90007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
90007e94:	4a8a      	ldr	r2, [pc, #552]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007e96:	430b      	orrs	r3, r1
90007e98:	6593      	str	r3, [r2, #88]	@ 0x58
90007e9a:	e003      	b.n	90007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
90007eac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
90007eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
90007eb4:	2300      	movs	r3, #0
90007eb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
90007eba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
90007ebe:	460b      	mov	r3, r1
90007ec0:	4313      	orrs	r3, r2
90007ec2:	d03a      	beq.n	90007f3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007eca:	2b30      	cmp	r3, #48	@ 0x30
90007ecc:	d01f      	beq.n	90007f0e <HAL_RCCEx_PeriphCLKConfig+0x416>
90007ece:	2b30      	cmp	r3, #48	@ 0x30
90007ed0:	d819      	bhi.n	90007f06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007ed2:	2b20      	cmp	r3, #32
90007ed4:	d00c      	beq.n	90007ef0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007ed6:	2b20      	cmp	r3, #32
90007ed8:	d815      	bhi.n	90007f06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007eda:	2b00      	cmp	r3, #0
90007edc:	d019      	beq.n	90007f12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007ede:	2b10      	cmp	r3, #16
90007ee0:	d111      	bne.n	90007f06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ee2:	4b77      	ldr	r3, [pc, #476]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007ee6:	4a76      	ldr	r2, [pc, #472]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007eee:	e011      	b.n	90007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007ef4:	3308      	adds	r3, #8
90007ef6:	2102      	movs	r1, #2
90007ef8:	4618      	mov	r0, r3
90007efa:	f001 fac5 	bl	90009488 <RCCEx_PLL2_Config>
90007efe:	4603      	mov	r3, r0
90007f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007f04:	e006      	b.n	90007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007f06:	2301      	movs	r3, #1
90007f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007f0c:	e002      	b.n	90007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007f0e:	bf00      	nop
90007f10:	e000      	b.n	90007f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007f12:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f18:	2b00      	cmp	r3, #0
90007f1a:	d10a      	bne.n	90007f32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90007f1c:	4b68      	ldr	r3, [pc, #416]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007f20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
90007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90007f2a:	4a65      	ldr	r2, [pc, #404]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f2c:	430b      	orrs	r3, r1
90007f2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
90007f30:	e003      	b.n	90007f3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
90007f46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
90007f4a:	2300      	movs	r3, #0
90007f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
90007f50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
90007f54:	460b      	mov	r3, r1
90007f56:	4313      	orrs	r3, r2
90007f58:	d051      	beq.n	90007ffe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007f60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007f64:	d035      	beq.n	90007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
90007f66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90007f6a:	d82e      	bhi.n	90007fca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007f6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007f70:	d031      	beq.n	90007fd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
90007f72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
90007f76:	d828      	bhi.n	90007fca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007f7c:	d01a      	beq.n	90007fb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
90007f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
90007f82:	d822      	bhi.n	90007fca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90007f84:	2b00      	cmp	r3, #0
90007f86:	d003      	beq.n	90007f90 <HAL_RCCEx_PeriphCLKConfig+0x498>
90007f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90007f8c:	d007      	beq.n	90007f9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
90007f8e:	e01c      	b.n	90007fca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f90:	4b4b      	ldr	r3, [pc, #300]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90007f94:	4a4a      	ldr	r2, [pc, #296]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90007f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007f9c:	e01c      	b.n	90007fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fa2:	3308      	adds	r3, #8
90007fa4:	2100      	movs	r1, #0
90007fa6:	4618      	mov	r0, r3
90007fa8:	f001 fa6e 	bl	90009488 <RCCEx_PLL2_Config>
90007fac:	4603      	mov	r3, r0
90007fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007fb2:	e011      	b.n	90007fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fb8:	3328      	adds	r3, #40	@ 0x28
90007fba:	2100      	movs	r1, #0
90007fbc:	4618      	mov	r0, r3
90007fbe:	f001 fb15 	bl	900095ec <RCCEx_PLL3_Config>
90007fc2:	4603      	mov	r3, r0
90007fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90007fc8:	e006      	b.n	90007fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007fca:	2301      	movs	r3, #1
90007fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90007fd0:	e002      	b.n	90007fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90007fd2:	bf00      	nop
90007fd4:	e000      	b.n	90007fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90007fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
90007fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007fdc:	2b00      	cmp	r3, #0
90007fde:	d10a      	bne.n	90007ff6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90007fe0:	4b37      	ldr	r3, [pc, #220]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90007fe4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
90007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90007fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
90007fee:	4a34      	ldr	r2, [pc, #208]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ff0:	430b      	orrs	r3, r1
90007ff2:	6513      	str	r3, [r2, #80]	@ 0x50
90007ff4:	e003      	b.n	90007ffe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90007ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008002:	e9d3 2300 	ldrd	r2, r3, [r3]
90008006:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
9000800a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
9000800e:	2300      	movs	r3, #0
90008010:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
90008014:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
90008018:	460b      	mov	r3, r1
9000801a:	4313      	orrs	r3, r2
9000801c:	d056      	beq.n	900080cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
9000801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
90008024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
90008028:	d033      	beq.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x59a>
9000802a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
9000802e:	d82c      	bhi.n	9000808a <HAL_RCCEx_PeriphCLKConfig+0x592>
90008030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
90008034:	d02f      	beq.n	90008096 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90008036:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
9000803a:	d826      	bhi.n	9000808a <HAL_RCCEx_PeriphCLKConfig+0x592>
9000803c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008040:	d02b      	beq.n	9000809a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
90008042:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
90008046:	d820      	bhi.n	9000808a <HAL_RCCEx_PeriphCLKConfig+0x592>
90008048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
9000804c:	d012      	beq.n	90008074 <HAL_RCCEx_PeriphCLKConfig+0x57c>
9000804e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
90008052:	d81a      	bhi.n	9000808a <HAL_RCCEx_PeriphCLKConfig+0x592>
90008054:	2b00      	cmp	r3, #0
90008056:	d022      	beq.n	9000809e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90008058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000805c:	d115      	bne.n	9000808a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008062:	3308      	adds	r3, #8
90008064:	2101      	movs	r1, #1
90008066:	4618      	mov	r0, r3
90008068:	f001 fa0e 	bl	90009488 <RCCEx_PLL2_Config>
9000806c:	4603      	mov	r3, r0
9000806e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008072:	e015      	b.n	900080a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008078:	3328      	adds	r3, #40	@ 0x28
9000807a:	2101      	movs	r1, #1
9000807c:	4618      	mov	r0, r3
9000807e:	f001 fab5 	bl	900095ec <RCCEx_PLL3_Config>
90008082:	4603      	mov	r3, r0
90008084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008088:	e00a      	b.n	900080a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000808a:	2301      	movs	r3, #1
9000808c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008090:	e006      	b.n	900080a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008092:	bf00      	nop
90008094:	e004      	b.n	900080a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008096:	bf00      	nop
90008098:	e002      	b.n	900080a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000809a:	bf00      	nop
9000809c:	e000      	b.n	900080a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000809e:	bf00      	nop
    }

    if (ret == HAL_OK)
900080a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080a4:	2b00      	cmp	r3, #0
900080a6:	d10d      	bne.n	900080c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900080a8:	4b05      	ldr	r3, [pc, #20]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
900080ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
900080b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
900080b6:	4a02      	ldr	r2, [pc, #8]	@ (900080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080b8:	430b      	orrs	r3, r1
900080ba:	6513      	str	r3, [r2, #80]	@ 0x50
900080bc:	e006      	b.n	900080cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
900080be:	bf00      	nop
900080c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900080c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900080c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
900080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
900080d4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
900080d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
900080dc:	2300      	movs	r3, #0
900080de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
900080e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
900080e6:	460b      	mov	r3, r1
900080e8:	4313      	orrs	r3, r2
900080ea:	d055      	beq.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
900080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900080f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
900080f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900080f8:	d033      	beq.n	90008162 <HAL_RCCEx_PeriphCLKConfig+0x66a>
900080fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900080fe:	d82c      	bhi.n	9000815a <HAL_RCCEx_PeriphCLKConfig+0x662>
90008100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90008104:	d02f      	beq.n	90008166 <HAL_RCCEx_PeriphCLKConfig+0x66e>
90008106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
9000810a:	d826      	bhi.n	9000815a <HAL_RCCEx_PeriphCLKConfig+0x662>
9000810c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008110:	d02b      	beq.n	9000816a <HAL_RCCEx_PeriphCLKConfig+0x672>
90008112:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
90008116:	d820      	bhi.n	9000815a <HAL_RCCEx_PeriphCLKConfig+0x662>
90008118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
9000811c:	d012      	beq.n	90008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>
9000811e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
90008122:	d81a      	bhi.n	9000815a <HAL_RCCEx_PeriphCLKConfig+0x662>
90008124:	2b00      	cmp	r3, #0
90008126:	d022      	beq.n	9000816e <HAL_RCCEx_PeriphCLKConfig+0x676>
90008128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
9000812c:	d115      	bne.n	9000815a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008132:	3308      	adds	r3, #8
90008134:	2101      	movs	r1, #1
90008136:	4618      	mov	r0, r3
90008138:	f001 f9a6 	bl	90009488 <RCCEx_PLL2_Config>
9000813c:	4603      	mov	r3, r0
9000813e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008142:	e015      	b.n	90008170 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008148:	3328      	adds	r3, #40	@ 0x28
9000814a:	2101      	movs	r1, #1
9000814c:	4618      	mov	r0, r3
9000814e:	f001 fa4d 	bl	900095ec <RCCEx_PLL3_Config>
90008152:	4603      	mov	r3, r0
90008154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008158:	e00a      	b.n	90008170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
9000815a:	2301      	movs	r3, #1
9000815c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008160:	e006      	b.n	90008170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008162:	bf00      	nop
90008164:	e004      	b.n	90008170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008166:	bf00      	nop
90008168:	e002      	b.n	90008170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000816a:	bf00      	nop
9000816c:	e000      	b.n	90008170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000816e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008174:	2b00      	cmp	r3, #0
90008176:	d10b      	bne.n	90008190 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90008178:	4ba3      	ldr	r3, [pc, #652]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000817a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000817c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
90008188:	4a9f      	ldr	r2, [pc, #636]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000818a:	430b      	orrs	r3, r1
9000818c:	6593      	str	r3, [r2, #88]	@ 0x58
9000818e:	e003      	b.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000819c:	e9d3 2300 	ldrd	r2, r3, [r3]
900081a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
900081a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
900081a8:	2300      	movs	r3, #0
900081aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
900081ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
900081b2:	460b      	mov	r3, r1
900081b4:	4313      	orrs	r3, r2
900081b6:	d037      	beq.n	90008228 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
900081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
900081be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900081c2:	d00e      	beq.n	900081e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900081c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900081c8:	d816      	bhi.n	900081f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
900081ca:	2b00      	cmp	r3, #0
900081cc:	d018      	beq.n	90008200 <HAL_RCCEx_PeriphCLKConfig+0x708>
900081ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900081d2:	d111      	bne.n	900081f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900081d4:	4b8c      	ldr	r3, [pc, #560]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900081d8:	4a8b      	ldr	r2, [pc, #556]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900081da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
900081de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900081e0:	e00f      	b.n	90008202 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900081e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900081e6:	3308      	adds	r3, #8
900081e8:	2101      	movs	r1, #1
900081ea:	4618      	mov	r0, r3
900081ec:	f001 f94c 	bl	90009488 <RCCEx_PLL2_Config>
900081f0:	4603      	mov	r3, r0
900081f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900081f6:	e004      	b.n	90008202 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900081f8:	2301      	movs	r3, #1
900081fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900081fe:	e000      	b.n	90008202 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
90008200:	bf00      	nop
    }

    if (ret == HAL_OK)
90008202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008206:	2b00      	cmp	r3, #0
90008208:	d10a      	bne.n	90008220 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000820a:	4b7f      	ldr	r3, [pc, #508]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000820c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
9000820e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008218:	4a7b      	ldr	r2, [pc, #492]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000821a:	430b      	orrs	r3, r1
9000821c:	6513      	str	r3, [r2, #80]	@ 0x50
9000821e:	e003      	b.n	90008228 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000822c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008230:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
90008234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
90008238:	2300      	movs	r3, #0
9000823a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
9000823e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
90008242:	460b      	mov	r3, r1
90008244:	4313      	orrs	r3, r2
90008246:	d039      	beq.n	900082bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000824c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
9000824e:	2b03      	cmp	r3, #3
90008250:	d81c      	bhi.n	9000828c <HAL_RCCEx_PeriphCLKConfig+0x794>
90008252:	a201      	add	r2, pc, #4	@ (adr r2, 90008258 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008258:	90008295 	.word	0x90008295
9000825c:	90008269 	.word	0x90008269
90008260:	90008277 	.word	0x90008277
90008264:	90008295 	.word	0x90008295
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008268:	4b67      	ldr	r3, [pc, #412]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000826c:	4a66      	ldr	r2, [pc, #408]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000826e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008274:	e00f      	b.n	90008296 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000827a:	3308      	adds	r3, #8
9000827c:	2102      	movs	r1, #2
9000827e:	4618      	mov	r0, r3
90008280:	f001 f902 	bl	90009488 <RCCEx_PLL2_Config>
90008284:	4603      	mov	r3, r0
90008286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
9000828a:	e004      	b.n	90008296 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
9000828c:	2301      	movs	r3, #1
9000828e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008292:	e000      	b.n	90008296 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008294:	bf00      	nop
    }

    if (ret == HAL_OK)
90008296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000829a:	2b00      	cmp	r3, #0
9000829c:	d10a      	bne.n	900082b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000829e:	4b5a      	ldr	r3, [pc, #360]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
900082a2:	f023 0103 	bic.w	r1, r3, #3
900082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
900082ac:	4a56      	ldr	r2, [pc, #344]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082ae:	430b      	orrs	r3, r1
900082b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
900082b2:	e003      	b.n	900082bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
900082b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900082b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900082bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
900082c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
900082c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
900082cc:	2300      	movs	r3, #0
900082ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
900082d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
900082d6:	460b      	mov	r3, r1
900082d8:	4313      	orrs	r3, r2
900082da:	f000 809f 	beq.w	9000841c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900082de:	4b4b      	ldr	r3, [pc, #300]	@ (9000840c <HAL_RCCEx_PeriphCLKConfig+0x914>)
900082e0:	681b      	ldr	r3, [r3, #0]
900082e2:	4a4a      	ldr	r2, [pc, #296]	@ (9000840c <HAL_RCCEx_PeriphCLKConfig+0x914>)
900082e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900082e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900082ea:	f7fa ff77 	bl	900031dc <HAL_GetTick>
900082ee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900082f2:	e00b      	b.n	9000830c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900082f4:	f7fa ff72 	bl	900031dc <HAL_GetTick>
900082f8:	4602      	mov	r2, r0
900082fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
900082fe:	1ad3      	subs	r3, r2, r3
90008300:	2b64      	cmp	r3, #100	@ 0x64
90008302:	d903      	bls.n	9000830c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90008304:	2303      	movs	r3, #3
90008306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
9000830a:	e005      	b.n	90008318 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000830c:	4b3f      	ldr	r3, [pc, #252]	@ (9000840c <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000830e:	681b      	ldr	r3, [r3, #0]
90008310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
90008314:	2b00      	cmp	r3, #0
90008316:	d0ed      	beq.n	900082f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90008318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000831c:	2b00      	cmp	r3, #0
9000831e:	d179      	bne.n	90008414 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90008320:	4b39      	ldr	r3, [pc, #228]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008322:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
90008324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008328:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000832c:	4053      	eors	r3, r2
9000832e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
90008332:	2b00      	cmp	r3, #0
90008334:	d015      	beq.n	90008362 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90008336:	4b34      	ldr	r3, [pc, #208]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000833a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
9000833e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90008342:	4b31      	ldr	r3, [pc, #196]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008346:	4a30      	ldr	r2, [pc, #192]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
9000834c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000834e:	4b2e      	ldr	r3, [pc, #184]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
90008352:	4a2d      	ldr	r2, [pc, #180]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
90008358:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
9000835a:	4a2b      	ldr	r2, [pc, #172]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000835c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
90008360:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90008362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
9000836a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
9000836e:	d118      	bne.n	900083a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008370:	f7fa ff34 	bl	900031dc <HAL_GetTick>
90008374:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008378:	e00d      	b.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000837a:	f7fa ff2f 	bl	900031dc <HAL_GetTick>
9000837e:	4602      	mov	r2, r0
90008380:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
90008384:	1ad2      	subs	r2, r2, r3
90008386:	f241 3388 	movw	r3, #5000	@ 0x1388
9000838a:	429a      	cmp	r2, r3
9000838c:	d903      	bls.n	90008396 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
9000838e:	2303      	movs	r3, #3
90008390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
90008394:	e005      	b.n	900083a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008396:	4b1c      	ldr	r3, [pc, #112]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
9000839a:	f003 0302 	and.w	r3, r3, #2
9000839e:	2b00      	cmp	r3, #0
900083a0:	d0eb      	beq.n	9000837a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
900083a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900083a6:	2b00      	cmp	r3, #0
900083a8:	d129      	bne.n	900083fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900083aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900083b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
900083b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
900083ba:	d10e      	bne.n	900083da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
900083bc:	4b12      	ldr	r3, [pc, #72]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083be:	691b      	ldr	r3, [r3, #16]
900083c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
900083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900083cc:	091a      	lsrs	r2, r3, #4
900083ce:	4b10      	ldr	r3, [pc, #64]	@ (90008410 <HAL_RCCEx_PeriphCLKConfig+0x918>)
900083d0:	4013      	ands	r3, r2
900083d2:	4a0d      	ldr	r2, [pc, #52]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083d4:	430b      	orrs	r3, r1
900083d6:	6113      	str	r3, [r2, #16]
900083d8:	e005      	b.n	900083e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
900083da:	4b0b      	ldr	r3, [pc, #44]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083dc:	691b      	ldr	r3, [r3, #16]
900083de:	4a0a      	ldr	r2, [pc, #40]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
900083e4:	6113      	str	r3, [r2, #16]
900083e6:	4b08      	ldr	r3, [pc, #32]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
900083ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900083ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
900083f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
900083f6:	4a04      	ldr	r2, [pc, #16]	@ (90008408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083f8:	430b      	orrs	r3, r1
900083fa:	6713      	str	r3, [r2, #112]	@ 0x70
900083fc:	e00e      	b.n	9000841c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
900083fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
90008406:	e009      	b.n	9000841c <HAL_RCCEx_PeriphCLKConfig+0x924>
90008408:	58024400 	.word	0x58024400
9000840c:	58024800 	.word	0x58024800
90008410:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90008414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008420:	e9d3 2300 	ldrd	r2, r3, [r3]
90008424:	f002 0301 	and.w	r3, r2, #1
90008428:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
9000842c:	2300      	movs	r3, #0
9000842e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
90008432:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
90008436:	460b      	mov	r3, r1
90008438:	4313      	orrs	r3, r2
9000843a:	f000 8089 	beq.w	90008550 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
9000843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008444:	2b28      	cmp	r3, #40	@ 0x28
90008446:	d86b      	bhi.n	90008520 <HAL_RCCEx_PeriphCLKConfig+0xa28>
90008448:	a201      	add	r2, pc, #4	@ (adr r2, 90008450 <HAL_RCCEx_PeriphCLKConfig+0x958>)
9000844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000844e:	bf00      	nop
90008450:	90008529 	.word	0x90008529
90008454:	90008521 	.word	0x90008521
90008458:	90008521 	.word	0x90008521
9000845c:	90008521 	.word	0x90008521
90008460:	90008521 	.word	0x90008521
90008464:	90008521 	.word	0x90008521
90008468:	90008521 	.word	0x90008521
9000846c:	90008521 	.word	0x90008521
90008470:	900084f5 	.word	0x900084f5
90008474:	90008521 	.word	0x90008521
90008478:	90008521 	.word	0x90008521
9000847c:	90008521 	.word	0x90008521
90008480:	90008521 	.word	0x90008521
90008484:	90008521 	.word	0x90008521
90008488:	90008521 	.word	0x90008521
9000848c:	90008521 	.word	0x90008521
90008490:	9000850b 	.word	0x9000850b
90008494:	90008521 	.word	0x90008521
90008498:	90008521 	.word	0x90008521
9000849c:	90008521 	.word	0x90008521
900084a0:	90008521 	.word	0x90008521
900084a4:	90008521 	.word	0x90008521
900084a8:	90008521 	.word	0x90008521
900084ac:	90008521 	.word	0x90008521
900084b0:	90008529 	.word	0x90008529
900084b4:	90008521 	.word	0x90008521
900084b8:	90008521 	.word	0x90008521
900084bc:	90008521 	.word	0x90008521
900084c0:	90008521 	.word	0x90008521
900084c4:	90008521 	.word	0x90008521
900084c8:	90008521 	.word	0x90008521
900084cc:	90008521 	.word	0x90008521
900084d0:	90008529 	.word	0x90008529
900084d4:	90008521 	.word	0x90008521
900084d8:	90008521 	.word	0x90008521
900084dc:	90008521 	.word	0x90008521
900084e0:	90008521 	.word	0x90008521
900084e4:	90008521 	.word	0x90008521
900084e8:	90008521 	.word	0x90008521
900084ec:	90008521 	.word	0x90008521
900084f0:	90008529 	.word	0x90008529
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900084f8:	3308      	adds	r3, #8
900084fa:	2101      	movs	r1, #1
900084fc:	4618      	mov	r0, r3
900084fe:	f000 ffc3 	bl	90009488 <RCCEx_PLL2_Config>
90008502:	4603      	mov	r3, r0
90008504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90008508:	e00f      	b.n	9000852a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000850a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000850e:	3328      	adds	r3, #40	@ 0x28
90008510:	2101      	movs	r1, #1
90008512:	4618      	mov	r0, r3
90008514:	f001 f86a 	bl	900095ec <RCCEx_PLL3_Config>
90008518:	4603      	mov	r3, r0
9000851a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
9000851e:	e004      	b.n	9000852a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008520:	2301      	movs	r3, #1
90008522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008526:	e000      	b.n	9000852a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
90008528:	bf00      	nop
    }

    if (ret == HAL_OK)
9000852a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000852e:	2b00      	cmp	r3, #0
90008530:	d10a      	bne.n	90008548 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90008532:	4bbf      	ldr	r3, [pc, #764]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008536:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
9000853a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000853e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
90008540:	4abb      	ldr	r2, [pc, #748]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008542:	430b      	orrs	r3, r1
90008544:	6553      	str	r3, [r2, #84]	@ 0x54
90008546:	e003      	b.n	90008550 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000854c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90008550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008554:	e9d3 2300 	ldrd	r2, r3, [r3]
90008558:	f002 0302 	and.w	r3, r2, #2
9000855c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
90008560:	2300      	movs	r3, #0
90008562:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
90008566:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
9000856a:	460b      	mov	r3, r1
9000856c:	4313      	orrs	r3, r2
9000856e:	d041      	beq.n	900085f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
90008576:	2b05      	cmp	r3, #5
90008578:	d824      	bhi.n	900085c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
9000857a:	a201      	add	r2, pc, #4	@ (adr r2, 90008580 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
9000857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008580:	900085cd 	.word	0x900085cd
90008584:	90008599 	.word	0x90008599
90008588:	900085af 	.word	0x900085af
9000858c:	900085cd 	.word	0x900085cd
90008590:	900085cd 	.word	0x900085cd
90008594:	900085cd 	.word	0x900085cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000859c:	3308      	adds	r3, #8
9000859e:	2101      	movs	r1, #1
900085a0:	4618      	mov	r0, r3
900085a2:	f000 ff71 	bl	90009488 <RCCEx_PLL2_Config>
900085a6:	4603      	mov	r3, r0
900085a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900085ac:	e00f      	b.n	900085ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900085ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085b2:	3328      	adds	r3, #40	@ 0x28
900085b4:	2101      	movs	r1, #1
900085b6:	4618      	mov	r0, r3
900085b8:	f001 f818 	bl	900095ec <RCCEx_PLL3_Config>
900085bc:	4603      	mov	r3, r0
900085be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
900085c2:	e004      	b.n	900085ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900085c4:	2301      	movs	r3, #1
900085c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900085ca:	e000      	b.n	900085ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
900085cc:	bf00      	nop
    }

    if (ret == HAL_OK)
900085ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085d2:	2b00      	cmp	r3, #0
900085d4:	d10a      	bne.n	900085ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
900085d6:	4b96      	ldr	r3, [pc, #600]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900085d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
900085da:	f023 0107 	bic.w	r1, r3, #7
900085de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
900085e4:	4a92      	ldr	r2, [pc, #584]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900085e6:	430b      	orrs	r3, r1
900085e8:	6553      	str	r3, [r2, #84]	@ 0x54
900085ea:	e003      	b.n	900085f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900085ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900085f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900085f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
900085fc:	f002 0304 	and.w	r3, r2, #4
90008600:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
90008604:	2300      	movs	r3, #0
90008606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
9000860a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
9000860e:	460b      	mov	r3, r1
90008610:	4313      	orrs	r3, r2
90008612:	d044      	beq.n	9000869e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90008614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000861c:	2b05      	cmp	r3, #5
9000861e:	d825      	bhi.n	9000866c <HAL_RCCEx_PeriphCLKConfig+0xb74>
90008620:	a201      	add	r2, pc, #4	@ (adr r2, 90008628 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008626:	bf00      	nop
90008628:	90008675 	.word	0x90008675
9000862c:	90008641 	.word	0x90008641
90008630:	90008657 	.word	0x90008657
90008634:	90008675 	.word	0x90008675
90008638:	90008675 	.word	0x90008675
9000863c:	90008675 	.word	0x90008675
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008644:	3308      	adds	r3, #8
90008646:	2101      	movs	r1, #1
90008648:	4618      	mov	r0, r3
9000864a:	f000 ff1d 	bl	90009488 <RCCEx_PLL2_Config>
9000864e:	4603      	mov	r3, r0
90008650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008654:	e00f      	b.n	90008676 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000865a:	3328      	adds	r3, #40	@ 0x28
9000865c:	2101      	movs	r1, #1
9000865e:	4618      	mov	r0, r3
90008660:	f000 ffc4 	bl	900095ec <RCCEx_PLL3_Config>
90008664:	4603      	mov	r3, r0
90008666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
9000866a:	e004      	b.n	90008676 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000866c:	2301      	movs	r3, #1
9000866e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008672:	e000      	b.n	90008676 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008674:	bf00      	nop
    }

    if (ret == HAL_OK)
90008676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000867a:	2b00      	cmp	r3, #0
9000867c:	d10b      	bne.n	90008696 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000867e:	4b6c      	ldr	r3, [pc, #432]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008682:	f023 0107 	bic.w	r1, r3, #7
90008686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000868a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
9000868e:	4a68      	ldr	r2, [pc, #416]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008690:	430b      	orrs	r3, r1
90008692:	6593      	str	r3, [r2, #88]	@ 0x58
90008694:	e003      	b.n	9000869e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
9000869a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
900086a6:	f002 0320 	and.w	r3, r2, #32
900086aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
900086ae:	2300      	movs	r3, #0
900086b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
900086b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
900086b8:	460b      	mov	r3, r1
900086ba:	4313      	orrs	r3, r2
900086bc:	d055      	beq.n	9000876a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
900086be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900086c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
900086c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900086ca:	d033      	beq.n	90008734 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
900086cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
900086d0:	d82c      	bhi.n	9000872c <HAL_RCCEx_PeriphCLKConfig+0xc34>
900086d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900086d6:	d02f      	beq.n	90008738 <HAL_RCCEx_PeriphCLKConfig+0xc40>
900086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
900086dc:	d826      	bhi.n	9000872c <HAL_RCCEx_PeriphCLKConfig+0xc34>
900086de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900086e2:	d02b      	beq.n	9000873c <HAL_RCCEx_PeriphCLKConfig+0xc44>
900086e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
900086e8:	d820      	bhi.n	9000872c <HAL_RCCEx_PeriphCLKConfig+0xc34>
900086ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900086ee:	d012      	beq.n	90008716 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900086f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
900086f4:	d81a      	bhi.n	9000872c <HAL_RCCEx_PeriphCLKConfig+0xc34>
900086f6:	2b00      	cmp	r3, #0
900086f8:	d022      	beq.n	90008740 <HAL_RCCEx_PeriphCLKConfig+0xc48>
900086fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
900086fe:	d115      	bne.n	9000872c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008704:	3308      	adds	r3, #8
90008706:	2100      	movs	r1, #0
90008708:	4618      	mov	r0, r3
9000870a:	f000 febd 	bl	90009488 <RCCEx_PLL2_Config>
9000870e:	4603      	mov	r3, r0
90008710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90008714:	e015      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000871a:	3328      	adds	r3, #40	@ 0x28
9000871c:	2102      	movs	r1, #2
9000871e:	4618      	mov	r0, r3
90008720:	f000 ff64 	bl	900095ec <RCCEx_PLL3_Config>
90008724:	4603      	mov	r3, r0
90008726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
9000872a:	e00a      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000872c:	2301      	movs	r3, #1
9000872e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008732:	e006      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008734:	bf00      	nop
90008736:	e004      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008738:	bf00      	nop
9000873a:	e002      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000873c:	bf00      	nop
9000873e:	e000      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008740:	bf00      	nop
    }

    if (ret == HAL_OK)
90008742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008746:	2b00      	cmp	r3, #0
90008748:	d10b      	bne.n	90008762 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000874a:	4b39      	ldr	r3, [pc, #228]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000874c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000874e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
90008752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
9000875a:	4a35      	ldr	r2, [pc, #212]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000875c:	430b      	orrs	r3, r1
9000875e:	6553      	str	r3, [r2, #84]	@ 0x54
90008760:	e003      	b.n	9000876a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000876a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000876e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008772:	f002 0340 	and.w	r3, r2, #64	@ 0x40
90008776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
9000877a:	2300      	movs	r3, #0
9000877c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
90008780:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
90008784:	460b      	mov	r3, r1
90008786:	4313      	orrs	r3, r2
90008788:	d058      	beq.n	9000883c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
9000878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000878e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008792:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
90008796:	d033      	beq.n	90008800 <HAL_RCCEx_PeriphCLKConfig+0xd08>
90008798:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
9000879c:	d82c      	bhi.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000879e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900087a2:	d02f      	beq.n	90008804 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
900087a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
900087a8:	d826      	bhi.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900087aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
900087ae:	d02b      	beq.n	90008808 <HAL_RCCEx_PeriphCLKConfig+0xd10>
900087b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
900087b4:	d820      	bhi.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900087b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
900087ba:	d012      	beq.n	900087e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
900087bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
900087c0:	d81a      	bhi.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
900087c2:	2b00      	cmp	r3, #0
900087c4:	d022      	beq.n	9000880c <HAL_RCCEx_PeriphCLKConfig+0xd14>
900087c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
900087ca:	d115      	bne.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087d0:	3308      	adds	r3, #8
900087d2:	2100      	movs	r1, #0
900087d4:	4618      	mov	r0, r3
900087d6:	f000 fe57 	bl	90009488 <RCCEx_PLL2_Config>
900087da:	4603      	mov	r3, r0
900087dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900087e0:	e015      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900087e6:	3328      	adds	r3, #40	@ 0x28
900087e8:	2102      	movs	r1, #2
900087ea:	4618      	mov	r0, r3
900087ec:	f000 fefe 	bl	900095ec <RCCEx_PLL3_Config>
900087f0:	4603      	mov	r3, r0
900087f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900087f6:	e00a      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900087f8:	2301      	movs	r3, #1
900087fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900087fe:	e006      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008800:	bf00      	nop
90008802:	e004      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008804:	bf00      	nop
90008806:	e002      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90008808:	bf00      	nop
9000880a:	e000      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
9000880c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000880e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008812:	2b00      	cmp	r3, #0
90008814:	d10e      	bne.n	90008834 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90008816:	4b06      	ldr	r3, [pc, #24]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000881a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
9000881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
90008826:	4a02      	ldr	r2, [pc, #8]	@ (90008830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008828:	430b      	orrs	r3, r1
9000882a:	6593      	str	r3, [r2, #88]	@ 0x58
9000882c:	e006      	b.n	9000883c <HAL_RCCEx_PeriphCLKConfig+0xd44>
9000882e:	bf00      	nop
90008830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000883c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008840:	e9d3 2300 	ldrd	r2, r3, [r3]
90008844:	f002 0380 	and.w	r3, r2, #128	@ 0x80
90008848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
9000884c:	2300      	movs	r3, #0
9000884e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
90008852:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
90008856:	460b      	mov	r3, r1
90008858:	4313      	orrs	r3, r2
9000885a:	d055      	beq.n	90008908 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
9000885c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008860:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
90008864:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
90008868:	d033      	beq.n	900088d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
9000886a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
9000886e:	d82c      	bhi.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
90008874:	d02f      	beq.n	900088d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000887a:	d826      	bhi.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000887c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008880:	d02b      	beq.n	900088da <HAL_RCCEx_PeriphCLKConfig+0xde2>
90008882:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
90008886:	d820      	bhi.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
9000888c:	d012      	beq.n	900088b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
9000888e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
90008892:	d81a      	bhi.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008894:	2b00      	cmp	r3, #0
90008896:	d022      	beq.n	900088de <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
9000889c:	d115      	bne.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088a2:	3308      	adds	r3, #8
900088a4:	2100      	movs	r1, #0
900088a6:	4618      	mov	r0, r3
900088a8:	f000 fdee 	bl	90009488 <RCCEx_PLL2_Config>
900088ac:	4603      	mov	r3, r0
900088ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
900088b2:	e015      	b.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900088b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088b8:	3328      	adds	r3, #40	@ 0x28
900088ba:	2102      	movs	r1, #2
900088bc:	4618      	mov	r0, r3
900088be:	f000 fe95 	bl	900095ec <RCCEx_PLL3_Config>
900088c2:	4603      	mov	r3, r0
900088c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
900088c8:	e00a      	b.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900088ca:	2301      	movs	r3, #1
900088cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
900088d0:	e006      	b.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900088d2:	bf00      	nop
900088d4:	e004      	b.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900088d6:	bf00      	nop
900088d8:	e002      	b.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900088da:	bf00      	nop
900088dc:	e000      	b.n	900088e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900088de:	bf00      	nop
    }

    if (ret == HAL_OK)
900088e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
900088e4:	2b00      	cmp	r3, #0
900088e6:	d10b      	bne.n	90008900 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
900088e8:	4ba1      	ldr	r3, [pc, #644]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900088ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900088ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
900088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900088f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
900088f8:	4a9d      	ldr	r2, [pc, #628]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900088fa:	430b      	orrs	r3, r1
900088fc:	6593      	str	r3, [r2, #88]	@ 0x58
900088fe:	e003      	b.n	90008908 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000890c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008910:	f002 0308 	and.w	r3, r2, #8
90008914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
90008918:	2300      	movs	r3, #0
9000891a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
9000891e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
90008922:	460b      	mov	r3, r1
90008924:	4313      	orrs	r3, r2
90008926:	d01e      	beq.n	90008966 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000892c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008930:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90008934:	d10c      	bne.n	90008950 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000893a:	3328      	adds	r3, #40	@ 0x28
9000893c:	2102      	movs	r1, #2
9000893e:	4618      	mov	r0, r3
90008940:	f000 fe54 	bl	900095ec <RCCEx_PLL3_Config>
90008944:	4603      	mov	r3, r0
90008946:	2b00      	cmp	r3, #0
90008948:	d002      	beq.n	90008950 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
9000894a:	2301      	movs	r3, #1
9000894c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008950:	4b87      	ldr	r3, [pc, #540]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008954:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90008958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000895c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
90008960:	4a83      	ldr	r2, [pc, #524]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008962:	430b      	orrs	r3, r1
90008964:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000896a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000896e:	f002 0310 	and.w	r3, r2, #16
90008972:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
90008976:	2300      	movs	r3, #0
90008978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
9000897c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
90008980:	460b      	mov	r3, r1
90008982:	4313      	orrs	r3, r2
90008984:	d01e      	beq.n	900089c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
9000898a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
9000898e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008992:	d10c      	bne.n	900089ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008998:	3328      	adds	r3, #40	@ 0x28
9000899a:	2102      	movs	r1, #2
9000899c:	4618      	mov	r0, r3
9000899e:	f000 fe25 	bl	900095ec <RCCEx_PLL3_Config>
900089a2:	4603      	mov	r3, r0
900089a4:	2b00      	cmp	r3, #0
900089a6:	d002      	beq.n	900089ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
900089a8:	2301      	movs	r3, #1
900089aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
900089ae:	4b70      	ldr	r3, [pc, #448]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
900089b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
900089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
900089be:	4a6c      	ldr	r2, [pc, #432]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089c0:	430b      	orrs	r3, r1
900089c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
900089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
900089cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
900089d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
900089d4:	2300      	movs	r3, #0
900089d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
900089da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
900089de:	460b      	mov	r3, r1
900089e0:	4313      	orrs	r3, r2
900089e2:	d03e      	beq.n	90008a62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
900089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
900089e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
900089ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900089f0:	d022      	beq.n	90008a38 <HAL_RCCEx_PeriphCLKConfig+0xf40>
900089f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
900089f6:	d81b      	bhi.n	90008a30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
900089f8:	2b00      	cmp	r3, #0
900089fa:	d003      	beq.n	90008a04 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
900089fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008a00:	d00b      	beq.n	90008a1a <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008a02:	e015      	b.n	90008a30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a08:	3308      	adds	r3, #8
90008a0a:	2100      	movs	r1, #0
90008a0c:	4618      	mov	r0, r3
90008a0e:	f000 fd3b 	bl	90009488 <RCCEx_PLL2_Config>
90008a12:	4603      	mov	r3, r0
90008a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008a18:	e00f      	b.n	90008a3a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a1e:	3328      	adds	r3, #40	@ 0x28
90008a20:	2102      	movs	r1, #2
90008a22:	4618      	mov	r0, r3
90008a24:	f000 fde2 	bl	900095ec <RCCEx_PLL3_Config>
90008a28:	4603      	mov	r3, r0
90008a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008a2e:	e004      	b.n	90008a3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008a30:	2301      	movs	r3, #1
90008a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008a36:	e000      	b.n	90008a3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008a38:	bf00      	nop
    }

    if (ret == HAL_OK)
90008a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a3e:	2b00      	cmp	r3, #0
90008a40:	d10b      	bne.n	90008a5a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008a42:	4b4b      	ldr	r3, [pc, #300]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
90008a46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
90008a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
90008a52:	4a47      	ldr	r2, [pc, #284]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a54:	430b      	orrs	r3, r1
90008a56:	6593      	str	r3, [r2, #88]	@ 0x58
90008a58:	e003      	b.n	90008a62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
90008a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
90008a70:	2300      	movs	r3, #0
90008a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
90008a74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
90008a78:	460b      	mov	r3, r1
90008a7a:	4313      	orrs	r3, r2
90008a7c:	d03b      	beq.n	90008af6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008a86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008a8a:	d01f      	beq.n	90008acc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008a8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
90008a90:	d818      	bhi.n	90008ac4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
90008a96:	d003      	beq.n	90008aa0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
90008a9c:	d007      	beq.n	90008aae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008a9e:	e011      	b.n	90008ac4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008aa0:	4b33      	ldr	r3, [pc, #204]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008aa4:	4a32      	ldr	r2, [pc, #200]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008aac:	e00f      	b.n	90008ace <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ab2:	3328      	adds	r3, #40	@ 0x28
90008ab4:	2101      	movs	r1, #1
90008ab6:	4618      	mov	r0, r3
90008ab8:	f000 fd98 	bl	900095ec <RCCEx_PLL3_Config>
90008abc:	4603      	mov	r3, r0
90008abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008ac2:	e004      	b.n	90008ace <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008ac4:	2301      	movs	r3, #1
90008ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008aca:	e000      	b.n	90008ace <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008acc:	bf00      	nop
    }

    if (ret == HAL_OK)
90008ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ad2:	2b00      	cmp	r3, #0
90008ad4:	d10b      	bne.n	90008aee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008ad6:	4b26      	ldr	r3, [pc, #152]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008ada:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
90008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90008ae6:	4a22      	ldr	r2, [pc, #136]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ae8:	430b      	orrs	r3, r1
90008aea:	6553      	str	r3, [r2, #84]	@ 0x54
90008aec:	e003      	b.n	90008af6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
90008afe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
90008b02:	673b      	str	r3, [r7, #112]	@ 0x70
90008b04:	2300      	movs	r3, #0
90008b06:	677b      	str	r3, [r7, #116]	@ 0x74
90008b08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
90008b0c:	460b      	mov	r3, r1
90008b0e:	4313      	orrs	r3, r2
90008b10:	d034      	beq.n	90008b7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008b18:	2b00      	cmp	r3, #0
90008b1a:	d003      	beq.n	90008b24 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
90008b20:	d007      	beq.n	90008b32 <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008b22:	e011      	b.n	90008b48 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008b24:	4b12      	ldr	r3, [pc, #72]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008b28:	4a11      	ldr	r2, [pc, #68]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008b30:	e00e      	b.n	90008b50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b36:	3308      	adds	r3, #8
90008b38:	2102      	movs	r1, #2
90008b3a:	4618      	mov	r0, r3
90008b3c:	f000 fca4 	bl	90009488 <RCCEx_PLL2_Config>
90008b40:	4603      	mov	r3, r0
90008b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008b46:	e003      	b.n	90008b50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008b48:	2301      	movs	r3, #1
90008b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b54:	2b00      	cmp	r3, #0
90008b56:	d10d      	bne.n	90008b74 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008b58:	4b05      	ldr	r3, [pc, #20]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008b5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
90008b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008b66:	4a02      	ldr	r2, [pc, #8]	@ (90008b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b68:	430b      	orrs	r3, r1
90008b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
90008b6c:	e006      	b.n	90008b7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008b6e:	bf00      	nop
90008b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
90008b88:	66bb      	str	r3, [r7, #104]	@ 0x68
90008b8a:	2300      	movs	r3, #0
90008b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
90008b8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
90008b92:	460b      	mov	r3, r1
90008b94:	4313      	orrs	r3, r2
90008b96:	d00c      	beq.n	90008bb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008b9c:	3328      	adds	r3, #40	@ 0x28
90008b9e:	2102      	movs	r1, #2
90008ba0:	4618      	mov	r0, r3
90008ba2:	f000 fd23 	bl	900095ec <RCCEx_PLL3_Config>
90008ba6:	4603      	mov	r3, r0
90008ba8:	2b00      	cmp	r3, #0
90008baa:	d002      	beq.n	90008bb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008bac:	2301      	movs	r3, #1
90008bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
90008bbe:	663b      	str	r3, [r7, #96]	@ 0x60
90008bc0:	2300      	movs	r3, #0
90008bc2:	667b      	str	r3, [r7, #100]	@ 0x64
90008bc4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
90008bc8:	460b      	mov	r3, r1
90008bca:	4313      	orrs	r3, r2
90008bcc:	d038      	beq.n	90008c40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008bda:	d018      	beq.n	90008c0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
90008be0:	d811      	bhi.n	90008c06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008be6:	d014      	beq.n	90008c12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
90008bec:	d80b      	bhi.n	90008c06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008bee:	2b00      	cmp	r3, #0
90008bf0:	d011      	beq.n	90008c16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
90008bf6:	d106      	bne.n	90008c06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008bf8:	4bc3      	ldr	r3, [pc, #780]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008bfc:	4ac2      	ldr	r2, [pc, #776]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
90008c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008c04:	e008      	b.n	90008c18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008c06:	2301      	movs	r3, #1
90008c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
90008c0c:	e004      	b.n	90008c18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c0e:	bf00      	nop
90008c10:	e002      	b.n	90008c18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c12:	bf00      	nop
90008c14:	e000      	b.n	90008c18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008c16:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c1c:	2b00      	cmp	r3, #0
90008c1e:	d10b      	bne.n	90008c38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008c20:	4bb9      	ldr	r3, [pc, #740]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008c24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
90008c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
90008c30:	4ab5      	ldr	r2, [pc, #724]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c32:	430b      	orrs	r3, r1
90008c34:	6553      	str	r3, [r2, #84]	@ 0x54
90008c36:	e003      	b.n	90008c40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
90008c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
90008c4e:	2300      	movs	r3, #0
90008c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
90008c52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
90008c56:	460b      	mov	r3, r1
90008c58:	4313      	orrs	r3, r2
90008c5a:	d009      	beq.n	90008c70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008c5c:	4baa      	ldr	r3, [pc, #680]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008c60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
90008c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
90008c6a:	4aa7      	ldr	r2, [pc, #668]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c6c:	430b      	orrs	r3, r1
90008c6e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c78:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
90008c7c:	653b      	str	r3, [r7, #80]	@ 0x50
90008c7e:	2300      	movs	r3, #0
90008c80:	657b      	str	r3, [r7, #84]	@ 0x54
90008c82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
90008c86:	460b      	mov	r3, r1
90008c88:	4313      	orrs	r3, r2
90008c8a:	d00a      	beq.n	90008ca2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008c8c:	4b9e      	ldr	r3, [pc, #632]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c8e:	691b      	ldr	r3, [r3, #16]
90008c90:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
90008c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008c98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
90008c9c:	4a9a      	ldr	r2, [pc, #616]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008c9e:	430b      	orrs	r3, r1
90008ca0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008caa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
90008cae:	64bb      	str	r3, [r7, #72]	@ 0x48
90008cb0:	2300      	movs	r3, #0
90008cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
90008cb4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
90008cb8:	460b      	mov	r3, r1
90008cba:	4313      	orrs	r3, r2
90008cbc:	d009      	beq.n	90008cd2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008cbe:	4b92      	ldr	r3, [pc, #584]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
90008cc2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
90008cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
90008ccc:	4a8e      	ldr	r2, [pc, #568]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cce:	430b      	orrs	r3, r1
90008cd0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008cda:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
90008cde:	643b      	str	r3, [r7, #64]	@ 0x40
90008ce0:	2300      	movs	r3, #0
90008ce2:	647b      	str	r3, [r7, #68]	@ 0x44
90008ce4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
90008ce8:	460b      	mov	r3, r1
90008cea:	4313      	orrs	r3, r2
90008cec:	d00e      	beq.n	90008d0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008cee:	4b86      	ldr	r3, [pc, #536]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cf0:	691b      	ldr	r3, [r3, #16]
90008cf2:	4a85      	ldr	r2, [pc, #532]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cf4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
90008cf8:	6113      	str	r3, [r2, #16]
90008cfa:	4b83      	ldr	r3, [pc, #524]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cfc:	6919      	ldr	r1, [r3, #16]
90008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
90008d06:	4a80      	ldr	r2, [pc, #512]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d08:	430b      	orrs	r3, r1
90008d0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d14:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
90008d18:	63bb      	str	r3, [r7, #56]	@ 0x38
90008d1a:	2300      	movs	r3, #0
90008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
90008d1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
90008d22:	460b      	mov	r3, r1
90008d24:	4313      	orrs	r3, r2
90008d26:	d009      	beq.n	90008d3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008d28:	4b77      	ldr	r3, [pc, #476]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
90008d2c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
90008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008d36:	4a74      	ldr	r2, [pc, #464]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d38:	430b      	orrs	r3, r1
90008d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d44:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
90008d48:	633b      	str	r3, [r7, #48]	@ 0x30
90008d4a:	2300      	movs	r3, #0
90008d4c:	637b      	str	r3, [r7, #52]	@ 0x34
90008d4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
90008d52:	460b      	mov	r3, r1
90008d54:	4313      	orrs	r3, r2
90008d56:	d00a      	beq.n	90008d6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008d58:	4b6b      	ldr	r3, [pc, #428]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90008d5c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
90008d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
90008d68:	4a67      	ldr	r2, [pc, #412]	@ (90008f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d6a:	430b      	orrs	r3, r1
90008d6c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d76:	2100      	movs	r1, #0
90008d78:	62b9      	str	r1, [r7, #40]	@ 0x28
90008d7a:	f003 0301 	and.w	r3, r3, #1
90008d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
90008d80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
90008d84:	460b      	mov	r3, r1
90008d86:	4313      	orrs	r3, r2
90008d88:	d011      	beq.n	90008dae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008d8e:	3308      	adds	r3, #8
90008d90:	2100      	movs	r1, #0
90008d92:	4618      	mov	r0, r3
90008d94:	f000 fb78 	bl	90009488 <RCCEx_PLL2_Config>
90008d98:	4603      	mov	r3, r0
90008d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008da2:	2b00      	cmp	r3, #0
90008da4:	d003      	beq.n	90008dae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008db6:	2100      	movs	r1, #0
90008db8:	6239      	str	r1, [r7, #32]
90008dba:	f003 0302 	and.w	r3, r3, #2
90008dbe:	627b      	str	r3, [r7, #36]	@ 0x24
90008dc0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008dc4:	460b      	mov	r3, r1
90008dc6:	4313      	orrs	r3, r2
90008dc8:	d011      	beq.n	90008dee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008dce:	3308      	adds	r3, #8
90008dd0:	2101      	movs	r1, #1
90008dd2:	4618      	mov	r0, r3
90008dd4:	f000 fb58 	bl	90009488 <RCCEx_PLL2_Config>
90008dd8:	4603      	mov	r3, r0
90008dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008de2:	2b00      	cmp	r3, #0
90008de4:	d003      	beq.n	90008dee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008df6:	2100      	movs	r1, #0
90008df8:	61b9      	str	r1, [r7, #24]
90008dfa:	f003 0304 	and.w	r3, r3, #4
90008dfe:	61fb      	str	r3, [r7, #28]
90008e00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008e04:	460b      	mov	r3, r1
90008e06:	4313      	orrs	r3, r2
90008e08:	d011      	beq.n	90008e2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e0e:	3308      	adds	r3, #8
90008e10:	2102      	movs	r1, #2
90008e12:	4618      	mov	r0, r3
90008e14:	f000 fb38 	bl	90009488 <RCCEx_PLL2_Config>
90008e18:	4603      	mov	r3, r0
90008e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e22:	2b00      	cmp	r3, #0
90008e24:	d003      	beq.n	90008e2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e36:	2100      	movs	r1, #0
90008e38:	6139      	str	r1, [r7, #16]
90008e3a:	f003 0308 	and.w	r3, r3, #8
90008e3e:	617b      	str	r3, [r7, #20]
90008e40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008e44:	460b      	mov	r3, r1
90008e46:	4313      	orrs	r3, r2
90008e48:	d011      	beq.n	90008e6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e4e:	3328      	adds	r3, #40	@ 0x28
90008e50:	2100      	movs	r1, #0
90008e52:	4618      	mov	r0, r3
90008e54:	f000 fbca 	bl	900095ec <RCCEx_PLL3_Config>
90008e58:	4603      	mov	r3, r0
90008e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
90008e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e62:	2b00      	cmp	r3, #0
90008e64:	d003      	beq.n	90008e6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e76:	2100      	movs	r1, #0
90008e78:	60b9      	str	r1, [r7, #8]
90008e7a:	f003 0310 	and.w	r3, r3, #16
90008e7e:	60fb      	str	r3, [r7, #12]
90008e80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008e84:	460b      	mov	r3, r1
90008e86:	4313      	orrs	r3, r2
90008e88:	d011      	beq.n	90008eae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008e8e:	3328      	adds	r3, #40	@ 0x28
90008e90:	2101      	movs	r1, #1
90008e92:	4618      	mov	r0, r3
90008e94:	f000 fbaa 	bl	900095ec <RCCEx_PLL3_Config>
90008e98:	4603      	mov	r3, r0
90008e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ea2:	2b00      	cmp	r3, #0
90008ea4:	d003      	beq.n	90008eae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008eb6:	2100      	movs	r1, #0
90008eb8:	6039      	str	r1, [r7, #0]
90008eba:	f003 0320 	and.w	r3, r3, #32
90008ebe:	607b      	str	r3, [r7, #4]
90008ec0:	e9d7 1200 	ldrd	r1, r2, [r7]
90008ec4:	460b      	mov	r3, r1
90008ec6:	4313      	orrs	r3, r2
90008ec8:	d011      	beq.n	90008eee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
90008ece:	3328      	adds	r3, #40	@ 0x28
90008ed0:	2102      	movs	r1, #2
90008ed2:	4618      	mov	r0, r3
90008ed4:	f000 fb8a 	bl	900095ec <RCCEx_PLL3_Config>
90008ed8:	4603      	mov	r3, r0
90008eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
90008ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008ee2:	2b00      	cmp	r3, #0
90008ee4:	d003      	beq.n	90008eee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
90008eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
90008eee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
90008ef2:	2b00      	cmp	r3, #0
90008ef4:	d101      	bne.n	90008efa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008ef6:	2300      	movs	r3, #0
90008ef8:	e000      	b.n	90008efc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008efa:	2301      	movs	r3, #1
}
90008efc:	4618      	mov	r0, r3
90008efe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
90008f02:	46bd      	mov	sp, r7
90008f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90008f08:	58024400 	.word	0x58024400

90008f0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90008f0c:	b580      	push	{r7, lr}
90008f0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90008f10:	f7fe fd96 	bl	90007a40 <HAL_RCC_GetHCLKFreq>
90008f14:	4602      	mov	r2, r0
90008f16:	4b06      	ldr	r3, [pc, #24]	@ (90008f30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90008f18:	6a1b      	ldr	r3, [r3, #32]
90008f1a:	091b      	lsrs	r3, r3, #4
90008f1c:	f003 0307 	and.w	r3, r3, #7
90008f20:	4904      	ldr	r1, [pc, #16]	@ (90008f34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
90008f22:	5ccb      	ldrb	r3, [r1, r3]
90008f24:	f003 031f 	and.w	r3, r3, #31
90008f28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90008f2c:	4618      	mov	r0, r3
90008f2e:	bd80      	pop	{r7, pc}
90008f30:	58024400 	.word	0x58024400
90008f34:	9000d678 	.word	0x9000d678

90008f38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90008f38:	b480      	push	{r7}
90008f3a:	b089      	sub	sp, #36	@ 0x24
90008f3c:	af00      	add	r7, sp, #0
90008f3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90008f40:	4ba1      	ldr	r3, [pc, #644]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008f44:	f003 0303 	and.w	r3, r3, #3
90008f48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90008f4a:	4b9f      	ldr	r3, [pc, #636]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90008f4e:	0b1b      	lsrs	r3, r3, #12
90008f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
90008f54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90008f56:	4b9c      	ldr	r3, [pc, #624]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90008f5a:	091b      	lsrs	r3, r3, #4
90008f5c:	f003 0301 	and.w	r3, r3, #1
90008f60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
90008f62:	4b99      	ldr	r3, [pc, #612]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
90008f66:	08db      	lsrs	r3, r3, #3
90008f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
90008f6c:	693a      	ldr	r2, [r7, #16]
90008f6e:	fb02 f303 	mul.w	r3, r2, r3
90008f72:	ee07 3a90 	vmov	s15, r3
90008f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90008f7e:	697b      	ldr	r3, [r7, #20]
90008f80:	2b00      	cmp	r3, #0
90008f82:	f000 8111 	beq.w	900091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90008f86:	69bb      	ldr	r3, [r7, #24]
90008f88:	2b02      	cmp	r3, #2
90008f8a:	f000 8083 	beq.w	90009094 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90008f8e:	69bb      	ldr	r3, [r7, #24]
90008f90:	2b02      	cmp	r3, #2
90008f92:	f200 80a1 	bhi.w	900090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90008f96:	69bb      	ldr	r3, [r7, #24]
90008f98:	2b00      	cmp	r3, #0
90008f9a:	d003      	beq.n	90008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90008f9c:	69bb      	ldr	r3, [r7, #24]
90008f9e:	2b01      	cmp	r3, #1
90008fa0:	d056      	beq.n	90009050 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
90008fa2:	e099      	b.n	900090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008fa4:	4b88      	ldr	r3, [pc, #544]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fa6:	681b      	ldr	r3, [r3, #0]
90008fa8:	f003 0320 	and.w	r3, r3, #32
90008fac:	2b00      	cmp	r3, #0
90008fae:	d02d      	beq.n	9000900c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90008fb0:	4b85      	ldr	r3, [pc, #532]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fb2:	681b      	ldr	r3, [r3, #0]
90008fb4:	08db      	lsrs	r3, r3, #3
90008fb6:	f003 0303 	and.w	r3, r3, #3
90008fba:	4a84      	ldr	r2, [pc, #528]	@ (900091cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90008fbc:	fa22 f303 	lsr.w	r3, r2, r3
90008fc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90008fc2:	68bb      	ldr	r3, [r7, #8]
90008fc4:	ee07 3a90 	vmov	s15, r3
90008fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008fcc:	697b      	ldr	r3, [r7, #20]
90008fce:	ee07 3a90 	vmov	s15, r3
90008fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008fda:	4b7b      	ldr	r3, [pc, #492]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90008fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90008fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008fe2:	ee07 3a90 	vmov	s15, r3
90008fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008fea:	ed97 6a03 	vldr	s12, [r7, #12]
90008fee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 900091d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90008ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90008ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009002:	ee67 7a27 	vmul.f32	s15, s14, s15
90009006:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
9000900a:	e087      	b.n	9000911c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000900c:	697b      	ldr	r3, [r7, #20]
9000900e:	ee07 3a90 	vmov	s15, r3
90009012:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009016:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 900091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
9000901a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000901e:	4b6a      	ldr	r3, [pc, #424]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009022:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009026:	ee07 3a90 	vmov	s15, r3
9000902a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000902e:	ed97 6a03 	vldr	s12, [r7, #12]
90009032:	eddf 5a67 	vldr	s11, [pc, #412]	@ 900091d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009036:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000903a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000903e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009042:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009046:	ee67 7a27 	vmul.f32	s15, s14, s15
9000904a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000904e:	e065      	b.n	9000911c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009050:	697b      	ldr	r3, [r7, #20]
90009052:	ee07 3a90 	vmov	s15, r3
90009056:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000905a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 900091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000905e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009062:	4b59      	ldr	r3, [pc, #356]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90009064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009066:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000906a:	ee07 3a90 	vmov	s15, r3
9000906e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009072:	ed97 6a03 	vldr	s12, [r7, #12]
90009076:	eddf 5a56 	vldr	s11, [pc, #344]	@ 900091d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000907a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000907e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90009082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009086:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000908a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000908e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90009092:	e043      	b.n	9000911c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90009094:	697b      	ldr	r3, [r7, #20]
90009096:	ee07 3a90 	vmov	s15, r3
9000909a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000909e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 900091dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
900090a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900090a6:	4b48      	ldr	r3, [pc, #288]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900090aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
900090ae:	ee07 3a90 	vmov	s15, r3
900090b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090b6:	ed97 6a03 	vldr	s12, [r7, #12]
900090ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 900091d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900090be:	eec6 7a25 	vdiv.f32	s15, s12, s11
900090c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900090c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900090ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
900090ce:	ee67 7a27 	vmul.f32	s15, s14, s15
900090d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900090d6:	e021      	b.n	9000911c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900090d8:	697b      	ldr	r3, [r7, #20]
900090da:	ee07 3a90 	vmov	s15, r3
900090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
900090e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 900091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
900090e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900090ea:	4b37      	ldr	r3, [pc, #220]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900090ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
900090ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
900090f2:	ee07 3a90 	vmov	s15, r3
900090f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900090fa:	ed97 6a03 	vldr	s12, [r7, #12]
900090fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 900091d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90009102:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009106:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000910a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000910e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009112:	ee67 7a27 	vmul.f32	s15, s14, s15
90009116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000911a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000911c:	4b2a      	ldr	r3, [pc, #168]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000911e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
90009120:	0a5b      	lsrs	r3, r3, #9
90009122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009126:	ee07 3a90 	vmov	s15, r3
9000912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000912e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009132:	ee37 7a87 	vadd.f32	s14, s15, s14
90009136:	edd7 6a07 	vldr	s13, [r7, #28]
9000913a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000913e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009142:	ee17 2a90 	vmov	r2, s15
90009146:	687b      	ldr	r3, [r7, #4]
90009148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000914a:	4b1f      	ldr	r3, [pc, #124]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000914c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000914e:	0c1b      	lsrs	r3, r3, #16
90009150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009154:	ee07 3a90 	vmov	s15, r3
90009158:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000915c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009160:	ee37 7a87 	vadd.f32	s14, s15, s14
90009164:	edd7 6a07 	vldr	s13, [r7, #28]
90009168:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000916c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009170:	ee17 2a90 	vmov	r2, s15
90009174:	687b      	ldr	r3, [r7, #4]
90009176:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90009178:	4b13      	ldr	r3, [pc, #76]	@ (900091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000917a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
9000917c:	0e1b      	lsrs	r3, r3, #24
9000917e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
90009182:	ee07 3a90 	vmov	s15, r3
90009186:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000918a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
9000918e:	ee37 7a87 	vadd.f32	s14, s15, s14
90009192:	edd7 6a07 	vldr	s13, [r7, #28]
90009196:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000919a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000919e:	ee17 2a90 	vmov	r2, s15
900091a2:	687b      	ldr	r3, [r7, #4]
900091a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
900091a6:	e008      	b.n	900091ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900091a8:	687b      	ldr	r3, [r7, #4]
900091aa:	2200      	movs	r2, #0
900091ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
900091ae:	687b      	ldr	r3, [r7, #4]
900091b0:	2200      	movs	r2, #0
900091b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
900091b4:	687b      	ldr	r3, [r7, #4]
900091b6:	2200      	movs	r2, #0
900091b8:	609a      	str	r2, [r3, #8]
}
900091ba:	bf00      	nop
900091bc:	3724      	adds	r7, #36	@ 0x24
900091be:	46bd      	mov	sp, r7
900091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900091c4:	4770      	bx	lr
900091c6:	bf00      	nop
900091c8:	58024400 	.word	0x58024400
900091cc:	03d09000 	.word	0x03d09000
900091d0:	46000000 	.word	0x46000000
900091d4:	4c742400 	.word	0x4c742400
900091d8:	4a742400 	.word	0x4a742400
900091dc:	4bbebc20 	.word	0x4bbebc20

900091e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
900091e0:	b480      	push	{r7}
900091e2:	b089      	sub	sp, #36	@ 0x24
900091e4:	af00      	add	r7, sp, #0
900091e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900091e8:	4ba1      	ldr	r3, [pc, #644]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900091ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900091ec:	f003 0303 	and.w	r3, r3, #3
900091f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
900091f2:	4b9f      	ldr	r3, [pc, #636]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900091f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900091f6:	0d1b      	lsrs	r3, r3, #20
900091f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
900091fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
900091fe:	4b9c      	ldr	r3, [pc, #624]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009202:	0a1b      	lsrs	r3, r3, #8
90009204:	f003 0301 	and.w	r3, r3, #1
90009208:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000920a:	4b99      	ldr	r3, [pc, #612]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000920c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000920e:	08db      	lsrs	r3, r3, #3
90009210:	f3c3 030c 	ubfx	r3, r3, #0, #13
90009214:	693a      	ldr	r2, [r7, #16]
90009216:	fb02 f303 	mul.w	r3, r2, r3
9000921a:	ee07 3a90 	vmov	s15, r3
9000921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009222:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90009226:	697b      	ldr	r3, [r7, #20]
90009228:	2b00      	cmp	r3, #0
9000922a:	f000 8111 	beq.w	90009450 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
9000922e:	69bb      	ldr	r3, [r7, #24]
90009230:	2b02      	cmp	r3, #2
90009232:	f000 8083 	beq.w	9000933c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90009236:	69bb      	ldr	r3, [r7, #24]
90009238:	2b02      	cmp	r3, #2
9000923a:	f200 80a1 	bhi.w	90009380 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
9000923e:	69bb      	ldr	r3, [r7, #24]
90009240:	2b00      	cmp	r3, #0
90009242:	d003      	beq.n	9000924c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90009244:	69bb      	ldr	r3, [r7, #24]
90009246:	2b01      	cmp	r3, #1
90009248:	d056      	beq.n	900092f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
9000924a:	e099      	b.n	90009380 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000924c:	4b88      	ldr	r3, [pc, #544]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000924e:	681b      	ldr	r3, [r3, #0]
90009250:	f003 0320 	and.w	r3, r3, #32
90009254:	2b00      	cmp	r3, #0
90009256:	d02d      	beq.n	900092b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009258:	4b85      	ldr	r3, [pc, #532]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000925a:	681b      	ldr	r3, [r3, #0]
9000925c:	08db      	lsrs	r3, r3, #3
9000925e:	f003 0303 	and.w	r3, r3, #3
90009262:	4a84      	ldr	r2, [pc, #528]	@ (90009474 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90009264:	fa22 f303 	lsr.w	r3, r2, r3
90009268:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000926a:	68bb      	ldr	r3, [r7, #8]
9000926c:	ee07 3a90 	vmov	s15, r3
90009270:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009274:	697b      	ldr	r3, [r7, #20]
90009276:	ee07 3a90 	vmov	s15, r3
9000927a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000927e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009282:	4b7b      	ldr	r3, [pc, #492]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009286:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000928a:	ee07 3a90 	vmov	s15, r3
9000928e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90009292:	ed97 6a03 	vldr	s12, [r7, #12]
90009296:	eddf 5a78 	vldr	s11, [pc, #480]	@ 90009478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000929a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000929e:	ee76 7aa7 	vadd.f32	s15, s13, s15
900092a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900092a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900092aa:	ee67 7a27 	vmul.f32	s15, s14, s15
900092ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
900092b2:	e087      	b.n	900093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900092b4:	697b      	ldr	r3, [r7, #20]
900092b6:	ee07 3a90 	vmov	s15, r3
900092ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
900092be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 9000947c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
900092c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900092c6:	4b6a      	ldr	r3, [pc, #424]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900092c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900092ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
900092ce:	ee07 3a90 	vmov	s15, r3
900092d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900092d6:	ed97 6a03 	vldr	s12, [r7, #12]
900092da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 90009478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900092de:	eec6 7a25 	vdiv.f32	s15, s12, s11
900092e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900092e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900092ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
900092ee:	ee67 7a27 	vmul.f32	s15, s14, s15
900092f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900092f6:	e065      	b.n	900093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900092f8:	697b      	ldr	r3, [r7, #20]
900092fa:	ee07 3a90 	vmov	s15, r3
900092fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009302:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 90009480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90009306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000930a:	4b59      	ldr	r3, [pc, #356]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
9000930e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009312:	ee07 3a90 	vmov	s15, r3
90009316:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000931a:	ed97 6a03 	vldr	s12, [r7, #12]
9000931e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 90009478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009322:	eec6 7a25 	vdiv.f32	s15, s12, s11
90009326:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000932a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
9000932e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009332:	ee67 7a27 	vmul.f32	s15, s14, s15
90009336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000933a:	e043      	b.n	900093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000933c:	697b      	ldr	r3, [r7, #20]
9000933e:	ee07 3a90 	vmov	s15, r3
90009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009346:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 90009484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
9000934a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000934e:	4b48      	ldr	r3, [pc, #288]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009352:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009356:	ee07 3a90 	vmov	s15, r3
9000935a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000935e:	ed97 6a03 	vldr	s12, [r7, #12]
90009362:	eddf 5a45 	vldr	s11, [pc, #276]	@ 90009478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90009366:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000936a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000936e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
90009372:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009376:	ee67 7a27 	vmul.f32	s15, s14, s15
9000937a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000937e:	e021      	b.n	900093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90009380:	697b      	ldr	r3, [r7, #20]
90009382:	ee07 3a90 	vmov	s15, r3
90009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000938a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 90009480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000938e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90009392:	4b37      	ldr	r3, [pc, #220]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000939a:	ee07 3a90 	vmov	s15, r3
9000939e:	eef8 6a67 	vcvt.f32.u32	s13, s15
900093a2:	ed97 6a03 	vldr	s12, [r7, #12]
900093a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 90009478 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900093aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
900093ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
900093b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
900093b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900093ba:	ee67 7a27 	vmul.f32	s15, s14, s15
900093be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900093c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
900093c4:	4b2a      	ldr	r3, [pc, #168]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900093c8:	0a5b      	lsrs	r3, r3, #9
900093ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900093ce:	ee07 3a90 	vmov	s15, r3
900093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900093d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
900093da:	ee37 7a87 	vadd.f32	s14, s15, s14
900093de:	edd7 6a07 	vldr	s13, [r7, #28]
900093e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
900093e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900093ea:	ee17 2a90 	vmov	r2, s15
900093ee:	687b      	ldr	r3, [r7, #4]
900093f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
900093f2:	4b1f      	ldr	r3, [pc, #124]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900093f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
900093f6:	0c1b      	lsrs	r3, r3, #16
900093f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
900093fc:	ee07 3a90 	vmov	s15, r3
90009400:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009404:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009408:	ee37 7a87 	vadd.f32	s14, s15, s14
9000940c:	edd7 6a07 	vldr	s13, [r7, #28]
90009410:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009418:	ee17 2a90 	vmov	r2, s15
9000941c:	687b      	ldr	r3, [r7, #4]
9000941e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90009420:	4b13      	ldr	r3, [pc, #76]	@ (90009470 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90009422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
90009424:	0e1b      	lsrs	r3, r3, #24
90009426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
9000942a:	ee07 3a90 	vmov	s15, r3
9000942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90009432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
90009436:	ee37 7a87 	vadd.f32	s14, s15, s14
9000943a:	edd7 6a07 	vldr	s13, [r7, #28]
9000943e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009446:	ee17 2a90 	vmov	r2, s15
9000944a:	687b      	ldr	r3, [r7, #4]
9000944c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
9000944e:	e008      	b.n	90009462 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90009450:	687b      	ldr	r3, [r7, #4]
90009452:	2200      	movs	r2, #0
90009454:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90009456:	687b      	ldr	r3, [r7, #4]
90009458:	2200      	movs	r2, #0
9000945a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
9000945c:	687b      	ldr	r3, [r7, #4]
9000945e:	2200      	movs	r2, #0
90009460:	609a      	str	r2, [r3, #8]
}
90009462:	bf00      	nop
90009464:	3724      	adds	r7, #36	@ 0x24
90009466:	46bd      	mov	sp, r7
90009468:	f85d 7b04 	ldr.w	r7, [sp], #4
9000946c:	4770      	bx	lr
9000946e:	bf00      	nop
90009470:	58024400 	.word	0x58024400
90009474:	03d09000 	.word	0x03d09000
90009478:	46000000 	.word	0x46000000
9000947c:	4c742400 	.word	0x4c742400
90009480:	4a742400 	.word	0x4a742400
90009484:	4bbebc20 	.word	0x4bbebc20

90009488 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90009488:	b580      	push	{r7, lr}
9000948a:	b084      	sub	sp, #16
9000948c:	af00      	add	r7, sp, #0
9000948e:	6078      	str	r0, [r7, #4]
90009490:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009492:	2300      	movs	r3, #0
90009494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90009496:	4b53      	ldr	r3, [pc, #332]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000949a:	f003 0303 	and.w	r3, r3, #3
9000949e:	2b03      	cmp	r3, #3
900094a0:	d101      	bne.n	900094a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
900094a2:	2301      	movs	r3, #1
900094a4:	e099      	b.n	900095da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
900094a6:	4b4f      	ldr	r3, [pc, #316]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900094a8:	681b      	ldr	r3, [r3, #0]
900094aa:	4a4e      	ldr	r2, [pc, #312]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900094ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
900094b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900094b2:	f7f9 fe93 	bl	900031dc <HAL_GetTick>
900094b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
900094b8:	e008      	b.n	900094cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
900094ba:	f7f9 fe8f 	bl	900031dc <HAL_GetTick>
900094be:	4602      	mov	r2, r0
900094c0:	68bb      	ldr	r3, [r7, #8]
900094c2:	1ad3      	subs	r3, r2, r3
900094c4:	2b02      	cmp	r3, #2
900094c6:	d901      	bls.n	900094cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
900094c8:	2303      	movs	r3, #3
900094ca:	e086      	b.n	900095da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
900094cc:	4b45      	ldr	r3, [pc, #276]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900094ce:	681b      	ldr	r3, [r3, #0]
900094d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900094d4:	2b00      	cmp	r3, #0
900094d6:	d1f0      	bne.n	900094ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
900094d8:	4b42      	ldr	r3, [pc, #264]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900094da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900094dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
900094e0:	687b      	ldr	r3, [r7, #4]
900094e2:	681b      	ldr	r3, [r3, #0]
900094e4:	031b      	lsls	r3, r3, #12
900094e6:	493f      	ldr	r1, [pc, #252]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900094e8:	4313      	orrs	r3, r2
900094ea:	628b      	str	r3, [r1, #40]	@ 0x28
900094ec:	687b      	ldr	r3, [r7, #4]
900094ee:	685b      	ldr	r3, [r3, #4]
900094f0:	3b01      	subs	r3, #1
900094f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
900094f6:	687b      	ldr	r3, [r7, #4]
900094f8:	689b      	ldr	r3, [r3, #8]
900094fa:	3b01      	subs	r3, #1
900094fc:	025b      	lsls	r3, r3, #9
900094fe:	b29b      	uxth	r3, r3
90009500:	431a      	orrs	r2, r3
90009502:	687b      	ldr	r3, [r7, #4]
90009504:	68db      	ldr	r3, [r3, #12]
90009506:	3b01      	subs	r3, #1
90009508:	041b      	lsls	r3, r3, #16
9000950a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
9000950e:	431a      	orrs	r2, r3
90009510:	687b      	ldr	r3, [r7, #4]
90009512:	691b      	ldr	r3, [r3, #16]
90009514:	3b01      	subs	r3, #1
90009516:	061b      	lsls	r3, r3, #24
90009518:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
9000951c:	4931      	ldr	r1, [pc, #196]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
9000951e:	4313      	orrs	r3, r2
90009520:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009522:	4b30      	ldr	r3, [pc, #192]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009526:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
9000952a:	687b      	ldr	r3, [r7, #4]
9000952c:	695b      	ldr	r3, [r3, #20]
9000952e:	492d      	ldr	r1, [pc, #180]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009530:	4313      	orrs	r3, r2
90009532:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009534:	4b2b      	ldr	r3, [pc, #172]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009538:	f023 0220 	bic.w	r2, r3, #32
9000953c:	687b      	ldr	r3, [r7, #4]
9000953e:	699b      	ldr	r3, [r3, #24]
90009540:	4928      	ldr	r1, [pc, #160]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009542:	4313      	orrs	r3, r2
90009544:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90009546:	4b27      	ldr	r3, [pc, #156]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000954a:	4a26      	ldr	r2, [pc, #152]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
9000954c:	f023 0310 	bic.w	r3, r3, #16
90009550:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90009552:	4b24      	ldr	r3, [pc, #144]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
90009556:	4b24      	ldr	r3, [pc, #144]	@ (900095e8 <RCCEx_PLL2_Config+0x160>)
90009558:	4013      	ands	r3, r2
9000955a:	687a      	ldr	r2, [r7, #4]
9000955c:	69d2      	ldr	r2, [r2, #28]
9000955e:	00d2      	lsls	r2, r2, #3
90009560:	4920      	ldr	r1, [pc, #128]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009562:	4313      	orrs	r3, r2
90009564:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90009566:	4b1f      	ldr	r3, [pc, #124]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000956a:	4a1e      	ldr	r2, [pc, #120]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
9000956c:	f043 0310 	orr.w	r3, r3, #16
90009570:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90009572:	683b      	ldr	r3, [r7, #0]
90009574:	2b00      	cmp	r3, #0
90009576:	d106      	bne.n	90009586 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90009578:	4b1a      	ldr	r3, [pc, #104]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
9000957a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000957c:	4a19      	ldr	r2, [pc, #100]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
9000957e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
90009582:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009584:	e00f      	b.n	900095a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90009586:	683b      	ldr	r3, [r7, #0]
90009588:	2b01      	cmp	r3, #1
9000958a:	d106      	bne.n	9000959a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000958c:	4b15      	ldr	r3, [pc, #84]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
9000958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009590:	4a14      	ldr	r2, [pc, #80]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
90009592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
90009596:	62d3      	str	r3, [r2, #44]	@ 0x2c
90009598:	e005      	b.n	900095a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000959a:	4b12      	ldr	r3, [pc, #72]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
9000959c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000959e:	4a11      	ldr	r2, [pc, #68]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900095a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
900095a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
900095a6:	4b0f      	ldr	r3, [pc, #60]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900095a8:	681b      	ldr	r3, [r3, #0]
900095aa:	4a0e      	ldr	r2, [pc, #56]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900095ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
900095b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900095b2:	f7f9 fe13 	bl	900031dc <HAL_GetTick>
900095b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900095b8:	e008      	b.n	900095cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
900095ba:	f7f9 fe0f 	bl	900031dc <HAL_GetTick>
900095be:	4602      	mov	r2, r0
900095c0:	68bb      	ldr	r3, [r7, #8]
900095c2:	1ad3      	subs	r3, r2, r3
900095c4:	2b02      	cmp	r3, #2
900095c6:	d901      	bls.n	900095cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
900095c8:	2303      	movs	r3, #3
900095ca:	e006      	b.n	900095da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900095cc:	4b05      	ldr	r3, [pc, #20]	@ (900095e4 <RCCEx_PLL2_Config+0x15c>)
900095ce:	681b      	ldr	r3, [r3, #0]
900095d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
900095d4:	2b00      	cmp	r3, #0
900095d6:	d0f0      	beq.n	900095ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
900095d8:	7bfb      	ldrb	r3, [r7, #15]
}
900095da:	4618      	mov	r0, r3
900095dc:	3710      	adds	r7, #16
900095de:	46bd      	mov	sp, r7
900095e0:	bd80      	pop	{r7, pc}
900095e2:	bf00      	nop
900095e4:	58024400 	.word	0x58024400
900095e8:	ffff0007 	.word	0xffff0007

900095ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
900095ec:	b580      	push	{r7, lr}
900095ee:	b084      	sub	sp, #16
900095f0:	af00      	add	r7, sp, #0
900095f2:	6078      	str	r0, [r7, #4]
900095f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
900095f6:	2300      	movs	r3, #0
900095f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
900095fa:	4b53      	ldr	r3, [pc, #332]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900095fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
900095fe:	f003 0303 	and.w	r3, r3, #3
90009602:	2b03      	cmp	r3, #3
90009604:	d101      	bne.n	9000960a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90009606:	2301      	movs	r3, #1
90009608:	e099      	b.n	9000973e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000960a:	4b4f      	ldr	r3, [pc, #316]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
9000960c:	681b      	ldr	r3, [r3, #0]
9000960e:	4a4e      	ldr	r2, [pc, #312]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
90009614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009616:	f7f9 fde1 	bl	900031dc <HAL_GetTick>
9000961a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000961c:	e008      	b.n	90009630 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000961e:	f7f9 fddd 	bl	900031dc <HAL_GetTick>
90009622:	4602      	mov	r2, r0
90009624:	68bb      	ldr	r3, [r7, #8]
90009626:	1ad3      	subs	r3, r2, r3
90009628:	2b02      	cmp	r3, #2
9000962a:	d901      	bls.n	90009630 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000962c:	2303      	movs	r3, #3
9000962e:	e086      	b.n	9000973e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009630:	4b45      	ldr	r3, [pc, #276]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009632:	681b      	ldr	r3, [r3, #0]
90009634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009638:	2b00      	cmp	r3, #0
9000963a:	d1f0      	bne.n	9000961e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000963c:	4b42      	ldr	r3, [pc, #264]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
9000963e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009640:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
90009644:	687b      	ldr	r3, [r7, #4]
90009646:	681b      	ldr	r3, [r3, #0]
90009648:	051b      	lsls	r3, r3, #20
9000964a:	493f      	ldr	r1, [pc, #252]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
9000964c:	4313      	orrs	r3, r2
9000964e:	628b      	str	r3, [r1, #40]	@ 0x28
90009650:	687b      	ldr	r3, [r7, #4]
90009652:	685b      	ldr	r3, [r3, #4]
90009654:	3b01      	subs	r3, #1
90009656:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000965a:	687b      	ldr	r3, [r7, #4]
9000965c:	689b      	ldr	r3, [r3, #8]
9000965e:	3b01      	subs	r3, #1
90009660:	025b      	lsls	r3, r3, #9
90009662:	b29b      	uxth	r3, r3
90009664:	431a      	orrs	r2, r3
90009666:	687b      	ldr	r3, [r7, #4]
90009668:	68db      	ldr	r3, [r3, #12]
9000966a:	3b01      	subs	r3, #1
9000966c:	041b      	lsls	r3, r3, #16
9000966e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
90009672:	431a      	orrs	r2, r3
90009674:	687b      	ldr	r3, [r7, #4]
90009676:	691b      	ldr	r3, [r3, #16]
90009678:	3b01      	subs	r3, #1
9000967a:	061b      	lsls	r3, r3, #24
9000967c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
90009680:	4931      	ldr	r1, [pc, #196]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009682:	4313      	orrs	r3, r2
90009684:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
90009686:	4b30      	ldr	r3, [pc, #192]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000968a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
9000968e:	687b      	ldr	r3, [r7, #4]
90009690:	695b      	ldr	r3, [r3, #20]
90009692:	492d      	ldr	r1, [pc, #180]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009694:	4313      	orrs	r3, r2
90009696:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90009698:	4b2b      	ldr	r3, [pc, #172]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
9000969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000969c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
900096a0:	687b      	ldr	r3, [r7, #4]
900096a2:	699b      	ldr	r3, [r3, #24]
900096a4:	4928      	ldr	r1, [pc, #160]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096a6:	4313      	orrs	r3, r2
900096a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
900096aa:	4b27      	ldr	r3, [pc, #156]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096ae:	4a26      	ldr	r2, [pc, #152]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
900096b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
900096b6:	4b24      	ldr	r3, [pc, #144]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
900096ba:	4b24      	ldr	r3, [pc, #144]	@ (9000974c <RCCEx_PLL3_Config+0x160>)
900096bc:	4013      	ands	r3, r2
900096be:	687a      	ldr	r2, [r7, #4]
900096c0:	69d2      	ldr	r2, [r2, #28]
900096c2:	00d2      	lsls	r2, r2, #3
900096c4:	4920      	ldr	r1, [pc, #128]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096c6:	4313      	orrs	r3, r2
900096c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
900096ca:	4b1f      	ldr	r3, [pc, #124]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096ce:	4a1e      	ldr	r2, [pc, #120]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
900096d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900096d6:	683b      	ldr	r3, [r7, #0]
900096d8:	2b00      	cmp	r3, #0
900096da:	d106      	bne.n	900096ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
900096dc:	4b1a      	ldr	r3, [pc, #104]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096e0:	4a19      	ldr	r2, [pc, #100]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
900096e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
900096e8:	e00f      	b.n	9000970a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900096ea:	683b      	ldr	r3, [r7, #0]
900096ec:	2b01      	cmp	r3, #1
900096ee:	d106      	bne.n	900096fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
900096f0:	4b15      	ldr	r3, [pc, #84]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
900096f4:	4a14      	ldr	r2, [pc, #80]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
900096f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
900096fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
900096fc:	e005      	b.n	9000970a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
900096fe:	4b12      	ldr	r3, [pc, #72]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009702:	4a11      	ldr	r2, [pc, #68]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009704:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
90009708:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000970a:	4b0f      	ldr	r3, [pc, #60]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
9000970c:	681b      	ldr	r3, [r3, #0]
9000970e:	4a0e      	ldr	r2, [pc, #56]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
90009714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009716:	f7f9 fd61 	bl	900031dc <HAL_GetTick>
9000971a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000971c:	e008      	b.n	90009730 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000971e:	f7f9 fd5d 	bl	900031dc <HAL_GetTick>
90009722:	4602      	mov	r2, r0
90009724:	68bb      	ldr	r3, [r7, #8]
90009726:	1ad3      	subs	r3, r2, r3
90009728:	2b02      	cmp	r3, #2
9000972a:	d901      	bls.n	90009730 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
9000972c:	2303      	movs	r3, #3
9000972e:	e006      	b.n	9000973e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009730:	4b05      	ldr	r3, [pc, #20]	@ (90009748 <RCCEx_PLL3_Config+0x15c>)
90009732:	681b      	ldr	r3, [r3, #0]
90009734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
90009738:	2b00      	cmp	r3, #0
9000973a:	d0f0      	beq.n	9000971e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
9000973c:	7bfb      	ldrb	r3, [r7, #15]
}
9000973e:	4618      	mov	r0, r3
90009740:	3710      	adds	r7, #16
90009742:	46bd      	mov	sp, r7
90009744:	bd80      	pop	{r7, pc}
90009746:	bf00      	nop
90009748:	58024400 	.word	0x58024400
9000974c:	ffff0007 	.word	0xffff0007

90009750 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90009750:	b580      	push	{r7, lr}
90009752:	b082      	sub	sp, #8
90009754:	af00      	add	r7, sp, #0
90009756:	6078      	str	r0, [r7, #4]
90009758:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000975a:	687b      	ldr	r3, [r7, #4]
9000975c:	2b00      	cmp	r3, #0
9000975e:	d101      	bne.n	90009764 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90009760:	2301      	movs	r3, #1
90009762:	e02b      	b.n	900097bc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
90009764:	687b      	ldr	r3, [r7, #4]
90009766:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
9000976a:	b2db      	uxtb	r3, r3
9000976c:	2b00      	cmp	r3, #0
9000976e:	d106      	bne.n	9000977e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90009770:	687b      	ldr	r3, [r7, #4]
90009772:	2200      	movs	r2, #0
90009774:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90009778:	6878      	ldr	r0, [r7, #4]
9000977a:	f000 f825 	bl	900097c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000977e:	687b      	ldr	r3, [r7, #4]
90009780:	2202      	movs	r2, #2
90009782:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90009786:	687b      	ldr	r3, [r7, #4]
90009788:	681a      	ldr	r2, [r3, #0]
9000978a:	687b      	ldr	r3, [r7, #4]
9000978c:	3304      	adds	r3, #4
9000978e:	4619      	mov	r1, r3
90009790:	4610      	mov	r0, r2
90009792:	f001 fb51 	bl	9000ae38 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
90009796:	687b      	ldr	r3, [r7, #4]
90009798:	6818      	ldr	r0, [r3, #0]
9000979a:	687b      	ldr	r3, [r7, #4]
9000979c:	685b      	ldr	r3, [r3, #4]
9000979e:	461a      	mov	r2, r3
900097a0:	6839      	ldr	r1, [r7, #0]
900097a2:	f001 fba5 	bl	9000aef0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
900097a6:	4b07      	ldr	r3, [pc, #28]	@ (900097c4 <HAL_SDRAM_Init+0x74>)
900097a8:	681b      	ldr	r3, [r3, #0]
900097aa:	4a06      	ldr	r2, [pc, #24]	@ (900097c4 <HAL_SDRAM_Init+0x74>)
900097ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
900097b0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900097b2:	687b      	ldr	r3, [r7, #4]
900097b4:	2201      	movs	r2, #1
900097b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
900097ba:	2300      	movs	r3, #0
}
900097bc:	4618      	mov	r0, r3
900097be:	3708      	adds	r7, #8
900097c0:	46bd      	mov	sp, r7
900097c2:	bd80      	pop	{r7, pc}
900097c4:	52004000 	.word	0x52004000

900097c8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
900097c8:	b480      	push	{r7}
900097ca:	b083      	sub	sp, #12
900097cc:	af00      	add	r7, sp, #0
900097ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
900097d0:	bf00      	nop
900097d2:	370c      	adds	r7, #12
900097d4:	46bd      	mov	sp, r7
900097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
900097da:	4770      	bx	lr

900097dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
900097dc:	b580      	push	{r7, lr}
900097de:	b086      	sub	sp, #24
900097e0:	af00      	add	r7, sp, #0
900097e2:	60f8      	str	r0, [r7, #12]
900097e4:	60b9      	str	r1, [r7, #8]
900097e6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
900097e8:	68fb      	ldr	r3, [r7, #12]
900097ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
900097ee:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
900097f0:	7dfb      	ldrb	r3, [r7, #23]
900097f2:	2b02      	cmp	r3, #2
900097f4:	d101      	bne.n	900097fa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
900097f6:	2302      	movs	r3, #2
900097f8:	e021      	b.n	9000983e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
900097fa:	7dfb      	ldrb	r3, [r7, #23]
900097fc:	2b01      	cmp	r3, #1
900097fe:	d002      	beq.n	90009806 <HAL_SDRAM_SendCommand+0x2a>
90009800:	7dfb      	ldrb	r3, [r7, #23]
90009802:	2b05      	cmp	r3, #5
90009804:	d118      	bne.n	90009838 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009806:	68fb      	ldr	r3, [r7, #12]
90009808:	2202      	movs	r2, #2
9000980a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000980e:	68fb      	ldr	r3, [r7, #12]
90009810:	681b      	ldr	r3, [r3, #0]
90009812:	687a      	ldr	r2, [r7, #4]
90009814:	68b9      	ldr	r1, [r7, #8]
90009816:	4618      	mov	r0, r3
90009818:	f001 fbd4 	bl	9000afc4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000981c:	68bb      	ldr	r3, [r7, #8]
9000981e:	681b      	ldr	r3, [r3, #0]
90009820:	2b02      	cmp	r3, #2
90009822:	d104      	bne.n	9000982e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009824:	68fb      	ldr	r3, [r7, #12]
90009826:	2205      	movs	r2, #5
90009828:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000982c:	e006      	b.n	9000983c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
9000982e:	68fb      	ldr	r3, [r7, #12]
90009830:	2201      	movs	r2, #1
90009832:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009836:	e001      	b.n	9000983c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
90009838:	2301      	movs	r3, #1
9000983a:	e000      	b.n	9000983e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
9000983c:	2300      	movs	r3, #0
}
9000983e:	4618      	mov	r0, r3
90009840:	3718      	adds	r7, #24
90009842:	46bd      	mov	sp, r7
90009844:	bd80      	pop	{r7, pc}

90009846 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90009846:	b580      	push	{r7, lr}
90009848:	b082      	sub	sp, #8
9000984a:	af00      	add	r7, sp, #0
9000984c:	6078      	str	r0, [r7, #4]
9000984e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90009850:	687b      	ldr	r3, [r7, #4]
90009852:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009856:	b2db      	uxtb	r3, r3
90009858:	2b02      	cmp	r3, #2
9000985a:	d101      	bne.n	90009860 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
9000985c:	2302      	movs	r3, #2
9000985e:	e016      	b.n	9000988e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
90009860:	687b      	ldr	r3, [r7, #4]
90009862:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
90009866:	b2db      	uxtb	r3, r3
90009868:	2b01      	cmp	r3, #1
9000986a:	d10f      	bne.n	9000988c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000986c:	687b      	ldr	r3, [r7, #4]
9000986e:	2202      	movs	r2, #2
90009870:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
90009874:	687b      	ldr	r3, [r7, #4]
90009876:	681b      	ldr	r3, [r3, #0]
90009878:	6839      	ldr	r1, [r7, #0]
9000987a:	4618      	mov	r0, r3
9000987c:	f001 fbc6 	bl	9000b00c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
90009880:	687b      	ldr	r3, [r7, #4]
90009882:	2201      	movs	r2, #1
90009884:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
90009888:	2300      	movs	r3, #0
9000988a:	e000      	b.n	9000988e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
9000988c:	2301      	movs	r3, #1
}
9000988e:	4618      	mov	r0, r3
90009890:	3708      	adds	r7, #8
90009892:	46bd      	mov	sp, r7
90009894:	bd80      	pop	{r7, pc}

90009896 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
90009896:	b580      	push	{r7, lr}
90009898:	b082      	sub	sp, #8
9000989a:	af00      	add	r7, sp, #0
9000989c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
9000989e:	687b      	ldr	r3, [r7, #4]
900098a0:	2b00      	cmp	r3, #0
900098a2:	d101      	bne.n	900098a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
900098a4:	2301      	movs	r3, #1
900098a6:	e049      	b.n	9000993c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900098a8:	687b      	ldr	r3, [r7, #4]
900098aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
900098ae:	b2db      	uxtb	r3, r3
900098b0:	2b00      	cmp	r3, #0
900098b2:	d106      	bne.n	900098c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
900098b4:	687b      	ldr	r3, [r7, #4]
900098b6:	2200      	movs	r2, #0
900098b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
900098bc:	6878      	ldr	r0, [r7, #4]
900098be:	f000 f89d 	bl	900099fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
900098c2:	687b      	ldr	r3, [r7, #4]
900098c4:	2202      	movs	r2, #2
900098c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
900098ca:	687b      	ldr	r3, [r7, #4]
900098cc:	681a      	ldr	r2, [r3, #0]
900098ce:	687b      	ldr	r3, [r7, #4]
900098d0:	3304      	adds	r3, #4
900098d2:	4619      	mov	r1, r3
900098d4:	4610      	mov	r0, r2
900098d6:	f000 f8a5 	bl	90009a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
900098da:	687b      	ldr	r3, [r7, #4]
900098dc:	2201      	movs	r2, #1
900098de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900098e2:	687b      	ldr	r3, [r7, #4]
900098e4:	2201      	movs	r2, #1
900098e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
900098ea:	687b      	ldr	r3, [r7, #4]
900098ec:	2201      	movs	r2, #1
900098ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900098f2:	687b      	ldr	r3, [r7, #4]
900098f4:	2201      	movs	r2, #1
900098f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900098fa:	687b      	ldr	r3, [r7, #4]
900098fc:	2201      	movs	r2, #1
900098fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
90009902:	687b      	ldr	r3, [r7, #4]
90009904:	2201      	movs	r2, #1
90009906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
9000990a:	687b      	ldr	r3, [r7, #4]
9000990c:	2201      	movs	r2, #1
9000990e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009912:	687b      	ldr	r3, [r7, #4]
90009914:	2201      	movs	r2, #1
90009916:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
9000991a:	687b      	ldr	r3, [r7, #4]
9000991c:	2201      	movs	r2, #1
9000991e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
90009922:	687b      	ldr	r3, [r7, #4]
90009924:	2201      	movs	r2, #1
90009926:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
9000992a:	687b      	ldr	r3, [r7, #4]
9000992c:	2201      	movs	r2, #1
9000992e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009932:	687b      	ldr	r3, [r7, #4]
90009934:	2201      	movs	r2, #1
90009936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
9000993a:	2300      	movs	r3, #0
}
9000993c:	4618      	mov	r0, r3
9000993e:	3708      	adds	r7, #8
90009940:	46bd      	mov	sp, r7
90009942:	bd80      	pop	{r7, pc}

90009944 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009944:	b580      	push	{r7, lr}
90009946:	b082      	sub	sp, #8
90009948:	af00      	add	r7, sp, #0
9000994a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
9000994c:	687b      	ldr	r3, [r7, #4]
9000994e:	2202      	movs	r2, #2
90009950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90009954:	687b      	ldr	r3, [r7, #4]
90009956:	681b      	ldr	r3, [r3, #0]
90009958:	6a1a      	ldr	r2, [r3, #32]
9000995a:	f241 1311 	movw	r3, #4369	@ 0x1111
9000995e:	4013      	ands	r3, r2
90009960:	2b00      	cmp	r3, #0
90009962:	d10f      	bne.n	90009984 <HAL_TIM_PWM_DeInit+0x40>
90009964:	687b      	ldr	r3, [r7, #4]
90009966:	681b      	ldr	r3, [r3, #0]
90009968:	6a1a      	ldr	r2, [r3, #32]
9000996a:	f240 4344 	movw	r3, #1092	@ 0x444
9000996e:	4013      	ands	r3, r2
90009970:	2b00      	cmp	r3, #0
90009972:	d107      	bne.n	90009984 <HAL_TIM_PWM_DeInit+0x40>
90009974:	687b      	ldr	r3, [r7, #4]
90009976:	681b      	ldr	r3, [r3, #0]
90009978:	681a      	ldr	r2, [r3, #0]
9000997a:	687b      	ldr	r3, [r7, #4]
9000997c:	681b      	ldr	r3, [r3, #0]
9000997e:	f022 0201 	bic.w	r2, r2, #1
90009982:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
90009984:	6878      	ldr	r0, [r7, #4]
90009986:	f000 f843 	bl	90009a10 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
9000998a:	687b      	ldr	r3, [r7, #4]
9000998c:	2200      	movs	r2, #0
9000998e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009992:	687b      	ldr	r3, [r7, #4]
90009994:	2200      	movs	r2, #0
90009996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
9000999a:	687b      	ldr	r3, [r7, #4]
9000999c:	2200      	movs	r2, #0
9000999e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
900099a2:	687b      	ldr	r3, [r7, #4]
900099a4:	2200      	movs	r2, #0
900099a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
900099aa:	687b      	ldr	r3, [r7, #4]
900099ac:	2200      	movs	r2, #0
900099ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
900099b2:	687b      	ldr	r3, [r7, #4]
900099b4:	2200      	movs	r2, #0
900099b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
900099ba:	687b      	ldr	r3, [r7, #4]
900099bc:	2200      	movs	r2, #0
900099be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900099c2:	687b      	ldr	r3, [r7, #4]
900099c4:	2200      	movs	r2, #0
900099c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
900099ca:	687b      	ldr	r3, [r7, #4]
900099cc:	2200      	movs	r2, #0
900099ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
900099d2:	687b      	ldr	r3, [r7, #4]
900099d4:	2200      	movs	r2, #0
900099d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
900099da:	687b      	ldr	r3, [r7, #4]
900099dc:	2200      	movs	r2, #0
900099de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
900099e2:	687b      	ldr	r3, [r7, #4]
900099e4:	2200      	movs	r2, #0
900099e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
900099ea:	687b      	ldr	r3, [r7, #4]
900099ec:	2200      	movs	r2, #0
900099ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
900099f2:	2300      	movs	r3, #0
}
900099f4:	4618      	mov	r0, r3
900099f6:	3708      	adds	r7, #8
900099f8:	46bd      	mov	sp, r7
900099fa:	bd80      	pop	{r7, pc}

900099fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
900099fc:	b480      	push	{r7}
900099fe:	b083      	sub	sp, #12
90009a00:	af00      	add	r7, sp, #0
90009a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009a04:	bf00      	nop
90009a06:	370c      	adds	r7, #12
90009a08:	46bd      	mov	sp, r7
90009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a0e:	4770      	bx	lr

90009a10 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009a10:	b480      	push	{r7}
90009a12:	b083      	sub	sp, #12
90009a14:	af00      	add	r7, sp, #0
90009a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009a18:	bf00      	nop
90009a1a:	370c      	adds	r7, #12
90009a1c:	46bd      	mov	sp, r7
90009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a22:	4770      	bx	lr

90009a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009a24:	b480      	push	{r7}
90009a26:	b085      	sub	sp, #20
90009a28:	af00      	add	r7, sp, #0
90009a2a:	6078      	str	r0, [r7, #4]
90009a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90009a2e:	687b      	ldr	r3, [r7, #4]
90009a30:	681b      	ldr	r3, [r3, #0]
90009a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009a34:	687b      	ldr	r3, [r7, #4]
90009a36:	4a43      	ldr	r2, [pc, #268]	@ (90009b44 <TIM_Base_SetConfig+0x120>)
90009a38:	4293      	cmp	r3, r2
90009a3a:	d013      	beq.n	90009a64 <TIM_Base_SetConfig+0x40>
90009a3c:	687b      	ldr	r3, [r7, #4]
90009a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009a42:	d00f      	beq.n	90009a64 <TIM_Base_SetConfig+0x40>
90009a44:	687b      	ldr	r3, [r7, #4]
90009a46:	4a40      	ldr	r2, [pc, #256]	@ (90009b48 <TIM_Base_SetConfig+0x124>)
90009a48:	4293      	cmp	r3, r2
90009a4a:	d00b      	beq.n	90009a64 <TIM_Base_SetConfig+0x40>
90009a4c:	687b      	ldr	r3, [r7, #4]
90009a4e:	4a3f      	ldr	r2, [pc, #252]	@ (90009b4c <TIM_Base_SetConfig+0x128>)
90009a50:	4293      	cmp	r3, r2
90009a52:	d007      	beq.n	90009a64 <TIM_Base_SetConfig+0x40>
90009a54:	687b      	ldr	r3, [r7, #4]
90009a56:	4a3e      	ldr	r2, [pc, #248]	@ (90009b50 <TIM_Base_SetConfig+0x12c>)
90009a58:	4293      	cmp	r3, r2
90009a5a:	d003      	beq.n	90009a64 <TIM_Base_SetConfig+0x40>
90009a5c:	687b      	ldr	r3, [r7, #4]
90009a5e:	4a3d      	ldr	r2, [pc, #244]	@ (90009b54 <TIM_Base_SetConfig+0x130>)
90009a60:	4293      	cmp	r3, r2
90009a62:	d108      	bne.n	90009a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90009a64:	68fb      	ldr	r3, [r7, #12]
90009a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
90009a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90009a6c:	683b      	ldr	r3, [r7, #0]
90009a6e:	685b      	ldr	r3, [r3, #4]
90009a70:	68fa      	ldr	r2, [r7, #12]
90009a72:	4313      	orrs	r3, r2
90009a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90009a76:	687b      	ldr	r3, [r7, #4]
90009a78:	4a32      	ldr	r2, [pc, #200]	@ (90009b44 <TIM_Base_SetConfig+0x120>)
90009a7a:	4293      	cmp	r3, r2
90009a7c:	d01f      	beq.n	90009abe <TIM_Base_SetConfig+0x9a>
90009a7e:	687b      	ldr	r3, [r7, #4]
90009a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
90009a84:	d01b      	beq.n	90009abe <TIM_Base_SetConfig+0x9a>
90009a86:	687b      	ldr	r3, [r7, #4]
90009a88:	4a2f      	ldr	r2, [pc, #188]	@ (90009b48 <TIM_Base_SetConfig+0x124>)
90009a8a:	4293      	cmp	r3, r2
90009a8c:	d017      	beq.n	90009abe <TIM_Base_SetConfig+0x9a>
90009a8e:	687b      	ldr	r3, [r7, #4]
90009a90:	4a2e      	ldr	r2, [pc, #184]	@ (90009b4c <TIM_Base_SetConfig+0x128>)
90009a92:	4293      	cmp	r3, r2
90009a94:	d013      	beq.n	90009abe <TIM_Base_SetConfig+0x9a>
90009a96:	687b      	ldr	r3, [r7, #4]
90009a98:	4a2d      	ldr	r2, [pc, #180]	@ (90009b50 <TIM_Base_SetConfig+0x12c>)
90009a9a:	4293      	cmp	r3, r2
90009a9c:	d00f      	beq.n	90009abe <TIM_Base_SetConfig+0x9a>
90009a9e:	687b      	ldr	r3, [r7, #4]
90009aa0:	4a2c      	ldr	r2, [pc, #176]	@ (90009b54 <TIM_Base_SetConfig+0x130>)
90009aa2:	4293      	cmp	r3, r2
90009aa4:	d00b      	beq.n	90009abe <TIM_Base_SetConfig+0x9a>
90009aa6:	687b      	ldr	r3, [r7, #4]
90009aa8:	4a2b      	ldr	r2, [pc, #172]	@ (90009b58 <TIM_Base_SetConfig+0x134>)
90009aaa:	4293      	cmp	r3, r2
90009aac:	d007      	beq.n	90009abe <TIM_Base_SetConfig+0x9a>
90009aae:	687b      	ldr	r3, [r7, #4]
90009ab0:	4a2a      	ldr	r2, [pc, #168]	@ (90009b5c <TIM_Base_SetConfig+0x138>)
90009ab2:	4293      	cmp	r3, r2
90009ab4:	d003      	beq.n	90009abe <TIM_Base_SetConfig+0x9a>
90009ab6:	687b      	ldr	r3, [r7, #4]
90009ab8:	4a29      	ldr	r2, [pc, #164]	@ (90009b60 <TIM_Base_SetConfig+0x13c>)
90009aba:	4293      	cmp	r3, r2
90009abc:	d108      	bne.n	90009ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90009abe:	68fb      	ldr	r3, [r7, #12]
90009ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
90009ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90009ac6:	683b      	ldr	r3, [r7, #0]
90009ac8:	68db      	ldr	r3, [r3, #12]
90009aca:	68fa      	ldr	r2, [r7, #12]
90009acc:	4313      	orrs	r3, r2
90009ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009ad0:	68fb      	ldr	r3, [r7, #12]
90009ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
90009ad6:	683b      	ldr	r3, [r7, #0]
90009ad8:	695b      	ldr	r3, [r3, #20]
90009ada:	4313      	orrs	r3, r2
90009adc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009ade:	683b      	ldr	r3, [r7, #0]
90009ae0:	689a      	ldr	r2, [r3, #8]
90009ae2:	687b      	ldr	r3, [r7, #4]
90009ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90009ae6:	683b      	ldr	r3, [r7, #0]
90009ae8:	681a      	ldr	r2, [r3, #0]
90009aea:	687b      	ldr	r3, [r7, #4]
90009aec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009aee:	687b      	ldr	r3, [r7, #4]
90009af0:	4a14      	ldr	r2, [pc, #80]	@ (90009b44 <TIM_Base_SetConfig+0x120>)
90009af2:	4293      	cmp	r3, r2
90009af4:	d00f      	beq.n	90009b16 <TIM_Base_SetConfig+0xf2>
90009af6:	687b      	ldr	r3, [r7, #4]
90009af8:	4a16      	ldr	r2, [pc, #88]	@ (90009b54 <TIM_Base_SetConfig+0x130>)
90009afa:	4293      	cmp	r3, r2
90009afc:	d00b      	beq.n	90009b16 <TIM_Base_SetConfig+0xf2>
90009afe:	687b      	ldr	r3, [r7, #4]
90009b00:	4a15      	ldr	r2, [pc, #84]	@ (90009b58 <TIM_Base_SetConfig+0x134>)
90009b02:	4293      	cmp	r3, r2
90009b04:	d007      	beq.n	90009b16 <TIM_Base_SetConfig+0xf2>
90009b06:	687b      	ldr	r3, [r7, #4]
90009b08:	4a14      	ldr	r2, [pc, #80]	@ (90009b5c <TIM_Base_SetConfig+0x138>)
90009b0a:	4293      	cmp	r3, r2
90009b0c:	d003      	beq.n	90009b16 <TIM_Base_SetConfig+0xf2>
90009b0e:	687b      	ldr	r3, [r7, #4]
90009b10:	4a13      	ldr	r2, [pc, #76]	@ (90009b60 <TIM_Base_SetConfig+0x13c>)
90009b12:	4293      	cmp	r3, r2
90009b14:	d103      	bne.n	90009b1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90009b16:	683b      	ldr	r3, [r7, #0]
90009b18:	691a      	ldr	r2, [r3, #16]
90009b1a:	687b      	ldr	r3, [r7, #4]
90009b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
90009b1e:	687b      	ldr	r3, [r7, #4]
90009b20:	681b      	ldr	r3, [r3, #0]
90009b22:	f043 0204 	orr.w	r2, r3, #4
90009b26:	687b      	ldr	r3, [r7, #4]
90009b28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009b2a:	687b      	ldr	r3, [r7, #4]
90009b2c:	2201      	movs	r2, #1
90009b2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
90009b30:	687b      	ldr	r3, [r7, #4]
90009b32:	68fa      	ldr	r2, [r7, #12]
90009b34:	601a      	str	r2, [r3, #0]
}
90009b36:	bf00      	nop
90009b38:	3714      	adds	r7, #20
90009b3a:	46bd      	mov	sp, r7
90009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b40:	4770      	bx	lr
90009b42:	bf00      	nop
90009b44:	40010000 	.word	0x40010000
90009b48:	40000400 	.word	0x40000400
90009b4c:	40000800 	.word	0x40000800
90009b50:	40000c00 	.word	0x40000c00
90009b54:	40010400 	.word	0x40010400
90009b58:	40014000 	.word	0x40014000
90009b5c:	40014400 	.word	0x40014400
90009b60:	40014800 	.word	0x40014800

90009b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90009b64:	b580      	push	{r7, lr}
90009b66:	b082      	sub	sp, #8
90009b68:	af00      	add	r7, sp, #0
90009b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90009b6c:	687b      	ldr	r3, [r7, #4]
90009b6e:	2b00      	cmp	r3, #0
90009b70:	d101      	bne.n	90009b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90009b72:	2301      	movs	r3, #1
90009b74:	e042      	b.n	90009bfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90009b76:	687b      	ldr	r3, [r7, #4]
90009b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009b7c:	2b00      	cmp	r3, #0
90009b7e:	d106      	bne.n	90009b8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90009b80:	687b      	ldr	r3, [r7, #4]
90009b82:	2200      	movs	r2, #0
90009b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90009b88:	6878      	ldr	r0, [r7, #4]
90009b8a:	f7f6 ffb1 	bl	90000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90009b8e:	687b      	ldr	r3, [r7, #4]
90009b90:	2224      	movs	r2, #36	@ 0x24
90009b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
90009b96:	687b      	ldr	r3, [r7, #4]
90009b98:	681b      	ldr	r3, [r3, #0]
90009b9a:	681a      	ldr	r2, [r3, #0]
90009b9c:	687b      	ldr	r3, [r7, #4]
90009b9e:	681b      	ldr	r3, [r3, #0]
90009ba0:	f022 0201 	bic.w	r2, r2, #1
90009ba4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90009ba6:	687b      	ldr	r3, [r7, #4]
90009ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
90009baa:	2b00      	cmp	r3, #0
90009bac:	d002      	beq.n	90009bb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
90009bae:	6878      	ldr	r0, [r7, #4]
90009bb0:	f000 fe1e 	bl	9000a7f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90009bb4:	6878      	ldr	r0, [r7, #4]
90009bb6:	f000 f8b3 	bl	90009d20 <UART_SetConfig>
90009bba:	4603      	mov	r3, r0
90009bbc:	2b01      	cmp	r3, #1
90009bbe:	d101      	bne.n	90009bc4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
90009bc0:	2301      	movs	r3, #1
90009bc2:	e01b      	b.n	90009bfc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90009bc4:	687b      	ldr	r3, [r7, #4]
90009bc6:	681b      	ldr	r3, [r3, #0]
90009bc8:	685a      	ldr	r2, [r3, #4]
90009bca:	687b      	ldr	r3, [r7, #4]
90009bcc:	681b      	ldr	r3, [r3, #0]
90009bce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
90009bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90009bd4:	687b      	ldr	r3, [r7, #4]
90009bd6:	681b      	ldr	r3, [r3, #0]
90009bd8:	689a      	ldr	r2, [r3, #8]
90009bda:	687b      	ldr	r3, [r7, #4]
90009bdc:	681b      	ldr	r3, [r3, #0]
90009bde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
90009be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90009be4:	687b      	ldr	r3, [r7, #4]
90009be6:	681b      	ldr	r3, [r3, #0]
90009be8:	681a      	ldr	r2, [r3, #0]
90009bea:	687b      	ldr	r3, [r7, #4]
90009bec:	681b      	ldr	r3, [r3, #0]
90009bee:	f042 0201 	orr.w	r2, r2, #1
90009bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90009bf4:	6878      	ldr	r0, [r7, #4]
90009bf6:	f000 fe9d 	bl	9000a934 <UART_CheckIdleState>
90009bfa:	4603      	mov	r3, r0
}
90009bfc:	4618      	mov	r0, r3
90009bfe:	3708      	adds	r7, #8
90009c00:	46bd      	mov	sp, r7
90009c02:	bd80      	pop	{r7, pc}

90009c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90009c04:	b580      	push	{r7, lr}
90009c06:	b08a      	sub	sp, #40	@ 0x28
90009c08:	af02      	add	r7, sp, #8
90009c0a:	60f8      	str	r0, [r7, #12]
90009c0c:	60b9      	str	r1, [r7, #8]
90009c0e:	603b      	str	r3, [r7, #0]
90009c10:	4613      	mov	r3, r2
90009c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90009c14:	68fb      	ldr	r3, [r7, #12]
90009c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
90009c1a:	2b20      	cmp	r3, #32
90009c1c:	d17b      	bne.n	90009d16 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
90009c1e:	68bb      	ldr	r3, [r7, #8]
90009c20:	2b00      	cmp	r3, #0
90009c22:	d002      	beq.n	90009c2a <HAL_UART_Transmit+0x26>
90009c24:	88fb      	ldrh	r3, [r7, #6]
90009c26:	2b00      	cmp	r3, #0
90009c28:	d101      	bne.n	90009c2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
90009c2a:	2301      	movs	r3, #1
90009c2c:	e074      	b.n	90009d18 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90009c2e:	68fb      	ldr	r3, [r7, #12]
90009c30:	2200      	movs	r2, #0
90009c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
90009c36:	68fb      	ldr	r3, [r7, #12]
90009c38:	2221      	movs	r2, #33	@ 0x21
90009c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90009c3e:	f7f9 facd 	bl	900031dc <HAL_GetTick>
90009c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90009c44:	68fb      	ldr	r3, [r7, #12]
90009c46:	88fa      	ldrh	r2, [r7, #6]
90009c48:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
90009c4c:	68fb      	ldr	r3, [r7, #12]
90009c4e:	88fa      	ldrh	r2, [r7, #6]
90009c50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90009c54:	68fb      	ldr	r3, [r7, #12]
90009c56:	689b      	ldr	r3, [r3, #8]
90009c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
90009c5c:	d108      	bne.n	90009c70 <HAL_UART_Transmit+0x6c>
90009c5e:	68fb      	ldr	r3, [r7, #12]
90009c60:	691b      	ldr	r3, [r3, #16]
90009c62:	2b00      	cmp	r3, #0
90009c64:	d104      	bne.n	90009c70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
90009c66:	2300      	movs	r3, #0
90009c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90009c6a:	68bb      	ldr	r3, [r7, #8]
90009c6c:	61bb      	str	r3, [r7, #24]
90009c6e:	e003      	b.n	90009c78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
90009c70:	68bb      	ldr	r3, [r7, #8]
90009c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90009c74:	2300      	movs	r3, #0
90009c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
90009c78:	e030      	b.n	90009cdc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90009c7a:	683b      	ldr	r3, [r7, #0]
90009c7c:	9300      	str	r3, [sp, #0]
90009c7e:	697b      	ldr	r3, [r7, #20]
90009c80:	2200      	movs	r2, #0
90009c82:	2180      	movs	r1, #128	@ 0x80
90009c84:	68f8      	ldr	r0, [r7, #12]
90009c86:	f000 feff 	bl	9000aa88 <UART_WaitOnFlagUntilTimeout>
90009c8a:	4603      	mov	r3, r0
90009c8c:	2b00      	cmp	r3, #0
90009c8e:	d005      	beq.n	90009c9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
90009c90:	68fb      	ldr	r3, [r7, #12]
90009c92:	2220      	movs	r2, #32
90009c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
90009c98:	2303      	movs	r3, #3
90009c9a:	e03d      	b.n	90009d18 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
90009c9c:	69fb      	ldr	r3, [r7, #28]
90009c9e:	2b00      	cmp	r3, #0
90009ca0:	d10b      	bne.n	90009cba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90009ca2:	69bb      	ldr	r3, [r7, #24]
90009ca4:	881b      	ldrh	r3, [r3, #0]
90009ca6:	461a      	mov	r2, r3
90009ca8:	68fb      	ldr	r3, [r7, #12]
90009caa:	681b      	ldr	r3, [r3, #0]
90009cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009cb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
90009cb2:	69bb      	ldr	r3, [r7, #24]
90009cb4:	3302      	adds	r3, #2
90009cb6:	61bb      	str	r3, [r7, #24]
90009cb8:	e007      	b.n	90009cca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90009cba:	69fb      	ldr	r3, [r7, #28]
90009cbc:	781a      	ldrb	r2, [r3, #0]
90009cbe:	68fb      	ldr	r3, [r7, #12]
90009cc0:	681b      	ldr	r3, [r3, #0]
90009cc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
90009cc4:	69fb      	ldr	r3, [r7, #28]
90009cc6:	3301      	adds	r3, #1
90009cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90009cca:	68fb      	ldr	r3, [r7, #12]
90009ccc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009cd0:	b29b      	uxth	r3, r3
90009cd2:	3b01      	subs	r3, #1
90009cd4:	b29a      	uxth	r2, r3
90009cd6:	68fb      	ldr	r3, [r7, #12]
90009cd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
90009cdc:	68fb      	ldr	r3, [r7, #12]
90009cde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
90009ce2:	b29b      	uxth	r3, r3
90009ce4:	2b00      	cmp	r3, #0
90009ce6:	d1c8      	bne.n	90009c7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90009ce8:	683b      	ldr	r3, [r7, #0]
90009cea:	9300      	str	r3, [sp, #0]
90009cec:	697b      	ldr	r3, [r7, #20]
90009cee:	2200      	movs	r2, #0
90009cf0:	2140      	movs	r1, #64	@ 0x40
90009cf2:	68f8      	ldr	r0, [r7, #12]
90009cf4:	f000 fec8 	bl	9000aa88 <UART_WaitOnFlagUntilTimeout>
90009cf8:	4603      	mov	r3, r0
90009cfa:	2b00      	cmp	r3, #0
90009cfc:	d005      	beq.n	90009d0a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
90009cfe:	68fb      	ldr	r3, [r7, #12]
90009d00:	2220      	movs	r2, #32
90009d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
90009d06:	2303      	movs	r3, #3
90009d08:	e006      	b.n	90009d18 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90009d0a:	68fb      	ldr	r3, [r7, #12]
90009d0c:	2220      	movs	r2, #32
90009d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
90009d12:	2300      	movs	r3, #0
90009d14:	e000      	b.n	90009d18 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
90009d16:	2302      	movs	r3, #2
  }
}
90009d18:	4618      	mov	r0, r3
90009d1a:	3720      	adds	r7, #32
90009d1c:	46bd      	mov	sp, r7
90009d1e:	bd80      	pop	{r7, pc}

90009d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90009d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90009d24:	b092      	sub	sp, #72	@ 0x48
90009d26:	af00      	add	r7, sp, #0
90009d28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90009d2a:	2300      	movs	r3, #0
90009d2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90009d30:	697b      	ldr	r3, [r7, #20]
90009d32:	689a      	ldr	r2, [r3, #8]
90009d34:	697b      	ldr	r3, [r7, #20]
90009d36:	691b      	ldr	r3, [r3, #16]
90009d38:	431a      	orrs	r2, r3
90009d3a:	697b      	ldr	r3, [r7, #20]
90009d3c:	695b      	ldr	r3, [r3, #20]
90009d3e:	431a      	orrs	r2, r3
90009d40:	697b      	ldr	r3, [r7, #20]
90009d42:	69db      	ldr	r3, [r3, #28]
90009d44:	4313      	orrs	r3, r2
90009d46:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90009d48:	697b      	ldr	r3, [r7, #20]
90009d4a:	681b      	ldr	r3, [r3, #0]
90009d4c:	681a      	ldr	r2, [r3, #0]
90009d4e:	4bbe      	ldr	r3, [pc, #760]	@ (9000a048 <UART_SetConfig+0x328>)
90009d50:	4013      	ands	r3, r2
90009d52:	697a      	ldr	r2, [r7, #20]
90009d54:	6812      	ldr	r2, [r2, #0]
90009d56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009d58:	430b      	orrs	r3, r1
90009d5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90009d5c:	697b      	ldr	r3, [r7, #20]
90009d5e:	681b      	ldr	r3, [r3, #0]
90009d60:	685b      	ldr	r3, [r3, #4]
90009d62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
90009d66:	697b      	ldr	r3, [r7, #20]
90009d68:	68da      	ldr	r2, [r3, #12]
90009d6a:	697b      	ldr	r3, [r7, #20]
90009d6c:	681b      	ldr	r3, [r3, #0]
90009d6e:	430a      	orrs	r2, r1
90009d70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90009d72:	697b      	ldr	r3, [r7, #20]
90009d74:	699b      	ldr	r3, [r3, #24]
90009d76:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90009d78:	697b      	ldr	r3, [r7, #20]
90009d7a:	681b      	ldr	r3, [r3, #0]
90009d7c:	4ab3      	ldr	r2, [pc, #716]	@ (9000a04c <UART_SetConfig+0x32c>)
90009d7e:	4293      	cmp	r3, r2
90009d80:	d004      	beq.n	90009d8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90009d82:	697b      	ldr	r3, [r7, #20]
90009d84:	6a1b      	ldr	r3, [r3, #32]
90009d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
90009d88:	4313      	orrs	r3, r2
90009d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90009d8c:	697b      	ldr	r3, [r7, #20]
90009d8e:	681b      	ldr	r3, [r3, #0]
90009d90:	689a      	ldr	r2, [r3, #8]
90009d92:	4baf      	ldr	r3, [pc, #700]	@ (9000a050 <UART_SetConfig+0x330>)
90009d94:	4013      	ands	r3, r2
90009d96:	697a      	ldr	r2, [r7, #20]
90009d98:	6812      	ldr	r2, [r2, #0]
90009d9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
90009d9c:	430b      	orrs	r3, r1
90009d9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90009da0:	697b      	ldr	r3, [r7, #20]
90009da2:	681b      	ldr	r3, [r3, #0]
90009da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
90009da6:	f023 010f 	bic.w	r1, r3, #15
90009daa:	697b      	ldr	r3, [r7, #20]
90009dac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
90009dae:	697b      	ldr	r3, [r7, #20]
90009db0:	681b      	ldr	r3, [r3, #0]
90009db2:	430a      	orrs	r2, r1
90009db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90009db6:	697b      	ldr	r3, [r7, #20]
90009db8:	681b      	ldr	r3, [r3, #0]
90009dba:	4aa6      	ldr	r2, [pc, #664]	@ (9000a054 <UART_SetConfig+0x334>)
90009dbc:	4293      	cmp	r3, r2
90009dbe:	d177      	bne.n	90009eb0 <UART_SetConfig+0x190>
90009dc0:	4ba5      	ldr	r3, [pc, #660]	@ (9000a058 <UART_SetConfig+0x338>)
90009dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
90009dc8:	2b28      	cmp	r3, #40	@ 0x28
90009dca:	d86d      	bhi.n	90009ea8 <UART_SetConfig+0x188>
90009dcc:	a201      	add	r2, pc, #4	@ (adr r2, 90009dd4 <UART_SetConfig+0xb4>)
90009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009dd2:	bf00      	nop
90009dd4:	90009e79 	.word	0x90009e79
90009dd8:	90009ea9 	.word	0x90009ea9
90009ddc:	90009ea9 	.word	0x90009ea9
90009de0:	90009ea9 	.word	0x90009ea9
90009de4:	90009ea9 	.word	0x90009ea9
90009de8:	90009ea9 	.word	0x90009ea9
90009dec:	90009ea9 	.word	0x90009ea9
90009df0:	90009ea9 	.word	0x90009ea9
90009df4:	90009e81 	.word	0x90009e81
90009df8:	90009ea9 	.word	0x90009ea9
90009dfc:	90009ea9 	.word	0x90009ea9
90009e00:	90009ea9 	.word	0x90009ea9
90009e04:	90009ea9 	.word	0x90009ea9
90009e08:	90009ea9 	.word	0x90009ea9
90009e0c:	90009ea9 	.word	0x90009ea9
90009e10:	90009ea9 	.word	0x90009ea9
90009e14:	90009e89 	.word	0x90009e89
90009e18:	90009ea9 	.word	0x90009ea9
90009e1c:	90009ea9 	.word	0x90009ea9
90009e20:	90009ea9 	.word	0x90009ea9
90009e24:	90009ea9 	.word	0x90009ea9
90009e28:	90009ea9 	.word	0x90009ea9
90009e2c:	90009ea9 	.word	0x90009ea9
90009e30:	90009ea9 	.word	0x90009ea9
90009e34:	90009e91 	.word	0x90009e91
90009e38:	90009ea9 	.word	0x90009ea9
90009e3c:	90009ea9 	.word	0x90009ea9
90009e40:	90009ea9 	.word	0x90009ea9
90009e44:	90009ea9 	.word	0x90009ea9
90009e48:	90009ea9 	.word	0x90009ea9
90009e4c:	90009ea9 	.word	0x90009ea9
90009e50:	90009ea9 	.word	0x90009ea9
90009e54:	90009e99 	.word	0x90009e99
90009e58:	90009ea9 	.word	0x90009ea9
90009e5c:	90009ea9 	.word	0x90009ea9
90009e60:	90009ea9 	.word	0x90009ea9
90009e64:	90009ea9 	.word	0x90009ea9
90009e68:	90009ea9 	.word	0x90009ea9
90009e6c:	90009ea9 	.word	0x90009ea9
90009e70:	90009ea9 	.word	0x90009ea9
90009e74:	90009ea1 	.word	0x90009ea1
90009e78:	2301      	movs	r3, #1
90009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e7e:	e222      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009e80:	2304      	movs	r3, #4
90009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e86:	e21e      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009e88:	2308      	movs	r3, #8
90009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e8e:	e21a      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009e90:	2310      	movs	r3, #16
90009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e96:	e216      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009e98:	2320      	movs	r3, #32
90009e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009e9e:	e212      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009ea0:	2340      	movs	r3, #64	@ 0x40
90009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ea6:	e20e      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009ea8:	2380      	movs	r3, #128	@ 0x80
90009eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eae:	e20a      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009eb0:	697b      	ldr	r3, [r7, #20]
90009eb2:	681b      	ldr	r3, [r3, #0]
90009eb4:	4a69      	ldr	r2, [pc, #420]	@ (9000a05c <UART_SetConfig+0x33c>)
90009eb6:	4293      	cmp	r3, r2
90009eb8:	d130      	bne.n	90009f1c <UART_SetConfig+0x1fc>
90009eba:	4b67      	ldr	r3, [pc, #412]	@ (9000a058 <UART_SetConfig+0x338>)
90009ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009ebe:	f003 0307 	and.w	r3, r3, #7
90009ec2:	2b05      	cmp	r3, #5
90009ec4:	d826      	bhi.n	90009f14 <UART_SetConfig+0x1f4>
90009ec6:	a201      	add	r2, pc, #4	@ (adr r2, 90009ecc <UART_SetConfig+0x1ac>)
90009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009ecc:	90009ee5 	.word	0x90009ee5
90009ed0:	90009eed 	.word	0x90009eed
90009ed4:	90009ef5 	.word	0x90009ef5
90009ed8:	90009efd 	.word	0x90009efd
90009edc:	90009f05 	.word	0x90009f05
90009ee0:	90009f0d 	.word	0x90009f0d
90009ee4:	2300      	movs	r3, #0
90009ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009eea:	e1ec      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009eec:	2304      	movs	r3, #4
90009eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ef2:	e1e8      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009ef4:	2308      	movs	r3, #8
90009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009efa:	e1e4      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009efc:	2310      	movs	r3, #16
90009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f02:	e1e0      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f04:	2320      	movs	r3, #32
90009f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f0a:	e1dc      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f0c:	2340      	movs	r3, #64	@ 0x40
90009f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f12:	e1d8      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f14:	2380      	movs	r3, #128	@ 0x80
90009f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f1a:	e1d4      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f1c:	697b      	ldr	r3, [r7, #20]
90009f1e:	681b      	ldr	r3, [r3, #0]
90009f20:	4a4f      	ldr	r2, [pc, #316]	@ (9000a060 <UART_SetConfig+0x340>)
90009f22:	4293      	cmp	r3, r2
90009f24:	d130      	bne.n	90009f88 <UART_SetConfig+0x268>
90009f26:	4b4c      	ldr	r3, [pc, #304]	@ (9000a058 <UART_SetConfig+0x338>)
90009f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f2a:	f003 0307 	and.w	r3, r3, #7
90009f2e:	2b05      	cmp	r3, #5
90009f30:	d826      	bhi.n	90009f80 <UART_SetConfig+0x260>
90009f32:	a201      	add	r2, pc, #4	@ (adr r2, 90009f38 <UART_SetConfig+0x218>)
90009f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009f38:	90009f51 	.word	0x90009f51
90009f3c:	90009f59 	.word	0x90009f59
90009f40:	90009f61 	.word	0x90009f61
90009f44:	90009f69 	.word	0x90009f69
90009f48:	90009f71 	.word	0x90009f71
90009f4c:	90009f79 	.word	0x90009f79
90009f50:	2300      	movs	r3, #0
90009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f56:	e1b6      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f58:	2304      	movs	r3, #4
90009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f5e:	e1b2      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f60:	2308      	movs	r3, #8
90009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f66:	e1ae      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f68:	2310      	movs	r3, #16
90009f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f6e:	e1aa      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f70:	2320      	movs	r3, #32
90009f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f76:	e1a6      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f78:	2340      	movs	r3, #64	@ 0x40
90009f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f7e:	e1a2      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f80:	2380      	movs	r3, #128	@ 0x80
90009f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009f86:	e19e      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009f88:	697b      	ldr	r3, [r7, #20]
90009f8a:	681b      	ldr	r3, [r3, #0]
90009f8c:	4a35      	ldr	r2, [pc, #212]	@ (9000a064 <UART_SetConfig+0x344>)
90009f8e:	4293      	cmp	r3, r2
90009f90:	d130      	bne.n	90009ff4 <UART_SetConfig+0x2d4>
90009f92:	4b31      	ldr	r3, [pc, #196]	@ (9000a058 <UART_SetConfig+0x338>)
90009f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
90009f96:	f003 0307 	and.w	r3, r3, #7
90009f9a:	2b05      	cmp	r3, #5
90009f9c:	d826      	bhi.n	90009fec <UART_SetConfig+0x2cc>
90009f9e:	a201      	add	r2, pc, #4	@ (adr r2, 90009fa4 <UART_SetConfig+0x284>)
90009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009fa4:	90009fbd 	.word	0x90009fbd
90009fa8:	90009fc5 	.word	0x90009fc5
90009fac:	90009fcd 	.word	0x90009fcd
90009fb0:	90009fd5 	.word	0x90009fd5
90009fb4:	90009fdd 	.word	0x90009fdd
90009fb8:	90009fe5 	.word	0x90009fe5
90009fbc:	2300      	movs	r3, #0
90009fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fc2:	e180      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009fc4:	2304      	movs	r3, #4
90009fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fca:	e17c      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009fcc:	2308      	movs	r3, #8
90009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fd2:	e178      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009fd4:	2310      	movs	r3, #16
90009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fda:	e174      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009fdc:	2320      	movs	r3, #32
90009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fe2:	e170      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009fe4:	2340      	movs	r3, #64	@ 0x40
90009fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009fea:	e16c      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009fec:	2380      	movs	r3, #128	@ 0x80
90009fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
90009ff2:	e168      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
90009ff4:	697b      	ldr	r3, [r7, #20]
90009ff6:	681b      	ldr	r3, [r3, #0]
90009ff8:	4a1b      	ldr	r2, [pc, #108]	@ (9000a068 <UART_SetConfig+0x348>)
90009ffa:	4293      	cmp	r3, r2
90009ffc:	d142      	bne.n	9000a084 <UART_SetConfig+0x364>
90009ffe:	4b16      	ldr	r3, [pc, #88]	@ (9000a058 <UART_SetConfig+0x338>)
9000a000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a002:	f003 0307 	and.w	r3, r3, #7
9000a006:	2b05      	cmp	r3, #5
9000a008:	d838      	bhi.n	9000a07c <UART_SetConfig+0x35c>
9000a00a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a010 <UART_SetConfig+0x2f0>)
9000a00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a010:	9000a029 	.word	0x9000a029
9000a014:	9000a031 	.word	0x9000a031
9000a018:	9000a039 	.word	0x9000a039
9000a01c:	9000a041 	.word	0x9000a041
9000a020:	9000a06d 	.word	0x9000a06d
9000a024:	9000a075 	.word	0x9000a075
9000a028:	2300      	movs	r3, #0
9000a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a02e:	e14a      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a030:	2304      	movs	r3, #4
9000a032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a036:	e146      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a038:	2308      	movs	r3, #8
9000a03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a03e:	e142      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a040:	2310      	movs	r3, #16
9000a042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a046:	e13e      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a048:	cfff69f3 	.word	0xcfff69f3
9000a04c:	58000c00 	.word	0x58000c00
9000a050:	11fff4ff 	.word	0x11fff4ff
9000a054:	40011000 	.word	0x40011000
9000a058:	58024400 	.word	0x58024400
9000a05c:	40004400 	.word	0x40004400
9000a060:	40004800 	.word	0x40004800
9000a064:	40004c00 	.word	0x40004c00
9000a068:	40005000 	.word	0x40005000
9000a06c:	2320      	movs	r3, #32
9000a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a072:	e128      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a074:	2340      	movs	r3, #64	@ 0x40
9000a076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a07a:	e124      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a07c:	2380      	movs	r3, #128	@ 0x80
9000a07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a082:	e120      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a084:	697b      	ldr	r3, [r7, #20]
9000a086:	681b      	ldr	r3, [r3, #0]
9000a088:	4acb      	ldr	r2, [pc, #812]	@ (9000a3b8 <UART_SetConfig+0x698>)
9000a08a:	4293      	cmp	r3, r2
9000a08c:	d176      	bne.n	9000a17c <UART_SetConfig+0x45c>
9000a08e:	4bcb      	ldr	r3, [pc, #812]	@ (9000a3bc <UART_SetConfig+0x69c>)
9000a090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
9000a096:	2b28      	cmp	r3, #40	@ 0x28
9000a098:	d86c      	bhi.n	9000a174 <UART_SetConfig+0x454>
9000a09a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a0a0 <UART_SetConfig+0x380>)
9000a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a0a0:	9000a145 	.word	0x9000a145
9000a0a4:	9000a175 	.word	0x9000a175
9000a0a8:	9000a175 	.word	0x9000a175
9000a0ac:	9000a175 	.word	0x9000a175
9000a0b0:	9000a175 	.word	0x9000a175
9000a0b4:	9000a175 	.word	0x9000a175
9000a0b8:	9000a175 	.word	0x9000a175
9000a0bc:	9000a175 	.word	0x9000a175
9000a0c0:	9000a14d 	.word	0x9000a14d
9000a0c4:	9000a175 	.word	0x9000a175
9000a0c8:	9000a175 	.word	0x9000a175
9000a0cc:	9000a175 	.word	0x9000a175
9000a0d0:	9000a175 	.word	0x9000a175
9000a0d4:	9000a175 	.word	0x9000a175
9000a0d8:	9000a175 	.word	0x9000a175
9000a0dc:	9000a175 	.word	0x9000a175
9000a0e0:	9000a155 	.word	0x9000a155
9000a0e4:	9000a175 	.word	0x9000a175
9000a0e8:	9000a175 	.word	0x9000a175
9000a0ec:	9000a175 	.word	0x9000a175
9000a0f0:	9000a175 	.word	0x9000a175
9000a0f4:	9000a175 	.word	0x9000a175
9000a0f8:	9000a175 	.word	0x9000a175
9000a0fc:	9000a175 	.word	0x9000a175
9000a100:	9000a15d 	.word	0x9000a15d
9000a104:	9000a175 	.word	0x9000a175
9000a108:	9000a175 	.word	0x9000a175
9000a10c:	9000a175 	.word	0x9000a175
9000a110:	9000a175 	.word	0x9000a175
9000a114:	9000a175 	.word	0x9000a175
9000a118:	9000a175 	.word	0x9000a175
9000a11c:	9000a175 	.word	0x9000a175
9000a120:	9000a165 	.word	0x9000a165
9000a124:	9000a175 	.word	0x9000a175
9000a128:	9000a175 	.word	0x9000a175
9000a12c:	9000a175 	.word	0x9000a175
9000a130:	9000a175 	.word	0x9000a175
9000a134:	9000a175 	.word	0x9000a175
9000a138:	9000a175 	.word	0x9000a175
9000a13c:	9000a175 	.word	0x9000a175
9000a140:	9000a16d 	.word	0x9000a16d
9000a144:	2301      	movs	r3, #1
9000a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a14a:	e0bc      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a14c:	2304      	movs	r3, #4
9000a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a152:	e0b8      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a154:	2308      	movs	r3, #8
9000a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a15a:	e0b4      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a15c:	2310      	movs	r3, #16
9000a15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a162:	e0b0      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a164:	2320      	movs	r3, #32
9000a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a16a:	e0ac      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a16c:	2340      	movs	r3, #64	@ 0x40
9000a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a172:	e0a8      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a174:	2380      	movs	r3, #128	@ 0x80
9000a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a17a:	e0a4      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a17c:	697b      	ldr	r3, [r7, #20]
9000a17e:	681b      	ldr	r3, [r3, #0]
9000a180:	4a8f      	ldr	r2, [pc, #572]	@ (9000a3c0 <UART_SetConfig+0x6a0>)
9000a182:	4293      	cmp	r3, r2
9000a184:	d130      	bne.n	9000a1e8 <UART_SetConfig+0x4c8>
9000a186:	4b8d      	ldr	r3, [pc, #564]	@ (9000a3bc <UART_SetConfig+0x69c>)
9000a188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a18a:	f003 0307 	and.w	r3, r3, #7
9000a18e:	2b05      	cmp	r3, #5
9000a190:	d826      	bhi.n	9000a1e0 <UART_SetConfig+0x4c0>
9000a192:	a201      	add	r2, pc, #4	@ (adr r2, 9000a198 <UART_SetConfig+0x478>)
9000a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a198:	9000a1b1 	.word	0x9000a1b1
9000a19c:	9000a1b9 	.word	0x9000a1b9
9000a1a0:	9000a1c1 	.word	0x9000a1c1
9000a1a4:	9000a1c9 	.word	0x9000a1c9
9000a1a8:	9000a1d1 	.word	0x9000a1d1
9000a1ac:	9000a1d9 	.word	0x9000a1d9
9000a1b0:	2300      	movs	r3, #0
9000a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1b6:	e086      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a1b8:	2304      	movs	r3, #4
9000a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1be:	e082      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a1c0:	2308      	movs	r3, #8
9000a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1c6:	e07e      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a1c8:	2310      	movs	r3, #16
9000a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1ce:	e07a      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a1d0:	2320      	movs	r3, #32
9000a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1d6:	e076      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a1d8:	2340      	movs	r3, #64	@ 0x40
9000a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1de:	e072      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a1e0:	2380      	movs	r3, #128	@ 0x80
9000a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a1e6:	e06e      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a1e8:	697b      	ldr	r3, [r7, #20]
9000a1ea:	681b      	ldr	r3, [r3, #0]
9000a1ec:	4a75      	ldr	r2, [pc, #468]	@ (9000a3c4 <UART_SetConfig+0x6a4>)
9000a1ee:	4293      	cmp	r3, r2
9000a1f0:	d130      	bne.n	9000a254 <UART_SetConfig+0x534>
9000a1f2:	4b72      	ldr	r3, [pc, #456]	@ (9000a3bc <UART_SetConfig+0x69c>)
9000a1f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
9000a1f6:	f003 0307 	and.w	r3, r3, #7
9000a1fa:	2b05      	cmp	r3, #5
9000a1fc:	d826      	bhi.n	9000a24c <UART_SetConfig+0x52c>
9000a1fe:	a201      	add	r2, pc, #4	@ (adr r2, 9000a204 <UART_SetConfig+0x4e4>)
9000a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a204:	9000a21d 	.word	0x9000a21d
9000a208:	9000a225 	.word	0x9000a225
9000a20c:	9000a22d 	.word	0x9000a22d
9000a210:	9000a235 	.word	0x9000a235
9000a214:	9000a23d 	.word	0x9000a23d
9000a218:	9000a245 	.word	0x9000a245
9000a21c:	2300      	movs	r3, #0
9000a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a222:	e050      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a224:	2304      	movs	r3, #4
9000a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a22a:	e04c      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a22c:	2308      	movs	r3, #8
9000a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a232:	e048      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a234:	2310      	movs	r3, #16
9000a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a23a:	e044      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a23c:	2320      	movs	r3, #32
9000a23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a242:	e040      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a244:	2340      	movs	r3, #64	@ 0x40
9000a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a24a:	e03c      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a24c:	2380      	movs	r3, #128	@ 0x80
9000a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a252:	e038      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a254:	697b      	ldr	r3, [r7, #20]
9000a256:	681b      	ldr	r3, [r3, #0]
9000a258:	4a5b      	ldr	r2, [pc, #364]	@ (9000a3c8 <UART_SetConfig+0x6a8>)
9000a25a:	4293      	cmp	r3, r2
9000a25c:	d130      	bne.n	9000a2c0 <UART_SetConfig+0x5a0>
9000a25e:	4b57      	ldr	r3, [pc, #348]	@ (9000a3bc <UART_SetConfig+0x69c>)
9000a260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
9000a262:	f003 0307 	and.w	r3, r3, #7
9000a266:	2b05      	cmp	r3, #5
9000a268:	d826      	bhi.n	9000a2b8 <UART_SetConfig+0x598>
9000a26a:	a201      	add	r2, pc, #4	@ (adr r2, 9000a270 <UART_SetConfig+0x550>)
9000a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a270:	9000a289 	.word	0x9000a289
9000a274:	9000a291 	.word	0x9000a291
9000a278:	9000a299 	.word	0x9000a299
9000a27c:	9000a2a1 	.word	0x9000a2a1
9000a280:	9000a2a9 	.word	0x9000a2a9
9000a284:	9000a2b1 	.word	0x9000a2b1
9000a288:	2302      	movs	r3, #2
9000a28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a28e:	e01a      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a290:	2304      	movs	r3, #4
9000a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a296:	e016      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a298:	2308      	movs	r3, #8
9000a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a29e:	e012      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a2a0:	2310      	movs	r3, #16
9000a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2a6:	e00e      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a2a8:	2320      	movs	r3, #32
9000a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2ae:	e00a      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a2b0:	2340      	movs	r3, #64	@ 0x40
9000a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2b6:	e006      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a2b8:	2380      	movs	r3, #128	@ 0x80
9000a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
9000a2be:	e002      	b.n	9000a2c6 <UART_SetConfig+0x5a6>
9000a2c0:	2380      	movs	r3, #128	@ 0x80
9000a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000a2c6:	697b      	ldr	r3, [r7, #20]
9000a2c8:	681b      	ldr	r3, [r3, #0]
9000a2ca:	4a3f      	ldr	r2, [pc, #252]	@ (9000a3c8 <UART_SetConfig+0x6a8>)
9000a2cc:	4293      	cmp	r3, r2
9000a2ce:	f040 80f8 	bne.w	9000a4c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000a2d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a2d6:	2b20      	cmp	r3, #32
9000a2d8:	dc46      	bgt.n	9000a368 <UART_SetConfig+0x648>
9000a2da:	2b02      	cmp	r3, #2
9000a2dc:	f2c0 8082 	blt.w	9000a3e4 <UART_SetConfig+0x6c4>
9000a2e0:	3b02      	subs	r3, #2
9000a2e2:	2b1e      	cmp	r3, #30
9000a2e4:	d87e      	bhi.n	9000a3e4 <UART_SetConfig+0x6c4>
9000a2e6:	a201      	add	r2, pc, #4	@ (adr r2, 9000a2ec <UART_SetConfig+0x5cc>)
9000a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a2ec:	9000a36f 	.word	0x9000a36f
9000a2f0:	9000a3e5 	.word	0x9000a3e5
9000a2f4:	9000a377 	.word	0x9000a377
9000a2f8:	9000a3e5 	.word	0x9000a3e5
9000a2fc:	9000a3e5 	.word	0x9000a3e5
9000a300:	9000a3e5 	.word	0x9000a3e5
9000a304:	9000a387 	.word	0x9000a387
9000a308:	9000a3e5 	.word	0x9000a3e5
9000a30c:	9000a3e5 	.word	0x9000a3e5
9000a310:	9000a3e5 	.word	0x9000a3e5
9000a314:	9000a3e5 	.word	0x9000a3e5
9000a318:	9000a3e5 	.word	0x9000a3e5
9000a31c:	9000a3e5 	.word	0x9000a3e5
9000a320:	9000a3e5 	.word	0x9000a3e5
9000a324:	9000a397 	.word	0x9000a397
9000a328:	9000a3e5 	.word	0x9000a3e5
9000a32c:	9000a3e5 	.word	0x9000a3e5
9000a330:	9000a3e5 	.word	0x9000a3e5
9000a334:	9000a3e5 	.word	0x9000a3e5
9000a338:	9000a3e5 	.word	0x9000a3e5
9000a33c:	9000a3e5 	.word	0x9000a3e5
9000a340:	9000a3e5 	.word	0x9000a3e5
9000a344:	9000a3e5 	.word	0x9000a3e5
9000a348:	9000a3e5 	.word	0x9000a3e5
9000a34c:	9000a3e5 	.word	0x9000a3e5
9000a350:	9000a3e5 	.word	0x9000a3e5
9000a354:	9000a3e5 	.word	0x9000a3e5
9000a358:	9000a3e5 	.word	0x9000a3e5
9000a35c:	9000a3e5 	.word	0x9000a3e5
9000a360:	9000a3e5 	.word	0x9000a3e5
9000a364:	9000a3d7 	.word	0x9000a3d7
9000a368:	2b40      	cmp	r3, #64	@ 0x40
9000a36a:	d037      	beq.n	9000a3dc <UART_SetConfig+0x6bc>
9000a36c:	e03a      	b.n	9000a3e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000a36e:	f7fe fdcd 	bl	90008f0c <HAL_RCCEx_GetD3PCLK1Freq>
9000a372:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a374:	e03c      	b.n	9000a3f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a37a:	4618      	mov	r0, r3
9000a37c:	f7fe fddc 	bl	90008f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a384:	e034      	b.n	9000a3f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a386:	f107 0318 	add.w	r3, r7, #24
9000a38a:	4618      	mov	r0, r3
9000a38c:	f7fe ff28 	bl	900091e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a390:	69fb      	ldr	r3, [r7, #28]
9000a392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a394:	e02c      	b.n	9000a3f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a396:	4b09      	ldr	r3, [pc, #36]	@ (9000a3bc <UART_SetConfig+0x69c>)
9000a398:	681b      	ldr	r3, [r3, #0]
9000a39a:	f003 0320 	and.w	r3, r3, #32
9000a39e:	2b00      	cmp	r3, #0
9000a3a0:	d016      	beq.n	9000a3d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a3a2:	4b06      	ldr	r3, [pc, #24]	@ (9000a3bc <UART_SetConfig+0x69c>)
9000a3a4:	681b      	ldr	r3, [r3, #0]
9000a3a6:	08db      	lsrs	r3, r3, #3
9000a3a8:	f003 0303 	and.w	r3, r3, #3
9000a3ac:	4a07      	ldr	r2, [pc, #28]	@ (9000a3cc <UART_SetConfig+0x6ac>)
9000a3ae:	fa22 f303 	lsr.w	r3, r2, r3
9000a3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a3b4:	e01c      	b.n	9000a3f0 <UART_SetConfig+0x6d0>
9000a3b6:	bf00      	nop
9000a3b8:	40011400 	.word	0x40011400
9000a3bc:	58024400 	.word	0x58024400
9000a3c0:	40007800 	.word	0x40007800
9000a3c4:	40007c00 	.word	0x40007c00
9000a3c8:	58000c00 	.word	0x58000c00
9000a3cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000a3d0:	4b9d      	ldr	r3, [pc, #628]	@ (9000a648 <UART_SetConfig+0x928>)
9000a3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3d4:	e00c      	b.n	9000a3f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a3d6:	4b9d      	ldr	r3, [pc, #628]	@ (9000a64c <UART_SetConfig+0x92c>)
9000a3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3da:	e009      	b.n	9000a3f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a3dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a3e2:	e005      	b.n	9000a3f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000a3e4:	2300      	movs	r3, #0
9000a3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a3e8:	2301      	movs	r3, #1
9000a3ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a3ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000a3f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a3f2:	2b00      	cmp	r3, #0
9000a3f4:	f000 81de 	beq.w	9000a7b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000a3f8:	697b      	ldr	r3, [r7, #20]
9000a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a3fc:	4a94      	ldr	r2, [pc, #592]	@ (9000a650 <UART_SetConfig+0x930>)
9000a3fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a402:	461a      	mov	r2, r3
9000a404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a406:	fbb3 f3f2 	udiv	r3, r3, r2
9000a40a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a40c:	697b      	ldr	r3, [r7, #20]
9000a40e:	685a      	ldr	r2, [r3, #4]
9000a410:	4613      	mov	r3, r2
9000a412:	005b      	lsls	r3, r3, #1
9000a414:	4413      	add	r3, r2
9000a416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a418:	429a      	cmp	r2, r3
9000a41a:	d305      	bcc.n	9000a428 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000a41c:	697b      	ldr	r3, [r7, #20]
9000a41e:	685b      	ldr	r3, [r3, #4]
9000a420:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000a422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000a424:	429a      	cmp	r2, r3
9000a426:	d903      	bls.n	9000a430 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000a428:	2301      	movs	r3, #1
9000a42a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a42e:	e1c1      	b.n	9000a7b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a432:	2200      	movs	r2, #0
9000a434:	60bb      	str	r3, [r7, #8]
9000a436:	60fa      	str	r2, [r7, #12]
9000a438:	697b      	ldr	r3, [r7, #20]
9000a43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a43c:	4a84      	ldr	r2, [pc, #528]	@ (9000a650 <UART_SetConfig+0x930>)
9000a43e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a442:	b29b      	uxth	r3, r3
9000a444:	2200      	movs	r2, #0
9000a446:	603b      	str	r3, [r7, #0]
9000a448:	607a      	str	r2, [r7, #4]
9000a44a:	e9d7 2300 	ldrd	r2, r3, [r7]
9000a44e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000a452:	f7f5 ff95 	bl	90000380 <__aeabi_uldivmod>
9000a456:	4602      	mov	r2, r0
9000a458:	460b      	mov	r3, r1
9000a45a:	4610      	mov	r0, r2
9000a45c:	4619      	mov	r1, r3
9000a45e:	f04f 0200 	mov.w	r2, #0
9000a462:	f04f 0300 	mov.w	r3, #0
9000a466:	020b      	lsls	r3, r1, #8
9000a468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000a46c:	0202      	lsls	r2, r0, #8
9000a46e:	6979      	ldr	r1, [r7, #20]
9000a470:	6849      	ldr	r1, [r1, #4]
9000a472:	0849      	lsrs	r1, r1, #1
9000a474:	2000      	movs	r0, #0
9000a476:	460c      	mov	r4, r1
9000a478:	4605      	mov	r5, r0
9000a47a:	eb12 0804 	adds.w	r8, r2, r4
9000a47e:	eb43 0905 	adc.w	r9, r3, r5
9000a482:	697b      	ldr	r3, [r7, #20]
9000a484:	685b      	ldr	r3, [r3, #4]
9000a486:	2200      	movs	r2, #0
9000a488:	469a      	mov	sl, r3
9000a48a:	4693      	mov	fp, r2
9000a48c:	4652      	mov	r2, sl
9000a48e:	465b      	mov	r3, fp
9000a490:	4640      	mov	r0, r8
9000a492:	4649      	mov	r1, r9
9000a494:	f7f5 ff74 	bl	90000380 <__aeabi_uldivmod>
9000a498:	4602      	mov	r2, r0
9000a49a:	460b      	mov	r3, r1
9000a49c:	4613      	mov	r3, r2
9000a49e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
9000a4a6:	d308      	bcc.n	9000a4ba <UART_SetConfig+0x79a>
9000a4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a4aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a4ae:	d204      	bcs.n	9000a4ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000a4b0:	697b      	ldr	r3, [r7, #20]
9000a4b2:	681b      	ldr	r3, [r3, #0]
9000a4b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
9000a4b6:	60da      	str	r2, [r3, #12]
9000a4b8:	e17c      	b.n	9000a7b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000a4ba:	2301      	movs	r3, #1
9000a4bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a4c0:	e178      	b.n	9000a7b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000a4c2:	697b      	ldr	r3, [r7, #20]
9000a4c4:	69db      	ldr	r3, [r3, #28]
9000a4c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000a4ca:	f040 80c5 	bne.w	9000a658 <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000a4ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a4d2:	2b20      	cmp	r3, #32
9000a4d4:	dc48      	bgt.n	9000a568 <UART_SetConfig+0x848>
9000a4d6:	2b00      	cmp	r3, #0
9000a4d8:	db7b      	blt.n	9000a5d2 <UART_SetConfig+0x8b2>
9000a4da:	2b20      	cmp	r3, #32
9000a4dc:	d879      	bhi.n	9000a5d2 <UART_SetConfig+0x8b2>
9000a4de:	a201      	add	r2, pc, #4	@ (adr r2, 9000a4e4 <UART_SetConfig+0x7c4>)
9000a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a4e4:	9000a56f 	.word	0x9000a56f
9000a4e8:	9000a577 	.word	0x9000a577
9000a4ec:	9000a5d3 	.word	0x9000a5d3
9000a4f0:	9000a5d3 	.word	0x9000a5d3
9000a4f4:	9000a57f 	.word	0x9000a57f
9000a4f8:	9000a5d3 	.word	0x9000a5d3
9000a4fc:	9000a5d3 	.word	0x9000a5d3
9000a500:	9000a5d3 	.word	0x9000a5d3
9000a504:	9000a58f 	.word	0x9000a58f
9000a508:	9000a5d3 	.word	0x9000a5d3
9000a50c:	9000a5d3 	.word	0x9000a5d3
9000a510:	9000a5d3 	.word	0x9000a5d3
9000a514:	9000a5d3 	.word	0x9000a5d3
9000a518:	9000a5d3 	.word	0x9000a5d3
9000a51c:	9000a5d3 	.word	0x9000a5d3
9000a520:	9000a5d3 	.word	0x9000a5d3
9000a524:	9000a59f 	.word	0x9000a59f
9000a528:	9000a5d3 	.word	0x9000a5d3
9000a52c:	9000a5d3 	.word	0x9000a5d3
9000a530:	9000a5d3 	.word	0x9000a5d3
9000a534:	9000a5d3 	.word	0x9000a5d3
9000a538:	9000a5d3 	.word	0x9000a5d3
9000a53c:	9000a5d3 	.word	0x9000a5d3
9000a540:	9000a5d3 	.word	0x9000a5d3
9000a544:	9000a5d3 	.word	0x9000a5d3
9000a548:	9000a5d3 	.word	0x9000a5d3
9000a54c:	9000a5d3 	.word	0x9000a5d3
9000a550:	9000a5d3 	.word	0x9000a5d3
9000a554:	9000a5d3 	.word	0x9000a5d3
9000a558:	9000a5d3 	.word	0x9000a5d3
9000a55c:	9000a5d3 	.word	0x9000a5d3
9000a560:	9000a5d3 	.word	0x9000a5d3
9000a564:	9000a5c5 	.word	0x9000a5c5
9000a568:	2b40      	cmp	r3, #64	@ 0x40
9000a56a:	d02e      	beq.n	9000a5ca <UART_SetConfig+0x8aa>
9000a56c:	e031      	b.n	9000a5d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a56e:	f7fd fa97 	bl	90007aa0 <HAL_RCC_GetPCLK1Freq>
9000a572:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a574:	e033      	b.n	9000a5de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a576:	f7fd faa9 	bl	90007acc <HAL_RCC_GetPCLK2Freq>
9000a57a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a57c:	e02f      	b.n	9000a5de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a57e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a582:	4618      	mov	r0, r3
9000a584:	f7fe fcd8 	bl	90008f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a58c:	e027      	b.n	9000a5de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a58e:	f107 0318 	add.w	r3, r7, #24
9000a592:	4618      	mov	r0, r3
9000a594:	f7fe fe24 	bl	900091e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a598:	69fb      	ldr	r3, [r7, #28]
9000a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a59c:	e01f      	b.n	9000a5de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a59e:	4b2d      	ldr	r3, [pc, #180]	@ (9000a654 <UART_SetConfig+0x934>)
9000a5a0:	681b      	ldr	r3, [r3, #0]
9000a5a2:	f003 0320 	and.w	r3, r3, #32
9000a5a6:	2b00      	cmp	r3, #0
9000a5a8:	d009      	beq.n	9000a5be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a5aa:	4b2a      	ldr	r3, [pc, #168]	@ (9000a654 <UART_SetConfig+0x934>)
9000a5ac:	681b      	ldr	r3, [r3, #0]
9000a5ae:	08db      	lsrs	r3, r3, #3
9000a5b0:	f003 0303 	and.w	r3, r3, #3
9000a5b4:	4a24      	ldr	r2, [pc, #144]	@ (9000a648 <UART_SetConfig+0x928>)
9000a5b6:	fa22 f303 	lsr.w	r3, r2, r3
9000a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a5bc:	e00f      	b.n	9000a5de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000a5be:	4b22      	ldr	r3, [pc, #136]	@ (9000a648 <UART_SetConfig+0x928>)
9000a5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a5c2:	e00c      	b.n	9000a5de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a5c4:	4b21      	ldr	r3, [pc, #132]	@ (9000a64c <UART_SetConfig+0x92c>)
9000a5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a5c8:	e009      	b.n	9000a5de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a5ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a5d0:	e005      	b.n	9000a5de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000a5d2:	2300      	movs	r3, #0
9000a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a5d6:	2301      	movs	r3, #1
9000a5d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a5dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000a5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a5e0:	2b00      	cmp	r3, #0
9000a5e2:	f000 80e7 	beq.w	9000a7b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a5e6:	697b      	ldr	r3, [r7, #20]
9000a5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a5ea:	4a19      	ldr	r2, [pc, #100]	@ (9000a650 <UART_SetConfig+0x930>)
9000a5ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a5f0:	461a      	mov	r2, r3
9000a5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a5f4:	fbb3 f3f2 	udiv	r3, r3, r2
9000a5f8:	005a      	lsls	r2, r3, #1
9000a5fa:	697b      	ldr	r3, [r7, #20]
9000a5fc:	685b      	ldr	r3, [r3, #4]
9000a5fe:	085b      	lsrs	r3, r3, #1
9000a600:	441a      	add	r2, r3
9000a602:	697b      	ldr	r3, [r7, #20]
9000a604:	685b      	ldr	r3, [r3, #4]
9000a606:	fbb2 f3f3 	udiv	r3, r2, r3
9000a60a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a60e:	2b0f      	cmp	r3, #15
9000a610:	d916      	bls.n	9000a640 <UART_SetConfig+0x920>
9000a612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a618:	d212      	bcs.n	9000a640 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000a61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a61c:	b29b      	uxth	r3, r3
9000a61e:	f023 030f 	bic.w	r3, r3, #15
9000a622:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000a624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a626:	085b      	lsrs	r3, r3, #1
9000a628:	b29b      	uxth	r3, r3
9000a62a:	f003 0307 	and.w	r3, r3, #7
9000a62e:	b29a      	uxth	r2, r3
9000a630:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
9000a632:	4313      	orrs	r3, r2
9000a634:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
9000a636:	697b      	ldr	r3, [r7, #20]
9000a638:	681b      	ldr	r3, [r3, #0]
9000a63a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
9000a63c:	60da      	str	r2, [r3, #12]
9000a63e:	e0b9      	b.n	9000a7b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a640:	2301      	movs	r3, #1
9000a642:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
9000a646:	e0b5      	b.n	9000a7b4 <UART_SetConfig+0xa94>
9000a648:	03d09000 	.word	0x03d09000
9000a64c:	003d0900 	.word	0x003d0900
9000a650:	9000d688 	.word	0x9000d688
9000a654:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000a658:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
9000a65c:	2b20      	cmp	r3, #32
9000a65e:	dc49      	bgt.n	9000a6f4 <UART_SetConfig+0x9d4>
9000a660:	2b00      	cmp	r3, #0
9000a662:	db7c      	blt.n	9000a75e <UART_SetConfig+0xa3e>
9000a664:	2b20      	cmp	r3, #32
9000a666:	d87a      	bhi.n	9000a75e <UART_SetConfig+0xa3e>
9000a668:	a201      	add	r2, pc, #4	@ (adr r2, 9000a670 <UART_SetConfig+0x950>)
9000a66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a66e:	bf00      	nop
9000a670:	9000a6fb 	.word	0x9000a6fb
9000a674:	9000a703 	.word	0x9000a703
9000a678:	9000a75f 	.word	0x9000a75f
9000a67c:	9000a75f 	.word	0x9000a75f
9000a680:	9000a70b 	.word	0x9000a70b
9000a684:	9000a75f 	.word	0x9000a75f
9000a688:	9000a75f 	.word	0x9000a75f
9000a68c:	9000a75f 	.word	0x9000a75f
9000a690:	9000a71b 	.word	0x9000a71b
9000a694:	9000a75f 	.word	0x9000a75f
9000a698:	9000a75f 	.word	0x9000a75f
9000a69c:	9000a75f 	.word	0x9000a75f
9000a6a0:	9000a75f 	.word	0x9000a75f
9000a6a4:	9000a75f 	.word	0x9000a75f
9000a6a8:	9000a75f 	.word	0x9000a75f
9000a6ac:	9000a75f 	.word	0x9000a75f
9000a6b0:	9000a72b 	.word	0x9000a72b
9000a6b4:	9000a75f 	.word	0x9000a75f
9000a6b8:	9000a75f 	.word	0x9000a75f
9000a6bc:	9000a75f 	.word	0x9000a75f
9000a6c0:	9000a75f 	.word	0x9000a75f
9000a6c4:	9000a75f 	.word	0x9000a75f
9000a6c8:	9000a75f 	.word	0x9000a75f
9000a6cc:	9000a75f 	.word	0x9000a75f
9000a6d0:	9000a75f 	.word	0x9000a75f
9000a6d4:	9000a75f 	.word	0x9000a75f
9000a6d8:	9000a75f 	.word	0x9000a75f
9000a6dc:	9000a75f 	.word	0x9000a75f
9000a6e0:	9000a75f 	.word	0x9000a75f
9000a6e4:	9000a75f 	.word	0x9000a75f
9000a6e8:	9000a75f 	.word	0x9000a75f
9000a6ec:	9000a75f 	.word	0x9000a75f
9000a6f0:	9000a751 	.word	0x9000a751
9000a6f4:	2b40      	cmp	r3, #64	@ 0x40
9000a6f6:	d02e      	beq.n	9000a756 <UART_SetConfig+0xa36>
9000a6f8:	e031      	b.n	9000a75e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000a6fa:	f7fd f9d1 	bl	90007aa0 <HAL_RCC_GetPCLK1Freq>
9000a6fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a700:	e033      	b.n	9000a76a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000a702:	f7fd f9e3 	bl	90007acc <HAL_RCC_GetPCLK2Freq>
9000a706:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
9000a708:	e02f      	b.n	9000a76a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000a70a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000a70e:	4618      	mov	r0, r3
9000a710:	f7fe fc12 	bl	90008f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000a714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000a716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a718:	e027      	b.n	9000a76a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000a71a:	f107 0318 	add.w	r3, r7, #24
9000a71e:	4618      	mov	r0, r3
9000a720:	f7fe fd5e 	bl	900091e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000a724:	69fb      	ldr	r3, [r7, #28]
9000a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a728:	e01f      	b.n	9000a76a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a72a:	4b2d      	ldr	r3, [pc, #180]	@ (9000a7e0 <UART_SetConfig+0xac0>)
9000a72c:	681b      	ldr	r3, [r3, #0]
9000a72e:	f003 0320 	and.w	r3, r3, #32
9000a732:	2b00      	cmp	r3, #0
9000a734:	d009      	beq.n	9000a74a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000a736:	4b2a      	ldr	r3, [pc, #168]	@ (9000a7e0 <UART_SetConfig+0xac0>)
9000a738:	681b      	ldr	r3, [r3, #0]
9000a73a:	08db      	lsrs	r3, r3, #3
9000a73c:	f003 0303 	and.w	r3, r3, #3
9000a740:	4a28      	ldr	r2, [pc, #160]	@ (9000a7e4 <UART_SetConfig+0xac4>)
9000a742:	fa22 f303 	lsr.w	r3, r2, r3
9000a746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000a748:	e00f      	b.n	9000a76a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000a74a:	4b26      	ldr	r3, [pc, #152]	@ (9000a7e4 <UART_SetConfig+0xac4>)
9000a74c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a74e:	e00c      	b.n	9000a76a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000a750:	4b25      	ldr	r3, [pc, #148]	@ (9000a7e8 <UART_SetConfig+0xac8>)
9000a752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a754:	e009      	b.n	9000a76a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000a756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
9000a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
9000a75c:	e005      	b.n	9000a76a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000a75e:	2300      	movs	r3, #0
9000a760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
9000a762:	2301      	movs	r3, #1
9000a764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
9000a768:	bf00      	nop
    }

    if (pclk != 0U)
9000a76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a76c:	2b00      	cmp	r3, #0
9000a76e:	d021      	beq.n	9000a7b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000a770:	697b      	ldr	r3, [r7, #20]
9000a772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000a774:	4a1d      	ldr	r2, [pc, #116]	@ (9000a7ec <UART_SetConfig+0xacc>)
9000a776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000a77a:	461a      	mov	r2, r3
9000a77c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a77e:	fbb3 f2f2 	udiv	r2, r3, r2
9000a782:	697b      	ldr	r3, [r7, #20]
9000a784:	685b      	ldr	r3, [r3, #4]
9000a786:	085b      	lsrs	r3, r3, #1
9000a788:	441a      	add	r2, r3
9000a78a:	697b      	ldr	r3, [r7, #20]
9000a78c:	685b      	ldr	r3, [r3, #4]
9000a78e:	fbb2 f3f3 	udiv	r3, r2, r3
9000a792:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000a794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a796:	2b0f      	cmp	r3, #15
9000a798:	d909      	bls.n	9000a7ae <UART_SetConfig+0xa8e>
9000a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a79c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
9000a7a0:	d205      	bcs.n	9000a7ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000a7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a7a4:	b29a      	uxth	r2, r3
9000a7a6:	697b      	ldr	r3, [r7, #20]
9000a7a8:	681b      	ldr	r3, [r3, #0]
9000a7aa:	60da      	str	r2, [r3, #12]
9000a7ac:	e002      	b.n	9000a7b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000a7ae:	2301      	movs	r3, #1
9000a7b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000a7b4:	697b      	ldr	r3, [r7, #20]
9000a7b6:	2201      	movs	r2, #1
9000a7b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
9000a7bc:	697b      	ldr	r3, [r7, #20]
9000a7be:	2201      	movs	r2, #1
9000a7c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000a7c4:	697b      	ldr	r3, [r7, #20]
9000a7c6:	2200      	movs	r2, #0
9000a7c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
9000a7ca:	697b      	ldr	r3, [r7, #20]
9000a7cc:	2200      	movs	r2, #0
9000a7ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
9000a7d0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
9000a7d4:	4618      	mov	r0, r3
9000a7d6:	3748      	adds	r7, #72	@ 0x48
9000a7d8:	46bd      	mov	sp, r7
9000a7da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000a7de:	bf00      	nop
9000a7e0:	58024400 	.word	0x58024400
9000a7e4:	03d09000 	.word	0x03d09000
9000a7e8:	003d0900 	.word	0x003d0900
9000a7ec:	9000d688 	.word	0x9000d688

9000a7f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000a7f0:	b480      	push	{r7}
9000a7f2:	b083      	sub	sp, #12
9000a7f4:	af00      	add	r7, sp, #0
9000a7f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000a7f8:	687b      	ldr	r3, [r7, #4]
9000a7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a7fc:	f003 0308 	and.w	r3, r3, #8
9000a800:	2b00      	cmp	r3, #0
9000a802:	d00a      	beq.n	9000a81a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000a804:	687b      	ldr	r3, [r7, #4]
9000a806:	681b      	ldr	r3, [r3, #0]
9000a808:	685b      	ldr	r3, [r3, #4]
9000a80a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
9000a80e:	687b      	ldr	r3, [r7, #4]
9000a810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
9000a812:	687b      	ldr	r3, [r7, #4]
9000a814:	681b      	ldr	r3, [r3, #0]
9000a816:	430a      	orrs	r2, r1
9000a818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000a81a:	687b      	ldr	r3, [r7, #4]
9000a81c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a81e:	f003 0301 	and.w	r3, r3, #1
9000a822:	2b00      	cmp	r3, #0
9000a824:	d00a      	beq.n	9000a83c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000a826:	687b      	ldr	r3, [r7, #4]
9000a828:	681b      	ldr	r3, [r3, #0]
9000a82a:	685b      	ldr	r3, [r3, #4]
9000a82c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
9000a830:	687b      	ldr	r3, [r7, #4]
9000a832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
9000a834:	687b      	ldr	r3, [r7, #4]
9000a836:	681b      	ldr	r3, [r3, #0]
9000a838:	430a      	orrs	r2, r1
9000a83a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000a83c:	687b      	ldr	r3, [r7, #4]
9000a83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a840:	f003 0302 	and.w	r3, r3, #2
9000a844:	2b00      	cmp	r3, #0
9000a846:	d00a      	beq.n	9000a85e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000a848:	687b      	ldr	r3, [r7, #4]
9000a84a:	681b      	ldr	r3, [r3, #0]
9000a84c:	685b      	ldr	r3, [r3, #4]
9000a84e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
9000a852:	687b      	ldr	r3, [r7, #4]
9000a854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
9000a856:	687b      	ldr	r3, [r7, #4]
9000a858:	681b      	ldr	r3, [r3, #0]
9000a85a:	430a      	orrs	r2, r1
9000a85c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000a85e:	687b      	ldr	r3, [r7, #4]
9000a860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a862:	f003 0304 	and.w	r3, r3, #4
9000a866:	2b00      	cmp	r3, #0
9000a868:	d00a      	beq.n	9000a880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000a86a:	687b      	ldr	r3, [r7, #4]
9000a86c:	681b      	ldr	r3, [r3, #0]
9000a86e:	685b      	ldr	r3, [r3, #4]
9000a870:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
9000a874:	687b      	ldr	r3, [r7, #4]
9000a876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
9000a878:	687b      	ldr	r3, [r7, #4]
9000a87a:	681b      	ldr	r3, [r3, #0]
9000a87c:	430a      	orrs	r2, r1
9000a87e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000a880:	687b      	ldr	r3, [r7, #4]
9000a882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a884:	f003 0310 	and.w	r3, r3, #16
9000a888:	2b00      	cmp	r3, #0
9000a88a:	d00a      	beq.n	9000a8a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000a88c:	687b      	ldr	r3, [r7, #4]
9000a88e:	681b      	ldr	r3, [r3, #0]
9000a890:	689b      	ldr	r3, [r3, #8]
9000a892:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
9000a896:	687b      	ldr	r3, [r7, #4]
9000a898:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
9000a89a:	687b      	ldr	r3, [r7, #4]
9000a89c:	681b      	ldr	r3, [r3, #0]
9000a89e:	430a      	orrs	r2, r1
9000a8a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000a8a2:	687b      	ldr	r3, [r7, #4]
9000a8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8a6:	f003 0320 	and.w	r3, r3, #32
9000a8aa:	2b00      	cmp	r3, #0
9000a8ac:	d00a      	beq.n	9000a8c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000a8ae:	687b      	ldr	r3, [r7, #4]
9000a8b0:	681b      	ldr	r3, [r3, #0]
9000a8b2:	689b      	ldr	r3, [r3, #8]
9000a8b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
9000a8b8:	687b      	ldr	r3, [r7, #4]
9000a8ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
9000a8bc:	687b      	ldr	r3, [r7, #4]
9000a8be:	681b      	ldr	r3, [r3, #0]
9000a8c0:	430a      	orrs	r2, r1
9000a8c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000a8c4:	687b      	ldr	r3, [r7, #4]
9000a8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a8c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000a8cc:	2b00      	cmp	r3, #0
9000a8ce:	d01a      	beq.n	9000a906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000a8d0:	687b      	ldr	r3, [r7, #4]
9000a8d2:	681b      	ldr	r3, [r3, #0]
9000a8d4:	685b      	ldr	r3, [r3, #4]
9000a8d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
9000a8da:	687b      	ldr	r3, [r7, #4]
9000a8dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
9000a8de:	687b      	ldr	r3, [r7, #4]
9000a8e0:	681b      	ldr	r3, [r3, #0]
9000a8e2:	430a      	orrs	r2, r1
9000a8e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000a8e6:	687b      	ldr	r3, [r7, #4]
9000a8e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
9000a8ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
9000a8ee:	d10a      	bne.n	9000a906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000a8f0:	687b      	ldr	r3, [r7, #4]
9000a8f2:	681b      	ldr	r3, [r3, #0]
9000a8f4:	685b      	ldr	r3, [r3, #4]
9000a8f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
9000a8fa:	687b      	ldr	r3, [r7, #4]
9000a8fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
9000a8fe:	687b      	ldr	r3, [r7, #4]
9000a900:	681b      	ldr	r3, [r3, #0]
9000a902:	430a      	orrs	r2, r1
9000a904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000a906:	687b      	ldr	r3, [r7, #4]
9000a908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000a90a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000a90e:	2b00      	cmp	r3, #0
9000a910:	d00a      	beq.n	9000a928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000a912:	687b      	ldr	r3, [r7, #4]
9000a914:	681b      	ldr	r3, [r3, #0]
9000a916:	685b      	ldr	r3, [r3, #4]
9000a918:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
9000a91c:	687b      	ldr	r3, [r7, #4]
9000a91e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
9000a920:	687b      	ldr	r3, [r7, #4]
9000a922:	681b      	ldr	r3, [r3, #0]
9000a924:	430a      	orrs	r2, r1
9000a926:	605a      	str	r2, [r3, #4]
  }
}
9000a928:	bf00      	nop
9000a92a:	370c      	adds	r7, #12
9000a92c:	46bd      	mov	sp, r7
9000a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a932:	4770      	bx	lr

9000a934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000a934:	b580      	push	{r7, lr}
9000a936:	b098      	sub	sp, #96	@ 0x60
9000a938:	af02      	add	r7, sp, #8
9000a93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000a93c:	687b      	ldr	r3, [r7, #4]
9000a93e:	2200      	movs	r2, #0
9000a940:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000a944:	f7f8 fc4a 	bl	900031dc <HAL_GetTick>
9000a948:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000a94a:	687b      	ldr	r3, [r7, #4]
9000a94c:	681b      	ldr	r3, [r3, #0]
9000a94e:	681b      	ldr	r3, [r3, #0]
9000a950:	f003 0308 	and.w	r3, r3, #8
9000a954:	2b08      	cmp	r3, #8
9000a956:	d12f      	bne.n	9000a9b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a958:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a95c:	9300      	str	r3, [sp, #0]
9000a95e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a960:	2200      	movs	r2, #0
9000a962:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
9000a966:	6878      	ldr	r0, [r7, #4]
9000a968:	f000 f88e 	bl	9000aa88 <UART_WaitOnFlagUntilTimeout>
9000a96c:	4603      	mov	r3, r0
9000a96e:	2b00      	cmp	r3, #0
9000a970:	d022      	beq.n	9000a9b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000a972:	687b      	ldr	r3, [r7, #4]
9000a974:	681b      	ldr	r3, [r3, #0]
9000a976:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000a97a:	e853 3f00 	ldrex	r3, [r3]
9000a97e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
9000a980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000a982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
9000a986:	653b      	str	r3, [r7, #80]	@ 0x50
9000a988:	687b      	ldr	r3, [r7, #4]
9000a98a:	681b      	ldr	r3, [r3, #0]
9000a98c:	461a      	mov	r2, r3
9000a98e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
9000a990:	647b      	str	r3, [r7, #68]	@ 0x44
9000a992:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000a994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
9000a996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
9000a998:	e841 2300 	strex	r3, r2, [r1]
9000a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
9000a99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000a9a0:	2b00      	cmp	r3, #0
9000a9a2:	d1e6      	bne.n	9000a972 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000a9a4:	687b      	ldr	r3, [r7, #4]
9000a9a6:	2220      	movs	r2, #32
9000a9a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
9000a9ac:	687b      	ldr	r3, [r7, #4]
9000a9ae:	2200      	movs	r2, #0
9000a9b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000a9b4:	2303      	movs	r3, #3
9000a9b6:	e063      	b.n	9000aa80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000a9b8:	687b      	ldr	r3, [r7, #4]
9000a9ba:	681b      	ldr	r3, [r3, #0]
9000a9bc:	681b      	ldr	r3, [r3, #0]
9000a9be:	f003 0304 	and.w	r3, r3, #4
9000a9c2:	2b04      	cmp	r3, #4
9000a9c4:	d149      	bne.n	9000aa5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000a9c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
9000a9ca:	9300      	str	r3, [sp, #0]
9000a9cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
9000a9ce:	2200      	movs	r2, #0
9000a9d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
9000a9d4:	6878      	ldr	r0, [r7, #4]
9000a9d6:	f000 f857 	bl	9000aa88 <UART_WaitOnFlagUntilTimeout>
9000a9da:	4603      	mov	r3, r0
9000a9dc:	2b00      	cmp	r3, #0
9000a9de:	d03c      	beq.n	9000aa5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000a9e0:	687b      	ldr	r3, [r7, #4]
9000a9e2:	681b      	ldr	r3, [r3, #0]
9000a9e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000a9e8:	e853 3f00 	ldrex	r3, [r3]
9000a9ec:	623b      	str	r3, [r7, #32]
   return(result);
9000a9ee:	6a3b      	ldr	r3, [r7, #32]
9000a9f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000a9f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000a9f6:	687b      	ldr	r3, [r7, #4]
9000a9f8:	681b      	ldr	r3, [r3, #0]
9000a9fa:	461a      	mov	r2, r3
9000a9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000a9fe:	633b      	str	r3, [r7, #48]	@ 0x30
9000aa00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
9000aa04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
9000aa06:	e841 2300 	strex	r3, r2, [r1]
9000aa0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
9000aa0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
9000aa0e:	2b00      	cmp	r3, #0
9000aa10:	d1e6      	bne.n	9000a9e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000aa12:	687b      	ldr	r3, [r7, #4]
9000aa14:	681b      	ldr	r3, [r3, #0]
9000aa16:	3308      	adds	r3, #8
9000aa18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aa1a:	693b      	ldr	r3, [r7, #16]
9000aa1c:	e853 3f00 	ldrex	r3, [r3]
9000aa20:	60fb      	str	r3, [r7, #12]
   return(result);
9000aa22:	68fb      	ldr	r3, [r7, #12]
9000aa24:	f023 0301 	bic.w	r3, r3, #1
9000aa28:	64bb      	str	r3, [r7, #72]	@ 0x48
9000aa2a:	687b      	ldr	r3, [r7, #4]
9000aa2c:	681b      	ldr	r3, [r3, #0]
9000aa2e:	3308      	adds	r3, #8
9000aa30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000aa32:	61fa      	str	r2, [r7, #28]
9000aa34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000aa36:	69b9      	ldr	r1, [r7, #24]
9000aa38:	69fa      	ldr	r2, [r7, #28]
9000aa3a:	e841 2300 	strex	r3, r2, [r1]
9000aa3e:	617b      	str	r3, [r7, #20]
   return(result);
9000aa40:	697b      	ldr	r3, [r7, #20]
9000aa42:	2b00      	cmp	r3, #0
9000aa44:	d1e5      	bne.n	9000aa12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000aa46:	687b      	ldr	r3, [r7, #4]
9000aa48:	2220      	movs	r2, #32
9000aa4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
9000aa4e:	687b      	ldr	r3, [r7, #4]
9000aa50:	2200      	movs	r2, #0
9000aa52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000aa56:	2303      	movs	r3, #3
9000aa58:	e012      	b.n	9000aa80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000aa5a:	687b      	ldr	r3, [r7, #4]
9000aa5c:	2220      	movs	r2, #32
9000aa5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000aa62:	687b      	ldr	r3, [r7, #4]
9000aa64:	2220      	movs	r2, #32
9000aa66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000aa6a:	687b      	ldr	r3, [r7, #4]
9000aa6c:	2200      	movs	r2, #0
9000aa6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
9000aa70:	687b      	ldr	r3, [r7, #4]
9000aa72:	2200      	movs	r2, #0
9000aa74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
9000aa76:	687b      	ldr	r3, [r7, #4]
9000aa78:	2200      	movs	r2, #0
9000aa7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000aa7e:	2300      	movs	r3, #0
}
9000aa80:	4618      	mov	r0, r3
9000aa82:	3758      	adds	r7, #88	@ 0x58
9000aa84:	46bd      	mov	sp, r7
9000aa86:	bd80      	pop	{r7, pc}

9000aa88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000aa88:	b580      	push	{r7, lr}
9000aa8a:	b084      	sub	sp, #16
9000aa8c:	af00      	add	r7, sp, #0
9000aa8e:	60f8      	str	r0, [r7, #12]
9000aa90:	60b9      	str	r1, [r7, #8]
9000aa92:	603b      	str	r3, [r7, #0]
9000aa94:	4613      	mov	r3, r2
9000aa96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000aa98:	e04f      	b.n	9000ab3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000aa9a:	69bb      	ldr	r3, [r7, #24]
9000aa9c:	f1b3 3fff 	cmp.w	r3, #4294967295
9000aaa0:	d04b      	beq.n	9000ab3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aaa2:	f7f8 fb9b 	bl	900031dc <HAL_GetTick>
9000aaa6:	4602      	mov	r2, r0
9000aaa8:	683b      	ldr	r3, [r7, #0]
9000aaaa:	1ad3      	subs	r3, r2, r3
9000aaac:	69ba      	ldr	r2, [r7, #24]
9000aaae:	429a      	cmp	r2, r3
9000aab0:	d302      	bcc.n	9000aab8 <UART_WaitOnFlagUntilTimeout+0x30>
9000aab2:	69bb      	ldr	r3, [r7, #24]
9000aab4:	2b00      	cmp	r3, #0
9000aab6:	d101      	bne.n	9000aabc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
9000aab8:	2303      	movs	r3, #3
9000aaba:	e04e      	b.n	9000ab5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
9000aabc:	68fb      	ldr	r3, [r7, #12]
9000aabe:	681b      	ldr	r3, [r3, #0]
9000aac0:	681b      	ldr	r3, [r3, #0]
9000aac2:	f003 0304 	and.w	r3, r3, #4
9000aac6:	2b00      	cmp	r3, #0
9000aac8:	d037      	beq.n	9000ab3a <UART_WaitOnFlagUntilTimeout+0xb2>
9000aaca:	68bb      	ldr	r3, [r7, #8]
9000aacc:	2b80      	cmp	r3, #128	@ 0x80
9000aace:	d034      	beq.n	9000ab3a <UART_WaitOnFlagUntilTimeout+0xb2>
9000aad0:	68bb      	ldr	r3, [r7, #8]
9000aad2:	2b40      	cmp	r3, #64	@ 0x40
9000aad4:	d031      	beq.n	9000ab3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000aad6:	68fb      	ldr	r3, [r7, #12]
9000aad8:	681b      	ldr	r3, [r3, #0]
9000aada:	69db      	ldr	r3, [r3, #28]
9000aadc:	f003 0308 	and.w	r3, r3, #8
9000aae0:	2b08      	cmp	r3, #8
9000aae2:	d110      	bne.n	9000ab06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000aae4:	68fb      	ldr	r3, [r7, #12]
9000aae6:	681b      	ldr	r3, [r3, #0]
9000aae8:	2208      	movs	r2, #8
9000aaea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000aaec:	68f8      	ldr	r0, [r7, #12]
9000aaee:	f000 f839 	bl	9000ab64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
9000aaf2:	68fb      	ldr	r3, [r7, #12]
9000aaf4:	2208      	movs	r2, #8
9000aaf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000aafa:	68fb      	ldr	r3, [r7, #12]
9000aafc:	2200      	movs	r2, #0
9000aafe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
9000ab02:	2301      	movs	r3, #1
9000ab04:	e029      	b.n	9000ab5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000ab06:	68fb      	ldr	r3, [r7, #12]
9000ab08:	681b      	ldr	r3, [r3, #0]
9000ab0a:	69db      	ldr	r3, [r3, #28]
9000ab0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
9000ab10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
9000ab14:	d111      	bne.n	9000ab3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000ab16:	68fb      	ldr	r3, [r7, #12]
9000ab18:	681b      	ldr	r3, [r3, #0]
9000ab1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
9000ab1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
9000ab20:	68f8      	ldr	r0, [r7, #12]
9000ab22:	f000 f81f 	bl	9000ab64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000ab26:	68fb      	ldr	r3, [r7, #12]
9000ab28:	2220      	movs	r2, #32
9000ab2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000ab2e:	68fb      	ldr	r3, [r7, #12]
9000ab30:	2200      	movs	r2, #0
9000ab32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
9000ab36:	2303      	movs	r3, #3
9000ab38:	e00f      	b.n	9000ab5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000ab3a:	68fb      	ldr	r3, [r7, #12]
9000ab3c:	681b      	ldr	r3, [r3, #0]
9000ab3e:	69da      	ldr	r2, [r3, #28]
9000ab40:	68bb      	ldr	r3, [r7, #8]
9000ab42:	4013      	ands	r3, r2
9000ab44:	68ba      	ldr	r2, [r7, #8]
9000ab46:	429a      	cmp	r2, r3
9000ab48:	bf0c      	ite	eq
9000ab4a:	2301      	moveq	r3, #1
9000ab4c:	2300      	movne	r3, #0
9000ab4e:	b2db      	uxtb	r3, r3
9000ab50:	461a      	mov	r2, r3
9000ab52:	79fb      	ldrb	r3, [r7, #7]
9000ab54:	429a      	cmp	r2, r3
9000ab56:	d0a0      	beq.n	9000aa9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000ab58:	2300      	movs	r3, #0
}
9000ab5a:	4618      	mov	r0, r3
9000ab5c:	3710      	adds	r7, #16
9000ab5e:	46bd      	mov	sp, r7
9000ab60:	bd80      	pop	{r7, pc}
	...

9000ab64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000ab64:	b480      	push	{r7}
9000ab66:	b095      	sub	sp, #84	@ 0x54
9000ab68:	af00      	add	r7, sp, #0
9000ab6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000ab6c:	687b      	ldr	r3, [r7, #4]
9000ab6e:	681b      	ldr	r3, [r3, #0]
9000ab70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000ab72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
9000ab74:	e853 3f00 	ldrex	r3, [r3]
9000ab78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
9000ab7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
9000ab7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
9000ab80:	64fb      	str	r3, [r7, #76]	@ 0x4c
9000ab82:	687b      	ldr	r3, [r7, #4]
9000ab84:	681b      	ldr	r3, [r3, #0]
9000ab86:	461a      	mov	r2, r3
9000ab88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
9000ab8a:	643b      	str	r3, [r7, #64]	@ 0x40
9000ab8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000ab8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
9000ab90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
9000ab92:	e841 2300 	strex	r3, r2, [r1]
9000ab96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
9000ab98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000ab9a:	2b00      	cmp	r3, #0
9000ab9c:	d1e6      	bne.n	9000ab6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000ab9e:	687b      	ldr	r3, [r7, #4]
9000aba0:	681b      	ldr	r3, [r3, #0]
9000aba2:	3308      	adds	r3, #8
9000aba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000aba6:	6a3b      	ldr	r3, [r7, #32]
9000aba8:	e853 3f00 	ldrex	r3, [r3]
9000abac:	61fb      	str	r3, [r7, #28]
   return(result);
9000abae:	69fa      	ldr	r2, [r7, #28]
9000abb0:	4b1e      	ldr	r3, [pc, #120]	@ (9000ac2c <UART_EndRxTransfer+0xc8>)
9000abb2:	4013      	ands	r3, r2
9000abb4:	64bb      	str	r3, [r7, #72]	@ 0x48
9000abb6:	687b      	ldr	r3, [r7, #4]
9000abb8:	681b      	ldr	r3, [r3, #0]
9000abba:	3308      	adds	r3, #8
9000abbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
9000abbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
9000abc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000abc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
9000abc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
9000abc6:	e841 2300 	strex	r3, r2, [r1]
9000abca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
9000abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000abce:	2b00      	cmp	r3, #0
9000abd0:	d1e5      	bne.n	9000ab9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000abd2:	687b      	ldr	r3, [r7, #4]
9000abd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
9000abd6:	2b01      	cmp	r3, #1
9000abd8:	d118      	bne.n	9000ac0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000abda:	687b      	ldr	r3, [r7, #4]
9000abdc:	681b      	ldr	r3, [r3, #0]
9000abde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000abe0:	68fb      	ldr	r3, [r7, #12]
9000abe2:	e853 3f00 	ldrex	r3, [r3]
9000abe6:	60bb      	str	r3, [r7, #8]
   return(result);
9000abe8:	68bb      	ldr	r3, [r7, #8]
9000abea:	f023 0310 	bic.w	r3, r3, #16
9000abee:	647b      	str	r3, [r7, #68]	@ 0x44
9000abf0:	687b      	ldr	r3, [r7, #4]
9000abf2:	681b      	ldr	r3, [r3, #0]
9000abf4:	461a      	mov	r2, r3
9000abf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
9000abf8:	61bb      	str	r3, [r7, #24]
9000abfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000abfc:	6979      	ldr	r1, [r7, #20]
9000abfe:	69ba      	ldr	r2, [r7, #24]
9000ac00:	e841 2300 	strex	r3, r2, [r1]
9000ac04:	613b      	str	r3, [r7, #16]
   return(result);
9000ac06:	693b      	ldr	r3, [r7, #16]
9000ac08:	2b00      	cmp	r3, #0
9000ac0a:	d1e6      	bne.n	9000abda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000ac0c:	687b      	ldr	r3, [r7, #4]
9000ac0e:	2220      	movs	r2, #32
9000ac10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000ac14:	687b      	ldr	r3, [r7, #4]
9000ac16:	2200      	movs	r2, #0
9000ac18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000ac1a:	687b      	ldr	r3, [r7, #4]
9000ac1c:	2200      	movs	r2, #0
9000ac1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
9000ac20:	bf00      	nop
9000ac22:	3754      	adds	r7, #84	@ 0x54
9000ac24:	46bd      	mov	sp, r7
9000ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ac2a:	4770      	bx	lr
9000ac2c:	effffffe 	.word	0xeffffffe

9000ac30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000ac30:	b480      	push	{r7}
9000ac32:	b085      	sub	sp, #20
9000ac34:	af00      	add	r7, sp, #0
9000ac36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ac38:	687b      	ldr	r3, [r7, #4]
9000ac3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ac3e:	2b01      	cmp	r3, #1
9000ac40:	d101      	bne.n	9000ac46 <HAL_UARTEx_DisableFifoMode+0x16>
9000ac42:	2302      	movs	r3, #2
9000ac44:	e027      	b.n	9000ac96 <HAL_UARTEx_DisableFifoMode+0x66>
9000ac46:	687b      	ldr	r3, [r7, #4]
9000ac48:	2201      	movs	r2, #1
9000ac4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ac4e:	687b      	ldr	r3, [r7, #4]
9000ac50:	2224      	movs	r2, #36	@ 0x24
9000ac52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ac56:	687b      	ldr	r3, [r7, #4]
9000ac58:	681b      	ldr	r3, [r3, #0]
9000ac5a:	681b      	ldr	r3, [r3, #0]
9000ac5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ac5e:	687b      	ldr	r3, [r7, #4]
9000ac60:	681b      	ldr	r3, [r3, #0]
9000ac62:	681a      	ldr	r2, [r3, #0]
9000ac64:	687b      	ldr	r3, [r7, #4]
9000ac66:	681b      	ldr	r3, [r3, #0]
9000ac68:	f022 0201 	bic.w	r2, r2, #1
9000ac6c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000ac6e:	68fb      	ldr	r3, [r7, #12]
9000ac70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
9000ac74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000ac76:	687b      	ldr	r3, [r7, #4]
9000ac78:	2200      	movs	r2, #0
9000ac7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ac7c:	687b      	ldr	r3, [r7, #4]
9000ac7e:	681b      	ldr	r3, [r3, #0]
9000ac80:	68fa      	ldr	r2, [r7, #12]
9000ac82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ac84:	687b      	ldr	r3, [r7, #4]
9000ac86:	2220      	movs	r2, #32
9000ac88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ac8c:	687b      	ldr	r3, [r7, #4]
9000ac8e:	2200      	movs	r2, #0
9000ac90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ac94:	2300      	movs	r3, #0
}
9000ac96:	4618      	mov	r0, r3
9000ac98:	3714      	adds	r7, #20
9000ac9a:	46bd      	mov	sp, r7
9000ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aca0:	4770      	bx	lr

9000aca2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000aca2:	b580      	push	{r7, lr}
9000aca4:	b084      	sub	sp, #16
9000aca6:	af00      	add	r7, sp, #0
9000aca8:	6078      	str	r0, [r7, #4]
9000acaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000acac:	687b      	ldr	r3, [r7, #4]
9000acae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000acb2:	2b01      	cmp	r3, #1
9000acb4:	d101      	bne.n	9000acba <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000acb6:	2302      	movs	r3, #2
9000acb8:	e02d      	b.n	9000ad16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000acba:	687b      	ldr	r3, [r7, #4]
9000acbc:	2201      	movs	r2, #1
9000acbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000acc2:	687b      	ldr	r3, [r7, #4]
9000acc4:	2224      	movs	r2, #36	@ 0x24
9000acc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000acca:	687b      	ldr	r3, [r7, #4]
9000accc:	681b      	ldr	r3, [r3, #0]
9000acce:	681b      	ldr	r3, [r3, #0]
9000acd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000acd2:	687b      	ldr	r3, [r7, #4]
9000acd4:	681b      	ldr	r3, [r3, #0]
9000acd6:	681a      	ldr	r2, [r3, #0]
9000acd8:	687b      	ldr	r3, [r7, #4]
9000acda:	681b      	ldr	r3, [r3, #0]
9000acdc:	f022 0201 	bic.w	r2, r2, #1
9000ace0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000ace2:	687b      	ldr	r3, [r7, #4]
9000ace4:	681b      	ldr	r3, [r3, #0]
9000ace6:	689b      	ldr	r3, [r3, #8]
9000ace8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
9000acec:	687b      	ldr	r3, [r7, #4]
9000acee:	681b      	ldr	r3, [r3, #0]
9000acf0:	683a      	ldr	r2, [r7, #0]
9000acf2:	430a      	orrs	r2, r1
9000acf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000acf6:	6878      	ldr	r0, [r7, #4]
9000acf8:	f000 f850 	bl	9000ad9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000acfc:	687b      	ldr	r3, [r7, #4]
9000acfe:	681b      	ldr	r3, [r3, #0]
9000ad00:	68fa      	ldr	r2, [r7, #12]
9000ad02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ad04:	687b      	ldr	r3, [r7, #4]
9000ad06:	2220      	movs	r2, #32
9000ad08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ad0c:	687b      	ldr	r3, [r7, #4]
9000ad0e:	2200      	movs	r2, #0
9000ad10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ad14:	2300      	movs	r3, #0
}
9000ad16:	4618      	mov	r0, r3
9000ad18:	3710      	adds	r7, #16
9000ad1a:	46bd      	mov	sp, r7
9000ad1c:	bd80      	pop	{r7, pc}

9000ad1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000ad1e:	b580      	push	{r7, lr}
9000ad20:	b084      	sub	sp, #16
9000ad22:	af00      	add	r7, sp, #0
9000ad24:	6078      	str	r0, [r7, #4]
9000ad26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000ad28:	687b      	ldr	r3, [r7, #4]
9000ad2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
9000ad2e:	2b01      	cmp	r3, #1
9000ad30:	d101      	bne.n	9000ad36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000ad32:	2302      	movs	r3, #2
9000ad34:	e02d      	b.n	9000ad92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000ad36:	687b      	ldr	r3, [r7, #4]
9000ad38:	2201      	movs	r2, #1
9000ad3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000ad3e:	687b      	ldr	r3, [r7, #4]
9000ad40:	2224      	movs	r2, #36	@ 0x24
9000ad42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000ad46:	687b      	ldr	r3, [r7, #4]
9000ad48:	681b      	ldr	r3, [r3, #0]
9000ad4a:	681b      	ldr	r3, [r3, #0]
9000ad4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000ad4e:	687b      	ldr	r3, [r7, #4]
9000ad50:	681b      	ldr	r3, [r3, #0]
9000ad52:	681a      	ldr	r2, [r3, #0]
9000ad54:	687b      	ldr	r3, [r7, #4]
9000ad56:	681b      	ldr	r3, [r3, #0]
9000ad58:	f022 0201 	bic.w	r2, r2, #1
9000ad5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000ad5e:	687b      	ldr	r3, [r7, #4]
9000ad60:	681b      	ldr	r3, [r3, #0]
9000ad62:	689b      	ldr	r3, [r3, #8]
9000ad64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
9000ad68:	687b      	ldr	r3, [r7, #4]
9000ad6a:	681b      	ldr	r3, [r3, #0]
9000ad6c:	683a      	ldr	r2, [r7, #0]
9000ad6e:	430a      	orrs	r2, r1
9000ad70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000ad72:	6878      	ldr	r0, [r7, #4]
9000ad74:	f000 f812 	bl	9000ad9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000ad78:	687b      	ldr	r3, [r7, #4]
9000ad7a:	681b      	ldr	r3, [r3, #0]
9000ad7c:	68fa      	ldr	r2, [r7, #12]
9000ad7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000ad80:	687b      	ldr	r3, [r7, #4]
9000ad82:	2220      	movs	r2, #32
9000ad84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000ad88:	687b      	ldr	r3, [r7, #4]
9000ad8a:	2200      	movs	r2, #0
9000ad8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
9000ad90:	2300      	movs	r3, #0
}
9000ad92:	4618      	mov	r0, r3
9000ad94:	3710      	adds	r7, #16
9000ad96:	46bd      	mov	sp, r7
9000ad98:	bd80      	pop	{r7, pc}
	...

9000ad9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000ad9c:	b480      	push	{r7}
9000ad9e:	b085      	sub	sp, #20
9000ada0:	af00      	add	r7, sp, #0
9000ada2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000ada4:	687b      	ldr	r3, [r7, #4]
9000ada6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
9000ada8:	2b00      	cmp	r3, #0
9000adaa:	d108      	bne.n	9000adbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000adac:	687b      	ldr	r3, [r7, #4]
9000adae:	2201      	movs	r2, #1
9000adb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
9000adb4:	687b      	ldr	r3, [r7, #4]
9000adb6:	2201      	movs	r2, #1
9000adb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000adbc:	e031      	b.n	9000ae22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000adbe:	2310      	movs	r3, #16
9000adc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000adc2:	2310      	movs	r3, #16
9000adc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000adc6:	687b      	ldr	r3, [r7, #4]
9000adc8:	681b      	ldr	r3, [r3, #0]
9000adca:	689b      	ldr	r3, [r3, #8]
9000adcc:	0e5b      	lsrs	r3, r3, #25
9000adce:	b2db      	uxtb	r3, r3
9000add0:	f003 0307 	and.w	r3, r3, #7
9000add4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000add6:	687b      	ldr	r3, [r7, #4]
9000add8:	681b      	ldr	r3, [r3, #0]
9000adda:	689b      	ldr	r3, [r3, #8]
9000addc:	0f5b      	lsrs	r3, r3, #29
9000adde:	b2db      	uxtb	r3, r3
9000ade0:	f003 0307 	and.w	r3, r3, #7
9000ade4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000ade6:	7bbb      	ldrb	r3, [r7, #14]
9000ade8:	7b3a      	ldrb	r2, [r7, #12]
9000adea:	4911      	ldr	r1, [pc, #68]	@ (9000ae30 <UARTEx_SetNbDataToProcess+0x94>)
9000adec:	5c8a      	ldrb	r2, [r1, r2]
9000adee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000adf2:	7b3a      	ldrb	r2, [r7, #12]
9000adf4:	490f      	ldr	r1, [pc, #60]	@ (9000ae34 <UARTEx_SetNbDataToProcess+0x98>)
9000adf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000adf8:	fb93 f3f2 	sdiv	r3, r3, r2
9000adfc:	b29a      	uxth	r2, r3
9000adfe:	687b      	ldr	r3, [r7, #4]
9000ae00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000ae04:	7bfb      	ldrb	r3, [r7, #15]
9000ae06:	7b7a      	ldrb	r2, [r7, #13]
9000ae08:	4909      	ldr	r1, [pc, #36]	@ (9000ae30 <UARTEx_SetNbDataToProcess+0x94>)
9000ae0a:	5c8a      	ldrb	r2, [r1, r2]
9000ae0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000ae10:	7b7a      	ldrb	r2, [r7, #13]
9000ae12:	4908      	ldr	r1, [pc, #32]	@ (9000ae34 <UARTEx_SetNbDataToProcess+0x98>)
9000ae14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000ae16:	fb93 f3f2 	sdiv	r3, r3, r2
9000ae1a:	b29a      	uxth	r2, r3
9000ae1c:	687b      	ldr	r3, [r7, #4]
9000ae1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
9000ae22:	bf00      	nop
9000ae24:	3714      	adds	r7, #20
9000ae26:	46bd      	mov	sp, r7
9000ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ae2c:	4770      	bx	lr
9000ae2e:	bf00      	nop
9000ae30:	9000d6a0 	.word	0x9000d6a0
9000ae34:	9000d6a8 	.word	0x9000d6a8

9000ae38 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
9000ae38:	b480      	push	{r7}
9000ae3a:	b083      	sub	sp, #12
9000ae3c:	af00      	add	r7, sp, #0
9000ae3e:	6078      	str	r0, [r7, #4]
9000ae40:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000ae42:	683b      	ldr	r3, [r7, #0]
9000ae44:	681b      	ldr	r3, [r3, #0]
9000ae46:	2b00      	cmp	r3, #0
9000ae48:	d121      	bne.n	9000ae8e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ae4a:	687b      	ldr	r3, [r7, #4]
9000ae4c:	681a      	ldr	r2, [r3, #0]
9000ae4e:	4b27      	ldr	r3, [pc, #156]	@ (9000aeec <FMC_SDRAM_Init+0xb4>)
9000ae50:	4013      	ands	r3, r2
9000ae52:	683a      	ldr	r2, [r7, #0]
9000ae54:	6851      	ldr	r1, [r2, #4]
9000ae56:	683a      	ldr	r2, [r7, #0]
9000ae58:	6892      	ldr	r2, [r2, #8]
9000ae5a:	4311      	orrs	r1, r2
9000ae5c:	683a      	ldr	r2, [r7, #0]
9000ae5e:	68d2      	ldr	r2, [r2, #12]
9000ae60:	4311      	orrs	r1, r2
9000ae62:	683a      	ldr	r2, [r7, #0]
9000ae64:	6912      	ldr	r2, [r2, #16]
9000ae66:	4311      	orrs	r1, r2
9000ae68:	683a      	ldr	r2, [r7, #0]
9000ae6a:	6952      	ldr	r2, [r2, #20]
9000ae6c:	4311      	orrs	r1, r2
9000ae6e:	683a      	ldr	r2, [r7, #0]
9000ae70:	6992      	ldr	r2, [r2, #24]
9000ae72:	4311      	orrs	r1, r2
9000ae74:	683a      	ldr	r2, [r7, #0]
9000ae76:	69d2      	ldr	r2, [r2, #28]
9000ae78:	4311      	orrs	r1, r2
9000ae7a:	683a      	ldr	r2, [r7, #0]
9000ae7c:	6a12      	ldr	r2, [r2, #32]
9000ae7e:	4311      	orrs	r1, r2
9000ae80:	683a      	ldr	r2, [r7, #0]
9000ae82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
9000ae84:	430a      	orrs	r2, r1
9000ae86:	431a      	orrs	r2, r3
9000ae88:	687b      	ldr	r3, [r7, #4]
9000ae8a:	601a      	str	r2, [r3, #0]
9000ae8c:	e026      	b.n	9000aedc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ae8e:	687b      	ldr	r3, [r7, #4]
9000ae90:	681b      	ldr	r3, [r3, #0]
9000ae92:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
9000ae96:	683b      	ldr	r3, [r7, #0]
9000ae98:	69d9      	ldr	r1, [r3, #28]
9000ae9a:	683b      	ldr	r3, [r7, #0]
9000ae9c:	6a1b      	ldr	r3, [r3, #32]
9000ae9e:	4319      	orrs	r1, r3
9000aea0:	683b      	ldr	r3, [r7, #0]
9000aea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000aea4:	430b      	orrs	r3, r1
9000aea6:	431a      	orrs	r2, r3
9000aea8:	687b      	ldr	r3, [r7, #4]
9000aeaa:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000aeac:	687b      	ldr	r3, [r7, #4]
9000aeae:	685a      	ldr	r2, [r3, #4]
9000aeb0:	4b0e      	ldr	r3, [pc, #56]	@ (9000aeec <FMC_SDRAM_Init+0xb4>)
9000aeb2:	4013      	ands	r3, r2
9000aeb4:	683a      	ldr	r2, [r7, #0]
9000aeb6:	6851      	ldr	r1, [r2, #4]
9000aeb8:	683a      	ldr	r2, [r7, #0]
9000aeba:	6892      	ldr	r2, [r2, #8]
9000aebc:	4311      	orrs	r1, r2
9000aebe:	683a      	ldr	r2, [r7, #0]
9000aec0:	68d2      	ldr	r2, [r2, #12]
9000aec2:	4311      	orrs	r1, r2
9000aec4:	683a      	ldr	r2, [r7, #0]
9000aec6:	6912      	ldr	r2, [r2, #16]
9000aec8:	4311      	orrs	r1, r2
9000aeca:	683a      	ldr	r2, [r7, #0]
9000aecc:	6952      	ldr	r2, [r2, #20]
9000aece:	4311      	orrs	r1, r2
9000aed0:	683a      	ldr	r2, [r7, #0]
9000aed2:	6992      	ldr	r2, [r2, #24]
9000aed4:	430a      	orrs	r2, r1
9000aed6:	431a      	orrs	r2, r3
9000aed8:	687b      	ldr	r3, [r7, #4]
9000aeda:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000aedc:	2300      	movs	r3, #0
}
9000aede:	4618      	mov	r0, r3
9000aee0:	370c      	adds	r7, #12
9000aee2:	46bd      	mov	sp, r7
9000aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aee8:	4770      	bx	lr
9000aeea:	bf00      	nop
9000aeec:	ffff8000 	.word	0xffff8000

9000aef0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000aef0:	b480      	push	{r7}
9000aef2:	b085      	sub	sp, #20
9000aef4:	af00      	add	r7, sp, #0
9000aef6:	60f8      	str	r0, [r7, #12]
9000aef8:	60b9      	str	r1, [r7, #8]
9000aefa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000aefc:	687b      	ldr	r3, [r7, #4]
9000aefe:	2b00      	cmp	r3, #0
9000af00:	d128      	bne.n	9000af54 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000af02:	68fb      	ldr	r3, [r7, #12]
9000af04:	689b      	ldr	r3, [r3, #8]
9000af06:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000af0a:	68bb      	ldr	r3, [r7, #8]
9000af0c:	681b      	ldr	r3, [r3, #0]
9000af0e:	1e59      	subs	r1, r3, #1
9000af10:	68bb      	ldr	r3, [r7, #8]
9000af12:	685b      	ldr	r3, [r3, #4]
9000af14:	3b01      	subs	r3, #1
9000af16:	011b      	lsls	r3, r3, #4
9000af18:	4319      	orrs	r1, r3
9000af1a:	68bb      	ldr	r3, [r7, #8]
9000af1c:	689b      	ldr	r3, [r3, #8]
9000af1e:	3b01      	subs	r3, #1
9000af20:	021b      	lsls	r3, r3, #8
9000af22:	4319      	orrs	r1, r3
9000af24:	68bb      	ldr	r3, [r7, #8]
9000af26:	68db      	ldr	r3, [r3, #12]
9000af28:	3b01      	subs	r3, #1
9000af2a:	031b      	lsls	r3, r3, #12
9000af2c:	4319      	orrs	r1, r3
9000af2e:	68bb      	ldr	r3, [r7, #8]
9000af30:	691b      	ldr	r3, [r3, #16]
9000af32:	3b01      	subs	r3, #1
9000af34:	041b      	lsls	r3, r3, #16
9000af36:	4319      	orrs	r1, r3
9000af38:	68bb      	ldr	r3, [r7, #8]
9000af3a:	695b      	ldr	r3, [r3, #20]
9000af3c:	3b01      	subs	r3, #1
9000af3e:	051b      	lsls	r3, r3, #20
9000af40:	4319      	orrs	r1, r3
9000af42:	68bb      	ldr	r3, [r7, #8]
9000af44:	699b      	ldr	r3, [r3, #24]
9000af46:	3b01      	subs	r3, #1
9000af48:	061b      	lsls	r3, r3, #24
9000af4a:	430b      	orrs	r3, r1
9000af4c:	431a      	orrs	r2, r3
9000af4e:	68fb      	ldr	r3, [r7, #12]
9000af50:	609a      	str	r2, [r3, #8]
9000af52:	e02d      	b.n	9000afb0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000af54:	68fb      	ldr	r3, [r7, #12]
9000af56:	689a      	ldr	r2, [r3, #8]
9000af58:	4b19      	ldr	r3, [pc, #100]	@ (9000afc0 <FMC_SDRAM_Timing_Init+0xd0>)
9000af5a:	4013      	ands	r3, r2
9000af5c:	68ba      	ldr	r2, [r7, #8]
9000af5e:	68d2      	ldr	r2, [r2, #12]
9000af60:	3a01      	subs	r2, #1
9000af62:	0311      	lsls	r1, r2, #12
9000af64:	68ba      	ldr	r2, [r7, #8]
9000af66:	6952      	ldr	r2, [r2, #20]
9000af68:	3a01      	subs	r2, #1
9000af6a:	0512      	lsls	r2, r2, #20
9000af6c:	430a      	orrs	r2, r1
9000af6e:	431a      	orrs	r2, r3
9000af70:	68fb      	ldr	r3, [r7, #12]
9000af72:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000af74:	68fb      	ldr	r3, [r7, #12]
9000af76:	68db      	ldr	r3, [r3, #12]
9000af78:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
9000af7c:	68bb      	ldr	r3, [r7, #8]
9000af7e:	681b      	ldr	r3, [r3, #0]
9000af80:	1e59      	subs	r1, r3, #1
9000af82:	68bb      	ldr	r3, [r7, #8]
9000af84:	685b      	ldr	r3, [r3, #4]
9000af86:	3b01      	subs	r3, #1
9000af88:	011b      	lsls	r3, r3, #4
9000af8a:	4319      	orrs	r1, r3
9000af8c:	68bb      	ldr	r3, [r7, #8]
9000af8e:	689b      	ldr	r3, [r3, #8]
9000af90:	3b01      	subs	r3, #1
9000af92:	021b      	lsls	r3, r3, #8
9000af94:	4319      	orrs	r1, r3
9000af96:	68bb      	ldr	r3, [r7, #8]
9000af98:	691b      	ldr	r3, [r3, #16]
9000af9a:	3b01      	subs	r3, #1
9000af9c:	041b      	lsls	r3, r3, #16
9000af9e:	4319      	orrs	r1, r3
9000afa0:	68bb      	ldr	r3, [r7, #8]
9000afa2:	699b      	ldr	r3, [r3, #24]
9000afa4:	3b01      	subs	r3, #1
9000afa6:	061b      	lsls	r3, r3, #24
9000afa8:	430b      	orrs	r3, r1
9000afaa:	431a      	orrs	r2, r3
9000afac:	68fb      	ldr	r3, [r7, #12]
9000afae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
9000afb0:	2300      	movs	r3, #0
}
9000afb2:	4618      	mov	r0, r3
9000afb4:	3714      	adds	r7, #20
9000afb6:	46bd      	mov	sp, r7
9000afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000afbc:	4770      	bx	lr
9000afbe:	bf00      	nop
9000afc0:	ff0f0fff 	.word	0xff0f0fff

9000afc4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000afc4:	b480      	push	{r7}
9000afc6:	b085      	sub	sp, #20
9000afc8:	af00      	add	r7, sp, #0
9000afca:	60f8      	str	r0, [r7, #12]
9000afcc:	60b9      	str	r1, [r7, #8]
9000afce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000afd0:	68fb      	ldr	r3, [r7, #12]
9000afd2:	691a      	ldr	r2, [r3, #16]
9000afd4:	4b0c      	ldr	r3, [pc, #48]	@ (9000b008 <FMC_SDRAM_SendCommand+0x44>)
9000afd6:	4013      	ands	r3, r2
9000afd8:	68ba      	ldr	r2, [r7, #8]
9000afda:	6811      	ldr	r1, [r2, #0]
9000afdc:	68ba      	ldr	r2, [r7, #8]
9000afde:	6852      	ldr	r2, [r2, #4]
9000afe0:	4311      	orrs	r1, r2
9000afe2:	68ba      	ldr	r2, [r7, #8]
9000afe4:	6892      	ldr	r2, [r2, #8]
9000afe6:	3a01      	subs	r2, #1
9000afe8:	0152      	lsls	r2, r2, #5
9000afea:	4311      	orrs	r1, r2
9000afec:	68ba      	ldr	r2, [r7, #8]
9000afee:	68d2      	ldr	r2, [r2, #12]
9000aff0:	0252      	lsls	r2, r2, #9
9000aff2:	430a      	orrs	r2, r1
9000aff4:	431a      	orrs	r2, r3
9000aff6:	68fb      	ldr	r3, [r7, #12]
9000aff8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000affa:	2300      	movs	r3, #0
}
9000affc:	4618      	mov	r0, r3
9000affe:	3714      	adds	r7, #20
9000b000:	46bd      	mov	sp, r7
9000b002:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b006:	4770      	bx	lr
9000b008:	ffc00000 	.word	0xffc00000

9000b00c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000b00c:	b480      	push	{r7}
9000b00e:	b083      	sub	sp, #12
9000b010:	af00      	add	r7, sp, #0
9000b012:	6078      	str	r0, [r7, #4]
9000b014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000b016:	687b      	ldr	r3, [r7, #4]
9000b018:	695a      	ldr	r2, [r3, #20]
9000b01a:	4b07      	ldr	r3, [pc, #28]	@ (9000b038 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000b01c:	4013      	ands	r3, r2
9000b01e:	683a      	ldr	r2, [r7, #0]
9000b020:	0052      	lsls	r2, r2, #1
9000b022:	431a      	orrs	r2, r3
9000b024:	687b      	ldr	r3, [r7, #4]
9000b026:	615a      	str	r2, [r3, #20]

  return HAL_OK;
9000b028:	2300      	movs	r3, #0
}
9000b02a:	4618      	mov	r0, r3
9000b02c:	370c      	adds	r7, #12
9000b02e:	46bd      	mov	sp, r7
9000b030:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b034:	4770      	bx	lr
9000b036:	bf00      	nop
9000b038:	ffffc001 	.word	0xffffc001

9000b03c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b03c:	b480      	push	{r7}
9000b03e:	b083      	sub	sp, #12
9000b040:	af00      	add	r7, sp, #0
9000b042:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000b044:	687b      	ldr	r3, [r7, #4]
9000b046:	689b      	ldr	r3, [r3, #8]
9000b048:	f043 0201 	orr.w	r2, r3, #1
9000b04c:	687b      	ldr	r3, [r7, #4]
9000b04e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b050:	2300      	movs	r3, #0
}
9000b052:	4618      	mov	r0, r3
9000b054:	370c      	adds	r7, #12
9000b056:	46bd      	mov	sp, r7
9000b058:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b05c:	4770      	bx	lr

9000b05e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000b05e:	b480      	push	{r7}
9000b060:	b083      	sub	sp, #12
9000b062:	af00      	add	r7, sp, #0
9000b064:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000b066:	687b      	ldr	r3, [r7, #4]
9000b068:	689b      	ldr	r3, [r3, #8]
9000b06a:	f023 0201 	bic.w	r2, r3, #1
9000b06e:	687b      	ldr	r3, [r7, #4]
9000b070:	609a      	str	r2, [r3, #8]
  return HAL_OK;
9000b072:	2300      	movs	r3, #0
}
9000b074:	4618      	mov	r0, r3
9000b076:	370c      	adds	r7, #12
9000b078:	46bd      	mov	sp, r7
9000b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b07e:	4770      	bx	lr

9000b080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
9000b080:	b480      	push	{r7}
9000b082:	b085      	sub	sp, #20
9000b084:	af00      	add	r7, sp, #0
9000b086:	6078      	str	r0, [r7, #4]
9000b088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
9000b08a:	2300      	movs	r3, #0
9000b08c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b08e:	68fb      	ldr	r3, [r7, #12]
9000b090:	3301      	adds	r3, #1
9000b092:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b094:	68fb      	ldr	r3, [r7, #12]
9000b096:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b09a:	d901      	bls.n	9000b0a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000b09c:	2303      	movs	r3, #3
9000b09e:	e01b      	b.n	9000b0d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b0a0:	687b      	ldr	r3, [r7, #4]
9000b0a2:	691b      	ldr	r3, [r3, #16]
9000b0a4:	2b00      	cmp	r3, #0
9000b0a6:	daf2      	bge.n	9000b08e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
9000b0a8:	2300      	movs	r3, #0
9000b0aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000b0ac:	683b      	ldr	r3, [r7, #0]
9000b0ae:	019b      	lsls	r3, r3, #6
9000b0b0:	f043 0220 	orr.w	r2, r3, #32
9000b0b4:	687b      	ldr	r3, [r7, #4]
9000b0b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b0b8:	68fb      	ldr	r3, [r7, #12]
9000b0ba:	3301      	adds	r3, #1
9000b0bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b0be:	68fb      	ldr	r3, [r7, #12]
9000b0c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b0c4:	d901      	bls.n	9000b0ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
9000b0c6:	2303      	movs	r3, #3
9000b0c8:	e006      	b.n	9000b0d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000b0ca:	687b      	ldr	r3, [r7, #4]
9000b0cc:	691b      	ldr	r3, [r3, #16]
9000b0ce:	f003 0320 	and.w	r3, r3, #32
9000b0d2:	2b20      	cmp	r3, #32
9000b0d4:	d0f0      	beq.n	9000b0b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
9000b0d6:	2300      	movs	r3, #0
}
9000b0d8:	4618      	mov	r0, r3
9000b0da:	3714      	adds	r7, #20
9000b0dc:	46bd      	mov	sp, r7
9000b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0e2:	4770      	bx	lr

9000b0e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
9000b0e4:	b480      	push	{r7}
9000b0e6:	b085      	sub	sp, #20
9000b0e8:	af00      	add	r7, sp, #0
9000b0ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
9000b0ec:	2300      	movs	r3, #0
9000b0ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
9000b0f0:	68fb      	ldr	r3, [r7, #12]
9000b0f2:	3301      	adds	r3, #1
9000b0f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b0f6:	68fb      	ldr	r3, [r7, #12]
9000b0f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b0fc:	d901      	bls.n	9000b102 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
9000b0fe:	2303      	movs	r3, #3
9000b100:	e018      	b.n	9000b134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
9000b102:	687b      	ldr	r3, [r7, #4]
9000b104:	691b      	ldr	r3, [r3, #16]
9000b106:	2b00      	cmp	r3, #0
9000b108:	daf2      	bge.n	9000b0f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000b10a:	2300      	movs	r3, #0
9000b10c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
9000b10e:	687b      	ldr	r3, [r7, #4]
9000b110:	2210      	movs	r2, #16
9000b112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
9000b114:	68fb      	ldr	r3, [r7, #12]
9000b116:	3301      	adds	r3, #1
9000b118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
9000b11a:	68fb      	ldr	r3, [r7, #12]
9000b11c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
9000b120:	d901      	bls.n	9000b126 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
9000b122:	2303      	movs	r3, #3
9000b124:	e006      	b.n	9000b134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000b126:	687b      	ldr	r3, [r7, #4]
9000b128:	691b      	ldr	r3, [r3, #16]
9000b12a:	f003 0310 	and.w	r3, r3, #16
9000b12e:	2b10      	cmp	r3, #16
9000b130:	d0f0      	beq.n	9000b114 <USB_FlushRxFifo+0x30>

  return HAL_OK;
9000b132:	2300      	movs	r3, #0
}
9000b134:	4618      	mov	r0, r3
9000b136:	3714      	adds	r7, #20
9000b138:	46bd      	mov	sp, r7
9000b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b13e:	4770      	bx	lr

9000b140 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
9000b140:	b480      	push	{r7}
9000b142:	b08b      	sub	sp, #44	@ 0x2c
9000b144:	af00      	add	r7, sp, #0
9000b146:	60f8      	str	r0, [r7, #12]
9000b148:	60b9      	str	r1, [r7, #8]
9000b14a:	4613      	mov	r3, r2
9000b14c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b14e:	68fb      	ldr	r3, [r7, #12]
9000b150:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
9000b152:	68bb      	ldr	r3, [r7, #8]
9000b154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
9000b156:	88fb      	ldrh	r3, [r7, #6]
9000b158:	089b      	lsrs	r3, r3, #2
9000b15a:	b29b      	uxth	r3, r3
9000b15c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
9000b15e:	88fb      	ldrh	r3, [r7, #6]
9000b160:	f003 0303 	and.w	r3, r3, #3
9000b164:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
9000b166:	2300      	movs	r3, #0
9000b168:	623b      	str	r3, [r7, #32]
9000b16a:	e014      	b.n	9000b196 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000b16c:	69bb      	ldr	r3, [r7, #24]
9000b16e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b172:	681a      	ldr	r2, [r3, #0]
9000b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b176:	601a      	str	r2, [r3, #0]
    pDest++;
9000b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b17a:	3301      	adds	r3, #1
9000b17c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b180:	3301      	adds	r3, #1
9000b182:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b186:	3301      	adds	r3, #1
9000b188:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
9000b18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b18c:	3301      	adds	r3, #1
9000b18e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
9000b190:	6a3b      	ldr	r3, [r7, #32]
9000b192:	3301      	adds	r3, #1
9000b194:	623b      	str	r3, [r7, #32]
9000b196:	6a3a      	ldr	r2, [r7, #32]
9000b198:	697b      	ldr	r3, [r7, #20]
9000b19a:	429a      	cmp	r2, r3
9000b19c:	d3e6      	bcc.n	9000b16c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
9000b19e:	8bfb      	ldrh	r3, [r7, #30]
9000b1a0:	2b00      	cmp	r3, #0
9000b1a2:	d01e      	beq.n	9000b1e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
9000b1a4:	2300      	movs	r3, #0
9000b1a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
9000b1a8:	69bb      	ldr	r3, [r7, #24]
9000b1aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
9000b1ae:	461a      	mov	r2, r3
9000b1b0:	f107 0310 	add.w	r3, r7, #16
9000b1b4:	6812      	ldr	r2, [r2, #0]
9000b1b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
9000b1b8:	693a      	ldr	r2, [r7, #16]
9000b1ba:	6a3b      	ldr	r3, [r7, #32]
9000b1bc:	b2db      	uxtb	r3, r3
9000b1be:	00db      	lsls	r3, r3, #3
9000b1c0:	fa22 f303 	lsr.w	r3, r2, r3
9000b1c4:	b2da      	uxtb	r2, r3
9000b1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1c8:	701a      	strb	r2, [r3, #0]
      i++;
9000b1ca:	6a3b      	ldr	r3, [r7, #32]
9000b1cc:	3301      	adds	r3, #1
9000b1ce:	623b      	str	r3, [r7, #32]
      pDest++;
9000b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000b1d2:	3301      	adds	r3, #1
9000b1d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
9000b1d6:	8bfb      	ldrh	r3, [r7, #30]
9000b1d8:	3b01      	subs	r3, #1
9000b1da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
9000b1dc:	8bfb      	ldrh	r3, [r7, #30]
9000b1de:	2b00      	cmp	r3, #0
9000b1e0:	d1ea      	bne.n	9000b1b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
9000b1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
9000b1e4:	4618      	mov	r0, r3
9000b1e6:	372c      	adds	r7, #44	@ 0x2c
9000b1e8:	46bd      	mov	sp, r7
9000b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b1ee:	4770      	bx	lr

9000b1f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
9000b1f0:	b480      	push	{r7}
9000b1f2:	b085      	sub	sp, #20
9000b1f4:	af00      	add	r7, sp, #0
9000b1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
9000b1f8:	687b      	ldr	r3, [r7, #4]
9000b1fa:	695b      	ldr	r3, [r3, #20]
9000b1fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
9000b1fe:	687b      	ldr	r3, [r7, #4]
9000b200:	699b      	ldr	r3, [r3, #24]
9000b202:	68fa      	ldr	r2, [r7, #12]
9000b204:	4013      	ands	r3, r2
9000b206:	60fb      	str	r3, [r7, #12]

  return tmpreg;
9000b208:	68fb      	ldr	r3, [r7, #12]
}
9000b20a:	4618      	mov	r0, r3
9000b20c:	3714      	adds	r7, #20
9000b20e:	46bd      	mov	sp, r7
9000b210:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b214:	4770      	bx	lr

9000b216 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
9000b216:	b480      	push	{r7}
9000b218:	b085      	sub	sp, #20
9000b21a:	af00      	add	r7, sp, #0
9000b21c:	6078      	str	r0, [r7, #4]
9000b21e:	460b      	mov	r3, r1
9000b220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b222:	687b      	ldr	r3, [r7, #4]
9000b224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
9000b226:	78fb      	ldrb	r3, [r7, #3]
9000b228:	015a      	lsls	r2, r3, #5
9000b22a:	68fb      	ldr	r3, [r7, #12]
9000b22c:	4413      	add	r3, r2
9000b22e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b232:	689b      	ldr	r3, [r3, #8]
9000b234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
9000b236:	78fb      	ldrb	r3, [r7, #3]
9000b238:	015a      	lsls	r2, r3, #5
9000b23a:	68fb      	ldr	r3, [r7, #12]
9000b23c:	4413      	add	r3, r2
9000b23e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b242:	68db      	ldr	r3, [r3, #12]
9000b244:	68ba      	ldr	r2, [r7, #8]
9000b246:	4013      	ands	r3, r2
9000b248:	60bb      	str	r3, [r7, #8]

  return tmpreg;
9000b24a:	68bb      	ldr	r3, [r7, #8]
}
9000b24c:	4618      	mov	r0, r3
9000b24e:	3714      	adds	r7, #20
9000b250:	46bd      	mov	sp, r7
9000b252:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b256:	4770      	bx	lr

9000b258 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
9000b258:	b480      	push	{r7}
9000b25a:	b083      	sub	sp, #12
9000b25c:	af00      	add	r7, sp, #0
9000b25e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
9000b260:	687b      	ldr	r3, [r7, #4]
9000b262:	695b      	ldr	r3, [r3, #20]
9000b264:	f003 0301 	and.w	r3, r3, #1
}
9000b268:	4618      	mov	r0, r3
9000b26a:	370c      	adds	r7, #12
9000b26c:	46bd      	mov	sp, r7
9000b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b272:	4770      	bx	lr

9000b274 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
9000b274:	b480      	push	{r7}
9000b276:	b085      	sub	sp, #20
9000b278:	af00      	add	r7, sp, #0
9000b27a:	6078      	str	r0, [r7, #4]
9000b27c:	460b      	mov	r3, r1
9000b27e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b280:	687b      	ldr	r3, [r7, #4]
9000b282:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000b284:	68fb      	ldr	r3, [r7, #12]
9000b286:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b28a:	681b      	ldr	r3, [r3, #0]
9000b28c:	68fa      	ldr	r2, [r7, #12]
9000b28e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
9000b292:	f023 0303 	bic.w	r3, r3, #3
9000b296:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000b298:	68fb      	ldr	r3, [r7, #12]
9000b29a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b29e:	681a      	ldr	r2, [r3, #0]
9000b2a0:	78fb      	ldrb	r3, [r7, #3]
9000b2a2:	f003 0303 	and.w	r3, r3, #3
9000b2a6:	68f9      	ldr	r1, [r7, #12]
9000b2a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
9000b2ac:	4313      	orrs	r3, r2
9000b2ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
9000b2b0:	78fb      	ldrb	r3, [r7, #3]
9000b2b2:	2b01      	cmp	r3, #1
9000b2b4:	d107      	bne.n	9000b2c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
9000b2b6:	68fb      	ldr	r3, [r7, #12]
9000b2b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b2bc:	461a      	mov	r2, r3
9000b2be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
9000b2c2:	6053      	str	r3, [r2, #4]
9000b2c4:	e00c      	b.n	9000b2e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
9000b2c6:	78fb      	ldrb	r3, [r7, #3]
9000b2c8:	2b02      	cmp	r3, #2
9000b2ca:	d107      	bne.n	9000b2dc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
9000b2cc:	68fb      	ldr	r3, [r7, #12]
9000b2ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b2d2:	461a      	mov	r2, r3
9000b2d4:	f241 7370 	movw	r3, #6000	@ 0x1770
9000b2d8:	6053      	str	r3, [r2, #4]
9000b2da:	e001      	b.n	9000b2e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
9000b2dc:	2301      	movs	r3, #1
9000b2de:	e000      	b.n	9000b2e2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
9000b2e0:	2300      	movs	r3, #0
}
9000b2e2:	4618      	mov	r0, r3
9000b2e4:	3714      	adds	r7, #20
9000b2e6:	46bd      	mov	sp, r7
9000b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2ec:	4770      	bx	lr

9000b2ee <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
9000b2ee:	b480      	push	{r7}
9000b2f0:	b085      	sub	sp, #20
9000b2f2:	af00      	add	r7, sp, #0
9000b2f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b2f6:	687b      	ldr	r3, [r7, #4]
9000b2f8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
9000b2fa:	68fb      	ldr	r3, [r7, #12]
9000b2fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b300:	695b      	ldr	r3, [r3, #20]
9000b302:	b29b      	uxth	r3, r3
}
9000b304:	4618      	mov	r0, r3
9000b306:	3714      	adds	r7, #20
9000b308:	46bd      	mov	sp, r7
9000b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b30e:	4770      	bx	lr

9000b310 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
9000b310:	b480      	push	{r7}
9000b312:	b089      	sub	sp, #36	@ 0x24
9000b314:	af00      	add	r7, sp, #0
9000b316:	6078      	str	r0, [r7, #4]
9000b318:	460b      	mov	r3, r1
9000b31a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b31c:	687b      	ldr	r3, [r7, #4]
9000b31e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
9000b320:	78fb      	ldrb	r3, [r7, #3]
9000b322:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
9000b324:	2300      	movs	r3, #0
9000b326:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000b328:	69bb      	ldr	r3, [r7, #24]
9000b32a:	015a      	lsls	r2, r3, #5
9000b32c:	69fb      	ldr	r3, [r7, #28]
9000b32e:	4413      	add	r3, r2
9000b330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b334:	681b      	ldr	r3, [r3, #0]
9000b336:	0c9b      	lsrs	r3, r3, #18
9000b338:	f003 0303 	and.w	r3, r3, #3
9000b33c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
9000b33e:	69bb      	ldr	r3, [r7, #24]
9000b340:	015a      	lsls	r2, r3, #5
9000b342:	69fb      	ldr	r3, [r7, #28]
9000b344:	4413      	add	r3, r2
9000b346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b34a:	681b      	ldr	r3, [r3, #0]
9000b34c:	0fdb      	lsrs	r3, r3, #31
9000b34e:	f003 0301 	and.w	r3, r3, #1
9000b352:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
9000b354:	69bb      	ldr	r3, [r7, #24]
9000b356:	015a      	lsls	r2, r3, #5
9000b358:	69fb      	ldr	r3, [r7, #28]
9000b35a:	4413      	add	r3, r2
9000b35c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b360:	685b      	ldr	r3, [r3, #4]
9000b362:	0fdb      	lsrs	r3, r3, #31
9000b364:	f003 0301 	and.w	r3, r3, #1
9000b368:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
9000b36a:	687b      	ldr	r3, [r7, #4]
9000b36c:	689b      	ldr	r3, [r3, #8]
9000b36e:	f003 0320 	and.w	r3, r3, #32
9000b372:	2b20      	cmp	r3, #32
9000b374:	d10d      	bne.n	9000b392 <USB_HC_Halt+0x82>
9000b376:	68fb      	ldr	r3, [r7, #12]
9000b378:	2b00      	cmp	r3, #0
9000b37a:	d10a      	bne.n	9000b392 <USB_HC_Halt+0x82>
9000b37c:	693b      	ldr	r3, [r7, #16]
9000b37e:	2b00      	cmp	r3, #0
9000b380:	d005      	beq.n	9000b38e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
9000b382:	697b      	ldr	r3, [r7, #20]
9000b384:	2b01      	cmp	r3, #1
9000b386:	d002      	beq.n	9000b38e <USB_HC_Halt+0x7e>
9000b388:	697b      	ldr	r3, [r7, #20]
9000b38a:	2b03      	cmp	r3, #3
9000b38c:	d101      	bne.n	9000b392 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
9000b38e:	2300      	movs	r3, #0
9000b390:	e0d8      	b.n	9000b544 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000b392:	697b      	ldr	r3, [r7, #20]
9000b394:	2b00      	cmp	r3, #0
9000b396:	d002      	beq.n	9000b39e <USB_HC_Halt+0x8e>
9000b398:	697b      	ldr	r3, [r7, #20]
9000b39a:	2b02      	cmp	r3, #2
9000b39c:	d173      	bne.n	9000b486 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b39e:	69bb      	ldr	r3, [r7, #24]
9000b3a0:	015a      	lsls	r2, r3, #5
9000b3a2:	69fb      	ldr	r3, [r7, #28]
9000b3a4:	4413      	add	r3, r2
9000b3a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3aa:	681b      	ldr	r3, [r3, #0]
9000b3ac:	69ba      	ldr	r2, [r7, #24]
9000b3ae:	0151      	lsls	r1, r2, #5
9000b3b0:	69fa      	ldr	r2, [r7, #28]
9000b3b2:	440a      	add	r2, r1
9000b3b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b3b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b3bc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b3be:	687b      	ldr	r3, [r7, #4]
9000b3c0:	689b      	ldr	r3, [r3, #8]
9000b3c2:	f003 0320 	and.w	r3, r3, #32
9000b3c6:	2b00      	cmp	r3, #0
9000b3c8:	d14a      	bne.n	9000b460 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000b3ca:	687b      	ldr	r3, [r7, #4]
9000b3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
9000b3ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b3d2:	2b00      	cmp	r3, #0
9000b3d4:	d133      	bne.n	9000b43e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b3d6:	69bb      	ldr	r3, [r7, #24]
9000b3d8:	015a      	lsls	r2, r3, #5
9000b3da:	69fb      	ldr	r3, [r7, #28]
9000b3dc:	4413      	add	r3, r2
9000b3de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b3e2:	681b      	ldr	r3, [r3, #0]
9000b3e4:	69ba      	ldr	r2, [r7, #24]
9000b3e6:	0151      	lsls	r1, r2, #5
9000b3e8:	69fa      	ldr	r2, [r7, #28]
9000b3ea:	440a      	add	r2, r1
9000b3ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b3f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b3f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b3f6:	69bb      	ldr	r3, [r7, #24]
9000b3f8:	015a      	lsls	r2, r3, #5
9000b3fa:	69fb      	ldr	r3, [r7, #28]
9000b3fc:	4413      	add	r3, r2
9000b3fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b402:	681b      	ldr	r3, [r3, #0]
9000b404:	69ba      	ldr	r2, [r7, #24]
9000b406:	0151      	lsls	r1, r2, #5
9000b408:	69fa      	ldr	r2, [r7, #28]
9000b40a:	440a      	add	r2, r1
9000b40c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b410:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b414:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
9000b416:	68bb      	ldr	r3, [r7, #8]
9000b418:	3301      	adds	r3, #1
9000b41a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
9000b41c:	68bb      	ldr	r3, [r7, #8]
9000b41e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b422:	d82e      	bhi.n	9000b482 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b424:	69bb      	ldr	r3, [r7, #24]
9000b426:	015a      	lsls	r2, r3, #5
9000b428:	69fb      	ldr	r3, [r7, #28]
9000b42a:	4413      	add	r3, r2
9000b42c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b430:	681b      	ldr	r3, [r3, #0]
9000b432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b43a:	d0ec      	beq.n	9000b416 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b43c:	e081      	b.n	9000b542 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b43e:	69bb      	ldr	r3, [r7, #24]
9000b440:	015a      	lsls	r2, r3, #5
9000b442:	69fb      	ldr	r3, [r7, #28]
9000b444:	4413      	add	r3, r2
9000b446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b44a:	681b      	ldr	r3, [r3, #0]
9000b44c:	69ba      	ldr	r2, [r7, #24]
9000b44e:	0151      	lsls	r1, r2, #5
9000b450:	69fa      	ldr	r2, [r7, #28]
9000b452:	440a      	add	r2, r1
9000b454:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b458:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b45c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b45e:	e070      	b.n	9000b542 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b460:	69bb      	ldr	r3, [r7, #24]
9000b462:	015a      	lsls	r2, r3, #5
9000b464:	69fb      	ldr	r3, [r7, #28]
9000b466:	4413      	add	r3, r2
9000b468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b46c:	681b      	ldr	r3, [r3, #0]
9000b46e:	69ba      	ldr	r2, [r7, #24]
9000b470:	0151      	lsls	r1, r2, #5
9000b472:	69fa      	ldr	r2, [r7, #28]
9000b474:	440a      	add	r2, r1
9000b476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b47a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b47e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b480:	e05f      	b.n	9000b542 <USB_HC_Halt+0x232>
            break;
9000b482:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
9000b484:	e05d      	b.n	9000b542 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000b486:	69bb      	ldr	r3, [r7, #24]
9000b488:	015a      	lsls	r2, r3, #5
9000b48a:	69fb      	ldr	r3, [r7, #28]
9000b48c:	4413      	add	r3, r2
9000b48e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b492:	681b      	ldr	r3, [r3, #0]
9000b494:	69ba      	ldr	r2, [r7, #24]
9000b496:	0151      	lsls	r1, r2, #5
9000b498:	69fa      	ldr	r2, [r7, #28]
9000b49a:	440a      	add	r2, r1
9000b49c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b4a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000b4a6:	69fb      	ldr	r3, [r7, #28]
9000b4a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b4ac:	691b      	ldr	r3, [r3, #16]
9000b4ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
9000b4b2:	2b00      	cmp	r3, #0
9000b4b4:	d133      	bne.n	9000b51e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000b4b6:	69bb      	ldr	r3, [r7, #24]
9000b4b8:	015a      	lsls	r2, r3, #5
9000b4ba:	69fb      	ldr	r3, [r7, #28]
9000b4bc:	4413      	add	r3, r2
9000b4be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4c2:	681b      	ldr	r3, [r3, #0]
9000b4c4:	69ba      	ldr	r2, [r7, #24]
9000b4c6:	0151      	lsls	r1, r2, #5
9000b4c8:	69fa      	ldr	r2, [r7, #28]
9000b4ca:	440a      	add	r2, r1
9000b4cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b4d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b4d6:	69bb      	ldr	r3, [r7, #24]
9000b4d8:	015a      	lsls	r2, r3, #5
9000b4da:	69fb      	ldr	r3, [r7, #28]
9000b4dc:	4413      	add	r3, r2
9000b4de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b4e2:	681b      	ldr	r3, [r3, #0]
9000b4e4:	69ba      	ldr	r2, [r7, #24]
9000b4e6:	0151      	lsls	r1, r2, #5
9000b4e8:	69fa      	ldr	r2, [r7, #28]
9000b4ea:	440a      	add	r2, r1
9000b4ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b4f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b4f4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
9000b4f6:	68bb      	ldr	r3, [r7, #8]
9000b4f8:	3301      	adds	r3, #1
9000b4fa:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
9000b4fc:	68bb      	ldr	r3, [r7, #8]
9000b4fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b502:	d81d      	bhi.n	9000b540 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b504:	69bb      	ldr	r3, [r7, #24]
9000b506:	015a      	lsls	r2, r3, #5
9000b508:	69fb      	ldr	r3, [r7, #28]
9000b50a:	4413      	add	r3, r2
9000b50c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b510:	681b      	ldr	r3, [r3, #0]
9000b512:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b516:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b51a:	d0ec      	beq.n	9000b4f6 <USB_HC_Halt+0x1e6>
9000b51c:	e011      	b.n	9000b542 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000b51e:	69bb      	ldr	r3, [r7, #24]
9000b520:	015a      	lsls	r2, r3, #5
9000b522:	69fb      	ldr	r3, [r7, #28]
9000b524:	4413      	add	r3, r2
9000b526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b52a:	681b      	ldr	r3, [r3, #0]
9000b52c:	69ba      	ldr	r2, [r7, #24]
9000b52e:	0151      	lsls	r1, r2, #5
9000b530:	69fa      	ldr	r2, [r7, #28]
9000b532:	440a      	add	r2, r1
9000b534:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
9000b538:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b53c:	6013      	str	r3, [r2, #0]
9000b53e:	e000      	b.n	9000b542 <USB_HC_Halt+0x232>
          break;
9000b540:	bf00      	nop
    }
  }

  return HAL_OK;
9000b542:	2300      	movs	r3, #0
}
9000b544:	4618      	mov	r0, r3
9000b546:	3724      	adds	r7, #36	@ 0x24
9000b548:	46bd      	mov	sp, r7
9000b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b54e:	4770      	bx	lr

9000b550 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
9000b550:	b580      	push	{r7, lr}
9000b552:	b088      	sub	sp, #32
9000b554:	af00      	add	r7, sp, #0
9000b556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
9000b558:	2300      	movs	r3, #0
9000b55a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
9000b55c:	687b      	ldr	r3, [r7, #4]
9000b55e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
9000b560:	2300      	movs	r3, #0
9000b562:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
9000b564:	6878      	ldr	r0, [r7, #4]
9000b566:	f7ff fd7a 	bl	9000b05e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
9000b56a:	2110      	movs	r1, #16
9000b56c:	6878      	ldr	r0, [r7, #4]
9000b56e:	f7ff fd87 	bl	9000b080 <USB_FlushTxFifo>
9000b572:	4603      	mov	r3, r0
9000b574:	2b00      	cmp	r3, #0
9000b576:	d001      	beq.n	9000b57c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
9000b578:	2301      	movs	r3, #1
9000b57a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
9000b57c:	6878      	ldr	r0, [r7, #4]
9000b57e:	f7ff fdb1 	bl	9000b0e4 <USB_FlushRxFifo>
9000b582:	4603      	mov	r3, r0
9000b584:	2b00      	cmp	r3, #0
9000b586:	d001      	beq.n	9000b58c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
9000b588:	2301      	movs	r3, #1
9000b58a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
9000b58c:	2300      	movs	r3, #0
9000b58e:	61bb      	str	r3, [r7, #24]
9000b590:	e01f      	b.n	9000b5d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
9000b592:	69bb      	ldr	r3, [r7, #24]
9000b594:	015a      	lsls	r2, r3, #5
9000b596:	697b      	ldr	r3, [r7, #20]
9000b598:	4413      	add	r3, r2
9000b59a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b59e:	681b      	ldr	r3, [r3, #0]
9000b5a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
9000b5a2:	693b      	ldr	r3, [r7, #16]
9000b5a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b5a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
9000b5aa:	693b      	ldr	r3, [r7, #16]
9000b5ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
9000b5b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b5b2:	693b      	ldr	r3, [r7, #16]
9000b5b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b5b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b5ba:	69bb      	ldr	r3, [r7, #24]
9000b5bc:	015a      	lsls	r2, r3, #5
9000b5be:	697b      	ldr	r3, [r7, #20]
9000b5c0:	4413      	add	r3, r2
9000b5c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5c6:	461a      	mov	r2, r3
9000b5c8:	693b      	ldr	r3, [r7, #16]
9000b5ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
9000b5cc:	69bb      	ldr	r3, [r7, #24]
9000b5ce:	3301      	adds	r3, #1
9000b5d0:	61bb      	str	r3, [r7, #24]
9000b5d2:	69bb      	ldr	r3, [r7, #24]
9000b5d4:	2b0f      	cmp	r3, #15
9000b5d6:	d9dc      	bls.n	9000b592 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
9000b5d8:	2300      	movs	r3, #0
9000b5da:	61bb      	str	r3, [r7, #24]
9000b5dc:	e034      	b.n	9000b648 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
9000b5de:	69bb      	ldr	r3, [r7, #24]
9000b5e0:	015a      	lsls	r2, r3, #5
9000b5e2:	697b      	ldr	r3, [r7, #20]
9000b5e4:	4413      	add	r3, r2
9000b5e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b5ea:	681b      	ldr	r3, [r3, #0]
9000b5ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
9000b5ee:	693b      	ldr	r3, [r7, #16]
9000b5f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
9000b5f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
9000b5f6:	693b      	ldr	r3, [r7, #16]
9000b5f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
9000b5fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000b5fe:	693b      	ldr	r3, [r7, #16]
9000b600:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
9000b604:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
9000b606:	69bb      	ldr	r3, [r7, #24]
9000b608:	015a      	lsls	r2, r3, #5
9000b60a:	697b      	ldr	r3, [r7, #20]
9000b60c:	4413      	add	r3, r2
9000b60e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b612:	461a      	mov	r2, r3
9000b614:	693b      	ldr	r3, [r7, #16]
9000b616:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
9000b618:	68fb      	ldr	r3, [r7, #12]
9000b61a:	3301      	adds	r3, #1
9000b61c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
9000b61e:	68fb      	ldr	r3, [r7, #12]
9000b620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
9000b624:	d80c      	bhi.n	9000b640 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000b626:	69bb      	ldr	r3, [r7, #24]
9000b628:	015a      	lsls	r2, r3, #5
9000b62a:	697b      	ldr	r3, [r7, #20]
9000b62c:	4413      	add	r3, r2
9000b62e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
9000b632:	681b      	ldr	r3, [r3, #0]
9000b634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
9000b638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
9000b63c:	d0ec      	beq.n	9000b618 <USB_StopHost+0xc8>
9000b63e:	e000      	b.n	9000b642 <USB_StopHost+0xf2>
        break;
9000b640:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
9000b642:	69bb      	ldr	r3, [r7, #24]
9000b644:	3301      	adds	r3, #1
9000b646:	61bb      	str	r3, [r7, #24]
9000b648:	69bb      	ldr	r3, [r7, #24]
9000b64a:	2b0f      	cmp	r3, #15
9000b64c:	d9c7      	bls.n	9000b5de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
9000b64e:	697b      	ldr	r3, [r7, #20]
9000b650:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
9000b654:	461a      	mov	r2, r3
9000b656:	f04f 33ff 	mov.w	r3, #4294967295
9000b65a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
9000b65c:	687b      	ldr	r3, [r7, #4]
9000b65e:	f04f 32ff 	mov.w	r2, #4294967295
9000b662:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
9000b664:	6878      	ldr	r0, [r7, #4]
9000b666:	f7ff fce9 	bl	9000b03c <USB_EnableGlobalInt>

  return ret;
9000b66a:	7ffb      	ldrb	r3, [r7, #31]
}
9000b66c:	4618      	mov	r0, r3
9000b66e:	3720      	adds	r7, #32
9000b670:	46bd      	mov	sp, r7
9000b672:	bd80      	pop	{r7, pc}

9000b674 <setAllRowsInactive>:
volatile int lastCol = -1;
volatile uint32_t lastTriggerTime = 0;
KeyboardButton receivedChar;

void setAllRowsInactive(void)
{
9000b674:	b580      	push	{r7, lr}
9000b676:	b082      	sub	sp, #8
9000b678:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_ROWS; i++) {
9000b67a:	2300      	movs	r3, #0
9000b67c:	607b      	str	r3, [r7, #4]
9000b67e:	e00f      	b.n	9000b6a0 <setAllRowsInactive+0x2c>
        HAL_GPIO_WritePin(rowPins[i].port, rowPins[i].pin, GPIO_PIN_RESET);
9000b680:	4a0b      	ldr	r2, [pc, #44]	@ (9000b6b0 <setAllRowsInactive+0x3c>)
9000b682:	687b      	ldr	r3, [r7, #4]
9000b684:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b688:	4a09      	ldr	r2, [pc, #36]	@ (9000b6b0 <setAllRowsInactive+0x3c>)
9000b68a:	687b      	ldr	r3, [r7, #4]
9000b68c:	00db      	lsls	r3, r3, #3
9000b68e:	4413      	add	r3, r2
9000b690:	889b      	ldrh	r3, [r3, #4]
9000b692:	2200      	movs	r2, #0
9000b694:	4619      	mov	r1, r3
9000b696:	f7f8 fc13 	bl	90003ec0 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ROWS; i++) {
9000b69a:	687b      	ldr	r3, [r7, #4]
9000b69c:	3301      	adds	r3, #1
9000b69e:	607b      	str	r3, [r7, #4]
9000b6a0:	687b      	ldr	r3, [r7, #4]
9000b6a2:	2b04      	cmp	r3, #4
9000b6a4:	ddec      	ble.n	9000b680 <setAllRowsInactive+0xc>
    }
}
9000b6a6:	bf00      	nop
9000b6a8:	bf00      	nop
9000b6aa:	3708      	adds	r7, #8
9000b6ac:	46bd      	mov	sp, r7
9000b6ae:	bd80      	pop	{r7, pc}
9000b6b0:	20000018 	.word	0x20000018

9000b6b4 <setRowActive>:

void setRowActive(int row)
{
9000b6b4:	b580      	push	{r7, lr}
9000b6b6:	b082      	sub	sp, #8
9000b6b8:	af00      	add	r7, sp, #0
9000b6ba:	6078      	str	r0, [r7, #4]
    if (row < 0 || row >= NUM_ROWS)
9000b6bc:	687b      	ldr	r3, [r7, #4]
9000b6be:	2b00      	cmp	r3, #0
9000b6c0:	db12      	blt.n	9000b6e8 <setRowActive+0x34>
9000b6c2:	687b      	ldr	r3, [r7, #4]
9000b6c4:	2b04      	cmp	r3, #4
9000b6c6:	dc0f      	bgt.n	9000b6e8 <setRowActive+0x34>
        return;

    setAllRowsInactive();
9000b6c8:	f7ff ffd4 	bl	9000b674 <setAllRowsInactive>
    HAL_GPIO_WritePin(rowPins[row].port, rowPins[row].pin, GPIO_PIN_SET);
9000b6cc:	4a08      	ldr	r2, [pc, #32]	@ (9000b6f0 <setRowActive+0x3c>)
9000b6ce:	687b      	ldr	r3, [r7, #4]
9000b6d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000b6d4:	4a06      	ldr	r2, [pc, #24]	@ (9000b6f0 <setRowActive+0x3c>)
9000b6d6:	687b      	ldr	r3, [r7, #4]
9000b6d8:	00db      	lsls	r3, r3, #3
9000b6da:	4413      	add	r3, r2
9000b6dc:	889b      	ldrh	r3, [r3, #4]
9000b6de:	2201      	movs	r2, #1
9000b6e0:	4619      	mov	r1, r3
9000b6e2:	f7f8 fbed 	bl	90003ec0 <HAL_GPIO_WritePin>
9000b6e6:	e000      	b.n	9000b6ea <setRowActive+0x36>
        return;
9000b6e8:	bf00      	nop
}
9000b6ea:	3708      	adds	r7, #8
9000b6ec:	46bd      	mov	sp, r7
9000b6ee:	bd80      	pop	{r7, pc}
9000b6f0:	20000018 	.word	0x20000018

9000b6f4 <ReadFlexiKeyboard>:

KeyboardButton ReadFlexiKeyboard(void)
{
9000b6f4:	b580      	push	{r7, lr}
9000b6f6:	b084      	sub	sp, #16
9000b6f8:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++)
9000b6fa:	2300      	movs	r3, #0
9000b6fc:	60fb      	str	r3, [r7, #12]
9000b6fe:	e055      	b.n	9000b7ac <ReadFlexiKeyboard+0xb8>
    {
        setRowActive(row);    // Set current row LOW, others HIGH
9000b700:	68f8      	ldr	r0, [r7, #12]
9000b702:	f7ff ffd7 	bl	9000b6b4 <setRowActive>
        HAL_Delay(10);         // Small delay for settling
9000b706:	200a      	movs	r0, #10
9000b708:	f7f7 fd74 	bl	900031f4 <HAL_Delay>

        for (int col = 0; col < NUM_COLS; col++)
9000b70c:	2300      	movs	r3, #0
9000b70e:	60bb      	str	r3, [r7, #8]
9000b710:	e046      	b.n	9000b7a0 <ReadFlexiKeyboard+0xac>
        {
            if (HAL_GPIO_ReadPin(colPins[col].port, colPins[col].pin) == GPIO_PIN_SET)
9000b712:	4a2a      	ldr	r2, [pc, #168]	@ (9000b7bc <ReadFlexiKeyboard+0xc8>)
9000b714:	68bb      	ldr	r3, [r7, #8]
9000b716:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
9000b71a:	4928      	ldr	r1, [pc, #160]	@ (9000b7bc <ReadFlexiKeyboard+0xc8>)
9000b71c:	68bb      	ldr	r3, [r7, #8]
9000b71e:	00db      	lsls	r3, r3, #3
9000b720:	440b      	add	r3, r1
9000b722:	889b      	ldrh	r3, [r3, #4]
9000b724:	4619      	mov	r1, r3
9000b726:	4610      	mov	r0, r2
9000b728:	f7f8 fbb2 	bl	90003e90 <HAL_GPIO_ReadPin>
9000b72c:	4603      	mov	r3, r0
9000b72e:	2b01      	cmp	r3, #1
9000b730:	d133      	bne.n	9000b79a <ReadFlexiKeyboard+0xa6>
            {
                uint32_t now = HAL_GetTick();
9000b732:	f7f7 fd53 	bl	900031dc <HAL_GetTick>
9000b736:	6078      	str	r0, [r7, #4]

                // Debounce/repeat suppression
                if (lastRow == row && lastCol == col && (now - lastTriggerTime < 300)) {
9000b738:	4b21      	ldr	r3, [pc, #132]	@ (9000b7c0 <ReadFlexiKeyboard+0xcc>)
9000b73a:	681b      	ldr	r3, [r3, #0]
9000b73c:	68fa      	ldr	r2, [r7, #12]
9000b73e:	429a      	cmp	r2, r3
9000b740:	d10d      	bne.n	9000b75e <ReadFlexiKeyboard+0x6a>
9000b742:	4b20      	ldr	r3, [pc, #128]	@ (9000b7c4 <ReadFlexiKeyboard+0xd0>)
9000b744:	681b      	ldr	r3, [r3, #0]
9000b746:	68ba      	ldr	r2, [r7, #8]
9000b748:	429a      	cmp	r2, r3
9000b74a:	d108      	bne.n	9000b75e <ReadFlexiKeyboard+0x6a>
9000b74c:	4b1e      	ldr	r3, [pc, #120]	@ (9000b7c8 <ReadFlexiKeyboard+0xd4>)
9000b74e:	681b      	ldr	r3, [r3, #0]
9000b750:	687a      	ldr	r2, [r7, #4]
9000b752:	1ad3      	subs	r3, r2, r3
9000b754:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
9000b758:	d201      	bcs.n	9000b75e <ReadFlexiKeyboard+0x6a>
                    return KEY_NULL;
9000b75a:	234e      	movs	r3, #78	@ 0x4e
9000b75c:	e02a      	b.n	9000b7b4 <ReadFlexiKeyboard+0xc0>
                }

                lastRow = row;
9000b75e:	4a18      	ldr	r2, [pc, #96]	@ (9000b7c0 <ReadFlexiKeyboard+0xcc>)
9000b760:	68fb      	ldr	r3, [r7, #12]
9000b762:	6013      	str	r3, [r2, #0]
                lastCol = col;
9000b764:	4a17      	ldr	r2, [pc, #92]	@ (9000b7c4 <ReadFlexiKeyboard+0xd0>)
9000b766:	68bb      	ldr	r3, [r7, #8]
9000b768:	6013      	str	r3, [r2, #0]
                lastTriggerTime = now;
9000b76a:	4a17      	ldr	r2, [pc, #92]	@ (9000b7c8 <ReadFlexiKeyboard+0xd4>)
9000b76c:	687b      	ldr	r3, [r7, #4]
9000b76e:	6013      	str	r3, [r2, #0]

                receivedChar = keymap[row][col];
9000b770:	4916      	ldr	r1, [pc, #88]	@ (9000b7cc <ReadFlexiKeyboard+0xd8>)
9000b772:	68fa      	ldr	r2, [r7, #12]
9000b774:	4613      	mov	r3, r2
9000b776:	009b      	lsls	r3, r3, #2
9000b778:	4413      	add	r3, r2
9000b77a:	18ca      	adds	r2, r1, r3
9000b77c:	68bb      	ldr	r3, [r7, #8]
9000b77e:	4413      	add	r3, r2
9000b780:	781a      	ldrb	r2, [r3, #0]
9000b782:	4b13      	ldr	r3, [pc, #76]	@ (9000b7d0 <ReadFlexiKeyboard+0xdc>)
9000b784:	701a      	strb	r2, [r3, #0]
                printf("Pressed row %d and col %d hopefully it is %c\r\n", row, col, receivedChar);
9000b786:	4b12      	ldr	r3, [pc, #72]	@ (9000b7d0 <ReadFlexiKeyboard+0xdc>)
9000b788:	781b      	ldrb	r3, [r3, #0]
9000b78a:	68ba      	ldr	r2, [r7, #8]
9000b78c:	68f9      	ldr	r1, [r7, #12]
9000b78e:	4811      	ldr	r0, [pc, #68]	@ (9000b7d4 <ReadFlexiKeyboard+0xe0>)
9000b790:	f000 fe5c 	bl	9000c44c <iprintf>
                return receivedChar;
9000b794:	4b0e      	ldr	r3, [pc, #56]	@ (9000b7d0 <ReadFlexiKeyboard+0xdc>)
9000b796:	781b      	ldrb	r3, [r3, #0]
9000b798:	e00c      	b.n	9000b7b4 <ReadFlexiKeyboard+0xc0>
        for (int col = 0; col < NUM_COLS; col++)
9000b79a:	68bb      	ldr	r3, [r7, #8]
9000b79c:	3301      	adds	r3, #1
9000b79e:	60bb      	str	r3, [r7, #8]
9000b7a0:	68bb      	ldr	r3, [r7, #8]
9000b7a2:	2b04      	cmp	r3, #4
9000b7a4:	ddb5      	ble.n	9000b712 <ReadFlexiKeyboard+0x1e>
    for (int row = 0; row < NUM_ROWS; row++)
9000b7a6:	68fb      	ldr	r3, [r7, #12]
9000b7a8:	3301      	adds	r3, #1
9000b7aa:	60fb      	str	r3, [r7, #12]
9000b7ac:	68fb      	ldr	r3, [r7, #12]
9000b7ae:	2b04      	cmp	r3, #4
9000b7b0:	dda6      	ble.n	9000b700 <ReadFlexiKeyboard+0xc>
            }
        }
    }
    return KEY_NULL;
9000b7b2:	234e      	movs	r3, #78	@ 0x4e
}
9000b7b4:	4618      	mov	r0, r3
9000b7b6:	3710      	adds	r7, #16
9000b7b8:	46bd      	mov	sp, r7
9000b7ba:	bd80      	pop	{r7, pc}
9000b7bc:	20000040 	.word	0x20000040
9000b7c0:	20000068 	.word	0x20000068
9000b7c4:	2000006c 	.word	0x2000006c
9000b7c8:	200012e0 	.word	0x200012e0
9000b7cc:	9000d6b0 	.word	0x9000d6b0
9000b7d0:	200012e4 	.word	0x200012e4
9000b7d4:	9000d590 	.word	0x9000d590

9000b7d8 <InitFlexiKeyboard>:

void InitFlexiKeyboard(void)
{
9000b7d8:	b580      	push	{r7, lr}
9000b7da:	b090      	sub	sp, #64	@ 0x40
9000b7dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000b7de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
9000b7e2:	2200      	movs	r2, #0
9000b7e4:	601a      	str	r2, [r3, #0]
9000b7e6:	605a      	str	r2, [r3, #4]
9000b7e8:	609a      	str	r2, [r3, #8]
9000b7ea:	60da      	str	r2, [r3, #12]
9000b7ec:	611a      	str	r2, [r3, #16]

	//we have to enable this CLK so that we can use output pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
9000b7ee:	4b5c      	ldr	r3, [pc, #368]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b7f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b7f4:	4a5a      	ldr	r2, [pc, #360]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b7f6:	f043 0301 	orr.w	r3, r3, #1
9000b7fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b7fe:	4b58      	ldr	r3, [pc, #352]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b804:	f003 0301 	and.w	r3, r3, #1
9000b808:	623b      	str	r3, [r7, #32]
9000b80a:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
9000b80c:	4b54      	ldr	r3, [pc, #336]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b80e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b812:	4a53      	ldr	r2, [pc, #332]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b814:	f043 0302 	orr.w	r3, r3, #2
9000b818:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b81c:	4b50      	ldr	r3, [pc, #320]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b81e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b822:	f003 0302 	and.w	r3, r3, #2
9000b826:	61fb      	str	r3, [r7, #28]
9000b828:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
9000b82a:	4b4d      	ldr	r3, [pc, #308]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b82c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b830:	4a4b      	ldr	r2, [pc, #300]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b832:	f043 0308 	orr.w	r3, r3, #8
9000b836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b83a:	4b49      	ldr	r3, [pc, #292]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b83c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b840:	f003 0308 	and.w	r3, r3, #8
9000b844:	61bb      	str	r3, [r7, #24]
9000b846:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000b848:	4b45      	ldr	r3, [pc, #276]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b84a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b84e:	4a44      	ldr	r2, [pc, #272]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b850:	f043 0310 	orr.w	r3, r3, #16
9000b854:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b858:	4b41      	ldr	r3, [pc, #260]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b85a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b85e:	f003 0310 	and.w	r3, r3, #16
9000b862:	617b      	str	r3, [r7, #20]
9000b864:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
9000b866:	4b3e      	ldr	r3, [pc, #248]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b86c:	4a3c      	ldr	r2, [pc, #240]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b86e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000b872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b876:	4b3a      	ldr	r3, [pc, #232]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b87c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
9000b880:	613b      	str	r3, [r7, #16]
9000b882:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
9000b884:	4b36      	ldr	r3, [pc, #216]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b88a:	4a35      	ldr	r2, [pc, #212]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b88c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000b890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b894:	4b32      	ldr	r3, [pc, #200]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
9000b89e:	60fb      	str	r3, [r7, #12]
9000b8a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
9000b8a2:	4b2f      	ldr	r3, [pc, #188]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b8a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8a8:	4a2d      	ldr	r2, [pc, #180]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b8aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
9000b8ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8b2:	4b2b      	ldr	r3, [pc, #172]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b8b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
9000b8bc:	60bb      	str	r3, [r7, #8]
9000b8be:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000b8c0:	4b27      	ldr	r3, [pc, #156]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b8c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8c6:	4a26      	ldr	r2, [pc, #152]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b8c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
9000b8cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
9000b8d0:	4b23      	ldr	r3, [pc, #140]	@ (9000b960 <InitFlexiKeyboard+0x188>)
9000b8d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
9000b8d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
9000b8da:	607b      	str	r3, [r7, #4]
9000b8dc:	687b      	ldr	r3, [r7, #4]


	// --- Configure row pins as OUTPUT ---
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000b8de:	2301      	movs	r3, #1
9000b8e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
9000b8e2:	2300      	movs	r3, #0
9000b8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000b8e6:	2300      	movs	r3, #0
9000b8e8:	633b      	str	r3, [r7, #48]	@ 0x30

	for (int i = 0; i < NUM_ROWS; i++) {
9000b8ea:	2300      	movs	r3, #0
9000b8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b8ee:	e012      	b.n	9000b916 <InitFlexiKeyboard+0x13e>
		GPIO_InitStruct.Pin = rowPins[i].pin;
9000b8f0:	4a1c      	ldr	r2, [pc, #112]	@ (9000b964 <InitFlexiKeyboard+0x18c>)
9000b8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b8f4:	00db      	lsls	r3, r3, #3
9000b8f6:	4413      	add	r3, r2
9000b8f8:	889b      	ldrh	r3, [r3, #4]
9000b8fa:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(rowPins[i].port, &GPIO_InitStruct);
9000b8fc:	4a19      	ldr	r2, [pc, #100]	@ (9000b964 <InitFlexiKeyboard+0x18c>)
9000b8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b904:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b908:	4611      	mov	r1, r2
9000b90a:	4618      	mov	r0, r3
9000b90c:	f7f8 f910 	bl	90003b30 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_ROWS; i++) {
9000b910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b912:	3301      	adds	r3, #1
9000b914:	63fb      	str	r3, [r7, #60]	@ 0x3c
9000b916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
9000b918:	2b04      	cmp	r3, #4
9000b91a:	dde9      	ble.n	9000b8f0 <InitFlexiKeyboard+0x118>
	}

	// --- Configure column pins as INPUT with PULL-DOWN ---
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000b91c:	2300      	movs	r3, #0
9000b91e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
9000b920:	2302      	movs	r3, #2
9000b922:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (int i = 0; i < NUM_COLS; i++) {
9000b924:	2300      	movs	r3, #0
9000b926:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b928:	e012      	b.n	9000b950 <InitFlexiKeyboard+0x178>
		GPIO_InitStruct.Pin = colPins[i].pin;
9000b92a:	4a0f      	ldr	r2, [pc, #60]	@ (9000b968 <InitFlexiKeyboard+0x190>)
9000b92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b92e:	00db      	lsls	r3, r3, #3
9000b930:	4413      	add	r3, r2
9000b932:	889b      	ldrh	r3, [r3, #4]
9000b934:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(colPins[i].port, &GPIO_InitStruct);
9000b936:	4a0c      	ldr	r2, [pc, #48]	@ (9000b968 <InitFlexiKeyboard+0x190>)
9000b938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b93a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000b93e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
9000b942:	4611      	mov	r1, r2
9000b944:	4618      	mov	r0, r3
9000b946:	f7f8 f8f3 	bl	90003b30 <HAL_GPIO_Init>
	for (int i = 0; i < NUM_COLS; i++) {
9000b94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b94c:	3301      	adds	r3, #1
9000b94e:	63bb      	str	r3, [r7, #56]	@ 0x38
9000b950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
9000b952:	2b04      	cmp	r3, #4
9000b954:	dde9      	ble.n	9000b92a <InitFlexiKeyboard+0x152>
	}
}
9000b956:	bf00      	nop
9000b958:	bf00      	nop
9000b95a:	3740      	adds	r7, #64	@ 0x40
9000b95c:	46bd      	mov	sp, r7
9000b95e:	bd80      	pop	{r7, pc}
9000b960:	58024400 	.word	0x58024400
9000b964:	20000018 	.word	0x20000018
9000b968:	20000040 	.word	0x20000040

9000b96c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
9000b96c:	b580      	push	{r7, lr}
9000b96e:	b082      	sub	sp, #8
9000b970:	af00      	add	r7, sp, #0
9000b972:	6078      	str	r0, [r7, #4]
  phost->Timer++;
9000b974:	687b      	ldr	r3, [r7, #4]
9000b976:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
9000b97a:	1c5a      	adds	r2, r3, #1
9000b97c:	687b      	ldr	r3, [r7, #4]
9000b97e:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
9000b982:	6878      	ldr	r0, [r7, #4]
9000b984:	f000 f804 	bl	9000b990 <USBH_HandleSof>
}
9000b988:	bf00      	nop
9000b98a:	3708      	adds	r7, #8
9000b98c:	46bd      	mov	sp, r7
9000b98e:	bd80      	pop	{r7, pc}

9000b990 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
9000b990:	b580      	push	{r7, lr}
9000b992:	b082      	sub	sp, #8
9000b994:	af00      	add	r7, sp, #0
9000b996:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
9000b998:	687b      	ldr	r3, [r7, #4]
9000b99a:	781b      	ldrb	r3, [r3, #0]
9000b99c:	b2db      	uxtb	r3, r3
9000b99e:	2b0b      	cmp	r3, #11
9000b9a0:	d10a      	bne.n	9000b9b8 <USBH_HandleSof+0x28>
9000b9a2:	687b      	ldr	r3, [r7, #4]
9000b9a4:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b9a8:	2b00      	cmp	r3, #0
9000b9aa:	d005      	beq.n	9000b9b8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
9000b9ac:	687b      	ldr	r3, [r7, #4]
9000b9ae:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
9000b9b2:	699b      	ldr	r3, [r3, #24]
9000b9b4:	6878      	ldr	r0, [r7, #4]
9000b9b6:	4798      	blx	r3
  }
}
9000b9b8:	bf00      	nop
9000b9ba:	3708      	adds	r7, #8
9000b9bc:	46bd      	mov	sp, r7
9000b9be:	bd80      	pop	{r7, pc}

9000b9c0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
9000b9c0:	b480      	push	{r7}
9000b9c2:	b083      	sub	sp, #12
9000b9c4:	af00      	add	r7, sp, #0
9000b9c6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
9000b9c8:	687b      	ldr	r3, [r7, #4]
9000b9ca:	2201      	movs	r2, #1
9000b9cc:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
9000b9d0:	bf00      	nop
}
9000b9d2:	370c      	adds	r7, #12
9000b9d4:	46bd      	mov	sp, r7
9000b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b9da:	4770      	bx	lr

9000b9dc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
9000b9dc:	b480      	push	{r7}
9000b9de:	b083      	sub	sp, #12
9000b9e0:	af00      	add	r7, sp, #0
9000b9e2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
9000b9e4:	687b      	ldr	r3, [r7, #4]
9000b9e6:	2200      	movs	r2, #0
9000b9e8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_disconnected = 1U;
9000b9ec:	687b      	ldr	r3, [r7, #4]
9000b9ee:	2201      	movs	r2, #1
9000b9f0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

  return;
9000b9f4:	bf00      	nop
}
9000b9f6:	370c      	adds	r7, #12
9000b9f8:	46bd      	mov	sp, r7
9000b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b9fe:	4770      	bx	lr

9000ba00 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
9000ba00:	b480      	push	{r7}
9000ba02:	b083      	sub	sp, #12
9000ba04:	af00      	add	r7, sp, #0
9000ba06:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
9000ba08:	687b      	ldr	r3, [r7, #4]
9000ba0a:	2201      	movs	r2, #1
9000ba0c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
9000ba10:	687b      	ldr	r3, [r7, #4]
9000ba12:	2200      	movs	r2, #0
9000ba14:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
9000ba18:	687b      	ldr	r3, [r7, #4]
9000ba1a:	2200      	movs	r2, #0
9000ba1c:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000ba20:	2300      	movs	r3, #0
}
9000ba22:	4618      	mov	r0, r3
9000ba24:	370c      	adds	r7, #12
9000ba26:	46bd      	mov	sp, r7
9000ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba2c:	4770      	bx	lr

9000ba2e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000ba2e:	b580      	push	{r7, lr}
9000ba30:	b082      	sub	sp, #8
9000ba32:	af00      	add	r7, sp, #0
9000ba34:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000ba36:	687b      	ldr	r3, [r7, #4]
9000ba38:	2201      	movs	r2, #1
9000ba3a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
9000ba3e:	687b      	ldr	r3, [r7, #4]
9000ba40:	2200      	movs	r2, #0
9000ba42:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
9000ba46:	687b      	ldr	r3, [r7, #4]
9000ba48:	2200      	movs	r2, #0
9000ba4a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
9000ba4e:	6878      	ldr	r0, [r7, #4]
9000ba50:	f7f5 fbae 	bl	900011b0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
9000ba54:	687b      	ldr	r3, [r7, #4]
9000ba56:	791b      	ldrb	r3, [r3, #4]
9000ba58:	4619      	mov	r1, r3
9000ba5a:	6878      	ldr	r0, [r7, #4]
9000ba5c:	f000 f80b 	bl	9000ba76 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
9000ba60:	687b      	ldr	r3, [r7, #4]
9000ba62:	795b      	ldrb	r3, [r3, #5]
9000ba64:	4619      	mov	r1, r3
9000ba66:	6878      	ldr	r0, [r7, #4]
9000ba68:	f000 f805 	bl	9000ba76 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
9000ba6c:	2300      	movs	r3, #0
}
9000ba6e:	4618      	mov	r0, r3
9000ba70:	3708      	adds	r7, #8
9000ba72:	46bd      	mov	sp, r7
9000ba74:	bd80      	pop	{r7, pc}

9000ba76 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
9000ba76:	b480      	push	{r7}
9000ba78:	b083      	sub	sp, #12
9000ba7a:	af00      	add	r7, sp, #0
9000ba7c:	6078      	str	r0, [r7, #4]
9000ba7e:	460b      	mov	r3, r1
9000ba80:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
9000ba82:	78fb      	ldrb	r3, [r7, #3]
9000ba84:	2b0f      	cmp	r3, #15
9000ba86:	d80f      	bhi.n	9000baa8 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
9000ba88:	78fb      	ldrb	r3, [r7, #3]
9000ba8a:	687a      	ldr	r2, [r7, #4]
9000ba8c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000ba90:	009b      	lsls	r3, r3, #2
9000ba92:	4413      	add	r3, r2
9000ba94:	685a      	ldr	r2, [r3, #4]
9000ba96:	78fb      	ldrb	r3, [r7, #3]
9000ba98:	f3c2 020e 	ubfx	r2, r2, #0, #15
9000ba9c:	6879      	ldr	r1, [r7, #4]
9000ba9e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
9000baa2:	009b      	lsls	r3, r3, #2
9000baa4:	440b      	add	r3, r1
9000baa6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
9000baa8:	2300      	movs	r3, #0
}
9000baaa:	4618      	mov	r0, r3
9000baac:	370c      	adds	r7, #12
9000baae:	46bd      	mov	sp, r7
9000bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bab4:	4770      	bx	lr
	...

9000bab8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000bab8:	b580      	push	{r7, lr}
9000baba:	b082      	sub	sp, #8
9000babc:	af00      	add	r7, sp, #0
9000babe:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000bac0:	687b      	ldr	r3, [r7, #4]
9000bac2:	681b      	ldr	r3, [r3, #0]
9000bac4:	4a22      	ldr	r2, [pc, #136]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bac6:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000bac8:	687b      	ldr	r3, [r7, #4]
9000baca:	685b      	ldr	r3, [r3, #4]
9000bacc:	4a20      	ldr	r2, [pc, #128]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bace:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000bad0:	687b      	ldr	r3, [r7, #4]
9000bad2:	689b      	ldr	r3, [r3, #8]
9000bad4:	4a1e      	ldr	r2, [pc, #120]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bad6:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000bad8:	687b      	ldr	r3, [r7, #4]
9000bada:	68db      	ldr	r3, [r3, #12]
9000badc:	4a1c      	ldr	r2, [pc, #112]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bade:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000bae0:	687b      	ldr	r3, [r7, #4]
9000bae2:	691b      	ldr	r3, [r3, #16]
9000bae4:	4a1a      	ldr	r2, [pc, #104]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bae6:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000bae8:	687b      	ldr	r3, [r7, #4]
9000baea:	695b      	ldr	r3, [r3, #20]
9000baec:	4a18      	ldr	r2, [pc, #96]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000baee:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000baf0:	687b      	ldr	r3, [r7, #4]
9000baf2:	699b      	ldr	r3, [r3, #24]
9000baf4:	4a16      	ldr	r2, [pc, #88]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000baf6:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000baf8:	687b      	ldr	r3, [r7, #4]
9000bafa:	69db      	ldr	r3, [r3, #28]
9000bafc:	4a14      	ldr	r2, [pc, #80]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bafe:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000bb00:	687b      	ldr	r3, [r7, #4]
9000bb02:	6a1b      	ldr	r3, [r3, #32]
9000bb04:	4a12      	ldr	r2, [pc, #72]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb06:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000bb08:	687b      	ldr	r3, [r7, #4]
9000bb0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bb0c:	4a10      	ldr	r2, [pc, #64]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb0e:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000bb10:	687b      	ldr	r3, [r7, #4]
9000bb12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bb14:	4a0e      	ldr	r2, [pc, #56]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb16:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
9000bb18:	4b0e      	ldr	r3, [pc, #56]	@ (9000bb54 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bb1a:	2200      	movs	r2, #0
9000bb1c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000bb1e:	4b0d      	ldr	r3, [pc, #52]	@ (9000bb54 <UTIL_LCD_SetFuncDriver+0x9c>)
9000bb20:	2200      	movs	r2, #0
9000bb22:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000bb24:	4b0a      	ldr	r3, [pc, #40]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb26:	69db      	ldr	r3, [r3, #28]
9000bb28:	4a0b      	ldr	r2, [pc, #44]	@ (9000bb58 <UTIL_LCD_SetFuncDriver+0xa0>)
9000bb2a:	4611      	mov	r1, r2
9000bb2c:	2000      	movs	r0, #0
9000bb2e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000bb30:	4b07      	ldr	r3, [pc, #28]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb32:	6a1b      	ldr	r3, [r3, #32]
9000bb34:	4a09      	ldr	r2, [pc, #36]	@ (9000bb5c <UTIL_LCD_SetFuncDriver+0xa4>)
9000bb36:	4611      	mov	r1, r2
9000bb38:	2000      	movs	r0, #0
9000bb3a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000bb3c:	4b04      	ldr	r3, [pc, #16]	@ (9000bb50 <UTIL_LCD_SetFuncDriver+0x98>)
9000bb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
9000bb40:	4a07      	ldr	r2, [pc, #28]	@ (9000bb60 <UTIL_LCD_SetFuncDriver+0xa8>)
9000bb42:	4611      	mov	r1, r2
9000bb44:	2000      	movs	r0, #0
9000bb46:	4798      	blx	r3
}
9000bb48:	bf00      	nop
9000bb4a:	3708      	adds	r7, #8
9000bb4c:	46bd      	mov	sp, r7
9000bb4e:	bd80      	pop	{r7, pc}
9000bb50:	20001328 	.word	0x20001328
9000bb54:	200012e8 	.word	0x200012e8
9000bb58:	200012fc 	.word	0x200012fc
9000bb5c:	20001300 	.word	0x20001300
9000bb60:	20001304 	.word	0x20001304

9000bb64 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000bb64:	b580      	push	{r7, lr}
9000bb66:	b082      	sub	sp, #8
9000bb68:	af00      	add	r7, sp, #0
9000bb6a:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000bb6c:	4b0a      	ldr	r3, [pc, #40]	@ (9000bb98 <UTIL_LCD_SetLayer+0x34>)
9000bb6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bb70:	2b00      	cmp	r3, #0
9000bb72:	d00c      	beq.n	9000bb8e <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000bb74:	4b08      	ldr	r3, [pc, #32]	@ (9000bb98 <UTIL_LCD_SetLayer+0x34>)
9000bb76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
9000bb78:	4a08      	ldr	r2, [pc, #32]	@ (9000bb9c <UTIL_LCD_SetLayer+0x38>)
9000bb7a:	6912      	ldr	r2, [r2, #16]
9000bb7c:	6879      	ldr	r1, [r7, #4]
9000bb7e:	4610      	mov	r0, r2
9000bb80:	4798      	blx	r3
9000bb82:	4603      	mov	r3, r0
9000bb84:	2b00      	cmp	r3, #0
9000bb86:	d102      	bne.n	9000bb8e <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000bb88:	4a04      	ldr	r2, [pc, #16]	@ (9000bb9c <UTIL_LCD_SetLayer+0x38>)
9000bb8a:	687b      	ldr	r3, [r7, #4]
9000bb8c:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000bb8e:	bf00      	nop
9000bb90:	3708      	adds	r7, #8
9000bb92:	46bd      	mov	sp, r7
9000bb94:	bd80      	pop	{r7, pc}
9000bb96:	bf00      	nop
9000bb98:	20001328 	.word	0x20001328
9000bb9c:	200012e8 	.word	0x200012e8

9000bba0 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000bba0:	b480      	push	{r7}
9000bba2:	b083      	sub	sp, #12
9000bba4:	af00      	add	r7, sp, #0
9000bba6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000bba8:	4b06      	ldr	r3, [pc, #24]	@ (9000bbc4 <UTIL_LCD_SetTextColor+0x24>)
9000bbaa:	68db      	ldr	r3, [r3, #12]
9000bbac:	4a05      	ldr	r2, [pc, #20]	@ (9000bbc4 <UTIL_LCD_SetTextColor+0x24>)
9000bbae:	015b      	lsls	r3, r3, #5
9000bbb0:	4413      	add	r3, r2
9000bbb2:	687a      	ldr	r2, [r7, #4]
9000bbb4:	601a      	str	r2, [r3, #0]
}
9000bbb6:	bf00      	nop
9000bbb8:	370c      	adds	r7, #12
9000bbba:	46bd      	mov	sp, r7
9000bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bbc0:	4770      	bx	lr
9000bbc2:	bf00      	nop
9000bbc4:	200012e8 	.word	0x200012e8

9000bbc8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000bbc8:	b480      	push	{r7}
9000bbca:	b083      	sub	sp, #12
9000bbcc:	af00      	add	r7, sp, #0
9000bbce:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000bbd0:	4b06      	ldr	r3, [pc, #24]	@ (9000bbec <UTIL_LCD_SetBackColor+0x24>)
9000bbd2:	68db      	ldr	r3, [r3, #12]
9000bbd4:	4a05      	ldr	r2, [pc, #20]	@ (9000bbec <UTIL_LCD_SetBackColor+0x24>)
9000bbd6:	015b      	lsls	r3, r3, #5
9000bbd8:	4413      	add	r3, r2
9000bbda:	3304      	adds	r3, #4
9000bbdc:	687a      	ldr	r2, [r7, #4]
9000bbde:	601a      	str	r2, [r3, #0]
}
9000bbe0:	bf00      	nop
9000bbe2:	370c      	adds	r7, #12
9000bbe4:	46bd      	mov	sp, r7
9000bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bbea:	4770      	bx	lr
9000bbec:	200012e8 	.word	0x200012e8

9000bbf0 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000bbf0:	b480      	push	{r7}
9000bbf2:	b083      	sub	sp, #12
9000bbf4:	af00      	add	r7, sp, #0
9000bbf6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000bbf8:	4b06      	ldr	r3, [pc, #24]	@ (9000bc14 <UTIL_LCD_SetFont+0x24>)
9000bbfa:	68db      	ldr	r3, [r3, #12]
9000bbfc:	4a05      	ldr	r2, [pc, #20]	@ (9000bc14 <UTIL_LCD_SetFont+0x24>)
9000bbfe:	015b      	lsls	r3, r3, #5
9000bc00:	4413      	add	r3, r2
9000bc02:	3308      	adds	r3, #8
9000bc04:	687a      	ldr	r2, [r7, #4]
9000bc06:	601a      	str	r2, [r3, #0]
}
9000bc08:	bf00      	nop
9000bc0a:	370c      	adds	r7, #12
9000bc0c:	46bd      	mov	sp, r7
9000bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc12:	4770      	bx	lr
9000bc14:	200012e8 	.word	0x200012e8

9000bc18 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000bc18:	b590      	push	{r4, r7, lr}
9000bc1a:	b087      	sub	sp, #28
9000bc1c:	af02      	add	r7, sp, #8
9000bc1e:	60f8      	str	r0, [r7, #12]
9000bc20:	60b9      	str	r1, [r7, #8]
9000bc22:	607a      	str	r2, [r7, #4]
9000bc24:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000bc26:	4b08      	ldr	r3, [pc, #32]	@ (9000bc48 <UTIL_LCD_FillRGBRect+0x30>)
9000bc28:	685c      	ldr	r4, [r3, #4]
9000bc2a:	4b08      	ldr	r3, [pc, #32]	@ (9000bc4c <UTIL_LCD_FillRGBRect+0x34>)
9000bc2c:	6918      	ldr	r0, [r3, #16]
9000bc2e:	6a3b      	ldr	r3, [r7, #32]
9000bc30:	9301      	str	r3, [sp, #4]
9000bc32:	683b      	ldr	r3, [r7, #0]
9000bc34:	9300      	str	r3, [sp, #0]
9000bc36:	687b      	ldr	r3, [r7, #4]
9000bc38:	68ba      	ldr	r2, [r7, #8]
9000bc3a:	68f9      	ldr	r1, [r7, #12]
9000bc3c:	47a0      	blx	r4
}
9000bc3e:	bf00      	nop
9000bc40:	3714      	adds	r7, #20
9000bc42:	46bd      	mov	sp, r7
9000bc44:	bd90      	pop	{r4, r7, pc}
9000bc46:	bf00      	nop
9000bc48:	20001328 	.word	0x20001328
9000bc4c:	200012e8 	.word	0x200012e8

9000bc50 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000bc50:	b580      	push	{r7, lr}
9000bc52:	b084      	sub	sp, #16
9000bc54:	af02      	add	r7, sp, #8
9000bc56:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000bc58:	4b07      	ldr	r3, [pc, #28]	@ (9000bc78 <UTIL_LCD_Clear+0x28>)
9000bc5a:	695a      	ldr	r2, [r3, #20]
9000bc5c:	4b06      	ldr	r3, [pc, #24]	@ (9000bc78 <UTIL_LCD_Clear+0x28>)
9000bc5e:	6999      	ldr	r1, [r3, #24]
9000bc60:	687b      	ldr	r3, [r7, #4]
9000bc62:	9300      	str	r3, [sp, #0]
9000bc64:	460b      	mov	r3, r1
9000bc66:	2100      	movs	r1, #0
9000bc68:	2000      	movs	r0, #0
9000bc6a:	f000 f8eb 	bl	9000be44 <UTIL_LCD_FillRect>
}
9000bc6e:	bf00      	nop
9000bc70:	3708      	adds	r7, #8
9000bc72:	46bd      	mov	sp, r7
9000bc74:	bd80      	pop	{r7, pc}
9000bc76:	bf00      	nop
9000bc78:	200012e8 	.word	0x200012e8

9000bc7c <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000bc7c:	b580      	push	{r7, lr}
9000bc7e:	b084      	sub	sp, #16
9000bc80:	af00      	add	r7, sp, #0
9000bc82:	60f8      	str	r0, [r7, #12]
9000bc84:	60b9      	str	r1, [r7, #8]
9000bc86:	4613      	mov	r3, r2
9000bc88:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bc8a:	4b16      	ldr	r3, [pc, #88]	@ (9000bce4 <UTIL_LCD_DisplayChar+0x68>)
9000bc8c:	68db      	ldr	r3, [r3, #12]
9000bc8e:	4a15      	ldr	r2, [pc, #84]	@ (9000bce4 <UTIL_LCD_DisplayChar+0x68>)
9000bc90:	015b      	lsls	r3, r3, #5
9000bc92:	4413      	add	r3, r2
9000bc94:	3308      	adds	r3, #8
9000bc96:	681b      	ldr	r3, [r3, #0]
9000bc98:	681a      	ldr	r2, [r3, #0]
9000bc9a:	79fb      	ldrb	r3, [r7, #7]
9000bc9c:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bc9e:	4911      	ldr	r1, [pc, #68]	@ (9000bce4 <UTIL_LCD_DisplayChar+0x68>)
9000bca0:	68c9      	ldr	r1, [r1, #12]
9000bca2:	4810      	ldr	r0, [pc, #64]	@ (9000bce4 <UTIL_LCD_DisplayChar+0x68>)
9000bca4:	0149      	lsls	r1, r1, #5
9000bca6:	4401      	add	r1, r0
9000bca8:	3108      	adds	r1, #8
9000bcaa:	6809      	ldr	r1, [r1, #0]
9000bcac:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bcae:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000bcb2:	4b0c      	ldr	r3, [pc, #48]	@ (9000bce4 <UTIL_LCD_DisplayChar+0x68>)
9000bcb4:	68db      	ldr	r3, [r3, #12]
9000bcb6:	480b      	ldr	r0, [pc, #44]	@ (9000bce4 <UTIL_LCD_DisplayChar+0x68>)
9000bcb8:	015b      	lsls	r3, r3, #5
9000bcba:	4403      	add	r3, r0
9000bcbc:	3308      	adds	r3, #8
9000bcbe:	681b      	ldr	r3, [r3, #0]
9000bcc0:	889b      	ldrh	r3, [r3, #4]
9000bcc2:	3307      	adds	r3, #7
9000bcc4:	2b00      	cmp	r3, #0
9000bcc6:	da00      	bge.n	9000bcca <UTIL_LCD_DisplayChar+0x4e>
9000bcc8:	3307      	adds	r3, #7
9000bcca:	10db      	asrs	r3, r3, #3
9000bccc:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000bcd0:	4413      	add	r3, r2
9000bcd2:	461a      	mov	r2, r3
9000bcd4:	68b9      	ldr	r1, [r7, #8]
9000bcd6:	68f8      	ldr	r0, [r7, #12]
9000bcd8:	f000 f8ee 	bl	9000beb8 <DrawChar>
}
9000bcdc:	bf00      	nop
9000bcde:	3710      	adds	r7, #16
9000bce0:	46bd      	mov	sp, r7
9000bce2:	bd80      	pop	{r7, pc}
9000bce4:	200012e8 	.word	0x200012e8

9000bce8 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000bce8:	b580      	push	{r7, lr}
9000bcea:	b08a      	sub	sp, #40	@ 0x28
9000bcec:	af00      	add	r7, sp, #0
9000bcee:	60f8      	str	r0, [r7, #12]
9000bcf0:	60b9      	str	r1, [r7, #8]
9000bcf2:	607a      	str	r2, [r7, #4]
9000bcf4:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000bcf6:	2301      	movs	r3, #1
9000bcf8:	627b      	str	r3, [r7, #36]	@ 0x24
9000bcfa:	2300      	movs	r3, #0
9000bcfc:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000bcfe:	2300      	movs	r3, #0
9000bd00:	61fb      	str	r3, [r7, #28]
9000bd02:	2300      	movs	r3, #0
9000bd04:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000bd06:	687b      	ldr	r3, [r7, #4]
9000bd08:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000bd0a:	e002      	b.n	9000bd12 <UTIL_LCD_DisplayStringAt+0x2a>
9000bd0c:	69fb      	ldr	r3, [r7, #28]
9000bd0e:	3301      	adds	r3, #1
9000bd10:	61fb      	str	r3, [r7, #28]
9000bd12:	69bb      	ldr	r3, [r7, #24]
9000bd14:	1c5a      	adds	r2, r3, #1
9000bd16:	61ba      	str	r2, [r7, #24]
9000bd18:	781b      	ldrb	r3, [r3, #0]
9000bd1a:	2b00      	cmp	r3, #0
9000bd1c:	d1f6      	bne.n	9000bd0c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000bd1e:	4b48      	ldr	r3, [pc, #288]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd20:	695b      	ldr	r3, [r3, #20]
9000bd22:	4a47      	ldr	r2, [pc, #284]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd24:	68d2      	ldr	r2, [r2, #12]
9000bd26:	4946      	ldr	r1, [pc, #280]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd28:	0152      	lsls	r2, r2, #5
9000bd2a:	440a      	add	r2, r1
9000bd2c:	3208      	adds	r2, #8
9000bd2e:	6812      	ldr	r2, [r2, #0]
9000bd30:	8892      	ldrh	r2, [r2, #4]
9000bd32:	fbb3 f3f2 	udiv	r3, r3, r2
9000bd36:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000bd38:	78fb      	ldrb	r3, [r7, #3]
9000bd3a:	2b03      	cmp	r3, #3
9000bd3c:	d018      	beq.n	9000bd70 <UTIL_LCD_DisplayStringAt+0x88>
9000bd3e:	2b03      	cmp	r3, #3
9000bd40:	dc2a      	bgt.n	9000bd98 <UTIL_LCD_DisplayStringAt+0xb0>
9000bd42:	2b01      	cmp	r3, #1
9000bd44:	d002      	beq.n	9000bd4c <UTIL_LCD_DisplayStringAt+0x64>
9000bd46:	2b02      	cmp	r3, #2
9000bd48:	d015      	beq.n	9000bd76 <UTIL_LCD_DisplayStringAt+0x8e>
9000bd4a:	e025      	b.n	9000bd98 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000bd4c:	697a      	ldr	r2, [r7, #20]
9000bd4e:	69fb      	ldr	r3, [r7, #28]
9000bd50:	1ad3      	subs	r3, r2, r3
9000bd52:	4a3b      	ldr	r2, [pc, #236]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd54:	68d2      	ldr	r2, [r2, #12]
9000bd56:	493a      	ldr	r1, [pc, #232]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd58:	0152      	lsls	r2, r2, #5
9000bd5a:	440a      	add	r2, r1
9000bd5c:	3208      	adds	r2, #8
9000bd5e:	6812      	ldr	r2, [r2, #0]
9000bd60:	8892      	ldrh	r2, [r2, #4]
9000bd62:	fb02 f303 	mul.w	r3, r2, r3
9000bd66:	085b      	lsrs	r3, r3, #1
9000bd68:	68fa      	ldr	r2, [r7, #12]
9000bd6a:	4413      	add	r3, r2
9000bd6c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bd6e:	e016      	b.n	9000bd9e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000bd70:	68fb      	ldr	r3, [r7, #12]
9000bd72:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bd74:	e013      	b.n	9000bd9e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000bd76:	697a      	ldr	r2, [r7, #20]
9000bd78:	69fb      	ldr	r3, [r7, #28]
9000bd7a:	1ad3      	subs	r3, r2, r3
9000bd7c:	4a30      	ldr	r2, [pc, #192]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd7e:	68d2      	ldr	r2, [r2, #12]
9000bd80:	492f      	ldr	r1, [pc, #188]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bd82:	0152      	lsls	r2, r2, #5
9000bd84:	440a      	add	r2, r1
9000bd86:	3208      	adds	r2, #8
9000bd88:	6812      	ldr	r2, [r2, #0]
9000bd8a:	8892      	ldrh	r2, [r2, #4]
9000bd8c:	fb03 f202 	mul.w	r2, r3, r2
9000bd90:	68fb      	ldr	r3, [r7, #12]
9000bd92:	1ad3      	subs	r3, r2, r3
9000bd94:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bd96:	e002      	b.n	9000bd9e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000bd98:	68fb      	ldr	r3, [r7, #12]
9000bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
9000bd9c:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bda0:	2b00      	cmp	r3, #0
9000bda2:	d003      	beq.n	9000bdac <UTIL_LCD_DisplayStringAt+0xc4>
9000bda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bda6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
9000bdaa:	d31b      	bcc.n	9000bde4 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000bdac:	2301      	movs	r3, #1
9000bdae:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000bdb0:	e018      	b.n	9000bde4 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000bdb2:	687b      	ldr	r3, [r7, #4]
9000bdb4:	781b      	ldrb	r3, [r3, #0]
9000bdb6:	461a      	mov	r2, r3
9000bdb8:	68b9      	ldr	r1, [r7, #8]
9000bdba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
9000bdbc:	f7ff ff5e 	bl	9000bc7c <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bdc0:	4b1f      	ldr	r3, [pc, #124]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdc2:	68db      	ldr	r3, [r3, #12]
9000bdc4:	4a1e      	ldr	r2, [pc, #120]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdc6:	015b      	lsls	r3, r3, #5
9000bdc8:	4413      	add	r3, r2
9000bdca:	3308      	adds	r3, #8
9000bdcc:	681b      	ldr	r3, [r3, #0]
9000bdce:	889b      	ldrh	r3, [r3, #4]
9000bdd0:	461a      	mov	r2, r3
9000bdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
9000bdd4:	4413      	add	r3, r2
9000bdd6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
9000bdd8:	687b      	ldr	r3, [r7, #4]
9000bdda:	3301      	adds	r3, #1
9000bddc:	607b      	str	r3, [r7, #4]
    i++;
9000bdde:	6a3b      	ldr	r3, [r7, #32]
9000bde0:	3301      	adds	r3, #1
9000bde2:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000bde4:	687b      	ldr	r3, [r7, #4]
9000bde6:	781b      	ldrb	r3, [r3, #0]
9000bde8:	2b00      	cmp	r3, #0
9000bdea:	bf14      	ite	ne
9000bdec:	2301      	movne	r3, #1
9000bdee:	2300      	moveq	r3, #0
9000bdf0:	b2da      	uxtb	r2, r3
9000bdf2:	4b13      	ldr	r3, [pc, #76]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdf4:	6959      	ldr	r1, [r3, #20]
9000bdf6:	4b12      	ldr	r3, [pc, #72]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdf8:	68db      	ldr	r3, [r3, #12]
9000bdfa:	4811      	ldr	r0, [pc, #68]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000bdfc:	015b      	lsls	r3, r3, #5
9000bdfe:	4403      	add	r3, r0
9000be00:	3308      	adds	r3, #8
9000be02:	681b      	ldr	r3, [r3, #0]
9000be04:	889b      	ldrh	r3, [r3, #4]
9000be06:	4618      	mov	r0, r3
9000be08:	6a3b      	ldr	r3, [r7, #32]
9000be0a:	fb00 f303 	mul.w	r3, r0, r3
9000be0e:	1acb      	subs	r3, r1, r3
9000be10:	b29b      	uxth	r3, r3
9000be12:	490b      	ldr	r1, [pc, #44]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000be14:	68c9      	ldr	r1, [r1, #12]
9000be16:	480a      	ldr	r0, [pc, #40]	@ (9000be40 <UTIL_LCD_DisplayStringAt+0x158>)
9000be18:	0149      	lsls	r1, r1, #5
9000be1a:	4401      	add	r1, r0
9000be1c:	3108      	adds	r1, #8
9000be1e:	6809      	ldr	r1, [r1, #0]
9000be20:	8889      	ldrh	r1, [r1, #4]
9000be22:	428b      	cmp	r3, r1
9000be24:	bf2c      	ite	cs
9000be26:	2301      	movcs	r3, #1
9000be28:	2300      	movcc	r3, #0
9000be2a:	b2db      	uxtb	r3, r3
9000be2c:	4013      	ands	r3, r2
9000be2e:	b2db      	uxtb	r3, r3
9000be30:	2b00      	cmp	r3, #0
9000be32:	d1be      	bne.n	9000bdb2 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000be34:	bf00      	nop
9000be36:	bf00      	nop
9000be38:	3728      	adds	r7, #40	@ 0x28
9000be3a:	46bd      	mov	sp, r7
9000be3c:	bd80      	pop	{r7, pc}
9000be3e:	bf00      	nop
9000be40:	200012e8 	.word	0x200012e8

9000be44 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000be44:	b590      	push	{r4, r7, lr}
9000be46:	b087      	sub	sp, #28
9000be48:	af02      	add	r7, sp, #8
9000be4a:	60f8      	str	r0, [r7, #12]
9000be4c:	60b9      	str	r1, [r7, #8]
9000be4e:	607a      	str	r2, [r7, #4]
9000be50:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000be52:	4b17      	ldr	r3, [pc, #92]	@ (9000beb0 <UTIL_LCD_FillRect+0x6c>)
9000be54:	69db      	ldr	r3, [r3, #28]
9000be56:	2b02      	cmp	r3, #2
9000be58:	d11a      	bne.n	9000be90 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000be5a:	4b16      	ldr	r3, [pc, #88]	@ (9000beb4 <UTIL_LCD_FillRect+0x70>)
9000be5c:	691c      	ldr	r4, [r3, #16]
9000be5e:	4b14      	ldr	r3, [pc, #80]	@ (9000beb0 <UTIL_LCD_FillRect+0x6c>)
9000be60:	6918      	ldr	r0, [r3, #16]
9000be62:	6a3b      	ldr	r3, [r7, #32]
9000be64:	08db      	lsrs	r3, r3, #3
9000be66:	f003 021f 	and.w	r2, r3, #31
9000be6a:	6a3b      	ldr	r3, [r7, #32]
9000be6c:	0a9b      	lsrs	r3, r3, #10
9000be6e:	015b      	lsls	r3, r3, #5
9000be70:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000be74:	431a      	orrs	r2, r3
9000be76:	6a3b      	ldr	r3, [r7, #32]
9000be78:	0cdb      	lsrs	r3, r3, #19
9000be7a:	02db      	lsls	r3, r3, #11
9000be7c:	b29b      	uxth	r3, r3
9000be7e:	4313      	orrs	r3, r2
9000be80:	9301      	str	r3, [sp, #4]
9000be82:	683b      	ldr	r3, [r7, #0]
9000be84:	9300      	str	r3, [sp, #0]
9000be86:	687b      	ldr	r3, [r7, #4]
9000be88:	68ba      	ldr	r2, [r7, #8]
9000be8a:	68f9      	ldr	r1, [r7, #12]
9000be8c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000be8e:	e00b      	b.n	9000bea8 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000be90:	4b08      	ldr	r3, [pc, #32]	@ (9000beb4 <UTIL_LCD_FillRect+0x70>)
9000be92:	691c      	ldr	r4, [r3, #16]
9000be94:	4b06      	ldr	r3, [pc, #24]	@ (9000beb0 <UTIL_LCD_FillRect+0x6c>)
9000be96:	6918      	ldr	r0, [r3, #16]
9000be98:	6a3b      	ldr	r3, [r7, #32]
9000be9a:	9301      	str	r3, [sp, #4]
9000be9c:	683b      	ldr	r3, [r7, #0]
9000be9e:	9300      	str	r3, [sp, #0]
9000bea0:	687b      	ldr	r3, [r7, #4]
9000bea2:	68ba      	ldr	r2, [r7, #8]
9000bea4:	68f9      	ldr	r1, [r7, #12]
9000bea6:	47a0      	blx	r4
}
9000bea8:	bf00      	nop
9000beaa:	3714      	adds	r7, #20
9000beac:	46bd      	mov	sp, r7
9000beae:	bd90      	pop	{r4, r7, pc}
9000beb0:	200012e8 	.word	0x200012e8
9000beb4:	20001328 	.word	0x20001328

9000beb8 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000beb8:	b580      	push	{r7, lr}
9000beba:	b0b2      	sub	sp, #200	@ 0xc8
9000bebc:	af02      	add	r7, sp, #8
9000bebe:	60f8      	str	r0, [r7, #12]
9000bec0:	60b9      	str	r1, [r7, #8]
9000bec2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000bec4:	2300      	movs	r3, #0
9000bec6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000beca:	2300      	movs	r3, #0
9000becc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000bed0:	4ba5      	ldr	r3, [pc, #660]	@ (9000c168 <DrawChar+0x2b0>)
9000bed2:	68db      	ldr	r3, [r3, #12]
9000bed4:	4aa4      	ldr	r2, [pc, #656]	@ (9000c168 <DrawChar+0x2b0>)
9000bed6:	015b      	lsls	r3, r3, #5
9000bed8:	4413      	add	r3, r2
9000beda:	3308      	adds	r3, #8
9000bedc:	681b      	ldr	r3, [r3, #0]
9000bede:	88db      	ldrh	r3, [r3, #6]
9000bee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000bee4:	4ba0      	ldr	r3, [pc, #640]	@ (9000c168 <DrawChar+0x2b0>)
9000bee6:	68db      	ldr	r3, [r3, #12]
9000bee8:	4a9f      	ldr	r2, [pc, #636]	@ (9000c168 <DrawChar+0x2b0>)
9000beea:	015b      	lsls	r3, r3, #5
9000beec:	4413      	add	r3, r2
9000beee:	3308      	adds	r3, #8
9000bef0:	681b      	ldr	r3, [r3, #0]
9000bef2:	889b      	ldrh	r3, [r3, #4]
9000bef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000bef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000befc:	3307      	adds	r3, #7
9000befe:	f023 0207 	bic.w	r2, r3, #7
9000bf02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf06:	1ad3      	subs	r3, r2, r3
9000bf08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
9000bf0c:	2300      	movs	r3, #0
9000bf0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000bf12:	e11c      	b.n	9000c14e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000bf14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf18:	3307      	adds	r3, #7
9000bf1a:	08db      	lsrs	r3, r3, #3
9000bf1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000bf20:	fb02 f303 	mul.w	r3, r2, r3
9000bf24:	687a      	ldr	r2, [r7, #4]
9000bf26:	4413      	add	r3, r2
9000bf28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
9000bf2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000bf30:	3307      	adds	r3, #7
9000bf32:	08db      	lsrs	r3, r3, #3
9000bf34:	2b01      	cmp	r3, #1
9000bf36:	d002      	beq.n	9000bf3e <DrawChar+0x86>
9000bf38:	2b02      	cmp	r3, #2
9000bf3a:	d006      	beq.n	9000bf4a <DrawChar+0x92>
9000bf3c:	e011      	b.n	9000bf62 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000bf3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bf42:	781b      	ldrb	r3, [r3, #0]
9000bf44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bf48:	e01d      	b.n	9000bf86 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000bf4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bf4e:	781b      	ldrb	r3, [r3, #0]
9000bf50:	021b      	lsls	r3, r3, #8
9000bf52:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bf56:	3201      	adds	r2, #1
9000bf58:	7812      	ldrb	r2, [r2, #0]
9000bf5a:	4313      	orrs	r3, r2
9000bf5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bf60:	e011      	b.n	9000bf86 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000bf62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bf66:	781b      	ldrb	r3, [r3, #0]
9000bf68:	041a      	lsls	r2, r3, #16
9000bf6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
9000bf6e:	3301      	adds	r3, #1
9000bf70:	781b      	ldrb	r3, [r3, #0]
9000bf72:	021b      	lsls	r3, r3, #8
9000bf74:	4313      	orrs	r3, r2
9000bf76:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
9000bf7a:	3202      	adds	r2, #2
9000bf7c:	7812      	ldrb	r2, [r2, #0]
9000bf7e:	4313      	orrs	r3, r2
9000bf80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
9000bf84:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000bf86:	4b78      	ldr	r3, [pc, #480]	@ (9000c168 <DrawChar+0x2b0>)
9000bf88:	68db      	ldr	r3, [r3, #12]
9000bf8a:	4a77      	ldr	r2, [pc, #476]	@ (9000c168 <DrawChar+0x2b0>)
9000bf8c:	015b      	lsls	r3, r3, #5
9000bf8e:	4413      	add	r3, r2
9000bf90:	331c      	adds	r3, #28
9000bf92:	681b      	ldr	r3, [r3, #0]
9000bf94:	2b02      	cmp	r3, #2
9000bf96:	f040 808c 	bne.w	9000c0b2 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000bf9a:	2300      	movs	r3, #0
9000bf9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000bfa0:	e074      	b.n	9000c08c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000bfa2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000bfa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000bfaa:	1ad2      	subs	r2, r2, r3
9000bfac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000bfb0:	4413      	add	r3, r2
9000bfb2:	3b01      	subs	r3, #1
9000bfb4:	2201      	movs	r2, #1
9000bfb6:	fa02 f303 	lsl.w	r3, r2, r3
9000bfba:	461a      	mov	r2, r3
9000bfbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000bfc0:	4013      	ands	r3, r2
9000bfc2:	2b00      	cmp	r3, #0
9000bfc4:	d02d      	beq.n	9000c022 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000bfc6:	4b68      	ldr	r3, [pc, #416]	@ (9000c168 <DrawChar+0x2b0>)
9000bfc8:	68db      	ldr	r3, [r3, #12]
9000bfca:	4a67      	ldr	r2, [pc, #412]	@ (9000c168 <DrawChar+0x2b0>)
9000bfcc:	015b      	lsls	r3, r3, #5
9000bfce:	4413      	add	r3, r2
9000bfd0:	681b      	ldr	r3, [r3, #0]
9000bfd2:	08db      	lsrs	r3, r3, #3
9000bfd4:	b29b      	uxth	r3, r3
9000bfd6:	f003 031f 	and.w	r3, r3, #31
9000bfda:	b29a      	uxth	r2, r3
9000bfdc:	4b62      	ldr	r3, [pc, #392]	@ (9000c168 <DrawChar+0x2b0>)
9000bfde:	68db      	ldr	r3, [r3, #12]
9000bfe0:	4961      	ldr	r1, [pc, #388]	@ (9000c168 <DrawChar+0x2b0>)
9000bfe2:	015b      	lsls	r3, r3, #5
9000bfe4:	440b      	add	r3, r1
9000bfe6:	681b      	ldr	r3, [r3, #0]
9000bfe8:	0a9b      	lsrs	r3, r3, #10
9000bfea:	b29b      	uxth	r3, r3
9000bfec:	015b      	lsls	r3, r3, #5
9000bfee:	b29b      	uxth	r3, r3
9000bff0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000bff4:	b29b      	uxth	r3, r3
9000bff6:	4313      	orrs	r3, r2
9000bff8:	b29a      	uxth	r2, r3
9000bffa:	4b5b      	ldr	r3, [pc, #364]	@ (9000c168 <DrawChar+0x2b0>)
9000bffc:	68db      	ldr	r3, [r3, #12]
9000bffe:	495a      	ldr	r1, [pc, #360]	@ (9000c168 <DrawChar+0x2b0>)
9000c000:	015b      	lsls	r3, r3, #5
9000c002:	440b      	add	r3, r1
9000c004:	681b      	ldr	r3, [r3, #0]
9000c006:	0cdb      	lsrs	r3, r3, #19
9000c008:	b29b      	uxth	r3, r3
9000c00a:	02db      	lsls	r3, r3, #11
9000c00c:	b29b      	uxth	r3, r3
9000c00e:	4313      	orrs	r3, r2
9000c010:	b29a      	uxth	r2, r3
9000c012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c016:	005b      	lsls	r3, r3, #1
9000c018:	33c0      	adds	r3, #192	@ 0xc0
9000c01a:	443b      	add	r3, r7
9000c01c:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000c020:	e02f      	b.n	9000c082 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000c022:	4b51      	ldr	r3, [pc, #324]	@ (9000c168 <DrawChar+0x2b0>)
9000c024:	68db      	ldr	r3, [r3, #12]
9000c026:	4a50      	ldr	r2, [pc, #320]	@ (9000c168 <DrawChar+0x2b0>)
9000c028:	015b      	lsls	r3, r3, #5
9000c02a:	4413      	add	r3, r2
9000c02c:	3304      	adds	r3, #4
9000c02e:	681b      	ldr	r3, [r3, #0]
9000c030:	08db      	lsrs	r3, r3, #3
9000c032:	b29b      	uxth	r3, r3
9000c034:	f003 031f 	and.w	r3, r3, #31
9000c038:	b29a      	uxth	r2, r3
9000c03a:	4b4b      	ldr	r3, [pc, #300]	@ (9000c168 <DrawChar+0x2b0>)
9000c03c:	68db      	ldr	r3, [r3, #12]
9000c03e:	494a      	ldr	r1, [pc, #296]	@ (9000c168 <DrawChar+0x2b0>)
9000c040:	015b      	lsls	r3, r3, #5
9000c042:	440b      	add	r3, r1
9000c044:	3304      	adds	r3, #4
9000c046:	681b      	ldr	r3, [r3, #0]
9000c048:	0a9b      	lsrs	r3, r3, #10
9000c04a:	b29b      	uxth	r3, r3
9000c04c:	015b      	lsls	r3, r3, #5
9000c04e:	b29b      	uxth	r3, r3
9000c050:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
9000c054:	b29b      	uxth	r3, r3
9000c056:	4313      	orrs	r3, r2
9000c058:	b29a      	uxth	r2, r3
9000c05a:	4b43      	ldr	r3, [pc, #268]	@ (9000c168 <DrawChar+0x2b0>)
9000c05c:	68db      	ldr	r3, [r3, #12]
9000c05e:	4942      	ldr	r1, [pc, #264]	@ (9000c168 <DrawChar+0x2b0>)
9000c060:	015b      	lsls	r3, r3, #5
9000c062:	440b      	add	r3, r1
9000c064:	3304      	adds	r3, #4
9000c066:	681b      	ldr	r3, [r3, #0]
9000c068:	0cdb      	lsrs	r3, r3, #19
9000c06a:	b29b      	uxth	r3, r3
9000c06c:	02db      	lsls	r3, r3, #11
9000c06e:	b29b      	uxth	r3, r3
9000c070:	4313      	orrs	r3, r2
9000c072:	b29a      	uxth	r2, r3
9000c074:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c078:	005b      	lsls	r3, r3, #1
9000c07a:	33c0      	adds	r3, #192	@ 0xc0
9000c07c:	443b      	add	r3, r7
9000c07e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000c082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c086:	3301      	adds	r3, #1
9000c088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c08c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c094:	429a      	cmp	r2, r3
9000c096:	d384      	bcc.n	9000bfa2 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000c098:	68b9      	ldr	r1, [r7, #8]
9000c09a:	1c4b      	adds	r3, r1, #1
9000c09c:	60bb      	str	r3, [r7, #8]
9000c09e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
9000c0a2:	2301      	movs	r3, #1
9000c0a4:	9300      	str	r3, [sp, #0]
9000c0a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c0aa:	68f8      	ldr	r0, [r7, #12]
9000c0ac:	f7ff fdb4 	bl	9000bc18 <UTIL_LCD_FillRGBRect>
9000c0b0:	e048      	b.n	9000c144 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000c0b2:	2300      	movs	r3, #0
9000c0b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c0b8:	e032      	b.n	9000c120 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000c0ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
9000c0be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c0c2:	1ad2      	subs	r2, r2, r3
9000c0c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
9000c0c8:	4413      	add	r3, r2
9000c0ca:	3b01      	subs	r3, #1
9000c0cc:	2201      	movs	r2, #1
9000c0ce:	fa02 f303 	lsl.w	r3, r2, r3
9000c0d2:	461a      	mov	r2, r3
9000c0d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
9000c0d8:	4013      	ands	r3, r2
9000c0da:	2b00      	cmp	r3, #0
9000c0dc:	d00d      	beq.n	9000c0fa <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000c0de:	4b22      	ldr	r3, [pc, #136]	@ (9000c168 <DrawChar+0x2b0>)
9000c0e0:	68db      	ldr	r3, [r3, #12]
9000c0e2:	4a21      	ldr	r2, [pc, #132]	@ (9000c168 <DrawChar+0x2b0>)
9000c0e4:	015b      	lsls	r3, r3, #5
9000c0e6:	4413      	add	r3, r2
9000c0e8:	681a      	ldr	r2, [r3, #0]
9000c0ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c0ee:	009b      	lsls	r3, r3, #2
9000c0f0:	33c0      	adds	r3, #192	@ 0xc0
9000c0f2:	443b      	add	r3, r7
9000c0f4:	f843 2cac 	str.w	r2, [r3, #-172]
9000c0f8:	e00d      	b.n	9000c116 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000c0fa:	4b1b      	ldr	r3, [pc, #108]	@ (9000c168 <DrawChar+0x2b0>)
9000c0fc:	68db      	ldr	r3, [r3, #12]
9000c0fe:	4a1a      	ldr	r2, [pc, #104]	@ (9000c168 <DrawChar+0x2b0>)
9000c100:	015b      	lsls	r3, r3, #5
9000c102:	4413      	add	r3, r2
9000c104:	3304      	adds	r3, #4
9000c106:	681a      	ldr	r2, [r3, #0]
9000c108:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c10c:	009b      	lsls	r3, r3, #2
9000c10e:	33c0      	adds	r3, #192	@ 0xc0
9000c110:	443b      	add	r3, r7
9000c112:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000c116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
9000c11a:	3301      	adds	r3, #1
9000c11c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
9000c120:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
9000c124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c128:	429a      	cmp	r2, r3
9000c12a:	d3c6      	bcc.n	9000c0ba <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000c12c:	68b9      	ldr	r1, [r7, #8]
9000c12e:	1c4b      	adds	r3, r1, #1
9000c130:	60bb      	str	r3, [r7, #8]
9000c132:	f107 0214 	add.w	r2, r7, #20
9000c136:	2301      	movs	r3, #1
9000c138:	9300      	str	r3, [sp, #0]
9000c13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
9000c13e:	68f8      	ldr	r0, [r7, #12]
9000c140:	f7ff fd6a 	bl	9000bc18 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000c144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
9000c148:	3301      	adds	r3, #1
9000c14a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
9000c14e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
9000c152:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
9000c156:	429a      	cmp	r2, r3
9000c158:	f4ff aedc 	bcc.w	9000bf14 <DrawChar+0x5c>
    }
  }
}
9000c15c:	bf00      	nop
9000c15e:	bf00      	nop
9000c160:	37c0      	adds	r7, #192	@ 0xc0
9000c162:	46bd      	mov	sp, r7
9000c164:	bd80      	pop	{r7, pc}
9000c166:	bf00      	nop
9000c168:	200012e8 	.word	0x200012e8

9000c16c <sbrk_aligned>:
9000c16c:	b570      	push	{r4, r5, r6, lr}
9000c16e:	4e0f      	ldr	r6, [pc, #60]	@ (9000c1ac <sbrk_aligned+0x40>)
9000c170:	460c      	mov	r4, r1
9000c172:	6831      	ldr	r1, [r6, #0]
9000c174:	4605      	mov	r5, r0
9000c176:	b911      	cbnz	r1, 9000c17e <sbrk_aligned+0x12>
9000c178:	f000 fb0e 	bl	9000c798 <_sbrk_r>
9000c17c:	6030      	str	r0, [r6, #0]
9000c17e:	4621      	mov	r1, r4
9000c180:	4628      	mov	r0, r5
9000c182:	f000 fb09 	bl	9000c798 <_sbrk_r>
9000c186:	1c43      	adds	r3, r0, #1
9000c188:	d103      	bne.n	9000c192 <sbrk_aligned+0x26>
9000c18a:	f04f 34ff 	mov.w	r4, #4294967295
9000c18e:	4620      	mov	r0, r4
9000c190:	bd70      	pop	{r4, r5, r6, pc}
9000c192:	1cc4      	adds	r4, r0, #3
9000c194:	f024 0403 	bic.w	r4, r4, #3
9000c198:	42a0      	cmp	r0, r4
9000c19a:	d0f8      	beq.n	9000c18e <sbrk_aligned+0x22>
9000c19c:	1a21      	subs	r1, r4, r0
9000c19e:	4628      	mov	r0, r5
9000c1a0:	f000 fafa 	bl	9000c798 <_sbrk_r>
9000c1a4:	3001      	adds	r0, #1
9000c1a6:	d1f2      	bne.n	9000c18e <sbrk_aligned+0x22>
9000c1a8:	e7ef      	b.n	9000c18a <sbrk_aligned+0x1e>
9000c1aa:	bf00      	nop
9000c1ac:	20001354 	.word	0x20001354

9000c1b0 <_malloc_r>:
9000c1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c1b4:	1ccd      	adds	r5, r1, #3
9000c1b6:	f025 0503 	bic.w	r5, r5, #3
9000c1ba:	3508      	adds	r5, #8
9000c1bc:	2d0c      	cmp	r5, #12
9000c1be:	bf38      	it	cc
9000c1c0:	250c      	movcc	r5, #12
9000c1c2:	2d00      	cmp	r5, #0
9000c1c4:	4606      	mov	r6, r0
9000c1c6:	db01      	blt.n	9000c1cc <_malloc_r+0x1c>
9000c1c8:	42a9      	cmp	r1, r5
9000c1ca:	d904      	bls.n	9000c1d6 <_malloc_r+0x26>
9000c1cc:	230c      	movs	r3, #12
9000c1ce:	6033      	str	r3, [r6, #0]
9000c1d0:	2000      	movs	r0, #0
9000c1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c1d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 9000c2ac <_malloc_r+0xfc>
9000c1da:	f000 f869 	bl	9000c2b0 <__malloc_lock>
9000c1de:	f8d8 3000 	ldr.w	r3, [r8]
9000c1e2:	461c      	mov	r4, r3
9000c1e4:	bb44      	cbnz	r4, 9000c238 <_malloc_r+0x88>
9000c1e6:	4629      	mov	r1, r5
9000c1e8:	4630      	mov	r0, r6
9000c1ea:	f7ff ffbf 	bl	9000c16c <sbrk_aligned>
9000c1ee:	1c43      	adds	r3, r0, #1
9000c1f0:	4604      	mov	r4, r0
9000c1f2:	d158      	bne.n	9000c2a6 <_malloc_r+0xf6>
9000c1f4:	f8d8 4000 	ldr.w	r4, [r8]
9000c1f8:	4627      	mov	r7, r4
9000c1fa:	2f00      	cmp	r7, #0
9000c1fc:	d143      	bne.n	9000c286 <_malloc_r+0xd6>
9000c1fe:	2c00      	cmp	r4, #0
9000c200:	d04b      	beq.n	9000c29a <_malloc_r+0xea>
9000c202:	6823      	ldr	r3, [r4, #0]
9000c204:	4639      	mov	r1, r7
9000c206:	4630      	mov	r0, r6
9000c208:	eb04 0903 	add.w	r9, r4, r3
9000c20c:	f000 fac4 	bl	9000c798 <_sbrk_r>
9000c210:	4581      	cmp	r9, r0
9000c212:	d142      	bne.n	9000c29a <_malloc_r+0xea>
9000c214:	6821      	ldr	r1, [r4, #0]
9000c216:	1a6d      	subs	r5, r5, r1
9000c218:	4629      	mov	r1, r5
9000c21a:	4630      	mov	r0, r6
9000c21c:	f7ff ffa6 	bl	9000c16c <sbrk_aligned>
9000c220:	3001      	adds	r0, #1
9000c222:	d03a      	beq.n	9000c29a <_malloc_r+0xea>
9000c224:	6823      	ldr	r3, [r4, #0]
9000c226:	442b      	add	r3, r5
9000c228:	6023      	str	r3, [r4, #0]
9000c22a:	f8d8 3000 	ldr.w	r3, [r8]
9000c22e:	685a      	ldr	r2, [r3, #4]
9000c230:	bb62      	cbnz	r2, 9000c28c <_malloc_r+0xdc>
9000c232:	f8c8 7000 	str.w	r7, [r8]
9000c236:	e00f      	b.n	9000c258 <_malloc_r+0xa8>
9000c238:	6822      	ldr	r2, [r4, #0]
9000c23a:	1b52      	subs	r2, r2, r5
9000c23c:	d420      	bmi.n	9000c280 <_malloc_r+0xd0>
9000c23e:	2a0b      	cmp	r2, #11
9000c240:	d917      	bls.n	9000c272 <_malloc_r+0xc2>
9000c242:	1961      	adds	r1, r4, r5
9000c244:	42a3      	cmp	r3, r4
9000c246:	6025      	str	r5, [r4, #0]
9000c248:	bf18      	it	ne
9000c24a:	6059      	strne	r1, [r3, #4]
9000c24c:	6863      	ldr	r3, [r4, #4]
9000c24e:	bf08      	it	eq
9000c250:	f8c8 1000 	streq.w	r1, [r8]
9000c254:	5162      	str	r2, [r4, r5]
9000c256:	604b      	str	r3, [r1, #4]
9000c258:	4630      	mov	r0, r6
9000c25a:	f000 f82f 	bl	9000c2bc <__malloc_unlock>
9000c25e:	f104 000b 	add.w	r0, r4, #11
9000c262:	1d23      	adds	r3, r4, #4
9000c264:	f020 0007 	bic.w	r0, r0, #7
9000c268:	1ac2      	subs	r2, r0, r3
9000c26a:	bf1c      	itt	ne
9000c26c:	1a1b      	subne	r3, r3, r0
9000c26e:	50a3      	strne	r3, [r4, r2]
9000c270:	e7af      	b.n	9000c1d2 <_malloc_r+0x22>
9000c272:	6862      	ldr	r2, [r4, #4]
9000c274:	42a3      	cmp	r3, r4
9000c276:	bf0c      	ite	eq
9000c278:	f8c8 2000 	streq.w	r2, [r8]
9000c27c:	605a      	strne	r2, [r3, #4]
9000c27e:	e7eb      	b.n	9000c258 <_malloc_r+0xa8>
9000c280:	4623      	mov	r3, r4
9000c282:	6864      	ldr	r4, [r4, #4]
9000c284:	e7ae      	b.n	9000c1e4 <_malloc_r+0x34>
9000c286:	463c      	mov	r4, r7
9000c288:	687f      	ldr	r7, [r7, #4]
9000c28a:	e7b6      	b.n	9000c1fa <_malloc_r+0x4a>
9000c28c:	461a      	mov	r2, r3
9000c28e:	685b      	ldr	r3, [r3, #4]
9000c290:	42a3      	cmp	r3, r4
9000c292:	d1fb      	bne.n	9000c28c <_malloc_r+0xdc>
9000c294:	2300      	movs	r3, #0
9000c296:	6053      	str	r3, [r2, #4]
9000c298:	e7de      	b.n	9000c258 <_malloc_r+0xa8>
9000c29a:	230c      	movs	r3, #12
9000c29c:	6033      	str	r3, [r6, #0]
9000c29e:	4630      	mov	r0, r6
9000c2a0:	f000 f80c 	bl	9000c2bc <__malloc_unlock>
9000c2a4:	e794      	b.n	9000c1d0 <_malloc_r+0x20>
9000c2a6:	6005      	str	r5, [r0, #0]
9000c2a8:	e7d6      	b.n	9000c258 <_malloc_r+0xa8>
9000c2aa:	bf00      	nop
9000c2ac:	20001358 	.word	0x20001358

9000c2b0 <__malloc_lock>:
9000c2b0:	4801      	ldr	r0, [pc, #4]	@ (9000c2b8 <__malloc_lock+0x8>)
9000c2b2:	f000 babe 	b.w	9000c832 <__retarget_lock_acquire_recursive>
9000c2b6:	bf00      	nop
9000c2b8:	2000149c 	.word	0x2000149c

9000c2bc <__malloc_unlock>:
9000c2bc:	4801      	ldr	r0, [pc, #4]	@ (9000c2c4 <__malloc_unlock+0x8>)
9000c2be:	f000 bab9 	b.w	9000c834 <__retarget_lock_release_recursive>
9000c2c2:	bf00      	nop
9000c2c4:	2000149c 	.word	0x2000149c

9000c2c8 <std>:
9000c2c8:	2300      	movs	r3, #0
9000c2ca:	b510      	push	{r4, lr}
9000c2cc:	4604      	mov	r4, r0
9000c2ce:	e9c0 3300 	strd	r3, r3, [r0]
9000c2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000c2d6:	6083      	str	r3, [r0, #8]
9000c2d8:	8181      	strh	r1, [r0, #12]
9000c2da:	6643      	str	r3, [r0, #100]	@ 0x64
9000c2dc:	81c2      	strh	r2, [r0, #14]
9000c2de:	6183      	str	r3, [r0, #24]
9000c2e0:	4619      	mov	r1, r3
9000c2e2:	2208      	movs	r2, #8
9000c2e4:	305c      	adds	r0, #92	@ 0x5c
9000c2e6:	f000 fa1b 	bl	9000c720 <memset>
9000c2ea:	4b0d      	ldr	r3, [pc, #52]	@ (9000c320 <std+0x58>)
9000c2ec:	6263      	str	r3, [r4, #36]	@ 0x24
9000c2ee:	4b0d      	ldr	r3, [pc, #52]	@ (9000c324 <std+0x5c>)
9000c2f0:	62a3      	str	r3, [r4, #40]	@ 0x28
9000c2f2:	4b0d      	ldr	r3, [pc, #52]	@ (9000c328 <std+0x60>)
9000c2f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
9000c2f6:	4b0d      	ldr	r3, [pc, #52]	@ (9000c32c <std+0x64>)
9000c2f8:	6323      	str	r3, [r4, #48]	@ 0x30
9000c2fa:	4b0d      	ldr	r3, [pc, #52]	@ (9000c330 <std+0x68>)
9000c2fc:	6224      	str	r4, [r4, #32]
9000c2fe:	429c      	cmp	r4, r3
9000c300:	d006      	beq.n	9000c310 <std+0x48>
9000c302:	f103 0268 	add.w	r2, r3, #104	@ 0x68
9000c306:	4294      	cmp	r4, r2
9000c308:	d002      	beq.n	9000c310 <std+0x48>
9000c30a:	33d0      	adds	r3, #208	@ 0xd0
9000c30c:	429c      	cmp	r4, r3
9000c30e:	d105      	bne.n	9000c31c <std+0x54>
9000c310:	f104 0058 	add.w	r0, r4, #88	@ 0x58
9000c314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c318:	f000 ba8a 	b.w	9000c830 <__retarget_lock_init_recursive>
9000c31c:	bd10      	pop	{r4, pc}
9000c31e:	bf00      	nop
9000c320:	9000c571 	.word	0x9000c571
9000c324:	9000c593 	.word	0x9000c593
9000c328:	9000c5cb 	.word	0x9000c5cb
9000c32c:	9000c5ef 	.word	0x9000c5ef
9000c330:	2000135c 	.word	0x2000135c

9000c334 <stdio_exit_handler>:
9000c334:	4a02      	ldr	r2, [pc, #8]	@ (9000c340 <stdio_exit_handler+0xc>)
9000c336:	4903      	ldr	r1, [pc, #12]	@ (9000c344 <stdio_exit_handler+0x10>)
9000c338:	4803      	ldr	r0, [pc, #12]	@ (9000c348 <stdio_exit_handler+0x14>)
9000c33a:	f000 b869 	b.w	9000c410 <_fwalk_sglue>
9000c33e:	bf00      	nop
9000c340:	20000078 	.word	0x20000078
9000c344:	9000d23d 	.word	0x9000d23d
9000c348:	20000088 	.word	0x20000088

9000c34c <cleanup_stdio>:
9000c34c:	6841      	ldr	r1, [r0, #4]
9000c34e:	4b0c      	ldr	r3, [pc, #48]	@ (9000c380 <cleanup_stdio+0x34>)
9000c350:	4299      	cmp	r1, r3
9000c352:	b510      	push	{r4, lr}
9000c354:	4604      	mov	r4, r0
9000c356:	d001      	beq.n	9000c35c <cleanup_stdio+0x10>
9000c358:	f000 ff70 	bl	9000d23c <_fflush_r>
9000c35c:	68a1      	ldr	r1, [r4, #8]
9000c35e:	4b09      	ldr	r3, [pc, #36]	@ (9000c384 <cleanup_stdio+0x38>)
9000c360:	4299      	cmp	r1, r3
9000c362:	d002      	beq.n	9000c36a <cleanup_stdio+0x1e>
9000c364:	4620      	mov	r0, r4
9000c366:	f000 ff69 	bl	9000d23c <_fflush_r>
9000c36a:	68e1      	ldr	r1, [r4, #12]
9000c36c:	4b06      	ldr	r3, [pc, #24]	@ (9000c388 <cleanup_stdio+0x3c>)
9000c36e:	4299      	cmp	r1, r3
9000c370:	d004      	beq.n	9000c37c <cleanup_stdio+0x30>
9000c372:	4620      	mov	r0, r4
9000c374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c378:	f000 bf60 	b.w	9000d23c <_fflush_r>
9000c37c:	bd10      	pop	{r4, pc}
9000c37e:	bf00      	nop
9000c380:	2000135c 	.word	0x2000135c
9000c384:	200013c4 	.word	0x200013c4
9000c388:	2000142c 	.word	0x2000142c

9000c38c <global_stdio_init.part.0>:
9000c38c:	b510      	push	{r4, lr}
9000c38e:	4b0b      	ldr	r3, [pc, #44]	@ (9000c3bc <global_stdio_init.part.0+0x30>)
9000c390:	4c0b      	ldr	r4, [pc, #44]	@ (9000c3c0 <global_stdio_init.part.0+0x34>)
9000c392:	4a0c      	ldr	r2, [pc, #48]	@ (9000c3c4 <global_stdio_init.part.0+0x38>)
9000c394:	601a      	str	r2, [r3, #0]
9000c396:	4620      	mov	r0, r4
9000c398:	2200      	movs	r2, #0
9000c39a:	2104      	movs	r1, #4
9000c39c:	f7ff ff94 	bl	9000c2c8 <std>
9000c3a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
9000c3a4:	2201      	movs	r2, #1
9000c3a6:	2109      	movs	r1, #9
9000c3a8:	f7ff ff8e 	bl	9000c2c8 <std>
9000c3ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
9000c3b0:	2202      	movs	r2, #2
9000c3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c3b6:	2112      	movs	r1, #18
9000c3b8:	f7ff bf86 	b.w	9000c2c8 <std>
9000c3bc:	20001494 	.word	0x20001494
9000c3c0:	2000135c 	.word	0x2000135c
9000c3c4:	9000c335 	.word	0x9000c335

9000c3c8 <__sfp_lock_acquire>:
9000c3c8:	4801      	ldr	r0, [pc, #4]	@ (9000c3d0 <__sfp_lock_acquire+0x8>)
9000c3ca:	f000 ba32 	b.w	9000c832 <__retarget_lock_acquire_recursive>
9000c3ce:	bf00      	nop
9000c3d0:	2000149d 	.word	0x2000149d

9000c3d4 <__sfp_lock_release>:
9000c3d4:	4801      	ldr	r0, [pc, #4]	@ (9000c3dc <__sfp_lock_release+0x8>)
9000c3d6:	f000 ba2d 	b.w	9000c834 <__retarget_lock_release_recursive>
9000c3da:	bf00      	nop
9000c3dc:	2000149d 	.word	0x2000149d

9000c3e0 <__sinit>:
9000c3e0:	b510      	push	{r4, lr}
9000c3e2:	4604      	mov	r4, r0
9000c3e4:	f7ff fff0 	bl	9000c3c8 <__sfp_lock_acquire>
9000c3e8:	6a23      	ldr	r3, [r4, #32]
9000c3ea:	b11b      	cbz	r3, 9000c3f4 <__sinit+0x14>
9000c3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c3f0:	f7ff bff0 	b.w	9000c3d4 <__sfp_lock_release>
9000c3f4:	4b04      	ldr	r3, [pc, #16]	@ (9000c408 <__sinit+0x28>)
9000c3f6:	6223      	str	r3, [r4, #32]
9000c3f8:	4b04      	ldr	r3, [pc, #16]	@ (9000c40c <__sinit+0x2c>)
9000c3fa:	681b      	ldr	r3, [r3, #0]
9000c3fc:	2b00      	cmp	r3, #0
9000c3fe:	d1f5      	bne.n	9000c3ec <__sinit+0xc>
9000c400:	f7ff ffc4 	bl	9000c38c <global_stdio_init.part.0>
9000c404:	e7f2      	b.n	9000c3ec <__sinit+0xc>
9000c406:	bf00      	nop
9000c408:	9000c34d 	.word	0x9000c34d
9000c40c:	20001494 	.word	0x20001494

9000c410 <_fwalk_sglue>:
9000c410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000c414:	4607      	mov	r7, r0
9000c416:	4688      	mov	r8, r1
9000c418:	4614      	mov	r4, r2
9000c41a:	2600      	movs	r6, #0
9000c41c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000c420:	f1b9 0901 	subs.w	r9, r9, #1
9000c424:	d505      	bpl.n	9000c432 <_fwalk_sglue+0x22>
9000c426:	6824      	ldr	r4, [r4, #0]
9000c428:	2c00      	cmp	r4, #0
9000c42a:	d1f7      	bne.n	9000c41c <_fwalk_sglue+0xc>
9000c42c:	4630      	mov	r0, r6
9000c42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c432:	89ab      	ldrh	r3, [r5, #12]
9000c434:	2b01      	cmp	r3, #1
9000c436:	d907      	bls.n	9000c448 <_fwalk_sglue+0x38>
9000c438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000c43c:	3301      	adds	r3, #1
9000c43e:	d003      	beq.n	9000c448 <_fwalk_sglue+0x38>
9000c440:	4629      	mov	r1, r5
9000c442:	4638      	mov	r0, r7
9000c444:	47c0      	blx	r8
9000c446:	4306      	orrs	r6, r0
9000c448:	3568      	adds	r5, #104	@ 0x68
9000c44a:	e7e9      	b.n	9000c420 <_fwalk_sglue+0x10>

9000c44c <iprintf>:
9000c44c:	b40f      	push	{r0, r1, r2, r3}
9000c44e:	b507      	push	{r0, r1, r2, lr}
9000c450:	4906      	ldr	r1, [pc, #24]	@ (9000c46c <iprintf+0x20>)
9000c452:	ab04      	add	r3, sp, #16
9000c454:	6808      	ldr	r0, [r1, #0]
9000c456:	f853 2b04 	ldr.w	r2, [r3], #4
9000c45a:	6881      	ldr	r1, [r0, #8]
9000c45c:	9301      	str	r3, [sp, #4]
9000c45e:	f000 fbc5 	bl	9000cbec <_vfiprintf_r>
9000c462:	b003      	add	sp, #12
9000c464:	f85d eb04 	ldr.w	lr, [sp], #4
9000c468:	b004      	add	sp, #16
9000c46a:	4770      	bx	lr
9000c46c:	20000084 	.word	0x20000084

9000c470 <_puts_r>:
9000c470:	6a03      	ldr	r3, [r0, #32]
9000c472:	b570      	push	{r4, r5, r6, lr}
9000c474:	6884      	ldr	r4, [r0, #8]
9000c476:	4605      	mov	r5, r0
9000c478:	460e      	mov	r6, r1
9000c47a:	b90b      	cbnz	r3, 9000c480 <_puts_r+0x10>
9000c47c:	f7ff ffb0 	bl	9000c3e0 <__sinit>
9000c480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c482:	07db      	lsls	r3, r3, #31
9000c484:	d405      	bmi.n	9000c492 <_puts_r+0x22>
9000c486:	89a3      	ldrh	r3, [r4, #12]
9000c488:	0598      	lsls	r0, r3, #22
9000c48a:	d402      	bmi.n	9000c492 <_puts_r+0x22>
9000c48c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c48e:	f000 f9d0 	bl	9000c832 <__retarget_lock_acquire_recursive>
9000c492:	89a3      	ldrh	r3, [r4, #12]
9000c494:	0719      	lsls	r1, r3, #28
9000c496:	d502      	bpl.n	9000c49e <_puts_r+0x2e>
9000c498:	6923      	ldr	r3, [r4, #16]
9000c49a:	2b00      	cmp	r3, #0
9000c49c:	d135      	bne.n	9000c50a <_puts_r+0x9a>
9000c49e:	4621      	mov	r1, r4
9000c4a0:	4628      	mov	r0, r5
9000c4a2:	f000 f8e7 	bl	9000c674 <__swsetup_r>
9000c4a6:	b380      	cbz	r0, 9000c50a <_puts_r+0x9a>
9000c4a8:	f04f 35ff 	mov.w	r5, #4294967295
9000c4ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000c4ae:	07da      	lsls	r2, r3, #31
9000c4b0:	d405      	bmi.n	9000c4be <_puts_r+0x4e>
9000c4b2:	89a3      	ldrh	r3, [r4, #12]
9000c4b4:	059b      	lsls	r3, r3, #22
9000c4b6:	d402      	bmi.n	9000c4be <_puts_r+0x4e>
9000c4b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000c4ba:	f000 f9bb 	bl	9000c834 <__retarget_lock_release_recursive>
9000c4be:	4628      	mov	r0, r5
9000c4c0:	bd70      	pop	{r4, r5, r6, pc}
9000c4c2:	2b00      	cmp	r3, #0
9000c4c4:	da04      	bge.n	9000c4d0 <_puts_r+0x60>
9000c4c6:	69a2      	ldr	r2, [r4, #24]
9000c4c8:	429a      	cmp	r2, r3
9000c4ca:	dc17      	bgt.n	9000c4fc <_puts_r+0x8c>
9000c4cc:	290a      	cmp	r1, #10
9000c4ce:	d015      	beq.n	9000c4fc <_puts_r+0x8c>
9000c4d0:	6823      	ldr	r3, [r4, #0]
9000c4d2:	1c5a      	adds	r2, r3, #1
9000c4d4:	6022      	str	r2, [r4, #0]
9000c4d6:	7019      	strb	r1, [r3, #0]
9000c4d8:	68a3      	ldr	r3, [r4, #8]
9000c4da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000c4de:	3b01      	subs	r3, #1
9000c4e0:	60a3      	str	r3, [r4, #8]
9000c4e2:	2900      	cmp	r1, #0
9000c4e4:	d1ed      	bne.n	9000c4c2 <_puts_r+0x52>
9000c4e6:	2b00      	cmp	r3, #0
9000c4e8:	da11      	bge.n	9000c50e <_puts_r+0x9e>
9000c4ea:	4622      	mov	r2, r4
9000c4ec:	210a      	movs	r1, #10
9000c4ee:	4628      	mov	r0, r5
9000c4f0:	f000 f881 	bl	9000c5f6 <__swbuf_r>
9000c4f4:	3001      	adds	r0, #1
9000c4f6:	d0d7      	beq.n	9000c4a8 <_puts_r+0x38>
9000c4f8:	250a      	movs	r5, #10
9000c4fa:	e7d7      	b.n	9000c4ac <_puts_r+0x3c>
9000c4fc:	4622      	mov	r2, r4
9000c4fe:	4628      	mov	r0, r5
9000c500:	f000 f879 	bl	9000c5f6 <__swbuf_r>
9000c504:	3001      	adds	r0, #1
9000c506:	d1e7      	bne.n	9000c4d8 <_puts_r+0x68>
9000c508:	e7ce      	b.n	9000c4a8 <_puts_r+0x38>
9000c50a:	3e01      	subs	r6, #1
9000c50c:	e7e4      	b.n	9000c4d8 <_puts_r+0x68>
9000c50e:	6823      	ldr	r3, [r4, #0]
9000c510:	1c5a      	adds	r2, r3, #1
9000c512:	6022      	str	r2, [r4, #0]
9000c514:	220a      	movs	r2, #10
9000c516:	701a      	strb	r2, [r3, #0]
9000c518:	e7ee      	b.n	9000c4f8 <_puts_r+0x88>
	...

9000c51c <puts>:
9000c51c:	4b02      	ldr	r3, [pc, #8]	@ (9000c528 <puts+0xc>)
9000c51e:	4601      	mov	r1, r0
9000c520:	6818      	ldr	r0, [r3, #0]
9000c522:	f7ff bfa5 	b.w	9000c470 <_puts_r>
9000c526:	bf00      	nop
9000c528:	20000084 	.word	0x20000084

9000c52c <siprintf>:
9000c52c:	b40e      	push	{r1, r2, r3}
9000c52e:	b510      	push	{r4, lr}
9000c530:	b09d      	sub	sp, #116	@ 0x74
9000c532:	ab1f      	add	r3, sp, #124	@ 0x7c
9000c534:	9002      	str	r0, [sp, #8]
9000c536:	9006      	str	r0, [sp, #24]
9000c538:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
9000c53c:	480a      	ldr	r0, [pc, #40]	@ (9000c568 <siprintf+0x3c>)
9000c53e:	9107      	str	r1, [sp, #28]
9000c540:	9104      	str	r1, [sp, #16]
9000c542:	490a      	ldr	r1, [pc, #40]	@ (9000c56c <siprintf+0x40>)
9000c544:	f853 2b04 	ldr.w	r2, [r3], #4
9000c548:	9105      	str	r1, [sp, #20]
9000c54a:	2400      	movs	r4, #0
9000c54c:	a902      	add	r1, sp, #8
9000c54e:	6800      	ldr	r0, [r0, #0]
9000c550:	9301      	str	r3, [sp, #4]
9000c552:	941b      	str	r4, [sp, #108]	@ 0x6c
9000c554:	f000 fa24 	bl	9000c9a0 <_svfiprintf_r>
9000c558:	9b02      	ldr	r3, [sp, #8]
9000c55a:	701c      	strb	r4, [r3, #0]
9000c55c:	b01d      	add	sp, #116	@ 0x74
9000c55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000c562:	b003      	add	sp, #12
9000c564:	4770      	bx	lr
9000c566:	bf00      	nop
9000c568:	20000084 	.word	0x20000084
9000c56c:	ffff0208 	.word	0xffff0208

9000c570 <__sread>:
9000c570:	b510      	push	{r4, lr}
9000c572:	460c      	mov	r4, r1
9000c574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c578:	f000 f8fc 	bl	9000c774 <_read_r>
9000c57c:	2800      	cmp	r0, #0
9000c57e:	bfab      	itete	ge
9000c580:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
9000c582:	89a3      	ldrhlt	r3, [r4, #12]
9000c584:	181b      	addge	r3, r3, r0
9000c586:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
9000c58a:	bfac      	ite	ge
9000c58c:	6563      	strge	r3, [r4, #84]	@ 0x54
9000c58e:	81a3      	strhlt	r3, [r4, #12]
9000c590:	bd10      	pop	{r4, pc}

9000c592 <__swrite>:
9000c592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c596:	461f      	mov	r7, r3
9000c598:	898b      	ldrh	r3, [r1, #12]
9000c59a:	05db      	lsls	r3, r3, #23
9000c59c:	4605      	mov	r5, r0
9000c59e:	460c      	mov	r4, r1
9000c5a0:	4616      	mov	r6, r2
9000c5a2:	d505      	bpl.n	9000c5b0 <__swrite+0x1e>
9000c5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c5a8:	2302      	movs	r3, #2
9000c5aa:	2200      	movs	r2, #0
9000c5ac:	f000 f8d0 	bl	9000c750 <_lseek_r>
9000c5b0:	89a3      	ldrh	r3, [r4, #12]
9000c5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c5b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
9000c5ba:	81a3      	strh	r3, [r4, #12]
9000c5bc:	4632      	mov	r2, r6
9000c5be:	463b      	mov	r3, r7
9000c5c0:	4628      	mov	r0, r5
9000c5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c5c6:	f000 b8f7 	b.w	9000c7b8 <_write_r>

9000c5ca <__sseek>:
9000c5ca:	b510      	push	{r4, lr}
9000c5cc:	460c      	mov	r4, r1
9000c5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c5d2:	f000 f8bd 	bl	9000c750 <_lseek_r>
9000c5d6:	1c43      	adds	r3, r0, #1
9000c5d8:	89a3      	ldrh	r3, [r4, #12]
9000c5da:	bf15      	itete	ne
9000c5dc:	6560      	strne	r0, [r4, #84]	@ 0x54
9000c5de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
9000c5e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
9000c5e6:	81a3      	strheq	r3, [r4, #12]
9000c5e8:	bf18      	it	ne
9000c5ea:	81a3      	strhne	r3, [r4, #12]
9000c5ec:	bd10      	pop	{r4, pc}

9000c5ee <__sclose>:
9000c5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c5f2:	f000 b89d 	b.w	9000c730 <_close_r>

9000c5f6 <__swbuf_r>:
9000c5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c5f8:	460e      	mov	r6, r1
9000c5fa:	4614      	mov	r4, r2
9000c5fc:	4605      	mov	r5, r0
9000c5fe:	b118      	cbz	r0, 9000c608 <__swbuf_r+0x12>
9000c600:	6a03      	ldr	r3, [r0, #32]
9000c602:	b90b      	cbnz	r3, 9000c608 <__swbuf_r+0x12>
9000c604:	f7ff feec 	bl	9000c3e0 <__sinit>
9000c608:	69a3      	ldr	r3, [r4, #24]
9000c60a:	60a3      	str	r3, [r4, #8]
9000c60c:	89a3      	ldrh	r3, [r4, #12]
9000c60e:	071a      	lsls	r2, r3, #28
9000c610:	d501      	bpl.n	9000c616 <__swbuf_r+0x20>
9000c612:	6923      	ldr	r3, [r4, #16]
9000c614:	b943      	cbnz	r3, 9000c628 <__swbuf_r+0x32>
9000c616:	4621      	mov	r1, r4
9000c618:	4628      	mov	r0, r5
9000c61a:	f000 f82b 	bl	9000c674 <__swsetup_r>
9000c61e:	b118      	cbz	r0, 9000c628 <__swbuf_r+0x32>
9000c620:	f04f 37ff 	mov.w	r7, #4294967295
9000c624:	4638      	mov	r0, r7
9000c626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c628:	6823      	ldr	r3, [r4, #0]
9000c62a:	6922      	ldr	r2, [r4, #16]
9000c62c:	1a98      	subs	r0, r3, r2
9000c62e:	6963      	ldr	r3, [r4, #20]
9000c630:	b2f6      	uxtb	r6, r6
9000c632:	4283      	cmp	r3, r0
9000c634:	4637      	mov	r7, r6
9000c636:	dc05      	bgt.n	9000c644 <__swbuf_r+0x4e>
9000c638:	4621      	mov	r1, r4
9000c63a:	4628      	mov	r0, r5
9000c63c:	f000 fdfe 	bl	9000d23c <_fflush_r>
9000c640:	2800      	cmp	r0, #0
9000c642:	d1ed      	bne.n	9000c620 <__swbuf_r+0x2a>
9000c644:	68a3      	ldr	r3, [r4, #8]
9000c646:	3b01      	subs	r3, #1
9000c648:	60a3      	str	r3, [r4, #8]
9000c64a:	6823      	ldr	r3, [r4, #0]
9000c64c:	1c5a      	adds	r2, r3, #1
9000c64e:	6022      	str	r2, [r4, #0]
9000c650:	701e      	strb	r6, [r3, #0]
9000c652:	6962      	ldr	r2, [r4, #20]
9000c654:	1c43      	adds	r3, r0, #1
9000c656:	429a      	cmp	r2, r3
9000c658:	d004      	beq.n	9000c664 <__swbuf_r+0x6e>
9000c65a:	89a3      	ldrh	r3, [r4, #12]
9000c65c:	07db      	lsls	r3, r3, #31
9000c65e:	d5e1      	bpl.n	9000c624 <__swbuf_r+0x2e>
9000c660:	2e0a      	cmp	r6, #10
9000c662:	d1df      	bne.n	9000c624 <__swbuf_r+0x2e>
9000c664:	4621      	mov	r1, r4
9000c666:	4628      	mov	r0, r5
9000c668:	f000 fde8 	bl	9000d23c <_fflush_r>
9000c66c:	2800      	cmp	r0, #0
9000c66e:	d0d9      	beq.n	9000c624 <__swbuf_r+0x2e>
9000c670:	e7d6      	b.n	9000c620 <__swbuf_r+0x2a>
	...

9000c674 <__swsetup_r>:
9000c674:	b538      	push	{r3, r4, r5, lr}
9000c676:	4b29      	ldr	r3, [pc, #164]	@ (9000c71c <__swsetup_r+0xa8>)
9000c678:	4605      	mov	r5, r0
9000c67a:	6818      	ldr	r0, [r3, #0]
9000c67c:	460c      	mov	r4, r1
9000c67e:	b118      	cbz	r0, 9000c688 <__swsetup_r+0x14>
9000c680:	6a03      	ldr	r3, [r0, #32]
9000c682:	b90b      	cbnz	r3, 9000c688 <__swsetup_r+0x14>
9000c684:	f7ff feac 	bl	9000c3e0 <__sinit>
9000c688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c68c:	0719      	lsls	r1, r3, #28
9000c68e:	d422      	bmi.n	9000c6d6 <__swsetup_r+0x62>
9000c690:	06da      	lsls	r2, r3, #27
9000c692:	d407      	bmi.n	9000c6a4 <__swsetup_r+0x30>
9000c694:	2209      	movs	r2, #9
9000c696:	602a      	str	r2, [r5, #0]
9000c698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c69c:	81a3      	strh	r3, [r4, #12]
9000c69e:	f04f 30ff 	mov.w	r0, #4294967295
9000c6a2:	e033      	b.n	9000c70c <__swsetup_r+0x98>
9000c6a4:	0758      	lsls	r0, r3, #29
9000c6a6:	d512      	bpl.n	9000c6ce <__swsetup_r+0x5a>
9000c6a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000c6aa:	b141      	cbz	r1, 9000c6be <__swsetup_r+0x4a>
9000c6ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000c6b0:	4299      	cmp	r1, r3
9000c6b2:	d002      	beq.n	9000c6ba <__swsetup_r+0x46>
9000c6b4:	4628      	mov	r0, r5
9000c6b6:	f000 f8cd 	bl	9000c854 <_free_r>
9000c6ba:	2300      	movs	r3, #0
9000c6bc:	6363      	str	r3, [r4, #52]	@ 0x34
9000c6be:	89a3      	ldrh	r3, [r4, #12]
9000c6c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
9000c6c4:	81a3      	strh	r3, [r4, #12]
9000c6c6:	2300      	movs	r3, #0
9000c6c8:	6063      	str	r3, [r4, #4]
9000c6ca:	6923      	ldr	r3, [r4, #16]
9000c6cc:	6023      	str	r3, [r4, #0]
9000c6ce:	89a3      	ldrh	r3, [r4, #12]
9000c6d0:	f043 0308 	orr.w	r3, r3, #8
9000c6d4:	81a3      	strh	r3, [r4, #12]
9000c6d6:	6923      	ldr	r3, [r4, #16]
9000c6d8:	b94b      	cbnz	r3, 9000c6ee <__swsetup_r+0x7a>
9000c6da:	89a3      	ldrh	r3, [r4, #12]
9000c6dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
9000c6e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
9000c6e4:	d003      	beq.n	9000c6ee <__swsetup_r+0x7a>
9000c6e6:	4621      	mov	r1, r4
9000c6e8:	4628      	mov	r0, r5
9000c6ea:	f000 fdf5 	bl	9000d2d8 <__smakebuf_r>
9000c6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c6f2:	f013 0201 	ands.w	r2, r3, #1
9000c6f6:	d00a      	beq.n	9000c70e <__swsetup_r+0x9a>
9000c6f8:	2200      	movs	r2, #0
9000c6fa:	60a2      	str	r2, [r4, #8]
9000c6fc:	6962      	ldr	r2, [r4, #20]
9000c6fe:	4252      	negs	r2, r2
9000c700:	61a2      	str	r2, [r4, #24]
9000c702:	6922      	ldr	r2, [r4, #16]
9000c704:	b942      	cbnz	r2, 9000c718 <__swsetup_r+0xa4>
9000c706:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
9000c70a:	d1c5      	bne.n	9000c698 <__swsetup_r+0x24>
9000c70c:	bd38      	pop	{r3, r4, r5, pc}
9000c70e:	0799      	lsls	r1, r3, #30
9000c710:	bf58      	it	pl
9000c712:	6962      	ldrpl	r2, [r4, #20]
9000c714:	60a2      	str	r2, [r4, #8]
9000c716:	e7f4      	b.n	9000c702 <__swsetup_r+0x8e>
9000c718:	2000      	movs	r0, #0
9000c71a:	e7f7      	b.n	9000c70c <__swsetup_r+0x98>
9000c71c:	20000084 	.word	0x20000084

9000c720 <memset>:
9000c720:	4402      	add	r2, r0
9000c722:	4603      	mov	r3, r0
9000c724:	4293      	cmp	r3, r2
9000c726:	d100      	bne.n	9000c72a <memset+0xa>
9000c728:	4770      	bx	lr
9000c72a:	f803 1b01 	strb.w	r1, [r3], #1
9000c72e:	e7f9      	b.n	9000c724 <memset+0x4>

9000c730 <_close_r>:
9000c730:	b538      	push	{r3, r4, r5, lr}
9000c732:	4d06      	ldr	r5, [pc, #24]	@ (9000c74c <_close_r+0x1c>)
9000c734:	2300      	movs	r3, #0
9000c736:	4604      	mov	r4, r0
9000c738:	4608      	mov	r0, r1
9000c73a:	602b      	str	r3, [r5, #0]
9000c73c:	f7f4 fc79 	bl	90001032 <_close>
9000c740:	1c43      	adds	r3, r0, #1
9000c742:	d102      	bne.n	9000c74a <_close_r+0x1a>
9000c744:	682b      	ldr	r3, [r5, #0]
9000c746:	b103      	cbz	r3, 9000c74a <_close_r+0x1a>
9000c748:	6023      	str	r3, [r4, #0]
9000c74a:	bd38      	pop	{r3, r4, r5, pc}
9000c74c:	20001498 	.word	0x20001498

9000c750 <_lseek_r>:
9000c750:	b538      	push	{r3, r4, r5, lr}
9000c752:	4d07      	ldr	r5, [pc, #28]	@ (9000c770 <_lseek_r+0x20>)
9000c754:	4604      	mov	r4, r0
9000c756:	4608      	mov	r0, r1
9000c758:	4611      	mov	r1, r2
9000c75a:	2200      	movs	r2, #0
9000c75c:	602a      	str	r2, [r5, #0]
9000c75e:	461a      	mov	r2, r3
9000c760:	f7f4 fc8e 	bl	90001080 <_lseek>
9000c764:	1c43      	adds	r3, r0, #1
9000c766:	d102      	bne.n	9000c76e <_lseek_r+0x1e>
9000c768:	682b      	ldr	r3, [r5, #0]
9000c76a:	b103      	cbz	r3, 9000c76e <_lseek_r+0x1e>
9000c76c:	6023      	str	r3, [r4, #0]
9000c76e:	bd38      	pop	{r3, r4, r5, pc}
9000c770:	20001498 	.word	0x20001498

9000c774 <_read_r>:
9000c774:	b538      	push	{r3, r4, r5, lr}
9000c776:	4d07      	ldr	r5, [pc, #28]	@ (9000c794 <_read_r+0x20>)
9000c778:	4604      	mov	r4, r0
9000c77a:	4608      	mov	r0, r1
9000c77c:	4611      	mov	r1, r2
9000c77e:	2200      	movs	r2, #0
9000c780:	602a      	str	r2, [r5, #0]
9000c782:	461a      	mov	r2, r3
9000c784:	f7f4 fc1c 	bl	90000fc0 <_read>
9000c788:	1c43      	adds	r3, r0, #1
9000c78a:	d102      	bne.n	9000c792 <_read_r+0x1e>
9000c78c:	682b      	ldr	r3, [r5, #0]
9000c78e:	b103      	cbz	r3, 9000c792 <_read_r+0x1e>
9000c790:	6023      	str	r3, [r4, #0]
9000c792:	bd38      	pop	{r3, r4, r5, pc}
9000c794:	20001498 	.word	0x20001498

9000c798 <_sbrk_r>:
9000c798:	b538      	push	{r3, r4, r5, lr}
9000c79a:	4d06      	ldr	r5, [pc, #24]	@ (9000c7b4 <_sbrk_r+0x1c>)
9000c79c:	2300      	movs	r3, #0
9000c79e:	4604      	mov	r4, r0
9000c7a0:	4608      	mov	r0, r1
9000c7a2:	602b      	str	r3, [r5, #0]
9000c7a4:	f7f4 fc7a 	bl	9000109c <_sbrk>
9000c7a8:	1c43      	adds	r3, r0, #1
9000c7aa:	d102      	bne.n	9000c7b2 <_sbrk_r+0x1a>
9000c7ac:	682b      	ldr	r3, [r5, #0]
9000c7ae:	b103      	cbz	r3, 9000c7b2 <_sbrk_r+0x1a>
9000c7b0:	6023      	str	r3, [r4, #0]
9000c7b2:	bd38      	pop	{r3, r4, r5, pc}
9000c7b4:	20001498 	.word	0x20001498

9000c7b8 <_write_r>:
9000c7b8:	b538      	push	{r3, r4, r5, lr}
9000c7ba:	4d07      	ldr	r5, [pc, #28]	@ (9000c7d8 <_write_r+0x20>)
9000c7bc:	4604      	mov	r4, r0
9000c7be:	4608      	mov	r0, r1
9000c7c0:	4611      	mov	r1, r2
9000c7c2:	2200      	movs	r2, #0
9000c7c4:	602a      	str	r2, [r5, #0]
9000c7c6:	461a      	mov	r2, r3
9000c7c8:	f7f4 fc17 	bl	90000ffa <_write>
9000c7cc:	1c43      	adds	r3, r0, #1
9000c7ce:	d102      	bne.n	9000c7d6 <_write_r+0x1e>
9000c7d0:	682b      	ldr	r3, [r5, #0]
9000c7d2:	b103      	cbz	r3, 9000c7d6 <_write_r+0x1e>
9000c7d4:	6023      	str	r3, [r4, #0]
9000c7d6:	bd38      	pop	{r3, r4, r5, pc}
9000c7d8:	20001498 	.word	0x20001498

9000c7dc <__errno>:
9000c7dc:	4b01      	ldr	r3, [pc, #4]	@ (9000c7e4 <__errno+0x8>)
9000c7de:	6818      	ldr	r0, [r3, #0]
9000c7e0:	4770      	bx	lr
9000c7e2:	bf00      	nop
9000c7e4:	20000084 	.word	0x20000084

9000c7e8 <__libc_init_array>:
9000c7e8:	b570      	push	{r4, r5, r6, lr}
9000c7ea:	4d0d      	ldr	r5, [pc, #52]	@ (9000c820 <__libc_init_array+0x38>)
9000c7ec:	4c0d      	ldr	r4, [pc, #52]	@ (9000c824 <__libc_init_array+0x3c>)
9000c7ee:	1b64      	subs	r4, r4, r5
9000c7f0:	10a4      	asrs	r4, r4, #2
9000c7f2:	2600      	movs	r6, #0
9000c7f4:	42a6      	cmp	r6, r4
9000c7f6:	d109      	bne.n	9000c80c <__libc_init_array+0x24>
9000c7f8:	4d0b      	ldr	r5, [pc, #44]	@ (9000c828 <__libc_init_array+0x40>)
9000c7fa:	4c0c      	ldr	r4, [pc, #48]	@ (9000c82c <__libc_init_array+0x44>)
9000c7fc:	f000 fe1a 	bl	9000d434 <_init>
9000c800:	1b64      	subs	r4, r4, r5
9000c802:	10a4      	asrs	r4, r4, #2
9000c804:	2600      	movs	r6, #0
9000c806:	42a6      	cmp	r6, r4
9000c808:	d105      	bne.n	9000c816 <__libc_init_array+0x2e>
9000c80a:	bd70      	pop	{r4, r5, r6, pc}
9000c80c:	f855 3b04 	ldr.w	r3, [r5], #4
9000c810:	4798      	blx	r3
9000c812:	3601      	adds	r6, #1
9000c814:	e7ee      	b.n	9000c7f4 <__libc_init_array+0xc>
9000c816:	f855 3b04 	ldr.w	r3, [r5], #4
9000c81a:	4798      	blx	r3
9000c81c:	3601      	adds	r6, #1
9000c81e:	e7f2      	b.n	9000c806 <__libc_init_array+0x1e>
9000c820:	9000faa8 	.word	0x9000faa8
9000c824:	9000faa8 	.word	0x9000faa8
9000c828:	9000faa8 	.word	0x9000faa8
9000c82c:	9000faac 	.word	0x9000faac

9000c830 <__retarget_lock_init_recursive>:
9000c830:	4770      	bx	lr

9000c832 <__retarget_lock_acquire_recursive>:
9000c832:	4770      	bx	lr

9000c834 <__retarget_lock_release_recursive>:
9000c834:	4770      	bx	lr

9000c836 <memcpy>:
9000c836:	440a      	add	r2, r1
9000c838:	4291      	cmp	r1, r2
9000c83a:	f100 33ff 	add.w	r3, r0, #4294967295
9000c83e:	d100      	bne.n	9000c842 <memcpy+0xc>
9000c840:	4770      	bx	lr
9000c842:	b510      	push	{r4, lr}
9000c844:	f811 4b01 	ldrb.w	r4, [r1], #1
9000c848:	f803 4f01 	strb.w	r4, [r3, #1]!
9000c84c:	4291      	cmp	r1, r2
9000c84e:	d1f9      	bne.n	9000c844 <memcpy+0xe>
9000c850:	bd10      	pop	{r4, pc}
	...

9000c854 <_free_r>:
9000c854:	b538      	push	{r3, r4, r5, lr}
9000c856:	4605      	mov	r5, r0
9000c858:	2900      	cmp	r1, #0
9000c85a:	d041      	beq.n	9000c8e0 <_free_r+0x8c>
9000c85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c860:	1f0c      	subs	r4, r1, #4
9000c862:	2b00      	cmp	r3, #0
9000c864:	bfb8      	it	lt
9000c866:	18e4      	addlt	r4, r4, r3
9000c868:	f7ff fd22 	bl	9000c2b0 <__malloc_lock>
9000c86c:	4a1d      	ldr	r2, [pc, #116]	@ (9000c8e4 <_free_r+0x90>)
9000c86e:	6813      	ldr	r3, [r2, #0]
9000c870:	b933      	cbnz	r3, 9000c880 <_free_r+0x2c>
9000c872:	6063      	str	r3, [r4, #4]
9000c874:	6014      	str	r4, [r2, #0]
9000c876:	4628      	mov	r0, r5
9000c878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000c87c:	f7ff bd1e 	b.w	9000c2bc <__malloc_unlock>
9000c880:	42a3      	cmp	r3, r4
9000c882:	d908      	bls.n	9000c896 <_free_r+0x42>
9000c884:	6820      	ldr	r0, [r4, #0]
9000c886:	1821      	adds	r1, r4, r0
9000c888:	428b      	cmp	r3, r1
9000c88a:	bf01      	itttt	eq
9000c88c:	6819      	ldreq	r1, [r3, #0]
9000c88e:	685b      	ldreq	r3, [r3, #4]
9000c890:	1809      	addeq	r1, r1, r0
9000c892:	6021      	streq	r1, [r4, #0]
9000c894:	e7ed      	b.n	9000c872 <_free_r+0x1e>
9000c896:	461a      	mov	r2, r3
9000c898:	685b      	ldr	r3, [r3, #4]
9000c89a:	b10b      	cbz	r3, 9000c8a0 <_free_r+0x4c>
9000c89c:	42a3      	cmp	r3, r4
9000c89e:	d9fa      	bls.n	9000c896 <_free_r+0x42>
9000c8a0:	6811      	ldr	r1, [r2, #0]
9000c8a2:	1850      	adds	r0, r2, r1
9000c8a4:	42a0      	cmp	r0, r4
9000c8a6:	d10b      	bne.n	9000c8c0 <_free_r+0x6c>
9000c8a8:	6820      	ldr	r0, [r4, #0]
9000c8aa:	4401      	add	r1, r0
9000c8ac:	1850      	adds	r0, r2, r1
9000c8ae:	4283      	cmp	r3, r0
9000c8b0:	6011      	str	r1, [r2, #0]
9000c8b2:	d1e0      	bne.n	9000c876 <_free_r+0x22>
9000c8b4:	6818      	ldr	r0, [r3, #0]
9000c8b6:	685b      	ldr	r3, [r3, #4]
9000c8b8:	6053      	str	r3, [r2, #4]
9000c8ba:	4408      	add	r0, r1
9000c8bc:	6010      	str	r0, [r2, #0]
9000c8be:	e7da      	b.n	9000c876 <_free_r+0x22>
9000c8c0:	d902      	bls.n	9000c8c8 <_free_r+0x74>
9000c8c2:	230c      	movs	r3, #12
9000c8c4:	602b      	str	r3, [r5, #0]
9000c8c6:	e7d6      	b.n	9000c876 <_free_r+0x22>
9000c8c8:	6820      	ldr	r0, [r4, #0]
9000c8ca:	1821      	adds	r1, r4, r0
9000c8cc:	428b      	cmp	r3, r1
9000c8ce:	bf04      	itt	eq
9000c8d0:	6819      	ldreq	r1, [r3, #0]
9000c8d2:	685b      	ldreq	r3, [r3, #4]
9000c8d4:	6063      	str	r3, [r4, #4]
9000c8d6:	bf04      	itt	eq
9000c8d8:	1809      	addeq	r1, r1, r0
9000c8da:	6021      	streq	r1, [r4, #0]
9000c8dc:	6054      	str	r4, [r2, #4]
9000c8de:	e7ca      	b.n	9000c876 <_free_r+0x22>
9000c8e0:	bd38      	pop	{r3, r4, r5, pc}
9000c8e2:	bf00      	nop
9000c8e4:	20001358 	.word	0x20001358

9000c8e8 <__ssputs_r>:
9000c8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c8ec:	688e      	ldr	r6, [r1, #8]
9000c8ee:	461f      	mov	r7, r3
9000c8f0:	42be      	cmp	r6, r7
9000c8f2:	680b      	ldr	r3, [r1, #0]
9000c8f4:	4682      	mov	sl, r0
9000c8f6:	460c      	mov	r4, r1
9000c8f8:	4690      	mov	r8, r2
9000c8fa:	d82d      	bhi.n	9000c958 <__ssputs_r+0x70>
9000c8fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000c900:	f412 6f90 	tst.w	r2, #1152	@ 0x480
9000c904:	d026      	beq.n	9000c954 <__ssputs_r+0x6c>
9000c906:	6965      	ldr	r5, [r4, #20]
9000c908:	6909      	ldr	r1, [r1, #16]
9000c90a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000c90e:	eba3 0901 	sub.w	r9, r3, r1
9000c912:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000c916:	1c7b      	adds	r3, r7, #1
9000c918:	444b      	add	r3, r9
9000c91a:	106d      	asrs	r5, r5, #1
9000c91c:	429d      	cmp	r5, r3
9000c91e:	bf38      	it	cc
9000c920:	461d      	movcc	r5, r3
9000c922:	0553      	lsls	r3, r2, #21
9000c924:	d527      	bpl.n	9000c976 <__ssputs_r+0x8e>
9000c926:	4629      	mov	r1, r5
9000c928:	f7ff fc42 	bl	9000c1b0 <_malloc_r>
9000c92c:	4606      	mov	r6, r0
9000c92e:	b360      	cbz	r0, 9000c98a <__ssputs_r+0xa2>
9000c930:	6921      	ldr	r1, [r4, #16]
9000c932:	464a      	mov	r2, r9
9000c934:	f7ff ff7f 	bl	9000c836 <memcpy>
9000c938:	89a3      	ldrh	r3, [r4, #12]
9000c93a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
9000c93e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000c942:	81a3      	strh	r3, [r4, #12]
9000c944:	6126      	str	r6, [r4, #16]
9000c946:	6165      	str	r5, [r4, #20]
9000c948:	444e      	add	r6, r9
9000c94a:	eba5 0509 	sub.w	r5, r5, r9
9000c94e:	6026      	str	r6, [r4, #0]
9000c950:	60a5      	str	r5, [r4, #8]
9000c952:	463e      	mov	r6, r7
9000c954:	42be      	cmp	r6, r7
9000c956:	d900      	bls.n	9000c95a <__ssputs_r+0x72>
9000c958:	463e      	mov	r6, r7
9000c95a:	6820      	ldr	r0, [r4, #0]
9000c95c:	4632      	mov	r2, r6
9000c95e:	4641      	mov	r1, r8
9000c960:	f000 fcf6 	bl	9000d350 <memmove>
9000c964:	68a3      	ldr	r3, [r4, #8]
9000c966:	1b9b      	subs	r3, r3, r6
9000c968:	60a3      	str	r3, [r4, #8]
9000c96a:	6823      	ldr	r3, [r4, #0]
9000c96c:	4433      	add	r3, r6
9000c96e:	6023      	str	r3, [r4, #0]
9000c970:	2000      	movs	r0, #0
9000c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c976:	462a      	mov	r2, r5
9000c978:	f000 fd26 	bl	9000d3c8 <_realloc_r>
9000c97c:	4606      	mov	r6, r0
9000c97e:	2800      	cmp	r0, #0
9000c980:	d1e0      	bne.n	9000c944 <__ssputs_r+0x5c>
9000c982:	6921      	ldr	r1, [r4, #16]
9000c984:	4650      	mov	r0, sl
9000c986:	f7ff ff65 	bl	9000c854 <_free_r>
9000c98a:	230c      	movs	r3, #12
9000c98c:	f8ca 3000 	str.w	r3, [sl]
9000c990:	89a3      	ldrh	r3, [r4, #12]
9000c992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000c996:	81a3      	strh	r3, [r4, #12]
9000c998:	f04f 30ff 	mov.w	r0, #4294967295
9000c99c:	e7e9      	b.n	9000c972 <__ssputs_r+0x8a>
	...

9000c9a0 <_svfiprintf_r>:
9000c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c9a4:	4698      	mov	r8, r3
9000c9a6:	898b      	ldrh	r3, [r1, #12]
9000c9a8:	061b      	lsls	r3, r3, #24
9000c9aa:	b09d      	sub	sp, #116	@ 0x74
9000c9ac:	4607      	mov	r7, r0
9000c9ae:	460d      	mov	r5, r1
9000c9b0:	4614      	mov	r4, r2
9000c9b2:	d510      	bpl.n	9000c9d6 <_svfiprintf_r+0x36>
9000c9b4:	690b      	ldr	r3, [r1, #16]
9000c9b6:	b973      	cbnz	r3, 9000c9d6 <_svfiprintf_r+0x36>
9000c9b8:	2140      	movs	r1, #64	@ 0x40
9000c9ba:	f7ff fbf9 	bl	9000c1b0 <_malloc_r>
9000c9be:	6028      	str	r0, [r5, #0]
9000c9c0:	6128      	str	r0, [r5, #16]
9000c9c2:	b930      	cbnz	r0, 9000c9d2 <_svfiprintf_r+0x32>
9000c9c4:	230c      	movs	r3, #12
9000c9c6:	603b      	str	r3, [r7, #0]
9000c9c8:	f04f 30ff 	mov.w	r0, #4294967295
9000c9cc:	b01d      	add	sp, #116	@ 0x74
9000c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000c9d2:	2340      	movs	r3, #64	@ 0x40
9000c9d4:	616b      	str	r3, [r5, #20]
9000c9d6:	2300      	movs	r3, #0
9000c9d8:	9309      	str	r3, [sp, #36]	@ 0x24
9000c9da:	2320      	movs	r3, #32
9000c9dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000c9e0:	f8cd 800c 	str.w	r8, [sp, #12]
9000c9e4:	2330      	movs	r3, #48	@ 0x30
9000c9e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 9000cb84 <_svfiprintf_r+0x1e4>
9000c9ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000c9ee:	f04f 0901 	mov.w	r9, #1
9000c9f2:	4623      	mov	r3, r4
9000c9f4:	469a      	mov	sl, r3
9000c9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
9000c9fa:	b10a      	cbz	r2, 9000ca00 <_svfiprintf_r+0x60>
9000c9fc:	2a25      	cmp	r2, #37	@ 0x25
9000c9fe:	d1f9      	bne.n	9000c9f4 <_svfiprintf_r+0x54>
9000ca00:	ebba 0b04 	subs.w	fp, sl, r4
9000ca04:	d00b      	beq.n	9000ca1e <_svfiprintf_r+0x7e>
9000ca06:	465b      	mov	r3, fp
9000ca08:	4622      	mov	r2, r4
9000ca0a:	4629      	mov	r1, r5
9000ca0c:	4638      	mov	r0, r7
9000ca0e:	f7ff ff6b 	bl	9000c8e8 <__ssputs_r>
9000ca12:	3001      	adds	r0, #1
9000ca14:	f000 80a7 	beq.w	9000cb66 <_svfiprintf_r+0x1c6>
9000ca18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000ca1a:	445a      	add	r2, fp
9000ca1c:	9209      	str	r2, [sp, #36]	@ 0x24
9000ca1e:	f89a 3000 	ldrb.w	r3, [sl]
9000ca22:	2b00      	cmp	r3, #0
9000ca24:	f000 809f 	beq.w	9000cb66 <_svfiprintf_r+0x1c6>
9000ca28:	2300      	movs	r3, #0
9000ca2a:	f04f 32ff 	mov.w	r2, #4294967295
9000ca2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000ca32:	f10a 0a01 	add.w	sl, sl, #1
9000ca36:	9304      	str	r3, [sp, #16]
9000ca38:	9307      	str	r3, [sp, #28]
9000ca3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000ca3e:	931a      	str	r3, [sp, #104]	@ 0x68
9000ca40:	4654      	mov	r4, sl
9000ca42:	2205      	movs	r2, #5
9000ca44:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ca48:	484e      	ldr	r0, [pc, #312]	@ (9000cb84 <_svfiprintf_r+0x1e4>)
9000ca4a:	f7f3 fc49 	bl	900002e0 <memchr>
9000ca4e:	9a04      	ldr	r2, [sp, #16]
9000ca50:	b9d8      	cbnz	r0, 9000ca8a <_svfiprintf_r+0xea>
9000ca52:	06d0      	lsls	r0, r2, #27
9000ca54:	bf44      	itt	mi
9000ca56:	2320      	movmi	r3, #32
9000ca58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000ca5c:	0711      	lsls	r1, r2, #28
9000ca5e:	bf44      	itt	mi
9000ca60:	232b      	movmi	r3, #43	@ 0x2b
9000ca62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000ca66:	f89a 3000 	ldrb.w	r3, [sl]
9000ca6a:	2b2a      	cmp	r3, #42	@ 0x2a
9000ca6c:	d015      	beq.n	9000ca9a <_svfiprintf_r+0xfa>
9000ca6e:	9a07      	ldr	r2, [sp, #28]
9000ca70:	4654      	mov	r4, sl
9000ca72:	2000      	movs	r0, #0
9000ca74:	f04f 0c0a 	mov.w	ip, #10
9000ca78:	4621      	mov	r1, r4
9000ca7a:	f811 3b01 	ldrb.w	r3, [r1], #1
9000ca7e:	3b30      	subs	r3, #48	@ 0x30
9000ca80:	2b09      	cmp	r3, #9
9000ca82:	d94b      	bls.n	9000cb1c <_svfiprintf_r+0x17c>
9000ca84:	b1b0      	cbz	r0, 9000cab4 <_svfiprintf_r+0x114>
9000ca86:	9207      	str	r2, [sp, #28]
9000ca88:	e014      	b.n	9000cab4 <_svfiprintf_r+0x114>
9000ca8a:	eba0 0308 	sub.w	r3, r0, r8
9000ca8e:	fa09 f303 	lsl.w	r3, r9, r3
9000ca92:	4313      	orrs	r3, r2
9000ca94:	9304      	str	r3, [sp, #16]
9000ca96:	46a2      	mov	sl, r4
9000ca98:	e7d2      	b.n	9000ca40 <_svfiprintf_r+0xa0>
9000ca9a:	9b03      	ldr	r3, [sp, #12]
9000ca9c:	1d19      	adds	r1, r3, #4
9000ca9e:	681b      	ldr	r3, [r3, #0]
9000caa0:	9103      	str	r1, [sp, #12]
9000caa2:	2b00      	cmp	r3, #0
9000caa4:	bfbb      	ittet	lt
9000caa6:	425b      	neglt	r3, r3
9000caa8:	f042 0202 	orrlt.w	r2, r2, #2
9000caac:	9307      	strge	r3, [sp, #28]
9000caae:	9307      	strlt	r3, [sp, #28]
9000cab0:	bfb8      	it	lt
9000cab2:	9204      	strlt	r2, [sp, #16]
9000cab4:	7823      	ldrb	r3, [r4, #0]
9000cab6:	2b2e      	cmp	r3, #46	@ 0x2e
9000cab8:	d10a      	bne.n	9000cad0 <_svfiprintf_r+0x130>
9000caba:	7863      	ldrb	r3, [r4, #1]
9000cabc:	2b2a      	cmp	r3, #42	@ 0x2a
9000cabe:	d132      	bne.n	9000cb26 <_svfiprintf_r+0x186>
9000cac0:	9b03      	ldr	r3, [sp, #12]
9000cac2:	1d1a      	adds	r2, r3, #4
9000cac4:	681b      	ldr	r3, [r3, #0]
9000cac6:	9203      	str	r2, [sp, #12]
9000cac8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cacc:	3402      	adds	r4, #2
9000cace:	9305      	str	r3, [sp, #20]
9000cad0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 9000cb94 <_svfiprintf_r+0x1f4>
9000cad4:	7821      	ldrb	r1, [r4, #0]
9000cad6:	2203      	movs	r2, #3
9000cad8:	4650      	mov	r0, sl
9000cada:	f7f3 fc01 	bl	900002e0 <memchr>
9000cade:	b138      	cbz	r0, 9000caf0 <_svfiprintf_r+0x150>
9000cae0:	9b04      	ldr	r3, [sp, #16]
9000cae2:	eba0 000a 	sub.w	r0, r0, sl
9000cae6:	2240      	movs	r2, #64	@ 0x40
9000cae8:	4082      	lsls	r2, r0
9000caea:	4313      	orrs	r3, r2
9000caec:	3401      	adds	r4, #1
9000caee:	9304      	str	r3, [sp, #16]
9000caf0:	f814 1b01 	ldrb.w	r1, [r4], #1
9000caf4:	4824      	ldr	r0, [pc, #144]	@ (9000cb88 <_svfiprintf_r+0x1e8>)
9000caf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cafa:	2206      	movs	r2, #6
9000cafc:	f7f3 fbf0 	bl	900002e0 <memchr>
9000cb00:	2800      	cmp	r0, #0
9000cb02:	d036      	beq.n	9000cb72 <_svfiprintf_r+0x1d2>
9000cb04:	4b21      	ldr	r3, [pc, #132]	@ (9000cb8c <_svfiprintf_r+0x1ec>)
9000cb06:	bb1b      	cbnz	r3, 9000cb50 <_svfiprintf_r+0x1b0>
9000cb08:	9b03      	ldr	r3, [sp, #12]
9000cb0a:	3307      	adds	r3, #7
9000cb0c:	f023 0307 	bic.w	r3, r3, #7
9000cb10:	3308      	adds	r3, #8
9000cb12:	9303      	str	r3, [sp, #12]
9000cb14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cb16:	4433      	add	r3, r6
9000cb18:	9309      	str	r3, [sp, #36]	@ 0x24
9000cb1a:	e76a      	b.n	9000c9f2 <_svfiprintf_r+0x52>
9000cb1c:	fb0c 3202 	mla	r2, ip, r2, r3
9000cb20:	460c      	mov	r4, r1
9000cb22:	2001      	movs	r0, #1
9000cb24:	e7a8      	b.n	9000ca78 <_svfiprintf_r+0xd8>
9000cb26:	2300      	movs	r3, #0
9000cb28:	3401      	adds	r4, #1
9000cb2a:	9305      	str	r3, [sp, #20]
9000cb2c:	4619      	mov	r1, r3
9000cb2e:	f04f 0c0a 	mov.w	ip, #10
9000cb32:	4620      	mov	r0, r4
9000cb34:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cb38:	3a30      	subs	r2, #48	@ 0x30
9000cb3a:	2a09      	cmp	r2, #9
9000cb3c:	d903      	bls.n	9000cb46 <_svfiprintf_r+0x1a6>
9000cb3e:	2b00      	cmp	r3, #0
9000cb40:	d0c6      	beq.n	9000cad0 <_svfiprintf_r+0x130>
9000cb42:	9105      	str	r1, [sp, #20]
9000cb44:	e7c4      	b.n	9000cad0 <_svfiprintf_r+0x130>
9000cb46:	fb0c 2101 	mla	r1, ip, r1, r2
9000cb4a:	4604      	mov	r4, r0
9000cb4c:	2301      	movs	r3, #1
9000cb4e:	e7f0      	b.n	9000cb32 <_svfiprintf_r+0x192>
9000cb50:	ab03      	add	r3, sp, #12
9000cb52:	9300      	str	r3, [sp, #0]
9000cb54:	462a      	mov	r2, r5
9000cb56:	4b0e      	ldr	r3, [pc, #56]	@ (9000cb90 <_svfiprintf_r+0x1f0>)
9000cb58:	a904      	add	r1, sp, #16
9000cb5a:	4638      	mov	r0, r7
9000cb5c:	f3af 8000 	nop.w
9000cb60:	1c42      	adds	r2, r0, #1
9000cb62:	4606      	mov	r6, r0
9000cb64:	d1d6      	bne.n	9000cb14 <_svfiprintf_r+0x174>
9000cb66:	89ab      	ldrh	r3, [r5, #12]
9000cb68:	065b      	lsls	r3, r3, #25
9000cb6a:	f53f af2d 	bmi.w	9000c9c8 <_svfiprintf_r+0x28>
9000cb6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cb70:	e72c      	b.n	9000c9cc <_svfiprintf_r+0x2c>
9000cb72:	ab03      	add	r3, sp, #12
9000cb74:	9300      	str	r3, [sp, #0]
9000cb76:	462a      	mov	r2, r5
9000cb78:	4b05      	ldr	r3, [pc, #20]	@ (9000cb90 <_svfiprintf_r+0x1f0>)
9000cb7a:	a904      	add	r1, sp, #16
9000cb7c:	4638      	mov	r0, r7
9000cb7e:	f000 f9bb 	bl	9000cef8 <_printf_i>
9000cb82:	e7ed      	b.n	9000cb60 <_svfiprintf_r+0x1c0>
9000cb84:	9000fa6c 	.word	0x9000fa6c
9000cb88:	9000fa76 	.word	0x9000fa76
9000cb8c:	00000000 	.word	0x00000000
9000cb90:	9000c8e9 	.word	0x9000c8e9
9000cb94:	9000fa72 	.word	0x9000fa72

9000cb98 <__sfputc_r>:
9000cb98:	6893      	ldr	r3, [r2, #8]
9000cb9a:	3b01      	subs	r3, #1
9000cb9c:	2b00      	cmp	r3, #0
9000cb9e:	b410      	push	{r4}
9000cba0:	6093      	str	r3, [r2, #8]
9000cba2:	da08      	bge.n	9000cbb6 <__sfputc_r+0x1e>
9000cba4:	6994      	ldr	r4, [r2, #24]
9000cba6:	42a3      	cmp	r3, r4
9000cba8:	db01      	blt.n	9000cbae <__sfputc_r+0x16>
9000cbaa:	290a      	cmp	r1, #10
9000cbac:	d103      	bne.n	9000cbb6 <__sfputc_r+0x1e>
9000cbae:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cbb2:	f7ff bd20 	b.w	9000c5f6 <__swbuf_r>
9000cbb6:	6813      	ldr	r3, [r2, #0]
9000cbb8:	1c58      	adds	r0, r3, #1
9000cbba:	6010      	str	r0, [r2, #0]
9000cbbc:	7019      	strb	r1, [r3, #0]
9000cbbe:	4608      	mov	r0, r1
9000cbc0:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cbc4:	4770      	bx	lr

9000cbc6 <__sfputs_r>:
9000cbc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cbc8:	4606      	mov	r6, r0
9000cbca:	460f      	mov	r7, r1
9000cbcc:	4614      	mov	r4, r2
9000cbce:	18d5      	adds	r5, r2, r3
9000cbd0:	42ac      	cmp	r4, r5
9000cbd2:	d101      	bne.n	9000cbd8 <__sfputs_r+0x12>
9000cbd4:	2000      	movs	r0, #0
9000cbd6:	e007      	b.n	9000cbe8 <__sfputs_r+0x22>
9000cbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cbdc:	463a      	mov	r2, r7
9000cbde:	4630      	mov	r0, r6
9000cbe0:	f7ff ffda 	bl	9000cb98 <__sfputc_r>
9000cbe4:	1c43      	adds	r3, r0, #1
9000cbe6:	d1f3      	bne.n	9000cbd0 <__sfputs_r+0xa>
9000cbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000cbec <_vfiprintf_r>:
9000cbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000cbf0:	460d      	mov	r5, r1
9000cbf2:	b09d      	sub	sp, #116	@ 0x74
9000cbf4:	4614      	mov	r4, r2
9000cbf6:	4698      	mov	r8, r3
9000cbf8:	4606      	mov	r6, r0
9000cbfa:	b118      	cbz	r0, 9000cc04 <_vfiprintf_r+0x18>
9000cbfc:	6a03      	ldr	r3, [r0, #32]
9000cbfe:	b90b      	cbnz	r3, 9000cc04 <_vfiprintf_r+0x18>
9000cc00:	f7ff fbee 	bl	9000c3e0 <__sinit>
9000cc04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cc06:	07d9      	lsls	r1, r3, #31
9000cc08:	d405      	bmi.n	9000cc16 <_vfiprintf_r+0x2a>
9000cc0a:	89ab      	ldrh	r3, [r5, #12]
9000cc0c:	059a      	lsls	r2, r3, #22
9000cc0e:	d402      	bmi.n	9000cc16 <_vfiprintf_r+0x2a>
9000cc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cc12:	f7ff fe0e 	bl	9000c832 <__retarget_lock_acquire_recursive>
9000cc16:	89ab      	ldrh	r3, [r5, #12]
9000cc18:	071b      	lsls	r3, r3, #28
9000cc1a:	d501      	bpl.n	9000cc20 <_vfiprintf_r+0x34>
9000cc1c:	692b      	ldr	r3, [r5, #16]
9000cc1e:	b99b      	cbnz	r3, 9000cc48 <_vfiprintf_r+0x5c>
9000cc20:	4629      	mov	r1, r5
9000cc22:	4630      	mov	r0, r6
9000cc24:	f7ff fd26 	bl	9000c674 <__swsetup_r>
9000cc28:	b170      	cbz	r0, 9000cc48 <_vfiprintf_r+0x5c>
9000cc2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cc2c:	07dc      	lsls	r4, r3, #31
9000cc2e:	d504      	bpl.n	9000cc3a <_vfiprintf_r+0x4e>
9000cc30:	f04f 30ff 	mov.w	r0, #4294967295
9000cc34:	b01d      	add	sp, #116	@ 0x74
9000cc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000cc3a:	89ab      	ldrh	r3, [r5, #12]
9000cc3c:	0598      	lsls	r0, r3, #22
9000cc3e:	d4f7      	bmi.n	9000cc30 <_vfiprintf_r+0x44>
9000cc40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cc42:	f7ff fdf7 	bl	9000c834 <__retarget_lock_release_recursive>
9000cc46:	e7f3      	b.n	9000cc30 <_vfiprintf_r+0x44>
9000cc48:	2300      	movs	r3, #0
9000cc4a:	9309      	str	r3, [sp, #36]	@ 0x24
9000cc4c:	2320      	movs	r3, #32
9000cc4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
9000cc52:	f8cd 800c 	str.w	r8, [sp, #12]
9000cc56:	2330      	movs	r3, #48	@ 0x30
9000cc58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 9000ce08 <_vfiprintf_r+0x21c>
9000cc5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
9000cc60:	f04f 0901 	mov.w	r9, #1
9000cc64:	4623      	mov	r3, r4
9000cc66:	469a      	mov	sl, r3
9000cc68:	f813 2b01 	ldrb.w	r2, [r3], #1
9000cc6c:	b10a      	cbz	r2, 9000cc72 <_vfiprintf_r+0x86>
9000cc6e:	2a25      	cmp	r2, #37	@ 0x25
9000cc70:	d1f9      	bne.n	9000cc66 <_vfiprintf_r+0x7a>
9000cc72:	ebba 0b04 	subs.w	fp, sl, r4
9000cc76:	d00b      	beq.n	9000cc90 <_vfiprintf_r+0xa4>
9000cc78:	465b      	mov	r3, fp
9000cc7a:	4622      	mov	r2, r4
9000cc7c:	4629      	mov	r1, r5
9000cc7e:	4630      	mov	r0, r6
9000cc80:	f7ff ffa1 	bl	9000cbc6 <__sfputs_r>
9000cc84:	3001      	adds	r0, #1
9000cc86:	f000 80a7 	beq.w	9000cdd8 <_vfiprintf_r+0x1ec>
9000cc8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
9000cc8c:	445a      	add	r2, fp
9000cc8e:	9209      	str	r2, [sp, #36]	@ 0x24
9000cc90:	f89a 3000 	ldrb.w	r3, [sl]
9000cc94:	2b00      	cmp	r3, #0
9000cc96:	f000 809f 	beq.w	9000cdd8 <_vfiprintf_r+0x1ec>
9000cc9a:	2300      	movs	r3, #0
9000cc9c:	f04f 32ff 	mov.w	r2, #4294967295
9000cca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000cca4:	f10a 0a01 	add.w	sl, sl, #1
9000cca8:	9304      	str	r3, [sp, #16]
9000ccaa:	9307      	str	r3, [sp, #28]
9000ccac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
9000ccb0:	931a      	str	r3, [sp, #104]	@ 0x68
9000ccb2:	4654      	mov	r4, sl
9000ccb4:	2205      	movs	r2, #5
9000ccb6:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ccba:	4853      	ldr	r0, [pc, #332]	@ (9000ce08 <_vfiprintf_r+0x21c>)
9000ccbc:	f7f3 fb10 	bl	900002e0 <memchr>
9000ccc0:	9a04      	ldr	r2, [sp, #16]
9000ccc2:	b9d8      	cbnz	r0, 9000ccfc <_vfiprintf_r+0x110>
9000ccc4:	06d1      	lsls	r1, r2, #27
9000ccc6:	bf44      	itt	mi
9000ccc8:	2320      	movmi	r3, #32
9000ccca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000ccce:	0713      	lsls	r3, r2, #28
9000ccd0:	bf44      	itt	mi
9000ccd2:	232b      	movmi	r3, #43	@ 0x2b
9000ccd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
9000ccd8:	f89a 3000 	ldrb.w	r3, [sl]
9000ccdc:	2b2a      	cmp	r3, #42	@ 0x2a
9000ccde:	d015      	beq.n	9000cd0c <_vfiprintf_r+0x120>
9000cce0:	9a07      	ldr	r2, [sp, #28]
9000cce2:	4654      	mov	r4, sl
9000cce4:	2000      	movs	r0, #0
9000cce6:	f04f 0c0a 	mov.w	ip, #10
9000ccea:	4621      	mov	r1, r4
9000ccec:	f811 3b01 	ldrb.w	r3, [r1], #1
9000ccf0:	3b30      	subs	r3, #48	@ 0x30
9000ccf2:	2b09      	cmp	r3, #9
9000ccf4:	d94b      	bls.n	9000cd8e <_vfiprintf_r+0x1a2>
9000ccf6:	b1b0      	cbz	r0, 9000cd26 <_vfiprintf_r+0x13a>
9000ccf8:	9207      	str	r2, [sp, #28]
9000ccfa:	e014      	b.n	9000cd26 <_vfiprintf_r+0x13a>
9000ccfc:	eba0 0308 	sub.w	r3, r0, r8
9000cd00:	fa09 f303 	lsl.w	r3, r9, r3
9000cd04:	4313      	orrs	r3, r2
9000cd06:	9304      	str	r3, [sp, #16]
9000cd08:	46a2      	mov	sl, r4
9000cd0a:	e7d2      	b.n	9000ccb2 <_vfiprintf_r+0xc6>
9000cd0c:	9b03      	ldr	r3, [sp, #12]
9000cd0e:	1d19      	adds	r1, r3, #4
9000cd10:	681b      	ldr	r3, [r3, #0]
9000cd12:	9103      	str	r1, [sp, #12]
9000cd14:	2b00      	cmp	r3, #0
9000cd16:	bfbb      	ittet	lt
9000cd18:	425b      	neglt	r3, r3
9000cd1a:	f042 0202 	orrlt.w	r2, r2, #2
9000cd1e:	9307      	strge	r3, [sp, #28]
9000cd20:	9307      	strlt	r3, [sp, #28]
9000cd22:	bfb8      	it	lt
9000cd24:	9204      	strlt	r2, [sp, #16]
9000cd26:	7823      	ldrb	r3, [r4, #0]
9000cd28:	2b2e      	cmp	r3, #46	@ 0x2e
9000cd2a:	d10a      	bne.n	9000cd42 <_vfiprintf_r+0x156>
9000cd2c:	7863      	ldrb	r3, [r4, #1]
9000cd2e:	2b2a      	cmp	r3, #42	@ 0x2a
9000cd30:	d132      	bne.n	9000cd98 <_vfiprintf_r+0x1ac>
9000cd32:	9b03      	ldr	r3, [sp, #12]
9000cd34:	1d1a      	adds	r2, r3, #4
9000cd36:	681b      	ldr	r3, [r3, #0]
9000cd38:	9203      	str	r2, [sp, #12]
9000cd3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
9000cd3e:	3402      	adds	r4, #2
9000cd40:	9305      	str	r3, [sp, #20]
9000cd42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 9000ce18 <_vfiprintf_r+0x22c>
9000cd46:	7821      	ldrb	r1, [r4, #0]
9000cd48:	2203      	movs	r2, #3
9000cd4a:	4650      	mov	r0, sl
9000cd4c:	f7f3 fac8 	bl	900002e0 <memchr>
9000cd50:	b138      	cbz	r0, 9000cd62 <_vfiprintf_r+0x176>
9000cd52:	9b04      	ldr	r3, [sp, #16]
9000cd54:	eba0 000a 	sub.w	r0, r0, sl
9000cd58:	2240      	movs	r2, #64	@ 0x40
9000cd5a:	4082      	lsls	r2, r0
9000cd5c:	4313      	orrs	r3, r2
9000cd5e:	3401      	adds	r4, #1
9000cd60:	9304      	str	r3, [sp, #16]
9000cd62:	f814 1b01 	ldrb.w	r1, [r4], #1
9000cd66:	4829      	ldr	r0, [pc, #164]	@ (9000ce0c <_vfiprintf_r+0x220>)
9000cd68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
9000cd6c:	2206      	movs	r2, #6
9000cd6e:	f7f3 fab7 	bl	900002e0 <memchr>
9000cd72:	2800      	cmp	r0, #0
9000cd74:	d03f      	beq.n	9000cdf6 <_vfiprintf_r+0x20a>
9000cd76:	4b26      	ldr	r3, [pc, #152]	@ (9000ce10 <_vfiprintf_r+0x224>)
9000cd78:	bb1b      	cbnz	r3, 9000cdc2 <_vfiprintf_r+0x1d6>
9000cd7a:	9b03      	ldr	r3, [sp, #12]
9000cd7c:	3307      	adds	r3, #7
9000cd7e:	f023 0307 	bic.w	r3, r3, #7
9000cd82:	3308      	adds	r3, #8
9000cd84:	9303      	str	r3, [sp, #12]
9000cd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
9000cd88:	443b      	add	r3, r7
9000cd8a:	9309      	str	r3, [sp, #36]	@ 0x24
9000cd8c:	e76a      	b.n	9000cc64 <_vfiprintf_r+0x78>
9000cd8e:	fb0c 3202 	mla	r2, ip, r2, r3
9000cd92:	460c      	mov	r4, r1
9000cd94:	2001      	movs	r0, #1
9000cd96:	e7a8      	b.n	9000ccea <_vfiprintf_r+0xfe>
9000cd98:	2300      	movs	r3, #0
9000cd9a:	3401      	adds	r4, #1
9000cd9c:	9305      	str	r3, [sp, #20]
9000cd9e:	4619      	mov	r1, r3
9000cda0:	f04f 0c0a 	mov.w	ip, #10
9000cda4:	4620      	mov	r0, r4
9000cda6:	f810 2b01 	ldrb.w	r2, [r0], #1
9000cdaa:	3a30      	subs	r2, #48	@ 0x30
9000cdac:	2a09      	cmp	r2, #9
9000cdae:	d903      	bls.n	9000cdb8 <_vfiprintf_r+0x1cc>
9000cdb0:	2b00      	cmp	r3, #0
9000cdb2:	d0c6      	beq.n	9000cd42 <_vfiprintf_r+0x156>
9000cdb4:	9105      	str	r1, [sp, #20]
9000cdb6:	e7c4      	b.n	9000cd42 <_vfiprintf_r+0x156>
9000cdb8:	fb0c 2101 	mla	r1, ip, r1, r2
9000cdbc:	4604      	mov	r4, r0
9000cdbe:	2301      	movs	r3, #1
9000cdc0:	e7f0      	b.n	9000cda4 <_vfiprintf_r+0x1b8>
9000cdc2:	ab03      	add	r3, sp, #12
9000cdc4:	9300      	str	r3, [sp, #0]
9000cdc6:	462a      	mov	r2, r5
9000cdc8:	4b12      	ldr	r3, [pc, #72]	@ (9000ce14 <_vfiprintf_r+0x228>)
9000cdca:	a904      	add	r1, sp, #16
9000cdcc:	4630      	mov	r0, r6
9000cdce:	f3af 8000 	nop.w
9000cdd2:	4607      	mov	r7, r0
9000cdd4:	1c78      	adds	r0, r7, #1
9000cdd6:	d1d6      	bne.n	9000cd86 <_vfiprintf_r+0x19a>
9000cdd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
9000cdda:	07d9      	lsls	r1, r3, #31
9000cddc:	d405      	bmi.n	9000cdea <_vfiprintf_r+0x1fe>
9000cdde:	89ab      	ldrh	r3, [r5, #12]
9000cde0:	059a      	lsls	r2, r3, #22
9000cde2:	d402      	bmi.n	9000cdea <_vfiprintf_r+0x1fe>
9000cde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
9000cde6:	f7ff fd25 	bl	9000c834 <__retarget_lock_release_recursive>
9000cdea:	89ab      	ldrh	r3, [r5, #12]
9000cdec:	065b      	lsls	r3, r3, #25
9000cdee:	f53f af1f 	bmi.w	9000cc30 <_vfiprintf_r+0x44>
9000cdf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
9000cdf4:	e71e      	b.n	9000cc34 <_vfiprintf_r+0x48>
9000cdf6:	ab03      	add	r3, sp, #12
9000cdf8:	9300      	str	r3, [sp, #0]
9000cdfa:	462a      	mov	r2, r5
9000cdfc:	4b05      	ldr	r3, [pc, #20]	@ (9000ce14 <_vfiprintf_r+0x228>)
9000cdfe:	a904      	add	r1, sp, #16
9000ce00:	4630      	mov	r0, r6
9000ce02:	f000 f879 	bl	9000cef8 <_printf_i>
9000ce06:	e7e4      	b.n	9000cdd2 <_vfiprintf_r+0x1e6>
9000ce08:	9000fa6c 	.word	0x9000fa6c
9000ce0c:	9000fa76 	.word	0x9000fa76
9000ce10:	00000000 	.word	0x00000000
9000ce14:	9000cbc7 	.word	0x9000cbc7
9000ce18:	9000fa72 	.word	0x9000fa72

9000ce1c <_printf_common>:
9000ce1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ce20:	4616      	mov	r6, r2
9000ce22:	4698      	mov	r8, r3
9000ce24:	688a      	ldr	r2, [r1, #8]
9000ce26:	690b      	ldr	r3, [r1, #16]
9000ce28:	f8dd 9020 	ldr.w	r9, [sp, #32]
9000ce2c:	4293      	cmp	r3, r2
9000ce2e:	bfb8      	it	lt
9000ce30:	4613      	movlt	r3, r2
9000ce32:	6033      	str	r3, [r6, #0]
9000ce34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
9000ce38:	4607      	mov	r7, r0
9000ce3a:	460c      	mov	r4, r1
9000ce3c:	b10a      	cbz	r2, 9000ce42 <_printf_common+0x26>
9000ce3e:	3301      	adds	r3, #1
9000ce40:	6033      	str	r3, [r6, #0]
9000ce42:	6823      	ldr	r3, [r4, #0]
9000ce44:	0699      	lsls	r1, r3, #26
9000ce46:	bf42      	ittt	mi
9000ce48:	6833      	ldrmi	r3, [r6, #0]
9000ce4a:	3302      	addmi	r3, #2
9000ce4c:	6033      	strmi	r3, [r6, #0]
9000ce4e:	6825      	ldr	r5, [r4, #0]
9000ce50:	f015 0506 	ands.w	r5, r5, #6
9000ce54:	d106      	bne.n	9000ce64 <_printf_common+0x48>
9000ce56:	f104 0a19 	add.w	sl, r4, #25
9000ce5a:	68e3      	ldr	r3, [r4, #12]
9000ce5c:	6832      	ldr	r2, [r6, #0]
9000ce5e:	1a9b      	subs	r3, r3, r2
9000ce60:	42ab      	cmp	r3, r5
9000ce62:	dc26      	bgt.n	9000ceb2 <_printf_common+0x96>
9000ce64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
9000ce68:	6822      	ldr	r2, [r4, #0]
9000ce6a:	3b00      	subs	r3, #0
9000ce6c:	bf18      	it	ne
9000ce6e:	2301      	movne	r3, #1
9000ce70:	0692      	lsls	r2, r2, #26
9000ce72:	d42b      	bmi.n	9000cecc <_printf_common+0xb0>
9000ce74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
9000ce78:	4641      	mov	r1, r8
9000ce7a:	4638      	mov	r0, r7
9000ce7c:	47c8      	blx	r9
9000ce7e:	3001      	adds	r0, #1
9000ce80:	d01e      	beq.n	9000cec0 <_printf_common+0xa4>
9000ce82:	6823      	ldr	r3, [r4, #0]
9000ce84:	6922      	ldr	r2, [r4, #16]
9000ce86:	f003 0306 	and.w	r3, r3, #6
9000ce8a:	2b04      	cmp	r3, #4
9000ce8c:	bf02      	ittt	eq
9000ce8e:	68e5      	ldreq	r5, [r4, #12]
9000ce90:	6833      	ldreq	r3, [r6, #0]
9000ce92:	1aed      	subeq	r5, r5, r3
9000ce94:	68a3      	ldr	r3, [r4, #8]
9000ce96:	bf0c      	ite	eq
9000ce98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000ce9c:	2500      	movne	r5, #0
9000ce9e:	4293      	cmp	r3, r2
9000cea0:	bfc4      	itt	gt
9000cea2:	1a9b      	subgt	r3, r3, r2
9000cea4:	18ed      	addgt	r5, r5, r3
9000cea6:	2600      	movs	r6, #0
9000cea8:	341a      	adds	r4, #26
9000ceaa:	42b5      	cmp	r5, r6
9000ceac:	d11a      	bne.n	9000cee4 <_printf_common+0xc8>
9000ceae:	2000      	movs	r0, #0
9000ceb0:	e008      	b.n	9000cec4 <_printf_common+0xa8>
9000ceb2:	2301      	movs	r3, #1
9000ceb4:	4652      	mov	r2, sl
9000ceb6:	4641      	mov	r1, r8
9000ceb8:	4638      	mov	r0, r7
9000ceba:	47c8      	blx	r9
9000cebc:	3001      	adds	r0, #1
9000cebe:	d103      	bne.n	9000cec8 <_printf_common+0xac>
9000cec0:	f04f 30ff 	mov.w	r0, #4294967295
9000cec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000cec8:	3501      	adds	r5, #1
9000ceca:	e7c6      	b.n	9000ce5a <_printf_common+0x3e>
9000cecc:	18e1      	adds	r1, r4, r3
9000cece:	1c5a      	adds	r2, r3, #1
9000ced0:	2030      	movs	r0, #48	@ 0x30
9000ced2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
9000ced6:	4422      	add	r2, r4
9000ced8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
9000cedc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
9000cee0:	3302      	adds	r3, #2
9000cee2:	e7c7      	b.n	9000ce74 <_printf_common+0x58>
9000cee4:	2301      	movs	r3, #1
9000cee6:	4622      	mov	r2, r4
9000cee8:	4641      	mov	r1, r8
9000ceea:	4638      	mov	r0, r7
9000ceec:	47c8      	blx	r9
9000ceee:	3001      	adds	r0, #1
9000cef0:	d0e6      	beq.n	9000cec0 <_printf_common+0xa4>
9000cef2:	3601      	adds	r6, #1
9000cef4:	e7d9      	b.n	9000ceaa <_printf_common+0x8e>
	...

9000cef8 <_printf_i>:
9000cef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000cefc:	7e0f      	ldrb	r7, [r1, #24]
9000cefe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
9000cf00:	2f78      	cmp	r7, #120	@ 0x78
9000cf02:	4691      	mov	r9, r2
9000cf04:	4680      	mov	r8, r0
9000cf06:	460c      	mov	r4, r1
9000cf08:	469a      	mov	sl, r3
9000cf0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
9000cf0e:	d807      	bhi.n	9000cf20 <_printf_i+0x28>
9000cf10:	2f62      	cmp	r7, #98	@ 0x62
9000cf12:	d80a      	bhi.n	9000cf2a <_printf_i+0x32>
9000cf14:	2f00      	cmp	r7, #0
9000cf16:	f000 80d1 	beq.w	9000d0bc <_printf_i+0x1c4>
9000cf1a:	2f58      	cmp	r7, #88	@ 0x58
9000cf1c:	f000 80b8 	beq.w	9000d090 <_printf_i+0x198>
9000cf20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000cf24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
9000cf28:	e03a      	b.n	9000cfa0 <_printf_i+0xa8>
9000cf2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
9000cf2e:	2b15      	cmp	r3, #21
9000cf30:	d8f6      	bhi.n	9000cf20 <_printf_i+0x28>
9000cf32:	a101      	add	r1, pc, #4	@ (adr r1, 9000cf38 <_printf_i+0x40>)
9000cf34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000cf38:	9000cf91 	.word	0x9000cf91
9000cf3c:	9000cfa5 	.word	0x9000cfa5
9000cf40:	9000cf21 	.word	0x9000cf21
9000cf44:	9000cf21 	.word	0x9000cf21
9000cf48:	9000cf21 	.word	0x9000cf21
9000cf4c:	9000cf21 	.word	0x9000cf21
9000cf50:	9000cfa5 	.word	0x9000cfa5
9000cf54:	9000cf21 	.word	0x9000cf21
9000cf58:	9000cf21 	.word	0x9000cf21
9000cf5c:	9000cf21 	.word	0x9000cf21
9000cf60:	9000cf21 	.word	0x9000cf21
9000cf64:	9000d0a3 	.word	0x9000d0a3
9000cf68:	9000cfcf 	.word	0x9000cfcf
9000cf6c:	9000d05d 	.word	0x9000d05d
9000cf70:	9000cf21 	.word	0x9000cf21
9000cf74:	9000cf21 	.word	0x9000cf21
9000cf78:	9000d0c5 	.word	0x9000d0c5
9000cf7c:	9000cf21 	.word	0x9000cf21
9000cf80:	9000cfcf 	.word	0x9000cfcf
9000cf84:	9000cf21 	.word	0x9000cf21
9000cf88:	9000cf21 	.word	0x9000cf21
9000cf8c:	9000d065 	.word	0x9000d065
9000cf90:	6833      	ldr	r3, [r6, #0]
9000cf92:	1d1a      	adds	r2, r3, #4
9000cf94:	681b      	ldr	r3, [r3, #0]
9000cf96:	6032      	str	r2, [r6, #0]
9000cf98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
9000cf9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
9000cfa0:	2301      	movs	r3, #1
9000cfa2:	e09c      	b.n	9000d0de <_printf_i+0x1e6>
9000cfa4:	6833      	ldr	r3, [r6, #0]
9000cfa6:	6820      	ldr	r0, [r4, #0]
9000cfa8:	1d19      	adds	r1, r3, #4
9000cfaa:	6031      	str	r1, [r6, #0]
9000cfac:	0606      	lsls	r6, r0, #24
9000cfae:	d501      	bpl.n	9000cfb4 <_printf_i+0xbc>
9000cfb0:	681d      	ldr	r5, [r3, #0]
9000cfb2:	e003      	b.n	9000cfbc <_printf_i+0xc4>
9000cfb4:	0645      	lsls	r5, r0, #25
9000cfb6:	d5fb      	bpl.n	9000cfb0 <_printf_i+0xb8>
9000cfb8:	f9b3 5000 	ldrsh.w	r5, [r3]
9000cfbc:	2d00      	cmp	r5, #0
9000cfbe:	da03      	bge.n	9000cfc8 <_printf_i+0xd0>
9000cfc0:	232d      	movs	r3, #45	@ 0x2d
9000cfc2:	426d      	negs	r5, r5
9000cfc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000cfc8:	4858      	ldr	r0, [pc, #352]	@ (9000d12c <_printf_i+0x234>)
9000cfca:	230a      	movs	r3, #10
9000cfcc:	e011      	b.n	9000cff2 <_printf_i+0xfa>
9000cfce:	6821      	ldr	r1, [r4, #0]
9000cfd0:	6833      	ldr	r3, [r6, #0]
9000cfd2:	0608      	lsls	r0, r1, #24
9000cfd4:	f853 5b04 	ldr.w	r5, [r3], #4
9000cfd8:	d402      	bmi.n	9000cfe0 <_printf_i+0xe8>
9000cfda:	0649      	lsls	r1, r1, #25
9000cfdc:	bf48      	it	mi
9000cfde:	b2ad      	uxthmi	r5, r5
9000cfe0:	2f6f      	cmp	r7, #111	@ 0x6f
9000cfe2:	4852      	ldr	r0, [pc, #328]	@ (9000d12c <_printf_i+0x234>)
9000cfe4:	6033      	str	r3, [r6, #0]
9000cfe6:	bf14      	ite	ne
9000cfe8:	230a      	movne	r3, #10
9000cfea:	2308      	moveq	r3, #8
9000cfec:	2100      	movs	r1, #0
9000cfee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
9000cff2:	6866      	ldr	r6, [r4, #4]
9000cff4:	60a6      	str	r6, [r4, #8]
9000cff6:	2e00      	cmp	r6, #0
9000cff8:	db05      	blt.n	9000d006 <_printf_i+0x10e>
9000cffa:	6821      	ldr	r1, [r4, #0]
9000cffc:	432e      	orrs	r6, r5
9000cffe:	f021 0104 	bic.w	r1, r1, #4
9000d002:	6021      	str	r1, [r4, #0]
9000d004:	d04b      	beq.n	9000d09e <_printf_i+0x1a6>
9000d006:	4616      	mov	r6, r2
9000d008:	fbb5 f1f3 	udiv	r1, r5, r3
9000d00c:	fb03 5711 	mls	r7, r3, r1, r5
9000d010:	5dc7      	ldrb	r7, [r0, r7]
9000d012:	f806 7d01 	strb.w	r7, [r6, #-1]!
9000d016:	462f      	mov	r7, r5
9000d018:	42bb      	cmp	r3, r7
9000d01a:	460d      	mov	r5, r1
9000d01c:	d9f4      	bls.n	9000d008 <_printf_i+0x110>
9000d01e:	2b08      	cmp	r3, #8
9000d020:	d10b      	bne.n	9000d03a <_printf_i+0x142>
9000d022:	6823      	ldr	r3, [r4, #0]
9000d024:	07df      	lsls	r7, r3, #31
9000d026:	d508      	bpl.n	9000d03a <_printf_i+0x142>
9000d028:	6923      	ldr	r3, [r4, #16]
9000d02a:	6861      	ldr	r1, [r4, #4]
9000d02c:	4299      	cmp	r1, r3
9000d02e:	bfde      	ittt	le
9000d030:	2330      	movle	r3, #48	@ 0x30
9000d032:	f806 3c01 	strble.w	r3, [r6, #-1]
9000d036:	f106 36ff 	addle.w	r6, r6, #4294967295
9000d03a:	1b92      	subs	r2, r2, r6
9000d03c:	6122      	str	r2, [r4, #16]
9000d03e:	f8cd a000 	str.w	sl, [sp]
9000d042:	464b      	mov	r3, r9
9000d044:	aa03      	add	r2, sp, #12
9000d046:	4621      	mov	r1, r4
9000d048:	4640      	mov	r0, r8
9000d04a:	f7ff fee7 	bl	9000ce1c <_printf_common>
9000d04e:	3001      	adds	r0, #1
9000d050:	d14a      	bne.n	9000d0e8 <_printf_i+0x1f0>
9000d052:	f04f 30ff 	mov.w	r0, #4294967295
9000d056:	b004      	add	sp, #16
9000d058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d05c:	6823      	ldr	r3, [r4, #0]
9000d05e:	f043 0320 	orr.w	r3, r3, #32
9000d062:	6023      	str	r3, [r4, #0]
9000d064:	4832      	ldr	r0, [pc, #200]	@ (9000d130 <_printf_i+0x238>)
9000d066:	2778      	movs	r7, #120	@ 0x78
9000d068:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
9000d06c:	6823      	ldr	r3, [r4, #0]
9000d06e:	6831      	ldr	r1, [r6, #0]
9000d070:	061f      	lsls	r7, r3, #24
9000d072:	f851 5b04 	ldr.w	r5, [r1], #4
9000d076:	d402      	bmi.n	9000d07e <_printf_i+0x186>
9000d078:	065f      	lsls	r7, r3, #25
9000d07a:	bf48      	it	mi
9000d07c:	b2ad      	uxthmi	r5, r5
9000d07e:	6031      	str	r1, [r6, #0]
9000d080:	07d9      	lsls	r1, r3, #31
9000d082:	bf44      	itt	mi
9000d084:	f043 0320 	orrmi.w	r3, r3, #32
9000d088:	6023      	strmi	r3, [r4, #0]
9000d08a:	b11d      	cbz	r5, 9000d094 <_printf_i+0x19c>
9000d08c:	2310      	movs	r3, #16
9000d08e:	e7ad      	b.n	9000cfec <_printf_i+0xf4>
9000d090:	4826      	ldr	r0, [pc, #152]	@ (9000d12c <_printf_i+0x234>)
9000d092:	e7e9      	b.n	9000d068 <_printf_i+0x170>
9000d094:	6823      	ldr	r3, [r4, #0]
9000d096:	f023 0320 	bic.w	r3, r3, #32
9000d09a:	6023      	str	r3, [r4, #0]
9000d09c:	e7f6      	b.n	9000d08c <_printf_i+0x194>
9000d09e:	4616      	mov	r6, r2
9000d0a0:	e7bd      	b.n	9000d01e <_printf_i+0x126>
9000d0a2:	6833      	ldr	r3, [r6, #0]
9000d0a4:	6825      	ldr	r5, [r4, #0]
9000d0a6:	6961      	ldr	r1, [r4, #20]
9000d0a8:	1d18      	adds	r0, r3, #4
9000d0aa:	6030      	str	r0, [r6, #0]
9000d0ac:	062e      	lsls	r6, r5, #24
9000d0ae:	681b      	ldr	r3, [r3, #0]
9000d0b0:	d501      	bpl.n	9000d0b6 <_printf_i+0x1be>
9000d0b2:	6019      	str	r1, [r3, #0]
9000d0b4:	e002      	b.n	9000d0bc <_printf_i+0x1c4>
9000d0b6:	0668      	lsls	r0, r5, #25
9000d0b8:	d5fb      	bpl.n	9000d0b2 <_printf_i+0x1ba>
9000d0ba:	8019      	strh	r1, [r3, #0]
9000d0bc:	2300      	movs	r3, #0
9000d0be:	6123      	str	r3, [r4, #16]
9000d0c0:	4616      	mov	r6, r2
9000d0c2:	e7bc      	b.n	9000d03e <_printf_i+0x146>
9000d0c4:	6833      	ldr	r3, [r6, #0]
9000d0c6:	1d1a      	adds	r2, r3, #4
9000d0c8:	6032      	str	r2, [r6, #0]
9000d0ca:	681e      	ldr	r6, [r3, #0]
9000d0cc:	6862      	ldr	r2, [r4, #4]
9000d0ce:	2100      	movs	r1, #0
9000d0d0:	4630      	mov	r0, r6
9000d0d2:	f7f3 f905 	bl	900002e0 <memchr>
9000d0d6:	b108      	cbz	r0, 9000d0dc <_printf_i+0x1e4>
9000d0d8:	1b80      	subs	r0, r0, r6
9000d0da:	6060      	str	r0, [r4, #4]
9000d0dc:	6863      	ldr	r3, [r4, #4]
9000d0de:	6123      	str	r3, [r4, #16]
9000d0e0:	2300      	movs	r3, #0
9000d0e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
9000d0e6:	e7aa      	b.n	9000d03e <_printf_i+0x146>
9000d0e8:	6923      	ldr	r3, [r4, #16]
9000d0ea:	4632      	mov	r2, r6
9000d0ec:	4649      	mov	r1, r9
9000d0ee:	4640      	mov	r0, r8
9000d0f0:	47d0      	blx	sl
9000d0f2:	3001      	adds	r0, #1
9000d0f4:	d0ad      	beq.n	9000d052 <_printf_i+0x15a>
9000d0f6:	6823      	ldr	r3, [r4, #0]
9000d0f8:	079b      	lsls	r3, r3, #30
9000d0fa:	d413      	bmi.n	9000d124 <_printf_i+0x22c>
9000d0fc:	68e0      	ldr	r0, [r4, #12]
9000d0fe:	9b03      	ldr	r3, [sp, #12]
9000d100:	4298      	cmp	r0, r3
9000d102:	bfb8      	it	lt
9000d104:	4618      	movlt	r0, r3
9000d106:	e7a6      	b.n	9000d056 <_printf_i+0x15e>
9000d108:	2301      	movs	r3, #1
9000d10a:	4632      	mov	r2, r6
9000d10c:	4649      	mov	r1, r9
9000d10e:	4640      	mov	r0, r8
9000d110:	47d0      	blx	sl
9000d112:	3001      	adds	r0, #1
9000d114:	d09d      	beq.n	9000d052 <_printf_i+0x15a>
9000d116:	3501      	adds	r5, #1
9000d118:	68e3      	ldr	r3, [r4, #12]
9000d11a:	9903      	ldr	r1, [sp, #12]
9000d11c:	1a5b      	subs	r3, r3, r1
9000d11e:	42ab      	cmp	r3, r5
9000d120:	dcf2      	bgt.n	9000d108 <_printf_i+0x210>
9000d122:	e7eb      	b.n	9000d0fc <_printf_i+0x204>
9000d124:	2500      	movs	r5, #0
9000d126:	f104 0619 	add.w	r6, r4, #25
9000d12a:	e7f5      	b.n	9000d118 <_printf_i+0x220>
9000d12c:	9000fa7d 	.word	0x9000fa7d
9000d130:	9000fa8e 	.word	0x9000fa8e

9000d134 <__sflush_r>:
9000d134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
9000d138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d13c:	0716      	lsls	r6, r2, #28
9000d13e:	4605      	mov	r5, r0
9000d140:	460c      	mov	r4, r1
9000d142:	d454      	bmi.n	9000d1ee <__sflush_r+0xba>
9000d144:	684b      	ldr	r3, [r1, #4]
9000d146:	2b00      	cmp	r3, #0
9000d148:	dc02      	bgt.n	9000d150 <__sflush_r+0x1c>
9000d14a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
9000d14c:	2b00      	cmp	r3, #0
9000d14e:	dd48      	ble.n	9000d1e2 <__sflush_r+0xae>
9000d150:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d152:	2e00      	cmp	r6, #0
9000d154:	d045      	beq.n	9000d1e2 <__sflush_r+0xae>
9000d156:	2300      	movs	r3, #0
9000d158:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
9000d15c:	682f      	ldr	r7, [r5, #0]
9000d15e:	6a21      	ldr	r1, [r4, #32]
9000d160:	602b      	str	r3, [r5, #0]
9000d162:	d030      	beq.n	9000d1c6 <__sflush_r+0x92>
9000d164:	6d62      	ldr	r2, [r4, #84]	@ 0x54
9000d166:	89a3      	ldrh	r3, [r4, #12]
9000d168:	0759      	lsls	r1, r3, #29
9000d16a:	d505      	bpl.n	9000d178 <__sflush_r+0x44>
9000d16c:	6863      	ldr	r3, [r4, #4]
9000d16e:	1ad2      	subs	r2, r2, r3
9000d170:	6b63      	ldr	r3, [r4, #52]	@ 0x34
9000d172:	b10b      	cbz	r3, 9000d178 <__sflush_r+0x44>
9000d174:	6c23      	ldr	r3, [r4, #64]	@ 0x40
9000d176:	1ad2      	subs	r2, r2, r3
9000d178:	2300      	movs	r3, #0
9000d17a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
9000d17c:	6a21      	ldr	r1, [r4, #32]
9000d17e:	4628      	mov	r0, r5
9000d180:	47b0      	blx	r6
9000d182:	1c43      	adds	r3, r0, #1
9000d184:	89a3      	ldrh	r3, [r4, #12]
9000d186:	d106      	bne.n	9000d196 <__sflush_r+0x62>
9000d188:	6829      	ldr	r1, [r5, #0]
9000d18a:	291d      	cmp	r1, #29
9000d18c:	d82b      	bhi.n	9000d1e6 <__sflush_r+0xb2>
9000d18e:	4a2a      	ldr	r2, [pc, #168]	@ (9000d238 <__sflush_r+0x104>)
9000d190:	40ca      	lsrs	r2, r1
9000d192:	07d6      	lsls	r6, r2, #31
9000d194:	d527      	bpl.n	9000d1e6 <__sflush_r+0xb2>
9000d196:	2200      	movs	r2, #0
9000d198:	6062      	str	r2, [r4, #4]
9000d19a:	04d9      	lsls	r1, r3, #19
9000d19c:	6922      	ldr	r2, [r4, #16]
9000d19e:	6022      	str	r2, [r4, #0]
9000d1a0:	d504      	bpl.n	9000d1ac <__sflush_r+0x78>
9000d1a2:	1c42      	adds	r2, r0, #1
9000d1a4:	d101      	bne.n	9000d1aa <__sflush_r+0x76>
9000d1a6:	682b      	ldr	r3, [r5, #0]
9000d1a8:	b903      	cbnz	r3, 9000d1ac <__sflush_r+0x78>
9000d1aa:	6560      	str	r0, [r4, #84]	@ 0x54
9000d1ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
9000d1ae:	602f      	str	r7, [r5, #0]
9000d1b0:	b1b9      	cbz	r1, 9000d1e2 <__sflush_r+0xae>
9000d1b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
9000d1b6:	4299      	cmp	r1, r3
9000d1b8:	d002      	beq.n	9000d1c0 <__sflush_r+0x8c>
9000d1ba:	4628      	mov	r0, r5
9000d1bc:	f7ff fb4a 	bl	9000c854 <_free_r>
9000d1c0:	2300      	movs	r3, #0
9000d1c2:	6363      	str	r3, [r4, #52]	@ 0x34
9000d1c4:	e00d      	b.n	9000d1e2 <__sflush_r+0xae>
9000d1c6:	2301      	movs	r3, #1
9000d1c8:	4628      	mov	r0, r5
9000d1ca:	47b0      	blx	r6
9000d1cc:	4602      	mov	r2, r0
9000d1ce:	1c50      	adds	r0, r2, #1
9000d1d0:	d1c9      	bne.n	9000d166 <__sflush_r+0x32>
9000d1d2:	682b      	ldr	r3, [r5, #0]
9000d1d4:	2b00      	cmp	r3, #0
9000d1d6:	d0c6      	beq.n	9000d166 <__sflush_r+0x32>
9000d1d8:	2b1d      	cmp	r3, #29
9000d1da:	d001      	beq.n	9000d1e0 <__sflush_r+0xac>
9000d1dc:	2b16      	cmp	r3, #22
9000d1de:	d11e      	bne.n	9000d21e <__sflush_r+0xea>
9000d1e0:	602f      	str	r7, [r5, #0]
9000d1e2:	2000      	movs	r0, #0
9000d1e4:	e022      	b.n	9000d22c <__sflush_r+0xf8>
9000d1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d1ea:	b21b      	sxth	r3, r3
9000d1ec:	e01b      	b.n	9000d226 <__sflush_r+0xf2>
9000d1ee:	690f      	ldr	r7, [r1, #16]
9000d1f0:	2f00      	cmp	r7, #0
9000d1f2:	d0f6      	beq.n	9000d1e2 <__sflush_r+0xae>
9000d1f4:	0793      	lsls	r3, r2, #30
9000d1f6:	680e      	ldr	r6, [r1, #0]
9000d1f8:	bf08      	it	eq
9000d1fa:	694b      	ldreq	r3, [r1, #20]
9000d1fc:	600f      	str	r7, [r1, #0]
9000d1fe:	bf18      	it	ne
9000d200:	2300      	movne	r3, #0
9000d202:	eba6 0807 	sub.w	r8, r6, r7
9000d206:	608b      	str	r3, [r1, #8]
9000d208:	f1b8 0f00 	cmp.w	r8, #0
9000d20c:	dde9      	ble.n	9000d1e2 <__sflush_r+0xae>
9000d20e:	6a21      	ldr	r1, [r4, #32]
9000d210:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
9000d212:	4643      	mov	r3, r8
9000d214:	463a      	mov	r2, r7
9000d216:	4628      	mov	r0, r5
9000d218:	47b0      	blx	r6
9000d21a:	2800      	cmp	r0, #0
9000d21c:	dc08      	bgt.n	9000d230 <__sflush_r+0xfc>
9000d21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
9000d226:	81a3      	strh	r3, [r4, #12]
9000d228:	f04f 30ff 	mov.w	r0, #4294967295
9000d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d230:	4407      	add	r7, r0
9000d232:	eba8 0800 	sub.w	r8, r8, r0
9000d236:	e7e7      	b.n	9000d208 <__sflush_r+0xd4>
9000d238:	20400001 	.word	0x20400001

9000d23c <_fflush_r>:
9000d23c:	b538      	push	{r3, r4, r5, lr}
9000d23e:	690b      	ldr	r3, [r1, #16]
9000d240:	4605      	mov	r5, r0
9000d242:	460c      	mov	r4, r1
9000d244:	b913      	cbnz	r3, 9000d24c <_fflush_r+0x10>
9000d246:	2500      	movs	r5, #0
9000d248:	4628      	mov	r0, r5
9000d24a:	bd38      	pop	{r3, r4, r5, pc}
9000d24c:	b118      	cbz	r0, 9000d256 <_fflush_r+0x1a>
9000d24e:	6a03      	ldr	r3, [r0, #32]
9000d250:	b90b      	cbnz	r3, 9000d256 <_fflush_r+0x1a>
9000d252:	f7ff f8c5 	bl	9000c3e0 <__sinit>
9000d256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d25a:	2b00      	cmp	r3, #0
9000d25c:	d0f3      	beq.n	9000d246 <_fflush_r+0xa>
9000d25e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
9000d260:	07d0      	lsls	r0, r2, #31
9000d262:	d404      	bmi.n	9000d26e <_fflush_r+0x32>
9000d264:	0599      	lsls	r1, r3, #22
9000d266:	d402      	bmi.n	9000d26e <_fflush_r+0x32>
9000d268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d26a:	f7ff fae2 	bl	9000c832 <__retarget_lock_acquire_recursive>
9000d26e:	4628      	mov	r0, r5
9000d270:	4621      	mov	r1, r4
9000d272:	f7ff ff5f 	bl	9000d134 <__sflush_r>
9000d276:	6e63      	ldr	r3, [r4, #100]	@ 0x64
9000d278:	07da      	lsls	r2, r3, #31
9000d27a:	4605      	mov	r5, r0
9000d27c:	d4e4      	bmi.n	9000d248 <_fflush_r+0xc>
9000d27e:	89a3      	ldrh	r3, [r4, #12]
9000d280:	059b      	lsls	r3, r3, #22
9000d282:	d4e1      	bmi.n	9000d248 <_fflush_r+0xc>
9000d284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
9000d286:	f7ff fad5 	bl	9000c834 <__retarget_lock_release_recursive>
9000d28a:	e7dd      	b.n	9000d248 <_fflush_r+0xc>

9000d28c <__swhatbuf_r>:
9000d28c:	b570      	push	{r4, r5, r6, lr}
9000d28e:	460c      	mov	r4, r1
9000d290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000d294:	2900      	cmp	r1, #0
9000d296:	b096      	sub	sp, #88	@ 0x58
9000d298:	4615      	mov	r5, r2
9000d29a:	461e      	mov	r6, r3
9000d29c:	da0d      	bge.n	9000d2ba <__swhatbuf_r+0x2e>
9000d29e:	89a3      	ldrh	r3, [r4, #12]
9000d2a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
9000d2a4:	f04f 0100 	mov.w	r1, #0
9000d2a8:	bf14      	ite	ne
9000d2aa:	2340      	movne	r3, #64	@ 0x40
9000d2ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
9000d2b0:	2000      	movs	r0, #0
9000d2b2:	6031      	str	r1, [r6, #0]
9000d2b4:	602b      	str	r3, [r5, #0]
9000d2b6:	b016      	add	sp, #88	@ 0x58
9000d2b8:	bd70      	pop	{r4, r5, r6, pc}
9000d2ba:	466a      	mov	r2, sp
9000d2bc:	f000 f862 	bl	9000d384 <_fstat_r>
9000d2c0:	2800      	cmp	r0, #0
9000d2c2:	dbec      	blt.n	9000d29e <__swhatbuf_r+0x12>
9000d2c4:	9901      	ldr	r1, [sp, #4]
9000d2c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
9000d2ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
9000d2ce:	4259      	negs	r1, r3
9000d2d0:	4159      	adcs	r1, r3
9000d2d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
9000d2d6:	e7eb      	b.n	9000d2b0 <__swhatbuf_r+0x24>

9000d2d8 <__smakebuf_r>:
9000d2d8:	898b      	ldrh	r3, [r1, #12]
9000d2da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000d2dc:	079d      	lsls	r5, r3, #30
9000d2de:	4606      	mov	r6, r0
9000d2e0:	460c      	mov	r4, r1
9000d2e2:	d507      	bpl.n	9000d2f4 <__smakebuf_r+0x1c>
9000d2e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
9000d2e8:	6023      	str	r3, [r4, #0]
9000d2ea:	6123      	str	r3, [r4, #16]
9000d2ec:	2301      	movs	r3, #1
9000d2ee:	6163      	str	r3, [r4, #20]
9000d2f0:	b003      	add	sp, #12
9000d2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000d2f4:	ab01      	add	r3, sp, #4
9000d2f6:	466a      	mov	r2, sp
9000d2f8:	f7ff ffc8 	bl	9000d28c <__swhatbuf_r>
9000d2fc:	9f00      	ldr	r7, [sp, #0]
9000d2fe:	4605      	mov	r5, r0
9000d300:	4639      	mov	r1, r7
9000d302:	4630      	mov	r0, r6
9000d304:	f7fe ff54 	bl	9000c1b0 <_malloc_r>
9000d308:	b948      	cbnz	r0, 9000d31e <__smakebuf_r+0x46>
9000d30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000d30e:	059a      	lsls	r2, r3, #22
9000d310:	d4ee      	bmi.n	9000d2f0 <__smakebuf_r+0x18>
9000d312:	f023 0303 	bic.w	r3, r3, #3
9000d316:	f043 0302 	orr.w	r3, r3, #2
9000d31a:	81a3      	strh	r3, [r4, #12]
9000d31c:	e7e2      	b.n	9000d2e4 <__smakebuf_r+0xc>
9000d31e:	89a3      	ldrh	r3, [r4, #12]
9000d320:	6020      	str	r0, [r4, #0]
9000d322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
9000d326:	81a3      	strh	r3, [r4, #12]
9000d328:	9b01      	ldr	r3, [sp, #4]
9000d32a:	e9c4 0704 	strd	r0, r7, [r4, #16]
9000d32e:	b15b      	cbz	r3, 9000d348 <__smakebuf_r+0x70>
9000d330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000d334:	4630      	mov	r0, r6
9000d336:	f000 f837 	bl	9000d3a8 <_isatty_r>
9000d33a:	b128      	cbz	r0, 9000d348 <__smakebuf_r+0x70>
9000d33c:	89a3      	ldrh	r3, [r4, #12]
9000d33e:	f023 0303 	bic.w	r3, r3, #3
9000d342:	f043 0301 	orr.w	r3, r3, #1
9000d346:	81a3      	strh	r3, [r4, #12]
9000d348:	89a3      	ldrh	r3, [r4, #12]
9000d34a:	431d      	orrs	r5, r3
9000d34c:	81a5      	strh	r5, [r4, #12]
9000d34e:	e7cf      	b.n	9000d2f0 <__smakebuf_r+0x18>

9000d350 <memmove>:
9000d350:	4288      	cmp	r0, r1
9000d352:	b510      	push	{r4, lr}
9000d354:	eb01 0402 	add.w	r4, r1, r2
9000d358:	d902      	bls.n	9000d360 <memmove+0x10>
9000d35a:	4284      	cmp	r4, r0
9000d35c:	4623      	mov	r3, r4
9000d35e:	d807      	bhi.n	9000d370 <memmove+0x20>
9000d360:	1e43      	subs	r3, r0, #1
9000d362:	42a1      	cmp	r1, r4
9000d364:	d008      	beq.n	9000d378 <memmove+0x28>
9000d366:	f811 2b01 	ldrb.w	r2, [r1], #1
9000d36a:	f803 2f01 	strb.w	r2, [r3, #1]!
9000d36e:	e7f8      	b.n	9000d362 <memmove+0x12>
9000d370:	4402      	add	r2, r0
9000d372:	4601      	mov	r1, r0
9000d374:	428a      	cmp	r2, r1
9000d376:	d100      	bne.n	9000d37a <memmove+0x2a>
9000d378:	bd10      	pop	{r4, pc}
9000d37a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000d37e:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000d382:	e7f7      	b.n	9000d374 <memmove+0x24>

9000d384 <_fstat_r>:
9000d384:	b538      	push	{r3, r4, r5, lr}
9000d386:	4d07      	ldr	r5, [pc, #28]	@ (9000d3a4 <_fstat_r+0x20>)
9000d388:	2300      	movs	r3, #0
9000d38a:	4604      	mov	r4, r0
9000d38c:	4608      	mov	r0, r1
9000d38e:	4611      	mov	r1, r2
9000d390:	602b      	str	r3, [r5, #0]
9000d392:	f7f3 fe5a 	bl	9000104a <_fstat>
9000d396:	1c43      	adds	r3, r0, #1
9000d398:	d102      	bne.n	9000d3a0 <_fstat_r+0x1c>
9000d39a:	682b      	ldr	r3, [r5, #0]
9000d39c:	b103      	cbz	r3, 9000d3a0 <_fstat_r+0x1c>
9000d39e:	6023      	str	r3, [r4, #0]
9000d3a0:	bd38      	pop	{r3, r4, r5, pc}
9000d3a2:	bf00      	nop
9000d3a4:	20001498 	.word	0x20001498

9000d3a8 <_isatty_r>:
9000d3a8:	b538      	push	{r3, r4, r5, lr}
9000d3aa:	4d06      	ldr	r5, [pc, #24]	@ (9000d3c4 <_isatty_r+0x1c>)
9000d3ac:	2300      	movs	r3, #0
9000d3ae:	4604      	mov	r4, r0
9000d3b0:	4608      	mov	r0, r1
9000d3b2:	602b      	str	r3, [r5, #0]
9000d3b4:	f7f3 fe59 	bl	9000106a <_isatty>
9000d3b8:	1c43      	adds	r3, r0, #1
9000d3ba:	d102      	bne.n	9000d3c2 <_isatty_r+0x1a>
9000d3bc:	682b      	ldr	r3, [r5, #0]
9000d3be:	b103      	cbz	r3, 9000d3c2 <_isatty_r+0x1a>
9000d3c0:	6023      	str	r3, [r4, #0]
9000d3c2:	bd38      	pop	{r3, r4, r5, pc}
9000d3c4:	20001498 	.word	0x20001498

9000d3c8 <_realloc_r>:
9000d3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d3cc:	4607      	mov	r7, r0
9000d3ce:	4614      	mov	r4, r2
9000d3d0:	460d      	mov	r5, r1
9000d3d2:	b921      	cbnz	r1, 9000d3de <_realloc_r+0x16>
9000d3d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000d3d8:	4611      	mov	r1, r2
9000d3da:	f7fe bee9 	b.w	9000c1b0 <_malloc_r>
9000d3de:	b92a      	cbnz	r2, 9000d3ec <_realloc_r+0x24>
9000d3e0:	f7ff fa38 	bl	9000c854 <_free_r>
9000d3e4:	4625      	mov	r5, r4
9000d3e6:	4628      	mov	r0, r5
9000d3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d3ec:	f000 f81a 	bl	9000d424 <_malloc_usable_size_r>
9000d3f0:	4284      	cmp	r4, r0
9000d3f2:	4606      	mov	r6, r0
9000d3f4:	d802      	bhi.n	9000d3fc <_realloc_r+0x34>
9000d3f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000d3fa:	d8f4      	bhi.n	9000d3e6 <_realloc_r+0x1e>
9000d3fc:	4621      	mov	r1, r4
9000d3fe:	4638      	mov	r0, r7
9000d400:	f7fe fed6 	bl	9000c1b0 <_malloc_r>
9000d404:	4680      	mov	r8, r0
9000d406:	b908      	cbnz	r0, 9000d40c <_realloc_r+0x44>
9000d408:	4645      	mov	r5, r8
9000d40a:	e7ec      	b.n	9000d3e6 <_realloc_r+0x1e>
9000d40c:	42b4      	cmp	r4, r6
9000d40e:	4622      	mov	r2, r4
9000d410:	4629      	mov	r1, r5
9000d412:	bf28      	it	cs
9000d414:	4632      	movcs	r2, r6
9000d416:	f7ff fa0e 	bl	9000c836 <memcpy>
9000d41a:	4629      	mov	r1, r5
9000d41c:	4638      	mov	r0, r7
9000d41e:	f7ff fa19 	bl	9000c854 <_free_r>
9000d422:	e7f1      	b.n	9000d408 <_realloc_r+0x40>

9000d424 <_malloc_usable_size_r>:
9000d424:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000d428:	1f18      	subs	r0, r3, #4
9000d42a:	2b00      	cmp	r3, #0
9000d42c:	bfbc      	itt	lt
9000d42e:	580b      	ldrlt	r3, [r1, r0]
9000d430:	18c0      	addlt	r0, r0, r3
9000d432:	4770      	bx	lr

9000d434 <_init>:
9000d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d436:	bf00      	nop
9000d438:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d43a:	bc08      	pop	{r3}
9000d43c:	469e      	mov	lr, r3
9000d43e:	4770      	bx	lr

9000d440 <_fini>:
9000d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d442:	bf00      	nop
9000d444:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000d446:	bc08      	pop	{r3}
9000d448:	469e      	mov	lr, r3
9000d44a:	4770      	bx	lr
